Generation in the Lambek Calculus Framework: an Approach with
Semantic Proof Nets
Sylvain Pogodalla
sylvain.pogodalla@xrce.xerox.com
Xerox Researce Centre Europe
6, chemin de Maupertuis
38240 Meylan — France
1 Introduction
The linear logic (Girard, 1987) provides a powerful framework to express categorial grammars (Ajdukiewicz, 1935) and Lambek calculus (Lambek, 1958),
and a lot of work has presented proof nets uses for linguistic purposes, with a special look at proof nets for
Lambek calculus (Roorda, 1991; Lamarche and Retore,
1996). But they have mainly explored the syntactic capabilities of proof nets, describing parsing processes.
This paper wants to focus on the generation capabilities of proof nets thanks to their semantic readings
as expressed in (de Groote and Retore, 1996). The
main features of our proposal consist in the use of proof
nets for Lambek calculus, of the Curry-Howard isomorphism (Howard, 1980; Girard et al., 1988), of semantic proof nets with semantic expressions a la Montague (Montague, 1974; Dowty et al., 1981), and in an
algorithm for proof search with a target proof net.
Unlike a previous proposal for generation in the Lambek calculus framework (Merenciano and Morrill, 1997),
this point of view avoids the use of the A-term unification
to lead the generation process. And the algorithmic undecidabi lily of this latter mechanism (from second order
unification) does not occur any more.
In this work, we do not consider the choice of lexical items from a given semantic expression the syntactic
realization of which we want to generate, but rather the
way we can associate given lexical entries to fit the given
semantic expression and generate a syntactically correct
expression. For this purpose, we express our problem as
a proof search one in (multiplicative) linear logic which
is decidable. Moreover, we characterize the semantic
recipes of lexical items that provide a polynomial solution for the generation process.
2 Multi Usage Proof Nets
2.1 Proof Nets
(Girard, 1987) introduced proof nets formalism as the
natural deduction syntax for linear logic, also studied
in (Retore, 1993). They represent proofs in linear logic
with more accuracy than sequential proofs: on one hand
they are more compact, on the other hand they identify
unessentially different sequential proofs (for instance in
the order of the rules introduction).
From a one-sided sequent and a sequential proof of
it, we obtain a proof net by unfolding every formula as
a tree (whose nodes are the binary connectives and the
leaves are formulas, e.g. atomic ones) and linking together the formulas occurring in the same axiom rule of
the sequent calculus.
But proof nets have a more intrinsic definition that prevents us to come back every time to sequential proofs.
They can be defined as graphs with a certain property
(i.e. verifying a correctness criterion) such that every
proof net with this property corresponds to a sequential
proof and such that every proof net built from a sequential proof has this property. So that we do not present the
sequent calculus but only the proof net calculus.
In this paper, we do not consider all the proof nets, but
a part of the multiplicative ones: those of the intuitionistic implicative linear logic. In this case, sequents are
made of several antecedent formulas, but only one succedent formula. To deal with the intuitionistic notion with
proof nets (since we consider one-sided sequents), we
use the notion of polarities with the input (.: negative)
and the output (o: positive) (Danos, 1990; Lamarche,
1995) to decorate formulas. Positive ones correspond to
succedent formulas and negative ones to antecedent formulas.
Given the links of table 1, we define proof structures
as graphs made of these links such that:
I. any premise of any link is connected to exactly one
conclusion of some other link;
2. any conclusion of any link is connected to at most
one premise of some other link;
3. input (resp. output) premises are connected to input
(resp. output) conclusions of the same type.
Note that the two links for the negative and positive
implications correspond to the two connectives of the linear logic: Tensor and Par, so that we name these links
after these latter connectives. But in the following, only
the graphical forms of the links play a role.
Proof nets are proof structures that respect the correctness criterion.
We mentioned the intrinsic definition of proof nets that
enables the complete representation of sequential proofs.
The cut elimination property of sequent calculus also appears intrinsically in the proof net formalism with a sim
70
Table 1: Links
Name Axiom Tensor Par Cut
Link Pi 2 P1 -9
•
1
c
c
Premises none P17 P2 P1, P2 P1. P2
Conclusions c1, c, c c none
Types ci : A+ Pi : A+ Pi : A- Pt : Ae9 . A- P2 : B- P2 : B+ p : A+
c : (A ---0 B)- c : (A —0 B)+ 2
Table 2: Cut-elimination rewriting rules
Y,
I
.Y2
pie rewriting process described in table 2 (in case of complex formulas as in the third rewriting rule, those rules
can apply again on the result and propagate until reaching atoms).
2.2 Syntactic Proof Nets
Definitions of proof nets for Lambek calculus first appeared in (Roorda, 1991). They naturally raised as Lambek calculus is an intuitionistic fragment of non commutative linar logic (with two linear implications: 1&quot; on
the left and &quot;/&quot; on the right), and the consequences on
the proof net calculus we presented in section 2.1 are:
• we get two tensor links: one for the formulas
( 8/.4 ) (the one in table 1) and one for the formula (B \ A) - (just inverse the polarities of the
premises). And two par links : one for the formula
(A\B)+ and one for (A/B)+ (idem);
• formulas in Lambek's sequents are ordered, so that
conclusions of the proof nets are cyclically ordered
and axiom links may not cross.
If T,, is the set of basic types (e.g. 5', NP . ..), the set
T of syntactic types follows T ::= TpIT\TIT
Note that from a syntactic category, we can unfold the
formula to obtain a graph which only lacks axiom links
to become a proof structure. So that the parsing process
in this framework is, given the syntactic categories of the
items and their order, to put non crossing axiom links
such that the proof structure is a proof net. It means there
is a proof of given types in a certain order. For technical reasons, the order of the conclusions (i.e. the types
used) in the proof net to prove S is the reverse order of
the words associated to these types.
As an example, with the lexicon of table 3, proving
that John lives in Paris is a correct sentence leads to find
axiom links between the atoms in the figure 1(a). Figure 1(b) shows it actually happens and proves the syntactic correctness of the sentence.
Table 3: Lexicon
lexical entry syntaxic category
John NP
Paris NP
lives NP\S
in (S\S)/ATP
2.3 Semantic Proof Nets
In this section, we present how (de Groote and Retore,
1996) propose to use proof nets as semantic recipes. As
a slight difference with this work, we only deal in this
paper with semantic recipes that correspond to linear .\terms in the Montague's semantics framework.
The idea of expressing the semantics with proof
nets refers to the fact that both the A-terms (with the
Curry-Howard isomorphism) and the proof nets represent proofs of intuitionistic implicative linear logic. And
indeed, the linear A-terms may be encoded as proof nets.
On the other hand, given an intuitionistic implicative
proof net, a simple algorithm (given in (de Groote and
71
3— 3+
----yp \
s— N
N Pi os+
lives John
N P
NP—
Paris in
NP
lives John
• N
Paris in
in
(a) Unfolding oldie syntactic types (b) Matching the dual atoms to obtain a
proof net
Figure 1: Parsing of John lives in Paris
Retore, 1996), based on (Lamarche, 1995)'s dependency
paths). we can obtain a A-term.
Then, instead of associating a A-term to a lexical entry,
we can associate a proof net. For instance, on the semantic side, we can use the Montagovian types e and and
typed constants. Of course, we want to keep the compositionality principle of Montague's semantics that maps
any syntactic association rule with a semantic association rule. We express it in a straightforward way with the
following homomorphism (for as many basic categories
as required):
H(NP)= e li(A\B) =1-1(.4) —0 11(B)
'H(S) = t 1{(_41 B) = 7-t(B)
And for a lexical item, given its syntactic type, we assume its semantic proof net to verify:
• the type of its unique output conclusion is the homomorphic image of the syntactic type:
• its input conclusions (if any) are decorated with
typed constants.
An example of such a lexicon is given in table 4.
Figure 2: Syntactic proof net for John lives in Paris
Let us illustrate the process on a short example. We
use the lexicon of table 4 to parse the sentence John lives
in Paris. The first thing is to define with the syntactic categories of the different lexical items the syntactic proof
net of figure 2. It provides the way we should compose
the semantic recipes of each lexical item: we take its homomorphic image as in figure 4(a), and we substitute to
every input its semantic definition with cut-links.
Then the cut-elimination on the resulting proof net
gives a new proof net (on figure 4(b)) we can use as the
semantic analysis of John lives in Paris. If necessary, we
can come back to the A-term expression:(in p)(live j).
3 Generation: Stating the Problem
Let us now consider the problem of generation. We have
a given semantic proof net (like the one in figure 4(b))
and we want to gather syntactic entries with axiom links
such that:
I. this yields a correct (syntactic) proof net;
2. the meaning of the resulting proof net matches the
given semantic expression.
As we already said it, we assume that we have some lexical entries, and we try to make the generation with these
entries, each one used once and only once.
Thus, if we define:
• 110 the semantic proof net of the expression we want
to generate;
• Hi the semantic proof nets associated to the given
lexical entries i we use;
• Ti the unfolding in proof structure of the syntactic
formula of the lexical item i;
• F the forest made of the syntactic trees of all the
considered lexical entries plus the output (the type
we want to derive).
The generation problem (see figure 5) is to find a matching Al of atomic formulas of F such that:
I. F endowed with Al (let us call this proof structure
F') is a correct proof net;
2. when cut-linking H(F') with the Ili, and eliminating these cuts, we obtain 110.
This problem is not an original one: making proof
search with proof nets always leads to look for matching between atomic formulas of opposite polarities. So
that an answer to this problem would consist in taking F
and try every possible matching. This brute-force technique would of course appear essentially inefficient, and
our purpose is to use everything we know to prune the
search domain.
Nevertheless, note that even with such an algorithm,
we already reach the decidability (because the finitness
of the number of the matchings) without making any assumption on the form of the semantic entries (neither on
the order of the associated A-terms, nor the presence of a
free variable). And we want to keep these good properties in our algorithm.
72
Table 4: Lexicon
lexical entry syntaxic category associated A-term semantic proof net
John NP j 11John (cf. figure 3(a))
Mary NP m Hmary (cf. figure 3(b))
Paris NJ' p 'Paris (cf. figure 3(c))
Lives NP\S A.r.live x live H (cf. figure 3(d))
In (S\S)/NP Ax.Ay.(in .r)y Hin (cf. figure 3(e))
Seeks (NP\S)/(((NPV.5)/NP)\( P\S)) Ax.(try(xfind)) (cf. figure 3(f))
(f) nseeks
Figure 3: Semantic proof nets of the lexicon of table 4
(a) (b) (C) (d) [thy,
11John 'Mary n Paris
in
find
4 Cut-elimination as Matrix Computation
This section first establishes some equivalent relations
between cut-elimination on proof nets and matrix equations. We then show how to use these equations in the
generation process and how we can solve them. It enables us to characterize the properties required by the semantic proof nets to have a polynomial resolution of the
generation process.
4.1 Principles
First, as expressed in (Girard, 1989) and reformulated
in (Retore. 1990; Girard, 1993; Girard, 1995), we state
the algebraic representation of cut-elimination on proof
nets. Due to lack of space, we can not develop it, but the
principle is to express cut-elimination between axioms
with incidence matrices and paths in graphs.
Let us consider a proof net U. We denote by (ci )1<i‹,
all the vertices taking place for atoms in U. We can
define U the incidence matrix of axiom links, a the incidence matrix of cut links (we assume without loss of
generality that they happen only between axiom links),
and H the incidence matrix of axiom links of fl where 1-1
is the proof net resulting from all the cut eliminations on
r
73
(a) Before cut-elimination (b) After cut-elimination
Figure 4: Semantic proof nets for (in p)(live j)
Matching A/
Figure 5: The generation problem
/('I/ \/(/;,
l„
cul-elimination
Cut
Cut
Cut
Then we have (Girard, 1989):
11 (1 — cr2)11(1 Ec(7u▪ )k)(1_(72) (I)
Moreover, since (a-IT ) is nilpotent, ( 1 -I- (crti)k ) is
inversible. and its inverse is (1 — ITU). The next section
make explicit the relation (I) with a special choice of the
base ( j).
4.2 Matrix Relation for Cut Elimination
In the problem we are dealing with, we know II and some
of the axiom links in U. Let us assume that Vi E [1, p],
both ( and B( i) I are not cut-linked in U (this assumption entails no loss of generality).
4.3 Expressing the Reduction of U into H
In this section, we want to give a relation equivalent to (1)
which focuses on some axiom links we are interested in.
As mentioned in section 4.2, we can consider the (ei)
such that in U :
• Vi E [1. p].ei is not cut-linked (then, because of
the hypothesis made in section 4.2, B(e) is cutlinked):
• Vi E [p+ 1,p+ m], ei is cut-linked but B(e1) is not
cut-linked:
• Vi [p+ m +1,p+ + .n], both e.. and B(e) are
cut-linked.
Note: Remember we assume that there is no axiom link
such that both its conclusions are not cut-linked. So p =
I B(e) lathe atom in 17 such that there is an axiom link between a
and B(s).
Then in this base, we express the matrices (every axiom link of U has at least one of its conclusion involved
in a cut link):
If we define A = vim - (Ti votr,. and X =
U3(1 — (74U3)-1, we can state the theorem:
Theorem 1 Let U be a correct proof net reducing in
Res(o-,U) after cut elimination. These relations are
equivalent:
• Res(cr, U ) = (1— (72 )U (1 — r 1 (1 — 0-2 )
• ( - (Ti )tri = (72U3(1 -(74(3)i
• A = to-2Xcr2 and U3 = X-1 +
Of course, all the terms are defined.
We base the proof search algorithm corresponding to the
generation process we are dealing with on this third relation, as explained in the next sections.
4.4 Solving the Equations
In this section (proof search oriented), we consider that
the axiom links we are looking for are those whose two
conclusions are involved in cut links. That is we want to
complete U3. As in the previous section we proceeded
0
0
0
0.1
0
(73
(74
0
0
0 trlo
U3
0
0
0
0
H=Hi
[
74
make such a statement. In other cases, the complexity
would increase polynomially.
Then, the given matrices are:
hy equivalence, solving the equation (I) correponds to
solving the equation
=- cr9. (2)
0-2 =
00010000000000100000
0010000000
0100000000
1000000000
0000010000
0000001000
0000000100
0000000010
-0000000001-00000000000000000000
0000000000
0000000000
0000000000
0000000100
0000000000
0000010000
0000000000
-0000000000
00001000000001000000
0000000010
0100000000
1000000000
0000000100
0000000001
0000010000
0010000000
-0000001000
-0000100000010000
10000000
01000000
00100000
00000000
00000100
00000000
00000010
-00000001in X with X inversible. Then, we have to solve
u3 x-1 + 0'4
=
such that tU3 = U3 and (73 = 1.
Let o-, E .1/1„,,„ (IR), X =(.rj) E .A4,(IR) and
A E (IR ). Let the two sequences 1 < it < <
< in and 1 < j < < j1 < m be such that with
(a.6) E [1. x [1, n]. Eab=
= E Eiii,
In other words, o-9; • = 1 <=> 311 E [1,1] A i = i11 A j Cri
JI,
Then
111 =
a., X 10,, = ) * E
= E E(ójjX jiiji.,(Sjii2)1<i,j5n1
/1.112=1
So
A = (u171-lli _ 0.11(11)tui-i =
It follows that if A = (aij)i,j = o-9X to-9 then
V(11,12) E [1, /12, = (3)
A consequence of this result is that if o-4 = 0, then
/ = ti and we determine X completely with relation (3),
and then the same for U3. This configuration correspond
to the fact that in the (given) semantic proof nets, no output contains the two conclusions of a same axiom link.
In this latter case, the computation is not so simple and
should he mixed with word order constraints.
5 Example
Let us process on an example the previous results. We
still use the lexicon of table 4, and we want to generate
(if possible) a sentence whose meaning is given by the
proof net of figure 7: (try(find j))m.
We first need to associate every atom with an index (in
the figures, we only indicate a number i beside the atom
to express it is ei). Of course, we have to know how to
recognize the j that are the same in U (figure 6) and in
Ii (figure 7). This can he done by looking at the typed
constants decorating the input conclusions (for the moment, we don't have a general procedure in the complex
cases).
We also assume in this numbering that we know which
of the atoms in H(F) are linked to t+ (the unique output). In our case where o-4 = 0, it is not a problem to
1 if i
25
OifiJ
00010000000000100000
0000000010
1000000000
0100000000
0000000000
0000000001
0000000000
0010000000
0000001000
According to the definition of the (I,) and the (it) families such that o-9 = Ei Ei,j,, we have:
it 3 4 5 2 1 7 9 10
ii 1 2 3 4 5 6 7 8
Then
= 1 = aL4 X2,5 = 1 = a4,1 x4,3 = 1 =
X3,4 = = a5,2 X1,7 = 1 = 03,9 X7,1 = 1 = 09,3
x6,8 = I = 07,10 X8,6 = 1 = aio,7
and in this case 0'4 = 0, so according to the preceeding
notes X is completely determined and
-0000001000001000
00010000
00100000
01000000
00000001
10000000
-00000100We can add this matching to the syntactic forest of figure 8(a) (do not forget that U3 represents the edges between cj with i E (17,221) and obtain on F the matching
of figure 8(b).
X = U3 =
75
76
Figure 8: Applying the matching on the syntactic forest
We still have to ensure the correctness of this proof net
(because we add all the tensor and par links), but it has a
quadratic complexity (less than the matrix computation).
In this case, it is correct.
Note:
• Actually, this only gives us the axiom links. It still
necessitates to compute the word order to have no
crossing axiom link. This can be done from the axiom links easier than quadratic time: it is a wellbracketing check. Here, it is easy to see that putting
find try
Figure 7: Markingatoms on II
21 22 23 24 25
seeks
22 23
24 25
21
(a) The syntactic forest
(b) The syntactic forest endowed with the matching described by
U3
r- +
Q
ow■li
— /
the John item on the left would achieve the result of
Mary seeks John.
• The choice of seeks and its high order type (for intensionnal ity) shows there is no limitation on the order of the .\-term.
6 Conclusion
We took advantage of proof nets on the semantic point
of view and we expressed the generation process as a
guided proof search. On top of keeping the decidability
property of this framework, we characterized the semantic proof nets that enable a polynomial time process.
Such properties are crucial because it is the central part
of the generation process (considering Lambek calculus).
But there are other things left to look at. As the very next
steps. we should work on the atoms numbering and the
choice of the lexical items. Appropriate interactions between word order contraints and matrix resolution in the
hard case should also be considered. Moreover, another
point is to benefit from the power of linear logic and deal
with non linear A-terms.
Finally, since different extensions of Lambek calculus based on proof nets (Moortgat, 1996; Lecomte and
Retore, 1995) have been considered, we hope our proposal and its good properties to apply to other linguistic
approaches.
Acknowledgments
I would like to thank Christian Retore who pointed out
to me Girard's algebraic interpretation of the cut elimination.
References
Kazimierz Ajdukiewicz. 1935. Die syntaktische Konnexitat. Studio Philosophica, 1:1-27. English translation in Storrs McCall (ed), Polish Logic 1920-1939,
Oxford University Press, pp. 207-231.
Vincent Danos. _1990. Une Application de la Logique
Lineaire a l'Etude des Processus de Normalisation
(principalement do )%-calcul). Ph.D. thesis, Universite
Paris VII, June.
Philippe de Groote and Chritian Retore. 1996. On
the semantic readings of proof-nets. In Glyn Morrill
Geert-Jan KruijII and Dick °elide, editors, Formal
Grammar, pages 57-70, Prague, August. FoLLI.
David R. Dowty, Robert E. Wall, and Stanley Peters.
1981. introduction to Montague Semantics. Kluwer
Academic Publishers.
Jean-Yves Girard, Yves Lafont, and P. Taylor. 1988.
Proofs and Types. Cambridge Tracts in Theoretical
Computer Science 7. Cambridge University Press.
Jean-Yves Girard. 1987. Linear logic. Theoretical
Computer Science, 50:1-102.
Jean-Yves Girard. 1989. Geometry of interaction I: Interpretation of system F. In C. Bonotto, R. Ferro,
S. Valentini, and A. Zanardo, editors, Logic Colloquium '88, pages 221-260. North-Holland.
Jean-Yves Girard. 1993. Linear logic: Its syntax and semantics. In J.-Y. Girard NS Y. Lafont and L. Regnier.
editors, Advances in Linear Logic, Ithaca. New York,
June.
Jean-Yves Girard. 1995. Geometry of interaction III:
The general case. In J.-Y. Girard, Y. Lafont, and
L. Regnier, editors, Advances in Linear Logic, pages
329-389. Cambridge University Press. Proceedings
of the Workshop on Linear Logic, Ithaca, New York,
June 1993.
W. A. Howard, 1980. To H. B. Curry: Essays on combinatory logic, Lambda Calculus and Formalism, chapter The Formula2-as-Types Notion of Construction,
pages 479-490. Academic Press.
Francois Lamarche and Christian Retore. 1996. Proofnets for the lambek calculus - an overview. In
V. Michele Abrusci and Claudio Casadio, editors,
Proceedings 1996 Roma Workshop. Proofs and Linguistic Categories, pages 241-262. Editrice CLUEB,
Bologna, April.
Francois Lamarche. 1995. Games semantics for full
propositional linear logic. In Proceedings, Tenth Annual IEEE Symposium on Logic in Computer Science,
pages 464-473, San Diego, California, 26-29 June.
IEEE Computer Society Press.
Joachim Lambek. 1958. The mathematics of sentence structure. American Mathematical Monthly,
65(3):154-170.
Alain Lecomte and Christian Retore. 1995. Pomset
logic as an alternative categorial grammar. In Formal
Grammar, Barcelona.
Josep M. Merenciano and Glyn Morrill. 1997. Generation as deduction on labelled proof nets. In Christian
Retore, editor, Proceedings of the 1st International
Conference on Logical Aspects of Computational Linguistics (LACL-96), volume 1328 of /RAI, pages 310328, Berlin, September23-25 . Springer.
Richard Montague. 1974. Formal Philosophy: Selected
Papers of Richard Montague. Yale University Press,
New Haven, CT.
Michael Moortgat. 1996. Categorial type logics. In Johan van Benthem and Alice ter Meulen, editors, Handbook of Logic and Language, pages 5-91. Elsevier
Science Publishers, Amsterdam.
Christian Retore. 1990. A note on turbo cut elimination.
Manuscript, September.
Christian Retore. 1993. Reseaux et sequents on/mines.
Ph.D. thesis, University of Paris VII.
Dirk Roorda. 1991. Resource Logics: Proof-theoretical
Investigations. Ph.D. thesis, University of Amsterdam, September.
77
Generation in the Lambek Calculus Framework: an Approach with Semantic Proof Nets
Sylvain Pogodalla
sylvain.pogodalla@xrce.xerox.com
Xerox Researce Centre Europe
6, chemin de Maupertuis 38240 Meylan — France
Kazimierz Ajdukiewicz
Die syntaktische Konnexitat.
1935
Studio Philosophica, 1:1-27. English translation in Storrs McCall (ed), Polish Logic 1920-1939,
207--231
University Press,
Oxford
Ajdukiewicz, 1935
Kazimierz Ajdukiewicz. 1935. Die syntaktische Konnexitat. Studio Philosophica, 1:1-27. English translation in Storrs McCall (ed), Polish Logic 1920-1939, Oxford University Press, pp. 207-231.
Une Application de la Logique Lineaire a l'Etude des Processus de Normalisation (principalement do )%-calcul).
Ph.D. thesis,
Universite Paris VII,
Vincent Danos. _1990. Une Application de la Logique Lineaire a l'Etude des Processus de Normalisation (principalement do )%-calcul). Ph.D. thesis, Universite Paris VII, June.
Philippe de Groote
Chritian Retore
On the semantic readings of proof-nets.
1996
In Glyn Morrill Geert-Jan KruijII and Dick °elide, editors, Formal Grammar,
57--70
Prague, August. FoLLI.
de Groote, Retore, 1996
Philippe de Groote and Chritian Retore. 1996. On the semantic readings of proof-nets. In Glyn Morrill Geert-Jan KruijII and Dick °elide, editors, Formal Grammar, pages 57-70, Prague, August. FoLLI.
David R Dowty
Robert E Wall
Stanley Peters
introduction to Montague Semantics.
1981
Kluwer Academic Publishers.
ic purposes, with a special look at proof nets for Lambek calculus (Roorda, 1991; Lamarche and Retore, 1996). But they have mainly explored the syntactic capabilities of proof nets, describing parsing processes. This paper wants to focus on the generation capabilities of proof nets thanks to their semantic readings as expressed in (de Groote and Retore, 1996). The main features of our proposal consist in the use of proof nets for Lambek calculus, of the Curry-Howard isomorphism (Howard, 1980; Girard et al., 1988), of semantic proof nets with semantic expressions a la Montague (Montague, 1974; Dowty et al., 1981), and in an algorithm for proof search with a target proof net. Unlike a previous proposal for generation in the Lambek calculus framework (Merenciano and Morrill, 1997), this point of view avoids the use of the A-term unification to lead the generation process. And the algorithmic undecidabi lily of this latter mechanism (from second order unification) does not occur any more. In this work, we do not consider the choice of lexical items from a given semantic expression the syntactic realization of which we want to generate, but rather the way we can associate given lexical entries to fit the 
Dowty, Wall, Peters, 1981
David R. Dowty, Robert E. Wall, and Stanley Peters. 1981. introduction to Montague Semantics. Kluwer Academic Publishers.
Jean-Yves Girard
Yves Lafont
P Taylor
Proofs and Types. Cambridge Tracts in Theoretical Computer Science 7.
1988
Cambridge University Press.
1935) and Lambek calculus (Lambek, 1958), and a lot of work has presented proof nets uses for linguistic purposes, with a special look at proof nets for Lambek calculus (Roorda, 1991; Lamarche and Retore, 1996). But they have mainly explored the syntactic capabilities of proof nets, describing parsing processes. This paper wants to focus on the generation capabilities of proof nets thanks to their semantic readings as expressed in (de Groote and Retore, 1996). The main features of our proposal consist in the use of proof nets for Lambek calculus, of the Curry-Howard isomorphism (Howard, 1980; Girard et al., 1988), of semantic proof nets with semantic expressions a la Montague (Montague, 1974; Dowty et al., 1981), and in an algorithm for proof search with a target proof net. Unlike a previous proposal for generation in the Lambek calculus framework (Merenciano and Morrill, 1997), this point of view avoids the use of the A-term unification to lead the generation process. And the algorithmic undecidabi lily of this latter mechanism (from second order unification) does not occur any more. In this work, we do not consider the choice of lexical items from a given semantic expression the syntactic realizatio
Girard, Lafont, Taylor, 1988
Jean-Yves Girard, Yves Lafont, and P. Taylor. 1988. Proofs and Types. Cambridge Tracts in Theoretical Computer Science 7. Cambridge University Press.
Jean-Yves Girard
Linear logic.
1987
Theoretical Computer Science,
50--1
s not occur any more. In this work, we do not consider the choice of lexical items from a given semantic expression the syntactic realization of which we want to generate, but rather the way we can associate given lexical entries to fit the given semantic expression and generate a syntactically correct expression. For this purpose, we express our problem as a proof search one in (multiplicative) linear logic which is decidable. Moreover, we characterize the semantic recipes of lexical items that provide a polynomial solution for the generation process. 2 Multi Usage Proof Nets 2.1 Proof Nets (Girard, 1987) introduced proof nets formalism as the natural deduction syntax for linear logic, also studied in (Retore, 1993). They represent proofs in linear logic with more accuracy than sequential proofs: on one hand they are more compact, on the other hand they identify unessentially different sequential proofs (for instance in the order of the rules introduction). From a one-sided sequent and a sequential proof of it, we obtain a proof net by unfolding every formula as a tree (whose nodes are the binary connectives and the leaves are formulas, e.g. atomic ones) and linking together the formulas occur
Girard, 1987
Jean-Yves Girard. 1987. Linear logic. Theoretical Computer Science, 50:1-102.
Jean-Yves Girard
Geometry of interaction I: Interpretation of system F.
1989
Logic Colloquium '88,
221--260
In C. Bonotto, R. Ferro, S. Valentini, and A. Zanardo, editors,
North-Holland.
NPV.5)/NP)\( P\S)) Ax.(try(xfind)) (cf. figure 3(f)) (f) nseeks Figure 3: Semantic proof nets of the lexicon of table 4 (a) (b) (C) (d) [thy, 11John 'Mary n Paris in find 4 Cut-elimination as Matrix Computation This section first establishes some equivalent relations between cut-elimination on proof nets and matrix equations. We then show how to use these equations in the generation process and how we can solve them. It enables us to characterize the properties required by the semantic proof nets to have a polynomial resolution of the generation process. 4.1 Principles First, as expressed in (Girard, 1989) and reformulated in (Retore. 1990; Girard, 1993; Girard, 1995), we state the algebraic representation of cut-elimination on proof nets. Due to lack of space, we can not develop it, but the principle is to express cut-elimination between axioms with incidence matrices and paths in graphs. Let us consider a proof net U. We denote by (ci )1<i‹, all the vertices taking place for atoms in U. We can define U the incidence matrix of axiom links, a the incidence matrix of cut links (we assume without loss of generality that they happen only between axiom links), and H the incidence matrix of axiom li
Girard, 1989
Jean-Yves Girard. 1989. Geometry of interaction I: Interpretation of system F. In C. Bonotto, R. Ferro, S. Valentini, and A. Zanardo, editors, Logic Colloquium '88, pages 221-260. North-Holland.
Jean-Yves Girard
Linear logic: Its syntax and semantics.
1993
Advances in Linear Logic,
In J.-Y. Girard NS Y. Lafont and L. Regnier. editors,
Ithaca. New York,
f)) (f) nseeks Figure 3: Semantic proof nets of the lexicon of table 4 (a) (b) (C) (d) [thy, 11John 'Mary n Paris in find 4 Cut-elimination as Matrix Computation This section first establishes some equivalent relations between cut-elimination on proof nets and matrix equations. We then show how to use these equations in the generation process and how we can solve them. It enables us to characterize the properties required by the semantic proof nets to have a polynomial resolution of the generation process. 4.1 Principles First, as expressed in (Girard, 1989) and reformulated in (Retore. 1990; Girard, 1993; Girard, 1995), we state the algebraic representation of cut-elimination on proof nets. Due to lack of space, we can not develop it, but the principle is to express cut-elimination between axioms with incidence matrices and paths in graphs. Let us consider a proof net U. We denote by (ci )1<i‹, all the vertices taking place for atoms in U. We can define U the incidence matrix of axiom links, a the incidence matrix of cut links (we assume without loss of generality that they happen only between axiom links), and H the incidence matrix of axiom links of fl where 1-1 is the proof net resulting f
Girard, 1993
Jean-Yves Girard. 1993. Linear logic: Its syntax and semantics. In J.-Y. Girard NS Y. Lafont and L. Regnier. editors, Advances in Linear Logic, Ithaca. New York, June.
Jean-Yves Girard
Geometry of interaction III: The general case.
1995
Advances in Linear Logic,
329--389
In J.-Y. Girard, Y. Lafont, and L. Regnier, editors,
Cambridge University Press.
Ithaca, New York,
 Figure 3: Semantic proof nets of the lexicon of table 4 (a) (b) (C) (d) [thy, 11John 'Mary n Paris in find 4 Cut-elimination as Matrix Computation This section first establishes some equivalent relations between cut-elimination on proof nets and matrix equations. We then show how to use these equations in the generation process and how we can solve them. It enables us to characterize the properties required by the semantic proof nets to have a polynomial resolution of the generation process. 4.1 Principles First, as expressed in (Girard, 1989) and reformulated in (Retore. 1990; Girard, 1993; Girard, 1995), we state the algebraic representation of cut-elimination on proof nets. Due to lack of space, we can not develop it, but the principle is to express cut-elimination between axioms with incidence matrices and paths in graphs. Let us consider a proof net U. We denote by (ci )1<i‹, all the vertices taking place for atoms in U. We can define U the incidence matrix of axiom links, a the incidence matrix of cut links (we assume without loss of generality that they happen only between axiom links), and H the incidence matrix of axiom links of fl where 1-1 is the proof net resulting from all the cut
Girard, 1995
Jean-Yves Girard. 1995. Geometry of interaction III: The general case. In J.-Y. Girard, Y. Lafont, and L. Regnier, editors, Advances in Linear Logic, pages 329-389. Cambridge University Press. Proceedings of the Workshop on Linear Logic, Ithaca, New York, June 1993.
W A Howard
Essays on combinatory logic, Lambda Calculus and Formalism, chapter The Formula2-as-Types Notion of Construction,
1980
479--490
Academic Press.
To
(Ajdukiewicz, 1935) and Lambek calculus (Lambek, 1958), and a lot of work has presented proof nets uses for linguistic purposes, with a special look at proof nets for Lambek calculus (Roorda, 1991; Lamarche and Retore, 1996). But they have mainly explored the syntactic capabilities of proof nets, describing parsing processes. This paper wants to focus on the generation capabilities of proof nets thanks to their semantic readings as expressed in (de Groote and Retore, 1996). The main features of our proposal consist in the use of proof nets for Lambek calculus, of the Curry-Howard isomorphism (Howard, 1980; Girard et al., 1988), of semantic proof nets with semantic expressions a la Montague (Montague, 1974; Dowty et al., 1981), and in an algorithm for proof search with a target proof net. Unlike a previous proposal for generation in the Lambek calculus framework (Merenciano and Morrill, 1997), this point of view avoids the use of the A-term unification to lead the generation process. And the algorithmic undecidabi lily of this latter mechanism (from second order unification) does not occur any more. In this work, we do not consider the choice of lexical items from a given semantic expression th
Howard, 1980
W. A. Howard, 1980. To H. B. Curry: Essays on combinatory logic, Lambda Calculus and Formalism, chapter The Formula2-as-Types Notion of Construction, pages 479-490. Academic Press.
Francois Lamarche
Christian Retore
Proofnets for the lambek calculus - an overview.
1996
Proceedings 1996 Roma Workshop. Proofs and Linguistic Categories,
241--262
In V. Michele Abrusci and Claudio Casadio, editors,
Lamarche, Retore, 1996
Francois Lamarche and Christian Retore. 1996. Proofnets for the lambek calculus - an overview. In V. Michele Abrusci and Claudio Casadio, editors, Proceedings 1996 Roma Workshop. Proofs and Linguistic Categories, pages 241-262. Editrice CLUEB, Bologna, April.
Francois Lamarche
Games semantics for full propositional linear logic.
1995
In Proceedings, Tenth Annual IEEE Symposium on Logic in Computer Science,
464--473
IEEE Computer Society Press.
San Diego, California,
nd such that every proof net built from a sequential proof has this property. So that we do not present the sequent calculus but only the proof net calculus. In this paper, we do not consider all the proof nets, but a part of the multiplicative ones: those of the intuitionistic implicative linear logic. In this case, sequents are made of several antecedent formulas, but only one succedent formula. To deal with the intuitionistic notion with proof nets (since we consider one-sided sequents), we use the notion of polarities with the input (.: negative) and the output (o: positive) (Danos, 1990; Lamarche, 1995) to decorate formulas. Positive ones correspond to succedent formulas and negative ones to antecedent formulas. Given the links of table 1, we define proof structures as graphs made of these links such that: I. any premise of any link is connected to exactly one conclusion of some other link; 2. any conclusion of any link is connected to at most one premise of some other link; 3. input (resp. output) premises are connected to input (resp. output) conclusions of the same type. Note that the two links for the negative and positive implications correspond to the two connectives of the linear logi
e semantics with proof nets refers to the fact that both the A-terms (with the Curry-Howard isomorphism) and the proof nets represent proofs of intuitionistic implicative linear logic. And indeed, the linear A-terms may be encoded as proof nets. On the other hand, given an intuitionistic implicative proof net, a simple algorithm (given in (de Groote and 71 3— 3+ ----- yp \ s— N N Pi os+ lives John N P NP— Paris in NP lives John • N Paris in in (a) Unfolding oldie syntactic types (b) Matching the dual atoms to obtain a proof net Figure 1: Parsing of John lives in Paris Retore, 1996), based on (Lamarche, 1995)'s dependency paths). we can obtain a A-term. Then, instead of associating a A-term to a lexical entry, we can associate a proof net. For instance, on the semantic side, we can use the Montagovian types e and and typed constants. Of course, we want to keep the compositionality principle of Montague's semantics that maps any syntactic association rule with a semantic association rule. We express it in a straightforward way with the following homomorphism (for as many basic categories as required): H(NP)= e li(A\B) =1-1(.4) —0 11(B) 'H(S) = t 1{(_41 B) = 7-t(B) And for a lexical item, given its 
Lamarche, 1995
Francois Lamarche. 1995. Games semantics for full propositional linear logic. In Proceedings, Tenth Annual IEEE Symposium on Logic in Computer Science, pages 464-473, San Diego, California, 26-29 June. IEEE Computer Society Press.
Joachim Lambek
The mathematics of sentence structure.
1958
American Mathematical Monthly,
65--3
Lambek, 1958
Joachim Lambek. 1958. The mathematics of sentence structure. American Mathematical Monthly, 65(3):154-170.
Alain Lecomte
Christian Retore
Pomset logic as an alternative categorial grammar. In Formal Grammar,
1995
Barcelona.
Lecomte, Retore, 1995
Alain Lecomte and Christian Retore. 1995. Pomset logic as an alternative categorial grammar. In Formal Grammar, Barcelona.
Josep M Merenciano
Glyn Morrill
Generation as deduction on labelled proof nets.
1997
Proceedings of the 1st International Conference on Logical Aspects of Computational Linguistics (LACL-96),
1328
310--328
In Christian Retore, editor,
Springer.
Berlin, September23-25 .
ilities of proof nets, describing parsing processes. This paper wants to focus on the generation capabilities of proof nets thanks to their semantic readings as expressed in (de Groote and Retore, 1996). The main features of our proposal consist in the use of proof nets for Lambek calculus, of the Curry-Howard isomorphism (Howard, 1980; Girard et al., 1988), of semantic proof nets with semantic expressions a la Montague (Montague, 1974; Dowty et al., 1981), and in an algorithm for proof search with a target proof net. Unlike a previous proposal for generation in the Lambek calculus framework (Merenciano and Morrill, 1997), this point of view avoids the use of the A-term unification to lead the generation process. And the algorithmic undecidabi lily of this latter mechanism (from second order unification) does not occur any more. In this work, we do not consider the choice of lexical items from a given semantic expression the syntactic realization of which we want to generate, but rather the way we can associate given lexical entries to fit the given semantic expression and generate a syntactically correct expression. For this purpose, we express our problem as a proof search one in (multiplicative) linear logi
Merenciano, Morrill, 1997
Josep M. Merenciano and Glyn Morrill. 1997. Generation as deduction on labelled proof nets. In Christian Retore, editor, Proceedings of the 1st International Conference on Logical Aspects of Computational Linguistics (LACL-96), volume 1328 of /RAI, pages 310-328, Berlin, September23-25 . Springer.
Richard Montague
Formal Philosophy: Selected Papers of Richard Montague.
1974
Yale University Press,
New Haven, CT.
ses for linguistic purposes, with a special look at proof nets for Lambek calculus (Roorda, 1991; Lamarche and Retore, 1996). But they have mainly explored the syntactic capabilities of proof nets, describing parsing processes. This paper wants to focus on the generation capabilities of proof nets thanks to their semantic readings as expressed in (de Groote and Retore, 1996). The main features of our proposal consist in the use of proof nets for Lambek calculus, of the Curry-Howard isomorphism (Howard, 1980; Girard et al., 1988), of semantic proof nets with semantic expressions a la Montague (Montague, 1974; Dowty et al., 1981), and in an algorithm for proof search with a target proof net. Unlike a previous proposal for generation in the Lambek calculus framework (Merenciano and Morrill, 1997), this point of view avoids the use of the A-term unification to lead the generation process. And the algorithmic undecidabi lily of this latter mechanism (from second order unification) does not occur any more. In this work, we do not consider the choice of lexical items from a given semantic expression the syntactic realization of which we want to generate, but rather the way we can associate given lexica
Montague, 1974
Richard Montague. 1974. Formal Philosophy: Selected Papers of Richard Montague. Yale University Press, New Haven, CT.
Michael Moortgat
Categorial type logics.
1996
In Johan van Benthem and Alice ter Meulen, editors, Handbook of Logic and Language,
5--91
Elsevier Science Publishers,
Amsterdam.
Moortgat, 1996
Michael Moortgat. 1996. Categorial type logics. In Johan van Benthem and Alice ter Meulen, editors, Handbook of Logic and Language, pages 5-91. Elsevier Science Publishers, Amsterdam.
Christian Retore
A note on turbo cut elimination.
1990
Manuscript,
Retore, 1990
Christian Retore. 1990. A note on turbo cut elimination. Manuscript, September.
Christian Retore
Reseaux et sequents on/mines.
1993
Ph.D. thesis,
University of Paris VII.
on the syntactic realization of which we want to generate, but rather the way we can associate given lexical entries to fit the given semantic expression and generate a syntactically correct expression. For this purpose, we express our problem as a proof search one in (multiplicative) linear logic which is decidable. Moreover, we characterize the semantic recipes of lexical items that provide a polynomial solution for the generation process. 2 Multi Usage Proof Nets 2.1 Proof Nets (Girard, 1987) introduced proof nets formalism as the natural deduction syntax for linear logic, also studied in (Retore, 1993). They represent proofs in linear logic with more accuracy than sequential proofs: on one hand they are more compact, on the other hand they identify unessentially different sequential proofs (for instance in the order of the rules introduction). From a one-sided sequent and a sequential proof of it, we obtain a proof net by unfolding every formula as a tree (whose nodes are the binary connectives and the leaves are formulas, e.g. atomic ones) and linking together the formulas occurring in the same axiom rule of the sequent calculus. But proof nets have a more intrinsic definition that prevent
Retore, 1993
Christian Retore. 1993. Reseaux et sequents on/mines. Ph.D. thesis, University of Paris VII.
Dirk Roorda
Resource Logics: Proof-theoretical Investigations.
1991
Ph.D. thesis,
University of Amsterdam,
insically in the proof net formalism with a sim70 Table 1: Links Name Axiom Tensor Par Cut Link Pi 2 P1 -9 • 1 c c Premises none P17 P2 P1, P2 P1. P2 Conclusions c1, c, c c none Types ci : A+ Pi : A+ Pi : A- Pt : Ae9 . A- P2 : B- P2 : B+ p : A+ c : (A ---0 B)- c : (A —0 B)+ 2 Table 2: Cut-elimination rewriting rules Y, I .Y2 pie rewriting process described in table 2 (in case of complex formulas as in the third rewriting rule, those rules can apply again on the result and propagate until reaching atoms). 2.2 Syntactic Proof Nets Definitions of proof nets for Lambek calculus first appeared in (Roorda, 1991). They naturally raised as Lambek calculus is an intuitionistic fragment of non commutative linar logic (with two linear implications: 1&quot; on the left and &quot;/&quot; on the right), and the consequences on the proof net calculus we presented in section 2.1 are: • we get two tensor links: one for the formulas ( 8/.4 ) (the one in table 1) and one for the formula (B \ A) - (just inverse the polarities of the premises). And two par links : one for the formula (A\B)+ and one for (A/B)+ (idem); • formulas in Lambek's sequents are ordered, so that conclusions of the proof nets are cyclically ordered and axio
Roorda, 1991
Dirk Roorda. 1991. Resource Logics: Proof-theoretical Investigations. Ph.D. thesis, University of Amsterdam, September.
