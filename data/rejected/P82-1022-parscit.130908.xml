<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.005424">
<note confidence="0.5645365">
THEMES FROM 1972
Robert F. Simmons
</note>
<affiliation confidence="0.907513">
Department of Computer Sciences
University of Texas at Austin
</affiliation>
<address confidence="0.296431">
Austin, TX 78712
</address>
<bodyText confidence="0.998521769230769">
Although 1972 was the year that Winograd
published his now classic natural language study
of the blocks world, that fact had not yet
penetrated to the ACL. At that time people with
Al computational interests were strictly in a
minority in the association and it was a radical
move to appoint Roger Schank as program chairman
for the year&apos;s meeting. That was also the year
that we didn&apos;t have a presidential banquet, and my
&amp;quot;speech&amp;quot; was a few informal remarks at the
roadhouse restaurant somewhere in North Carolina
reassuring a doubtful few members that
computational understanding of natural language
was certainly progressing and that applied natural
language systems were distinctly feasible.
My own perceptions of the state of
computational linguistics during that period were
given in &amp;quot;On Seeing the Elephant&amp;quot; in the Finite
String, March-April 1972. I saw it as a time of
confusion, of competition among structuralists,
transformationalists, and the new breed of
computerniks. &amp;quot;On Seeing the Elephant&amp;quot; was a
restatement of the old Sufi parable that suggested
that we each perceived only isolated parts of our
science.
That was the period during which Jonathan
Slocum and I were concerned with using Augmented
Transition Networks to generate coherent English
from semantic networks. That line of research was
originated by the first president of the
Association, Victor Yngve, who in 1960 had
published descriptions of algorithms for using a
phrase structure grammar to generate syntactically
well-formed nonsense sentences [Yngve 19601.
Sheldon Klein and I about 1962-1964 were
fascinated by the technique and generalized it to
a method for controlling the sense of what was
generated by respecting the semantic dependencies
of words as they occurred in text. Yngve&apos;s work
was truly seminal and it continued to inspire
Sheldon for years as he developed method after
method for generating detective stories and now
operas. I, too, with various students continued
to explore the generation side of language, most
recently with Correira [1979], using a form of
story tree to construct stories and their
summaries. No matter that Meehan found better
methods and Bill Mann and his colleagues continue
to improve on the techniques. The use of a phrase
structure grammar to control the sequence in which
sentences and words are pLoduced remains quite as
fascinating as its use in translating sentences to
representations of meaning.
It is possible to communicate the technique
for controlled generation of text in just a few
paragraphs, so in dedication to Yngve, Klein, and
the many others of the discipline who share our
fascination with generation of meaningful
language, the following description is presented.
The last two lines of Keats &amp;quot;Ode to a
Grecian Urn&amp;quot; are:
Beauty is truth, truth beauty, that is all
Ye know on earth and all ye need to know.
To form semantically controlled variations on this
verse we can create substitution classes as below:
</bodyText>
<construct confidence="0.554087555555556">
[SCLASS BEAUTY life knowledge wisdom love this]
[SCLASS TRUTH honor joy rapture love all]
[SCLASS (THAT IS ALL)(that&apos;s all)(that&apos;s what)
(it&apos;s all)(it&apos;s what)]
[SCLASS YE you we I some they]
[SCLASS KNOW sense have get see meet]
[SCLASS (ON EARTH) (for living)(til heaven)
(til hell)(in life)]
[SCLASS (NEED TO) (have to)(ought to)(want to)]
</construct>
<bodyText confidence="0.7225585">
and line rules similar to phrase structure forms.
(I think of the couplet as a three line verse.)
</bodyText>
<equation confidence="0.949456">
[KLINE1 beauty is truth -- truth beauty]
[KLINE2 (that is all) ye know (on earth)]
[KLINE3 (that is all) ye (need to) know]
Each KLINEi rewrites as a conjunction of
terms, e.g.,
KLINE1 --&gt; beauty + is + truth ... + beauty.
</equation>
<bodyText confidence="0.983512105263158">
The line rules are composed of terms such as
&amp;quot;beauty&amp;quot;, &amp;quot;that is all&amp;quot;, etc., that begin SCLASS
predications, and of terminals such as &amp;quot;is&amp;quot; and &amp;quot;-
-&amp;quot; that do not. Poem and verse can also be
defined as rules:
[POEM title verse verse ... verse]
[TITLE (Variation on Keats&apos; Truth is Beauty)]
[VERSE klinel kline2 kline3]
Actually it is more convenient to define these
latter three elements as program to control choice
of grammar, spacing, and number of verses. In
either case, a POEM is a TITLE followed by VERSEs,
ane VERSE is three lines each composed of
terminals that occur in a KLINE or of selections
from the matching substitution class.
Only one other program element is required: a
random selection function to pseudo-randomly
choose an element from a substitution class and to
record that element as chosen:
</bodyText>
<page confidence="0.589322">
100
</page>
<equation confidence="0.6847412">
((CHOOSE ( FIRST. REMDR) CHOICE)
&lt; (CHOSEN FIRST CHOICE))
((CHOOSE ( FIRST. REMDR) CHOICE)
&lt; (RANDOM* ( FIRST. REMDR) CHOICE)
(ASSERT (CHOSEN CHOICE)))
</equation>
<bodyText confidence="0.993317380952381">
Note: CHOOSE is called with the
content of an SCLASS rule in the list
( FIRST. REMDR); if a choice for the
term has previously been made in the
verse, CHOICE is taken from the
predicate, (CHOSEN FIRST CHOICE). If
not, RANDOM* selects an element and
records it as CHOSEN. When a verse is
begun, any existing CHOSEN predicates
are deleted.
This is a procedural logic program with lists
in dot notation and variables marked using the
underscore. It is presented to give a sense of
how the program appears in Dan Chester&apos;s LISP
version of PROLOG. The rest of the program
follows the poem, verse, and Keats-LINE rules
given above.
The program is called by (POGEN KEATS 4),
KEATS selecting the grammar and 4 signifying the
number of verses. A couple of recordings of its
behavior appear below.
</bodyText>
<table confidence="0.985556613636364">
*(POGEN KEATS 4)
(VARIATIONS ON KEATS TRUTH IS BEAUTY)
***
(LOVE IS LOVE -- LOVE LOVE)
(ITS ALL YE HAVE TIL HEAVEN)
(ITS ALL YE NEED TO RAVE)
***
(LOVE IS LOVE -- LOVE LOVE)
(THATS ALL THEY KNOW ON EARTH)
(THATS ALL THEY OUGHT TO KNOW)
***
(WISDOM IS RAPTURE -- RAPTURE WISDOM)
(ITS WHAT YOU MEET FOR LIVING)
(ITS WHAT YOU WANT TO MEET)
***
(LOVE IS ALL -- ALL LOVE)
(THATS ALL WE SENSE TIL HELL)
(THATS ALL WE HAVE TO SENSE)
***
((POGEN KEATS 4))
*(POGEN KEATS 5)
(VARIATIONS ON KEATS&apos; TRUTH IS BEAUTY)
***
(BEAUTY IS TRUTH -- TRUTH BEAUTY)
(THATS WHAT YE SEE ON EARTH)
(THATS WHAT YE WANT TO SEE)
***
(KNOWLEDGE IS ALL -- ALL KNOWLEDGE)
(ITS ALL THEY MEET TIL HELL)
(ITS ALL THEY HAVE TO MEET)
***
(LOVE IS RAPTURE -- RAPTURE LOVE)
(ITS ALL SOME KNOW TIL HEAVEN)
(ITS ALL SOME NEED TO KNOW)
***
(LIFE IS RAPTURE -- RAPTURE LIFE)
(THATS WHAT SOME GET FOR LIVING)
(THATS WHAT SOME OUGHT TO GET)
***
(LIFE IS LOVE -- LOVE LIFE)
(ITS ALL I SENSE ON EARTH)
(ITS ALL I WANT TO SENSE)
***
((POGEN KEATS 5))
</table>
<bodyText confidence="0.999697357142857">
Perhaps these verses might best be
characterized as those Keats wisely rejected.
Nevertheless our robot-poet demonstrates the
effectiveness of phrase structure organization and
substitution classes for selecting and ordering
actions.
The ideas of Pogen led to related methods for
creating paraphrases, answering questions, and
translating between languages. The principle of
phrase structure organization has permeated our NL
efforts and found a particularly friendly
environment in procedural logic where Chester and
I [1982] show that the same grammar that
translates English strings into semantic
representations can serve to translate the
representations into English strings. This
result, confirming an earlier finding by Heidorn,
greatly simplifies the linguistic programming
requirements for NL translation and text
questioning systems.
Since 1972 the computational linguistics
world has changed much. Today Al and Logic
interests tend to overshadow linguistic approaches
to language. But despite all the complexities in
translating between NL constituents and
computational representations, augmented phrase
structure grammars provide a general and effective
means to guide the flow of computation.
</bodyText>
<sectionHeader confidence="0.998687" genericHeader="references">
REFERENCES
</sectionHeader>
<reference confidence="0.99902725">
Simmons, R.F., and Chester, DL., &amp;quot;Relating
Sentences and Semantic Networks with Procedural
Logic,&amp;quot; Communications of the ACM, September
1982, (in press).
Simmons, R.F., and Correira, A., &amp;quot;Rule Forms for
Verse, Sentence, and Story Trees,&amp;quot; in Findler,
N.V., (ed.) Associative Networks, pp. 363-392,
Academic Press, New York, 1979.
Yngve, V., &amp;quot;A Model and a Hypothesis for Language
Structure,&amp;quot; Proceedings of the American
Philosophical Society, pp. 444-466, 1960,
Volume 104.
</reference>
<page confidence="0.998599">
101
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.006030">
<title confidence="0.513876">THEMES FROM 1972</title>
<author confidence="0.999328">Robert F Simmons</author>
<affiliation confidence="0.999942">Department of Computer Sciences University of Texas at Austin</affiliation>
<address confidence="0.98198">Austin, TX 78712</address>
<abstract confidence="0.96685875">Although 1972 was the year that Winograd published his now classic natural language study of the blocks world, that fact had not yet penetrated to the ACL. At that time people with Al computational interests were strictly in a minority in the association and it was a radical move to appoint Roger Schank as program chairman for the year&apos;s meeting. That was also the year that we didn&apos;t have a presidential banquet, and my &amp;quot;speech&amp;quot; was a few informal remarks at the roadhouse restaurant somewhere in North Carolina reassuring a doubtful few members that computational understanding of natural language was certainly progressing and that applied natural language systems were distinctly feasible. My own perceptions of the state of computational linguistics during that period were in &amp;quot;On Seeing the Elephant&amp;quot; in the String,March-April 1972. I saw it as a time of confusion, of competition among structuralists, transformationalists, and the new breed of computerniks. &amp;quot;On Seeing the Elephant&amp;quot; was a restatement of the old Sufi parable that suggested that we each perceived only isolated parts of our science. That was the period during which Jonathan Slocum and I were concerned with using Augmented Transition Networks to generate coherent English from semantic networks. That line of research was originated by the first president of the Association, Victor Yngve, who in 1960 had published descriptions of algorithms for using a phrase structure grammar to generate syntactically well-formed nonsense sentences [Yngve 19601. Sheldon Klein and I about 1962-1964 were fascinated by the technique and generalized it to a method for controlling the sense of what was generated by respecting the semantic dependencies of words as they occurred in text. Yngve&apos;s work was truly seminal and it continued to inspire Sheldon for years as he developed method after method for generating detective stories and now operas. I, too, with various students continued to explore the generation side of language, most recently with Correira [1979], using a form of story tree to construct stories and their summaries. No matter that Meehan found better methods and Bill Mann and his colleagues continue to improve on the techniques. The use of a phrase structure grammar to control the sequence in which sentences and words are pLoduced remains quite as fascinating as its use in translating sentences to representations of meaning. It is possible to communicate the technique for controlled generation of text in just a few paragraphs, so in dedication to Yngve, Klein, and the many others of the discipline who share our fascination with generation of meaningful language, the following description is presented. The last two lines of Keats &amp;quot;Ode to a Grecian Urn&amp;quot; are: Beauty is truth, truth beauty, that is all Ye know on earth and all ye need to know. To form semantically controlled variations on this verse we can create substitution classes as below: [SCLASS BEAUTY life knowledge wisdom love this] [SCLASS TRUTH honor joy rapture love all] [SCLASS (THAT IS ALL)(that&apos;s all)(that&apos;s what) (it&apos;s all)(it&apos;s what)] [SCLASS YE you we I some they] [SCLASS KNOW sense have get see meet] [SCLASS (ON EARTH) (for living)(til heaven) (til hell)(in life)] [SCLASS (NEED TO) (have to)(ought to)(want to)] and line rules similar to phrase structure forms. (I think of the couplet as a three line verse.) [KLINE1 beauty is truth -truth beauty] [KLINE2 (that is all) ye know (on earth)] [KLINE3 (that is all) ye (need to) know] Each KLINEi rewrites as a conjunction of terms, e.g., KLINE1 --&gt; beauty + is + truth ... + beauty. The line rules are composed of terms such as &amp;quot;beauty&amp;quot;, &amp;quot;that is all&amp;quot;, etc., that begin SCLASS predications, and of terminals such as &amp;quot;is&amp;quot; and &amp;quot;- -&amp;quot; that do not. Poem and verse can also be defined as rules: [POEM title verse verse ... verse] [TITLE (Variation on Keats&apos; Truth is Beauty)] [VERSE klinel kline2 kline3] Actually it is more convenient to define these latter three elements as program to control choice of grammar, spacing, and number of verses. In either case, a POEM is a TITLE followed by VERSEs, ane VERSE is three lines each composed of terminals that occur in a KLINE or of selections from the matching substitution class. Only one other program element is required: a random selection function to pseudo-randomly choose an element from a substitution class and to record that element as chosen: 100 ((CHOOSE ( FIRST. REMDR) CHOICE) &lt; (CHOSEN FIRST CHOICE)) ((CHOOSE ( FIRST. REMDR) CHOICE) &lt; (RANDOM* ( FIRST. REMDR) CHOICE) (ASSERT (CHOSEN CHOICE))) Note: CHOOSE is called with the content of an SCLASS rule in the list ( FIRST. REMDR); if a choice for the term has previously been made in the verse, CHOICE is taken from the predicate, (CHOSEN FIRST CHOICE). If not, RANDOM* selects an element and records it as CHOSEN. When a verse is begun, any existing CHOSEN predicates are deleted. This is a procedural logic program with lists in dot notation and variables marked using the underscore. It is presented to give a sense of how the program appears in Dan Chester&apos;s LISP version of PROLOG. The rest of the program follows the poem, verse, and Keats-LINE rules given above. The program is called by (POGEN KEATS 4), KEATS selecting the grammar and 4 signifying the number of verses. A couple of recordings of its behavior appear below.</abstract>
<note confidence="0.950940909090909">(POGEN KEATS 4) (VARIATIONS ON KEATS TRUTH IS BEAUTY) *** (LOVE IS LOVE -- LOVE LOVE) (ITS ALL YE HAVE TIL HEAVEN) (ITS ALL YE NEED TO RAVE) *** (LOVE IS LOVE -- LOVE LOVE) (THATS ALL THEY KNOW ON EARTH) (THATS ALL THEY OUGHT TO KNOW) *** (WISDOM IS RAPTURE -- RAPTURE WISDOM) (ITS WHAT YOU MEET FOR LIVING) (ITS WHAT YOU WANT TO MEET) *** (LOVE IS ALL -- ALL LOVE) (THATS ALL WE SENSE TIL HELL) (THATS ALL WE HAVE TO SENSE) *** ((POGEN KEATS 4)) *(POGEN KEATS 5) (VARIATIONS ON KEATS&apos; TRUTH IS BEAUTY) *** (BEAUTY IS TRUTH -- TRUTH BEAUTY) (THATS WHAT YE SEE ON EARTH) (THATS WHAT YE WANT TO SEE) *** (KNOWLEDGE IS ALL -- ALL KNOWLEDGE) (ITS ALL THEY MEET TIL HELL) (ITS ALL THEY HAVE TO MEET) *** (LOVE IS RAPTURE -- RAPTURE LOVE) (ITS ALL SOME KNOW TIL HEAVEN) (ITS ALL SOME NEED TO KNOW) *** (LIFE IS RAPTURE -- RAPTURE LIFE) (THATS WHAT SOME GET FOR LIVING) (THATS WHAT SOME OUGHT TO GET) *** (LIFE IS LOVE -- LOVE LIFE) (ITS ALL I SENSE ON EARTH) (ITS ALL I WANT TO SENSE) *** ((POGEN KEATS 5</note>
<abstract confidence="0.988856357142857">Perhaps these verses might best be characterized as those Keats wisely rejected. Nevertheless our robot-poet demonstrates the effectiveness of phrase structure organization and substitution classes for selecting and ordering actions. The ideas of Pogen led to related methods for creating paraphrases, answering questions, and translating between languages. The principle of phrase structure organization has permeated our NL efforts and found a particularly friendly environment in procedural logic where Chester and I [1982] show that the same grammar that translates English strings into semantic representations can serve to translate the representations into English strings. This result, confirming an earlier finding by Heidorn, greatly simplifies the linguistic programming requirements for NL translation and text questioning systems. Since 1972 the computational linguistics world has changed much. Today Al and Logic interests tend to overshadow linguistic approaches to language. But despite all the complexities in translating between NL constituents and computational representations, augmented phrase structure grammars provide a general and effective means to guide the flow of computation.</abstract>
<note confidence="0.839860428571429">REFERENCES Simmons, R.F., and Chester, DL., &amp;quot;Relating Sentences and Semantic Networks with Procedural Communicationsof the ACM, September 1982, (in press). Simmons, R.F., and Correira, A., &amp;quot;Rule Forms for Verse, Sentence, and Story Trees,&amp;quot; in Findler, (ed.) Networks,pp. 363-392, Academic Press, New York, 1979. Yngve, V., &amp;quot;A Model and a Hypothesis for Language Proceedingsof the Society,pp. 444-466, 1960, Volume 104. 101</note>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>R F Simmons</author>
<author>DL Chester</author>
</authors>
<title>Relating Sentences and Semantic Networks with Procedural Logic,&amp;quot;</title>
<date>1982</date>
<journal>Communications of the ACM,</journal>
<note>(in press).</note>
<marker>Simmons, Chester, 1982</marker>
<rawString>Simmons, R.F., and Chester, DL., &amp;quot;Relating Sentences and Semantic Networks with Procedural Logic,&amp;quot; Communications of the ACM, September 1982, (in press).</rawString>
</citation>
<citation valid="true">
<authors>
<author>R F Simmons</author>
<author>A Correira</author>
</authors>
<title>Rule Forms for Verse, Sentence, and Story Trees,&amp;quot;</title>
<date>1979</date>
<booktitle>Associative Networks,</booktitle>
<pages>363--392</pages>
<editor>in Findler, N.V., (ed.)</editor>
<publisher>Academic Press,</publisher>
<location>New York,</location>
<marker>Simmons, Correira, 1979</marker>
<rawString>Simmons, R.F., and Correira, A., &amp;quot;Rule Forms for Verse, Sentence, and Story Trees,&amp;quot; in Findler, N.V., (ed.) Associative Networks, pp. 363-392, Academic Press, New York, 1979.</rawString>
</citation>
<citation valid="true">
<authors>
<author>V Yngve</author>
</authors>
<title>A Model and a Hypothesis for Language Structure,&amp;quot;</title>
<date>1960</date>
<journal>Proceedings of the American Philosophical Society,</journal>
<volume>104</volume>
<pages>444--466</pages>
<contexts>
<context position="1653" citStr="Yngve 1960" startWordPosition="256" endWordPosition="257">sformationalists, and the new breed of computerniks. &amp;quot;On Seeing the Elephant&amp;quot; was a restatement of the old Sufi parable that suggested that we each perceived only isolated parts of our science. That was the period during which Jonathan Slocum and I were concerned with using Augmented Transition Networks to generate coherent English from semantic networks. That line of research was originated by the first president of the Association, Victor Yngve, who in 1960 had published descriptions of algorithms for using a phrase structure grammar to generate syntactically well-formed nonsense sentences [Yngve 19601. Sheldon Klein and I about 1962-1964 were fascinated by the technique and generalized it to a method for controlling the sense of what was generated by respecting the semantic dependencies of words as they occurred in text. Yngve&apos;s work was truly seminal and it continued to inspire Sheldon for years as he developed method after method for generating detective stories and now operas. I, too, with various students continued to explore the generation side of language, most recently with Correira [1979], using a form of story tree to construct stories and their summaries. No matter that Meehan f</context>
</contexts>
<marker>Yngve, 1960</marker>
<rawString>Yngve, V., &amp;quot;A Model and a Hypothesis for Language Structure,&amp;quot; Proceedings of the American Philosophical Society, pp. 444-466, 1960, Volume 104.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>