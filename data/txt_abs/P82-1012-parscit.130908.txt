<newSection> ISSUES IN NATURAL LANGUAGE ACCESS TO DATABASES FROM A LOGIC PROGRAMMING PERSPECTIVE David H D Warren Artificial Intelligence Center SRI International, Menlo Park, CA 94025, USA I INTRODUCTION I shall discuss issues in natural language (NL) access to databases in the light of an experimental NL question-answering system, Chat, which I wrote with Fernando Pereira at Edinburgh University, and which is described more fully elsewhere [8] [61 [5].
Our approach was strongly influenced by the work of Alain Colmerauer [2] and Veronica Dahl [3] at Marseille University.
Chat processes a NL question in three main stages: translation planning execution English ----> logic ----> Prolog ----> answer corresponding roughly to: &quot;What does the question mean?&quot;, &quot;How shall I answer it?&quot;, &quot;What is the answer?&quot;.
The meaning of a NL question, and the database of information about the application domain, are both represented as statements in an extension of a subset of first-order logic, which we call &quot;definite closed world&quot; (DCW) logic.
This logic is a subset of first-order logic, in that it admits only &quot;definite&quot; statements; uncertain information (&quot;Either this or that&quot;) is not allowed.
DCW logic extends first-order logic, in that it provides constructions to support the &quot;closed world&quot; assumption, that everything not known to be true is false.
Why does Chat use this curious logic as a meaning representation language?
The main reason is that it can be implemented very efficiently.
In fact, DCW logic forms the basis of a general purpose programming language, Prolog [9] [1], due to Colmerauer, which has had a wide variety of applications.
Prolog can be viewed either as an extension of pure Lisp, or as an extension of a relational database query language.
Moreover, the efficiency of the DEC-10 Prolog implementation is comparable both with compiled Lisp [9] and with current relational database systems [6] (for databases within virtual memory).
Chat's second main stage, &quot;planning&quot;, is responsible for transforming the logical form of the NL query into efficient Prolog [6].
This step is analogous to &quot;query optimisation&quot; in a relational database system.
The resulting Prolog form is directly executed to yield the answer to the original question.
On Chat's domain of world geography, most questions within the English subset are answered in well under one second, including queries which involve taking joins between relations having of the order of a thousand tuples.
A disadvantage of much current work on NL access to databases is that the work is restricted to providing access to databases, whereas users would appreciate NL interfaces to computer systems in general.
Moreover, the attempt to provide a NL &quot;front-end&quot; to databases is surely putting the cart before the horse.
What one should really do is to investigate what &quot;back-end&quot; is needed to support NL interfaces to computers, without being constrained by the limitations of current database management systems.
I would argue that the &quot;logic programming&quot; approach taken in Chat is the right way to avoid these drawbacks of current work in NL access to databases.
Most work which attempts to deal precisely with the meaning of NL sentences uses some system of logic as an intermediate meaning representation language.
Logic programming is concerned with turning such systems of logic into practical computational formalisms.
The outcome of this &quot;top-down&quot; approach, as realised in the language Prolog, has a great deal in common with the relational approach to databases, which can be seen as the result of a &quot;bottom-up&quot; effort to make database languages more like natural language.
However Prolog is much more general than relational database formalisms, in that it permits data to be defined by general rules having the power of a fully general programming language.
The logic programming approach therefore allows one to interface NL to general programs as well as to databases.
Current Prolog systems, because they were designed with programming not databases in mind, are not capable of accommodating really large databases.
However there seems to be no technical obstacle to building a Prolog system that is fully comparable with current relational database management systems, while retaining Prolog's generality and efficiency as a programming language.
Indeed, I expect such a system to be developed in the near future, especially now that Prolog has been chosen as the kernel language for answer(M) < \+ exists(D, department(D) & Japan's &quot;Fifth Generation&quot; computer project [4]. \+ manages(M,D))