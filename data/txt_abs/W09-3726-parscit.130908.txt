<newSection> 1 DUDES In this paper we present a novel formalism for semantic construction called DUDES (Dependency-based Underspecified Discourse REpresentation Structures).
The DUDES formalism has been designed to overcome the rigidity of semantic composition based on the lambda calculus (where the order of application is typically fixed) and provides some flexibility with respect to the direction of the dependence and with respect to the order of application of arguments.
In this short paper we present the DUDES formalism and work through a simple example.
DUDES bears some resemblance to the work on λ-DRT [2] and LUDs [1] as well as with the work of Copestake et al.
[4] and represents a generalization of the formalism introduced in [3].
A detailed discussion of the relation to these formalisms is clearly out of the scope of this paper.
DUDES are characterized by three main facts.
First, they represent semantic dependencies and are thus inherently suitable for a dependency-based grammar formalism assuming that syntactic dependencies correspond to semantic dependencies (though the correspondence might be “inverted”).
Second, they explicitly encode scope relations and are thus able to yield underspecified representations as output (in contrast to the linear logic approach for LFG [5] where different scopings correspond to different derivations).
Third, there is one single operation for semantic composition which is, to some extent, order-independent (in contrast to traditional lambda-based formalisms) as well as flexible with respect to the direction of the syntactic dependency.
As the name suggests, DUDES builds on DRT [6] and in particular on UDRT [7] in the sense that it relies on labeled DRSs and dominance relations between these to talk about scope.
First of all, we now first formally introduce DUDES: Further, we introduce the semantic composition operation for DUDES along a dependency tree, distinguishing tree cases: Let (γ1, γ2) be an edge in some DAG (dependency tree, LTAG derivation tree or F-Structure DAG).
Assume the edge is labeled with r (a grammatical function) and the semantics of the vertices γ1 and γ2 are given by DUDEs as follows: σ1 := (m1, l1, t1, U1, A1, S1, C1) and σ2 = (m2, l2, t2, U2, A2, S2, C2).
Then the result of applying σ2 to σ1 is the DUDE σ' = σ1(σ2) = (m', l', t', U', A', S, C'), where we need to distinguish where ‘≡’ is the operation of unification between variables.
Concerning the order of application, from the definition of the semantic composition operator it follows that complements and modifiers can be applied in any order, but inversions have to be carried out at the end as We now give the semantic representation of the entries for our running example: “John likes every nice woman.”: they change the mother DUDES and would thus inhibit the application of the complements and the modifiers.
In the following section we show how the semantic composition operation defined above applies to a concrete example.
We will also discuss that our operations still work if (some of) the dependencies are inverted.