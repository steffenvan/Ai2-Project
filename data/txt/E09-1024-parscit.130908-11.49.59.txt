<newSection> Abstract Spoken Language Understanding aims at mapping a natural language spoken sentence into a semantic representation.
In the last decade two main approaches have been pursued: generative and discriminative models.
The former is more robust to overfitting whereas the latter is more robust to many irrelevant features.
Additionally, the way in which these approaches encode prior knowledge is very different and their relative performance changes based on the task.
In this paper we describe a machine learning framework where both models are used: a generative model produces a list of ranked hypotheses whereas a discriminative model based on structure kernels and Support Vector Machines, re-ranks such list.
We tested our approach on the MEDIA corpus (human-machine dialogs) and on a new corpus (human-machine and human-human dialogs) produced in the European LUNA project.
The results show a large improvement on the state-of-the-art in concept segmentation and labeling.
<newSection> 1 Introduction In Spoken Dialog Systems, the Language Understanding module performs the task of translating a spoken sentence into its meaning representation based on semantic constituents.
These are the units for meaning representation and are often referred to as concepts.
Concepts are instantiated by sequences of words, therefore a Spoken Language Understanding (SLU) module finds the association between words and concepts.
In the last decade two major approaches have been proposed to find this correlation: (i) generative models, whose parameters refer to the joint probability of concepts and constituents; and (ii) discriminative models, which learn a classification function to map words into concepts based on geometric and statistical properties.
An example of generative model is the Hidden Vector State model (HVS) (He and Young, 2005).
This approach extends the discrete Markov model encoding the context of each state as a vector.
State transitions are performed as stack shift operations followed by a push of a preterminal semantic category label.
In this way the model can capture semantic hierarchical structures without the use of tree-structured data.
Another simpler but effective generative model is the one based on Finite State Transducers.
It performs SLU as a translation process from words to concepts using Finite State Transducers (FST).
An example of discriminative model used for SLU is the one based on Support Vector Machines (SVMs) (Vapnik, 1995), as shown in (Raymond and Riccardi, 2007).
In this approach, data are mapped into a vector space and SLU is performed as a classification problem using Maximal Margin Classifiers (Shawe-Taylor and Cristianini, 2004).
Generative models have the advantage to be more robust to overfitting on training data, while discriminative models are more robust to irrelevant features.
Both approaches, used separately, have shown a good performance (Raymond and Riccardi, 2007), but they have very different characteristics and the way they encode prior knowledge is very different, thus designing models able to take into account characteristics of both approaches are particularly promising.
In this paper we propose a method for SLU based on generative and discriminative models: the former uses FSTs to generate a list of SLU hypotheses, which are re-ranked by SVMs.
These exploit all possible word/concept subsequences (with gaps) of the spoken sentence as features (i.e. all possible n-grams).
Gaps allow for the encoding of long distance dependencies between words in relatively small n-grams.
Given the huge size of this feature space, we adopted kernel methods and in particular sequence kernels (Shawe-Taylor and Cristianini, 2004) and tree kernels (Raymond and Riccardi, 2007; Moschitti and Bejan, 2004; Moschitti, 2006) to implicitly encode n-grams and other structural information in SVMs.
We experimented with different approaches for training the discriminative models and two different corpora: the well-known MEDIA corpus (Bonneau-Maynard et al., 2005) and a new corpus acquired in the European project LUNA1 (Ray-mond et al., 2007).
The results show a great improvement with respect to both the FST-based model and the SVM model alone, which are the current state-of-the-art for concept classification on such corpora.
The rest of the paper is organized as follows: Sections 2 and 3 show the generative and discriminative models, respectively.
The experiments and results are reported in Section 4 whereas the conclusions are drawn in Section 5.
<newSection> 2 Generative approach for concept classification In the context of Spoken Language Understanding (SLU), concept classification is the task of associating the best sequence of concepts to a given sentence, i.e. word sequence.
A concept is a class containing all the words carrying out the same semantic meaning with respect to the application domain.
In SLU, concepts are used as semantic units and are represented with concept tags.
The association between words and concepts is learned from an annotated corpus.
The Generative model used in our work for concept classification is the same used in (Raymond and Riccardi, 2007).
Given a sequence of words as input, a translation process based on FST is performed to output a sequence of concept tags.
The translation process involves three steps: (1) the mapping of words into classes (2) the mapping of classes into concepts and (3) the selection of the best concept sequence.
The first step is used to improve the generalization power of the model.
The word classes at this level can be both domain-dependent, e.g. ”Hotel” in MEDIA or ”Software” in the LUNA corpus, or domain-independent, e.g. numbers, dates, months etc.
The class of a word not belonging to any class is the word itself.
In the second step, classes are mapped into concepts.
The mapping is not one-to-one: a class may be associated with more than one concept, i.e. more than one SLU hypothesis can be generated.
In the third step, the best or the m-best hypotheses are selected among those produced in the previous step.
They are chosen according to the maximum probability evaluated by the Conceptual Language Model, described in the next section.
<newSection> 2.1 Stochastic Conceptual Language Model (SCLM) An SCLM is an n-gram language model built on semantic tags.
Using the same notation proposed in (Moschitti et al., 2007) and (Raymond and Ric-cardi, 2007), our SCLM trains joint probability P(W, C) of word and concept sequences from an annotated corpus: where W = w1..wk, C = c1..ck and hi = wi−1ci−1..w1c1.
Since we use a 3-gram conceptual language model, the history hi is {wi−1ci−1, wi−2ci−2}.
All the steps of the translation process described here and above are implemented as Finite State Transducers (FST) using the AT&T FSM/GRM tools and the SRILM (Stolcke, 2002) tools.
In particular the SCLM is trained using SRILM tools and then converted to an FST.
This allows the use of a wide set of stochastic language models (both back-off and interpolated models with several discounting techniques like Good-Turing, Witten-Bell, Natural, Kneser-Ney, Unchanged Kneser-Ney etc).
We represent the combination of all the translation steps as a transducer ASLU (Raymond and Riccardi, 2007) in terms of FST operations: where AW is the transducer representation of the input sentence, AW2C is the transducer mapping words to classes and ASLM is the Semantic Language Model (SLM) described above.
The best SLU hypothesis is given by where bestpathn (in this case n is 1 for the 1-best hypothesis) performs a Viterbi search on the FST quences in common between two sentences, in the space of n-grams (for any n). and outputs the n-best hypotheses and projectC performs a projection of the FST on the output labels, in this case the concepts.
Using the FSTs described above, we can generate m best hypotheses ranked by the joint probability of the SCLM.
After an analysis of the m-best hypotheses of our SLU model, we noticed that many times the hypothesis ranked first by the SCLM is not the closest to the correct concept sequence, i.e. its error rate using the Levenshtein alignment with the manual annotation of the corpus is not the lowest among the m hypotheses.
This means that re-ranking the m-best hypotheses in a convenient way could improve the SLU performance.
The best choice in this case is a discriminative model, since it allows for the use of informative features, which, in turn, can model easily feature dependencies (also if they are infrequent in the training set).
<newSection> 3 Discriminative re-ranking Our discriminative re-ranking is based on SVMs or a perceptron trained with pairs of conceptually annotated sentences.
The classifiers learn to select which annotation has an error rate lower than the others so that the m-best annotations can be sorted based on their correctness.
Kernel Methods refer to a large class of learning algorithms based on inner product vector spaces, among which Support Vector Machines (SVMs) are one of the most well known algorithms.
SVMs and perceptron learn a hyperplane H(x) = wx + b = 0, where x� is the feature vector representation of a classifying object o, w� E Rn (a vector space) and b E R are parameters (Vap-nik, 1995).
The classifying object o is mapped into x� by a feature function 0.
The kernel trick allows us to rewrite the decision hyperplane as to 1 for positive and -1 for negative examples, αi E R+, oiVi E {1..l} are the training instances and the product K(oi, o) = (0(oi)0(o)) is the kernel function associated with the mapping 0.
Note that we do not need to apply the mapping 0, we can use K(oi, o) directly (Shawe-Taylor and Cris-tianini, 2004).
For example, next section shows a kernel function that counts the number of word se-The String Kernels that we consider count the number of substrings containing gaps shared by two sequences, i.e. some of the symbols of the original string are skipped.
Gaps modify the weight associated with the target substrings as shown in the following.
Let E be a finite alphabet, E∗ = U∞n= 0 En is the set of all strings.
Given a string s E E∗, |s |denotes the length of the strings and si its compounding symbols, i.e s = s1..s|s|, whereas s[i : j] selects the substring sisi+1..sj−1sj from the i-th to the j-th character.
u is a subsequence of s if there is a sequence of indexes I = (i1, ..., i|u|), with 1 < i1 < ...
< i|u |< |s|, such that u = si1..si|u| or u = s[I] for short.
d(I) is the distance between the first and last character of the subsequence u in s, i.e. d(I) = i|u |− i1 + 1.
Finally, given s1, s2 E E∗, s1s2 indicates their concatenation.
The set of all substrings of a text corpus forms a feature space denoted by F = {u1, u2, ..} C E∗.
To map a string s in R∞ space, we can use the following functions: φu(s) = P~I:u=s[~I] λd(~I) for some A < 1.
These functions count the number of occurrences of u in the string s and assign them a weight Ad(I) proportional to their lengths.
Hence, the inner product of the feature vectors for two strings s1 and s2 returns the sum of all common subsequences weighted according to their frequency of occurrences and lengths, i.e. where d(.) counts the number of characters in the substrings as well as the gaps that were skipped in the original string.
It is worth noting that: Characters in the sequences can be substituted with any set of symbols.
In our study we preferred to use words so that we can obtain word sequences.
For example, given the sentence: How may I help you ? sample substrings, extracted by the Sequence Kernel (SK), are: How help you ?, How help ?, help you, may help you, etc.
Tree kernels represent trees in terms of their sub-structures (fragments).
The kernel function detects if a tree subpart (common to both trees) belongs to the feature space that we intend to generate.
For such purpose, the desired fragments need to be described.
We consider two important characterizations: the syntactic tree (STF) and the partial tree (PTF) fragments.
An STF is a general subtree whose leaves can be non-terminal symbols.
For example, Figure 1(a) shows 10 STFs (out of 17) of the subtree rooted in VP (of the left tree).
The STFs satisfy the constraint that grammatical rules cannot be broken.
For example, [VP [V NP]] is an STF, which has two non-terminal symbols, V and NP, as leaves whereas [VP [V]] is not an STF.
If we relax the constraint over the STFs, we obtain more general substructures called partial trees fragments (PTFs).
These can be generated by the application of partial production rules of the grammar, consequently [VP [V]] and [VP [NP]] are valid PTFs.
Figure 1(b) shows that the number of PTFs derived from the same tree as before is still higher (i.e. 30 PTs).
The main idea of tree kernels is to compute the number of common substructures between two trees T1 and T2 without explicitly considering the whole fragment space.
To evaluate the above kernels between two T1 and T2, we need to define a set F = {f1, f2,.
.. , f|F|}, i.e. a tree fragment space and an indicator function Ii(n), equal to 1 if the target fi is rooted at node n and equal to 0 otherwise.
A tree-kernel function over T1 and T2 where NT1 and NT2 are the sets of the T1’s and T2’s nodes, respectively and Δ(n1, n2) = P|F| i=1Ii(n1)Ii(n2).
The latter is equal to the number of common fragments rooted in the n1 and n2 nodes.
In the following sections we report the equation for the efficient evaluation of Δ for ST and PT kernels.
The Δ function depends on the type of fragments that we consider as basic features.
For example, to evaluate the fragments of type STF, it can be defined as: where σ ∈ {0, 1}, nc(n1) is the number of children of n1 and cjn is the j-th child of the node n.
Note that, since the productions are the same, nc(n1) = nc(n2).
Δ(n1, n2) evaluates the number of STFs common to n1 and n2 as proved in (Collins and Duffy, 2002).
Moreover, a decay factor λ can be added by modifying steps (2) and (3) as follows2: The computational complexity of Eq.
1 is O(|NT1 |× |NT2|) but as shown in (Moschitti, 2006), the average running time tends to be linear, i.e. O(|NT1 |+ |NT2|), for natural language syntactic trees.
PTFs have been defined in (Moschitti, 2006).
Their computation is carried out by the following Δ function: where ~I1 = (h1,h2,h3,..) and ~I2 = (k1, k2, k3, ..) are index sequences associated with the ordered child sequences cn1 of n1 and cn2 of n2, respectively, ~I1j an d ~I2j point to the j-th child in the corresponding sequence, and, again, l(·) returns the sequence length, i.e. the number of children.
Furthermore, we add two decay factors: µ for the depth of the tree and λ for the length of the child subsequences with respect to the original sequence, i.e. we account for gaps.
It follows that where d(~I1) = ~I1l(~I1) − ~I11 and d(~I2) = ~I2l(~I2) − ~I21.
This way, we penalize both larger trees and child subsequences with gaps.
Eq.
2 is more general than Eq.
1. Indeed, if we only consider the contribution of the longest child sequence from node pairs that have the same children, we implement the STK kernel.
The FST generates the m most likely concept annotations.
These are used to build annotation pairs, (si, sj), which are positive instances if si has a lower concept annotation error than sj, with respect to the manual annotation in the corpus.
Thus, a trained binary classifier can decide if si is more accurate than sj.
Each candidate annotation si is described by a word sequence where each word is followed by its concept annotation.
For example, given the sentence: where NULL, ACTION, RELATIVETIME, and HW are the assigned concepts whereas B and I are the usual begin and internal tags for concept subparts.
The second annotation is less accurate than the first since problema is annotated as an action and ”scheda di rete” is split in three different concepts.
Given the above data, the sequence kernel is used to evaluate the number of common n-grams between si and sj.
Since the string kernel skips some elements of the target sequences, the counted n-grams include: concept sequences, word sequences and any subsequence of words and concepts at any distance in the sentence.
Such counts are used in our re-ranking function as follows: let ei be the pair (s1i, s2 � we evaluate This schema, consisting in summing four different kernels, has been already applied in (Collins and Duffy, 2002) for syntactic parsing re-ranking, where the basic kernel was a tree kernel instead of SK and in (Moschitti et al., 2006), where, to re-rank Semantic Role Labeling annotations, a tree kernel was used on a semantic tree similar to the one introduced in the next section.
Since the aim in concept annotation re-ranking is to exploit innovative and effective source of information, we can use the power of tree kernels to generate correlation between concepts and word structures.
Fig. 2 describes the structural association between the concept and the word level.
This kind of trees allows us to engineer new kernels and consequently new features (Moschitti et al., 2008), e.g. their subparts extracted by STK or PTK, like the tree fragments in figures 1(a) and 1(b).
These can be used in SVMs to learn the classification of words in concepts.
More specifically, in our approach, we use tree fragments to establish the order of correctness between two alternative annotations.
Therefore, given two trees associated with two annotations, a re-ranker based on tree kernel, KR, can be built in the same way of the sequence-based kernel by substituting SK in Eq.
3 with STK or PTK.
<newSection> 4 Experiments In this section, we describe the corpora, parameters, models and results of our experiments of word chunking and concept classification.
Our baseline relates to the error rate of systems based on only FST and SVMs.
The re-ranking models are built on the FST output.
Different ways of producing training data for the re-ranking models determine different results.
We used two different speech corpora: The corpus LUNA, produced in the homonymous European project is the first Italian corpus of spontaneous speech on spoken dialog: it is based on the help-desk conversation in the domain of software/hardware repairing (Raymond et al., 2007).
The data are organized in transcriptions and annotations of speech based on a new multilevel protocol.
Data acquisition is still in progress.
Currently, 250 dialogs acquired with a WOZ approach and 180 Human-Human (HH) dialogs are available.
Statistics on LUNA corpus are reported in Table 1.
The corpus MEDIA was collected within the French project MEDIA-EVALDA (Bonneau-Maynard et al., 2005) for development and evaluation of spoken understanding models and linguistic studies.
The corpus is composed of 1257 dialogs, from 250 different speakers, acquired with a Wizard of Oz (WOZ) approach in the context of hotel room reservations and tourist information.
Statistics on transcribed and conceptually annotated data are reported in Table 2.
We defined two different training sets in the LUNA corpus: one using only the WOZ training dialogs and one merging them with the HH dialogs.
Given the small size of LUNA corpus, we did not carried out parameterization on a development set but we used default or a priori parameters.
We experimented with LUNA WOZ and six re-rankers obtained with the combination of SVMs and perceptron (PCT) with three different types of kernels: Syntactic Tree Kernel (STK), Partial Tree kernels (PTK) and the String Kernel (SK) described in Section 3.3.
Given the high number and the cost of these experiments, we ran only one model, i.e. the one and SVMs with the Sytntactic Tree Kernel (STK) on two different corpora: LUNA WOZ + HH, and MEDIA.
based on SVMs and STK3 , on the largest datasets, i.e. WOZ merged with HH dialogs and Media.
We trained all the SCLMs used in our experiments with the SRILM toolkit (Stolcke, 2002) and we used an interpolated model for probability estimation with the Kneser-Ney discount (Chen and Goodman, 1998).
We then converted the model in an FST as described in Section 2.1.
The model used to obtain the SVM baseline for concept classification was trained using Yam-CHA (Kudo and Matsumoto, 2001).
For the reranking models based on structure kernels, SVMs or perceptron, we used the SVM-Light-TK toolkit (available at dit.unitn.it/moschitti).
For A (see Section 3.2), cost-factor and trade-off parameters, we used, 0.4, 1 and 1, respectively.
The FST model generates the m-best annotations, i.e. the data used to train the re-ranker based on SVMs and perceptron.
Different training approaches can be carried out based on the use of the corpus and the method to generate the m-best.
We apply two different methods for training: Monolithic Training and Split Training.
In the former, FSTs are learned with the whole training set.
The m-best hypotheses generated by such models are then used to train the re-ranker classifier.
In Split Training, the training data are divided in two parts to avoid bias in the FST generation step.
More in detail, we train FSTs on part 1 and generate the m-best hypotheses using part 2.
Then, we re-apply these procedures inverting part 1 with part 2.
Finally, we train the re-ranker on the merged m-best data.
At the classification time, we generate the m-best of the test set using the FST trained on all training data.
cept Error Rate (CER), on the LUNA WOZ corpus using Split Training approach.
The baseline with FST and SVMs used separately are 23.2% and 26.7% respectively.
Regarding the generation of the training instances �si, sj/, we set m to 10 and we choose one of the 10-best hypotheses as the second element of the pair, sj, thus generating 10 different pairs.
The first element instead can be selected according to three different approaches: (A): si is the manual annotation taken from the corpus; (B) si is the most accurate annotation, in terms of the edit distance from the manual annotation, among the 10-best hypotheses of the FST model; (C) as above but si is selected among the 100-best hypotheses.
The pairs are also inverted to generate negative examples.
All the results of our experiments, expressed in terms of concept error rate (CER), are reported in Table 3, 4 and 5.
In Table 3, the corpora, i.e. LUNA (WOZ+HH) and Media, and the training approaches, i.e. Monolithic Training (MT) and Split Training (ST), are reported in the first and second row.
Column 1 shows the concept classification model used, i.e. the baselines FST and SVMs, and the re-ranking models (RR) applied to FST.
A, B and C refer to the three approaches for generating training instances described above.
As already mentioned for these large datasets, SVMs only use STK.
We note that our re-rankers relevantly improve our baselines, i.e. the FST and SVM concept classifiers on both corpora.
For example, SVM reranker using STK, MT and RR-A improves FST concept classifier of 23.2-15.6 = 7.6 points.
Moreover, the monolithic training seems the most appropriate to train the re-rankers whereas approach A is the best in producing training instances for the re-rankers.
This is not surprising since method A considers the manual annotation as a referent gold standard and it always allows comparing candidate annotations with the perfect one.
Tables 4 and 5 have a similar structure of Table 3 but they only show experiments on LUNA WOZ corpus with respect to the monolithic and split training approach, respectively.
In these tables, we also report the result for SVMs and perceptron (PCT) using STK, PTK and SK.
We note that: First, the small size of WOZ training set (only 1,019 turns) impacts on the accuracy of the systems, e.g. FST and SVMs, which achieved a CER of 18.2% and 23.4%, respectively, using also HH dialogs, with only the WOZ data, they obtain 23.2% and 26.7%, respectively.
Second, the perceptron algorithm appears to be ineffective for re-ranking.
This is mainly due to the reduced size of the WOZ data, which clearly prevents an on line algorithm like PCT to adequately refine its model by observing many examples4.
Third, the kernels which produce higher number of substructures, i.e. PTK and SK, improves the kernel less rich in terms of features, i.e. STK.
For example, using split training and approach A, STK is improved by 20.0-16.1=3.9.
This is an interesting result since it shows that (a) richer structures do produce better ranking models and (b) kernel methods give a remarkable help in feature design.
Next, although the training data is small, the re-rankers based on kernels appear to be very effective.
This may also alleviate the burden of annotating a lot of data.
Finally, the experiments of MEDIA show a not so high improvement using re-rankers.
This is due to: (a) the baseline, i.e. the FST model is very accurate since MEDIA is a large corpus thus the re-ranker can only ”correct” small number of errors; and (b) we could only experiment with the less expensive but also less accurate models, i.e. monolithic training and STK.
Media also offers the possibility to compare with the state-of-the-art, which our re-rankers seem to improve.
However, we need to consider that many Media corpus versions exist and this makes such comparisons not completely reliable.
Future work on the paper research line appears to be very interesting: the assessment of our best models on Media and WOZ+HH as well as other corpora is required.
More importantly, the structures that we have proposed for re-ranking are just two of the many possibilities to encode both word/concept statistical distributions and linguistic knowledge encoded in syntactic/semantic parse trees.
<newSection> 5 Conclusions In this paper, we propose discriminative reranking of concept annotation to capitalize from the benefits of generative and discriminative approaches.
Our generative approach is the state-of-the-art in concept classification since we used the same FST model used in (Raymond and Ric-cardi, 2007).
We could improve it by 1% point in MEDIA and 7.6 points (until 30% of relative improvement) on LUNA, where the more limited availability of annotated data leaves a larger room for improvement.
It should be noted that to design the re-ranking model, we only used two different structures, i.e. one sequence and one tree.
Kernel methods show that combinations of feature vectors, sequence kernels and other structural kernels, e.g. on shallow or deep syntactic parse trees, appear to be a promising research line (Moschitti, 2008).
Also, the approach used in (Zanzotto and Mos-chitti, 2006) to define cross pair relations may be exploited to carry out a more effective pair reranking.
Finally, the experimentation with automatic speech transcriptions is interesting to test the robustness of our models to transcription errors.
<newSection> Acknowledgments This work has been partially supported by the European Commission - LUNA project, contract n.
33549. <newSection> References