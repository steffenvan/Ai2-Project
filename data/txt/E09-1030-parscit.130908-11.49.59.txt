<newSection> Abstract This paper presents a conditional random field-based approach for identifying speaker-produced disfluencies (i.e. if and where they occur) in spontaneous speech transcripts.
We emphasize false start regions, which are often missed in current disfluency identification approaches as they lack lexical or structural similarity to the speech immediately following.
We find that combining lexical, syntactic, and language model-related features with the output of a state-of-the-art disflu-ency identification system improves overall word-level identification of these and other errors.
Improvements are reinforced under a stricter evaluation metric requiring exact matches between cleaned sentences annotator-produced reconstructions, and altogether show promise for general re-construction efforts.
<newSection> 1 Introduction The output of an automatic speech recognition (ASR) system is often not what is required for subsequent processing, in part because speakers themselves often make mistakes (e.g. stuttering, self-correcting, or using filler words).
A cleaner speech transcript would allow for more accurate language processing as needed for natural language processing tasks such as machine translation and conversation summarization which often assume a grammatical sentence as input.
A system would accomplish reconstruction of its spontaneous speech input if its output were to represent, in flawless, fluent, and content-preserving text, the message that the speaker intended to convey.
Such a system could also be applied not only to spontaneous English speech, but to correct common mistakes made by non-native speakers (Lee and Seneff, 2006), and possibly extended to non-English speaker errors.
A key motivation for this work is the hope that a cleaner, reconstructed speech transcript will allow for simpler and more accurate human and natural language processing, as needed for applications like machine translation, question answering, text summarization, and paraphrasing which often assume a grammatical sentence as input.
This benefit has been directly demonstrated for statistical machine translation (SMT).
Rao et al.
(2007) gave evidence that simple disfluency removal from transcripts can improve BLEU (a standard SMT evaluation metric) up to 8% for sentences with disflu-encies.
The presence of disfluencies were found to hurt SMT in two ways: making utterances longer without adding semantic content (and sometimes adding false content) and exacerbating the data mismatch between the spontaneous input and the clean text training data.
While full speech reconstruction would likely require a range of string transformations and potentially deep syntactic and semantic analysis of the errorful text (Fitzgerald, 2009), in this work we will first attempt to resolve less complex errors, corrected by deletion alone, in a given manually-transcribed utterance.
We build on efforts from (Johnson et al., 2004), aiming to improve overall recall – especially of false start or non-copy errors – while concurrently maintaining or improving precision.
Common simple disfluencies in sentence-like utterances (SUs) include filler words (i.e. “um”, “ah”, and discourse markers like “you know”), as well as speaker edits consisting of a reparandum, an interruption point (IP), an optional interregnum (like “I mean”), and a repair region (Shriberg, 1994), as seen in Figure 1. and other examples, reparandum regions are in brackets (’[’, ’]’), interregna are in braces ('I' ' 'f', ’}’), and interruption points are marked by ’+’.
These reparanda, or edit regions, can be classified into three main groups: EX4: [amazon was incorporated by] fuh} well i only knew two people there In simple cleanup (a precursor to full speech reconstruction), all detected filler words are deleted, and the reparanda and interregna are deleted while the repair region is left intact.
This is a strong initial step for speech reconstruction, though more complex and less deterministic changes are often required for generating fluent and grammatical speech text.
In some cases, such as the repetitions mentioned above, simple cleanup is adequate for reconstruction.
However, simply deleting the identified reparandum regions is not always optimal.
We would like to consider preserving these fragments (for false starts in particular) if In the first restart fragment example (EX3 in Section 1.1), the reparandum introduces no new active verbs or new content, and thus can be safely deleted.
The second example (EX4) however demonstrates a case when the reparandum may be considered to have unique and preservable content of its own.
Future work should address how to most appropriately reconstruct speech in this and similar cases; this initial work will for risk information loss as we identify and delete these reparandum regions.
<newSection> 1.2 Related Work Stochastic approaches for simple disfluency detection use features such as lexical form, acoustic cues, and rule-based knowledge.
Most state-ofthe-art methods for edit region detection such as (Johnson and Charniak, 2004; Zhang and Weng, 2005; Liu et al., 2004; Honal and Schultz, 2005) model speech disfluencies as a noisy channel model.
In a noisy channel model we assume that an unknown but fluent string F has passed through a disfluency-adding channel to produce the observed disfluent string D, and we then aim to recover the most likely input string F�, defined as where P(F) represents a language model defining a probability distribution over fluent “source” strings F, and P(D|F) is the channel model defining a conditional probability distribution of observed sentences D which may contain the types of construction errors described in the previous subsection.
The final output is a word-level tagging of the error condition of each word in the sequence, as seen in line 2 of Figure 2.
The Johnson and Charniak (2004) approach, referred to in this document as JC04, combines the noisy channel paradigm with a tree-adjoining grammar (TAG) to capture approximately repeated elements.
The TAG approach models the crossed word dependencies observed when the reparandum incorporates the same or very similar words in roughly the same word order, which JC04 refer to as a rough copy.
Our version of this system does not use external features such as prosodic classes, as they use in Johnson et al.
(2004), but otherwise appears to produce comparable results to those reported.
While much progress has been made in simple disfluency detection in the last decade, even top-performing systems continue to be ineffective at identifying words in reparanda.
To better understand these problems and identify areas class labels, where - denotes a non-error, FL denotes a filler, E generally denotes reparanda, and RC and NC indicate rough copy and non-copy speaker errors, respectively.
for improvement, we used the top-performing1 JC04 noisy channel TAG edit detector to produce edit detection analyses on the test segment of the Spontaneous Speech Reconstruction (SSR) corpus (Fitzgerald and Jelinek, 2008).
Table 1 demonstrates the performance of this system for detecting filled pause fillers, discourse marker fillers, and edit words.
The results of a more granular analysis compared to a hand-refined reference (as shown in line 3 of Figure 2) are shown in Table 2.
The reader will recall that precision P is defined as P = |correct| |correct|+|false |and recall R = |correct| |correct|+|miss|.
We denote the harmonic mean of P and R as F-score F and calculate it F = 2 1/P+1/R.
As expected given the assumptions of the TAG approach, JC04 identifies repetitions and most revisions in the SSR data, but less successfully labels false starts and other speaker self-interruptions which do not have a cross-serial correlations.
These non-copy errors (with a recall of only 43.2%), are hurting the overall edit detection recall score.
Precision (and thus F-score) cannot be calculated for the experiment in Table 2; since the JC04 does not explicitly label edits as rough copies or non-copies, we have no way of knowing whether words falsely labeled as edits would have been considered as false RCs or false NCs.
This will unfortunately hinder us from using JC04 as a direct baseline comparison in our work targeting false starts; however, we consider these results to be further motivation for the work.
Surveying these results, we conclude that there is still much room for improvement in the field of simple disfluency identification, especially the cases of detecting non-copy reparandum and learning how and where to implement non-deletion reconstruction changes.
<newSection> 2 Approach We conducted our experiments on the recently released Spontaneous Speech Reconstruction (SSR) corpus (Fitzgerald and Jelinek, 2008), a medium-sized set of disfluency annotations atop Fisher conversational telephone speech (CTS) data (Cieri et al., 2004).
Advantages of the SSR data include As reconstructions are sometimes non-deterministic (illustrated in EX6 in Section 1.1), the SSR provides two manual reconstruc-tions for each utterance in the data.
We use these dual annotations to learn complementary approaches in training and to allow for more accurate evaluation.
The SSR corpus does not explicitly label all reparandum-like regions, as defined in Section 1.1, but only those which annotators selected to delete.
Thus, for these experiments we must implicitly attempt to replicate annotator decisions regarding whether or not to delete reparandum regions when labeling them as such.
Fortunately, we expect this to have a negligible effect here as we will emphasize utterances which do not require more complex reconstructions in this work.
The Spontaneous Speech Reconstruction corpus is partitioned into three subcorpora: 17,162 training sentences (119,693 words), 2,191 sentences (14,861 words) in the development set, and 2,288 sentences (15,382 words) in the test set.
Approximately 17% of the total utterances contain a reparandum-type error.
The output of the JC04 model ((Johnson and Charniak, 2004) is included as a feature and used as an approximate baseline in the following experiments.
The training of the TAG model within this system requires a very specific data format, so this system is trained not with SSR but with Switchboard (SWBD) (Godfrey et al., 1992) data as described in (Johnson and Charniak, 2004).
Key differences in these corpora, besides the form of their annotations, include: While we hope to adapt the trained JC04 model to SSR data in the future, for now these difference in task, evaluation, and training data will prevent direct comparison between JC04 and our results.
Conditional random fields (Lafferty et al., 2001), or CRFs, are undirected graphical models whose prediction of a hidden variable sequence Y is globally conditioned on a given observation sequence X, as shown in Figure 3.
Each observed field.
For this work, x represents observable inputs for each word as described in Section 3.1 and y represents the error class of each word (Section 3.2).
state xi E X is composed of the corresponding word wi and a set of additional features Fi, detailed in Section 3.1.
The conditional probability of this model can be represented as where Zλ(X) is a global normalization factor and A = (A1 ...
AK) are model parameters related to each feature function Fk(X, Y ).
CRFs have been widely applied to tasks in natural language processing, especially those involving tagging words with labels such as part-of-speech tagging and shallow parsing (Sha and Pereira, 2003), as well as sentence boundary detection (Liu et al., 2005; Liu et al., 2004).
These models have the advantage that they model sequential context (like hidden Markov models (HMMs)) but are discriminative rather than generative and have a less restricted feature set.
Additionally, as compared to HMMs, CRFs offer conditional (versus joint) likelihood, and directly maximizes posterior label probabilities P(E|O).
We used the GRMM package (Sutton, 2006) to implement our CRF models, each using a zero-mean Gaussian prior to reduce over-fitting our model.
No feature reduction is employed, except where indicated.
<newSection> 3 Word-Level ID Experiments We aim to train our CRF model with sets of features with orthogonal analyses of the errorful text, integrating knowledge from multiple sources.
While we anticipate that repetitions and other rough copies will be identified primarily by lexical and local context features, this will not necessarily help for false starts with little or no lexical overlap between reparandum and repair.
To catch these errors, we add both language model features (trained with the SRILM toolkit (Stolcke, 2002) on SWBD data with EDITED reparandum nodes removed), and syntactic features to our model.
We also included the output of the JC04 system – which had generally high precision on the SSR data – in the hopes of building on these results.
Altogether, the following features F were extracted for each observation xi. log ratio of the two (log p(t 1 )) to serve as pW an approximation for mutual information between the token and its history, as defined below.
This aims to capture unexpected n-grams produced by the juxtaposition of the reparan-dum and the repair.
The mutual information feature aims to identify when common words are seen in uncommon context (or, alterna-tively, penalize rare n-grams normalized for rare words).
(Ferreira and Bailey, 2004) and others have found that false starts and repeats tend to end at certain points of phrases, which we also found to be generally true for the annotated data.
Note that the syntactic and POS features we used are extracted from the output of an automatic parser.
While we do not expect the parser to always be accurate, especially when parsing errorful text, we hope that the parser will at least be consistent in the types of structures it assigns to particular error phenomena.
We use these features in the hope of taking advantage of that consistency.
In these experiments, we attempt to label the following word-boundary classes as annotated in SSR corpus: Other labels annotated in the SSR corpus (such as insertions and word reorderings), have been ignored for these error tagging experiments.
We approach our training of CRFs in several ways, detailed in Table 3.
In half of our experiments (#1, 3, and 4), we trained a single model to predict all three annotated classes (as defined at the beginning of Section 3.3), and in the other half (#2, 5, and 6), we trained the model to predict NCs only, NCs and FLs, RCs only, or RCs and FLs (as FLs often serve as interregnum, we predict that these will be a valuable cue for other edits).
We varied the subcorpus utterances used in training.
In some experiments (#1 and 2) we trained with the entire training set3, including sentences without speaker errors, and in others (#3-6) we trained only on those sentences containing the relevant deletion errors (and no additionally complex errors) to produce a densely errorful training set.
Likewise, in some experiments we produced output only for those test sentences which we knew to contain simple errors (#3 and 5).
This was meant to emulate the ideal condition where we could perfectly predict which sentences contain errors before identifying where exactly those errors occurred.
The JC04-edit feature was included to help us build on previous efforts for error classification.
To confirm that the model is not simply replicating these results and is indeed learning on its own with the other features detailed, we also trained models without this JC04-edit feature.
We first evaluate edit detection accuracy on a per-word basis.
To evaluate our progress identifying word-level error classes, we calculate precision, recall and F-scores for each labeled class c in each experimental scenario.
As usual, these metrics are calculated as ratios of correct, false, and missed predictions.
However, to take advantage of the double reconstruction annotations provided in SSR (and more importantly, in recognition of the occasional ambiguities of reconstruction) we modified these calculations slightly as shown below.
where cwi is the hypothesized class for wi and cg1,i and cg2,i are the two reference classes.
Analysis: Experimental results can be seen in Tables 4 and 5.
Table 4 shows the impact of sults: Feature variation.
All models were trained with experimental setup #1 and with the set of features identified.
training models for individual features and of constraining training data to contain only those utterances known to contain errors.
It also demonstrates the potential impact on error classification after prefiltering test data to those SUs with errors.
Table 5 demonstrates the contribution of each group of features to our CRF models.
Our results demonstrate the impact of varying our training data and the number of label classes trained for.
We see in Table 4 from setup #5 experiments that training and testing on error-containing utterances led to a dramatic improvement in F1score.
On the other hand, our results for experiments using setup #6 (where training data was filtered to contain errorful data but test data was fully preserved) are consistently worse than those of either setup #2 (where both train and test data was untouched) or setup #5 (where both train and test data were prefiltered).
The output appears to suffer from sample bias, as the prior of an error occurring in training is much higher than in testing.
This demonstrates that a densely errorful training set alone cannot improve our results when testing data conditions do not match training data conditions.
However, efforts to identify errorful sentences before determining where errors occur in those sentences may be worthwhile in preventing false positives in error-less utterances.
We next consider the impact of the four feature groups on our prediction results.
The CRF model appears competitive even without the advantage of building on JC04 results, as seen in Table 54.
Interestingly and encouragingly, the NT bounds features which indicate the linguistic phrase structures beginning and ending at each word according to an automatic parse were also found to be highly contribututive for both fillers and non-copy identification.
We believe that further pursuit of syntactic features, especially those which can take advantage of the context-free weakness of statistical parsers like (Charniak, 1999) will be promising in future research.
It was unexpected that NC classification would be so sensitive to the loss of lexical features while RC labeling was generally resilient to the dropping of any feature group.
We hypothesize that for rough copies, the information lost from the removal of the lexical items might have been compensated for by the JC04 features as JC04 performed most strongly on this error type.
This should be further investigated in the future.
Depending on the downstream task of speech reconstruction, it could be imperative not only to identify many of the errors in a given spoken utterance, but indeed to identify all errors (and only those errors), yielding the precise cleaned sentence that a human annotator might provide.
In these experiments we apply simple cleanup (as described in Section 1.1) to both JC04 output and the predicted output for each experimental setup in Table 3, deleting words when their right boundary class is a filled pause, rough copy or non-copy.
Taking advantage of the dual annotations for each sentence in the SSR corpus, we can report both single-reference and double-reference evaluation.
Thus, we judge that if a hypothesized cleaned sentence exactly matches either reference sentence cleaned in the same manner, we count the cleaned utterance as correct and otherwise assign no credit.
Analysis: We see the outcome of this set of experiments in Table 6.
While the unfiltered test sets of JC04-1, setup #1 and setup #2 appear to have much higher sentence-level cleanup accuracy than the other experiments, we recall that this is natural also due to the fact that the majority of these sentences should not be cleaned at all, besides culate precision and thus Fl score precisely.
Instead, here we show the resultant Fl for the best case and worst case precision range.
occasional minor filled pause deletions.
Looking specifically on cleanup results for sentences known to contain at least one error, we see, once again, that our system outperforms our baseline JC04 system at this task.
<newSection> 4 Discussion Our first goal in this work was to focus on an area of disfluency detection currently weak in other state-of-the-art speaker error detection systems – false starts – while producing comparable classification on repetition and revision speaker errors.
Secondly, we attempted to quantify how far deleting identified edits (both RC and NC) and filled pauses could bring us to full reconstruction of these sentences.
We’ve shown in Section 3 that by training and testing on data prefiltered to include only utterances with errors, we can dramatically improve our results, not only by improving identification of errors but presumably by reducing the risk of falsely predicting errors.
We would like to further investigate to understand how well we can automatically identify errorful spoken utterances in a corpus.
<newSection> 5 Future Work This work has shown both achievable and demonstrably feasible improvements in the area of identifying and cleaning simple speaker errors.
We believe that improved sentence-level identification of errorful utterances will help to improve our word-level error identification and overall reconstruction accuracy; we will continue to research these areas in the future.
We intend to build on these efforts, adding prosodic and other features to our CRF and maximum entropy models, In addition, as we improve the word-level classification of rough copies and non-copies, we will begin to move forward to better identify more complex speaker errors such as missing arguments, misordered or redundant phrases.
We will also work to apply these results directly to the output of a speech recognition system instead of to transcripts alone.
<newSection> Acknowledgments The authors thank our anonymous reviewers for their valuable comments.
Support for this work was provided by NSF PIRE Grant No. OISE-0530118.
Any opinions, findings, conclusions, or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the supporting agency.
<newSection> References