<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.031868">
<title confidence="0.9900945">
A Development Environment for an MTT-Based Sentence
Generator
</title>
<author confidence="0.972626">
Bernd Bohnet, Andreas Lan.gjahr and Leo Wanner
</author>
<affiliation confidence="0.9908285">
Computer Science Department
University of Stuttgart
</affiliation>
<address confidence="0.895712">
Breitwiesenstr. 20-22
- 70565 Stuttgart, Germany
</address>
<email confidence="0.720727">
bohnet langj ahrl wanner}Oinformatik.uni-stuttgart. de
</email>
<sectionHeader confidence="0.985596" genericHeader="abstract">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999958941176471">
With the rising standard of the state of the art in
text generation and the increase of the number
of practical generation applications, it becomes
more and more important to provide means for
the maintenance of the generator, i.e. its ex-
tension, modification, and monitoring by gram-
marians who are not familiar with its internals.
However, only a few sentence and text gener-
ators developed to date actually provide these
means. One of these generators is KPML. (Bate-
man, 1997). KPIVIL comes with a Development
Environment and there is no doubt about the
contribution of this environment to the popular-
ity of the systemic approach in generation.
In the generation project at Stuttgart, the
realization of a high quality development en-
vironment (henceforth, DE) has been a central
topic from the beginning. The DE provides sup-
port to the user with respect to writing, mod-
ifying, testing, and debugging of (i) grammar
rules. (ii) lexical information, and (iii) linguis-
tic structures at different levels of abstraction.
Furthermore, it automatically generalizes the or-
ganization of the lexica and the grammar. In
what follows, 1.ve briefly describe DE&apos;s main fea-
tures. The theoretical linguistic background of
the DE is the Meaning-Text Theory (Mel&apos;euk,
1988: Polguere, 199S). However. its introduc-
tion is beyond the scope of this note; the inter-
ested reader is asked to consult the above ref-
erences as well as further literature on the use
of t TT in text generation —for instance. ( for-
danska ja ct el.. 1992: Lavoie k Rainbow. 1997:
(loch. q07).
</bodyText>
<sectionHeader confidence="0.675901" genericHeader="method">
2 Global View on the DE
</sectionHeader>
<bodyText confidence="0.999821535714286">
In forrT, seven levels (or strata) of linguis-
tic description are distinguished, of which
five are relevant for generation: semantic
(Sem), deep-syntactic (DSynt), surface-syntactic
(SSynt), deep-morphological (DMorph) and
surface-morphological (SMorph). In order to be
able to generate starting from the data in a data
base, we introduce an additional, the conceptual
(Con) stratum. The input structure to DE is thus
a conceptual structure (ConStr) derived from the
data in the DB. The generation process consists
of a series of structure mappings between adja-
cent strata until the SMorph stratum is reached.
At the SMorph stratum, the structure is a string
of linearized word forms.
The central module of the DE is a compiler
that maps a structure specified at one of the five
first of the above strata on a structure at the
adjacent stratum. To support the user in the ex-
amination of the internal information gathered
during the processing of a structure. a debug-
ger and an inspector are available. The user can
interact with the compiler either via, a graphic
interface or via a text command interface. For
the maintenance of the grammar, of the lexica
and of the linguistic structures, the DE possesses
separate editors: a rule editor, a lexicon editor,
and a structure editor.
</bodyText>
<subsectionHeader confidence="0.964491">
2.1 The Rule Editor
</subsectionHeader>
<bodyText confidence="0.999244333333333">
The Rules. Most of the grammatical rules
in an irl&amp;quot;r-based generator are two-level Nies.
A two-level rule establishes a correspondence
</bodyText>
<page confidence="0.99613">
260
</page>
<figureCaption confidence="0.9427395">
between minimal structures of two adjacent
strata. Given that in generation five of
MTT&apos;s strata are used, four sets of two-level
rules are available: (1) SernDSynt-rules, (2)
DSyritSSynt-rules, (3) SSyntDMorph rules,
and (4) DMorphSMOrph-rules.
</figureCaption>
<bodyText confidence="0.966287423076923">
Formally, a two-level rule is defined by the
quintuple (L, Ctxt, Conds, TZ, Corr). L specifies
the lefthand side of the. rule-,a_rninimal ,soitrce,
substructure that is mapped by the rule onto its
destination structure specified in Te, the right-
hand side of the rule. Ctxt specifies the wider
context of the lefthand side in the input structure
(note that by far not all rules contain context in-
formation). Conds specifies the conditions that
must be satisfied for the rule to be applicable to
an input substructure matched by E. Corr spec-
ifies the correspondence between the individual
nodes of the lefthand side and the righth and side
structures.
Consider a typical Sem -1)Synt- rule,
which maps the semantic relation &apos;1&apos; that
holds between a property and an entity
that possesses this property onto the deep-
syntactic relation ATTR. The names begin-
ning with a &apos;?&apos; are variables. The condition
&apos;Lex: : (Sem: : (?Xsem. sem) .1ex) .cat = adj&apos;
requires that the lexicalization of the property
is an adjective. `?xsera &lt;4, ?Xdsynt&apos; and `?Ysem
.;* ?Ydsynt&apos; mean that the semantic node ?Xsem
is expressed at the deep-syntactic stratum by
?Xdsynt, and ?Ysem by ?Ydsynt.
</bodyText>
<figure confidence="0.925640461538461">
property(Sem_DSynt)
leftside:
?Xsem ?Ysem
conditions:
Sem::?Xsem.sem.type = property
Lex::(Sem::(?Xsem.sem).1ex).cat = adj
rightside:
?Xds
?Yds
?Yds -ATTR--)??Xds
correspondence:
?Xsem ) ?Xds
?Ysem &lt;=&gt; ?Yds}
</figure>
<bodyText confidence="0.99751518">
The rule editor (RE) has two main functions:
(i) to support t he maintenance (i.e editing and
examination) of grammatical rules. and (ii) to
optimize the organization of the grammar by au-
tomatic detection of common parts in &apos;several
rules and their extraction into abstract &apos;class&apos;
rules. The theoretical background and the proce-
dure of rule generalization is described in detail
in (Wanner &amp; Bohnet, submitted) and will hence
not be discussed in this note.
While editing a rule, the developer has the
standard‘commands •-at 4iisther disposal.- Rules
can be edited either in a text rule editor or via
a graphic interface. Obviously incorrect rules
can be detected during the syntax and the se-
mantic rule checks. The syntax check exam-
ines the correctness of the notation of the state-
ments in a rule (i.e. of variables, relations, con-
ditions, etc.) in the same way as a conventional
compiler does. The semantic check examines
the consistency of the conditions, relations, and
attribute-feature pairs in a rule, the presence of
an attribute&apos;s value in the set of values that are
available to this attribute, etc. If, for instance
in the above rule ‘adj&apos; is misspelled as `adk&apos; or
erroneously a multiple correspondence between
?Yds and ?Xsem and ?Ysem is introduced, the
rule editor draws the developer&apos;s attention to the
respective error (see Figure 1).
Rule Testing. Rule testing is usually a very
time consuming procedure. this is so partly be-
cause the generator needs to be started as a
whole again and again, partly because the re-
sulting structure and the trace must he carefully
inspected in order to find out whether the rule
in question fired and if it did not fire why it
did not. The DE attempts to minimize this ef-
fort. With &apos;drag and drop&apos; the developer can
select one or several rules and apply them onto
an input structure (which can be presented ei-
ther graphically or in a textual format; see be-
low). When a rule dropped onto the structure
fires, the affected parts of the input, structure are
made visually prominent, and the resulting out-
put. (sub)structure appears in the corresponding
window of the structure editor. If a rule did not
fire. the inspector indicates which conditions of
the rule in question were not satisfied. See also
below the description of the features of be in-
spector.
</bodyText>
<page confidence="0.953119">
261
</page>
<table confidence="0.994213142857143">
t••&apos;Sern.DS,6notionn121,1 fli,/e r fill, I NroE
-
• s..., 7 7&amp;quot;..2.&amp;quot;&apos;` 71477.611t.11?
11}Sena OSyn121.10.101,1 al Rule Cll. I pgRiEa
fiditt&apos;IA.4•=siiiiiir=taielbh-litiV&apos;&apos;?;.7&amp;quot;.. ,
17 1E31ii 6
k_..0 a al M ,r,-,, ..,•tr -. •
1.1 -1.*JF &apos;: &amp;quot;&apos;&amp;quot;ii■ &apos;&apos;&apos;1-,F., 7.0,
,
D,..eni ...
,...,. .. .
9 0sern_osvni .4 &amp;quot;a surviv. ......,.....b.,..g..
13 prate9Si
12 Nattivirelpms 111 1
D arg_reverSa &apos;f&amp;quot;- &apos;&apos;&apos;&apos;&apos;&apos;&apos;.&apos; ,&apos;9 &apos;&apos;&apos;&apos;&apos;..&apos; .41. ,,, e ,..,., L N , ..
■.,1
13 process_2 i, XSem.type . property;
o prownr • ..:: (s-.:17KSern.sexo) .Int).cat = ad.; II
Dilme_point ?
D wo_pan
pcoord /xs,.. &lt;=› ?Yd..;
p date THela a=&gt;
(laver
A ••• _, ,
r.:41,,...• 1:3 I FRO
crow, in the rule : property
orrespondence a 2 :Multiple correspondence of /Yds
,.... , J... ,,....n,, .. ,:,....
FIRM
rtOrn to he rule property
onditiona I:Attribute value error. Value rat in definition net,
•,,,,, c,.... &amp;quot;....r.=.---. .,- „ • &apos;a ,
&apos; : &apos; • )&apos;f&amp;quot; Poor Oesmiss . &apos;&apos;&apos;&apos;&apos; &apos; &apos; ... • &amp;quot;..&amp;quot;.&apos;&apos;, - ,• •&apos;•&apos;&apos;.&apos; ) .741-,V0 , ...•&apos; i Oita&amp; &apos;&apos;&apos;. &apos;&apos;&apos;&apos;&apos;&apos;f,&apos;
&apos; . • &apos;&apos;&apos;, ---; ,---.1-- it &amp;quot; 1 P..6,•.. -
_ . ,
</table>
<figureCaption confidence="0.989121">
Figure 1: Error messages of the rule editor
</figureCaption>
<subsectionHeader confidence="0.994922">
2.2 The Structure Editor
</subsectionHeader>
<bodyText confidence="0.999944461538461">
The structure editor manages two types of win-
dows: windows in which the input structures are
presented and edited, and windows in which the
resulting structures are presented. Both types of
windows can be run in a text and in a graphic
mode. The input structures can be edited in
both modes, i.e., new nodes and new relations
can be introduced, attribute-value pairs associ-
ated with the nodes can be changed, etc.
In the same way as rules, structures can be
checked with respect to their syntax and se-
mantics. Each structure can be exported into
postscript files and thus conveniently be printed.
</bodyText>
<subsectionHeader confidence="0.976536">
2.3 The Lexicon Editor
</subsectionHeader>
<bodyText confidence="0.999875692307692">
The main function of the lexicon editor is to sup-
port the maintenance of the lexica. Several types
of lexica are distinguished: conceptual lexica, se-
mantic lexica. and lexico-syntactic lexica.
Besides the standard editor functions, the
lexicon editor provides the following options: (I)
sorting ofthe entries (either alphabetically or ac-
cording to such criteria as &apos;category&apos;) (ii) syntax
check; (di) finding information that is common
to several entries and extracting it into abstract
entries (the result is a hierarchical organization
of the resource). During the demonstration, each
of these options \yin be shown in action.
</bodyText>
<subsectionHeader confidence="0.941605">
2.4 The Inspector
</subsectionHeader>
<bodyText confidence="0.999535897435897">
The inspector fulfils mainly three functions.
First. it presents information collected during
the application or t he rules selected by the de-
veloper to an input structure. This informa-
tion is especially useful for generation experts
who are familiar with the internal processing. It
concerns (1) the correspondences established be-
tween nodes of the input structure and nodes of
the resulting structure, (ii) the instantiation of
the variables of those rules that are applied to-
gether to the input structure in question, and
(iii) the trace of all operations performed by the
compiler during the application of the rules.
Second, it indicates to which part of the input
structure a specific rule is applicable and what
its result at the destination side is. Third, it in-
dicates which rules failed and why. The second
and third kind of information is useful not only
for generation experts, but also for grammarians
with a pure linguistic background.
Figure 2 shows a snapshot of the inspector
editor interface. Sets of rules that can simulta-
neously be applied together to an input struc-
ture without causing conflicts are grouped (-hir-
ing processing into so-called clustem At the
left side of the picture, we see two such clus-
ters (Cluster 13 and Cluster 22). The instances
of the rules of Cluster 13 are shown to the right
of the cluster pane. The cluster pane also con-
tains sets of rules that failed (in the picture, the
corresponding icon is not expanded). The left
graph in Figure 2 is the input structure to which
the rules are applied. For illustration, one of
the rules, namely date, has been selected for ap-
plication: the highlighted arcs and nodes of the
input structure are the part to which date is ap-
plicable. The result of its application is the tree
at the right. Beneath the graphical structures,
we see the correspondence between input nodes
</bodyText>
<page confidence="0.976389">
262
</page>
<table confidence="0.988805942857143">
Outa,rto. 1r El Fit El
HY •,Nalatar 1 Help ;.•-,,&apos;, 7 &apos; -_,Li• :.?...&apos;,,‘,, ...&apos; : , : . • - .&amp;quot; ,.. &apos; ■ &apos;..&apos;: ,I.&apos;,.... . V &apos; . 7&amp;quot;1&apos; &amp;quot;T ,- - &apos;&apos;. &apos; &apos;&apos;&apos;&apos;&apos;&apos;L .. ,4,iii.i;&apos;,,..,..,:.--:;,&apos;..yJ,....-,-.-.---.-44k,:i.-4;i1;.-4:-;`4.--,.,-zk,...-&apos;7;
. ..
M Source structuraitt rautass_25i ! : „—.--- Medicar Vin,41.11 el e . 1. 4 177,
D &amp;decagon eallog . Cla12124 e er .„ n.&amp;quot; 2 r , ounot it lei . til. f1.1,1 1
9 C:1 ausker 13 gme_1101111216 1 a Ica 2 / 1 i 1110,51.111 re
p Evaluate= FITl locat psi 91 .9 24 temp. Orecd ` 0 1 en i A 1
B Oust., /2 &apos;r. maagurag11830 , del i I tO7 J ei W.. k
,= Pararnetar3t6 l &apos;.; C!•A f kee 4 t.ell 1 e
1 rneasursalear t , .;! .? J
i ; 2 &apos; 7 e &apos; 4
i Parametr,&apos; e /9 I ;
aatesso „.„ i
.; cooraSOS •
WOG ess_15/11 r
f lotationS77 de„.ed e
.1&amp;quot; t1.0_,poiralen 2 I 0
&apos;
:
i.
•
,
.. -
e . Le; &apos;MI • • &apos; . &amp;quot;&apos; .- . , • &apos;&apos; &apos; f , -..,..,&apos; -...,,•,,,,,,,,&apos;..._ &amp;quot;!-TIISItlaOtta..C.,-..-:.;.,.•. *:.; ‘ • .. . •
-
i el?I&apos;30) ,
: -0-9(* lacin_tuneAt.
--
• . . .... .
_. . . ., ... ... ..... . ...... . ... .. . .
we9(9) Wer_1111)
G Olt ij —
. . - .
.3iEVEZIE[.!.&amp;quot;-. &apos;&apos;
.i. :&apos;•
</table>
<figureCaption confidence="0.999386">
Figure 2: The inspector interface of the DE.
</figureCaption>
<bodyText confidence="0.996346">
and result nodes. The numbers in parentheses
are for system use.
</bodyText>
<subsectionHeader confidence="0.985303">
2.5 The Debugger
</subsectionHeader>
<bodyText confidence="0.999981444444444">
In the rule editor, break points within individual
rules can be set. When the compiler reaches a
break point it stops and enters the debugger. In
the debugger, the developer can execute the rules
statement by statement. As in the inspector, the
execution trace, the variable instantiation and
node correspondences can be examined. During
the demonstration, the function of the debugger
will be shown in action.
</bodyText>
<sectionHeader confidence="0.998957" genericHeader="method">
3 Current Work
</sectionHeader>
<bodyText confidence="0.998767444444444">
E is written in Java 1.2 and has been tested on
a SUN workstation and on a PC pentium with
300 MHz and 128 MB of RAM.
Currently, the described functions of the D
are consolidated and extended by new features.
The most important of these features are the im-
port and the export feature. The import feature
allows for a transformation of grammatical rules
and lexical information encoded in a different
format into t he format used by our generator.
Tests are being carried out with the import of
Real Pro (Lavoie k Rainbow, 1997) grammati-
cal rules and lexical information (in particular
subcategorization and diathesis information) en-
coded in the DATR-formalism. The export fea-
ture allows for a transformation of the rules and
lexical information encoded in our format into
external formats.
</bodyText>
<sectionHeader confidence="0.809762" genericHeader="method">
Bibliography
</sectionHeader>
<bodyText confidence="0.643188333333333">
Bateman, J.A. 1997. Enabling technology for mul-
tilingual natural language generation: the ICPNIL
development environment. Natural Language Engi-
neering. 3.2:15-55.
Coch, J. 1997. Quand l&apos;ordinateur prend la plume 7
la generation de textes. Document Numerique. 1.3.
</bodyText>
<reference confidence="0.997983466666667">
lordanskaja, L.N., M. Kim, R. Kittredge, 113, Lavoie
S..: A. Polguere. 1992. Generation of Extended Bilin-
gual Statistical Reports. COLING-92, 1019 -1022.
Nantes-.
Lavoie, B. &amp; 0. Rambow. 1997. A fast and portable
realizer for text generation systems. Proceedings of
the Fifth Conference on Applied Natural Language
Processing. Washington, DC.
Mel uk, I.A. 1988. DepricieFtCy Syntar: MC0171 and
Practice. Albany: State University of New York
Press.
Polguere, A. 1998 La tlieorie sens-texte.
alangue..
Wanner. L. ic7B. 13ohnet. submitted. Inheritance in
the NI-FT-grammar.
</reference>
<page confidence="0.99889">
263
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.652365">
<title confidence="0.9348385">A Development Environment for an MTT-Based Sentence Generator</title>
<author confidence="0.975796">Bernd Bohnet</author>
<author confidence="0.975796">Andreas Lan gjahr</author>
<author confidence="0.975796">Leo</author>
<affiliation confidence="0.9999365">Computer Science Department University of Stuttgart</affiliation>
<address confidence="0.985331">Breitwiesenstr. 20-22 - 70565 Stuttgart, Germany</address>
<email confidence="0.772844">bohnetlangjahrlwanner}Oinformatik.uni-stuttgart.de</email>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>L N lordanskaja</author>
<author>M Kim</author>
<author>R Kittredge</author>
</authors>
<date>1992</date>
<journal>Generation of Extended Bilingual Statistical Reports.</journal>
<volume>92</volume>
<pages>1022</pages>
<location>Nantes-.</location>
<marker>lordanskaja, Kim, Kittredge, 1992</marker>
<rawString>lordanskaja, L.N., M. Kim, R. Kittredge, 113, Lavoie S..: A. Polguere. 1992. Generation of Extended Bilingual Statistical Reports. COLING-92, 1019 -1022. Nantes-.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Lavoie</author>
</authors>
<title>A fast and portable realizer for text generation systems.</title>
<date>1997</date>
<booktitle>Proceedings of the Fifth Conference on Applied Natural Language Processing.</booktitle>
<location>Washington, DC.</location>
<marker>Lavoie, 1997</marker>
<rawString>Lavoie, B. &amp; 0. Rambow. 1997. A fast and portable realizer for text generation systems. Proceedings of the Fifth Conference on Applied Natural Language Processing. Washington, DC.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mel uk</author>
<author>I A</author>
</authors>
<title>DepricieFtCy Syntar: MC0171 and Practice.</title>
<date>1988</date>
<publisher>Press.</publisher>
<institution>State University of New York</institution>
<location>Albany:</location>
<marker>uk, A, 1988</marker>
<rawString>Mel uk, I.A. 1988. DepricieFtCy Syntar: MC0171 and Practice. Albany: State University of New York Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Polguere</author>
</authors>
<date>1998</date>
<note>La tlieorie sens-texte. alangue..</note>
<marker>Polguere, 1998</marker>
<rawString>Polguere, A. 1998 La tlieorie sens-texte. alangue..</rawString>
</citation>
<citation valid="true">
<authors>
<author>L</author>
</authors>
<date></date>
<note>13ohnet. submitted. Inheritance in the NI-FT-grammar.</note>
<marker>L, </marker>
<rawString>Wanner. L. ic7B. 13ohnet. submitted. Inheritance in the NI-FT-grammar.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>