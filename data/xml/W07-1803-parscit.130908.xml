<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000083">
<title confidence="0.992205">
Dialogue System Localization with the GF Resource Grammar Library
</title>
<author confidence="0.997748">
Nadine Perera
</author>
<affiliation confidence="0.818054333333333">
Department of Man Machine Interaction
BMW Group Research and Technology
Munich, Germany
</affiliation>
<email confidence="0.985215">
nadine.perera@bmw.de
</email>
<sectionHeader confidence="0.99356" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999917230769231">
We present two experiments in the localiza-
tion of spoken dialogue systems. The do-
main of the dialogue system is an MP3 ap-
plication for automobiles. In the first expe-
riment, a grammar in Nuance GSL format
was rewritten in Grammatical Framework
(GF). Within GF, the grammar was extended
from two to six languages, giving a baseline
for semantically complete grammars. In the
second experiment, the German version of
this baseline GF grammar was extended with
the goal to restore the coverage of the origi-
nal Nuance grammar.
</bodyText>
<sectionHeader confidence="0.993526" genericHeader="keywords">
1 Credits
</sectionHeader>
<bodyText confidence="0.999321142857143">
Part of this work was done under the TALK1 re-
search project, funded by EU FP6 [ref. 507802].
The Nuance grammar was written by Jochen
Steigner, Peter Poller, and Rosemary Stegmann. The
first GF experiment was made together with Bj¨orn
Bringert. The Spanish grammar was written to-
gether with Libertad Tansini.
</bodyText>
<sectionHeader confidence="0.998871" genericHeader="introduction">
2 Introduction
</sectionHeader>
<bodyText confidence="0.9997671">
Spoken dialogue systems for cars emerged in the late
1990s with the appearance of advanced information
and communication systems. Driving a car is a clas-
sical visual manual task, as the driver should keep
his hands on the steering wheel and his glance on the
surrounding traffic and the street. Speech interaction
is very well-suited for secondary-level tasks such as
handling information and entertainment systems.
The current spoken dialogue system in
the automobiles of the BMW Group is a
</bodyText>
<footnote confidence="0.9729785">
1Tools for Ambient Linguistic Knowledge, www.talk-
project.org
</footnote>
<author confidence="0.859936">
Aarne Ranta
</author>
<affiliation confidence="0.89967625">
Department of Computing Science
Chalmers University of Technology
and G¨oteborg University
Gothenburg, Sweden
</affiliation>
<email confidence="0.974771">
aarne@cs.chalmers.se
</email>
<bodyText confidence="0.9972184">
Command&amp;Control-based system (Hagen et
al., 2004). For the interaction with the entertain-
ment and information functions of the iDrive system
(Haller, 2003), the paradigm pursued is You-Can-
Speak-What-You-See, i.e. every menu item or
option that is shown on screen can be spoken.
The localization of that spoken dialogue system
for currently eight languages is done manually by
translators, without advanced automation methods
or special tools. The Command&amp;Control-based
approach has its disadvantages, as the system can
only handle a fix set of commands. This makes
it difficult for system novices to interact with the
dialogue system because they may not know the
commands they need to say to reach their goal.
Advanced conversational dialogue systems that
allow a more flexible input and let the user decide
about the form and the amount of the communi-
cated information are being investigated. In order
to implement such a flexible spoken dialogue sys-
tem in the automobiles of the BMW Group, not only
one dialogue system, but at least eight would have
to be built - one for each language. The different,
localized versions of the system would have to be
designed in a way that allows for the generic ad-
dition of use cases, i.e. changes and additions to
the German grammar (which is viewed as the ini-
tial source grammar) must be ported to the localized
versions consistently and without the need to change
the whole localized grammar.
</bodyText>
<subsectionHeader confidence="0.931181">
2.1 Grammar Writing
</subsectionHeader>
<bodyText confidence="0.999856">
Linguistic experts who write grammars for compa-
nies whose focus is not in language technology usu-
ally have to possess profound technical competence
and programming skills in addition to linguistic ex-
pertise. For those grammar engineers who are com-
puter scientists or engineers with little university ed-
</bodyText>
<page confidence="0.99242">
17
</page>
<note confidence="0.5854085">
Proceedings of SPEECHGRAM 2007, pages 17–24,
Prague, Czech Republic, June 2007. c�2007 Association for Computational Linguistics
</note>
<bodyText confidence="0.999960375">
ucation in linguistics, a programming paradigm en-
abling them to avoid dealing with the morphologi-
cal inflection paradigms of several languages would
certainly be welcome. Writing consistent grammars
for multiple languages is quite challenging: Writing
one grammar requires the grammar engineer to be
at least a fluent speaker of the language the gram-
mar covers. If he also knows another language quite
well, he may be able to localize a grammar from that
language to his native language. This implies that
for every language which requires a localized gram-
mar, a person who knows the source language and is
a native speaker of the target language is needed. At
the moment, there is no commercial tool available
that helps grammar engineers with the localization
of spoken dialogue systems.
</bodyText>
<subsectionHeader confidence="0.996871">
2.2 The Nuance SAMMIE grammar
</subsectionHeader>
<bodyText confidence="0.999921315789474">
Within the TALK project, an in-car spoken dialogue
system for the MP3 domain was created and inte-
grated into a BMW 3-Series Coupe (Becker et al.,
2007). For the speech understanding component,
a German corpus named SAMMIE (SAarbr¨ucken
Multi-Modal Interface Experiment) was collected
by Saarland University and DFKI2 using a Wizard
of Oz experiment.
A grammar in Nuance GSL format was written to
specify well-formed sentences complying with the
corpus data. The GSL formalism is a variant of
BNF (context-free grammar), with Extended BNF
additions such as disjunctions and Kleene closures.
The grammar was structured according to syntacti-
cal motivations and interaction type coherence. To
minimize overgeneration, nonterminals were instan-
tiated with usual grammatical features. For instance,
genitive definite forms of artist expressions were
generated by the disjunction
</bodyText>
<equation confidence="0.9977612">
NP_ARTIST_CASE_GEN[
(DET_NUM_SING_CASE_GEN_GEND_NEUT
N_ARTIST_NUM_SING_CASE_GEN_GEND_MASC)
(DET_NUM_SING_CASE_GEN_GEND_FEM
N_ARTIST_NUM_SING_CASE_DATIV_GEND_FEM)]
</equation>
<bodyText confidence="0.996091">
For a more detailed description of the grammar, see
(Becker et al., 2007).
The German Sammie grammar in Nuance for-
mat (NuanceGer) was checked and extended contin-
uously while the dialogue system was built. User
</bodyText>
<footnote confidence="0.713452">
2German Research Center for Artificial Intelligence
</footnote>
<bodyText confidence="0.999950375">
evaluation results were analyzed and missing utter-
ances were added to the grammar. In addition to
that, an English version of the grammar, called ”Nu-
anceEng” here, was built by a near-native speaker of
English. This grammar is the starting point for our
experiments. Figure 1 shows a graph of the gram-
mar development for the first experiment, Figure 2
for the second experiment.
</bodyText>
<subsectionHeader confidence="0.997853">
2.3 Outline of the paper
</subsectionHeader>
<bodyText confidence="0.9998865">
Section 3 gives an introduction to GF and its re-
source grammar library, by working through the im-
plementation of a fragment of the Sammie gram-
mar. Section 4 describes the first experiment, in
which a baseline Sammie grammar was ported to six
languages. Section 5 describes the second experi-
ment, in which the German grammar was extended
towards the coverage of the original grammar. Sec-
tion 6 concludes with statistics on the experiments,
related work, and some general lessons learnt.
</bodyText>
<sectionHeader confidence="0.935491" genericHeader="method">
3 Multilingual grammars in GF
</sectionHeader>
<bodyText confidence="0.999285388888889">
GF (Grammatical Framework, (Ranta, 2004)) is a
grammar formalism based on ideas from type the-
ory and functional programming. Originally de-
signed for written technical documents, GF focuses
on language-independent semantic representations
and their multilingual renderings. These features
have proved useful in dialogue systems as well, and
a support for dialogue applications is completed by
translators from GF to various speech recognition
formats, such as Nuance (Bringert, 2007).
A grammar, in the sense of GF, has an abstract
syntax and a set of concrete syntaxes. The abstract
syntax is a semantic description of an application
domain. Each concrete syntax is a mapping of the
semantics into a language, typically a natural lan-
guage. To give an example from the GF implemen-
tation of the Sammie grammar, the abstract syntax
has objects such as
</bodyText>
<equation confidence="0.821274">
identify ( currently_playing_object )
</equation>
<bodyText confidence="0.975297375">
The six concrete syntaxes map the abstract object
into the strings
vad heter den h¨ar s˚angen
wie heiBt dieses lied
comment s’appelle cette chanson
como se llama esta canci´on
mik¨a on t¨am¨an laulun nimi
what is the name of this song
</bodyText>
<page confidence="0.99544">
18
</page>
<bodyText confidence="0.999550375">
of Swedish, German, French, Spanish, Finnish, and
English, respectively.
The abstract syntax is specified by a set of cate-
gories (cat) and constructor functions (fun), in
the same way as an inductive family of datatypes in
a functional programming language. Here is a frag-
ment of the Sammie abstract syntax, with five cate-
gories and five constructor functions:
</bodyText>
<equation confidence="0.990851555555556">
cat
Action ; ToIdentify ; Object ;
Playlist ; Artist ;
fun
create : Action ;
identify : ToIdentify -&gt; Action ;
play : Object -&gt; Action ;
remove : Playlist -&gt; Object -&gt; Action ;
currently_playing_object : ToIdentify ;
</equation>
<bodyText confidence="0.999256666666667">
The concrete syntax is specified by defining a lin-
earization type (lincat) for each category, as
well as a linearization function (lin) for each con-
structor. A baseline concrete syntax can be obtained
by just assigning the type of strings to each category,
and defining:
</bodyText>
<equation confidence="0.996021555555556">
lincat
Action, ToIdentify,
Object, Playlist, Artist = Str ;
lin
create = [&amp;quot;create a new playlist&amp;quot;] ;
identify x = x ;
play = &amp;quot;play&amp;quot; ++ x :
remove x y = &amp;quot;remove&amp;quot;++ y ++&amp;quot;from&amp;quot;++ x ;
currently_playing_object =
</equation>
<bodyText confidence="0.9969505">
[&amp;quot;what is the name of this song&amp;quot;] ;
A concrete syntax like this is essentially a system
of templates with chunks of canned text. While it
is easy to produce for small applications, it does
not scale up well, especially in languages that have
rich morphology and require agreement in syntactic
structures. Thus GF also supports user-defined pa-
rameter types, which can be used to control inflec-
tion and word order in linearization. For instance,
the German version of the above grammar needs a
type of Case, and the linearization of Object and
Playlist depends on case:
</bodyText>
<construct confidence="0.6110648">
lincat
Object, Playlist = Case =&gt; Str ;
lin
remove x y = &amp;quot;nimm&amp;quot; ++ y ! Acc ++
&amp;quot;aus&amp;quot; ++ x ! Dat ++ &amp;quot;heraus&amp;quot;
</construct>
<subsectionHeader confidence="0.994363">
3.1 The GF resource grammar library
</subsectionHeader>
<bodyText confidence="0.999894777777778">
Having to think about parameters requires linguis-
tic knowledge from the grammar writer. Moreover,
accurate descriptions tend to become long and com-
plex. The GF solution to this problem is a resource
grammar library. Like any software library, this
library can be used via a high-level API (an abstract
syntax for linguistic structures) that hides the im-
plementation details (the concrete syntaxes for each
language). The GF resource grammar library is cur-
rently available for 10–15 languages (10 languages
support the full API, 5 just parts of it). Its first ap-
plications were in the domain of written technical
language (Burke and Johannisson, 2005, Caprotti et
al., 2006), but its use was extended to spoken dia-
logue systems in the TALK project (Johansson 2006,
Ljungl¨of &amp; al. 2006).
Let us rewrite the Sammie grammar fragment by
using the library,
</bodyText>
<equation confidence="0.998320133333333">
lincat
Action = Phr ; -- phrase
ToIdentify = QS ; -- question
Object, Playlist,
Artist = NP ; -- noun phrase
lin
create = imperative (mkVP create_V2
(indef (mkCN new_A playlist_N))) ;
identify x = mkPhr x ;
play x = imperative (mkVP play_V2 x) ;
remove x y =
imperative (mkVP remove_V3 y x);
currently_playing_object =
mkQS whatSg_IP (mkNP name_N2
(mkNP this_Quant song_N)) ;
</equation>
<bodyText confidence="0.9999026875">
This grammar uses the language-independent
resource grammar API with categories such
as Phr, QS, NP and constructors such as
mkVP, indef, this_Quant. The ones
provided by the resource grammar are syntactic
combination rules and structural words, which are
independent of the domain of application.
In addition to the resource API ele-
ments, a concrete syntax also needs a lex-
icon of domain-specific words, such as
new_A, play_V2, remove_V3 above.
The resource library provides for each language
a set of operations for constructing lexical entries
with all morphosyntactic information they need.
Thus the three mentioned objects are defined as
follows in English:
</bodyText>
<equation confidence="0.99850075">
new_A = regA &amp;quot;new&amp;quot; ;
play_V2 = dirV2 (regV &amp;quot;play&amp;quot;) ;
remove_V3 = dirV3
(regV &amp;quot;remove&amp;quot;) from_Prep ;
</equation>
<bodyText confidence="0.906618">
Here are the German definitions:
</bodyText>
<page confidence="0.905427">
19
</page>
<equation confidence="0.9967245">
new_A = regA &amp;quot;neu&amp;quot; ;
play_V2 = dirV2 (regV &amp;quot;spielen&amp;quot;) ;
remove_V3 = dirV3
(prefixV &amp;quot;heraus&amp;quot; nehmen_V) aus_Prep ;
</equation>
<bodyText confidence="0.9997635">
The lexicon definitions are gathered into a separate
interface module, which the concrete syntax mod-
ule depends on. All that is needed to add a new lan-
guage to the system is a new implementation of the
interface module, with lexical entries belonging to
that language.
</bodyText>
<subsectionHeader confidence="0.999749">
3.2 Beyond baseline grammars
</subsectionHeader>
<bodyText confidence="0.99989312">
A baseline multilingual grammar system can be
obtained by defining the syntax in a language-
independent way using the resource API, and only
letting the lexical entries vary from one language
to another. Such a system is guaranteed to be
grammatically correct, as regards to word order
and agreement. But the different languages of-
ten come out unidiomatic. For instance, the
above rule for currently_playing_object
produces the translations
vad ¨ar namnet p˚a den h¨ar s˚angen
was ist der name von diesem lied
quel est le nom de cette chanson
mik¨a on t¨am¨an laulun nimi
what is the name of this song
These translations are OK for Finnish and English,
but very clumsy for the rest of the languages, which
have special verbs for expressing the name of a sub-
ject (the proper forms were shown above; the clos-
est corresponding English idiom is what is this song
called).
Fortunately, GF is a functional programming lan-
guage that permits functions, instead of just words,
to appear in an interface. An improved way to im-
plement the rule above is
</bodyText>
<equation confidence="0.99079">
lin currently_playing_object =
mkQS (what_name
(mkNP this_Quant song_N))
</equation>
<bodyText confidence="0.999604666666667">
where the function what_name has different im-
plementations in different languages: here, for in-
stance, German and English:
</bodyText>
<construct confidence="0.574492666666667">
what_name x =
mkQCl how_IAdv (pred heiBen_V x)
what_name x =
</construct>
<bodyText confidence="0.945033545454546">
mkQCl whatSg_IP (mkNP (regN2 &amp;quot;name&amp;quot;) x)
A similar refinement is needed in the GF Sam-
mie grammar to express imperatives. A baseline,
language-independent definition would be
imperative vp = UttImpSg vp
which produces the second-person singular impera-
tive form of a verb phrase. In German, as shown by
the corpus collected for Sammie, both the familiar
singular and the polite imperative are appropriate,
and should be accepted in user input. GF has the
variants construct to express such free variation:
</bodyText>
<figure confidence="0.34742225">
imperative vp = variants {
UttImpSg vp ;
UttImpPol vp
}
</figure>
<bodyText confidence="0.998585">
When extending the different languages of the Sam-
mie grammar in GF, above the baseline, adding vari-
ants was the prominent method used.
</bodyText>
<subsectionHeader confidence="0.999691">
3.3 Using GF in dialogue systems
</subsectionHeader>
<bodyText confidence="0.99996225">
In the TALK project, GF was used for building vari-
ous components of dialogue systems at three differ-
ent sites. The most relevant features of GF in this
work were the following:
</bodyText>
<listItem confidence="0.995373857142857">
• a common abstract syntax guarantees that the
same semantics is implemented for all lan-
guages
• the resource grammar library makes it easier to
port systems to new languages
• the GF grammar compiler supports the produc-
tion of many other formats from the GF source
</listItem>
<bodyText confidence="0.999970818181818">
The first two features have been covered in the pre-
ceding sections. The third feature, the grammar
compiler, is what in practice can integrate GF in the
work flow of different projects. Language models
for speech recognition are the most crucial formats
in dialogue systems. GF supports several such for-
mats, including the GSL format used in the Nuance
system, which in turn is used in the Sammie dia-
logue system. Porting the Sammie grammar to new
languages with GF would thus automatically pro-
duce the required speech recognition grammars.
</bodyText>
<sectionHeader confidence="0.99577" genericHeader="method">
4 The first experiment
</sectionHeader>
<bodyText confidence="0.999843166666667">
The starting point of the work was Nuance-Sammie,
a pair of hand-written Nuance grammars used in the
Sammie system, one for English (NuanceEng) and
one for German (NuanceGer). The goal was to pro-
duce GF-Sammie, a GF grammar with the same cov-
erage as Nuance-Sammie, but for more languages.
</bodyText>
<page confidence="0.987599">
20
</page>
<bodyText confidence="0.922650066666667">
This was to be produced by using the resource gram-
mar library, and share as much code as possible be-
tween the languages.
The experiment was aimed to test the hypotheses
that a grammar for basic communication is easy to
produce using the library; adding a new language
should be a matter of a few hours.
Figure 1: First experiment: The baseline grammar
development. The modules on the left are hand-
written Nuance grammars used in the Sammie sys-
tem. The module in the middle is a GF abstract
syntax defining the semantics implicit in the Nuance
grammars. The modules on the right are GF con-
crete syntaxes implementing the semantics in a min-
imal but complete way.
</bodyText>
<subsectionHeader confidence="0.991016">
4.1 The phases of the work
</subsectionHeader>
<bodyText confidence="0.999963357142857">
Before the baseline grammar, an abstract syntax
must of course be produced. It was written by Bj¨orn
Bringert on the basis of NuanceEng, which was
richly commented with information indicating what
actions should be covered by the grammar. The ab-
stract syntax was produced in five hours, which in-
cludes the work needed to write a string-based En-
glish concrete syntax to test the abstract syntax.
To prepare for a multilingual localization, the
string-based English concrete syntax was first glob-
alized by rewriting it in terms of the recource gram-
mar API and moving lexical items and some other
obviously English-dependent constructs to an inter-
face. This work took two hours.
After the globalization, the grammar was local-
ized by writing new instances of the interface. This
was done for Swedish, Finnish, French, and Ger-
man. The work took half an hour for each language.
Did we now have a satisfactory baseline gram-
mar for five languages? This was tested by gen-
erating sentences in all languages, and led to some
fine-tuning to get satisfactory (grammatical and id-
iomatic) results. But now we did have a grammar
that permitted user input in five languages, with the
same semantics as NuanceEng, but with more lim-
ited variation in expressions. Spanish was added
later to the system. Summary of the time consump-
tion for this work is as follows:
</bodyText>
<listItem confidence="0.999443333333333">
• abstract syntax and string-based English: 5h
• globalized English by use of resource API: 2h
• five new languages: 5h
</listItem>
<bodyText confidence="0.9999294">
A baseline grammar, as we have defined it, covers
the abstract syntax with a minimal, grammatically
correct and stylistically acceptable concrete syntax.
Such a grammar can be used for communication by
users who are willing to learn to speak in a certain
way. Notice that this can still be richer than a Com-
mand&amp;Control system, because the dialogue man-
ager is based on the language-independent abstract
syntax and works quite as well with a minimal con-
crete syntax.
The next phase was to grow the coverage of one
of the baseline grammars, SammieGer Baseline, to
match the corpus defined by NuanceGer. This work
was expected to take a few days, as carried out by a
non-linguist programmer who first had to learn GF.
</bodyText>
<sectionHeader confidence="0.969299" genericHeader="method">
5 The second experiment
</sectionHeader>
<bodyText confidence="0.999425">
As expected, the SammieGer Baseline grammar
covered less user utterances than the NuanceGer
grammar. The purpose of our experiment was to find
out how much time and effort a GF-novice grammar
engineer needed to extend the SammieGer Baseline
grammar to match the coverage of the NuanceGer
grammar. The top level grammars involved can be
seen in Figure 2.
</bodyText>
<figureCaption confidence="0.846679333333333">
Figure 2: Second experiment: The SammieGer
Baseline was extended to SammieGer Extended, to
match the coverage of the original NuanceGer.
</figureCaption>
<page confidence="0.99688">
21
</page>
<subsectionHeader confidence="0.979334">
5.1 Experimental plan
</subsectionHeader>
<bodyText confidence="0.9999955">
For the extension of the SammieGer Baseline gram-
mar, we were in the fortunate position of already
having a grammar at hand that defined the termi-
nal symbols and the grammar rules which the Sam-
mieGer Extended grammar would have to include.
We planned the extension experiment in the follow-
ing way: Comparing the coverage of SammieGer
with the original NuanceGer grammar by generating
sentences from the Nuance grammar and checking
if they are covered by the GF grammar. If a gener-
ated sentence is grammatically correct but contains
words that are missing in the lexicon, the GF lexicon
has to be extended. If the syntactic structure is not
covered, the concrete syntax has to be extended, and
if the semantic structure of the sentence is missing
in the abstract grammar, it has to be added.
</bodyText>
<subsectionHeader confidence="0.997733">
5.2 Adding words to the lexicon
</subsectionHeader>
<bodyText confidence="0.998130378378379">
Before generating sentences from the NuanceGer
grammar, we started with a simple word count. The
NuanceGer grammar contained 463 single words,
counting all inflected forms of the same stem indi-
vidually. The SammieGer Baseline grammar con-
tained 100 words, so it was clear that our first action
had to be the extension of the SammieGer lexicon.
Wherever this was possible using the variants con-
struct (cf. Section 3.2), i.e. when adding a word that
is a synonym of a word which was already modeled
in the SammieGer grammar, this was most comfort-
able. 46 words could be added in this fashion, this
time counting morphological infinitive forms that
added more than one inflected form to the grammar.
In fact, the 46 infinitive forms extended the word
count to 215, so that the adding of 46 infinitives ex-
tended the grammar by 115 inflected word forms.
Some of these words had to be added because
the starting point for the SammieGer Baseline gram-
mar was in fact an English (NuanceEng) grammar.
When translating from German to English, some
words got lost, for instance, the words ”S¨anger” and
”S¨angerin” united to the word ”singer” in English,
as there is no gender distinction in English. The
word ”S¨angerin” is missing in the SammieGer Base-
line grammar, as ”S¨anger” only becomes translated
to ”singer”.
Another source of words are verbs with their re-
spective removable prefixes. German is rich in pre-
fixes that can be combined with verbs to gain new
meanings, for instance ”an-gehen”, ”auf-gehen”,
”aus-gehen” [...], which are all related verbs shar-
ing word stem and inflection paradigms, but each
mean something else. These prefixes can be severed
from the verb in certain utterances, and fortunately,
GF accounts for that. By extending play V (cmp.
above) to:
</bodyText>
<equation confidence="0.99748975">
play_V2 = variants {
dirV2 (regV &amp;quot;spielen&amp;quot;) ;
dirV2 (prefixV &amp;quot;ab&amp;quot; (regV &amp;quot;spielen&amp;quot;))
} ;
</equation>
<bodyText confidence="0.99996175">
the extended grammar is able to parse an utterance
like ”spiele einen Titel von U2 ab” (”play a title by
U2”), as well as an utterance without the ”ab” in the
end. The linearization rules in GF place the severed
prefix in the syntactically correct position.
There were also words missing from the Sam-
mieGer Baseline grammar that could not be included
with a simple variants construct. They were added to
the lexicon under new identifiers and integrated into
the concrete grammar by writing new linearization
rules. In order to accomodate some of the missing
words, new abstract syntax rules had to be defined.
</bodyText>
<subsectionHeader confidence="0.996586">
5.3 Adding rules to the concrete grammar
</subsectionHeader>
<bodyText confidence="0.999995133333333">
One example of additions to the concrete syntax are
the rules for interrogative and infinitive forms. Ut-
terances follow certain patterns which are also re-
flected in the NuanceGer grammar (see Table 1 for
an overview). In the Baseline SammieGer, only
the imperative construct was modeled. The detour
we took in localizing the system over English ac-
counts for one missing utterance type: the infinitive
and the imperative type are identical in English, but
not in German. The interrogative forms are phrased
like questions, but contain an implicit but politely
expressed imperative. We managed to include the
other utterance types by adding four rules to the con-
crete SammieGer grammar and renaming rule iden-
tifiers in one referenced library grammar.
</bodyText>
<subsectionHeader confidence="0.925607">
5.4 Adding rules to the abstract grammar
</subsectionHeader>
<bodyText confidence="0.49081275">
Some user intentions modeled in the NuanceGer
grammar were missing in the abstract SammieGer
Baseline grammar, for instance scrolling a list pre-
sented on the screen up or down. These additions
</bodyText>
<page confidence="0.999167">
22
</page>
<tableCaption confidence="0.935646">
Table 1: Utterances Types. The types of user utterances for German and English. Note that the imperative
and the infitive forms in are the same in English, but not in German.
</tableCaption>
<table confidence="0.9769708">
Type German Example English Example
Imperative Spiele Vertigo von U2. Play Vertigo by U2.
Interrogative Kannst du Vertigo von U2 spielen? Can you play Vertigo by U2?
Indicative Ich m¨ochte Vertigo von U2 h¨oren. I want to listen to Vertigo by U2.
Infinitive Vertigo von U2 spielen. Play Vertigo by U2.
</table>
<bodyText confidence="0.923074">
took one day to accomplish. Summary of the time
needed for the grammar extension is as follows:
</bodyText>
<listItem confidence="0.9996835">
• Installing and learning GF: 4 days
• Adding words: 3 days
• Adding concrete syntax rules: 3 days
• Adding abstract syntax rules: 1 day
</listItem>
<sectionHeader confidence="0.997207" genericHeader="evaluation">
6 Results
</sectionHeader>
<bodyText confidence="0.999981263157895">
In this section, we compare the SammieGer Base-
line/Extended and the NuanceGer grammar.
The goal set for the first experiment to build pro-
totypical grammars for six languages was fulfilled
quite successfully. However, the aim of the second
experiment to match the coverage of the NuanceGer
grammar with the SammieGer Extended grammar
was not reached as quickly as we had hoped. It
took a substantial time for the programmer to learn
GF well, and the the development cycle was slowed
down by fairly long compilation times. The resource
library was difficult to navigate and contained some
bugs that were fixed during the experiment, which
caused waiting time. Nevertheless, the SammieGer
Extended grammar’s coverage increased consider-
ably compared to SammieGer Baseline. Moreover,
most of the extensions made to the German gram-
mar can be ported to the other languages with very
little work, due to the common resource library API.
</bodyText>
<subsectionHeader confidence="0.986763">
6.1 Statistics
</subsectionHeader>
<bodyText confidence="0.9999547">
The original German grammar NuanceGer was writ-
ten in approximately 18 days. In the GF experi-
ments, 12 hours were needed to create the six base-
line grammars from the NuanceEng original, and
about 7 days for the SammieGer Extended grammar
(not counting the time needed for installation and
learning to use GF). If we sum up the SammieGer
Baseline and the SammieGer Extended grammar
writing time, we end up with 8 days for the Sam-
mieGer combined. This is faster than the 18 days
spent on the original NuanceGer grammar, but we
had of course the advantage of already having Nu-
anceGer available: its authors had to start from
scratch and continuously add words and rules af-
ter user evaluations. Moreover, the full coverage
of NuanceGer was not reached, mostly because of
colloquial forms of speech that were not covered by
the resource library. Statistics of the coverage of the
three grammars (SammieGer Baseline, SammieGer
Extended, and NuanceGer) can be seen in Table 2.
</bodyText>
<sectionHeader confidence="0.715887" genericHeader="conclusions">
6.2 Related work
</sectionHeader>
<bodyText confidence="0.999809357142857">
The idea of generating speech recognition gram-
mars from higher-level formats was first imple-
mented in the Regulus system (Rayner et al., 2006).
The source format of Regulus is a unification-based
grammar formalism, and the target is GSL (the for-
mat used in Nuance); GF supports many other for-
mats as well, such as the SLF format used in HTK
(Young et al., 2005); see (Bringert, 2007). Regulus
also has a resource grammar library currently cover-
ing five languages.
GF was previously used for dialogue system lo-
calization in the TALK project, where seven lan-
guages were covered (Johansson, 2006, Ljungl¨of et
al., 2006).
</bodyText>
<subsectionHeader confidence="0.978928">
6.3 Conclusion
</subsectionHeader>
<bodyText confidence="0.999855">
GF provides elegant solutions for many grammar
writing challenges. Based on the concept of one ab-
stract and many concrete grammars for different lan-
guages, GF is well-suited for localization tasks and
fast prototyping in multiple languages. One disad-
vantage of GF is that it is quite difficult to get a grasp
</bodyText>
<page confidence="0.999367">
23
</page>
<tableCaption confidence="0.998635">
Table 2: Statistics of SammieGer Baseline, SammieGer Extended, and the original Nuance.
</tableCaption>
<table confidence="0.976146142857143">
Grammar Baseline Extended Original
top-level constructors 18 23 ∼23
syntactic categories 17 17 419
German - specific source code 4kB 18kB 200kB
German + generic source code 14kB 33kB 200kB
Nuance code 18kB 31kB 200kB
distinct words 100 325 463
</table>
<bodyText confidence="0.999955035714286">
of the framework quickly, compared to the concept
of a context free grammar format in BNF or EBNF
form which is easier to understand, for computer sci-
entists as well as for linguists. As GF is more of
a programming language than a grammar format, it
implements much more constructs than BNF, which
also makes it more powerful. That power can be
seen in the comparison of source code size between
NuanceGer and SammieGer Extended in Table 2.
The elegance of the many resource files that hide
the complexity leads to difficulties in error detection,
as there is a tree of resource grammars referencing
other grammars and to the novice programmer, it is
not always transparent where an error occurred. This
is of course a problem with all high-level program-
ming languages using libraries. A more intuitive
IDE and faster compilation times could improve the
system’s usability significantly.
Grammatically correct utterances can be modeled
nicely in the GF resource grammar library, which
also eliminated some of the grammatical errors
present in the original hand-coded Nuance grammar.
However, some spoken language oriented rules were
not covered by the library, and were implemented
by brute force by using strings in GF. In this expe-
riment, the resource grammar was taken as it was
(apart from bug fixes), and no new functions were
added to it.
</bodyText>
<sectionHeader confidence="0.99948" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999705204545455">
T. Becker, N. Blaylock, C. Gerstenberger, A. Korthauer,
N. Perera, M. Pitz, P. Poller, J. Schehl, F. Steffens, R.
Stegmann, and J. Steigner (Editor). 2007. TALK De-
liverable D5.3: In-Car Showcase Based on TALK Li-
braries.
B. Bringert. 2007. Speech Recognition Grammar
Compilation in Grammatical Framework. SPEECH-
GRAM 2007, Prague, 29 June 2007.
D. Burke and K. Johannisson. 2005. Translating For-
mal Software Specifications to Natural Language / A
Grammar-Based Approach. P. Blache, E. Stabler, J.
Busquets and R. Moot (eds). Logical Aspects of Com-
putational Linguistics (LACL 2005). LNCS/LNAI
3407, pages 51–66.
O. Caprotti. 2007. WebALT! Deliver Mathematics Ev-
erywhere. Proceedings of SITE 2006. Orlando March
20-24.
E. Hagen, T. Said, and J. Eckert. 2004. Spracheingabe
im neuen BMW 6er. ATZ.
R. Haller. 2003. The Display and Control Concept
iDrive - Quick Access to All Driving and Comfort
Functions. ATZ/MTZ Extra (The New BMW 5-
Series), pages 51–53.
A. Ranta. 2004. Grammatical Framework: A type-
theoretical grammar formalism. Journal of Functional
Programming,14(2):145–189.
M. Johansson. 2006. Globalization and Localization of
a Dialogue System using a Resource Grammar. Mas-
ter’s thesis, G¨oteborg University.
P. Ljungl¨of, G. Amores, R. Cooper, D. Hjelm, O. Lemon,
P. Manch´on, G. P´erez, and A. Ranta. 2006. Multi-
modal Grammar Library. TALK Talk and Look: Tools
for Ambient Linguistic Knowledge IST-507802 Deliv-
erable 1.2b
M. Rayner, P. Bouillon, B. A. Hockey, and N.
Chatzichrisafis. 2006. REGULUS: A Generic Mul-
tilingual Open Source Platform for Grammar-Based
Speech Applications. In Proceedings of LREC, 24-26
May 2006, Genoa, Italy.
S. Young, G. Evermann, M. Gales, T. Hain, D. Kershaw,
G. Moore, J. Odell., D. Ollason, D. Povey, V. Valtchev,
and P. Woodland. 2005. The HTK Book (for HTK Ver-
sion 3.3). Cambridge University Engineering Depart-
ment.
</reference>
<page confidence="0.999176">
24
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.066050">
<title confidence="0.982563">Dialogue System Localization with the GF Resource Grammar Library</title>
<author confidence="0.954414">Nadine</author>
<affiliation confidence="0.869489333333333">Department of Man Machine BMW Group Research and Munich,</affiliation>
<email confidence="0.99671">nadine.perera@bmw.de</email>
<abstract confidence="0.979374882352941">We present two experiments in the localization of spoken dialogue systems. The domain of the dialogue system is an MP3 application for automobiles. In the first experiment, a grammar in Nuance GSL format was rewritten in Grammatical Framework (GF). Within GF, the grammar was extended from two to six languages, giving a baseline for semantically complete grammars. In the second experiment, the German version of this baseline GF grammar was extended with the goal to restore the coverage of the original Nuance grammar. 1 Credits of this work was done under the research project, funded by EU FP6 [ref. 507802].</abstract>
<note confidence="0.3320104">The Nuance grammar was written by Jochen Steigner, Peter Poller, and Rosemary Stegmann. The first GF experiment was made together with Bj¨orn Bringert. The Spanish grammar was written together with Libertad Tansini.</note>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>T Becker</author>
<author>N Blaylock</author>
<author>C Gerstenberger</author>
<author>A Korthauer</author>
<author>N Perera</author>
<author>M Pitz</author>
<author>P Poller</author>
<author>J Schehl</author>
<author>F Steffens</author>
<author>R Stegmann</author>
<author>J Steigner</author>
</authors>
<title>TALK Deliverable D5.3: In-Car Showcase Based on TALK Libraries.</title>
<date>2007</date>
<contexts>
<context position="4610" citStr="Becker et al., 2007" startWordPosition="729" endWordPosition="732">ar covers. If he also knows another language quite well, he may be able to localize a grammar from that language to his native language. This implies that for every language which requires a localized grammar, a person who knows the source language and is a native speaker of the target language is needed. At the moment, there is no commercial tool available that helps grammar engineers with the localization of spoken dialogue systems. 2.2 The Nuance SAMMIE grammar Within the TALK project, an in-car spoken dialogue system for the MP3 domain was created and integrated into a BMW 3-Series Coupe (Becker et al., 2007). For the speech understanding component, a German corpus named SAMMIE (SAarbr¨ucken Multi-Modal Interface Experiment) was collected by Saarland University and DFKI2 using a Wizard of Oz experiment. A grammar in Nuance GSL format was written to specify well-formed sentences complying with the corpus data. The GSL formalism is a variant of BNF (context-free grammar), with Extended BNF additions such as disjunctions and Kleene closures. The grammar was structured according to syntactical motivations and interaction type coherence. To minimize overgeneration, nonterminals were instantiated with u</context>
</contexts>
<marker>Becker, Blaylock, Gerstenberger, Korthauer, Perera, Pitz, Poller, Schehl, Steffens, Stegmann, Steigner, 2007</marker>
<rawString>T. Becker, N. Blaylock, C. Gerstenberger, A. Korthauer, N. Perera, M. Pitz, P. Poller, J. Schehl, F. Steffens, R. Stegmann, and J. Steigner (Editor). 2007. TALK Deliverable D5.3: In-Car Showcase Based on TALK Libraries.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Bringert</author>
</authors>
<title>Speech Recognition Grammar Compilation in Grammatical Framework.</title>
<date>2007</date>
<publisher>SPEECHGRAM</publisher>
<location>Prague,</location>
<contexts>
<context position="7158" citStr="Bringert, 2007" startWordPosition="1101" endWordPosition="1102">Section 6 concludes with statistics on the experiments, related work, and some general lessons learnt. 3 Multilingual grammars in GF GF (Grammatical Framework, (Ranta, 2004)) is a grammar formalism based on ideas from type theory and functional programming. Originally designed for written technical documents, GF focuses on language-independent semantic representations and their multilingual renderings. These features have proved useful in dialogue systems as well, and a support for dialogue applications is completed by translators from GF to various speech recognition formats, such as Nuance (Bringert, 2007). A grammar, in the sense of GF, has an abstract syntax and a set of concrete syntaxes. The abstract syntax is a semantic description of an application domain. Each concrete syntax is a mapping of the semantics into a language, typically a natural language. To give an example from the GF implementation of the Sammie grammar, the abstract syntax has objects such as identify ( currently_playing_object ) The six concrete syntaxes map the abstract object into the strings vad heter den h¨ar s˚angen wie heiBt dieses lied comment s’appelle cette chanson como se llama esta canci´on mik¨a on t¨am¨an la</context>
<context position="26080" citStr="Bringert, 2007" startWordPosition="4296" endWordPosition="4297"> because of colloquial forms of speech that were not covered by the resource library. Statistics of the coverage of the three grammars (SammieGer Baseline, SammieGer Extended, and NuanceGer) can be seen in Table 2. 6.2 Related work The idea of generating speech recognition grammars from higher-level formats was first implemented in the Regulus system (Rayner et al., 2006). The source format of Regulus is a unification-based grammar formalism, and the target is GSL (the format used in Nuance); GF supports many other formats as well, such as the SLF format used in HTK (Young et al., 2005); see (Bringert, 2007). Regulus also has a resource grammar library currently covering five languages. GF was previously used for dialogue system localization in the TALK project, where seven languages were covered (Johansson, 2006, Ljungl¨of et al., 2006). 6.3 Conclusion GF provides elegant solutions for many grammar writing challenges. Based on the concept of one abstract and many concrete grammars for different languages, GF is well-suited for localization tasks and fast prototyping in multiple languages. One disadvantage of GF is that it is quite difficult to get a grasp 23 Table 2: Statistics of SammieGer Base</context>
</contexts>
<marker>Bringert, 2007</marker>
<rawString>B. Bringert. 2007. Speech Recognition Grammar Compilation in Grammatical Framework. SPEECHGRAM 2007, Prague, 29 June 2007.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Burke</author>
<author>K Johannisson</author>
</authors>
<title>Translating Formal Software Specifications to Natural Language / A Grammar-Based Approach.</title>
<date>2005</date>
<booktitle>Logical Aspects of Computational Linguistics (LACL 2005). LNCS/LNAI 3407,</booktitle>
<pages>51--66</pages>
<contexts>
<context position="10217" citStr="Burke and Johannisson, 2005" startWordPosition="1625" endWordPosition="1628">parameters requires linguistic knowledge from the grammar writer. Moreover, accurate descriptions tend to become long and complex. The GF solution to this problem is a resource grammar library. Like any software library, this library can be used via a high-level API (an abstract syntax for linguistic structures) that hides the implementation details (the concrete syntaxes for each language). The GF resource grammar library is currently available for 10–15 languages (10 languages support the full API, 5 just parts of it). Its first applications were in the domain of written technical language (Burke and Johannisson, 2005, Caprotti et al., 2006), but its use was extended to spoken dialogue systems in the TALK project (Johansson 2006, Ljungl¨of &amp; al. 2006). Let us rewrite the Sammie grammar fragment by using the library, lincat Action = Phr ; -- phrase ToIdentify = QS ; -- question Object, Playlist, Artist = NP ; -- noun phrase lin create = imperative (mkVP create_V2 (indef (mkCN new_A playlist_N))) ; identify x = mkPhr x ; play x = imperative (mkVP play_V2 x) ; remove x y = imperative (mkVP remove_V3 y x); currently_playing_object = mkQS whatSg_IP (mkNP name_N2 (mkNP this_Quant song_N)) ; This grammar uses the</context>
</contexts>
<marker>Burke, Johannisson, 2005</marker>
<rawString>D. Burke and K. Johannisson. 2005. Translating Formal Software Specifications to Natural Language / A Grammar-Based Approach. P. Blache, E. Stabler, J. Busquets and R. Moot (eds). Logical Aspects of Computational Linguistics (LACL 2005). LNCS/LNAI 3407, pages 51–66.</rawString>
</citation>
<citation valid="true">
<authors>
<author>O Caprotti</author>
</authors>
<title>WebALT! Deliver Mathematics Everywhere.</title>
<date>2007</date>
<booktitle>Proceedings of SITE 2006.</booktitle>
<location>Orlando</location>
<marker>Caprotti, 2007</marker>
<rawString>O. Caprotti. 2007. WebALT! Deliver Mathematics Everywhere. Proceedings of SITE 2006. Orlando March 20-24.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Hagen</author>
<author>T Said</author>
<author>J Eckert</author>
</authors>
<date>2004</date>
<booktitle>Spracheingabe im neuen BMW 6er.</booktitle>
<publisher>ATZ.</publisher>
<contexts>
<context position="1799" citStr="Hagen et al., 2004" startWordPosition="272" endWordPosition="275">ms. Driving a car is a classical visual manual task, as the driver should keep his hands on the steering wheel and his glance on the surrounding traffic and the street. Speech interaction is very well-suited for secondary-level tasks such as handling information and entertainment systems. The current spoken dialogue system in the automobiles of the BMW Group is a 1Tools for Ambient Linguistic Knowledge, www.talkproject.org Aarne Ranta Department of Computing Science Chalmers University of Technology and G¨oteborg University Gothenburg, Sweden aarne@cs.chalmers.se Command&amp;Control-based system (Hagen et al., 2004). For the interaction with the entertainment and information functions of the iDrive system (Haller, 2003), the paradigm pursued is You-CanSpeak-What-You-See, i.e. every menu item or option that is shown on screen can be spoken. The localization of that spoken dialogue system for currently eight languages is done manually by translators, without advanced automation methods or special tools. The Command&amp;Control-based approach has its disadvantages, as the system can only handle a fix set of commands. This makes it difficult for system novices to interact with the dialogue system because they ma</context>
</contexts>
<marker>Hagen, Said, Eckert, 2004</marker>
<rawString>E. Hagen, T. Said, and J. Eckert. 2004. Spracheingabe im neuen BMW 6er. ATZ.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Haller</author>
</authors>
<title>The Display and Control Concept iDrive - Quick Access to All Driving and Comfort Functions.</title>
<date>2003</date>
<booktitle>ATZ/MTZ Extra (The New BMW 5-Series),</booktitle>
<pages>51--53</pages>
<contexts>
<context position="1905" citStr="Haller, 2003" startWordPosition="290" endWordPosition="291">nd his glance on the surrounding traffic and the street. Speech interaction is very well-suited for secondary-level tasks such as handling information and entertainment systems. The current spoken dialogue system in the automobiles of the BMW Group is a 1Tools for Ambient Linguistic Knowledge, www.talkproject.org Aarne Ranta Department of Computing Science Chalmers University of Technology and G¨oteborg University Gothenburg, Sweden aarne@cs.chalmers.se Command&amp;Control-based system (Hagen et al., 2004). For the interaction with the entertainment and information functions of the iDrive system (Haller, 2003), the paradigm pursued is You-CanSpeak-What-You-See, i.e. every menu item or option that is shown on screen can be spoken. The localization of that spoken dialogue system for currently eight languages is done manually by translators, without advanced automation methods or special tools. The Command&amp;Control-based approach has its disadvantages, as the system can only handle a fix set of commands. This makes it difficult for system novices to interact with the dialogue system because they may not know the commands they need to say to reach their goal. Advanced conversational dialogue systems tha</context>
</contexts>
<marker>Haller, 2003</marker>
<rawString>R. Haller. 2003. The Display and Control Concept iDrive - Quick Access to All Driving and Comfort Functions. ATZ/MTZ Extra (The New BMW 5-Series), pages 51–53.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Ranta</author>
</authors>
<title>Grammatical Framework: A typetheoretical grammar formalism.</title>
<date>2004</date>
<journal>Journal of Functional</journal>
<volume>14</volume>
<issue>2</issue>
<contexts>
<context position="6716" citStr="Ranta, 2004" startWordPosition="1038" endWordPosition="1039">e 2 for the second experiment. 2.3 Outline of the paper Section 3 gives an introduction to GF and its resource grammar library, by working through the implementation of a fragment of the Sammie grammar. Section 4 describes the first experiment, in which a baseline Sammie grammar was ported to six languages. Section 5 describes the second experiment, in which the German grammar was extended towards the coverage of the original grammar. Section 6 concludes with statistics on the experiments, related work, and some general lessons learnt. 3 Multilingual grammars in GF GF (Grammatical Framework, (Ranta, 2004)) is a grammar formalism based on ideas from type theory and functional programming. Originally designed for written technical documents, GF focuses on language-independent semantic representations and their multilingual renderings. These features have proved useful in dialogue systems as well, and a support for dialogue applications is completed by translators from GF to various speech recognition formats, such as Nuance (Bringert, 2007). A grammar, in the sense of GF, has an abstract syntax and a set of concrete syntaxes. The abstract syntax is a semantic description of an application domain</context>
</contexts>
<marker>Ranta, 2004</marker>
<rawString>A. Ranta. 2004. Grammatical Framework: A typetheoretical grammar formalism. Journal of Functional Programming,14(2):145–189.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Johansson</author>
</authors>
<title>Globalization and Localization of a Dialogue System using a Resource Grammar. Master’s thesis,</title>
<date>2006</date>
<institution>G¨oteborg University.</institution>
<contexts>
<context position="10330" citStr="Johansson 2006" startWordPosition="1647" endWordPosition="1648">lex. The GF solution to this problem is a resource grammar library. Like any software library, this library can be used via a high-level API (an abstract syntax for linguistic structures) that hides the implementation details (the concrete syntaxes for each language). The GF resource grammar library is currently available for 10–15 languages (10 languages support the full API, 5 just parts of it). Its first applications were in the domain of written technical language (Burke and Johannisson, 2005, Caprotti et al., 2006), but its use was extended to spoken dialogue systems in the TALK project (Johansson 2006, Ljungl¨of &amp; al. 2006). Let us rewrite the Sammie grammar fragment by using the library, lincat Action = Phr ; -- phrase ToIdentify = QS ; -- question Object, Playlist, Artist = NP ; -- noun phrase lin create = imperative (mkVP create_V2 (indef (mkCN new_A playlist_N))) ; identify x = mkPhr x ; play x = imperative (mkVP play_V2 x) ; remove x y = imperative (mkVP remove_V3 y x); currently_playing_object = mkQS whatSg_IP (mkNP name_N2 (mkNP this_Quant song_N)) ; This grammar uses the language-independent resource grammar API with categories such as Phr, QS, NP and constructors such as mkVP, ind</context>
<context position="26289" citStr="Johansson, 2006" startWordPosition="4329" endWordPosition="4330">le 2. 6.2 Related work The idea of generating speech recognition grammars from higher-level formats was first implemented in the Regulus system (Rayner et al., 2006). The source format of Regulus is a unification-based grammar formalism, and the target is GSL (the format used in Nuance); GF supports many other formats as well, such as the SLF format used in HTK (Young et al., 2005); see (Bringert, 2007). Regulus also has a resource grammar library currently covering five languages. GF was previously used for dialogue system localization in the TALK project, where seven languages were covered (Johansson, 2006, Ljungl¨of et al., 2006). 6.3 Conclusion GF provides elegant solutions for many grammar writing challenges. Based on the concept of one abstract and many concrete grammars for different languages, GF is well-suited for localization tasks and fast prototyping in multiple languages. One disadvantage of GF is that it is quite difficult to get a grasp 23 Table 2: Statistics of SammieGer Baseline, SammieGer Extended, and the original Nuance. Grammar Baseline Extended Original top-level constructors 18 23 ∼23 syntactic categories 17 17 419 German - specific source code 4kB 18kB 200kB German + gener</context>
</contexts>
<marker>Johansson, 2006</marker>
<rawString>M. Johansson. 2006. Globalization and Localization of a Dialogue System using a Resource Grammar. Master’s thesis, G¨oteborg University.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Ljungl¨of</author>
<author>G Amores</author>
<author>R Cooper</author>
<author>D Hjelm</author>
<author>O Lemon</author>
<author>P Manch´on</author>
<author>G P´erez</author>
<author>A Ranta</author>
</authors>
<date>2006</date>
<booktitle>Multimodal Grammar Library. TALK Talk and Look: Tools for Ambient Linguistic Knowledge IST-507802 Deliverable 1.2b</booktitle>
<marker>Ljungl¨of, Amores, Cooper, Hjelm, Lemon, Manch´on, P´erez, Ranta, 2006</marker>
<rawString>P. Ljungl¨of, G. Amores, R. Cooper, D. Hjelm, O. Lemon, P. Manch´on, G. P´erez, and A. Ranta. 2006. Multimodal Grammar Library. TALK Talk and Look: Tools for Ambient Linguistic Knowledge IST-507802 Deliverable 1.2b</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Rayner</author>
<author>P Bouillon</author>
<author>B A Hockey</author>
<author>N Chatzichrisafis</author>
</authors>
<title>REGULUS: A Generic Multilingual Open Source Platform for Grammar-Based Speech Applications.</title>
<date>2006</date>
<booktitle>In Proceedings of LREC,</booktitle>
<pages>24--26</pages>
<location>Genoa, Italy.</location>
<contexts>
<context position="25839" citStr="Rayner et al., 2006" startWordPosition="4250" endWordPosition="4253">grammar, but we had of course the advantage of already having NuanceGer available: its authors had to start from scratch and continuously add words and rules after user evaluations. Moreover, the full coverage of NuanceGer was not reached, mostly because of colloquial forms of speech that were not covered by the resource library. Statistics of the coverage of the three grammars (SammieGer Baseline, SammieGer Extended, and NuanceGer) can be seen in Table 2. 6.2 Related work The idea of generating speech recognition grammars from higher-level formats was first implemented in the Regulus system (Rayner et al., 2006). The source format of Regulus is a unification-based grammar formalism, and the target is GSL (the format used in Nuance); GF supports many other formats as well, such as the SLF format used in HTK (Young et al., 2005); see (Bringert, 2007). Regulus also has a resource grammar library currently covering five languages. GF was previously used for dialogue system localization in the TALK project, where seven languages were covered (Johansson, 2006, Ljungl¨of et al., 2006). 6.3 Conclusion GF provides elegant solutions for many grammar writing challenges. Based on the concept of one abstract and </context>
</contexts>
<marker>Rayner, Bouillon, Hockey, Chatzichrisafis, 2006</marker>
<rawString>M. Rayner, P. Bouillon, B. A. Hockey, and N. Chatzichrisafis. 2006. REGULUS: A Generic Multilingual Open Source Platform for Grammar-Based Speech Applications. In Proceedings of LREC, 24-26 May 2006, Genoa, Italy.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Young</author>
<author>G Evermann</author>
<author>M Gales</author>
<author>T Hain</author>
<author>D Kershaw</author>
<author>G Moore</author>
<author>J Odell</author>
<author>D Ollason</author>
<author>D Povey</author>
<author>V Valtchev</author>
<author>P Woodland</author>
</authors>
<date>2005</date>
<booktitle>The HTK Book (for HTK Version 3.3).</booktitle>
<institution>Cambridge University Engineering Department.</institution>
<contexts>
<context position="26058" citStr="Young et al., 2005" startWordPosition="4291" endWordPosition="4294">er was not reached, mostly because of colloquial forms of speech that were not covered by the resource library. Statistics of the coverage of the three grammars (SammieGer Baseline, SammieGer Extended, and NuanceGer) can be seen in Table 2. 6.2 Related work The idea of generating speech recognition grammars from higher-level formats was first implemented in the Regulus system (Rayner et al., 2006). The source format of Regulus is a unification-based grammar formalism, and the target is GSL (the format used in Nuance); GF supports many other formats as well, such as the SLF format used in HTK (Young et al., 2005); see (Bringert, 2007). Regulus also has a resource grammar library currently covering five languages. GF was previously used for dialogue system localization in the TALK project, where seven languages were covered (Johansson, 2006, Ljungl¨of et al., 2006). 6.3 Conclusion GF provides elegant solutions for many grammar writing challenges. Based on the concept of one abstract and many concrete grammars for different languages, GF is well-suited for localization tasks and fast prototyping in multiple languages. One disadvantage of GF is that it is quite difficult to get a grasp 23 Table 2: Statis</context>
</contexts>
<marker>Young, Evermann, Gales, Hain, Kershaw, Moore, Odell, Ollason, Povey, Valtchev, Woodland, 2005</marker>
<rawString>S. Young, G. Evermann, M. Gales, T. Hain, D. Kershaw, G. Moore, J. Odell., D. Ollason, D. Povey, V. Valtchev, and P. Woodland. 2005. The HTK Book (for HTK Version 3.3). Cambridge University Engineering Department.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>