<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000430">
<affiliation confidence="0.698363">
A RATIONAL RECONSTRUCTION OF THE PROTEUS SENTENCE PLANNER
Graeme Ritchie
Department of Artificial Intelligence
University of Edinburgh, Hope Park Square
</affiliation>
<address confidence="0.381412">
Edinburgh EH8 9NW
</address>
<email confidence="0.3712">
ABSTRACT
</email>
<bodyText confidence="0.982798709677419">
A revised and more structured version of
Davey&apos;s discourse generation program has been
implemented, which constructs the underlying forms
for sentences and clauses by using rules which
annotate and segment the initial sequence of events
in various ways.
1. The Proteus Program
The text generation program designed and im-
plemented by Davey (1974,1978) achieved a high
level of fluency in the generation of small para-
graphs of English describing events in a limited
domain (games of &amp;quot;tic-tac-toe&amp;quot;/&amp;quot;noughts-and-
crosses&amp;quot;). Although that work was completed ten
years ago, the performance is still impressive by
current standards. The program could play a game
of &amp;quot;noughts-and-crosses&amp;quot; with a user, then produce
a fluent summary of what had happened during the
game(whether or not the game was complete). For
example:
The game began with your taking a corner, and
I took the middle of an adjacent edge. If you had
taken the corner opposite the one which you had
just taken, you would have threatened me, but you
took the one adjacent to the square which I had
just taken. The game hasn&apos;t finished yet.
As well as heuristics for actually playing a
game, the program contained rules for text genera-
tion, which could be regarded as having the follow-
ing components (this is not a decomposition used by
Davey, but an organisation imposed here in order to
clarify the processing):
</bodyText>
<listItem confidence="0.976239">
(a) Sentence planner
(b) Description constructor
(c) Systems network
</listItem>
<bodyText confidence="0.993215166666667">
The third (syntactic) component, is a major
part of the original Proteus program, and Davey
included a very detailed systemic grammar (in the
style of Hudson (1971)) for the area of English he
was concerned with; consequently the written
accounts (Davey (1974,1978)) deal mainly with these
grammatical aspects. However, much of the fluency
of the discourses produced by Proteus seems to
derive from the crucial computations performed by
This research was supported by SERC grants
GR/B/9874.6 and GR/C/8845.1.
components (a) and (b), since the syntactic system
is largely set up to convert deep representations
into surface tokens, without too much regard for
global contextual factors. Unfortunately, the
written accounts give only a rough informal outline
of how these components operated. A completely re-
vised version of Proteus has been implemented in
Prolog on a DEC System 10, and this paper describes
the working of its sentence planner. The system
outlined below is not an exact replication of
Davey&apos;s program, but is a &amp;quot;rational reconstruction&apos;&apos;;
that is, an attempt to present a slightly cleaner,
more general method, based on Davey&apos;s ideas and
performing the same specific task as Proteus.
Paradoxically, this cleaning up process may lead to
minor losses of fluency, where particular effects
were gained in Proteus by slightly ad hoc measures.
2. The Sentence Planner
The module which creates the overall clausal
structure of each sentence works on a list of
numbers representing the course of a game (complete
or unfinished), where each square is represented by
a number between 1 and 9. The processing carried
out by the sentence planner can be seen as
occurring in three logical phases:
</bodyText>
<listItem confidence="0.998820666666667">
1. move annotation
2. sentence segmentation
3. case-frame linking
</listItem>
<bodyText confidence="0.9731155">
Although these stages are logically distinct,
they need not occur wholly in temporal sequence.
However, the abstract model is clearer if viewed
in separate stages.
</bodyText>
<subsectionHeader confidence="0.700831">
2.1. Move Annotation
</subsectionHeader>
<bodyText confidence="0.999937733333333">
The system has a set of heuristic rules
which enable it to play noughts-and-crosses to a
reasonable standard. (A non-optimal set of rules
helps to introduce some variety into the play).
It uses these move-generating rules to work through
the history of the game, computing at each position
which move it would have made for that situation
and which move-generating rule gives rise to the
move actually made at that point. This allows it
to mark the actual move in the given history with
certain tactical details, using the implicit
assumption that whoever made the moves had the same
knowledge of the game as the system itself does.
The five move-generators are totally ordered to
reflect a &amp;quot;priority&amp;quot; or &amp;quot;significance&amp;quot; with
</bodyText>
<page confidence="0.990851">
327
</page>
<bodyText confidence="0.999979">
respect to the game, and each move-generator is
labelled with one of three categories - &amp;quot;defen-
sive&amp;quot; (e.g. blocking the third square in an
opponent&apos;s near-complete line), &amp;quot;offensive&amp;quot; (e.g.
creating a near-complete line, which thus
threatens the opponent) or &amp;quot;neutral&amp;quot; (e.g. taking
a square to start the game). In addition to basic
organisational entries (square taken, name of
player, pointer to preceding move, pointer to
following move), the annotation of the moves
contains the following information:
</bodyText>
<listItem confidence="0.964457529411765">
(a) generating heuristic(s) - there is a
list, in priority order, of the heuristics
which could have given rise to that move.
(b) tactically equivalent alternatives - for
each heuristic listed in (a), there is a
list of the other squares which could
also have resulted from that heuristic.
(c) lines involved - for each square
mentioned in the various entries, there
is a note of which lines (if any) were
(or would have been) tactically involved
in that move.
(d) better move - if there is a higher
priority heuristic that would give rise
to a different choice of square, an
annotated description of that &amp;quot;better&amp;quot;
move is attached.
</listItem>
<bodyText confidence="0.998483428571429">
For example, the game described by the
discourse in Section 1 above would initially be
just a sequence of square-numbers, together with
the name of the first player:
user 1 2 3
After annotation, the third move (square 3)
would have the following information attached:
</bodyText>
<equation confidence="0.785662666666667">
square : 3
heuristics/alternatives :
better move :
square : 9 (1 5 9)
heuristics/alternatives
threaten r7 (14 7)
</equation>
<subsectionHeader confidence="0.976499">
2.2 Sentence Segmentation
</subsectionHeader>
<bodyText confidence="0.999679428571429">
The sentence segmentation process
involves grouping the annotated moves into
clusters so that each cluster contains an
appropriate amount of information for one sentence.
This uses the following guidelines, in the
following order, to determine the number of moves
within a sentence:
</bodyText>
<listItem confidence="0.958793857142857">
1. If there is just one move left in the
sequence, that must be a single sentence.
2. If there are just two moves left, they
form a single sentence.
3. If a move is a &amp;quot;mistake&amp;quot; (i.e. there is a
tactically better alternative) then start
a new sentence to describe it. This is
</listItem>
<bodyText confidence="0.82608825">
quite a dominant principle, in that the
system will perform &amp;quot;look-ahead&amp;quot; of two
(actual) moves in the annotated chain to
check if there is a mistake looming up.
</bodyText>
<listItem confidence="0.952383666666667">
4. If a move is a combined attack and defence,
give it a sentence to itself.
5. If this move is an attack, and the next
move successfully thwarts that attack,
then put these two moves into a sentence
on their own.
6. Put the next three moves in a sentence.
(No more than three moves may occur in a
single sentence structure).
</listItem>
<bodyText confidence="0.999493333333333">
As well as segmenting the moves, this module
attaches to each move a tag indicating its overall
tactical relationship to the preceding moves.
This is a gross summary of some of the tactical
information provided by the annotator, and encodes
much of the information needed by the next stage
(case-frame linking). There are four tag-values
used - &amp;quot;consequence&amp;quot; (the move is a result of the
preceding one), &amp;quot;thwart&amp;quot; (the move prevents an
attack by the preceding one), &amp;quot;mistake&amp;quot; (the move
is a failure to make the best possible move), and
&amp;quot;null&amp;quot; (an all-purpose default).
</bodyText>
<subsectionHeader confidence="0.835512">
2.3 Case-frame Linking
</subsectionHeader>
<bodyText confidence="0.999964222222222">
Once the moves have been annotated,
grouped and tagged, their descriptions can be
constructed and linked together, to form the
internal structure of the sentence. In this
process, various case-frame structures are com-
puted from the information attached to each move,
and are placed in order, linked by various
relationships. There may be, within a sentence,
several descriptions associated with a single
move, since it is possible for more than one
aspect of a move to be mentioned. In each case-
frame structure, the other roles will contain
suitable fillers - e.g. the square taken (for a
&amp;quot;take&amp;quot; description), or the other player (for a
&amp;quot;threat&amp;quot;) - which are computable from the anno-
tations. Each such case-frame description will
eventually give rise to a full tensed clause. In
addition, some of these case-frames will have,
embedded within them on the &amp;quot;method&amp;quot; case-role,
further simple case-frames which will eventually
give rise to adjuncts to the tensed clause in the
form of verb phrases (e.g. &amp;quot;...by taking a
corner..&amp;quot;). Hence the linking process involves
selecting those descriptive structures (from the
annotations) which are to be expressed linguisti-
cally, formulating these as filled case-frame&apos;s,
and labelling the relationships between these
descriptions. Relationships between case-frame
descriptions are indicated by attaching to each
case-frame a &amp;quot;link&amp;quot; symbol indicating its relation
to the surrounding discourse (either within that
sentence, or across the preceding sentence
boundary). This process is non-deterministic in
the sense that there are usually several equally
good ways of expressing a given move or sequence
of moves within a sentence. The program contains
</bodyText>
<table confidence="0.648776666666667">
take 19 8 7 6 5 4)
:
5 (1 5 9) 4 (14 7)]
</table>
<page confidence="0.997218">
328
</page>
<bodyText confidence="0.998959105263158">
rules for all such possibilities, and works
through all the possible combinations using a
simple depth-first search. The case-frame
construction also determines the clausal structure
of the sentence, in that the nesting or con-
joining of clauses is fixed at this stage. The
clausal structure does not allow recursive
levels - there are, for example, no verbs with
sentential complements. The case-frame construc-
tion and tagging depends on the links inserted
by the sentence-segmenter, together with three
items of information from the annotations on the
moves - whether the move has two aspects, defen-
sive and offensive; any &amp;quot;better&amp;quot; move that has
been attached; and whether the tactic-name
uniquely defines, within the context, which square
must have been taken. The case-frame construction
and linking proceeds according to certain
guidelines:
</bodyText>
<listItem confidence="0.994536714285714">
1. if the move is a &amp;quot;mistake&amp;quot;, indicate that
by describing both the better move and
the actual move.
2. if a move has two possible descriptions,
one &amp;quot;offensive&amp;quot; and the other &amp;quot;defensive&amp;quot;,
describe both aspects.
3. if a move has two possible descriptions
</listItem>
<bodyText confidence="0.977939824561404">
which have the same classification within
the set (neutral, offensive, defensive),
then choose the most significant (as
determined by the priority ordering of
tactics).
4. if two consecutive (actual) moves are
such that the second one prevents an
attack made by the first, then select the
tactics corresponding to these aspects to
describe them.
5. if there are no &amp;quot;offensive&amp;quot; or &amp;quot;defensive&amp;quot;
aspects listed, use the simple &amp;quot;take&amp;quot;
form.
The following rule is also applied to all
moves described: if the square taken is not
uniquely determined by the tactic-name, and the
tactic-name is not &amp;quot;take&amp;quot;, then create a &amp;quot;take&amp;quot;
case-frame describing the move, and either make
it into a separate conjoined clause (if the move
has a sentence to itself) or attach it to the main
case-frame as the &amp;quot;method&amp;quot;.
Since the aim of the current project is to
use this discourse domain as a &amp;quot;back-end&amp;quot; for
experimenting with functional unification grammar
(Kay (1979)), the sentence planner has to produce
&amp;quot;fuctional descriptions&amp;quot; to indicate the under-
lying grammatical form for each sentence. The
linked case-frames are therefore reformulated
into functional descriptions, with the links
attached to the front of each clause determining
two aspects of the syntactic structure - the
lexical item (if any) to be used as &amp;quot;binder&amp;quot; or
&amp;quot;connective&amp;quot; at the front of the clause (again, a
non-deterministic choice), and the grammatical
features (e.g. modality, aspect) to be added to
the clause in addition to those default settings
programmed into the system. The ten possible
&amp;quot;links&amp;quot;, with their possible surface realisations
are:
hypothetical
altho although
condante if
condconse
sequence
external-contrast however
internal-contrast but
conjunction and
internal-result and so
external-result consequently
as a result
In addition, the first four of the above
links cause the clause to have perfect aspect,
&amp;quot;hypothetical&amp;quot; and &amp;quot;altho&amp;quot; cause the presence of
the modality &amp;quot;can&amp;quot;, and &amp;quot;condconse&amp;quot; results in
the modality &amp;quot;will&amp;quot;. (Notice that &amp;quot;could&amp;quot; is
regarded as the past tense of &amp;quot;can&amp;quot;, and &amp;quot;would&amp;quot;
as the past tense of &amp;quot;will&amp;quot;).
</bodyText>
<listItem confidence="0.404495">
3. Possible Generalisations
</listItem>
<bodyText confidence="0.99986575">
After establishing a suitably implementation
independent description of the processing
necessary to achieve the behaviour of Proteus,
the next step should be to try to extract some
general notion of how to describe a sequence of
events. The domain used here (tic-tac-toe) has
the unusually convenient feature that there is a
basic canonical form for representing (in a
relatively neutral, primitive form) what the
sequence of events was. That is, the original
list of moves is a non-grammatical representation
of the world events to be described. It is not
realistic to make such an assumption in general,
so a more abstract model may have to take up the
planning process at a slightly later stage, when
moves already have some form of &amp;quot;descriptions&amp;quot;.
</bodyText>
<sectionHeader confidence="0.997926" genericHeader="references">
REFERENCES
</sectionHeader>
<reference confidence="0.996688181818182">
Davey, Anthony (1974) The Formalisation of
Discourse Production. Ph.D. Thesis, University
of Edinburgh.
Davey, Anthony (1978) Discourse Production.
Edinburgh: Edinburgh University Press.
Hudson, Richard (1971) English Complex Sentences.
Amsterdam: North Holland.
Kay, Martin (1979) Functional Grammar. Pp.142-
158 in Proceedings of the Fifth Annual Meeting
of the Berkeley Linguistics Society. Berkeley,
CA: University of California.
</reference>
<page confidence="0.999199">
329
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.072320">
<title confidence="0.998919">A RATIONAL RECONSTRUCTION OF THE PROTEUS SENTENCE PLANNER</title>
<author confidence="0.999558">Graeme Ritchie</author>
<affiliation confidence="0.9910555">Department of Artificial Intelligence University of Edinburgh, Hope Park Square</affiliation>
<address confidence="0.877735">Edinburgh EH8 9NW</address>
<abstract confidence="0.99884412933754">A revised and more structured version of Davey&apos;s discourse generation program has been implemented, which constructs the underlying forms for sentences and clauses by using rules which annotate and segment the initial sequence of events in various ways. The Program The text generation program designed and implemented by Davey (1974,1978) achieved a high level of fluency in the generation of small paragraphs of English describing events in a limited domain (games of &amp;quot;tic-tac-toe&amp;quot;/&amp;quot;noughts-andcrosses&amp;quot;). Although that work was completed ten years ago, the performance is still impressive by current standards. The program could play a game of &amp;quot;noughts-and-crosses&amp;quot; with a user, then produce a fluent summary of what had happened during the game(whether or not the game was complete). For example: The game began with your taking a corner, and I took the middle of an adjacent edge. If you had taken the corner opposite the one which you had just taken, you would have threatened me, but you took the one adjacent to the square which I had just taken. The game hasn&apos;t finished yet. As well as heuristics for actually playing a game, the program contained rules for text generation, which could be regarded as having the following components (this is not a decomposition used by Davey, but an organisation imposed here in order to clarify the processing): (a) Sentence planner (b) Description constructor (c) Systems network The third (syntactic) component, is a major part of the original Proteus program, and Davey included a very detailed systemic grammar (in the style of Hudson (1971)) for the area of English he was concerned with; consequently the written accounts (Davey (1974,1978)) deal mainly with these grammatical aspects. However, much of the fluency of the discourses produced by Proteus seems to derive from the crucial computations performed by This research was supported by SERC grants GR/B/9874.6 and GR/C/8845.1. components (a) and (b), since the syntactic system is largely set up to convert deep representations into surface tokens, without too much regard for global contextual factors. Unfortunately, the written accounts give only a rough informal outline of how these components operated. A completely revised version of Proteus has been implemented in Prolog on a DEC System 10, and this paper describes the working of its sentence planner. The system outlined below is not an exact replication of Davey&apos;s program, but is a &amp;quot;rational reconstruction&apos;&apos;; that is, an attempt to present a slightly cleaner, more general method, based on Davey&apos;s ideas and performing the same specific task as Proteus. Paradoxically, this cleaning up process may lead to minor losses of fluency, where particular effects were gained in Proteus by slightly ad hoc measures. 2. The Sentence Planner The module which creates the overall clausal structure of each sentence works on a list of numbers representing the course of a game (complete or unfinished), where each square is represented by a number between 1 and 9. The processing carried out by the sentence planner can be seen as occurring in three logical phases: 1. move annotation 2. sentence segmentation 3. case-frame linking Although these stages are logically distinct, they need not occur wholly in temporal sequence. However, the abstract model is clearer if viewed in separate stages. Move The system has a set of heuristic rules which enable it to play noughts-and-crosses to a reasonable standard. (A non-optimal set of rules helps to introduce some variety into the play). It uses these move-generating rules to work through the history of the game, computing at each position which move it would have made for that situation and which move-generating rule gives rise to the move actually made at that point. This allows it to mark the actual move in the given history with certain tactical details, using the implicit assumption that whoever made the moves had the same knowledge of the game as the system itself does. The five move-generators are totally ordered to reflect a &amp;quot;priority&amp;quot; or &amp;quot;significance&amp;quot; with 327 respect to the game, and each move-generator is labelled with one of three categories - &amp;quot;defensive&amp;quot; (e.g. blocking the third square in an opponent&apos;s near-complete line), &amp;quot;offensive&amp;quot; (e.g. creating a near-complete line, which thus threatens the opponent) or &amp;quot;neutral&amp;quot; (e.g. taking a square to start the game). In addition to basic organisational entries (square taken, name of player, pointer to preceding move, pointer to following move), the annotation of the moves contains the following information: (a) generating heuristic(s) there is a list, in priority order, of the heuristics which could have given rise to that move. (b) tactically equivalent alternatives for each heuristic listed in (a), there is a list of the other squares which could also have resulted from that heuristic. (c) lines involved for each square mentioned in the various entries, there is a note of which lines (if any) were (or would have been) tactically involved in that move. (d) better move if there is a higher priority heuristic that would give rise to a different choice of square, an annotated description of that &amp;quot;better&amp;quot; move is attached. For example, the game described by the discourse in Section 1 above would initially be just a sequence of square-numbers, together with the name of the first player: user 1 2 3 After annotation, the third move (square 3) would have the following information attached: square : 3 heuristics/alternatives : better move : square : 9 (1 5 9) heuristics/alternatives (14 7) Segmentation The sentence segmentation process involves grouping the annotated moves into clusters so that each cluster contains an appropriate amount of information for one sentence. This uses the following guidelines, in the following order, to determine the number of moves within a sentence: 1. If there is just one move left in the sequence, that must be a single sentence. 2. If there are just two moves left, they form a single sentence. 3. If a move is a &amp;quot;mistake&amp;quot; (i.e. there is a tactically better alternative) then start a new sentence to describe it. This is quite a dominant principle, in that the will perform &amp;quot;look-ahead&amp;quot; (actual) moves in the annotated chain to check if there is a mistake looming up. 4. If a move is a combined attack and defence, give it a sentence to itself. 5. If this move is an attack, and the next move successfully thwarts that attack, then put these two moves into a sentence on their own. 6. Put the next three moves in a sentence. (No more than three moves may occur in a single sentence structure). As well as segmenting the moves, this module attaches to each move a tag indicating its overall tactical relationship to the preceding moves. This is a gross summary of some of the tactical information provided by the annotator, and encodes much of the information needed by the next stage (case-frame linking). There are four tag-values used - &amp;quot;consequence&amp;quot; (the move is a result of the preceding one), &amp;quot;thwart&amp;quot; (the move prevents an attack by the preceding one), &amp;quot;mistake&amp;quot; (the move is a failure to make the best possible move), and &amp;quot;null&amp;quot; (an all-purpose default). Linking Once the moves have been annotated, grouped and tagged, their descriptions can be constructed and linked together, to form the internal structure of the sentence. In this process, various case-frame structures are computed from the information attached to each move, are placed linked by various relationships. There may be, within a sentence, several descriptions associated with a single move, since it is possible for more than one aspect of a move to be mentioned. In each caseframe structure, the other roles will contain suitable fillers e.g. the square taken (for a &amp;quot;take&amp;quot; description), or the other player (for a &amp;quot;threat&amp;quot;) which are computable from the annotations. Each such case-frame description will eventually give rise to a full tensed clause. In addition, some of these case-frames will have, embedded within them on the &amp;quot;method&amp;quot; case-role, further simple case-frames which will eventually give rise to adjuncts to the tensed clause in the form of verb phrases (e.g. &amp;quot;...by taking a corner..&amp;quot;). Hence the linking process involves selecting those descriptive structures (from the annotations) which are to be expressed linguistically, formulating these as filled case-frame&apos;s, and labelling the relationships between these descriptions. Relationships between case-frame descriptions are indicated by attaching to each case-frame a &amp;quot;link&amp;quot; symbol indicating its relation to the surrounding discourse (either within that sentence, or across the preceding sentence boundary). This process is non-deterministic in the sense that there are usually several equally good ways of expressing a given move or sequence of moves within a sentence. The program contains take 19 8 7 6 5 4) : 5 (1 5 9) 4 (14 7)] 328 rules for all such possibilities, and works through all the possible combinations using a simple depth-first search. The case-frame construction also determines the clausal structure of the sentence, in that the nesting or conjoining of clauses is fixed at this stage. The clausal structure does not allow recursive levels there are, for example, no verbs with sentential complements. The case-frame construction and tagging depends on the links inserted by the sentence-segmenter, together with three items of information from the annotations on the moves whether the move has two aspects, defensive and offensive; any &amp;quot;better&amp;quot; move that has been attached; and whether the tactic-name uniquely defines, within the context, which square must have been taken. The case-frame construction and linking proceeds according to certain guidelines: 1. if the move is a &amp;quot;mistake&amp;quot;, indicate that by describing both the better move and the actual move. 2. if a move has two possible descriptions, one &amp;quot;offensive&amp;quot; and the other &amp;quot;defensive&amp;quot;, describe both aspects. 3. if a move has two possible descriptions which have the same classification within the set (neutral, offensive, defensive), then choose the most significant (as determined by the priority ordering of tactics). 4. if two consecutive (actual) moves are such that the second one prevents an attack made by the first, then select the tactics corresponding to these aspects to describe them. 5. if there are no &amp;quot;offensive&amp;quot; or &amp;quot;defensive&amp;quot; aspects listed, use the simple &amp;quot;take&amp;quot; form. The following rule is also applied to all moves described: if the square taken is not uniquely determined by the tactic-name, and the tactic-name is not &amp;quot;take&amp;quot;, then create a &amp;quot;take&amp;quot; case-frame describing the move, and either make it into a separate conjoined clause (if the move has a sentence to itself) or attach it to the main case-frame as the &amp;quot;method&amp;quot;. Since the aim of the current project is to use this discourse domain as a &amp;quot;back-end&amp;quot; for experimenting with functional unification grammar (Kay (1979)), the sentence planner has to produce &amp;quot;fuctional descriptions&amp;quot; to indicate the underlying grammatical form for each sentence. The linked case-frames are therefore reformulated into functional descriptions, with the links attached to the front of each clause determining two aspects of the syntactic structure the lexical item (if any) to be used as &amp;quot;binder&amp;quot; or &amp;quot;connective&amp;quot; at the front of the clause (again, a non-deterministic choice), and the grammatical features (e.g. modality, aspect) to be added to the clause in addition to those default settings programmed into the system. The ten possible &amp;quot;links&amp;quot;, with their possible surface realisations are: hypothetical altho although condante if condconse sequence external-contrast however internal-contrast but conjunction and internal-result and so external-result consequently as a result In addition, the first four of the above links cause the clause to have perfect aspect, &amp;quot;hypothetical&amp;quot; and &amp;quot;altho&amp;quot; cause the presence of the modality &amp;quot;can&amp;quot;, and &amp;quot;condconse&amp;quot; results in the modality &amp;quot;will&amp;quot;. (Notice that &amp;quot;could&amp;quot; is regarded as the past tense of &amp;quot;can&amp;quot;, and &amp;quot;would&amp;quot; as the past tense of &amp;quot;will&amp;quot;). Generalisations After establishing a suitably implementation independent description of the processing necessary to achieve the behaviour of Proteus, the next step should be to try to extract some general notion of how to describe a sequence of events. The domain used here (tic-tac-toe) has the unusually convenient feature that there is a basic canonical form for representing (in a relatively neutral, primitive form) what the sequence of events was. That is, the original list of moves is a non-grammatical representation of the world events to be described. It is not realistic to make such an assumption in general, so a more abstract model may have to take up the planning process at a slightly later stage, when moves already have some form of &amp;quot;descriptions&amp;quot;.</abstract>
<title confidence="0.330212">REFERENCES</title>
<author confidence="0.450206">Anthony The Formalisation of Davey</author>
<affiliation confidence="0.670806">Discourse Production. Ph.D. Thesis, University of Edinburgh.</affiliation>
<address confidence="0.818745">Davey, Anthony (1978) Discourse Production.</address>
<affiliation confidence="0.767181">Edinburgh: Edinburgh University Press.</affiliation>
<address confidence="0.88899">Hudson, Richard (1971) English Complex Sentences. Amsterdam: North Holland. Kay, Martin (1979) Functional Grammar. Pp.142- 158 in Proceedings of the Fifth Annual Meeting</address>
<affiliation confidence="0.964488">of the Berkeley Linguistics Society. Berkeley, CA: University of California.</affiliation>
<address confidence="0.759167">329</address>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Anthony Davey</author>
</authors>
<title>The Formalisation of Discourse Production.</title>
<date>1974</date>
<tech>Ph.D. Thesis,</tech>
<institution>University of Edinburgh.</institution>
<contexts>
<context position="1876" citStr="Davey (1974" startWordPosition="299" endWordPosition="300">shed yet. As well as heuristics for actually playing a game, the program contained rules for text generation, which could be regarded as having the following components (this is not a decomposition used by Davey, but an organisation imposed here in order to clarify the processing): (a) Sentence planner (b) Description constructor (c) Systems network The third (syntactic) component, is a major part of the original Proteus program, and Davey included a very detailed systemic grammar (in the style of Hudson (1971)) for the area of English he was concerned with; consequently the written accounts (Davey (1974,1978)) deal mainly with these grammatical aspects. However, much of the fluency of the discourses produced by Proteus seems to derive from the crucial computations performed by This research was supported by SERC grants GR/B/9874.6 and GR/C/8845.1. components (a) and (b), since the syntactic system is largely set up to convert deep representations into surface tokens, without too much regard for global contextual factors. Unfortunately, the written accounts give only a rough informal outline of how these components operated. A completely revised version of Proteus has been implemented in Prol</context>
</contexts>
<marker>Davey, 1974</marker>
<rawString>Davey, Anthony (1974) The Formalisation of Discourse Production. Ph.D. Thesis, University of Edinburgh.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Anthony Davey</author>
</authors>
<date>1978</date>
<booktitle>Discourse Production.</booktitle>
<publisher>Edinburgh University Press.</publisher>
<location>Edinburgh:</location>
<marker>Davey, 1978</marker>
<rawString>Davey, Anthony (1978) Discourse Production. Edinburgh: Edinburgh University Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Richard Hudson</author>
</authors>
<title>English Complex Sentences.</title>
<date>1971</date>
<location>Amsterdam: North Holland.</location>
<contexts>
<context position="1781" citStr="Hudson (1971)" startWordPosition="284" endWordPosition="285">ened me, but you took the one adjacent to the square which I had just taken. The game hasn&apos;t finished yet. As well as heuristics for actually playing a game, the program contained rules for text generation, which could be regarded as having the following components (this is not a decomposition used by Davey, but an organisation imposed here in order to clarify the processing): (a) Sentence planner (b) Description constructor (c) Systems network The third (syntactic) component, is a major part of the original Proteus program, and Davey included a very detailed systemic grammar (in the style of Hudson (1971)) for the area of English he was concerned with; consequently the written accounts (Davey (1974,1978)) deal mainly with these grammatical aspects. However, much of the fluency of the discourses produced by Proteus seems to derive from the crucial computations performed by This research was supported by SERC grants GR/B/9874.6 and GR/C/8845.1. components (a) and (b), since the syntactic system is largely set up to convert deep representations into surface tokens, without too much regard for global contextual factors. Unfortunately, the written accounts give only a rough informal outline of how </context>
</contexts>
<marker>Hudson, 1971</marker>
<rawString>Hudson, Richard (1971) English Complex Sentences. Amsterdam: North Holland.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Martin Kay</author>
</authors>
<title>Functional Grammar. Pp.142-158</title>
<date>1979</date>
<booktitle>in Proceedings of the Fifth Annual Meeting of the Berkeley Linguistics Society.</booktitle>
<institution>University of California.</institution>
<location>Berkeley, CA:</location>
<contexts>
<context position="11252" citStr="Kay (1979)" startWordPosition="1827" endWordPosition="1828">cribe them. 5. if there are no &amp;quot;offensive&amp;quot; or &amp;quot;defensive&amp;quot; aspects listed, use the simple &amp;quot;take&amp;quot; form. The following rule is also applied to all moves described: if the square taken is not uniquely determined by the tactic-name, and the tactic-name is not &amp;quot;take&amp;quot;, then create a &amp;quot;take&amp;quot; case-frame describing the move, and either make it into a separate conjoined clause (if the move has a sentence to itself) or attach it to the main case-frame as the &amp;quot;method&amp;quot;. Since the aim of the current project is to use this discourse domain as a &amp;quot;back-end&amp;quot; for experimenting with functional unification grammar (Kay (1979)), the sentence planner has to produce &amp;quot;fuctional descriptions&amp;quot; to indicate the underlying grammatical form for each sentence. The linked case-frames are therefore reformulated into functional descriptions, with the links attached to the front of each clause determining two aspects of the syntactic structure - the lexical item (if any) to be used as &amp;quot;binder&amp;quot; or &amp;quot;connective&amp;quot; at the front of the clause (again, a non-deterministic choice), and the grammatical features (e.g. modality, aspect) to be added to the clause in addition to those default settings programmed into the system. The ten possib</context>
</contexts>
<marker>Kay, 1979</marker>
<rawString>Kay, Martin (1979) Functional Grammar. Pp.142-158 in Proceedings of the Fifth Annual Meeting of the Berkeley Linguistics Society. Berkeley, CA: University of California.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>