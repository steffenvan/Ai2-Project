<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000076">
<title confidence="0.975968">
Learning to Order Natural Language Texts
</title>
<author confidence="0.995255">
Jiwei Tana, b, Xiaojun Wana* and Jianguo Xiaoa
</author>
<affiliation confidence="0.999681333333333">
aInstitute of Computer Science and Technology, The MOE Key Laboratory of Computa-
tional Linguistics, Peking University, China
bSchool of Information Science and Technology, Beijing Normal University, China
</affiliation>
<email confidence="0.990393">
tanjiwei8@gmail.com, {wanxiaojun,jgxiao}@pku.edu.cn
</email>
<sectionHeader confidence="0.993656" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.99981275">
Ordering texts is an important task for many
NLP applications. Most previous works on
summary sentence ordering rely on the contex-
tual information (e.g. adjacent sentences) of
each sentence in the source document. In this
paper, we investigate a more challenging task
of ordering a set of unordered sentences with-
out any contextual information. We introduce
a set of features to characterize the order and
coherence of natural language texts, and use
the learning to rank technique to determine the
order of any two sentences. We also propose
to use the genetic algorithm to determine the
total order of all sentences. Evaluation results
on a news corpus show the effectiveness of
our proposed method.
</bodyText>
<sectionHeader confidence="0.998801" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999739956521739">
Ordering texts is an important task in many natu-
ral language processing (NLP) applications. It is
typically applicable in the text generation field,
both for concept-to-text generation and text-to-
text generation (Lapata, 2003), such as multiple
document summarization (MDS), question an-
swering and so on. However, ordering a set of
sentences into a coherent text is still a hard and
challenging problem for computers.
Previous works on sentence ordering mainly
focus on the MDS task (Barzilay et al., 2002;
Okazaki et al., 2004; Nie et al., 2006; Ji and
Pulman, 2006; Madnani et al., 2007; Zhang et al.,
2010; He et al., 2006; Bollegala et al., 2005; Bol-
legala et al., 2010). In this task, each summary
sentence is extracted from a source document.
The timestamp of the source documents and the
adjacent sentences in the source documents can
be used as important clues for ordering summary
sentences.
In this study, we investigate a more challeng-
ing and more general task of ordering a set of
unordered sentences (e.g. randomly shuffle the
</bodyText>
<note confidence="0.533132">
* Xiaojun Wan is the corresponding author.
</note>
<bodyText confidence="0.987124133333333">
sentences in a text paragraph) without any con-
textual information. This task can be applied to
almost all text generation applications without
restriction.
In order to address this challenging task, we
first introduce a few useful features to character-
ize the order and coherence of natural language
texts, and then propose to use the learning to
rank algorithm to determine the order of two sen-
tences. Moreover, we propose to use the genetic
algorithm to decide the overall text order. Evalu-
ations are conducted on a news corpus, and the
results show the prominence of our method. Each
component technique or feature in our method
has also been validated.
</bodyText>
<sectionHeader confidence="0.999748" genericHeader="related work">
2 Related Work
</sectionHeader>
<bodyText confidence="0.999990611111111">
For works taking no use of source document,
Lapata (2003) proposed a probabilistic model
which learns constraints on sentence ordering
from a corpus of texts. Experimental evaluation
indicated the importance of several learned lexi-
cal and syntactic features. However, the model
only works well when using single feature, but
unfortunately, it becomes worse when multiple
features are combined. Barzilay and Lee (2004)
investigated the utility of domain-specific con-
tent model for representing topic and topic shifts
and the model performed well on the five se-
lected domains. Nahnsen (2009) employed fea-
tures which were based on discourse entities,
shallow syntactic analysis, and temporal prece-
dence relations retrieved from VerbOcean. How-
ever, the model does not perform well on data-
sets describing the consequences of events.
</bodyText>
<sectionHeader confidence="0.992006" genericHeader="method">
3 Our Proposed Method
</sectionHeader>
<subsectionHeader confidence="0.982189">
3.1 Overview
</subsectionHeader>
<bodyText confidence="0.997452666666667">
The task of text ordering can be modeled like
(Cohen et al., 1998), as measuring the coherence
of a text by summing the association strength of
any sentence pairs. Then the objective of a text
ordering model is to find a permutation which
can maximize the summation.
</bodyText>
<page confidence="0.988736">
87
</page>
<bodyText confidence="0.798061571428571">
Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics, pages 87–91,
Sofia, Bulgaria, August 4-9 2013. c�2013 Association for Computational Linguistics
Formally, we define an association strength
function PREF(u, v) ∈ R to measure how strong
it is that sentence u should be arranged before
sentence v (denoted as u ;v). We then define
function AGREE(ρ,PREF) as:
</bodyText>
<equation confidence="0.910472">
AGREE( ,PREF) =
ρ ∑ PREF( , )
u v
u,v: ρ(u )&gt; ρ(v)
</equation>
<bodyText confidence="0.993377">
where ρ denotes a sentence permutation and
ρ(u) &gt; ρ(v) means u ; v in the permutation ρ .
Then the objective of finding an overall order of
the sentences becomes finding a permutation ρ
to maximize AGREE(ρ,PREF) .
The main framework is made up of two parts:
defining a pairwise order relation and determin-
ing an overall order. Our study focuses on both
the two parts by learning a better pairwise rela-
tion and proposing a better search strategy, as
described respectively in next sections.
</bodyText>
<subsectionHeader confidence="0.999175">
3.2 Pairwise Relation Learning
</subsectionHeader>
<bodyText confidence="0.9998654">
The goal for pairwise relation learning is defin-
ing the strength function PREF for any sentence
pair. In our method we define the function PREF
by combining multiple features.
Method: Traditionally, there are two main
methods for defining a strength function: inte-
grating features by a linear combination (He et
al., 2006; Bollegala et al., 2005) or by a binary
classifier (Bollegala et al., 2010). However, the
binary classification method is very coarse-
grained since it considers any pair of sentences
either “positive” or “negative”. Instead we pro-
pose to use a better model of learning to rank to
integrate multiple features.
In this study, we use Ranking SVM imple-
mented in the svmrank toolkit (Joachims, 2002;
Joachims, 2006) as the ranking model. The ex-
amples to be ranked in our ranking model are
sequential sentence pairs like u ; v. The feature
values for a training example are generated by a
few feature functions fi (u, v) , and we will intro-
duce the features later. We build the training ex-
amples for svmrank as follows:
For a training query, which is a paragraph with
n sequential sentences as s1 ; s2 ; ... ; sn , we
can get An2 = n(n −1) training examples. For
pairs like sa ; sa+k (k &gt; 0) the target rank values
are set to n − k, which means that the longer the
distance between the two sentences is, the small-
er the target value is. Other pairs like sa+k ; sa
are all set to 0. In order to better capture the or-
der information of each feature, for every sen-
tence pair u ; v , we derive four feature values
from each function fi (u,v) , which are listed as
follows:
</bodyText>
<equation confidence="0.99599604">
Vi,1 = fi (u, v) (2)
1/ 2, if ( , ) ( , ) 0
f u v f v u
+ =
i i
(3)
, otherwise
⎩ f u v f v u
( , ) ( , )
+
i i
1/ S , if ∑ f u y
i ( , ) 0
=
( , ) /
u v∑ f u y
( , ), otherwise
i
y S y u
∈ ∩ ≠
f u v
( , ) / ∑ f x v
( , ), otherwise
i ix S x v
∈ ∩ ≠
</equation>
<bodyText confidence="0.4242103">
Type Description
Similarity sim(u, v)
sim(latter(u
(u, v) /
u
v
),former(v))overlapj
min(|
|,|
|)
Overlap overlap j(latter( u) ,former( v))
overlapj (u, v)
Coreference Number of
coreference chains
Number of
coreference words
Noun
Probability Verb
Model Verb &amp; noun dependency
Adjective &amp; adverb
</bodyText>
<equation confidence="0.7446951">
f i
y S y u
∈ ∩ ≠
1/ S , if ∑ f x v
( , ) 0
=
i
x S x v
∈ ∩ ≠
(5)
</equation>
<bodyText confidence="0.7873438">
where S is the set of all sentences in a paragraph
and S is the number of sentences in S . The
three additional feature values of (3) (4) (5) are
defined to measure the priority of u
v to v
</bodyText>
<figure confidence="0.659068325">
u ,
u
v to u
S
{u, v} and u
v to
S
{u, v}
v respectively, by calculating
the proportion of
(u, v) in respective summa-
tions.
The learned model can be used to predict tar-
get values for new examples. A paragraph of un-
ordered sentences is viewed as a test query, and
the predicted target value for u
v is set as
PREF(u, v) .
Features: We select four types of features to
characterize text coherence. Every type of fea-
tures is quantified with several functions distin-
guished by i in the formulation of
(u, v) and
normalized to [0,1]
features an
;
;
;
;∀y∈
−
;
∀x∈
−
;
fi
;
fi
. The
d definitions
of fi (u, v) are introduced in Table 1.
</figure>
<tableCaption confidence="0.994306">
Table 1: Features used in our model.
</tableCaption>
<figure confidence="0.850684105263158">
(1)
⎧⎪
V ( , )
i ,2= ⎨ f u v
i
⎪
,3
V i
⎧
⎪
= ⎨
⎪
⎩
,4
V i
⎧
⎪
= ⎨⎪⎩
(4)
</figure>
<page confidence="0.994078">
88
</page>
<bodyText confidence="0.999702631578947">
As in Table 1, function sim(u,v) denotes the
cosine similarity of sentence u and v ; latter(u)
and former(v) denotes the latter half part of u
and the former part of v respectively, which are
separated by the most centered comma (if exists)
or word (if no comma exits); overlapj (u, v) de-
notes the number of mutual words of u and v ,
for j =1,2,3 representing lemmatized noun,
verb and adjective or adverb respectively;  |u  |is
the number of words of sentence u . The value
will be set to 0 if the denominator is 0.
For the coreference features we use the ARK-
ref1 tool. It can output the coreference chains
containing words which represent the same entity
for two sequential sentences u &gt;- v.
The probability model originates from (Lapata,
2003), and we implement the model with four
features of lemmatized noun, verb, adjective or
adverb, and verb and noun related dependency.
</bodyText>
<subsectionHeader confidence="0.99683">
3.3 Overall Order Determination
</subsectionHeader>
<bodyText confidence="0.999461862068966">
Cohen et al. (1998) proved finding a permutation
p to maximize AGREE(p,PREF) is NP-
complete. To solve this, they proposed a greedy
algorithm for finding an approximately optimal
order. Most later works adopted the greedy
search strategy to determine the overall order.
However, a greedy algorithm does not always
lead to satisfactory results, as our experiment
shows in Section 4.2. Therefore, we propose to
use the genetic algorithm (Holland, 1992) as the
search strategy, which can lead to better results.
Genetic Algorithm: The genetic algorithm
(GA) is an artificial intelligence algorithm for
optimization and search problems. The key point
of using GA is modeling the individual, fitness
function and three operators of crossover, muta-
tion and selection. Once a problem is modeled,
the algorithm can be constructed conventionally.
In our method we set a permutation p as an
individual encoded by a numerical path, for ex-
ample a permutation s2 r s1 r s3 is encoded as (2
1 3). Then the function AGREE(p,PREF) is just
the fitness function. We adopt the order-based
crossover operator which is described in (Davis,
1985). The mutation operator is a random inver-
sion of two sentences. For selection operator we
take a tournament selection operator which ran-
domly selects two individuals to choose the one
with the greater fitness value AGREE(p,PREF) .
</bodyText>
<footnote confidence="0.800913">
1 http://www.ark.cs.cmu.edu/ARKref/
</footnote>
<bodyText confidence="0.999810333333333">
After several generations of evolution, the indi-
vidual with the greatest fitness value will be a
close solution to the optimal result.
</bodyText>
<sectionHeader confidence="0.999698" genericHeader="method">
4 Experiments
</sectionHeader>
<subsectionHeader confidence="0.998413">
4.1 Experiment Setup
</subsectionHeader>
<bodyText confidence="0.998418">
Data Set and Evaluation Metric: We con-
ducted the experiments on the North American
News Text Corpus2. We trained the model on 80
thousand paragraphs and tested with 200 shuffled
paragraphs. We use Kendall’s z as the evalua-
tion metric, which is based on the number of in-
versions in the rankings.
Comparisons: It is incomparable with other
methods for summary sentence ordering based
on special summarization corpus, so we imple-
mented Lapata’s probability model for compari-
son, which is considered the state of the art for
this task. In addition, we implemented a random
ordering as a baseline. We also tried to use a
classification model in place of the ranking mod-
el. In the classification model, sentence pairs like
sa r sa+1 were viewed as positive examples and
all other pairs were viewed as negative examples.
When deciding the overall order for either rank-
ing or classification model we used three search
strategies: greedy, genetic and exhaustive (or
brutal) algorithms. In addition, we conducted a
series of experiments to evaluate the effect of
each feature. For each feature, we tested in two
experiments, one of which only contained the
single feature and the other one contained all the
other features. For comparative analysis of fea-
tures, we tested with an exhaustive search algo-
rithm to determine the overall order.
</bodyText>
<subsectionHeader confidence="0.993307">
4.2 Experiment Results
</subsectionHeader>
<bodyText confidence="0.9995435">
The comparison results in Table 2 show that our
Ranking SVM based method improves the per-
formance over the baselines and the classifica-
tion based method with any of the search algo-
rithms. We can also see the greedy search strat-
egy does not perform well and the genetic algo-
rithm can provide a good approximate solution to
obtain optimal results.
</bodyText>
<table confidence="0.9987142">
Method Greedy Exhaustive Genetic
Baseline -0.0127
Probability 0.1859
Classification 0.5006 0.5360 0.5264
Ranking 0.5191 0.5768 0.5747
</table>
<tableCaption confidence="0.999324">
Table 2: Average z of different methods.
</tableCaption>
<footnote confidence="0.846295">
2 The corpus is available from
http://www.ldc.upenn.edu/Catalog/catalogEntry.jsp?catalog
Id=LDC98T30
</footnote>
<page confidence="0.999684">
89
</page>
<bodyText confidence="0.996065444444444">
Ranking vs. Classification: It is not surpris-
ing that the ranking model is better, because
when using a classification model, an example
should be labeled either positive or negative. It is
not very reasonable to label a sentence pair like
sa r sa+k (k &gt; 1) as a negative example, nor a pos-
itive one, because in some cases, it is easy to
conclude one sentence should be arranged after
another but hard to decide whether they should
be adjacent. As we see in the function AGREE,
the value of PREF(sa,sa+k) also contributes to
the summation. In a ranking model, this informa-
tion can be quantified by the different priorities
of sentence pairs with different distances.
Single Feature Effect: The effects of differ-
ent types of features are shown in Table 3. Prob
denotes Lapata’s probability model with differ-
ent features.
</bodyText>
<table confidence="0.999354222222222">
Feature Only Removed
Similarity 0.0721 0.4614
Overlap 0.1284 0.4631
Coreference 0.0734 0.4704
Probnoun 0.3679 0.3932
Probverb 0.0615 0.4544
Probadjective&amp;adverb 0.2650 0.4258
Probdependency 0.2687 0.4892
All 0.5768
</table>
<tableCaption confidence="0.999732">
Table 3: Effects of different features.
</tableCaption>
<bodyText confidence="0.98952">
It can be seen in Table 3 that all these features
contribute to the final result. The two features of
noun probability and dependency probability
play an important role as demonstrated in (La-
pata, 2003). Other features also improve the final
performance. A paragraph which is ordered en-
tirely right by our method is shown in Figure 1.
</bodyText>
<listItem confidence="0.982425">
(1) Vanunu, 43, is serving an 18-year sentence for
treason.
(2) He was kidnapped by Israel&apos;s Mossad spy
agency in Rome in 1986 after giving The Sun-
day Times of London photographs of the in-
side of the Dimona reactor.
(3) From the photographs, experts determined
that Israel had the world&apos;s sixth largest stock-
pile of nuclear weapons.
(4) Israel has never confirmed or denied that it
has a nuclear capability.
</listItem>
<figureCaption confidence="0.705091">
Figure 1: A right ordered paragraph.
</figureCaption>
<bodyText confidence="0.999968368421053">
Sentences which should be arranged together
tend to have a higher similarity and overlap. Like
sentence (3) and (4) in Figure 1, they have a
highest cosine similarity of 0.2240 and most
overlap words of “Israel” and “nuclear”. How-
ever, the similarity or overlap of the two sen-
tences does not help to decide which sentence
should be arranged before another. In this case
the overlap and similarity of half part of the sen-
tences may help. For example latter((3)) and
former((4)) share an overlap of “Israel” while
there is no overlap for latter((4)) and former((3)).
Coreference is also an important clue for or-
dering natural language texts. When we use a
pronoun to represent an entity, it always has oc-
curred before. For example when conducting
coreference resolution for (1) r (2) , it will be
found that “He” refers to “Vanunu”. Otherwise
for (2) r (1) , no coreference chain will be found.
</bodyText>
<subsectionHeader confidence="0.998046">
4.3 Genetic Algorithm
</subsectionHeader>
<bodyText confidence="0.9996165">
There are three main parameters for GA includ-
ing the crossover probability (PC), the mutation
probability (PM) and the population size (PS).
There is no definite selection for these parame-
ters. In our study we experimented with a wide
range of parameter values to see the effect of
each parameter. It is hard to traverse all possible
combinations so when testing a parameter we
fixed the other two parameters. The results are
shown in Table 4.
</bodyText>
<table confidence="0.9969404">
Value Avg Max Min Stddev
Para
PS 0.5731 0.5859 0.5606 0.0046
PC 0.5733 0.5806 0.5605 0.0038
PM 0.5741 0.5803 0.5337 0.0045
</table>
<tableCaption confidence="0.999535">
Table 4: Results of GA with different parameters.
</tableCaption>
<bodyText confidence="0.999821666666667">
As we can see in Table 4, when adjusting the
three parameters the average r values are all
close to the exhaustive result of 0.5768 and their
standard deviations are low. Table 4 shows that
in our case the genetic algorithm is not very sen-
sible to the parameters. In the experiments, we
set PS to 30, PC to 0.5 and PM to 0.05, and
reached a value of 0.5747, which is very close to
the theoretical upper bound of 0.5768.
</bodyText>
<sectionHeader confidence="0.991931" genericHeader="conclusions">
5 Conclusion and Discussion
</sectionHeader>
<bodyText confidence="0.998265625">
In this paper we propose a method for ordering
sentences which have no contextual information
by making use of Ranking SVM and the genetic
algorithm. Evaluation results demonstrate the
good effectiveness of our method.
In future work, we will explore more features
such as semantic features to further improve the
performance.
</bodyText>
<sectionHeader confidence="0.998331" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.985450666666667">
The work was supported by NSFC (61170166),
Beijing Nova Program (2008B03) and National
High-Tech R&amp;D Program (2012AA011101).
</bodyText>
<page confidence="0.996559">
90
</page>
<sectionHeader confidence="0.989535" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999617">
Danushka Bollegala, Naoaki Okazaki, Mitsuru Ishi-
zuka. 2005. A machine learning approach to sen-
tence ordering for multi-document summarization
and its evaluation. In Proceedings of the Second in-
ternational joint conference on Natural Language
Processing (IJCNLP &apos;05), 624-635.
Danushka Bollegala, Naoaki Okazaki, and Mitsuru
Ishizuka. 2010. A bottom-up approach to sentence
ordering for multi-document summarization. Inf.
Process. Manage. 46, 1 (January 2010), 89-109.
John H. Holland. 1992. Adaptation in Natural and
Artificial Systems: An Introductory Analysis with
Applications to Biology, Control and Artificial In-
telligence. MIT Press, Cambridge, MA, USA.
Lawrence Davis. 1985. Applying adaptive algorithms
to epistatic domains. In Proceedings of the 9th in-
ternational joint conference on Artificial intelli-
gence - Volume 1 (IJCAI&apos;85), Aravind Joshi (Ed.),
Vol. 1. Morgan Kaufmann Publishers Inc., San
Francisco, CA, USA, 162-164.
Mirella Lapata. 2003. Probabilistic text structuring:
experiments with sentence ordering. InProceedings
of the 41st Annual Meeting on Association for
Computational Linguistics - Volume 1(ACL &apos;03),
Vol. 1. Association for Computational Linguistics,
Stroudsburg, PA, USA, 545-552.
Naoaki Okazaki, Yutaka Matsuo, and Mitsuru Ishi-
zuka. 2004. Improving chronological sentence or-
dering by precedence relation. In Proceedings of
the 20th international conference on Computa-
tional Linguistics (COLING &apos;04). Association for
Computational Linguistics, Stroudsburg, PA,
USA, , Article 750 .
Nitin Madnani, Rebecca Passonneau, Necip Fazil
Ayan, John M. Conroy, Bonnie J. Dorr, Judith L.
Klavans, Dianne P. O&apos;Leary, and Judith D. Schle-
singer. 2007. Measuring variability in sentence or-
dering for news summarization. In Proceedings of
the Eleventh European Workshop on Natural Lan-
guage Generation (ENLG &apos;07), Stephan Busemann
(Ed.). Association for Computational Linguistics,
Stroudsburg, PA, USA, 81-88.
Paul D. Ji and Stephen Pulman. 2006. Sentence order-
ing with manifold-based classification in multi-
document summarization. In Proceedings of the
2006 Conference on Empirical Methods in Natural
Language Processing (EMNLP &apos;06). Association
for Computational Linguistics, Stroudsburg, PA,
USA, 526-533.
Regina Barzilay, Noemie Elhadad, and Kathleen
McKeown. 2002. Inferring strategies for sentence
ordering in multidocument news summarization.
Journal of Artificial Intelligence Research, 17:35–
55.
Regina Barzilay and Lillian Lee. 2004. Catching the
drift: Probabilistic content models, with applica-
tions to generation and summarization. In HLT-
NAACL2004: Proceedings of the Main Conference,
pages 113–120.
Renxian Zhang, Wenjie Li, and Qin Lu. 2010. Sen-
tence ordering with event-enriched semantics and
two-layered clustering for multi-document news
summarization. In Proceedings of the 23rd Interna-
tional Conference on Computational Linguistics:
Posters (COLING &apos;10). Association for Computa-
tional Linguistics, Stroudsburg, PA, USA, 1489-
1497.
Thade Nahnsen. 2009. Domain-independent shallow
sentence ordering. In Proceedings of Human Lan-
guage Technologies: The 2009 Annual Conference
of the North American Chapter of the Association
for Computational Linguistics, Companion Volume:
Student Research Workshop and Doctoral Consor-
tium (SRWS &apos;09). Association for Computational
Linguistics, Stroudsburg, PA, USA, 78-83.
Thorsten Joachims. 2002. Optimizing search engines
using click through data. In Proceedings of the
eighth ACM SIGKDD international conference on
Knowledge discovery and data mining (KDD &apos;02).
ACM, New York, NY, USA, 133-142.
Thorsten Joachims. 2006. Training linear SVMs in
linear time. In Proceedings of the 12th ACM
SIGKDD international conference on Knowledge
discovery and data mining (KDD &apos;06). ACM, New
York, NY, USA, 217-226.
William W. Cohen, Robert E. Schapire, and Yoram
Singer. 1998. Learning to order things. InProceed-
ings of the 1997 conference on Advances in neural
information processing systems 10(NIPS &apos;97), Mi-
chael I. Jordan, Michael J. Kearns, and Sara A.
Solla (Eds.). MIT Press, Cambridge, MA, USA,
451-457.
Yanxiang He, Dexi Liu, Hua Yang, Donghong Ji,
Chong Teng, and Wenqing Qi. 2006. A hybrid sen-
tence ordering strategy in multi-document summa-
rization. In Proceedings of the 7th international
conference on Web Information Systems (WISE&apos;06),
Karl Aberer, Zhiyong Peng, Elke A. Rundensteiner,
Yanchun Zhang, and Xuhui Li (Eds.). Springer-
Verlag, Berlin, Heidelberg, 339-349.
Yu Nie, Donghong Ji, and Lingpeng Yang. 2006. An
adjacency model for sentence ordering in multi-
document summarization. In Proceedings of the
Third Asia conference on Information Retrieval
Technology (AIRS&apos;06), 313-322.
</reference>
<page confidence="0.999171">
91
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.422386">
<title confidence="0.999621">Learning to Order Natural Language Texts</title>
<author confidence="0.597929">Xiaojun</author>
<author confidence="0.597929">Jianguo</author>
<affiliation confidence="0.863383666666667">of Computer Science and Technology, The MOE Key Laboratory of tional Linguistics, Peking University, of Information Science and Technology, Beijing Normal University,</affiliation>
<email confidence="0.784263">tanjiwei8@gmail.com,{wanxiaojun,jgxiao}@pku.edu.cn</email>
<abstract confidence="0.999841411764706">Ordering texts is an important task for many NLP applications. Most previous works on summary sentence ordering rely on the contextual information (e.g. adjacent sentences) of each sentence in the source document. In this paper, we investigate a more challenging task of ordering a set of unordered sentences without any contextual information. We introduce a set of features to characterize the order and coherence of natural language texts, and use the learning to rank technique to determine the order of any two sentences. We also propose to use the genetic algorithm to determine the total order of all sentences. Evaluation results on a news corpus show the effectiveness of our proposed method.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Danushka Bollegala</author>
<author>Naoaki Okazaki</author>
<author>Mitsuru Ishizuka</author>
</authors>
<title>A machine learning approach to sentence ordering for multi-document summarization and its evaluation.</title>
<date>2005</date>
<booktitle>In Proceedings of the Second international joint conference on Natural Language Processing (IJCNLP &apos;05),</booktitle>
<pages>624--635</pages>
<contexts>
<context position="1720" citStr="Bollegala et al., 2005" startWordPosition="263" endWordPosition="266">ant task in many natural language processing (NLP) applications. It is typically applicable in the text generation field, both for concept-to-text generation and text-totext generation (Lapata, 2003), such as multiple document summarization (MDS), question answering and so on. However, ordering a set of sentences into a coherent text is still a hard and challenging problem for computers. Previous works on sentence ordering mainly focus on the MDS task (Barzilay et al., 2002; Okazaki et al., 2004; Nie et al., 2006; Ji and Pulman, 2006; Madnani et al., 2007; Zhang et al., 2010; He et al., 2006; Bollegala et al., 2005; Bollegala et al., 2010). In this task, each summary sentence is extracted from a source document. The timestamp of the source documents and the adjacent sentences in the source documents can be used as important clues for ordering summary sentences. In this study, we investigate a more challenging and more general task of ordering a set of unordered sentences (e.g. randomly shuffle the * Xiaojun Wan is the corresponding author. sentences in a text paragraph) without any contextual information. This task can be applied to almost all text generation applications without restriction. In order t</context>
<context position="5272" citStr="Bollegala et al., 2005" startWordPosition="846" endWordPosition="849">of two parts: defining a pairwise order relation and determining an overall order. Our study focuses on both the two parts by learning a better pairwise relation and proposing a better search strategy, as described respectively in next sections. 3.2 Pairwise Relation Learning The goal for pairwise relation learning is defining the strength function PREF for any sentence pair. In our method we define the function PREF by combining multiple features. Method: Traditionally, there are two main methods for defining a strength function: integrating features by a linear combination (He et al., 2006; Bollegala et al., 2005) or by a binary classifier (Bollegala et al., 2010). However, the binary classification method is very coarsegrained since it considers any pair of sentences either “positive” or “negative”. Instead we propose to use a better model of learning to rank to integrate multiple features. In this study, we use Ranking SVM implemented in the svmrank toolkit (Joachims, 2002; Joachims, 2006) as the ranking model. The examples to be ranked in our ranking model are sequential sentence pairs like u ; v. The feature values for a training example are generated by a few feature functions fi (u, v) , and we w</context>
</contexts>
<marker>Bollegala, Okazaki, Ishizuka, 2005</marker>
<rawString>Danushka Bollegala, Naoaki Okazaki, Mitsuru Ishizuka. 2005. A machine learning approach to sentence ordering for multi-document summarization and its evaluation. In Proceedings of the Second international joint conference on Natural Language Processing (IJCNLP &apos;05), 624-635.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Danushka Bollegala</author>
<author>Naoaki Okazaki</author>
<author>Mitsuru Ishizuka</author>
</authors>
<title>A bottom-up approach to sentence ordering for multi-document summarization.</title>
<date>2010</date>
<journal>Inf. Process. Manage.</journal>
<volume>46</volume>
<pages>89--109</pages>
<contexts>
<context position="1745" citStr="Bollegala et al., 2010" startWordPosition="267" endWordPosition="271"> language processing (NLP) applications. It is typically applicable in the text generation field, both for concept-to-text generation and text-totext generation (Lapata, 2003), such as multiple document summarization (MDS), question answering and so on. However, ordering a set of sentences into a coherent text is still a hard and challenging problem for computers. Previous works on sentence ordering mainly focus on the MDS task (Barzilay et al., 2002; Okazaki et al., 2004; Nie et al., 2006; Ji and Pulman, 2006; Madnani et al., 2007; Zhang et al., 2010; He et al., 2006; Bollegala et al., 2005; Bollegala et al., 2010). In this task, each summary sentence is extracted from a source document. The timestamp of the source documents and the adjacent sentences in the source documents can be used as important clues for ordering summary sentences. In this study, we investigate a more challenging and more general task of ordering a set of unordered sentences (e.g. randomly shuffle the * Xiaojun Wan is the corresponding author. sentences in a text paragraph) without any contextual information. This task can be applied to almost all text generation applications without restriction. In order to address this challengin</context>
<context position="5323" citStr="Bollegala et al., 2010" startWordPosition="855" endWordPosition="858">d determining an overall order. Our study focuses on both the two parts by learning a better pairwise relation and proposing a better search strategy, as described respectively in next sections. 3.2 Pairwise Relation Learning The goal for pairwise relation learning is defining the strength function PREF for any sentence pair. In our method we define the function PREF by combining multiple features. Method: Traditionally, there are two main methods for defining a strength function: integrating features by a linear combination (He et al., 2006; Bollegala et al., 2005) or by a binary classifier (Bollegala et al., 2010). However, the binary classification method is very coarsegrained since it considers any pair of sentences either “positive” or “negative”. Instead we propose to use a better model of learning to rank to integrate multiple features. In this study, we use Ranking SVM implemented in the svmrank toolkit (Joachims, 2002; Joachims, 2006) as the ranking model. The examples to be ranked in our ranking model are sequential sentence pairs like u ; v. The feature values for a training example are generated by a few feature functions fi (u, v) , and we will introduce the features later. We build the trai</context>
</contexts>
<marker>Bollegala, Okazaki, Ishizuka, 2010</marker>
<rawString>Danushka Bollegala, Naoaki Okazaki, and Mitsuru Ishizuka. 2010. A bottom-up approach to sentence ordering for multi-document summarization. Inf. Process. Manage. 46, 1 (January 2010), 89-109.</rawString>
</citation>
<citation valid="true">
<authors>
<author>John H Holland</author>
</authors>
<title>Adaptation in Natural and Artificial Systems: An Introductory Analysis with Applications to Biology, Control and Artificial Intelligence.</title>
<date>1992</date>
<publisher>MIT Press,</publisher>
<location>Cambridge, MA, USA.</location>
<contexts>
<context position="9412" citStr="Holland, 1992" startWordPosition="1704" endWordPosition="1705">), and we implement the model with four features of lemmatized noun, verb, adjective or adverb, and verb and noun related dependency. 3.3 Overall Order Determination Cohen et al. (1998) proved finding a permutation p to maximize AGREE(p,PREF) is NPcomplete. To solve this, they proposed a greedy algorithm for finding an approximately optimal order. Most later works adopted the greedy search strategy to determine the overall order. However, a greedy algorithm does not always lead to satisfactory results, as our experiment shows in Section 4.2. Therefore, we propose to use the genetic algorithm (Holland, 1992) as the search strategy, which can lead to better results. Genetic Algorithm: The genetic algorithm (GA) is an artificial intelligence algorithm for optimization and search problems. The key point of using GA is modeling the individual, fitness function and three operators of crossover, mutation and selection. Once a problem is modeled, the algorithm can be constructed conventionally. In our method we set a permutation p as an individual encoded by a numerical path, for example a permutation s2 r s1 r s3 is encoded as (2 1 3). Then the function AGREE(p,PREF) is just the fitness function. We ad</context>
</contexts>
<marker>Holland, 1992</marker>
<rawString>John H. Holland. 1992. Adaptation in Natural and Artificial Systems: An Introductory Analysis with Applications to Biology, Control and Artificial Intelligence. MIT Press, Cambridge, MA, USA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Lawrence Davis</author>
</authors>
<title>Applying adaptive algorithms to epistatic domains.</title>
<date>1985</date>
<journal>Aravind Joshi (Ed.),</journal>
<booktitle>In Proceedings of the 9th international joint conference on Artificial intelligence - Volume</booktitle>
<volume>1</volume>
<pages>162--164</pages>
<publisher>Morgan Kaufmann Publishers Inc.,</publisher>
<location>San Francisco, CA, USA,</location>
<contexts>
<context position="10086" citStr="Davis, 1985" startWordPosition="1815" endWordPosition="1816">etic Algorithm: The genetic algorithm (GA) is an artificial intelligence algorithm for optimization and search problems. The key point of using GA is modeling the individual, fitness function and three operators of crossover, mutation and selection. Once a problem is modeled, the algorithm can be constructed conventionally. In our method we set a permutation p as an individual encoded by a numerical path, for example a permutation s2 r s1 r s3 is encoded as (2 1 3). Then the function AGREE(p,PREF) is just the fitness function. We adopt the order-based crossover operator which is described in (Davis, 1985). The mutation operator is a random inversion of two sentences. For selection operator we take a tournament selection operator which randomly selects two individuals to choose the one with the greater fitness value AGREE(p,PREF) . 1 http://www.ark.cs.cmu.edu/ARKref/ After several generations of evolution, the individual with the greatest fitness value will be a close solution to the optimal result. 4 Experiments 4.1 Experiment Setup Data Set and Evaluation Metric: We conducted the experiments on the North American News Text Corpus2. We trained the model on 80 thousand paragraphs and tested wit</context>
</contexts>
<marker>Davis, 1985</marker>
<rawString>Lawrence Davis. 1985. Applying adaptive algorithms to epistatic domains. In Proceedings of the 9th international joint conference on Artificial intelligence - Volume 1 (IJCAI&apos;85), Aravind Joshi (Ed.), Vol. 1. Morgan Kaufmann Publishers Inc., San Francisco, CA, USA, 162-164.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mirella Lapata</author>
</authors>
<title>Probabilistic text structuring: experiments with sentence ordering.</title>
<date>2003</date>
<booktitle>InProceedings of the 41st Annual Meeting on Association for Computational Linguistics - Volume 1(ACL &apos;03), Vol. 1. Association for Computational Linguistics,</booktitle>
<pages>545--552</pages>
<location>Stroudsburg, PA, USA,</location>
<contexts>
<context position="1297" citStr="Lapata, 2003" startWordPosition="191" endWordPosition="192">l information. We introduce a set of features to characterize the order and coherence of natural language texts, and use the learning to rank technique to determine the order of any two sentences. We also propose to use the genetic algorithm to determine the total order of all sentences. Evaluation results on a news corpus show the effectiveness of our proposed method. 1 Introduction Ordering texts is an important task in many natural language processing (NLP) applications. It is typically applicable in the text generation field, both for concept-to-text generation and text-totext generation (Lapata, 2003), such as multiple document summarization (MDS), question answering and so on. However, ordering a set of sentences into a coherent text is still a hard and challenging problem for computers. Previous works on sentence ordering mainly focus on the MDS task (Barzilay et al., 2002; Okazaki et al., 2004; Nie et al., 2006; Ji and Pulman, 2006; Madnani et al., 2007; Zhang et al., 2010; He et al., 2006; Bollegala et al., 2005; Bollegala et al., 2010). In this task, each summary sentence is extracted from a source document. The timestamp of the source documents and the adjacent sentences in the sourc</context>
<context position="2883" citStr="Lapata (2003)" startWordPosition="459" endWordPosition="460">ation applications without restriction. In order to address this challenging task, we first introduce a few useful features to characterize the order and coherence of natural language texts, and then propose to use the learning to rank algorithm to determine the order of two sentences. Moreover, we propose to use the genetic algorithm to decide the overall text order. Evaluations are conducted on a news corpus, and the results show the prominence of our method. Each component technique or feature in our method has also been validated. 2 Related Work For works taking no use of source document, Lapata (2003) proposed a probabilistic model which learns constraints on sentence ordering from a corpus of texts. Experimental evaluation indicated the importance of several learned lexical and syntactic features. However, the model only works well when using single feature, but unfortunately, it becomes worse when multiple features are combined. Barzilay and Lee (2004) investigated the utility of domain-specific content model for representing topic and topic shifts and the model performed well on the five selected domains. Nahnsen (2009) employed features which were based on discourse entities, shallow s</context>
<context position="8799" citStr="Lapata, 2003" startWordPosition="1609" endWordPosition="1610">f part of u and the former part of v respectively, which are separated by the most centered comma (if exists) or word (if no comma exits); overlapj (u, v) denotes the number of mutual words of u and v , for j =1,2,3 representing lemmatized noun, verb and adjective or adverb respectively; |u |is the number of words of sentence u . The value will be set to 0 if the denominator is 0. For the coreference features we use the ARKref1 tool. It can output the coreference chains containing words which represent the same entity for two sequential sentences u &gt;- v. The probability model originates from (Lapata, 2003), and we implement the model with four features of lemmatized noun, verb, adjective or adverb, and verb and noun related dependency. 3.3 Overall Order Determination Cohen et al. (1998) proved finding a permutation p to maximize AGREE(p,PREF) is NPcomplete. To solve this, they proposed a greedy algorithm for finding an approximately optimal order. Most later works adopted the greedy search strategy to determine the overall order. However, a greedy algorithm does not always lead to satisfactory results, as our experiment shows in Section 4.2. Therefore, we propose to use the genetic algorithm (H</context>
<context position="13778" citStr="Lapata, 2003" startWordPosition="2405" endWordPosition="2407">s. Single Feature Effect: The effects of different types of features are shown in Table 3. Prob denotes Lapata’s probability model with different features. Feature Only Removed Similarity 0.0721 0.4614 Overlap 0.1284 0.4631 Coreference 0.0734 0.4704 Probnoun 0.3679 0.3932 Probverb 0.0615 0.4544 Probadjective&amp;adverb 0.2650 0.4258 Probdependency 0.2687 0.4892 All 0.5768 Table 3: Effects of different features. It can be seen in Table 3 that all these features contribute to the final result. The two features of noun probability and dependency probability play an important role as demonstrated in (Lapata, 2003). Other features also improve the final performance. A paragraph which is ordered entirely right by our method is shown in Figure 1. (1) Vanunu, 43, is serving an 18-year sentence for treason. (2) He was kidnapped by Israel&apos;s Mossad spy agency in Rome in 1986 after giving The Sunday Times of London photographs of the inside of the Dimona reactor. (3) From the photographs, experts determined that Israel had the world&apos;s sixth largest stockpile of nuclear weapons. (4) Israel has never confirmed or denied that it has a nuclear capability. Figure 1: A right ordered paragraph. Sentences which should</context>
</contexts>
<marker>Lapata, 2003</marker>
<rawString>Mirella Lapata. 2003. Probabilistic text structuring: experiments with sentence ordering. InProceedings of the 41st Annual Meeting on Association for Computational Linguistics - Volume 1(ACL &apos;03), Vol. 1. Association for Computational Linguistics, Stroudsburg, PA, USA, 545-552.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Naoaki Okazaki</author>
<author>Yutaka Matsuo</author>
<author>Mitsuru Ishizuka</author>
</authors>
<title>Improving chronological sentence ordering by precedence relation.</title>
<date>2004</date>
<journal>Article</journal>
<booktitle>In Proceedings of the 20th international conference on Computational Linguistics (COLING &apos;04). Association for Computational Linguistics,</booktitle>
<volume>750</volume>
<pages>.</pages>
<location>Stroudsburg, PA, USA,</location>
<contexts>
<context position="1598" citStr="Okazaki et al., 2004" startWordPosition="239" endWordPosition="242">ation results on a news corpus show the effectiveness of our proposed method. 1 Introduction Ordering texts is an important task in many natural language processing (NLP) applications. It is typically applicable in the text generation field, both for concept-to-text generation and text-totext generation (Lapata, 2003), such as multiple document summarization (MDS), question answering and so on. However, ordering a set of sentences into a coherent text is still a hard and challenging problem for computers. Previous works on sentence ordering mainly focus on the MDS task (Barzilay et al., 2002; Okazaki et al., 2004; Nie et al., 2006; Ji and Pulman, 2006; Madnani et al., 2007; Zhang et al., 2010; He et al., 2006; Bollegala et al., 2005; Bollegala et al., 2010). In this task, each summary sentence is extracted from a source document. The timestamp of the source documents and the adjacent sentences in the source documents can be used as important clues for ordering summary sentences. In this study, we investigate a more challenging and more general task of ordering a set of unordered sentences (e.g. randomly shuffle the * Xiaojun Wan is the corresponding author. sentences in a text paragraph) without any c</context>
</contexts>
<marker>Okazaki, Matsuo, Ishizuka, 2004</marker>
<rawString>Naoaki Okazaki, Yutaka Matsuo, and Mitsuru Ishizuka. 2004. Improving chronological sentence ordering by precedence relation. In Proceedings of the 20th international conference on Computational Linguistics (COLING &apos;04). Association for Computational Linguistics, Stroudsburg, PA, USA, , Article 750 .</rawString>
</citation>
<citation valid="false">
<authors>
<author>Nitin Madnani</author>
<author>Rebecca Passonneau</author>
<author>Necip Fazil Ayan</author>
<author>John M Conroy</author>
<author>Bonnie J Dorr</author>
<author>Judith L Klavans</author>
<author>Dianne P O&apos;Leary</author>
<author>Judith D Schlesinger</author>
</authors>
<title>Measuring variability in sentence ordering for news summarization.</title>
<date>2007</date>
<booktitle>In Proceedings of the Eleventh European Workshop on Natural Language Generation (ENLG &apos;07), Stephan Busemann (Ed.). Association for Computational Linguistics,</booktitle>
<pages>81--88</pages>
<location>Stroudsburg, PA, USA,</location>
<contexts>
<context position="1659" citStr="Madnani et al., 2007" startWordPosition="251" endWordPosition="254">proposed method. 1 Introduction Ordering texts is an important task in many natural language processing (NLP) applications. It is typically applicable in the text generation field, both for concept-to-text generation and text-totext generation (Lapata, 2003), such as multiple document summarization (MDS), question answering and so on. However, ordering a set of sentences into a coherent text is still a hard and challenging problem for computers. Previous works on sentence ordering mainly focus on the MDS task (Barzilay et al., 2002; Okazaki et al., 2004; Nie et al., 2006; Ji and Pulman, 2006; Madnani et al., 2007; Zhang et al., 2010; He et al., 2006; Bollegala et al., 2005; Bollegala et al., 2010). In this task, each summary sentence is extracted from a source document. The timestamp of the source documents and the adjacent sentences in the source documents can be used as important clues for ordering summary sentences. In this study, we investigate a more challenging and more general task of ordering a set of unordered sentences (e.g. randomly shuffle the * Xiaojun Wan is the corresponding author. sentences in a text paragraph) without any contextual information. This task can be applied to almost all</context>
</contexts>
<marker>Madnani, Passonneau, Ayan, Conroy, Dorr, Klavans, O&apos;Leary, Schlesinger, 2007</marker>
<rawString>Nitin Madnani, Rebecca Passonneau, Necip Fazil Ayan, John M. Conroy, Bonnie J. Dorr, Judith L. Klavans, Dianne P. O&apos;Leary, and Judith D. Schlesinger. 2007. Measuring variability in sentence ordering for news summarization. In Proceedings of the Eleventh European Workshop on Natural Language Generation (ENLG &apos;07), Stephan Busemann (Ed.). Association for Computational Linguistics, Stroudsburg, PA, USA, 81-88.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Paul D Ji</author>
<author>Stephen Pulman</author>
</authors>
<title>Sentence ordering with manifold-based classification in multidocument summarization.</title>
<date>2006</date>
<booktitle>In Proceedings of the 2006 Conference on Empirical Methods in Natural Language Processing (EMNLP &apos;06). Association for Computational Linguistics,</booktitle>
<pages>526--533</pages>
<location>Stroudsburg, PA, USA,</location>
<contexts>
<context position="1637" citStr="Ji and Pulman, 2006" startWordPosition="247" endWordPosition="250">effectiveness of our proposed method. 1 Introduction Ordering texts is an important task in many natural language processing (NLP) applications. It is typically applicable in the text generation field, both for concept-to-text generation and text-totext generation (Lapata, 2003), such as multiple document summarization (MDS), question answering and so on. However, ordering a set of sentences into a coherent text is still a hard and challenging problem for computers. Previous works on sentence ordering mainly focus on the MDS task (Barzilay et al., 2002; Okazaki et al., 2004; Nie et al., 2006; Ji and Pulman, 2006; Madnani et al., 2007; Zhang et al., 2010; He et al., 2006; Bollegala et al., 2005; Bollegala et al., 2010). In this task, each summary sentence is extracted from a source document. The timestamp of the source documents and the adjacent sentences in the source documents can be used as important clues for ordering summary sentences. In this study, we investigate a more challenging and more general task of ordering a set of unordered sentences (e.g. randomly shuffle the * Xiaojun Wan is the corresponding author. sentences in a text paragraph) without any contextual information. This task can be</context>
</contexts>
<marker>Ji, Pulman, 2006</marker>
<rawString>Paul D. Ji and Stephen Pulman. 2006. Sentence ordering with manifold-based classification in multidocument summarization. In Proceedings of the 2006 Conference on Empirical Methods in Natural Language Processing (EMNLP &apos;06). Association for Computational Linguistics, Stroudsburg, PA, USA, 526-533.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Regina Barzilay</author>
<author>Noemie Elhadad</author>
<author>Kathleen McKeown</author>
</authors>
<title>Inferring strategies for sentence ordering in multidocument news summarization.</title>
<date>2002</date>
<journal>Journal of Artificial Intelligence Research,</journal>
<volume>17</volume>
<pages>55</pages>
<contexts>
<context position="1576" citStr="Barzilay et al., 2002" startWordPosition="235" endWordPosition="238">of all sentences. Evaluation results on a news corpus show the effectiveness of our proposed method. 1 Introduction Ordering texts is an important task in many natural language processing (NLP) applications. It is typically applicable in the text generation field, both for concept-to-text generation and text-totext generation (Lapata, 2003), such as multiple document summarization (MDS), question answering and so on. However, ordering a set of sentences into a coherent text is still a hard and challenging problem for computers. Previous works on sentence ordering mainly focus on the MDS task (Barzilay et al., 2002; Okazaki et al., 2004; Nie et al., 2006; Ji and Pulman, 2006; Madnani et al., 2007; Zhang et al., 2010; He et al., 2006; Bollegala et al., 2005; Bollegala et al., 2010). In this task, each summary sentence is extracted from a source document. The timestamp of the source documents and the adjacent sentences in the source documents can be used as important clues for ordering summary sentences. In this study, we investigate a more challenging and more general task of ordering a set of unordered sentences (e.g. randomly shuffle the * Xiaojun Wan is the corresponding author. sentences in a text pa</context>
</contexts>
<marker>Barzilay, Elhadad, McKeown, 2002</marker>
<rawString>Regina Barzilay, Noemie Elhadad, and Kathleen McKeown. 2002. Inferring strategies for sentence ordering in multidocument news summarization. Journal of Artificial Intelligence Research, 17:35– 55.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Regina Barzilay</author>
<author>Lillian Lee</author>
</authors>
<title>Catching the drift: Probabilistic content models, with applications to generation and summarization.</title>
<date>2004</date>
<booktitle>In HLTNAACL2004: Proceedings of the Main Conference,</booktitle>
<pages>113--120</pages>
<contexts>
<context position="3243" citStr="Barzilay and Lee (2004)" startWordPosition="509" endWordPosition="512"> overall text order. Evaluations are conducted on a news corpus, and the results show the prominence of our method. Each component technique or feature in our method has also been validated. 2 Related Work For works taking no use of source document, Lapata (2003) proposed a probabilistic model which learns constraints on sentence ordering from a corpus of texts. Experimental evaluation indicated the importance of several learned lexical and syntactic features. However, the model only works well when using single feature, but unfortunately, it becomes worse when multiple features are combined. Barzilay and Lee (2004) investigated the utility of domain-specific content model for representing topic and topic shifts and the model performed well on the five selected domains. Nahnsen (2009) employed features which were based on discourse entities, shallow syntactic analysis, and temporal precedence relations retrieved from VerbOcean. However, the model does not perform well on datasets describing the consequences of events. 3 Our Proposed Method 3.1 Overview The task of text ordering can be modeled like (Cohen et al., 1998), as measuring the coherence of a text by summing the association strength of any senten</context>
</contexts>
<marker>Barzilay, Lee, 2004</marker>
<rawString>Regina Barzilay and Lillian Lee. 2004. Catching the drift: Probabilistic content models, with applications to generation and summarization. In HLTNAACL2004: Proceedings of the Main Conference, pages 113–120.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Renxian Zhang</author>
<author>Wenjie Li</author>
<author>Qin Lu</author>
</authors>
<title>Sentence ordering with event-enriched semantics and two-layered clustering for multi-document news summarization.</title>
<date>2010</date>
<booktitle>In Proceedings of the 23rd International Conference on Computational Linguistics: Posters (COLING &apos;10). Association for Computational Linguistics,</booktitle>
<pages>1489--1497</pages>
<location>Stroudsburg, PA, USA,</location>
<contexts>
<context position="1679" citStr="Zhang et al., 2010" startWordPosition="255" endWordPosition="258">roduction Ordering texts is an important task in many natural language processing (NLP) applications. It is typically applicable in the text generation field, both for concept-to-text generation and text-totext generation (Lapata, 2003), such as multiple document summarization (MDS), question answering and so on. However, ordering a set of sentences into a coherent text is still a hard and challenging problem for computers. Previous works on sentence ordering mainly focus on the MDS task (Barzilay et al., 2002; Okazaki et al., 2004; Nie et al., 2006; Ji and Pulman, 2006; Madnani et al., 2007; Zhang et al., 2010; He et al., 2006; Bollegala et al., 2005; Bollegala et al., 2010). In this task, each summary sentence is extracted from a source document. The timestamp of the source documents and the adjacent sentences in the source documents can be used as important clues for ordering summary sentences. In this study, we investigate a more challenging and more general task of ordering a set of unordered sentences (e.g. randomly shuffle the * Xiaojun Wan is the corresponding author. sentences in a text paragraph) without any contextual information. This task can be applied to almost all text generation app</context>
</contexts>
<marker>Zhang, Li, Lu, 2010</marker>
<rawString>Renxian Zhang, Wenjie Li, and Qin Lu. 2010. Sentence ordering with event-enriched semantics and two-layered clustering for multi-document news summarization. In Proceedings of the 23rd International Conference on Computational Linguistics: Posters (COLING &apos;10). Association for Computational Linguistics, Stroudsburg, PA, USA, 1489-1497.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Thade Nahnsen</author>
</authors>
<title>Domain-independent shallow sentence ordering.</title>
<date>2009</date>
<booktitle>In Proceedings of Human Language Technologies: The 2009 Annual Conference of the North American Chapter of the Association for Computational Linguistics, Companion Volume: Student Research Workshop and Doctoral Consortium (SRWS &apos;09). Association for Computational Linguistics,</booktitle>
<pages>78--83</pages>
<location>Stroudsburg, PA, USA,</location>
<contexts>
<context position="3415" citStr="Nahnsen (2009)" startWordPosition="538" endWordPosition="539">alidated. 2 Related Work For works taking no use of source document, Lapata (2003) proposed a probabilistic model which learns constraints on sentence ordering from a corpus of texts. Experimental evaluation indicated the importance of several learned lexical and syntactic features. However, the model only works well when using single feature, but unfortunately, it becomes worse when multiple features are combined. Barzilay and Lee (2004) investigated the utility of domain-specific content model for representing topic and topic shifts and the model performed well on the five selected domains. Nahnsen (2009) employed features which were based on discourse entities, shallow syntactic analysis, and temporal precedence relations retrieved from VerbOcean. However, the model does not perform well on datasets describing the consequences of events. 3 Our Proposed Method 3.1 Overview The task of text ordering can be modeled like (Cohen et al., 1998), as measuring the coherence of a text by summing the association strength of any sentence pairs. Then the objective of a text ordering model is to find a permutation which can maximize the summation. 87 Proceedings of the 51st Annual Meeting of the Associatio</context>
</contexts>
<marker>Nahnsen, 2009</marker>
<rawString>Thade Nahnsen. 2009. Domain-independent shallow sentence ordering. In Proceedings of Human Language Technologies: The 2009 Annual Conference of the North American Chapter of the Association for Computational Linguistics, Companion Volume: Student Research Workshop and Doctoral Consortium (SRWS &apos;09). Association for Computational Linguistics, Stroudsburg, PA, USA, 78-83.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Thorsten Joachims</author>
</authors>
<title>Optimizing search engines using click through data.</title>
<date>2002</date>
<booktitle>In Proceedings of the eighth ACM SIGKDD international conference on Knowledge discovery and data mining (KDD &apos;02).</booktitle>
<pages>133--142</pages>
<publisher>ACM,</publisher>
<location>New York, NY, USA,</location>
<contexts>
<context position="5640" citStr="Joachims, 2002" startWordPosition="909" endWordPosition="910">. In our method we define the function PREF by combining multiple features. Method: Traditionally, there are two main methods for defining a strength function: integrating features by a linear combination (He et al., 2006; Bollegala et al., 2005) or by a binary classifier (Bollegala et al., 2010). However, the binary classification method is very coarsegrained since it considers any pair of sentences either “positive” or “negative”. Instead we propose to use a better model of learning to rank to integrate multiple features. In this study, we use Ranking SVM implemented in the svmrank toolkit (Joachims, 2002; Joachims, 2006) as the ranking model. The examples to be ranked in our ranking model are sequential sentence pairs like u ; v. The feature values for a training example are generated by a few feature functions fi (u, v) , and we will introduce the features later. We build the training examples for svmrank as follows: For a training query, which is a paragraph with n sequential sentences as s1 ; s2 ; ... ; sn , we can get An2 = n(n −1) training examples. For pairs like sa ; sa+k (k &gt; 0) the target rank values are set to n − k, which means that the longer the distance between the two sentences</context>
</contexts>
<marker>Joachims, 2002</marker>
<rawString>Thorsten Joachims. 2002. Optimizing search engines using click through data. In Proceedings of the eighth ACM SIGKDD international conference on Knowledge discovery and data mining (KDD &apos;02). ACM, New York, NY, USA, 133-142.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Thorsten Joachims</author>
</authors>
<title>Training linear SVMs in linear time.</title>
<date>2006</date>
<booktitle>In Proceedings of the 12th ACM SIGKDD international conference on Knowledge discovery and data mining (KDD &apos;06).</booktitle>
<pages>217--226</pages>
<publisher>ACM,</publisher>
<location>New York, NY, USA,</location>
<contexts>
<context position="5657" citStr="Joachims, 2006" startWordPosition="911" endWordPosition="912">we define the function PREF by combining multiple features. Method: Traditionally, there are two main methods for defining a strength function: integrating features by a linear combination (He et al., 2006; Bollegala et al., 2005) or by a binary classifier (Bollegala et al., 2010). However, the binary classification method is very coarsegrained since it considers any pair of sentences either “positive” or “negative”. Instead we propose to use a better model of learning to rank to integrate multiple features. In this study, we use Ranking SVM implemented in the svmrank toolkit (Joachims, 2002; Joachims, 2006) as the ranking model. The examples to be ranked in our ranking model are sequential sentence pairs like u ; v. The feature values for a training example are generated by a few feature functions fi (u, v) , and we will introduce the features later. We build the training examples for svmrank as follows: For a training query, which is a paragraph with n sequential sentences as s1 ; s2 ; ... ; sn , we can get An2 = n(n −1) training examples. For pairs like sa ; sa+k (k &gt; 0) the target rank values are set to n − k, which means that the longer the distance between the two sentences is, the smaller </context>
</contexts>
<marker>Joachims, 2006</marker>
<rawString>Thorsten Joachims. 2006. Training linear SVMs in linear time. In Proceedings of the 12th ACM SIGKDD international conference on Knowledge discovery and data mining (KDD &apos;06). ACM, New York, NY, USA, 217-226.</rawString>
</citation>
<citation valid="true">
<authors>
<author>William W Cohen</author>
<author>Robert E Schapire</author>
<author>Yoram Singer</author>
</authors>
<title>Learning to order things.</title>
<date>1998</date>
<booktitle>InProceedings of the 1997 conference on Advances in neural information processing systems 10(NIPS &apos;97),</booktitle>
<pages>451--457</pages>
<publisher>MIT Press,</publisher>
<location>Cambridge, MA, USA,</location>
<contexts>
<context position="3755" citStr="Cohen et al., 1998" startWordPosition="591" endWordPosition="594">e feature, but unfortunately, it becomes worse when multiple features are combined. Barzilay and Lee (2004) investigated the utility of domain-specific content model for representing topic and topic shifts and the model performed well on the five selected domains. Nahnsen (2009) employed features which were based on discourse entities, shallow syntactic analysis, and temporal precedence relations retrieved from VerbOcean. However, the model does not perform well on datasets describing the consequences of events. 3 Our Proposed Method 3.1 Overview The task of text ordering can be modeled like (Cohen et al., 1998), as measuring the coherence of a text by summing the association strength of any sentence pairs. Then the objective of a text ordering model is to find a permutation which can maximize the summation. 87 Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics, pages 87–91, Sofia, Bulgaria, August 4-9 2013. c�2013 Association for Computational Linguistics Formally, we define an association strength function PREF(u, v) ∈ R to measure how strong it is that sentence u should be arranged before sentence v (denoted as u ;v). We then define function AGREE(ρ,PREF) as: A</context>
<context position="8983" citStr="Cohen et al. (1998)" startWordPosition="1636" endWordPosition="1639">utual words of u and v , for j =1,2,3 representing lemmatized noun, verb and adjective or adverb respectively; |u |is the number of words of sentence u . The value will be set to 0 if the denominator is 0. For the coreference features we use the ARKref1 tool. It can output the coreference chains containing words which represent the same entity for two sequential sentences u &gt;- v. The probability model originates from (Lapata, 2003), and we implement the model with four features of lemmatized noun, verb, adjective or adverb, and verb and noun related dependency. 3.3 Overall Order Determination Cohen et al. (1998) proved finding a permutation p to maximize AGREE(p,PREF) is NPcomplete. To solve this, they proposed a greedy algorithm for finding an approximately optimal order. Most later works adopted the greedy search strategy to determine the overall order. However, a greedy algorithm does not always lead to satisfactory results, as our experiment shows in Section 4.2. Therefore, we propose to use the genetic algorithm (Holland, 1992) as the search strategy, which can lead to better results. Genetic Algorithm: The genetic algorithm (GA) is an artificial intelligence algorithm for optimization and searc</context>
</contexts>
<marker>Cohen, Schapire, Singer, 1998</marker>
<rawString>William W. Cohen, Robert E. Schapire, and Yoram Singer. 1998. Learning to order things. InProceedings of the 1997 conference on Advances in neural information processing systems 10(NIPS &apos;97), Michael I. Jordan, Michael J. Kearns, and Sara A. Solla (Eds.). MIT Press, Cambridge, MA, USA, 451-457.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yanxiang He</author>
<author>Dexi Liu</author>
<author>Hua Yang</author>
<author>Donghong Ji</author>
<author>Chong Teng</author>
<author>Wenqing Qi</author>
</authors>
<title>A hybrid sentence ordering strategy in multi-document summarization.</title>
<date>2006</date>
<booktitle>In Proceedings of the 7th international conference on Web Information Systems (WISE&apos;06), Karl Aberer, Zhiyong Peng, Elke</booktitle>
<pages>339--349</pages>
<publisher>SpringerVerlag,</publisher>
<location>Berlin, Heidelberg,</location>
<contexts>
<context position="1696" citStr="He et al., 2006" startWordPosition="259" endWordPosition="262">exts is an important task in many natural language processing (NLP) applications. It is typically applicable in the text generation field, both for concept-to-text generation and text-totext generation (Lapata, 2003), such as multiple document summarization (MDS), question answering and so on. However, ordering a set of sentences into a coherent text is still a hard and challenging problem for computers. Previous works on sentence ordering mainly focus on the MDS task (Barzilay et al., 2002; Okazaki et al., 2004; Nie et al., 2006; Ji and Pulman, 2006; Madnani et al., 2007; Zhang et al., 2010; He et al., 2006; Bollegala et al., 2005; Bollegala et al., 2010). In this task, each summary sentence is extracted from a source document. The timestamp of the source documents and the adjacent sentences in the source documents can be used as important clues for ordering summary sentences. In this study, we investigate a more challenging and more general task of ordering a set of unordered sentences (e.g. randomly shuffle the * Xiaojun Wan is the corresponding author. sentences in a text paragraph) without any contextual information. This task can be applied to almost all text generation applications without</context>
<context position="5247" citStr="He et al., 2006" startWordPosition="842" endWordPosition="845">ework is made up of two parts: defining a pairwise order relation and determining an overall order. Our study focuses on both the two parts by learning a better pairwise relation and proposing a better search strategy, as described respectively in next sections. 3.2 Pairwise Relation Learning The goal for pairwise relation learning is defining the strength function PREF for any sentence pair. In our method we define the function PREF by combining multiple features. Method: Traditionally, there are two main methods for defining a strength function: integrating features by a linear combination (He et al., 2006; Bollegala et al., 2005) or by a binary classifier (Bollegala et al., 2010). However, the binary classification method is very coarsegrained since it considers any pair of sentences either “positive” or “negative”. Instead we propose to use a better model of learning to rank to integrate multiple features. In this study, we use Ranking SVM implemented in the svmrank toolkit (Joachims, 2002; Joachims, 2006) as the ranking model. The examples to be ranked in our ranking model are sequential sentence pairs like u ; v. The feature values for a training example are generated by a few feature funct</context>
</contexts>
<marker>He, Liu, Yang, Ji, Teng, Qi, 2006</marker>
<rawString>Yanxiang He, Dexi Liu, Hua Yang, Donghong Ji, Chong Teng, and Wenqing Qi. 2006. A hybrid sentence ordering strategy in multi-document summarization. In Proceedings of the 7th international conference on Web Information Systems (WISE&apos;06), Karl Aberer, Zhiyong Peng, Elke A. Rundensteiner, Yanchun Zhang, and Xuhui Li (Eds.). SpringerVerlag, Berlin, Heidelberg, 339-349.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yu Nie</author>
<author>Donghong Ji</author>
<author>Lingpeng Yang</author>
</authors>
<title>An adjacency model for sentence ordering in multidocument summarization.</title>
<date>2006</date>
<booktitle>In Proceedings of the Third Asia conference on Information Retrieval Technology (AIRS&apos;06),</booktitle>
<pages>313--322</pages>
<contexts>
<context position="1616" citStr="Nie et al., 2006" startWordPosition="243" endWordPosition="246">s corpus show the effectiveness of our proposed method. 1 Introduction Ordering texts is an important task in many natural language processing (NLP) applications. It is typically applicable in the text generation field, both for concept-to-text generation and text-totext generation (Lapata, 2003), such as multiple document summarization (MDS), question answering and so on. However, ordering a set of sentences into a coherent text is still a hard and challenging problem for computers. Previous works on sentence ordering mainly focus on the MDS task (Barzilay et al., 2002; Okazaki et al., 2004; Nie et al., 2006; Ji and Pulman, 2006; Madnani et al., 2007; Zhang et al., 2010; He et al., 2006; Bollegala et al., 2005; Bollegala et al., 2010). In this task, each summary sentence is extracted from a source document. The timestamp of the source documents and the adjacent sentences in the source documents can be used as important clues for ordering summary sentences. In this study, we investigate a more challenging and more general task of ordering a set of unordered sentences (e.g. randomly shuffle the * Xiaojun Wan is the corresponding author. sentences in a text paragraph) without any contextual informat</context>
</contexts>
<marker>Nie, Ji, Yang, 2006</marker>
<rawString>Yu Nie, Donghong Ji, and Lingpeng Yang. 2006. An adjacency model for sentence ordering in multidocument summarization. In Proceedings of the Third Asia conference on Information Retrieval Technology (AIRS&apos;06), 313-322.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>