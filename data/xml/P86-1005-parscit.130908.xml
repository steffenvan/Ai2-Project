<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000001">
<title confidence="0.994712">
Semantic Acquisition In TEL!: A Transportable,
User-Customized Natural Language Processor
</title>
<note confidence="0.5893745">
Bruce W. Ballard
Douglas E. Stumberger
</note>
<address confidence="0.608524666666667">
AT&amp;T Bell Laboratories
600 Mountain Avenue
Murray Hill, NJ 07974
</address>
<sectionHeader confidence="0.810793" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999841833333333">
We discuss ways of allowing the users of a natural
language processor to define, examine, and modify the
definitions of any domain-specific words or phrases
known to the system. An implementation of this work
forms a critical portion of the knowledge acquisition
component of our Transportable English-Language
Interface (TELI), which answers English questions
about tabular (first normal-form) data files and runs
on a Symbolics Lisp Machine. However, our
techniques enable the design of customization modules
that are largely independent of the syntactic and
retrieval components of the specific system they
supply information to. In addition to its obvious
practical value, this area of research is important
because it requires careful attention to the formalisms
used by a natural language system and to the
interactions among the modules based on those
formalisms.
</bodyText>
<sectionHeader confidence="0.992144" genericHeader="introduction">
1. Introduction
</sectionHeader>
<bodyText confidence="0.999757436363636">
In constructing the Transportable English-
Language Interface system (TELI). we have sought to
respond to problems of both an applied and a
scientific nature. Concerning the applied side of
computational linguistics, we seek to redress the fact
that many natural language prototypes. despite their
sophistication and even their robustness, have fallen
into disuse because of failures (1) to make known to
users exactly what inputs are allowed (e.g. what words
and phrases are defined) and (2) to provide
capabilities that meet the precise needs of a given user
or group of users (e.g. appropriate vocabulary, syntax,
and semantics). Since experience has shown that
neither users nor system designers can predict in
advance all the words. phrases. and associated
meanings that will arise in accessing a given database
(cf. Tennant. 1979). we have sought to make TELI
&amp;quot;transportable.&apos; in an extreme sense, where
customizations may be performed (1) by end users, as
opposed to the system designers. and (2) at any time
during the processing of English sentences. rather
than requiring a complete customization before
English processing may occur.
In addition to the potential practical benefits of
a user-customized interface, we feel that well-
conceived transportability projects can make useful
scientific contributions to computational linguistics
since single-domain systems and, to a lesser extent,
systems adapted over weeks or months by their
designers, afford opportunities to circumvent, rather
than squarely address, important issues concerning (a)
the precise nature of the formalisms the system is
designed around, and (b) the interactions among
system modules. Although customization efforts offer
no guarantee against ad-hoc design or sloppy
implementation. problems of the type mentioned
above are less likely to go unnoticed when dealing
with a system whose domain-specific information is
supplied at run-time, especially when that information
is being provided by the actual users of the system.
By way of overview, we note that the TELI
system derives from previous work on the LDC
project. as documented in Ballard (1982), Ballard
(1984). Ballard, Lusth and Tinkham (1984), and
Ballard and Tinkham (1984). The initial prototype of
TELL, which runs on a Symbolics Lisp Machine, is
designed to answer English questions about
information stored in one or more tables. (i.e. first-
normal-form relational database). A sample view of
the display screen during a session with TELL which
may give the flavor of how the system operates, is
shown in Figure 1. Information on some aspects of
knowledge acquisition not discussed in this paper.
particularly with regard to syntactic case frames, can
be found in Ballard (1986).
</bodyText>
<subsectionHeader confidence="0.530107">
2. Types of Modifiers Available in TEL!
</subsectionHeader>
<bodyText confidence="0.9989185">
The syntactic and semantic models adopted for
TELI are intended to provide a unified treatment of a
broad and extendible class of word and phrase types.
By providing for an &amp;quot;extendible&amp;quot; class of constructs.
we make the knowledge acquisition module of TELL
independent of the natural language portion of the
system. whose earlier version has been described in
Ballard and Tinkham (1984) and Ballard. Lusth. and
</bodyText>
<page confidence="0.988768">
20
</page>
<bodyText confidence="0.993720268292683">
Tinkham (1984). In the remainder of this paper. the
reader should bear in mind that the acquisition
modules of TELI, including the menus they generate.
are driven by extensible data structures that convey
the linguistic coverage of the underlying natural
language processor (NLP) for which information is
being acquired. For example, incorporating adjective
phrases into the system involved adding 12 lines of
Lisp-like data specifications. This brevity is largely
due to the use of case frames that embody dynamically
alterable selectional restrictions (Ballard, 1986).
As an initial feeling for the coverage of the
NLP for which information is currently acquired.
TELI provides semantics for the word categories
Adjective
e.g. an expensive restaurant
Noun Modifier
e.g. a graduate student
Noun
e.g. a pub
and the phrase types
Adjective Phrase
e.g. employees responsible for the planning projects
Noun-Modifier Phrase
e.g. the speech researchers
Prepositional Phrase
e.g. the trails on the Franconia-Region map
Verb Phrase
e.g. employees that report to Brachman
Functional Noun Phrase
e.g. the size of department 11387,
the colleagues of Litman
In addition to these user-defined modifier types, the
system currently provides for negation, comparative
and superlative forms of adjectives, possessives, and
ordinals. Among the grammatical features supported
are passives for verbs, reduced relatives for
prepositional and adjective phrases. fronting of verb
phrase complements. and other minor features. One
important area for expansion involves quantifiers,
both logical (e.g. &amp;quot;all&amp;quot;) and numerical (e.g. &amp;quot;at least 3&amp;quot;).
</bodyText>
<sectionHeader confidence="0.592691" genericHeader="method">
3. Principles Behind Semantic Acquisition
</sectionHeader>
<bodyText confidence="0.999680272727273">
As noted above, our goal is to devise techniques
that enable end users of a natural language processor
to furnish all domain-specific information to by the
system. This information includes (1) the vocabulary
needed for the data at hand; (2) various types of
selectional restrictions that define acceptable phrase
attachments; and most critically (3) the definitions of
words and phrases. With this in mind, the primary
criteria which the semantic acquisition component of
TELI has been designed around are as follows.
To allow users to define, examine or modify domain-
specific information at any time. This derives from our
beliefs that the needs of a user or group of users
cannot all be predicted in advance, and will probably
change once the system has begun operation.
To enable users to impart new concepts to the system.
We provide more than just synonym and paraphrase
capabilities and, in fact, definitions may be arbitrarily
complex, by being defined either (a) in terms of other
definitions, which may be defined upon other
definitions, or (b) as the conjuction of an arbitrary
number of constraints.
</bodyText>
<figure confidence="0.797676135135135">
English Input:
which trails that aren&apos;t long lead to a mountain on Franconia ridge
Internal Representation:
(TRAIL (VERBINFO (TRAIL LEAD NIL NIL TO MOUNTAIN)
(SUBJ ?)
(ARG (MOUNTAIN ((WANT NIL)
(PREPINFO (MOUNTAIN ON TRAIL)
(SUBJ ?)
(ARG (TRAIL (= FRANCONIA-RIDGE)))))))
(NOT (ADJ LONG)))
Algebra Query:
(SELECT trails(trail length-km)
(and (&lt; length-km 6)
(= trail (SELECT
(TJOIN trails(trail) = mtn-trails(trail))(trail)
(= name (SELECT
(TJOIN mountains(name) = mtn-trails(name))(name)
(= trail &apos;franconia-ridge)))))))
(TRAILS)
- TRAIL - LENGTH-KM
OLD-BRIDLE-PATH 4.1
LIBERTY-SPRING 4.7
Answer:
What&apos;s Your Pleasure?
Answer a Que.5tjon
Edit. the Last Input
Print Parse Tree
Run Pieces of the NLP
Exit,
Begin a Customization
Vocabulary
Synta&gt;.:-
Semantics
General Into
Clear Screen
Edit Global Flags
Save/Retrieve Session
</figure>
<figureCaption confidence="0.999668">
Figure 1: Sample Display Screen; Top-Level Menu of TEL!
</figureCaption>
<page confidence="0.99801">
21
</page>
<bodyText confidence="0.999076878787879">
To provide definition capabilities independent of
modifier type. In our system, adjectives, nouns,
prepositional phrases. verb phrases. and so forth are
all defined in precisely the same way. This is achieved
in part by treating all modifiers as n-place predicates.
To allow definitions to be given at various conceptual
levels. Users are able to specify meanings (a) in
English; (b) in terms of the meanings of previously
defined words or phrases; (c) by reference to
&amp;quot;conceptual&amp;quot; relationships. which have been abstracted
to a level above that of the physical data files; or (d)
in terms of database columns. We strive to minimize
the need for low-level database references, since this
helps (1) to avoid tedious and redundant references,
and (2) to assure that most of our techniques will be
applicable beyond the current conventional database
setting.
To provide alternate modalities of specification. For
example, the menu scheme described in Section 7.2
offers the user more assistance in making definitions,
but is less powerful, than the alternative English and
English-like methods described in Section 7.3. We
prefer to let users decide when each modality is
appropriate, rather than force a compromise among
simplicity, reliability, and power.
To enable the system to provide help or guidance to the
ctistomizer. When defining a modifier, users may view
all current modifiers of. or functions associated with.
the object type(s) in question. Many other
opportunities exist for co-operation on the part of the
system. To avoid unnecessary limitations, however,
users are generally able to override any hints made by
the system.
</bodyText>
<sectionHeader confidence="0.520788" genericHeader="method">
4. Semantic Processing in TELL
</sectionHeader>
<bodyText confidence="0.9999585">
The semantic model developed for TELL, in
which definitions are acquired from users, assumes
that (1) modifier meanings will be purely extensional,
and can thus be treated as n-place predicates, and (2)
semantic analysis will be almost entirely
compositional. Concerning the latter assumption, we
note that (a) some important disambiguations,
including problems of word sense, will have been
made during parsing by reference to selectional
restrictions (Ballard and Tinkham, 1984), and (b)
minimal re-ordering does occur in converting parse
trees into internal representations.
</bodyText>
<subsectionHeader confidence="0.99996">
4.1 Types of Semantics
</subsectionHeader>
<bodyText confidence="0.987706428571429">
All user-defined semantics, however acquired,
are stored in a global Lisp structure indexed by the
word or phrase being defined. Single-word modifiers
are indexed by the word being defined, its part of
speech, and the entity it modifies; phrasal modifiers
are indexed by the phrase type and the associated case
frame. For example, the internal references
</bodyText>
<equation confidence="0.904585">
(new adj room)
(prep-ph (restaurant in county))
</equation>
<bodyText confidence="0.999983571428571">
respectively index the definitions of &amp;quot;new&amp;quot;, when used
as an adjective modifier of rooms, and &amp;quot;in&amp;quot;, as it
relates restaurants to counties. As suggested by this
indexing scheme, word meanings arise only in the
context of their occurrence, never in isolation. Thus,
&amp;quot;new room&amp;quot; and &amp;quot;restaurant in county&amp;quot; receive
definitions, not &amp;quot;new&amp;quot; or &amp;quot;in&amp;quot;. This decision lends
generality to the definitional scheme, and any
additional effort thereby needed to make multiple
definitions is minimized by the provisions for
borrowed meanings, as described in Section 7.4.
Although our representation strategies allow for
definitions that involve relatively elaborate traversals
of the physical data files. TELI does not presently
provide for arithmetic computations. Thus, the input
&amp;quot;Which restaurants are within 3 blocks of China
Gardens?&amp;quot; requires a 2-place &amp;quot;distance&amp;quot; function and,
unless the underlying data files provide distances
between restaurants (there are N-squared such
distances to account for). the necessary semantics
cannot be supplied.
</bodyText>
<subsectionHeader confidence="0.998099">
4.2 Internal Representations
</subsectionHeader>
<bodyText confidence="0.995054111111111">
As an example of the &amp;quot;internal representation&amp;quot;
(IR) of an input, which results from a recursive
traversal of a completed parse tree, and which
illustrates preparations for compositional analysis, the
(artificially complex) input
&amp;quot;Which Mexican restaurants in the largest city other
than New Providence that are not expensive are
open for lunch?&amp;quot;
will have [roughly] the internal representation
</bodyText>
<equation confidence="0.986212181818182">
(restaurant (not (adj expensive))
(nounmod-ph (food restaurant)
(nounmod (food (= Mexican)))
(head ?))
(prep-ph (restaurant in city)
(subj ?)
(arg (city (super large)
New-Providence))))
(adj-ph (restaurant open for meal)
(subj ?)
(arg (meal (= lunch)))))
</equation>
<bodyText confidence="0.999745666666667">
This top-level interpretation of the input instructs the
system to find all restaurants that satisfy (a) the
negation of the 1-place predicate associated with
&amp;quot;expensive&amp;quot;, and (b) the three 2-place predicates
associated with the noun-noun, prepositional. and
adjective phrases. Note that modifiers associated with
</bodyText>
<page confidence="0.976908">
22
</page>
<bodyText confidence="0.9834844">
phrasal modifiers are referenced by their case frame,
e.g. &amp;quot;restaurant in city&amp;quot;. Within the scope of these
references, case labels (e.g. &amp;quot;subj&amp;quot; and &amp;quot;arg&amp;quot;) indicate
which slots have been instantiated and which slot has
been relativized. the latter denoted by &amp;quot;r. The list of
slot names associated with each phrase type is stored
globally. In most instances, the argument of a case
slot can be an arbitrary IR structure, in keeping with
the recursive nature of the English inputs being
recognized.
</bodyText>
<figureCaption confidence="0.97829">
Since IR structures are built around the word
and phrase types of the English being dealt with, and
since the meanings of words and phrases are stored
globally. IR structures should not be regarded as a
&amp;quot;knowledge representation&amp;quot; in the sense of KL-ONE.
logical form, and so forth. Systems similar in goals to
TELI but which revolve around logical form include
TEAM (Grosz. 1983: Grosz, Appelt. Martin, and
Pereira 1985), IRUS (Bates and Bobrow. 1983; Bates,
Moser, and Stallard 1984). and TQA (Plath, 1976;
Damerau. 1985). One system similar to TELI in
building intermediate structures that contain
references to language-specific concepts is
DATALOG (Hafner and Godden. 1985).
</figureCaption>
<bodyText confidence="0.936639533333333">
5. The Initial Phase of Customization
When a user asks TELI to begin learning about
a new domain, the system spends from five to thirty
minutes, depending on the complexity of the
application, obtaining basic information about each
table in the the database (see Figure 2). Users are
first asked to give the key column of the table. This
information is used primarily to guide the system in
inferring the semantics of certain noun-noun and &amp;quot;of&amp;quot;-
based patterns. Next, users are asked which columns
contain entity values as opposed to property values.
Typical properties are &amp;quot;size&amp;quot;, &amp;quot;color&amp;quot;, and &amp;quot;length&amp;quot;,
which differ from entities in that (a) their values do
not appear as an argument to arbitrary verbs and
prepositions (e.g. other than &amp;quot;have&amp;quot;, &amp;quot;with&amp;quot;, etc.) and
(b) they will not themselves have properties associated
with them. Finally, users are asked to specify the type
of value each column contains. This information
allows subsequent references to concepts (e.g. &amp;quot;color&amp;quot;)
rather than physical column names. It also aids the
system in forming subsequent suggestions to the user
(e.g. defaults that can be overridden).
Having obtained the information indicated
above, the system constructs definitions that allow
simple questions to be answered, such as
&amp;quot;What is Sally&apos;s social security number?&amp;quot;
&amp;quot;What is the age of John&amp;quot;
Along with information freely volunteered by the
user, these definitions can be subsequently examined
or changed at the user&apos;s request.
</bodyText>
<table confidence="0.995352842105263">
STUDENT-INFO
- STUDENT - SSN CLASS ROUTS
BILL 123-45-6789 1 BALLARD
DOUG 111-22-3333 3 LITMAN
FRED 321-54-9876 3 MARCUS
JOHN 555-33-1234 2 JONES
SALLY 314-15-9265 4 BRACHMAN
SUE 987-65-4321 3 BACHENKO
TERESA 333-22-4444 G BORGIDR
Which is the &amp;quot;key&amp;quot; column of STUDENT-INFO?
STUDENT (BILL, DOUG, ...)
SSN (111-22-3333, 123-15-6789, ...)
CLASS (1, 2, ...)
ANIS (BACHENKO„ BALLARD., ...)
Columns of STUDENT-INFO Entity Property
STUDENT (BILL, ...)
SSN (111-22-3333, ...)
CLASS (1, ...)
ADVIS (BACHENKO, ...)
</table>
<figure confidence="0.8373074">
Return 0
Entity Type for STUDENT (BILL. DOUG. ...)
student
Entity Type for ABUTS (BRCHENKO. BALLARD ...)
I nstructor.
</figure>
<figureCaption confidence="0.996572">
Figure 2: Initial Acquisitions
</figureCaption>
<bodyText confidence="0.798885428571429">
Based upon the answ ers to the questions
described above, a small number of follow-up
questions. mostly unrelated to the subject of this
paper. will be asked. For example. the system will
propose its best guess as to the morphological variants
of nouns, verbs, and other words for the user to
confirm or correct.
</bodyText>
<sectionHeader confidence="0.981461" genericHeader="method">
6. Intermediate Customizations
</sectionHeader>
<bodyText confidence="0.999646684210526">
Having learned about each physical relation.
TELI asks for information which, though not needed
immediately, is either (a) more simply obtained at the
outset, in a context relevant to its semantics, than at a
later, arbitrary point, or (b) acquirable collectively.
thus preventing several subequent acquisitions.
Unlike the initial acquisitions described in Section 5,
intermediate customizations could be excised from the
system without any loss in processing ability. We now
summarize three forms of intermediate
customizations, the last of which may be requested by
the user at any time. Allowing users to ask for the
other forms as well would be a simple matter.
First, the system will ask which columns contain
values that either correspond to or are themselves
English modifiers. In Figure 2-a, the values &amp;quot;1&amp;quot;
through &amp;quot;G&amp;quot; in the &amp;quot;class&amp;quot; column might correspond
(respectively) to &amp;quot;freshman&amp;quot; through &amp;quot;graduate
student&amp;quot;, in which case acquisitions might continue as
</bodyText>
<page confidence="0.991116">
23
</page>
<bodyText confidence="0.987002409090909">
suggested in Figure 3. From this information, the
system constructs a definition for each user-defined
modifier; for example the internal definition of
&amp;quot;sophomore&amp;quot; will be
((sophomore noun student) ((class p-noun) = 2))
A second intermediate acquisition, carried out
subject to user confirmation, involves the acceptability
of hypothesized syntax and semantics for (a) phrases
based on &amp;quot;of&amp;quot;, (b) phrases built around &amp;quot;have&amp;quot;, &amp;quot;with&amp;quot;.
and &amp;quot;in&amp;quot;, and (c) noun-noun phrases. In deciding what
case frames to propose. TELI considers the
information it has already acquired about simple
functional (&amp;quot;of&amp;quot;) relationships.
A third form of intermediate acquisition
involves the system&apos;s invitation for the user to give
lexical and syntactic information for one or more
user-defined categories, namely titles, adjectives.
common nouns, noun modifiers, prepositions. and
verbs. For example. the user might specify six
adjectives and the entities they modify. followed by
four or five verbs and their associated case frames.
and so forth.
</bodyText>
<sectionHeader confidence="0.764896" genericHeader="method">
7. On-Line Customization
</sectionHeader>
<bodyText confidence="0.982611916666667">
In general, definitions are supplied to TELL
whenever (a) an undefined modifier is encountered
during the processing of an English input, or (b) the
user asks to supply or modify a definition. In each
case, the same methods are available for making
definitions, and are independent of the modifier type
being defined. When creating or modifying a
meaning, users are presented with information as
shown in Figure 4-a; upon asking to &amp;quot;add a constraint&amp;quot;,
they are given the menu shown in Figure 4-b.
Multiple &amp;quot;constraints&amp;quot; appearring in a semantic
specification are presently presumed to be conjoined.
</bodyText>
<table confidence="0.9030789375">
Which columns contain (encoded) English words?
STUDENT (BILL, DOUG, ...) 0
SSM (111-22-3333, 123-45-6789, ...) 0
CLASS (1, 2, ...) 0
AIMS (BACHENKO, BALLARD, ...) 0
Abort 0 Return 0
Words associated with the CLASS value 1:
freshman
Words associated with the CLASS value G:
graduate/
Modifiers in CLASS Ad iecti,...e riounmod Noun
FRESHMAN (1) 0 0 Ei
SOPHOMORE (3) 0 0 CEI
JUNIOR (3) CI CI ISI
SENIOR (4) CI CI CiiI
GRADUATE (G) CI El • IN
Return 0
Figure 3: Intermediate Acquisitions
Semantic Specification
Adjective: FILE is LARGE
f Sample Usage: Sage is LARGE 1
the LENGTH of Sage :a 360
(r.dd a constraint)
[ return
Define the semantics of
Verb Phrase: TRAIL LEADS TO MOUNTAIN
by ...
Menu Selection
English(like) Reference
Database References
Borrowing frorn an Existing Meaning
[ return
</table>
<figureCaption confidence="0.996775">
Figure 4: Top-Level Semantics Menus
</figureCaption>
<bodyText confidence="0.894305111111111">
As suggested in Figure 4-a and below.
definitions are made in terms of sample values, which
the system treats as formal parameters. In this way we
avoid the problem of defining a phrase two or more of
whose case slots may be filled by the same type of
entity (cf. &amp;quot;a student is a classmate of a student if ...&amp;quot;).
To assure that any domain value may appear as a
constant, the user is able to alter the system&apos;s choice
of sample names at any time.
</bodyText>
<subsectionHeader confidence="0.939789">
7.1 Specification at the Database Level
</subsectionHeader>
<bodyText confidence="0.999493">
As noted in Section 3, semantic specifications at
the database level are primitive but useful. As shown
in Figure 5, a database level specification comprises
(a) a relation, possibly arrived at via a user-defined
join, and (b) references to columns that correspond to
the parameters of the phrase whose semantics is being
defined. In many cases, the system can utilize its
column type information, acquired as described in
Section 5, to predict both the relation to be used (or
pair of relations for joining) and the appropriate
columns to join over, in which case the menu(s) that
are presented will contain boldface selections for the
user to confirm or alter.
</bodyText>
<subsectionHeader confidence="0.997766">
7.2 Specification by Menu
</subsectionHeader>
<bodyText confidence="0.999883909090909">
In our previous experience with LDC. we found
that a large variety of meanings could be defined by a
predicate in which the result of some function is
compared using some relational operator to a specified
benchmark value. In TELI. we provide an
enhancement to this scheme where definitions (a) may
involve more than one argument. (b) may contain
more than one function reference. and (c) are
acquired in menu form. The current internal
representation of a menu specification is a triple of
the form suggested by
</bodyText>
<page confidence="0.997287">
24
</page>
<figure confidence="0.357404923076923">
Which relation gives the meaning of
HEIGHT of MOUNTAIN
MOUNTAINS: NM1E, ELEVATICK MP—■
CAMPSITES: SITE, CAPKITY, TYPE
[Join Two Relations]
[ return
To find the HEIGHT of a MOUNTAIN:
. Which column gives MOUNTAIN: NAMEELEVATMHAAP
▪ Which column gives HEIGHT: NAME ELEVATION MAP
MOUNTAINS: NAME (WASHINGTON, ADAMS, ...)
ELEVATION (1917, 1768, ...)
MAP (6, 6, ...)
Exit 0
</figure>
<figureCaption confidence="0.992416">
Figure 5: Database Specification
</figureCaption>
<equation confidence="0.521585">
&lt;spec&gt; --&gt; &lt;term&gt; &lt;relop&gt; &lt;term&gt;
&lt;term&gt; --&gt; &lt;atom&gt; &lt;func&gt; ( &lt;atom&gt; )
&lt;atom&gt; --&gt; &lt;constant&gt; &lt;parameter&gt;
&lt;relop&gt; --&gt; = «= &gt; &gt;=
</equation>
<bodyText confidence="0.99983025">
An example of how menu semantics operates is given
in Figure 6. When a semantics menu first appears. its
&amp;quot;Function&amp;quot; field contains a list of all functions known
to apply to at least one of the entities that the
definition relates to. This reduces the number of
keystrokes required from the user and, more
importantly, helps guard against an inadvertent
proliferation of concept names.
</bodyText>
<subsectionHeader confidence="0.995798">
7.3 English and English-Like Specifications
</subsectionHeader>
<bodyText confidence="0.997329315789474">
In addition to the database and menu schemes
just described, users may supply definitions in terms of
English already known to the system. Some
advantages to this are that (1) definitions may be
arbitrarily complex, limited only by the coverage of
the underlying syntactic component, and (2) users will
implicitly be learning to supply semantics at the same
time they learn to use the NLP itself. Some
disadvantages are (1) a user might want to define
something that cannot be paraphrased within the
bounds of the grammatical coverage of the system.
and (2) unless optimizations are carried out.
references to user-defined concepts may entail
inefficient processing.
An alternative to English specification, which
functions similarly from the user&apos;s standpoint, is to
provide for &amp;quot;English-like&amp;quot; specifications in which an
expression supplied by the user is translated by some
pattern-matching algorithm different from, and
probably less sophisticated than, the process involved
in actual English parsing. The primary advantage of
English-like specification, over English specification,
is that translations into internal form can be more
efficient, since definitions or parts of definitions will
be handled on a case by case basis. One probable
disadvantage is that the scheme will be less general. in
terms of definable concetps, and perhaps &amp;quot;spotty&amp;quot; in
terms of what it makes available.
In TELI, both English and English-like
specification are done in terms of sample domain
values, which are treated as formal parameters. An
example appears in Figure 7. In the current
implementation, English-like specifications include (a)
any definition definable by menu, and (b) definitions
that involve (possibly negated) adjective or noun
references. As of this writing, only English
specifications that involve no nested parameter
references can be processed.
</bodyText>
<subsectionHeader confidence="0.999045">
7.4 Specification by Borrowing
</subsectionHeader>
<bodyText confidence="0.9998635">
In addition to whatever mechanisms an NL
system specifically provides for semantic acquisitions,
it is reasonable to allow users to define one meaning
directly in terms of another (in addition to indirect
dependence, as in the case of English specification).
In TELI, users may ask to &amp;quot;borrow&amp;quot; from an existing
meaning at any time. As shown in Figure 8, the
system responds by finding all current items defined in
terms of all or some of the parameters (i.e. entities) of
the item for which the borrowing is being done. This
assures that the entire borrowed meaning can be
modified to apply to the item being defined. After
being copied, a borrowed meaning may be edited just
as though it had been entered from scratch.
</bodyText>
<table confidence="0.762616538461538">
Adjective: FILE is LARGE
[ Sample Usage: Sage is LARGE ]
Function: CREATION-DATE LENGTH OWNER (none)
other: NIL
Argument: Sage
other: NIL
Relation: &lt; &gt; &gt;=
Function: CREATION-DATE LENGTH OWNER (none)
other: NIL
Argument: 300 Sage
other: NIL
Retain this definition: Yes No
E.-it []
</table>
<figureCaption confidence="0.870377">
Figure 6: Menu Specification
</figureCaption>
<note confidence="0.8131155">
Adjective: MOUNTAIN is TALL
[ Sample Usage: Adams is TALL ]
Type an English(like) Reference
the height of adams 15 greater than 40001
</note>
<figureCaption confidence="0.995415">
Figure 7: English-like Specification
</figureCaption>
<page confidence="0.975677">
25
</page>
<figureCaption confidence="0.6161846">
Is the meaning of
STUDENT is ADVANCED
related to one of the following?
STUDENT is a FRESHMAN
STUDENT is a GRADUATE
STUDENT is a GRADUATE STUDENT
STUDENT is a JUNIOR
STUDENT is a SENIOR
STUDENT is a SOPHOMORE
STUDENT is an UNDERGRADLIATE
</figureCaption>
<figure confidence="0.803855">
CLASS of STUDENT
[ return
</figure>
<figureCaption confidence="0.995007">
Figure 8: Borrowing a Meaning
</figureCaption>
<bodyText confidence="0.996363888888889">
8. Relation to Similarly Motivated Systems
At the most abstract level, our approach to
transportability is unusual in that we have begun by
building a moderately sophisticated NLP which, from
the outset, fundamentally includes replete customization
facilities. This contrasts with other efforts which have
first built, perhaps over a period of several years, a
highly sophisticated system, then sought to incorporate
some customization features. Our work is also
distinctive, though perhaps less so. in seeking to allow
for customization by end users, as opposed to (say) a
database administrator (cf. Thompson and Thompson,
1975, 1983, 1985; Johnson, 1985).
Some of the systems which, like TELI, seek to
provide for user customization within the context of
database query are ASK (Thompson and Thompson
1983, 1985). formerly REL (Thompson and Thompson.
1975), from Caltech: INTELLECT, formerly Robot
(Harris, 1977), marketed by Artificial Intelligence
Corporation; IRUS (Bates and Bobrow, 1983; Bates,
Moser, and Stallard 1984), from BBN Laboratories;
TQA (Damerau, 1985), formerly REQUEST (Plath,
1976). from IBM Yorktown Heights; TEAM (Grosz,
1983; Grosz et al, 1985), from SRI International; and
USL (Lehmann, 1978), from IBM Heidleber(2. Other
high-quality domain-independent systems include
DATALOG (Hafner and Godden, 1985), from General
Motors Research Labs; HAM-ANS (Wahlster, 1984),
from the University of Hamburg; and PHLIQA
(Bronnenberg et al, 1978-1979), from Philips Research.
We now provide a comparison of TELI&apos;s
customization strategies with those of the TEAM,
IRUS, TQA, and ASK systems (other comparisons
would also have been instructive, time and space
permitting). Although we have recently spoken with
at least one designer of each of these systems (see the
Acknowledgements), it is possible that, in addition to
intended simplifications, we may have overlooked or
misunderstood certain significant, perhaps
undocumented, features, in which case we apologize
to the reader. Also, we note that our remarks are
principally concerned with the goals and the
approaches of various projects, and should not be
viewed as commenting on the accomplishments or
overall quality of TELI or any other system.
</bodyText>
<subsectionHeader confidence="0.841619">
8.1 A Comparison with TEAM
</subsectionHeader>
<bodyText confidence="0.9998526">
Both TEAM and TEL! represent English-
language interfaces that have been applied to several
moderately complex relational database domains.
Each system provides for a variety of customizations
by non-natural language experts, though neither
system has claimed success with actual users in either
customization or English processing mode. In terms of
method, each system obtains (among other things)
information about each column of each relation
(table) of the database. We proceed to point out some
of the more significant differences between the
projects, as suggested by Grosz et al (1985) and
indicated by Martin (1986).
To begin with, TEAM incorporates a more
powerful natural language processor than does TEL!,
with provisions for quantifiers, simple pronouns,
elaborate comparative forms, limited forms of
conjunction, and numerous smaller features. Its &amp;quot;sort
hierarchy&amp;quot; provides a taxonomy more general than
that of TELI. It also incorporates disambiguation
heuristics which seek to obviate the need for users to
provide definitions for some phrase types (e.g.
prepositional phrases based on &amp;quot;on&amp;quot;, &amp;quot;from&amp;quot;, &amp;quot;with&amp;quot;,
and &amp;quot;in&amp;quot;), and its preparations to deal with time and
place references are without counterpart in TEL!.
On the other hand, the customization features
of TELI appear to offer greater sophistication, and
sometimes more power, than the respective
customization features of TEAM. In terms of
sophistication, TELI always offers multiple ways of
acquiring information, provides the ability to examine
and borrow existing definitions, and is able to invoke
the appropriate knowledge acquisition module when
missing lexical, syntactic, or semantic information is
required.
Copncerning definitional power, TELI
generally provides for more complex definitions of
words and phrases than does TEAM, as described in
Sections 5-7. For example, whereas the SRI system
typically requires a verb to map into some explicit or
virtual relation (e.g. a join of explicit relations), TELI
also allows an arbitrary number of properties of
objects to be used in definitions (e.g. an old employee
is one hired before 1980. or an employee admires a
manager that works more hours than she does).
In TEAM, &amp;quot;acquisition is centered around the
relations and fields in the database&amp;quot;. In contrast,
TELI provides several customization modes, as
described in Section 3, and discourages low-level
database specifications.
</bodyText>
<page confidence="0.983723">
26
</page>
<bodyText confidence="0.999972066666667">
In contrast to the principles we espoused for
TELI in Section 3, TEAM couples its methods of
acquisition with the type of modifier being defined.
For example, when seeing a &amp;quot;feature field&amp;quot;, which
contains exactly two distinct values, the system asks
for &amp;quot;positive adjectives&amp;quot; and &amp;quot;negative adjectives&amp;quot;
associated with these values (e.g. &amp;quot;volcanic&amp;quot; is a
positive adjective associated with the database value
&amp;quot;Y&amp;quot;). In TELI, these relationships arise as a special
case of the acquisitions shown in Figures 3. 6. and 7b.
An interesting similarity between TEAM and
TELI is that each provides for English(like)
definitions. For example, TEAM might be told that &amp;quot;a
volcano erupts&amp;quot;. from which it infers that a mountain
erupts just in case it is a volcano.
</bodyText>
<subsectionHeader confidence="0.967768">
8.2 A Comparison with IRUS
</subsectionHeader>
<bodyText confidence="0.999979541666667">
Another recently developed facilitiy to allow
user customizations of a database front-end is
represented by the IRACQ component of the IRUS
system (Ayuso and Weischedel, 1986). In addition to
its practical value, IRACQ is intended as a vehicle
that permits experimental work with sophisticated
knowledge representation formalisms.
IRACQ is similar to TELI in shielding the user
from the layout of the underlying data files. Another
similarity is that each system accepts case frame
specifications in English-like form, but IRACQ allows
proper nouns as well as common nouns to be used.
Thus, a user might suggest the case frame of the verb
&amp;quot;write&amp;quot; by saying &amp;quot;Jones wrote some articles&amp;quot;. Since
IRUS provides for quite general taxonomic
relationships among defined concepts (e.g. nouns),
IRACQ proceeds to ascertain which of the possibly
several classes that &amp;quot;Jones&amp;quot; belongs to is the most
general one that can act as the subject of &amp;quot;write&amp;quot;.
One important difference between TEL! and
IRACQ is that IRUS distinguishes conceptual
information, which resides within its KR framework,
from the linguistic information that characterizes the
English to be used. Thus, while IRACQ supports
definitions in terms of an arbitrary number of
predicates. as does TELL it assumes that any concepts
needed to define a new language item have already
been specified. These representations, acquired by a
separate module called KREME, involve the KL-ONE
notions of &amp;quot;concept&amp;quot; and &amp;quot;relation&amp;quot;, which are similar
to, but more sophisticated than, the 1- and 2-place
predicates that come into existence during a session
with TEL!.
At present, IRACQ allows users to define case
frame information for verb phrases. prepositional
phrases, and noun phrases involving &amp;quot;of&amp;quot;. Its
treatment of prepositional phrases is very much like
that of TELL in that the head noun being modified is
considered part of the the noun-preposition-noun
triple for which a definition is being acquired (cf.
Section 4.1). Definitions for individual words (e.g.
nouns and adjectives) are not supported but are being
considered for future versions of the system. as are
facilities that enable the system to inform the user of
existing predicates that might be useful in defining a
new language item. This facility will be similar in
spirit to TELI&apos;s provisions for &amp;quot;borrowing&amp;quot; definitions.
as described in Section 7.4.
</bodyText>
<subsectionHeader confidence="0.996177">
8.3 A Comparison with TQA
</subsectionHeader>
<bodyText confidence="0.99997365">
Unlike most efforts at transportability, TQA
has been designed as a working prototype, capable of
being customizated for complex database applications
by actual users. The primary responsibility of the
customization module is to acquire information that
relates language concepts, e.g. subject of a given verb,
to the columns of the database at hand.
Like TEL!, TQA avoids having to copy all
database values into the lexicon by constructing
&amp;quot;shape&amp;quot; information to recognize numbers and similar
patterns. For example. the system might deduce that
all database values referring to a department are of
the form &amp;quot;letter followed by two digits&amp;quot;, which allows
for valuable disambiguations during parsing. Thus, in
a database where employees manage projects and
supervisors manage departments, the question &amp;quot;Who
manages K34?&amp;quot; can be understood to be asking about
supervisors without having to find &amp;quot;K34&amp;quot; in either the
lexicon or the database.
A related problem, which TQA addresses more
squarely than most systems (including TELI), concerns
the appearance and possible equivalence of database
values. For example. &amp;quot;vac lnd&amp;quot; might indicate &amp;quot;vacant
land&amp;quot;, &amp;quot;gm&amp;quot; and &amp;quot;green&amp;quot; might be used
interchangeable, and so forth. Many practical
applications require that these sorts of issues be
addressed in order for a user to obtain reliable
information.
Another useful feature concerns the acquisition
of information that enables non-trivial output
formatting. In simple cases, a database administrator
might want nine-digit values appearing in columns
associated with social security numbers to be printed
with dashes at the appropriate points (e.g. 123456789
becomes 123-45-6789). In more complicated situations.
values might actually need to be decoded, so that 0910
becomes &amp;quot;vacant land&amp;quot;. This provision for decoding is
similar to to the form of intermediate acquisition
shown in Figure 3, though here it is being used for
opposite effect.
</bodyText>
<page confidence="0.991158">
27
</page>
<subsectionHeader confidence="0.973728">
8.4 A Comparison with ASK
</subsectionHeader>
<bodyText confidence="0.999996379310345">
The current ASK prototypes, which run on Sun,
Vax, and HP desktop systems, are derived from
earlier work on the REL system, which itself derives
from work on the DEACON project, which stems
from the early 1960&apos;s. Unlike most recent efforts,
which have sought to incorporate customization
features into an existing more-or-less single-domain
system, the work with REL, the &amp;quot;Rapidly Extensible
Language&amp;quot;, fundamentally included definitional
capabilities as early as 1969.
To begin with, ASK provides quite general
customization facilities, allowing English definitions at
least as sophisiticated as those outlined in Section 7.3.
An example is &amp;quot;ships &apos;carry&apos; coal to Oslo if there is a
shipment whose carrier is ships, type is coal and
destination is Oslo&amp;quot;. Arithmetic facilities are also
provided, e.g. &amp;quot;area equals length times beam&amp;quot;.
The most distinguishing features of ASK,
however, derive from the designers&apos; desire to
incorporate natural language technology into an
intergrated information management system, rather
than provide simple sentence-by-sentence database
retrieval. One feature allows ASK to be connected to
several external database systems, drawing information
from each of them in the context of answering a user&apos;s
question. A second feature allows a user to provide
bulk data input. This begins with the interactive
specification of a record type, followed by information
used to populate the newly created relation.
</bodyText>
<sectionHeader confidence="0.98507" genericHeader="acknowledgments">
Acknowledgements
</sectionHeader>
<bodyText confidence="0.999932333333333">
The current TELI system derives from work on
the LDC project, which was carried out at Duke
University by John Lusth and Nancy Tinkham. In
converting the NL portions of LDC to operate in our
present context, we have engaged in frequent
discussions with several persons, including Joan
Bachenko, Alan Biermann, Marcia Derr, George
Heidorn, Mark Jones. and Mitch Marcus. We also
wish to thank Paul Martin of SRI, Damaris Ayuso and
Ralph Weischedel of BBN, Fred Damerau of IBM
Yorktown Heights, and Fred Thompson of Caltech,
for their willingness to answer a number of questions
that helped us to formulate the comparisons given in
Section 8. Finally, we wish to thank Marcia Derr for
many useful comments on a draft of our paper.
</bodyText>
<sectionHeader confidence="0.98493" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.9989985625">
Ayuso, D. and Weischedel, R. Personal
Communication, April 1986.
Ballard, B. &amp;quot;A &apos;Domain Class&apos; Apprdach to
Transportable Natural Language Processing&amp;quot;,
Cognition and Brain Theory 5, 3 (1982), 269-287.
Ballard, B. &amp;quot;The Syntax and Semantics of User-
Defined Modifiers in a Transportable Natural
Language Processor&amp;quot;, Proc. Coling-84, Stanford
University, July 1984, 52-56.
Ballard, B. &amp;quot;User Specification of Syntactic Case
Frames in TELI, A Transportable, User-Customized
Natural Language Processor&amp;quot;, Proc. Coling-86, Bonn,
West Germany, August, 1986.
Ballard, B., Lusth, J., and Tinkham, N. &amp;quot;LDC-1: A
Transportable Natural Language Processor for Office
Environments&amp;quot;, ACM Transactions on Off ice
Information Systems 2, 1 (1984), 1-23.
Ballard, B. and Tinkham, N. &amp;quot;A Phrase-Structured
Grammatical Framework for Transportable Natural
Language Processing&amp;quot;, Computational Linguistics 10, 2
(1984), 81-96.
Bates, M. and Bobrow, R. &amp;quot;A Transportable Natural
Language Interface for Information Retrieval&amp;quot;, Proc.
6th Int. ACM SIGIR Conference, Washington, D.C.,
June 1983.
Bates, M., Moser, M. and Stallard, D. &amp;quot;The IRUS
Transportable Natural Language Interface&amp;quot;, Proc.
First Int. Workshop on Expert Database Systems,
Kiawah Island, October 1984, 258-274.
Bronnenberg, W., Landsbergen, S., Scha, R.,
Schoenmakers, W. and van Utteren, E. &amp;quot;PHLIQA-1,
a Question-Answering System for Data-Base
Consultation in Natural English&amp;quot;, Philips tech. Rev. 38
(1978-79), 229-239 and 269-284.
Damerau,- F. &amp;quot;Problems and Some Solutions in
Customization of Natural Language Database Front
Ends&amp;quot;, ACM Transactions on Office Information
Systems 3, 2 (1985), 165-184.
Grosz, B. &amp;quot;TEAM: A Transportable Natural
Language Interface System&amp;quot;, Conf. . on Applied Natural
Language Processing, Santa Monica, 1983, 39-45.
Grosz, B., Appelt, D., Martin, P. and Pereira, F.
&amp;quot;TEAM: An Experiment In The Design Of
Transportable Natural-Langauge Interfaces&amp;quot;, Artificial
Intelligence, in press.
Hafner, C. and Godden, C. &amp;quot;Portability of Syntax and
Semantics in Datalog&amp;quot;, ACM Transactions on Office
Information Systems 3. 2 (1985), 141-164.
</reference>
<page confidence="0.977338">
28
</page>
<reference confidence="0.999063961538462">
Harris, L. &amp;quot;User-Oriented Database Query with the
ROBOT Natural Language System&amp;quot;, Int. Journal of
Man-Machine Studies 9 (1977), 697-713.
Johnson, T. Natural Language Computing: The
Commercial Applications. Ovum Ltd, London. 1985.
Lehmann. H. &amp;quot;Interpretation of natural language in
an information system&amp;quot;, IBM J. Res. Dev. 22, 5 (1978),
pp. 560-571.
Martin, P. Personal communication, March 1986.
Tennant, H. &amp;quot;Experience With the Evaluation of
Natural Language Question Answerers&amp;quot;, Int. J. Conf.
on Artificial Intelligence, 1979, pp. 275-281.
Thompson, F. and Thompson, B. &amp;quot;Practical Natural
Language Processing: The REL System as Prototype&amp;quot;,
In Advances in Computers, Vol. 3, M. Rubinoff and M.
Yovits, Eds., Academic Press, 1975.
Thompson, B. and Thompson, F. &amp;quot;Introducing ASK:
A Simple Knowledgeable System&amp;quot;, Conf. on Applied
Natural Language Processing, Santa Monica, 1983. 17-
24.
Thompson, B. and Thompson. F. &amp;quot;ASK Is
Transportable in Half a Dozen Ways&amp;quot;, ACM Trans. on
Office Information Systems 3, 2 (1985), 185-203.
Wahlster, W. &amp;quot;User Models in Dialog Systems&amp;quot;,
Invited talk at Coling-84, Stanford University. July
1984.
</reference>
<page confidence="0.999105">
29
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.932808">
<title confidence="0.9969145">Semantic Acquisition In TEL!: A Transportable, User-Customized Natural Language Processor</title>
<author confidence="0.999579">Bruce W Ballard Douglas E Stumberger</author>
<affiliation confidence="0.999826">AT&amp;T Bell Laboratories</affiliation>
<address confidence="0.999804">600 Mountain Avenue Murray Hill, NJ 07974</address>
<abstract confidence="0.996751526315789">We discuss ways of allowing the users of a natural language processor to define, examine, and modify the definitions of any domain-specific words or phrases known to the system. An implementation of this work forms a critical portion of the knowledge acquisition component of our Transportable English-Language Interface (TELI), which answers English questions about tabular (first normal-form) data files and runs on a Symbolics Lisp Machine. However, our techniques enable the design of customization modules that are largely independent of the syntactic and retrieval components of the specific system they supply information to. In addition to its obvious practical value, this area of research is important it requires careful attention to the used by a natural language system and to the the modules based on those formalisms.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>D Ayuso</author>
<author>R Weischedel</author>
</authors>
<date>1986</date>
<tech>Personal Communication,</tech>
<contexts>
<context position="31346" citStr="Ayuso and Weischedel, 1986" startWordPosition="4838" endWordPosition="4841">values (e.g. &amp;quot;volcanic&amp;quot; is a positive adjective associated with the database value &amp;quot;Y&amp;quot;). In TELI, these relationships arise as a special case of the acquisitions shown in Figures 3. 6. and 7b. An interesting similarity between TEAM and TELI is that each provides for English(like) definitions. For example, TEAM might be told that &amp;quot;a volcano erupts&amp;quot;. from which it infers that a mountain erupts just in case it is a volcano. 8.2 A Comparison with IRUS Another recently developed facilitiy to allow user customizations of a database front-end is represented by the IRACQ component of the IRUS system (Ayuso and Weischedel, 1986). In addition to its practical value, IRACQ is intended as a vehicle that permits experimental work with sophisticated knowledge representation formalisms. IRACQ is similar to TELI in shielding the user from the layout of the underlying data files. Another similarity is that each system accepts case frame specifications in English-like form, but IRACQ allows proper nouns as well as common nouns to be used. Thus, a user might suggest the case frame of the verb &amp;quot;write&amp;quot; by saying &amp;quot;Jones wrote some articles&amp;quot;. Since IRUS provides for quite general taxonomic relationships among defined concepts (e.g</context>
</contexts>
<marker>Ayuso, Weischedel, 1986</marker>
<rawString>Ayuso, D. and Weischedel, R. Personal Communication, April 1986.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Ballard</author>
</authors>
<title>A &apos;Domain Class&apos; Apprdach to Transportable Natural Language Processing&amp;quot;,</title>
<date>1982</date>
<journal>Cognition and Brain Theory</journal>
<volume>5</volume>
<pages>269--287</pages>
<contexts>
<context position="3224" citStr="Ballard (1982)" startWordPosition="482" endWordPosition="483"> important issues concerning (a) the precise nature of the formalisms the system is designed around, and (b) the interactions among system modules. Although customization efforts offer no guarantee against ad-hoc design or sloppy implementation. problems of the type mentioned above are less likely to go unnoticed when dealing with a system whose domain-specific information is supplied at run-time, especially when that information is being provided by the actual users of the system. By way of overview, we note that the TELI system derives from previous work on the LDC project. as documented in Ballard (1982), Ballard (1984). Ballard, Lusth and Tinkham (1984), and Ballard and Tinkham (1984). The initial prototype of TELL, which runs on a Symbolics Lisp Machine, is designed to answer English questions about information stored in one or more tables. (i.e. firstnormal-form relational database). A sample view of the display screen during a session with TELL which may give the flavor of how the system operates, is shown in Figure 1. Information on some aspects of knowledge acquisition not discussed in this paper. particularly with regard to syntactic case frames, can be found in Ballard (1986). 2. Type</context>
</contexts>
<marker>Ballard, 1982</marker>
<rawString>Ballard, B. &amp;quot;A &apos;Domain Class&apos; Apprdach to Transportable Natural Language Processing&amp;quot;, Cognition and Brain Theory 5, 3 (1982), 269-287.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Ballard</author>
</authors>
<title>The Syntax and Semantics of UserDefined Modifiers in a Transportable Natural Language Processor&amp;quot;,</title>
<date>1984</date>
<booktitle>Proc. Coling-84,</booktitle>
<pages>52--56</pages>
<institution>Stanford University,</institution>
<contexts>
<context position="3240" citStr="Ballard (1984)" startWordPosition="484" endWordPosition="485">s concerning (a) the precise nature of the formalisms the system is designed around, and (b) the interactions among system modules. Although customization efforts offer no guarantee against ad-hoc design or sloppy implementation. problems of the type mentioned above are less likely to go unnoticed when dealing with a system whose domain-specific information is supplied at run-time, especially when that information is being provided by the actual users of the system. By way of overview, we note that the TELI system derives from previous work on the LDC project. as documented in Ballard (1982), Ballard (1984). Ballard, Lusth and Tinkham (1984), and Ballard and Tinkham (1984). The initial prototype of TELL, which runs on a Symbolics Lisp Machine, is designed to answer English questions about information stored in one or more tables. (i.e. firstnormal-form relational database). A sample view of the display screen during a session with TELL which may give the flavor of how the system operates, is shown in Figure 1. Information on some aspects of knowledge acquisition not discussed in this paper. particularly with regard to syntactic case frames, can be found in Ballard (1986). 2. Types of Modifiers A</context>
</contexts>
<marker>Ballard, 1984</marker>
<rawString>Ballard, B. &amp;quot;The Syntax and Semantics of UserDefined Modifiers in a Transportable Natural Language Processor&amp;quot;, Proc. Coling-84, Stanford University, July 1984, 52-56.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Ballard</author>
</authors>
<title>User Specification of Syntactic Case Frames in TELI, A Transportable, User-Customized Natural Language Processor&amp;quot;,</title>
<date>1986</date>
<booktitle>Proc. Coling-86,</booktitle>
<location>Bonn, West Germany,</location>
<contexts>
<context position="3815" citStr="Ballard (1986)" startWordPosition="577" endWordPosition="578">ented in Ballard (1982), Ballard (1984). Ballard, Lusth and Tinkham (1984), and Ballard and Tinkham (1984). The initial prototype of TELL, which runs on a Symbolics Lisp Machine, is designed to answer English questions about information stored in one or more tables. (i.e. firstnormal-form relational database). A sample view of the display screen during a session with TELL which may give the flavor of how the system operates, is shown in Figure 1. Information on some aspects of knowledge acquisition not discussed in this paper. particularly with regard to syntactic case frames, can be found in Ballard (1986). 2. Types of Modifiers Available in TEL! The syntactic and semantic models adopted for TELI are intended to provide a unified treatment of a broad and extendible class of word and phrase types. By providing for an &amp;quot;extendible&amp;quot; class of constructs. we make the knowledge acquisition module of TELL independent of the natural language portion of the system. whose earlier version has been described in Ballard and Tinkham (1984) and Ballard. Lusth. and 20 Tinkham (1984). In the remainder of this paper. the reader should bear in mind that the acquisition modules of TELI, including the menus they gen</context>
</contexts>
<marker>Ballard, 1986</marker>
<rawString>Ballard, B. &amp;quot;User Specification of Syntactic Case Frames in TELI, A Transportable, User-Customized Natural Language Processor&amp;quot;, Proc. Coling-86, Bonn, West Germany, August, 1986.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Ballard</author>
<author>J Lusth</author>
<author>N Tinkham</author>
</authors>
<title>LDC-1: A Transportable Natural Language Processor for Office Environments&amp;quot;,</title>
<date>1984</date>
<journal>ACM Transactions on Off ice Information Systems</journal>
<volume>2</volume>
<pages>1--23</pages>
<marker>Ballard, Lusth, Tinkham, 1984</marker>
<rawString>Ballard, B., Lusth, J., and Tinkham, N. &amp;quot;LDC-1: A Transportable Natural Language Processor for Office Environments&amp;quot;, ACM Transactions on Off ice Information Systems 2, 1 (1984), 1-23.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Ballard</author>
<author>N Tinkham</author>
</authors>
<title>A Phrase-Structured Grammatical Framework for Transportable Natural Language Processing&amp;quot;,</title>
<date>1984</date>
<journal>Computational Linguistics</journal>
<volume>10</volume>
<pages>81--96</pages>
<contexts>
<context position="3307" citStr="Ballard and Tinkham (1984)" startWordPosition="492" endWordPosition="495">he system is designed around, and (b) the interactions among system modules. Although customization efforts offer no guarantee against ad-hoc design or sloppy implementation. problems of the type mentioned above are less likely to go unnoticed when dealing with a system whose domain-specific information is supplied at run-time, especially when that information is being provided by the actual users of the system. By way of overview, we note that the TELI system derives from previous work on the LDC project. as documented in Ballard (1982), Ballard (1984). Ballard, Lusth and Tinkham (1984), and Ballard and Tinkham (1984). The initial prototype of TELL, which runs on a Symbolics Lisp Machine, is designed to answer English questions about information stored in one or more tables. (i.e. firstnormal-form relational database). A sample view of the display screen during a session with TELL which may give the flavor of how the system operates, is shown in Figure 1. Information on some aspects of knowledge acquisition not discussed in this paper. particularly with regard to syntactic case frames, can be found in Ballard (1986). 2. Types of Modifiers Available in TEL! The syntactic and semantic models adopted for TELI</context>
<context position="10074" citStr="Ballard and Tinkham, 1984" startWordPosition="1524" endWordPosition="1527">tem. To avoid unnecessary limitations, however, users are generally able to override any hints made by the system. 4. Semantic Processing in TELL The semantic model developed for TELL, in which definitions are acquired from users, assumes that (1) modifier meanings will be purely extensional, and can thus be treated as n-place predicates, and (2) semantic analysis will be almost entirely compositional. Concerning the latter assumption, we note that (a) some important disambiguations, including problems of word sense, will have been made during parsing by reference to selectional restrictions (Ballard and Tinkham, 1984), and (b) minimal re-ordering does occur in converting parse trees into internal representations. 4.1 Types of Semantics All user-defined semantics, however acquired, are stored in a global Lisp structure indexed by the word or phrase being defined. Single-word modifiers are indexed by the word being defined, its part of speech, and the entity it modifies; phrasal modifiers are indexed by the phrase type and the associated case frame. For example, the internal references (new adj room) (prep-ph (restaurant in county)) respectively index the definitions of &amp;quot;new&amp;quot;, when used as an adjective modif</context>
</contexts>
<marker>Ballard, Tinkham, 1984</marker>
<rawString>Ballard, B. and Tinkham, N. &amp;quot;A Phrase-Structured Grammatical Framework for Transportable Natural Language Processing&amp;quot;, Computational Linguistics 10, 2 (1984), 81-96.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Bates</author>
<author>R Bobrow</author>
</authors>
<title>A Transportable Natural Language Interface for Information Retrieval&amp;quot;,</title>
<date>1983</date>
<booktitle>Proc. 6th Int. ACM SIGIR Conference,</booktitle>
<location>Washington, D.C.,</location>
<contexts>
<context position="26734" citStr="Bates and Bobrow, 1983" startWordPosition="4139" endWordPosition="4142">isticated system, then sought to incorporate some customization features. Our work is also distinctive, though perhaps less so. in seeking to allow for customization by end users, as opposed to (say) a database administrator (cf. Thompson and Thompson, 1975, 1983, 1985; Johnson, 1985). Some of the systems which, like TELI, seek to provide for user customization within the context of database query are ASK (Thompson and Thompson 1983, 1985). formerly REL (Thompson and Thompson. 1975), from Caltech: INTELLECT, formerly Robot (Harris, 1977), marketed by Artificial Intelligence Corporation; IRUS (Bates and Bobrow, 1983; Bates, Moser, and Stallard 1984), from BBN Laboratories; TQA (Damerau, 1985), formerly REQUEST (Plath, 1976). from IBM Yorktown Heights; TEAM (Grosz, 1983; Grosz et al, 1985), from SRI International; and USL (Lehmann, 1978), from IBM Heidleber(2. Other high-quality domain-independent systems include DATALOG (Hafner and Godden, 1985), from General Motors Research Labs; HAM-ANS (Wahlster, 1984), from the University of Hamburg; and PHLIQA (Bronnenberg et al, 1978-1979), from Philips Research. We now provide a comparison of TELI&apos;s customization strategies with those of the TEAM, IRUS, TQA, and A</context>
</contexts>
<marker>Bates, Bobrow, 1983</marker>
<rawString>Bates, M. and Bobrow, R. &amp;quot;A Transportable Natural Language Interface for Information Retrieval&amp;quot;, Proc. 6th Int. ACM SIGIR Conference, Washington, D.C., June 1983.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Bates</author>
<author>M Moser</author>
<author>D Stallard</author>
</authors>
<title>The IRUS Transportable Natural Language Interface&amp;quot;,</title>
<date>1984</date>
<booktitle>Proc. First Int. Workshop on Expert Database Systems,</booktitle>
<pages>258--274</pages>
<location>Kiawah Island,</location>
<marker>Bates, Moser, Stallard, 1984</marker>
<rawString>Bates, M., Moser, M. and Stallard, D. &amp;quot;The IRUS Transportable Natural Language Interface&amp;quot;, Proc. First Int. Workshop on Expert Database Systems, Kiawah Island, October 1984, 258-274.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W Bronnenberg</author>
<author>S Landsbergen</author>
<author>R Scha</author>
<author>W Schoenmakers</author>
<author>E van Utteren</author>
</authors>
<title>PHLIQA-1, a Question-Answering System for Data-Base Consultation in Natural English&amp;quot;, Philips tech.</title>
<date>1978</date>
<journal>Rev.</journal>
<volume>38</volume>
<pages>229--239</pages>
<marker>Bronnenberg, Landsbergen, Scha, Schoenmakers, van Utteren, 1978</marker>
<rawString>Bronnenberg, W., Landsbergen, S., Scha, R., Schoenmakers, W. and van Utteren, E. &amp;quot;PHLIQA-1, a Question-Answering System for Data-Base Consultation in Natural English&amp;quot;, Philips tech. Rev. 38 (1978-79), 229-239 and 269-284.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Damerau</author>
</authors>
<title>Problems and Some Solutions in Customization of Natural Language Database Front Ends&amp;quot;,</title>
<date>1985</date>
<journal>ACM Transactions on Office Information Systems</journal>
<volume>3</volume>
<pages>165--184</pages>
<contexts>
<context position="26812" citStr="Damerau, 1985" startWordPosition="4152" endWordPosition="4153">also distinctive, though perhaps less so. in seeking to allow for customization by end users, as opposed to (say) a database administrator (cf. Thompson and Thompson, 1975, 1983, 1985; Johnson, 1985). Some of the systems which, like TELI, seek to provide for user customization within the context of database query are ASK (Thompson and Thompson 1983, 1985). formerly REL (Thompson and Thompson. 1975), from Caltech: INTELLECT, formerly Robot (Harris, 1977), marketed by Artificial Intelligence Corporation; IRUS (Bates and Bobrow, 1983; Bates, Moser, and Stallard 1984), from BBN Laboratories; TQA (Damerau, 1985), formerly REQUEST (Plath, 1976). from IBM Yorktown Heights; TEAM (Grosz, 1983; Grosz et al, 1985), from SRI International; and USL (Lehmann, 1978), from IBM Heidleber(2. Other high-quality domain-independent systems include DATALOG (Hafner and Godden, 1985), from General Motors Research Labs; HAM-ANS (Wahlster, 1984), from the University of Hamburg; and PHLIQA (Bronnenberg et al, 1978-1979), from Philips Research. We now provide a comparison of TELI&apos;s customization strategies with those of the TEAM, IRUS, TQA, and ASK systems (other comparisons would also have been instructive, time and space</context>
</contexts>
<marker>Damerau, 1985</marker>
<rawString>Damerau,- F. &amp;quot;Problems and Some Solutions in Customization of Natural Language Database Front Ends&amp;quot;, ACM Transactions on Office Information Systems 3, 2 (1985), 165-184.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Grosz</author>
</authors>
<title>TEAM: A Transportable Natural Language Interface System&amp;quot;,</title>
<date>1983</date>
<booktitle>Conf. . on Applied Natural Language Processing,</booktitle>
<pages>39--45</pages>
<location>Santa Monica,</location>
<contexts>
<context position="26890" citStr="Grosz, 1983" startWordPosition="4163" endWordPosition="4164">y end users, as opposed to (say) a database administrator (cf. Thompson and Thompson, 1975, 1983, 1985; Johnson, 1985). Some of the systems which, like TELI, seek to provide for user customization within the context of database query are ASK (Thompson and Thompson 1983, 1985). formerly REL (Thompson and Thompson. 1975), from Caltech: INTELLECT, formerly Robot (Harris, 1977), marketed by Artificial Intelligence Corporation; IRUS (Bates and Bobrow, 1983; Bates, Moser, and Stallard 1984), from BBN Laboratories; TQA (Damerau, 1985), formerly REQUEST (Plath, 1976). from IBM Yorktown Heights; TEAM (Grosz, 1983; Grosz et al, 1985), from SRI International; and USL (Lehmann, 1978), from IBM Heidleber(2. Other high-quality domain-independent systems include DATALOG (Hafner and Godden, 1985), from General Motors Research Labs; HAM-ANS (Wahlster, 1984), from the University of Hamburg; and PHLIQA (Bronnenberg et al, 1978-1979), from Philips Research. We now provide a comparison of TELI&apos;s customization strategies with those of the TEAM, IRUS, TQA, and ASK systems (other comparisons would also have been instructive, time and space permitting). Although we have recently spoken with at least one designer of e</context>
</contexts>
<marker>Grosz, 1983</marker>
<rawString>Grosz, B. &amp;quot;TEAM: A Transportable Natural Language Interface System&amp;quot;, Conf. . on Applied Natural Language Processing, Santa Monica, 1983, 39-45.</rawString>
</citation>
<citation valid="false">
<authors>
<author>B Grosz</author>
<author>D Appelt</author>
<author>P Martin</author>
<author>F Pereira</author>
</authors>
<title>TEAM: An Experiment In The Design Of Transportable Natural-Langauge Interfaces&amp;quot;, Artificial Intelligence,</title>
<note>in press.</note>
<marker>Grosz, Appelt, Martin, Pereira, </marker>
<rawString>Grosz, B., Appelt, D., Martin, P. and Pereira, F. &amp;quot;TEAM: An Experiment In The Design Of Transportable Natural-Langauge Interfaces&amp;quot;, Artificial Intelligence, in press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C Hafner</author>
<author>C Godden</author>
</authors>
<title>Portability of Syntax and Semantics in Datalog&amp;quot;,</title>
<date>1985</date>
<journal>ACM Transactions on Office Information Systems</journal>
<volume>3</volume>
<pages>141--164</pages>
<contexts>
<context position="27070" citStr="Hafner and Godden, 1985" startWordPosition="4185" endWordPosition="4188">rovide for user customization within the context of database query are ASK (Thompson and Thompson 1983, 1985). formerly REL (Thompson and Thompson. 1975), from Caltech: INTELLECT, formerly Robot (Harris, 1977), marketed by Artificial Intelligence Corporation; IRUS (Bates and Bobrow, 1983; Bates, Moser, and Stallard 1984), from BBN Laboratories; TQA (Damerau, 1985), formerly REQUEST (Plath, 1976). from IBM Yorktown Heights; TEAM (Grosz, 1983; Grosz et al, 1985), from SRI International; and USL (Lehmann, 1978), from IBM Heidleber(2. Other high-quality domain-independent systems include DATALOG (Hafner and Godden, 1985), from General Motors Research Labs; HAM-ANS (Wahlster, 1984), from the University of Hamburg; and PHLIQA (Bronnenberg et al, 1978-1979), from Philips Research. We now provide a comparison of TELI&apos;s customization strategies with those of the TEAM, IRUS, TQA, and ASK systems (other comparisons would also have been instructive, time and space permitting). Although we have recently spoken with at least one designer of each of these systems (see the Acknowledgements), it is possible that, in addition to intended simplifications, we may have overlooked or misunderstood certain significant, perhaps </context>
</contexts>
<marker>Hafner, Godden, 1985</marker>
<rawString>Hafner, C. and Godden, C. &amp;quot;Portability of Syntax and Semantics in Datalog&amp;quot;, ACM Transactions on Office Information Systems 3. 2 (1985), 141-164.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L Harris</author>
</authors>
<title>User-Oriented Database Query with the ROBOT Natural Language System&amp;quot;,</title>
<date>1977</date>
<journal>Int. Journal of Man-Machine Studies</journal>
<volume>9</volume>
<pages>697--713</pages>
<contexts>
<context position="26655" citStr="Harris, 1977" startWordPosition="4131" endWordPosition="4132">ave first built, perhaps over a period of several years, a highly sophisticated system, then sought to incorporate some customization features. Our work is also distinctive, though perhaps less so. in seeking to allow for customization by end users, as opposed to (say) a database administrator (cf. Thompson and Thompson, 1975, 1983, 1985; Johnson, 1985). Some of the systems which, like TELI, seek to provide for user customization within the context of database query are ASK (Thompson and Thompson 1983, 1985). formerly REL (Thompson and Thompson. 1975), from Caltech: INTELLECT, formerly Robot (Harris, 1977), marketed by Artificial Intelligence Corporation; IRUS (Bates and Bobrow, 1983; Bates, Moser, and Stallard 1984), from BBN Laboratories; TQA (Damerau, 1985), formerly REQUEST (Plath, 1976). from IBM Yorktown Heights; TEAM (Grosz, 1983; Grosz et al, 1985), from SRI International; and USL (Lehmann, 1978), from IBM Heidleber(2. Other high-quality domain-independent systems include DATALOG (Hafner and Godden, 1985), from General Motors Research Labs; HAM-ANS (Wahlster, 1984), from the University of Hamburg; and PHLIQA (Bronnenberg et al, 1978-1979), from Philips Research. We now provide a compari</context>
</contexts>
<marker>Harris, 1977</marker>
<rawString>Harris, L. &amp;quot;User-Oriented Database Query with the ROBOT Natural Language System&amp;quot;, Int. Journal of Man-Machine Studies 9 (1977), 697-713.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Johnson</author>
</authors>
<title>Natural Language Computing: The Commercial Applications.</title>
<date>1985</date>
<publisher>Ovum Ltd,</publisher>
<location>London.</location>
<contexts>
<context position="26397" citStr="Johnson, 1985" startWordPosition="4092" endWordPosition="4093">At the most abstract level, our approach to transportability is unusual in that we have begun by building a moderately sophisticated NLP which, from the outset, fundamentally includes replete customization facilities. This contrasts with other efforts which have first built, perhaps over a period of several years, a highly sophisticated system, then sought to incorporate some customization features. Our work is also distinctive, though perhaps less so. in seeking to allow for customization by end users, as opposed to (say) a database administrator (cf. Thompson and Thompson, 1975, 1983, 1985; Johnson, 1985). Some of the systems which, like TELI, seek to provide for user customization within the context of database query are ASK (Thompson and Thompson 1983, 1985). formerly REL (Thompson and Thompson. 1975), from Caltech: INTELLECT, formerly Robot (Harris, 1977), marketed by Artificial Intelligence Corporation; IRUS (Bates and Bobrow, 1983; Bates, Moser, and Stallard 1984), from BBN Laboratories; TQA (Damerau, 1985), formerly REQUEST (Plath, 1976). from IBM Yorktown Heights; TEAM (Grosz, 1983; Grosz et al, 1985), from SRI International; and USL (Lehmann, 1978), from IBM Heidleber(2. Other high-qua</context>
</contexts>
<marker>Johnson, 1985</marker>
<rawString>Johnson, T. Natural Language Computing: The Commercial Applications. Ovum Ltd, London. 1985.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H</author>
</authors>
<title>Interpretation of natural language in an information system&amp;quot;,</title>
<date>1978</date>
<journal>IBM J. Res. Dev.</journal>
<volume>22</volume>
<pages>560--571</pages>
<marker>H, 1978</marker>
<rawString>Lehmann. H. &amp;quot;Interpretation of natural language in an information system&amp;quot;, IBM J. Res. Dev. 22, 5 (1978), pp. 560-571.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Martin</author>
</authors>
<title>Personal communication,</title>
<date>1986</date>
<contexts>
<context position="28606" citStr="Martin (1986)" startWordPosition="4421" endWordPosition="4422">M and TEL! represent Englishlanguage interfaces that have been applied to several moderately complex relational database domains. Each system provides for a variety of customizations by non-natural language experts, though neither system has claimed success with actual users in either customization or English processing mode. In terms of method, each system obtains (among other things) information about each column of each relation (table) of the database. We proceed to point out some of the more significant differences between the projects, as suggested by Grosz et al (1985) and indicated by Martin (1986). To begin with, TEAM incorporates a more powerful natural language processor than does TEL!, with provisions for quantifiers, simple pronouns, elaborate comparative forms, limited forms of conjunction, and numerous smaller features. Its &amp;quot;sort hierarchy&amp;quot; provides a taxonomy more general than that of TELI. It also incorporates disambiguation heuristics which seek to obviate the need for users to provide definitions for some phrase types (e.g. prepositional phrases based on &amp;quot;on&amp;quot;, &amp;quot;from&amp;quot;, &amp;quot;with&amp;quot;, and &amp;quot;in&amp;quot;), and its preparations to deal with time and place references are without counterpart in TEL</context>
</contexts>
<marker>Martin, 1986</marker>
<rawString>Martin, P. Personal communication, March 1986.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Tennant</author>
</authors>
<title>Experience With the Evaluation of Natural Language Question Answerers&amp;quot;,</title>
<date>1979</date>
<journal>Int. J. Conf. on Artificial Intelligence,</journal>
<pages>275--281</pages>
<marker>Tennant, 1979</marker>
<rawString>Tennant, H. &amp;quot;Experience With the Evaluation of Natural Language Question Answerers&amp;quot;, Int. J. Conf. on Artificial Intelligence, 1979, pp. 275-281.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F Thompson</author>
<author>B Thompson</author>
</authors>
<title>Practical Natural Language Processing: The REL System as Prototype&amp;quot;,</title>
<date>1975</date>
<booktitle>In Advances in Computers,</booktitle>
<volume>3</volume>
<publisher>Academic Press,</publisher>
<contexts>
<context position="26369" citStr="Thompson and Thompson, 1975" startWordPosition="4086" endWordPosition="4089"> Relation to Similarly Motivated Systems At the most abstract level, our approach to transportability is unusual in that we have begun by building a moderately sophisticated NLP which, from the outset, fundamentally includes replete customization facilities. This contrasts with other efforts which have first built, perhaps over a period of several years, a highly sophisticated system, then sought to incorporate some customization features. Our work is also distinctive, though perhaps less so. in seeking to allow for customization by end users, as opposed to (say) a database administrator (cf. Thompson and Thompson, 1975, 1983, 1985; Johnson, 1985). Some of the systems which, like TELI, seek to provide for user customization within the context of database query are ASK (Thompson and Thompson 1983, 1985). formerly REL (Thompson and Thompson. 1975), from Caltech: INTELLECT, formerly Robot (Harris, 1977), marketed by Artificial Intelligence Corporation; IRUS (Bates and Bobrow, 1983; Bates, Moser, and Stallard 1984), from BBN Laboratories; TQA (Damerau, 1985), formerly REQUEST (Plath, 1976). from IBM Yorktown Heights; TEAM (Grosz, 1983; Grosz et al, 1985), from SRI International; and USL (Lehmann, 1978), from IBM</context>
</contexts>
<marker>Thompson, Thompson, 1975</marker>
<rawString>Thompson, F. and Thompson, B. &amp;quot;Practical Natural Language Processing: The REL System as Prototype&amp;quot;, In Advances in Computers, Vol. 3, M. Rubinoff and M. Yovits, Eds., Academic Press, 1975.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Thompson</author>
<author>F Thompson</author>
</authors>
<title>Introducing ASK: A Simple Knowledgeable System&amp;quot;,</title>
<date>1983</date>
<booktitle>Conf. on Applied Natural Language Processing,</booktitle>
<pages>17--24</pages>
<location>Santa Monica,</location>
<contexts>
<context position="26548" citStr="Thompson and Thompson 1983" startWordPosition="4115" endWordPosition="4118">ich, from the outset, fundamentally includes replete customization facilities. This contrasts with other efforts which have first built, perhaps over a period of several years, a highly sophisticated system, then sought to incorporate some customization features. Our work is also distinctive, though perhaps less so. in seeking to allow for customization by end users, as opposed to (say) a database administrator (cf. Thompson and Thompson, 1975, 1983, 1985; Johnson, 1985). Some of the systems which, like TELI, seek to provide for user customization within the context of database query are ASK (Thompson and Thompson 1983, 1985). formerly REL (Thompson and Thompson. 1975), from Caltech: INTELLECT, formerly Robot (Harris, 1977), marketed by Artificial Intelligence Corporation; IRUS (Bates and Bobrow, 1983; Bates, Moser, and Stallard 1984), from BBN Laboratories; TQA (Damerau, 1985), formerly REQUEST (Plath, 1976). from IBM Yorktown Heights; TEAM (Grosz, 1983; Grosz et al, 1985), from SRI International; and USL (Lehmann, 1978), from IBM Heidleber(2. Other high-quality domain-independent systems include DATALOG (Hafner and Godden, 1985), from General Motors Research Labs; HAM-ANS (Wahlster, 1984), from the Univer</context>
</contexts>
<marker>Thompson, Thompson, 1983</marker>
<rawString>Thompson, B. and Thompson, F. &amp;quot;Introducing ASK: A Simple Knowledgeable System&amp;quot;, Conf. on Applied Natural Language Processing, Santa Monica, 1983. 17-24.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F</author>
</authors>
<title>ASK Is Transportable in Half a Dozen Ways&amp;quot;,</title>
<date>1985</date>
<journal>ACM Trans. on Office Information Systems</journal>
<volume>3</volume>
<pages>185--203</pages>
<marker>F, 1985</marker>
<rawString>Thompson, B. and Thompson. F. &amp;quot;ASK Is Transportable in Half a Dozen Ways&amp;quot;, ACM Trans. on Office Information Systems 3, 2 (1985), 185-203.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W Wahlster</author>
</authors>
<title>User Models in Dialog Systems&amp;quot;, Invited talk at Coling-84,</title>
<date>1984</date>
<institution>Stanford University.</institution>
<contexts>
<context position="27131" citStr="Wahlster, 1984" startWordPosition="4195" endWordPosition="4196"> ASK (Thompson and Thompson 1983, 1985). formerly REL (Thompson and Thompson. 1975), from Caltech: INTELLECT, formerly Robot (Harris, 1977), marketed by Artificial Intelligence Corporation; IRUS (Bates and Bobrow, 1983; Bates, Moser, and Stallard 1984), from BBN Laboratories; TQA (Damerau, 1985), formerly REQUEST (Plath, 1976). from IBM Yorktown Heights; TEAM (Grosz, 1983; Grosz et al, 1985), from SRI International; and USL (Lehmann, 1978), from IBM Heidleber(2. Other high-quality domain-independent systems include DATALOG (Hafner and Godden, 1985), from General Motors Research Labs; HAM-ANS (Wahlster, 1984), from the University of Hamburg; and PHLIQA (Bronnenberg et al, 1978-1979), from Philips Research. We now provide a comparison of TELI&apos;s customization strategies with those of the TEAM, IRUS, TQA, and ASK systems (other comparisons would also have been instructive, time and space permitting). Although we have recently spoken with at least one designer of each of these systems (see the Acknowledgements), it is possible that, in addition to intended simplifications, we may have overlooked or misunderstood certain significant, perhaps undocumented, features, in which case we apologize to the rea</context>
</contexts>
<marker>Wahlster, 1984</marker>
<rawString>Wahlster, W. &amp;quot;User Models in Dialog Systems&amp;quot;, Invited talk at Coling-84, Stanford University. July 1984.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>