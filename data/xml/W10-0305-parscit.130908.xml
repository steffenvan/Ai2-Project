<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000012">
<title confidence="0.974722">
An alternate approach towards meaningful lyric generation in Tamil
</title>
<author confidence="0.701551">
Ananth Ramakrishnan A Sobha Lalitha Devi
</author>
<affiliation confidence="0.589697833333333">
AU-KBC Research Centre
MIT Campus of Anna University
Chennai, India
AU-KBC Research Centre
MIT Campus of Anna University
Chennai, India
</affiliation>
<email confidence="0.615886">
ananthrk@au-kbc.org sobha@au-kbc.org
</email>
<sectionHeader confidence="0.984223" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999121705882353">
This paper presents our on-going work to
improve the lyric generation component of
the Automatic Lyric Generation system for
the Tamil Language. An earlier version of
the system used an n-gram based model to
generate lyrics that match the given melody.
This paper identifies some of the deficien-
cies in the melody analysis and text genera-
tion components of the earlier system and
explains the new approach used to tackle
those drawbacks. The two central approach-
es discussed in this paper are: (1) An im-
proved mapping scheme for matching melo-
dy with words and (2) Knowledge-based
Text Generation algorithm based on an ex-
isting Ontology and Tamil Morphology Ge-
nerator.
</bodyText>
<sectionHeader confidence="0.998996" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.9999455">
In an attempt to define poetry (Manurung, 2004),
provides three properties for a natural language
artifact to be considered a poetic work, viz., Mea-
ningfulness (M), Grammaticality (G) and Poetic-
ness (P). A complete poetry generation system
must generate texts that adhere to all the three
properties. (Ananth et. al., 2009) explains an ap-
proach for automatically generating Tamil lyrics,
given a melody, which attempts to generate mea-
ningful lyrics that match the melody.
The existing approach (Ananth et. al., 2009) to au-
tomatically generate Tamil lyrics that match the
given tune in ABC format (Gonzato, 2003) in-
volves two steps. The first step is to analyze the
input melody and output a series of possible sylla-
ble patterns in KNM representation scheme - a
scheme for representing all words in the language,
where, K stands for Kuril ((C)V, where V is a
</bodyText>
<page confidence="0.998101">
31
</page>
<bodyText confidence="0.99912675">
short vowel), N stands for Nedil ((C)V, where V is
a long vowel) and M stands for Mei or Ottru (con-
sonants) - that match the given melody, along with
tentative word and sentence boundary. This melo-
dy analysis system was trained with sample film
songs and their corresponding lyrics collected from
the web. The tunes were converted to ABC Nota-
tion (Gonzato, 2003) and their lyrics were
represented in KNM scheme. The trained model
was then used to label the given input melody.
The subsequent step uses a Sentence Generator
module to generate lines that match the given syl-
lable pattern with words satisfying the following
constraints: a) Words should match the syllable
pattern and b) The sequence of words should have
a meaning. This was achieved by using n-Gram
models learnt from a Tamil text corpus.
Though the system manages to generate sentences
that match the syllable pattern, it has the following
limitations:
</bodyText>
<listItem confidence="0.764505533333333">
1) When no words are found matching a given
syllable pattern, alternate patterns that are
close to the given pattern, as suggested by the
Edit Distance Algorithm, are considered. This
algorithm treats the syllable patterns as strings
for finding close patterns and hence, can pro-
vide choices that do not agree with the input
melody.
2) The Sentence Generation is based on the n-
Gram model learnt from a text corpus. This
can result in sentences that do not have a cohe-
rent meaning. Also, since only bi-grams are
considered, it can generate sentences that are
ungrammatical due to Person-Number-Gender
(PNG) agreement issues.
</listItem>
<bodyText confidence="0.959435666666667">
This paper is an attempt to propose alternate ap-
proaches in order to overcome the above limita-
tions.
</bodyText>
<note confidence="0.9572445">
Proceedings of the NAACL HLT 2010 Second Workshop on Computational Approaches to Linguistic Creativity, pages 31–39,
Los Angeles, California, June 2010. c�2010 Association for Computational Linguistics
</note>
<sectionHeader confidence="0.753928" genericHeader="method">
2 Limitations of existing approach
</sectionHeader>
<subsectionHeader confidence="0.998721">
2.1 Finding close matches to syllable patterns
</subsectionHeader>
<bodyText confidence="0.994063263157895">
In the existing system, when no words are found
matching the given syllable pattern (either due to a
small corpus or rarity of the pattern), the closest
patterns are considered as alternatives. The closest
match to a given syllable pattern is generated based
on the Edit Distance algorithm. For example, if the
input sequence is given as &amp;quot;NKN&amp;quot; (long vowel -
short vowel - long vowel) and if no words are
found matching NKN, closest matches for NKN
are generated. Thus, if an edit distance of 1 is con-
sidered, the alternate pattern choices are &amp;quot;KKN&amp;quot;,
&amp;quot;NKM&amp;quot;, &amp;quot;NNN&amp;quot;, &amp;quot;NMN&amp;quot;, etc. However, not all of
these syllable patterns can fit the original music
notes.
As an example, consider the Tamil word “thA-ma-
rai” (lotus) that fits the pattern NKN. Suppose no
words that match the pattern NKN was present in
the corpus and other close patterns were opted for,
we get:
</bodyText>
<table confidence="0.9961484">
Pat. Word Meaning Match
KKN tha-va-Lai Frog No match
NKM thA-ba-m Longing No match
NNN kO-sA-lai Cow Hut Close Match
NMN pA-p-pA Child No match
</table>
<tableCaption confidence="0.999934">
Table 1. Alternative patterns for “NKN”
</tableCaption>
<bodyText confidence="0.999708">
None of the above words can be used in the place
of “thA-ma-rai”, a good fit for a NKN pattern, as
they don’t phonetically match (except for a close-
but-not-exact “kO-sA-lai”) and hence cannot be
used as part of the lyric without affecting the in-
tended melody.
</bodyText>
<subsectionHeader confidence="0.9530755">
2.2 Ungrammatical or meaningless genera-
tion
</subsectionHeader>
<bodyText confidence="0.964793233333333">
The Sentence Generation algorithm was based on
the n-Gram model built from a text corpus. Given
that n-Gram based generation schemes have in-
built bias towards shorter strings, it can end-up
generating meaningless and ungrammatical sen-
tences. As observed in (Ananth et.al., 2009), we
can get sentences such as:
(* avan-He-3sm nadandhu-walk sendrAlY-3sf)
(He reached by walking)
Here, the subject avan (He), which is a 3rd person,
singular, masculine noun, does not agree with the
verb sendrAlY , which is 3rd person, singular, femi-
nine. Thus, the noun and the verb do not agree on
the gender. The correct sentence should be:
(avan-3sm nadandhu sendrAn-3sm)
This is happening because the bi-gram score for
could be greater than
.
Similar disagreements can happen for other aspects
such as person or number. Though performing a
joint probability across words would help in reduc-
ing such errors, it would slow down the generation
process.
In addition to the above ungrammatical generation
problem, the system can also generate meaningless
sentences. Though, some of them can be consi-
dered as a poetic license, most of them were just
non-sensical. For example, consider the following
sentence generated by the n-Gram sentence genera-
tion system:
</bodyText>
<construct confidence="0.8036845">
(adhu-that idhu-this en-my)
(that this my)
</construct>
<bodyText confidence="0.987898">
The above sentence does not convey any coherent
meaning.
</bodyText>
<subsectionHeader confidence="0.999805">
2.3 Ability to control theme/choice of words
</subsectionHeader>
<bodyText confidence="0.999978222222222">
Given the nature of the Sentence generation algo-
rithm, it is not possible for the program to hand-
pick specific words and phrases. That is, the whole
generation process is guided by the probability
values and hence it is not possible to bias the algo-
rithm to produce utterances belonging to a particu-
lar theme.
In the subsequent sections, we explain the alterna-
tive approaches to tackle the above limitations.
</bodyText>
<page confidence="0.999472">
32
</page>
<sectionHeader confidence="0.972331" genericHeader="method">
3 Closest Syllable Patterns
</sectionHeader>
<bodyText confidence="0.999887333333334">
The existing approach uses the KNM Notation for
representing all words in the language. This pho-
netic representation is at the most basic level, i.e.,
alphabets, and hence can be used to represent all
words in the language. The KNM notation is gen-
erated by the melody analyzer and is used through-
out the system for generating sentences. Though
this representation scheme is at the most basic lev-
el, it does not help in cases where we are looking
for alternate or close matches. Thus, we need to
come up with a representation scheme at a higher
level of abstraction that will help us in providing
valid choices without compromising the require-
ments of the melody. To this end, we hereby pro-
pose to use elements from classic poetry metric
rules in Tamil Grammar (Bala et. al., 2003) as de-
fined in the oldest Tamil Grammar work, Tholkap-
piyam (Tholkappiyar, 5th Century B.C.).
</bodyText>
<subsectionHeader confidence="0.998069">
3.1 Meter in classical Tamil Poetry
</subsectionHeader>
<bodyText confidence="0.9999861">
Meter is the basic rhythmic structure of a verse and
the basic term that refers to Tamil meter is pA.
Each line in the poem is called an adi, which, in
turn, is made up of a certain number of metrical
feet known as the ceer (words/tokens). Each ceer
is composed of a certain metrical units called asai
(syllables) which are made up of letters (vowels
and consonants) that have certain intrinsic
length/duration, known as mAthirai. The above
entities are known as the core structural compo-
nents of a Tamil poem (Rajam, 1992)
The basic metrical unit asai is mostly based on
vowel length. There are two basic types of asai:
nEr asai (straightness) and niRai asai (in a row;
array). The nEr asai has the pattern (C)V(C)(C)
and niRai asai, (C)VCV(C)(C). These longest-
matching basic asai patterns are expanded to
represent non-monosyllabic words, but for our
needs, we use these two basic asai patterns for the
new representation scheme.
</bodyText>
<subsectionHeader confidence="0.999474">
3.2 asai-based Representation Scheme
</subsectionHeader>
<bodyText confidence="0.9978245">
In the new representation scheme, the constituents
of the KNM representation scheme are converted
to nEr or niRai asai before being sent to the Sen-
tence Generator module. The Sentence Generator
module, in turn, makes use of this new representa-
tion scheme for picking words as well as for find-
ing alternatives. In this new representation scheme,
a nEr asai is represented as Ne and a niRai asai is
represented as Ni.
The following table illustrates the mapping re-
quired for converting between the two representa-
tion schemes:
</bodyText>
<table confidence="0.915000222222222">
KNM Representation asai representation
K Ne
KM(0....2) Ne
N Ne
NM(0...2) Ne
KK Ni
KKM(0...2) Ni
KN Ni
KNM(0...2) Ni
</table>
<tableCaption confidence="0.998181">
Table 2. KNM to asai representation
</tableCaption>
<bodyText confidence="0.995270814814815">
For example, an output line such as, for example,
“KK KK KKK” in the old representation scheme
will be converted as “Ni Ni NiNe” in the new re-
presentation based on asai. This means that the
line should contain three ceer(words/tokens) and
the first word should be a nirai asai, second word
should be a nirai asai and the third word contains
two syllables with a nirai asai followed by nEr
asai.
This new representation scheme helps in coming
up with alternatives without affecting the metrical
needs of the melody as the alternatives have the
same mAthirai (length/duration). Thus, if we are
given a pattern such as “NiNe”, we have several
valid choices such as “KKK” (originally given),
“KKMK”, “KKMKM”, “KKN”, “KKMN” and
“KKMNM”. We can use words that match any of
the above patterns without compromising the dura-
tion imposed by the original music note. This way
of choosing alternatives is much better than using
the Edit Distance algorithm as it is based on the
original meter requirements as against matching
string patterns.
To use the previous example of “thA-ma-rai” (lo-
tus) (NKN) in this new representation scheme, we
get, “NeNi” and all the following words will
match:
</bodyText>
<page confidence="0.9891">
33
</page>
<table confidence="0.999514714285714">
Word KNM scheme
nE-ra-lai (straight wave) NKN
Sa-nj-nja-la-m (doubt) KMKKM
Ma-ng-ka-la-m (auspicious) KMKKM
a-m-bi-kai (goddess) KMKN
vE-ng-ka-ta-m (Venkatam – a NMKKM
name)
</table>
<tableCaption confidence="0.999663">
Table 3. NKN alternatives using asai representation
</tableCaption>
<bodyText confidence="0.9890254">
The above (valid) choices such as KMKKM,
NMKKM, etc. are not possible with just using the
Edit Distance algorithm. Thus, the architecture of
the system now consists of a new component for
this conversion (Figure 1)
</bodyText>
<figureCaption confidence="0.996473">
Figure 1. System Approach with new ASAI converter
</figureCaption>
<sectionHeader confidence="0.976175" genericHeader="method">
4 Knowledge-based Sentence Generation
</sectionHeader>
<bodyText confidence="0.999580071428571">
The goal of the Sentence Generation module is to
generate sentences matching the input pattern giv-
en in the new asai representation scheme. The ex-
isting system generated sentences based on the n-
Gram language model created from a text corpus
of poems and film songs. However, as explained
earlier, this can result in ungrammatical or mea-
ningless sentences being generated. In order to
overcome this limitation, the Sentence Generation
module is completely overhauled using a know-
ledge-based approach. A Tamil Morphology gene-
rator component, built in-house, is used to generate
grammatically correct sentences from this know-
ledge base.
</bodyText>
<subsectionHeader confidence="0.989749">
4.1 Knowledge Base
</subsectionHeader>
<bodyText confidence="0.999812">
The knowledge base consists of: (a) set of verbs
along with their selectional restriction rules (b)
hand-coded sub-categorization Ontology with
nouns and (c) list of adjectives and adverbs learned
from a text corpus.
</bodyText>
<subsubsectionHeader confidence="0.686747">
4.1.1 Verbs and Selectional Restrictions
</subsubsectionHeader>
<bodyText confidence="0.999960833333333">
Selectional restriction is defined as the right of the
verb to select its arguments. Verb is the nucleus of
a sentence and has the nature of choosing its argu-
ments. Any particular verb can take its arguments
only according to its selectional restriction con-
straints. When these constraints are violated, the
meaning of the sentence is affected. This violation
of selectional restriction rules may lead to semanti-
cally wrong sentences or figurative usages. Cor-
rectness of a sentence not only depends on the syn-
tactic correctness, but also with the semantic inter-
pretation of the sentence.
</bodyText>
<subsubsectionHeader confidence="0.797733">
4.1.2 Syntactic Classification
</subsubsectionHeader>
<bodyText confidence="0.999839947368421">
Verbs can be broadly classified into three divi-
sions, viz., monadic, dyadic and triadic verbs.
Monadic verbs can have only one argument - the
subject. Dyadic verbs can have two arguments -
subject and object. Triadic verbs can take three
arguments - subject, direct and indirect objects.
But there is no strict rule that the triadic verbs
should have all three arguments or the dyadic verbs
should have the two arguments filled. There can be
overlaps between these groups of verbs. Triadic
verb can drop the indirect object and have a Prepo-
sitional Phrase (PP) attached with the sentence.
Dyadic verb can drop the object and still give a
valid sentence. The verbs are grouped according to
the sub-categorization information of the subject
and object nouns. The sub-categorization features
are explained in the following section. At present,
we are using only Monadic and Dyadic verbs for
our sentence generation purposes.
</bodyText>
<subsectionHeader confidence="0.874089">
4.1.3 Sub-Categorization
</subsectionHeader>
<bodyText confidence="0.995201">
Sub-categorization features explain the nature of
the noun. The subject and object nouns are ana-
</bodyText>
<page confidence="0.995513">
34
</page>
<bodyText confidence="0.991399571428571">
lyzed using these features. These features may in-
clude the type of noun, its characteristics, state etc.
Sub-categorization information includes the fea-
tures such as [±animate], [±concrete], [±edible]
etc.
Some of the features and the meanings are listed
below:
</bodyText>
<figure confidence="0.697969153846154">
[+animate] All animals, human beings
[+human] All human beings
[+female] Animals/human beings of
feminine gender
[+solid] Things that are in solid state
[+vehicle] All vehicles
[+concrete] Things that physically exist
[-concrete] Things that do not physically
exist
[+edible] Things that can be eaten
[-edible] Things that cannot be eaten
[+movable] Things that are movable
[-movable] Things that are not movable
</figure>
<tableCaption confidence="0.989334">
Table 4. Sub-categorization Features
</tableCaption>
<subsectionHeader confidence="0.732297">
4.1.4 Ontology of Nouns
</subsectionHeader>
<bodyText confidence="0.9923602">
The sub-categorization features are used in the
formulation of general Ontology of Nouns. It is
made with respect to the usage of language. The
Ontology that is developed has the following sa-
lient features:
</bodyText>
<listItem confidence="0.998875666666666">
• It is a language-based Ontology originally
developed for English and has been cus-
tomized for Tamil
• Nodes in the Ontology are the actual sub-
categorization features of Nouns
• It is made according to the use of nouns in
the Tamil language
• Each node will have a list of nouns as en-
tries for that node
</listItem>
<bodyText confidence="0.97654">
The complete Ontology can be found in (Arulmoz-
hi, et. al., 2006)
</bodyText>
<subsectionHeader confidence="0.955704">
4.1.5 Contents of Knowledge Base
</subsectionHeader>
<bodyText confidence="0.965030285714286">
At present, the knowledge-base consists of 116
unique verbs, 373 selectional restriction rules and
771 Nouns in the Ontology.
The verbs list includes both cognitive as well as
non-cognitive verbs. Examples of verbs include
pAr (to see), kelY (to listen), vA (to come), thEtu
(to search), piti (to catch), po (to go), kal (to learn),
etc.
The selectional restriction rules are stored as fol-
lows:
Verb=&gt;subject_category;subject_case=&gt;object_c
ategory;object_case.
When a verb does not take any object, the keyword
[no_obj] is used to denote the same. In addition to
the subject and object categories, the rule also con-
tains the appropriate case markers to be used for
the subject and object nouns. This additional in-
formation is stored for use by the Morph Genera-
tion component.
Some examples of selectional restriction rules are
given below:
</bodyText>
<equation confidence="0.557785">
pAr=&gt;[+living,+animate,+vertebrate,+mammal,
+human];NOM=&gt;[no_obj]
pAr=&gt;[+living,+animate,+vertebrate,+mammal,
+human];NOM=&gt;
[+living,+animate,+vertebrate,+mammal,+human
];ACC
pi-
ti=&gt;[+living,+animate,+vertebrate,+mammal,+h
uman];NOM=&gt;[living,+concrete,+movable,+artif
act,+solid,+instrument,-
vehicle,+implements];NOM
pi-
ti=&gt;[+living,+animate,+vertebrate,+mammal,+h
uman];NOM=&gt;[no_obj]
</equation>
<bodyText confidence="0.999180166666667">
Here, ACC, NOM, DAT, etc. denote the case mark-
ers to be used for the subject and object nouns.
The 771 Nouns are stored across several files ac-
cording to their position in the Ontology. An On-
tology map is used to determine the list of nouns
present in a particular node position.
</bodyText>
<page confidence="0.99824">
35
</page>
<subsectionHeader confidence="0.609118">
4.1.6 Adjectives and Adverbs
</subsectionHeader>
<bodyText confidence="0.999792166666667">
In addition to the verbs and nouns mentioned
above, the knowledge-base also contains a list of
adjective-noun and adverb-verb bi-grams learnt
from a text corpus. This information is used to
augment the Sentence Generator with words from
these POS categories.
</bodyText>
<subsectionHeader confidence="0.985269">
4.2 Tamil Morphological Generator
</subsectionHeader>
<bodyText confidence="0.999970823529412">
Tamil is a densely agglutinative language and dis-
plays a unique structural formation of words by the
addition of suffixes representing various senses or
grammatical categories, to the roots or stems. The
senses such as person, number, gender and case are
linked to a noun root in an orderly fashion. The
verbal categories such as transitive, causative,
tense and person, number and gender are added to
a verbal root or stem. Thus, with the given know-
ledge-base and a Tamil Morphological generator
component one can generate grammatically correct
sentences.
We use the Tamil Morphological Generator com-
ponent (Menaka et. al., 2010) to generate inflec-
tions of subject/object nouns with appropriate
number &amp; case and the verbs with person, number
and gender suffixes.
</bodyText>
<subsectionHeader confidence="0.999747">
4.3 Sentence Generation
</subsectionHeader>
<bodyText confidence="0.999991454545454">
Given a line in asai representation scheme, the
sentence generation module is responsible for ge-
nerating a grammatically correct and meaningful
sentence matching the given asai scheme. It
achieves the same by using the knowledge-base
along with the Tamil Morphology Generator com-
ponent (Figure 2). In addition to the asai represen-
tation, the module also accepts the tense in which
the sentence must be written. The rest of the para-
meters such as person, gender and case are auto-
matically deduced by the module.
</bodyText>
<figureCaption confidence="0.998967">
Figure 2. Sentence Generator module
</figureCaption>
<bodyText confidence="0.9971795">
The algorithm for generating a matching sentence
is as follows:
</bodyText>
<listItem confidence="0.695275647058824">
1. Pick a selectional restriction rule, R in random
2. For each noun, SUB_N in subject_category of
rule, R:
2.1 Guess the gender for SUB_N based on sub-
ject_category
2.2 For each noun, OBJ_N in object_category:
2.2.1 Use Morphology Generator component
to get morphed nouns &amp; verbs based on tense, per-
son, gender and case.
2.2.2 Generate sentences of the form [SUB_N]
[OBJ_N] [VERB]
2.2.3 Add adjectives or adverbs, if needed
2.2.4 Repeat words, if needed
2.2.4 Add to list of sentences generated
3. Check the list of sentences against the asai pat-
tern. If matches, return sentence. Otherwise, go to
step 1.
</listItem>
<tableCaption confidence="0.994343">
Table 5. Sentence Generation Algorithm
</tableCaption>
<page confidence="0.998103">
36
</page>
<bodyText confidence="0.987394333333333">
Details about steps such as matching against asai
pattern, gender identification, word repetition and
adding adjectives/adverbs are explained below.
</bodyText>
<subsectionHeader confidence="0.951035">
4.3.1 Matching against asai pattern
</subsectionHeader>
<bodyText confidence="0.999961916666667">
The list of sentences generated from the module
are compared against the given asai pattern. The
matching could either be an exact match or a re-
ordered match. That is, since Tamil is a relatively
free word-order language, the generated sentence
can also be re-ordered, if required, to match the
given asai pattern. However, when adjectives or
adverbs are added to the sentence, they need to
maintain their position in front of the noun or verb
respectively and hence they are not re-ordered. For
now, we do not weight the sentences and hence
return the first matching sentence.
</bodyText>
<subsubsectionHeader confidence="0.837843">
4.3.2 Gender Identification
</subsubsectionHeader>
<bodyText confidence="0.999932473684211">
As noted in the algorithm, the gender needs to be
automatically guessed. In Tamil, the gender of the
subject is denoted by the appropriate suffix in the
verb. If a personal pro-noun such as nAnY (I) or nI
(you) is used as subject, then any of masculine or
feminine gender can be used without affecting the
grammatical correctness of the verb. In this case,
the program uses the default value of masculine
gender. If the subject is not a personal pronoun, the
gender for the verb is guessed based on the sub-
ject_category of the subject noun. If the sub-
ject_category explicitly mentions [+human,
+living, +female,...], then feminine gender is re-
turned. If the subject_category explicitly mentions
[+human, +living, -female,...], then masculine
gender is returned. Otherwise, if [+human,
+living,...] is present, but there is no explicit men-
tion of +female or –female, it defaults to honorific
suffix. In all other cases, neuter gender is returned.
</bodyText>
<subsectionHeader confidence="0.996671">
4.3.3 Adding adjectives and adverbs
</subsectionHeader>
<bodyText confidence="0.999925222222222">
The Sentence Generator module using the selec-
tional restriction rules can only create sentences of
the form “[subject] [object] [verb]”. However,
typical lyrics will not always contain just three
word sentences and thus, the ability to put more
words in a sentence generated by our system is
required. In such cases, a look-up list of adjectives
and adverbs is used for filling the additional words
required by the syllable pattern. This look-up list is
generated from a POS-tagged text corpus from
which the list of adjective-noun, adverb-verb bi-
grams are added to the look-up list. Whenever a
sentence needs more than three words, this look-up
list is consulted to generate sentences that add the
relevant adjectives to subject or object nouns and
relevant adverbs before the verb. Each possible
combination of such sentences is generated and
added to the list of sentences.
</bodyText>
<subsectionHeader confidence="0.62632">
4.3.4 Word repetition
</subsectionHeader>
<bodyText confidence="0.999980555555556">
An additional approach to handle lines with more
than three words is to repeat certain words already
present in the “[subject] [object] [verb]” output. If
an adjective or adverb is already added to the sen-
tence, then preference for repetition is given to the
adjective/adverb subject to the constraints of the
input asai scheme. Otherwise, the verb is chosen
for repetition. Finally, the subject and object nouns
are considered.
</bodyText>
<sectionHeader confidence="0.999707" genericHeader="evaluation">
5 Experiments
</sectionHeader>
<bodyText confidence="0.999650071428571">
The goal of the experiment was to validate whether
the sentences generated using the Knowledge-
based approach are more grammatical and mea-
ningful than the n-Gram approach. In order to test
this hypothesis, a set of 10 syllable patterns was
given to the old n-Gram system and 30 sentences
were generated from them. The new knowledge-
based approach was also given the syllable patterns
and the resulting 32 sentences were collected. In
order to avoid any bias, these 62 sentences were
interleaved in a single document and this document
was given to five human evaluators for scoring
each sentence. The scoring methodology is as fol-
lows:
</bodyText>
<table confidence="0.322567888888889">
Score Meaning
1 Incorrect
2 Grammatically perfect, but no mean-
ing at all
3 Grammatically correct but only par-
tially meaningful
4 Both Grammar and Meaning are only
partially correct
5 Perfect
</table>
<tableCaption confidence="0.659881">
Table 6. Scoring methodology
</tableCaption>
<bodyText confidence="0.9188275">
Based on the scores given by the human evalua-
tors, the sentences generated using the n-Gram ap-
</bodyText>
<page confidence="0.998016">
37
</page>
<bodyText confidence="0.998207125">
proach scored an average of 2.06, whereas the sen-
tences generated using the knowledge-based ap-
proach scored an average of 4.13. This clearly de-
monstrates that the new approach results in consis-
tently more grammatical and meaningful sen-
tences.
A break-down of statistics based on the scores giv-
en by each evaluator is given below (Table 7):
</bodyText>
<table confidence="0.998892307692308">
E-1 E-2 E-3 E-4 E-5
Avg. Score 4.5 4.38 4.06 4.09 3.63
(KB)*
Avg. Score (n- 2.37 1 3.3 2.13 1.5
G) *
# Sentences 25 25 23 20 14
scoring 5 (KB)
# Sentences 6 0 14 1 0
scoring 5 (n-G)
# Sentences 2 0 7 4 7
scoring 1 (KB)
# Sentences 16 30 11 19 25
scoring 1 (n-G)
</table>
<tableCaption confidence="0.996405">
Table 7. Detailed Statistics
</tableCaption>
<bodyText confidence="0.997033708333333">
*KB = Knowledge-based approach and n-G = n-
Gram based approach.
A subset of syllable patterns given to the system
and the sentences generated by the system are giv-
en below:
(neengal-You piditheergal-caught kaiyai-hand)
(You caught the hand)
Here, the sentence “rAjA-King nadanathai-dance
kEttAr-listened” (The King listened to the dance) is
generated due to the fact that the noun dance is
taken from the Ontology node “content” that also
contains nouns for music, drama, etc. for which the
verb listen matches perfectly. Thus, this semanti-
cally meaningless sentence is generated due to the
present sub-categorization levels of the nouns On-
tology. In addition to this, Ontology based genera-
tion can also create semantically meaningless sen-
tences when a verb has more than one sense and
the appropriate sense is not taken into considera-
tion.
The next sentence “neengal-You piditheergal-
caught kaiyai-hand” (You caught the hand) is an
example of a sentence in which the verb and object
noun were re-ordered to match the input pattern.
</bodyText>
<sectionHeader confidence="0.996459" genericHeader="conclusions">
6 Limitations and Future Work
</sectionHeader>
<bodyText confidence="0.999945173913044">
From the initial set of experiments, we see that the
knowledge-based approach results in generating
grammatically correct and mostly meaningful sen-
tences. Also, unlike the Edit Distance algorithm,
the new asai representation scheme consistently
provides valid choices and alternatives for syllable
patterns, thus resulting in better coverage.
We are also currently working on introducing co-
hesion across multiple lines of the verse by (a)
grouping related verbs, (b) using semantically re-
lated verbs (such as Synonym, Antonym, Hy-
ponym, etc.) from previous sentences and (c) pick-
ing rules that can result in using the same subject
or object.
The main drawback of the current knowledge-
based approach is the lack of poetic sentences and
hence the poetic aspect of the verse needs im-
provement. Although we attempt to introduce
structural poeticness by rhyme and repetition, the
content aspect of the poem remains a bottleneck
given our approach of using selectional restriction
rules that does not lend well for figurative sen-
tences.
</bodyText>
<figure confidence="0.993282538461538">
Input NM KKMKMKMK
KMNM
Intermediate Form Ne NiNeNeNe NeNe
Sentences
(nAm-we arangathukku-stadium vanthOm-came)
(We came to the stadium)
(nee-You siraichAlaikku-prison vanthAi-came)
(You came to the prison)
Input NN KKNN NMNM
Intermediate Form NeNe NiNeNe NeNe
Sentences
(* rAjA-King nadanathai-dance kEttAr-listen)
(The King listened to the dance)
</figure>
<page confidence="0.995238">
38
</page>
<sectionHeader confidence="0.995471" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.99953134375">
Ananth Ramakrishnan, Sankar Kuppan, and Sobha Lali-
tha Devi. 2009. Automatic Generation of Tamil Lyr-
ics for Melodies. Proceedings of the Workshop on
Computational Approaches to Linguistic Creativity,
CALC&apos;09, Boulder, Colorado:40-46.
Arulmozhi P, Sobha. L. 2006. Semantic Tagging for
Language Processing. 34th All India conference for
Dravidian Linguistics (June 22-24, 2006), Trivan-
drum, India.
Bala Sundara Raman L, Ishwar S, and Sanjeeth Kumar
Ravindranath. 2003. Context Free Grammar for Nat-
ural Language Constructs – An implementation for
Venpa Class of Tamil Poetry. 6th International Tamil
Internet Conference and Exhibition, Tamil Internet
2003 (August 22-24, 2003), Chennai, India.
Guido Gonzato. 2003. The ABCPlus Project
http://abcplus.sourceforge.net.
Hisar Maruli Manurung. 2004. An evolutionary ap-
proach to poetry generation. Ph.D. Thesis, Universi-
ty of Edinburg.
Menaka S, Vijay Sundar Ram, and Sobha Lalitha Devi.
2010. Morphological Generator for Tamil. Proceed-
ings of the Knowledge Sharing event on Morpholog-
ical Analysers and Generators (March 22-23, 2010),
LDC-IL, Mysore, India:82-96.
Rajam V.S. 1992. A Reference Grammar of Classical
Tamil Poetry (150 B.C.-pre-5th/6th century A.D.).
Memoirs of the American Philosophical Society,
Philadelphia: 113-240.
Tholkaappiyar. 5th Century B.C. Tholkaapiyam -
http://www.tamil.net/projectmadurai/pub/pm0100/tol
kap.pdf.
</reference>
<page confidence="0.999515">
39
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.419714">
<title confidence="0.998954">An alternate approach towards meaningful lyric generation in Tamil</title>
<author confidence="0.984753">Ananth Ramakrishnan A Sobha Lalitha Devi</author>
<affiliation confidence="0.9977415">AU-KBC Research MIT Campus of Anna</affiliation>
<address confidence="0.835964">Chennai, India</address>
<affiliation confidence="0.987896">AU-KBC Research MIT Campus of Anna</affiliation>
<address confidence="0.966733">Chennai, India</address>
<email confidence="0.906477">ananthrk@au-kbc.orgsobha@au-kbc.org</email>
<abstract confidence="0.9717895">This paper presents our on-going work to improve the lyric generation component of the Automatic Lyric Generation system for the Tamil Language. An earlier version of the system used an n-gram based model to generate lyrics that match the given melody. This paper identifies some of the deficiencies in the melody analysis and text generation components of the earlier system and explains the new approach used to tackle those drawbacks. The two central approaches discussed in this paper are: (1) An improved mapping scheme for matching melody with words and (2) Knowledge-based Text Generation algorithm based on an existing Ontology and Tamil Morphology Generator.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Ananth Ramakrishnan</author>
<author>Sankar Kuppan</author>
<author>Sobha Lalitha Devi</author>
</authors>
<title>Automatic Generation of Tamil Lyrics for Melodies.</title>
<date>2009</date>
<booktitle>Proceedings of the Workshop on Computational Approaches to Linguistic Creativity, CALC&apos;09,</booktitle>
<location>Boulder, Colorado:40-46.</location>
<marker>Ramakrishnan, Kuppan, Devi, 2009</marker>
<rawString>Ananth Ramakrishnan, Sankar Kuppan, and Sobha Lalitha Devi. 2009. Automatic Generation of Tamil Lyrics for Melodies. Proceedings of the Workshop on Computational Approaches to Linguistic Creativity, CALC&apos;09, Boulder, Colorado:40-46.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L</author>
</authors>
<title>Semantic Tagging for Language</title>
<date>2006</date>
<booktitle>Processing. 34th All India conference for Dravidian Linguistics</booktitle>
<location>Trivandrum, India.</location>
<marker>L, 2006</marker>
<rawString>Arulmozhi P, Sobha. L. 2006. Semantic Tagging for Language Processing. 34th All India conference for Dravidian Linguistics (June 22-24, 2006), Trivandrum, India.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Bala Sundara Raman L</author>
<author>S Ishwar</author>
<author>Sanjeeth Kumar Ravindranath</author>
</authors>
<title>Context Free Grammar for Natural Language Constructs – An implementation for Venpa Class of Tamil Poetry.</title>
<date>2003</date>
<booktitle>6th International Tamil Internet Conference and Exhibition, Tamil Internet</booktitle>
<location>Chennai, India.</location>
<marker>L, Ishwar, Ravindranath, 2003</marker>
<rawString>Bala Sundara Raman L, Ishwar S, and Sanjeeth Kumar Ravindranath. 2003. Context Free Grammar for Natural Language Constructs – An implementation for Venpa Class of Tamil Poetry. 6th International Tamil Internet Conference and Exhibition, Tamil Internet 2003 (August 22-24, 2003), Chennai, India.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Guido Gonzato</author>
</authors>
<date>2003</date>
<booktitle>The ABCPlus Project http://abcplus.sourceforge.net.</booktitle>
<contexts>
<context position="1584" citStr="Gonzato, 2003" startWordPosition="246" endWordPosition="247">on In an attempt to define poetry (Manurung, 2004), provides three properties for a natural language artifact to be considered a poetic work, viz., Meaningfulness (M), Grammaticality (G) and Poeticness (P). A complete poetry generation system must generate texts that adhere to all the three properties. (Ananth et. al., 2009) explains an approach for automatically generating Tamil lyrics, given a melody, which attempts to generate meaningful lyrics that match the melody. The existing approach (Ananth et. al., 2009) to automatically generate Tamil lyrics that match the given tune in ABC format (Gonzato, 2003) involves two steps. The first step is to analyze the input melody and output a series of possible syllable patterns in KNM representation scheme - a scheme for representing all words in the language, where, K stands for Kuril ((C)V, where V is a 31 short vowel), N stands for Nedil ((C)V, where V is a long vowel) and M stands for Mei or Ottru (consonants) - that match the given melody, along with tentative word and sentence boundary. This melody analysis system was trained with sample film songs and their corresponding lyrics collected from the web. The tunes were converted to ABC Notation (Go</context>
</contexts>
<marker>Gonzato, 2003</marker>
<rawString>Guido Gonzato. 2003. The ABCPlus Project http://abcplus.sourceforge.net.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hisar Maruli Manurung</author>
</authors>
<title>An evolutionary approach to poetry generation.</title>
<date>2004</date>
<tech>Ph.D. Thesis,</tech>
<institution>University of Edinburg.</institution>
<contexts>
<context position="1020" citStr="Manurung, 2004" startWordPosition="157" endWordPosition="158">ystem for the Tamil Language. An earlier version of the system used an n-gram based model to generate lyrics that match the given melody. This paper identifies some of the deficiencies in the melody analysis and text generation components of the earlier system and explains the new approach used to tackle those drawbacks. The two central approaches discussed in this paper are: (1) An improved mapping scheme for matching melody with words and (2) Knowledge-based Text Generation algorithm based on an existing Ontology and Tamil Morphology Generator. 1 Introduction In an attempt to define poetry (Manurung, 2004), provides three properties for a natural language artifact to be considered a poetic work, viz., Meaningfulness (M), Grammaticality (G) and Poeticness (P). A complete poetry generation system must generate texts that adhere to all the three properties. (Ananth et. al., 2009) explains an approach for automatically generating Tamil lyrics, given a melody, which attempts to generate meaningful lyrics that match the melody. The existing approach (Ananth et. al., 2009) to automatically generate Tamil lyrics that match the given tune in ABC format (Gonzato, 2003) involves two steps. The first step </context>
</contexts>
<marker>Manurung, 2004</marker>
<rawString>Hisar Maruli Manurung. 2004. An evolutionary approach to poetry generation. Ph.D. Thesis, University of Edinburg.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Menaka</author>
<author>Vijay Sundar Ram</author>
<author>Sobha Lalitha Devi</author>
</authors>
<title>Morphological Generator for Tamil.</title>
<date>2010</date>
<journal>LDC-IL, Mysore,</journal>
<booktitle>Proceedings of the Knowledge Sharing event on Morphological Analysers and Generators</booktitle>
<pages>82--96</pages>
<marker>Menaka, Ram, Devi, 2010</marker>
<rawString>Menaka S, Vijay Sundar Ram, and Sobha Lalitha Devi. 2010. Morphological Generator for Tamil. Proceedings of the Knowledge Sharing event on Morphological Analysers and Generators (March 22-23, 2010), LDC-IL, Mysore, India:82-96.</rawString>
</citation>
<citation valid="true">
<authors>
<author>V S Rajam</author>
</authors>
<title>A Reference Grammar of Classical Tamil Poetry (150 B.C.-pre-5th/6th century A.D.).</title>
<date>1992</date>
<journal>Memoirs of the American Philosophical Society,</journal>
<pages>113--240</pages>
<location>Philadelphia:</location>
<contexts>
<context position="8366" citStr="Rajam, 1992" startWordPosition="1388" endWordPosition="1389">work, Tholkappiyam (Tholkappiyar, 5th Century B.C.). 3.1 Meter in classical Tamil Poetry Meter is the basic rhythmic structure of a verse and the basic term that refers to Tamil meter is pA. Each line in the poem is called an adi, which, in turn, is made up of a certain number of metrical feet known as the ceer (words/tokens). Each ceer is composed of a certain metrical units called asai (syllables) which are made up of letters (vowels and consonants) that have certain intrinsic length/duration, known as mAthirai. The above entities are known as the core structural components of a Tamil poem (Rajam, 1992) The basic metrical unit asai is mostly based on vowel length. There are two basic types of asai: nEr asai (straightness) and niRai asai (in a row; array). The nEr asai has the pattern (C)V(C)(C) and niRai asai, (C)VCV(C)(C). These longestmatching basic asai patterns are expanded to represent non-monosyllabic words, but for our needs, we use these two basic asai patterns for the new representation scheme. 3.2 asai-based Representation Scheme In the new representation scheme, the constituents of the KNM representation scheme are converted to nEr or niRai asai before being sent to the Sentence G</context>
</contexts>
<marker>Rajam, 1992</marker>
<rawString>Rajam V.S. 1992. A Reference Grammar of Classical Tamil Poetry (150 B.C.-pre-5th/6th century A.D.). Memoirs of the American Philosophical Society, Philadelphia: 113-240.</rawString>
</citation>
<citation valid="false">
<booktitle>Tholkaappiyar. 5th Century B.C. Tholkaapiyam -http://www.tamil.net/projectmadurai/pub/pm0100/tol kap.pdf.</booktitle>
<marker></marker>
<rawString>Tholkaappiyar. 5th Century B.C. Tholkaapiyam -http://www.tamil.net/projectmadurai/pub/pm0100/tol kap.pdf.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>