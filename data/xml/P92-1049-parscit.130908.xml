<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.001652">
<title confidence="0.800777">
ELABORATION IN OBJECT DESCRIPTIONS THROUGH EXAMPLES
</title>
<author confidence="0.975275">
Vibhu 0. Mittal
</author>
<affiliation confidence="0.969667">
Department of Computer Science USC/Information Sciences Institute
University of Southern California 4676 Admiralty Way
</affiliation>
<address confidence="0.699343">
Los Angeles, CA 90089 Marina del Rey, CA 90292
</address>
<sectionHeader confidence="0.933966" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.966844909090909">
Examples are often used along with textual descrip-
tions to help convey particular ideas - especially in
instructional or explanatory contexts. These accompa-
nying examples reflect information in the surrounding
text, and in turn, also influence the text. Sometimes,
examples replace possible (textual) elaborations in the
description. It is thus clear that if object descriptions
are to be generated, the system must incorporate strate-
gies to handle examples. In this work, we shall inves-
tigate some of these issues in the generation of object
descriptions.
</bodyText>
<sectionHeader confidence="0.997834" genericHeader="introduction">
INTRODUCTION
</sectionHeader>
<bodyText confidence="0.928156121212121">
There is little doubt that people find examples very ben-
eficial in descriptions of new or complex objects, rela-
tions, or processes. Various studies have shown that the
inclusion of examples in instructional material signifi-
cantly increases user comprehension (for e.g., (Houtz,
Moore &amp; Davis, 1973; MacLachlan, 1986; Pirolli,
1991; Reder, Charney &amp; Morgan, 1986; Tbnnyson
&amp; Park, 1980)). Users like examples because exam-
ples tend to put abstract, theoretical information into
concrete terms they can understand. Few generation
systems have attempted to make significant use of ex-
amples, however. In particular, most systems have
not integrated examples in the textual descriptions, but
have used them mostly on their own, independently of
the explanation that may also have been provided at
that point. However, examples cannot be generated in
isolation, but must form an integral part of the descrip-
tion, supporting the text they help to illustrate.
Most previous work (especially in the context of
tutoring systems) focused on the issue offinding useful
examples (for e.g., Rissland&apos;s CEG system (1981) and
Ashley&apos;s HYPO system (Ashley, 1991; Rissland &amp;
Ashley, 1986; Rissland, 1983)). Work by Woolf and
her colleagues considered issues in the generation of tu-
torial discourse, including the use of examples (Woolf
&amp; McDonald, 1984; Woolf &amp; Murray, 1987), but their
analysis did not address specific issues of integrated
example and language generation.
In this paper, we build upon some of these stud-
ies and describe the issues in generating descriptions
which include examples in a coordinated, coherent
fashion, such that they complement and support each
other.
</bodyText>
<sectionHeader confidence="0.872189" genericHeader="method">
AN EXAMPLE
</sectionHeader>
<bodyText confidence="0.9959932">
Consider for instance, the example in Figure 1, from
a well known introductory book on the programming
language LISP. It describes an object (a data structure)
called a &amp;quot;list.&amp;quot; There are a number of issues that can
be immediately seen to be relevant:
</bodyText>
<listItem confidence="0.819404625">
1. Should the system choose to elaborate on the object
attributes in text, or through the use of examples?
For instance, the information in Figure 1 could also
have been expressed textually as: &amp;quot;A list always be-
gins with a left parenthesis. Then come zero or more
pieces of data (called the elements of a list), and a
right parenthesis. Data elements can be of any LISP
type, including numbers, symbols and strings&amp;quot;. In
</listItem>
<bodyText confidence="0.956815111111111">
the figure, the examples are used to elaborate on two
aspects of the data-elements: the variable number
of the elements, and the different types of which
these elements may belong to. In some contexts, the
examples tend to re-iterate certain aspects (in this
case, the number was mentioned in the explanation
as well), while in others, the examples tend to elab-
orate on aspects that are not mentioned explicitly in
the description (in our case, the type information).
</bodyText>
<listItem confidence="0.879614666666667">
2. Should the system use one example, or multiple ex-
amples? Consider for instance, the following exam-
ple of a LISP list:
</listItem>
<bodyText confidence="0.65769275">
(FORMAT T &amp;quot;-2% A A A&amp;quot; 12345678
&apos;James &apos;Smith (address person))
It is not entirely obvious that single examples of the
type above are always the most appropriate ones,
</bodyText>
<page confidence="0.996284">
315
</page>
<bodyText confidence="0.93233625">
A list always begins with a left parenthesis. Then come
zero or more pieces of data (called the elements of a
list) and a right parenthesis. Some examples of lists
are:
</bodyText>
<figure confidence="0.9886608">
(AARDVARK) ;;; an atom
(RED YELLOW GREEN BLUE);;; many atoms
(2351119) ;;;numbers
(3 FRENCH FRIES) ;;;atoms &amp; numbers
A list may contain other lists as elements. Given the
three lists:
(BLUE SKY) (GREEN GRASS) (BROWN EARTH)
we can make a list by combining them all with a
parentheses.
((BLUE SKY) (GREEN GRASS) (BROWN EARTH))
</figure>
<figureCaption confidence="0.987088">
Figure 1: A description of the object LIST using ex-
amples (From (Touretzky, 1984), p.35)
</figureCaption>
<figure confidence="0.991202181818182">
DESCRIBE-LIST
LEABeRATIOU
PEATTES
DATA ELEMENTS
MT SYNTACTIC
FEKTURES
PARENTHESIS DATA ELEMENTS
NI NI
INFORM--
&amp;quot;Zero or more
please of &amp;AP
</figure>
<figureCaption confidence="0.608089">
Figure 2: Plan skeleton for listing the main features of
a LIST.
</figureCaption>
<figure confidence="0.999194875">
=Ira
&apos;A List begins
veth a loft
psnorahasis•
IUGHTPARENTHESIS
N
ght
prentheAls&amp;quot;
MGM
EXAMPLE
JODIE
N
NUMBER TYPE
RACIDECDO
PRESENT PRESENT
RAI:X(1E01M!) LIST OP
LISTS usrs
GENERATE MINER/CIE GENERATE
EXAMPLE EXAMPLE EXAMPLE
-NUMBERS /010113+ SUB-LIRS
NUMBERS
DESCRIBE
COMPLEX
EXAMPLE
</figure>
<figureCaption confidence="0.982153533333333">
even though such examples are frequently seen in
technical reference material. The system must there-
fore be able to make reasonable decisions regarding
the granularity of information to be included in each
example and structure its presentation accordingly.
3. If there are multiple examples that are to be pre-
sented, their order of presentation is important too.
Studies has shown that users tend to take into ac-
count the sequence of the examples as a source of
implicit information about the examples (Carnine,
1980; Litchfield, Driscoll &amp; Dempsey, 1990; Ten-
nyson, Steve &amp; Boutwell, 1975). For instance, in
Figure 1, the first and second examples taken to-
gether illustrate the point that the number of data
elements is not important.
</figureCaption>
<bodyText confidence="0.990495833333333">
4. When are &apos;prompts&apos; necessary? Examples often
have attention focusing devices such as arrows,
marks, or as in the Figure 1, extra text, associated
with them. These help the user disambiguate the
salient from the irrelevant. What information should
be included in the prompts, and in the case of text,
how should be be phrased?
5. How should the example be positioned with respect
to the text? Studies of instructional texts reveal that
examples can occur before the text (and the text
elaborates upon the example), within the text, or (as
in our figure), after the text (Feldman, 1972).
There are other issues that need to be considered
in an integrated framework — some of these that affect
most of the issues raised above are the audience-type,
the knowledge-type (whether the concept being de-
scribed is a noun or a relation for instance) and the
text-type (tutorial vs. reference vs. report, etc). The
</bodyText>
<figure confidence="0.986777111111111">
awes=
EXAMS-
ANGLE ILEMENT MULTIPLE
ELEMENTS
GEPERATE GINEILATE EXAMPLE
GENERATE
EXAMPLE PROMPT - AVMS
I
INFORM BOOM
</figure>
<figureCaption confidence="0.9877355">
Figure 3: Partial text plan for generating the LIST
examples.
</figureCaption>
<bodyText confidence="0.947337">
issue of how the examples are selected (generated vs.
retrieved is also an important issue, but we shall not
discuss that here.
</bodyText>
<sectionHeader confidence="0.989673" genericHeader="method">
STATUS OF WORK
</sectionHeader>
<bodyText confidence="0.795298333333333">
We are investigating these issues by implementing a
system that can generate examples within explanatory
contexts (within the EES framework (Neches, Swartout
&amp; Moore, 1985; Swartout &amp; Smoliar, 1987)) using the
Moore-Paris planner (1992, 1991) for discourse gener-
ation. Our initial system is for the automatic generation
of documentation for small sub-sets of programming
languages. One reason for this choice is that it al-
lows us to study a variety of example-rich texts in a
</bodyText>
<page confidence="0.998364">
316
</page>
<bodyText confidence="0.9999638">
relatively unambiguous domain. A partial text-plan
generated by our planner for the description given in
Figure 1 is given in Figures 2 and 3. It shows some of
the communicative goals that the planner needs to be
able to satisfy in order to generate some of the simple
object descriptions in our application. These descrip-
tions can make use of examples (instead of text) to
list and describe feature elaborations, or use them in
conjunction with a textual description to clarify and
illustrate various points.
Among issues that we plan to study are the differ-
ences between opportunistic generation of examples
and top-down planning of text with examples, and the
effects arising from differences in the knowledge type,
the text-type and other sources of information.
</bodyText>
<sectionHeader confidence="0.992251" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.999108">
Thanks to Cdcile Paris for critical discussions, different
perspectives and bright ideas. This work was supported
in part by the NASA-Ames grant NCC 2-520 and under
DARPA contract DABT63-91-C-0025.
</bodyText>
<sectionHeader confidence="0.835597" genericHeader="references">
References
</sectionHeader>
<bodyText confidence="0.998955363636364">
Ashley, K. D. (1991). Reasoning with cases and hy-
potheticals in HYPO. International Journal of
Man-Machine Studies, 34(6), 753-796.
Camine, D. W. (1980). Two Letter Discrimination Se-
quences: High-Confusion-Alternatives first ver-
sus Low-Confusion-Alternatives first. Journal of
Reading Behaviour, XII(1), 41-47.
Feldman, K. V. (1972). The effects of the number
of positive and negative instances, concept def-
initions, and emphasis of relevant attributes on
the attainment of mathematical concepts. In Pro-
</bodyText>
<reference confidence="0.982746702702703">
ceedings of the Annual Meeting of the American
Educational Research Association, Chicago, Illi-
nois.
Houtz, J. C., Moore, J. W., &amp; Davis, J. K. (1973). Ef-
fects of Different Types of Positive and Negative
Examples in Learning &amp;quot;non-dimensioned&amp;quot; Con-
cepts. Journal of Educational Psychology, 64(2),
206-211.
Litchfield, B. C., Driscoll, M. P., &amp; Dempsey, J. V.
(1990). Presentation Sequence and Example Dif-
ficulty: Their Effect on Concept and Rule Learn-
ing in Computer-Based Instruction. Journal of
Computer-Based Instruction, 17(1), 35-40.
MacLachlan, J. (1986). Psychologically Based Tech-
niques for Improving Learning within Comput-
erized Tutorials. Journal of Computer-Based In-
struction, 13(3), 65-70.
Moore, J. D. &amp; Paris, C. L. (1991). Discourse Struc-
ture for Explanatory Dialogues. Presented at the
Fall AAAI Symposium on Discourse Structure in
Natural Language Understanding and Generation.
Moore, J. D. &amp; Paris, C. L. (1992). User models and
dialogue: An integrated approach to producing
effective explanations. To appear in the &apos;User
Model and User Adapted Interaction Journal&apos;.
Neches, R., Swartout, W. R., &amp; Moore, J. D. (1985).
Enhanced Maintenance and Explanation of Ex-
pert Systems Through Explicit Models of Their
Development. IEEE Transactions on Software
Engineering, SE-11(11), 1337-1351.
Pirolli,R (1991). Effects of Examples and Their Expla-
nations in a Lesson on Recursion: A Production
System Analysis. Cognition and Instruction, 8(3),
207-259.
Reder, L. M., Chamey, D. H., &amp; Morgan, K. I. (1986).
The Role of Elaborations in learning a skill from
an Instructional Text. Memory and Cognition,
14(1), 64-78.
Rissland, E. L. (1981). Constrained Example Genera-
tion. COINS Technical Report 81-24, Department
of Computer and Information Science, University
of Massachusetts, Amherst, MA.
Rissland, E. L. (1983). Examples in Legal Reason-
ing: Legal Hypotheticals. In Proceedings of the
International Joint Conference on Artificial Intel-
ligence, (pp. 90-93)., Karlsruhe, Germany.
Rissland, E. L. &amp; Ashley, K. D. (1986). Hypothet-
icals as Heuristic Device. In Proceedings of
the National Conference on Artificial Intelligence
(AAAI-86), (pp. 289-297).
Swartout, W. &amp; Smoliar, S. W. (1987). Explaining the
link between causal reasoning and expert behav-
ior. In Proceedings of the Symposium on Com-
puter Applications in Medical Care, Washington,
D. C.
Tennyson, R. D. &amp; Park, 0.-C. (1980). The Teaching
of Concepts: A Review of Instructional Design
Research Literature. Review of Educational Re-
search, 50(1), 55-70.
Tomyson, R. D., Steve, M., &amp; Boutwell, R. (1975).
Instance Sequence and Analysis of Instance At-
tribute Representation in Concept Acquisition.
Journal of Educational Psychology, 67 , 821-827.
lburetzky, D. S. (1984). LISP: A Gentle Introduction
to Symbolic Computation. New York: Harper &amp;
Row Publishers.
Woolf, B. &amp; McDonald, D. D. (1984). Context-
Dependent Transitions in Tutoring Discourse. In
Proceedings of the Third National Conference on
Artificial Intelligence (AAAI-84), (pp. 355-361).
Woolf, B. &amp; Murray, T. (1987). A Framework for
Representing Tutorial Discourse. In Proceedings
of the Tenth International Joint Conference on
Artificial Intelligence, (pp. 189-192).
</reference>
<page confidence="0.998619">
317
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.851648">
<title confidence="0.996987">ELABORATION IN OBJECT DESCRIPTIONS THROUGH EXAMPLES</title>
<author confidence="0.995554">Vibhu</author>
<affiliation confidence="0.951994">Department of Computer Science USC/Information Sciences Institute University of Southern California 4676 Admiralty Way</affiliation>
<address confidence="0.99983">Los Angeles, CA 90089 Marina del Rey, CA 90292</address>
<abstract confidence="0.995658833333333">Examples are often used along with textual descriptions to help convey particular ideas especially in instructional or explanatory contexts. These accompanying examples reflect information in the surrounding text, and in turn, also influence the text. Sometimes, examples replace possible (textual) elaborations in the description. It is thus clear that if object descriptions are to be generated, the system must incorporate strategies to handle examples. In this work, we shall investigate some of these issues in the generation of object descriptions.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="false">
<booktitle>ceedings of the Annual Meeting of the American Educational Research Association,</booktitle>
<location>Chicago, Illinois.</location>
<marker></marker>
<rawString>ceedings of the Annual Meeting of the American Educational Research Association, Chicago, Illinois.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J C Houtz</author>
<author>J W Moore</author>
<author>J K Davis</author>
</authors>
<title>Effects of Different Types of Positive and Negative Examples in Learning &amp;quot;non-dimensioned&amp;quot;</title>
<date>1973</date>
<journal>Concepts. Journal of Educational Psychology,</journal>
<volume>64</volume>
<issue>2</issue>
<pages>206--211</pages>
<marker>Houtz, Moore, Davis, 1973</marker>
<rawString>Houtz, J. C., Moore, J. W., &amp; Davis, J. K. (1973). Effects of Different Types of Positive and Negative Examples in Learning &amp;quot;non-dimensioned&amp;quot; Concepts. Journal of Educational Psychology, 64(2), 206-211.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B C Litchfield</author>
<author>M P Driscoll</author>
<author>J V Dempsey</author>
</authors>
<title>Presentation Sequence and Example Difficulty: Their Effect on Concept and Rule Learning in Computer-Based Instruction.</title>
<date>1990</date>
<journal>Journal of Computer-Based Instruction,</journal>
<volume>17</volume>
<issue>1</issue>
<pages>35--40</pages>
<marker>Litchfield, Driscoll, Dempsey, 1990</marker>
<rawString>Litchfield, B. C., Driscoll, M. P., &amp; Dempsey, J. V. (1990). Presentation Sequence and Example Difficulty: Their Effect on Concept and Rule Learning in Computer-Based Instruction. Journal of Computer-Based Instruction, 17(1), 35-40.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J MacLachlan</author>
</authors>
<title>Psychologically Based Techniques for Improving Learning within Computerized Tutorials.</title>
<date>1986</date>
<journal>Journal of Computer-Based Instruction,</journal>
<volume>13</volume>
<issue>3</issue>
<pages>65--70</pages>
<contexts>
<context position="1128" citStr="MacLachlan, 1986" startWordPosition="165" endWordPosition="166">ples replace possible (textual) elaborations in the description. It is thus clear that if object descriptions are to be generated, the system must incorporate strategies to handle examples. In this work, we shall investigate some of these issues in the generation of object descriptions. INTRODUCTION There is little doubt that people find examples very beneficial in descriptions of new or complex objects, relations, or processes. Various studies have shown that the inclusion of examples in instructional material significantly increases user comprehension (for e.g., (Houtz, Moore &amp; Davis, 1973; MacLachlan, 1986; Pirolli, 1991; Reder, Charney &amp; Morgan, 1986; Tbnnyson &amp; Park, 1980)). Users like examples because examples tend to put abstract, theoretical information into concrete terms they can understand. Few generation systems have attempted to make significant use of examples, however. In particular, most systems have not integrated examples in the textual descriptions, but have used them mostly on their own, independently of the explanation that may also have been provided at that point. However, examples cannot be generated in isolation, but must form an integral part of the description, supportin</context>
</contexts>
<marker>MacLachlan, 1986</marker>
<rawString>MacLachlan, J. (1986). Psychologically Based Techniques for Improving Learning within Computerized Tutorials. Journal of Computer-Based Instruction, 13(3), 65-70.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J D Moore</author>
<author>C L Paris</author>
</authors>
<title>Discourse Structure for Explanatory Dialogues. Presented at the Fall AAAI</title>
<date>1991</date>
<booktitle>Symposium on Discourse Structure in Natural Language Understanding and Generation.</booktitle>
<marker>Moore, Paris, 1991</marker>
<rawString>Moore, J. D. &amp; Paris, C. L. (1991). Discourse Structure for Explanatory Dialogues. Presented at the Fall AAAI Symposium on Discourse Structure in Natural Language Understanding and Generation.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J D Moore</author>
<author>C L Paris</author>
</authors>
<title>User models and dialogue: An integrated approach to producing effective explanations.</title>
<date>1992</date>
<note>To appear in the</note>
<marker>Moore, Paris, 1992</marker>
<rawString>Moore, J. D. &amp; Paris, C. L. (1992). User models and dialogue: An integrated approach to producing effective explanations. To appear in the &apos;User Model and User Adapted Interaction Journal&apos;.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Neches</author>
<author>W R Swartout</author>
<author>J D Moore</author>
</authors>
<title>Enhanced Maintenance and Explanation of Expert Systems Through Explicit Models of Their Development.</title>
<date>1985</date>
<journal>IEEE Transactions on Software Engineering,</journal>
<volume>11</volume>
<issue>11</issue>
<pages>1337--1351</pages>
<marker>Neches, Swartout, Moore, 1985</marker>
<rawString>Neches, R., Swartout, W. R., &amp; Moore, J. D. (1985). Enhanced Maintenance and Explanation of Expert Systems Through Explicit Models of Their Development. IEEE Transactions on Software Engineering, SE-11(11), 1337-1351.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Pirolli</author>
</authors>
<title>Effects of Examples and Their Explanations in a Lesson on Recursion: A Production System Analysis.</title>
<date>1991</date>
<journal>Cognition and Instruction,</journal>
<volume>8</volume>
<issue>3</issue>
<pages>207--259</pages>
<contexts>
<context position="1143" citStr="Pirolli, 1991" startWordPosition="167" endWordPosition="168">ble (textual) elaborations in the description. It is thus clear that if object descriptions are to be generated, the system must incorporate strategies to handle examples. In this work, we shall investigate some of these issues in the generation of object descriptions. INTRODUCTION There is little doubt that people find examples very beneficial in descriptions of new or complex objects, relations, or processes. Various studies have shown that the inclusion of examples in instructional material significantly increases user comprehension (for e.g., (Houtz, Moore &amp; Davis, 1973; MacLachlan, 1986; Pirolli, 1991; Reder, Charney &amp; Morgan, 1986; Tbnnyson &amp; Park, 1980)). Users like examples because examples tend to put abstract, theoretical information into concrete terms they can understand. Few generation systems have attempted to make significant use of examples, however. In particular, most systems have not integrated examples in the textual descriptions, but have used them mostly on their own, independently of the explanation that may also have been provided at that point. However, examples cannot be generated in isolation, but must form an integral part of the description, supporting the text they</context>
</contexts>
<marker>Pirolli, 1991</marker>
<rawString>Pirolli,R (1991). Effects of Examples and Their Explanations in a Lesson on Recursion: A Production System Analysis. Cognition and Instruction, 8(3), 207-259.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L M Reder</author>
<author>D H Chamey</author>
<author>K I Morgan</author>
</authors>
<title>The Role of Elaborations in learning a skill from an Instructional Text.</title>
<date>1986</date>
<journal>Memory and Cognition,</journal>
<volume>14</volume>
<issue>1</issue>
<pages>64--78</pages>
<marker>Reder, Chamey, Morgan, 1986</marker>
<rawString>Reder, L. M., Chamey, D. H., &amp; Morgan, K. I. (1986). The Role of Elaborations in learning a skill from an Instructional Text. Memory and Cognition, 14(1), 64-78.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E L Rissland</author>
</authors>
<title>Constrained Example Generation.</title>
<date>1981</date>
<tech>COINS Technical Report 81-24,</tech>
<institution>Department of Computer and Information Science, University of Massachusetts,</institution>
<location>Amherst, MA.</location>
<marker>Rissland, 1981</marker>
<rawString>Rissland, E. L. (1981). Constrained Example Generation. COINS Technical Report 81-24, Department of Computer and Information Science, University of Massachusetts, Amherst, MA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E L Rissland</author>
</authors>
<title>Examples in Legal Reasoning: Legal Hypotheticals.</title>
<date>1983</date>
<booktitle>In Proceedings of the International Joint Conference on Artificial Intelligence,</booktitle>
<pages>90--93</pages>
<location>Karlsruhe, Germany.</location>
<contexts>
<context position="1998" citStr="Rissland, 1983" startWordPosition="299" endWordPosition="300">use of examples, however. In particular, most systems have not integrated examples in the textual descriptions, but have used them mostly on their own, independently of the explanation that may also have been provided at that point. However, examples cannot be generated in isolation, but must form an integral part of the description, supporting the text they help to illustrate. Most previous work (especially in the context of tutoring systems) focused on the issue offinding useful examples (for e.g., Rissland&apos;s CEG system (1981) and Ashley&apos;s HYPO system (Ashley, 1991; Rissland &amp; Ashley, 1986; Rissland, 1983)). Work by Woolf and her colleagues considered issues in the generation of tutorial discourse, including the use of examples (Woolf &amp; McDonald, 1984; Woolf &amp; Murray, 1987), but their analysis did not address specific issues of integrated example and language generation. In this paper, we build upon some of these studies and describe the issues in generating descriptions which include examples in a coordinated, coherent fashion, such that they complement and support each other. AN EXAMPLE Consider for instance, the example in Figure 1, from a well known introductory book on the programming lang</context>
</contexts>
<marker>Rissland, 1983</marker>
<rawString>Rissland, E. L. (1983). Examples in Legal Reasoning: Legal Hypotheticals. In Proceedings of the International Joint Conference on Artificial Intelligence, (pp. 90-93)., Karlsruhe, Germany.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E L Rissland</author>
<author>K D Ashley</author>
</authors>
<title>Hypotheticals as Heuristic Device.</title>
<date>1986</date>
<booktitle>In Proceedings of the National Conference on Artificial Intelligence (AAAI-86),</booktitle>
<pages>289--297</pages>
<contexts>
<context position="1981" citStr="Rissland &amp; Ashley, 1986" startWordPosition="295" endWordPosition="298">pted to make significant use of examples, however. In particular, most systems have not integrated examples in the textual descriptions, but have used them mostly on their own, independently of the explanation that may also have been provided at that point. However, examples cannot be generated in isolation, but must form an integral part of the description, supporting the text they help to illustrate. Most previous work (especially in the context of tutoring systems) focused on the issue offinding useful examples (for e.g., Rissland&apos;s CEG system (1981) and Ashley&apos;s HYPO system (Ashley, 1991; Rissland &amp; Ashley, 1986; Rissland, 1983)). Work by Woolf and her colleagues considered issues in the generation of tutorial discourse, including the use of examples (Woolf &amp; McDonald, 1984; Woolf &amp; Murray, 1987), but their analysis did not address specific issues of integrated example and language generation. In this paper, we build upon some of these studies and describe the issues in generating descriptions which include examples in a coordinated, coherent fashion, such that they complement and support each other. AN EXAMPLE Consider for instance, the example in Figure 1, from a well known introductory book on the</context>
</contexts>
<marker>Rissland, Ashley, 1986</marker>
<rawString>Rissland, E. L. &amp; Ashley, K. D. (1986). Hypotheticals as Heuristic Device. In Proceedings of the National Conference on Artificial Intelligence (AAAI-86), (pp. 289-297).</rawString>
</citation>
<citation valid="true">
<authors>
<author>W Swartout</author>
<author>S W Smoliar</author>
</authors>
<title>Explaining the link between causal reasoning and expert behavior.</title>
<date>1987</date>
<booktitle>In Proceedings of the Symposium on Computer Applications in Medical Care,</booktitle>
<location>Washington, D. C.</location>
<contexts>
<context position="7154" citStr="Swartout &amp; Smoliar, 1987" startWordPosition="1147" endWordPosition="1150">ibed is a noun or a relation for instance) and the text-type (tutorial vs. reference vs. report, etc). The awes= EXAMSANGLE ILEMENT MULTIPLE ELEMENTS GEPERATE GINEILATE EXAMPLE GENERATE EXAMPLE PROMPT - AVMS I INFORM BOOM Figure 3: Partial text plan for generating the LIST examples. issue of how the examples are selected (generated vs. retrieved is also an important issue, but we shall not discuss that here. STATUS OF WORK We are investigating these issues by implementing a system that can generate examples within explanatory contexts (within the EES framework (Neches, Swartout &amp; Moore, 1985; Swartout &amp; Smoliar, 1987)) using the Moore-Paris planner (1992, 1991) for discourse generation. Our initial system is for the automatic generation of documentation for small sub-sets of programming languages. One reason for this choice is that it allows us to study a variety of example-rich texts in a 316 relatively unambiguous domain. A partial text-plan generated by our planner for the description given in Figure 1 is given in Figures 2 and 3. It shows some of the communicative goals that the planner needs to be able to satisfy in order to generate some of the simple object descriptions in our application. These des</context>
</contexts>
<marker>Swartout, Smoliar, 1987</marker>
<rawString>Swartout, W. &amp; Smoliar, S. W. (1987). Explaining the link between causal reasoning and expert behavior. In Proceedings of the Symposium on Computer Applications in Medical Care, Washington, D. C.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R D Tennyson</author>
<author>Park</author>
</authors>
<title>The Teaching of Concepts: A Review of Instructional Design Research Literature.</title>
<date>1980</date>
<journal>Review of Educational Research,</journal>
<volume>50</volume>
<issue>1</issue>
<pages>55--70</pages>
<marker>Tennyson, Park, 1980</marker>
<rawString>Tennyson, R. D. &amp; Park, 0.-C. (1980). The Teaching of Concepts: A Review of Instructional Design Research Literature. Review of Educational Research, 50(1), 55-70.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R D Tomyson</author>
<author>M Steve</author>
<author>R Boutwell</author>
</authors>
<title>Instance Sequence and Analysis of Instance Attribute Representation in Concept Acquisition.</title>
<date>1975</date>
<journal>Journal of Educational Psychology,</journal>
<volume>67</volume>
<pages>821--827</pages>
<marker>Tomyson, Steve, Boutwell, 1975</marker>
<rawString>Tomyson, R. D., Steve, M., &amp; Boutwell, R. (1975). Instance Sequence and Analysis of Instance Attribute Representation in Concept Acquisition. Journal of Educational Psychology, 67 , 821-827.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D S lburetzky</author>
</authors>
<title>LISP: A Gentle Introduction to Symbolic Computation.</title>
<date>1984</date>
<publisher>Harper &amp; Row Publishers.</publisher>
<location>New York:</location>
<marker>lburetzky, 1984</marker>
<rawString>lburetzky, D. S. (1984). LISP: A Gentle Introduction to Symbolic Computation. New York: Harper &amp; Row Publishers.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Woolf</author>
<author>D D McDonald</author>
</authors>
<title>ContextDependent Transitions in Tutoring Discourse.</title>
<date>1984</date>
<booktitle>In Proceedings of the Third National Conference on Artificial Intelligence (AAAI-84),</booktitle>
<pages>355--361</pages>
<contexts>
<context position="2146" citStr="Woolf &amp; McDonald, 1984" startWordPosition="321" endWordPosition="324">their own, independently of the explanation that may also have been provided at that point. However, examples cannot be generated in isolation, but must form an integral part of the description, supporting the text they help to illustrate. Most previous work (especially in the context of tutoring systems) focused on the issue offinding useful examples (for e.g., Rissland&apos;s CEG system (1981) and Ashley&apos;s HYPO system (Ashley, 1991; Rissland &amp; Ashley, 1986; Rissland, 1983)). Work by Woolf and her colleagues considered issues in the generation of tutorial discourse, including the use of examples (Woolf &amp; McDonald, 1984; Woolf &amp; Murray, 1987), but their analysis did not address specific issues of integrated example and language generation. In this paper, we build upon some of these studies and describe the issues in generating descriptions which include examples in a coordinated, coherent fashion, such that they complement and support each other. AN EXAMPLE Consider for instance, the example in Figure 1, from a well known introductory book on the programming language LISP. It describes an object (a data structure) called a &amp;quot;list.&amp;quot; There are a number of issues that can be immediately seen to be relevant: 1. S</context>
</contexts>
<marker>Woolf, McDonald, 1984</marker>
<rawString>Woolf, B. &amp; McDonald, D. D. (1984). ContextDependent Transitions in Tutoring Discourse. In Proceedings of the Third National Conference on Artificial Intelligence (AAAI-84), (pp. 355-361).</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Woolf</author>
<author>T Murray</author>
</authors>
<title>A Framework for Representing Tutorial Discourse.</title>
<date>1987</date>
<booktitle>In Proceedings of the Tenth International Joint Conference on Artificial Intelligence,</booktitle>
<pages>189--192</pages>
<contexts>
<context position="2169" citStr="Woolf &amp; Murray, 1987" startWordPosition="325" endWordPosition="328"> of the explanation that may also have been provided at that point. However, examples cannot be generated in isolation, but must form an integral part of the description, supporting the text they help to illustrate. Most previous work (especially in the context of tutoring systems) focused on the issue offinding useful examples (for e.g., Rissland&apos;s CEG system (1981) and Ashley&apos;s HYPO system (Ashley, 1991; Rissland &amp; Ashley, 1986; Rissland, 1983)). Work by Woolf and her colleagues considered issues in the generation of tutorial discourse, including the use of examples (Woolf &amp; McDonald, 1984; Woolf &amp; Murray, 1987), but their analysis did not address specific issues of integrated example and language generation. In this paper, we build upon some of these studies and describe the issues in generating descriptions which include examples in a coordinated, coherent fashion, such that they complement and support each other. AN EXAMPLE Consider for instance, the example in Figure 1, from a well known introductory book on the programming language LISP. It describes an object (a data structure) called a &amp;quot;list.&amp;quot; There are a number of issues that can be immediately seen to be relevant: 1. Should the system choose</context>
</contexts>
<marker>Woolf, Murray, 1987</marker>
<rawString>Woolf, B. &amp; Murray, T. (1987). A Framework for Representing Tutorial Discourse. In Proceedings of the Tenth International Joint Conference on Artificial Intelligence, (pp. 189-192).</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>