<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.032688">
<title confidence="0.9968195">
Automatic Annotation Suggestions and
Custom Annotation Layers in WebAnno
</title>
<author confidence="0.849471">
Seid Muhie Yimam1 Richard Eckart de Castilho2 Iryna Gurevych2,3 Chris Biemann1
</author>
<affiliation confidence="0.6050686">
(1) FG Language Technology, Dept. of Computer Science, Technische Universit¨at Darmstadt
(2) Ubiquitous Knowledge Processing Lab (UKP-TUDA)
Dept. of Computer Science, Technische Universit¨at Darmstadt
(3) Ubiquitous Knowledge Processing Lab (UKP-DIPF)
German Institute for Educational Research and Educational Information
</affiliation>
<email confidence="0.873514">
http://www.{lt,ukp}.tu-darmstadt.de
</email>
<sectionHeader confidence="0.990166" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.9998605">
In this paper, we present a flexible ap-
proach to the efficient and exhaustive man-
ual annotation of text documents. For this
purpose, we extend WebAnno (Yimam et
al., 2013) an open-source web-based an-
notation tool.1 While it was previously
limited to specific annotation layers, our
extension allows adding and configuring
an arbitrary number of layers through a
web-based UI. These layers can be an-
notated separately or simultaneously, and
support most types of linguistic annota-
tions such as spans, semantic classes, de-
pendency relations, lexical chains, and
morphology. Further, we tightly inte-
grate a generic machine learning compo-
nent for automatic annotation suggestions
of span annotations. In two case studies,
we show that automatic annotation sug-
gestions, combined with our split-pane UI
concept, significantly reduces annotation
time.
</bodyText>
<sectionHeader confidence="0.999134" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999182583333333">
The annotation of full text documents is a costly
and time-consuming task. Thus, it is important to
design annotation tools in such a way that the an-
notation process can happen as swiftly as possible.
To this end, we extend WebAnno with the capabil-
ity of suggesting annotations to the annotator.
A general-purpose web-based annotation tool
can greatly lower the entrance barrier for linguistic
annotation projects, as tool development costs and
preparatory work are greatly reduced. WebAnno
1.0 only partially fulfilled desires regarding gen-
erality: Although it covered already more kinds
</bodyText>
<footnote confidence="0.998672333333333">
1WebAnno is open-source software under the terms of the
Apache Software License 2.0. This paper describes v1.2:
http://webanno.googlecode.com
</footnote>
<bodyText confidence="0.999925292682927">
of annotations than most other tools, it supported
only a fixed set of customizable annotation lay-
ers (named entities, part-of-speech, lemmata, co-
reference, dependencies). Thus, we also remove a
limitation of the tool, which was previously bound
to specific, hardcoded annotation layers.
We have generalized the architecture to support
three configurable generic structures: spans, rela-
tions, and chains. These support all of the original
layers and allow the user to define arbitrary custom
annotation layers based on either of these struc-
tures. Additionally, our approach allows maintain-
ing multiple properties on annotations, e.g. to sup-
port morphological annotations, while previously
only one property per annotation was supported.
Automatic suggestion of annotations is based
on machine learning, which is common practice
in annotation tools. However, most of existing
web-based annotation tools, such as GATE (Cun-
ningham et al., 2011) or brat (Stenetorp et al.,
2012), depend on external preprocessing and post-
processing plugins or on web services. These tools
have limitations regarding adaptability (difficulty
to adapt to other annotation tasks), reconfigurabil-
ity (generating a classifier when new features and
training documents are available is complicated),
and reusability (requires manual intervention to
add newly annotated documents into the iteration).
For our approach, we assume that an annota-
tor actually does manually verify all annotations
to produce a completely labeled dataset. This task
can be sped up by automatically suggesting anno-
tations that the annotator may then either accept
or correct. Note that this setup and its goal differs
from an active learning scenario, where a system
actively determines the most informative yet unan-
notated example to be labeled, in order to quickly
arrive at a high-quality classifier that is then to be
applied to large amounts of unseen data.
Our contribution is the integration of machine
learning into the tool to support exhaustive an-
</bodyText>
<page confidence="0.985144">
91
</page>
<bodyText confidence="0.978446863636364">
Proceedings of 52nd Annual Meeting of the Association for Computational Linguistics: System Demonstrations, pages 91–96,
Baltimore, Maryland USA, June 23-24, 2014. c�2014 Association for Computational Linguistics
notation of documents providing a shorter loop
than comparable tools (Cunningham et al., 2011;
Stenetorp et al., 2012), because new documents
are added to the training set as soon as they are
completed by the annotators. The machine learn-
ing support currently applies to sequence classifi-
cation tasks only. It is complemented by our ex-
tension allowing to define custom annotation lay-
ers, making it applicable to a wide range of anno-
tation tasks with only little configuration effort.
Section 2 reviews related work about the uti-
lization of automatic supports and customiza-
tion of annotation schemes in existing annotation
tools. The integration of automatic suggestions
into WebAnno, the design principles followed, and
two case studies are explained in Section 3. Sec-
tion 4 presents the implementation of customiz-
able annotation layers into the tool. Finally, Sec-
tion 5 summarizes the main contributions and fu-
ture directions of our work.
</bodyText>
<sectionHeader confidence="0.999691" genericHeader="related work">
2 Related Work
</sectionHeader>
<bodyText confidence="0.9999682875">
Automatic annotation support The impact of
using lexical and statistical resources to produce
pre-annotation automatically to increase the anno-
tation speed has been studied widely for various
annotation tasks. For the task of medical named
entity labeling, Lingren et al. (2013) investigate
the impact of automatic suggestions on annotation
speed and potential biases using dictionary-based
annotations. This technique results in 13.83% to
21.5% time saving and in an inter-annotator agree-
ment (IAA) increase by several percentage points.
WordFreak (Morton and LaCivita, 2003) in-
cludes an automation component, where instances
with a low machine learning confidence are pre-
sented for annotation in an active learning setup.
Beck et al. (2013) demonstrate that the use of ac-
tive learning for machine translation reduces the
annotation effort and show a reduced annotation
load on three out of four datasets.
The GoldenGATE editor (Sautter et al., 2007)
integrates NLP tools and assistance features for
manual XML editing. The tool is used in correct-
ing/editing an automatically annotated document
with an editor where both text and XML markups
are modified. GoldenGATE is merely used to fa-
cilitate the correction of an annotation while pre-
annotation is conducted outside of the tool.
Automatic annotation support in brat (Stenetorp
et al., 2012) was carried out for a semantic class
disambiguation task to investigate how such au-
tomation facilitates the annotators’ progress. They
report a 15.4% reduction in total annotation time.
However, the automation process in brat 1) de-
pends on bulk annotation imports and web service
configurations, which is labor intensive, 2) is task
specific so that it requires a lot of effort to adapt it
to different annotation tasks, 3) there is no way of
using the corrected result for the next iteration of
training the automatic tool.
The GATE Teamware (Bontcheva et al., 2013)
automation component is most similar to our
work. It is based either on plugins and externally
trained classification models, or uses web services.
Thus, it is highly task specific and requires exten-
sive configuration. The automatic annotation sug-
gestion component in our tool, in contrast, is easily
configurable and adaptable to different annotation
tasks and allows the use of annotations from the
current annotation project.
Custom annotation layers Generic annotation
data models are typically directed graph models
(e.g. GATE, UIMA CAS (G¨otz and Suhre, 2004),
GrAF (Ide and Suderman, 2007)). In addition, an
annotation schema defines possible kinds of anno-
tations, their properties and relations. While these
models offer great expressiveness and flexibility, it
is difficult to adequately transfer their power into
a convenient annotation editor. For example, one
schema may prescribe that the part-of-speech tag
is a property on a Token annotation, another one
may prescribe that the tag is a separate annotation,
which is linked to the token. An annotator should
not be exposed to these details in the UI and should
be able to just edit a part-of-speech tag, ignorant of
the internal representation.
This problem is typically addressed in two
ways. Either, the full complexity of the annota-
tion model is exposed to the annotator, or the an-
notation editor uses a simplified model. The first
approach can easily lead to an unintuitive UI and
make the annotation an inconvenient task. The
second approach (e.g. as advocated by brat) re-
quires the implementation of specific import and
export filters to transform between the editor data
model and the generic annotation data models.
We propose a third approach integrating a con-
figurable mapping between a generic annotation
model (UIMA CAS) and a simplified editing
model (brat) directly into the annotation tool.
Thus, we avoid exposing the full complexity of
</bodyText>
<page confidence="0.977579">
92
</page>
<bodyText confidence="0.999972461538462">
the generic model to the user and also avoid the
necessity for implementing import/export filters.
Similar approaches have already been used to map
annotation models to visualization modules (cf.
(Zeldes et al., 2009)), but have, to our knowledge,
not been used in an annotation editor. Our ap-
proach is different from schema-based annotation
editors (e.g. GATE), which employ a schema as
a template of properties and controlled vocabular-
ies that can be used to annotate documents, but
which do not allow to map structures inherent in
annotations, like relations or chains, to respective
concepts in the UI.
</bodyText>
<sectionHeader confidence="0.997108" genericHeader="method">
3 Automatic Annotation Suggestions
</sectionHeader>
<bodyText confidence="0.9995202">
It is the purpose of the automatic annotation sug-
gestion component to increase the annotation ef-
ficiency, while maintaining the quality of annota-
tions. The key design principle of our approach is
a split-pane (Figure 1) that displays automatic an-
notation suggestions in the suggestion pane (lower
part) and only verified or manual ones in the anno-
tation pane (upper part). In this way, we force the
annotators to review each automatic suggestion as
to avoid overlooking wrong suggestions.
</bodyText>
<figureCaption confidence="0.546977">
Figure 1: Split-pane UI. Upper: the annotation
</figureCaption>
<bodyText confidence="0.998341454545455">
pane, which should be completed by the annotator.
Lower: the suggestion pane, displaying predic-
tions or automatic suggestions, and coding their
status in color. This examples shows automatic
suggestions for parts-of-speech. Unattended anno-
tations are rendered in blue, accepted annotations
in grey and rejected annotations in red. Here, the
last five POS annotations have been attended, four
have been accepted by clicking on the suggestion,
and one was rejected by annotating it in the anno-
tation pane.
</bodyText>
<subsectionHeader confidence="0.998658">
3.1 Suggestion modes
</subsectionHeader>
<bodyText confidence="0.9999722">
We distinguish three modes of automatic annota-
tion suggestion:
Correction mode In this mode, we import doc-
uments annotated by arbitrary external tools and
present them to the user in the suggestion pane
of the annotation page. This mode is specifi-
cally appropriate for annotation tasks where a pre-
annotated document contains several possibilities
for annotations in parallel, and the user’s task is
to select the correct annotation. This allows to
leverage specialized external automatic annotation
components, thus the tool is not limited to the in-
tegrated automation mechanism.
Repetition mode In this mode, further occur-
rences of a word annotated by the user are high-
lighted in the suggestion pane. To accept sugges-
tions, the user can simply click on them in the sug-
gestion pane. This basic – yet effective – sugges-
tion is realized using simple string matching.
Learning mode For this mode, we have inte-
grated MIRA (Crammer and Singer, 2003), an ex-
tension of the perceptron algorithm for online ma-
chine learning which allows for the automatic sug-
gestions of span annotations. MIRA was selected
because of its relatively lenient licensing, its good
performance even on small amounts of data, and
its capability of allowing incremental classifier up-
dates. Results of automatic tagging are displayed
in the suggestion pane. Our architecture is flexible
to integrate further machine learning tools.
</bodyText>
<subsectionHeader confidence="0.990377">
3.2 Suggestion Process
</subsectionHeader>
<bodyText confidence="0.999979722222222">
The workflow to set up an automatically supported
annotation project consists of the following steps.
Importing annotation documents We can im-
port documents with existing annotations (manual
or automatic). The annotation pane of the automa-
tion page allows users to annotate documents and
the suggestion pane is used for the automatic sug-
gestion as shown in Figure 1. The suggestion pane
facilitates accepting correct pre-annotations with
minimal effort.
Configuring features For the machine learning
tool, it is required to define classification features
to train a classifier. We have designed a UI where
a range of standard classification features for se-
quence tagging can be configured. The features
include morphological features (prefixes, suffixes,
and capitalization), n-grams, and other layers as a
feature (for example POS annotation as a feature
</bodyText>
<page confidence="0.998598">
93
</page>
<figureCaption confidence="0.9998305">
Figure 2: Configuring an annotation suggestion: 1) layers for automation, 2) different features, 3) training
documents, 4) start training classifier.
</figureCaption>
<bodyText confidence="0.999393171428571">
for named entity recognition). While these stan-
dard features do not lead to state-of-the-art per-
formance on arbitrary tasks, we have found them
to perform very well for POS tagging, named en-
tity recognition, and chunking. Figure 2 shows the
feature configuration in the project settings.
Importing training documents We offer two
ways of providing training documents: importing
an annotated document in one of the supported file
formats, such as CoNLL, TCF, or UIMA XMI; or
using existing annotation documents in the same
project that already have been annotated.
Starting the annotation suggestion Once fea-
tures for a training layer are configured and train-
ing documents are available, automatic annotation
is possible. The process can be started manually
by the administrator from the automation settings
page, and it will be automatically re-initiated when
additional documents for training become avail-
able in the project. While the automatic annotation
is running in the background, users still can work
on the annotation front end without being affected.
Training and creating a classifier will be repeated
only when the feature configuration is changed or
when a new training document is available.
Display results on the monitoring page Af-
ter the training and automatic annotation are com-
pleted, detailed information about the training data
such as the number of documents (sentence, to-
kens), features used for each layer, F-score on
held-out data, and classification errors are dis-
played on the monitoring page, allowing an esti-
mation whether the automatic suggestion is use-
ful. The UI also shows the status of the training
process (not started, running, or finished).
</bodyText>
<subsectionHeader confidence="0.999771">
3.3 Case Studies
</subsectionHeader>
<bodyText confidence="0.999973285714286">
We describe two case studies that demonstrate lan-
guage independence and flexibility with respect to
sequence label types of our automatic annotation
suggestions. In the first case study, we address the
task of POS tagging for Amharic as an example of
an under-resourced language. Second, we explore
German named entity recognition.
</bodyText>
<subsectionHeader confidence="0.687698">
3.3.1 Amharic POS tagging
</subsectionHeader>
<bodyText confidence="0.999788478260869">
Amharic is an under-resourced language in the
Semitic family, mainly spoken in Ethiopia. POS
tagging research for Amharic is mostly conducted
as an academic exercise. The latest result re-
ported by Gebre (2009) was about 90% accuracy
using the Walta Information Center (WIC) corpus
of about 210,000 tokens (1065 news documents).
We intentionally do not use the corpus as training
data because of the reported inconsistencies in the
tagging process (Gebre, 2009). Instead, we man-
ually annotate Amharic documents for POS tag-
ging both to test the performance of the automa-
tion module and to produce POS-tagged corpora
for Amharic. Based upon the work by Petrov et al.
(2012) and Ethiopian Languages Research Cen-
ter (ELRC) tagset, we have designed 11 POS tags
equivalent to the Universal POS tags. The tag DET
is not included as Amharic denotes definiteness as
noun suffixes.
We collected some Amharic documents from an
online news portal.2 Preprocessing of Amharic
documents includes the normalization of charac-
ters and tokenization (sentence and word bound-
</bodyText>
<footnote confidence="0.978606">
2http://www.ethiopianreporter.com/
</footnote>
<page confidence="0.998314">
94
</page>
<figureCaption confidence="0.999901">
Figure 3: Example Amharic document. The red
tags in the suggestion pane have not been con-
firmed by the annotator.
Figure 4: UI for custom annotation layers.
</figureCaption>
<bodyText confidence="0.999923181818182">
ary detection). Initially, we manually annotated 21
sentences. Using these, an iterative automatic an-
notation suggestion process was started until 300
sentences were fully annotated. We obtained an
F-score of 0.89 with the final model. Hence the
automatic annotation suggestion helps in decreas-
ing the total annotation time, since the user has
to manually annotate only one out of ten words,
while being able to accept most automatic sugges-
tions. Figure 3 shows such an Amharic document
in WebAnno.
</bodyText>
<subsectionHeader confidence="0.912481">
3.3.2 German Named Entity Recognition
</subsectionHeader>
<bodyText confidence="0.999963125">
A pilot Named Entity Recognition (NER) project
for German was conducted by Benikova et al.
(2014). We have used the dataset – about 31,000
sentences, over 41,000 NE annotations – for train-
ing NER. Using this dataset, an F-score of about
0.8 by means of automatic suggestions was ob-
tained, which leads to an increase in annotation
speed of about 21% with automatic suggestion.
</bodyText>
<sectionHeader confidence="0.97646" genericHeader="method">
4 Customs Annotation Layers
</sectionHeader>
<bodyText confidence="0.999701603448276">
The tasks in which an annotation editor can be em-
ployed depends on the expressiveness of the un-
derlying annotation model. However, fully expos-
ing the expressive power in the UI can make the
editor inconvenient to use.
We propose an approach that allows the user
to configure a mapping of an annotation model to
concepts well-supported in a web-based UI. In this
way, we can avoid to expose all details of the an-
notation model in the UI, and remove the need to
implement custom import/export filters.
WebAnno 1.0 employs a variant of the annota-
tion UI provided by brat, which offers the concepts
of spans and arcs. Based on these, WebAnno 1.2
implements five annotation layers: named entity,
part-of-speech, lemmata, co-reference, and depen-
dencies. In the new WebAnno version, we gener-
alized the support for these five layers into three
structural categories: span, relation (arc), and
chain. Each of these categories is handled by a
generic adapter which can be configured to sim-
ulate any of the original five layers. Based on
this generalization, the user can now define cus-
tom layers (Figure 4).
Additionally, we introduced a new concept of
constraints. For example, NER spans should not
cross sentence boundaries and attach to whole to-
kens (not substrings of tokens). Such constraints
not only help preventing the user from making in-
valid annotations, but can also offer extra conve-
nience. We currently support four hard-coded con-
straints:
Lock to token offsets Defines if annotation
boundaries must coincide with token boundaries,
e.g. named entities, lemmata, part-of-speech, etc.
For the user’s convenience, the annotation is auto-
matically expanded to include the full token, even
if only a part of a token is selected during annota-
tion (span/chain layers only).
Allow multiple tokens Some kinds of annota-
tions may only cover a single token, e.g. part-of-
speech, while others may cover multiple tokens,
e.g. named entities (span/chain layers only).
Allow stacking Controls if multiple annotations
of the same kind can be at the same location, e.g.
if multiple lemma annotations are allowed per to-
ken. For the user’s convenience, an existing an-
notation is replaced if a new annotation is created
when stacking is not allowed.
Allow crossing sentence boundaries Certain
annotations, e.g. named entities or dependency de-
lations, may not cross sentence boundaries, while
others need to, e.g. coreference chains.
Finally, we added the ability to define multiple
properties for annotations to WebAnno. For exam-
ple, this can be use to define a custom span-based
morphology layer with multiple annotation prop-
erties such as gender, number, case, etc.
</bodyText>
<page confidence="0.998148">
95
</page>
<sectionHeader confidence="0.97856" genericHeader="conclusions">
5 Conclusion and Outlook
</sectionHeader>
<bodyText confidence="0.999979837837838">
We discussed two extensions of WebAnno: the
tight and generic integration of automatic annota-
tion suggestions for reducing the annotation time,
and the web-based addition and configuration of
custom annotation layers.
While we also support the common practice
of using of external tools to automatically pre-
annotate documents, we go one step further by
tightly integrating a generic sequence classifier
into the tool that can make use of completed an-
notation documents from the same project. In two
case studies, we have shown quick convergence
for Amharic POS tagging and a substantial reduc-
tion in annotation time for German NER. The key
concept here is the split-pane UI that allows to dis-
play automatic suggestions, while forcing the an-
notator to review all of them.
Allowing the definition of custom annotation
layers in a web-based UI is greatly increasing
the number of annotation projects that potentially
could use our tool. While it is mainly an engineer-
ing challenge to allow this amount of flexibility
and to hide its complexity from the user, it is a ma-
jor contribution in the transition from specialized
tools towards general-purpose tools.
The combination of both – custom layers and
automatic suggestions – gives rise to the rapid
setup of efficient annotation projects. Adding to
existing capabilities in WebAnno, such as cura-
tion, agreement computation, monitoring and fine-
grained annotation project definition, our contri-
butions significantly extend the scope of annota-
tion tasks in which the tool can be employed.
In future work, we plan to support annota-
tion suggestions for non-span structures (arcs and
chains), and to include further machine learning
algorithms.
</bodyText>
<sectionHeader confidence="0.997486" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.999768">
The work presented in this paper was funded by a German
BMBF grant to the CLARIN-D project, the Hessian LOEWE
research excellence program as part of the research center
“Digital Humanities” and by the Volkswagen Foundation as
part of the Lichtenberg-Professorship Program under grant
No. I/82806.
</bodyText>
<sectionHeader confidence="0.99947" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999932064516129">
Daniel Beck, Lucia Specia, and Trevor Cohn. 2013. Re-
ducing annotation effort for quality estimation via active
learning. In Proc. ACL 2013 System Demonstrations,
Sofia, Bulgaria.
Darina Benikova, Chris Biemann, and Marc Reznicek. 2014.
NoSta-D Named Entity Annotation for German: Guide-
lines and Dataset. In Proc. LREC 2014, Reykjavik, Ice-
land.
Kalina Bontcheva, H. Cunningham, I. Roberts, A. Roberts,
V. Tablan, N. Aswani, and G. Gorrell. 2013. GATE
Teamware: a web-based, collaborative text annota-
tion framework. Language Resources and Evaluation,
47(4):1007–1029.
Koby Crammer and Yoram Singer. 2003. Ultraconservative
online algorithms for multiclass problems. In Journal of
Machine Learning Research 3, pages 951 – 991.
Hamish Cunningham, D. Maynard, K. Bontcheva, V. Tablan,
N. Aswani, I. Roberts, G. Gorrell, A. Funk, A. Roberts,
D. Damljanovic, T. Heitz, M. A. Greenwood, H. Saggion,
J. Petrak, Y. Li, and W. Peters. 2011. Text Processing with
GATE (Version 6). University of Sheffield Department of
Computer Science, ISBN 978-0956599315.
Binyam Gebrekidan Gebre. 2009. Part-of-speech tagging for
Amharic. In ISMTCL Proceedings, International Review
Bulag, PUFC.
T. G¨otz and O. Suhre. 2004. Design and implementation
of the UIMA Common Analysis System. IBM Systems
Journal, 43(3):476 –489.
Nancy Ide and Keith Suderman. 2007. GrAF: A graph-based
format for linguistic annotations. In Proc. Linguistic An-
notation Workshop, pages 1–8, Prague, Czech Republic.
Todd Lingren, L. Deleger, K. Molnar, H. Zhai, J. Meinzen-
Derr, M. Kaiser, L. Stoutenborough, Q. Li, and I. Solti.
2013. Evaluating the impact of pre-annotation on anno-
tation speed and potential bias: natural language process-
ing gold standard development for clinical named entity
recognition in clinical trial announcements. In Journal of
the American Medical Informatics Association, pages 951
– 991.
Thomas Morton and Jeremy LaCivita. 2003. WordFreak: an
open tool for linguistic annotation. In Proc. NAACL 2003,
demonstrations, pages 17–18, Edmonton, Canada.
Slav Petrov, Dipanjan Das, and Ryan McDonald. 2012. A
universal part-of-speech tagset. In Proc LREC 2012, Is-
tanbul, Turkey.
Guido Sautter, Klemens B¨ohm, Frank Padberg, and Walter
Tichy. 2007. Empirical Evaluation of Semi-automated
XML Annotation of Text Documents with the GoldenGATE
Editor. Budapest, Hungary.
Pontus Stenetorp, Sampo Pyysalo, Goran Topi´c, Tomoko
Ohta, Sophia Ananiadou, and Jun’ichi Tsujii. 2012. brat:
a Web-based Tool for NLP-Assisted Text Annotation. In
Proc. EACL 2012 Demo Session, Avignon, France.
Seid Muhie Yimam, Iryna Gurevych, Richard Eckart
de Castilho, and Chris Biemann. 2013. WebAnno: A
flexible,web-based and visually supported system for dis-
tributed annotations. In Proc. ACL 2013 System Demon-
strations, pages 1–6, Sofia, Bulgaria.
Amir Zeldes, Julia Ritz, Anke L¨udeling, and Christian Chiar-
cos. 2009. ANNIS: A search tool for multi-layer anno-
tated corpora. In Proc. Corpus Linguistics 2009, Liver-
pool, UK.
</reference>
<page confidence="0.99846">
96
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.748593">
<title confidence="0.9506565">Automatic Annotation Suggestions Custom Annotation Layers in WebAnno</title>
<author confidence="0.937226">Muhie Richard Eckart de_Iryna Chris</author>
<affiliation confidence="0.9859178">(1) FG Language Technology, Dept. of Computer Science, Technische Universit¨at Darmstadt (2) Ubiquitous Knowledge Processing Lab Dept. of Computer Science, Technische Universit¨at Darmstadt (3) Ubiquitous Knowledge Processing Lab German Institute for Educational Research and Educational</affiliation>
<web confidence="0.97899">http://www.{lt,ukp}.tu-darmstadt.de</web>
<abstract confidence="0.996998869565217">In this paper, we present a flexible approach to the efficient and exhaustive manual annotation of text documents. For this purpose, we extend WebAnno (Yimam et al., 2013) an open-source web-based an- While it was previously limited to specific annotation layers, our extension allows adding and configuring an arbitrary number of layers through a web-based UI. These layers can be annotated separately or simultaneously, and support most types of linguistic annotations such as spans, semantic classes, dependency relations, lexical chains, and morphology. Further, we tightly integrate a generic machine learning component for automatic annotation suggestions of span annotations. In two case studies, we show that automatic annotation suggestions, combined with our split-pane UI concept, significantly reduces annotation time.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Daniel Beck</author>
<author>Lucia Specia</author>
<author>Trevor Cohn</author>
</authors>
<title>Reducing annotation effort for quality estimation via active learning.</title>
<date>2013</date>
<booktitle>In Proc. ACL 2013 System Demonstrations,</booktitle>
<location>Sofia, Bulgaria.</location>
<contexts>
<context position="6028" citStr="Beck et al. (2013)" startWordPosition="886" endWordPosition="889">o increase the annotation speed has been studied widely for various annotation tasks. For the task of medical named entity labeling, Lingren et al. (2013) investigate the impact of automatic suggestions on annotation speed and potential biases using dictionary-based annotations. This technique results in 13.83% to 21.5% time saving and in an inter-annotator agreement (IAA) increase by several percentage points. WordFreak (Morton and LaCivita, 2003) includes an automation component, where instances with a low machine learning confidence are presented for annotation in an active learning setup. Beck et al. (2013) demonstrate that the use of active learning for machine translation reduces the annotation effort and show a reduced annotation load on three out of four datasets. The GoldenGATE editor (Sautter et al., 2007) integrates NLP tools and assistance features for manual XML editing. The tool is used in correcting/editing an automatically annotated document with an editor where both text and XML markups are modified. GoldenGATE is merely used to facilitate the correction of an annotation while preannotation is conducted outside of the tool. Automatic annotation support in brat (Stenetorp et al., 201</context>
</contexts>
<marker>Beck, Specia, Cohn, 2013</marker>
<rawString>Daniel Beck, Lucia Specia, and Trevor Cohn. 2013. Reducing annotation effort for quality estimation via active learning. In Proc. ACL 2013 System Demonstrations, Sofia, Bulgaria.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Darina Benikova</author>
<author>Chris Biemann</author>
<author>Marc Reznicek</author>
</authors>
<title>NoSta-D Named Entity Annotation for German: Guidelines and Dataset.</title>
<date>2014</date>
<booktitle>In Proc. LREC 2014,</booktitle>
<location>Reykjavik, Iceland.</location>
<contexts>
<context position="17188" citStr="Benikova et al. (2014)" startWordPosition="2640" endWordPosition="2643">n). Initially, we manually annotated 21 sentences. Using these, an iterative automatic annotation suggestion process was started until 300 sentences were fully annotated. We obtained an F-score of 0.89 with the final model. Hence the automatic annotation suggestion helps in decreasing the total annotation time, since the user has to manually annotate only one out of ten words, while being able to accept most automatic suggestions. Figure 3 shows such an Amharic document in WebAnno. 3.3.2 German Named Entity Recognition A pilot Named Entity Recognition (NER) project for German was conducted by Benikova et al. (2014). We have used the dataset – about 31,000 sentences, over 41,000 NE annotations – for training NER. Using this dataset, an F-score of about 0.8 by means of automatic suggestions was obtained, which leads to an increase in annotation speed of about 21% with automatic suggestion. 4 Customs Annotation Layers The tasks in which an annotation editor can be employed depends on the expressiveness of the underlying annotation model. However, fully exposing the expressive power in the UI can make the editor inconvenient to use. We propose an approach that allows the user to configure a mapping of an an</context>
</contexts>
<marker>Benikova, Biemann, Reznicek, 2014</marker>
<rawString>Darina Benikova, Chris Biemann, and Marc Reznicek. 2014. NoSta-D Named Entity Annotation for German: Guidelines and Dataset. In Proc. LREC 2014, Reykjavik, Iceland.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kalina Bontcheva</author>
<author>H Cunningham</author>
<author>I Roberts</author>
<author>A Roberts</author>
<author>V Tablan</author>
<author>N Aswani</author>
<author>G Gorrell</author>
</authors>
<title>GATE Teamware: a web-based, collaborative text annotation framework.</title>
<date>2013</date>
<journal>Language Resources and Evaluation,</journal>
<volume>47</volume>
<issue>4</issue>
<contexts>
<context position="7198" citStr="Bontcheva et al., 2013" startWordPosition="1076" endWordPosition="1079">tic annotation support in brat (Stenetorp et al., 2012) was carried out for a semantic class disambiguation task to investigate how such automation facilitates the annotators’ progress. They report a 15.4% reduction in total annotation time. However, the automation process in brat 1) depends on bulk annotation imports and web service configurations, which is labor intensive, 2) is task specific so that it requires a lot of effort to adapt it to different annotation tasks, 3) there is no way of using the corrected result for the next iteration of training the automatic tool. The GATE Teamware (Bontcheva et al., 2013) automation component is most similar to our work. It is based either on plugins and externally trained classification models, or uses web services. Thus, it is highly task specific and requires extensive configuration. The automatic annotation suggestion component in our tool, in contrast, is easily configurable and adaptable to different annotation tasks and allows the use of annotations from the current annotation project. Custom annotation layers Generic annotation data models are typically directed graph models (e.g. GATE, UIMA CAS (G¨otz and Suhre, 2004), GrAF (Ide and Suderman, 2007)). </context>
</contexts>
<marker>Bontcheva, Cunningham, Roberts, Roberts, Tablan, Aswani, Gorrell, 2013</marker>
<rawString>Kalina Bontcheva, H. Cunningham, I. Roberts, A. Roberts, V. Tablan, N. Aswani, and G. Gorrell. 2013. GATE Teamware: a web-based, collaborative text annotation framework. Language Resources and Evaluation, 47(4):1007–1029.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Koby Crammer</author>
<author>Yoram Singer</author>
</authors>
<title>Ultraconservative online algorithms for multiclass problems.</title>
<date>2003</date>
<journal>In Journal of Machine Learning Research</journal>
<volume>3</volume>
<pages>951--991</pages>
<contexts>
<context position="11767" citStr="Crammer and Singer, 2003" startWordPosition="1801" endWordPosition="1804">tains several possibilities for annotations in parallel, and the user’s task is to select the correct annotation. This allows to leverage specialized external automatic annotation components, thus the tool is not limited to the integrated automation mechanism. Repetition mode In this mode, further occurrences of a word annotated by the user are highlighted in the suggestion pane. To accept suggestions, the user can simply click on them in the suggestion pane. This basic – yet effective – suggestion is realized using simple string matching. Learning mode For this mode, we have integrated MIRA (Crammer and Singer, 2003), an extension of the perceptron algorithm for online machine learning which allows for the automatic suggestions of span annotations. MIRA was selected because of its relatively lenient licensing, its good performance even on small amounts of data, and its capability of allowing incremental classifier updates. Results of automatic tagging are displayed in the suggestion pane. Our architecture is flexible to integrate further machine learning tools. 3.2 Suggestion Process The workflow to set up an automatically supported annotation project consists of the following steps. Importing annotation </context>
</contexts>
<marker>Crammer, Singer, 2003</marker>
<rawString>Koby Crammer and Yoram Singer. 2003. Ultraconservative online algorithms for multiclass problems. In Journal of Machine Learning Research 3, pages 951 – 991.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hamish Cunningham</author>
<author>D Maynard</author>
<author>K Bontcheva</author>
<author>V Tablan</author>
<author>N Aswani</author>
<author>I Roberts</author>
<author>G Gorrell</author>
<author>A Funk</author>
<author>A Roberts</author>
<author>D Damljanovic</author>
<author>T Heitz</author>
<author>M A Greenwood</author>
<author>H Saggion</author>
<author>J Petrak</author>
<author>Y Li</author>
<author>W Peters</author>
</authors>
<date>2011</date>
<journal>Text Processing with GATE (Version</journal>
<volume>6</volume>
<pages>978--0956599315</pages>
<institution>University of Sheffield Department of Computer Science, ISBN</institution>
<contexts>
<context position="3051" citStr="Cunningham et al., 2011" startWordPosition="432" endWordPosition="436">tecture to support three configurable generic structures: spans, relations, and chains. These support all of the original layers and allow the user to define arbitrary custom annotation layers based on either of these structures. Additionally, our approach allows maintaining multiple properties on annotations, e.g. to support morphological annotations, while previously only one property per annotation was supported. Automatic suggestion of annotations is based on machine learning, which is common practice in annotation tools. However, most of existing web-based annotation tools, such as GATE (Cunningham et al., 2011) or brat (Stenetorp et al., 2012), depend on external preprocessing and postprocessing plugins or on web services. These tools have limitations regarding adaptability (difficulty to adapt to other annotation tasks), reconfigurability (generating a classifier when new features and training documents are available is complicated), and reusability (requires manual intervention to add newly annotated documents into the iteration). For our approach, we assume that an annotator actually does manually verify all annotations to produce a completely labeled dataset. This task can be sped up by automati</context>
<context position="4424" citStr="Cunningham et al., 2011" startWordPosition="638" endWordPosition="641">cenario, where a system actively determines the most informative yet unannotated example to be labeled, in order to quickly arrive at a high-quality classifier that is then to be applied to large amounts of unseen data. Our contribution is the integration of machine learning into the tool to support exhaustive an91 Proceedings of 52nd Annual Meeting of the Association for Computational Linguistics: System Demonstrations, pages 91–96, Baltimore, Maryland USA, June 23-24, 2014. c�2014 Association for Computational Linguistics notation of documents providing a shorter loop than comparable tools (Cunningham et al., 2011; Stenetorp et al., 2012), because new documents are added to the training set as soon as they are completed by the annotators. The machine learning support currently applies to sequence classification tasks only. It is complemented by our extension allowing to define custom annotation layers, making it applicable to a wide range of annotation tasks with only little configuration effort. Section 2 reviews related work about the utilization of automatic supports and customization of annotation schemes in existing annotation tools. The integration of automatic suggestions into WebAnno, the desig</context>
</contexts>
<marker>Cunningham, Maynard, Bontcheva, Tablan, Aswani, Roberts, Gorrell, Funk, Roberts, Damljanovic, Heitz, Greenwood, Saggion, Petrak, Li, Peters, 2011</marker>
<rawString>Hamish Cunningham, D. Maynard, K. Bontcheva, V. Tablan, N. Aswani, I. Roberts, G. Gorrell, A. Funk, A. Roberts, D. Damljanovic, T. Heitz, M. A. Greenwood, H. Saggion, J. Petrak, Y. Li, and W. Peters. 2011. Text Processing with GATE (Version 6). University of Sheffield Department of Computer Science, ISBN 978-0956599315.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Binyam Gebrekidan Gebre</author>
</authors>
<title>Part-of-speech tagging for Amharic.</title>
<date>2009</date>
<booktitle>In ISMTCL Proceedings, International Review Bulag, PUFC.</booktitle>
<contexts>
<context position="15515" citStr="Gebre (2009)" startWordPosition="2378" endWordPosition="2379">ted, running, or finished). 3.3 Case Studies We describe two case studies that demonstrate language independence and flexibility with respect to sequence label types of our automatic annotation suggestions. In the first case study, we address the task of POS tagging for Amharic as an example of an under-resourced language. Second, we explore German named entity recognition. 3.3.1 Amharic POS tagging Amharic is an under-resourced language in the Semitic family, mainly spoken in Ethiopia. POS tagging research for Amharic is mostly conducted as an academic exercise. The latest result reported by Gebre (2009) was about 90% accuracy using the Walta Information Center (WIC) corpus of about 210,000 tokens (1065 news documents). We intentionally do not use the corpus as training data because of the reported inconsistencies in the tagging process (Gebre, 2009). Instead, we manually annotate Amharic documents for POS tagging both to test the performance of the automation module and to produce POS-tagged corpora for Amharic. Based upon the work by Petrov et al. (2012) and Ethiopian Languages Research Center (ELRC) tagset, we have designed 11 POS tags equivalent to the Universal POS tags. The tag DET is n</context>
</contexts>
<marker>Gebre, 2009</marker>
<rawString>Binyam Gebrekidan Gebre. 2009. Part-of-speech tagging for Amharic. In ISMTCL Proceedings, International Review Bulag, PUFC.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T G¨otz</author>
<author>O Suhre</author>
</authors>
<title>Design and implementation of the UIMA Common Analysis System.</title>
<date>2004</date>
<journal>IBM Systems Journal,</journal>
<volume>43</volume>
<issue>3</issue>
<pages>489</pages>
<marker>G¨otz, Suhre, 2004</marker>
<rawString>T. G¨otz and O. Suhre. 2004. Design and implementation of the UIMA Common Analysis System. IBM Systems Journal, 43(3):476 –489.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nancy Ide</author>
<author>Keith Suderman</author>
</authors>
<title>GrAF: A graph-based format for linguistic annotations.</title>
<date>2007</date>
<booktitle>In Proc. Linguistic Annotation Workshop,</booktitle>
<pages>1--8</pages>
<location>Prague, Czech Republic.</location>
<contexts>
<context position="7795" citStr="Ide and Suderman, 2007" startWordPosition="1166" endWordPosition="1169">e (Bontcheva et al., 2013) automation component is most similar to our work. It is based either on plugins and externally trained classification models, or uses web services. Thus, it is highly task specific and requires extensive configuration. The automatic annotation suggestion component in our tool, in contrast, is easily configurable and adaptable to different annotation tasks and allows the use of annotations from the current annotation project. Custom annotation layers Generic annotation data models are typically directed graph models (e.g. GATE, UIMA CAS (G¨otz and Suhre, 2004), GrAF (Ide and Suderman, 2007)). In addition, an annotation schema defines possible kinds of annotations, their properties and relations. While these models offer great expressiveness and flexibility, it is difficult to adequately transfer their power into a convenient annotation editor. For example, one schema may prescribe that the part-of-speech tag is a property on a Token annotation, another one may prescribe that the tag is a separate annotation, which is linked to the token. An annotator should not be exposed to these details in the UI and should be able to just edit a part-of-speech tag, ignorant of the internal re</context>
</contexts>
<marker>Ide, Suderman, 2007</marker>
<rawString>Nancy Ide and Keith Suderman. 2007. GrAF: A graph-based format for linguistic annotations. In Proc. Linguistic Annotation Workshop, pages 1–8, Prague, Czech Republic.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Todd Lingren</author>
<author>L Deleger</author>
<author>K Molnar</author>
<author>H Zhai</author>
<author>J MeinzenDerr</author>
<author>M Kaiser</author>
<author>L Stoutenborough</author>
<author>Q Li</author>
<author>I Solti</author>
</authors>
<title>Evaluating the impact of pre-annotation on annotation speed and potential bias: natural language processing gold standard development for clinical named entity recognition in clinical trial announcements.</title>
<date>2013</date>
<journal>In Journal of the American Medical Informatics Association,</journal>
<pages>951--991</pages>
<contexts>
<context position="5564" citStr="Lingren et al. (2013)" startWordPosition="818" endWordPosition="821">nnotation tools. The integration of automatic suggestions into WebAnno, the design principles followed, and two case studies are explained in Section 3. Section 4 presents the implementation of customizable annotation layers into the tool. Finally, Section 5 summarizes the main contributions and future directions of our work. 2 Related Work Automatic annotation support The impact of using lexical and statistical resources to produce pre-annotation automatically to increase the annotation speed has been studied widely for various annotation tasks. For the task of medical named entity labeling, Lingren et al. (2013) investigate the impact of automatic suggestions on annotation speed and potential biases using dictionary-based annotations. This technique results in 13.83% to 21.5% time saving and in an inter-annotator agreement (IAA) increase by several percentage points. WordFreak (Morton and LaCivita, 2003) includes an automation component, where instances with a low machine learning confidence are presented for annotation in an active learning setup. Beck et al. (2013) demonstrate that the use of active learning for machine translation reduces the annotation effort and show a reduced annotation load on</context>
</contexts>
<marker>Lingren, Deleger, Molnar, Zhai, MeinzenDerr, Kaiser, Stoutenborough, Li, Solti, 2013</marker>
<rawString>Todd Lingren, L. Deleger, K. Molnar, H. Zhai, J. MeinzenDerr, M. Kaiser, L. Stoutenborough, Q. Li, and I. Solti. 2013. Evaluating the impact of pre-annotation on annotation speed and potential bias: natural language processing gold standard development for clinical named entity recognition in clinical trial announcements. In Journal of the American Medical Informatics Association, pages 951 – 991.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Thomas Morton</author>
<author>Jeremy LaCivita</author>
</authors>
<title>WordFreak: an open tool for linguistic annotation.</title>
<date>2003</date>
<booktitle>In Proc. NAACL 2003, demonstrations,</booktitle>
<pages>17--18</pages>
<location>Edmonton, Canada.</location>
<contexts>
<context position="5862" citStr="Morton and LaCivita, 2003" startWordPosition="859" endWordPosition="862">and future directions of our work. 2 Related Work Automatic annotation support The impact of using lexical and statistical resources to produce pre-annotation automatically to increase the annotation speed has been studied widely for various annotation tasks. For the task of medical named entity labeling, Lingren et al. (2013) investigate the impact of automatic suggestions on annotation speed and potential biases using dictionary-based annotations. This technique results in 13.83% to 21.5% time saving and in an inter-annotator agreement (IAA) increase by several percentage points. WordFreak (Morton and LaCivita, 2003) includes an automation component, where instances with a low machine learning confidence are presented for annotation in an active learning setup. Beck et al. (2013) demonstrate that the use of active learning for machine translation reduces the annotation effort and show a reduced annotation load on three out of four datasets. The GoldenGATE editor (Sautter et al., 2007) integrates NLP tools and assistance features for manual XML editing. The tool is used in correcting/editing an automatically annotated document with an editor where both text and XML markups are modified. GoldenGATE is merel</context>
</contexts>
<marker>Morton, LaCivita, 2003</marker>
<rawString>Thomas Morton and Jeremy LaCivita. 2003. WordFreak: an open tool for linguistic annotation. In Proc. NAACL 2003, demonstrations, pages 17–18, Edmonton, Canada.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Slav Petrov</author>
<author>Dipanjan Das</author>
<author>Ryan McDonald</author>
</authors>
<title>A universal part-of-speech tagset.</title>
<date>2012</date>
<booktitle>In Proc LREC 2012,</booktitle>
<location>Istanbul, Turkey.</location>
<contexts>
<context position="15976" citStr="Petrov et al. (2012)" startWordPosition="2452" endWordPosition="2455">tic family, mainly spoken in Ethiopia. POS tagging research for Amharic is mostly conducted as an academic exercise. The latest result reported by Gebre (2009) was about 90% accuracy using the Walta Information Center (WIC) corpus of about 210,000 tokens (1065 news documents). We intentionally do not use the corpus as training data because of the reported inconsistencies in the tagging process (Gebre, 2009). Instead, we manually annotate Amharic documents for POS tagging both to test the performance of the automation module and to produce POS-tagged corpora for Amharic. Based upon the work by Petrov et al. (2012) and Ethiopian Languages Research Center (ELRC) tagset, we have designed 11 POS tags equivalent to the Universal POS tags. The tag DET is not included as Amharic denotes definiteness as noun suffixes. We collected some Amharic documents from an online news portal.2 Preprocessing of Amharic documents includes the normalization of characters and tokenization (sentence and word bound2http://www.ethiopianreporter.com/ 94 Figure 3: Example Amharic document. The red tags in the suggestion pane have not been confirmed by the annotator. Figure 4: UI for custom annotation layers. ary detection). Initia</context>
</contexts>
<marker>Petrov, Das, McDonald, 2012</marker>
<rawString>Slav Petrov, Dipanjan Das, and Ryan McDonald. 2012. A universal part-of-speech tagset. In Proc LREC 2012, Istanbul, Turkey.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Guido Sautter</author>
<author>Klemens B¨ohm</author>
<author>Frank Padberg</author>
<author>Walter Tichy</author>
</authors>
<date>2007</date>
<booktitle>Empirical Evaluation of Semi-automated XML Annotation of Text Documents with the GoldenGATE Editor.</booktitle>
<location>Budapest, Hungary.</location>
<marker>Sautter, B¨ohm, Padberg, Tichy, 2007</marker>
<rawString>Guido Sautter, Klemens B¨ohm, Frank Padberg, and Walter Tichy. 2007. Empirical Evaluation of Semi-automated XML Annotation of Text Documents with the GoldenGATE Editor. Budapest, Hungary.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Pontus Stenetorp</author>
<author>Sampo Pyysalo</author>
<author>Goran Topi´c</author>
<author>Tomoko Ohta</author>
<author>Sophia Ananiadou</author>
<author>Jun’ichi Tsujii</author>
</authors>
<title>brat: a Web-based Tool for NLP-Assisted Text Annotation.</title>
<date>2012</date>
<booktitle>In Proc. EACL</booktitle>
<location>Demo Session, Avignon, France.</location>
<marker>Stenetorp, Pyysalo, Topi´c, Ohta, Ananiadou, Tsujii, 2012</marker>
<rawString>Pontus Stenetorp, Sampo Pyysalo, Goran Topi´c, Tomoko Ohta, Sophia Ananiadou, and Jun’ichi Tsujii. 2012. brat: a Web-based Tool for NLP-Assisted Text Annotation. In Proc. EACL 2012 Demo Session, Avignon, France.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Seid Muhie Yimam</author>
<author>Iryna Gurevych</author>
<author>Richard Eckart de Castilho</author>
<author>Chris Biemann</author>
</authors>
<title>WebAnno: A flexible,web-based and visually supported system for distributed annotations.</title>
<date>2013</date>
<booktitle>In Proc. ACL 2013 System Demonstrations,</booktitle>
<pages>1--6</pages>
<location>Sofia, Bulgaria.</location>
<marker>Yimam, Gurevych, de Castilho, Biemann, 2013</marker>
<rawString>Seid Muhie Yimam, Iryna Gurevych, Richard Eckart de Castilho, and Chris Biemann. 2013. WebAnno: A flexible,web-based and visually supported system for distributed annotations. In Proc. ACL 2013 System Demonstrations, pages 1–6, Sofia, Bulgaria.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Amir Zeldes</author>
<author>Julia Ritz</author>
<author>Anke L¨udeling</author>
<author>Christian Chiarcos</author>
</authors>
<title>ANNIS: A search tool for multi-layer annotated corpora.</title>
<date>2009</date>
<booktitle>In Proc. Corpus Linguistics</booktitle>
<location>Liverpool, UK.</location>
<marker>Zeldes, Ritz, L¨udeling, Chiarcos, 2009</marker>
<rawString>Amir Zeldes, Julia Ritz, Anke L¨udeling, and Christian Chiarcos. 2009. ANNIS: A search tool for multi-layer annotated corpora. In Proc. Corpus Linguistics 2009, Liverpool, UK.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>