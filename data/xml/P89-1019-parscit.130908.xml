<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000001">
<title confidence="0.960333">
A Calculus for Semantic Composition and Scoping
</title>
<note confidence="0.964824333333333">
Fernando C.N. Pereira
Artificial Intelligence Center, SRI International
333 Ravenswood Ave., Menlo Park, CA 94025, USA
</note>
<sectionHeader confidence="0.987656" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.99970275">
Certain restrictions on possible scopings of quan-
tified noun phrases in natural language are usually
expressed in terms of formal constraints on bind-
ing at a level of logical form. Such reliance on the
form rather than the content of semantic inter-
pretations goes against the spirit of composition-
ality. I will show that those scoping restrictions
follow from simple and fundamental facts about
functional application and abstraction, and can be
expressed as constraints on the derivation of possi-
ble meanings for sentences rather than constraints
of the alleged forms of those meanings.
</bodyText>
<sectionHeader confidence="0.960191" genericHeader="method">
1 An Obvious Constraint?
</sectionHeader>
<bodyText confidence="0.999762125">
Treatments of quantifier scope in Montague gram-
mar (Montague, 1973; Dowty et al., 1981; Cooper,
1983), transformational grammar (Reinhart, 1983;
May, 1985; Heim, 1982; Roberts, 1987) and com-
putational linguistics (Hobbs and Shieber, 1987;
Moran, 1988) have depended implicitly or explic-
itly on a constraint on possible logical forms to
explain why examples&apos; such as
</bodyText>
<listItem confidence="0.9439845">
(1) * A woman who saw every man disliked
him
are ungrammatical, and why in examples such as
(2) Every man saw a friend of his
(3) Every admirer of a picture of himself is
vain
</listItem>
<bodyText confidence="0.799176153846154">
the every.., noun phrase must have wider scope
than the a... noun phrase if the pronoun in each
example is assumed to be bound by its antecedent.
What exactly counts as bound anaphora varies be-
tween different accounts of the phenomena, but
the rough intuition is that semantically a bound
pronoun plays the role of a variable bound by the
logical form (a quantifier) of its antecedent. Ex-
ample (1) above is then &amp;quot;explained&amp;quot; by noting that
1In all the examples that follow, the pronoun and its
intended antecedent are italicized. As usual, starred exam-
ples are supposed to be ungrammatical.
its logical form would be something like
</bodyText>
<figure confidence="0.644221">
3W.WOMAN(W)SL
(VM.MAN(M) SAW (W , m))SZ
DISLIKED ( w , m)
</figure>
<bodyText confidence="0.995928583333334">
but this is &amp;quot;ill-formed&amp;quot; because variable m occurs
as an argument of DISLIKED outside the scope of
its binder Vm.2 As for Examples (2) and (3),
the argument is similar: wide scope for the log-
ical form of the a... noun phrase would leave an
occurrence of the variable that the logical form of
every.., binds outside the scope of this quantifier.
For lack of an official name in the literature for
this constraint, I will call it here the free-variable
constraint.
In accounts of scoping possibilities based on
quantifier raising or storage (Cooper, 1983; van Ei-
jck, 1985; May, 1985; Hobbs and Shieber, 1987),
the free-variable constraint is enforced either by
keeping track of the set of free variables FREE(q)
in each raisable (storable) term q and when x E
FREE(q) blocking the raising of q from any context
Bz.t in which x is bound by some binder B, or by
checking after all applications of raising (unstor-
ing) that no variable occurs outside the scope of
its binder.
The argument above is often taken to be so ob-
vious and uncontroversial that it warrants only a
remark in passing, if any (Cooper, 1983; Rein-
hart, 1983; Partee and Bach, 1984; May, 1985; van
Riemsdijk and Williams, 1986; Williams, 1986;
Roberts, 1987), even though it depends on non-
trivial assumptions on the role of logical form in
linguistic theory and semantics.
First of all, and most immediately, there is the
requirement for a logical-form level of representa-
tion, either in the predicate-logic format exempli-
fied above or in some tree format as is usual in
transformational grammar (Heim, 1982; Cooper,
1983; May, 1985; van Riemsdijk and Williams,
1986; Williams, 1986; Roberts, 1987).
</bodyText>
<footnote confidence="0.765815666666667">
2In fact, this is a perfectly good open well-formed for-
mula and therefore the precise formulation of the constraint
is more delicate than seems to be realized in the literature.
</footnote>
<page confidence="0.995307">
152
</page>
<bodyText confidence="0.999800791666666">
Second, and most relevant to Montague gram-
mar and related approaches, the constraint is for-
mulated in terms of restrictions on formal ob-
jects (logical forms) which in turn are related to
meanings through a denotation relation. How-
ever, compositionality as it is commonly under-
stood requires meanings of phrases to be func-
tions of the meanings rather than the forms of
their constituents. This is a problem even in ac-
counts based on quantifier storage (Cooper, 1983;
van Eijck, 1985), which are precisely designed, as
van Eijck puts it, to &amp;quot;avoid all unnecessary ref-
erence to properties of ... formulas&amp;quot; (van Eijck,
1985, p. 214). In fact, van Eijck proposes an inter-
esting modification of Cooper storage that avoids
Cooper&apos;s reliance on forbidding vacuous abstrac-
tion to block out cases in which a noun phrase is
unstored while a noun phrase contained in it is
still in store. However, this restriction does not
deal with the case I have been discussing.
It is also interesting to observe that a wider class
of examples of forbidden scopings would have to
be considered if raising out of relative clauses were
allowed, for example in
</bodyText>
<listItem confidence="0.812501">
(4) An author who John has read every book
by arrived
</listItem>
<bodyText confidence="0.999906">
In this example, if we did not assume the re-
striction against raising from relative clauses, the
every.., noun phrase could in principle be as-
signed widest scope, but this would be blocked by
the free-variable constraint as shown by the occur-
rence of b free as an argument of BOOK-BY in
</bodyText>
<equation confidence="0.449649666666667">
Vb.BooK-BY(b, a)
(3a.AuTHoR(a)Se
HAS-READ(JOHN, b)SLARRIVED(a))
</equation>
<bodyText confidence="0.9998125">
That is, the alleged constraint against raising from
relatives, for which many counterexamples exist
(Vanlehn, 1978), blocks some derivations in which
otherwise the free-variable constraint would be in-
volved, specifically those associated to syntactic
configurations of the form
</bodyText>
<equation confidence="0.752159">
[Np, • • • Ks— • • [Npi • • Xi • • • • .] • • .1
</equation>
<bodyText confidence="0.999954565217391">
where Xi is a pronoun or trace coindexed with
NPi and NP, is a quantified noun phrase. Since
some of the most extensive Montague grammar
fragments in the literature (Dowty et al., 1981;
Cooper, 1983) do not cover the other major source
of the problem, PP complements of noun phrases
(replace S by PP in the configuration above), the
question is effectively avoided in those treatments.
The main goal of this paper is to argue that the
free-variable constraint is actually a consequence
of basic semantic properties that hold in a seman-
tic domain allowing functional application and ab-
straction, and are thus independent of a particular
logical-form representation. As a corollary, I will
also show that the constraint is better expressed
as a restriction on the derivations of meanings of
sentences from the meanings of their parts rather
than a restriction on logical forms. The result-
ing system is related to the earlier system of con-
ditional interpretation rules developed by Pollack
and Pereira (1988), but avoids that system&apos;s use
of formal conditions on the order of assumption
discharge.
</bodyText>
<sectionHeader confidence="0.995167" genericHeader="method">
2 Curry&apos;s Calculus of Func-
tionality
</sectionHeader>
<bodyText confidence="0.999695257142857">
Work in combinatory logic and the A-calculus is
concerned with the elucidation of the basic notion
of functionality: how to construct functions, and
how to apply functions to their arguments. There
is a very large body of results in this area, of which
I will need only a very small part.
One of the simplest and most elegant accounts
of functionality, originally introduced by Curry
and Feys (1968) and further elaborated by other
authors (Stenlund, 1972; Lambek, 1980; Howard,
1980) involves the use of a logical calculus to de-
scribe the types of valid functional objects. In a
natural deduction format (Prawitz, 1965), the cal-
culus can be simply given by the two rules in Fig-
ure 1. The first rule states that the result of ap-
plying a function from objects of type A to objects
of type B (a function of type A B) to an ob-
ject of type A is an object of type B. The second
rule states that if from an arbitrary object of type
A it is possible to construct an object of type B,
then one has a function from objects of type A
to objects of type B. In this rule and all that fol-
low, the parenthesized formula at the top indicates
the discharge of an assumption introduced in the
derivation of the formula below it. Precise defini-
tions of assumption and assumption discharge are
given below.
The typing rules can be directly connected to
the use of the .X-calculus to represent functions by
restating the rules as shown in Figure 2. That is,
if u has type A and v has type A —■• B then v(u)
has type B, and if by assuming that x has type
A we can show that u (possibly containing x) has
type B, then the function represented by As.0 has
type A --• B.
</bodyText>
<page confidence="0.995763">
153
</page>
<figure confidence="0.9984725">
A A --# B (A)
A B
</figure>
<figureCaption confidence="0.99739">
Figure 1: Curry Rules
</figureCaption>
<figure confidence="0.848081">
[app]•u:A v:A-413 (x : A)
v(u) : B [abs] u : B
Ax,u : A —■ B
</figure>
<figureCaption confidence="0.99973">
Figure 2: Curry Rules for Type Checking
</figureCaption>
<bodyText confidence="0.992318433962264">
To understand what inferences are possible with
rules such as the ones in Figure 2, we need a precise
notion of derivation, which is here adapted from
the one given by Prawitz (1965). A derivation
is a tree with each node n labeled by a formula
d)(n) (the conclusion of the node) and by a set
r(n) of formulas giving the assumptions of dl(n).
In addition, a derivation D satisfies the following
conditions:
i. For each leaf node n E D, either 0(n) is an
axiom, which in our case is a formula giving the
type and interpretation of a lexical item, and
then r(n) is empty, or On) is an assumption,
in which case r(n) = {0(n)}
ii. Each nonleaf node n corresponds either to an
application of [app], in which case it has two
daughters m and m&apos; with O(m) u : A,
0(ne) v : A —* B, (1,(n) v(u) : B and
r(n) = r(m) U r(m&apos;), or to an application of
(al&apos;s], in which case n has a single daughter m,
and 0(m) u : B, 0(n) Ax.0 : A —■ B, and
r(n) = r(m) — {x : A}
If n is the root node of a derivation D, we say that
D is a derivation of q(n) from the assumptions
r(n).
Notice that condition (ii) above allows empty
abstraction, that is, the application of rule [abs]
to some formula u : B even if x : A is not
one of the assumptions of u : B. This is neces-
sary for the Curry calculus, which describes all
typed A-terms, including those with vacuous ab-
straction, such as the polymorphic K combinator
Ax.Ay.x : A (B A). However, in the present
work, every abstraction needs to correspond to
an actual functional dependency of the interpre-
tation of a phrase on the interpretation of one of
its constituents. Condition (ii) can be easily modi-
fied to block vacuous abstraction by requiring that
x : A E r(m) for the application of the labs] rule
to a derivation node m. 3
The definition of derivation above can be gener-
alized to arbitrary rules with n premises and one
conclusion by defining a rule of inference as a n+1-
place relation on pairs of formulas and assumption
sets. For example, elements of the [app] relation
would have the general form ((u : A, I&apos;s), (v : A
B, (v(u) : B, ri u ro), while elements of the
labs] rule without vacuous abstraction would have
the form ((u : B, r), (Ax.0 : A --+ B, r - {x : A}))
whenever x : A E r. This definition should be
kept in mind when reading the derived rules of
inference presented informally in the rest of the
paper.
</bodyText>
<sectionHeader confidence="0.7471365" genericHeader="method">
3 Semantic Combinations
and the Curry Calculus
</sectionHeader>
<bodyText confidence="0.987230368421052">
In one approach to the definition of allowable se-
mantic combinations, the possible meanings of a
phrase are exactly those whose type can be de-
rived by the rules of a semantic calculus from ax-
ioms giving the types of the lexical items in the
phrase. However, this is far too liberal in that
3Without this restriction to the abstraction rule, the
types derivable using the rules in Figure 2 are exactly the
consequences of the three axioms A A, A --• (B -+ A)
and (A -+ (B -• C)) -• ((A -+ B) -+ (A C)), which
are the polymorphic types of the three combinators I, K
and S that generate all the closed typed A-calculus terms.
Furthermore, if we interpret -■ as implication, these theo-
rems are exactly those of the pure implicational fragment
of intuitionistic propositional logic (Curry and Feys, 1968;
Stenlund, 1972; Anderson and Belnap, 1975). In contrast,
with the restriction we have the weaker system of pure rel-
evant implication R... (Prawitz, 1965; Anderson and Bel-
nap, 1975).
</bodyText>
<page confidence="0.836997">
15J4
</page>
<bodyText confidence="0.997988740740741">
the possible meanings of English phrases do not
depend only on the types involved but also on
the syntactic structure of the phrases. A possible
way out is to encode the relevant syntactic con-
straints in a more elaborate and restrictive system
of types and rules of inference. The prime exam-
ple of a more constrained system is the Lambek
calculus (Lambek, 1958) and its more recent elab-
orations within categorial grammar and semantics
(van Benthem, 1986a; van Benthem, 1986b; Hen-
driks, 1987; Moortgat, 1988). In particular, Hen-
driks (1987) proposes a system for quantifier rais-
ing, which however is too restrictive in its coverage
to account for the phenomena of interest here.
Instead of trying to construct a type system
and type rules such that free application of the
rules starting from appropriate lexical axioms will
generate all and only the possible meanings of a
phrase, I will instead take a more conservative
route related to Montague grammar and early ver-
sions of GPSG (Gazdar, 1982) and use syntactic
analyses to control semantic derivations.
First, a set of derived rules will be used in addi-
tion to the basic rules of application and abstrac-
tion. Semantically, the derived rules will add no
new inferences, since they will merely codify infer-
ences already allowed by the basic rules of the cal-
culus of functionality. However, they provide the
semantic counterparts of certain syntactic rules.
Second, the use of some semantic rules must
be licensed by a particular syntactic rule and the
premises in the antecedent of the semantic rule
must correspond in a rule-given way to the mean-
ings of the constituents combined by the syntactic
rule. As a simple example using a context-free
syntax, the syntactic rule S NP VP might li-
cense the function application rule [app] with A
the type of the meaning of the NP and A B
the type of the meaning of the VP.
Third, the domain of types will be enriched with
a few new type constructors, in addition to the
function type constructor From a purely se-
mantic point of view, these type constructors add
no new types, but allow a convenient encoding of
rule applicability constraints motivated by syntac-
tic considerations. This enrichment of the formal
universe of types for syntactic purposes is famil-
iar from Montague grammar (Montague, 1973),
where it is used to distinguish different syntac-
tic realizations of the same semantic type, and
from categorial grammar (Lambek, 1958; Steed-
man, 1987), where it is used to capture syntactic
word-order constraints.
Together, the above refinements allow the syn-
</bodyText>
<figureCaption confidence="0.997469">
Figure 4: Bound Anaphora Rules
</figureCaption>
<bodyText confidence="0.9995902">
tax of language to restrict what potential semantic
combinations are actually realized. Any deriva-
tions will be sound with respect to [app] and [abs],
but many derivations allowed by these rules will
be blocked.
</bodyText>
<sectionHeader confidence="0.997707" genericHeader="method">
4 Derived Rules
</sectionHeader>
<bodyText confidence="0.997526333333333">
In the rules below, we will use the two basic
types e for individuals and t for propositions,
the function type constructor associating to
the right, the formal type constructor quant(q),
where q is a quantifier, that is, a value of type
(e t) •—■ t, and the two formal types pron for
pronoun assumptions and trace for traces in rel-
ative clauses. For simplicity in examples, I will
adopt a &amp;quot;reverse Curried&amp;quot; notation for the mean-
ings of verbs, prepositions and relational nouns.
For example, the meaning of the verb to love will
be LOVE : e —• e t, with x the lover and y the
loved one in LovE(y)(x). The assumptions corre-
sponding to lexical items in a derivation will be
appropriately labeled.
</bodyText>
<subsectionHeader confidence="0.9689725">
4.1 Trace Introduction and Ab-
straction
</subsectionHeader>
<bodyText confidence="0.9999111">
The two derived rules in Figure 3 deal with traces
and the meaning of relative clauses. Rule [trace+]
is licensed by the the occurrence of a trace in the
syntax, and rule [trace—] by the construction of a
relative clause from a sentence containing a trace.
Clearly, if n : e t can be derived from some as-
sumptions using these rules, then it can be derived
using rule [abs] instead.
For an example of use of [trace+] and [trace—],
assume that the meaning of relative pronoun that
</bodyText>
<table confidence="0.85450575">
is THAT dr..1 Ar.An.Ax.n(x)Ser(x) : (e t) (e
x (x : trace)
[trace-H : trace [trace—] : t
z : e e t
Figure 3: Rules for Relative Clauses
Epron+1 &apos; :pron (x : pron)
: e [pron—] • s : A y : B
(Ax.$)(y) : A
</table>
<page confidence="0.927162">
155
</page>
<figure confidence="0.999432875">
[trace] y : trace
[trace+] y : e [lexical] OWN : e e —• t
[app] OWN(y) : e t [lexical] JOHN : e
[app] OWN(y)(JOHN) : t –+ t [lexical] THAT: •—■ e t e t
, I
[trace—] Ay.oWN(y)(JOHN) :
[app] An.Ax.n(x)SzowN(x)(JoHN) : (e t) (e t) [lexical] CAR.: e t
[app] Ax.CAR(x)StoWN(x)(JOHN) : e t
</figure>
<figureCaption confidence="0.999682">
Figure 5: Using De rived Rules .
</figureCaption>
<bodyText confidence="0.9831929">
t) (e --• t). Given appropriate syntactic licens-
ing, Figure 5 shows the derivation of a meaning
for car that John owns. Each nonleaf node in the
derivation is labeled with the rule that was used
to derive it, and leaf nodes are labeled accord-
ing to their origin (lexical entries for words in the
phrase or syntactic traces). The assumptions at
each node are not given explicitly, but can be eas-
ily computed by looking in the subtree rooted at
the node for undischarged assumptions.
</bodyText>
<subsectionHeader confidence="0.998699">
4.2 Bound Anaphora Introduction
and Elimination
</subsectionHeader>
<bodyText confidence="0.999206909090909">
Another pair of rules, shown in Figure 4, is re-
sponsible for introducing a pronoun and resolving
it as bound anaphora. The pronoun resolution rule
[pron—] applies only when B is trace or quant(q)
for some quantifier q. Furthermore, the premise
y : B does not belong to an immediate constituent
of the phrase licensing the rule, but rather to some
undischarged assumption of s : A, which will re-
main undischarged.
These rules deal only with the construction
of the meaning of phrases containing bound
anaphora. In a more detailed grammar, the li-
censing of both rules would be further restricted
by linguistic constraints on coreference — for in-
stance, those usually associated with c-command
(Reinhart, 1983), which seem to need access to
syntactic information (Williams, 1986). In partic-
ular, the rules as given do not by themselves en-
force any constraints on the possible antecedents
of reflexives.
The soundness of the rules can be seen by noting
that the schematic derivation
</bodyText>
<figure confidence="0.87929925">
: pron)
x : e
•
•
S : A y : B
(Ax.$)(y) : A
corresponds to a special case of the schematic
derivation
(x : e)
s : A
y : e Ax.s :e--■ A
(Ax.$)(y) : A
</figure>
<bodyText confidence="0.99939725">
The example derivation in Figure 7, which will be
explianed in more detail later, shows the applica-
tion of the anaphora rules in deriving an interpre-
tation for example sentence (2).
</bodyText>
<page confidence="0.988918">
156
</page>
<figure confidence="0.972893666666667">
[quant-F] • q (a t) t x : quant(q) (x : quant(q))
x : e [quant--] • s : t
q(Ax.$):t
</figure>
<figureCaption confidence="0.998569">
Figure 6: Quantifier Rules
</figureCaption>
<subsectionHeader confidence="0.999382">
4.3 Quantifier Raising
</subsectionHeader>
<bodyText confidence="0.9999745">
The rules discussed earlier provide some of the
auxiliary machinery required to illustrate the free-
variable constraint. However, the main burden of
enforcing the constraint falls on the rules responsi-
ble for quantifier raising, and therefore I will cover
in somewhat greater detail the derivation of those
rules from the basic rules of functionality.
I will follow here the standard view (Montague,
1973; Barwise and Cooper, 1981) that natural-
language determiners have meanings of type (e —■
</bodyText>
<equation confidence="0.703899">
t) (e —0 t) —o t. For example, the mean-
</equation>
<bodyText confidence="0.98371725">
ing of every might be Ar.As.Vx.r(x) s(x), and
the meaning of the noun phrase every man will be
As.Vx.mAN(x) = s(x). To interpret the combina-
tion of a quantified noun phrase with the phrase
containing it that forms its scope, we apply the
meaning of the noun phrase to a property s de-
rived from the meaning of the scope. The pur-
pose of devices such as quantifying-in in Montague
grammar, Cooper storage or quantifier raising in
transformational grammar is to determine a scope
for each noun phrase in a sentence. From a se-
mantic point of view, the combination of a noun
phrase with its scope, most directly expressed by
Montague&apos;s quantifying-in rules,4 corresponds to
the following schematic derivation in the basic cal-
culus (rules (app] and [abs] only):
</bodyText>
<equation confidence="0.969992">
(x: e)
s : t
Ax.s : e t q : (e t) t
q(Ax.$): t
</equation>
<bodyText confidence="0.99876055">
where the assumption x : e is introduced in the
derivation at a position corresponding to the oc-
currence of the noun phrase with meaning q in
the sentence. In Montague grammar, this corre-
spondence is enforced by using a notion of syn-
tactic combination that does not respect the syn-
41n general, quantifying-in has to apply not only to
proposition-type scopes but also to property-type scopes
(meanings of common-noun phrases and verb-phrases). Ex-
tending the argument that follows to those cases offers no
difficulties.
tactic structure of sentences with quantified noun
phrases. Cooper storage was in part developed
to cure this deficiency, and the derived rules pre-
sented below address the same problem.
Now, the free-variable constraint is involved in
situations in which the quantifier q itself depends
on assumptions that must be discharged. The rel-
evant incomplete schematic derivation (again in
terms of [app] and (abs] only) is
</bodyText>
<equation confidence="0.678738333333333">
(a) (x e) (b) y : e
e t q : (a t) t (5)
q(Ax.$):t
</equation>
<bodyText confidence="0.960397875">
Given that the assumption y: e has not been dis-
charged in the derivation of q : (e t) t,
that is, y : e is an undischarged assumption of
q : (a —o t) t, the question is how to com-
plete the whole derivation. If the assumption were
discharged before q had been combined with its
scope, the result would be the semantic object
Ay.q : a —0 (e —o t) t, which is of the wrong
type to be combined by [app] with the scope Ax.s.
Therefore, there is no choice but to discharge (b)
after q is combined with its scope. Put in an-
other way, q cannot be raised outside the scope
of abstraction for the variable y occurring free in
q; which is exactly what is going on in Example
(4) (`An author who John has read every book by
arrived&apos;). A correct schematic derivation is then
</bodyText>
<equation confidence="0.475802666666667">
(a) (x : e)
(b) (y : e)
s : t
Ax.s : q : (e —0 t) t
q(Ax.$):t
u : A
</equation>
<subsectionHeader confidence="0.4998">
e —o A
</subsectionHeader>
<bodyText confidence="0.884511">
In the schematic derivations above, nothing en-
sures the association between the syntactic posi-
</bodyText>
<equation confidence="0.575516">
s : t
</equation>
<page confidence="0.682788">
157
</page>
<figure confidence="0.980432428571429">
EVERY MAN
sAw(f)(m)
[quant—] A(FRIEND-oF(h))(Af.sAw(f)(m))
„,,
[pron--] A(FRIEND-OFkmMAJ.SAW(f)(m))
, I
[quant—] EvErw(mAN)(Am.A. (FRIEND-0F(m))(Af.sAw (f )(m)))
</figure>
<figureCaption confidence="0.94795">
Most interpretation types and the inference rule label on uses of [app] have been omitted for simplicity.
Figure 7: Derivation Involving Anaphora and Quantification
</figureCaption>
<figure confidence="0.764359166666667">
EVERY(MAN) (a) m: quant(EVERY(MAN)) (b) h : pron
[quant-I-] m : e FRIEND-OF [pron-F] h : e
A FRIEND-OF(h)
A(FRIEND-OF(h)) (c) f : quant(A(FRIEND-OF(h)))
SAW [quant-I-] f : e
SAW(f)
</figure>
<bodyText confidence="0.999887625">
tion of the quantified noun phrase and the intro-
duction of assumption (a). To do this, we need
the the derived rules in Figure 6. Rule (quant-i]
is licensed by a quantified noun phrase. Rule
[quant—] is not keyed to any particular syntactic
construction, but instead may be applied when-
ever its premises are satisfied. It is clear that any
use of [quant-1-] and (quant—] in a derivation
</bodyText>
<equation confidence="0.848548333333333">
q : (e —+ t) t (x : quant(q))
z : e
s : t
</equation>
<bodyText confidence="0.98584">
q(Ax.$): t
can be justified by translating it into an instance
of the schematic derivation (5).
The situation relevant to the free-variable con-
straint arises when q in (quant-1-] depends on as-
sumptions. It is straightforward to see that the
constraint on a sound derivation according to the
basic rules discussed earlier in this section turns
now into the constraint that an assumption of the
form z : quant(q) must be discharged before any
of the assumptions on which q depends. Thus, the
free-variable constraint is reduced to a constraint
on derivations imposed by the basic theory of func-
tionality, dispensing with a logical-form represen-
tation of the constraint. Figure 7 shows a deriva-
tion for the only possible scoping of sentence (2)
when every man is selected as the antecedent of
his. To allow for the selected coreference, the pro-
noun assumption must be discharged before the
quantifier assumption (a) for every man. Further-
more, the constraint on dependent assumptions
requires that the quantifier assumption (c) for a
friend of his be discharged before the pronoun as-
sumption (b) on which it depends. It then follows
that assumption (c) will be discharged before as-
sumption (a), forcing wide scope for every man.
</bodyText>
<page confidence="0.998165">
158
</page>
<sectionHeader confidence="0.992867" genericHeader="discussions">
5 Discussion
</sectionHeader>
<bodyText confidence="0.999980941176471">
The approach to semantic interpretation outlined
above avoids the need for manipulations of log-
ical forms in deriving the possible meanings of
quantified sentences. It also avoids the need for
such devices as distinguished variables (Gazdar,
1982; Cooper, 1983) to deal with trace abstrac-
tion. Instead, specialized versions of the basic rule
of functional abstraction are used. To my knowl-
edge, the only other approaches to these problems
that do not depend on formal operations on log-
ical forms are those based on specialized logics
of type change, usually restrictions of the Curry
or Lambek systems (van Benthem, 1986a; Hen-
driks, 1987; Moortgat, 1988). In those accounts,
a phrase P with meaning p of type T is consid-
ered to have also alternative meaning p&apos; of type
T&apos;, with the corresponding combination possibil-
ities, if p&apos; : T&apos; follows from p : T in the chosen
logic. The central problem in this approach is to
design a calculus that will cover all the actual se-
mantic alternatives (for instance, all the possible
quantifier scopings) without introducing spurious
interpretations. For quantifier raising, the system
of Hendriks (1987) seems the most promising so
far, but it is at present too restrictive to support
raising from noun-phrase complements.
An important question I have finessed here is
that of the compositionality of the proposed se-
mantic calculus. It is clear that the application of
semantic rules is governed only by the existence of
appropriate syntactic licensing and by the avail-
ability of premises of the appropriate types. In
other words, no rule is sensitive to the form of any
of the meanings appearing in its premises. How-
ever, there may be some doubt as to the status
of the basic abstraction rule and those derived
from it. After all, the use of A-abstraction in the
consequent of those rules seems to imply the con-
straint that the abstracted object should formally
be a variable. However, this is only superficially
the case. I have used the formal operation of A-
abstraction to represent functional abstraction in
this paper, but functional abstraction itself is in-
dependent of its formal representation in the A-
calculus. This can be shown either by using other
notations for functions and abstraction, such as
that of de Bruijn&apos;s (Barendregt, 1984; Huet, 1986),
or by expressing the semantic derivation rules in A-
Prolog (Miller and Nadathur, 1986) following ex-
isting presentations of natural deduction systems
(Felty and Miller, 1988).
</bodyText>
<sectionHeader confidence="0.997712" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.999817">
This research was supported by a contract with
the Nippon Telephone and Telegraph Corp. and
by a gift from the Systems Development Founda-
tion as part of a coordinated research effort with
the Center for the Study of Language and Informa-
tion, Stanford University. I thank Mary Dalrym-
ple and Stuart Shieber for their helpful discussions
regarding this work.
</bodyText>
<sectionHeader confidence="0.967982" genericHeader="references">
Bibliography
</sectionHeader>
<reference confidence="0.993392666666667">
Alan Ross Anderson and Nuel D. Belnap, Jr.
1975. Entailment: the Logic of Relevance
and Necessity, Volume I. Princeton University
Press, Princeton, New Jersey.
Hank P. Barendregt. 1984. The Lambda Calcu-
lus: its Syntax and Semantics. North-Holland,
Amsterdam, Holland.
Jon Barwise and Robin Cooper. 1981. General-
ized quantifiers and natural language. Linguis-
tics and Philosophy, 4:159-219.
Robin Cooper. 1983. Quantification and Syntac-
tic Theory. D. Reidel, Dordrecht, Netherlands.
Haskell B. Curry and Robert Feys. 1968. Com-
binatory Logic, Volume I. Studies in Logic
and the Foundations of Mathematics. North-
Holland, Amsterdam, Holland. Second print-
ing.
David R. Dowty, Robert E. Wall, and Stanley Pe-
ters. 1981. Introduction to Montague Seman-
tics, Volume 11 of Synthese Language Library.
D. Reidel, Dordrecht, Holland.
Amy Felty and Dale Miller. 1988. Specifying theo-
rem provers in a higher-order logic programming
language. Technical Report MS-CIS-88-12, De-
partment of Computer and Information Science,
University of Pennsylvania, Philadelphia, Penn-
sylvania.
Gerald Gazdar. 1982. Phrase structure grammar.
In P. Jacobson and G.K. Pullum, editors, The
Nature of Syntactic Representation, pages 131-
186. D. Reidel, Dordrecht, Holland.
Irene R. Heim. 1982. The Semantics of Defi-
nite and Indefinite Noun Phrases. Ph.D. thesis,
Department of Linguistics, University of Mas-
sachusetts, Amherst, Massachusetts (Septem-
ber).
Herman Hendriks. 1987. Type change in seman-
tics: the scope of quantification and coordina-
tion. In Ewan Klein and Johan van Benthem,
</reference>
<page confidence="0.994306">
159
</page>
<reference confidence="0.995032577319588">
editors, Categories, Polymorphism and Unifica-
tion, pages 95-120. Centre for Cognitive Sci-
ence, University of Edinburgh, Edinburgh, Scot-
land.
Jerry R. Hobbs and Stuart M. Shieber. 1987.
An algorithm for generating quantifier scopings.
Computational Linguistics, 13:47-63.
W.A. Howard. 1980. The formulae-as-types no-
tion of construction. In J.P. Seldin and J.R.
Hindley, editors, To H.B. Curry: Essays on
Combinatory Logic, Lambda Calculus and For-
malism, pages 479-490. Academic Press, Lon-
don, England.
Gerard Huet. 1986. Formal structures for compu-
tation and deduction. First edition of the lec-
ture notes of a course given in the Computer Sci-
ence Department of Carnegie-Mellon University
during the Spring of 1986 (May).
Joachim Lambek. 1958. The mathematics of
sentence structure. American Mathematical
Monthly, 65:154-170.
Joachim Lambek. 1980. From A-calculus to carte-
sian closed categories. In J.P. Seldin and J.R.
Hindley, editors, To H.B. Curry: Essays on
Combinatory Logic, Lambda Calculus and For-
malism, pages 375-402. Academic Press, Lon-
don, England.
Robert May. 1985. Logical Form: its Struc-
ture and Derivation, Volume 12 of Linguistic
Inquiry Monographs. MIT Press, Cambridge,
Massachusetts.
Dale A. Miller and Gopalan Nadathur. 1986.
Higher-order logic programming. In Ehud
Shapiro, editor, Third International Confer-
ence on Logic Programming, Berlin, Germany.
Springer-Verlag.
Richard Montague. 1973. The proper treatment
of quantification in ordinary English. In Rich-
mond H. Thomason, editor, Formal Philosphy.
Yale University Press.
Michael Moortgat. 1988. Categorial Investiga-
tions: Logical and Linguistic Aspects of the
Lambek Calculus. Ph.D. thesis, University of
Amsterdam, Amsterdam, Holland (October).
Douglas B. Moran. 1988. Quantifier scoping in
the SRI Core Language Engine. In 26th Annual
Meeting of the Association for Computational
Linguistics, pages 33-47, Morristown, New Jer-
sey. Association for Computational Linguistics.
Barbara Partee and &amp;ninon Bach. 1984. Quan-
tification, pronouns and VP anaphora. In
J.A.G. Groenendijk, T.M.V. Janssen, and
M.B.J. Stokhof, editors, Truth, Interpretation
and Information, pages 99-130. Foris, Dor-
drecht, Holland.
Martha E. Pollack and Fernando C.N. Pereira.
1988. An integrated framework for semantic
and pragmatic interpretation. In 26th Annual
Meeting of the Association for Computational
Linguistics, pages 75-86, Morristown, New Jer-
sey. Association for Computational Linguistics.
Dag Prawitz. 1965. Natural Deduction: A Proof-
Theoretical Study. Almqvist and Wiksell, Upp-
sala, Sweden.
Tanya Reinhart. 1983. Anaphora and Semantic
Interpretation. Croom Helm, London, England,
corrected and revised printing, 1987 edition.
Craige Roberts. 1987. Modal Subordination,
Anaphora and Distributivity. Ph.D. thesis, De-
partment of Linguistics, University of Mas-
sachusetts, Amherst, Massachusetts (February).
Mark Steedman. 1987. Combinatory grammars
and parasitic gaps. Natural Language and Lin-
guistic Theory, 5(3):403-439.
SOren Stenlund. 1972. Combinators, )- Terms and
Proof Theory. D. Reidel, Dordrecht, Holland.
Johan van Benthem. 1986a. Categorial grammar
and lambda calculus. In D. Skordev, editor,
Mathematical Logic and its Application, pages
39-60: Plenum Press, New York, New York.
Johan van Benthem. 1986b. Essays in Logical
Semantics, Volume 29 of Studies in Linguistics
and Philosophy. D. Reidel, Dordrecht, Holland.
Jan van Eijck. 1985. Aspects of Quantification in
Natural Language. Ph.D. thesis, University of
Groningen, Groningen, Holland (February).
Henk van Riemsdijk and Edwin Williams. 1986.
Introduction to the Theory of Grammar, Vol-
ume 12 of Current Studies in Linguistics. MIT
Press, Cambridge, Massachusetts.
Kurt A. Vanlehn. 1978. Determining the scope
of English quantifiers. Master&apos;s thesis, M.I.T.
(June).
Edwin Williams. 1986. A reassignment of the
functions of LF. Linguistic Inquiry, 17(2):265-
299.
•
</reference>
<page confidence="0.994729">
160
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.004889">
<title confidence="0.999956">A Calculus for Semantic Composition and Scoping</title>
<author confidence="0.999506">Fernando C N Pereira</author>
<affiliation confidence="0.99995">Artificial Intelligence Center, SRI International</affiliation>
<address confidence="0.999608">333 Ravenswood Ave., Menlo Park, CA 94025, USA</address>
<abstract confidence="0.999828923076923">Certain restrictions on possible scopings of quantified noun phrases in natural language are usually expressed in terms of formal constraints on binding at a level of logical form. Such reliance on the form rather than the content of semantic interpretations goes against the spirit of compositionality. I will show that those scoping restrictions follow from simple and fundamental facts about functional application and abstraction, and can be expressed as constraints on the derivation of possible meanings for sentences rather than constraints of the alleged forms of those meanings.</abstract>
<note confidence="0.9568605">1 An Obvious Constraint? Treatments of quantifier scope in Montague grammar (Montague, 1973; Dowty et al., 1981; Cooper, 1983), transformational grammar (Reinhart, 1983; May, 1985; Heim, 1982; Roberts, 1987) and computational linguistics (Hobbs and Shieber, 1987;</note>
<abstract confidence="0.989340023952095">Moran, 1988) have depended implicitly or explicitly on a constraint on possible logical forms to explain why examples&apos; such as * A woman who saw disliked him are ungrammatical, and why in examples such as Every saw a friend of Every of a picture of is vain the every.., noun phrase must have wider scope than the a... noun phrase if the pronoun in each is assumed to be its antecedent. What exactly counts as bound anaphora varies between different accounts of the phenomena, but the rough intuition is that semantically a bound pronoun plays the role of a variable bound by the logical form (a quantifier) of its antecedent. Example (1) above is then &amp;quot;explained&amp;quot; by noting that all the examples that follow, the pronoun and its intended antecedent are italicized. As usual, starred examples are supposed to be ungrammatical. its logical form would be something like 3W.WOMAN(W)SL SAW ( , this is &amp;quot;ill-formed&amp;quot; because variable occurs an argument of the of binder As for Examples (2) and the argument is similar: wide scope for the logical form of the a... noun phrase would leave an occurrence of the variable that the logical form of every.., binds outside the scope of this quantifier. For lack of an official name in the literature for constraint, I will call it here the constraint. In accounts of scoping possibilities based on quantifier raising or storage (Cooper, 1983; van Eijck, 1985; May, 1985; Hobbs and Shieber, 1987), the free-variable constraint is enforced either by keeping track of the set of free variables FREE(q) each raisable (storable) term when x blocking the raising of any context which x is bound by some binder by checking after all applications of raising (unstoring) that no variable occurs outside the scope of its binder. The argument above is often taken to be so obvious and uncontroversial that it warrants only a remark in passing, if any (Cooper, 1983; Reinhart, 1983; Partee and Bach, 1984; May, 1985; van Riemsdijk and Williams, 1986; Williams, 1986; Roberts, 1987), even though it depends on nontrivial assumptions on the role of logical form in linguistic theory and semantics. First of all, and most immediately, there is the requirement for a logical-form level of representation, either in the predicate-logic format exemplified above or in some tree format as is usual in transformational grammar (Heim, 1982; Cooper, 1983; May, 1985; van Riemsdijk and Williams, 1986; Williams, 1986; Roberts, 1987). fact, this is a perfectly good formula and therefore the precise formulation of the constraint is more delicate than seems to be realized in the literature. 152 Second, and most relevant to Montague grammar and related approaches, the constraint is formulated in terms of restrictions on formal objects (logical forms) which in turn are related to meanings through a denotation relation. However, compositionality as it is commonly understood requires meanings of phrases to be funcof the than the forms of their constituents. This is a problem even in accounts based on quantifier storage (Cooper, 1983; van Eijck, 1985), which are precisely designed, as van Eijck puts it, to &amp;quot;avoid all unnecessary reference to properties of ... formulas&amp;quot; (van Eijck, 1985, p. 214). In fact, van Eijck proposes an interesting modification of Cooper storage that avoids Cooper&apos;s reliance on forbidding vacuous abstraction to block out cases in which a noun phrase is unstored while a noun phrase contained in it is still in store. However, this restriction does not deal with the case I have been discussing. It is also interesting to observe that a wider class of examples of forbidden scopings would have to be considered if raising out of relative clauses were allowed, for example in (4) An author who John has read every book by arrived In this example, if we did not assume the restriction against raising from relative clauses, the phrase could in principle be assigned widest scope, but this would be blocked by the free-variable constraint as shown by the occurof b free as an argument of Vb.BooK-BY(b, a) (3a.AuTHoR(a)Se HAS-READ(JOHN, b)SLARRIVED(a)) That is, the alleged constraint against raising from relatives, for which many counterexamples exist (Vanlehn, 1978), blocks some derivations in which otherwise the free-variable constraint would be involved, specifically those associated to syntactic configurations of the form • • • • • • • Xi • • • • .] • • .1 where Xi is a pronoun or trace coindexed with NPi and NP, is a quantified noun phrase. Since some of the most extensive Montague grammar fragments in the literature (Dowty et al., 1981; Cooper, 1983) do not cover the other major source of the problem, PP complements of noun phrases (replace S by PP in the configuration above), the question is effectively avoided in those treatments. The main goal of this paper is to argue that the free-variable constraint is actually a consequence of basic semantic properties that hold in a semantic domain allowing functional application and abstraction, and are thus independent of a particular logical-form representation. As a corollary, I will also show that the constraint is better expressed a restriction on the meanings of sentences from the meanings of their parts rather than a restriction on logical forms. The resulting system is related to the earlier system of conditional interpretation rules developed by Pollack and Pereira (1988), but avoids that system&apos;s use of formal conditions on the order of assumption discharge. 2 Curry&apos;s Calculus of Functionality Work in combinatory logic and the A-calculus is concerned with the elucidation of the basic notion of functionality: how to construct functions, and how to apply functions to their arguments. There is a very large body of results in this area, of which I will need only a very small part. One of the simplest and most elegant accounts of functionality, originally introduced by Curry and Feys (1968) and further elaborated by other authors (Stenlund, 1972; Lambek, 1980; Howard, 1980) involves the use of a logical calculus to dethe valid functional objects. In a natural deduction format (Prawitz, 1965), the calculus can be simply given by the two rules in Figure 1. The first rule states that the result of applying a function from objects of type A to objects type function of type A an of type A is an object of type second rule states that if from an arbitrary object of type it is possible to construct an object of type one has a function from objects of type objects of type this rule and all that follow, the parenthesized formula at the top indicates the discharge of an assumption introduced in the derivation of the formula below it. Precise definitions of assumption and assumption discharge are given below. The typing rules can be directly connected to the use of the .X-calculus to represent functions by restating the rules as shown in Figure 2. That is, u has type A and v has type A —■• v(u) type if by assuming that x has type A we can show that u (possibly containing x) has the function represented by As.0 has A --•</abstract>
<date confidence="0.233238">153</date>
<title confidence="0.488559333333333">A A --# B (A) A B Figure 1: Curry Rules</title>
<degree confidence="0.703646">[app]•u:Av:A-413 : v(u) : B u : : Figure 2: Curry Rules for Type Checking</degree>
<abstract confidence="0.99817761589404">To understand what inferences are possible with rules such as the ones in Figure 2, we need a precise notion of derivation, which is here adapted from the one given by Prawitz (1965). A derivation is a tree with each node n labeled by a formula (the the node) and by a set r(n) of formulas giving the assumptions of dl(n). addition, a derivation the following conditions: For each leaf node n is an axiom, which in our case is a formula giving the type and interpretation of a lexical item, and then r(n) is empty, or On) is an assumption, in which case r(n) = {0(n)} ii. Each nonleaf node n corresponds either to an application of [app], in which case it has two daughters m and m&apos; with O(m) u : A, : A —* B, (1,(n) : and r(n) = r(m) U r(m&apos;), or to an application of (al&apos;s], in which case n has a single daughter m, 0(m) u : 0(n) : A —■ r(n) = r(m) — {x : A} n is the root node of a derivation we that is derivation of the assumptions r(n). Notice that condition (ii) above allows empty abstraction, that is, the application of rule [abs] some formula u : if x : not of the assumptions of : is necessary for the Curry calculus, which describes all typed A-terms, including those with vacuous absuch as the polymorphic : A A). in the present work, every abstraction needs to correspond to an actual functional dependency of the interpretation of a phrase on the interpretation of one of its constituents. Condition (ii) can be easily modified to block vacuous abstraction by requiring that : A r(m) for the application of the labs] rule a derivation node m. 3 The definition of derivation above can be generalized to arbitrary rules with n premises and one conclusion by defining a rule of inference as a n+1place relation on pairs of formulas and assumption sets. For example, elements of the [app] relation have the general form ((u : A, I&apos;s), : : u ro), while elements of the labs] rule without vacuous abstraction would have form ((u : (Ax.0 : --+ B, - : A})) x : A definition should be kept in mind when reading the derived rules of inference presented informally in the rest of the paper. Combinations and the Curry Calculus In one approach to the definition of allowable semantic combinations, the possible meanings of a phrase are exactly those whose type can be derived by the rules of a semantic calculus from axioms giving the types of the lexical items in the phrase. However, this is far too liberal in that this restriction to the abstraction rule, the types derivable using the rules in Figure 2 are exactly the of the three axioms A A, A --• -+ A) (A -+ (B -• C)) -• ((A -+ B) -+ (A C)), which are the polymorphic types of the three combinators I, K and S that generate all the closed typed A-calculus terms. Furthermore, if we interpret -■ as implication, these theorems are exactly those of the pure implicational fragment of intuitionistic propositional logic (Curry and Feys, 1968; Stenlund, 1972; Anderson and Belnap, 1975). In contrast, with the restriction we have the weaker system of pure relimplication 1965; Anderson and Belnap, 1975). 15J4 the possible meanings of English phrases do not depend only on the types involved but also on the syntactic structure of the phrases. A possible out is to encode the relevant syntactic constraints in a more elaborate and restrictive system types and rules of inference. The prime example of a more constrained system is the Lambek calculus (Lambek, 1958) and its more recent elaborations within categorial grammar and semantics (van Benthem, 1986a; van Benthem, 1986b; Hendriks, 1987; Moortgat, 1988). In particular, Hendriks (1987) proposes a system for quantifier raising, which however is too restrictive in its coverage to account for the phenomena of interest here. Instead of trying to construct a type system and type rules such that free application of the rules starting from appropriate lexical axioms will generate all and only the possible meanings of a phrase, I will instead take a more conservative route related to Montague grammar and early versions of GPSG (Gazdar, 1982) and use syntactic analyses to control semantic derivations. First, a set of derived rules will be used in addito the basic rules of application and abstraction. Semantically, the derived rules will add no new inferences, since they will merely codify inferalready allowed by the of the calculus of functionality. However, they provide the semantic counterparts of certain syntactic rules. Second, the use of some semantic rules must a particular syntactic rule and the premises in the antecedent of the semantic rule must correspond in a rule-given way to the meanings of the constituents combined by the syntactic rule. As a simple example using a context-free the syntactic rule S might cense the function application rule [app] with A type of the meaning of the NP and B the type of the meaning of the VP. Third, the domain of types will be enriched with a few new type constructors, in addition to the type constructor From a purely semantic point of view, these type constructors add no new types, but allow a convenient encoding of applicability constraints motivated by syntactic considerations. This enrichment of the formal of types for syntactic purposes is familiar from Montague grammar (Montague, 1973), where it is used to distinguish different syntactic realizations of the same semantic type, and from categorial grammar (Lambek, 1958; Steedman, 1987), where it is used to capture syntactic word-order constraints. Together, the above refinements allow the syn- Figure 4: Bound Anaphora Rules tax of language to restrict what potential semantic combinations are actually realized. Any derivations will be sound with respect to [app] and [abs], but many derivations allowed by these rules will be blocked. 4 Derived Rules In the rules below, we will use the two basic individuals and propositions, the function type constructor associating to the right, the formal type constructor quant(q), is a that is, a value of type (e t) •—■ t, and the two formal types pron for pronoun assumptions and trace for traces in relative clauses. For simplicity in examples, I will adopt a &amp;quot;reverse Curried&amp;quot; notation for the meanings of verbs, prepositions and relational nouns. example, the meaning of the verb love e —• e x the lover and y the loved one in LovE(y)(x). The assumptions corresponding to lexical items in a derivation will be appropriately labeled.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Alan Ross Anderson</author>
<author>Nuel D Belnap</author>
</authors>
<title>Entailment: the Logic of Relevance and Necessity, Volume I.</title>
<date>1975</date>
<publisher>Princeton University Press,</publisher>
<location>Princeton, New Jersey.</location>
<contexts>
<context position="11896" citStr="Anderson and Belnap, 1975" startWordPosition="2114" endWordPosition="2117">the lexical items in the phrase. However, this is far too liberal in that 3Without this restriction to the abstraction rule, the types derivable using the rules in Figure 2 are exactly the consequences of the three axioms A A, A --• (B -+ A) and (A -+ (B -• C)) -• ((A -+ B) -+ (A C)), which are the polymorphic types of the three combinators I, K and S that generate all the closed typed A-calculus terms. Furthermore, if we interpret -■ as implication, these theorems are exactly those of the pure implicational fragment of intuitionistic propositional logic (Curry and Feys, 1968; Stenlund, 1972; Anderson and Belnap, 1975). In contrast, with the restriction we have the weaker system of pure relevant implication R... (Prawitz, 1965; Anderson and Belnap, 1975). 15J4 the possible meanings of English phrases do not depend only on the types involved but also on the syntactic structure of the phrases. A possible way out is to encode the relevant syntactic constraints in a more elaborate and restrictive system of types and rules of inference. The prime example of a more constrained system is the Lambek calculus (Lambek, 1958) and its more recent elaborations within categorial grammar and semantics (van Benthem, 1986a;</context>
</contexts>
<marker>Anderson, Belnap, 1975</marker>
<rawString>Alan Ross Anderson and Nuel D. Belnap, Jr. 1975. Entailment: the Logic of Relevance and Necessity, Volume I. Princeton University Press, Princeton, New Jersey.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hank P Barendregt</author>
</authors>
<title>The Lambda Calculus: its Syntax and Semantics.</title>
<date>1984</date>
<publisher>North-Holland,</publisher>
<location>Amsterdam, Holland.</location>
<marker>Barendregt, 1984</marker>
<rawString>Hank P. Barendregt. 1984. The Lambda Calculus: its Syntax and Semantics. North-Holland, Amsterdam, Holland.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jon Barwise</author>
<author>Robin Cooper</author>
</authors>
<title>Generalized quantifiers and natural language. Linguistics and Philosophy,</title>
<date>1981</date>
<pages>4--159</pages>
<contexts>
<context position="19001" citStr="Barwise and Cooper, 1981" startWordPosition="3365" endWordPosition="3368"> in deriving an interpretation for example sentence (2). 156 [quant-F] • q (a t) t x : quant(q) (x : quant(q)) x : e [quant--] • s : t q(Ax.$):t Figure 6: Quantifier Rules 4.3 Quantifier Raising The rules discussed earlier provide some of the auxiliary machinery required to illustrate the freevariable constraint. However, the main burden of enforcing the constraint falls on the rules responsible for quantifier raising, and therefore I will cover in somewhat greater detail the derivation of those rules from the basic rules of functionality. I will follow here the standard view (Montague, 1973; Barwise and Cooper, 1981) that naturallanguage determiners have meanings of type (e —■ t) (e —0 t) —o t. For example, the meaning of every might be Ar.As.Vx.r(x) s(x), and the meaning of the noun phrase every man will be As.Vx.mAN(x) = s(x). To interpret the combination of a quantified noun phrase with the phrase containing it that forms its scope, we apply the meaning of the noun phrase to a property s derived from the meaning of the scope. The purpose of devices such as quantifying-in in Montague grammar, Cooper storage or quantifier raising in transformational grammar is to determine a scope for each noun phrase in</context>
</contexts>
<marker>Barwise, Cooper, 1981</marker>
<rawString>Jon Barwise and Robin Cooper. 1981. Generalized quantifiers and natural language. Linguistics and Philosophy, 4:159-219.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Robin Cooper</author>
</authors>
<title>Quantification and Syntactic Theory.</title>
<date>1983</date>
<location>D. Reidel, Dordrecht, Netherlands.</location>
<contexts>
<context position="890" citStr="Cooper, 1983" startWordPosition="135" endWordPosition="136">expressed in terms of formal constraints on binding at a level of logical form. Such reliance on the form rather than the content of semantic interpretations goes against the spirit of compositionality. I will show that those scoping restrictions follow from simple and fundamental facts about functional application and abstraction, and can be expressed as constraints on the derivation of possible meanings for sentences rather than constraints of the alleged forms of those meanings. 1 An Obvious Constraint? Treatments of quantifier scope in Montague grammar (Montague, 1973; Dowty et al., 1981; Cooper, 1983), transformational grammar (Reinhart, 1983; May, 1985; Heim, 1982; Roberts, 1987) and computational linguistics (Hobbs and Shieber, 1987; Moran, 1988) have depended implicitly or explicitly on a constraint on possible logical forms to explain why examples&apos; such as (1) * A woman who saw every man disliked him are ungrammatical, and why in examples such as (2) Every man saw a friend of his (3) Every admirer of a picture of himself is vain the every.., noun phrase must have wider scope than the a... noun phrase if the pronoun in each example is assumed to be bound by its antecedent. What exactly </context>
<context position="2572" citStr="Cooper, 1983" startWordPosition="424" endWordPosition="425">e 3W.WOMAN(W)SL (VM.MAN(M) SAW (W , m))SZ DISLIKED ( w , m) but this is &amp;quot;ill-formed&amp;quot; because variable m occurs as an argument of DISLIKED outside the scope of its binder Vm.2 As for Examples (2) and (3), the argument is similar: wide scope for the logical form of the a... noun phrase would leave an occurrence of the variable that the logical form of every.., binds outside the scope of this quantifier. For lack of an official name in the literature for this constraint, I will call it here the free-variable constraint. In accounts of scoping possibilities based on quantifier raising or storage (Cooper, 1983; van Eijck, 1985; May, 1985; Hobbs and Shieber, 1987), the free-variable constraint is enforced either by keeping track of the set of free variables FREE(q) in each raisable (storable) term q and when x E FREE(q) blocking the raising of q from any context Bz.t in which x is bound by some binder B, or by checking after all applications of raising (unstoring) that no variable occurs outside the scope of its binder. The argument above is often taken to be so obvious and uncontroversial that it warrants only a remark in passing, if any (Cooper, 1983; Reinhart, 1983; Partee and Bach, 1984; May, 19</context>
<context position="4328" citStr="Cooper, 1983" startWordPosition="721" endWordPosition="722"> open well-formed formula and therefore the precise formulation of the constraint is more delicate than seems to be realized in the literature. 152 Second, and most relevant to Montague grammar and related approaches, the constraint is formulated in terms of restrictions on formal objects (logical forms) which in turn are related to meanings through a denotation relation. However, compositionality as it is commonly understood requires meanings of phrases to be functions of the meanings rather than the forms of their constituents. This is a problem even in accounts based on quantifier storage (Cooper, 1983; van Eijck, 1985), which are precisely designed, as van Eijck puts it, to &amp;quot;avoid all unnecessary reference to properties of ... formulas&amp;quot; (van Eijck, 1985, p. 214). In fact, van Eijck proposes an interesting modification of Cooper storage that avoids Cooper&apos;s reliance on forbidding vacuous abstraction to block out cases in which a noun phrase is unstored while a noun phrase contained in it is still in store. However, this restriction does not deal with the case I have been discussing. It is also interesting to observe that a wider class of examples of forbidden scopings would have to be consi</context>
<context position="5930" citStr="Cooper, 1983" startWordPosition="996" endWordPosition="997">rgument of BOOK-BY in Vb.BooK-BY(b, a) (3a.AuTHoR(a)Se HAS-READ(JOHN, b)SLARRIVED(a)) That is, the alleged constraint against raising from relatives, for which many counterexamples exist (Vanlehn, 1978), blocks some derivations in which otherwise the free-variable constraint would be involved, specifically those associated to syntactic configurations of the form [Np, • • • Ks— • • [Npi • • Xi • • • • .] • • .1 where Xi is a pronoun or trace coindexed with NPi and NP, is a quantified noun phrase. Since some of the most extensive Montague grammar fragments in the literature (Dowty et al., 1981; Cooper, 1983) do not cover the other major source of the problem, PP complements of noun phrases (replace S by PP in the configuration above), the question is effectively avoided in those treatments. The main goal of this paper is to argue that the free-variable constraint is actually a consequence of basic semantic properties that hold in a semantic domain allowing functional application and abstraction, and are thus independent of a particular logical-form representation. As a corollary, I will also show that the constraint is better expressed as a restriction on the derivations of meanings of sentences </context>
<context position="24270" citStr="Cooper, 1983" startWordPosition="4293" endWordPosition="4294">tifier assumption (a) for every man. Furthermore, the constraint on dependent assumptions requires that the quantifier assumption (c) for a friend of his be discharged before the pronoun assumption (b) on which it depends. It then follows that assumption (c) will be discharged before assumption (a), forcing wide scope for every man. 158 5 Discussion The approach to semantic interpretation outlined above avoids the need for manipulations of logical forms in deriving the possible meanings of quantified sentences. It also avoids the need for such devices as distinguished variables (Gazdar, 1982; Cooper, 1983) to deal with trace abstraction. Instead, specialized versions of the basic rule of functional abstraction are used. To my knowledge, the only other approaches to these problems that do not depend on formal operations on logical forms are those based on specialized logics of type change, usually restrictions of the Curry or Lambek systems (van Benthem, 1986a; Hendriks, 1987; Moortgat, 1988). In those accounts, a phrase P with meaning p of type T is considered to have also alternative meaning p&apos; of type T&apos;, with the corresponding combination possibilities, if p&apos; : T&apos; follows from p : T in the c</context>
</contexts>
<marker>Cooper, 1983</marker>
<rawString>Robin Cooper. 1983. Quantification and Syntactic Theory. D. Reidel, Dordrecht, Netherlands.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Haskell B Curry</author>
<author>Robert Feys</author>
</authors>
<date>1968</date>
<booktitle>Combinatory Logic, Volume I. Studies in Logic and the Foundations of Mathematics. NorthHolland,</booktitle>
<location>Amsterdam, Holland.</location>
<note>Second printing.</note>
<contexts>
<context position="7261" citStr="Curry and Feys (1968)" startWordPosition="1213" endWordPosition="1216">o the earlier system of conditional interpretation rules developed by Pollack and Pereira (1988), but avoids that system&apos;s use of formal conditions on the order of assumption discharge. 2 Curry&apos;s Calculus of Functionality Work in combinatory logic and the A-calculus is concerned with the elucidation of the basic notion of functionality: how to construct functions, and how to apply functions to their arguments. There is a very large body of results in this area, of which I will need only a very small part. One of the simplest and most elegant accounts of functionality, originally introduced by Curry and Feys (1968) and further elaborated by other authors (Stenlund, 1972; Lambek, 1980; Howard, 1980) involves the use of a logical calculus to describe the types of valid functional objects. In a natural deduction format (Prawitz, 1965), the calculus can be simply given by the two rules in Figure 1. The first rule states that the result of applying a function from objects of type A to objects of type B (a function of type A B) to an object of type A is an object of type B. The second rule states that if from an arbitrary object of type A it is possible to construct an object of type B, then one has a functio</context>
<context position="11852" citStr="Curry and Feys, 1968" startWordPosition="2108" endWordPosition="2111">culus from axioms giving the types of the lexical items in the phrase. However, this is far too liberal in that 3Without this restriction to the abstraction rule, the types derivable using the rules in Figure 2 are exactly the consequences of the three axioms A A, A --• (B -+ A) and (A -+ (B -• C)) -• ((A -+ B) -+ (A C)), which are the polymorphic types of the three combinators I, K and S that generate all the closed typed A-calculus terms. Furthermore, if we interpret -■ as implication, these theorems are exactly those of the pure implicational fragment of intuitionistic propositional logic (Curry and Feys, 1968; Stenlund, 1972; Anderson and Belnap, 1975). In contrast, with the restriction we have the weaker system of pure relevant implication R... (Prawitz, 1965; Anderson and Belnap, 1975). 15J4 the possible meanings of English phrases do not depend only on the types involved but also on the syntactic structure of the phrases. A possible way out is to encode the relevant syntactic constraints in a more elaborate and restrictive system of types and rules of inference. The prime example of a more constrained system is the Lambek calculus (Lambek, 1958) and its more recent elaborations within categoria</context>
</contexts>
<marker>Curry, Feys, 1968</marker>
<rawString>Haskell B. Curry and Robert Feys. 1968. Combinatory Logic, Volume I. Studies in Logic and the Foundations of Mathematics. NorthHolland, Amsterdam, Holland. Second printing.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David R Dowty</author>
<author>Robert E Wall</author>
<author>Stanley Peters</author>
</authors>
<title>Introduction to Montague Semantics,</title>
<date>1981</date>
<booktitle>of Synthese Language Library. D.</booktitle>
<volume>11</volume>
<location>Reidel, Dordrecht, Holland.</location>
<contexts>
<context position="875" citStr="Dowty et al., 1981" startWordPosition="131" endWordPosition="134">anguage are usually expressed in terms of formal constraints on binding at a level of logical form. Such reliance on the form rather than the content of semantic interpretations goes against the spirit of compositionality. I will show that those scoping restrictions follow from simple and fundamental facts about functional application and abstraction, and can be expressed as constraints on the derivation of possible meanings for sentences rather than constraints of the alleged forms of those meanings. 1 An Obvious Constraint? Treatments of quantifier scope in Montague grammar (Montague, 1973; Dowty et al., 1981; Cooper, 1983), transformational grammar (Reinhart, 1983; May, 1985; Heim, 1982; Roberts, 1987) and computational linguistics (Hobbs and Shieber, 1987; Moran, 1988) have depended implicitly or explicitly on a constraint on possible logical forms to explain why examples&apos; such as (1) * A woman who saw every man disliked him are ungrammatical, and why in examples such as (2) Every man saw a friend of his (3) Every admirer of a picture of himself is vain the every.., noun phrase must have wider scope than the a... noun phrase if the pronoun in each example is assumed to be bound by its antecedent</context>
<context position="5915" citStr="Dowty et al., 1981" startWordPosition="992" endWordPosition="995">ce of b free as an argument of BOOK-BY in Vb.BooK-BY(b, a) (3a.AuTHoR(a)Se HAS-READ(JOHN, b)SLARRIVED(a)) That is, the alleged constraint against raising from relatives, for which many counterexamples exist (Vanlehn, 1978), blocks some derivations in which otherwise the free-variable constraint would be involved, specifically those associated to syntactic configurations of the form [Np, • • • Ks— • • [Npi • • Xi • • • • .] • • .1 where Xi is a pronoun or trace coindexed with NPi and NP, is a quantified noun phrase. Since some of the most extensive Montague grammar fragments in the literature (Dowty et al., 1981; Cooper, 1983) do not cover the other major source of the problem, PP complements of noun phrases (replace S by PP in the configuration above), the question is effectively avoided in those treatments. The main goal of this paper is to argue that the free-variable constraint is actually a consequence of basic semantic properties that hold in a semantic domain allowing functional application and abstraction, and are thus independent of a particular logical-form representation. As a corollary, I will also show that the constraint is better expressed as a restriction on the derivations of meaning</context>
</contexts>
<marker>Dowty, Wall, Peters, 1981</marker>
<rawString>David R. Dowty, Robert E. Wall, and Stanley Peters. 1981. Introduction to Montague Semantics, Volume 11 of Synthese Language Library. D. Reidel, Dordrecht, Holland.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Amy Felty</author>
<author>Dale Miller</author>
</authors>
<title>Specifying theorem provers in a higher-order logic programming language.</title>
<date>1988</date>
<tech>Technical Report MS-CIS-88-12,</tech>
<institution>Department of Computer and Information Science, University of Pennsylvania,</institution>
<location>Philadelphia, Pennsylvania.</location>
<marker>Felty, Miller, 1988</marker>
<rawString>Amy Felty and Dale Miller. 1988. Specifying theorem provers in a higher-order logic programming language. Technical Report MS-CIS-88-12, Department of Computer and Information Science, University of Pennsylvania, Philadelphia, Pennsylvania.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Gerald Gazdar</author>
</authors>
<title>Phrase structure grammar.</title>
<date>1982</date>
<booktitle>The Nature of Syntactic Representation,</booktitle>
<pages>131--186</pages>
<editor>In P. Jacobson and G.K. Pullum, editors,</editor>
<location>Dordrecht, Holland.</location>
<contexts>
<context position="13037" citStr="Gazdar, 1982" startWordPosition="2307" endWordPosition="2308">laborations within categorial grammar and semantics (van Benthem, 1986a; van Benthem, 1986b; Hendriks, 1987; Moortgat, 1988). In particular, Hendriks (1987) proposes a system for quantifier raising, which however is too restrictive in its coverage to account for the phenomena of interest here. Instead of trying to construct a type system and type rules such that free application of the rules starting from appropriate lexical axioms will generate all and only the possible meanings of a phrase, I will instead take a more conservative route related to Montague grammar and early versions of GPSG (Gazdar, 1982) and use syntactic analyses to control semantic derivations. First, a set of derived rules will be used in addition to the basic rules of application and abstraction. Semantically, the derived rules will add no new inferences, since they will merely codify inferences already allowed by the basic rules of the calculus of functionality. However, they provide the semantic counterparts of certain syntactic rules. Second, the use of some semantic rules must be licensed by a particular syntactic rule and the premises in the antecedent of the semantic rule must correspond in a rule-given way to the m</context>
<context position="24255" citStr="Gazdar, 1982" startWordPosition="4291" endWordPosition="4292">efore the quantifier assumption (a) for every man. Furthermore, the constraint on dependent assumptions requires that the quantifier assumption (c) for a friend of his be discharged before the pronoun assumption (b) on which it depends. It then follows that assumption (c) will be discharged before assumption (a), forcing wide scope for every man. 158 5 Discussion The approach to semantic interpretation outlined above avoids the need for manipulations of logical forms in deriving the possible meanings of quantified sentences. It also avoids the need for such devices as distinguished variables (Gazdar, 1982; Cooper, 1983) to deal with trace abstraction. Instead, specialized versions of the basic rule of functional abstraction are used. To my knowledge, the only other approaches to these problems that do not depend on formal operations on logical forms are those based on specialized logics of type change, usually restrictions of the Curry or Lambek systems (van Benthem, 1986a; Hendriks, 1987; Moortgat, 1988). In those accounts, a phrase P with meaning p of type T is considered to have also alternative meaning p&apos; of type T&apos;, with the corresponding combination possibilities, if p&apos; : T&apos; follows from</context>
</contexts>
<marker>Gazdar, 1982</marker>
<rawString>Gerald Gazdar. 1982. Phrase structure grammar. In P. Jacobson and G.K. Pullum, editors, The Nature of Syntactic Representation, pages 131-186. D. Reidel, Dordrecht, Holland.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Irene R Heim</author>
</authors>
<title>The Semantics of Definite and Indefinite Noun Phrases.</title>
<date>1982</date>
<tech>Ph.D. thesis,</tech>
<institution>Department of Linguistics, University of Massachusetts,</institution>
<location>Amherst, Massachusetts</location>
<contexts>
<context position="955" citStr="Heim, 1982" startWordPosition="143" endWordPosition="144">gical form. Such reliance on the form rather than the content of semantic interpretations goes against the spirit of compositionality. I will show that those scoping restrictions follow from simple and fundamental facts about functional application and abstraction, and can be expressed as constraints on the derivation of possible meanings for sentences rather than constraints of the alleged forms of those meanings. 1 An Obvious Constraint? Treatments of quantifier scope in Montague grammar (Montague, 1973; Dowty et al., 1981; Cooper, 1983), transformational grammar (Reinhart, 1983; May, 1985; Heim, 1982; Roberts, 1987) and computational linguistics (Hobbs and Shieber, 1987; Moran, 1988) have depended implicitly or explicitly on a constraint on possible logical forms to explain why examples&apos; such as (1) * A woman who saw every man disliked him are ungrammatical, and why in examples such as (2) Every man saw a friend of his (3) Every admirer of a picture of himself is vain the every.., noun phrase must have wider scope than the a... noun phrase if the pronoun in each example is assumed to be bound by its antecedent. What exactly counts as bound anaphora varies between different accounts of the</context>
<context position="3589" citStr="Heim, 1982" startWordPosition="599" endWordPosition="600">ts binder. The argument above is often taken to be so obvious and uncontroversial that it warrants only a remark in passing, if any (Cooper, 1983; Reinhart, 1983; Partee and Bach, 1984; May, 1985; van Riemsdijk and Williams, 1986; Williams, 1986; Roberts, 1987), even though it depends on nontrivial assumptions on the role of logical form in linguistic theory and semantics. First of all, and most immediately, there is the requirement for a logical-form level of representation, either in the predicate-logic format exemplified above or in some tree format as is usual in transformational grammar (Heim, 1982; Cooper, 1983; May, 1985; van Riemsdijk and Williams, 1986; Williams, 1986; Roberts, 1987). 2In fact, this is a perfectly good open well-formed formula and therefore the precise formulation of the constraint is more delicate than seems to be realized in the literature. 152 Second, and most relevant to Montague grammar and related approaches, the constraint is formulated in terms of restrictions on formal objects (logical forms) which in turn are related to meanings through a denotation relation. However, compositionality as it is commonly understood requires meanings of phrases to be function</context>
</contexts>
<marker>Heim, 1982</marker>
<rawString>Irene R. Heim. 1982. The Semantics of Definite and Indefinite Noun Phrases. Ph.D. thesis, Department of Linguistics, University of Massachusetts, Amherst, Massachusetts (September).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Herman Hendriks</author>
</authors>
<title>Type change in semantics: the scope of quantification and coordination.</title>
<date>1987</date>
<booktitle>Categories, Polymorphism and Unification,</booktitle>
<pages>95--120</pages>
<editor>In Ewan Klein and Johan van Benthem, editors,</editor>
<institution>Centre for Cognitive Science, University of Edinburgh,</institution>
<location>Edinburgh, Scotland.</location>
<contexts>
<context position="12531" citStr="Hendriks, 1987" startWordPosition="2222" endWordPosition="2224">he restriction we have the weaker system of pure relevant implication R... (Prawitz, 1965; Anderson and Belnap, 1975). 15J4 the possible meanings of English phrases do not depend only on the types involved but also on the syntactic structure of the phrases. A possible way out is to encode the relevant syntactic constraints in a more elaborate and restrictive system of types and rules of inference. The prime example of a more constrained system is the Lambek calculus (Lambek, 1958) and its more recent elaborations within categorial grammar and semantics (van Benthem, 1986a; van Benthem, 1986b; Hendriks, 1987; Moortgat, 1988). In particular, Hendriks (1987) proposes a system for quantifier raising, which however is too restrictive in its coverage to account for the phenomena of interest here. Instead of trying to construct a type system and type rules such that free application of the rules starting from appropriate lexical axioms will generate all and only the possible meanings of a phrase, I will instead take a more conservative route related to Montague grammar and early versions of GPSG (Gazdar, 1982) and use syntactic analyses to control semantic derivations. First, a set of derived rules wil</context>
<context position="24646" citStr="Hendriks, 1987" startWordPosition="4355" endWordPosition="4357">c interpretation outlined above avoids the need for manipulations of logical forms in deriving the possible meanings of quantified sentences. It also avoids the need for such devices as distinguished variables (Gazdar, 1982; Cooper, 1983) to deal with trace abstraction. Instead, specialized versions of the basic rule of functional abstraction are used. To my knowledge, the only other approaches to these problems that do not depend on formal operations on logical forms are those based on specialized logics of type change, usually restrictions of the Curry or Lambek systems (van Benthem, 1986a; Hendriks, 1987; Moortgat, 1988). In those accounts, a phrase P with meaning p of type T is considered to have also alternative meaning p&apos; of type T&apos;, with the corresponding combination possibilities, if p&apos; : T&apos; follows from p : T in the chosen logic. The central problem in this approach is to design a calculus that will cover all the actual semantic alternatives (for instance, all the possible quantifier scopings) without introducing spurious interpretations. For quantifier raising, the system of Hendriks (1987) seems the most promising so far, but it is at present too restrictive to support raising from no</context>
</contexts>
<marker>Hendriks, 1987</marker>
<rawString>Herman Hendriks. 1987. Type change in semantics: the scope of quantification and coordination. In Ewan Klein and Johan van Benthem, editors, Categories, Polymorphism and Unification, pages 95-120. Centre for Cognitive Science, University of Edinburgh, Edinburgh, Scotland.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jerry R Hobbs</author>
<author>Stuart M Shieber</author>
</authors>
<title>An algorithm for generating quantifier scopings.</title>
<date>1987</date>
<journal>Computational Linguistics,</journal>
<pages>13--47</pages>
<contexts>
<context position="1026" citStr="Hobbs and Shieber, 1987" startWordPosition="151" endWordPosition="154">ent of semantic interpretations goes against the spirit of compositionality. I will show that those scoping restrictions follow from simple and fundamental facts about functional application and abstraction, and can be expressed as constraints on the derivation of possible meanings for sentences rather than constraints of the alleged forms of those meanings. 1 An Obvious Constraint? Treatments of quantifier scope in Montague grammar (Montague, 1973; Dowty et al., 1981; Cooper, 1983), transformational grammar (Reinhart, 1983; May, 1985; Heim, 1982; Roberts, 1987) and computational linguistics (Hobbs and Shieber, 1987; Moran, 1988) have depended implicitly or explicitly on a constraint on possible logical forms to explain why examples&apos; such as (1) * A woman who saw every man disliked him are ungrammatical, and why in examples such as (2) Every man saw a friend of his (3) Every admirer of a picture of himself is vain the every.., noun phrase must have wider scope than the a... noun phrase if the pronoun in each example is assumed to be bound by its antecedent. What exactly counts as bound anaphora varies between different accounts of the phenomena, but the rough intuition is that semantically a bound pronou</context>
<context position="2626" citStr="Hobbs and Shieber, 1987" startWordPosition="432" endWordPosition="435">DISLIKED ( w , m) but this is &amp;quot;ill-formed&amp;quot; because variable m occurs as an argument of DISLIKED outside the scope of its binder Vm.2 As for Examples (2) and (3), the argument is similar: wide scope for the logical form of the a... noun phrase would leave an occurrence of the variable that the logical form of every.., binds outside the scope of this quantifier. For lack of an official name in the literature for this constraint, I will call it here the free-variable constraint. In accounts of scoping possibilities based on quantifier raising or storage (Cooper, 1983; van Eijck, 1985; May, 1985; Hobbs and Shieber, 1987), the free-variable constraint is enforced either by keeping track of the set of free variables FREE(q) in each raisable (storable) term q and when x E FREE(q) blocking the raising of q from any context Bz.t in which x is bound by some binder B, or by checking after all applications of raising (unstoring) that no variable occurs outside the scope of its binder. The argument above is often taken to be so obvious and uncontroversial that it warrants only a remark in passing, if any (Cooper, 1983; Reinhart, 1983; Partee and Bach, 1984; May, 1985; van Riemsdijk and Williams, 1986; Williams, 1986; </context>
</contexts>
<marker>Hobbs, Shieber, 1987</marker>
<rawString>Jerry R. Hobbs and Stuart M. Shieber. 1987. An algorithm for generating quantifier scopings. Computational Linguistics, 13:47-63.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W A Howard</author>
</authors>
<title>The formulae-as-types notion of construction.</title>
<date>1980</date>
<booktitle>Essays on Combinatory Logic, Lambda Calculus and Formalism,</booktitle>
<pages>479--490</pages>
<editor>In J.P. Seldin and J.R. Hindley, editors, To H.B. Curry:</editor>
<publisher>Academic Press,</publisher>
<location>London, England.</location>
<contexts>
<context position="7346" citStr="Howard, 1980" startWordPosition="1227" endWordPosition="1228">88), but avoids that system&apos;s use of formal conditions on the order of assumption discharge. 2 Curry&apos;s Calculus of Functionality Work in combinatory logic and the A-calculus is concerned with the elucidation of the basic notion of functionality: how to construct functions, and how to apply functions to their arguments. There is a very large body of results in this area, of which I will need only a very small part. One of the simplest and most elegant accounts of functionality, originally introduced by Curry and Feys (1968) and further elaborated by other authors (Stenlund, 1972; Lambek, 1980; Howard, 1980) involves the use of a logical calculus to describe the types of valid functional objects. In a natural deduction format (Prawitz, 1965), the calculus can be simply given by the two rules in Figure 1. The first rule states that the result of applying a function from objects of type A to objects of type B (a function of type A B) to an object of type A is an object of type B. The second rule states that if from an arbitrary object of type A it is possible to construct an object of type B, then one has a function from objects of type A to objects of type B. In this rule and all that follow, the </context>
</contexts>
<marker>Howard, 1980</marker>
<rawString>W.A. Howard. 1980. The formulae-as-types notion of construction. In J.P. Seldin and J.R. Hindley, editors, To H.B. Curry: Essays on Combinatory Logic, Lambda Calculus and Formalism, pages 479-490. Academic Press, London, England.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Gerard Huet</author>
</authors>
<title>Formal structures for computation and deduction. First edition of the lecture notes of a course given in the Computer Science Department of Carnegie-Mellon University during the Spring of</title>
<date>1986</date>
<marker>Huet, 1986</marker>
<rawString>Gerard Huet. 1986. Formal structures for computation and deduction. First edition of the lecture notes of a course given in the Computer Science Department of Carnegie-Mellon University during the Spring of 1986 (May).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Joachim Lambek</author>
</authors>
<title>The mathematics of sentence structure.</title>
<date>1958</date>
<journal>American Mathematical Monthly,</journal>
<pages>65--154</pages>
<contexts>
<context position="12402" citStr="Lambek, 1958" startWordPosition="2203" endWordPosition="2204">ent of intuitionistic propositional logic (Curry and Feys, 1968; Stenlund, 1972; Anderson and Belnap, 1975). In contrast, with the restriction we have the weaker system of pure relevant implication R... (Prawitz, 1965; Anderson and Belnap, 1975). 15J4 the possible meanings of English phrases do not depend only on the types involved but also on the syntactic structure of the phrases. A possible way out is to encode the relevant syntactic constraints in a more elaborate and restrictive system of types and rules of inference. The prime example of a more constrained system is the Lambek calculus (Lambek, 1958) and its more recent elaborations within categorial grammar and semantics (van Benthem, 1986a; van Benthem, 1986b; Hendriks, 1987; Moortgat, 1988). In particular, Hendriks (1987) proposes a system for quantifier raising, which however is too restrictive in its coverage to account for the phenomena of interest here. Instead of trying to construct a type system and type rules such that free application of the rules starting from appropriate lexical axioms will generate all and only the possible meanings of a phrase, I will instead take a more conservative route related to Montague grammar and ea</context>
<context position="14471" citStr="Lambek, 1958" startWordPosition="2550" endWordPosition="2551">e NP and A B the type of the meaning of the VP. Third, the domain of types will be enriched with a few new type constructors, in addition to the function type constructor From a purely semantic point of view, these type constructors add no new types, but allow a convenient encoding of rule applicability constraints motivated by syntactic considerations. This enrichment of the formal universe of types for syntactic purposes is familiar from Montague grammar (Montague, 1973), where it is used to distinguish different syntactic realizations of the same semantic type, and from categorial grammar (Lambek, 1958; Steedman, 1987), where it is used to capture syntactic word-order constraints. Together, the above refinements allow the synFigure 4: Bound Anaphora Rules tax of language to restrict what potential semantic combinations are actually realized. Any derivations will be sound with respect to [app] and [abs], but many derivations allowed by these rules will be blocked. 4 Derived Rules In the rules below, we will use the two basic types e for individuals and t for propositions, the function type constructor associating to the right, the formal type constructor quant(q), where q is a quantifier, th</context>
</contexts>
<marker>Lambek, 1958</marker>
<rawString>Joachim Lambek. 1958. The mathematics of sentence structure. American Mathematical Monthly, 65:154-170.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Joachim Lambek</author>
</authors>
<title>From A-calculus to cartesian closed categories.</title>
<date>1980</date>
<booktitle>Essays on Combinatory Logic, Lambda Calculus and Formalism,</booktitle>
<pages>375--402</pages>
<editor>In J.P. Seldin and J.R. Hindley, editors, To H.B. Curry:</editor>
<publisher>Academic Press,</publisher>
<location>London, England.</location>
<contexts>
<context position="7331" citStr="Lambek, 1980" startWordPosition="1225" endWordPosition="1226">nd Pereira (1988), but avoids that system&apos;s use of formal conditions on the order of assumption discharge. 2 Curry&apos;s Calculus of Functionality Work in combinatory logic and the A-calculus is concerned with the elucidation of the basic notion of functionality: how to construct functions, and how to apply functions to their arguments. There is a very large body of results in this area, of which I will need only a very small part. One of the simplest and most elegant accounts of functionality, originally introduced by Curry and Feys (1968) and further elaborated by other authors (Stenlund, 1972; Lambek, 1980; Howard, 1980) involves the use of a logical calculus to describe the types of valid functional objects. In a natural deduction format (Prawitz, 1965), the calculus can be simply given by the two rules in Figure 1. The first rule states that the result of applying a function from objects of type A to objects of type B (a function of type A B) to an object of type A is an object of type B. The second rule states that if from an arbitrary object of type A it is possible to construct an object of type B, then one has a function from objects of type A to objects of type B. In this rule and all th</context>
</contexts>
<marker>Lambek, 1980</marker>
<rawString>Joachim Lambek. 1980. From A-calculus to cartesian closed categories. In J.P. Seldin and J.R. Hindley, editors, To H.B. Curry: Essays on Combinatory Logic, Lambda Calculus and Formalism, pages 375-402. Academic Press, London, England.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Robert May</author>
</authors>
<title>Logical Form: its Structure and Derivation, Volume 12 of Linguistic Inquiry Monographs.</title>
<date>1985</date>
<publisher>MIT Press,</publisher>
<location>Cambridge, Massachusetts.</location>
<contexts>
<context position="943" citStr="May, 1985" startWordPosition="141" endWordPosition="142">level of logical form. Such reliance on the form rather than the content of semantic interpretations goes against the spirit of compositionality. I will show that those scoping restrictions follow from simple and fundamental facts about functional application and abstraction, and can be expressed as constraints on the derivation of possible meanings for sentences rather than constraints of the alleged forms of those meanings. 1 An Obvious Constraint? Treatments of quantifier scope in Montague grammar (Montague, 1973; Dowty et al., 1981; Cooper, 1983), transformational grammar (Reinhart, 1983; May, 1985; Heim, 1982; Roberts, 1987) and computational linguistics (Hobbs and Shieber, 1987; Moran, 1988) have depended implicitly or explicitly on a constraint on possible logical forms to explain why examples&apos; such as (1) * A woman who saw every man disliked him are ungrammatical, and why in examples such as (2) Every man saw a friend of his (3) Every admirer of a picture of himself is vain the every.., noun phrase must have wider scope than the a... noun phrase if the pronoun in each example is assumed to be bound by its antecedent. What exactly counts as bound anaphora varies between different acc</context>
<context position="2600" citStr="May, 1985" startWordPosition="430" endWordPosition="431">(W , m))SZ DISLIKED ( w , m) but this is &amp;quot;ill-formed&amp;quot; because variable m occurs as an argument of DISLIKED outside the scope of its binder Vm.2 As for Examples (2) and (3), the argument is similar: wide scope for the logical form of the a... noun phrase would leave an occurrence of the variable that the logical form of every.., binds outside the scope of this quantifier. For lack of an official name in the literature for this constraint, I will call it here the free-variable constraint. In accounts of scoping possibilities based on quantifier raising or storage (Cooper, 1983; van Eijck, 1985; May, 1985; Hobbs and Shieber, 1987), the free-variable constraint is enforced either by keeping track of the set of free variables FREE(q) in each raisable (storable) term q and when x E FREE(q) blocking the raising of q from any context Bz.t in which x is bound by some binder B, or by checking after all applications of raising (unstoring) that no variable occurs outside the scope of its binder. The argument above is often taken to be so obvious and uncontroversial that it warrants only a remark in passing, if any (Cooper, 1983; Reinhart, 1983; Partee and Bach, 1984; May, 1985; van Riemsdijk and Willia</context>
</contexts>
<marker>May, 1985</marker>
<rawString>Robert May. 1985. Logical Form: its Structure and Derivation, Volume 12 of Linguistic Inquiry Monographs. MIT Press, Cambridge, Massachusetts.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Dale A Miller</author>
<author>Gopalan Nadathur</author>
</authors>
<title>Higher-order logic programming.</title>
<date>1986</date>
<booktitle>Third International Conference on Logic Programming,</booktitle>
<editor>In Ehud Shapiro, editor,</editor>
<publisher>Springer-Verlag.</publisher>
<location>Berlin, Germany.</location>
<marker>Miller, Nadathur, 1986</marker>
<rawString>Dale A. Miller and Gopalan Nadathur. 1986. Higher-order logic programming. In Ehud Shapiro, editor, Third International Conference on Logic Programming, Berlin, Germany. Springer-Verlag.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Richard Montague</author>
</authors>
<title>The proper treatment of quantification in ordinary English.</title>
<date>1973</date>
<editor>In Richmond H. Thomason, editor, Formal Philosphy.</editor>
<publisher>Yale University Press.</publisher>
<contexts>
<context position="855" citStr="Montague, 1973" startWordPosition="129" endWordPosition="130">ses in natural language are usually expressed in terms of formal constraints on binding at a level of logical form. Such reliance on the form rather than the content of semantic interpretations goes against the spirit of compositionality. I will show that those scoping restrictions follow from simple and fundamental facts about functional application and abstraction, and can be expressed as constraints on the derivation of possible meanings for sentences rather than constraints of the alleged forms of those meanings. 1 An Obvious Constraint? Treatments of quantifier scope in Montague grammar (Montague, 1973; Dowty et al., 1981; Cooper, 1983), transformational grammar (Reinhart, 1983; May, 1985; Heim, 1982; Roberts, 1987) and computational linguistics (Hobbs and Shieber, 1987; Moran, 1988) have depended implicitly or explicitly on a constraint on possible logical forms to explain why examples&apos; such as (1) * A woman who saw every man disliked him are ungrammatical, and why in examples such as (2) Every man saw a friend of his (3) Every admirer of a picture of himself is vain the every.., noun phrase must have wider scope than the a... noun phrase if the pronoun in each example is assumed to be bou</context>
<context position="14336" citStr="Montague, 1973" startWordPosition="2529" endWordPosition="2530">g a context-free syntax, the syntactic rule S NP VP might license the function application rule [app] with A the type of the meaning of the NP and A B the type of the meaning of the VP. Third, the domain of types will be enriched with a few new type constructors, in addition to the function type constructor From a purely semantic point of view, these type constructors add no new types, but allow a convenient encoding of rule applicability constraints motivated by syntactic considerations. This enrichment of the formal universe of types for syntactic purposes is familiar from Montague grammar (Montague, 1973), where it is used to distinguish different syntactic realizations of the same semantic type, and from categorial grammar (Lambek, 1958; Steedman, 1987), where it is used to capture syntactic word-order constraints. Together, the above refinements allow the synFigure 4: Bound Anaphora Rules tax of language to restrict what potential semantic combinations are actually realized. Any derivations will be sound with respect to [app] and [abs], but many derivations allowed by these rules will be blocked. 4 Derived Rules In the rules below, we will use the two basic types e for individuals and t for </context>
<context position="18974" citStr="Montague, 1973" startWordPosition="3363" endWordPosition="3364">e anaphora rules in deriving an interpretation for example sentence (2). 156 [quant-F] • q (a t) t x : quant(q) (x : quant(q)) x : e [quant--] • s : t q(Ax.$):t Figure 6: Quantifier Rules 4.3 Quantifier Raising The rules discussed earlier provide some of the auxiliary machinery required to illustrate the freevariable constraint. However, the main burden of enforcing the constraint falls on the rules responsible for quantifier raising, and therefore I will cover in somewhat greater detail the derivation of those rules from the basic rules of functionality. I will follow here the standard view (Montague, 1973; Barwise and Cooper, 1981) that naturallanguage determiners have meanings of type (e —■ t) (e —0 t) —o t. For example, the meaning of every might be Ar.As.Vx.r(x) s(x), and the meaning of the noun phrase every man will be As.Vx.mAN(x) = s(x). To interpret the combination of a quantified noun phrase with the phrase containing it that forms its scope, we apply the meaning of the noun phrase to a property s derived from the meaning of the scope. The purpose of devices such as quantifying-in in Montague grammar, Cooper storage or quantifier raising in transformational grammar is to determine a sc</context>
</contexts>
<marker>Montague, 1973</marker>
<rawString>Richard Montague. 1973. The proper treatment of quantification in ordinary English. In Richmond H. Thomason, editor, Formal Philosphy. Yale University Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael Moortgat</author>
</authors>
<title>Categorial Investigations: Logical and Linguistic Aspects of the Lambek Calculus.</title>
<date>1988</date>
<tech>Ph.D. thesis,</tech>
<institution>University of Amsterdam,</institution>
<location>Amsterdam, Holland</location>
<contexts>
<context position="12548" citStr="Moortgat, 1988" startWordPosition="2225" endWordPosition="2226">e have the weaker system of pure relevant implication R... (Prawitz, 1965; Anderson and Belnap, 1975). 15J4 the possible meanings of English phrases do not depend only on the types involved but also on the syntactic structure of the phrases. A possible way out is to encode the relevant syntactic constraints in a more elaborate and restrictive system of types and rules of inference. The prime example of a more constrained system is the Lambek calculus (Lambek, 1958) and its more recent elaborations within categorial grammar and semantics (van Benthem, 1986a; van Benthem, 1986b; Hendriks, 1987; Moortgat, 1988). In particular, Hendriks (1987) proposes a system for quantifier raising, which however is too restrictive in its coverage to account for the phenomena of interest here. Instead of trying to construct a type system and type rules such that free application of the rules starting from appropriate lexical axioms will generate all and only the possible meanings of a phrase, I will instead take a more conservative route related to Montague grammar and early versions of GPSG (Gazdar, 1982) and use syntactic analyses to control semantic derivations. First, a set of derived rules will be used in addi</context>
<context position="24663" citStr="Moortgat, 1988" startWordPosition="4358" endWordPosition="4359"> outlined above avoids the need for manipulations of logical forms in deriving the possible meanings of quantified sentences. It also avoids the need for such devices as distinguished variables (Gazdar, 1982; Cooper, 1983) to deal with trace abstraction. Instead, specialized versions of the basic rule of functional abstraction are used. To my knowledge, the only other approaches to these problems that do not depend on formal operations on logical forms are those based on specialized logics of type change, usually restrictions of the Curry or Lambek systems (van Benthem, 1986a; Hendriks, 1987; Moortgat, 1988). In those accounts, a phrase P with meaning p of type T is considered to have also alternative meaning p&apos; of type T&apos;, with the corresponding combination possibilities, if p&apos; : T&apos; follows from p : T in the chosen logic. The central problem in this approach is to design a calculus that will cover all the actual semantic alternatives (for instance, all the possible quantifier scopings) without introducing spurious interpretations. For quantifier raising, the system of Hendriks (1987) seems the most promising so far, but it is at present too restrictive to support raising from noun-phrase complem</context>
</contexts>
<marker>Moortgat, 1988</marker>
<rawString>Michael Moortgat. 1988. Categorial Investigations: Logical and Linguistic Aspects of the Lambek Calculus. Ph.D. thesis, University of Amsterdam, Amsterdam, Holland (October).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Douglas B Moran</author>
</authors>
<title>Quantifier scoping in the SRI Core Language Engine.</title>
<date>1988</date>
<booktitle>In 26th Annual Meeting of the Association for Computational Linguistics,</booktitle>
<pages>33--47</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Morristown, New Jersey.</location>
<contexts>
<context position="1040" citStr="Moran, 1988" startWordPosition="155" endWordPosition="156">ations goes against the spirit of compositionality. I will show that those scoping restrictions follow from simple and fundamental facts about functional application and abstraction, and can be expressed as constraints on the derivation of possible meanings for sentences rather than constraints of the alleged forms of those meanings. 1 An Obvious Constraint? Treatments of quantifier scope in Montague grammar (Montague, 1973; Dowty et al., 1981; Cooper, 1983), transformational grammar (Reinhart, 1983; May, 1985; Heim, 1982; Roberts, 1987) and computational linguistics (Hobbs and Shieber, 1987; Moran, 1988) have depended implicitly or explicitly on a constraint on possible logical forms to explain why examples&apos; such as (1) * A woman who saw every man disliked him are ungrammatical, and why in examples such as (2) Every man saw a friend of his (3) Every admirer of a picture of himself is vain the every.., noun phrase must have wider scope than the a... noun phrase if the pronoun in each example is assumed to be bound by its antecedent. What exactly counts as bound anaphora varies between different accounts of the phenomena, but the rough intuition is that semantically a bound pronoun plays the ro</context>
</contexts>
<marker>Moran, 1988</marker>
<rawString>Douglas B. Moran. 1988. Quantifier scoping in the SRI Core Language Engine. In 26th Annual Meeting of the Association for Computational Linguistics, pages 33-47, Morristown, New Jersey. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Barbara Partee</author>
<author>&amp;ninon Bach</author>
</authors>
<title>Quantification, pronouns and VP anaphora.</title>
<date>1984</date>
<booktitle>Interpretation and Information,</booktitle>
<pages>99--130</pages>
<editor>In J.A.G. Groenendijk, T.M.V. Janssen, and M.B.J. Stokhof, editors, Truth,</editor>
<location>Foris, Dordrecht, Holland.</location>
<contexts>
<context position="3163" citStr="Partee and Bach, 1984" startWordPosition="529" endWordPosition="532">ising or storage (Cooper, 1983; van Eijck, 1985; May, 1985; Hobbs and Shieber, 1987), the free-variable constraint is enforced either by keeping track of the set of free variables FREE(q) in each raisable (storable) term q and when x E FREE(q) blocking the raising of q from any context Bz.t in which x is bound by some binder B, or by checking after all applications of raising (unstoring) that no variable occurs outside the scope of its binder. The argument above is often taken to be so obvious and uncontroversial that it warrants only a remark in passing, if any (Cooper, 1983; Reinhart, 1983; Partee and Bach, 1984; May, 1985; van Riemsdijk and Williams, 1986; Williams, 1986; Roberts, 1987), even though it depends on nontrivial assumptions on the role of logical form in linguistic theory and semantics. First of all, and most immediately, there is the requirement for a logical-form level of representation, either in the predicate-logic format exemplified above or in some tree format as is usual in transformational grammar (Heim, 1982; Cooper, 1983; May, 1985; van Riemsdijk and Williams, 1986; Williams, 1986; Roberts, 1987). 2In fact, this is a perfectly good open well-formed formula and therefore the pre</context>
</contexts>
<marker>Partee, Bach, 1984</marker>
<rawString>Barbara Partee and &amp;ninon Bach. 1984. Quantification, pronouns and VP anaphora. In J.A.G. Groenendijk, T.M.V. Janssen, and M.B.J. Stokhof, editors, Truth, Interpretation and Information, pages 99-130. Foris, Dordrecht, Holland.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Martha E Pollack</author>
<author>Fernando C N Pereira</author>
</authors>
<title>An integrated framework for semantic and pragmatic interpretation.</title>
<date>1988</date>
<booktitle>In 26th Annual Meeting of the Association for Computational Linguistics,</booktitle>
<pages>75--86</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Morristown, New Jersey.</location>
<contexts>
<context position="6736" citStr="Pollack and Pereira (1988)" startWordPosition="1125" endWordPosition="1128">ments. The main goal of this paper is to argue that the free-variable constraint is actually a consequence of basic semantic properties that hold in a semantic domain allowing functional application and abstraction, and are thus independent of a particular logical-form representation. As a corollary, I will also show that the constraint is better expressed as a restriction on the derivations of meanings of sentences from the meanings of their parts rather than a restriction on logical forms. The resulting system is related to the earlier system of conditional interpretation rules developed by Pollack and Pereira (1988), but avoids that system&apos;s use of formal conditions on the order of assumption discharge. 2 Curry&apos;s Calculus of Functionality Work in combinatory logic and the A-calculus is concerned with the elucidation of the basic notion of functionality: how to construct functions, and how to apply functions to their arguments. There is a very large body of results in this area, of which I will need only a very small part. One of the simplest and most elegant accounts of functionality, originally introduced by Curry and Feys (1968) and further elaborated by other authors (Stenlund, 1972; Lambek, 1980; How</context>
</contexts>
<marker>Pollack, Pereira, 1988</marker>
<rawString>Martha E. Pollack and Fernando C.N. Pereira. 1988. An integrated framework for semantic and pragmatic interpretation. In 26th Annual Meeting of the Association for Computational Linguistics, pages 75-86, Morristown, New Jersey. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Dag Prawitz</author>
</authors>
<title>Natural Deduction: A ProofTheoretical Study. Almqvist and Wiksell,</title>
<date>1965</date>
<location>Uppsala, Sweden.</location>
<contexts>
<context position="7482" citStr="Prawitz, 1965" startWordPosition="1250" endWordPosition="1251">n combinatory logic and the A-calculus is concerned with the elucidation of the basic notion of functionality: how to construct functions, and how to apply functions to their arguments. There is a very large body of results in this area, of which I will need only a very small part. One of the simplest and most elegant accounts of functionality, originally introduced by Curry and Feys (1968) and further elaborated by other authors (Stenlund, 1972; Lambek, 1980; Howard, 1980) involves the use of a logical calculus to describe the types of valid functional objects. In a natural deduction format (Prawitz, 1965), the calculus can be simply given by the two rules in Figure 1. The first rule states that the result of applying a function from objects of type A to objects of type B (a function of type A B) to an object of type A is an object of type B. The second rule states that if from an arbitrary object of type A it is possible to construct an object of type B, then one has a function from objects of type A to objects of type B. In this rule and all that follow, the parenthesized formula at the top indicates the discharge of an assumption introduced in the derivation of the formula below it. Precise </context>
<context position="8836" citStr="Prawitz (1965)" startWordPosition="1528" endWordPosition="1529"> to represent functions by restating the rules as shown in Figure 2. That is, if u has type A and v has type A —■• B then v(u) has type B, and if by assuming that x has type A we can show that u (possibly containing x) has type B, then the function represented by As.0 has type A --• B. 153 A A --# B (A) A B Figure 1: Curry Rules [app]•u:A v:A-413 (x : A) v(u) : B [abs] u : B Ax,u : A —■ B Figure 2: Curry Rules for Type Checking To understand what inferences are possible with rules such as the ones in Figure 2, we need a precise notion of derivation, which is here adapted from the one given by Prawitz (1965). A derivation is a tree with each node n labeled by a formula d)(n) (the conclusion of the node) and by a set r(n) of formulas giving the assumptions of dl(n). In addition, a derivation D satisfies the following conditions: i. For each leaf node n E D, either 0(n) is an axiom, which in our case is a formula giving the type and interpretation of a lexical item, and then r(n) is empty, or On) is an assumption, in which case r(n) = {0(n)} ii. Each nonleaf node n corresponds either to an application of [app], in which case it has two daughters m and m&apos; with O(m) u : A, 0(ne) v : A —* B, (1,(n) v(</context>
<context position="12006" citStr="Prawitz, 1965" startWordPosition="2134" endWordPosition="2135">, the types derivable using the rules in Figure 2 are exactly the consequences of the three axioms A A, A --• (B -+ A) and (A -+ (B -• C)) -• ((A -+ B) -+ (A C)), which are the polymorphic types of the three combinators I, K and S that generate all the closed typed A-calculus terms. Furthermore, if we interpret -■ as implication, these theorems are exactly those of the pure implicational fragment of intuitionistic propositional logic (Curry and Feys, 1968; Stenlund, 1972; Anderson and Belnap, 1975). In contrast, with the restriction we have the weaker system of pure relevant implication R... (Prawitz, 1965; Anderson and Belnap, 1975). 15J4 the possible meanings of English phrases do not depend only on the types involved but also on the syntactic structure of the phrases. A possible way out is to encode the relevant syntactic constraints in a more elaborate and restrictive system of types and rules of inference. The prime example of a more constrained system is the Lambek calculus (Lambek, 1958) and its more recent elaborations within categorial grammar and semantics (van Benthem, 1986a; van Benthem, 1986b; Hendriks, 1987; Moortgat, 1988). In particular, Hendriks (1987) proposes a system for qua</context>
</contexts>
<marker>Prawitz, 1965</marker>
<rawString>Dag Prawitz. 1965. Natural Deduction: A ProofTheoretical Study. Almqvist and Wiksell, Uppsala, Sweden.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Tanya Reinhart</author>
</authors>
<title>Anaphora and Semantic Interpretation. Croom Helm, London, England, corrected and revised printing,</title>
<date>1983</date>
<note>edition.</note>
<contexts>
<context position="932" citStr="Reinhart, 1983" startWordPosition="139" endWordPosition="140">on binding at a level of logical form. Such reliance on the form rather than the content of semantic interpretations goes against the spirit of compositionality. I will show that those scoping restrictions follow from simple and fundamental facts about functional application and abstraction, and can be expressed as constraints on the derivation of possible meanings for sentences rather than constraints of the alleged forms of those meanings. 1 An Obvious Constraint? Treatments of quantifier scope in Montague grammar (Montague, 1973; Dowty et al., 1981; Cooper, 1983), transformational grammar (Reinhart, 1983; May, 1985; Heim, 1982; Roberts, 1987) and computational linguistics (Hobbs and Shieber, 1987; Moran, 1988) have depended implicitly or explicitly on a constraint on possible logical forms to explain why examples&apos; such as (1) * A woman who saw every man disliked him are ungrammatical, and why in examples such as (2) Every man saw a friend of his (3) Every admirer of a picture of himself is vain the every.., noun phrase must have wider scope than the a... noun phrase if the pronoun in each example is assumed to be bound by its antecedent. What exactly counts as bound anaphora varies between di</context>
<context position="3140" citStr="Reinhart, 1983" startWordPosition="526" endWordPosition="528">on quantifier raising or storage (Cooper, 1983; van Eijck, 1985; May, 1985; Hobbs and Shieber, 1987), the free-variable constraint is enforced either by keeping track of the set of free variables FREE(q) in each raisable (storable) term q and when x E FREE(q) blocking the raising of q from any context Bz.t in which x is bound by some binder B, or by checking after all applications of raising (unstoring) that no variable occurs outside the scope of its binder. The argument above is often taken to be so obvious and uncontroversial that it warrants only a remark in passing, if any (Cooper, 1983; Reinhart, 1983; Partee and Bach, 1984; May, 1985; van Riemsdijk and Williams, 1986; Williams, 1986; Roberts, 1987), even though it depends on nontrivial assumptions on the role of logical form in linguistic theory and semantics. First of all, and most immediately, there is the requirement for a logical-form level of representation, either in the predicate-logic format exemplified above or in some tree format as is usual in transformational grammar (Heim, 1982; Cooper, 1983; May, 1985; van Riemsdijk and Williams, 1986; Williams, 1986; Roberts, 1987). 2In fact, this is a perfectly good open well-formed formul</context>
<context position="17830" citStr="Reinhart, 1983" startWordPosition="3155" endWordPosition="3156">ving it as bound anaphora. The pronoun resolution rule [pron—] applies only when B is trace or quant(q) for some quantifier q. Furthermore, the premise y : B does not belong to an immediate constituent of the phrase licensing the rule, but rather to some undischarged assumption of s : A, which will remain undischarged. These rules deal only with the construction of the meaning of phrases containing bound anaphora. In a more detailed grammar, the licensing of both rules would be further restricted by linguistic constraints on coreference — for instance, those usually associated with c-command (Reinhart, 1983), which seem to need access to syntactic information (Williams, 1986). In particular, the rules as given do not by themselves enforce any constraints on the possible antecedents of reflexives. The soundness of the rules can be seen by noting that the schematic derivation : pron) x : e • • S : A y : B (Ax.$)(y) : A corresponds to a special case of the schematic derivation (x : e) s : A y : e Ax.s :e--■ A (Ax.$)(y) : A The example derivation in Figure 7, which will be explianed in more detail later, shows the application of the anaphora rules in deriving an interpretation for example sentence (2</context>
</contexts>
<marker>Reinhart, 1983</marker>
<rawString>Tanya Reinhart. 1983. Anaphora and Semantic Interpretation. Croom Helm, London, England, corrected and revised printing, 1987 edition.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Craige Roberts</author>
</authors>
<title>Modal Subordination, Anaphora and Distributivity.</title>
<date>1987</date>
<tech>Ph.D. thesis,</tech>
<institution>Department of Linguistics, University of Massachusetts,</institution>
<location>Amherst, Massachusetts</location>
<contexts>
<context position="971" citStr="Roberts, 1987" startWordPosition="145" endWordPosition="146">Such reliance on the form rather than the content of semantic interpretations goes against the spirit of compositionality. I will show that those scoping restrictions follow from simple and fundamental facts about functional application and abstraction, and can be expressed as constraints on the derivation of possible meanings for sentences rather than constraints of the alleged forms of those meanings. 1 An Obvious Constraint? Treatments of quantifier scope in Montague grammar (Montague, 1973; Dowty et al., 1981; Cooper, 1983), transformational grammar (Reinhart, 1983; May, 1985; Heim, 1982; Roberts, 1987) and computational linguistics (Hobbs and Shieber, 1987; Moran, 1988) have depended implicitly or explicitly on a constraint on possible logical forms to explain why examples&apos; such as (1) * A woman who saw every man disliked him are ungrammatical, and why in examples such as (2) Every man saw a friend of his (3) Every admirer of a picture of himself is vain the every.., noun phrase must have wider scope than the a... noun phrase if the pronoun in each example is assumed to be bound by its antecedent. What exactly counts as bound anaphora varies between different accounts of the phenomena, but </context>
<context position="3240" citStr="Roberts, 1987" startWordPosition="542" endWordPosition="543">, the free-variable constraint is enforced either by keeping track of the set of free variables FREE(q) in each raisable (storable) term q and when x E FREE(q) blocking the raising of q from any context Bz.t in which x is bound by some binder B, or by checking after all applications of raising (unstoring) that no variable occurs outside the scope of its binder. The argument above is often taken to be so obvious and uncontroversial that it warrants only a remark in passing, if any (Cooper, 1983; Reinhart, 1983; Partee and Bach, 1984; May, 1985; van Riemsdijk and Williams, 1986; Williams, 1986; Roberts, 1987), even though it depends on nontrivial assumptions on the role of logical form in linguistic theory and semantics. First of all, and most immediately, there is the requirement for a logical-form level of representation, either in the predicate-logic format exemplified above or in some tree format as is usual in transformational grammar (Heim, 1982; Cooper, 1983; May, 1985; van Riemsdijk and Williams, 1986; Williams, 1986; Roberts, 1987). 2In fact, this is a perfectly good open well-formed formula and therefore the precise formulation of the constraint is more delicate than seems to be realized</context>
</contexts>
<marker>Roberts, 1987</marker>
<rawString>Craige Roberts. 1987. Modal Subordination, Anaphora and Distributivity. Ph.D. thesis, Department of Linguistics, University of Massachusetts, Amherst, Massachusetts (February).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mark Steedman</author>
</authors>
<title>Combinatory grammars and parasitic gaps.</title>
<date>1987</date>
<booktitle>Natural Language and Linguistic Theory,</booktitle>
<pages>5--3</pages>
<contexts>
<context position="14488" citStr="Steedman, 1987" startWordPosition="2552" endWordPosition="2554">he type of the meaning of the VP. Third, the domain of types will be enriched with a few new type constructors, in addition to the function type constructor From a purely semantic point of view, these type constructors add no new types, but allow a convenient encoding of rule applicability constraints motivated by syntactic considerations. This enrichment of the formal universe of types for syntactic purposes is familiar from Montague grammar (Montague, 1973), where it is used to distinguish different syntactic realizations of the same semantic type, and from categorial grammar (Lambek, 1958; Steedman, 1987), where it is used to capture syntactic word-order constraints. Together, the above refinements allow the synFigure 4: Bound Anaphora Rules tax of language to restrict what potential semantic combinations are actually realized. Any derivations will be sound with respect to [app] and [abs], but many derivations allowed by these rules will be blocked. 4 Derived Rules In the rules below, we will use the two basic types e for individuals and t for propositions, the function type constructor associating to the right, the formal type constructor quant(q), where q is a quantifier, that is, a value of</context>
</contexts>
<marker>Steedman, 1987</marker>
<rawString>Mark Steedman. 1987. Combinatory grammars and parasitic gaps. Natural Language and Linguistic Theory, 5(3):403-439.</rawString>
</citation>
<citation valid="true">
<authors>
<author>SOren Stenlund</author>
</authors>
<title>Combinators, )- Terms and Proof Theory.</title>
<date>1972</date>
<location>D. Reidel, Dordrecht, Holland.</location>
<contexts>
<context position="7317" citStr="Stenlund, 1972" startWordPosition="1223" endWordPosition="1224">ped by Pollack and Pereira (1988), but avoids that system&apos;s use of formal conditions on the order of assumption discharge. 2 Curry&apos;s Calculus of Functionality Work in combinatory logic and the A-calculus is concerned with the elucidation of the basic notion of functionality: how to construct functions, and how to apply functions to their arguments. There is a very large body of results in this area, of which I will need only a very small part. One of the simplest and most elegant accounts of functionality, originally introduced by Curry and Feys (1968) and further elaborated by other authors (Stenlund, 1972; Lambek, 1980; Howard, 1980) involves the use of a logical calculus to describe the types of valid functional objects. In a natural deduction format (Prawitz, 1965), the calculus can be simply given by the two rules in Figure 1. The first rule states that the result of applying a function from objects of type A to objects of type B (a function of type A B) to an object of type A is an object of type B. The second rule states that if from an arbitrary object of type A it is possible to construct an object of type B, then one has a function from objects of type A to objects of type B. In this r</context>
<context position="11868" citStr="Stenlund, 1972" startWordPosition="2112" endWordPosition="2113">ng the types of the lexical items in the phrase. However, this is far too liberal in that 3Without this restriction to the abstraction rule, the types derivable using the rules in Figure 2 are exactly the consequences of the three axioms A A, A --• (B -+ A) and (A -+ (B -• C)) -• ((A -+ B) -+ (A C)), which are the polymorphic types of the three combinators I, K and S that generate all the closed typed A-calculus terms. Furthermore, if we interpret -■ as implication, these theorems are exactly those of the pure implicational fragment of intuitionistic propositional logic (Curry and Feys, 1968; Stenlund, 1972; Anderson and Belnap, 1975). In contrast, with the restriction we have the weaker system of pure relevant implication R... (Prawitz, 1965; Anderson and Belnap, 1975). 15J4 the possible meanings of English phrases do not depend only on the types involved but also on the syntactic structure of the phrases. A possible way out is to encode the relevant syntactic constraints in a more elaborate and restrictive system of types and rules of inference. The prime example of a more constrained system is the Lambek calculus (Lambek, 1958) and its more recent elaborations within categorial grammar and se</context>
</contexts>
<marker>Stenlund, 1972</marker>
<rawString>SOren Stenlund. 1972. Combinators, )- Terms and Proof Theory. D. Reidel, Dordrecht, Holland.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Johan van Benthem</author>
</authors>
<title>Categorial grammar and lambda calculus.</title>
<date>1986</date>
<booktitle>Mathematical Logic and its Application,</booktitle>
<pages>39--60</pages>
<editor>In D. Skordev, editor,</editor>
<publisher>Plenum Press,</publisher>
<location>New York, New York.</location>
<marker>van Benthem, 1986</marker>
<rawString>Johan van Benthem. 1986a. Categorial grammar and lambda calculus. In D. Skordev, editor, Mathematical Logic and its Application, pages 39-60: Plenum Press, New York, New York.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Johan van Benthem</author>
</authors>
<date>1986</date>
<booktitle>Essays in Logical Semantics, Volume 29 of Studies in Linguistics</booktitle>
<location>Dordrecht, Holland.</location>
<marker>van Benthem, 1986</marker>
<rawString>Johan van Benthem. 1986b. Essays in Logical Semantics, Volume 29 of Studies in Linguistics and Philosophy. D. Reidel, Dordrecht, Holland.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jan van Eijck</author>
</authors>
<title>Aspects of Quantification in Natural Language.</title>
<date>1985</date>
<tech>Ph.D. thesis,</tech>
<institution>University of Groningen,</institution>
<location>Groningen, Holland</location>
<marker>van Eijck, 1985</marker>
<rawString>Jan van Eijck. 1985. Aspects of Quantification in Natural Language. Ph.D. thesis, University of Groningen, Groningen, Holland (February).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Henk van Riemsdijk</author>
<author>Edwin Williams</author>
</authors>
<title>Introduction to the Theory of Grammar,</title>
<date>1986</date>
<volume>12</volume>
<publisher>MIT Press,</publisher>
<location>Cambridge, Massachusetts.</location>
<marker>van Riemsdijk, Williams, 1986</marker>
<rawString>Henk van Riemsdijk and Edwin Williams. 1986. Introduction to the Theory of Grammar, Volume 12 of Current Studies in Linguistics. MIT Press, Cambridge, Massachusetts.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kurt A Vanlehn</author>
</authors>
<title>Determining the scope of English quantifiers. Master&apos;s thesis,</title>
<date>1978</date>
<location>M.I.T.</location>
<contexts>
<context position="5519" citStr="Vanlehn, 1978" startWordPosition="920" endWordPosition="921"> would have to be considered if raising out of relative clauses were allowed, for example in (4) An author who John has read every book by arrived In this example, if we did not assume the restriction against raising from relative clauses, the every.., noun phrase could in principle be assigned widest scope, but this would be blocked by the free-variable constraint as shown by the occurrence of b free as an argument of BOOK-BY in Vb.BooK-BY(b, a) (3a.AuTHoR(a)Se HAS-READ(JOHN, b)SLARRIVED(a)) That is, the alleged constraint against raising from relatives, for which many counterexamples exist (Vanlehn, 1978), blocks some derivations in which otherwise the free-variable constraint would be involved, specifically those associated to syntactic configurations of the form [Np, • • • Ks— • • [Npi • • Xi • • • • .] • • .1 where Xi is a pronoun or trace coindexed with NPi and NP, is a quantified noun phrase. Since some of the most extensive Montague grammar fragments in the literature (Dowty et al., 1981; Cooper, 1983) do not cover the other major source of the problem, PP complements of noun phrases (replace S by PP in the configuration above), the question is effectively avoided in those treatments. Th</context>
</contexts>
<marker>Vanlehn, 1978</marker>
<rawString>Kurt A. Vanlehn. 1978. Determining the scope of English quantifiers. Master&apos;s thesis, M.I.T. (June).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Edwin Williams</author>
</authors>
<title>A reassignment of the functions of LF. Linguistic Inquiry,</title>
<date>1986</date>
<pages>17--2</pages>
<contexts>
<context position="3208" citStr="Williams, 1986" startWordPosition="538" endWordPosition="539">, 1985; Hobbs and Shieber, 1987), the free-variable constraint is enforced either by keeping track of the set of free variables FREE(q) in each raisable (storable) term q and when x E FREE(q) blocking the raising of q from any context Bz.t in which x is bound by some binder B, or by checking after all applications of raising (unstoring) that no variable occurs outside the scope of its binder. The argument above is often taken to be so obvious and uncontroversial that it warrants only a remark in passing, if any (Cooper, 1983; Reinhart, 1983; Partee and Bach, 1984; May, 1985; van Riemsdijk and Williams, 1986; Williams, 1986; Roberts, 1987), even though it depends on nontrivial assumptions on the role of logical form in linguistic theory and semantics. First of all, and most immediately, there is the requirement for a logical-form level of representation, either in the predicate-logic format exemplified above or in some tree format as is usual in transformational grammar (Heim, 1982; Cooper, 1983; May, 1985; van Riemsdijk and Williams, 1986; Williams, 1986; Roberts, 1987). 2In fact, this is a perfectly good open well-formed formula and therefore the precise formulation of the constraint is more de</context>
<context position="17899" citStr="Williams, 1986" startWordPosition="3165" endWordPosition="3166">s only when B is trace or quant(q) for some quantifier q. Furthermore, the premise y : B does not belong to an immediate constituent of the phrase licensing the rule, but rather to some undischarged assumption of s : A, which will remain undischarged. These rules deal only with the construction of the meaning of phrases containing bound anaphora. In a more detailed grammar, the licensing of both rules would be further restricted by linguistic constraints on coreference — for instance, those usually associated with c-command (Reinhart, 1983), which seem to need access to syntactic information (Williams, 1986). In particular, the rules as given do not by themselves enforce any constraints on the possible antecedents of reflexives. The soundness of the rules can be seen by noting that the schematic derivation : pron) x : e • • S : A y : B (Ax.$)(y) : A corresponds to a special case of the schematic derivation (x : e) s : A y : e Ax.s :e--■ A (Ax.$)(y) : A The example derivation in Figure 7, which will be explianed in more detail later, shows the application of the anaphora rules in deriving an interpretation for example sentence (2). 156 [quant-F] • q (a t) t x : quant(q) (x : quant(q)) x : e [quant</context>
</contexts>
<marker>Williams, 1986</marker>
<rawString>Edwin Williams. 1986. A reassignment of the functions of LF. Linguistic Inquiry, 17(2):265-299.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>