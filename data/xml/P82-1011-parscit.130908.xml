<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000176">
<title confidence="0.717875">
Problems With Domain-Independent Natural Language Database Access Systems
</title>
<author confidence="0.567373">
Steven P. Shwartz
</author>
<affiliation confidence="0.116049">
Cognitive Systems Inc.
</affiliation>
<address confidence="0.32347">
234 Church Street
New Haven, Ct. 06E10
</address>
<bodyText confidence="0.995650684210526">
In the past decade, a number of natural lang-
uage database access systems have been constructed
(e.g. Hendrix 1976; Waltz at at. 1976; Sac-
erdoti 1978; Harris 1979; Lehnert and Shwartz
1982; Shwartz 1982). The level of performance
achieved by natural language database access sys-
tems varies considerably, with the more robust
systems operating within a narrow domain (i.e.,
content area) and relying heavily on domain-speci-
fic knowledge to guide the language understanding
process. Transporting a system constructed for one
domain into a new domain is extremely resource-in-
tensive because a new set of domain-specific know-
ledge must be encoded.
In order to reduce the cost of transportation,
a great deal of current research has focussed on
building natural language access systems that are
domain-independent. More specifically, these sys-
tems attempt to use syntactic knowledge in con-
junction with knowledge about the structure of the
database as a substitute for conceptual knowledge
regarding the database content area. In this paper
I examine the issue of whether or not it is possi-
ble to build a natural language database access
system that achieves an acceptable level of per-
formance without including domain-specific concep-
tual knowledge.
A performance criterion for natural language aCCOSS
systems.
The principle motivation for building natural
language systems for database access is to free the
user from the need for data processing instruction.
A natural language front end is a step above the
&apos;English-like query systems that presently domi-
nate the commercial database retrieval field.
English-like query systems allow the user to phrase
requests as English sentences, but permit only a
restricted subset of English and impose a rigid
syntax on user requests. These English-like query
systems are easy to learn, but a training period is
Still required for the user to learn to phrase re-
quests that conform to thu. restrictions. Howe-
ver, the training period is often very brief, and
natural language systems can be considered superior
only if no computer-related training or knowledge
is required of the user.
This criterion can only be met if no restric-
tions are placed on user queries. A user who has
previously relied on a programmer-technician to
code formal queries for information retrieval
should be permitted to phrase information retrieval
requests to the program in exactly the same way as
to the technician. That is, whatever the techni-
cian would understand, the program should
understand. For example, a natural language front
end to a stock market database should understand
that
</bodyText>
<listItem confidence="0.924368">
(1) Did IBM go up yesterday?
</listItem>
<bodyText confidence="0.960968333333333">
refers to PRICE and not VOLUME. However, the sys-
tem need not understand requests that a program-
mer-technician would be unable to process, e.g.
</bodyText>
<listItem confidence="0.66109">
(2) Is GENCO a likely takeover target?
</listItem>
<bodyText confidence="0.999199451612903">
That is, the programmer-technician working for an
investment firm would not be expected to know how
to process requests that require &apos;expert&apos; knowledge
and neither should a natural language front end.
If, however, a natural language system cannot a-
chieve the level of performance of a program-
mer-technician it will seem stupid because it does
not meet a user&apos;s expectations for an English un-
derstanding system.
The &apos;programmer-technician criterion&apos; cannot
possibly be met by a domain-independent natural
language access system because language understan-
ding requires domain-specific world knowledge. On
a theoretical level, the need for a knowledge base
in a natural language processing system has been
well-documented (e.g. Schank &amp; Abelson 1977;
Lehnert 1978; Dyer 1982). It will be argued
below that in an applied context, a system that
does not have a conceptual knowledge base can pro-
duce at best only a shallow level of understanding
and one that does not meet the criterion specified
above. Further, the domain-independent approach
creates a host of problems that are simply non-ex-
istent in knowledge-based systems.
Eroblems ter domain:independent systems; infer-
ence. ambiguity; and anaphora.
Inferential processing is an integral part of
natural language understanding. Consider the fol-
lowing requests from PEARL (Lehnert and Shwartz
1982; Shwartz 1982) when it operates in the domain
of geological map generation:
</bodyText>
<page confidence="0.950527">
60
</page>
<figure confidence="0.85948325">
Show me all oil
Show me all oil
(6) Show me all oil
(6) Show me all oil
</figure>
<figureCaption confidence="0.84700275">
wells from 1970 to 1980.
wells from 6000 to 7000.
wells 1 to 2000.
wells 40 to 41, 80 to 81.
</figureCaption>
<bodyText confidence="0.999876705882353">
that salaries are associated with people, so
retirement plans and offices are never considered
as possible referents. Again, domain-specific
world knowledge is helpful in understanding these
requests.
A programmer-technician in the petrochemical in-
dustry would infer that (3) refers to drilling
dates, (4) refers to well depth, (6) refers to the
map scale, and (6) refers to latitude/longitude
specifications.
Correct processing of these requests requires in-
ferential processing that is based on knowledge of
the petrochemical industry. That is, these con-
ventions are not in everyone&apos;s general working
knowledge of the English language. Yet they are
standard usage for people who communicate with each
other about drilling date, end any system that
claims to provide a natural language interface to a
data base of drilling data must have the knowledge
to correctly process requests such as these.
Without such inferential processing, the user is
required to spell out everything in detail, some-
thing that is simply not necessary in normal Eng-
lish discourse.
Another problem for any natural language un-
derstanding system is the processing of ambiguous
words. In some cases disambiguation can be per-
formed syntactically. In other cases, the struc-
ture of the database can provide the information
necessary for word sense disambiguation (more on
this below). However, in many cases disambiguation
can only be performed if domain-specific, world
knowledge is available. For example, consider the
processing of the word &apos;sales&apos; in (7), (8) and (9).
</bodyText>
<listItem confidence="0.975746375">
(7) What is the average mark up for sales of stereo
equipment?
(8) What is the average mark down for sales of
stereo equipment?
(9) What is the average mark up during sales of
stereo equipment?
(10) What is the average mark down during sales of
stereo equipment?
</listItem>
<bodyText confidence="0.999567538461538">
These four requests, which are so nearly identical
both lexically and syntactically, have very dis-
tinct meanings that derive from the fact that the
correct sense of &apos;sales&apos; in (7) is quite different
from the sense of &apos;sales&apos; intended in (8), (9), and
(10). Most people have little difficulty deter-
mining which sense of &apos;sales&apos; is intended in these
sentences, and neither would a knowledge-based un-
derstander. The key to the disambiguation process
involves world knowledge regarding retail sales.
Problems of anaphora pose similar problems.
For example, suppose the following requests were
submitted to a personnel data base:
</bodyText>
<listItem confidence="0.99356575">
(11) List all salesmen with retirement plans along
with their salaries.
(12) List all offices with women managers along
with their salaries.
</listItem>
<bodyText confidence="0.999735785714286">
While these requests are syntactically identical,
the referents for &apos;their&apos; in (11) and (12) occupy
different syntactic positions. As human informa-
tion processors, we have no trouble understanding
Structural knowledge as a substitute for conceptual
knowledge-
One of innovations to emerge from the con-
struction of domain-independent systems is a clever
mechanism that extracts domain-specific knowledge
from the structure of the data base. For example,
the resolution of the pronoun &apos;their&apos; in both (11)
and (12) above could be accomplished by using only
structural (rather than conceptual) knowledge of
the domain. For example, suppose the payroll
database for (11) were structured such that SALARY
and RETIREMENT-PLANS were fields within a SALESMAN
file. It would then be possible to infer that
&apos;their&apos; refers to &apos;salesmen&apos; in (11) by noting that
SALARY is a field in the SALESMEN file, but that
SALARY is not on entry in a RETIREMENT-PLANS file.
Unfortunately, this approach has limited u-
tility because it relies on a fortuitous database
structure. Consider what would happen if the data
base had a top-level EMPLOYEES file (rather than
individual files for each type of employee) with
fields for JOB-TYPE, SALARY, COMMISSIONS, and RE-
TIREMENT-PLANS. With this database organization,
It would not be possible to determine that
</bodyText>
<listItem confidence="0.892965">
(13) List all salesmen who have secretaries along
with their commissions.
</listItem>
<bodyText confidence="0.999425714285714">
&apos;their&apos; refers to &apos;salesman&apos; and not &apos;secretaries&apos;
in (13) on the basis of the structure of the data-
base. To the naive user, however, the meaning of
this sentence is perfectly clear. A person who
couldn&apos;t determine the referent of &apos;their&apos; in (13)
would not be perceived as having an adequate com-
mand of the English language and the same would be
true for a computer system that did not understand
the request.
Eitialls associated with the domain:independent ap-
proach.
In a knowledge-based system such as PEARL, a
natural language request is parsed into a concep-
tual representation of the meaning of the request.
The retrieval routine is then generated from this
conceptual representation. As a result, the parser
is independent of the logical structure of the
database. That is, the same parser can be used for
databases with different logical structures, but
the same information content. Further, the same
parser can be used whether the required information
Is located in a single file or in multiple files.
In a domain-independent system, the parser is
entirely dependent on the structure of the database
for domain-specific knowledge. As a result, one
must restructure the parser for databases with i-
dentical content but different logical structure.
Similarly, the output of the parser must be very
</bodyText>
<page confidence="0.998329">
61
</page>
<bodyText confidence="0.995247142857143">
different when the required information is con- structure of the database, the system should inform
tained in multiple files rather than a single file. the user that this is the case.
Because of their lack of conceptual knowledge
regarding the database, domain-independent systems
rely heavily on key words or phrases to indicate
which database field is being referred to. For
example,
</bodyText>
<subsectionHeader confidence="0.358274">
(14) What is Bill Smith&apos;s job title?
</subsectionHeader>
<bodyText confidence="0.968412125">
might be easily processed by simply retrieving the
contents of a JOB-TITLE field. Different ways of
referring to job title can also be handled as syn-
onyms. However, domain-independent systems get
into deep trouble when the database field that
needs to be accessed is not directly indicated by
key words or phrases in the input request. For
example,
</bodyText>
<listItem confidence="0.30471975">
(16) Is John Jones the child of en alumnus?
is easily processed if there exists a
CHILD-OF-AN-ALUMNUS field, but the query
(16) Is one of John Jones&apos; parents an alumnus?
</listItem>
<bodyText confidence="0.987291125">
contains no key word or phrase to indicate that the
CHILD-OF-AN-ALUMNUS field should be accessed. In a
knowledge-based system, the retrieval routine is
generated from a conceptual representation of the
meaning of the user query and therefore key words
or phrases are not required. A related problem
occurs with queries involving aggregation or quan-
tity. For example,
</bodyText>
<sectionHeader confidence="0.63198" genericHeader="abstract">
COOCIUSIODS.
</sectionHeader>
<bodyText confidence="0.994316846153846">
I have argued above that conceptually-based
domain-specific knowledge is absolutely essential
for natural language database access systems.
Systems that rely on database structure for this
domain-specific knowledge will not achieve an ac-
ceptable level of performance -- i.e. operate It
the level of understanding of a programmer-techni-
cian.
Because of the requirement for domain-specific
knowledge, conceptually-based systems are restric-
ted to limited domains and are not readily portable
to new content areas. However, eliminating the
domain-specific conceptual knowledge is throwing
the baby out with the bath water. The conceptual-
ly-based domain-specific knowledge is the key to
robust understanding.
The approach of the PEARL project with regard
to the transportability problem is to try and I-
dentify areas of discourse that are common to most
domains and to build robust modules for natural
language analysis within these domains. Examples
of such domains are temporal reference, location
reference, and report generation. These modules
are knowledge-based end can be used by a wide va-
riety of domains to help extract the conceptual
content of a request.
</bodyText>
<sectionHeader confidence="0.998827" genericHeader="references">
REFERENCES
</sectionHeader>
<bodyText confidence="0.934202333333333">
(17) How many employees are in the sales depart-
ment?
might require retrieving the value of a particular
field (e.g. NUMBER-OF-EMPLOYEES), or it might re-
quire totalling the number of records in the EM-
PLOYEE file that have the correct DEPARTMENT field
value, or, if the departments are broken down into
offices, it might require totalling the NUM-
BER-OF-EMPLOYEES field for each office. In s do-
main-independent system, the correct parse depends
upon the structure of the database and is therefore
difficult to handle in a general way. In a know-
ledge-based system such as PEARL, the different
database structures would simply require altering
the mapping between the conceptual representation
of the parse and the retrieval query.
Finally, this reliance on database structure
can lead to wrong answers. A classic example is
Harris&apos; (1979) &apos;snowmobile problem&apos;. When Harris&apos;
ROBOT system interfaces with a file containing in-
formation about homeowner&apos;s insurance, the word
</bodyText>
<reference confidence="0.99267969047619">
&apos;snowmobile&apos; is defined as any number 0 in the
&apos;snowmobile field&apos; of an insurance policy record.
This means that as far as ROBOT is concerned, the
question &apos;How many snowmobiles are there?&apos; is no
different from &apos;How many policies have snowmobile
coverage?&apos; However, the correct answers to the two
questions will often be very different. If the
first question is asked and the second question is
answered, the result is an incorrect answer. If
the first question cannot be answered due to the
40f, M. (1982). In:Depth Uodmrstandiog. 8 Com-
puter &amp;Wel of Integrated erocessing for Nara-
tixe COMpreb2051411. Yale University, Computer
Science Dept., Research Report 0219.
Harris, L. R. (1979). Experience with ROBOT in 12
commercial natural language data base query ap-
plications. eroceedingS Of the Oth Internation-
al Joint Conference on artificial Intelligence.
Hendrix, G. G. (1976). LIFER: A natural language
interface facility. SR/ Tech. Note 136. Dec.
1976.
Lehnert, W. (1978). Me er4COSS of Question an-
swering. Lawrence Erlbaum Associates, Hills-
dale, New Jersey.
Lehnert, W. and Shwartz, S. (1982). Natural
Language Data Base Access with Pearl. eactled-
logs of the Ninth International Conference on
Computational Linguistics. Prague, Czechoslo-
vakia.
Secerdoti, E. D. (1978). A LADDER user&apos;s guide.
Technical Note 163. SRI Project 6891.
Schenk, R. C. and Abelson, R. (1977). Scripts.
Elena. Goals and Understanding- Lawrence Erl-
baum Associates, Hillsdale Nm&apos; Jersey, 1977.
Shwertz, S. (1982). PEARL: A Natural Language
Analysis System for Information Retrieval (sub-
mitted to AAAI-82/applications division).
Waltz, D. L., Finin, T., Green, F., Conrad, F.,
Goodman, 8., Hadden, G. (1976). The planes
system: natural language access to a large data
base. Coordinated Science Lab., Univ. of Il-
linois, Urbana, Tech. Report 7-34, (July 1976).
</reference>
<page confidence="0.999189">
62
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.022868">
<title confidence="0.99999">Problems With Domain-Independent Natural Language Database Access Systems</title>
<author confidence="0.999972">Steven P Shwartz</author>
<affiliation confidence="0.999959">Cognitive Systems Inc.</affiliation>
<address confidence="0.967547">234 Church Street New Haven, Ct. 06E10</address>
<abstract confidence="0.984934899053628">In the past decade, a number of natural language database access systems have been constructed Hendrix 1976; Waltz at at. 1976; Sacerdoti 1978; Harris 1979; Lehnert and Shwartz 1982; Shwartz 1982). The level of performance achieved by natural language database access systems varies considerably, with the more robust systems operating within a narrow domain (i.e., content area) and relying heavily on domain-specific knowledge to guide the language understanding process. Transporting a system constructed for one domain into a new domain is extremely resource-intensive because a new set of domain-specific knowledge must be encoded. In order to reduce the cost of transportation, a great deal of current research has focussed on building natural language access systems that are More specifically, these tems attempt to use syntactic knowledge in conjunction with knowledge about the structure of the database as a substitute for conceptual knowledge regarding the database content area. In this paper I examine the issue of whether or not it is possible to build a natural language database access system that achieves an acceptable level of performance without including domain-specific conceptual knowledge. performance criterion for natural language systems. The principle motivation for building natural language systems for database access is to free the user from the need for data processing instruction. A natural language front end is a step above the &apos;English-like query systems that presently dominate the commercial database retrieval field. English-like query systems allow the user to phrase requests as English sentences, but permit only a restricted subset of English and impose a rigid syntax on user requests. These English-like query systems are easy to learn, but a training period is required for the user to learn to phrase rethat conform to thu. restrictions. ver, the training period is often very brief, and natural language systems can be considered superior only if no computer-related training or knowledge is required of the user. This criterion can only be met if no restrictions are placed on user queries. A user who has previously relied on a programmer-technician to code formal queries for information retrieval should be permitted to phrase information retrieval requests to the program in exactly the same way as to the technician. That is, whatever the technician would understand, the program should understand. For example, a natural language front end to a stock market database should understand that (1) Did IBM go up yesterday? refers to PRICE and not VOLUME. However, the system need not understand requests that a programmer-technician would be unable to process, e.g. (2) Is GENCO a likely takeover target? That is, the programmer-technician working for an investment firm would not be expected to know how to process requests that require &apos;expert&apos; knowledge and neither should a natural language front end. If, however, a natural language system cannot achieve the level of performance of a programmer-technician it will seem stupid because it does not meet a user&apos;s expectations for an English understanding system. The &apos;programmer-technician criterion&apos; cannot possibly be met by a domain-independent natural language access system because language understanding requires domain-specific world knowledge. On a theoretical level, the need for a knowledge base in a natural language processing system has been well-documented (e.g. Schank &amp; Abelson 1977; Lehnert 1978; Dyer 1982). It will be argued below that in an applied context, a system that does not have a conceptual knowledge base can produce at best only a shallow level of understanding and one that does not meet the criterion specified above. Further, the domain-independent approach creates a host of problems that are simply non-exknowledge-based systems. systems; ence. ambiguity; and anaphora. Inferential processing is an integral part of language following requests from PEARL (Lehnert and Shwartz Shwartz it operates in the domain of geological map generation: 60 Show me all oil Show me all oil (6) Show me all oil (6) Show me all oil wells from 1970 to 1980. wells from 6000 to 7000. wells 1 to 2000. wells 40 to 41, 80 to 81. that salaries are associated with people, so retirement plans and offices are never considered as possible referents. Again, domain-specific world knowledge is helpful in understanding these requests. A programmer-technician in the petrochemical industry would infer that (3) refers to drilling dates, (4) refers to well depth, (6) refers to the map scale, and (6) refers to latitude/longitude specifications. Correct processing of these requests requires inferential processing that is based on knowledge of the petrochemical industry. That is, these conventions are not in everyone&apos;s general working knowledge of the English language. Yet they are standard usage for people who communicate with each other about drilling date, end any system that claims to provide a natural language interface to a data base of drilling data must have the knowledge to correctly process requests such as these. Without such inferential processing, the user is required to spell out everything in detail, something that is simply not necessary in normal English discourse. Another problem for any natural language understanding system is the processing of ambiguous In some cases disambiguation can be persyntactically. In other cases, the ture of the database can provide the information necessary for word sense disambiguation (more on this below). However, in many cases disambiguation can only be performed if domain-specific, world knowledge is available. For example, consider the processing of the word &apos;sales&apos; in (7), (8) and (9). (7) What is the average mark up for sales of stereo equipment? (8) What is the average mark down for sales of stereo equipment? (9) What is the average mark up during sales of stereo equipment? (10) What is the average mark down during sales of stereo equipment? These four requests, which are so nearly identical both lexically and syntactically, have very distinct meanings that derive from the fact that the correct sense of &apos;sales&apos; in (7) is quite different from the sense of &apos;sales&apos; intended in (8), (9), and Most people have little difficulty mining which sense of &apos;sales&apos; is intended in these sentences, and neither would a knowledge-based understander. The key to the disambiguation process involves world knowledge regarding retail sales. Problems of anaphora pose similar problems. For example, suppose the following requests were submitted to a personnel data base: (11) List all salesmen with retirement plans along with their salaries. (12) List all offices with women managers along with their salaries. While these requests are syntactically identical, the referents for &apos;their&apos; in (11) and (12) occupy different syntactic positions. As human information processors, we have no trouble understanding knowledge as a substitute knowledge- One of innovations to emerge from the construction of domain-independent systems is a clever mechanism that extracts domain-specific knowledge from the structure of the data base. For example, the resolution of the pronoun &apos;their&apos; in both (11) and (12) above could be accomplished by using only structural (rather than conceptual) knowledge of the domain. For example, suppose the payroll database for (11) were structured such that SALARY and RETIREMENT-PLANS were fields within a SALESMAN file. It would then be possible to infer that &apos;their&apos; refers to &apos;salesmen&apos; in (11) by noting that SALARY is a field in the SALESMEN file, but that SALARY is not on entry in a RETIREMENT-PLANS file. Unfortunately, this approach has limited utility because it relies on a fortuitous database structure. Consider what would happen if the data top-level EMPLOYEES file (rather than individual files for each type of employee) with fields for JOB-TYPE, SALARY, COMMISSIONS, and RE- TIREMENT-PLANS. With this database organization, It would not be possible to determine that (13) List all salesmen who have secretaries along with their commissions. &apos;their&apos; refers to &apos;salesman&apos; and not &apos;secretaries&apos; in (13) on the basis of the structure of the database. To the naive user, however, the meaning of this sentence is perfectly clear. A person who couldn&apos;t determine the referent of &apos;their&apos; in (13) would not be perceived as having an adequate command of the English language and the same would be true for a computer system that did not understand the request. Eitialls associated with the domain:independent approach. In a knowledge-based system such as PEARL, a natural language request is parsed into a conceptual representation of the meaning of the request. The retrieval routine is then generated from this conceptual representation. As a result, the parser is independent of the logical structure of the database. That is, the same parser can be used for databases with different logical structures, but the same information content. Further, the same parser can be used whether the required information Is located in a single file or in multiple files. a domain-independent parser is entirely dependent on the structure of the database for domain-specific knowledge. As a result, one must restructure the parser for databases with identical content but different logical structure. Similarly, the output of the parser must be very 61 different when the required information is constructure of the database, the system should inform tained in multiple files rather than a single file. the user that this is the case. Because of their lack of conceptual knowledge regarding the database, domain-independent systems rely heavily on key words or phrases to indicate which database field is being referred to. For example, (14) What is Bill Smith&apos;s job title? might be easily processed by simply retrieving the contents of a JOB-TITLE field. Different ways of referring to job title can also be handled as synonyms. However, domain-independent systems get into deep trouble when the database field that needs to be accessed is not directly indicated by key words or phrases in the input request. For example, (16) Is John Jones the child of en alumnus? is easily processed if there exists a CHILD-OF-AN-ALUMNUS field, but the query (16) Is one of John Jones&apos; parents an alumnus? contains no key word or phrase to indicate that the CHILD-OF-AN-ALUMNUS field should be accessed. In a knowledge-based system, the retrieval routine is generated from a conceptual representation of the meaning of the user query and therefore key words or phrases are not required. A related problem occurs with queries involving aggregation or quantity. For example, COOCIUSIODS. I have argued above that conceptually-based domain-specific knowledge is absolutely essential for natural language database access systems. Systems that rely on database structure for this domain-specific knowledge will not achieve an acceptable level of performance -i.e. operate It the level of understanding of a programmer-technician. Because of the requirement for domain-specific knowledge, conceptually-based systems are restricted to limited domains and are not readily portable to new content areas. However, eliminating the domain-specific conceptual knowledge is throwing the baby out with the bath water. The conceptually-based domain-specific knowledge is the key to robust understanding. The approach of the PEARL project with regard to the transportability problem is to try and Identify areas of discourse that are common to most domains and to build robust modules for natural language analysis within these domains. Examples of such domains are temporal reference, location reference, and report generation. These modules are knowledge-based end can be used by a wide vadomains to help extract conceptual content of a request. REFERENCES (17) How many employees are in the sales department? might require retrieving the value of a particular field (e.g. NUMBER-OF-EMPLOYEES), or it might require totalling the number of records in the EM- PLOYEE file that have the correct DEPARTMENT field value, or, if the departments are broken down into offices, it might require totalling the NUM- BER-OF-EMPLOYEES field for each office. In s domain-independent system, the correct parse depends upon the structure of the database and is therefore difficult to handle in a general way. In a knowledge-based system such as PEARL, the different database structures would simply require altering the mapping between the conceptual representation of the parse and the retrieval query. Finally, this reliance on database structure to wrong answers. A classic example is Harris&apos; (1979) &apos;snowmobile problem&apos;. When Harris&apos; ROBOT system interfaces with a file containing information about homeowner&apos;s insurance, the word &apos;snowmobile&apos; is defined as any number 0 in the &apos;snowmobile field&apos; of an insurance policy record. This means that as far as ROBOT is concerned, the question &apos;How many snowmobiles are there?&apos; is no different from &apos;How many policies have snowmobile coverage?&apos; However, the correct answers to the two questions will often be very different. If the first question is asked and the second question is answered, the result is an incorrect answer. If the first question cannot be answered due to the M. (1982). In:Depth Uodmrstandiog. 8 &amp;Wel of Integrated erocessing tixe COMpreb2051411. Yale University, Computer Science Dept., Research Report 0219. Harris, L. R. (1979). Experience with ROBOT in 12 commercial natural language data base query aperoceedingS Of the Oth al Joint Conference on artificial Intelligence. Hendrix, G. G. (1976). LIFER: A natural language interface facility. SR/ Tech. Note 136. Dec.</abstract>
<note confidence="0.826421826086956">1976. W. (1978). Me of Lawrence Erlbaum Associates, dale, New Jersey. Lehnert, W. and Shwartz, S. (1982). Natural Language Data Base Access with Pearl. eactledlogs of the Ninth International Conference on Linguistics. Prague, vakia. Secerdoti, E. D. (1978). A LADDER user&apos;s guide. Technical Note 163. SRI Project 6891. Schenk, R. C. and Abelson, R. (1977). Scripts. Elena. Goals and Understanding- Lawrence Erlbaum Associates, Hillsdale Nm&apos; Jersey, 1977. Shwertz, S. (1982). PEARL: A Natural Language System for Information Retrieval (subto AAAI-82/applications D. T., Green, F., Conrad, F., Goodman, 8., Hadden, G. (1976). The planes system: natural language access to a large data Coordinated Science Lab., Univ. of linois, Urbana, Tech. Report 7-34, (July 1976). 62</note>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="false">
<title>snowmobile&apos; is defined as any number 0 in the &apos;snowmobile field&apos; of an insurance policy record. This means that as far as ROBOT is concerned, the question &apos;How many snowmobiles are there?&apos; is no different from &apos;How many policies have snowmobile coverage?&apos; However, the correct answers to the two questions will often be very different. If the first question is asked and the second question is answered, the result is an incorrect answer. If the first question cannot be answered due to the</title>
<marker></marker>
<rawString>&apos;snowmobile&apos; is defined as any number 0 in the &apos;snowmobile field&apos; of an insurance policy record. This means that as far as ROBOT is concerned, the question &apos;How many snowmobiles are there?&apos; is no different from &apos;How many policies have snowmobile coverage?&apos; However, the correct answers to the two questions will often be very different. If the first question is asked and the second question is answered, the result is an incorrect answer. If the first question cannot be answered due to the</rawString>
</citation>
<citation valid="true">
<authors>
<author>M 40f</author>
</authors>
<title>In:Depth Uodmrstandiog. 8 Computer &amp;Wel of Integrated erocessing for Naratixe COMpreb2051411.</title>
<date>1982</date>
<tech>Report 0219.</tech>
<institution>Yale University, Computer Science Dept., Research</institution>
<marker>40f, 1982</marker>
<rawString>40f, M. (1982). In:Depth Uodmrstandiog. 8 Computer &amp;Wel of Integrated erocessing for Naratixe COMpreb2051411. Yale University, Computer Science Dept., Research Report 0219.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L R Harris</author>
</authors>
<title>Experience with ROBOT in 12 commercial natural language data base query applications. eroceedingS</title>
<date>1979</date>
<booktitle>Of the Oth International Joint Conference on artificial Intelligence.</booktitle>
<marker>Harris, 1979</marker>
<rawString>Harris, L. R. (1979). Experience with ROBOT in 12 commercial natural language data base query applications. eroceedingS Of the Oth International Joint Conference on artificial Intelligence.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G G Hendrix</author>
</authors>
<title>LIFER: A natural language interface facility.</title>
<date>1976</date>
<journal>SR/ Tech. Note</journal>
<volume>136</volume>
<marker>Hendrix, 1976</marker>
<rawString>Hendrix, G. G. (1976). LIFER: A natural language interface facility. SR/ Tech. Note 136. Dec. 1976.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W Lehnert</author>
</authors>
<title>Me er4COSS of Question answering. Lawrence Erlbaum Associates,</title>
<date>1978</date>
<location>Hillsdale, New Jersey.</location>
<contexts>
<context position="3728" citStr="Lehnert 1978" startWordPosition="581" endWordPosition="582">dge and neither should a natural language front end. If, however, a natural language system cannot achieve the level of performance of a programmer-technician it will seem stupid because it does not meet a user&apos;s expectations for an English understanding system. The &apos;programmer-technician criterion&apos; cannot possibly be met by a domain-independent natural language access system because language understanding requires domain-specific world knowledge. On a theoretical level, the need for a knowledge base in a natural language processing system has been well-documented (e.g. Schank &amp; Abelson 1977; Lehnert 1978; Dyer 1982). It will be argued below that in an applied context, a system that does not have a conceptual knowledge base can produce at best only a shallow level of understanding and one that does not meet the criterion specified above. Further, the domain-independent approach creates a host of problems that are simply non-existent in knowledge-based systems. Eroblems ter domain:independent systems; inference. ambiguity; and anaphora. Inferential processing is an integral part of natural language understanding. Consider the following requests from PEARL (Lehnert and Shwartz 1982; Shwartz 1982</context>
</contexts>
<marker>Lehnert, 1978</marker>
<rawString>Lehnert, W. (1978). Me er4COSS of Question answering. Lawrence Erlbaum Associates, Hillsdale, New Jersey.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W Lehnert</author>
<author>S Shwartz</author>
</authors>
<title>Natural Language Data Base Access with Pearl.</title>
<date>1982</date>
<booktitle>eactledlogs of the Ninth International Conference on Computational Linguistics.</booktitle>
<location>Prague, Czechoslovakia.</location>
<contexts>
<context position="4314" citStr="Lehnert and Shwartz 1982" startWordPosition="669" endWordPosition="672">g. Schank &amp; Abelson 1977; Lehnert 1978; Dyer 1982). It will be argued below that in an applied context, a system that does not have a conceptual knowledge base can produce at best only a shallow level of understanding and one that does not meet the criterion specified above. Further, the domain-independent approach creates a host of problems that are simply non-existent in knowledge-based systems. Eroblems ter domain:independent systems; inference. ambiguity; and anaphora. Inferential processing is an integral part of natural language understanding. Consider the following requests from PEARL (Lehnert and Shwartz 1982; Shwartz 1982) when it operates in the domain of geological map generation: 60 Show me all oil Show me all oil (6) Show me all oil (6) Show me all oil wells from 1970 to 1980. wells from 6000 to 7000. wells 1 to 2000. wells 40 to 41, 80 to 81. that salaries are associated with people, so retirement plans and offices are never considered as possible referents. Again, domain-specific world knowledge is helpful in understanding these requests. A programmer-technician in the petrochemical industry would infer that (3) refers to drilling dates, (4) refers to well depth, (6) refers to the map scale</context>
</contexts>
<marker>Lehnert, Shwartz, 1982</marker>
<rawString>Lehnert, W. and Shwartz, S. (1982). Natural Language Data Base Access with Pearl. eactledlogs of the Ninth International Conference on Computational Linguistics. Prague, Czechoslovakia.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E D Secerdoti</author>
</authors>
<title>A LADDER user&apos;s guide.</title>
<date>1978</date>
<tech>Technical Note 163. SRI Project 6891.</tech>
<marker>Secerdoti, 1978</marker>
<rawString>Secerdoti, E. D. (1978). A LADDER user&apos;s guide. Technical Note 163. SRI Project 6891.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R C Schenk</author>
<author>R Abelson</author>
</authors>
<title>Scripts. Elena. Goals and Understanding- Lawrence Erlbaum Associates, Hillsdale Nm&apos;</title>
<date>1977</date>
<location>Jersey,</location>
<marker>Schenk, Abelson, 1977</marker>
<rawString>Schenk, R. C. and Abelson, R. (1977). Scripts. Elena. Goals and Understanding- Lawrence Erlbaum Associates, Hillsdale Nm&apos; Jersey, 1977.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Shwertz</author>
</authors>
<title>PEARL: A Natural Language Analysis System for Information Retrieval (submitted to AAAI-82/applications division).</title>
<date>1982</date>
<marker>Shwertz, 1982</marker>
<rawString>Shwertz, S. (1982). PEARL: A Natural Language Analysis System for Information Retrieval (submitted to AAAI-82/applications division).</rawString>
</citation>
<citation valid="true">
<authors>
<author>D L Waltz</author>
<author>T Finin</author>
<author>F Green</author>
<author>F Conrad</author>
<author>Goodman</author>
</authors>
<title>The planes system: natural language access to a large data base.</title>
<date>1976</date>
<tech>Tech. Report 7-34,</tech>
<institution>Coordinated Science Lab., Univ. of Illinois, Urbana,</institution>
<marker>Waltz, Finin, Green, Conrad, Goodman, 1976</marker>
<rawString>Waltz, D. L., Finin, T., Green, F., Conrad, F., Goodman, 8., Hadden, G. (1976). The planes system: natural language access to a large data base. Coordinated Science Lab., Univ. of Illinois, Urbana, Tech. Report 7-34, (July 1976).</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>