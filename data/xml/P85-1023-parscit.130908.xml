<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000018">
<note confidence="0.747434">
ANALYSIS OF CONJUNCTIONS IN A RULE-BASED PARSER
</note>
<author confidence="0.302731333333333">
Leonardo Lesmo and Pietro Tbrasso
Dipartimento di Informatica - Universita&apos; di Tbrino
Via Velperga Caluso 37 - 10125 Terino (ITALY)
</author>
<sectionHeader confidence="0.531575" genericHeader="abstract">
ABSTRACT
</sectionHeader>
<bodyText confidence="0.999985647058824">
The aim of the present paper is to show how a
rule-based parser for the Italian Language has been
extended to analyze sentences involving conjunc-
tions. The most noticeable fact is the ease with
Which the required modifications fit in the previ-
ous parser structure. In particular, the rules
written for analyzing simple sentences (without
conjunctions) needed only small changes. On the
contrary, more substantial changes were made to the
exception-handling rules (called &amp;quot;natural changes&amp;quot;)
that are used to restructure the tree in case of
failure of a syntactic hypothesis. The parser
described in the present work constitutes the syn-
tactic ccmponent of the FI DO system (a Flexible
Interface for Database Operations), an interface
allowing an end-user to access a relational data-
base in natural language (Italian).
</bodyText>
<sectionHeader confidence="0.993876" genericHeader="introduction">
INTRODUCTION
</sectionHeader>
<bodyText confidence="0.999966701298702">
It is not our intention to present here a
comprehensive overview of the previous work on
coordination, but just to describe a couple of
recent studies on this topic and to specify the
main differences between them and our approach.
It must be noticed, however, that both systems
that will be discussed use a logic grammar as their
basic framework, so that we will try to make the
comparison picking out the basic principles for the
manipulation of conjunctions, and disregarding the
more fundamental differences concerning the global
system design. It is also worth pointing out that,
although the present section is admittedly mean-
pieta, most of the systems for the automatic
analysis of natural language do not describe the
methods adopted for the interpretation of sentences
containing conjunctions in great detail. There-
fore, it is reasonable to assume that in many of
these systems the conjunctions are handled only by
means of specific neuristic mechanisms.
A noticeable exception is the SYSCONJ facility
of the LUNAR system (Moods, 1973): in this case,
The research project described in this paper has
partially been supported by the Ministero della
Pubblica Istruzione of Italy, MPI 40% Lntelligenza
Artificiale.
the conjunctions are handled by means of a pare-
syntactic mechanism that enables the parser to
analyze the second conjunct assuming that it has a
structure dependent on the hypothesized first con-
junct. The main drawback of this approach is that
the top-down bias of the ATMs does not allow the
system to take advantage of the actual structure of
the second conjunct to hypothesize its role. In
other words, the analysis of the second conjunct
acts as a confirmation rrechanism for the hypothesis
made on the sole basis of the position where the
conjunction has been bound. Consequently, all the
various possibilities (of increasing levels of com-
plexity) must be analyzed until a match is found,
which involves an apparent waste of computational
resources.
The solution proposed in the first of the :740
systems we will be discussing here is quite simi-
lar. It is based on Modifier Structure Grammars
(MSG), a logic formalism introduced in (Dahl &amp;
McCord, 1983), which constitutes an extension of
the Extraposition Grammar by F. Pereira (1981).
The conjunctions are analyzed by means of a special
operator, a &amp;quot;demon&amp;quot;, that deals with the two prob-
lems that occur in coordination: the first conjunct
can be &amp;quot;interrupted&amp;quot; in an incomplete status by the
occurrence of the conjunction (this is not foresee-
able at the beginning of the analysis) and the
second conjunct must be analyzed taking into
account the previous interruption point (and in
this case, mainly because the second conjunct may
assume a greater number of forms, some degree of
top-down hypothesization is required).
The first problem is solved by the &amp;quot;backup&amp;quot;
procedure, which forces the satisfaction (or &amp;quot;clo-
sure&amp;quot; in our terms) of one or more of the (incom-
plete) nodes appearing in the so-called &amp;quot;parent&amp;quot;
stack. The choice of the node to which the second
conjunct must be attached makes the system
hypothesize (ids in SYSCONJ) the syntactic category
of the second conjunct and the analysis can proceed
Oa previous, inconplete constituent would be saved
in a parallel structure, called &amp;quot;merge stack&amp;quot; that
would be used subsequently to complete the
interpretation of the first conjunct).
Apart from the considerable power offered by
MSGA for semantic interpretation, it is not quite
clear why this approach represents an advance with
respect to Wbods&apos; approach. Even though the
analysis times reported in the appendix of (Dahl &amp;
McCord, 1983) are very Lew, the top-down bias of
</bodyText>
<page confidence="0.994785">
180
</page>
<bodyText confidence="0.999966220779222">
MSG&apos;s produces the same problems as ATNS do. The
&amp;quot;backup&amp;quot; procedure, in fact, chooses blindly among
the alternatives present in the parent stack (this
problem is mentioned by the authors). A final com-
ment concerns the analysis of the second conjunct:
since the basic grammar aims at describing &amp;quot;normal&amp;quot;
English clauses, it seems that the system has some
trouble with sentences involving &amp;quot;gapping&amp;quot; (see the
third section). In fact, while an elliptical sub-
ject can be handled by the hypothesization, as
second conjunct, of a verb phrase (this is the
equivalent of treating the situation as a single
sentence involving a single subject and two
actions, and not as two coordinated sentences, the
second of which has an elliptical subject; it seems
a perfectly acceptable choice), the same mechanism
cannot be used to handle sentences with an ellipti-
cal verb in the second conjunct.
The Last system we discuss in this section has
been described in (Huang, 1984). Though it is
based, as the previous one is, on a logic grammar,
it starts from a quite different assumption: the
grammar deals explicitly with conjunctions in its
rules. It does not need any extra-grammatical
mechanisms but the positions where a particular
constituent can be erased by the ellipsis have to
be indicated in the rules. Even though the effort
of reconstructing the complete structure (i.e. of
recovering the elliptical fragment) is mainly left
to the unification mechanism of PROLOG, the design
of the grammar is rendered somewhat more complex.
The fragment of grammar reported in (Huang,
1984) gives the impression of a set of rules
&amp;quot;flatter&amp;quot; than the ones that normally appear in
standard grammars (this is not a negative aspect;
it is a feature of the As too). The &amp;quot;sentence&amp;quot;
structure comprises a NP (the subject, which may be
elliptical), an adverbial phrase, a verb (which
also may be elliptical), a restverb (for handling
possible previous auxiliares) and a rest-sentence
component. We can justify our previous comment on
the increased effort in grammar development by not-
ing that two different predicates had to be defined
to account for the normal complements and the
structure that Huang calls &amp;quot;reduced conjunction&amp;quot;,
see example (13) in the third section. MOreover, it
seems that a recovery procedure deeply embedded
within the language interpreter reduces the flexi-
bility of the design. It is difficult to realize
how far this problem could affect the analysis of
more complex sentences (space oontraints limited the
size of the grammar reported in the paper voted),
but, for instance, the explicit assumption that the
absence of the subject makes the system retrieve it
from a previous conjunct, seems boo strong. Disre-
garding languages where the subject is not always
required (as it is the case for Italian), in
English a sentence of the Dorm &amp;quot;GO home and stay
there till I call you&amp;quot; could give the parser some
trouble.
In the following lAe will describe an approach
that overcomes some of the problems mentioned
above. The parser that will be introduced consti-
tutes the syntactic component of the FIDO system (a
Flexible Interface for Database Operations), which
is a prototype allowing an end-user to interact in
natural language (Italian) with a relational data
base. The query facility has been fully implemented
in FRANZ LISP on a VAX-780 computer. The update
operations are currently under study. The various
components of the system have been described in a
series of papers which will be referenced within
the following sections. The system includes also an
optimization component that converts the query
expressed at a conceptual level into an efficient
logical-level query (Lesmo, Siklossy &amp; Tbrasso,
1985).
</bodyText>
<sectionHeader confidence="0.942282" genericHeader="method">
OVERALL ORGANIZATION OF THE PARSER
</sectionHeader>
<bodyText confidence="0.99986578">
In this section we overview the principles
that lie at the root of the syntactic analysis in
FIDO. We try to focus the discussion on the issues
that guided the design of the parser, rather than
giving all the details about its current implemen-
tation. We hope that this approach will enable the
reader to realize why the system is so easily
extendible. For a more detailed presentation, see
(Lesmo &amp; Tbrasso, 1983 and Lasmo &amp; Torasso, 1984).
The first issue concerns the interactions
between the concept of &amp;quot;structured representation
of a sentence&amp;quot; and &amp;quot;status of the analysis&amp;quot;. These
two concepts have usually been considered as dis-
tinct: in ATNs, to consider a well-known example,
the parse tree is held in a register, but the glo-
bal status of the parsing process also includes the
contents of the other registers, a set of states
identifying the current position in the various
transition networks, and a stack containing the
data on the previous choice points. In logic gram-
mars (Definite Clause Grammars (Pereira &amp; Warren,
1980), Extraposition Grammars (Pereira, 1981),
Modifier Structure Grammars (Dahl &amp; McCord, 1983))
this book-keeping need not be completely explicit,
but the interpreter of the language (usually a
dialect of PR)LOG) has to keep track of the binding
of the variables, of the clauses that have not been
used (but could be used in case of failure of the
current path), and so on. On the contrary, we
tried to organize the parser in such a way that the
two concepts mentioned above coincide: the portion
of the tree that has been built so far &amp;quot;is&amp;quot; the
status of the analysis. The implicit assumption is
that the parser, in order to go on with the
analysis does not need to know how the tree was
built (what rules have been applied, what alterna-
tives there were), but just what the result of the
previous processing steps is 4.
Of course, this assumption implies that all infor-
mation present in the input sentence must also be
we must confess that this assumption has not been
pushed to its extreme consequences. In some cases
(see (Lesmo &amp; Tbrasso, 1983) for a more detailed
discussion) the backtracking mechanism is still
needed, but, although we are not unable to pro-
vide experimental evidence, we believe that it
could be substituted by diagnostic procedures of
the type discussed, with different purposes and
within a different formalism, in (weischedel &amp;
Black, 1980).
</bodyText>
<page confidence="0.997545">
181
</page>
<bodyText confidence="0.999845698412699">
present in its structured representation; actually,
what happens is that new pieces of information,
Which were implicit in the &amp;quot;linear&amp;quot; input form, are
made explicit in the result of the analysis. These
pieces of information are extracted using the syn-
tactic knowledge bow the constituents are struc-
tured) and the lexical knowledge (inflectional
data).
The main advantage of such an approach is that
the whole interpretation process is centered around
a single structure: the dependency structure of the
constituents composing the sentence. This enhances
the modularity of the system: the mutual indepen-
dence of the various knowledge sources can be
stated clearly, at least as regards the pieces of
knowledge contained in each of them; on the con-
trary, the control flow can be designed in such a
way that all knowledge sources contribute, by
cooperating in a more or Less synchronized way, to
the overall goal of comprehension (see fig.1).
A side-effect of the independence of knowledge
sources mentioned above is that there is no strict
coupling between syntactic analysis and semantic
interpretation, contrarily to what happens, for
instance, in Augmented Phrase Structure Grammars
(Robinson, 1982). This means that there is no one-
bo-one association between syntactic and semantic
rules, a further advantage if we succeed in making
the structured representation of the sentence rea-
sonably uniform. This result has been achieved by
distinguishing between &amp;quot;syntactic categories&amp;quot;,
which are used in the syntactic rules to build the
tree, and &amp;quot;node types&amp;quot;, whose instantiations are
the elements the tree is built of Since the number
of syntactic categories (and of syntactic rules) is
considerably Larger than the number of node types
(6 node types, 22 syntactic categories, 61 rules),
then some general constraints and interpretation
rules may be expressed in a more compact form.
Without entering into a discussion on semantic
interpretation, we can give an example using the
rules that validate the tree from a syntactic point
of view (SYNTACTIC RULES 2 in fig. 1). One of these
rules specifies that the subject and the verb of
the sentence must agree in number. On the other
hand, the subject can be a noun, a pronoun, an
interrogative pronoun, a relative pronoun: each of
them is associated with a different syntactic
category, but all of them will finally be stored in
a node of type REF (standing for REFerent);
independently of the category, a single rule is
used to specify the agreement constraint mentioned
above.
Let us now have a look at the box in fig.1
labelled &amp;quot;SYNTACTIC RULES 1: EXTENDING THE TREE&amp;quot;.
2Six node types have been introduced (each node is
actually a complex data structure): REL (RELa-
tions, mainly verbs), REF (REFerents, nouns, pro-
nouns, etc.), CONN (CONNectors, e.g. preposi-
tions), DET (DETerminers), ADJ (ADJectives), and
MOD (M0Difiers, mainly adverbs). Beyond these six
types, a special node (TOP) has been included to
identify the main verb(s) of the sentence.
</bodyText>
<listItem confidence="0.8699095">
Fig.1: A single structure is the basis of the
whole interpretation process.
</listItem>
<bodyText confidence="0.991825666666667">
The rules that are logically contained in that box
are the primary tool for performing the syntactic
analysis of a sentence. Each of them has the form:
</bodyText>
<equation confidence="0.794348">
PRECCNDrTICN ---&gt; ACTION
</equation>
<bodyText confidence="0.999945222222222">
where PRECONCaTICN is a boolean expression whose
terms are elementary conditions; their predicates
allow the system to inspect the current status of
the analysis, i.e. the tree (for instance: That is
the type of the current node?&amp;quot;, &amp;quot;Is there an empty
node of type X?&amp;quot;); a look-ahead can also be
included in the preconditions (maximum 2 words).
The right-hand side of a rule (ACTION) consists in
a sequence of operations; there are two operators:
</bodyText>
<sectionHeader confidence="0.674581" genericHeader="method">
CRLINK (X,Y)
</sectionHeader>
<bodyText confidence="0.99775275">
which creates a new instance of the type X and
links it to the nearest node of type Y existing in
the rightmost path of the tree (and moving only
upwards)
</bodyText>
<sectionHeader confidence="0.585159" genericHeader="method">
FILL (X,V)
</sectionHeader>
<bodyText confidence="0.99993845">
which fills the nearest node (see above) of type X
with the value V (which in most cases coincides
with the Lexical data about the current input
word).
The rules are grouped in packets, each of
which is associated with a lexical category. It is
worth noting that the choice of the rule to fire is
non-deterministic, since different rules can be
executed at a given stage. On the other hand, the
non-determinism has been reduced by making the
preconditions of the rules belonging to the same
packet mutually exclusive; consequently, the status
is saved on the stack only (but not always) if the
input word is syntactically ambiguous. Note that
nothing prevents there being exceptions to this
rule. For example, in English the past indicative
and the past participle usually have the same form:
in this case, two different rules of the VERB
packet could be activated if the context allows for
both interpretations.
</bodyText>
<figure confidence="0.996823379310345">
SYNTACTIC
RULES I:
EXTENDING
THE TREE
SYNTACTIC
RULES 2:
VALIDATING
THE TREE
(WEAK)
NATURAL
CHANGES:
RESHAPING
THE TREE
SEMANTIC
KNOWLEDGE 1:
VALIDATING
THE TREE
(STRONG)
SEMANTIC
KNOWLEDGE 2:
ANNOTATING
THE TREE
ANAPHORA
RESOLUTION:
DISAMBIGUATING
THE TREE
THE
STRUCTURED
REPRESENTATION
</figure>
<page confidence="0.98065">
182
</page>
<bodyText confidence="0.999958846153846">
Currently, the syntactic categories of an
aMbiguous word are ordered manually in the Lexicon;
since the &amp;quot;first&amp;quot; rule is determined by that order,
the selection of the rule to execute depends only
on the choices made by the designer of the lexicon.
Some experirents been made to include a
weighting mechanism, which should depend both on
the syntactic context and on the semantic knowledge
(Lesmo &amp; Tbrasso, 1985).
A second &amp;quot;syntactic&amp;quot; box appears in fig.l. It
refers to rules that are, in a sense, weaker than
the rules of the set discussed above. The rules of
the first set are aimed at defining acceptable syn-
tactic structures, where &amp;quot;acceptable&amp;quot; is used to
mean that the resulting structure is semantically
interpretable (for instance, a determiner cannot be
used to modify an adjective). On the contrary, the
rules of the second set specify which of the mean-
ingful sentences are well formed; in particular,
they are used to check gender and number agreement
and the ordering of constituents (e.g. the fact
that in English an adjective should occur before
the noun it refers to, whereas this is not always
the case in Italian). The separation between the
rules of the two sets is the feature that makes the
system robust from a syntactic point of view (see
(Le smo &amp; Tbrasso, 1984) for further details).
It may be noticed that, in fig.1, both the
second set of syntactic rules we have just dis-
cussed and a part of the semantic knowledge have
the purpose of &amp;quot;validating the tree&amp;quot;. Independently
of the fact that the second-level syntactic con-
straints can be broken (they are &amp;quot;weak&amp;quot; con-
straints), whilst the semantic constraints can not
(they are &amp;quot;strong&amp;quot; constraints), some action must
be performed when the structure hypothesized by the
first-level rules does not match those constraints.
The task of the rules called &amp;quot;natural changes&amp;quot; (see
fig.1) is to restructure the tree in order to pro-
vide the parser with a new, &amp;quot;correct&amp;quot; structure. We
will not go into further details here, since the
natural changes (in particular the one concerning
the treatment of conjunctions) will be discussed in
a following section; however, in order to give a
complete picture of the behavior of the parser, we
must point out that the natural changes can fail
(no correct structure can be built). In this case,
the parser returns to the original structure and
issues a warning message, if the trigger of the
natural changes was a weak constraint; otherwise
(semantic failure) it backtracks to a previous
choice point.
</bodyText>
<sectionHeader confidence="0.995126" genericHeader="method">
ANALYSIS OF CONJUNCTIONS
</sectionHeader>
<bodyText confidence="0.999525625">
Before starting the description of the mechan-
isms adopted to analyze conjunctions, it is worth
noting that the analysis of conjunctions was
already mentioned in a previous paper (Lesmo &amp;
&apos;repress°, 1984). The present paper represents an
advance with respect to the referenced one in that
some new solutions have been adopted, which greatly
enhance the homogeneity of the parsing process (not
to mention the fact that the behavior of the parser
was treated very sketchily in the previous paper).
The presentation of the solution we adopted is
based on the classification of sentences containing
conjunctions reported in (Kiang, 1984): we will
start from the simpler cases and introduce the more
complex examples later. A last remark concerns the
language: as stated above, the FI DO system works on
Italian; in order to enhance the readability of the
paper, we present English examples. Actually, we
are doing some experiments using a restricted
English grammar, but it must be clear that the
facilities that will be described are fully imple-
mented only for the Italian grammar (the cases
where Italian behaves differently from English will
be pointed out during the presentation).
As for all other syntactic categories, the
category &amp;quot;conjunction&amp;quot; also has an associated set
of rules: the set contains a single, very simple
rule: it saves the conjunction in a global regis-
ter, which is available during the subsequent
stages of processing. The simplest case of conjunc-
tion is the one referred to in (Huang, 1984) as
&amp;quot;unit interpretation&amp;quot;:
</bodyText>
<listItem confidence="0.725165">
(1) Bob net Sue and Mary in London
</listItem>
<bodyText confidence="0.976384225">
Normally, the rules associated with nouns
hypothesize the attachment of a newly created REF
node to a connector that (if it does not already
exist) is, in turn, created and attached to the
nearest node of type REL above the current node (or
to the current node itself if it is of type REL).
After the analysis of &amp;quot;Bob met&amp;quot;, the situation of
the parse tree would be as in fig.2.a (and REL1 is
the current node). The analysis of &amp;quot;Sue&amp;quot; would pro-
duce the tree of fig.2.b. The noun rules have been
changed to allow for the attachment of more than
one noun to the same connector (should a conjunc-
tion be present in the register). In fig.2.c, the
tree built after the analysis of sentence (1) is
reported.
It must be noted that the most comwon example
of natural change (the one called MOVEN) is also
useful when a conjunction is present. Consider,
for instance, the sentence:
(2) John saw the boy you told the story and the
girl you met yesterday
After the analysis of the fragment ending with
&amp;quot;story&amp;quot;, we get the tree of fig.3.a (and REF4 is
the current node). According to the previous
discussion, the noun &amp;quot;girl&amp;quot; would be stored in a
REF node attached to CONN4. On the other hand, the
semantics would reject this hypothesis, since the
case frame (TO TELL: SUBJ/PERSON; DIROBJ/PERSON;
INDOBJ/PEBSON) is not acceptable. The portion of
the tree representing &amp;quot;and the girl&amp;quot; would be
&amp;quot;moved up&amp;quot; and attached to CONN2, thus yielding the
tree of fig.3.b (that would be expanded subse-
quently, by attaching the relative clause &amp;quot;you met
yesterday&amp;quot; to REFS).
Unlike what happens in the previous cases, a
new rule had to be added to account for the other
types of conjunctions. This rule is a new natural
change, that the system executes when the conjunc-
tion implies the existence of a new clause in the
sentence. The need for such a rule is clear if we
</bodyText>
<page confidence="0.998956">
183
</page>
<sectionHeader confidence="0.747917" genericHeader="method">
BOB IN
</sectionHeader>
<bodyText confidence="0.996242357142857">
Fig.2 - Different phases of the interpretation of
the sentence &amp;quot;Bob met Sue and Mary in
London&amp;quot;.
H means &amp;quot;head&amp;quot; and indicates the position
of the node filler within the sequence of
dependent structures.
UNM means &amp;quot;Unmarked&amp;quot; and indicates that
the corresponding verb case is not marked
by a preposition
Fig.3 - Two phases in the analysis of the sentence
&amp;quot;John saw the boy you told the story and
the girl you met yesterday&amp;quot; (the subtree
relative to &amp;quot;you met yesterday&amp;quot; is not
shown).
</bodyText>
<figure confidence="0.999312850574713">
AEU
TO MEET
CONN.!
UN M
REF&amp;
TOP
CONN1
1225111
ReFd
11
I NI
REI04
LONDON IH
REL1
ITO HCETI;
uN M
REF2
1-1
CONN
UNM
Ren
QB
SUE I&apos;.4]
C.ON.J4
CowN.3
TOP
REL1
11
nmn
TO SEE
DeTd
ReL2.
ri
(I NM
NM
ONM
REPZ
STORY
Fler3
YOU
E
DETd
RELZ
COWN.3
CONNZ,
U
11 U N M 11
REF4
REF3
YOU
nm
STORY
CoNNI
RE
JOHN
CONN2
1N P1
REF2
BOY
TH
TO TELL
11131111
THE
TO TELL
111211
TH
TOP
ro SEE
UN M
11
REF2
REFS
nr:1
cIL
Soy
ci
Ii
nein
CONN2
n AND III
IIDII
CONN(
UNM
REFd
TON N
OST2
THE
</figure>
<bodyText confidence="0.9952690625">
consider one of the basic assumptions of the
parser. In a sense, the parser knows that it has to
parse a sentence because, before starting the
analysis, the tree is initialized by the creation
of an empty REL node. Analogously, when a relative
pronoun is baund, the relative clause is &amp;quot;initial-
ized&amp;quot; via the creation of a new empty REL node and
its attachment to the REF node which the relative
clause is supposed to refer to. The only exception
to this rule is represented by gerunds and partici-
ples, which are handled by means of explicit
preconditions in the VERB rule set. Of course,
this can give rise to ambiguities when the past
indicative and the past participle have the same
form, as in the well known garden path:
(3) The horse raced past the barn fell
</bodyText>
<subsubsectionHeader confidence="0.448411">
CONN2
</subsubsectionHeader>
<bodyText confidence="0.9996719">
In the case of sentence (3), the choice of the
indicative tense would be made, and the past parti-
ciple rule would be saved to allow for a possible
backtracking in a subsequent phase, as would actu-
ally occur to example (3) (we must note here that
such an ambiguity does not occur in Italian). A
further comment concerns the relative clauses with
the deleted relative pronouns (as in (2) above):
this phenanenon does not occur in Italian either;
we believe that it could be handled by means of a
</bodyText>
<page confidence="0.997298">
184
</page>
<bodyText confidence="0.97115125">
natural change very similar to the one described
below.
An even more interesting example is provided
by the following sentence:
We can now turn back to the problem of con-
junctions. Let&apos;s consider first a sentence where
the right conjunct is a complete phrase.
(4) Bob net Sue and Mary kissed her
After the analysis of the sentence as far as
&amp;quot;Mary&amp;quot;, the structure of the tree would be as in
fig.2.c (apart from the subtree referring to &amp;quot;in
London&amp;quot;). When &amp;quot;kissed&amp;quot; is Bound, no empty REL
node exists to accomodate it, thus the natural
changes are triggered and, because of the precondi-
tions, the new one (called ENIMMZI= is executed.
It operates according to the following steps:
</bodyText>
<listItem confidence="0.8832054">
1) A conjunction is looked for in the right subtree
2) It is detached together with the structure fol-
lowing it
3) The conjunction is inserted in the node above
the first REL that is Bound going up in the
hierarchy (in fig.2.c, starting from CONN2 and
going upwards, we find REL1 and the node above
it is TOP)
4) A new empty REL is created and attached to the
node found in step 3
</listItem>
<bodyText confidence="0.982714590909091">
5) The structure detached in step 2 is attached to
the new REL, inserting, when needed, a connec-
tor.
The execution of INSERTREL in the case of example
(4) produces the structure depicted in fig. 4, that
is completed subsequently, by inserting &amp;quot;TO KISS&amp;quot;
in REL2 and by creating the branch for &amp;quot;her&amp;quot; in the
usual way.
TWo more complex examples Show that the abil-
ity of the parser to analyze conjunctions is not
limited to main clauses:
(5) Henry heard the story that John bold Mary and
Bob bold Ann
With regard to sentence (5), we can see the
result of the analysis of the portion ending with
&amp;quot;Bob&amp;quot; in fig. 5.a. It Is apparent that the execution
of the steps described above causes the insertion
of a new REL node at the same level of REL2 and
attached to REF2; this seems intuitively acceptable
and provides FIDO with a structure consistent with
the compositive semantics adopted to obtain the
formal query (Lesmo, Siklossy &amp; Tbrasso, 1983).
</bodyText>
<subsectionHeader confidence="0.856533">
Fig.4 - Partial structure built during the
analysis of the sentence &amp;quot;Bob met
Sue and Mary kissed her&amp;quot;.
</subsectionHeader>
<bodyText confidence="0.968004190476191">
(6) Henry heard the story John bald Mary and Bob
bald Ann his opinion
where the INSERTREL and MOVEUP cooperate in build-
ing the right tree. What happens is as follows:
after the execution of INSEMEL (in the way
described above) &amp;quot;his opinion&amp;quot; is attached to REL3.
The selection restrictions are not respected
because four unmarked cases are present for the
verb &amp;quot;to tell&amp;quot; (including the elliptical relative
pronoun extracted from the first conjunct), so the
smallest right subtree (&amp;quot;his opinion&amp;quot;) is moved up
and attached to RELl; again, the hypothesis is
rejected (three unmarked cases for &amp;quot;to hear&amp;quot;). The
tree returns to the original status and MOVEUP is
tried again on a larger subtree (the one headed by
REL3). Since a conjunction is found in the node
Above REL3, it is moved too and the analysis
finally succeeds.
The last type of sentences that we will con-
sider involves gapping. An example of clause-
internal ellipsis is:
</bodyText>
<sectionHeader confidence="0.667944" genericHeader="method">
(7) I played football and John tennis.
</sectionHeader>
<bodyText confidence="0.979847705882353">
When the name &amp;quot;john&amp;quot; is encountered, a unit
interpretation is attempted (&amp;quot;football and John &amp;quot;)
and it is rejected for obvious reasons. The only
alternative left to the parser is the execution of
INSERTREL, which, working in the usual way, allows
the parser to build up the right interpretation.
NOte that an empty node is left after the
analysis of the sentence is completed, which is not
done in the examples described above. This is han-
dled by non-syntactic routines that build up the
semantic interpretation of the sentence (formal
query construction in FIDO). However the actual
verb is made available as soon as possible, because
the interpretation routines do not wait until the
analysis of the oommand is finished before begin-
ning their work.
As the reader will see from the following
examples, no trouble is caused for the parser by
the other kinds of gapping:
- left-peripheral ellipsis with two NP-remnants.
For example:
(8) Max gave a nickel to Sally and a dime to
Harvey
(unit interpretation &amp;quot;to Sally and a dime&amp;quot;
attempted and rejected; INSERTREL executed; the
semantic routines also have to -recover the
elliptical subject).
left-peripheral ellipsis with one NP remnant and
some non-NP remnant (s). For example:
(9) Bob net Sue in Paris and Mary in London
(exactly the same case as (8); the parser makes
no distiction between NPs and non-NPs)
Right peripheral ellipsis concomitant with clause
internal ellipsis. For example:
</bodyText>
<page confidence="0.985867">
185
</page>
<figure confidence="0.998139269230769">
REFI
REF1
(b)
ANO
STORY
It I I 1
HENRY
pert 0
einem
REL2
TO TELL
FieLl
To TELL
N M
UIJM VI
UN M
rs
REFS&amp;quot;
MARY
THAT
REF?
ANN
ACP4
TON I.)
AGMS
(10) jack asked Elsie to dance and Wilfred Phoebe
</figure>
<bodyText confidence="0.98011225">
(same processing as before; more complex semantic
recovery of lacking constituents is necessary).
Not very different is the case where &amp;quot;the right
conjunct is a verb phrase to be treated as a clause
with the subject deleted&amp;quot;. As an example consider
the following sentence:
(11) The man kicked the child and threw the ball.
In this case, the search for an empty REL node
fails in the usual way and INSERTREL is executed as
discussed above, except that the conjunction is
still in the register and no structure follows it,
so that the steps 1,2, and 5 are skipped.
</bodyText>
<figure confidence="0.7808871">
Finally, the &amp;quot;Right NOde Raising&amp;quot;, exemplified
by:
(12) The man kicked and threw the ball.
The problem here is that the Left conjunct is not a
complete sentence. However, the syntactic rules
REL1
ro NEAR
-ro P
ri
nein
</figure>
<bodyText confidence="0.996401727272727">
have no troubles in analyzing it; it is a task of
semantics to decide whether &amp;quot;the man kicked&amp;quot; can be
accepted or not. In other words, &amp;quot;the ball&amp;quot; could
be considered as an elliptical object in the first
clause; although the procedures for ellipsis reso-
lution are unable, at the present stage of develop-
ment, to handle such a case, it is not difficult to
imagine how they could be extended.
To close this section, two cases must be men-
tioned that the parser is unable to analyse
correctly. In sentence (13)
(13) John drove his car through and completely
demolished a plate glass window
a preposition (through) has no NP attached to it.
The problem here is very similar to that of &amp;quot;dan-
gling prepositions&amp;quot; (and, like the latter, it does
not occur in Italian). A simple change in the syn-
tax would allow a CONN node to be Left without any
dependent REF. Less simple would be the changes
necessary in the anaphora procedures to allow them
to reconstruct the meaning of the sentence (the
difficulty here is similar to the &amp;quot;Right Node Rais-
</bodyText>
<figure confidence="0.983996090909091">
LTHE I
CONN/
UN M
REF/
HENRY
OCT/
CONNI
UN M
REFZ
5TO RY
REL.2
TO TELL!)
IH
Gomm!
GOWN?.
TOP
TO HEAR
ii
nein
L. &apos;NM
rm
UN fl
com.3
UN M
cOwo4S
CONNiS
uNri
COMAIP
CONA14
(a)
THE
B00 14
ing&amp;quot; discussed above).
</figure>
<bodyText confidence="0.995795">
in the paper enlight some of the advantages that a
rule-based approach to parsing has with respect to
the classical grammar-based ones.
The last problematic case is concerned with
multi-level gappings, as in the following example:
(14) Max wants to try to begin to write a novel and
Alex a play.
In this case, the insertion of an empty REL node to
account for the second conjunct (&amp;quot;Alex a play&amp;quot;)
does not allow the parser to build a structure that
corresponds to the one erased by the ellipsis. We
have not gone deeply into this problem, which,
unlike the preceding ones, also occurs in Italian.
HOwever, it seems that, also in this case, the
increased power of the procedures handling ellipti-
cal fragments could provide some reasonable solu-
tions without requiring substantial changes to the
presented approach to parsing.
</bodyText>
<sectionHeader confidence="0.996833" genericHeader="conclusions">
CONCIIJSIONS
</sectionHeader>
<bodyText confidence="0.999982827586207">
AS stated in the introduction, a proper treat-
ment of coordination involves the ability to inter-
rupt the analysis of the first conjunct when the
conjunction is found and the ability to analyze the
second conjunct taking into account what happened
before.
The system described in the paper deals with
the two problems by adopting a robust and modular
bottom-up approach. The first conjunct is extended
as far as possible using the incoming words and the
structure building syntactic rules. Its complete-
ness and/or acceptability is verified by means of
another set of rules that fit easily in the pro-
posed framework and do not affect the validity of
the other rules.
The second conjunct is analyzed using the same
standard set of structure building rules, plus an
exception-handling rule that accounts for the pres-
ence of a whole clause as second conjunct. The need
to take into account what happened before is satis-
fied by the availability of the portion of the tree
that has already been built and that can be
inspected by all the rules existing in the system.
The paper shows that the approach that has
been adopted enables the system to analyze
correctly most sentences involving conjunctions.
Although some cases are pointed out, where the
present implementation fails to analyze a correct
sentence, we believe that the solutions presented
</bodyText>
<sectionHeader confidence="0.998523" genericHeader="references">
REFERENCES
</sectionHeader>
<reference confidence="0.999631486486486">
V.Dahl, M.MCCord (1983): Treating Coordination in
Logic Grammars. AJCL 9, 69-91.
X.HUang (1984): Dealing with Conjunctions in a
Machine Translation Environment. Proc. COLING 84,
Stanford, 243-246.
L.Lesmo, L.Siklossy, P.TOrasso (1983): A TWo Level
Net for Integrating Selectional Restrictions and
Semantic Knowledge. Proc. IEEE Int. Conf. on Sys-
tems, Man and Cybernetics, India, 14-18.
L.Lesmo, L.Siklossy, P.TOrasso (1985): Semantic and
Pragmatic Processing in FIDO: a Flexible Interface
for Database Operations. Information Systems 10,
n.2.
L.Lesmo, P.TOrasso (1983): A Flexible Natural
Language Parser Based on a I\o-Level Representation
of Syntax. Proc. 1st Conf. ACL Europe, Pisa, 114-
121.
L.Lesmo, P.Torasso (1934): Interpreting Syntacti-
cally Ill-FOrmed Sentences. Proc. COLING 84, Stan-
ford, 534-539.
L.Lesmo, P.Tbrasso (1985): Weighted Interaction of
Syntax and Semantics in Natural Language Analysis.
9th IJCAI, Los Angeles.
F.Pereira (1981): Extraposition Grammars. AJOIL 7,
243-256.
F.Pereira, D.warren (1980): Definite Clause Gram-
mars for Language Analysis: A Survey of the Formal-
ism and a Comparison with Transition Networks.
Artificial Intelligence 13, 231-278.
J.J.Robinson (1982): DIAGRAM: A Grammar for Dialo-
gues. Comm. ACM 25, 27-47.
R.M.Weischedel, J.E.Black (1980): Responding Intel-
ligently to Unparsable Inputs. AJCL 6, 97-109.
w.A.Wtoods (1973): An Experimental Parsing System
for Transition Network Grammars. In R.Rustin (ed.):
Natural Language Processing, Algorithmics Press,
New York, 111-154.
</reference>
<page confidence="0.997926">
187
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.655847">
<title confidence="0.994663">ANALYSIS OF CONJUNCTIONS IN A RULE-BASED PARSER</title>
<author confidence="0.998771">Leonardo Lesmo</author>
<author confidence="0.998771">Pietro Tbrasso</author>
<affiliation confidence="0.966831">Dipartimento di Informatica - Universita&apos; di Tbrino</affiliation>
<address confidence="0.842743">Via Velperga Caluso 37 - 10125 Terino (ITALY)</address>
<abstract confidence="0.988150333333333">The aim of the present paper is to show how a rule-based parser for the Italian Language has been extended to analyze sentences involving conjunctions. The most noticeable fact is the ease with Which the required modifications fit in the previous parser structure. In particular, the rules written for analyzing simple sentences (without conjunctions) needed only small changes. On the contrary, more substantial changes were made to the exception-handling rules (called &amp;quot;natural changes&amp;quot;) that are used to restructure the tree in case of failure of a syntactic hypothesis. The parser described in the present work constitutes the syntactic ccmponent of the FI DO system (a Flexible Interface for Database Operations), an interface allowing an end-user to access a relational database in natural language (Italian).</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>M MCCord V Dahl</author>
</authors>
<title>Treating Coordination in Logic Grammars.</title>
<date>1983</date>
<journal>AJCL</journal>
<volume>9</volume>
<pages>69--91</pages>
<marker>Dahl, 1983</marker>
<rawString>V.Dahl, M.MCCord (1983): Treating Coordination in Logic Grammars. AJCL 9, 69-91.</rawString>
</citation>
<citation valid="true">
<title>Dealing with Conjunctions in a Machine Translation Environment.</title>
<date>1984</date>
<booktitle>Proc. COLING 84,</booktitle>
<pages>243--246</pages>
<location>Stanford,</location>
<marker>1984</marker>
<rawString>X.HUang (1984): Dealing with Conjunctions in a Machine Translation Environment. Proc. COLING 84, Stanford, 243-246.</rawString>
</citation>
<citation valid="false">
<authors>
<author>L Siklossy L Lesmo</author>
</authors>
<title>P.TOrasso (1983): A TWo Level Net for Integrating Selectional Restrictions and Semantic Knowledge.</title>
<booktitle>Proc. IEEE Int. Conf. on Systems, Man and Cybernetics, India,</booktitle>
<pages>14--18</pages>
<marker>Lesmo, </marker>
<rawString>L.Lesmo, L.Siklossy, P.TOrasso (1983): A TWo Level Net for Integrating Selectional Restrictions and Semantic Knowledge. Proc. IEEE Int. Conf. on Systems, Man and Cybernetics, India, 14-18.</rawString>
</citation>
<citation valid="false">
<authors>
<author>L Siklossy L Lesmo</author>
</authors>
<title>P.TOrasso (1985): Semantic and Pragmatic Processing in FIDO: a Flexible Interface for Database Operations.</title>
<journal>Information Systems</journal>
<volume>10</volume>
<pages>2</pages>
<marker>Lesmo, </marker>
<rawString>L.Lesmo, L.Siklossy, P.TOrasso (1985): Semantic and Pragmatic Processing in FIDO: a Flexible Interface for Database Operations. Information Systems 10, n.2.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P TOrasso L Lesmo</author>
</authors>
<title>A Flexible Natural Language Parser Based on a I\o-Level Representation of Syntax.</title>
<date>1983</date>
<booktitle>Proc. 1st Conf. ACL Europe,</booktitle>
<pages>114--121</pages>
<location>Pisa,</location>
<marker>Lesmo, 1983</marker>
<rawString>L.Lesmo, P.TOrasso (1983): A Flexible Natural Language Parser Based on a I\o-Level Representation of Syntax. Proc. 1st Conf. ACL Europe, Pisa, 114-121.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Torasso L Lesmo</author>
</authors>
<title>Interpreting Syntactically Ill-FOrmed Sentences.</title>
<date>1934</date>
<booktitle>Proc. COLING 84,</booktitle>
<pages>534--539</pages>
<location>Stanford,</location>
<marker>Lesmo, 1934</marker>
<rawString>L.Lesmo, P.Torasso (1934): Interpreting Syntactically Ill-FOrmed Sentences. Proc. COLING 84, Stanford, 534-539.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Tbrasso L Lesmo</author>
</authors>
<title>Weighted Interaction of Syntax and Semantics in Natural Language Analysis. 9th IJCAI,</title>
<date>1985</date>
<location>Los Angeles.</location>
<marker>Lesmo, 1985</marker>
<rawString>L.Lesmo, P.Tbrasso (1985): Weighted Interaction of Syntax and Semantics in Natural Language Analysis. 9th IJCAI, Los Angeles.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F Pereira</author>
</authors>
<title>Extraposition Grammars.</title>
<date>1981</date>
<journal>AJOIL</journal>
<volume>7</volume>
<pages>243--256</pages>
<contexts>
<context position="3279" citStr="Pereira (1981)" startWordPosition="523" endWordPosition="524">second conjunct acts as a confirmation rrechanism for the hypothesis made on the sole basis of the position where the conjunction has been bound. Consequently, all the various possibilities (of increasing levels of complexity) must be analyzed until a match is found, which involves an apparent waste of computational resources. The solution proposed in the first of the :740 systems we will be discussing here is quite similar. It is based on Modifier Structure Grammars (MSG), a logic formalism introduced in (Dahl &amp; McCord, 1983), which constitutes an extension of the Extraposition Grammar by F. Pereira (1981). The conjunctions are analyzed by means of a special operator, a &amp;quot;demon&amp;quot;, that deals with the two problems that occur in coordination: the first conjunct can be &amp;quot;interrupted&amp;quot; in an incomplete status by the occurrence of the conjunction (this is not foreseeable at the beginning of the analysis) and the second conjunct must be analyzed taking into account the previous interruption point (and in this case, mainly because the second conjunct may assume a greater number of forms, some degree of top-down hypothesization is required). The first problem is solved by the &amp;quot;backup&amp;quot; procedure, which forc</context>
<context position="9490" citStr="Pereira, 1981" startWordPosition="1539" endWordPosition="1540">oncerns the interactions between the concept of &amp;quot;structured representation of a sentence&amp;quot; and &amp;quot;status of the analysis&amp;quot;. These two concepts have usually been considered as distinct: in ATNs, to consider a well-known example, the parse tree is held in a register, but the global status of the parsing process also includes the contents of the other registers, a set of states identifying the current position in the various transition networks, and a stack containing the data on the previous choice points. In logic grammars (Definite Clause Grammars (Pereira &amp; Warren, 1980), Extraposition Grammars (Pereira, 1981), Modifier Structure Grammars (Dahl &amp; McCord, 1983)) this book-keeping need not be completely explicit, but the interpreter of the language (usually a dialect of PR)LOG) has to keep track of the binding of the variables, of the clauses that have not been used (but could be used in case of failure of the current path), and so on. On the contrary, we tried to organize the parser in such a way that the two concepts mentioned above coincide: the portion of the tree that has been built so far &amp;quot;is&amp;quot; the status of the analysis. The implicit assumption is that the parser, in order to go on with the ana</context>
</contexts>
<marker>Pereira, 1981</marker>
<rawString>F.Pereira (1981): Extraposition Grammars. AJOIL 7, 243-256.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D warren F Pereira</author>
</authors>
<title>Definite Clause Grammars for Language Analysis: A Survey of the Formalism and a Comparison with Transition Networks.</title>
<date>1980</date>
<journal>Artificial Intelligence</journal>
<volume>13</volume>
<pages>231--278</pages>
<marker>Pereira, 1980</marker>
<rawString>F.Pereira, D.warren (1980): Definite Clause Grammars for Language Analysis: A Survey of the Formalism and a Comparison with Transition Networks. Artificial Intelligence 13, 231-278.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J J Robinson</author>
</authors>
<title>DIAGRAM: A Grammar for Dialogues.</title>
<date>1982</date>
<journal>Comm. ACM</journal>
<volume>25</volume>
<pages>27--47</pages>
<contexts>
<context position="12018" citStr="Robinson, 1982" startWordPosition="1957" endWordPosition="1958">the mutual independence of the various knowledge sources can be stated clearly, at least as regards the pieces of knowledge contained in each of them; on the contrary, the control flow can be designed in such a way that all knowledge sources contribute, by cooperating in a more or Less synchronized way, to the overall goal of comprehension (see fig.1). A side-effect of the independence of knowledge sources mentioned above is that there is no strict coupling between syntactic analysis and semantic interpretation, contrarily to what happens, for instance, in Augmented Phrase Structure Grammars (Robinson, 1982). This means that there is no onebo-one association between syntactic and semantic rules, a further advantage if we succeed in making the structured representation of the sentence reasonably uniform. This result has been achieved by distinguishing between &amp;quot;syntactic categories&amp;quot;, which are used in the syntactic rules to build the tree, and &amp;quot;node types&amp;quot;, whose instantiations are the elements the tree is built of Since the number of syntactic categories (and of syntactic rules) is considerably Larger than the number of node types (6 node types, 22 syntactic categories, 61 rules), then some genera</context>
</contexts>
<marker>Robinson, 1982</marker>
<rawString>J.J.Robinson (1982): DIAGRAM: A Grammar for Dialogues. Comm. ACM 25, 27-47.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J E Black R M Weischedel</author>
</authors>
<title>Responding Intelligently to Unparsable Inputs.</title>
<date>1980</date>
<journal>AJCL</journal>
<volume>6</volume>
<pages>97--109</pages>
<marker>Weischedel, 1980</marker>
<rawString>R.M.Weischedel, J.E.Black (1980): Responding Intelligently to Unparsable Inputs. AJCL 6, 97-109.</rawString>
</citation>
<citation valid="true">
<authors>
<author>w A Wtoods</author>
</authors>
<title>An Experimental Parsing System for Transition Network Grammars.</title>
<date>1973</date>
<booktitle>In R.Rustin (ed.): Natural Language Processing,</booktitle>
<pages>111--154</pages>
<publisher>Algorithmics Press,</publisher>
<location>New York,</location>
<marker>Wtoods, 1973</marker>
<rawString>w.A.Wtoods (1973): An Experimental Parsing System for Transition Network Grammars. In R.Rustin (ed.): Natural Language Processing, Algorithmics Press, New York, 111-154.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>