<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<title confidence="0.966367">
Morphological Analysis and Generation for Arabic Dialects
</title>
<author confidence="0.996806">
Nizar Habash and Owen Rambow and George Kiraz
</author>
<affiliation confidence="0.995818">
Center for Computational Learning Systems
Columbia University
</affiliation>
<address confidence="0.982685">
New York, NY 10115, USA
</address>
<email confidence="0.997877">
habash,rambow @cs.columbia.edu,gkiraz@GorgiasPress.com
</email>
<sectionHeader confidence="0.99561" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.9999043">
We present MAGEAn, a morphological
analyzer and generator for the Arabic
language family. Our work is novel
in that it explicitly addresses the need
for processing the morphology of the di-
alects. MAGEAn provides an analysis to
a root+pattern representation, it has sep-
arate phonological and orthographic rep-
resentations, and it allows for combining
morphemes from different dialects.
</bodyText>
<sectionHeader confidence="0.998995" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.95935106">
In this paper we present initial work on MAGEAn, a
morphological analyzer and generator for the Arabic
language family, by which we mean both Modern
Standard Arabic (MSA) and the spoken dialects.l
There has been much work on Arabic morphol-
ogy (for an overview, see (Al-Sughaiyer and Al-
Kharashi, 2004)). Our work is novel in that it ex-
plicitly addresses the need for processing the mor-
phology of the dialects. There are several important
consequences:
First, we want to be able to exploit the exist-
ing regularities among the dialects and between
the dialects and MSA, in particular systematic
sound changes which operate at the level of the
&apos;We would like to thank two anonymous reviewers for help-
ful comments, and Amittai Aviram for his feedback and help
with the implementation. The work reported in this paper was
supported by NSF Award 0329163.
root consonants, and pattern changes. This re-
quires an explicit analysis into root and pat-
tern.
Second, the dialects are mainly used in spo-
ken communication and in the rare cases when
they are written they do not have standard
orthographies, and different (inconsistent) or-
thographies may be used even within a single
written text. We thus need a representation of
morphology that incorporates models of both
phonology and orthography.
Third, in certain contexts, speakers often create
words with morphemes from more than one di-
alect, or from a dialect and MSA. For example,
the verb stem may be from MSA while the di-
alectal present progressive prefix is used. This
means that our analyzer needs to be able to have
access to morphological data from more than
one member of the language family.
In addition, we add two general requirements for
morphological analyzers. First, we want both a mor-
phological analyzer and a morphological generator.
Second, we want to use a representation that is de-
fined in terms of a lexeme and attribute-value pairs
for morphological features such as aspect or person.
This is because we want our component to be us-
able in natural language processing (NLP) applica-
tions such as natural language generation and ma-
chine translation, and the lexeme provides a usable
lexicographic abstraction.
We tackle these requirements by implementing
the multitape approach of Kiraz (2000), which we
</bodyText>
<page confidence="0.9919">
17
</page>
<note confidence="0.993107">
Proceedings of the ACL Workshop on Computational Approaches to Semitic Languages, pages 17–24,
Ann Arbor, June 2005. c�2005 Association for Computational Linguistics
</note>
<bodyText confidence="0.999646222222222">
extend by adding an additional tape for indepen-
dently modeling phonology and orthography. This is
the first large-scale implementation of (Kiraz, 2000).
We use the AT&amp;T finite-state toolkit (Mohri et al.,
1998) for the implementation. The use of finite state
technology makes MAGEAD usable as a generator as
well as an analyzer, unlike some morphological an-
alyzers which cannot be converted to generators in a
straightforward manner (Buckwalter, 2004; Habash,
2004).
This paper is organized as follows. In Section 2,
we discuss the linguistic situation of the Arabic-
speaking world. In Section 3, we present the rele-
vant facts about morphology in the Arabic language
family. We then present our approach to morpho-
logical analysis in Section 4, and its implementation
in Section 5. We conclude by sketching the planned
evaluation.
</bodyText>
<sectionHeader confidence="0.966301" genericHeader="method">
2 The Arabic Dialects
</sectionHeader>
<bodyText confidence="0.999952789473684">
The Arabic-speaking world is characterized by
diglossia (Ferguson, 1959). Modern Standard Ara-
bic (MSA) is the shared written language from Mo-
rocco to the Gulf, but it is not a native language of
anyone. It is spoken only in formal, scripted con-
texts (news, speeches). In addition, there is a con-
tinuum of spoken dialects (varying geographically,
but also by social class, gender, etc.) which are na-
tive languages, but rarely written (except in very in-
formal contexts: blogs, email, etc). Dialects dif-
fer phonologically, lexically, morphologically, and
syntactically from one another; many pairs of di-
alects are mutually unintelligible. In unscripted sit-
uations where spoken MSA would normally be re-
quired (such as talk shows on TV), speakers usually
resort to repeated code-switching between their di-
alect and MSA, as nearly all native speakers of Ara-
bic are unable to produce sustained spontaneous dis-
course in MSA.
</bodyText>
<sectionHeader confidence="0.998266" genericHeader="method">
3 Arabic Dialect Morphology
</sectionHeader>
<subsectionHeader confidence="0.999732">
3.1 Types of Arabic Morphemes
</subsectionHeader>
<bodyText confidence="0.9999256">
Arabic morphemes fall into three categories: tem-
platic morphemes, affixational morphemes, and
non-templatic word stems (NTWSs). Affixational
morphemes are concatenated to form words, while
templatic morphemes are interleaved. Templatic
morphemes come in three types that are equally
needed to create a word stem: roots, patterns and vo-
calisms. Affixes can be classified into prefixes, suf-
fixes and circumfixes, which precede, follow or sur-
round the word stem, respectively. Finally NTWSs
are word stems that are not constructed from a
root/pattern/vocalism combination. The following
three subsections discuss each of the morpheme cat-
egories. This is followed by a brief discussion of
some morphological adjustment phenomena.
</bodyText>
<subsectionHeader confidence="0.955421">
3.1.1 Roots, Patterns and Vocalism
</subsectionHeader>
<bodyText confidence="0.986846583333333">
The root morpheme is a sequence of three, four,
or five consonants (termed radicals) that signifies
some abstract meaning shared by all its derivations.
For example, the words2 katab ‘to write’,
kaAtib ‘writer’, and maktuwb ‘written’
all share the root morpheme ktb ( ) ‘writing-
related’.
The pattern morpheme is an abstract template in
which roots and vocalisms are inserted. We will
represent the pattern as a string of letters including
special symbols to mark where root radicals and vo-
calisms are inserted. We use numbers (i.e. 1, 2, 3,
4, or 5) to indicate radical position3 and the symbol
V is used to indicate the position of the vocalism.
For example, the pattern 1V22V3 indicates that the
second root radical is to be doubled. A pattern can
include letters for additional consonants and vowels,
e.g., the verbal pattern V1tV2V3.
The vocalism morpheme specifies which short
vowels to use with a pattern.4 A word stem is
constructed by interleaving the three types of tem-
platic morphemes. For example, the word stem
katab ‘to write’ is constructed from the root
ktb ( ), the pattern 1V2V3 and the vocalism aa.
</bodyText>
<footnote confidence="0.999728333333333">
2In this paper, we use the following conventions for repre-
senting examples. All orthographic word forms are provided
in undiacritized Arabic script followed by a diacritized ver-
sion in the Buckwalter transliteration scheme, which is a 1-
to-1 transliteration of MSA orthographic symbols using ASCII
characters (Buckwalter, 2004). All morphemes are shown dia-
critized in the Buckwalter transliteration of a plausible standard
orthographic representation, though we sometimes include an
undiacritized version in Arabic script in parentheses for clarity.
All phonemic sequences are written between the usual slashes,
but we use the Buckwalter scheme (with obvious adjustments)
rather than IPA to represent phonemes.
3Often in the literature, radical position is indicated with C.
4Traditional accounts of Arabic morphology collapse vocal-
ism and pattern.
</footnote>
<page confidence="0.99891">
18
</page>
<subsectionHeader confidence="0.824978">
3.1.2 Affizational Morphemes
</subsectionHeader>
<bodyText confidence="0.989860625">
Arabic affixes can be prefixes such as sa+
(+ ) ‘will/[future]’, suffixes such as +uwna ( +)
‘[masculine plural]’ or circumfixes such as ta++na
( ++✆ ) ‘[subject 2nd person feminine plural]’. Mul-
tiple affixes can appear in a word. For example, the
word wasayaktubuwnahA ‘and they will
write it’ has two prefixes, one circumfix and one suf-
fixes:5
</bodyText>
<equation confidence="0.509929">
(1) wasayaktubuwnahA
</equation>
<bodyText confidence="0.9821878">
is silent at the end of a word. Orthographically,
it is realized as t in word-internal position (i.e.,
when followed by a letter), but as + +p word-finally.
For example, amiyrap+nA ( + ) is realized as
amiyratnA ‘our princess’ (phonologically:
/’amiyratnA/)6. Finally, an example of an ortho-
graphic rewrite rule is the deletion of the Alif ()
of the definite article morpheme Al+ (+ ) in nouns
when preceded by the preposition l+ (+ ) (in both of
the following examples, the Alif is silent):
</bodyText>
<figure confidence="0.9854925">
(2) a. lilbayti /lilbayti/ ‘to the house’
li+ Al+ bayt +i
to+ the+ house +[genitive]
b. biAlbayti /bilbayti/ ‘in the house’
bi+ Al+ bayt +i
in+ the+ house +[genitive]
</figure>
<bodyText confidence="0.8778658">
Some of the affixes can be thought of as ortho-
graphic clitics, such as w+ (+ ) ‘and’ prepositions
(l+ (+ ) ‘to/for’, b+ (+☞ ) ‘in/with’ and k+ (+ ) ‘as’)
or the pronominal object clitics (e.g., +hA ( +) in
the example above). Others are bound morphemes.
</bodyText>
<subsectionHeader confidence="0.807332">
3.1.3 Non-Templatic Word Stem
</subsectionHeader>
<bodyText confidence="0.997264166666667">
NTWS are word stems that are not derivable from
templatic morphemes. They tend to be foreign
names and borrowed terms. For example,
waA$inTun ‘Washington’. Word stems can still take
affixational morphemes, e.g., waAl-
waA$inTuniy˜uwn ‘and the Washingtonians’.
</bodyText>
<subsectionHeader confidence="0.961807">
3.1.4 Morphological Rewrite Rules
</subsectionHeader>
<bodyText confidence="0.98862035">
An Arabic word is constructed by first creating a
word stem from templatic morphemes or by using a
NTWS. Affixational morphemes are then added to
this stem. The process of combining morphemes in-
volves a number of phonological, morphemic and
orthographic rules that modify the form of the cre-
ated word so it is not a simple interleaving or con-
catenation of its morphemic components.
An example of a phonological rewrite rule is the
voicing of the /t/ of the verbal pattern V1tV2V3
(Form VIII) when the first root radical is /z/, /d/, or
/*/ ( , , or ): the verbal stem zhr+V1tV2V3+iaa
is realized phonologically as /izdahar/ (orthograph-
ically: ) ‘flourish’ not /iztahar/ (orthographi-
cally: ). An example of a morphemic rewrite
rule is the feminine morpheme, +p ( +). Phono-
logically, it is realized as /t/ word-internally, but it
5We analyze the imperfective word stem as including an ini-
tial short vowel, and leave a discussion of this analysis to future
publications.
</bodyText>
<subsectionHeader confidence="0.9918415">
3.2 Morpheme Type and Function and the
Lezeme
</subsectionHeader>
<bodyText confidence="0.99982068">
The type of morpheme is independent of the mor-
phological function it is used for (derivational or in-
flectional). Although affixational morphemes tend
to be inflectional and templatic morphemes deriva-
tional, there are many exceptions. For example, the
plural of kitAb ‘book’ is not formed through
affixation of the inflectional plural morphemes +At
( +) or +uwn ( +), but rather through the use of
a different pattern, resulting in kutub ‘books’.
This form of plural construction is called “broken
plural” in Arabic to distinguish it from the strictly
affixational “sound plural”. Conversely, the adjec-
tive kutubiy˜ ‘book-related’ is derived from
the noun kutub ‘books’ using affixational mor-
phemes. Note that approaches for Arabic stemming
that are limited to handling affixational morphology
will both miss related terms that are inflected tem-
platically and conflate derived forms generated af-
fixationally.
A common misconception about Arabic morphol-
ogy concerns the regularity of derivational morphol-
ogy. However, the meaning of a word cannot be
predicted from the root and the pattern+vocalism
pair. For example, the masculine noun mak-
tab ‘office/bureau/agency’ and the feminine noun
</bodyText>
<footnote confidence="0.6927125">
6The case markers are ignored in this example for the sake
of simplicity.
</footnote>
<table confidence="0.4691785">
wa+ sa+ y+ aktub +uwna +hA
and will 3person write masculine-plural it
</table>
<page confidence="0.991628">
19
</page>
<bodyText confidence="0.9995178125">
maktabap ‘library/bookstore’ are derived from
the root ktb ‘writing-related’ with the pat-
tern+vocalism ma12a3, which indicates location.
The exact type of the location is thus idiosyncratic,
and it is not clear how the gender can account for
the semantic difference. It is this unpredictability of
derivational meaning that makes us prefer lexemes
as deepest units of morphological analysis, rather
than root+pattern pairs. We use the root+pattern
analysis only to relate different dialects, and since
it has proven useful for certain natural language pro-
cessing tasks, such as IR (Abu-Salem et al., 1999).
We use the lexemic representation to represent the
lexicon for applications such as machine translation,
including translation between dialects. We return to
the definition of “lexeme” in Section 4.2.
</bodyText>
<subsectionHeader confidence="0.991123">
3.3 Dialect Morphology
</subsectionHeader>
<bodyText confidence="0.996548833333333">
Arabic dialect morphology shares with MSA mor-
phology the root-and-pattern system. Additionally,
each dialect morphology shares with MSA morphol-
ogy some of the morphology lexicon (inventory of
morphemes), and the morphological rules. Consider
the following forms by way of example:
</bodyText>
<listItem confidence="0.6877705">
(3) Egyptian: mabin ulhalak$ =
ma+ b+ n+ [’wl + V12V3 + iu] +ha +lak +$
MSA: lA naquwluha laka =
lA / n+ [qwl + V12V3 + au] +u +ha / la +ka
</listItem>
<bodyText confidence="0.977028466666667">
Here, the Egyptian stem is formed from the same
pattern as the MSA stem, but the initial radical, q
in MSA, has become ’ in Egyptian through regular
sound change. The vocalism in Egyptian also differs
from that in MSA. Then, we add the first person plu-
ral subject agreement marker, the prefix n+ (which
in MSA is the circumfix n++u) and the third person
feminine singular object clitic +ha (same in MSA).
In Egyptian, we add a second person masculine sin-
gular indirect object clitic +lak, the present progres-
sive prefix b+, and the negation circumfix ma++S.
None of these exist in MSA: their meaning is repre-
sented with separate words, or as a zero morpheme
in the case of the present tense marker. Note that
Egyptian orthography is not standardized, so that the
form above could be plausibly written in any of the
following orthographies, among others:
mAbin&amp;ulhalak$, mA bin ulhAlak$,
mabinqulhalak$, mA bin-
qulhA lak$, mA binquwlhA lak$.
Within a word form, all morphemes need not be
from the same dialect. Consider the following ex-
ample.7 The speaker, who is a journalist conducting
an interview, switches from MSA to Egyptian (be-
tween square brackets) for a complementizer (
Ailliy) that introduces a relative clause. He then con-
tinues in Egyptian with the prefix b+ (+☞ ) ‘[present
progressive]’, and then, inside the word, returns to
MSA, using an MSA verb in which the passive voice
is formed with MSA morphology, -tuwajah (
</bodyText>
<listItem confidence="0.7332835">
) ‘be directed’.
(4) - [ +☞ ]
</listItem>
<bodyText confidence="0.983326571428572">
hal kaAnat isra iyl AilmafruwD hiya
Aal uwlaY [Ailliy bi+] tuwaj&amp;quot;ah laha
Ailquw&amp;quot;aAt AilmaSriy&amp;quot;ap aw kaAnat
tuwaj&amp;quot;ah Did quw&amp;quot;aAt Earabiy&amp;quot;ap uxraY?
Should it have been Israel first [that] Egyptian
armies were directed towards, or were they to
be directed against other Arab armies?
</bodyText>
<sectionHeader confidence="0.987371" genericHeader="method">
4 Morphological Analysis of Arabic
</sectionHeader>
<subsectionHeader confidence="0.822267">
4.1 Previous Work
</subsectionHeader>
<bodyText confidence="0.880262090909091">
Despite the complexity of Semitic root-and-pattern
morphology, computational morphologists have
taken up the challenge of devising tractable systems
for computing it both under finite-state methods and
non-finite-state methods. Kataja and Koskenniemi
(1988) presented a system for handling Akkadian
root-and-pattern morphology by adding a additional
lexicon component to Koskenniemi’s two-level mor-
phology (1983). The first large scale implementa-
tion of Arabic morphology within the constraints of
finite-state methods was that of Beesley et al. (1989)
with a ‘detouring’ mechanism for access to mul-
tiple lexica, which later gave rise to other works
by Beesley (Beesley, 1998) and, independently, by
Buckwalter (2004).
The now ubiquitous linguistic approach of Mc-
Carthy (1981) to describe root-and-pattern morphol-
This example is a transcript of a broadcast originally
taken from the Al-Jazeera web site. It can now be found at
http://web.archive.org/web/20030210100557/www.aljazeera.net/
programs/century witness/articles/2003/1/1-24-1.htm .
-
</bodyText>
<page confidence="0.967155">
20
</page>
<bodyText confidence="0.9996705">
ogy under the framework of autosegmental phonol-
ogy gave rise to a number of computational propos-
als. Kay (1987) devised a framework with which
each of the autosegmental tiers is assigned a tape
in a multi-tape finite state machine, with an addi-
tional tape for the surface form. Kiraz (2000,2001)
extended Kay’s approach and implemented a work-
ing multi-tape system with pilot grammars for Ara-
bic and Syriac. Other autosegmental approaches
(described in more details in Kiraz 2001 (Chapter
4)) include those of Kornai (1995), Bird and Ellison
(1994), Pulman and Hepple (1993), whose formal-
ism Kiraz adopted, and others. In this work we fol-
low the multi-tape approach, and specifically that of
(Kiraz, 2000). This is the first large-scale implemen-
tation of that approach.
</bodyText>
<subsectionHeader confidence="0.973105">
4.2 Our Approach: Outline
</subsectionHeader>
<bodyText confidence="0.991432">
In our approach, there are three levels of representa-
tion:
Lezeme Level. Words are represented in terms of
a lexeme and features. Example:
</bodyText>
<listItem confidence="0.9888215">
(5) Aizdaharat: Aizdahar POS:V PER:3 GEN:F
NUM:SG ASPECT:PERF
</listItem>
<bodyText confidence="0.997691846153846">
The list of features is dialect-independent. The
lexeme itself can be thought of as a triple consisting
of a root (or an NTWS), a meaning index, and a mor-
phological behavior class (MBC). The MBC maps
the features to morphemes. For example, [+FEM]
for kaAtib ‘writerMASC ’ yields kaAti-
bap ‘writerFEM ’ which is different from [+FEM]
for AabyaD ‘whiteMASC ’ which yields
bayDaA’ ‘whiteFEM ’. The MBCs are of course spe-
cific to the dialect in question or MSA (though con-
ceivably some can be shared between dialects). For
convenience (as in the example above), lexemes are
often represented using a citation form.
</bodyText>
<listItem confidence="0.84845275">
Morpheme Level. Words are represented in
terms of morphemes. (5) is now represented as fol-
lows:
(6) Aizdaharat: [zhr + V1tV2V3 + iaa] + at
</listItem>
<bodyText confidence="0.97018625">
Surface Level. Words are a string of characters.
Using standard MSA orthography, our example be-
comes:
Phonologically, we get:
(8) /izdaharat/
This paper focuses on the morpheme layer (mor-
phology) and the transition between the morpheme
and the surface levels. This transition draws on the
following resources:
a unified context-free grammar for morphemes
(for all dialects together) which specifies the or-
dering of affixival morphemes.
Morphophonemic and phonological rules that
map from the morphemic representation to the
phonological representation.
Orthographic rules that map from phonology
and morphology to an orthographic represen-
tation.
We will next discuss the formal representational
and computational framework for these resources.
</bodyText>
<subsectionHeader confidence="0.998959">
4.3 Multitape Automata
</subsectionHeader>
<bodyText confidence="0.980607333333333">
We follow (Kiraz, 2000) in using a multitape anal-
ysis. We extend that analysis by introducing a fifth
tier. The five tiers are used as follows:
</bodyText>
<figureCaption confidence="0.9841412">
Tier 1: pattern and affixival morphemes.
Tier 2: root.
Tier 3: vocalism.
Tier 4: phonological representation.
Tier 5: orthographic representation.
</figureCaption>
<bodyText confidence="0.9991">
Tiers 1 through 3 are always input tiers. Tier 4
is first an output tier, and subsequently an input tier.
Tier 5 is always an output tier. All tiers are read
or written at the same time, so that the rules of the
multi-tier automaton are rules which scan the input
tiers and, depending on the state, write to the output
tier. The introduction of two surface-like tiers is due
to the fact that many dialects do not have a standard
orthography, as discussed above in Section 3.3.
</bodyText>
<sectionHeader confidence="0.977544" genericHeader="method">
5 Implementing Multitape Automata
</sectionHeader>
<bodyText confidence="0.9970204">
We have implemented multi-tape finite state au-
tomata as a layer on top of the AT&amp;T two-tape finite
state transducers. Conversion from this higher layer
(the new Morphtools format) to the Lextools for-
mat (an NLP-oriented extension of the AT&amp;T toolkit
</bodyText>
<listItem confidence="0.299994">
(7) Aizdaharat
</listItem>
<page confidence="0.997965">
21
</page>
<bodyText confidence="0.999964777777778">
for finite-state machines, (Sproat, 1995)) is done for
different types of Lextools files such as rule files or
context-free grammar files. A central concept here
is that of the multitape string (MTS), a special rep-
resentation of multiple tiers in Morphtools that gets
converted to a sequence of multi-tier tokens (MTT)
compatible with Lextools. In the next section, we
discuss the conversion of MTS into MTT. Then, we
discuss an example rule conversion.
</bodyText>
<subsectionHeader confidence="0.996502">
5.1 The Multitape String
</subsectionHeader>
<bodyText confidence="0.999678">
A multitape string (MTS) is represented as
&lt;T,R,V,P,O&gt;. where:
T is the template or basic pattern. The template
is represented as a string indicating the position
of root consonant (1,2,3,4,5 or C), vowel (V),
and any consonant or vowel deemed to be part
of the template but not a separate morpheme.
For example, Arabic verb form II pattern is rep-
resented as 1V22V3 and form VIII is repre-
sented as V1tV2V3.
R is the root radicals (consonants).
V is the vocalism vowels.
P is the phonological level.
O is the orthographic level.
There are two special symbols: (1) % is a wild
card symbol that can match anything (appropriate
for that tier) and (2) @&lt;Letter&gt; (e.g., @X) is a
variable whose type can be defined explicitly. Both
symbols can appear in any tier (except that in our
current implementation, % cannot appear in tier T).
The first (or template) tier (T) is always required.
The additional tiers can be left underspecified. For
example, the full MTS specification for the root zhr
with form VIII with active vocalism is:
</bodyText>
<listItem confidence="0.51014">
(9) V1tV2V3,zhr,iaa
</listItem>
<bodyText confidence="0.963892666666667">
When converting an MTS to Lextools format, the
T tier is used to create a basic default sequence of
multi tier tokens (MTTs). For our example (9),
V1tV2V3 leads to this initial MTT sequence:
(10) [V0%00] [1%000] [t0000] [V0%00]
[2%000] [V0%00] [3%000]
When the symbol V appears in the template, a 0
is inserted in the radical position (since no radical
can be inserted here) and a wild card is inserted in
the vocalism position. The opposite is true for when
radical symbol (C,1,2,3,4,5) appears in the template,
a 0 is inserted in the vocalism tier (as no vowel from
the vocalism can be inserted here) and a wild card
in the radical tier. all other characters appearing in
the template tier (e.g., t in the example above), are
paired with 0s in all other tiers.
Additional information from other tiers are then
written on top of the default MTT sequence created
from the template tier. The representation in (10)
is transformed into (12), using the information from
the root and vocalism tiers in (9):
</bodyText>
<equation confidence="0.7631615">
(11) [V0i00] [1z000] [t0000] [V0a00]
[2h000] [V0a00] [3r000]
</equation>
<bodyText confidence="0.9996364">
This sequence corresponds to the form /iztahar/.
After applying phonological rules, which will be
discussed in the next section, the MTT sequence is
as follows. Note that the fourth tier has been filled
in.
</bodyText>
<equation confidence="0.8297875">
(12) [V0ii0] [1z0z0] [t00d0] [V0aa0]
[2h0h0] [V0aa0] [3r0r0]
</equation>
<bodyText confidence="0.980569">
In this fourth tier, this represents the phonolog-
ical form /izdahar/. Applying orthographic rules
for diacritized orthography, we write symbols into
the fifth tier, which corresponds to the orthographic
form Aizdahar.
</bodyText>
<equation confidence="0.579755">
(13) [0000A] [V0iii] [1z0zz] [t00dd]
[V0aaa] [2h0hh] [V0aaa] [3r0rr]
</equation>
<bodyText confidence="0.999938">
Note that the fourth tier provides the (phonemic)
pronunciation for the orthography in the fifth tier.
</bodyText>
<subsectionHeader confidence="0.999753">
5.2 Representing the Structure of the Word
</subsectionHeader>
<bodyText confidence="0.999889076923077">
The basic structure of the word is represented us-
ing a context-free grammar (CFG). The CFG cov-
ers all dialects and MSA, and only when they dif-
fer in terms of the morpheme sequencing does the
CFG express dialect-specific rules. How exactly to
write this CFG is an empirical question: for exam-
ple, if frequently speakers mix MSA verb stems with
ECA subject agreement suffixes, then the following
grammar fragment would not be sufficient. We in-
tend to develop probabilistic models of intra-word
code switching in order to guide the morphological
analysis in the presence of code switching.
The following rule is the top-level rule which
</bodyText>
<page confidence="0.991279">
22
</page>
<bodyText confidence="0.982099333333333">
states that a word is a verb, a noun, or a particle,
and it can be preceded by an optional conjunction
(for example, w+). It holds in all dialects and MSA.
</bodyText>
<listItem confidence="0.983755">
(14) [WORD] -&gt; [CONJ]?
([VERB]|[NOUN]|[PART])
</listItem>
<bodyText confidence="0.9990145">
The following rule expands verbs to three inflec-
tional types and adds an optional object clitic. For
Egyptian (ECA) only, an indirect object clitic can
also be added.
</bodyText>
<listItem confidence="0.8800855">
(15) [VERB] -&gt; ([PV VERB]|[IV VERB])
[OBJ PRON]? [ECA:IOBJ PRON]?
</listItem>
<bodyText confidence="0.9996064">
The next level of expansion then introduces spe-
cific morphemes for the two classes of perfective
verbs and imperfective verbs. Here, we split into
separate forms for each dialect and MSA; we give
examples for MSA and Egyptian.
</bodyText>
<equation confidence="0.73731925">
(16) a. [PV VERB] -&gt; [MSA:PV VERB STEM]
[MSA:SUF:PVSUBJ 1S]
b. [PV VERB] -&gt; [ECA:PV VERB STEM]
[ECA:SUF:PVSUBJ 1S]
</equation>
<bodyText confidence="0.9991275">
This list is continued (for all dialects and MSA)
for all combinations of person, number, and gender.
In the case of the imperfective, we get additional
prefixes, and circumfixes for the subject clitics. Note
that here we allow a combination of the MSA imper-
fective verb stem with the Egyptian prefixes, but we
do not allow the MSA prefixes with the Egyptian
verb stem.
</bodyText>
<reference confidence="0.511968833333333">
(17) a. [IV VERB] -&gt; ([MSA:FUT]|
[MSA:RESULT] |[MSA:SUBJUNC]|
[MSA:EMPHATIC] |[ECA:PRESENT] |
[ECA:FUT])? [MSA:IV VERB CONJUG]
b. [IV VERB] -&gt; ([ECA:FUT]|
[ECA:PRESENT])? [ECA:IV VERB CONJUG]
</reference>
<bodyText confidence="0.9824425">
We then give the verbal stem morphology for
MSA (the Egyptian case is similar).
</bodyText>
<equation confidence="0.473605333333333">
(18) [MSA:IV VERB CONJUG] -&gt;
[MSA:PRE:IVSUBJ 1S] [MSA:IV VERB STEM]
[MSA:SUF:IVSUBJ 1S]
</equation>
<bodyText confidence="0.999676833333333">
Again, this list is continued for all valid combi-
nations of person, number, and gender. The verbal
stems are expanded to possible forms (combination
of pattern and vocalism, not specified for root), or
NTWSs. Since the forms are specific to perfective
or imperfective aspect, they are listed separately.
</bodyText>
<equation confidence="0.492740571428571">
(19) [MSA:PV VERB STEM] -&gt; ([MSA:FORM I PV]|
[MSA:FORM II PV] |[MSA:FORM III PV]|
[MSA:FORM IV PV] |...)
Each form is expanded separately:
(20) a. [MSA:FORM I PV] -&gt; (&lt;1V2V3,%,aa&gt;|
&lt;1V2V3,%,ai&gt; |&lt;1V2V3,%,au&gt;)
b. [MSA:FORM II PV] -&gt; &lt;1V22V3,%,aa&gt;
</equation>
<bodyText confidence="0.999386625">
Separate rules introduce the morphemes
which are represented by nonterminals such as
[MSA:PRE:IVSUBJ 1S] or [ECA:PRESENT].
Such a context-free specification using MTS is then
compiled into MTT sequences in the same manner
as described above. The resulting specification is a
valid input to Lextools, which generates the finite
state machines.
</bodyText>
<subsectionHeader confidence="0.994507">
5.3 Representing Rules
</subsectionHeader>
<bodyText confidence="0.999458">
We now discuss the representation of rules. We start
out with three default rules which are the same for all
Arabic dialects and MSA (and possibly for all lan-
guages that use templatic morphology). Rule (21a)
writes a letter which is in the pattern tier but which is
not specified as either root or vocalism to the fourth
(phonological) tier, while Rule (21b) and (21c) write
a radical and a pattern vowel, respectively.
</bodyText>
<equation confidence="0.460679666666667">
(21) a. &lt;@X,,,0&gt; -&gt; @X, @X=[LETTER]
b. &lt;C,@X,,0&gt; -&gt; @X
c. &lt;V,,@X,0&gt; -&gt; @X
</equation>
<bodyText confidence="0.954801384615385">
Phonological and morphemic rules have the same
format, as they write to the fourth tier, usually
overwriting a symbol placed there by the default
rules. Rule (22) implements the rule mentioned in
Section 3.1.4 (in Form VIII, the /t/ of the pattern
changes to a /d/ if the first radical is /z/, /d/, or
/*/). Rule (22) accounts for the surface phonolog-
ical form in (8); without Rule (22), we would have
iztahar instead of izdahar.
(22) &lt;t,,,t&gt; -&gt; d / &lt;1,@M,,&gt; , @M=[zd ]
For the orthography we use the fifth tier. As in
the case of phonology, we have default rules, which
yield a simple phonemic orthography.
</bodyText>
<reference confidence="0.8973566">
(23) a. &lt;@Y,,,@X,0&gt; -&gt; @X, @Y=[LETTER],
@X=[LETTER]
b. &lt;V,,@V,@X,0&gt; -&gt; @X, @X=[LETTER]
c. &lt;C,@C,,@X,0&gt; -&gt; @X, @X=[LETTER]
d. &lt;+,,,+,+&gt; -&gt; 0
</reference>
<page confidence="0.998991">
23
</page>
<bodyText confidence="0.998203">
These default rules cover much of MSA orthog-
raphy, but in addition, there are some special ortho-
graphic rules, for example:
</bodyText>
<equation confidence="0.619731">
(24) &lt;0V,,@X,@X,0&gt; -&gt; A@X, # , @X=[LETTER]
</equation>
<bodyText confidence="0.9995935">
This rule inserts an Alif at the beginning of a word
which starts with a pattern vowel.
</bodyText>
<sectionHeader confidence="0.999772" genericHeader="conclusions">
6 Outlook
</sectionHeader>
<bodyText confidence="0.999943318181818">
This paper describes work in progress. We are cur-
rently in the process of populating MAGEAD with
morphological data and rules for MSA and Egyp-
tian, with smaller efforts for Yemeni and Levantine.
We intend to evaluate MAGEAD using a double strat-
egy: a test suite of selected surface word/analysis
pairs which tests the breadth of phenomena covered,
and a test corpus, which tests the adequacy on real
text. The test suite can be assembled by hand over
time from individual examples and is used for re-
gression testing during development, as well as for
qualitative assessment of the analyzer or generator.
The only test corpus we currently have is the Penn
Arabic Treebank for MSA.
In the next phase of the development work, we
will link the list of morphemes obtained during anal-
ysis to the lexeme level of representation. This will
be done using a dialect-specific lexicon, but we will
also develop tools to exploit the lexical similarity
between the dialects and MSA (and among the di-
alects) by hypothesizing lexemes based on regular
sound change rules.
</bodyText>
<sectionHeader confidence="0.999272" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999911683333334">
Hani Abu-Salem, Mahmoud Al-Omari, and Martha W.
Evens. 1999. Stemming methodologies over individ-
ual query words for an arabic information retrieval sys-
tem. J. Am. Soc. Inf. Sci., 50(6):524–529.
Imad A. Al-Sughaiyer and Ibrahim A. Al-Kharashi.
2004. Arabic morphological analysis techniques:
A comprehensive survey. Journal of the Ameri-
can Society for Information Science and Technology,
55(3):189–213.
K. Beesley, T. Buckwalter, and S. Newton. 1989. Two-
level finite-state analysis of Arabic morphology. In
Proceedings of the Seminar on Bilingual Computing
in Arabic and English, page n.p.
K. Beesley. 1998. Arabic morphology using only
finite-state operations. In M. Rosner, editor, Proceed-
ings of the Workshop on Computational Approaches to
Semitic Languages, pages 50–7, Montereal.
S. Bird and T. Ellison. 1994. One-level phonology.
Computational Linguistics, 20(1):55–90.
Tim Buckwalter. 2004. Buckwalter Arabic morphologi-
cal analyzer version 2.0.
Charles F Ferguson. 1959. Diglossia. Word, 15(2):325–
340.
Nizar Habash. 2004. Large scale lexeme based arabic
morphological generation. In Proceedings of Traite-
ment Automatique du Langage Naturel (TALN-04).
Fez, Morocco.
L. Kataja and K. Koskenniemi. 1988. Finite state de-
scription of Semitic morphology. In COLING-88: Pa-
pers Presented to the 12th International Conference on
Computational Linguistics, volume 1, pages 313–15.
M. Kay. 1987. Nonconcatenative finite-state morphol-
ogy. In Proceedings of the Third Conference of the Eu-
ropean Chapter of the Association for Computational
Linguistics, pages 2–10.
George Anton Kiraz. 2000. Multi-tiered nonlinear mor-
phology using multi-tape finite automata: A case study
on Syriac and Arabic. Computational Linguistics,
26(1):77–105.
George Kiraz. 2001. Computational Nonlinear Mor-
phology: With Emphasis on Semitic Languages. Cam-
bridge University Press.
A. Kornai. 1995. Formal Phonology. Garland Publish-
ing.
K. Koskenniemi. 1983. Two-Level Morphology. Ph.D.
thesis, University of Helsinki.
J. McCarthy. 1981. A prosodic theory of nonconcatena-
tive morphology. Linguistic Inquiry, 12(3):373–418.
M. Mohri, F. Pereira, and M. Riley. 1998. A rational
design for a weighted finite-state transducer library. In
D. Wood and S. Yu, editors, Automata Implementation,
Lecture Notes in Computer Science 1436, pages 144–
58. Springer.
S. Pulman and M. Hepple. 1993. A feature-based for-
malism for two-level phonology: a description and
implementation. Computer Speech and Language,
7:333–58.
R. Sproat. 1995. Lextools: Tools for finite-state linguis-
tic analysis. Technical Report 11522-951108-10TM,
Bell Laboratories.
</reference>
<page confidence="0.999178">
24
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.870070">
<title confidence="0.999727">Morphological Analysis and Generation for Arabic Dialects</title>
<author confidence="0.984346">Nizar Habash</author>
<author confidence="0.984346">Owen Rambow</author>
<author confidence="0.984346">George</author>
<affiliation confidence="0.998726">Center for Computational Learning</affiliation>
<address confidence="0.9459605">Columbia New York, NY 10115,</address>
<abstract confidence="0.999154909090909">present a morphological analyzer and generator for the Arabic language family. Our work is novel in that it explicitly addresses the need for processing the morphology of the dian analysis to a root+pattern representation, it has separate phonological and orthographic representations, and it allows for combining morphemes from different dialects.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="false">
<authors>
<author>a</author>
</authors>
<title>[IV VERB] -&gt; ([MSA:FUT]| [MSA:RESULT] |[MSA:SUBJUNC]| [MSA:EMPHATIC] |[ECA:PRESENT] | [ECA:FUT])?</title>
<journal>[MSA:IV VERB CONJUG] b. [IV VERB] -&gt; ([ECA:FUT]| [ECA:PRESENT])? [ECA:IV VERB CONJUG]</journal>
<marker>a, </marker>
<rawString>(17) a. [IV VERB] -&gt; ([MSA:FUT]| [MSA:RESULT] |[MSA:SUBJUNC]| [MSA:EMPHATIC] |[ECA:PRESENT] | [ECA:FUT])? [MSA:IV VERB CONJUG] b. [IV VERB] -&gt; ([ECA:FUT]| [ECA:PRESENT])? [ECA:IV VERB CONJUG]</rawString>
</citation>
<citation valid="false">
<note>(23) a. &lt;@Y,,,@X,0&gt; -&gt; @X, @Y=[LETTER], @X=[LETTER]</note>
<marker></marker>
<rawString>(23) a. &lt;@Y,,,@X,0&gt; -&gt; @X, @Y=[LETTER], @X=[LETTER]</rawString>
</citation>
<citation valid="false">
<authors>
<author>X c X</author>
</authors>
<journal>X, @X=[LETTER] d. &lt;+,,,+,+&gt; -&gt;</journal>
<volume>0</volume>
<marker>X, </marker>
<rawString>b. &lt;V,,@V,@X,0&gt; -&gt; @X, @X=[LETTER] c. &lt;C,@C,,@X,0&gt; -&gt; @X, @X=[LETTER] d. &lt;+,,,+,+&gt; -&gt; 0</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hani Abu-Salem</author>
<author>Mahmoud Al-Omari</author>
<author>Martha W Evens</author>
</authors>
<title>Stemming methodologies over individual query words for an arabic information retrieval system.</title>
<date>1999</date>
<journal>J. Am. Soc. Inf. Sci.,</journal>
<volume>50</volume>
<issue>6</issue>
<contexts>
<context position="12227" citStr="Abu-Salem et al., 1999" startWordPosition="1942" endWordPosition="1945">line-plural it 19 maktabap ‘library/bookstore’ are derived from the root ktb ‘writing-related’ with the pattern+vocalism ma12a3, which indicates location. The exact type of the location is thus idiosyncratic, and it is not clear how the gender can account for the semantic difference. It is this unpredictability of derivational meaning that makes us prefer lexemes as deepest units of morphological analysis, rather than root+pattern pairs. We use the root+pattern analysis only to relate different dialects, and since it has proven useful for certain natural language processing tasks, such as IR (Abu-Salem et al., 1999). We use the lexemic representation to represent the lexicon for applications such as machine translation, including translation between dialects. We return to the definition of “lexeme” in Section 4.2. 3.3 Dialect Morphology Arabic dialect morphology shares with MSA morphology the root-and-pattern system. Additionally, each dialect morphology shares with MSA morphology some of the morphology lexicon (inventory of morphemes), and the morphological rules. Consider the following forms by way of example: (3) Egyptian: mabin ulhalak$ = ma+ b+ n+ [’wl + V12V3 + iu] +ha +lak +$ MSA: lA naquwluha lak</context>
</contexts>
<marker>Abu-Salem, Al-Omari, Evens, 1999</marker>
<rawString>Hani Abu-Salem, Mahmoud Al-Omari, and Martha W. Evens. 1999. Stemming methodologies over individual query words for an arabic information retrieval system. J. Am. Soc. Inf. Sci., 50(6):524–529.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Imad A Al-Sughaiyer</author>
<author>Ibrahim A Al-Kharashi</author>
</authors>
<title>Arabic morphological analysis techniques: A comprehensive survey.</title>
<date>2004</date>
<journal>Journal of the American Society for Information Science and Technology,</journal>
<volume>55</volume>
<issue>3</issue>
<marker>Al-Sughaiyer, Al-Kharashi, 2004</marker>
<rawString>Imad A. Al-Sughaiyer and Ibrahim A. Al-Kharashi. 2004. Arabic morphological analysis techniques: A comprehensive survey. Journal of the American Society for Information Science and Technology, 55(3):189–213.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Beesley</author>
<author>T Buckwalter</author>
<author>S Newton</author>
</authors>
<title>Twolevel finite-state analysis of Arabic morphology.</title>
<date>1989</date>
<booktitle>In Proceedings of the Seminar on Bilingual Computing in Arabic and English,</booktitle>
<pages>page n.p.</pages>
<contexts>
<context position="15222" citStr="Beesley et al. (1989)" startWordPosition="2426" endWordPosition="2429">er Arab armies? 4 Morphological Analysis of Arabic 4.1 Previous Work Despite the complexity of Semitic root-and-pattern morphology, computational morphologists have taken up the challenge of devising tractable systems for computing it both under finite-state methods and non-finite-state methods. Kataja and Koskenniemi (1988) presented a system for handling Akkadian root-and-pattern morphology by adding a additional lexicon component to Koskenniemi’s two-level morphology (1983). The first large scale implementation of Arabic morphology within the constraints of finite-state methods was that of Beesley et al. (1989) with a ‘detouring’ mechanism for access to multiple lexica, which later gave rise to other works by Beesley (Beesley, 1998) and, independently, by Buckwalter (2004). The now ubiquitous linguistic approach of McCarthy (1981) to describe root-and-pattern morpholThis example is a transcript of a broadcast originally taken from the Al-Jazeera web site. It can now be found at http://web.archive.org/web/20030210100557/www.aljazeera.net/ programs/century witness/articles/2003/1/1-24-1.htm . - 20 ogy under the framework of autosegmental phonology gave rise to a number of computational proposals. Kay </context>
</contexts>
<marker>Beesley, Buckwalter, Newton, 1989</marker>
<rawString>K. Beesley, T. Buckwalter, and S. Newton. 1989. Twolevel finite-state analysis of Arabic morphology. In Proceedings of the Seminar on Bilingual Computing in Arabic and English, page n.p.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Beesley</author>
</authors>
<title>Arabic morphology using only finite-state operations.</title>
<date>1998</date>
<booktitle>Proceedings of the Workshop on Computational Approaches to Semitic Languages,</booktitle>
<pages>50--7</pages>
<editor>In M. Rosner, editor,</editor>
<publisher>Montereal.</publisher>
<contexts>
<context position="15346" citStr="Beesley, 1998" startWordPosition="2449" endWordPosition="2450"> computational morphologists have taken up the challenge of devising tractable systems for computing it both under finite-state methods and non-finite-state methods. Kataja and Koskenniemi (1988) presented a system for handling Akkadian root-and-pattern morphology by adding a additional lexicon component to Koskenniemi’s two-level morphology (1983). The first large scale implementation of Arabic morphology within the constraints of finite-state methods was that of Beesley et al. (1989) with a ‘detouring’ mechanism for access to multiple lexica, which later gave rise to other works by Beesley (Beesley, 1998) and, independently, by Buckwalter (2004). The now ubiquitous linguistic approach of McCarthy (1981) to describe root-and-pattern morpholThis example is a transcript of a broadcast originally taken from the Al-Jazeera web site. It can now be found at http://web.archive.org/web/20030210100557/www.aljazeera.net/ programs/century witness/articles/2003/1/1-24-1.htm . - 20 ogy under the framework of autosegmental phonology gave rise to a number of computational proposals. Kay (1987) devised a framework with which each of the autosegmental tiers is assigned a tape in a multi-tape finite state machin</context>
</contexts>
<marker>Beesley, 1998</marker>
<rawString>K. Beesley. 1998. Arabic morphology using only finite-state operations. In M. Rosner, editor, Proceedings of the Workshop on Computational Approaches to Semitic Languages, pages 50–7, Montereal.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Bird</author>
<author>T Ellison</author>
</authors>
<title>One-level phonology.</title>
<date>1994</date>
<journal>Computational Linguistics,</journal>
<volume>20</volume>
<issue>1</issue>
<contexts>
<context position="16264" citStr="Bird and Ellison (1994)" startWordPosition="2581" endWordPosition="2584">w.aljazeera.net/ programs/century witness/articles/2003/1/1-24-1.htm . - 20 ogy under the framework of autosegmental phonology gave rise to a number of computational proposals. Kay (1987) devised a framework with which each of the autosegmental tiers is assigned a tape in a multi-tape finite state machine, with an additional tape for the surface form. Kiraz (2000,2001) extended Kay’s approach and implemented a working multi-tape system with pilot grammars for Arabic and Syriac. Other autosegmental approaches (described in more details in Kiraz 2001 (Chapter 4)) include those of Kornai (1995), Bird and Ellison (1994), Pulman and Hepple (1993), whose formalism Kiraz adopted, and others. In this work we follow the multi-tape approach, and specifically that of (Kiraz, 2000). This is the first large-scale implementation of that approach. 4.2 Our Approach: Outline In our approach, there are three levels of representation: Lezeme Level. Words are represented in terms of a lexeme and features. Example: (5) Aizdaharat: Aizdahar POS:V PER:3 GEN:F NUM:SG ASPECT:PERF The list of features is dialect-independent. The lexeme itself can be thought of as a triple consisting of a root (or an NTWS), a meaning index, and a </context>
</contexts>
<marker>Bird, Ellison, 1994</marker>
<rawString>S. Bird and T. Ellison. 1994. One-level phonology. Computational Linguistics, 20(1):55–90.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Tim Buckwalter</author>
</authors>
<title>Buckwalter Arabic morphological analyzer version 2.0.</title>
<date>2004</date>
<contexts>
<context position="3536" citStr="Buckwalter, 2004" startWordPosition="555" endWordPosition="556">Proceedings of the ACL Workshop on Computational Approaches to Semitic Languages, pages 17–24, Ann Arbor, June 2005. c�2005 Association for Computational Linguistics extend by adding an additional tape for independently modeling phonology and orthography. This is the first large-scale implementation of (Kiraz, 2000). We use the AT&amp;T finite-state toolkit (Mohri et al., 1998) for the implementation. The use of finite state technology makes MAGEAD usable as a generator as well as an analyzer, unlike some morphological analyzers which cannot be converted to generators in a straightforward manner (Buckwalter, 2004; Habash, 2004). This paper is organized as follows. In Section 2, we discuss the linguistic situation of the Arabicspeaking world. In Section 3, we present the relevant facts about morphology in the Arabic language family. We then present our approach to morphological analysis in Section 4, and its implementation in Section 5. We conclude by sketching the planned evaluation. 2 The Arabic Dialects The Arabic-speaking world is characterized by diglossia (Ferguson, 1959). Modern Standard Arabic (MSA) is the shared written language from Morocco to the Gulf, but it is not a native language of anyo</context>
<context position="7118" citStr="Buckwalter, 2004" startWordPosition="1124" endWordPosition="1125"> V1tV2V3. The vocalism morpheme specifies which short vowels to use with a pattern.4 A word stem is constructed by interleaving the three types of templatic morphemes. For example, the word stem katab ‘to write’ is constructed from the root ktb ( ), the pattern 1V2V3 and the vocalism aa. 2In this paper, we use the following conventions for representing examples. All orthographic word forms are provided in undiacritized Arabic script followed by a diacritized version in the Buckwalter transliteration scheme, which is a 1- to-1 transliteration of MSA orthographic symbols using ASCII characters (Buckwalter, 2004). All morphemes are shown diacritized in the Buckwalter transliteration of a plausible standard orthographic representation, though we sometimes include an undiacritized version in Arabic script in parentheses for clarity. All phonemic sequences are written between the usual slashes, but we use the Buckwalter scheme (with obvious adjustments) rather than IPA to represent phonemes. 3Often in the literature, radical position is indicated with C. 4Traditional accounts of Arabic morphology collapse vocalism and pattern. 18 3.1.2 Affizational Morphemes Arabic affixes can be prefixes such as sa+ (+ </context>
<context position="15387" citStr="Buckwalter (2004)" startWordPosition="2454" endWordPosition="2455">n up the challenge of devising tractable systems for computing it both under finite-state methods and non-finite-state methods. Kataja and Koskenniemi (1988) presented a system for handling Akkadian root-and-pattern morphology by adding a additional lexicon component to Koskenniemi’s two-level morphology (1983). The first large scale implementation of Arabic morphology within the constraints of finite-state methods was that of Beesley et al. (1989) with a ‘detouring’ mechanism for access to multiple lexica, which later gave rise to other works by Beesley (Beesley, 1998) and, independently, by Buckwalter (2004). The now ubiquitous linguistic approach of McCarthy (1981) to describe root-and-pattern morpholThis example is a transcript of a broadcast originally taken from the Al-Jazeera web site. It can now be found at http://web.archive.org/web/20030210100557/www.aljazeera.net/ programs/century witness/articles/2003/1/1-24-1.htm . - 20 ogy under the framework of autosegmental phonology gave rise to a number of computational proposals. Kay (1987) devised a framework with which each of the autosegmental tiers is assigned a tape in a multi-tape finite state machine, with an additional tape for the surfac</context>
</contexts>
<marker>Buckwalter, 2004</marker>
<rawString>Tim Buckwalter. 2004. Buckwalter Arabic morphological analyzer version 2.0.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Charles F Ferguson</author>
</authors>
<date>1959</date>
<journal>Diglossia. Word,</journal>
<volume>15</volume>
<issue>2</issue>
<pages>340</pages>
<contexts>
<context position="4009" citStr="Ferguson, 1959" startWordPosition="630" endWordPosition="631">well as an analyzer, unlike some morphological analyzers which cannot be converted to generators in a straightforward manner (Buckwalter, 2004; Habash, 2004). This paper is organized as follows. In Section 2, we discuss the linguistic situation of the Arabicspeaking world. In Section 3, we present the relevant facts about morphology in the Arabic language family. We then present our approach to morphological analysis in Section 4, and its implementation in Section 5. We conclude by sketching the planned evaluation. 2 The Arabic Dialects The Arabic-speaking world is characterized by diglossia (Ferguson, 1959). Modern Standard Arabic (MSA) is the shared written language from Morocco to the Gulf, but it is not a native language of anyone. It is spoken only in formal, scripted contexts (news, speeches). In addition, there is a continuum of spoken dialects (varying geographically, but also by social class, gender, etc.) which are native languages, but rarely written (except in very informal contexts: blogs, email, etc). Dialects differ phonologically, lexically, morphologically, and syntactically from one another; many pairs of dialects are mutually unintelligible. In unscripted situations where spoke</context>
</contexts>
<marker>Ferguson, 1959</marker>
<rawString>Charles F Ferguson. 1959. Diglossia. Word, 15(2):325– 340.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nizar Habash</author>
</authors>
<title>Large scale lexeme based arabic morphological generation.</title>
<date>2004</date>
<booktitle>In Proceedings of Traitement Automatique du Langage Naturel (TALN-04).</booktitle>
<location>Fez, Morocco.</location>
<contexts>
<context position="3551" citStr="Habash, 2004" startWordPosition="557" endWordPosition="558"> ACL Workshop on Computational Approaches to Semitic Languages, pages 17–24, Ann Arbor, June 2005. c�2005 Association for Computational Linguistics extend by adding an additional tape for independently modeling phonology and orthography. This is the first large-scale implementation of (Kiraz, 2000). We use the AT&amp;T finite-state toolkit (Mohri et al., 1998) for the implementation. The use of finite state technology makes MAGEAD usable as a generator as well as an analyzer, unlike some morphological analyzers which cannot be converted to generators in a straightforward manner (Buckwalter, 2004; Habash, 2004). This paper is organized as follows. In Section 2, we discuss the linguistic situation of the Arabicspeaking world. In Section 3, we present the relevant facts about morphology in the Arabic language family. We then present our approach to morphological analysis in Section 4, and its implementation in Section 5. We conclude by sketching the planned evaluation. 2 The Arabic Dialects The Arabic-speaking world is characterized by diglossia (Ferguson, 1959). Modern Standard Arabic (MSA) is the shared written language from Morocco to the Gulf, but it is not a native language of anyone. It is spoke</context>
</contexts>
<marker>Habash, 2004</marker>
<rawString>Nizar Habash. 2004. Large scale lexeme based arabic morphological generation. In Proceedings of Traitement Automatique du Langage Naturel (TALN-04). Fez, Morocco.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L Kataja</author>
<author>K Koskenniemi</author>
</authors>
<title>Finite state description of Semitic morphology.</title>
<date>1988</date>
<booktitle>In COLING-88: Papers Presented to the 12th International Conference on Computational Linguistics,</booktitle>
<volume>1</volume>
<pages>313--15</pages>
<contexts>
<context position="14927" citStr="Kataja and Koskenniemi (1988)" startWordPosition="2384" endWordPosition="2387">wajah ( ) ‘be directed’. (4) - [ +☞ ] hal kaAnat isra iyl AilmafruwD hiya Aal uwlaY [Ailliy bi+] tuwaj&amp;quot;ah laha Ailquw&amp;quot;aAt AilmaSriy&amp;quot;ap aw kaAnat tuwaj&amp;quot;ah Did quw&amp;quot;aAt Earabiy&amp;quot;ap uxraY? Should it have been Israel first [that] Egyptian armies were directed towards, or were they to be directed against other Arab armies? 4 Morphological Analysis of Arabic 4.1 Previous Work Despite the complexity of Semitic root-and-pattern morphology, computational morphologists have taken up the challenge of devising tractable systems for computing it both under finite-state methods and non-finite-state methods. Kataja and Koskenniemi (1988) presented a system for handling Akkadian root-and-pattern morphology by adding a additional lexicon component to Koskenniemi’s two-level morphology (1983). The first large scale implementation of Arabic morphology within the constraints of finite-state methods was that of Beesley et al. (1989) with a ‘detouring’ mechanism for access to multiple lexica, which later gave rise to other works by Beesley (Beesley, 1998) and, independently, by Buckwalter (2004). The now ubiquitous linguistic approach of McCarthy (1981) to describe root-and-pattern morpholThis example is a transcript of a broadcast </context>
</contexts>
<marker>Kataja, Koskenniemi, 1988</marker>
<rawString>L. Kataja and K. Koskenniemi. 1988. Finite state description of Semitic morphology. In COLING-88: Papers Presented to the 12th International Conference on Computational Linguistics, volume 1, pages 313–15.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Kay</author>
</authors>
<title>Nonconcatenative finite-state morphology.</title>
<date>1987</date>
<booktitle>In Proceedings of the Third Conference of the European Chapter of the Association for Computational Linguistics,</booktitle>
<pages>2--10</pages>
<contexts>
<context position="15828" citStr="Kay (1987)" startWordPosition="2513" endWordPosition="2514">989) with a ‘detouring’ mechanism for access to multiple lexica, which later gave rise to other works by Beesley (Beesley, 1998) and, independently, by Buckwalter (2004). The now ubiquitous linguistic approach of McCarthy (1981) to describe root-and-pattern morpholThis example is a transcript of a broadcast originally taken from the Al-Jazeera web site. It can now be found at http://web.archive.org/web/20030210100557/www.aljazeera.net/ programs/century witness/articles/2003/1/1-24-1.htm . - 20 ogy under the framework of autosegmental phonology gave rise to a number of computational proposals. Kay (1987) devised a framework with which each of the autosegmental tiers is assigned a tape in a multi-tape finite state machine, with an additional tape for the surface form. Kiraz (2000,2001) extended Kay’s approach and implemented a working multi-tape system with pilot grammars for Arabic and Syriac. Other autosegmental approaches (described in more details in Kiraz 2001 (Chapter 4)) include those of Kornai (1995), Bird and Ellison (1994), Pulman and Hepple (1993), whose formalism Kiraz adopted, and others. In this work we follow the multi-tape approach, and specifically that of (Kiraz, 2000). This </context>
</contexts>
<marker>Kay, 1987</marker>
<rawString>M. Kay. 1987. Nonconcatenative finite-state morphology. In Proceedings of the Third Conference of the European Chapter of the Association for Computational Linguistics, pages 2–10.</rawString>
</citation>
<citation valid="true">
<authors>
<author>George Anton Kiraz</author>
</authors>
<title>Multi-tiered nonlinear morphology using multi-tape finite automata: A case study</title>
<date>2000</date>
<booktitle>on Syriac and Arabic. Computational Linguistics,</booktitle>
<pages>26--1</pages>
<contexts>
<context position="2906" citStr="Kiraz (2000)" startWordPosition="461" endWordPosition="462"> In addition, we add two general requirements for morphological analyzers. First, we want both a morphological analyzer and a morphological generator. Second, we want to use a representation that is defined in terms of a lexeme and attribute-value pairs for morphological features such as aspect or person. This is because we want our component to be usable in natural language processing (NLP) applications such as natural language generation and machine translation, and the lexeme provides a usable lexicographic abstraction. We tackle these requirements by implementing the multitape approach of Kiraz (2000), which we 17 Proceedings of the ACL Workshop on Computational Approaches to Semitic Languages, pages 17–24, Ann Arbor, June 2005. c�2005 Association for Computational Linguistics extend by adding an additional tape for independently modeling phonology and orthography. This is the first large-scale implementation of (Kiraz, 2000). We use the AT&amp;T finite-state toolkit (Mohri et al., 1998) for the implementation. The use of finite state technology makes MAGEAD usable as a generator as well as an analyzer, unlike some morphological analyzers which cannot be converted to generators in a straightfo</context>
<context position="16006" citStr="Kiraz (2000" startWordPosition="2544" endWordPosition="2545">w ubiquitous linguistic approach of McCarthy (1981) to describe root-and-pattern morpholThis example is a transcript of a broadcast originally taken from the Al-Jazeera web site. It can now be found at http://web.archive.org/web/20030210100557/www.aljazeera.net/ programs/century witness/articles/2003/1/1-24-1.htm . - 20 ogy under the framework of autosegmental phonology gave rise to a number of computational proposals. Kay (1987) devised a framework with which each of the autosegmental tiers is assigned a tape in a multi-tape finite state machine, with an additional tape for the surface form. Kiraz (2000,2001) extended Kay’s approach and implemented a working multi-tape system with pilot grammars for Arabic and Syriac. Other autosegmental approaches (described in more details in Kiraz 2001 (Chapter 4)) include those of Kornai (1995), Bird and Ellison (1994), Pulman and Hepple (1993), whose formalism Kiraz adopted, and others. In this work we follow the multi-tape approach, and specifically that of (Kiraz, 2000). This is the first large-scale implementation of that approach. 4.2 Our Approach: Outline In our approach, there are three levels of representation: Lezeme Level. Words are represented</context>
<context position="18252" citStr="Kiraz, 2000" startWordPosition="2895" endWordPosition="2896">ayer (morphology) and the transition between the morpheme and the surface levels. This transition draws on the following resources: a unified context-free grammar for morphemes (for all dialects together) which specifies the ordering of affixival morphemes. Morphophonemic and phonological rules that map from the morphemic representation to the phonological representation. Orthographic rules that map from phonology and morphology to an orthographic representation. We will next discuss the formal representational and computational framework for these resources. 4.3 Multitape Automata We follow (Kiraz, 2000) in using a multitape analysis. We extend that analysis by introducing a fifth tier. The five tiers are used as follows: Tier 1: pattern and affixival morphemes. Tier 2: root. Tier 3: vocalism. Tier 4: phonological representation. Tier 5: orthographic representation. Tiers 1 through 3 are always input tiers. Tier 4 is first an output tier, and subsequently an input tier. Tier 5 is always an output tier. All tiers are read or written at the same time, so that the rules of the multi-tier automaton are rules which scan the input tiers and, depending on the state, write to the output tier. The int</context>
</contexts>
<marker>Kiraz, 2000</marker>
<rawString>George Anton Kiraz. 2000. Multi-tiered nonlinear morphology using multi-tape finite automata: A case study on Syriac and Arabic. Computational Linguistics, 26(1):77–105.</rawString>
</citation>
<citation valid="true">
<authors>
<author>George Kiraz</author>
</authors>
<title>Computational Nonlinear Morphology: With Emphasis on Semitic Languages.</title>
<date>2001</date>
<publisher>Cambridge University Press.</publisher>
<contexts>
<context position="16195" citStr="Kiraz 2001" startWordPosition="2572" endWordPosition="2573">be found at http://web.archive.org/web/20030210100557/www.aljazeera.net/ programs/century witness/articles/2003/1/1-24-1.htm . - 20 ogy under the framework of autosegmental phonology gave rise to a number of computational proposals. Kay (1987) devised a framework with which each of the autosegmental tiers is assigned a tape in a multi-tape finite state machine, with an additional tape for the surface form. Kiraz (2000,2001) extended Kay’s approach and implemented a working multi-tape system with pilot grammars for Arabic and Syriac. Other autosegmental approaches (described in more details in Kiraz 2001 (Chapter 4)) include those of Kornai (1995), Bird and Ellison (1994), Pulman and Hepple (1993), whose formalism Kiraz adopted, and others. In this work we follow the multi-tape approach, and specifically that of (Kiraz, 2000). This is the first large-scale implementation of that approach. 4.2 Our Approach: Outline In our approach, there are three levels of representation: Lezeme Level. Words are represented in terms of a lexeme and features. Example: (5) Aizdaharat: Aizdahar POS:V PER:3 GEN:F NUM:SG ASPECT:PERF The list of features is dialect-independent. The lexeme itself can be thought of a</context>
</contexts>
<marker>Kiraz, 2001</marker>
<rawString>George Kiraz. 2001. Computational Nonlinear Morphology: With Emphasis on Semitic Languages. Cambridge University Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Kornai</author>
</authors>
<title>Formal Phonology.</title>
<date>1995</date>
<publisher>Garland Publishing.</publisher>
<contexts>
<context position="16239" citStr="Kornai (1995)" startWordPosition="2579" endWordPosition="2580">030210100557/www.aljazeera.net/ programs/century witness/articles/2003/1/1-24-1.htm . - 20 ogy under the framework of autosegmental phonology gave rise to a number of computational proposals. Kay (1987) devised a framework with which each of the autosegmental tiers is assigned a tape in a multi-tape finite state machine, with an additional tape for the surface form. Kiraz (2000,2001) extended Kay’s approach and implemented a working multi-tape system with pilot grammars for Arabic and Syriac. Other autosegmental approaches (described in more details in Kiraz 2001 (Chapter 4)) include those of Kornai (1995), Bird and Ellison (1994), Pulman and Hepple (1993), whose formalism Kiraz adopted, and others. In this work we follow the multi-tape approach, and specifically that of (Kiraz, 2000). This is the first large-scale implementation of that approach. 4.2 Our Approach: Outline In our approach, there are three levels of representation: Lezeme Level. Words are represented in terms of a lexeme and features. Example: (5) Aizdaharat: Aizdahar POS:V PER:3 GEN:F NUM:SG ASPECT:PERF The list of features is dialect-independent. The lexeme itself can be thought of as a triple consisting of a root (or an NTWS)</context>
</contexts>
<marker>Kornai, 1995</marker>
<rawString>A. Kornai. 1995. Formal Phonology. Garland Publishing.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Koskenniemi</author>
</authors>
<title>Two-Level Morphology.</title>
<date>1983</date>
<tech>Ph.D. thesis,</tech>
<institution>University of Helsinki.</institution>
<marker>Koskenniemi, 1983</marker>
<rawString>K. Koskenniemi. 1983. Two-Level Morphology. Ph.D. thesis, University of Helsinki.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J McCarthy</author>
</authors>
<title>A prosodic theory of nonconcatenative morphology.</title>
<date>1981</date>
<journal>Linguistic Inquiry,</journal>
<volume>12</volume>
<issue>3</issue>
<contexts>
<context position="15446" citStr="McCarthy (1981)" startWordPosition="2462" endWordPosition="2464">g it both under finite-state methods and non-finite-state methods. Kataja and Koskenniemi (1988) presented a system for handling Akkadian root-and-pattern morphology by adding a additional lexicon component to Koskenniemi’s two-level morphology (1983). The first large scale implementation of Arabic morphology within the constraints of finite-state methods was that of Beesley et al. (1989) with a ‘detouring’ mechanism for access to multiple lexica, which later gave rise to other works by Beesley (Beesley, 1998) and, independently, by Buckwalter (2004). The now ubiquitous linguistic approach of McCarthy (1981) to describe root-and-pattern morpholThis example is a transcript of a broadcast originally taken from the Al-Jazeera web site. It can now be found at http://web.archive.org/web/20030210100557/www.aljazeera.net/ programs/century witness/articles/2003/1/1-24-1.htm . - 20 ogy under the framework of autosegmental phonology gave rise to a number of computational proposals. Kay (1987) devised a framework with which each of the autosegmental tiers is assigned a tape in a multi-tape finite state machine, with an additional tape for the surface form. Kiraz (2000,2001) extended Kay’s approach and imple</context>
</contexts>
<marker>McCarthy, 1981</marker>
<rawString>J. McCarthy. 1981. A prosodic theory of nonconcatenative morphology. Linguistic Inquiry, 12(3):373–418.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Mohri</author>
<author>F Pereira</author>
<author>M Riley</author>
</authors>
<title>A rational design for a weighted finite-state transducer library.</title>
<date>1998</date>
<booktitle>Automata Implementation, Lecture Notes in Computer Science 1436,</booktitle>
<pages>144--58</pages>
<editor>In D. Wood and S. Yu, editors,</editor>
<publisher>Springer.</publisher>
<contexts>
<context position="3296" citStr="Mohri et al., 1998" startWordPosition="516" endWordPosition="519">ssing (NLP) applications such as natural language generation and machine translation, and the lexeme provides a usable lexicographic abstraction. We tackle these requirements by implementing the multitape approach of Kiraz (2000), which we 17 Proceedings of the ACL Workshop on Computational Approaches to Semitic Languages, pages 17–24, Ann Arbor, June 2005. c�2005 Association for Computational Linguistics extend by adding an additional tape for independently modeling phonology and orthography. This is the first large-scale implementation of (Kiraz, 2000). We use the AT&amp;T finite-state toolkit (Mohri et al., 1998) for the implementation. The use of finite state technology makes MAGEAD usable as a generator as well as an analyzer, unlike some morphological analyzers which cannot be converted to generators in a straightforward manner (Buckwalter, 2004; Habash, 2004). This paper is organized as follows. In Section 2, we discuss the linguistic situation of the Arabicspeaking world. In Section 3, we present the relevant facts about morphology in the Arabic language family. We then present our approach to morphological analysis in Section 4, and its implementation in Section 5. We conclude by sketching the p</context>
</contexts>
<marker>Mohri, Pereira, Riley, 1998</marker>
<rawString>M. Mohri, F. Pereira, and M. Riley. 1998. A rational design for a weighted finite-state transducer library. In D. Wood and S. Yu, editors, Automata Implementation, Lecture Notes in Computer Science 1436, pages 144– 58. Springer.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Pulman</author>
<author>M Hepple</author>
</authors>
<title>A feature-based formalism for two-level phonology: a description and implementation.</title>
<date>1993</date>
<journal>Computer Speech and Language,</journal>
<pages>7--333</pages>
<contexts>
<context position="16290" citStr="Pulman and Hepple (1993)" startWordPosition="2585" endWordPosition="2588">/century witness/articles/2003/1/1-24-1.htm . - 20 ogy under the framework of autosegmental phonology gave rise to a number of computational proposals. Kay (1987) devised a framework with which each of the autosegmental tiers is assigned a tape in a multi-tape finite state machine, with an additional tape for the surface form. Kiraz (2000,2001) extended Kay’s approach and implemented a working multi-tape system with pilot grammars for Arabic and Syriac. Other autosegmental approaches (described in more details in Kiraz 2001 (Chapter 4)) include those of Kornai (1995), Bird and Ellison (1994), Pulman and Hepple (1993), whose formalism Kiraz adopted, and others. In this work we follow the multi-tape approach, and specifically that of (Kiraz, 2000). This is the first large-scale implementation of that approach. 4.2 Our Approach: Outline In our approach, there are three levels of representation: Lezeme Level. Words are represented in terms of a lexeme and features. Example: (5) Aizdaharat: Aizdahar POS:V PER:3 GEN:F NUM:SG ASPECT:PERF The list of features is dialect-independent. The lexeme itself can be thought of as a triple consisting of a root (or an NTWS), a meaning index, and a morphological behavior cla</context>
</contexts>
<marker>Pulman, Hepple, 1993</marker>
<rawString>S. Pulman and M. Hepple. 1993. A feature-based formalism for two-level phonology: a description and implementation. Computer Speech and Language, 7:333–58.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Sproat</author>
</authors>
<title>Lextools: Tools for finite-state linguistic analysis.</title>
<date>1995</date>
<tech>Technical Report 11522-951108-10TM,</tech>
<institution>Bell Laboratories.</institution>
<contexts>
<context position="19340" citStr="Sproat, 1995" startWordPosition="3078" endWordPosition="3079"> the multi-tier automaton are rules which scan the input tiers and, depending on the state, write to the output tier. The introduction of two surface-like tiers is due to the fact that many dialects do not have a standard orthography, as discussed above in Section 3.3. 5 Implementing Multitape Automata We have implemented multi-tape finite state automata as a layer on top of the AT&amp;T two-tape finite state transducers. Conversion from this higher layer (the new Morphtools format) to the Lextools format (an NLP-oriented extension of the AT&amp;T toolkit (7) Aizdaharat 21 for finite-state machines, (Sproat, 1995)) is done for different types of Lextools files such as rule files or context-free grammar files. A central concept here is that of the multitape string (MTS), a special representation of multiple tiers in Morphtools that gets converted to a sequence of multi-tier tokens (MTT) compatible with Lextools. In the next section, we discuss the conversion of MTS into MTT. Then, we discuss an example rule conversion. 5.1 The Multitape String A multitape string (MTS) is represented as &lt;T,R,V,P,O&gt;. where: T is the template or basic pattern. The template is represented as a string indicating the position</context>
</contexts>
<marker>Sproat, 1995</marker>
<rawString>R. Sproat. 1995. Lextools: Tools for finite-state linguistic analysis. Technical Report 11522-951108-10TM, Bell Laboratories.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>