<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000062">
<title confidence="0.887774">
Identifying Broken Plurals in Unvowelised Arabic Text
</title>
<author confidence="0.822007">
Abduelbaset Goweder Massimo Poesio Anne De Roeck Jeff Reynolds
</author>
<affiliation confidence="0.9308945">
University of Essex University of Essex The Open University University of Essex
Dept. of Computer Dept. of Computer Dept. of Computing Dept. of Computer
</affiliation>
<note confidence="0.9067505">
Science Science Walton Hall, Milton Science
Wivenhoe Park, Wivenhoe Park, Keynes Wivenhoe Park,
Colchester CO4 3SQ, Colchester CO4 3SQ, Buckinghamshire, MK7 Colchester CO4 3SQ,
UK UK 6AA, UK UK
</note>
<email confidence="0.57182">
agowed@essex.ac.uk poesio@essex.ac.uk A.DeRoeck@open.ac.uk reynt@essex.ac.uk
</email>
<sectionHeader confidence="0.986213" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999852789473684">
Irregular (so-called broken) plural identification
in modern standard Arabic is a problematic issue
for information retrieval (IR) and language
engineering applications, but their effect on the
performance of IR has never been examined.
Broken plurals (BPs) are formed by altering the
singular (as in English: tooth 4 teeth) through
an application of interdigitating patterns on
stems, and singular words cannot be recovered
by standard affix stripping stemming techniques.
We developed several methods for BP detection,
and evaluated them using an unseen test set. We
incorporated the BP detection component into a
new light-stemming algorithm that conflates both
regular and broken plurals with their singular
forms. We also evaluated the new light-stemming
algorithm within the context of information
retrieval, comparing its performance with other
stemming algorithms.
</bodyText>
<sectionHeader confidence="0.998361" genericHeader="keywords">
1. Introduction
</sectionHeader>
<bodyText confidence="0.999849318181818">
Broken plurals constitute —10% of texts in large
Arabic corpora (Goweder and De Roeck, 2001), and
—41% of plurals (Boudelaa and Gaskell, 2002).
Detecting broken plurals is therefore an important
issue for light-stemming algorithms developed for
applications such as information retrieval, yet the
effect of broken plural identification on the
performance of information retrieval systems has
not been examined. We present several methods for
BP detection, and evaluate them using an unseen
test set containing 187,309 words. We also
developed a new light-stemming algorithm
incorporating a BP recognition component, and
evaluated it within an information retrieval context,
comparing its performance with other stemming
algorithms.
We give a brief overview of Arabic in Section 2.
Several approaches to BP detection are discussed in
Section 3, and their evaluation in Section 4. In
Section 5, we present an improved light stemmer
and its evaluation. Finally in Section 6, our
conclusions are summarised.
</bodyText>
<sectionHeader confidence="0.7796915" genericHeader="introduction">
2. Arabic Morphology and its Number
System
</sectionHeader>
<bodyText confidence="0.99994847826087">
Arabic is a heavily inflected language. Its
grammatical system is traditionally described in
terms of a root-and-pattern structure, with about
10,000 roots (Ali, 1988). Roots such as drs (c)-u.1)
and ktb (YZ) are listed alphabetically in standard
Arabic dictionaries like the Wehr-Cowan (Beesley,
1996). The root is the most basic verb form. Roots
are categorized into: triliteral, quadriliteral, or rarely
pentaliteral. Most words are derived from a finite set
of roots formed by adding diacritics1 or affixes
(prefixes, suffixes, and infixes) through an
application of fixed patterns which are templates to
help in deriving inflectional and derivational forms
of a word. Theoretically, several hundreds of
Arabic words can be derived from a single root.
Traditional Arab grammarians describe Arabic
morphology in terms of patterns associated with the
basic root f3l (JW, “to do”)- where f, 3, and l are like
wildcards in regular expressions: the letter f (L-i
,“pronounced fa”) represents the first consonant
(sometimes called a radical), the letter 3 (t ,
“pronounced ain”) represents the second, and the
letter l (J , “pronounced lam”) represents the third
</bodyText>
<footnote confidence="0.520388">
1 Special characters which are superscript or subscript marks
added to the word.
</footnote>
<bodyText confidence="0.995535047619048">
respectively. Adding affixes to the basic root f3l
(JW, “to do”) allows additional such patterns to be
formed. For instance, adding the letter Alef (1) as a
prefix to the basic root f3l (JW, “to do”) we get the
pattern Af3l (JWP) which is used to form words such
as: anhr ( �, “rivers”), arjl (J-J, “legs”), and asqf
(����, “ceilings”). Some examples of the word
patterns are Yf3l (LI-L,), Mf3Wl (Jy-L), Af3Al (Juil),
MfA3l (Jc1-), etc.
The following example shows how we can use
patterns to form words. the verb yktb (LA , “he
writes or he is writing”) is formed by mapping the
consonants of the triliteral root ktb (Y � ) to the
pattern yf3l (LI-L,), where the letters f (L-i), 3 (t), and
l (J) in the second, third, and fourth positions of the
pattern respectively represent slots for a root
consonant. Figure 1 depicts the process of matching
the root ktb (Y � ) to the pattern yf3l (J-4) to
produce the verb yktb (LA , “he writes or he is
writing”), then adding prefixes and/or suffixes to
obtain a word.
</bodyText>
<figureCaption confidence="0.999236">
Figure 1: The process of mapping the root ktb (Y to the
</figureCaption>
<subsectionHeader confidence="0.765435">
pattern yf3l (LA.).
</subsectionHeader>
<bodyText confidence="0.988126190476191">
The Arabic number system has singular, dual, and
plural. Plurals are traditionally distinguished into
two categories: the regular (so-called sound)
plurals, and the irregular (so-called broken) plurals.
Sound Plurals are formed by appropriate suffixation
(like English: hand 4 hands). The sound masculine
plural is formed by adding the suffix oun (!&amp;quot;) in the
nominative case and the suffix een (#�) in the
accusative &amp; genitive cases. The sound feminine
plural is formed by attaching the suffix at (tel) to the
singular.
Irregular or broken plurals apply mostly to triliteral
roots and are formed by altering the singular (as in
English: tooth 4 teeth). Many nouns and adjectives
have broken plurals (Haywood and Nahmad, 1976).
In all cases, singulars are affected by applying a
number of different patterns that alter long vowels
(Alef (1), Waw (&amp;quot;), Yeh ($), and Alef-Maqsura (%)),
within or outside the framework of the consonants
(Cowan, 1958). Table 1 gives some examples of
BPs and their patterns.
</bodyText>
<tableCaption confidence="0.997758">
Table 1: Broken Plural examples.
</tableCaption>
<table confidence="0.9740935">
Singular BP Pattern Plural
qlm(&amp;&apos;(, “pen”) Af3Al (LWI) AqlAm()*(l, “pens”)
qlb(,4, “heart”) f3Wl (J-t&amp;quot;) qlWb(Y_&apos;(, “hearts”)
ktab(ylls, “book”) f3l (J+9) ktb(L.46, “books”)
</table>
<bodyText confidence="0.9936075">
The complexity of Arabic morphology has
motivated a great deal of studies. Some of which
especially concerned with broken plurals (McCarthy
and Prince, 1990b; Kiraz, 1996a; Idrissi, 1997).
These are successful to varying degrees, but have a
main practical drawback in the context of
information retrieval: they assume that words are
fully vowelised. Unfortunately, short vowels are
usually not written in published Arabic text, with
the exception of the religious texts (e.g., the Holy
Quran), poetry, and books for school children
(Abuleil and Evens, 1998).
</bodyText>
<sectionHeader confidence="0.598494" genericHeader="method">
3. Different Approaches to BP Identification
</sectionHeader>
<bodyText confidence="0.99970475">
We tested several different approaches for BP
identification: simple BP matching, restricted BP
matching (hand restricted &amp; decision tree
restricted), and a dictionary approach.
</bodyText>
<subsectionHeader confidence="0.999618">
3.1 The Simple BP Matching Approach
</subsectionHeader>
<bodyText confidence="0.999521714285714">
Given the characterisation of broken plurals one
finds in standard Arabic grammars, the most
obvious method for identifying a broken plural is to
light stem it (strip off any prefixes and/or suffixes),
then trying to match the obtained stem against BP
patterns found in standard grammars. Since this
method is widely used, we adopted it as a baseline.
As a first step towards a simple BP matching
algorithm, we developed a basic light stemmer for
Arabic by modifying an existing root stemmer
(Khoja and Garside, 1999). This basic light stemmer
was incorporated in a simple BP identification
module based on matching, using a list of 39 BP
patterns found in grammar books such as Haywood
and Nahmad (1976) and Cowan (1958). The simple
BP matching algorithm takes in a word; light-stems
it to produce morphological information such as
stem, prefix and suffix; and returns TRUE if the
stem matches one of the BP patterns in the list. The
stem matches a BP pattern if and only if they have
the same number of letters and the same letters in
the same positions, excluding the consonants f (L-i),
3 (t), and l (J) of the basic root f3l (JW, “to do”)
found in the pattern.
In information retrieval and statistical natural
language processing, recall and precision are
common measures used to gauge a system’s
performance. Recall (R) is the fraction of target
items that a system selected, while the precision (P)
is the fraction of selected items that a system got
right. A third measure known as F-measure (F)2
(combines R and P) is used in some situation where
R is very high and P is very low (Manning and
Schutze, 1999). We implemented R, P, and F to
evaluate approaches we present in this paper.
The simple BP matching algorithm was
preliminarily evaluated on a subset of an Arabic
corpus (referred to as A_Corpus1) obtained from
Khoja (1999). It contains 7172 words whose BP
instances were identified (this first set of BPs is
referred below as data set1). The results showed that
the simple BP matching approach has very high
recall (99.71%), but low precision (13.73%).
We also tested two slightly modified versions of the
simple BP matching algorithm, exploiting
information about affixes information and proper
name detection, respectively. The first variant was
based on the observation that only a limited set of
prefixes and suffixes can be attached to a BP stem.
In addition, some BP prefixes and suffixes cannot
both be concatenated to a BP stem at the same time.
These observations led to a first variant of the
simple matching algorithm incorporating two post-
processing strategies for refining the decisions made
by the simple BP matching algorithm. The first
refining strategy checks if the produced prefix or
suffix is in the list of BP prefixes or suffixes; if it
isn’t, the stem will be classified as ‘Not Broken
Plural (NBP)’. The second refining strategy checks
if the prefix is a definite article (e.g., al (JI, “the”),
wal (JI9 , “and the”), bal (J� , “with the”), etc.) and
the suffix is a BP suffix, and changes the output
accordingly. An evaluation of the performance of
</bodyText>
<sectionHeader confidence="0.441838" genericHeader="method">
2 F=2PR/(P+R) for equal weighting.
</sectionHeader>
<bodyText confidence="0.999978285714286">
the simple BP matching algorithm with affix-based
refinement strategies on data set1 revealed a slight
improvement in precision (16.74%).
We also made a preliminary test evaluating the
possible usefulness of incorporating a proper name
detector in the system. We manually identified the
proper names in data set1, then modified the simple
BP matching algorithm to ignore proper names. Our
results only showed a small (if significant)
improvement in precision (19.86%), that we didn’t
feel would justify the considerable effort required to
develop a proper name detector. As a result, we
looked for simpler but more effective ways to
improve the algorithm.
</bodyText>
<subsectionHeader confidence="0.997908">
3.2 The Restricted BP Matching Approach
</subsectionHeader>
<bodyText confidence="0.999955125">
The main problem with the simple BP matching
approach is that the BP patterns are too general to
achieve a good performance. Another way to
improve the precision of the algorithm is therefore
to obtain more specific BP patterns by restricting the
original ones. The idea is to allow only a subset of
the alphabet to be used in the meta characters f (L-i),
3 (t), and l (J) positions of the patterns (see Section
2), producing a number of more restrictive patterns
out of each original BP pattern. A larger number of
instances of each BP pattern is required to develop
this approach. For this purpose, we used a large
corpus of ~18.5 million words (Goweder and De
Roeck, 2001). In the remainder of the paper, we
refer to this corpus as A_Corpus2. The simple BP
matching algorithm with affix-based refinement
strategies was used to extract all instances of BPs
that occurred in A_Corpus2. We adopted two
approaches. In a first experiment we tried to produce
the more restrictive patterns by hand. Later we tried
to achieve the same goal using a decision tree
technique. We discuss the first experiment here, the
second in section 3.4. The procedure we followed to
identify the BPs in A_Corpus2 is as follows:
</bodyText>
<listItem confidence="0.975233222222222">
1. A word frequencies tool was used to
generate word frequencies for A_Corpus2,
obtaining 444,761 distinct word types.
2. Each word type was light-stemmed.
3. The word frequencies tool was run again on
the stemmed word types, producing roughly
127,000 stem types.
4. The 127,000 stem types were fed to the
simple BP matching system to retrieve all
</listItem>
<bodyText confidence="0.971402730769231">
stems that match BP patterns. The output
file, categorised according to each BP
pattern, contained about 30,000 cases. Each
specific pattern contained a list of stems
matching this pattern.
We then studied separately each BP pattern. Some
BP patterns were straightforward to restrict. For
example, all the stem types matching the BP pattern
Af3lAa (,*~ 1), are shown in Figure 2. There are 107
cases in total. An analysis of the results reveals that
only 18 cases are BPs, highlighted (bold and
underlined). In the BP pattern Af3lAa (,*~ ), the
meta characters f (-i), 3 (t), and l (J) are in
positions 2, 3, and 4 respectively. The remaining
characters - Alef (1) in positions 1 &amp; 5, and Hamza
(,) in position 6 - are fixed. Our analysis showed
that the stems which have the letter Ta (�) in the 3rd
position are not BPs; they are nominalizations of
verbs. For example, the word abtdaa (,�-�+� ,
“starting”) listed on the first row and last column is
a noun derived from the verb yabtdi (/-�.� , “he
starts”). There are 62 cases of this type. An
exceptional rule could be induced to handle nouns
derived from verbs. The rule could be written as:
If (the letter Ta (,D) matches the meta character 3 (p) ),
then Classification = &amp;quot;NBP&amp;quot;.
</bodyText>
<figureCaption confidence="0.997">
Figure 2: Results of the pattern Af3lAa (OWI).
</figureCaption>
<bodyText confidence="0.999821333333333">
The simple BP matching algorithm was modified to
use the manually restricted BP patterns. The
performance of the manual restriction method was
evaluated using the same data set used before, data
set1. The results show that precision is noticeably
improved, to 53.92%. Recall is improved as well, to
100%. The improvement in both recall and precision
caused a big increase in the F-measure, to roughly
70%. These results suggested to us that attempting
to restrict the BP patterns is worthwhile. In section
3.4, we discuss attempts to find restrictions
automatically, using decision tree methods. But the
classification of all words in A_Corpus2 as BP or
NBP also allowed us to bootstrap a dictionary-based
approach. We discuss this next.
</bodyText>
<subsectionHeader confidence="0.997218">
3.3 The Dictionary Approach
</subsectionHeader>
<bodyText confidence="0.999835857142857">
In information retrieval applications, “the most
common measures of system performance are time
and space. The shorter the response time, the
smaller the space used, the better the system is
considered to be” (Baeza-Yates and Ribeiro-Neto,
1999). The fastest way to detect BPs is to use a
look-up table which lists all BP stems.
Considering some of the facts about Arabic,
discussed in Section 2, it is quite clear that it will be
fairly difficult to build look-up tables listing either
BP stems or full words from language dictionaries.
A_Corpus2, on the other hand - a large resource of
modern, unvowelised, freeflowing Arabic text -
provided a good foundation, and after the
development of the simple and restricted BP
matching algorithms discussed in the previous
sections, only minor additional effort was required
for building such a table (without such tools,
collecting the table entries would have been
prohibitively expensive).
The dictionary was built as follows:
</bodyText>
<listItem confidence="0.993096">
1. The manually restricted BP matching
system was run on the 127,000 stem types,
extracted from A_Corpus2 (see section 3.2),
to retrieve all types that match (restricted
matching) BP patterns. The results were
about 12,000 instances in total.
2. We then went through these 12,000
instances, identifying the actual BPs. A list
of roughly 3,600 BP stems, alphabetically
ordered and categorised according to each
BP pattern, was extracted.
</listItem>
<table confidence="0.997161458333333">
List of all words retrieved by the pattern (,*~ 1)===&gt;
,4w1 ,* 1 ,10�+1 ,1...:+l ,l-�+l
,l2i�l ,1-41 aL{y1 aLjrjl aLj,V1
,16S41 ,15~4 ,13�4l ,hy,l ,*41
,~.~81 ,�il ,1��4l ,17.1 ,ir-1
apal ,1=1.11 ,*�8I ,UL8l ,~6~81
,1;:,1 ,1-:,1 ,Wjl ,13,1 aydll
, 1;.1,1 ,1y,1 ,4:,1 ,11,1 ,La:,l
,1.5.+1 ,1;5.+1 ,*;&lt;1 ,L=.1&lt;l ,1,.1&lt;1
,1y..1 ,*:ti.l ,119.+1 ,ir-1 ,105.+1
,���?� ,���?� awl ,1.,..1 ,4&gt;5..1
,*5.1 ,L-�.1 ,11@A1 a11.U.1 alAZl
,L&amp;quot;uBl ,13�BI AjAl ,t1��l ,43.1
,1-�(1 ,l(�o ,1-Al ,1-191 pwid
aLJJ11 aol ,4wI ,1aal ,1;:el
aLJUI ,1yd1 ,WS1 ,15SSI ,1yd1
,1-�d1 al�h l ,1.11 ,*5.1 ,03.1
,�,11 ,17�41 ,=1 ,1a�d1 ,=1
,1&amp;quot;2�1 ,UEJ ,*D~1 ,1y,i1 ,1&apos;C�1
,1Siil ,1,@�1 ,=1@�1 ,l,; l ,41..
,1-i=1 ,LE7 l ,US+1 alpi l ,L; .V
,4&gt;&apos;;1 al}&amp;quot;!1 ayfi!1 aL;ue!1 ,1y=1
,115F1 ,*�&lt;1
Total number of cases is 107
</table>
<bodyText confidence="0.945106473684211">
3. The list was further revised in collaboration
with a linguist, who is an Arabic native
speaker. The revised list contained exactly
3,580 BP stems.
We implemented the dictionary approach using hash
tables, in which search, insertion, and deletion
operations can be done in constant time.
Before carrying an extensive comparison of the
dictionary approach to the previous approaches, its
performance was first tested on the same data set
already used to evaluate both simple and restricted
BP matching approaches, data set1. The results of
the evaluation show that precision significantly
improves (to 81.18%), while recall is still perfect
(100%). The F-measure recorded an increase
(89.61%) due to the improvement in the precision.
The results suggest that the dictionary approach
outperforms both the simple and manually restricted
BP matching approaches.
</bodyText>
<subsectionHeader confidence="0.99609">
3.4 Learning Restrictions Automatically
</subsectionHeader>
<bodyText confidence="0.972396076923077">
Decision tree learning is one of the most widely
used classification methods. The decision tree
learning algorithm C4.5 developed by Quinlan
(1993) was used to generate a set of rules in the
form of a decision tree and decision rules (if-then
statements). Because we are interested in how we
could restrict the BP patterns, specifically restricting
the meta characters of the BP patterns (Fa, Ain, and
Lam), we chose them to be the attributes which
describe our data. The outcome (class) of each case
is given as BP or NBP. Figure 3 shows the classes
and the name &amp; description of each attribute.
BP, NBP.
</bodyText>
<figureCaption confidence="0.97408475">
Fa: discrete (list of Arabic alaphabet).
Ain: discrete (list of Arabic alaphabet).
Lam: discrete (list of Arabic alaphabet).
Figure 3: Set of attributes.
</figureCaption>
<tableCaption confidence="0.7155064">
Table 2 lists some examples of the BP pattern
Af3lAa (,*wl) to show how instances of the data can
be described according to the set of proposed
attributes and a classification for each instance.
Table 2: Sample of examples.
</tableCaption>
<table confidence="0.607847">
Word Set of Attributes Class
Fa Ain Lam
Asdqaa(,U-A1 , “friends”) G s H BP
Abtdaa(,1-II , “starting”) Y ~ s NBP
Akhtbaa(Qh:,-:.l , “hiding”) I Lis ~ NBP
Athryaa(,4y+l , “wealthy”) K � $ BP
</table>
<bodyText confidence="0.998871882352941">
Data balance was an issue to be dealt with before
conducting decision tree experiments. For some BP
patterns, the number of BP cases is much smaller
than the number of NBP cases. In such a situation,
we are required to have equal cases for each class
(50% for BP and 50% for NBP) because C4.5 tends
to classify all the cases as one class with some error
rate if there are an insufficient, or small number of
cases of one type compared to the other. Balancing
the data was achieved by duplicating the infrequent
cases until we have an equal number of cases for
both classes.
Training data are generated using the simple BP
matching algorithm, on the text file containing
127,000 stem types extracted from A_Corpus2 (see
section 3.2). The simple BP matching algorithm
listed all instances that match every particular BP
pattern. So far, we have a list of instances, which are
labeled as BP, for each BP pattern, however, many
of the cases are not BPs. As a result, we need to
revise automatically the classification of each case
using the dictionary-based approach (discussed in
section 3.3). After the revision, all the cases which
are labeled as BPs by the simple BP matching
algorithm will be corrected by the dictionary
approach. At this stage, each BP pattern will have a
list of BP and NBP cases. The BP system will check
which class has fewer cases in order to duplicate
them to achieve the balancing. Thirty nine output
files, one for each BP pattern, were produced by the
BP system.
Test data for each BP pattern are also generated by
invoking the BP system on a large unseen data set,
containing 187,309 words (referred to as data set2)
extracted from the Arabic Newswire corpus (a third
corpus referred to as A_Corpus3, and totally
different from A_Corpus1 and A_Corpus2) in order
to test the models produced by C4.5 system.
We generated one classification model for each of
the 39 (mutually exclusive) BP patterns, and
examined their performance on unseen test cases.
Each classification model was trained on a dataset
specific to that BP pattern and consisting of 10,000
cases, 50% for each class. The classification models
were then evaluated on 39 different test sets (one for
each BP pattern). Most of the classifiers were able
to achieve the task with very low error rates and
high recall &amp; precision. Some models performed the
classification without any errors and had a very
simple decision tree (e.g., the decision tree and set
of rules produced for the BP pattern Af3lAa (�����)).
This implies that the results are promising; however,
some classifiers had large decision trees and
suffered from overfitting.
A summary of recall and precision results for both
decision trees and set of rules are drawn as
histograms to give us a better insight of how each
BP pattern performed as shown in Figures 4, 5, 6,
and 7. The analysis of the results shows that most of
the models (Figures 4&amp;6), representing BP patterns,
achieved high recall (except a few of them, such as
patterns 16, 27, where the recall was low &lt; 40%).
On the other hand, some models (Figures 5&amp;7)
performed poorly (precision &lt; 40%), such as
patterns 4, 10, 16, 17, 21, and 28. The performance
of all combined models achieved an overall recall
and precision of approximately 95% and 75%
respectively.
</bodyText>
<figureCaption confidence="0.99999425">
Figure 4: Recall of decision trees for all BP patterns.
Figure 5: Precision of decision trees for all BP patterns.
Figure 6: Recall of set of rules for all BP patterns.
Figure 7: Precision of set of rules for all BP patterns.
</figureCaption>
<sectionHeader confidence="0.5312315" genericHeader="method">
4. Comparing the Performance of the BP
Identification Approaches
</sectionHeader>
<bodyText confidence="0.999617166666667">
The BP matching methods discussed in the previous
section were evaluated on a larger unseen data set,
data set2 (the same data set already used to generate
test cases to evaluate the decision tree approach, see
section 3.4). The BPs in this data set were tagged as
follows:
</bodyText>
<listItem confidence="0.990789833333333">
1. A modified version of the dictionary-based
BP identification algorithm was run on data
set2 to tag all the occurrences of BPs.
2. We manually went through the output twice
to revise any mistakes made by the BP
identification algorithm.
</listItem>
<figure confidence="0.991046446808511">
Recall
120
100
80
60
40
20
0
1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39
BP patterns
Decision Trees
Overall Recall = 95.56%
Decision Trees
Overall precision = 75.59053%
1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39
BP patterns
Precision 120
100
80
60
40
20
0
Recall
120
100
80
40
20
60
0
1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39
BP patterns
Overall Recall = 95.91184%
Set of Rules
Precision
120
100
80
40
20
60
0
1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39
BP patterns
Overall precision = 75.14395%
Set of Rules
</figure>
<bodyText confidence="0.9996045">
The evaluation results for the different algorithms
on data set2 are listed in Table 3. These results
confirm that the simple BP matching approach
performed poorly, the restricted BP matching
approach improved the performance significantly, a
more significant improvement achieved by the
decision tree technique, and the dictionary approach
outperformed all the approaches. The results also
suggest that affix-based refinement strategies
improved the performance of the simple matching,
the restricted matching, and the dictionary
algorithms.
</bodyText>
<tableCaption confidence="0.9947525">
Table 3: An Evaluation of different BP identification
algorithms using a large data set (data set2).
</tableCaption>
<table confidence="0.999893727272727">
BP Evaluation Criteria
Ident.
Method
R P F
SM 99.5% 13.8% 24.2%
SMR 100% 14.5% 25.4%
MRM 99% 49.7% 66.2%
MRMR 100% 52% 68.4%
Dic 98.8% 86.9% 92.5%
DicR 100% 92.3% 96.0%
DT 95.9% 75.1% 84.3%
</table>
<sectionHeader confidence="0.96221" genericHeader="method">
5. An Improved Light-Stemmer and its
Task-Based Evaluation
</sectionHeader>
<bodyText confidence="0.999833">
The dictionary-based BP detector with restriction
was included in a revised version of the light
stemmer described earlier (henceforth: Basic-
LStemmer). This revised stemmer (henceforth: BP-
LStemmer) first runs the Basic-LStemmer on a
word, then invokes the (dictionary-based) BP
detector. If the BP detector returns TRUE, the
singular form of the word is output; otherwise, the
output of the Basic-LStemmer.
The BP-LStemmer was evaluated in an information
retrieval task by developing a new indexing method,
referred to as “stem+BP”. This new indexing
method was compared with the three standard
indexing methods (full word, root, and ‘basic’ stem).
The Greenstone digital library, developed at the
University of Waikato in New Zealand, was used as
an information retrieval system for our experiment.
A collection of 385 documents (7 different domains)
and a set of 50 queries (plausible queries that we
might use ourselves were created to search for
particular information in different domains) with
their relevance judgments, were used to evaluate the
four indexing methods.
The results (Figure 8) clearly indicate that the
proposed “stem+BP” indexing method significantly
outperforms the three standard indexing/stemming
methods (p (1-tailed) &lt; .01 both by the Sign test and
the Wilcoxon signed-rank test). This suggests that
stemming has a substantial effect on information
retrieval for highly inflected languages such as
Arabic, confirming the results obtained by Al-
Kharashi and Evens (1994), Hmeidi et al. (1997),
Abu-Salem et al. (1999), Larkey and Connell
(2001), and Larkey et al. (2002).
</bodyText>
<figureCaption confidence="0.8058795">
Figure 8: The Average Recall vs. Precision Figures of the
Four Indexing Methods for 50 Queries.
</figureCaption>
<sectionHeader confidence="0.99726" genericHeader="conclusions">
6. Conclusion
</sectionHeader>
<bodyText confidence="0.999982">
We discussed several different methods for BP
identification: simple BP matching, affix-based
simple BP matching, simple BP matching+POS,
manually-and-DT restricted, and dictionary-based.
Although the simplest methods had poor or
mediocre results, they were used to bootstrap better
performing methods.
The baseline, the simple BP matching method, has a
high recall but a low precision (~14%). We
attempted to improve the performance of the BP
identification algorithm by (i) using affix
</bodyText>
<figure confidence="0.980297974358974">
Precision
100
90
80
70
60
50
40
30
20
10
0
10 20 30 40 50 60 70 80 90 100
Recall
Average Recall versus Precision Figures
Stem+BP
Stem
Root
Full Word
Acronyms:
Simple Matching
4 SM
Simple Matching
with Refinement 4
SMR
Manually
Restricted
Matching 4 MRM
Manually
Restricted
Matching with
Refinement 4
MRMR
Dictionary 4 Dic
Dictionary with
Refinement 4
DicR
Decision Trees
4 DT
</figure>
<bodyText confidence="0.999943478260869">
information, (ii) identifying proper names, and (iii)
restricting the BP patterns. Having implemented the
simple and restricted methods, and used them to
analyse all the BPs in a large corpus (A_Corpus2),
made a dictionary approach possible. All methods
were evaluated on a larger data set of 187,000
words. The results confirmed that the restricted
method clearly improved the overall performance
and the dictionary approach outperformed the other
ones.
We also developed a new light-stemming algorithm
that conflates both regular and broken plurals with
their singular forms. The new light-stemming
algorithm was assessed in an information retrieval
context, comparing its performance with other
stemming algorithms. Our work provides evidence
that identifying broken plurals results in an
improved performance for information retrieval
systems. We found that any form of stemming
improves retrieval for Arabic; and that light-
stemming with broken plural recognition
outperforms standard light-stemming, root-
stemming, and no form of stemming.
</bodyText>
<sectionHeader confidence="0.98608" genericHeader="acknowledgments">
7. Acknowledgments
</sectionHeader>
<bodyText confidence="0.99954325">
We would like to express our gratitude to Shereen
Khoja for providing her root stemmer. We would
also like to thank the Libyan Secretariat of
Education for supporting this work.
</bodyText>
<sectionHeader confidence="0.975686" genericHeader="references">
8. References
</sectionHeader>
<reference confidence="0.999894656716418">
Abuleil, Saleem and Evens, Martha W. (1998).
“Discovering Lexical Information by Tagging Arabic
Newspaper Text.” Computational Approaches to
Semitic Languages, Proceedings of the Workshop.
Abu-Salem, Hani; Al-Omari, Mahmoud; and Evens,
Martha W. (1999). “Stemming Methodologies over
Individual Query Words for an Arabic Information
Retrieval System.” JASIST, 50(6):524-529.
Ali , N. (1988). “Computers and the Arabic Language.”
Cairo, Egypt: Al-khat Publishing Press, Ta’reep.
Al-Kharashi, I. and Evens, Martha W. (1994).
“Comparing words, stems and roots as index terms in an
Arabic Information retrieval system.” JASIST,
45(8):548-560.
Baeza-Yates, Ricardo and Ribeiro-Neto, Berthier (1999).
“Modern Information Retrieval”. Addison-Wesley,
ACM Press.
Beesley, K. R. (1996) “Arabic finite-state morphological
analysis and generation.” In COLING-96: Proceedings
of the 16th international conference on Computational
Linguistics, vol. 1, pp. 89--94.
Boudelaa , Sami; Gaskell, M. Gareth (2002). “A re-
examination of the default system for Arabic plurals.”
Psychology Press Ltd, vol. 17, pp. 321-343, 2002.
Cowan, David (1958). “Modern Literary Arabic.”
Cambridge University Press.
Goweder, Abduelbaset and De Roeck, Anne (2001).
“Assessment of a Significant Arabic Corpus.” ACL
2001. Arabic language Processing. pp. 73-79, 2001.
Haywood, J. A. and Nahmad, H. M. (1976). “A new
Arabic Grammar of the written language.” Lund
Humphries London.
Hmeidi, Ismail; Kanaan, Ghassan; and Evens, Martha
(1997). “Design and Implementation of Automatic
Indexing for Information Retrieval with Arabic
Documents.” Journal of the American Society for
Information Science. 48(10) (pp. 867-881), 1997.
Idrissi, Ali (1997). “Plural Formation in Arabic.” In
Current issues in Linguistic Theory, Perspectives on
Arabic Linguistics X. Edited by Mushira Eid and Robert
Ratcliffe. Vol 153, pp 123-145.
Khoja, S. and Garside, R. (1999) “Stemming Arabic text.”
Computing Department, Lancaster University,
Lancaster, United Kingdom.
http://www.comp.lancs.ac.uk/computing/users/khoja/ste
mmer.ps
Kiraz, G. (1996a). Analysis of the Arabic broken plural
and diminutive. In Proceedings of the 5th International
Conference and Exhibition on Multi-Lingual
Computing. Cambridge.
Larkey, L. S. and Connell, M. E. (2001) “Arabic
information retrieval at UMass in TREC-10.” In TREC
2001. Gaithersburg: NIST, 2001.
Larkey, L.; Ballesteros, L.; and Connell, M.E (2002).
“Improving Stemming for Arabic Information Retrieval:
Light Stemming and Co-occurrence Analysis.” In
SIGIR’02, August 11-15, 2002, Tampere, Finland, pp
275–282, 2002.
Manning, Christopher D. and Schutze, Hinrich (1999).
“Foundations of Statistical Natural Language
Processing.”
McCarthy, John J.; and Prince, Alan S (1990). “Foot and
Word in Prosodic Morphology: The Arabic Broken
Plural.” Natural Language and Linguistic Theory 8,
209–282.
Quinlan, J. R. (1993). “C4.5: Programs for Machine Learning.”
San Mateo: Morgan Kaufmann.
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.562441">
<title confidence="0.995418">Identifying Broken Plurals in Unvowelised Arabic Text</title>
<author confidence="0.997497">Abduelbaset Goweder Massimo Poesio Anne De_Roeck Jeff Reynolds</author>
<affiliation confidence="0.9238015">University of Essex University of Essex The Open University University of Essex Dept. of Computer Dept. of Computer Dept. of Computing Dept. of Computer Science Science Walton Hall, Milton Science Wivenhoe Park, Wivenhoe Park, Keynes Wivenhoe Park,</affiliation>
<address confidence="0.9283895">Colchester CO4 3SQ, Colchester CO4 3SQ, Buckinghamshire, MK7 Colchester CO4 3SQ, UK UK 6AA, UK UK</address>
<email confidence="0.966771">agowed@essex.ac.ukpoesio@essex.ac.ukA.DeRoeck@open.ac.ukreynt@essex.ac.uk</email>
<abstract confidence="0.9994077">so-called plural identification in modern standard Arabic is a problematic issue for information retrieval (IR) and language engineering applications, but their effect on the performance of IR has never been examined. Broken plurals (BPs) are formed by altering the (as in English: tooth through an application of interdigitating patterns on stems, and singular words cannot be recovered by standard affix stripping stemming techniques. We developed several methods for BP detection, and evaluated them using an unseen test set. We incorporated the BP detection component into a new light-stemming algorithm that conflates both regular and broken plurals with their singular forms. We also evaluated the new light-stemming algorithm within the context of information retrieval, comparing its performance with other stemming algorithms.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Saleem Abuleil</author>
<author>Martha W Evens</author>
</authors>
<title>Discovering Lexical Information by Tagging Arabic</title>
<date>1998</date>
<booktitle>Newspaper Text.” Computational Approaches to Semitic Languages, Proceedings of the Workshop.</booktitle>
<contexts>
<context position="6580" citStr="Abuleil and Evens, 1998" startWordPosition="1019" endWordPosition="1022">Wb(Y_&apos;(, “hearts”) ktab(ylls, “book”) f3l (J+9) ktb(L.46, “books”) The complexity of Arabic morphology has motivated a great deal of studies. Some of which especially concerned with broken plurals (McCarthy and Prince, 1990b; Kiraz, 1996a; Idrissi, 1997). These are successful to varying degrees, but have a main practical drawback in the context of information retrieval: they assume that words are fully vowelised. Unfortunately, short vowels are usually not written in published Arabic text, with the exception of the religious texts (e.g., the Holy Quran), poetry, and books for school children (Abuleil and Evens, 1998). 3. Different Approaches to BP Identification We tested several different approaches for BP identification: simple BP matching, restricted BP matching (hand restricted &amp; decision tree restricted), and a dictionary approach. 3.1 The Simple BP Matching Approach Given the characterisation of broken plurals one finds in standard Arabic grammars, the most obvious method for identifying a broken plural is to light stem it (strip off any prefixes and/or suffixes), then trying to match the obtained stem against BP patterns found in standard grammars. Since this method is widely used, we adopted it as</context>
</contexts>
<marker>Abuleil, Evens, 1998</marker>
<rawString>Abuleil, Saleem and Evens, Martha W. (1998). “Discovering Lexical Information by Tagging Arabic Newspaper Text.” Computational Approaches to Semitic Languages, Proceedings of the Workshop.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hani Abu-Salem</author>
<author>Mahmoud Al-Omari</author>
<author>Martha W Evens</author>
</authors>
<title>Stemming Methodologies over Individual Query Words for an Arabic Information Retrieval System.”</title>
<date>1999</date>
<booktitle>JASIST,</booktitle>
<pages>50--6</pages>
<contexts>
<context position="25611" citStr="Abu-Salem et al. (1999)" startWordPosition="4222" endWordPosition="4225">es were created to search for particular information in different domains) with their relevance judgments, were used to evaluate the four indexing methods. The results (Figure 8) clearly indicate that the proposed “stem+BP” indexing method significantly outperforms the three standard indexing/stemming methods (p (1-tailed) &lt; .01 both by the Sign test and the Wilcoxon signed-rank test). This suggests that stemming has a substantial effect on information retrieval for highly inflected languages such as Arabic, confirming the results obtained by AlKharashi and Evens (1994), Hmeidi et al. (1997), Abu-Salem et al. (1999), Larkey and Connell (2001), and Larkey et al. (2002). Figure 8: The Average Recall vs. Precision Figures of the Four Indexing Methods for 50 Queries. 6. Conclusion We discussed several different methods for BP identification: simple BP matching, affix-based simple BP matching, simple BP matching+POS, manually-and-DT restricted, and dictionary-based. Although the simplest methods had poor or mediocre results, they were used to bootstrap better performing methods. The baseline, the simple BP matching method, has a high recall but a low precision (~14%). We attempted to improve the performance o</context>
</contexts>
<marker>Abu-Salem, Al-Omari, Evens, 1999</marker>
<rawString>Abu-Salem, Hani; Al-Omari, Mahmoud; and Evens, Martha W. (1999). “Stemming Methodologies over Individual Query Words for an Arabic Information Retrieval System.” JASIST, 50(6):524-529.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ali</author>
</authors>
<title>Computers and the Arabic Language.”</title>
<date>1988</date>
<publisher>Al-khat Publishing Press, Ta’reep.</publisher>
<location>Cairo, Egypt:</location>
<contexts>
<context position="2653" citStr="Ali, 1988" startWordPosition="380" endWordPosition="381"> component, and evaluated it within an information retrieval context, comparing its performance with other stemming algorithms. We give a brief overview of Arabic in Section 2. Several approaches to BP detection are discussed in Section 3, and their evaluation in Section 4. In Section 5, we present an improved light stemmer and its evaluation. Finally in Section 6, our conclusions are summarised. 2. Arabic Morphology and its Number System Arabic is a heavily inflected language. Its grammatical system is traditionally described in terms of a root-and-pattern structure, with about 10,000 roots (Ali, 1988). Roots such as drs (c)-u.1) and ktb (YZ) are listed alphabetically in standard Arabic dictionaries like the Wehr-Cowan (Beesley, 1996). The root is the most basic verb form. Roots are categorized into: triliteral, quadriliteral, or rarely pentaliteral. Most words are derived from a finite set of roots formed by adding diacritics1 or affixes (prefixes, suffixes, and infixes) through an application of fixed patterns which are templates to help in deriving inflectional and derivational forms of a word. Theoretically, several hundreds of Arabic words can be derived from a single root. Traditional</context>
</contexts>
<marker>Ali, 1988</marker>
<rawString>Ali , N. (1988). “Computers and the Arabic Language.” Cairo, Egypt: Al-khat Publishing Press, Ta’reep.</rawString>
</citation>
<citation valid="true">
<authors>
<author>I Al-Kharashi</author>
<author>Martha W Evens</author>
</authors>
<title>Comparing words, stems and roots as index terms in an Arabic Information retrieval system.”</title>
<date>1994</date>
<journal>JASIST,</journal>
<pages>45--8</pages>
<marker>Al-Kharashi, Evens, 1994</marker>
<rawString>Al-Kharashi, I. and Evens, Martha W. (1994). “Comparing words, stems and roots as index terms in an Arabic Information retrieval system.” JASIST, 45(8):548-560.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ricardo Baeza-Yates</author>
<author>Berthier Ribeiro-Neto</author>
</authors>
<title>Modern Information Retrieval”.</title>
<date>1999</date>
<publisher>Addison-Wesley, ACM Press.</publisher>
<contexts>
<context position="14512" citStr="Baeza-Yates and Ribeiro-Neto, 1999" startWordPosition="2351" endWordPosition="2354">he F-measure, to roughly 70%. These results suggested to us that attempting to restrict the BP patterns is worthwhile. In section 3.4, we discuss attempts to find restrictions automatically, using decision tree methods. But the classification of all words in A_Corpus2 as BP or NBP also allowed us to bootstrap a dictionary-based approach. We discuss this next. 3.3 The Dictionary Approach In information retrieval applications, “the most common measures of system performance are time and space. The shorter the response time, the smaller the space used, the better the system is considered to be” (Baeza-Yates and Ribeiro-Neto, 1999). The fastest way to detect BPs is to use a look-up table which lists all BP stems. Considering some of the facts about Arabic, discussed in Section 2, it is quite clear that it will be fairly difficult to build look-up tables listing either BP stems or full words from language dictionaries. A_Corpus2, on the other hand - a large resource of modern, unvowelised, freeflowing Arabic text - provided a good foundation, and after the development of the simple and restricted BP matching algorithms discussed in the previous sections, only minor additional effort was required for building such a table</context>
</contexts>
<marker>Baeza-Yates, Ribeiro-Neto, 1999</marker>
<rawString>Baeza-Yates, Ricardo and Ribeiro-Neto, Berthier (1999). “Modern Information Retrieval”. Addison-Wesley, ACM Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K R Beesley</author>
</authors>
<title>Arabic finite-state morphological analysis and generation.”</title>
<date>1996</date>
<booktitle>In COLING-96: Proceedings of the 16th international conference on Computational Linguistics,</booktitle>
<volume>1</volume>
<pages>89--94</pages>
<contexts>
<context position="2788" citStr="Beesley, 1996" startWordPosition="400" endWordPosition="401">give a brief overview of Arabic in Section 2. Several approaches to BP detection are discussed in Section 3, and their evaluation in Section 4. In Section 5, we present an improved light stemmer and its evaluation. Finally in Section 6, our conclusions are summarised. 2. Arabic Morphology and its Number System Arabic is a heavily inflected language. Its grammatical system is traditionally described in terms of a root-and-pattern structure, with about 10,000 roots (Ali, 1988). Roots such as drs (c)-u.1) and ktb (YZ) are listed alphabetically in standard Arabic dictionaries like the Wehr-Cowan (Beesley, 1996). The root is the most basic verb form. Roots are categorized into: triliteral, quadriliteral, or rarely pentaliteral. Most words are derived from a finite set of roots formed by adding diacritics1 or affixes (prefixes, suffixes, and infixes) through an application of fixed patterns which are templates to help in deriving inflectional and derivational forms of a word. Theoretically, several hundreds of Arabic words can be derived from a single root. Traditional Arab grammarians describe Arabic morphology in terms of patterns associated with the basic root f3l (JW, “to do”)- where f, 3, and l a</context>
</contexts>
<marker>Beesley, 1996</marker>
<rawString>Beesley, K. R. (1996) “Arabic finite-state morphological analysis and generation.” In COLING-96: Proceedings of the 16th international conference on Computational Linguistics, vol. 1, pp. 89--94.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Gaskell Sami</author>
<author>M Gareth</author>
</authors>
<title>A reexamination of the default system for Arabic plurals.”</title>
<date>2002</date>
<journal>Ltd,</journal>
<volume>17</volume>
<pages>321--343</pages>
<publisher>Psychology Press</publisher>
<marker>Sami, Gareth, 2002</marker>
<rawString>Boudelaa , Sami; Gaskell, M. Gareth (2002). “A reexamination of the default system for Arabic plurals.” Psychology Press Ltd, vol. 17, pp. 321-343, 2002.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David Cowan</author>
</authors>
<title>Modern Literary Arabic.”</title>
<date>1958</date>
<publisher>Cambridge University Press.</publisher>
<contexts>
<context position="5760" citStr="Cowan, 1958" startWordPosition="899" endWordPosition="900">e suffix oun (!&amp;quot;) in the nominative case and the suffix een (#�) in the accusative &amp; genitive cases. The sound feminine plural is formed by attaching the suffix at (tel) to the singular. Irregular or broken plurals apply mostly to triliteral roots and are formed by altering the singular (as in English: tooth 4 teeth). Many nouns and adjectives have broken plurals (Haywood and Nahmad, 1976). In all cases, singulars are affected by applying a number of different patterns that alter long vowels (Alef (1), Waw (&amp;quot;), Yeh ($), and Alef-Maqsura (%)), within or outside the framework of the consonants (Cowan, 1958). Table 1 gives some examples of BPs and their patterns. Table 1: Broken Plural examples. Singular BP Pattern Plural qlm(&amp;&apos;(, “pen”) Af3Al (LWI) AqlAm()*(l, “pens”) qlb(,4, “heart”) f3Wl (J-t&amp;quot;) qlWb(Y_&apos;(, “hearts”) ktab(ylls, “book”) f3l (J+9) ktb(L.46, “books”) The complexity of Arabic morphology has motivated a great deal of studies. Some of which especially concerned with broken plurals (McCarthy and Prince, 1990b; Kiraz, 1996a; Idrissi, 1997). These are successful to varying degrees, but have a main practical drawback in the context of information retrieval: they assume that words are full</context>
<context position="7562" citStr="Cowan (1958)" startWordPosition="1178" endWordPosition="1179">or identifying a broken plural is to light stem it (strip off any prefixes and/or suffixes), then trying to match the obtained stem against BP patterns found in standard grammars. Since this method is widely used, we adopted it as a baseline. As a first step towards a simple BP matching algorithm, we developed a basic light stemmer for Arabic by modifying an existing root stemmer (Khoja and Garside, 1999). This basic light stemmer was incorporated in a simple BP identification module based on matching, using a list of 39 BP patterns found in grammar books such as Haywood and Nahmad (1976) and Cowan (1958). The simple BP matching algorithm takes in a word; light-stems it to produce morphological information such as stem, prefix and suffix; and returns TRUE if the stem matches one of the BP patterns in the list. The stem matches a BP pattern if and only if they have the same number of letters and the same letters in the same positions, excluding the consonants f (L-i), 3 (t), and l (J) of the basic root f3l (JW, “to do”) found in the pattern. In information retrieval and statistical natural language processing, recall and precision are common measures used to gauge a system’s performance. Recall</context>
</contexts>
<marker>Cowan, 1958</marker>
<rawString>Cowan, David (1958). “Modern Literary Arabic.” Cambridge University Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Abduelbaset Goweder</author>
<author>De Roeck</author>
</authors>
<date>2001</date>
<journal>Assessment of a Significant Arabic Corpus.” ACL</journal>
<booktitle>Arabic language Processing.</booktitle>
<pages>73--79</pages>
<marker>Goweder, De Roeck, 2001</marker>
<rawString>Goweder, Abduelbaset and De Roeck, Anne (2001). “Assessment of a Significant Arabic Corpus.” ACL 2001. Arabic language Processing. pp. 73-79, 2001.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J A Haywood</author>
<author>H M Nahmad</author>
</authors>
<title>A new Arabic Grammar of the written language.”</title>
<date>1976</date>
<location>Lund Humphries London.</location>
<contexts>
<context position="5540" citStr="Haywood and Nahmad, 1976" startWordPosition="861" endWordPosition="864"> two categories: the regular (so-called sound) plurals, and the irregular (so-called broken) plurals. Sound Plurals are formed by appropriate suffixation (like English: hand 4 hands). The sound masculine plural is formed by adding the suffix oun (!&amp;quot;) in the nominative case and the suffix een (#�) in the accusative &amp; genitive cases. The sound feminine plural is formed by attaching the suffix at (tel) to the singular. Irregular or broken plurals apply mostly to triliteral roots and are formed by altering the singular (as in English: tooth 4 teeth). Many nouns and adjectives have broken plurals (Haywood and Nahmad, 1976). In all cases, singulars are affected by applying a number of different patterns that alter long vowels (Alef (1), Waw (&amp;quot;), Yeh ($), and Alef-Maqsura (%)), within or outside the framework of the consonants (Cowan, 1958). Table 1 gives some examples of BPs and their patterns. Table 1: Broken Plural examples. Singular BP Pattern Plural qlm(&amp;&apos;(, “pen”) Af3Al (LWI) AqlAm()*(l, “pens”) qlb(,4, “heart”) f3Wl (J-t&amp;quot;) qlWb(Y_&apos;(, “hearts”) ktab(ylls, “book”) f3l (J+9) ktb(L.46, “books”) The complexity of Arabic morphology has motivated a great deal of studies. Some of which especially concerned with br</context>
<context position="7545" citStr="Haywood and Nahmad (1976)" startWordPosition="1173" endWordPosition="1176">ars, the most obvious method for identifying a broken plural is to light stem it (strip off any prefixes and/or suffixes), then trying to match the obtained stem against BP patterns found in standard grammars. Since this method is widely used, we adopted it as a baseline. As a first step towards a simple BP matching algorithm, we developed a basic light stemmer for Arabic by modifying an existing root stemmer (Khoja and Garside, 1999). This basic light stemmer was incorporated in a simple BP identification module based on matching, using a list of 39 BP patterns found in grammar books such as Haywood and Nahmad (1976) and Cowan (1958). The simple BP matching algorithm takes in a word; light-stems it to produce morphological information such as stem, prefix and suffix; and returns TRUE if the stem matches one of the BP patterns in the list. The stem matches a BP pattern if and only if they have the same number of letters and the same letters in the same positions, excluding the consonants f (L-i), 3 (t), and l (J) of the basic root f3l (JW, “to do”) found in the pattern. In information retrieval and statistical natural language processing, recall and precision are common measures used to gauge a system’s pe</context>
</contexts>
<marker>Haywood, Nahmad, 1976</marker>
<rawString>Haywood, J. A. and Nahmad, H. M. (1976). “A new Arabic Grammar of the written language.” Lund Humphries London.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ismail Hmeidi</author>
<author>Ghassan Kanaan</author>
<author>Martha Evens</author>
</authors>
<title>Design and Implementation of Automatic Indexing for Information Retrieval with Arabic Documents.”</title>
<date>1997</date>
<journal>Journal of the American Society for Information Science.</journal>
<volume>48</volume>
<issue>10</issue>
<pages>867--881</pages>
<contexts>
<context position="25586" citStr="Hmeidi et al. (1997)" startWordPosition="4218" endWordPosition="4221">t we might use ourselves were created to search for particular information in different domains) with their relevance judgments, were used to evaluate the four indexing methods. The results (Figure 8) clearly indicate that the proposed “stem+BP” indexing method significantly outperforms the three standard indexing/stemming methods (p (1-tailed) &lt; .01 both by the Sign test and the Wilcoxon signed-rank test). This suggests that stemming has a substantial effect on information retrieval for highly inflected languages such as Arabic, confirming the results obtained by AlKharashi and Evens (1994), Hmeidi et al. (1997), Abu-Salem et al. (1999), Larkey and Connell (2001), and Larkey et al. (2002). Figure 8: The Average Recall vs. Precision Figures of the Four Indexing Methods for 50 Queries. 6. Conclusion We discussed several different methods for BP identification: simple BP matching, affix-based simple BP matching, simple BP matching+POS, manually-and-DT restricted, and dictionary-based. Although the simplest methods had poor or mediocre results, they were used to bootstrap better performing methods. The baseline, the simple BP matching method, has a high recall but a low precision (~14%). We attempted to </context>
</contexts>
<marker>Hmeidi, Kanaan, Evens, 1997</marker>
<rawString>Hmeidi, Ismail; Kanaan, Ghassan; and Evens, Martha (1997). “Design and Implementation of Automatic Indexing for Information Retrieval with Arabic Documents.” Journal of the American Society for Information Science. 48(10) (pp. 867-881), 1997.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ali Idrissi</author>
</authors>
<title>Plural Formation in Arabic.”</title>
<date>1997</date>
<booktitle>In Current issues in Linguistic Theory, Perspectives on Arabic Linguistics X. Edited by Mushira Eid and</booktitle>
<volume>153</volume>
<pages>123--145</pages>
<contexts>
<context position="6210" citStr="Idrissi, 1997" startWordPosition="964" endWordPosition="965">ber of different patterns that alter long vowels (Alef (1), Waw (&amp;quot;), Yeh ($), and Alef-Maqsura (%)), within or outside the framework of the consonants (Cowan, 1958). Table 1 gives some examples of BPs and their patterns. Table 1: Broken Plural examples. Singular BP Pattern Plural qlm(&amp;&apos;(, “pen”) Af3Al (LWI) AqlAm()*(l, “pens”) qlb(,4, “heart”) f3Wl (J-t&amp;quot;) qlWb(Y_&apos;(, “hearts”) ktab(ylls, “book”) f3l (J+9) ktb(L.46, “books”) The complexity of Arabic morphology has motivated a great deal of studies. Some of which especially concerned with broken plurals (McCarthy and Prince, 1990b; Kiraz, 1996a; Idrissi, 1997). These are successful to varying degrees, but have a main practical drawback in the context of information retrieval: they assume that words are fully vowelised. Unfortunately, short vowels are usually not written in published Arabic text, with the exception of the religious texts (e.g., the Holy Quran), poetry, and books for school children (Abuleil and Evens, 1998). 3. Different Approaches to BP Identification We tested several different approaches for BP identification: simple BP matching, restricted BP matching (hand restricted &amp; decision tree restricted), and a dictionary approach. 3.1 T</context>
</contexts>
<marker>Idrissi, 1997</marker>
<rawString>Idrissi, Ali (1997). “Plural Formation in Arabic.” In Current issues in Linguistic Theory, Perspectives on Arabic Linguistics X. Edited by Mushira Eid and Robert Ratcliffe. Vol 153, pp 123-145.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Khoja</author>
<author>R Garside</author>
</authors>
<title>Stemming Arabic text.” Computing Department,</title>
<date>1999</date>
<institution>Lancaster University, Lancaster, United Kingdom.</institution>
<note>http://www.comp.lancs.ac.uk/computing/users/khoja/ste mmer.ps</note>
<contexts>
<context position="7358" citStr="Khoja and Garside, 1999" startWordPosition="1141" endWordPosition="1144">and restricted &amp; decision tree restricted), and a dictionary approach. 3.1 The Simple BP Matching Approach Given the characterisation of broken plurals one finds in standard Arabic grammars, the most obvious method for identifying a broken plural is to light stem it (strip off any prefixes and/or suffixes), then trying to match the obtained stem against BP patterns found in standard grammars. Since this method is widely used, we adopted it as a baseline. As a first step towards a simple BP matching algorithm, we developed a basic light stemmer for Arabic by modifying an existing root stemmer (Khoja and Garside, 1999). This basic light stemmer was incorporated in a simple BP identification module based on matching, using a list of 39 BP patterns found in grammar books such as Haywood and Nahmad (1976) and Cowan (1958). The simple BP matching algorithm takes in a word; light-stems it to produce morphological information such as stem, prefix and suffix; and returns TRUE if the stem matches one of the BP patterns in the list. The stem matches a BP pattern if and only if they have the same number of letters and the same letters in the same positions, excluding the consonants f (L-i), 3 (t), and l (J) of the ba</context>
</contexts>
<marker>Khoja, Garside, 1999</marker>
<rawString>Khoja, S. and Garside, R. (1999) “Stemming Arabic text.” Computing Department, Lancaster University, Lancaster, United Kingdom. http://www.comp.lancs.ac.uk/computing/users/khoja/ste mmer.ps</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Kiraz</author>
</authors>
<title>Analysis of the Arabic broken plural and diminutive.</title>
<date>1996</date>
<booktitle>In Proceedings of the 5th International Conference and Exhibition on Multi-Lingual Computing.</booktitle>
<location>Cambridge.</location>
<contexts>
<context position="6193" citStr="Kiraz, 1996" startWordPosition="962" endWordPosition="963">applying a number of different patterns that alter long vowels (Alef (1), Waw (&amp;quot;), Yeh ($), and Alef-Maqsura (%)), within or outside the framework of the consonants (Cowan, 1958). Table 1 gives some examples of BPs and their patterns. Table 1: Broken Plural examples. Singular BP Pattern Plural qlm(&amp;&apos;(, “pen”) Af3Al (LWI) AqlAm()*(l, “pens”) qlb(,4, “heart”) f3Wl (J-t&amp;quot;) qlWb(Y_&apos;(, “hearts”) ktab(ylls, “book”) f3l (J+9) ktb(L.46, “books”) The complexity of Arabic morphology has motivated a great deal of studies. Some of which especially concerned with broken plurals (McCarthy and Prince, 1990b; Kiraz, 1996a; Idrissi, 1997). These are successful to varying degrees, but have a main practical drawback in the context of information retrieval: they assume that words are fully vowelised. Unfortunately, short vowels are usually not written in published Arabic text, with the exception of the religious texts (e.g., the Holy Quran), poetry, and books for school children (Abuleil and Evens, 1998). 3. Different Approaches to BP Identification We tested several different approaches for BP identification: simple BP matching, restricted BP matching (hand restricted &amp; decision tree restricted), and a dictionar</context>
</contexts>
<marker>Kiraz, 1996</marker>
<rawString>Kiraz, G. (1996a). Analysis of the Arabic broken plural and diminutive. In Proceedings of the 5th International Conference and Exhibition on Multi-Lingual Computing. Cambridge.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L S Larkey</author>
<author>M E Connell</author>
</authors>
<title>Arabic information retrieval at UMass in TREC-10.”</title>
<date>2001</date>
<booktitle>In TREC 2001.</booktitle>
<location>Gaithersburg: NIST,</location>
<contexts>
<context position="25638" citStr="Larkey and Connell (2001)" startWordPosition="4226" endWordPosition="4229"> for particular information in different domains) with their relevance judgments, were used to evaluate the four indexing methods. The results (Figure 8) clearly indicate that the proposed “stem+BP” indexing method significantly outperforms the three standard indexing/stemming methods (p (1-tailed) &lt; .01 both by the Sign test and the Wilcoxon signed-rank test). This suggests that stemming has a substantial effect on information retrieval for highly inflected languages such as Arabic, confirming the results obtained by AlKharashi and Evens (1994), Hmeidi et al. (1997), Abu-Salem et al. (1999), Larkey and Connell (2001), and Larkey et al. (2002). Figure 8: The Average Recall vs. Precision Figures of the Four Indexing Methods for 50 Queries. 6. Conclusion We discussed several different methods for BP identification: simple BP matching, affix-based simple BP matching, simple BP matching+POS, manually-and-DT restricted, and dictionary-based. Although the simplest methods had poor or mediocre results, they were used to bootstrap better performing methods. The baseline, the simple BP matching method, has a high recall but a low precision (~14%). We attempted to improve the performance of the BP identification alg</context>
</contexts>
<marker>Larkey, Connell, 2001</marker>
<rawString>Larkey, L. S. and Connell, M. E. (2001) “Arabic information retrieval at UMass in TREC-10.” In TREC 2001. Gaithersburg: NIST, 2001.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L Larkey</author>
<author>L Ballesteros</author>
<author>M E Connell</author>
</authors>
<title>Improving Stemming for Arabic Information Retrieval: Light Stemming and Co-occurrence Analysis.”</title>
<date>2002</date>
<booktitle>In SIGIR’02,</booktitle>
<pages>275--282</pages>
<location>Tampere, Finland,</location>
<contexts>
<context position="25664" citStr="Larkey et al. (2002)" startWordPosition="4231" endWordPosition="4234">different domains) with their relevance judgments, were used to evaluate the four indexing methods. The results (Figure 8) clearly indicate that the proposed “stem+BP” indexing method significantly outperforms the three standard indexing/stemming methods (p (1-tailed) &lt; .01 both by the Sign test and the Wilcoxon signed-rank test). This suggests that stemming has a substantial effect on information retrieval for highly inflected languages such as Arabic, confirming the results obtained by AlKharashi and Evens (1994), Hmeidi et al. (1997), Abu-Salem et al. (1999), Larkey and Connell (2001), and Larkey et al. (2002). Figure 8: The Average Recall vs. Precision Figures of the Four Indexing Methods for 50 Queries. 6. Conclusion We discussed several different methods for BP identification: simple BP matching, affix-based simple BP matching, simple BP matching+POS, manually-and-DT restricted, and dictionary-based. Although the simplest methods had poor or mediocre results, they were used to bootstrap better performing methods. The baseline, the simple BP matching method, has a high recall but a low precision (~14%). We attempted to improve the performance of the BP identification algorithm by (i) using affix </context>
</contexts>
<marker>Larkey, Ballesteros, Connell, 2002</marker>
<rawString>Larkey, L.; Ballesteros, L.; and Connell, M.E (2002). “Improving Stemming for Arabic Information Retrieval: Light Stemming and Co-occurrence Analysis.” In SIGIR’02, August 11-15, 2002, Tampere, Finland, pp 275–282, 2002.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Christopher D Manning</author>
<author>Hinrich Schutze</author>
</authors>
<date>1999</date>
<journal>Foundations of Statistical Natural Language Processing.”</journal>
<contexts>
<context position="8457" citStr="Manning and Schutze, 1999" startWordPosition="1336" endWordPosition="1339">same number of letters and the same letters in the same positions, excluding the consonants f (L-i), 3 (t), and l (J) of the basic root f3l (JW, “to do”) found in the pattern. In information retrieval and statistical natural language processing, recall and precision are common measures used to gauge a system’s performance. Recall (R) is the fraction of target items that a system selected, while the precision (P) is the fraction of selected items that a system got right. A third measure known as F-measure (F)2 (combines R and P) is used in some situation where R is very high and P is very low (Manning and Schutze, 1999). We implemented R, P, and F to evaluate approaches we present in this paper. The simple BP matching algorithm was preliminarily evaluated on a subset of an Arabic corpus (referred to as A_Corpus1) obtained from Khoja (1999). It contains 7172 words whose BP instances were identified (this first set of BPs is referred below as data set1). The results showed that the simple BP matching approach has very high recall (99.71%), but low precision (13.73%). We also tested two slightly modified versions of the simple BP matching algorithm, exploiting information about affixes information and proper na</context>
</contexts>
<marker>Manning, Schutze, 1999</marker>
<rawString>Manning, Christopher D. and Schutze, Hinrich (1999). “Foundations of Statistical Natural Language Processing.”</rawString>
</citation>
<citation valid="true">
<authors>
<author>John J McCarthy</author>
<author>Alan S Prince</author>
</authors>
<date>1990</date>
<booktitle>Foot and Word in Prosodic Morphology: The Arabic Broken Plural.” Natural Language and Linguistic Theory 8,</booktitle>
<pages>209--282</pages>
<contexts>
<context position="6179" citStr="McCarthy and Prince, 1990" startWordPosition="958" endWordPosition="961">, singulars are affected by applying a number of different patterns that alter long vowels (Alef (1), Waw (&amp;quot;), Yeh ($), and Alef-Maqsura (%)), within or outside the framework of the consonants (Cowan, 1958). Table 1 gives some examples of BPs and their patterns. Table 1: Broken Plural examples. Singular BP Pattern Plural qlm(&amp;&apos;(, “pen”) Af3Al (LWI) AqlAm()*(l, “pens”) qlb(,4, “heart”) f3Wl (J-t&amp;quot;) qlWb(Y_&apos;(, “hearts”) ktab(ylls, “book”) f3l (J+9) ktb(L.46, “books”) The complexity of Arabic morphology has motivated a great deal of studies. Some of which especially concerned with broken plurals (McCarthy and Prince, 1990b; Kiraz, 1996a; Idrissi, 1997). These are successful to varying degrees, but have a main practical drawback in the context of information retrieval: they assume that words are fully vowelised. Unfortunately, short vowels are usually not written in published Arabic text, with the exception of the religious texts (e.g., the Holy Quran), poetry, and books for school children (Abuleil and Evens, 1998). 3. Different Approaches to BP Identification We tested several different approaches for BP identification: simple BP matching, restricted BP matching (hand restricted &amp; decision tree restricted), a</context>
</contexts>
<marker>McCarthy, Prince, 1990</marker>
<rawString>McCarthy, John J.; and Prince, Alan S (1990). “Foot and Word in Prosodic Morphology: The Arabic Broken Plural.” Natural Language and Linguistic Theory 8, 209–282.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J R Quinlan</author>
</authors>
<date>1993</date>
<booktitle>C4.5: Programs for Machine Learning.”</booktitle>
<publisher>Morgan Kaufmann.</publisher>
<location>San Mateo:</location>
<contexts>
<context position="17508" citStr="Quinlan (1993)" startWordPosition="2825" endWordPosition="2826">a set already used to evaluate both simple and restricted BP matching approaches, data set1. The results of the evaluation show that precision significantly improves (to 81.18%), while recall is still perfect (100%). The F-measure recorded an increase (89.61%) due to the improvement in the precision. The results suggest that the dictionary approach outperforms both the simple and manually restricted BP matching approaches. 3.4 Learning Restrictions Automatically Decision tree learning is one of the most widely used classification methods. The decision tree learning algorithm C4.5 developed by Quinlan (1993) was used to generate a set of rules in the form of a decision tree and decision rules (if-then statements). Because we are interested in how we could restrict the BP patterns, specifically restricting the meta characters of the BP patterns (Fa, Ain, and Lam), we chose them to be the attributes which describe our data. The outcome (class) of each case is given as BP or NBP. Figure 3 shows the classes and the name &amp; description of each attribute. BP, NBP. Fa: discrete (list of Arabic alaphabet). Ain: discrete (list of Arabic alaphabet). Lam: discrete (list of Arabic alaphabet). Figure 3: Set of</context>
</contexts>
<marker>Quinlan, 1993</marker>
<rawString>Quinlan, J. R. (1993). “C4.5: Programs for Machine Learning.” San Mateo: Morgan Kaufmann.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>