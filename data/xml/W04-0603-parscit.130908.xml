<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.010860">
<title confidence="0.932739">
A web application using RDF/RDFS for metadata navigation
</title>
<note confidence="0.409357333333333">
Xi S. Guo, Mark Chaudhary, Christopher Dozier
Yogi Arumainayagam, Venkatesan Subramanian
Research &amp; Development
</note>
<address confidence="0.431405666666667">
Thomson Legal &amp; Regulatory
610 Opperman Drive
Eagan, MN 55123, USA
</address>
<email confidence="0.947989">
xi.guo@thomson.com
</email>
<sectionHeader confidence="0.996682" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999952428571429">
This paper describes using RDF/RDFS/XML to cre-
ate and navigate a metadata model of relationships
among entities in text. The metadata we create
is roughly an order of magnitude smaller than the
content being modeled, it provides the end-user
with context sensitive information about the hyper-
linked entities in focus. These entities at the core
of the model are originally found and resolved us-
ing a combination of information extraction and
record linkage techniques. The RDF/RDFS meta-
data model is then used to ”look ahead” and navi-
gate to related information. An RDF aware front-
end web application streamlines the presentation of
information to the end user.
</bodyText>
<sectionHeader confidence="0.999517" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.99973156">
As an information provider, Thomson West stores
vast quantities of documents that are served up in
response to user queries. Determining the relation-
ships between entities of interest in these documents
can be a complex and time consuming part of end-
user research. Nor is this sort of information always
explicitly presented in the documents retrieved by
searches. Automating the process of discovery is
complicated by the need to uniquely identify and
resolve ambiguities and co-references between en-
tities.
Our system relies on various NLP techniques and
name/entity taggers to identify attorney and judge
names in news articles on WestlawTM. These
names are then tagged with unique reference iden-
tifiers that link them to their records in our legal di-
rectory. The relationships between these individuals
and other entities like their firm (or court name for
judges), and title of the document in which they are
found are stored as RDF metadata.
A simple representation of relationships among
these entities is shown in Figure 1. Documents
make references to attorneys. Using NLP tech-
niques, each occurrence is resolved to a unique ref-
erence identification. The metadata then allows us
</bodyText>
<figureCaption confidence="0.992106">
Figure 1: Relationships between entities
</figureCaption>
<bodyText confidence="0.999954666666667">
to expose meaningful relationships among entities
in text. Storing this information as metadata in
the UI allows us to look ahead. Hovering over a
name, the end user is able to see which firms they
are affiliated with. The user is also able to look
ahead to see all the other documents that the per-
son occurs in. In addition, we also know which
firm each attorney works for and this relationship
allows us to see all the other attorneys who work for
the same firm. This information is not present in
any of the documents retrieved but is inferred from
our RDF/RDFS (Lassila, 2000), (Klyne and Carroll,
2004), (W3C, 1999), (W3C, 2004) metadata model.
The RDF/RDFS metadata model helps to dynami-
cally resolve relationship among entities during the
time of front end rendering. This system could be
extended to incorporate additional relationships be-
tween other kinds of data.
</bodyText>
<sectionHeader confidence="0.978036" genericHeader="introduction">
2 Architecture
</sectionHeader>
<bodyText confidence="0.999629125">
Content in our architecture consists of plain text
news documents and RDF metadata. Both are
stored in an XML content repository. In addition
we also store Thomson West’s legal database of at-
torney profiles in the same repository as well. With
the content stored, we use a name/entity tagger
in combination with methods described in (Dozier
and Haschart, 2000) to link occurrences of attorney
</bodyText>
<figureCaption confidence="0.939873">
Figure 2: High Level Architecture
</figureCaption>
<bodyText confidence="0.999985805555555">
names within the plain text news documents to their
database profile record.
There are several reasons that motivate us to build
this web application using RDF/RDFS. Firstly, our
existing data model put metadata and content in the
same data repository, the relationships or links are
embedded inside content. This makes it very diffi-
cult to build new business products since developers
have to write programs to look at content first, ex-
tract information out of it and then put this extracted
information somewhere to enable front-end render-
ing. The disadvantage of this approach is being able
to dynamically maintain the integrity of both data
repository and relationship repository in a rapidly
changing environment. Both of these repositories
need to be updated whenever any relationships get
updated. The use of RDF/RDFS separates relation-
ships from content so manipulation of metadata is
easier and less expensive.
RDF/RDFS’s ability to provide a data infrastruc-
ture for entities, relationships extracted from NLP
applications is the second reason for choosing it as
our data model. In our domain, we have different
kinds of entities embedded in news articles, law re-
views, legal cases etc. These entities include attor-
ney name, judge name, and law firm names. We
are interested in not only identifying them in con-
tent but also finding their relationships and linking
them together. RDF/RDFS allows us to accomplish
this.
Architecture for this application uses MVC
(Model View Controller) design pattern for separat-
ing graphical interface of one application from its
backend artifacts such as code and data. This classic
architectural design pattern provided the flexibility
to maintain multiple views of backend data.
</bodyText>
<subsectionHeader confidence="0.948127">
2.1 RDF/RDFS/XML Data Model
</subsectionHeader>
<bodyText confidence="0.999358020408163">
Using the MVC design pattern, our data model rep-
resents data used by the application and the rules
for accessing this data. A RDF/RDFS/XML model
is created to represent the data and a set of APIs is
provided for data accessing purpose.
Our prototype contains 911274 legal profession-
als’ profiles from West’s Legal Directory and 2000
news documents. The news documents are pre-
processed using our name entity tagger. The tagging
process is able to generate a list of people templates
that are then fed into an entity reference resolution
program. This allows us to resolve each extracted
name template to its specific record from West’s Le-
gal Directory.
Our data model environment contains separate
metadata and content repositories, the XML content
repository and the RDF metadata repository. We
convert the news articles to XML and load them to
XML content repository. Our search API features of
this repository allow us to perform full text search-
ing inside content. Each news article takes the form
of one XML document identified by a unique refer-
ence number. Names found inside these documents
by the name tagger are identified with xml elements.
Besides 2000 news articles, WLD legal profession-
als’ profiles are also loaded to this content reposi-
tory with each profile also associated with a unique
identifying number.
Our RDF metadata repository employs on
RDF/RDFS model. A simple RDF schema formally
specifies groups of related resources and the rela-
tionships between these resources. Figure 3 demon-
strates three major RDF resources; Document, Peo-
ple and Organization. The Attorney and Judge re-
sources are subclasses of the People resource. Each
instance of these resources has a URI associated
with it. Resource related properties are also de-
fined in this schema. The ranges of some properties
of resources are themselves resources from other
domains. For example, resource Document has a
property PeopleInDocument. This property has its
domain in Document but its range is in the People
domain. The schema allows us to specify the data
model so our metadata navigation application could
follow relationship links specified in it. More de-
tails about this schema can be found in Appendix
A.
Based on this schema, the RDF metadata repos-
itory is built to represent the relationships among
</bodyText>
<figureCaption confidence="0.994753">
Figure 3: RDF schema of the application
</figureCaption>
<bodyText confidence="0.999913777777778">
news articles, attorneys, judges, courts and law
firms. The metadata building process involves sev-
eral steps that are entity and relation extraction from
the tagged XML content repository, RDF metadata
generation, and RDF metadata loading. The end
result is an RDF metadata repository with full text
search capability. Figure 4 shows samples of a por-
tion of the metadata model depicting the occurrence
of two attorneys in a Wall Street Journal document.
During the time the metadata repository was
built, our schema was only used for data validation
purpose. Currently we are exploring one approach
that leverages the expressive power of logic pro-
gramming tool such as Prolog to navigate the RDF
schema graph; this schema navigation should be
able to enable automatic metadata collection about
particular concepts and then build corresponded
RDF metadata based upon.
Note that in this application, URIs (unique ref-
erence identification) are used extensively. Each
document in both content and metadata reposito-
ries has a unique number associated with it. This
unique number works as a unique resource link and
is utilized by the RDF documents in the metadata
repository. With this unique number, the RDF docu-
ment can then be linked to any xml or rdf document,
and even to elements inside these documents using
</bodyText>
<figureCaption confidence="0.983675">
Figure 4: Sample RDF metadata
</figureCaption>
<bodyText confidence="0.9293276">
XPATH.
In the sample of the RDF data presented in Table
1, the WSJ document with URI ”WSJ210572229”
entitled ”Market on a High Wire” contains ref-
erences to two attorneys; Froehlich and Madden.
</bodyText>
<figureCaption confidence="0.976674">
Figure 5: Small RDF Graph of one metadata sample
</figureCaption>
<bodyText confidence="0.9999245">
Froehlich has URI ”WLD0293087701” and Mad-
den has URI ”WLD0293086676”. The metadata
also contains the XPATH of the attorney names in-
side this WSJ document as well as the XPATH to
other properties of the document such as news title
and news content.
Figure 5 shows a small RDF graph gener-
ated from samples in Table 1. In this graph,
”WSJ210572229” and ”WLD0293087701” are two
major resources from two different domains. The
RDF properties of both resources point to each other
through predicates. These pointing edges represent
relationships among multiple entities and they form
the infrastructure for our navigational map that will
eventually be presented to end-user.
Besides metadata and content storage, the data
model in MVC also provides a set of APIs for ac-
cessing both metadata and content. In XML content
repository, APIs exist for single XML document re-
trieval by URI and full text search by user queries.
In the RDF metadata repository, APIs exist for sin-
gle RDF document retrieval by URI, RDF resource
link retrieval using ARP, an RDF parser from HP
and RDF metadata full text search.
</bodyText>
<subsectionHeader confidence="0.997902">
2.2 Application Controller
</subsectionHeader>
<bodyText confidence="0.999443333333333">
The Controller in our MVC patterned application
contains our metadata navigation logic. The pur-
pose of this layer is to capture all requests from the
front view and to interact with the data model to
provide the data wanted by the end user.
The general scenario of our application starts out
with a user typing in queries. These queries are then
passed to the XML content repository which re-
turns matched search results with navigation meta-
data embedded inside. All of this metadata is gener-
ated through the controller layer that interacts with
both RDF and XML repository. The results then are
presented to the user who can click on entities of in-
terest (which are RDF resources) and thus navigate
through our metadata repository.
</bodyText>
<subsectionHeader confidence="0.998057">
2.3 Front View
</subsectionHeader>
<bodyText confidence="0.999945">
All information rendering happens in the front view
layer. This layer interacts with end users and speci-
fies how final data can be represented. Since back-
end data is either RDF or XML, we use XSLT to
convert this to HTML/JSP pages that work in the
front end browser.
Appendix B shows a snapshot of our application
depicting a single Wall Street Journal article con-
taining attorney names. The end user can roll over
this name link and using the pop-up menu, navigate
to other corresponding entities such as other news
documents that mention the same name, or law firm
this attorney is working in. This metadata-based
navigation is described in detail in next section.
</bodyText>
<sectionHeader confidence="0.91193" genericHeader="method">
3 Metadata based Navigation
</sectionHeader>
<bodyText confidence="0.999968642857143">
By tagging entity information and resolving cross
document co-references for attorneys and judges,
we were able to identify all the documents a partic-
ular attorney or judge appeared in. The RDF meta-
data model goes a step further weaving together
the relationships between attorneys, judges, firms,
courts and the documents that reference them.
With the metadata model it now becomes easier
for the user to see all related information from any
particular node. The combination of information
extracted from documents with information from
authority files, gives us a dynamic view of rela-
tionships in the content that can answer questions
such as ”What other attorneys were mentioned in
the same article?” and ”Who else works at the same
firm as this attorney?” These relationships facilitate
navigation between related entities. Figure 6 shows
how the metadata model allows the user to navigate
from one related node to the next. Not only are we
able to tell the firm an attorney belongs to even if
that wasn’t specifically mentioned in the text of the
document, but we can also use the metadata model
to shift our focus onto the firm node and immedi-
ately see a list of other attorneys related to that firm.
Switching to any one of those nodes (attorneys) im-
mediately shows us articles related to the next attor-
ney. In a similar fashion we can move from judges
to courts and articles and back.
</bodyText>
<sectionHeader confidence="0.997445" genericHeader="conclusions">
4 Conclusion
</sectionHeader>
<bodyText confidence="0.999769071428572">
This application utilizes RDF/RDFS to build a data
model that allows for easy maintenance of reference
links embedded in content. This data model also fa-
cilitates development of metadata navigation. By
just looking through metadata repository, the appli-
cation can decide the best way to utilize rich infor-
mation buried inside content repository.
We feel that this application can be extended to
provide inferencing capability. The hard wiring of
the logic inside the metadata repository does not
currently provide any formalism to infer hidden re-
lationships from the facts. Implementing this infer-
encing mechanism would bring us closer to our se-
mantic web goal.
</bodyText>
<sectionHeader confidence="0.982797" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.705261714285714">
Christopher Dozier and Robert Haschart. 2000.
Automatic extraction and linking of person
names in legal text. Proceedings of RIAO-2000:
Recherche d’Informations Assiste par Ordina-
teur.
Graham Klyne and Jeremy J. Carroll.
2004. Resource description framework
Figure 6: Navigation between related metadata
(rdf): Concepts and abstract syntax.
http://www.w3.org/TR/2004/REC-rdf-concepts-
20040210/.
Ora Lassila. 2000. The resource description frame-
work. IEEE Intelligent Systems, 15(6):67–69.
W3C. 1999. Resource description
framework (rdf) model and syntax.
http://www.w3.org/TR/1999/REC-rdf-syntax-
19990222/.
W3C. 2004. Rdf vocabulary descrip-
tion language 1.0: Rdf schema.
http://www.w3.org/TR/2004/REC-rdf-schema-
20040210/.
</reference>
<figure confidence="0.989454481927711">
Appendix
A A RDF Schema for data model of our application
&lt;?xml version=’1.0’ encoding=’ISO-8859-1’?&gt;
&lt;!DOCTYPE rdf:RDF [ &lt;!ENTITY rdf ’http://www.w3.org/1999/02/22-rdf-syntax-ns#’&gt;
&lt;!ENTITY PeopleCite ’http://www.thomson.com/PeopleCite#’&gt;
&lt;!ENTITY rdfs ’http://www.w3.org/TR/1999/PR-rdf-schema-19990303#’&gt;]&gt;
&lt;rdf:RDF xmlns:rdf=”&amp;rdf;” xmlns:PeopleCite=”&amp;PeopleCite;” xmlns:rdfs=”&amp;rdfs;”&gt;
&lt;rdfs:Class rdf:about=”&amp;PeopleCite;Document”&gt;
&lt;rdfs:subClassOf rdf:resource=”&amp;rdfs;Resource”/&gt;
&lt;/rdfs:Class&gt;
&lt;rdf:Property rdf:about=”&amp;PeopleCite;ContentOfDocument”&gt;
&lt;rdfs:domain rdf:resource=”&amp;PeopleCite;Document”/&gt;
&lt;rdfs:range rdf:resource=”&amp;rdfs;Resource”/&gt;
&lt;/rdf:Property&gt;
&lt;rdf:Property rdf:about=”&amp;PeopleCite;DocumentURI”&gt;
&lt;rdfs:comment&gt; The Unique Identification Number of each document &lt;/rdfs:comment&gt;
&lt;rdfs:domain rdf:resource=”&amp;PeopleCite;Document”/&gt;
&lt;rdfs:range rdf:resource=”&amp;rdfs;Literal”/&gt;
&lt;/rdf:Property&gt;
&lt;rdfs:Class rdf:about=”&amp;PeopleCite;WSJ”&gt;
&lt;rdfs:comment xml:space=’preserve’&gt;
&lt;![CDATA[&lt;&lt;Wall Street Journal&gt;&gt;News Data Repository]]&gt;
&lt;/rdfs:comment&gt;
&lt;rdfs:subClassOf rdf:resource=”&amp;PeopleCite;Document”/&gt;
&lt;/rdfs:Class&gt;
&lt;rdf:Property rdf:about=”&amp;PeopleCite;PersonInDocument”&gt;
&lt;rdfs:domain rdf:resource=”&amp;PeopleCite;Document”/&gt;
&lt;rdfs:range rdf:resource=”&amp;PeopleCite;Person”/&gt;
&lt;/rdf:Property&gt;
&lt;rdfs:Class rdf:about=”&amp;PeopleCite;Person”&gt;
&lt;rdfs:subClassOf rdf:resource=”&amp;rdfs;Resource”/&gt;
&lt;/rdfs:Class&gt;
&lt;rdfs:Class rdf:about=”&amp;PeopleCite;Attorney”&gt;
&lt;rdfs:subClassOf rdf:resource=”&amp;PeopleCite;Person”/&gt;
&lt;/rdfs:Class&gt;
&lt;rdfs:Class rdf:about=”&amp;PeopleCite;Judge”&gt;
&lt;rdfs:subClassOf rdf:resource=”&amp;PeopleCite;Person”/&gt;
&lt;/rdfs:Class&gt;
&lt;rdf:Property rdf:about=”&amp;PeopleCite;PersonURI”&gt;
&lt;rdfs:domain rdf:resource=”&amp;PeopleCite;Person”/&gt;
&lt;rdfs:range rdf:resource=”&amp;rdfs;Literal”/&gt;
&lt;/rdf:Property&gt;
&lt;rdf:Property rdf:about=”&amp;PeopleCite;LastNameOfPerson”&gt;
&lt;rdfs:domain rdf:resource=”&amp;PeopleCite;Person”/&gt;
&lt;rdfs:range rdf:resource=”&amp;rdfs;Resource”/&gt;
&lt;/rdf:Property&gt;
&lt;rdf:Property rdf:about=”&amp;PeopleCite;FirstNameOfPerson”&gt;
&lt;rdfs:domain rdf:resource=”&amp;PeopleCite;Person”/&gt;
&lt;rdfs:range rdf:resource=”&amp;rdfs;Resource”/&gt;
&lt;/rdf:Property&gt;
&lt;rdf:Property rdf:about=”&amp;PeopleCite;MiddleNameOfPerson”&gt;
&lt;rdfs:domain rdf:resource=”&amp;PeopleCite;Person”/&gt;
&lt;rdfs:range rdf:resource=”&amp;rdfs;Resource”/&gt;
&lt;/rdf:Property&gt;
&lt;rdf:Property rdf:about=”&amp;PeopleCite;AffilicationOfPerson”&gt;
&lt;rdfs:domain rdf:resource=”&amp;PeopleCite;Person”/&gt;
&lt;rdfs:range rdf:resource=”&amp;PeopleCite;Organization”/&gt;
&lt;/rdf:Property&gt;
&lt;rdf:Property rdf:about=”&amp;PeopleCite;AddressOfPerson”&gt;
&lt;rdfs:domain rdf:resource=”&amp;PeopleCite;Person”/&gt;
&lt;rdfs:range rdf:resource=”&amp;rdfs;Resource”/&gt;
&lt;/rdf:Property&gt;
&lt;rdf:Property rdf:about=”&amp;PeopleCite;CitingDocumentOfPerson”&gt;
&lt;rdfs:domain rdf:resource=”&amp;PeopleCite;Person”/&gt;
&lt;rdfs:range rdf:resource=”&amp;PeopleCite;Document”/&gt;
&lt;/rdf:Property&gt;
&lt;rdfs:Class rdf:about=”&amp;PeopleCite;Organization”&gt;
&lt;rdfs:subClassOf rdf:resource=”&amp;rdfs;Resource”/&gt;
&lt;/rdfs:Class&gt;
&lt;rdf:Property rdf:about=”&amp;PeopleCite;OrganizationURI”&gt;
&lt;rdfs:domain rdf:resource=”&amp;PeopleCite;Organization”/&gt;
&lt;rdfs:range rdf:resource=”&amp;rdfs;Literal”/&gt;
&lt;/rdf:Property&gt;
&lt;rdf:Property rdf:about=”&amp;PeopleCite;NameOfOrganization”&gt;
&lt;rdfs:domain rdf:resource=”&amp;PeopleCite;Organization”/&gt;
&lt;rdfs:range rdf:resource=”&amp;rdfs;Resource”/&gt;
&lt;/rdf:Property&gt;
&lt;rdf:Property rdf:about=”&amp;PeopleCite;AddressOfOrganization”&gt;
&lt;rdfs:domain rdf:resource=”&amp;PeopleCite;Organization”/&gt;
&lt;rdfs:range rdf:resource=”&amp;rdfs;Resource”/&gt;
&lt;/rdf:Property&gt;
&lt;/rdf:RDF&gt;
B One snapshot of our metadata web application
</figure>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.854708">
<title confidence="0.999368">A web application using RDF/RDFS for metadata navigation</title>
<author confidence="0.970699">Xi S Guo</author>
<author confidence="0.970699">Mark Chaudhary</author>
<author confidence="0.970699">Christopher Yogi Arumainayagam</author>
<author confidence="0.970699">Venkatesan Subramanian</author>
<affiliation confidence="0.969802">Research &amp; Development Thomson Legal &amp; Regulatory</affiliation>
<address confidence="0.9896585">610 Opperman Eagan, MN 55123, USA</address>
<email confidence="0.999849">xi.guo@thomson.com</email>
<abstract confidence="0.9989516">This paper describes using RDF/RDFS/XML to create and navigate a metadata model of relationships among entities in text. The metadata we create is roughly an order of magnitude smaller than the content being modeled, it provides the end-user with context sensitive information about the hyperlinked entities in focus. These entities at the core of the model are originally found and resolved using a combination of information extraction and record linkage techniques. The RDF/RDFS metadata model is then used to ”look ahead” and navigate to related information. An RDF aware frontend web application streamlines the presentation of information to the end user.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Christopher Dozier</author>
<author>Robert Haschart</author>
</authors>
<title>Automatic extraction and linking of person names in legal text.</title>
<date>2000</date>
<booktitle>Proceedings of RIAO-2000: Recherche d’Informations Assiste par Ordinateur.</booktitle>
<contexts>
<context position="3419" citStr="Dozier and Haschart, 2000" startWordPosition="544" endWordPosition="547">W3C, 2004) metadata model. The RDF/RDFS metadata model helps to dynamically resolve relationship among entities during the time of front end rendering. This system could be extended to incorporate additional relationships between other kinds of data. 2 Architecture Content in our architecture consists of plain text news documents and RDF metadata. Both are stored in an XML content repository. In addition we also store Thomson West’s legal database of attorney profiles in the same repository as well. With the content stored, we use a name/entity tagger in combination with methods described in (Dozier and Haschart, 2000) to link occurrences of attorney Figure 2: High Level Architecture names within the plain text news documents to their database profile record. There are several reasons that motivate us to build this web application using RDF/RDFS. Firstly, our existing data model put metadata and content in the same data repository, the relationships or links are embedded inside content. This makes it very difficult to build new business products since developers have to write programs to look at content first, extract information out of it and then put this extracted information somewhere to enable front-en</context>
</contexts>
<marker>Dozier, Haschart, 2000</marker>
<rawString>Christopher Dozier and Robert Haschart. 2000. Automatic extraction and linking of person names in legal text. Proceedings of RIAO-2000: Recherche d’Informations Assiste par Ordinateur.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Graham Klyne</author>
<author>Jeremy J Carroll</author>
</authors>
<title>Resource description framework Figure 6: Navigation between related metadata (rdf): Concepts and abstract syntax.</title>
<date>2004</date>
<note>http://www.w3.org/TR/2004/REC-rdf-concepts20040210/.</note>
<contexts>
<context position="2777" citStr="Klyne and Carroll, 2004" startWordPosition="443" endWordPosition="446">between entities to expose meaningful relationships among entities in text. Storing this information as metadata in the UI allows us to look ahead. Hovering over a name, the end user is able to see which firms they are affiliated with. The user is also able to look ahead to see all the other documents that the person occurs in. In addition, we also know which firm each attorney works for and this relationship allows us to see all the other attorneys who work for the same firm. This information is not present in any of the documents retrieved but is inferred from our RDF/RDFS (Lassila, 2000), (Klyne and Carroll, 2004), (W3C, 1999), (W3C, 2004) metadata model. The RDF/RDFS metadata model helps to dynamically resolve relationship among entities during the time of front end rendering. This system could be extended to incorporate additional relationships between other kinds of data. 2 Architecture Content in our architecture consists of plain text news documents and RDF metadata. Both are stored in an XML content repository. In addition we also store Thomson West’s legal database of attorney profiles in the same repository as well. With the content stored, we use a name/entity tagger in combination with method</context>
</contexts>
<marker>Klyne, Carroll, 2004</marker>
<rawString>Graham Klyne and Jeremy J. Carroll. 2004. Resource description framework Figure 6: Navigation between related metadata (rdf): Concepts and abstract syntax. http://www.w3.org/TR/2004/REC-rdf-concepts20040210/.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ora Lassila</author>
</authors>
<title>The resource description framework.</title>
<date>2000</date>
<journal>IEEE Intelligent Systems,</journal>
<volume>15</volume>
<issue>6</issue>
<contexts>
<context position="2750" citStr="Lassila, 2000" startWordPosition="441" endWordPosition="442">1: Relationships between entities to expose meaningful relationships among entities in text. Storing this information as metadata in the UI allows us to look ahead. Hovering over a name, the end user is able to see which firms they are affiliated with. The user is also able to look ahead to see all the other documents that the person occurs in. In addition, we also know which firm each attorney works for and this relationship allows us to see all the other attorneys who work for the same firm. This information is not present in any of the documents retrieved but is inferred from our RDF/RDFS (Lassila, 2000), (Klyne and Carroll, 2004), (W3C, 1999), (W3C, 2004) metadata model. The RDF/RDFS metadata model helps to dynamically resolve relationship among entities during the time of front end rendering. This system could be extended to incorporate additional relationships between other kinds of data. 2 Architecture Content in our architecture consists of plain text news documents and RDF metadata. Both are stored in an XML content repository. In addition we also store Thomson West’s legal database of attorney profiles in the same repository as well. With the content stored, we use a name/entity tagger</context>
</contexts>
<marker>Lassila, 2000</marker>
<rawString>Ora Lassila. 2000. The resource description framework. IEEE Intelligent Systems, 15(6):67–69.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W3C</author>
</authors>
<title>Resource description framework (rdf) model and syntax.</title>
<date>1999</date>
<note>http://www.w3.org/TR/1999/REC-rdf-syntax19990222/.</note>
<marker>W3C, 1999</marker>
<rawString>W3C. 1999. Resource description framework (rdf) model and syntax. http://www.w3.org/TR/1999/REC-rdf-syntax19990222/.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W3C</author>
</authors>
<title>Rdf vocabulary description language 1.0: Rdf schema.</title>
<date>2004</date>
<note>http://www.w3.org/TR/2004/REC-rdf-schema20040210/.</note>
<marker>W3C, 2004</marker>
<rawString>W3C. 2004. Rdf vocabulary description language 1.0: Rdf schema. http://www.w3.org/TR/2004/REC-rdf-schema20040210/.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>