<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000002">
<title confidence="0.996893">
Two Accounts of Scope Availability and Semantic
Underspecification
</title>
<author confidence="0.989032">
Alistair Willis and Suresh Manandhar,
</author>
<affiliation confidence="0.998345">
Department of Computer Science,
University of York,
</affiliation>
<address confidence="0.867385">
York Y010 5DD, UK.
</address>
<email confidence="0.997351">
fagw,sureshj@cs.york.ac.uk
</email>
<sectionHeader confidence="0.997366" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999958">
We propose a formal system for representing the
available readings of sentences displaying quan-
tifier scope ambiguity, in which partial scopes
may be expressed. We show that using a theory
of scope availability based upon the function-
argument structure of a sentence allows a deter-
ministic, polynomial time test for the availabil-
ity of a reading, while solving the same problem
within theories based on the well-formedness
of sentences in the meaning language has been
shown to be NP-hard.
</bodyText>
<sectionHeader confidence="0.999394" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999612875">
The phenomenon of quantifier scope ambigu-
ity has been discussed extensively within com-
putational and theoretical linguistics. Given a
sentence displaying quantifier scope ambiguity,
such as Every man loves a woman, part of the
problem of representing the sentence&apos;s meaning
is to distinguish between the two possible mean-
ings:
</bodyText>
<equation confidence="0.862529">
Vx(man(x) 3y(woman(y) A love(x, y)))
</equation>
<bodyText confidence="0.9974975">
where every man loves a (possibly) different
woman, or
</bodyText>
<equation confidence="0.768141">
ay(warrian(y) A Vx(man(x) love(x,y)))
</equation>
<bodyText confidence="0.999961465116279">
where a single woman is loved by every man.
One aspect of the problem is the generation of
all available readings in a suitable representa-
tion language. Cooper (1983) described a sys-
tem of &amp;quot;storing&amp;quot; the quantifiers as A-expressions
during the parsing process and retrieving them
at the sentence level; different orders of quan-
tifier retrieval generate different readings of the
sentence. However, Cooper&apos;s method generates
logical forms in which variables are not correctly
bound by their quantifiers, and so do not cor-
respond to a correct sentence meaning. This
problem is rectified by nested storage (Keller,
1986) and the Hobbs and Shieber (1987) al-
gorithm. However, the linguistic assumptions
underlying these approaches have recently been
questioned. Park (1995) has argued that the
availability of readings is determined not by the
well-formedness of sentences in the meaning lan-
guage, but by the function-argument relation-
ships within the sentence. His theory proposes
that only a subset of the well-formed sentences
generated by nested storage are available to a
speaker of English. Although the theories have
different generative power, it is difficult to find
linguistic data that convincingly proves either
theory correct.
In the absence of persuasive linguistic data,
it is reasonable to ask whether other grounds
exist for choosing to work with either of the
two theories. This paper considers the appli-
cation of both theories to the problem of un-
derspecified meaning representation, and the
question of determining whether a set of con-
straints represents an available reading of an
ambiguous sentence or not. We show that a
constraint language based upon Park&apos;s linguis-
tic theory (Willis and Manandhar, 1999) solves
this problem in polynomial time, and contrast
this with recent work based on dominance con-
straints which shows that using the more per-
missive theory of availability to solve the same
problems leads to NP-hardness.
</bodyText>
<sectionHeader confidence="0.996445" genericHeader="introduction">
2 Underspecification
</sectionHeader>
<bodyText confidence="0.9801118">
A recent area of interest has been with under-
specified representations of an ambiguous sen-
tence&apos;s meaning, for example, Quasi-Logical
Form (QLF) (Alshawi and Crouch, 1992) and
Underspecified Discourse Representation The-
</bodyText>
<page confidence="0.997141">
293
</page>
<bodyText confidence="0.992922333333333">
ory (UDRT) (Reyle, 1995). We shall charac-
terise the desirable properties of an underspec-
ified meaning representation as:
</bodyText>
<listItem confidence="0.973585777777778">
1. the meaning of a sentence should be rep-
resented in a way that is not committed to
any one of the possible (intended) meanings
of the sentence, and
2. it should be possible to incrementally intro-
duce partial information about the mean-
ing, if such information is available, and
without the need to undo work that has
already been done.
</listItem>
<bodyText confidence="0.929296226415094">
A principal aim of systems providing an un-
derspecified representation of quantifier scope is
the ability to represent partial scopings. That
is, it should be possible to state that some of
the quantifiers have some scope relative to each
other, while remaining uncommitted to the rel-
ative scope of the remaining quantifiers. How-
ever, representations which simply allow partial
scopes to be stated without further analysis do
not adequately capture the behaviour of quanti-
fiers in a sentence. Consider the sentence Every
representative of a company saw most samples,
represented in the style of QLF:
_:see(&lt;+i every x _:rep.of(x,
&lt;+j exists y co(y)&gt;)&gt;,
&lt;+k most z sample(z)&gt;)
A fully scoped logical form of this QLF is:
[+i,+k,+j]:see(&lt;+i every x rep.of(x,
&lt;+j exists y co(y)&gt;)&gt;,
&lt;+k most z sample(z)&gt;)
where the list of quantifier labels indicates the rela-
tive scope of quantifiers at that point in the sentence.
Although this formula is well formed in the QLF
language, it does not correspond to a well formed
sentence of logic, seeming closer to the formula:
every(x,rep.of(x,y), most(z,sample(z),
exists(y, co(y), see(x, z))))
where the variable y does not appear in the
scope of its quantifier. A language such as
QLF will generally allow this scoping to be ex-
pressed, even though it does not correspond to
a reading available to a speaker. In QLF se-
mantics, a scoping which does not give rise to
any well formed readings is considered &amp;quot;uninter-
pretable&amp;quot;; ie. there is no interpretation in which
an evaluation function maps the QLF onto a
truth value.
Our aim is to present a system in which
there is a straightforward computational test of
whether a well-formed reading of a sentence ex-
ists in which a partial scoping is satisfied, with-
out requiring recourse to the final logical form.
The language CLLS (Egg et al., 1998) has re-
cently been developed which correctly generates
the well-formed readings by using dominance
constraints over trees. Readings of a sentence
can be represented using a tree, where domi-
nance represents outscoping, and quantifiers are
represented using binary trees whose daughters
correspond to the quantifiers&apos; restriction and
scope. So for the current example, Every repre-
sentative of a company saw most samples, the
reading:
</bodyText>
<equation confidence="0.753062">
every(x, a(y, co(y),rep.o f (x, y)),
most(z, sample(z), see(x, z)))
</equation>
<bodyText confidence="0.995125">
can be represented by the tree in figure 1, where
the restrictions of a and most have been omitted
for clarity. Domination in the tree represents
outscoping in the logical form.
</bodyText>
<figure confidence="0.94211175">
every •
a •
• most
rep.° f • see
</figure>
<figureCaption confidence="0.999962">
Figure 1: Representing relative scope as a tree
</figureCaption>
<bodyText confidence="0.998149052631579">
Underspecification can be captured by defin-
ing dominance constraints between nodes rep-
resenting the quantifiers and relations in a sen-
tence. Readings of the sentence with a free
variable are avoided by asserting that each re-
lation containing a variable must be dominated
by that variable&apos;s quantifier, and an available
reading of the sentence is represented by a tree
in which all the dominance constraints are sat-
isfied. So the ill-formed readings of the sen-
tence can be avoided by stating that the relation
rep. of is dominated by the restriction of every
and the scope of a, while see is dominated by the
scopes of both a and most. This is represented
in figure 2, where the dominance constraints are
illustrated by dotted lines.
Further partial scope information can be
introduced with additional dominance con-
straints. So the partial scope requirement that
</bodyText>
<page confidence="0.993837">
294
</page>
<figure confidence="0.7878555">
„ ,
rep.of sip see
</figure>
<figureCaption confidence="0.9837675">
Figure 2: Representing available scopes with
dominance constraints
</figureCaption>
<bodyText confidence="0.9995319">
most should outscope every would be captured
by a constraint stating that the node represent-
ing most should dominate the node representing
every in the constraints&apos; solution.
It is has been shown (Koller et al., 1998) that
determining the consistency of these constraints
is NP-hard. In the rest of this paper, we show
that an alternative theory of scope availability
yields a constraint system that can be solved in
polynomial time.
</bodyText>
<sectionHeader confidence="0.993792" genericHeader="method">
3 Alternative Account of
Availability
</sectionHeader>
<bodyText confidence="0.986450764705882">
The NP-hardness result of the previous section
arises from the assumption that the availability
of scopings is determined by the well formedness
of the associated logical forms. Park (1995) has
proposed an alternative theory of scope avail-
ability which states that available scopes are
accounted for by relative scopes of arguments
around relations, whereby quantifiers may not
move across NP boundaries. For example, con-
sider the sentence Every representative of a
company saw most samples, containing two rela-
tions, saw and of. Around saw, every (represen-
tative of a company) can outscope most (sam-
ples), or vice versa, and around of, every (rep-
resentative) can outscope a (company), or vice
versa. Park generalises this observation to the
claim that for any n-ary relation in a sentence,
there are n! possible orderings of quantified ar-
guments around that relation. Other quanti-
fiers in the sentence should not &amp;quot;intercalate” be-
tween those which are single arguments to a re-
lation. So in the example sentence there are four
possible scopes, because there are 2! = 2 scop-
ings around saw and 2! = 2 scopings around
of. What is not possible is a reading where a
outscopes most which outscopes every; although
this can be represented by a well formed sen-
tence of logic (with no unbound variables), it is
not available to a speaker of English.
By using this theory as the basis of under-
specification, we can say:
• underspecification is to be captured by al-
lowing different possible relative scope as-
signments around the predicates, and
</bodyText>
<listItem confidence="0.9509365">
• partial scopes between arbitrary quanti-
fiers in the sentence will be translated into
the equivalent scoping of quantifiers around
their predicates.
</listItem>
<bodyText confidence="0.99899637037037">
The chosen representation will be based upon a
sentence&apos;s quantifiers and relations (for exam-
ple, verbs and prepositions).
Quantifiers and the relations which determine
their relative scope are represented by a set of
elements under a strict partial order, where the
ordering represents the relative scopes. A strict
order will be taken to be transitive, antisym-
metric and irreflexive. However, because the
interaction between the predicates in the sen-
tence has implications for possible scopings, it
is also necessary to consider the relationships
between the ordered sets.
Consider again the sentence Every man loves
a woman. The quantifiers and relation in this
sentence can be represented by a set of elements
{every, a, love} . A strict partial order, &gt;-, is de-
fined over the set which states that the relation
love must be outscoped by both quantifiers:
((every, a, love} , (every love, a &gt;- love))
The partial order states that both quantifiers
outscope the verb, but says nothing about their
scopes relative to each other. This represents a
completely underspecified meaning. An unam-
biguous reading of the sentence is represented
when &gt;- defines a total order on the set. So if
the relation every &gt;- a were added, the reading:
</bodyText>
<equation confidence="0.920023">
V x .man(x) 3y.woman(y) A love(x , y)
every &gt;- a &gt;- love
</equation>
<bodyText confidence="0.958571">
would be represented. Alternatively, adding
a &gt;- every to the underspecified form would rep-
resent the reading:
</bodyText>
<equation confidence="0.3643475">
3y .woman(y) A V x .man(x) lov e(x , y)
a &gt;- every &gt;- love
</equation>
<page confidence="0.988989">
295
</page>
<bodyText confidence="0.989441733333333">
The introduction of a further relation which
does not lead to a well formed sentence (such
as love &gt;- every) is shown by the irreflexivity of
&gt;- being violated.
While using a single set of elements correctly
accounts for the possible scopes of quantifiers in
the sentences discussed so far, relative clauses
and prepositional attachment to NPs are more
complex. Consider the sentence Every repre-
sentative of a company saw most samples. The
presence of two binary relations, of and saw,
implies that there should be 2!.2! = 4 readings.
Continuing with the system developed so far,
these possibilities could be represented by a pair
of strictly partially ordered sets:
({every, most, see} , (every &gt;- see, most &gt;- see))
({every, a, of } , (every &gt;2 of, a &gt;2 of))
where the four possible ways of completing the
strict orders on the sets correspond to the four
available readings. To represent relative scope
between arbitrary quantifiers in the sentence,
a further transitive relation, &gt;, is defined. Say
that if (S,&gt;-) is a strictly partially ordered set in
the structure where x, y E S and x y then x&gt;
y. So for example, consider the pair of strictly
partially ordered sets:
*very, most, see} , (every &gt;- most &gt;- see))
({every, a, of , (a &gt;2 every &gt;2 of))
which would represent the reading (in a format
similar to generalised quantifiers):
a(y, co(y), every(x,rep.of (x, y),
most(z, sample(z), see(x, z))))
The orders on the sets state that every&gt;most&gt;
see and a &gt; every &gt; of, and from the transi-
tivity of &gt; it can be inferred (correctly) that
a &gt; most. Similarly, given the ambiguous sen-
tence and the partial scope requirement that
a should outscope most, the required partial
scope can be obtained by adding the relations
a &gt;2 every and every &gt;- most.
The transitivity of &gt; is not enough to cap-
ture all the available scope information. Sup-
pose it were required that most should outscope
a. There are two readings of the sentence which
satisfy this partial scope, those being:
</bodyText>
<equation confidence="0.638544">
most(z, sample(z),
every(x, a(y, co(y),rep.o f (x, y)), see(x, z)))
and
most(z, sample(z), a(y, co(y),
every(x,rep.o f (x, y), see(x, z)))).
</equation>
<bodyText confidence="0.935487692307692">
These readings are precisely those for which the
object of see outscopes its subject; the partial
scope is captured by the pair:
({ every, most, see}, (most &gt;- every &gt;- see))
({every, a, of}, (every &gt;2 of ,a &gt;2 of))
where there is no additional information about
the relative scope of every and a. However, the
transitivity of &gt; alone does not capture the fact
that most &gt; a follows from most &gt; every.
We remedy this by defining a domination re-
lation. In the current case, say that every dom-
inates a, which means that a is nested within
the QNP whose head quantifier is every. Then
because quantifiers may not &amp;quot;intercalate&amp;quot; across
NP boundaries, anything that outscopes every
also outscopes anything that every dominates
(here, a); if most outscopes one it must outscope
both. We capture this behaviour by putting
the sets into a tree structure, where each of the
nodes is one of the strictly ordered sets repre-
senting the scopes around a relation. For any
node, N, each of the daughter nodes has (ex-
actly) one element in common with N, oth-
erwise, any element appears only once in the
structure. So, consider again the sentence Ev-
ery representative of a company saw most sam-
ples. The scope information of the underspeci-
fied form is represented by the tree:
({every, most, see}, (every &gt;- see, most &gt;- see))
*very, a, of }, (every &gt;2 of, a &gt;2 of))
Now, say that an element X dominates another
element Y (denoted as X Y) if X and Y are
(distinct) elements in a set at some node, and X
is also in the parent node. Also, is transitive
and irreflexive. So in the example given:
every a and every c---&gt; of,
but every V÷ every.
We can now extend the definition of &gt; by
saying that:
</bodyText>
<page confidence="0.983182">
296
</page>
<bodyText confidence="0.955990416666666">
if (P,&gt;-) is a node in the tree, and
x, y e P and x &gt;- y, then x&gt;y and x&gt;z
where z is any term that y dominates.
Also, &gt; is transitive and irreflexive.
This captures the scoping behaviour for nested
quantifiers. So from the ambiguous representa-
tion of scopes:
*very, most, see} , (most &gt;- every &gt;- see))
({every, a, of}, (every &gt;-&apos; of, a &gt;-&apos; of))
where most &gt;- every and every a, it is pos-
sible to infer correctly that most &gt; a, whatever
the relation is between every and a.
</bodyText>
<sectionHeader confidence="0.9977225" genericHeader="method">
4 Formal Definition of Scope
Representations
</sectionHeader>
<bodyText confidence="0.997107674418605">
We now provide a formal description of the
structures described in section 3. The defini-
tion is divided into two parts. First a scope
structure is defined, which is a tree structure
whose nodes are sets under a strict order and
describes the correct possible scopings of quan-
tified arguments around their relations. Next, a
scope representation is defined, which is the pair
of a scope structure and an outscoping relation,
&gt;, which is defined over all the elements in the
structure.
The analysis presented here differs from that
of the previous section in that the nodes in
the scope structures are sets under a strict to-
tal order, rather than under a partial order.
The structures therefore represent unambigu-
ous readings of the sentence. Underspecifica-
tion will then be captured in the constraint lan-
guage, rather than in the underlying structures,
as discussed in section 5.
A scope structure is a finite tree, where each
node of the tree is a finite, non-empty set of el-
ements, P, taken from a set 0 = {a, ...}
under a strict total order. For any node, each
daughter node is also a strictly ordered set, such
that each daughter set di has exactly one el-
ement in common with P, a different element
for each of the d2. An element can only appear
once in the tree, unless it is the common node
between a mother and a daughter. So:
fa, OM
is a correct scope structure, because no element
appears twice except a and [3, which appear in
mother/daughter pairs (the ordering relations
have been omitted for clarity).
A scope structure is defined as a triple (P, &gt;-
, D), where P is a set of elements, &gt;- is a strict
total order over P and 1, is the set of daughters.
We say that an element occurs in a scope struc-
ture if it is a member of the set at any node in
the scope structure. If 0 is a (countable) set
of elements, then scope structures can be recur-
sively defined as:
</bodyText>
<listItem confidence="0.939803807692308">
• If S = (Ps, &gt;-s, {}), where Ps is a finite,
non-empty subset of 0 and &gt;--s is a strict
total order on Ps, then S is a scope struc-
ture, where:
1. if x E Ps, then x occurs in S,
• If R and S are scope structures such that
R = (PR,›-R,DR) and S =
where no element occurs in both R and
S, and there is some element a such that
a E PR, then if T = (PT,&gt;-T,DT), where
PT = {a} UPS,VT = {R} UV and &gt;-T is
a strict total order on PT then T is a scope
structure, where:
1. If some element x occurs in either R
or S then x occurs in T
2. If some element x occurs in R and x
a, then a dominates x in T
3. If x and y occur in R and x dominates
y in R then x dominates y in T
4. If x and y occur in S and x dominates
y in S then x dominates y in T
If S is a scope structure, then a node in S is
defined as:
• If S is a scope structure such that S =
(Ps,&gt;-s,Ds), then:
— (Ps,&gt;-s) is a node in S
</listItem>
<bodyText confidence="0.904398142857143">
— if di E Ds, then any node in di is a
node in S.
Having defined scope structures, we now de-
fine a scope representation, which is a pair
(S, &gt;s), where S is a scope structure and &gt;s is
a relation between pairs of elements which oc-
cur in S. &gt;s represents outscoping between any
</bodyText>
<page confidence="0.991949">
297
</page>
<bodyText confidence="0.998157">
pair of elements in the structure, rather than
just between elements at a common node.
If S is a scope structure such that S =
(Ps,s,Ds), then (S, &gt;s) is a scope represen-
tation, where &gt;s is the minimum relation such
that:
</bodyText>
<listItem confidence="0.978647">
• If (P,›- p) is a node in S and x, y E P and
x &gt;-p y, then x &gt;s y.
• If (P,&gt;- p) is a node in Sand x, y E P and
x p y, then if z is an element which occurs
in S and y dominates z in S then x &gt;s z.
• &gt;s is transitive.
</listItem>
<bodyText confidence="0.951417666666667">
If (5,&gt;s) is a well formed scope representation,
then &gt;s is a strict partial order over the set of
elements which occur in S.
</bodyText>
<sectionHeader confidence="0.986738" genericHeader="method">
5 Constraints for Scope
Underspecification
</sectionHeader>
<bodyText confidence="0.972488594594594">
We now consider a constraint language for rep-
resenting the available scopes in a sentence. The
structure of the sentence can be defined in terms
of common arguments to a relation (which is
represented by membership of a common set in
the scope structure) and the domination rela-
tion. The constraint language is:
tab, q ::= x o y Common set membership
x y Domination
x y Outscoping
A 0 Conjunction
where x, y are members of a (countable) set of
constants, CON = {x,y,z,...}.
It is intended that these constraints be de-
fined over terms in an underspecified semantic
representation, such as QLF or UDRT, with a
function mapping grammatical objects in the
representation onto members of CON. Repre-
senting the quantifiers and relations in the sen-
tence is sufficient for our current needs. Con-
straints of the form soy (where o is symmetric)
state either that x and y represent common ar-
guments to a relation, or that x and y represent
a relation and a quantifier which quantifies over
it. Constraints of the form x y indicate that
x is the head quantifier of a complex NP, in
which y, another grammatical object (either a
quantifier or a relation), is nested.
So for example, consider again the sentence
Every representative of a company saw most
samples, and assume that terms in the un-
derspecified representation representing the the
grammatical objects every, exists, most, rep. of
and see map onto the elements e, a, m, o and s
respectively, where {e, a, m, o, s} C CON. Then
the constraint representing the fully underspec-
ified meaning is:
</bodyText>
<figure confidence="0.922347285714286">
eosAmosAeomAsoeAsomAmoe
A
eooAaooAeoaAo0eAo0aAaoe
A
e c-4aAec-40
A
er&gt;sAel&gt;oArnDsAar&gt;o
</figure>
<bodyText confidence="0.964078">
Note that the symmetry of o is stated explic-
itly in the constraint. The (underspecified) con-
straint is generated either from the grammar
or directly from the underspecified structure, so
the inference rules for determining the availabil-
ity of a partial scope only generate constraints
of the form X i&gt; Y. These rules are discussed
further in section 6. Underspecification is now
captured within the constraint language; note
the parallels between the constraints of the form
X I&gt; Y in this example and the partial orders
used in section 3.
The satisfiability of the constraints is given
in terms of the scope representations defined in
section 4. A scope representation, (S, &gt;s), sat-
isfies a constraint of the form X o Y if (P,&gt;.- p)
is a node in S such that X&apos;, Y&apos; E Ps, X&apos; 0
where some assignment function maps X and
Y onto X&apos; and Similarly, constraints of the
form X Y are satisfied if X&apos; dominates 311
in S, and constraints of the form X t&gt; Y are
satisfied if X&apos; &gt;s So the above constraint is
satisfied by a set of scope structures of the form:
({every, most, see}, &gt;.-)
({every, a, of },&gt;-&apos;)
where the assignment function maps the con-
stants e, a, m, o and s onto the elements
every, a, most, of and see respectively, and
where every &gt;- see, most &gt;- see, every &gt;-&apos; of
and a &gt;-&apos; of.
We can now define the semantics for the con-
straint language. An assignment function, [-V,
maps constants of the constraint language onto
</bodyText>
<page confidence="0.994042">
298
</page>
<bodyText confidence="0.9988175">
elements which occur in S and wffs of the con-
straint language onto one of the pair of values
ft, f 1. I is a pair (4 ), A) , where (I) is a scope
representation, such that (I) = (S, s), and A is
a function mapping constants of the constraint
language onto the set of elements which occur
in S. The denotation of the constraints is then
given by:
</bodyText>
<listItem confidence="0.944138454545454">
• VII/ = A(X) if X is a constant in the
constraint language.
• [[X0YE = t if there is a node in S, (P, &gt;-p),
such that 1[Xli E P and [[Yr E P and
[[Xli Ell&apos;, otherwise [[X 0 = 1.
• = t if 1[xy dominates [[Y11/ in
S, otherwise [[X = f.
• [[X = t if [[X]J/ &gt;s [[Yli, otherwise
D YE. =1.
• PP A = t if =
otherwise pp A = f.
</listItem>
<bodyText confidence="0.998609666666667">
Satisfiability A constraint set, A, is satisfiable
if there is at least one I such that [[(4/ = t
for all constraints 45 where q E A.
The satisfiability of a constraint set represents
the existence of a reading of the sentence which
respects the partial scoping.
</bodyText>
<sectionHeader confidence="0.956956" genericHeader="method">
6 Availability of Partial Scopes
</sectionHeader>
<bodyText confidence="0.999912268292683">
We now turn to the question of determining
whether a partial scoping is available. In sec-
tion 3 it was stated that scope availability is
accounted for by the relative scope of quanti-
fiers around their predicates. It turns out (al-
though we do not prove it here) that for any
partial scoping, there is a necessary and suffi-
cient set of scopings of quantifiers around their
relations that gives the partial scoping. For ex-
ample, we showed that for the sentence Every
representative of a company saw most samples,
the readings where most outscopes a are exactly
those where the subject of see outscopes its ob-
ject. Therefore, from the constraint most D a,
it should be possible to infer most&gt; every. The
aim of the constraint solver is to determine what
scopings of quantifiers about their relations are
required to obtain the required partial scoping,
and therefore to state whether the partial scope
is available.
A set of rules is defined on the constraints,
so that additional scope information may be in-
ferred. The introduction of further scope con-
straints does not affect scope information al-
ready present (monotonicity). The rules are
given in figure 3, where I&apos; represents any con-
junction of literals and the associativity and
commutativity of A are assumed. The infer-
ence rules Si, S2 and S3 operate by recursively
reducing the (arbitrary) outscoping constraint
X D Z to X DY A YD Y&apos;, where Y and Y&apos;
represent arguments to a common relation, and
Y&apos; either dominates or is equal to Z. Repeated
application of these constraints gives the set of
scopes of quantifiers around their relations for
the initial partial scoping. The rules Trans
and Dom then generate the remaining possible
scope constraints. If a scope is unavailable, then
completing the transitive closure of D. across the
structure yields a constraint of the form X D X.
We then say that:
</bodyText>
<listItem confidence="0.876052">
• A constraint set is in normal form if ap-
plying the rules Si, S2, S3, Trans and Dom
does not yield any new constraints.
If r is a constraint set in normal form then:
• r represents an available scoping if it does
not contain a constraint of the form X t&gt; X.
• r represents a complete scoping if it rep-
</listItem>
<bodyText confidence="0.978898333333333">
resents an available scoping, and for every
constraint of the form X o Y there is either
a constraint X D Y or a constraint Y D X.
The condition for a scoping to be available fol-
lows from the irreflexivity of &gt;. The condition
for a scoping to be complete states that if two
elements are arguments to a relation, or are a re-
lation and one of its arguments, then they must
have scope relative to each other. This corre-
sponds to considering sets under a total order,
rather than under a partial order.
Complexity Issues Let r be a constraint
representing an available scoping of a sentence,
and let X DY be a constraint representing a par-
tial scope between two terms in that sentence.
Then the worst case of applying the inference
rules to FAX1&gt;Y&amp;quot; to saturation turns out to
be equivalent to completing the transitive clo-
sure of D, which is known to be soluble in better
than 0(n3) time (Cormen et al., 1990), where
n is the number of elements in the structure.
</bodyText>
<equation confidence="0.804083">
t and IA/ = t,
</equation>
<page confidence="0.980061">
299
</page>
<figure confidence="0.981295888888889">
Si:
Trans:
Dom:
FAX oYAX c-&gt;X&apos;AX&apos;DY XDYAX&apos;DX
FAX oYAYY&apos;AXDVI-XDY
rAxoynx-c-4.x&apos;AYY&apos;AX&apos;[&gt;Y11-X&apos;DXAXDY
rAXDYAYDZI-XDZ
rAXoYAXDYAYZI-XDZ
where r is any conjunction of literals.
</figure>
<figureCaption confidence="0.999908">
Figure 3: Rules of inference
</figureCaption>
<bodyText confidence="0.999942409090909">
Application of rules Si, S2 and S3 to comple-
tion can be completed in linear time; if X i&gt; Y
is a constraint between two arbitrary quanti-
fiers X and Y where X 75 Y, then exactly one
of the rules Si, S2 or S3 applies (lack of space
prevents us proving this here). If X o Y, then
none of these three rules applies. Application of
Si, S2 or S3 adds at most two new constraints,
of which at most one is a scope constraint XDY&apos;
where X yi Y&apos;. At most n - 1 such constraints
are generated.
Application of the rules Si, S2 and S3 re-
duces an arbitrary partial scope into relative
scopes of arguments around their relations. If
a scoping is unavailable, this is represented by
the irreflexivity of D being violated. Testing for
this requires that the transitive closure of D be
completed; this is known to be soluble in better
than cubic time. We conclude that testing for
the availability of a partial scope in this frame-
work can be achieved in better than cubic time
in the worst case.
</bodyText>
<sectionHeader confidence="0.995912" genericHeader="conclusions">
7 Conclusion and Comments
</sectionHeader>
<bodyText confidence="0.999963058823529">
A desirable property for an underspecified rep-
resentation of quantifier scope ambiguity is that
there should be a computationally efficient test
for whether a partial scope is available or not.
We have shown that accepting a theory of avail-
ability which states that scope availability is de-
termined by the function-argument structure of
a sentence allows the development of a test for
availability which is polynomial in the number
of quantifiers and relations in a sentence, while
theories of availability based upon the logical
well-formedness of meaning representations has
been shown to be NP-hard.
Acknowledgements The authors would like
to thank Alan Frisch, Mark Steedman and three
anonymous reviewers for useful comments. The
first author is funded by an EPSRC grant.
</bodyText>
<sectionHeader confidence="0.999428" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.99900985">
H. Alshawi and R. Crouch. 1992. Monotonic
Semantic Interpretation. In Proceedings of
the 30th Annual Meeting of the ACL, pages
32-39, Newark, Delaware.
R. Cooper. 1983. Quantification and Syntactic
Theory. Reidel.
T. Cormen, C. Leiserson, and R. Rivest. 1990.
Introduction to Algorithms. The MIT Press,
Cambridge, Massachusetts.
M. Egg, J. Niehren, P. Ruhrberg, and F. Xu.
1998. Constraints over lambda-structures in
semantic underspecification. In Proceedings
of the 17th International Conference on Com-
putational Linguistics and 36th Annual Meet-
ing of the ACL, Montreal, Canada.
J. Hobbs and S. Shieber. 1987. An algorithm
for generating quantifier scopings. Computa-
tional Linguistics, 13.
W. Keller. 1986. Nested Cooper storage:
The proper treatment of quantification in
ordinary noun phrases. In U. Reyle and
C. Rohrer, editors, Natural Language Parsing
and Linguistic Theory, Studies in Linguistics
and Philosophy, pages 432-437. Reidel.
A. Koller, J. Niehren, and R. Treinen. 1998.
Dominance constraints: Algorithms and com-
plexity. In Third International Conference on
Logical Aspects of Computational Linguistics
(LA CL &apos;98), Grenoble, France.
J.C. Park. 1995. Quantifier scope and con-
stituency. In Proceedings of the 33rd Annual
Meeting of the Association for Computational
Linguistics, pages 205-212. Cambridge, MA.
U. Reyle. 1995. On reasoning with ambiguities.
In Proceedings of the EA CL, Dublin.
A. Willis and S. Manandhar. 1999. The avail-
ability of partial scopings in an underspeci-
fied semantic representation. In 3rd Interna-
tional Workshop on Computational Seman-
tics, Tilburg, the Netherlands, January.
</reference>
<page confidence="0.997936">
300
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.879852">
<title confidence="0.9968365">Two Accounts of Scope Availability and Semantic Underspecification</title>
<author confidence="0.999535">Alistair Willis</author>
<author confidence="0.999535">Suresh Manandhar</author>
<affiliation confidence="0.9999445">Department of Computer Science, University of York,</affiliation>
<address confidence="0.997808">York Y010 5DD, UK.</address>
<email confidence="0.999482">fagw,sureshj@cs.york.ac.uk</email>
<abstract confidence="0.989959833333333">We propose a formal system for representing the available readings of sentences displaying quanscope ambiguity, in which may be expressed. We show that using a theory of scope availability based upon the functionargument structure of a sentence allows a deterministic, polynomial time test for the availability of a reading, while solving the same problem within theories based on the well-formedness of sentences in the meaning language has been shown to be NP-hard.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>H Alshawi</author>
<author>R Crouch</author>
</authors>
<title>Monotonic Semantic Interpretation.</title>
<date>1992</date>
<booktitle>In Proceedings of the 30th Annual Meeting of the ACL,</booktitle>
<pages>32--39</pages>
<location>Newark, Delaware.</location>
<contexts>
<context position="3310" citStr="Alshawi and Crouch, 1992" startWordPosition="504" endWordPosition="507">on of determining whether a set of constraints represents an available reading of an ambiguous sentence or not. We show that a constraint language based upon Park&apos;s linguistic theory (Willis and Manandhar, 1999) solves this problem in polynomial time, and contrast this with recent work based on dominance constraints which shows that using the more permissive theory of availability to solve the same problems leads to NP-hardness. 2 Underspecification A recent area of interest has been with underspecified representations of an ambiguous sentence&apos;s meaning, for example, Quasi-Logical Form (QLF) (Alshawi and Crouch, 1992) and Underspecified Discourse Representation The293 ory (UDRT) (Reyle, 1995). We shall characterise the desirable properties of an underspecified meaning representation as: 1. the meaning of a sentence should be represented in a way that is not committed to any one of the possible (intended) meanings of the sentence, and 2. it should be possible to incrementally introduce partial information about the meaning, if such information is available, and without the need to undo work that has already been done. A principal aim of systems providing an underspecified representation of quantifier scope </context>
</contexts>
<marker>Alshawi, Crouch, 1992</marker>
<rawString>H. Alshawi and R. Crouch. 1992. Monotonic Semantic Interpretation. In Proceedings of the 30th Annual Meeting of the ACL, pages 32-39, Newark, Delaware.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Cooper</author>
</authors>
<title>Quantification and Syntactic Theory.</title>
<date>1983</date>
<location>Reidel.</location>
<contexts>
<context position="1340" citStr="Cooper (1983)" startWordPosition="201" endWordPosition="202">enon of quantifier scope ambiguity has been discussed extensively within computational and theoretical linguistics. Given a sentence displaying quantifier scope ambiguity, such as Every man loves a woman, part of the problem of representing the sentence&apos;s meaning is to distinguish between the two possible meanings: Vx(man(x) 3y(woman(y) A love(x, y))) where every man loves a (possibly) different woman, or ay(warrian(y) A Vx(man(x) love(x,y))) where a single woman is loved by every man. One aspect of the problem is the generation of all available readings in a suitable representation language. Cooper (1983) described a system of &amp;quot;storing&amp;quot; the quantifiers as A-expressions during the parsing process and retrieving them at the sentence level; different orders of quantifier retrieval generate different readings of the sentence. However, Cooper&apos;s method generates logical forms in which variables are not correctly bound by their quantifiers, and so do not correspond to a correct sentence meaning. This problem is rectified by nested storage (Keller, 1986) and the Hobbs and Shieber (1987) algorithm. However, the linguistic assumptions underlying these approaches have recently been questioned. Park (1995</context>
</contexts>
<marker>Cooper, 1983</marker>
<rawString>R. Cooper. 1983. Quantification and Syntactic Theory. Reidel.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Cormen</author>
<author>C Leiserson</author>
<author>R Rivest</author>
</authors>
<title>Introduction to Algorithms.</title>
<date>1990</date>
<publisher>The MIT Press,</publisher>
<location>Cambridge, Massachusetts.</location>
<contexts>
<context position="26020" citStr="Cormen et al., 1990" startWordPosition="4597" endWordPosition="4600">e arguments to a relation, or are a relation and one of its arguments, then they must have scope relative to each other. This corresponds to considering sets under a total order, rather than under a partial order. Complexity Issues Let r be a constraint representing an available scoping of a sentence, and let X DY be a constraint representing a partial scope between two terms in that sentence. Then the worst case of applying the inference rules to FAX1&gt;Y&amp;quot; to saturation turns out to be equivalent to completing the transitive closure of D, which is known to be soluble in better than 0(n3) time (Cormen et al., 1990), where n is the number of elements in the structure. t and IA/ = t, 299 Si: Trans: Dom: FAX oYAX c-&gt;X&apos;AX&apos;DY XDYAX&apos;DX FAX oYAYY&apos;AXDVI-XDY rAxoynx-c-4.x&apos;AYY&apos;AX&apos;[&gt;Y11-X&apos;DXAXDY rAXDYAYDZI-XDZ rAXoYAXDYAYZI-XDZ where r is any conjunction of literals. Figure 3: Rules of inference Application of rules Si, S2 and S3 to completion can be completed in linear time; if X i&gt; Y is a constraint between two arbitrary quantifiers X and Y where X 75 Y, then exactly one of the rules Si, S2 or S3 applies (lack of space prevents us proving this here). If X o Y, then none of these three rules applies. Application </context>
</contexts>
<marker>Cormen, Leiserson, Rivest, 1990</marker>
<rawString>T. Cormen, C. Leiserson, and R. Rivest. 1990. Introduction to Algorithms. The MIT Press, Cambridge, Massachusetts.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Egg</author>
<author>J Niehren</author>
<author>P Ruhrberg</author>
<author>F Xu</author>
</authors>
<title>Constraints over lambda-structures in semantic underspecification.</title>
<date>1998</date>
<booktitle>In Proceedings of the 17th International Conference on Computational Linguistics and 36th Annual Meeting of the ACL,</booktitle>
<location>Montreal, Canada.</location>
<contexts>
<context position="5646" citStr="Egg et al., 1998" startWordPosition="893" endWordPosition="896"> such as QLF will generally allow this scoping to be expressed, even though it does not correspond to a reading available to a speaker. In QLF semantics, a scoping which does not give rise to any well formed readings is considered &amp;quot;uninterpretable&amp;quot;; ie. there is no interpretation in which an evaluation function maps the QLF onto a truth value. Our aim is to present a system in which there is a straightforward computational test of whether a well-formed reading of a sentence exists in which a partial scoping is satisfied, without requiring recourse to the final logical form. The language CLLS (Egg et al., 1998) has recently been developed which correctly generates the well-formed readings by using dominance constraints over trees. Readings of a sentence can be represented using a tree, where dominance represents outscoping, and quantifiers are represented using binary trees whose daughters correspond to the quantifiers&apos; restriction and scope. So for the current example, Every representative of a company saw most samples, the reading: every(x, a(y, co(y),rep.o f (x, y)), most(z, sample(z), see(x, z))) can be represented by the tree in figure 1, where the restrictions of a and most have been omitted f</context>
</contexts>
<marker>Egg, Niehren, Ruhrberg, Xu, 1998</marker>
<rawString>M. Egg, J. Niehren, P. Ruhrberg, and F. Xu. 1998. Constraints over lambda-structures in semantic underspecification. In Proceedings of the 17th International Conference on Computational Linguistics and 36th Annual Meeting of the ACL, Montreal, Canada.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Hobbs</author>
<author>S Shieber</author>
</authors>
<title>An algorithm for generating quantifier scopings.</title>
<date>1987</date>
<journal>Computational Linguistics,</journal>
<volume>13</volume>
<contexts>
<context position="1823" citStr="Hobbs and Shieber (1987)" startWordPosition="274" endWordPosition="277">oved by every man. One aspect of the problem is the generation of all available readings in a suitable representation language. Cooper (1983) described a system of &amp;quot;storing&amp;quot; the quantifiers as A-expressions during the parsing process and retrieving them at the sentence level; different orders of quantifier retrieval generate different readings of the sentence. However, Cooper&apos;s method generates logical forms in which variables are not correctly bound by their quantifiers, and so do not correspond to a correct sentence meaning. This problem is rectified by nested storage (Keller, 1986) and the Hobbs and Shieber (1987) algorithm. However, the linguistic assumptions underlying these approaches have recently been questioned. Park (1995) has argued that the availability of readings is determined not by the well-formedness of sentences in the meaning language, but by the function-argument relationships within the sentence. His theory proposes that only a subset of the well-formed sentences generated by nested storage are available to a speaker of English. Although the theories have different generative power, it is difficult to find linguistic data that convincingly proves either theory correct. In the absence </context>
</contexts>
<marker>Hobbs, Shieber, 1987</marker>
<rawString>J. Hobbs and S. Shieber. 1987. An algorithm for generating quantifier scopings. Computational Linguistics, 13.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W Keller</author>
</authors>
<title>Nested Cooper storage: The proper treatment of quantification in ordinary noun phrases.</title>
<date>1986</date>
<booktitle>Natural Language Parsing and Linguistic Theory, Studies in Linguistics and Philosophy,</booktitle>
<pages>432--437</pages>
<editor>In U. Reyle and C. Rohrer, editors,</editor>
<publisher>Reidel.</publisher>
<contexts>
<context position="1790" citStr="Keller, 1986" startWordPosition="270" endWordPosition="271">re a single woman is loved by every man. One aspect of the problem is the generation of all available readings in a suitable representation language. Cooper (1983) described a system of &amp;quot;storing&amp;quot; the quantifiers as A-expressions during the parsing process and retrieving them at the sentence level; different orders of quantifier retrieval generate different readings of the sentence. However, Cooper&apos;s method generates logical forms in which variables are not correctly bound by their quantifiers, and so do not correspond to a correct sentence meaning. This problem is rectified by nested storage (Keller, 1986) and the Hobbs and Shieber (1987) algorithm. However, the linguistic assumptions underlying these approaches have recently been questioned. Park (1995) has argued that the availability of readings is determined not by the well-formedness of sentences in the meaning language, but by the function-argument relationships within the sentence. His theory proposes that only a subset of the well-formed sentences generated by nested storage are available to a speaker of English. Although the theories have different generative power, it is difficult to find linguistic data that convincingly proves eithe</context>
</contexts>
<marker>Keller, 1986</marker>
<rawString>W. Keller. 1986. Nested Cooper storage: The proper treatment of quantification in ordinary noun phrases. In U. Reyle and C. Rohrer, editors, Natural Language Parsing and Linguistic Theory, Studies in Linguistics and Philosophy, pages 432-437. Reidel.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Koller</author>
<author>J Niehren</author>
<author>R Treinen</author>
</authors>
<title>Dominance constraints: Algorithms and complexity.</title>
<date>1998</date>
<booktitle>In Third International Conference on Logical Aspects of Computational Linguistics (LA CL &apos;98),</booktitle>
<location>Grenoble, France.</location>
<contexts>
<context position="7574" citStr="Koller et al., 1998" startWordPosition="1209" endWordPosition="1212">of every and the scope of a, while see is dominated by the scopes of both a and most. This is represented in figure 2, where the dominance constraints are illustrated by dotted lines. Further partial scope information can be introduced with additional dominance constraints. So the partial scope requirement that 294 „ , rep.of sip see Figure 2: Representing available scopes with dominance constraints most should outscope every would be captured by a constraint stating that the node representing most should dominate the node representing every in the constraints&apos; solution. It is has been shown (Koller et al., 1998) that determining the consistency of these constraints is NP-hard. In the rest of this paper, we show that an alternative theory of scope availability yields a constraint system that can be solved in polynomial time. 3 Alternative Account of Availability The NP-hardness result of the previous section arises from the assumption that the availability of scopings is determined by the well formedness of the associated logical forms. Park (1995) has proposed an alternative theory of scope availability which states that available scopes are accounted for by relative scopes of arguments around relati</context>
</contexts>
<marker>Koller, Niehren, Treinen, 1998</marker>
<rawString>A. Koller, J. Niehren, and R. Treinen. 1998. Dominance constraints: Algorithms and complexity. In Third International Conference on Logical Aspects of Computational Linguistics (LA CL &apos;98), Grenoble, France.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J C Park</author>
</authors>
<title>Quantifier scope and constituency.</title>
<date>1995</date>
<booktitle>In Proceedings of the 33rd Annual Meeting of the Association for Computational Linguistics,</booktitle>
<pages>205--212</pages>
<location>Cambridge, MA.</location>
<contexts>
<context position="1941" citStr="Park (1995)" startWordPosition="291" endWordPosition="292">per (1983) described a system of &amp;quot;storing&amp;quot; the quantifiers as A-expressions during the parsing process and retrieving them at the sentence level; different orders of quantifier retrieval generate different readings of the sentence. However, Cooper&apos;s method generates logical forms in which variables are not correctly bound by their quantifiers, and so do not correspond to a correct sentence meaning. This problem is rectified by nested storage (Keller, 1986) and the Hobbs and Shieber (1987) algorithm. However, the linguistic assumptions underlying these approaches have recently been questioned. Park (1995) has argued that the availability of readings is determined not by the well-formedness of sentences in the meaning language, but by the function-argument relationships within the sentence. His theory proposes that only a subset of the well-formed sentences generated by nested storage are available to a speaker of English. Although the theories have different generative power, it is difficult to find linguistic data that convincingly proves either theory correct. In the absence of persuasive linguistic data, it is reasonable to ask whether other grounds exist for choosing to work with either of</context>
<context position="8018" citStr="Park (1995)" startWordPosition="1280" endWordPosition="1281">constraint stating that the node representing most should dominate the node representing every in the constraints&apos; solution. It is has been shown (Koller et al., 1998) that determining the consistency of these constraints is NP-hard. In the rest of this paper, we show that an alternative theory of scope availability yields a constraint system that can be solved in polynomial time. 3 Alternative Account of Availability The NP-hardness result of the previous section arises from the assumption that the availability of scopings is determined by the well formedness of the associated logical forms. Park (1995) has proposed an alternative theory of scope availability which states that available scopes are accounted for by relative scopes of arguments around relations, whereby quantifiers may not move across NP boundaries. For example, consider the sentence Every representative of a company saw most samples, containing two relations, saw and of. Around saw, every (representative of a company) can outscope most (samples), or vice versa, and around of, every (representative) can outscope a (company), or vice versa. Park generalises this observation to the claim that for any n-ary relation in a sentence</context>
</contexts>
<marker>Park, 1995</marker>
<rawString>J.C. Park. 1995. Quantifier scope and constituency. In Proceedings of the 33rd Annual Meeting of the Association for Computational Linguistics, pages 205-212. Cambridge, MA. U. Reyle. 1995. On reasoning with ambiguities. In Proceedings of the EA CL, Dublin.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Willis</author>
<author>S Manandhar</author>
</authors>
<title>The availability of partial scopings in an underspecified semantic representation.</title>
<date>1999</date>
<booktitle>In 3rd International Workshop on Computational Semantics,</booktitle>
<location>Tilburg, the Netherlands,</location>
<contexts>
<context position="2896" citStr="Willis and Manandhar, 1999" startWordPosition="440" endWordPosition="443">ough the theories have different generative power, it is difficult to find linguistic data that convincingly proves either theory correct. In the absence of persuasive linguistic data, it is reasonable to ask whether other grounds exist for choosing to work with either of the two theories. This paper considers the application of both theories to the problem of underspecified meaning representation, and the question of determining whether a set of constraints represents an available reading of an ambiguous sentence or not. We show that a constraint language based upon Park&apos;s linguistic theory (Willis and Manandhar, 1999) solves this problem in polynomial time, and contrast this with recent work based on dominance constraints which shows that using the more permissive theory of availability to solve the same problems leads to NP-hardness. 2 Underspecification A recent area of interest has been with underspecified representations of an ambiguous sentence&apos;s meaning, for example, Quasi-Logical Form (QLF) (Alshawi and Crouch, 1992) and Underspecified Discourse Representation The293 ory (UDRT) (Reyle, 1995). We shall characterise the desirable properties of an underspecified meaning representation as: 1. the meanin</context>
</contexts>
<marker>Willis, Manandhar, 1999</marker>
<rawString>A. Willis and S. Manandhar. 1999. The availability of partial scopings in an underspecified semantic representation. In 3rd International Workshop on Computational Semantics, Tilburg, the Netherlands, January.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>