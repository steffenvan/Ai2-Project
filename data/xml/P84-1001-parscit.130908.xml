<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.015656">
<note confidence="0.93575925">
Multilingual Text Processing in a Two-Byte Code
Lloyd B. Anderson
Ecological Linguistics
316 &amp;quot;A&amp;quot; St. S. E.
</note>
<address confidence="0.453577">
Washington, D. C., 20003
</address>
<email confidence="0.661088">
ABSTRACT
</email>
<bodyText confidence="0.977298474226804">
National and international standards commit-
tees are now discussing a two-byte code for multi-
lingual information processing. This provides for
65,536 separate character and control codes, enough
to make permanent code assignments for all the cha-
racters of all national alphabets of the world, and
also to include Chinese/Japanese characters.
This paper discusses the kinds of flexibility
required to handle both Roman and non4toman alpha-
bets. It is crucial to separate information units
(codes) from graphic forms, to maximize processing
power.
Comparing alphabets around the world, we find
that the graphic devices (letters, digraphs, accent
marks, punctuation, spacing, etc.) represent a very
limited number of information units. It is possi-
ble to arrange alphabet codes to provide transliter-
ation equivalence, the best of three solutions
compared as a framework for code assignments.
Information vs. Farm. In developing proposals
for codes in information processing, the most impor-
tant decisions are the choices of what to code. In
a. proposal for a multilingual two-byte code, Xerox
Corporation has made explicit a principle which we
can state precisely as follows:
Basic codes stand for independently function-
ing information units (not for visual farms)
The choice of type font, presence or absence of se-
rifs, and variations like boldface, italics or
underlining, are matters of farm. Such choices are
normally made once for spans at least as long as
one ward. We do not use ComPLeX MIXturEs, but con-
sistent strings like this, THIS, this, or THIS.
By assigning the same basic code to variations of a
single letter (as a, a, A, A), all variants will
automatically be alphabetized the same way, which
is as it should be. The choice of variant farms is
specified by supplementary &amp;quot;looks&amp;quot; information.
(The capitalization of first letters of sentences,
proper names, or nouns, is a kind of punctuation.)
Identical graphic forms may also be assigned
more than one code because they are distinct units
in information processing. Thus the letter form
&amp;quot;Cr is used in the Russian alphabet to represent
the sound /s/, but it is not the same information
unit as English &amp;quot;C&amp;quot;, so it has a distinct code. So
far this seems relatively obvious.
The same principle is now being applied in
much more subtle cases. Thus the minus sign and
the hyphen are assigned distinct codes in recent
proposals because they are completely distinct in-
formation units. There are even two kinds of hy-
phens distinguished, a &amp;quot;hard&amp;quot; hyphen as in the
word father-in-law, which remains always present,
and a &amp;quot;soft&amp;quot; hyphen which is used only to di-
vide a ward at the end of a line, and which should
automatically vanish when, in ward-processing, the
same ward comes to stand undivided within the line.
We can now frame the question &amp;quot;what to code?&amp;quot;
as a matter of empirical discovery: what are the
independently functioning information units in
text? Relevant facts emerge from comparing a
range of different alphabets.
What is a &amp;quot;letter of the alphabet&amp;quot;? -- the
problem of diacritics and digraphs. The most
obvious question turns out to be the most difficult
of all. Western European alphabets are in many
ways not typical of alphabets of the world. They
have an unusually small number of basic letters,
and to represent a larger number of sounds they use
digraphs like English sh, ch, th, or diacritics as
in Czech g, g. It seems at first entirely obvious
that digraphs like sh should be coded simply as a
sequence of two codes, one for s plus one for h.
Indeed English, French, German and Scandinavian
alphabets do alphabetize their digraphs just like
a sequence, s plus h etc. But these national
alphabets are not typical. Spanish, Hungarian,
Polish, Croatian and Albanian treat their native
digraphs as single letters for purposes of alpha-
betical order. Spanish 11 is not a sequence of
two l&apos;s, but a new letter which follows all lo, lu
sequences: similarly eh follows all c sequences, &amp;
SI follows all n sequences as a separate letter.
There is just as much variation in handling
letters with diacritics. The umlauted lettei V is
alphabetized as a separate letter following o in
Hungarian, and at the end of the alphabet in
Swedish, but in German it is mixed in with o. In
Spanish, is treated as a separate letter, but the
Slovak g representing the same sound is mixed in
with ordinary n.
In Table 1., the digraphs and letters with
diacritics which are not in parentheses or brackets
are alphabetized separately as distinct single
units. Those in parentheses are alphabetized as a
sequence of two or more letters or (Slovak and
</bodyText>
<footnote confidence="0.77502475">
Czech 1&apos;, g, t!, 141) are treated as equivalent to
the simpler letter, completely disregarding the
diacritic. Combinations in brackets are used to
represent sounds in words borrowed from other
</footnote>
<page confidence="0.972461">
1
</page>
<bodyText confidence="0.999854388888889">
languages. Double dashes mark sounds for which an
particular alphabet has no distinctive written sym-
bol, (In Russian, palatal consonants are marked
by choice of special vowel letters, while Turkish
has a different kind of contrast, hence the blanks.)
Even when a digraph or trigraph is treated as
a sequence of letters for alphabetization, there
may be other evidence that it functions as a single
information unit. In syllable division (hyphena-
tion), English never divides the digraphs sh, ch,
or th when they function as single units (heath-sr,
firther) but does when they represent two units
(hot-house). The same is true of other letter com-
binations in all national standard alphabets where
a single sound is represented by a combination of
letters.
Within certain mechanical constraints, type-
writer keyboards also put each distinct information
unit on a separate key. Thus Spanish if or Czech
g, 1, 6 are produced by single keys, not by adding
a diacritic to a base letter. Mechanical limits
have forced a sequence of two letters (like the
Spanish ch, 11) to be typed with two separate key-
strokes whether or not they represent a single
functional unit, but occasionally we see excep-
tions, as in Dutch where the I) digraph appears as
a ligature on a single key and is printed in one
space not two.
Unit unanalyzable letters exist in Serbian
and Macedonian for most of the sound types (the
columns) of Table 1. Icelandic has single letters
&amp;quot;thorn&amp;quot; and &amp;quot;edh&amp;quot; for the two rightmost columns.
Even where the other languages use digraphs or
letters with diacritics, there is evidence from
syllabification and usually also from alphabetical
order that these are functionally independent in-
formation units. For transliteration from one
national alphabet into another, these symbol equi-
valences are needed. The principle stated on the
preceding page thus implies that unique codes be
available for English sh, ch, th and unitary
digraphs in other languages so these can be used
when needed in information processing. (Informa-
tion processing is not the shuffling of bits of
scribal ink!) The principle does not compel, use
of those codes -- English th can be recorded first
as a sequence of two codes, then converted into a
single code only when needed, by a program which
has a dictionary listing all wards containing
unitary th.
Spatial arrangement of printed characters.
In alphabets of &amp;rope, letters (and information
units) almost always follow each other in a line,
from left to right. This is not true of many
</bodyText>
<tableCaption confidence="0.989834">
Table 1. Some Consonant Characters in Earope
</tableCaption>
<figure confidence="0.941380018181818">
Sound rgH i 4 ci 1 6 s ts dz 9 IS
Russian
Macedonian
Serbian
Hungarian
Croatian
Slovak
Czech
Latvian
Polish
LU tc
11, g fl LB 24-C
%/ w NC
ly ny ty gy s
lj nj s A- A
-- On (A) (e) (d&apos;) A
v
r (t&apos;) (c12) A
r 1
7 n II A
4 )
1 A 6 (di) (sz)
(ni) (ci) (dzi)
C.4&gt;t C x 4 [A3]
If C x LI, S
II c x Li L.43 i
c F 1
,Az.â€ž
h c [dz]
ch c [dz]
ch c [dz]
c
(dz)
(eh) c (dz)
cs [ass]
6 di
A (di)
(dA)
A (dg)
ZS
German (sch) (tsch) [dsch] s (ch) z [dz]
2
Albanian -- lj nj q gj
Turkish
Romanian
French
English
Spanish
sh zh 9 xhshcxth dh
3c s h L ] ]
f(gi) s L I
.(ce
Ltch] LdiJ [ts] [dz]
(sh) (...) (eh) j [ts] [dz] th th
x [ ] ch [ 1 s j [ts] [dz]
</figure>
<bodyText confidence="0.999931956043956">
important alphabets elsewhere in the world. Arabic
and Hebrew, when they write short vowels, place
them above or below the consonant letters. What
we transcribe as kitabu appears
(in a left-to-right transform of a u
the Arabic arrangement) as shown k t b
on the right. These vowel symbols
are independent information units,
not &amp;quot;diacritics&amp;quot; in the sense of the European
alphabets. They keep a constant farm, combining
freely with any consonant letter. Alphabets of
India and Southeast Asia place vowels above, below,
to right or to left of a consonant letter or clus-
ter, or in two or three of these positions simul-
taneously. There can be fUrther combinations with
marks for tones or consonant-doubling.
The Korean alphabet arranges its letters in
syllabic groups, so that mascot
would be a shown to the right ma co
if written in the Korean manner. s t
The independently functioning
information units are still consonants and vowels,
for which we need codes, and we need one additional
code to mark the division between syllables. This
is just as much an alphabet as our familiar English
and is not a syllabary. (Since there are only
about 400 syllables, a printing device might stare
all of them, but these would not normally be useful
in information processing.)
A flexible multi-lingual code for information
processing must be able to handle the different
spatial arrangements described here, but it need
not (except in input and output for human use) be
concerned with what that spatial arrangement is,
only with what significant information units it
contains. Even in Europe, Spanish accented vowels
L. 1. f, 6, show a vertical superimposition of
the basic vowels with a functionally independent
symbol of accentuation. These are not new letters
in the sense that Croatian A, 6 and 6 are, but
are alphabetized just like simple a, e, o, u.
Criteria for a two-byte code standard. We can
now consider alternative methods of coding for
multilingual information processing. Three basic
criteria are given first, followed by discussion
of alternative solutions and further criteria.
A) Each independent character or information
unit shall have available a representation in a
two-byte code (whether it is graphically manifest
as a base letter, digraph, independent diacritic,
letter-plus-diacritic unit, syllable separation,
punctuation mark, or other unit of normal text,
and independent of position in printing).
B) It shall be possible to identify the source
alphabet from the codes themselves. [Since &amp;quot;Cr in
Czech represents the sound /ts/, it is not the same
unit as English &amp;quot;c&amp;quot;; in library processing it is
important to know that German den and die are
articles like English the, to be disregarded in
filing, but English den and die are headwords.]
C) The assignment of information units to
codes shall maximize the possibilities for use of
one-byte code reductions through long monolingual
texts, minimizing shifts between different blocks
of 256 codes. [This is especially important in
reducing transmission costs.]
Each of the following three solutions has cer-
tain advantages. The third is far superior in the
long run.
Solution 1. Incorporate existing 7-bit or
8-bit national code standards, one in each block
of 256 codes. Use the extra space as codes for
information units which are not single spacing
characters, This satisfies all of the basic cri-
teria (A,B,C) and uses existing codes, adding only
a first byte as an alphabet name to make a two-
byte code. There is no transliteration-equivalence
and elaborate transliteration programs would be
necessary for each conversion, N x N programs for
N alphabets.
Solution 2. Systematically code all basic
letter forms and all their diacritic modifications
thus allowing for expansion, use of new letter-
diacritic combinations. IUspite their differences,
Latin-based alphabets share a common core of alpha-
betical order, which can be reflected in a coding
to minimize shuffling. This is attempted in Table
2., which includes all characters from IS0/TC97/SC2
N 1255 1982-11-01 pp.60-61 plus additions from
African and Vietnamese alphabets. Cods ordering
is downwards within columns, starting from the left.
</bodyText>
<tableCaption confidence="0.990814">
Table 2. Alphabetical order of letters and diacritics as a basis for coding
</tableCaption>
<figure confidence="0.988622176470588">
aabtcdcfgleeffghisiiiiikilxmcocceeopqrs
Sa ; I 6 I I
i f k f ir e6, f t
a t
7 d Ic 1 n F 9
e 1 a
1 t .
1 r t 6
g g t
K g r
1 g r
2
ad
O
Pttudu&apos;vv x y z &amp; at,f
t?if f
A
</figure>
<page confidence="0.990421">
3
</page>
<bodyText confidence="0.99864752631579">
This solution satisfies none of the criteria
(A,B,C), and does not provide codes for many kinds
of information units. It appears to be economical
in Europe, where 20 national alphabets can fit in
48 x 13 624 code cells if only letter forms are
considered. But for non-Latin alphabets there can
be no similar savings. Here there are (considering
only living alphabets) about 55 alphabets based on
38 distinct sets of letters.
Solution 3. Transliteration-equivalent units
assigned identical second bytes in their two-byte
code. Transliteration between any two alphabets
simply changes the first byte of the code naming
the alphabet, requiring minor programming only when
an alphabet has non-recoverable spellings or cannot
represent certain sounds. This solution depends on
the fact that there is a small number of types of
information units which have ever been represented
in a national standard alphabet. In the tentative
arrangement of Table 3., most of the sound types
noted are represented by single unanalyzable cha-
racters in some national alphabet (as Georgian,
Armenian, Hindi, ...), and most of the rest by
clearly unitary digraphs. Despite the strange
symbols, this is not a list of fine phonetic dis-
tinctions, it is a list of distinct categories
of written symbols.
The idea for this solution came from the one-
byte code adopted in India, structured identically
with transliteration-equivalence far each of the
alphabets of India. A printer with only Tamil
letters can simply print a Tamil transliteration
of an incoming Hindi message.
In the two-byte version presented here, there
is provision for any alphabet to add characters
representing sounds of some other alphabet, and a
small amount of space to add unique information
units which are not matched in other alphabets.
This is the right amount of space for expansion.
Applications to transliteration and library
Processing. With newer capabilities of printers
and screens, a speaker of any language can soon
request a data base in its original alphabet ar
in any transliteration of his choice, either one
using many diacritic characters like Croatian and
special symbols to avoid ambiguity, or one more
adapted to his native alphabet, for example French
or Hungarian. Records can be kept in the codes of
the original alphabet, always ensuring complete
recoverability. There would be a gentle encourage-
ment for each national alphabet to use a consistent
transliteration for each sound independent of the
source alphabet, because this would be automatic.,
Summary. The third solution described above
is designed to handle all the structures and func-
tions found in national standard alphabets and to
fit them like a well-made glove, allowing the maxi-
mum capabilities of information processing, but
never compelling their use. This type of solution
could be a primary international sten&apos;&apos;-d, with
code translations to reach existing 7-bit and 8-bit
standards and an ESCAPE sequence to allow proces-
sing directly in the older standards (solution 1.
above incorporated as an alternate). Since mathe-
matical and scientific symbols are international,
they would require only single blocks of 256 codes.
The first column of 16 blocks of 256 each could
provide 4096 two-byte control codes, and the second
column could eventually be added to the 96 alpha-
bet blocks allowing transliteration of numerals.
The right 128 blocks of 256 codes each remain for
Chinese/Japanese characters or other purposes, but
even these can be coded alphabetically in terms of
character components and arrangements (partly
achieved in a keyboard now installed at Stanford
and the Library of Congress).
</bodyText>
<sectionHeader confidence="0.992939" genericHeader="abstract">
ACKNOWLEDGEMENTS
</sectionHeader>
<bodyText confidence="0.999826666666667">
I would like to thank me. Thomas N. Hastings,
chairman of the ANSI X3L2 committee, and me. James
Agenbroad, APO, Library of Congress, for indispen-
sable information and discussions. They of course
bear no responsibility for claims or analyses
presented here.
</bodyText>
<tableCaption confidence="0.985321">
Table 3. Transliteration-equivalent information units found in national standard alphabets
</tableCaption>
<figure confidence="0.992396126760563">
0 1 2 3 4 5 6 7 8 9 ABCDEF
q ts/c 6/i 6 tg/cz t
q7 tar/c7 67 67 t?
qz tsh/ch 6h 6h to th
dz gg g dt/dt 0.
Y. (3&apos;) cf
gh 3h
6 z 1
4
0 SPace
1
2 1
3
4 o 2
L
to
2
5 Is e ?
6 m ee
o a
a m II
7 0 14
8 (
ad
9 .-t ual )
A o &apos;g INitial-CAPS
8 k ot ALTern.-CHAR
C 4.) H C D S&apos;ILLa.ble-SEPAR.
o 0
Dc REPeat
E 0 DGraph-LINK
0
F 0 0 DOUBle CONSon.
C.
C,
SUPerscript
DIACritic
INSULator
:IAMB (Ehg.
SILent LETter
NO VOWEL
tr r &apos;t&amp;quot; r r
f (Y) 1/1 i
n n 7
al tian 3n Win -emit it/un
1 a (yol i (y) u
I (ya) 7 1=111 U
P 01 t (*) u&apos;/ul
5 Zi. T (ye) M
â€¢ kw
P?
ph hw
4
b gw
6 (w)
bh (rw)
â€¢ (w)
in (r)w)
o z
o
3
el/A/Y o/ir
an
k?
kh
gh
ao
U 8
t 5
â€¢ x
L
</figure>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.074188">
<title confidence="0.999446">Multilingual Text Processing in a Two-Byte Code</title>
<author confidence="0.999756">Lloyd B Anderson</author>
<affiliation confidence="0.992792">Ecological Linguistics</affiliation>
<address confidence="0.939739">316 &amp;quot;A&amp;quot; St. S. E. Washington, D. C., 20003</address>
<abstract confidence="0.999151301886792">National and international standards committees are now discussing a two-byte code for multilingual information processing. This provides for 65,536 separate character and control codes, enough to make permanent code assignments for all the characters of all national alphabets of the world, and also to include Chinese/Japanese characters. This paper discusses the kinds of flexibility required to handle both Roman and non4toman alphabets. It is crucial to separate information units (codes) from graphic forms, to maximize processing power. Comparing alphabets around the world, we find that the graphic devices (letters, digraphs, accent marks, punctuation, spacing, etc.) represent a very limited number of information units. It is possible to arrange alphabet codes to provide transliteration equivalence, the best of three solutions compared as a framework for code assignments. vs. Farm.In developing proposals for codes in information processing, the most important decisions are the choices of what to code. In a multilingual two-byte code, Xerox Corporation has made explicit a principle which we can state precisely as follows: Basic codes stand for independently functioninformation units(not for visual farms) The choice of type font, presence or absence of serifs, and variations like boldface, italics or underlining, are matters of farm. Such choices are normally made once for spans at least as long as one ward. We do not use ComPLeX MIXturEs, but consistent strings like this, THIS, this, or THIS. By assigning the same basic code to variations of a single letter (as a, a, A, A), all variants will automatically be alphabetized the same way, which is as it should be. The choice of variant farms is specified by supplementary &amp;quot;looks&amp;quot; information. (The capitalization of first letters of sentences, proper names, or nouns, is a kind of punctuation.) Identical graphic forms may also be assigned more than one code because they are distinct units in information processing. Thus the letter form &amp;quot;Cr is used in the Russian alphabet to represent the sound /s/, but it is not the same information unit as English &amp;quot;C&amp;quot;, so it has a distinct code. So far this seems relatively obvious. The same principle is now being applied in much more subtle cases. Thus the minus sign and the hyphen are assigned distinct codes in recent proposals because they are completely distinct information units. There are even two kinds of hyphens distinguished, a &amp;quot;hard&amp;quot; hyphen as in the father-in-law,which remains always present, and a &amp;quot;soft&amp;quot; hyphen which is used only to divide a ward at the end of a line, and which should automatically vanish when, in ward-processing, the same ward comes to stand undivided within the line. We can now frame the question &amp;quot;what to code?&amp;quot; as a matter of empirical discovery: what are the independently functioning information units in text? Relevant facts emerge from comparing a range of different alphabets. is a &amp;quot;letter of the alphabet&amp;quot;?-the of diacritics and digraphs.The most obvious question turns out to be the most difficult of all. Western European alphabets are in many ways not typical of alphabets of the world. They have an unusually small number of basic letters, and to represent a larger number of sounds they use digraphs like English sh, ch, th, or diacritics as in Czech g, g. It seems at first entirely obvious digraphs like sh should be coded simply sequence of two codes, one for s plus one for h. Indeed English, French, German and Scandinavian alphabets do alphabetize their digraphs just like a sequence, s plus h etc. But these national are not typical. Spanish, and Albanian treat their native as singleletters for purposes of alphabetical order. Spanish 11 is not a sequence of two l&apos;s, but a new letter which follows all lo, lu sequences: similarly eh follows all c sequences, &amp; all n sequences as a separate letter. There is just as much variation in handling letters with diacritics. The umlauted lettei V is alphabetized as a separate letter following o in Hungarian, and at the end of the alphabet in Swedish, but in German it is mixed in with o. In Spanish, is treated as a separate letter, but the Slovak g representing the same sound is mixed in with ordinary n. In Table 1., the digraphs and letters with diacritics which are not in parentheses or brackets are alphabetized separately as distinct single units. Those in parentheses are alphabetized as a sequence of two or more letters or (Slovak and 1&apos;, g, t!, treated as equivalent to the simpler letter, completely disregarding the diacritic. Combinations in brackets are used to represent sounds in words borrowed from other 1 languages. Double dashes mark sounds for which an particular alphabet has no distinctive written symbol, (In Russian, palatal consonants are marked by choice of special vowel letters, while Turkish has a different kind of contrast, hence the blanks.) when a digraph or trigraph is treated a sequence of letters for alphabetization, there be other evidence that it functions as a information unit. In syllable division (hyphenation), English never divides the digraphs sh, ch, or th when they function as single units (heath-sr, firther) but does when they represent two units The same is true of other letter combinations in all national standard alphabets where a single sound is represented by a combination of letters. Within certain mechanical constraints, typewriter keyboards also put each distinct information on key. Thus Spanish if or Czech 6 produced by single keys, not by adding a diacritic to a base letter. Mechanical limits have forced a sequence of two letters (like the Spanish ch, 11) to be typed with two separate keystrokes whether or not they represent a single functional unit, but occasionally we see exceptions, as in Dutch where the I) digraph appears as a ligature on a single key and is printed in one space not two. Unit unanalyzable letters exist in Serbian and Macedonian for most of the sound types (the columns) of Table 1. Icelandic has single letters &amp;quot;thorn&amp;quot; and &amp;quot;edh&amp;quot; for the two rightmost columns. Even where the other languages use digraphs or letters with diacritics, there is evidence from syllabification and usually also from alphabetical order that these are functionally independent information units. For transliteration from one national alphabet into another, these symbol equivalences are needed. The principle stated on the preceding page thus implies that unique codes be availablefor English sh, ch, th and unitary digraphs in other languages so these can be used when needed in information processing. (Information processing is not the shuffling of bits of ink!) The principle does not compel,use of those codes -- English th can be recorded first as a sequence of two codes, then converted into a single code only when needed, by a program which has a dictionary listing all wards containing unitary th. Spatial arrangement of printed characters. In alphabets of &amp;rope, letters (and information units) almost always follow each other in a line, from left to right. This is not true of many Table 1. Some Consonant Characters in Earope rgH 6 s dz 9</abstract>
<title confidence="0.8899192">Russian Macedonian Serbian Hungarian Croatian</title>
<author confidence="0.781513">Slovak</author>
<affiliation confidence="0.5684955">Czech Latvian</affiliation>
<abstract confidence="0.994964910652921">Polish 11,g fl LB ly ny ty gy s nj A On (e) (d&apos;) A v (t&apos;) A r 1 n A 4 ) A 6 (ni) (ci) (dzi) C.4&gt;t LI, S c x L.43 i c F 1 h c [dz] ch c [dz] ch c [dz] c (dz) (eh) c (dz) cs [ass] 6 di A (di) (dA) (sch) (tsch) s (ch) z [dz] 2 Albanian -lj nj q gj Turkish Romanian French English Spanish zh dh s h ] ] f(gi) s I Ltch] LdiJ [ts] [dz] (sh) (...) (eh) j [ts] [dz] th th x [ ] ch [ 1 s j [ts] [dz] important alphabets elsewhere in the world. Arabic and Hebrew, when they write short vowels, place them above or below the consonant letters. What we transcribe as kitabu appears (in a left-to-right transform of a u the Arabic arrangement) as shown k t b on the right. These vowel symbols are independent information units, not &amp;quot;diacritics&amp;quot; in the sense of the European alphabets. They keep a constant farm, combining freely with any consonant letter. Alphabets of and Southeast Asia place below, to right or to left of a consonant letter or cluster, or in two or three of these positions simultaneously. There can be fUrther combinations with marks for tones or consonant-doubling. The Korean alphabet arranges its letters in syllabic groups, so that mascot would be a shown to the right ma co if written in the Korean manner. s t The independently functioning units are still consonants and which we need codes, and one additional to mark the division This is just as much an alphabet as our familiar English and is not a syllabary. (Since there are only 400 syllables, a printingdevice might stare all of them, but these would not normally be useful in information processing.) A flexible multi-lingual code for information processing must be able to handle the different arrangements described it need not (except in input and output for human use) be concerned with what that spatial arrangement is, only with what significant information units it contains. Even in Europe, Spanish accented vowels 1. f, 6, a vertical superimposition of basic a functionally independent symbol of accentuation. These are not new letters the sense that Croatian but are alphabetized just like simple a, e, o, u. for a two-byte code standard.We can now consider alternative methods of coding for multilingual information processing. Three basic criteria are given first, followed by discussion of alternative solutions and further criteria. A) Each independent character or information unit shall have available a representation in a two-byte code (whether it is graphically manifest a digraph, independent diacritic, letter-plus-diacritic unit, syllable separation, punctuation mark, or other unit of normal text, and independent of position in printing). B) It shall be possible to identify the source alphabet from the codes themselves. [Since &amp;quot;Cr in Czech represents the sound /ts/, it is not the same unit as English &amp;quot;c&amp;quot;; in library processing it is important to know that German den and die are articles like English the, to be disregarded in filing, but English den and die are headwords.] C) The assignment of information units to codes shall maximize the possibilities for use of one-byte code reductions through long monolingual texts, minimizing shifts between different blocks of 256 codes. [This is especially important in reducing transmission costs.] Each of the following three solutions has certain advantages. The third is far superior in the long run. Solution 1. Incorporate existing 7-bit or national code standards,one in each block of 256 codes. Use the extra space as codes for information units which are not single spacing characters, This satisfies all of the basic criteria (A,B,C) and uses existing codes, adding only a first byte as an alphabet name to make a twobyte code. There is no transliteration-equivalence and elaborate transliteration programs would be necessary for each conversion, N x N programs for N alphabets. 2.Systematically all basic letter forms and all their diacritic modifications thus allowing for expansion, use of new letterdiacritic combinations. IUspite their differences, Latin-based alphabets share a common core of alphaorder, which be in a coding to minimize shuffling. This is attempted in Table 2., which includes all characters from IS0/TC97/SC2 N 1255 1982-11-01 pp.60-61 plus additions from African and Vietnamese alphabets. Cods ordering is downwards within columns, starting from the left. 2. Alphabetical order of letters and diacritics basis for coding ; 6 I I f t d Ic 1 9 e 1 a 1 t . g g r 2 ad O z A 3 This solution satisfies none of the criteria (A,B,C), and does not provide codes for many kinds of information units. It appears to be economical in Europe, where 20 national alphabets can fit in x 13 624 code cells if only letter formsare considered. But for non-Latin alphabets there can be no similar savings. Here there are (considering living alphabets) about based on 38 distinct sets of letters. Solution 3. Transliteration-equivalent units in their two-byte Transliteration two alphabets simply changes the first byte of the code naming the alphabet, requiring minor programming only when an alphabet has non-recoverable spellings or cannot represent certain sounds. This solution depends on the fact that there is a small number of types of information units which have ever been represented in a national standard alphabet. In the tentative of Table of the sound types noted are represented by single unanalyzable characters in some national alphabet (as Georgian, Armenian, Hindi, ...), and most of the rest by clearly unitary digraphs. Despite the strange symbols, this is not a list of fine phonetic distinctions, it is a list of distinct categories of written symbols. The idea for this solution came from the onebyte code adopted in India, structured identically with transliteration-equivalence far each of the alphabets of India. A printer with only Tamil letters can simply print a Tamil transliteration of an incoming Hindi message. In the two-byte version presented here, there is provision for any alphabet to add characters representing sounds of some other alphabet, and a small amount of space to add unique information units which are not matched in other alphabets. This is the right amount of space for expansion. Applications to transliteration and library Processing.With newer capabilities of printers and screens, a speaker of any language can soon request a data base in its original alphabet ar in any transliteration of his choice, either one using many diacritic characters like Croatian and special symbols to avoid ambiguity, or one more adapted to his native alphabet, for example French or Hungarian. Records can be kept in the codes of the original alphabet, always ensuring complete recoverability. There would be a gentle encouragement for each national alphabet to use a consistent transliteration for each sound independent of the source alphabet, because this would be automatic., Summary.The third solution described above is designed to handle all the structures and functions found in national standard alphabets and to fit them like a well-made glove, allowing the maximum capabilities of information processing, but never compelling their use. This type of solution be a primary international with code translations to reach existing 7-bit and 8-bit standards and an ESCAPE sequence to allow processing directly in the older standards (solution 1. above incorporated as an alternate). Since mathematical and scientific symbols are international, they would require only single blocks of 256 codes. The first column of 16 blocks of 256 each could provide 4096 two-byte control codes, and the second column could eventually be added to the 96 alphabet blocks allowing transliteration of numerals. The right 128 blocks of 256 codes each remain for Chinese/Japanese characters or other purposes, but even these can be coded alphabetically in terms of character components and arrangements (partly achieved in a keyboard now installed at Stanford and the Library of Congress). ACKNOWLEDGEMENTS would like to thank N. Hastings, of the ANSI X3L2 committee, and Agenbroad, APO, Library of Congress, for indispensable information and discussions. They of course bear no responsibility for claims or analyses presented here. Table 3. Transliteration-equivalent information units found in national standard alphabets 1 2 3 6 7 8 9 ABCDEF q ts/c 6/i 6 tg/cz t qz tsh/ch 6h 6h g dt/dt 0. (3&apos;) cf gh 3h 6 z 1 4 0 SPace 1 2 1 3 o 2 L to 2 5 Is e ? 6 m ee o a m 7 0 14 8 ( ad .-t o&apos;g INitial-CAPS ALTern.-CHAR 4.)H DS&apos;ILLa.ble-SEPAR. o 0 Dc REPeat E 0DGraph-LINK 0 00 DOUBle CONSon. SUPerscript DIACritic INSULator :IAMB (Ehg. SILent LETter NO VOWEL &apos;t&amp;quot; r r (Y) i n n 7 tian Win it/un 1 a (yol i (y) u 7 1=111 U P 01t (*) u&apos;/ul Zi. M â€¢ 4 b gw 6 (w) bh (rw) â€¢ (w) o z o 3 an k? kh gh ao U 8</abstract>
<intro confidence="0.825542">x</intro>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
</citationList>
</algorithm>
</algorithms>