<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000002">
<title confidence="0.4165955">
Improving Natural Language Processing by Linguistic Document
Annotation
</title>
<author confidence="0.919333">
Hideo Watanabe*, Katashi Nagao*, Michael C. McCord** and Arendse Bernth**
</author>
<affiliation confidence="0.870095">
* IBM Research, Tokyo Research Laboratory
</affiliation>
<address confidence="0.789756666666667">
1623-14 Shimotsuruma, Yamato,
Kanagawa 242-8502, Japan
watanabe©trLibm.co.jp, nagao©trLibm.co.jp
** IBM T. J. Watson Research Center
Route 134, Yorktown Heights,
NY 10598, USA
</address>
<email confidence="0.867075">
mcmccordOus.ibm.com, arendseUus.ibm.com
</email>
<sectionHeader confidence="0.984715" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999919866666667">
Natural language processing (NLP) programs are
confronted with various difficulties in processing
HTML and XML documents, and have the po-
tential to produce better results if linguistic in-
formation is annotated in source texts. We have
therefore developed the Linguistic Annotation Lan-
guage (or LAL), which is an XML-compliant tag
set for assisting natural language processing pro-
grams. It consists of linguistic information tags
such as tags specifying word/phrasal boundaries,
and task-dependent instruction tags such as tags
defining the scope of translation for machine trans-
lation programs. We have also developed an LAL-
annotation editor to facilitate users to annotate
documents without seeing tags.
</bodyText>
<sectionHeader confidence="0.995598" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.998708090909091">
The rapid expansion of the Internet has accel-
erated the proliferation of documents written in
HTML and XML. Programs for performing natu-
ral language processing (or NLP) tasks such as key-
word extraction, automatic text summarization, and
machine translation have to be able to deal with
such Internet documents. However, there are vari-
ous obstacles that make it difficult for them to pro-
duce good results. It is true that NLP technologies
are not perfect, but some of the difficulties result
from problems in HTML. Further, in general, if
linguistic information is added in a source text, it
greatly helps NLP programs to produce a better re-
sult. Consider the following situations. When you
use a search engine, you are often returned a list
of thousands of documents matching your query.
Most of the current search engines just use superfi-
cial information such as keywords. If search engines
used richer linguistic information such as syntactic
structures, they would be able to provide a more
appropriate ranking of retrieved documents.
When you generate a summary of an HTML
</bodyText>
<figure confidence="0.9483748">
HTML Source
I used the h3 tag to emphasize (h3)this part(/h3).
Rendering Image
I used the h3 tag to emphasize
this part
</figure>
<figureCaption confidence="0.999753">
Figure 1: An example of wrong usage of HTML tag
</figureCaption>
<bodyText confidence="0.999745225806452">
page by using an automatic summary generation
program, a copyright notice is sometimes included
in the summary text. Most of the current auto-
matic summary programs simply select important
sentences on the basis of surface clues such as key-
words and sentence location in a document. As
a result, they sometimes select a copyright notice
located at the end of a document, since sentences
located at the ends of documents tend to be im-
portant. This problem can be avoided if the main
part of document is explicitly declared.
Further, when you use a Web page translation
program, you sometimes see wrong translations.
Most of them are generated by the incompleteness
of MT technology, but some are generated by prob-
lems involving HTML and XML tag usage. For in-
stance, writers often misuse tags to obtain certain
stylistic effects. For instance, some writers use a
heading tag to obtain large font and bold style, as
shown in Fig. 1. Most machine translation (MT)
engines change the translation logic when a sen-
tence is a title, so this wrong use of heading tags
sometimes causes a wrong translation result. How-
ever, the likelihood of this will decrease if a style
sheet mechanism is widely accepted by Web au-
thors in the future.
Another example of HTML/XML problems is
the recognition of a sentence. There are many cases
in which a sentence is terminated not by a period,
but merely by a (br) tag, for instance, in an HTML
table environment. As shown in Fig. 2, a writer
</bodyText>
<figure confidence="0.714016444444445">
(table)
(tr)
(td)
(a href=&amp;quot;...&amp;quot;)Internet Shops(/a)(br)
(a href=&amp;quot;...&amp;quot;)Cool Sites(/a)(br)
(a href=&amp;quot;...&amp;quot;)What&apos;s New!(/a)
(/td)
(/tr)
(/table)
</figure>
<figureCaption confidence="0.99723">
Figure 2: An example of using (br) tags in a table
</figureCaption>
<bodyText confidence="0.999611916666667">
sometimes intends each line in a cell of a table to
express a sentence, even if there is no punctuation
at the end of the line. The MT program cannot tell
whether each line is a sentence or whether these
three lines form one sentence.
In general, it is very helpful for machine trans-
lation programs to know boundaries in many levels
(such as sentence, phrases, and words) and to know
word-to-word dependency relations. For instance,
in the following example, &amp;quot;St.&amp;quot; has two possible
meanings: &amp;quot;street&amp;quot; and &amp;quot;saint.&amp;quot; Therefore, we can-
not determine whether the following example con-
sists of one or two sentences without parsing it.
I went to New Ark St. Paul lived there
in two years ago.
As another example, the following sentence is
ambiguous so that there are two interpretations;
one interpretation is that what he likes is people
and the other interpretation is that what he likes
is accommodating. If there are tags indicating the
direct-object modifier of the word &amp;quot;like,&amp;quot; then the
correct interpretation is possible.
He likes accommodating people.
As the above examples show, NLP applications
do not achieve their full potential, on account of
problems unrelated to the essential NLP processes.
If tags expressing linguistic information are inserted
into source documents, they help NLP programs
recognize document and linguistic structures prop-
erly, allowing the programs to produce much better
results. At the same time, it is true that NLP tech-
nologies are incomplete, but their deficiencies can
sometimes be circumvented through the use of such
tags. Therefore, this paper proposes a set of tags
for helping NLP programs, called Linguistic Anno-
tation Language (or LAL).
</bodyText>
<sectionHeader confidence="0.634117" genericHeader="method">
2 Linguistic Annotation Language
</sectionHeader>
<subsectionHeader confidence="0.833787">
2.1 Design Principle
</subsectionHeader>
<bodyText confidence="0.872717">
Linguistic Annotation Language (or LAL) is an
XML-compliant tag set. It was designed with the
following considerations:
</bodyText>
<listItem confidence="0.886949">
• Simplicity: Although we consider that LAL
tags should be as simple as possible so that
humans will want to try annotating docu-
ments manually, we must offer an assisting
tool for annotation in practice. The simplic-
ity is also important to make an easy-to-use
annotation tool, since if we use a feature-rich
</listItem>
<bodyText confidence="0.9126312">
tag set, a user must check many annotation
items. Therefore, the main part of LAL con-
sists of syntactic annotation tags for specify-
ing boundaries at many levels, and limited se-
mantic annotation tags for specifying limited
semantic information. In practice, bound-
ary specification with limited linguistic infor-
mation can cover most NLP problems, so it
is sufficiently effective for NLP programs in
terms of increasing accuracy.
</bodyText>
<listItem confidence="0.767379">
• Assistance with NLP Tasks: The main pur-
pose of LAL is to help NLP programs to per-
</listItem>
<bodyText confidence="0.991854636363636">
form their tasks much better. Therefore, in
addition to tags for linguistic information, it
should contain task-dependent instruction tags
such as a tag indicating translation scope.
LAL tags are usually expressed by using XML
namespaces. Their XML namespace prefix is lal.
Since linguistic information annotation inherently
has different annotation directions, linguistic an-
notation tags may overlap with other HTML and
XML tags. In this case, LAL tags are expressed in
the form of the processing instructions.
</bodyText>
<subsectionHeader confidence="0.998807">
2.2 LAL Tags
</subsectionHeader>
<bodyText confidence="0.9999698">
LAL tags are classified into linguistic informa-
tion tags and task-dependent instruction tags. Lin-
guistic information tags are further classified into
syntactic and semantic tags. Each type of LAL tag
is described below.
</bodyText>
<subsubsectionHeader confidence="0.965393">
2.2.1 Syntactic Information Tags
</subsubsectionHeader>
<bodyText confidence="0.987514409090909">
This category has tags for sentences, words, and
phrases. These tags are mainly used to specify a
scope for each unit.
Sentence: The sentence tag s is used to specify
a sentence scope.
(lal:s)This is the first sentence.(/lal:s)
(lal:s)This is the second sentence.(/lal:s)
The attribute type=&amp;quot;hdr&amp;quot; means that the sen-
tence is a title or header.
Word: The word tag w is used to specify a word
scope. It can have attributes for additional in-
formation such as base-form (lex), part-of-speech
(pos), features (ftrs), and sense (sense) of a word.
The values of these attributes are language depen-
dent, and are not described in this paper due to
the space limitation.
(lal:s)
(lal:w lex=&amp;quot; this&amp;quot; pos=&amp;quot; det&amp;quot; ) This ( /lal:w)
(lal:w lex=&amp;quot; be&amp;quot; pos=&amp;quot; verb&amp;quot; ftr =&amp;quot; sg,3rd&amp;quot; )is
(/lal:w)
(lal:w lex=&amp;quot;a&amp;quot; pos=&amp;quot;det&amp;quot;)a(/lal:w)
(lal:w lex=&amp;quot; pen&amp;quot; pos=&amp;quot; noun&amp;quot; ftr=&amp;quot; sg,count&amp;quot; )
pen(/lal:w)
(/lal:s)
The dependency (or word-to-word modification
relationship) can be expressed by using the id and
mod attributes of a word tag, that is, each word
can have an ID value of its modifiee in a mod at-
tribute. The ID value of a mod attribute must be
an ID value of a word or a seg tag. For instance,
the following example contains attributes showing
that the word &amp;quot;with&amp;quot; modifies the word &amp;quot;saw,&amp;quot; and
which means that &amp;quot;she&amp;quot; has a telescope.
She (lal:w id=&amp;quot;wl&amp;quot; lex=&amp;quot; see&amp;quot; pos=&amp;quot;v&amp;quot;
sense=&amp;quot; seer )saw(/lal:w) a man (lal:w
mod=&amp;quot;w1&amp;quot;)with(/lal:w) a telescope.
The ref attribute has the ID value of the referent
of the current word. This can be used to specify a
pronoun referent, for instance:
(lal:s)He bought a new (lal:w id=&amp;quot;w1&amp;quot;)car
(/lal:w) yesterday.(/lal:s)
(lal:s)She was very surprised to learn
that (lal:w ref=&amp;quot; wl&amp;quot; )it(/lal:w) was very
expensive.(/lal:s)
Phrase: The phrase tag seg is used to specify
a phrase scope in any level. The following exam-
ple specifies the scope of a noun phrase &amp;quot;a man ...
a telescope,&amp;quot; and this also implies that a preposi-
tional phrase &amp;quot;with a telescope&amp;quot; modifies a noun
phrase &amp;quot;a man.&amp;quot;
She saw (lal:seg)a man with a telescope(/lal:seg).
In addition to boundary specification, you can
specify syntactic category for a phrase by using an
optional attribute cat. The value of the cat at-
tribute is also dependent on languages and systems.
The following example specifies that a phrase &amp;quot;a
man with a telescope&amp;quot; is a noun phrase.
He saw (lal:seg cat=&amp;quot;np&amp;quot;)a man with a
telescope(/lal:seg).
The attribute para=&amp;quot;yes&amp;quot; means that this seg-
ment also means a scope of coordination. The fol-
lowing example shows that a word &amp;quot;software&amp;quot; and
a word &amp;quot;hardware&amp;quot; are coordinated.
This company deals with (lal:seg cat=&amp;quot;np&amp;quot;
para=&amp;quot; yes&amp;quot; ) software and hardware (/lal:seg)
of computer.
</bodyText>
<subsubsectionHeader confidence="0.755987">
2.2.2 Semtantic Information Tags
</subsubsectionHeader>
<bodyText confidence="0.986415476923077">
LAL has the following limited semantic tags which
are selected since these expressions are often used.
The proper tag is used to specify a proper name,
and it has the type attribute specifying a sub-class
of a proper name, such as person, place, organiza-
tion, or country.
(lal:proper type=&amp;quot;country&amp;quot;)Luxembourg
(/lal:proper)
This information is effective for translation, for
instance, to select an appropriate translation word
of a verb which may be changed if a subject of the
verb has a human property, etc.
You can also use acronym and abbr elements
defined in HTML to specify an acronym and an
abbreviation terms. They are a little bit extended
to have the expan attribute to specify an expanded
form of abbreviation or acronym like the abbr tag
of TEI1
(lal:acronym expan=&amp;quot; International Busi-
ness Machines&amp;quot; )IBM(/lal:acronym)
The date tag is used to specify a date expres-
sion, whereas, the time tag is used to specify a time
expression. The value attribute is used to specify a
normalized form of a date or time defined by ISO
8601 [5].
(lal:date value=&amp;quot;2000-01-01&amp;quot;)Jan. 1, 2000
(pal:date)
(lal:time value=&amp;quot;15:00&amp;quot; )3:00 PM(/lal:time)
The num tag is used to specify a number expres-
sion (e.g., two million and twenty-one). The type
and value attributes are used to specify a normal-
ized form of the number expression. Further, the
money tag is used to specify money expression, in
particular, to add monetary unit information.
&apos;Some of LAL tags have the same name as those defined
in previous efforts such as TEI, since we do not like to in-
troduce new tag names, rather, would like to reuse existing
names if the meaning is the same.
Text Summarization: Automatic text summa-
rization programs have problem in handling HTML
texts with the result that unimportant sentences
are included in the summary texts. This prob-
lem occurs because the program extracts impor-
tant sentences whose importance it calculates on
the basis of the number of important keywords, the
location in a text, and so on [16]. Thus, a sum-
mary program may select unimportant sentences if
it does not know the main text area in a document.
A typical HTML text has related information ar-
eas such as a list of related links, the name of the
reporter, and a copyright notice, in the beginning
and ending area, and these areas can cause a wrong
summary to be generated. Therefore, we need a tag
that specifies which segments should be processed
in order to generate a summary of a document.
If a summary program encounters (lal:smrycalcStop/),
it stops summary calculation until it encounters
(lal:smrycalcStart/). Therefore, additional infor-
mation parts such as a copyright notice, and a
writer&apos;s signature, should not be included in this
summary calculation scope.
(lal:num type=&amp;quot; cardinal&amp;quot; value=&amp;quot; 21&amp;quot; )twenty
one/ lal:num)
(lal:money unit=&amp;quot;usd&amp;quot;) (lal:num value=&amp;quot; 1000&amp;quot;)
one thousand (/lal:num) dollars (/lal:money)
</bodyText>
<subsubsectionHeader confidence="0.964592">
2.2.3 Task-Dependent Instruction Tags
</subsubsectionHeader>
<bodyText confidence="0.998080636363636">
Machine Translation: For machine translation
of HTML or XML documents, we need unique al-
gorithms to detect which segments are to be trans-
lated and which are not. In particular, XML can in-
troduce new tags, whose semantics we generally do
not know. Therefore, we need an instructional tag
to inform a machine translation program whether
or not a text segment is to be translated.
If an MT program encounters (lal:tranStop/), it
passes over the subsequent text until it encounters
(lal:tranStart/).
</bodyText>
<sectionHeader confidence="0.974954" genericHeader="method">
3 LAL-aware NLP Programs
</sectionHeader>
<bodyText confidence="0.99912">
We have modified some NLP systems to be LAL-
aware&apos;.
ESG [7, 8] is an English parsing system devel-
oped by IBM Watson Research Center, and up-
dated to accept and generate LAL-annotated En-
glish. This LAL-aware version of ESG is used as a
backend process to show users an interpretation of
a system of a given English sentence in the LAL-
annotation editor described in the next section.
</bodyText>
<footnote confidence="0.975733">
2They support only syntactic information tags currently,
and will support other tags later.
</footnote>
<bodyText confidence="0.999065470588235">
KNP [6] is a Japanese dependency parsing sys-
tem developed by Kyoto University. We have devel-
oped a post-process routine to convert KNP pars-
ing result into LAL format. This is also used as a
backend process to show the initial interpretation
of a given Japanese sentence in the LAL-annotation
editor.
Further, we have modified IBM&apos;s English to Ger-
man, French, Spanish, and Italian translation en-
gines [8, 9, 10] and English to Japanese translation
engine [13, 14, 17] to accept LAL-annotated En-
glish HTML input.
In addition, we have developed an algorithm for
accelerating CFG-parsing process by using LAL tag
information&apos; [19], and this algorithm is implemented
in the English-to-Japanese translation engine men-
tioned above.
</bodyText>
<sectionHeader confidence="0.981445" genericHeader="method">
4 LAL-Annotation Editor
</sectionHeader>
<bodyText confidence="0.9999158">
Since inserting tags into documents manually is
not generally an easy task for end users, it is im-
portant to provide a GUI-based annotation editor.
In developing such an editor, we took into consid-
eration the following points:
</bodyText>
<listItem confidence="0.988899666666667">
• Users should not have to see any tags.
• Users should not have to see internal repre-
sentations expressing linguistic information.
• Users should be able to view and modify lin-
guistic information such as feature values, but
only if they want.
</listItem>
<bodyText confidence="0.999769833333333">
With respect to the above points, we have found
that most of the errors made by NLP programs
result from their failure to recognize the linguistic
structures of sentences. Therefore, the LAL editor
shows only a structural view of a given sentence;
other information is shown only if the user requests
it.
The important issue here is how to represent the
syntactic structure of a sentence to the user. NLP
programs normally deal with a linguistic structure
by means of a syntactic tree, but such a structure
is not necessarily easy for end users to understand.
For instance, Fig. 3 shows the dependency struc-
ture of the English sentence &amp;quot;IBM announced a
new computer system for children with voice func-
tion.&amp;quot; This dependency structure is not easy to un-
derstand for end users, partly because it is diffi-
cult to remind the original sentence quickly due to
</bodyText>
<footnote confidence="0.981868333333333">
3This does not depend on LAL, rather it is a general
algorithm applicable for CFG-parsing when any dependency
information is given.
</footnote>
<bodyText confidence="0.9980118">
not keeping the surface word order in a given sen-
tence in this structure4. Therefore, the necessary
property of a linguistic structural view is for users
to easily reconstruct the original surface sentence
string.
</bodyText>
<figure confidence="0.9934228">
announced
IBM computer
a new for with
children function
voice
</figure>
<figureCaption confidence="0.974046">
Figure 3: An example of tree structure of an En-
glish sentence
</figureCaption>
<bodyText confidence="0.999897633333333">
Considering this requirement, we have developed
an algorithm to show linguistic dependency struc-
ture with keeping the surface word order which
shows dependencies by indentations. Fig. 5 shows
examples of linguistic structural view by this al-
gorithm. In these examples, you can easily recon-
struct the surface sentence string by just looking at
words from top to bottom and from left to right,
and easily know dependencies of words at the same
time.
The next important issue is that how easily a
user can understand the overall linguistic struc-
ture. If a user is, at first, presented with detailed
linguistic structure in the word level, then it is dif-
ficult to grasp the important linguistic skeleton of
a sentence. Therefore, another necessary property
is to give users a view in which the overall sentence
structure is easily recognized.
To suffice this requirement, we have introduced
two presentation modes: the reduced presentation
view and the expanded presentation view. In the
reduced presentation view, a main verb and its
modifiers are basic units for presenting dependen-
cies, and they are located in different lines with
keeping the surface order. Fig. 5 (a) shows an
example of this reduced presentation view. In this
view, since the obvious dependencies for native speak-
ers (e.g. &amp;quot;a&amp;quot; and &amp;quot;computer&amp;quot; ) are not displayed
explicitly, a user can concentrate on dependencies
between key units (or phrases). If a user find any
</bodyText>
<footnote confidence="0.613971">
4You must perform an inorder tree walk to reconstruct a
surface sentence string.
</footnote>
<bodyText confidence="0.9942702">
dependency errors in the reduced view, he or she
can enter the expanded view mode in which all
words are basic units for presenting dependencies.
Fig. 5 (b) and (c) shows examples of this expanded
view.
</bodyText>
<figure confidence="0.9156324">
1 Locate the root at an appropriate position;
2 Add the root to node-list;
3 while node-list 0 ch
4 curunit {— remove-first-element (node-list);
5 curline {— the row of curunit;
6 Add pre-modifiers of curunit to mod-list and
sort it by the distance with curunit in the as-
cending order;
7 while mod-list 0 0 {
8 mod {— remove-first-element (mod-list);
</figure>
<bodyText confidence="0.60531925">
9 If the forward modification is major in the
current language, mod is the nearest pre-
modifier, and there is no words between
mod and curunit, then {
</bodyText>
<figure confidence="0.8863296">
10 Locate mod just before curunit;
11 } else {
12 Insert a new row just before the row of
the curline, and make it curline;
13 Locate mod in curline at the column
after that in which the last character
of curunit is located.
14
15
16 curline {— the row of curunit;
17 Add post-modifiers of curunit to mod-list and
sort it by the distance with curunit in the as-
cending order;
18 while mod-list 0 0 {
19 mod remove-first-element (mod-list);
</figure>
<bodyText confidence="0.731564818181818">
20 If the backward modification is major in
the current language, mod is the nearest
post-modifier, and there is no words be-
tween mod and curunit, then {
21 Locate mod just after curunit;
22 } else {
23 Insert a new row just after the row of
the curline, and make it curling;
24 Locate mod in curline at the column
after that in which the last character
of curunit is located.
</bodyText>
<figure confidence="0.5433258">
25
26
27
28 The root unit and its direct modifiers are adjusted
to be located in the same column.
</figure>
<figureCaption confidence="0.8654155">
Figure 4: Algorithm for presenting linguistic struc-
ture
</figureCaption>
<bodyText confidence="0.999748933333333">
The algorithm for presenting linguistic structures
we have developed is shown in Fig. 4. In this algo-
rithm, please note that main verbs and its modifier
clauses are used as presentation units (modifiees
and modifiers) in the reduced view, and words are
used as presentation units in the expanded view.
We have developed a GUI-based LAL-annotation
editor that provides a structural views by using
the above algorithm. Fig. 5 shows screen im-
ages of the editor. In the reduced view (as shown
in (a)), an end user can easily grasp the overall
structure so that &amp;quot;IBM&amp;quot; modify &amp;quot;announced,&amp;quot; the
phrase &amp;quot;a new computer&amp;quot; modifies (or is an direct
object of) &amp;quot;announced,&amp;quot; and the phrase &amp;quot;with voice
recognition function&amp;quot; modifies &amp;quot;announced,&amp;quot; etc.
In this case, since the dependencies between &amp;quot;for&amp;quot;
and &amp;quot;announced,&amp;quot; and &amp;quot;with&amp;quot; and &amp;quot;announced&amp;quot;
are wrong, a user changes the mode to the ex-
panded view (as shown in (b)). In this view, a user
can change dependencies by dragging a modifier to
the correct modifiee using a mouse. The corrected
dependency structure is shown in (c).
Fig. 6 shows the output of LAL editor for the
above English sentence.
This algorithm is language-independent except
for determining if forward modification or back-
ward modification is major. Fig. 7 shows a screen
image of the LAL editor for a Japanese sentence
which is a translation of the above English sen-
tence.
</bodyText>
<sectionHeader confidence="0.994672" genericHeader="evaluation">
5 Discussion
</sectionHeader>
<bodyText confidence="0.999988163265306">
There have been several efforts to define tags
for describing language resources, such as the Text
Encoding Initiative [15], OpenTag [11], Corpus En-
coding Standard [1], the Expert Advisory Group on
Language Engineering Standards [2], Global Doc-
ument Annotation (or GDA) [3]. The main fo-
cus of these efforts other than GDA has been to
share linguistic resources by expressing them in a
standard tag set, and therefore they define very
detailed levels of tags for expressing linguistic de-
tails. GDA has almost the same purposes but it
has also defined very complex tag set. This com-
plexity discourages people from using these tag sets
when writing documents, and it becomes difficult
to make an assisting tool for annotating the tags.
However, LAL is not opposed to these previous ef-
forts, but rather proposes a certain level of subset of
the tags that can be used widely. In addition to this
objective, as mentioned earlier, LAL&apos;s main objec-
tive is to help make NLP programs very accurate.
Therefore, LAL includes task-specific annotations.
There has been some discussions about the mer-
its of linguistic annotation tags for ordinary peo-
ple. For instance, Hashida [4] stated that wide us-
age of such tags would greatly improve the results
of NLP programs for applications such as machine
translation, information retrieval, information ex-
traction, summarization, question-answering sys-
tem, example-based reasoning, and data mining,
and that this would encourage ordinary people to
use linguistic annotation tags. Some NLP researchers
expect that since many users create HTML pages
even without HTML editing tools, such users may
therefore use linguistic annotation tags as well. How-
ever, it has also been observed that ordinary people
write HTML pages because there is a direct advan-
tage to them in being able to create attractive pages
and an indirect advantage that the more attractive
their pages, the more &amp;quot;hits&amp;quot; they will get. In con-
trast, linguistic annotation tags offer ordinary peo-
ple only indirect advantages. Therefore, to popu-
larize these tags, it is important to minimize the
workload of adding linguistic annotation tags; that
is to say, we must provide easy-to-use annotation
tools. The key points in making such tools easy to
use are, as mentioned earlier, minimum interaction
and effective presentation. To satisfy these require-
ments, it is important to define a comprehensive,
simple set of annotation tags.
</bodyText>
<sectionHeader confidence="0.998466" genericHeader="conclusions">
6 Conclusion
</sectionHeader>
<bodyText confidence="0.999964111111111">
In this paper, we have proposed an XML-compliant
tag set called Linguistic Annotation Language or
LAL, which helps NLP programs perform their tasks
more correctly. LAL is designed to be as simple as
possible so that humans can use it with minimal
help from assisting tools. We have also developed
a GUI-based LAL annotation editor. We hope that
wide acceptance of LAL will make it possible to use
more intelligent Internet tools and services.
</bodyText>
<sectionHeader confidence="0.996114" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999822192307692">
[1] CES, &amp;quot;Corpus Encoding Standard (CES),&amp;quot;
(http://www.cs.vassar.edu/CES/)
[2] EAGLES, &amp;quot;Expert Advisory Group
on Language Engineering Standards,&amp;quot;
(http: / /www. ilc. pi. cnr.it /EAGLE S /home. html)
[3] GDA, &amp;quot;Global Document Annotation,&amp;quot;
(http://www.etl.go.jp/etl/nl/gda/)
[4] Koichi Hashida, Katashi Nagao, et. al, &amp;quot;Progress
and Prospect of Global Document Annotation,&amp;quot; (in
Japanese) Proc. of 4th Annual Meeting of the Asso-
ciation of Natural Language Processing, pp. 618-621,
1998
[5] &amp;quot;Data elements and interchange formats — Information
interchange — Representation of dates and times,&amp;quot; ISO
8601:1988.
[6] Kurohasi, S., and Nagao, M., &amp;quot;A Syntactic Analysis
Method of Long Japanese Sentences based on the De-
tection of Conjunctive Structures,&amp;quot; Computational Lin-
guistics, Vol. 20, No. 4, 1994.
[7] McCord, C. M., &amp;quot;Slot Grammars,&amp;quot; Computational Lin-
guistics, Vol. 6, pp. 31-43, 1980.
[8] McCord, C. M., &amp;quot;Slot Grammar: A System for Sim-
pler Construction of Practical Natural Language Gram-
mars,&amp;quot; in (ed) R. Studer, Natural Language and Logic:
International Scientific Symposium, Lecture Notes in
Computer Science, pp. 118-145, Springer Verlag, 1990.
</reference>
<equation confidence="0.475943">
(?xml version=&amp;quot; 1.0&amp;quot; encoding=&amp;quot; US-ASCII&amp;quot; ?)
(1a1)
(lal:s id=&amp;quot; idl&amp;quot; )
</equation>
<bodyText confidence="0.838282454545455">
(lal:w id=&amp;quot; id1-1&amp;quot; mod=&amp;quot; id1-2&amp;quot; pos=&amp;quot; noun&amp;quot; lex=&amp;quot; IBM&amp;quot; ftrs=&amp;quot; sg,propn&amp;quot; )IBM (/lal:w)
(lal:w id=&amp;quot; id1-2&amp;quot; pos=&amp;quot; verb&amp;quot; lex=&amp;quot; announce&amp;quot; )announced (/lal:w)
(lal:w id=&amp;quot; id1-3&amp;quot; mod=&amp;quot; id1-5&amp;quot; pos=&amp;quot; dot&amp;quot; lex=&amp;quot; a&amp;quot; ftrs=&amp;quot; sg&amp;quot; )a (/lal:w)
(lal:w id=&amp;quot; id1-4&amp;quot; mod=&amp;quot; id1-5&amp;quot; pos=&amp;quot; adj&amp;quot; lex=&amp;quot; new&amp;quot; )new (/lal:w)
(lal:w id=&amp;quot; id1-5&amp;quot; mod=&amp;quot; id1-2&amp;quot; pos=&amp;quot; noun&amp;quot; lex=&amp;quot; computer&amp;quot; ftrs=&amp;quot; sg,cn&amp;quot; )computer (/lal:w)
(lal:w id=&amp;quot; id1-6&amp;quot; mod=&amp;quot; id1-5&amp;quot; pos=&amp;quot; prep&amp;quot; lex=&amp;quot; for&amp;quot; )for (/lal:w)
(lal:w id=&amp;quot; id1-7&amp;quot; mod=&amp;quot; id1-6&amp;quot; pos=&amp;quot; noun&amp;quot; lex=&amp;quot; child&amp;quot; )children
(lal:w id=&amp;quot; id1-8&amp;quot; mod=&amp;quot; id1-5&amp;quot; pos=&amp;quot; prep&amp;quot; lex=&amp;quot; with&amp;quot; )with(Pal:w)
(lal:w id=&amp;quot; id1-9&amp;quot; mod=&amp;quot; id1-10&amp;quot; pos=&amp;quot; noun&amp;quot; lex=&amp;quot; voice&amp;quot; )voice (/lal:w)
(lal:w id=&amp;quot; id1-10&amp;quot; mod=&amp;quot; id1-11&amp;quot; pos=&amp;quot; noun&amp;quot; lex=&amp;quot; recognition&amp;quot; )recognition (/lal:w)
(lal:w id=&amp;quot; id1-11&amp;quot; mod=&amp;quot; id1-8&amp;quot; pos=&amp;quot; noun&amp;quot; lex=&amp;quot; function&amp;quot; )function(/lal:w)
</bodyText>
<figure confidence="0.7686175">
&lt;/lal:s)
(/lal)
</figure>
<figureCaption confidence="0.986778">
Figure 6: Example of LAL Annotation Output
</figureCaption>
<reference confidence="0.999732307692308">
[9] McCord, C. M., &amp;quot;Heuristics for Broad-Coverage Nat- [21] XMLNS, &amp;quot;Namespaces in XML,&amp;quot;
ural Language Parsing,&amp;quot; Proc. of the ARPA Human (http://www.w3.org/TR/1998/WD-xml-names-
Language Technology Workshop, 1993. 19980327), World Wide Web Consortium, March 27,
[10] McCord, C. M., and Bernth, A., &amp;quot;The LMT Transfor- 1998.
mational System,&amp;quot; Proc. of Proceedings of AMTA-98,
pp. 344-355, 1998.
[11] OpenTag, &amp;quot;A Standard Extraction/Abstraction
Text Format for Translation and NLP Tools,&amp;quot;
(http://www.opentag.org/)
[12] SGML, &amp;quot;ISO/IEC 8879-1986 (E). Information process-
ing — Text and Office Systems — Standard General-
ized Markup Language (SGML). First Edition — 1986-
10-15.International Organization for Standardization,&amp;quot;
1986.
[13] Takeda, K., &amp;quot;Pattern-Based Context-Free Grammars
for Machine Translation,&amp;quot; Proc. of 34th ACL, pp. 144-
151, June 1996.
[14] Takeda, K., &amp;quot;Pattern-Based Machine Translation,&amp;quot;
Proc. of 16th COLING, Vol. 2, pp. 1155-1158, August
1996.
[15] TEI, &amp;quot;Text Encoding Initiative (TEI),&amp;quot;
(http://www.uic.edu:80/orgs/tei/)
[16] Watanabe, H., &amp;quot;A Method for Abstracting Newspaper
Articles by Using Surface Clues,&amp;quot; Proc. of 16th Inter-
national Conference of Computational Linguistics, pp.
974-979, Aug. 4-9, 1996.
[17] Watanabe, H., and Takeda, K., &amp;quot;A Pattern-based Ma-
chine Translation System Extended by Example-based
Processing,&amp;quot; Proc. of the 36th ACL &amp; 17th COLING,
Vol. 2, pp. 1369-1373, 1998.
[18] Watanabe, H., &amp;quot;Linguistic Annotation Language — The
Markup Language for Assisting NLP programs —,&amp;quot; IBM
Research Report RT0334, 1999.
[19] Watanabe, H., &amp;quot;A Method for Accelerating CFG-
Parsing by Using Dependency Information,&amp;quot; Proc. of
18th COLING, 2000.
[20] XML, &amp;quot;Extensible Markup Language (XML),&amp;quot;
(http://www.w3.org/TR/PR-xml-971208), World
Wide Web Consortium, Dec. 8, 1997.
</reference>
<figure confidence="0.973200928571428">
.IBM
announced
a new computer
for children
with voice recognition function
IBM
nn. n
,
-.new
&apos;comPuter
for children
With voice
z recognition
function
D.T.ND-P.,c&apos;&apos;&apos; 3thict,11E: 11)
gi=vtgv.#&apos;2-Tfitr,id
RtLt
(b) Expanded View (before correction
moo*: pot Figure 7: Screen Image of LAL Editor for Japanese
sentence
IBM
ce
new
computer for children
with voice
recognition
function
(c) Expanded View (after correction)
</figure>
<figureCaption confidence="0.9709015">
Figure 5: Screen Image of LAL Editor for English
sentence
</figureCaption>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.717027">
<title confidence="0.999196">Improving Natural Language Processing by Linguistic Document Annotation</title>
<author confidence="0.907512">Hideo Watanabe</author>
<author confidence="0.907512">Katashi Nagao</author>
<author confidence="0.907512">Michael C McCord</author>
<author confidence="0.907512">Arendse Bernth</author>
<affiliation confidence="0.951001">IBM Research, Tokyo Research</affiliation>
<address confidence="0.9403205">1623-14 Shimotsuruma, Kanagawa 242-8502,</address>
<email confidence="0.967798">watanabe©trLibm.co.jp,nagao©trLibm.co.jp</email>
<affiliation confidence="0.930314">IBM T. J. Watson Research</affiliation>
<address confidence="0.946679">Route 134, Yorktown NY 10598,</address>
<email confidence="0.995915">mcmccordOus.ibm.com,arendseUus.ibm.com</email>
<abstract confidence="0.9997646875">Natural language processing (NLP) programs are confronted with various difficulties in processing HTML and XML documents, and have the potential to produce better results if linguistic information is annotated in source texts. We have therefore developed the Linguistic Annotation Language (or LAL), which is an XML-compliant tag set for assisting natural language processing programs. It consists of linguistic information tags such as tags specifying word/phrasal boundaries, and task-dependent instruction tags such as tags defining the scope of translation for machine translation programs. We have also developed an LALannotation editor to facilitate users to annotate documents without seeing tags.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="false">
<authors>
<author>Corpus CES</author>
</authors>
<title>Encoding Standard (CES),&amp;quot;</title>
<note>(http://www.cs.vassar.edu/CES/)</note>
<contexts>
<context position="21382" citStr="[1]" startWordPosition="3528" endWordPosition="3528">gging a modifier to the correct modifiee using a mouse. The corrected dependency structure is shown in (c). Fig. 6 shows the output of LAL editor for the above English sentence. This algorithm is language-independent except for determining if forward modification or backward modification is major. Fig. 7 shows a screen image of the LAL editor for a Japanese sentence which is a translation of the above English sentence. 5 Discussion There have been several efforts to define tags for describing language resources, such as the Text Encoding Initiative [15], OpenTag [11], Corpus Encoding Standard [1], the Expert Advisory Group on Language Engineering Standards [2], Global Document Annotation (or GDA) [3]. The main focus of these efforts other than GDA has been to share linguistic resources by expressing them in a standard tag set, and therefore they define very detailed levels of tags for expressing linguistic details. GDA has almost the same purposes but it has also defined very complex tag set. This complexity discourages people from using these tag sets when writing documents, and it becomes difficult to make an assisting tool for annotating the tags. However, LAL is not opposed to the</context>
</contexts>
<marker>[1]</marker>
<rawString>CES, &amp;quot;Corpus Encoding Standard (CES),&amp;quot; (http://www.cs.vassar.edu/CES/)</rawString>
</citation>
<citation valid="false">
<authors>
<author>Expert EAGLES</author>
</authors>
<title>Advisory Group on Language Engineering Standards,&amp;quot; (http: / /www.</title>
<note>ilc. pi. cnr.it /EAGLE S /home. html</note>
<contexts>
<context position="21447" citStr="[2]" startWordPosition="3537" endWordPosition="3537">cted dependency structure is shown in (c). Fig. 6 shows the output of LAL editor for the above English sentence. This algorithm is language-independent except for determining if forward modification or backward modification is major. Fig. 7 shows a screen image of the LAL editor for a Japanese sentence which is a translation of the above English sentence. 5 Discussion There have been several efforts to define tags for describing language resources, such as the Text Encoding Initiative [15], OpenTag [11], Corpus Encoding Standard [1], the Expert Advisory Group on Language Engineering Standards [2], Global Document Annotation (or GDA) [3]. The main focus of these efforts other than GDA has been to share linguistic resources by expressing them in a standard tag set, and therefore they define very detailed levels of tags for expressing linguistic details. GDA has almost the same purposes but it has also defined very complex tag set. This complexity discourages people from using these tag sets when writing documents, and it becomes difficult to make an assisting tool for annotating the tags. However, LAL is not opposed to these previous efforts, but rather proposes a certain level of subse</context>
</contexts>
<marker>[2]</marker>
<rawString>EAGLES, &amp;quot;Expert Advisory Group on Language Engineering Standards,&amp;quot; (http: / /www. ilc. pi. cnr.it /EAGLE S /home. html)</rawString>
</citation>
<citation valid="false">
<authors>
<author>GDA</author>
</authors>
<title>Global Document Annotation,&amp;quot;</title>
<note>(http://www.etl.go.jp/etl/nl/gda/)</note>
<contexts>
<context position="21488" citStr="[3]" startWordPosition="3544" endWordPosition="3544">. Fig. 6 shows the output of LAL editor for the above English sentence. This algorithm is language-independent except for determining if forward modification or backward modification is major. Fig. 7 shows a screen image of the LAL editor for a Japanese sentence which is a translation of the above English sentence. 5 Discussion There have been several efforts to define tags for describing language resources, such as the Text Encoding Initiative [15], OpenTag [11], Corpus Encoding Standard [1], the Expert Advisory Group on Language Engineering Standards [2], Global Document Annotation (or GDA) [3]. The main focus of these efforts other than GDA has been to share linguistic resources by expressing them in a standard tag set, and therefore they define very detailed levels of tags for expressing linguistic details. GDA has almost the same purposes but it has also defined very complex tag set. This complexity discourages people from using these tag sets when writing documents, and it becomes difficult to make an assisting tool for annotating the tags. However, LAL is not opposed to these previous efforts, but rather proposes a certain level of subset of the tags that can be used widely. In</context>
</contexts>
<marker>[3]</marker>
<rawString>GDA, &amp;quot;Global Document Annotation,&amp;quot; (http://www.etl.go.jp/etl/nl/gda/)</rawString>
</citation>
<citation valid="false">
<authors>
<author>Koichi Hashida</author>
<author>Katashi Nagao</author>
</authors>
<title>Progress and Prospect of Global Document Annotation,&amp;quot; (in Japanese)</title>
<booktitle>Proc. of 4th Annual Meeting of the Association of Natural Language Processing,</booktitle>
<pages>618--621</pages>
<contexts>
<context position="22380" citStr="[4]" startWordPosition="3695" endWordPosition="3695"> tag set. This complexity discourages people from using these tag sets when writing documents, and it becomes difficult to make an assisting tool for annotating the tags. However, LAL is not opposed to these previous efforts, but rather proposes a certain level of subset of the tags that can be used widely. In addition to this objective, as mentioned earlier, LAL&apos;s main objective is to help make NLP programs very accurate. Therefore, LAL includes task-specific annotations. There has been some discussions about the merits of linguistic annotation tags for ordinary people. For instance, Hashida [4] stated that wide usage of such tags would greatly improve the results of NLP programs for applications such as machine translation, information retrieval, information extraction, summarization, question-answering system, example-based reasoning, and data mining, and that this would encourage ordinary people to use linguistic annotation tags. Some NLP researchers expect that since many users create HTML pages even without HTML editing tools, such users may therefore use linguistic annotation tags as well. However, it has also been observed that ordinary people write HTML pages because there is</context>
</contexts>
<marker>[4]</marker>
<rawString>Koichi Hashida, Katashi Nagao, et. al, &amp;quot;Progress and Prospect of Global Document Annotation,&amp;quot; (in Japanese) Proc. of 4th Annual Meeting of the Association of Natural Language Processing, pp. 618-621,</rawString>
</citation>
<citation valid="false">
<title>Data elements and interchange formats — Information interchange — Representation of dates and times,&amp;quot;</title>
<journal>ISO</journal>
<pages>8601--1988</pages>
<contexts>
<context position="11215" citStr="[5]" startWordPosition="1819" endWordPosition="1819">which may be changed if a subject of the verb has a human property, etc. You can also use acronym and abbr elements defined in HTML to specify an acronym and an abbreviation terms. They are a little bit extended to have the expan attribute to specify an expanded form of abbreviation or acronym like the abbr tag of TEI1 (lal:acronym expan=&amp;quot; International Business Machines&amp;quot; )IBM(/lal:acronym) The date tag is used to specify a date expression, whereas, the time tag is used to specify a time expression. The value attribute is used to specify a normalized form of a date or time defined by ISO 8601 [5]. (lal:date value=&amp;quot;2000-01-01&amp;quot;)Jan. 1, 2000 (pal:date) (lal:time value=&amp;quot;15:00&amp;quot; )3:00 PM(/lal:time) The num tag is used to specify a number expression (e.g., two million and twenty-one). The type and value attributes are used to specify a normalized form of the number expression. Further, the money tag is used to specify money expression, in particular, to add monetary unit information. &apos;Some of LAL tags have the same name as those defined in previous efforts such as TEI, since we do not like to introduce new tag names, rather, would like to reuse existing names if the meaning is the same. Text</context>
</contexts>
<marker>[5]</marker>
<rawString>&amp;quot;Data elements and interchange formats — Information interchange — Representation of dates and times,&amp;quot; ISO 8601:1988.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Kurohasi</author>
<author>M Nagao</author>
</authors>
<title>A Syntactic Analysis Method of Long Japanese Sentences based on the Detection of Conjunctive Structures,&amp;quot;</title>
<date>1994</date>
<journal>Computational Linguistics,</journal>
<volume>20</volume>
<contexts>
<context position="14097" citStr="[6]" startWordPosition="2289" endWordPosition="2289">counters (lal:tranStop/), it passes over the subsequent text until it encounters (lal:tranStart/). 3 LAL-aware NLP Programs We have modified some NLP systems to be LALaware&apos;. ESG [7, 8] is an English parsing system developed by IBM Watson Research Center, and updated to accept and generate LAL-annotated English. This LAL-aware version of ESG is used as a backend process to show users an interpretation of a system of a given English sentence in the LALannotation editor described in the next section. 2They support only syntactic information tags currently, and will support other tags later. KNP [6] is a Japanese dependency parsing system developed by Kyoto University. We have developed a post-process routine to convert KNP parsing result into LAL format. This is also used as a backend process to show the initial interpretation of a given Japanese sentence in the LAL-annotation editor. Further, we have modified IBM&apos;s English to German, French, Spanish, and Italian translation engines [8, 9, 10] and English to Japanese translation engine [13, 14, 17] to accept LAL-annotated English HTML input. In addition, we have developed an algorithm for accelerating CFG-parsing process by using LAL ta</context>
</contexts>
<marker>[6]</marker>
<rawString>Kurohasi, S., and Nagao, M., &amp;quot;A Syntactic Analysis Method of Long Japanese Sentences based on the Detection of Conjunctive Structures,&amp;quot; Computational Linguistics, Vol. 20, No. 4, 1994.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C M McCord</author>
</authors>
<title>Slot Grammars,&amp;quot;</title>
<date>1980</date>
<journal>Computational Linguistics,</journal>
<volume>6</volume>
<pages>31--43</pages>
<contexts>
<context position="13679" citStr="[7, 8]" startWordPosition="2217" endWordPosition="2218">endent Instruction Tags Machine Translation: For machine translation of HTML or XML documents, we need unique algorithms to detect which segments are to be translated and which are not. In particular, XML can introduce new tags, whose semantics we generally do not know. Therefore, we need an instructional tag to inform a machine translation program whether or not a text segment is to be translated. If an MT program encounters (lal:tranStop/), it passes over the subsequent text until it encounters (lal:tranStart/). 3 LAL-aware NLP Programs We have modified some NLP systems to be LALaware&apos;. ESG [7, 8] is an English parsing system developed by IBM Watson Research Center, and updated to accept and generate LAL-annotated English. This LAL-aware version of ESG is used as a backend process to show users an interpretation of a system of a given English sentence in the LALannotation editor described in the next section. 2They support only syntactic information tags currently, and will support other tags later. KNP [6] is a Japanese dependency parsing system developed by Kyoto University. We have developed a post-process routine to convert KNP parsing result into LAL format. This is also used as a</context>
</contexts>
<marker>[7]</marker>
<rawString>McCord, C. M., &amp;quot;Slot Grammars,&amp;quot; Computational Linguistics, Vol. 6, pp. 31-43, 1980.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C M McCord</author>
</authors>
<title>Slot Grammar: A System for Simpler Construction of Practical Natural Language Grammars,&amp;quot;</title>
<date>1990</date>
<booktitle>Natural Language and Logic: International Scientific Symposium, Lecture Notes in Computer Science,</booktitle>
<pages>118--145</pages>
<publisher>Springer Verlag,</publisher>
<note>in</note>
<contexts>
<context position="13679" citStr="[7, 8]" startWordPosition="2217" endWordPosition="2218">endent Instruction Tags Machine Translation: For machine translation of HTML or XML documents, we need unique algorithms to detect which segments are to be translated and which are not. In particular, XML can introduce new tags, whose semantics we generally do not know. Therefore, we need an instructional tag to inform a machine translation program whether or not a text segment is to be translated. If an MT program encounters (lal:tranStop/), it passes over the subsequent text until it encounters (lal:tranStart/). 3 LAL-aware NLP Programs We have modified some NLP systems to be LALaware&apos;. ESG [7, 8] is an English parsing system developed by IBM Watson Research Center, and updated to accept and generate LAL-annotated English. This LAL-aware version of ESG is used as a backend process to show users an interpretation of a system of a given English sentence in the LALannotation editor described in the next section. 2They support only syntactic information tags currently, and will support other tags later. KNP [6] is a Japanese dependency parsing system developed by Kyoto University. We have developed a post-process routine to convert KNP parsing result into LAL format. This is also used as a</context>
</contexts>
<marker>[8]</marker>
<rawString>McCord, C. M., &amp;quot;Slot Grammar: A System for Simpler Construction of Practical Natural Language Grammars,&amp;quot; in (ed) R. Studer, Natural Language and Logic: International Scientific Symposium, Lecture Notes in Computer Science, pp. 118-145, Springer Verlag, 1990.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C M McCord</author>
</authors>
<title>Heuristics for Broad-Coverage Nat- [21] XMLNS, &amp;quot;Namespaces in XML,&amp;quot; ural Language Parsing,&amp;quot;</title>
<date>1993</date>
<booktitle>Proc. of the ARPA Human (http://www.w3.org/TR/1998/WD-xml-namesLanguage Technology Workshop,</booktitle>
<contexts>
<context position="14500" citStr="[8, 9, 10]" startWordPosition="2355" endWordPosition="2357">retation of a system of a given English sentence in the LALannotation editor described in the next section. 2They support only syntactic information tags currently, and will support other tags later. KNP [6] is a Japanese dependency parsing system developed by Kyoto University. We have developed a post-process routine to convert KNP parsing result into LAL format. This is also used as a backend process to show the initial interpretation of a given Japanese sentence in the LAL-annotation editor. Further, we have modified IBM&apos;s English to German, French, Spanish, and Italian translation engines [8, 9, 10] and English to Japanese translation engine [13, 14, 17] to accept LAL-annotated English HTML input. In addition, we have developed an algorithm for accelerating CFG-parsing process by using LAL tag information&apos; [19], and this algorithm is implemented in the English-to-Japanese translation engine mentioned above. 4 LAL-Annotation Editor Since inserting tags into documents manually is not generally an easy task for end users, it is important to provide a GUI-based annotation editor. In developing such an editor, we took into consideration the following points: • Users should not have to see any</context>
</contexts>
<marker>[9]</marker>
<rawString>McCord, C. M., &amp;quot;Heuristics for Broad-Coverage Nat- [21] XMLNS, &amp;quot;Namespaces in XML,&amp;quot; ural Language Parsing,&amp;quot; Proc. of the ARPA Human (http://www.w3.org/TR/1998/WD-xml-namesLanguage Technology Workshop, 1993. 19980327), World Wide Web Consortium, March 27,</rawString>
</citation>
<citation valid="true">
<authors>
<author>C M McCord</author>
<author>A Bernth</author>
</authors>
<title>The LMT Transfor-</title>
<date>1998</date>
<booktitle>Proc. of Proceedings of AMTA-98,</booktitle>
<pages>344--355</pages>
<contexts>
<context position="14500" citStr="[8, 9, 10]" startWordPosition="2355" endWordPosition="2357">retation of a system of a given English sentence in the LALannotation editor described in the next section. 2They support only syntactic information tags currently, and will support other tags later. KNP [6] is a Japanese dependency parsing system developed by Kyoto University. We have developed a post-process routine to convert KNP parsing result into LAL format. This is also used as a backend process to show the initial interpretation of a given Japanese sentence in the LAL-annotation editor. Further, we have modified IBM&apos;s English to German, French, Spanish, and Italian translation engines [8, 9, 10] and English to Japanese translation engine [13, 14, 17] to accept LAL-annotated English HTML input. In addition, we have developed an algorithm for accelerating CFG-parsing process by using LAL tag information&apos; [19], and this algorithm is implemented in the English-to-Japanese translation engine mentioned above. 4 LAL-Annotation Editor Since inserting tags into documents manually is not generally an easy task for end users, it is important to provide a GUI-based annotation editor. In developing such an editor, we took into consideration the following points: • Users should not have to see any</context>
</contexts>
<marker>[10]</marker>
<rawString>McCord, C. M., and Bernth, A., &amp;quot;The LMT Transfor- 1998. mational System,&amp;quot; Proc. of Proceedings of AMTA-98, pp. 344-355, 1998.</rawString>
</citation>
<citation valid="false">
<authors>
<author>OpenTag</author>
</authors>
<title>A Standard Extraction/Abstraction Text Format for Translation and NLP Tools,&amp;quot; (http://www.opentag.org/)</title>
<contexts>
<context position="21352" citStr="[11]" startWordPosition="3523" endWordPosition="3523"> can change dependencies by dragging a modifier to the correct modifiee using a mouse. The corrected dependency structure is shown in (c). Fig. 6 shows the output of LAL editor for the above English sentence. This algorithm is language-independent except for determining if forward modification or backward modification is major. Fig. 7 shows a screen image of the LAL editor for a Japanese sentence which is a translation of the above English sentence. 5 Discussion There have been several efforts to define tags for describing language resources, such as the Text Encoding Initiative [15], OpenTag [11], Corpus Encoding Standard [1], the Expert Advisory Group on Language Engineering Standards [2], Global Document Annotation (or GDA) [3]. The main focus of these efforts other than GDA has been to share linguistic resources by expressing them in a standard tag set, and therefore they define very detailed levels of tags for expressing linguistic details. GDA has almost the same purposes but it has also defined very complex tag set. This complexity discourages people from using these tag sets when writing documents, and it becomes difficult to make an assisting tool for annotating the tags. Howe</context>
</contexts>
<marker>[11]</marker>
<rawString>OpenTag, &amp;quot;A Standard Extraction/Abstraction Text Format for Translation and NLP Tools,&amp;quot; (http://www.opentag.org/)</rawString>
</citation>
<citation valid="true">
<authors>
<author>ISOIEC SGML</author>
</authors>
<title>Information processing — Text and Office Systems — Standard Generalized Markup Language (SGML). First Edition — 1986-10-15.International Organization for Standardization,&amp;quot;</title>
<date>1986</date>
<marker>[12]</marker>
<rawString>SGML, &amp;quot;ISO/IEC 8879-1986 (E). Information processing — Text and Office Systems — Standard Generalized Markup Language (SGML). First Edition — 1986-10-15.International Organization for Standardization,&amp;quot; 1986.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Takeda</author>
</authors>
<title>Pattern-Based Context-Free Grammars for Machine Translation,&amp;quot;</title>
<date>1996</date>
<booktitle>Proc. of 34th ACL,</booktitle>
<pages>144--151</pages>
<contexts>
<context position="14556" citStr="[13, 14, 17]" startWordPosition="2364" endWordPosition="2366">e LALannotation editor described in the next section. 2They support only syntactic information tags currently, and will support other tags later. KNP [6] is a Japanese dependency parsing system developed by Kyoto University. We have developed a post-process routine to convert KNP parsing result into LAL format. This is also used as a backend process to show the initial interpretation of a given Japanese sentence in the LAL-annotation editor. Further, we have modified IBM&apos;s English to German, French, Spanish, and Italian translation engines [8, 9, 10] and English to Japanese translation engine [13, 14, 17] to accept LAL-annotated English HTML input. In addition, we have developed an algorithm for accelerating CFG-parsing process by using LAL tag information&apos; [19], and this algorithm is implemented in the English-to-Japanese translation engine mentioned above. 4 LAL-Annotation Editor Since inserting tags into documents manually is not generally an easy task for end users, it is important to provide a GUI-based annotation editor. In developing such an editor, we took into consideration the following points: • Users should not have to see any tags. • Users should not have to see internal represent</context>
</contexts>
<marker>[13]</marker>
<rawString>Takeda, K., &amp;quot;Pattern-Based Context-Free Grammars for Machine Translation,&amp;quot; Proc. of 34th ACL, pp. 144-151, June 1996.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Takeda</author>
</authors>
<title>Pattern-Based Machine Translation,&amp;quot;</title>
<date>1996</date>
<booktitle>Proc. of 16th COLING,</booktitle>
<volume>2</volume>
<pages>1155--1158</pages>
<contexts>
<context position="14556" citStr="[13, 14, 17]" startWordPosition="2364" endWordPosition="2366">e LALannotation editor described in the next section. 2They support only syntactic information tags currently, and will support other tags later. KNP [6] is a Japanese dependency parsing system developed by Kyoto University. We have developed a post-process routine to convert KNP parsing result into LAL format. This is also used as a backend process to show the initial interpretation of a given Japanese sentence in the LAL-annotation editor. Further, we have modified IBM&apos;s English to German, French, Spanish, and Italian translation engines [8, 9, 10] and English to Japanese translation engine [13, 14, 17] to accept LAL-annotated English HTML input. In addition, we have developed an algorithm for accelerating CFG-parsing process by using LAL tag information&apos; [19], and this algorithm is implemented in the English-to-Japanese translation engine mentioned above. 4 LAL-Annotation Editor Since inserting tags into documents manually is not generally an easy task for end users, it is important to provide a GUI-based annotation editor. In developing such an editor, we took into consideration the following points: • Users should not have to see any tags. • Users should not have to see internal represent</context>
</contexts>
<marker>[14]</marker>
<rawString>Takeda, K., &amp;quot;Pattern-Based Machine Translation,&amp;quot; Proc. of 16th COLING, Vol. 2, pp. 1155-1158, August 1996.</rawString>
</citation>
<citation valid="true">
<authors>
<author>TEI</author>
</authors>
<title>Text Encoding Initiative (TEI),&amp;quot;</title>
<date></date>
<contexts>
<context position="21338" citStr="[15]" startWordPosition="3521" endWordPosition="3521">s view, a user can change dependencies by dragging a modifier to the correct modifiee using a mouse. The corrected dependency structure is shown in (c). Fig. 6 shows the output of LAL editor for the above English sentence. This algorithm is language-independent except for determining if forward modification or backward modification is major. Fig. 7 shows a screen image of the LAL editor for a Japanese sentence which is a translation of the above English sentence. 5 Discussion There have been several efforts to define tags for describing language resources, such as the Text Encoding Initiative [15], OpenTag [11], Corpus Encoding Standard [1], the Expert Advisory Group on Language Engineering Standards [2], Global Document Annotation (or GDA) [3]. The main focus of these efforts other than GDA has been to share linguistic resources by expressing them in a standard tag set, and therefore they define very detailed levels of tags for expressing linguistic details. GDA has almost the same purposes but it has also defined very complex tag set. This complexity discourages people from using these tag sets when writing documents, and it becomes difficult to make an assisting tool for annotating </context>
</contexts>
<marker>[15]</marker>
<rawString>TEI, &amp;quot;Text Encoding Initiative (TEI),&amp;quot; (http://www.uic.edu:80/orgs/tei/)</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Watanabe</author>
</authors>
<title>A Method for Abstracting Newspaper Articles by Using Surface Clues,&amp;quot;</title>
<date>1996</date>
<booktitle>Proc. of 16th International Conference of Computational Linguistics,</booktitle>
<pages>974--979</pages>
<contexts>
<context position="12171" citStr="[16]" startWordPosition="1977" endWordPosition="1977">r, to add monetary unit information. &apos;Some of LAL tags have the same name as those defined in previous efforts such as TEI, since we do not like to introduce new tag names, rather, would like to reuse existing names if the meaning is the same. Text Summarization: Automatic text summarization programs have problem in handling HTML texts with the result that unimportant sentences are included in the summary texts. This problem occurs because the program extracts important sentences whose importance it calculates on the basis of the number of important keywords, the location in a text, and so on [16]. Thus, a summary program may select unimportant sentences if it does not know the main text area in a document. A typical HTML text has related information areas such as a list of related links, the name of the reporter, and a copyright notice, in the beginning and ending area, and these areas can cause a wrong summary to be generated. Therefore, we need a tag that specifies which segments should be processed in order to generate a summary of a document. If a summary program encounters (lal:smrycalcStop/), it stops summary calculation until it encounters (lal:smrycalcStart/). Therefore, addit</context>
</contexts>
<marker>[16]</marker>
<rawString>Watanabe, H., &amp;quot;A Method for Abstracting Newspaper Articles by Using Surface Clues,&amp;quot; Proc. of 16th International Conference of Computational Linguistics, pp. 974-979, Aug. 4-9, 1996.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Watanabe</author>
<author>K Takeda</author>
</authors>
<title>A Pattern-based Machine Translation System Extended by Example-based Processing,&amp;quot;</title>
<date>1998</date>
<booktitle>Proc. of the 36th ACL &amp; 17th COLING,</booktitle>
<volume>2</volume>
<pages>1369--1373</pages>
<contexts>
<context position="14556" citStr="[13, 14, 17]" startWordPosition="2364" endWordPosition="2366">e LALannotation editor described in the next section. 2They support only syntactic information tags currently, and will support other tags later. KNP [6] is a Japanese dependency parsing system developed by Kyoto University. We have developed a post-process routine to convert KNP parsing result into LAL format. This is also used as a backend process to show the initial interpretation of a given Japanese sentence in the LAL-annotation editor. Further, we have modified IBM&apos;s English to German, French, Spanish, and Italian translation engines [8, 9, 10] and English to Japanese translation engine [13, 14, 17] to accept LAL-annotated English HTML input. In addition, we have developed an algorithm for accelerating CFG-parsing process by using LAL tag information&apos; [19], and this algorithm is implemented in the English-to-Japanese translation engine mentioned above. 4 LAL-Annotation Editor Since inserting tags into documents manually is not generally an easy task for end users, it is important to provide a GUI-based annotation editor. In developing such an editor, we took into consideration the following points: • Users should not have to see any tags. • Users should not have to see internal represent</context>
</contexts>
<marker>[17]</marker>
<rawString>Watanabe, H., and Takeda, K., &amp;quot;A Pattern-based Machine Translation System Extended by Example-based Processing,&amp;quot; Proc. of the 36th ACL &amp; 17th COLING, Vol. 2, pp. 1369-1373, 1998.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Watanabe</author>
</authors>
<title>Linguistic Annotation Language — The Markup Language for Assisting NLP programs —,&amp;quot;</title>
<date>1999</date>
<journal>IBM Research Report</journal>
<volume>0334</volume>
<marker>[18]</marker>
<rawString>Watanabe, H., &amp;quot;Linguistic Annotation Language — The Markup Language for Assisting NLP programs —,&amp;quot; IBM Research Report RT0334, 1999.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Watanabe</author>
</authors>
<title>A Method for Accelerating CFGParsing by Using Dependency Information,&amp;quot;</title>
<date>2000</date>
<booktitle>Proc. of 18th COLING,</booktitle>
<contexts>
<context position="14716" citStr="[19]" startWordPosition="2390" endWordPosition="2390">dependency parsing system developed by Kyoto University. We have developed a post-process routine to convert KNP parsing result into LAL format. This is also used as a backend process to show the initial interpretation of a given Japanese sentence in the LAL-annotation editor. Further, we have modified IBM&apos;s English to German, French, Spanish, and Italian translation engines [8, 9, 10] and English to Japanese translation engine [13, 14, 17] to accept LAL-annotated English HTML input. In addition, we have developed an algorithm for accelerating CFG-parsing process by using LAL tag information&apos; [19], and this algorithm is implemented in the English-to-Japanese translation engine mentioned above. 4 LAL-Annotation Editor Since inserting tags into documents manually is not generally an easy task for end users, it is important to provide a GUI-based annotation editor. In developing such an editor, we took into consideration the following points: • Users should not have to see any tags. • Users should not have to see internal representations expressing linguistic information. • Users should be able to view and modify linguistic information such as feature values, but only if they want. With r</context>
</contexts>
<marker>[19]</marker>
<rawString>Watanabe, H., &amp;quot;A Method for Accelerating CFGParsing by Using Dependency Information,&amp;quot; Proc. of 18th COLING, 2000.</rawString>
</citation>
<citation valid="true">
<authors>
<author>XML</author>
</authors>
<title>Extensible Markup Language (XML),&amp;quot; (http://www.w3.org/TR/PR-xml-971208), World Wide Web Consortium,</title>
<date>1997</date>
<marker>[20]</marker>
<rawString>XML, &amp;quot;Extensible Markup Language (XML),&amp;quot; (http://www.w3.org/TR/PR-xml-971208), World Wide Web Consortium, Dec. 8, 1997.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>