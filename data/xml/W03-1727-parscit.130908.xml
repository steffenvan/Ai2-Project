<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.015331">
<title confidence="0.987128">
Chinese Word Segmentation in MSR-NLP
</title>
<author confidence="0.991328">
Andi Wu
</author>
<affiliation confidence="0.924618">
Microsoft Research
One Microsoft Way, Redmond, WA 98052
</affiliation>
<email confidence="0.973318">
andiwu@microsoft.com
</email>
<sectionHeader confidence="0.997104" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999698117647059">
Word segmentation in MSR-NLP is an in-
tegral part of a sentence analyzer which
includes basic segmentation, derivational
morphology, named entity recognition,
new word identification, word lattice
pruning and parsing. The final segmenta-
tion is produced from the leaves of parse
trees. The output can be customized to
meet different segmentation standards
through the value combinations of a set of
parameters. The system participated in
four tracks of the segmentation bakeoff --
PK-open, PK-close, CTB-open and CTB-
closed – and ranked #1, #2, #2 and #3 re-
spectively in those tracks. Analysis of the
results shows that each component of the
system contributed to the scores.
</bodyText>
<sectionHeader confidence="0.982671" genericHeader="method">
1 System Description
</sectionHeader>
<bodyText confidence="0.999699166666667">
The MSR-NLP Chinese system that participated in
the current segmentation bakeoff is not a stand-
alone word segmenter. It is a Chinese sentence
analyzer where the leaves of parse trees are dis-
played as the output of word segmentation. The
components of this system are described below.
</bodyText>
<subsectionHeader confidence="0.996537">
1.1 Basic segmentation
</subsectionHeader>
<bodyText confidence="0.9997254">
Each input sentence is first segmented into indi-
vidual characters. 1 These characters and their
combinations are then looked up in a dictionary2
and a word lattice containing lexicalized words
only is formed. Each node in the lattice is a feature
</bodyText>
<footnote confidence="0.828544666666667">
1 If an input line contains more than one sentence, a sentence
separator is applied to break the line into individual sentences,
which are then processed one by one and the results are con-
catenated to form a single output.
2 The lookup is optimized so that not all possible combinations
are tried.
</footnote>
<bodyText confidence="0.9994458125">
matrix that contains the part of speech and other
grammatical attributes. Multiple-character words
may also have information for resolving segmenta-
tion ambiguities. In general, multiple-character
words are assigned higher scores than the words
they subsume, but words like “才能” are excep-
tions and such exceptional cases are usually
marked in the dictionary. For some of the words
that tend to overlap with other words, there is also
information as to what the preferred segmentation
is. For instance, the preferred segmentation for
“会议员” is “会+议员” rather than “会议+员”.
Such information was collected from segmented
corpora and stored in the dictionary. The scores
are later used in word lattice pruning and parse
ranking (Wu and Jiang 1998).
</bodyText>
<subsectionHeader confidence="0.982966">
1.2 Derivational morphology and named en-
tity recognition
</subsectionHeader>
<bodyText confidence="0.999207">
After basic segmentation, a set of augmented
phrase structure rules are applied to the word lat-
tice to form larger word units which include:
</bodyText>
<listItem confidence="0.99965525">
• Words derived from morphological proc-
esses such as reduplication, affixation,
compounding, merging, splitting, etc.
• Named entities such as person names,
</listItem>
<bodyText confidence="0.997380727272727">
place names, company names, product
names, numbers, dates, monetary units, etc.
Each of these units is a tree that reflects the history
of rule application. They are added to the existing
word lattice as single nodes and treated as single
words by the parser. The internal structures are
useful for various purposes, one of which is the
customization of word segmentation: words with
such structures can all be displayed as single words
or multiple words depending on where the “cuts”
are made in the word tree (Wu 2003).
</bodyText>
<subsectionHeader confidence="0.939628">
1.3 New word identification
</subsectionHeader>
<bodyText confidence="0.931273">
The expanded word lattice built in 1.2 is inspected
to detect spots of possible OOV new words. Typi-
cal spots of this kind are sequences of single char-
acters that are not subsumed by longer words. We
then use the following information to propose new
words (Wu and Jiang, 2000).
</bodyText>
<listItem confidence="0.7890879">
• The probability of the character string be-
ing a sequence of independent words;
• The morphological and syntactic proper-
ties of the characters;
• Word formation rules;
• Behavior of each character in existing
words (e.g. how likely is this character to
be used as the second character of a two-
character verb).
• The context in which the characters appear.
The proposed new words are added to the word
lattice and they will get used if no successful parse
can be obtained without them. When a new word
proposed this way has been verified by the parser
(i.e. used in a successful parse) more than n times,
it will automatically become an entry in the dic-
tionary. From then on, this word can be looked up
directly from the dictionary instead of being pro-
posed online. This kind of dynamic lexical acquisi-
tion has been presented in Wu et al (2002).
</listItem>
<subsectionHeader confidence="0.984881">
1.4 Word lattice pruning
</subsectionHeader>
<bodyText confidence="0.999992294117647">
Now that all the possible words are in the word
lattice, both statistical and linguistic methods are
applied to eliminate certain paths. For instance,
those paths that contain one or more bound mor-
phemes are pruned away. Single characters that
are subsumed by longer words are also thrown out
if their independent word probabilities are very
low. The result is a much smaller lattice that re-
sembles the n-best paths produced by a statistical
word segmenter. Because the final resolution of
ambiguities is expected to be done during parsing,
the lattice pruning is non-greedy so that no plausi-
ble path will be excluded prematurely. Many of
the ambiguities that are eliminated here can also be
resolved by the parser, but the pruning greatly re-
duces the complexity of the parsing process, mak-
ing the parser much faster and more accurate.
</bodyText>
<subsectionHeader confidence="0.996065">
1.5 Parsing
</subsectionHeader>
<bodyText confidence="0.999987363636364">
The cleaned-up word lattice is then submitted to
the parser as the initial entries in the parsing chart.
With the assumption that a successful parse of the
sentence requires a correct segmentation of the
sentence, many segmentation ambiguities are ex-
pected to be resolved here. This assumption does
not always hold, of course. A sentence can often
be parsed in multiple ways and the top-ranking
parse is not always the correct one. There are also
sentences that are not covered by the grammar and
therefore cannot be parsed at all. In this latter case,
we back off to partial parsing and use dynamic
programming to assemble a tree that consists of the
largest sub-trees in the chart.
In most cases, the use of the parser results in
better segmentation, but the parser can also mis-
lead us. One of the problems is that the parser
treats every input as a sentence and tries to con-
struct an S out of it. As a result, even a name like
“T_0-E” can be analyzed as a sentence with T_ as
the subject, 0- as the verb and F� as the object, if it
appears in the wrong context (or no context).
</bodyText>
<subsectionHeader confidence="0.994119">
1.6 Segmentation parameters
</subsectionHeader>
<bodyText confidence="0.999983192307692">
Due to the differences in segmentation standards,
the leaves of a parse tree do not always correspond
to the words in a particular standard. For instance,
a Chinese full name is a single leaf in our trees, but
it is supposed to be two words (family name +
given name) according to the PK standard. Fortu-
nately, most of the words whose segmentation is
controversial are built dynamically in our system
with their internal structures preserved. A Chinese
full name, for example, is a word tree where the
top node dominates two nodes: the family name
and the given name. Each non-terminal node in a
word tree as described in 1.2 is associated with a
parameter whose value determines whether the
daughters of this node are to be displayed as a
singe word or multiple words. Since all the dy-
namic words are built by phrase structure rules and
their word trees reflect the derivational history of
rule application, there is a one-to-one correspon-
dence between the types of words and the word-
internal structures of those words. A segmentation
parameter is associated with each type of words3
and the value of this parameter determines how the
given type of words should be segmented. This
makes it possible for the system to quickly adapt to
different standards (Wu 2003).
</bodyText>
<sectionHeader confidence="0.592918" genericHeader="method">
3 There are about 50 parameters in our system.
</sectionHeader>
<subsectionHeader confidence="0.96098">
1.7 Speed
</subsectionHeader>
<bodyText confidence="0.999975578947369">
Our system is not optimized for word segmentation
in terms of speed. As we have seen, the system is
a sentence analyzer and word segmentation is just
the by-product of a parser. The speed we report
here is in fact the speed of parsing.
On a single 997 MHz Pentium III machine, the
system is able to process 28,740 characters per
minute. The speed may vary according to sentence
lengths: given texts of the same size, those contain-
ing longer sentences will take more time. The
number reported here is an average of the time
taken to process the test sets of the four tracks we
participated in.
We have the option of turning off the parser
during word segmentation. When the parser is
turned off, segmentation is produced directly from
the word lattice with dynamic programming which
selects the shortest path. The speed in this case is
about 60,000 characters per minute.
</bodyText>
<sectionHeader confidence="0.996391" genericHeader="conclusions">
2 Evaluation
</sectionHeader>
<bodyText confidence="0.999988333333333">
We participated in the four GB tracks in the first
international Chinese word segmentation bakeoff -
PK-open, PK-closed, CTB-open and CTB-closed –
and ranked #1, #2, #2, and #3 respectively in those
tracks. In what follows, we discuss how we got the
results: what dictionaries we used, how we used
the training data, how much each component con-
tributed to the scores, and the problems that af-
fected our performance.
</bodyText>
<subsectionHeader confidence="0.909407">
2.1 Dictionaries
</subsectionHeader>
<bodyText confidence="0.99997">
In the open tracks, we used our proprietary dic-
tionary of 89,845 entries, which includes the en-
tries of 7,017 single characters. In the closed
tracks, we removed from the dictionary all the
words that did not appear in the training data, but
kept all the single characters. This resulted in a
dictionary of 34,681 entries in the PK track and
18,207 entries in the CTB track. It should be noted
that not all the words in the training data are in our
dictionary. This explains why the total numbers of
entries in those reduced dictionaries are smaller
than the vocabulary sizes of the respective training
sets even with all the single-character entries in-
cluded in them.
The dictionary we use in each case is not a sim-
ple word list. Every word has one or more parts-
of-speech and a number of other grammatical fea-
tures. No word can be used by the parser unless it
has those features. This made it very difficult for
us to add all the words in the training data to the
dictionary. We did use a semi-automatic process
to add as many words as possible, but both the ac-
curacy and coverage of the added grammatical fea-
tures are questionable due to the lack of manual
verification.
</bodyText>
<subsectionHeader confidence="0.994767">
2.2 Use of the training data
</subsectionHeader>
<bodyText confidence="0.999997586206897">
We used the training data mainly to tune the seg-
mentation parameters of our system. As has been
mentioned in 1.6, there are about 50 types of mor-
phologically derived words that are built online in
our system and each type has a parameter to de-
termine whether a given unit should be displayed
as a single word or separate words. Since our de-
fault segmentation is very different from PK or
CTB, and PK and CTB also follow different guide-
lines, we had to try different value combinations of
the parameters in each case until we got the opti-
mal settings.
The main problem in the tuning is that many
morphologically derived words have been lexical-
ized in our dictionary and therefore do not have the
word-internal structures that they would have if
they had been constructed dynamically. As a re-
sult, their segmentation is beyond the control of
those parameters. To solve this problem, we used
the training data to automatically identify all such
cases, create a word-internal structure for each of
them, and store the word tree in their lexical en-
tries.4 This made it possible for the parameter val-
ues to apply to both the lexicalized and non-
lexicalized words. This process can be fairly
automatic if the annotation of the training data is
completely consistent. However, as we have dis-
covered, the training data is not as consistent as
expected, which made total automation impossible.
</bodyText>
<subsectionHeader confidence="0.999482">
2.3 Contribution of each component
</subsectionHeader>
<bodyText confidence="0.9920555">
After we received our individual scores and the
reference testing data, we did some ablation ex-
</bodyText>
<footnote confidence="0.774576">
4 The work is incomplete, since the trees were created only for
those words that are in the training data provided.
</footnote>
<bodyText confidence="0.999415307692308">
periments to find out the contribution of each sys-
tem component in this competition. We turned off
the components one at a time (except basic seg-
mentation) and recorded the scores of each ablated
system. The results are summarized in the follow-
ing table, where “DM-NER” stands for “deriva-
tional morphology and named entity recognition”,
“NW-ID” for “new word identification and lexical-
ization”, “pruning” for “lattice pruning” and “tun-
ing” for “tuning of parameter values”. Each cell in
the table has two percentages. The top one is the
F-measure and the bottom one is the OOV word
recall rate.
</bodyText>
<table confidence="0.999574214285714">
PK PK CTB CTB
Open closed open closed
Complete 95.9 % 94.7 % 90.1 % 83.1 %
System 79.9 % 68.0 % 73.8 % 43.1 %
Without 90.2 % 88.9 % 86.6 % 79.2 %
DM-NER 44.4 % 33.9 % 66.6 % 33.5 %
Without 95.8 % 94.0 % 88.7 % 79.2 %
NW-ID 77.3 % 61.2 % 69.0 % 28.2 %
Without 92.0 % 90.9 % 85.5 % 78.8 %
Pruning 77.5 % 65.9 % 69.0 % 39.5 %
Without 95.5 % 94.4 % 89.8 % 84.0 %
Parsing 79.9 % 68.5 % 75.0 % 48.1 %
Without 84.8 % 83.9 % 84.8 % 78.4 %
Tuning 43.4 % 33.3 % 72.3 % 43.3 %
</table>
<bodyText confidence="0.8359135">
Several interesting facts are revealed in this
break-down:
</bodyText>
<listItem confidence="0.82528945">
• The tuning of parameter values has the big-
gest impact on the scores across the board.
• Derivational morphology and NE recogni-
tion is also a main contributor, especially in
the PK sets, which presumably contains
more named entities.
• The impact of new word identification is
minimal when the OOV word rate is low,
such as in the PK-open case, but becomes
more and more significant as the OOV rate
increases.
• Lattice pruning makes a big difference as
well. Apparently it cannot be replaced by
the parser in terms of the disambiguating
function it performs. Another fact, which is
not represented in the table, is that parsing
is three times slower when lattice pruning is
turned off.
• The parser has very limited impact on the
scores. Looking at the data, we find that
</listItem>
<bodyText confidence="0.99997075">
parsing did help to resolve some of the
most difficult cases of ambiguities and we
would not be able to get the last few points
without it. But it seems that most of the
common problems can be solved without
the parser. In one case (CTB closed), the
score is higher when the parser is turned off.
This is because the parser may prefer a
structure where those dynamically recog-
nized OOV words are broken up into
smaller units. For practical purposes, there-
fore, we may choose to leave out the parser.
</bodyText>
<subsectionHeader confidence="0.996129">
2.4 Problems that affected our performance
</subsectionHeader>
<bodyText confidence="0.999791">
The main problem is the definition of new words.
While our system is fairly aggressive in recogniz-
ing new words, both PK and CTB are quite con-
servative in this respect. Expressions such as “�
A”, “��”, “��O”, “����” are
considered single words in our system but not so in
PK or CTB. This made our new word recognition
do more harm than good in many cases, though the
overall impact is positive. Consistency in the an-
notated corpora is another problem, but this affects
every participant. We also had a technical problem
where some sentences remained unsegmented sim-
ply because some characters are not in our diction-
ary.
</bodyText>
<sectionHeader confidence="0.995362" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.998732555555556">
Wu, Andi. 2003. Customizable segmentation of mor-
phologically derived Words in Chinese, to appear in
Computational Linguistics and Chinese Language
Processing., 8(2).
Wu, Andi, J. Pentheroudakis and Z. Jiang, 2002. Dy-
namic lexical acquisition in Chinese sentence analy-
sis. In Proceedings of the 19th International
Conference on Computational Linguistics, pp. 1308-
1312, Taipei, Taiwan.
Wu, Andi, J. and Z. Jiang, 2000. Statistically-enhanced
new word identification in a rule-based Chinese sys-
tem, in Proceedings of the 2nd Chinese Language
Processing Workshop, pp. 46-51, HKUST, Hong
Kong.
Wu, Andi, J. and Z. Jiang, 1998. Word segmentation in
sentence analysis, in Proceedings of 1998 Interna-
tional Conference on Chinese Information Process-
ing, pp. 46-51.169-180, Beijing, China.
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.076702">
<title confidence="0.992591">Chinese Word Segmentation in MSR-NLP</title>
<author confidence="0.931856">Andi</author>
<affiliation confidence="0.829482">Microsoft</affiliation>
<address confidence="0.964442">One Microsoft Way, Redmond, WA</address>
<email confidence="0.999679">andiwu@microsoft.com</email>
<abstract confidence="0.998743335294118">Word segmentation in MSR-NLP is an integral part of a sentence analyzer which includes basic segmentation, derivational morphology, named entity recognition, new word identification, word lattice pruning and parsing. The final segmentation is produced from the leaves of parse trees. The output can be customized to meet different segmentation standards through the value combinations of a set of parameters. The system participated in four tracks of the segmentation bakeoff -- PK-open, PK-close, CTB-open and CTBclosed – and ranked #1, #2, #2 and #3 respectively in those tracks. Analysis of the results shows that each component of the system contributed to the scores. 1 System Description The MSR-NLP Chinese system that participated in the current segmentation bakeoff is not a standalone word segmenter. It is a Chinese sentence analyzer where the leaves of parse trees are displayed as the output of word segmentation. The components of this system are described below. segmentation Each input sentence is first segmented into indicharacters. 1These characters and their are then looked up in a and a word lattice containing lexicalized words only is formed. Each node in the lattice is a feature an input line contains more than one sentence, a sentence separator is applied to break the line into individual sentences, which are then processed one by one and the results are concatenated to form a single output. lookup is optimized so that not all possible combinations are tried. matrix that contains the part of speech and other grammatical attributes. Multiple-character words may also have information for resolving segmentation ambiguities. In general, multiple-character words are assigned higher scores than the words subsume, but words like are exceptions and such exceptional cases are usually marked in the dictionary. For some of the words that tend to overlap with other words, there is also information as to what the preferred segmentation is. For instance, the preferred segmentation for is rather than Such information was collected from segmented corpora and stored in the dictionary. The scores are later used in word lattice pruning and parse ranking (Wu and Jiang 1998). morphology and named entity recognition After basic segmentation, a set of augmented phrase structure rules are applied to the word lattice to form larger word units which include: • Words derived from morphological processes such as reduplication, affixation, compounding, merging, splitting, etc. • Named entities such as person names, place names, company names, product names, numbers, dates, monetary units, etc. Each of these units is a tree that reflects the history of rule application. They are added to the existing word lattice as single nodes and treated as single words by the parser. The internal structures are useful for various purposes, one of which is the customization of word segmentation: words with such structures can all be displayed as single words or multiple words depending on where the “cuts” are made in the word tree (Wu 2003). word identification The expanded word lattice built in 1.2 is inspected to detect spots of possible OOV new words. Typispots of this kind are sequences of single characters that are not subsumed by longer words. We then use the following information to propose new words (Wu and Jiang, 2000). • The probability of the character string being a sequence of independent words; • The morphological and syntactic properties of the characters; • Word formation rules; • Behavior of each character in existing words (e.g. how likely is this character to be used as the second character of a twocharacter verb). • The context in which the characters appear. The proposed new words are added to the word lattice and they will get used if no successful parse can be obtained without them. When a new word proposed this way has been verified by the parser used in a successful parse) more than it will automatically become an entry in the dictionary. From then on, this word can be looked up directly from the dictionary instead of being proposed online. This kind of dynamic lexical acquisihas been presented in Wu al lattice pruning Now that all the possible words are in the word lattice, both statistical and linguistic methods are applied to eliminate certain paths. For instance, those paths that contain one or more bound morphemes are pruned away. Single characters that are subsumed by longer words are also thrown out if their independent word probabilities are very low. The result is a much smaller lattice that resembles the n-best paths produced by a statistical word segmenter. Because the final resolution of ambiguities is expected to be done during parsing, the lattice pruning is non-greedy so that no plausible path will be excluded prematurely. Many of the ambiguities that are eliminated here can also be resolved by the parser, but the pruning greatly reduces the complexity of the parsing process, making the parser much faster and more accurate. The cleaned-up word lattice is then submitted to the parser as the initial entries in the parsing chart. With the assumption that a successful parse of the sentence requires a correct segmentation of the sentence, many segmentation ambiguities are expected to be resolved here. This assumption does not always hold, of course. A sentence can often be parsed in multiple ways and the top-ranking parse is not always the correct one. There are also sentences that are not covered by the grammar and therefore cannot be parsed at all. In this latter case, we back off to partial parsing and use dynamic programming to assemble a tree that consists of the largest sub-trees in the chart. In most cases, the use of the parser results in better segmentation, but the parser can also mislead us. One of the problems is that the parser treats every input as a sentence and tries to conan of it. As a result, even a name like can be analyzed as a sentence with subject, the verb and the object, if it appears in the wrong context (or no context). parameters Due to the differences in segmentation standards, the leaves of a parse tree do not always correspond to the words in a particular standard. For instance, a Chinese full name is a single leaf in our trees, but it is supposed to be two words (family name + given name) according to the PK standard. Fortunately, most of the words whose segmentation is controversial are built dynamically in our system with their internal structures preserved. A Chinese full name, for example, is a word tree where the top node dominates two nodes: the family name and the given name. Each non-terminal node in a word tree as described in 1.2 is associated with a parameter whose value determines whether the daughters of this node are to be displayed as a singe word or multiple words. Since all the dynamic words are built by phrase structure rules and their word trees reflect the derivational history of rule application, there is a one-to-one correspondence between the types of words and the wordinternal structures of those words. A segmentation is associated with each type of and the value of this parameter determines how the given type of words should be segmented. This makes it possible for the system to quickly adapt to different standards (Wu 2003). are about 50 parameters in our system. Our system is not optimized for word segmentation in terms of speed. As we have seen, the system is a sentence analyzer and word segmentation is just the by-product of a parser. The speed we report here is in fact the speed of parsing. On a single 997 MHz Pentium III machine, the system is able to process 28,740 characters per minute. The speed may vary according to sentence lengths: given texts of the same size, those containing longer sentences will take more time. The number reported here is an average of the time taken to process the test sets of the four tracks we participated in. We have the option of turning off the parser during word segmentation. When the parser is turned off, segmentation is produced directly from the word lattice with dynamic programming which selects the shortest path. The speed in this case is about 60,000 characters per minute. 2 Evaluation We participated in the four GB tracks in the first international Chinese word segmentation bakeoff - PK-open, PK-closed, CTB-open and CTB-closed – and ranked #1, #2, #2, and #3 respectively in those tracks. In what follows, we discuss how we got the results: what dictionaries we used, how we used the training data, how much each component contributed to the scores, and the problems that affected our performance. In the open tracks, we used our proprietary dictionary of 89,845 entries, which includes the entries of 7,017 single characters. In the closed tracks, we removed from the dictionary all the words that did not appear in the training data, but kept all the single characters. This resulted in a dictionary of 34,681 entries in the PK track and 18,207 entries in the CTB track. It should be noted that not all the words in the training data are in our dictionary. This explains why the total numbers of entries in those reduced dictionaries are smaller than the vocabulary sizes of the respective training sets even with all the single-character entries included in them. The dictionary we use in each case is not a simple word list. Every word has one or more partsof-speech and a number of other grammatical features. No word can be used by the parser unless it has those features. This made it very difficult for us to add all the words in the training data to the dictionary. We did use a semi-automatic process to add as many words as possible, but both the accuracy and coverage of the added grammatical features are questionable due to the lack of manual verification. of the training data We used the training data mainly to tune the segmentation parameters of our system. As has been mentioned in 1.6, there are about 50 types of morphologically derived words that are built online in our system and each type has a parameter to determine whether a given unit should be displayed as a single word or separate words. Since our default segmentation is very different from PK or CTB, and PK and CTB also follow different guidelines, we had to try different value combinations of the parameters in each case until we got the optimal settings. The main problem in the tuning is that many morphologically derived words have been lexicalized in our dictionary and therefore do not have the word-internal structures that they would have if they had been constructed dynamically. As a result, their segmentation is beyond the control of those parameters. To solve this problem, we used the training data to automatically identify all such cases, create a word-internal structure for each of them, and store the word tree in their lexical en- This made it possible for the parameter values to apply to both the lexicalized and nonlexicalized words. This process can be fairly automatic if the annotation of the training data is completely consistent. However, as we have discovered, the training data is not as consistent as expected, which made total automation impossible. of each component After we received our individual scores and the testing data, we did some ablation exwork is incomplete, since the trees were created only for those words that are in the training data provided. periments to find out the contribution of each system component in this competition. We turned off the components one at a time (except basic segmentation) and recorded the scores of each ablated system. The results are summarized in the following table, where “DM-NER” stands for “derivational morphology and named entity recognition”, “NW-ID” for “new word identification and lexicalization”, “pruning” for “lattice pruning” and “tuning” for “tuning of parameter values”. Each cell in the table has two percentages. The top one is the F-measure and the bottom one is the OOV word recall rate. PK Open PK closed CTB open CTB closed Complete 95.9 % 94.7 % 90.1 % 83.1 % System 79.9 % 68.0 % 73.8 % 43.1 % Without 90.2 % 88.9 % 86.6 % 79.2 % DM-NER 44.4 % 33.9 % 66.6 % 33.5 % Without 95.8 % 94.0 % 88.7 % 79.2 % NW-ID 77.3 % 61.2 % 69.0 % 28.2 % Without 92.0 % 90.9 % 85.5 % 78.8 % Pruning 77.5 % 65.9 % 69.0 % 39.5 % Without 95.5 % 94.4 % 89.8 % 84.0 % Parsing 79.9 % 68.5 % 75.0 % 48.1 % Without 84.8 % 83.9 % 84.8 % 78.4 % Tuning 43.4 % 33.3 % 72.3 % 43.3 % Several interesting facts are revealed in this break-down: • The tuning of parameter values has the biggest impact on the scores across the board. • Derivational morphology and NE recognition is also a main contributor, especially in the PK sets, which presumably contains more named entities. • The impact of new word identification is minimal when the OOV word rate is low, such as in the PK-open case, but becomes more and more significant as the OOV rate increases. • Lattice pruning makes a big difference as well. Apparently it cannot be replaced by the parser in terms of the disambiguating function it performs. Another fact, which is not represented in the table, is that parsing is three times slower when lattice pruning is turned off. • The parser has very limited impact on the scores. Looking at the data, we find that parsing did help to resolve some of the most difficult cases of ambiguities and we would not be able to get the last few points without it. But it seems that most of the common problems can be solved without the parser. In one case (CTB closed), the score is higher when the parser is turned off. This is because the parser may prefer a structure where those dynamically recognized OOV words are broken up into smaller units. For practical purposes, therefore, we may choose to leave out the parser. that affected our performance The main problem is the definition of new words. While our system is fairly aggressive in recognizing new words, both PK and CTB are quite conin this respect. Expressions such as considered single words in our system but not so in PK or CTB. This made our new word recognition do more harm than good in many cases, though the overall impact is positive. Consistency in the annotated corpora is another problem, but this affects every participant. We also had a technical problem where some sentences remained unsegmented simply because some characters are not in our dictionary. References Wu, Andi. 2003. Customizable segmentation of morphologically derived Words in Chinese, to appear in Computational Linguistics and Chinese Language 8(2). Wu, Andi, J. Pentheroudakis and Z. Jiang, 2002. Dylexical acquisition in Chinese sentence analy- In of the on Computational pp. 1308-</abstract>
<address confidence="0.824591">1312, Taipei, Taiwan. Wu, Andi, J. and Z. Jiang, 2000. Statistically-enhanced</address>
<note confidence="0.529026">new word identification in a rule-based Chinese sysin of the Chinese Language pp. 46-51, HKUST, Hong Kong. Wu, Andi, J. and Z. Jiang, 1998. Word segmentation in analysis, in of 1998 International Conference on Chinese Information Processpp. 46-51.169-180, Beijing, China.</note>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Andi Wu</author>
</authors>
<title>Customizable segmentation of morphologically derived Words in Chinese,</title>
<date>2003</date>
<booktitle>Computational Linguistics and Chinese Language Processing.,</booktitle>
<volume>8</volume>
<issue>2</issue>
<note>to appear in</note>
<contexts>
<context position="3293" citStr="Wu 2003" startWordPosition="525" endWordPosition="526">ffixation, compounding, merging, splitting, etc. • Named entities such as person names, place names, company names, product names, numbers, dates, monetary units, etc. Each of these units is a tree that reflects the history of rule application. They are added to the existing word lattice as single nodes and treated as single words by the parser. The internal structures are useful for various purposes, one of which is the customization of word segmentation: words with such structures can all be displayed as single words or multiple words depending on where the “cuts” are made in the word tree (Wu 2003). 1.3 New word identification The expanded word lattice built in 1.2 is inspected to detect spots of possible OOV new words. Typical spots of this kind are sequences of single characters that are not subsumed by longer words. We then use the following information to propose new words (Wu and Jiang, 2000). • The probability of the character string being a sequence of independent words; • The morphological and syntactic properties of the characters; • Word formation rules; • Behavior of each character in existing words (e.g. how likely is this character to be used as the second character of a tw</context>
<context position="7692" citStr="Wu 2003" startWordPosition="1299" endWordPosition="1300"> whose value determines whether the daughters of this node are to be displayed as a singe word or multiple words. Since all the dynamic words are built by phrase structure rules and their word trees reflect the derivational history of rule application, there is a one-to-one correspondence between the types of words and the wordinternal structures of those words. A segmentation parameter is associated with each type of words3 and the value of this parameter determines how the given type of words should be segmented. This makes it possible for the system to quickly adapt to different standards (Wu 2003). 3 There are about 50 parameters in our system. 1.7 Speed Our system is not optimized for word segmentation in terms of speed. As we have seen, the system is a sentence analyzer and word segmentation is just the by-product of a parser. The speed we report here is in fact the speed of parsing. On a single 997 MHz Pentium III machine, the system is able to process 28,740 characters per minute. The speed may vary according to sentence lengths: given texts of the same size, those containing longer sentences will take more time. The number reported here is an average of the time taken to process t</context>
</contexts>
<marker>Wu, 2003</marker>
<rawString>Wu, Andi. 2003. Customizable segmentation of morphologically derived Words in Chinese, to appear in Computational Linguistics and Chinese Language Processing., 8(2).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Andi Wu</author>
<author>J Pentheroudakis</author>
<author>Z Jiang</author>
</authors>
<title>Dynamic lexical acquisition in Chinese sentence analysis.</title>
<date>2002</date>
<booktitle>In Proceedings of the 19th International Conference on Computational Linguistics,</booktitle>
<pages>1308--1312</pages>
<location>Taipei, Taiwan.</location>
<contexts>
<context position="4444" citStr="Wu et al (2002)" startWordPosition="730" endWordPosition="733">ely is this character to be used as the second character of a twocharacter verb). • The context in which the characters appear. The proposed new words are added to the word lattice and they will get used if no successful parse can be obtained without them. When a new word proposed this way has been verified by the parser (i.e. used in a successful parse) more than n times, it will automatically become an entry in the dictionary. From then on, this word can be looked up directly from the dictionary instead of being proposed online. This kind of dynamic lexical acquisition has been presented in Wu et al (2002). 1.4 Word lattice pruning Now that all the possible words are in the word lattice, both statistical and linguistic methods are applied to eliminate certain paths. For instance, those paths that contain one or more bound morphemes are pruned away. Single characters that are subsumed by longer words are also thrown out if their independent word probabilities are very low. The result is a much smaller lattice that resembles the n-best paths produced by a statistical word segmenter. Because the final resolution of ambiguities is expected to be done during parsing, the lattice pruning is non-greed</context>
</contexts>
<marker>Wu, Pentheroudakis, Jiang, 2002</marker>
<rawString>Wu, Andi, J. Pentheroudakis and Z. Jiang, 2002. Dynamic lexical acquisition in Chinese sentence analysis. In Proceedings of the 19th International Conference on Computational Linguistics, pp. 1308-1312, Taipei, Taiwan.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Andi Wu</author>
<author>J</author>
<author>Z Jiang</author>
</authors>
<title>Statistically-enhanced new word identification in a rule-based Chinese system,</title>
<date>2000</date>
<booktitle>in Proceedings of the 2nd Chinese Language Processing Workshop,</booktitle>
<pages>46--51</pages>
<location>HKUST, Hong Kong.</location>
<marker>Wu, J, Jiang, 2000</marker>
<rawString>Wu, Andi, J. and Z. Jiang, 2000. Statistically-enhanced new word identification in a rule-based Chinese system, in Proceedings of the 2nd Chinese Language Processing Workshop, pp. 46-51, HKUST, Hong Kong.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Andi Wu</author>
<author>J</author>
<author>Z Jiang</author>
</authors>
<title>Word segmentation in sentence analysis,</title>
<date>1998</date>
<booktitle>in Proceedings of 1998 International Conference on Chinese Information Processing,</booktitle>
<pages>46--51</pages>
<location>Beijing,</location>
<marker>Wu, J, Jiang, 1998</marker>
<rawString>Wu, Andi, J. and Z. Jiang, 1998. Word segmentation in sentence analysis, in Proceedings of 1998 International Conference on Chinese Information Processing, pp. 46-51.169-180, Beijing, China.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>