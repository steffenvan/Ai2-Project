<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.024100">
<title confidence="0.846819">
JaBot: a multilingual Java-based intelligent agent for Web sites
</title>
<author confidence="0.78642">
Tim READ &amp; Elena BARCENA
</author>
<note confidence="0.4147105">
Departamento de Filologias Extranjeras y sus Linguisticas, UNED
Senda del Rey s/n, Madrid 28040, Spain
</note>
<email confidence="0.988581">
timread@sr.uned.es, ebarcena@sr.uned.es
</email>
<sectionHeader confidence="0.994536" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999770333333333">
This paper presents a novel type of intelligent
agent with a multilingual natural language
interface, which retrieves information from
within a Web site. This agent, named JaBot
after the fact that it is a bot which has been
programmed in Java, has been designed and
developed by the authors in an attempt to
solve common Web site problems related to
information retrieval. JaBot runs quickly and
efficiently, and rather than running directly
on the Web site pages, it is connected to a
lexical semantic map. This map is based upon
the contents of the Web site in question
together with other associated linguistic
knowledge.
</bodyText>
<sectionHeader confidence="0.979028" genericHeader="introduction">
Introduction
</sectionHeader>
<bodyText confidence="0.999031705882353">
Java was launched by Sun Microsystems in the
early &apos;90s as a simple, robust, dynamic, multi-
threaded, general-purpose, object-oriented,
platform independent programming language! Its
strengths can be split into four key issues,
namely, portability, security, robustness and ease
of usage, and distributed operation across the
Web (Read et al., 1997). These benefits make
Java an ideal programming language for
constructing Web-based computational linguistic
applications and agents (Ritchey, 1995;
Sommers, 1997). Some applications of this type
are beginning to appear on the Web, such as the
English learning tools developed in Java by the
authors as part of the UNED â€” Profesor Virtual
(UPV) research project&apos; (Read 8c Barcena, in
prep.).
&apos;Although JaBot and the rest of the modules that make
up the UPV are fully functional and have been
operational for some time now locally on our
departmental Web pages, they cannot be accessed yet
on the Internet because our Web site is in the fmal
stages of construction.
Access to the vast amounts of information
contained on the Web still highlights some
problems, such as that of cataloguing or indexing
all that information. The sheer size of the Web and
the ever changing nature of its contents means that
the process of charting it is closer to mapping a
large cavern with only the aid of a small torch than
to the construction of a library catalogue.
Bot or agent technology is playing an increasingly
important role in this mapping process, as will be
seen next.
</bodyText>
<sectionHeader confidence="0.800281" genericHeader="method">
1 Bots and the Web
</sectionHeader>
<bodyText confidence="0.999842678571429">
Bots are distinguished from other commonly used
programs in that they act as if they have some
degree of intelligence and independence
(Thompson, 1998). Born in the &apos;60s, nowadays
bots should be viewed as part of the wider move
towards distributed object-based systems (Weber,
1997). Instead of having massive programs, the
tendency is to use networked computer systems
made of a large number of co-operating task-
specific components. Some of these components
will act when told to; others, bots, will be more
autonomous, making the on-line experience more
pleasant and productive.
Internet search engines have a reputation of being
unfriendly and unhelpful, despite the fact that
some of them offer basic natural language
interaction. The problem arises exactly at the point
when the user connects to a specific Web site in
search of some information that s/he believes to be
contained there. If the site is large and there is no
search engine, finding a particular item can be
very difficult and time consuming, especially over
a slow connection. Even if a search engine does
exist, the current basis of search technology on the
use of &apos;wild card&apos;-based literal strings means that,
unless the user knows a keyword which will be
part of the entry s/he wants, the results of the
search may well be zero links or a large list of
</bodyText>
<page confidence="0.992681">
1086
</page>
<bodyText confidence="0.999051">
marginally related references in which the desired
link is embedded.
In order to overcome these problems, the authors
have designed and developed a bot which
functions within a Web site.
</bodyText>
<sectionHeader confidence="0.722513" genericHeader="method">
2 JaBot - The design
</sectionHeader>
<bodyText confidence="0.999963380952381">
In this section the design requirements and
specification of the bot which has been devised
and developed by the authors for searching within
Web sites are presented. Its name is JaBot, which
comes from &apos;Java-Based Bot&apos;: the word &apos;bot&apos; in
turn comes from &apos;robot&apos;, both of which are
alternative words for &apos;intelligent agent&apos;; and Java
is the programming language in which the bot
was written. There are four specific requirements
which have driven the research and development
process.
Firstly, a Web site assistant bot is required to
facilitate the exploration of the contents of a site
beyond the strict, limited manipulation of literal
text chunks in blind searches. Given the lack of
one-to-one correspondence between conceptual
and linguistic units, the bot should be flexible in
the sense that it should retrieve matches not just
by using the input words literally, but rather by
trying to &amp;quot;understand&amp;quot; the concept which
concerns the user, so that the bot can search for
the same information under different but
semantically similar terms if necessary.
Secondly, reflecting this search flexibility, the
interface to the bot should be in plain natural
language, enabling questions to be presented in a
natural way. Such an assistant bot would
resemble the help system on Microsoft Office97
in the sense that questions here can be formulated
in natural language and answered in terms of
links within the Web site which relate to the
subject of the question, i.e., its semantic content
beyond the literal text it contains.
Thirdly, the interface should be multilingual so
that users do not have to pose the query in the
language of the Web page. Even though the users
may not understand this language, their ability to
formulate questions in their own language would
enable them to, for example, access the details of
a particular person (their telephone number or e-
mail address) who may well speak their language.
Fourthly and finally, the binary file which
corresponds to the bot needs to be sufficiently
small so that it can be transferred across the
Internet at a reasonable speed. The tacit law of the
Web is clear: if users have to wait too long for the
bot to start working, it will not be used. This
requirement has implications for the degree of
sophistication of the linguistic processing and the
types of data files associated with it.
Now that the requirements have been presented,
the resulting design is described. JaBot is domain-
specific in the sense that it can only operate on the
Web site for which it was configured. This is
useful from a practical functional perspective
because it limits both the conceptual and linguistic
diversity which needs to be processed (so far this
approach has produced the best results in
computational linguistic applications [Boitet,
1990]). In other words, users of JaBot will be
formulating questions which attempt to locate
information that is likely to be contained on the
Web site, and not the full range of questions that
they might like to ask a human expert on the
subject. For example, if JaBot were placed on the
Web site of a university department, users would
be enquiring about subject contents, tutorial hours,
exam dates, etc., and not attempting to ask which
of subjects X and Y is easier or more relevant for
their careers.
As can be seen in the diagram below, JaBot has
three modules: a natural language interface, a
search engine and an interactive list of references
to the Web pages on the site at which it is
operating. At start up time, two data files are
loaded, namely, a file of linguistic units with little
or no semantic relevance in the context of Web
site information retrieval, and a lexical semantic
map of the particular Web site. The linguistic unit
file contains a list of the grammatical and lexical
elements, marks, words and other literal strings
which are not used when locating entries within
the Web site. The lexical semantic map contains
lexical elements (e.g., terms and compounds)
</bodyText>
<page confidence="0.985563">
1087
</page>
<bodyText confidence="0.9999396">
which correspond to the concepts extracted from
the Web pages on the site, as well as other
synonyms and quasi-synonyms which may be
used to refer to them.
The construction of the linguistic unit file
represents less of a problem than that of the
lexical semantic map, since for a particular
language the semantically empty elements will
remain constant independently of the content of
the Web site. Hence, once versions of this data
file are constructed for the main languages used
on the Web, they could be made publicly
available for all sites. Both the linguistic unit file
and the lexical semantic map have been
formulated from an empirical study carried out by
the authors on the way in which questions are
typically asked about Web site contents.
The lexical semantic knowledge to be used by the
search engine is extracted from the user&apos;s
questions by a process of rudimentary parsing
based upon the restrictions imposed by the
linguistic unit file. In essence, the majority of the
grammatical words and certain other literal
chunks of language are removed leaving a string
of key lexemes which belong to open linguistic
categories. The parser does not take into account
the punctuation of the query since it is assumed
that the user has posed one single question, and
not a series of questions or sentences with other
communicative functions. This procedure is
motivated by the fact that the grammaticality of
such electronic input is often very low since it is
closer to oral interactions than to carefully
produced written texts (cf. the quality of e-mail).
The remaining lexical elements are used by the
search engine, not directly on the Web site, but
against the nodes of the lexical semantic map.
Each node in the map consists of a link to a Web
page (or section) and a list of semantically similar
words and expressions in the given domain. The
links to the Web pages which correspond to the
nodes of the map that have been activated in the
search are presented to the user as a list, ordered
by the number of elements found in each node.
Double clicking on a link will retrieve the
information by opening the corresponding page in
the main browser window.
Finally, the multilinguality of JaBot depends on
the way in which the lexical semantic map and the
linguistic unit file are coded. If foreign language
knowledge is included in both sources, then
foreign language queries are possible. The content
of the Web site (and therefore the responses to the
user) would, however, not be multilingual unless
the site had been constructed that way.
</bodyText>
<sectionHeader confidence="0.995935" genericHeader="method">
3 JaBot - A working example
</sectionHeader>
<bodyText confidence="0.994479714285714">
The example presented here has been extracted
from our Web site locally. JaBot contains a
scrolling set of images which inform the user of its
functionality, and also a text window into which
the user can enter his/her questions, as shown in
this diagram.
In this example someone wants to know who is the
head of the department, and consequently enters
the question: &amp;quot;Who is the head of department?&amp;quot;.
Such a question would produce the following
output list of links:
Por favor, teclee su pregunta
en el recuadro de abajo e
intentare contestarla
</bodyText>
<figure confidence="0.9964314">
JaBot&apos;s Internal Architecture
Natural Search Interactive List
LanelaSe Engine of References
Interface to Web Pages
e---- ----, ,--- -----,
â€¢-___ _....., 4-...__ _____-/
Linguistic Lexical
Unit Semantic
File Map
----&amp;quot;
</figure>
<page confidence="0.911066">
1088
</page>
<bodyText confidence="0.97455424">
Jdkiot Net s c ape PIRI
Double clicking on the top entry will access the
head of department&apos;s home page. When the way
in which this question can be expressed in
Spanish is considered, the advantage of JaBot
over a simple literal string search engine (for
example, the search tool which Microsoft
FrontPage provides for Web sites) becomes
evident. Typically the head of department would
be referred to as: &amp;quot;el director / la directora&amp;quot;,
depending on the gender of the person.
Now, since the head of our department is a
woman, a user accessing the site who does not
know this would use the default gender in
Spanish, which is masculine, and enter &amp;quot;el
director&amp;quot;. A literal string search would not be
able to identify the relevant link. Furthermore, if
the user does not speak Spanish very well and
enters a synonym such as &amp;quot;jefe&amp;quot;, &amp;quot;cabeza&amp;quot;,
&amp;quot;presidente&amp;quot;, &amp;quot;el que manda&amp;quot;, etc., s/he would not
be able to locate the desired reference either.
Since JaBot uses semantic associations, it will
find the same references for sentences which
include any of the above entries, as well as
similar ones in English.
</bodyText>
<sectionHeader confidence="0.974408" genericHeader="method">
4 JaBot - The next version
</sectionHeader>
<bodyText confidence="0.9984215">
Any future version of JaBot will need to improve
its competence in two aspects: its linguistic
sophistication and its knowledge location and
retrieval capabilities. Firstly, the linguistic issues.
JaBot contains relatively little linguistic
sophistication. Input questions are semantically
parsed in a way that enables JaBot to answer a
large range of basic queries about a Web site with
some degree of flexibility. However, the parser
cannot distinguish between such requests as:
</bodyText>
<listItem confidence="0.9096975">
(a) &amp;quot;I want to know the phone numbers of the
lecturers of Linguistics X and Y&amp;quot;.
(b) &amp;quot;I want to know the phone numbers of all the
lecturers of Linguistics except X and Y&amp;quot;
</listItem>
<bodyText confidence="0.999768822222222">
The parser&apos;s sensitivity to such grammatical words
as &amp;quot;except&amp;quot; and &amp;quot;not&amp;quot; would expand the range of
query sentences which JaBot could handle
effectively. Also, the identification of
conjunctions like &amp;quot;and&amp;quot; and punctuation signs like
the full stop would allow multiple queries. Even
sentential order could, in principle, be taken into
account. However, there is a well known trade-off
between theoretical linguistic sophistication and
practical performance which is applicable here
(Hutchins &amp; Somers, 1992). While sentences (a)
and (b) pose a linguistic problem for JaBot, they
may not pose a practical one, since our study of
the types of questions which users actually ask did
not include a single example of this type.
In order to cope with complex, ambiguous and
incomplete input, the next version of JaBot should
be able to assess the quality of its own parsing and
searching, so that it can request clarification from
the user when necessary. On a practical note, a
semi-automatic tool for preparing the lexical
semantic map would be a great help for Web
masters who are considering employing JaBot on
their sites. Otherwise, the manual preparation of
this file can be time consuming and, furthermore,
it would be more laborious to keep the file up to
date as the Web site changes.
Secondly, the knowledge location and retrieval
issues. At the simplest level an agent is a piece of
software whose primary task is to increase
productivity through automation. Some agents,
&amp;quot;intelligent agents&amp;quot;, seem to have certain
autonomy or do something which can be
considered to be &amp;quot;smart&amp;quot; (such as determining the
importance of a piece of e-mail by scanning it for
words like &amp;quot;deadline&amp;quot; or &amp;quot;won the lottery&amp;quot;).
JaBot&apos;s intelligence is limited. It can only answer
questions about the content of the site. It cannot
compare, deduce, guess, etc.
fielll../ArgelesDeLaCcoche/Indsx.html 150%
fie:///../Miernbtos.htra 150M
Be:///../Indexhtm111Mienbos 50%
Los enlaces relacionados con su pregunta estan
abso. Por favor, pulse dos veces sobre una
entrada para accedes ala pagina referida
</bodyText>
<page confidence="0.930345">
1089
</page>
<bodyText confidence="0.999987717948718">
Furthermore, agents, whether intelligent or not,
are either static or mobile. The former can only
operate within the confines of a single machine or
address space. The latter have been defined in
formal terms as &amp;quot;objects that have behaviour,
state, and location&amp;quot; (Sommers, 1997, p.3). They
can move about the network, executing tasks at
different places and interacting with other agents
when necessary.
JaBot is currently a static agent in the sense that
it can only access information on the Web site
where it is located. However, research has been
done by engineers at IBM on mobile Java agents,
named aglets (IBM, www.trl.ibm.co.jp/aglets/),
which are able to move between Web sites
running the aglet server. This mobility enables
interaction between the aglets, which can be used
to facilitate many different forms of behaviour,
such as the sharing of expertise and information.
Hence, a future version of JaBot could be
designed as an aglet, which would enable it to
continue functioning as it does at the moment on
the local Web site, but with the additional
capability to leave the site and interact with other
JaBot aglets on servers where other related
information is located.
A JaBot aglet may, for example, exist on the Web
pages of the different departments of a university
(located on physically different machines).
Where user questions go beyond the information
which is held on a particular departmental server,
the JaBot aglet could leave its own server and go
and interact with another one located elsewhere.
Such mobility and the functionality which it
entails may be very useful, for example, in the
case of a modular degree where a student has to
study courses in different departments and
therefore wants to ask questions which relate to
more than one area of knowledge.
</bodyText>
<sectionHeader confidence="0.978597" genericHeader="conclusions">
Conclusion
</sectionHeader>
<bodyText confidence="0.999986782608696">
In this article the problems which exist in the
retrieval of information from a Web site have
been considered together with the way in which a
bot could be used to improve the situation. JaBot,
a Java-based bot, has been designed and
developed by the authors to overcome such
problems. A requirements analysis has been
undertaken, followed by the resulting specification
of its architecture and associated data sources.
Subsequently, an illustrative example of its
functionality has been presented, which
demonstrated that JaBot is more flexible than a
traditional literal string-based search tool (where
one exists). Other benefits of JaBot have also been
identified, such as the way in which desired
information can be accessed on the site without
the need to know exact key words which exist in
the entry. Furthermore, its ability to process
questions in languages other than that in which the
Web site was written. Finally, some limitations in
the current design of JaBot have been outlined
together with an indication of the form that the
next version of this bot will take.
</bodyText>
<sectionHeader confidence="0.999365" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.996667222222222">
Boitet C. (1990) Towards Personal MT: general
design, dialogue structure, potential role of
speech. In H. Karlgren (ed.) COLING-90:
Papers presented to the 136 International
Conference on Computational Linguistics (3),
pp. 30-35.
Hutchins W.J. and Somers H.L. (1992) An
Introduction to Machine Translation.
Cambridge University Press.
Read T. and Barcena E. (in prep.) Como se
prepara el Departamento de Filologias
Extranj eras y sus Linguisticas para el siglo XXI.
Revista de la UNED.
Read T., Barcena E. and Faber P. (1997) Java and
its role in Natural Language Processing and
Machine Translation. In Proceedings of the
Machine Translation Summit VI. pp.224-231.
Ritchey T. (1995) Programming with Java! New
Riders.
Sommers B. (1997) Agents: Not just for Bond
anymore. Java World (Electronic magazine at
www.javaworld.com/jw-04-1997/jw-04-
agents.html).
Thompson B. (1998) It&apos;s a tough job but
somebot&apos;s got to do it. Internet Magazine.
pp.44-48.
Weber J. (1997) Using Java 1.1. Que.
</reference>
<page confidence="0.988851">
1090
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.782351">
<title confidence="0.999542">JaBot: a multilingual Java-based intelligent agent for Web sites</title>
<author confidence="0.999802">Tim READ</author>
<author confidence="0.999802">Elena BARCENA</author>
<affiliation confidence="0.912215">Departamento de Filologias Extranjeras y sus Linguisticas, UNED</affiliation>
<address confidence="0.894653">Senda del Rey s/n, Madrid 28040, Spain</address>
<email confidence="0.966168">timread@sr.uned.es,ebarcena@sr.uned.es</email>
<abstract confidence="0.9961875">This paper presents a novel type of intelligent agent with a multilingual natural language interface, which retrieves information from within a Web site. This agent, named JaBot after the fact that it is a bot which has been programmed in Java, has been designed and developed by the authors in an attempt to solve common Web site problems related to information retrieval. JaBot runs quickly and efficiently, and rather than running directly on the Web site pages, it is connected to a lexical semantic map. This map is based upon the contents of the Web site in question together with other associated linguistic knowledge.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>C Boitet</author>
</authors>
<title>Towards Personal MT: general design, dialogue structure, potential role of speech. In</title>
<date>1990</date>
<booktitle>COLING-90: Papers presented to the 136 International Conference on Computational Linguistics (3),</booktitle>
<pages>30--35</pages>
<editor>H. Karlgren (ed.)</editor>
<contexts>
<context position="6742" citStr="Boitet, 1990" startWordPosition="1106" endWordPosition="1107">king, it will not be used. This requirement has implications for the degree of sophistication of the linguistic processing and the types of data files associated with it. Now that the requirements have been presented, the resulting design is described. JaBot is domainspecific in the sense that it can only operate on the Web site for which it was configured. This is useful from a practical functional perspective because it limits both the conceptual and linguistic diversity which needs to be processed (so far this approach has produced the best results in computational linguistic applications [Boitet, 1990]). In other words, users of JaBot will be formulating questions which attempt to locate information that is likely to be contained on the Web site, and not the full range of questions that they might like to ask a human expert on the subject. For example, if JaBot were placed on the Web site of a university department, users would be enquiring about subject contents, tutorial hours, exam dates, etc., and not attempting to ask which of subjects X and Y is easier or more relevant for their careers. As can be seen in the diagram below, JaBot has three modules: a natural language interface, a sea</context>
</contexts>
<marker>Boitet, 1990</marker>
<rawString>Boitet C. (1990) Towards Personal MT: general design, dialogue structure, potential role of speech. In H. Karlgren (ed.) COLING-90: Papers presented to the 136 International Conference on Computational Linguistics (3), pp. 30-35.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W J Hutchins</author>
<author>H L Somers</author>
</authors>
<title>An Introduction to Machine Translation.</title>
<date>1992</date>
<publisher>Cambridge University Press.</publisher>
<contexts>
<context position="13571" citStr="Hutchins &amp; Somers, 1992" startWordPosition="2250" endWordPosition="2253">ers of Linguistics X and Y&amp;quot;. (b) &amp;quot;I want to know the phone numbers of all the lecturers of Linguistics except X and Y&amp;quot; The parser&apos;s sensitivity to such grammatical words as &amp;quot;except&amp;quot; and &amp;quot;not&amp;quot; would expand the range of query sentences which JaBot could handle effectively. Also, the identification of conjunctions like &amp;quot;and&amp;quot; and punctuation signs like the full stop would allow multiple queries. Even sentential order could, in principle, be taken into account. However, there is a well known trade-off between theoretical linguistic sophistication and practical performance which is applicable here (Hutchins &amp; Somers, 1992). While sentences (a) and (b) pose a linguistic problem for JaBot, they may not pose a practical one, since our study of the types of questions which users actually ask did not include a single example of this type. In order to cope with complex, ambiguous and incomplete input, the next version of JaBot should be able to assess the quality of its own parsing and searching, so that it can request clarification from the user when necessary. On a practical note, a semi-automatic tool for preparing the lexical semantic map would be a great help for Web masters who are considering employing JaBot o</context>
</contexts>
<marker>Hutchins, Somers, 1992</marker>
<rawString>Hutchins W.J. and Somers H.L. (1992) An Introduction to Machine Translation. Cambridge University Press.</rawString>
</citation>
<citation valid="false">
<authors>
<author>T Read</author>
<author>E Barcena</author>
</authors>
<title>(in prep.) Como se prepara el Departamento de Filologias Extranj eras y sus Linguisticas para el siglo XXI. Revista de la UNED.</title>
<marker>Read, Barcena, </marker>
<rawString>Read T. and Barcena E. (in prep.) Como se prepara el Departamento de Filologias Extranj eras y sus Linguisticas para el siglo XXI. Revista de la UNED.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Read</author>
<author>E Barcena</author>
<author>P Faber</author>
</authors>
<title>Java and its role in Natural Language Processing and Machine Translation.</title>
<date>1997</date>
<booktitle>In Proceedings of the Machine Translation Summit VI.</booktitle>
<pages>224--231</pages>
<contexts>
<context position="1229" citStr="Read et al., 1997" startWordPosition="183" endWordPosition="186">val. JaBot runs quickly and efficiently, and rather than running directly on the Web site pages, it is connected to a lexical semantic map. This map is based upon the contents of the Web site in question together with other associated linguistic knowledge. Introduction Java was launched by Sun Microsystems in the early &apos;90s as a simple, robust, dynamic, multithreaded, general-purpose, object-oriented, platform independent programming language! Its strengths can be split into four key issues, namely, portability, security, robustness and ease of usage, and distributed operation across the Web (Read et al., 1997). These benefits make Java an ideal programming language for constructing Web-based computational linguistic applications and agents (Ritchey, 1995; Sommers, 1997). Some applications of this type are beginning to appear on the Web, such as the English learning tools developed in Java by the authors as part of the UNED â€” Profesor Virtual (UPV) research project&apos; (Read 8c Barcena, in prep.). &apos;Although JaBot and the rest of the modules that make up the UPV are fully functional and have been operational for some time now locally on our departmental Web pages, they cannot be accessed yet on the Inte</context>
</contexts>
<marker>Read, Barcena, Faber, 1997</marker>
<rawString>Read T., Barcena E. and Faber P. (1997) Java and its role in Natural Language Processing and Machine Translation. In Proceedings of the Machine Translation Summit VI. pp.224-231.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Ritchey</author>
</authors>
<title>Programming with Java!</title>
<date>1995</date>
<location>New Riders.</location>
<contexts>
<context position="1376" citStr="Ritchey, 1995" startWordPosition="203" endWordPosition="204">based upon the contents of the Web site in question together with other associated linguistic knowledge. Introduction Java was launched by Sun Microsystems in the early &apos;90s as a simple, robust, dynamic, multithreaded, general-purpose, object-oriented, platform independent programming language! Its strengths can be split into four key issues, namely, portability, security, robustness and ease of usage, and distributed operation across the Web (Read et al., 1997). These benefits make Java an ideal programming language for constructing Web-based computational linguistic applications and agents (Ritchey, 1995; Sommers, 1997). Some applications of this type are beginning to appear on the Web, such as the English learning tools developed in Java by the authors as part of the UNED â€” Profesor Virtual (UPV) research project&apos; (Read 8c Barcena, in prep.). &apos;Although JaBot and the rest of the modules that make up the UPV are fully functional and have been operational for some time now locally on our departmental Web pages, they cannot be accessed yet on the Internet because our Web site is in the fmal stages of construction. Access to the vast amounts of information contained on the Web still highlights so</context>
</contexts>
<marker>Ritchey, 1995</marker>
<rawString>Ritchey T. (1995) Programming with Java! New Riders.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Sommers</author>
</authors>
<title>Agents: Not just for Bond anymore. Java World (Electronic magazine at</title>
<date>1997</date>
<pages>04--1997</pages>
<contexts>
<context position="1392" citStr="Sommers, 1997" startWordPosition="205" endWordPosition="206">contents of the Web site in question together with other associated linguistic knowledge. Introduction Java was launched by Sun Microsystems in the early &apos;90s as a simple, robust, dynamic, multithreaded, general-purpose, object-oriented, platform independent programming language! Its strengths can be split into four key issues, namely, portability, security, robustness and ease of usage, and distributed operation across the Web (Read et al., 1997). These benefits make Java an ideal programming language for constructing Web-based computational linguistic applications and agents (Ritchey, 1995; Sommers, 1997). Some applications of this type are beginning to appear on the Web, such as the English learning tools developed in Java by the authors as part of the UNED â€” Profesor Virtual (UPV) research project&apos; (Read 8c Barcena, in prep.). &apos;Although JaBot and the rest of the modules that make up the UPV are fully functional and have been operational for some time now locally on our departmental Web pages, they cannot be accessed yet on the Internet because our Web site is in the fmal stages of construction. Access to the vast amounts of information contained on the Web still highlights some problems, suc</context>
<context position="15419" citStr="Sommers, 1997" startWordPosition="2549" endWordPosition="2550">an only answer questions about the content of the site. It cannot compare, deduce, guess, etc. fielll../ArgelesDeLaCcoche/Indsx.html 150% fie:///../Miernbtos.htra 150M Be:///../Indexhtm111Mienbos 50% Los enlaces relacionados con su pregunta estan abso. Por favor, pulse dos veces sobre una entrada para accedes ala pagina referida 1089 Furthermore, agents, whether intelligent or not, are either static or mobile. The former can only operate within the confines of a single machine or address space. The latter have been defined in formal terms as &amp;quot;objects that have behaviour, state, and location&amp;quot; (Sommers, 1997, p.3). They can move about the network, executing tasks at different places and interacting with other agents when necessary. JaBot is currently a static agent in the sense that it can only access information on the Web site where it is located. However, research has been done by engineers at IBM on mobile Java agents, named aglets (IBM, www.trl.ibm.co.jp/aglets/), which are able to move between Web sites running the aglet server. This mobility enables interaction between the aglets, which can be used to facilitate many different forms of behaviour, such as the sharing of expertise and inform</context>
</contexts>
<marker>Sommers, 1997</marker>
<rawString>Sommers B. (1997) Agents: Not just for Bond anymore. Java World (Electronic magazine at www.javaworld.com/jw-04-1997/jw-04-agents.html).</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Thompson</author>
</authors>
<title>It&apos;s a tough job but somebot&apos;s got to do it.</title>
<date>1998</date>
<journal>Internet Magazine.</journal>
<pages>44--48</pages>
<contexts>
<context position="2563" citStr="Thompson, 1998" startWordPosition="411" endWordPosition="412"> the Web still highlights some problems, such as that of cataloguing or indexing all that information. The sheer size of the Web and the ever changing nature of its contents means that the process of charting it is closer to mapping a large cavern with only the aid of a small torch than to the construction of a library catalogue. Bot or agent technology is playing an increasingly important role in this mapping process, as will be seen next. 1 Bots and the Web Bots are distinguished from other commonly used programs in that they act as if they have some degree of intelligence and independence (Thompson, 1998). Born in the &apos;60s, nowadays bots should be viewed as part of the wider move towards distributed object-based systems (Weber, 1997). Instead of having massive programs, the tendency is to use networked computer systems made of a large number of co-operating taskspecific components. Some of these components will act when told to; others, bots, will be more autonomous, making the on-line experience more pleasant and productive. Internet search engines have a reputation of being unfriendly and unhelpful, despite the fact that some of them offer basic natural language interaction. The problem aris</context>
</contexts>
<marker>Thompson, 1998</marker>
<rawString>Thompson B. (1998) It&apos;s a tough job but somebot&apos;s got to do it. Internet Magazine. pp.44-48.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Weber</author>
</authors>
<date>1997</date>
<journal>Using Java</journal>
<volume>1</volume>
<publisher>Que.</publisher>
<contexts>
<context position="2694" citStr="Weber, 1997" startWordPosition="432" endWordPosition="433">he ever changing nature of its contents means that the process of charting it is closer to mapping a large cavern with only the aid of a small torch than to the construction of a library catalogue. Bot or agent technology is playing an increasingly important role in this mapping process, as will be seen next. 1 Bots and the Web Bots are distinguished from other commonly used programs in that they act as if they have some degree of intelligence and independence (Thompson, 1998). Born in the &apos;60s, nowadays bots should be viewed as part of the wider move towards distributed object-based systems (Weber, 1997). Instead of having massive programs, the tendency is to use networked computer systems made of a large number of co-operating taskspecific components. Some of these components will act when told to; others, bots, will be more autonomous, making the on-line experience more pleasant and productive. Internet search engines have a reputation of being unfriendly and unhelpful, despite the fact that some of them offer basic natural language interaction. The problem arises exactly at the point when the user connects to a specific Web site in search of some information that s/he believes to be contai</context>
</contexts>
<marker>Weber, 1997</marker>
<rawString>Weber J. (1997) Using Java 1.1. Que.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>