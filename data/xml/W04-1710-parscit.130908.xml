<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000038">
<title confidence="0.994205666666667">
The Syntax Student’s Companion:
an eLearning Tool designed for
(Computational) Linguistics Students
</title>
<author confidence="0.836935">
Aur´elien Max
</author>
<bodyText confidence="0.378787">
Groupe d’Etude pour la Traduction Automatique
(GETA-CLIPS)
</bodyText>
<address confidence="0.4419">
Grenoble, France
</address>
<email confidence="0.946949">
aurelien.max@imag.fr
</email>
<sectionHeader confidence="0.974712" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999581090909091">
This paper advocates the use of free and
easily accessible computer programs in
teaching. The motivating reasons for a par-
ticular program supporting the learning of
syntax are given, and a first version of the
program is presented and illustrated. Initial
evaluation results led to additional specifi-
cations and to the development of a new
version of the program that is introduced.
Finally, several perspectives for such a sup-
port tool are drawn.
</bodyText>
<sectionHeader confidence="0.995483" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999783446808511">
Doing exercises to manipulate the concepts
taught in a course is essential to both teachers
and students. While the former want to ensure
that their students have a good grasp of the
material that they teach them, the latter often
want to illustrate that material with some
concrete practice. Linguistics or computational
linguistics students who are introduced to the
intricacies of grammar are no less concerned
than any others. A typical exercise consists
in asking students to analyze a sentence by
means of its description as a syntactic tree.
In introductory courses, either a context-free
grammar is given to them before the exercise
begins, or they have to build one of their
own that can be used to analyze the sentence
given. Obviously, the more exercises look like
challenging “games” and the more they are
easy to use and accessible, the more likely
students are to invest time and effort in trying
to do them (see e.g. (van Halteren, 2002;
Gibbon and Carson-Berndsen, 1999)). If they
spend a lot of time drawing, erasing parts of
their trees, drawing them again or correcting
them, and then waiting for minutes before their
teaching assistant is available again, they may
not find the whole exercise very captivating
very long. But this type of exercise is essential
to understand how the most basic of grammar
formalism works and therefore to build a solid
ground for the study of language analysis.
Computers play a growing role in educa-
tion, as the number of workshops dedicated
to eLearning and related domains shows.
While many institutions experience financial
cuts, often reflected in the reduction of the
time devoted to supervised work, the use of
computer support has also its roots in other
reasons. It should be clear that computer
tools are not meant to dispense entirely with
teachers, but rather to have them concentrate
on the pedagogical content. Machines are
good at supporting well-defined tasks, and can
therefore allow students to practise concepts
that have been encoded into a well designed
computer program. The issues of what type of
practice can be done in a satisfactory manner
with computers today and of the extent to
which it can actually help students or assess
their performance are open to debate and the
object of research. Importantly to us, past
projects have shown that the computer-assisted
learning of syntax can produce a high level
of engagement by students (e.g.(Larson, 1996)).
This paper concentrates more on the stu-
dent’s perspective, inspired from the author’s
own experience as a former computer science
student taking courses in linguistics. The first
section presents the motivating reasons for the
creation of a computer program intended to
support the practice of syntax exercises. The
program is described and its use is illustrated
by concrete examples. Preliminary elements
of evaluation are inferred from the use of the
program by university students and teachers,
showing that this type of support yields
promising results in spite of a few issues. We
then present our current work by describing the
design of a new version of the program, where
modularity and extensibility play a central
role. It is hoped that this new version will be
more suited to both students’ and teachers’
needs, and that this practical experience will
contribute to the development of the field of
computer-assisted learning. We finally propose
several tracks for the evolution of this type of
tool.
2 Motivating reasons for the
creation of the program
Supervised time in university courses tends
more to diminish than to augment. It is however
particularly crucial in introductory courses that
students can get a good grasp of the concepts
by regular supervised practice. Exercise sheets
are often found useful only if sufficient time in
the classroom can be devoted to go throught all
the different subtleties encoded in the exercises.
It can therefore be advantageous to offer stu-
dents a means to practise outside of the class-
room, while still being able to ask their teachers
for help. There are a number of criteria that
should be taken into account when designing a
computer program for supporting this kind of
practice, including the following:
</bodyText>
<listItem confidence="0.981051111111111">
• The program should be attractive to
students. It is well known in computer en-
gineering that good programs can end up
not being used if the user was not taken
into consideration from the very beginning
of the engineering process. Students are a
particular kind of users who may not be
willing to use programs that are tedious
or overcomplicated to use, and seen as not
helpful as a result.
• Teachers should have the feeling that
they can control what the program
does. Not only should it be simple for
teachers to add new data conforming to
predefined exercise types, but it should also
be possible to extend the program.1
• The program should provide useful
feedback to students. While it is proba-
</listItem>
<bodyText confidence="0.946397607843137">
bly the case that an asynchronous mode of
practice whereby a student would do exer-
cises on a computer and then send the re-
sults electronically to a teaching supervi-
sor would yield good results in some con-
texts, students will expect the program to
assess their answers and possibly provide
feedback, and therefore support self-study
to some extent.
• The use of the program should be in-
dependent from place and time. It
is our own experience as teacher at the
university level that a significant propor-
tion of post-2000 students prefer to work
from home when they have this possibili-
ty. Booking computer rooms for practice
for specific courses may work for some stu-
dents, but certainly not for all of them.
This said, supervised sessions with com-
puters may still be a fruitful option. This,
of course, further implies that the program
should not be too costly for both the uni-
versity and the students, if not free.
When we first worked on the development
of a program that would support the practice
of syntax exercises, back in 1999, there were
already programs in this area. Trees 2 2,
developed at the University of Pennsylvania,
allowed students to visually build syntactic
trees, but in such a way that they could only be
valid relative to the grammar used. Moreover,
at the time the program could only be run lo-
cally on Macintosh computers and required the
purchase of a licence. Syntactica3, developed at
Sunny Brooks University, allowed students to
build grammars and then ask the program to
build the syntactic tree for them, which they
could subsequently modify. Again, at the time
the program only existed for NeXT computers.
The free Java applet from the University of
Bangor, The Syntax Tutor4, permitted a student
to enter a set of context-free rules and to ask
the system to parse a sentence with it.
Except for the case of the The Syntax Tutor,
these programs had to be bought, and could
only be run on specific computer families. Ne-
vertheless, their existence shows that there was
a very promising trend, supported by encoura-
ging evaluation (see e.g. (Larson, 1996; Phillips,
1998)), to offer students computer programs for
the study of syntax.
</bodyText>
<footnote confidence="0.9809322">
1It is not expected that teachers would write com-
puter code themselves, but the program could be ex-
tended by means of predefined building bricks or by the
addition of code by a computer engineer with access to
a clear application programming interface (API).
2http://www.ling.upenn.edu/ kroch/Trees.html
3http://semlab2.sbs.sunysb.edu/Users/rlarson/Syntactica/
syntactica.html
4http://www.bangor.ac.uk/ling/java/lt/LingTutor.html.
This link has been down for some time.
</footnote>
<sectionHeader confidence="0.281637" genericHeader="method">
3 Program design considerations
</sectionHeader>
<bodyText confidence="0.9999916875">
When designing the program, we had two types
of considerations in mind, pedagogical and
technical. The basic idea was to let students
build syntactic trees in a simple way, and to
edit or consult the underlying grammars. What
seemed very important was to let the students
the possibility to make errors, considering that
trial and error, providing appropriate feedback
is given, can be part of a sound learning
process. Therefore, students should be able to
draw syntactic trees that are not valid relative
to a given grammar, which was given to them
or was build by them, and was accessible and
modifiable or hidden. The syntactic theory
used would initially be the X’ theory5, and the
types of exercises would include the drawing of
ambiguous sentences based on some data, and
the modification of existing trees to illustrate
syntactic transformations.
Technical considerations included the fact
that the program should be runnable anywhere
and on any computer family. The Java pro-
gramming language (Sun Microsystems, 1995)
was the obvious choice, as it was already quite
mature and could be run over the Internet on
any platform that had a Java virtual machine.
Furthermore, a Java program can exist in two
flavors, as an application that can be installed
and run locally on a personal computer, and
as an applet that can be downloaded at exe-
cution time over the Internet and run by the
virtual machine of a web browser installed on
computers of a university department without
any installation nor maintenance.
Furthermore, exercises and resources for the
program had to be modifiable. For a local use
with the application version, the user should
be able to create new exercises using a simple
description language. For a distributed use
with the applet version, the administrator
of the website where the applet is hosted
should be able to add resources that would be
immediately accessible to all the remote users.
Modifiable resources include grammars, trees,
exercise definitions, and language resource files
for running the program in the language of the
user. XML (W3C, 2000) was chosen as the
format for most of the resources, and a simple
</bodyText>
<footnote confidence="0.90365">
5This choice was based on a particular introductory
course taught at McGill University, which used (O’Grady
and Dobrovolsky, 1996) as its coursebook.
</footnote>
<figureCaption confidence="0.999895">
Figure 1: The main window of the program
</figureCaption>
<bodyText confidence="0.9996675">
schema was designed to allow the creation of
new resources. It was initially believed that
this provided a simple way of creating new
resources and modifying existing ones.
</bodyText>
<sectionHeader confidence="0.372069" genericHeader="method">
4 Presentation of the program
</sectionHeader>
<bodyText confidence="0.991834">
Our program is called the Syntax Student’s
Companion. Figure 1 shows its main interface
running in English.6 The top panel contains
the active grammar (Simple CFG for English in
the example), a button to launch the grammar
editor, the active mode (Free drawing mode)
and a button to switch to the exercise mode.
The panel on the left contains buttons for all
the nonterminal and terminal categories of the
active grammar, and a list for the words in
the lexicon. The main panel is a scrollable
zone called the workspace where trees can be
drawn. Menus contain commands relative to
the customization of the program, user modes,
grammars, and trees.
Clicking on a syntactic category or on a
lexicon word allows dropping it onto the
workspace at a chosen location.7 Trees are
built by combining subtrees, as illustrated in
</bodyText>
<footnote confidence="0.978331142857143">
6The program can be run in 7 languages thanks to
localized resource files contributed by various people.
7The Trees program proposes to drop on the
workspace subtrees corresponding to partial structures
described in the grammar used. We plan to add this
feature in the next version of the program, as it allows
students to concentrate on more advanced notions.
</footnote>
<figureCaption confidence="0.99878">
Figure 2: Steps for attaching a subtree to a node
</figureCaption>
<bodyText confidence="0.989844190476191">
figure 2. First, the root node of the tree that
will become a subtree of another tree should
be selected with the mouse (1), and dragged
onto the node that will become its mother (2).
If that node has not any children yet, then
the attachment is done. Otherwise, the user
has to select the position of the new subtree
among the daughters of its mother (3). When
the position has been chosen, the attachment
is done, and the new layout of the tree is
produced (4), so as to ensure that the trees are
always well-balanced.8 Alternatively, categories
and words can be directly dropped onto the
workspaces as children of existing nodes. Trees
or subtrees can be copied and pasted onto the
workspace, allowing faster construction. To
detach a subtree, the root of the subtree should
simply be dragged away from its parent tree.
Trees and subtrees can also be removed from
the workspace by using the rubber tool.
All these adjunction operations can be done
regardless of the rules defined in the active
grammar. Therefore, students may make errors
and be aware of them only after they try to
validate their trees with the active grammar.
Indeed, contexts where students could use
a tree drawing application with grammars
designed in such a way that irrelevant errors
were not possible revealed in some cases that
the students had become too dependent on the
helping hand of the program and were not able
to perform as well without it (Phillips, 1998).
The current version only supports simple
context-free grammars. Grammars can either
come from a remote or a local file, or they
can be created from scratch by the student.
The grammar editor (see figure 3) allows the
8We are aware that some textbooks use trees with up-
right lefthand branches and sloping righthand branches,
so we will add this possibility as a new parameter. Like-
wise, we will allow trees to be built bottom up, with all
the words of a sentence aligned horizontally.
</bodyText>
<figureCaption confidence="0.961916">
Figure 3: The dialog box of the editor for
context-free grammars
</figureCaption>
<bodyText confidence="0.998295846153846">
consultation and modification of the current
grammar. It shows all the derivation rules cor-
responding to a given nonterminal category9,
and allows specifying of how they are presented
on the window of the main interface.
Once students have built trees, they can ask
the program to check their validity according
to the active grammar. If the active grammar
is modifiable, they can modify it so as to ensure
that the coverage of the grammar include
their trees. If the active grammar is hidden
(i.e. not accessible), the validation of their
trees indicates whether they conform to an
</bodyText>
<footnote confidence="0.805096666666667">
9In the presented implementation, lexical categories
appear as just any other nonterminal categories in the
grammar editor dialog box, but that may be confusing
for students. We therefore think that the lexicon should
be distinguished from the grammar itself, as it is done
on the left panel of the main interface (see figure 1).
</footnote>
<figureCaption confidence="0.999596">
Figure 4: Checking of the validity of a tree relatively to the current grammar
</figureCaption>
<bodyText confidence="0.999877935483871">
implicit grammar specification (such as one
that would have been described during lecture
sessions). Tree nodes that violate the rules of
the grammar are shown in red, and passing
the mouse cursor over them displays a message
indicating the nature of the error, as illustrated
in figure 4, subfigure (3).
Three modes of exercises have been defined
and can be encoded in XML resource files. The
drawing of non-ambiguous trees requires the
student to draw the tree for a given sentence
using a given grammar, whereby the analysis
of the sentence is unambiguous. An example of
such an exercise encoded into XML format is
given in figure 5 for the Spanish phrase convo-
catoria de proyectos de innovaci´on educativa.
Figure 6 illustrates the ambiguous tree drawing
exercise type. The student is asked to draw the
syntactic tree for a sentence (Time flies like
an arrow in this case) given several data that
permit to disambiguate the sentence and find
the correct syntactic derivation. The last type
of exercise asks students to modify trees (see
figure 7) to reflect syntactic transformations.
Instead of asking the student to draw the
syntactic tree for the sentence (in the example,
Who will come tomorrow?), she is provided
with a base tree (in the example, the tree for
the sentence Bobby-Joe will come tomorrow),
in order to better illustrate the transformations
that take place.
</bodyText>
<sectionHeader confidence="0.995311" genericHeader="method">
5 Initial evaluation
</sectionHeader>
<bodyText confidence="0.999716166666667">
As we are not ourselves involved in syntax
teaching10, we have not been able to perform
any formal evaluation of the presented version
of the program. It is however crucial to be
able to assess the effectiveness of such a tool,
both in terms of the type of help it gives to
</bodyText>
<footnote confidence="0.554144">
10Our initial motivation was to offer such a program
to fellow students.
</footnote>
<equation confidence="0.863785782608696">
&lt;?xml version=&amp;quot;1.0&amp;quot;?&gt;
&lt;exercices type=&amp;quot;&amp;quot; author=&amp;quot;&amp;quot;&gt;
&lt;exercice name=&amp;quot;convocatoria de
proyectos de innovacion
educativa&amp;quot;
language=&amp;quot;espanol&amp;quot;
type=&amp;quot;Unambiguous tree drawing&amp;quot;&gt;
&lt;sentence&gt;convocatoria de proyectos
de innovacion educativa&lt;/sentence&gt;
&lt;grammar name=&amp;quot;&amp;quot; type=&amp;quot;&amp;quot; author=&amp;quot;&amp;quot;&gt;
&lt;rules&gt;
fsust -&gt; nucleo mod;
ncleo -&gt; sust;
mod -&gt; fprep;
fprep -&gt; director termino;
director -&gt; prep;
termino -&gt; fsust;
mod -&gt; adj;
sust -&gt; convocatoria;
prep -&gt; de;
sust -&gt; proyectos;
sust -&gt; innovacion;
adj -&gt; educativa;
</equation>
<figure confidence="0.9181966">
&lt;/rules&gt;
&lt;categories_display&gt;
&lt;row&gt;fsust nucleo&lt;/row&gt;
&lt;row&gt;mod fprep sust&lt;/row&gt;
&lt;row&gt;adj prep termino&lt;/row&gt;
&lt;row&gt;director&lt;/row&gt;
&lt;/categories_display&gt;
&lt;/grammar&gt;
&lt;/exercice&gt;
&lt;/exercices&gt;
</figure>
<figureCaption confidence="0.999198">
Figure 5: Sample exercise definition for unam-
biguous tree drawing
</figureCaption>
<bodyText confidence="0.98540025">
the student and the support it provides to the
teacher. The initial evaluation elements we
have been able to gather from emails sent to
us via the website of the project constitute the
</bodyText>
<figureCaption confidence="0.9999065">
Figure 6: Ambiguous tree drawing exercise
Figure 7: Tree transformation exercise
</figureCaption>
<bodyText confidence="0.999962555555555">
basis for an updated specification for the new
version of the program that we will introduce
in the next section.
Several teachers have reported that they
had used the program at some point in their
teaching, but we suspect that in most cases
the program was demonstrated to students
(for example, using a data projector in the
classroom), hoping that they would use it for
self-study. The most important limitation
user feedback told us was the difficulty to
add new exercises for teachers. Only few
people contributed exercises in XML format11,
suggesting that this way of specifying resources
was probably not adequate for linguistics
teachers. Although the program can support
any grammar theory based on context-free
grammars, the default grammars made some
users think that only the X’ theory could be
used, and some users had difficulty to see
that the grammars could in fact be edited
and totally new sets of categories defined.
Unsurprisingly, some teachers said they were
interested in the support of feature structures.
A not-so-expected use of the program was
for producing graphical trees for inclusion
into documents. This, corroborated with
several user testimonies, seems to indicate that
the program is considered easy to use. Its
simplicity was in fact often mentionned as one
of the preferred characteristics by students
who used the program without any prior
recommandation from a teacher. We also think
that the availability of the program and its
online user manual in several languages may
have contributed to this.12
Some technical issues were also reported.
Most users of the program, who are not
supposed to be computer scientists, found it
difficult to set up the Java program and run
it as an application. Moreover, some web
browsers did not run the applet perfectly. The
existing version of the program is based on
the Java technology that existed in 1999, and
the language is now more mature and better
supported, so it is now simpler to set up a Java
virtual machine on one’s computer and to run
Java programs, and support for Java in web
browsers is much better than it used to be.
As regards the evaluation we would like
to be able to conduct, we believe that user
questionnaires and logging of student activity
would be good indicators of its effectiveness.
Also, it would be interesting to see if the use
</bodyText>
<footnote confidence="0.6714305">
11Some people may have written exercises of which we
are not aware.
12Evaluation results for the Syntactica grammar work-
bench revealed that the use of this kind of computer-
assisted instruction surprisingly increased the need for
instructor support (Larson, 1996). We assume that this
was partly due first to the number of functions of the
program, as well as the fact that at the time linguis-
tics students were for the most part new to the use of
computers.
</footnote>
<bodyText confidence="0.999124">
of the program can make significant differences
in the evaluation of the performance of student
groups.
</bodyText>
<sectionHeader confidence="0.972631" genericHeader="method">
6 Current work
</sectionHeader>
<bodyText confidence="0.999124726027398">
We have specified a new version of the program
that will be partly developed by two Mas-
ters students during a computer engineering
project. We present the main changes from the
existing version in this section, and we conclude
with some perspectives in the next section.
First of all, the main lesson we can draw from
user feedback is that no matter how much time
is spent on specification, not all features that
would be useful to users could be imagined.
Therefore, it seems a good idea that such a
non-commercial program be extensible by other
contributors who would like to add new features
such as new exercise types, or support for other
grammatical theories. The new version will
have an OpenSource licence, which implies that
we pay a particular attention to the genericity,
modularity and documentation of the source
code, and that the program will continue to be
free to use, which seems essential to us.
A bottleneck to a more widespread use of
the program is certainly the difficulty to create
new resources, mainly exercises. A particular
mode for the definition of exercises will be
integrated into the program. This mode will
allow a teacher to describe an exercise and
its solution in a way as similar as possible
to the exercise mode itself. We also want
to support the description of possible errors
and their appropriate corrections and com-
ments, in order to provide better feedback to
students. Once the exercises are defined, it
would be possible to submit them to a reposi-
tory on a web server, on a collaborative mode.13
A novel use of the applet version will allow
using it inline in web pages, instead of as a
separate application window. This will not only
allow the dynamic drawing of tree descriptions
specified as parameters to the Java applet (and
possibly tree animations), but also the insertion
of exercises within online course material. We
13Collaborative projects, such as the Papillon project
for multilingual lexical resources, show that this ap-
proach can work if submitters can also benefit from the
submissions of other contributors.
plan to use this for the tutorial of the program.
On the content side, several ideas have been
submitted and will be implemented depending
on time. Notably, it seems particularly inte-
resting to provide actual linguistic data from
corpora to students from which grammars
can be inferred, as in (Borin and Dahllof,
1999). A new exercise type will ask students to
write a grammar accounting for a given small
corpus, which could already be morphologically
annotated or not. Lexicons will be separated
from grammars, in order to make them reusable
when possible. Feature structures will also be
supported, both for the edition of grammars
and for the validation of syntactic derivations.
A number of new features concern the
graphical display of trees. Notably, it will
be possible to collapse or expand subtrees
(using the triangle notation), and to draw trees
top-down with the terminal symbols immedia-
tely under the non-terminal that dominates
them, or bottom-up with the terminal symbols
aligned horizontally.14 It will also be possible
to specify display properties (such as font and
color) at the level of nodes and subtrees, and to
export trees as bitmap files for easy inclusion
into documents like assignments and course
notes.
</bodyText>
<sectionHeader confidence="0.842133" genericHeader="conclusions">
7 Perspectives and conclusions
</sectionHeader>
<bodyText confidence="0.998780036363637">
One could think of many other features that
would probably make the program even more
useful for learning. We only mention a few and
we hope that OpenSource contributions will
extend the list.
A key aspect of this kind of support tool
certainly lies in the nature of the feedback that
is provided to students. We have already said
that the mode for defining exercises will allow
the teacher to specify possible wrong solutions
and to associate them with an appropriate
correction. An interesting extension would be
a mode where students could send the results
of their exercise session (possibly containing a
series of coherent exercises) to a supervisor by
14In the latter case, it will be possible to specify that
the trees be developed with an upright lefthand branch
and sloping righthand ones, as this layout is used in some
textbook and is therefore more familiar to students using
them.
email from the program. Then, the annotated
corrections of exercises could feed a database
and be reused in subsequent unsupervised
exercises. We think that there is indeed much
to be gained from past corrections, as shown in
the research on vicarious learning using past
dialogues between learners and their teachers
(Cox et al., 1999), which, incidentally, was also
based on the teaching of syntax.
The range of topics covered by the program
could be extended. The learning of syntax
could probably be supported by the integration
of parsers, which could be of particular interest
to computational linguistics students (see e.g.
(Meurers et al., 2002; van Halteren, 2002)).
The integration of generators would also allow
students to inspect the productions of their
grammars to attempt to identify why they
could overgenerate. Furthermore, we would like
to reuse what already exists for the morpholo-
gical analysis of words in terms of inflections
and derivations, as well as for compositional
semantic analysis.
The program we have presented puts a par-
ticular emphasis on its central users, who are
students in (computational) linguistics. Initial
evaluation has shown that this kind of support
was very welcome by the learners’ community,
and we hope that it will be more widely adopted
by the teachers’ community in its new version
that attempts to reduce known limitations. We
look forward to new developments in the field
of research in computer-assisted learning, and
in particular on methodologies for the evalua-
tion of systems.
</bodyText>
<sectionHeader confidence="0.991331" genericHeader="acknowledgments">
Acknowledgements
</sectionHeader>
<bodyText confidence="0.999866416666667">
Many thanks go to the people who have directly
contributed to this unfunded project on a vo-
lunteer basis, in particular S´everine Gedzelman
and B´en´edicte Grizolle for their work on the
new version of the program, and `Agnes Sandor,
Su-Ying Hsiao, Tanja Hieber, Susana Sotelo
Doc´ıo, Thierry van Steenberghe, Nicola Can-
cedda and Christophe Terrasson for their con-
tribution. Many thanks also to Lisa Travis and
Nathan Friedman from McGill University, and
to all the students and teachers who have sent
encouraging feedback on their use of the tool.
</bodyText>
<sectionHeader confidence="0.991208" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.992837875">
Lars Borin and Mats Dahllof. 1999. A Corpus-
Based Grammar Tutor for Education in Lan-
guage and Speech Technology. In Proceedings
of the workshop Computer and Internet sup-
ported education in language and speech tech-
nology, EACL’99, Bergen, Norway.
Richard Cox, Jean McKendree, Richard Tobin,
John Lee, and Terry Mayes. 1999. Vicarious
learning from dialogue and discourse. Journal
of Instructional Science, 27:431–458.
Dafydd Gibbon and Julie Carson-Berndsen.
1999. Web tools for introductory computa-
tional linguistics. In Proceedings of the work-
shop Computer and Internet supported ed-
ucation in language and speech technology,
EACL’99, Bergen, Norway.
Richard K. Larson. 1996. Grammar as a labo-
ratory science. In Presented at the American
Association for the Advancement of Science
Meetings, Special Session ”From Curiousity
to Science Through Linguistic Inquiry” Bal-
timore, U.S.A.
W. Detmar Meurers, Gerald Penn, and Frank
Richter. 2002. A Web-based Instructional
Platform for Contraint-Based Grammar For-
malisms and Parsing. In Proceedings of the
ACL-02 Workshop on Effective Tools and
Methodologies for Teaching Natural Language
Processing and Computational Linguistics,
Philadelphia, U.S.A, pages 19–26.
William O’Grady and Michael Dobrovolsky.
1996. Contemporary Linguistic Analysis.
Copp Clarck, Toronto, 3rd edition.
Colin Phillips. 1998. Teaching Syntax with
Trees. GLOT International, 3.7.
Sun Microsystems. 1995. The Java program-
ming language. http://www.javasoft.com.
Hans van Halteren. 2002. Teaching NLP/CL
through Games: the Case of Parsing. In
Proceedings of the ACL-02 Workshop on Ef-
fective Tools and Methodologies for Teaching
Natural Language Processing and Computa-
tional Linguistics, Philadelphia, U.S.A, pages
1–9.
W3C. 2000. XML 1.0: The eXtensi-
ble Markup Language (2nd edition).
October 2000 W3C recommandation,
http://www.w3.org/TR/Rec-xml.
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.669835">
<title confidence="0.995553">The Syntax Student’s an eLearning Tool designed (Computational) Linguistics Students</title>
<author confidence="0.982673">Aur´elien Max</author>
<affiliation confidence="0.768383">Groupe d’Etude pour la Traduction</affiliation>
<address confidence="0.861273">Grenoble,</address>
<email confidence="0.997086">aurelien.max@imag.fr</email>
<abstract confidence="0.99707925">This paper advocates the use of free and easily accessible computer programs in teaching. The motivating reasons for a particular program supporting the learning of syntax are given, and a first version of the program is presented and illustrated. Initial evaluation results led to additional specifications and to the development of a new version of the program that is introduced. Finally, several perspectives for such a support tool are drawn.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Lars Borin</author>
<author>Mats Dahllof</author>
</authors>
<title>A CorpusBased Grammar Tutor for Education in Language and Speech Technology.</title>
<date>1999</date>
<booktitle>In Proceedings of the workshop Computer and Internet supported education in language and speech technology, EACL’99,</booktitle>
<location>Bergen, Norway.</location>
<contexts>
<context position="23084" citStr="Borin and Dahllof, 1999" startWordPosition="3799" endWordPosition="3802">plet (and possibly tree animations), but also the insertion of exercises within online course material. We 13Collaborative projects, such as the Papillon project for multilingual lexical resources, show that this approach can work if submitters can also benefit from the submissions of other contributors. plan to use this for the tutorial of the program. On the content side, several ideas have been submitted and will be implemented depending on time. Notably, it seems particularly interesting to provide actual linguistic data from corpora to students from which grammars can be inferred, as in (Borin and Dahllof, 1999). A new exercise type will ask students to write a grammar accounting for a given small corpus, which could already be morphologically annotated or not. Lexicons will be separated from grammars, in order to make them reusable when possible. Feature structures will also be supported, both for the edition of grammars and for the validation of syntactic derivations. A number of new features concern the graphical display of trees. Notably, it will be possible to collapse or expand subtrees (using the triangle notation), and to draw trees top-down with the terminal symbols immediately under the non</context>
</contexts>
<marker>Borin, Dahllof, 1999</marker>
<rawString>Lars Borin and Mats Dahllof. 1999. A CorpusBased Grammar Tutor for Education in Language and Speech Technology. In Proceedings of the workshop Computer and Internet supported education in language and speech technology, EACL’99, Bergen, Norway.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Richard Cox</author>
<author>Jean McKendree</author>
<author>Richard Tobin</author>
<author>John Lee</author>
<author>Terry Mayes</author>
</authors>
<title>Vicarious learning from dialogue and discourse.</title>
<date>1999</date>
<journal>Journal of Instructional Science,</journal>
<pages>27--431</pages>
<contexts>
<context position="25260" citStr="Cox et al., 1999" startWordPosition="4154" endWordPosition="4157">es of coherent exercises) to a supervisor by 14In the latter case, it will be possible to specify that the trees be developed with an upright lefthand branch and sloping righthand ones, as this layout is used in some textbook and is therefore more familiar to students using them. email from the program. Then, the annotated corrections of exercises could feed a database and be reused in subsequent unsupervised exercises. We think that there is indeed much to be gained from past corrections, as shown in the research on vicarious learning using past dialogues between learners and their teachers (Cox et al., 1999), which, incidentally, was also based on the teaching of syntax. The range of topics covered by the program could be extended. The learning of syntax could probably be supported by the integration of parsers, which could be of particular interest to computational linguistics students (see e.g. (Meurers et al., 2002; van Halteren, 2002)). The integration of generators would also allow students to inspect the productions of their grammars to attempt to identify why they could overgenerate. Furthermore, we would like to reuse what already exists for the morphological analysis of words in terms of</context>
</contexts>
<marker>Cox, McKendree, Tobin, Lee, Mayes, 1999</marker>
<rawString>Richard Cox, Jean McKendree, Richard Tobin, John Lee, and Terry Mayes. 1999. Vicarious learning from dialogue and discourse. Journal of Instructional Science, 27:431–458.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Dafydd Gibbon</author>
<author>Julie Carson-Berndsen</author>
</authors>
<title>Web tools for introductory computational linguistics.</title>
<date>1999</date>
<booktitle>In Proceedings of the workshop Computer and Internet supported education in language and speech technology, EACL’99,</booktitle>
<location>Bergen, Norway.</location>
<contexts>
<context position="1669" citStr="Gibbon and Carson-Berndsen, 1999" startWordPosition="260" endWordPosition="263">troduced to the intricacies of grammar are no less concerned than any others. A typical exercise consists in asking students to analyze a sentence by means of its description as a syntactic tree. In introductory courses, either a context-free grammar is given to them before the exercise begins, or they have to build one of their own that can be used to analyze the sentence given. Obviously, the more exercises look like challenging “games” and the more they are easy to use and accessible, the more likely students are to invest time and effort in trying to do them (see e.g. (van Halteren, 2002; Gibbon and Carson-Berndsen, 1999)). If they spend a lot of time drawing, erasing parts of their trees, drawing them again or correcting them, and then waiting for minutes before their teaching assistant is available again, they may not find the whole exercise very captivating very long. But this type of exercise is essential to understand how the most basic of grammar formalism works and therefore to build a solid ground for the study of language analysis. Computers play a growing role in education, as the number of workshops dedicated to eLearning and related domains shows. While many institutions experience financial cuts, </context>
</contexts>
<marker>Gibbon, Carson-Berndsen, 1999</marker>
<rawString>Dafydd Gibbon and Julie Carson-Berndsen. 1999. Web tools for introductory computational linguistics. In Proceedings of the workshop Computer and Internet supported education in language and speech technology, EACL’99, Bergen, Norway.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Richard K Larson</author>
</authors>
<title>Grammar as a laboratory science. In Presented at the American Association for the Advancement of Science Meetings, Special Session ”From Curiousity to Science Through Linguistic Inquiry”</title>
<date>1996</date>
<location>Baltimore, U.S.A.</location>
<contexts>
<context position="3114" citStr="Larson, 1996" startWordPosition="499" endWordPosition="500">ather to have them concentrate on the pedagogical content. Machines are good at supporting well-defined tasks, and can therefore allow students to practise concepts that have been encoded into a well designed computer program. The issues of what type of practice can be done in a satisfactory manner with computers today and of the extent to which it can actually help students or assess their performance are open to debate and the object of research. Importantly to us, past projects have shown that the computer-assisted learning of syntax can produce a high level of engagement by students (e.g.(Larson, 1996)). This paper concentrates more on the student’s perspective, inspired from the author’s own experience as a former computer science student taking courses in linguistics. The first section presents the motivating reasons for the creation of a computer program intended to support the practice of syntax exercises. The program is described and its use is illustrated by concrete examples. Preliminary elements of evaluation are inferred from the use of the program by university students and teachers, showing that this type of support yields promising results in spite of a few issues. We then prese</context>
<context position="7661" citStr="Larson, 1996" startWordPosition="1270" endWordPosition="1271">rs and then ask the program to build the syntactic tree for them, which they could subsequently modify. Again, at the time the program only existed for NeXT computers. The free Java applet from the University of Bangor, The Syntax Tutor4, permitted a student to enter a set of context-free rules and to ask the system to parse a sentence with it. Except for the case of the The Syntax Tutor, these programs had to be bought, and could only be run on specific computer families. Nevertheless, their existence shows that there was a very promising trend, supported by encouraging evaluation (see e.g. (Larson, 1996; Phillips, 1998)), to offer students computer programs for the study of syntax. 1It is not expected that teachers would write computer code themselves, but the program could be extended by means of predefined building bricks or by the addition of code by a computer engineer with access to a clear application programming interface (API). 2http://www.ling.upenn.edu/ kroch/Trees.html 3http://semlab2.sbs.sunysb.edu/Users/rlarson/Syntactica/ syntactica.html 4http://www.bangor.ac.uk/ling/java/lt/LingTutor.html. This link has been down for some time. 3 Program design considerations When designing th</context>
<context position="20378" citStr="Larson, 1996" startWordPosition="3341" endWordPosition="3342"> machine on one’s computer and to run Java programs, and support for Java in web browsers is much better than it used to be. As regards the evaluation we would like to be able to conduct, we believe that user questionnaires and logging of student activity would be good indicators of its effectiveness. Also, it would be interesting to see if the use 11Some people may have written exercises of which we are not aware. 12Evaluation results for the Syntactica grammar workbench revealed that the use of this kind of computerassisted instruction surprisingly increased the need for instructor support (Larson, 1996). We assume that this was partly due first to the number of functions of the program, as well as the fact that at the time linguistics students were for the most part new to the use of computers. of the program can make significant differences in the evaluation of the performance of student groups. 6 Current work We have specified a new version of the program that will be partly developed by two Masters students during a computer engineering project. We present the main changes from the existing version in this section, and we conclude with some perspectives in the next section. First of all, </context>
</contexts>
<marker>Larson, 1996</marker>
<rawString>Richard K. Larson. 1996. Grammar as a laboratory science. In Presented at the American Association for the Advancement of Science Meetings, Special Session ”From Curiousity to Science Through Linguistic Inquiry” Baltimore, U.S.A.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W Detmar Meurers</author>
<author>Gerald Penn</author>
<author>Frank Richter</author>
</authors>
<title>A Web-based Instructional Platform for Contraint-Based Grammar Formalisms and Parsing.</title>
<date>2002</date>
<booktitle>In Proceedings of the ACL-02 Workshop on Effective Tools and Methodologies for Teaching Natural Language Processing and Computational Linguistics,</booktitle>
<pages>pages</pages>
<location>Philadelphia, U.S.A,</location>
<contexts>
<context position="25576" citStr="Meurers et al., 2002" startWordPosition="4204" endWordPosition="4207">e annotated corrections of exercises could feed a database and be reused in subsequent unsupervised exercises. We think that there is indeed much to be gained from past corrections, as shown in the research on vicarious learning using past dialogues between learners and their teachers (Cox et al., 1999), which, incidentally, was also based on the teaching of syntax. The range of topics covered by the program could be extended. The learning of syntax could probably be supported by the integration of parsers, which could be of particular interest to computational linguistics students (see e.g. (Meurers et al., 2002; van Halteren, 2002)). The integration of generators would also allow students to inspect the productions of their grammars to attempt to identify why they could overgenerate. Furthermore, we would like to reuse what already exists for the morphological analysis of words in terms of inflections and derivations, as well as for compositional semantic analysis. The program we have presented puts a particular emphasis on its central users, who are students in (computational) linguistics. Initial evaluation has shown that this kind of support was very welcome by the learners’ community, and we hop</context>
</contexts>
<marker>Meurers, Penn, Richter, 2002</marker>
<rawString>W. Detmar Meurers, Gerald Penn, and Frank Richter. 2002. A Web-based Instructional Platform for Contraint-Based Grammar Formalisms and Parsing. In Proceedings of the ACL-02 Workshop on Effective Tools and Methodologies for Teaching Natural Language Processing and Computational Linguistics, Philadelphia, U.S.A, pages 19–26.</rawString>
</citation>
<citation valid="true">
<authors>
<author>William O’Grady</author>
<author>Michael Dobrovolsky</author>
</authors>
<title>Contemporary Linguistic Analysis. Copp Clarck, Toronto, 3rd edition.</title>
<date>1996</date>
<marker>O’Grady, Dobrovolsky, 1996</marker>
<rawString>William O’Grady and Michael Dobrovolsky. 1996. Contemporary Linguistic Analysis. Copp Clarck, Toronto, 3rd edition.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Colin Phillips</author>
</authors>
<title>Teaching Syntax with Trees.</title>
<date>1998</date>
<journal>GLOT International,</journal>
<volume>3</volume>
<contexts>
<context position="7678" citStr="Phillips, 1998" startWordPosition="1272" endWordPosition="1273">k the program to build the syntactic tree for them, which they could subsequently modify. Again, at the time the program only existed for NeXT computers. The free Java applet from the University of Bangor, The Syntax Tutor4, permitted a student to enter a set of context-free rules and to ask the system to parse a sentence with it. Except for the case of the The Syntax Tutor, these programs had to be bought, and could only be run on specific computer families. Nevertheless, their existence shows that there was a very promising trend, supported by encouraging evaluation (see e.g. (Larson, 1996; Phillips, 1998)), to offer students computer programs for the study of syntax. 1It is not expected that teachers would write computer code themselves, but the program could be extended by means of predefined building bricks or by the addition of code by a computer engineer with access to a clear application programming interface (API). 2http://www.ling.upenn.edu/ kroch/Trees.html 3http://semlab2.sbs.sunysb.edu/Users/rlarson/Syntactica/ syntactica.html 4http://www.bangor.ac.uk/ling/java/lt/LingTutor.html. This link has been down for some time. 3 Program design considerations When designing the program, we had</context>
<context position="13465" citStr="Phillips, 1998" startWordPosition="2220" endWordPosition="2221">and subtrees can also be removed from the workspace by using the rubber tool. All these adjunction operations can be done regardless of the rules defined in the active grammar. Therefore, students may make errors and be aware of them only after they try to validate their trees with the active grammar. Indeed, contexts where students could use a tree drawing application with grammars designed in such a way that irrelevant errors were not possible revealed in some cases that the students had become too dependent on the helping hand of the program and were not able to perform as well without it (Phillips, 1998). The current version only supports simple context-free grammars. Grammars can either come from a remote or a local file, or they can be created from scratch by the student. The grammar editor (see figure 3) allows the 8We are aware that some textbooks use trees with upright lefthand branches and sloping righthand branches, so we will add this possibility as a new parameter. Likewise, we will allow trees to be built bottom up, with all the words of a sentence aligned horizontally. Figure 3: The dialog box of the editor for context-free grammars consultation and modification of the current gram</context>
</contexts>
<marker>Phillips, 1998</marker>
<rawString>Colin Phillips. 1998. Teaching Syntax with Trees. GLOT International, 3.7.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sun Microsystems</author>
</authors>
<title>The Java programming language.</title>
<date>1995</date>
<note>http://www.javasoft.com.</note>
<contexts>
<context position="9269" citStr="Microsystems, 1995" startWordPosition="1508" endWordPosition="1509">ning process. Therefore, students should be able to draw syntactic trees that are not valid relative to a given grammar, which was given to them or was build by them, and was accessible and modifiable or hidden. The syntactic theory used would initially be the X’ theory5, and the types of exercises would include the drawing of ambiguous sentences based on some data, and the modification of existing trees to illustrate syntactic transformations. Technical considerations included the fact that the program should be runnable anywhere and on any computer family. The Java programming language (Sun Microsystems, 1995) was the obvious choice, as it was already quite mature and could be run over the Internet on any platform that had a Java virtual machine. Furthermore, a Java program can exist in two flavors, as an application that can be installed and run locally on a personal computer, and as an applet that can be downloaded at execution time over the Internet and run by the virtual machine of a web browser installed on computers of a university department without any installation nor maintenance. Furthermore, exercises and resources for the program had to be modifiable. For a local use with the applicatio</context>
</contexts>
<marker>Microsystems, 1995</marker>
<rawString>Sun Microsystems. 1995. The Java programming language. http://www.javasoft.com.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hans van Halteren</author>
</authors>
<title>Teaching NLP/CL through Games: the Case of Parsing.</title>
<date>2002</date>
<booktitle>In Proceedings of the ACL-02 Workshop on Effective Tools and Methodologies for Teaching Natural Language Processing and Computational Linguistics,</booktitle>
<pages>1--9</pages>
<location>Philadelphia, U.S.A,</location>
<marker>van Halteren, 2002</marker>
<rawString>Hans van Halteren. 2002. Teaching NLP/CL through Games: the Case of Parsing. In Proceedings of the ACL-02 Workshop on Effective Tools and Methodologies for Teaching Natural Language Processing and Computational Linguistics, Philadelphia, U.S.A, pages 1–9.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W3C</author>
</authors>
<title>XML 1.0: The eXtensible Markup Language (2nd edition).</title>
<date>2000</date>
<note>W3C recommandation, http://www.w3.org/TR/Rec-xml.</note>
<marker>W3C, 2000</marker>
<rawString>W3C. 2000. XML 1.0: The eXtensible Markup Language (2nd edition). October 2000 W3C recommandation, http://www.w3.org/TR/Rec-xml.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>