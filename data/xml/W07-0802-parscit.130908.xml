<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<title confidence="0.930341">
Implementation of the Arabic Numerals and their Syntax in GF
</title>
<author confidence="0.877719">
Ali Dada
</author>
<affiliation confidence="0.482827">
SAP Research CEC
</affiliation>
<address confidence="0.382636">
Blumenbergplatz 9
9000 St. Gallen, Switzerland
</address>
<email confidence="0.910348">
ali.dada@sap.com
</email>
<sectionHeader confidence="0.993474" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.99979585">
The numeral system of Arabic is rich in its
morphosyntactic variety yet suffers from the
lack of a good computational resource that
describes it in a reusable way. This implies
that applications that require the use of rules
of the Arabic numeral system have to either
reimplement them each time, which implies
wasted resources, or use simplified, impre-
cise rules that result in low quality appli-
cations. A solution has been devised with
Grammatical Framework (GF) to use lan-
guage constructs and grammars as libraries
that can be written once and reused in vari-
ous applications. In this paper, we describe
our implementation of the Arabic numeral
system, as an example of a bigger imple-
mentation of a grammar library for Arabic.
We show that users can reuse our system
by accessing a simple language-independent
API rule.
</bodyText>
<sectionHeader confidence="0.997484" genericHeader="keywords">
1 Introduction
</sectionHeader>
<subsectionHeader confidence="0.982348">
1.1 Problem
</subsectionHeader>
<bodyText confidence="0.990922619047619">
Language technology and software localization con-
sume a significant share of many companies’ time
and work. Translating an operating system or an ap-
plication to different languages involves, in the tra-
ditional approach, translating out-of-context strings
into different languages. This requires a language
expert for each new language, and will still in-
volve language-related problems because of the dif-
ficulty in translating out-of-context strings and tak-
ing care of morphological and syntactic variations at
the same time. We illustrate this with an example.
A mail reader application wants to display messages
like
You have 1 new message
You have 2 new messages
You have 3 new messages
You have 100 new messages
If these are to be translated into Arabic, special mor-
phological and syntactic considerations should be
made, which include inflecting “message” in num-
ber:
</bodyText>
<equation confidence="0.9753807">
❆ ☛❷P☛ ris¯alatun
✠ ❆☛✏❏☛
2 messages à❐❆ ☛❷P☛ ris¯alat¯ani
☛
☛
(3-10) messages ➱✌❑☛❆☛❷☛Pras¯aVa
(11-99) messages é❐
✏✓☛ ❆ ☛❷P☛ ris¯alatan
x100 messages é✏✓❐❆ ☛❷P☛ ris¯alatin
☛
</equation>
<bodyText confidence="0.948681625">
So the word “messages” is translated into dif-
ferent words in Arabic, depending on the numeral
counting it. Counted nouns are an extreme example
of how varied case inflection can be: The case of the
singular and the dual is determined by their syntac-
tic function (nominative in the example above). This
is not the case for plurals, which assume the geni-
tive case from three to ten ( ➱✌❑☛❆☛❷☛P is diptote, thus the
☛
☛✠
to nighty-nine, and genitive again for plurals that are
multiples of hundred. This is not to mention noun-
adjective agreement which should be taken care of
when translating “new messages” into Arabic.
The aforementioned details should not be the re-
sponsibility of the application programmer, and hav-
</bodyText>
<figure confidence="0.33450075">
1 message ✏✔é❐☛
✏ é❥☛❏ ✏➥
marker), then accusative (singular) from eleven
9
</figure>
<note confidence="0.9774625">
Proceedings of the 5th Workshop on Important Unresolved Matters, pages 9–16,
Prague, Czech Republic, June 2007. c�2007 Association for Computational Linguistics
</note>
<bodyText confidence="0.999806">
ing translators do this work over and over again for
each application can be costly and lead to repeated
work and/or poor results.
</bodyText>
<subsectionHeader confidence="0.949427">
1.2 Solution and Contributions
</subsectionHeader>
<bodyText confidence="0.989718490196078">
We reviewed in other works (Dada and Ranta, 2007)
an approach that addresses problems in language
technology similar but not limited to the above. We
applied this approach to Arabic, thus developing a
resource grammar for Arabic in which we imple-
ment rules that cover the orthography, morphology,
and syntax. In short, this approach is based on de-
veloping libraries of natural language constructs and
rules, which can be used by an application program-
mer who is not knowledgeable in a specific lan-
guage. The core programming language is Gram-
matical Framework (GF) (Ranta, 2004). The lan-
guage library, called a resource grammar (Khegai
and Ranta, 2004) and comprising the linguistic rules,
can be reused in applications through an Application
Programming Interface (API) by programmers that
are unaware of the details of the specific natural lan-
guage. Such a programmer uses a resource gram-
mar assuming it will take care of morphological and
syntactic rules. So far, we have implemented signif-
icant parts of the Arabic morphology, syntax, ortho-
graphic rules, and provided a sample lexicon of 300
words based on the Swadesh list (Hymes, 1960).
In this paper, we only describe part of the work,
namely the numeral system of Arabic and its syntax.
In the next section we elaborate on the approach, the
programming language that implements it, and on
Resource Grammars.
2 GF and the Resource Library
GF is a special-purpose functional programming
language for defining grammars of (formal or natu-
ral) languages. A common API and resource gram-
mars for various natural languages accompany GF
with a purpose similar to that of libraries in gen-
eral programming languages: implementing pieces
of code that can be reused by the application pro-
grammer.
GF makes a distinction between abstract and con-
crete syntaxes. The common API specifies a set of
syntactic rules that are language independent (ab-
stract syntax), and the resource grammar imple-
ments each rule according to the particular rules of
the language (concrete syntax). This latter involves
word order, agreement, case inflection, etc. This dis-
tinction can abstract over language-dependent fea-
tures and enables an application programmer to
write sentences in a language only by describing
their abstract syntax trees or by translating them
from another language, preferably in a limited do-
main. The abstract representation would then act as
interlingua.
</bodyText>
<sectionHeader confidence="0.986311" genericHeader="introduction">
3 The Numerals
</sectionHeader>
<bodyText confidence="0.994553153846154">
We give here an explanation of our treatment of
the Arabic number system, namely the numerals
and their counted nouns. Our implementation is
based on the work done by Hammarstr¨om and Ranta
(2004) in defining the cardinal numerals in GF. We
will gradually give the governing grammar rules
along with their our formal description in GF.
The numbers from one to nineteen in Arabic have
two forms, a masculine form and a feminine one,
so in general we will take gender to be one of the
inflecting attributes of numbers. Which of these two
forms to use depends on the counted noun and the
counting number:
</bodyText>
<listItem confidence="0.951996833333333">
• The numerals 1 and 2 show gender agreement
with the counted noun (their grammatical role
is an adjective modifying this noun).
• Numerals 3-10 show gender polarity with the
counted noun, so a masculine noun is counted
with a number in its feminine form and vice
</listItem>
<equation confidence="0.7571545">
☛
versa, e.g. ➮❆ ☛❣✳ P ✏é✑❑❈✑❑ (three [+FEM] men
☛
[+MASC]) but ❩❆ ☛❶✠✢ ✑❍❈✑❑ (three [+MASC]
</equation>
<bodyText confidence="0.680117333333333">
their first constituent an
d the counted noun.
(eleven [+MASC] men [+MASC]).
</bodyText>
<listItem confidence="0.905545727272727">
• Numbers 13-19 show gender polarity between
• Numbers further on, except those ending in 01
and 02, show no gender distinction.
Numerals dictate the number of the counted noun
is a way different to what is the case in other lan
-
guages:
• Numeral One: The noun is in the singular form.
women [+FEM]).
• Numbers 11 and 12 have two constituents
which show gender agreement with each other
</listItem>
<figure confidence="0.6320605">
✓ ☛❅
and with the counted noun, e.g. ❈❣✳ P ◗å✑☛❸ ➠
☛ ❨❣
10
</figure>
<listItem confidence="0.8747612">
• Numeral Two: The noun is in the dual form.
• Numerals 3-10: The noun is in the plural form,
☛
e.g. ➮❆ ☛❣✳ P ✏é✑❑❈✑❑ (three men [+PLUR]).
• Numerals &gt; 10: The noun is in singular form
</listItem>
<bodyText confidence="0.890910714285714">
✓✠☞ ☛
again, e.g. ❈❣✳ P à
The numbers inflect also in case, so in the gen-
eral case the number can have different forms for
the three cases: nominative, accusative, and geni-
tive. But again, as with gender, this will depend on
the particular range of numerals:
</bodyText>
<listItem confidence="0.853765878787879">
• Numeral 1: full case distinction (it is an adjec-
tive)
• Number 2: usually the noun in dual is used
alone, and if the number 2 is specified then it
is usually only for emphasis. In this case it’s
an adjective in the dual form, thus it has two
cases: nominative and oblique, e.g. ✠à❆☛✠❏✑❑❅ ✠à❅ ☛❨❐ð
[+NOM] and✠á✣✡❏☛✠❑❅ ✠á❑✡ ☛❨❐ð [+OBL].
✑
• Numerals 3-10 : full case distinction for the
numbers; the counted noun is always genitive,
e.g.■✳❏➺ ☞✏é❶Ô❣✠ (five [+NOM] books [+GEN]),
✏
✏✓
■❏➺ ☛✏é❶Ô ❣✠(five [+ACC] books [+GEN]),
✳
■✓ ✏
✳❏➺✏é☛❶Ô ❣✠ (five [+GEN] books [+GEN]).
✓
• Numerals 11 and 13-19: only accusative, same
as their counted noun, e.g. ❆✓Ò✃✏➥ ☛◗å✑❸☛➠ ✏☛
☛é➟❑✳P❅
(fourteen [+ACC] pens [+ACC]).
• 12: same as 2, but the counted noun is always
accusative
• The tens (20, 30, ... 90): nominative and
oblique cases, the counted noun is accusative
• multiples of 100 or 1000: the counted noun is
genitive.
• composites: the case distinction of the number
is the same as each of its constituent parts, and
the case of the counted noun is determined by
the rule of the last part of the compound con-
</listItem>
<bodyText confidence="0.996029428571429">
struction. For example, 23: the three follows
the rule of 3-10, the 20 follows the rule of the
tens, and the counted noun is accusative as in
the rule of the tens, the last part of the construc-
tion twenty three (three and twenty in Arabic).
The rules above only treat the indefinite state of
the numerals, since the numerals in the definite state
will be an adjective modifying the noun. The case
of such a noun will not then follow the rules above
but will assume the case dictated by its syntactic role
in the sentence. We do however give below the type
of the numerals inflection table including all the at-
tributes that a number can inflect in: gender, state,
and case.
</bodyText>
<figure confidence="0.708336454545455">
lincat Numeral = {
s Gender =&gt; State =&gt; Case =&gt; Str ;
n Size
} ;
param Size =
One  |Two  |ThreeTen  |Teen
 |NonTeen  |Hundreds  |None ;
param
Gender = Masc  |Fem ;
State = Def  |Indef  |Const ;
Case = Nom  |Acc  |Gen ;
</figure>
<bodyText confidence="0.998960848484848">
The lincat (linearize category) statement
defines the type of a numeral in Arabic. It states that
in GF, an Arabic numeral is a record that comprises
two fields. The first is a string s which is in this
case an inflection table specifying that a numeral is
inflected in gender, state, and case. The =&gt; operator
is the table operator in GF, so having three inputs to
the table means that a Numeral is inflected in these
three attributes. The three inflectional attributes are
defined as parameters that take one of predefined
values: gender can be masculine or feminine, case
can be nominative, accusative, or genitive, and state
can be definite with al, definite with a genitive con-
struction ( ✏é➥❆ ☛✠➇❅☛) or indefinite. The second field is n
☛✠
of type Size, which is also defined as a parameter
with several possible values. These values specify
which range of numbers does the numeral belong to.
This is needed to be able to apply the rules above
properly at all stages, including the formation of the
number and the formation of the noun phrase from
the number and the counted noun.
As mentioned earlier, GF differentiates between
abstract and concrete syntaxes, and this differentia-
tion also applies for the numeral system. So first an
abstract syntax defines how numbers are formed in
a language-independent way. The numbers are de-
fined in a way that draws similarities found across
languages in the formation of compound numbers.
We linearize the rules into Arabic thus making use
of this division but making distinctions because of
the special rules that govern numerals in Arabic. A
typical example of such numbers is the special treat-
</bodyText>
<equation confidence="0.596531">
ñ ❑ ✑ ❈✑❑ (thirty men [+SING]).
11
</equation>
<bodyText confidence="0.999830666666667">
ment that numbers ending in 2 have in Arabic due to
the notion of the dual.
We give here the rules for the first division of
numbers and show how we implement them for Ara-
bic. The API specifies the following categories and
rules for numbers less than ten:
</bodyText>
<equation confidence="0.989166714285714">
cat
Digit ; -- 2..9
Sub10 ; -- 1..9
fun
n2, n3, n4, n5, n6, n7, n8, n9 : Digit ;
pot01 : Sub10 ; -- 1
pot0 : Digit -&gt; Sub10 ; -- d * 1
</equation>
<bodyText confidence="0.998874111111111">
So the number 1 is treated separately from the re-
maining digits. We want to preserve a difference in
our Arabic implementation between n2 and the re-
maining digits because of the different way the digit
2 combines in compound numbers later on. This is
the motivation between the division seen in Size
between Two and ThreeTen.
Following is the type of the categories above in
Arabic (the concrete syntax):
</bodyText>
<equation confidence="0.997057333333333">
lincat Digit = {
s : DForm =&gt; Gender =&gt; State =&gt; Case =&gt; Str;
n : Size
} ;
lincat Sub10 = {
s : DForm =&gt; Gender =&gt; State =&gt; Case =&gt; Str;
n : Size
} ;
param DForm = unit  |ten ;
</equation>
<bodyText confidence="0.999849125">
The inflection table shows what we discussed earlier,
that Arabic numbers get in the general case inflected
in gender, state, and case. The DForm is used to
calculate both the digit and its multiple of ten.
We write functions that form the inflection tables
of the digits: one function for numeral 2 (num2, not
shown here) and one function for the rest of the dig-
its, including 1 (num1_10, shown below). 1
</bodyText>
<table confidence="0.839848235294118">
oper num1_10 : Str -&gt; { s : DForm =&gt; Gender
=&gt; State =&gt; Case =&gt; Str } = \xams -&gt;
let xamsa = xams + &amp;quot;ap&amp;quot; in {
s= table {
unit =&gt; table {
Masc =&gt; \\s,c =&gt; (sing xams) ! s ! c;
1Our grammar files are in unicode, but the example codes
shown here are written using the Buckwalter (2003) translitera-
tion with a few changes that suit our needs. We note our use of
‘c’ to denote the sayn.
Fem =&gt; \\s,c =&gt; Al ! s + xamsa
+ dec1sg ! s ! c
};
ten =&gt; \\_,s,c =&gt; Al ! s + xams +
m_pl ! Indef ! c
}
};
</table>
<bodyText confidence="0.999019730769231">
Note the following GF syntax notations: The key-
word oper defines a GF function. An oper judg-
ment includes the name of the defined operation
(e.g. num1_10 in the example above), its type
(e.g. Str -&gt; { s : DForm =&gt; Gender
=&gt; State =&gt; Case =&gt; Str }), and an ex-
pression defining it (everything after the = opera-
tor). As for the syntax of the defining expression,
notice the lambda abstraction form \x -&gt; t of the
function. Inflection tables are either specified by the
table keyword or using the shorthand \\... =&gt;
notation. Finally, + is the character concatenation
operator and ! is the table selection operator.
The num1_10 function takes a string which can
be any of the stems of the numerals from one to
ten excluding two, e.g. ˘hams. From this stem, and
using helping functions from the nominal morphol-
ogy modules, we build the inflection table of the nu-
meral. For example, for the case where DForm is
unit and the Gender is feminine (e.g. ˘hamsah),
the actual numeral string would be the concatena-
tion of a possible definite marker (al), the stem, and
a suffix determined by the state and the case of the
numeral, s and c respectively. The helping function
that determines if the definite marker is needed is the
following:
</bodyText>
<equation confidence="0.96838">
Al : State =&gt; Str =
table {
Def =&gt; &amp;quot;Al&amp;quot;;
=&gt; &amp;quot;&amp;quot;
_
};
</equation>
<bodyText confidence="0.999894142857143">
The second helping function defines the suffixes
that attach to singular or broken plurals of the first
(strong) declension of Arabic nominal words (Rets¨o,
1984). It calculates, given the state of the word and
its case, what its suffix will be. Note that N, F, and
K are the nominative, accusative, and genitive nuna-
tion diacritics.
</bodyText>
<equation confidence="0.86245575">
dec1sg : State =&gt; Case =&gt; Str =
table {
Indef =&gt;
table {
</equation>
<table confidence="0.836740057142857">
Nom =&gt; &amp;quot;N&amp;quot;;
Acc =&gt; &amp;quot;F&amp;quot;;
12
Gen =&gt; &amp;quot;K&amp;quot; other categories don’t show any different logic and
}; will not be detailed here. The first rule we give is for
_ =&gt; the special cases of numeral 11:
table { fun
Nom =&gt; &amp;quot;u&amp;quot;; pot111 : Sub100 ;
Acc =&gt; &amp;quot;a&amp;quot;;
Gen =&gt; &amp;quot;i&amp;quot;
} lin pot111 = {
}; s = \\g,d,_ =&gt;
As expected, only words with indefinite state take case g of {
double diacritics (nunation), where as the rest (al- Masc =&gt; Al ! d + &amp;quot;&gt;aHada&amp;quot; ++ teen ! Masc;
definite or construct-definite words) take simple di- Fem =&gt; Al ! d + &amp;quot;&lt;iHdaY&amp;quot; ++ teen ! Fem
acritics. The remaining helping functions will not be };
all explained here as they follow similar logic. n = NonTeen
The num1_10 and num2 produce only the inflec- };
tion tables (the s field of the digit record). We sim- oper teen : Gender =&gt; Str =
ply add the correct Size parameter to each digit as table {
follows: Masc =&gt; &amp;quot;ca$ara&amp;quot;;
oper num3_10 : Str -&gt; { s : DForm =&gt; Gender Fem =&gt; &amp;quot;ca$rapa&amp;quot;
=&gt; State =&gt; Case =&gt; Str ; n : Size } = };
\xams -&gt; The implementation shows how the qualitative
num1_10 xams ** { n = ThreeTen } ; rules stated at the beginning are described formally.
lin n2 = num2 ** {n = Two }; The inflection table doesn’t give different forms for
lin n3 = num3_10 &amp;quot;valAv&amp;quot;; the three cases, and the accusative is used whatever
lin n4 = num3_10 &amp;quot;&gt;arbac&amp;quot;; the context case is. Both parts of the construction
lin n5 = num3_10 &amp;quot;xams&amp;quot;; show gender agreement.
lin n6 = num3_10 &amp;quot;sit˜&amp;quot;; The numbers 12-19 have a common rule in the
lin n7 = num3_10 &amp;quot;sabc&amp;quot;; API but we should differentiate in the Arabic lin-
lin n8 = num3_10 &amp;quot;vamAnI&amp;quot;; earization between 12 and 13-19 because of the spe-
lin n9 = num3_10 &amp;quot;tisc&amp;quot;; cial status of the dual in Arabic and the different
rules that these numbers assume in Arabic (see rules
above).
</table>
<equation confidence="0.897588">
lin pot01 = num1_10 &amp;quot;wAHid&amp;quot; ** { n = One } ; fun
lin pot0 d = d ; pot1to19 : Digit -&gt; Sub100 ; -- 10 + d
</equation>
<bodyText confidence="0.999967428571429">
The last function in the linearization shown
above, pot0, is used to promote a Digit into a
Sub10 in order to use it later on as any numeral
less that ten. This is the way the API specifies dif-
ferent numerals, dividing them into categories based
on the decimal system. We give here the rest of the
API categories and their linearization in Arabic:
</bodyText>
<equation confidence="0.99292875">
cat
Sub100 ; -- 1..99
Sub1000 ; -- 1..999
Sub1000000 ; -- 1..999999
lincat Sub100 = {
s : Gender =&gt; State =&gt; Case =&gt; Str ;
n : Size
} ;
</equation>
<bodyText confidence="0.999097666666667">
We will now show only a few implementation ex-
amples of the rules that specify the formation of the
Sub100 category. The rest of the rules for this and
</bodyText>
<equation confidence="0.990537">
lin pot1to19 dig = {
s = \\g,d,c =&gt;
case dig.n of {
Two =&gt; Al ! d + num2.s ! unit ! g
! Const ! c ++ teen ! g ;
_ =&gt; dig.s ! unit ! g ! Const ! Acc
++ teen ! (genPolarity ! g)
};
n =
case dig.n of {
Two =&gt; NonTeen;
_ =&gt; Teen
}
};
oper
genPolarity : Gender =&gt; Gender =
table {
Masc =&gt; Fem;
Fem =&gt; Masc
};
</equation>
<bodyText confidence="0.9987515">
The pot1to19 function takes a Digit as argu-
ment. In our implementation we take cases for the
</bodyText>
<page confidence="0.881435">
13
</page>
<bodyText confidence="0.999993523809524">
Size of the digit. When the Size is Two, i.e. the
number will be 12, we apply the rules for number
12 as given in the beginning: gender agreement be-
tween the two constituents, the first constituent is
inflected in case (it is basically number 2 in the
Const state). Otherwise (when the digit size is
ThreeTen), we apply the rules of numbers 13 - 19:
gender polarity between the two constituents and the
first constituent is the digit inflected for the construct
state and accusative case. The second constituent for
all the numbers 11-19 is always accusative as shown
in the teen helping function before.
The rest of the rules for forming numbers will
not be detailed here. Instead we will explain how
all these numbers will combine with nouns to form
noun phrases. The different number ranges as de-
fined by the Size parameter will be now used ex-
tensively in applying the proper rules. Following is
the rule that takes that takes a Determiner (which
can, among others, be a numeral) and a common
noun to give a noun phrase.
</bodyText>
<equation confidence="0.905041">
fun
DetCN : Det -&gt; CN -&gt; NP ;
</equation>
<bodyText confidence="0.999973428571429">
The rule above has the same type in all languages
since it’s part of the language-independent API (ab-
stract syntax). The advantage of this is that a user
of our system can access the Arabic numerals at this
high level of abstraction, without being knowledge-
able about the details of our implementation.
When determiners combine with common nouns
in the general case, it will make a difference whether
or not the determiner was a numeral, and if it were
then the range of the numeral will probably deter-
mine the case of the noun in the resulting NP. Thus
the type of the determiner category should include a
Size field which is taken directly from the size of
the number if that determiner is a numeral:
</bodyText>
<equation confidence="0.979599">
lincat Det = {
s : Species =&gt; Gender =&gt; Case =&gt; Str ;
d : State;
n : Size
} ;
param Species = NoHum  |Hum ;
</equation>
<bodyText confidence="0.999639416666667">
If the determiner is not a numeral, then this will
be denoted by n = None.
The first determiner-noun modification we will
introduce is the determiner’s gender. If we don’t
consider numerals, then a determiner’s gender is di-
rectly deduced from that of the noun. But, as we saw
in the rules for Arabic counted nouns, if the numeral
was in the range 3-10 or 13-19 (Size is ThreeTen
or Teen), then the numeral will show gender po-
larity instead of agreement. The rest of the cases
continue to show agreement. This is described in
detGender:
</bodyText>
<equation confidence="0.956945">
oper
detGender : Gender -&gt; Size -&gt; Gender =
\g,s -&gt;
case s of {
ThreeTen  |Teen =&gt; genPolarity ! g;
_ =&gt; g
};
</equation>
<bodyText confidence="0.9998068">
The arguments are the gender of the noun and the
size of the determiner. The correct gender of the de-
terminer is calculated after taking cases of the Size.
Again, if we were not to consider numerals, the
number in which we should inflect the common
noun (singular, dual, or plural) would be directly de-
termined by the number of the determiner. Now with
the consideration of numerals and their special rules
that dictate the number of the counted noun, we have
to specify a correcting function:
</bodyText>
<figure confidence="0.797407285714286">
oper sizeToNumber : Size -&gt; Number = \s -&gt;
case s of {
ThreeTen  |None =&gt; Pl;
Two =&gt; Dl;
_ =&gt;Sg
} ;
param Number = Sg  |Dl  |Pl;
</figure>
<bodyText confidence="0.999603733333333">
This function converts from the Size of the de-
terminer to a number in which the noun should be
inflected in. As the rules of Arabic numerals spec-
ify, only the 3-10 numeral range dictate a noun in
the plural form. Apart from the dual, the remaining
numeral ranges take a singular noun.
The last way that a numeral will affect the noun it
counts is by specifying its case as we have already
seen in the rules. Without considering numerals,
the case of the noun would always be determined
by its grammatical role in the sentence. Again, this
changes with the introduction of numerals. We write
now a function that takes the case from the sentence,
along with the size and state of the determiner, and
modifies the case if required:
</bodyText>
<figure confidence="0.97704945">
oper
nounCase : Case -&gt; Size -&gt; State -&gt; Case =
\c,size,s -&gt;
14
lin DetCN det cn =
let number = sizeToNumber det.n in {
s = \\c =&gt;
det.s ! cn.h ! (detGender cn.g det.n) ! c
++ cn.s ! number ! (nounState det.d number)
! (nounCase c det.n det.d);
a = agrP3 cn.h cn.g number
};
case &lt;size,s&gt; of {
&lt;Teen,_&gt; =&gt; Acc;
&lt;NonTeen,_&gt; =&gt; Acc;
&lt;ThreeTen,_&gt; =&gt; Gen;
&lt;Hundreds,_&gt; =&gt; Gen;
&lt;_,Const&gt; =&gt; Gen;
=&gt; c
};
</figure>
<bodyText confidence="0.9995371">
Numbers from 11 to 99 dictate the accusative case
on the nouns they count, numbers from 3 to 10
and multiples of hundred dictate the genitive case
of the nouns they count, and the remaining numbers
(1 and 2) don’t change the case determined by the
context. The remaining case of State = Const
takes care of the id. ¯afah genitive constructions.
Thus, after applying all the “correction” functions
above, we get the following implementation of the
noun determination rule:
</bodyText>
<figure confidence="0.887785428571429">
oper agrP3 : Species -&gt; Gender -&gt; Number
-&gt; PerGenNum=
\h,g,n -&gt;
case &lt;h,n&gt; of {
&lt;NoHum,Pl&gt; =&gt; Per3 Fem Sg;
_ =&gt; Per3 g n
};
</figure>
<bodyText confidence="0.9996345">
The agrP3 helping function tests for the case
when the species and number are nonhuman and
plural. This case is treated in agreement as the fem-
inine singular.
</bodyText>
<sectionHeader confidence="0.99997" genericHeader="related work">
4 Related Work
</sectionHeader>
<bodyText confidence="0.999921930232558">
A large-scale implementation of the Arabic mor-
phological system is the Xerox Arabic Morphologi-
cal Analyzer and Generator (Beesley and Karttunen,
2000; Beesley, 2001). This system is developed us-
ing only the Xerox Finite State Technology tools
(Beesley and Karttunen, 2003) from which an Ara-
bic Finite State Lexical Transducer is written. A re-
search version is available for online testing, and an
expanded and updated version can be obtained with
a commercial license. Another notable computa-
tional model of the Arabic morphology is Tim Buck-
walter’s Arabic Morphological Analyzer (Buckwal-
ter, 2004b,a). Buckwalter’s analyzer parses Arabic
words and gives all their possible morphological in-
terpretations, each solution having a unique lemma
ID, different word constituents, the part-of-speech,
and English glosses.
Other works that also use functional languages for
the treatment of Arabic include a morphology sys-
tem by Smrˇz (in prep.). This work is based on Func-
tional Morphology (Forsberg and Ranta, 2004), a
methodology for building morphological systems in
the Haskell programming language. Our treatment
of Arabic shares similarities with that of Functional
Morphology. Both approaches use typed languages,
making use of finite algebraic datatypes to define
linguistic categories. Both languages are functional,
so the approaches use functions to realize linguis-
tic abstractions. A large-scale implementation of
this approach, in which a typed functional program-
ming language is used to build a morphology, is
Huet’s Sanskrit dictionary and morphological sys-
tem (Huet, 2006) upon which the Zen computational
linguistics toolkit is based (Huet, 2005).
Of the available works in Arabic syntax, we men-
tion El-Shishiny (1990) who developed a formal de-
scription of Arabic syntax in Definite Clause Gram-
mar. We also make note of the work in Othman
et al. (2003), where the authors describe a parser
they wrote in Prolog to parse and disambiguate the
Arabic sentence. Shaalan (2005) builds on this work
to develop a syntax-based grammar checker for Ara-
bic called Arabic GramCheck.
</bodyText>
<sectionHeader confidence="0.999671" genericHeader="method">
5 Discussion
</sectionHeader>
<bodyText confidence="0.999872307692308">
Our implementation of the Arabic numerals covers
all natural numbers in the range 1-999,999. This
was accomplished by implementing only a few func-
tions, thanks to the repetitive way in which numer-
als are composed to form larger numerals. As for
performance, Arabic grammars are slower to com-
pile than comparable GF grammars of other lan-
guages, partly because of the additional complexity
of Arabic and partly because of the general way in
which our lexicon is specified. Our implementation
stresses more on elegance and generality rather than
efficiency, thus more work needs to be done on the
latter.
</bodyText>
<page confidence="0.736492">
_
15
</page>
<sectionHeader confidence="0.986722" genericHeader="conclusions">
6 Conclusion
</sectionHeader>
<bodyText confidence="0.999995666666667">
We discussed in this paper the details of implement-
ing the Arabic numeral system in GF. We motivated
our work by taking an example that shows the value
of having the necessary language rules implemented
in a reusable fashion. We built up our implementa-
tion towards a single language-independent rule that
a user can call to access our system. We show how
the grammar formalism we use in our implementa-
tion parallels the way linguists think.
</bodyText>
<sectionHeader confidence="0.998644" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.999798833333333">
Most of the work was done at Chalmers Univer-
sity of Technology. Thanks to Prof. Aarne Ranta
for supervising this work and providing constant
help. Also thanks to Bj¨orn Bringert, Harald Ham-
marstr¨om, and Otakar Smrˇz for giving valuable
comments.
</bodyText>
<sectionHeader confidence="0.998446" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999795942857143">
Kenneth Beesley. Finite-State Morphological Anal-
ysis and Generation of Arabic at Xerox Research:
Status and Plans in 2001. In Workshop Proceed-
ings on Arabic Language Processing: Status and
Prospects, pages 1–8, Toulouse, 2001. ACL.
Kenneth Beesley and Lauri Karttunen. Finite-state
non-concatenative morphotactics. In Proceedings
of the Fifth Workshop of the ACL SIG in Compu-
tational Phonology, pages 1–12, 2000.
Kenneth R. Beesley and Lauri Karttunen. Finite
State Morphology. CSLI Studies in Computa-
tional Linguistics. CSLI Publications, Stanford,
California, 2003.
Tim Buckwalter. Arabic transliteration, 2003. http:
//www.qamus.org/transliteration.htm.
Tim Buckwalter. Issues in Arabic Orthography
and Morphology Analysis. In Proceedings of
the COLING 2004 Workshop on Computational
Approaches to Arabic Script-based Languages,
pages 31–34, 2004a.
Tim Buckwalter. Buckwalter Arabic Morphologi-
cal Analyzer Version 2.0. LDC catalog number
LDC2004L02, ISBN 1-58563-324-0, 2004b.
Ali Dada and Aarne Ranta. Implementing an Open
Source Arabic Resource Grammar in GF. In
Mustafa Mughazy, editor, Perspectives on Arabic
Linguistics, volume XX. John Benjamins, 2007.
Hisham El-Shishiny. A formal description of Arabic
syntax in definite clause grammar. In Proceed-
ings of the 13th Conference on Computational
Linguistics, pages 345–347. ACL, 1990.
Markus Forsberg and Aarne Ranta. Functional Mor-
phology. In Proceedings of the Ninth ACM SIG-
PLAN International Conference on Functional
Programming, ICFP 2004, pages 213–223. ACM
Press, 2004.
Harald Hammarstr¨om and Aarne Ranta. Cardinal
Numerals Revisited in GF. In Workshop on Nu-
merals in the World’s Languages, Leipzig, Ger-
many, 2004. Dept. of Linguistics Max Planck In-
stitute for Evolutionary Anthropology.
G´erard Huet. A Functional Toolkit for Morphologi-
cal and Phonological Processing, Application to a
Sanskrit Tagger. Journal of Functional Program-
ming, 15:573–614, 2005.
G´erard Huet. Sanskrit Site, 2006. http://
sanskrit.inria.fr/.
D. H. Hymes. Lexicostatistics so far. Current An-
thropology, 1:3–44, 1960.
Janna Khegai and Aarne Ranta. Building and Using
a Russian Resource Grammar in GF. In Intelli-
gent Text Processing and Computational Linguis-
tics (CICLing-2004), pages 38–41, Korea, 2004.
E. Othman, K. Shaalan, and A. Rafea. A Chart
Parser for Analyzing Modern Standard Arabic
Sentence. In Proceedings of the MT Summit
IX Workshop on Machine Translation for Semitic
Languages, pages 37–44, 2003.
Aarne Ranta. Grammatical Framework: A Type-
theoretical Grammar Formalism. Journal of
Functional Programming, 14:145–189, 2004.
Jan Rets¨o. State, Determination and Definiteness in
Arabic: A Reconsideration. Orientalia Suecana,
33–35:341–346, 1984.
Khaled F. Shaalan. Arabic GramCheck: a grammar
checker for Arabic: Research Articles. Software -
Pracice and Experience, 35(7):643–665, 2005.
Otakar Smrˇz. Functional Arabic Morphology. For-
mal System and Implementation. PhD thesis,
Charles University in Prague, in prep.
</reference>
<page confidence="0.907425">
16
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.680021">
<title confidence="0.999394">Implementation of the Arabic Numerals and their Syntax in GF</title>
<author confidence="0.999301">Ali</author>
<affiliation confidence="0.995334">SAP Research</affiliation>
<address confidence="0.8473905">Blumenbergplatz 9000 St. Gallen,</address>
<email confidence="0.999747">ali.dada@sap.com</email>
<abstract confidence="0.997719809523809">The numeral system of Arabic is rich in its morphosyntactic variety yet suffers from the lack of a good computational resource that describes it in a reusable way. This implies that applications that require the use of rules of the Arabic numeral system have to either reimplement them each time, which implies wasted resources, or use simplified, imprecise rules that result in low quality applications. A solution has been devised with Grammatical Framework (GF) to use language constructs and grammars as libraries that can be written once and reused in various applications. In this paper, we describe our implementation of the Arabic numeral system, as an example of a bigger implementation of a grammar library for Arabic. We show that users can reuse our system by accessing a simple language-independent API rule.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Kenneth Beesley</author>
</authors>
<title>Finite-State Morphological Analysis and Generation of Arabic at Xerox Research: Status and Plans in</title>
<date>2001</date>
<booktitle>In Workshop Proceedings on Arabic Language Processing: Status and Prospects,</booktitle>
<pages>1--8</pages>
<publisher>ACL.</publisher>
<location>Toulouse,</location>
<contexts>
<context position="22817" citStr="Beesley, 2001" startWordPosition="4171" endWordPosition="4172">enitive constructions. Thus, after applying all the “correction” functions above, we get the following implementation of the noun determination rule: oper agrP3 : Species -&gt; Gender -&gt; Number -&gt; PerGenNum= \h,g,n -&gt; case &lt;h,n&gt; of { &lt;NoHum,Pl&gt; =&gt; Per3 Fem Sg; _ =&gt; Per3 g n }; The agrP3 helping function tests for the case when the species and number are nonhuman and plural. This case is treated in agreement as the feminine singular. 4 Related Work A large-scale implementation of the Arabic morphological system is the Xerox Arabic Morphological Analyzer and Generator (Beesley and Karttunen, 2000; Beesley, 2001). This system is developed using only the Xerox Finite State Technology tools (Beesley and Karttunen, 2003) from which an Arabic Finite State Lexical Transducer is written. A research version is available for online testing, and an expanded and updated version can be obtained with a commercial license. Another notable computational model of the Arabic morphology is Tim Buckwalter’s Arabic Morphological Analyzer (Buckwalter, 2004b,a). Buckwalter’s analyzer parses Arabic words and gives all their possible morphological interpretations, each solution having a unique lemma ID, different word const</context>
</contexts>
<marker>Beesley, 2001</marker>
<rawString>Kenneth Beesley. Finite-State Morphological Analysis and Generation of Arabic at Xerox Research: Status and Plans in 2001. In Workshop Proceedings on Arabic Language Processing: Status and Prospects, pages 1–8, Toulouse, 2001. ACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kenneth Beesley</author>
<author>Lauri Karttunen</author>
</authors>
<title>Finite-state non-concatenative morphotactics.</title>
<date>2000</date>
<booktitle>In Proceedings of the Fifth Workshop of the ACL SIG in Computational Phonology,</booktitle>
<pages>1--12</pages>
<contexts>
<context position="22801" citStr="Beesley and Karttunen, 2000" startWordPosition="4167" endWordPosition="4170">takes care of the id. ¯afah genitive constructions. Thus, after applying all the “correction” functions above, we get the following implementation of the noun determination rule: oper agrP3 : Species -&gt; Gender -&gt; Number -&gt; PerGenNum= \h,g,n -&gt; case &lt;h,n&gt; of { &lt;NoHum,Pl&gt; =&gt; Per3 Fem Sg; _ =&gt; Per3 g n }; The agrP3 helping function tests for the case when the species and number are nonhuman and plural. This case is treated in agreement as the feminine singular. 4 Related Work A large-scale implementation of the Arabic morphological system is the Xerox Arabic Morphological Analyzer and Generator (Beesley and Karttunen, 2000; Beesley, 2001). This system is developed using only the Xerox Finite State Technology tools (Beesley and Karttunen, 2003) from which an Arabic Finite State Lexical Transducer is written. A research version is available for online testing, and an expanded and updated version can be obtained with a commercial license. Another notable computational model of the Arabic morphology is Tim Buckwalter’s Arabic Morphological Analyzer (Buckwalter, 2004b,a). Buckwalter’s analyzer parses Arabic words and gives all their possible morphological interpretations, each solution having a unique lemma ID, diff</context>
</contexts>
<marker>Beesley, Karttunen, 2000</marker>
<rawString>Kenneth Beesley and Lauri Karttunen. Finite-state non-concatenative morphotactics. In Proceedings of the Fifth Workshop of the ACL SIG in Computational Phonology, pages 1–12, 2000.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kenneth R Beesley</author>
<author>Lauri Karttunen</author>
</authors>
<title>Finite State Morphology.</title>
<date>2003</date>
<booktitle>CSLI Studies in Computational Linguistics. CSLI Publications,</booktitle>
<location>Stanford, California,</location>
<contexts>
<context position="22924" citStr="Beesley and Karttunen, 2003" startWordPosition="4186" endWordPosition="4189">following implementation of the noun determination rule: oper agrP3 : Species -&gt; Gender -&gt; Number -&gt; PerGenNum= \h,g,n -&gt; case &lt;h,n&gt; of { &lt;NoHum,Pl&gt; =&gt; Per3 Fem Sg; _ =&gt; Per3 g n }; The agrP3 helping function tests for the case when the species and number are nonhuman and plural. This case is treated in agreement as the feminine singular. 4 Related Work A large-scale implementation of the Arabic morphological system is the Xerox Arabic Morphological Analyzer and Generator (Beesley and Karttunen, 2000; Beesley, 2001). This system is developed using only the Xerox Finite State Technology tools (Beesley and Karttunen, 2003) from which an Arabic Finite State Lexical Transducer is written. A research version is available for online testing, and an expanded and updated version can be obtained with a commercial license. Another notable computational model of the Arabic morphology is Tim Buckwalter’s Arabic Morphological Analyzer (Buckwalter, 2004b,a). Buckwalter’s analyzer parses Arabic words and gives all their possible morphological interpretations, each solution having a unique lemma ID, different word constituents, the part-of-speech, and English glosses. Other works that also use functional languages for the tr</context>
</contexts>
<marker>Beesley, Karttunen, 2003</marker>
<rawString>Kenneth R. Beesley and Lauri Karttunen. Finite State Morphology. CSLI Studies in Computational Linguistics. CSLI Publications, Stanford, California, 2003.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Tim Buckwalter</author>
</authors>
<title>Arabic transliteration,</title>
<date>2003</date>
<note>http: //www.qamus.org/transliteration.htm.</note>
<contexts>
<context position="12837" citStr="Buckwalter (2003)" startWordPosition="2252" endWordPosition="2253">rs get in the general case inflected in gender, state, and case. The DForm is used to calculate both the digit and its multiple of ten. We write functions that form the inflection tables of the digits: one function for numeral 2 (num2, not shown here) and one function for the rest of the digits, including 1 (num1_10, shown below). 1 oper num1_10 : Str -&gt; { s : DForm =&gt; Gender =&gt; State =&gt; Case =&gt; Str } = \xams -&gt; let xamsa = xams + &amp;quot;ap&amp;quot; in { s= table { unit =&gt; table { Masc =&gt; \\s,c =&gt; (sing xams) ! s ! c; 1Our grammar files are in unicode, but the example codes shown here are written using the Buckwalter (2003) transliteration with a few changes that suit our needs. We note our use of ‘c’ to denote the sayn. Fem =&gt; \\s,c =&gt; Al ! s + xamsa + dec1sg ! s ! c }; ten =&gt; \\_,s,c =&gt; Al ! s + xams + m_pl ! Indef ! c } }; Note the following GF syntax notations: The keyword oper defines a GF function. An oper judgment includes the name of the defined operation (e.g. num1_10 in the example above), its type (e.g. Str -&gt; { s : DForm =&gt; Gender =&gt; State =&gt; Case =&gt; Str }), and an expression defining it (everything after the = operator). As for the syntax of the defining expression, notice the lambda abstraction for</context>
</contexts>
<marker>Buckwalter, 2003</marker>
<rawString>Tim Buckwalter. Arabic transliteration, 2003. http: //www.qamus.org/transliteration.htm.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Tim Buckwalter</author>
</authors>
<title>Issues in Arabic Orthography and Morphology Analysis.</title>
<booktitle>In Proceedings of the COLING 2004 Workshop on Computational Approaches to Arabic Script-based Languages,</booktitle>
<pages>31--34</pages>
<marker>Buckwalter, </marker>
<rawString>Tim Buckwalter. Issues in Arabic Orthography and Morphology Analysis. In Proceedings of the COLING 2004 Workshop on Computational Approaches to Arabic Script-based Languages, pages 31–34, 2004a.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Tim Buckwalter</author>
</authors>
<title>Buckwalter Arabic Morphological Analyzer Version 2.0.</title>
<booktitle>LDC catalog number LDC2004L02, ISBN</booktitle>
<pages>1--58563</pages>
<marker>Buckwalter, </marker>
<rawString>Tim Buckwalter. Buckwalter Arabic Morphological Analyzer Version 2.0. LDC catalog number LDC2004L02, ISBN 1-58563-324-0, 2004b.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ali Dada</author>
<author>Aarne Ranta</author>
</authors>
<title>Implementing an Open Source Arabic Resource Grammar</title>
<date>2007</date>
<booktitle>Perspectives on Arabic Linguistics, volume XX. John Benjamins,</booktitle>
<editor>in GF. In Mustafa Mughazy, editor,</editor>
<contexts>
<context position="3220" citStr="Dada and Ranta, 2007" startWordPosition="517" endWordPosition="520">which should be taken care of when translating “new messages” into Arabic. The aforementioned details should not be the responsibility of the application programmer, and hav1 message ✏✔é❐☛ ✏ é❥☛❏ ✏➥ marker), then accusative (singular) from eleven 9 Proceedings of the 5th Workshop on Important Unresolved Matters, pages 9–16, Prague, Czech Republic, June 2007. c�2007 Association for Computational Linguistics ing translators do this work over and over again for each application can be costly and lead to repeated work and/or poor results. 1.2 Solution and Contributions We reviewed in other works (Dada and Ranta, 2007) an approach that addresses problems in language technology similar but not limited to the above. We applied this approach to Arabic, thus developing a resource grammar for Arabic in which we implement rules that cover the orthography, morphology, and syntax. In short, this approach is based on developing libraries of natural language constructs and rules, which can be used by an application programmer who is not knowledgeable in a specific language. The core programming language is Grammatical Framework (GF) (Ranta, 2004). The language library, called a resource grammar (Khegai and Ranta, 200</context>
</contexts>
<marker>Dada, Ranta, 2007</marker>
<rawString>Ali Dada and Aarne Ranta. Implementing an Open Source Arabic Resource Grammar in GF. In Mustafa Mughazy, editor, Perspectives on Arabic Linguistics, volume XX. John Benjamins, 2007.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hisham El-Shishiny</author>
</authors>
<title>A formal description of Arabic syntax in definite clause grammar.</title>
<date>1990</date>
<booktitle>In Proceedings of the 13th Conference on Computational Linguistics,</booktitle>
<pages>345--347</pages>
<publisher>ACL,</publisher>
<contexts>
<context position="24380" citStr="El-Shishiny (1990)" startWordPosition="4405" endWordPosition="4406"> of Arabic shares similarities with that of Functional Morphology. Both approaches use typed languages, making use of finite algebraic datatypes to define linguistic categories. Both languages are functional, so the approaches use functions to realize linguistic abstractions. A large-scale implementation of this approach, in which a typed functional programming language is used to build a morphology, is Huet’s Sanskrit dictionary and morphological system (Huet, 2006) upon which the Zen computational linguistics toolkit is based (Huet, 2005). Of the available works in Arabic syntax, we mention El-Shishiny (1990) who developed a formal description of Arabic syntax in Definite Clause Grammar. We also make note of the work in Othman et al. (2003), where the authors describe a parser they wrote in Prolog to parse and disambiguate the Arabic sentence. Shaalan (2005) builds on this work to develop a syntax-based grammar checker for Arabic called Arabic GramCheck. 5 Discussion Our implementation of the Arabic numerals covers all natural numbers in the range 1-999,999. This was accomplished by implementing only a few functions, thanks to the repetitive way in which numerals are composed to form larger numera</context>
</contexts>
<marker>El-Shishiny, 1990</marker>
<rawString>Hisham El-Shishiny. A formal description of Arabic syntax in definite clause grammar. In Proceedings of the 13th Conference on Computational Linguistics, pages 345–347. ACL, 1990.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Markus Forsberg</author>
<author>Aarne Ranta</author>
</authors>
<title>Functional Morphology.</title>
<date>2004</date>
<booktitle>In Proceedings of the Ninth ACM SIGPLAN International Conference on Functional Programming, ICFP 2004,</booktitle>
<pages>213--223</pages>
<publisher>ACM Press,</publisher>
<contexts>
<context position="23661" citStr="Forsberg and Ranta, 2004" startWordPosition="4299" endWordPosition="4302">ting, and an expanded and updated version can be obtained with a commercial license. Another notable computational model of the Arabic morphology is Tim Buckwalter’s Arabic Morphological Analyzer (Buckwalter, 2004b,a). Buckwalter’s analyzer parses Arabic words and gives all their possible morphological interpretations, each solution having a unique lemma ID, different word constituents, the part-of-speech, and English glosses. Other works that also use functional languages for the treatment of Arabic include a morphology system by Smrˇz (in prep.). This work is based on Functional Morphology (Forsberg and Ranta, 2004), a methodology for building morphological systems in the Haskell programming language. Our treatment of Arabic shares similarities with that of Functional Morphology. Both approaches use typed languages, making use of finite algebraic datatypes to define linguistic categories. Both languages are functional, so the approaches use functions to realize linguistic abstractions. A large-scale implementation of this approach, in which a typed functional programming language is used to build a morphology, is Huet’s Sanskrit dictionary and morphological system (Huet, 2006) upon which the Zen computat</context>
</contexts>
<marker>Forsberg, Ranta, 2004</marker>
<rawString>Markus Forsberg and Aarne Ranta. Functional Morphology. In Proceedings of the Ninth ACM SIGPLAN International Conference on Functional Programming, ICFP 2004, pages 213–223. ACM Press, 2004.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Harald Hammarstr¨om</author>
<author>Aarne Ranta</author>
</authors>
<title>Cardinal Numerals Revisited in GF.</title>
<date>2004</date>
<booktitle>In Workshop on Numerals in the World’s Languages,</booktitle>
<institution>Dept. of Linguistics Max Planck Institute for Evolutionary Anthropology.</institution>
<location>Leipzig, Germany,</location>
<marker>Hammarstr¨om, Ranta, 2004</marker>
<rawString>Harald Hammarstr¨om and Aarne Ranta. Cardinal Numerals Revisited in GF. In Workshop on Numerals in the World’s Languages, Leipzig, Germany, 2004. Dept. of Linguistics Max Planck Institute for Evolutionary Anthropology.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G´erard Huet</author>
</authors>
<title>A Functional Toolkit for Morphological and Phonological Processing, Application to a Sanskrit Tagger.</title>
<date>2005</date>
<journal>Journal of Functional Programming,</journal>
<volume>15</volume>
<contexts>
<context position="24308" citStr="Huet, 2005" startWordPosition="4393" endWordPosition="4394">ogical systems in the Haskell programming language. Our treatment of Arabic shares similarities with that of Functional Morphology. Both approaches use typed languages, making use of finite algebraic datatypes to define linguistic categories. Both languages are functional, so the approaches use functions to realize linguistic abstractions. A large-scale implementation of this approach, in which a typed functional programming language is used to build a morphology, is Huet’s Sanskrit dictionary and morphological system (Huet, 2006) upon which the Zen computational linguistics toolkit is based (Huet, 2005). Of the available works in Arabic syntax, we mention El-Shishiny (1990) who developed a formal description of Arabic syntax in Definite Clause Grammar. We also make note of the work in Othman et al. (2003), where the authors describe a parser they wrote in Prolog to parse and disambiguate the Arabic sentence. Shaalan (2005) builds on this work to develop a syntax-based grammar checker for Arabic called Arabic GramCheck. 5 Discussion Our implementation of the Arabic numerals covers all natural numbers in the range 1-999,999. This was accomplished by implementing only a few functions, thanks to</context>
</contexts>
<marker>Huet, 2005</marker>
<rawString>G´erard Huet. A Functional Toolkit for Morphological and Phonological Processing, Application to a Sanskrit Tagger. Journal of Functional Programming, 15:573–614, 2005.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G´erard Huet</author>
</authors>
<title>Sanskrit Site,</title>
<date>2006</date>
<note>http:// sanskrit.inria.fr/.</note>
<contexts>
<context position="24233" citStr="Huet, 2006" startWordPosition="4382" endWordPosition="4383">l Morphology (Forsberg and Ranta, 2004), a methodology for building morphological systems in the Haskell programming language. Our treatment of Arabic shares similarities with that of Functional Morphology. Both approaches use typed languages, making use of finite algebraic datatypes to define linguistic categories. Both languages are functional, so the approaches use functions to realize linguistic abstractions. A large-scale implementation of this approach, in which a typed functional programming language is used to build a morphology, is Huet’s Sanskrit dictionary and morphological system (Huet, 2006) upon which the Zen computational linguistics toolkit is based (Huet, 2005). Of the available works in Arabic syntax, we mention El-Shishiny (1990) who developed a formal description of Arabic syntax in Definite Clause Grammar. We also make note of the work in Othman et al. (2003), where the authors describe a parser they wrote in Prolog to parse and disambiguate the Arabic sentence. Shaalan (2005) builds on this work to develop a syntax-based grammar checker for Arabic called Arabic GramCheck. 5 Discussion Our implementation of the Arabic numerals covers all natural numbers in the range 1-999</context>
</contexts>
<marker>Huet, 2006</marker>
<rawString>G´erard Huet. Sanskrit Site, 2006. http:// sanskrit.inria.fr/.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D H Hymes</author>
</authors>
<title>Lexicostatistics so far.</title>
<date>1960</date>
<journal>Current Anthropology,</journal>
<volume>1</volume>
<contexts>
<context position="4311" citStr="Hymes, 1960" startWordPosition="696" endWordPosition="697">guage is Grammatical Framework (GF) (Ranta, 2004). The language library, called a resource grammar (Khegai and Ranta, 2004) and comprising the linguistic rules, can be reused in applications through an Application Programming Interface (API) by programmers that are unaware of the details of the specific natural language. Such a programmer uses a resource grammar assuming it will take care of morphological and syntactic rules. So far, we have implemented significant parts of the Arabic morphology, syntax, orthographic rules, and provided a sample lexicon of 300 words based on the Swadesh list (Hymes, 1960). In this paper, we only describe part of the work, namely the numeral system of Arabic and its syntax. In the next section we elaborate on the approach, the programming language that implements it, and on Resource Grammars. 2 GF and the Resource Library GF is a special-purpose functional programming language for defining grammars of (formal or natural) languages. A common API and resource grammars for various natural languages accompany GF with a purpose similar to that of libraries in general programming languages: implementing pieces of code that can be reused by the application programmer.</context>
</contexts>
<marker>Hymes, 1960</marker>
<rawString>D. H. Hymes. Lexicostatistics so far. Current Anthropology, 1:3–44, 1960.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Janna Khegai</author>
<author>Aarne Ranta</author>
</authors>
<title>Building and Using a Russian Resource Grammar in GF.</title>
<date>2004</date>
<booktitle>In Intelligent Text Processing and Computational Linguistics (CICLing-2004),</booktitle>
<pages>38--41</pages>
<contexts>
<context position="3822" citStr="Khegai and Ranta, 2004" startWordPosition="615" endWordPosition="618">Dada and Ranta, 2007) an approach that addresses problems in language technology similar but not limited to the above. We applied this approach to Arabic, thus developing a resource grammar for Arabic in which we implement rules that cover the orthography, morphology, and syntax. In short, this approach is based on developing libraries of natural language constructs and rules, which can be used by an application programmer who is not knowledgeable in a specific language. The core programming language is Grammatical Framework (GF) (Ranta, 2004). The language library, called a resource grammar (Khegai and Ranta, 2004) and comprising the linguistic rules, can be reused in applications through an Application Programming Interface (API) by programmers that are unaware of the details of the specific natural language. Such a programmer uses a resource grammar assuming it will take care of morphological and syntactic rules. So far, we have implemented significant parts of the Arabic morphology, syntax, orthographic rules, and provided a sample lexicon of 300 words based on the Swadesh list (Hymes, 1960). In this paper, we only describe part of the work, namely the numeral system of Arabic and its syntax. In the </context>
</contexts>
<marker>Khegai, Ranta, 2004</marker>
<rawString>Janna Khegai and Aarne Ranta. Building and Using a Russian Resource Grammar in GF. In Intelligent Text Processing and Computational Linguistics (CICLing-2004), pages 38–41, Korea, 2004.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Othman</author>
<author>K Shaalan</author>
<author>A Rafea</author>
</authors>
<title>A Chart Parser for Analyzing Modern Standard Arabic Sentence.</title>
<date>2003</date>
<booktitle>In Proceedings of the MT Summit IX Workshop on Machine Translation for Semitic Languages,</booktitle>
<pages>37--44</pages>
<contexts>
<context position="24514" citStr="Othman et al. (2003)" startWordPosition="4429" endWordPosition="4432">ic datatypes to define linguistic categories. Both languages are functional, so the approaches use functions to realize linguistic abstractions. A large-scale implementation of this approach, in which a typed functional programming language is used to build a morphology, is Huet’s Sanskrit dictionary and morphological system (Huet, 2006) upon which the Zen computational linguistics toolkit is based (Huet, 2005). Of the available works in Arabic syntax, we mention El-Shishiny (1990) who developed a formal description of Arabic syntax in Definite Clause Grammar. We also make note of the work in Othman et al. (2003), where the authors describe a parser they wrote in Prolog to parse and disambiguate the Arabic sentence. Shaalan (2005) builds on this work to develop a syntax-based grammar checker for Arabic called Arabic GramCheck. 5 Discussion Our implementation of the Arabic numerals covers all natural numbers in the range 1-999,999. This was accomplished by implementing only a few functions, thanks to the repetitive way in which numerals are composed to form larger numerals. As for performance, Arabic grammars are slower to compile than comparable GF grammars of other languages, partly because of the ad</context>
</contexts>
<marker>Othman, Shaalan, Rafea, 2003</marker>
<rawString>E. Othman, K. Shaalan, and A. Rafea. A Chart Parser for Analyzing Modern Standard Arabic Sentence. In Proceedings of the MT Summit IX Workshop on Machine Translation for Semitic Languages, pages 37–44, 2003.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Aarne Ranta</author>
</authors>
<title>Grammatical Framework: A Typetheoretical Grammar Formalism.</title>
<date>2004</date>
<journal>Journal of Functional Programming,</journal>
<volume>14</volume>
<contexts>
<context position="3748" citStr="Ranta, 2004" startWordPosition="605" endWordPosition="606">ts. 1.2 Solution and Contributions We reviewed in other works (Dada and Ranta, 2007) an approach that addresses problems in language technology similar but not limited to the above. We applied this approach to Arabic, thus developing a resource grammar for Arabic in which we implement rules that cover the orthography, morphology, and syntax. In short, this approach is based on developing libraries of natural language constructs and rules, which can be used by an application programmer who is not knowledgeable in a specific language. The core programming language is Grammatical Framework (GF) (Ranta, 2004). The language library, called a resource grammar (Khegai and Ranta, 2004) and comprising the linguistic rules, can be reused in applications through an Application Programming Interface (API) by programmers that are unaware of the details of the specific natural language. Such a programmer uses a resource grammar assuming it will take care of morphological and syntactic rules. So far, we have implemented significant parts of the Arabic morphology, syntax, orthographic rules, and provided a sample lexicon of 300 words based on the Swadesh list (Hymes, 1960). In this paper, we only describe par</context>
<context position="5784" citStr="Ranta (2004)" startWordPosition="932" endWordPosition="933">oncrete syntax). This latter involves word order, agreement, case inflection, etc. This distinction can abstract over language-dependent features and enables an application programmer to write sentences in a language only by describing their abstract syntax trees or by translating them from another language, preferably in a limited domain. The abstract representation would then act as interlingua. 3 The Numerals We give here an explanation of our treatment of the Arabic number system, namely the numerals and their counted nouns. Our implementation is based on the work done by Hammarstr¨om and Ranta (2004) in defining the cardinal numerals in GF. We will gradually give the governing grammar rules along with their our formal description in GF. The numbers from one to nineteen in Arabic have two forms, a masculine form and a feminine one, so in general we will take gender to be one of the inflecting attributes of numbers. Which of these two forms to use depends on the counted noun and the counting number: • The numerals 1 and 2 show gender agreement with the counted noun (their grammatical role is an adjective modifying this noun). • Numerals 3-10 show gender polarity with the counted noun, so a </context>
<context position="23661" citStr="Ranta, 2004" startWordPosition="4301" endWordPosition="4302">expanded and updated version can be obtained with a commercial license. Another notable computational model of the Arabic morphology is Tim Buckwalter’s Arabic Morphological Analyzer (Buckwalter, 2004b,a). Buckwalter’s analyzer parses Arabic words and gives all their possible morphological interpretations, each solution having a unique lemma ID, different word constituents, the part-of-speech, and English glosses. Other works that also use functional languages for the treatment of Arabic include a morphology system by Smrˇz (in prep.). This work is based on Functional Morphology (Forsberg and Ranta, 2004), a methodology for building morphological systems in the Haskell programming language. Our treatment of Arabic shares similarities with that of Functional Morphology. Both approaches use typed languages, making use of finite algebraic datatypes to define linguistic categories. Both languages are functional, so the approaches use functions to realize linguistic abstractions. A large-scale implementation of this approach, in which a typed functional programming language is used to build a morphology, is Huet’s Sanskrit dictionary and morphological system (Huet, 2006) upon which the Zen computat</context>
</contexts>
<marker>Ranta, 2004</marker>
<rawString>Aarne Ranta. Grammatical Framework: A Typetheoretical Grammar Formalism. Journal of Functional Programming, 14:145–189, 2004.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jan Rets¨o State</author>
</authors>
<title>Determination and Definiteness in Arabic: A Reconsideration. Orientalia Suecana,</title>
<date>1984</date>
<location>33–35:341–346,</location>
<marker>State, 1984</marker>
<rawString>Jan Rets¨o. State, Determination and Definiteness in Arabic: A Reconsideration. Orientalia Suecana, 33–35:341–346, 1984.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Khaled F Shaalan</author>
</authors>
<title>Arabic GramCheck: a grammar checker for Arabic: Research Articles.</title>
<date>2005</date>
<journal>Software -Pracice and Experience,</journal>
<volume>35</volume>
<issue>7</issue>
<contexts>
<context position="24634" citStr="Shaalan (2005)" startWordPosition="4450" endWordPosition="4451">stic abstractions. A large-scale implementation of this approach, in which a typed functional programming language is used to build a morphology, is Huet’s Sanskrit dictionary and morphological system (Huet, 2006) upon which the Zen computational linguistics toolkit is based (Huet, 2005). Of the available works in Arabic syntax, we mention El-Shishiny (1990) who developed a formal description of Arabic syntax in Definite Clause Grammar. We also make note of the work in Othman et al. (2003), where the authors describe a parser they wrote in Prolog to parse and disambiguate the Arabic sentence. Shaalan (2005) builds on this work to develop a syntax-based grammar checker for Arabic called Arabic GramCheck. 5 Discussion Our implementation of the Arabic numerals covers all natural numbers in the range 1-999,999. This was accomplished by implementing only a few functions, thanks to the repetitive way in which numerals are composed to form larger numerals. As for performance, Arabic grammars are slower to compile than comparable GF grammars of other languages, partly because of the additional complexity of Arabic and partly because of the general way in which our lexicon is specified. Our implementatio</context>
</contexts>
<marker>Shaalan, 2005</marker>
<rawString>Khaled F. Shaalan. Arabic GramCheck: a grammar checker for Arabic: Research Articles. Software -Pracice and Experience, 35(7):643–665, 2005.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Otakar Smrˇz</author>
</authors>
<title>Functional Arabic Morphology. Formal System and Implementation.</title>
<tech>PhD thesis,</tech>
<institution>Charles University</institution>
<note>in Prague, in prep.</note>
<marker>Smrˇz, </marker>
<rawString>Otakar Smrˇz. Functional Arabic Morphology. Formal System and Implementation. PhD thesis, Charles University in Prague, in prep.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>