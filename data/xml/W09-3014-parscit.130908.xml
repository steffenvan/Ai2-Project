<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000004">
<title confidence="0.952326">
Schema and Variation: Digitizing Printed Dictionaries
</title>
<author confidence="0.994537">
Christian Schneiker and Dietmar Seipel
</author>
<affiliation confidence="0.9979225">
Department of Computer Science
University of W¨urzburg, Germany
</affiliation>
<email confidence="0.985024">
{schneiker, seipel}@informatik.uni-wuerzburg.de
</email>
<author confidence="0.998751">
Werner Wegstein
</author>
<affiliation confidence="0.9980005">
Department of Computational Philology
University of W¨urzburg, Germany
</affiliation>
<email confidence="0.763898">
werner.wegstein@uni-wuerzburg.de
</email>
<sectionHeader confidence="0.992542" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.998786857142857">
In this paper we show how to exploit typo-
graphical and textual features of raw text for
creating a fine–grain XML Schema Markup
with special focus on capturing linguistic vari-
ation in dictionaries. We use declarative pro-
gramming techniques and context–free gram-
mars implemented in PROLOG.
</bodyText>
<sectionHeader confidence="0.998787" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999939652173913">
In 1996, Cambridge University Press proudly pre-
sented an outstanding milestone in electronic publish-
ing: Samuel Johnson: A Dictionary of the English Lan-
guage on CD–ROM, edited by Anne McDermott; con-
taining the First Edition 1755 and the significantly re-
vised Fourth Edition 1773 (McDermott, 1996). “The
Dictionary is not only the first great work of English
lexicography but also a literary and historical resource
of immense value, and this electronic edition has been
prepared to the highest standards by a team of scholars
at the University of Birmingham.“ (Cambridge Univer-
sity Press Catalogue, 2009)
The announcement highlighted all the key charac-
teristics of electronic texts: accessability, complete-
ness, use of multi–media environment, searchability
and highest standards applied by scholars, i.e. philolog-
ical reliability and precision, wrapped in leading edge
technology (G¨artner/Wisbey, 1974). Today, more than
a decade and at least one electronic product life-cycle
later, the CD is still on sale – as far as we could find
out unchanged – and has not lost anything of its former
value.
In the context of digitizing the cultural heritage there
is even a strong and growing demand for digitizing
research tools like dictionaries (cf., e.g., Gallica Dig-
ital Library Charter/Chapter: Time period covered).
But, in the field of electronic text editing, requirements
grow rapidly and standards develop fast. The users
of electronic texts today want to search not only for
words, phrases, headwords, quotations, and authors of
sources. They would like to get access to and search
for variant forms, grammatical categories, usage indi-
cators and the structuring of the description of word
senses, etc., not only in single dictionaries, but – per-
haps using a grid environment – in fully connected
dictionary networks (cf. the dictionary search, possi-
ble within the Trier Dictionary Net and as a TextGrid
feature). In the context of these new user scenarios,
possibly grid–based, usable for collabortive research
and secured safely in longterm archive structures, we
try to put fine–grain encoding ideas into practise using
Joachim Heinrich Campe’s dictionary of the German
Language as testbed.
This is one of the reasons why TEXTGRID (2009),
the first grid project in German eHumanities, funded
by the Federal Ministry of Education and Research,
chose the Campe Dictionary (1811): 6 volumes with
altogether about 6.000 pages and about 140.000 en-
tries, published between 1807 and 1813 as one testbed
for their TEXTGRID Lab, a Virtual Research Library.
It entails a grid–enabled workbench that will process,
analyse, annotate, edit and publish text data for aca-
demic research and TEXTGRIDRep, a grid repository
for long–term storage. Electronic dictionaries are used
in a wide field of new research areas such as the grow-
ing community of eHumanities. One of the main
projects for the German humanities is the community
project TEXTGRID, which aims to develop a platform
for the collaborative editing, annotation, analysis and
publication of texts (TEXTGRID, 2009). According to
the TEI Consortium (2009), large text corpora from
different epochs have to be parsed and annotated for
performing further analysis, such as building a meta–
lemma list for the project interdependencies between
language and genomes.
In general, there are the following important prereq-
uisites for state of the art text encoding in the Human-
ities. The encoding should use international standards,
especially XML and related standards, e.g., TEI P5 with
</bodyText>
<page confidence="0.995647">
82
</page>
<note confidence="0.9967905">
Proceedings of the Third Linguistic Annotation Workshop, ACL-IJCNLP 2009, pages 82–89,
Suntec, Singapore, 6-7 August 2009. c�2009 ACL and AFNLP
</note>
<bodyText confidence="0.989918744680851">
XML Schema. Also the combination of text and image
is necessay. The text capture should aim at reference
quality for the encoded text. A fine–grain encoding
preserving lexicographical and textual variation with-
out blurring (distorting) the content modelling of XML
elements is helpful. Finally, a TEI schema (Relax NG)
that is flexible enough to encode variation in lexico-
graphical and textual structures without loosening the
grip of the constraints is necessary to define clear cut
element content.
In this paper, we present an annotation workflow us-
ing declarative programming techniques for fine–grain
text markup, and we apply it for retro–digitizing a
printed version of the Campe Dictionary. Our pars-
ing and annotation toolkit is based on SWI–PROLOG
and the XML query and transformation language FN-
QUERY (Seipel, 2002), which is implemented in SWI–
PROLOG. Using PROLOG technology for parsing and
annotating is common in natural language process-
ing. It has, e.g., been used within the Jean Paul
project at the Berlin–Brandenburg Academy of Sci-
ences (Seipel et al., 2005), where XML transforma-
tions based on FNQUERY turned out to be easier to
write than XSLT transformations. A frequently applied
method in PROLOG programming is to find the proper
level of abstraction and to write suitable macros for fre-
quently occurring patterns in the code; PROLOG even
allows to design dedicated special–purpose languages
(O’Keefe, 1990). Definite clause grammars have been
developed as an abstraction for parsing; this has, e.g.,
been very successful for parsing controlled natural lan-
guages (Fuchs et al., 1994; Fuchs et al., 1995; Schwit-
ter, 2008).
Structure of the Paper. The rest of this paper is
organized as follows: In Section 2, we sketch the
worklflow for capturing text from the printed text cor-
pus and the semi–automatic error correction to produce
a source file for our parsing and annotation toolkit. Sec-
tion 3 gives an overview of the structure of the different
entries in the dictionary; we will explain this structure
with the lemma ”Der Aal”, and we will examplify the
variation of entries. The next section shows the annota-
tion of the different lemma variants and the parsing of
nouns and verbs. In Section 5, we describe the parsing
and annotation of the sense block with citations and ref-
erences, punctuation, linebreaks and hyphenation. The
last section gives a conclusion of our work.
</bodyText>
<sectionHeader confidence="0.88626" genericHeader="method">
2 The Campe Workflow for Text Capture
</sectionHeader>
<bodyText confidence="0.990767533333333">
Since the Campe Dictionary was written in the early
19th century, the text could not be captured with mod-
ern methods of optical character recognition (OCR).
Thus, in a first step, the whole corpus had to be
doubled–keyed in China. This could also avoid un-
consciously corrected spelling variants in old German
text, which is frequently done by native speakers. Fig-
ure 1 shows the typographical layout of an entry in the
Campe Dictionary.
The second step in the text capture workflow was
the correction of illegible characters according to the
context, as well the manual correction of printing er-
rors provided by the publishers. For providing an effi-
cient and easy–to–undo workflow system for these cor-
rections, we decided to use a semi–automatic process:
corrections made by human experts could be repeated
on the whole context by using regular expressions in
a standard POSIX–Regex environment, and automatic
corrections could be done by processing the workflow
logfiles of other volumes of the Campe Dictionary.
One of the main concerns in this preprocessing steps
was the pre–annotation of abbreviatons used by the au-
thor such as etc., s. a. and z. b. or even abbreviated
author names like C. for Campe. These had to be
checked manually and pre–annotated by a parser writ-
ten in PROLOG, which can also recognize named enti-
ties.
After logging all these corrections in UNIX diff files,
the base file for the text conversion into XML could be
generated.
</bodyText>
<sectionHeader confidence="0.968171" genericHeader="method">
3 The Structure of Entries
</sectionHeader>
<bodyText confidence="0.999995611111111">
Within the parsing process, the only annotations avail-
able so far for structure recognition were the declara-
tion of the different font sizes used by Joachim Hein-
rich Campe, the numbering of the line and page breaks
in the dictionary, and paragraphs; thus, we found a very
limited XML structure in the source file which we used
for the first basic transformaions.
In most available dictionaries, each entry is encap-
sulated in its own paragraph, and thus, it could be eas-
ily detected. In the following preannotated example,
which is the result of the double key process, an en-
try is annotated with paragraph and is followed by an
element W_2, which shows the lemma of the entry in
a larger font; recognizing both elements is necessary,
because there could exist other paragraph elements
which do not represent entries. This preliminary struc-
ture, which is not yet according to TEI, is used as the
starting point for the annotation process.
</bodyText>
<equation confidence="0.950657">
&lt;paragraph&gt;
&lt;W_2&gt;Der Aal&lt;/W_2&gt;,
&lt;W_1&gt;
des -- es, Mz. die -- e
&lt;/W_1&gt;, ...
&lt;/paragraph&gt;
</equation>
<bodyText confidence="0.999926125">
The following annotation process derives an encod-
ing based on the TEI P5 Guidelines (TEI Consortium,
2009), using a Relax NG Schema. The encoding struc-
ture uses elements to markup an entry of a dictionary,
which consists of 1) a form block with inflectional and
morphological information and 2) a sense block han-
dling semantic description and references, quotations,
related entries, usage as well as notes. In the future,
</bodyText>
<page confidence="0.998328">
83
</page>
<figureCaption confidence="0.9999955">
Figure 1: Excerpt from the Campe Dictionary
Figure 2: Rendering of an Annotated Entry
</figureCaption>
<bodyText confidence="0.999960444444444">
this encoding will help us to structure the digital world
according to semantic criteria and thus provide an es-
sential basis for constructing reliable ontologies. The
annotation of the form block and of the sense block
will be described in the Sections 4 and 5, respectively.
For both, we have to be able to handle many forms of
variation.
The Variation Problem. Lexicographical structures,
such as in the Campe Dictionay, can have a lot of varia-
tion in entry and headword. E.g., volume 1 has 26.940
entries. The morphological structure is as follows: at-
tributes are used to form elements for the encoding of
inflectional, lexical and dialect variation [orthograph-
ical, ...], as well as variation in usage. In semantical
structures, attributes to elements of the sense block are
used to encode semantics.
Variation could, e.g., consist of several headwords
linked by conjunctions like ”oder” and ”und”; the ad-
ditional headwords are usually printed with a smaller
font size than the first headword of the entry. The fol-
lowing example shows such a variant with more than
one headword and its appropriate inflectional forms.
Abbreviations like ”d. Mz. w. d. Ez.” or ”Mz. s. Ez.”
are defining a plural form with the same notation as the
singular. These inflections have to be recognized and
annotated; in the following preannotated example, the
singluar form element is repeated.
</bodyText>
<equation confidence="0.834719">
&lt;paragraph&gt;
&lt;W_2&gt;Der Aalstreif&lt;/W_2&gt;,
&lt;W_1&gt;des -- es, Mz. die -- e&lt;/W_1&gt;,
oder &lt;W_1&gt;der Aalstreifen, des
ˆ$0002.18 -- s&lt;/W_1&gt;,
d. &lt;W_1&gt;Mz.&lt;/W_1&gt; w. d. Ez.
&lt;/paragraph&gt;
</equation>
<sectionHeader confidence="0.91292" genericHeader="method">
4 Annotating the Form Block in TEI
</sectionHeader>
<bodyText confidence="0.999981166666667">
We use declarative programming in PROLOG and FN-
QUERY as a solution for text conversion in general. In
the following, we will illustrate and discuss this for
nouns and verbs. This reflects our workflow for an-
notating the Campe Dictionary, but our approach can
also be applied to other dictionaries.
</bodyText>
<subsectionHeader confidence="0.945723">
4.1 Nouns
</subsectionHeader>
<bodyText confidence="0.994298">
The lemma line ”Der Aal” is encoded as follows:
</bodyText>
<page confidence="0.982814">
84
</page>
<figure confidence="0.9726345">
&lt;form type=&amp;quot;lemma&amp;quot;&gt;
&lt;gramGrp&gt;
&lt;pos value=&amp;quot;noun&amp;quot; /&gt;
&lt;gen value=&amp;quot;m&amp;quot; /&gt;
&lt;/gramGrp&gt;
&lt;form type=&amp;quot;determiner&amp;quot;&gt;
&lt;orth&gt;Der&lt;/orth&gt;
&lt;/form&gt;
&lt;form type=&amp;quot;headword&amp;quot;&gt;
&lt;orth&gt;Aal&lt;/orth&gt;
&lt;/form&gt;
&lt;/form&gt;
For the inflected lemma line ”Mz. die – e” we would
like to obtain the following TEI structure:
&lt;form type=&amp;quot;inflected&amp;quot;&gt;
&lt;gramGrp&gt;
&lt;gram type=&amp;quot;number&amp;quot;&gt;
&lt;abbr&gt;Mz.&lt;/abbr&gt; &lt;/gram&gt;
&lt;case value=&amp;quot;nominative&amp;quot;/&gt;
&lt;number value=&amp;quot;plural&amp;quot;/&gt;
&lt;/gramGrp&gt;
&lt;form type=&amp;quot;determiner&amp;quot;&gt;
&lt;orth&gt;die&lt;/orth&gt;
&lt;/form&gt;
&lt;form type=&amp;quot;headword&amp;quot;&gt;
&lt;orth&gt;
&lt;oVar&gt;
&lt;oRef&gt;-- e&lt;/oRef&gt;
&lt;/oVar&gt;
&lt;/orth&gt;
&lt;/form&gt;
&lt;/form&gt;
</figure>
<bodyText confidence="0.944750666666667">
The Parsing Workflow in PROLOG. A sequence
”Xs” of form elements is read using the new PROLOG
predicate ”sequence”, which we have implemented.
This is a compact way of specifying lists of tokens of
the same type (in our case form).
campe_parse_headword(Xs) --&gt;
sequence(’*’, form, Xs).
In standard PROLOG, we would have to encode this in a
more verbous way using recursion. In addition, the rule
above uses the definite clause grammar (DCG) notation
(”--&gt;”) of PROLOG (Gazdar, 1989; O’Keefe, 1990).
For handling complex specifications, a more com-
pact grammar formalism than standard DCG’s is
needed (Abramson, 1989; Sperberg–McQueen, 2003).
For parsing text, we have mainly used an additional
grammar formalism (”==&gt;”), which we have devel-
oped, the so–called extended definite clause gram-
mars (EDCG’s); the technical details of EDCG’s are
described in Schneiker et al. (2009). The following
EDCG rules can derive an XML structure that is very
close to the TEI for the inflected lemma line above. The
rules almost look like the rules of a context–free gram-
mar. A form element consists of a grammar determiner
followed by a form headword.
form ==&gt;
grammar_determiner,
form_headword.
A grammar determiner is either a gram element fol-
lowed by a determiner, or simply a determiner. The
alternative is encoded by ”;”, which stands for ”or” in
PROLOG. The cut ”!” freezes the first alternative, if we
detect a gram element; i.e., then a simple determiner is
not allowed.
grammar_determiner ==&gt;
( gram, !, determiner
; determiner ).
Tokens from the input strean are read using the list no-
tation ”[...]”. A gram element can only be of the form
”Mz.”, and a determiner is a token ”X”, that is a campe
determiner. The bracket notation ”{...}” does not read
from the input stream; instead, it is used for expressing
test conditions on the tokens.
</bodyText>
<equation confidence="0.977748666666667">
gram ==&gt; [’Mz.’].
determiner ==&gt; [X],
{ campe_is_determiner(X) }.
</equation>
<bodyText confidence="0.9993245">
Finally, a form headword is an orth element, which it-
self must be the sequence ’--’ followed by any other
token. The wildcard for arbitrary tokens is the anony-
mous variable ”_” of PROLOG.
</bodyText>
<equation confidence="0.7951565">
form_headword ==&gt; orth.
orth ==&gt; [’--’, _].
</equation>
<bodyText confidence="0.998247666666667">
The 6 EDCG rules above form an EDCG grammar,
which can be applied to the stream of input tokens.
Thus, we obtain the following XML structure; the tag
names are generically taken from the EDCG rules. At
this stage, the most important and complicated steps of
the parsing have been done. In some further steps of
fine tuning, the desired TEI structure can be obtained
using XSLT or the FNTRANSFORM component of FN-
QUERY.
</bodyText>
<figure confidence="0.993029666666667">
&lt;form&gt;
&lt;grammar_determiner&gt;
&lt;gram&gt;Mz.&lt;/gram&gt;
&lt;determiner&gt;die&lt;/determiner&gt;
&lt;/grammar_determiner&gt;
&lt;form_headword&gt;
&lt;orth&gt;-- e&lt;/orth&gt;
&lt;/form_headword&gt;
&lt;/form&gt;
</figure>
<bodyText confidence="0.973194428571429">
Finally, sequences of campe headwords
can be parsed using the PROLOG predicate
”campe_parse_headword”.
Visualization of EDCG Rules. EDCG’s could be
easily visualized using derivation trees (Figure 3); each
non–terminal is shown in an ellipse, the terminals are
denoted by rectangles, representing the leaves of the
</bodyText>
<page confidence="0.991178">
85
</page>
<figure confidence="0.9995556">
gram determiner
Mz.
grammer_determiner form_headword
campe_is_determiner
v
form
campe_is_determiner
determiner
[--, _]
orth
</figure>
<figureCaption confidence="0.999994">
Figure 3: Visualization of the EDCG-rules for parsing forms
</figureCaption>
<bodyText confidence="0.999781681818182">
tree. Nodes could be either emtpy circles for conjunc-
tions – the ”,” in the EDCG’s – or circles with a ”∨” for
a logical disjunctions – denoted by ”;” in PROLOG.
Handling of Variation. Grammar formalisms like
DCG’s or EDCG’s can very well handle variation. The
different alternatives can be represented using multiple
rules for an XML element or by the alternative construct
”;” within a single rule. Moreover, since our grammar
formalisms are very compact and thus easily readable,
it is possible for the implementer to understand even
larger sets of rules and to keep track of the complex
structures.
Finally, when several ways of parsing a sequence
of tokens are possible, the backtracking mechanism of
PROLOG explores all alternatives, and it can return all
possible results. If later inconsistencies make previous
choices ofparsing rules impossible, then PROLOG goes
back to the last choice point and explores the next alter-
native. In other programming languages, backtracking
has to be implemented explicitely, whereas it is implicit
in PROLOG. This overhead makes backtracking more
difficult to handle in other programming languages.
</bodyText>
<subsectionHeader confidence="0.914861">
4.2 Verbs
</subsectionHeader>
<bodyText confidence="0.95357675">
Each verb could have additional information about its
corresponding part of speech. This information is high-
lighted with a roman font type in the Campe Dictionary
and 8 groups could be isolated:
</bodyText>
<figureCaption confidence="0.971457625">
v. 7→ “verb”,
imp. 7→ “impersonal”,
intr. 7→ “intransitive”,
ntr. 7→ “neuter”,
rec. 7→ “reciprocal”,
regelm. 7→ “regular”,
trs. 7→ ‘transitive”,
unregelm. 7→ “irregular”
</figureCaption>
<bodyText confidence="0.995392333333333">
In our base file, we find two different variants of pre–
annotated pos elements depending on the current pro-
cessing stage:
</bodyText>
<figure confidence="0.580027714285714">
&lt;A&gt;v.&lt;/A&gt;
&lt;A&gt;trs.&lt;/A&gt;
&lt;A&gt;unregel.&lt;/A&gt;
or
&lt;hi _&gt;v.&lt;/hi&gt;
&lt;hi _&gt;trs.&lt;/hi&gt;
&lt;hi _&gt;unregel.&lt;/hi&gt;
</figure>
<bodyText confidence="0.998689">
where ”_” stands for the attribute/value pair
”rend=”roman””, which would be annotated as
follows:
</bodyText>
<figure confidence="0.928397214285714">
&lt;gramGrp&gt;
&lt;pos value=&amp;quot;verb&amp;quot;&gt;
&lt;abbr&gt;
&lt;hi rend=&amp;quot;roman&amp;quot;&gt;v. &lt;/hi&gt;
&lt;/abbr&gt;
&lt;/pos&gt;
&lt;subc value=&amp;quot;transitive&amp;quot;&gt;
&lt;abbr&gt;trs.&lt;/abbr&gt;
&lt;/subc&gt;
&lt;subc value=&amp;quot;irregular&amp;quot;&gt;
&lt;abbr&gt;unregelm.&lt;/abbr&gt;
&lt;/subc&gt;
&lt;/gramGrp&gt;
Inflected forms are possible for verbs, too.
</figure>
<page confidence="0.991868">
86
</page>
<sectionHeader confidence="0.881845" genericHeader="method">
5 Annotating the Sense Block in TEI
</sectionHeader>
<bodyText confidence="0.999418875">
Lists in the sense block can have many different forms
and a complex nesting structure, like different sense
blocks, citations, hyphenations, references and differ-
ent font types.
For annotating these sequences and variation, we fre-
quently use the predicate sequence of the DDK. More-
over, for parsing lists, we make extensive use of PRO-
LOG’s backtracking feature.
</bodyText>
<subsectionHeader confidence="0.998797">
5.1 Structuring the Sense Block
</subsectionHeader>
<bodyText confidence="0.99898875">
The sense block could have a complex nesting structure
for defining different meanings of a lemma. In a printed
dictionary, often arabic or roman numbers a used for
creating a fine–grained structure.
</bodyText>
<figure confidence="0.781001333333333">
&lt;W_2&gt;Ab¨angsten und Ab¨angstigen&lt;/W_2&gt;,
&lt;abbr&gt;&lt;A&gt;v.&lt;/A&gt;&lt;/abbr&gt;
I) &lt;abbr&gt;&lt;A&gt;trs.&lt;/A&gt;&lt;/abbr&gt;
1) Sehr ¨angsten oder ...
2) Durch Angstmachen zu etwas ...
II) &lt;abbr&gt;&lt;A&gt;rec.&lt;/A&gt;&lt;/abbr&gt; ...
&lt;W_1&gt;Das Ab¨angsten,
&lt;lb n=&amp;quot;0003.91&amp;quot; /&gt; Ab¨angstigen.
Die Ab¨angstung, Ab¨angstigung&lt;/W_1&gt;.
</figure>
<bodyText confidence="0.9917575">
Each sense could be part of another subsense, or a
new sense could be created. Using PROLOG’s back-
tracking feature, we can find a suitable interpretation
of such a structure and annotate it in XML:
</bodyText>
<figure confidence="0.900770111111111">
&lt;sense n=&amp;quot;I&amp;quot;&gt;
&lt;lbl type=&amp;quot;ordering&amp;quot;&gt;I)&lt;/lbl&gt; ...
&lt;sense n=&amp;quot;1&amp;quot;&gt;
&lt;lbl type=&amp;quot;ordering&amp;quot;&gt;1)&lt;/lbl&gt; ...
&lt;/sense&gt;
&lt;sense n=&amp;quot;2&amp;quot;&gt;
&lt;lbl type=&amp;quot;ordering&amp;quot;&gt;2)&lt;/lbl&gt; ...
&lt;/sense&gt;
&lt;/sense&gt;
</figure>
<bodyText confidence="0.943410076923077">
PROLOG is very well–suited for parsing such nested
structures. In general, roman or arabic numbering
could be used for a listing at any depth. E.g., the text
1)...2)...1)...2)...3)
could be structured as a list ”1,2(1,2,3)” with two
elements, where the second element has three subele-
ments, or as a list ”1,2(1,2),3” with three elements,
where the second element has two subelements. Both
alternatives can be generated by backtracking. But, if
we extend the text by ”...3)”, then our PROLOG ap-
proach correctly structures the above prefix in the first
way; otherwise there would be two consecutive top–list
elements with the same numbering.
</bodyText>
<subsectionHeader confidence="0.998933">
5.2 Citations and References
</subsectionHeader>
<bodyText confidence="0.958186538461539">
Citations and cross references to other entries are used
all over the text corpus.
Citations. Often, citations could be recognized by
bible citations and names of authers like Lessing or
Richter, which are often pre–annotated in a larger font
size.
Um Geld zu fischen, Geld! Um Geld,
ˆ$0004.71 Geld einem Juden
&lt;W_1&gt;abzubangen&lt;/W_1&gt;, Geld!
&lt;W_1&gt;Lessing&lt;/W_1&gt;.
These citations are annotated with a cit tag contain-
ing the citation as a quote tag and the corresponding
author in bibl and author.
</bodyText>
<figure confidence="0.917050866666667">
&lt;cit type=&amp;quot;quote&amp;quot;&gt;
&lt;quote&gt; ... &lt;/quote&gt;
&lt;bibl&gt;
&lt;author n=&amp;quot;#Lessing&amp;quot;&gt;
&lt;hi rend=&amp;quot;spaced&amp;quot;&gt;Lessing&lt;/hi&gt;
&lt;/author&gt;
&lt;/bibl&gt;
&lt;/cit&gt;
References. Cross references to other entries of the
Campe Dictionary are usally marked with ”S.”, ”Siehe
da” or ”s.a.” in the sense block.
&lt;W_1&gt;Die Abberufung&lt;/W_1&gt;. S. d.
&lt;W_1&gt;
s. Essig¨alchen, Kleister¨alchen
&lt;/W_1&gt;
</figure>
<bodyText confidence="0.9997835">
These references are annoated with xr containing an
lbl tag with an attribute for marking it as a reference.
The target of this references is annotated with ref and
the corresponding entries as the target attribute.
</bodyText>
<figure confidence="0.806287666666667">
&lt;xr&gt;
&lt;lbl type=&amp;quot;reference&amp;quot;&gt;s.&lt;/lbl&gt;
&lt;ref target=
&amp;quot;Essig¨alchen, Kleister¨alchen&amp;quot;&gt;
Essig¨alchen
&lt;c type=&amp;quot;$,&amp;quot;&gt;,&lt;/c&gt;
Kleister¨alchen
&lt;/ref&gt;
&lt;/xr&gt;
</figure>
<subsectionHeader confidence="0.993392">
5.3 Punctuation
</subsectionHeader>
<bodyText confidence="0.999091571428571">
For annotating punctuation in a lemma, which can ap-
pear between single headwords, the DCG predicate
campe_punctuation is used: for each token we check
if it is a punctuation mark, and – if so – annotate it
with a c tag. The meta–predicate sequence used in
the DCG predicate campe_punctuations parses such
a list of elements.
</bodyText>
<equation confidence="0.75162575">
campe_punctuations(Xs) --&gt;
sequence(’*’,
campe_punctuation, Xs).
87
campe_punctuation(X) --&gt;
( [A],
{ is_punctuation(A), X = c:[A] }
; [X] ).
</equation>
<subsectionHeader confidence="0.941493">
5.4 Linebreaks and Hyphenations
</subsectionHeader>
<bodyText confidence="0.991006571428571">
Linear structures like linebreaks and hyphenations are
parsed using a combination of FNQUERY and DCG’s.
A linebreak is annotated as an lb element; e.g.,
ˆ$0001.24 becomes &lt;lb n=&amp;quot;0001.24&amp;quot; /&gt;. In the
base file, each hyphenation is labeled with an equals
sign as a separator followed by a line break element.
auf Muenzen das Zei=
&lt;lb n=&amp;quot;0001.24&amp;quot; /&gt;
chen der ersten Stadt
The hyphenation itself should not be visual later in
the rendered representation of the XML document, so
we have removed the delimiter symbol and defined this
syllable division as an attribute rend of the surrounding
&lt;w&gt; element. 1
</bodyText>
<figure confidence="0.929912285714286">
auf Muenzen das
&lt;w rend=&amp;quot;Zei-chen&amp;quot;&gt;
Zei=
&lt;lb n=&amp;quot;0001.24&amp;quot;/&gt;
chen
&lt;/w&gt;
der ersten Stadt
</figure>
<bodyText confidence="0.9709862">
This sequence could be parsed easily with stan-
dard DCG rules in PROLOG. The predicate
create_hyphenation_element creates the hyphen-
ation XML element with the required attribute and con-
tent.
</bodyText>
<equation confidence="0.9518395">
campe_hyphenations(Xs) --&gt;
sequence(’*’,
campe_hyphenation, Xs).
campe_hyphenation(X) --&gt;
( campe_hyphenation_element(X)
; [X] ).
</equation>
<bodyText confidence="0.999990666666667">
The difference between standard DCG’s (operator
”--&gt;”) and the new EDCG formalism (operator ”==&gt;”)
proposed by us is that EDCG’s are more compact and
more readable, since they hide the output arguments
for the derived syntax tree and produce a generic XML
structure instead.
</bodyText>
<subsectionHeader confidence="0.958162">
5.5 Font Types
</subsectionHeader>
<bodyText confidence="0.99996325">
The different font types in the Campe Dictionary, like
the roman font family or larger fonts sizes for head-
words and inflected forms, are pre–annotated in the
capturing process.
</bodyText>
<footnote confidence="0.6889545">
1We would like to remark that for a better text processing
an additional attribute is required. This attribute has to repre-
sent the correct spelling of the hyphenated word without any
delimiter symbol
</footnote>
<bodyText confidence="0.9997526">
For transforming these annotations according to our
TEI schema, we used our transforming technology
FNTRANSFORM which is implemented in PROLOG.
These transformations could also be processed using
XSLT stylesheets.
</bodyText>
<sectionHeader confidence="0.996172" genericHeader="conclusions">
6 Conclusions and Future Work
</sectionHeader>
<bodyText confidence="0.999961433333333">
For retro–digitizing old printed German dictionaries,
we have presented a workflow for parsing and annotat-
ing these text corpora according to the Text Encoding
Initiative. With declarative programming techniques
like EDCG’s and FNQUERY, a fast and reliable parser
could be implemented. Combined with transformation
languages like FNTRANSFORM and XSLT, we are able
to handle different types of variation, such as differ-
ent types of entries, inflected forms, lemma variants,
and flexible XML schemas. To exemplify these anno-
tations, we have processed the Campe Dictionary with
6 volumes and over 140.000 different entries. The tech-
niques, which we have applied to the German Campe
Dictionary, could be used for handling other types of
text copora as well, and of course also other languages
like English or French.
In a current project, a web interface for a free com-
munity access is implemented for our toolkit as a
streaming editor. With this editor, an easy to use graph-
ical user interface gives access to a huge platform for
parsing and annotating text corpora for the eHumani-
ties, with the ability to reuse the already implemented
parser for handling other text corpora. The declarative
toolkit DDK, which includes all of the described frame-
works, is available on the web.
A subject of future work will be the implementation
of an XSLT preprocessor in PROLOG to provide a native
interface for handling EDCG’s within XSLT; the path
language XPATH is already implemented in our XML
toolkit FNQUERY.
</bodyText>
<sectionHeader confidence="0.997653" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.993189125">
ABRAMSON, H.; DAHL, V.: Logic Grammars.
Springer, 1989
BL ¨UMM, M. (ed.): Die textsortenspezifische Kern-
kodierungf¨ur Dokumente in TEI P5, TextGrid 2007,
2009.
http://www.textgrid.de/fileadmin/TextGrid/reports/
Textsortenspezifische Kernkodierung 2009.pdf,
accessed 30.04.2009
CAMBRIDGE UNIVERSITY PRESS CATALOGUE, A
Dictionary of the English Language on CD–ROM.
http://www.cambridge.org/catalogue/catalogue.asp
?isbn=9780521557658, accessed 30.04.2009
CAMPE, Joachim Heinrich: W¨orterbuch der deutschen
Sprache. 5 Volumes, Braunschweig 1807–1811
COVINGTON, M.A.: GULP 3.1: An Extension of
Prolog for Unification–Based Grammar. Research
</reference>
<page confidence="0.987255">
88
</page>
<reference confidence="0.999140533333333">
Report AI–1994–06, Artificial Intelligence Center,
University of Georgia, 1994
DEREKO: The German Reference Corpus Project.
http://www.ids-mannheim.de/kl/projekte/korpora/,
2009
FUCHS, N.E.; FROMHERZ, M.P.J.: Transformational
Development of Logic Programs from Executable
Specifications – Schema Based Visual and Tex-
tual Composition of Logic Programs. Beckstein, C.;
Geske, U. (eds.), Entwicklung, Test und Wartung
deklarativer KI–Programme, GMD Studien Nr. 238,
Gesellschaft f¨ur Informatik und Datenverarbeitung,
1994
FUCHS, N.E.; SCHWITTER, R.: Specifying Logic Pro-
grams in Controlled Natural Language. Proc. Work-
shop on Computational Logic for Natural Language
Processing (CLNP), 1995
G¨ARTNER, K.; WISBEY, R.: Die Bedeutung des
Computers f¨ur die Edition altdeutscher Texte. Kriti-
sche Bewahrung. Beitr¨age zur deutschen Philologie.
Festschrift f¨ur Werner Schr¨oder zum 60. Geburtstag.
Hg. von Ernst–Joachim Schmidt, Berlin, 1974
GAZDAR, G.; MELLISH, C. Natural Language Pro-
cessing in Prolog. An Introduction to Computational
Linguistics. Addison–Wesley, 1989
HAUSMANN, F.J.; REICHMANN, O.; WIEGAND, H.E.;
ZGUSTA, L. (eds.): W¨orterb¨ucher / Dictionaries /
Dictionnaires – Ein internationales Handbuch zur
Lexikographie / An International Encyclopedia of
Lexicography / Encyclop´edie internationale de lex-
icographie. Vol. 1 1989; Vol. 2 1990; Vol. 3 1991;
Berlin et. al.
HIRAKAWA, H.; ONO, K.; YOSHIMURA, Y.: Auto-
matic Refinement of a POS Tagger Using a Reli-
able Parser and Plain Text Corpora. Proc. 18th Inter-
national Conference on Computational Linguistics
(COLING), 2000
LANDAU, S.: Dictionaries. The Art and Craft of Lexi-
cography. 2nd Edition, Cambridge, 2001
LLOYD, J.: Practical Advantages of Declarative Pro-
gramming. CSLI Lecture Notes, Number 10, 1987
MCDERMOTT, A. (ed.): Samuel Johnson. ADictionary
of the English Language on CD–ROM. The First and
Fourth Edition. Introduction and CD, Cambridge,
1996
O’KEEFE, R.A.: The Craft ofProlog. MIT Press, 1990
PEREIRA, F.C.N.; SHIEBER, S.M: Prolog and Natural
Language Analysis. Lecture Notes, CSLI, Number
10, 1987
SCHNEIKER, C.; SEIPEL, D.; WEGSTEIN, W.;
PR¨ATOR, K.: Declarative Parsing and Annota-
tion of Electronic Dictionaries. Proc. 6th Interna-
tional Workshop on Natural Language Processing
and Cognitive Science (NLPCS), 2009
SCHWITTER, R.: Working for Two: a Bidirectional
Grammer for a Controlled Natural Language. Proc.
28th International Conference on Artificial Intelli-
gence (AI), 2008
SEIPEL, D.: Processing XML–Documents in Prolog.
Proc. 17th Workshop on Logic Programmierung
(WLP), 2002
SEIPEL, D.; PR¨ATOR, K.: XML Transformations
Based on Logic Programming. Proc. 18th Workshop
on Logic Programming (WLP), 2005
SPERBERG–MCQUEEN, C. M.: Logic Grammars and
XML Schema. Proc. Conference on Extreme Markup
Languages, 2003.
TEI CONSORTIUM (eds.): TEI P5: Guidelines for
Electronic Text Encoding and Interchange. 2 Vols.
Oxford/Providence/Charlotteville/Nancy, 2008
http://www.tei-c.org/release/doc/tei-p5-
doc/en/html/index.html, accessed 30.04.2009
TEXTGRID: A Modular Platform for Collaborative
Textual Editing – a Community Gridfor the Human-
ities. http://www.textgrid.de, 2009
</reference>
<page confidence="0.99974">
89
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.388460">
<title confidence="0.999251">Schema and Variation: Digitizing Printed Dictionaries</title>
<author confidence="0.911414">Schneiker</author>
<affiliation confidence="0.999686">Department of Computer University of W¨urzburg,</affiliation>
<author confidence="0.782882">Werner</author>
<affiliation confidence="0.999825">Department of Computational University of W¨urzburg,</affiliation>
<email confidence="0.994374">werner.wegstein@uni-wuerzburg.de</email>
<abstract confidence="0.993851285714286">In this paper we show how to exploit typographical and textual features of raw text for a fine–grain Markup with special focus on capturing linguistic variation in dictionaries. We use declarative programming techniques and context–free gram-</abstract>
<intro confidence="0.555192">implemented in</intro>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>H ABRAMSON</author>
<author>V DAHL</author>
</authors>
<title>Logic Grammars.</title>
<date>1989</date>
<publisher>Springer,</publisher>
<marker>ABRAMSON, DAHL, 1989</marker>
<rawString>ABRAMSON, H.; DAHL, V.: Logic Grammars. Springer, 1989</rawString>
</citation>
<citation valid="false">
<booktitle>Die textsortenspezifische Kernkodierungf¨ur Dokumente in TEI P5, TextGrid 2007, 2009. http://www.textgrid.de/fileadmin/TextGrid/reports/ Textsortenspezifische Kernkodierung 2009.pdf, accessed</booktitle>
<pages>30--04</pages>
<editor>BL ¨UMM, M. (ed.):</editor>
<marker></marker>
<rawString>BL ¨UMM, M. (ed.): Die textsortenspezifische Kernkodierungf¨ur Dokumente in TEI P5, TextGrid 2007, 2009. http://www.textgrid.de/fileadmin/TextGrid/reports/ Textsortenspezifische Kernkodierung 2009.pdf, accessed 30.04.2009</rawString>
</citation>
<citation valid="false">
<authors>
<author>CAMBRIDGE UNIVERSITY PRESS CATALOGUE</author>
</authors>
<title>A Dictionary of the English Language on CD–ROM. http://www.cambridge.org/catalogue/catalogue.asp ?isbn=9780521557658, accessed 30.04.2009</title>
<marker>CATALOGUE, </marker>
<rawString>CAMBRIDGE UNIVERSITY PRESS CATALOGUE, A Dictionary of the English Language on CD–ROM. http://www.cambridge.org/catalogue/catalogue.asp ?isbn=9780521557658, accessed 30.04.2009</rawString>
</citation>
<citation valid="true">
<authors>
<author>Joachim CAMPE</author>
</authors>
<title>Heinrich: W¨orterbuch der deutschen Sprache. 5 Volumes,</title>
<date>1807</date>
<location>Braunschweig</location>
<marker>CAMPE, 1807</marker>
<rawString>CAMPE, Joachim Heinrich: W¨orterbuch der deutschen Sprache. 5 Volumes, Braunschweig 1807–1811</rawString>
</citation>
<citation valid="true">
<authors>
<author>M A COVINGTON</author>
</authors>
<title>GULP 3.1: An Extension of Prolog for Unification–Based Grammar.</title>
<date>1994</date>
<tech>Research Report AI–1994–06,</tech>
<institution>Artificial Intelligence Center, University of Georgia,</institution>
<marker>COVINGTON, 1994</marker>
<rawString>COVINGTON, M.A.: GULP 3.1: An Extension of Prolog for Unification–Based Grammar. Research Report AI–1994–06, Artificial Intelligence Center, University of Georgia, 1994</rawString>
</citation>
<citation valid="true">
<title>DEREKO: The German Reference Corpus Project.</title>
<date>2009</date>
<location>http://www.ids-mannheim.de/kl/projekte/korpora/,</location>
<contexts>
<context position="2881" citStr="(2009)" startWordPosition="430" endWordPosition="430">dicators and the structuring of the description of word senses, etc., not only in single dictionaries, but – perhaps using a grid environment – in fully connected dictionary networks (cf. the dictionary search, possible within the Trier Dictionary Net and as a TextGrid feature). In the context of these new user scenarios, possibly grid–based, usable for collabortive research and secured safely in longterm archive structures, we try to put fine–grain encoding ideas into practise using Joachim Heinrich Campe’s dictionary of the German Language as testbed. This is one of the reasons why TEXTGRID (2009), the first grid project in German eHumanities, funded by the Federal Ministry of Education and Research, chose the Campe Dictionary (1811): 6 volumes with altogether about 6.000 pages and about 140.000 entries, published between 1807 and 1813 as one testbed for their TEXTGRID Lab, a Virtual Research Library. It entails a grid–enabled workbench that will process, analyse, annotate, edit and publish text data for academic research and TEXTGRIDRep, a grid repository for long–term storage. Electronic dictionaries are used in a wide field of new research areas such as the growing community of eHum</context>
<context position="13148" citStr="(2009)" startWordPosition="2069" endWordPosition="2069">(’*’, form, Xs). In standard PROLOG, we would have to encode this in a more verbous way using recursion. In addition, the rule above uses the definite clause grammar (DCG) notation (”--&gt;”) of PROLOG (Gazdar, 1989; O’Keefe, 1990). For handling complex specifications, a more compact grammar formalism than standard DCG’s is needed (Abramson, 1989; Sperberg–McQueen, 2003). For parsing text, we have mainly used an additional grammar formalism (”==&gt;”), which we have developed, the so–called extended definite clause grammars (EDCG’s); the technical details of EDCG’s are described in Schneiker et al. (2009). The following EDCG rules can derive an XML structure that is very close to the TEI for the inflected lemma line above. The rules almost look like the rules of a context–free grammar. A form element consists of a grammar determiner followed by a form headword. form ==&gt; grammar_determiner, form_headword. A grammar determiner is either a gram element followed by a determiner, or simply a determiner. The alternative is encoded by ”;”, which stands for ”or” in PROLOG. The cut ”!” freezes the first alternative, if we detect a gram element; i.e., then a simple determiner is not allowed. grammar_det</context>
</contexts>
<marker>2009</marker>
<rawString>DEREKO: The German Reference Corpus Project. http://www.ids-mannheim.de/kl/projekte/korpora/, 2009</rawString>
</citation>
<citation valid="true">
<date>1994</date>
<booktitle>Transformational Development of Logic Programs from Executable Specifications – Schema Based Visual and Textual Composition of Logic Programs.</booktitle>
<editor>FUCHS, N.E.; FROMHERZ, M.P.J.:</editor>
<marker>1994</marker>
<rawString>FUCHS, N.E.; FROMHERZ, M.P.J.: Transformational Development of Logic Programs from Executable Specifications – Schema Based Visual and Textual Composition of Logic Programs. Beckstein, C.; Geske, U. (eds.), Entwicklung, Test und Wartung deklarativer KI–Programme, GMD Studien Nr. 238, Gesellschaft f¨ur Informatik und Datenverarbeitung, 1994</rawString>
</citation>
<citation valid="true">
<authors>
<author>N E FUCHS</author>
<author>R SCHWITTER</author>
</authors>
<title>Specifying Logic Programs in Controlled Natural Language.</title>
<date>1995</date>
<booktitle>Proc. Workshop on Computational Logic for Natural Language Processing (CLNP),</booktitle>
<marker>FUCHS, SCHWITTER, 1995</marker>
<rawString>FUCHS, N.E.; SCHWITTER, R.: Specifying Logic Programs in Controlled Natural Language. Proc. Workshop on Computational Logic for Natural Language Processing (CLNP), 1995</rawString>
</citation>
<citation valid="true">
<authors>
<author>K G¨ARTNER</author>
<author>R WISBEY</author>
</authors>
<title>Die Bedeutung des Computers f¨ur die Edition altdeutscher Texte. Kritische Bewahrung. Beitr¨age zur deutschen Philologie. Festschrift f¨ur Werner Schr¨oder zum 60. Geburtstag. Hg. von Ernst–Joachim Schmidt,</title>
<date>1974</date>
<location>Berlin,</location>
<marker>G¨ARTNER, WISBEY, 1974</marker>
<rawString>G¨ARTNER, K.; WISBEY, R.: Die Bedeutung des Computers f¨ur die Edition altdeutscher Texte. Kritische Bewahrung. Beitr¨age zur deutschen Philologie. Festschrift f¨ur Werner Schr¨oder zum 60. Geburtstag. Hg. von Ernst–Joachim Schmidt, Berlin, 1974</rawString>
</citation>
<citation valid="true">
<authors>
<author>G GAZDAR</author>
<author>C MELLISH</author>
</authors>
<title>Natural Language Processing in Prolog. An Introduction to Computational Linguistics.</title>
<date>1989</date>
<publisher>Addison–Wesley,</publisher>
<marker>GAZDAR, MELLISH, 1989</marker>
<rawString>GAZDAR, G.; MELLISH, C. Natural Language Processing in Prolog. An Introduction to Computational Linguistics. Addison–Wesley, 1989</rawString>
</citation>
<citation valid="true">
<date>1989</date>
<booktitle>W¨orterb¨ucher / Dictionaries / Dictionnaires – Ein internationales Handbuch zur Lexikographie / An International Encyclopedia of Lexicography / Encyclop´edie internationale de lexicographie.</booktitle>
<volume>1</volume>
<editor>HAUSMANN, F.J.; REICHMANN, O.; WIEGAND, H.E.; ZGUSTA, L. (eds.):</editor>
<location>Berlin</location>
<marker>1989</marker>
<rawString>HAUSMANN, F.J.; REICHMANN, O.; WIEGAND, H.E.; ZGUSTA, L. (eds.): W¨orterb¨ucher / Dictionaries / Dictionnaires – Ein internationales Handbuch zur Lexikographie / An International Encyclopedia of Lexicography / Encyclop´edie internationale de lexicographie. Vol. 1 1989; Vol. 2 1990; Vol. 3 1991; Berlin et. al.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H HIRAKAWA</author>
<author>K ONO</author>
<author>Y YOSHIMURA</author>
</authors>
<title>Automatic Refinement of a POS Tagger Using a Reliable Parser and Plain Text Corpora.</title>
<date>2000</date>
<booktitle>Proc. 18th International Conference on Computational Linguistics (COLING),</booktitle>
<marker>HIRAKAWA, ONO, YOSHIMURA, 2000</marker>
<rawString>HIRAKAWA, H.; ONO, K.; YOSHIMURA, Y.: Automatic Refinement of a POS Tagger Using a Reliable Parser and Plain Text Corpora. Proc. 18th International Conference on Computational Linguistics (COLING), 2000</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Dictionaries LANDAU</author>
</authors>
<title>The Art and Craft of Lexicography. 2nd Edition,</title>
<date>2001</date>
<location>Cambridge,</location>
<marker>LANDAU, 2001</marker>
<rawString>LANDAU, S.: Dictionaries. The Art and Craft of Lexicography. 2nd Edition, Cambridge, 2001</rawString>
</citation>
<citation valid="true">
<authors>
<author>J LLOYD</author>
</authors>
<title>Practical Advantages of Declarative Programming.</title>
<date>1987</date>
<journal>CSLI Lecture Notes, Number</journal>
<volume>10</volume>
<marker>LLOYD, 1987</marker>
<rawString>LLOYD, J.: Practical Advantages of Declarative Programming. CSLI Lecture Notes, Number 10, 1987</rawString>
</citation>
<citation valid="true">
<date>1996</date>
<booktitle>Samuel Johnson. ADictionary of the English Language on CD–ROM. The First and Fourth Edition. Introduction and CD,</booktitle>
<editor>MCDERMOTT, A. (ed.):</editor>
<location>Cambridge,</location>
<marker>1996</marker>
<rawString>MCDERMOTT, A. (ed.): Samuel Johnson. ADictionary of the English Language on CD–ROM. The First and Fourth Edition. Introduction and CD, Cambridge, 1996</rawString>
</citation>
<citation valid="true">
<authors>
<author>R A O’KEEFE</author>
</authors>
<title>The Craft ofProlog.</title>
<date>1990</date>
<publisher>MIT Press,</publisher>
<marker>O’KEEFE, 1990</marker>
<rawString>O’KEEFE, R.A.: The Craft ofProlog. MIT Press, 1990</rawString>
</citation>
<citation valid="true">
<authors>
<author>F C N PEREIRA</author>
<author>SHIEBER</author>
</authors>
<title>S.M: Prolog and Natural Language Analysis.</title>
<date>1987</date>
<journal>Lecture Notes, CSLI, Number</journal>
<volume>10</volume>
<marker>PEREIRA, SHIEBER, 1987</marker>
<rawString>PEREIRA, F.C.N.; SHIEBER, S.M: Prolog and Natural Language Analysis. Lecture Notes, CSLI, Number 10, 1987</rawString>
</citation>
<citation valid="true">
<authors>
<author>C SCHNEIKER</author>
<author>D SEIPEL</author>
<author>W WEGSTEIN</author>
<author>K PR¨ATOR</author>
</authors>
<title>Declarative Parsing and Annotation of Electronic Dictionaries.</title>
<date>2009</date>
<booktitle>Proc. 6th International Workshop on Natural Language Processing and Cognitive Science (NLPCS),</booktitle>
<marker>SCHNEIKER, SEIPEL, WEGSTEIN, PR¨ATOR, 2009</marker>
<rawString>SCHNEIKER, C.; SEIPEL, D.; WEGSTEIN, W.; PR¨ATOR, K.: Declarative Parsing and Annotation of Electronic Dictionaries. Proc. 6th International Workshop on Natural Language Processing and Cognitive Science (NLPCS), 2009</rawString>
</citation>
<citation valid="true">
<authors>
<author>R SCHWITTER</author>
</authors>
<title>Working for Two: a Bidirectional Grammer for a Controlled Natural Language.</title>
<date>2008</date>
<booktitle>Proc. 28th International Conference on Artificial Intelligence (AI),</booktitle>
<marker>SCHWITTER, 2008</marker>
<rawString>SCHWITTER, R.: Working for Two: a Bidirectional Grammer for a Controlled Natural Language. Proc. 28th International Conference on Artificial Intelligence (AI), 2008</rawString>
</citation>
<citation valid="true">
<authors>
<author>D SEIPEL</author>
</authors>
<title>Processing XML–Documents in Prolog.</title>
<date>2002</date>
<booktitle>Proc. 17th Workshop on Logic Programmierung (WLP),</booktitle>
<marker>SEIPEL, 2002</marker>
<rawString>SEIPEL, D.: Processing XML–Documents in Prolog. Proc. 17th Workshop on Logic Programmierung (WLP), 2002</rawString>
</citation>
<citation valid="true">
<authors>
<author>D SEIPEL</author>
<author>K PR¨ATOR</author>
</authors>
<title>XML Transformations Based on Logic Programming.</title>
<date>2005</date>
<booktitle>Proc. 18th Workshop on Logic Programming (WLP),</booktitle>
<marker>SEIPEL, PR¨ATOR, 2005</marker>
<rawString>SEIPEL, D.; PR¨ATOR, K.: XML Transformations Based on Logic Programming. Proc. 18th Workshop on Logic Programming (WLP), 2005</rawString>
</citation>
<citation valid="true">
<authors>
<author>C M SPERBERG–MCQUEEN</author>
</authors>
<title>Logic Grammars and XML Schema.</title>
<date>2003</date>
<booktitle>Proc. Conference on Extreme Markup Languages,</booktitle>
<marker>SPERBERG–MCQUEEN, 2003</marker>
<rawString>SPERBERG–MCQUEEN, C. M.: Logic Grammars and XML Schema. Proc. Conference on Extreme Markup Languages, 2003.</rawString>
</citation>
<citation valid="true">
<date>2008</date>
<booktitle>TEI P5: Guidelines for Electronic Text Encoding and Interchange. 2 Vols. Oxford/Providence/Charlotteville/Nancy,</booktitle>
<pages>30--04</pages>
<editor>TEI CONSORTIUM (eds.):</editor>
<note>http://www.tei-c.org/release/doc/tei-p5-doc/en/html/index.html, accessed</note>
<marker>2008</marker>
<rawString>TEI CONSORTIUM (eds.): TEI P5: Guidelines for Electronic Text Encoding and Interchange. 2 Vols. Oxford/Providence/Charlotteville/Nancy, 2008 http://www.tei-c.org/release/doc/tei-p5-doc/en/html/index.html, accessed 30.04.2009</rawString>
</citation>
<citation valid="true">
<title>TEXTGRID: A Modular Platform for Collaborative Textual Editing – a Community Gridfor the Humanities. http://www.textgrid.de,</title>
<date>2009</date>
<contexts>
<context position="2881" citStr="(2009)" startWordPosition="430" endWordPosition="430">dicators and the structuring of the description of word senses, etc., not only in single dictionaries, but – perhaps using a grid environment – in fully connected dictionary networks (cf. the dictionary search, possible within the Trier Dictionary Net and as a TextGrid feature). In the context of these new user scenarios, possibly grid–based, usable for collabortive research and secured safely in longterm archive structures, we try to put fine–grain encoding ideas into practise using Joachim Heinrich Campe’s dictionary of the German Language as testbed. This is one of the reasons why TEXTGRID (2009), the first grid project in German eHumanities, funded by the Federal Ministry of Education and Research, chose the Campe Dictionary (1811): 6 volumes with altogether about 6.000 pages and about 140.000 entries, published between 1807 and 1813 as one testbed for their TEXTGRID Lab, a Virtual Research Library. It entails a grid–enabled workbench that will process, analyse, annotate, edit and publish text data for academic research and TEXTGRIDRep, a grid repository for long–term storage. Electronic dictionaries are used in a wide field of new research areas such as the growing community of eHum</context>
<context position="13148" citStr="(2009)" startWordPosition="2069" endWordPosition="2069">(’*’, form, Xs). In standard PROLOG, we would have to encode this in a more verbous way using recursion. In addition, the rule above uses the definite clause grammar (DCG) notation (”--&gt;”) of PROLOG (Gazdar, 1989; O’Keefe, 1990). For handling complex specifications, a more compact grammar formalism than standard DCG’s is needed (Abramson, 1989; Sperberg–McQueen, 2003). For parsing text, we have mainly used an additional grammar formalism (”==&gt;”), which we have developed, the so–called extended definite clause grammars (EDCG’s); the technical details of EDCG’s are described in Schneiker et al. (2009). The following EDCG rules can derive an XML structure that is very close to the TEI for the inflected lemma line above. The rules almost look like the rules of a context–free grammar. A form element consists of a grammar determiner followed by a form headword. form ==&gt; grammar_determiner, form_headword. A grammar determiner is either a gram element followed by a determiner, or simply a determiner. The alternative is encoded by ”;”, which stands for ”or” in PROLOG. The cut ”!” freezes the first alternative, if we detect a gram element; i.e., then a simple determiner is not allowed. grammar_det</context>
</contexts>
<marker>2009</marker>
<rawString>TEXTGRID: A Modular Platform for Collaborative Textual Editing – a Community Gridfor the Humanities. http://www.textgrid.de, 2009</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>