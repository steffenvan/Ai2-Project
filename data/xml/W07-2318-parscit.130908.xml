<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.030025">
<title confidence="0.983586">
Capturing Acceptable Variation in Distinguishing Descriptions
</title>
<author confidence="0.993675">
Jette Viethen and Robert Dale
</author>
<affiliation confidence="0.984283">
Centre for Language Technology
Macquarie University, Sydney, Australia
</affiliation>
<email confidence="0.989251">
{jviethen|rdale}@ics.mq.edu.au
</email>
<sectionHeader confidence="0.99361" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999918176470588">
Almost all existing referring expression
generation algorithms aim to find one best
referring expression for a given intended
referent. However, human-produced data
demonstrates that, for any given entity,
many perfectly acceptable referring ex-
pressions exist. At the same time, it is not
the case that all logically possible descrip-
tions are acceptable; so, if we remove the
requirement to produce only one best so-
lution, how do we avoid generating unde-
sirable descriptions? Our aim in this paper
is to sketch a framework that allows us to
capture constraints on referring expression
generation, so that the set of logically pos-
sible descriptions can be reduced to just
those that are acceptable.
</bodyText>
<sectionHeader confidence="0.998993" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999988203703704">
The literature contains many algorithms for the
generation of referring expressions: see, for ex-
ample, (Dale, 1989; Dale and Haddock, 1991;
Gardent, 2002; Varges and van Deemter, 2005;
Gatt, 2006). These algorithms generally attempt
to produce a single ‘best’ referring expression for
a given intended referent. What counts as ‘best’ is
generally defined in terms of minimality and the
redundancy of information: the best referring ex-
pression is the shortest possible distinguishing de-
scription, usually defined in terms of the number
of properties expressed. At the same time, some
researchers (for example, (Dale and Reiter, 1995;
Krahmer et al., 2003)) have noted that human-
produced referring expressions are often not min-
imal in this sense, and so variations on these algo-
rithms weaken this requirement, while still tending
to embody a ‘shorter is better’ criterion.
This focus on minimality has the consequence
that it allows us to ignore the abundant evidence
that any intended referent can be successfully and
appropriately referred to by a large number of re-
ferring expressions, many of which involve some
redundancy; see, for example, the data described
in (Viethen and Dale, 2006). Once we remove
the requirement of minimality, and admit that
there are many possible acceptable solutions to the
problem of how to refer to an intended referent, we
are faced with a new problem: for any given en-
tity, there are many logically possible distinguish-
ing descriptions, and we need some way to navi-
gate this space of possibilities, so that we can at
least separate the acceptable from the less accept-
able. This paper attempts to establish a framework
for thinking about this problem.
In Section 2, we begin by first discussing the
question of domain-specificity; our argument here
is that we are at too early a stage to come up with
a definition of ‘acceptable reference’ that is uni-
versally applicable, and so we must begin by ac-
knowledging what we call the hierarchy of ref-
erential domains. We also introduce the domain
that we use as the focus of discussion in this pa-
per. Then, in Section 3, we discuss the idea of
a space of descriptions, distinguishing the two
notions of logically possible description and ac-
ceptable description and presenting some statis-
tics that demonstrate the scale of the problem we
face. In Section 4, we enumerate a collection of
constraints on acceptable reference that we have
identified as being applicable in the domains un-
der consideration here. Finally, in Section 5, we
draw some conclusions and consider how the ideas
presented in this paper might be taken further.
</bodyText>
<sectionHeader confidence="0.992856" genericHeader="method">
2 Domain Specificity
</sectionHeader>
<subsectionHeader confidence="0.988623">
2.1 On the Generality of Solutions
</subsectionHeader>
<bodyText confidence="0.999895">
Early algorithms for referring expression gener-
ation (for example, (Dale, 1989)) attempted to
provide domain-independent characterisations of
what makes a good referring expression. Sub-
sequent work, and specifically that in the spirit
of the Incremental Algorithm (IA; (Dale and
Reiter, 1995)) acknowledged that there were
domain-specific aspects to the problem; in the
case of the IA, this involved using a gen-
</bodyText>
<page confidence="0.998602">
113
</page>
<bodyText confidence="0.999955102564103">
eral, domain-independent algorithm in conjunc-
tion with domain-specific preference orderings
over the available properties to be used in descrip-
tions. With the question of domain-specificity
conveniently delegated to the subtask of determin-
ing appropriate preference orderings, research in
this area typically then goes on to explore only a
single chosen domain.1
Our suspicion is that domain-specific character-
istics have a much greater impact on the problem
of referring expression generation than this simple
view suggests. Dale et al. (2002) suggested that
additional higher-level domain-specific reference
strategies were required to provide more guidance
over the process of referring expression genera-
tion. Here, we note that a monotonic combina-
tion of the costs or rankings of potential attributes,
as suggested by Krahmer et al. (2003), is based
on the assumption that adding another property to
an already distinguishing referring expression will
never make the expression better; but this is by no
means always the case. In many instances the in-
corporation of another property — such as a visu-
ally very salient one — can increase the usefulness
of a referring expression for the hearer, but this
very much depends upon the domain. Research
into how to effectively rank referring expressions
for entities in a specific domain therefore first re-
quires an exploration into the characteristics of the
properties that occur in that domain and the depen-
dencies between these properties. In short, we do
not believe there is a short-cut around the problem
of domain-specificity.
This does not mean that we are reduced to pro-
viding algorithms that are devoid of any generality.
Rather, as we argue below, we may be able to de-
termine a structure over the space of domains that
makes it possible to provide solutions that apply at
varying degrees of domain-specificity.
</bodyText>
<subsectionHeader confidence="0.989709">
2.2 Grid-Based Domains
</subsectionHeader>
<bodyText confidence="0.99987275">
Our recent work on referring expression genera-
tion (Viethen and Dale, to appear) is based on a do-
main which has arguably very specific characteris-
tics compared to many other application domains
in NLG. It consists of 16 filing cabinet drawers
which form a four-by-four grid. Four drawers each
have one of four colours (yellow, orange, pink and
blue); the colours are distributed randomly over
</bodyText>
<footnote confidence="0.752214666666667">
1Interestingly, as far as we are aware, no significant stud-
ies have been carried out to determine how such preference
orderings might actually be identified in any given domain.
</footnote>
<figureCaption confidence="0.999909">
Figure 1: The filing cabinets
</figureCaption>
<bodyText confidence="0.999475675675676">
the grid, as shown in Figure 1.
In exploring the generation and evaluation of re-
ferring expressions in this domain, we determined
that specific characteristics of the domain have a
considerable influence on the performance of dif-
ferent algorithms. In (Viethen and Dale, 2006)
we discuss how the very good performance of the
IA, and the contrasting unexpectedly bad results
for the Relational Algorithm (Dale and Haddock,
1991), are mainly due to the peculiarities of the
drawer domain. In particular, the domain’s regular
grid-like layout and the uniformity of the possible
referents with regard to their types and properties
put the Relational Algorithm, at least as originally
specified, at a great disadvantage.
This does not mean, however, that more
specifically-tailored solutions for reference in this
domain are then so tied to the description of fil-
ing cabinets that they cannot be used for anything
else. Rather, we take the view that our specific do-
main of enquiry is an instance of a more general
class of domains, which we refer to as the grid-
based domains. This class of domains shares a set
of common characteristics:
Type homogeneity: All potential referents are of
the same type; related objects of other types
might be used to describe the referent, but
these objects are not considered distractors.
Positional precision: Every entity has an exact
position in the grid, allowing a unique de-
scription using only positional information.
Connectedness: Every entity is connected to
each of its neighbours in the grid by a spa-
tial relation, such as above or left-of.
Also, in domains like this, the properties of the
entities fall into two categories: they are either po-
sitional (for example, row or column, and corner-
</bodyText>
<page confidence="0.997955">
114
</page>
<bodyText confidence="0.999947791666667">
hood or other special positional information such
as on-an-edge or in-the-middle) or intrinsic (for ex-
ample, colour, size, or shape).
Many domains share these properties: for ex-
ample, blocks or buildings on a street map with a
grid layout, as can be found in many inner cities
of Australia or the United States; cubicle layouts
in open-plan offices; cells in spreadsheets or ta-
bles of many different kinds; the boards of many
games such as checkers; windows in large build-
ing blocks; and cars in car parks, perhaps as imag-
ined from an aerial view. We might consider these
all to be regular grid-based domains; we can then
also identify somewhat less regular grid-based do-
mains, such as map references, books in book-
shelves, bricks in a wall, or pictures on display.
Our proposal here is that, while we carry out our
experimentation in one particular grid-based do-
main, we can still identify strategies for reference
that work across all grid-based domains; conse-
quently, we can provide solutions that, while they
are clearly not domain-independent, are of more
value than strategies tied to a single very specific
domain.
</bodyText>
<subsectionHeader confidence="0.998806">
2.3 A Hierarchy of Referential Domains
</subsectionHeader>
<bodyText confidence="0.99998602631579">
The basic idea underlying the above proposal is
that we can impose some structure over the space
of possible referential domains (domains in which
we want to refer to things) that allows us to de-
termine different degrees of domain-specificity. It
is too early to determine what such a hierarchy of
domains would look like, but there are some rea-
sonable suggestions we might make. For example,
it is plausible that, at the top level, we can parti-
tion the space of all referential domains into those
that are physical or concrete, on the one hand, and
those that are abstract (such as the domains of be-
liefs, or mathematical objects) on the other hand,
with different strategies for reference appropriate
in each.
Similarly, we can hypothesise some domain
structure from the bottom-up. Above, we identi-
fied a subset of domains that we referred to as grid-
based; we might consider the set of grid-based do-
mains to be a subtype of the set of ‘physical lay-
out’ domains, such as a collection of objects on a
table or plants in a garden. Such domains clearly
share some of the characteristics of grid-based do-
mains that will be relevant for reference, but at
the same time embody significant differences that
will render some specifically grid-based reference
strategies inappropriate.
These are only suggestions; our view is that
detailed consideration of quite different domains
is required before we can properly establish the
relationships between these domains. The main
point we are arguing for here is that some de-
gree of domain specificity cannot be ignored. To
put the point more strongly: we argue that further
progress on the development of algorithms for re-
ferring expression generation will only result if we
move away from a focus on domain-independent
aspects of the problem.
</bodyText>
<subsectionHeader confidence="0.986692">
2.4 Reference in Grid-Based Domains
</subsectionHeader>
<bodyText confidence="0.999986305555555">
The special characteristics of grid-based domains
noted above have an impact on the kinds of refer-
ring expressions that we might generate.
First, as already noted, the property of posi-
tional precision means that for every entity in a
grid-based domain, there exists a unique descrip-
tion which only uses the row and column properties
of that object, such as the drawer in the bottom
row, third column for d14 in Figure 1.
The property of type homogeneity means that
the entities in the domain often share a set of grid-
independent properties. In the case of the drawer
domain, this set only consists of colour; in the car
park domain, this would include properties such
as make and model, colour, or modifications such as
spoilers. This characteristic adds to the unifor-
mity of descriptions across objects, and therefore
allows for reference strategies to be quite gener-
ally applicable in the domain.
The positional precision and connectedness
characteristics mean that it is possible to infer the
exact grid location of one entity from that of an-
other whose location is specified. For example,
if we know that one object is in row 2 and column
4, then we know that the object to the right of it
is in row 2 and column 3. As we will see in Sec-
tion 4, this has an influence on the usefulness of
grid-dependent properties of objects that are spa-
tially related to the referent.
Another consequence of connectedness is that
the normal transitivity of spatial relations such as
above, below, and left-of does not play a role in these
domains. Of course, it is logically true that if ob-
ject2 is below object1 and object3 is below object2,
then object3 is also below object1. However, this re-
lation between object1 and object3 would never be
</bodyText>
<page confidence="0.994813">
115
</page>
<bodyText confidence="0.999908214285714">
used in a referring expression describing either of
these two entities. In the drawer domain, a hearer
would always understand the drawer below the or-
ange drawer in the top row to be d7, the drawer
directly below d2, not d10 or d15.
Our point here is that the nature of the do-
main has an impact on how the properties avail-
able in that domain might be used to refer to en-
tities. Most importantly, these domain character-
istics impact on the applicability of ‘general pur-
pose’ algorithms, as we saw in (Viethen and Dale,
2006) with regard to the poor performance of the
relational algorithm of Dale and Haddock (1991)
in a new domain.
</bodyText>
<sectionHeader confidence="0.998546" genericHeader="method">
3 The Space of Descriptions
</sectionHeader>
<subsectionHeader confidence="0.999917">
3.1 The Possible and the Acceptable
</subsectionHeader>
<bodyText confidence="0.999948186046511">
In any domain where entities are described via a
finite set of properties and relations, there are a
finite number of possible descriptions of a given
entity. We might think of these as the set of logi-
cally possible referring expressions. This set will
of course be combinatorial in the number of prop-
erties and related entities. Even if we limit the set
to those which are distinguishing descriptions,we
are still faced with a large set of descriptions to
choose from.
Existing algorithms effectively provide ways to
search this space, generally oriented towards find-
ing shorter solutions before longer ones are con-
sidered. These strategies favour referring expres-
sions which avoid or minimise redundancy and
stop as soon as one referring expression is found,
but as we know, human descriptions are often re-
dundant and there is usually more than one accept-
able solution; these algorithms therefore will fail
to find many descriptions which are in fact quite
acceptable from the point of view of readers or
listeners. This is in effect taking an engineering
perspective: find one good solution that can do
the job, then stop exploring other possibilities. A
more interesting approach to the problem might be
from the speaker’s and the listener’s perspectives:
identify all the acceptable referring expressions for
an object and then rank them by usefulness to the
parties involved.
These observations then raise some questions.
In particular, are all logically possible distinguish-
ing descriptions also acceptable to the speaker or
listener? And if not, how do we rule out those
which are not acceptable descriptions? It seems
likely that many of these descriptions—especially
the very long, multiply redundant ones—will not
be particularly useful.
Below, we provide some basic statistics that
demonstrate the size of the space of possible de-
scriptions that are available in even a simple do-
main like the one focussed on here. Then, in Sec-
tion 4, we propose some plausible constraints on
this space of possible descriptions.
</bodyText>
<subsectionHeader confidence="0.999401">
3.2 The Size of the Space
</subsectionHeader>
<bodyText confidence="0.99962847368421">
In our present work, we use an algorithm which
is based on the graph-based framework for re-
ferring expression generation described in Krah-
mer et al. (2003) to generate all logically possible
distinguishing descriptions for a target referent.
We concentrate on referring expressions contain-
ing simple attributive properties and binary rela-
tions between pairs of entities. More complex ex-
pressions involving plurals, and Boolean combina-
tions of properties or quantifiers (see among others
(Gatt, 2006), Varges and van Deemter (2005) and
van Deemter and Krahmer (2007 to appear)) are
not included in our current investigation; but even
without these, the number of possible descriptions
we have to consider is very large.
The attributive properties we encode for the
drawer domain are colour, row and column for all
drawers, and position with the value corner for the
four corner drawers. Of the relational properties,
only above and left-of are explicitly encoded, so as
to avoid circularity. It is left to the realisation level
to determine whether to realise the edge (a above
b) as A which is above B or B which is below A,
depending on whether A or B is the entity being
described.2
We use a parameter maxNodes to delimit the set
of descriptions produced by our algorithm; this
determines how many entities can maximally be
included in each referring expression. We cur-
rently investigate referring expressions involving
no more than two entities. Three reasons justify
this seemingly low cut off: firstly, as each en-
tity in our domain has 3–4 attributive properties,
it seems unnecessary to consider descriptions con-
taining long chains of relations such as the blue
drawer above the blue drawer left of the drawer in
the third row below the yellow drawer; secondly,
our set of 140 human-produced descriptions for
</bodyText>
<footnote confidence="0.999147333333333">
2For representational issues in the drawer domain and the
graph-based framework, see (Viethen and Dale, 2006) and
(Krahmer et al., 2003) respectively.
</footnote>
<page confidence="0.997202">
116
</page>
<bodyText confidence="0.999888083333333">
this domain contains only four relational descrip-
tions with more than one relation; and finally and
most practically, allowing more than two entities
in a description extends the set of descriptions to
be considered from hundreds to thousands.
If we allow maximally one related entity to be
included alongside the intended referent, it turns
out that we have an average of about 212 possible
distinguishing descriptions per drawer. For exam-
ple, for drawer d1 in Figure 1, the number of can-
didate descriptions consists of the following sets,
where ‘DD’ means ‘distinguishing description’:
</bodyText>
<listItem confidence="0.9512229">
•|{DDs of d1}  |= 8
• |{DDs of d1} × {DDs of d2 or d8} |=
8 × (4+2) = 48
• |{DDs of d1} × {non-DDs of d2 or d8} |=
8 × (4+6) = 80
• |{non-DDs of d1} × {DDs of d2 or d8} |=
8 × (4+2) = 48
• |{{non-DDs of d1} × {non-DDs of d2
or d8}, where the resulting description is
distinguishing} |&lt; 8 × (4+6) = 80. In fact,
</listItem>
<bodyText confidence="0.995009166666667">
for this drawer the number is 44.
This results in a total of 228 candidate descriptions
for drawer d1 using at most one relational property.
Taking into account that, depending on a
drawer’s position in the grid, there are between
4 and 12 distinct possible combinations of two
neighbours in a relational description; that each
candidate description only needs to describe one
of the contained drawers distinctly to distinguish
the intended referent; and that there are a large
number of non-distinguishing descriptions that be-
come distinguishing when combined with a non-
distinguishing description for one or more other
drawers, it becomes clear that the number of can-
didate descriptions involving three drawers lies in
the thousands. In fact, there are between 5136 and
8834 relational descriptions with up to two rela-
tees for each drawer, or about 6764 on average.
</bodyText>
<sectionHeader confidence="0.988437" genericHeader="method">
4 Constraints on Acceptability
</sectionHeader>
<bodyText confidence="0.999949769230769">
Of course, no sensible algorithm would generate
the set of all possible descriptions and then attempt
to select from amongst these. However, as we
noted above, generate-and-test search strategies
like those present in existing algorithms will fail to
discover many acceptable descriptions. We would
like, therefore, to see if we can identify ways of
constraining this space of possible descriptions to
a more manageable set; any constraints so de-
termined might then form the basis of a revised
generate-and-test search strategy that does not fo-
cus on minimality, but rather on acceptability, and
is able to find all acceptable solutions, not just one.
On the basis of an examination of the kinds
of referring expressions produced by our graph-
based algorithm for this domain, we first define
in Section 4.1 two ‘whitelist’ rules that allow us
to identify a number of referring expressions that
are considered acceptable under all circumstances.
We then go on in Section 4.2 to describe a collec-
tion of ‘blacklist’ constraints which exclude cer-
tain types of referring expressions as unaccept-
able. Finally, in Section 4.4 we provide three ex-
amples of rules that can be used for ranking the re-
maining referring expressions in this domain and,
we believe, other grid-based domains.
</bodyText>
<subsectionHeader confidence="0.995755">
4.1 Whitelist rules
</subsectionHeader>
<bodyText confidence="0.999850538461538">
Minimality: In any domain, if the description is
a minimal distinguishing description, it is consid-
ered acceptable, where a minimal referring expres-
sion is definedas a shortest possible one.3
Non-relationality: In domains with only a small
number of available attributive properties for each
entity, as is the case in the drawer domain, we will
consider all non-relational distinguishing referring
expressions as acceptable, regardless of any re-
dundancy they contain. In other domains, descrip-
tions using long lists of attributive properties may
become too long and cumbersome, and may lead
to false implicatures.
</bodyText>
<subsectionHeader confidence="0.998769">
4.2 Blacklist constraints
</subsectionHeader>
<bodyText confidence="0.999975230769231">
After applying these two white-list rules, we can
direct our focus towards the remaining descrip-
tions, which will either be non-minimal (i.e., over-
specified), relational, or both. We make two gen-
eral observations regarding constraints on the ac-
ceptability of these types of referring expressions.
Firstly, the two categories of properties in grid-
based domains discussed in Section 2.2 have an
impact on the acceptability of overspecification
in referring expressions. We observe that it
seems to be the case that informationally redun-
dant intrinsic properties are more useful—or even
desirable— than redundant positional properties.
</bodyText>
<footnote confidence="0.999122333333333">
3See (Dale, 1989). For present purposes, we will assume
that all descriptions are ‘accessible’, in that they can be de-
termined by the listener to be true of the intended referent.
</footnote>
<page confidence="0.997739">
117
</page>
<bodyText confidence="0.994005465116279">
For example, while the mention of the relatee and
its colour in the pink drawer in the far right that’s
below the yellow drawer is unnecessary, this de-
scription is clearly more acceptable than the pink
drawer in the far right that’s below the drawer in
the top row, where instead of colour, the row prop-
erty is included for the relatee.
Secondly, we observe that, in our human-
produced data, relations are only used under two
circumstances:
(a) The attributive properties of the relatee are
more visually salient than those of the target.
So, the target gets described mainly in terms
of its relation to a more salient entity, as for
example in the book left of the huge black lex-
icon in the bottom shelf.
(b) The combination of properties of target and
relatee, including the relation holding be-
tween them, is more or as visually salient as
the target alone. An example of this, taken
from our human-produced data set, is the
yellow drawer that’s above another yellow
drawer for drawer d6.
Note also, as discussed in Section 3.1, that we
have already ruled out those descriptions which
are not distinguishing descriptions. We then pro-
pose the following constraints to further reduce the
space of acceptable referring expressions.
C1: No relatees without attributes: A refer-
ring expression should at least contain one attribu-
tive property for each relatee to the referent. In
most domains the minimum requirement is that
the type of each entity is included. This is a com-
monly observed phenomenon, of course, and is of-
ten catered for in algorithms by means of a spe-
cial case ‘necessary-inclusion’ rule. Note, how-
ever, that for highly connected domains where all
the referents are of the same type (as in our drawer
domain), this constraint also excludes descriptions
containing only type as the attributive property
used for a relatee. Consequently, Examples (1)
and (2) are excluded by this constraint, while Ex-
ample (3) is not:
</bodyText>
<listItem confidence="0.9985758">
(1) the blue drawer in the first column below an-
other drawer
(2) the thick book in the third shelf from the top,
left of another book
(3) the bush under the tree
</listItem>
<bodyText confidence="0.9257425">
This constraint reduces the average number of de-
scriptions per drawer from about 212 to 200.
C2: No relatee without salient properties: Ei-
ther the relatee itself or the combination of the re-
latee and the intended referent need to be as read-
ily locatable as the referent described in only at-
tributive terms. If this is not the case, the men-
tion of the relatee renders the expression more in-
formative than required and adds the potential for
confusion. While the visual salience of an entity
or specific properties is difficult to determine for
most domains, in the drawer domain it is straight-
forward that the two properties that can contribute
to the visual salience of an entity are its colour and
its being in the corner position. We therefore ex-
clude descriptions containing relatees without ei-
ther of these two properties, such as:
(4) the yellow drawer in the second row, third
column that’s left of the drawer in the second
row, fourth column
(5) the pink drawer left of the drawer in the bot-
tom row, third column.
This constraint reduces the average number of de-
scriptions per drawer by another 65 to about 135.
C3: No grid properties for less salient relatees:
In regular grid-based domains, it appears there is
no good reason to include row and column proper-
ties for relatees. This information can either be in-
ferred from the intended referent, or forces the lis-
tener to perform the opposite inference to find the
location of the intended referent. This constraint
excludes descriptions such as the following:
</bodyText>
<listItem confidence="0.955746">
(6) the big red book next to the little booklet,
which is the fourth book from the left in the
second shelf from the bottom
(7) the blue drawer in the second row left of the
yellow drawer in the third column
</listItem>
<bodyText confidence="0.999511875">
The only cases where grid information for a rela-
tee might be useful are (i) situations where the re-
latee is more easily locatable than the intended ref-
erent (as in Example 8), and (ii) situations where
the relatee only has the bit of grid property it
shares with the intended referent and no other grid
information is contained in the referring expres-
sion (as in Example 9).4
</bodyText>
<footnote confidence="0.999835">
4Note that, in the second case, the PP attachment ambigu-
ity means that we can see in the leftmost column to be either
</footnote>
<page confidence="0.981808">
118
</page>
<listItem confidence="0.7114645">
(8) the blue book below the fat brown dictionary
in the third shelf from the top
(9) the blue drawer above the orange drawer in
the leftmost column
</listItem>
<subsectionHeader confidence="0.995316">
4.3 Status of the Constraints
</subsectionHeader>
<bodyText confidence="0.999984">
In the previous section, we offered three domain-
specific constraints on acceptable reference that
substantially reduce the number of logically pos-
sible descriptions that we might want to consider.
The constraints are based on our observations on
the data; while the real status of the constraints
requires more rigorous experimental testing, we
would suggest that they do seem intuitively plausi-
ble when expressed as general rules, and they also
succeed in ruling out specific referring expressions
that are plausibly dispreferred.
To back up our intuition, we conducted a small
evaluation exercise where seven native English
speakers were asked to directly compare pairs of
randomly chosen descriptions. One description
in every pair was from the set of left over ac-
ceptable descriptions for one drawer; the other
one was taken from the set of descriptions for the
same drawer that were excluded by the constraints.
Each participant could choose to compare between
5 and 20 pairs for 4 drawers each, which resulted
in 361 comparisons.
Overall, the participants preferred the descrip-
tion from the set deemed acceptable in 69% of the
cases. The descriptions considered acceptable by
C1 and C3 were chosen in 64% of the cases, while
the hypothesis of C2 was supported in 78% of the
cases. Interestingly, there were two participants
who overall slightly preferred the descriptions ex-
cluded by the constraints.
While these numbers are mildly encouraging in
the characterisation of the constraints presented
here, we do not claim that it is ultimately the cor-
rect one. Our main point here is that we need to
identify such constraints for any given domain or
class of domains.
</bodyText>
<subsectionHeader confidence="0.79167">
4.4 Rules for Ranking
</subsectionHeader>
<bodyText confidence="0.985244095238095">
After applying the black-list constraints, we are
still left with a fairly large number of possible de-
scriptions. We are less confident of ruling sub-
sets of these out as unacceptable, but it does seem
to us that some are more acceptable than others.
a property of the intended referent or of the relatee. This
constraint results in an average of about 66 descriptions per
drawer.
We suggest, therefore, that we may also require a
number of general ranking rules along the follow-
ing lines.
R1: Not too many positional properties: In
small grid domains, it seems desirable to either
exclude all positional properties, or to use at most
one bit of grid information. The smaller a domain,
the less need there is to direct the hearer’s focus
towards the intended referent by the use of more
and more precise position information.
Most relational descriptions in our human-
produced set for the drawer domain are of the type
(colour–relation–colour):
</bodyText>
<listItem confidence="0.756577666666667">
(10) the yellow drawer that’s above another yel-
low drawer
(11) the blue drawer above the pink drawer
</listItem>
<bodyText confidence="0.999933363636364">
However, there are three examples of relational
descriptions containing one bit of grid information
in our human-produced data, and other examples
with more position information than this cannot be
excluded on the grounds of not being contained in
a data set of only 140 items.
If we choose to limit relational descriptions in
the drawer domain to at most one bit of grid infor-
mation, the average number of descriptions after
applying the blacklist constraints decreases by 35
to about 31.
As this is a fairly large reduction, we included
this rule in our evaluation exercise and found that
only 54% of the comparisons turned out in its
favour. However, without the vote of the two par-
ticipants who overall preferred the excluded de-
scriptions, the hypothesis of R1 was supported in
70% of the cases.
R2: Always use location: The opposite effect
emerges in larger domains: the bigger the search
space, the more helpful positional information is
in directing the hearer’s focus into the relevant
area of the domain. This is especially true for uni-
form domains, where most entities have the same
type and other attributive properties of similar
salience. For example, in a large bookshelf con-
taining only randomly-ordered small paperbacks
in many different colours, a referring expression
only containing intrinsic properties such as colour,
size, or title is unlikely to be very helpful.
R3: No relational descriptions: In very small
domains, it can be best to exclude all relational de-
scriptions, given that each object can be described
</bodyText>
<page confidence="0.996905">
119
</page>
<bodyText confidence="0.992807666666667">
uniquely using only attributive properties. In a
3 x 3 grid, descriptions such as the small blue ob-
ject left of the red object in the top right corner or
even the blue object left of the red object will al-
ways be significantly more cumbersome than non-
relational descriptions.
</bodyText>
<sectionHeader confidence="0.998715" genericHeader="conclusions">
5 Conclusions and Future Work
</sectionHeader>
<bodyText confidence="0.999980571428572">
In this paper, we have taken the view that the pro-
cess of referring expression generation fundamen-
tally involves domain-specific principles. This po-
sition does not need to result in chaos, with every
domain having its own hand-crafted rules for ref-
erence; rather, we propose that referential domains
are ordered in a subsumption hierarchy, which al-
lows us to group domains according to common
characteristics. These characteristics can help us
define what counts as an acceptable referring ex-
pression for domains of a given type. To illus-
trate our claim, we explore the use of constraints in
grid-based domains, using our drawer domain as a
specific example, and show how this allows us to
reduce the very large set of logically possible de-
scriptions to a more manageable set of acceptable
descriptions.
Evidence from human-produced referring ex-
pressions shows that for any given object a variety
of acceptable descriptions exist. This runs con-
trary to the prevailing assumption that the aim of a
referring expression generation system should be
to find only one best description for a target refer-
ent. We have provided an approach to determin-
ing acceptability that denies this assumption, and
is more in line with real human behaviour.
There are some clear steps forward from the po-
sition taken in this paper.
</bodyText>
<listItem confidence="0.973304846153846">
• First, we need to develop algorithms that can
use the kinds of constraints we have dis-
cussed, so that we don’t have to generate all
the bad referring expressions to find the good
ones.
• There are a range of psycholinguistic exper-
iments that could be carried out both to val-
idate the constraints and rules we have iden-
tified, and to test algorithms based on these
constraints.
• More generally, the notion of a hierarchy of
referential domains requires further explo-
ration.
</listItem>
<bodyText confidence="0.999934857142857">
In conclusion, it is clear that humans can produce
many acceptable referring expressions for a given
intended referent. We have argued that a focus on
minimality and single ‘best’ solutions has allowed
the field to avoid the fact that the range of accept-
able descriptions can only be characterised by ref-
erence to characteristics of the domain in question.
</bodyText>
<sectionHeader confidence="0.999181" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999855204545455">
Dale, R. and Haddock, N. 1991. Generating referring
expressions involving relations. In Proceedings of
the 5th Conference of the European Chapter of the
ACL, 161–166, Berlin, Germany.
Dale, R. and Reiter, E. 1995. Computational in-
terpretations of the Gricean maxims in the gener-
ation of referring expressions. Cognitive Science,
19(2):233–263.
Dale, R., Geldof, S., and Prost, J. 2002. Generat-
ing more natural route descriptions. In Proceed-
ings of the Australasian Natural Language Process-
ing Workshop, Canberra, Australia.
Dale, R. 1989. Generating recipes: An overview of
EPICURE. In Proceedings of the 2nd European
Workshop on Natural Language Generation, Edin-
burgh, UK.
Gardent, C. 2002. Generating minimal definite de-
scriptions. In Proceedings of the 40th Annual Meet-
ing of the Association for Computational Linguis-
tics, Philadelphia, PA, USA.
Gatt, A. 2006. Generating collective spatial refer-
ences. In Proceedings of the 28th Annual Meeting of
the Cognitive Science Society, Vancouver, Canada.
Krahmer, E., van Erk, S., and Verleg, A. 2003. Graph-
based generation of referring expressions. Compu-
tational Linguistics, 29(1):53–72.
van Deemter, K. and Krahmer, E. 2007, to appear.
Graphs and Booleans: On the generation of referring
expressions. In Bunt, H. and Muskens, R. (Eds.),
Computing Meaning, vol. 3, 17–53. Kluwer, Dor-
drecht, The Netherlands.
Varges, S. and van Deemter, K. 2005. Generating re-
ferring expressions containing quantifiers. In Pro-
ceedings of the 6th International Worskhop on Com-
putational Semantics, Tilburg, The Netherlands.
Viethen, J. and Dale, R. 2006. Algorithms for gener-
ating referring expressions: Do they do what people
do? In Proceedings of the 4th International Confer-
ence on Natural Language Generation, 63–70, Syd-
ney, Australia.
Viethen, J. and Dale, R. to appear. Evaluation in
natural language generation: Lessons from referring
expression generation. Traitement Automatique des
Langues, 47(3).
</reference>
<page confidence="0.996276">
120
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.983075">
<title confidence="0.999475">Capturing Acceptable Variation in Distinguishing Descriptions</title>
<author confidence="0.990878">Jette Viethen</author>
<author confidence="0.990878">Robert</author>
<affiliation confidence="0.9986835">Centre for Language Macquarie University, Sydney,</affiliation>
<abstract confidence="0.999704555555555">Almost all existing referring expression generation algorithms aim to find one best referring expression for a given intended referent. However, human-produced data demonstrates that, for any given entity, many perfectly acceptable referring expressions exist. At the same time, it is not the case that all logically possible descriptions are acceptable; so, if we remove the requirement to produce only one best solution, how do we avoid generating undesirable descriptions? Our aim in this paper is to sketch a framework that allows us to capture constraints on referring expression generation, so that the set of logically possible descriptions can be reduced to just those that are acceptable.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>R Dale</author>
<author>N Haddock</author>
</authors>
<title>Generating referring expressions involving relations.</title>
<date>1991</date>
<booktitle>In Proceedings of the 5th Conference of the European Chapter of the ACL,</booktitle>
<pages>161--166</pages>
<location>Berlin, Germany.</location>
<contexts>
<context position="1054" citStr="Dale and Haddock, 1991" startWordPosition="151" endWordPosition="154">le referring expressions exist. At the same time, it is not the case that all logically possible descriptions are acceptable; so, if we remove the requirement to produce only one best solution, how do we avoid generating undesirable descriptions? Our aim in this paper is to sketch a framework that allows us to capture constraints on referring expression generation, so that the set of logically possible descriptions can be reduced to just those that are acceptable. 1 Introduction The literature contains many algorithms for the generation of referring expressions: see, for example, (Dale, 1989; Dale and Haddock, 1991; Gardent, 2002; Varges and van Deemter, 2005; Gatt, 2006). These algorithms generally attempt to produce a single ‘best’ referring expression for a given intended referent. What counts as ‘best’ is generally defined in terms of minimality and the redundancy of information: the best referring expression is the shortest possible distinguishing description, usually defined in terms of the number of properties expressed. At the same time, some researchers (for example, (Dale and Reiter, 1995; Krahmer et al., 2003)) have noted that humanproduced referring expressions are often not minimal in this </context>
<context position="6914" citStr="Dale and Haddock, 1991" startWordPosition="1096" endWordPosition="1099">gly, as far as we are aware, no significant studies have been carried out to determine how such preference orderings might actually be identified in any given domain. Figure 1: The filing cabinets the grid, as shown in Figure 1. In exploring the generation and evaluation of referring expressions in this domain, we determined that specific characteristics of the domain have a considerable influence on the performance of different algorithms. In (Viethen and Dale, 2006) we discuss how the very good performance of the IA, and the contrasting unexpectedly bad results for the Relational Algorithm (Dale and Haddock, 1991), are mainly due to the peculiarities of the drawer domain. In particular, the domain’s regular grid-like layout and the uniformity of the possible referents with regard to their types and properties put the Relational Algorithm, at least as originally specified, at a great disadvantage. This does not mean, however, that more specifically-tailored solutions for reference in this domain are then so tied to the description of filing cabinets that they cannot be used for anything else. Rather, we take the view that our specific domain of enquiry is an instance of a more general class of domains, </context>
<context position="13554" citStr="Dale and Haddock (1991)" startWordPosition="2228" endWordPosition="2231">r be 115 used in a referring expression describing either of these two entities. In the drawer domain, a hearer would always understand the drawer below the orange drawer in the top row to be d7, the drawer directly below d2, not d10 or d15. Our point here is that the nature of the domain has an impact on how the properties available in that domain might be used to refer to entities. Most importantly, these domain characteristics impact on the applicability of ‘general purpose’ algorithms, as we saw in (Viethen and Dale, 2006) with regard to the poor performance of the relational algorithm of Dale and Haddock (1991) in a new domain. 3 The Space of Descriptions 3.1 The Possible and the Acceptable In any domain where entities are described via a finite set of properties and relations, there are a finite number of possible descriptions of a given entity. We might think of these as the set of logically possible referring expressions. This set will of course be combinatorial in the number of properties and related entities. Even if we limit the set to those which are distinguishing descriptions,we are still faced with a large set of descriptions to choose from. Existing algorithms effectively provide ways to </context>
</contexts>
<marker>Dale, Haddock, 1991</marker>
<rawString>Dale, R. and Haddock, N. 1991. Generating referring expressions involving relations. In Proceedings of the 5th Conference of the European Chapter of the ACL, 161–166, Berlin, Germany.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Dale</author>
<author>E Reiter</author>
</authors>
<title>Computational interpretations of the Gricean maxims in the generation of referring expressions.</title>
<date>1995</date>
<journal>Cognitive Science,</journal>
<volume>19</volume>
<issue>2</issue>
<contexts>
<context position="1547" citStr="Dale and Reiter, 1995" startWordPosition="226" endWordPosition="229">ture contains many algorithms for the generation of referring expressions: see, for example, (Dale, 1989; Dale and Haddock, 1991; Gardent, 2002; Varges and van Deemter, 2005; Gatt, 2006). These algorithms generally attempt to produce a single ‘best’ referring expression for a given intended referent. What counts as ‘best’ is generally defined in terms of minimality and the redundancy of information: the best referring expression is the shortest possible distinguishing description, usually defined in terms of the number of properties expressed. At the same time, some researchers (for example, (Dale and Reiter, 1995; Krahmer et al., 2003)) have noted that humanproduced referring expressions are often not minimal in this sense, and so variations on these algorithms weaken this requirement, while still tending to embody a ‘shorter is better’ criterion. This focus on minimality has the consequence that it allows us to ignore the abundant evidence that any intended referent can be successfully and appropriately referred to by a large number of referring expressions, many of which involve some redundancy; see, for example, the data described in (Viethen and Dale, 2006). Once we remove the requirement of minim</context>
<context position="3871" citStr="Dale and Reiter, 1995" startWordPosition="610" endWordPosition="613"> we enumerate a collection of constraints on acceptable reference that we have identified as being applicable in the domains under consideration here. Finally, in Section 5, we draw some conclusions and consider how the ideas presented in this paper might be taken further. 2 Domain Specificity 2.1 On the Generality of Solutions Early algorithms for referring expression generation (for example, (Dale, 1989)) attempted to provide domain-independent characterisations of what makes a good referring expression. Subsequent work, and specifically that in the spirit of the Incremental Algorithm (IA; (Dale and Reiter, 1995)) acknowledged that there were domain-specific aspects to the problem; in the case of the IA, this involved using a gen113 eral, domain-independent algorithm in conjunction with domain-specific preference orderings over the available properties to be used in descriptions. With the question of domain-specificity conveniently delegated to the subtask of determining appropriate preference orderings, research in this area typically then goes on to explore only a single chosen domain.1 Our suspicion is that domain-specific characteristics have a much greater impact on the problem of referring expre</context>
</contexts>
<marker>Dale, Reiter, 1995</marker>
<rawString>Dale, R. and Reiter, E. 1995. Computational interpretations of the Gricean maxims in the generation of referring expressions. Cognitive Science, 19(2):233–263.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Dale</author>
<author>S Geldof</author>
<author>J Prost</author>
</authors>
<title>Generating more natural route descriptions.</title>
<date>2002</date>
<booktitle>In Proceedings of the Australasian Natural Language Processing Workshop,</booktitle>
<location>Canberra, Australia.</location>
<contexts>
<context position="4538" citStr="Dale et al. (2002)" startWordPosition="710" endWordPosition="713">pects to the problem; in the case of the IA, this involved using a gen113 eral, domain-independent algorithm in conjunction with domain-specific preference orderings over the available properties to be used in descriptions. With the question of domain-specificity conveniently delegated to the subtask of determining appropriate preference orderings, research in this area typically then goes on to explore only a single chosen domain.1 Our suspicion is that domain-specific characteristics have a much greater impact on the problem of referring expression generation than this simple view suggests. Dale et al. (2002) suggested that additional higher-level domain-specific reference strategies were required to provide more guidance over the process of referring expression generation. Here, we note that a monotonic combination of the costs or rankings of potential attributes, as suggested by Krahmer et al. (2003), is based on the assumption that adding another property to an already distinguishing referring expression will never make the expression better; but this is by no means always the case. In many instances the incorporation of another property — such as a visually very salient one — can increase the </context>
</contexts>
<marker>Dale, Geldof, Prost, 2002</marker>
<rawString>Dale, R., Geldof, S., and Prost, J. 2002. Generating more natural route descriptions. In Proceedings of the Australasian Natural Language Processing Workshop, Canberra, Australia.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Dale</author>
</authors>
<title>Generating recipes: An overview of EPICURE.</title>
<date>1989</date>
<booktitle>In Proceedings of the 2nd European Workshop on Natural Language Generation,</booktitle>
<location>Edinburgh, UK.</location>
<contexts>
<context position="1030" citStr="Dale, 1989" startWordPosition="149" endWordPosition="150">tly acceptable referring expressions exist. At the same time, it is not the case that all logically possible descriptions are acceptable; so, if we remove the requirement to produce only one best solution, how do we avoid generating undesirable descriptions? Our aim in this paper is to sketch a framework that allows us to capture constraints on referring expression generation, so that the set of logically possible descriptions can be reduced to just those that are acceptable. 1 Introduction The literature contains many algorithms for the generation of referring expressions: see, for example, (Dale, 1989; Dale and Haddock, 1991; Gardent, 2002; Varges and van Deemter, 2005; Gatt, 2006). These algorithms generally attempt to produce a single ‘best’ referring expression for a given intended referent. What counts as ‘best’ is generally defined in terms of minimality and the redundancy of information: the best referring expression is the shortest possible distinguishing description, usually defined in terms of the number of properties expressed. At the same time, some researchers (for example, (Dale and Reiter, 1995; Krahmer et al., 2003)) have noted that humanproduced referring expressions are of</context>
<context position="3658" citStr="Dale, 1989" startWordPosition="582" endWordPosition="583"> descriptions, distinguishing the two notions of logically possible description and acceptable description and presenting some statistics that demonstrate the scale of the problem we face. In Section 4, we enumerate a collection of constraints on acceptable reference that we have identified as being applicable in the domains under consideration here. Finally, in Section 5, we draw some conclusions and consider how the ideas presented in this paper might be taken further. 2 Domain Specificity 2.1 On the Generality of Solutions Early algorithms for referring expression generation (for example, (Dale, 1989)) attempted to provide domain-independent characterisations of what makes a good referring expression. Subsequent work, and specifically that in the spirit of the Incremental Algorithm (IA; (Dale and Reiter, 1995)) acknowledged that there were domain-specific aspects to the problem; in the case of the IA, this involved using a gen113 eral, domain-independent algorithm in conjunction with domain-specific preference orderings over the available properties to be used in descriptions. With the question of domain-specificity conveniently delegated to the subtask of determining appropriate preferenc</context>
<context position="22040" citStr="Dale, 1989" startWordPosition="3613" endWordPosition="3614">es, we can direct our focus towards the remaining descriptions, which will either be non-minimal (i.e., overspecified), relational, or both. We make two general observations regarding constraints on the acceptability of these types of referring expressions. Firstly, the two categories of properties in gridbased domains discussed in Section 2.2 have an impact on the acceptability of overspecification in referring expressions. We observe that it seems to be the case that informationally redundant intrinsic properties are more useful—or even desirable— than redundant positional properties. 3See (Dale, 1989). For present purposes, we will assume that all descriptions are ‘accessible’, in that they can be determined by the listener to be true of the intended referent. 117 For example, while the mention of the relatee and its colour in the pink drawer in the far right that’s below the yellow drawer is unnecessary, this description is clearly more acceptable than the pink drawer in the far right that’s below the drawer in the top row, where instead of colour, the row property is included for the relatee. Secondly, we observe that, in our humanproduced data, relations are only used under two circumst</context>
</contexts>
<marker>Dale, 1989</marker>
<rawString>Dale, R. 1989. Generating recipes: An overview of EPICURE. In Proceedings of the 2nd European Workshop on Natural Language Generation, Edinburgh, UK.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C Gardent</author>
</authors>
<title>Generating minimal definite descriptions.</title>
<date>2002</date>
<booktitle>In Proceedings of the 40th Annual Meeting of the Association for Computational Linguistics,</booktitle>
<location>Philadelphia, PA, USA.</location>
<contexts>
<context position="1069" citStr="Gardent, 2002" startWordPosition="155" endWordPosition="156"> exist. At the same time, it is not the case that all logically possible descriptions are acceptable; so, if we remove the requirement to produce only one best solution, how do we avoid generating undesirable descriptions? Our aim in this paper is to sketch a framework that allows us to capture constraints on referring expression generation, so that the set of logically possible descriptions can be reduced to just those that are acceptable. 1 Introduction The literature contains many algorithms for the generation of referring expressions: see, for example, (Dale, 1989; Dale and Haddock, 1991; Gardent, 2002; Varges and van Deemter, 2005; Gatt, 2006). These algorithms generally attempt to produce a single ‘best’ referring expression for a given intended referent. What counts as ‘best’ is generally defined in terms of minimality and the redundancy of information: the best referring expression is the shortest possible distinguishing description, usually defined in terms of the number of properties expressed. At the same time, some researchers (for example, (Dale and Reiter, 1995; Krahmer et al., 2003)) have noted that humanproduced referring expressions are often not minimal in this sense, and so v</context>
</contexts>
<marker>Gardent, 2002</marker>
<rawString>Gardent, C. 2002. Generating minimal definite descriptions. In Proceedings of the 40th Annual Meeting of the Association for Computational Linguistics, Philadelphia, PA, USA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Gatt</author>
</authors>
<title>Generating collective spatial references.</title>
<date>2006</date>
<booktitle>In Proceedings of the 28th Annual Meeting of the Cognitive Science Society,</booktitle>
<location>Vancouver, Canada.</location>
<contexts>
<context position="1112" citStr="Gatt, 2006" startWordPosition="162" endWordPosition="163">that all logically possible descriptions are acceptable; so, if we remove the requirement to produce only one best solution, how do we avoid generating undesirable descriptions? Our aim in this paper is to sketch a framework that allows us to capture constraints on referring expression generation, so that the set of logically possible descriptions can be reduced to just those that are acceptable. 1 Introduction The literature contains many algorithms for the generation of referring expressions: see, for example, (Dale, 1989; Dale and Haddock, 1991; Gardent, 2002; Varges and van Deemter, 2005; Gatt, 2006). These algorithms generally attempt to produce a single ‘best’ referring expression for a given intended referent. What counts as ‘best’ is generally defined in terms of minimality and the redundancy of information: the best referring expression is the shortest possible distinguishing description, usually defined in terms of the number of properties expressed. At the same time, some researchers (for example, (Dale and Reiter, 1995; Krahmer et al., 2003)) have noted that humanproduced referring expressions are often not minimal in this sense, and so variations on these algorithms weaken this r</context>
<context position="16186" citStr="Gatt, 2006" startWordPosition="2653" endWordPosition="2654">tion 4, we propose some plausible constraints on this space of possible descriptions. 3.2 The Size of the Space In our present work, we use an algorithm which is based on the graph-based framework for referring expression generation described in Krahmer et al. (2003) to generate all logically possible distinguishing descriptions for a target referent. We concentrate on referring expressions containing simple attributive properties and binary relations between pairs of entities. More complex expressions involving plurals, and Boolean combinations of properties or quantifiers (see among others (Gatt, 2006), Varges and van Deemter (2005) and van Deemter and Krahmer (2007 to appear)) are not included in our current investigation; but even without these, the number of possible descriptions we have to consider is very large. The attributive properties we encode for the drawer domain are colour, row and column for all drawers, and position with the value corner for the four corner drawers. Of the relational properties, only above and left-of are explicitly encoded, so as to avoid circularity. It is left to the realisation level to determine whether to realise the edge (a above b) as A which is above</context>
</contexts>
<marker>Gatt, 2006</marker>
<rawString>Gatt, A. 2006. Generating collective spatial references. In Proceedings of the 28th Annual Meeting of the Cognitive Science Society, Vancouver, Canada.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Krahmer</author>
<author>S van Erk</author>
<author>A Verleg</author>
</authors>
<title>Graphbased generation of referring expressions.</title>
<date>2003</date>
<journal>Computational Linguistics,</journal>
<volume>29</volume>
<issue>1</issue>
<marker>Krahmer, van Erk, Verleg, 2003</marker>
<rawString>Krahmer, E., van Erk, S., and Verleg, A. 2003. Graphbased generation of referring expressions. Computational Linguistics, 29(1):53–72.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K van Deemter</author>
<author>E Krahmer</author>
</authors>
<title>to appear. Graphs and Booleans: On the generation of referring expressions.</title>
<date>2007</date>
<journal>In</journal>
<volume>3</volume>
<pages>17--53</pages>
<publisher>Kluwer,</publisher>
<location>Dordrecht, The Netherlands.</location>
<marker>van Deemter, Krahmer, 2007</marker>
<rawString>van Deemter, K. and Krahmer, E. 2007, to appear. Graphs and Booleans: On the generation of referring expressions. In Bunt, H. and Muskens, R. (Eds.), Computing Meaning, vol. 3, 17–53. Kluwer, Dordrecht, The Netherlands.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Varges</author>
<author>K van Deemter</author>
</authors>
<title>Generating referring expressions containing quantifiers.</title>
<date>2005</date>
<booktitle>In Proceedings of the 6th International Worskhop on Computational Semantics,</booktitle>
<location>Tilburg, The Netherlands.</location>
<marker>Varges, van Deemter, 2005</marker>
<rawString>Varges, S. and van Deemter, K. 2005. Generating referring expressions containing quantifiers. In Proceedings of the 6th International Worskhop on Computational Semantics, Tilburg, The Netherlands.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Viethen</author>
<author>R Dale</author>
</authors>
<title>Algorithms for generating referring expressions: Do they do what people do?</title>
<date>2006</date>
<booktitle>In Proceedings of the 4th International Conference on Natural Language Generation,</booktitle>
<location>63–70, Sydney, Australia.</location>
<contexts>
<context position="2106" citStr="Viethen and Dale, 2006" startWordPosition="317" endWordPosition="320">same time, some researchers (for example, (Dale and Reiter, 1995; Krahmer et al., 2003)) have noted that humanproduced referring expressions are often not minimal in this sense, and so variations on these algorithms weaken this requirement, while still tending to embody a ‘shorter is better’ criterion. This focus on minimality has the consequence that it allows us to ignore the abundant evidence that any intended referent can be successfully and appropriately referred to by a large number of referring expressions, many of which involve some redundancy; see, for example, the data described in (Viethen and Dale, 2006). Once we remove the requirement of minimality, and admit that there are many possible acceptable solutions to the problem of how to refer to an intended referent, we are faced with a new problem: for any given entity, there are many logically possible distinguishing descriptions, and we need some way to navigate this space of possibilities, so that we can at least separate the acceptable from the less acceptable. This paper attempts to establish a framework for thinking about this problem. In Section 2, we begin by first discussing the question of domain-specificity; our argument here is that</context>
<context position="6763" citStr="Viethen and Dale, 2006" startWordPosition="1072" endWordPosition="1075"> a four-by-four grid. Four drawers each have one of four colours (yellow, orange, pink and blue); the colours are distributed randomly over 1Interestingly, as far as we are aware, no significant studies have been carried out to determine how such preference orderings might actually be identified in any given domain. Figure 1: The filing cabinets the grid, as shown in Figure 1. In exploring the generation and evaluation of referring expressions in this domain, we determined that specific characteristics of the domain have a considerable influence on the performance of different algorithms. In (Viethen and Dale, 2006) we discuss how the very good performance of the IA, and the contrasting unexpectedly bad results for the Relational Algorithm (Dale and Haddock, 1991), are mainly due to the peculiarities of the drawer domain. In particular, the domain’s regular grid-like layout and the uniformity of the possible referents with regard to their types and properties put the Relational Algorithm, at least as originally specified, at a great disadvantage. This does not mean, however, that more specifically-tailored solutions for reference in this domain are then so tied to the description of filing cabinets that </context>
<context position="13463" citStr="Viethen and Dale, 2006" startWordPosition="2213" endWordPosition="2216">bject3 is also below object1. However, this relation between object1 and object3 would never be 115 used in a referring expression describing either of these two entities. In the drawer domain, a hearer would always understand the drawer below the orange drawer in the top row to be d7, the drawer directly below d2, not d10 or d15. Our point here is that the nature of the domain has an impact on how the properties available in that domain might be used to refer to entities. Most importantly, these domain characteristics impact on the applicability of ‘general purpose’ algorithms, as we saw in (Viethen and Dale, 2006) with regard to the poor performance of the relational algorithm of Dale and Haddock (1991) in a new domain. 3 The Space of Descriptions 3.1 The Possible and the Acceptable In any domain where entities are described via a finite set of properties and relations, there are a finite number of possible descriptions of a given entity. We might think of these as the set of logically possible referring expressions. This set will of course be combinatorial in the number of properties and related entities. Even if we limit the set to those which are distinguishing descriptions,we are still faced with a</context>
<context position="17611" citStr="Viethen and Dale, 2006" startWordPosition="2888" endWordPosition="2891">ntities can maximally be included in each referring expression. We currently investigate referring expressions involving no more than two entities. Three reasons justify this seemingly low cut off: firstly, as each entity in our domain has 3–4 attributive properties, it seems unnecessary to consider descriptions containing long chains of relations such as the blue drawer above the blue drawer left of the drawer in the third row below the yellow drawer; secondly, our set of 140 human-produced descriptions for 2For representational issues in the drawer domain and the graph-based framework, see (Viethen and Dale, 2006) and (Krahmer et al., 2003) respectively. 116 this domain contains only four relational descriptions with more than one relation; and finally and most practically, allowing more than two entities in a description extends the set of descriptions to be considered from hundreds to thousands. If we allow maximally one related entity to be included alongside the intended referent, it turns out that we have an average of about 212 possible distinguishing descriptions per drawer. For example, for drawer d1 in Figure 1, the number of candidate descriptions consists of the following sets, where ‘DD’ me</context>
</contexts>
<marker>Viethen, Dale, 2006</marker>
<rawString>Viethen, J. and Dale, R. 2006. Algorithms for generating referring expressions: Do they do what people do? In Proceedings of the 4th International Conference on Natural Language Generation, 63–70, Sydney, Australia.</rawString>
</citation>
<citation valid="false">
<authors>
<author>J Viethen</author>
<author>R Dale</author>
</authors>
<title>to appear. Evaluation in natural language generation: Lessons from referring expression generation.</title>
<booktitle>Traitement Automatique des Langues,</booktitle>
<volume>47</volume>
<issue>3</issue>
<marker>Viethen, Dale, </marker>
<rawString>Viethen, J. and Dale, R. to appear. Evaluation in natural language generation: Lessons from referring expression generation. Traitement Automatique des Langues, 47(3).</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>