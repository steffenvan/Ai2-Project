<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<title confidence="0.983431">
Automated Mining Of Names Using Parallel Hindi-English Corpus
</title>
<author confidence="0.997965">
R. Mahesh K. Sinha
</author>
<affiliation confidence="0.997693">
Indian Institute of Technology, Kanpur, India
</affiliation>
<email confidence="0.99106">
rmk@iitk.ac.in
</email>
<sectionHeader confidence="0.993686" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999242">
Machine transliteration has a number of ap-
plications in a variety of natural language
processing related tasks such as machine
translation, information retrieval and ques-
tion-answering. For automated learning of
machine transliteration, a large parallel cor-
pus of names in two scripts is required. In
this paper we present a simple yet powerful
method for automatic mining of Hindi-
English names from a parallel corpus. An
average 93% precision and 85% recall is
achieved in mining of proper names. The
method works even with a small corpus. We
compare our results with Giza++ word
alignment tool that yields 30% precision and
63% recall on the same corpora. We also
demonstrate that this very method of name
mining works for other Indian languages as
well.
</bodyText>
<sectionHeader confidence="0.998993" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999892485714286">
Transliteration of names from one
script/language to another has a number of appli-
cations in a variety of natural language
processing tasks. These include machine transla-
tion, information retrieval, question-answering,
multilingual directories, reservation charts, name
lists etc.
Machine transliteration has been studied by a
number of researchers (Knight et al., 1998; Al-
Onaizan et al., 2002; Goto et al., 2003; Huang et
al., 2003; Feng et al., 2004; Asif et al., 2006;
Kuo et al. 2006); Knight and Graehl(1998) use
a modular approach in which five probability
distributions are obtained for various phases of
the transliteration - generation and pronunciation
of English word sequences, conversion of Eng-
lish sounds to Japanese and then Japanese sounds
to Katakana writing. Al-Onaizan and Knight
(2002) present work on transliteration from Eng-
lish to Arabic. It relies on an existing named enti-
ty recognition system, which identifies possible
named entities in English. A predefined phoneme
mapping is used to generate all possible translite-
rations. The validity of transliterations is ex-
amined by rating it based on web counts, and co-
references by querying for the candidate transli-
teration on popular search engines such as
Google. Huang et al. (2003) have worked on ex-
tracting Hindi-English named entity pairs
through alignment of a parallel corpus. Chinese-
English pairs are first extracted using a dynamic
programming string matching. This Chinese-
English model is then adapted to Hindi-English
iteratively, by using already extracted Hindi-
English named entity pairs to bootstrap the mod-
el. The precision achieved by this model is
91.8%. Feng et al. (2004) have used a maximum
entropy model, in which an alignment probability
for target/source named entities is defined over 4
features - translation score, transliteration score,
co-occurrence score and distortion score. The
extraction of each feature is involved, but the
maximum entropy model over these features is
straightforward. Kuo et al. (2006) uses a syllable
alignment algorithm for cross-language syllable-
phoneme conversion. Asif et al. (2006) have con-
sidered Bengali to English transliteration. They
present a model which upon supervised training
provides direct orthographical mapping. They
report an accuracy of 69-89%. The success of all
of these works depends upon the volume and
nature of name corpora used.
In this paper, we present a simple yet power-
ful method for mining of Hindi-English names
from a parallel text corpus. In Hindi, the words
are written as they are spoken i.e. it is phonetic in
nature. On the other hand, English is non-
phonetic in the sense that there is a specified
usage of a spelling for every word. Hindi names
when written in English have a similar problem
that the users have developed their own spellings
for names that are commonly accepted. Though
these English spellings do retain the phonetic
structure of Hindi to a large extent, there are var-
iations that cannot be easily captured through
rules. In table 1 a few illustrative examples are
given. It is evident that the Hindi vowel modifi-
ers (called ‘matra’) do not have unique mappings
to English vowel combinations. It is difficult to
derive simple mapping rules for these. The map-
</bodyText>
<page confidence="0.993524">
48
</page>
<note confidence="0.9412955">
Proceedings of the 7th Workshop on Asian Language Resources, ACL-IJCNLP 2009, pages 48–54,
Suntec, Singapore, 6-7 August 2009. c�2009 ACL and AFNLP
</note>
<bodyText confidence="0.999726">
ping of semivowels ‘y’ and ‘v’ and ‘schwa’ dele-
tions are highly contextual. However, for the
consonants, the mappings are straightforward
barring a few exceptions.
Our strategy for automatic mining of Hindi-
English proper names from parallel corpus ex-
ploits this near-invariance in consonant mapping.
We compare our results with Giza++ word
alignment. In the following section, we present
our design methodology followed by experimen-
tal results and conclusions.
</bodyText>
<table confidence="0.541069023255814">
Hindi word in Hindi word in Corresponding commonly used Unacceptable English Observations
Devanagari IITK-Roman English (Roman) transliteration (Roman) transliterations
(Appendix-A)
हरȣश harISa Harish Hareesh / Hariesh / Hare- i. long vowel map-
ish ping
ii. ‘schwa’ deletion
iii. consonant cluster
mapping
संजीव saMjIva Sanjeev or Sanjiv Sanjiiv / Sanjiev /Sanjeiv i. variation in long
vowel mapping
ii. ‘schwa’ deletion
फाãगुनी PAlgunI Phalguni Falguni i. long vowel map-
ping
ii. consonant map-
ping
मूना mUnA Moona Muna / Muuna / Moonaa preferred long vo-
wel mapping
सूरज sUraja Suraj Sooraj / Suuraj / Suraz i. long vowel map-
/Surag ping
ii. ‘schwa’ deletion
iii. consonant map-
ping
सोमनाथ somanAWa Somenath or Somnath Somanath / Somanaath i. long vowel map-
ping
ii. ‘schwa’ deletion
iii. peculiar vowel
mapping to ‘e’
सÈसेना saksenA Saxena Saksena i. long vowel map-
ping
ii. preferred conso-
nant mapping
दȣͯ¢त xIkSiwa Dixit or Dikshit Deexit / Dikchhit etc. i. long vowel map-
ping
ii. ‘schwa’ deletion
iii. preferred conso-
nant mapping
मोदȣ moxI Modi Modee / Modii / Mody preferred long vo-
etc. wel mapping
सोǓनया soniyA Sonia Soniya preferred semivowel
mapping
रामदेव rAmaxeva Ramdeo Ramdev /Ramadev / Ra- preferred semivowel
देव xeva Deva madeo mapping
Deo / Dev
</table>
<tableCaption confidence="0.999776">
Table 1: An Illustration of Hindi to English Name Transliteration Variations
</tableCaption>
<sectionHeader confidence="0.935573" genericHeader="method">
2 Hindi-English Name Corpus Creation
</sectionHeader>
<bodyText confidence="0.999984277777778">
We use an aligned parallel Hindi-English text
corpus for creation of Hindi-English name cor-
pus. The size of the corpus is immaterial and it
could be as small as a few lines. The sentence
alignment also need not be perfect as long as the
aligned set of sentences contain the translated
sentences. Our methodology is even capable of
capturing to some extent mapping between old
city names with new city names such as Bombay
and Mumbai. Figure 1 depicts the process of
name mining diagrammatically.
The Hindi text written in Devanagari is first
converted to IITK-Roman form (appendix-A).
IITK-Roman has become a de-facto standard
used by a large number of researchers in India.
The conversion to IITK-Roman form is
straightforward and is a direct representation of
UTF-8 or ISSCII-8 coding schemes without any
</bodyText>
<page confidence="0.996741">
49
</page>
<bodyText confidence="0.9991715">
loss of constituent information in terms of pho-
nemes or constituent symbols. The usage of
IITK-Roman form is more for entry and pro-
gramming convenience.
</bodyText>
<subsectionHeader confidence="0.521314">
Aligned Parallel Text Corpus
</subsectionHeader>
<bodyText confidence="0.460777">
Convert to IITK-Roman form
</bodyText>
<subsectionHeader confidence="0.831631">
Collect all English words starting with upper case
</subsectionHeader>
<bodyText confidence="0.979732833333333">
For each word, apply consonant cluster map-
ping using mapping of fig. 2 in reverse fashion
Collapse each of the above word by
deleting all intervening vowels
Each collapsed word is string matched
with the Indian language words in
the corresponding aligned Indian language line.
Select the maximal ordered match word.
In case of a tie, match the intervening
vowels using mapping of figure 3
Perform Smoothening &amp; Filtering on the data
collected from the entire corpus (see text)
</bodyText>
<figureCaption confidence="0.9897245">
Figure 1: Schematic flow diagram of the
name mining process
</figureCaption>
<bodyText confidence="0.983528857142857">
As outlined earlier, in order to simplify the
learning process, the trivial consonant (C) and
+
consonant cluster (C) mappings are provided
separately in the form of rules. The main conso-
nant mappings from IITK-Roman to English are
shown in figure 2.
</bodyText>
<equation confidence="0.997870363636364">
k(�)→k/c/ck; K(N)→kh; g(7)→g; G(El)→gh;
f(g-)→n;
c(�)→ch; C(U)→chh; j(�)→j/z; J(�)→jh; F(3T)→n;
t(Z)→t; T(5)→th; d(3)→d; D(Z)→dh; N(UT)→n;
w(c)→t; W(2)→th; x(�)→d; X(U)→dh; n(F)→n;
p(q)→p; P(�)→ph/f; b(�)→b; B(3-T)→bh; m(JT)→m;
y(�)→y; r(�)→r; l(�)→l; v(�)→v/w;
s(qf)→s; S(2T)→sh; R(9)→sh; h(F)→h;
kR(U)→x; jF(�)→ gy; dZ(i$) →r;
q ((O→r/k; M((:i)→n; H((.):)→h;
ks(q&apos;qf)→x; kZ (cF)→q; jZ (3f)→z; PZ (W.)→f
</equation>
<figureCaption confidence="0.721033">
Figure 2: IITK-Roman to English consonant mapping
</figureCaption>
<figure confidence="0.503485333333333">
A (:i)→ a; i (f�)→ i; I (:&apos;1)→ i; u (��)→u;
U(��)→u; e(��)→e; E(&amp;quot;:•)→ai; o (��)→o;
O(��)→ou;
</figure>
<figureCaption confidence="0.998689">
Figure 3: IITK-Roman to English vowel mapping
</figureCaption>
<bodyText confidence="0.997538904761905">
The consonant mappings are exploited in hy-
pothesizing plausible name transliterations. Fol-
lowing steps explain the process of mining of
Hindi-English name pairs:
i. For each aligned line, collect all the words
in the English sentence that have first letter in
upper case. These are potential English proper
names excepting the first word that may or may
not be a proper name.
ii. For each word, apply consonant cluster
map-ping from English to Hindi (using the map-
ping as given in figure 2 in reverse fashion). In
absence of a defined mapping, the consonant is
ignored. This yields one or more plausible Hindi
names as there are one to many reverse map-
pings. The following three mappings are very
rare and so are ignored for efficiency: f→n;
F→n; H→h. Further, the semivowel ‘y’ is not
treated as a consonant if it is the last character of
the word. It is treated as a consonant if it is pre-
ceded or followed by a vowel.
</bodyText>
<listItem confidence="0.984365285714286">
iii. Collapse each of the above word into be-
ing part of the plausible Hindi name by deleting
all vowels in it.
iv. Each collapsed plausible Hindi name, as
de-rived in the preceding step, is string-matched
with the Hindi words in the corresponding
aligned Hindi line. The process of matching
looks for maximal ordered string match omitting
the Hindi vowels.
• In case no match is found, it is ig-
nored.
• In case of multiple matches, mi-
nimal word length distance is tak-
en as the criterion for selection.
</listItem>
<page confidence="0.63253">
50
</page>
<listItem confidence="0.9987724">
• In order to avoid false matching,
length must be greater than 1 and
at least 30% of characters must
match.
• Further, a constraint that the first
</listItem>
<bodyText confidence="0.922463695652174">
character of the mapped words
must both be either a consonant or
both be a vowel, is imposed.
v. In case two or more matches have same
maximal length match, then the maximal match
with the plausible un-collapsed (i.e. including the
intervening vowels with their mapping using fig-
ure 3) Hindi name is matched and the ordered
maximal length match is selected. Usually such a
situation is encountered when two or more simi-
lar names are encountered in the aligned lines.
An example of this would be say the two names
‘Hindi’ and ‘Hindu’ occur in the same sentence.
These will get matched to the same degree by
step (iv) above. The way to resolve this is to also
take intervening vowels into account. The IITK
Roman vowel mapping to English used here is
given in figure 3. It may be noted that only one
vowel mapping out of the many possibilities, has
been taken. This is the most frequent mapping
and is taken as the baseline vowel mapping.
vi. The final stage is that of filtering and
smoothening.
</bodyText>
<listItem confidence="0.806927166666667">
• For every English name, the corres-
ponding Hindi name mapping(s) with
their frequency of occurrence is rec-
orded for the entire corpus.
• In case of multiple mappings, each
mapping is examined. The suffix that
represent the post-position markers
such as ne (ne ने), ka(kA का), ko (ko
को), ki(kI की), ke(ke के ), se(se से),
men(meM मɅ), par(para पर), vala (vA-
lA वाला) etc. in Hindi are stemmed.
Further, other morphological co-
joiners (‘sandhi’) for other Indian
scripts are also stemmed.
• After stemming, the frequency is re-
computed.
• The mapping with the highest fre-
quency is selected.
</listItem>
<bodyText confidence="0.918514125">
Although these post-position markers in Hindi
are separate words and are usually written with a
preceding blank, many a time it is not properly
observed and appears as a suffix.
Given below is an illustrative example:
English sentence:
It goes daily from Delhi to Mumbai, Bangalore,
Varanasi and Lucknow.
</bodyText>
<figure confidence="0.862222352941177">
Aligned Hindi Sentence:
यह रोजाना िदãलȣ से मुàबई, बɇगलुǽ, वाराणसी
और लखनऊ जाती है ।
(Converted to IITK-Roman)
yaha rojAnA xillI se mumbaI, bEMgaluru,
vArANasI Ora laKanaU jAwI hE.
Probable English Proper Nouns:
It Delhi Mumbai Bangalore Varanasi Lucknow
Plausible Hindi Names after reverse consonant
substitutions:
{it iw} {delhi xelhi} {mumbai}
{bangalore baMgalore} {varanasi varaNasi va-
raMasi}{luknov lukNov lukMov}
Collapsed plausible corresponding Hindi Names:
{t w} {dlh xlh} {mmb} {bnglr bMglr}
{vrns vrNs vrMs} {lknv lkNv lkMv}
Hypothesized Hindi Names after matching:
</figure>
<equation confidence="0.8010728">
Delhi→ xillI िदãलȣ ;
Mumbai →mumbaI मुàबई;
Bangalore →bEMgaluru बɇगलुǽ;
Varanasi → vArANasI वाराणसी;
Lucknow →laKanaU लखनऊ.
</equation>
<bodyText confidence="0.997110071428571">
In the above example, the first word ‘It’ does not
get matched to any of the Hindi words because of
the constraint that the matching length has to be
greater than 1 and a minimum of 30% of length
must match.
It is interesting to note the method outlined
captures even those names that differ in their
forms or spelling such as Delhi &amp; िदãलȣ (xillI),
Bangalore &amp; बɇगलुǽ (bEMgaluru) and Lucknow
&amp; लखनऊ (laKanaU) based on maximal match.
For transliteration, these have to made table dri-
ven.
Given below is an illustration of step (v) of
the procedure:
</bodyText>
<figure confidence="0.5845784">
English sentence:
Mr. Handa speaks Hindi and he is a Hindu.
Aligned Hindi Sentence:
Įी हांडा िहÛदȣ बोलते हɇ और वह एक िहÛदू हɇ ।
(Converted to IITK-Roman)
</figure>
<footnote confidence="0.583244">
SrI hAMdA hinxI bolawe hEM Ora vaha eka hin-
xU hEM.
</footnote>
<page confidence="0.980416">
51
</page>
<figure confidence="0.27971275">
Probable English Proper Nouns:
Mr Handa Hindi Hindu.
Plausible Hindi Names after reverse consonant
substitutions:
</figure>
<bodyText confidence="0.983135">
(mr mq) (haNda handa haMda haNxa hanxa
haMxa) (hiNdi hindi hiMdi hiNxi hinxi hiMxi)
(hiNdu hindu hiMdu hiNxu hinxu hiMxu)
Collapsed plausible corresponding Hindi Names:
(mr mq) (hNd hnd hMd hNx hnx hMx) (hNd hnd
hMd hNx hnx hMx) (hNd hnd hMd hNx hnx
hMx)
Hypothesized Hindi Names after matching:
Handa→ hAMdA हांडा; hinxI िहÛदȣ; hinxU िहÛदू;
Hindi → hAMdA हांडा; hinxI िहÛदȣ; hinxU िहÛदू;
Hindu → hAMdA हांडा; hinxI िहÛदȣ; hinxU िहÛदू;
Now since these are equiprobable multiple
matches, step (v) will get invoked. For each
matching target word, the vowel mapping of fig-
ure 3 is applied. This yields the following:
</bodyText>
<equation confidence="0.996630333333333">
hAMdA हांडा→ haMda;
hinxI िहÛदȣ→hinxi;
hinxU िहÛदू→hinxu;
</equation>
<bodyText confidence="0.999136333333333">
Now the English source word is matched and
minimal distance word is selected. This finally
yields the desired result as follows:
</bodyText>
<equation confidence="0.5027355">
Handa→ hAMdA हांडा;
i. Agra →AgarA आगरा; count=31;
</equation>
<bodyText confidence="0.880271333333333">
ii. Agra →Agare आगरे; count=12;
The filtering process will select the mapping
of Agra →AgarA आगरा.
It may be noted that the word Agare आगरे is
the oblique form of the name AgarA आगरा and
such usage is very common in Indian languages.
A morphological processing is required to make
the conversion and this has not been imple-
mented in the current implementation.
</bodyText>
<sectionHeader confidence="0.99274" genericHeader="method">
3 Experimentation and Results
</sectionHeader>
<bodyText confidence="0.999971888888889">
For experimentation, we took a text that con-
tained a lot of names. Two sentence aligned files
were created from a Indian freedom fighters’
story. This story contains a lot of names of indi-
viduals and places in the text. The results of our
name mining methodology are summarized in
table 2. We also used Giza++ word alignment
tool (Och and Ney, 2003) on the same files and
collected figures pertaining to the alignment of
proper names in Hindi and English. In case of
multiple mappings for a proper name in which
one of them is a correct mapping, it is considered
as ‘false positive’. These results are also shown
in table 2 for comparison.
Given below is an illustration of step (vi) of
the procedure:
Suppose in the entire corpus the city name
‘Agra’ yields the following matches:
</bodyText>
<listItem confidence="0.9408345">
i. Agra →AgarA आगरा; count=20;
ii. Agra →Agare आगरे; count=12;
iii. Agra →AgarAse आगरासे; count=5;
iv. Agra →AgarAmeM आगरामɅ; count=4;
v. Agra →AgarAkA आगराका; count=2;
Now the process of smoothening will convert
AgarAse आगरासे to AgarA आगरा by deleting
post-position suffix ‘se’से; AgarAmeM आगरामɅ
to AgarA आगरा by deleting post-position suffix
‘meM’मɅ; and AgarAkA आगराका to AgarA आगरा
</listItem>
<bodyText confidence="0.7803465">
by deleting post-position suffix ‘kA’का. This
will yield the final table as follows:
</bodyText>
<table confidence="0.999795272727273">
File1 File2
Name- Giza++ Name- Giza++
map- mapping
ping
Total no. of 2439 2439 4909 4909
words
Total no. of 192 192 343 343
Names(N)
Correct map- 155 57 262 74
ping (TP)
Incorrect 13 117 35 200
mapping (FP)
Not-captured 24 18 46 69
(FN)
Accuracy 0.8073 0.2969 0.7638 0.2157
(TP/N)
Precision 0.9226 0.3276 0.9495 0.2701
(TP/(TP+FP))
Recall 0.8659 0.7600 0.8506 0.5175
(TP/(TP+FN))
F-measure 0.8934 0.4578 0.8968 0.3549
(2PR/(P+R))
</table>
<tableCaption confidence="0.996757">
Table 2. Result for name mining and
</tableCaption>
<equation confidence="0.390407">
word-alignment algorithms.
Hindi → hinxI िहÛदȣ;
Hindu → hinxU िहÛदू;
</equation>
<page confidence="0.99205">
52
</page>
<bodyText confidence="0.962261133333334">
Our experimentation reveals that our name
mining methodology yields a precision of 92 to
95% and a recall of 85 to 86% resulting in F-
measure of 0.89. On the other hand, the Giza++
word alignment tool yields a precision of 27 to
33% and a recall of 52 to 76% resulting in F-
measure of 0.35 to 0.46. The results are a clear
demonstration of effectiveness our approach of
mining proper names from the parallel Hindi-
English corpora. Most of the errors using our
approach have been found to be due to short
names, words not properly delineated in the tar-
get text, morphological changes in the target text,
the first word in English not being a proper noun
or different forms of names that are used denot-
ing the same place. It should be noted that our
approach works even for a corpus of a few lines
as it is primarily a rule-based method.
The method as outlined above is equally appli-
cable to other Indian languages. In order to dem-
onstrate this, we conducted a limited experiment
with Punjabi and Bengali languages. A corpus of
about 200 sentences was taken. The same pro-
gram as was used for Hindi with no change in the
mapping tables was used for the experimentation.
The results obtained were remarkable and a per-
formance of about 90% and 70% of correct min-
ing of proper names for Punjabi and Bengali
respectively is yielded. The poorer performance
in case of Bengali is primarily due to morpholog-
ical changes that take place in the proper names
based on their role in the sentence. Unlike in
Hindi where the post-positions are written sepa-
rately or simply suffixed, for most of the other
Indian languages, these post-position markers are
co-joined (‘Sandhi’) with the preceding word
leading to a morphological change. This is less
frequent in Punjabi. Further, Bengali has no con-
sonant for ‘va’ व and this is mapped to ‘ba’ ब.
So some consonant mapping changes are re-
quired to yield better results for another Indian
language but the methodology remains the same.
Here are some example mappings:
Bengali:
i. Cath hasn&apos;t phoned since she went to Berlin.
bArline yAoyZA Weke kyAWa Pona kareni৷
বািলŪেন যাoয়া ĺথেক কƟাথ ĺফান কেরিন৷
ii. Jo was the next oldest after Martin.
mArtinera parei badZa Cila jo৷
মাDžŪ েনর পেরi বড় িছল ĺজা৷
Names extracted:
Cath → kyAWa কƟাথ;
Berlin → bArline বািলŪেন
Here the correct mapping is ‘bArlina বািলŪন’ but
the name has got morphologically transformed to
‘bArline বািলŪেন’ (to Berlin) based on co-joining
of post-position marker.
Martin → mArtinera মাDžŪ েনর
Here the correct mapping is ‘mArtina মাDžŪ ন’
but the name has got morphologically trans-
formed to ‘mArtinera মাDžŪ েনর’ (after Martin) )
based on co-joining of post-position marker.
Punjabi:
i. Sam Sand Dunes is one of the best nature&apos;s gift
to the human beings.
sEma sEzda diUnasa manuYKa xe laI prakira-
wI xe saraba SreSata wohaPZiAz viYcoz iYka
hE.
ਸੈਮ ਸਡ ਿਡਊਨਸ ਮਨੁੱ ਖ ਦੇ ਲਈ ਪਿਕਰਤੀ ਦੇ ਸਰਬ
ਸ਼ੇਸ਼ਟ ਤੋਹਿਫ਼ਆਂ ਿਵੱਚ ਇੱਕ ਹੈ।
ii. Bikaner is located to the north of Rajasthan
popularly known as a camel country.
bIkAnera rAjasaWAna xe uYwara viYca sa-
Wiwa hE awe saXAraNa wOra we UTa-praxeSa
xe rUpa viYca jANiA jAzxA hE.
</bodyText>
<equation confidence="0.693784333333333">
ਬੀਕਾਨĂ ਰ ਰਾਜਸਥਾਨ ਦੇ ਤਰ ਿਵੱਚ ਸਿਥਤ ਹੈ ਅਤੇ
ਸਧਾਰਣ ਤੌਰ ਤੇ ਊਠ-ਪਦੇਸ਼ ਦੇ ਰੂਪ ਿਵੱ ਚ ਜਾਿਣਆ ਜਦਾ
ਹੈ।
</equation>
<table confidence="0.350902166666667">
Names extracted:
Sam → sEma ਸੈਮ ;
Sand → sEzda ਸਡ ;
Dunes → diUnasa ਿਡਊਨਸ ;
Bikaner → bIkAnera ਬੀਕਾਨĂ ਰ ;
Rajasthan → rAjasaWAna ਰਾਜਸਥਾਨ
</table>
<sectionHeader confidence="0.997848" genericHeader="conclusions">
4 Conclusions
</sectionHeader>
<bodyText confidence="0.999943727272727">
In this paper, we have presented a simple yet
powerful method for mining of Hindi-English
proper name corpus with a success of mining
being 93% precision. In contrast, GIZA+ word
alignment tool on same sized corpus yielded 29%
precision. The proposed method works even for a
single line text. Moreover, there is no strict re-
quirement of sentence alignment as it works
equally well for one to many and many to many
sentence alignment as long as the target group of
sentences contain the corresponding translation.
</bodyText>
<page confidence="0.995605">
53
</page>
<bodyText confidence="0.999976303030303">
Thus it works under noisy environments where
sentence boundaries are not correctly identified.
Our approach also yields a table of similar old
city names with new city names that is very fre-
quently encountered in Indian context.
The methodology outlined in this paper for au-
tomatic mining of proper names are equally ap-
plicable to all Indian languages as all Indian
scripts are phonetic in nature in the same way as
Devanagari (used for Hindi). We have also dem-
onstrated that this very method of name mining
without making any changes in the program or
the mapping table as used for Hindi, works for
other Indian languages. Our limited experimenta-
tion for Punjabi and Bengali and have yielded
performance of 90% and 70% respectively of
correct mining of proper names.
There are several other advantages of our ap-
proach. Since the proper name mining is cap-
tured with a high accuracy over a rough or noisy
aligned corpus, it is possible to use these as anc-
hors (the same way as numerals) for improve-
ment of the alignment results. These anchors will
also be useful in word alignment programs for
speedy convergence. Accurate word alignment is
crucial to the success of any statistical machine
translation system. Another byproduct of our
approach is that it also yields the table of old city
names with new city names. In India, a large
number of city names that were used during Brit-
ish time, have undergone a change and most of
these changes are phonetic variations of the old
names.
</bodyText>
<sectionHeader confidence="0.994408" genericHeader="acknowledgments">
Acknowledgements
</sectionHeader>
<bodyText confidence="0.9996535">
Author is thankful to Saleem Siddiqui and Abhay
Singh for experimentation and testing.
</bodyText>
<sectionHeader confidence="0.999267" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.996827775">
Al-Onaizan Y. and Knight K.2002. Translating
Named Entities Using Monolingual and Bilingual
Resources. Proceedings of ACL 2002, 400-408.
Ekbal Asif, Sudip Kumar Naskar and Sivaji Bandyo-
padhyay. 2006. A Modified Joint Source-Channel
Model for Transliteration, Proceedings of ACL
2006.
Feng Dong-Hui, Ya-Juan Lv, and Ming Zhou. 2004.A
New Approach for English-Chinese Named Entity
Alignment. Proceedings of ACL 2004.
Goto I., N. Kato, N. Uratani, and T. Ehara. 2003.
Transliteration considering Context Information
based on the Maximum Entropy Method. Proceed-
ing of the MT-Summit IX, New Orleans, USA, 125-
132.
Huang Fei, Stephan Vogel, and Alex Waibel. 2003.
Extracting Named Entity Translingual Equivalence
with Limited Resources. ACM Transactions on
Asian Language Information Processing (TALIP),
2(2):124–129.
Knight K. and J. Graehl. 1998. Machine Translitera-
tion, Computational Linguistics, 24(4): 599-612.
Kuo Jin-Shea , Haizhou Li and Ying-Kuei Yang.
2006. Learning Transliteration Lexicons from the
Web, The 44th Annual Meeting of Association for
Computational Linguistics (COLING-ACL2006),
Sydney, Australia, 1129 – 1136.
Och Franz Josef and Hermann Ney. 2003. A Syste-
matic Comparison of Various Statistical Alignment
Models, Computational Linguistics, 29( 1):19-51.
(http://www.fjoch.com/GIZA++.html)
Mansur Arbabi, Scott M. Fischthal, Vincent C.
Cheng, and Elizabeth Bar. 1994. Algorithms for
Arabic name transliteration. IBM Journal of Re-
search and Development, 38(2): 183-193.
Paola Virga and Sanjeev Khudanpur. 2003. Translite-
ration of Proper Names in Crosslingual Informa-
tion Retrieval. Proceedings of the ACL 2003
Workshop on Multilingual and Mixedlanguage
Named Entity Recognition, Sapporo, Japan, 57-60.
</reference>
<figure confidence="0.746081727272727">
Appendix-A: IITK-Roman code for Hindi
(Devanagari)
3i X !F t 3 5 -g V t 3ft ,*
o� �o o� o� o. o� o� o� ol o? o� o: o&amp;quot; o� o�
a A i I u U q e E o O M H V z Z
Wi a -JT Er N W U Ur V 3r r a 3 W Ur a 2T i, tT
Fir
k K g G f c C j J F t T d D N w W x X
n
� � � � � � � � � � � � �
p P b B m y r l v s S R h
</figure>
<page confidence="0.971407">
54
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.903228">
<title confidence="0.999391">Automated Mining Of Names Using Parallel Hindi-English Corpus</title>
<author confidence="0.998621">R Mahesh K Sinha</author>
<affiliation confidence="0.99357">Indian Institute of Technology, Kanpur, India</affiliation>
<email confidence="0.971015">rmk@iitk.ac.in</email>
<abstract confidence="0.996845">Machine transliteration has a number of applications in a variety of natural language processing related tasks such as machine translation, information retrieval and question-answering. For automated learning of machine transliteration, a large parallel corpus of names in two scripts is required. In this paper we present a simple yet powerful method for automatic mining of Hindi- English names from a parallel corpus. An average 93% precision and 85% recall is achieved in mining of proper names. The method works even with a small corpus. We compare our results with Giza++ word alignment tool that yields 30% precision and 63% recall on the same corpora. We also demonstrate that this very method of name mining works for other Indian languages as well.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="false">
<authors>
<author>Y Al-Onaizan</author>
</authors>
<title>and Knight K.2002. Translating Named Entities Using Monolingual and Bilingual Resources.</title>
<booktitle>Proceedings of ACL 2002,</booktitle>
<pages>400--408</pages>
<marker>Al-Onaizan, </marker>
<rawString>Al-Onaizan Y. and Knight K.2002. Translating Named Entities Using Monolingual and Bilingual Resources. Proceedings of ACL 2002, 400-408.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ekbal Asif</author>
</authors>
<title>Sudip Kumar Naskar and Sivaji Bandyopadhyay.</title>
<date>2006</date>
<booktitle>Proceedings of ACL</booktitle>
<marker>Asif, 2006</marker>
<rawString>Ekbal Asif, Sudip Kumar Naskar and Sivaji Bandyopadhyay. 2006. A Modified Joint Source-Channel Model for Transliteration, Proceedings of ACL 2006.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Feng Dong-Hui</author>
</authors>
<title>Ya-Juan Lv, and Ming Zhou. 2004.A New Approach for English-Chinese Named Entity Alignment.</title>
<date>2004</date>
<booktitle>Proceedings of ACL</booktitle>
<marker>Dong-Hui, 2004</marker>
<rawString>Feng Dong-Hui, Ya-Juan Lv, and Ming Zhou. 2004.A New Approach for English-Chinese Named Entity Alignment. Proceedings of ACL 2004.</rawString>
</citation>
<citation valid="true">
<authors>
<author>I Goto</author>
<author>N Kato</author>
<author>N Uratani</author>
<author>T Ehara</author>
</authors>
<date>2003</date>
<booktitle>Transliteration considering Context Information based on the Maximum Entropy Method. Proceeding of the MT-Summit IX,</booktitle>
<pages>125--132</pages>
<location>New Orleans, USA,</location>
<contexts>
<context position="1335" citStr="Goto et al., 2003" startWordPosition="202" endWordPosition="205">h Giza++ word alignment tool that yields 30% precision and 63% recall on the same corpora. We also demonstrate that this very method of name mining works for other Indian languages as well. 1 Introduction Transliteration of names from one script/language to another has a number of applications in a variety of natural language processing tasks. These include machine translation, information retrieval, question-answering, multilingual directories, reservation charts, name lists etc. Machine transliteration has been studied by a number of researchers (Knight et al., 1998; AlOnaizan et al., 2002; Goto et al., 2003; Huang et al., 2003; Feng et al., 2004; Asif et al., 2006; Kuo et al. 2006); Knight and Graehl(1998) use a modular approach in which five probability distributions are obtained for various phases of the transliteration - generation and pronunciation of English word sequences, conversion of English sounds to Japanese and then Japanese sounds to Katakana writing. Al-Onaizan and Knight (2002) present work on transliteration from English to Arabic. It relies on an existing named entity recognition system, which identifies possible named entities in English. A predefined phoneme mapping is used to</context>
</contexts>
<marker>Goto, Kato, Uratani, Ehara, 2003</marker>
<rawString>Goto I., N. Kato, N. Uratani, and T. Ehara. 2003. Transliteration considering Context Information based on the Maximum Entropy Method. Proceeding of the MT-Summit IX, New Orleans, USA, 125-132.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Huang Fei</author>
<author>Stephan Vogel</author>
<author>Alex Waibel</author>
</authors>
<title>Extracting Named Entity Translingual Equivalence with Limited Resources.</title>
<date>2003</date>
<journal>ACM Transactions on Asian Language Information Processing (TALIP),</journal>
<volume>2</volume>
<issue>2</issue>
<marker>Fei, Vogel, Waibel, 2003</marker>
<rawString>Huang Fei, Stephan Vogel, and Alex Waibel. 2003. Extracting Named Entity Translingual Equivalence with Limited Resources. ACM Transactions on Asian Language Information Processing (TALIP), 2(2):124–129.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Knight</author>
<author>J Graehl</author>
</authors>
<date>1998</date>
<journal>Machine Transliteration, Computational Linguistics,</journal>
<volume>24</volume>
<issue>4</issue>
<pages>599--612</pages>
<marker>Knight, Graehl, 1998</marker>
<rawString>Knight K. and J. Graehl. 1998. Machine Transliteration, Computational Linguistics, 24(4): 599-612.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Haizhou Li</author>
<author>Ying-Kuei Yang</author>
</authors>
<date>2006</date>
<booktitle>Learning Transliteration Lexicons from the Web, The 44th Annual Meeting of Association for Computational Linguistics (COLING-ACL2006),</booktitle>
<pages>1129--1136</pages>
<location>Sydney, Australia,</location>
<marker>Li, Yang, 2006</marker>
<rawString>Kuo Jin-Shea , Haizhou Li and Ying-Kuei Yang. 2006. Learning Transliteration Lexicons from the Web, The 44th Annual Meeting of Association for Computational Linguistics (COLING-ACL2006), Sydney, Australia, 1129 – 1136.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Och Franz Josef</author>
<author>Hermann Ney</author>
</authors>
<title>A Systematic Comparison of Various Statistical Alignment Models,</title>
<date>2003</date>
<journal>Computational Linguistics,</journal>
<volume>29</volume>
<pages>1--19</pages>
<marker>Josef, Ney, 2003</marker>
<rawString>Och Franz Josef and Hermann Ney. 2003. A Systematic Comparison of Various Statistical Alignment Models, Computational Linguistics, 29( 1):19-51. (http://www.fjoch.com/GIZA++.html)</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mansur Arbabi</author>
<author>Scott M Fischthal</author>
<author>Vincent C Cheng</author>
<author>Elizabeth Bar</author>
</authors>
<title>Algorithms for Arabic name transliteration.</title>
<date>1994</date>
<journal>IBM Journal of Research and Development,</journal>
<volume>38</volume>
<issue>2</issue>
<pages>183--193</pages>
<marker>Arbabi, Fischthal, Cheng, Bar, 1994</marker>
<rawString>Mansur Arbabi, Scott M. Fischthal, Vincent C. Cheng, and Elizabeth Bar. 1994. Algorithms for Arabic name transliteration. IBM Journal of Research and Development, 38(2): 183-193.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Paola Virga</author>
<author>Sanjeev Khudanpur</author>
</authors>
<title>Transliteration of Proper Names in Crosslingual Information Retrieval.</title>
<date>2003</date>
<booktitle>Proceedings of the ACL 2003 Workshop on Multilingual and Mixedlanguage Named Entity Recognition,</booktitle>
<pages>57--60</pages>
<location>Sapporo, Japan,</location>
<marker>Virga, Khudanpur, 2003</marker>
<rawString>Paola Virga and Sanjeev Khudanpur. 2003. Transliteration of Proper Names in Crosslingual Information Retrieval. Proceedings of the ACL 2003 Workshop on Multilingual and Mixedlanguage Named Entity Recognition, Sapporo, Japan, 57-60.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>