<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<title confidence="0.9934725">
Multiset-Valued Linear Index Grammars:
Imposing Dominance Constraints on Derivations
</title>
<author confidence="0.954511">
Owen Rambow
</author>
<affiliation confidence="0.743272">
Univesite Paris 7
</affiliation>
<address confidence="0.930761333333333">
UFR Linguistique, TALANA
Case 7003, 2, Place Jussieu
F-75251 Paris Cedex 05, France
</address>
<email confidence="0.993863">
rambow@linguist.jussieu.fr
</email>
<bodyText confidence="0.999677458333334">
While LIG-equivalent formalisms have been shown to
provide adequate formal power for a wide range of lin-
guistic phenomena (including the aforementioned Swiss
German construction), the need for other mathemati-
cal formalisms has arisen in several unrelated areas. In
this paper, we discuss three such cases. First, captur-
ing several semantic and syntactic issues in unification-
based formalisms leads to the use of multiset-valued
feature structures. Second, word order facts from lan-
guages such as German, Russian, or Turkish cannot be
derived by LIG-equivalent formalisms. Third, a gener-
alization of trees to &amp;quot;quasi-trees&amp;quot; (Vijay-Shanker, 1992)
in the spirit of D-Theory (Marcus et al., 1983) leads
to the definition of a new formal system. In this pa-
per, we introduce two new equivalent mathematical for-
malisms which provide adequate descriptions for these
three phenomena.
The paper is structured as follows. First, we present
the three phenomena in more detail. We then introduce
multiset-valued LIG and present some formal proper-
ties. Thereafter, we introduce a second rewriting sys-
tem and show that it is weakly equivalent to the LIG
variant. We then briefly mention some related for-
malisms. We conclude with a brief summary.
</bodyText>
<sectionHeader confidence="0.8570965" genericHeader="abstract">
Three Problems for LIG-Equivalent
Formalisms
</sectionHeader>
<bodyText confidence="0.99910175">
The three problems we present are of a rather differ-
ent nature. The first arises from the way a linguis-
tic problem is treated in a specific type of framework
(unification-based formalisms). The second problem
derives directly from linguistic data. The third prob-
lem is a formalism which has been motivated on in-
dependent, methodological grounds, but whose formal
properties are unknown.
</bodyText>
<subsectionHeader confidence="0.631454">
Multiset-Valued Feature Structures
</subsectionHeader>
<bodyText confidence="0.979465333333333">
HPSG (Pollard and Sag, 1987; Pollard and Sag, 1994)
uses typed feature structures as its formal basis, which
are Turing-equivalent. However, it is not necessarily
</bodyText>
<sectionHeader confidence="0.65218" genericHeader="keywords">
Abstract
</sectionHeader>
<bodyText confidence="0.999774">
This paper defines multiset-valued linear index gram-
mar and unordered vector grammar with dominance
links. The former models certain uses of multiset-
valued feature structures in unification-based for-
malisms, while the latter is motivated by word order
variation and by &amp;quot;quasi-trees&amp;quot;, a generalization of trees.
The two formalisms are weakly equivalent, and an im-
portant subset is at most context-sensitive and polyno-
mially parsable.
</bodyText>
<sectionHeader confidence="0.737669" genericHeader="introduction">
Introduction
</sectionHeader>
<bodyText confidence="0.998579">
Early attempts to use context-free grammars (CFGs) as
a mathematical model for natural language syntax have
largely been abandoned; it has been shown that (un-
der standard assumptions concerning the recursive na-
ture of clausal embedding) the cross-serial dependencies
found in Swiss German cannot be generated by a CFG
(Shieber, 1985). Several mathematical models have
been proposed which extend the formal power of CFGs,
while still maintaining the formal properties that make
CFGs attractive formalisms for formal and computa-
tional linguists, in particular, polynomial parsability
and restricted weak generative capacity. These mathe-
matical models include tree adjoining grammar (TAG)
(Joshi et al., 1975; Joshi, 1985), head grammar (Pollard,
1984), combinatory categorial grammar (CCG) (Steed-
man, 1985), and linear index grammar (LIG) (Gaz-
dar, 1988). These formalisms have been shown to be
weakly equivalent to each other (Vijay-Shanker et al.,
1987; Vijay-Shanker and Weir, 1994); we will refer to
them as &amp;quot;LIG-equivalent formalisms&amp;quot;. LIG is a vari-
ant of index grammar (IG) (Aho, 1968). Like CFG, IG
is a context-free string rewriting system, except that
the nonterminal symbols in a CFG are augmented with
stacks of index symbols. The rewrite rules push or pop
indices from the index stack. In an IG, the index stack
is copied to all nonterminal symbols on the right-hand
side of a rule. In a LIG, the stack is copied to exactly
one right-hand side nonterminal.&apos;
&apos;Note that a LIG is not an IG that is linear (i.e., whose
productions have at most one nonterminal on the right-hand
side), but rather, it is a context-free grammar with linear
indices (i.e., the indices are never copied).
</bodyText>
<page confidence="0.996931">
263
</page>
<bodyText confidence="0.999667942857143">
the case that the full power of the system is used in
the linguistic analyses that are expressed in it. HPSG
analyses include information about constituent struc-
ture which can be represented as a context-free phrase-
structure tree. In addition, various mechanisms have
been proposed to handle certain linguistic phenomena
that relate two nodes within this tree. One of these
is a multiset-valued feature that is passed along the
phrase-structure tree from daughter node to mother
node. Multiset-valued features have been proposed for
the SLASH feature which handles tvh-dependencies (Pol-
lard and Sag, 1994, Chapter 4), and for certain semantic
purposes, including the representation of stored quan-
tifiers in a mechanism similar to Cooper-storage. An-
other use may be the representation of anti-coreference
constraints arising from Principle C of Binding Theory
(be it that of (Chomsky, 1981) or of Pollard and Sag
(1992)).
It is desirable to be able to assess the formal power
of such a system, for both theoretical and practical
reasons. Theoretically, it would be interesting if it
turned out that the linguistic principles formulated in
HPSG naturally lead to certain restricted uses of the
unification-based formalism. Clearly this would repre-
sent an important insight into the nature of grammat-
ical competence. On the practical side, formal equiv-
alences can guide the building of applications such as
parsers for existing HPSG grammars. For example, it
has been proposed that HPSG grammars can be &amp;quot;com-
piled&amp;quot; into TAGs in order to obtain a computationally
more tractable system (Kasper, 1992), thus sidestep-
ping the issue of building parsers for HPSG directly.
However, LIG-equivalent formalisms cannot serve as
targets for compilations in cases in which HPSG uses
multiset-valued feature structures.
</bodyText>
<subsectionHeader confidence="0.829373">
Word Order Variation
</subsectionHeader>
<bodyText confidence="0.939366142857143">
Becker et al. (1991) discuss scrambling, which is the
permutation of verbal arguments in languages such as
German, Korean, Japanese, Hindi, Russian, and Turk-
ish. If there are embedded clauses, scrambling in many
languages can affect arguments of more than one verb
(&amp;quot;long-distance&amp;quot; scrambling).
(1) ... 6.13 [den KiihIschrank], bisher noch
... that the refrigeratorAcc so far yet
niemand [t; zu reparieren] versprochen hat
no-oneNom to repair promised has
... that so far, no-one has promised to repair the re-
frigerator
Scrambling in German is &amp;quot;doubly unbounded&amp;quot; in the
sense that there is no bound on the number of clause
boundaries over which an element can scramble, and
an element scrambled (long-distance or not) from one
clause does not preclude the scrambling of an element
from another clause:
(2) ... daB [dem Kunden] [den KiihIschrankb
... that the clientoAT the refrigeratorAcc
bisher noch niemand ti [[ti zu reparieren]
so far yet no-oneNom to repair
zu versuchen] versprochen hat
to try promised has
... that so-far, no-one yet has promised the client to
repair the refrigerator
Similar data has been observed in the literature for
other languages, for example for Finnish by Karttunen
(1989). Becker et al. (1991) argue that a simple TAG
(and the other LIG-equivalent formalisms) cannot de-
rive the full range of scrambled sentences. Rambow and
Satta (1994) propose the use of unordered vector gram-
mar (UVG) to model the data. In UVG (Cremers and
Mayer, 1973), several context-free string rewriting rules
are grouped into vectors, as for verspricht &apos;promises&apos;:
</bodyText>
<listItem confidence="0.989707">
(3) ((S NPnon-, VP), (VP â€”+ NPdat VP),
(VP -4 Sint- V), (V --+ verspricht) )
</listItem>
<bodyText confidence="0.996575833333333">
During a derivation, rules from a vector can be ap-
plied in any order, and rules from different vectors can
be interleaved, but at the end, all rules from an instance
of a vector must have been used in the derivation. By
varying the order in which rules from different vectors
are applied, we can derive different word orders. Ob-
serve that the vector in (3) contains exactly one ter-
minal symbol (the verb); grammars in which every el-
ementary structure (vector in UVG, tree in TAG, rule
in CFG) contains at least one terminal symbol we will
call lexicalized.
Languages generated by UVG are known to be
context-sensitive and semilinear (Cremers and Mayer,
1974) and polynomially parsable (Satta, 1993). How-
ever, they are not adequate for modeling natural lan-
guage syntax. In the following example, (4a) is out since
there is no analysis in which the moved NP c-commands
its governing verb, as is the case in (4b).
</bodyText>
<listItem confidence="0.995552">
(4) a. * daB niemand [dem Kunden] [ti
... that no-oneNom the clientDAT
zu versuchen] [den KiihIschrank]j versprochen
</listItem>
<bodyText confidence="0.997526444444444">
to try the refrigeratorAcc promised
hat [ti zu reparieren]2
has to repair
b. ? daB niemand [dem Kunden] [den
Kiihlschrank], [ti zu versuchen] versprochen hat,
[tizu reparieren]i
What is needed is an additional mechanism that en-
forces a dominance relation between the sister node of
an argument and its governing verb.
</bodyText>
<subsectionHeader confidence="0.961224">
Quasi-Trees
</subsectionHeader>
<bodyText confidence="0.916552333333333">
Vijay-Shanker (1992) introduces &amp;quot;quasi-trees&amp;quot; as a gen-
eralization of trees. He starts from the observation
that the traditional definition of tree adjoining gram-
</bodyText>
<page confidence="0.986727">
264
</page>
<bodyText confidence="0.99998">
mar (TAG) is incompatible with a unification-based ap-
proach because the trees of a TAG start out as fully
specified objects, which are later modified; in particu-
lar, immediate dominance relations in a tree need not
hold after another tree is adjoined into it. In order to ar-
rive at a definition that is compatible with a unification-
based approach, he makes three minimal assumptions
about the nature of the objects used for the representa-
tion of natural language syntax. The first assumption
(left implicit) is that these objects represent phrase-
structure. The second assumption is that they &amp;quot;give
a sufficiently enlarged domain of locality that allows
localization of dependencies such as subcategorization,
and filler-gap&amp;quot; (Vijay-Shanker, 1992, p.486). The third
assumption is that dominance relations can be stated
between different parts of the representation. These
assumptions lead Vijay-Shanker to define quasi-trees,
which are partial descriptions of trees in which &amp;quot;quasi-
nodes&amp;quot; (partial descriptions of nodes) are related by
dominance constraints. Each node in a traditional tree
(as used in TAG) corresponds to two quasi-nodes, a top
and a bottom version, such that the top dominates the
bottom.
There are two ways of interpreting quasi-trees: ei-
ther quasi-trees can be seen as data structures in their
own right; or quasi-trees can be seen as descriptions
of trees whose denotations are sets of (regular) trees.
If quasi-trees are defined as data structures, we can
define operations such as adjunction and substitution
and notions such as &amp;quot;derived structure&amp;quot;. More pre-
cisely, we define quasi-trees to be structures consisting
of pairs of nodes, called quasi-nodes, such that one is
the &amp;quot;top&amp;quot; quasi-node and the other is the &amp;quot;bottom&amp;quot;
quasi-node. The top and bottom quasi-node of a pair
are linked by a dominance constraint. Bottom quasi-
nodes immediately dominate top quasi-nodes of other
quasi-node pairs, and each top quasi-node is immedi-
ately dominated by exactly one bottom quasi-node. For
simplicity, we will assume that there is only a bottom
root quasi-node (i.e., no top root quasi-node), and that
bottom frontier quasi-nodes are omitted (i.e., frontier
nodes just consist of top quasi-nodes). Furthermore,
we will assume that each quasi-node has a label, and
is equipped with a finite feature structure. A sample
quasi-tree is shown in Figure 1 (quasi-tree ot5 of Vijay-
Shanker (1992, p.488)).
We follow Vijay-Shanker (1992, Section 2.5) in defin-
ing substitution as the operation of forming a quasi-node
pair from a frontier node of one tree (which becomes the
top node) and the root node of another tree (which be-
comes the bottom node). As always, a dominance link
relates the two quasi-nodes of the newly formed pair.
Adjunction is not defined separately: it suffices to say
that a pair of quasi-nodes is &amp;quot;broken up&amp;quot;, thus forming
two quasi-trees. We then perform two substitutions.
Observe that nothing keeps us from breaking up more
than one pair of quasi-nodes in either of two quasi-trees,
and then performing more than two substitutions (as
</bodyText>
<figure confidence="0.7180395">
NP
VP
113
V
</figure>
<figureCaption confidence="0.999772">
Figure 1: Sample quasi-tree
</figureCaption>
<bodyText confidence="0.999985">
long as dominance constraints are respected); there are
no operations in regular TAG that correspond to such
operations. We will say that a quasi-tree is derived if in
all quasi-node pairs, the two quasi-nodes are equated,
meaning that they have the same label and the two
feature structures are unified, and furthermore, if all
frontier quasi-nodes have terminal labels. The string
associated with this quasi-tree is defined in the usual
way.
We have now fully defined a formalism (if informally):
its data structures (quasi-trees), its combination oper-
ation (substitution), and the notion of derived struc-
ture. We will call this formalism Quasi-Tree Substitu-
tion Grammar (QTSG). It can easily be seen that all
examples discussed by Vijay-Shanker (1992) are deriva-
tions in QTSG. The question arises as to the formal and
computational properties of QTSG.
</bodyText>
<subsectionHeader confidence="0.703133">
Multiset-Valued LIG
</subsectionHeader>
<bodyText confidence="0.871262454545455">
In order to find a mathematical model for certain uses
of multiset-valued feature structures, discussed above,
we now introduce a multiset-valued variant of LIG. We
denote by M(A) the set of multisets over the elements
of A, and we use the standard set notation to refer to
the corresponding multiset operations.
Definition 1 A multiset-valued Linear Index
Grammar ({}-LIG) is a 5-triple (VN, VT 1/i, P, S),
where VN , VT, and VI are disjoint sets of terminals,
non-terminals, and indices, respectively; S E VN is the
start symbol; and P is a set of productions of the fol-
lowing form:
p: As vorlisivi â€¢ â€¢ â€¢ Vn- 1 Bn Sn Vn
for some n &gt; 0, A, B1, ..., Bn E VN, s, si, mul-
tisets of members of VI, and vo, ...,vâ€ž E 1/4; .
The derivation relation for a {}-LIG is defined
as follows. Let 13,7 E (VNA4(14) U VT)* , t,ti,...,1â€ž
multisets of members of 14, and p E P of the form
given above. Then we have
13A17 13vo Bit iv vn- Bntnv,17
such that t = U:1_1(t1 \ si)U s. JIG is a {}-LIG, L(G) =
lw I S W E
</bodyText>
<page confidence="0.991117">
265
</page>
<bodyText confidence="0.999675">
Suppose we want to apply rule p to an instance of
nonterminal A with an index multiset t in a sentential
form. First, we remove the indices in s from t, then we
rewrite the nonterminal, then we distribute the remain-
ing indices freely among the newly introduced nonter-
minals B1, . , B,, creating new multisets, and finally
we add si to the new multiset for each Bi, creating the
new ti.
The reader will have noticed, and hopefully excused,
the abuse of notation in this definition, which results
from mixing set-notation and string-notation. We can
also define {}-LIG as a pure string-rewriting system
which does not require the definition of additional data
structures (the multisets) for the notion of &amp;quot;derivation&amp;quot;
(see (Rambow, 1994)). However, the definition pro-
vided here (using an explicit representation of multi-
sets) has the advantage of corresponding more directly
to the intuition underlying {}-LIG and is much easier
to understand and use in proofs. The issue is purely
notational.
We now introduce a restriction on derivations, which
will be useful later.
</bodyText>
<figure confidence="0.410362">
Definition 2 A linearly-restricted derivation in a
{}-LIG is a derivation p : S w with w E V,.; such
that:
</figure>
<listItem confidence="0.819698">
1. The number of index symbols added (and hence re-
moved) during the derivation is linearly bounded by
w.
2. The number of e-productions used during the deriva-
tion is linearly bounded by Iwl.
</listItem>
<bodyText confidence="0.991037">
We let LR(G) = {w I there is a derivation p :
S w such that e is linearly-restricted}, and we let
ER({}-LIG) = {LR(G) Ga {}-LIG}. If G is a {}-LIG
such that LR(G) = L(G), we say that G is linearly
restricted. Many of the results that we will show ap-
ply only to linearly restricted {}-LIGs. However, as we
will see, all linguistic applications will make use of this
restricted version.
EXAMPLE 1
The following grammar derives the language
COUNT-5, where COUNT-5 =
</bodyText>
<equation confidence="0.977421090909091">
Let G1 = (Viv, VT, VI, P, S) with:
VN = {S,A,B,C,D,E}
VT = {a,b,c,d,e}
Vi = Sb, Se, Sci, Se}
P = {Pi: S S{so,sb,se,sd,se}
p2 : S ABCDE
P3 AlSa Aa, p4 : A â€”4 E
p6 : B{sb) Bb, p6 : B E
p7 : C{.5,} â€”4 Cc, p8 : C E
p9 : D{sd} Dd, Pio : D â€”4 e
Pii E{se} Ee, P12 :E-4E
</equation>
<bodyText confidence="0.983424333333333">
A sample derivation is shown in Figure 2.
This example shows that E({}-LIG) is not contained
in L(LIG), since the latter cannot derive couNT-5. We
now define two normal forms which will be used later.
We omit the proofs and refer to (Rambow, 1994) for
details.
</bodyText>
<figure confidence="0.9308745">
Definition 3 A {}-LIG G = (VN, VT P,S) is in
restricted index normal form or RINE if all pro-
ductions in P are of one of the following forms (where
A,B E VN, f E VI and a E (VT U VN)*):
1. A a
2. A â€”4 Bf
3. Af ---+ B
Theorem 1 For any {}-LIG, there is an equivalent
{}-LIG in RINF.
Definition 4 A 0-LIG G = (VN, VT, P, S) is in
Extended Two Form (ETF) if every production in
P has the form As â€”&gt; B1siB2s2, As -4 Bs&apos;, or
A -4 a, where A,Bi, B2 E VN, S, S1 S2, E VI*, and
a E VT U {O.
Theorem 2 For any {}-LIG, there is an equivalent
{}-LIG in ETF.
</figure>
<bodyText confidence="0.985913">
We now discuss some formal properties of {}-LIG.
For reasons of space limitation, we only sketch the
proofs; full versions can be found in (Rambow, 1994).
We start with the weak generative power. We have al-
ready seen that {}-LIG can generate languages not in
E(LIG) (and hence not in E(TAG)). We will now show
that linearly restricted {}-LIGs are at most context-
sensitive.
Theorem 3 ER({}-LIG) C E(CSG).
Outline of the proof We simulate a derivation in a
linear bounded automaton. The space needed for this is
bounded linearly in the length of the input word, since
the number of the symbols that are erased, the index
symbols and nonterminals that rewrite to e, is linearly
bounded. â€¢
What sort of languages could a {}-LIG possibly not
generate? Consider the copy language L = {ww I w E
{a, WI, and let us suppose that it is generated by G, a
{}-LIG. This language cannot be generated by a CFG.
We therefore know that for any integer M, there are in-
finitely many strings in L whose derivation in G is such
that at some point, an index multiset in the sentential
form contains more than M index symbols (since any
finite use of index symbols can be simulated by a pure
CFG). It must be the case that this unbounded multiset
is crucial in restricting the second half of the generated
string in such a way that it copies the first half (again,
since a pure CFG cannot derive such strings). However,
it is impossible for a data structure like a (multi-)set
(over a finite index alphabet) to record the required se-
quential information. Therefore, the second half of the
string cannot be adequately constrained, and G cannot
exist. This argument motivates the following conjec-
ture.
Conjecture 4 {ww w E {a, b}*} is not in E({}-LIG).
{anti&apos; en cln en n &gt; O}.
</bodyText>
<page confidence="0.991859">
266
</page>
<construct confidence="0.967351666666667">
S{Sa, Sb, Se Sd, Se}
S{Sa, Sb, Sc, Sd, Se, Sa , Sb, Sc, Sd, Se, Sa, Sb, Sc, Sd, se}
A{sa, so, sa}B{sb, Sb, sb}C{sc, Sc, sc}D{sd, Sd, sd}E{se, se, se)
A{s,,so,sa}B{sb,sb,sb}C{sc,se}cD{sd,sd,sd}E{se,se,se)
aaaB{Sbt St,, Sb}C {Se, sc}CD{Sd, Sci)Sd} E {Se, Se) se}
aaabbbcccdddeee
</construct>
<figureCaption confidence="0.99881">
Figure 2: Sample derivation in {}-LIG G1
</figureCaption>
<bodyText confidence="0.997572714285714">
We now turn to closure properties.
Theorem 5 Â£({}-LIG) is a substitution-closed full ab-
stract family of languages (AFL).
Outline of the proof. Since .C({)-LIG) contains all
context-free languages, it contains all regular languages,
and therefore it is sufficient to show that Â£({}-LIG) is
closed under intersection with regular languages and
substitution. These results are shown by adapting the
techniques used to show the corresponding results for
CFGs. â€¢
Finally, we turn to the recognition and parsing prob-
lem. Again, we will restrict our attention to the linearly
restricted version of {}-LIG.
Theorem 6 Each language in GR({}-LIG) can be rec-
ognized in polynomial deterministic time.
Outline of the proof We extend the CKY parser for
CFG. Let G be a {}-LIG in ETF. Since G may contain
e-productions, the algorithm is adapted by letting the
indices of the matrix refer to positions between sym-
bols in the input string, not the symbols themselves.
In order to account for the index multiset, we let the
entries in the recognition matrix be pairs consisting of
a nonterminal symbol and a I1/21-tuple of integers:
(A, (ni, ...,nivii))
The 1/41-tuple of integers represents a multiset, with
each integer designating the number of copies of a given
index symbol that the set contains. In an entry of
the matrix, each pair represents a partial derivation
of a substring of the input string. More precisely, if
the input word is al â€¢ â€¢ an , and if V1 = fii, â€¢ â€¢ â€¢
then we have (A, (ni, nivd)) in entry tij of the
recognition matrix if and only if there is a derivation
As â€¢ â€¢ â€¢ai, where multiset s contains nk copies
of index symbol ik, 1 &lt; k &lt; Vu. Clearly, there
is a derivation in the grammar if and only if entry
to,n contains the pair (S, (0, â€¢ â€¢ 0)). Now since the
grammar is linearly restricted, each nk is bounded by
n, and hence the number of different pairs is linearly
bounded by IVNInivil. Thus each entry in the matrix
can be computed in 0(n1+211711) steps, and since there
are 0(n2) entries, we get an overall time complexity of
0(n3+21v11). â€¢
</bodyText>
<subsectionHeader confidence="0.618759">
UVG with Dominance Links
</subsectionHeader>
<bodyText confidence="0.993514043478261">
We now formally define UVG with dominance links
(UVG-DL), which serves as a formal model for the sec-
ond and third phenomena introduced above, word order
variation and quasi-trees. The definition differs from
that of UVG only in that vectors are equipped with
dominance relations which impose an additional condi-
tion on derivations. Note that the definition refers to
the notion of derivation tree of a UVG, which is defined
as for CFG.
Definition 5 An Unordered Vector Grammar
with Dominance Links (UVG-DL) is a 4-tuple
(VN , VT , V,S), where VN and VT are sets of nonter-
minals and terminals, respectively, S is the start sym-
bol, and V is a set of vectors of context-free produc-
tions equipped with dominance links. For a given vec-
tor v E V, the dominance links form a binary relation
dome over the set of occurrences of non-terminals in
the productions of v such that if domâ€ž(A, B), then A
(an instance of a symbol) occurs in the right-hand side
of some production in v, and B is the left-hand symbol
(instance) of some production in v.
If G is a UVG-DL, L(G) consists of all words w E
which have a derivation 0 of the form
</bodyText>
<equation confidence="0.392728">
such that meets the following two conditions:
1. p1P2 ...pr is a permutation of a member of V.
.
</equation>
<bodyText confidence="0.893159933333333">
2. The dominance relations of V, when interpreted as
the standard dominance relation defined on trees,
hold in the derivation tree of 0.
The second condition can be formulated as follows:
if v in V contributes instances of productions pi and
7/2 (and perhaps others), and the kth daughter in the
right-hand side of pi dominates the left-hand nonter-
minal of p2, then in the context-free derivation tree as-
sociated with e (the unique node associated with) the
kth daughter node of pi dominates (the unique node
associated with) 7)2. We now give an example. (The
superscripts distinguish instances of symbols and are
not part of the nonterminal alphabet.)
EXAMPLE 2
Let G2 = (VN, VT, V, S&apos;) with:
</bodyText>
<page confidence="0.988704">
267
</page>
<note confidence="0.737747375">
vi: {(S&apos; ---+ dafl VP)} with dom&amp;quot; = 0
v2: {(VP (I) --+ NPaam VP(2)), (VP(3) -- NPdat VP(4)), (VP(5) --)â€¢ VP(6) VP(7)), (VP(8) --4 verspricht)} with.
domv, =f(vp(2), vp(8)), (vp(4), vp(8)), (vp(7),vp(8))}
v3: {(VP(&apos;) --4 VP(I) VP(2)), (VP(3) ---Ã· zu versuchen)} with domv, = {(VP(2), VP(3))}
V4 : {(VP(&apos;) --- NP acc VP(2)), (VP(3) --+ zu reparieren)} with domv, = {(VP(2), VP(3))}
v5: {(NPnorn --4 der Meister)} with domâ€ž = 0
V6: {(NP dat --* niemandem)} with domâ€ž = 0
1/7: {(NPac, --- den KiihIsehrank)} with domv, = 0
</note>
<figureCaption confidence="0.999589">
Figure 3: Definition of V for UVG-DL G2
</figureCaption>
<figure confidence="0.994553533333333">
S&apos; (PI)
doss
Npro
der Meister
NP(p61)
niemandem.
.&amp;quot;..VP(P41)
&apos;
VP(p42)
zz reparieren
zu versuchen verspricht
NP(p71)
den Kuehlschrank VP(P22) f
VP(p23)
v1(1332) VP(p24)
</figure>
<figureCaption confidence="0.999694">
Figure 4: Sample UVG-DL derivation
</figureCaption>
<equation confidence="0.98016825">
VN = {S&apos;, VP, NPaom, NPdat, NPacc}
VT = {dall, verspricht, zu versuchen, zu reparieren,
der Meister, niemandem, den KiihIschrank}2
V = {v 1, v2, v3, v4, V5, 216, 117}
</equation>
<bodyText confidence="0.999712">
where the vi are as defined in Figure 3.
A sample derivation is shown in Figure 4, where the
dominance relations are shown by dotted lines. Ob-
serve that the example grammar is lexicalized. We will
denote the class of lexicalized UVG-DL by UVG-DLLexâ€¢
It is clear that the dominance links of UVG-DL are
the additional constraints that we argued above are nec-
essary to adequately restrict the structural relation be-
tween arguments and their verbs. Furthermore, UVG-
DL is a notational variant of QTSG: every vector rep-
resents a quasi-tree, and identifying quasi-nodes cor-
responds to rewriting. The condition on a successful
derivation in QTSG â€” that all nonterminal nodes be
identified â€” corresponds to the definition of a derivation
in UVG-DL. We have therefore found a mathematical
model for the second and third phenomenon mentioned
2Gloss (in order): that, promises, to try, to repair, the
master, no-one, the refrigerator.
in Section 2.
We now turn to the formal properties of UVG-DL.
Our main result is that UVG-DL is weakly equivalent
to {}-LIG. The sets of a {}-LIG implement the domi-
nance links and make sure that all members from one
set of rules are used during a derivation. We first in-
troduce some more terminology with which to describe
the derivations of UVG-DLs. If two productions pv,i
and pv,2 from vector v are linked by a dominance link
from a right-hand side nonterminal of pv,i to the left-
hand nonterminal pv,2, then we will denote this link by
We will say that pv,i (or the right-hand side non-
terminal in question) has a passive dominance require-
ment of 4,1,2, and that Pv2 has an active dominance
requirement of 4,1,2. If pv,i or pv,2 is used in a partial
derivation such that the other production is not used
in the derivation, the dominance requirement (passive
or active) will be called unfulfilled. Let e be a (partial)
derivation. We associate with 0 a multi-set which rep-
resent all the unfulfilled active dominance requirements
of e, written T(0).
</bodyText>
<equation confidence="0.775146">
Theorem 7 C(UVG-DL) = .C({}-LIG)
</equation>
<page confidence="0.989188">
268
</page>
<bodyText confidence="0.95560775">
Outline of the proof. The theorem is proved in two
parts (one for each inclusion). We first show the inclu-
sion C(UVG-DL) c Â£(0-LIG). Let G = (VN, VT, V, S)
be a UVG-DL, where V = {vi, v.K} with vi =
</bodyText>
<equation confidence="0.914472666666667">
(PO) â€¢ â€¢ ki = Ivil, 1 &lt; i &lt; K. We construct
a {}-LIG = (VN, VT , S). Let Vi = I 1 &lt;
i&lt; K,1 &lt; j,k &lt; Define P as follows.
</equation>
<bodyText confidence="0.994281833333333">
Let v in V, and let p in v be the production A
woBi wi â€¢ â€¢ B,,w,, be in vr. In the following, we will
denote by T(p) the multiset of active dominance re-
quirements of p, and by .14(p) the multiset of passive
dominance requirements of Bi, 1 &lt; i &lt; n. Add to P
the following production:
</bodyText>
<equation confidence="0.543922">
A T (p) â€”+ wo131-1-1(P)wi â€¢ â€¢ â€¢ Bn (P)Wn
</equation>
<bodyText confidence="0.980153571428572">
P contains no other productions. We show by induc-
tion that for A in VN, and w in Vit, we have A *G w
if A w. Specifically, we show that for all integers
k, e: A 4.G w, w E VI!, with unfulfilled active domi-
nance requirements T(g), implies that there is a deriva-
tion AT(g) nâ€¢G/ w, and, conversely, we show that for
all integers k, At a, A E VN, I a multiset of ele-
ments of 3/4, and a E V, implies that there is a deriva-
tion p : A a such that T(e) = I.
For the inclusion Â£(0-LIG) C C(UVG-DL), we take
a slightly different approach to avoid notational com-
plexity. Let G = (VN, VT, V1, P, S) be a {}-LIG in
RINF. We construct a UVG-DL d = (vN , VT, V) S))
where V is defined as follows:
</bodyText>
<listItem confidence="0.984514333333333">
1. If p E P is a {}-LIG production of RINF type 1, then
((p),0) E V.
2. If p E P is a {}-LIG production of RINF type 2,
</listItem>
<bodyText confidence="0.997265555555555">
with p = A B f for A, B E VN) f E VI, then for
all q E P such that q = Cf --4 D, v = ((A â€”4
B , C D), dornt,(B , C)) is in V.
Let A be in VN, and w in V. We show by induction
that S zsG w if S ZGI w. Specifically, we first show
that for all integers k, for all {}-LIGs G and the corre-
sponding UVG-DL G&apos; as constructed above, if there is
a derivation p : S nG w with k instances of ap-
plications of rules of type 2, then there is a deriva-
tion e&apos; : s Gi w such that e and ei are identical
except for the index symbols in the sentential forms
of p. For the converse inclusion, we show that for all
integers k, for all {}-LIGs G and the correspond UVG-
DL G&apos; as constructed above, if there is a derivation
s w with k instances of applications of
rules from vectors with two elements, then there is a
derivation e : s w such that 0 and ei are identical
except for the index symbols in the sentential forms of
</bodyText>
<equation confidence="0.401394">
e. â€¢
</equation>
<bodyText confidence="0.949579153846154">
This equivalence lets us transfer results from {}-LIG
to UVG-DL. It can easily be seen from the construction
employed in the proof of Theorem 7 that a lexicalized
UVG-DL maps to a linearly restricted {}-LIG. For lin-
guistic purposes we are only interested in lexicalized
grammars, and therefore the linear restriction is quite
natural. We obtain the following corollaries thanks to
Theorem 7.
Corollary 8 C(UVG-DLLe.) C .C(CSG).
Corollary 9 G(UVG-DL) is a substitution-closed full
AFL.
Corollary 10 Each language in .C(UVG-DLL,) can
be recognized in polynomial deterministic time.
</bodyText>
<sectionHeader confidence="0.645563" genericHeader="related work">
Related Formalisms
</sectionHeader>
<bodyText confidence="0.999934074074074">
Based on word-order facts from Turkish, Hoffman
(1992) proposes an extension to CCG called {}-CCG, in
which arguments of functors form sets, rather than be-
ing represented in a curried notation. Under function
composition, these sets are unioned. Thus the move
from CCG to {}-CCG corresponds very much to the
move from LIG to {}-LIG. We conjecture that (a ver-
sion of) {}-CCG is weakly equivalent to {}-LIG.
Staudacher (1993) defines a related system called dis-
tributed index grammar or DIG. DIG is like LIG, except
that the stack of index symbols can be split into chunks
and distributed among the daughter nodes. However,
the formalism is not convincingly motivated by the lin-
guistic data given (which can also be handled by a sim-
ple LIG) or by other considerations.
Several extensions to {}-LIG and UVG-DL are de-
fined in (Rambow, 1994). First, we can introduce the
&amp;quot;integrity&amp;quot; constraint suggested by Becker et al. (1991)
which restricts long-distance relations through nodes.
This is necessary to implement the linguistic notion of
&amp;quot;barrier&amp;quot; or &amp;quot;island&amp;quot;. Second, we can define the tree-
rewriting version of UVG-DL, called V-TAG. This is
motivated by Conjecture 4, which (if true) means that
UVG-DL cannot derive Swiss German. Under either ex-
tension, the weak generative power is extended, but the
formal and computational results obtained for {}-LIG
and UVG-DL still hold.
</bodyText>
<sectionHeader confidence="0.946198" genericHeader="conclusions">
Conclusion
</sectionHeader>
<bodyText confidence="0.999990333333333">
This paper has presented two equivalent formalisms,
{}-LIG and UVG-DL, which provide formal models for
the three different phenomena that we identified in the
beginning of the paper. We have shown that both for-
malisms, under certain restrictions that are compati-
ble with the motivating phenomena, are restricted in
their generative capacity and polynomially parsable,
thus making them attractive candidates for modeling
natural language. Furthermore, the formalisms are
substitution-closed AFLs, suggesting that the defini-
tions we have given are &amp;quot;natural&amp;quot; from the point of
view of formal language theory.
</bodyText>
<sectionHeader confidence="0.999269" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.8289075">
I would like to thank Bob Kasper, Gaelle Recource,
Giorgio Satta, Ed Stabler, two anonymous reviewers,
</bodyText>
<page confidence="0.994087">
269
</page>
<bodyText confidence="0.9968075">
and especially K. Vijay-Shanker for useful comments
and discussions. The research reported in this paper
was conducted while the author was with the Com-
puter and Information Science Department of the Uni-
versity of Pennsylvania. The research was sponsored
by the following grants: ARO DAAL 03-89-C-0031;
DARPA N00014-904-1863; NSF IRI 90-16592; and Ben
Franklin 91S.3078C-1.
</bodyText>
<sectionHeader confidence="0.944922" genericHeader="references">
Bibliography
</sectionHeader>
<reference confidence="0.998910410526316">
Aho, A. V. (1968). Indexed grammars - an extension
to context free grammars. J. ACM, 15:647-671.
Becker, Tilman; Joshi, Aravind; and Rambow, Owen
(1991). Long distance scrambling and tree adjoin-
ing grammars. In Fifth Conference of the European
Chapter of the Association for Computational Lin-
guistics (EACL&apos;91), pages 21-26. ACL.
Chomsky, Noam (1981). Lectures in Government and
Binding. Studies in generative grammar 9. Foris,
Dordrecht.
Cremers, A. B. and Mayer, 0. (1973). On matrix lan-
guages. Information and Control, 23:86-96.
Cremers, A. B. and Mayer, 0. (1974). On vector lan-
guages. J. Comput. Syst. Sci., 8:158-166.
Gazdar, G. (1988). Applicability of indexed grammars
to natural languages. In Reyle, U. and Rohrer, C.,
editors, Natural Language Parsing and Linguistic
Theories. D. Reidel, Dordrecht.
Hoffman, Beryl (1992). A CCG approach to free word
order languages. In 30th Meeting of the Associa-
tion for Computational Linguistics (ACL&apos;92).
Joshi, Aravind; Levy, Leon; and Takahashi, M (1975).
Tree adjunct grammars. J. Comput. Syst. Sci.,
10:136-163.
Joshi, Aravind K. (1985). How much context-
sensitivity is necessary for characterizing struc-
tural descriptions - Tree Adjoining Grammars.
In Dowty, D.; Karttunen, L.; and Zwicky, A., ed-
itors, Natural Language Processing - Theoreti-
cal, Computational and Psychological Perspective,
pages 206-250. Cambridge University Press, New
York, NY. Originally presented in 1983.
Karttunen, Lauri (1989). Radical lexicalism. In Baltin,
Mark and Kroch, Anthony S., editors, Alternative
conceptions of phrase structure, pages 43-65. Uni-
versity of Chicago Press, Chicago.
Kasper, Robert (1992). Compiling head-driven phrase
structure grammar into lexicalized tree adjoining
grammar. Presented at the TAG+ Workshop, Uni-
versity of Pennsylvania.
Marcus, Mitchell; Hindle, Donald; and Fleck, Margaret
(1983). D-theory: Talking about talking about
trees. In Proceedings of the 21st Annual Meeting
of the Association f or Computational Linguistics,
Cambridge, MA.
Pollard, Carl (1984). Generalized phrase structure
grammars, head grammars and natural language.
PhD thesis, Stanford University, Stanford, CA.
Pollard, Carl and Sag, Ivan (1987). Information-
Based Syntax and Semantics. Vol 1: Fundamen-
tals. CSLI.
Pollard, Carl and Sag, Ivan (1992). Anaphors in En-
glish and the scope of binding theory. Linguistic
Inquiry, 23(2):261-303.
Pollard, Carl and Sag, Ivan (1994). Head-Driven
Phrase Structure Grammar. University of Chicago
Press, Chicago. Draft distributed at the Third Eu-
ropean Summer School in Language, Logic and In-
formation, Saarbriicken, 1991.
Rambow, Owen (1994). Formal and Computational
Models for Natural Language Syntax. PhD thesis,
Department of Computer and Information Science,
University of Pennsylvania, Philadelphia.
Rambow, Owen and Satta, Giorgio (1994). A rewriting
system for free word order syntax that is non-local
and mildly context sensitive. In Martin-Vide, Car-
los, editor, Current Issues in Mathematical Lin-
guistics, North-Holland Linguistic series, Volume
56. Elsevier-North Holland, Amsterdam.
Satta, Giorgio (1993). Recognition of vector languages.
Unpublished manuscript, Universita di Venezia.
Shieber, Stuart B. (1985). Evidence against the
context-freeness of natural language. Linguistics
and Philosophy, 8:333-343.
Staudacher, Peter (1993). New frontiers beyond
context-freeness: DI-grammars and DI-automata.
In Sixth Conference of the European Chapter
of the Association for Computational Linguistics
(EACL&apos;93).
Steedman, Mark (1985). Dependency and coordination
in the grammar of Dutch and English. Language,
61.
Vijay-Shanker, K. (1992). Using descriptions of trees in
a Tree Adjoining Grammar. Computational Lin-
guistics, 18(4):481-518.
Vijay-Shanker, K. and Weir, David (1994). The equiva-
lence of four extensions of context-free grammars.
Math. Syst. Theory. Also available as Technical
Report CSRP 236 from the University of Sussex,
School of Cognitive and Computing Sciences.
Vijay-Shanker, K.; Weir, D.J.; and Joshi, A.K. (1987).
Characterizing structural descriptions produced by
various grammatical formalisms. In 25th Meeting
of the Association for Computational Linguistics
(A CL &apos;87), Stanford, CA.
</reference>
<page confidence="0.995899">
270
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.296821">
<title confidence="0.99904">Multiset-Valued Linear Index Grammars: Imposing Dominance Constraints on Derivations</title>
<author confidence="0.989328">Owen Rambow</author>
<note confidence="0.70136675">Univesite Paris 7 UFR Linguistique, TALANA Case 7003, 2, Place Jussieu F-75251 Paris Cedex 05, France</note>
<email confidence="0.793097">rambow@linguist.jussieu.fr</email>
<abstract confidence="0.991819208333334">While LIG-equivalent formalisms have been shown to provide adequate formal power for a wide range of linguistic phenomena (including the aforementioned Swiss German construction), the need for other mathematical formalisms has arisen in several unrelated areas. In this paper, we discuss three such cases. First, capturing several semantic and syntactic issues in unificationbased formalisms leads to the use of multiset-valued feature structures. Second, word order facts from languages such as German, Russian, or Turkish cannot be derived by LIG-equivalent formalisms. Third, a generalization of trees to &amp;quot;quasi-trees&amp;quot; (Vijay-Shanker, 1992) in the spirit of D-Theory (Marcus et al., 1983) leads to the definition of a new formal system. In this paper, we introduce two new equivalent mathematical formalisms which provide adequate descriptions for these three phenomena. The paper is structured as follows. First, we present the three phenomena in more detail. We then introduce multiset-valued LIG and present some formal properties. Thereafter, we introduce a second rewriting system and show that it is weakly equivalent to the LIG variant. We then briefly mention some related formalisms. We conclude with a brief summary. Three Problems for LIG-Equivalent Formalisms The three problems we present are of a rather different nature. The first arises from the way a linguistic problem is treated in a specific type of framework (unification-based formalisms). The second problem derives directly from linguistic data. The third problem is a formalism which has been motivated on independent, methodological grounds, but whose formal properties are unknown. Feature Structures HPSG (Pollard and Sag, 1987; Pollard and Sag, 1994) uses typed feature structures as its formal basis, which are Turing-equivalent. However, it is not necessarily Abstract This paper defines multiset-valued linear index grammar and unordered vector grammar with dominance links. The former models certain uses of multisetvalued feature structures in unification-based formalisms, while the latter is motivated by word order variation and by &amp;quot;quasi-trees&amp;quot;, a generalization of trees. The two formalisms are weakly equivalent, and an important subset is at most context-sensitive and polynomially parsable.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>A V Aho</author>
</authors>
<title>Indexed grammars - an extension to context free grammars.</title>
<date>1968</date>
<journal>J. ACM,</journal>
<pages>15--647</pages>
<contexts>
<context position="3629" citStr="Aho, 1968" startWordPosition="542" endWordPosition="543">FGs attractive formalisms for formal and computational linguists, in particular, polynomial parsability and restricted weak generative capacity. These mathematical models include tree adjoining grammar (TAG) (Joshi et al., 1975; Joshi, 1985), head grammar (Pollard, 1984), combinatory categorial grammar (CCG) (Steedman, 1985), and linear index grammar (LIG) (Gazdar, 1988). These formalisms have been shown to be weakly equivalent to each other (Vijay-Shanker et al., 1987; Vijay-Shanker and Weir, 1994); we will refer to them as &amp;quot;LIG-equivalent formalisms&amp;quot;. LIG is a variant of index grammar (IG) (Aho, 1968). Like CFG, IG is a context-free string rewriting system, except that the nonterminal symbols in a CFG are augmented with stacks of index symbols. The rewrite rules push or pop indices from the index stack. In an IG, the index stack is copied to all nonterminal symbols on the right-hand side of a rule. In a LIG, the stack is copied to exactly one right-hand side nonterminal.&apos; &apos;Note that a LIG is not an IG that is linear (i.e., whose productions have at most one nonterminal on the right-hand side), but rather, it is a context-free grammar with linear indices (i.e., the indices are never copied)</context>
</contexts>
<marker>Aho, 1968</marker>
<rawString>Aho, A. V. (1968). Indexed grammars - an extension to context free grammars. J. ACM, 15:647-671.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Tilman Becker</author>
<author>Aravind Joshi</author>
<author>Owen Rambow</author>
</authors>
<title>Long distance scrambling and tree adjoining grammars.</title>
<date>1991</date>
<booktitle>In Fifth Conference of the European Chapter of the Association for Computational Linguistics (EACL&apos;91),</booktitle>
<pages>21--26</pages>
<publisher>ACL.</publisher>
<contexts>
<context position="6079" citStr="Becker et al. (1991)" startWordPosition="934" endWordPosition="937">arly this would represent an important insight into the nature of grammatical competence. On the practical side, formal equivalences can guide the building of applications such as parsers for existing HPSG grammars. For example, it has been proposed that HPSG grammars can be &amp;quot;compiled&amp;quot; into TAGs in order to obtain a computationally more tractable system (Kasper, 1992), thus sidestepping the issue of building parsers for HPSG directly. However, LIG-equivalent formalisms cannot serve as targets for compilations in cases in which HPSG uses multiset-valued feature structures. Word Order Variation Becker et al. (1991) discuss scrambling, which is the permutation of verbal arguments in languages such as German, Korean, Japanese, Hindi, Russian, and Turkish. If there are embedded clauses, scrambling in many languages can affect arguments of more than one verb (&amp;quot;long-distance&amp;quot; scrambling). (1) ... 6.13 [den KiihIschrank], bisher noch ... that the refrigeratorAcc so far yet niemand [t; zu reparieren] versprochen hat no-oneNom to repair promised has ... that so far, no-one has promised to repair the refrigerator Scrambling in German is &amp;quot;doubly unbounded&amp;quot; in the sense that there is no bound on the number of clau</context>
<context position="29996" citStr="Becker et al. (1991)" startWordPosition="5199" endWordPosition="5202">o the move from LIG to {}-LIG. We conjecture that (a version of) {}-CCG is weakly equivalent to {}-LIG. Staudacher (1993) defines a related system called distributed index grammar or DIG. DIG is like LIG, except that the stack of index symbols can be split into chunks and distributed among the daughter nodes. However, the formalism is not convincingly motivated by the linguistic data given (which can also be handled by a simple LIG) or by other considerations. Several extensions to {}-LIG and UVG-DL are defined in (Rambow, 1994). First, we can introduce the &amp;quot;integrity&amp;quot; constraint suggested by Becker et al. (1991) which restricts long-distance relations through nodes. This is necessary to implement the linguistic notion of &amp;quot;barrier&amp;quot; or &amp;quot;island&amp;quot;. Second, we can define the treerewriting version of UVG-DL, called V-TAG. This is motivated by Conjecture 4, which (if true) means that UVG-DL cannot derive Swiss German. Under either extension, the weak generative power is extended, but the formal and computational results obtained for {}-LIG and UVG-DL still hold. Conclusion This paper has presented two equivalent formalisms, {}-LIG and UVG-DL, which provide formal models for the three different phenomena that</context>
</contexts>
<marker>Becker, Joshi, Rambow, 1991</marker>
<rawString>Becker, Tilman; Joshi, Aravind; and Rambow, Owen (1991). Long distance scrambling and tree adjoining grammars. In Fifth Conference of the European Chapter of the Association for Computational Linguistics (EACL&apos;91), pages 21-26. ACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Noam Chomsky</author>
</authors>
<date>1981</date>
<booktitle>Lectures in Government and Binding. Studies in generative grammar 9. Foris,</booktitle>
<location>Dordrecht.</location>
<contexts>
<context position="5124" citStr="Chomsky, 1981" startWordPosition="786" endWordPosition="787">oposed to handle certain linguistic phenomena that relate two nodes within this tree. One of these is a multiset-valued feature that is passed along the phrase-structure tree from daughter node to mother node. Multiset-valued features have been proposed for the SLASH feature which handles tvh-dependencies (Pollard and Sag, 1994, Chapter 4), and for certain semantic purposes, including the representation of stored quantifiers in a mechanism similar to Cooper-storage. Another use may be the representation of anti-coreference constraints arising from Principle C of Binding Theory (be it that of (Chomsky, 1981) or of Pollard and Sag (1992)). It is desirable to be able to assess the formal power of such a system, for both theoretical and practical reasons. Theoretically, it would be interesting if it turned out that the linguistic principles formulated in HPSG naturally lead to certain restricted uses of the unification-based formalism. Clearly this would represent an important insight into the nature of grammatical competence. On the practical side, formal equivalences can guide the building of applications such as parsers for existing HPSG grammars. For example, it has been proposed that HPSG gramm</context>
</contexts>
<marker>Chomsky, 1981</marker>
<rawString>Chomsky, Noam (1981). Lectures in Government and Binding. Studies in generative grammar 9. Foris, Dordrecht.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A B Cremers</author>
<author>Mayer</author>
</authors>
<title>On matrix languages.</title>
<date>1973</date>
<journal>Information and Control,</journal>
<pages>23--86</pages>
<contexts>
<context position="7531" citStr="Cremers and Mayer, 1973" startWordPosition="1169" endWordPosition="1172">. that the clientoAT the refrigeratorAcc bisher noch niemand ti [[ti zu reparieren] so far yet no-oneNom to repair zu versuchen] versprochen hat to try promised has ... that so-far, no-one yet has promised the client to repair the refrigerator Similar data has been observed in the literature for other languages, for example for Finnish by Karttunen (1989). Becker et al. (1991) argue that a simple TAG (and the other LIG-equivalent formalisms) cannot derive the full range of scrambled sentences. Rambow and Satta (1994) propose the use of unordered vector grammar (UVG) to model the data. In UVG (Cremers and Mayer, 1973), several context-free string rewriting rules are grouped into vectors, as for verspricht &apos;promises&apos;: (3) ((S NPnon-, VP), (VP â€”+ NPdat VP), (VP -4 Sint- V), (V --+ verspricht) ) During a derivation, rules from a vector can be applied in any order, and rules from different vectors can be interleaved, but at the end, all rules from an instance of a vector must have been used in the derivation. By varying the order in which rules from different vectors are applied, we can derive different word orders. Observe that the vector in (3) contains exactly one terminal symbol (the verb); grammars in whi</context>
</contexts>
<marker>Cremers, Mayer, 1973</marker>
<rawString>Cremers, A. B. and Mayer, 0. (1973). On matrix languages. Information and Control, 23:86-96.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A B Cremers</author>
<author>Mayer</author>
</authors>
<title>On vector languages.</title>
<date>1974</date>
<journal>J. Comput. Syst. Sci.,</journal>
<pages>8--158</pages>
<contexts>
<context position="8368" citStr="Cremers and Mayer, 1974" startWordPosition="1313" endWordPosition="1316">vector can be applied in any order, and rules from different vectors can be interleaved, but at the end, all rules from an instance of a vector must have been used in the derivation. By varying the order in which rules from different vectors are applied, we can derive different word orders. Observe that the vector in (3) contains exactly one terminal symbol (the verb); grammars in which every elementary structure (vector in UVG, tree in TAG, rule in CFG) contains at least one terminal symbol we will call lexicalized. Languages generated by UVG are known to be context-sensitive and semilinear (Cremers and Mayer, 1974) and polynomially parsable (Satta, 1993). However, they are not adequate for modeling natural language syntax. In the following example, (4a) is out since there is no analysis in which the moved NP c-commands its governing verb, as is the case in (4b). (4) a. * daB niemand [dem Kunden] [ti ... that no-oneNom the clientDAT zu versuchen] [den KiihIschrank]j versprochen to try the refrigeratorAcc promised hat [ti zu reparieren]2 has to repair b. ? daB niemand [dem Kunden] [den Kiihlschrank], [ti zu versuchen] versprochen hat, [tizu reparieren]i What is needed is an additional mechanism that enfor</context>
</contexts>
<marker>Cremers, Mayer, 1974</marker>
<rawString>Cremers, A. B. and Mayer, 0. (1974). On vector languages. J. Comput. Syst. Sci., 8:158-166.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Gazdar</author>
</authors>
<title>Applicability of indexed grammars to natural languages.</title>
<date>1988</date>
<editor>In Reyle, U. and Rohrer, C., editors,</editor>
<location>Dordrecht.</location>
<contexts>
<context position="3392" citStr="Gazdar, 1988" startWordPosition="502" endWordPosition="504">he cross-serial dependencies found in Swiss German cannot be generated by a CFG (Shieber, 1985). Several mathematical models have been proposed which extend the formal power of CFGs, while still maintaining the formal properties that make CFGs attractive formalisms for formal and computational linguists, in particular, polynomial parsability and restricted weak generative capacity. These mathematical models include tree adjoining grammar (TAG) (Joshi et al., 1975; Joshi, 1985), head grammar (Pollard, 1984), combinatory categorial grammar (CCG) (Steedman, 1985), and linear index grammar (LIG) (Gazdar, 1988). These formalisms have been shown to be weakly equivalent to each other (Vijay-Shanker et al., 1987; Vijay-Shanker and Weir, 1994); we will refer to them as &amp;quot;LIG-equivalent formalisms&amp;quot;. LIG is a variant of index grammar (IG) (Aho, 1968). Like CFG, IG is a context-free string rewriting system, except that the nonterminal symbols in a CFG are augmented with stacks of index symbols. The rewrite rules push or pop indices from the index stack. In an IG, the index stack is copied to all nonterminal symbols on the right-hand side of a rule. In a LIG, the stack is copied to exactly one right-hand sid</context>
</contexts>
<marker>Gazdar, 1988</marker>
<rawString>Gazdar, G. (1988). Applicability of indexed grammars to natural languages. In Reyle, U. and Rohrer, C., editors, Natural Language Parsing and Linguistic Theories. D. Reidel, Dordrecht.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Beryl Hoffman</author>
</authors>
<title>A CCG approach to free word order languages.</title>
<date>1992</date>
<booktitle>In 30th Meeting of the Association for Computational Linguistics (ACL&apos;92).</booktitle>
<contexts>
<context position="29128" citStr="Hoffman (1992)" startWordPosition="5054" endWordPosition="5055">ts from {}-LIG to UVG-DL. It can easily be seen from the construction employed in the proof of Theorem 7 that a lexicalized UVG-DL maps to a linearly restricted {}-LIG. For linguistic purposes we are only interested in lexicalized grammars, and therefore the linear restriction is quite natural. We obtain the following corollaries thanks to Theorem 7. Corollary 8 C(UVG-DLLe.) C .C(CSG). Corollary 9 G(UVG-DL) is a substitution-closed full AFL. Corollary 10 Each language in .C(UVG-DLL,) can be recognized in polynomial deterministic time. Related Formalisms Based on word-order facts from Turkish, Hoffman (1992) proposes an extension to CCG called {}-CCG, in which arguments of functors form sets, rather than being represented in a curried notation. Under function composition, these sets are unioned. Thus the move from CCG to {}-CCG corresponds very much to the move from LIG to {}-LIG. We conjecture that (a version of) {}-CCG is weakly equivalent to {}-LIG. Staudacher (1993) defines a related system called distributed index grammar or DIG. DIG is like LIG, except that the stack of index symbols can be split into chunks and distributed among the daughter nodes. However, the formalism is not convincingl</context>
</contexts>
<marker>Hoffman, 1992</marker>
<rawString>Hoffman, Beryl (1992). A CCG approach to free word order languages. In 30th Meeting of the Association for Computational Linguistics (ACL&apos;92).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Aravind Joshi</author>
<author>Leon Levy</author>
<author>M Takahashi</author>
</authors>
<title>Tree adjunct grammars.</title>
<date>1975</date>
<journal>J. Comput. Syst. Sci.,</journal>
<pages>10--136</pages>
<contexts>
<context position="3246" citStr="Joshi et al., 1975" startWordPosition="480" endWordPosition="483">language syntax have largely been abandoned; it has been shown that (under standard assumptions concerning the recursive nature of clausal embedding) the cross-serial dependencies found in Swiss German cannot be generated by a CFG (Shieber, 1985). Several mathematical models have been proposed which extend the formal power of CFGs, while still maintaining the formal properties that make CFGs attractive formalisms for formal and computational linguists, in particular, polynomial parsability and restricted weak generative capacity. These mathematical models include tree adjoining grammar (TAG) (Joshi et al., 1975; Joshi, 1985), head grammar (Pollard, 1984), combinatory categorial grammar (CCG) (Steedman, 1985), and linear index grammar (LIG) (Gazdar, 1988). These formalisms have been shown to be weakly equivalent to each other (Vijay-Shanker et al., 1987; Vijay-Shanker and Weir, 1994); we will refer to them as &amp;quot;LIG-equivalent formalisms&amp;quot;. LIG is a variant of index grammar (IG) (Aho, 1968). Like CFG, IG is a context-free string rewriting system, except that the nonterminal symbols in a CFG are augmented with stacks of index symbols. The rewrite rules push or pop indices from the index stack. In an IG, </context>
</contexts>
<marker>Joshi, Levy, Takahashi, 1975</marker>
<rawString>Joshi, Aravind; Levy, Leon; and Takahashi, M (1975). Tree adjunct grammars. J. Comput. Syst. Sci., 10:136-163.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Aravind K Joshi</author>
</authors>
<title>How much contextsensitivity is necessary for characterizing structural descriptions - Tree Adjoining Grammars.</title>
<date>1985</date>
<booktitle>Natural Language Processing - Theoretical, Computational and Psychological Perspective,</booktitle>
<pages>206--250</pages>
<editor>In Dowty, D.; Karttunen, L.; and Zwicky, A., editors,</editor>
<publisher>Cambridge University Press,</publisher>
<location>New York, NY.</location>
<note>Originally presented in</note>
<contexts>
<context position="3260" citStr="Joshi, 1985" startWordPosition="484" endWordPosition="485"> largely been abandoned; it has been shown that (under standard assumptions concerning the recursive nature of clausal embedding) the cross-serial dependencies found in Swiss German cannot be generated by a CFG (Shieber, 1985). Several mathematical models have been proposed which extend the formal power of CFGs, while still maintaining the formal properties that make CFGs attractive formalisms for formal and computational linguists, in particular, polynomial parsability and restricted weak generative capacity. These mathematical models include tree adjoining grammar (TAG) (Joshi et al., 1975; Joshi, 1985), head grammar (Pollard, 1984), combinatory categorial grammar (CCG) (Steedman, 1985), and linear index grammar (LIG) (Gazdar, 1988). These formalisms have been shown to be weakly equivalent to each other (Vijay-Shanker et al., 1987; Vijay-Shanker and Weir, 1994); we will refer to them as &amp;quot;LIG-equivalent formalisms&amp;quot;. LIG is a variant of index grammar (IG) (Aho, 1968). Like CFG, IG is a context-free string rewriting system, except that the nonterminal symbols in a CFG are augmented with stacks of index symbols. The rewrite rules push or pop indices from the index stack. In an IG, the index stac</context>
</contexts>
<marker>Joshi, 1985</marker>
<rawString>Joshi, Aravind K. (1985). How much contextsensitivity is necessary for characterizing structural descriptions - Tree Adjoining Grammars. In Dowty, D.; Karttunen, L.; and Zwicky, A., editors, Natural Language Processing - Theoretical, Computational and Psychological Perspective, pages 206-250. Cambridge University Press, New York, NY. Originally presented in 1983.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Lauri Karttunen</author>
</authors>
<title>Radical lexicalism.</title>
<date>1989</date>
<booktitle>Alternative conceptions of phrase structure,</booktitle>
<pages>43--65</pages>
<editor>In Baltin, Mark and Kroch, Anthony S., editors,</editor>
<publisher>University of Chicago Press,</publisher>
<location>Chicago.</location>
<contexts>
<context position="7264" citStr="Karttunen (1989)" startWordPosition="1125" endWordPosition="1126"> no bound on the number of clause boundaries over which an element can scramble, and an element scrambled (long-distance or not) from one clause does not preclude the scrambling of an element from another clause: (2) ... daB [dem Kunden] [den KiihIschrankb ... that the clientoAT the refrigeratorAcc bisher noch niemand ti [[ti zu reparieren] so far yet no-oneNom to repair zu versuchen] versprochen hat to try promised has ... that so-far, no-one yet has promised the client to repair the refrigerator Similar data has been observed in the literature for other languages, for example for Finnish by Karttunen (1989). Becker et al. (1991) argue that a simple TAG (and the other LIG-equivalent formalisms) cannot derive the full range of scrambled sentences. Rambow and Satta (1994) propose the use of unordered vector grammar (UVG) to model the data. In UVG (Cremers and Mayer, 1973), several context-free string rewriting rules are grouped into vectors, as for verspricht &apos;promises&apos;: (3) ((S NPnon-, VP), (VP â€”+ NPdat VP), (VP -4 Sint- V), (V --+ verspricht) ) During a derivation, rules from a vector can be applied in any order, and rules from different vectors can be interleaved, but at the end, all rules from </context>
</contexts>
<marker>Karttunen, 1989</marker>
<rawString>Karttunen, Lauri (1989). Radical lexicalism. In Baltin, Mark and Kroch, Anthony S., editors, Alternative conceptions of phrase structure, pages 43-65. University of Chicago Press, Chicago.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Robert Kasper</author>
</authors>
<title>Compiling head-driven phrase structure grammar into lexicalized tree adjoining grammar. Presented at the TAG+ Workshop,</title>
<date>1992</date>
<institution>University of Pennsylvania.</institution>
<contexts>
<context position="5829" citStr="Kasper, 1992" startWordPosition="900" endWordPosition="901">h a system, for both theoretical and practical reasons. Theoretically, it would be interesting if it turned out that the linguistic principles formulated in HPSG naturally lead to certain restricted uses of the unification-based formalism. Clearly this would represent an important insight into the nature of grammatical competence. On the practical side, formal equivalences can guide the building of applications such as parsers for existing HPSG grammars. For example, it has been proposed that HPSG grammars can be &amp;quot;compiled&amp;quot; into TAGs in order to obtain a computationally more tractable system (Kasper, 1992), thus sidestepping the issue of building parsers for HPSG directly. However, LIG-equivalent formalisms cannot serve as targets for compilations in cases in which HPSG uses multiset-valued feature structures. Word Order Variation Becker et al. (1991) discuss scrambling, which is the permutation of verbal arguments in languages such as German, Korean, Japanese, Hindi, Russian, and Turkish. If there are embedded clauses, scrambling in many languages can affect arguments of more than one verb (&amp;quot;long-distance&amp;quot; scrambling). (1) ... 6.13 [den KiihIschrank], bisher noch ... that the refrigeratorAcc s</context>
</contexts>
<marker>Kasper, 1992</marker>
<rawString>Kasper, Robert (1992). Compiling head-driven phrase structure grammar into lexicalized tree adjoining grammar. Presented at the TAG+ Workshop, University of Pennsylvania.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mitchell Marcus</author>
<author>Donald Hindle</author>
<author>Margaret Fleck</author>
</authors>
<title>D-theory: Talking about talking about trees.</title>
<date>1983</date>
<booktitle>In Proceedings of the 21st Annual Meeting of the Association f or Computational Linguistics,</booktitle>
<location>Cambridge, MA.</location>
<contexts>
<context position="917" citStr="Marcus et al., 1983" startWordPosition="128" endWordPosition="131">mal power for a wide range of linguistic phenomena (including the aforementioned Swiss German construction), the need for other mathematical formalisms has arisen in several unrelated areas. In this paper, we discuss three such cases. First, capturing several semantic and syntactic issues in unificationbased formalisms leads to the use of multiset-valued feature structures. Second, word order facts from languages such as German, Russian, or Turkish cannot be derived by LIG-equivalent formalisms. Third, a generalization of trees to &amp;quot;quasi-trees&amp;quot; (Vijay-Shanker, 1992) in the spirit of D-Theory (Marcus et al., 1983) leads to the definition of a new formal system. In this paper, we introduce two new equivalent mathematical formalisms which provide adequate descriptions for these three phenomena. The paper is structured as follows. First, we present the three phenomena in more detail. We then introduce multiset-valued LIG and present some formal properties. Thereafter, we introduce a second rewriting system and show that it is weakly equivalent to the LIG variant. We then briefly mention some related formalisms. We conclude with a brief summary. Three Problems for LIG-Equivalent Formalisms The three proble</context>
</contexts>
<marker>Marcus, Hindle, Fleck, 1983</marker>
<rawString>Marcus, Mitchell; Hindle, Donald; and Fleck, Margaret (1983). D-theory: Talking about talking about trees. In Proceedings of the 21st Annual Meeting of the Association f or Computational Linguistics, Cambridge, MA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Carl Pollard</author>
</authors>
<title>Generalized phrase structure grammars, head grammars and natural language. PhD thesis,</title>
<date>1984</date>
<institution>Stanford University,</institution>
<location>Stanford, CA.</location>
<contexts>
<context position="3290" citStr="Pollard, 1984" startWordPosition="488" endWordPosition="489">has been shown that (under standard assumptions concerning the recursive nature of clausal embedding) the cross-serial dependencies found in Swiss German cannot be generated by a CFG (Shieber, 1985). Several mathematical models have been proposed which extend the formal power of CFGs, while still maintaining the formal properties that make CFGs attractive formalisms for formal and computational linguists, in particular, polynomial parsability and restricted weak generative capacity. These mathematical models include tree adjoining grammar (TAG) (Joshi et al., 1975; Joshi, 1985), head grammar (Pollard, 1984), combinatory categorial grammar (CCG) (Steedman, 1985), and linear index grammar (LIG) (Gazdar, 1988). These formalisms have been shown to be weakly equivalent to each other (Vijay-Shanker et al., 1987; Vijay-Shanker and Weir, 1994); we will refer to them as &amp;quot;LIG-equivalent formalisms&amp;quot;. LIG is a variant of index grammar (IG) (Aho, 1968). Like CFG, IG is a context-free string rewriting system, except that the nonterminal symbols in a CFG are augmented with stacks of index symbols. The rewrite rules push or pop indices from the index stack. In an IG, the index stack is copied to all nonterminal</context>
</contexts>
<marker>Pollard, 1984</marker>
<rawString>Pollard, Carl (1984). Generalized phrase structure grammars, head grammars and natural language. PhD thesis, Stanford University, Stanford, CA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Carl Pollard</author>
<author>Ivan Sag</author>
</authors>
<title>InformationBased Syntax and Semantics. Vol 1: Fundamentals.</title>
<date>1987</date>
<publisher>CSLI.</publisher>
<contexts>
<context position="1950" citStr="Pollard and Sag, 1987" startWordPosition="291" endWordPosition="294">it is weakly equivalent to the LIG variant. We then briefly mention some related formalisms. We conclude with a brief summary. Three Problems for LIG-Equivalent Formalisms The three problems we present are of a rather different nature. The first arises from the way a linguistic problem is treated in a specific type of framework (unification-based formalisms). The second problem derives directly from linguistic data. The third problem is a formalism which has been motivated on independent, methodological grounds, but whose formal properties are unknown. Multiset-Valued Feature Structures HPSG (Pollard and Sag, 1987; Pollard and Sag, 1994) uses typed feature structures as its formal basis, which are Turing-equivalent. However, it is not necessarily Abstract This paper defines multiset-valued linear index grammar and unordered vector grammar with dominance links. The former models certain uses of multisetvalued feature structures in unification-based formalisms, while the latter is motivated by word order variation and by &amp;quot;quasi-trees&amp;quot;, a generalization of trees. The two formalisms are weakly equivalent, and an important subset is at most context-sensitive and polynomially parsable. Introduction Early att</context>
</contexts>
<marker>Pollard, Sag, 1987</marker>
<rawString>Pollard, Carl and Sag, Ivan (1987). InformationBased Syntax and Semantics. Vol 1: Fundamentals. CSLI.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Carl Pollard</author>
<author>Ivan Sag</author>
</authors>
<title>Anaphors in English and the scope of binding theory. Linguistic Inquiry,</title>
<date>1992</date>
<pages>23--2</pages>
<contexts>
<context position="5153" citStr="Pollard and Sag (1992)" startWordPosition="790" endWordPosition="793">ain linguistic phenomena that relate two nodes within this tree. One of these is a multiset-valued feature that is passed along the phrase-structure tree from daughter node to mother node. Multiset-valued features have been proposed for the SLASH feature which handles tvh-dependencies (Pollard and Sag, 1994, Chapter 4), and for certain semantic purposes, including the representation of stored quantifiers in a mechanism similar to Cooper-storage. Another use may be the representation of anti-coreference constraints arising from Principle C of Binding Theory (be it that of (Chomsky, 1981) or of Pollard and Sag (1992)). It is desirable to be able to assess the formal power of such a system, for both theoretical and practical reasons. Theoretically, it would be interesting if it turned out that the linguistic principles formulated in HPSG naturally lead to certain restricted uses of the unification-based formalism. Clearly this would represent an important insight into the nature of grammatical competence. On the practical side, formal equivalences can guide the building of applications such as parsers for existing HPSG grammars. For example, it has been proposed that HPSG grammars can be &amp;quot;compiled&amp;quot; into TA</context>
</contexts>
<marker>Pollard, Sag, 1992</marker>
<rawString>Pollard, Carl and Sag, Ivan (1992). Anaphors in English and the scope of binding theory. Linguistic Inquiry, 23(2):261-303.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Carl Pollard</author>
<author>Ivan Sag</author>
</authors>
<title>Head-Driven Phrase Structure Grammar.</title>
<date>1994</date>
<booktitle>Draft distributed at the Third European Summer School in Language, Logic and Information, Saarbriicken,</booktitle>
<publisher>University of Chicago Press,</publisher>
<location>Chicago.</location>
<contexts>
<context position="1974" citStr="Pollard and Sag, 1994" startWordPosition="295" endWordPosition="298"> to the LIG variant. We then briefly mention some related formalisms. We conclude with a brief summary. Three Problems for LIG-Equivalent Formalisms The three problems we present are of a rather different nature. The first arises from the way a linguistic problem is treated in a specific type of framework (unification-based formalisms). The second problem derives directly from linguistic data. The third problem is a formalism which has been motivated on independent, methodological grounds, but whose formal properties are unknown. Multiset-Valued Feature Structures HPSG (Pollard and Sag, 1987; Pollard and Sag, 1994) uses typed feature structures as its formal basis, which are Turing-equivalent. However, it is not necessarily Abstract This paper defines multiset-valued linear index grammar and unordered vector grammar with dominance links. The former models certain uses of multisetvalued feature structures in unification-based formalisms, while the latter is motivated by word order variation and by &amp;quot;quasi-trees&amp;quot;, a generalization of trees. The two formalisms are weakly equivalent, and an important subset is at most context-sensitive and polynomially parsable. Introduction Early attempts to use context-fre</context>
<context position="4839" citStr="Pollard and Sag, 1994" startWordPosition="740" endWordPosition="744">ver copied). 263 the case that the full power of the system is used in the linguistic analyses that are expressed in it. HPSG analyses include information about constituent structure which can be represented as a context-free phrasestructure tree. In addition, various mechanisms have been proposed to handle certain linguistic phenomena that relate two nodes within this tree. One of these is a multiset-valued feature that is passed along the phrase-structure tree from daughter node to mother node. Multiset-valued features have been proposed for the SLASH feature which handles tvh-dependencies (Pollard and Sag, 1994, Chapter 4), and for certain semantic purposes, including the representation of stored quantifiers in a mechanism similar to Cooper-storage. Another use may be the representation of anti-coreference constraints arising from Principle C of Binding Theory (be it that of (Chomsky, 1981) or of Pollard and Sag (1992)). It is desirable to be able to assess the formal power of such a system, for both theoretical and practical reasons. Theoretically, it would be interesting if it turned out that the linguistic principles formulated in HPSG naturally lead to certain restricted uses of the unification-</context>
</contexts>
<marker>Pollard, Sag, 1994</marker>
<rawString>Pollard, Carl and Sag, Ivan (1994). Head-Driven Phrase Structure Grammar. University of Chicago Press, Chicago. Draft distributed at the Third European Summer School in Language, Logic and Information, Saarbriicken, 1991.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Owen Rambow</author>
</authors>
<title>Formal and Computational Models for Natural Language Syntax.</title>
<date>1994</date>
<tech>PhD thesis,</tech>
<institution>Department of Computer and Information Science, University of Pennsylvania,</institution>
<location>Philadelphia.</location>
<contexts>
<context position="14948" citStr="Rambow, 1994" startWordPosition="2410" endWordPosition="2411">emove the indices in s from t, then we rewrite the nonterminal, then we distribute the remaining indices freely among the newly introduced nonterminals B1, . , B,, creating new multisets, and finally we add si to the new multiset for each Bi, creating the new ti. The reader will have noticed, and hopefully excused, the abuse of notation in this definition, which results from mixing set-notation and string-notation. We can also define {}-LIG as a pure string-rewriting system which does not require the definition of additional data structures (the multisets) for the notion of &amp;quot;derivation&amp;quot; (see (Rambow, 1994)). However, the definition provided here (using an explicit representation of multisets) has the advantage of corresponding more directly to the intuition underlying {}-LIG and is much easier to understand and use in proofs. The issue is purely notational. We now introduce a restriction on derivations, which will be useful later. Definition 2 A linearly-restricted derivation in a {}-LIG is a derivation p : S w with w E V,.; such that: 1. The number of index symbols added (and hence removed) during the derivation is linearly bounded by w. 2. The number of e-productions used during the derivatio</context>
<context position="16551" citStr="Rambow, 1994" startWordPosition="2716" endWordPosition="2717">this restricted version. EXAMPLE 1 The following grammar derives the language COUNT-5, where COUNT-5 = Let G1 = (Viv, VT, VI, P, S) with: VN = {S,A,B,C,D,E} VT = {a,b,c,d,e} Vi = Sb, Se, Sci, Se} P = {Pi: S S{so,sb,se,sd,se} p2 : S ABCDE P3 AlSa Aa, p4 : A â€”4 E p6 : B{sb) Bb, p6 : B E p7 : C{.5,} â€”4 Cc, p8 : C E p9 : D{sd} Dd, Pio : D â€”4 e Pii E{se} Ee, P12 :E-4E A sample derivation is shown in Figure 2. This example shows that E({}-LIG) is not contained in L(LIG), since the latter cannot derive couNT-5. We now define two normal forms which will be used later. We omit the proofs and refer to (Rambow, 1994) for details. Definition 3 A {}-LIG G = (VN, VT P,S) is in restricted index normal form or RINE if all productions in P are of one of the following forms (where A,B E VN, f E VI and a E (VT U VN)*): 1. A a 2. A â€”4 Bf 3. Af ---+ B Theorem 1 For any {}-LIG, there is an equivalent {}-LIG in RINF. Definition 4 A 0-LIG G = (VN, VT, P, S) is in Extended Two Form (ETF) if every production in P has the form As â€”&gt; B1siB2s2, As -4 Bs&apos;, or A -4 a, where A,Bi, B2 E VN, S, S1 S2, E VI*, and a E VT U {O. Theorem 2 For any {}-LIG, there is an equivalent {}-LIG in ETF. We now discuss some formal properties of</context>
<context position="29910" citStr="Rambow, 1994" startWordPosition="5188" endWordPosition="5189">hese sets are unioned. Thus the move from CCG to {}-CCG corresponds very much to the move from LIG to {}-LIG. We conjecture that (a version of) {}-CCG is weakly equivalent to {}-LIG. Staudacher (1993) defines a related system called distributed index grammar or DIG. DIG is like LIG, except that the stack of index symbols can be split into chunks and distributed among the daughter nodes. However, the formalism is not convincingly motivated by the linguistic data given (which can also be handled by a simple LIG) or by other considerations. Several extensions to {}-LIG and UVG-DL are defined in (Rambow, 1994). First, we can introduce the &amp;quot;integrity&amp;quot; constraint suggested by Becker et al. (1991) which restricts long-distance relations through nodes. This is necessary to implement the linguistic notion of &amp;quot;barrier&amp;quot; or &amp;quot;island&amp;quot;. Second, we can define the treerewriting version of UVG-DL, called V-TAG. This is motivated by Conjecture 4, which (if true) means that UVG-DL cannot derive Swiss German. Under either extension, the weak generative power is extended, but the formal and computational results obtained for {}-LIG and UVG-DL still hold. Conclusion This paper has presented two equivalent formalisms,</context>
</contexts>
<marker>Rambow, 1994</marker>
<rawString>Rambow, Owen (1994). Formal and Computational Models for Natural Language Syntax. PhD thesis, Department of Computer and Information Science, University of Pennsylvania, Philadelphia.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Owen Rambow</author>
<author>Giorgio Satta</author>
</authors>
<title>A rewriting system for free word order syntax that is non-local and mildly context sensitive.</title>
<date>1994</date>
<booktitle>Current Issues in Mathematical Linguistics, North-Holland Linguistic series, Volume 56. Elsevier-North</booktitle>
<editor>In Martin-Vide, Carlos, editor,</editor>
<location>Holland, Amsterdam.</location>
<contexts>
<context position="7429" citStr="Rambow and Satta (1994)" startWordPosition="1150" endWordPosition="1153">lude the scrambling of an element from another clause: (2) ... daB [dem Kunden] [den KiihIschrankb ... that the clientoAT the refrigeratorAcc bisher noch niemand ti [[ti zu reparieren] so far yet no-oneNom to repair zu versuchen] versprochen hat to try promised has ... that so-far, no-one yet has promised the client to repair the refrigerator Similar data has been observed in the literature for other languages, for example for Finnish by Karttunen (1989). Becker et al. (1991) argue that a simple TAG (and the other LIG-equivalent formalisms) cannot derive the full range of scrambled sentences. Rambow and Satta (1994) propose the use of unordered vector grammar (UVG) to model the data. In UVG (Cremers and Mayer, 1973), several context-free string rewriting rules are grouped into vectors, as for verspricht &apos;promises&apos;: (3) ((S NPnon-, VP), (VP â€”+ NPdat VP), (VP -4 Sint- V), (V --+ verspricht) ) During a derivation, rules from a vector can be applied in any order, and rules from different vectors can be interleaved, but at the end, all rules from an instance of a vector must have been used in the derivation. By varying the order in which rules from different vectors are applied, we can derive different word o</context>
</contexts>
<marker>Rambow, Satta, 1994</marker>
<rawString>Rambow, Owen and Satta, Giorgio (1994). A rewriting system for free word order syntax that is non-local and mildly context sensitive. In Martin-Vide, Carlos, editor, Current Issues in Mathematical Linguistics, North-Holland Linguistic series, Volume 56. Elsevier-North Holland, Amsterdam.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Giorgio Satta</author>
</authors>
<title>Recognition of vector languages.</title>
<date>1993</date>
<note>Unpublished manuscript, Universita di Venezia.</note>
<contexts>
<context position="8408" citStr="Satta, 1993" startWordPosition="1320" endWordPosition="1321">ifferent vectors can be interleaved, but at the end, all rules from an instance of a vector must have been used in the derivation. By varying the order in which rules from different vectors are applied, we can derive different word orders. Observe that the vector in (3) contains exactly one terminal symbol (the verb); grammars in which every elementary structure (vector in UVG, tree in TAG, rule in CFG) contains at least one terminal symbol we will call lexicalized. Languages generated by UVG are known to be context-sensitive and semilinear (Cremers and Mayer, 1974) and polynomially parsable (Satta, 1993). However, they are not adequate for modeling natural language syntax. In the following example, (4a) is out since there is no analysis in which the moved NP c-commands its governing verb, as is the case in (4b). (4) a. * daB niemand [dem Kunden] [ti ... that no-oneNom the clientDAT zu versuchen] [den KiihIschrank]j versprochen to try the refrigeratorAcc promised hat [ti zu reparieren]2 has to repair b. ? daB niemand [dem Kunden] [den Kiihlschrank], [ti zu versuchen] versprochen hat, [tizu reparieren]i What is needed is an additional mechanism that enforces a dominance relation between the sis</context>
</contexts>
<marker>Satta, 1993</marker>
<rawString>Satta, Giorgio (1993). Recognition of vector languages. Unpublished manuscript, Universita di Venezia.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stuart B Shieber</author>
</authors>
<title>Evidence against the context-freeness of natural language.</title>
<date>1985</date>
<journal>Linguistics and Philosophy,</journal>
<pages>8--333</pages>
<contexts>
<context position="2874" citStr="Shieber, 1985" startWordPosition="430" endWordPosition="431">tructures in unification-based formalisms, while the latter is motivated by word order variation and by &amp;quot;quasi-trees&amp;quot;, a generalization of trees. The two formalisms are weakly equivalent, and an important subset is at most context-sensitive and polynomially parsable. Introduction Early attempts to use context-free grammars (CFGs) as a mathematical model for natural language syntax have largely been abandoned; it has been shown that (under standard assumptions concerning the recursive nature of clausal embedding) the cross-serial dependencies found in Swiss German cannot be generated by a CFG (Shieber, 1985). Several mathematical models have been proposed which extend the formal power of CFGs, while still maintaining the formal properties that make CFGs attractive formalisms for formal and computational linguists, in particular, polynomial parsability and restricted weak generative capacity. These mathematical models include tree adjoining grammar (TAG) (Joshi et al., 1975; Joshi, 1985), head grammar (Pollard, 1984), combinatory categorial grammar (CCG) (Steedman, 1985), and linear index grammar (LIG) (Gazdar, 1988). These formalisms have been shown to be weakly equivalent to each other (Vijay-Sh</context>
</contexts>
<marker>Shieber, 1985</marker>
<rawString>Shieber, Stuart B. (1985). Evidence against the context-freeness of natural language. Linguistics and Philosophy, 8:333-343.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Peter Staudacher</author>
</authors>
<title>New frontiers beyond context-freeness: DI-grammars and DI-automata.</title>
<date>1993</date>
<booktitle>In Sixth Conference of the European Chapter of the Association for Computational Linguistics (EACL&apos;93).</booktitle>
<contexts>
<context position="29497" citStr="Staudacher (1993)" startWordPosition="5116" endWordPosition="5117">(UVG-DLLe.) C .C(CSG). Corollary 9 G(UVG-DL) is a substitution-closed full AFL. Corollary 10 Each language in .C(UVG-DLL,) can be recognized in polynomial deterministic time. Related Formalisms Based on word-order facts from Turkish, Hoffman (1992) proposes an extension to CCG called {}-CCG, in which arguments of functors form sets, rather than being represented in a curried notation. Under function composition, these sets are unioned. Thus the move from CCG to {}-CCG corresponds very much to the move from LIG to {}-LIG. We conjecture that (a version of) {}-CCG is weakly equivalent to {}-LIG. Staudacher (1993) defines a related system called distributed index grammar or DIG. DIG is like LIG, except that the stack of index symbols can be split into chunks and distributed among the daughter nodes. However, the formalism is not convincingly motivated by the linguistic data given (which can also be handled by a simple LIG) or by other considerations. Several extensions to {}-LIG and UVG-DL are defined in (Rambow, 1994). First, we can introduce the &amp;quot;integrity&amp;quot; constraint suggested by Becker et al. (1991) which restricts long-distance relations through nodes. This is necessary to implement the linguistic</context>
</contexts>
<marker>Staudacher, 1993</marker>
<rawString>Staudacher, Peter (1993). New frontiers beyond context-freeness: DI-grammars and DI-automata. In Sixth Conference of the European Chapter of the Association for Computational Linguistics (EACL&apos;93).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mark Steedman</author>
</authors>
<title>Dependency and coordination in the grammar of Dutch and English.</title>
<date>1985</date>
<journal>Language,</journal>
<volume>61</volume>
<contexts>
<context position="3345" citStr="Steedman, 1985" startWordPosition="494" endWordPosition="496">ning the recursive nature of clausal embedding) the cross-serial dependencies found in Swiss German cannot be generated by a CFG (Shieber, 1985). Several mathematical models have been proposed which extend the formal power of CFGs, while still maintaining the formal properties that make CFGs attractive formalisms for formal and computational linguists, in particular, polynomial parsability and restricted weak generative capacity. These mathematical models include tree adjoining grammar (TAG) (Joshi et al., 1975; Joshi, 1985), head grammar (Pollard, 1984), combinatory categorial grammar (CCG) (Steedman, 1985), and linear index grammar (LIG) (Gazdar, 1988). These formalisms have been shown to be weakly equivalent to each other (Vijay-Shanker et al., 1987; Vijay-Shanker and Weir, 1994); we will refer to them as &amp;quot;LIG-equivalent formalisms&amp;quot;. LIG is a variant of index grammar (IG) (Aho, 1968). Like CFG, IG is a context-free string rewriting system, except that the nonterminal symbols in a CFG are augmented with stacks of index symbols. The rewrite rules push or pop indices from the index stack. In an IG, the index stack is copied to all nonterminal symbols on the right-hand side of a rule. In a LIG, th</context>
</contexts>
<marker>Steedman, 1985</marker>
<rawString>Steedman, Mark (1985). Dependency and coordination in the grammar of Dutch and English. Language, 61.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Vijay-Shanker</author>
</authors>
<title>Using descriptions of trees in a Tree Adjoining Grammar.</title>
<date>1992</date>
<journal>Computational Linguistics,</journal>
<pages>18--4</pages>
<contexts>
<context position="869" citStr="Vijay-Shanker, 1992" startWordPosition="121" endWordPosition="122">rmalisms have been shown to provide adequate formal power for a wide range of linguistic phenomena (including the aforementioned Swiss German construction), the need for other mathematical formalisms has arisen in several unrelated areas. In this paper, we discuss three such cases. First, capturing several semantic and syntactic issues in unificationbased formalisms leads to the use of multiset-valued feature structures. Second, word order facts from languages such as German, Russian, or Turkish cannot be derived by LIG-equivalent formalisms. Third, a generalization of trees to &amp;quot;quasi-trees&amp;quot; (Vijay-Shanker, 1992) in the spirit of D-Theory (Marcus et al., 1983) leads to the definition of a new formal system. In this paper, we introduce two new equivalent mathematical formalisms which provide adequate descriptions for these three phenomena. The paper is structured as follows. First, we present the three phenomena in more detail. We then introduce multiset-valued LIG and present some formal properties. Thereafter, we introduce a second rewriting system and show that it is weakly equivalent to the LIG variant. We then briefly mention some related formalisms. We conclude with a brief summary. Three Problem</context>
<context position="9088" citStr="Vijay-Shanker (1992)" startWordPosition="1431" endWordPosition="1432">ge syntax. In the following example, (4a) is out since there is no analysis in which the moved NP c-commands its governing verb, as is the case in (4b). (4) a. * daB niemand [dem Kunden] [ti ... that no-oneNom the clientDAT zu versuchen] [den KiihIschrank]j versprochen to try the refrigeratorAcc promised hat [ti zu reparieren]2 has to repair b. ? daB niemand [dem Kunden] [den Kiihlschrank], [ti zu versuchen] versprochen hat, [tizu reparieren]i What is needed is an additional mechanism that enforces a dominance relation between the sister node of an argument and its governing verb. Quasi-Trees Vijay-Shanker (1992) introduces &amp;quot;quasi-trees&amp;quot; as a generalization of trees. He starts from the observation that the traditional definition of tree adjoining gram264 mar (TAG) is incompatible with a unification-based approach because the trees of a TAG start out as fully specified objects, which are later modified; in particular, immediate dominance relations in a tree need not hold after another tree is adjoined into it. In order to arrive at a definition that is compatible with a unificationbased approach, he makes three minimal assumptions about the nature of the objects used for the representation of natural l</context>
<context position="11674" citStr="Vijay-Shanker (1992" startWordPosition="1836" endWordPosition="1837"> constraint. Bottom quasinodes immediately dominate top quasi-nodes of other quasi-node pairs, and each top quasi-node is immediately dominated by exactly one bottom quasi-node. For simplicity, we will assume that there is only a bottom root quasi-node (i.e., no top root quasi-node), and that bottom frontier quasi-nodes are omitted (i.e., frontier nodes just consist of top quasi-nodes). Furthermore, we will assume that each quasi-node has a label, and is equipped with a finite feature structure. A sample quasi-tree is shown in Figure 1 (quasi-tree ot5 of VijayShanker (1992, p.488)). We follow Vijay-Shanker (1992, Section 2.5) in defining substitution as the operation of forming a quasi-node pair from a frontier node of one tree (which becomes the top node) and the root node of another tree (which becomes the bottom node). As always, a dominance link relates the two quasi-nodes of the newly formed pair. Adjunction is not defined separately: it suffices to say that a pair of quasi-nodes is &amp;quot;broken up&amp;quot;, thus forming two quasi-trees. We then perform two substitutions. Observe that nothing keeps us from breaking up more than one pair of quasi-nodes in either of two quasi-trees, and then performing more th</context>
<context position="13093" citStr="Vijay-Shanker (1992)" startWordPosition="2068" endWordPosition="2069">hat a quasi-tree is derived if in all quasi-node pairs, the two quasi-nodes are equated, meaning that they have the same label and the two feature structures are unified, and furthermore, if all frontier quasi-nodes have terminal labels. The string associated with this quasi-tree is defined in the usual way. We have now fully defined a formalism (if informally): its data structures (quasi-trees), its combination operation (substitution), and the notion of derived structure. We will call this formalism Quasi-Tree Substitution Grammar (QTSG). It can easily be seen that all examples discussed by Vijay-Shanker (1992) are derivations in QTSG. The question arises as to the formal and computational properties of QTSG. Multiset-Valued LIG In order to find a mathematical model for certain uses of multiset-valued feature structures, discussed above, we now introduce a multiset-valued variant of LIG. We denote by M(A) the set of multisets over the elements of A, and we use the standard set notation to refer to the corresponding multiset operations. Definition 1 A multiset-valued Linear Index Grammar ({}-LIG) is a 5-triple (VN, VT 1/i, P, S), where VN , VT, and VI are disjoint sets of terminals, non-terminals, an</context>
</contexts>
<marker>Vijay-Shanker, 1992</marker>
<rawString>Vijay-Shanker, K. (1992). Using descriptions of trees in a Tree Adjoining Grammar. Computational Linguistics, 18(4):481-518.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Vijay-Shanker</author>
<author>David Weir</author>
</authors>
<title>The equivalence of four extensions of context-free grammars.</title>
<date>1994</date>
<booktitle>Math. Syst. Theory. Also available as Technical Report CSRP 236 from the University of Sussex, School of Cognitive and Computing Sciences.</booktitle>
<contexts>
<context position="3523" citStr="Vijay-Shanker and Weir, 1994" startWordPosition="521" endWordPosition="524">al models have been proposed which extend the formal power of CFGs, while still maintaining the formal properties that make CFGs attractive formalisms for formal and computational linguists, in particular, polynomial parsability and restricted weak generative capacity. These mathematical models include tree adjoining grammar (TAG) (Joshi et al., 1975; Joshi, 1985), head grammar (Pollard, 1984), combinatory categorial grammar (CCG) (Steedman, 1985), and linear index grammar (LIG) (Gazdar, 1988). These formalisms have been shown to be weakly equivalent to each other (Vijay-Shanker et al., 1987; Vijay-Shanker and Weir, 1994); we will refer to them as &amp;quot;LIG-equivalent formalisms&amp;quot;. LIG is a variant of index grammar (IG) (Aho, 1968). Like CFG, IG is a context-free string rewriting system, except that the nonterminal symbols in a CFG are augmented with stacks of index symbols. The rewrite rules push or pop indices from the index stack. In an IG, the index stack is copied to all nonterminal symbols on the right-hand side of a rule. In a LIG, the stack is copied to exactly one right-hand side nonterminal.&apos; &apos;Note that a LIG is not an IG that is linear (i.e., whose productions have at most one nonterminal on the right-han</context>
</contexts>
<marker>Vijay-Shanker, Weir, 1994</marker>
<rawString>Vijay-Shanker, K. and Weir, David (1994). The equivalence of four extensions of context-free grammars. Math. Syst. Theory. Also available as Technical Report CSRP 236 from the University of Sussex, School of Cognitive and Computing Sciences.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Vijay-Shanker</author>
<author>D J Weir</author>
<author>A K Joshi</author>
</authors>
<title>Characterizing structural descriptions produced by various grammatical formalisms.</title>
<date>1987</date>
<booktitle>In 25th Meeting of the Association for Computational Linguistics (A CL &apos;87),</booktitle>
<location>Stanford, CA.</location>
<contexts>
<context position="3492" citStr="Vijay-Shanker et al., 1987" startWordPosition="517" endWordPosition="520">r, 1985). Several mathematical models have been proposed which extend the formal power of CFGs, while still maintaining the formal properties that make CFGs attractive formalisms for formal and computational linguists, in particular, polynomial parsability and restricted weak generative capacity. These mathematical models include tree adjoining grammar (TAG) (Joshi et al., 1975; Joshi, 1985), head grammar (Pollard, 1984), combinatory categorial grammar (CCG) (Steedman, 1985), and linear index grammar (LIG) (Gazdar, 1988). These formalisms have been shown to be weakly equivalent to each other (Vijay-Shanker et al., 1987; Vijay-Shanker and Weir, 1994); we will refer to them as &amp;quot;LIG-equivalent formalisms&amp;quot;. LIG is a variant of index grammar (IG) (Aho, 1968). Like CFG, IG is a context-free string rewriting system, except that the nonterminal symbols in a CFG are augmented with stacks of index symbols. The rewrite rules push or pop indices from the index stack. In an IG, the index stack is copied to all nonterminal symbols on the right-hand side of a rule. In a LIG, the stack is copied to exactly one right-hand side nonterminal.&apos; &apos;Note that a LIG is not an IG that is linear (i.e., whose productions have at most o</context>
</contexts>
<marker>Vijay-Shanker, Weir, Joshi, 1987</marker>
<rawString>Vijay-Shanker, K.; Weir, D.J.; and Joshi, A.K. (1987). Characterizing structural descriptions produced by various grammatical formalisms. In 25th Meeting of the Association for Computational Linguistics (A CL &apos;87), Stanford, CA.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>