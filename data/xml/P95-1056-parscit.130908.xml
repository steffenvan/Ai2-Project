<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.061461">
<title confidence="0.987885">
A Minimalist Head-Corner Parser
</title>
<author confidence="0.951112">
Mettina Veenstra
</author>
<affiliation confidence="0.959234">
vakgroep Alfa-informatica, University of Groningen
</affiliation>
<address confidence="0.674627333333333">
Postbus 716
NL-9700 AS Groningen
Mettinaalet.rug.n1
</address>
<sectionHeader confidence="0.957438" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999501428571429">
In the Minimalist Program (Chomsky,
1992) it is assumed that there are different
types of projections (lexical and functional)
and therefore different types of heads. This
paper explains why functional heads are
not treated as head-corners by the mini-
malist head-corner parser described here.
</bodyText>
<sectionHeader confidence="0.998798" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999977357142857">
In the Minimalist Program (Chomsky, 1992) &apos;sur-
face&apos; word order is determined in a very indirect way.
Word order is no longer a property of phrase struc-
ture, because phrase structure is universal. Fur-
thermore movements are universal. This implies
in principle that when we parse comparable sen-
tences in different languages, we always build the
same tree. Word order differences are distinguished
by the choice of the moment of Spell Out (SO).
SO is the point in the derivation where instructions
are given to an interface level called PF (Phonetic
Form). Thus SO yields what was formerly called
surface structure. SO determines in which position
in the tree a certain constituent becomes visible and
consequently it determines the relative order of the
constituents of a sentence. This is illustrated in the
simplified tree in figure 1. Note that each cluster of
co-indexed positions (i.e. a chain) in the figure has
only one visible constituent. This is the position in
which the constituent is represented at the moment
of SO. This moment is not universal. The verb chain
of our English example gives instructions to the in-
terface level PF when the verb is adjoined to AgrS
(head of the agreement phrase of the subject). The
verb chain of a comparable sentence in Dutch &apos;spells
out&apos; when the verb is in V. Thus in Dutch subor-
dinate clauses the movement of the verb to AgrO
(head of the agreement phrase of the object) and
</bodyText>
<equation confidence="0.984349384615385">
CP
AgrSP
N
that! DP AgrS
I /
she; AgrS AgrOP
V AgrS ei AgrO
I
likesk AgrO VP
V AgrO
eM V DP
I I
ek cats.;
</equation>
<figureCaption confidence="0.9799995">
Figure 1: A simplified tree for a transitive subordinate
clause in English
</figureCaption>
<bodyText confidence="0.999522444444444">
subsequently AgrS happens &apos;covertly&apos;. The motiva-
tion for covert movement can be found in (Chomsky,
1992, pages 38-40).
In the following sections we will show that the
structure building operations of the Minimalist Pro-
gram are bidirectional operations. Because head-
corner parsing is a bidirectional strategy, this type
of parser seems more favorable for minimalist pars-
ing, than the usual left to right parsing algorithms.
</bodyText>
<sectionHeader confidence="0.866472" genericHeader="introduction">
2 GT and Move-a
</sectionHeader>
<bodyText confidence="0.967525">
The central operations of the Minimalist Program
are Generalized Transformation (GT) and Move-
a. GT is a structure-building operation that builds
trees in a bottom-up way as is illustrated in figure 2.
</bodyText>
<page confidence="0.977342">
338
</page>
<figure confidence="0.999776">
A
v
v e
I
see
V DP
I I
see her
V
/ \
V D
1 IP
see her
</figure>
<figureCaption confidence="0.999461">
Figure 2: GT applied to V and DP yielding V.
</figureCaption>
<bodyText confidence="0.99994204">
Two phrase markers (V and DP) are combined into
one. One of these two is called the target (V). A pro-
jection of the target (V) is added to the target. The
projection of the target has two daughters: the tar-
get itself and an empty position. The empty posi-
tion is substituted for by the second phrase marker
(DP). This second phrase marker is itself built up in
other applications of GT and/or Move-a.
Move-a is a special kind of GT. It is an opera-
tion that combines a target with a moved phrase
marker. It is assumed that movement is always left-
ward (Kayne, 1994) and that in the universal trees of
the Minimalist Program heads and specifiers, which
are the only positions to move to, are always to the
left of the projection line. These two assumptions in
combination with the fact that GT and Move-a are
bottom-up operations, effect that the moved phrase
marker has to be contained in the tree that was built
so far j.
The tree in figure 1 illustrates different kinds of
movement. In the Minimalist Program movement
occurs to check features. Elements move from the
lexical domain (VP) to the functional domain (e.g.
AgrOP, AgrSP) to compare their features with the
features that are present in the functional domain.
</bodyText>
<sectionHeader confidence="0.99809" genericHeader="method">
3 Head-corner parsing
</sectionHeader>
<bodyText confidence="0.998248979166666">
The main idea behind head-driven parsing (Kay,
1989) is that the lexical entries functioning as heads
contain valuable information for the parsing process.
For example, if a verb is intransitive it will not re-
quire a complement, if it is transitive it will require a
complement. Therefore the head is parsed before its
sisters in a head-driven parser. A head-corner parser
(Kay, 1989; Bouma and van Noord, 1993) is a spe-
cial type of head-driven parser. Its main character-
istic is that it does not work from left to right but in-
stead works bidirectionally. That is, first a poten-
tial head of a phrase is located and next the sisters
of the head are parsed. The head can be in any po-
sition in the string and its sisters can either be to
the right or to the left.
A head-corner parser starts the parsing process
with a prediction step. This step is completed when
&apos;See (Veenstra, 1994) for further details.
a lexical head is found that is the head-corner of the
goal (i.e. the type of constituent that is parsed). The
head-corner relation is the reflexive and transitive
closure of the head relation. A is the head of B if
there is a rule with 13 as left hand side (LHS) and A
as the head daughter on the right hand side (RHS).
When a (lexical) head-corner is found an X rule is
selected in which the (lexical) head is on the RHS.
The sisters of the head are parsed recursively. The
LHS of the rule contains the mother of the head.
If this mother is a head-corner of the goal, and the
mother and the goal are not equal the whole process
is repeated by selecting a rule with the new head-
corner (i.e. the mother of the first head-corner) on
its RHS.
In section 2 it is assumed that movement is invari-
ably leftward and that GT and Move-a are bottom-
up mechanisms. GT builds the VP before other pro-
jections. Constituents of VP are moved to higher
projections by Move-a, which is a special kind of
GT. Suppose that the parser should consider AgrS
as the head-corner of AgrSP, which accords with X-
Theory. Then the head (AgrS) that should be filled
with an adjoined verb by movement from AgrO (in
a transitive sentence) or V (in an intransitive sen-
tence) is created before AgrO and V. To avoid mov-
ing constituents from a part of the tree that has not
been built yet, the head-corner table for the min-
imalist head-corner parser is not constructed com-
pletely according to X-Theory (see (1)).
</bodyText>
<figureCaption confidence="0.71352425">
(1) hc(AgrS,AgrSP). hc(V,VP).
hc(AgrOP,AgrS). hc(V,V).
hc(AgrO,AgrOP). hc(N,NP).
hc(VP,Agr0). hc(N,N).
</figureCaption>
<bodyText confidence="0.999715842105263">
For example, instead of AgrO, VP is the head-
corner of AgrO. This solution is compatible with
the Minimalist Program in the sense that in this
way the tree is built up in an absolute bottom-up
way (i.e. starting from V) so that a position that
should be filled by movement is always created after
the position from which the moved element comes.
The head-corner table in (1) illustrates that func-
tional heads like AgrO and AgrS are not processed
as heads. Lexical projections like VP and NP are
treated according to X-Theory. If we follow (1) in
combination with the tree in figure 1 we establish
the fact that the parser searches its way down to the
verb as soon as possible. The top-down prediction
step moves from the goal AgrSP to AgrS to AgrOP
to AgrO to VP to V and finally to the lexical head-
corner V where the bottom-up process starts as the
Minimalist Program requires.
The head-corner parsing algorithm and the
</bodyText>
<page confidence="0.998042">
339
</page>
<bodyText confidence="0.999927333333333">
structure-building operations of the Minimalist Pro-
gram (GT and Move-a) have much in common. In
both cases a tree is built up in a bottom-up way by
starting with a head (lexical head-corner in the pars-
ing algorithm, target in the structure building op-
erations) and creating the sister of the head recur-
sively, etc.2 By treating only lexical heads as head-
corners we achieved that our parsing algorithm com-
pletely represents GT. Only for Move-a we need an
extra predicate to accomplish a movement if there is
a possible movement to the node that has just been
created.
</bodyText>
<sectionHeader confidence="0.853474" genericHeader="method">
4 Parsing vs. Generation
</sectionHeader>
<bodyText confidence="0.991140368421053">
In section 3 we chose not to consider functional heads
as head-corners. This choice was made because it
allows GT and Move-a to start constructing a VP
before the projections to which constituents from VP
are moved are constructed. Another motivation to
start with VP is that V contains information that
is useful for the remainder of the structure building
process. For example, if the verb is intransitive we
know that V does not require a complement sister,
and we know that we do not need an AgrOP on top
of VP. The fact that V contains lexical information
and functional heads like AgrO and AgrS do not,
could be used as a justification for the fact that the
latter are not head-corners. The main idea of head-
driven parsing is, as was stated before, that heads
contain relevant information for the parsing process,
and that they therefore should be parsed before their
sisters. Functional heads obtain their contents via
movement of elements from positions lower in the
tree. This special status makes them less useful for
the parsing process.
The Minimalist Program is a generation-oriented
framework. Because we are dealing with parsing (as
opposed to generation) in this paper there are cer-
tain discrepancies between the parser and the frame-
work it is based on. In the minimalist framework,
lexical information belonging to a chain is available
from the moment that the first position of the chain
is created, because that is the moment when the lex-
icon is consulted. When parsing a sentence the lexi-
con is not by definition consulted at the beginning of
the chain. Figure 1 shows a tree that contains traces
and visible constituents. The position containing a
visible constituent is the SO position of that chain.
The parser consults the lexicon at the moment in
which the SO position of a chain is reached. Conse-
2In the minimalist head-corner parser that is de-
scribed here a head always has only one sister because
minimalist trees are at most binary branching.
quently, when a trace is created before SO, the fea-
tures belonging to that trace are unknown. The fea-
tures of the traces of a certain chain are known as
soon as the SO position is reached, because all posi-
tions in a chain are linked.
It can be concluded that the absolute bottom-up
approach for the building of trees is more useful for
generation than for parsing. In generation, lexical
information can be used as soon as a position that
is the beginning of a chain is created. In parsing we
will have to wait until the SO position is reached.
In spite of this, we chose not to consider functional
heads as heads in order to accomplish an absolute
bottom-up process. The reason for this is that, as
was mentioned before, otherwise we would be rea-
soning backwards with relation to movement. This
could be inefficient and it is too far removed from
the ideas of the minimalist framework.
</bodyText>
<sectionHeader confidence="0.999225" genericHeader="method">
5 Future Plans
</sectionHeader>
<bodyText confidence="0.999975375">
The parser described here can judge the grammat-
icality of simple declarative transitive and intransi-
tive sentences, and of subordinate clauses. We will
extend the parser in such a way that it will cover
more advanced linguistic phenomena like anaphors
and wh-questions. Furthermore other types of
parsers will be built to determine if this &apos;lexical&apos;
head-corner parser is indeed more efficient.
</bodyText>
<sectionHeader confidence="0.999545" genericHeader="conclusions">
6 Acknowledgements
</sectionHeader>
<bodyText confidence="0.999718">
I would like to thank Gosse Bouma, John Nerbonne,
Gertjan van Noord and Jan-Wouter Zwart for their
helpful comments on earlier versions of this paper.
</bodyText>
<sectionHeader confidence="0.996406" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.934443">
Gosse Bouma and Gertjan van Noord. 1993. Head-
driven parsing for lexicalist grammars: Experi-
mental results. In 6th Meeting of the European
chapter of the Association for Computational Lin-
guistics, Utrecht.
Noam Chomsky. 1992. A minimalist program for
linguistic theory. MIT Occasional Papers in Lin-
guistics.
Martin Kay. 1989. Head driven parsing. In Proceed-
ings of Workshop on Parsing Technologies, Pitts-
burg.
Richard S. Kayne. 1994. The antisymmetry of syn-
tax. MIT Press, Cambridge.
Mettina J.A. Veenstra. 1994. Towards a formaliza-
tion of generalized transformation. In H. de Hoop
A. de Boer and Henriette de Swart, editors, Lan-
guage and Cognition 4, Groningen.
</reference>
<page confidence="0.998278">
340
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.496393">
<title confidence="0.998842">A Minimalist Head-Corner Parser</title>
<author confidence="0.998627">Mettina Veenstra</author>
<affiliation confidence="0.982732">vakgroep Alfa-informatica, University of Groningen</affiliation>
<address confidence="0.822771">Postbus 716 NL-9700 AS Groningen Mettinaalet.rug.n1</address>
<abstract confidence="0.997042625">In the Minimalist Program (Chomsky, 1992) it is assumed that there are different types of projections (lexical and functional) and therefore different types of heads. This paper explains why functional heads are not treated as head-corners by the minimalist head-corner parser described here.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Gosse Bouma</author>
<author>Gertjan van Noord</author>
</authors>
<title>Headdriven parsing for lexicalist grammars: Experimental results.</title>
<date>1993</date>
<booktitle>In 6th Meeting of the European chapter of the Association for Computational Linguistics,</booktitle>
<location>Utrecht.</location>
<marker>Bouma, van Noord, 1993</marker>
<rawString>Gosse Bouma and Gertjan van Noord. 1993. Headdriven parsing for lexicalist grammars: Experimental results. In 6th Meeting of the European chapter of the Association for Computational Linguistics, Utrecht.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Noam Chomsky</author>
</authors>
<title>A minimalist program for linguistic theory. MIT Occasional Papers in Linguistics.</title>
<date>1992</date>
<contexts>
<context position="2176" citStr="Chomsky, 1992" startWordPosition="362" endWordPosition="363">e gives instructions to the interface level PF when the verb is adjoined to AgrS (head of the agreement phrase of the subject). The verb chain of a comparable sentence in Dutch &apos;spells out&apos; when the verb is in V. Thus in Dutch subordinate clauses the movement of the verb to AgrO (head of the agreement phrase of the object) and CP AgrSP N that! DP AgrS I / she; AgrS AgrOP V AgrS ei AgrO I likesk AgrO VP V AgrO eM V DP I I ek cats.; Figure 1: A simplified tree for a transitive subordinate clause in English subsequently AgrS happens &apos;covertly&apos;. The motivation for covert movement can be found in (Chomsky, 1992, pages 38-40). In the following sections we will show that the structure building operations of the Minimalist Program are bidirectional operations. Because headcorner parsing is a bidirectional strategy, this type of parser seems more favorable for minimalist parsing, than the usual left to right parsing algorithms. 2 GT and Move-a The central operations of the Minimalist Program are Generalized Transformation (GT) and Movea. GT is a structure-building operation that builds trees in a bottom-up way as is illustrated in figure 2. 338 A v v e I see V DP I I see her V / \ V D 1 IP see her Figur</context>
</contexts>
<marker>Chomsky, 1992</marker>
<rawString>Noam Chomsky. 1992. A minimalist program for linguistic theory. MIT Occasional Papers in Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Martin Kay</author>
</authors>
<title>Head driven parsing.</title>
<date>1989</date>
<booktitle>In Proceedings of Workshop on Parsing Technologies,</booktitle>
<location>Pittsburg.</location>
<contexts>
<context position="4108" citStr="Kay, 1989" startWordPosition="708" endWordPosition="709">, are always to the left of the projection line. These two assumptions in combination with the fact that GT and Move-a are bottom-up operations, effect that the moved phrase marker has to be contained in the tree that was built so far j. The tree in figure 1 illustrates different kinds of movement. In the Minimalist Program movement occurs to check features. Elements move from the lexical domain (VP) to the functional domain (e.g. AgrOP, AgrSP) to compare their features with the features that are present in the functional domain. 3 Head-corner parsing The main idea behind head-driven parsing (Kay, 1989) is that the lexical entries functioning as heads contain valuable information for the parsing process. For example, if a verb is intransitive it will not require a complement, if it is transitive it will require a complement. Therefore the head is parsed before its sisters in a head-driven parser. A head-corner parser (Kay, 1989; Bouma and van Noord, 1993) is a special type of head-driven parser. Its main characteristic is that it does not work from left to right but instead works bidirectionally. That is, first a potential head of a phrase is located and next the sisters of the head are pars</context>
</contexts>
<marker>Kay, 1989</marker>
<rawString>Martin Kay. 1989. Head driven parsing. In Proceedings of Workshop on Parsing Technologies, Pittsburg.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Richard S Kayne</author>
</authors>
<title>The antisymmetry of syntax.</title>
<date>1994</date>
<publisher>MIT Press,</publisher>
<location>Cambridge.</location>
<contexts>
<context position="3378" citStr="Kayne, 1994" startWordPosition="586" endWordPosition="587"> her Figure 2: GT applied to V and DP yielding V. Two phrase markers (V and DP) are combined into one. One of these two is called the target (V). A projection of the target (V) is added to the target. The projection of the target has two daughters: the target itself and an empty position. The empty position is substituted for by the second phrase marker (DP). This second phrase marker is itself built up in other applications of GT and/or Move-a. Move-a is a special kind of GT. It is an operation that combines a target with a moved phrase marker. It is assumed that movement is always leftward (Kayne, 1994) and that in the universal trees of the Minimalist Program heads and specifiers, which are the only positions to move to, are always to the left of the projection line. These two assumptions in combination with the fact that GT and Move-a are bottom-up operations, effect that the moved phrase marker has to be contained in the tree that was built so far j. The tree in figure 1 illustrates different kinds of movement. In the Minimalist Program movement occurs to check features. Elements move from the lexical domain (VP) to the functional domain (e.g. AgrOP, AgrSP) to compare their features with </context>
</contexts>
<marker>Kayne, 1994</marker>
<rawString>Richard S. Kayne. 1994. The antisymmetry of syntax. MIT Press, Cambridge.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mettina J A Veenstra</author>
</authors>
<title>Towards a formalization of generalized transformation.</title>
<date>1994</date>
<booktitle>In H. de Hoop A. de Boer and Henriette de Swart, editors, Language and Cognition 4,</booktitle>
<location>Groningen.</location>
<contexts>
<context position="4938" citStr="Veenstra, 1994" startWordPosition="859" endWordPosition="860">complement. Therefore the head is parsed before its sisters in a head-driven parser. A head-corner parser (Kay, 1989; Bouma and van Noord, 1993) is a special type of head-driven parser. Its main characteristic is that it does not work from left to right but instead works bidirectionally. That is, first a potential head of a phrase is located and next the sisters of the head are parsed. The head can be in any position in the string and its sisters can either be to the right or to the left. A head-corner parser starts the parsing process with a prediction step. This step is completed when &apos;See (Veenstra, 1994) for further details. a lexical head is found that is the head-corner of the goal (i.e. the type of constituent that is parsed). The head-corner relation is the reflexive and transitive closure of the head relation. A is the head of B if there is a rule with 13 as left hand side (LHS) and A as the head daughter on the right hand side (RHS). When a (lexical) head-corner is found an X rule is selected in which the (lexical) head is on the RHS. The sisters of the head are parsed recursively. The LHS of the rule contains the mother of the head. If this mother is a head-corner of the goal, and the </context>
</contexts>
<marker>Veenstra, 1994</marker>
<rawString>Mettina J.A. Veenstra. 1994. Towards a formalization of generalized transformation. In H. de Hoop A. de Boer and Henriette de Swart, editors, Language and Cognition 4, Groningen.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>