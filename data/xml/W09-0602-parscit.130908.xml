<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000139">
<title confidence="0.976289">
Towards a Generation-Based Semantic Web Authoring Tool
</title>
<author confidence="0.997604">
Richard Power
</author>
<affiliation confidence="0.9945835">
Department of Computing
Open University
</affiliation>
<address confidence="0.695197">
Milton Keynes, UK
</address>
<email confidence="0.9983">
r.power@open.ac.uk
</email>
<sectionHeader confidence="0.993883" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999661875">
Widespread use of Semantic Web tech-
nologies requires interfaces through which
knowledge can be viewed and edited with-
out deep understanding of Description
Logic and formalisms like OWL and RDF.
Several groups are pursuing approaches
based on Controlled Natural Languages
(CNLs), so that editing can be performed
by typing in sentences which are automat-
ically interpreted as statements in OWL.
We suggest here a variant of this approach
which relies entirely on Natural Language
Generation (NLG), and propose require-
ments for a system that can reliably gen-
erate transparent realisations of statements
in Description Logic.
</bodyText>
<sectionHeader confidence="0.998993" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999908071428571">
We describe here a simple prototype of an edit-
ing tool that allows a user to create an ontology
through an open-ended Natural Language inter-
face. By ‘open-ended’ we mean that when intro-
ducing class or property names into the ontology,
the user also decides how they should be expressed
linguistically: thus the lexicon of the Natural Lan-
guage interface is not predetermined. The purpose
of such a tool is to support knowledge editing on
the Semantic Web, which at present requires train-
ing in graphical user interfaces like Prot´eg´e (Rec-
tor et al., 2004), or direct coding in OWL and RDF.
Linking OWL to Controlled Natural Language is
currently the topic of an OWL1-1 task force, and
several groups are already working in this area
(Schwitter and Tilbrook, 2004; Thompson et al.,
2005; Bernstein and Kaufmann, 2006; Pool, 2006;
Dongilli, 2007); the novelty in our approach is that
we rely entirely on Natural Language Generation
(NLG), extending the WYSIWYM (or Conceptual
Authoring) method (Power and Scott, 1998; Hal-
lett et al., 2007) so that it supports knowledge edit-
ing for ontologies as well as for assertions about
individuals.
The idea of linking formal and natural lan-
guages can be traced back to Frege (1879), who
observed that mathematical proofs were made up
of formulae interspersed with passages in natu-
ral language, and invented formal logic as a way
of rendering these passages in a precise notation.
With the arrival of Artificial Intelligence in the
1950s, formal logic became the foundation for
knowledge representation and automatic reason-
ing — a trend leading to the recent concept of a
‘semantic web’ that would open up knowledge en-
coding and utilisation to a world-wide community
(Berners-Lee et al., 2001). However, accessible
knowledge management requires accessible pre-
sentation: hence the current interest in methods of
‘sugaring’ formal logic into natural language text
(Ranta, 1994; Horacek, 1999), thus in a sense turn-
ing Frege upside-down.
</bodyText>
<subsectionHeader confidence="0.995571">
1.1 Description Logic
</subsectionHeader>
<bodyText confidence="0.94587615">
The theoretical underpinning of OWL (and hence
of the semantic web) is a discipline that evolved
under various names in the 1980s and 1990s and
is now called Description Logic (Baader et al.,
2003). This refers not to a single logical language,
but to a family of languages. All of these lan-
guages allow statements to be built from individu-
als, classes and properties, but they differ in the re-
sources provided in order to construct classes and
properties, thus allowing different balances to be
drawn between the conflicting demands of expres-
siveness and tractability (i.e., decidability and ef-
ficiency of reasoning).
Figure 1 shows some common class construc-
tors, using mathematical notation rather than
OWL syntax (which is equivalent, but much
lengthier). There are in fact three versions of
OWL (Lite, DL and Full) which provide pro-
Proceedings of the 12th European Workshop on Natural Language Generation, pages 9–15,
Athens, Greece, 30 – 31 March 2009. c�2009 Association for Computational Linguistics
</bodyText>
<page confidence="0.99055">
9
</page>
<table confidence="0.999561777777778">
Description Syntax
atomic class A (etc.)
universal class T
negation --iC
intersection C n D
union C U D
value restriction bR.C
exists restriction IR.C
enumeration {a}
</table>
<tableCaption confidence="0.999769">
Table 1: Class constructors
</tableCaption>
<bodyText confidence="0.998555857142857">
gressively more constructors, not only for classes
but also for properties and axioms. Having cho-
sen the desired logic, the ontology builder is
free to introduce new atomic classes (and also
properties and individuals), which can be given
any name consistent with the RDF naming con-
ventions (i.e., names must be Unique Resource
Identifiers). Thus a new class might be named
http://myontology.net/parent and a new
property http://myontology.net/hasChild, al-
though for brevity we will henceforth omit names-
paces (i.e., parent, hasChild). Statements about
classes can then be expressed by axioms, the most
important of which are C C D (C is subsumed by
</bodyText>
<listItem confidence="0.908658333333333">
D) and C - D (C is equivalent to D). For instance:
(1) parent - person n IhasChild.T
(2) person C bhasChild.person
</listItem>
<bodyText confidence="0.9997655">
The meanings are probably obvious: (1) a parent is
defined as a person with one or more children; (2)
every person only has persons as children. Note
that expressing these axioms in clear English is not
trivial — for instance, in (2) we must take care not
to imply that every person has children.
A collection of such axioms is called a TBox:
intuitively, a TBox expresses concept defini-
tions and generalisations. Description Logics
also contain names for individual instances (e.g.,
Abraham, Isaac) and formulas expressing facts
about individuals: thus father(Abraham) would
express class membership (‘Abraham is a father’),
and hasChild(Abraham, Isaac) a relationship
between individuals (‘Isaac is Abraham’s child’).
A collection of such assertions is called an ABox,
and TBox and ABox together make up a Knowl-
edge Base (KB).
</bodyText>
<subsectionHeader confidence="0.992225">
1.2 Reasoning services
</subsectionHeader>
<bodyText confidence="0.999591142857143">
The reason for proposing Description Logic as the
foundation for the Semantic Web is that it allows
for efficient reasoning services. Much effort is still
going into the mathematical task of proving decid-
ability and efficiency results for increasingly ex-
pressive dialects. Informally, the standard reason-
ing services are as follows:
</bodyText>
<listItem confidence="0.998503181818182">
1. Class Satisfiability: Checking whether in a
given KB it is possible for a class to have at
least one member.
2. Subsumption: Checking whether a given
KB implies a specified subsumption relation-
ship between two classes.
3. Consistency: Checking whether a given KB
is consistent.
4. Instance Checking: Checking whether a
given KB implies a specified ABox assertion
that an individual a belongs to a class C.
</listItem>
<bodyText confidence="0.538951">
Consider for instance the following miniature KB:
</bodyText>
<construct confidence="0.695578333333333">
man U woman - person
man C --iwoman
man(Abraham)
</construct>
<bodyText confidence="0.999477904761905">
In respect to this KB, a reasoning engine should be
able to show (1) that the class man n woman is
unsatisfiable, (2) that man is subsumed by person
(man C person), (3) that the KB is consis-
tent, and (4) that the assertion person(Abraham)
holds.
The ability to perform these reasoning tasks ef-
ficiently can be exploited not only in applications
that utilize knowledge in problem-solving, but in
knowledge editing and natural language genera-
tion. For instance, when an ontology builder adds
a new axiom to a KB, the editor can run the sub-
sumption and consistency checks and give feed-
back on whether the axiom is informative, redun-
dant, or inconsistent. Or when producing a natural
language gloss for the class IhasChild.female,
the generator could choose between ‘something
with at least one female child’ and ‘someone
with at least one female child’ by checking the
subsumption relationship IhasChild.female C
person.
</bodyText>
<sectionHeader confidence="0.855105" genericHeader="method">
2 Aligning DL to CNL
</sectionHeader>
<bodyText confidence="0.99994075">
We have explained informally the technical fea-
tures of description logics. Briefly, they include
rules for constructing classes, axioms, and asser-
tions about individuals; the resulting expressions
</bodyText>
<page confidence="0.992653">
10
</page>
<bodyText confidence="0.9988638">
are interpreted through a relatively simple model-
theoretic semantics (Baader et al., 2005). They
also include efficient algorithms for performing
reasoning tasks. We now turn to issues in the
design of Controlled Natural Languages (CNLs)
which can be aligned with specific DLs, and thus
serve as useful interfaces for working with com-
plex formalisms like OWL and RDF.
As a provisional list of requirements, we would
suggest the following:
</bodyText>
<listItem confidence="0.9995583125">
1. Completeness: A sentence (or text) can be
generated for any axiom permitted by the DL.
2. Uniqueness: Different sentences are gener-
ated for different axioms.
3. Transparency: Sentences in the CNL are ac-
curately interpreted by human readers.
4. Fluency: Sentences in the CNL are inter-
preted easily by human readers and judged
natural.
5. Interpretability: Sentences conforming to
the CNL can be automatically interpreted to
recover the corresponding DL axiom.
6. Editability: Interactive texts in the CNL can
be manipulated by domain experts in order to
extend and revise the KB.
7. Extensibility: Domain experts can extend
</listItem>
<bodyText confidence="0.953229625">
the CNL by linking lexical entries to new in-
dividuals, classes or properties in the KB.
Note that these are essentially practical require-
ments, which concern the CNL’s role as an inter-
face for a particular DL. We see no reason to insist
that the alignment between DL and CNL should
conform to general theories of natural language se-
mantics.
</bodyText>
<subsectionHeader confidence="0.983888">
2.1 Completeness
</subsectionHeader>
<bodyText confidence="0.99998975">
If we propose to use generated CNL as an inter-
face to a knowledge base, it is important that gen-
eration should be reliable. A minimal test of re-
liability is that the grammar and lexicon are com-
plete, in the sense that they produce a text for any
well-formed semantic input. Elsewhere, we have
described a generation method that allows com-
pleteness to be checked by a computer program
(Hardcastle and Power, 2008). For any non-trivial
DL the set of classes is infinite (e.g., through recur-
sion on C n D or lR.C); however, completeness
can be proved through an enumeration of all local
contexts for which a linguistic realisation rule is
needed. As well as guaranteeing reliability, com-
pleteness checking is obviously useful as an aid to
grammar development.
</bodyText>
<subsectionHeader confidence="0.997841">
2.2 Uniqueness
</subsectionHeader>
<bodyText confidence="0.99998985">
Although necessary, completeness is not a suffi-
cient condition on the grammar of a CNL, since
it could be trivially met by generating the same
string (perhaps ‘Hallo World’) for any semantic in-
put. It would also be useful to have an automatic
check that the same sentence is not generated for
two different semantic inputs — i.e., that every
sentence in the CNL has a unique meaning. This
seems a harder problem than completeness, and
we have not seen any proposals on how it could be
done.
To pose this problem precisely we would need
to define what is meant by ‘different’ semantic in-
puts. Complex class descriptions can be manipu-
lated by well-known logical equivalences like De
Morgan’s laws: for instance, -,(C n D) is equiv-
alent to (-,C) U (-,D). Should these be treated as
different inputs or the same input? We think users
would probably prefer them to be treated as differ-
ent, but the issue needs to be investigated further.
</bodyText>
<subsectionHeader confidence="0.964234">
2.3 Transparency
</subsectionHeader>
<bodyText confidence="0.9997957">
Transparency is obviously at the heart of the en-
terprise: completeness and uniqueness proofs are
no help if the generated texts are unclear to human
readers. Unlike the preceding requirements, trans-
parency is a matter of degree: we cannot expect,
far less prove, that every sentence in the CNL will
be accurately understood by all target users on all
occasions. Transparency can only be assessed, and
gradually improved, through experiments and user
feedback.
</bodyText>
<subsectionHeader confidence="0.943624">
2.4 Fluency
</subsectionHeader>
<bodyText confidence="0.999885454545455">
Fluency is another aspect of readability: whereas
transparency concerns accuracy of interpretation,
fluency concerns ease. These requirements poten-
tially conflict. For instance, to express the axiom
parent C lhasChild.T fluently we could say
‘every parent has a child’, while for transparency
we might prefer the pedantic ‘every parent has one
or more children’. In a CNL designed for editing
a KB, transparency will have priority, but one can
imagine other purposes (e.g., an informal report)
for which fluency would matter more.
</bodyText>
<page confidence="0.996638">
11
</page>
<subsectionHeader confidence="0.50783">
2.5 Interpretability
</subsectionHeader>
<bodyText confidence="0.999965733333333">
This is an essential requirement for knowledge ed-
itors that rely on automatic parsing and interpreta-
tion of texts typed in by human authors (Schwit-
ter and Tilbrook, 2004; Bernstein and Kaufmann,
2006). A recent innovation has been to pursue the
goal of ‘roundtripping’ (Davis et al., 2008), so that
a CNL text can be generated from an existing on-
tology, revised in a text editor, and then interpreted
automatically to obtain an updated ontology in the
original format. For our approach, which relies en-
tirely on generation, automatic interpretability is
not essential (although one can imagine contexts
in which it would be useful, for instance to allow
knowledge encoding outside the NLG-based edit-
ing environment).
</bodyText>
<subsectionHeader confidence="0.86506">
2.6 Editability
</subsectionHeader>
<bodyText confidence="0.99994">
The key feature of Conceptual Authoring (WYSI-
WYM) is that editing operations are defined on the
semantic input, not the text. This means that au-
thors cannot produce a text in the normal way by
typing in words from left to right. Some kind of
non-specific initial configuration has to be grad-
ually refined through semantic distinctions made
by choices from menus (an example will be given
later). To validate the approach, it has to be
shown that this editing process is efficient and eas-
ily learned. Usability results from ABox editing
applications have been encouraging (Hallett et al.,
2007), but whether similar results can be achieved
for KB editing (TBox as well as ABox) remains
unproven.
</bodyText>
<subsectionHeader confidence="0.933611">
2.7 Extensibility
</subsectionHeader>
<bodyText confidence="0.9999420625">
Ontology development requires that authors
should be able to introduce new terms for indi-
viduals, classes and properties. The designer of a
CNL-based editor cannot foresee what these terms
will be, and therefore cannot provide a mapping to
suitable lexical entries. This must be done by the
ontology developer, and take-up accordingly de-
pends on making this task not only feasible but
easy (Hielkema et al., 2007). We will explore two
ideas on how this might be done: (a) providing a
wide-coverage lexicon from which users can se-
lect words to extend the CNL, and (b) using con-
ventions for controlling the naming of classes and
properties, so that the two decisions (term name,
CNL lexical entry) become essentially a single de-
cision.
</bodyText>
<sectionHeader confidence="0.989091" genericHeader="method">
3 Editing process
</sectionHeader>
<bodyText confidence="0.997898947368421">
As a first experiment we have written a Prolog
program which allows a KB to be built up from
scratch for a very simple DL with only one kind
of statement (C C D), four class constructors
(A, T, IR.C, {a}), and one property construc-
tor (property inversion, which will be explained
shortly). Using just these resources we can formu-
late ABox assertions as well as TBox axioms by
the trick of representing individuals through enu-
merated classes. For instance, man(Abraham)
can be asserted through the axiom {Abraham} C
man (the class containing only Abraham is a sub-
class of the class of men).
A generic grammar is provided for realising
axioms and complex class descriptions (a hand-
ful of rules suffices); the grammar assumes that
the words for realising individuals, atomic classes
and properties will conform to the following (very
strict) regulations:
</bodyText>
<listItem confidence="0.987494333333333">
1. Individuals are realised by proper names
2. Atomic classes are realised by count nouns
3. Properties are realised either by transitive
</listItem>
<bodyText confidence="0.9729524">
verbs or by count nouns
We also simplify by assuming that the name of ev-
ery atomic term in the DL is identical to the root
form of the word realising the term — for instance,
the count noun realising the class person will be
‘person’.
When the editor is launched there are no indi-
viduals, atomic classes or properties, and the only
word in the lexicon is ‘thing’, which denotes the
class T (i.e., the class containing all individuals).
The KB is construed as a sequence of axioms, and
to start the ball rolling it is seeded with a single
vacuous axiom T C T. The program generates a
sentence expressing this axiom and adds a list of
editing options as follows:
</bodyText>
<figure confidence="0.77675125">
1: Every thing/1 is a thing/2.
t Add a new term
a Add a new axiom
A/C Edit class C in axiom A
</figure>
<subsectionHeader confidence="0.621885">
A/d Delete axiom A
</subsectionHeader>
<bodyText confidence="0.9993405">
Note that in every sentence expressing an axiom,
the head word of every span denoting a class is
given a numerical label; in a simple Prolog inter-
face this allows the class to be selected for edit-
ing. There is no point in attempting any edit-
ing yet, since no terms have been introduced.
</bodyText>
<page confidence="0.997127">
12
</page>
<table confidence="0.9991634">
Word Syntax Type
Mary name individual
pet noun class
animal noun class
own verb property
</table>
<tableCaption confidence="0.998221">
Table 2: Lexical entries for terms
</tableCaption>
<bodyText confidence="0.999922375">
The user should therefore choose option t to add
a new term. This is done by specifying three
things: a word (any string), a syntactic category
(either name, noun, or verb), and a logical type
(individual, class, or property). In this way
the user might define the set of terms in figure 2
from the people+pets domain, which will be fa-
miliar to students of Description Logic.
Editing of the axiom T C T can now begin.
Assuming that the target is pet C animal, the
user first selects the first class in the first axiom
by typing 1/1 (in a GUI this would be done sim-
ply by clicking on the word). The program re-
turns a menu of substitutions computed from the
current ontology and expressed in English phrases
adapted to the context of the selected class:
</bodyText>
<figure confidence="0.7346086">
1 Mary
2 Every pet
3 Every animal
4 Everything that owns one or more things
5 Everything owned by one or more things
</figure>
<bodyText confidence="0.892535647058824">
These phrases express respectively the classes
{Mary}, pet, animal, lown.T and lown−&apos;.T
which can be formed from the terms in figure 2.
Note that the last class results from the inversion of
the property own: if own(a, b) means that a owns
b, the inverse own−&apos;(a, b) means that b owns a —
a relationship that can conveniently be expressed
by passivisation (a is owned by b).
When the user chooses option 2 (in a GUI this
would of course be done by clicking on the menu
item), the program updates the knowledge base
and regenerates:
1: Every pet/1 is a thing/2
Selecting the second class by typing 1/2 now
yields the same menu of options, differently
phrased to suit the different context of the class
in the axiom:
</bodyText>
<footnote confidence="0.9913686">
1 Mary
2 a pet
3 an animal
4 owns one or more things
5 is owned by one or more things
</footnote>
<bodyText confidence="0.832275333333333">
Choosing option 3 completes the first axiom, after
which the user can use the option a (see above) to
obtain a second default axiom for editing:
</bodyText>
<listItem confidence="0.8305715">
1: Every pet/1 is an animal/2
2: Every thing/1 is a thing/2
</listItem>
<bodyText confidence="0.886742">
A similar series of operations on the second ax-
iom (starting by selecting 2/1) might then yield
the following:
</bodyText>
<listItem confidence="0.6329205">
1: Every pet/1 is an animal/2
2: Mary/1 owns/2 one or more pets/3
</listItem>
<bodyText confidence="0.988279428571428">
Even in such a simple example, we can see how
editing could be supported by the reasoning ser-
vices. For instance, if the user added a third ax-
iom ‘Mary owns one or more animals’, the pro-
gram could point out that this is redundant, since
{Mary} C lown.animal can be deduced from
pet C animal and {Mary} C lown.pet.
</bodyText>
<sectionHeader confidence="0.999471" genericHeader="conclusions">
4 Discussion
</sectionHeader>
<bodyText confidence="0.999540285714286">
We have shown through a small prototype how a
KB could be built up from scratch using an NLG-
based authoring tool, with the lexicon almost en-
tirely specified by the ontology developer. Al-
though modest in scope, the prototype extends
previous work on Conceptual Authoring (WYSI-
WYM) in several ways:
</bodyText>
<listItem confidence="0.9441973">
• It allows editing of the TBox as well as
the ABox, by defining editing operations on
classes rather than individuals (with individ-
uals treated as singleton enumerated classes).
• It allows users to extend the CNL through the
constrained choice of words/phrases to ex-
press new individuals, classes and properties.
• It allows feedback based on reasoning ser-
vices (e.g, on whether a new axiom is incon-
sistent, informative or redundant).
</listItem>
<bodyText confidence="0.999782230769231">
An obvious objection to our approach is that
we are increasing the load on users by requiring
them to build not only a KB but also a CNL lexi-
con. Much will therefore depend on the tools that
support users in the latter task. Ideally, the con-
struction of a lexical entry would depend on mak-
ing a single selection from a wide-coverage lexi-
con that has already been built by computational
linguists. However, although this ideal is feasible
for classes and properties like pet and own which
can be mapped to single words, any encounter
with real ontologies is likely to reveal terms like
hasDietaryPreference that would have to be
</bodyText>
<page confidence="0.996728">
13
</page>
<bodyText confidence="0.999974869565217">
expressed by a phrase. Probably there are solu-
tions to this problem — one could imagine for
instance an algorithm that builds new entries in a
phrasal lexicon from examples — but they remain
to be demonstrated and tested.
More generally, an important question is
whether such a method will scale up. It seems to
work reasonably well in the above example with
a handful of class constructors, terms and axioms,
but what happens when we tackle an expressive
DL like OWL Full, and support the editing of a
KB with thousands of terms and axioms?
As regards more expressive DLs, we have al-
ready cited promising work on developing CNLs
for OWL. As one might expect, the Boolean class
constructors (C nD, C UD, -,C) can lead to prob-
lems of structural ambiguity, e.g. in a description
like old n (man U woman). Here an NLG-based
editor should have the advantage over one that re-
quires human authoring of texts, since it can apply
the best available aids of punctuation and format-
ting (Hallett et al., 2007), a task that would require
great care and skill from human authors.
Increasing the number of terms would mean that
during editing, classes had to be selected from
thousands of alternatives; some kind of search
mechanism would therefore be needed. A simple
solution already used in WYSIWYM applications
(Bouayad-Agha et al., 2002; Hallett et al., 2007;
Evans et al., 2008) is a menu equipped with a text
field allowing users to narrow the focus by typ-
ing in some characters from the desired word or
phrase. In an ontology editor this search mech-
anism could be enhanced by using the ontology
itself in order to pick options that are concep-
tual rather than orthographic neighbours — for in-
stance on typing in ‘dog’ the user would obtain a
focussed list containing ‘poodle’ and ‘pekingese’
as well as ‘doggerel’.
Increasing the number of axioms has no ef-
fect on the editing process, since we are assum-
ing that axioms will be realised by separate sen-
tences, each generated without regard to context.
However, a text comprising a long list of unor-
ganised axioms hardly makes for easy reading or
navigation. There is therefore potential here for
a more interesting application of NLG technology
that would draw on topics like generation of refer-
ring expressions, pronominalisation, aggregation,
discourse planning, and summarisation. Present-
ing a KB through a fluent and well-organised re-
port would give users a valuable return on their ef-
forts in linking terms to lexical entries, and would
address a pressing problem in ontology building
— how to maintain trasparency in an ontology
as it expands, possibly through contributions from
multiple users.
In a word, the advantage of applying NLG in
this area is flexibility. Once we have a mapping
from logical terms to lexical entries in English
or another natural language, we can tailor gener-
ated texts to different tasks in knowledge manage-
ment, using fluent organised reports for purposes
of overview and navigation, and short pedantically
precise sentences for editing — backed up if nec-
essary with footnotes explaining unintuitive log-
ical implications in detail, or painstakingly for-
matted Boolean constructions that avoid potential
structural ambiguities.
</bodyText>
<sectionHeader confidence="0.998923" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.9994395625">
Franz Baader, Diego Calvanese, Deborah L. McGuin-
ness, Daniele Nardi, and Peter F. Patel-Schneider,
editors. 2003. The Description Logic Handbook:
Theory, Implementation, and Applications. Cam-
bridge University Press.
F. Baader, I. R. Horrocks, and U. Sattler. 2005. De-
scription logics as ontology languages for the se-
mantic web. Lecture Notes in Artificial Intelligence,
2605:228–248.
T. Berners-Lee, J. Hendler, and O. Lassila. 2001. The
semantic web. Scientific American, 284(5):34–43.
A. Bernstein and E. Kaufmann. 2006. GINO – a
guided input natural language ontology editor. In
Proceedings of the 5th International Semantic Web
Conference, Athens, Georgia.
Nadjet Bouayad-Agha, Richard Power, Donia Scott,
and Anja Belz. 2002. PILLS: Multilingual gener-
ation of medical information documents with over-
lapping content. In Proceedings of the Third In-
ternational Conference on Language Resoures and
Evaluation (LREC 2002), pages 2111–2114, Las
Palmas.
Brian Davis, Ahmad Ali Iqbal, Adam Funk, Valentin
Tablan, Kalina Bontcheva, Hamish Cunningham,
and Siegfried Handschuh. 2008. Roundtrip ontol-
ogy authoring. In International Semantic Web Con-
ference, volume 5318 of Lecture Notes in Computer
Science, pages 50–65. Springer.
Paolo Dongilli. 2007. Discourse Planning Strategies
for Complex Concept Descriptions. In Proceedings
of the 7th International Symposium on Natural Lan-
guage Processing, Pattaya, Chonburi, Thailand.
</reference>
<page confidence="0.984339">
14
</page>
<reference confidence="0.999771">
R. Evans, P. Piwek, L. Cahill, and N. Tipper. 2008.
Natural Language Processing in CLIME, a Multi-
lingual Legal Advisory System. Journal of Natural
Language Engineering, 14(1):101–132.
Gottlob Frege. 1879. Begriffsschrift. Halle.
Catalina Hallett, Donia Scott, and Richard Power.
2007. Composing queries through conceptual au-
thoring. Computational Linguistics, 33(1):105–133.
D. Hardcastle and R. Power. 2008. Fast, Scalable
and Reliable Generation of Controlled Natural Lan-
guage. In Proceedings of SETQA-NLP Workshop at
the 46th Annual Meeting of the Association for Com-
putational Linguistics, Ohio, US.
F. Hielkema, C. Mellish, and P. Edwards. 2007. Using
WYSIWYM to create an open-ended interface for
the semantic grid. In Proceedings of the 11th Eu-
ropean Workshop on Natural Language Generation,
Schloss Dagstuhl.
Helmut Horacek. 1999. Presenting Proofs in a
Human-Oriented Way. In Proceedings of the 16th
International Conference on Automated Deduction,
pages 142–156, London, UK. Springer-Verlag.
J. Pool. 2006. Can controlled languages scale to the
web? In 5th International Workshop on Controlled
Language Applications (CLAW’06), Boston, USA.
R. Power and D. Scott. 1998. Multilingual authoring
using feedback texts. In Proceedings of the 17th In-
ternational Conference on Computational Linguis-
tics and 36th Annual Meeting of the Association for
Computational Linguistics, pages 1053–1059, Mon-
treal, Canada.
Aarne Ranta. 1994. Type theory and the informal lan-
guage of mathematics. In Proceedings of the 1993
Types Worshop, Nijmegen, LNCS 806, pages 352–
365. Spinger Verlag.
Alan Rector, Nick Drummond, Matthew Horridge,
Jeremy Rogers, Holger Knublauch, Robert Stevens,
Hai Wang, and Chris Wroe. 2004. OWL Pizzas:
Practical Experience of Teaching OWL-DL: Com-
mon Errors and Common Patterns. In 14th Interna-
tional Conference on Knowledge Engineering and
Knowledge Management, pages 63–81.
R. Schwitter and M. Tilbrook. 2004. Controlled nat-
ural language meets the semantic web. In Pro-
ceedings of the Australasian Language Technology
Workshop, pages 55–62, Macquarie University.
C. Thompson, P. Pazandak, and H. Tennant. 2005.
Talk to your semantic web. IEEE Internet Comput-
ing, 9(6):75–78.
</reference>
<page confidence="0.997924">
15
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.740182">
<title confidence="0.999904">Towards a Generation-Based Semantic Web Authoring Tool</title>
<author confidence="0.992877">Richard</author>
<affiliation confidence="0.966727">Department of</affiliation>
<title confidence="0.891975">Open</title>
<author confidence="0.989893">Milton Keynes</author>
<email confidence="0.999053">r.power@open.ac.uk</email>
<abstract confidence="0.991786470588235">Widespread use of Semantic Web technologies requires interfaces through which knowledge can be viewed and edited without deep understanding of Description Logic and formalisms like OWL and RDF. Several groups are pursuing approaches based on Controlled Natural Languages (CNLs), so that editing can be performed by typing in sentences which are automatically interpreted as statements in OWL. We suggest here a variant of this approach which relies entirely on Natural Language Generation (NLG), and propose requirements for a system that can reliably generate transparent realisations of statements in Description Logic.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<title>The Description Logic Handbook: Theory, Implementation, and Applications.</title>
<date>2003</date>
<editor>Franz Baader, Diego Calvanese, Deborah L. McGuinness, Daniele Nardi, and Peter F. Patel-Schneider, editors.</editor>
<publisher>Cambridge University Press.</publisher>
<marker>2003</marker>
<rawString>Franz Baader, Diego Calvanese, Deborah L. McGuinness, Daniele Nardi, and Peter F. Patel-Schneider, editors. 2003. The Description Logic Handbook: Theory, Implementation, and Applications. Cambridge University Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F Baader</author>
<author>I R Horrocks</author>
<author>U Sattler</author>
</authors>
<title>Description logics as ontology languages for the semantic web.</title>
<date>2005</date>
<journal>Lecture Notes in Artificial Intelligence,</journal>
<pages>2605--228</pages>
<contexts>
<context position="7678" citStr="Baader et al., 2005" startWordPosition="1221" endWordPosition="1224">s informative, redundant, or inconsistent. Or when producing a natural language gloss for the class IhasChild.female, the generator could choose between ‘something with at least one female child’ and ‘someone with at least one female child’ by checking the subsumption relationship IhasChild.female C person. 2 Aligning DL to CNL We have explained informally the technical features of description logics. Briefly, they include rules for constructing classes, axioms, and assertions about individuals; the resulting expressions 10 are interpreted through a relatively simple modeltheoretic semantics (Baader et al., 2005). They also include efficient algorithms for performing reasoning tasks. We now turn to issues in the design of Controlled Natural Languages (CNLs) which can be aligned with specific DLs, and thus serve as useful interfaces for working with complex formalisms like OWL and RDF. As a provisional list of requirements, we would suggest the following: 1. Completeness: A sentence (or text) can be generated for any axiom permitted by the DL. 2. Uniqueness: Different sentences are generated for different axioms. 3. Transparency: Sentences in the CNL are accurately interpreted by human readers. 4. Flue</context>
</contexts>
<marker>Baader, Horrocks, Sattler, 2005</marker>
<rawString>F. Baader, I. R. Horrocks, and U. Sattler. 2005. Description logics as ontology languages for the semantic web. Lecture Notes in Artificial Intelligence, 2605:228–248.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Berners-Lee</author>
<author>J Hendler</author>
<author>O Lassila</author>
</authors>
<title>The semantic web.</title>
<date>2001</date>
<journal>Scientific American,</journal>
<volume>284</volume>
<issue>5</issue>
<contexts>
<context position="2522" citStr="Berners-Lee et al., 2001" startWordPosition="399" endWordPosition="402"> assertions about individuals. The idea of linking formal and natural languages can be traced back to Frege (1879), who observed that mathematical proofs were made up of formulae interspersed with passages in natural language, and invented formal logic as a way of rendering these passages in a precise notation. With the arrival of Artificial Intelligence in the 1950s, formal logic became the foundation for knowledge representation and automatic reasoning — a trend leading to the recent concept of a ‘semantic web’ that would open up knowledge encoding and utilisation to a world-wide community (Berners-Lee et al., 2001). However, accessible knowledge management requires accessible presentation: hence the current interest in methods of ‘sugaring’ formal logic into natural language text (Ranta, 1994; Horacek, 1999), thus in a sense turning Frege upside-down. 1.1 Description Logic The theoretical underpinning of OWL (and hence of the semantic web) is a discipline that evolved under various names in the 1980s and 1990s and is now called Description Logic (Baader et al., 2003). This refers not to a single logical language, but to a family of languages. All of these languages allow statements to be built from indi</context>
</contexts>
<marker>Berners-Lee, Hendler, Lassila, 2001</marker>
<rawString>T. Berners-Lee, J. Hendler, and O. Lassila. 2001. The semantic web. Scientific American, 284(5):34–43.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Bernstein</author>
<author>E Kaufmann</author>
</authors>
<title>GINO – a guided input natural language ontology editor.</title>
<date>2006</date>
<booktitle>In Proceedings of the 5th International Semantic Web Conference,</booktitle>
<location>Athens, Georgia.</location>
<contexts>
<context position="1607" citStr="Bernstein and Kaufmann, 2006" startWordPosition="250" endWordPosition="253">cing class or property names into the ontology, the user also decides how they should be expressed linguistically: thus the lexicon of the Natural Language interface is not predetermined. The purpose of such a tool is to support knowledge editing on the Semantic Web, which at present requires training in graphical user interfaces like Prot´eg´e (Rector et al., 2004), or direct coding in OWL and RDF. Linking OWL to Controlled Natural Language is currently the topic of an OWL1-1 task force, and several groups are already working in this area (Schwitter and Tilbrook, 2004; Thompson et al., 2005; Bernstein and Kaufmann, 2006; Pool, 2006; Dongilli, 2007); the novelty in our approach is that we rely entirely on Natural Language Generation (NLG), extending the WYSIWYM (or Conceptual Authoring) method (Power and Scott, 1998; Hallett et al., 2007) so that it supports knowledge editing for ontologies as well as for assertions about individuals. The idea of linking formal and natural languages can be traced back to Frege (1879), who observed that mathematical proofs were made up of formulae interspersed with passages in natural language, and invented formal logic as a way of rendering these passages in a precise notatio</context>
<context position="11960" citStr="Bernstein and Kaufmann, 2006" startWordPosition="1930" endWordPosition="1933">se requirements potentially conflict. For instance, to express the axiom parent C lhasChild.T fluently we could say ‘every parent has a child’, while for transparency we might prefer the pedantic ‘every parent has one or more children’. In a CNL designed for editing a KB, transparency will have priority, but one can imagine other purposes (e.g., an informal report) for which fluency would matter more. 11 2.5 Interpretability This is an essential requirement for knowledge editors that rely on automatic parsing and interpretation of texts typed in by human authors (Schwitter and Tilbrook, 2004; Bernstein and Kaufmann, 2006). A recent innovation has been to pursue the goal of ‘roundtripping’ (Davis et al., 2008), so that a CNL text can be generated from an existing ontology, revised in a text editor, and then interpreted automatically to obtain an updated ontology in the original format. For our approach, which relies entirely on generation, automatic interpretability is not essential (although one can imagine contexts in which it would be useful, for instance to allow knowledge encoding outside the NLG-based editing environment). 2.6 Editability The key feature of Conceptual Authoring (WYSIWYM) is that editing o</context>
</contexts>
<marker>Bernstein, Kaufmann, 2006</marker>
<rawString>A. Bernstein and E. Kaufmann. 2006. GINO – a guided input natural language ontology editor. In Proceedings of the 5th International Semantic Web Conference, Athens, Georgia.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nadjet Bouayad-Agha</author>
<author>Richard Power</author>
<author>Donia Scott</author>
<author>Anja Belz</author>
</authors>
<title>PILLS: Multilingual generation of medical information documents with overlapping content.</title>
<date>2002</date>
<booktitle>In Proceedings of the Third International Conference on Language Resoures and Evaluation (LREC</booktitle>
<pages>2111--2114</pages>
<location>Las Palmas.</location>
<contexts>
<context position="21207" citStr="Bouayad-Agha et al., 2002" startWordPosition="3562" endWordPosition="3565">, -,C) can lead to problems of structural ambiguity, e.g. in a description like old n (man U woman). Here an NLG-based editor should have the advantage over one that requires human authoring of texts, since it can apply the best available aids of punctuation and formatting (Hallett et al., 2007), a task that would require great care and skill from human authors. Increasing the number of terms would mean that during editing, classes had to be selected from thousands of alternatives; some kind of search mechanism would therefore be needed. A simple solution already used in WYSIWYM applications (Bouayad-Agha et al., 2002; Hallett et al., 2007; Evans et al., 2008) is a menu equipped with a text field allowing users to narrow the focus by typing in some characters from the desired word or phrase. In an ontology editor this search mechanism could be enhanced by using the ontology itself in order to pick options that are conceptual rather than orthographic neighbours — for instance on typing in ‘dog’ the user would obtain a focussed list containing ‘poodle’ and ‘pekingese’ as well as ‘doggerel’. Increasing the number of axioms has no effect on the editing process, since we are assuming that axioms will be realise</context>
</contexts>
<marker>Bouayad-Agha, Power, Scott, Belz, 2002</marker>
<rawString>Nadjet Bouayad-Agha, Richard Power, Donia Scott, and Anja Belz. 2002. PILLS: Multilingual generation of medical information documents with overlapping content. In Proceedings of the Third International Conference on Language Resoures and Evaluation (LREC 2002), pages 2111–2114, Las Palmas.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Brian Davis</author>
<author>Ahmad Ali Iqbal</author>
<author>Adam Funk</author>
<author>Valentin Tablan</author>
<author>Kalina Bontcheva</author>
<author>Hamish Cunningham</author>
<author>Siegfried Handschuh</author>
</authors>
<title>Roundtrip ontology authoring.</title>
<date>2008</date>
<booktitle>In International Semantic Web Conference,</booktitle>
<volume>5318</volume>
<pages>50--65</pages>
<publisher>Springer.</publisher>
<contexts>
<context position="12049" citStr="Davis et al., 2008" startWordPosition="1945" endWordPosition="1948">tly we could say ‘every parent has a child’, while for transparency we might prefer the pedantic ‘every parent has one or more children’. In a CNL designed for editing a KB, transparency will have priority, but one can imagine other purposes (e.g., an informal report) for which fluency would matter more. 11 2.5 Interpretability This is an essential requirement for knowledge editors that rely on automatic parsing and interpretation of texts typed in by human authors (Schwitter and Tilbrook, 2004; Bernstein and Kaufmann, 2006). A recent innovation has been to pursue the goal of ‘roundtripping’ (Davis et al., 2008), so that a CNL text can be generated from an existing ontology, revised in a text editor, and then interpreted automatically to obtain an updated ontology in the original format. For our approach, which relies entirely on generation, automatic interpretability is not essential (although one can imagine contexts in which it would be useful, for instance to allow knowledge encoding outside the NLG-based editing environment). 2.6 Editability The key feature of Conceptual Authoring (WYSIWYM) is that editing operations are defined on the semantic input, not the text. This means that authors cannot</context>
</contexts>
<marker>Davis, Iqbal, Funk, Tablan, Bontcheva, Cunningham, Handschuh, 2008</marker>
<rawString>Brian Davis, Ahmad Ali Iqbal, Adam Funk, Valentin Tablan, Kalina Bontcheva, Hamish Cunningham, and Siegfried Handschuh. 2008. Roundtrip ontology authoring. In International Semantic Web Conference, volume 5318 of Lecture Notes in Computer Science, pages 50–65. Springer.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Paolo Dongilli</author>
</authors>
<title>Discourse Planning Strategies for Complex Concept Descriptions.</title>
<date>2007</date>
<booktitle>In Proceedings of the 7th International Symposium on Natural Language Processing,</booktitle>
<location>Pattaya, Chonburi, Thailand.</location>
<contexts>
<context position="1636" citStr="Dongilli, 2007" startWordPosition="256" endWordPosition="257">logy, the user also decides how they should be expressed linguistically: thus the lexicon of the Natural Language interface is not predetermined. The purpose of such a tool is to support knowledge editing on the Semantic Web, which at present requires training in graphical user interfaces like Prot´eg´e (Rector et al., 2004), or direct coding in OWL and RDF. Linking OWL to Controlled Natural Language is currently the topic of an OWL1-1 task force, and several groups are already working in this area (Schwitter and Tilbrook, 2004; Thompson et al., 2005; Bernstein and Kaufmann, 2006; Pool, 2006; Dongilli, 2007); the novelty in our approach is that we rely entirely on Natural Language Generation (NLG), extending the WYSIWYM (or Conceptual Authoring) method (Power and Scott, 1998; Hallett et al., 2007) so that it supports knowledge editing for ontologies as well as for assertions about individuals. The idea of linking formal and natural languages can be traced back to Frege (1879), who observed that mathematical proofs were made up of formulae interspersed with passages in natural language, and invented formal logic as a way of rendering these passages in a precise notation. With the arrival of Artifi</context>
</contexts>
<marker>Dongilli, 2007</marker>
<rawString>Paolo Dongilli. 2007. Discourse Planning Strategies for Complex Concept Descriptions. In Proceedings of the 7th International Symposium on Natural Language Processing, Pattaya, Chonburi, Thailand.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Evans</author>
<author>P Piwek</author>
<author>L Cahill</author>
<author>N Tipper</author>
</authors>
<title>Natural Language Processing in CLIME, a Multilingual Legal Advisory System.</title>
<date>2008</date>
<journal>Journal of Natural Language Engineering,</journal>
<volume>14</volume>
<issue>1</issue>
<contexts>
<context position="21250" citStr="Evans et al., 2008" startWordPosition="3570" endWordPosition="3573">ty, e.g. in a description like old n (man U woman). Here an NLG-based editor should have the advantage over one that requires human authoring of texts, since it can apply the best available aids of punctuation and formatting (Hallett et al., 2007), a task that would require great care and skill from human authors. Increasing the number of terms would mean that during editing, classes had to be selected from thousands of alternatives; some kind of search mechanism would therefore be needed. A simple solution already used in WYSIWYM applications (Bouayad-Agha et al., 2002; Hallett et al., 2007; Evans et al., 2008) is a menu equipped with a text field allowing users to narrow the focus by typing in some characters from the desired word or phrase. In an ontology editor this search mechanism could be enhanced by using the ontology itself in order to pick options that are conceptual rather than orthographic neighbours — for instance on typing in ‘dog’ the user would obtain a focussed list containing ‘poodle’ and ‘pekingese’ as well as ‘doggerel’. Increasing the number of axioms has no effect on the editing process, since we are assuming that axioms will be realised by separate sentences, each generated wit</context>
</contexts>
<marker>Evans, Piwek, Cahill, Tipper, 2008</marker>
<rawString>R. Evans, P. Piwek, L. Cahill, and N. Tipper. 2008. Natural Language Processing in CLIME, a Multilingual Legal Advisory System. Journal of Natural Language Engineering, 14(1):101–132.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Gottlob Frege</author>
</authors>
<date>1879</date>
<location>Begriffsschrift. Halle.</location>
<contexts>
<context position="2011" citStr="Frege (1879)" startWordPosition="319" endWordPosition="320">ntrolled Natural Language is currently the topic of an OWL1-1 task force, and several groups are already working in this area (Schwitter and Tilbrook, 2004; Thompson et al., 2005; Bernstein and Kaufmann, 2006; Pool, 2006; Dongilli, 2007); the novelty in our approach is that we rely entirely on Natural Language Generation (NLG), extending the WYSIWYM (or Conceptual Authoring) method (Power and Scott, 1998; Hallett et al., 2007) so that it supports knowledge editing for ontologies as well as for assertions about individuals. The idea of linking formal and natural languages can be traced back to Frege (1879), who observed that mathematical proofs were made up of formulae interspersed with passages in natural language, and invented formal logic as a way of rendering these passages in a precise notation. With the arrival of Artificial Intelligence in the 1950s, formal logic became the foundation for knowledge representation and automatic reasoning — a trend leading to the recent concept of a ‘semantic web’ that would open up knowledge encoding and utilisation to a world-wide community (Berners-Lee et al., 2001). However, accessible knowledge management requires accessible presentation: hence the cu</context>
</contexts>
<marker>Frege, 1879</marker>
<rawString>Gottlob Frege. 1879. Begriffsschrift. Halle.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Catalina Hallett</author>
<author>Donia Scott</author>
<author>Richard Power</author>
</authors>
<title>Composing queries through conceptual authoring.</title>
<date>2007</date>
<journal>Computational Linguistics,</journal>
<volume>33</volume>
<issue>1</issue>
<contexts>
<context position="1829" citStr="Hallett et al., 2007" startWordPosition="284" endWordPosition="288">knowledge editing on the Semantic Web, which at present requires training in graphical user interfaces like Prot´eg´e (Rector et al., 2004), or direct coding in OWL and RDF. Linking OWL to Controlled Natural Language is currently the topic of an OWL1-1 task force, and several groups are already working in this area (Schwitter and Tilbrook, 2004; Thompson et al., 2005; Bernstein and Kaufmann, 2006; Pool, 2006; Dongilli, 2007); the novelty in our approach is that we rely entirely on Natural Language Generation (NLG), extending the WYSIWYM (or Conceptual Authoring) method (Power and Scott, 1998; Hallett et al., 2007) so that it supports knowledge editing for ontologies as well as for assertions about individuals. The idea of linking formal and natural languages can be traced back to Frege (1879), who observed that mathematical proofs were made up of formulae interspersed with passages in natural language, and invented formal logic as a way of rendering these passages in a precise notation. With the arrival of Artificial Intelligence in the 1950s, formal logic became the foundation for knowledge representation and automatic reasoning — a trend leading to the recent concept of a ‘semantic web’ that would op</context>
<context position="13086" citStr="Hallett et al., 2007" startWordPosition="2115" endWordPosition="2118">vironment). 2.6 Editability The key feature of Conceptual Authoring (WYSIWYM) is that editing operations are defined on the semantic input, not the text. This means that authors cannot produce a text in the normal way by typing in words from left to right. Some kind of non-specific initial configuration has to be gradually refined through semantic distinctions made by choices from menus (an example will be given later). To validate the approach, it has to be shown that this editing process is efficient and easily learned. Usability results from ABox editing applications have been encouraging (Hallett et al., 2007), but whether similar results can be achieved for KB editing (TBox as well as ABox) remains unproven. 2.7 Extensibility Ontology development requires that authors should be able to introduce new terms for individuals, classes and properties. The designer of a CNL-based editor cannot foresee what these terms will be, and therefore cannot provide a mapping to suitable lexical entries. This must be done by the ontology developer, and take-up accordingly depends on making this task not only feasible but easy (Hielkema et al., 2007). We will explore two ideas on how this might be done: (a) providin</context>
<context position="20878" citStr="Hallett et al., 2007" startWordPosition="3510" endWordPosition="3513"> constructors, terms and axioms, but what happens when we tackle an expressive DL like OWL Full, and support the editing of a KB with thousands of terms and axioms? As regards more expressive DLs, we have already cited promising work on developing CNLs for OWL. As one might expect, the Boolean class constructors (C nD, C UD, -,C) can lead to problems of structural ambiguity, e.g. in a description like old n (man U woman). Here an NLG-based editor should have the advantage over one that requires human authoring of texts, since it can apply the best available aids of punctuation and formatting (Hallett et al., 2007), a task that would require great care and skill from human authors. Increasing the number of terms would mean that during editing, classes had to be selected from thousands of alternatives; some kind of search mechanism would therefore be needed. A simple solution already used in WYSIWYM applications (Bouayad-Agha et al., 2002; Hallett et al., 2007; Evans et al., 2008) is a menu equipped with a text field allowing users to narrow the focus by typing in some characters from the desired word or phrase. In an ontology editor this search mechanism could be enhanced by using the ontology itself in</context>
</contexts>
<marker>Hallett, Scott, Power, 2007</marker>
<rawString>Catalina Hallett, Donia Scott, and Richard Power. 2007. Composing queries through conceptual authoring. Computational Linguistics, 33(1):105–133.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Hardcastle</author>
<author>R Power</author>
</authors>
<title>Fast, Scalable and Reliable Generation of Controlled Natural Language.</title>
<date>2008</date>
<booktitle>In Proceedings of SETQA-NLP Workshop at the 46th Annual Meeting of the Association for Computational Linguistics,</booktitle>
<location>Ohio, US.</location>
<contexts>
<context position="9423" citStr="Hardcastle and Power, 2008" startWordPosition="1512" endWordPosition="1515"> which concern the CNL’s role as an interface for a particular DL. We see no reason to insist that the alignment between DL and CNL should conform to general theories of natural language semantics. 2.1 Completeness If we propose to use generated CNL as an interface to a knowledge base, it is important that generation should be reliable. A minimal test of reliability is that the grammar and lexicon are complete, in the sense that they produce a text for any well-formed semantic input. Elsewhere, we have described a generation method that allows completeness to be checked by a computer program (Hardcastle and Power, 2008). For any non-trivial DL the set of classes is infinite (e.g., through recursion on C n D or lR.C); however, completeness can be proved through an enumeration of all local contexts for which a linguistic realisation rule is needed. As well as guaranteeing reliability, completeness checking is obviously useful as an aid to grammar development. 2.2 Uniqueness Although necessary, completeness is not a sufficient condition on the grammar of a CNL, since it could be trivially met by generating the same string (perhaps ‘Hallo World’) for any semantic input. It would also be useful to have an automat</context>
</contexts>
<marker>Hardcastle, Power, 2008</marker>
<rawString>D. Hardcastle and R. Power. 2008. Fast, Scalable and Reliable Generation of Controlled Natural Language. In Proceedings of SETQA-NLP Workshop at the 46th Annual Meeting of the Association for Computational Linguistics, Ohio, US.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F Hielkema</author>
<author>C Mellish</author>
<author>P Edwards</author>
</authors>
<title>Using WYSIWYM to create an open-ended interface for the semantic grid.</title>
<date>2007</date>
<booktitle>In Proceedings of the 11th European Workshop on Natural Language Generation, Schloss Dagstuhl.</booktitle>
<contexts>
<context position="13619" citStr="Hielkema et al., 2007" startWordPosition="2201" endWordPosition="2204">ility results from ABox editing applications have been encouraging (Hallett et al., 2007), but whether similar results can be achieved for KB editing (TBox as well as ABox) remains unproven. 2.7 Extensibility Ontology development requires that authors should be able to introduce new terms for individuals, classes and properties. The designer of a CNL-based editor cannot foresee what these terms will be, and therefore cannot provide a mapping to suitable lexical entries. This must be done by the ontology developer, and take-up accordingly depends on making this task not only feasible but easy (Hielkema et al., 2007). We will explore two ideas on how this might be done: (a) providing a wide-coverage lexicon from which users can select words to extend the CNL, and (b) using conventions for controlling the naming of classes and properties, so that the two decisions (term name, CNL lexical entry) become essentially a single decision. 3 Editing process As a first experiment we have written a Prolog program which allows a KB to be built up from scratch for a very simple DL with only one kind of statement (C C D), four class constructors (A, T, IR.C, {a}), and one property constructor (property inversion, which</context>
</contexts>
<marker>Hielkema, Mellish, Edwards, 2007</marker>
<rawString>F. Hielkema, C. Mellish, and P. Edwards. 2007. Using WYSIWYM to create an open-ended interface for the semantic grid. In Proceedings of the 11th European Workshop on Natural Language Generation, Schloss Dagstuhl.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Helmut Horacek</author>
</authors>
<title>Presenting Proofs in a Human-Oriented Way.</title>
<date>1999</date>
<booktitle>In Proceedings of the 16th International Conference on Automated Deduction,</booktitle>
<pages>142--156</pages>
<publisher>Springer-Verlag.</publisher>
<location>London, UK.</location>
<contexts>
<context position="2719" citStr="Horacek, 1999" startWordPosition="427" endWordPosition="428"> natural language, and invented formal logic as a way of rendering these passages in a precise notation. With the arrival of Artificial Intelligence in the 1950s, formal logic became the foundation for knowledge representation and automatic reasoning — a trend leading to the recent concept of a ‘semantic web’ that would open up knowledge encoding and utilisation to a world-wide community (Berners-Lee et al., 2001). However, accessible knowledge management requires accessible presentation: hence the current interest in methods of ‘sugaring’ formal logic into natural language text (Ranta, 1994; Horacek, 1999), thus in a sense turning Frege upside-down. 1.1 Description Logic The theoretical underpinning of OWL (and hence of the semantic web) is a discipline that evolved under various names in the 1980s and 1990s and is now called Description Logic (Baader et al., 2003). This refers not to a single logical language, but to a family of languages. All of these languages allow statements to be built from individuals, classes and properties, but they differ in the resources provided in order to construct classes and properties, thus allowing different balances to be drawn between the conflicting demands</context>
</contexts>
<marker>Horacek, 1999</marker>
<rawString>Helmut Horacek. 1999. Presenting Proofs in a Human-Oriented Way. In Proceedings of the 16th International Conference on Automated Deduction, pages 142–156, London, UK. Springer-Verlag.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Pool</author>
</authors>
<title>Can controlled languages scale to the web?</title>
<date>2006</date>
<booktitle>In 5th International Workshop on Controlled Language Applications (CLAW’06),</booktitle>
<location>Boston, USA.</location>
<contexts>
<context position="1619" citStr="Pool, 2006" startWordPosition="254" endWordPosition="255">nto the ontology, the user also decides how they should be expressed linguistically: thus the lexicon of the Natural Language interface is not predetermined. The purpose of such a tool is to support knowledge editing on the Semantic Web, which at present requires training in graphical user interfaces like Prot´eg´e (Rector et al., 2004), or direct coding in OWL and RDF. Linking OWL to Controlled Natural Language is currently the topic of an OWL1-1 task force, and several groups are already working in this area (Schwitter and Tilbrook, 2004; Thompson et al., 2005; Bernstein and Kaufmann, 2006; Pool, 2006; Dongilli, 2007); the novelty in our approach is that we rely entirely on Natural Language Generation (NLG), extending the WYSIWYM (or Conceptual Authoring) method (Power and Scott, 1998; Hallett et al., 2007) so that it supports knowledge editing for ontologies as well as for assertions about individuals. The idea of linking formal and natural languages can be traced back to Frege (1879), who observed that mathematical proofs were made up of formulae interspersed with passages in natural language, and invented formal logic as a way of rendering these passages in a precise notation. With the </context>
</contexts>
<marker>Pool, 2006</marker>
<rawString>J. Pool. 2006. Can controlled languages scale to the web? In 5th International Workshop on Controlled Language Applications (CLAW’06), Boston, USA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Power</author>
<author>D Scott</author>
</authors>
<title>Multilingual authoring using feedback texts.</title>
<date>1998</date>
<booktitle>In Proceedings of the 17th International Conference on Computational Linguistics and 36th Annual Meeting of the Association for Computational Linguistics,</booktitle>
<pages>1053--1059</pages>
<location>Montreal, Canada.</location>
<contexts>
<context position="1806" citStr="Power and Scott, 1998" startWordPosition="280" endWordPosition="283">h a tool is to support knowledge editing on the Semantic Web, which at present requires training in graphical user interfaces like Prot´eg´e (Rector et al., 2004), or direct coding in OWL and RDF. Linking OWL to Controlled Natural Language is currently the topic of an OWL1-1 task force, and several groups are already working in this area (Schwitter and Tilbrook, 2004; Thompson et al., 2005; Bernstein and Kaufmann, 2006; Pool, 2006; Dongilli, 2007); the novelty in our approach is that we rely entirely on Natural Language Generation (NLG), extending the WYSIWYM (or Conceptual Authoring) method (Power and Scott, 1998; Hallett et al., 2007) so that it supports knowledge editing for ontologies as well as for assertions about individuals. The idea of linking formal and natural languages can be traced back to Frege (1879), who observed that mathematical proofs were made up of formulae interspersed with passages in natural language, and invented formal logic as a way of rendering these passages in a precise notation. With the arrival of Artificial Intelligence in the 1950s, formal logic became the foundation for knowledge representation and automatic reasoning — a trend leading to the recent concept of a ‘sema</context>
</contexts>
<marker>Power, Scott, 1998</marker>
<rawString>R. Power and D. Scott. 1998. Multilingual authoring using feedback texts. In Proceedings of the 17th International Conference on Computational Linguistics and 36th Annual Meeting of the Association for Computational Linguistics, pages 1053–1059, Montreal, Canada.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Aarne Ranta</author>
</authors>
<title>Type theory and the informal language of mathematics.</title>
<date>1994</date>
<booktitle>In Proceedings of the 1993 Types Worshop, Nijmegen, LNCS 806,</booktitle>
<pages>352--365</pages>
<publisher>Spinger Verlag.</publisher>
<contexts>
<context position="2703" citStr="Ranta, 1994" startWordPosition="425" endWordPosition="426">h passages in natural language, and invented formal logic as a way of rendering these passages in a precise notation. With the arrival of Artificial Intelligence in the 1950s, formal logic became the foundation for knowledge representation and automatic reasoning — a trend leading to the recent concept of a ‘semantic web’ that would open up knowledge encoding and utilisation to a world-wide community (Berners-Lee et al., 2001). However, accessible knowledge management requires accessible presentation: hence the current interest in methods of ‘sugaring’ formal logic into natural language text (Ranta, 1994; Horacek, 1999), thus in a sense turning Frege upside-down. 1.1 Description Logic The theoretical underpinning of OWL (and hence of the semantic web) is a discipline that evolved under various names in the 1980s and 1990s and is now called Description Logic (Baader et al., 2003). This refers not to a single logical language, but to a family of languages. All of these languages allow statements to be built from individuals, classes and properties, but they differ in the resources provided in order to construct classes and properties, thus allowing different balances to be drawn between the con</context>
</contexts>
<marker>Ranta, 1994</marker>
<rawString>Aarne Ranta. 1994. Type theory and the informal language of mathematics. In Proceedings of the 1993 Types Worshop, Nijmegen, LNCS 806, pages 352– 365. Spinger Verlag.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Alan Rector</author>
<author>Nick Drummond</author>
<author>Matthew Horridge</author>
<author>Jeremy Rogers</author>
<author>Holger Knublauch</author>
<author>Robert Stevens</author>
<author>Hai Wang</author>
<author>Chris Wroe</author>
</authors>
<title>OWL Pizzas: Practical Experience of Teaching OWL-DL: Common Errors and Common Patterns.</title>
<date>2004</date>
<booktitle>In 14th International Conference on Knowledge Engineering and Knowledge Management,</booktitle>
<pages>63--81</pages>
<contexts>
<context position="1347" citStr="Rector et al., 2004" startWordPosition="206" endWordPosition="210"> realisations of statements in Description Logic. 1 Introduction We describe here a simple prototype of an editing tool that allows a user to create an ontology through an open-ended Natural Language interface. By ‘open-ended’ we mean that when introducing class or property names into the ontology, the user also decides how they should be expressed linguistically: thus the lexicon of the Natural Language interface is not predetermined. The purpose of such a tool is to support knowledge editing on the Semantic Web, which at present requires training in graphical user interfaces like Prot´eg´e (Rector et al., 2004), or direct coding in OWL and RDF. Linking OWL to Controlled Natural Language is currently the topic of an OWL1-1 task force, and several groups are already working in this area (Schwitter and Tilbrook, 2004; Thompson et al., 2005; Bernstein and Kaufmann, 2006; Pool, 2006; Dongilli, 2007); the novelty in our approach is that we rely entirely on Natural Language Generation (NLG), extending the WYSIWYM (or Conceptual Authoring) method (Power and Scott, 1998; Hallett et al., 2007) so that it supports knowledge editing for ontologies as well as for assertions about individuals. The idea of linking</context>
</contexts>
<marker>Rector, Drummond, Horridge, Rogers, Knublauch, Stevens, Wang, Wroe, 2004</marker>
<rawString>Alan Rector, Nick Drummond, Matthew Horridge, Jeremy Rogers, Holger Knublauch, Robert Stevens, Hai Wang, and Chris Wroe. 2004. OWL Pizzas: Practical Experience of Teaching OWL-DL: Common Errors and Common Patterns. In 14th International Conference on Knowledge Engineering and Knowledge Management, pages 63–81.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Schwitter</author>
<author>M Tilbrook</author>
</authors>
<title>Controlled natural language meets the semantic web.</title>
<date>2004</date>
<booktitle>In Proceedings of the Australasian Language Technology Workshop,</booktitle>
<pages>55--62</pages>
<institution>Macquarie University.</institution>
<contexts>
<context position="1554" citStr="Schwitter and Tilbrook, 2004" startWordPosition="242" endWordPosition="245"> interface. By ‘open-ended’ we mean that when introducing class or property names into the ontology, the user also decides how they should be expressed linguistically: thus the lexicon of the Natural Language interface is not predetermined. The purpose of such a tool is to support knowledge editing on the Semantic Web, which at present requires training in graphical user interfaces like Prot´eg´e (Rector et al., 2004), or direct coding in OWL and RDF. Linking OWL to Controlled Natural Language is currently the topic of an OWL1-1 task force, and several groups are already working in this area (Schwitter and Tilbrook, 2004; Thompson et al., 2005; Bernstein and Kaufmann, 2006; Pool, 2006; Dongilli, 2007); the novelty in our approach is that we rely entirely on Natural Language Generation (NLG), extending the WYSIWYM (or Conceptual Authoring) method (Power and Scott, 1998; Hallett et al., 2007) so that it supports knowledge editing for ontologies as well as for assertions about individuals. The idea of linking formal and natural languages can be traced back to Frege (1879), who observed that mathematical proofs were made up of formulae interspersed with passages in natural language, and invented formal logic as a</context>
<context position="11929" citStr="Schwitter and Tilbrook, 2004" startWordPosition="1925" endWordPosition="1929">on, fluency concerns ease. These requirements potentially conflict. For instance, to express the axiom parent C lhasChild.T fluently we could say ‘every parent has a child’, while for transparency we might prefer the pedantic ‘every parent has one or more children’. In a CNL designed for editing a KB, transparency will have priority, but one can imagine other purposes (e.g., an informal report) for which fluency would matter more. 11 2.5 Interpretability This is an essential requirement for knowledge editors that rely on automatic parsing and interpretation of texts typed in by human authors (Schwitter and Tilbrook, 2004; Bernstein and Kaufmann, 2006). A recent innovation has been to pursue the goal of ‘roundtripping’ (Davis et al., 2008), so that a CNL text can be generated from an existing ontology, revised in a text editor, and then interpreted automatically to obtain an updated ontology in the original format. For our approach, which relies entirely on generation, automatic interpretability is not essential (although one can imagine contexts in which it would be useful, for instance to allow knowledge encoding outside the NLG-based editing environment). 2.6 Editability The key feature of Conceptual Author</context>
</contexts>
<marker>Schwitter, Tilbrook, 2004</marker>
<rawString>R. Schwitter and M. Tilbrook. 2004. Controlled natural language meets the semantic web. In Proceedings of the Australasian Language Technology Workshop, pages 55–62, Macquarie University.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C Thompson</author>
<author>P Pazandak</author>
<author>H Tennant</author>
</authors>
<title>Talk to your semantic web.</title>
<date>2005</date>
<journal>IEEE Internet Computing,</journal>
<volume>9</volume>
<issue>6</issue>
<contexts>
<context position="1577" citStr="Thompson et al., 2005" startWordPosition="246" endWordPosition="249"> mean that when introducing class or property names into the ontology, the user also decides how they should be expressed linguistically: thus the lexicon of the Natural Language interface is not predetermined. The purpose of such a tool is to support knowledge editing on the Semantic Web, which at present requires training in graphical user interfaces like Prot´eg´e (Rector et al., 2004), or direct coding in OWL and RDF. Linking OWL to Controlled Natural Language is currently the topic of an OWL1-1 task force, and several groups are already working in this area (Schwitter and Tilbrook, 2004; Thompson et al., 2005; Bernstein and Kaufmann, 2006; Pool, 2006; Dongilli, 2007); the novelty in our approach is that we rely entirely on Natural Language Generation (NLG), extending the WYSIWYM (or Conceptual Authoring) method (Power and Scott, 1998; Hallett et al., 2007) so that it supports knowledge editing for ontologies as well as for assertions about individuals. The idea of linking formal and natural languages can be traced back to Frege (1879), who observed that mathematical proofs were made up of formulae interspersed with passages in natural language, and invented formal logic as a way of rendering these</context>
</contexts>
<marker>Thompson, Pazandak, Tennant, 2005</marker>
<rawString>C. Thompson, P. Pazandak, and H. Tennant. 2005. Talk to your semantic web. IEEE Internet Computing, 9(6):75–78.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>