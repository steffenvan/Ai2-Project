<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000189">
<title confidence="0.9964565">
Event Extraction via Dynamic Multi-Pooling Convolutional Neural
Networks
</title>
<author confidence="0.998232">
Yubo Chen, Liheng Xu, Kang Liu, Daojian Zeng and Jun Zhao
</author>
<affiliation confidence="0.9936095">
National Laboratory of Pattern Recognition
Institute of Automation, Chinese Academy of Sciences, Beijing, 100190, China
</affiliation>
<email confidence="0.996253">
{yubo.chen,lhxu,kliu,djzeng,jzhao}@nlpr.ia.ac.cn
</email>
<sectionHeader confidence="0.993826" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999921206896552">
Traditional approaches to the task of ACE
event extraction primarily rely on elabo-
rately designed features and complicated
natural language processing (NLP) tools.
These traditional approaches lack gener-
alization, take a large amount of human
effort and are prone to error propaga-
tion and data sparsity problems. This
paper proposes a novel event-extraction
method, which aims to automatically ex-
tract lexical-level and sentence-level fea-
tures without using complicated NLP
tools. We introduce a word-representation
model to capture meaningful semantic reg-
ularities for words and adopt a framework
based on a convolutional neural network
(CNN) to capture sentence-level clues.
However, CNN can only capture the most
important information in a sentence and
may miss valuable facts when considering
multiple-event sentences. We propose a
dynamic multi-pooling convolutional neu-
ral network (DMCNN), which uses a dy-
namic multi-pooling layer according to
event triggers and arguments, to reserve
more crucial information. The experimen-
tal results show that our approach signif-
icantly outperforms other state-of-the-art
methods.
</bodyText>
<sectionHeader confidence="0.999336" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999925235294118">
Event extraction is an important and challenging
task in Information Extraction (IE), which aims
to discover event triggers with specific types and
their arguments. Current state-of-the-art methods
(Li et al., 2014; Li et al., 2013; Hong et al., 2011;
Liao and Grishman, 2010; Ji and Grishman, 2008)
often use a set of elaborately designed features
that are extracted by textual analysis and linguistic
knowledge. In general, we can divide the features
into two categories: lexical features and contex-
tual features.
Lexical features contain part-of-speech tags
(POS), entity information, and morphology fea-
tures (e.g., token, lemma, etc.), which aim to cap-
ture semantics or the background knowledge of
words. For example, consider the following sen-
tence with an ambiguous word beats:
</bodyText>
<listItem confidence="0.5978925">
S1: Obama beats McCain.
S2: Tyson beats his opponent.
</listItem>
<bodyText confidence="0.9999703">
In S1, beats is a trigger of type Elect. However,
in S2, beats is a trigger of type Attack, which is
more common than type Elect. Because of the am-
biguity, a traditional approach may mislabel beats
in S1 as a trigger of Attack. However, if we have
the priori knowledge that Obama and McCain are
presidential contenders, we have ample evidence
to predict that beats is a trigger of type Elect. We
call these knowledge lexical-level clues. To repre-
sent such features, the existing methods (Hong et
al., 2011) often rely on human ingenuity, which
is a time-consuming process and lacks general-
ization. Furthermore, traditional lexical features
in previous methods are a one-hot representation,
which may suffer from the data sparsity problem
and may not be able to adequately capture the se-
mantics of the words (Turian et al., 2010).
To identify events and arguments more pre-
cisely, previous methods often captured contex-
tual features, such as syntactic features, which aim
to understand how facts are tied together from a
larger field of view. For example, in S3, there are
two events that share three arguments as shown
in Figure 1. From the dependency relation of
nsubj between the argument cameraman and trig-
ger died, we can induce a Victim role to cam-
eraman in the Die event. We call such infor-
mation sentence-level clues. However, the argu-
ment word cameraman and its trigger word fired
are in different clauses, and there is no direct de-
</bodyText>
<page confidence="0.964761">
167
</page>
<note confidence="0.988896666666667">
Proceedings of the 53rd Annual Meeting of the Association for Computational Linguistics
and the 7th International Joint Conference on Natural Language Processing, pages 167–176,
Beijing, China, July 26-31, 2015. c�2015 Association for Computational Linguistics
</note>
<figureCaption confidence="0.996045333333333">
Figure 1: Event mentions and syntactic parser results of S3. The upper side shows two event mentions
that share three arguments: the Die event mention, triggered by “died”, and the Attack event mention,
triggered by “fired”. The lower side shows the collapsed dependency results.
</figureCaption>
<bodyText confidence="0.995080214285714">
pendency path between them. Thus it is difficult
to find the Target role between them using tradi-
tional dependency features. In addition, extracting
such features depends heavily on the performance
of pre-existing NLP systems, which could suffer
from error propagation.
S3: In Baghdad, a cameraman died when an
American tank fired on the Palestine Hotel.
To correctly attach cameraman to fired as a Tar-
get argument, we must exploit internal semantics
over the entire sentence such that the Attack event
results in Die event. Recent improvements of
convolutional neural networks (CNNs) have been
proven to be efficient for capturing syntactic and
semantics between words within a sentence (Col-
lobert et al., 2011; Kalchbrenner and Blunsom,
2013; Zeng et al., 2014) for NLP tasks. CNNs
typically use a max-pooling layer, which applies
a max operation over the representation of an en-
tire sentence to capture the most useful informa-
tion. However, in event extraction, one sentence
may contain two or more events, and these events
may share the argument with different roles. For
example, there are two events in S3, namely, the
Die event and Attack event. If we use a traditional
max-pooling layer and only keep the most impor-
tant information to represent the sentence, we may
obtain the information that depicts “a cameraman
died” but miss the information about “American
tank fired on the Palestine Hotel”, which is impor-
tant for predicting the Attack event and valuable
for attaching cameraman to fired as an Target ar-
gument. In our experiments, we found that such
multiple-event sentences comprise 27.3% of our
dataset, which is a phenomenon we cannot ignore.
In this paper, we propose a dynamic multi-
pooling convolutional neural network (DMCNN)
to address the problems stated above. To capture
lexical-level clues and reduce human effort, we
introduce a word-representation model (Mikolov
et al., 2013b), which has been shown to be able
to capture the meaningful semantic regularities of
words (Bengio et al., 2003; Erhan et al., 2010;
Mikolov et al., 2013a). To capture sentence-level
clues without using complicated NLP tools, and
to reserve information more comprehensively, we
devise a dynamic multi-pooling layer for CNN,
which returns the maximum value in each part of
the sentence according to event triggers and argu-
ments. In summary, the contributions of this paper
are as follows:
• We present a novel framework for event
extraction, which can automatically induce
lexical-level and sentence-level features from
plain texts without complicated NLP prepro-
cessing.
</bodyText>
<listItem confidence="0.790508625">
• We devise a dynamic multi-pooling convolu-
tional neural network (DMCNN), which aims
to capture more valuable information within
a sentence for event extraction.
• We conduct experiments on a widely used
ACE2005 event extraction dataset, and the
experimental results show that our approach
outperforms other state-of-the-art methods.
</listItem>
<sectionHeader confidence="0.883214" genericHeader="method">
2 Event Extraction Task
</sectionHeader>
<bodyText confidence="0.9860485">
In this paper, we focus on the event extraction task
defined in Automatic Content Extraction1 (ACE)
evaluation, where an event is defined as a specific
occurrence involving participants. First, we in-
troduce some ACE terminology to understand this
task more easily:
</bodyText>
<footnote confidence="0.99279">
1http://projects.ldc.upenn.edu/ace/
</footnote>
<page confidence="0.987329">
168
</page>
<listItem confidence="0.9972035">
• Event mention: a phrase or sentence within
which an event is described, including a trig-
ger and arguments.
• Event trigger: the main word that most
clearly expresses the occurrence of an event
(An ACE event trigger is typically a verb or a
noun).
• Event argument: an entity mention, tempo-
ral expression or value (e.g. Job-Title) that is
involved in an event (viz., participants).
• Argument role: the relationship between an
argument to the event in which it participates.
</listItem>
<bodyText confidence="0.999577933333333">
Given an English text document, an event ex-
traction system should predict event triggers with
specific subtypes and their arguments for each sen-
tence. The upper side of figure 1 depicts the event
triggers and their arguments for S3 in Section 1.
ACE defines 8 event types and 33 subtypes, such
as Attack or Elect.
Although event extraction depends on name
identification and entity mention co-reference, it
is another difficult task in ACE evaluation and not
the focus in the event extraction task. Thus, in this
paper, we directly leverage the entity label pro-
vided by the ACE, following most previous works
(Hong et al., 2011; Liao and Grishman, 2010; Ji
and Grishman, 2008).
</bodyText>
<sectionHeader confidence="0.99849" genericHeader="method">
3 Methodology
</sectionHeader>
<bodyText confidence="0.999194965517241">
In this paper, event extraction is formulated as a
two-stage, multi-class classification via dynamic
multi-pooling convolutional neural networks with
the automatically learned features. The first stage
is called trigger classification, in which we use a
DMCNN to classify each word in a sentence to
identify trigger words. If one sentence has trig-
gers, the second stage is conducted, which applies
a similar DMCNN to assign arguments to trig-
gers and align the roles of the arguments. We call
this argument classification. Because the second
stage is more complicated, we first describe the
methodology of argument classification in Section
3.1∼3.4 and then illustrate the difference between
the DMCNNs that are used for trigger classifica-
tion and those used for argument classification in
Section 3.5.
Figure 2 describes the architecture of argu-
ment classification, which primarily involves the
following four components: (i) word-embedding
learning, which reveals the embedding vectors of
words in an unsupervised manner; (ii) lexical-level
feature representation, which directly uses embed-
ding vectors of words to capture lexical clues; (iii)
sentence-level feature extraction, which proposes
a DMCNN to learn the compositional semantic
features of sentences; and (iv) argument classi-
fier output, which calculates a confidence score for
each argument role candidate.
</bodyText>
<subsectionHeader confidence="0.9993925">
3.1 Word Embedding Learning and
Lexical-Level Feature Representation
</subsectionHeader>
<bodyText confidence="0.999996535714286">
Lexical-level features serve as important clues for
event extraction (Hong et al., 2011; Li et al.,
2013). Traditional lexical-level features primar-
ily include lemma, synonyms and POS tag of the
candidate words. The quality of such features
depends strongly on the results of existing NLP
tools and human ingenuity. Additionally, the tra-
ditional features remain unsatisfactory for captur-
ing the semantics of words, which are important
in event extraction, as showed in S1 and S2. As
Erhan et al. (2010) reported, word embeddings
learned from a significant amount of unlabeled
data are more powerful for capturing the mean-
ingful semantic regularities of words. This paper
uses unsupervised pre-trained word embedding as
the source of base features. We select the word
embeddings of candidate words (candidate trigger,
candidate argument) and the context tokens (left
and right tokens of the candidate words). Then, all
of these word embeddings are concatenated into
the lexical-level features vector L to represent the
lexical-level features in argument classification.
In this work, we use the Skip-gram model to
pre-train the word embedding. This model is the
state-of-the-art model in many NLP tasks (Baroni
et al., 2014). The Skip-gram model trains the
embeddings of words w1, w2...wm by maximizing
the average log probability,
</bodyText>
<equation confidence="0.8314006">
log p(wt+j|wt) (1)
where c is the size of the training window. Basi-
cally, p(wt+j|wt) is defined as,
Emw=1 exp(e�Twet) (2)
0
</equation>
<bodyText confidence="0.996058666666667">
where m is the vocabulary of the unlabeled text. ei
is another embedding for ei, see Morin and Bengio
(2005) for details.
</bodyText>
<equation confidence="0.97647175">
�
−c≤j≤c,j=&apos;40
1
m
�m
t=1
p(wt+j|wt) =
etexp( +jet)
</equation>
<page confidence="0.96922">
169
</page>
<figure confidence="0.974014333333333">
maac(C&apos;&apos;)
maac(C&apos;O
maac(C&apos;�)
</figure>
<figureCaption confidence="0.9954825">
Figure 2: The architecture for the stage of argument classification in the event extraction. It illustrates
the processing of one instance with the predict trigger fired and the candidate argument cameraman.
</figureCaption>
<subsectionHeader confidence="0.999769">
3.2 Extracting Sentence-Level Features
Using a DMCNN
</subsectionHeader>
<bodyText confidence="0.999976411764706">
The CNN, with max-pooling layers, is a good
choice to capture the semantics of long-distance
words within a sentence (Collobert et al., 2011).
However, as noted in the section 1, traditional
CNN is incapable of addressing the event extrac-
tion problem. Because a sentence may contain
more than one event, using only the most impor-
tant information to represent a sentence, as in the
traditional CNN, will miss valuable clues. To re-
solve this problem, we propose a DMCNN to ex-
tract the sentence-level features. The DMCNN
uses a dynamic multi-pooling layer to obtain a
maximum value for each part of a sentence, which
is split by event triggers and event arguments.
Thus, the DMCNN is expected to capture more
valuable clues compared to traditional CNN meth-
ods.
</bodyText>
<subsectionHeader confidence="0.634471">
3.2.1 Input
</subsectionHeader>
<bodyText confidence="0.999983142857143">
This subsection illustrates the input needed for a
DMCNN to extract sentence-level features. The
semantic interactions between the predicted trig-
ger words and argument candidates are crucial for
argument classification. Therefore, we propose
three types of input that the DMCNN uses to cap-
ture these important clues:
</bodyText>
<listItem confidence="0.998363285714286">
• Context-word feature (CWF): Similar to
Kalchbrenner et al. (2014) and Collobert et
al. (2011), we take all the words of the whole
sentence as the context. CWF is the vector of
each word token transformed by looking up
word embeddings.
• Position feature (PF): It is necessary to spec-
</listItem>
<bodyText confidence="0.954987703703704">
ify which words are the predicted trigger or
candidate argument in the argument classi-
fication. Thus, we proposed the PF, which
is defined as the relative distance of the cur-
rent word to the predicted trigger or candidate
argument. For example, in S3, the relative
distances of tank to the candidate argument
cameraman is 5. To encode the position fea-
ture, each distance value is also represented
by an embedding vector. Similar to word em-
bedding, Distance Values are randomly ini-
tialized and optimized through back propaga-
tion.
• Event-type feature (EF): The event type of a
current trigger is valuable for argument clas-
sification (Ahn, 2006; Hong et al., 2011; Liao
and Grishman, 2010; Li et al., 2013), so we
encode event type predicted in the trigger
classification stage as an important clue for
the DMCNN, as in the PF.
Figure 2 assumes that word embedding has size
d,,, = 4, position embedding has size dp = 1
and event-type embedding has size de = 1. Let
xi E Rd be the d-dimensional vector representa-
tion corresponding to the i-th word in the sentence,
where d = d,,, + dp * 2 + de. A sentence of length
n is represented as follows:
</bodyText>
<equation confidence="0.98766">
x1:n = x1 ® x2 ® ... ® xn (3)
</equation>
<bodyText confidence="0.9998556">
where ® is the concatenation operator. Thus,
combined word embedding, position embedding
and event-type embedding transform an instance
as a matrix X E Rn×d. Then, X is fed into the
convolution part.
</bodyText>
<page confidence="0.983211">
170
</page>
<subsectionHeader confidence="0.729975">
3.2.2 Convolution
</subsectionHeader>
<bodyText confidence="0.999909444444444">
The convolution layer aims to capture the compo-
sitional semantics of a entire sentence and com-
press these valuable semantics into feature maps.
In general, let xi:i+j refer to the concatenation of
words xi, xi+1, ..., xi+j. A convolution operation
involves a filter w E Rh×d, which is applied to a
window of h words to produce a new feature. For
example, a feature ci is generated from a window
of words xi:i+h−1 by the following operator,
</bodyText>
<equation confidence="0.955028">
ci = f(w &apos; xi:i+h−1 + b) (4)
</equation>
<bodyText confidence="0.954987666666667">
where b E R is a bias term and f is a non-linear
function such as the hyperbolic tangent. This fil-
ter is applied to each possible window of words in
the sentence x1:h, x2:h+1, ..., xn−h+1:n to produce
a feature map ci where the index i ranges from 1
to n − h + 1.
We have described the process of how one fea-
ture map is extracted from one filter. To capture
different features, it usually use multiple filters in
the convolution. Assuming that we use m filters
W = w1, w2, ..., wm, the convolution operation
can be expressed as:
</bodyText>
<equation confidence="0.971094">
cji = f(wj &apos; xi:i+h−1 + bj) (5)
</equation>
<bodyText confidence="0.999648">
where j ranges from 1 to m. The convolution result
is a matrix C E Rm×(n−h+1).
</bodyText>
<subsectionHeader confidence="0.464907">
3.2.3 Dynamic Multi-Pooling
</subsectionHeader>
<bodyText confidence="0.999979111111111">
To extract the most important features (max value)
within each feature map, traditional CNNs (Col-
lobert et al., 2011; Kim, 2014; Zeng et al., 2014)
take one feature map as a pool and only get one
max value for each feature map. However, sin-
gle max-pooling is not sufficient for event extrac-
tion. Because in the task of this paper, one sen-
tence may contain two or more events, and one
argument candidate may play a different role with
a different trigger. To make an accurate predic-
tion, it is necessary to capture the most valuable
information with regard to the change of the can-
didate words. Thus, we split each feature map
into three parts according to the candidate argu-
ment and predicted trigger in the argument clas-
sification stage. Instead of using one max value
for an entire feature map to represent the sen-
tence, we keep the max value of each split part and
call it dynamic multi-pooling. Compared to tra-
ditional max-pooling, dynamic multi-pooling can
reserve more valuable information without miss-
ing the max-pooling value.
As shown in Figure 2, the feature map output cj
is divided into three sections cj1, cj2, cj3 by “cam-
eraman” and “fired”. The dynamic multi-pooling
can be expressed as formula 6,where 1 &lt; j &lt; m
and 1 &lt; i &lt; 3.
</bodyText>
<equation confidence="0.99349">
pji = max(cji) (6)
</equation>
<bodyText confidence="0.9999134">
Through the dynamic multi-pooling layer, we
obtain the pji for each feature map. Then, we
concatenate all pji to form a vector P E R3m,
which can be considered as higher-level features
(sentence-level features).
</bodyText>
<subsectionHeader confidence="0.960733">
3.3 Output
</subsectionHeader>
<bodyText confidence="0.999983285714286">
The automatically learned lexical and sentence-
level features mentioned above are concatenated
into a single vector F = [L, P]. To compute the
confidence of each argument role, the feature vec-
tor F E R3m+dl, where m is the number of the
feature map and dl is the dimension of the lexical-
level features, is fed into a classifier.
</bodyText>
<equation confidence="0.998059">
O = WsF + bs (7)
</equation>
<bodyText confidence="0.985192909090909">
Ws E Rn1×(3m+dl) is the transformation ma-
trix and O E Rn1 is the final output of the net-
work, where n1 is equal to the number of the ar-
gument role including the “None role” label for
the candidate argument which don’t play any role
in the event. For regularization, we also employ
dropout(Hinton et al., 2012) on the penultimate
layer, which can prevent the co-adaptation of hid-
den units by randomly dropping out a proportion p
of the hidden units during forward and backprop-
agation.
</bodyText>
<subsectionHeader confidence="0.956845">
3.4 Training
</subsectionHeader>
<bodyText confidence="0.9995645">
We define all of the parameters for the stage
of argument classification to be trained as 0 =
(E, PF1, PF2, EF, W, b, WS, bs). Specifically, E
is the word embedding, PF1 and PF2 are the posi-
tion embedding, EF is the embedding of the event
type, W and b are the parameter of the filter, Ws
and bs are all of the parameters of the output layer.
Given an input example s, the network with pa-
rameter 0 outputs the vector O, where the i-th
component Oi contains the score for argument role
i. To obtain the conditional probability p(ijx, 0),
we apply a softmax operation over all argument
</bodyText>
<page confidence="0.921375">
171
</page>
<equation confidence="0.951554">
role types: • A trigger is correct if its event subtype and
p(i|x, θ) = n, e°i (8) offsets match those of a reference trigger.
E e°k
k=1
</equation>
<bodyText confidence="0.994075333333333">
Given all of our (suppose T) training examples
(xi; yi), we can then define the objective function
as follows:
</bodyText>
<equation confidence="0.998365666666667">
T
J (θ) = log p(y(i)|x(i), θ) (9)
i=1
</equation>
<bodyText confidence="0.999767">
To compute the network parameter θ, we max-
imize the log likelihood J (θ) through stochastic
gradient descent over shuffled mini-batches with
the Adadelta (Zeiler, 2012) update rule.
</bodyText>
<subsectionHeader confidence="0.520904">
3.5 Model for Trigger Classification
</subsectionHeader>
<bodyText confidence="0.9999877">
In the above sections, we presented our model and
features for argument classification. The method
proposed above is also suitable for trigger classi-
fication, but the task only need to find triggers in
the sentence, which is less complicated than argu-
ment classification. Thus we can used a simplified
version of DMCNN.
In the trigger classification, we only use the can-
didate trigger and its left and right tokens in the
lexical-level feature representation. In the feature
representation of the sentence level, we use the
same CWF as does in argument classification, but
we only use the position of the candidate trigger to
embed the position feature. Furthermore, instead
of splitting the sentence into three parts, the sen-
tence is split into two parts by a candidate trigger.
Except for the above change in the features and
model, we classify a trigger as the classification of
an argument. Both stages form the framework of
the event extraction.
</bodyText>
<sectionHeader confidence="0.999918" genericHeader="method">
4 Experiments
</sectionHeader>
<subsectionHeader confidence="0.998951">
4.1 Dataset and Evaluation Metric
</subsectionHeader>
<bodyText confidence="0.999974727272727">
We utilized the ACE 2005 corpus as our dataset.
For comparison, as the same as Li et al. (2013),
Hong et al. (2011) and Liao and Grishman (2010),
we used the same test set with 40 newswire articles
and the same development set with 30 other docu-
ments randomly selected from different genres and
the rest 529 documents are used for training. Sim-
ilar to previous work (Li et al., 2013; Hong et al.,
2011; Liao and Grishman, 2010; Ji and Grishman,
2008), we use the following criteria to judge the
correctness of each predicted event mention:
</bodyText>
<listItem confidence="0.989005714285714">
• An argument is correctly identified if its event
subtype and offsets match those of any of the
reference argument mentions.
• An argument is correctly classified if its event
subtype, offsets and argument role match
those of any of the reference argument men-
tions.
</listItem>
<bodyText confidence="0.9947535">
Finally we use Precision (P), Recall (R) and F
measure (F1) as the evaluation metrics.
</bodyText>
<subsectionHeader confidence="0.968611">
4.2 Our Method vs. State-of-the-art Methods
</subsectionHeader>
<bodyText confidence="0.9999275">
We select the following state-of-the-art methods
for comparison.
</bodyText>
<listItem confidence="0.9171392">
1) Li’s baseline is the feature-based system pro-
posed by Li et al. (2013), which only employs
human-designed lexical features, basic features
and syntactic features.
2) Liao’s cross-event is the method proposed by
</listItem>
<bodyText confidence="0.968963862068966">
Liao and Grishman (2010), which uses document-
level information to improve the performance of
ACE event extraction.
3) Hong’s cross-entity is the method proposed by
Hong et al. (2011), which extracts event by using
cross-entity inference. To the best of our knowl-
edge, it is the best-reported feature-based system
in the literature based on gold standards argument
candidates.
4) Li’s structure is the method proposed by Li et
al. (2013), which extracts events based on struc-
ture prediction. It is the best-reported structure-
based system.
Following Li et al. (2013), we tuned the
model parameters on the development through
grid search. Moreover, in different stages of event
extraction, we adopted different parameters in the
DMCNN. Specifically, in the trigger classification,
we set the window size as 3, the number of the
feature map as 200, the batch size as 170 and the
dimension of the PF as 5. In the argument classi-
fication, we set the window size as 3, the number
of the feature map as 300, the batch size as 20 and
the dimension of the PF and EF as 5. Stochastic
gradient descent over shuffled mini-batches with
the Adadelta update rule(Zeiler, 2012) is used for
training and testing processes. It mainly contains
two parameters p and ε. We set p = 0.95 and
ε = 1e−6. For the dropout operation, we set the
</bodyText>
<page confidence="0.996103">
172
</page>
<table confidence="0.99936475">
Methods Trigger Trigger Identification Argument Argument
Identification(%) + Classification(%) Identification(%) Role(%)
P R F P R F P R F P R F
Li’s baseline 76.2 60.5 67.4 74.5 59.1 65.9 74.1 37.4 49.7 65.4 33.1 43.9
Liao’s cross-event N/A 68.7 68.9 68.8 50.9 49.7 50.3 45.1 44.1 44.6
Hong’s cross-entity N/A 72.9 64.3 68.3 53.4 52.9 53.1 51.6 45.5 48.3
Li’s structure 76.9 65.0 70.4 73.7 62.3 67.5 69.8 47.9 56.8 64.7 44.4 52.7
DMCNN model 80.4 67.7 73.5 75.6 63.6 69.1 68.8 51.9 59.1 62.2 46.9 53.5
</table>
<tableCaption confidence="0.999958">
Table 1: Overall performance on blind test data
</tableCaption>
<bodyText confidence="0.99989496875">
rate = 0.5. We train the word embedding using
the Skip-gram algorithm 2 on the NYT corpus 3.
Table 1 shows the overall performance on the
blind test dataset. From the results, we can see
that the DMCNN model we proposed with the
automatically learned features achieves the best
performance among all of the compared meth-
ods. DMCNN can improve the best F1 (Li et
al., 2013) in the state-of-the-arts for trigger clas-
sification by 1.6% and argument role classifica-
tion by 0.8%. This demonstrates the effective-
ness of the proposed method. Moreover, a com-
parison of Liao’s cross-event with Li’s baseline il-
lustrates that Liao’s cross-event achieves a better
performance. We can also make the same obser-
vation when comparing Hong’s cross-entity with
Liao’s cross-event and comparing Li’s structure
with Hong’s cross-entity. It proves that richer
feature sets lead to better performance when us-
ing traditional human-designed features. How-
ever, our method could obtain further better re-
sults on the condition of only using automatically
learned features from original words. Specifically,
compared to Hong’s cross-entity, it gains 0.8% im-
provement on trigger classification F1 and 5.2%
improvement on argument classification F1. We
believe the reason is that the features we automati-
cally learned can capture more meaningful seman-
tic regularities of words. Remarkably, compared
to Li’s structure, our approach with sentence and
lexical features achieves comparable performance
even though we do not use complicated NLP tools.
</bodyText>
<subsectionHeader confidence="0.9945775">
4.3 Effect of The DMCNN on Extracting
Sentence-Level Features
</subsectionHeader>
<bodyText confidence="0.9983354">
In this subsection, we prove the effectiveness of
the proposed DMCNN for sentence-level feature
extraction. We specifically select two methods as
baselines for comparison with our DMCNN: Em-
beddings+T and CNN. Embeddings+T uses word
</bodyText>
<footnote confidence="0.997314">
2https://code.google.com/p/word2vec/
3https://catalog.ldc.upenn.edu/LDC2008T19
</footnote>
<bodyText confidence="0.99989947368421">
embeddings as lexical-level features and tradi-
tional sentence-level features based on human de-
sign (Li et al., 2013). A CNN is similar to a
DMCNN, except that it uses a standard convolu-
tional neural network with max-pooling to capture
sentence-level features. By contrast, a DMCNN
uses the dynamic multi-pooling layer in the net-
work instead of the max-pooling layer in a CNN.
Moreover, to prove that a DMCNN could capture
more precise sentence-level features, especially
for those sentences with multiple events, we divide
the testing data into two parts according the event
number in a sentence (single event and multiple
events) and perform evaluations separately. Table
2 shows the proportion of sentences with multiple
events or a single event and the proportion of argu-
ments that attend one event or more events within
one sentence in our dataset. Table 3 shows the re-
sults.
</bodyText>
<table confidence="0.972044">
Stage 1/1 (%) 1/N (%)
Trigger 72.7 27.3
Argument 76.8 23.2
</table>
<tableCaption confidence="0.961268">
Table 2: The proportion of multiple events within
</tableCaption>
<bodyText confidence="0.976383235294118">
one sentence. 1/1 means that one sentence only
has one trigger or one argument plays a role in one
sentence; otherwise, 1/N is used.
Table 3 illustrates that the methods based on
convolutional neural networks (CNN and DM-
CNN) outperform Embeddings+T. It proves that
convolutional neural networks could be more ef-
fective than traditional human-design strategies
for sentence-level feature extraction. In table 3, for
all sentences, our method achieves improvements
of approximately 2.8% and 4.6% over the CNN.
The results prove the effectiveness of the dynamic
multi-pooling layer. Interestingly, the DMCNN
yields a 7.8% improvement for trigger classifica-
tion on the sentences with multiple events. This
improvement is larger than in sentences with a sin-
gle event. Similar observations can be made for
</bodyText>
<page confidence="0.99771">
173
</page>
<bodyText confidence="0.9996034">
the argument classification results. This demon-
strates that the proposed DMCNN can effectively
capture more valuable clues than the CNN with
max-pooling, especially when one sentence con-
tains more than one event.
</bodyText>
<table confidence="0.999421875">
Stage Method 1/1 1/N all
F1 F1 F1
Trigger Embedding+T 68.1 25.5 59.8
CNN 72.5 43.1 66.3
DMCNN 74.3 50.9 69.1
Argument Embedding+T 37.4 15.5 32.6
CNN 51.6 36.6 48.9
DMCNN 54.6 48.7 53.5
</table>
<tableCaption confidence="0.863621333333333">
Table 3: Comparison of the event extraction scores
obtained for the Traditional, CNN and DMCNN
models
</tableCaption>
<subsectionHeader confidence="0.9802655">
4.4 Effect of Word Embedding on Extracting
Lexical-Level Features
</subsectionHeader>
<bodyText confidence="0.999479875">
This subsection studies the effectiveness of our
word embedding for lexical features. For compar-
ison purposes, we select the baseline described by
Li et al. (2013) as the traditional method, which
uses traditional lexical features, such as n-grams,
POS tags and some entity information. In con-
trast, we only use word embedding as our lexical
feature. Moreover, to prove that word embedding
could capture more valuable semantics, especially
for those words in the test data that never appear
to be the same event type or argument role in the
training data, we divide the triggers and arguments
in the testing data into two parts (1: appearing in
testing data only, or 2: appearing in both testing
and training data with the same event type or argu-
ment role) and perform evaluations separately. For
triggers, 34.9% of the trigger words in the test data
never appear to be the same event type in the train-
ing data. This proportion is 83.1% for arguments.
The experimental results are shown in Table 4.
Table 4 illustrates that for all situations, our
method makes significant improvements com-
pared with the traditional lexical features in the
classification of both the trigger and argument.
For situation B, the lexical-level features extracted
from word embedding yield a 18.8% improvement
for trigger classification and an 8.5% improvement
for argument classification. This occurs because
the baseline only uses discrete features, so they
suffer from data sparsity and could not adequately
handle a situation in which a trigger or argument
does not appear in the training data.
</bodyText>
<table confidence="0.996258666666667">
Stage Method A B All
F1 F1 F1
Trigger Traditional 68.8 14.3 61.2
Ours 70.7 33.1 64.9
Argument Traditional 58.5 22.2 34.6
Ours 59.5 30.7 40.2
</table>
<tableCaption confidence="0.99627">
Table 4: Comparison of the results for the tradi-
</tableCaption>
<bodyText confidence="0.5931345">
tional lexical feature and our lexical feature. A de-
notes the triggers or arguments appearing in both
training and test datasets, and B indicates all other
cases.
</bodyText>
<subsectionHeader confidence="0.974759">
4.5 Lexical features vs. Sentence Features
</subsectionHeader>
<bodyText confidence="0.999369583333333">
To compare the effectiveness of different levels of
features, we extract events by using lexical fea-
tures and sentence features separately. The results
obtained using the DMCNN are shown in table
5. Interestingly, in the trigger-classification stage,
the lexical features play an effective role, whereas
the sentence features play a more important role in
the argument-classification stage. The best results
are achieved when we combine lexical-level and
sentence-level features. This observation demon-
strates that both of the two-level features are im-
portant for event extraction.
</bodyText>
<table confidence="0.9991264">
Feature Trigger Argument
F1 F1
Lexical 64.9 40.2
Sentence 63.8 50.7
Combine 69.1 53.5
</table>
<tableCaption confidence="0.931606">
Table 5: Comparison of the trigger-classification
score and argument-classification score obtained
by lexical-level features, sentence-level features
and a combination of both
</tableCaption>
<sectionHeader confidence="0.999906" genericHeader="evaluation">
5 Related Work
</sectionHeader>
<bodyText confidence="0.999860428571429">
Event extraction is one of important topics in NLP.
Many approaches have been explored for event ex-
traction. Nearly all of the ACE event extraction
use supervised paradigm. We further divide super-
vised approaches into feature-based methods and
structure-based methods.
In feature-based methods, a diverse set of strate-
gies has been exploited to convert classification
clues (such as sequences and parse trees) into
feature vectors. Ahn (2006) uses the lexical
features(e.g., full word, pos tag), syntactic fea-
tures (e.g., dependency features) and external-
knowledge features(WordNet) to extract the event.
Inspired by the hypothesis of “One Sense Per Dis-
</bodyText>
<page confidence="0.994421">
174
</page>
<bodyText confidence="0.999906615384615">
course”(Yarowsky, 1995), Ji and Grishman (2008)
combined global evidence from related documents
with local decisions for the event extraction. To
capture more clues from the texts, Gupta and Ji
(2009), Liao and Grishman (2010) and Hong et al.
(2011) proposed the cross-event and cross-entity
inference for the ACE event task. Although these
approaches achieve high performance, feature-
based methods suffer from the problem of select-
ing a suitable feature set when converting the clas-
sification clues into feature vectors.
In structure-based methods, researchers treat
event extraction as the task of predicting the struc-
ture of the event in a sentence. McClosky et al.
(2011) casted the problem of biomedical event ex-
traction as a dependency parsing problem. Li et
al. (2013) presented a joint framework for ACE
event extraction based on structured perceptron
with beam search. To use more information from
the sentence, Li et al. (2014) proposed to extract
entity mentions, relations and events in ACE task
based on the unified structure. These methods
yield relatively high performance. However, the
performance of these methods depend strongly on
the quality of the designed features and endure the
errors in the existing NLP tools.
</bodyText>
<sectionHeader confidence="0.999234" genericHeader="conclusions">
6 Conclusion
</sectionHeader>
<bodyText confidence="0.9999765">
This paper proposes a novel event extraction
method, which can automatically extract lexical-
level and sentence-level features from plain texts
without complicated NLP preprocessing. A word-
representation model is introduced to capture lex-
ical semantic clues and a dynamic multi-pooling
convolutional neural network (DMCNN) is de-
vised to encode sentence semantic clues. The ex-
perimental results prove the effectiveness of the
proposed method.
</bodyText>
<sectionHeader confidence="0.998363" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.9985015">
This work was supported by the National Basic
Research Program of China (No. 2014CB340503)
and the National Natural Science Foundation of
China (No. 61272332 and No. 61202329)
</bodyText>
<sectionHeader confidence="0.999418" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999927928571428">
David Ahn. 2006. The stages of event extraction. In
Proceedings of ACL, pages 1–8.
Marco Baroni, Georgiana Dinu, and Germ´an
Kruszewski. 2014. Dont count, predict! a
systematic comparison of context-counting vs.
context-predicting semantic vectors. In Proceedings
ofACL, pages 238–247.
Yoshua Bengio, R´ejean Ducharme, Pascal Vincent, and
Christian Jauvin. 2003. A neural probabilistic lan-
guage model. The Journal of Machine Learning Re-
search, 3:1137–1155.
Chen Chen and V Incent NG. 2012. Joint modeling for
chinese event extraction with rich linguistic features.
In Proceedings of COLING, pages 529–544.
Ronan Collobert, Jason Weston, L´eon Bottou, Michael
Karlen, Koray Kavukcuoglu, and Pavel Kuksa.
2011. Natural language processing (almost) from
scratch. The Journal of Machine Learning Re-
search, 12:2493–2537.
Dumitru Erhan, Yoshua Bengio, Aaron Courville,
Pierre-Antoine Manzagol, Pascal Vincent, and Samy
Bengio. 2010. Why does unsupervised pre-training
help deep learning? The Journal of Machine Learn-
ing Research, 11:625–660.
Prashant Gupta and Heng Ji. 2009. Predicting un-
known time arguments based on cross-event propa-
gation. In Proceedings ofACL-IJCNLP, pages 369–
372.
Geoffrey E Hinton, Nitish Srivastava, Alex Krizhevsky,
Ilya Sutskever, and Ruslan R Salakhutdinov. 2012.
Improving neural networks by preventing co-
adaptation of feature detectors. arXiv preprint
arXiv:1207.0580.
Yu Hong, Jianfeng Zhang, Bin Ma, Jianmin Yao,
Guodong Zhou, and Qiaoming Zhu. 2011. Using
cross-entity inference to improve event extraction.
In Proceedings ofACL-HLT, pages 1127–1136.
Heng Ji and Ralph Grishman. 2008. Refining event ex-
traction through cross-document inference. In Pro-
ceedings of ACL, pages 254–262.
Nal Kalchbrenner and Phil Blunsom. 2013. Recurrent
convolutional neural networks for discourse compo-
sitionality. arXiv preprint arXiv:1306.3584.
Nal Kalchbrenner, Edward Grefenstette, and Phil
Blunsom. 2014. A convolutional neural net-
work for modelling sentences. arXiv preprint
arXiv:1404.2188.
Yoon Kim. 2014. Convolutional neural net-
works for sentence classification. arXiv preprint
arXiv:1408.5882.
Siwei Lai, Liheng Xu, Kang Liu, and Jun Zhao. 2015.
Recurrent convolutional neural networks for text
classification. In Proceedings of AAAI.
Qi Li, Heng Ji, and Liang Huang. 2013. Joint event
extraction via structured prediction with global fea-
tures. In Proceedings ofACL, pages 73–82.
</reference>
<page confidence="0.984565">
175
</page>
<reference confidence="0.999591257142857">
Qi Li, Heng Ji, Yu Hong, and Sujian Li. 2014.
Constructing information networks using one sin-
gle model. In Proceedings of EMNLP, pages 1846–
1851.
Shasha Liao and Ralph Grishman. 2010. Using doc-
ument level cross-event inference to improve event
extraction. In Proceedings of ACL, pages 789–797.
David McClosky, Mihai Surdeanu, and Christopher D
Manning. 2011. Event extraction as dependency
parsing. In Proceedings of ACL-HLT, pages 1626–
1635.
Tomas Mikolov, Kai Chen, Greg Corrado, and Jef-
frey Dean. 2013a. Efficient estimation of word
representations in vector space. arXiv preprint
arXiv:1301.3781.
Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Cor-
rado, and Jeff Dean. 2013b. Distributed representa-
tions of words and phrases and their compositional-
ity. In Proceedings of NIPS, pages 3111–3119.
Frederic Morin and Yoshua Bengio. 2005. Hierarchi-
cal probabilistic neural network language model. In
Proceedings of AISTATS, pages 246–252.
Joseph Turian, Lev Ratinov, and Yoshua Bengio. 2010.
Word representations: a simple and general method
for semi-supervised learning. In Proceedings of
ACL, pages 384–394.
David Yarowsky. 1995. Unsupervised word sense dis-
ambiguation rivaling supervised methods. In Pro-
ceedings of ACL, pages 189–196.
Matthew D Zeiler. 2012. Adadelta: An adaptive learn-
ing rate method. arXiv preprint arXiv:1212.5701.
Daojian Zeng, Kang Liu, Siwei Lai, Guangyou Zhou,
and Jun Zhao. 2014. Relation classification via con-
volutional deep neural network. In Proceedings of
COLING, pages 2335–2344.
</reference>
<page confidence="0.998746">
176
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.463544">
<title confidence="0.9995435">Event Extraction via Dynamic Multi-Pooling Convolutional Neural Networks</title>
<author confidence="0.9934">Yubo Chen</author>
<author confidence="0.9934">Liheng Xu</author>
<author confidence="0.9934">Kang Liu</author>
<author confidence="0.9934">Daojian Zeng</author>
<author confidence="0.9934">Jun</author>
<affiliation confidence="0.99274">National Laboratory of Pattern</affiliation>
<address confidence="0.49412">Institute of Automation, Chinese Academy of Sciences, Beijing, 100190,</address>
<abstract confidence="0.998093766666667">Traditional approaches to the task of ACE event extraction primarily rely on elaborately designed features and complicated natural language processing (NLP) tools. These traditional approaches lack generalization, take a large amount of human effort and are prone to error propagation and data sparsity problems. This paper proposes a novel event-extraction method, which aims to automatically extract lexical-level and sentence-level features without using complicated NLP tools. We introduce a word-representation model to capture meaningful semantic regularities for words and adopt a framework based on a convolutional neural network (CNN) to capture sentence-level clues. However, CNN can only capture the most important information in a sentence and may miss valuable facts when considering multiple-event sentences. We propose a dynamic multi-pooling convolutional neural network (DMCNN), which uses a dynamic multi-pooling layer according to event triggers and arguments, to reserve more crucial information. The experimental results show that our approach significantly outperforms other state-of-the-art methods.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>David Ahn</author>
</authors>
<title>The stages of event extraction.</title>
<date>2006</date>
<booktitle>In Proceedings of ACL,</booktitle>
<pages>1--8</pages>
<contexts>
<context position="14050" citStr="Ahn, 2006" startWordPosition="2196" endWordPosition="2197"> trigger or candidate argument in the argument classification. Thus, we proposed the PF, which is defined as the relative distance of the current word to the predicted trigger or candidate argument. For example, in S3, the relative distances of tank to the candidate argument cameraman is 5. To encode the position feature, each distance value is also represented by an embedding vector. Similar to word embedding, Distance Values are randomly initialized and optimized through back propagation. • Event-type feature (EF): The event type of a current trigger is valuable for argument classification (Ahn, 2006; Hong et al., 2011; Liao and Grishman, 2010; Li et al., 2013), so we encode event type predicted in the trigger classification stage as an important clue for the DMCNN, as in the PF. Figure 2 assumes that word embedding has size d,,, = 4, position embedding has size dp = 1 and event-type embedding has size de = 1. Let xi E Rd be the d-dimensional vector representation corresponding to the i-th word in the sentence, where d = d,,, + dp * 2 + de. A sentence of length n is represented as follows: x1:n = x1 ® x2 ® ... ® xn (3) where ® is the concatenation operator. Thus, combined word embedding, </context>
<context position="30970" citStr="Ahn (2006)" startWordPosition="5037" endWordPosition="5038">the trigger-classification score and argument-classification score obtained by lexical-level features, sentence-level features and a combination of both 5 Related Work Event extraction is one of important topics in NLP. Many approaches have been explored for event extraction. Nearly all of the ACE event extraction use supervised paradigm. We further divide supervised approaches into feature-based methods and structure-based methods. In feature-based methods, a diverse set of strategies has been exploited to convert classification clues (such as sequences and parse trees) into feature vectors. Ahn (2006) uses the lexical features(e.g., full word, pos tag), syntactic features (e.g., dependency features) and externalknowledge features(WordNet) to extract the event. Inspired by the hypothesis of “One Sense Per Dis174 course”(Yarowsky, 1995), Ji and Grishman (2008) combined global evidence from related documents with local decisions for the event extraction. To capture more clues from the texts, Gupta and Ji (2009), Liao and Grishman (2010) and Hong et al. (2011) proposed the cross-event and cross-entity inference for the ACE event task. Although these approaches achieve high performance, feature</context>
</contexts>
<marker>Ahn, 2006</marker>
<rawString>David Ahn. 2006. The stages of event extraction. In Proceedings of ACL, pages 1–8.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Marco Baroni</author>
<author>Georgiana Dinu</author>
<author>Germ´an Kruszewski</author>
</authors>
<title>Dont count, predict! a systematic comparison of context-counting vs. context-predicting semantic vectors.</title>
<date>2014</date>
<booktitle>In Proceedings ofACL,</booktitle>
<pages>238--247</pages>
<contexts>
<context position="11336" citStr="Baroni et al., 2014" startWordPosition="1748" endWordPosition="1751">capturing the meaningful semantic regularities of words. This paper uses unsupervised pre-trained word embedding as the source of base features. We select the word embeddings of candidate words (candidate trigger, candidate argument) and the context tokens (left and right tokens of the candidate words). Then, all of these word embeddings are concatenated into the lexical-level features vector L to represent the lexical-level features in argument classification. In this work, we use the Skip-gram model to pre-train the word embedding. This model is the state-of-the-art model in many NLP tasks (Baroni et al., 2014). The Skip-gram model trains the embeddings of words w1, w2...wm by maximizing the average log probability, log p(wt+j|wt) (1) where c is the size of the training window. Basically, p(wt+j|wt) is defined as, Emw=1 exp(e�Twet) (2) 0 where m is the vocabulary of the unlabeled text. ei is another embedding for ei, see Morin and Bengio (2005) for details. � −c≤j≤c,j=&apos;40 1 m �m t=1 p(wt+j|wt) = etexp( +jet) 169 maac(C&apos;&apos;) maac(C&apos;O maac(C&apos;�) Figure 2: The architecture for the stage of argument classification in the event extraction. It illustrates the processing of one instance with the predict trigg</context>
</contexts>
<marker>Baroni, Dinu, Kruszewski, 2014</marker>
<rawString>Marco Baroni, Georgiana Dinu, and Germ´an Kruszewski. 2014. Dont count, predict! a systematic comparison of context-counting vs. context-predicting semantic vectors. In Proceedings ofACL, pages 238–247.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yoshua Bengio</author>
<author>R´ejean Ducharme</author>
<author>Pascal Vincent</author>
<author>Christian Jauvin</author>
</authors>
<title>A neural probabilistic language model.</title>
<date>2003</date>
<journal>The Journal of Machine Learning Research,</journal>
<pages>3--1137</pages>
<contexts>
<context position="6285" citStr="Bengio et al., 2003" startWordPosition="974" endWordPosition="977"> Hotel”, which is important for predicting the Attack event and valuable for attaching cameraman to fired as an Target argument. In our experiments, we found that such multiple-event sentences comprise 27.3% of our dataset, which is a phenomenon we cannot ignore. In this paper, we propose a dynamic multipooling convolutional neural network (DMCNN) to address the problems stated above. To capture lexical-level clues and reduce human effort, we introduce a word-representation model (Mikolov et al., 2013b), which has been shown to be able to capture the meaningful semantic regularities of words (Bengio et al., 2003; Erhan et al., 2010; Mikolov et al., 2013a). To capture sentence-level clues without using complicated NLP tools, and to reserve information more comprehensively, we devise a dynamic multi-pooling layer for CNN, which returns the maximum value in each part of the sentence according to event triggers and arguments. In summary, the contributions of this paper are as follows: • We present a novel framework for event extraction, which can automatically induce lexical-level and sentence-level features from plain texts without complicated NLP preprocessing. • We devise a dynamic multi-pooling convo</context>
</contexts>
<marker>Bengio, Ducharme, Vincent, Jauvin, 2003</marker>
<rawString>Yoshua Bengio, R´ejean Ducharme, Pascal Vincent, and Christian Jauvin. 2003. A neural probabilistic language model. The Journal of Machine Learning Research, 3:1137–1155.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Chen Chen</author>
<author>V Incent NG</author>
</authors>
<title>Joint modeling for chinese event extraction with rich linguistic features.</title>
<date>2012</date>
<booktitle>In Proceedings of COLING,</booktitle>
<pages>529--544</pages>
<marker>Chen, NG, 2012</marker>
<rawString>Chen Chen and V Incent NG. 2012. Joint modeling for chinese event extraction with rich linguistic features. In Proceedings of COLING, pages 529–544.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ronan Collobert</author>
<author>Jason Weston</author>
<author>L´eon Bottou</author>
<author>Michael Karlen</author>
<author>Koray Kavukcuoglu</author>
<author>Pavel Kuksa</author>
</authors>
<title>Natural language processing (almost) from scratch.</title>
<date>2011</date>
<journal>The Journal of Machine Learning Research,</journal>
<pages>12--2493</pages>
<contexts>
<context position="4980" citStr="Collobert et al., 2011" startWordPosition="761" endWordPosition="765">ng traditional dependency features. In addition, extracting such features depends heavily on the performance of pre-existing NLP systems, which could suffer from error propagation. S3: In Baghdad, a cameraman died when an American tank fired on the Palestine Hotel. To correctly attach cameraman to fired as a Target argument, we must exploit internal semantics over the entire sentence such that the Attack event results in Die event. Recent improvements of convolutional neural networks (CNNs) have been proven to be efficient for capturing syntactic and semantics between words within a sentence (Collobert et al., 2011; Kalchbrenner and Blunsom, 2013; Zeng et al., 2014) for NLP tasks. CNNs typically use a max-pooling layer, which applies a max operation over the representation of an entire sentence to capture the most useful information. However, in event extraction, one sentence may contain two or more events, and these events may share the argument with different roles. For example, there are two events in S3, namely, the Die event and Attack event. If we use a traditional max-pooling layer and only keep the most important information to represent the sentence, we may obtain the information that depicts “</context>
<context position="12177" citStr="Collobert et al., 2011" startWordPosition="1883" endWordPosition="1886">e�Twet) (2) 0 where m is the vocabulary of the unlabeled text. ei is another embedding for ei, see Morin and Bengio (2005) for details. � −c≤j≤c,j=&apos;40 1 m �m t=1 p(wt+j|wt) = etexp( +jet) 169 maac(C&apos;&apos;) maac(C&apos;O maac(C&apos;�) Figure 2: The architecture for the stage of argument classification in the event extraction. It illustrates the processing of one instance with the predict trigger fired and the candidate argument cameraman. 3.2 Extracting Sentence-Level Features Using a DMCNN The CNN, with max-pooling layers, is a good choice to capture the semantics of long-distance words within a sentence (Collobert et al., 2011). However, as noted in the section 1, traditional CNN is incapable of addressing the event extraction problem. Because a sentence may contain more than one event, using only the most important information to represent a sentence, as in the traditional CNN, will miss valuable clues. To resolve this problem, we propose a DMCNN to extract the sentence-level features. The DMCNN uses a dynamic multi-pooling layer to obtain a maximum value for each part of a sentence, which is split by event triggers and event arguments. Thus, the DMCNN is expected to capture more valuable clues compared to traditio</context>
<context position="16055" citStr="Collobert et al., 2011" startWordPosition="2569" endWordPosition="2573">x1:h, x2:h+1, ..., xn−h+1:n to produce a feature map ci where the index i ranges from 1 to n − h + 1. We have described the process of how one feature map is extracted from one filter. To capture different features, it usually use multiple filters in the convolution. Assuming that we use m filters W = w1, w2, ..., wm, the convolution operation can be expressed as: cji = f(wj &apos; xi:i+h−1 + bj) (5) where j ranges from 1 to m. The convolution result is a matrix C E Rm×(n−h+1). 3.2.3 Dynamic Multi-Pooling To extract the most important features (max value) within each feature map, traditional CNNs (Collobert et al., 2011; Kim, 2014; Zeng et al., 2014) take one feature map as a pool and only get one max value for each feature map. However, single max-pooling is not sufficient for event extraction. Because in the task of this paper, one sentence may contain two or more events, and one argument candidate may play a different role with a different trigger. To make an accurate prediction, it is necessary to capture the most valuable information with regard to the change of the candidate words. Thus, we split each feature map into three parts according to the candidate argument and predicted trigger in the argument</context>
</contexts>
<marker>Collobert, Weston, Bottou, Karlen, Kavukcuoglu, Kuksa, 2011</marker>
<rawString>Ronan Collobert, Jason Weston, L´eon Bottou, Michael Karlen, Koray Kavukcuoglu, and Pavel Kuksa. 2011. Natural language processing (almost) from scratch. The Journal of Machine Learning Research, 12:2493–2537.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Dumitru Erhan</author>
<author>Yoshua Bengio</author>
<author>Aaron Courville</author>
<author>Pierre-Antoine Manzagol</author>
<author>Pascal Vincent</author>
<author>Samy Bengio</author>
</authors>
<title>Why does unsupervised pre-training help deep learning?</title>
<date>2010</date>
<journal>The Journal of Machine Learning Research,</journal>
<pages>11--625</pages>
<contexts>
<context position="6305" citStr="Erhan et al., 2010" startWordPosition="978" endWordPosition="981">ortant for predicting the Attack event and valuable for attaching cameraman to fired as an Target argument. In our experiments, we found that such multiple-event sentences comprise 27.3% of our dataset, which is a phenomenon we cannot ignore. In this paper, we propose a dynamic multipooling convolutional neural network (DMCNN) to address the problems stated above. To capture lexical-level clues and reduce human effort, we introduce a word-representation model (Mikolov et al., 2013b), which has been shown to be able to capture the meaningful semantic regularities of words (Bengio et al., 2003; Erhan et al., 2010; Mikolov et al., 2013a). To capture sentence-level clues without using complicated NLP tools, and to reserve information more comprehensively, we devise a dynamic multi-pooling layer for CNN, which returns the maximum value in each part of the sentence according to event triggers and arguments. In summary, the contributions of this paper are as follows: • We present a novel framework for event extraction, which can automatically induce lexical-level and sentence-level features from plain texts without complicated NLP preprocessing. • We devise a dynamic multi-pooling convolutional neural netw</context>
<context position="10615" citStr="Erhan et al. (2010)" startWordPosition="1639" endWordPosition="1642">fidence score for each argument role candidate. 3.1 Word Embedding Learning and Lexical-Level Feature Representation Lexical-level features serve as important clues for event extraction (Hong et al., 2011; Li et al., 2013). Traditional lexical-level features primarily include lemma, synonyms and POS tag of the candidate words. The quality of such features depends strongly on the results of existing NLP tools and human ingenuity. Additionally, the traditional features remain unsatisfactory for capturing the semantics of words, which are important in event extraction, as showed in S1 and S2. As Erhan et al. (2010) reported, word embeddings learned from a significant amount of unlabeled data are more powerful for capturing the meaningful semantic regularities of words. This paper uses unsupervised pre-trained word embedding as the source of base features. We select the word embeddings of candidate words (candidate trigger, candidate argument) and the context tokens (left and right tokens of the candidate words). Then, all of these word embeddings are concatenated into the lexical-level features vector L to represent the lexical-level features in argument classification. In this work, we use the Skip-gra</context>
</contexts>
<marker>Erhan, Bengio, Courville, Manzagol, Vincent, Bengio, 2010</marker>
<rawString>Dumitru Erhan, Yoshua Bengio, Aaron Courville, Pierre-Antoine Manzagol, Pascal Vincent, and Samy Bengio. 2010. Why does unsupervised pre-training help deep learning? The Journal of Machine Learning Research, 11:625–660.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Prashant Gupta</author>
<author>Heng Ji</author>
</authors>
<title>Predicting unknown time arguments based on cross-event propagation.</title>
<date>2009</date>
<booktitle>In Proceedings ofACL-IJCNLP,</booktitle>
<pages>369--372</pages>
<contexts>
<context position="31385" citStr="Gupta and Ji (2009)" startWordPosition="5097" endWordPosition="5100">s and structure-based methods. In feature-based methods, a diverse set of strategies has been exploited to convert classification clues (such as sequences and parse trees) into feature vectors. Ahn (2006) uses the lexical features(e.g., full word, pos tag), syntactic features (e.g., dependency features) and externalknowledge features(WordNet) to extract the event. Inspired by the hypothesis of “One Sense Per Dis174 course”(Yarowsky, 1995), Ji and Grishman (2008) combined global evidence from related documents with local decisions for the event extraction. To capture more clues from the texts, Gupta and Ji (2009), Liao and Grishman (2010) and Hong et al. (2011) proposed the cross-event and cross-entity inference for the ACE event task. Although these approaches achieve high performance, featurebased methods suffer from the problem of selecting a suitable feature set when converting the classification clues into feature vectors. In structure-based methods, researchers treat event extraction as the task of predicting the structure of the event in a sentence. McClosky et al. (2011) casted the problem of biomedical event extraction as a dependency parsing problem. Li et al. (2013) presented a joint framew</context>
</contexts>
<marker>Gupta, Ji, 2009</marker>
<rawString>Prashant Gupta and Heng Ji. 2009. Predicting unknown time arguments based on cross-event propagation. In Proceedings ofACL-IJCNLP, pages 369– 372.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Geoffrey E Hinton</author>
<author>Nitish Srivastava</author>
<author>Alex Krizhevsky</author>
<author>Ilya Sutskever</author>
<author>Ruslan R Salakhutdinov</author>
</authors>
<title>Improving neural networks by preventing coadaptation of feature detectors. arXiv preprint arXiv:1207.0580.</title>
<date>2012</date>
<contexts>
<context position="18078" citStr="Hinton et al., 2012" startWordPosition="2936" endWordPosition="2939">and sentencelevel features mentioned above are concatenated into a single vector F = [L, P]. To compute the confidence of each argument role, the feature vector F E R3m+dl, where m is the number of the feature map and dl is the dimension of the lexicallevel features, is fed into a classifier. O = WsF + bs (7) Ws E Rn1×(3m+dl) is the transformation matrix and O E Rn1 is the final output of the network, where n1 is equal to the number of the argument role including the “None role” label for the candidate argument which don’t play any role in the event. For regularization, we also employ dropout(Hinton et al., 2012) on the penultimate layer, which can prevent the co-adaptation of hidden units by randomly dropping out a proportion p of the hidden units during forward and backpropagation. 3.4 Training We define all of the parameters for the stage of argument classification to be trained as 0 = (E, PF1, PF2, EF, W, b, WS, bs). Specifically, E is the word embedding, PF1 and PF2 are the position embedding, EF is the embedding of the event type, W and b are the parameter of the filter, Ws and bs are all of the parameters of the output layer. Given an input example s, the network with parameter 0 outputs the ve</context>
</contexts>
<marker>Hinton, Srivastava, Krizhevsky, Sutskever, Salakhutdinov, 2012</marker>
<rawString>Geoffrey E Hinton, Nitish Srivastava, Alex Krizhevsky, Ilya Sutskever, and Ruslan R Salakhutdinov. 2012. Improving neural networks by preventing coadaptation of feature detectors. arXiv preprint arXiv:1207.0580.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yu Hong</author>
<author>Jianfeng Zhang</author>
<author>Bin Ma</author>
<author>Jianmin Yao</author>
<author>Guodong Zhou</author>
<author>Qiaoming Zhu</author>
</authors>
<title>Using cross-entity inference to improve event extraction.</title>
<date>2011</date>
<booktitle>In Proceedings ofACL-HLT,</booktitle>
<pages>1127--1136</pages>
<contexts>
<context position="1697" citStr="Hong et al., 2011" startWordPosition="234" endWordPosition="237">le facts when considering multiple-event sentences. We propose a dynamic multi-pooling convolutional neural network (DMCNN), which uses a dynamic multi-pooling layer according to event triggers and arguments, to reserve more crucial information. The experimental results show that our approach significantly outperforms other state-of-the-art methods. 1 Introduction Event extraction is an important and challenging task in Information Extraction (IE), which aims to discover event triggers with specific types and their arguments. Current state-of-the-art methods (Li et al., 2014; Li et al., 2013; Hong et al., 2011; Liao and Grishman, 2010; Ji and Grishman, 2008) often use a set of elaborately designed features that are extracted by textual analysis and linguistic knowledge. In general, we can divide the features into two categories: lexical features and contextual features. Lexical features contain part-of-speech tags (POS), entity information, and morphology features (e.g., token, lemma, etc.), which aim to capture semantics or the background knowledge of words. For example, consider the following sentence with an ambiguous word beats: S1: Obama beats McCain. S2: Tyson beats his opponent. In S1, beats</context>
<context position="8610" citStr="Hong et al., 2011" startWordPosition="1340" endWordPosition="1343">nglish text document, an event extraction system should predict event triggers with specific subtypes and their arguments for each sentence. The upper side of figure 1 depicts the event triggers and their arguments for S3 in Section 1. ACE defines 8 event types and 33 subtypes, such as Attack or Elect. Although event extraction depends on name identification and entity mention co-reference, it is another difficult task in ACE evaluation and not the focus in the event extraction task. Thus, in this paper, we directly leverage the entity label provided by the ACE, following most previous works (Hong et al., 2011; Liao and Grishman, 2010; Ji and Grishman, 2008). 3 Methodology In this paper, event extraction is formulated as a two-stage, multi-class classification via dynamic multi-pooling convolutional neural networks with the automatically learned features. The first stage is called trigger classification, in which we use a DMCNN to classify each word in a sentence to identify trigger words. If one sentence has triggers, the second stage is conducted, which applies a similar DMCNN to assign arguments to triggers and align the roles of the arguments. We call this argument classification. Because the s</context>
<context position="10200" citStr="Hong et al., 2011" startWordPosition="1572" endWordPosition="1575">r components: (i) word-embedding learning, which reveals the embedding vectors of words in an unsupervised manner; (ii) lexical-level feature representation, which directly uses embedding vectors of words to capture lexical clues; (iii) sentence-level feature extraction, which proposes a DMCNN to learn the compositional semantic features of sentences; and (iv) argument classifier output, which calculates a confidence score for each argument role candidate. 3.1 Word Embedding Learning and Lexical-Level Feature Representation Lexical-level features serve as important clues for event extraction (Hong et al., 2011; Li et al., 2013). Traditional lexical-level features primarily include lemma, synonyms and POS tag of the candidate words. The quality of such features depends strongly on the results of existing NLP tools and human ingenuity. Additionally, the traditional features remain unsatisfactory for capturing the semantics of words, which are important in event extraction, as showed in S1 and S2. As Erhan et al. (2010) reported, word embeddings learned from a significant amount of unlabeled data are more powerful for capturing the meaningful semantic regularities of words. This paper uses unsupervise</context>
<context position="14069" citStr="Hong et al., 2011" startWordPosition="2198" endWordPosition="2201"> candidate argument in the argument classification. Thus, we proposed the PF, which is defined as the relative distance of the current word to the predicted trigger or candidate argument. For example, in S3, the relative distances of tank to the candidate argument cameraman is 5. To encode the position feature, each distance value is also represented by an embedding vector. Similar to word embedding, Distance Values are randomly initialized and optimized through back propagation. • Event-type feature (EF): The event type of a current trigger is valuable for argument classification (Ahn, 2006; Hong et al., 2011; Liao and Grishman, 2010; Li et al., 2013), so we encode event type predicted in the trigger classification stage as an important clue for the DMCNN, as in the PF. Figure 2 assumes that word embedding has size d,,, = 4, position embedding has size dp = 1 and event-type embedding has size de = 1. Let xi E Rd be the d-dimensional vector representation corresponding to the i-th word in the sentence, where d = d,,, + dp * 2 + de. A sentence of length n is represented as follows: x1:n = x1 ® x2 ® ... ® xn (3) where ® is the concatenation operator. Thus, combined word embedding, position embedding </context>
<context position="20473" citStr="Hong et al. (2011)" startWordPosition="3355" endWordPosition="3358"> sentence level, we use the same CWF as does in argument classification, but we only use the position of the candidate trigger to embed the position feature. Furthermore, instead of splitting the sentence into three parts, the sentence is split into two parts by a candidate trigger. Except for the above change in the features and model, we classify a trigger as the classification of an argument. Both stages form the framework of the event extraction. 4 Experiments 4.1 Dataset and Evaluation Metric We utilized the ACE 2005 corpus as our dataset. For comparison, as the same as Li et al. (2013), Hong et al. (2011) and Liao and Grishman (2010), we used the same test set with 40 newswire articles and the same development set with 30 other documents randomly selected from different genres and the rest 529 documents are used for training. Similar to previous work (Li et al., 2013; Hong et al., 2011; Liao and Grishman, 2010; Ji and Grishman, 2008), we use the following criteria to judge the correctness of each predicted event mention: • An argument is correctly identified if its event subtype and offsets match those of any of the reference argument mentions. • An argument is correctly classified if its even</context>
<context position="21757" citStr="Hong et al. (2011)" startWordPosition="3565" endWordPosition="3568">erence argument mentions. Finally we use Precision (P), Recall (R) and F measure (F1) as the evaluation metrics. 4.2 Our Method vs. State-of-the-art Methods We select the following state-of-the-art methods for comparison. 1) Li’s baseline is the feature-based system proposed by Li et al. (2013), which only employs human-designed lexical features, basic features and syntactic features. 2) Liao’s cross-event is the method proposed by Liao and Grishman (2010), which uses documentlevel information to improve the performance of ACE event extraction. 3) Hong’s cross-entity is the method proposed by Hong et al. (2011), which extracts event by using cross-entity inference. To the best of our knowledge, it is the best-reported feature-based system in the literature based on gold standards argument candidates. 4) Li’s structure is the method proposed by Li et al. (2013), which extracts events based on structure prediction. It is the best-reported structurebased system. Following Li et al. (2013), we tuned the model parameters on the development through grid search. Moreover, in different stages of event extraction, we adopted different parameters in the DMCNN. Specifically, in the trigger classification, we s</context>
<context position="31434" citStr="Hong et al. (2011)" startWordPosition="5106" endWordPosition="5109">thods, a diverse set of strategies has been exploited to convert classification clues (such as sequences and parse trees) into feature vectors. Ahn (2006) uses the lexical features(e.g., full word, pos tag), syntactic features (e.g., dependency features) and externalknowledge features(WordNet) to extract the event. Inspired by the hypothesis of “One Sense Per Dis174 course”(Yarowsky, 1995), Ji and Grishman (2008) combined global evidence from related documents with local decisions for the event extraction. To capture more clues from the texts, Gupta and Ji (2009), Liao and Grishman (2010) and Hong et al. (2011) proposed the cross-event and cross-entity inference for the ACE event task. Although these approaches achieve high performance, featurebased methods suffer from the problem of selecting a suitable feature set when converting the classification clues into feature vectors. In structure-based methods, researchers treat event extraction as the task of predicting the structure of the event in a sentence. McClosky et al. (2011) casted the problem of biomedical event extraction as a dependency parsing problem. Li et al. (2013) presented a joint framework for ACE event extraction based on structured </context>
</contexts>
<marker>Hong, Zhang, Ma, Yao, Zhou, Zhu, 2011</marker>
<rawString>Yu Hong, Jianfeng Zhang, Bin Ma, Jianmin Yao, Guodong Zhou, and Qiaoming Zhu. 2011. Using cross-entity inference to improve event extraction. In Proceedings ofACL-HLT, pages 1127–1136.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Heng Ji</author>
<author>Ralph Grishman</author>
</authors>
<title>Refining event extraction through cross-document inference.</title>
<date>2008</date>
<booktitle>In Proceedings of ACL,</booktitle>
<pages>254--262</pages>
<contexts>
<context position="1746" citStr="Ji and Grishman, 2008" startWordPosition="242" endWordPosition="245">tences. We propose a dynamic multi-pooling convolutional neural network (DMCNN), which uses a dynamic multi-pooling layer according to event triggers and arguments, to reserve more crucial information. The experimental results show that our approach significantly outperforms other state-of-the-art methods. 1 Introduction Event extraction is an important and challenging task in Information Extraction (IE), which aims to discover event triggers with specific types and their arguments. Current state-of-the-art methods (Li et al., 2014; Li et al., 2013; Hong et al., 2011; Liao and Grishman, 2010; Ji and Grishman, 2008) often use a set of elaborately designed features that are extracted by textual analysis and linguistic knowledge. In general, we can divide the features into two categories: lexical features and contextual features. Lexical features contain part-of-speech tags (POS), entity information, and morphology features (e.g., token, lemma, etc.), which aim to capture semantics or the background knowledge of words. For example, consider the following sentence with an ambiguous word beats: S1: Obama beats McCain. S2: Tyson beats his opponent. In S1, beats is a trigger of type Elect. However, in S2, beat</context>
<context position="8659" citStr="Ji and Grishman, 2008" startWordPosition="1348" endWordPosition="1351">stem should predict event triggers with specific subtypes and their arguments for each sentence. The upper side of figure 1 depicts the event triggers and their arguments for S3 in Section 1. ACE defines 8 event types and 33 subtypes, such as Attack or Elect. Although event extraction depends on name identification and entity mention co-reference, it is another difficult task in ACE evaluation and not the focus in the event extraction task. Thus, in this paper, we directly leverage the entity label provided by the ACE, following most previous works (Hong et al., 2011; Liao and Grishman, 2010; Ji and Grishman, 2008). 3 Methodology In this paper, event extraction is formulated as a two-stage, multi-class classification via dynamic multi-pooling convolutional neural networks with the automatically learned features. The first stage is called trigger classification, in which we use a DMCNN to classify each word in a sentence to identify trigger words. If one sentence has triggers, the second stage is conducted, which applies a similar DMCNN to assign arguments to triggers and align the roles of the arguments. We call this argument classification. Because the second stage is more complicated, we first describ</context>
<context position="20808" citStr="Ji and Grishman, 2008" startWordPosition="3415" endWordPosition="3418"> model, we classify a trigger as the classification of an argument. Both stages form the framework of the event extraction. 4 Experiments 4.1 Dataset and Evaluation Metric We utilized the ACE 2005 corpus as our dataset. For comparison, as the same as Li et al. (2013), Hong et al. (2011) and Liao and Grishman (2010), we used the same test set with 40 newswire articles and the same development set with 30 other documents randomly selected from different genres and the rest 529 documents are used for training. Similar to previous work (Li et al., 2013; Hong et al., 2011; Liao and Grishman, 2010; Ji and Grishman, 2008), we use the following criteria to judge the correctness of each predicted event mention: • An argument is correctly identified if its event subtype and offsets match those of any of the reference argument mentions. • An argument is correctly classified if its event subtype, offsets and argument role match those of any of the reference argument mentions. Finally we use Precision (P), Recall (R) and F measure (F1) as the evaluation metrics. 4.2 Our Method vs. State-of-the-art Methods We select the following state-of-the-art methods for comparison. 1) Li’s baseline is the feature-based system pr</context>
<context position="31232" citStr="Ji and Grishman (2008)" startWordPosition="5073" endWordPosition="5076">ored for event extraction. Nearly all of the ACE event extraction use supervised paradigm. We further divide supervised approaches into feature-based methods and structure-based methods. In feature-based methods, a diverse set of strategies has been exploited to convert classification clues (such as sequences and parse trees) into feature vectors. Ahn (2006) uses the lexical features(e.g., full word, pos tag), syntactic features (e.g., dependency features) and externalknowledge features(WordNet) to extract the event. Inspired by the hypothesis of “One Sense Per Dis174 course”(Yarowsky, 1995), Ji and Grishman (2008) combined global evidence from related documents with local decisions for the event extraction. To capture more clues from the texts, Gupta and Ji (2009), Liao and Grishman (2010) and Hong et al. (2011) proposed the cross-event and cross-entity inference for the ACE event task. Although these approaches achieve high performance, featurebased methods suffer from the problem of selecting a suitable feature set when converting the classification clues into feature vectors. In structure-based methods, researchers treat event extraction as the task of predicting the structure of the event in a sent</context>
</contexts>
<marker>Ji, Grishman, 2008</marker>
<rawString>Heng Ji and Ralph Grishman. 2008. Refining event extraction through cross-document inference. In Proceedings of ACL, pages 254–262.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nal Kalchbrenner</author>
<author>Phil Blunsom</author>
</authors>
<title>Recurrent convolutional neural networks for discourse compositionality. arXiv preprint arXiv:1306.3584.</title>
<date>2013</date>
<contexts>
<context position="5012" citStr="Kalchbrenner and Blunsom, 2013" startWordPosition="766" endWordPosition="769">y features. In addition, extracting such features depends heavily on the performance of pre-existing NLP systems, which could suffer from error propagation. S3: In Baghdad, a cameraman died when an American tank fired on the Palestine Hotel. To correctly attach cameraman to fired as a Target argument, we must exploit internal semantics over the entire sentence such that the Attack event results in Die event. Recent improvements of convolutional neural networks (CNNs) have been proven to be efficient for capturing syntactic and semantics between words within a sentence (Collobert et al., 2011; Kalchbrenner and Blunsom, 2013; Zeng et al., 2014) for NLP tasks. CNNs typically use a max-pooling layer, which applies a max operation over the representation of an entire sentence to capture the most useful information. However, in event extraction, one sentence may contain two or more events, and these events may share the argument with different roles. For example, there are two events in S3, namely, the Die event and Attack event. If we use a traditional max-pooling layer and only keep the most important information to represent the sentence, we may obtain the information that depicts “a cameraman died” but miss the i</context>
</contexts>
<marker>Kalchbrenner, Blunsom, 2013</marker>
<rawString>Nal Kalchbrenner and Phil Blunsom. 2013. Recurrent convolutional neural networks for discourse compositionality. arXiv preprint arXiv:1306.3584.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nal Kalchbrenner</author>
<author>Edward Grefenstette</author>
<author>Phil Blunsom</author>
</authors>
<title>A convolutional neural network for modelling sentences. arXiv preprint arXiv:1404.2188.</title>
<date>2014</date>
<contexts>
<context position="13190" citStr="Kalchbrenner et al. (2014)" startWordPosition="2047" endWordPosition="2050">amic multi-pooling layer to obtain a maximum value for each part of a sentence, which is split by event triggers and event arguments. Thus, the DMCNN is expected to capture more valuable clues compared to traditional CNN methods. 3.2.1 Input This subsection illustrates the input needed for a DMCNN to extract sentence-level features. The semantic interactions between the predicted trigger words and argument candidates are crucial for argument classification. Therefore, we propose three types of input that the DMCNN uses to capture these important clues: • Context-word feature (CWF): Similar to Kalchbrenner et al. (2014) and Collobert et al. (2011), we take all the words of the whole sentence as the context. CWF is the vector of each word token transformed by looking up word embeddings. • Position feature (PF): It is necessary to specify which words are the predicted trigger or candidate argument in the argument classification. Thus, we proposed the PF, which is defined as the relative distance of the current word to the predicted trigger or candidate argument. For example, in S3, the relative distances of tank to the candidate argument cameraman is 5. To encode the position feature, each distance value is al</context>
</contexts>
<marker>Kalchbrenner, Grefenstette, Blunsom, 2014</marker>
<rawString>Nal Kalchbrenner, Edward Grefenstette, and Phil Blunsom. 2014. A convolutional neural network for modelling sentences. arXiv preprint arXiv:1404.2188.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yoon Kim</author>
</authors>
<title>Convolutional neural networks for sentence classification. arXiv preprint arXiv:1408.5882.</title>
<date>2014</date>
<contexts>
<context position="16066" citStr="Kim, 2014" startWordPosition="2574" endWordPosition="2575">1:n to produce a feature map ci where the index i ranges from 1 to n − h + 1. We have described the process of how one feature map is extracted from one filter. To capture different features, it usually use multiple filters in the convolution. Assuming that we use m filters W = w1, w2, ..., wm, the convolution operation can be expressed as: cji = f(wj &apos; xi:i+h−1 + bj) (5) where j ranges from 1 to m. The convolution result is a matrix C E Rm×(n−h+1). 3.2.3 Dynamic Multi-Pooling To extract the most important features (max value) within each feature map, traditional CNNs (Collobert et al., 2011; Kim, 2014; Zeng et al., 2014) take one feature map as a pool and only get one max value for each feature map. However, single max-pooling is not sufficient for event extraction. Because in the task of this paper, one sentence may contain two or more events, and one argument candidate may play a different role with a different trigger. To make an accurate prediction, it is necessary to capture the most valuable information with regard to the change of the candidate words. Thus, we split each feature map into three parts according to the candidate argument and predicted trigger in the argument classifica</context>
</contexts>
<marker>Kim, 2014</marker>
<rawString>Yoon Kim. 2014. Convolutional neural networks for sentence classification. arXiv preprint arXiv:1408.5882.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Siwei Lai</author>
<author>Liheng Xu</author>
<author>Kang Liu</author>
<author>Jun Zhao</author>
</authors>
<title>Recurrent convolutional neural networks for text classification.</title>
<date>2015</date>
<booktitle>In Proceedings of AAAI.</booktitle>
<marker>Lai, Xu, Liu, Zhao, 2015</marker>
<rawString>Siwei Lai, Liheng Xu, Kang Liu, and Jun Zhao. 2015. Recurrent convolutional neural networks for text classification. In Proceedings of AAAI.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Qi Li</author>
<author>Heng Ji</author>
<author>Liang Huang</author>
</authors>
<title>Joint event extraction via structured prediction with global features.</title>
<date>2013</date>
<booktitle>In Proceedings ofACL,</booktitle>
<pages>73--82</pages>
<contexts>
<context position="1678" citStr="Li et al., 2013" startWordPosition="230" endWordPosition="233">d may miss valuable facts when considering multiple-event sentences. We propose a dynamic multi-pooling convolutional neural network (DMCNN), which uses a dynamic multi-pooling layer according to event triggers and arguments, to reserve more crucial information. The experimental results show that our approach significantly outperforms other state-of-the-art methods. 1 Introduction Event extraction is an important and challenging task in Information Extraction (IE), which aims to discover event triggers with specific types and their arguments. Current state-of-the-art methods (Li et al., 2014; Li et al., 2013; Hong et al., 2011; Liao and Grishman, 2010; Ji and Grishman, 2008) often use a set of elaborately designed features that are extracted by textual analysis and linguistic knowledge. In general, we can divide the features into two categories: lexical features and contextual features. Lexical features contain part-of-speech tags (POS), entity information, and morphology features (e.g., token, lemma, etc.), which aim to capture semantics or the background knowledge of words. For example, consider the following sentence with an ambiguous word beats: S1: Obama beats McCain. S2: Tyson beats his opp</context>
<context position="10218" citStr="Li et al., 2013" startWordPosition="1576" endWordPosition="1579">ord-embedding learning, which reveals the embedding vectors of words in an unsupervised manner; (ii) lexical-level feature representation, which directly uses embedding vectors of words to capture lexical clues; (iii) sentence-level feature extraction, which proposes a DMCNN to learn the compositional semantic features of sentences; and (iv) argument classifier output, which calculates a confidence score for each argument role candidate. 3.1 Word Embedding Learning and Lexical-Level Feature Representation Lexical-level features serve as important clues for event extraction (Hong et al., 2011; Li et al., 2013). Traditional lexical-level features primarily include lemma, synonyms and POS tag of the candidate words. The quality of such features depends strongly on the results of existing NLP tools and human ingenuity. Additionally, the traditional features remain unsatisfactory for capturing the semantics of words, which are important in event extraction, as showed in S1 and S2. As Erhan et al. (2010) reported, word embeddings learned from a significant amount of unlabeled data are more powerful for capturing the meaningful semantic regularities of words. This paper uses unsupervised pre-trained word</context>
<context position="14112" citStr="Li et al., 2013" startWordPosition="2206" endWordPosition="2209">cation. Thus, we proposed the PF, which is defined as the relative distance of the current word to the predicted trigger or candidate argument. For example, in S3, the relative distances of tank to the candidate argument cameraman is 5. To encode the position feature, each distance value is also represented by an embedding vector. Similar to word embedding, Distance Values are randomly initialized and optimized through back propagation. • Event-type feature (EF): The event type of a current trigger is valuable for argument classification (Ahn, 2006; Hong et al., 2011; Liao and Grishman, 2010; Li et al., 2013), so we encode event type predicted in the trigger classification stage as an important clue for the DMCNN, as in the PF. Figure 2 assumes that word embedding has size d,,, = 4, position embedding has size dp = 1 and event-type embedding has size de = 1. Let xi E Rd be the d-dimensional vector representation corresponding to the i-th word in the sentence, where d = d,,, + dp * 2 + de. A sentence of length n is represented as follows: x1:n = x1 ® x2 ® ... ® xn (3) where ® is the concatenation operator. Thus, combined word embedding, position embedding and event-type embedding transform an insta</context>
<context position="20453" citStr="Li et al. (2013)" startWordPosition="3351" endWordPosition="3354">resentation of the sentence level, we use the same CWF as does in argument classification, but we only use the position of the candidate trigger to embed the position feature. Furthermore, instead of splitting the sentence into three parts, the sentence is split into two parts by a candidate trigger. Except for the above change in the features and model, we classify a trigger as the classification of an argument. Both stages form the framework of the event extraction. 4 Experiments 4.1 Dataset and Evaluation Metric We utilized the ACE 2005 corpus as our dataset. For comparison, as the same as Li et al. (2013), Hong et al. (2011) and Liao and Grishman (2010), we used the same test set with 40 newswire articles and the same development set with 30 other documents randomly selected from different genres and the rest 529 documents are used for training. Similar to previous work (Li et al., 2013; Hong et al., 2011; Liao and Grishman, 2010; Ji and Grishman, 2008), we use the following criteria to judge the correctness of each predicted event mention: • An argument is correctly identified if its event subtype and offsets match those of any of the reference argument mentions. • An argument is correctly cl</context>
<context position="22011" citStr="Li et al. (2013)" startWordPosition="3606" endWordPosition="3609">sed system proposed by Li et al. (2013), which only employs human-designed lexical features, basic features and syntactic features. 2) Liao’s cross-event is the method proposed by Liao and Grishman (2010), which uses documentlevel information to improve the performance of ACE event extraction. 3) Hong’s cross-entity is the method proposed by Hong et al. (2011), which extracts event by using cross-entity inference. To the best of our knowledge, it is the best-reported feature-based system in the literature based on gold standards argument candidates. 4) Li’s structure is the method proposed by Li et al. (2013), which extracts events based on structure prediction. It is the best-reported structurebased system. Following Li et al. (2013), we tuned the model parameters on the development through grid search. Moreover, in different stages of event extraction, we adopted different parameters in the DMCNN. Specifically, in the trigger classification, we set the window size as 3, the number of the feature map as 200, the batch size as 170 and the dimension of the PF as 5. In the argument classification, we set the window size as 3, the number of the feature map as 300, the batch size as 20 and the dimensi</context>
<context position="23818" citStr="Li et al., 2013" startWordPosition="3927" endWordPosition="3930">N/A 72.9 64.3 68.3 53.4 52.9 53.1 51.6 45.5 48.3 Li’s structure 76.9 65.0 70.4 73.7 62.3 67.5 69.8 47.9 56.8 64.7 44.4 52.7 DMCNN model 80.4 67.7 73.5 75.6 63.6 69.1 68.8 51.9 59.1 62.2 46.9 53.5 Table 1: Overall performance on blind test data rate = 0.5. We train the word embedding using the Skip-gram algorithm 2 on the NYT corpus 3. Table 1 shows the overall performance on the blind test dataset. From the results, we can see that the DMCNN model we proposed with the automatically learned features achieves the best performance among all of the compared methods. DMCNN can improve the best F1 (Li et al., 2013) in the state-of-the-arts for trigger classification by 1.6% and argument role classification by 0.8%. This demonstrates the effectiveness of the proposed method. Moreover, a comparison of Liao’s cross-event with Li’s baseline illustrates that Liao’s cross-event achieves a better performance. We can also make the same observation when comparing Hong’s cross-entity with Liao’s cross-event and comparing Li’s structure with Hong’s cross-entity. It proves that richer feature sets lead to better performance when using traditional human-designed features. However, our method could obtain further bet</context>
<context position="25453" citStr="Li et al., 2013" startWordPosition="4160" endWordPosition="4163">r approach with sentence and lexical features achieves comparable performance even though we do not use complicated NLP tools. 4.3 Effect of The DMCNN on Extracting Sentence-Level Features In this subsection, we prove the effectiveness of the proposed DMCNN for sentence-level feature extraction. We specifically select two methods as baselines for comparison with our DMCNN: Embeddings+T and CNN. Embeddings+T uses word 2https://code.google.com/p/word2vec/ 3https://catalog.ldc.upenn.edu/LDC2008T19 embeddings as lexical-level features and traditional sentence-level features based on human design (Li et al., 2013). A CNN is similar to a DMCNN, except that it uses a standard convolutional neural network with max-pooling to capture sentence-level features. By contrast, a DMCNN uses the dynamic multi-pooling layer in the network instead of the max-pooling layer in a CNN. Moreover, to prove that a DMCNN could capture more precise sentence-level features, especially for those sentences with multiple events, we divide the testing data into two parts according the event number in a sentence (single event and multiple events) and perform evaluations separately. Table 2 shows the proportion of sentences with mu</context>
<context position="27859" citStr="Li et al. (2013)" startWordPosition="4546" endWordPosition="4549">ble clues than the CNN with max-pooling, especially when one sentence contains more than one event. Stage Method 1/1 1/N all F1 F1 F1 Trigger Embedding+T 68.1 25.5 59.8 CNN 72.5 43.1 66.3 DMCNN 74.3 50.9 69.1 Argument Embedding+T 37.4 15.5 32.6 CNN 51.6 36.6 48.9 DMCNN 54.6 48.7 53.5 Table 3: Comparison of the event extraction scores obtained for the Traditional, CNN and DMCNN models 4.4 Effect of Word Embedding on Extracting Lexical-Level Features This subsection studies the effectiveness of our word embedding for lexical features. For comparison purposes, we select the baseline described by Li et al. (2013) as the traditional method, which uses traditional lexical features, such as n-grams, POS tags and some entity information. In contrast, we only use word embedding as our lexical feature. Moreover, to prove that word embedding could capture more valuable semantics, especially for those words in the test data that never appear to be the same event type or argument role in the training data, we divide the triggers and arguments in the testing data into two parts (1: appearing in testing data only, or 2: appearing in both testing and training data with the same event type or argument role) and pe</context>
<context position="31960" citStr="Li et al. (2013)" startWordPosition="5188" endWordPosition="5191">clues from the texts, Gupta and Ji (2009), Liao and Grishman (2010) and Hong et al. (2011) proposed the cross-event and cross-entity inference for the ACE event task. Although these approaches achieve high performance, featurebased methods suffer from the problem of selecting a suitable feature set when converting the classification clues into feature vectors. In structure-based methods, researchers treat event extraction as the task of predicting the structure of the event in a sentence. McClosky et al. (2011) casted the problem of biomedical event extraction as a dependency parsing problem. Li et al. (2013) presented a joint framework for ACE event extraction based on structured perceptron with beam search. To use more information from the sentence, Li et al. (2014) proposed to extract entity mentions, relations and events in ACE task based on the unified structure. These methods yield relatively high performance. However, the performance of these methods depend strongly on the quality of the designed features and endure the errors in the existing NLP tools. 6 Conclusion This paper proposes a novel event extraction method, which can automatically extract lexicallevel and sentence-level features </context>
</contexts>
<marker>Li, Ji, Huang, 2013</marker>
<rawString>Qi Li, Heng Ji, and Liang Huang. 2013. Joint event extraction via structured prediction with global features. In Proceedings ofACL, pages 73–82.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Qi Li</author>
<author>Heng Ji</author>
<author>Yu Hong</author>
<author>Sujian Li</author>
</authors>
<title>Constructing information networks using one single model.</title>
<date>2014</date>
<booktitle>In Proceedings of EMNLP,</booktitle>
<pages>1846--1851</pages>
<contexts>
<context position="1661" citStr="Li et al., 2014" startWordPosition="226" endWordPosition="229"> in a sentence and may miss valuable facts when considering multiple-event sentences. We propose a dynamic multi-pooling convolutional neural network (DMCNN), which uses a dynamic multi-pooling layer according to event triggers and arguments, to reserve more crucial information. The experimental results show that our approach significantly outperforms other state-of-the-art methods. 1 Introduction Event extraction is an important and challenging task in Information Extraction (IE), which aims to discover event triggers with specific types and their arguments. Current state-of-the-art methods (Li et al., 2014; Li et al., 2013; Hong et al., 2011; Liao and Grishman, 2010; Ji and Grishman, 2008) often use a set of elaborately designed features that are extracted by textual analysis and linguistic knowledge. In general, we can divide the features into two categories: lexical features and contextual features. Lexical features contain part-of-speech tags (POS), entity information, and morphology features (e.g., token, lemma, etc.), which aim to capture semantics or the background knowledge of words. For example, consider the following sentence with an ambiguous word beats: S1: Obama beats McCain. S2: Ty</context>
<context position="32122" citStr="Li et al. (2014)" startWordPosition="5214" endWordPosition="5217">ask. Although these approaches achieve high performance, featurebased methods suffer from the problem of selecting a suitable feature set when converting the classification clues into feature vectors. In structure-based methods, researchers treat event extraction as the task of predicting the structure of the event in a sentence. McClosky et al. (2011) casted the problem of biomedical event extraction as a dependency parsing problem. Li et al. (2013) presented a joint framework for ACE event extraction based on structured perceptron with beam search. To use more information from the sentence, Li et al. (2014) proposed to extract entity mentions, relations and events in ACE task based on the unified structure. These methods yield relatively high performance. However, the performance of these methods depend strongly on the quality of the designed features and endure the errors in the existing NLP tools. 6 Conclusion This paper proposes a novel event extraction method, which can automatically extract lexicallevel and sentence-level features from plain texts without complicated NLP preprocessing. A wordrepresentation model is introduced to capture lexical semantic clues and a dynamic multi-pooling con</context>
</contexts>
<marker>Li, Ji, Hong, Li, 2014</marker>
<rawString>Qi Li, Heng Ji, Yu Hong, and Sujian Li. 2014. Constructing information networks using one single model. In Proceedings of EMNLP, pages 1846– 1851.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Shasha Liao</author>
<author>Ralph Grishman</author>
</authors>
<title>Using document level cross-event inference to improve event extraction.</title>
<date>2010</date>
<booktitle>In Proceedings of ACL,</booktitle>
<pages>789--797</pages>
<contexts>
<context position="1722" citStr="Liao and Grishman, 2010" startWordPosition="238" endWordPosition="241">dering multiple-event sentences. We propose a dynamic multi-pooling convolutional neural network (DMCNN), which uses a dynamic multi-pooling layer according to event triggers and arguments, to reserve more crucial information. The experimental results show that our approach significantly outperforms other state-of-the-art methods. 1 Introduction Event extraction is an important and challenging task in Information Extraction (IE), which aims to discover event triggers with specific types and their arguments. Current state-of-the-art methods (Li et al., 2014; Li et al., 2013; Hong et al., 2011; Liao and Grishman, 2010; Ji and Grishman, 2008) often use a set of elaborately designed features that are extracted by textual analysis and linguistic knowledge. In general, we can divide the features into two categories: lexical features and contextual features. Lexical features contain part-of-speech tags (POS), entity information, and morphology features (e.g., token, lemma, etc.), which aim to capture semantics or the background knowledge of words. For example, consider the following sentence with an ambiguous word beats: S1: Obama beats McCain. S2: Tyson beats his opponent. In S1, beats is a trigger of type Ele</context>
<context position="8635" citStr="Liao and Grishman, 2010" startWordPosition="1344" endWordPosition="1347">t, an event extraction system should predict event triggers with specific subtypes and their arguments for each sentence. The upper side of figure 1 depicts the event triggers and their arguments for S3 in Section 1. ACE defines 8 event types and 33 subtypes, such as Attack or Elect. Although event extraction depends on name identification and entity mention co-reference, it is another difficult task in ACE evaluation and not the focus in the event extraction task. Thus, in this paper, we directly leverage the entity label provided by the ACE, following most previous works (Hong et al., 2011; Liao and Grishman, 2010; Ji and Grishman, 2008). 3 Methodology In this paper, event extraction is formulated as a two-stage, multi-class classification via dynamic multi-pooling convolutional neural networks with the automatically learned features. The first stage is called trigger classification, in which we use a DMCNN to classify each word in a sentence to identify trigger words. If one sentence has triggers, the second stage is conducted, which applies a similar DMCNN to assign arguments to triggers and align the roles of the arguments. We call this argument classification. Because the second stage is more compl</context>
<context position="14094" citStr="Liao and Grishman, 2010" startWordPosition="2202" endWordPosition="2205"> in the argument classification. Thus, we proposed the PF, which is defined as the relative distance of the current word to the predicted trigger or candidate argument. For example, in S3, the relative distances of tank to the candidate argument cameraman is 5. To encode the position feature, each distance value is also represented by an embedding vector. Similar to word embedding, Distance Values are randomly initialized and optimized through back propagation. • Event-type feature (EF): The event type of a current trigger is valuable for argument classification (Ahn, 2006; Hong et al., 2011; Liao and Grishman, 2010; Li et al., 2013), so we encode event type predicted in the trigger classification stage as an important clue for the DMCNN, as in the PF. Figure 2 assumes that word embedding has size d,,, = 4, position embedding has size dp = 1 and event-type embedding has size de = 1. Let xi E Rd be the d-dimensional vector representation corresponding to the i-th word in the sentence, where d = d,,, + dp * 2 + de. A sentence of length n is represented as follows: x1:n = x1 ® x2 ® ... ® xn (3) where ® is the concatenation operator. Thus, combined word embedding, position embedding and event-type embedding </context>
<context position="20502" citStr="Liao and Grishman (2010)" startWordPosition="3360" endWordPosition="3363"> the same CWF as does in argument classification, but we only use the position of the candidate trigger to embed the position feature. Furthermore, instead of splitting the sentence into three parts, the sentence is split into two parts by a candidate trigger. Except for the above change in the features and model, we classify a trigger as the classification of an argument. Both stages form the framework of the event extraction. 4 Experiments 4.1 Dataset and Evaluation Metric We utilized the ACE 2005 corpus as our dataset. For comparison, as the same as Li et al. (2013), Hong et al. (2011) and Liao and Grishman (2010), we used the same test set with 40 newswire articles and the same development set with 30 other documents randomly selected from different genres and the rest 529 documents are used for training. Similar to previous work (Li et al., 2013; Hong et al., 2011; Liao and Grishman, 2010; Ji and Grishman, 2008), we use the following criteria to judge the correctness of each predicted event mention: • An argument is correctly identified if its event subtype and offsets match those of any of the reference argument mentions. • An argument is correctly classified if its event subtype, offsets and argume</context>
<context position="31411" citStr="Liao and Grishman (2010)" startWordPosition="5101" endWordPosition="5104"> methods. In feature-based methods, a diverse set of strategies has been exploited to convert classification clues (such as sequences and parse trees) into feature vectors. Ahn (2006) uses the lexical features(e.g., full word, pos tag), syntactic features (e.g., dependency features) and externalknowledge features(WordNet) to extract the event. Inspired by the hypothesis of “One Sense Per Dis174 course”(Yarowsky, 1995), Ji and Grishman (2008) combined global evidence from related documents with local decisions for the event extraction. To capture more clues from the texts, Gupta and Ji (2009), Liao and Grishman (2010) and Hong et al. (2011) proposed the cross-event and cross-entity inference for the ACE event task. Although these approaches achieve high performance, featurebased methods suffer from the problem of selecting a suitable feature set when converting the classification clues into feature vectors. In structure-based methods, researchers treat event extraction as the task of predicting the structure of the event in a sentence. McClosky et al. (2011) casted the problem of biomedical event extraction as a dependency parsing problem. Li et al. (2013) presented a joint framework for ACE event extracti</context>
</contexts>
<marker>Liao, Grishman, 2010</marker>
<rawString>Shasha Liao and Ralph Grishman. 2010. Using document level cross-event inference to improve event extraction. In Proceedings of ACL, pages 789–797.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David McClosky</author>
<author>Mihai Surdeanu</author>
<author>Christopher D Manning</author>
</authors>
<title>Event extraction as dependency parsing.</title>
<date>2011</date>
<booktitle>In Proceedings of ACL-HLT,</booktitle>
<pages>1626--1635</pages>
<contexts>
<context position="31860" citStr="McClosky et al. (2011)" startWordPosition="5171" endWordPosition="5174">ned global evidence from related documents with local decisions for the event extraction. To capture more clues from the texts, Gupta and Ji (2009), Liao and Grishman (2010) and Hong et al. (2011) proposed the cross-event and cross-entity inference for the ACE event task. Although these approaches achieve high performance, featurebased methods suffer from the problem of selecting a suitable feature set when converting the classification clues into feature vectors. In structure-based methods, researchers treat event extraction as the task of predicting the structure of the event in a sentence. McClosky et al. (2011) casted the problem of biomedical event extraction as a dependency parsing problem. Li et al. (2013) presented a joint framework for ACE event extraction based on structured perceptron with beam search. To use more information from the sentence, Li et al. (2014) proposed to extract entity mentions, relations and events in ACE task based on the unified structure. These methods yield relatively high performance. However, the performance of these methods depend strongly on the quality of the designed features and endure the errors in the existing NLP tools. 6 Conclusion This paper proposes a nove</context>
</contexts>
<marker>McClosky, Surdeanu, Manning, 2011</marker>
<rawString>David McClosky, Mihai Surdeanu, and Christopher D Manning. 2011. Event extraction as dependency parsing. In Proceedings of ACL-HLT, pages 1626– 1635.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Tomas Mikolov</author>
<author>Kai Chen</author>
<author>Greg Corrado</author>
<author>Jeffrey Dean</author>
</authors>
<title>Efficient estimation of word representations in vector space. arXiv preprint arXiv:1301.3781.</title>
<date>2013</date>
<contexts>
<context position="6172" citStr="Mikolov et al., 2013" startWordPosition="955" endWordPosition="958">e information that depicts “a cameraman died” but miss the information about “American tank fired on the Palestine Hotel”, which is important for predicting the Attack event and valuable for attaching cameraman to fired as an Target argument. In our experiments, we found that such multiple-event sentences comprise 27.3% of our dataset, which is a phenomenon we cannot ignore. In this paper, we propose a dynamic multipooling convolutional neural network (DMCNN) to address the problems stated above. To capture lexical-level clues and reduce human effort, we introduce a word-representation model (Mikolov et al., 2013b), which has been shown to be able to capture the meaningful semantic regularities of words (Bengio et al., 2003; Erhan et al., 2010; Mikolov et al., 2013a). To capture sentence-level clues without using complicated NLP tools, and to reserve information more comprehensively, we devise a dynamic multi-pooling layer for CNN, which returns the maximum value in each part of the sentence according to event triggers and arguments. In summary, the contributions of this paper are as follows: • We present a novel framework for event extraction, which can automatically induce lexical-level and sentence</context>
</contexts>
<marker>Mikolov, Chen, Corrado, Dean, 2013</marker>
<rawString>Tomas Mikolov, Kai Chen, Greg Corrado, and Jeffrey Dean. 2013a. Efficient estimation of word representations in vector space. arXiv preprint arXiv:1301.3781.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Tomas Mikolov</author>
<author>Ilya Sutskever</author>
<author>Kai Chen</author>
<author>Greg S Corrado</author>
<author>Jeff Dean</author>
</authors>
<title>Distributed representations of words and phrases and their compositionality.</title>
<date>2013</date>
<booktitle>In Proceedings of NIPS,</booktitle>
<pages>3111--3119</pages>
<contexts>
<context position="6172" citStr="Mikolov et al., 2013" startWordPosition="955" endWordPosition="958">e information that depicts “a cameraman died” but miss the information about “American tank fired on the Palestine Hotel”, which is important for predicting the Attack event and valuable for attaching cameraman to fired as an Target argument. In our experiments, we found that such multiple-event sentences comprise 27.3% of our dataset, which is a phenomenon we cannot ignore. In this paper, we propose a dynamic multipooling convolutional neural network (DMCNN) to address the problems stated above. To capture lexical-level clues and reduce human effort, we introduce a word-representation model (Mikolov et al., 2013b), which has been shown to be able to capture the meaningful semantic regularities of words (Bengio et al., 2003; Erhan et al., 2010; Mikolov et al., 2013a). To capture sentence-level clues without using complicated NLP tools, and to reserve information more comprehensively, we devise a dynamic multi-pooling layer for CNN, which returns the maximum value in each part of the sentence according to event triggers and arguments. In summary, the contributions of this paper are as follows: • We present a novel framework for event extraction, which can automatically induce lexical-level and sentence</context>
</contexts>
<marker>Mikolov, Sutskever, Chen, Corrado, Dean, 2013</marker>
<rawString>Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Corrado, and Jeff Dean. 2013b. Distributed representations of words and phrases and their compositionality. In Proceedings of NIPS, pages 3111–3119.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Frederic Morin</author>
<author>Yoshua Bengio</author>
</authors>
<title>Hierarchical probabilistic neural network language model.</title>
<date>2005</date>
<booktitle>In Proceedings of AISTATS,</booktitle>
<pages>246--252</pages>
<contexts>
<context position="11676" citStr="Morin and Bengio (2005)" startWordPosition="1806" endWordPosition="1809">gs are concatenated into the lexical-level features vector L to represent the lexical-level features in argument classification. In this work, we use the Skip-gram model to pre-train the word embedding. This model is the state-of-the-art model in many NLP tasks (Baroni et al., 2014). The Skip-gram model trains the embeddings of words w1, w2...wm by maximizing the average log probability, log p(wt+j|wt) (1) where c is the size of the training window. Basically, p(wt+j|wt) is defined as, Emw=1 exp(e�Twet) (2) 0 where m is the vocabulary of the unlabeled text. ei is another embedding for ei, see Morin and Bengio (2005) for details. � −c≤j≤c,j=&apos;40 1 m �m t=1 p(wt+j|wt) = etexp( +jet) 169 maac(C&apos;&apos;) maac(C&apos;O maac(C&apos;�) Figure 2: The architecture for the stage of argument classification in the event extraction. It illustrates the processing of one instance with the predict trigger fired and the candidate argument cameraman. 3.2 Extracting Sentence-Level Features Using a DMCNN The CNN, with max-pooling layers, is a good choice to capture the semantics of long-distance words within a sentence (Collobert et al., 2011). However, as noted in the section 1, traditional CNN is incapable of addressing the event extracti</context>
</contexts>
<marker>Morin, Bengio, 2005</marker>
<rawString>Frederic Morin and Yoshua Bengio. 2005. Hierarchical probabilistic neural network language model. In Proceedings of AISTATS, pages 246–252.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Joseph Turian</author>
<author>Lev Ratinov</author>
<author>Yoshua Bengio</author>
</authors>
<title>Word representations: a simple and general method for semi-supervised learning.</title>
<date>2010</date>
<booktitle>In Proceedings of ACL,</booktitle>
<pages>384--394</pages>
<contexts>
<context position="3113" citStr="Turian et al., 2010" startWordPosition="465" endWordPosition="468"> trigger of Attack. However, if we have the priori knowledge that Obama and McCain are presidential contenders, we have ample evidence to predict that beats is a trigger of type Elect. We call these knowledge lexical-level clues. To represent such features, the existing methods (Hong et al., 2011) often rely on human ingenuity, which is a time-consuming process and lacks generalization. Furthermore, traditional lexical features in previous methods are a one-hot representation, which may suffer from the data sparsity problem and may not be able to adequately capture the semantics of the words (Turian et al., 2010). To identify events and arguments more precisely, previous methods often captured contextual features, such as syntactic features, which aim to understand how facts are tied together from a larger field of view. For example, in S3, there are two events that share three arguments as shown in Figure 1. From the dependency relation of nsubj between the argument cameraman and trigger died, we can induce a Victim role to cameraman in the Die event. We call such information sentence-level clues. However, the argument word cameraman and its trigger word fired are in different clauses, and there is n</context>
</contexts>
<marker>Turian, Ratinov, Bengio, 2010</marker>
<rawString>Joseph Turian, Lev Ratinov, and Yoshua Bengio. 2010. Word representations: a simple and general method for semi-supervised learning. In Proceedings of ACL, pages 384–394.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David Yarowsky</author>
</authors>
<title>Unsupervised word sense disambiguation rivaling supervised methods.</title>
<date>1995</date>
<booktitle>In Proceedings of ACL,</booktitle>
<pages>189--196</pages>
<contexts>
<context position="31208" citStr="Yarowsky, 1995" startWordPosition="5071" endWordPosition="5072">es have been explored for event extraction. Nearly all of the ACE event extraction use supervised paradigm. We further divide supervised approaches into feature-based methods and structure-based methods. In feature-based methods, a diverse set of strategies has been exploited to convert classification clues (such as sequences and parse trees) into feature vectors. Ahn (2006) uses the lexical features(e.g., full word, pos tag), syntactic features (e.g., dependency features) and externalknowledge features(WordNet) to extract the event. Inspired by the hypothesis of “One Sense Per Dis174 course”(Yarowsky, 1995), Ji and Grishman (2008) combined global evidence from related documents with local decisions for the event extraction. To capture more clues from the texts, Gupta and Ji (2009), Liao and Grishman (2010) and Hong et al. (2011) proposed the cross-event and cross-entity inference for the ACE event task. Although these approaches achieve high performance, featurebased methods suffer from the problem of selecting a suitable feature set when converting the classification clues into feature vectors. In structure-based methods, researchers treat event extraction as the task of predicting the structur</context>
</contexts>
<marker>Yarowsky, 1995</marker>
<rawString>David Yarowsky. 1995. Unsupervised word sense disambiguation rivaling supervised methods. In Proceedings of ACL, pages 189–196.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Matthew D Zeiler</author>
</authors>
<title>Adadelta: An adaptive learning rate method. arXiv preprint arXiv:1212.5701.</title>
<date>2012</date>
<contexts>
<context position="19308" citStr="Zeiler, 2012" startWordPosition="3163" endWordPosition="3164"> i-th component Oi contains the score for argument role i. To obtain the conditional probability p(ijx, 0), we apply a softmax operation over all argument 171 role types: • A trigger is correct if its event subtype and p(i|x, θ) = n, e°i (8) offsets match those of a reference trigger. E e°k k=1 Given all of our (suppose T) training examples (xi; yi), we can then define the objective function as follows: T J (θ) = log p(y(i)|x(i), θ) (9) i=1 To compute the network parameter θ, we maximize the log likelihood J (θ) through stochastic gradient descent over shuffled mini-batches with the Adadelta (Zeiler, 2012) update rule. 3.5 Model for Trigger Classification In the above sections, we presented our model and features for argument classification. The method proposed above is also suitable for trigger classification, but the task only need to find triggers in the sentence, which is less complicated than argument classification. Thus we can used a simplified version of DMCNN. In the trigger classification, we only use the candidate trigger and its left and right tokens in the lexical-level feature representation. In the feature representation of the sentence level, we use the same CWF as does in argum</context>
<context position="22735" citStr="Zeiler, 2012" startWordPosition="3733" endWordPosition="3734"> Li et al. (2013), we tuned the model parameters on the development through grid search. Moreover, in different stages of event extraction, we adopted different parameters in the DMCNN. Specifically, in the trigger classification, we set the window size as 3, the number of the feature map as 200, the batch size as 170 and the dimension of the PF as 5. In the argument classification, we set the window size as 3, the number of the feature map as 300, the batch size as 20 and the dimension of the PF and EF as 5. Stochastic gradient descent over shuffled mini-batches with the Adadelta update rule(Zeiler, 2012) is used for training and testing processes. It mainly contains two parameters p and ε. We set p = 0.95 and ε = 1e−6. For the dropout operation, we set the 172 Methods Trigger Trigger Identification Argument Argument Identification(%) + Classification(%) Identification(%) Role(%) P R F P R F P R F P R F Li’s baseline 76.2 60.5 67.4 74.5 59.1 65.9 74.1 37.4 49.7 65.4 33.1 43.9 Liao’s cross-event N/A 68.7 68.9 68.8 50.9 49.7 50.3 45.1 44.1 44.6 Hong’s cross-entity N/A 72.9 64.3 68.3 53.4 52.9 53.1 51.6 45.5 48.3 Li’s structure 76.9 65.0 70.4 73.7 62.3 67.5 69.8 47.9 56.8 64.7 44.4 52.7 DMCNN mod</context>
</contexts>
<marker>Zeiler, 2012</marker>
<rawString>Matthew D Zeiler. 2012. Adadelta: An adaptive learning rate method. arXiv preprint arXiv:1212.5701.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Daojian Zeng</author>
<author>Kang Liu</author>
<author>Siwei Lai</author>
<author>Guangyou Zhou</author>
<author>Jun Zhao</author>
</authors>
<title>Relation classification via convolutional deep neural network.</title>
<date>2014</date>
<booktitle>In Proceedings of COLING,</booktitle>
<pages>2335--2344</pages>
<contexts>
<context position="5032" citStr="Zeng et al., 2014" startWordPosition="770" endWordPosition="773">ing such features depends heavily on the performance of pre-existing NLP systems, which could suffer from error propagation. S3: In Baghdad, a cameraman died when an American tank fired on the Palestine Hotel. To correctly attach cameraman to fired as a Target argument, we must exploit internal semantics over the entire sentence such that the Attack event results in Die event. Recent improvements of convolutional neural networks (CNNs) have been proven to be efficient for capturing syntactic and semantics between words within a sentence (Collobert et al., 2011; Kalchbrenner and Blunsom, 2013; Zeng et al., 2014) for NLP tasks. CNNs typically use a max-pooling layer, which applies a max operation over the representation of an entire sentence to capture the most useful information. However, in event extraction, one sentence may contain two or more events, and these events may share the argument with different roles. For example, there are two events in S3, namely, the Die event and Attack event. If we use a traditional max-pooling layer and only keep the most important information to represent the sentence, we may obtain the information that depicts “a cameraman died” but miss the information about “Am</context>
<context position="16086" citStr="Zeng et al., 2014" startWordPosition="2576" endWordPosition="2579">uce a feature map ci where the index i ranges from 1 to n − h + 1. We have described the process of how one feature map is extracted from one filter. To capture different features, it usually use multiple filters in the convolution. Assuming that we use m filters W = w1, w2, ..., wm, the convolution operation can be expressed as: cji = f(wj &apos; xi:i+h−1 + bj) (5) where j ranges from 1 to m. The convolution result is a matrix C E Rm×(n−h+1). 3.2.3 Dynamic Multi-Pooling To extract the most important features (max value) within each feature map, traditional CNNs (Collobert et al., 2011; Kim, 2014; Zeng et al., 2014) take one feature map as a pool and only get one max value for each feature map. However, single max-pooling is not sufficient for event extraction. Because in the task of this paper, one sentence may contain two or more events, and one argument candidate may play a different role with a different trigger. To make an accurate prediction, it is necessary to capture the most valuable information with regard to the change of the candidate words. Thus, we split each feature map into three parts according to the candidate argument and predicted trigger in the argument classification stage. Instead </context>
</contexts>
<marker>Zeng, Liu, Lai, Zhou, Zhao, 2014</marker>
<rawString>Daojian Zeng, Kang Liu, Siwei Lai, Guangyou Zhou, and Jun Zhao. 2014. Relation classification via convolutional deep neural network. In Proceedings of COLING, pages 2335–2344.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>