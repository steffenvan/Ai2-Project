<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<sectionHeader confidence="0.902582" genericHeader="abstract">
ACCOMMODATING CONTEXT CHANGE
</sectionHeader>
<affiliation confidence="0.784110333333333">
Bonnie Lynn Webber and Breck Baldwin
Department of Computer and Information Science
University of Pennsylvania
</affiliation>
<address confidence="0.698682">
Philadelphia, PA 19104-6389
</address>
<email confidence="0.646344">
Internet: {bonnieacentral,breckalinc}.cis.upenn.edu*
</email>
<sectionHeader confidence="0.947464" genericHeader="keywords">
ABSTRACT
</sectionHeader>
<bodyText confidence="0.999804083333333">
Two independent mechanisms of context change
have been discussed separately in the literature —
context change by entity introduction and context
change by event simulation. Here we discuss their
integration. The effectiveness of the integration de-
pends in part on a representation of events that cap-
tures people&apos;s uncertainty about their outcome — in
particular, people&apos;s incomplete expectations about
the changes effected by events. We propose such a
representation and a process of accommodation that
makes use of it, and discuss our initial implementa-
tion of these ideas.
</bodyText>
<sectionHeader confidence="0.95259" genericHeader="introduction">
Introduction
</sectionHeader>
<bodyText confidence="0.815051666666667">
Consider the following example:
Example 1
John made a handbag from an inner-tube.
</bodyText>
<listItem confidence="0.94647525">
a. He sold it for twenty dollars.
b. *He sold them for fifty dollars.
c. He had taken it from his brother&apos;s car.
d. Neither of them was particularly useful.
</listItem>
<bodyText confidence="0.769289363636364">
Here two entities are introduced via indefinite noun
phrases (NPs) in the first sentence. The alternative
follow-ons (a-d) show that subsequent reference to
those entities is constrained. In particular, (b) high-
lights the difference in their existential status, even
though there is no syntactic difference in how they
are introduced. Now consider
&apos;This work was partially supported by ARO grant DAAL
03-89-C-0031, DARPA grant N00014-90-J-1863, and NSF
grant IRI 90-16592 to the University of Pennsylvania. The
paper draws upon material first presented at the workshop on
</bodyText>
<note confidence="0.883058666666667">
Defeasible Reasoning in Semantics and Pragmatics held at
the European Summer School on Logic, Language and Infor-
mation, Saarbriicken, Germany, August 1991.
</note>
<bodyText confidence="0.876597378378378">
Example 2
Mix the flour, butter and water.
a. Knead the dough until smooth and shiny.
b. Spread the paste over the blueberries.
c. Stir the batter until all lumps are gone.
In each of the alternative follow-on (a—c), a different
definite NP refers to the result of the mixing, even
though the terms &amp;quot;dough&amp;quot;, &amp;quot;paste&amp;quot; and &amp;quot;batter&amp;quot; are
not interchangeable. (They denote substances with
different consistencies, from a pliant solid — dough —
to a liquid — batter.)
In both these examples, events&apos; are mentioned
that change the world being described. These exam-
ples will be used to show why the two mechanisms
of context change discussed separately in the litera-
ture (context change by entity introduction and con-
text change by event simulation) must be integrated
(Section 2). For such integration to be effective, we
argue that it must be based on a representation of
events that captures people&apos;s uncertainty about their
outcome — in particular, people&apos;s incomplete expec-
tations about the changes effected by events. An un-
derstanding system can then use these expectations
to accommodate [15] the particular changes that are
mentioned in subsequent discourse (Section 3). In
Section 4, we discuss our initial implementation of
these ideas.
This work is being carried out as part of a project
(AnimNL) aimed at creating animated task simu-
lations from Natural Language instructions [2; 4; 5;
6; 7; 14; 20]. Instructions are a form of text rich in
the specification of events intended to alter the world
in some way. Because of this, the issues discussed in
this paper are particularly important to both under-
standing and generating instructions.
&apos;Event is used informally to mean any kind of action or
process.
</bodyText>
<page confidence="0.988942">
96
</page>
<subsectionHeader confidence="0.95832">
Mechanisms of Context
Change
</subsectionHeader>
<bodyText confidence="0.999009049019608">
Computational Linguistics research has recognized
two independent mechanisms of context change. The
first to have been recognized might be called context
change by entity introduction. It was first imple-
mented in Woods&apos; question-answering system LU-
NAR [21; 22]. For each non-anaphoric referential
noun phrase (NP) in a question, including a ques-
tioned NP itself, LUNAR would create a new con-
stant symbol to represent the new entity, putting an
appropriate description on its property list. For ex-
ample, if asked the question &amp;quot;Which breccias contain
molybdenum?&amp;quot;, LUNAR would create one new con-
stant to represent molybdenum and another to repre-
sent the set of breccias which contain molybdenum.
Each new constant would be added to the front of
LUNAR&apos;s history list, thereby making it available as
a potential referent for subsequent pronominal and
definite NP anaphors (e.g. &amp;quot;Do they also contain ti-
tanium?&amp;quot;). Webber [19] further developed this pro-
cedure for introducing and characterizing discourse
entities available for anaphoric reference
A similar mechanism of context change is embed-
ded in formal dynamic theories of discourse, includ-
ing Kamp&apos;s Discourse Representation Theory [11]
and Heim&apos;s File Change Semantics [10]. We briefly
describe Heim&apos;s approach, to show this similarity.
Heim&apos;s files constitute an intermediate level of rep-
resentation between the sentences of a text and the
model which gives them their truth values. A sen-
tence can be viewed as denoting a function from an
input file to an output file. Each indefinite NP in
a sentence requires a new file card in the output file
which does not appear in the input file, on which
is inscribed the properties of the new entity. Each
definite NP must either map to an existing file card
or have a semantic association with an existing card,
allowing it to be accommodated into the discourse.
In the latter case, a new file card is inserted in the
input file which the definite NP is now taken as map-
ping to. Context change therefore consists of new
annotations to existing cards and new cards added
for indefinite NPs and accommodated definite NPs.
The files do not change in any other way that reflects
events described in the text.
Formal theories of discourse have been broadened
to allow for types of &amp;quot;embedded contexts&amp;quot; associated
with modals [17] and with propositional attitudes [1].
Although they have also begun to deal with problems
of tense and the temporal relationship of events de-
scribed in a text [12; 16], there is still no connection
between the events described in a text and the indi-
viduals introduced therein.
Context change by event simulation is a feature of
Dale&apos;s recent Natural Language generation system
EPICURE [3], which generates recipe texts from an
underlying plan representation. In EPICURE, the in-
dividuals available for reference change in step with
the events described in the text.2 In a sense, EPI-
CURE is simulating the effects of the events that the
text describes.
In implementing this, Dale represents actions with
STRIPS-like operators which can change the world
from one state to another. Each object and state in
EPICURE has a unique index, with the set of ob-
jects available in a given state constituting its work-
ing set. With respect to objects3, an action can have
two types of effects: it can change a property of an
object (e.g., from being an individual carrot to be-
ing a mass of grated carrot), or it can add an object
to or remove it from the world, as represented in
the current working set (e.g., flour disappears as an
independent entity when combined with water, and
dough appears). The preconditions and postcondi-
tions of each action indicate the objects required in
the working set for its performance and the changes
it makes to objects in the working set as a result.
For example, ADD (in the sense of &amp;quot;add X to Y&amp;quot;)
has as preconditions that X and Y be in the current
working set and as post-conditions, that X and Y
are absent from the resulting working set and a new
object Z is present whose constituents are X and Y.
The form of recipe that EPICURE generates is the
common one in which a list of ingredients is followed
by instructions as to what to do with them. Thus
all entities are introduced to the reader in this ini-
tial list (e.g., &amp;quot;four ounces of butter beans&amp;quot;, &amp;quot;a large
onion&amp;quot;, &amp;quot;some sea salt&amp;quot;, etc.) before any mention of
the events that will (deterministically) change their
properties or their existential status. As a result, in
the text of the recipe, EPICURE only embodies con-
text change by event simulation: no new entities are
introduced in the text that are not already known
from the list of ingredients.
2In earlier work, Grosz [8] noticed that in task-oriented di-
alogues, the performance of actions could alter what objects
the speakers would take to be in focus and hence take as the
intended referents of definite pronouns and NPs. However, ac-
tual changes in the properties and existential status of objects
due to actions were not part of Grosz&apos; study.
3Dale construes and also implements the notion of object
very broadly, so that the term applies equally well to a two-
pound package of parsnips and a tablespoon of salt
</bodyText>
<page confidence="0.997626">
97
</page>
<bodyText confidence="0.999819211267606">
Our work on integrating these two mechanisms of WS; that persist through to WS° continue to be
context change involves dropping Dale&apos;s assumption available for reference in clauses describing subse-
that states are complete specifications of an underly- quent events, as illustrated by the subsequent ref-
ing model. (To emphasize that descriptions are par- erence to John (&amp;quot;he&amp;quot;) above.
tial, we will use the term situation rather than state.) The alternative follow-on
As in EPICURE, actions are represented here by op- He had taken it from his brother&apos;s car.
erators — functions from one situation to another. describes the situation prior to the previous event.
The meaning of a clause is given in terms of these Its WS; is the WS; of the previous event, aug-
operators:4 Also as in EPICURE, the term working mented by entities corresponding to &amp;quot;his brother&amp;quot;
set is used for the set of entities in the discourse con- and &amp;quot;his brother&apos;s car. The only way to refer
text. For clarity, we refer to the working set associ- anaphorically to entities from different working sets
ated with the situation prior to the described event is with a follow-on that refers atemporally across sit-
as the WS;, and the working set associated with the uations (e.g. &amp;quot;Neither of them was particularly use-
situation after it as the WS„. An indefinite NP in ful).
the clause may introduce an entity into the WSi. Al- To date, we have not found any individual event
ternatively, it may denote an entity in the WS„ that descriptions whose semantics requires specifying
corresponds to a result of the event being described. more than the situations prior to and following the
Whether an entity introduced into W S; persists into event. This is not to say that events cannot be
WS° will depend on the particular event. This is described in terms of a sequence of situations (e.g.
characterized as in EPICURE by preconditions on &amp;quot;John began to mix the flour, butter and water.
WS; and postconditions on WS, plus a default as- He mixed them for 5 minutes. He finished mixing
sumption, that if an action is not known to affect an them.&amp;quot;). The point is that the semantics of a single
object and the text does not indicate that the object event description appears to require no more than
has been affected, then one assumes it has not been. specifying properties of WS; and WS°.
For example, consider an operator corresponding Before discussing Example 2 in detail in the next
to MAKE X FROM Y (in the sense used in Exam- section, we would like to draw the reader&apos;s attention
ple 1). Its precondition is that X is in WS;. Its to two variations of that example:
postconditions are that X is not in WS,,, Y is in Example 3
WS., and mainConstituent0f(Y,X). In response to a. Mix the flour and butter into a dough.
the sentence &amp;quot;John made a handbag from an inner- b. Mix the nuts and butter into the dough.
tube&amp;quot; (or alternatively, &amp;quot;John made an inner-tube What is of interest is the different roles that the
into a handbag&amp;quot;), a new entity (x1) corresponding prepositional phrase plays in these two cases and how
to inner-tube would be introduced into the current they are disambiguated. In 3a, &amp;quot;into a dough&amp;quot; speci-
WS;. The situation resulting from the MAKE action fies the goal of the mixing. An operator representing
contains a new entity (x2) corresponding to its prod- this sense of Nux X INTO Y would, like the operator
uct, which is what &amp;quot;a handbag&amp;quot; is taken to denote. for MAKE Y FROM X above, have as its precondition
The postconditions on MAKE specify that xl does that X is in WSi. Its post-conditions are that Y is in
not persist into WS° as a separate object.5 WS0 and that constituents0f(Y,X). In response to
Now consider the alternative follow-ons to Exam- 3a, the definite NP &amp;quot;the flour and butter&amp;quot; would have
ple 1. The sentence to be resolved against entities already in WS;, while
He sold it for $20. &amp;quot;a dough&amp;quot; would be taken to denote the new entity
entered into WS°, corresponding to the product of
the mixing.
In 3b however, &amp;quot;into the dough&amp;quot; specifies the des-
tination of the ingredients, with mixing having this
additional sense of translational motion. An opera-
tor representing this sense of ma X INTO Y would
have as its precondition that both X and Y are in
WSi. Its post-conditions are that Y is in WS„ and
that X is added to the set of constituents of Y. In
describes a subsequent event. Its WS, is the WS° of
the previous utterance, augmented by an entity in-
troduced by the NP $20. Entities introduced into
4 We are ignoring a clause&apos;s aspectual character here — that 98
it may not imply the completion of the denoted action. What
is offered here are necessary but not sufficient features of a
solution.
5Non-destructive constructive actions such as &amp;quot;build&amp;quot;, &amp;quot;as-
semble&amp;quot;, etc. (e.g. &amp;quot;build a house of Lego blocks&amp;quot;) do not
have this property: constituent entities retain their individual
existence.
response to 3b, not only would the definite NP &amp;quot;the
nuts and butter&amp;quot; have to be resolved against entities
already in WSi, but &amp;quot;the dough&amp;quot; would have to be
so resolved as well.
With a definite NP in a MIX INTO prepositional
phrase, disambiguating between these two senses is
simple: it can only be the latter sense, because of
the precondition that its referent already be in WSi.
With an indefinite NP however, it can only be a mat-
ter of preference for the first sense.
</bodyText>
<sectionHeader confidence="0.8134085" genericHeader="method">
Expectation and Accommoda-
tion
</sectionHeader>
<bodyText confidence="0.9998998">
For the integration proposed above to effectively
handle Example 4 below (Example 2 from the Intro-
duction) and Example 5, one needs both a more ac-
curate representation of people&apos;s beliefs about events
and a way of dealing with those beliefs.
</bodyText>
<figure confidence="0.517024555555556">
Example 4
Mix the flour, butter and water.
a. Knead the dough until smooth and shiny.
b. Spread the paste over the blueberries.
c. Stir the batter until all lumps are gone.
Example 5
John carved his father a chair for his birthday.
a. The wood came from Madagascar.
b. The marble came from Vermont.
</figure>
<bodyText confidence="0.997813666666667">
If the definite NPs in examples 4 and 5 are taken as
definite by virtue of their association with the pre-
viously mentioned event (just as definites have long
been noted as being felicitous by virtue of their as-
sociation with previously mentioned objects), then
Example 4 shows people associating a variety of dif-
ferent results with the same action and Example 5,
a variety of different inputs. To deal with this, we
argue for
</bodyText>
<listItem confidence="0.913856">
1. characterizing an agent&apos;s knowledge of an action
in terms of partial constraints on its WS i and
partial expectations about its WS0;
2. accommodating [15] definite NPs in subsequent
utterances as instantiating either a partial con-
straint in WSi or a partial expectation in WS0.
</listItem>
<bodyText confidence="0.999982350877193">
There appear to be three ways in which an agent&apos;s
knowledge of an action&apos;s constraints and expecta-
tions may be partial, each of which manifests it-
self somewhat differently in discourse: the knowledge
may be abstract, it may be disjunctive, or it may in-
volve options that may or may not be realized.
Abstract Knowledge. An agent may believe that
an action has a predictable result, without being able
to give its particulars. For example, an agent may
know that when she adds white paint to any other
color paint, she gets paint of a lighter color. Its par-
ticular color will depend on the color of the original
paint and the amount of white she adds. In such
cases, one might want to characterize the agent&apos;s
partial beliefs as abstract descriptions. The agent
may then bring those beliefs to bear in generating
or understanding text describing events. That is, in
both narrative and instructions, the speaker is taken
to know more about what has happened (or should
happen) than the listener. The listener may thus
not be able immediately to form specific expectations
about the results of described events. But she can
accommodate [15] a definite NP that can be taken
to denote an instantiation of those expectations.
In Example 4, for example, one might character-
ize the agent&apos;s expectation about the object result-
ing from a blending or mixing action abstractly as a
mixture. Given an instruction to mix or blend some-
thing, the agent can then accommodate a subsequent
definite reference to a particular kind of mixture — a
batter, a paste or a dough — as instantiating this ex-
pectation.
An agent&apos;s knowledge of the input constraints on
an action may be similarly abstract, characterizing,
for example, the input to &amp;quot;carve&amp;quot; as a unit of solid
material. Having been told about a particular carv-
ing action, a listener can understand reference to a
unit of particular material (stone, wood, ice, etc.) as
instantiating this input object.
Disjunctive Knowledge. An experienced agent
has, for example, alternative expectations about the
result of beating oil into egg yolks: the resulting ob-
ject will be either an emulsion (i.e., mayonnaise) or a
curdled mass of egg yolk globules floating in oil. Most
often, one of the disjuncts will correspond to the in-
tended result of the action, although &amp;quot;intended&amp;quot; does
not necessarily imply &amp;quot;likely&amp;quot;. (The result may in
fact be quite unpredictable.) In a text, the disjunc-
tive knowledge that an agent has, or is meant to have,
about actions is manifest in the descriptions given of
all (or several) alternatives. Often, the unintended
alternatives are presented in a conditional mood.
Options. A third type of partial knowledge that an
agent may have about an action is that it may or may
not produce a particular, usually secondary, result,
depending on circumstances. As with disjunctive ex-
pectations, these results are unpredictable. A corn-
</bodyText>
<page confidence="0.997154">
99
</page>
<bodyText confidence="0.981958956521739">
mon way to specify options such as these in recipes
is with the &amp;quot;if any&amp;quot; construction, as in
Example 6
Saute garlic until lightly browned. Remove
the burnt bits, if any, before continuing.
Our work to date has focussed on modelling an
agent&apos;s abstract knowledge of actions and how it
can be used in updating context and accommodat-
ing subsequent referring expressions, as in Exam-
ples 4 and 5.6 These abstract constraints and ex-
pectations can be applied immediately as a clause
describing their associated action is processed. Con-
text changes will then reflect explicit lexical material,
when present, as in
Mix the flour, butter and water into a paste.
or simply the agent&apos;s (abstract) expectations, when
explicit lexical material is not present, as in
Mix the flour, butter and water.
In the latter case, a subsequent definite NP denoting
a particular kind of mixture (the solution, the paste,
etc) can be taken as referring to an entity that is in
the current working set, merely refining its descrip-
tion, as in Example 4 above.
</bodyText>
<subsectionHeader confidence="0.7734065">
Initial Implementation
Entity Introduction and Elimination
</subsectionHeader>
<bodyText confidence="0.999649117647059">
The Natural Language and reasoning components
of the AnimNL project are being implemented in
Prolog. In our initial implementation of context
change, entities can be entered into the context by
either entity introduction or event simulation, but
they are never actually removed. Instead, actions are
treated as changing the properties of entities, which
may make them inaccessible to subsequent actions.
For example, mixing flour, butter and water (Exam-
ples 3a and 4) is understood as changing the prop-
erties of the three ingredients, so that they are no
longer subject to independent manipulation. (Here
we are following Hayes&apos; treatment of &amp;quot;liquid pieces&amp;quot;
[9] which holds, for example, that the piece of wa-
ter that was in a container still &amp;quot;exists&amp;quot; even after
being poured into a lake: It is just no longer indepen-
dently accessible.) This approach seems to simplify
</bodyText>
<footnote confidence="0.703315">
6Tenenberg has used an abstraction hierardiy of action de-
scriptions to simplify the task of planning [18], and Kautz,
to simplify plan inference [13]. This same knowledge can be
applied to language processing.
</footnote>
<bodyText confidence="0.99626975">
reference resolution decisions, but we are not rigidly
committed to it.
The mechanism for changing properties and intro-
ducing entities uses STRIPS-like operators such as
</bodyText>
<table confidence="0.5119408">
mix(E,X,Y)
precond: [manipulable (X)]
delete: [nanipulable(X)]
postcond: Emixture(Y) &amp; manipulable(Y)
k constituents0f(Y,X)]
</table>
<bodyText confidence="0.9525005">
which would be instantiated in the case of mixing
flour, butter and water to
</bodyText>
<listItem confidence="0.8493155">
mix(el,{f,w,b},m) k flour(f) k water(w)
&amp; butter(b) &amp; definite({f,w,b})
precond: Gmanipulable({f,w,b})]
delete: Damnipulable(ff,w,b1)]
postcond: [mixture(m) &amp; manipulable(m)
&amp; constituents0f(m,{f,w,b})]
</listItem>
<bodyText confidence="0.999915583333333">
The predicate in the header definite({f,w,b}) is
an instruction to the back chainer that unique an-
tecedents need to be found for each member of the
set. (In recipes, the antecedents may be provided
through either the previous discourse or the ingredi-
ents list.) If definite is absent, as in the case of
interpreting &amp;quot;mix some flour, water and butter&amp;quot;, the
back chainer introduces new entities into the work-
ing set. It also inserts into the working set a new en-
tity corresponding to the postcondition mixture (m),
whether this entity has a lexical realization (as in Ex-
ample 3a) or not (as in Example 4).
</bodyText>
<subsectionHeader confidence="0.938832">
Abstract Knowledge of Actions
</subsectionHeader>
<bodyText confidence="0.998435769230769">
The mix operator shown above introduces a new en-
tity in the WS° mixture(m) which is the the result
of successful mixing. The definite NP in Example 4a
&amp;quot;the dough&amp;quot; both takes m as an antecedent and pro-
vides more information about m&apos;s make-up — that it
is dough. The definite reference resolution algorithm
applies the knowledge that the existence of a mixture
in the discourse is consistent with that mixture being
dough, and the discourse is updated with dough(m).
The application of unsound inference, in this case
that the mixture is dough (or in 4b, paste, or in 4c,
batter) is supported in a backchaining environment
via the following axioms:
</bodyText>
<reference confidence="0.871239666666667">
[mixture(X)] ==&gt; [dough(X)]
[mixture(X)] ==&gt; [paste(X)]
[mixture(X)] ==&gt; [batter(X)]
</reference>
<page confidence="0.995062">
100
</page>
<bodyText confidence="0.999896333333333">
This axiomatization is problematic in not prevent-
ing the back chainer from proving that the mixture
which was subsequently referred to as dough, is also
a batter. That is, there is no mechanism which treats
the axioms as being mutually exclusive. This is han-
dled by a consistency checker which takes every new
assertation to the discourse model, and determines
that it is consistent with all 1-place relations that
hold of the entity.
</bodyText>
<subsectionHeader confidence="0.667459">
Disjunctive Knowledge about Actions
</subsectionHeader>
<bodyText confidence="0.9994331">
The various forms of partial specification of actions
can be represented as explicit disjunction in an ac-
tion knowledge base.7 For example, mix has sev-
eral operator realizations that reflect the action&apos;s
completion and its success. The first category of
(un)successfully (in)completed actions is represented
by an event modifier which determines which action
description is pulled from the action KB. In the case
of mixing, successfully completed actions are repre-
sented more fully as:
</bodyText>
<figure confidence="0.5671648">
mix(EJA) k complete(E) k successful(E)
precond: [manipulable(X)]
delete: [manipulable(X)]
postcond: [mixture(M) &amp; manipulable(M)
k constituents0f(M,X)]
</figure>
<bodyText confidence="0.999400625">
This is the same basic representation as before, ex-
cept with the &apos;to be mixed&apos; entities unspecified, and
the event modifiers added.
Agents differ in their expectations about incom-
plete mixing action. The following entry has the
same preconditions and delete list as above, but the
post-condition differs in that there is no mixture in-
troduced to the discourse.
</bodyText>
<sectionHeader confidence="0.88767225" genericHeader="method">
mix(E,X) &amp; incomplete(E)
precond: [manipulable(X)]
delete: [manipulable(X)]
postcond: CI
</sectionHeader>
<bodyText confidence="0.981030133333333">
A different agent could have a different characteriza-
tion of incomplete mixings — for example, a postcon-
dition introducing an entity describable as mess (m),
or incomplete\_mixture(m). The point is that de-
gree of completion does effect the introduction of new
entities into the discourse model. One can envision
other event modifiers that change the impact of an
action on the WS°, either with properties of entities
changing or individuals being introduced or not.
7An abstraction hierarchy has not yet been constructed.
The next class of disjunctive action descriptions
are those that introduce contingencies that are not
naturally handled by event modifiers as above. Con-
sider the following representations of two different
outcomes of sauteing garlic:
</bodyText>
<figure confidence="0.9148645">
saute(E,Y,X) k complete(E)
precond: [sauteable(Y)]
delete: []
postcond: [sauteed(Y) &amp; burnt_bits(X)]
saute(E,Y) k complete(E)
precond: [sauteable(Y)]
delete: El
postcond: [sauteed(Y)]
</figure>
<bodyText confidence="0.9999636">
The only difference in the entries is that one intro-
duces burnt bits and the other does not. Ideally, one
would like to combine these representations under a
single, more abstract entry, such as proposed in [18].
Even with appropriate abstract operators though,
the fact that we are modelling discourse introduces
a further complication. That is, instructions may
address several contingencies in the discourse, so the
issue is not that one must be chosen for the discourse,
but any number may be mentioned, for example
</bodyText>
<subsectionHeader confidence="0.625877">
Example 7
</subsectionHeader>
<bodyText confidence="0.989892285714286">
Dribble 1/2 c. oil into the egg yolks, beating
steadily. If you do this carefully, the result
will be mayonnaise. If it curdles, start again.
This is a substantial challenge to representing the
meaning of instructions in the discourse model be-
cause (as above) the various outcomes of an action
may be mutually exclusive. Here, successful comple-
tion of the action introduces &apos;mayonnaise(m)&apos; into
the discourse model, while unsuccessful completion
introduces &apos;curdled_mess(m)&apos;.
One possible solution is to partition the discourse
model into different contexts, corresponding to dif-
ferent outcomes. This too has been left for future
exploration.
</bodyText>
<page confidence="0.996173">
101
</page>
<bodyText confidence="0.989476428571429">
Conclusion 102 [8] Grosz, B. The Representation and Use of Fo-
We hope to have shown that is is both necessary cus in Dialogue Understanding. Technical Note
and possible to integrate the two types of context 151, Artificial Intelligence Center, SRI Interna-
change mechanisms previously discussed in the lit- tional, 1977.
erature. The proposed integration requires sensitiv- [9] Hayes, Patrick. Naive Physics I: Ontology
ity to both syntactic/semantic features of Natural for Liquids. Reprinted in J. Hobbs and R.
Language text (such as definiteness, tense, mood,etc) Moore (eds.), Formal Theories of the Com-
and to the same beliefs about actions that an agent monsense World. Norwood NJ: ABLEX Pub-
uses in planning and plan inference. As such, one lishing, 1985.
has some hope that as we become more able to en- [10] Heim, I. The Semantics of Definite and Indef-
dow Natural Language systems with abilities to plan inite Noun Phrases. PhD dissertation, Univer-
and recognize the plans of others, we will also be able sity of Massachusetts, Amherst MA, 1982.
to endow them with greater language processing ca- [11] Kamp, H. A Theory of Truth and Semantic
pabilities as well. Representation. In J. Groenendijk, T. Janssen
</bodyText>
<reference confidence="0.988956304347826">
References and M. Stokhof (eds.), Truth, Interpretation
[1] Asher, N. A Typology for Attitude Verbs and and Information, Dordrecht: Foris, 1981, pp.
their Anaphoric Properties. Linguistics and 1-41.
Philosophy 10(2), May 1987, pp. 125-198. [12] Kamp, H. and Rohrer, C. manuscript of book
[2] Norman Badler, Bonnie Webber, Jeff Esakov on temporal reference. To appear.
and Jugal Kalita. Animation from Instruc- [13] Kautz, H. A Circumscriptive Theory of Plan
tions. Making Them Move: Mechanics, Con- Recognition. In J. Morgan, P. Cohen and M.
twl and Animation of Articulated Figures. Pollack (eds.), Intentions in Communication.
Morgan-Kaufmann, 1990. Cambrdige MA: MIT Press, 1990.
[3] Dale, R. Generating Referring Expressions: [14] Levison, L. Action Composition for the Ani-
Constructing Descriptions in a Domain of Ob- mation of Natural Language Instructions. Dept
jects and Processes. PhD Thesis, University of of Computer &amp; Information Science, Univ. of
Edinburgh, 1989. (Cambridge MA: MIT Press, Pennsylvania, Technical Report MS-CIS-91-
forthcoming). 28, September 1991.
[4] Di Eugenio, B. Action Representation for Nat- [15] Lewis, D. Scorekeeping in a Language Game.
ural Language Instructions. Proc. 1991 Annual J. Philosophical Logic 8, 1979, pp. 339-359.
Meeting of the Assoc. for Computational Lin- [16] Linguistics and Philosophy 9(1), February
guistics, Berkeley CA, June 1991, pp. 333-334. 1986. Special issue on Tense and Aspect in Dis-
[5] Di Eugenio, B. Understanding Natural Lan- course.
guage Instructions: The Case of Purpose [17] Roberts, C. Modal Subordination
Clauses. Proc. 1992 Annual Meeting of the and Pronominal Anaphora in Discourse. Lin-
Assoc. for Computational Linguistics, Newark guistics and Philosophy 12(6), December 1989,
DL, July 1992. pp. 683-721.
[6] Di Eugenio, B. and Webber, B. Plan Recogni- [18] Tenenberg, J. Inheritance in Automated Plan-
tion in Understanding Instructions. Proc. First ning. Proc. Principles of Knowledge Represen-
Intl Conf. on Al Planning Systems, College tation and Reasoning (KR&apos;89), Morgan Kauf-
Park MD, June 1992. mann, 1989, pp. 475-485.
[7] Di Eugenio, B. and White, M. On the Interpre- [19] Webber, B. A Formal Approach to Discourse
tation of Natural Language Instructions. Proc. Anaphora. Technical Report 3761, Bolt Be-
1992 Int. Conf. on Computational Linguistics ranek and Newman, Cambridge MA, 1978.
(COLING-92), Nantes, France, July 1992. (Published by Garland Press, New York,
1979.)
[20] Webber, B., Badler, N., Di Eugenio, B., Levi-
son, L. and White, M. Instructing Animated
Agents. Proc. First US—Japan Workshop on
Integrated Systems in Multi-Media Environ-
ments, Las Cruces NM, December 1991.
[21] Woods, W., Kaplan, R. and Nash-Webber, B.
The Lunar Sciences Natural Language Infor-
mation System: Final Report. Technical Re-
port 2378, Bolt Beranek and Newman, Cam-
bridge MA, 1972.
[22] Woods, W. Semantics and Quantification in
Natural Language Question Answering. Ad-
vances in Computers, Volume 17, Academic
Press, 1978.
</reference>
<page confidence="0.999298">
103
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.366433">
<title confidence="0.988731">ACCOMMODATING CONTEXT CHANGE</title>
<author confidence="0.999551">Bonnie Lynn Webber</author>
<author confidence="0.999551">Breck Baldwin</author>
<affiliation confidence="0.9999">Department of Computer and Information Science University of Pennsylvania</affiliation>
<address confidence="0.999349">Philadelphia, PA 19104-6389</address>
<email confidence="0.492793">Internet:{bonnieacentral,breckalinc}.cis.upenn.edu*</email>
<abstract confidence="0.914943666666667">Two independent mechanisms of context change have been discussed separately in the literature —</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="false">
<note>dough(X</note>
<marker>[mixture(X)]</marker>
<rawString>==&gt; [dough(X)]</rawString>
</citation>
<citation valid="false">
<note>paste(X</note>
<marker>[mixture(X)]</marker>
<rawString>==&gt; [paste(X)]</rawString>
</citation>
<citation valid="false">
<editor>batter(X)] References and M. Stokhof (eds.),</editor>
<location>Truth, Interpretation</location>
<marker>[mixture(X)]</marker>
<rawString>==&gt; [batter(X)] References and M. Stokhof (eds.), Truth, Interpretation</rawString>
</citation>
<citation valid="true">
<authors>
<author>N Asher</author>
</authors>
<title>A Typology for Attitude Verbs and and Information,</title>
<date>1981</date>
<journal>Philosophy</journal>
<volume>10</volume>
<issue>2</issue>
<pages>125--198</pages>
<location>Dordrecht: Foris,</location>
<note>manuscript of book</note>
<contexts>
<context position="5880" citStr="[1]" startWordPosition="936" endWordPosition="936"> or have a semantic association with an existing card, allowing it to be accommodated into the discourse. In the latter case, a new file card is inserted in the input file which the definite NP is now taken as mapping to. Context change therefore consists of new annotations to existing cards and new cards added for indefinite NPs and accommodated definite NPs. The files do not change in any other way that reflects events described in the text. Formal theories of discourse have been broadened to allow for types of &amp;quot;embedded contexts&amp;quot; associated with modals [17] and with propositional attitudes [1]. Although they have also begun to deal with problems of tense and the temporal relationship of events described in a text [12; 16], there is still no connection between the events described in a text and the individuals introduced therein. Context change by event simulation is a feature of Dale&apos;s recent Natural Language generation system EPICURE [3], which generates recipe texts from an underlying plan representation. In EPICURE, the individuals available for reference change in step with the events described in the text.2 In a sense, EPICURE is simulating the effects of the events that the t</context>
</contexts>
<marker>[1]</marker>
<rawString>Asher, N. A Typology for Attitude Verbs and and Information, Dordrecht: Foris, 1981, pp. their Anaphoric Properties. Linguistics and 1-41. Philosophy 10(2), May 1987, pp. 125-198. [12] Kamp, H. and Rohrer, C. manuscript of book</rawString>
</citation>
<citation valid="true">
<authors>
<author>Norman Badler</author>
<author>Bonnie Webber</author>
</authors>
<title>Jeff Esakov on temporal reference. To appear. and Jugal Kalita. Animation from Instruc- [13] Kautz, H. A Circumscriptive Theory of Plan tions. Making Them Move: Mechanics, Con- Recognition.</title>
<date>1990</date>
<booktitle>twl and Animation of Articulated Figures. Pollack (eds.), Intentions in Communication. Morgan-Kaufmann,</booktitle>
<editor>In J. Morgan, P. Cohen and M.</editor>
<publisher>MIT Press,</publisher>
<contexts>
<context position="3187" citStr="[2; 4; 5; 6; 7; 14; 20]" startWordPosition="489" endWordPosition="495">uch integration to be effective, we argue that it must be based on a representation of events that captures people&apos;s uncertainty about their outcome — in particular, people&apos;s incomplete expectations about the changes effected by events. An understanding system can then use these expectations to accommodate [15] the particular changes that are mentioned in subsequent discourse (Section 3). In Section 4, we discuss our initial implementation of these ideas. This work is being carried out as part of a project (AnimNL) aimed at creating animated task simulations from Natural Language instructions [2; 4; 5; 6; 7; 14; 20]. Instructions are a form of text rich in the specification of events intended to alter the world in some way. Because of this, the issues discussed in this paper are particularly important to both understanding and generating instructions. &apos;Event is used informally to mean any kind of action or process. 96 Mechanisms of Context Change Computational Linguistics research has recognized two independent mechanisms of context change. The first to have been recognized might be called context change by entity introduction. It was first implemented in Woods&apos; question-answering system LUNAR [21; 22]. </context>
</contexts>
<marker>[2]</marker>
<rawString>Norman Badler, Bonnie Webber, Jeff Esakov on temporal reference. To appear. and Jugal Kalita. Animation from Instruc- [13] Kautz, H. A Circumscriptive Theory of Plan tions. Making Them Move: Mechanics, Con- Recognition. In J. Morgan, P. Cohen and M. twl and Animation of Articulated Figures. Pollack (eds.), Intentions in Communication. Morgan-Kaufmann, 1990. Cambrdige MA: MIT Press, 1990.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Dale</author>
</authors>
<title>Generating Referring Expressions: [14] Levison, L. Action Composition for the AniConstructing Descriptions in a Domain of Ob- mation of Natural Language Instructions. Dept jects and Processes.</title>
<date>1989</date>
<tech>PhD Thesis,</tech>
<publisher>MIT Press,</publisher>
<institution>University of of Computer &amp; Information Science, Univ. of Edinburgh,</institution>
<location>Cambridge MA:</location>
<contexts>
<context position="6232" citStr="[3]" startWordPosition="995" endWordPosition="995">inite NPs. The files do not change in any other way that reflects events described in the text. Formal theories of discourse have been broadened to allow for types of &amp;quot;embedded contexts&amp;quot; associated with modals [17] and with propositional attitudes [1]. Although they have also begun to deal with problems of tense and the temporal relationship of events described in a text [12; 16], there is still no connection between the events described in a text and the individuals introduced therein. Context change by event simulation is a feature of Dale&apos;s recent Natural Language generation system EPICURE [3], which generates recipe texts from an underlying plan representation. In EPICURE, the individuals available for reference change in step with the events described in the text.2 In a sense, EPICURE is simulating the effects of the events that the text describes. In implementing this, Dale represents actions with STRIPS-like operators which can change the world from one state to another. Each object and state in EPICURE has a unique index, with the set of objects available in a given state constituting its working set. With respect to objects3, an action can have two types of effects: it can ch</context>
</contexts>
<marker>[3]</marker>
<rawString>Dale, R. Generating Referring Expressions: [14] Levison, L. Action Composition for the AniConstructing Descriptions in a Domain of Ob- mation of Natural Language Instructions. Dept jects and Processes. PhD Thesis, University of of Computer &amp; Information Science, Univ. of Edinburgh, 1989. (Cambridge MA: MIT Press, Pennsylvania, Technical Report MS-CIS-91-forthcoming). 28, September 1991.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Di Eugenio</author>
</authors>
<title>Action Representation for Nat- [15] Lewis, D. Scorekeeping in a Language Game. ural Language Instructions.</title>
<date>1991</date>
<journal>Annual J. Philosophical Logic</journal>
<booktitle>Proc.</booktitle>
<volume>8</volume>
<pages>339--359</pages>
<location>Berkeley CA,</location>
<note>Special issue on Tense and Aspect in Dis-</note>
<contexts>
<context position="3187" citStr="[2; 4; 5; 6; 7; 14; 20]" startWordPosition="489" endWordPosition="495">uch integration to be effective, we argue that it must be based on a representation of events that captures people&apos;s uncertainty about their outcome — in particular, people&apos;s incomplete expectations about the changes effected by events. An understanding system can then use these expectations to accommodate [15] the particular changes that are mentioned in subsequent discourse (Section 3). In Section 4, we discuss our initial implementation of these ideas. This work is being carried out as part of a project (AnimNL) aimed at creating animated task simulations from Natural Language instructions [2; 4; 5; 6; 7; 14; 20]. Instructions are a form of text rich in the specification of events intended to alter the world in some way. Because of this, the issues discussed in this paper are particularly important to both understanding and generating instructions. &apos;Event is used informally to mean any kind of action or process. 96 Mechanisms of Context Change Computational Linguistics research has recognized two independent mechanisms of context change. The first to have been recognized might be called context change by entity introduction. It was first implemented in Woods&apos; question-answering system LUNAR [21; 22]. </context>
</contexts>
<marker>[4]</marker>
<rawString>Di Eugenio, B. Action Representation for Nat- [15] Lewis, D. Scorekeeping in a Language Game. ural Language Instructions. Proc. 1991 Annual J. Philosophical Logic 8, 1979, pp. 339-359. Meeting of the Assoc. for Computational Lin- [16] Linguistics and Philosophy 9(1), February guistics, Berkeley CA, June 1991, pp. 333-334. 1986. Special issue on Tense and Aspect in Dis-</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Di Eugenio</author>
</authors>
<title>Understanding Natural Lan- course. guage Instructions: The Case of Purpose [17] Roberts, C. Modal Subordination Clauses.</title>
<date>1989</date>
<booktitle>Proc. 1992 Annual Meeting of the and Pronominal Anaphora in Discourse. LinAssoc. for Computational Linguistics, Newark guistics and Philosophy</booktitle>
<volume>12</volume>
<issue>6</issue>
<pages>683--721</pages>
<location>DL,</location>
<contexts>
<context position="3187" citStr="[2; 4; 5; 6; 7; 14; 20]" startWordPosition="489" endWordPosition="495">uch integration to be effective, we argue that it must be based on a representation of events that captures people&apos;s uncertainty about their outcome — in particular, people&apos;s incomplete expectations about the changes effected by events. An understanding system can then use these expectations to accommodate [15] the particular changes that are mentioned in subsequent discourse (Section 3). In Section 4, we discuss our initial implementation of these ideas. This work is being carried out as part of a project (AnimNL) aimed at creating animated task simulations from Natural Language instructions [2; 4; 5; 6; 7; 14; 20]. Instructions are a form of text rich in the specification of events intended to alter the world in some way. Because of this, the issues discussed in this paper are particularly important to both understanding and generating instructions. &apos;Event is used informally to mean any kind of action or process. 96 Mechanisms of Context Change Computational Linguistics research has recognized two independent mechanisms of context change. The first to have been recognized might be called context change by entity introduction. It was first implemented in Woods&apos; question-answering system LUNAR [21; 22]. </context>
</contexts>
<marker>[5]</marker>
<rawString>Di Eugenio, B. Understanding Natural Lan- course. guage Instructions: The Case of Purpose [17] Roberts, C. Modal Subordination Clauses. Proc. 1992 Annual Meeting of the and Pronominal Anaphora in Discourse. LinAssoc. for Computational Linguistics, Newark guistics and Philosophy 12(6), December 1989, DL, July 1992. pp. 683-721.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Di Eugenio</author>
<author>B Plan Webber</author>
</authors>
<title>Recogni- [18] Tenenberg, J. Inheritance in Automated Plantion in Understanding Instructions.</title>
<date>1992</date>
<booktitle>Proc. First ning. Proc. Principles of Knowledge RepresenIntl Conf. on Al Planning Systems, College tation and Reasoning (KR&apos;89), Morgan KaufPark MD,</booktitle>
<pages>475--485</pages>
<note>mann,</note>
<contexts>
<context position="3187" citStr="[2; 4; 5; 6; 7; 14; 20]" startWordPosition="489" endWordPosition="495">uch integration to be effective, we argue that it must be based on a representation of events that captures people&apos;s uncertainty about their outcome — in particular, people&apos;s incomplete expectations about the changes effected by events. An understanding system can then use these expectations to accommodate [15] the particular changes that are mentioned in subsequent discourse (Section 3). In Section 4, we discuss our initial implementation of these ideas. This work is being carried out as part of a project (AnimNL) aimed at creating animated task simulations from Natural Language instructions [2; 4; 5; 6; 7; 14; 20]. Instructions are a form of text rich in the specification of events intended to alter the world in some way. Because of this, the issues discussed in this paper are particularly important to both understanding and generating instructions. &apos;Event is used informally to mean any kind of action or process. 96 Mechanisms of Context Change Computational Linguistics research has recognized two independent mechanisms of context change. The first to have been recognized might be called context change by entity introduction. It was first implemented in Woods&apos; question-answering system LUNAR [21; 22]. </context>
</contexts>
<marker>[6]</marker>
<rawString>Di Eugenio, B. and Webber, B. Plan Recogni- [18] Tenenberg, J. Inheritance in Automated Plantion in Understanding Instructions. Proc. First ning. Proc. Principles of Knowledge RepresenIntl Conf. on Al Planning Systems, College tation and Reasoning (KR&apos;89), Morgan KaufPark MD, June 1992. mann, 1989, pp. 475-485.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Di Eugenio</author>
<author>M White</author>
</authors>
<title>On the Interpre- [19] Webber, B. A Formal Approach to Discourse tation of Natural Language Instructions.</title>
<date>1978</date>
<booktitle>Bolt Be1992 Int. Conf. on Computational Linguistics ranek and Newman,</booktitle>
<tech>Proc. Anaphora. Technical Report 3761,</tech>
<publisher>Garland Press,</publisher>
<location>Cambridge MA,</location>
<note>Published by</note>
<contexts>
<context position="3187" citStr="[2; 4; 5; 6; 7; 14; 20]" startWordPosition="489" endWordPosition="495">uch integration to be effective, we argue that it must be based on a representation of events that captures people&apos;s uncertainty about their outcome — in particular, people&apos;s incomplete expectations about the changes effected by events. An understanding system can then use these expectations to accommodate [15] the particular changes that are mentioned in subsequent discourse (Section 3). In Section 4, we discuss our initial implementation of these ideas. This work is being carried out as part of a project (AnimNL) aimed at creating animated task simulations from Natural Language instructions [2; 4; 5; 6; 7; 14; 20]. Instructions are a form of text rich in the specification of events intended to alter the world in some way. Because of this, the issues discussed in this paper are particularly important to both understanding and generating instructions. &apos;Event is used informally to mean any kind of action or process. 96 Mechanisms of Context Change Computational Linguistics research has recognized two independent mechanisms of context change. The first to have been recognized might be called context change by entity introduction. It was first implemented in Woods&apos; question-answering system LUNAR [21; 22]. </context>
</contexts>
<marker>[7]</marker>
<rawString>Di Eugenio, B. and White, M. On the Interpre- [19] Webber, B. A Formal Approach to Discourse tation of Natural Language Instructions. Proc. Anaphora. Technical Report 3761, Bolt Be1992 Int. Conf. on Computational Linguistics ranek and Newman, Cambridge MA, 1978. (COLING-92), Nantes, France, July 1992. (Published by Garland Press, New York, 1979.)</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Webber</author>
<author>N Badler</author>
<author>B Di Eugenio</author>
<author>L Levison</author>
<author>M White</author>
</authors>
<title>Instructing Animated Agents.</title>
<date>1991</date>
<booktitle>Proc. First US—Japan Workshop on Integrated Systems in Multi-Media Environments, Las Cruces NM,</booktitle>
<contexts>
<context position="3187" citStr="[2; 4; 5; 6; 7; 14; 20]" startWordPosition="489" endWordPosition="495">uch integration to be effective, we argue that it must be based on a representation of events that captures people&apos;s uncertainty about their outcome — in particular, people&apos;s incomplete expectations about the changes effected by events. An understanding system can then use these expectations to accommodate [15] the particular changes that are mentioned in subsequent discourse (Section 3). In Section 4, we discuss our initial implementation of these ideas. This work is being carried out as part of a project (AnimNL) aimed at creating animated task simulations from Natural Language instructions [2; 4; 5; 6; 7; 14; 20]. Instructions are a form of text rich in the specification of events intended to alter the world in some way. Because of this, the issues discussed in this paper are particularly important to both understanding and generating instructions. &apos;Event is used informally to mean any kind of action or process. 96 Mechanisms of Context Change Computational Linguistics research has recognized two independent mechanisms of context change. The first to have been recognized might be called context change by entity introduction. It was first implemented in Woods&apos; question-answering system LUNAR [21; 22]. </context>
</contexts>
<marker>[20]</marker>
<rawString>Webber, B., Badler, N., Di Eugenio, B., Levison, L. and White, M. Instructing Animated Agents. Proc. First US—Japan Workshop on Integrated Systems in Multi-Media Environments, Las Cruces NM, December 1991.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W Woods</author>
<author>R Kaplan</author>
<author>B Nash-Webber</author>
</authors>
<title>The Lunar Sciences Natural Language Information System: Final Report.</title>
<date>1972</date>
<tech>Technical Report 2378,</tech>
<institution>Bolt Beranek and Newman,</institution>
<location>Cambridge MA,</location>
<contexts>
<context position="3785" citStr="[21; 22]" startWordPosition="588" endWordPosition="589">7; 14; 20]. Instructions are a form of text rich in the specification of events intended to alter the world in some way. Because of this, the issues discussed in this paper are particularly important to both understanding and generating instructions. &apos;Event is used informally to mean any kind of action or process. 96 Mechanisms of Context Change Computational Linguistics research has recognized two independent mechanisms of context change. The first to have been recognized might be called context change by entity introduction. It was first implemented in Woods&apos; question-answering system LUNAR [21; 22]. For each non-anaphoric referential noun phrase (NP) in a question, including a questioned NP itself, LUNAR would create a new constant symbol to represent the new entity, putting an appropriate description on its property list. For example, if asked the question &amp;quot;Which breccias contain molybdenum?&amp;quot;, LUNAR would create one new constant to represent molybdenum and another to represent the set of breccias which contain molybdenum. Each new constant would be added to the front of LUNAR&apos;s history list, thereby making it available as a potential referent for subsequent pronominal and definite NP a</context>
</contexts>
<marker>[21]</marker>
<rawString>Woods, W., Kaplan, R. and Nash-Webber, B. The Lunar Sciences Natural Language Information System: Final Report. Technical Report 2378, Bolt Beranek and Newman, Cambridge MA, 1972.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W Woods</author>
</authors>
<title>Semantics and Quantification in Natural Language Question Answering.</title>
<date>1978</date>
<booktitle>Advances in Computers, Volume 17,</booktitle>
<publisher>Academic Press,</publisher>
<contexts>
<context position="3785" citStr="[21; 22]" startWordPosition="588" endWordPosition="589">7; 14; 20]. Instructions are a form of text rich in the specification of events intended to alter the world in some way. Because of this, the issues discussed in this paper are particularly important to both understanding and generating instructions. &apos;Event is used informally to mean any kind of action or process. 96 Mechanisms of Context Change Computational Linguistics research has recognized two independent mechanisms of context change. The first to have been recognized might be called context change by entity introduction. It was first implemented in Woods&apos; question-answering system LUNAR [21; 22]. For each non-anaphoric referential noun phrase (NP) in a question, including a questioned NP itself, LUNAR would create a new constant symbol to represent the new entity, putting an appropriate description on its property list. For example, if asked the question &amp;quot;Which breccias contain molybdenum?&amp;quot;, LUNAR would create one new constant to represent molybdenum and another to represent the set of breccias which contain molybdenum. Each new constant would be added to the front of LUNAR&apos;s history list, thereby making it available as a potential referent for subsequent pronominal and definite NP a</context>
</contexts>
<marker>[22]</marker>
<rawString>Woods, W. Semantics and Quantification in Natural Language Question Answering. Advances in Computers, Volume 17, Academic Press, 1978.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>