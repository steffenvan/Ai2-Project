<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.068693">
<title confidence="0.930609">
BE: A Search Engine for NLP Research
</title>
<author confidence="0.90364">
Michael J. Cafarella, Oren Etzioni
</author>
<affiliation confidence="0.9023875">
Department of Computer Science and Engineering
University of Washington
</affiliation>
<address confidence="0.670148">
Seattle, WA 98195-2350
</address>
<email confidence="0.973668">
{mjc,etzioni}@cs.washington.edu
</email>
<bodyText confidence="0.999028736842105">
Many modern natural language-processing applica-
tions utilize search engines to locate large numbers of
Web documents or to compute statistics over the Web
corpus. Yet Web search engines are designed and op-
timized for simple human queries—they are not well
suited to support such applications. As a result, these
applications are forced to issue millions of successive
queries resulting in unnecessary search engine load and
in slow applications with limited scalability.
In response, we have designed the Bindings Engine
(BE), which supports queries containing typed vari-
ables and string-processing functions (Cafarella and
Etzioni, 2005). For example, in response to the query
“powerful (noun)” BE will return all the nouns in its
index that immediately follow the word “powerful”,
sorted by frequency. (Figure 1 shows several possible
BE queries.) In response to the query “Cities such as
ProperNoun(Head((NounPhrase)))”, BE will return a
list of proper nouns likely to be city names.
</bodyText>
<figure confidence="0.340886">
president Bush &lt;Verb&gt;
</figure>
<figureCaption confidence="0.681846333333333">
cities such as ProperNoun(Head(&lt;NounPhrase&gt;))
&lt;NounPhrase&gt; is the CEO of &lt;NounPhrase&gt;
Figure 1: Examples of queries that can be handled
</figureCaption>
<bodyText confidence="0.955090195121951">
by BE. Queries that include typed variables and
string-processing functions allow certain NLP tasks
to be done very efficiently.
BE’s novel neighborhood index enables it to do so
with O(k) random disk seeks and O(k) serial disk
reads, where k is the number of non-variable terms in
its query. A standard search engine requires O(k + B)
random disk seeks, where B is the number of vari-
able “bindings” found in the corpus. Since B is typ-
ically very large, BE vastly reduces the number of ran-
dom disk seeks needed to process a query. Such seeks
operate very slowly and make up the bulk of query-
processing time. As a result, BE can yield several
orders of magnitude speedup for large-scale language-
processing applications. The main cost is a modest in-
crease in space to store the index.
To illustrate BE’s capabilities, we have built an ap-
plication to support interactive information extraction
in response to simple user queries. For example, in re-
sponse to the user query “insects”, the application re-
turns the results shown in Figure 2. The application
Figure 2: Most-frequently-seen extractions for
query “insects”. The score for each extraction is the
number of times it was retrieved over several BE ex-
traction phrases.
generates this list by using the query term to instantiate
a set of generic extraction phrase queries such as “in-
sects such as (NounPhrase)”. In effect, the application
is doing a kind of query expansion to enable naive users
to extract information. In an effort to find high-quality
extractions, we sort the list by the hit count for each
binding, summed over all the queries.
The key difference between this BE application,
called KNOWITNOW, and domain-independent infor-
mation extraction systems such as KNOWITALL (Et-
zioni et al., 2005) is that BE enables extraction at in-
teractive speeds — the average time to expand and re-
spond to a user query is between 1 and 45 seconds.
With additional optimization, we believe we can reduce
that time to 5 seconds or less. A detailed description of
KNOWITNOW appears in (Cafarella et al., 2005).
</bodyText>
<sectionHeader confidence="0.997432" genericHeader="abstract">
References
</sectionHeader>
<reference confidence="0.9811765">
M. Cafarella and O. Etzioni. 2005. A Search En-
gine for Natural Language Applications. In Procs.
of the 14th International World Wide Web Confer-
ence (WWW 2005).
M. Cafarella, D. Downey, S. Soderland, and O. Etzioni.
2005. Knowitnow: Fast, scalable information ex-
traction from the web. In Procs. of EMNLP.
O. Etzioni, M. Cafarella, D. Downey, S. Kok,
A. Popescu, T. Shaked, S. Soderland, D. Weld, and
A. Yates. 2005. Unsupervised named-entity extrac-
tion from the web: An experimental study. Artificial
Intelligence, 165(1):91–134.
</reference>
<page confidence="0.9951345">
9
10
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.099427">
<title confidence="0.997778">BE: A Search Engine for NLP Research</title>
<author confidence="0.999995">Michael J Cafarella</author>
<author confidence="0.999995">Oren</author>
<affiliation confidence="0.999797">Department of Computer Science and University of</affiliation>
<address confidence="0.978144">Seattle, WA</address>
<abstract confidence="0.993695109375">Many modern natural language-processing applications utilize search engines to locate large numbers of Web documents or to compute statistics over the Web corpus. Yet Web search engines are designed and optimized for simple human queries—they are not well suited to support such applications. As a result, these applications are forced to issue millions of successive queries resulting in unnecessary search engine load and in slow applications with limited scalability. In response, we have designed the Bindings Engine which supports queries containing varifunctions and Etzioni, 2005). For example, in response to the query will return all the nouns in its index that immediately follow the word “powerful”, sorted by frequency. (Figure 1 shows several possible queries.) In response to the query such as BE will return a list of proper nouns likely to be city names. Bush such as the CEO of Figure 1: Examples of queries that can be handled by BE. Queries that include typed variables and string-processing functions allow certain NLP tasks to be done very efficiently. novel index it to do so disk seeks and disk where the number of non-variable terms in query. A standard search engine requires disk seeks, where the number of vari- “bindings” found in the corpus. Since typically very large, BE vastly reduces the number of random disk seeks needed to process a query. Such seeks operate very slowly and make up the bulk of queryprocessing time. As a result, BE can yield several orders of magnitude speedup for large-scale languageprocessing applications. The main cost is a modest increase in space to store the index. To illustrate BE’s capabilities, we have built an application to support interactive information extraction in response to simple user queries. For example, in response to the user query “insects”, the application returns the results shown in Figure 2. The application Figure 2: Most-frequently-seen extractions for query “insects”. The score for each extraction is the number of times it was retrieved over several BE extraction phrases. generates this list by using the query term to instantiate a set of generic extraction phrase queries such as “insuch as In effect, the application is doing a kind of query expansion to enable naive users to extract information. In an effort to find high-quality extractions, we sort the list by the hit count for each binding, summed over all the queries. The key difference between this BE application, and domain-independent inforextraction systems such as (Etzioni et al., 2005) is that BE enables extraction at interactive speeds — the average time to expand and respond to a user query is between 1 and 45 seconds. With additional optimization, we believe we can reduce that time to 5 seconds or less. A detailed description of in (Cafarella et al., 2005).</abstract>
<title confidence="0.705143">References</title>
<author confidence="0.509135">A Search Enfor Natural Language Applications In</author>
<note confidence="0.87730575">of the 14th International World Wide Web Confer- (WWW M. Cafarella, D. Downey, S. Soderland, and O. Etzioni. 2005. Knowitnow: Fast, scalable information exfrom the web. In of O. Etzioni, M. Cafarella, D. Downey, S. Kok, A. Popescu, T. Shaked, S. Soderland, D. Weld, and A. Yates. 2005. Unsupervised named-entity extracfrom the web: An experimental study. 165(1):91–134. 9 10</note>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>M Cafarella</author>
<author>O Etzioni</author>
</authors>
<title>A Search Engine for Natural Language Applications.</title>
<date>2005</date>
<booktitle>In Procs. of the 14th International World Wide Web Conference (WWW</booktitle>
<contexts>
<context position="837" citStr="Cafarella and Etzioni, 2005" startWordPosition="115" endWordPosition="118">n natural language-processing applications utilize search engines to locate large numbers of Web documents or to compute statistics over the Web corpus. Yet Web search engines are designed and optimized for simple human queries—they are not well suited to support such applications. As a result, these applications are forced to issue millions of successive queries resulting in unnecessary search engine load and in slow applications with limited scalability. In response, we have designed the Bindings Engine (BE), which supports queries containing typed variables and string-processing functions (Cafarella and Etzioni, 2005). For example, in response to the query “powerful (noun)” BE will return all the nouns in its index that immediately follow the word “powerful”, sorted by frequency. (Figure 1 shows several possible BE queries.) In response to the query “Cities such as ProperNoun(Head((NounPhrase)))”, BE will return a list of proper nouns likely to be city names. president Bush &lt;Verb&gt; cities such as ProperNoun(Head(&lt;NounPhrase&gt;)) &lt;NounPhrase&gt; is the CEO of &lt;NounPhrase&gt; Figure 1: Examples of queries that can be handled by BE. Queries that include typed variables and string-processing functions allow certain NLP</context>
</contexts>
<marker>Cafarella, Etzioni, 2005</marker>
<rawString>M. Cafarella and O. Etzioni. 2005. A Search Engine for Natural Language Applications. In Procs. of the 14th International World Wide Web Conference (WWW 2005).</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Cafarella</author>
<author>D Downey</author>
<author>S Soderland</author>
<author>O Etzioni</author>
</authors>
<title>Knowitnow: Fast, scalable information extraction from the web. In Procs. of EMNLP.</title>
<date>2005</date>
<marker>Cafarella, Downey, Soderland, Etzioni, 2005</marker>
<rawString>M. Cafarella, D. Downey, S. Soderland, and O. Etzioni. 2005. Knowitnow: Fast, scalable information extraction from the web. In Procs. of EMNLP.</rawString>
</citation>
<citation valid="true">
<authors>
<author>O Etzioni</author>
<author>M Cafarella</author>
<author>D Downey</author>
<author>S Kok</author>
<author>A Popescu</author>
<author>T Shaked</author>
<author>S Soderland</author>
<author>D Weld</author>
<author>A Yates</author>
</authors>
<title>Unsupervised named-entity extraction from the web: An experimental study.</title>
<date>2005</date>
<journal>Artificial Intelligence,</journal>
<volume>165</volume>
<issue>1</issue>
<marker>Etzioni, Cafarella, Downey, Kok, Popescu, Shaked, Soderland, Weld, Yates, 2005</marker>
<rawString>O. Etzioni, M. Cafarella, D. Downey, S. Kok, A. Popescu, T. Shaked, S. Soderland, D. Weld, and A. Yates. 2005. Unsupervised named-entity extraction from the web: An experimental study. Artificial Intelligence, 165(1):91–134.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>