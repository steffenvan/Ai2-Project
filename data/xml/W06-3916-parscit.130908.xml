<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.022026">
<title confidence="0.997264">
A Computational Theory of Inference for
Arithmetic Explanation
</title>
<author confidence="0.997931">
Albert Goldfain
</author>
<affiliation confidence="0.8371695">
Department of Computer Science and Engineering
Center for Cognitive Science
University at Buffalo
Buffalo, NY 14260
</affiliation>
<note confidence="0.694845">
ag33@ cse. buffalo. edu
</note>
<sectionHeader confidence="0.875927" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.9848766">
Mathematical understanding can be measured by a cognitive agent’s ability to ex-
plain itself, i.e., answer relevant questions about its mathematical activities. Two
inference techniques, rule-based inference and path-based inference, are applied
to an implemented computational cognitive agent using the SNePS knowledge-
representation, reasoning, and acting system.
</bodyText>
<sectionHeader confidence="0.996255" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.9999191">
When engaged in classroom mathematical activities, students are often en-
couraged to “show their work” as they progress towards a solution and to
“explain their answers” after a solution has been found. This justification,
required well before a student learns how to produce rigorous logical proofs,
is a demonstration that the student understands how the problem is solved
and why the obtained result is a solution. Students “show their work” by ex-
plicitly providing the intermediate computations needed to reach a solution.
When confronted with a problem of averaging, e.g., 2, 3, 15, and 20, students
should show the intermediate sum 2+3+15+20=40 and the intermediate di-
vision 40/4 = 10. Students show that they understand averaging in terms of
the simpler operations of addition and division.
Unlike human students, computers and calculators are usually expected
to produce fast, reliable results without an explanation. These results often
take the form of a numerical output devoid of intermediate calculations, lin-
guistic content, and problem-specific semantic information. In such a role,
the computer is a tool for the human user, a tool that produces the correct
answers without justification. However, in the field of artificial intelligence,
there are several reasons to design computational agents that can both produce
the correct answers and can explain their answers. Such agents could better
communicate and interoperate with human users. Knowing the “how” and
“why” behind mathematical routines is required for a computational model of
mathematical cognition in a cognitive agent. Extending these abilities can be
a great benefit to autonomous embodied agents that must reason in the real
world with minimal human interaction.
This paper is a preliminary investigation of the inferential and representa-
tional requirements for a computational agent that can produce mathematical
explanations at the level of basic arithmetic and counting. Explanation is
treated as a justification of procedural action (the kind of solution a student
might give), rather than as a formal proof (the kind of solution a mathemati-
cian might give).
</bodyText>
<sectionHeader confidence="0.958922" genericHeader="method">
2 Question Answering
</sectionHeader>
<bodyText confidence="0.9999715">
To probe a cognitive agent’s mathematical understanding, a series of questions
can be posed to the agent after it has completed a mathematical activity. For
example, if an agent has just determined that 2 is the greatest common divisor
of 8 and 6, a highly idealized explanation dialogue might look like the following:
</bodyText>
<footnote confidence="0.948200555555555">
Q1: Why is 2 the greatest common divisor of 8 and 6?
A1: 2 is the greatest of the common divisors of 8 and 6.
Q2: Why is 2 a common divisor of 8 and 6?
A2: 2 is a divisor of 8 and 2 is a divisor of 6.
Q3: Why is 2 a divisor of 6?
A3: There is a number that, when multiplied by 2, gives 6, and that number is 3.
Q4: Why is 2 times 3 = 6?
A4: Multiplication is repeated addition; 2 plus 2 is 4 and 4 plus 2 is 6
Q5: Why is 2 plus 2 = 4?
</footnote>
<construct confidence="0.946811125">
A5: When I count from 2 for two numbers I end up at 4
Q6: How do you know that you will end up at 4?
A6: I counted two groups of oranges, with 2 oranges in each, ending up with 4 total oranges.
Q7: What is 2?
A7: It is a number and the greatest common divisor of 8 and 6.
Q8: What is a number?
A8: Some examples are 2,4,6 and 8 . . . It is something that can be counted, added, multiplied . . . and something that can be the
result of finding a greatest common divisor
</construct>
<bodyText confidence="0.999964703703704">
A human addressee will likely stop short of such a detailed answer. How-
ever, for computational agents, such a dialogue will be a useful Turing-test-
style demonstration of mathematical understanding. The ability to produce
such answers demands a representational and inferential capacity beyond that
of just finding a greatest common divisor. During a dialogue, an agent may
need to: (1) call upon linguistic information (e.g., for A2 above), (2) call upon
real-world experiences (e.g., for A6 above), (3) infer the relationships between
procedures and their constituent sub-procedures (e.g., for A4 above), and (4)
infer relationships between concepts (e.g., for A8 above). The question for
a computational agent then becomes: where does this (required) additional
knowledge come from?
One answer to this question is to design an agent that accumulates knowl-
edge during a mathematical activity. The ability to assimilate newly inferred
material with existing knowledge is essential for mathematical understanding
[2]. Mathematical understanding is driven by doing things, not simply by
thinking about things. This is consistent with the cognitive foundations of
mathematics presented by Lakoff &amp; N´u˜nez [4], in which a metaphoric rela-
tionship is established between a human activity (such as object collection)
and a formal operation (such as addition).
The activity-driven nature of mathematical understanding can be wit-
nessed even in the developmentally early routine of counting. Children turn
a routine that is nothing more than a meaningless recitation of ordered words
(much like a nursery rhyme) into a tool for ascribing cardinal size and ordi-
nal position to real-world entities. The semantics of counting routines arises
from children performing tasks that require counting, not from the contem-
plation of number-name meanings. Outside the context of the number line,
number-names are meaningless identifiers.
</bodyText>
<sectionHeader confidence="0.995949" genericHeader="method">
3 SNePS
</sectionHeader>
<bodyText confidence="0.99995372">
My computational theory is implemented in the SNePS knowledge-
representation, reasoning, and acting system [11]. The fundamental data-
structure of SNePS is a propositional semantic network. A SNePS network
represents the beliefs of Cassie, the SNePS cognitive agent. A semantic net-
work is abstract enough to represent both numeric and linguistic information.
This is one of the reasons semantic networks have been used in models of
arithmetic word-problem solving [1]. Numeric information is basically syntac-
tic [8], but obtains a conceptual-role semantics [6] through integration with a
system such as SNePS.
Cassie’s acting system is SNeRE (the SNePS Rational Engine [3]). Acts
in SNePS are either primitive or complex. Primitive acts are the fundamental
repertoire of acts available to Cassie. Complex acts are composed of sets of
primitive acts that are structured by control acts (i.e., acts for sequencing,
iteration, and conditionals) and are bound to plans for performing them with
the ActPlan predicate function. SNePS has a uniform representation for both
conceptual and procedural knowledge so that all of Cassie’s SNeRE plans are
stored in the same network as her conceptual knowledge. Most importantly,
Cassie can add beliefs to her network while she is acting, constituting an
episodic memory of the act, which can be accessed during an act to prompt
further action or after an act for answering questions.
SNIP, the SNePS Inference Package, enables inferential operations over
the beliefs in Cassie’s network. This allows SNePS to serve as a logical rule-
based system. Commands for finding and deducing nodes (representing propo-
sitions) allow the user to ask Cassie questions and are the foundation for the
path-based and rule-based inference techniques described in the next section.
</bodyText>
<subsectionHeader confidence="0.876349">
3.1 Rule-Based Inference
</subsectionHeader>
<bodyText confidence="0.995101">
At the highest level of abstraction, an ActPlan for an arithmetic act is set up
as follows:
</bodyText>
<equation confidence="0.616218">
all(x,y)({Number(x),Number(y)} &amp;=&gt; ActPlan(Add(x,y),CountAdd(x,y))).
</equation>
<bodyText confidence="0.9997358">
The semantics of such a statement is roughly: If you can infer that both x
and y are numbers, then a plan for doing this generic arithmetic operation
(e.g., Add) is this specific arithmetic operation (e.g., CountAdd). When Cassie
is told to perform one of the generic arithmetic acts on two given inputs, say
perform Add(2,3), she produces the following sequence of inferences:1
</bodyText>
<listItem confidence="0.9884504">
(i) Try to deduce a plan for the act Add(2,3). This amounts to asking the
open question ActPlan(Add(2,3),?x)?.
(ii) Once Cassie finds an asserted node corresponding to Add(x,y), she
backchains and wonders whether Number(2) and Number(3) are asserted
beliefs.
(iii) Once Cassie determines that Number(2) and Number(3) both hold, she
retrieves the plan corresponding to the act Add(2,3). In this case, she
finds CountAdd(2,3).
(iv) Cassie then attempts to perform CountAdd(2,3) by finding a plan for
it.
</listItem>
<bodyText confidence="0.998551666666667">
This cycle of actions continues until Cassie completes the task. When a prim-
itive action is reached, Cassie does not try to further decompose the action.
During the course of executing a specific arithmetic operation, Cassie needs
to store the result using the CountSum case frame. We also want to be able
to say that each of these specific arithmetic results is a result for the abstract
act. Cassie is given the following rule:
</bodyText>
<equation confidence="0.890168">
all(x,y,z)(CountSum(x,y,z) =&gt; Sum(x,y,z)).
</equation>
<bodyText confidence="0.99978775">
This tells Cassie that a CountSum is a Sum per se. Thus, the moment Cassie
believes the result CountSum(2,3,5), she will infer Sum(2,3,5) by forward
chaining. This provides a specific and generic access point for arithmetic
results.
These arithmetic acts force Cassie to perform successively simpler opera-
tions. Rule-based inference establishes a connection between three things: a
general act (e.g., addition), a specific plan for performing that act (e.g., count-
addition), and a specific performance of that plan (e.g., the count-addition of
</bodyText>
<footnote confidence="0.6991345">
1 Cassie also checks whether an act has any preconditions and any effects. Since the
arithmetic operations involve mental acts only, we omit these inferences.
</footnote>
<bodyText confidence="0.999151">
2 and 3). Since Cassie explicitly deduces propositions at the knowledge level
using this technique, rule-based inference can be seen as a model of “con-
scious” inference (i.e., Cassie is attending to the information that triggers the
inference).
</bodyText>
<subsectionHeader confidence="0.956163">
3.2 Path-Based Inference
</subsectionHeader>
<bodyText confidence="0.999944730769231">
Paths in SNePS networks are ordered sequences of arc-labels between nodes.
Paths are specified using a syntax similar to regular expressions [9]. Path-
based techniques can be used as a model of unconscious inference for SNePS
agents [10]. A relation between nodes in a given network may be inferred by
the presence of a certain path between those nodes. This is an “unconscious”
activity, because the newly inferred relation is added to the agent’s belief space
without an explicit knowledge level deduction.
For each new number generated by a counting procedure, Cassie builds a
Successor relation to hold between that number and its immediate prede-
cessor. Using path-based inference, this link can be exploited to generate the
GreaterThan relation, which holds between each new number generated and
all preceding numbers.
Path-based inference takes advantage of the fact that Cassie’s knowledge is
stored in a semantic network, in which a node’s “meaning” is determined by its
position in the network relative to other nodes [5,6]. This type of inference can
also be used in SNePS to determine the conceptual-role semantics for vague
concepts such as “number”. To define a concept such as “number” in the
context of a completed arithmetic activity, a series of path-based inferences
can be performed to give the elements of the class number, to give the acts
with argument type number, and to give the operations that have thus far
resulted in numbers.
This technique can also be used to provide semantic meaning for arithmetic
procedures. The possibility of treating an arithmetic operation as either a
concrete object (as a node) and a process (as an ActPlan) during inference
is an important result of using SNePS to model mathematical understanding
(see [7]).
</bodyText>
<sectionHeader confidence="0.981677" genericHeader="conclusions">
4 Conclusion and Further Research
</sectionHeader>
<bodyText confidence="0.9999174">
Inference is central to explanations of all sorts. We have seen that for a
domain such as arithmetic, in which complex procedures can be rigidly built up
from simpler procedures, the knowledge inferred during an agent’s action can
provide a justification for that action. For a computational agent, the choice
of a knowledge-representation system determines the methods of inference
that can be applied. SNePS is particularly useful for implementing my theory
because it can be used as a logical rule-based system (by applying node-
based inference) or as a traditional semantic network (by applying path-based
inference). The agent implementation is still in its early stages and there are
several avenues to pursue. 2
</bodyText>
<sectionHeader confidence="0.981568" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.9997864">
[1] Greeno, J. G., Instructional Representations Based on Research about
Understanding, in: Cognitive Science and Mathematics Education, Lawrence
Erlbaum Associates, Hillsdale, NJ, 1987 pp. 61–88.
[2] Hiebert, J. and P. Lefevre, Conceptual and Procedural Knowledge in
Mathematics: An Introductory Analysis, in: Conceptual and Procedural
Knowledge: The Case of Mathematics, Lawrence Erlbaum Associates, Hillsdale,
NJ, 1986 pp. 1–27.
[3] Kumar, D., From Beliefs and Goals to Intentions and Actions: An Amalgamated
Model of Inference and Acting, Technical Report 94-04, Department of
Computer Science, State University of New York at Buffalo (1994).
[4] Lakoff, G. and R. N´u˜nez, “Where Mathematics Comes From: How the
Embodied Mind Brings Mathematics Into Being,” Basic Books, New York, NY,
2000.
[5] Quillian, M. R., Semantic Memory, in: Semantic Information Processing, MIT
Press, Cambridge, MA, 1968 pp. 216–270.
[6] Rapaport, W. J., Holism, Conceptual-Role Semantics, and Syntactic Semantics,
Minds and Machines 12 (2002), pp. 3–59.
[7] Sfard, A., On The Dual Nature of Mathematical Conceptions: Reflections on
Processes and Objects as Different Sides of the Same Coin, Educational Studies
in Mathematics 22 (1991), pp. 1–36.
[8] Shapiro, S. C., Representing numbers in semantic networks: prolegomena,
Proceedings of the 5th International Joint Conference on Artificial Intelligence
(1977), p. 284.
[9] Shapiro, S. C., Path-based and node-based inference in semantic networks, ACM,
New York, NY, 1978 pp. 219–225.
[10] Shapiro, S. C., Cables, paths and “subconscious” reasoning in propositional
semantic networks, in: J. F. Sowa, editor, Principles of Semantic Networks,
Morgan Kaufmann, San Mateo, CA, 1991 pp. 137–156.
[11] Shapiro, S. C. and W. J. Rapaport, The SNePS Family, Computers and
Mathematics with Applications 23 (1992), pp. 243–275.
</reference>
<footnote confidence="0.5879945">
2 I would like to thank William J. Rapaport and Stuart C. Shapiro for reading earlier drafts
of this paper.
</footnote>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.402766">
<title confidence="0.999476">A Computational Theory of Inference for Arithmetic Explanation</title>
<author confidence="0.999968">Albert Goldfain</author>
<affiliation confidence="0.956515333333333">Department of Computer Science and Center for Cognitive University at</affiliation>
<address confidence="0.812076">Buffalo, NY</address>
<email confidence="0.470565">ag33@cse.buffalo.edu</email>
<abstract confidence="0.9868235">Mathematical understanding can be measured by a cognitive agent’s ability to explain itself, i.e., answer relevant questions about its mathematical activities. Two inference techniques, rule-based inference and path-based inference, are applied to an implemented computational cognitive agent using the SNePS knowledgerepresentation, reasoning, and acting system.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>J G Greeno</author>
</authors>
<title>Instructional Representations Based on Research about Understanding, in:</title>
<date>1987</date>
<booktitle>Cognitive Science and Mathematics Education, Lawrence Erlbaum Associates,</booktitle>
<pages>61--88</pages>
<location>Hillsdale, NJ,</location>
<contexts>
<context position="6387" citStr="[1]" startWordPosition="1031" endWordPosition="1031">from the contemplation of number-name meanings. Outside the context of the number line, number-names are meaningless identifiers. 3 SNePS My computational theory is implemented in the SNePS knowledgerepresentation, reasoning, and acting system [11]. The fundamental datastructure of SNePS is a propositional semantic network. A SNePS network represents the beliefs of Cassie, the SNePS cognitive agent. A semantic network is abstract enough to represent both numeric and linguistic information. This is one of the reasons semantic networks have been used in models of arithmetic word-problem solving [1]. Numeric information is basically syntactic [8], but obtains a conceptual-role semantics [6] through integration with a system such as SNePS. Cassie’s acting system is SNeRE (the SNePS Rational Engine [3]). Acts in SNePS are either primitive or complex. Primitive acts are the fundamental repertoire of acts available to Cassie. Complex acts are composed of sets of primitive acts that are structured by control acts (i.e., acts for sequencing, iteration, and conditionals) and are bound to plans for performing them with the ActPlan predicate function. SNePS has a uniform representation for both c</context>
</contexts>
<marker>[1]</marker>
<rawString>Greeno, J. G., Instructional Representations Based on Research about Understanding, in: Cognitive Science and Mathematics Education, Lawrence Erlbaum Associates, Hillsdale, NJ, 1987 pp. 61–88.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Hiebert</author>
<author>P Lefevre</author>
</authors>
<title>Conceptual and Procedural Knowledge in Mathematics: An Introductory Analysis, in: Conceptual and Procedural Knowledge: The Case of Mathematics, Lawrence Erlbaum Associates,</title>
<date>1986</date>
<pages>1--27</pages>
<location>Hillsdale, NJ,</location>
<contexts>
<context position="5011" citStr="[2]" startWordPosition="824" endWordPosition="824">mation (e.g., for A2 above), (2) call upon real-world experiences (e.g., for A6 above), (3) infer the relationships between procedures and their constituent sub-procedures (e.g., for A4 above), and (4) infer relationships between concepts (e.g., for A8 above). The question for a computational agent then becomes: where does this (required) additional knowledge come from? One answer to this question is to design an agent that accumulates knowledge during a mathematical activity. The ability to assimilate newly inferred material with existing knowledge is essential for mathematical understanding [2]. Mathematical understanding is driven by doing things, not simply by thinking about things. This is consistent with the cognitive foundations of mathematics presented by Lakoff &amp; N´u˜nez [4], in which a metaphoric relationship is established between a human activity (such as object collection) and a formal operation (such as addition). The activity-driven nature of mathematical understanding can be witnessed even in the developmentally early routine of counting. Children turn a routine that is nothing more than a meaningless recitation of ordered words (much like a nursery rhyme) into a tool </context>
</contexts>
<marker>[2]</marker>
<rawString>Hiebert, J. and P. Lefevre, Conceptual and Procedural Knowledge in Mathematics: An Introductory Analysis, in: Conceptual and Procedural Knowledge: The Case of Mathematics, Lawrence Erlbaum Associates, Hillsdale, NJ, 1986 pp. 1–27.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Kumar</author>
</authors>
<title>From Beliefs and Goals to Intentions and Actions: An Amalgamated Model of Inference and Acting,</title>
<date>1994</date>
<tech>Technical Report 94-04,</tech>
<institution>Department of Computer Science, State University of New York at Buffalo</institution>
<contexts>
<context position="6592" citStr="[3]" startWordPosition="1062" endWordPosition="1062">entation, reasoning, and acting system [11]. The fundamental datastructure of SNePS is a propositional semantic network. A SNePS network represents the beliefs of Cassie, the SNePS cognitive agent. A semantic network is abstract enough to represent both numeric and linguistic information. This is one of the reasons semantic networks have been used in models of arithmetic word-problem solving [1]. Numeric information is basically syntactic [8], but obtains a conceptual-role semantics [6] through integration with a system such as SNePS. Cassie’s acting system is SNeRE (the SNePS Rational Engine [3]). Acts in SNePS are either primitive or complex. Primitive acts are the fundamental repertoire of acts available to Cassie. Complex acts are composed of sets of primitive acts that are structured by control acts (i.e., acts for sequencing, iteration, and conditionals) and are bound to plans for performing them with the ActPlan predicate function. SNePS has a uniform representation for both conceptual and procedural knowledge so that all of Cassie’s SNeRE plans are stored in the same network as her conceptual knowledge. Most importantly, Cassie can add beliefs to her network while she is actin</context>
</contexts>
<marker>[3]</marker>
<rawString>Kumar, D., From Beliefs and Goals to Intentions and Actions: An Amalgamated Model of Inference and Acting, Technical Report 94-04, Department of Computer Science, State University of New York at Buffalo (1994).</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Lakoff</author>
<author>R N´u˜nez</author>
</authors>
<title>Where Mathematics Comes From: How the Embodied Mind Brings Mathematics Into Being,” Basic Books,</title>
<date>2000</date>
<location>New York, NY,</location>
<contexts>
<context position="5202" citStr="[4]" startWordPosition="852" endWordPosition="852">), and (4) infer relationships between concepts (e.g., for A8 above). The question for a computational agent then becomes: where does this (required) additional knowledge come from? One answer to this question is to design an agent that accumulates knowledge during a mathematical activity. The ability to assimilate newly inferred material with existing knowledge is essential for mathematical understanding [2]. Mathematical understanding is driven by doing things, not simply by thinking about things. This is consistent with the cognitive foundations of mathematics presented by Lakoff &amp; N´u˜nez [4], in which a metaphoric relationship is established between a human activity (such as object collection) and a formal operation (such as addition). The activity-driven nature of mathematical understanding can be witnessed even in the developmentally early routine of counting. Children turn a routine that is nothing more than a meaningless recitation of ordered words (much like a nursery rhyme) into a tool for ascribing cardinal size and ordinal position to real-world entities. The semantics of counting routines arises from children performing tasks that require counting, not from the contempla</context>
</contexts>
<marker>[4]</marker>
<rawString>Lakoff, G. and R. N´u˜nez, “Where Mathematics Comes From: How the Embodied Mind Brings Mathematics Into Being,” Basic Books, New York, NY, 2000.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M R Quillian</author>
</authors>
<title>Semantic Memory, in: Semantic Information Processing,</title>
<date>1968</date>
<pages>216--270</pages>
<publisher>MIT Press,</publisher>
<location>Cambridge, MA,</location>
<contexts>
<context position="11263" citStr="[5,6]" startWordPosition="1791" endWordPosition="1791"> added to the agent’s belief space without an explicit knowledge level deduction. For each new number generated by a counting procedure, Cassie builds a Successor relation to hold between that number and its immediate predecessor. Using path-based inference, this link can be exploited to generate the GreaterThan relation, which holds between each new number generated and all preceding numbers. Path-based inference takes advantage of the fact that Cassie’s knowledge is stored in a semantic network, in which a node’s “meaning” is determined by its position in the network relative to other nodes [5,6]. This type of inference can also be used in SNePS to determine the conceptual-role semantics for vague concepts such as “number”. To define a concept such as “number” in the context of a completed arithmetic activity, a series of path-based inferences can be performed to give the elements of the class number, to give the acts with argument type number, and to give the operations that have thus far resulted in numbers. This technique can also be used to provide semantic meaning for arithmetic procedures. The possibility of treating an arithmetic operation as either a concrete object (as a node</context>
</contexts>
<marker>[5]</marker>
<rawString>Quillian, M. R., Semantic Memory, in: Semantic Information Processing, MIT Press, Cambridge, MA, 1968 pp. 216–270.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W J Rapaport</author>
<author>Holism</author>
</authors>
<title>Conceptual-Role Semantics, and Syntactic Semantics,</title>
<date>2002</date>
<journal>Minds and Machines</journal>
<volume>12</volume>
<pages>3--59</pages>
<contexts>
<context position="6480" citStr="[6]" startWordPosition="1044" endWordPosition="1044">r-names are meaningless identifiers. 3 SNePS My computational theory is implemented in the SNePS knowledgerepresentation, reasoning, and acting system [11]. The fundamental datastructure of SNePS is a propositional semantic network. A SNePS network represents the beliefs of Cassie, the SNePS cognitive agent. A semantic network is abstract enough to represent both numeric and linguistic information. This is one of the reasons semantic networks have been used in models of arithmetic word-problem solving [1]. Numeric information is basically syntactic [8], but obtains a conceptual-role semantics [6] through integration with a system such as SNePS. Cassie’s acting system is SNeRE (the SNePS Rational Engine [3]). Acts in SNePS are either primitive or complex. Primitive acts are the fundamental repertoire of acts available to Cassie. Complex acts are composed of sets of primitive acts that are structured by control acts (i.e., acts for sequencing, iteration, and conditionals) and are bound to plans for performing them with the ActPlan predicate function. SNePS has a uniform representation for both conceptual and procedural knowledge so that all of Cassie’s SNeRE plans are stored in the same</context>
<context position="11263" citStr="[5,6]" startWordPosition="1791" endWordPosition="1791"> added to the agent’s belief space without an explicit knowledge level deduction. For each new number generated by a counting procedure, Cassie builds a Successor relation to hold between that number and its immediate predecessor. Using path-based inference, this link can be exploited to generate the GreaterThan relation, which holds between each new number generated and all preceding numbers. Path-based inference takes advantage of the fact that Cassie’s knowledge is stored in a semantic network, in which a node’s “meaning” is determined by its position in the network relative to other nodes [5,6]. This type of inference can also be used in SNePS to determine the conceptual-role semantics for vague concepts such as “number”. To define a concept such as “number” in the context of a completed arithmetic activity, a series of path-based inferences can be performed to give the elements of the class number, to give the acts with argument type number, and to give the operations that have thus far resulted in numbers. This technique can also be used to provide semantic meaning for arithmetic procedures. The possibility of treating an arithmetic operation as either a concrete object (as a node</context>
</contexts>
<marker>[6]</marker>
<rawString>Rapaport, W. J., Holism, Conceptual-Role Semantics, and Syntactic Semantics, Minds and Machines 12 (2002), pp. 3–59.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Sfard</author>
</authors>
<title>On The Dual Nature of Mathematical Conceptions:</title>
<date>1991</date>
<booktitle>Reflections on Processes and Objects as Different Sides of the Same Coin, Educational Studies in Mathematics</booktitle>
<volume>22</volume>
<pages>1--36</pages>
<contexts>
<context position="11994" citStr="[7]" startWordPosition="1912" endWordPosition="1912">”. To define a concept such as “number” in the context of a completed arithmetic activity, a series of path-based inferences can be performed to give the elements of the class number, to give the acts with argument type number, and to give the operations that have thus far resulted in numbers. This technique can also be used to provide semantic meaning for arithmetic procedures. The possibility of treating an arithmetic operation as either a concrete object (as a node) and a process (as an ActPlan) during inference is an important result of using SNePS to model mathematical understanding (see [7]). 4 Conclusion and Further Research Inference is central to explanations of all sorts. We have seen that for a domain such as arithmetic, in which complex procedures can be rigidly built up from simpler procedures, the knowledge inferred during an agent’s action can provide a justification for that action. For a computational agent, the choice of a knowledge-representation system determines the methods of inference that can be applied. SNePS is particularly useful for implementing my theory because it can be used as a logical rule-based system (by applying nodebased inference) or as a traditi</context>
</contexts>
<marker>[7]</marker>
<rawString>Sfard, A., On The Dual Nature of Mathematical Conceptions: Reflections on Processes and Objects as Different Sides of the Same Coin, Educational Studies in Mathematics 22 (1991), pp. 1–36.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S C Shapiro</author>
</authors>
<title>Representing numbers in semantic networks: prolegomena,</title>
<date>1977</date>
<booktitle>Proceedings of the 5th International Joint Conference on Artificial Intelligence</booktitle>
<pages>284</pages>
<contexts>
<context position="6435" citStr="[8]" startWordPosition="1038" endWordPosition="1038">Outside the context of the number line, number-names are meaningless identifiers. 3 SNePS My computational theory is implemented in the SNePS knowledgerepresentation, reasoning, and acting system [11]. The fundamental datastructure of SNePS is a propositional semantic network. A SNePS network represents the beliefs of Cassie, the SNePS cognitive agent. A semantic network is abstract enough to represent both numeric and linguistic information. This is one of the reasons semantic networks have been used in models of arithmetic word-problem solving [1]. Numeric information is basically syntactic [8], but obtains a conceptual-role semantics [6] through integration with a system such as SNePS. Cassie’s acting system is SNeRE (the SNePS Rational Engine [3]). Acts in SNePS are either primitive or complex. Primitive acts are the fundamental repertoire of acts available to Cassie. Complex acts are composed of sets of primitive acts that are structured by control acts (i.e., acts for sequencing, iteration, and conditionals) and are bound to plans for performing them with the ActPlan predicate function. SNePS has a uniform representation for both conceptual and procedural knowledge so that all o</context>
</contexts>
<marker>[8]</marker>
<rawString>Shapiro, S. C., Representing numbers in semantic networks: prolegomena, Proceedings of the 5th International Joint Conference on Artificial Intelligence (1977), p. 284.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S C Shapiro</author>
</authors>
<title>Path-based and node-based inference in semantic networks,</title>
<date>1978</date>
<pages>219--225</pages>
<publisher>ACM,</publisher>
<location>New York, NY,</location>
<contexts>
<context position="10376" citStr="[9]" startWordPosition="1649" endWordPosition="1649"> (e.g., the count-addition of 1 Cassie also checks whether an act has any preconditions and any effects. Since the arithmetic operations involve mental acts only, we omit these inferences. 2 and 3). Since Cassie explicitly deduces propositions at the knowledge level using this technique, rule-based inference can be seen as a model of “conscious” inference (i.e., Cassie is attending to the information that triggers the inference). 3.2 Path-Based Inference Paths in SNePS networks are ordered sequences of arc-labels between nodes. Paths are specified using a syntax similar to regular expressions [9]. Pathbased techniques can be used as a model of unconscious inference for SNePS agents [10]. A relation between nodes in a given network may be inferred by the presence of a certain path between those nodes. This is an “unconscious” activity, because the newly inferred relation is added to the agent’s belief space without an explicit knowledge level deduction. For each new number generated by a counting procedure, Cassie builds a Successor relation to hold between that number and its immediate predecessor. Using path-based inference, this link can be exploited to generate the GreaterThan rela</context>
</contexts>
<marker>[9]</marker>
<rawString>Shapiro, S. C., Path-based and node-based inference in semantic networks, ACM, New York, NY, 1978 pp. 219–225.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S C Shapiro</author>
</authors>
<title>Cables, paths and “subconscious” reasoning in propositional semantic networks,</title>
<date>1991</date>
<booktitle>Principles of Semantic Networks,</booktitle>
<pages>137--156</pages>
<editor>in: J. F. Sowa, editor,</editor>
<publisher>Morgan Kaufmann,</publisher>
<location>San Mateo, CA,</location>
<contexts>
<context position="10468" citStr="[10]" startWordPosition="1665" endWordPosition="1665"> any effects. Since the arithmetic operations involve mental acts only, we omit these inferences. 2 and 3). Since Cassie explicitly deduces propositions at the knowledge level using this technique, rule-based inference can be seen as a model of “conscious” inference (i.e., Cassie is attending to the information that triggers the inference). 3.2 Path-Based Inference Paths in SNePS networks are ordered sequences of arc-labels between nodes. Paths are specified using a syntax similar to regular expressions [9]. Pathbased techniques can be used as a model of unconscious inference for SNePS agents [10]. A relation between nodes in a given network may be inferred by the presence of a certain path between those nodes. This is an “unconscious” activity, because the newly inferred relation is added to the agent’s belief space without an explicit knowledge level deduction. For each new number generated by a counting procedure, Cassie builds a Successor relation to hold between that number and its immediate predecessor. Using path-based inference, this link can be exploited to generate the GreaterThan relation, which holds between each new number generated and all preceding numbers. Path-based in</context>
</contexts>
<marker>[10]</marker>
<rawString>Shapiro, S. C., Cables, paths and “subconscious” reasoning in propositional semantic networks, in: J. F. Sowa, editor, Principles of Semantic Networks, Morgan Kaufmann, San Mateo, CA, 1991 pp. 137–156.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S C Shapiro</author>
<author>W J Rapaport</author>
</authors>
<title>The SNePS Family,</title>
<date>1992</date>
<journal>Computers and Mathematics with Applications</journal>
<volume>23</volume>
<pages>243--275</pages>
<contexts>
<context position="6032" citStr="[11]" startWordPosition="976" endWordPosition="976"> in the developmentally early routine of counting. Children turn a routine that is nothing more than a meaningless recitation of ordered words (much like a nursery rhyme) into a tool for ascribing cardinal size and ordinal position to real-world entities. The semantics of counting routines arises from children performing tasks that require counting, not from the contemplation of number-name meanings. Outside the context of the number line, number-names are meaningless identifiers. 3 SNePS My computational theory is implemented in the SNePS knowledgerepresentation, reasoning, and acting system [11]. The fundamental datastructure of SNePS is a propositional semantic network. A SNePS network represents the beliefs of Cassie, the SNePS cognitive agent. A semantic network is abstract enough to represent both numeric and linguistic information. This is one of the reasons semantic networks have been used in models of arithmetic word-problem solving [1]. Numeric information is basically syntactic [8], but obtains a conceptual-role semantics [6] through integration with a system such as SNePS. Cassie’s acting system is SNeRE (the SNePS Rational Engine [3]). Acts in SNePS are either primitive or</context>
</contexts>
<marker>[11]</marker>
<rawString>Shapiro, S. C. and W. J. Rapaport, The SNePS Family, Computers and Mathematics with Applications 23 (1992), pp. 243–275.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>