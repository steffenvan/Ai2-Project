<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000003">
<title confidence="0.911211">
A Hybrid Approach for Building Arabic Diacritizer
</title>
<note confidence="0.608685">
Khaled Shaalan Hitham M. Abo Bakr Ibrahim Ziedan
The Faculty of Informatics Computer &amp; System Dept Computer &amp; System Dept.
The British University in Dubai Zagazig University Zagazig University
</note>
<email confidence="0.961055">
khaled.shaalan@buid.ac.ae hithamab@yahoo.com i.ziedan@yahoo.com
</email>
<sectionHeader confidence="0.996874" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.9998395">
Modern standard Arabic is usually written
without diacritics. This makes it difficult for
performing Arabic text processing. Diacritiza-
tion helps clarify the meaning of words and
disambiguate any vague spellings or pronun-
ciations, as some Arabic words are spelled the
same but differ in meaning. In this paper, we
address the issue of adding diacritics to undia-
critized Arabic text using a hybrid approach.
The approach requires an Arabic lexicon and
large corpus of fully diacritized text for train-
ing purposes in order to detect diacritics. Case-
Ending is treated as a separate post processing
task using syntactic information. The hybrid
approach relies on lexicon retrieval, bigram,
and SVM-statistical prioritized techniques.
We present results of an evaluation of the pro-
posed diacritization approach and discuss var-
ious modifications for improving the perfor-
mance of this approach.
</bodyText>
<sectionHeader confidence="0.999471" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999823736842106">
Modern Arabic written texts usually include
Arabic scripts without short vowels and other
diacritic marks. This often leads to considerable
ambiguity since several words that have differ-
ent diacritic patterns may appear identical in a
diacritic-less setting. Educated modern Arabic
speakers are able to accurately derive/restore
diacritics in a document. This is based on the
context and their linguistic knowledge of Arabic.
However, a text without diacritics brings diffi-
culties for Arabic readers. It is also problematic
for Arabic processing applications, such as text-
to-speech, speech-to-text, and text analysis,
where the lack of diacritics adds another layer of
ambiguity when processing the input data. As an
example, full vocalization of Arabic text is re-
quired for text-to-speech applications, where the
mapping from graphemes to phonemes is com-
plicated compared to languages such as English
and French; where there is, in most cases, simple
one-to-one relationship. Nevertheless, using
Arabic text with diacritics has proven an im-
provement in the accuracy of speech-recognition
applications (Zitouni et al., 2006).
The problem of automatic restoration (i.e., deri-
vation) of the diacritic signs of Arabic text can
be solved by two approaches. The first is a rule-
based approach that involves a complex integra-
tion of the Arabic morphological, syntactic, and
semantic tools with significant efforts to acquire
respective linguistic rules. A morphological ana-
lyzer gets the breakdowns of the undiacritized
word according to known patterns or templates
and recognizes its prefixes and suffixes. A syn-
tax analyzer applies specific syntactic rules to
determine the case-ending diacritics, usually, by
techniques such as finite-state automata. Seman-
tics handling helps to resolve ambiguous cases
and to filter out hypothesis. Hence, rule-based
diacritization approach is a complicated process
and takes longer time to process an Arabic sen-
tence which is naturally long. The second ap-
proach is the statistical approach that requires
linguistic resources such as a large tagged cor-
pus (in particular a TreeBank) to extract lan-
guage statistics for estimating the missing dia-
critical marks. The approach is fully automated
and does not require efforts to acquire respective
linguistic knowledge. Results are usually im-
proved by increasing the size of the corpus.
It is worth noting that identifying some of the
diacritic marks can be seen as a morphological
problem and the relevant letters are called inter-
nal characters in this paper. Moreover, diacritic
mark of the last character of the Arabic is called
case ending (y1jr-&apos;11 ���r-). The identification of
case-ending diacritics is determined at the syn-
</bodyText>
<note confidence="0.952074">
Proceedings of the EACL 2009 Workshop on Computational Approaches to Semitic Languages, pages 27–35,
Athens, Greece, 31 March, 2009. c�2009 Association for Computational Linguistics
</note>
<page confidence="0.998547">
27
</page>
<bodyText confidence="0.999943928571429">
tactic processing level (case ending depends on
the position of the word within the sentence)
whereas detecting the internal diacritics is de-
termined at the morphological processing level.
In widespread cases, the case-ending come in-
ternally rather than with the last character such
as &amp;quot;444&amp;quot; (by-her-pen).
In this paper, an Arabic diacritizer is proposed.
Internal diacritization was restored by a model
based on the synergy of three different tech-
niques: retrieval of unambiguous lexicon en-
tries, retrieval of two-word expression from a
preprocessed diacritized bigram database, and a
prediction using statistical approach based on
SVM-learning technique, (Cristianini and Tay-
lor, 2000) and (Hearst, 1998). The later tech-
nique tokenizes a text and provides a Reduced
Tag Set (RTS) of Part of Speech (POS)1 for each
token. The tags are used to restore the diacritics.
From the obtained diacritization results of these
techniques, the most consistent one is selected.
The Case-Ending diacritization is treated as a
post-process of the internal diacritization task
using the same machine learning approach that
was trained on Base phrase (BP)-Chunk as well
as POS features of individual tokens with correct
case-ending tags. A utility has been designed to
extract correct case-ending tags from the LDC’s
Arabic Tree Bank (ATB).
This paper presents a new simple but efficient
approach that gets results comparable with the
best performing systems, to our knowledge,
(Habash and Rambow, 2007). The achieved re-
sults are: 11.795% Word Error Rate (WER) and
about 3.245% Diacritics Error Rate (DER). The
paper is structured as follows. Section 2 reviews
closely related work. Section 3 introduces the
proposed diacritization approach. Section 4 de-
scribes the training process. Section 5 presents
the evaluation experiment. Section 6 concludes
the article and gives direction for future re-
search.
</bodyText>
<sectionHeader confidence="0.999909" genericHeader="introduction">
2 Related Work
</sectionHeader>
<bodyText confidence="0.996173">
Diacritic restoration has been receiving increas-
ing attention and has been the focus of several
studies. In El-Sadany and Hashish (1988), a rule-
</bodyText>
<footnote confidence="0.850391666666667">
1 List of POS and RTS that are used here can be found at:
http://www.ircs.upenn.edu/arabic/Jan03release/arabic-
POStags-collapse-to-PennPOStags.txt
</footnote>
<bodyText confidence="0.999902791666667">
based approach that uses morphological analyzer
for vowelization was proposed. Another, rule-
based grapheme to sound conversion approach
appeared in 2003 by Y. El-Imam (2003).
There are many related works dealing with the
problem of Arabic diacritization in general (Zi-
touni et al., 2006), (Habash and Rambow, 2007),
(Ananthakrishnan, 2005), (Kirchhoff, 2005). and
(Elshafei et al, 2006); all trying to handle this
problem using statistical approaches but they
tend to handle the case ending diacritic mark in
the same way they used to handle the internal
(any letter but the last) diacritics. In our proposed
approach we differentiate between them as the
detection of case-ending diacritics is a syntactic-
based problem whereas detecting the internal
diacritics is a morphological-based problem. Ha-
bash et al. (2007) introduced a system called
MADA-D that uses Buckwalter’s Arabic mor-
phological analyzer where they used 14 taggers
and a lexeme-based language model. MADA is
so far the best performing system to date. It has
been reported that it achieved a WER of 14.9%
and a DER of 4.8%.
</bodyText>
<sectionHeader confidence="0.9911135" genericHeader="method">
3 The Proposed Diacritization Ap-
proach
</sectionHeader>
<bodyText confidence="0.999738">
The Arabic internal diacritization problem will
be addressed from three different proposed tech-
niques, each of which has its own strengths and
weaknesses. Such techniques are integrated to
optimize the performance of the Arabic diacritiz-
er and to a large extent remove ambiguities.
These proposed techniques are: 1) Lexicon Re-
trieval, 2) diacritized bigram, and 3) SVM-
statistical-based diacritizer. Then, the case end-
ing diacritization will be determined after the
internal discrimination is performed. Figure 1
shows the architecture of Arabic Diacritization
System.
</bodyText>
<page confidence="0.997731">
28
</page>
<figure confidence="0.9995854">
Get Case Ending
Search for token
in Internal
diacriize
td word
to decide the
position of Case-
Ending
Get BP-Chunk
Return Case
Ending for
each Token
Get POS tagging
Tokenize
statement
Results From SVM
Statistical Module
Split Eeach
word
with its POS
Search in Arabic
Lexicon for Diac
word by using
the POS
Return
Diac Word
Word if
exist
Get Correct Internal
Diacritics using Decision
Maker module
Receive
undiacritized
statement
Search for single
result in the
Lexicon
Receive
selected internal
Diacritized
Words
Split Statement
to words
Return
Diac Word
if exist
Search In
Diacritized
Bigram Database
Split Statement
to Bigrams
Return
Diac
Words if
exist
</figure>
<figureCaption confidence="0.999849">
Figure 1: Arabic Diacritization System
</figureCaption>
<subsubsectionHeader confidence="0.459584">
Lexicon Retrieval Technique (LR)
</subsubsectionHeader>
<bodyText confidence="0.99971575">
Lexicon retrieval approach tries to find the result
(diacritized word) returned from an Arabic lex-
icon for a specific input undiacritized word. If
only one diacritization is returned, then there is
no ambiguity. This solution is final and we do
not need to look at the results form the other two
techniques. However, this situation is usually
rare but when it occurs the result is confirmed.
</bodyText>
<subsubsectionHeader confidence="0.491009">
Diacritized Bigram Technique (DB)
</subsubsectionHeader>
<bodyText confidence="0.9999399375">
When more than one solution is retrieved for an
unvowelized input word, i.e., ambiguous diacrti-
cazation, the bigram technique comes into play.
The idea behind this technique is to make use of
the multiword expressions in Arabic texts. When
such expressions are analyzed as separate words,
the possibility for ambiguity is increased. In this
work, we considered a two-word expression (bi-
gram) that usually occurs with high frequency in
Arabic texts such that one word can determine
the diacritization of the other. Once the expres-
sion is identified and diacritized correctly, it adds
a sense of certitude to the diacritization which
significantly reduces the ambiguity. Table 1
shows an extraction of the diacritized bigram
database.
</bodyText>
<table confidence="0.999670714285714">
Diac. 2nd Diac. 1st Cat 2nd 1st
Word Word Word Word
مَﺪَﻘﻟا ةَﺮُﻜِﻟ 3 مﺪﻘﻟا ةﺮﻜﻟ
ةَﺪِﺤﱠﺘُﻤﻟا تﺎﻳﻻِﻮﻟا 1 ةﺪﺤﺘﻤﻟا تﺎﻳﻻﻮﻟا
ءارَزُﻮﻟا ﺲﻴِﺋَر 1 ءارزﻮﻟا ﺲﻴﺋر
سِﺮﺑ ﺲْﻧاﺮﻓ 1 سﺮﺑ ﺲﻧاﺮﻓ
ﺔﱠﻴِﺑْﺮَﻐﻟا ﺔﱠﻔِﻀﻟا 1 ﺔﻴﺑﺮﻐﻟا ﺔﻔﻀﻟا
</table>
<tableCaption confidence="0.998614">
Table 1: Diacritized Bigram Database
</tableCaption>
<subsectionHeader confidence="0.576905">
SVM-Statistical Technique (SVM)
</subsectionHeader>
<bodyText confidence="0.99995635">
The previous two diacritization techniques can
be viewed as a lookup process; either for a word
in the lexicon or for a two-word expression in a
large bigram database. However, statistical me-
thods can be viewed as general approaches be-
cause they are heavily dependent on the Arabic
syntactic analysis that was manually performed
by Arabic specialists.
The main idea of this approach is to tokenize
and automatically annotate tokens with the cor-
rect POS tags. Then, by searching the Arabic
lexicon using a token and the corresponding
POS, the correct diacritization result can reached,
even though multiple ambiguous words are re-
trieved from the lexicon.
Buckwalter&apos;s morphological analyzer (Buck-
walter, 2002) takes an inflected Arabic word and
returns fully diacritized ambiguous words. We
claim in our approach that only internal diacritics
should be handled morphologically whereas case
ending should be handled syntactically. Hence,
we have used the Buckwalter&apos;s morphological
analyzer after removing all case ending diacritics
from the suffixes table in order to prevent the
generation of the case ending output. One advan-
tage of this modification is to considerably re-
duce the number of alternatives (i.e., overgenera-
tions) returned from the morphological analyzer.
Another advantage is that some NLP tasks, such
as Information Retrieval, require only diacritic
restoration of internal (lexical) vowels which can
benefit from such modification. For example,
given the word “ ﻞﻣﺎﻋ “ to this morphological
analyzer, it returns 7 results that have the same
internal diacritics with one having no case-
ending and 6 having different case-ending dia-
critics. Consequently, splitting the diacrization
into two stages (internal and case ending) will
avoid such morphological ambiguity and at the
second stage the syntactic case ending is treated
</bodyText>
<figure confidence="0.976672166666667">
Add Case Ending
in correct
position
Fully
Diacritized
Statement
</figure>
<page confidence="0.993129">
29
</page>
<bodyText confidence="0.998501933333333">
separately as a post processing which ultimately
leads to a fully efficient diacritized Arabic word.
A Hybrid of All Internal Techniques
When we apply each of the three proposed
techniques on an input undiacritized Arabic sen-
tence we may get different diacritization results
for each word within this sentence. The selection
criteria depend on the agreement among these
techniques. Two or more matched results can
determine the discrimination of a word. In case
of disagreement, a priority is applied in the fol-
lowing, highest to lowest, order: lexicon retriev-
al, bigram and SVM-Statistical technique respec-
tively. If no solution is reached from all tech-
niques, the undiacritized input word is returned.
</bodyText>
<sectionHeader confidence="0.558007" genericHeader="method">
Case Ending Model
</sectionHeader>
<bodyText confidence="0.99458565625">
The main idea is to relate the case-ending for
each token with its POS and chunk position as
well as its position within the sentence (Abo
Bakr et al., 2008). We made a training using
Support Vector Machines (SVM) technique with
undiacritized tokens. This technique involves an
Arabic Treebank.
An Arabic Treebank usually created on top of
a corpus that has already been annotated with
POS tags. We have used the Penn Arabic Tree-
bank (ATB) (Maamouri et al, 2004). ATB has
begun in the fall of 2001 and has now completed
four full releases of morphologically and syntac-
tically annotated data: Version 1 of the ATB has
three parts with different releases; some versions
like Part 1 V3.0 and Part 2 V 2.0 are fully diacri-
tized trees. For example, consider the following
undiacritized statement:
The following tree representation is partially
extracted from the tree fileU-
MAAH_UM.ARB_20020120-a.0007.tree that is part
of the ATB Part 2 V.2.
Figure 2 shows a graphical representation of this
tree2. Case-ending is indicated, ovals in Figure 2,
by one of the following tags: NCE,
CASE_DEF_GEN, CASE_INDEF_GEN,
CASE_DEF_NOM, CASE_DEF_ACC,
CASE_INDEF_NOM, CASE_DEF_ACCGEN,
CASE_INDEF ACC, and
CASE_INDEF_ACCGEN.
Table 2 gives the complete description of these
tags.
</bodyText>
<figureCaption confidence="0.9450945">
Figure 2: A graphical representation of an Arabic sen-
tence extracted from the Penn Arabic Treebank
</figureCaption>
<table confidence="0.9998289">
Case Ending Tags Description
NCE No Case Ending
CASE_DEF_GEN Kasra ـِ
CASE_INDEF_GEN kasratan ـٍ
CASE_DEF_NOM Damma ـُ
CASE DEF ACC Fat-ha ـَ
CASE DEF ACCGEN Maftouh bi Kasra ـِ
CASE INDEF NOM Damatan ـٌ
CASE INDEF ACCGEN Fathatan ـً or ـٍ
CASE_INDEF_ACC Fathatan ـً
</table>
<tableCaption confidence="0.996771">
Table 2: Description of Case-Ending tags found in
</tableCaption>
<sectionHeader confidence="0.609895" genericHeader="method">
ATB
</sectionHeader>
<bodyText confidence="0.987723333333333">
A sequence of tokens with its POS, BP-chunk
and Case-Ending is extracted from Treebank us-
ing YamCha File Creator (YFC utility3). The
</bodyText>
<footnote confidence="0.995550375">
2 This graphical representation of the Treebank files is ex-
tracted from our Treebank Viewer tool that is freely availa-
ble at: http://www.staff.zu.edu.eg/hmabobakr/
3 We developed YFC utility to extract information from
Penn Arabic Treebank ATB and produce the Yamcha stan-
dard input format to be able to use this information in the
training process.
http://www.staff.zu.edu.eg/hmabobakr/page.asp?id=53
</footnote>
<figure confidence="0.9312762">
&amp;quot;llywm AlvAny ElY AltwAly tZAhr TlAb
ﻰﻟا نﻮﻤﺘﻨﻳ بﻼﻃ ﺮهﺎﻈﺗ ﻲﻟاﻮﺘﻟا ﻰﻠﻋ ﻲﻧﺎﺜﻟا مﻮﻴﻠﻟ
&amp;quot;....ﺔﻋﺎﻤﺟ
&amp;quot;
(S (S (S (PP-TMP (PREP li-) (NP (NP
(DET+NOUN+CASE_DEF_GEN -Al+yawom+i)
(DET+ADJ Al+vAniy)) (PP (PREP EalaY) (NP
(DET+NOUN Al+tawAliy))))) (VP
(VERB_PERFECT+PVSUFF_SUBJ:3MS N
Al+musolim+iyona) .....
</figure>
<page confidence="0.984122">
30
</page>
<bodyText confidence="0.999546714285714">
basic approach used in YFC is inspired by the
work of Sabine for Treebank-to-chuck conver-
sion script (Sang and Buchholz, 2000), which we
have extended to be used with Arabic. This has
required adding some features like Case-Ending.
The output produced from YFC utility for case
ending training process is shown in Table 3.
</bodyText>
<table confidence="0.999520357142857">
Token POS Chunk Case Ending
L IN B-PP NCE
Al DT B-NP NCE
ywm NN I-NP CASE—DEF—GEN
Al DT I-NP NCE
vAny JJ I-NP NCE
ElY IN B-PP NCE
Al DT B-NP NCE
twAly NN I-NP NCE
tZAhr VBD B-VP NCE
TlAb NN B-NP CASE—INDEF—NOM
Yntmwn VBP B-VP NCE
&lt;lY IN B-PP NCE
jmAEp NN B-NP CASE—DEF—GEN
</table>
<tableCaption confidence="0.999866">
Table 3: Training file format for detecting Case-
</tableCaption>
<bodyText confidence="0.282192">
Ending
</bodyText>
<sectionHeader confidence="0.687243" genericHeader="method">
4 Training of the Arabic Diacritizer
</sectionHeader>
<bodyText confidence="0.9986703">
The diacritization system we present here is
trained and evaluated on the LDC’s Arabic Tree-
bank of diacritized news articles – Part 2 v2.0:
catalog number LDC2004T02 and 1-58563-282-
1. The corpus includes complete vocalization
(including case endings). We introduce here a
clearly defined and replicable split of the corpus,
so that the reproduction of the results or future
investigations can accurately and correctly be
established. This corpus includes 501 stories
from the Ummah Arabic News Text. There are a
total of 144,199 words (counting non-Arabic to-
kens such as numbers and punctuation) in the
501 files - one story per file. We split the cor-
pus into two sets: training data and development
test (devtest) data. The devtest data are the files
ended by character “7” like
“UMAAH—UM.ARB—20020120-a.0007.tree”
and its count was 38 files. The remaining files
are used for training.
</bodyText>
<sectionHeader confidence="0.999228" genericHeader="evaluation">
5 Evaluation
</sectionHeader>
<bodyText confidence="0.998739083333333">
For Arabic tokenizer, POS tagger, BP-chunk,
and statistical Case-Ending, we used a standard
SVM with a polynomial kernel of degree 2 and
C=1.0. Evaluation of the system was done by
calculating the performance using the standard
evaluation measures: accuracy, precision, recall,
and the f-measure4.We used YamCha (Kudo and
Matsumoto, 2003) implementation of SVMs.
Diacritization evaluation of our experiments is
reported in terms of word error rate (WER), and
diacritization error rate (DER)5.
We conducted experiments to:
</bodyText>
<listItem confidence="0.8864362">
1. Evaluate the impact of tokenization, part-of-
speech, chunking, and case-ending parame-
ters on the training models, see Section 5.1.
2. Evaluate the impact of including and ex-
cluding the case-ending on the performance
of the Arabic diacritizer, see Section 5.2.
3. Compare our approach of Tokenization and
POS tagger with the ArabicSVMTools tag-
ger using different parameters and fea-
ture(s), see Section 5.2.
</listItem>
<sectionHeader confidence="0.9164565" genericHeader="evaluation">
5.1 Results of Tokenization, Part-of-Speech,
BP-chunking, and case-ending
</sectionHeader>
<bodyText confidence="0.999956043478261">
The results obtained for tokenization (TOK),
part-of-speech (POS), and Chunking (BP-chunk)
tasks are comparable with the results presented
in the most notable literature (Diab et al, 2007;
Diab et al, 2004). We did some modifications of
the feature list to compromise between the speed
and accuracy. The case ending task is novel, and
did not get enough handling in other research. It
achieved acceptable results.
Evaluation of the impact of the tokenization
parameter on the training process
Two tokenization tasks was performed on
window sizes of -2 /+2 and -4/+4, for illustration
see TOK1 and TOK2 tasks in Figure 3. For each
window size there are two columns. The first one
contains a sequence of Buckwalter&apos;s translite-
rated Arabic letters shown from top to bottom
that resembles the left-to-right Arabic writing
system (e.g., ....wyblg Eddhm ..... are the trans-
literation of the Arabic words ....A► L�LL.:s..., re-
spectively). The second column contains the cor-
responding tokenization tags presented by In-
side-Outside-Beginning (I-O-B) of a chunk, i.e.,
</bodyText>
<footnote confidence="0.920087428571429">
4 These results were computed using our developed evlua-
tion tool that was developed and tested against Evaluation
Tools for CONLL 2000
http://www.cnts.ua.ac.be/conll2000/chunking/conlleval.txt.
5 These results were computed using our developed evalua-
tion tool that was developed based on information presented
in (Habash and Rambow, 2007).
</footnote>
<page confidence="0.999906">
31
</page>
<bodyText confidence="0.999940307692308">
prefix (PRE), word (WRD), and suffix (SUFF),
respectively, (Kudo and Matsumoto, 2003). The
tokenization tags are: B-PRE1, I-PRE1, B-PRE2,
I-PRE2, B-PRE3, I-PRE3, B-WORD-1, I-
WORD-1, B-SUFF1, I-SUFF1 and O for outside
word boundary. We made segmentation for the
determiner &amp;quot;Al&amp;quot; – &amp;quot;لا&amp;quot;. This segmentation is im-
portant for the case-ending detection for: the ad-
jective and the noun it modifies “فﻮﺻﻮﻤﻟاو ﺔﻔﺼﻟا”,
1st and 2nd Particle of the construction Annexed
and Annexed noun “ﻪﻴﻟإ فﺎﻀﻤﻟا و فﺎﻀﻤﻟا”, and Nu-
nation &amp;quot; ﻦﻳﻮﻨﺘﻟا &amp;quot;. The result of the evaluation of the
two tokenization tasks is shown in Table 4.
</bodyText>
<figureCaption confidence="0.9943245">
Figure 3: Tokenization evaluation with window sizes
of -2/+2 and -4/+4
</figureCaption>
<table confidence="0.999544">
Measurement TOK1 TOK2
Accuracy 98.59% 99.56%
Precision 97.17% 98.95%
Recall 97.29% 99.06%
F-Measure 97.23% 99.00%
</table>
<tableCaption confidence="0.975089">
Table 4: Tokenization results with window sizes of
-2/+2 and -4/+4
</tableCaption>
<bodyText confidence="0.999221">
Evaluation of the impact of the part-of-speech
parameter on the training process
A POS tagging (POS1) task was performed on a
sequence of tokens produced from the tokeniza-
tion task. A window size of +2/ -2 tokens centered
at the focus token. We made another POS tag-
ging (POS2) task by adding the last two charac-
ters as an extra feature for enhancing the accura-
cy of some tags such as plural or dual noun
(NNS) and singular noun (NN). For illustration
see POS1 and POS2 tasks in Figure 4. The result
of the evaluation of the two POS tagging tasks is
shown in Table 5.
</bodyText>
<figureCaption confidence="0.980931">
Figure 4: POS evaluations with window size of -2/+2;
with and without using the last two characters as an
added feature
</figureCaption>
<table confidence="0.9901545">
Measurement POS1 POS2
Accuracy 94.34% 95.97%
</table>
<tableCaption confidence="0.999415">
Table 5: POS results for different window sizes
</tableCaption>
<bodyText confidence="0.993645444444444">
Evaluation of the impact of chunking parame-
ters on the training process
The chunking task was performed on tokens pro-
duced from the tokenization and POS tasks. The
evaluation included 16 tag-set (features) of a
window size of -2/+2 for both tokens and POS,
and only the previous two chunk tags. For illu-
stration see Figure 5. The result of the evaluation
of is shown in Table 6.
</bodyText>
<figureCaption confidence="0.942902">
Figure 5: Chunk evaluation with window size of -2/+2
</figureCaption>
<table confidence="0.9963504">
Measurement Results
Accuracy 95.52%
Precision 93.19%
Recall 95.90%
F-Measure 94.52%
</table>
<tableCaption confidence="0.976915">
Table 6: Results for BP-chunk
</tableCaption>
<page confidence="0.9988">
32
</page>
<bodyText confidence="0.997123142857143">
Evaluation of the impact case-ending parame-
ters on the training process
Two case-ending tasks were performed. The
first case-ending (CE1) task was discussed in a
previous work (Abo Bakr et al., 2008). It was
performed on window size of -3/+3 and 8 tag
sets. For illustration see Figure 6.
</bodyText>
<figureCaption confidence="0.960051">
Figure 6: Case-ending evaluation with window size of
</figureCaption>
<bodyText confidence="0.955753833333333">
-3/+3
The evaluation has achieved 95.35% in accu-
racy. We noticed that in some cases the system
can produce unacceptable case ending (e.g.,
Tanween on the sound plural masculine “ ���
�t.,.dl ����dl”) that we could improved by:
1- Enhancing the POS tagging (POS2) task
by adding last two characters (L2Ch) as
a feature.
2- Enhancing the case ending (CE2) task by
adding the last character (LCh) and the
last two characters (L2Ch) as features.
</bodyText>
<figureCaption confidence="0.907497333333333">
Figure 7: Case-Ending evaluation with widow size of
-3/3 and using the last two characters (L2Ch) and the
last character (LCh) as added features
</figureCaption>
<bodyText confidence="0.999940666666667">
The following modifications were done to
conduct the second case-ending (CE2) task, for
illustration see Figure 7:
</bodyText>
<listItem confidence="0.878457333333333">
• Adding the last two characters (L2Ch) and
the last character (LCh) as features.
• Enhancing the case ending representation by
</listItem>
<bodyText confidence="0.617196">
adding an extra tagset for “indeclension of
the fatha” - “Z!50 ��� ����” that is presented in
Treebank as “PVSUFF SUNJ:3MS”.
Table 7 presents the results obtained for the two
case ending (CE1 and CE2) tasks. As shown, the
performance is improved.
</bodyText>
<table confidence="0.987384">
Measurement CE1 CE2
Accuracy 95.35% 96.57%
</table>
<tableCaption confidence="0.999557">
Table 7: Results of Case Ending evaluation
</tableCaption>
<subsectionHeader confidence="0.998711">
5.2 Diacritization Results
</subsectionHeader>
<bodyText confidence="0.999745384615385">
In this section, we compare our approach of To-
kenization and POS tagger with Ara-
bicSVMTools tagger. We evaluate the impact of
including and excluding different techniques of
internal diacritization and case-ending on the
overall performance of our Arabic diacritizer. In
particular, we show the results from the follow-
ing techniques: lexicon retrieval (LR), diacri-
tized bigram (DB), SVM, and case-ending (CE),
techniques. Results for different combinations
were reported and compared. All results were
performed using TOK1, POS1, and CE1 tasks
and shown in Table 8 through Table 10.
</bodyText>
<table confidence="0.9871775">
Including CE Excluding CE6
Technique WER DER WER DER
LR 90.35% 40.85% 31.38% 36.67%
SVM 69.94% 23.36% 16.28% 11.36%
</table>
<tableCaption confidence="0.939654333333333">
Table 8: WER and DER for Lexicon Retrieval and
Statistical SVM techniques for including and exclud-
ing case ending
</tableCaption>
<bodyText confidence="0.9702032">
Table 8 shows that excluding case ending (letter)
from the evaluation gives better results in terms
of WER and DER.
As shown in Table 9, it is noted that including
the case ending technique has enhanced dramati-
cally the results of diacritic restoration. Further
enhancement was obtained by adopting a new
method to restore internal diacritics, when all of
the hybrid techniques fail to return any solution;
the new method, we call it “accepts any” (AA),
</bodyText>
<footnote confidence="0.920936333333333">
6 Results for “Excluding CE” are calculated manually for a
limited number of test files because Case-Ending diacritic is
not always at the last character.
</footnote>
<page confidence="0.998581">
33
</page>
<bodyText confidence="0.911569">
is used for arbitrary accepting results from lex-
icon.
</bodyText>
<table confidence="0.9978378">
Technique WER DER
LR+DB 35.81% 9.77%
LR+DB+SVM 33.51% 7.99%
LR+DB+SVM+CE 17.31% 4.41%
LR+DB+SVM+CE+AA 16.66% 3.84%
</table>
<tableCaption confidence="0.906996">
Table 9: WER and DER for different combination of
diacritization techniques
</tableCaption>
<bodyText confidence="0.999973875">
To investigate the effect of enhancing POS tag-
ging on the internal SVM statistical technique,
we adapted our modules to interact with Ara-
bicSVMTools, the up-to-date most famous free
tagger7. Some modification were made to our
module to accept the article ‘Al’ as it may occur
as radical letters inside the Noun (we handle ‘Al’
separately in our tokenizer). We evaluated our
statistical diacritization approach using Ara-
bicSVMTools and our proposed tagger. The use
of ArabicSVMTools has improved the perfor-
mance of our diacrtizer as shown in Table 10.
ArabicSVMTools gave better results than our
proposed tagger. However, our proposed tagger
is about 4 times faster than ArabicSVMTools
because we use less features.
</bodyText>
<table confidence="0.989140666666667">
Tagger WER DER
ArabicSVMTools 12.79% 9.94%
Proposed SVM 16.28% 11.36%
</table>
<tableCaption confidence="0.996824">
Table 10: WER and DER for statistical approach us-
ing different taggers without considering case-ending
</tableCaption>
<bodyText confidence="0.952746875">
diacritics.
Table 11, shows the results after modifying both
the statistical and the case ending approaches for
TOK2, POS2, and CE2 tasks. The last row
represent results after adding some simple heu-
ristic rules (SHR) to correctly add Tanween Ka-
sra instead of Tanween el Fatha in case of sound
plural feminine &amp;quot; �UI e-j; I d:—&amp;quot;.
</bodyText>
<table confidence="0.991958">
Technique WER DER
LR+DB+SVM 31.86% 7.92%
LS+DB+SVM+CE 12.16% 3.78%
LS+DB+SVM+CE+SHR 11.795% 3.245%
</table>
<tableCaption confidence="0.998104">
Table 11: WER and DER for different techniques
</tableCaption>
<footnote confidence="0.448935">
7 ArabicSVMTools:
http://www.cs.columbia.edu/~mdiab/downloads/ArabicSV
MTools.tar.gz
</footnote>
<sectionHeader confidence="0.993618" genericHeader="acknowledgments">
6 Conclusions and Future work
</sectionHeader>
<bodyText confidence="0.999972">
In this paper, we proposed a diacritization model
that distinguishes between internal and case end-
ing diacritization. The overall performance is
comparable with the best diacritization model
that was reported in the literature so far.
Statistically based methods show great promise
in addressing the ambiguity resolution problem
in Arabic language diacritization.
The proposed system yields good results in the
DER and WER compared with MADA-D sys-
tem, the modifications for case ending algorithm
have enhanced the performance.
The proposed system has an advantage that we
can use all internal diacritics approaches in paral-
lel because there is no such dependency between
algorithms. Nevertheless, the case ending algo-
rithm can also be processed in parallel with the
statistical approach. Such parallel processing ad-
vantage can improve the response time that could
be critical for some diacritization-based real time
systems.
Maintaining the bigram database up-to-date will
significantly enhance the performance of the sys-
tem.
Our future work will include adding some heu-
ristic rules for the proposed model as a post
processing. This will enhance the performance
for the system especially to restore correct dia-
critics of the possessive personal pronounce suf-
fixes “U“�“� ”. Moreover, adding extra POS tag
sets to distinguish between dual noun and plural
nouns will enhance the diacritization results. We
plan also to enrich the system by increasing the
training set by using latest fully diacritized Tree-
bank like Part1 V3.0 (Maamouri et al, 2008)
which is not available due to limitation of our
budget. This has the effect of enhancing the sys-
tem performance and allow us to make a compar-
ison with other systems, such as (Habash and
Rambow, 2007) and (Zitouni et al. , 2006) .
</bodyText>
<sectionHeader confidence="0.999473" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999525636363636">
Abo Bakr H. M. , Shaalan K., Ziedan I., 2008, &amp;quot;A
Statistical Method for Adding Case Ending Diacrit-
ics for Arabic Text&amp;quot;, The Eighth Conference on
Language Engineering, ESOLEC’2008, Page 225-
234, Cairo, Egypt,Deceber 17-18 2008.
Ananthakrishnan, Narayanan S., and Bangalore S.,
(2005), “Automatic diacritization of arabic tran-
scripts for asr”. In Proceedings of ICON-05, Kan-
pur, India.
Buckwalter T., (2002). Buckwalter Arabic morpho-
logical analyzer version 1.0. Technical report, Lin-
</reference>
<page confidence="0.990497">
34
</page>
<reference confidence="0.999915926470589">
guistic Data Consortium, LDC2002L49 and ISBN
1-58563- 257-0.
Cristianini N. and Taylor J.S., (2000), “An Introduc-
tion to Support Vector Machines and Other Kernel-
based Learning Methods”, The Press Syndicate of
the University of Cambridge, Cambridge, United
Kingdom.
Diab M., Hacioglu K., and Jurafsky D., (2004), &amp;quot;Au-
tomatic Tagging of Arabic Text: From Raw Text to
Base Phrase Chunks,&amp;quot; In Proc. of HLT/NAACL
2004, Boston.
Diab M., Hacioglu K., and Jurafsky D.,(2007), “Arab-
ic Computational Morphology Knowledge-based
and Empirical Methods” - Chapter 7 “Automatic
Processing of Modern Standard Arabic
Text”,ISBN: 978-1-4020-6046-5, SpringerLink.
El-Imam Y., (2003). Phonetization of Arabic: rules
and algorithms. Computer Speech and Language,
18:339– 373.
El-Sadany T. and Hashish M., (1988). Semi-
automatic vowelization of Arabic verbs. In 10th
NC Conference, Jeddah, Saudi Arabia.
Elshafei M., Al-Muhtaseb H., and Alghamdi M.,
(2006), “Statistical Methods for Automatic Diacri-
tization of Arabic Text”. The Saudi 18th National
Computer Conference. Riyadh. 18: 301-306.
Emam O. and Fisher V. (2004)., A hierarchical ap-
proach for the statistical vowelization of Arabic
text. Technical report, IBM patent filed, DE9-2004-
0006, US patent application US2005/0192809 A1.
Gal Y., (2002). An HMM approach to vowel restora-
tion in Arabic and Hebrew. In ACL-02 Workshop
on Computational Approaches to Semitic Languag-
es.
Habash N. and Rambow O., (2007), “Arabic Diacriti-
zation through Full Morphological Tagging”, In
Proceedings of the North American chapter of the
Association for Computational Linguistics
(NAACL), Rochester, New York.
Hearst M. A., (1998), &amp;quot;Support Vector Machines,&amp;quot;
IEEE Intelligent Systems, vol. 13, no. 4, pp. 18-
28, Jul/Aug, 1998.
Kirchhoff K. and Vergyri D., (2005). Cross-dialectal
data sharing for acoustic modeling in Arabic speech
recognition. Speech Communication, 46(1):37–51,
May.
Kudo T. and Matsumoto Y., (2003), &amp;quot; Fast methods
for kernel-based text analysis,&amp;quot; In Proceedings of
the 41st Annual Meeting on Association For Com-
putational Linguistics - Volume 1 (Sapporo, Japan,
July 07 - 12, 2003). Annual Meeting of the ACL.
Association for Computational Linguistics, Morris-
town.
Maamouri, M., Bies, A. &amp; Buckwalter, T. (2004). The
Penn Arabic treebank: Building a largescale anno-
tated Arabic corpus. In NEMLAR Conference on
Arabic Language Resources and Tools, Cairo,
Egypt.
Maamouri M., Bies A., Kulick S., (2008), &amp;quot;Enhanced
Annotation and Parsing of the Arabic Treebank&amp;quot;;
INFOS 2008, Cairo, Egypt, March 27-29, 2008.
Sang E. and Buchholz S., (2000), ” Introduction to the
CoNLL-2000 Shared Task: Chunking”, Proceeding
of CoNLL-2000 and LLL-2000,Page 127-132, Lis-
bon,Portugal.
Zitouni I., Sorensen J. S., and Sarikaya R., (2006),
“Maximum entropy based restoration of Arabic di-
acritics”. In Proceedings of ACL’06.
</reference>
<page confidence="0.999326">
35
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.919699">
<title confidence="0.999852">A Hybrid Approach for Building Arabic Diacritizer</title>
<author confidence="0.999298">Khaled Shaalan Hitham M Abo Bakr Ibrahim Ziedan</author>
<affiliation confidence="0.983518">The Faculty of Informatics Computer &amp; System Dept Computer &amp; System Dept. The British University in Dubai Zagazig University Zagazig</affiliation>
<email confidence="0.960612">khaled.shaalan@buid.ac.aehithamab@yahoo.comi.ziedan@yahoo.com</email>
<abstract confidence="0.999207666666667">Modern standard Arabic is usually written without diacritics. This makes it difficult for performing Arabic text processing. Diacritization helps clarify the meaning of words and disambiguate any vague spellings or pronunciations, as some Arabic words are spelled the same but differ in meaning. In this paper, we address the issue of adding diacritics to undiacritized Arabic text using a hybrid approach. The approach requires an Arabic lexicon and large corpus of fully diacritized text for training purposes in order to detect diacritics. Case- Ending is treated as a separate post processing task using syntactic information. The hybrid approach relies on lexicon retrieval, bigram, and SVM-statistical prioritized techniques. We present results of an evaluation of the proposed diacritization approach and discuss various modifications for improving the performance of this approach.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Abo Bakr H M</author>
</authors>
<title>A Statistical Method for Adding Case Ending Diacritics for Arabic Text&amp;quot;,</title>
<date>2008</date>
<booktitle>The Eighth Conference on Language Engineering, ESOLEC’2008,</booktitle>
<pages>225--234</pages>
<location>Cairo, Egypt,Deceber</location>
<marker>M, 2008</marker>
<rawString>Abo Bakr H. M. , Shaalan K., Ziedan I., 2008, &amp;quot;A Statistical Method for Adding Case Ending Diacritics for Arabic Text&amp;quot;, The Eighth Conference on Language Engineering, ESOLEC’2008, Page 225-234, Cairo, Egypt,Deceber 17-18 2008.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Narayanan S Ananthakrishnan</author>
<author>S Bangalore</author>
</authors>
<title>Automatic diacritization of arabic transcripts for asr”.</title>
<date>2005</date>
<booktitle>In Proceedings of ICON-05, Kanpur,</booktitle>
<marker>Ananthakrishnan, Bangalore, 2005</marker>
<rawString>Ananthakrishnan, Narayanan S., and Bangalore S., (2005), “Automatic diacritization of arabic transcripts for asr”. In Proceedings of ICON-05, Kanpur, India.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Buckwalter</author>
</authors>
<title>Buckwalter Arabic morphological analyzer version 1.0.</title>
<date>2002</date>
<booktitle>Linguistic Data Consortium, LDC2002L49 and ISBN</booktitle>
<tech>Technical report,</tech>
<pages>1--58563</pages>
<contexts>
<context position="10875" citStr="Buckwalter, 2002" startWordPosition="1661" endWordPosition="1663">word in the lexicon or for a two-word expression in a large bigram database. However, statistical methods can be viewed as general approaches because they are heavily dependent on the Arabic syntactic analysis that was manually performed by Arabic specialists. The main idea of this approach is to tokenize and automatically annotate tokens with the correct POS tags. Then, by searching the Arabic lexicon using a token and the corresponding POS, the correct diacritization result can reached, even though multiple ambiguous words are retrieved from the lexicon. Buckwalter&apos;s morphological analyzer (Buckwalter, 2002) takes an inflected Arabic word and returns fully diacritized ambiguous words. We claim in our approach that only internal diacritics should be handled morphologically whereas case ending should be handled syntactically. Hence, we have used the Buckwalter&apos;s morphological analyzer after removing all case ending diacritics from the suffixes table in order to prevent the generation of the case ending output. One advantage of this modification is to considerably reduce the number of alternatives (i.e., overgenerations) returned from the morphological analyzer. Another advantage is that some NLP ta</context>
</contexts>
<marker>Buckwalter, 2002</marker>
<rawString>Buckwalter T., (2002). Buckwalter Arabic morphological analyzer version 1.0. Technical report, Linguistic Data Consortium, LDC2002L49 and ISBN 1-58563- 257-0.</rawString>
</citation>
<citation valid="true">
<authors>
<author>N Cristianini</author>
<author>J S Taylor</author>
</authors>
<title>An Introduction to Support Vector Machines and Other Kernelbased Learning Methods”, The Press Syndicate of the University of Cambridge,</title>
<date>2000</date>
<location>Cambridge, United Kingdom.</location>
<contexts>
<context position="4797" citStr="Cristianini and Taylor, 2000" startWordPosition="711" endWordPosition="715">on of the word within the sentence) whereas detecting the internal diacritics is determined at the morphological processing level. In widespread cases, the case-ending come internally rather than with the last character such as &amp;quot;444&amp;quot; (by-her-pen). In this paper, an Arabic diacritizer is proposed. Internal diacritization was restored by a model based on the synergy of three different techniques: retrieval of unambiguous lexicon entries, retrieval of two-word expression from a preprocessed diacritized bigram database, and a prediction using statistical approach based on SVM-learning technique, (Cristianini and Taylor, 2000) and (Hearst, 1998). The later technique tokenizes a text and provides a Reduced Tag Set (RTS) of Part of Speech (POS)1 for each token. The tags are used to restore the diacritics. From the obtained diacritization results of these techniques, the most consistent one is selected. The Case-Ending diacritization is treated as a post-process of the internal diacritization task using the same machine learning approach that was trained on Base phrase (BP)-Chunk as well as POS features of individual tokens with correct case-ending tags. A utility has been designed to extract correct case-ending tags </context>
</contexts>
<marker>Cristianini, Taylor, 2000</marker>
<rawString>Cristianini N. and Taylor J.S., (2000), “An Introduction to Support Vector Machines and Other Kernelbased Learning Methods”, The Press Syndicate of the University of Cambridge, Cambridge, United Kingdom.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Diab</author>
<author>K Hacioglu</author>
<author>D Jurafsky</author>
</authors>
<title>Automatic Tagging of Arabic Text: From Raw Text to Base Phrase Chunks,&amp;quot;</title>
<date>2004</date>
<booktitle>In Proc. of HLT/NAACL 2004,</booktitle>
<location>Boston.</location>
<contexts>
<context position="18107" citStr="Diab et al, 2004" startWordPosition="2789" endWordPosition="2792">se-ending parameters on the training models, see Section 5.1. 2. Evaluate the impact of including and excluding the case-ending on the performance of the Arabic diacritizer, see Section 5.2. 3. Compare our approach of Tokenization and POS tagger with the ArabicSVMTools tagger using different parameters and feature(s), see Section 5.2. 5.1 Results of Tokenization, Part-of-Speech, BP-chunking, and case-ending The results obtained for tokenization (TOK), part-of-speech (POS), and Chunking (BP-chunk) tasks are comparable with the results presented in the most notable literature (Diab et al, 2007; Diab et al, 2004). We did some modifications of the feature list to compromise between the speed and accuracy. The case ending task is novel, and did not get enough handling in other research. It achieved acceptable results. Evaluation of the impact of the tokenization parameter on the training process Two tokenization tasks was performed on window sizes of -2 /+2 and -4/+4, for illustration see TOK1 and TOK2 tasks in Figure 3. For each window size there are two columns. The first one contains a sequence of Buckwalter&apos;s transliterated Arabic letters shown from top to bottom that resembles the left-to-right Ara</context>
</contexts>
<marker>Diab, Hacioglu, Jurafsky, 2004</marker>
<rawString>Diab M., Hacioglu K., and Jurafsky D., (2004), &amp;quot;Automatic Tagging of Arabic Text: From Raw Text to Base Phrase Chunks,&amp;quot; In Proc. of HLT/NAACL 2004, Boston.</rawString>
</citation>
<citation valid="false">
<authors>
<author>M Diab</author>
<author>K Hacioglu</author>
<author>D Jurafsky</author>
</authors>
<booktitle>Arabic Computational Morphology Knowledge-based and Empirical Methods” - Chapter 7 “Automatic Processing of Modern Standard Arabic Text”,ISBN:</booktitle>
<pages>978--1</pages>
<publisher>SpringerLink.</publisher>
<marker>Diab, Hacioglu, Jurafsky, </marker>
<rawString>Diab M., Hacioglu K., and Jurafsky D.,(2007), “Arabic Computational Morphology Knowledge-based and Empirical Methods” - Chapter 7 “Automatic Processing of Modern Standard Arabic Text”,ISBN: 978-1-4020-6046-5, SpringerLink.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Y El-Imam</author>
</authors>
<title>Phonetization of Arabic: rules and algorithms.</title>
<date>2003</date>
<journal>Computer Speech and Language,</journal>
<volume>18</volume>
<pages>373</pages>
<contexts>
<context position="6476" citStr="El-Imam (2003)" startWordPosition="969" endWordPosition="970">raining process. Section 5 presents the evaluation experiment. Section 6 concludes the article and gives direction for future research. 2 Related Work Diacritic restoration has been receiving increasing attention and has been the focus of several studies. In El-Sadany and Hashish (1988), a rule1 List of POS and RTS that are used here can be found at: http://www.ircs.upenn.edu/arabic/Jan03release/arabicPOStags-collapse-to-PennPOStags.txt based approach that uses morphological analyzer for vowelization was proposed. Another, rulebased grapheme to sound conversion approach appeared in 2003 by Y. El-Imam (2003). There are many related works dealing with the problem of Arabic diacritization in general (Zitouni et al., 2006), (Habash and Rambow, 2007), (Ananthakrishnan, 2005), (Kirchhoff, 2005). and (Elshafei et al, 2006); all trying to handle this problem using statistical approaches but they tend to handle the case ending diacritic mark in the same way they used to handle the internal (any letter but the last) diacritics. In our proposed approach we differentiate between them as the detection of case-ending diacritics is a syntacticbased problem whereas detecting the internal diacritics is a morphol</context>
</contexts>
<marker>El-Imam, 2003</marker>
<rawString>El-Imam Y., (2003). Phonetization of Arabic: rules and algorithms. Computer Speech and Language, 18:339– 373.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T El-Sadany</author>
<author>M Hashish</author>
</authors>
<title>Semiautomatic vowelization of Arabic verbs.</title>
<date>1988</date>
<booktitle>In 10th NC Conference,</booktitle>
<location>Jeddah, Saudi Arabia.</location>
<contexts>
<context position="6149" citStr="El-Sadany and Hashish (1988)" startWordPosition="924" endWordPosition="927">with the best performing systems, to our knowledge, (Habash and Rambow, 2007). The achieved results are: 11.795% Word Error Rate (WER) and about 3.245% Diacritics Error Rate (DER). The paper is structured as follows. Section 2 reviews closely related work. Section 3 introduces the proposed diacritization approach. Section 4 describes the training process. Section 5 presents the evaluation experiment. Section 6 concludes the article and gives direction for future research. 2 Related Work Diacritic restoration has been receiving increasing attention and has been the focus of several studies. In El-Sadany and Hashish (1988), a rule1 List of POS and RTS that are used here can be found at: http://www.ircs.upenn.edu/arabic/Jan03release/arabicPOStags-collapse-to-PennPOStags.txt based approach that uses morphological analyzer for vowelization was proposed. Another, rulebased grapheme to sound conversion approach appeared in 2003 by Y. El-Imam (2003). There are many related works dealing with the problem of Arabic diacritization in general (Zitouni et al., 2006), (Habash and Rambow, 2007), (Ananthakrishnan, 2005), (Kirchhoff, 2005). and (Elshafei et al, 2006); all trying to handle this problem using statistical approa</context>
</contexts>
<marker>El-Sadany, Hashish, 1988</marker>
<rawString>El-Sadany T. and Hashish M., (1988). Semiautomatic vowelization of Arabic verbs. In 10th NC Conference, Jeddah, Saudi Arabia.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Elshafei</author>
<author>H Al-Muhtaseb</author>
<author>M Alghamdi</author>
</authors>
<date>2006</date>
<booktitle>Statistical Methods for Automatic Diacritization of Arabic Text”. The Saudi 18th National Computer Conference. Riyadh.</booktitle>
<volume>18</volume>
<pages>301--306</pages>
<contexts>
<context position="6689" citStr="Elshafei et al, 2006" startWordPosition="999" endWordPosition="1002">ention and has been the focus of several studies. In El-Sadany and Hashish (1988), a rule1 List of POS and RTS that are used here can be found at: http://www.ircs.upenn.edu/arabic/Jan03release/arabicPOStags-collapse-to-PennPOStags.txt based approach that uses morphological analyzer for vowelization was proposed. Another, rulebased grapheme to sound conversion approach appeared in 2003 by Y. El-Imam (2003). There are many related works dealing with the problem of Arabic diacritization in general (Zitouni et al., 2006), (Habash and Rambow, 2007), (Ananthakrishnan, 2005), (Kirchhoff, 2005). and (Elshafei et al, 2006); all trying to handle this problem using statistical approaches but they tend to handle the case ending diacritic mark in the same way they used to handle the internal (any letter but the last) diacritics. In our proposed approach we differentiate between them as the detection of case-ending diacritics is a syntacticbased problem whereas detecting the internal diacritics is a morphological-based problem. Habash et al. (2007) introduced a system called MADA-D that uses Buckwalter’s Arabic morphological analyzer where they used 14 taggers and a lexeme-based language model. MADA is so far the be</context>
</contexts>
<marker>Elshafei, Al-Muhtaseb, Alghamdi, 2006</marker>
<rawString>Elshafei M., Al-Muhtaseb H., and Alghamdi M., (2006), “Statistical Methods for Automatic Diacritization of Arabic Text”. The Saudi 18th National Computer Conference. Riyadh. 18: 301-306.</rawString>
</citation>
<citation valid="true">
<authors>
<author>O Emam</author>
<author>V Fisher</author>
</authors>
<title>A hierarchical approach for the statistical vowelization of Arabic text.</title>
<date>2004</date>
<tech>Technical report, IBM patent</tech>
<note>filed, DE9-2004-0006, US patent application US2005/0192809 A1.</note>
<marker>Emam, Fisher, 2004</marker>
<rawString>Emam O. and Fisher V. (2004)., A hierarchical approach for the statistical vowelization of Arabic text. Technical report, IBM patent filed, DE9-2004-0006, US patent application US2005/0192809 A1.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Y Gal</author>
</authors>
<title>An HMM approach to vowel restoration in Arabic and Hebrew.</title>
<date>2002</date>
<booktitle>In ACL-02 Workshop on Computational Approaches to Semitic Languages.</booktitle>
<marker>Gal, 2002</marker>
<rawString>Gal Y., (2002). An HMM approach to vowel restoration in Arabic and Hebrew. In ACL-02 Workshop on Computational Approaches to Semitic Languages.</rawString>
</citation>
<citation valid="true">
<authors>
<author>N Habash</author>
<author>O Rambow</author>
</authors>
<title>Arabic Diacritization through Full Morphological Tagging”,</title>
<date>2007</date>
<booktitle>In Proceedings of the North American chapter of the Association for Computational Linguistics (NAACL),</booktitle>
<location>Rochester, New York.</location>
<contexts>
<context position="5598" citStr="Habash and Rambow, 2007" startWordPosition="839" endWordPosition="842">cs. From the obtained diacritization results of these techniques, the most consistent one is selected. The Case-Ending diacritization is treated as a post-process of the internal diacritization task using the same machine learning approach that was trained on Base phrase (BP)-Chunk as well as POS features of individual tokens with correct case-ending tags. A utility has been designed to extract correct case-ending tags from the LDC’s Arabic Tree Bank (ATB). This paper presents a new simple but efficient approach that gets results comparable with the best performing systems, to our knowledge, (Habash and Rambow, 2007). The achieved results are: 11.795% Word Error Rate (WER) and about 3.245% Diacritics Error Rate (DER). The paper is structured as follows. Section 2 reviews closely related work. Section 3 introduces the proposed diacritization approach. Section 4 describes the training process. Section 5 presents the evaluation experiment. Section 6 concludes the article and gives direction for future research. 2 Related Work Diacritic restoration has been receiving increasing attention and has been the focus of several studies. In El-Sadany and Hashish (1988), a rule1 List of POS and RTS that are used here </context>
<context position="19298" citStr="Habash and Rambow, 2007" startWordPosition="2970" endWordPosition="2973">t resembles the left-to-right Arabic writing system (e.g., ....wyblg Eddhm ..... are the transliteration of the Arabic words ....A► L�LL.:s..., respectively). The second column contains the corresponding tokenization tags presented by Inside-Outside-Beginning (I-O-B) of a chunk, i.e., 4 These results were computed using our developed evluation tool that was developed and tested against Evaluation Tools for CONLL 2000 http://www.cnts.ua.ac.be/conll2000/chunking/conlleval.txt. 5 These results were computed using our developed evaluation tool that was developed based on information presented in (Habash and Rambow, 2007). 31 prefix (PRE), word (WRD), and suffix (SUFF), respectively, (Kudo and Matsumoto, 2003). The tokenization tags are: B-PRE1, I-PRE1, B-PRE2, I-PRE2, B-PRE3, I-PRE3, B-WORD-1, IWORD-1, B-SUFF1, I-SUFF1 and O for outside word boundary. We made segmentation for the determiner &amp;quot;Al&amp;quot; – &amp;quot;لا&amp;quot;. This segmentation is important for the case-ending detection for: the adjective and the noun it modifies “فﻮﺻﻮﻤﻟاو ﺔﻔﺼﻟا”, 1st and 2nd Particle of the construction Annexed and Annexed noun “ﻪﻴﻟإ فﺎﻀﻤﻟا و فﺎﻀﻤﻟا”, and Nunation &amp;quot; ﻦﻳﻮﻨﺘﻟا &amp;quot;. The result of the evaluation of the two tokenization tasks is shown in T</context>
</contexts>
<marker>Habash, Rambow, 2007</marker>
<rawString>Habash N. and Rambow O., (2007), “Arabic Diacritization through Full Morphological Tagging”, In Proceedings of the North American chapter of the Association for Computational Linguistics (NAACL), Rochester, New York.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M A Hearst</author>
</authors>
<title>Support Vector Machines,&amp;quot;</title>
<date>1998</date>
<journal>IEEE Intelligent Systems,</journal>
<volume>13</volume>
<pages>18--28</pages>
<location>Jul/Aug,</location>
<contexts>
<context position="4816" citStr="Hearst, 1998" startWordPosition="717" endWordPosition="718"> whereas detecting the internal diacritics is determined at the morphological processing level. In widespread cases, the case-ending come internally rather than with the last character such as &amp;quot;444&amp;quot; (by-her-pen). In this paper, an Arabic diacritizer is proposed. Internal diacritization was restored by a model based on the synergy of three different techniques: retrieval of unambiguous lexicon entries, retrieval of two-word expression from a preprocessed diacritized bigram database, and a prediction using statistical approach based on SVM-learning technique, (Cristianini and Taylor, 2000) and (Hearst, 1998). The later technique tokenizes a text and provides a Reduced Tag Set (RTS) of Part of Speech (POS)1 for each token. The tags are used to restore the diacritics. From the obtained diacritization results of these techniques, the most consistent one is selected. The Case-Ending diacritization is treated as a post-process of the internal diacritization task using the same machine learning approach that was trained on Base phrase (BP)-Chunk as well as POS features of individual tokens with correct case-ending tags. A utility has been designed to extract correct case-ending tags from the LDC’s Arab</context>
</contexts>
<marker>Hearst, 1998</marker>
<rawString>Hearst M. A., (1998), &amp;quot;Support Vector Machines,&amp;quot; IEEE Intelligent Systems, vol. 13, no. 4, pp. 18-28, Jul/Aug, 1998.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Kirchhoff</author>
<author>D Vergyri</author>
</authors>
<title>Cross-dialectal data sharing for acoustic modeling in Arabic speech recognition.</title>
<date>2005</date>
<journal>Speech Communication,</journal>
<volume>46</volume>
<issue>1</issue>
<marker>Kirchhoff, Vergyri, 2005</marker>
<rawString>Kirchhoff K. and Vergyri D., (2005). Cross-dialectal data sharing for acoustic modeling in Arabic speech recognition. Speech Communication, 46(1):37–51, May.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Kudo</author>
<author>Y Matsumoto</author>
</authors>
<title>Fast methods for kernel-based text analysis,&amp;quot;</title>
<date>2003</date>
<booktitle>In Proceedings of the 41st Annual Meeting on Association For Computational Linguistics - Volume</booktitle>
<volume>1</volume>
<location>Sapporo, Japan,</location>
<contexts>
<context position="17235" citStr="Kudo and Matsumoto, 2003" startWordPosition="2660" endWordPosition="2663">- one story per file. We split the corpus into two sets: training data and development test (devtest) data. The devtest data are the files ended by character “7” like “UMAAH—UM.ARB—20020120-a.0007.tree” and its count was 38 files. The remaining files are used for training. 5 Evaluation For Arabic tokenizer, POS tagger, BP-chunk, and statistical Case-Ending, we used a standard SVM with a polynomial kernel of degree 2 and C=1.0. Evaluation of the system was done by calculating the performance using the standard evaluation measures: accuracy, precision, recall, and the f-measure4.We used YamCha (Kudo and Matsumoto, 2003) implementation of SVMs. Diacritization evaluation of our experiments is reported in terms of word error rate (WER), and diacritization error rate (DER)5. We conducted experiments to: 1. Evaluate the impact of tokenization, part-ofspeech, chunking, and case-ending parameters on the training models, see Section 5.1. 2. Evaluate the impact of including and excluding the case-ending on the performance of the Arabic diacritizer, see Section 5.2. 3. Compare our approach of Tokenization and POS tagger with the ArabicSVMTools tagger using different parameters and feature(s), see Section 5.2. 5.1 Resu</context>
<context position="19388" citStr="Kudo and Matsumoto, 2003" startWordPosition="2983" endWordPosition="2986">transliteration of the Arabic words ....A► L�LL.:s..., respectively). The second column contains the corresponding tokenization tags presented by Inside-Outside-Beginning (I-O-B) of a chunk, i.e., 4 These results were computed using our developed evluation tool that was developed and tested against Evaluation Tools for CONLL 2000 http://www.cnts.ua.ac.be/conll2000/chunking/conlleval.txt. 5 These results were computed using our developed evaluation tool that was developed based on information presented in (Habash and Rambow, 2007). 31 prefix (PRE), word (WRD), and suffix (SUFF), respectively, (Kudo and Matsumoto, 2003). The tokenization tags are: B-PRE1, I-PRE1, B-PRE2, I-PRE2, B-PRE3, I-PRE3, B-WORD-1, IWORD-1, B-SUFF1, I-SUFF1 and O for outside word boundary. We made segmentation for the determiner &amp;quot;Al&amp;quot; – &amp;quot;لا&amp;quot;. This segmentation is important for the case-ending detection for: the adjective and the noun it modifies “فﻮﺻﻮﻤﻟاو ﺔﻔﺼﻟا”, 1st and 2nd Particle of the construction Annexed and Annexed noun “ﻪﻴﻟإ فﺎﻀﻤﻟا و فﺎﻀﻤﻟا”, and Nunation &amp;quot; ﻦﻳﻮﻨﺘﻟا &amp;quot;. The result of the evaluation of the two tokenization tasks is shown in Table 4. Figure 3: Tokenization evaluation with window sizes of -2/+2 and -4/+4 Measurement</context>
</contexts>
<marker>Kudo, Matsumoto, 2003</marker>
<rawString>Kudo T. and Matsumoto Y., (2003), &amp;quot; Fast methods for kernel-based text analysis,&amp;quot; In Proceedings of the 41st Annual Meeting on Association For Computational Linguistics - Volume 1 (Sapporo, Japan, July 07 - 12, 2003). Annual Meeting of the ACL. Association for Computational Linguistics, Morristown.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Maamouri</author>
<author>A Bies</author>
<author>T Buckwalter</author>
</authors>
<title>The Penn Arabic treebank: Building a largescale annotated Arabic corpus.</title>
<date>2004</date>
<booktitle>In NEMLAR Conference on Arabic Language Resources and Tools,</booktitle>
<location>Cairo, Egypt.</location>
<contexts>
<context position="13259" citStr="Maamouri et al, 2004" startWordPosition="2034" endWordPosition="2037"> bigram and SVM-Statistical technique respectively. If no solution is reached from all techniques, the undiacritized input word is returned. Case Ending Model The main idea is to relate the case-ending for each token with its POS and chunk position as well as its position within the sentence (Abo Bakr et al., 2008). We made a training using Support Vector Machines (SVM) technique with undiacritized tokens. This technique involves an Arabic Treebank. An Arabic Treebank usually created on top of a corpus that has already been annotated with POS tags. We have used the Penn Arabic Treebank (ATB) (Maamouri et al, 2004). ATB has begun in the fall of 2001 and has now completed four full releases of morphologically and syntactically annotated data: Version 1 of the ATB has three parts with different releases; some versions like Part 1 V3.0 and Part 2 V 2.0 are fully diacritized trees. For example, consider the following undiacritized statement: The following tree representation is partially extracted from the tree fileUMAAH_UM.ARB_20020120-a.0007.tree that is part of the ATB Part 2 V.2. Figure 2 shows a graphical representation of this tree2. Case-ending is indicated, ovals in Figure 2, by one of the following</context>
</contexts>
<marker>Maamouri, Bies, Buckwalter, 2004</marker>
<rawString>Maamouri, M., Bies, A. &amp; Buckwalter, T. (2004). The Penn Arabic treebank: Building a largescale annotated Arabic corpus. In NEMLAR Conference on Arabic Language Resources and Tools, Cairo, Egypt.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Maamouri</author>
<author>A Bies</author>
<author>S Kulick</author>
</authors>
<title>Enhanced Annotation and Parsing of the Arabic Treebank&amp;quot;; INFOS</title>
<date>2008</date>
<location>Cairo, Egypt,</location>
<marker>Maamouri, Bies, Kulick, 2008</marker>
<rawString>Maamouri M., Bies A., Kulick S., (2008), &amp;quot;Enhanced Annotation and Parsing of the Arabic Treebank&amp;quot;; INFOS 2008, Cairo, Egypt, March 27-29, 2008.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Sang</author>
<author>S Buchholz</author>
</authors>
<date>2000</date>
<booktitle>Introduction to the CoNLL-2000 Shared Task: Chunking”, Proceeding of CoNLL-2000 and LLL-2000,Page 127-132,</booktitle>
<location>Lisbon,Portugal.</location>
<contexts>
<context position="15433" citStr="Sang and Buchholz, 2000" startWordPosition="2361" endWordPosition="2364"> information from Penn Arabic Treebank ATB and produce the Yamcha standard input format to be able to use this information in the training process. http://www.staff.zu.edu.eg/hmabobakr/page.asp?id=53 &amp;quot;llywm AlvAny ElY AltwAly tZAhr TlAb ﻰﻟا نﻮﻤﺘﻨﻳ بﻼﻃ ﺮهﺎﻈﺗ ﻲﻟاﻮﺘﻟا ﻰﻠﻋ ﻲﻧﺎﺜﻟا مﻮﻴﻠﻟ &amp;quot;....ﺔﻋﺎﻤﺟ &amp;quot; (S (S (S (PP-TMP (PREP li-) (NP (NP (DET+NOUN+CASE_DEF_GEN -Al+yawom+i) (DET+ADJ Al+vAniy)) (PP (PREP EalaY) (NP (DET+NOUN Al+tawAliy))))) (VP (VERB_PERFECT+PVSUFF_SUBJ:3MS N Al+musolim+iyona) ..... 30 basic approach used in YFC is inspired by the work of Sabine for Treebank-to-chuck conversion script (Sang and Buchholz, 2000), which we have extended to be used with Arabic. This has required adding some features like Case-Ending. The output produced from YFC utility for case ending training process is shown in Table 3. Token POS Chunk Case Ending L IN B-PP NCE Al DT B-NP NCE ywm NN I-NP CASE—DEF—GEN Al DT I-NP NCE vAny JJ I-NP NCE ElY IN B-PP NCE Al DT B-NP NCE twAly NN I-NP NCE tZAhr VBD B-VP NCE TlAb NN B-NP CASE—INDEF—NOM Yntmwn VBP B-VP NCE &lt;lY IN B-PP NCE jmAEp NN B-NP CASE—DEF—GEN Table 3: Training file format for detecting CaseEnding 4 Training of the Arabic Diacritizer The diacritization system we present h</context>
</contexts>
<marker>Sang, Buchholz, 2000</marker>
<rawString>Sang E. and Buchholz S., (2000), ” Introduction to the CoNLL-2000 Shared Task: Chunking”, Proceeding of CoNLL-2000 and LLL-2000,Page 127-132, Lisbon,Portugal.</rawString>
</citation>
<citation valid="true">
<authors>
<author>I Zitouni</author>
<author>J S Sorensen</author>
<author>R Sarikaya</author>
</authors>
<title>Maximum entropy based restoration of Arabic diacritics”.</title>
<date>2006</date>
<booktitle>In Proceedings of ACL’06.</booktitle>
<contexts>
<context position="2343" citStr="Zitouni et al., 2006" startWordPosition="340" endWordPosition="343"> is also problematic for Arabic processing applications, such as textto-speech, speech-to-text, and text analysis, where the lack of diacritics adds another layer of ambiguity when processing the input data. As an example, full vocalization of Arabic text is required for text-to-speech applications, where the mapping from graphemes to phonemes is complicated compared to languages such as English and French; where there is, in most cases, simple one-to-one relationship. Nevertheless, using Arabic text with diacritics has proven an improvement in the accuracy of speech-recognition applications (Zitouni et al., 2006). The problem of automatic restoration (i.e., derivation) of the diacritic signs of Arabic text can be solved by two approaches. The first is a rulebased approach that involves a complex integration of the Arabic morphological, syntactic, and semantic tools with significant efforts to acquire respective linguistic rules. A morphological analyzer gets the breakdowns of the undiacritized word according to known patterns or templates and recognizes its prefixes and suffixes. A syntax analyzer applies specific syntactic rules to determine the case-ending diacritics, usually, by techniques such as </context>
<context position="6590" citStr="Zitouni et al., 2006" startWordPosition="985" endWordPosition="989">rection for future research. 2 Related Work Diacritic restoration has been receiving increasing attention and has been the focus of several studies. In El-Sadany and Hashish (1988), a rule1 List of POS and RTS that are used here can be found at: http://www.ircs.upenn.edu/arabic/Jan03release/arabicPOStags-collapse-to-PennPOStags.txt based approach that uses morphological analyzer for vowelization was proposed. Another, rulebased grapheme to sound conversion approach appeared in 2003 by Y. El-Imam (2003). There are many related works dealing with the problem of Arabic diacritization in general (Zitouni et al., 2006), (Habash and Rambow, 2007), (Ananthakrishnan, 2005), (Kirchhoff, 2005). and (Elshafei et al, 2006); all trying to handle this problem using statistical approaches but they tend to handle the case ending diacritic mark in the same way they used to handle the internal (any letter but the last) diacritics. In our proposed approach we differentiate between them as the detection of case-ending diacritics is a syntacticbased problem whereas detecting the internal diacritics is a morphological-based problem. Habash et al. (2007) introduced a system called MADA-D that uses Buckwalter’s Arabic morphol</context>
</contexts>
<marker>Zitouni, Sorensen, Sarikaya, 2006</marker>
<rawString>Zitouni I., Sorensen J. S., and Sarikaya R., (2006), “Maximum entropy based restoration of Arabic diacritics”. In Proceedings of ACL’06.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>