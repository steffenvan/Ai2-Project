<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000438">
<title confidence="0.99904">
Controlled Language for Geographical
Information System Queries
</title>
<author confidence="0.992025">
Sela Mador-Haim, Yoad Winter, and Anthony Braun
</author>
<affiliation confidence="0.460953">
Technion I.I.T
</affiliation>
<figureCaption confidence="0.362765">
selam@cs. technion. ac. il,winter@cs. technion. ac. il ,
tonyb@geofocus. co. il
</figureCaption>
<sectionHeader confidence="0.761424" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999651833333333">
Natural language interfaces to spatial databases have not received a lot of attention
in computational linguistics, in spite of the potential value of such systems for
users of Geographical Information Systems (GISs). This paper presents a controlled
language for GIS queries, solves some of the semantic problems for spatial inference
in this language, and introduces a system that implements this controlled language
as a novel interface for GIS.
</bodyText>
<sectionHeader confidence="0.996289" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999817590909091">
Geographical Information Systems (GISs) are information systems for pro-
cessing of data that pertain to spatial or geographic coordinates [14]. Even
though GISs are enjoying a rapidly growing users community, the current
systems are often difficult to use or require a long learning process [13]. In
the GIS literature [15,16,5,8], it has been well-acknowledged that natural lan-
guage interfaces (NLIs) would significantly enhance the exploitation of the
more complex features of GISs, yet despite the potential value of NLIs for
GISs, the work on this subject has so far been rather limited [16]. To the best
of our knowledge, existing NLIs for GISs are limited in scope and expressive
power and lack the ability to express complex relationships over spatial en-
tities. Some works ([9,17,12]) have demonstrated NLIs using databases that
contain geographically related data. Those databases, however, lack any ac-
tual spatial information (e.g. geometric polygons representing buildings), and
therefore do not deal with the problem of inferring spatial relations from such
representations.
In general, the design of NLIs to databases is regarded as a difficult problem
since human interaction is often vague, ambiguous or highly contextualized
[15,1]. The approach we take in this paper is to avoid many of these problems
by designing a system that uses a controlled language for GIS queries. Such
controlled languages [10,11], which are based on fragments of English, can be
designed in a way that minimizes the use of vague, ambiguous and context-
dependent expressions, while maintaining the ability to express very complex
queries in a language that is a subset of English. We benefit from the fact
that GISs are a closed, well-defined domain, which enables us to focus on
data independent parts of the language. We show that the addition of data
dependent portions can be done semi-automatically and requires very low
effort.
Our implementation of an NLI for GISs involves four major tasks: first,
defining the data independent lexicon, which was done using simple applicative
categorial grammar (Ajdukiewicz-Bar-Hillel calculus). Second, we develop a
suitable semantic representation for GIS queries, which we call ASQL, and a
method to translate natural-language queries via ASQL into spatially-enabled
SQL. The third task is defining of the semantics of spatial relations (esp.
prepositions) in the lexicon in accordance with the intuitive understanding of
such relations, which involves tackling certain aspects of spatial prepositions
that where never dealt with before. The fourth task is the development of
methods to add the data dependent portion of the lexicon with minimal effort,
including an automatic tool that generates lexical entries from the actual
geographical database in use.
The paper is organized as follows: Section 2 introduces ASQL and de-
scribes the translation scheme from natural language into SQL queries. Sec-
tion 3 reviews the architecture of the lexicon. Section 4 discusses semantic
issues concerning spatial relations in natural languages. Section 5 presents
our implementation, and section 6 concludes.
</bodyText>
<sectionHeader confidence="0.574738" genericHeader="method">
2 A compositional approach for building SQL queries
</sectionHeader>
<bodyText confidence="0.987740393442623">
SQL is a recursive language in the sense that it allows using one query as part
of an expression within another query. However, due to its complex syntax,
the construction of an SQL query in a compositional way from a query in
natural language is far from being a straightforward task. One way to tackle
this problem is by using an intermediate representation [4,10]. While such
an intermediate language avoids the complications of composing SQL queries
directly, its downsides are the additional translation phase it requires and the
fact that such intermediate languages are usually not as expressive as the
target language.
We introduce an intermediate representation language, which we call ASQL.
This language only adds the necessary “compositional glue” to SQL. As a re-
sult, only a simple translation process is necessary to convert ASQL queries
into normal SQL syntax. ASQL expressions are basically expressions in the
simply typed A Calculus with the addition of syntactic sugar for SQL-like
syntax.
The typical syntax of a select SQL-command for querying a database is:
SELECT &lt; selectlist &gt; FROM &lt; tablelist &gt; WHERE &lt; whereclause &gt;;
The selectlist parameter is usually a list of fields to be displayed, but it also
allows other expressions such as aggregate functions (e.g. field summation).
The tablelist parameter is a list of tables to query and whereclause is a
boolean expression that restricts the rows in the query.
The syntax of ASQL is very close to that of an SQL whereclause, with
the addition of A operators. The atoms of ASQL are real numbers, strings
and typed identifiers. The base types in ASQL are: t - Boolean, r - real
numbers, str - strings, g - spatial data and e - entries in the database. These
base types correspond to the base types that are found in GIS databases, with
the addition of one additional type, e, for database entries (tuples). Complex
expressions are built from atomic ones using function application exp1(exp2),
infix operators exp1 op exp2, and the operators Av.exp and Elv.exp. The
infix operators in ASQL correspond to SQL operators, and include Boolean
AND/OR, arithmetic operators (+, −, *, /) and comparators (&gt;, &lt;, =, &lt;=
, &gt;=,! =). One additional important operator in ASQL is the dot operator,
as in var.fieldname, where var is of type e and fieldname is a function from
entries in the database to entities of a basic type (i.e. it is of type et, er or es).
A dot expression is equivalent to fieldname(var), a function that returns the
value of a field of a given entry.
In general, the only two syntactic elements in ASQL that do not corre-
spond directly to SQL syntax are the A and El operators. Translation from
ASQL expressions to SQL queries is done by recursive traversal over the ex-
pression. During traversal, whenever certain patterns are recognized, these
patterns are replaced by a corresponding SQL select statement. Each A op-
erator corresponds to a select statement, which can be nested inside another
select. In addition to A operators, three different synthetic elements may affect
the translation pattern:
P1 A function over a A expressions, as in f(Av.exp), is treated as an aggregate
function.
P2 In the simplest pattern, the type of the variable x in Ax is e, and it
corresponds to a query that returns a set of entries. When the variable that
the A operator binds is of any other base type, the pattern: Ax.Ely.(x = exp1
AND y.layer =&amp;quot; layer1&amp;quot; AND exp2) is expected, which is translated into
SELECT exp1 FROM layer1 WHERE exp2.
P3 Any additional El operator which is not part of the pattern above is trans-
lated as a table join (where tablelist parameter contains more than one
query). For example, the expression Axe.Elye.(x.layer = “layer1&amp;quot; AND
y.layer = “layer2&amp;quot; AND exp) is translated into: SELECT x.* FROM
layer1 AS x, layer2 AS y WHERE exp. Each additional El adds an addi-
tional table to the list.
The translation process is guaranteed to be successful due to constraints
over the ASQL expressions in the lexicon that enforce conformity to the above
patterns. As an example for ASQL, consider the following fragment from our
lexicon:
</bodyText>
<table confidence="0.97167075">
Word Category Semantics
buildings N Axe.(x.layere3 = ”building”)
with N\N/N An1et.An2et.Axe.(n1(x) AND n2(x))
more than Rs/R Anr.Axr.(x &gt; n)
two R 2
floors N\Rs Aprt.Axe.p(x.floorser)
highest N/N Anet.Axe.(n(x) AND (x.heighter =
max(rt)r(Arr.∃ye.(n(y) AND r = y.heighter))))
</table>
<bodyText confidence="0.955903730769231">
Category R in the above table corresponds to type r and Rs corresponds
to the type (rt).
The natural language expression “buildings with more than two floors”
will be parsed into the ASQL expression: Axe.(x.layere3 = ”building” AND
x.floorser &gt; 5). Note that while functional applications during parsing elimi-
nated most A operators, the A operator that is introduced by the lexical entry
for buildings is not eliminated. This remaining Axe is used to describe a
query over a variable x. In order to generate an SQL query, however, one
additional piece of information is required: the name of a table to query. This
information is provided via the layer keyword (layers, or feature sets in GIS
terminology, are equivalent to tables in general databases). While usually
the fieldname following the dot operator is a name for an actual field in the
database (such as floors in the above example), layer is a virtual attribute
in ASQL, used to associate a layer with a variable. Whenever an expression
such as x.layere3 = ”building” is found, the parser associates x with the table
“building”, and hence the above expression is translated into the SQL query:
SELECT x.* FROM building AS x WHERE x.floors&gt;5;
A bit more complex example is the query “highest buildings”, which is
translated into: Axe.(x.layere3 = “building&amp;quot; AND x.heighter = max(rt)r(Arr.
∃ye.(y.layere3 =&amp;quot; building&amp;quot; AND r = y.heighter)))). This expression demon-
strates several features of ASQL. Note that max is a free identifier, which is
expected to be a name of an SQL function. The function max receives a A
expression, and is therefore interpreted as an aggregate function. Finally, the
expression in the argument of max fits pattern P2 above, and the result is:
SELECT x.* FROM building AS x WHERE x.floors=(SELECT max(y.floors)
FROM building);
</bodyText>
<sectionHeader confidence="0.894865" genericHeader="method">
3 Lexicon architecture
</sectionHeader>
<bodyText confidence="0.999939363636364">
The data independent part of the lexicon is the core of our controlled lan-
guage. This is the part of the lexicon that involves general logical and spatial
operators that do not depend on the actual GIS. By carefully selecting the
data-independent lexical items, we are able to express very complex queries
while avoiding vagueness and ambiguity problems that often undermine the
usability of NLIs. An important part of our work is the ability to express
spatial relations between GIS objects. However, non-spatial lexical items are
an important part of the lexicon as well. In the first part of this section we de-
scribe the non-spatial items in the lexicon. In the following part we review the
spatially-related lexical items. Finally we present classes of data-dependent
lexical items.
</bodyText>
<subsectionHeader confidence="0.909329">
3.1 Non-spatial lexical items
</subsectionHeader>
<bodyText confidence="0.955367">
Non-spatial lexical items can be partitioned into the following groups:
</bodyText>
<listItem confidence="0.999334818181818">
• Measure units, such as meters, kilometers, miles, acres. The lexical def-
inition for these items converts any unit into standard units (e.g. metric
units).
• Numerical predicates, such as less than n, at least n, between n and m.
Numerical predicates represent sets of real numbers.
• Superlatives: biggest, smallest, most, least. The words most and least can
be used to refer to the maximal or minimal value of any numerical field in the
database. Other words such as largest and longest are used as abbreviation
for “most area” and “most length”.
• Boolean connectives: and, or, not.
• Other lexical entries: that, which, is, are, with, without, have.
</listItem>
<subsectionHeader confidence="0.943729">
3.2 Spatial lexical items
</subsectionHeader>
<bodyText confidence="0.999805375">
As mentioned before, we aim to design a controlled language that would avoid
the pitfalls of vagueness and context-dependent ambiguity. In order to satisfy
this requirement, we need to avoid vague qualitative relations such as near, far
and almost. Another type of relations that need to be avoided are projective
relations such as in front of, behind, left and right. The meaning of these
prepositions involves context-dependent[6] elements that are hard to handle
within a controlled language.
The following spatial relations are included in the lexicon:
</bodyText>
<listItem confidence="0.9936319375">
• Intersectional relations, following Egenhofer’s 9-intersection model [3]: in,
outside of, borders, overlaps, crosses, contains and intersects. Note that
only the first two expressions are prepositions, while the others are verbs.
• Distance: the word from is used to specify exact distance, as in “200m from
a lake”.
• Constructors: intersection of, border of and center of. These words are
used to refer to spatial entities that do not exist in the database, but can
be derived from existing objects. For example, assuming “42nd Street” and
“Broadway” are objects in the database, “the intersection of 42nd street
and Broadway” can be constructed by intersecting the geometrical repre-
sentations of the two streets.
• Relative orientation: north of, south east of and the 3-place relation between
are all used to describe the orientation of one object relative to another
object (or objects, as in the case of between).
• Superlatives: closest and furthest are spatially-related superlatives.
3.3 Data-dependent lexical items
</listItem>
<bodyText confidence="0.999914954545455">
Data dependent lexical items are lexical items that refer to specific data inside
the database and may therefore change from one data set to another. GIS
data are divided into separate thematic feature classes or layers, whereby each
layer consists of one type of geometrical entity such as a building, street or
utility pole. For each layer there is usually an associated set of attributes that
represent non-spatial data attached to real world geometric objects. These
may be boolean data, numeric data or strings. Examples for such attributes
are the number of floors in a building or the name of a street. String values
such as street names should be part of the lexicon as well.
Data-dependent items are represented in the lexicon in the form of tem-
plates, which are lexical items with parametrized values for layer name, at-
tribute name and attribute value. An example for such a template is:
”#strval” N/N{l = #layer} λn.λx.(n(x) AND (x.#attr like #strval))
The ”#strval” template defines lexical items that refer to strings inside the
database. The lexical analyzer searches the database for strings that match
lexical tokens that are not present in the lexicon. For each such string the
above template is instantiated with the relevant layer name, attribute name
and string value. Similar templates are used for layer names and attributes of
various types. In case the lexical entries need to be different than the actual
names in the database, a definition file is used to add those lexical items and
instantiate the relevant templates for those items. No knowledge in λSQL is
required in order to edit the definition file.
</bodyText>
<sectionHeader confidence="0.825471" genericHeader="method">
4 Semantics of spatial prepositions
</sectionHeader>
<bodyText confidence="0.999797">
While some progress was made in semantic theories of prepositional phrases
in recent years [18,7], certain aspects of spatial linguistic phenomena have
not been extensively treated in the semantic literature, but are nevertheless
crucial for interfaces to spatial databases. Two such aspects that are treated
in our system and are discussed below.
</bodyText>
<subsectionHeader confidence="0.822151">
4.1 Eigenspace vs. Existential semantics
</subsectionHeader>
<bodyText confidence="0.997443411764706">
While previous work on prepositional semantics mainly dealt with relation-
ships between two distinct objects, GIS queries often correspond to relation-
ships between sets of objects. Consider the query “buildings that are up to
200m from a lake”. In case there is more than one lake, we expect the system
to return any building such that there is at least one lake up to 200m from it.
In other words, it appears like the query existentially quantifies over lakes. On
the other hand, if we change the query to “buildings that are at least 200m
from a lake”, we would expect the system to return buildings that are over
200m away from all the lakes. The query “buildings that are between 200m
and 500m from a lake” has a yet more complex semantics, and should result
in any building such that there is at least one lake less than 500m from it and
there is no lake less than 200m from it.
The semantics of the above three queries becomes much clearer, however,
when instead of interpreting the indefinite “a lake” as a quantifier (existential,
universal or other) over the lakes in the database, “a lake” is interpreted as the
set of all lakes, and distance is measured with respect to the space taken by
the union of all lakes. We refer to this kind of interpretation for indefinites as
eigenspace semantics. In SQL, the eigenspace of a set of objects is evaluated
by using the aggregate function GeomUnion over a set of objects, as in:
SELECT geomunion(x.the geom) FROM lake AS x;
In our framework, eigenspace semantics is treated by enabling a type-
shifting from an indefinite noun-phrase into a special category G used for
representing the eigenspace. The λSQL expression for G/N type-shifting is:
λn.geomunion(λg.∃x.(n(x) AND g = x.the geom)) where the geom is the
attribute for the geometrical data of an object in GIS database. The λSQL
expression for the preposition from, of category (((N\N)\RS)/G), is then
defined by: λg.λp.λn.λx. (n(x) AND p(distance(x.the geom, g))).
It is important to note that while eigenspace semantics are used for spatial
prepositions, in the case of other spatial relations that are not expressed using
prepositions, such as the verbs contains and intersects, an indefinite is treated
in the usual way, as an existential quantifier. For example, if we ask about
“towns that contain a building with more than 10 floors”, the eigenspace se-
mantics would mean finding a town than contains all buildings with more than
one floor, whereas we expect to get any town that contains at least one building
</bodyText>
<figureCaption confidence="0.541464">
Fig 1. Example for between Fig 2. Query result in QGIS
</figureCaption>
<bodyText confidence="0.9966475">
with more than 10 floors. We achieve the correct semantics in this case by pro-
viding a λSQL expression for verbs such as contains that existentially quanti-
fies over the set of contained objects: λn1.λn2.λx.∃y.(n1(y) AND n2(y) AND
contains(x.the geom, y.the geom)).
</bodyText>
<subsectionHeader confidence="0.996331">
4.2 Semantics of between
</subsectionHeader>
<bodyText confidence="0.99778032">
An additional aspect of spatial relations that has so far been ignored in the se-
mantic literature concerns the relations between non-convex objects. A funda-
mental spatial relation which is quite problematic in the context of non-convex
objects is the 3-place relation between.
Zwarts and Winter [18] suggest the following definition for between: X is
between Y and Z if X ⊆ convexHull(Y ∪Z)\Y \Z, for convex objects in X, Y
and Z. The problem is that many objects we deal with in the context of GISs
are not convex. For example, it could be quite handy to talk about objects
between two streets. However, streets are often non-convex shapes. As can
be seen in figure 1, the convex hull for two streets represented by the solid
lines includes areas that do not agree with our understanding of the expression
between the two streets. In order to overcome this problem, we suggest the
following definition:
Definition 4.1 Let X, Y and Z be sets of points. We say that X is between
Y and Z iff either there is a point x on the border of Y such that the shortest
line connecting x to Z crosses X, but does not cross Y, or there is a point y on
the border of Z such that the shortest line connecting y to Y crosses X, but
does not cross Z.
The areas between the streets according to Definition 1 are marked by
stripes. As can be seen from the illustration, the new definition is more
in agreement with our intuitive understanding of between. Note that while
the above is a strictly spatial definition of between, in some contexts people
may use between in sloppier ways (e.g., Buxton is between Manchester and
Sheffield). In our system, however, we wish to avoid the vagueness of such
sloppy usages.
</bodyText>
<sectionHeader confidence="0.990595" genericHeader="method">
5 Implementation
</sectionHeader>
<bodyText confidence="0.99994715">
The NLI presented in this paper was implemented in C++. The parser reads
the lexicon from a text file that includes the syntactic categories, and the se-
mantics is represented using ASQL expressions for all data-independent lexical
items. Data-dependent items are represented using templates, as explained in
section 3.3. When the user enters a natural-language query, the query is parsed
using a bottom-up right-to-left tabular Combinatorial Categorial Grammar
(CCG) parser that was developed as part of the NLI prototype. The resulting
ASQL expression is then converted into an SQL query as explained in section
2, which is sent to a spatially enabled database engine.
The system presented here uses PostGIS (http://postgis.refractions.net/)
as a back-end. PostGIS is an open-source GIS extension to the PostgreSQL
database engine, which implements the OpenGIS “Simple features specifica-
tion for SQL” standard [2]. PostGIS basically supplies a set of functions that
operate on vector representations, such as a function that calculates distance
between polygons. The SQL queries are sent to PostGIS, which generates the
result in a form of a table which is loaded into a GIS front-end that supports
PostGIS, such as QGIS (http://www.qgis.org).
For example, the query “Buildings that are up to 500m from the intersec-
tion of Elm street and Oak street” are converted into the SQL query, which
generates the result in figure 2:
</bodyText>
<construct confidence="0.36043775">
(SELECT x.* FROM building AS x WHERE distance(x.the geom, intersection((
SELECT GeomUnion(x2.the geom) FROM street AS x2 WHERE x2.street nam
LIKE ’elm’),(SELECT GeomUnion(x3.the geom) FROM street AS x3 WHERE
x3.street nam LIKE ’oak’)))&lt;=500)
</construct>
<sectionHeader confidence="0.982232" genericHeader="conclusions">
6 Conclusions and future work
</sectionHeader>
<bodyText confidence="0.99997875">
This work has presented an interface to GISs that is based on a controlled
fragment of English. We believe to have demonstrated that it is possible to
build such usable interfaces and express quite complex queries using a simple
fragment of English. Future work on this subject can be done at several dif-
ferent levels: expanding the lexicon further by adding quantifiers, comparison
between attributes of different objects and possibly anaphoric expressions.
More thorough theoretical study is required regarding semantic issues such
as eigenspace and between presented here, and finally, an empirical study is
necessary to evaluate how usable such interfaces are for actual GIS users of
varying skills and needs. We believe, however, that the general architecture
and prototype demo interface that we suggest can be developed into a useful
tool for planners and other professional users of GISs.
</bodyText>
<sectionHeader confidence="0.992313" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.996343577777778">
[1] I. Androutsopoulos and G. Ritchie. Database interfaces. In R. Dale, H. Moisl,
and H. Somers, editors, Handbook of Natural Language Processing, chapter 9,
pages 209–240. Marcel Dekker Inc., 2000.
[2] Open Geospatial Consortium. Simple Features Speciication for SQL. http:
//www.opengis.org/docs/99-049.pdf.
[3] M. Egenhofer and J. Herring. Categorizing binary topological relations between
regions, lines and points in geographic databases. Technical report, Department
of Surveying Engineering, University of Maine, Orono, ME, 1991.
[4] P.P. Filipe and N.J. Mamede. Databases and natural language interfaces. In
JISBD 2000, pages 321–332, 2000.
[5] A.U. Frank and D.M. Mark. Language issues for GIS. In D. MacGuire,
M.F. Goodchild, and D. Rhind, editors, Geographical Information Systems:
Principles and Applications, pages 147–163. Wiley, New York, 1991.
[6] A. Hershkovits. Language and Spatial Cognition: an interdisciplinary study of
the prepositions in English. Cambridge University Press, Cambridge, 1986.
[7] M. Kracht. On the semantics of locatives. Linguistics and Philosophy, 25:157–
232, 2002.
[8] D.M Mark, S. Svorou, and D. Zubin. Spatial terms and spatial concepts:
Geographic, cognitive and linguistic perspectives. In International Geographic
Information Systems (IGIS), pages 101–112, Arlington, VA, 1987.
[9] M. Minock. A phrasal approach to natural language interfaces over databases.
In NLDB-2005, Alicante, Spain, June 2005.
[10] R. Nelken and N. Francez. Querying temporal databases using controlled
natural language. In COLING 2000 - Volume 2, pages 1076–1080, 2000.
[11] I. Pratt. Temporal prepositions and their logic. Artiicial Intelligence, 166(1–
2):1–36, 2005.
[12] Mukesh Kumar Rohil. Natural language processing to query a geographic
information system(india) knowledgebase. In Map India, India, 2000.
[13] I. Schlaisich and M. Egenhofer. Multimodal spatial querying: What people
sketch and talk about. In C. Stephanidis, editor, 1st International Conference
on Universal Access in Human-Computer Interaction, pages 732–736, New
Orleans, LA, August 2001.
[14] J. Star and J. Estes. Geographic Information System, An Introduction. Prentice
Hall, Englewood Cliffs, NJ, 1990.
[15] Fangju Wang. Handling grammatical errors, ambiguity and impreciseness in
GIS natural language queries. Transactions in GIS, 7(1):103–121, 2003.
[16] H. Wang, A.M MacEachren, and G. Cai. Design of human-GIS dialogue
for communication of vague spatial concepts based on human communication
framework. In GIScience 2004, Adelphi, MD, 2004.
[17] J.M. Zelle and R.J. Mooney. Learning to parse database queries using
inductive logic programming. In Thirteenth National Conference on Aritiicial
Intelligence, pages 1050–1055, Portland, OR, August 1996.
[18] J. Zwarts and Y. Winter. Vector space semantics: a modeltheoretic analysis of
locative prepositions. Journal of Logic, Language and Information, 9:171–213,
2000.
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.646494">
<title confidence="0.999295">Controlled Language for Geographical Information System Queries</title>
<author confidence="0.994515">Sela Mador-Haim</author>
<author confidence="0.994515">Yoad Winter</author>
<author confidence="0.994515">Anthony Braun</author>
<abstract confidence="0.9497607">Technion I.I.T technion. ac. il,winter@cs. technion. ac. il tonyb@geofocus. co. il Abstract Natural language interfaces to spatial databases have not received a lot of attention in computational linguistics, in spite of the potential value of such systems for users of Geographical Information Systems (GISs). This paper presents a controlled language for GIS queries, solves some of the semantic problems for spatial inference in this language, and introduces a system that implements this controlled language as a novel interface for GIS.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>I Androutsopoulos</author>
<author>G Ritchie</author>
</authors>
<title>Database interfaces. In</title>
<date>2000</date>
<booktitle>Handbook of Natural Language Processing, chapter 9,</booktitle>
<pages>209--240</pages>
<editor>R. Dale, H. Moisl, and H. Somers, editors,</editor>
<publisher>Marcel Dekker Inc.,</publisher>
<contexts>
<context position="1925" citStr="[15,1]" startWordPosition="286" endWordPosition="286"> for GISs are limited in scope and expressive power and lack the ability to express complex relationships over spatial entities. Some works ([9,17,12]) have demonstrated NLIs using databases that contain geographically related data. Those databases, however, lack any actual spatial information (e.g. geometric polygons representing buildings), and therefore do not deal with the problem of inferring spatial relations from such representations. In general, the design of NLIs to databases is regarded as a difficult problem since human interaction is often vague, ambiguous or highly contextualized [15,1]. The approach we take in this paper is to avoid many of these problems by designing a system that uses a controlled language for GIS queries. Such controlled languages [10,11], which are based on fragments of English, can be designed in a way that minimizes the use of vague, ambiguous and contextdependent expressions, while maintaining the ability to express very complex queries in a language that is a subset of English. We benefit from the fact that GISs are a closed, well-defined domain, which enables us to focus on data independent parts of the language. We show that the addition of data d</context>
</contexts>
<marker>[1]</marker>
<rawString>I. Androutsopoulos and G. Ritchie. Database interfaces. In R. Dale, H. Moisl, and H. Somers, editors, Handbook of Natural Language Processing, chapter 9, pages 209–240. Marcel Dekker Inc., 2000.</rawString>
</citation>
<citation valid="false">
<title>Open Geospatial Consortium. Simple Features Speciication for SQL.</title>
<pages>99--049</pages>
<note>http:</note>
<contexts>
<context position="20801" citStr="[2]" startWordPosition="3390" endWordPosition="3390">tion 3.3. When the user enters a natural-language query, the query is parsed using a bottom-up right-to-left tabular Combinatorial Categorial Grammar (CCG) parser that was developed as part of the NLI prototype. The resulting ASQL expression is then converted into an SQL query as explained in section 2, which is sent to a spatially enabled database engine. The system presented here uses PostGIS (http://postgis.refractions.net/) as a back-end. PostGIS is an open-source GIS extension to the PostgreSQL database engine, which implements the OpenGIS “Simple features specification for SQL” standard [2]. PostGIS basically supplies a set of functions that operate on vector representations, such as a function that calculates distance between polygons. The SQL queries are sent to PostGIS, which generates the result in a form of a table which is loaded into a GIS front-end that supports PostGIS, such as QGIS (http://www.qgis.org). For example, the query “Buildings that are up to 500m from the intersection of Elm street and Oak street” are converted into the SQL query, which generates the result in figure 2: (SELECT x.* FROM building AS x WHERE distance(x.the geom, intersection(( SELECT GeomUnion</context>
</contexts>
<marker>[2]</marker>
<rawString>Open Geospatial Consortium. Simple Features Speciication for SQL. http: //www.opengis.org/docs/99-049.pdf.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Egenhofer</author>
<author>J Herring</author>
</authors>
<title>Categorizing binary topological relations between regions, lines and points in geographic databases.</title>
<date>1991</date>
<tech>Technical report,</tech>
<institution>Department of Surveying Engineering, University of Maine,</institution>
<location>Orono, ME,</location>
<contexts>
<context position="12294" citStr="[3]" startWordPosition="1973" endWordPosition="1973">to design a controlled language that would avoid the pitfalls of vagueness and context-dependent ambiguity. In order to satisfy this requirement, we need to avoid vague qualitative relations such as near, far and almost. Another type of relations that need to be avoided are projective relations such as in front of, behind, left and right. The meaning of these prepositions involves context-dependent[6] elements that are hard to handle within a controlled language. The following spatial relations are included in the lexicon: • Intersectional relations, following Egenhofer’s 9-intersection model [3]: in, outside of, borders, overlaps, crosses, contains and intersects. Note that only the first two expressions are prepositions, while the others are verbs. • Distance: the word from is used to specify exact distance, as in “200m from a lake”. • Constructors: intersection of, border of and center of. These words are used to refer to spatial entities that do not exist in the database, but can be derived from existing objects. For example, assuming “42nd Street” and “Broadway” are objects in the database, “the intersection of 42nd street and Broadway” can be constructed by intersecting the geom</context>
</contexts>
<marker>[3]</marker>
<rawString>M. Egenhofer and J. Herring. Categorizing binary topological relations between regions, lines and points in geographic databases. Technical report, Department of Surveying Engineering, University of Maine, Orono, ME, 1991.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P P Filipe</author>
<author>N J Mamede</author>
</authors>
<title>Databases and natural language interfaces.</title>
<date>2000</date>
<booktitle>In JISBD 2000,</booktitle>
<pages>321--332</pages>
<contexts>
<context position="4233" citStr="[4,10]" startWordPosition="650" endWordPosition="650">ews the architecture of the lexicon. Section 4 discusses semantic issues concerning spatial relations in natural languages. Section 5 presents our implementation, and section 6 concludes. 2 A compositional approach for building SQL queries SQL is a recursive language in the sense that it allows using one query as part of an expression within another query. However, due to its complex syntax, the construction of an SQL query in a compositional way from a query in natural language is far from being a straightforward task. One way to tackle this problem is by using an intermediate representation [4,10]. While such an intermediate language avoids the complications of composing SQL queries directly, its downsides are the additional translation phase it requires and the fact that such intermediate languages are usually not as expressive as the target language. We introduce an intermediate representation language, which we call ASQL. This language only adds the necessary “compositional glue” to SQL. As a result, only a simple translation process is necessary to convert ASQL queries into normal SQL syntax. ASQL expressions are basically expressions in the simply typed A Calculus with the additio</context>
</contexts>
<marker>[4]</marker>
<rawString>P.P. Filipe and N.J. Mamede. Databases and natural language interfaces. In JISBD 2000, pages 321–332, 2000.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A U Frank</author>
<author>D M Mark</author>
</authors>
<title>Language issues for GIS.</title>
<date>1991</date>
<booktitle>Geographical Information Systems: Principles and Applications,</booktitle>
<pages>147--163</pages>
<editor>In D. MacGuire, M.F. Goodchild, and D. Rhind, editors,</editor>
<publisher>Wiley,</publisher>
<location>New York,</location>
<contexts>
<context position="1009" citStr="[15,16,5,8]" startWordPosition="147" endWordPosition="147">aphical Information Systems (GISs). This paper presents a controlled language for GIS queries, solves some of the semantic problems for spatial inference in this language, and introduces a system that implements this controlled language as a novel interface for GIS. 1 Introduction Geographical Information Systems (GISs) are information systems for processing of data that pertain to spatial or geographic coordinates [14]. Even though GISs are enjoying a rapidly growing users community, the current systems are often difficult to use or require a long learning process [13]. In the GIS literature [15,16,5,8], it has been well-acknowledged that natural language interfaces (NLIs) would significantly enhance the exploitation of the more complex features of GISs, yet despite the potential value of NLIs for GISs, the work on this subject has so far been rather limited [16]. To the best of our knowledge, existing NLIs for GISs are limited in scope and expressive power and lack the ability to express complex relationships over spatial entities. Some works ([9,17,12]) have demonstrated NLIs using databases that contain geographically related data. Those databases, however, lack any actual spatial informa</context>
</contexts>
<marker>[5]</marker>
<rawString>A.U. Frank and D.M. Mark. Language issues for GIS. In D. MacGuire, M.F. Goodchild, and D. Rhind, editors, Geographical Information Systems: Principles and Applications, pages 147–163. Wiley, New York, 1991.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Hershkovits</author>
</authors>
<title>Language and Spatial Cognition: an interdisciplinary study of the prepositions in English.</title>
<date>1986</date>
<publisher>Cambridge University Press,</publisher>
<location>Cambridge,</location>
<contexts>
<context position="12095" citStr="[6]" startWordPosition="1946" endWordPosition="1946">tion for “most area” and “most length”. • Boolean connectives: and, or, not. • Other lexical entries: that, which, is, are, with, without, have. 3.2 Spatial lexical items As mentioned before, we aim to design a controlled language that would avoid the pitfalls of vagueness and context-dependent ambiguity. In order to satisfy this requirement, we need to avoid vague qualitative relations such as near, far and almost. Another type of relations that need to be avoided are projective relations such as in front of, behind, left and right. The meaning of these prepositions involves context-dependent[6] elements that are hard to handle within a controlled language. The following spatial relations are included in the lexicon: • Intersectional relations, following Egenhofer’s 9-intersection model [3]: in, outside of, borders, overlaps, crosses, contains and intersects. Note that only the first two expressions are prepositions, while the others are verbs. • Distance: the word from is used to specify exact distance, as in “200m from a lake”. • Constructors: intersection of, border of and center of. These words are used to refer to spatial entities that do not exist in the database, but can be de</context>
</contexts>
<marker>[6]</marker>
<rawString>A. Hershkovits. Language and Spatial Cognition: an interdisciplinary study of the prepositions in English. Cambridge University Press, Cambridge, 1986.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Kracht</author>
</authors>
<title>On the semantics of locatives.</title>
<date>2002</date>
<journal>Linguistics and Philosophy,</journal>
<volume>25</volume>
<pages>232</pages>
<contexts>
<context position="15014" citStr="[18,7]" startWordPosition="2415" endWordPosition="2415"> lexicon. For each such string the above template is instantiated with the relevant layer name, attribute name and string value. Similar templates are used for layer names and attributes of various types. In case the lexical entries need to be different than the actual names in the database, a definition file is used to add those lexical items and instantiate the relevant templates for those items. No knowledge in λSQL is required in order to edit the definition file. 4 Semantics of spatial prepositions While some progress was made in semantic theories of prepositional phrases in recent years [18,7], certain aspects of spatial linguistic phenomena have not been extensively treated in the semantic literature, but are nevertheless crucial for interfaces to spatial databases. Two such aspects that are treated in our system and are discussed below. 4.1 Eigenspace vs. Existential semantics While previous work on prepositional semantics mainly dealt with relationships between two distinct objects, GIS queries often correspond to relationships between sets of objects. Consider the query “buildings that are up to 200m from a lake”. In case there is more than one lake, we expect the system to ret</context>
</contexts>
<marker>[7]</marker>
<rawString>M. Kracht. On the semantics of locatives. Linguistics and Philosophy, 25:157– 232, 2002.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D M Mark</author>
<author>S Svorou</author>
<author>D Zubin</author>
</authors>
<title>Spatial terms and spatial concepts: Geographic, cognitive and linguistic perspectives.</title>
<date>1987</date>
<booktitle>In International Geographic Information Systems (IGIS),</booktitle>
<pages>101--112</pages>
<location>Arlington, VA,</location>
<contexts>
<context position="1009" citStr="[15,16,5,8]" startWordPosition="147" endWordPosition="147">aphical Information Systems (GISs). This paper presents a controlled language for GIS queries, solves some of the semantic problems for spatial inference in this language, and introduces a system that implements this controlled language as a novel interface for GIS. 1 Introduction Geographical Information Systems (GISs) are information systems for processing of data that pertain to spatial or geographic coordinates [14]. Even though GISs are enjoying a rapidly growing users community, the current systems are often difficult to use or require a long learning process [13]. In the GIS literature [15,16,5,8], it has been well-acknowledged that natural language interfaces (NLIs) would significantly enhance the exploitation of the more complex features of GISs, yet despite the potential value of NLIs for GISs, the work on this subject has so far been rather limited [16]. To the best of our knowledge, existing NLIs for GISs are limited in scope and expressive power and lack the ability to express complex relationships over spatial entities. Some works ([9,17,12]) have demonstrated NLIs using databases that contain geographically related data. Those databases, however, lack any actual spatial informa</context>
</contexts>
<marker>[8]</marker>
<rawString>D.M Mark, S. Svorou, and D. Zubin. Spatial terms and spatial concepts: Geographic, cognitive and linguistic perspectives. In International Geographic Information Systems (IGIS), pages 101–112, Arlington, VA, 1987.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Minock</author>
</authors>
<title>A phrasal approach to natural language interfaces over databases.</title>
<date>2005</date>
<booktitle>In NLDB-2005,</booktitle>
<location>Alicante, Spain,</location>
<contexts>
<context position="1469" citStr="[9,17,12]" startWordPosition="222" endWordPosition="222">ly growing users community, the current systems are often difficult to use or require a long learning process [13]. In the GIS literature [15,16,5,8], it has been well-acknowledged that natural language interfaces (NLIs) would significantly enhance the exploitation of the more complex features of GISs, yet despite the potential value of NLIs for GISs, the work on this subject has so far been rather limited [16]. To the best of our knowledge, existing NLIs for GISs are limited in scope and expressive power and lack the ability to express complex relationships over spatial entities. Some works ([9,17,12]) have demonstrated NLIs using databases that contain geographically related data. Those databases, however, lack any actual spatial information (e.g. geometric polygons representing buildings), and therefore do not deal with the problem of inferring spatial relations from such representations. In general, the design of NLIs to databases is regarded as a difficult problem since human interaction is often vague, ambiguous or highly contextualized [15,1]. The approach we take in this paper is to avoid many of these problems by designing a system that uses a controlled language for GIS queries. S</context>
</contexts>
<marker>[9]</marker>
<rawString>M. Minock. A phrasal approach to natural language interfaces over databases. In NLDB-2005, Alicante, Spain, June 2005.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Nelken</author>
<author>N Francez</author>
</authors>
<title>Querying temporal databases using controlled natural language.</title>
<date>2000</date>
<journal></journal>
<booktitle>In COLING</booktitle>
<volume>2</volume>
<pages>1076--1080</pages>
<contexts>
<context position="2101" citStr="[10,11]" startWordPosition="316" endWordPosition="316">using databases that contain geographically related data. Those databases, however, lack any actual spatial information (e.g. geometric polygons representing buildings), and therefore do not deal with the problem of inferring spatial relations from such representations. In general, the design of NLIs to databases is regarded as a difficult problem since human interaction is often vague, ambiguous or highly contextualized [15,1]. The approach we take in this paper is to avoid many of these problems by designing a system that uses a controlled language for GIS queries. Such controlled languages [10,11], which are based on fragments of English, can be designed in a way that minimizes the use of vague, ambiguous and contextdependent expressions, while maintaining the ability to express very complex queries in a language that is a subset of English. We benefit from the fact that GISs are a closed, well-defined domain, which enables us to focus on data independent parts of the language. We show that the addition of data dependent portions can be done semi-automatically and requires very low effort. Our implementation of an NLI for GISs involves four major tasks: first, defining the data indepen</context>
<context position="4233" citStr="[4,10]" startWordPosition="650" endWordPosition="650">ews the architecture of the lexicon. Section 4 discusses semantic issues concerning spatial relations in natural languages. Section 5 presents our implementation, and section 6 concludes. 2 A compositional approach for building SQL queries SQL is a recursive language in the sense that it allows using one query as part of an expression within another query. However, due to its complex syntax, the construction of an SQL query in a compositional way from a query in natural language is far from being a straightforward task. One way to tackle this problem is by using an intermediate representation [4,10]. While such an intermediate language avoids the complications of composing SQL queries directly, its downsides are the additional translation phase it requires and the fact that such intermediate languages are usually not as expressive as the target language. We introduce an intermediate representation language, which we call ASQL. This language only adds the necessary “compositional glue” to SQL. As a result, only a simple translation process is necessary to convert ASQL queries into normal SQL syntax. ASQL expressions are basically expressions in the simply typed A Calculus with the additio</context>
</contexts>
<marker>[10]</marker>
<rawString>R. Nelken and N. Francez. Querying temporal databases using controlled natural language. In COLING 2000 - Volume 2, pages 1076–1080, 2000.</rawString>
</citation>
<citation valid="true">
<authors>
<author>I Pratt</author>
</authors>
<title>Temporal prepositions and their logic.</title>
<date>2005</date>
<journal>Artiicial Intelligence,</journal>
<volume>166</volume>
<issue>1</issue>
<pages>2--1</pages>
<contexts>
<context position="2101" citStr="[10,11]" startWordPosition="316" endWordPosition="316">using databases that contain geographically related data. Those databases, however, lack any actual spatial information (e.g. geometric polygons representing buildings), and therefore do not deal with the problem of inferring spatial relations from such representations. In general, the design of NLIs to databases is regarded as a difficult problem since human interaction is often vague, ambiguous or highly contextualized [15,1]. The approach we take in this paper is to avoid many of these problems by designing a system that uses a controlled language for GIS queries. Such controlled languages [10,11], which are based on fragments of English, can be designed in a way that minimizes the use of vague, ambiguous and contextdependent expressions, while maintaining the ability to express very complex queries in a language that is a subset of English. We benefit from the fact that GISs are a closed, well-defined domain, which enables us to focus on data independent parts of the language. We show that the addition of data dependent portions can be done semi-automatically and requires very low effort. Our implementation of an NLI for GISs involves four major tasks: first, defining the data indepen</context>
</contexts>
<marker>[11]</marker>
<rawString>I. Pratt. Temporal prepositions and their logic. Artiicial Intelligence, 166(1– 2):1–36, 2005.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mukesh Kumar Rohil</author>
</authors>
<title>Natural language processing to query a geographic information system(india) knowledgebase.</title>
<date>2000</date>
<booktitle>In Map India,</booktitle>
<location>India,</location>
<contexts>
<context position="1469" citStr="[9,17,12]" startWordPosition="222" endWordPosition="222">ly growing users community, the current systems are often difficult to use or require a long learning process [13]. In the GIS literature [15,16,5,8], it has been well-acknowledged that natural language interfaces (NLIs) would significantly enhance the exploitation of the more complex features of GISs, yet despite the potential value of NLIs for GISs, the work on this subject has so far been rather limited [16]. To the best of our knowledge, existing NLIs for GISs are limited in scope and expressive power and lack the ability to express complex relationships over spatial entities. Some works ([9,17,12]) have demonstrated NLIs using databases that contain geographically related data. Those databases, however, lack any actual spatial information (e.g. geometric polygons representing buildings), and therefore do not deal with the problem of inferring spatial relations from such representations. In general, the design of NLIs to databases is regarded as a difficult problem since human interaction is often vague, ambiguous or highly contextualized [15,1]. The approach we take in this paper is to avoid many of these problems by designing a system that uses a controlled language for GIS queries. S</context>
</contexts>
<marker>[12]</marker>
<rawString>Mukesh Kumar Rohil. Natural language processing to query a geographic information system(india) knowledgebase. In Map India, India, 2000.</rawString>
</citation>
<citation valid="true">
<authors>
<author>I Schlaisich</author>
<author>M Egenhofer</author>
</authors>
<title>Multimodal spatial querying: What people sketch and talk about.</title>
<date>2001</date>
<booktitle>1st International Conference on Universal Access in Human-Computer Interaction,</booktitle>
<pages>732--736</pages>
<editor>In C. Stephanidis, editor,</editor>
<location>New Orleans, LA,</location>
<contexts>
<context position="974" citStr="[13]" startWordPosition="142" endWordPosition="142">h systems for users of Geographical Information Systems (GISs). This paper presents a controlled language for GIS queries, solves some of the semantic problems for spatial inference in this language, and introduces a system that implements this controlled language as a novel interface for GIS. 1 Introduction Geographical Information Systems (GISs) are information systems for processing of data that pertain to spatial or geographic coordinates [14]. Even though GISs are enjoying a rapidly growing users community, the current systems are often difficult to use or require a long learning process [13]. In the GIS literature [15,16,5,8], it has been well-acknowledged that natural language interfaces (NLIs) would significantly enhance the exploitation of the more complex features of GISs, yet despite the potential value of NLIs for GISs, the work on this subject has so far been rather limited [16]. To the best of our knowledge, existing NLIs for GISs are limited in scope and expressive power and lack the ability to express complex relationships over spatial entities. Some works ([9,17,12]) have demonstrated NLIs using databases that contain geographically related data. Those databases, howev</context>
</contexts>
<marker>[13]</marker>
<rawString>I. Schlaisich and M. Egenhofer. Multimodal spatial querying: What people sketch and talk about. In C. Stephanidis, editor, 1st International Conference on Universal Access in Human-Computer Interaction, pages 732–736, New Orleans, LA, August 2001.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Star</author>
<author>J Estes</author>
</authors>
<title>Geographic Information System, An Introduction.</title>
<date>1990</date>
<publisher>Prentice Hall,</publisher>
<location>Englewood Cliffs, NJ,</location>
<contexts>
<context position="821" citStr="[14]" startWordPosition="117" endWordPosition="117">atural language interfaces to spatial databases have not received a lot of attention in computational linguistics, in spite of the potential value of such systems for users of Geographical Information Systems (GISs). This paper presents a controlled language for GIS queries, solves some of the semantic problems for spatial inference in this language, and introduces a system that implements this controlled language as a novel interface for GIS. 1 Introduction Geographical Information Systems (GISs) are information systems for processing of data that pertain to spatial or geographic coordinates [14]. Even though GISs are enjoying a rapidly growing users community, the current systems are often difficult to use or require a long learning process [13]. In the GIS literature [15,16,5,8], it has been well-acknowledged that natural language interfaces (NLIs) would significantly enhance the exploitation of the more complex features of GISs, yet despite the potential value of NLIs for GISs, the work on this subject has so far been rather limited [16]. To the best of our knowledge, existing NLIs for GISs are limited in scope and expressive power and lack the ability to express complex relationsh</context>
</contexts>
<marker>[14]</marker>
<rawString>J. Star and J. Estes. Geographic Information System, An Introduction. Prentice Hall, Englewood Cliffs, NJ, 1990.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Fangju Wang</author>
</authors>
<title>Handling grammatical errors, ambiguity and impreciseness in GIS natural language queries.</title>
<date>2003</date>
<journal>Transactions in GIS,</journal>
<volume>7</volume>
<issue>1</issue>
<contexts>
<context position="1009" citStr="[15,16,5,8]" startWordPosition="147" endWordPosition="147">aphical Information Systems (GISs). This paper presents a controlled language for GIS queries, solves some of the semantic problems for spatial inference in this language, and introduces a system that implements this controlled language as a novel interface for GIS. 1 Introduction Geographical Information Systems (GISs) are information systems for processing of data that pertain to spatial or geographic coordinates [14]. Even though GISs are enjoying a rapidly growing users community, the current systems are often difficult to use or require a long learning process [13]. In the GIS literature [15,16,5,8], it has been well-acknowledged that natural language interfaces (NLIs) would significantly enhance the exploitation of the more complex features of GISs, yet despite the potential value of NLIs for GISs, the work on this subject has so far been rather limited [16]. To the best of our knowledge, existing NLIs for GISs are limited in scope and expressive power and lack the ability to express complex relationships over spatial entities. Some works ([9,17,12]) have demonstrated NLIs using databases that contain geographically related data. Those databases, however, lack any actual spatial informa</context>
</contexts>
<marker>[15]</marker>
<rawString>Fangju Wang. Handling grammatical errors, ambiguity and impreciseness in GIS natural language queries. Transactions in GIS, 7(1):103–121, 2003.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Wang</author>
<author>A M MacEachren</author>
<author>G Cai</author>
</authors>
<title>Design of human-GIS dialogue for communication of vague spatial concepts based on human communication framework.</title>
<date>2004</date>
<booktitle>In GIScience 2004,</booktitle>
<location>Adelphi, MD,</location>
<contexts>
<context position="1009" citStr="[15,16,5,8]" startWordPosition="147" endWordPosition="147">aphical Information Systems (GISs). This paper presents a controlled language for GIS queries, solves some of the semantic problems for spatial inference in this language, and introduces a system that implements this controlled language as a novel interface for GIS. 1 Introduction Geographical Information Systems (GISs) are information systems for processing of data that pertain to spatial or geographic coordinates [14]. Even though GISs are enjoying a rapidly growing users community, the current systems are often difficult to use or require a long learning process [13]. In the GIS literature [15,16,5,8], it has been well-acknowledged that natural language interfaces (NLIs) would significantly enhance the exploitation of the more complex features of GISs, yet despite the potential value of NLIs for GISs, the work on this subject has so far been rather limited [16]. To the best of our knowledge, existing NLIs for GISs are limited in scope and expressive power and lack the ability to express complex relationships over spatial entities. Some works ([9,17,12]) have demonstrated NLIs using databases that contain geographically related data. Those databases, however, lack any actual spatial informa</context>
</contexts>
<marker>[16]</marker>
<rawString>H. Wang, A.M MacEachren, and G. Cai. Design of human-GIS dialogue for communication of vague spatial concepts based on human communication framework. In GIScience 2004, Adelphi, MD, 2004.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J M Zelle</author>
<author>R J Mooney</author>
</authors>
<title>Learning to parse database queries using inductive logic programming.</title>
<date>1996</date>
<booktitle>In Thirteenth National Conference on Aritiicial Intelligence,</booktitle>
<pages>1050--1055</pages>
<location>Portland, OR,</location>
<contexts>
<context position="1469" citStr="[9,17,12]" startWordPosition="222" endWordPosition="222">ly growing users community, the current systems are often difficult to use or require a long learning process [13]. In the GIS literature [15,16,5,8], it has been well-acknowledged that natural language interfaces (NLIs) would significantly enhance the exploitation of the more complex features of GISs, yet despite the potential value of NLIs for GISs, the work on this subject has so far been rather limited [16]. To the best of our knowledge, existing NLIs for GISs are limited in scope and expressive power and lack the ability to express complex relationships over spatial entities. Some works ([9,17,12]) have demonstrated NLIs using databases that contain geographically related data. Those databases, however, lack any actual spatial information (e.g. geometric polygons representing buildings), and therefore do not deal with the problem of inferring spatial relations from such representations. In general, the design of NLIs to databases is regarded as a difficult problem since human interaction is often vague, ambiguous or highly contextualized [15,1]. The approach we take in this paper is to avoid many of these problems by designing a system that uses a controlled language for GIS queries. S</context>
</contexts>
<marker>[17]</marker>
<rawString>J.M. Zelle and R.J. Mooney. Learning to parse database queries using inductive logic programming. In Thirteenth National Conference on Aritiicial Intelligence, pages 1050–1055, Portland, OR, August 1996.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Zwarts</author>
<author>Y Winter</author>
</authors>
<title>Vector space semantics: a modeltheoretic analysis of locative prepositions.</title>
<date>2000</date>
<journal>Journal of Logic, Language and Information,</journal>
<volume>9</volume>
<contexts>
<context position="15014" citStr="[18,7]" startWordPosition="2415" endWordPosition="2415"> lexicon. For each such string the above template is instantiated with the relevant layer name, attribute name and string value. Similar templates are used for layer names and attributes of various types. In case the lexical entries need to be different than the actual names in the database, a definition file is used to add those lexical items and instantiate the relevant templates for those items. No knowledge in λSQL is required in order to edit the definition file. 4 Semantics of spatial prepositions While some progress was made in semantic theories of prepositional phrases in recent years [18,7], certain aspects of spatial linguistic phenomena have not been extensively treated in the semantic literature, but are nevertheless crucial for interfaces to spatial databases. Two such aspects that are treated in our system and are discussed below. 4.1 Eigenspace vs. Existential semantics While previous work on prepositional semantics mainly dealt with relationships between two distinct objects, GIS queries often correspond to relationships between sets of objects. Consider the query “buildings that are up to 200m from a lake”. In case there is more than one lake, we expect the system to ret</context>
<context position="18475" citStr="[18]" startWordPosition="2992" endWordPosition="2992">result in QGIS with more than 10 floors. We achieve the correct semantics in this case by providing a λSQL expression for verbs such as contains that existentially quantifies over the set of contained objects: λn1.λn2.λx.∃y.(n1(y) AND n2(y) AND contains(x.the geom, y.the geom)). 4.2 Semantics of between An additional aspect of spatial relations that has so far been ignored in the semantic literature concerns the relations between non-convex objects. A fundamental spatial relation which is quite problematic in the context of non-convex objects is the 3-place relation between. Zwarts and Winter [18] suggest the following definition for between: X is between Y and Z if X ⊆ convexHull(Y ∪Z)\Y \Z, for convex objects in X, Y and Z. The problem is that many objects we deal with in the context of GISs are not convex. For example, it could be quite handy to talk about objects between two streets. However, streets are often non-convex shapes. As can be seen in figure 1, the convex hull for two streets represented by the solid lines includes areas that do not agree with our understanding of the expression between the two streets. In order to overcome this problem, we suggest the following definit</context>
</contexts>
<marker>[18]</marker>
<rawString>J. Zwarts and Y. Winter. Vector space semantics: a modeltheoretic analysis of locative prepositions. Journal of Logic, Language and Information, 9:171–213, 2000.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>