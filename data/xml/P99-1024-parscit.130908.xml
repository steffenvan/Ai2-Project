<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<title confidence="0.977889">
The CommandTalk Spoken Dialogue System*
</title>
<author confidence="0.898529">
Amanda Stent, John Dowding
Jean Mark Gawron, Elizabeth Owen Bratt, and Robert Moore
</author>
<affiliation confidence="0.670423">
SRI International
</affiliation>
<address confidence="0.7921975">
333 Ravenswood Avenue
Menlo Park, CA 94025
</address>
<email confidence="0.998038">
{stent,dowding,gawron,owen,bmoore}@ai.sri.corn
</email>
<sectionHeader confidence="0.999554" genericHeader="abstract">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999902709677419">
CommandTalk (Moore et al., 1997) is a spoken-
language interface to the ModSAF battlefield
simulator that allows simulation operators to
generate and execute military exercises by cre-
ating forces and control measures, assigning
missions to forces, and controlling the display
(Ceranowicz, 1994). CommandTalk consists
of independent, cooperating agents interacting
through SRI&apos;s Open Agent Architecture (OAA)
(Martin et al., 1998). This architecture allows
components to be developed independently, and
then flexibly and dynamically combined to sup-
port distributed computation. Most of the
agents that compose CommandTalk have been
described elsewhere (for more detail, see (Moore
et al., 1997)). This paper describes extensions
to CommandTalk to support spoken dialogue.
While we make no theoretical claims about the
nature and structure of dialogue, we are influ-
enced by the theoretical work of (Grosz and
Sidner, 1986) and will use terminology from
that tradition when appropriate. We also follow
(Chu-Carroll and Brown, 1997) in distinguish-
ing task initiative and dialogue initiative.
Section 2 demonstrates the dialogue capabil-
ities of CommandTalk by way of an extended
example. Section 3 describes how language
in CommandTalk is modeled for understanding
and generation. Section 4 describes the archi-
tecture of the dialogue manager in detail. Sec-
tion 5 compares CommandTalk with other spo-
</bodyText>
<footnote confidence="0.996778625">
* This research was supported by the Defense Advanced
Research Projects Agency under Contract N66001-94-C-
6046 with the Space and Naval Warfare Systems Cen-
ter. The views and conclusions contained in this doc-
ument are those of the authors and should not be in-
terpreted as necessarily representing the official policies,
either express or implied, of the Defense Advanced Re-
search Projects Agency of the U.S. Government.
</footnote>
<keyword confidence="0.458759">
ken dialogue systems.
</keyword>
<sectionHeader confidence="0.996417" genericHeader="method">
2 Example Dialogues
</sectionHeader>
<bodyText confidence="0.999954857142857">
The following examples constitute a single ex-
tended dialogue illustrating the capabilities of
the dialogue manager with regard to structured
dialogue, clarification and correction, changes in
initiative, integration of speech and gesture, and
sensitivity to events occurring in the underlying
simulated world. 1
</bodyText>
<equation confidence="0.657820625">
Ex. 1: Confirmation
U 1 Create a point named Checkpoint
1 at 64 53
S 2
U 3 Create a CEV at Checkpoint 1
S 4 0
U 5 Create a CEV here &lt;click&gt;
S 6 0 I will create CEV at FQ 643 576
</equation>
<bodyText confidence="0.999736">
Utterances 1 and 3 illustrate typical success-
ful interactions between an operator and the
system. When no exceptional event occurs,
CommandTalk does not respond verbally. How-
ever, it does provide an audible tone to indicate
that it has completed processing. For a suc-
cessful command, it produces a rising tone, il-
lustrated by the 0 symbol in utterances 2 and
4. For an unsuccessful command it produces a
falling tone, illustrated by the 0 symbol in ut-
terances 12 and 14. 2
</bodyText>
<footnote confidence="0.9103317">
11.1 indicates a user utterance as recognized by the
system, and S indicates a system utterance. Bracketed
items in italics are gestures.
2The rising and falling tones come from the predia-
logue version of the system. They were added because
we observed that users did not always notice when the
system had not understood them correctly, and a tex-
tual error message alone did not always get the user&apos;s
attention. These tones also perform basic grounding be-
havior.
</footnote>
<page confidence="0.998541">
183
</page>
<bodyText confidence="0.999703333333333">
Utterance 6 demonstrates a case where, al-
though the system successfully completed the
command, it chose to provide an explicit con-
firmation. Explicit confirmations can be given
at any time. In this case, the system chose
to give the confirmation because it performed
a nontrivial reference, resolving &amp;quot;here&amp;quot; to the
map coordinates given by the gesture, FQ 643
576. Similar situations in which the system
gives an explicit confirmation are the resolution
of pronouns and elided, definite or plural noun
phrases.
</bodyText>
<equation confidence="0.868273888888889">
Ex. 2: Correction
U 7 Put Objective Golf here &lt;click&gt;
S 8 0 I will locate Objective Golf at FQ
658 583
U 9 I meant Objective Alpha
S 10 0 I will locate Objective Alpha at
FQ 658 583
Example 2 contains a correction sub-dialogue.
Utterance 9 is a correction of utterance 7, and
</equation>
<bodyText confidence="0.993791916666667">
is interpreted as though the operator had said
&amp;quot;Put Objective Alpha here&amp;quot;. This illustrates
two points. First, since utterance 7 was suc-
cessful, the system undoes its effects (that is,
deletes Objective Golf) before creating Objec-
tive Alpha. Second, although the edited utter-
ance contains the word &amp;quot;here&amp;quot;, the gesture that
was used to resolve that is no longer available.
The system keeps track of gestural information
along with linguistic information in its repre-
sentation of context in order to interpret cor-
rections.
</bodyText>
<equation confidence="0.7985944">
Ex. 3: Structured Sub-dialogue
U 11 CEV advance to Objective Golf
S 12 0 There are 2 CEVs. Do you mean
100A11 or 100Al2?
U 13 100A11
</equation>
<listItem confidence="0.589765">
S 14 0 There is no point named Ob-
jective Golf. Which point should
100A11 proceed to?
U 15 I said Objective Alpha
</listItem>
<bodyText confidence="0.936215647058824">
S 16 0 100A11 will proceed to Objective
Alpha
Example 3 illustrates a structured discourse
segment containing two subsegments. Utter-
ance 11 is uninterpretable for two reasons: the
reference to &amp;quot;CEV&amp;quot; is ambiguous, and Objec-
tive Golf does not exist. The first difficulty
is resolved in discourse segment 12-13, and the
second in discourse segment 14-16. Notice that
the operator is not required to answer the ques-
tion posed by the system in utterance 14, but
is free to correct the system&apos;s misunderstanding
of utterance 11 even though it is not the im-
mediately prior utterance. This is true because
utterance 13 (the most recent utterance) is in-
terpreted as if the operator had said &amp;quot;100A11
advance to Objective Golf&amp;quot;.
</bodyText>
<listItem confidence="0.7349395">
Ex. 4: Required Argument
U 17 Al2 conduct crater breach facing
north
S 18 0 Which point should 100Al2 con-
duct crater breach oriented north
at?
</listItem>
<equation confidence="0.6395165">
U 19 &lt;click&gt;
S 20 0 100Al2 will conduct crater
</equation>
<bodyText confidence="0.967540888888889">
breach oriented north at FQ 542
595
Example 4 demonstrates a case where, al-
though there are no errors in the operator&apos;s ut-
terance, the system requires additional informa-
tion before it can execute the command. Also
note that the question asked by the system in
utterance 18 is answered with an isolated ges-
ture.
</bodyText>
<subsectionHeader confidence="0.659197">
Ex. 5: Delayed Response
</subsectionHeader>
<bodyText confidence="0.9806302">
U 21 A13 continue to Checkpoint 1 in a
column formation.
S 22 0 There is no A13. Which unit
should proceed in a column forma-
tion to Checkpoint 1?
</bodyText>
<equation confidence="0.975486">
U 23 What units are there?
S 24 0 There are 2 units: 100A11 and
100Al2.
U 25 All proceed to Checkpoint 1.
</equation>
<bodyText confidence="0.968222888888889">
U 26 0 100A11 will proceed in a column
formation to Checkpoint 1.
In example 5, the system asks a question but
the operator needs to perform some other ac-
tivity before answering it. The question asked
by the system in utterance 22 is answered by
the operator in utterance 25. Due to the in-
tervening material, the most natural way to an-
swer the question posed in utterance 22 is with a
</bodyText>
<page confidence="0.996457">
184
</page>
<bodyText confidence="0.809406">
complete sentence, rather than an isolated noun
phrase.
</bodyText>
<figure confidence="0.7599386">
Ex. 6: Changes in the Simulated World
U 27 Al2 advance to Objective Bravo.
S 28 0 There is no Objective Bravo.
What point should 100Al2 ad-
vance to?
U 29 Create it at 635 545.
S 30 0
S 31 Should 100Al2 proceed to Objec-
tive Bravo?
U 32 Yes.
</figure>
<bodyText confidence="0.968674666666667">
S 33 0 100Al2 will proceed to Objective
Bravo.
Example 6 demonstrates the use of a guard,
or test to see if a situation holds. In utterance
27, a presupposition failure occurs, leading to
the open proposition expressed in utterance 28.
A guard, associated with the open proposition,
tests to see if the system can successfully resolve
&amp;quot;Objective Bravo&amp;quot;. Rather than answering the
question in utterance 28, the operator chooses
to create Objective Bravo. The system then
tests the guard, which succeeds because Objec-
tive Bravo now exists. The system therefore
takes dialogue initiative by asking the operator
in utterance 31 if that operator would like to
carry out the original command. Although, in
this case, the simulated world changed in direct
response to a linguistic act, in general the world
can change for a variety of reasons, including the
operator&apos;s activities on the GUI or the activities
of other operators.
</bodyText>
<sectionHeader confidence="0.9658285" genericHeader="method">
3 Language Interpretation and
Generation
</sectionHeader>
<bodyText confidence="0.999994795918367">
The language used in CommandTalk is derived
from a single grammar using Gemini (Dowding
et al., 1993), a unification-based grammar for-
malism. This grammar is used to provide all the
language modeling capabilities of the system,
including the language model used in the speech
recognizer, the syntactic and semantic interpre-
tation of user utterances (Dowding et al., 1994),
and the generation of system responses (Shieber
et al., 1990).
For speech recognition, Gemini uses the Nu-
ance speech recognizer. Nuance accepts lan-
guage models written in a Grammar Speci-
fication Language, (GSL) format that allows
context-free, as well as the more commonly used
finite-state, models.3 Using a technique de-
scribed in (Moore, 1999), we compile a context-
free covering grammar into GSL format from
the main Gemini grammar.
This approach of using a single grammar
source for both sides of the dialogue has sev-
eral advantages. First, although there are differ-
ences between the language used by the system
and that used by the speaker, there is a large de-
gree of overlap, and encoding the grammar once
is efficient. Second, anecdotal evidence suggests
that the language used by the system influences
the kind of language that speakers use in re-
sponse. This gives rise to a consistency problem
if the language models used for interpretation
and generation are developed independently.
The grammar used in CommandTalk contains
features that allow it to be partitioned into
a set of independent top-level grammars. For
instance, CommandTalk contains related, but
distinct, grammars for each of the four armed
services (Army, Navy, Air Force, and Marine
Corps). The top-level grammar currently in use
by the speech recognizer can be changed dy-
namically. This feature is used in the dialogue
manager to change the top-level grammar, de-
pending on the state of the dialogue. Currently
in CommandTalk, for each service there are two
main grammars, one in which the user is free to
give any top-level command, and another that
contains everything in the first grammar, plus
isolated noun phrases of the semantic types that
can be used as answers to wh-questions, as well
as answers to yes/no questions.
</bodyText>
<subsectionHeader confidence="0.998909">
3.1 Prosody
</subsectionHeader>
<bodyText confidence="0.999892222222222">
A separate Prosody agent annotates the sys-
tem&apos;s utterances to provide cues to the speech
synthesizer about how they should be produced.
It takes as input an utterance to be spoken,
along with its parse tree and logical form. The
output is an expression in the Spoken Text
Markup Language4 (STML) that annotates the
locations and lengths of pauses and the loca-
tions of pitch changes.
</bodyText>
<footnote confidence="0.98378125">
3GSL grammars that are context-free cannot contain
indirect left-recursion.
4See http://www.cstr.ed.ac.uk/projects/ssml.
html for details.
</footnote>
<page confidence="0.995649">
185
</page>
<subsectionHeader confidence="0.999763">
3.2 Speech Synthesis
</subsectionHeader>
<bodyText confidence="0.9999765">
Speech synthesis is performed by another agent
that encapsulates the Festival speech synthe-
sizer. Festival5 was developed by the Centre
for Speech Technology Research (CSTR) at the
University of Edinburgh. Festival was selected
because it accepts STML commands, is avail-
able for research, educational, and individual
use without charge, and is open-source.
</bodyText>
<sectionHeader confidence="0.995079" genericHeader="method">
4 Dialogue Manager
</sectionHeader>
<bodyText confidence="0.999796818181818">
The role of the dialogue manager in Com-
mandTalk is to manage the representation of
linguistic context, interpret user utterances
within that context, plan system responses,
and set the speech recognition system&apos;s lan-
guage model. The system supports natural,
structured mixed-initiative dialogue and multi-
modal interactions.
When interpreting a new utterance from the
user, the dialogue manager considers these pos-
sibilities in order:
</bodyText>
<listItem confidence="0.993185714285714">
1. Corrections: The utterance is a correction
of a prior utterance.
2. Transitions/Responses: The utterance is a
continuation of the current discourse seg-
ment.
3. New Commands/Questions: The utterance
is initiating a new discourse segment.
</listItem>
<bodyText confidence="0.9995886">
The following sections will describe the data
structures maintained by the dialogue manager,
and show how they are affected as the dialogue
manager processes each of these three types of
user utterances.
</bodyText>
<subsectionHeader confidence="0.992989">
4.1 Dialogue Stack
</subsectionHeader>
<bodyText confidence="0.999537142857143">
CommandTalk uses a dialogue stack to keep
track of the current discourse context. The
dialogue stack attempts to keep track of the
open discourse segments at each point in the
dialogue. Each stack frame corresponds to one
user-system discourse pair, and contains at least
the following elements:
</bodyText>
<listItem confidence="0.9230515">
• an atomic dialogue state identifier (see Sec-
tion 4.2)
</listItem>
<footnote confidence="0.98607">
5See http://wvw.cstr.ed.ac.uk/projects/
</footnote>
<bodyText confidence="0.687059">
festival.htral for full information on Festival.
</bodyText>
<listItem confidence="0.999812214285714">
• a semantic representation of the user&apos;s ut-
terance(s)
• a semantic representation of the system&apos;s
response, if any
• a representation of the background (i.e.,
open proposition) for the anticipated user
response.
• focus spaces containing semantic represen-
tations of the items referred to in each sys-
tem and user utterance
• a gesture space containing the gestures
used in the interpretation of each user ut-
terance
• an optional guard
</listItem>
<bodyText confidence="0.99973675">
The semantic representation of the system re-
sponse is related to the background, but there
are cases where the background may contain
more information than the response. For ex-
ample, in utterance 28 the system could have
simply said &amp;quot;There is no Objective Bravo&amp;quot;, and
omitted the explicit follow-up question. In this
case, the background may still contain the open
proposition.
Unlike in dialogue analyses carried out on
completed dialogues (Grosz and Sidner, 1986),
the dialogue manager needs to maintain a stack
of all open discourse segments at each point in
an on-going dialogue. When a system allows
corrections, it can be difficult to determine when
a user has completed a discourse segment.
</bodyText>
<subsectionHeader confidence="0.334812">
Ex. 7: Consecutive Corrections
</subsectionHeader>
<bodyText confidence="0.81837125">
U 34 Center on Objective Charlie
S 35 0 There is no point named Objec-
tive Charlie. What point should I
center on?
</bodyText>
<equation confidence="0.971955">
U 36 95 65
S 37 0 I will center on FQ 950 650
U 38 I said 55 65
S 39 0 I will center on FQ 550 650
</equation>
<bodyText confidence="0.999557">
In example 7, for instance, when the user an-
swers the question in utterance 36, the system
will pop the frame corresponding to utterances
34-35 off the stack. However, the information in
that frame is necessary to properly interpret the
correction in utterance 38. Without some other
mechanism it would be unsafe to ever pop a
</bodyText>
<page confidence="0.995055">
186
</page>
<bodyText confidence="0.999954130434783">
frame from the stack, and the stack would grow
indefinitely. Since the dialogue stack represents
our best guess as to the set of currently open dis-
course segments, we want to allow the system to
pop frames from the stack when it believes dis-
course segments have been closed. We make use
of another representation, the dialogue trail, to
let us to recover from these moves if they prove
to be incorrect.
The dialogue trail acts as a history of all di-
alogue stack operations performed. Using the
trail, we record enough information to be able
to restore the dialogue stack to any previous
configuration (each trail entry records one op-
eration taken, the top of the dialog stack before
the operation, and the top of the dialog stack
after). Unlike the stack, the dialogue trail rep-
resents the entire history of the dialogue, not
just the set of currently open propositions. The
fact that the dialogue trail can grow arbitrarily
long has not proven to be a problem in practice
since the system typically does not look past the
top item in the trail.
</bodyText>
<subsectionHeader confidence="0.998096">
4.2 Finite State Machines
</subsectionHeader>
<bodyText confidence="0.994215027027027">
Each stack frame in the dialogue manager con-
tains a unique dialogue state identifier. These
states form a collection of finite-state machines
(FSMs), where each FSM describes the turns
comprising a particular discourse segment. The
dialogue stack is reminiscent of a recursive tran-
sition network, in that the stack records the sys-
tem&apos;s progress through a series of FSMs in par-
allel. However, in this case, the stack operations
are not dictated explicitly by the labels on the
FSMs, but stack push operations correspond to
the onset of a discourse segment, and stack pop
operations correspond to the conclusion of a dis-
course segment.
Most of the FSMs currently used in Com-
mandTalk coordinate dialogue initiative. These
FSMs have a very simple structure of at most
two states. For instance, there are FSMs rep-
resenting discourse segments for clarification
questions (utterances 23-24), reference failures
(utterances 27-28), corrections (utterances 9-
10), and guards becoming true (utterances 31-
33). CommandTalk currently uses 22 such small
FSMs. Although they each have a very simple
structure, they compose naturally to support
more complex dialogues. In these sub-dialogues
the user retains the task initiative, but the sys-
tem may temporarily take the dialogue initia-
tive. This set of FSMs comprises the core dia-
logue competence of the system.
In a similar way, more complex FSMs can
be designed to support more structured dia-
logues, in which the system may take more of
the task initiative. The additional structure im-
posed varies from short 2-3 turn interactions to
longer &amp;quot;form-filling&amp;quot; dialogues. We currently
have three such FSMs in CommandTalk:
</bodyText>
<listItem confidence="0.903452529411765">
• The Embark/Debark command has four re-
quired parameters; a user may have diffi-
culty expressing them all in a single utter-
ance. CommandTalk will query the user for
missing parameters to fill in the structure
of the command.
• The Infantry Attack command has a num-
ber of required parameters, a potentially
unbounded number of optional parameters,
and some constraints between optional ar-
guments (e.g., two parameters are each op-
tional, but if one is specified then the other
must be also).
• The Nine Line Brief is a straight-forward
form-filling command with nine parameters
that should be provided in a specified or-
der.
</listItem>
<bodyText confidence="0.999874318181818">
When the system interprets a new user ut-
terance that is not a correction, the next alter-
native is that it is a continuation of the current
discourse segment. Simple examples of this kind
of transition occur when the user is answering a
question posed by the system, or when the user
has provided the next entry in a form-filling di-
alogue. Once the transition is recognized, the
current frame on top of the stack is popped. If
the next state is not a final state, then a new
frame is pushed corresponding to the next state.
If it is a final state, then a new frame is not
created, indicating the end of the discourse seg-
ment.
The last alternative for a new user utterance
is that it is the onset of a new discourse segment.
During the course of interpretation of the ut-
terance, the conditions for entering one or more
new FSMs may be satisfied by the utterance.
These conditions may be linguistic, such as pre-
supposition failures, or can arise from events
that occur in the simulation, as when a guard
</bodyText>
<page confidence="0.996063">
187
</page>
<bodyText confidence="0.999987375">
is tested in example 6. Each potential FSM
has a corresponding priority (error, warning, or
good). An FSM of the highest priority will be
chosen to dictate the system&apos;s response.
One last decision that must be made is
whether the new discourse segment is a subseg-
ment of the current segment, or if it should be
a sibling of that segment. The heuristic that.
weuse is to consider the new segment a subseg-
ment if the discourse frame on top of the stack
contains an open proposition (as in utterance
23). In this case, we push the new frame on the
stack. Otherwise, we consider the previous seg-
ment to now be closed (as in utterance 3), and
we pop the frame corresponding to it prior to
pushing on the new frame.
</bodyText>
<subsectionHeader confidence="0.99077">
4.3 Mechanisms for Reference
</subsectionHeader>
<bodyText confidence="0.999936949152543">
CommandTalk employs two mechanisms for
maintaining local context and performing refer-
ence: a list of salient objects in the simulation,
and focus spaces of linguistic items used in the
dialogue.
Since CommandTalk is controlling a dis-
tributed simulation, events can occur asyn-
chronously with the operator&apos;s linguistic acts,
and objects may become available for reference
independently of the on-going dialogue. For in-
stance, if an enemy unit suddenly appears on
the operator&apos;s display, that unit is available for
immediate reference, even if no prior linguistic
reference to it has been made. The ModSAF
agent notifies the dialogue manager whenever
an object is created, modified, or destroyed, and
these objects are stored in a salience list in or-
der of recency. The salience list can also be up-
dated when simulation objects are referred to
using language.
The salience list is not part of the dialogue
stack. It does not reflect attentional state;
rather, it captures recency and &amp;quot;known&amp;quot; infor-
mation.
While the salience list contains only entities
that directly correspond to objects in the sim-
ulation, focus spaces contain representations of
entities realized in linguistic acts, including ob-
jects not directly represented in the simulation.
This includes objects that do not exist (yet),
as in &amp;quot;Objective Bravo&amp;quot; in utterance 28, which
is referred to with a pronoun in utterance 29,
and sets of objects introduced by plural noun
phrases. All items referred to in an utterance
are stored in a focus space associated with that
utterance in the stack frame. There is one focus
space per utterance.
Focus spaces can be used during the genera-
tion of pronouns and definite noun phrases. Al-
though at present CommandTalk does not gen-
erate pronouns (we choose to err on the side of
verbosity, to avoid potential confusion due to
misrecognitions), focus spaces could be used to
make intelligent decisions about when to use a
pronoun or a definite reference. In particular,
while it might be dangerous to generate a pro-
noun referring to a noun phrase that the user
has used, it would be appropriate to use a pro-
noun to refer to a noun phrase that the system
has used.
Focus spaces are also used during the inter-
pretation of responses and corrections. In these
cases the salience list reflects what is known
now, not what was known at the time the ut-
terance being corrected or clarified was made.
The focus spaces reflect what was known and
in focus at that earlier time; they track atten-
tional state. For instance, imagine example 6
had instead been:
</bodyText>
<subsectionHeader confidence="0.439269">
Ex. 6b: Focusing
</subsectionHeader>
<bodyText confidence="0.949148611111111">
U 40 A14 advance there.
S 41 0 There is no A14. Which unit
should advance to Checkpoint 1?
U 42 Create CEV at 635 545 and name
it A14.
At the end of utterance 42 the system will
reinterpret utterance 40, but the most recent
location in the salience list is FQ 635 545 rather
than Checkpoint 1. The system uses the focus
space to determine the referent for &amp;quot;there&amp;quot; at
the time utterance 40 was originally made.
In conclusion, CommandTalk&apos;s dialogue man-
ager uses a dialogue stack and trail, refer-
ence mechanisms, and finite state machines to
handle a wide range of different kinds of di-
alogue, including form-filling dialogues, free-
flowing mixed-initiative dialogues, and dia-
logues involving multi-modality.
</bodyText>
<sectionHeader confidence="0.999942" genericHeader="method">
5 Related Work
</sectionHeader>
<bodyText confidence="0.995371333333333">
CommandTalk differs from other recent spoken
language systems in that it is a command and
control application. It provides a particularly
</bodyText>
<page confidence="0.995647">
188
</page>
<bodyText confidence="0.9999608">
interesting environment in which to design spo-
ken dialogue systems in that it supports dis-
tributed stochastic simulations, in which one
operator controls a certain collection of forces
while other operators simultaneously control
other allied and/or opposing forces, and unex-
pected events can occur that require responses
in real time. Other applications (Litman et al.,
1998; Walker et al., 1998) have been in domains
that were sufficiently limited (e.g., queries about
train schedules, or reading email) that the sys-
tem could presume much about the user&apos;s goals,
and make significant contributions to task ini-
tiative. However, the high number of possible
commands available in CommandTalk, and the
more abstract nature of the user&apos;s high-level
goals (to carry out a simulation of a complex
military engagement) preclude the system from
taking significant task initiative in most cases.
The system most closely related to Com-
mandTalk in terms of dialogue use is TRIPS
(Ferguson and Allen, 1998), although there are
several important differences. In contrast to
TRIPS, in CommandTalk gestures are fully in-
corporated into the dialogue state. Also, Com-
mandTalk provides the same language capabil-
ities for user and system utterances.
Unlike other simulation systems, such as
QuickSet (Cohen et al., 1997), CommandTalk
has extensive dialogue capabilities. In Quick-
Set, the user is required to confirm each spoken
utterance before it is processed by the system
(McGee et al., 1998).
Our earlier work on spoken dialogue in the air
travel planning domain (Bratt et al., 1995) (and
related systems) interpreted speaker utterances
in context, but did not support structured dia-
logues. The technique of using dialogue context
to control the speech recognition state is similar
to one used in (Andry, 1992).
</bodyText>
<sectionHeader confidence="0.999604" genericHeader="method">
6 Future Work
</sectionHeader>
<bodyText confidence="0.99998358974359">
We have discussed some aspects of Com-
mandTalk that make it especially suited to han-
dle different kinds of interactions. We have
looked at the use of a dialogue stack, salience
information, and focus spaces to assist inter-
pretation and generation. We have seen that
structured dialogues can be represented by com-
posing finite-state models. We have briefly dis-
cussed the advantages of using the same gram-
mar for all linguistic aspects of the system. It is
our belief that most of the items discussed could
easily be transferred to a different domain.
The most significant difficulty with this work
is that it has been impossible to perform a for-
mal evaluation of the system. This is due to
the difficulty of collecting data in this domain,
which requires speakers who are both knowl-
edgeable about the domain and familiar with
ModSAF. CommandTalk has been used in sim-
ulations of real military exercises, but those ex-
ercises have always taken place in classified en-
vironments where data collection is not permit-
ted.
To facilitate such an evaluation, we are cur-
rently porting the CommandTalk dialogue man-
ager to the domain of air travel planning. There
is a large body of existing data in that domain
(MADCOW, 1992), and speakers familiar with
the domain are easily available.
The internal representation of actions in
CommandTalk is derived from ModSAF. We
would like to port that to a domain-independent
representation such as frames or explicit repre-
sentations of plans.
Finally, there are interesting options regard-
ing the finite state model. We are investigating
other representations for the semantic contents
of a discourse segment, such as frames or active
templates.
</bodyText>
<sectionHeader confidence="0.997724" genericHeader="conclusions">
7 Acknowledgments
</sectionHeader>
<bodyText confidence="0.9999866">
We would like to thank Andrew Kehler, David
Israel, Jerry Hobbs, and Sharon Goldwater for
comments on an earlier version of this paper,
and we have benefited from the very helpful
comments from several anonymous reviewers.
</bodyText>
<sectionHeader confidence="0.998021" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.998055416666667">
F. Andry. 1992. Static and Dynamic Predic-
tions: A Method to Improve Speech Under-
standing in Cooperative Dialogues. In Pro-
ceedings of the International Conference on
Spoken Language Processing, Banff, Canada.
H. Bratt, J.Dowding, and K. Hunicke-Smith.
1995. The SRI Telephone ATIS System.
In Proceedings of the Spoken Language Sys-
tems Technology Workshop, pages 218-220,
Austin, Texas.
A. Ceranowicz. 1994. Modular Semi-
Automated Forces. In J.D. Tew et al.,
</reference>
<page confidence="0.988031">
189
</page>
<reference confidence="0.998992578313253">
editor, Proceedings of the Winter Simulation
Conference, pages 755-761.
J. Chu-Carroll and M. Brown. 1997. Tracking
Initiative in Collaborative Dialogue Interac-
tions. In Proceedings of the Thirty-Fifth An-
nual Meeting of the ACL and 8th Conference
of the European Chapter of the ACL, Madrid,
Spain.
P. Cohen, M. Johnston, D. McGee, S. Oviatt,
J. Pittman, I. Smith, L. Chen, and J. Clow.
1997. QuickSet: Multimodal Interaction for
Distributed Applications. In Proceedings of
the Fifth Annual International Multimodal
Conference, Seattle, WA.
J. Dowding, J. Gawron, D. Appelt, L. Cherny,
R. Moore, and D. Moran. 1993. Gemini: A
Natural Language System for Spoken Lan-
guage Understanding. In Proceedings of the
Thirty-First Annual Meeting of the ACL,
Columbus, OH. Association for Computa-
tional Linguistics.
J. Dowding, R. Moore, F. Andry, and D. Moran.
1994. Interleaving Syntax and Semantics in
an Efficient Bottom-Up Parser. In Proceed-
ings of the Thirty-Second Annual Meeting of
the ACL, Las Cruces, New Mexico. Associa-
tion for Computational Linguistics.
G. Ferguson and J. Allen. 1998. TRIPS: An
Intelligent Integrated Problem-Solving Assis-
tant. In Proceedings of the Fifteenth National
Conference on Artificial Intelligence (AAAI-
98), Madison, WI.
B. Grosz and C. Sidner. 1986. Attention, Inten-
tions, and the Structure of Discourse. Com-
putational Linguistics, 12(3):175-204.
D. Litman, S. Pan, and M. Walker. 1998. Eval-
uating Response Strategies in a Web-Based
Spoken Dialogue Agent. In Proceedings of
the 38th Annual Meeting of the Association
for Computational Linguistics, pages 780-
786, Montreal, Canada.
MADCOW. 1992. Multi-Site Data Collection
for a Spoken Language Corpus. In Proceed-
ings of the DARPA Speech and Natural Lan-
guage Workshop, pages 200-203, Harriman,
New York.
D. Martin, A. Cheyer, and D. Moran. 1998.
Building Distributed Software Systems with
the Open Agent Architecture. In Proceed-
ings of the Third International Conference on
the Practical Application of Intelligent Agents
and Multi-Agent Technology, Blackpool, Lan-
cashire, UK. The Practical Application Com-
pany Ltd.
D. McGee, P. Cohen, and S. Oviatt. 1998. Con-
firmation in Multimodal Systems. In Proceed-
ings of the 38th Annual Meeting of the Asso-
ciation for Computational Linguistics, pages
823-829, Montreal, Canada.
R. Moore, J. Dowding, H. Bratt, J. Gawron,
Y. Gorfu, and A. Cheyer. 1997. Com-
mandTalk: A Spoken-Language Interface for
Battlefield Simulations. In Proceedings of the
Fifth Conference on Applied Natural Lan-
guage Processing, pages 1-7, Washington,
DC. Association for Computational Linguis-
tics.
R. Moore. 1999. Using Natural Language
Knowledge Sources in Speech Recognition. In
Keith Ponting, editor, Speech Pattern Pro-
cessing. Springer-Verlag.
S. M. Shieber, G. van Noord, R. Moore,
and F. Pereira. 1990. A Semantic Head-
Driven Generation Algorithm for Unification-
Based Formalisms. Computational Linguis-
tics, 16(1), March.
M. Walker, J. Fromer, and S. Narayanan.
1998. Learning Optimal Dialogue Strategies:
A Case Study of a Spoken Dialogue Agent
for Email. In Proceedings of the 38th An-
nual Meeting of the Association for Compu-
tational Linguistics, pages 1345-1351, Mon-
treal, Canada.
</reference>
<page confidence="0.997835">
190
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.734546">
<title confidence="0.999136">The CommandTalk Spoken Dialogue System*</title>
<author confidence="0.9871295">Amanda Stent</author>
<author confidence="0.9871295">John Dowding Jean Mark Gawron</author>
<author confidence="0.9871295">Elizabeth Owen Bratt</author>
<author confidence="0.9871295">Robert Moore</author>
<affiliation confidence="0.999979">SRI International</affiliation>
<address confidence="0.998467">333 Ravenswood Avenue Menlo Park, CA 94025</address>
<intro confidence="0.756895">{stent,dowding,gawron,owen,bmoore}@ai.sri.corn</intro>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>F Andry</author>
</authors>
<title>Static and Dynamic Predictions: A Method to Improve Speech Understanding in Cooperative Dialogues.</title>
<date>1992</date>
<booktitle>In Proceedings of the International Conference on Spoken Language Processing,</booktitle>
<location>Banff, Canada.</location>
<contexts>
<context position="24691" citStr="Andry, 1992" startWordPosition="4106" endWordPosition="4107">ge capabilities for user and system utterances. Unlike other simulation systems, such as QuickSet (Cohen et al., 1997), CommandTalk has extensive dialogue capabilities. In QuickSet, the user is required to confirm each spoken utterance before it is processed by the system (McGee et al., 1998). Our earlier work on spoken dialogue in the air travel planning domain (Bratt et al., 1995) (and related systems) interpreted speaker utterances in context, but did not support structured dialogues. The technique of using dialogue context to control the speech recognition state is similar to one used in (Andry, 1992). 6 Future Work We have discussed some aspects of CommandTalk that make it especially suited to handle different kinds of interactions. We have looked at the use of a dialogue stack, salience information, and focus spaces to assist interpretation and generation. We have seen that structured dialogues can be represented by composing finite-state models. We have briefly discussed the advantages of using the same grammar for all linguistic aspects of the system. It is our belief that most of the items discussed could easily be transferred to a different domain. The most significant difficulty wit</context>
</contexts>
<marker>Andry, 1992</marker>
<rawString>F. Andry. 1992. Static and Dynamic Predictions: A Method to Improve Speech Understanding in Cooperative Dialogues. In Proceedings of the International Conference on Spoken Language Processing, Banff, Canada.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Bratt</author>
<author>J Dowding</author>
<author>K Hunicke-Smith</author>
</authors>
<title>The SRI Telephone ATIS System.</title>
<date>1995</date>
<booktitle>In Proceedings of the Spoken Language Systems Technology Workshop,</booktitle>
<pages>218--220</pages>
<location>Austin, Texas.</location>
<contexts>
<context position="24464" citStr="Bratt et al., 1995" startWordPosition="4069" endWordPosition="4072">alogue use is TRIPS (Ferguson and Allen, 1998), although there are several important differences. In contrast to TRIPS, in CommandTalk gestures are fully incorporated into the dialogue state. Also, CommandTalk provides the same language capabilities for user and system utterances. Unlike other simulation systems, such as QuickSet (Cohen et al., 1997), CommandTalk has extensive dialogue capabilities. In QuickSet, the user is required to confirm each spoken utterance before it is processed by the system (McGee et al., 1998). Our earlier work on spoken dialogue in the air travel planning domain (Bratt et al., 1995) (and related systems) interpreted speaker utterances in context, but did not support structured dialogues. The technique of using dialogue context to control the speech recognition state is similar to one used in (Andry, 1992). 6 Future Work We have discussed some aspects of CommandTalk that make it especially suited to handle different kinds of interactions. We have looked at the use of a dialogue stack, salience information, and focus spaces to assist interpretation and generation. We have seen that structured dialogues can be represented by composing finite-state models. We have briefly di</context>
</contexts>
<marker>Bratt, Dowding, Hunicke-Smith, 1995</marker>
<rawString>H. Bratt, J.Dowding, and K. Hunicke-Smith. 1995. The SRI Telephone ATIS System. In Proceedings of the Spoken Language Systems Technology Workshop, pages 218-220, Austin, Texas.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Ceranowicz</author>
</authors>
<title>Modular SemiAutomated Forces.</title>
<date>1994</date>
<booktitle>Proceedings of the Winter Simulation Conference,</booktitle>
<pages>755--761</pages>
<editor>In J.D. Tew et al., editor,</editor>
<marker>Ceranowicz, 1994</marker>
<rawString>A. Ceranowicz. 1994. Modular SemiAutomated Forces. In J.D. Tew et al., editor, Proceedings of the Winter Simulation Conference, pages 755-761.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Chu-Carroll</author>
<author>M Brown</author>
</authors>
<title>Tracking Initiative in Collaborative Dialogue Interactions.</title>
<date>1997</date>
<booktitle>In Proceedings of the Thirty-Fifth Annual Meeting of the ACL and 8th Conference of the European Chapter of the ACL,</booktitle>
<location>Madrid,</location>
<contexts>
<context position="1273" citStr="Chu-Carroll and Brown, 1997" startWordPosition="175" endWordPosition="178">e (OAA) (Martin et al., 1998). This architecture allows components to be developed independently, and then flexibly and dynamically combined to support distributed computation. Most of the agents that compose CommandTalk have been described elsewhere (for more detail, see (Moore et al., 1997)). This paper describes extensions to CommandTalk to support spoken dialogue. While we make no theoretical claims about the nature and structure of dialogue, we are influenced by the theoretical work of (Grosz and Sidner, 1986) and will use terminology from that tradition when appropriate. We also follow (Chu-Carroll and Brown, 1997) in distinguishing task initiative and dialogue initiative. Section 2 demonstrates the dialogue capabilities of CommandTalk by way of an extended example. Section 3 describes how language in CommandTalk is modeled for understanding and generation. Section 4 describes the architecture of the dialogue manager in detail. Section 5 compares CommandTalk with other spo* This research was supported by the Defense Advanced Research Projects Agency under Contract N66001-94-C6046 with the Space and Naval Warfare Systems Center. The views and conclusions contained in this document are those of the author</context>
</contexts>
<marker>Chu-Carroll, Brown, 1997</marker>
<rawString>J. Chu-Carroll and M. Brown. 1997. Tracking Initiative in Collaborative Dialogue Interactions. In Proceedings of the Thirty-Fifth Annual Meeting of the ACL and 8th Conference of the European Chapter of the ACL, Madrid, Spain.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Cohen</author>
<author>M Johnston</author>
<author>D McGee</author>
<author>S Oviatt</author>
<author>J Pittman</author>
<author>I Smith</author>
<author>L Chen</author>
<author>J Clow</author>
</authors>
<title>QuickSet: Multimodal Interaction for Distributed Applications.</title>
<date>1997</date>
<booktitle>In Proceedings of the Fifth Annual International Multimodal Conference,</booktitle>
<location>Seattle, WA.</location>
<contexts>
<context position="24197" citStr="Cohen et al., 1997" startWordPosition="4025" endWordPosition="4028">mandTalk, and the more abstract nature of the user&apos;s high-level goals (to carry out a simulation of a complex military engagement) preclude the system from taking significant task initiative in most cases. The system most closely related to CommandTalk in terms of dialogue use is TRIPS (Ferguson and Allen, 1998), although there are several important differences. In contrast to TRIPS, in CommandTalk gestures are fully incorporated into the dialogue state. Also, CommandTalk provides the same language capabilities for user and system utterances. Unlike other simulation systems, such as QuickSet (Cohen et al., 1997), CommandTalk has extensive dialogue capabilities. In QuickSet, the user is required to confirm each spoken utterance before it is processed by the system (McGee et al., 1998). Our earlier work on spoken dialogue in the air travel planning domain (Bratt et al., 1995) (and related systems) interpreted speaker utterances in context, but did not support structured dialogues. The technique of using dialogue context to control the speech recognition state is similar to one used in (Andry, 1992). 6 Future Work We have discussed some aspects of CommandTalk that make it especially suited to handle dif</context>
</contexts>
<marker>Cohen, Johnston, McGee, Oviatt, Pittman, Smith, Chen, Clow, 1997</marker>
<rawString>P. Cohen, M. Johnston, D. McGee, S. Oviatt, J. Pittman, I. Smith, L. Chen, and J. Clow. 1997. QuickSet: Multimodal Interaction for Distributed Applications. In Proceedings of the Fifth Annual International Multimodal Conference, Seattle, WA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Dowding</author>
<author>J Gawron</author>
<author>D Appelt</author>
<author>L Cherny</author>
<author>R Moore</author>
<author>D Moran</author>
</authors>
<title>Gemini: A Natural Language System for Spoken Language Understanding.</title>
<date>1993</date>
<booktitle>In Proceedings of the Thirty-First Annual Meeting of the ACL,</booktitle>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Columbus, OH.</location>
<contexts>
<context position="8325" citStr="Dowding et al., 1993" startWordPosition="1396" endWordPosition="1399">ive Bravo. The system then tests the guard, which succeeds because Objective Bravo now exists. The system therefore takes dialogue initiative by asking the operator in utterance 31 if that operator would like to carry out the original command. Although, in this case, the simulated world changed in direct response to a linguistic act, in general the world can change for a variety of reasons, including the operator&apos;s activities on the GUI or the activities of other operators. 3 Language Interpretation and Generation The language used in CommandTalk is derived from a single grammar using Gemini (Dowding et al., 1993), a unification-based grammar formalism. This grammar is used to provide all the language modeling capabilities of the system, including the language model used in the speech recognizer, the syntactic and semantic interpretation of user utterances (Dowding et al., 1994), and the generation of system responses (Shieber et al., 1990). For speech recognition, Gemini uses the Nuance speech recognizer. Nuance accepts language models written in a Grammar Specification Language, (GSL) format that allows context-free, as well as the more commonly used finite-state, models.3 Using a technique described</context>
</contexts>
<marker>Dowding, Gawron, Appelt, Cherny, Moore, Moran, 1993</marker>
<rawString>J. Dowding, J. Gawron, D. Appelt, L. Cherny, R. Moore, and D. Moran. 1993. Gemini: A Natural Language System for Spoken Language Understanding. In Proceedings of the Thirty-First Annual Meeting of the ACL, Columbus, OH. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Dowding</author>
<author>R Moore</author>
<author>F Andry</author>
<author>D Moran</author>
</authors>
<title>Interleaving Syntax and Semantics in an Efficient Bottom-Up Parser.</title>
<date>1994</date>
<booktitle>In Proceedings of the Thirty-Second Annual Meeting of the ACL, Las</booktitle>
<institution>Mexico. Association for Computational Linguistics.</institution>
<location>Cruces, New</location>
<contexts>
<context position="8595" citStr="Dowding et al., 1994" startWordPosition="1437" endWordPosition="1440">e simulated world changed in direct response to a linguistic act, in general the world can change for a variety of reasons, including the operator&apos;s activities on the GUI or the activities of other operators. 3 Language Interpretation and Generation The language used in CommandTalk is derived from a single grammar using Gemini (Dowding et al., 1993), a unification-based grammar formalism. This grammar is used to provide all the language modeling capabilities of the system, including the language model used in the speech recognizer, the syntactic and semantic interpretation of user utterances (Dowding et al., 1994), and the generation of system responses (Shieber et al., 1990). For speech recognition, Gemini uses the Nuance speech recognizer. Nuance accepts language models written in a Grammar Specification Language, (GSL) format that allows context-free, as well as the more commonly used finite-state, models.3 Using a technique described in (Moore, 1999), we compile a contextfree covering grammar into GSL format from the main Gemini grammar. This approach of using a single grammar source for both sides of the dialogue has several advantages. First, although there are differences between the language us</context>
</contexts>
<marker>Dowding, Moore, Andry, Moran, 1994</marker>
<rawString>J. Dowding, R. Moore, F. Andry, and D. Moran. 1994. Interleaving Syntax and Semantics in an Efficient Bottom-Up Parser. In Proceedings of the Thirty-Second Annual Meeting of the ACL, Las Cruces, New Mexico. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Ferguson</author>
<author>J Allen</author>
</authors>
<title>TRIPS: An Intelligent Integrated Problem-Solving Assistant.</title>
<date>1998</date>
<booktitle>In Proceedings of the Fifteenth National Conference on Artificial Intelligence (AAAI98),</booktitle>
<location>Madison, WI.</location>
<contexts>
<context position="23891" citStr="Ferguson and Allen, 1998" startWordPosition="3979" endWordPosition="3982"> 1998; Walker et al., 1998) have been in domains that were sufficiently limited (e.g., queries about train schedules, or reading email) that the system could presume much about the user&apos;s goals, and make significant contributions to task initiative. However, the high number of possible commands available in CommandTalk, and the more abstract nature of the user&apos;s high-level goals (to carry out a simulation of a complex military engagement) preclude the system from taking significant task initiative in most cases. The system most closely related to CommandTalk in terms of dialogue use is TRIPS (Ferguson and Allen, 1998), although there are several important differences. In contrast to TRIPS, in CommandTalk gestures are fully incorporated into the dialogue state. Also, CommandTalk provides the same language capabilities for user and system utterances. Unlike other simulation systems, such as QuickSet (Cohen et al., 1997), CommandTalk has extensive dialogue capabilities. In QuickSet, the user is required to confirm each spoken utterance before it is processed by the system (McGee et al., 1998). Our earlier work on spoken dialogue in the air travel planning domain (Bratt et al., 1995) (and related systems) inte</context>
</contexts>
<marker>Ferguson, Allen, 1998</marker>
<rawString>G. Ferguson and J. Allen. 1998. TRIPS: An Intelligent Integrated Problem-Solving Assistant. In Proceedings of the Fifteenth National Conference on Artificial Intelligence (AAAI98), Madison, WI.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Grosz</author>
<author>C Sidner</author>
</authors>
<date>1986</date>
<booktitle>Attention, Intentions, and the Structure of Discourse. Computational Linguistics,</booktitle>
<pages>12--3</pages>
<contexts>
<context position="1165" citStr="Grosz and Sidner, 1986" startWordPosition="159" endWordPosition="162">ommandTalk consists of independent, cooperating agents interacting through SRI&apos;s Open Agent Architecture (OAA) (Martin et al., 1998). This architecture allows components to be developed independently, and then flexibly and dynamically combined to support distributed computation. Most of the agents that compose CommandTalk have been described elsewhere (for more detail, see (Moore et al., 1997)). This paper describes extensions to CommandTalk to support spoken dialogue. While we make no theoretical claims about the nature and structure of dialogue, we are influenced by the theoretical work of (Grosz and Sidner, 1986) and will use terminology from that tradition when appropriate. We also follow (Chu-Carroll and Brown, 1997) in distinguishing task initiative and dialogue initiative. Section 2 demonstrates the dialogue capabilities of CommandTalk by way of an extended example. Section 3 describes how language in CommandTalk is modeled for understanding and generation. Section 4 describes the architecture of the dialogue manager in detail. Section 5 compares CommandTalk with other spo* This research was supported by the Defense Advanced Research Projects Agency under Contract N66001-94-C6046 with the Space an</context>
<context position="13573" citStr="Grosz and Sidner, 1986" startWordPosition="2217" endWordPosition="2220">referred to in each system and user utterance • a gesture space containing the gestures used in the interpretation of each user utterance • an optional guard The semantic representation of the system response is related to the background, but there are cases where the background may contain more information than the response. For example, in utterance 28 the system could have simply said &amp;quot;There is no Objective Bravo&amp;quot;, and omitted the explicit follow-up question. In this case, the background may still contain the open proposition. Unlike in dialogue analyses carried out on completed dialogues (Grosz and Sidner, 1986), the dialogue manager needs to maintain a stack of all open discourse segments at each point in an on-going dialogue. When a system allows corrections, it can be difficult to determine when a user has completed a discourse segment. Ex. 7: Consecutive Corrections U 34 Center on Objective Charlie S 35 0 There is no point named Objective Charlie. What point should I center on? U 36 95 65 S 37 0 I will center on FQ 950 650 U 38 I said 55 65 S 39 0 I will center on FQ 550 650 In example 7, for instance, when the user answers the question in utterance 36, the system will pop the frame corresponding</context>
</contexts>
<marker>Grosz, Sidner, 1986</marker>
<rawString>B. Grosz and C. Sidner. 1986. Attention, Intentions, and the Structure of Discourse. Computational Linguistics, 12(3):175-204.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Litman</author>
<author>S Pan</author>
<author>M Walker</author>
</authors>
<title>Evaluating Response Strategies in a Web-Based Spoken Dialogue Agent.</title>
<date>1998</date>
<booktitle>In Proceedings of the 38th Annual Meeting of the Association for Computational Linguistics,</booktitle>
<pages>780--786</pages>
<location>Montreal, Canada.</location>
<contexts>
<context position="23271" citStr="Litman et al., 1998" startWordPosition="3880" endWordPosition="3883">ogues, freeflowing mixed-initiative dialogues, and dialogues involving multi-modality. 5 Related Work CommandTalk differs from other recent spoken language systems in that it is a command and control application. It provides a particularly 188 interesting environment in which to design spoken dialogue systems in that it supports distributed stochastic simulations, in which one operator controls a certain collection of forces while other operators simultaneously control other allied and/or opposing forces, and unexpected events can occur that require responses in real time. Other applications (Litman et al., 1998; Walker et al., 1998) have been in domains that were sufficiently limited (e.g., queries about train schedules, or reading email) that the system could presume much about the user&apos;s goals, and make significant contributions to task initiative. However, the high number of possible commands available in CommandTalk, and the more abstract nature of the user&apos;s high-level goals (to carry out a simulation of a complex military engagement) preclude the system from taking significant task initiative in most cases. The system most closely related to CommandTalk in terms of dialogue use is TRIPS (Fergu</context>
</contexts>
<marker>Litman, Pan, Walker, 1998</marker>
<rawString>D. Litman, S. Pan, and M. Walker. 1998. Evaluating Response Strategies in a Web-Based Spoken Dialogue Agent. In Proceedings of the 38th Annual Meeting of the Association for Computational Linguistics, pages 780-786, Montreal, Canada.</rawString>
</citation>
<citation valid="true">
<authors>
<author>MADCOW</author>
</authors>
<title>Multi-Site Data Collection for a Spoken Language Corpus.</title>
<date>1992</date>
<booktitle>In Proceedings of the DARPA Speech and Natural Language Workshop,</booktitle>
<pages>200--203</pages>
<location>Harriman, New York.</location>
<contexts>
<context position="25917" citStr="MADCOW, 1992" startWordPosition="4316" endWordPosition="4317">s that it has been impossible to perform a formal evaluation of the system. This is due to the difficulty of collecting data in this domain, which requires speakers who are both knowledgeable about the domain and familiar with ModSAF. CommandTalk has been used in simulations of real military exercises, but those exercises have always taken place in classified environments where data collection is not permitted. To facilitate such an evaluation, we are currently porting the CommandTalk dialogue manager to the domain of air travel planning. There is a large body of existing data in that domain (MADCOW, 1992), and speakers familiar with the domain are easily available. The internal representation of actions in CommandTalk is derived from ModSAF. We would like to port that to a domain-independent representation such as frames or explicit representations of plans. Finally, there are interesting options regarding the finite state model. We are investigating other representations for the semantic contents of a discourse segment, such as frames or active templates. 7 Acknowledgments We would like to thank Andrew Kehler, David Israel, Jerry Hobbs, and Sharon Goldwater for comments on an earlier version </context>
</contexts>
<marker>MADCOW, 1992</marker>
<rawString>MADCOW. 1992. Multi-Site Data Collection for a Spoken Language Corpus. In Proceedings of the DARPA Speech and Natural Language Workshop, pages 200-203, Harriman, New York.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Martin</author>
<author>A Cheyer</author>
<author>D Moran</author>
</authors>
<title>Building Distributed Software Systems with the Open Agent Architecture.</title>
<date>1998</date>
<booktitle>In Proceedings of the Third International Conference on the Practical Application of Intelligent Agents and Multi-Agent Technology,</booktitle>
<publisher>The Practical Application Company Ltd.</publisher>
<location>Blackpool, Lancashire, UK.</location>
<contexts>
<context position="674" citStr="Martin et al., 1998" startWordPosition="85" endWordPosition="88">John Dowding Jean Mark Gawron, Elizabeth Owen Bratt, and Robert Moore SRI International 333 Ravenswood Avenue Menlo Park, CA 94025 {stent,dowding,gawron,owen,bmoore}@ai.sri.corn 1 Introduction CommandTalk (Moore et al., 1997) is a spokenlanguage interface to the ModSAF battlefield simulator that allows simulation operators to generate and execute military exercises by creating forces and control measures, assigning missions to forces, and controlling the display (Ceranowicz, 1994). CommandTalk consists of independent, cooperating agents interacting through SRI&apos;s Open Agent Architecture (OAA) (Martin et al., 1998). This architecture allows components to be developed independently, and then flexibly and dynamically combined to support distributed computation. Most of the agents that compose CommandTalk have been described elsewhere (for more detail, see (Moore et al., 1997)). This paper describes extensions to CommandTalk to support spoken dialogue. While we make no theoretical claims about the nature and structure of dialogue, we are influenced by the theoretical work of (Grosz and Sidner, 1986) and will use terminology from that tradition when appropriate. We also follow (Chu-Carroll and Brown, 1997) </context>
</contexts>
<marker>Martin, Cheyer, Moran, 1998</marker>
<rawString>D. Martin, A. Cheyer, and D. Moran. 1998. Building Distributed Software Systems with the Open Agent Architecture. In Proceedings of the Third International Conference on the Practical Application of Intelligent Agents and Multi-Agent Technology, Blackpool, Lancashire, UK. The Practical Application Company Ltd.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D McGee</author>
<author>P Cohen</author>
<author>S Oviatt</author>
</authors>
<title>Confirmation in Multimodal Systems.</title>
<date>1998</date>
<booktitle>In Proceedings of the 38th Annual Meeting of the Association for Computational Linguistics,</booktitle>
<pages>823--829</pages>
<location>Montreal, Canada.</location>
<contexts>
<context position="24372" citStr="McGee et al., 1998" startWordPosition="4053" endWordPosition="4056">task initiative in most cases. The system most closely related to CommandTalk in terms of dialogue use is TRIPS (Ferguson and Allen, 1998), although there are several important differences. In contrast to TRIPS, in CommandTalk gestures are fully incorporated into the dialogue state. Also, CommandTalk provides the same language capabilities for user and system utterances. Unlike other simulation systems, such as QuickSet (Cohen et al., 1997), CommandTalk has extensive dialogue capabilities. In QuickSet, the user is required to confirm each spoken utterance before it is processed by the system (McGee et al., 1998). Our earlier work on spoken dialogue in the air travel planning domain (Bratt et al., 1995) (and related systems) interpreted speaker utterances in context, but did not support structured dialogues. The technique of using dialogue context to control the speech recognition state is similar to one used in (Andry, 1992). 6 Future Work We have discussed some aspects of CommandTalk that make it especially suited to handle different kinds of interactions. We have looked at the use of a dialogue stack, salience information, and focus spaces to assist interpretation and generation. We have seen that </context>
</contexts>
<marker>McGee, Cohen, Oviatt, 1998</marker>
<rawString>D. McGee, P. Cohen, and S. Oviatt. 1998. Confirmation in Multimodal Systems. In Proceedings of the 38th Annual Meeting of the Association for Computational Linguistics, pages 823-829, Montreal, Canada.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Moore</author>
<author>J Dowding</author>
<author>H Bratt</author>
<author>J Gawron</author>
<author>Y Gorfu</author>
<author>A Cheyer</author>
</authors>
<title>CommandTalk: A Spoken-Language Interface for Battlefield Simulations.</title>
<date>1997</date>
<booktitle>In Proceedings of the Fifth Conference on Applied Natural Language Processing,</booktitle>
<pages>1--7</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Washington, DC.</location>
<contexts>
<context position="938" citStr="Moore et al., 1997" startWordPosition="123" endWordPosition="126">dSAF battlefield simulator that allows simulation operators to generate and execute military exercises by creating forces and control measures, assigning missions to forces, and controlling the display (Ceranowicz, 1994). CommandTalk consists of independent, cooperating agents interacting through SRI&apos;s Open Agent Architecture (OAA) (Martin et al., 1998). This architecture allows components to be developed independently, and then flexibly and dynamically combined to support distributed computation. Most of the agents that compose CommandTalk have been described elsewhere (for more detail, see (Moore et al., 1997)). This paper describes extensions to CommandTalk to support spoken dialogue. While we make no theoretical claims about the nature and structure of dialogue, we are influenced by the theoretical work of (Grosz and Sidner, 1986) and will use terminology from that tradition when appropriate. We also follow (Chu-Carroll and Brown, 1997) in distinguishing task initiative and dialogue initiative. Section 2 demonstrates the dialogue capabilities of CommandTalk by way of an extended example. Section 3 describes how language in CommandTalk is modeled for understanding and generation. Section 4 describ</context>
</contexts>
<marker>Moore, Dowding, Bratt, Gawron, Gorfu, Cheyer, 1997</marker>
<rawString>R. Moore, J. Dowding, H. Bratt, J. Gawron, Y. Gorfu, and A. Cheyer. 1997. CommandTalk: A Spoken-Language Interface for Battlefield Simulations. In Proceedings of the Fifth Conference on Applied Natural Language Processing, pages 1-7, Washington, DC. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Moore</author>
</authors>
<title>Using Natural Language Knowledge Sources in Speech Recognition. In</title>
<date>1999</date>
<booktitle>Speech Pattern Processing.</booktitle>
<editor>Keith Ponting, editor,</editor>
<publisher>Springer-Verlag.</publisher>
<contexts>
<context position="8942" citStr="Moore, 1999" startWordPosition="1493" endWordPosition="1494">nification-based grammar formalism. This grammar is used to provide all the language modeling capabilities of the system, including the language model used in the speech recognizer, the syntactic and semantic interpretation of user utterances (Dowding et al., 1994), and the generation of system responses (Shieber et al., 1990). For speech recognition, Gemini uses the Nuance speech recognizer. Nuance accepts language models written in a Grammar Specification Language, (GSL) format that allows context-free, as well as the more commonly used finite-state, models.3 Using a technique described in (Moore, 1999), we compile a contextfree covering grammar into GSL format from the main Gemini grammar. This approach of using a single grammar source for both sides of the dialogue has several advantages. First, although there are differences between the language used by the system and that used by the speaker, there is a large degree of overlap, and encoding the grammar once is efficient. Second, anecdotal evidence suggests that the language used by the system influences the kind of language that speakers use in response. This gives rise to a consistency problem if the language models used for interpretat</context>
</contexts>
<marker>Moore, 1999</marker>
<rawString>R. Moore. 1999. Using Natural Language Knowledge Sources in Speech Recognition. In Keith Ponting, editor, Speech Pattern Processing. Springer-Verlag.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S M Shieber</author>
<author>G van Noord</author>
<author>R Moore</author>
<author>F Pereira</author>
</authors>
<title>A Semantic HeadDriven Generation Algorithm for UnificationBased Formalisms.</title>
<date>1990</date>
<journal>Computational Linguistics,</journal>
<volume>16</volume>
<issue>1</issue>
<marker>Shieber, van Noord, Moore, Pereira, 1990</marker>
<rawString>S. M. Shieber, G. van Noord, R. Moore, and F. Pereira. 1990. A Semantic HeadDriven Generation Algorithm for UnificationBased Formalisms. Computational Linguistics, 16(1), March.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Walker</author>
<author>J Fromer</author>
<author>S Narayanan</author>
</authors>
<title>Learning Optimal Dialogue Strategies: A Case Study of a Spoken Dialogue Agent for Email.</title>
<date>1998</date>
<booktitle>In Proceedings of the 38th Annual Meeting of the Association for Computational Linguistics,</booktitle>
<pages>1345--1351</pages>
<location>Montreal, Canada.</location>
<contexts>
<context position="23293" citStr="Walker et al., 1998" startWordPosition="3884" endWordPosition="3887">xed-initiative dialogues, and dialogues involving multi-modality. 5 Related Work CommandTalk differs from other recent spoken language systems in that it is a command and control application. It provides a particularly 188 interesting environment in which to design spoken dialogue systems in that it supports distributed stochastic simulations, in which one operator controls a certain collection of forces while other operators simultaneously control other allied and/or opposing forces, and unexpected events can occur that require responses in real time. Other applications (Litman et al., 1998; Walker et al., 1998) have been in domains that were sufficiently limited (e.g., queries about train schedules, or reading email) that the system could presume much about the user&apos;s goals, and make significant contributions to task initiative. However, the high number of possible commands available in CommandTalk, and the more abstract nature of the user&apos;s high-level goals (to carry out a simulation of a complex military engagement) preclude the system from taking significant task initiative in most cases. The system most closely related to CommandTalk in terms of dialogue use is TRIPS (Ferguson and Allen, 1998), </context>
</contexts>
<marker>Walker, Fromer, Narayanan, 1998</marker>
<rawString>M. Walker, J. Fromer, and S. Narayanan. 1998. Learning Optimal Dialogue Strategies: A Case Study of a Spoken Dialogue Agent for Email. In Proceedings of the 38th Annual Meeting of the Association for Computational Linguistics, pages 1345-1351, Montreal, Canada.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>