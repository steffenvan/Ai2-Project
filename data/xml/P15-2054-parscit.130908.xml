<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000001">
<title confidence="0.96455">
Co-Simmate: Quick Retrieving All Pairwise Co-Simrank Scores
</title>
<author confidence="0.996508">
Weiren Yu, Julie A. McCann
</author>
<affiliation confidence="0.881262">
Department of Computing,
Imperial College London, UK
</affiliation>
<email confidence="0.9933">
{weiren.yu, j.mccann}@imperial.ac.uk
</email>
<sectionHeader confidence="0.994697" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999762882352941">
Co-Simrank is a useful Simrank-like mea-
sure of similarity based on graph structure.
The existing method iteratively computes
each pair of Co-Simrank score from a dot
product of two Pagerank vectors, entailing
O(log(1/ǫ)n3) time to compute all pairs
of Co-Simranks in a graph with n nodes,
to attain a desired accuracy ǫ. In this study,
we devise a model, Co-Simmate, to speed
up the retrieval of all pairs of Co-Simranks
to O(log2(log(1/ǫ))n3) time. Moreover,
we show the optimality of Co-Simmate
among other hop-(uk) variations, and inte-
grate it with a matrix decomposition based
method on singular graphs to attain higher
efficiency. The viable experiments verify
the superiority of Co-Simmate to others.
</bodyText>
<sectionHeader confidence="0.998782" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.962314176470588">
Many NLP applications require a pairwise graph-
based similarity measure. Examples are bilingual
lexicon extraction (Laws et al., 2010), sentiment
analysis (Scheible and Sch¨utze, 2013), synonym
extraction (Minkov and Cohen, 2014), named en-
tity disambiguation (Alhelbawy and Gaizauskas,
2014), acronym expansion (Zhang et al., 2011).
Recently, Co-Simrank (Rothe and Sch¨utze, 2014)
becomes an appealing graph-theoretical similarity
measure that integrates both features of Simrank
(Jeh and Widom, 2002) and Pagerank (Berkhin,
2005). Co-Simrank works by weighing all the
number of connections between two nodes to eval-
uate how similar two nodes are. The intuition be-
hind Co-Simrank is that “more similar nodes are
likely to be pointed to by other similar nodes”.
Co-Simrank is defined in a recursive style:
</bodyText>
<equation confidence="0.856634">
S = cAT SA + I, (1)
</equation>
<bodyText confidence="0.991123666666667">
where S is the exact Co-Simrank matrix, A is the
column-normalised adjacency matrix of the graph,
c is a decay factor, and I is an identity matrix.
The best-known method by (Rothe and Sch¨utze,
2014) computes a single element of S iteratively
from a dot product (*, *) of two Pagerank vectors:
</bodyText>
<equation confidence="0.978552666666667">
Sk(a, b) = ck(pk(a), pk(b)) + Sk−1(a, b) (2)
where pk(a) is a Pagerank vector, defined as
pk(a) = AT pk−1(a) with p0(a) = I(*, a) (3)
</equation>
<bodyText confidence="0.852199733333333">
This method is highly efficient when only a small
fraction of pairs of Co-Simranks need computing
because there is no need to access the entire graph
for computing only a single pair score. However,
partial pairs retrieval is insufficient for many real-
world applications (Zhou et al., 2009; Yu et al.,
2012a; Zwick, 2002; Leicht et al., 2006) which re-
quire all-pairs scores. Let us look at two examples.
a) Co-Citation Analysis. In a co-citation network,
one wants to retrieve the relevance between any
two given documents at any moment based on
their references. To answer such an ad-hoc query,
quantifying scores of all document-pairs provides
a comprehensive way to show where low and high
relevance of pairwise documents may exist (Li et
al., 2010; Yu et al., 2014; Haveliwala, 2002).
b) Water Burst Localization. In a water network,
nodes denote deployed pressure sensor locations,
and edges are pipe sections that connect the nodes.
To determine the burst location, one needs to eval-
uate “proximities” of all pairs of sensor nodes first,
and then compare all these “proximities” with the
difference in the arrival times of the burst transient
at sensor locations, to find the sensor node nearest
to the burst event. (Srirangarajan and Pesch, 2013;
Srirangarajan et al., 2013; Stoianov et al., 2007)
Hence, the retrieval of all pairwise Co-Simranks
is very useful in many applications. Unfortunately,
when it comes to all pairs computation of S(*, *),
the way of (2) has no advantage over the naive way
</bodyText>
<note confidence="0.4451475">
327 Sk = cAT Sk−1A + I with S0 = I (4)
Proceedings of the 53rd Annual Meeting of the Association for Computational Linguistics
and the 7th International Joint Conference on Natural Language Processing (Short Papers), pages 327–333,
Beijing, China, July 26-31, 2015. c�2015 Association for Computational Linguistics
</note>
<bodyText confidence="0.99786">
as both entail O(log(1/ǫ)n3) time to compute all
pairs of Co-Simranks to attain desired accuracy ǫ.
The complexity O(log(1/ǫ)n3) has two parts:
The first part O(n3) is for matrix multiplications
(ATSk_1A) at each step. A careful implementa-
tion, e.g., partial sums memoisation (Lizorkin et
al., 2010) or fast matrix multiplications (Yu et al.,
2012b),1 can optimise this part further to O(dn2)
or O(nlog2 7), with d the average graph degree.
The second part O(log(1/ǫ)) is the total number
of steps required to guarantee a given accuracy ǫ,
because, as implied by (Rothe and Sch¨utze, 2014),
|Sk(a, b) − S(a, b) |c ck+1. ba, b, bk (5)
To the best of our knowledge, there is a paucity of
work on optimising the second part O(log(1/ǫ)).
Yu et al. (2012b) used a successive over-relaxation
(SOR) method to reduce the number of steps for
Simrank, which is also applicable to Co-Simrank.
However, this method requires a judicious choice
of an internal parameter (i.e., relaxation factor w),
which is hard to determine a-priori. Most recently,
Yu et al. (2015) propose an exponential model to
speed up the convergence of Simrank:
</bodyText>
<equation confidence="0.978299">
S0 = exp(−c) · I, d ¯St/dt = AT · S · A.
</equation>
<bodyText confidence="0.999340727272727">
However, S¯ and S do not produce the same results.
Thus, this exponential model, if used to compute
Co-Simrank, will lose some ranking accuracy.
Contributions. In this paper, we propose an effi-
cient method, Co-Simmate, that computes all pairs
of Co-Simranks in just O(log2(log(1/ǫ))n3) time,
without any compromise in accuracy. In addition,
Co-Simmate is parameter-free, and easy to imple-
ment. It can also integrate the best-of-breed matrix
decomposition based method by Yu and McCann
(2014) to achieve even higher efficiency.
</bodyText>
<sectionHeader confidence="0.998888" genericHeader="method">
2 Co-Simmate Model
</sectionHeader>
<bodyText confidence="0.999984666666667">
First, we provide the main idea of Co-Simmate.
We notice that Co-Simrank solution S in (1) is
expressible as a matrix series:
</bodyText>
<equation confidence="0.9995855">
S = I + cATA + c2(AT)2A2
+ c3(AT )3A3 + c4(AT )4A4 + ··· (6)
</equation>
<bodyText confidence="0.999748">
The existing iterative method (4) essentially uses
the following association to compute (6):
</bodyText>
<equation confidence="0.874427">
�S = cAT � � �� � � �
cAT �cAT A + I� A + I A + I + · · · (7)
� �� �
=S2
=S1
</equation>
<bodyText confidence="0.933842833333333">
The downside of this association is that the result-
ing Sk_1 of the last step can be reused only once
to compute Sk. Thus, after k iterations, Sk in (4)
grasps only the first k-th partial sums of S in (6).
To speed up the computation, we observe that
(6) can be reorganised as follows:
</bodyText>
<equation confidence="0.999204375">
� � � �
S = I + cAT A + c2(AT )2A2 + c3(AT )3A3 +
� �
+ c4(AT)4A4 + · · · + c7(AT)7A7 + ·· ·
� � � �
= I + cAT A + c2(AT)2(I + cAT A)A2 +
+ (c4(AT)4 (I + cATA + ··· + c3(AT)3A3) A 4 )
+ ·· ·
</equation>
<bodyText confidence="0.9702265">
Thereby, we can derive the following novel associ-
ation, referred to as Co-Simmate, to compute (6):
</bodyText>
<equation confidence="0.99725225">
=R1
� � �� �
S = (I + cATA) + (cAT)2
� v �
=R2
(cAT)4((I + cATA) + (cAT)2(I + cAT A)A2)
� v �
=R2
</equation>
<bodyText confidence="0.992061545454546">
There are two advantages of our association: one
is that the resulting Rk_1 from the last step can
be reused twice to compute Rk. Hence, Rk can
grasp the first (2k −1)-th partial sums2 of S in (6).
Another merit is that A2k can be obtained from
the result of squaring A2k−1, e.g., A4 = (A2)2.
With these advantages, Co-Simmate can compute
all pairs of scores much faster.
Next, let us formally introduce Co-Simmate:
Definition 1. We call Rk a Co-Simmate matrix at
k-th step if it is iterated as
</bodyText>
<equation confidence="0.999723666666667">
R0 = I, A0 = A
{ Rk+1 = Rk + c2k(AkTRkAk)
Ak+1 = Ak2
</equation>
<bodyText confidence="0.992773714285714">
By successive substitution in (9), one can verify
that limk,� Rk is the exact solution of S in (6).
More precisely, the following theorem shows that,
at step k, how many first terms of S in (6) can be
grasped by Rk, showing the fast speedup of (9).
Theorem 1. Let Rk be the Co-Simmate matrix in
(9), and Sk the Co-Simrank matrix in (4). Then,
</bodyText>
<equation confidence="0.9978935">
Rk = S2k_1 bk = 0, 1, 2, · · · (10)
=R1 + (8)
� �� �
(I + cAT A)A2)
A4 + ···
(9)
</equation>
<footnote confidence="0.8959295">
1These Simranks methods also suit Co-Simranks.
328 2This amount of the first partial sums will be proved later.
</footnote>
<figureCaption confidence="0.999836">
Figure 1: Co-Simmate speeds up Co-Simrank by aggregating more first terms of S in (6) at each step
</figureCaption>
<figure confidence="0.999826055555556">
R2
R3
R1
R0
(AT)2
((AT)2)2
(AT)2
((AT)2)2
AT
R0
R2
R1
R1
R2
A
(A2)2
(A2)2
A2
A2
((AT)2)2
R2
(A2)2
((AT)2)2
R2
(A2)2
S5 S5 S6
AT AT
A A
S0 S1 S1 S2 S2 S3 S3 S4
AT AT AT AT
S0 A A A A
S4
S7
S6
AT
A
</figure>
<figureCaption confidence="0.627403">
Proof. Successive substitution in (4) produces
</figureCaption>
<equation confidence="0.89785675">
Sk = Pk i=0 ci(Ai)T Ai (11)
Thus, proving (10) is equivalent to showing that
Rk = P2k−1
i=0 ci(Ai)T Ai (12)
</equation>
<bodyText confidence="0.811454">
To show (12), we will use induction on k.
</bodyText>
<listItem confidence="0.992365">
1. For k = 0, we have R0 = I = c0(A0)T A0.
2. When k &gt; 0, we assume that (12) holds for k,
and want to prove that (12) holds for k + 1.
</listItem>
<equation confidence="0.971864642857143">
From Ak+1 = Ak2 and A0 = A follows that
Ak = Ak−12 = Ak−222 = ··· = A2k (13)
Plugging Rk (12) and Ak (13) into (9) yields
Rk+1 = {using (12) and (13)}
= Rk + c2k(A2k�T(j:(2k−1 ci(Ai)T Ai)A2k
i=0
X2k−1
i=0 ci+2k(Ai+2k)TAi+2k
= Rk +
X2k−1+2k
= Rk + j=2k cj(Aj)T Aj
2k+1−1
cj (Aj) Aj
= Xj=0
</equation>
<bodyText confidence="0.983597666666667">
Lastly, coupling (11) and (12) concludes (10).
Theorem 1 implies that, at each step k, Rk in (9)
can grasp the first (2k − 1)-th terms of S, whereas
Sk in (4) can grasp only the first k-th terms of S.
Thus, given the number of steps K, Co-Simmate
is always more accurate than Co-Simrank because
RK is exponentially closer to S than SK to S.
Convergence Rate. We next provide a quantita-
tive result on how closer Rk is to S than Sk to S.
</bodyText>
<construct confidence="0.7753105">
Theorem 2. For any given step k, the difference
between Rk and S can be bounded by
</construct>
<equation confidence="0.6186375">
|Rk(a, b) − S(a, b) |≤ c2k, ∀a, b (14)
Proof. The Co-Simrank result in (5) implies that
|S2k−1(a, b) − S(a, b) |≤ c2k, ∀a, b
Plugging (10) into this inequality yields (14).
</equation>
<bodyText confidence="0.974215833333333">
Theorem 2 implies that, to attain a desired accu-
racy E, Co-Simmate (9) takes exponentially fewer
steps than Co-Simrank (4) since the total number
of steps required for RK, as implied by (14), is
K = max{0, ⌈log2 logc E⌉ + 1},
in contrast to the ⌈logc E⌉ steps required for SK.
Total Computational Cost. Though Co-Simmate
takes fewer steps than Co-Simrank for a desired E,
in each step Co-Simmate (9) performs one more
matrix multiplication than Co-Simrank (4). Next,
we compare their total computational time.
Theorem 3. To guarantee a desired accuracy E,
the total time of Co-Simmate (9) is exponentially
faster than that of Co-Simrank (4).
Proof. For k = 1, both Co-Simmate (9) and Co-
Simrank (4) take 2 matrix multiplications.
For k &gt; 1, Co-Simmate (9) takes 3 matrix mul-
tiplications (2 for ATk RkAk and 1 for A2k), whilst
Co-Simrank (4) takes 2 (only for AT k SkAk).
Let |9X |be the number of operations for one
matrix multiplication. Then, for Co-Simmate (9),
(total # of operations for Rk) = 3k|9X|,
whereas for Co-Simrank (4), by Theorem 1,
(total # of operations for Sk) = 2(2k − 1)|9X|.
Since 3k|9X |≤ 2(2k − 1)|9X|, ∀k = 2, 3, · · · , we
can conclude that the total time of Co-Simmate is
exponentially faster than that of Co-Simrank.
Example. Figure 1 pictorially visualises how Co-
Simmate accelerates Co-Simrank computation by
aggregating more first terms of S in (6) each step.
</bodyText>
<page confidence="0.99111">
329
</page>
<figure confidence="0.893680083333333">
Algorithm 1: Co-Simmate on Singular Graphs
Input : A – column-normalised adjacency matrix,
c – decay factor, e – desired accuracy.
1 Decompose A s.t. [Vr, HTr ] +— Gram-Schmidt(A).
2 Compute P +— HTr Vr.
3 Initialise K +— max{0, [log2 logc el + 11.
4 Initialise S0 +— Ir, P0 +— P.
5 for k +— 0, 1,··· ,K − 1 do
Compute Sk+1 +— c2k(Pk)TSk(Pk) + Sk.
6
7 Compute Pk+1 +— (Pk)2.
8 return S +— cHrSxHT r + I.
</figure>
<bodyText confidence="0.991322090909091">
At k-th step, Co-Simrank Sk connects only two
new hop-1 paths with the old retrieved paths Sk−1,
whereas Co-Simmate Rk connects two new hop-
(2k) paths (by squaring the old hop-(2k−1) paths)
with the old retrieved paths Rk−1. Consequently,
in each step of Co-Simrank, Co-Simmate is expo-
nential steps faster than Co-Simrank. Moreover,
the speedup is more obvious as k grows.
Optimality of Co-Simmate. To compute S in (6),
besides the prior association methods (7) and (8),
the following association can also be adopted:
</bodyText>
<equation confidence="0.995306">
=T1
� (I+cATA+c2(AT)2A2)+ (15)
c3(AT)3 (I+cATA+c2(AT)2A2) A3 + ···
� �� �
=T1
</equation>
<bodyText confidence="0.996685">
More generally, we can write the following model
that covers (8) and (15) as special cases:
</bodyText>
<equation confidence="0.988294833333333">
{ R(u)
Ak+1 = Aku (u = 2, 3, ··· )
R(u) 0= I, A0 = A
k+1 = R(u) k+ cuk · ATk · R(u) k· Ak
+ c2·uk · (Ak2)T · R(u) k· Ak2 + ··· +
+ c(u−1)·uk · (Aku−1)T ·R(ku) · Aku−1
</equation>
<bodyText confidence="0.890789333333333">
R(u) kis a hop-(uk) Co-Simmate matrix at step k.
R(u) kbecomes Co-Simmate Rk in (8) when u = 2;
and reduces to Tk in (15) when u = 3. For all u,
it is easy to verify that limk→∞ R(u) k= S. Below,
we show that Co-Simmate (8) (u = 2) is optimal.
Theorem 4. To attain a desired accuracy ǫ, the to-
tal time of Co-Simmate (8) is minimum among all
hop-(uk) Co-Simmate models R(u) k(u = 2, 3, · · · ).
Proof. Similar to Theorem 1, we can show that
</bodyText>
<equation confidence="0.988305">
|R(u)
k (a, b) − S(a, b) |≤ cuk, ∀a, b, ∀u (16)
Thus, given ǫ, the total number of steps for R(u)
K is
K = max{0, ⌈logu logc ǫ⌉ + 1}.
For each step k, for hop-(uk) Co-Simmate R(u)
k ,
(# of operations) = ((u − 1) + Eu−2
i=0 i)|0 |= (u−1)u
2 |0|.
</equation>
<bodyText confidence="0.99072275">
Therefore, the total time of computing R(u) kis
O(max{0, ⌈logu logc ǫ⌉ + 1}(u − 1)u|0|).
This complexity is increasing with u = 2, 3, · · · .
Thus, Co-Simmate (8) (u = 2) is minimum.
Incorporate Co-Simmate into Singular Graphs.
Co-Simmate (9) can also be combined with other
factorisation methods, e.g., Sig-SR, a Co-Simrank
algorithm proposed by (Yu and McCann, 2014),
to speed up all pairs of Co-Simrank computation
from O(rn2 + Kr3) to O(rn2 + (log2K)r3) time
further on a singular graph with rank r for K steps.
The enhanced Sig-SR is shown in Algorithm 1.
</bodyText>
<sectionHeader confidence="0.99993" genericHeader="method">
3 Experiments
</sectionHeader>
<subsectionHeader confidence="0.999693">
3.1 Experimental Settings
</subsectionHeader>
<bodyText confidence="0.998475">
Datasets. We use both real and synthetic datasets.
Three real graphs (Twitter, Email, Facebook) are
taken from SNAP (Leskovec and Sosiˇc, 2014).
</bodyText>
<listItem confidence="0.965512">
1) Twitter is a who-follows-whom social graph
crawled from the entire Twitter site. Each node is
a user, and each edge represents a social relation.
2) Email is an Email communication network
from Enron. If an address i sent at least one email
to address j, there is a link from i to j.
3) FB contains ‘circles’ (or ‘friends lists’) from
</listItem>
<bodyText confidence="0.93930565">
Facebook. This dataset is collected from the sur-
vey participants using the Facebook app, including
node features (profiles), circles, and ego networks.
The statistics of these datasets are as follows:
Datasets # edges # nodes ave degree
Twitter 1,768,149 81,306 21.70
Email 183,831 36,692 5.01
FB 88,234 4,039 21.84
To build synthetic data, we use Boost toolkit
(Lee et al., 2001).We control the number of nodes
n and edges m to follow densification power laws
(Leskovec et al., 2005; Faloutsos et al., 1999).
Baselines. We compare our Co-Simmate with 1)
Ite-Mat (Rothe and Sch¨utze, 2014), a Co-Simrank
method using the dot product of Pagerank vectors.
2) K-Sim (Kusumoto et al., 2014), a linearized
method modified to Co-Simrank. 3) Sig-SR (Yu
and McCann, 2014), a SVD Co-Simrank method.
All experiments are on 64bit Ubuntu 14.04 with
Intel Xeon E2650 2.0GHz CPU and 16GB RAM.
</bodyText>
<page confidence="0.971474">
330
</page>
<figure confidence="0.866351111111111">
S=
ǫ c = 0.6 c = 0.7 c = 0.8
SM SR SM SR SM SR
0.1 3 4 3 6 4 10
0.01 4 9 4 12 5 20
0.001 4 13 5 19 5 30
0.0001 5 18 5 25 6 41
0.00001 5 22 6 32 6 51
(c) Effect of Damping Factor c on Iterations k (on FB)
</figure>
<figureCaption confidence="0.996346">
Figure 2: Compare Co-Simmate with Baselines
</figureCaption>
<subsectionHeader confidence="0.998275">
3.2 Experimental Results
</subsectionHeader>
<bodyText confidence="0.992633421052632">
Exp-I. Convergence Rate. We compare the num-
ber of steps k needed for Co-Simmate and Co-
Simrank (Ite-Mat) to attain a desired accuracy c on
Twitter, Email, FB. The results on all the datasets
are similar. Due to space limits, Figure 2(a) only
reports the result on FB. We can discern that, when
c varies from 0.01 to 1, k increases from 1 to 5
for Co-Simmate, but from 1 to 20 for Co-Simrank.
The fast convergence rate of Co-Simmate is due to
our model that twice reuses Rk_1 of the last step.
Exp-II. Total Computational Time. Figure 2(b)
compares the total computational time of Co-
Simmate with 3 best-known methods on real data.
The result shows Co-Simmate runs 10x, 5.6x, 4.3x
faster than K-Sim, Ite-Mat, Sig-SR, respectively.
This is because 1) K-Sim is efficient only when a
fraction pair of scores are computed, whereas Co-
Simmate can efficiently handle all pairs scores, by
twice sharing Rk_1 and repeated squaring A2k−1.
</bodyText>
<listItem confidence="0.701174">
2) Co-Simmate grasps exponential new terms of S
per step, but Ite-Mat grasps just 1 new term of S.
3) Sig-SR does not adopt association tricks in the
</listItem>
<bodyText confidence="0.983879263157895">
subspace, unlike our methods that integrate (9).
Exp-III. Effect of Damping Factor c. Using real
datasets (Twitter, Email, FB), we next evaluate the
effect of damping factor c on the number of itera-
tions k to guarantee a given accuracy c. We vary c
from 0.1 to 0.00001 and c from 0.6 to 0.8, the re-
sults of k on all the datasets are similar. For the in-
terests of space, Figure 2(c) tabularises only the re-
sults on FB, where ‘SM’ columns list the number
of iterations required for Co-Simmate, and ‘SR’
columns lists that for Co-Simrank. From the re-
sults, we can see that, for any given c and c, the
number of iterations for Co-Simmate is consis-
tently smaller than that for Co-Simrank. Their gap
is more pronounced when c becomes smaller or
c is increased. This is because, at each iteration,
Co-Simmate can grasp far more first terms of S
than Co-Simrank. Thus, for a fixed accuracy, Co-
Simmate requires less iterations than Co-Simrank.
This is consistent with our analysis in Theorem 2.
Exp-IV. Scalability. By using synthetic datasets,
we fix c = 0.0001 and vary n from 4,000 to
10,000. Figure 2(d) depicts the total time of Co-
Simmate and Ite-Mat. We can notice that, as n
grows, the time of Co-Simmate does not increase
so fast as Co-Simrank. The reason is that the num-
ber of steps of Co-Simmate is greatly cut down by
twice Rk_1 sharing and A2k−1 memoisation.
Exp-V. Effect of Hop-uk. Finally, we test the im-
pact of u on the total time of our hop-(uk) Co-
Simmate variations on real datasets. Due to sim-
ilar results, Figure 2(e) merely reports the results
on FB. It can be observed that, as u grows from
2 to 6, the total number of steps for hop-(uk) Co-
Simmate decreases, but their total time still grows.
This is because, in each step, the cost of hop-(uk)
Co-Simmate is increasing with u. Thus, the lowest
cost is Co-Simmate when u = 2.
</bodyText>
<sectionHeader confidence="0.995982" genericHeader="conclusions">
4 Conclusions
</sectionHeader>
<bodyText confidence="0.92871275">
We propose an efficient algorithm, Co-Simmate,
to speed up all pairs Co-Simranks retrieval from
0(log(1/c)n3) to O(log2(log(1/c))n3) time, to
attain a desired accuracy c. Besides, we integrate
Co-Simmate with Sig-SR on singular graphs to
attain higher efficacy. The experiments show that
Co-Simmate can be 10.2x faster than the state-of-
the-art competitors. As future work, we will incor-
porate our partial-pairs Simrank (Yu and McCann,
2015) into partial-pairs Co-Simmate search.
Acknowledgement. This research is supported by
NEC Smart Water Network research project.
</bodyText>
<page confidence="0.993563">
331
</page>
<figure confidence="0.996309604166667">
20
15
10
5
0 10−2 10−1 100
accuracy (ǫ)
(a) Rate of Convergence
(on FB dataset, c = 0.8)
Time (sec)
106
104
102
Simmate
Sig−SR
Ite−Mat
K−Sim
Twitter Email FB
(b) Total Computational Time
(on three real datasets, c = 0.8)
# of steps (k)
Simmate
Simrank
n u
(d) Scalability w.r.t. # nodes (e) Effect of Hop-(uk)
(on 7 synthetic datasets) (on FB dataset, c = 0.8)
Time (sec)
2500
2000
1500
1000
500
0
4K 5K 6K 7K 8K 9K 10K
Simmate
Simrank (Ite−Mat)
Time (sec)
200
150
100
50
0
6
2 3 4 5 6
hof-(uk) Simmate
k
4 3
3
3
</figure>
<sectionHeader confidence="0.855255" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.998987488721804">
Ayman Alhelbawy and Robert J. Gaizauskas. 2014.
Graph ranking for collective named entity disam-
biguation. In Proceedings of the 52nd Annual Meet-
ing of the Association for Computational Linguistics
(ACL 2014), pages 75–80.
Pavel Berkhin. 2005. Survey: A survey on PageRank
computing. Internet Mathematics, 2(1):73–120.
Michalis Faloutsos, Petros Faloutsos, and Christos
Faloutsos. 1999. On power-law relationships of
the internet topology. In Proceedings of the Confer-
ence on Applications, Technologies, Architectures,
and Protocols for Computer Communication (SIG-
COMM 1999), pages 251–262.
Taher H Haveliwala. 2002. Topic-sensitive PageRank.
In Proceedings of the 11th International Conference
on World Wide Web (WWW 2002), pages 517–526.
ACM.
Glen Jeh and Jennifer Widom. 2002. SimRank: A
measure of structural-context similarity. In Proceed-
ings of the 8th ACM SIGKDD International Con-
ference on Knowledge Discovery and Data Mining
(SIGKDD 2002), pages 538–543.
Mitsuru Kusumoto, Takanori Maehara, and Ken-ichi
Kawarabayashi. 2014. Scalable similarity search
for SimRank. In Proceedings of the 2014 ACM SIG-
MOD International Conference on Management of
Data (SIGMOD 2014), pages 325–336.
Florian Laws, Lukas Michelbacher, Beate Dorow,
Christian Scheible, Ulrich Heid, and Hinrich
Sch¨utze. 2010. A linguistically grounded graph
model for bilingual lexicon extraction. In Pro-
ceedings of the 23rd International Conference on
Computational Linguistics (COLING 2010, Poster),
pages 614–622.
Lie-Quan Lee, Andrew Lumsdaine, and Jeremy G Siek.
2001. The boost graph library. http://www.
boost.org/.
E. A. Leicht, Petter Holme, and M. E. J. Newman.
2006. Vertex similarity in networks. Physical Re-
view E, 73(2):026120.
Jure Leskovec and Rok Sosiˇc. 2014. SNAP: A gen-
eral purpose network analysis and graph mining li-
brary in C++. http://snap.stanford.edu/
snap, June.
Jure Leskovec, Jon Kleinberg, and Christos Faloutsos.
2005. Graphs over time: Densification laws, shrink-
ing diameters and possible explanations. In Pro-
ceedings of the 11th ACM SIGKDD International
Conference on Knowledge Discovery in Data Min-
ing (SIGKDD 2005), pages 177–187. ACM.
Cuiping Li, Jiawei Han, Guoming He, Xin Jin, Yizhou
Sun, Yintao Yu, and Tianyi Wu. 2010. Fast compu-
tation of SimRank for static and dynamic informa-
tion networks. In Proceedings of the 13th Interna-
tional Conference on Extending Database Technol-
ogy (EDBT 2010), pages 465–476.
Dmitry Lizorkin, Pavel Velikhov, Maxim N. Grinev,
and Denis Turdakov. 2010. Accuracy estimate and
optimization techniques for SimRank computation.
The VLDB Journal (The International Journal on
Very Large Data Bases), 19(1):45–66.
Einat Minkov and William W. Cohen. 2014. Adap-
tive graph walk-based similarity measures for parsed
text. Natural Language Engineering, 20(3):361–
397.
Sascha Rothe and Hinrich Sch¨utze. 2014. CoSim-
Rank: A flexible &amp; efficient graph-theoretic simi-
larity measure. In Proceedings of the 52nd Annual
Meeting of the Association for Computational Lin-
guistics (ACL 2014), pages 1392–1402.
Christian Scheible and Hinrich Sch¨utze. 2013. Senti-
ment relevance. In Proceedings of the 51st Annual
Meeting of the Association for Computational Lin-
guistics (ACL 2013), pages 954–963.
Seshan Srirangarajan and Dirk Pesch. 2013. Source
localization using graph-based optimization tech-
nique. In IEEE Wireless Communications and Net-
working Conference (WCNC 2013), pages 1127–
1132.
Seshan Srirangarajan, Michael Allen, Ami Preis, Mu-
dasser Iqbal, HockBeng Lim, and AndrewJ. Whittle.
2013. Wavelet-based burst event detection and lo-
calization in water distribution systems. Journal of
Signal Processing Systems, 72(1):1–16.
Ivan Stoianov, Lama Nachman, Steve Madden, Timur
Tokmouline, and M Csail. 2007. PIPENET: A
wireless sensor network for pipeline monitoring. In
The 6th International Symposium on Information
Processing in Sensor Networks (IPSN 2007), pages
264–273.
Weiren Yu and Julie A. McCann. 2014. Sig-SR: Sim-
Rank search over singular graphs. In Proceedings
of the 37th ACM SIGIR International Conference on
Research &amp; Development in Information Retrieval
(SIGIR 2014), pages 859–862.
Weiren Yu and Julie A McCann. 2015. Efficient
partial-pairs SimRank search on large networks.
Proceedings of the VLDB Endowment (PVLDB
2015), 8(5):569–580.
Weiren Yu, Xuemin Lin, Wenjie Zhang, Ying Zhang,
and Jiajin Le. 2012a. SimFusion+: Extending Sim-
Fusion towards efficient estimation on large and dy-
namic networks. In Proceedings of the 35th ACM
SIGIR International Conference on Research &amp; De-
velopment in Information Retrieval (SIGIR 2012),
332 pages 365–374.
Weiren Yu, Wenjie Zhang, Xuemin Lin, Qing Zhang,
and Jiajin Le. 2012b. A space and time efficient
algorithm for SimRank computation. World Wide
Web, 15(3):327–353.
Weiren Yu, Xuemin Lin, and Wenjie Zhang. 2014.
Fast incremental SimRank on link-evolving graphs.
In Proceedings of the 30th IEEE International Con-
ference on Data Engineering (ICDE 2014), pages
304–315.
Weiren Yu, Xuemin Lin, Wenjie Zhang, and Julie A.
McCann. 2015. Fast all-pairs SimRank assess-
ment on large graphs and bipartite domains. IEEE
Transactions on Knowledge and Data Engineering
(TKDE), 27(7):1810–1823.
Wei Zhang, Yan Chuan Sim, Jian Su, and Chew Lim
Tan. 2011. Entity linking with effective acronym
expansion, instance selection and topic modeling. In
Proceedings of the 22nd International Joint Confer-
ence on Artificial Intelligence (IJCAI 2011), pages
1909–1914.
Yang Zhou, Hong Cheng, and Jeffrey Xu Yu. 2009.
Graph clustering based on structural / attribute sim-
ilarities. Proceedings of the VLDB Endowment
(PVLDB), 2(1):718–729.
Uri Zwick. 2002. All pairs shortest paths using bridg-
ing sets and rectangular matrix multiplication. Jour-
nal of the ACM (JACM), 49(3):289–317.
</reference>
<page confidence="0.999403">
333
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.606222">
<title confidence="0.999683">Co-Simmate: Quick Retrieving All Pairwise Co-Simrank Scores</title>
<author confidence="0.999962">Weiren Yu</author>
<author confidence="0.999962">Julie A McCann</author>
<affiliation confidence="0.812495">Department of Imperial College London, UK</affiliation>
<abstract confidence="0.998278777777778">Co-Simrank is a useful Simrank-like measure of similarity based on graph structure. The existing method iteratively computes each pair of Co-Simrank score from a dot product of two Pagerank vectors, entailing to compute all pairs Co-Simranks in a graph with attain a desired accuracy In this study, we devise a model, Co-Simmate, to speed up the retrieval of all pairs of Co-Simranks Moreover, we show the optimality of Co-Simmate other and integrate it with a matrix decomposition based method on singular graphs to attain higher efficiency. The viable experiments verify the superiority of Co-Simmate to others.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Ayman Alhelbawy</author>
<author>Robert J Gaizauskas</author>
</authors>
<title>Graph ranking for collective named entity disambiguation.</title>
<date>2014</date>
<booktitle>In Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics (ACL 2014),</booktitle>
<pages>75--80</pages>
<contexts>
<context position="1198" citStr="Alhelbawy and Gaizauskas, 2014" startWordPosition="170" endWordPosition="173">e retrieval of all pairs of Co-Simranks to O(log2(log(1/ǫ))n3) time. Moreover, we show the optimality of Co-Simmate among other hop-(uk) variations, and integrate it with a matrix decomposition based method on singular graphs to attain higher efficiency. The viable experiments verify the superiority of Co-Simmate to others. 1 Introduction Many NLP applications require a pairwise graphbased similarity measure. Examples are bilingual lexicon extraction (Laws et al., 2010), sentiment analysis (Scheible and Sch¨utze, 2013), synonym extraction (Minkov and Cohen, 2014), named entity disambiguation (Alhelbawy and Gaizauskas, 2014), acronym expansion (Zhang et al., 2011). Recently, Co-Simrank (Rothe and Sch¨utze, 2014) becomes an appealing graph-theoretical similarity measure that integrates both features of Simrank (Jeh and Widom, 2002) and Pagerank (Berkhin, 2005). Co-Simrank works by weighing all the number of connections between two nodes to evaluate how similar two nodes are. The intuition behind Co-Simrank is that “more similar nodes are likely to be pointed to by other similar nodes”. Co-Simrank is defined in a recursive style: S = cAT SA + I, (1) where S is the exact Co-Simrank matrix, A is the column-normalised</context>
</contexts>
<marker>Alhelbawy, Gaizauskas, 2014</marker>
<rawString>Ayman Alhelbawy and Robert J. Gaizauskas. 2014. Graph ranking for collective named entity disambiguation. In Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics (ACL 2014), pages 75–80.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Pavel Berkhin</author>
</authors>
<title>Survey: A survey on PageRank computing.</title>
<date>2005</date>
<journal>Internet Mathematics,</journal>
<volume>2</volume>
<issue>1</issue>
<contexts>
<context position="1437" citStr="Berkhin, 2005" startWordPosition="204" endWordPosition="205">he viable experiments verify the superiority of Co-Simmate to others. 1 Introduction Many NLP applications require a pairwise graphbased similarity measure. Examples are bilingual lexicon extraction (Laws et al., 2010), sentiment analysis (Scheible and Sch¨utze, 2013), synonym extraction (Minkov and Cohen, 2014), named entity disambiguation (Alhelbawy and Gaizauskas, 2014), acronym expansion (Zhang et al., 2011). Recently, Co-Simrank (Rothe and Sch¨utze, 2014) becomes an appealing graph-theoretical similarity measure that integrates both features of Simrank (Jeh and Widom, 2002) and Pagerank (Berkhin, 2005). Co-Simrank works by weighing all the number of connections between two nodes to evaluate how similar two nodes are. The intuition behind Co-Simrank is that “more similar nodes are likely to be pointed to by other similar nodes”. Co-Simrank is defined in a recursive style: S = cAT SA + I, (1) where S is the exact Co-Simrank matrix, A is the column-normalised adjacency matrix of the graph, c is a decay factor, and I is an identity matrix. The best-known method by (Rothe and Sch¨utze, 2014) computes a single element of S iteratively from a dot product (*, *) of two Pagerank vectors: Sk(a, b) = </context>
</contexts>
<marker>Berkhin, 2005</marker>
<rawString>Pavel Berkhin. 2005. Survey: A survey on PageRank computing. Internet Mathematics, 2(1):73–120.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michalis Faloutsos</author>
<author>Petros Faloutsos</author>
<author>Christos Faloutsos</author>
</authors>
<title>On power-law relationships of the internet topology.</title>
<date>1999</date>
<booktitle>In Proceedings of the Conference on Applications, Technologies, Architectures, and Protocols for Computer Communication (SIGCOMM</booktitle>
<pages>251--262</pages>
<contexts>
<context position="14343" citStr="Faloutsos et al., 1999" startWordPosition="2623" endWordPosition="2626">t at least one email to address j, there is a link from i to j. 3) FB contains ‘circles’ (or ‘friends lists’) from Facebook. This dataset is collected from the survey participants using the Facebook app, including node features (profiles), circles, and ego networks. The statistics of these datasets are as follows: Datasets # edges # nodes ave degree Twitter 1,768,149 81,306 21.70 Email 183,831 36,692 5.01 FB 88,234 4,039 21.84 To build synthetic data, we use Boost toolkit (Lee et al., 2001).We control the number of nodes n and edges m to follow densification power laws (Leskovec et al., 2005; Faloutsos et al., 1999). Baselines. We compare our Co-Simmate with 1) Ite-Mat (Rothe and Sch¨utze, 2014), a Co-Simrank method using the dot product of Pagerank vectors. 2) K-Sim (Kusumoto et al., 2014), a linearized method modified to Co-Simrank. 3) Sig-SR (Yu and McCann, 2014), a SVD Co-Simrank method. All experiments are on 64bit Ubuntu 14.04 with Intel Xeon E2650 2.0GHz CPU and 16GB RAM. 330 S= ǫ c = 0.6 c = 0.7 c = 0.8 SM SR SM SR SM SR 0.1 3 4 3 6 4 10 0.01 4 9 4 12 5 20 0.001 4 13 5 19 5 30 0.0001 5 18 5 25 6 41 0.00001 5 22 6 32 6 51 (c) Effect of Damping Factor c on Iterations k (on FB) Figure 2: Compare Co-</context>
</contexts>
<marker>Faloutsos, Faloutsos, Faloutsos, 1999</marker>
<rawString>Michalis Faloutsos, Petros Faloutsos, and Christos Faloutsos. 1999. On power-law relationships of the internet topology. In Proceedings of the Conference on Applications, Technologies, Architectures, and Protocols for Computer Communication (SIGCOMM 1999), pages 251–262.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Taher H Haveliwala</author>
</authors>
<title>Topic-sensitive PageRank.</title>
<date>2002</date>
<booktitle>In Proceedings of the 11th International Conference on World Wide Web (WWW</booktitle>
<pages>517--526</pages>
<publisher>ACM.</publisher>
<contexts>
<context position="2947" citStr="Haveliwala, 2002" startWordPosition="468" endWordPosition="469"> single pair score. However, partial pairs retrieval is insufficient for many realworld applications (Zhou et al., 2009; Yu et al., 2012a; Zwick, 2002; Leicht et al., 2006) which require all-pairs scores. Let us look at two examples. a) Co-Citation Analysis. In a co-citation network, one wants to retrieve the relevance between any two given documents at any moment based on their references. To answer such an ad-hoc query, quantifying scores of all document-pairs provides a comprehensive way to show where low and high relevance of pairwise documents may exist (Li et al., 2010; Yu et al., 2014; Haveliwala, 2002). b) Water Burst Localization. In a water network, nodes denote deployed pressure sensor locations, and edges are pipe sections that connect the nodes. To determine the burst location, one needs to evaluate “proximities” of all pairs of sensor nodes first, and then compare all these “proximities” with the difference in the arrival times of the burst transient at sensor locations, to find the sensor node nearest to the burst event. (Srirangarajan and Pesch, 2013; Srirangarajan et al., 2013; Stoianov et al., 2007) Hence, the retrieval of all pairwise Co-Simranks is very useful in many applicatio</context>
</contexts>
<marker>Haveliwala, 2002</marker>
<rawString>Taher H Haveliwala. 2002. Topic-sensitive PageRank. In Proceedings of the 11th International Conference on World Wide Web (WWW 2002), pages 517–526. ACM.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Glen Jeh</author>
<author>Jennifer Widom</author>
</authors>
<title>SimRank: A measure of structural-context similarity.</title>
<date>2002</date>
<booktitle>In Proceedings of the 8th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (SIGKDD</booktitle>
<pages>538--543</pages>
<contexts>
<context position="1408" citStr="Jeh and Widom, 2002" startWordPosition="198" endWordPosition="201">aphs to attain higher efficiency. The viable experiments verify the superiority of Co-Simmate to others. 1 Introduction Many NLP applications require a pairwise graphbased similarity measure. Examples are bilingual lexicon extraction (Laws et al., 2010), sentiment analysis (Scheible and Sch¨utze, 2013), synonym extraction (Minkov and Cohen, 2014), named entity disambiguation (Alhelbawy and Gaizauskas, 2014), acronym expansion (Zhang et al., 2011). Recently, Co-Simrank (Rothe and Sch¨utze, 2014) becomes an appealing graph-theoretical similarity measure that integrates both features of Simrank (Jeh and Widom, 2002) and Pagerank (Berkhin, 2005). Co-Simrank works by weighing all the number of connections between two nodes to evaluate how similar two nodes are. The intuition behind Co-Simrank is that “more similar nodes are likely to be pointed to by other similar nodes”. Co-Simrank is defined in a recursive style: S = cAT SA + I, (1) where S is the exact Co-Simrank matrix, A is the column-normalised adjacency matrix of the graph, c is a decay factor, and I is an identity matrix. The best-known method by (Rothe and Sch¨utze, 2014) computes a single element of S iteratively from a dot product (*, *) of two </context>
</contexts>
<marker>Jeh, Widom, 2002</marker>
<rawString>Glen Jeh and Jennifer Widom. 2002. SimRank: A measure of structural-context similarity. In Proceedings of the 8th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (SIGKDD 2002), pages 538–543.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mitsuru Kusumoto</author>
<author>Takanori Maehara</author>
<author>Ken-ichi Kawarabayashi</author>
</authors>
<title>Scalable similarity search for SimRank.</title>
<date>2014</date>
<booktitle>In Proceedings of the 2014 ACM SIGMOD International Conference on Management of Data (SIGMOD 2014),</booktitle>
<pages>325--336</pages>
<contexts>
<context position="14521" citStr="Kusumoto et al., 2014" startWordPosition="2651" endWordPosition="2654"> using the Facebook app, including node features (profiles), circles, and ego networks. The statistics of these datasets are as follows: Datasets # edges # nodes ave degree Twitter 1,768,149 81,306 21.70 Email 183,831 36,692 5.01 FB 88,234 4,039 21.84 To build synthetic data, we use Boost toolkit (Lee et al., 2001).We control the number of nodes n and edges m to follow densification power laws (Leskovec et al., 2005; Faloutsos et al., 1999). Baselines. We compare our Co-Simmate with 1) Ite-Mat (Rothe and Sch¨utze, 2014), a Co-Simrank method using the dot product of Pagerank vectors. 2) K-Sim (Kusumoto et al., 2014), a linearized method modified to Co-Simrank. 3) Sig-SR (Yu and McCann, 2014), a SVD Co-Simrank method. All experiments are on 64bit Ubuntu 14.04 with Intel Xeon E2650 2.0GHz CPU and 16GB RAM. 330 S= ǫ c = 0.6 c = 0.7 c = 0.8 SM SR SM SR SM SR 0.1 3 4 3 6 4 10 0.01 4 9 4 12 5 20 0.001 4 13 5 19 5 30 0.0001 5 18 5 25 6 41 0.00001 5 22 6 32 6 51 (c) Effect of Damping Factor c on Iterations k (on FB) Figure 2: Compare Co-Simmate with Baselines 3.2 Experimental Results Exp-I. Convergence Rate. We compare the number of steps k needed for Co-Simmate and CoSimrank (Ite-Mat) to attain a desired accura</context>
</contexts>
<marker>Kusumoto, Maehara, Kawarabayashi, 2014</marker>
<rawString>Mitsuru Kusumoto, Takanori Maehara, and Ken-ichi Kawarabayashi. 2014. Scalable similarity search for SimRank. In Proceedings of the 2014 ACM SIGMOD International Conference on Management of Data (SIGMOD 2014), pages 325–336.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Florian Laws</author>
<author>Lukas Michelbacher</author>
<author>Beate Dorow</author>
<author>Christian Scheible</author>
<author>Ulrich Heid</author>
<author>Hinrich Sch¨utze</author>
</authors>
<title>A linguistically grounded graph model for bilingual lexicon extraction.</title>
<date>2010</date>
<booktitle>In Proceedings of the 23rd International Conference on Computational Linguistics (COLING 2010, Poster),</booktitle>
<pages>614--622</pages>
<marker>Laws, Michelbacher, Dorow, Scheible, Heid, Sch¨utze, 2010</marker>
<rawString>Florian Laws, Lukas Michelbacher, Beate Dorow, Christian Scheible, Ulrich Heid, and Hinrich Sch¨utze. 2010. A linguistically grounded graph model for bilingual lexicon extraction. In Proceedings of the 23rd International Conference on Computational Linguistics (COLING 2010, Poster), pages 614–622.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Lie-Quan Lee</author>
<author>Andrew Lumsdaine</author>
<author>Jeremy G Siek</author>
</authors>
<title>The boost graph library.</title>
<date>2001</date>
<note>http://www. boost.org/.</note>
<contexts>
<context position="14215" citStr="Lee et al., 2001" startWordPosition="2601" endWordPosition="2604">er, and each edge represents a social relation. 2) Email is an Email communication network from Enron. If an address i sent at least one email to address j, there is a link from i to j. 3) FB contains ‘circles’ (or ‘friends lists’) from Facebook. This dataset is collected from the survey participants using the Facebook app, including node features (profiles), circles, and ego networks. The statistics of these datasets are as follows: Datasets # edges # nodes ave degree Twitter 1,768,149 81,306 21.70 Email 183,831 36,692 5.01 FB 88,234 4,039 21.84 To build synthetic data, we use Boost toolkit (Lee et al., 2001).We control the number of nodes n and edges m to follow densification power laws (Leskovec et al., 2005; Faloutsos et al., 1999). Baselines. We compare our Co-Simmate with 1) Ite-Mat (Rothe and Sch¨utze, 2014), a Co-Simrank method using the dot product of Pagerank vectors. 2) K-Sim (Kusumoto et al., 2014), a linearized method modified to Co-Simrank. 3) Sig-SR (Yu and McCann, 2014), a SVD Co-Simrank method. All experiments are on 64bit Ubuntu 14.04 with Intel Xeon E2650 2.0GHz CPU and 16GB RAM. 330 S= ǫ c = 0.6 c = 0.7 c = 0.8 SM SR SM SR SM SR 0.1 3 4 3 6 4 10 0.01 4 9 4 12 5 20 0.001 4 13 5 1</context>
</contexts>
<marker>Lee, Lumsdaine, Siek, 2001</marker>
<rawString>Lie-Quan Lee, Andrew Lumsdaine, and Jeremy G Siek. 2001. The boost graph library. http://www. boost.org/.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E A Leicht</author>
<author>Petter Holme</author>
<author>M E J Newman</author>
</authors>
<title>Vertex similarity in networks. Physical Review E,</title>
<date>2006</date>
<contexts>
<context position="2502" citStr="Leicht et al., 2006" startWordPosition="393" endWordPosition="396">e best-known method by (Rothe and Sch¨utze, 2014) computes a single element of S iteratively from a dot product (*, *) of two Pagerank vectors: Sk(a, b) = ck(pk(a), pk(b)) + Sk−1(a, b) (2) where pk(a) is a Pagerank vector, defined as pk(a) = AT pk−1(a) with p0(a) = I(*, a) (3) This method is highly efficient when only a small fraction of pairs of Co-Simranks need computing because there is no need to access the entire graph for computing only a single pair score. However, partial pairs retrieval is insufficient for many realworld applications (Zhou et al., 2009; Yu et al., 2012a; Zwick, 2002; Leicht et al., 2006) which require all-pairs scores. Let us look at two examples. a) Co-Citation Analysis. In a co-citation network, one wants to retrieve the relevance between any two given documents at any moment based on their references. To answer such an ad-hoc query, quantifying scores of all document-pairs provides a comprehensive way to show where low and high relevance of pairwise documents may exist (Li et al., 2010; Yu et al., 2014; Haveliwala, 2002). b) Water Burst Localization. In a water network, nodes denote deployed pressure sensor locations, and edges are pipe sections that connect the nodes. To </context>
</contexts>
<marker>Leicht, Holme, Newman, 2006</marker>
<rawString>E. A. Leicht, Petter Holme, and M. E. J. Newman. 2006. Vertex similarity in networks. Physical Review E, 73(2):026120.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jure Leskovec</author>
<author>Rok Sosiˇc</author>
</authors>
<title>SNAP: A general purpose network analysis and graph mining library in C++. http://snap.stanford.edu/ snap,</title>
<date>2014</date>
<marker>Leskovec, Sosiˇc, 2014</marker>
<rawString>Jure Leskovec and Rok Sosiˇc. 2014. SNAP: A general purpose network analysis and graph mining library in C++. http://snap.stanford.edu/ snap, June.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jure Leskovec</author>
<author>Jon Kleinberg</author>
<author>Christos Faloutsos</author>
</authors>
<title>Graphs over time: Densification laws, shrinking diameters and possible explanations.</title>
<date>2005</date>
<booktitle>In Proceedings of the 11th ACM SIGKDD International Conference on Knowledge Discovery in Data Mining (SIGKDD</booktitle>
<pages>177--187</pages>
<publisher>ACM.</publisher>
<contexts>
<context position="14318" citStr="Leskovec et al., 2005" startWordPosition="2619" endWordPosition="2622">on. If an address i sent at least one email to address j, there is a link from i to j. 3) FB contains ‘circles’ (or ‘friends lists’) from Facebook. This dataset is collected from the survey participants using the Facebook app, including node features (profiles), circles, and ego networks. The statistics of these datasets are as follows: Datasets # edges # nodes ave degree Twitter 1,768,149 81,306 21.70 Email 183,831 36,692 5.01 FB 88,234 4,039 21.84 To build synthetic data, we use Boost toolkit (Lee et al., 2001).We control the number of nodes n and edges m to follow densification power laws (Leskovec et al., 2005; Faloutsos et al., 1999). Baselines. We compare our Co-Simmate with 1) Ite-Mat (Rothe and Sch¨utze, 2014), a Co-Simrank method using the dot product of Pagerank vectors. 2) K-Sim (Kusumoto et al., 2014), a linearized method modified to Co-Simrank. 3) Sig-SR (Yu and McCann, 2014), a SVD Co-Simrank method. All experiments are on 64bit Ubuntu 14.04 with Intel Xeon E2650 2.0GHz CPU and 16GB RAM. 330 S= ǫ c = 0.6 c = 0.7 c = 0.8 SM SR SM SR SM SR 0.1 3 4 3 6 4 10 0.01 4 9 4 12 5 20 0.001 4 13 5 19 5 30 0.0001 5 18 5 25 6 41 0.00001 5 22 6 32 6 51 (c) Effect of Damping Factor c on Iterations k (on </context>
</contexts>
<marker>Leskovec, Kleinberg, Faloutsos, 2005</marker>
<rawString>Jure Leskovec, Jon Kleinberg, and Christos Faloutsos. 2005. Graphs over time: Densification laws, shrinking diameters and possible explanations. In Proceedings of the 11th ACM SIGKDD International Conference on Knowledge Discovery in Data Mining (SIGKDD 2005), pages 177–187. ACM.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Cuiping Li</author>
<author>Jiawei Han</author>
<author>Guoming He</author>
<author>Xin Jin</author>
<author>Yizhou Sun</author>
<author>Yintao Yu</author>
<author>Tianyi Wu</author>
</authors>
<title>Fast computation of SimRank for static and dynamic information networks.</title>
<date>2010</date>
<booktitle>In Proceedings of the 13th International Conference on Extending Database Technology (EDBT</booktitle>
<pages>465--476</pages>
<contexts>
<context position="2911" citStr="Li et al., 2010" startWordPosition="460" endWordPosition="463"> entire graph for computing only a single pair score. However, partial pairs retrieval is insufficient for many realworld applications (Zhou et al., 2009; Yu et al., 2012a; Zwick, 2002; Leicht et al., 2006) which require all-pairs scores. Let us look at two examples. a) Co-Citation Analysis. In a co-citation network, one wants to retrieve the relevance between any two given documents at any moment based on their references. To answer such an ad-hoc query, quantifying scores of all document-pairs provides a comprehensive way to show where low and high relevance of pairwise documents may exist (Li et al., 2010; Yu et al., 2014; Haveliwala, 2002). b) Water Burst Localization. In a water network, nodes denote deployed pressure sensor locations, and edges are pipe sections that connect the nodes. To determine the burst location, one needs to evaluate “proximities” of all pairs of sensor nodes first, and then compare all these “proximities” with the difference in the arrival times of the burst transient at sensor locations, to find the sensor node nearest to the burst event. (Srirangarajan and Pesch, 2013; Srirangarajan et al., 2013; Stoianov et al., 2007) Hence, the retrieval of all pairwise Co-Simran</context>
</contexts>
<marker>Li, Han, He, Jin, Sun, Yu, Wu, 2010</marker>
<rawString>Cuiping Li, Jiawei Han, Guoming He, Xin Jin, Yizhou Sun, Yintao Yu, and Tianyi Wu. 2010. Fast computation of SimRank for static and dynamic information networks. In Proceedings of the 13th International Conference on Extending Database Technology (EDBT 2010), pages 465–476.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Dmitry Lizorkin</author>
<author>Pavel Velikhov</author>
<author>Maxim N Grinev</author>
<author>Denis Turdakov</author>
</authors>
<title>Accuracy estimate and optimization techniques for SimRank computation.</title>
<date>2010</date>
<journal>The VLDB Journal (The International Journal on Very Large Data Bases),</journal>
<volume>19</volume>
<issue>1</issue>
<contexts>
<context position="4282" citStr="Lizorkin et al., 2010" startWordPosition="678" endWordPosition="681">ive way 327 Sk = cAT Sk−1A + I with S0 = I (4) Proceedings of the 53rd Annual Meeting of the Association for Computational Linguistics and the 7th International Joint Conference on Natural Language Processing (Short Papers), pages 327–333, Beijing, China, July 26-31, 2015. c�2015 Association for Computational Linguistics as both entail O(log(1/ǫ)n3) time to compute all pairs of Co-Simranks to attain desired accuracy ǫ. The complexity O(log(1/ǫ)n3) has two parts: The first part O(n3) is for matrix multiplications (ATSk_1A) at each step. A careful implementation, e.g., partial sums memoisation (Lizorkin et al., 2010) or fast matrix multiplications (Yu et al., 2012b),1 can optimise this part further to O(dn2) or O(nlog2 7), with d the average graph degree. The second part O(log(1/ǫ)) is the total number of steps required to guarantee a given accuracy ǫ, because, as implied by (Rothe and Sch¨utze, 2014), |Sk(a, b) − S(a, b) |c ck+1. ba, b, bk (5) To the best of our knowledge, there is a paucity of work on optimising the second part O(log(1/ǫ)). Yu et al. (2012b) used a successive over-relaxation (SOR) method to reduce the number of steps for Simrank, which is also applicable to Co-Simrank. However, this met</context>
</contexts>
<marker>Lizorkin, Velikhov, Grinev, Turdakov, 2010</marker>
<rawString>Dmitry Lizorkin, Pavel Velikhov, Maxim N. Grinev, and Denis Turdakov. 2010. Accuracy estimate and optimization techniques for SimRank computation. The VLDB Journal (The International Journal on Very Large Data Bases), 19(1):45–66.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Einat Minkov</author>
<author>William W Cohen</author>
</authors>
<title>Adaptive graph walk-based similarity measures for parsed text.</title>
<date>2014</date>
<journal>Natural Language Engineering,</journal>
<volume>20</volume>
<issue>3</issue>
<pages>397</pages>
<contexts>
<context position="1136" citStr="Minkov and Cohen, 2014" startWordPosition="162" endWordPosition="165">s study, we devise a model, Co-Simmate, to speed up the retrieval of all pairs of Co-Simranks to O(log2(log(1/ǫ))n3) time. Moreover, we show the optimality of Co-Simmate among other hop-(uk) variations, and integrate it with a matrix decomposition based method on singular graphs to attain higher efficiency. The viable experiments verify the superiority of Co-Simmate to others. 1 Introduction Many NLP applications require a pairwise graphbased similarity measure. Examples are bilingual lexicon extraction (Laws et al., 2010), sentiment analysis (Scheible and Sch¨utze, 2013), synonym extraction (Minkov and Cohen, 2014), named entity disambiguation (Alhelbawy and Gaizauskas, 2014), acronym expansion (Zhang et al., 2011). Recently, Co-Simrank (Rothe and Sch¨utze, 2014) becomes an appealing graph-theoretical similarity measure that integrates both features of Simrank (Jeh and Widom, 2002) and Pagerank (Berkhin, 2005). Co-Simrank works by weighing all the number of connections between two nodes to evaluate how similar two nodes are. The intuition behind Co-Simrank is that “more similar nodes are likely to be pointed to by other similar nodes”. Co-Simrank is defined in a recursive style: S = cAT SA + I, (1) wher</context>
</contexts>
<marker>Minkov, Cohen, 2014</marker>
<rawString>Einat Minkov and William W. Cohen. 2014. Adaptive graph walk-based similarity measures for parsed text. Natural Language Engineering, 20(3):361– 397.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sascha Rothe</author>
<author>Hinrich Sch¨utze</author>
</authors>
<title>CoSimRank: A flexible &amp; efficient graph-theoretic similarity measure.</title>
<date>2014</date>
<booktitle>In Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics (ACL 2014),</booktitle>
<pages>1392--1402</pages>
<marker>Rothe, Sch¨utze, 2014</marker>
<rawString>Sascha Rothe and Hinrich Sch¨utze. 2014. CoSimRank: A flexible &amp; efficient graph-theoretic similarity measure. In Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics (ACL 2014), pages 1392–1402.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Christian Scheible</author>
<author>Hinrich Sch¨utze</author>
</authors>
<title>Sentiment relevance.</title>
<date>2013</date>
<booktitle>In Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics (ACL</booktitle>
<pages>954--963</pages>
<marker>Scheible, Sch¨utze, 2013</marker>
<rawString>Christian Scheible and Hinrich Sch¨utze. 2013. Sentiment relevance. In Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics (ACL 2013), pages 954–963.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Seshan Srirangarajan</author>
<author>Dirk Pesch</author>
</authors>
<title>Source localization using graph-based optimization technique.</title>
<date>2013</date>
<booktitle>In IEEE Wireless Communications and Networking Conference (WCNC 2013),</booktitle>
<pages>1127--1132</pages>
<contexts>
<context position="3412" citStr="Srirangarajan and Pesch, 2013" startWordPosition="541" endWordPosition="544">ocument-pairs provides a comprehensive way to show where low and high relevance of pairwise documents may exist (Li et al., 2010; Yu et al., 2014; Haveliwala, 2002). b) Water Burst Localization. In a water network, nodes denote deployed pressure sensor locations, and edges are pipe sections that connect the nodes. To determine the burst location, one needs to evaluate “proximities” of all pairs of sensor nodes first, and then compare all these “proximities” with the difference in the arrival times of the burst transient at sensor locations, to find the sensor node nearest to the burst event. (Srirangarajan and Pesch, 2013; Srirangarajan et al., 2013; Stoianov et al., 2007) Hence, the retrieval of all pairwise Co-Simranks is very useful in many applications. Unfortunately, when it comes to all pairs computation of S(*, *), the way of (2) has no advantage over the naive way 327 Sk = cAT Sk−1A + I with S0 = I (4) Proceedings of the 53rd Annual Meeting of the Association for Computational Linguistics and the 7th International Joint Conference on Natural Language Processing (Short Papers), pages 327–333, Beijing, China, July 26-31, 2015. c�2015 Association for Computational Linguistics as both entail O(log(1/ǫ)n3) </context>
</contexts>
<marker>Srirangarajan, Pesch, 2013</marker>
<rawString>Seshan Srirangarajan and Dirk Pesch. 2013. Source localization using graph-based optimization technique. In IEEE Wireless Communications and Networking Conference (WCNC 2013), pages 1127– 1132.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Whittle</author>
</authors>
<title>Wavelet-based burst event detection and localization in water distribution systems.</title>
<date>2013</date>
<journal>Journal of Signal Processing Systems,</journal>
<volume>72</volume>
<issue>1</issue>
<marker>Whittle, 2013</marker>
<rawString>Seshan Srirangarajan, Michael Allen, Ami Preis, Mudasser Iqbal, HockBeng Lim, and AndrewJ. Whittle. 2013. Wavelet-based burst event detection and localization in water distribution systems. Journal of Signal Processing Systems, 72(1):1–16.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ivan Stoianov</author>
<author>Lama Nachman</author>
<author>Steve Madden</author>
<author>Timur Tokmouline</author>
<author>M Csail</author>
</authors>
<title>PIPENET: A wireless sensor network for pipeline monitoring.</title>
<date>2007</date>
<booktitle>In The 6th International Symposium on Information Processing in Sensor Networks (IPSN</booktitle>
<pages>264--273</pages>
<contexts>
<context position="3464" citStr="Stoianov et al., 2007" startWordPosition="549" endWordPosition="552">w and high relevance of pairwise documents may exist (Li et al., 2010; Yu et al., 2014; Haveliwala, 2002). b) Water Burst Localization. In a water network, nodes denote deployed pressure sensor locations, and edges are pipe sections that connect the nodes. To determine the burst location, one needs to evaluate “proximities” of all pairs of sensor nodes first, and then compare all these “proximities” with the difference in the arrival times of the burst transient at sensor locations, to find the sensor node nearest to the burst event. (Srirangarajan and Pesch, 2013; Srirangarajan et al., 2013; Stoianov et al., 2007) Hence, the retrieval of all pairwise Co-Simranks is very useful in many applications. Unfortunately, when it comes to all pairs computation of S(*, *), the way of (2) has no advantage over the naive way 327 Sk = cAT Sk−1A + I with S0 = I (4) Proceedings of the 53rd Annual Meeting of the Association for Computational Linguistics and the 7th International Joint Conference on Natural Language Processing (Short Papers), pages 327–333, Beijing, China, July 26-31, 2015. c�2015 Association for Computational Linguistics as both entail O(log(1/ǫ)n3) time to compute all pairs of Co-Simranks to attain d</context>
</contexts>
<marker>Stoianov, Nachman, Madden, Tokmouline, Csail, 2007</marker>
<rawString>Ivan Stoianov, Lama Nachman, Steve Madden, Timur Tokmouline, and M Csail. 2007. PIPENET: A wireless sensor network for pipeline monitoring. In The 6th International Symposium on Information Processing in Sensor Networks (IPSN 2007), pages 264–273.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Weiren Yu</author>
<author>Julie A McCann</author>
</authors>
<title>Sig-SR: SimRank search over singular graphs.</title>
<date>2014</date>
<booktitle>In Proceedings of the 37th ACM SIGIR International Conference on Research &amp; Development in Information Retrieval (SIGIR 2014),</booktitle>
<pages>859--862</pages>
<contexts>
<context position="5638" citStr="Yu and McCann (2014)" startWordPosition="906" endWordPosition="909">, Yu et al. (2015) propose an exponential model to speed up the convergence of Simrank: S0 = exp(−c) · I, d ¯St/dt = AT · S · A. However, S¯ and S do not produce the same results. Thus, this exponential model, if used to compute Co-Simrank, will lose some ranking accuracy. Contributions. In this paper, we propose an efficient method, Co-Simmate, that computes all pairs of Co-Simranks in just O(log2(log(1/ǫ))n3) time, without any compromise in accuracy. In addition, Co-Simmate is parameter-free, and easy to implement. It can also integrate the best-of-breed matrix decomposition based method by Yu and McCann (2014) to achieve even higher efficiency. 2 Co-Simmate Model First, we provide the main idea of Co-Simmate. We notice that Co-Simrank solution S in (1) is expressible as a matrix series: S = I + cATA + c2(AT)2A2 + c3(AT )3A3 + c4(AT )4A4 + ··· (6) The existing iterative method (4) essentially uses the following association to compute (6): �S = cAT � � �� � � � cAT �cAT A + I� A + I A + I + · · · (7) � �� � =S2 =S1 The downside of this association is that the resulting Sk_1 of the last step can be reused only once to compute Sk. Thus, after k iterations, Sk in (4) grasps only the first k-th partial s</context>
<context position="13119" citStr="Yu and McCann, 2014" startWordPosition="2415" endWordPosition="2418"> that |R(u) k (a, b) − S(a, b) |≤ cuk, ∀a, b, ∀u (16) Thus, given ǫ, the total number of steps for R(u) K is K = max{0, ⌈logu logc ǫ⌉ + 1}. For each step k, for hop-(uk) Co-Simmate R(u) k , (# of operations) = ((u − 1) + Eu−2 i=0 i)|0 |= (u−1)u 2 |0|. Therefore, the total time of computing R(u) kis O(max{0, ⌈logu logc ǫ⌉ + 1}(u − 1)u|0|). This complexity is increasing with u = 2, 3, · · · . Thus, Co-Simmate (8) (u = 2) is minimum. Incorporate Co-Simmate into Singular Graphs. Co-Simmate (9) can also be combined with other factorisation methods, e.g., Sig-SR, a Co-Simrank algorithm proposed by (Yu and McCann, 2014), to speed up all pairs of Co-Simrank computation from O(rn2 + Kr3) to O(rn2 + (log2K)r3) time further on a singular graph with rank r for K steps. The enhanced Sig-SR is shown in Algorithm 1. 3 Experiments 3.1 Experimental Settings Datasets. We use both real and synthetic datasets. Three real graphs (Twitter, Email, Facebook) are taken from SNAP (Leskovec and Sosiˇc, 2014). 1) Twitter is a who-follows-whom social graph crawled from the entire Twitter site. Each node is a user, and each edge represents a social relation. 2) Email is an Email communication network from Enron. If an address i se</context>
<context position="14598" citStr="Yu and McCann, 2014" startWordPosition="2663" endWordPosition="2666">etworks. The statistics of these datasets are as follows: Datasets # edges # nodes ave degree Twitter 1,768,149 81,306 21.70 Email 183,831 36,692 5.01 FB 88,234 4,039 21.84 To build synthetic data, we use Boost toolkit (Lee et al., 2001).We control the number of nodes n and edges m to follow densification power laws (Leskovec et al., 2005; Faloutsos et al., 1999). Baselines. We compare our Co-Simmate with 1) Ite-Mat (Rothe and Sch¨utze, 2014), a Co-Simrank method using the dot product of Pagerank vectors. 2) K-Sim (Kusumoto et al., 2014), a linearized method modified to Co-Simrank. 3) Sig-SR (Yu and McCann, 2014), a SVD Co-Simrank method. All experiments are on 64bit Ubuntu 14.04 with Intel Xeon E2650 2.0GHz CPU and 16GB RAM. 330 S= ǫ c = 0.6 c = 0.7 c = 0.8 SM SR SM SR SM SR 0.1 3 4 3 6 4 10 0.01 4 9 4 12 5 20 0.001 4 13 5 19 5 30 0.0001 5 18 5 25 6 41 0.00001 5 22 6 32 6 51 (c) Effect of Damping Factor c on Iterations k (on FB) Figure 2: Compare Co-Simmate with Baselines 3.2 Experimental Results Exp-I. Convergence Rate. We compare the number of steps k needed for Co-Simmate and CoSimrank (Ite-Mat) to attain a desired accuracy c on Twitter, Email, FB. The results on all the datasets are similar. Due </context>
</contexts>
<marker>Yu, McCann, 2014</marker>
<rawString>Weiren Yu and Julie A. McCann. 2014. Sig-SR: SimRank search over singular graphs. In Proceedings of the 37th ACM SIGIR International Conference on Research &amp; Development in Information Retrieval (SIGIR 2014), pages 859–862.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Weiren Yu</author>
<author>Julie A McCann</author>
</authors>
<title>Efficient partial-pairs SimRank search on large networks.</title>
<date>2015</date>
<booktitle>Proceedings of the VLDB Endowment (PVLDB 2015),</booktitle>
<pages>8--5</pages>
<contexts>
<context position="18360" citStr="Yu and McCann, 2015" startWordPosition="3349" endWordPosition="3352">ut their total time still grows. This is because, in each step, the cost of hop-(uk) Co-Simmate is increasing with u. Thus, the lowest cost is Co-Simmate when u = 2. 4 Conclusions We propose an efficient algorithm, Co-Simmate, to speed up all pairs Co-Simranks retrieval from 0(log(1/c)n3) to O(log2(log(1/c))n3) time, to attain a desired accuracy c. Besides, we integrate Co-Simmate with Sig-SR on singular graphs to attain higher efficacy. The experiments show that Co-Simmate can be 10.2x faster than the state-ofthe-art competitors. As future work, we will incorporate our partial-pairs Simrank (Yu and McCann, 2015) into partial-pairs Co-Simmate search. Acknowledgement. This research is supported by NEC Smart Water Network research project. 331 20 15 10 5 0 10−2 10−1 100 accuracy (ǫ) (a) Rate of Convergence (on FB dataset, c = 0.8) Time (sec) 106 104 102 Simmate Sig−SR Ite−Mat K−Sim Twitter Email FB (b) Total Computational Time (on three real datasets, c = 0.8) # of steps (k) Simmate Simrank n u (d) Scalability w.r.t. # nodes (e) Effect of Hop-(uk) (on 7 synthetic datasets) (on FB dataset, c = 0.8) Time (sec) 2500 2000 1500 1000 500 0 4K 5K 6K 7K 8K 9K 10K Simmate Simrank (Ite−Mat) Time (sec) 200 150 100</context>
</contexts>
<marker>Yu, McCann, 2015</marker>
<rawString>Weiren Yu and Julie A McCann. 2015. Efficient partial-pairs SimRank search on large networks. Proceedings of the VLDB Endowment (PVLDB 2015), 8(5):569–580.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Weiren Yu</author>
<author>Xuemin Lin</author>
<author>Wenjie Zhang</author>
<author>Ying Zhang</author>
<author>Jiajin Le</author>
</authors>
<title>SimFusion+: Extending SimFusion towards efficient estimation on large and dynamic networks.</title>
<date>2012</date>
<booktitle>In Proceedings of the 35th ACM SIGIR International Conference on Research &amp; Development in Information Retrieval (SIGIR 2012), 332</booktitle>
<pages>365--374</pages>
<contexts>
<context position="2466" citStr="Yu et al., 2012" startWordPosition="387" endWordPosition="390">and I is an identity matrix. The best-known method by (Rothe and Sch¨utze, 2014) computes a single element of S iteratively from a dot product (*, *) of two Pagerank vectors: Sk(a, b) = ck(pk(a), pk(b)) + Sk−1(a, b) (2) where pk(a) is a Pagerank vector, defined as pk(a) = AT pk−1(a) with p0(a) = I(*, a) (3) This method is highly efficient when only a small fraction of pairs of Co-Simranks need computing because there is no need to access the entire graph for computing only a single pair score. However, partial pairs retrieval is insufficient for many realworld applications (Zhou et al., 2009; Yu et al., 2012a; Zwick, 2002; Leicht et al., 2006) which require all-pairs scores. Let us look at two examples. a) Co-Citation Analysis. In a co-citation network, one wants to retrieve the relevance between any two given documents at any moment based on their references. To answer such an ad-hoc query, quantifying scores of all document-pairs provides a comprehensive way to show where low and high relevance of pairwise documents may exist (Li et al., 2010; Yu et al., 2014; Haveliwala, 2002). b) Water Burst Localization. In a water network, nodes denote deployed pressure sensor locations, and edges are pipe </context>
<context position="4330" citStr="Yu et al., 2012" startWordPosition="686" endWordPosition="689">ngs of the 53rd Annual Meeting of the Association for Computational Linguistics and the 7th International Joint Conference on Natural Language Processing (Short Papers), pages 327–333, Beijing, China, July 26-31, 2015. c�2015 Association for Computational Linguistics as both entail O(log(1/ǫ)n3) time to compute all pairs of Co-Simranks to attain desired accuracy ǫ. The complexity O(log(1/ǫ)n3) has two parts: The first part O(n3) is for matrix multiplications (ATSk_1A) at each step. A careful implementation, e.g., partial sums memoisation (Lizorkin et al., 2010) or fast matrix multiplications (Yu et al., 2012b),1 can optimise this part further to O(dn2) or O(nlog2 7), with d the average graph degree. The second part O(log(1/ǫ)) is the total number of steps required to guarantee a given accuracy ǫ, because, as implied by (Rothe and Sch¨utze, 2014), |Sk(a, b) − S(a, b) |c ck+1. ba, b, bk (5) To the best of our knowledge, there is a paucity of work on optimising the second part O(log(1/ǫ)). Yu et al. (2012b) used a successive over-relaxation (SOR) method to reduce the number of steps for Simrank, which is also applicable to Co-Simrank. However, this method requires a judicious choice of an internal p</context>
</contexts>
<marker>Yu, Lin, Zhang, Zhang, Le, 2012</marker>
<rawString>Weiren Yu, Xuemin Lin, Wenjie Zhang, Ying Zhang, and Jiajin Le. 2012a. SimFusion+: Extending SimFusion towards efficient estimation on large and dynamic networks. In Proceedings of the 35th ACM SIGIR International Conference on Research &amp; Development in Information Retrieval (SIGIR 2012), 332 pages 365–374.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Weiren Yu</author>
<author>Wenjie Zhang</author>
<author>Xuemin Lin</author>
<author>Qing Zhang</author>
<author>Jiajin Le</author>
</authors>
<title>A space and time efficient algorithm for SimRank computation.</title>
<date>2012</date>
<journal>World Wide Web,</journal>
<volume>15</volume>
<issue>3</issue>
<contexts>
<context position="2466" citStr="Yu et al., 2012" startWordPosition="387" endWordPosition="390">and I is an identity matrix. The best-known method by (Rothe and Sch¨utze, 2014) computes a single element of S iteratively from a dot product (*, *) of two Pagerank vectors: Sk(a, b) = ck(pk(a), pk(b)) + Sk−1(a, b) (2) where pk(a) is a Pagerank vector, defined as pk(a) = AT pk−1(a) with p0(a) = I(*, a) (3) This method is highly efficient when only a small fraction of pairs of Co-Simranks need computing because there is no need to access the entire graph for computing only a single pair score. However, partial pairs retrieval is insufficient for many realworld applications (Zhou et al., 2009; Yu et al., 2012a; Zwick, 2002; Leicht et al., 2006) which require all-pairs scores. Let us look at two examples. a) Co-Citation Analysis. In a co-citation network, one wants to retrieve the relevance between any two given documents at any moment based on their references. To answer such an ad-hoc query, quantifying scores of all document-pairs provides a comprehensive way to show where low and high relevance of pairwise documents may exist (Li et al., 2010; Yu et al., 2014; Haveliwala, 2002). b) Water Burst Localization. In a water network, nodes denote deployed pressure sensor locations, and edges are pipe </context>
<context position="4330" citStr="Yu et al., 2012" startWordPosition="686" endWordPosition="689">ngs of the 53rd Annual Meeting of the Association for Computational Linguistics and the 7th International Joint Conference on Natural Language Processing (Short Papers), pages 327–333, Beijing, China, July 26-31, 2015. c�2015 Association for Computational Linguistics as both entail O(log(1/ǫ)n3) time to compute all pairs of Co-Simranks to attain desired accuracy ǫ. The complexity O(log(1/ǫ)n3) has two parts: The first part O(n3) is for matrix multiplications (ATSk_1A) at each step. A careful implementation, e.g., partial sums memoisation (Lizorkin et al., 2010) or fast matrix multiplications (Yu et al., 2012b),1 can optimise this part further to O(dn2) or O(nlog2 7), with d the average graph degree. The second part O(log(1/ǫ)) is the total number of steps required to guarantee a given accuracy ǫ, because, as implied by (Rothe and Sch¨utze, 2014), |Sk(a, b) − S(a, b) |c ck+1. ba, b, bk (5) To the best of our knowledge, there is a paucity of work on optimising the second part O(log(1/ǫ)). Yu et al. (2012b) used a successive over-relaxation (SOR) method to reduce the number of steps for Simrank, which is also applicable to Co-Simrank. However, this method requires a judicious choice of an internal p</context>
</contexts>
<marker>Yu, Zhang, Lin, Zhang, Le, 2012</marker>
<rawString>Weiren Yu, Wenjie Zhang, Xuemin Lin, Qing Zhang, and Jiajin Le. 2012b. A space and time efficient algorithm for SimRank computation. World Wide Web, 15(3):327–353.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Weiren Yu</author>
<author>Xuemin Lin</author>
<author>Wenjie Zhang</author>
</authors>
<title>Fast incremental SimRank on link-evolving graphs.</title>
<date>2014</date>
<booktitle>In Proceedings of the 30th IEEE International Conference on Data Engineering (ICDE</booktitle>
<pages>304--315</pages>
<contexts>
<context position="2928" citStr="Yu et al., 2014" startWordPosition="464" endWordPosition="467"> computing only a single pair score. However, partial pairs retrieval is insufficient for many realworld applications (Zhou et al., 2009; Yu et al., 2012a; Zwick, 2002; Leicht et al., 2006) which require all-pairs scores. Let us look at two examples. a) Co-Citation Analysis. In a co-citation network, one wants to retrieve the relevance between any two given documents at any moment based on their references. To answer such an ad-hoc query, quantifying scores of all document-pairs provides a comprehensive way to show where low and high relevance of pairwise documents may exist (Li et al., 2010; Yu et al., 2014; Haveliwala, 2002). b) Water Burst Localization. In a water network, nodes denote deployed pressure sensor locations, and edges are pipe sections that connect the nodes. To determine the burst location, one needs to evaluate “proximities” of all pairs of sensor nodes first, and then compare all these “proximities” with the difference in the arrival times of the burst transient at sensor locations, to find the sensor node nearest to the burst event. (Srirangarajan and Pesch, 2013; Srirangarajan et al., 2013; Stoianov et al., 2007) Hence, the retrieval of all pairwise Co-Simranks is very useful</context>
</contexts>
<marker>Yu, Lin, Zhang, 2014</marker>
<rawString>Weiren Yu, Xuemin Lin, and Wenjie Zhang. 2014. Fast incremental SimRank on link-evolving graphs. In Proceedings of the 30th IEEE International Conference on Data Engineering (ICDE 2014), pages 304–315.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Weiren Yu</author>
<author>Xuemin Lin</author>
<author>Wenjie Zhang</author>
<author>Julie A McCann</author>
</authors>
<title>Fast all-pairs SimRank assessment on large graphs and bipartite domains.</title>
<date>2015</date>
<journal>IEEE Transactions on Knowledge and Data Engineering (TKDE),</journal>
<volume>27</volume>
<issue>7</issue>
<contexts>
<context position="5036" citStr="Yu et al. (2015)" startWordPosition="807" endWordPosition="810">ee. The second part O(log(1/ǫ)) is the total number of steps required to guarantee a given accuracy ǫ, because, as implied by (Rothe and Sch¨utze, 2014), |Sk(a, b) − S(a, b) |c ck+1. ba, b, bk (5) To the best of our knowledge, there is a paucity of work on optimising the second part O(log(1/ǫ)). Yu et al. (2012b) used a successive over-relaxation (SOR) method to reduce the number of steps for Simrank, which is also applicable to Co-Simrank. However, this method requires a judicious choice of an internal parameter (i.e., relaxation factor w), which is hard to determine a-priori. Most recently, Yu et al. (2015) propose an exponential model to speed up the convergence of Simrank: S0 = exp(−c) · I, d ¯St/dt = AT · S · A. However, S¯ and S do not produce the same results. Thus, this exponential model, if used to compute Co-Simrank, will lose some ranking accuracy. Contributions. In this paper, we propose an efficient method, Co-Simmate, that computes all pairs of Co-Simranks in just O(log2(log(1/ǫ))n3) time, without any compromise in accuracy. In addition, Co-Simmate is parameter-free, and easy to implement. It can also integrate the best-of-breed matrix decomposition based method by Yu and McCann (201</context>
</contexts>
<marker>Yu, Lin, Zhang, McCann, 2015</marker>
<rawString>Weiren Yu, Xuemin Lin, Wenjie Zhang, and Julie A. McCann. 2015. Fast all-pairs SimRank assessment on large graphs and bipartite domains. IEEE Transactions on Knowledge and Data Engineering (TKDE), 27(7):1810–1823.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Wei Zhang</author>
<author>Yan Chuan Sim</author>
<author>Jian Su</author>
<author>Chew Lim Tan</author>
</authors>
<title>Entity linking with effective acronym expansion, instance selection and topic modeling.</title>
<date>2011</date>
<booktitle>In Proceedings of the 22nd International Joint Conference on Artificial Intelligence (IJCAI</booktitle>
<pages>1909--1914</pages>
<contexts>
<context position="1238" citStr="Zhang et al., 2011" startWordPosition="176" endWordPosition="179">g(1/ǫ))n3) time. Moreover, we show the optimality of Co-Simmate among other hop-(uk) variations, and integrate it with a matrix decomposition based method on singular graphs to attain higher efficiency. The viable experiments verify the superiority of Co-Simmate to others. 1 Introduction Many NLP applications require a pairwise graphbased similarity measure. Examples are bilingual lexicon extraction (Laws et al., 2010), sentiment analysis (Scheible and Sch¨utze, 2013), synonym extraction (Minkov and Cohen, 2014), named entity disambiguation (Alhelbawy and Gaizauskas, 2014), acronym expansion (Zhang et al., 2011). Recently, Co-Simrank (Rothe and Sch¨utze, 2014) becomes an appealing graph-theoretical similarity measure that integrates both features of Simrank (Jeh and Widom, 2002) and Pagerank (Berkhin, 2005). Co-Simrank works by weighing all the number of connections between two nodes to evaluate how similar two nodes are. The intuition behind Co-Simrank is that “more similar nodes are likely to be pointed to by other similar nodes”. Co-Simrank is defined in a recursive style: S = cAT SA + I, (1) where S is the exact Co-Simrank matrix, A is the column-normalised adjacency matrix of the graph, c is a d</context>
</contexts>
<marker>Zhang, Sim, Su, Tan, 2011</marker>
<rawString>Wei Zhang, Yan Chuan Sim, Jian Su, and Chew Lim Tan. 2011. Entity linking with effective acronym expansion, instance selection and topic modeling. In Proceedings of the 22nd International Joint Conference on Artificial Intelligence (IJCAI 2011), pages 1909–1914.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yang Zhou</author>
<author>Hong Cheng</author>
<author>Jeffrey Xu Yu</author>
</authors>
<title>Graph clustering based on structural / attribute similarities.</title>
<date>2009</date>
<booktitle>Proceedings of the VLDB Endowment (PVLDB),</booktitle>
<pages>2--1</pages>
<contexts>
<context position="2449" citStr="Zhou et al., 2009" startWordPosition="383" endWordPosition="386">is a decay factor, and I is an identity matrix. The best-known method by (Rothe and Sch¨utze, 2014) computes a single element of S iteratively from a dot product (*, *) of two Pagerank vectors: Sk(a, b) = ck(pk(a), pk(b)) + Sk−1(a, b) (2) where pk(a) is a Pagerank vector, defined as pk(a) = AT pk−1(a) with p0(a) = I(*, a) (3) This method is highly efficient when only a small fraction of pairs of Co-Simranks need computing because there is no need to access the entire graph for computing only a single pair score. However, partial pairs retrieval is insufficient for many realworld applications (Zhou et al., 2009; Yu et al., 2012a; Zwick, 2002; Leicht et al., 2006) which require all-pairs scores. Let us look at two examples. a) Co-Citation Analysis. In a co-citation network, one wants to retrieve the relevance between any two given documents at any moment based on their references. To answer such an ad-hoc query, quantifying scores of all document-pairs provides a comprehensive way to show where low and high relevance of pairwise documents may exist (Li et al., 2010; Yu et al., 2014; Haveliwala, 2002). b) Water Burst Localization. In a water network, nodes denote deployed pressure sensor locations, an</context>
</contexts>
<marker>Zhou, Cheng, Yu, 2009</marker>
<rawString>Yang Zhou, Hong Cheng, and Jeffrey Xu Yu. 2009. Graph clustering based on structural / attribute similarities. Proceedings of the VLDB Endowment (PVLDB), 2(1):718–729.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Uri Zwick</author>
</authors>
<title>All pairs shortest paths using bridging sets and rectangular matrix multiplication.</title>
<date>2002</date>
<journal>Journal of the ACM (JACM),</journal>
<volume>49</volume>
<issue>3</issue>
<contexts>
<context position="2480" citStr="Zwick, 2002" startWordPosition="391" endWordPosition="392">ty matrix. The best-known method by (Rothe and Sch¨utze, 2014) computes a single element of S iteratively from a dot product (*, *) of two Pagerank vectors: Sk(a, b) = ck(pk(a), pk(b)) + Sk−1(a, b) (2) where pk(a) is a Pagerank vector, defined as pk(a) = AT pk−1(a) with p0(a) = I(*, a) (3) This method is highly efficient when only a small fraction of pairs of Co-Simranks need computing because there is no need to access the entire graph for computing only a single pair score. However, partial pairs retrieval is insufficient for many realworld applications (Zhou et al., 2009; Yu et al., 2012a; Zwick, 2002; Leicht et al., 2006) which require all-pairs scores. Let us look at two examples. a) Co-Citation Analysis. In a co-citation network, one wants to retrieve the relevance between any two given documents at any moment based on their references. To answer such an ad-hoc query, quantifying scores of all document-pairs provides a comprehensive way to show where low and high relevance of pairwise documents may exist (Li et al., 2010; Yu et al., 2014; Haveliwala, 2002). b) Water Burst Localization. In a water network, nodes denote deployed pressure sensor locations, and edges are pipe sections that </context>
</contexts>
<marker>Zwick, 2002</marker>
<rawString>Uri Zwick. 2002. All pairs shortest paths using bridging sets and rectangular matrix multiplication. Journal of the ACM (JACM), 49(3):289–317.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>