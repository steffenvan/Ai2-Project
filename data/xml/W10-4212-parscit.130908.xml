<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000084">
<title confidence="0.998884">
Charting the Potential of Description Logic
for the Generation of Referring Expressions
</title>
<author confidence="0.996112">
Yuan Ren and Kees van Deemter and Jeff Z. Pan
</author>
<affiliation confidence="0.887594333333333">
Department of Computing Science
University of Aberdeen
Aberdeen, UK
</affiliation>
<sectionHeader confidence="0.959102" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999931666666666">
The generation of referring expressions
(GRE), an important subtask of Natural
Language Generation (NLG) is to gener-
ate phrases that uniquely identify domain
entities. Until recently, many GRE algo-
rithms were developed using only simple
formalisms, which were taylor made for
the task. Following the fast development
of ontology-based systems, reinterpreta-
tions of GRE in terms of description logic
(DL) have recently started to be studied.
However, the expressive power of these
DL-based algorithms is still limited, not
exceeding that of older GRE approaches.
In this paper, we propose a DL-based ap-
proach to GRE that exploits the full power
of OWL2. Unlike existing approaches, the
potential of reasoning in GRE is explored.
</bodyText>
<note confidence="0.673967">
1 GRE and KR: the story so far
</note>
<bodyText confidence="0.985012980392157">
Generation of Referring Expressions (GRE) is the
subtask of Natural Language Generation (NLG)
that focuses on identifying objects in natural lan-
guage. For example, Fig.1 depicts the relations
between several women, dogs and cats. In such
a scenario, a GRE algorithm might identify d1 as
“the dog that loves a cat”, singling out d1 from
the five other objects in the domain. Reference
has long been a key issue in theoretical linguis-
tics and psycholinguistics, and GRE is a crucial
component of almost every practical NLG sys-
tem. In the years following seminal publications
such as (Dale and Reiter, 1995), GRE has be-
come one of the most intensively studied areas of
NLG, with links to many other areas of Cogni-
tive Science. After plan-based contributions (e.g.,
(Appelt, 1985)), recent work increasingly stresses
the human-likeness of the expressions generated
in simple situations, culminating in two evalua-
tion campaigns in which dozens of GRE algo-
rithms were compared to human-generated ex-
pressions (Belz and Gatt, 2008; Gatt et al., 2009).
Figure 1: An example in which edges from women
to dogs denote feed relations, from dogs to cats
denote love relations.
Traditional GRE algorithms are usually based
on very elementary, custom-made, forms of
Knowledge Representation (KR), which allow
little else than atomic facts (with negation of
atomic facts left implicit), often using a simple
(Attribute : Value) format, e.g (Type : Dog).
This is justifiable as long as the properties ex-
pressed by these algorithms are simple one-place
predicates (e.g., being a dog), but when logically
more complex descriptions are involved, the po-
tential advantages of “serious” KR become over-
whelming. (This point will become clearer in later
sections.) This realisation is now motivating a
modest new line of research which stresses logi-
cal and computational issues, asking what proper-
ties a KR framework needs to make it suitable to
generate all the referring expressions that people
can produce (and to generate them in reasonable
time). In this new line of work, which is proceed-
ing in tandem with the more empirically oriented
work mentioned above, issues of human-likeness
are temporarily put on the backburner. These and
other empirical issues will be brought to bear once
it is better understood what types of KR system are
best suitable for GRE, and what is the best way to
pursue GRE in them.
A few proposals have started to combine GRE
with KR. Following on from work based on la-
belled directed graphs (cf. (Krahmer et al., 2003))
– a well-understood mathematical formalism that
offers no reasoning support – (Croitoru and van
Deemter, 2007) analysed GRE as a projection
problem in Conceptual Graphs. More recently,
(Areces et al., 2008) analysed GRE as a problem in
Description Logic (DL), a formalism which, like
Conceptual Graphs, is specifically designed for
representing and reasoning with potentially com-
plex information. The idea is to produce a for-
mula such as Dog u ∃love.Cat (the set of dogs
intersected with the set of objects that love at least
one cat); this is, of course, a successful reference
if there exists exactly one dog who loves at least
one cat. This approach forms the starting point for
the present paper, which aims to show that when a
principled, logic based approach is chosen, it be-
comes possible to refer to objects which no exist-
ing approach to GRE (including that of Areces et
al.) has been able to refer to. To do this, we de-
viate substantially from these earlier approaches.
For example, while Areces et al. use one finite in-
terpretation for model checking, we consider arbi-
trary (possibly infinite) interpretations, hence rea-
soning support becomes necessary.
We shall follow many researchers in focussing
on the semantic core of the GRE problem: we
shall generate descriptions of semantic content,
leaving the decision of what words to use for ex-
pressing this content (e.g., ‘the ancient dog’, or
‘the dog which is old’) to later stages in the NLG
pipeline. Furthermore, we assume that all domain
objects are equally salient (Krahmer and Theune,
2002). As explained above, we do not consider
here the important matter of the naturalness or ef-
ficacy of the descriptions generated. We shall be
content producing uniquely referring expressions
whenever such expressions are possible, leaving
the choice of the optimal referring expression in
each given situation for later.
In what follows, we start by explaining how DL
has been applied in GRE before (Sec. 2) , point-
ing out the limitations of existing work. In Sec.3
we discuss which kinds of additional expressivity
are required and how they can be achieved through
modern DL. In Sec.4 we present a generic algo-
rithm to compute these expressive REs. Sec.5
concludes the paper by comparing its aims and
achievements with current practise in GRE.
</bodyText>
<sectionHeader confidence="0.99545" genericHeader="method">
2 DL for GRE
</sectionHeader>
<subsectionHeader confidence="0.999221">
2.1 Description Logics
</subsectionHeader>
<bodyText confidence="0.999451454545455">
Description Logic (DLs) come in different
flavours, based on decidable fragments of first-
order logic. A DL-based KB represents the
domain with descriptions of concepts, relations,
and their instances. DLs underpin the Web On-
tology Language (OWL), whose latest version,
OWL2 (Motik et al., 2008), is based on DL
SROIQ (Horrocks et al., 2006).
An SROIQ ontology E usually consists of a
TBox T and an ABox A. T contains a set of con-
cept inclusion axioms of the form C v D, relation
inclusion axioms such as R v S (the relation R is
contained in the relation S), R1 ◦ ... ◦ Rn v S,
and possibly more complex information, such as
the fact that a particular relation is functional, or
symmetric; A contains axioms about individuals,
e.g. a : C (a is an instance of C), (a, b) : R (a has
an R relation with b).
Given a set of atomic concepts, the entire set
of concepts expressible by SROIQ is defined re-
cursively. First, all atomic concepts are concepts.
Furthermore, if C and D are concepts, then so are
</bodyText>
<equation confidence="0.986772">
&gt;  |⊥  |¬C  |C u D  |C t D  |∃R.C  |∀R.C  |≤
nR.C  |≥ nR.C  |∃R.Self  |{a1, ... , an},
</equation>
<bodyText confidence="0.9897663">
where &gt; is the top concept, ⊥ the bottom con-
cept, n a non-negative integer number, ∃R.Self
the self-restriction ((i.e., the set of those x such
that (x, x) : R holds)), az individual names and
R a relation which can either be an atomic rela-
tion or the inverse of another relation (R−). We
call a set of individual names {a1, ... , an} a nom-
inal, and use CN, RN and IN to denote the set
of atomic concept names, relation names and indi-
vidual names, respectively.
An interpretation I is a pair hOI, ?i where OI
is a non-empty set and z is a function that maps
atomic concept A to AI ⊆ OI, atomic role r to
rI ⊆ OI × OI and individual a to aI ∈ OI.
The interpretation of complex concepts and ax-
ioms can be defined inductively based on their se-
mantics, e.g. (C u D)I = CI ∩ DI, etc.
I is a model of E, written I |= E, iff all the ax-
ioms in E are satisfied in I. It should be noted
that one E can have multiple models. For ex-
ample when T = ∅, A = {a : A t B}, there
can be a model I1 s.t. OI1 = {a}, aI1 =
a, AI1 = {a}, BI1 = ∅, and another model I2
s.t. OI2 = {a}, aI2 = a, BI2 = {a}, AI2 = ∅.
In other words, the world is open. For details, see
(Horrocks et al., 2006).
The possibly multiple models indicate that an
ontology is describing an open world. In GRE,
researchers usually impose a closed world. From
the DL point of view, people can (partially) close
the ontology with a DBox D (Seylan et al., 2009),
which is syntactically similar to the ABox, except
that D contains only atomic formulas. Further-
more, every concept or relation appearing in D
is closed. Its extension is exactly defined by the
contents of D, i.e. if D K a : A then a : -A,
thus is the same in all the models. The concepts
and relations not appearing in D can still remain
open. DL reasoning can be exploited to infer
implicit information from ontologies. For exam-
ple, given T = {Dog C ∃feed−.Woman} (ev-
ery dog is fed by some woman) and A = {d1 :
Dog, w1 : Woman}, we know that there must be
some Woman who feeds d1. When the domain
is closed as D = A we can further infer that this
Woman is w1 although there is no explicit rela-
tion between w1 and d1. Note that the domain Oz
in an interpretation of D is not fixed, but it includes
all the DBox individuals.
However, closing ontologies by means of the
DBox can restrict the usage of implicit knowledge
(from T). More precisely, the interpretations of
the concepts and relations appearing in D are fixed
therefore no implicit knowledge can be inferred.
To address this issue, we introduce the notion of
NBox to support Negation as Failure (NAF): Un-
der NAF, an ontology is a triple O = (T , A, N),
where T is a TBox, A an ABox and N is a subset
of CNorRN. We call N an NBox. NAF requires
that O satisfy the following conditions:
</bodyText>
<listItem confidence="0.9691192">
1. Let x E IN and A E N n CN. Then
(T , A) K x : A implies O |= x : -A.
2. Let x, y E IN and r E N n RN.
Then (T , A) K (x, y) : r implies O |=
(x, y) : -r.
</listItem>
<bodyText confidence="0.999874625">
Like the DBox approach, the NBox N defines
conditions in which “unknown” should be treated
as “failure”. But, instead of hard-coding this, it
specifies a vocabulary on which such treatment
should be applied. Different from the DBox ap-
proach, inferences on this NAF vocabulary is still
possible. An example of inferring implicit knowl-
edge with NAF will be shown in later sections.
</bodyText>
<subsectionHeader confidence="0.999041">
2.2 Background Assumptions
</subsectionHeader>
<bodyText confidence="0.997625">
When applying DL to GRE, people usually im-
pose the following assumptions.
</bodyText>
<listItem confidence="0.997856705882353">
• Individual names are not used in REs. For
example, “the Woman who feeds d1” would
be invalid, because d1 is a name. Names are
typically outlawed in GRE because, in many
applications, many objects do not have names
that readers/hearers would be familiar with.
• Closed World Assumption (CWA): GRE re-
searchers usually assume a closed world,
without defining what this means. As ex-
plained above, DL allows different interpre-
tations of the CWA. Our solution does not de-
pend on a specific definition of CWA. In what
follows, however, we use NAF to illustrate
our idea. Furthermore, the domain is usually
considered to be finite and consists of only
individuals appearing in A.
• Unique Name Assumption (UNA): Different
</listItem>
<bodyText confidence="0.995209928571429">
names denote different individuals. If, for
example, w1 and w2 may potentially be the
same woman, then we can not distinguish one
from the other.
We follow these assumptions when discussing ex-
isting works and presenting our approach. In ad-
dition, we consider the entire KB, including A,
T and N. It is also worth mentioning that, in
the syntax of SROIQ, negation of relations are
not allowed in concept expressions, e.g. you can-
not compose a concept ∃-feed.Dog. However,
if feed E N, then we can interpret (-feed)z =
Oz x Oz \ feedz. In the rest of the paper, we use
this as syntactic sugar.
</bodyText>
<subsectionHeader confidence="0.99561">
2.3 Motivation: DL Reasoning and GRE
</subsectionHeader>
<bodyText confidence="0.999973555555555">
Every DL concept can be interpreted as a set. If
the KB allows one to prove that this set is a sin-
gleton then the concept is a referring expression.
It is this idea (Gardent and Striegnitz, 2007) that
(Areces et al., 2008) explored. In doing so, they
say little about the TBox, appearing to consider
only the ABox, which contains only axioms about
instances of atomic concepts and relations. For ex-
ample, the domain in Fig.1 can be described as
</bodyText>
<equation confidence="0.99914">
KB1: T1 = ∅, Al = {w1 : Woman,
w2 : Woman, d1 : Dog, d2 : Dog,
c1 : Cat, c2 : Cat, (w1, d1) : feed,
(w2, d1) : feed, (w2, d2) : feed,
(d1, c1) : love}
</equation>
<bodyText confidence="0.999977833333333">
Assuming that this represents a Closed World,
Areces et al. propose an algorithm that is able
to generate descriptions by partitioning the do-
main.1 More precisely, the algorithm first finds
out which objects are describable through increas-
ingly large conjunctions of (possibly negated)
atomic concepts, then tries to extend these con-
junctions with complex concepts of the form
(¬)∃R1.Concept, then with concepts of the form
(¬)∃R2.(Concept u (¬)∃R1.Concept), and so
on. At each stage, only those concepts that have
been acceptable through earlier stages are used.
Consider, for instance, KB1 above. Regardless of
what the intended referent is, the algorithm starts
partitioning the domain stage by stage as follows.
Each stage makes use of all previous stages. Dur-
ing stage (3), e.g., the object w2 could only be
identified because d2 was identified in stage (2):
</bodyText>
<equation confidence="0.651006">
1. Dog = {d1, d2},
¬Dog u Woman = {w1, w2},
¬Dog u ¬Woman = {c1, c2}.
</equation>
<listItem confidence="0.991989666666667">
2. Dog u ∃love.(¬Dog u ¬Woman) = {d1},
Dog u¬∃love.(¬Dog u¬Woman) = {d2}.
3. (¬Dog u Woman) u ∃feed.(Dog u
¬∃love.(¬Dog u ¬Woman)) = {w2},
(¬Dog u Woman) u ¬∃feed.(Dog u
¬∃love.(¬Dog u ¬Woman)) = {w1}.
</listItem>
<bodyText confidence="0.999443933333333">
As before, we disregard the important question
of the quality of the descriptions generated, other
than whether they do or do not identify a given
referent uniquely. Other aspects of quality depend
in part on details, such as the question in which
order atomic concepts are combined during phase
(1), and analogously during later phases.
However this approach does not extend the ex-
pressive power of GRE. This is not because of
some specific lapse on the part of the authors: it
seems to have escaped the GRE community as a
whole that relations can enter REs in a variety of
alternative ways.
Furthermore, the above algorithm considers
only the ABox, therefore background information
</bodyText>
<footnote confidence="0.922304166666667">
1Areces et al. (Areces et al., 2008) consider several DL
fragments (e.g., AGC and EG). Which referring expressions
are expressible, in their framework, depends on which DL
fragment is chosen. Existential quantification, however, is
the only quantifier that was used, and inverse relations are
not considered.
</footnote>
<bodyText confidence="0.983929625">
will not be used. It follows that the domain al-
ways has a fixed single interpretation/model. Con-
sequently the algorithm essentially uses model-
checking, rather than full reasoning. We will
show that when background information is in-
volved, reasoning has to be taken into account.
For example, suppose we extend Fig.1 with back-
ground (i.e., TBox) knowledge saying that one
should always feed any animal loved by an ani-
mal whom one is feeding, while also adding a love
edge (Fig.2) between d2 and c2:
Figure 2: An extended example of Fig.1. Edges
from women to cats denote feed relations.
Dashed edges denote implicit relations.
If we close the domain with NAF, the ontology
can be described as follows:
</bodyText>
<equation confidence="0.96986">
KB2: T2 = {feed ◦ love v feed},
A2 = A1 ∪ {(d2, c2) : love}, N2 =
{Dog, Woman, feed, love}
</equation>
<bodyText confidence="0.967720928571428">
The TBox axiom enables the inference of implicit
facts: the facts (w1, c2) : feed, (w2, c1) : feed,
and (w2, c2) : feed can be inferred using DL rea-
soning under the above NBox N2. Axioms of this
kind allow a much more natural, insightful and
concise representation of information than would
otherwise be possible.
Continuing to focus on the materialised KB2,
we note another limitation of existing works: if
only existential quantifiers are used then some ob-
jects are unidentifiable (i.e., it is not possible to
distinguish them uniquely). These objects would
become identifiable if other quantifiers and inverse
relations were allowed. For example,
</bodyText>
<listItem confidence="0.983609166666667">
• The cat which is fed by at least 2 women =
Catu ≥ 2feed−.Woman = {c1},
• The woman feeding only those fed by at
least 2 women = Woman u ∀feed. ≥
2.feed−.Woman = {w1},
• The woman who feeds all the dogs = {w2}.
</listItem>
<bodyText confidence="0.979992">
It thus raises the question: which quantifiers
would it be natural to use in GRE, and how might
DL realise them?
</bodyText>
<sectionHeader confidence="0.990113" genericHeader="method">
3 Beyond Existential Descriptions
</sectionHeader>
<bodyText confidence="0.999982833333333">
In this section, we show how more expressive DLs
can make objects referable that were previously
unreferable. This will amount to a substantial re-
formulation which allows the approach based on
DL reasoning to move well beyond other GRE al-
gorithms in its expressive power.
</bodyText>
<subsectionHeader confidence="0.999753">
3.1 Expressing Quantifiers in OWL2
</subsectionHeader>
<bodyText confidence="0.994475151515151">
Because the proposal in (Areces et al., 2008) uses
only existential quantification, it fails to identify
any individual in Fig.2. Before filling this gap,
we pause to ask what level of expressivity ought
to be achieved. In doing so, we make use of
a conceptual apparatus developed in an area of
formal semantics and mathematical logic known
as the theory of Generalized Quantifiers (GQ),
where quantifiers other than all and some are stud-
ied (Mostowski, 1957). The most general format
for REs that involves a relation R is, informally,
the N1 who R Q N2’s, where N1 and N2
denote sets, R denotes a relation, and Q a gener-
alized quantifier. (Thus for example the women
who feed SOME dogs.) An expression of this
form is a unique identifying expression if it corre-
sponds to exactly one domain element. Using a
set-theoretic notation, this means that the follow-
ing set has a cardinality of 1:
{y ∈ N1 : Qx ∈ N2  |Ryx}
where Q is a generalized quantifier. For example,
if Q is the existential quantifier, while N1 denotes
the set of women, N2 the set of dogs, and R the
relation of feeding, then this says that the number
of women who feed SOME dog is one. If Q is the
quantifier at least two, then it says that the num-
ber of women who feed at least two dogs is one.
It will be convenient to write the formula above
in the standard GQ format where quantifiers are
cast as relations between sets of domain objects
A, B. Using the universal quantifier as an exam-
ple, instead of writing ∀x ∈ A  |x ∈ B, we write
∀(AB). Thus, the formula above is written
</bodyText>
<equation confidence="0.478114">
{y ∈ N1 : Q(N2{z : Ryz)}}.
</equation>
<bodyText confidence="0.998646434782609">
Instantiating this as before, we get {y ∈ Woman :
∃(Dog{z : Feed yz)}}, or “women who feed a
dog”, where Q is ∃, A = Dog and B = {z :
Feed yz} for some y.
Mathematically characterising the class of all
quantifiers that can be expressed in referring
expressions is a complex research programme
to which we do not intend to contribute here,
partly because this class includes quantifiers that
are computationally problematic; for example, a
quantifiers such as most (in the sense of more than
50%), which is not first-order expressible, as is
well known.
To make transparent which quantifiers are ex-
pressible in the logic that we are using, let us think
of quantifiers in terms of simple quantitative con-
straints on the sizes of the sets A ∩ B, A − B, and
B − A, as is often done in GQ theory, asking what
types of constraints can be expressed in referring
expressions based on SROIQ. The findings are
summarised in Tab.1. OWL2 can express any of
the following types of descriptions, plus disjunc-
tions and conjunctions of anything it can express.
</bodyText>
<tableCaption confidence="0.999543">
Table 1: Expressing GQ in DL
</tableCaption>
<figure confidence="0.993292">
QAB DL
1 ≥ nN2{z : Ryz} y :≥ nR.N2
2 ≥ nN2¬{z : Ryz} y :≥ n¬R.N2
3 ≥ n¬N2{z : Ryz} y :≥ nR.¬N2
4 ≥ n¬N2¬{z : Ryz} y :≥ n¬R.¬N2
5 ≤ nN2{z : Ryz} y :≤ nR.N2
6 ≤ nN2¬{z : Ryz} y :≤ n¬R.N2
7 ≤ n¬N2{z : Ryz} y :≤ nR.¬N2
8 ≤ n¬N2¬{z : Ryz} y :≤ n¬R.¬N2
</figure>
<bodyText confidence="0.998746833333333">
When n = 1, for example, type 1 becomes
∃R.N2, i.e. the existential quantifier. When n = 0
type 7 becomes ∀R.N2, i.e. the quantifier only.
When n = 0 type 6 becomes ∀¬R.¬N2, i.e. the
quantifier all. In types 2, 4, 6 and 8, negation of
a relation is used. This is not directly supported
in SROIQ but, as we indicated earlier, given
R ∈ N, ¬R can be used in concepts.
Together, this allows the expression of a de-
scription such as “women who feed at least one
but at most 7 dogs”, by conjoining type 1 (with
n = 1) with type 5 (with n = 7). Using nega-
tion, it can say “women who do not feed all dogs
and who feed at least one non-dog” (Woman u
¬∀¬Feed.¬Dog u ∃Feed.¬Dog). In addition
to Tab.1, SROIQ can even represent reflexive
relation such as “the dog who loves itself” by
Dog u ∃love.Self, which was regarded infeasible
in (Gardent and Striegnitz, 2007).
Comparing the quantifiers that become express-
ible through OWL2’s apparatus with classes of
quantifiers studied in the theory of GQ, it is clear
that OWL2 is highly expressive: it does not only
include quantifiers expressible in the binary tree
of numbers, e.g. (van Benthem, 1986) – which is
generally regarded as highly general – but much
else besides. Even wider classes of referring ex-
pressions can certainly be conceived, but these are
not likely to have overwhelming practical utility in
today’s NLG applications.
</bodyText>
<sectionHeader confidence="0.906617" genericHeader="method">
4 Generating SROIQ-enabled REs
</sectionHeader>
<bodyText confidence="0.999978818181818">
In this section, we present an algorithm that com-
putes the descriptions discussed in sect.3. A GRE
algorithm should have the following behaviour: if
an entity is distinguishable from all the others, the
algorithm should find a unique description; oth-
erwise, the algorithm should say there exists no
unique description. In this paper, we follow Are-
ces et al.’s strategy of generating REs for all ob-
jects simultaneously, but we apply it to a much
larger search space, because many more constructs
are taken into account.
</bodyText>
<subsectionHeader confidence="0.970784">
4.1 GROWL: an algorithm for Generating
</subsectionHeader>
<bodyText confidence="0.990764363636364">
Referring expressions using OWL-2.
In this section we show how the ideas of pre-
vious sections can be implemented. To do this,
we sketch an algorithm scheme called GROWL.
GROWL applies a generate-and-test strategy that
composes increasingly complicated descriptions
and uses DL reasoning to test whether a de-
scription denotes a singleton w.r.t. the KB. To
avoid considering unnecessarily complicated de-
scriptions, the algorithm makes use of the (syntac-
tic) depth of a description, defined as follows:
</bodyText>
<construct confidence="0.6346325">
Definition 1 (Depth) Given a description d, its
depth |d |is calculated as follows:
</construct>
<listItem confidence="0.874541">
1. |d |= 1 for d := &gt;|⊥|A|¬A, where A is
atomic.
2. |d u d0 |= |d t d0 |= max(|d|, |d0|) + 1.
3. |∃r.d |= |∀r.d |=  |≤ nr.d |=  |≥ nr.d |=
 |= nr.d |= |d |+ 1.
</listItem>
<bodyText confidence="0.9997732">
Different descriptions can mean the same of
course, e.g. ¬∀R.A ≡ ∃R.¬A. We do not know
which syntactic variant should be used but focus,
for simplicity, on generating their unique negated
normal form (NNF). The NNF of a formula 0
can be obtained by pushing all the ¬ inward un-
til only before atomic concepts (including &gt; and
⊥), atomic relations, nominals or self restrictions
(e.g. ∃r.Self). Without loss of generality, in what
follows we assume all the formulas are in their
NNF. To avoid confusion, the NNF of negation
of a formula 0 is denoted by —0 instead of ¬0.
For example —(A t B) = ¬A u ¬B if A and B
are atomic. Obviously, —(—A) = A, —(—R) = R,
(R−)− = R, and (—R)− =—R−. The use of NNF
substantially reduces the redundancies generated
by the algorithm. For example, we won’t generate
both ¬∀R.A and ∃R.¬A but only the later.
Given an ontology E, we initialise GROWL
with the following sets:
</bodyText>
<listItem confidence="0.884758846153846">
1. The relation name set RN is the minimal set
satisfying:
• if R is an atomic relation in E, then R ∈
RN;
• if R ∈ RN, then —R ∈ RN;
• if R ∈ RN, then R− ∈ RN;
2. The concept name set CN is the minimal set
satisfying:
• &gt; ∈ CN;
• if A is an atomic concept in E, then A ∈
CN;
• if R ∈ RN, then ∃R.Self ∈ CN;
• if A ∈ CN, then —A ∈ CN;
3. The natural number set N contains
1, 2, ... , n where n is the number of
individuals in E.
4. The construct set S contains all the con-
structs supported by a particular language.
For SROIQ, S = {¬, u, t,∃, ∀, ≤, ≥, =}.
We assume here that nominals are disallowed
(cf. sect.2).
Algorithm GROWL:
Construct − description(E, CN, RN, N, S)
INPUT: E, CN, RN, N, S
OUTPUT: Description Queue D
1: D := ∅
2: fore ∈ CN do
3: D := Add(D, e)
4: for d = fetch(D) do
5: for each s ∈ S do
6: if s = u or s = t then
7: for each d0 ∈ D do
8: D := Add(D, d s d0)
9: if s = ∃ or s = ∀ then
10: for each r E RN do
11: D := Add(D, s r.d)
12: ifs=&lt;ors=&gt;orsis =then
13: for each r E RN, each k E N do
14: D := Add(D, s k r.d)
15: return D
Algorithm ADD:Add(D, e)
INPUT: D, e
OUTPUT: (Extended) Description Queue D
1: for d E D do
2: if |d |&lt; |e |and d CE e then
3: return D
4: else if |d |= |e |and d CE e and e n -,d is
satisfiable then
5: return D
6: if e is satisfiable in E then
7: D:=DUfel
8: return D
</listItem>
<bodyText confidence="0.996248602409639">
GROWL takes an ontology E as its input and
output a queue D of descriptions by adding in-
creasingly complex concepts e to D, using the
function Add(D, e), which is implemented as the
algorithm ADD. Because of the centrality of ADD
we start by explaining how this function works.
In the simple algorithm we are proposing in this
paper – which represents only one amongst many
possibilities – addition is governed by the heuris-
tic that more complex descriptions should have
smaller extensions. To this end, a candidate de-
scription e is compared with each existing descrip-
tion d E D. Step 2 ensures that if there exists a
simpler description d (|d |&lt; |e|) whose extension
is no larger than e (d CE e), then e is not added
into D (because the role of e can be taken by the
simpler description d). Similarly, step 4 ensures
that if there exists d with same depth (|d |= |e|)
but smaller extension (d CE e and e n -,d is satis-
fiable), then e should not be added into D. The
subsumption checking in Step 2 and 4, and the
instance retrieval in Step 6, must be realised by
DL reasoning, in which TBox, ABox and NBox
must all be taken into account. ADD guaran-
tees that when the complexity of descriptions in-
creases, their extensions are getting smaller.
We now turn to the main algorithm, GROWL. In
Step 1 of this algorithm, D is initialised to 0. Steps
2 to 3 add all satisfiable elements of CN to D.
From Steps 4 to 14, we recursively “process” ele-
ments of D one by one, by which we mean that the
constructors in 5 are employed to combine these
elements with other elements of D (e.g., an ele-
ment is intersected with all other elements, and so
on). We use fetch(D) to retrieve the first unpro-
cessed element of D. New elements are added to
the end of D. Thus D is a first-come-first-served
queue (note that processed elements are not re-
moved from D).
To see in more detail how elements of D are
processed, consider Steps 5-14 once again. For
each element d of D, Step 5 uses a construct s to
extend it:
1. If s is n or U, in Step 7 and 8, we extend d
with each element of D and add new descrip-
tions to D.
2. If s is I or b, in Step 10 and 11, we extend
d with all relations of RN and add new de-
scriptions to D. In Areces et el.’s work, b is
also available when using -, and I together,
however due to their algorithm they can never
generates descriptions like br.A.
3. If s is &lt;, &gt; or =, in Step 13 and 14, we ex-
tend d with all relations in RN and all num-
bers in N, and add new descriptions to D.
Because the = construct can be equivalently
substituted by the combination of &lt;, &gt; and n
constructs (= kr.d is semantically equivalent
to &gt; kr.dn &lt; kr.d), it is a modelling choice
to use either &lt;, &gt;, or only =, or all of them.
In this algorithm we use them all.
Because we compute only the NNF and we
disallow the use of individual identifiers, nega-
tion -, appears only in front of atomic concept
names. For this reason, processing does not con-
sider s = -,. Note that GROWL leaves some
important issues open. In particular, the or-
der in which constructs, relations, integers and
conjuncts/disjuncts are chosen is left unspecified.
Note that D, RN, N, 5 are all assumed to be fi-
nite, hence Steps 5 to 14 terminate for a given
d E D. Because Steps 5 to 14 generate descrip-
tions whose depth increases with one constructor
at a time, there are finitely many d E D such that
|d |= n (for a given n).
GROWL extends the algorithm presented by
Areces et al. The example in Fig.2 shows that
many referring expressions generated by our algo-
rithm cannot be generated by our predecessors; in
fact, some objects that are not referable for them
are referable by GROWL. For example, if we ap-
ply the algorithm to the KB in Fig.2, a possible
solution is as follows:
</bodyText>
<listItem confidence="0.98764275">
1. {w1} = Womann∃¬feed.Cat, the woman
that does not feed all cats.
2. {w2} =&lt; 0¬feed.Cat , the woman that
feeds all cats.
3. {d1} = Dogn &lt; 0¬feed−.Woman, the
dog that is fed by all women.
4. {d2} = Dog n ∃¬feed−.Woman, the dog
that is not fed by all women.
5. {c1} = Catn &lt; 0¬feed−.Woman, the cat
that is fed by all women.
6. {c2} = Cat n ∃¬feed−.Woman, the cat
that is not fed by all women.
</listItem>
<bodyText confidence="0.999961125">
It is worth reiterating here that our algorithm fo-
cusses on finding uniquely referring expressions,
leaving aside which of all the possible ways in
which an object can be referred to is “best”. For
this reason, empirical validation of our algorithm
– a very sizable enterprise in itself, which should
probably be based on descriptions elicited by hu-
man speakers – is not yet in order.
</bodyText>
<subsectionHeader confidence="0.823101">
4.2 Discussion
</subsectionHeader>
<bodyText confidence="0.82094375">
Let us revisit the basic assumptions of Sec.2.2, to
see what can be achieved if they are abandoned.
1. In natural language, people do using names,
e.g. “the husband of Marie Curie”. To allow
REs of this kind, we can extend our Algo-
rithm A-1 by including singleton classes such
as {Maria Curie} in CN.
2. Traditional GRE approaches have always as-
sumed a single model with complete knowl-
edge. Without this assumption, our approach
can still find interesting REs. For example,
if a man’s nationality is unknown, but he is
known to be the Chinese or Japanese, we can
refer to him/her as Chinese U Japanese.
However, models should be finite to guaran-
tee that N is finite.
3. Individuals with multiple names. DL im-
poses the UNA by explicitly asserting the
inequality of each two individuals. With-
out UNA, reasoning can still infer some re-
sults, e.g. {Woman n Man C L, David :
Man, May: Woman} |= David =� May.
Thus we can refer to David as “the man” if
the domain is closed.
</bodyText>
<sectionHeader confidence="0.960402" genericHeader="method">
5 Widening the remit of GRE
</sectionHeader>
<bodyText confidence="0.999997162790698">
This paper has shown some of the benefits that
arise when the power of KR is brought to bear
on an important problem in NLG, namely the gen-
eration of referring expressions (GRE). We have
done this by using DL as a representation and
reasoning formalism, extending previous work in
GRE in two ways. First, we have extended GRE
by allowing the generation of REs that involve
quantifiers other than ∃. By relating our algo-
rithm to the theory of Generalised Quantifiers, we
were able to formally characterise the set of quan-
tifiers supported by our algorithm, making exact
how much expressive power we have gained. Sec-
ondly, we have demonstrated the benefits of im-
plicit knowledge through inferences that exploit
TBox-information, thereby allowing facts to be
represented more efficiently and elegantly, and al-
lowing GRE to tap into kinds of generic (as op-
posed to atomic) knowledge that it had so far left
aside, except for hints in (Gardent and Striegnitz,
2007) and in (Croitoru and van Deemter, 2007).
Thirdly, we have allowed GRE to utilise incom-
plete knowledge, as when we refer to someone as
“the man of Japanese or Chinese nationality”.
Current work on reference is overwhelmingly
characterised by an emphasis on empirical accu-
racy, often focussing on very simple referring ex-
pressions, which are constituted by conjunctions
of 1-place relations (as in “the grey poodle”), and
asking which of these conjunctions are most likely
to be used by human speakers (or which of these
would be most useful to a human hearer). The
present work stresses different concerns: we have
focussed on questions of expressive power, fo-
cussing on relatively complex descriptions, asking
what referring expressions are possible when re-
lations between domain objects are used. We be-
lieve that, at the present stage of work in GRE, it
is of crucial importance to gain insight into ques-
tions of this kind, since this will tell us what types
of reference are possible in principle. Once such
insight, we hope to explore how the newly gained
expressive power can be put to practical use.
</bodyText>
<sectionHeader confidence="0.994347" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999058914893617">
Douglas Appelt. 1985. Planning English Sentences.
Cambridge University Press, Cambridge, UK.
Carlos Areces, Alexander Koller, and Kristina Strieg-
nitz. 2008. Referring expressions as formulas of
description logic. In Proceedings of the 5th INLG,
Salt Fork, Ohio.
Anja Belz and Albert Gatt. 2008. Intrinsic vs. extrinsic
evaluation measures for referring expression gener-
ation. In HLT ’08: Proceedings of the 46th Annual
Meeting of the Association for Computational Lin-
guistics on Human Language Technologies, pages
197–200.
Madalina Croitoru and Kees van Deemter. 2007. A
conceptual graph approach to the generation of re-
ferring expressions. In Proceedings of the 20th IJ-
CAI.
Robert Dale and Ehud Reiter. 1995. Computational in-
terpretations of the gricean maxims in the generation
of referring expressions. CoRR, cmp-lg/9504020.
Claire Gardent and Kristina Striegnitz. 2007. Gen-
erating bridging definite descriptions. Computing
Meaning, 3:369–396.
Albert Gatt, Anja Belz, and Eric Kow. 2009. The
TUNA-REG Challenge 2009: Overview and eval-
uation results. In Proceedings of the 12th ENLG
(ENLG 2009), pages 174–182, Athens, Greece,
March. Association for Computational Linguistics.
Ian Horrocks, Oliver Kutz, and Ulrike Sattler. 2006.
The Even More Irresistible SROIQ. In KR 2006.
Emiel Krahmer and Mariet Theune. 2002. Efficient
context-sensitive generation of descriptions in con-
text. Information Sharing: Givenness and Newness
in Language, pages 223–264.
Emiel Krahmer, Sebastiaan van Erk, and Andr Verleg.
2003. Graph-based generation of referring expres-
sions. Computational Linguistics, 29(1):53–72.
A Mostowski. 1957. On a generalization of quanti-
fiers. Fund. Math., 44:235–273.
Boris Motik, Bernardo Cuenca Grau, Ian Horrocks,
Zhe Wu, Achille Fokoue, and Carsten Lutz. 2008.
Owl 2 web ontology language: Profiles. W3c work-
ing draft, W3C, October.
Inanc¸ Seylan, Enrico Franconi, and Jos de Bruijn.
2009. Effective query rewriting with ontologies over
dboxes. In IJCAI 2009.
Johan van Benthem. 1986. Essays in Logical Seman-
tics. Reidel.
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.000096">
<title confidence="0.999818">Charting the Potential of Description for the Generation of Referring Expressions</title>
<author confidence="0.989896">Ren van_Deemter Z</author>
<affiliation confidence="0.9997485">Department of Computing University of</affiliation>
<address confidence="0.894933">Aberdeen, UK</address>
<abstract confidence="0.995829878326996">The generation of referring expressions (GRE), an important subtask of Natural Language Generation (NLG) is to generate phrases that uniquely identify domain entities. Until recently, many GRE algorithms were developed using only simple formalisms, which were taylor made for the task. Following the fast development of ontology-based systems, reinterpretations of GRE in terms of description logic (DL) have recently started to be studied. However, the expressive power of these DL-based algorithms is still limited, not exceeding that of older GRE approaches. In this paper, we propose a DL-based approach to GRE that exploits the full power of OWL2. Unlike existing approaches, the potential of reasoning in GRE is explored. 1 GRE and KR: the story so far Generation of Referring Expressions (GRE) is the subtask of Natural Language Generation (NLG) that focuses on identifying objects in natural language. For example, Fig.1 depicts the relations between several women, dogs and cats. In such scenario, a GRE algorithm might identify dog that loves a cat”, singling out the five other objects in the domain. Reference has long been a key issue in theoretical linguistics and psycholinguistics, and GRE is a crucial component of almost every practical NLG system. In the years following seminal publications such as (Dale and Reiter, 1995), GRE has become one of the most intensively studied areas of NLG, with links to many other areas of Cognitive Science. After plan-based contributions (e.g., (Appelt, 1985)), recent work increasingly stresses the human-likeness of the expressions generated simple situations, culminating in two evaluation campaigns in which dozens of GRE algorithms were compared to human-generated expressions (Belz and Gatt, 2008; Gatt et al., 2009). Figure 1: An example in which edges from women dogs denote from dogs to cats Traditional GRE algorithms are usually based on very elementary, custom-made, forms of Knowledge Representation (KR), which allow little else than atomic facts (with negation of atomic facts left implicit), often using a simple e.g This is justifiable as long as the properties expressed by these algorithms are simple one-place predicates (e.g., being a dog), but when logically more complex descriptions are involved, the potential advantages of “serious” KR become overwhelming. (This point will become clearer in later sections.) This realisation is now motivating a modest new line of research which stresses logical and computational issues, asking what properties a KR framework needs to make it suitable to generate all the referring expressions that people can produce (and to generate them in reasonable time). In this new line of work, which is proceeding in tandem with the more empirically oriented work mentioned above, issues of human-likeness are temporarily put on the backburner. These and other empirical issues will be brought to bear once it is better understood what types of KR system are best suitable for GRE, and what is the best way to pursue GRE in them. A few proposals have started to combine GRE with KR. Following on from work based on labelled directed graphs (cf. (Krahmer et al., 2003)) – a well-understood mathematical formalism that offers no reasoning support – (Croitoru and van 2007) analysed GRE as a problem in Conceptual Graphs. More recently, (Areces et al., 2008) analysed GRE as a problem in Description Logic (DL), a formalism which, like Conceptual Graphs, is specifically designed for representing and reasoning with potentially complex information. The idea is to produce a forsuch as set of dogs intersected with the set of objects that love at least one cat); this is, of course, a successful reference there exists one who loves at least one cat. This approach forms the starting point for the present paper, which aims to show that when a principled, logic based approach is chosen, it becomes possible to refer to objects which no existing approach to GRE (including that of Areces et al.) has been able to refer to. To do this, we deviate substantially from these earlier approaches. For example, while Areces et al. use one finite interpretation for model checking, we consider arbitrary (possibly infinite) interpretations, hence reasoning support becomes necessary. We shall follow many researchers in focussing on the semantic core of the GRE problem: we shall generate descriptions of semantic content, leaving the decision of what words to use for expressing this content (e.g., ‘the ancient dog’, or ‘the dog which is old’) to later stages in the NLG pipeline. Furthermore, we assume that all domain objects are equally salient (Krahmer and Theune, 2002). As explained above, we do not consider here the important matter of the naturalness or efficacy of the descriptions generated. We shall be content producing uniquely referring expressions whenever such expressions are possible, leaving choice of the expression in each given situation for later. In what follows, we start by explaining how DL has been applied in GRE before (Sec. 2) , pointing out the limitations of existing work. In Sec.3 we discuss which kinds of additional expressivity are required and how they can be achieved through modern DL. In Sec.4 we present a generic algorithm to compute these expressive REs. Sec.5 concludes the paper by comparing its aims and achievements with current practise in GRE. 2 DL for GRE 2.1 Description Logics Description Logic (DLs) come in different flavours, based on decidable fragments of firstorder logic. A DL-based KB represents the domain with descriptions of concepts, relations, and their instances. DLs underpin the Web Ontology Language (OWL), whose latest version, OWL2 (Motik et al., 2008), is based on DL et al., 2006). consists of a an ABox a set of coninclusion axioms of the form relation axioms such as relation in the relation v and possibly more complex information, such as the fact that a particular relation is functional, or axioms about individuals, an instance of : with Given a set of atomic concepts, the entire set concepts expressible by defined recursively. First, all atomic concepts are concepts. Furthermore, if C and D are concepts, then so are  |⊥  |≤ ≥ ... , the top concept, bottom connon-negative integer number, self-restriction ((i.e., the set of those : names and relation which can either be an atomic relaor the inverse of another relation We a set of individual names ... , nomand use denote the set of atomic concept names, relation names and individual names, respectively. a pair a non-empty set and a function that maps concept ⊆ atomic role × and individual ∈ The interpretation of complex concepts and axioms can be defined inductively based on their see.g. = ∩ etc. a written the axin satisfied in It should be noted one have multiple models. For exwhen there be a model = = = = and another model = = = = In other words, the world is open. For details, see (Horrocks et al., 2006). The possibly multiple models indicate that an ontology is describing an open world. In GRE, researchers usually impose a closed world. From the DL point of view, people can (partially) close ontology with a DBox et al., 2009), which is syntactically similar to the ABox, except only atomic formulas. Furtherevery concept or relation appearing in is closed. Its extension is exactly defined by the of i.e. if thus is the same in all the models. The concepts relations not appearing in still remain open. DL reasoning can be exploited to infer implicit information from ontologies. For examgiven dog is fed by some and : : we know that there must be feeds When the domain closed as can further infer that this there is no explicit relabetween Note that the domain an interpretation of not fixed, but it includes all the DBox individuals. However, closing ontologies by means of the DBox can restrict the usage of implicit knowledge More precisely, the interpretations of concepts and relations appearing in fixed therefore no implicit knowledge can be inferred. To address this issue, we introduce the notion of NBox to support Negation as Failure (NAF): Un- NAF, an ontology is a triple a TBox, ABox and a subset We call NBox. NAF requires the following conditions: Let N n Then Let y N n : : the DBox approach, the NBox conditions in which “unknown” should be treated as “failure”. But, instead of hard-coding this, it specifies a vocabulary on which such treatment should be applied. Different from the DBox approach, inferences on this NAF vocabulary is still possible. An example of inferring implicit knowledge with NAF will be shown in later sections. 2.2 Background Assumptions When applying DL to GRE, people usually impose the following assumptions. • Individual names are not used in REs. For “the Woman who feeds would invalid, because a name. Names are typically outlawed in GRE because, in many applications, many objects do not have names that readers/hearers would be familiar with. Closed World Assumption GRE researchers usually assume a closed world, without defining what this means. As explained above, DL allows different interpretations of the CWA. Our solution does not depend on a specific definition of CWA. In what follows, however, we use NAF to illustrate our idea. Furthermore, the domain is usually considered to be finite and consists of only appearing in Unique Name Assumption Different names denote different individuals. If, for potentially be the same woman, then we can not distinguish one from the other. We follow these assumptions when discussing existing works and presenting our approach. In adwe consider the entire KB, including It is also worth mentioning that, in syntax of negation of relations are not allowed in concept expressions, e.g. you cancompose a concept However, then we can interpret In the rest of the paper, we use this as syntactic sugar. 2.3 Motivation: DL Reasoning and GRE Every DL concept can be interpreted as a set. If the KB allows one to prove that this set is a singleton then the concept is a referring expression. It is this idea (Gardent and Striegnitz, 2007) that (Areces et al., 2008) explored. In doing so, they say little about the TBox, appearing to consider only the ABox, which contains only axioms about instances of atomic concepts and relations. For example, the domain in Fig.1 can be described as</abstract>
<degree confidence="0.9179848"></degree>
<abstract confidence="0.972463286652079">Assuming that this represents a Closed World, Areces et al. propose an algorithm that is able to generate descriptions by partitioning the do- More precisely, the algorithm first finds out which objects are describable through increasingly large conjunctions of (possibly negated) atomic concepts, then tries to extend these conjunctions with complex concepts of the form then with concepts of the form and so on. At each stage, only those concepts that have been acceptable through earlier stages are used. Consider, for instance, KB1 above. Regardless of what the intended referent is, the algorithm starts partitioning the domain stage by stage as follows. Each stage makes use of all previous stages. Durstage (3), e.g., the object only be because identified in stage (2): Dog Dog = = 3. = = As before, we disregard the important question of the quality of the descriptions generated, other than whether they do or do not identify a given referent uniquely. Other aspects of quality depend in part on details, such as the question in which order atomic concepts are combined during phase (1), and analogously during later phases. However this approach does not extend the expressive power of GRE. This is not because of some specific lapse on the part of the authors: it seems to have escaped the GRE community as a whole that relations can enter REs in a variety of alternative ways. Furthermore, the above algorithm considers only the ABox, therefore background information et al. (Areces et al., 2008) consider several DL (e.g., Which referring expressions are expressible, in their framework, depends on which DL fragment is chosen. Existential quantification, however, is the only quantifier that was used, and inverse relations are not considered. will not be used. It follows that the domain always has a fixed single interpretation/model. Consequently the algorithm essentially uses modelchecking, rather than full reasoning. We will show that when background information is involved, reasoning has to be taken into account. For example, suppose we extend Fig.1 with back- (i.e., TBox) knowledge saying that should always feed any animal loved by an aniwhom one is while also adding a love (Fig.2) between Figure 2: An extended example of Fig.1. Edges women to cats denote Dashed edges denote implicit relations. If we close the domain with NAF, the ontology can be described as follows: : Woman, feed, The TBox axiom enables the inference of implicit the facts : : : be inferred using DL reaunder the above NBox Axioms of this kind allow a much more natural, insightful and concise representation of information than would otherwise be possible. Continuing to focus on the materialised KB2, we note another limitation of existing works: if only existential quantifiers are used then some objects are unidentifiable (i.e., it is not possible to distinguish them uniquely). These objects would become identifiable if other quantifiers and inverse relations were allowed. For example, The cat which is fed by least 2 ≥ The woman feeding fed by 2 The woman who feeds dogs It thus raises the question: which quantifiers would it be natural to use in GRE, and how might DL realise them? 3 Beyond Existential Descriptions In this section, we show how more expressive DLs can make objects referable that were previously unreferable. This will amount to a substantial reformulation which allows the approach based on DL reasoning to move well beyond other GRE algorithms in its expressive power. 3.1 Expressing Quantifiers in OWL2 Because the proposal in (Areces et al., 2008) uses only existential quantification, it fails to identify in Fig.2. Before filling this gap, we pause to ask what level of expressivity ought to be achieved. In doing so, we make use of a conceptual apparatus developed in an area of formal semantics and mathematical logic known as the theory of Generalized Quantifiers (GQ), quantifiers other than studied (Mostowski, 1957). The most general format REs that involves a relation informally, N1 who R Q where sets, a relation, and generquantifier. (Thus for example women feed SOME An expression of this form is a unique identifying expression if it corresponds to exactly one domain element. Using a set-theoretic notation, this means that the followset has a cardinality of : a generalized quantifier. For example, the existential quantifier, while set of women, set of dogs, and relation of feeding, then this says that the number women who feed SOME dog is one. If the least then it says that the number of women who feed at least two dogs is one. It will be convenient to write the formula above in the standard GQ format where quantifiers are cast as relations between sets of domain objects Using the universal quantifier as an examinstead of writing we write Thus, the formula above is written : this as before, we get or “women who feed a where some characterising the class of quantifiers that can be expressed in referring expressions is a complex research programme to which we do not intend to contribute here, partly because this class includes quantifiers that are computationally problematic; for example, a such as the sense of more than which is not first-order expressible, as is well known. To make transparent which quantifiers are expressible in the logic that we are using, let us think of quantifiers in terms of simple quantitative conon the sizes of the sets and as is often done in GQ theory, asking what types of constraints can be expressed in referring based on The findings are summarised in Tab.1. OWL2 can express any of the following types of descriptions, plus disjunctions and conjunctions of anything it can express. Table 1: Expressing GQ in DL QAB DL 1 2 3 4 5 6 7 8 for example, type 1 becomes i.e. the When 0 7 becomes i.e. the quantifier 0 6 becomes i.e. the In types 2, 4, 6 and 8, negation of a relation is used. This is not directly supported as we indicated earlier, given be used in concepts. Together, this allows the expression of a description such as “women who feed at least one but at most 7 dogs”, by conjoining type 1 (with with type 5 (with Using negation, it can say “women who do not feed all dogs who feed at least one non-dog” In addition Tab.1, even represent reflexive relation such as “the dog who loves itself” by which was regarded infeasible in (Gardent and Striegnitz, 2007). Comparing the quantifiers that become expressible through OWL2’s apparatus with classes of quantifiers studied in the theory of GQ, it is clear that OWL2 is highly expressive: it does not only include quantifiers expressible in the binary tree of numbers, e.g. (van Benthem, 1986) – which is generally regarded as highly general – but much else besides. Even wider classes of referring expressions can certainly be conceived, but these are not likely to have overwhelming practical utility in today’s NLG applications. Generating REs In this section, we present an algorithm that computes the descriptions discussed in sect.3. A GRE algorithm should have the following behaviour: if an entity is distinguishable from all the others, the algorithm should find a unique description; otherwise, the algorithm should say there exists no unique description. In this paper, we follow Areces et al.’s strategy of generating REs for all objects simultaneously, but we apply it to a much larger search space, because many more constructs are taken into account. 4.1 GROWL: an algorithm for Generating Referring expressions using OWL-2. In this section we show how the ideas of previous sections can be implemented. To do this, we sketch an algorithm scheme called GROWL. GROWL applies a generate-and-test strategy that composes increasingly complicated descriptions and uses DL reasoning to test whether a description denotes a singleton w.r.t. the KB. To avoid considering unnecessarily complicated descriptions, the algorithm makes use of the (syntactic) depth of a description, defined as follows: 1 a description its calculated as follows: 1. 1 where atomic. 2. + 1. 3. ≤ ≥ 1. Different descriptions can mean the same of e.g. We do not know which syntactic variant should be used but focus, simplicity, on generating their unique form The NNF of a formula be obtained by pushing all the unonly before atomic concepts (including atomic relations, nominals or self restrictions Without loss of generality, in what follows we assume all the formulas are in their NNF. To avoid confusion, the NNF of negation a formula denoted by of example = atomic. Obviously, = = = and The use of NNF substantially reduces the redundancies generated by the algorithm. For example, we won’t generate only the later. an ontology we initialise GROWL with the following sets: The relation name set the minimal set satisfying: if an atomic relation in then if then if then ∈ The concept name set the minimal set satisfying: &gt; ∈ if an atomic concept in then if then if then The natural number set ... , n the number of in The construct set all the constructs supported by a particular language. We assume here that nominals are disallowed (cf. sect.2). CN, RN, N, CN, RN, N, S Description Queue D 2: D for for if for ∈ D d s if for D s 12: for each D s k return e (Extended) Description Queue for if return else if return if satisfiable in 7: return takes an ontology its input and a queue descriptions by adding incomplex concepts using the which is implemented as the algorithm ADD. Because of the centrality of ADD we start by explaining how this function works. In the simple algorithm we are proposing in this paper – which represents only one amongst many possibilities – addition is governed by the heuristhat complex descriptions should have extensions. this end, a candidate decompared with each existing descrip- Step 2 ensures that if there exists a description whose extension no larger than then not added the role of be taken by the description Similarly, step 4 ensures if there exists same depth smaller extension satisthen not be added into The subsumption checking in Step 2 and 4, and the instance retrieval in Step 6, must be realised by DL reasoning, in which TBox, ABox and NBox must all be taken into account. ADD guarantees that when the complexity of descriptions increases, their extensions are getting smaller. We now turn to the main algorithm, GROWL. In 1 of this algorithm, initialised to Steps to 3 add all satisfiable elements of From Steps 4 to 14, we recursively “process” eleof by one, by which we mean that the in employed to combine these with other elements of an element is intersected with all other elements, and so We use retrieve the first unproelement of New elements are added to end of Thus a first-come-first-served queue (note that processed elements are not refrom see in more detail how elements of processed, consider Steps 5-14 once again. For element Step 5 uses a construct extend it: If in Step 7 and 8, we extend each element of add new descripto If in Step 10 and 11, we extend all relations of add new deto In Areces et el.’s work, available when using however due to their algorithm they can never descriptions like If in Step 13 and 14, we exall relations in all numin and add new descriptions to the can be equivalently by the combination of semantically equivalent &lt; it is a modelling choice use either or only or all of them. In this algorithm we use them all. Because we compute only the NNF and we disallow the use of individual identifiers, negaonly in front of atomic concept names. For this reason, processing does not con- Note that GROWL leaves some important issues open. In particular, the order in which constructs, relations, integers and conjuncts/disjuncts are chosen is left unspecified. that RN, N, 5 all assumed to be finite, hence Steps 5 to 14 terminate for a given Because Steps 5 to 14 generate descriptions whose depth increases with one constructor a time, there are finitely many that a given GROWL extends the algorithm presented by Areces et al. The example in Fig.2 shows that many referring expressions generated by our algorithm cannot be generated by our predecessors; in fact, some objects that are not referable for them are referable by GROWL. For example, if we apply the algorithm to the KB in Fig.2, a possible solution is as follows: 1. the woman that does not feed all cats. 2. the woman that feeds all cats. 3. &lt; the dog that is fed by all women. 4. the dog that is not fed by all women. 5. &lt; the cat that is fed by all women. 6. the cat that is not fed by all women. It is worth reiterating here that our algorithm focusses on finding uniquely referring expressions, leaving aside which of all the possible ways in which an object can be referred to is “best”. For this reason, empirical validation of our algorithm – a very sizable enterprise in itself, which should probably be based on descriptions elicited by human speakers – is not yet in order. 4.2 Discussion Let us revisit the basic assumptions of Sec.2.2, to see what can be achieved if they are abandoned. 1. In natural language, people do using names, e.g. “the husband of Marie Curie”. To allow REs of this kind, we can extend our Algorithm A-1 by including singleton classes such 2. Traditional GRE approaches have always assumed a single model with complete knowledge. Without this assumption, our approach can still find interesting REs. For example, if a man’s nationality is unknown, but he is known to be the Chinese or Japanese, we can to him/her as However, models should be finite to guaranthat finite. 3. Individuals with multiple names. DL imposes the UNA by explicitly asserting the inequality of each two individuals. Without UNA, reasoning can still infer some ree.g. David Thus we can refer to David as “the man” if the domain is closed. 5 Widening the remit of GRE This paper has shown some of the benefits that arise when the power of KR is brought to bear on an important problem in NLG, namely the generation of referring expressions (GRE). We have done this by using DL as a representation and reasoning formalism, extending previous work in GRE in two ways. First, we have extended GRE by allowing the generation of REs that involve other than By relating our algorithm to the theory of Generalised Quantifiers, we were able to formally characterise the set of quantifiers supported by our algorithm, making exact how much expressive power we have gained. Secwe have demonstrated the benefits of imthrough inferences that exploit TBox-information, thereby allowing facts to be represented more efficiently and elegantly, and allowing GRE to tap into kinds of generic (as opposed to atomic) knowledge that it had so far left aside, except for hints in (Gardent and Striegnitz, 2007) and in (Croitoru and van Deemter, 2007). Thirdly, we have allowed GRE to utilise incomplete knowledge, as when we refer to someone as “the man of Japanese or Chinese nationality”. Current work on reference is overwhelmingly characterised by an emphasis on empirical accuracy, often focussing on very simple referring expressions, which are constituted by conjunctions of 1-place relations (as in “the grey poodle”), and asking which of these conjunctions are most likely to be used by human speakers (or which of these would be most useful to a human hearer). The present work stresses different concerns: we have focussed on questions of expressive power, focussing on relatively complex descriptions, asking what referring expressions are possible when relations between domain objects are used. We believe that, at the present stage of work in GRE, it is of crucial importance to gain insight into questions of this kind, since this will tell us what types of reference are possible in principle. Once such insight, we hope to explore how the newly gained expressive power can be put to practical use.</abstract>
<title confidence="0.453539">References</title>
<author confidence="0.477772">English</author>
<affiliation confidence="0.611584">Cambridge University Press, Cambridge, UK.</affiliation>
<author confidence="0.445374">Carlos Areces</author>
<author confidence="0.445374">Alexander Koller</author>
<author confidence="0.445374">Kristina Strieg-</author>
<abstract confidence="0.951651411764706">nitz. 2008. Referring expressions as formulas of logic. In of the 5th Salt Fork, Ohio. Anja Belz and Albert Gatt. 2008. Intrinsic vs. extrinsic evaluation measures for referring expression gener- In ’08: Proceedings of the 46th Annual Meeting of the Association for Computational Linon Human Language pages 197–200. Madalina Croitoru and Kees van Deemter. 2007. A conceptual graph approach to the generation of reexpressions. In of the 20th IJ- Robert Dale and Ehud Reiter. 1995. Computational interpretations of the gricean maxims in the generation referring expressions. cmp-lg/9504020. Claire Gardent and Kristina Striegnitz. 2007. Genbridging definite descriptions.</abstract>
<note confidence="0.856680076923077">3:369–396. Albert Gatt, Anja Belz, and Eric Kow. 2009. The TUNA-REG Challenge 2009: Overview and evalresults. In of the 12th ENLG pages 174–182, Athens, Greece, March. Association for Computational Linguistics. Ian Horrocks, Oliver Kutz, and Ulrike Sattler. 2006. Even More Irresistible SROIQ. In Emiel Krahmer and Mariet Theune. 2002. Efficient context-sensitive generation of descriptions in con- Sharing: Givenness and Newness pages 223–264. Emiel Krahmer, Sebastiaan van Erk, and Andr Verleg. 2003. Graph-based generation of referring expres- 29(1):53–72. A Mostowski. 1957. On a generalization of quanti- 44:235–273. Boris Motik, Bernardo Cuenca Grau, Ian Horrocks, Zhe Wu, Achille Fokoue, and Carsten Lutz. 2008. Owl 2 web ontology language: Profiles. W3c working draft, W3C, October. Seylan, Enrico Franconi, and Jos de Bruijn. 2009. Effective query rewriting with ontologies over In Johan van Benthem. 1986. Essays in Logical Semantics. Reidel.</note>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Douglas Appelt</author>
</authors>
<title>Planning English Sentences.</title>
<date>1985</date>
<publisher>Cambridge University Press,</publisher>
<location>Cambridge, UK.</location>
<contexts>
<context position="1746" citStr="Appelt, 1985" startWordPosition="280" endWordPosition="281"> Fig.1 depicts the relations between several women, dogs and cats. In such a scenario, a GRE algorithm might identify d1 as “the dog that loves a cat”, singling out d1 from the five other objects in the domain. Reference has long been a key issue in theoretical linguistics and psycholinguistics, and GRE is a crucial component of almost every practical NLG system. In the years following seminal publications such as (Dale and Reiter, 1995), GRE has become one of the most intensively studied areas of NLG, with links to many other areas of Cognitive Science. After plan-based contributions (e.g., (Appelt, 1985)), recent work increasingly stresses the human-likeness of the expressions generated in simple situations, culminating in two evaluation campaigns in which dozens of GRE algorithms were compared to human-generated expressions (Belz and Gatt, 2008; Gatt et al., 2009). Figure 1: An example in which edges from women to dogs denote feed relations, from dogs to cats denote love relations. Traditional GRE algorithms are usually based on very elementary, custom-made, forms of Knowledge Representation (KR), which allow little else than atomic facts (with negation of atomic facts left implicit), often </context>
</contexts>
<marker>Appelt, 1985</marker>
<rawString>Douglas Appelt. 1985. Planning English Sentences. Cambridge University Press, Cambridge, UK.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Carlos Areces</author>
<author>Alexander Koller</author>
<author>Kristina Striegnitz</author>
</authors>
<title>Referring expressions as formulas of description logic.</title>
<date>2008</date>
<booktitle>In Proceedings of the 5th INLG,</booktitle>
<location>Salt Fork, Ohio.</location>
<contexts>
<context position="3703" citStr="Areces et al., 2008" startWordPosition="595" endWordPosition="598">ted work mentioned above, issues of human-likeness are temporarily put on the backburner. These and other empirical issues will be brought to bear once it is better understood what types of KR system are best suitable for GRE, and what is the best way to pursue GRE in them. A few proposals have started to combine GRE with KR. Following on from work based on labelled directed graphs (cf. (Krahmer et al., 2003)) – a well-understood mathematical formalism that offers no reasoning support – (Croitoru and van Deemter, 2007) analysed GRE as a projection problem in Conceptual Graphs. More recently, (Areces et al., 2008) analysed GRE as a problem in Description Logic (DL), a formalism which, like Conceptual Graphs, is specifically designed for representing and reasoning with potentially complex information. The idea is to produce a formula such as Dog u ∃love.Cat (the set of dogs intersected with the set of objects that love at least one cat); this is, of course, a successful reference if there exists exactly one dog who loves at least one cat. This approach forms the starting point for the present paper, which aims to show that when a principled, logic based approach is chosen, it becomes possible to refer t</context>
<context position="11866" citStr="Areces et al., 2008" startWordPosition="2119" endWordPosition="2122">h. In addition, we consider the entire KB, including A, T and N. It is also worth mentioning that, in the syntax of SROIQ, negation of relations are not allowed in concept expressions, e.g. you cannot compose a concept ∃-feed.Dog. However, if feed E N, then we can interpret (-feed)z = Oz x Oz \ feedz. In the rest of the paper, we use this as syntactic sugar. 2.3 Motivation: DL Reasoning and GRE Every DL concept can be interpreted as a set. If the KB allows one to prove that this set is a singleton then the concept is a referring expression. It is this idea (Gardent and Striegnitz, 2007) that (Areces et al., 2008) explored. In doing so, they say little about the TBox, appearing to consider only the ABox, which contains only axioms about instances of atomic concepts and relations. For example, the domain in Fig.1 can be described as KB1: T1 = ∅, Al = {w1 : Woman, w2 : Woman, d1 : Dog, d2 : Dog, c1 : Cat, c2 : Cat, (w1, d1) : feed, (w2, d1) : feed, (w2, d2) : feed, (d1, c1) : love} Assuming that this represents a Closed World, Areces et al. propose an algorithm that is able to generate descriptions by partitioning the domain.1 More precisely, the algorithm first finds out which objects are describable th</context>
<context position="14096" citStr="Areces et al., 2008" startWordPosition="2507" endWordPosition="2510">han whether they do or do not identify a given referent uniquely. Other aspects of quality depend in part on details, such as the question in which order atomic concepts are combined during phase (1), and analogously during later phases. However this approach does not extend the expressive power of GRE. This is not because of some specific lapse on the part of the authors: it seems to have escaped the GRE community as a whole that relations can enter REs in a variety of alternative ways. Furthermore, the above algorithm considers only the ABox, therefore background information 1Areces et al. (Areces et al., 2008) consider several DL fragments (e.g., AGC and EG). Which referring expressions are expressible, in their framework, depends on which DL fragment is chosen. Existential quantification, however, is the only quantifier that was used, and inverse relations are not considered. will not be used. It follows that the domain always has a fixed single interpretation/model. Consequently the algorithm essentially uses modelchecking, rather than full reasoning. We will show that when background information is involved, reasoning has to be taken into account. For example, suppose we extend Fig.1 with backgr</context>
<context position="16522" citStr="Areces et al., 2008" startWordPosition="2923" endWordPosition="2926">g only those fed by at least 2 women = Woman u ∀feed. ≥ 2.feed−.Woman = {w1}, • The woman who feeds all the dogs = {w2}. It thus raises the question: which quantifiers would it be natural to use in GRE, and how might DL realise them? 3 Beyond Existential Descriptions In this section, we show how more expressive DLs can make objects referable that were previously unreferable. This will amount to a substantial reformulation which allows the approach based on DL reasoning to move well beyond other GRE algorithms in its expressive power. 3.1 Expressing Quantifiers in OWL2 Because the proposal in (Areces et al., 2008) uses only existential quantification, it fails to identify any individual in Fig.2. Before filling this gap, we pause to ask what level of expressivity ought to be achieved. In doing so, we make use of a conceptual apparatus developed in an area of formal semantics and mathematical logic known as the theory of Generalized Quantifiers (GQ), where quantifiers other than all and some are studied (Mostowski, 1957). The most general format for REs that involves a relation R is, informally, the N1 who R Q N2’s, where N1 and N2 denote sets, R denotes a relation, and Q a generalized quantifier. (Thus</context>
</contexts>
<marker>Areces, Koller, Striegnitz, 2008</marker>
<rawString>Carlos Areces, Alexander Koller, and Kristina Striegnitz. 2008. Referring expressions as formulas of description logic. In Proceedings of the 5th INLG, Salt Fork, Ohio.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Anja Belz</author>
<author>Albert Gatt</author>
</authors>
<title>Intrinsic vs. extrinsic evaluation measures for referring expression generation.</title>
<date>2008</date>
<booktitle>In HLT ’08: Proceedings of the 46th Annual Meeting of the Association for Computational Linguistics on Human Language Technologies,</booktitle>
<pages>197--200</pages>
<contexts>
<context position="1992" citStr="Belz and Gatt, 2008" startWordPosition="314" endWordPosition="317"> issue in theoretical linguistics and psycholinguistics, and GRE is a crucial component of almost every practical NLG system. In the years following seminal publications such as (Dale and Reiter, 1995), GRE has become one of the most intensively studied areas of NLG, with links to many other areas of Cognitive Science. After plan-based contributions (e.g., (Appelt, 1985)), recent work increasingly stresses the human-likeness of the expressions generated in simple situations, culminating in two evaluation campaigns in which dozens of GRE algorithms were compared to human-generated expressions (Belz and Gatt, 2008; Gatt et al., 2009). Figure 1: An example in which edges from women to dogs denote feed relations, from dogs to cats denote love relations. Traditional GRE algorithms are usually based on very elementary, custom-made, forms of Knowledge Representation (KR), which allow little else than atomic facts (with negation of atomic facts left implicit), often using a simple (Attribute : Value) format, e.g (Type : Dog). This is justifiable as long as the properties expressed by these algorithms are simple one-place predicates (e.g., being a dog), but when logically more complex descriptions are involve</context>
</contexts>
<marker>Belz, Gatt, 2008</marker>
<rawString>Anja Belz and Albert Gatt. 2008. Intrinsic vs. extrinsic evaluation measures for referring expression generation. In HLT ’08: Proceedings of the 46th Annual Meeting of the Association for Computational Linguistics on Human Language Technologies, pages 197–200.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Madalina Croitoru</author>
<author>Kees van Deemter</author>
</authors>
<title>A conceptual graph approach to the generation of referring expressions.</title>
<date>2007</date>
<booktitle>In Proceedings of the 20th IJCAI.</booktitle>
<marker>Croitoru, van Deemter, 2007</marker>
<rawString>Madalina Croitoru and Kees van Deemter. 2007. A conceptual graph approach to the generation of referring expressions. In Proceedings of the 20th IJCAI.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Robert Dale</author>
<author>Ehud Reiter</author>
</authors>
<title>Computational interpretations of the gricean maxims in the generation of referring expressions.</title>
<date>1995</date>
<tech>CoRR, cmp-lg/9504020.</tech>
<contexts>
<context position="1574" citStr="Dale and Reiter, 1995" startWordPosition="249" endWordPosition="252"> the story so far Generation of Referring Expressions (GRE) is the subtask of Natural Language Generation (NLG) that focuses on identifying objects in natural language. For example, Fig.1 depicts the relations between several women, dogs and cats. In such a scenario, a GRE algorithm might identify d1 as “the dog that loves a cat”, singling out d1 from the five other objects in the domain. Reference has long been a key issue in theoretical linguistics and psycholinguistics, and GRE is a crucial component of almost every practical NLG system. In the years following seminal publications such as (Dale and Reiter, 1995), GRE has become one of the most intensively studied areas of NLG, with links to many other areas of Cognitive Science. After plan-based contributions (e.g., (Appelt, 1985)), recent work increasingly stresses the human-likeness of the expressions generated in simple situations, culminating in two evaluation campaigns in which dozens of GRE algorithms were compared to human-generated expressions (Belz and Gatt, 2008; Gatt et al., 2009). Figure 1: An example in which edges from women to dogs denote feed relations, from dogs to cats denote love relations. Traditional GRE algorithms are usually ba</context>
</contexts>
<marker>Dale, Reiter, 1995</marker>
<rawString>Robert Dale and Ehud Reiter. 1995. Computational interpretations of the gricean maxims in the generation of referring expressions. CoRR, cmp-lg/9504020.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Claire Gardent</author>
<author>Kristina Striegnitz</author>
</authors>
<title>Generating bridging definite descriptions. Computing Meaning,</title>
<date>2007</date>
<pages>3--369</pages>
<contexts>
<context position="11839" citStr="Gardent and Striegnitz, 2007" startWordPosition="2114" endWordPosition="2117">ing works and presenting our approach. In addition, we consider the entire KB, including A, T and N. It is also worth mentioning that, in the syntax of SROIQ, negation of relations are not allowed in concept expressions, e.g. you cannot compose a concept ∃-feed.Dog. However, if feed E N, then we can interpret (-feed)z = Oz x Oz \ feedz. In the rest of the paper, we use this as syntactic sugar. 2.3 Motivation: DL Reasoning and GRE Every DL concept can be interpreted as a set. If the KB allows one to prove that this set is a singleton then the concept is a referring expression. It is this idea (Gardent and Striegnitz, 2007) that (Areces et al., 2008) explored. In doing so, they say little about the TBox, appearing to consider only the ABox, which contains only axioms about instances of atomic concepts and relations. For example, the domain in Fig.1 can be described as KB1: T1 = ∅, Al = {w1 : Woman, w2 : Woman, d1 : Dog, d2 : Dog, c1 : Cat, c2 : Cat, (w1, d1) : feed, (w2, d1) : feed, (w2, d2) : feed, (d1, c1) : love} Assuming that this represents a Closed World, Areces et al. propose an algorithm that is able to generate descriptions by partitioning the domain.1 More precisely, the algorithm first finds out which</context>
<context position="20224" citStr="Gardent and Striegnitz, 2007" startWordPosition="3634" endWordPosition="3637">gation of a relation is used. This is not directly supported in SROIQ but, as we indicated earlier, given R ∈ N, ¬R can be used in concepts. Together, this allows the expression of a description such as “women who feed at least one but at most 7 dogs”, by conjoining type 1 (with n = 1) with type 5 (with n = 7). Using negation, it can say “women who do not feed all dogs and who feed at least one non-dog” (Woman u ¬∀¬Feed.¬Dog u ∃Feed.¬Dog). In addition to Tab.1, SROIQ can even represent reflexive relation such as “the dog who loves itself” by Dog u ∃love.Self, which was regarded infeasible in (Gardent and Striegnitz, 2007). Comparing the quantifiers that become expressible through OWL2’s apparatus with classes of quantifiers studied in the theory of GQ, it is clear that OWL2 is highly expressive: it does not only include quantifiers expressible in the binary tree of numbers, e.g. (van Benthem, 1986) – which is generally regarded as highly general – but much else besides. Even wider classes of referring expressions can certainly be conceived, but these are not likely to have overwhelming practical utility in today’s NLG applications. 4 Generating SROIQ-enabled REs In this section, we present an algorithm that co</context>
<context position="30784" citStr="Gardent and Striegnitz, 2007" startWordPosition="5655" endWordPosition="5658">lowing the generation of REs that involve quantifiers other than ∃. By relating our algorithm to the theory of Generalised Quantifiers, we were able to formally characterise the set of quantifiers supported by our algorithm, making exact how much expressive power we have gained. Secondly, we have demonstrated the benefits of implicit knowledge through inferences that exploit TBox-information, thereby allowing facts to be represented more efficiently and elegantly, and allowing GRE to tap into kinds of generic (as opposed to atomic) knowledge that it had so far left aside, except for hints in (Gardent and Striegnitz, 2007) and in (Croitoru and van Deemter, 2007). Thirdly, we have allowed GRE to utilise incomplete knowledge, as when we refer to someone as “the man of Japanese or Chinese nationality”. Current work on reference is overwhelmingly characterised by an emphasis on empirical accuracy, often focussing on very simple referring expressions, which are constituted by conjunctions of 1-place relations (as in “the grey poodle”), and asking which of these conjunctions are most likely to be used by human speakers (or which of these would be most useful to a human hearer). The present work stresses different con</context>
</contexts>
<marker>Gardent, Striegnitz, 2007</marker>
<rawString>Claire Gardent and Kristina Striegnitz. 2007. Generating bridging definite descriptions. Computing Meaning, 3:369–396.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Albert Gatt</author>
<author>Anja Belz</author>
<author>Eric Kow</author>
</authors>
<title>The TUNA-REG Challenge 2009: Overview and evaluation results.</title>
<date>2009</date>
<booktitle>In Proceedings of the 12th ENLG (ENLG</booktitle>
<pages>174--182</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Athens, Greece,</location>
<contexts>
<context position="2012" citStr="Gatt et al., 2009" startWordPosition="318" endWordPosition="321"> linguistics and psycholinguistics, and GRE is a crucial component of almost every practical NLG system. In the years following seminal publications such as (Dale and Reiter, 1995), GRE has become one of the most intensively studied areas of NLG, with links to many other areas of Cognitive Science. After plan-based contributions (e.g., (Appelt, 1985)), recent work increasingly stresses the human-likeness of the expressions generated in simple situations, culminating in two evaluation campaigns in which dozens of GRE algorithms were compared to human-generated expressions (Belz and Gatt, 2008; Gatt et al., 2009). Figure 1: An example in which edges from women to dogs denote feed relations, from dogs to cats denote love relations. Traditional GRE algorithms are usually based on very elementary, custom-made, forms of Knowledge Representation (KR), which allow little else than atomic facts (with negation of atomic facts left implicit), often using a simple (Attribute : Value) format, e.g (Type : Dog). This is justifiable as long as the properties expressed by these algorithms are simple one-place predicates (e.g., being a dog), but when logically more complex descriptions are involved, the potential adv</context>
</contexts>
<marker>Gatt, Belz, Kow, 2009</marker>
<rawString>Albert Gatt, Anja Belz, and Eric Kow. 2009. The TUNA-REG Challenge 2009: Overview and evaluation results. In Proceedings of the 12th ENLG (ENLG 2009), pages 174–182, Athens, Greece, March. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ian Horrocks</author>
<author>Oliver Kutz</author>
<author>Ulrike Sattler</author>
</authors>
<title>The Even More Irresistible SROIQ.</title>
<date>2006</date>
<booktitle>In KR</booktitle>
<contexts>
<context position="6173" citStr="Horrocks et al., 2006" startWordPosition="1007" endWordPosition="1010">nal expressivity are required and how they can be achieved through modern DL. In Sec.4 we present a generic algorithm to compute these expressive REs. Sec.5 concludes the paper by comparing its aims and achievements with current practise in GRE. 2 DL for GRE 2.1 Description Logics Description Logic (DLs) come in different flavours, based on decidable fragments of firstorder logic. A DL-based KB represents the domain with descriptions of concepts, relations, and their instances. DLs underpin the Web Ontology Language (OWL), whose latest version, OWL2 (Motik et al., 2008), is based on DL SROIQ (Horrocks et al., 2006). An SROIQ ontology E usually consists of a TBox T and an ABox A. T contains a set of concept inclusion axioms of the form C v D, relation inclusion axioms such as R v S (the relation R is contained in the relation S), R1 ◦ ... ◦ Rn v S, and possibly more complex information, such as the fact that a particular relation is functional, or symmetric; A contains axioms about individuals, e.g. a : C (a is an instance of C), (a, b) : R (a has an R relation with b). Given a set of atomic concepts, the entire set of concepts expressible by SROIQ is defined recursively. First, all atomic concepts are c</context>
<context position="8074" citStr="Horrocks et al., 2006" startWordPosition="1412" endWordPosition="1415">tion that maps atomic concept A to AI ⊆ OI, atomic role r to rI ⊆ OI × OI and individual a to aI ∈ OI. The interpretation of complex concepts and axioms can be defined inductively based on their semantics, e.g. (C u D)I = CI ∩ DI, etc. I is a model of E, written I |= E, iff all the axioms in E are satisfied in I. It should be noted that one E can have multiple models. For example when T = ∅, A = {a : A t B}, there can be a model I1 s.t. OI1 = {a}, aI1 = a, AI1 = {a}, BI1 = ∅, and another model I2 s.t. OI2 = {a}, aI2 = a, BI2 = {a}, AI2 = ∅. In other words, the world is open. For details, see (Horrocks et al., 2006). The possibly multiple models indicate that an ontology is describing an open world. In GRE, researchers usually impose a closed world. From the DL point of view, people can (partially) close the ontology with a DBox D (Seylan et al., 2009), which is syntactically similar to the ABox, except that D contains only atomic formulas. Furthermore, every concept or relation appearing in D is closed. Its extension is exactly defined by the contents of D, i.e. if D K a : A then a : -A, thus is the same in all the models. The concepts and relations not appearing in D can still remain open. DL reasoning</context>
</contexts>
<marker>Horrocks, Kutz, Sattler, 2006</marker>
<rawString>Ian Horrocks, Oliver Kutz, and Ulrike Sattler. 2006. The Even More Irresistible SROIQ. In KR 2006.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Emiel Krahmer</author>
<author>Mariet Theune</author>
</authors>
<title>Efficient context-sensitive generation of descriptions in context. Information Sharing: Givenness and Newness in Language,</title>
<date>2002</date>
<pages>223--264</pages>
<contexts>
<context position="5053" citStr="Krahmer and Theune, 2002" startWordPosition="824" endWordPosition="827">te substantially from these earlier approaches. For example, while Areces et al. use one finite interpretation for model checking, we consider arbitrary (possibly infinite) interpretations, hence reasoning support becomes necessary. We shall follow many researchers in focussing on the semantic core of the GRE problem: we shall generate descriptions of semantic content, leaving the decision of what words to use for expressing this content (e.g., ‘the ancient dog’, or ‘the dog which is old’) to later stages in the NLG pipeline. Furthermore, we assume that all domain objects are equally salient (Krahmer and Theune, 2002). As explained above, we do not consider here the important matter of the naturalness or efficacy of the descriptions generated. We shall be content producing uniquely referring expressions whenever such expressions are possible, leaving the choice of the optimal referring expression in each given situation for later. In what follows, we start by explaining how DL has been applied in GRE before (Sec. 2) , pointing out the limitations of existing work. In Sec.3 we discuss which kinds of additional expressivity are required and how they can be achieved through modern DL. In Sec.4 we present a ge</context>
</contexts>
<marker>Krahmer, Theune, 2002</marker>
<rawString>Emiel Krahmer and Mariet Theune. 2002. Efficient context-sensitive generation of descriptions in context. Information Sharing: Givenness and Newness in Language, pages 223–264.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Emiel Krahmer</author>
<author>Sebastiaan van Erk</author>
<author>Andr Verleg</author>
</authors>
<title>Graph-based generation of referring expressions.</title>
<date>2003</date>
<journal>Computational Linguistics,</journal>
<volume>29</volume>
<issue>1</issue>
<marker>Krahmer, van Erk, Verleg, 2003</marker>
<rawString>Emiel Krahmer, Sebastiaan van Erk, and Andr Verleg. 2003. Graph-based generation of referring expressions. Computational Linguistics, 29(1):53–72.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Mostowski</author>
</authors>
<title>On a generalization of quantifiers.</title>
<date>1957</date>
<journal>Fund. Math.,</journal>
<pages>44--235</pages>
<contexts>
<context position="16936" citStr="Mostowski, 1957" startWordPosition="2993" endWordPosition="2994">ulation which allows the approach based on DL reasoning to move well beyond other GRE algorithms in its expressive power. 3.1 Expressing Quantifiers in OWL2 Because the proposal in (Areces et al., 2008) uses only existential quantification, it fails to identify any individual in Fig.2. Before filling this gap, we pause to ask what level of expressivity ought to be achieved. In doing so, we make use of a conceptual apparatus developed in an area of formal semantics and mathematical logic known as the theory of Generalized Quantifiers (GQ), where quantifiers other than all and some are studied (Mostowski, 1957). The most general format for REs that involves a relation R is, informally, the N1 who R Q N2’s, where N1 and N2 denote sets, R denotes a relation, and Q a generalized quantifier. (Thus for example the women who feed SOME dogs.) An expression of this form is a unique identifying expression if it corresponds to exactly one domain element. Using a set-theoretic notation, this means that the following set has a cardinality of 1: {y ∈ N1 : Qx ∈ N2 |Ryx} where Q is a generalized quantifier. For example, if Q is the existential quantifier, while N1 denotes the set of women, N2 the set of dogs, and </context>
</contexts>
<marker>Mostowski, 1957</marker>
<rawString>A Mostowski. 1957. On a generalization of quantifiers. Fund. Math., 44:235–273.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Boris Motik</author>
<author>Bernardo Cuenca Grau</author>
<author>Ian Horrocks</author>
<author>Zhe Wu</author>
<author>Achille Fokoue</author>
<author>Carsten Lutz</author>
</authors>
<title>web ontology language: Profiles. W3c working draft,</title>
<date>2008</date>
<journal>Owl</journal>
<volume>2</volume>
<pages>3</pages>
<contexts>
<context position="6127" citStr="Motik et al., 2008" startWordPosition="998" endWordPosition="1001"> In Sec.3 we discuss which kinds of additional expressivity are required and how they can be achieved through modern DL. In Sec.4 we present a generic algorithm to compute these expressive REs. Sec.5 concludes the paper by comparing its aims and achievements with current practise in GRE. 2 DL for GRE 2.1 Description Logics Description Logic (DLs) come in different flavours, based on decidable fragments of firstorder logic. A DL-based KB represents the domain with descriptions of concepts, relations, and their instances. DLs underpin the Web Ontology Language (OWL), whose latest version, OWL2 (Motik et al., 2008), is based on DL SROIQ (Horrocks et al., 2006). An SROIQ ontology E usually consists of a TBox T and an ABox A. T contains a set of concept inclusion axioms of the form C v D, relation inclusion axioms such as R v S (the relation R is contained in the relation S), R1 ◦ ... ◦ Rn v S, and possibly more complex information, such as the fact that a particular relation is functional, or symmetric; A contains axioms about individuals, e.g. a : C (a is an instance of C), (a, b) : R (a has an R relation with b). Given a set of atomic concepts, the entire set of concepts expressible by SROIQ is defined</context>
</contexts>
<marker>Motik, Grau, Horrocks, Wu, Fokoue, Lutz, 2008</marker>
<rawString>Boris Motik, Bernardo Cuenca Grau, Ian Horrocks, Zhe Wu, Achille Fokoue, and Carsten Lutz. 2008. Owl 2 web ontology language: Profiles. W3c working draft, W3C, October.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Inanc¸ Seylan</author>
<author>Enrico Franconi</author>
<author>Jos de Bruijn</author>
</authors>
<title>Effective query rewriting with ontologies over dboxes. In IJCAI</title>
<date>2009</date>
<marker>Seylan, Franconi, de Bruijn, 2009</marker>
<rawString>Inanc¸ Seylan, Enrico Franconi, and Jos de Bruijn. 2009. Effective query rewriting with ontologies over dboxes. In IJCAI 2009.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Johan van Benthem</author>
</authors>
<date>1986</date>
<note>Essays in Logical Semantics. Reidel.</note>
<marker>van Benthem, 1986</marker>
<rawString>Johan van Benthem. 1986. Essays in Logical Semantics. Reidel.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>