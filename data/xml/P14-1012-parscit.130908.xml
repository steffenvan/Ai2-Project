<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000007">
<title confidence="0.9444165">
Learning New Semi-Supervised Deep Auto-encoder Features
for Statistical Machine Translation
</title>
<author confidence="0.997713">
Shixiang Lu, Zhenbiao Chen, Bo Xu
</author>
<affiliation confidence="0.992774">
Interactive Digital Media Technology Research Center (IDMTech)
Institute of Automation, Chinese Academy of Sciences, Beijing, China
</affiliation>
<email confidence="0.997104">
{shixiang.lu,zhenbiao.chen,xubo}@ia.ac.cn
</email>
<sectionHeader confidence="0.994751" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999687086956522">
In this paper, instead of designing new fea-
tures based on intuition, linguistic knowl-
edge and domain, we learn some new
and effective features using the deep auto-
encoder (DAE) paradigm for phrase-based
translation model. Using the unsupervised
pre-trained deep belief net (DBN) to ini-
tialize DAE’s parameters and using the in-
put original phrase features as a teacher for
semi-supervised fine-tuning, we learn new
semi-supervised DAE features, which are
more effective and stable than the unsuper-
vised DBN features. Moreover, to learn
high dimensional feature representation,
we introduce a natural horizontal compo-
sition of more DAEs for large hidden lay-
ers feature learning. On two Chinese-
English tasks, our semi-supervised DAE
features obtain statistically significant im-
provements of 1.34/2.45 (IWSLT) and
0.82/1.52 (NIST) BLEU points over the
unsupervised DBN features and the base-
line features, respectively.
</bodyText>
<sectionHeader confidence="0.998885" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.998886527272728">
Recently, many new features have been explored
for SMT and significant performance have been
obtained in terms of translation quality, such as
syntactic features, sparse features, and reordering
features. However, most of these features are man-
ually designed on linguistic phenomena that are
related to bilingual language pairs, thus they are
very difficult to devise and estimate.
Instead of designing new features based on in-
tuition, linguistic knowledge and domain, for the
first time, Maskey and Zhou (2012) explored the
possibility of inducing new features in an unsuper-
vised fashion using deep belief net (DBN) (Hinton
et al., 2006) for hierarchical phrase-based trans-
lation model. Using the 4 original phrase fea-
tures in the phrase table as the input features, they
pre-trained the DBN by contrastive divergence
(Hinton, 2002), and generated new unsupervised
DBN features using forward computation. These
new features are appended as extra features to the
phrase table for the translation decoder.
However, the above approach has two major
shortcomings. First, the input original features
for the DBN feature learning are too simple, the
limited 4 phrase features of each phrase pair,
such as bidirectional phrase translation probabil-
ity and bidirectional lexical weighting (Koehn et
al., 2003), which are a bottleneck for learning ef-
fective feature representation. Second, it only uses
the unsupervised layer-wise pre-training of DBN
built with stacked sets of Restricted Boltzmann
Machines (RBM) (Hinton, 2002), does not have a
training objective, so its performance relies on the
empirical parameters. Thus, this approach is un-
stable and the improvement is limited. In this pa-
per, we strive to effectively address the above two
shortcomings, and systematically explore the pos-
sibility of learning new features using deep (multi-
layer) neural networks (DNN, which is usually re-
ferred under the name Deep Learning) for SMT.
To address the first shortcoming, we adapt and
extend some simple but effective phrase features
as the input features for new DNN feature learn-
ing, and these features have been shown sig-
nificant improvement for SMT, such as, phrase
pair similarity (Zhao et al., 2004), phrase fre-
quency, phrase length (Hopkins and May, 2011),
and phrase generative probability (Foster et al.,
2010), which also show further improvement for
new phrase feature learning in our experiments.
To address the second shortcoming, inspired
by the successful use of DAEs for handwrit-
ten digits recognition (Hinton and Salakhutdinov,
2006; Hinton et al., 2006), information retrieval
(Salakhutdinov and Hinton, 2009; Mirowski et
</bodyText>
<page confidence="0.957744">
122
</page>
<note confidence="0.8339635">
Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics, pages 122–132,
Baltimore, Maryland, USA, June 23-25 2014. c�2014 Association for Computational Linguistics
</note>
<bodyText confidence="0.999394754098361">
al., 2010), and speech spectrograms (Deng et al.,
2010), we propose new feature learning using
semi-supervised DAE for phrase-based translation
model. By using the input data as the teacher, the
“semi-supervised” fine-tuning process of DAE ad-
dresses the problem of “back-propagation without
a teacher” (Rumelhart et al., 1986), which makes
the DAE learn more powerful and abstract features
(Hinton and Salakhutdinov, 2006). For our semi-
supervised DAE feature learning task, we use the
unsupervised pre-trained DBN to initialize DAE’s
parameters and use the input original phrase fea-
tures as the “teacher” for semi-supervised back-
propagation. Compared with the unsupervised
DBN features, our semi-supervised DAE features
are more effective and stable.
Moreover, to learn high dimensional feature
representation, we introduce a natural horizontal
composition for DAEs (HCDAE) that can be used
to create large hidden layer representations simply
by horizontally combining two (or more) DAEs
(Baldi, 2012), which shows further improvement
compared with single DAE in our experiments.
It is encouraging that, non-parametric feature
expansion using gaussian mixture model (GMM)
(Nguyen et al., 2007), which guarantees invari-
ance to the specific embodiment of the original
features, has been proved as a feasible feature gen-
eration approach for SMT. Deep models such as
DNN have the potential to be much more represen-
tationally efficient for feature learning than shal-
low models like GMM. Thus, instead of GMM,
we use DNN (DBN, DAE and HCDAE) to learn
new non-parametric features, which has the sim-
ilar evolution in speech recognition (Dahl et al.,
2012; Hinton et al., 2012). DNN features are
learned from the non-linear combination of the
input original features, they strong capture high-
order correlations between the activities of the
original features, and we believe this deep learn-
ing paradigm induces the original features to fur-
ther reach their potential for SMT.
Finally, we conduct large-scale experiments
on IWSLT and NIST Chinese-English translation
tasks, respectively, and the results demonstrate
that our solutions solve the two aforementioned
shortcomings successfully. Our semi-supervised
DAE features significantly outperform the unsu-
pervised DBN features and the baseline features,
and our introduced input phrase features signifi-
cantly improve the performance of DAE feature
learning.
The remainder of this paper is organized as fol-
lows. Section 2 briefly summarizes the recent re-
lated work about the applications of DNN for SMT
tasks. Section 3 presents our introduced input fea-
tures for DNN feature learning. Section 4 de-
scribes how to learn our semi-supervised DAE fea-
tures for SMT. Section 5 describes and discusses
the large-scale experimental results. Finally, we
end with conclusions in section 6.
</bodyText>
<sectionHeader confidence="0.999719" genericHeader="related work">
2 Related Work
</sectionHeader>
<bodyText confidence="0.999840769230769">
Recently, there has been growing interest in use of
DNN for SMT tasks. Le et al. (2012) improved
translation quality of n-gram translation model
by using a bilingual neural LM, where transla-
tion probabilities are estimated using a continu-
ous representation of translation units in lieu of
standard discrete representations. Kalchbrenner
and Blunsom (2013) introduced recurrent contin-
uous translation models that comprise a class for
purely continuous sentence-level translation mod-
els. Auli et al. (2013) presented a joint lan-
guage and translation model based on a recur-
rent neural network which predicts target words
based on an unbounded history of both source
and target words. Liu et al. (2013) went be-
yond the log-linear model for SMT and proposed
a novel additive neural networks based translation
model, which overcome some of the shortcom-
ings suffered by the log-linear model: linearity
and the lack of deep interpretation and represen-
tation in features. Li et al. (2013) presented an
ITG reordering classifier based on recursive auto-
encoders, and generated vector space representa-
tions for variable-sized phrases, which enable pre-
dicting orders to exploit syntactic and semantic
information. Lu et al. (2014) adapted and ex-
tended the max-margin based RNN (Socher et al.,
2011) into HPB translation with force decoding
and converting tree, and proposed a RNN based
word topology model for HPB translation, which
successfully capture the topological structure of
the words on the source side in a syntactically and
semantically meaningful order.
However, none of these above works have fo-
cused on learning new features automatically with
input data, and while learning suitable features
(representations) is the superiority of DNN since
it has been proposed. In this paper, we systemat-
ically explore the possibility of learning new fea-
</bodyText>
<page confidence="0.962171">
123
</page>
<equation confidence="0.764985">
Sbm25
d (f, e) =
Xle
j=1
</equation>
<bodyText confidence="0.51337">
tures using DNN for SMT.
</bodyText>
<sectionHeader confidence="0.815536" genericHeader="method">
3 Input Features for DNN Feature
</sectionHeader>
<subsectionHeader confidence="0.735244">
Learning
</subsectionHeader>
<bodyText confidence="0.999837">
The phrase-based translation model (Koehn et al.,
2003; Och and Ney, 2004) has demonstrated supe-
rior performance and been widely used in current
SMT systems, and we employ our implementation
on this translation model. Next, we adapt and ex-
tend some original phrase features as the input fea-
tures for DAE feature learning.
</bodyText>
<subsectionHeader confidence="0.99914">
3.1 Baseline phrase features
</subsectionHeader>
<bodyText confidence="0.996476111111111">
We assume that source phrase f = f1, · · · , flf
and target phrase e = e1, · · · , ele include lf and
le words, respectively. Following (Maskey and
Zhou, 2012), we use the following 4 phrase fea-
tures of each phrase pair (Koehn et al., 2003)
in the phrase table as the first type of input fea-
tures, bidirectional phrase translation probability
(P(e|f) and P(f|e)), bidirectional lexical weight-
ing (Lex(e|f) and Lex(f|e)),
</bodyText>
<equation confidence="0.80257">
X1 → P(f|e), Lex(f|e), P(e|f), Lex(e|f)
</equation>
<subsectionHeader confidence="0.998459">
3.2 Phrase pair similarity
</subsectionHeader>
<bodyText confidence="0.999963375">
Zhao et al. (2004) proposed a way of using term
weight based models in a vector space as addi-
tional evidences for phrase pair translation quality.
This model employ phrase pair similarity to en-
code the weights of content and non-content words
in phrase translation pairs. Following (Zhao et al.,
2004), we calculate bidirectional phrase pair simi-
larity using cosine distance and BM25 distance as,
</bodyText>
<equation confidence="0.985384875">
Ple Plf
i=1 wejp(ej|fi)wfi
Scos j=1
i (e, f) =sqrt(Plej=1 w2ej)sqrt(Plej=1 wej2)
a
Plf Ple j=1 wfip(fi|ej)wej
Scos i=1
d (f,e) =
</equation>
<bodyText confidence="0.996968">
where, p(ej|fi) and p(fi|ej) represents bidirec-
tional word translation probability. wfi and wej
are term weights for source and target words, weja
and wfi
a are the transformed weights mapped from
all source/target words to the target/source dimen-
sion at word ej and fi, respectively.
</bodyText>
<equation confidence="0.99705625">
Sbm25 Xlf (k1 + 1)wfi(k3 + 1)wfi
i (e, f) = i=1 a
idffi
(K + wfi)(k3 + wfi
a )
(k1 + 1)wej(k3 + 1)wej
a
idfej(K + wej)(k3 + weja )
</equation>
<bodyText confidence="0.9994408">
where, k1, b, k3 are set to be 1, 1 and 1000, re-
spectively. K = k1((1 − b) + J/avg(l)), and J is
the phrase length (le or lf), avg(l) is the average
phrase length. Thus, we have the second type of
input features
</bodyText>
<equation confidence="0.614293">
f
X2 � Sicos(f , e), Sibm25(f , e) , Sdcos(e , f) , Sbdm25(e f)
</equation>
<subsectionHeader confidence="0.988453">
3.3 Phrase generative probability
</subsectionHeader>
<bodyText confidence="0.999988833333333">
We adapt and extend bidirectional phrase genera-
tive probabilities as the input features, which have
been used for domain adaptation (Foster et al.,
2010). According to the background LMs, we esti-
mate the bidirectional (source/target side) forward
and backward phrase generative probabilities as
</bodyText>
<equation confidence="0.999554">
Pf (f) = P(f1)P(f2|f1) ··· P(flf |flf −n+1, ··· , flf −1)
Pf (e) = P(e1)P(e2|e1) ··· P(ele|ele−n+1, ··· ,ele−1)
Pb(f) = P(flf )P(flf −1|flf ) ··· P(f1|fn, ··· ,f2)
Pb(e) = P(ele)P(ele−1|ele) ··· P(e1|en, ··· ,e2)
</equation>
<bodyText confidence="0.9111626">
where, the bidirectional forward and backward1
background 4-gram LMs are trained by the corre-
sponding side of bilingual corpus2. Then, we have
the third type of input features
X3 → Pf(e), Pb(e), Pf(f), Pb(f)
</bodyText>
<subsectionHeader confidence="0.995434">
3.4 Phrase frequency
</subsectionHeader>
<bodyText confidence="0.998568">
We consider bidirectional phrase frequency as the
input features, and estimate them as
</bodyText>
<equation confidence="0.996620142857143">
P(f) =
count (f
P
|fi|=|f |count(fi)
count(e)
P(e) = P
|ej|=|e |count(ej)
</equation>
<bodyText confidence="0.998626166666667">
where, the count(f)/count(e) are the total num-
ber of phrase f/e appearing in the source/target side
of the bilingual corpus, and the denominator are
the total number of the phrases whose length are
equal to |f|/|e|, respectively. Then, we have the
forth type of input features
</bodyText>
<equation confidence="0.584868">
X4 → P(f), P(e)
</equation>
<footnote confidence="0.951573571428571">
1Backward LM has been introduced by Xiong et al.
(2011), which successfully capture both the preceding and
succeeding contexts of the current word, and we estimate the
backward LM by inverting the order in each sentence in the
training data from the original order to the reverse order.
2This corpus is used to train the translation model in our
experiments, and we will describe it in detail in section 5.1.
</footnote>
<equation confidence="0.9744225">
sqrt(Plf
i=1 w2 fi)sqrt(Plf
i=1 wfi2)
a
</equation>
<page confidence="0.984561">
124
</page>
<subsectionHeader confidence="0.971874">
3.5 Phrase length
</subsectionHeader>
<bodyText confidence="0.961819">
Phrase length plays an important role in the trans-
lation process (Koehn, 2010; Hopkins and May,
2011). We normalize bidirectional phrase length
by the maximum phrase length, and introduce
them as the last type of input features
X5 → lne , lnf
In summary, except for the first type of phrase
feature X1 which is used by (Maskey and Zhou,
2012), we introduce another four types of effec-
tive phrase features X2, X3, X4 and X5. Now, the
input original phrase features X includes 16 fea-
tures in our experiments, as follows,
</bodyText>
<equation confidence="0.975376">
X → X1, X2, X3, X4, X5
</equation>
<bodyText confidence="0.999978">
We build the DAE network where the first layer
with visible nodes equaling to 16, and each visible
node vi corresponds to the above original features
X in each phrase pair.
</bodyText>
<sectionHeader confidence="0.832255" genericHeader="method">
4 Semi-Supervised Deep Auto-encoder
Features Learning for SMT
</sectionHeader>
<bodyText confidence="0.999968428571429">
Each translation rule in the phrase-based transla-
tion model has a set number of features that are
combined in the log-linear model (Och and Ney,
2002), and our semi-supervised DAE features can
also be combined in this model. In this section,
we design our DAE network with various network
structures for new feature learning.
</bodyText>
<subsectionHeader confidence="0.999585">
4.1 Learning a Deep Belief Net
</subsectionHeader>
<bodyText confidence="0.999920357142857">
Inspired by (Maskey and Zhou, 2012), we first
learn a deep generative model for feature learning
using DBN. DBN is composed of multiple layers
of latent variables with the first layer represent-
ing the visible feature vectors, which is built with
stacked sets of RBMs (Hinton, 2002).
For a RBM, there is full connectivity between
layers, but no connections within either layer. The
connection weight W, hidden layer biases c and
visible layer biases b can be learned efficiently
using the contrastive divergence (Hinton, 2002;
Carreira-Perpinan and Hinton, 2005). When given
a hidden layer h, factorial conditional distribution
of visible layer v can be estimated by
</bodyText>
<equation confidence="0.986898">
P(v = 1|h) = u(b + hTWT)
</equation>
<bodyText confidence="0.9998295">
where u denotes the logistic sigmoid. Given v, the
element-wise conditional distribution of h is
</bodyText>
<equation confidence="0.986754">
P(h = 1|v) = u(c+vTW)
</equation>
<figureCaption confidence="0.887557333333333">
Figure 1: Pre-training consists of learning a stack
of RBMs, and these RBMs create an unsupervised
DBN.
</figureCaption>
<bodyText confidence="0.9970625">
The two conditional distributions can be shown
to correspond to the generative model,
</bodyText>
<equation confidence="0.9797835">
1
P(v, h) = Z exp(−E(v, h))
where,
Z =1: e−E(v,h)
v,h
E(v, h) = −bTv − cTh − vTWh
</equation>
<bodyText confidence="0.99997375">
After learning the first RBM, we treat the acti-
vation probabilities of its hidden units, when they
are being driven by data, as the data for training
a second RBM. Similarly, a nth RBM is built on
the output of the n − 1th one and so on until a
sufficiently deep architecture is created. These n
RBMs can then be composed to form a DBN in
which it is easy to infer the states of the nth layer
of hidden units from the input in a single forward
pass (Hinton et al., 2006), as shown in Figure 1.
This greedy, layer-by-layer pre-training can be re-
peated several times to learn a deep, hierarchical
model (DBN) in which each layer of features cap-
tures strong high-order correlations between the
activities of features in the layer below.
To deal with real-valued input features X in our
task, we use an RBM with Gaussian visible units
(GRBM) (Dahl et al., 2012) with a variance of 1
on each dimension. Hence, P(v|h) and E(v, h) in
the first RBM of DBN need to be modified as
</bodyText>
<equation confidence="0.978272">
P(v|h) = N(v; b + hTWT, I)
E(v, h) = 2(v − b)T (v − b) − cTh − vT W h
1
</equation>
<bodyText confidence="0.923096">
where I is the appropriate identity matrix.
</bodyText>
<page confidence="0.995786">
125
</page>
<figureCaption confidence="0.78523625">
Figure 2: After the unsupervised pre-training,
the DBNs are “unrolled” to create a semi-
supervised DAE, which is then fine-tuned using
back-propagation of error derivatives.
</figureCaption>
<bodyText confidence="0.999942235294118">
To speed-up the pre-training, we subdivide the
entire phrase pairs (with features X) in the phrase
table into small mini-batches, each containing 100
cases, and update the weights after each mini-
batch. Each layer is greedily pre-trained for
50 epochs through the entire phrase pairs. The
weights are updated using a learning rate of 0.1,
momentum of 0.9, and a weight decay of 0.0002
× weight × learning rate. The weight matrix W
are initialized with small random values sampled
from a zero-mean normal distribution with vari-
ance 0.01.
After the pre-training, for each phrase pair in
the phrase table, we generate the DBN features
(Maskey and Zhou, 2012) by passing the original
phrase features X through the DBN using forward
computation.
</bodyText>
<subsectionHeader confidence="0.896892">
4.2 From DBN to Deep Auto-encoder
</subsectionHeader>
<bodyText confidence="0.999994081632653">
To learn a semi-supervised DAE, we first “unroll”
the above n layer DBN by using its weight ma-
trices to create a deep, 2n-1 layer network whose
lower layers use the matrices to “encode” the in-
put and whose upper layers use the matrices in
reverse order to “decode” the input (Hinton and
Salakhutdinov, 2006; Salakhutdinov and Hinton,
2009; Deng et al., 2010), as shown in Figure 2.
The layer-wise learning of DBN as above must be
treated as a pre-training stage that finds a good
region of the parameter space, which is used to
initialize our DAE’s parameters. Starting in this
region, the DAE is then fine-tuned using average
squared error (between the output and input) back-
propagation to minimize reconstruction error, as to
make its output as equal as possible to its input.
For the fine-tuning of DAE, we use the method
of conjugate gradients on larger mini-batches of
1000 cases, with three line searches performed
for each mini-batch in each epoch. To determine
an adequate number of epochs and to avoid over-
fitting, we fine-tune on a fraction phrase table
and test performance on the remaining validation
phrase table, and then repeat fine-tuning on the en-
tire phrase table for 100 epochs.
We experiment with various values for the noise
variance and the threshold, as well as the learn-
ing rate, momentum, and weight-decay parame-
ters used in the pre-training, the batch size and
epochs in the fine-tuning. Our results are fairly ro-
bust to variations in these parameters. The precise
weights found by the pre-training do not matter
as long as it finds a good region of the parameter
space from which to start the fine-tuning.
The fine-tuning makes the feature representa-
tion in the central layer of the DAE work much
better (Salakhutdinov and Hinton, 2009). After
the fine-tuning, for each phrase pair in the phrase
table, we estimate our DAE features by passing the
original phrase features X through the “encoder”
part of the DAE using forward computation.
To combine these learned features (DBN and
DAE feature) into the log-linear model, we need
to eliminate the impact of the non-linear learning
mechanism. Following (Maskey and Zhou, 2012),
these learned features are normalized by the av-
erage of each dimensional respective feature set.
Then, we append these features for each phrase
pair to the phrase table as extra features.
</bodyText>
<subsectionHeader confidence="0.575377">
4.3 Horizontal Composition of Deep
Auto-encoders (HCDAE)
</subsectionHeader>
<bodyText confidence="0.999923">
Although DAE can learn more powerful and ab-
stract feature representation, the learned features
usually have smaller dimensionality compared
with the dimensionality of the input features, such
as the successful use for handwritten digits recog-
nition (Hinton and Salakhutdinov, 2006; Hinton
et al., 2006), information retrieval (Salakhutdinov
and Hinton, 2009; Mirowski et al., 2010), and
</bodyText>
<page confidence="0.998262">
126
</page>
<figureCaption confidence="0.999363">
Figure 3: Horizontal composition of DAEs to ex-
pand high-dimensional features learning.
</figureCaption>
<bodyText confidence="0.999951379310345">
speech spectrograms (Deng et al., 2010). More-
over, although we have introduced another four
types of phrase features (X2, X3, X4 and X5), the
only 16 features in X are a bottleneck for learning
large hidden layers feature representation, because
it has limited information, the performance of the
high-dimensional DAE features which are directly
learned from single DAE is not very satisfactory.
To learn high-dimensional feature representa-
tion and to further improve the performance, we
introduce a natural horizontal composition for
DAEs that can be used to create large hidden layer
representations simply by horizontally combining
two (or more) DAEs (Baldi, 2012), as shown in
Figure 3. Two single DAEs with architectures
16/m1/16 and 16/m2/16 can be trained and the
hidden layers can be combined to yield an ex-
panded hidden feature representation of size m1 +
m2, which can then be fed to the subsequent lay-
ers of the overall architecture. Thus, these new
m1 + m2-dimensional DAE features are added as
extra features to the phrase table.
Differences in m1- and m2-dimensional hidden
representations could be introduced by many dif-
ferent mechanisms (e.g., learning algorithms, ini-
tializations, training samples, learning rates, or
distortion measures) (Baldi, 2012). In our task,
we introduce differences by using different initial-
izations and different fractions of the phrase table.
</bodyText>
<table confidence="0.9994014375">
4-16-8-2 4-16-8-4 4- 16-16-8
4-16-8-4-2 4- 16-16-8-4 4- 16- 16-8-8
4-16-16-8-4-2 4- 16-16-8-8-4 4- 16- 16-16-8-8
4-16-16-8-8-4-2 4- 16-16-16-8-8-4 4- 16- 16-16-16-8-8
6-16-8-2 6-16-8-4 6- 16-16-8
6-16-8-4-2 6- 16-16-8-4 6- 16- 16-8-8
6-16-16-8-4-2 6- 16-16-8-8-4 6- 16- 16-16-8-8
6-16-16-16-8-4-2 6- 16-16-16-8-8-4 6- 16- 16-16-16-8-8
8-16-8-2 8-16-8-4 8- 16-16-8
8-16-8-4-2 8- 16-16-8-4 8- 16- 16-8-8
8-16-16-8-4-2 8- 16-16-8-8-4 8- 16- 16-16-8-8
8-16-16-16-8-4-2 8- 16-16-16-8-8-4 8- 16- 16-16-16-8-8
16-32-16-2 16- 32-16-4 16- 32-16-8
16-32- 16-8 -2 16- 32-16-8-4 16- 32- 32-16-8
16-32- 16-8 -4-2 16- 32-32-16-8-4 16- 32- 32-16-16-8
16-32- 32-16 -8-4-2 16- 32-32-16-16-8-4 16- 32- 32-32-16-16-8
</table>
<tableCaption confidence="0.998551">
Table 1: Details of the used network structure.
</tableCaption>
<bodyText confidence="0.996259666666667">
For example, the architecture 16-32-16-2 (4 lay-
ers’ network depth) corresponds to the DAE with
16-dimensional input features (X) (input layer),
32/16 hidden units (first/second hidden layer), and
2-dimensional output features (new DAE features)
(output layer). During the fine-tuning, the DAE’s
network structure becomes 16-32-16-2-16-32-16.
Correspondingly, 4-16-8-2 and 6(8)-16-8-2 repre-
sent the input features are X1 and X1+Xi.
</bodyText>
<sectionHeader confidence="0.995645" genericHeader="evaluation">
5 Experiments and Results
</sectionHeader>
<subsectionHeader confidence="0.914834">
5.1 Experimental Setup
</subsectionHeader>
<bodyText confidence="0.999969608695652">
We now test our DAE features on the following
two Chinese-English translation tasks.
IWSLT. The bilingual corpus is the Chinese-
English part of Basic Traveling Expression cor-
pus (BTEC) and China-Japan-Korea (CJK) cor-
pus (0.38M sentence pairs with 3.5/3.8M Chi-
nese/English words). The LM corpus is the En-
glish side of the parallel data (BTEC, CJK and
CWMT083) (1.34M sentences). Our development
set is IWSLT 2005 test set (506 sentences), and our
test set is IWSLT 2007 test set (489 sentences).
NIST. The bilingual corpus is LDC4 (3.4M sen-
tence pairs with 64/70M Chinese/English words).
The LM corpus is the English side of the paral-
lel data as well as the English Gigaword corpus
(LDC2007T07) (11.3M sentences). Our develop-
ment set is NIST 2005 MT evaluation set (1084
sentences), and our test set is NIST 2006 MT eval-
uation set (1664 sentences).
We choose the Moses (Koehn et al., 2007)
framework to implement our phrase-based ma-
chine system. The 4-gram LMs are estimated
by the SRILM toolkit with modified Kneser-Ney
</bodyText>
<footnote confidence="0.9510418">
3the 4th China Workshop on Machine Translation
4LDC2002E18, LDC2002T01, LDC2003E07,
LDC2003E14, LDC2003T17, LDC2004T07, LDC2004T08,
LDC2005T06, LDC2005T10, LDC2005T34, LDC2006T04,
LDC2007T09
</footnote>
<page confidence="0.98874">
127
</page>
<table confidence="0.999874538461538">
# Features Dev IWSLT Dev NIST
Test Test
1 Baseline 50.81 41.13 36.12 32.59
2 +DBN X1 2f 51.92 42.07* 36.33 33.11*
3 +DAE X1 2f 52.49 43.22** 36.92 33.44**
4 +DBN X1 4f 51.45 41.78* 36.45 33.12*
5 +DAE X1 4f 52.45 43.06** 36.88 33.47**
6 +HCDAE X1 2+2f 53.69 43.23*** 37.06 33.68***
X1
7 +DBN X1 8f 51.74 41.85* 36.61 33.24*
8 +DAE X1 8f 52.33 42.98** 36.81 33.36**
9 +HCDAE X1 4+4f 52.52 43.26*** 37.01 33.63***
10 +DBN X 2f 52.21 42.24* 36.72 33.21*
11 +DAE X 2f 52.86 43.45** 37.39 33.83**
12 +DBN X 4f 51.83 42.08* 34.45 33.07*
13 X +DAE X 4f 52.81 43.47** 37.48 33.92**
14 +HCDAE X 2+2f 53.05 43.58*** 37.59 34.11***
15 +DBN X 8f 51.93 42.01* 36.74 33.29*
16 +DAE X 8f 52.69 43.26** 37.36 33.75**
17 +HCDAE X 4+4f 52.93 43.49*** 37.53 34.02***
18 +(X2+X3+X4+X5) 52.23 42.91* 36.96 33.65*
19 +(X2+X3+X4+X5)+DAE X 2f 53.55 44.17+*** 38.23 34.50+***
20 +(X2+X3+X4+X5)+DAE X 4f 53.61 44.22+*** 38.28 34.47+***
21 +(X2+X3+X4+X5)+HCDAE X 2+2f 53.75 44.28+**** 38.35 34.65+****
22 +(X2+X3+X4+X5)+DAE X 8f 53.47 44.19+*** 38.26 34.46+***
23 +(X2+X3+X4+X5)+HCDAE X 4+4f 53.62 44.29+**** 38.39 34.57+****
</table>
<tableCaption confidence="0.991021">
Table 2: The translation results by adding new DNN features (DBN feature (Maskey and Zhou, 2012),
</tableCaption>
<bodyText confidence="0.992233666666667">
our proposed DAE and HCDAE feature) as extra features to the phrase table on two tasks. “DBN X1 xf”,
“DBN X xf”, “DAE X1 xf” and “DAE X xf” represent that we use DBN and DAE, input features
X1 and X, to learn x-dimensional features, respectively. “HCDAE X x+xf” represents horizontally
combining two DAEs and each DAE has the same x-dimensional learned features. All improvements on
two test sets are statistically significant by the bootstrap resampling (Koehn, 2004). *: significantly better
than the baseline (p &lt; 0.05), **: significantly better than “DBN X1 xf” or “DBN X xf” (p &lt; 0.01),
***: significantly better than “DAE X1 xf” or “DAE X xf” (p &lt; 0.01), ****: significantly better than
“HCDAE X x+xf” (p &lt; 0.01), +: significantly better than “X2+X3+X4+X5” (p &lt; 0.01).
discounting. We perform pairwise ranking opti-
mization (Hopkins and May, 2011) to tune feature
weights. The translation quality is evaluated by
case-insensitive IBM BLEU-4 metric.
The baseline translation models are generated
by Moses with default parameter settings. In the
contrast experiments, our DAE and HCDAE fea-
tures are appended as extra features to the phrase
table. The details of the used network structure in
our experiments are shown in Table 1.
</bodyText>
<subsectionHeader confidence="0.94264">
5.2 Results
</subsectionHeader>
<bodyText confidence="0.9889586">
Table 2 presents the main translation results. We
use DBN, DAE and HCDAE (with 6 layers’ net-
work depth), input features X1 and X, to learn 2-,
4- and 8-dimensional features, respectively. From
the results, we can get some clear trends:
</bodyText>
<listItem confidence="0.999158692307692">
1. Adding new DNN features as extra features
significantly improves translation accuracy (row
2-17 vs. 1), with the highest increase of 2.45
(IWSLT) and 1.52 (NIST) (row 14 vs. 1) BLEU
points over the baseline features.
2. Compared with the unsupervised DBN fea-
tures, our semi-supervised DAE features are more
effective for translation decoder (row 3 vs. 2; row
5 vs. 4; row 8 vs. 7; row 11 vs. 10; row 13 vs.
12; row 16 vs. 15). Specially, Table 3 shows the
variance distributions of the learned each dimen-
sional DBN and DAE feature, our DAE features
have bigger variance distributions which means
</listItem>
<page confidence="0.998545">
128
</page>
<tableCaption confidence="0.843041">
Table 3: The variance distributions of each dimensional learned DBN feature and DAE feature on the
two tasks.
</tableCaption>
<figureCaption confidence="0.9650595">
Figure 4: The compared results of feature learning with different network structures on two development
sets.
</figureCaption>
<figure confidence="0.910058176470588">
Features IWSLT NIST
Q1 Q2 Q3 Q4
Q1 Q2 Q3 Q4
DBN X1 4f 0.1678 0.2873 0.2037 0.1622 0.0691 0.1813 0.0828 0.1637
DBN X 4f 0.2010 0.1590 0.2793 0.1692 0.1267 0.1146 0.2147 0.1051
DAE X1 4f 0.5072 0.4486 0.1309 0.6012 0.2136 0.2168 0.2047 0.2526
DAE X 4f 0.5215 0.4594 0.2371 0.6903 0.2421 0.2694 0.3034 0.2642
IWSLT
NIST
Features
Dev Test
Dev Test
+DAE X1 4f
52.45 43.06
36.88 33.47
37.28 33.80*
52.76 43.38*
</figure>
<equation confidence="0.899217846153846">
+DAE X1+X2 4f
37.13 33.66*
52.61 43.27*
+DAE X1+X3 4f
36.96 33.58*
52.52 43.24*
+DAE X1+X4 4f
36.96 33.56*
+DAE X 4f
+DAE X1+X5 4f
52.49 43.13*
37.48 33.92*
52.81 43.47*
</equation>
<bodyText confidence="0.837858956521739">
Table 4: The effectiveness of our introduced in-
put features. “DAE X1+XZ 4f&apos; represents that
we use DAE, input features X1 + XZ, to learn 4-
dimensional features. *: significantly better than
“DAE X1 4f&apos; (p &lt; 0.05).
our DAE features have more discriminative power,
and also their variance distributions are more sta-
ble.
3. HCDAE outperforms single DAE for high
dimensional feature learning (row 6 vs. 5; row 9
vs. 8; row 14 vs. 13; row 17 vs. 16), and further
improve the performance of DAE feature learning,
which can also somewhat address the bring short-
coming of the limited input features.
4. Except for the phrase feature X1 (Maskey
and Zhou, 2012), our introduced input features
X significantly improve the DAE feature learn-
ing (row 11 vs. 3; row 13 vs. 5; row 16 vs. 8).
Specially, Table 4 shows the detailed effectiveness
of our introduced input features for DAE feature
learning, and the results show that each type of
features are very effective for DAE feature learn-
ing.
</bodyText>
<listItem confidence="0.874101636363636">
5. Adding the original features (X2, X3, X4 and
X5) and DAE/HCDAE features together can fur-
ther improve translation performance (row 19-23
vs. 18), with the highest increase of 3.16 (IWSLT)
and 2.06 (NIST) (row 21 vs. 1) BLEU points over
the baseline features. DAE and HCDAE features
are learned from the non-linear combination of the
original features, they strong capture high-order
correlations between the activities of the original
features, as to be further interpreted to reach their
potential for SMT. We suspect these learned fea-
</listItem>
<page confidence="0.995882">
129
</page>
<bodyText confidence="0.781828">
tures are complementary to the original features.
</bodyText>
<subsectionHeader confidence="0.765557">
5.3 Analysis
</subsectionHeader>
<figureCaption confidence="0.615001666666667">
Figure 5: The compared results of using single
DAE and the HCDAE for feature learning on two
development sets.
</figureCaption>
<bodyText confidence="0.995164217391305">
Figure 4 shows our DAE features are not only
more effective but also more stable than DBN
features with various network structures. Also,
adding more input features (X vs. Xi) not only
significantly improves the performance of DAE
feature learning, but also slightly improves the
performance of DBN feature learning.
Figure 5 shows there is little change in the per-
formance of using single DAE to learn different
dimensional DAE features, but the 4-dimensional
features work more better and more stable. HC-
DAE outperforms the single DAE and learns high-
dimensional representation more effectively, espe-
cially for the peak point in each condition.
Figures 5 also shows the best network depth for
DAE feature learning is 6 layers. When the net-
work depth of DBN is 7 layers, the network depth
of corresponding DAE during the fine-tuning is 13
layers. Although we have pre-trained the corre-
sponding DBN, this DAE network is so deep, the
fine-tuning does not work very well and typically
finds poor local minima. We suspect this leads to
the decreased performance.
</bodyText>
<sectionHeader confidence="0.999002" genericHeader="conclusions">
6 Conclusions
</sectionHeader>
<bodyText confidence="0.99998875">
In this paper, instead of designing new features
based on intuition, linguistic knowledge and do-
main, we have learned new features using the DAE
for the phrase-based translation model. Using the
unsupervised pre-trained DBN to initialize DAE’s
parameters and using the input original phrase fea-
tures as the “teacher” for semi-supervised back-
propagation, our semi-supervised DAE features
are more effective and stable than the unsuper-
vised DBN features (Maskey and Zhou, 2012).
Moreover, to further improve the performance, we
introduce some simple but effective features as
the input features for feature learning. Lastly, to
learn high dimensional feature representation, we
introduce a natural horizontal composition of two
DAEs for large hidden layers feature learning.
On two Chinese-English translation tasks, the
results demonstrate that our solutions solve the
two aforementioned shortcomings successfully.
Firstly, our DAE features obtain statistically sig-
nificant improvements of 1.34/2.45 (IWSLT) and
0.82/1.52 (NIST) BLEU points over the DBN fea-
tures and the baseline features, respectively. Sec-
ondly, compared with the baseline phrase features
Xi, our introduced input original phrase features
X significantly improve the performance of not
only our DAE features but also the DBN features.
The results also demonstrate that DNN (DAE
and HCDAE) features are complementary to the
original features for SMT, and adding them to-
gether obtain statistically significant improve-
ments of 3.16 (IWSLT) and 2.06 (NIST) BLEU
points over the baseline features. Compared with
the original features, DNN (DAE and HCDAE)
features are learned from the non-linear combi-
nation of the original features, they strong cap-
ture high-order correlations between the activities
of the original features, and we believe this deep
learning paradigm induces the original features to
further reach their potential for SMT.
</bodyText>
<sectionHeader confidence="0.998028" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.9996905">
This work was supported by 863 program in
China (No. 2011AA01A207). We would like to
thank Xingyuan Peng, Lichun Fan and Hongyan
Li for their helpful discussions. We also thank
the anonymous reviewers for their insightful com-
ments.
</bodyText>
<page confidence="0.995961">
130
</page>
<sectionHeader confidence="0.982179" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.998083019230769">
Michael Auli, Michel Galley, Chris Quirk and Geoffrey
Zweig. 2013. Joint language and translation model-
ing with recurrent neural networks. In Proceedings
of EMNLP, pages 1044-1054.
Pierre Baldi. 2012. Autoencoders, unsupervised learn-
ing, and deep architectures. JMLR: workshop on un-
supervised and transfer learning, 27:37-50.
Miguel A. Carreira-Perpinan and Geoffrey E. Hinton.
2005. On contrastive divergence learning. In Pro-
ceedings of AI and Statistics.
George Dahl, Dong Yu, Li Deng, and Alex Acero.
2012. Context-dependent pre-trained deep neural
networks for large vocabulary speech recognition.
IEEE Transactions on Audio, Speech, and Language
Processing, 20(1):30-42.
Li Deng, Mike Seltzer, Dong Yu, Alex Acero, Abdel-
rahman Mohamed, and Geoffrey E. Hinton. 2010.
Binary coding of speech spectrograms using a deep
auto-encoder. In Proceedings of INTERSPEECH,
pages 1692-1695.
George Foster, Cyril Goutte, and Roland Kuhn. 2010.
Discriminative instance weighting for domain adap-
tation in statistical machine translation. In Proceed-
ings of EMNLP, pages 451-459.
Geoffrey E. Hinton. 2002. Training products of ex-
perts by minimizing contrastive divergence. Neural
Computation, 14(8):1771-1800.
Geoffrey E. Hinton, Li Deng, Dong Yu, George Dahl,
Abdel-rahman Mohamed, Navdeep Jaitly, Andrew
Senior, Vincent Vanhoucke, Patrick Nguyen, Tara
Sainath, and Brian Kingsbury. 2012. Deep neural
networks for acoustic modeling in speech tecogni-
tion. IEEE Signal Processing Magazine, 29(6):82-
97.
Geoffrey E. Hinton, Alex Krizhevsky, and Sida D.
Wang. 2001. Transforming auto-encoders. In Pro-
ceedings of ANN.
Geoffrey E. Hinton and Ruslan R. Salakhutdinov.
2006. Reducing the dimensionality of data with
neural networks. Science, 313:504-507.
Geoffrey E. Hinton, Simon Osindero, and Yee-Whye
Teh. 2006. A fast learning algorithm for deep belief
nets. Neural Computation, 18:1527-1544.
Mark Hopkins and Jonathan May 2011. Tuning as
ranking. In Proceedings of EMNLP, pages 1352-
1362.
Nal Kalchbrenner and Phil Blunsom. 2013. Recur-
rent continuous translation models. In Proceedings
of EMNLP, pages 1700-1709.
Philipp Koehn. 2004. Statistical significance tests
from achine translation evaluation. In Proceedings
of ACL, pages 388-395.
Philipp Koehn. 2010. Statistical machine translation.
Cambridge University Press.
Philipp Koehn, Hieu Hoang, Alexandra Birch, Chris
Callison-Burch, Marcello Federico, Nicola Bertoldi,
Brooke Cowan, Wade Shen, Christine Moran,
Richard Zens, Chris Dyer, Ondrej Bojar, Alexandra
Constantin, and Evan Herbst. 2007. Moses: Open
source toolkit for statistical machine translation. In
Proceedings of ACL, Demonstration Session, pages
177-180.
Philipp Koehn, Franz J. Och, and Daniel Marcu. 2003.
Statistical phrase-based translation. In Proceedings
of NAACL, pages 48-54.
Hai-Son Le, Alexandre Allauzen, and Franc¸ois Yvon.
2012. Continuous space translation models with
neural networks. In Proceedings of NAACL, pages
39-48.
Peng Li, Yang Liu, Maosong Sun. 2013. Recursive
autoencoders for ITG-based translation. In Proceed-
ings of EMNLP, pages 567-577.
Lemao Liu, Taro Watanabe, Eiichiro Sumita, and
Tiejun Zhao. 2013. Additive neural networks for
statistical machine translation. In Proceedings of
ACL, pages 791-801.
Shixiang Lu, Wei Wei, Xiaoyin Fu and Bo Xu. 2014.
Recursive neural network based word topology
model for hierarchical phrase-based speech transla-
tion. In Proceedings of ICASSP.
Yuval Marton and Philip Resnik. 2008. Soft syntactic
constraints for hierarchical phrase-based translation.
In Proceedings ofACL, pages 1003-1011.
Sameer Maskey and Bowen Zhou. 2012. Unsuper-
vised deep belief features for speech translation. In
Proceedings of INTERSPEECH.
Piotr Mirowski, MarcAurelio Ranzato, and Yann Le-
Cun. 2010. Dynamic auto-encoders for semantic
indexing. In Proceedings of NIPS-2010 Workshop
on Deep Learning.
Patrick Nguyen, Milind Mahajan, and Xiaodong He.
2007. Training non-parametric features for statis-
tical machine translation. In Proceedings of WMT,
pages 72-79.
Franz J. Och and Hermann Ney. 2000. Improved sta-
tistical alignment models. In Proceedings of ACL,
pages 440-447.
Franz J. Och and Hermann Ney. 2002. Discriminative
training and maximum entropy models for statistical
machine translation. In Proceedings of ACL, pages
295-302.
Franz J. Och and Hermann Ney. 2004. The alignment
template approach to statistical machine translation.
Computational Linguistics, 30(4):417-449.
</reference>
<page confidence="0.977891">
131
</page>
<reference confidence="0.99965585">
David Rumelhart, Geoffrey E. Hinton, and Ronale
Williams. 1986. Learning internal representations
by back-propagation errors. Parallel Distributed
Processing, Vol 1: Foundations, MIT Press.
Ruslan R. Salakhutdinov and Geoffrey E. Hinton.
2009. Semantic hashing. International Journal of
Approximate Reasoning, 50(7):969-978.
Richard Socher, Cliff C. Lin, Andrew Y. Ng, and
Christopher D. Manning. 2011. Parsing natural
scenes and natural language with recursive neural
networks. In Proceedings of ICML.
Deyi Xiong, Min Zhang, and Haizhou Li. 2011.
Enhancing language models in statistical machine
translation with backward n-grams and mutual in-
formation triggers. In Proceedings of ACL, pages
1288-1297.
Bing Zhao, Stephan Vogel, and Alex Waibel. 2004.
Phrase pair rescoring with term weightings for sta-
tistical machine translation. In Proceedings of
EMNLP.
</reference>
<page confidence="0.997709">
132
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.798314">
<title confidence="0.999378">Learning New Semi-Supervised Deep Auto-encoder for Statistical Machine Translation</title>
<author confidence="0.99913">Shixiang Lu</author>
<author confidence="0.99913">Zhenbiao Chen</author>
<author confidence="0.99913">Bo</author>
<affiliation confidence="0.999086">Interactive Digital Media Technology Research Center Institute of Automation, Chinese Academy of Sciences, Beijing,</affiliation>
<abstract confidence="0.991141666666667">In this paper, instead of designing new features based on intuition, linguistic knowledge and domain, we learn some new and effective features using the deep autoencoder (DAE) paradigm for phrase-based translation model. Using the unsupervised pre-trained deep belief net (DBN) to initialize DAE’s parameters and using the input original phrase features as a teacher for semi-supervised fine-tuning, we learn new semi-supervised DAE features, which are more effective and stable than the unsupervised DBN features. Moreover, to learn high dimensional feature representation, we introduce a natural horizontal composition of more DAEs for large hidden layers feature learning. On two Chinese- English tasks, our semi-supervised DAE features obtain statistically significant improvements of 1.34/2.45 (IWSLT) and 0.82/1.52 (NIST) BLEU points over the unsupervised DBN features and the baseline features, respectively.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Michael Auli</author>
<author>Michel Galley</author>
<author>Chris Quirk</author>
<author>Geoffrey Zweig</author>
</authors>
<title>Joint language and translation modeling with recurrent neural networks.</title>
<date>2013</date>
<booktitle>In Proceedings of EMNLP,</booktitle>
<pages>1044--1054</pages>
<contexts>
<context position="7409" citStr="Auli et al. (2013)" startWordPosition="1104" endWordPosition="1107">and discusses the large-scale experimental results. Finally, we end with conclusions in section 6. 2 Related Work Recently, there has been growing interest in use of DNN for SMT tasks. Le et al. (2012) improved translation quality of n-gram translation model by using a bilingual neural LM, where translation probabilities are estimated using a continuous representation of translation units in lieu of standard discrete representations. Kalchbrenner and Blunsom (2013) introduced recurrent continuous translation models that comprise a class for purely continuous sentence-level translation models. Auli et al. (2013) presented a joint language and translation model based on a recurrent neural network which predicts target words based on an unbounded history of both source and target words. Liu et al. (2013) went beyond the log-linear model for SMT and proposed a novel additive neural networks based translation model, which overcome some of the shortcomings suffered by the log-linear model: linearity and the lack of deep interpretation and representation in features. Li et al. (2013) presented an ITG reordering classifier based on recursive autoencoders, and generated vector space representations for varia</context>
</contexts>
<marker>Auli, Galley, Quirk, Zweig, 2013</marker>
<rawString>Michael Auli, Michel Galley, Chris Quirk and Geoffrey Zweig. 2013. Joint language and translation modeling with recurrent neural networks. In Proceedings of EMNLP, pages 1044-1054.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Pierre Baldi</author>
</authors>
<title>Autoencoders, unsupervised learning, and deep architectures. JMLR: workshop on unsupervised and transfer learning,</title>
<date>2012</date>
<pages>27--37</pages>
<contexts>
<context position="5072" citStr="Baldi, 2012" startWordPosition="748" endWordPosition="749"> (Hinton and Salakhutdinov, 2006). For our semisupervised DAE feature learning task, we use the unsupervised pre-trained DBN to initialize DAE’s parameters and use the input original phrase features as the “teacher” for semi-supervised backpropagation. Compared with the unsupervised DBN features, our semi-supervised DAE features are more effective and stable. Moreover, to learn high dimensional feature representation, we introduce a natural horizontal composition for DAEs (HCDAE) that can be used to create large hidden layer representations simply by horizontally combining two (or more) DAEs (Baldi, 2012), which shows further improvement compared with single DAE in our experiments. It is encouraging that, non-parametric feature expansion using gaussian mixture model (GMM) (Nguyen et al., 2007), which guarantees invariance to the specific embodiment of the original features, has been proved as a feasible feature generation approach for SMT. Deep models such as DNN have the potential to be much more representationally efficient for feature learning than shallow models like GMM. Thus, instead of GMM, we use DNN (DBN, DAE and HCDAE) to learn new non-parametric features, which has the similar evolu</context>
<context position="20394" citStr="Baldi, 2012" startWordPosition="3305" endWordPosition="3306">ough we have introduced another four types of phrase features (X2, X3, X4 and X5), the only 16 features in X are a bottleneck for learning large hidden layers feature representation, because it has limited information, the performance of the high-dimensional DAE features which are directly learned from single DAE is not very satisfactory. To learn high-dimensional feature representation and to further improve the performance, we introduce a natural horizontal composition for DAEs that can be used to create large hidden layer representations simply by horizontally combining two (or more) DAEs (Baldi, 2012), as shown in Figure 3. Two single DAEs with architectures 16/m1/16 and 16/m2/16 can be trained and the hidden layers can be combined to yield an expanded hidden feature representation of size m1 + m2, which can then be fed to the subsequent layers of the overall architecture. Thus, these new m1 + m2-dimensional DAE features are added as extra features to the phrase table. Differences in m1- and m2-dimensional hidden representations could be introduced by many different mechanisms (e.g., learning algorithms, initializations, training samples, learning rates, or distortion measures) (Baldi, 201</context>
</contexts>
<marker>Baldi, 2012</marker>
<rawString>Pierre Baldi. 2012. Autoencoders, unsupervised learning, and deep architectures. JMLR: workshop on unsupervised and transfer learning, 27:37-50.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Miguel A Carreira-Perpinan</author>
<author>Geoffrey E Hinton</author>
</authors>
<title>On contrastive divergence learning.</title>
<date>2005</date>
<booktitle>In Proceedings of AI and Statistics.</booktitle>
<contexts>
<context position="14291" citStr="Carreira-Perpinan and Hinton, 2005" startWordPosition="2271" endWordPosition="2274">twork structures for new feature learning. 4.1 Learning a Deep Belief Net Inspired by (Maskey and Zhou, 2012), we first learn a deep generative model for feature learning using DBN. DBN is composed of multiple layers of latent variables with the first layer representing the visible feature vectors, which is built with stacked sets of RBMs (Hinton, 2002). For a RBM, there is full connectivity between layers, but no connections within either layer. The connection weight W, hidden layer biases c and visible layer biases b can be learned efficiently using the contrastive divergence (Hinton, 2002; Carreira-Perpinan and Hinton, 2005). When given a hidden layer h, factorial conditional distribution of visible layer v can be estimated by P(v = 1|h) = u(b + hTWT) where u denotes the logistic sigmoid. Given v, the element-wise conditional distribution of h is P(h = 1|v) = u(c+vTW) Figure 1: Pre-training consists of learning a stack of RBMs, and these RBMs create an unsupervised DBN. The two conditional distributions can be shown to correspond to the generative model, 1 P(v, h) = Z exp(−E(v, h)) where, Z =1: e−E(v,h) v,h E(v, h) = −bTv − cTh − vTWh After learning the first RBM, we treat the activation probabilities of its hidd</context>
</contexts>
<marker>Carreira-Perpinan, Hinton, 2005</marker>
<rawString>Miguel A. Carreira-Perpinan and Geoffrey E. Hinton. 2005. On contrastive divergence learning. In Proceedings of AI and Statistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>George Dahl</author>
<author>Dong Yu</author>
<author>Li Deng</author>
<author>Alex Acero</author>
</authors>
<title>Context-dependent pre-trained deep neural networks for large vocabulary speech recognition.</title>
<date>2012</date>
<journal>IEEE Transactions on Audio, Speech, and Language Processing,</journal>
<pages>20--1</pages>
<contexts>
<context position="5717" citStr="Dahl et al., 2012" startWordPosition="850" endWordPosition="853">ement compared with single DAE in our experiments. It is encouraging that, non-parametric feature expansion using gaussian mixture model (GMM) (Nguyen et al., 2007), which guarantees invariance to the specific embodiment of the original features, has been proved as a feasible feature generation approach for SMT. Deep models such as DNN have the potential to be much more representationally efficient for feature learning than shallow models like GMM. Thus, instead of GMM, we use DNN (DBN, DAE and HCDAE) to learn new non-parametric features, which has the similar evolution in speech recognition (Dahl et al., 2012; Hinton et al., 2012). DNN features are learned from the non-linear combination of the input original features, they strong capture highorder correlations between the activities of the original features, and we believe this deep learning paradigm induces the original features to further reach their potential for SMT. Finally, we conduct large-scale experiments on IWSLT and NIST Chinese-English translation tasks, respectively, and the results demonstrate that our solutions solve the two aforementioned shortcomings successfully. Our semi-supervised DAE features significantly outperform the unsu</context>
<context position="15669" citStr="Dahl et al., 2012" startWordPosition="2524" endWordPosition="2527">til a sufficiently deep architecture is created. These n RBMs can then be composed to form a DBN in which it is easy to infer the states of the nth layer of hidden units from the input in a single forward pass (Hinton et al., 2006), as shown in Figure 1. This greedy, layer-by-layer pre-training can be repeated several times to learn a deep, hierarchical model (DBN) in which each layer of features captures strong high-order correlations between the activities of features in the layer below. To deal with real-valued input features X in our task, we use an RBM with Gaussian visible units (GRBM) (Dahl et al., 2012) with a variance of 1 on each dimension. Hence, P(v|h) and E(v, h) in the first RBM of DBN need to be modified as P(v|h) = N(v; b + hTWT, I) E(v, h) = 2(v − b)T (v − b) − cTh − vT W h 1 where I is the appropriate identity matrix. 125 Figure 2: After the unsupervised pre-training, the DBNs are “unrolled” to create a semisupervised DAE, which is then fine-tuned using back-propagation of error derivatives. To speed-up the pre-training, we subdivide the entire phrase pairs (with features X) in the phrase table into small mini-batches, each containing 100 cases, and update the weights after each mi</context>
</contexts>
<marker>Dahl, Yu, Deng, Acero, 2012</marker>
<rawString>George Dahl, Dong Yu, Li Deng, and Alex Acero. 2012. Context-dependent pre-trained deep neural networks for large vocabulary speech recognition. IEEE Transactions on Audio, Speech, and Language Processing, 20(1):30-42.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Li Deng</author>
<author>Mike Seltzer</author>
<author>Dong Yu</author>
<author>Alex Acero</author>
<author>Abdelrahman Mohamed</author>
<author>Geoffrey E Hinton</author>
</authors>
<title>Binary coding of speech spectrograms using a deep auto-encoder.</title>
<date>2010</date>
<booktitle>In Proceedings of INTERSPEECH,</booktitle>
<pages>1692--1695</pages>
<contexts>
<context position="4126" citStr="Deng et al., 2010" startWordPosition="609" endWordPosition="612">nerative probability (Foster et al., 2010), which also show further improvement for new phrase feature learning in our experiments. To address the second shortcoming, inspired by the successful use of DAEs for handwritten digits recognition (Hinton and Salakhutdinov, 2006; Hinton et al., 2006), information retrieval (Salakhutdinov and Hinton, 2009; Mirowski et 122 Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics, pages 122–132, Baltimore, Maryland, USA, June 23-25 2014. c�2014 Association for Computational Linguistics al., 2010), and speech spectrograms (Deng et al., 2010), we propose new feature learning using semi-supervised DAE for phrase-based translation model. By using the input data as the teacher, the “semi-supervised” fine-tuning process of DAE addresses the problem of “back-propagation without a teacher” (Rumelhart et al., 1986), which makes the DAE learn more powerful and abstract features (Hinton and Salakhutdinov, 2006). For our semisupervised DAE feature learning task, we use the unsupervised pre-trained DBN to initialize DAE’s parameters and use the input original phrase features as the “teacher” for semi-supervised backpropagation. Compared with</context>
<context position="17208" citStr="Deng et al., 2010" startWordPosition="2795" endWordPosition="2798">n with variance 0.01. After the pre-training, for each phrase pair in the phrase table, we generate the DBN features (Maskey and Zhou, 2012) by passing the original phrase features X through the DBN using forward computation. 4.2 From DBN to Deep Auto-encoder To learn a semi-supervised DAE, we first “unroll” the above n layer DBN by using its weight matrices to create a deep, 2n-1 layer network whose lower layers use the matrices to “encode” the input and whose upper layers use the matrices in reverse order to “decode” the input (Hinton and Salakhutdinov, 2006; Salakhutdinov and Hinton, 2009; Deng et al., 2010), as shown in Figure 2. The layer-wise learning of DBN as above must be treated as a pre-training stage that finds a good region of the parameter space, which is used to initialize our DAE’s parameters. Starting in this region, the DAE is then fine-tuned using average squared error (between the output and input) backpropagation to minimize reconstruction error, as to make its output as equal as possible to its input. For the fine-tuning of DAE, we use the method of conjugate gradients on larger mini-batches of 1000 cases, with three line searches performed for each mini-batch in each epoch. To</context>
<context position="19766" citStr="Deng et al., 2010" startWordPosition="3207" endWordPosition="3210">pair to the phrase table as extra features. 4.3 Horizontal Composition of Deep Auto-encoders (HCDAE) Although DAE can learn more powerful and abstract feature representation, the learned features usually have smaller dimensionality compared with the dimensionality of the input features, such as the successful use for handwritten digits recognition (Hinton and Salakhutdinov, 2006; Hinton et al., 2006), information retrieval (Salakhutdinov and Hinton, 2009; Mirowski et al., 2010), and 126 Figure 3: Horizontal composition of DAEs to expand high-dimensional features learning. speech spectrograms (Deng et al., 2010). Moreover, although we have introduced another four types of phrase features (X2, X3, X4 and X5), the only 16 features in X are a bottleneck for learning large hidden layers feature representation, because it has limited information, the performance of the high-dimensional DAE features which are directly learned from single DAE is not very satisfactory. To learn high-dimensional feature representation and to further improve the performance, we introduce a natural horizontal composition for DAEs that can be used to create large hidden layer representations simply by horizontally combining two </context>
</contexts>
<marker>Deng, Seltzer, Yu, Acero, Mohamed, Hinton, 2010</marker>
<rawString>Li Deng, Mike Seltzer, Dong Yu, Alex Acero, Abdelrahman Mohamed, and Geoffrey E. Hinton. 2010. Binary coding of speech spectrograms using a deep auto-encoder. In Proceedings of INTERSPEECH, pages 1692-1695.</rawString>
</citation>
<citation valid="true">
<authors>
<author>George Foster</author>
<author>Cyril Goutte</author>
<author>Roland Kuhn</author>
</authors>
<title>Discriminative instance weighting for domain adaptation in statistical machine translation.</title>
<date>2010</date>
<booktitle>In Proceedings of EMNLP,</booktitle>
<pages>451--459</pages>
<contexts>
<context position="3550" citStr="Foster et al., 2010" startWordPosition="528" endWordPosition="531">e strive to effectively address the above two shortcomings, and systematically explore the possibility of learning new features using deep (multilayer) neural networks (DNN, which is usually referred under the name Deep Learning) for SMT. To address the first shortcoming, we adapt and extend some simple but effective phrase features as the input features for new DNN feature learning, and these features have been shown significant improvement for SMT, such as, phrase pair similarity (Zhao et al., 2004), phrase frequency, phrase length (Hopkins and May, 2011), and phrase generative probability (Foster et al., 2010), which also show further improvement for new phrase feature learning in our experiments. To address the second shortcoming, inspired by the successful use of DAEs for handwritten digits recognition (Hinton and Salakhutdinov, 2006; Hinton et al., 2006), information retrieval (Salakhutdinov and Hinton, 2009; Mirowski et 122 Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics, pages 122–132, Baltimore, Maryland, USA, June 23-25 2014. c�2014 Association for Computational Linguistics al., 2010), and speech spectrograms (Deng et al., 2010), we propose new feature</context>
<context position="11087" citStr="Foster et al., 2010" startWordPosition="1734" endWordPosition="1737"> ej and fi, respectively. Sbm25 Xlf (k1 + 1)wfi(k3 + 1)wfi i (e, f) = i=1 a idffi (K + wfi)(k3 + wfi a ) (k1 + 1)wej(k3 + 1)wej a idfej(K + wej)(k3 + weja ) where, k1, b, k3 are set to be 1, 1 and 1000, respectively. K = k1((1 − b) + J/avg(l)), and J is the phrase length (le or lf), avg(l) is the average phrase length. Thus, we have the second type of input features f X2 � Sicos(f , e), Sibm25(f , e) , Sdcos(e , f) , Sbdm25(e f) 3.3 Phrase generative probability We adapt and extend bidirectional phrase generative probabilities as the input features, which have been used for domain adaptation (Foster et al., 2010). According to the background LMs, we estimate the bidirectional (source/target side) forward and backward phrase generative probabilities as Pf (f) = P(f1)P(f2|f1) ··· P(flf |flf −n+1, ··· , flf −1) Pf (e) = P(e1)P(e2|e1) ··· P(ele|ele−n+1, ··· ,ele−1) Pb(f) = P(flf )P(flf −1|flf ) ··· P(f1|fn, ··· ,f2) Pb(e) = P(ele)P(ele−1|ele) ··· P(e1|en, ··· ,e2) where, the bidirectional forward and backward1 background 4-gram LMs are trained by the corresponding side of bilingual corpus2. Then, we have the third type of input features X3 → Pf(e), Pb(e), Pf(f), Pb(f) 3.4 Phrase frequency We consider bidi</context>
</contexts>
<marker>Foster, Goutte, Kuhn, 2010</marker>
<rawString>George Foster, Cyril Goutte, and Roland Kuhn. 2010. Discriminative instance weighting for domain adaptation in statistical machine translation. In Proceedings of EMNLP, pages 451-459.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Geoffrey E Hinton</author>
</authors>
<title>Training products of experts by minimizing contrastive divergence.</title>
<date>2002</date>
<journal>Neural Computation,</journal>
<pages>14--8</pages>
<contexts>
<context position="2071" citStr="Hinton, 2002" startWordPosition="300" endWordPosition="301">f these features are manually designed on linguistic phenomena that are related to bilingual language pairs, thus they are very difficult to devise and estimate. Instead of designing new features based on intuition, linguistic knowledge and domain, for the first time, Maskey and Zhou (2012) explored the possibility of inducing new features in an unsupervised fashion using deep belief net (DBN) (Hinton et al., 2006) for hierarchical phrase-based translation model. Using the 4 original phrase features in the phrase table as the input features, they pre-trained the DBN by contrastive divergence (Hinton, 2002), and generated new unsupervised DBN features using forward computation. These new features are appended as extra features to the phrase table for the translation decoder. However, the above approach has two major shortcomings. First, the input original features for the DBN feature learning are too simple, the limited 4 phrase features of each phrase pair, such as bidirectional phrase translation probability and bidirectional lexical weighting (Koehn et al., 2003), which are a bottleneck for learning effective feature representation. Second, it only uses the unsupervised layer-wise pre-trainin</context>
<context position="14011" citStr="Hinton, 2002" startWordPosition="2231" endWordPosition="2232">the phrase-based translation model has a set number of features that are combined in the log-linear model (Och and Ney, 2002), and our semi-supervised DAE features can also be combined in this model. In this section, we design our DAE network with various network structures for new feature learning. 4.1 Learning a Deep Belief Net Inspired by (Maskey and Zhou, 2012), we first learn a deep generative model for feature learning using DBN. DBN is composed of multiple layers of latent variables with the first layer representing the visible feature vectors, which is built with stacked sets of RBMs (Hinton, 2002). For a RBM, there is full connectivity between layers, but no connections within either layer. The connection weight W, hidden layer biases c and visible layer biases b can be learned efficiently using the contrastive divergence (Hinton, 2002; Carreira-Perpinan and Hinton, 2005). When given a hidden layer h, factorial conditional distribution of visible layer v can be estimated by P(v = 1|h) = u(b + hTWT) where u denotes the logistic sigmoid. Given v, the element-wise conditional distribution of h is P(h = 1|v) = u(c+vTW) Figure 1: Pre-training consists of learning a stack of RBMs, and these </context>
</contexts>
<marker>Hinton, 2002</marker>
<rawString>Geoffrey E. Hinton. 2002. Training products of experts by minimizing contrastive divergence. Neural Computation, 14(8):1771-1800.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Geoffrey E Hinton</author>
<author>Li Deng</author>
<author>Dong Yu</author>
<author>George Dahl</author>
<author>Abdel-rahman Mohamed</author>
<author>Navdeep Jaitly</author>
<author>Andrew Senior</author>
<author>Vincent Vanhoucke</author>
<author>Patrick Nguyen</author>
<author>Tara Sainath</author>
<author>Brian Kingsbury</author>
</authors>
<title>Deep neural networks for acoustic modeling in speech tecognition.</title>
<date>2012</date>
<journal>IEEE Signal Processing Magazine,</journal>
<pages>29--6</pages>
<contexts>
<context position="5739" citStr="Hinton et al., 2012" startWordPosition="854" endWordPosition="857"> single DAE in our experiments. It is encouraging that, non-parametric feature expansion using gaussian mixture model (GMM) (Nguyen et al., 2007), which guarantees invariance to the specific embodiment of the original features, has been proved as a feasible feature generation approach for SMT. Deep models such as DNN have the potential to be much more representationally efficient for feature learning than shallow models like GMM. Thus, instead of GMM, we use DNN (DBN, DAE and HCDAE) to learn new non-parametric features, which has the similar evolution in speech recognition (Dahl et al., 2012; Hinton et al., 2012). DNN features are learned from the non-linear combination of the input original features, they strong capture highorder correlations between the activities of the original features, and we believe this deep learning paradigm induces the original features to further reach their potential for SMT. Finally, we conduct large-scale experiments on IWSLT and NIST Chinese-English translation tasks, respectively, and the results demonstrate that our solutions solve the two aforementioned shortcomings successfully. Our semi-supervised DAE features significantly outperform the unsupervised DBN features </context>
</contexts>
<marker>Hinton, Deng, Yu, Dahl, Mohamed, Jaitly, Senior, Vanhoucke, Nguyen, Sainath, Kingsbury, 2012</marker>
<rawString>Geoffrey E. Hinton, Li Deng, Dong Yu, George Dahl, Abdel-rahman Mohamed, Navdeep Jaitly, Andrew Senior, Vincent Vanhoucke, Patrick Nguyen, Tara Sainath, and Brian Kingsbury. 2012. Deep neural networks for acoustic modeling in speech tecognition. IEEE Signal Processing Magazine, 29(6):82-97.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Geoffrey E Hinton</author>
<author>Alex Krizhevsky</author>
<author>Sida D Wang</author>
</authors>
<title>Transforming auto-encoders.</title>
<date>2001</date>
<booktitle>In Proceedings of ANN.</booktitle>
<marker>Hinton, Krizhevsky, Wang, 2001</marker>
<rawString>Geoffrey E. Hinton, Alex Krizhevsky, and Sida D. Wang. 2001. Transforming auto-encoders. In Proceedings of ANN.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Geoffrey E Hinton</author>
<author>Ruslan R Salakhutdinov</author>
</authors>
<title>Reducing the dimensionality of data with neural networks.</title>
<date>2006</date>
<journal>Science,</journal>
<pages>313--504</pages>
<contexts>
<context position="3780" citStr="Hinton and Salakhutdinov, 2006" startWordPosition="562" endWordPosition="565">Learning) for SMT. To address the first shortcoming, we adapt and extend some simple but effective phrase features as the input features for new DNN feature learning, and these features have been shown significant improvement for SMT, such as, phrase pair similarity (Zhao et al., 2004), phrase frequency, phrase length (Hopkins and May, 2011), and phrase generative probability (Foster et al., 2010), which also show further improvement for new phrase feature learning in our experiments. To address the second shortcoming, inspired by the successful use of DAEs for handwritten digits recognition (Hinton and Salakhutdinov, 2006; Hinton et al., 2006), information retrieval (Salakhutdinov and Hinton, 2009; Mirowski et 122 Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics, pages 122–132, Baltimore, Maryland, USA, June 23-25 2014. c�2014 Association for Computational Linguistics al., 2010), and speech spectrograms (Deng et al., 2010), we propose new feature learning using semi-supervised DAE for phrase-based translation model. By using the input data as the teacher, the “semi-supervised” fine-tuning process of DAE addresses the problem of “back-propagation without a teacher” (Rumelh</context>
<context position="17156" citStr="Hinton and Salakhutdinov, 2006" startWordPosition="2787" endWordPosition="2790"> small random values sampled from a zero-mean normal distribution with variance 0.01. After the pre-training, for each phrase pair in the phrase table, we generate the DBN features (Maskey and Zhou, 2012) by passing the original phrase features X through the DBN using forward computation. 4.2 From DBN to Deep Auto-encoder To learn a semi-supervised DAE, we first “unroll” the above n layer DBN by using its weight matrices to create a deep, 2n-1 layer network whose lower layers use the matrices to “encode” the input and whose upper layers use the matrices in reverse order to “decode” the input (Hinton and Salakhutdinov, 2006; Salakhutdinov and Hinton, 2009; Deng et al., 2010), as shown in Figure 2. The layer-wise learning of DBN as above must be treated as a pre-training stage that finds a good region of the parameter space, which is used to initialize our DAE’s parameters. Starting in this region, the DAE is then fine-tuned using average squared error (between the output and input) backpropagation to minimize reconstruction error, as to make its output as equal as possible to its input. For the fine-tuning of DAE, we use the method of conjugate gradients on larger mini-batches of 1000 cases, with three line sear</context>
<context position="19529" citStr="Hinton and Salakhutdinov, 2006" startWordPosition="3173" endWordPosition="3176">we need to eliminate the impact of the non-linear learning mechanism. Following (Maskey and Zhou, 2012), these learned features are normalized by the average of each dimensional respective feature set. Then, we append these features for each phrase pair to the phrase table as extra features. 4.3 Horizontal Composition of Deep Auto-encoders (HCDAE) Although DAE can learn more powerful and abstract feature representation, the learned features usually have smaller dimensionality compared with the dimensionality of the input features, such as the successful use for handwritten digits recognition (Hinton and Salakhutdinov, 2006; Hinton et al., 2006), information retrieval (Salakhutdinov and Hinton, 2009; Mirowski et al., 2010), and 126 Figure 3: Horizontal composition of DAEs to expand high-dimensional features learning. speech spectrograms (Deng et al., 2010). Moreover, although we have introduced another four types of phrase features (X2, X3, X4 and X5), the only 16 features in X are a bottleneck for learning large hidden layers feature representation, because it has limited information, the performance of the high-dimensional DAE features which are directly learned from single DAE is not very satisfactory. To lea</context>
</contexts>
<marker>Hinton, Salakhutdinov, 2006</marker>
<rawString>Geoffrey E. Hinton and Ruslan R. Salakhutdinov. 2006. Reducing the dimensionality of data with neural networks. Science, 313:504-507.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Geoffrey E Hinton</author>
<author>Simon Osindero</author>
<author>Yee-Whye Teh</author>
</authors>
<title>A fast learning algorithm for deep belief nets.</title>
<date>2006</date>
<journal>Neural Computation,</journal>
<pages>18--1527</pages>
<contexts>
<context position="1876" citStr="Hinton et al., 2006" startWordPosition="268" endWordPosition="271"> features have been explored for SMT and significant performance have been obtained in terms of translation quality, such as syntactic features, sparse features, and reordering features. However, most of these features are manually designed on linguistic phenomena that are related to bilingual language pairs, thus they are very difficult to devise and estimate. Instead of designing new features based on intuition, linguistic knowledge and domain, for the first time, Maskey and Zhou (2012) explored the possibility of inducing new features in an unsupervised fashion using deep belief net (DBN) (Hinton et al., 2006) for hierarchical phrase-based translation model. Using the 4 original phrase features in the phrase table as the input features, they pre-trained the DBN by contrastive divergence (Hinton, 2002), and generated new unsupervised DBN features using forward computation. These new features are appended as extra features to the phrase table for the translation decoder. However, the above approach has two major shortcomings. First, the input original features for the DBN feature learning are too simple, the limited 4 phrase features of each phrase pair, such as bidirectional phrase translation proba</context>
<context position="3802" citStr="Hinton et al., 2006" startWordPosition="566" endWordPosition="569">e first shortcoming, we adapt and extend some simple but effective phrase features as the input features for new DNN feature learning, and these features have been shown significant improvement for SMT, such as, phrase pair similarity (Zhao et al., 2004), phrase frequency, phrase length (Hopkins and May, 2011), and phrase generative probability (Foster et al., 2010), which also show further improvement for new phrase feature learning in our experiments. To address the second shortcoming, inspired by the successful use of DAEs for handwritten digits recognition (Hinton and Salakhutdinov, 2006; Hinton et al., 2006), information retrieval (Salakhutdinov and Hinton, 2009; Mirowski et 122 Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics, pages 122–132, Baltimore, Maryland, USA, June 23-25 2014. c�2014 Association for Computational Linguistics al., 2010), and speech spectrograms (Deng et al., 2010), we propose new feature learning using semi-supervised DAE for phrase-based translation model. By using the input data as the teacher, the “semi-supervised” fine-tuning process of DAE addresses the problem of “back-propagation without a teacher” (Rumelhart et al., 1986), whi</context>
<context position="15282" citStr="Hinton et al., 2006" startWordPosition="2459" endWordPosition="2462">l distributions can be shown to correspond to the generative model, 1 P(v, h) = Z exp(−E(v, h)) where, Z =1: e−E(v,h) v,h E(v, h) = −bTv − cTh − vTWh After learning the first RBM, we treat the activation probabilities of its hidden units, when they are being driven by data, as the data for training a second RBM. Similarly, a nth RBM is built on the output of the n − 1th one and so on until a sufficiently deep architecture is created. These n RBMs can then be composed to form a DBN in which it is easy to infer the states of the nth layer of hidden units from the input in a single forward pass (Hinton et al., 2006), as shown in Figure 1. This greedy, layer-by-layer pre-training can be repeated several times to learn a deep, hierarchical model (DBN) in which each layer of features captures strong high-order correlations between the activities of features in the layer below. To deal with real-valued input features X in our task, we use an RBM with Gaussian visible units (GRBM) (Dahl et al., 2012) with a variance of 1 on each dimension. Hence, P(v|h) and E(v, h) in the first RBM of DBN need to be modified as P(v|h) = N(v; b + hTWT, I) E(v, h) = 2(v − b)T (v − b) − cTh − vT W h 1 where I is the appropriate </context>
<context position="19551" citStr="Hinton et al., 2006" startWordPosition="3177" endWordPosition="3180">of the non-linear learning mechanism. Following (Maskey and Zhou, 2012), these learned features are normalized by the average of each dimensional respective feature set. Then, we append these features for each phrase pair to the phrase table as extra features. 4.3 Horizontal Composition of Deep Auto-encoders (HCDAE) Although DAE can learn more powerful and abstract feature representation, the learned features usually have smaller dimensionality compared with the dimensionality of the input features, such as the successful use for handwritten digits recognition (Hinton and Salakhutdinov, 2006; Hinton et al., 2006), information retrieval (Salakhutdinov and Hinton, 2009; Mirowski et al., 2010), and 126 Figure 3: Horizontal composition of DAEs to expand high-dimensional features learning. speech spectrograms (Deng et al., 2010). Moreover, although we have introduced another four types of phrase features (X2, X3, X4 and X5), the only 16 features in X are a bottleneck for learning large hidden layers feature representation, because it has limited information, the performance of the high-dimensional DAE features which are directly learned from single DAE is not very satisfactory. To learn high-dimensional fe</context>
</contexts>
<marker>Hinton, Osindero, Teh, 2006</marker>
<rawString>Geoffrey E. Hinton, Simon Osindero, and Yee-Whye Teh. 2006. A fast learning algorithm for deep belief nets. Neural Computation, 18:1527-1544.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mark Hopkins</author>
<author>Jonathan</author>
</authors>
<title>Tuning as ranking.</title>
<date>2011</date>
<booktitle>In Proceedings of EMNLP,</booktitle>
<pages>1352--1362</pages>
<marker>Hopkins, Jonathan, 2011</marker>
<rawString>Mark Hopkins and Jonathan May 2011. Tuning as ranking. In Proceedings of EMNLP, pages 1352-1362.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nal Kalchbrenner</author>
<author>Phil Blunsom</author>
</authors>
<title>Recurrent continuous translation models.</title>
<date>2013</date>
<booktitle>In Proceedings of EMNLP,</booktitle>
<pages>1700--1709</pages>
<contexts>
<context position="7260" citStr="Kalchbrenner and Blunsom (2013)" startWordPosition="1083" endWordPosition="1086">3 presents our introduced input features for DNN feature learning. Section 4 describes how to learn our semi-supervised DAE features for SMT. Section 5 describes and discusses the large-scale experimental results. Finally, we end with conclusions in section 6. 2 Related Work Recently, there has been growing interest in use of DNN for SMT tasks. Le et al. (2012) improved translation quality of n-gram translation model by using a bilingual neural LM, where translation probabilities are estimated using a continuous representation of translation units in lieu of standard discrete representations. Kalchbrenner and Blunsom (2013) introduced recurrent continuous translation models that comprise a class for purely continuous sentence-level translation models. Auli et al. (2013) presented a joint language and translation model based on a recurrent neural network which predicts target words based on an unbounded history of both source and target words. Liu et al. (2013) went beyond the log-linear model for SMT and proposed a novel additive neural networks based translation model, which overcome some of the shortcomings suffered by the log-linear model: linearity and the lack of deep interpretation and representation in fe</context>
</contexts>
<marker>Kalchbrenner, Blunsom, 2013</marker>
<rawString>Nal Kalchbrenner and Phil Blunsom. 2013. Recurrent continuous translation models. In Proceedings of EMNLP, pages 1700-1709.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Philipp Koehn</author>
</authors>
<title>Statistical significance tests from achine translation evaluation.</title>
<date>2004</date>
<booktitle>In Proceedings of ACL,</booktitle>
<pages>388--395</pages>
<contexts>
<context position="25221" citStr="Koehn, 2004" startWordPosition="4061" endWordPosition="4062">CDAE X 4+4f 53.62 44.29+**** 38.39 34.57+**** Table 2: The translation results by adding new DNN features (DBN feature (Maskey and Zhou, 2012), our proposed DAE and HCDAE feature) as extra features to the phrase table on two tasks. “DBN X1 xf”, “DBN X xf”, “DAE X1 xf” and “DAE X xf” represent that we use DBN and DAE, input features X1 and X, to learn x-dimensional features, respectively. “HCDAE X x+xf” represents horizontally combining two DAEs and each DAE has the same x-dimensional learned features. All improvements on two test sets are statistically significant by the bootstrap resampling (Koehn, 2004). *: significantly better than the baseline (p &lt; 0.05), **: significantly better than “DBN X1 xf” or “DBN X xf” (p &lt; 0.01), ***: significantly better than “DAE X1 xf” or “DAE X xf” (p &lt; 0.01), ****: significantly better than “HCDAE X x+xf” (p &lt; 0.01), +: significantly better than “X2+X3+X4+X5” (p &lt; 0.01). discounting. We perform pairwise ranking optimization (Hopkins and May, 2011) to tune feature weights. The translation quality is evaluated by case-insensitive IBM BLEU-4 metric. The baseline translation models are generated by Moses with default parameter settings. In the contrast experiment</context>
</contexts>
<marker>Koehn, 2004</marker>
<rawString>Philipp Koehn. 2004. Statistical significance tests from achine translation evaluation. In Proceedings of ACL, pages 388-395.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Philipp Koehn</author>
</authors>
<title>Statistical machine translation.</title>
<date>2010</date>
<publisher>Cambridge University Press.</publisher>
<contexts>
<context position="12673" citStr="Koehn, 2010" startWordPosition="1999" endWordPosition="2000">Then, we have the forth type of input features X4 → P(f), P(e) 1Backward LM has been introduced by Xiong et al. (2011), which successfully capture both the preceding and succeeding contexts of the current word, and we estimate the backward LM by inverting the order in each sentence in the training data from the original order to the reverse order. 2This corpus is used to train the translation model in our experiments, and we will describe it in detail in section 5.1. sqrt(Plf i=1 w2 fi)sqrt(Plf i=1 wfi2) a 124 3.5 Phrase length Phrase length plays an important role in the translation process (Koehn, 2010; Hopkins and May, 2011). We normalize bidirectional phrase length by the maximum phrase length, and introduce them as the last type of input features X5 → lne , lnf In summary, except for the first type of phrase feature X1 which is used by (Maskey and Zhou, 2012), we introduce another four types of effective phrase features X2, X3, X4 and X5. Now, the input original phrase features X includes 16 features in our experiments, as follows, X → X1, X2, X3, X4, X5 We build the DAE network where the first layer with visible nodes equaling to 16, and each visible node vi corresponds to the above ori</context>
</contexts>
<marker>Koehn, 2010</marker>
<rawString>Philipp Koehn. 2010. Statistical machine translation. Cambridge University Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Philipp Koehn</author>
<author>Hieu Hoang</author>
<author>Alexandra Birch</author>
<author>Chris Callison-Burch</author>
<author>Marcello Federico</author>
<author>Nicola Bertoldi</author>
<author>Brooke Cowan</author>
<author>Wade Shen</author>
</authors>
<title>Moses: Open source toolkit for statistical machine translation.</title>
<date>2007</date>
<booktitle>In Proceedings of ACL, Demonstration Session,</booktitle>
<pages>177--180</pages>
<location>Christine Moran, Richard Zens, Chris Dyer, Ondrej Bojar, Alexandra</location>
<contexts>
<context position="23229" citStr="Koehn et al., 2007" startWordPosition="3735" endWordPosition="3738">sh words). The LM corpus is the English side of the parallel data (BTEC, CJK and CWMT083) (1.34M sentences). Our development set is IWSLT 2005 test set (506 sentences), and our test set is IWSLT 2007 test set (489 sentences). NIST. The bilingual corpus is LDC4 (3.4M sentence pairs with 64/70M Chinese/English words). The LM corpus is the English side of the parallel data as well as the English Gigaword corpus (LDC2007T07) (11.3M sentences). Our development set is NIST 2005 MT evaluation set (1084 sentences), and our test set is NIST 2006 MT evaluation set (1664 sentences). We choose the Moses (Koehn et al., 2007) framework to implement our phrase-based machine system. The 4-gram LMs are estimated by the SRILM toolkit with modified Kneser-Ney 3the 4th China Workshop on Machine Translation 4LDC2002E18, LDC2002T01, LDC2003E07, LDC2003E14, LDC2003T17, LDC2004T07, LDC2004T08, LDC2005T06, LDC2005T10, LDC2005T34, LDC2006T04, LDC2007T09 127 # Features Dev IWSLT Dev NIST Test Test 1 Baseline 50.81 41.13 36.12 32.59 2 +DBN X1 2f 51.92 42.07* 36.33 33.11* 3 +DAE X1 2f 52.49 43.22** 36.92 33.44** 4 +DBN X1 4f 51.45 41.78* 36.45 33.12* 5 +DAE X1 4f 52.45 43.06** 36.88 33.47** 6 +HCDAE X1 2+2f 53.69 43.23*** 37.06 </context>
</contexts>
<marker>Koehn, Hoang, Birch, Callison-Burch, Federico, Bertoldi, Cowan, Shen, 2007</marker>
<rawString>Philipp Koehn, Hieu Hoang, Alexandra Birch, Chris Callison-Burch, Marcello Federico, Nicola Bertoldi, Brooke Cowan, Wade Shen, Christine Moran, Richard Zens, Chris Dyer, Ondrej Bojar, Alexandra Constantin, and Evan Herbst. 2007. Moses: Open source toolkit for statistical machine translation. In Proceedings of ACL, Demonstration Session, pages 177-180.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Philipp Koehn</author>
<author>Franz J Och</author>
<author>Daniel Marcu</author>
</authors>
<title>Statistical phrase-based translation.</title>
<date>2003</date>
<booktitle>In Proceedings of NAACL,</booktitle>
<pages>48--54</pages>
<contexts>
<context position="2539" citStr="Koehn et al., 2003" startWordPosition="368" endWordPosition="371">odel. Using the 4 original phrase features in the phrase table as the input features, they pre-trained the DBN by contrastive divergence (Hinton, 2002), and generated new unsupervised DBN features using forward computation. These new features are appended as extra features to the phrase table for the translation decoder. However, the above approach has two major shortcomings. First, the input original features for the DBN feature learning are too simple, the limited 4 phrase features of each phrase pair, such as bidirectional phrase translation probability and bidirectional lexical weighting (Koehn et al., 2003), which are a bottleneck for learning effective feature representation. Second, it only uses the unsupervised layer-wise pre-training of DBN built with stacked sets of Restricted Boltzmann Machines (RBM) (Hinton, 2002), does not have a training objective, so its performance relies on the empirical parameters. Thus, this approach is unstable and the improvement is limited. In this paper, we strive to effectively address the above two shortcomings, and systematically explore the possibility of learning new features using deep (multilayer) neural networks (DNN, which is usually referred under the</context>
<context position="8897" citStr="Koehn et al., 2003" startWordPosition="1344" endWordPosition="1347">ord topology model for HPB translation, which successfully capture the topological structure of the words on the source side in a syntactically and semantically meaningful order. However, none of these above works have focused on learning new features automatically with input data, and while learning suitable features (representations) is the superiority of DNN since it has been proposed. In this paper, we systematically explore the possibility of learning new fea123 Sbm25 d (f, e) = Xle j=1 tures using DNN for SMT. 3 Input Features for DNN Feature Learning The phrase-based translation model (Koehn et al., 2003; Och and Ney, 2004) has demonstrated superior performance and been widely used in current SMT systems, and we employ our implementation on this translation model. Next, we adapt and extend some original phrase features as the input features for DAE feature learning. 3.1 Baseline phrase features We assume that source phrase f = f1, · · · , flf and target phrase e = e1, · · · , ele include lf and le words, respectively. Following (Maskey and Zhou, 2012), we use the following 4 phrase features of each phrase pair (Koehn et al., 2003) in the phrase table as the first type of input features, bidir</context>
</contexts>
<marker>Koehn, Och, Marcu, 2003</marker>
<rawString>Philipp Koehn, Franz J. Och, and Daniel Marcu. 2003. Statistical phrase-based translation. In Proceedings of NAACL, pages 48-54.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hai-Son Le</author>
<author>Alexandre Allauzen</author>
<author>Franc¸ois Yvon</author>
</authors>
<title>Continuous space translation models with neural networks.</title>
<date>2012</date>
<booktitle>In Proceedings of NAACL,</booktitle>
<pages>39--48</pages>
<contexts>
<context position="6992" citStr="Le et al. (2012)" startWordPosition="1046" endWordPosition="1049">troduced input phrase features significantly improve the performance of DAE feature learning. The remainder of this paper is organized as follows. Section 2 briefly summarizes the recent related work about the applications of DNN for SMT tasks. Section 3 presents our introduced input features for DNN feature learning. Section 4 describes how to learn our semi-supervised DAE features for SMT. Section 5 describes and discusses the large-scale experimental results. Finally, we end with conclusions in section 6. 2 Related Work Recently, there has been growing interest in use of DNN for SMT tasks. Le et al. (2012) improved translation quality of n-gram translation model by using a bilingual neural LM, where translation probabilities are estimated using a continuous representation of translation units in lieu of standard discrete representations. Kalchbrenner and Blunsom (2013) introduced recurrent continuous translation models that comprise a class for purely continuous sentence-level translation models. Auli et al. (2013) presented a joint language and translation model based on a recurrent neural network which predicts target words based on an unbounded history of both source and target words. Liu et</context>
</contexts>
<marker>Le, Allauzen, Yvon, 2012</marker>
<rawString>Hai-Son Le, Alexandre Allauzen, and Franc¸ois Yvon. 2012. Continuous space translation models with neural networks. In Proceedings of NAACL, pages 39-48.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Peng Li</author>
<author>Yang Liu</author>
<author>Maosong Sun</author>
</authors>
<title>Recursive autoencoders for ITG-based translation.</title>
<date>2013</date>
<booktitle>In Proceedings of EMNLP,</booktitle>
<pages>567--577</pages>
<contexts>
<context position="7884" citStr="Li et al. (2013)" startWordPosition="1184" endWordPosition="1187">ced recurrent continuous translation models that comprise a class for purely continuous sentence-level translation models. Auli et al. (2013) presented a joint language and translation model based on a recurrent neural network which predicts target words based on an unbounded history of both source and target words. Liu et al. (2013) went beyond the log-linear model for SMT and proposed a novel additive neural networks based translation model, which overcome some of the shortcomings suffered by the log-linear model: linearity and the lack of deep interpretation and representation in features. Li et al. (2013) presented an ITG reordering classifier based on recursive autoencoders, and generated vector space representations for variable-sized phrases, which enable predicting orders to exploit syntactic and semantic information. Lu et al. (2014) adapted and extended the max-margin based RNN (Socher et al., 2011) into HPB translation with force decoding and converting tree, and proposed a RNN based word topology model for HPB translation, which successfully capture the topological structure of the words on the source side in a syntactically and semantically meaningful order. However, none of these abo</context>
</contexts>
<marker>Li, Liu, Sun, 2013</marker>
<rawString>Peng Li, Yang Liu, Maosong Sun. 2013. Recursive autoencoders for ITG-based translation. In Proceedings of EMNLP, pages 567-577.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Lemao Liu</author>
<author>Taro Watanabe</author>
<author>Eiichiro Sumita</author>
<author>Tiejun Zhao</author>
</authors>
<title>Additive neural networks for statistical machine translation.</title>
<date>2013</date>
<booktitle>In Proceedings of ACL,</booktitle>
<pages>791--801</pages>
<contexts>
<context position="7603" citStr="Liu et al. (2013)" startWordPosition="1138" endWordPosition="1141">(2012) improved translation quality of n-gram translation model by using a bilingual neural LM, where translation probabilities are estimated using a continuous representation of translation units in lieu of standard discrete representations. Kalchbrenner and Blunsom (2013) introduced recurrent continuous translation models that comprise a class for purely continuous sentence-level translation models. Auli et al. (2013) presented a joint language and translation model based on a recurrent neural network which predicts target words based on an unbounded history of both source and target words. Liu et al. (2013) went beyond the log-linear model for SMT and proposed a novel additive neural networks based translation model, which overcome some of the shortcomings suffered by the log-linear model: linearity and the lack of deep interpretation and representation in features. Li et al. (2013) presented an ITG reordering classifier based on recursive autoencoders, and generated vector space representations for variable-sized phrases, which enable predicting orders to exploit syntactic and semantic information. Lu et al. (2014) adapted and extended the max-margin based RNN (Socher et al., 2011) into HPB tra</context>
</contexts>
<marker>Liu, Watanabe, Sumita, Zhao, 2013</marker>
<rawString>Lemao Liu, Taro Watanabe, Eiichiro Sumita, and Tiejun Zhao. 2013. Additive neural networks for statistical machine translation. In Proceedings of ACL, pages 791-801.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Shixiang Lu</author>
<author>Wei Wei</author>
<author>Xiaoyin Fu</author>
<author>Bo Xu</author>
</authors>
<title>Recursive neural network based word topology model for hierarchical phrase-based speech translation.</title>
<date>2014</date>
<booktitle>In Proceedings of ICASSP.</booktitle>
<contexts>
<context position="8122" citStr="Lu et al. (2014)" startWordPosition="1218" endWordPosition="1221">cts target words based on an unbounded history of both source and target words. Liu et al. (2013) went beyond the log-linear model for SMT and proposed a novel additive neural networks based translation model, which overcome some of the shortcomings suffered by the log-linear model: linearity and the lack of deep interpretation and representation in features. Li et al. (2013) presented an ITG reordering classifier based on recursive autoencoders, and generated vector space representations for variable-sized phrases, which enable predicting orders to exploit syntactic and semantic information. Lu et al. (2014) adapted and extended the max-margin based RNN (Socher et al., 2011) into HPB translation with force decoding and converting tree, and proposed a RNN based word topology model for HPB translation, which successfully capture the topological structure of the words on the source side in a syntactically and semantically meaningful order. However, none of these above works have focused on learning new features automatically with input data, and while learning suitable features (representations) is the superiority of DNN since it has been proposed. In this paper, we systematically explore the possib</context>
</contexts>
<marker>Lu, Wei, Fu, Xu, 2014</marker>
<rawString>Shixiang Lu, Wei Wei, Xiaoyin Fu and Bo Xu. 2014. Recursive neural network based word topology model for hierarchical phrase-based speech translation. In Proceedings of ICASSP.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yuval Marton</author>
<author>Philip Resnik</author>
</authors>
<title>Soft syntactic constraints for hierarchical phrase-based translation.</title>
<date>2008</date>
<booktitle>In Proceedings ofACL,</booktitle>
<pages>1003--1011</pages>
<marker>Marton, Resnik, 2008</marker>
<rawString>Yuval Marton and Philip Resnik. 2008. Soft syntactic constraints for hierarchical phrase-based translation. In Proceedings ofACL, pages 1003-1011.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sameer Maskey</author>
<author>Bowen Zhou</author>
</authors>
<title>Unsupervised deep belief features for speech translation.</title>
<date>2012</date>
<booktitle>In Proceedings of INTERSPEECH.</booktitle>
<contexts>
<context position="1749" citStr="Maskey and Zhou (2012)" startWordPosition="247" endWordPosition="250"> (NIST) BLEU points over the unsupervised DBN features and the baseline features, respectively. 1 Introduction Recently, many new features have been explored for SMT and significant performance have been obtained in terms of translation quality, such as syntactic features, sparse features, and reordering features. However, most of these features are manually designed on linguistic phenomena that are related to bilingual language pairs, thus they are very difficult to devise and estimate. Instead of designing new features based on intuition, linguistic knowledge and domain, for the first time, Maskey and Zhou (2012) explored the possibility of inducing new features in an unsupervised fashion using deep belief net (DBN) (Hinton et al., 2006) for hierarchical phrase-based translation model. Using the 4 original phrase features in the phrase table as the input features, they pre-trained the DBN by contrastive divergence (Hinton, 2002), and generated new unsupervised DBN features using forward computation. These new features are appended as extra features to the phrase table for the translation decoder. However, the above approach has two major shortcomings. First, the input original features for the DBN fea</context>
<context position="9353" citStr="Maskey and Zhou, 2012" startWordPosition="1428" endWordPosition="1431">learning new fea123 Sbm25 d (f, e) = Xle j=1 tures using DNN for SMT. 3 Input Features for DNN Feature Learning The phrase-based translation model (Koehn et al., 2003; Och and Ney, 2004) has demonstrated superior performance and been widely used in current SMT systems, and we employ our implementation on this translation model. Next, we adapt and extend some original phrase features as the input features for DAE feature learning. 3.1 Baseline phrase features We assume that source phrase f = f1, · · · , flf and target phrase e = e1, · · · , ele include lf and le words, respectively. Following (Maskey and Zhou, 2012), we use the following 4 phrase features of each phrase pair (Koehn et al., 2003) in the phrase table as the first type of input features, bidirectional phrase translation probability (P(e|f) and P(f|e)), bidirectional lexical weighting (Lex(e|f) and Lex(f|e)), X1 → P(f|e), Lex(f|e), P(e|f), Lex(e|f) 3.2 Phrase pair similarity Zhao et al. (2004) proposed a way of using term weight based models in a vector space as additional evidences for phrase pair translation quality. This model employ phrase pair similarity to encode the weights of content and non-content words in phrase translation pairs.</context>
<context position="12938" citStr="Maskey and Zhou, 2012" startWordPosition="2045" endWordPosition="2048">g the order in each sentence in the training data from the original order to the reverse order. 2This corpus is used to train the translation model in our experiments, and we will describe it in detail in section 5.1. sqrt(Plf i=1 w2 fi)sqrt(Plf i=1 wfi2) a 124 3.5 Phrase length Phrase length plays an important role in the translation process (Koehn, 2010; Hopkins and May, 2011). We normalize bidirectional phrase length by the maximum phrase length, and introduce them as the last type of input features X5 → lne , lnf In summary, except for the first type of phrase feature X1 which is used by (Maskey and Zhou, 2012), we introduce another four types of effective phrase features X2, X3, X4 and X5. Now, the input original phrase features X includes 16 features in our experiments, as follows, X → X1, X2, X3, X4, X5 We build the DAE network where the first layer with visible nodes equaling to 16, and each visible node vi corresponds to the above original features X in each phrase pair. 4 Semi-Supervised Deep Auto-encoder Features Learning for SMT Each translation rule in the phrase-based translation model has a set number of features that are combined in the log-linear model (Och and Ney, 2002), and our semi-</context>
<context position="16730" citStr="Maskey and Zhou, 2012" startWordPosition="2713" endWordPosition="2716"> subdivide the entire phrase pairs (with features X) in the phrase table into small mini-batches, each containing 100 cases, and update the weights after each minibatch. Each layer is greedily pre-trained for 50 epochs through the entire phrase pairs. The weights are updated using a learning rate of 0.1, momentum of 0.9, and a weight decay of 0.0002 × weight × learning rate. The weight matrix W are initialized with small random values sampled from a zero-mean normal distribution with variance 0.01. After the pre-training, for each phrase pair in the phrase table, we generate the DBN features (Maskey and Zhou, 2012) by passing the original phrase features X through the DBN using forward computation. 4.2 From DBN to Deep Auto-encoder To learn a semi-supervised DAE, we first “unroll” the above n layer DBN by using its weight matrices to create a deep, 2n-1 layer network whose lower layers use the matrices to “encode” the input and whose upper layers use the matrices in reverse order to “decode” the input (Hinton and Salakhutdinov, 2006; Salakhutdinov and Hinton, 2009; Deng et al., 2010), as shown in Figure 2. The layer-wise learning of DBN as above must be treated as a pre-training stage that finds a good </context>
<context position="19002" citStr="Maskey and Zhou, 2012" startWordPosition="3095" endWordPosition="3098">t matter as long as it finds a good region of the parameter space from which to start the fine-tuning. The fine-tuning makes the feature representation in the central layer of the DAE work much better (Salakhutdinov and Hinton, 2009). After the fine-tuning, for each phrase pair in the phrase table, we estimate our DAE features by passing the original phrase features X through the “encoder” part of the DAE using forward computation. To combine these learned features (DBN and DAE feature) into the log-linear model, we need to eliminate the impact of the non-linear learning mechanism. Following (Maskey and Zhou, 2012), these learned features are normalized by the average of each dimensional respective feature set. Then, we append these features for each phrase pair to the phrase table as extra features. 4.3 Horizontal Composition of Deep Auto-encoders (HCDAE) Although DAE can learn more powerful and abstract feature representation, the learned features usually have smaller dimensionality compared with the dimensionality of the input features, such as the successful use for handwritten digits recognition (Hinton and Salakhutdinov, 2006; Hinton et al., 2006), information retrieval (Salakhutdinov and Hinton, </context>
<context position="24751" citStr="Maskey and Zhou, 2012" startWordPosition="3981" endWordPosition="3984"> 14 +HCDAE X 2+2f 53.05 43.58*** 37.59 34.11*** 15 +DBN X 8f 51.93 42.01* 36.74 33.29* 16 +DAE X 8f 52.69 43.26** 37.36 33.75** 17 +HCDAE X 4+4f 52.93 43.49*** 37.53 34.02*** 18 +(X2+X3+X4+X5) 52.23 42.91* 36.96 33.65* 19 +(X2+X3+X4+X5)+DAE X 2f 53.55 44.17+*** 38.23 34.50+*** 20 +(X2+X3+X4+X5)+DAE X 4f 53.61 44.22+*** 38.28 34.47+*** 21 +(X2+X3+X4+X5)+HCDAE X 2+2f 53.75 44.28+**** 38.35 34.65+**** 22 +(X2+X3+X4+X5)+DAE X 8f 53.47 44.19+*** 38.26 34.46+*** 23 +(X2+X3+X4+X5)+HCDAE X 4+4f 53.62 44.29+**** 38.39 34.57+**** Table 2: The translation results by adding new DNN features (DBN feature (Maskey and Zhou, 2012), our proposed DAE and HCDAE feature) as extra features to the phrase table on two tasks. “DBN X1 xf”, “DBN X xf”, “DAE X1 xf” and “DAE X xf” represent that we use DBN and DAE, input features X1 and X, to learn x-dimensional features, respectively. “HCDAE X x+xf” represents horizontally combining two DAEs and each DAE has the same x-dimensional learned features. All improvements on two test sets are statistically significant by the bootstrap resampling (Koehn, 2004). *: significantly better than the baseline (p &lt; 0.05), **: significantly better than “DBN X1 xf” or “DBN X xf” (p &lt; 0.01), ***: s</context>
<context position="28284" citStr="Maskey and Zhou, 2012" startWordPosition="4585" endWordPosition="4588">our introduced input features. “DAE X1+XZ 4f&apos; represents that we use DAE, input features X1 + XZ, to learn 4- dimensional features. *: significantly better than “DAE X1 4f&apos; (p &lt; 0.05). our DAE features have more discriminative power, and also their variance distributions are more stable. 3. HCDAE outperforms single DAE for high dimensional feature learning (row 6 vs. 5; row 9 vs. 8; row 14 vs. 13; row 17 vs. 16), and further improve the performance of DAE feature learning, which can also somewhat address the bring shortcoming of the limited input features. 4. Except for the phrase feature X1 (Maskey and Zhou, 2012), our introduced input features X significantly improve the DAE feature learning (row 11 vs. 3; row 13 vs. 5; row 16 vs. 8). Specially, Table 4 shows the detailed effectiveness of our introduced input features for DAE feature learning, and the results show that each type of features are very effective for DAE feature learning. 5. Adding the original features (X2, X3, X4 and X5) and DAE/HCDAE features together can further improve translation performance (row 19-23 vs. 18), with the highest increase of 3.16 (IWSLT) and 2.06 (NIST) (row 21 vs. 1) BLEU points over the baseline features. DAE and HC</context>
<context position="30877" citStr="Maskey and Zhou, 2012" startWordPosition="5006" endWordPosition="5009">, the fine-tuning does not work very well and typically finds poor local minima. We suspect this leads to the decreased performance. 6 Conclusions In this paper, instead of designing new features based on intuition, linguistic knowledge and domain, we have learned new features using the DAE for the phrase-based translation model. Using the unsupervised pre-trained DBN to initialize DAE’s parameters and using the input original phrase features as the “teacher” for semi-supervised backpropagation, our semi-supervised DAE features are more effective and stable than the unsupervised DBN features (Maskey and Zhou, 2012). Moreover, to further improve the performance, we introduce some simple but effective features as the input features for feature learning. Lastly, to learn high dimensional feature representation, we introduce a natural horizontal composition of two DAEs for large hidden layers feature learning. On two Chinese-English translation tasks, the results demonstrate that our solutions solve the two aforementioned shortcomings successfully. Firstly, our DAE features obtain statistically significant improvements of 1.34/2.45 (IWSLT) and 0.82/1.52 (NIST) BLEU points over the DBN features and the basel</context>
</contexts>
<marker>Maskey, Zhou, 2012</marker>
<rawString>Sameer Maskey and Bowen Zhou. 2012. Unsupervised deep belief features for speech translation. In Proceedings of INTERSPEECH.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Piotr Mirowski</author>
<author>MarcAurelio Ranzato</author>
<author>Yann LeCun</author>
</authors>
<title>Dynamic auto-encoders for semantic indexing.</title>
<date>2010</date>
<booktitle>In Proceedings of NIPS-2010 Workshop on Deep Learning.</booktitle>
<contexts>
<context position="19630" citStr="Mirowski et al., 2010" startWordPosition="3187" endWordPosition="3190">e learned features are normalized by the average of each dimensional respective feature set. Then, we append these features for each phrase pair to the phrase table as extra features. 4.3 Horizontal Composition of Deep Auto-encoders (HCDAE) Although DAE can learn more powerful and abstract feature representation, the learned features usually have smaller dimensionality compared with the dimensionality of the input features, such as the successful use for handwritten digits recognition (Hinton and Salakhutdinov, 2006; Hinton et al., 2006), information retrieval (Salakhutdinov and Hinton, 2009; Mirowski et al., 2010), and 126 Figure 3: Horizontal composition of DAEs to expand high-dimensional features learning. speech spectrograms (Deng et al., 2010). Moreover, although we have introduced another four types of phrase features (X2, X3, X4 and X5), the only 16 features in X are a bottleneck for learning large hidden layers feature representation, because it has limited information, the performance of the high-dimensional DAE features which are directly learned from single DAE is not very satisfactory. To learn high-dimensional feature representation and to further improve the performance, we introduce a nat</context>
</contexts>
<marker>Mirowski, Ranzato, LeCun, 2010</marker>
<rawString>Piotr Mirowski, MarcAurelio Ranzato, and Yann LeCun. 2010. Dynamic auto-encoders for semantic indexing. In Proceedings of NIPS-2010 Workshop on Deep Learning.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Patrick Nguyen</author>
<author>Milind Mahajan</author>
<author>Xiaodong He</author>
</authors>
<title>Training non-parametric features for statistical machine translation.</title>
<date>2007</date>
<booktitle>In Proceedings of WMT,</booktitle>
<pages>72--79</pages>
<contexts>
<context position="5264" citStr="Nguyen et al., 2007" startWordPosition="773" endWordPosition="776">hrase features as the “teacher” for semi-supervised backpropagation. Compared with the unsupervised DBN features, our semi-supervised DAE features are more effective and stable. Moreover, to learn high dimensional feature representation, we introduce a natural horizontal composition for DAEs (HCDAE) that can be used to create large hidden layer representations simply by horizontally combining two (or more) DAEs (Baldi, 2012), which shows further improvement compared with single DAE in our experiments. It is encouraging that, non-parametric feature expansion using gaussian mixture model (GMM) (Nguyen et al., 2007), which guarantees invariance to the specific embodiment of the original features, has been proved as a feasible feature generation approach for SMT. Deep models such as DNN have the potential to be much more representationally efficient for feature learning than shallow models like GMM. Thus, instead of GMM, we use DNN (DBN, DAE and HCDAE) to learn new non-parametric features, which has the similar evolution in speech recognition (Dahl et al., 2012; Hinton et al., 2012). DNN features are learned from the non-linear combination of the input original features, they strong capture highorder corr</context>
</contexts>
<marker>Nguyen, Mahajan, He, 2007</marker>
<rawString>Patrick Nguyen, Milind Mahajan, and Xiaodong He. 2007. Training non-parametric features for statistical machine translation. In Proceedings of WMT, pages 72-79.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Franz J Och</author>
<author>Hermann Ney</author>
</authors>
<title>Improved statistical alignment models.</title>
<date>2000</date>
<booktitle>In Proceedings of ACL,</booktitle>
<pages>440--447</pages>
<marker>Och, Ney, 2000</marker>
<rawString>Franz J. Och and Hermann Ney. 2000. Improved statistical alignment models. In Proceedings of ACL, pages 440-447.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Franz J Och</author>
<author>Hermann Ney</author>
</authors>
<title>Discriminative training and maximum entropy models for statistical machine translation.</title>
<date>2002</date>
<booktitle>In Proceedings of ACL,</booktitle>
<pages>295--302</pages>
<contexts>
<context position="13523" citStr="Och and Ney, 2002" startWordPosition="2148" endWordPosition="2151">s used by (Maskey and Zhou, 2012), we introduce another four types of effective phrase features X2, X3, X4 and X5. Now, the input original phrase features X includes 16 features in our experiments, as follows, X → X1, X2, X3, X4, X5 We build the DAE network where the first layer with visible nodes equaling to 16, and each visible node vi corresponds to the above original features X in each phrase pair. 4 Semi-Supervised Deep Auto-encoder Features Learning for SMT Each translation rule in the phrase-based translation model has a set number of features that are combined in the log-linear model (Och and Ney, 2002), and our semi-supervised DAE features can also be combined in this model. In this section, we design our DAE network with various network structures for new feature learning. 4.1 Learning a Deep Belief Net Inspired by (Maskey and Zhou, 2012), we first learn a deep generative model for feature learning using DBN. DBN is composed of multiple layers of latent variables with the first layer representing the visible feature vectors, which is built with stacked sets of RBMs (Hinton, 2002). For a RBM, there is full connectivity between layers, but no connections within either layer. The connection w</context>
</contexts>
<marker>Och, Ney, 2002</marker>
<rawString>Franz J. Och and Hermann Ney. 2002. Discriminative training and maximum entropy models for statistical machine translation. In Proceedings of ACL, pages 295-302.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Franz J Och</author>
<author>Hermann Ney</author>
</authors>
<title>The alignment template approach to statistical machine translation.</title>
<date>2004</date>
<journal>Computational Linguistics,</journal>
<pages>30--4</pages>
<contexts>
<context position="8917" citStr="Och and Ney, 2004" startWordPosition="1348" endWordPosition="1351">or HPB translation, which successfully capture the topological structure of the words on the source side in a syntactically and semantically meaningful order. However, none of these above works have focused on learning new features automatically with input data, and while learning suitable features (representations) is the superiority of DNN since it has been proposed. In this paper, we systematically explore the possibility of learning new fea123 Sbm25 d (f, e) = Xle j=1 tures using DNN for SMT. 3 Input Features for DNN Feature Learning The phrase-based translation model (Koehn et al., 2003; Och and Ney, 2004) has demonstrated superior performance and been widely used in current SMT systems, and we employ our implementation on this translation model. Next, we adapt and extend some original phrase features as the input features for DAE feature learning. 3.1 Baseline phrase features We assume that source phrase f = f1, · · · , flf and target phrase e = e1, · · · , ele include lf and le words, respectively. Following (Maskey and Zhou, 2012), we use the following 4 phrase features of each phrase pair (Koehn et al., 2003) in the phrase table as the first type of input features, bidirectional phrase tran</context>
</contexts>
<marker>Och, Ney, 2004</marker>
<rawString>Franz J. Och and Hermann Ney. 2004. The alignment template approach to statistical machine translation. Computational Linguistics, 30(4):417-449.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David Rumelhart</author>
<author>Geoffrey E Hinton</author>
<author>Ronale Williams</author>
</authors>
<title>Learning internal representations by back-propagation errors. Parallel Distributed Processing, Vol 1: Foundations,</title>
<date>1986</date>
<publisher>MIT Press.</publisher>
<contexts>
<context position="4397" citStr="Rumelhart et al., 1986" startWordPosition="648" endWordPosition="651">, 2006; Hinton et al., 2006), information retrieval (Salakhutdinov and Hinton, 2009; Mirowski et 122 Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics, pages 122–132, Baltimore, Maryland, USA, June 23-25 2014. c�2014 Association for Computational Linguistics al., 2010), and speech spectrograms (Deng et al., 2010), we propose new feature learning using semi-supervised DAE for phrase-based translation model. By using the input data as the teacher, the “semi-supervised” fine-tuning process of DAE addresses the problem of “back-propagation without a teacher” (Rumelhart et al., 1986), which makes the DAE learn more powerful and abstract features (Hinton and Salakhutdinov, 2006). For our semisupervised DAE feature learning task, we use the unsupervised pre-trained DBN to initialize DAE’s parameters and use the input original phrase features as the “teacher” for semi-supervised backpropagation. Compared with the unsupervised DBN features, our semi-supervised DAE features are more effective and stable. Moreover, to learn high dimensional feature representation, we introduce a natural horizontal composition for DAEs (HCDAE) that can be used to create large hidden layer repres</context>
</contexts>
<marker>Rumelhart, Hinton, Williams, 1986</marker>
<rawString>David Rumelhart, Geoffrey E. Hinton, and Ronale Williams. 1986. Learning internal representations by back-propagation errors. Parallel Distributed Processing, Vol 1: Foundations, MIT Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ruslan R Salakhutdinov</author>
<author>Geoffrey E Hinton</author>
</authors>
<date>2009</date>
<booktitle>Semantic hashing. International Journal of Approximate Reasoning,</booktitle>
<pages>50--7</pages>
<contexts>
<context position="3857" citStr="Salakhutdinov and Hinton, 2009" startWordPosition="572" endWordPosition="575"> simple but effective phrase features as the input features for new DNN feature learning, and these features have been shown significant improvement for SMT, such as, phrase pair similarity (Zhao et al., 2004), phrase frequency, phrase length (Hopkins and May, 2011), and phrase generative probability (Foster et al., 2010), which also show further improvement for new phrase feature learning in our experiments. To address the second shortcoming, inspired by the successful use of DAEs for handwritten digits recognition (Hinton and Salakhutdinov, 2006; Hinton et al., 2006), information retrieval (Salakhutdinov and Hinton, 2009; Mirowski et 122 Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics, pages 122–132, Baltimore, Maryland, USA, June 23-25 2014. c�2014 Association for Computational Linguistics al., 2010), and speech spectrograms (Deng et al., 2010), we propose new feature learning using semi-supervised DAE for phrase-based translation model. By using the input data as the teacher, the “semi-supervised” fine-tuning process of DAE addresses the problem of “back-propagation without a teacher” (Rumelhart et al., 1986), which makes the DAE learn more powerful and abstract featu</context>
<context position="17188" citStr="Salakhutdinov and Hinton, 2009" startWordPosition="2791" endWordPosition="2794">m a zero-mean normal distribution with variance 0.01. After the pre-training, for each phrase pair in the phrase table, we generate the DBN features (Maskey and Zhou, 2012) by passing the original phrase features X through the DBN using forward computation. 4.2 From DBN to Deep Auto-encoder To learn a semi-supervised DAE, we first “unroll” the above n layer DBN by using its weight matrices to create a deep, 2n-1 layer network whose lower layers use the matrices to “encode” the input and whose upper layers use the matrices in reverse order to “decode” the input (Hinton and Salakhutdinov, 2006; Salakhutdinov and Hinton, 2009; Deng et al., 2010), as shown in Figure 2. The layer-wise learning of DBN as above must be treated as a pre-training stage that finds a good region of the parameter space, which is used to initialize our DAE’s parameters. Starting in this region, the DAE is then fine-tuned using average squared error (between the output and input) backpropagation to minimize reconstruction error, as to make its output as equal as possible to its input. For the fine-tuning of DAE, we use the method of conjugate gradients on larger mini-batches of 1000 cases, with three line searches performed for each mini-bat</context>
<context position="18613" citStr="Salakhutdinov and Hinton, 2009" startWordPosition="3033" endWordPosition="3036">hen repeat fine-tuning on the entire phrase table for 100 epochs. We experiment with various values for the noise variance and the threshold, as well as the learning rate, momentum, and weight-decay parameters used in the pre-training, the batch size and epochs in the fine-tuning. Our results are fairly robust to variations in these parameters. The precise weights found by the pre-training do not matter as long as it finds a good region of the parameter space from which to start the fine-tuning. The fine-tuning makes the feature representation in the central layer of the DAE work much better (Salakhutdinov and Hinton, 2009). After the fine-tuning, for each phrase pair in the phrase table, we estimate our DAE features by passing the original phrase features X through the “encoder” part of the DAE using forward computation. To combine these learned features (DBN and DAE feature) into the log-linear model, we need to eliminate the impact of the non-linear learning mechanism. Following (Maskey and Zhou, 2012), these learned features are normalized by the average of each dimensional respective feature set. Then, we append these features for each phrase pair to the phrase table as extra features. 4.3 Horizontal Compos</context>
</contexts>
<marker>Salakhutdinov, Hinton, 2009</marker>
<rawString>Ruslan R. Salakhutdinov and Geoffrey E. Hinton. 2009. Semantic hashing. International Journal of Approximate Reasoning, 50(7):969-978.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Richard Socher</author>
<author>Cliff C Lin</author>
<author>Andrew Y Ng</author>
<author>Christopher D Manning</author>
</authors>
<title>Parsing natural scenes and natural language with recursive neural networks.</title>
<date>2011</date>
<booktitle>In Proceedings of ICML.</booktitle>
<contexts>
<context position="8190" citStr="Socher et al., 2011" startWordPosition="1230" endWordPosition="1233">d target words. Liu et al. (2013) went beyond the log-linear model for SMT and proposed a novel additive neural networks based translation model, which overcome some of the shortcomings suffered by the log-linear model: linearity and the lack of deep interpretation and representation in features. Li et al. (2013) presented an ITG reordering classifier based on recursive autoencoders, and generated vector space representations for variable-sized phrases, which enable predicting orders to exploit syntactic and semantic information. Lu et al. (2014) adapted and extended the max-margin based RNN (Socher et al., 2011) into HPB translation with force decoding and converting tree, and proposed a RNN based word topology model for HPB translation, which successfully capture the topological structure of the words on the source side in a syntactically and semantically meaningful order. However, none of these above works have focused on learning new features automatically with input data, and while learning suitable features (representations) is the superiority of DNN since it has been proposed. In this paper, we systematically explore the possibility of learning new fea123 Sbm25 d (f, e) = Xle j=1 tures using DN</context>
</contexts>
<marker>Socher, Lin, Ng, Manning, 2011</marker>
<rawString>Richard Socher, Cliff C. Lin, Andrew Y. Ng, and Christopher D. Manning. 2011. Parsing natural scenes and natural language with recursive neural networks. In Proceedings of ICML.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Deyi Xiong</author>
<author>Min Zhang</author>
<author>Haizhou Li</author>
</authors>
<title>Enhancing language models in statistical machine translation with backward n-grams and mutual information triggers.</title>
<date>2011</date>
<booktitle>In Proceedings of ACL,</booktitle>
<pages>1288--1297</pages>
<contexts>
<context position="12180" citStr="Xiong et al. (2011)" startWordPosition="1913" endWordPosition="1916"> corpus2. Then, we have the third type of input features X3 → Pf(e), Pb(e), Pf(f), Pb(f) 3.4 Phrase frequency We consider bidirectional phrase frequency as the input features, and estimate them as P(f) = count (f P |fi|=|f |count(fi) count(e) P(e) = P |ej|=|e |count(ej) where, the count(f)/count(e) are the total number of phrase f/e appearing in the source/target side of the bilingual corpus, and the denominator are the total number of the phrases whose length are equal to |f|/|e|, respectively. Then, we have the forth type of input features X4 → P(f), P(e) 1Backward LM has been introduced by Xiong et al. (2011), which successfully capture both the preceding and succeeding contexts of the current word, and we estimate the backward LM by inverting the order in each sentence in the training data from the original order to the reverse order. 2This corpus is used to train the translation model in our experiments, and we will describe it in detail in section 5.1. sqrt(Plf i=1 w2 fi)sqrt(Plf i=1 wfi2) a 124 3.5 Phrase length Phrase length plays an important role in the translation process (Koehn, 2010; Hopkins and May, 2011). We normalize bidirectional phrase length by the maximum phrase length, and introd</context>
</contexts>
<marker>Xiong, Zhang, Li, 2011</marker>
<rawString>Deyi Xiong, Min Zhang, and Haizhou Li. 2011. Enhancing language models in statistical machine translation with backward n-grams and mutual information triggers. In Proceedings of ACL, pages 1288-1297.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Bing Zhao</author>
<author>Stephan Vogel</author>
<author>Alex Waibel</author>
</authors>
<title>Phrase pair rescoring with term weightings for statistical machine translation.</title>
<date>2004</date>
<booktitle>In Proceedings of EMNLP.</booktitle>
<contexts>
<context position="3436" citStr="Zhao et al., 2004" startWordPosition="511" endWordPosition="514">es on the empirical parameters. Thus, this approach is unstable and the improvement is limited. In this paper, we strive to effectively address the above two shortcomings, and systematically explore the possibility of learning new features using deep (multilayer) neural networks (DNN, which is usually referred under the name Deep Learning) for SMT. To address the first shortcoming, we adapt and extend some simple but effective phrase features as the input features for new DNN feature learning, and these features have been shown significant improvement for SMT, such as, phrase pair similarity (Zhao et al., 2004), phrase frequency, phrase length (Hopkins and May, 2011), and phrase generative probability (Foster et al., 2010), which also show further improvement for new phrase feature learning in our experiments. To address the second shortcoming, inspired by the successful use of DAEs for handwritten digits recognition (Hinton and Salakhutdinov, 2006; Hinton et al., 2006), information retrieval (Salakhutdinov and Hinton, 2009; Mirowski et 122 Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics, pages 122–132, Baltimore, Maryland, USA, June 23-25 2014. c�2014 Associa</context>
<context position="9700" citStr="Zhao et al. (2004)" startWordPosition="1484" endWordPosition="1487">tend some original phrase features as the input features for DAE feature learning. 3.1 Baseline phrase features We assume that source phrase f = f1, · · · , flf and target phrase e = e1, · · · , ele include lf and le words, respectively. Following (Maskey and Zhou, 2012), we use the following 4 phrase features of each phrase pair (Koehn et al., 2003) in the phrase table as the first type of input features, bidirectional phrase translation probability (P(e|f) and P(f|e)), bidirectional lexical weighting (Lex(e|f) and Lex(f|e)), X1 → P(f|e), Lex(f|e), P(e|f), Lex(e|f) 3.2 Phrase pair similarity Zhao et al. (2004) proposed a way of using term weight based models in a vector space as additional evidences for phrase pair translation quality. This model employ phrase pair similarity to encode the weights of content and non-content words in phrase translation pairs. Following (Zhao et al., 2004), we calculate bidirectional phrase pair similarity using cosine distance and BM25 distance as, Ple Plf i=1 wejp(ej|fi)wfi Scos j=1 i (e, f) =sqrt(Plej=1 w2ej)sqrt(Plej=1 wej2) a Plf Ple j=1 wfip(fi|ej)wej Scos i=1 d (f,e) = where, p(ej|fi) and p(fi|ej) represents bidirectional word translation probability. wfi and </context>
</contexts>
<marker>Zhao, Vogel, Waibel, 2004</marker>
<rawString>Bing Zhao, Stephan Vogel, and Alex Waibel. 2004. Phrase pair rescoring with term weightings for statistical machine translation. In Proceedings of EMNLP.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>