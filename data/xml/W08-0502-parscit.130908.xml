<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.012964">
<title confidence="0.985259">
Type-checking in Formally non-typed Systems
</title>
<author confidence="0.987206">
Dick Crouch Tracy Holloway King
</author>
<affiliation confidence="0.914881">
Powerset, Inc. Palo Alto Research Center
</affiliation>
<address confidence="0.956835">
San Francisco, USA Palo Alto, USA
</address>
<email confidence="0.999326">
crouch@powerset.com thking@parc.com
</email>
<sectionHeader confidence="0.995659" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.9975262">
Type checking defines and constrains system
output and intermediate representations. We
report on the advantages of introducing multi-
ple levels of type checking in deep parsing sys-
tems, even with untyped formalisms.
</bodyText>
<sectionHeader confidence="0.998806" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.9997635">
Some formalisms have type checking as an inherent
part of their theory (Copestake (2002)). However,
many formalisms do not require type checking. We
report on our experiences with a broad-coverage sys-
tem for mapping English text into semantic repre-
sentations for search applications. This system uses
the XLE LFG parser for converting from text to syn-
tactic structures and the XLE ordered-rewriting sys-
tem to convert from syntax to semantic structures.
Neither component formally requires type checking.
However, type checking was introduced into the syn-
tactic parser and at multiple levels in the semantics in
response to the engineering requirements on a large-
scale, multi-developer, multi-site system.
</bodyText>
<sectionHeader confidence="0.925514" genericHeader="method">
2 Syntactic Typing
</sectionHeader>
<bodyText confidence="0.99633825">
The syntactic parser outputs a tree and an attribute
value matrix (f(unctional)-structure). Meaning-
sensitive applications use the f-structure which
contains predicate argument relations and other
semantically relevant dependencies.
A feature declaration (FD) requires every f-
structure attribute to be declared with its possible
values. These values are typed as to whether they
are atomic or are embedded f-structures. (1) shows
the FD for NUM(ber) and SPEC(ifier). NUM takes
an atomic value, while SPEC takes an f-structure
containing the features ADJUNCT, AQUANT, etc.
</bodyText>
<listItem confidence="0.725660333333333">
(1) a. NUM: - $ pl sg .
b. SPEC: - [ADJUNCT AQUANT DET
NUMBER POSS QUANT SPEC-TYPE].
</listItem>
<bodyText confidence="0.998797">
XLE supports overlay grammars where a gram-
mar for an application uses another grammar as its
base. The FDs form part of the overlay system. For
example, there is an FD used by the Parallel Gram-
mar project (Butt et al. (2003)); the standard English
FD adds and modifies features; then domain specific
FDs overlay this. (2) gives the number of features in
the ParGram FD and the standard English overlay.
</bodyText>
<equation confidence="0.644276666666667">
atomic f-structure
76 33
34 11
</equation>
<bodyText confidence="0.957838823529412">
The grammar cannot be loaded if there is a feature
or value that is not licensed by the FD (to type check
the lexicon, the generator is loaded). The command
print-unused-feature-declarations
can be used after a large parse run to determine
which features never surfaced in the analysis of the
corpus and hence might be candidates to be removed
from the grammar.
As LFG does not have type checking as part of its
theory (Dalrymple et al. (2004)), XLE originally did
not implement it. However, in grammar engineering,
type checking over features speeds up the develop-
ment process and informs later processes and appli-
cations what features to expect since the FD serves
as an overview of the output of the grammar.
English
ParGram
</bodyText>
<page confidence="0.942507">
3
</page>
<subsubsectionHeader confidence="0.825779">
Software Engineering, Testing, and Quality Assurance for Natural Language Processing, pages 3–4,
</subsubsectionHeader>
<page confidence="0.376979">
Columbus, Ohio, USA, June 2008. c�2008 Association for Computational Linguistics
</page>
<sectionHeader confidence="0.980957" genericHeader="method">
3 Semantic Typing
</sectionHeader>
<bodyText confidence="0.999898875">
The syntactic output is the input to several sets of
ordered rewriting rules that produce semantic struc-
tures (Crouch and King (2006)). The nature of or-
dered rewriting systems, which consume input facts
to create novel output facts, makes type checking ex-
tremely important for determining well formedness.
When these representations are used in applications,
type declarations can document changes so that the
subsequent processing can take them into account.
The semantic typing is done by declaring ev-
ery fact that can appear in the structure, its arity,
and the type of its arguments. A field is available
for comments and examples. (3) shows the licens-
ing of nominal modifiers in noun-noun compounds
(nn element), where skolem and integer are argu-
ment types.
</bodyText>
<equation confidence="0.9033086">
(3) - type(proposition,
nn element(%%Element:skolem,
%%Head:skolem,
%%Nth:integer),
comment([ %%Element is the %%Nth
</equation>
<bodyText confidence="0.993124311111111">
term in the compound noun %%Head
Example NP: the hinge oil bottle
in context(t,nn element(hinge:10,bottle:1,2)) ])).
The xfr semantics is developed by multiple users.
By breaking the rules into modules, type checking
can occur at several stages in the processing pipeline.
The current system provides for type checking at
word-prime semantics, the final semantics, and ab-
stract knowledge representation. (4) shows the num-
ber of (sub)features licensed at each level.1
(4) word prime 91
lexical semantics 102
akr 45
In addition to aiding the developers of the seman-
tics rules, the type declarations serve as documenta-
tion for the next steps in the process, e.g. creating the
semantic search index and query reformulation.
mantics rules. As such, the notation and applica-
tion are familiar to the grammar engineers and hence
more accessible. Since the type checking involves
additional processing time, it is not part of run-time
processing. Instead, it is run within a larger regres-
sion testing regime (Chatzichrisafis et al. (2007)).
Grammar engineers run a core set of regression tests
before checking in any changes to the svn repository.
Larger nightly runs check performance as well as
typing at all levels of analysis and help ensure com-
patibility of changes from multiple developers.
The syntactic grammar cannot be loaded with fea-
ture type violations. However, the nature of an or-
dered rewriting system makes it so that loading the
rules does not give the full feature type space of
the resulting output. To force compliance with type
checking requirements, check-ins require regression
tests before committing changes. The output of these
tests is type checked and, if unlicensed features are
found, the commit is blocked. The grammar engi-
neer can then update the type checking rules or mod-
ify the semantic rules to produce only licensed fea-
tures. The regression testing is then rerun and, if the
type checking passes, the commit proceeds.
In sum, introducing type checking at multiple lev-
els provides a better development environment for
grammar engineers as well as documentation for the
developers and for applications.
</bodyText>
<sectionHeader confidence="0.998355" genericHeader="method">
References
</sectionHeader>
<reference confidence="0.9905803">
Butt, M., Forst, M., King, T.H. and Kuhn, J. 2003.
The Feature Space in Parallel Grammar Writing.
In ESSLLI Workshop on Ideas and Strategies for
Multilingual Grammar Development.
Chatzichrisafis, N., Crouch, D., King, T.H., Nairn,
R., Rayner, M. and Santaholma, M. 2007. Re-
gression Testing for Grammar-based Systems. In
Grammar Engineering Across Frameworks.
Copestake, A. 2002. Implementing Typed Feature
Structure Grammars. CSLI.
</reference>
<sectionHeader confidence="0.991305" genericHeader="method">
4 Additional Engineering Support
</sectionHeader>
<bodyText confidence="0.998229">
The semantic type checking is a set of ordered
rewrite rules, using the same mechanism as the se-
</bodyText>
<footnote confidence="0.962831">
1A stripped-down XML version of the semantics uses an
xschema which checks that only the reduced feature set is used
and that the XML is well-formed.
</footnote>
<reference confidence="0.9984936">
Crouch, D. and King, T.H. 2006. Semantics via F-
Structure Rewriting. In Proceedings ofLFG06.
Dalrymple, M., Kaplan, R. and King, T.H. 2004.
Linguistic Generalizations over Descriptions. In
Proceedings ofLFG04.
</reference>
<page confidence="0.996678">
4
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.940797">
<title confidence="0.999946">Type-checking in Formally non-typed Systems</title>
<author confidence="0.997793">Dick Crouch Tracy Holloway King</author>
<affiliation confidence="0.999888">Powerset, Inc. Palo Alto Research Center</affiliation>
<address confidence="0.998833">San Francisco, USA Palo Alto, USA</address>
<email confidence="0.998465">crouch@powerset.comthking@parc.com</email>
<abstract confidence="0.990866333333333">Type checking defines and constrains system output and intermediate representations. We report on the advantages of introducing multiple levels of type checking in deep parsing systems, even with untyped formalisms.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>M Butt</author>
<author>M Forst</author>
<author>T H King</author>
<author>J Kuhn</author>
</authors>
<title>The Feature Space in Parallel Grammar Writing.</title>
<date>2003</date>
<booktitle>In ESSLLI Workshop on Ideas and Strategies for Multilingual Grammar Development.</booktitle>
<contexts>
<context position="2031" citStr="Butt et al. (2003)" startWordPosition="307" endWordPosition="310">uires every fstructure attribute to be declared with its possible values. These values are typed as to whether they are atomic or are embedded f-structures. (1) shows the FD for NUM(ber) and SPEC(ifier). NUM takes an atomic value, while SPEC takes an f-structure containing the features ADJUNCT, AQUANT, etc. (1) a. NUM: - $ pl sg . b. SPEC: - [ADJUNCT AQUANT DET NUMBER POSS QUANT SPEC-TYPE]. XLE supports overlay grammars where a grammar for an application uses another grammar as its base. The FDs form part of the overlay system. For example, there is an FD used by the Parallel Grammar project (Butt et al. (2003)); the standard English FD adds and modifies features; then domain specific FDs overlay this. (2) gives the number of features in the ParGram FD and the standard English overlay. atomic f-structure 76 33 34 11 The grammar cannot be loaded if there is a feature or value that is not licensed by the FD (to type check the lexicon, the generator is loaded). The command print-unused-feature-declarations can be used after a large parse run to determine which features never surfaced in the analysis of the corpus and hence might be candidates to be removed from the grammar. As LFG does not have type ch</context>
</contexts>
<marker>Butt, Forst, King, Kuhn, 2003</marker>
<rawString>Butt, M., Forst, M., King, T.H. and Kuhn, J. 2003. The Feature Space in Parallel Grammar Writing. In ESSLLI Workshop on Ideas and Strategies for Multilingual Grammar Development.</rawString>
</citation>
<citation valid="true">
<authors>
<author>N Chatzichrisafis</author>
<author>D Crouch</author>
<author>T H King</author>
<author>R Nairn</author>
<author>M Rayner</author>
<author>M Santaholma</author>
</authors>
<title>Regression Testing for Grammar-based Systems. In Grammar Engineering Across Frameworks.</title>
<date>2007</date>
<contexts>
<context position="5076" citStr="Chatzichrisafis et al. (2007)" startWordPosition="789" endWordPosition="792">on. (4) shows the number of (sub)features licensed at each level.1 (4) word prime 91 lexical semantics 102 akr 45 In addition to aiding the developers of the semantics rules, the type declarations serve as documentation for the next steps in the process, e.g. creating the semantic search index and query reformulation. mantics rules. As such, the notation and application are familiar to the grammar engineers and hence more accessible. Since the type checking involves additional processing time, it is not part of run-time processing. Instead, it is run within a larger regression testing regime (Chatzichrisafis et al. (2007)). Grammar engineers run a core set of regression tests before checking in any changes to the svn repository. Larger nightly runs check performance as well as typing at all levels of analysis and help ensure compatibility of changes from multiple developers. The syntactic grammar cannot be loaded with feature type violations. However, the nature of an ordered rewriting system makes it so that loading the rules does not give the full feature type space of the resulting output. To force compliance with type checking requirements, check-ins require regression tests before committing changes. The </context>
</contexts>
<marker>Chatzichrisafis, Crouch, King, Nairn, Rayner, Santaholma, 2007</marker>
<rawString>Chatzichrisafis, N., Crouch, D., King, T.H., Nairn, R., Rayner, M. and Santaholma, M. 2007. Regression Testing for Grammar-based Systems. In Grammar Engineering Across Frameworks.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Copestake</author>
</authors>
<title>Implementing Typed Feature Structure Grammars.</title>
<date>2002</date>
<publisher>CSLI.</publisher>
<marker>Copestake, 2002</marker>
<rawString>Copestake, A. 2002. Implementing Typed Feature Structure Grammars. CSLI.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Crouch</author>
<author>T H King</author>
</authors>
<title>Semantics via FStructure Rewriting.</title>
<date>2006</date>
<booktitle>In Proceedings ofLFG06.</booktitle>
<contexts>
<context position="3300" citStr="Crouch and King (2006)" startWordPosition="514" endWordPosition="517">(2004)), XLE originally did not implement it. However, in grammar engineering, type checking over features speeds up the development process and informs later processes and applications what features to expect since the FD serves as an overview of the output of the grammar. English ParGram 3 Software Engineering, Testing, and Quality Assurance for Natural Language Processing, pages 3–4, Columbus, Ohio, USA, June 2008. c�2008 Association for Computational Linguistics 3 Semantic Typing The syntactic output is the input to several sets of ordered rewriting rules that produce semantic structures (Crouch and King (2006)). The nature of ordered rewriting systems, which consume input facts to create novel output facts, makes type checking extremely important for determining well formedness. When these representations are used in applications, type declarations can document changes so that the subsequent processing can take them into account. The semantic typing is done by declaring every fact that can appear in the structure, its arity, and the type of its arguments. A field is available for comments and examples. (3) shows the licensing of nominal modifiers in noun-noun compounds (nn element), where skolem an</context>
</contexts>
<marker>Crouch, King, 2006</marker>
<rawString>Crouch, D. and King, T.H. 2006. Semantics via FStructure Rewriting. In Proceedings ofLFG06.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Dalrymple</author>
<author>R Kaplan</author>
<author>T H King</author>
</authors>
<title>Linguistic Generalizations over Descriptions.</title>
<date>2004</date>
<booktitle>In Proceedings ofLFG04.</booktitle>
<contexts>
<context position="2684" citStr="Dalrymple et al. (2004)" startWordPosition="420" endWordPosition="423">s and modifies features; then domain specific FDs overlay this. (2) gives the number of features in the ParGram FD and the standard English overlay. atomic f-structure 76 33 34 11 The grammar cannot be loaded if there is a feature or value that is not licensed by the FD (to type check the lexicon, the generator is loaded). The command print-unused-feature-declarations can be used after a large parse run to determine which features never surfaced in the analysis of the corpus and hence might be candidates to be removed from the grammar. As LFG does not have type checking as part of its theory (Dalrymple et al. (2004)), XLE originally did not implement it. However, in grammar engineering, type checking over features speeds up the development process and informs later processes and applications what features to expect since the FD serves as an overview of the output of the grammar. English ParGram 3 Software Engineering, Testing, and Quality Assurance for Natural Language Processing, pages 3–4, Columbus, Ohio, USA, June 2008. c�2008 Association for Computational Linguistics 3 Semantic Typing The syntactic output is the input to several sets of ordered rewriting rules that produce semantic structures (Crouch</context>
</contexts>
<marker>Dalrymple, Kaplan, King, 2004</marker>
<rawString>Dalrymple, M., Kaplan, R. and King, T.H. 2004. Linguistic Generalizations over Descriptions. In Proceedings ofLFG04.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>