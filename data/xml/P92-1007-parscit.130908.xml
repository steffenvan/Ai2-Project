<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.001158">
<title confidence="0.992032">
A Functional Approach to Generation with TAG1
</title>
<author confidence="0.916474">
Kathleen F. McCoy, K. Vijay-Shanker, &amp; Gijoo Yang
</author>
<affiliation confidence="0.997449">
Department of Computer and Information Sciences
University of Delaware
</affiliation>
<address confidence="0.593183">
Newark, Delaware 19716, USA
</address>
<email confidence="0.948448">
email: mccoy@udeLedu, vijay@udeLedu
</email>
<sectionHeader confidence="0.994315" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999927384615385">
It has been hypothesized that Tree Adjoining
Grammar (TAG) is particularly well suited for
sentence generation. It is unclear, however, how a
sentence generation system based on TAG should
choose among the syntactic possibilities made
available in the grammar. In this paper we con-
sider the question of what needs to be done to
generate with TAGs and explain a generation sys-
tem that provides the necessary features. This
approach is compared with other TAG-based gen-
eration systems. Particular attention is given to
Mumble-86 which, like our system, makes syntac-
tic choice on sophisticated functional grounds.
</bodyText>
<sectionHeader confidence="0.998426" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999949807692307">
Joshi (1987) described the relevance of Tree
Adjoining Grammar (TAG) (Joshi, 1985; Sch-
abes, Abeille &amp; Joshi, 1988) to Natural Language
Generation. In particular, he pointed out how
the unique factoring of recursion and dependen-
cies provided by TAG made it particularly appro-
priate to derive sentence structures from an input
provided by a text planning component. Of par-
ticular importance is the fact that (all) syntactic
dependencies and function argument structure are
localized in TAG trees.
Shieber and Schabes (1991) discuss using
Synchronous TAG for generation. Synchronous
TAG provides a formal foundation to make ex-
plicit the relationship between elementary syntac-
tic structures and their corresponding semantic
counterparts, both expressed as elementary TAG
trees. This relationship is made explicit by pairing
the elementary trees in the syntactic and logical
form languages, and associating the correspond-
ing nodes. Shieber and Schabes (1990) describe a
generation algorithm which &amp;quot;parses&amp;quot; an input log-
ical form string recording the adjoining and sub-
stitution operations necessary to build the string
from its elementary components. The correspond-
ing syntactic structure is then generated by doing
</bodyText>
<footnote confidence="0.510152">
This work is supported in part by Grant #H133E80015
from the National Institute on Disability and Rehabilita-
tion Research. Support was also provided by the Nemours
Foundation. We would like to thank John Hughes for his
many conunents and discussions concerning this work.
</footnote>
<bodyText confidence="0.999778707317073">
the same set of operations (in reverse) on the cor-
responding elementary structures in the grammar
describing the natural language.
Note that the generation methodology pro-
posed for synchronous TAG (and the hypotheti-
cal generator alluded to in (Joshi, 1987)) takes
as input the logical form semantic representation
and produces a syntactic representation of a natu-
ral language sentence which captures that logical
form. While the correspondence between logical
form and the natural language syntactic form is
certainly an important and necessary component
of any sentence generation system, it is unclear
how finer distinctions can be made in this frame-
work. That is, synchronous TAG does not address
the question of which syntactic rendition of a par-
ticular logical form is most appropriate in a given
circumstance. This aspect is particularly crucial
from the point of view of generation. A full-blown
generation system based on TAG must choose be-
tween various renditions of a given logical form on
well-motivated grounds.
Mumble-86 (McDonald &amp; Pustejovsky,
1985; Meteer et al., 1987) is a sentence genera-
tor based on TAG that is able to take more than
just the logical form representation into account.
Mumble-86 is one of the foremost sentence gener-
ation systems and it (or its predecessors) has been
used as the sentence generation components of a
number of natural language generation projects
(e.g., (McDonald, 1983; McCoy, 1989; Conklin &amp;
McDonald, 1982; Woolf &amp; McDonald, 1984; Rubi-
noff, 1986)). After briefly describing the method-
ology in Mumble-86, we will point out some prob-
lematic aspects of its design. We will then describe
our architecture which is based on interfacing TAG
with a rich functional theory provided by func-
tional systemic grammar (Halliday, 1970; Halli-
day, 1985; Fawcett, 1980; Hudson, 1981).2 We pay
particular attention to those aspects which distin-
guish our generator from Mumble-86.
</bodyText>
<sectionHeader confidence="0.734495" genericHeader="introduction">
2 Mumble-86
</sectionHeader>
<bodyText confidence="0.635559">
Mumble-86 generates from a specification
of what is to be said in the form of an &amp;quot;L-Spec&amp;quot;
</bodyText>
<footnote confidence="0.957201">
2 The particular suitability of TAG as a grammatical for-
malism to be used in conjunction with a systemic granunar
is discussed in (McCoy, Vijay-Shanker St Yang, 1990).
</footnote>
<page confidence="0.998426">
48
</page>
<bodyText confidence="0.977426352">
(Linguistic Specification). An L-Spec captures the
content of what is to be generated along with the
goals and rhetorical force to be achieved. While
the form of the L-Spec is dependent on the partic-
ular application, for the purposes of this discus-
sion we can think of it as a set of logical form
expressions that describe the content to be ex-
pressed. Mumble-86 uses a dictionary-like mecha-
nism to transform a piece of the L-Spec into an el-
ementary TAG tree which realizes that piece. The
translation process itself (performed in the dictio-
nary) may be influenced by contextual factors (in-
cluding pragmatic factors which are recorded as a
side-effect of grammar routines), and by the goals
recorded in the L-Spec itself. It is in this way that
the system can make fine-grained decisions con-
cerning one realization over another.
Once a TAG tree is chosen to realize the ini-
tial subpiece, that structure is traversed in a left
to right fashion. Grammar routines are run dur-
ing this traversal to ensure grammaticality (e.g.,
subject-verb agreement) and to record contextual
information to be used in the translation of the
remaining pieces of the L-Spec. In addition to the
grammar routines, as the initial tree is traversed at
each place where new information could be added
into the evolving surface structure (called attach-
ment points), the remaining L-Spec is consulted to
see if it contains an item whose realization could
be adjoined or substituted at that position.
In order for this methodology to work,
(McDonald &amp; Pustejovsky, 1985) point out that
they have to make some strong assumptions about
the logical form input to their generator. Notice
that the methodology described always starts gen-
erating from an initial tree and other auxiliary or
initial trees are adjoined or substituted into that
initial structure.&apos; As a result, in generating an
embedded sentence, the generator must start with
the innermost clause in order to ensure that the
first tree chosen is an initial (and not an auxiliary)
tree. Consider, for example, the generation of the
sentence &amp;quot;Who did you think hit John&amp;quot;. Mumble-
86 must start generating from the clause &amp;quot;Who
hit John&amp;quot; which is (roughly) captured in the tree
shown in Figure 4. This surface structure would
then be traversed. At the point labeled fr-node (an
attachment point) the auxiliary tree representing
&amp;quot;you think&amp;quot; in Figure 2 would be adjoined in.
Notice, however, that if Mumble-86 must
work from the inner-most clause out, then the ini-
tial L-Spec must be in a particular form which is
not consistent with the &amp;quot;logician&apos;s usual represen-
3 An initial tree is a minimal non-recursive structure in
TAG, while an auxiliary tree is a minimal recursive struc-
ture. Thus, an auxiliary tree is characterized as having a
leaf node (which is termed the foot node) which has the
same label as the root node. The tree in Figure 2 is an
auxiliary tree. The adjoining operation essentially inserts
an auxiliary tree into another tree. For instance, the tree in
Figure 5 is the result of adjoining the auxiliary tree shown
in Figure 2 into the initial tree shown in Figure 4 at the
node labeled fr-node.
tation of sentential complement verbs as higher
operators&amp;quot; (McDonald &amp; Pustejovsky, 1985)[p.
101] (also noted by (Shieber &amp; Schabes, 1991)).
Instead Mumble-86 requires an alternative logi-
cal form representation which amounts to break-
ing the more traditional logical form into smaller
pieces which reference each other. Mumble-86
must be told which of these pieces is the embedded
piece that the processing should start with.4
Notice that this architecture is particularly
problematic for certain kinds of verbs that take in-
direct questions. For instance, it would preclude
the proper generation of sentences involving &amp;quot;won-
der&amp;quot; (as in &amp;quot;I wonder who hit John&amp;quot;). Verbs which
require the question to remain embedded are prob-
lematic for Mumble-86 since the main verb (won-
der) would not be available when its inclusion in
the surface structure needs to be determined.5
An additional requirement on the logical
form input to the generator is that the lambda
expression (representing a wh-question) and the
expression containing the matrix trace be present
in a single layer of specification. This, they claim,
is necessary to generate an appropriate sentence
form without the necessity of looking arbitrarily
deep into the representation. This would mean
that for sentences such as &amp;quot;Who do you think hit
John&amp;quot;, the lambda expression would have to come
with the &amp;quot;hit John&amp;quot; part of the input. We will
show that our system does not place either of these
restrictions on the logical form input and yet is
able to generate the appropriate sentence without
looking arbitrarily deep into the input specifica-
tion.
One can notice a few features of the sys-
tem just described. First, because the dictionary
translation process is context sensitive, the gener-
ation methodology is able to take more than just
logical form into account. Note, however, that it is
unclear what the theory is behind the realizations
made. In addition, these decisions are encoded
procedurally thus the theory is rather difficult to
abstract.
It is also the case that Mumble-86 makes
no distinction between decisions that are made
for functional reasons and those that are made for
syntactic reasons. Both kinds of information must
be recorded (procedurally) in grammar routines so
that they can be taken into account during subse-
quent translations. While the fact that the gram-
mar is procedurally encoded and that functional
4 The task of ordering the elements of logical form is con-
sidered by Mumble-86 to be part of a component which is
also responsible for ensuring that what is given to mumble
is actually expressible in the language (e.g., English). This
component is described in (Meteer, 1991).
5 ThiS is because the logical form for an embedded ques-
tion and a non-embedded question cannot be distinguished
in the kind of input required by Mtunble-86 and the main
verb (wonder) is not able to pass any information down to
the embedded clause since it is realized after the embedded
clause.
</bodyText>
<page confidence="0.997308">
49
</page>
<bodyText confidence="0.983073636363636">
and syntactic decisions are mixed does not affect
the power of the generator, we argue that it does
make development and maintenance of the system
rather difficult. Functional decisions (e.g., that a
particular item should be made prominent) and
syntactic decisions (e.g., number agreement) rely
on two different bodies of work which should be
able to evolve independently of each other. There
is no separation of these two different influences in
Mumble-86.
The generation process in Mumble-86 is
syntax driven. From the input L-Spec an initial
(elementary) TAG tree is chosen. This structure
is then traversed and grammar routines are initi-
ated. At each possible attachment point during
the traversal, the semantic structure (L-Spec) is
consulted to see if it contains an item whose real-
ization could be adjoined or substituted at that
position. Thus the syntactic surface structure
drives the processing.
As a side effect of the above processing
strategy, Mumble-86 creates a strictly left-to-right
realization of surface structure. While this side-
effect is deliberate for reasons of psychological va-
lidity, this can be problematic for generating some
connectives (as is pointed out in (McKeown &amp; El-
hadad, 1991)). This is because Mumble-86 does
not have access to the content of the items being
conjoined at the time the connective is generated.
In the remainder of this paper we describe
a sentence generation system which we have de-
veloped. In some ways it is similar to Mumble-86,
but there are several major differences:
</bodyText>
<listItem confidence="0.992680970588235">
• The realization of the input in our sys-
tem is based on systemic functional linguis-
tics (Halliday, 1970; Halliday, 1985; Fawcett,
1980; Hudson, 1981). This is a linguistic the-
ory which states that a generated sentence
is obtained as a result of a series of func-
tional choices which are made in a parallel
fashion along several different functional do-
mains. The choices are represented as a series
of networks with traversal of the networks de-
pendent on the given input along with several
knowledge sources which encode information
about how various concepts can be linguisti-
cally realized. The bulk of the work in sys-
temic linguistics has been devoted to describ-
ing what/how functional choice affects surface
form. We adopt this work from systemic lin-
guistics, but unlike other implementations, we
use a formal syntactic framework (TAG) to
express the syntactic constraints.
• Our method is not syntax directed, but fol-
lows a functional decomposition called for by
the systemic grammar.
• There is a clear separation between the func-
tional and the syntactic aspects of sentence
generation which actually allows these two as-
pects of generation to be developed indepen-
dently.
• We do not place any constraints on the logical
form input. Our methodology calls for noth-
ing different from what is required for a stan-
dard systemic grammar (whose input is based
on a typical logical form representation).
• The methodology which we describe allows
</listItem>
<bodyText confidence="0.875931833333333">
sentence generation to proceed in a seman-
tic head-driven fashion (Shieber, Van Noord,
Pereira &amp; Moore, 1990). This is the case
even for the embedded sentences discussed
earlier which had to be worked &amp;quot;inside out&amp;quot;
in Mumble-86.
</bodyText>
<sectionHeader confidence="0.987494" genericHeader="method">
3 Generator Architecture
</sectionHeader>
<bodyText confidence="0.999722543478261">
There are many different ways of imple-
menting a TAG-based generator. We consider the
principles that we take to be common to any TAG
generator and indicate how these principles have
influenced our architecture. We present various
aspects of our architecture and contrast them with
choices that have been made in Mumble-86 and
Synchronous TAG. Our approach is motivated by
arguments presented in (McCoy, Vijay-Shanker &amp;
Yang, 1990), but the details of the processing pre-
sented there have changed significantly. Our basic
processing strategy is detailed in (Yang, McCoy
&amp; Vijay-Shanker, 1991); the work presented here
is an extension of that strategy.
In order for a TAG generator to be ro-
bust, it must have a methodology for decipher-
ing the input and associating various pieces of the
input with TAG trees. In Mumble-86 this is ac-
complished through dictionary look-up along with
querying the input at various points during the
surface structure traversal. In contrast, we use a
systemic grammar traversal for this purpose. In a
TAG, each elementary tree lexicalizes a predicate
and contains unexpanded nodes for the required
arguments. Thus any TAG based generation sys-
tem should incorporate the notions of semantic
head-driven generation. Our approach, based on
systemic grammars, does this because the func-
tional decomposition that results from traversal of
a systemic grammar at a single rank identifies the
head and establishes necessary arguments. Thus
it perfectly matches the information captured in
an elementary TAG tree.
Once the input has been deciphered, a TAG
generator must use this to select a tree. Given
that a systemic grammar is being used in our case,
we must have a method for associating TAG trees
with the network traversal. The traversal of a sys-
temic grammar at a single rank establishes a set of
functional choices that can be used to select a TAG
tree. The selection process in any TAG-based gen-
erator can be considered as providing a classifi-
cation of TAG trees on functional grounds. We
make this explicit by providing a network (called
the TAG network)6 which is traversed to select a
TAG tree. The network itself can be thought of as
</bodyText>
<footnote confidence="0.773269">
6 In fact we view a systemic network in a similar fashion
</footnote>
<figureCaption confidence="0.999255">
Figure 1. Input for Who did you think hit John
</figureCaption>
<bodyText confidence="0.990506181818182">
a decision tree whose choice points are functional
features chosen in the systemic network traversal.
So far we have identified how the head can
be lexicalized and placed in an appropriate tree
with respect to its arguments. This is accom-
plished by a traversal of a systemic network at one
rank followed by a TAG network traversal based
on the functional choices made. Of course, the ar-
guments themselves must also be realized. This
is accomplished by a recursive network (systemic
followed by TAG) traversal (focused on the piece
of input associated with the particular argument
being realized). The recursive network traversals
will also result in the realization of a TAG tree.
We record information collected during a single
(rank) network traversal in a data structure called
a region. Thus, an initial region will be created
and will record all features necessary for the se-
lection of a tree realizing the head and argument
placement. The selected tree (and other struc-
tures discussed below) will be recorded in the re-
gion. Each argument will itself be realized in a
subregion which will be associated with the recur-
sive network traversal spawned by the piece of in-
put associated with that argument. Thus we have
separate regions for each independent piece of in-
put. This is in contrast to Mumble-86&apos;s use of the
evolving surface structure in which all grammati-
cal information is recorded.
Once all arguments have been realized as el-
ementary trees in the individual regions, the trees
selected in the individual regions must be com-
bined with the tree in the initial region. For this
we use the standard TAG operations of adjoining
and substitution.
Essentially, our generation methodology
consists of two phases:
1. The descent process — where a systemic net-
work traversal is used to collect a set of fea-
tures which are used to select a TAG tree that
realizes the head and into which the argu-
ments can be fit. The traversal is also respon-
as a classification of all functional choices expressible in a
language.
</bodyText>
<figureCaption confidence="0.997168">
Figure 2. Initial tree selected in region ri
</figureCaption>
<bodyText confidence="0.998122605263158">
sible for spawning the creation of subregions
in which the arguments (and modifiers) are
realized.
2. The ascent process — where the trees cre-
ated in the individual subregions are com-
bined with the tree in the mother region re-
sulting in the final realization of the whole.
In our system the systemic network traver-
sal basically replaces the dictionary look-up phase
found in Mumble-867 which translates the input
L-Spec into surface structure. In addition, our sys-
tem does not walk a surface structure (i.e., the ac-
tual tree chosen). In Mumble-86 the surface struc-
ture walk spawned grammar routines and caused
additional pieces of the L-Spec to be translated
into surface structure. Our methodology relies on
the systemic network traversal to spawn realiza-
tions of the decomposed subpieces. The syntac-
tic aspects of the grammar routines are now in-
corporated into our TAG network and grammar.
Thus our methodology keeps a clearer separation
between functional and syntactic aspects of the
generation process.
The processing in our system will be ex-
plained with an example. Consider the simplified
input given in Figure See (Yang, McCoy St
Vijay-Shanker, 1991) for a more detailed descrip-
tion of the processing.
7The systemic grammar also replaces the grammar rou-
tines of Mumble-86 responsible for recording contextual in-
formation for subsequent translations. In addition, the part
of the dictionary look-up concerned with syntactic realiza-
tion (i.e., the actual tree chosen) is handled by our TAG
component.
8 This input is simplified in that it is basically a standard
logical form input with lexical items specified. In general
the input is a set of features which drive the traversal of
the functional systemic networks.
</bodyText>
<figure confidence="0.976766214285714">
Region rl:
fr-node
,Ss
t
•
IlTri
1 : 1
&apos;VP I
.&gt;e,..,&lt;....
V S
I X-,
think n1
s — act : wh — question
wh — it: ni
tense : past
proc: &amp;quot;think&amp;quot;
actor : n2 : [ &amp;quot;you&amp;quot;
proc : &amp;quot;hit&amp;quot;
tense : past
• phen : actee : n3[&amp;quot;john&amp;quot;1
type: person]
id: quest
actor: n1.
51
Region r2:
fr-node
ir
you
</figure>
<figureCaption confidence="0.999622">
Figure 3. Tree selected in Actor region r2
</figureCaption>
<subsectionHeader confidence="0.997592">
3.1 The Descent Process
</subsectionHeader>
<bodyText confidence="0.9993408">
The input given (along with other knowl-
edge sources traditionally associated with a sys-
temic network) will be used to drive the traversal
of a functional systemic network. The purpose
of this traversal is two fold: (1) to identify the
head/argument structure of the sentence to be re-
alized, and (2) to identify a set of functional fea-
tures which can be used to choose a tree which ap-
propriately realizes the head/argument structure.
Traditionally a systemic network consists of
a number of networks of functional choices which
are traversed in parallel. Each network considers
choices along one functional domain. One such
network is the mood network which is responsible
for, among other things, determining what kind of
speech act should be generated for the top-level
element. This network must notice, for example,
that the speech-act specified is wh-questioning,
but that the item being questioned is not one of
the arguments to the top level process. Thus a
standard declarative form should be chosen for the
realization of this top level element.
Standard implementations of systemic
grammar ( Davey, 1978; Mann &amp; M at thiessen ,
1985; Patten, 1988; Fawcett, 1990), upon traversal
of the mood network to this point, would evalu-
ate a set of realization operations which manipu-
late an eventual surface string. For instance, upon
identifying that a declarative form is needed, the
subject would be ordered before the finite. We ar-
gue in (McCoy, Vijay-Shanker St Yang, 1990) that
it is more practical to replace the use of such re-
alization operators with a more formal grammat-
ical system (and that the use of such a system
is perfectly consistent with the tenets of systemic
linguistics). Thus during the network traversal,
our system simply collects the chosen features and
these are used to drive the traversal of a TAG net-
work whose traversal results in the selection of a
tree.
</bodyText>
<figureCaption confidence="0.5314794">
At the same time the mood network is tra-
versed, so would be other networks. The transitiv-
ity network is concerned with identifying the head
argument structure of the item being realized. In
Figure 4. Tree selected in Phenomenon region r3
</figureCaption>
<bodyText confidence="0.996811909090909">
this case, it would consider the fact that the item
to be realized has a &amp;quot;process&amp;quot; which is mental.
This identification results in the expectation of
two arguments — an actor (doing the mental pro-
cess) and a phenomenon (that thing the process is
about). Each of these identified arguments must
be realized individually. This is accomplished via
the preselect operation.9 This operation causes
a recursive network traversal (whose results are
recorded in a subregion) to be done focused on
the input for the identified sub-element.
The features collected during the functional
systemic network traversal are used to drive the
traversal of the TAG network which results in the
selection of a tree realizing the indicated features.
Features such as that the process is mental and
that the speech act is declarative would cause the
selection of a tree for the mother region such as
the tree in Figure 2.
Similar processing would then take place
in the two subregions, each eventually resulting in
the trees such as those shown in Figures 3 and 4.
</bodyText>
<subsectionHeader confidence="0.999541">
3.2 The Ascent Process
</subsectionHeader>
<bodyText confidence="0.8781095">
In a TAG generator, after the input has
been decomposed and elementary trees associated
with each subpiece of the input, the chosen trees
must be put together. Therefore, every TAG gen-
erator must provide a means to determine where
9 From the realization operations used in systemic gram-
mars (particularly Nigel), we need only the preselect and
the conflate operations because all structure building op-
erations are incorporated into TAG. The conflation oper-
ation is used to map functional features (e.g., agent, phe-
nomenon) into grammatical functions (e.g., subject, com-
plement). Note that in the networks from systemic gram-
mars, we take only the functional part and thus avoid hav-
ing choice points that exist for purely syntactic reasons.
</bodyText>
<figure confidence="0.973049941176471">
Region r3:
S
:
&apos;
S
NPi
WHi
who
52
Region rl:
S
WH •
I
AUX
who v
did r
you think hit John
</figure>
<figureCaption confidence="0.999865">
Figure 5: Final tree: Who did you think hit John?
</figureCaption>
<bodyText confidence="0.99974643902439">
the substitution or adjunction must take place. In
order to do this, with each tree there must be
a mapping of grammatical functions to nodes in
the tree. In our case, we associate a mapping
table with each tree. For instance, the mapping
table associated with the tree shown in Figure 2
would indicate that the phenomenon (which would
have been conflated with complement) is associ-
ated with the node labeled n1 in the tree. In
the simplest case the tree which realizes the phe-
nomenon would be substituted at the node labeled
n1 in the tree in the mother region.
A data structure similar to a mapping table
is used by the other TAG generators as well. In
synchronous TAG the mapping table corresponds
to the explicit node for node mapping between el-
ementary logical form and syntactic trees. The
mapping table in Mumble-86 is implicit in the
schemas which create the surface structure tree
(during the dictionary look-up phase) since they
place L-spec elements in the appropriate place in
the surface structure they create.
A more complex case arises when an argu-
ment node is a footnode of an auxiliary tree. Sup-
pose an auxiliary tree, #, was chosen in a region
and a tree, 7, was chosen in a subregion to real-
ize the argument specified by the footnode of [3.
Rather than substituting 7 in #, # is adjoined into
a node in 7. This node is the node in 7 that heads
the subtree realizing the function specified for the
subregion. For this reason, each tree in a region
also has associated with it a pointer we call an fr-
node which points to the node heading this subtree
(functional root). In Regions ri and r2 the func-
tional root is also the root of the tree. Notice in
Region r3 that the functional root is the embed-
ded S node. This fr-node is chosen because the
tree chosen in the region is a wh-question tree due
to the fact that (according to the input) the phe-
nomenon is being questioned. There is nothing in
the phenomenon itself, however, that specifies that
</bodyText>
<figureCaption confidence="0.920952">
Figure 6. Standard tree for &amp;quot;John tried to win&amp;quot;
</figureCaption>
<bodyText confidence="0.999634611111111">
its speech-act should be wh-questioning. Thus the
portion of the tree under the embedded S node
captures the predicate argument structure which
realizes the phenomenon as is specified in the in-
put. If it were the case that the phenomenon was
specified to be a wh-question (as in &amp;quot;Mary won-
dered who hit John&amp;quot;) then the root node would be
chosen as the fr-node. The fr-node comes into play
when the trees in the individual regions are com-
bined via adjunction during the ascent process.
Other TAG generators have analogues to
our fr-node. In synchronous TAG it is implicit in
the mapping between the nodes in the two kinds of
trees. In Mumble-86, it is the attachment points
on surface structure. The point is that if trees
might be adjoined into, any TAG generator must
specify where adjoining might take place and this
specification depends (at least in part) on the func-
tional content that the tree is intended to capture.
Going back to our example, in combining
trees in the subregions with the tree chosen in the
initial region rl, the agent tree would be combined
with the tree in region rl using straight substitu-
tion. The location of the substitution would be
determined by the address given for the agent in
the mapping table for the tree in region r1.
The mapping table also indicates that the
phenomenon should be placed at n1 in the tree
in Figure 2. Notice, however, that n1 is the foot
node. This is an indication to the processor that
the final tree in region r 1 should result from ad-
joining the tree in r 1 into the tree in the subregion
T3 (Figure 4). The place of adjoining is specified
by the fr-node in the phenomenon tree in region
r3. The result of this adjoining is shown in Fig-
ure 5.1°
</bodyText>
<footnote confidence="0.830491">
1° The details of how the AUX is inserted can be found in
</footnote>
<page confidence="0.998171">
53
</page>
<figureCaption confidence="0.999108">
Figure 7: Flow of Information in Processing Model
</figureCaption>
<sectionHeader confidence="0.985341" genericHeader="method">
4 Passing Features
</sectionHeader>
<bodyText confidence="0.998621352941176">
So far we have established that any TAG-
based generator, once an elementary tree has been
chosen, would need to realize the arguments of the
predicate by recursively calling the same proce-
dure. The resulting trees chosen would be com-
bined with the original elementary tree at the ap-
propriate place by substitution and adjunction. In
this recursive process, we have indicated the need
for only functional information to be passed down
from the mother region to the subregions (at the
very least, in the form of the functional input asso-
ciated with the piece being realized in the region).
We now consider an example where syntactic in-
formation must be passed down as well.
Consider the generation of a sentence such
as &amp;quot;John tried to win&amp;quot;. The standard structure for
this sentence is given in Figure 6. The problem is
that in TAG this tree must be derived from the
combination of two separate sentential trees: one
headed by the verb &amp;quot;tried&amp;quot; and the other by the
verb &amp;quot;win&amp;quot;. However we must capture the con-
straint that the subject of the &amp;quot;win&amp;quot; tree is John
(which is the same as the subject of the &amp;quot;tried&amp;quot;
(Yang, 1991). It is inserted in the region r1 as a result of
a feature disparity on the nodes of the tree resulting from
the adjoining operation just described. The same disparity
would not occur in indirect questions (e.g., &amp;quot;I wonder who
hit John&amp;quot;).
tree) but that it is realized only as a (null) pro.
Note that this constraint cannot be localized in
TAG but cuts across two elementary trees.
While generating this sentence, when we
choose the &amp;quot;tried&amp;quot; tree in the mother region, we
must pass down the information that among the
trees associated with win, the one with &amp;quot;pro&amp;quot; in
the subject position must be chosen. Notice that
this is a purely syntactic constraint based on the
choice of the verb &amp;quot;try&amp;quot;. The choosing of this tree
has ramifications on both the functional network
traversal (since the agent of &amp;quot;win&amp;quot; should not be
expanded) and the TAG network traversal.
In addition, any syntactic constraint that is
placed on the arguments (perhaps by the choice of
the head) must be passed down to the subregion
to influence the realization of the arguments. In
general, the passed down features may influence
either the functional or the TAG network traver-
sal (see Figure 7). Such passing of syntactic and
functional features must occur in any TAG gener-
ator where the realization of the head is done prior
to the realization of its arguments.
</bodyText>
<sectionHeader confidence="0.999625" genericHeader="conclusions">
5 Conclusions
</sectionHeader>
<bodyText confidence="0.99974878125">
In this paper we started with considering
the principles underlying the design of any TAG-
based generator. We have shown how these princi-
ples have been incorporated in our generation sys-
tem and have compared it with other TAG-based
generators.
The architecture of our generation system
incorporates both functional aspects of generation
and syntactic aspects. Each of these aspects is
handled separately, by two different formalisms
which are uniquely combined in our architecture.
The result is a sentence generation system which
has the advantage of incorporating two bodies of
knowledge into one system. Our system has sev-
eral advantages over Mumble-86. In addition to
the use of systemic grammar as a theory for real-
ization and a function (rather than syntactic) di-
rected generation process, we have shown that our
methodology does not place any special require-
ments on the input logical form. Our methodology
can proceed in a head-driven manner using notions
such as the mapping table and the functional root
to decide how trees should be combined. These
notions allow fine distinctions in form which are
not possible in Mumble-86. In addition, our sys-
tem separates functional from syntactic decisions
thus allowing these two bodies to be expanded in-
dependently.
A prototype of our system has been imple-
mented in Lucid Common Lisp on a Sun Worksta-
tion. Details of the implementation can be found
in (Yang, 1991).
</bodyText>
<sectionHeader confidence="0.982297" genericHeader="references">
References
</sectionHeader>
<bodyText confidence="0.997921666666667">
Conklin, E. &amp; McDonald, D. (1982). Salience:
The key to the selection problem in natu-
ral language generation. In Proceedings of
</bodyText>
<figure confidence="0.9991385">
entry-point
functional syntactic
features features
traversal of the
TAG network
region r_l.
tree selected
subregion r_2:
kntry-point /
1
functional r
syntactic
features features
traversal of the Htraversal of the
functional network TAG network
tree selected
</figure>
<page confidence="0.970465">
54
</page>
<reference confidence="0.999602066666667">
the 20th Annual Meeting, (pp. 129-135).,
Toronto, Canada. Association for Computa-
tional Linguistics.
Davey, A. (1978). Discourse Production. Edin-
burgh: Edinburgh University Press.
Fawcett, R. (1980). Cognitive linguistics and social
interaction. Heidelberg: Julius Groos Verlag
Heidelberg and Exeter University.
Fawcett, R. P. (1990). The communal project: two
years old and going well. Network, (13).
Halliday, M. A. K. (1970). Language struc-
ture and language function. In J. Lyons
(Ed.), New Horizons in Linguistics. Har-
mondsworth, England: Penguins Books.
Halliday, M. A. K. (1985). An introduction to
functional grammar. London England: Ed-
ward Arnold.
Hudson, R. A. (1981). Systemic generative gram-
mar. In M. A. K. Halliday &amp; J. R. Mar-
tin (Eds.), Readings in Systemic Linguistics.
North Pomfret, Vermont: Batsford.
Joshi, A. K. (1985). How much context-sensitivity
is necessary for characterizing structural de-
scriptions : Tree adjoining grammar. In
D. Dowty, L. Karttunen, Sz A. Zwicky (Eds.),
Natural Language Processing : Theoreti-
cal, Computational and Psychological Per-
spectives. New York: Cambridge University
Press.
Joshi, A. K. (1987). The relevance of tree ad-
joining grammar to generation. In G. Kem-
pen (Ed.), Natural Language Generation:
New Results in Artificial Intelligence, Psy-
chology, and Linguistics (pp. 233-252). Dor-
drecht/Boston: Martinus Nijhoff Publishers
(Kluwer Academic Publishers).
Mann, W. &amp; Matthiessen, C. (1985). Nigel: A
systemic grammar for text generation. In
0. Freedle (Ed.), Systemic Perspectives on
Discourse. NJ: Norwood.
McCoy, K. F. (1989). Generating context sen-
sitive responses to object-related misconcep-
tions. Artificial Intelligence, 41, 157-195.
McCoy, K. F., Vijay-Shanker, K., &amp; Yang, G.
(1990). Using tree adjoining grammars in the
systemic framework. In Proceedings of 5&apos;
International Workshop on Natural Language
Generation., Dawson, PA.
McDonald, D. (1983). Dependency directed con-
trol: Its implications for natural language
generation. In N. Cercone (Ed.), Computa-
tional Linguistics (pp. 111-130). Pergamon
Press.
McDonald, D. Si Pustejovsky, J. D. (1985). Tags
as a formalism for generation. In Proceedings
of the 23rd Annual Meeting, Chicago, IL. As-
sociation for Computational Linguistics.
McKeown, K. It. &amp; Elhadad, M. (1991). A
contrastive evaluation of functional unifica-
tion grammar for surface language gener-
ation: A case study in choice of connec-
tives. In C. Paris, W. Swartout, Sz W. Mann
(Eds.), Natural Language Generation in Ar-
tificial Intelligence and Linguistics (pp. 351-
396). Boston/Dordrecht/London: Kluwer
Academic Publishers.
Meteer, M. (1991). Bridging the &apos;generation gap&apos;.
Computational Intelligence, 7(4).
Meteer et al., M. (1987). Mumble-86: Design and
implementation. COINS Tech Report 87-87a,
University of Massachusetts.
Patten, T. (1988). Systemic Text Generation
as Problem Solving. Cambridge: Cambridge
University Press.
Rubinoff, R. (1986). Adapting mumble: Expe-
rience with natural language generation. In
Proceedings of the 1986 National Conference
on Artificial Intelligence, (pp. 1063-1068).,
Philadelphia, Pa. AAAI.
Schabes, Y., Abeille, A., &amp; Joshi, A. (1988). Pars-
ing strategies with &apos;lexicalized&apos; grammars:
Application to tree adjoining grammars. In
Proceedings of COLING&apos; 88, Budapest, Hun-
gary.
Shieber, S. M. &amp; Schabes, Y. (1991). Gener-
ation and synchronous tree-adjoining gram-
mars. Computational Intelligence, 7(4).
Shieber, S. M., Van Noord, G., Pereira, F.,
&amp; Moore, It. C. (1990). Semantic-head-
driven generation. Computational Linguis-
tics, 16(1).
Woolf, B. &amp; McDonald, D. (1984). Context-
dependent transitions in tutoring discourse.
In Proceedings of the 1984 National Confer-
ence on Artificial Intelligence, Washington,
D.C. AAAI.
Yang, G. (1991). An Integrated Approach to Gen-
eration Using Systemic Grammars and Tree
Adjoining Grammars. PhD thesis, University
of Delaware.
Yang, G., McCoy, K. F., &amp; Vijay-Shanker, K.
(1991). From functional specification to syn-
tactic structures: Systemic grammar and tree
adjoining grammar. Computational Intelli-
gence, 7(4).
</reference>
<page confidence="0.99906">
55
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.911862">
<title confidence="0.995959">Functional Approach to Generation with</title>
<author confidence="0.999881">Kathleen F McCoy</author>
<author confidence="0.999881">K Vijay-Shanker</author>
<author confidence="0.999881">Gijoo Yang</author>
<affiliation confidence="0.999909">Department of Computer and Information Sciences University of Delaware</affiliation>
<address confidence="0.999936">Newark, Delaware 19716, USA</address>
<email confidence="0.999945">mccoy@udeLedu,vijay@udeLedu</email>
<abstract confidence="0.992123571428571">It has been hypothesized that Tree Adjoining Grammar (TAG) is particularly well suited for sentence generation. It is unclear, however, how a sentence generation system based on TAG should choose among the syntactic possibilities made available in the grammar. In this paper we consider the question of what needs to be done to generate with TAGs and explain a generation system that provides the necessary features. This approach is compared with other TAG-based generation systems. Particular attention is given to Mumble-86 which, like our system, makes syntactic choice on sophisticated functional grounds.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="false">
<booktitle>the 20th Annual Meeting,</booktitle>
<pages>129--135</pages>
<publisher>Association</publisher>
<location>Toronto, Canada.</location>
<note>for Computational Linguistics.</note>
<marker></marker>
<rawString>the 20th Annual Meeting, (pp. 129-135)., Toronto, Canada. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Davey</author>
</authors>
<title>Discourse Production. Edinburgh:</title>
<date>1978</date>
<publisher>Edinburgh University Press.</publisher>
<contexts>
<context position="21367" citStr="Davey, 1978" startWordPosition="3504" endWordPosition="3505"> functional choices which are traversed in parallel. Each network considers choices along one functional domain. One such network is the mood network which is responsible for, among other things, determining what kind of speech act should be generated for the top-level element. This network must notice, for example, that the speech-act specified is wh-questioning, but that the item being questioned is not one of the arguments to the top level process. Thus a standard declarative form should be chosen for the realization of this top level element. Standard implementations of systemic grammar ( Davey, 1978; Mann &amp; M at thiessen , 1985; Patten, 1988; Fawcett, 1990), upon traversal of the mood network to this point, would evaluate a set of realization operations which manipulate an eventual surface string. For instance, upon identifying that a declarative form is needed, the subject would be ordered before the finite. We argue in (McCoy, Vijay-Shanker St Yang, 1990) that it is more practical to replace the use of such realization operators with a more formal grammatical system (and that the use of such a system is perfectly consistent with the tenets of systemic linguistics). Thus during the netw</context>
</contexts>
<marker>Davey, 1978</marker>
<rawString>Davey, A. (1978). Discourse Production. Edinburgh: Edinburgh University Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Fawcett</author>
</authors>
<title>Cognitive linguistics and social interaction.</title>
<date>1980</date>
<institution>Julius Groos Verlag Heidelberg and Exeter University.</institution>
<location>Heidelberg:</location>
<contexts>
<context position="4153" citStr="Fawcett, 1980" startWordPosition="638" endWordPosition="639">to account. Mumble-86 is one of the foremost sentence generation systems and it (or its predecessors) has been used as the sentence generation components of a number of natural language generation projects (e.g., (McDonald, 1983; McCoy, 1989; Conklin &amp; McDonald, 1982; Woolf &amp; McDonald, 1984; Rubinoff, 1986)). After briefly describing the methodology in Mumble-86, we will point out some problematic aspects of its design. We will then describe our architecture which is based on interfacing TAG with a rich functional theory provided by functional systemic grammar (Halliday, 1970; Halliday, 1985; Fawcett, 1980; Hudson, 1981).2 We pay particular attention to those aspects which distinguish our generator from Mumble-86. 2 Mumble-86 Mumble-86 generates from a specification of what is to be said in the form of an &amp;quot;L-Spec&amp;quot; 2 The particular suitability of TAG as a grammatical formalism to be used in conjunction with a systemic granunar is discussed in (McCoy, Vijay-Shanker St Yang, 1990). 48 (Linguistic Specification). An L-Spec captures the content of what is to be generated along with the goals and rhetorical force to be achieved. While the form of the L-Spec is dependent on the particular application,</context>
<context position="12296" citStr="Fawcett, 1980" startWordPosition="1983" endWordPosition="1984">eeffect is deliberate for reasons of psychological validity, this can be problematic for generating some connectives (as is pointed out in (McKeown &amp; Elhadad, 1991)). This is because Mumble-86 does not have access to the content of the items being conjoined at the time the connective is generated. In the remainder of this paper we describe a sentence generation system which we have developed. In some ways it is similar to Mumble-86, but there are several major differences: • The realization of the input in our system is based on systemic functional linguistics (Halliday, 1970; Halliday, 1985; Fawcett, 1980; Hudson, 1981). This is a linguistic theory which states that a generated sentence is obtained as a result of a series of functional choices which are made in a parallel fashion along several different functional domains. The choices are represented as a series of networks with traversal of the networks dependent on the given input along with several knowledge sources which encode information about how various concepts can be linguistically realized. The bulk of the work in systemic linguistics has been devoted to describing what/how functional choice affects surface form. We adopt this work </context>
</contexts>
<marker>Fawcett, 1980</marker>
<rawString>Fawcett, R. (1980). Cognitive linguistics and social interaction. Heidelberg: Julius Groos Verlag Heidelberg and Exeter University.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R P Fawcett</author>
</authors>
<title>The communal project: two years old and going well.</title>
<date>1990</date>
<journal>Network,</journal>
<volume>13</volume>
<contexts>
<context position="21426" citStr="Fawcett, 1990" startWordPosition="3515" endWordPosition="3516">h network considers choices along one functional domain. One such network is the mood network which is responsible for, among other things, determining what kind of speech act should be generated for the top-level element. This network must notice, for example, that the speech-act specified is wh-questioning, but that the item being questioned is not one of the arguments to the top level process. Thus a standard declarative form should be chosen for the realization of this top level element. Standard implementations of systemic grammar ( Davey, 1978; Mann &amp; M at thiessen , 1985; Patten, 1988; Fawcett, 1990), upon traversal of the mood network to this point, would evaluate a set of realization operations which manipulate an eventual surface string. For instance, upon identifying that a declarative form is needed, the subject would be ordered before the finite. We argue in (McCoy, Vijay-Shanker St Yang, 1990) that it is more practical to replace the use of such realization operators with a more formal grammatical system (and that the use of such a system is perfectly consistent with the tenets of systemic linguistics). Thus during the network traversal, our system simply collects the chosen featur</context>
</contexts>
<marker>Fawcett, 1990</marker>
<rawString>Fawcett, R. P. (1990). The communal project: two years old and going well. Network, (13).</rawString>
</citation>
<citation valid="true">
<authors>
<author>M A K Halliday</author>
</authors>
<title>Language structure and language function. In</title>
<date>1970</date>
<booktitle>Horizons in Linguistics. Harmondsworth,</booktitle>
<editor>J. Lyons (Ed.),</editor>
<publisher>Penguins Books.</publisher>
<location>New</location>
<contexts>
<context position="4122" citStr="Halliday, 1970" startWordPosition="633" endWordPosition="634">e logical form representation into account. Mumble-86 is one of the foremost sentence generation systems and it (or its predecessors) has been used as the sentence generation components of a number of natural language generation projects (e.g., (McDonald, 1983; McCoy, 1989; Conklin &amp; McDonald, 1982; Woolf &amp; McDonald, 1984; Rubinoff, 1986)). After briefly describing the methodology in Mumble-86, we will point out some problematic aspects of its design. We will then describe our architecture which is based on interfacing TAG with a rich functional theory provided by functional systemic grammar (Halliday, 1970; Halliday, 1985; Fawcett, 1980; Hudson, 1981).2 We pay particular attention to those aspects which distinguish our generator from Mumble-86. 2 Mumble-86 Mumble-86 generates from a specification of what is to be said in the form of an &amp;quot;L-Spec&amp;quot; 2 The particular suitability of TAG as a grammatical formalism to be used in conjunction with a systemic granunar is discussed in (McCoy, Vijay-Shanker St Yang, 1990). 48 (Linguistic Specification). An L-Spec captures the content of what is to be generated along with the goals and rhetorical force to be achieved. While the form of the L-Spec is dependent</context>
<context position="12265" citStr="Halliday, 1970" startWordPosition="1979" endWordPosition="1980">urface structure. While this sideeffect is deliberate for reasons of psychological validity, this can be problematic for generating some connectives (as is pointed out in (McKeown &amp; Elhadad, 1991)). This is because Mumble-86 does not have access to the content of the items being conjoined at the time the connective is generated. In the remainder of this paper we describe a sentence generation system which we have developed. In some ways it is similar to Mumble-86, but there are several major differences: • The realization of the input in our system is based on systemic functional linguistics (Halliday, 1970; Halliday, 1985; Fawcett, 1980; Hudson, 1981). This is a linguistic theory which states that a generated sentence is obtained as a result of a series of functional choices which are made in a parallel fashion along several different functional domains. The choices are represented as a series of networks with traversal of the networks dependent on the given input along with several knowledge sources which encode information about how various concepts can be linguistically realized. The bulk of the work in systemic linguistics has been devoted to describing what/how functional choice affects su</context>
</contexts>
<marker>Halliday, 1970</marker>
<rawString>Halliday, M. A. K. (1970). Language structure and language function. In J. Lyons (Ed.), New Horizons in Linguistics. Harmondsworth, England: Penguins Books.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M A K Halliday</author>
</authors>
<title>An introduction to functional grammar. London England: Edward Arnold.</title>
<date>1985</date>
<contexts>
<context position="4138" citStr="Halliday, 1985" startWordPosition="635" endWordPosition="637">epresentation into account. Mumble-86 is one of the foremost sentence generation systems and it (or its predecessors) has been used as the sentence generation components of a number of natural language generation projects (e.g., (McDonald, 1983; McCoy, 1989; Conklin &amp; McDonald, 1982; Woolf &amp; McDonald, 1984; Rubinoff, 1986)). After briefly describing the methodology in Mumble-86, we will point out some problematic aspects of its design. We will then describe our architecture which is based on interfacing TAG with a rich functional theory provided by functional systemic grammar (Halliday, 1970; Halliday, 1985; Fawcett, 1980; Hudson, 1981).2 We pay particular attention to those aspects which distinguish our generator from Mumble-86. 2 Mumble-86 Mumble-86 generates from a specification of what is to be said in the form of an &amp;quot;L-Spec&amp;quot; 2 The particular suitability of TAG as a grammatical formalism to be used in conjunction with a systemic granunar is discussed in (McCoy, Vijay-Shanker St Yang, 1990). 48 (Linguistic Specification). An L-Spec captures the content of what is to be generated along with the goals and rhetorical force to be achieved. While the form of the L-Spec is dependent on the particul</context>
<context position="12281" citStr="Halliday, 1985" startWordPosition="1981" endWordPosition="1982">. While this sideeffect is deliberate for reasons of psychological validity, this can be problematic for generating some connectives (as is pointed out in (McKeown &amp; Elhadad, 1991)). This is because Mumble-86 does not have access to the content of the items being conjoined at the time the connective is generated. In the remainder of this paper we describe a sentence generation system which we have developed. In some ways it is similar to Mumble-86, but there are several major differences: • The realization of the input in our system is based on systemic functional linguistics (Halliday, 1970; Halliday, 1985; Fawcett, 1980; Hudson, 1981). This is a linguistic theory which states that a generated sentence is obtained as a result of a series of functional choices which are made in a parallel fashion along several different functional domains. The choices are represented as a series of networks with traversal of the networks dependent on the given input along with several knowledge sources which encode information about how various concepts can be linguistically realized. The bulk of the work in systemic linguistics has been devoted to describing what/how functional choice affects surface form. We a</context>
</contexts>
<marker>Halliday, 1985</marker>
<rawString>Halliday, M. A. K. (1985). An introduction to functional grammar. London England: Edward Arnold.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R A Hudson</author>
</authors>
<title>Systemic generative grammar. In</title>
<date>1981</date>
<location>Vermont: Batsford.</location>
<contexts>
<context position="4168" citStr="Hudson, 1981" startWordPosition="640" endWordPosition="641">ble-86 is one of the foremost sentence generation systems and it (or its predecessors) has been used as the sentence generation components of a number of natural language generation projects (e.g., (McDonald, 1983; McCoy, 1989; Conklin &amp; McDonald, 1982; Woolf &amp; McDonald, 1984; Rubinoff, 1986)). After briefly describing the methodology in Mumble-86, we will point out some problematic aspects of its design. We will then describe our architecture which is based on interfacing TAG with a rich functional theory provided by functional systemic grammar (Halliday, 1970; Halliday, 1985; Fawcett, 1980; Hudson, 1981).2 We pay particular attention to those aspects which distinguish our generator from Mumble-86. 2 Mumble-86 Mumble-86 generates from a specification of what is to be said in the form of an &amp;quot;L-Spec&amp;quot; 2 The particular suitability of TAG as a grammatical formalism to be used in conjunction with a systemic granunar is discussed in (McCoy, Vijay-Shanker St Yang, 1990). 48 (Linguistic Specification). An L-Spec captures the content of what is to be generated along with the goals and rhetorical force to be achieved. While the form of the L-Spec is dependent on the particular application, for the purpos</context>
<context position="12311" citStr="Hudson, 1981" startWordPosition="1985" endWordPosition="1986">berate for reasons of psychological validity, this can be problematic for generating some connectives (as is pointed out in (McKeown &amp; Elhadad, 1991)). This is because Mumble-86 does not have access to the content of the items being conjoined at the time the connective is generated. In the remainder of this paper we describe a sentence generation system which we have developed. In some ways it is similar to Mumble-86, but there are several major differences: • The realization of the input in our system is based on systemic functional linguistics (Halliday, 1970; Halliday, 1985; Fawcett, 1980; Hudson, 1981). This is a linguistic theory which states that a generated sentence is obtained as a result of a series of functional choices which are made in a parallel fashion along several different functional domains. The choices are represented as a series of networks with traversal of the networks dependent on the given input along with several knowledge sources which encode information about how various concepts can be linguistically realized. The bulk of the work in systemic linguistics has been devoted to describing what/how functional choice affects surface form. We adopt this work from systemic l</context>
</contexts>
<marker>Hudson, 1981</marker>
<rawString>Hudson, R. A. (1981). Systemic generative grammar. In M. A. K. Halliday &amp; J. R. Martin (Eds.), Readings in Systemic Linguistics. North Pomfret, Vermont: Batsford.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A K Joshi</author>
</authors>
<title>How much context-sensitivity is necessary for characterizing structural descriptions : Tree adjoining grammar. In</title>
<date>1985</date>
<publisher>Cambridge University Press.</publisher>
<contexts>
<context position="947" citStr="Joshi, 1985" startWordPosition="140" endWordPosition="141">nce generation. It is unclear, however, how a sentence generation system based on TAG should choose among the syntactic possibilities made available in the grammar. In this paper we consider the question of what needs to be done to generate with TAGs and explain a generation system that provides the necessary features. This approach is compared with other TAG-based generation systems. Particular attention is given to Mumble-86 which, like our system, makes syntactic choice on sophisticated functional grounds. 1 Introduction Joshi (1987) described the relevance of Tree Adjoining Grammar (TAG) (Joshi, 1985; Schabes, Abeille &amp; Joshi, 1988) to Natural Language Generation. In particular, he pointed out how the unique factoring of recursion and dependencies provided by TAG made it particularly appropriate to derive sentence structures from an input provided by a text planning component. Of particular importance is the fact that (all) syntactic dependencies and function argument structure are localized in TAG trees. Shieber and Schabes (1991) discuss using Synchronous TAG for generation. Synchronous TAG provides a formal foundation to make explicit the relationship between elementary syntactic struc</context>
</contexts>
<marker>Joshi, 1985</marker>
<rawString>Joshi, A. K. (1985). How much context-sensitivity is necessary for characterizing structural descriptions : Tree adjoining grammar. In D. Dowty, L. Karttunen, Sz A. Zwicky (Eds.), Natural Language Processing : Theoretical, Computational and Psychological Perspectives. New York: Cambridge University Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A K Joshi</author>
</authors>
<title>The relevance of tree adjoining grammar to generation. In</title>
<date>1987</date>
<booktitle>in Artificial Intelligence, Psychology, and Linguistics (pp. 233-252). Dordrecht/Boston: Martinus Nijhoff</booktitle>
<publisher>Publishers (Kluwer Academic Publishers).</publisher>
<contexts>
<context position="878" citStr="Joshi (1987)" startWordPosition="130" endWordPosition="131">hat Tree Adjoining Grammar (TAG) is particularly well suited for sentence generation. It is unclear, however, how a sentence generation system based on TAG should choose among the syntactic possibilities made available in the grammar. In this paper we consider the question of what needs to be done to generate with TAGs and explain a generation system that provides the necessary features. This approach is compared with other TAG-based generation systems. Particular attention is given to Mumble-86 which, like our system, makes syntactic choice on sophisticated functional grounds. 1 Introduction Joshi (1987) described the relevance of Tree Adjoining Grammar (TAG) (Joshi, 1985; Schabes, Abeille &amp; Joshi, 1988) to Natural Language Generation. In particular, he pointed out how the unique factoring of recursion and dependencies provided by TAG made it particularly appropriate to derive sentence structures from an input provided by a text planning component. Of particular importance is the fact that (all) syntactic dependencies and function argument structure are localized in TAG trees. Shieber and Schabes (1991) discuss using Synchronous TAG for generation. Synchronous TAG provides a formal foundation</context>
<context position="2603" citStr="Joshi, 1987" startWordPosition="391" endWordPosition="392">entary components. The corresponding syntactic structure is then generated by doing This work is supported in part by Grant #H133E80015 from the National Institute on Disability and Rehabilitation Research. Support was also provided by the Nemours Foundation. We would like to thank John Hughes for his many conunents and discussions concerning this work. the same set of operations (in reverse) on the corresponding elementary structures in the grammar describing the natural language. Note that the generation methodology proposed for synchronous TAG (and the hypothetical generator alluded to in (Joshi, 1987)) takes as input the logical form semantic representation and produces a syntactic representation of a natural language sentence which captures that logical form. While the correspondence between logical form and the natural language syntactic form is certainly an important and necessary component of any sentence generation system, it is unclear how finer distinctions can be made in this framework. That is, synchronous TAG does not address the question of which syntactic rendition of a particular logical form is most appropriate in a given circumstance. This aspect is particularly crucial from</context>
</contexts>
<marker>Joshi, 1987</marker>
<rawString>Joshi, A. K. (1987). The relevance of tree adjoining grammar to generation. In G. Kempen (Ed.), Natural Language Generation: New Results in Artificial Intelligence, Psychology, and Linguistics (pp. 233-252). Dordrecht/Boston: Martinus Nijhoff Publishers (Kluwer Academic Publishers).</rawString>
</citation>
<citation valid="true">
<authors>
<author>W Mann</author>
<author>C Matthiessen</author>
</authors>
<title>Nigel: A systemic grammar for text generation.</title>
<date>1985</date>
<booktitle>In 0. Freedle (Ed.), Systemic Perspectives on Discourse. NJ:</booktitle>
<publisher>Norwood.</publisher>
<marker>Mann, Matthiessen, 1985</marker>
<rawString>Mann, W. &amp; Matthiessen, C. (1985). Nigel: A systemic grammar for text generation. In 0. Freedle (Ed.), Systemic Perspectives on Discourse. NJ: Norwood.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K F McCoy</author>
</authors>
<title>Generating context sensitive responses to object-related misconceptions.</title>
<date>1989</date>
<journal>Artificial Intelligence,</journal>
<volume>41</volume>
<pages>157--195</pages>
<contexts>
<context position="3781" citStr="McCoy, 1989" startWordPosition="578" endWordPosition="579">pect is particularly crucial from the point of view of generation. A full-blown generation system based on TAG must choose between various renditions of a given logical form on well-motivated grounds. Mumble-86 (McDonald &amp; Pustejovsky, 1985; Meteer et al., 1987) is a sentence generator based on TAG that is able to take more than just the logical form representation into account. Mumble-86 is one of the foremost sentence generation systems and it (or its predecessors) has been used as the sentence generation components of a number of natural language generation projects (e.g., (McDonald, 1983; McCoy, 1989; Conklin &amp; McDonald, 1982; Woolf &amp; McDonald, 1984; Rubinoff, 1986)). After briefly describing the methodology in Mumble-86, we will point out some problematic aspects of its design. We will then describe our architecture which is based on interfacing TAG with a rich functional theory provided by functional systemic grammar (Halliday, 1970; Halliday, 1985; Fawcett, 1980; Hudson, 1981).2 We pay particular attention to those aspects which distinguish our generator from Mumble-86. 2 Mumble-86 Mumble-86 generates from a specification of what is to be said in the form of an &amp;quot;L-Spec&amp;quot; 2 The particula</context>
</contexts>
<marker>McCoy, 1989</marker>
<rawString>McCoy, K. F. (1989). Generating context sensitive responses to object-related misconceptions. Artificial Intelligence, 41, 157-195.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K F McCoy</author>
<author>K Vijay-Shanker</author>
<author>G Yang</author>
</authors>
<title>Using tree adjoining grammars in the systemic framework.</title>
<date>1990</date>
<booktitle>In Proceedings of 5&apos; International Workshop on Natural Language Generation.,</booktitle>
<location>Dawson, PA.</location>
<marker>McCoy, Vijay-Shanker, Yang, 1990</marker>
<rawString>McCoy, K. F., Vijay-Shanker, K., &amp; Yang, G. (1990). Using tree adjoining grammars in the systemic framework. In Proceedings of 5&apos; International Workshop on Natural Language Generation., Dawson, PA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D McDonald</author>
</authors>
<title>Dependency directed control: Its implications for natural language generation.</title>
<date>1983</date>
<booktitle>In N. Cercone (Ed.), Computational Linguistics</booktitle>
<pages>111--130</pages>
<publisher>Pergamon Press.</publisher>
<contexts>
<context position="3768" citStr="McDonald, 1983" startWordPosition="576" endWordPosition="577">mstance. This aspect is particularly crucial from the point of view of generation. A full-blown generation system based on TAG must choose between various renditions of a given logical form on well-motivated grounds. Mumble-86 (McDonald &amp; Pustejovsky, 1985; Meteer et al., 1987) is a sentence generator based on TAG that is able to take more than just the logical form representation into account. Mumble-86 is one of the foremost sentence generation systems and it (or its predecessors) has been used as the sentence generation components of a number of natural language generation projects (e.g., (McDonald, 1983; McCoy, 1989; Conklin &amp; McDonald, 1982; Woolf &amp; McDonald, 1984; Rubinoff, 1986)). After briefly describing the methodology in Mumble-86, we will point out some problematic aspects of its design. We will then describe our architecture which is based on interfacing TAG with a rich functional theory provided by functional systemic grammar (Halliday, 1970; Halliday, 1985; Fawcett, 1980; Hudson, 1981).2 We pay particular attention to those aspects which distinguish our generator from Mumble-86. 2 Mumble-86 Mumble-86 generates from a specification of what is to be said in the form of an &amp;quot;L-Spec&amp;quot; 2 </context>
</contexts>
<marker>McDonald, 1983</marker>
<rawString>McDonald, D. (1983). Dependency directed control: Its implications for natural language generation. In N. Cercone (Ed.), Computational Linguistics (pp. 111-130). Pergamon Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Si Pustejovsky McDonald</author>
<author>J D</author>
</authors>
<title>Tags as a formalism for generation.</title>
<date>1985</date>
<booktitle>In Proceedings of the 23rd Annual Meeting,</booktitle>
<publisher>Association for</publisher>
<institution>Computational Linguistics.</institution>
<location>Chicago, IL.</location>
<marker>McDonald, D, 1985</marker>
<rawString>McDonald, D. Si Pustejovsky, J. D. (1985). Tags as a formalism for generation. In Proceedings of the 23rd Annual Meeting, Chicago, IL. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Elhadad</author>
</authors>
<title>A contrastive evaluation of functional unification grammar for surface language generation: A case study in choice of connectives.</title>
<date>1991</date>
<booktitle>In C. Paris, W. Swartout, Sz W. Mann (Eds.), Natural Language Generation in Artificial Intelligence and Linguistics</booktitle>
<pages>351--396</pages>
<publisher>Kluwer Academic Publishers.</publisher>
<location>Boston/Dordrecht/London:</location>
<contexts>
<context position="11847" citStr="Elhadad, 1991" startWordPosition="1905" endWordPosition="1907">n traversed and grammar routines are initiated. At each possible attachment point during the traversal, the semantic structure (L-Spec) is consulted to see if it contains an item whose realization could be adjoined or substituted at that position. Thus the syntactic surface structure drives the processing. As a side effect of the above processing strategy, Mumble-86 creates a strictly left-to-right realization of surface structure. While this sideeffect is deliberate for reasons of psychological validity, this can be problematic for generating some connectives (as is pointed out in (McKeown &amp; Elhadad, 1991)). This is because Mumble-86 does not have access to the content of the items being conjoined at the time the connective is generated. In the remainder of this paper we describe a sentence generation system which we have developed. In some ways it is similar to Mumble-86, but there are several major differences: • The realization of the input in our system is based on systemic functional linguistics (Halliday, 1970; Halliday, 1985; Fawcett, 1980; Hudson, 1981). This is a linguistic theory which states that a generated sentence is obtained as a result of a series of functional choices which are</context>
</contexts>
<marker>Elhadad, 1991</marker>
<rawString>McKeown, K. It. &amp; Elhadad, M. (1991). A contrastive evaluation of functional unification grammar for surface language generation: A case study in choice of connectives. In C. Paris, W. Swartout, Sz W. Mann (Eds.), Natural Language Generation in Artificial Intelligence and Linguistics (pp. 351-396). Boston/Dordrecht/London: Kluwer Academic Publishers.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Meteer</author>
</authors>
<title>Bridging the &apos;generation gap&apos;.</title>
<date>1991</date>
<journal>Computational Intelligence,</journal>
<volume>7</volume>
<issue>4</issue>
<contexts>
<context position="10333" citStr="Meteer, 1991" startWordPosition="1663" endWordPosition="1664">istinction between decisions that are made for functional reasons and those that are made for syntactic reasons. Both kinds of information must be recorded (procedurally) in grammar routines so that they can be taken into account during subsequent translations. While the fact that the grammar is procedurally encoded and that functional 4 The task of ordering the elements of logical form is considered by Mumble-86 to be part of a component which is also responsible for ensuring that what is given to mumble is actually expressible in the language (e.g., English). This component is described in (Meteer, 1991). 5 ThiS is because the logical form for an embedded question and a non-embedded question cannot be distinguished in the kind of input required by Mtunble-86 and the main verb (wonder) is not able to pass any information down to the embedded clause since it is realized after the embedded clause. 49 and syntactic decisions are mixed does not affect the power of the generator, we argue that it does make development and maintenance of the system rather difficult. Functional decisions (e.g., that a particular item should be made prominent) and syntactic decisions (e.g., number agreement) rely on t</context>
</contexts>
<marker>Meteer, 1991</marker>
<rawString>Meteer, M. (1991). Bridging the &apos;generation gap&apos;. Computational Intelligence, 7(4).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Meteer</author>
</authors>
<title>Mumble-86: Design and implementation.</title>
<date>1987</date>
<tech>COINS Tech Report 87-87a,</tech>
<institution>University of Massachusetts.</institution>
<marker>Meteer, 1987</marker>
<rawString>Meteer et al., M. (1987). Mumble-86: Design and implementation. COINS Tech Report 87-87a, University of Massachusetts.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Patten</author>
</authors>
<title>Systemic Text Generation as Problem Solving. Cambridge:</title>
<date>1988</date>
<publisher>Cambridge University Press.</publisher>
<contexts>
<context position="21410" citStr="Patten, 1988" startWordPosition="3513" endWordPosition="3514"> parallel. Each network considers choices along one functional domain. One such network is the mood network which is responsible for, among other things, determining what kind of speech act should be generated for the top-level element. This network must notice, for example, that the speech-act specified is wh-questioning, but that the item being questioned is not one of the arguments to the top level process. Thus a standard declarative form should be chosen for the realization of this top level element. Standard implementations of systemic grammar ( Davey, 1978; Mann &amp; M at thiessen , 1985; Patten, 1988; Fawcett, 1990), upon traversal of the mood network to this point, would evaluate a set of realization operations which manipulate an eventual surface string. For instance, upon identifying that a declarative form is needed, the subject would be ordered before the finite. We argue in (McCoy, Vijay-Shanker St Yang, 1990) that it is more practical to replace the use of such realization operators with a more formal grammatical system (and that the use of such a system is perfectly consistent with the tenets of systemic linguistics). Thus during the network traversal, our system simply collects t</context>
</contexts>
<marker>Patten, 1988</marker>
<rawString>Patten, T. (1988). Systemic Text Generation as Problem Solving. Cambridge: Cambridge University Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Rubinoff</author>
</authors>
<title>Adapting mumble: Experience with natural language generation.</title>
<date>1986</date>
<booktitle>In Proceedings of the 1986 National Conference on Artificial Intelligence,</booktitle>
<pages>1063--1068</pages>
<publisher>AAAI.</publisher>
<location>Philadelphia, Pa.</location>
<contexts>
<context position="3848" citStr="Rubinoff, 1986" startWordPosition="588" endWordPosition="590">on. A full-blown generation system based on TAG must choose between various renditions of a given logical form on well-motivated grounds. Mumble-86 (McDonald &amp; Pustejovsky, 1985; Meteer et al., 1987) is a sentence generator based on TAG that is able to take more than just the logical form representation into account. Mumble-86 is one of the foremost sentence generation systems and it (or its predecessors) has been used as the sentence generation components of a number of natural language generation projects (e.g., (McDonald, 1983; McCoy, 1989; Conklin &amp; McDonald, 1982; Woolf &amp; McDonald, 1984; Rubinoff, 1986)). After briefly describing the methodology in Mumble-86, we will point out some problematic aspects of its design. We will then describe our architecture which is based on interfacing TAG with a rich functional theory provided by functional systemic grammar (Halliday, 1970; Halliday, 1985; Fawcett, 1980; Hudson, 1981).2 We pay particular attention to those aspects which distinguish our generator from Mumble-86. 2 Mumble-86 Mumble-86 generates from a specification of what is to be said in the form of an &amp;quot;L-Spec&amp;quot; 2 The particular suitability of TAG as a grammatical formalism to be used in conju</context>
</contexts>
<marker>Rubinoff, 1986</marker>
<rawString>Rubinoff, R. (1986). Adapting mumble: Experience with natural language generation. In Proceedings of the 1986 National Conference on Artificial Intelligence, (pp. 1063-1068)., Philadelphia, Pa. AAAI.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Y Schabes</author>
<author>A Abeille</author>
<author>A Joshi</author>
</authors>
<title>Parsing strategies with &apos;lexicalized&apos; grammars: Application to tree adjoining grammars.</title>
<date>1988</date>
<booktitle>In Proceedings of COLING&apos; 88,</booktitle>
<location>Budapest, Hungary.</location>
<marker>Schabes, Abeille, Joshi, 1988</marker>
<rawString>Schabes, Y., Abeille, A., &amp; Joshi, A. (1988). Parsing strategies with &apos;lexicalized&apos; grammars: Application to tree adjoining grammars. In Proceedings of COLING&apos; 88, Budapest, Hungary.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S M Shieber</author>
<author>Y Schabes</author>
</authors>
<title>Generation and synchronous tree-adjoining grammars.</title>
<date>1991</date>
<journal>Computational Intelligence,</journal>
<volume>7</volume>
<issue>4</issue>
<contexts>
<context position="1387" citStr="Shieber and Schabes (1991)" startWordPosition="207" endWordPosition="210">le-86 which, like our system, makes syntactic choice on sophisticated functional grounds. 1 Introduction Joshi (1987) described the relevance of Tree Adjoining Grammar (TAG) (Joshi, 1985; Schabes, Abeille &amp; Joshi, 1988) to Natural Language Generation. In particular, he pointed out how the unique factoring of recursion and dependencies provided by TAG made it particularly appropriate to derive sentence structures from an input provided by a text planning component. Of particular importance is the fact that (all) syntactic dependencies and function argument structure are localized in TAG trees. Shieber and Schabes (1991) discuss using Synchronous TAG for generation. Synchronous TAG provides a formal foundation to make explicit the relationship between elementary syntactic structures and their corresponding semantic counterparts, both expressed as elementary TAG trees. This relationship is made explicit by pairing the elementary trees in the syntactic and logical form languages, and associating the corresponding nodes. Shieber and Schabes (1990) describe a generation algorithm which &amp;quot;parses&amp;quot; an input logical form string recording the adjoining and substitution operations necessary to build the string from its </context>
<context position="7811" citStr="Shieber &amp; Schabes, 1991" startWordPosition="1251" endWordPosition="1254">ile an auxiliary tree is a minimal recursive structure. Thus, an auxiliary tree is characterized as having a leaf node (which is termed the foot node) which has the same label as the root node. The tree in Figure 2 is an auxiliary tree. The adjoining operation essentially inserts an auxiliary tree into another tree. For instance, the tree in Figure 5 is the result of adjoining the auxiliary tree shown in Figure 2 into the initial tree shown in Figure 4 at the node labeled fr-node. tation of sentential complement verbs as higher operators&amp;quot; (McDonald &amp; Pustejovsky, 1985)[p. 101] (also noted by (Shieber &amp; Schabes, 1991)). Instead Mumble-86 requires an alternative logical form representation which amounts to breaking the more traditional logical form into smaller pieces which reference each other. Mumble-86 must be told which of these pieces is the embedded piece that the processing should start with.4 Notice that this architecture is particularly problematic for certain kinds of verbs that take indirect questions. For instance, it would preclude the proper generation of sentences involving &amp;quot;wonder&amp;quot; (as in &amp;quot;I wonder who hit John&amp;quot;). Verbs which require the question to remain embedded are problematic for Mumble</context>
</contexts>
<marker>Shieber, Schabes, 1991</marker>
<rawString>Shieber, S. M. &amp; Schabes, Y. (1991). Generation and synchronous tree-adjoining grammars. Computational Intelligence, 7(4).</rawString>
</citation>
<citation valid="true">
<authors>
<author>C</author>
</authors>
<title>Semantic-headdriven generation.</title>
<date>1990</date>
<journal>Computational Linguistics,</journal>
<volume>16</volume>
<issue>1</issue>
<marker>C, 1990</marker>
<rawString>Shieber, S. M., Van Noord, G., Pereira, F., &amp; Moore, It. C. (1990). Semantic-headdriven generation. Computational Linguistics, 16(1).</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Woolf</author>
<author>D McDonald</author>
</authors>
<title>Contextdependent transitions in tutoring discourse.</title>
<date>1984</date>
<booktitle>In Proceedings of the 1984 National Conference on Artificial Intelligence,</booktitle>
<publisher>AAAI.</publisher>
<location>Washington, D.C.</location>
<contexts>
<context position="3831" citStr="Woolf &amp; McDonald, 1984" startWordPosition="584" endWordPosition="587">oint of view of generation. A full-blown generation system based on TAG must choose between various renditions of a given logical form on well-motivated grounds. Mumble-86 (McDonald &amp; Pustejovsky, 1985; Meteer et al., 1987) is a sentence generator based on TAG that is able to take more than just the logical form representation into account. Mumble-86 is one of the foremost sentence generation systems and it (or its predecessors) has been used as the sentence generation components of a number of natural language generation projects (e.g., (McDonald, 1983; McCoy, 1989; Conklin &amp; McDonald, 1982; Woolf &amp; McDonald, 1984; Rubinoff, 1986)). After briefly describing the methodology in Mumble-86, we will point out some problematic aspects of its design. We will then describe our architecture which is based on interfacing TAG with a rich functional theory provided by functional systemic grammar (Halliday, 1970; Halliday, 1985; Fawcett, 1980; Hudson, 1981).2 We pay particular attention to those aspects which distinguish our generator from Mumble-86. 2 Mumble-86 Mumble-86 generates from a specification of what is to be said in the form of an &amp;quot;L-Spec&amp;quot; 2 The particular suitability of TAG as a grammatical formalism to</context>
</contexts>
<marker>Woolf, McDonald, 1984</marker>
<rawString>Woolf, B. &amp; McDonald, D. (1984). Contextdependent transitions in tutoring discourse. In Proceedings of the 1984 National Conference on Artificial Intelligence, Washington, D.C. AAAI.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Yang</author>
</authors>
<title>An Integrated Approach to Generation Using Systemic Grammars and Tree Adjoining Grammars.</title>
<date>1991</date>
<tech>PhD thesis,</tech>
<institution>University of Delaware.</institution>
<contexts>
<context position="29288" citStr="Yang, 1991" startWordPosition="4911" endWordPosition="4912"> of the functional input associated with the piece being realized in the region). We now consider an example where syntactic information must be passed down as well. Consider the generation of a sentence such as &amp;quot;John tried to win&amp;quot;. The standard structure for this sentence is given in Figure 6. The problem is that in TAG this tree must be derived from the combination of two separate sentential trees: one headed by the verb &amp;quot;tried&amp;quot; and the other by the verb &amp;quot;win&amp;quot;. However we must capture the constraint that the subject of the &amp;quot;win&amp;quot; tree is John (which is the same as the subject of the &amp;quot;tried&amp;quot; (Yang, 1991). It is inserted in the region r1 as a result of a feature disparity on the nodes of the tree resulting from the adjoining operation just described. The same disparity would not occur in indirect questions (e.g., &amp;quot;I wonder who hit John&amp;quot;). tree) but that it is realized only as a (null) pro. Note that this constraint cannot be localized in TAG but cuts across two elementary trees. While generating this sentence, when we choose the &amp;quot;tried&amp;quot; tree in the mother region, we must pass down the information that among the trees associated with win, the one with &amp;quot;pro&amp;quot; in the subject position must be chose</context>
</contexts>
<marker>Yang, 1991</marker>
<rawString>Yang, G. (1991). An Integrated Approach to Generation Using Systemic Grammars and Tree Adjoining Grammars. PhD thesis, University of Delaware.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Yang</author>
<author>K F McCoy</author>
<author>K Vijay-Shanker</author>
</authors>
<title>From functional specification to syntactic structures: Systemic grammar and tree adjoining grammar.</title>
<date>1991</date>
<journal>Computational Intelligence,</journal>
<volume>7</volume>
<issue>4</issue>
<marker>Yang, McCoy, Vijay-Shanker, 1991</marker>
<rawString>Yang, G., McCoy, K. F., &amp; Vijay-Shanker, K. (1991). From functional specification to syntactic structures: Systemic grammar and tree adjoining grammar. Computational Intelligence, 7(4).</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>