<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.002878">
<title confidence="0.999382">
Propminer: A Workflow for Interactive Information Extraction and
Exploration using Dependency Trees
</title>
<author confidence="0.886052">
Alan Akbik, Oresti Konomi and Michail Melnikov
</author>
<affiliation confidence="0.655421">
Technische Univerist¨at Berlin
Databases and Information Systems Group
</affiliation>
<address confidence="0.625824">
Einsteinufer 17, 10587 Berlin, Germany
</address>
<email confidence="0.672045">
firstname.lastname@tu-berlin.de
</email>
<sectionHeader confidence="0.981192" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999330666666666">
The use of deep syntactic information such
as typed dependencies has been shown
to be very effective in Information Ex-
traction. Despite this potential, the pro-
cess of manually creating rule-based in-
formation extractors that operate on de-
pendency trees is not intuitive for persons
without an extensive NLP background. In
this system demonstration, we present a
tool and a workflow designed to enable
initiate users to interactively explore the
effect and expressivity of creating Infor-
mation Extraction rules over dependency
trees. We introduce the proposed five step
workflow for creating information extrac-
tors, the graph query based rule language,
as well as the core features of the PROP-
MINER tool.
</bodyText>
<sectionHeader confidence="0.998988" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999615885245902">
Information Extraction (IE) is the task of gener-
ating structured information, often in the form of
subject-predicate-object relation triples, from un-
structured information such as natural language
text. Although there are well-established methods
for automatically training extractors from anno-
tated data (Mintz et al., 2009), recent years have
seen a renewed interest in manually created and
maintained rule-based IE systems (Doan et al.,
2009; Chiticariu et al., 2010). Advantages of such
systems include a better transparency and explain-
ability of extraction rules, and the resulting main-
tainability and customizability of rule sets.
Another trend in IE is to make increasing
use of deep syntactic information in extrac-
tors (Bunescu and Mooney, 2005), as dependency
parsers become faster and more robust on irregular
text (Bohnet, 2010).
Bringing both trends together are recent works
in the field of Open Information Extraction (OIE).
The systems KRAKEN (Akbik and L¨oser, 2012)
and CLAUSIE (Del Corro and Gemulla, ) use
a set of hand crafted rules on dependency trees
to outperform previous classification based ap-
proaches. The latter system outperforms even OL-
LIE (Mausam et al., 2012), the machine learning
based state-of-the art OIE system on dependency
parses. Not only does CLAUSIE report significant
precision gains over OLLIE, but also finds 2.5 to
3.5 times more relations.
These results indicate a strong potential for
manually creating rule-based Information Extrac-
tion systems using dependency trees. The higher
level syntactic representation, we argue, may even
facilitate rule writing, as - unlike in shallow lexico-
syntactic rules - much linguistic variation such
as inserted clauses and expressions must not be
specifically addressed. This enables the creation
of more succinct IE rules, leading to better ex-
plainability and easier maintenance.
However, despite these advantages, experience
has shown that deep syntactic information is diffi-
cult to read and understand for non NLP-experts.
In this system demonstration, we propose a
workflow designed to tap into this potential, and
present the PROPMINER tool that allows users to
execute this workflow. It is specifically designed
to help persons familiarize themselves with de-
pendency trees and enable exploration and extrac-
tion of relations from parsed document collec-
tions. Core features of PROPMINER are:
Rule generation and modification. Initiate
users are guided by a workflow in which they first
enter and annotate an archetypical sentence with
the desired relation. A rule generation process
then pre-generates an overspecified rule that users
modify along lines suggested by the tool. Our pre-
liminary experiments show that this workflow of
generating and modifying rules eases the learn-
ing curve for non NLP-experts to concepts such
as part-of-speech tags and typed dependencies.
</bodyText>
<page confidence="0.971433">
157
</page>
<note confidence="0.624428">
Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics, pages 157–162,
Sofia, Bulgaria, August 4-9 2013. c�2013 Association for Computational Linguistics
</note>
<figureCaption confidence="0.991463">
Figure 1: Sentence view of PROPMINER, where steps one and two of the workflow are executed. Users
</figureCaption>
<bodyText confidence="0.989139891891892">
enter (or select) a sentence in the top input field and annotate subject, predicate and object for the desired
relation. A rule is generated and displayed in the upper right panel. The lower right panel is the repository
of already created rules. The parse of the input sentence is displayed in the center panel.
Interactivity and feedback. Each modifica-
tion of a rule is immediately queried against a
large collection of parsed sentences stored in a dis-
tributed graph database. The extraction results of
the current state of the rule are presented at all
times to the user, thereby explaining the rule by
showing its effect.
Intuitive query language. Extraction rules are
formulated as queries against a graph database.
Our query language allows users to formulate sub-
tree queries as path expressions, a concept bor-
rowed from the SerQL query language (Broekstra
and Kampman, 2003) because of its intuitive prop-
erties. We show a visualization of the parse tree of
the current sentence next to the generated rule to
ease users into understanding the query language
(see Figure 1).
Guided workflow. All structured information
generated by the user, such as extraction rules,
sentence annotations and evaluation results, are
stored to build up a repository of structured infor-
mation. This information is used to suggest appro-
priate actions to the user.
A preliminary study shows that users with-
out any NLP background are quickly able to
use PROPMINER to create Information Extraction
rules. We noted that users at first stay true to the
workflow and limit manual effort to generalizing
rules, but tend to more directly modify extraction
rules as they grow more experienced. Further-
more, PROPMINER’s interactive nature eases the
process of understanding typed dependencies and
enables the interactive exploration of parsed doc-
ument collections.
</bodyText>
<sectionHeader confidence="0.736982" genericHeader="introduction">
2 Workflow and Query Language
</sectionHeader>
<bodyText confidence="0.999891625">
PROPMINER implements a workflow that con-
sists of five steps (Annotate, Generate, General-
ize, Evaluate and Store). It is designed to allow
users that are unfamiliar with syntactic annotation
to create rule-based extractors. In the following
subsections, we explain the five steps in detail. As
a running example, we use the task of creating an
extractor for the PERSONBIRTHPLACE relation.
</bodyText>
<subsectionHeader confidence="0.973239">
2.1 Annotate
</subsectionHeader>
<bodyText confidence="0.999143875">
Users begin the process by constructing an
archetypical sentence for the desired information
type. This sentence constitutes an example that
expresses the desired relation. For instance, a
user interested in the PERSONBIRTHPLACE rela-
tion can choose a sentence such as “Albert Ein-
stein was born in Germany.”.
In this sentence, the user annotates the words
</bodyText>
<page confidence="0.992042">
158
</page>
<bodyText confidence="0.99949875">
belonging to the relation triple, assigning the roles
of subject, predicate and object. Subject and ob-
ject are the entities in the example between which
the relation holds. The predicate are the words
in the sentence that express the relationship. Ac-
cordingly, the user marks “Albert Einstein” and
“Germany” as subject and object, and “born in”
as predicate in the example sentence.
Figure 1 shows the sentence view of PROP-
MINER, with the example sentence entered and an-
notated in the top input fields, and the parsed sen-
tence shown in the center panel.
</bodyText>
<subsectionHeader confidence="0.992747">
2.2 Generate
</subsectionHeader>
<bodyText confidence="0.999968">
PROPMINER generates a rule from the annotated
sentence by determining the minimal subtree in
the sentence’s dependency tree that connects all
words labeled as subject, predicate and object.
The rule consists of this minimal subtree, as well
as constraints in the part-of-speech (POS) tags and
lexical values of all involved words.
Rules are formulated as queries against a
database in which parsed sentences are stored as
graphs: Nodes represent words and edges repre-
sent typed dependencies. At each node, the POS
tag and the lexical value of the word are stored as
attributes.
A PROPMINER rule (or query) consists mainly
of three parts: A SELECT clause, a FROM clause
and a WHERE clause. The generated rule for the
running example is displayed in Figure 1. Its indi-
vidual parts are discussed in the following subsec-
tions.
</bodyText>
<subsectionHeader confidence="0.666422">
2.2.1 SELECT and FROM
</subsectionHeader>
<bodyText confidence="0.999790823529412">
The SELECT clause determines the fields of tu-
ple to be returned by the query. Typically, this
consists of a subject-predicate-object triple, but
queries with fewer or more fields are possible.
The FROM clause is a path expression that
specifies the subgraph in the dependency tree the
rule must match, and defines which nodes in the
subgraph correspond to the fields in the SELECT
clause. A path expression is a set of node-edge-
node triples. Each of these triples defines one edge
(typed dependency) that must hold between two
nodes (words). The nodes are denoted in curly
brackets, where the text inside curly brackets as-
signs a variable name to the node.
Consider the SELECT and FROM clauses for
the rule generated for the running example, illus-
trated in the following:
</bodyText>
<table confidence="0.4950214">
SELECT subject, predicate, object
FROM
{predicate.3} nsubjpass {subject},
{predicate.3} prep {predicate.4},
{predicate.4} pobj {object}
</table>
<bodyText confidence="0.999535380952381">
Here, the SELECT statement defines the de-
sired result of this query, namely a tuple with a
“subject”, “object” and a “predicate” field: The
path expression in this example is specified in the
three lines in the FROM statement. It defines a
subtree that consists of four nodes connected by
three typed dependencies.
The nodes are assigned the variable names
“subject”, “object”, “predicate.3” and “predi-
cate.4”. The node “subject” is defined to be a
passive subject (typed dependency “nsubjpass”) of
the node “predicate.3”. The node “predicate.3” is
also connected via the dependency “prep” to the
node “predicate.4”, which in turn is connected to
“object” with the dependency “pobj”.
If this rule matches, the lexical values of the
matching nodes are returned. Because the predi-
cate in this example consists of two words (“born”
and “in”), two nodes are assigned the “predicate”
value, subtyped per convention with a dot and a
number (“predicate.3” and “predicate.4”).
</bodyText>
<sectionHeader confidence="0.585464" genericHeader="method">
2.2.2 WHERE
</sectionHeader>
<bodyText confidence="0.999766">
In the WHERE-clause, the attributes of words
in the subtree can be further restricted. Auto-
generated rules are maximally restricted. The rule
for the running example is initially restricted as
follows:
</bodyText>
<table confidence="0.9433335">
WHERE
AND subject POS “NNP”
AND predicate.3 POS “VBN”
AND predicate.4 POS “IN”
AND object POS “NNP”
AND subject TEXT “Einstein”
AND predicate.3 TEXT “born”
AND predicate.4 TEXT “in”
AND object TEXT “Germany”
AND subject FULL_ENTITY
</table>
<bodyText confidence="0.997729333333333">
Word attributes are restricted by naming the
variable followed either by “POS” or “TEXT” and
the restricting value. Here, for instance, the POS
tag of the “object” node is restricted to “NNP” (a
proper noun), and its lexical value is restricted to
“Germany”.
</bodyText>
<page confidence="0.993749">
159
</page>
<table confidence="0.991575727272727">
a) Generated rule b) Generalize subject text c) Generalize subject and object
SELECT subject, predicate, object SELECT subject, predicate, object SELECT subject, predicate, object
FROM { collapsed } FROM { collapsed } FROM { collapsed }
WHERE WHERE WHERE
subject POS “NNP” subject POS “NNP” subject POS “NNP”
AND predicate.3 POS “VBZ” AND predicate.3 POS “VBZ” AND predicate.3 POS “VBZ”
AND predicate.4 POS “IN” AND predicate.4 POS “IN” AND predicate.4 POS “IN”
AND object POS `NNP” AND object POS `NNP” AND object POS `NNP”
AND subject TEXT “Einstein” AND TEXT “Einstein” AND TEXT “Einstein”
subject TEXT “born” subject TEXT “born”
AND predicate.3 AND predicate.3
AND predicate.3 TEXT “born”
AND predicate.4 TEXT “in” AND predicate.4 TEXT “in” AND predicate.4 TEXT “in”
AND object TEXT “Germany” AND object TEXT “Germany” AND
object TEXT “Germany”
AND subject ALLCHILDREN
AND subject ALLCHILDREN AND subject ALLCHILDREN
Subject Predicate Object Subject Predicate Object Subject Predicate Object
A. Einstein born in Germany A. Einstein born in Germany A. Einstein born in Germany
C. F. Gauss born in Germany J. Lagrange born in Italy
A. Humboldt born in Germany I. Newton born in England
... ... ... ... ... ...
</table>
<figureCaption confidence="0.861379">
Figure 2: Conceptual example of rule modification through generalization. Below are example relation
triples found for each rule. Rule a) is generated from the annotated sentence in the running example,
and finds only one triple. Rule b) is the same rule without the restriction in the subject text. The rule
now finds a number of relation triples in the document collection, representing different entities born in
Germany. In Rule c) both subject and object text restrictions are removed. This yields a rule that finds
different entities born in any entity.
</figureCaption>
<bodyText confidence="0.947491166666667">
Additionally, a number of subtree gathering
mechanisms can be specified in the WHERE
clause. For example, the keyword FULL ENTITY
causes the variable binding for the subject to ex-
pand to all children nodes expected to be part of a
named entity.
</bodyText>
<subsectionHeader confidence="0.977493">
2.3 Generalize
</subsectionHeader>
<bodyText confidence="0.999651322580645">
The rule generated in step two of the workflow is
strongly overspecified to the annotated sentence;
all features, including the shallow syntactic and
lexical values of all words in the subtree, are con-
strained. The resulting rule only finds exact in-
stances of the relations as seen in the archetypical
sentence. Refer to Figure 2 a) for an example.
In step three of the workflow, the user general-
izes the auto-generated rule with the help of sug-
gestions. Common lines of generalizing rules fo-
cus on the WHERE clause; here, users can remove
or modify constraints on the attributes of words.
For example, by removing the restriction on the
lexical value of the subject, the rule is generalized
to finding all entities that were born in “Germany”,
instead of only entities with the lexical value “Ein-
stein”. This example is illustrated in Figure 2 b).
The rule can then be further generalized by re-
moving the lexical constraint on the object, yield-
ing the (desired) rule that finds all entities that
were born in any location with an entity name.
Figure 2 c) shows an example of this rule, as well
as example results.
Further options of generalization include re-
moving the lexical constraints in one or both of the
predicate words, or modifying the POS tag con-
straints. At each modification, extraction results
for the current state of the rule are displayed to as-
sist the user. When the results match the desired
relation, the user can proceed to the next step in
the workflow.
</bodyText>
<subsectionHeader confidence="0.985421">
2.4 Evaluate
</subsectionHeader>
<bodyText confidence="0.999978111111111">
Each rule created by the user is evaluated in the
corpus view of PROPMINER, displayed in Fig-
ure 3. This view shows a sample of extraction
results of the rule in a table. The user can scroll
through the table and in each row see the extracted
information as well as the sentence the informa-
tion was extracted from. If the extracted informa-
tion matches the statement in the sentence, the user
can mark this fact as correct.
</bodyText>
<subsectionHeader confidence="0.993179">
2.5 Store
</subsectionHeader>
<bodyText confidence="0.999606166666667">
If the user is satisfied with the extraction rule, he
can assign it to a relation and store it in the rule
repository. He can repeat the process with another
sentence to find more patterns for the desired rela-
tion. As the workflow is repeated, the rule reposi-
tory will build up, along with a repository of evalu-
</bodyText>
<page confidence="0.996147">
160
</page>
<figureCaption confidence="0.983549">
Figure 3: Corpus view of PROPMINER, where extraction rules are modified and evaluated. The center
panel is a table that holds the extraction results for the current rule. Users can inspect each extracted
triple by clicking on the row. This will display the sentence in which the triple was found.
</figureCaption>
<bodyText confidence="0.987867814814815">
ation results. This enables additional functionality
in subsequent executions of the workflow:
Sentence suggestions. Evaluation results are
used to assist the user in finding new sentences
that might be relevant to the relation. For exam-
ple, a user might mark a triple with the subject “C.
F. Gauss” and object “Germany” as a correct in-
stance of the PERSONBIRTHPLACE relation dur-
ing evaluation. PROPMINER uses this informa-
tion to retrieve all sentences that contain these two
entities from its database. These sentences are
treated as probable candidates for containing the
PERSONBIRTHPLACE relation, because they con-
tain two entities known to be in this relationship.
Accordingly, they are suggested to the user upon
request.
Conflict resolution. In order to prevent con-
flicts with existing rules, the entire rule set in the
repository is applied to each sentence the work-
flow is started with. If any existing information
extraction rule can be applied, the results of the
extraction are presented to the user as annotations
in the sentence. If this extraction result is already
complete from the point of view of the user, he
can proceed to a new sentence. If not, the user can
proceed to generate a new rule, or modify existing
ones.
</bodyText>
<sectionHeader confidence="0.996832" genericHeader="method">
3 Previous Work
</sectionHeader>
<bodyText confidence="0.999936636363636">
Previous work on improving the rule creation pro-
cess for IE systems has mainly focused on assist-
ing users with machine learning techniques, such
as pre-generation of regular expressions (Brauer et
al., 2011) or pattern suggestions (Li et al., 2011).
To improve usability, (Li et al., 2012) present a
tool with a wizard-like environment to guide ex-
tractor development. While previous work focuses
on shallow patterns, the focus of PROPMINER is to
help create rules over dependency trees and aid in
the exploration of parsed document collections.
</bodyText>
<sectionHeader confidence="0.995271" genericHeader="evaluation">
4 Evaluation and Outlook
</sectionHeader>
<bodyText confidence="0.999989692307692">
We conducted a preliminary study in which we
asked 5 computer scientists unfamiliar with com-
putational linguistics to use the tool to cre-
ate extractors for the relations PERSONBIRTH-
PLACE, PERSONMARRIEDTOPERSON and PER-
SONWONPRIZE. The participants were given a
two hour introduction explaining information ex-
traction and subject-predicate-object triples. We
introduced them to the five step workflow using
the PERSONBIRTHPLACE example also used as
running example in this paper, as well as other,
more complex examples. The participants were
given one hour for each relation and asked to cre-
</bodyText>
<page confidence="0.994676">
161
</page>
<bodyText confidence="0.999972634146342">
ate a rule set for each relation. After the con-
clusion we interviewed the participants and asked
them to rate the usability both for information ex-
traction, as well as for the exploration of depen-
dency tree information.
In the latter category, participants generally
gave positive feedback. Participants stated that the
interactive nature of the tool helped understanding
extraction rules and facilitated exploring informa-
tion stated in the document collection. 4 out of
5 participants deviated from the suggested work-
flow and more directly edited rules as they be-
came more comfortable with the tool. All par-
ticipants consulted information on POS tags and
typed dependencies during the process, in order to
better understand the rules and query results. Par-
ticipants suggested adding an explanation function
for individual syntactic elements to the tool.
While all users were generally able to create
rule sets for each of the relations, two main prob-
lems were cited for the creation of extraction rules.
The first is a problem in conflict resolution; in
some cases, users were not able to discern why
a rule gave imperfect extraction results. We re-
viewed some rules and found that many of these
cases stem from faulty dependency parses, which
non NLP-experts cannot recognize. At present, we
are searching for ways to address this problem.
A second problem were limitations of the rule
language: Participants expressed the need for
named entity types such as PERSON and LOCA-
TION, which in the prototype were not included at
the time of evaluation. However, because of the
design of the query language and the underlying
graph database, such additional operators can be
incorporated easily.
Consequently, current work focuses on extend-
ing the range of user studies to gather more sug-
gestions for the query language and the feature set,
and integrating additional operators into the sys-
tem.
</bodyText>
<sectionHeader confidence="0.999257" genericHeader="conclusions">
5 Demonstration
</sectionHeader>
<bodyText confidence="0.999986875">
In this demonstration we show how PROPMINER
can be used for creating extractors or exploring
the parsed document collection. The hands-on
demonstration allows initiate users to execute the
workflow presented in this paper, but also enables
persons more familiar with syntactic annotation to
more directly query the graph database using our
query language and feature set.
</bodyText>
<sectionHeader confidence="0.99367" genericHeader="acknowledgments">
Acknowledgements
</sectionHeader>
<bodyText confidence="0.7133382">
We would like to thank the anonymous reviewers for their
helpful comments. Alan Akbik received funding from the Eu-
ropean Union’s Seventh Framework Programme (FP7/2007-
2013) under grant agreement no ICT-2009-4-1 270137 ’Scal-
able Preservation Environments’ (SCAPE).
</bodyText>
<sectionHeader confidence="0.929423" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.9998840625">
Alan Akbik and Alexander L¨oser. 2012. Kraken: N-ary facts
in open information extraction. In AKBC-WEKEX, pages
52–56. Association for Computational Linguistics.
Bernd Bohnet. 2010. Very high accuracy and fast depen-
dency parsing is not a contradiction. In COLING, pages
89–97. Association for Computational Linguistics.
Falk Brauer, Robert Rieger, Adrian Mocan, and Wojciech M
Barczynski. 2011. Enabling information extraction by
inference of regular expressions from sample entities. In
CIKM, pages 1285–1294. ACM.
Jeen Broekstra and Arjohn Kampman. 2003. Serql: a second
generation rdf query language. In Proc. SWAD-Europe
Workshop on Semantic Web Storage and Retrieval, pages
13–14.
Razvan C Bunescu and Raymond J Mooney. 2005. A short-
est path dependency kernel for relation extraction. In
EMNLP, pages 724–731. Association for Computational
Linguistics.
Laura Chiticariu, Rajasekar Krishnamurthy, Yunyao Li,
Sriram Raghavan, Frederick R Reiss, and Shivakumar
Vaithyanathan. 2010. Systemt: an algebraic approach to
declarative information extraction. In ACL, pages 128–
137. Association for Computational Linguistics.
Luciano Del Corro and Rainer Gemulla. Clausie: Clause-
based open information extraction. In WWW (to appear
in 2013).
AnHai Doan, Jeffrey F Naughton, Raghu Ramakrishnan,
Akanksha Baid, Xiaoyong Chai, Fei Chen, Ting Chen,
Eric Chu, Pedro DeRose, Byron Gao, et al. 2009. In-
formation extraction challenges in managing unstructured
data. ACM SIGMOD Record, 37(4):14–20.
Yunyao Li, Vivian Chu, Sebastian Blohm, Huaiyu Zhu, and
Howard Ho. 2011. Facilitating pattern discovery for rela-
tion extraction with semantic-signature-based clustering.
In CIKM, pages 1415–1424. ACM.
Yunyao Li, Laura Chiticariu, Huahai Yang, Frederick R
Reiss, and Arnaldo Carreno-fuentes. 2012. Wizie: a best
practices guided development environment for informa-
tion extraction. In Proceedings of the ACL 2012 System
Demonstrations, pages 109–114. Association for Compu-
tational Linguistics.
Mausam, Michael Schmitz, Stephen Soderland, Robert Bart,
and Oren Etzioni. 2012. Open language learning for in-
formation extraction. In EMNLP-CoNLL, pages 523–534.
Mike Mintz, Steven Bills, Rion Snow, and Dan Jurafsky.
2009. Distant supervision for relation extraction without
labeled data. In ACL/IJCNLP. Volume 2-Volume 2, pages
1003–1011. Association for Computational Linguistics.
</reference>
<page confidence="0.997791">
162
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.141576">
<title confidence="0.750917">Propminer: A Workflow for Interactive Information Extraction Exploration using Dependency Trees Alan Akbik, Oresti Konomi and Michail Technische Univerist¨at Databases and Information Systems</title>
<author confidence="0.538541">Einsteinufer</author>
<email confidence="0.998566">firstname.lastname@tu-berlin.de</email>
<abstract confidence="0.969584833333333">The use of deep syntactic information such as typed dependencies has been shown to be very effective in Information Extraction. Despite this potential, the process of manually creating rule-based information extractors that operate on dependency trees is not intuitive for persons without an extensive NLP background. In this system demonstration, we present a tool and a workflow designed to enable initiate users to interactively explore the effect and expressivity of creating Information Extraction rules over dependency trees. We introduce the proposed five step workflow for creating information extractors, the graph query based rule language, well as the core features of the</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Alan Akbik</author>
<author>Alexander L¨oser</author>
</authors>
<title>Kraken: N-ary facts in open information extraction.</title>
<date>2012</date>
<booktitle>In AKBC-WEKEX,</booktitle>
<pages>52--56</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<marker>Akbik, L¨oser, 2012</marker>
<rawString>Alan Akbik and Alexander L¨oser. 2012. Kraken: N-ary facts in open information extraction. In AKBC-WEKEX, pages 52–56. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Bernd Bohnet</author>
</authors>
<title>Very high accuracy and fast dependency parsing is not a contradiction. In</title>
<date>2010</date>
<booktitle>COLING,</booktitle>
<pages>89--97</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<contexts>
<context position="1855" citStr="Bohnet, 2010" startWordPosition="270" endWordPosition="271">-established methods for automatically training extractors from annotated data (Mintz et al., 2009), recent years have seen a renewed interest in manually created and maintained rule-based IE systems (Doan et al., 2009; Chiticariu et al., 2010). Advantages of such systems include a better transparency and explainability of extraction rules, and the resulting maintainability and customizability of rule sets. Another trend in IE is to make increasing use of deep syntactic information in extractors (Bunescu and Mooney, 2005), as dependency parsers become faster and more robust on irregular text (Bohnet, 2010). Bringing both trends together are recent works in the field of Open Information Extraction (OIE). The systems KRAKEN (Akbik and L¨oser, 2012) and CLAUSIE (Del Corro and Gemulla, ) use a set of hand crafted rules on dependency trees to outperform previous classification based approaches. The latter system outperforms even OLLIE (Mausam et al., 2012), the machine learning based state-of-the art OIE system on dependency parses. Not only does CLAUSIE report significant precision gains over OLLIE, but also finds 2.5 to 3.5 times more relations. These results indicate a strong potential for manual</context>
</contexts>
<marker>Bohnet, 2010</marker>
<rawString>Bernd Bohnet. 2010. Very high accuracy and fast dependency parsing is not a contradiction. In COLING, pages 89–97. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Falk Brauer</author>
<author>Robert Rieger</author>
<author>Adrian Mocan</author>
<author>Wojciech M Barczynski</author>
</authors>
<title>Enabling information extraction by inference of regular expressions from sample entities.</title>
<date>2011</date>
<booktitle>In CIKM,</booktitle>
<pages>1285--1294</pages>
<publisher>ACM.</publisher>
<contexts>
<context position="16818" citStr="Brauer et al., 2011" startWordPosition="2695" endWordPosition="2698">applied to each sentence the workflow is started with. If any existing information extraction rule can be applied, the results of the extraction are presented to the user as annotations in the sentence. If this extraction result is already complete from the point of view of the user, he can proceed to a new sentence. If not, the user can proceed to generate a new rule, or modify existing ones. 3 Previous Work Previous work on improving the rule creation process for IE systems has mainly focused on assisting users with machine learning techniques, such as pre-generation of regular expressions (Brauer et al., 2011) or pattern suggestions (Li et al., 2011). To improve usability, (Li et al., 2012) present a tool with a wizard-like environment to guide extractor development. While previous work focuses on shallow patterns, the focus of PROPMINER is to help create rules over dependency trees and aid in the exploration of parsed document collections. 4 Evaluation and Outlook We conducted a preliminary study in which we asked 5 computer scientists unfamiliar with computational linguistics to use the tool to create extractors for the relations PERSONBIRTHPLACE, PERSONMARRIEDTOPERSON and PERSONWONPRIZE. The par</context>
</contexts>
<marker>Brauer, Rieger, Mocan, Barczynski, 2011</marker>
<rawString>Falk Brauer, Robert Rieger, Adrian Mocan, and Wojciech M Barczynski. 2011. Enabling information extraction by inference of regular expressions from sample entities. In CIKM, pages 1285–1294. ACM.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jeen Broekstra</author>
<author>Arjohn Kampman</author>
</authors>
<title>Serql: a second generation rdf query language.</title>
<date>2003</date>
<booktitle>In Proc. SWAD-Europe Workshop on Semantic Web Storage and Retrieval,</booktitle>
<pages>13--14</pages>
<contexts>
<context position="5045" citStr="Broekstra and Kampman, 2003" startWordPosition="762" endWordPosition="765">rse of the input sentence is displayed in the center panel. Interactivity and feedback. Each modification of a rule is immediately queried against a large collection of parsed sentences stored in a distributed graph database. The extraction results of the current state of the rule are presented at all times to the user, thereby explaining the rule by showing its effect. Intuitive query language. Extraction rules are formulated as queries against a graph database. Our query language allows users to formulate subtree queries as path expressions, a concept borrowed from the SerQL query language (Broekstra and Kampman, 2003) because of its intuitive properties. We show a visualization of the parse tree of the current sentence next to the generated rule to ease users into understanding the query language (see Figure 1). Guided workflow. All structured information generated by the user, such as extraction rules, sentence annotations and evaluation results, are stored to build up a repository of structured information. This information is used to suggest appropriate actions to the user. A preliminary study shows that users without any NLP background are quickly able to use PROPMINER to create Information Extraction </context>
</contexts>
<marker>Broekstra, Kampman, 2003</marker>
<rawString>Jeen Broekstra and Arjohn Kampman. 2003. Serql: a second generation rdf query language. In Proc. SWAD-Europe Workshop on Semantic Web Storage and Retrieval, pages 13–14.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Razvan C Bunescu</author>
<author>Raymond J Mooney</author>
</authors>
<title>A shortest path dependency kernel for relation extraction. In</title>
<date>2005</date>
<booktitle>EMNLP,</booktitle>
<pages>724--731</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<contexts>
<context position="1769" citStr="Bunescu and Mooney, 2005" startWordPosition="255" endWordPosition="258">tion triples, from unstructured information such as natural language text. Although there are well-established methods for automatically training extractors from annotated data (Mintz et al., 2009), recent years have seen a renewed interest in manually created and maintained rule-based IE systems (Doan et al., 2009; Chiticariu et al., 2010). Advantages of such systems include a better transparency and explainability of extraction rules, and the resulting maintainability and customizability of rule sets. Another trend in IE is to make increasing use of deep syntactic information in extractors (Bunescu and Mooney, 2005), as dependency parsers become faster and more robust on irregular text (Bohnet, 2010). Bringing both trends together are recent works in the field of Open Information Extraction (OIE). The systems KRAKEN (Akbik and L¨oser, 2012) and CLAUSIE (Del Corro and Gemulla, ) use a set of hand crafted rules on dependency trees to outperform previous classification based approaches. The latter system outperforms even OLLIE (Mausam et al., 2012), the machine learning based state-of-the art OIE system on dependency parses. Not only does CLAUSIE report significant precision gains over OLLIE, but also finds</context>
</contexts>
<marker>Bunescu, Mooney, 2005</marker>
<rawString>Razvan C Bunescu and Raymond J Mooney. 2005. A shortest path dependency kernel for relation extraction. In EMNLP, pages 724–731. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Laura Chiticariu</author>
<author>Rajasekar Krishnamurthy</author>
<author>Yunyao Li</author>
<author>Sriram Raghavan</author>
<author>Frederick R Reiss</author>
<author>Shivakumar Vaithyanathan</author>
</authors>
<title>Systemt: an algebraic approach to declarative information extraction.</title>
<date>2010</date>
<booktitle>In ACL,</booktitle>
<pages>128--137</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<contexts>
<context position="1486" citStr="Chiticariu et al., 2010" startWordPosition="211" endWordPosition="214">tep workflow for creating information extractors, the graph query based rule language, as well as the core features of the PROPMINER tool. 1 Introduction Information Extraction (IE) is the task of generating structured information, often in the form of subject-predicate-object relation triples, from unstructured information such as natural language text. Although there are well-established methods for automatically training extractors from annotated data (Mintz et al., 2009), recent years have seen a renewed interest in manually created and maintained rule-based IE systems (Doan et al., 2009; Chiticariu et al., 2010). Advantages of such systems include a better transparency and explainability of extraction rules, and the resulting maintainability and customizability of rule sets. Another trend in IE is to make increasing use of deep syntactic information in extractors (Bunescu and Mooney, 2005), as dependency parsers become faster and more robust on irregular text (Bohnet, 2010). Bringing both trends together are recent works in the field of Open Information Extraction (OIE). The systems KRAKEN (Akbik and L¨oser, 2012) and CLAUSIE (Del Corro and Gemulla, ) use a set of hand crafted rules on dependency tre</context>
</contexts>
<marker>Chiticariu, Krishnamurthy, Li, Raghavan, Reiss, Vaithyanathan, 2010</marker>
<rawString>Laura Chiticariu, Rajasekar Krishnamurthy, Yunyao Li, Sriram Raghavan, Frederick R Reiss, and Shivakumar Vaithyanathan. 2010. Systemt: an algebraic approach to declarative information extraction. In ACL, pages 128– 137. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Luciano Del Corro</author>
<author>Rainer Gemulla</author>
</authors>
<title>Clausie: Clausebased open information extraction.</title>
<date>2013</date>
<booktitle>In WWW</booktitle>
<note>to appear in</note>
<marker>Corro, Gemulla, 2013</marker>
<rawString>Luciano Del Corro and Rainer Gemulla. Clausie: Clausebased open information extraction. In WWW (to appear in 2013).</rawString>
</citation>
<citation valid="true">
<authors>
<author>AnHai Doan</author>
<author>Jeffrey F Naughton</author>
</authors>
<title>Raghu Ramakrishnan, Akanksha Baid, Xiaoyong Chai, Fei Chen, Ting Chen, Eric Chu,</title>
<date>2009</date>
<journal>ACM SIGMOD Record,</journal>
<volume>37</volume>
<issue>4</issue>
<location>Pedro DeRose, Byron Gao, et</location>
<marker>Doan, Naughton, 2009</marker>
<rawString>AnHai Doan, Jeffrey F Naughton, Raghu Ramakrishnan, Akanksha Baid, Xiaoyong Chai, Fei Chen, Ting Chen, Eric Chu, Pedro DeRose, Byron Gao, et al. 2009. Information extraction challenges in managing unstructured data. ACM SIGMOD Record, 37(4):14–20.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yunyao Li</author>
<author>Vivian Chu</author>
<author>Sebastian Blohm</author>
<author>Huaiyu Zhu</author>
<author>Howard Ho</author>
</authors>
<title>Facilitating pattern discovery for relation extraction with semantic-signature-based clustering.</title>
<date>2011</date>
<booktitle>In CIKM,</booktitle>
<pages>1415--1424</pages>
<publisher>ACM.</publisher>
<contexts>
<context position="16859" citStr="Li et al., 2011" startWordPosition="2702" endWordPosition="2705">ted with. If any existing information extraction rule can be applied, the results of the extraction are presented to the user as annotations in the sentence. If this extraction result is already complete from the point of view of the user, he can proceed to a new sentence. If not, the user can proceed to generate a new rule, or modify existing ones. 3 Previous Work Previous work on improving the rule creation process for IE systems has mainly focused on assisting users with machine learning techniques, such as pre-generation of regular expressions (Brauer et al., 2011) or pattern suggestions (Li et al., 2011). To improve usability, (Li et al., 2012) present a tool with a wizard-like environment to guide extractor development. While previous work focuses on shallow patterns, the focus of PROPMINER is to help create rules over dependency trees and aid in the exploration of parsed document collections. 4 Evaluation and Outlook We conducted a preliminary study in which we asked 5 computer scientists unfamiliar with computational linguistics to use the tool to create extractors for the relations PERSONBIRTHPLACE, PERSONMARRIEDTOPERSON and PERSONWONPRIZE. The participants were given a two hour introduct</context>
</contexts>
<marker>Li, Chu, Blohm, Zhu, Ho, 2011</marker>
<rawString>Yunyao Li, Vivian Chu, Sebastian Blohm, Huaiyu Zhu, and Howard Ho. 2011. Facilitating pattern discovery for relation extraction with semantic-signature-based clustering. In CIKM, pages 1415–1424. ACM.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yunyao Li</author>
<author>Laura Chiticariu</author>
<author>Huahai Yang</author>
<author>Frederick R Reiss</author>
<author>Arnaldo Carreno-fuentes</author>
</authors>
<title>Wizie: a best practices guided development environment for information extraction.</title>
<date>2012</date>
<booktitle>In Proceedings of the ACL 2012 System Demonstrations,</booktitle>
<pages>109--114</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<contexts>
<context position="16900" citStr="Li et al., 2012" startWordPosition="2709" endWordPosition="2712">raction rule can be applied, the results of the extraction are presented to the user as annotations in the sentence. If this extraction result is already complete from the point of view of the user, he can proceed to a new sentence. If not, the user can proceed to generate a new rule, or modify existing ones. 3 Previous Work Previous work on improving the rule creation process for IE systems has mainly focused on assisting users with machine learning techniques, such as pre-generation of regular expressions (Brauer et al., 2011) or pattern suggestions (Li et al., 2011). To improve usability, (Li et al., 2012) present a tool with a wizard-like environment to guide extractor development. While previous work focuses on shallow patterns, the focus of PROPMINER is to help create rules over dependency trees and aid in the exploration of parsed document collections. 4 Evaluation and Outlook We conducted a preliminary study in which we asked 5 computer scientists unfamiliar with computational linguistics to use the tool to create extractors for the relations PERSONBIRTHPLACE, PERSONMARRIEDTOPERSON and PERSONWONPRIZE. The participants were given a two hour introduction explaining information extraction and</context>
</contexts>
<marker>Li, Chiticariu, Yang, Reiss, Carreno-fuentes, 2012</marker>
<rawString>Yunyao Li, Laura Chiticariu, Huahai Yang, Frederick R Reiss, and Arnaldo Carreno-fuentes. 2012. Wizie: a best practices guided development environment for information extraction. In Proceedings of the ACL 2012 System Demonstrations, pages 109–114. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael Schmitz Mausam</author>
<author>Stephen Soderland</author>
<author>Robert Bart</author>
<author>Oren Etzioni</author>
</authors>
<title>Open language learning for information extraction.</title>
<date>2012</date>
<booktitle>In EMNLP-CoNLL,</booktitle>
<pages>523--534</pages>
<contexts>
<context position="2207" citStr="Mausam et al., 2012" startWordPosition="325" endWordPosition="328">d the resulting maintainability and customizability of rule sets. Another trend in IE is to make increasing use of deep syntactic information in extractors (Bunescu and Mooney, 2005), as dependency parsers become faster and more robust on irregular text (Bohnet, 2010). Bringing both trends together are recent works in the field of Open Information Extraction (OIE). The systems KRAKEN (Akbik and L¨oser, 2012) and CLAUSIE (Del Corro and Gemulla, ) use a set of hand crafted rules on dependency trees to outperform previous classification based approaches. The latter system outperforms even OLLIE (Mausam et al., 2012), the machine learning based state-of-the art OIE system on dependency parses. Not only does CLAUSIE report significant precision gains over OLLIE, but also finds 2.5 to 3.5 times more relations. These results indicate a strong potential for manually creating rule-based Information Extraction systems using dependency trees. The higher level syntactic representation, we argue, may even facilitate rule writing, as - unlike in shallow lexicosyntactic rules - much linguistic variation such as inserted clauses and expressions must not be specifically addressed. This enables the creation of more suc</context>
</contexts>
<marker>Mausam, Soderland, Bart, Etzioni, 2012</marker>
<rawString>Mausam, Michael Schmitz, Stephen Soderland, Robert Bart, and Oren Etzioni. 2012. Open language learning for information extraction. In EMNLP-CoNLL, pages 523–534.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mike Mintz</author>
<author>Steven Bills</author>
<author>Rion Snow</author>
<author>Dan Jurafsky</author>
</authors>
<title>Distant supervision for relation extraction without labeled data.</title>
<date>2009</date>
<booktitle>In ACL/IJCNLP. Volume</booktitle>
<volume>2</volume>
<pages>1003--1011</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<contexts>
<context position="1341" citStr="Mintz et al., 2009" startWordPosition="188" endWordPosition="191">ctively explore the effect and expressivity of creating Information Extraction rules over dependency trees. We introduce the proposed five step workflow for creating information extractors, the graph query based rule language, as well as the core features of the PROPMINER tool. 1 Introduction Information Extraction (IE) is the task of generating structured information, often in the form of subject-predicate-object relation triples, from unstructured information such as natural language text. Although there are well-established methods for automatically training extractors from annotated data (Mintz et al., 2009), recent years have seen a renewed interest in manually created and maintained rule-based IE systems (Doan et al., 2009; Chiticariu et al., 2010). Advantages of such systems include a better transparency and explainability of extraction rules, and the resulting maintainability and customizability of rule sets. Another trend in IE is to make increasing use of deep syntactic information in extractors (Bunescu and Mooney, 2005), as dependency parsers become faster and more robust on irregular text (Bohnet, 2010). Bringing both trends together are recent works in the field of Open Information Extr</context>
</contexts>
<marker>Mintz, Bills, Snow, Jurafsky, 2009</marker>
<rawString>Mike Mintz, Steven Bills, Rion Snow, and Dan Jurafsky. 2009. Distant supervision for relation extraction without labeled data. In ACL/IJCNLP. Volume 2-Volume 2, pages 1003–1011. Association for Computational Linguistics.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>