<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000002">
<title confidence="0.9973615">
Improved Semantic Representations From
Tree-Structured Long Short-Term Memory Networks
</title>
<author confidence="0.999028">
Kai Sheng Tai, Richard Socher*, Christopher D. Manning
</author>
<affiliation confidence="0.997259">
Computer Science Department, Stanford University, *MetaMind Inc.
</affiliation>
<email confidence="0.985159">
kst@cs.stanford.edu, richard@metamind.io, manning@stanford.edu
</email>
<sectionHeader confidence="0.997345" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.99823885">
Because of their superior ability to pre-
serve sequence information over time,
Long Short-Term Memory (LSTM) net-
works, a type of recurrent neural net-
work with a more complex computational
unit, have obtained strong results on a va-
riety of sequence modeling tasks. The
only underlying LSTM structure that has
been explored so far is a linear chain.
However, natural language exhibits syn-
tactic properties that would naturally com-
bine words to phrases. We introduce the
Tree-LSTM, a generalization of LSTMs to
tree-structured network topologies. Tree-
LSTMs outperform all existing systems
and strong LSTM baselines on two tasks:
predicting the semantic relatedness of two
sentences (SemEval 2014, Task 1) and
sentiment classification (Stanford Senti-
ment Treebank).
</bodyText>
<sectionHeader confidence="0.999518" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.991755611111111">
Most models for distributed representations of
phrases and sentences—that is, models where real-
valued vectors are used to represent meaning—fall
into one of three classes: bag-of-words models,
sequence models, and tree-structured models. In
bag-of-words models, phrase and sentence repre-
sentations are independent of word order; for ex-
ample, they can be generated by averaging con-
stituent word representations (Landauer and Du-
mais, 1997; Foltz et al., 1998). In contrast, se-
quence models construct sentence representations
as an order-sensitive function of the sequence of
tokens (Elman, 1990; Mikolov, 2012). Lastly,
tree-structured models compose each phrase and
sentence representation from its constituent sub-
phrases according to a given syntactic structure
over the sentence (Goller and Kuchler, 1996;
Socher et al., 2011).
</bodyText>
<figureCaption confidence="0.975534666666667">
Figure 1: Top: A chain-structured LSTM net-
work. Bottom: A tree-structured LSTM network
with arbitrary branching factor.
</figureCaption>
<bodyText confidence="0.999610095238095">
Order-insensitive models are insufficient to
fully capture the semantics of natural language
due to their inability to account for differences in
meaning as a result of differences in word order
or syntactic structure (e.g., “cats climb trees” vs.
“trees climb cats”). We therefore turn to order-
sensitive sequential or tree-structured models. In
particular, tree-structured models are a linguisti-
cally attractive option due to their relation to syn-
tactic interpretations of sentence structure. A nat-
ural question, then, is the following: to what ex-
tent (if at all) can we do better with tree-structured
models as opposed to sequential models for sen-
tence representation? In this paper, we work to-
wards addressing this question by directly com-
paring a type of sequential model that has recently
been used to achieve state-of-the-art results in sev-
eral NLP tasks against its tree-structured general-
ization.
Due to their capability for processing arbitrary-
length sequences, recurrent neural networks
</bodyText>
<equation confidence="0.986793375">
y1 y2 y3 y4
x1 x2 x3 x4
y1
y4 y6
x4 x5 x6
x2
y2 y3
x1
</equation>
<page confidence="0.939733">
1556
</page>
<note confidence="0.974894666666667">
Proceedings of the 53rd Annual Meeting of the Association for Computational Linguistics
and the 7th International Joint Conference on Natural Language Processing, pages 1556–1566,
Beijing, China, July 26-31, 2015. c�2015 Association for Computational Linguistics
</note>
<bodyText confidence="0.999907289473684">
(RNNs) are a natural choice for sequence model-
ing tasks. Recently, RNNs with Long Short-Term
Memory (LSTM) units (Hochreiter and Schmid-
huber, 1997) have re-emerged as a popular archi-
tecture due to their representational power and ef-
fectiveness at capturing long-term dependencies.
LSTM networks, which we review in Sec. 2, have
been successfully applied to a variety of sequence
modeling and prediction tasks, notably machine
translation (Bahdanau et al., 2015; Sutskever et al.,
2014), speech recognition (Graves et al., 2013),
image caption generation (Vinyals et al., 2014),
and program execution (Zaremba and Sutskever,
2014).
In this paper, we introduce a generalization of
the standard LSTM architecture to tree-structured
network topologies and show its superiority for
representing sentence meaning over a sequential
LSTM. While the standard LSTM composes its
hidden state from the input at the current time
step and the hidden state of the LSTM unit in the
previous time step, the tree-structured LSTM, or
Tree-LSTM, composes its state from an input vec-
tor and the hidden states of arbitrarily many child
units. The standard LSTM can then be considered
a special case of the Tree-LSTM where each inter-
nal node has exactly one child.
In our evaluations, we demonstrate the empiri-
cal strength of Tree-LSTMs as models for repre-
senting sentences. We evaluate the Tree-LSTM
architecture on two tasks: semantic relatedness
prediction on sentence pairs and sentiment clas-
sification of sentences drawn from movie reviews.
Our experiments show that Tree-LSTMs outper-
form existing systems and sequential LSTM base-
lines on both tasks. Implementations of our mod-
els and experiments are available at https://
github.com/stanfordnlp/treelstm.
</bodyText>
<sectionHeader confidence="0.950802" genericHeader="introduction">
2 Long Short-Term Memory Networks
</sectionHeader>
<subsectionHeader confidence="0.687453">
2.1 Overview
</subsectionHeader>
<bodyText confidence="0.999544">
Recurrent neural networks (RNNs) are able to pro-
cess input sequences of arbitrary length via the re-
cursive application of a transition function on a
hidden state vector ht. At each time step t, the
hidden state ht is a function of the input vector xt
that the network receives at time t and its previous
hidden state ht−1. For example, the input vector xt
could be a vector representation of the t-th word in
body of text (Elman, 1990; Mikolov, 2012). The
hidden state ht E Rd can be interpreted as a d-
dimensional distributed representation of the se-
quence of tokens observed up to time t.
Commonly, the RNN transition function is an
affine transformation followed by a pointwise non-
linearity such as the hyperbolic tangent function:
</bodyText>
<equation confidence="0.662521">
ht = tanh (Wxt + Uht−1 + b) .
</equation>
<bodyText confidence="0.999671130434782">
Unfortunately, a problem with RNNs with transi-
tion functions of this form is that during training,
components of the gradient vector can grow or de-
cay exponentially over long sequences (Hochre-
iter, 1998; Bengio et al., 1994). This problem with
exploding or vanishing gradients makes it difficult
for the RNN model to learn long-distance correla-
tions in a sequence.
The LSTM architecture (Hochreiter and
Schmidhuber, 1997) addresses this problem of
learning long-term dependencies by introducing a
memory cell that is able to preserve state over long
periods of time. While numerous LSTM variants
have been described, here we describe the version
used by Zaremba and Sutskever (2014).
We define the LSTM unit at each time step t to
be a collection of vectors in Rd: an input gate it, a
forget gate ft, an output gate ot, a memory cell ct
and a hidden state ht. The entries of the gating
vectors it, ft and ot are in [0, 1]. We refer to d as
the memory dimension of the LSTM.
The LSTM transition equations are the follow-
ing:
</bodyText>
<equation confidence="0.999325666666667">
(W(i)xt + U(i)ht−1 + b(i))
it = Q , (1)
( W (f)xt + U(f)ht−1 + b(f))
ft = Q ,
( W (o)xt + U(o)ht−1 + b(o))
ot = Q ,
(ut = tanh W(u)xt + U(u)
ct=it Out+ft O ct−1,
ht = ot O tanh(ct),
</equation>
<bodyText confidence="0.999924181818182">
where xt is the input at the current time step, Q de-
notes the logistic sigmoid function and O denotes
elementwise multiplication. Intuitively, the for-
get gate controls the extent to which the previous
memory cell is forgotten, the input gate controls
how much each unit is updated, and the output gate
controls the exposure of the internal memory state.
The hidden state vector in an LSTM unit is there-
fore a gated, partial view of the state of the unit’s
internal memory cell. Since the value of the gating
variables vary for each vector element, the model
</bodyText>
<equation confidence="0.97999">
ht−1 + b(u)) ,
</equation>
<page confidence="0.957629">
1557
</page>
<bodyText confidence="0.981529">
can learn to represent information over multiple
time scales.
</bodyText>
<subsectionHeader confidence="0.994723">
2.2 Variants
</subsectionHeader>
<bodyText confidence="0.99902">
Two commonly-used variants of the basic LSTM
architecture are the Bidirectional LSTM and the
Multilayer LSTM (also known as the stacked or
deep LSTM).
Bidirectional LSTM. A Bidirectional LSTM
(Graves et al., 2013) consists of two LSTMs that
are run in parallel: one on the input sequence and
the other on the reverse of the input sequence. At
each time step, the hidden state of the Bidirec-
tional LSTM is the concatenation of the forward
and backward hidden states. This setup allows the
hidden state to capture both past and future infor-
mation.
Multilayer LSTM. In Multilayer LSTM archi-
tectures, the hidden state of an LSTM unit in layer
` is used as input to the LSTM unit in layer `+1 in
the same time step (Graves et al., 2013; Sutskever
et al., 2014; Zaremba and Sutskever, 2014). Here,
the idea is to let the higher layers capture longer-
term dependencies of the input sequence.
These two variants can be combined as a Multi-
layer Bidirectional LSTM (Graves et al., 2013).
</bodyText>
<sectionHeader confidence="0.998492" genericHeader="method">
3 Tree-Structured LSTMs
</sectionHeader>
<bodyText confidence="0.97182965">
A limitation of the LSTM architectures described
in the previous section is that they only allow for
strictly sequential information propagation. Here,
we propose two natural extensions to the basic
LSTM architecture: the Child-Sum Tree-LSTM
and the N-ary Tree-LSTM. Both variants allow for
richer network topologies where each LSTM unit
is able to incorporate information from multiple
child units.
As in standard LSTM units, each Tree-LSTM
unit (indexed by j) contains input and output
gates ij and oj, a memory cell cj and hidden
state hj. The difference between the standard
LSTM unit and Tree-LSTM units is that gating
vectors and memory cell updates are dependent
on the states of possibly many child units. Ad-
ditionally, instead of a single forget gate, the Tree-
LSTM unit contains one forget gate fjk for each
child k. This allows the Tree-LSTM unit to se-
lectively incorporate information from each child.
For example, a Tree-LSTM model can learn to em-
phasize semantic heads in a semantic relatedness
Figure 2: Composing the memory cell c1 and hid-
den state h1 of a Tree-LSTM unit with two chil-
dren (subscripts 2 and 3). Labeled edges cor-
respond to gating by the indicated gating vector,
with dependencies omitted for compactness.
task, or it can learn to preserve the representation
of sentiment-rich children for sentiment classifica-
tion.
As with the standard LSTM, each Tree-LSTM
unit takes an input vector xj. In our applications,
each xj is a vector representation of a word in a
sentence. The input word at each node depends
on the tree structure used for the network. For in-
stance, in a Tree-LSTM over a dependency tree,
each node in the tree takes the vector correspond-
ing to the head word as input, whereas in a Tree-
LSTM over a constituency tree, the leaf nodes take
the corresponding word vectors as input.
</bodyText>
<subsectionHeader confidence="0.999637">
3.1 Child-Sum Tree-LSTMs
</subsectionHeader>
<bodyText confidence="0.999921333333333">
Given a tree, let C(j) denote the set of children
of node j. The Child-Sum Tree-LSTM transition
equations are the following:
</bodyText>
<equation confidence="0.999671">
˜hj = E hk, (2)
k∈C(j)
(W(i)xj + U(i)˜hj + b(i))
ij = σ , (3)
(W(f)xj + U(f)hk + b(f))
fjk = σ , (4)
(W(o)xj + U(o)˜hj + b(o))
oj = σ , (5)
(W(u)xj + U(u)˜hj + b(u))
uj = tanh , (6)
cj = ij O uj + E fjk O ck, (7)
k∈C(j)
hj = oj O tanh(cj), (8)
</equation>
<bodyText confidence="0.99974275">
where in Eq. 4, k E C(j).
Intuitively, we can interpret each parameter ma-
trix in these equations as encoding correlations be-
tween the component vectors of the Tree-LSTM
</bodyText>
<equation confidence="0.9311884">
h2
c2
f2
x1
u1
i1 c1 o1
h1
f3
h3
c3
</equation>
<page confidence="0.939133">
1558
</page>
<bodyText confidence="0.999874222222222">
unit, the input xj, and the hidden states hk of the
unit’s children. For example, in a dependency tree
application, the model can learn parameters W(i)
such that the components of the input gate ij have
values close to 1 (i.e., “open”) when a semanti-
cally important content word (such as a verb) is
given as input, and values close to 0 (i.e., “closed”)
when the input is a relatively unimportant word
(such as a determiner).
Dependency Tree-LSTMs. Since the Child-
Sum Tree-LSTM unit conditions its components
on the sum of child hidden states hk, it is well-
suited for trees with high branching factor or
whose children are unordered. For example, it is a
good choice for dependency trees, where the num-
ber of dependents of a head can be highly variable.
We refer to a Child-Sum Tree-LSTM applied to a
dependency tree as a Dependency Tree-LSTM.
</bodyText>
<subsectionHeader confidence="0.999406">
3.2 N-ary Tree-LSTMs
</subsectionHeader>
<bodyText confidence="0.999959">
The N-ary Tree-LSTM can be used on tree struc-
tures where the branching factor is at most N and
where children are ordered, i.e., they can be in-
dexed from 1 to N. For any node j, write the hid-
den state and memory cell of its kth child as hjk
and cjk respectively. The N-ary Tree-LSTM tran-
sition equations are the following:
</bodyText>
<equation confidence="0.998702">
U(i)`hj` + b(i)! , (9)
!
U(f)
k` hj` + b(f) ,
(10)
U(`o)hj` + b(o)!
, (11)
U(u)`hj` + b(u)! ,
(12)
cj = ij O uj + XN fj` O cj`, (13)
`=1
hj = oj O tanh(cj), (14)
</equation>
<bodyText confidence="0.999640085106383">
where in Eq. 10, k = 1, 2, ... , N. Note that
when the tree is simply a chain, both Eqs. 2–8
and Eqs. 9–14 reduce to the standard LSTM tran-
sitions, Eqs. 1.
The introduction of separate parameter matri-
ces for each child k allows the N-ary Tree-LSTM
model to learn more fine-grained conditioning on
the states of a unit’s children than the Child-
Sum Tree-LSTM. Consider, for example, a con-
stituency tree application where the left child of a
node corresponds to a noun phrase, and the right
child to a verb phrase. Suppose that in this case
it is advantageous to emphasize the verb phrase
in the representation. Then the U(f)
k` parameters
can be trained such that the components of fj1 are
close to 0 (i.e., “forget”), while the components of
fj2 are close to 1 (i.e., “preserve”).
Forget gate parameterization. In Eq. 10, we
define a parameterization of the kth child’s for-
get gate fjk that contains “off-diagonal” param-
eter matrices U(f)
k` , k =� `. This parameteriza-
tion allows for more flexible control of informa-
tion propagation from child to parent. For exam-
ple, this allows the left hidden state in a binary tree
to have either an excitatory or inhibitory effect on
the forget gate of the right child. However, for
large values of N, these additional parameters are
impractical and may be tied or fixed to zero.
Constituency Tree-LSTMs. We can naturally
apply Binary Tree-LSTM units to binarized con-
stituency trees since left and right child nodes are
distinguished. We refer to this application of Bi-
nary Tree-LSTMs as a Constituency Tree-LSTM.
Note that in Constituency Tree-LSTMs, a node j
receives an input vector xj only if it is a leaf node.
In the remainder of this paper, we focus on
the special cases of Dependency Tree-LSTMs and
Constituency Tree-LSTMs. These architectures
are in fact closely related; since we consider only
binarized constituency trees, the parameterizations
of the two models are very similar. The key dif-
ference is in the application of the compositional
parameters: dependent vs. head for Dependency
Tree-LSTMs, and left child vs. right child for Con-
stituency Tree-LSTMs.
</bodyText>
<sectionHeader confidence="0.996015" genericHeader="method">
4 Models
</sectionHeader>
<bodyText confidence="0.999961666666667">
We now describe two specific models that apply
the Tree-LSTM architectures described in the pre-
vious section.
</bodyText>
<subsectionHeader confidence="0.883811">
4.1 Tree-LSTM Classification
</subsectionHeader>
<bodyText confidence="0.999867333333333">
In this setting, we wish to predict labels yˆ from a
discrete set of classes Y for some subset of nodes
in a tree. For example, the label for a node in a
</bodyText>
<equation confidence="0.9938686">
ij = σ W(i)xj + XN
`=1
fjk = σ W(f)xj + XN
`=1
oj = σ W(o)xj + XN
`=1
W(u)xj +
uj = tanh
XN
`=1
</equation>
<page confidence="0.956549">
1559
</page>
<bodyText confidence="0.999570833333333">
parse tree could correspond to some property of
the phrase spanned by that node.
At each node j, we use a softmax classifier to
predict the label ˆyj given the inputs {x}j observed
at nodes in the subtree rooted at j. The classifier
takes the hidden state hj at the node as input:
</bodyText>
<equation confidence="0.9873315">
� W (s)hj + b(s)�
ˆpθ(y  |{x}j) = softmax ,
ˆyj = arg max
y ˆpθ (y  |{x}j) .
</equation>
<bodyText confidence="0.9988885">
The cost function is the negative log-likelihood
of the true class labels y(k) at each labeled node:
</bodyText>
<equation confidence="0.69605">
� + λ
log ˆpθ y(k) ��� {x}(k)� 2 kθk22,
</equation>
<bodyText confidence="0.99927125">
where m is the number of labeled nodes in the
training set, the superscript k indicates the kth la-
beled node, and λ is an L2 regularization hyperpa-
rameter.
</bodyText>
<subsectionHeader confidence="0.95296">
4.2 Semantic Relatedness of Sentence Pairs
</subsectionHeader>
<bodyText confidence="0.999608666666667">
Given a sentence pair, we wish to predict a
real-valued similarity score in some range [1, K],
where K &gt; 1 is an integer. The sequence
{1, 2, ... , K} is some ordinal scale of similarity,
where higher scores indicate greater degrees of
similarity, and we allow real-valued scores to ac-
count for ground-truth ratings that are an average
over the evaluations of several human annotators.
We first produce sentence representations hL
and hR for each sentence in the pair using a
Tree-LSTM model over each sentence’s parse tree.
Given these sentence representations, we predict
the similarity score yˆ using a neural network that
considers both the distance and angle between the
pair (hL, hR):
</bodyText>
<equation confidence="0.973664142857143">
hx = hL O hR, (15)
h+ = |hL − hR|,
� W (x)hx + W (+)h+ + b(h)�
hs = σ ,
� W (p)hs + b(p)�
ˆpθ = softmax ,
yˆ= rT ˆpθ,
</equation>
<bodyText confidence="0.999947615384615">
where rT = [1 2 ... K] and the absolute value
function is applied elementwise. The use of both
distance measures hx and h+ is empirically mo-
tivated: we find that the combination outperforms
the use of either measure alone. The multiplicative
measure hx can be interpreted as an elementwise
comparison of the signs of the input representa-
tions.
We want the expected rating under the predicted
distribution ˆpθ given model parameters θ to be
close to the gold rating y ∈ [1, K]: yˆ = rT ˆpθ ≈ y.
We therefore define a sparse target distribution1 p
that satisfies y = rT p:
</bodyText>
<equation confidence="0.680138333333333">
y − byc, i = byc + 1
byc − y + 1, i = byc
0 otherwise
</equation>
<bodyText confidence="0.9066275">
for 1 ≤ i ≤ K. The cost function is the regular-
ized KL-divergence between p and ˆpθ:
</bodyText>
<equation confidence="0.998552">
KL(p(k) ˆp0 + k)) 2 k8k2,
</equation>
<bodyText confidence="0.9995645">
where m is the number of training pairs and the
superscript k indicates the kth sentence pair.
</bodyText>
<sectionHeader confidence="0.999742" genericHeader="method">
5 Experiments
</sectionHeader>
<bodyText confidence="0.999972222222222">
We evaluate our Tree-LSTM architectures on two
tasks: (1) sentiment classification of sentences
sampled from movie reviews and (2) predicting
the semantic relatedness of sentence pairs.
In comparing our Tree-LSTMs against sequen-
tial LSTMs, we control for the number of LSTM
parameters by varying the dimensionality of the
hidden states2. Details for each model variant are
summarized in Table 1.
</bodyText>
<subsectionHeader confidence="0.986618">
5.1 Sentiment Classification
</subsectionHeader>
<bodyText confidence="0.999983818181818">
In this task, we predict the sentiment of sen-
tences sampled from movie reviews. We use
the Stanford Sentiment Treebank (Socher et al.,
2013). There are two subtasks: binary classifica-
tion of sentences, and fine-grained classification
over five classes: very negative, negative, neu-
tral, positive, and very positive. We use the stan-
dard train/dev/test splits of 6920/872/1821 for the
binary classification subtask and 8544/1101/2210
for the fine-grained classification subtask (there
are fewer examples for the binary subtask since
</bodyText>
<footnote confidence="0.683616111111111">
1In the subsequent experiments, we found that optimizing
this objective yielded better performance than a mean squared
error objective.
2For our Bidirectional LSTMs, the parameters of the for-
ward and backward transition functions are shared. In our
experiments, this achieved superior performance to Bidirec-
tional LSTMs with untied weights and the same number of
parameters (and therefore smaller hidden vector dimension-
ality).
</footnote>
<equation confidence="0.936605">
1
J(θ) = − m
Xm
k=1
⎧
⎨⎪
⎪⎩
pi =
1
J(θ) = m
Xm
k=1
</equation>
<page confidence="0.886651">
1560
</page>
<table confidence="0.99988575">
LSTM Variant Relatedness Sentiment
d |0 |d |0|
Standard 150 203,400 168 315,840
Bidirectional 150 203,400 168 315,840
2-layer 108 203,472 120 318,720
Bidirectional 2-layer 108 203,472 120 318,720
Constituency Tree 142 205,190 150 316,800
Dependency Tree 150 203,400 168 315,840
</table>
<tableCaption confidence="0.999461">
Table 1: Memory dimensions d and composition
</tableCaption>
<bodyText confidence="0.96189225">
function parameter counts |0 |for each LSTM vari-
ant that we evaluate.
neutral sentences are excluded). Standard bina-
rized constituency parse trees are provided for
each sentence in the dataset, and each node in
these trees is annotated with a sentiment label.
For the sequential LSTM baselines, we predict
the sentiment of a phrase using the representation
given by the final LSTM hidden state. The sequen-
tial LSTM models are trained on the spans corre-
sponding to labeled nodes in the training set.
We use the classification model described in
Sec. 4.1 with both Dependency Tree-LSTMs
(Sec. 3.1) and Constituency Tree-LSTMs
(Sec. 3.2). The Constituency Tree-LSTMs are
structured according to the provided parse trees.
For the Dependency Tree-LSTMs, we produce
dependency parses3 of each sentence; each node
in a tree is given a sentiment label if its span
matches a labeled span in the training set.
</bodyText>
<subsectionHeader confidence="0.996205">
5.2 Semantic Relatedness
</subsectionHeader>
<bodyText confidence="0.999924588235294">
For a given pair of sentences, the semantic relat-
edness task is to predict a human-generated rating
of the similarity of the two sentences in meaning.
We use the Sentences Involving Composi-
tional Knowledge (SICK) dataset (Marelli et al.,
2014), consisting of 9927 sentence pairs in a
4500/500/4927 train/dev/test split. The sentences
are derived from existing image and video descrip-
tion datasets. Each sentence pair is annotated with
a relatedness score y E [1, 5], with 1 indicating
that the two sentences are completely unrelated,
and 5 indicating that the two sentences are very
related. Each label is the average of 10 ratings as-
signed by different human annotators.
Here, we use the similarity model described in
Sec. 4.2. For the similarity prediction network
(Eqs. 15) we use a hidden layer of size 50. We
</bodyText>
<footnote confidence="0.9875195">
3Dependency parses produced by the Stanford Neural
Network Dependency Parser (Chen and Manning, 2014).
</footnote>
<table confidence="0.812069944444444">
Method Fine-grained Binary
RAE (Socher et al., 2013) 43.2 82.4
MV-RNN (Socher et al., 2013) 44.4 82.9
RNTN (Socher et al., 2013) 45.7 85.4
DCNN (Blunsom et al., 2014) 48.5 86.8
Paragraph-Vec (Le and Mikolov, 2014) 48.7 87.8
CNN-non-static (Kim, 2014) 48.0 87.2
CNN-multichannel (Kim, 2014) 47.4 88.1
DRNN (Irsoy and Cardie, 2014) 49.8 86.6
LSTM 46.4 (1.1) 84.9 (0.6)
Bidirectional LSTM 49.1 (1.0) 87.5 (0.5)
2-layer LSTM 46.0 (1.3) 86.3 (0.6)
2-layer Bidirectional LSTM 48.5 (1.0) 87.2 (1.0)
Dependency Tree-LSTM 48.4 (0.4) 85.7 (0.4)
Constituency Tree-LSTM 43.9 (0.6) 82.0 (0.5)
– randomly initialized vectors
– Glove vectors, fixed 49.7 (0.4) 87.5 (0.8)
– Glove vectors, tuned 51.0 (0.5) 88.0 (0.3)
</table>
<tableCaption confidence="0.996853">
Table 2: Test set accuracies on the Stanford Sen-
</tableCaption>
<bodyText confidence="0.993623777777778">
timent Treebank. For our experiments, we report
mean accuracies over 5 runs (standard deviations
in parentheses). Fine-grained: 5-class sentiment
classification. Binary: positive/negative senti-
ment classification.
produce binarized constituency parses4 and depen-
dency parses of the sentences in the dataset for our
Constituency Tree-LSTM and Dependency Tree-
LSTM models.
</bodyText>
<subsectionHeader confidence="0.991465">
5.3 Hyperparameters and Training Details
</subsectionHeader>
<bodyText confidence="0.9999406">
The hyperparameters for our models were tuned
on the development set for each task.
We initialized our word representations using
publicly available 300-dimensional Glove vec-
tors5 (Pennington et al., 2014). For the sentiment
classification task, word representations were up-
dated during training with a learning rate of 0.1.
For the semantic relatedness task, word represen-
tations were held fixed as we did not observe any
significant improvement when the representations
were tuned.
Our models were trained using AdaGrad (Duchi
et al., 2011) with a learning rate of 0.05 and a
minibatch size of 25. The model parameters were
regularized with a per-minibatch L2 regularization
strength of 10−4. The sentiment classifier was
additionally regularized using dropout (Srivastava
et al., 2014) with a dropout rate of 0.5. We did not
observe performance gains using dropout on the
semantic relatedness task.
</bodyText>
<footnote confidence="0.99900475">
4Constituency parses produced by the Stanford PCFG
Parser (Klein and Manning, 2003).
5Trained on 840 billion tokens of Common Crawl data,
http://nlp.stanford.edu/projects/glove/.
</footnote>
<page confidence="0.956097">
1561
</page>
<table confidence="0.943365285714286">
Method Pearson’s r Spearman’s p MSE
Illinois-LH (Lai and Hockenmaier, 2014) 0.7993 0.7538 0.3692
UNAL-NLP (Jimenez et al., 2014) 0.8070 0.7489 0.3550
Meaning Factory (Bjerva et al., 2014) 0.8268 0.7721 0.3224
ECNU (Zhao et al., 2014) 0.8414 – –
Mean vectors 0.7577 (0.0013) 0.6738 (0.0027) 0.4557 (0.0090)
DT-RNN (Socher et al., 2014) 0.7923 (0.0070) 0.7319 (0.0071) 0.3822 (0.0137)
SDT-RNN (Socher et al., 2014) 0.7900 (0.0042) 0.7304 (0.0076) 0.3848 (0.0074)
LSTM 0.8528 (0.0031) 0.7911 (0.0059) 0.2831 (0.0092)
Bidirectional LSTM 0.8567 (0.0028) 0.7966 (0.0053) 0.2736 (0.0063)
2-layer LSTM 0.8515 (0.0066) 0.7896 (0.0088) 0.2838 (0.0150)
2-layer Bidirectional LSTM 0.8558 (0.0014) 0.7965 (0.0018) 0.2762 (0.0020)
Constituency Tree-LSTM 0.8582 (0.0038) 0.7966 (0.0053) 0.2734 (0.0108)
Dependency Tree-LSTM 0.8676 (0.0030) 0.8083 (0.0042) 0.2532 (0.0052)
</table>
<tableCaption confidence="0.975274">
Table 3: Test set results on the SICK semantic relatedness subtask. For our experiments, we report mean
scores over 5 runs (standard deviations in parentheses). Results are grouped as follows: (1) SemEval
2014 submissions; (2) Our own baselines; (3) Sequential LSTMs; (4) Tree-structured LSTMs.
</tableCaption>
<sectionHeader confidence="0.999942" genericHeader="evaluation">
6 Results
</sectionHeader>
<subsectionHeader confidence="0.999408">
6.1 Sentiment Classification
</subsectionHeader>
<bodyText confidence="0.99997176">
Our results are summarized in Table 2. The Con-
stituency Tree-LSTM outperforms existing sys-
tems on the fine-grained classification subtask and
achieves accuracy comparable to the state-of-the-
art on the binary subtask. In particular, we find that
it outperforms the Dependency Tree-LSTM. This
performance gap is at least partially attributable to
the fact that the Dependency Tree-LSTM is trained
on less data: about 150K labeled nodes vs. 319K
for the Constituency Tree-LSTM. This difference
is due to (1) the dependency representations con-
taining fewer nodes than the corresponding con-
stituency representations, and (2) the inability to
match about 9% of the dependency nodes to a cor-
responding span in the training data.
We found that updating the word representa-
tions during training (“fine-tuning” the word em-
bedding) yields a significant boost in performance
on the fine-grained classification subtask and gives
a minor gain on the binary classification subtask
(this finding is consistent with previous work on
this task by Kim (2014)). These gains are to be
expected since the Glove vectors used to initial-
ize our word representations were not originally
trained to capture sentiment.
</bodyText>
<subsectionHeader confidence="0.998376">
6.2 Semantic Relatedness
</subsectionHeader>
<bodyText confidence="0.998973064516129">
Our results are summarized in Table 3. Following
Marelli et al. (2014), we use Pearson’s r, Spear-
man’s p and mean squared error (MSE) as evalua-
tion metrics. The first two metrics are measures of
correlation against human evaluations of semantic
relatedness.
We compare our models against a number of
non-LSTM baselines. The mean vector baseline
computes sentence representations as a mean of
the representations of the constituent words. The
DT-RNN and SDT-RNN models (Socher et al.,
2014) both compose vector representations for the
nodes in a dependency tree as a sum over affine-
transformed child vectors, followed by a nonlin-
earity. The SDT-RNN is an extension of the DT-
RNN that uses a separate transformation for each
dependency relation. For each of our baselines,
including the LSTM models, we use the similarity
model described in Sec. 4.2.
We also compare against four of the top-
performing systems6 submitted to the SemEval
2014 semantic relatedness shared task: ECNU
(Zhao et al., 2014), The Meaning Factory (Bjerva
et al., 2014), UNAL-NLP (Jimenez et al., 2014),
and Illinois-LH (Lai and Hockenmaier, 2014).
These systems are heavily feature engineered,
generally using a combination of surface form
overlap features and lexical distance features de-
rived from WordNet or the Paraphrase Database
(Ganitkevitch et al., 2013).
Our LSTM models outperform all these sys-
</bodyText>
<footnote confidence="0.9961442">
6We list the strongest results we were able to find for this
task; in some cases, these results are stronger than the official
performance by the team on the shared task. For example,
the listed result by Zhao et al. (2014) is stronger than their
submitted system’s Pearson correlation score of 0.8280.
</footnote>
<page confidence="0.992265">
1562
</page>
<figure confidence="0.99330575">
accuracy
T
0 5 10 15 20 25 30 35 40 45
sentence length
</figure>
<figureCaption confidence="0.9017265">
Figure 3: Fine-grained sentiment classification ac-
curacy vs. sentence length. For each E, we plot
</figureCaption>
<bodyText confidence="0.727936">
accuracy for the test set sentences with length in
the window [E − 2, E + 2]. Examples in the tail
of the length distribution are batched in the final
window (E = 45).
</bodyText>
<figure confidence="0.637728">
4 6 8 10 12 14 16 18 20
mean sentence length
</figure>
<figureCaption confidence="0.920346">
Figure 4: Pearson correlations r between pre-
</figureCaption>
<bodyText confidence="0.9637684">
dicted similarities and gold ratings vs. sentence
length. For each E, we plot r for the pairs with
mean length in the window [E−2, E+2]. Examples
in the tail of the length distribution are batched in
the final window (E = 18.5).
</bodyText>
<figure confidence="0.9990455">
0.70
0.65
0.60
0.55
0.50
0.45
0.40
0.35
0.30
DT-L3TM
CT-L3TM
L3TM
Bi-L3TM
0.90
0.88
0.86
0.84
0.82
0.80
0.78
DT-L3TM
CT-L3TM
L3TM
Bi-L3TM
</figure>
<bodyText confidence="0.996553615384616">
tems without any additional feature engineering,
with the best results achieved by the Dependency
Tree-LSTM. Recall that in this task, both Tree-
LSTM models only receive supervision at the root
of the tree, in contrast to the sentiment classifi-
cation task where supervision was also provided
at the intermediate nodes. We conjecture that in
this setting, the Dependency Tree-LSTM benefits
from its more compact structure relative to the
Constituency Tree-LSTM, in the sense that paths
from input word vectors to the root of the tree
are shorter on aggregate for the Dependency Tree-
LSTM.
</bodyText>
<sectionHeader confidence="0.981516" genericHeader="discussions">
7 Discussion and Qualitative Analysis
</sectionHeader>
<subsectionHeader confidence="0.999496">
7.1 Modeling Semantic Relatedness
</subsectionHeader>
<bodyText confidence="0.999978772727273">
In Table 4, we list nearest-neighbor sentences re-
trieved from a 1000-sentence sample of the SICK
test set. We compare the neighbors ranked by the
Dependency Tree-LSTM model against a baseline
ranking by cosine similarity of the mean word vec-
tors for each sentence.
The Dependency Tree-LSTM model exhibits
several desirable properties. Note that in the de-
pendency parse of the second query sentence, the
word “ocean” is the second-furthest word from the
root (“waving”), with a depth of 4. Regardless, the
retrieved sentences are all semantically related to
the word “ocean”, which indicates that the Tree-
LSTM is able to both preserve and emphasize in-
formation from relatively distant nodes. Addi-
tionally, the Tree-LSTM model shows greater ro-
bustness to differences in sentence length. Given
the query “two men are playing guitar”, the Tree-
LSTM associates the phrase “playing guitar” with
the longer, related phrase “dancing and singing in
front of a crowd” (note as well that there is zero
token overlap between the two phrases).
</bodyText>
<subsectionHeader confidence="0.999713">
7.2 Effect of Sentence Length
</subsectionHeader>
<bodyText confidence="0.9999507">
One hypothesis to explain the empirical strength
of Tree-LSTMs is that tree structures help miti-
gate the problem of preserving state over long se-
quences of words. If this were true, we would ex-
pect to see the greatest improvement over sequen-
tial LSTMs on longer sentences. In Figs. 3 and 4,
we show the relationship between sentence length
and performance as measured by the relevant task-
specific metric. Each data point is a mean score
over 5 runs, and error bars have been omitted for
clarity.
We observe that while the Dependency Tree-
LSTM does significantly outperform its sequen-
tial counterparts on the relatedness task for
longer sentences of length 13 to 15 (Fig. 4), it
also achieves consistently strong performance on
shorter sentences. This suggests that unlike se-
quential LSTMs, Tree-LSTMs are able to encode
semantically-useful structural information in the
sentence representations that they compose.
</bodyText>
<sectionHeader confidence="0.999299" genericHeader="related work">
8 Related Work
</sectionHeader>
<bodyText confidence="0.504832">
Distributed representations of words (Rumelhart
et al., 1988; Collobert et al., 2011; Turian et al.,
2010; Huang et al., 2012; Mikolov et al., 2013;
</bodyText>
<page confidence="0.922808">
1563
</page>
<figure confidence="0.88988304">
Ranking by mean word vector cosine similarity Score
a woman is slicing potatoes
a woman is cutting potatoes 0.96
a woman is slicing herbs 0.92
a woman is slicing tofu 0.92
a boy is waving at some young runners from the ocean
a man and a boy are standing at the bottom of some stairs , 0.92
which are outdoors
a group of children in uniforms is standing at a gate and 0.90
one is kissing the mother
a group of children in uniforms is standing at a gate and 0.90
there is no one kissing the mother
two men are playing guitar
some men are playing rugby 0.88
two men are talking 0.87
two dogs are playing with each other 0.87
Ranking by Dependency Tree-LSTM model Score
a woman is slicing potatoes
a woman is cutting potatoes 4.82
potatoes are being sliced by a woman 4.70
tofu is being sliced by a woman 4.39
a boy is waving at some young runners from the ocean
a group of men is playing with a ball on the beach 3.79
a young boy wearing a red swimsuit is jumping out of a 3.37
blue kiddies pool
</figure>
<figureCaption confidence="0.286771">
the man is tossing a kid into the swimming pool that is 3.19
near the ocean
</figureCaption>
<bodyText confidence="0.928399424242424">
two men are playing guitar
the man is singing and playing the guitar 4.08
the man is opening the guitar for donations and plays 4.01
with the case
two men are dancing and singing in front of a crowd 4.00
Table 4: Most similar sentences from a 1000-sentence sample drawn from the SICK test set. The Tree-
LSTM model is able to pick up on more subtle relationships, such as that between “beach” and “ocean”
in the second example.
Pennington et al., 2014) have found wide appli-
cability in a variety of NLP tasks. Following
this success, there has been substantial interest in
the area of learning distributed phrase and sen-
tence representations (Mitchell and Lapata, 2010;
Yessenalina and Cardie, 2011; Grefenstette et al.,
2013; Mikolov et al., 2013), as well as distributed
representations of longer bodies of text such as
paragraphs and documents (Srivastava et al., 2013;
Le and Mikolov, 2014).
Our approach builds on recursive neural net-
works (Goller and Kuchler, 1996; Socher et al.,
2011), which we abbreviate as Tree-RNNs in or-
der to avoid confusion with recurrent neural net-
works. Under the Tree-RNN framework, the vec-
tor representation associated with each node of
a tree is composed as a function of the vectors
corresponding to the children of the node. The
choice of composition function gives rise to nu-
merous variants of this basic framework. Tree-
RNNs have been used to parse images of natu-
ral scenes (Socher et al., 2011), compose phrase
representations from word vectors (Socher et al.,
2012), and classify the sentiment polarity of sen-
tences (Socher et al., 2013).
</bodyText>
<sectionHeader confidence="0.997933" genericHeader="conclusions">
9 Conclusion
</sectionHeader>
<bodyText confidence="0.999966461538462">
In this paper, we introduced a generalization of
LSTMs to tree-structured network topologies. The
Tree-LSTM architecture can be applied to trees
with arbitrary branching factor. We demonstrated
the effectiveness of the Tree-LSTM by applying
the architecture in two tasks: semantic relatedness
and sentiment classification, outperforming exist-
ing systems on both. Controlling for model di-
mensionality, we demonstrated that Tree-LSTM
models are able to outperform their sequential
counterparts. Our results suggest further lines of
work in characterizing the role of structure in pro-
ducing distributed representations of sentences.
</bodyText>
<sectionHeader confidence="0.996922" genericHeader="acknowledgments">
Acknowledgements
</sectionHeader>
<bodyText confidence="0.99862875">
We thank our anonymous reviewers for their valu-
able feedback. Stanford University gratefully ac-
knowledges the support of a Natural Language
Understanding-focused gift from Google Inc. and
the Defense Advanced Research Projects Agency
(DARPA) Deep Exploration and Filtering of Text
(DEFT) Program under Air Force Research Lab-
oratory (AFRL) contract no. FA8750-13-2-0040.
Any opinions, findings, and conclusion or recom-
mendations expressed in this material are those of
the authors and do not necessarily reflect the view
of the DARPA, AFRL, or the US government.
</bodyText>
<sectionHeader confidence="0.972568" genericHeader="references">
References
</sectionHeader>
<bodyText confidence="0.905131333333334">
Bahdanau, Dzmitry, Kyunghyun Cho, and Yoshua
Bengio. 2015. Neural machine translation by
jointly learning to align and translate. In Pro-
ceedings of the 3rd International Conference on
Learning Representations (ICLR 2015).
Bengio, Yoshua, Patrice Simard, and Paolo Fras-
coni. 1994. Learning long-term dependencies
with gradient descent is difficult. IEEE Trans-
actions on Neural Networks 5(2).
</bodyText>
<page confidence="0.989134">
1564
</page>
<reference confidence="0.98260091011236">
Bjerva, Johannes, Johan Bos, Rob van der Goot,
and Malvina Nissim. 2014. The Meaning Fac-
tory: Formal semantics for recognizing textual
entailment and determining semantic similarity.
In Proceedings of the 8th International Work-
shop on Semantic Evaluation (SemEval 2014).
Blunsom, Phil, Edward Grefenstette, Nal Kalch-
brenner, et al. 2014. A convolutional neural net-
work for modelling sentences. In Proceedings
of the 52nd Annual Meeting of the Association
for Computational Linguistics.
Chen, Danqi and Christopher D Manning. 2014. A
fast and accurate dependency parser using neu-
ral networks. In Proceedings of the 2014 Con-
ference on Empirical Methods in Natural Lan-
guage Processing (EMNLP).
Collobert, Ronan, Jason Weston, L´eon Bottou,
Michael Karlen, Koray Kavukcuoglu, and Pavel
Kuksa. 2011. Natural language processing (al-
most) from scratch. The Journal of Machine
Learning Research 12:2493–2537.
Duchi, John, Elad Hazan, and Yoram Singer. 2011.
Adaptive subgradient methods for online learn-
ing and stochastic optimization. The Journal of
Machine Learning Research 12:2121–2159.
Elman, Jeffrey L. 1990. Finding structure in time.
Cognitive science 14(2):179–211.
Foltz, Peter W, Walter Kintsch, and Thomas K
Landauer. 1998. The measurement of textual
coherence with latent semantic analysis. Dis-
course processes 25(2-3):285–307.
Ganitkevitch, Juri, Benjamin Van Durme, and
Chris Callison-Burch. 2013. PPDB: The Para-
phrase Database. In Proceedings of HLT-
NAACL 2013.
Goller, Christoph and Andreas Kuchler. 1996.
Learning task-dependent distributed representa-
tions by backpropagation through structure. In
IEEE International Conference on Neural Net-
works.
Graves, Alex, Navdeep Jaitly, and A-R Mohamed.
2013. Hybrid speech recognition with deep
bidirectional LSTM. In IEEE Workshop on Au-
tomatic Speech Recognition and Understanding
(ASRU).
Grefenstette, Edward, Georgiana Dinu, Yao-
Zhong Zhang, Mehrnoosh Sadrzadeh, and
Marco Baroni. 2013. Multi-step regression
learning for compositional distributional se-
mantics. In Proceedings of the 10th Interna-
tional Conference on Computational Semantics.
Hochreiter, Sepp. 1998. The vanishing gradient
problem during learning recurrent neural nets
and problem solutions. International Journal of
Uncertainty, Fuzziness and Knowledge-Based
Systems 6(02):107–116.
Hochreiter, Sepp and J¨urgen Schmidhuber. 1997.
Long Short-Term Memory. Neural Computa-
tion 9(8).
Huang, Eric H., Richard Socher, Christopher D.
Manning, and Andrew Y. Ng. 2012. Improv-
ing word representations via global context and
multiple word prototypes. In Annual Meeting
of the Association for Computational Linguis-
tics (ACL).
Irsoy, Ozan and Claire Cardie. 2014. Deep re-
cursive neural networks for compositionality in
language. In Advances in Neural Information
Processing Systems.
Jimenez, Sergio, George Duenas, Julia Baquero,
Alexander Gelbukh, Av Juan Dios B´atiz, and
Av Mendiz´abal. 2014. UNAL-NLP: Combin-
ing soft cardinality features for semantic textual
similarity, relatedness and entailment. In Pro-
ceedings of the 8th International Workshop on
Semantic Evaluation (SemEval 2014).
Kim, Yoon. 2014. Convolutional neural networks
for sentence classification. In Proceedings of
the 2014 Conference on Empirical Methods in
Natural Language Processing (EMNLP).
Klein, Dan and Christopher D Manning. 2003.
Accurate unlexicalized parsing. In Proceedings
of the 41st Annual Meeting on Association for
Computational Linguistics.
Lai, Alice and Julia Hockenmaier. 2014. Illinois-
LH: A denotational and distributional approach
to semantics. In Proceedings of the 8th Inter-
national Workshop on Semantic Evaluation (Se-
mEval 2014).
</reference>
<bodyText confidence="0.948890285714286">
Landauer, Thomas K and Susan T Dumais. 1997.
A solution to Plato’s problem: The latent se-
mantic analysis theory of acquisition, induction,
and representation of knowledge. Psychological
review 104(2):211.
Le, Quoc and Tomas Mikolov. 2014. Distributed
representations of sentences and documents. In
</bodyText>
<page confidence="0.983559">
1565
</page>
<reference confidence="0.999385717391304">
Proceedings of the 31st International Confer-
ence on Machine Learning (ICML-14).
Marelli, Marco, Luisa Bentivogli, Marco Ba-
roni, Raffaella Bernardi, Stefano Menini, and
Roberto Zamparelli. 2014. SemEval-2014 Task
1: Evaluation of compositional distributional
semantic models on full sentences through se-
mantic relatedness and textual entailment. In
Proceedings of the 8th International Workshop
on Semantic Evaluation (SemEval 2014).
Mikolov, Tom´aˇs. 2012. Statistical Language Mod-
els Based on Neural Networks. Ph.D. thesis,
Brno University of Technology.
Mikolov, Tomas, Ilya Sutskever, Kai Chen, Greg S
Corrado, and Jeff Dean. 2013. Distributed
representations of words and phrases and their
compositionality. In Advances in Neural Infor-
mation Processing Systems.
Mitchell, Jeff and Mirella Lapata. 2010. Composi-
tion in distributional models of semantics. Cog-
nitive science 34(8):1388–1429.
Pennington, Jeffrey, Richard Socher, and Christo-
pher D Manning. 2014. Glove: Global vectors
for word representation. In Proceedings of the
2014 Conference on Empiricial Methods in Nat-
ural Language Processing (EMNLP).
Rumelhart, David E, Geoffrey E Hinton, and
Ronald J Williams. 1988. Learning represen-
tations by back-propagating errors. Cognitive
modeling 5.
Socher, Richard, Brody Huval, Christopher D
Manning, and Andrew Y Ng. 2012. Seman-
tic compositionality through recursive matrix-
vector spaces. In Proceedings of the 2012 Joint
Conference on Empirical Methods in Natural
Language Processing and Computational Nat-
ural Language Learning (EMNLP).
Socher, Richard, Andrej Karpathy, Quoc V Le,
Christopher D Manning, and Andrew Y Ng.
2014. Grounded compositional semantics for
finding and describing images with sentences.
Transactions of the Association for Computa-
tional Linguistics 2.
Socher, Richard, Cliff C Lin, Chris Manning, and
Andrew Y Ng. 2011. Parsing natural scenes
and natural language with recursive neural net-
works. In Proceedings of the 28th International
Conference on Machine Learning (ICML-11).
Socher, Richard, Alex Perelygin, Jean Y Wu,
Jason Chuang, Christopher D Manning, An-
drew Y Ng, and Christopher Potts. 2013. Re-
cursive deep models for semantic composition-
ality over a sentiment treebank. In Proceedings
of the 2013 Conference on Empirical Methods
in Natural Language Processing (EMNLP).
Srivastava, Nitish, Geoffrey Hinton, Alex
Krizhevsky, Ilya Sutskever, and Ruslan
Salakhutdinov. 2014. Dropout: A simple
way to prevent neural networks from overfit-
ting. Journal of Machine Learning Research
15:1929–1958.
Srivastava, Nitish, Ruslan Salakhutdinov, and Ge-
offrey Hinton. 2013. Modeling documents with
a Deep Boltzmann Machine. In Uncertainty in
Artificial Intelligence.
Sutskever, Ilya, Oriol Vinyals, and Quoc VV Le.
2014. Sequence to sequence learning with neu-
ral networks. In Advances in Neural Informa-
tion Processing Systems.
Turian, Joseph, Lev Ratinov, and Yoshua Bengio.
2010. Word representations: A simple and gen-
eral method for semi-supervised learning. In
Proceedings of the 48th Annual Meeting of the
Association for Computational Linguistics.
Vinyals, Oriol, Alexander Toshev, Samy Bengio,
and Dumitru Erhan. 2014. Show and tell: A
neural image caption generator. arXiv preprint
arXiv:1411.4555 .
Yessenalina, Ainur and Claire Cardie. 2011. Com-
positional matrix-space models for sentiment
analysis. In Proceedings of the 2011 Confer-
ence on Empirical Methods in Natural Lan-
guage Processing (EMNLP).
Zaremba, Wojciech and Ilya Sutskever.
2014. Learning to execute. arXiv preprint
arXiv:1410.4615 .
Zhao, Jiang, Tian Tian Zhu, and Man Lan. 2014.
ECNU: One stone two birds: Ensemble of het-
erogenous measures for semantic relatedness
and textual entailment. In Proceedings of the
8th International Workshop on Semantic Evalu-
ation (SemEval 2014).
</reference>
<page confidence="0.992526">
1566
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.434141">
<title confidence="0.983106">Improved Semantic Representations Tree-Structured Long Short-Term Memory Networks</title>
<author confidence="0.999698">Kai Sheng Tai</author>
<author confidence="0.999698">Richard Socher</author>
<author confidence="0.999698">D Christopher</author>
<affiliation confidence="0.999756">Computer Science Department, Stanford University, *MetaMind Inc.</affiliation>
<email confidence="0.998988">kst@cs.stanford.edu,richard@metamind.io,manning@stanford.edu</email>
<abstract confidence="0.968554142857143">Because of their superior ability to preserve sequence information over time, Long Short-Term Memory (LSTM) networks, a type of recurrent neural network with a more complex computational unit, have obtained strong results on a variety of sequence modeling tasks. The only underlying LSTM structure that has been explored so far is a linear chain. However, natural language exhibits syntactic properties that would naturally combine words to phrases. We introduce the Tree-LSTM, a generalization of LSTMs to tree-structured network topologies. Tree- LSTMs outperform all existing systems and strong LSTM baselines on two tasks: predicting the semantic relatedness of two sentences (SemEval 2014, Task 1) and sentiment classification (Stanford Sentiment Treebank).</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Johannes Bjerva</author>
<author>Johan Bos</author>
<author>Rob van der Goot</author>
<author>Malvina Nissim</author>
</authors>
<title>The Meaning Factory: Formal semantics for recognizing textual entailment and determining semantic similarity.</title>
<date>2014</date>
<booktitle>In Proceedings of the 8th International Workshop on Semantic Evaluation (SemEval</booktitle>
<marker>Bjerva, Bos, van der Goot, Nissim, 2014</marker>
<rawString>Bjerva, Johannes, Johan Bos, Rob van der Goot, and Malvina Nissim. 2014. The Meaning Factory: Formal semantics for recognizing textual entailment and determining semantic similarity. In Proceedings of the 8th International Workshop on Semantic Evaluation (SemEval 2014).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Phil Blunsom</author>
<author>Edward Grefenstette</author>
<author>Nal Kalchbrenner</author>
</authors>
<title>A convolutional neural network for modelling sentences.</title>
<date>2014</date>
<booktitle>In Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics.</booktitle>
<contexts>
<context position="21142" citStr="Blunsom et al., 2014" startWordPosition="3593" endWordPosition="3596"> 5], with 1 indicating that the two sentences are completely unrelated, and 5 indicating that the two sentences are very related. Each label is the average of 10 ratings assigned by different human annotators. Here, we use the similarity model described in Sec. 4.2. For the similarity prediction network (Eqs. 15) we use a hidden layer of size 50. We 3Dependency parses produced by the Stanford Neural Network Dependency Parser (Chen and Manning, 2014). Method Fine-grained Binary RAE (Socher et al., 2013) 43.2 82.4 MV-RNN (Socher et al., 2013) 44.4 82.9 RNTN (Socher et al., 2013) 45.7 85.4 DCNN (Blunsom et al., 2014) 48.5 86.8 Paragraph-Vec (Le and Mikolov, 2014) 48.7 87.8 CNN-non-static (Kim, 2014) 48.0 87.2 CNN-multichannel (Kim, 2014) 47.4 88.1 DRNN (Irsoy and Cardie, 2014) 49.8 86.6 LSTM 46.4 (1.1) 84.9 (0.6) Bidirectional LSTM 49.1 (1.0) 87.5 (0.5) 2-layer LSTM 46.0 (1.3) 86.3 (0.6) 2-layer Bidirectional LSTM 48.5 (1.0) 87.2 (1.0) Dependency Tree-LSTM 48.4 (0.4) 85.7 (0.4) Constituency Tree-LSTM 43.9 (0.6) 82.0 (0.5) – randomly initialized vectors – Glove vectors, fixed 49.7 (0.4) 87.5 (0.8) – Glove vectors, tuned 51.0 (0.5) 88.0 (0.3) Table 2: Test set accuracies on the Stanford Sentiment Treebank. </context>
</contexts>
<marker>Blunsom, Grefenstette, Kalchbrenner, 2014</marker>
<rawString>Blunsom, Phil, Edward Grefenstette, Nal Kalchbrenner, et al. 2014. A convolutional neural network for modelling sentences. In Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Danqi Chen</author>
<author>Christopher D Manning</author>
</authors>
<title>A fast and accurate dependency parser using neural networks.</title>
<date>2014</date>
<booktitle>In Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP).</booktitle>
<contexts>
<context position="20974" citStr="Chen and Manning, 2014" startWordPosition="3564" endWordPosition="3567">/4927 train/dev/test split. The sentences are derived from existing image and video description datasets. Each sentence pair is annotated with a relatedness score y E [1, 5], with 1 indicating that the two sentences are completely unrelated, and 5 indicating that the two sentences are very related. Each label is the average of 10 ratings assigned by different human annotators. Here, we use the similarity model described in Sec. 4.2. For the similarity prediction network (Eqs. 15) we use a hidden layer of size 50. We 3Dependency parses produced by the Stanford Neural Network Dependency Parser (Chen and Manning, 2014). Method Fine-grained Binary RAE (Socher et al., 2013) 43.2 82.4 MV-RNN (Socher et al., 2013) 44.4 82.9 RNTN (Socher et al., 2013) 45.7 85.4 DCNN (Blunsom et al., 2014) 48.5 86.8 Paragraph-Vec (Le and Mikolov, 2014) 48.7 87.8 CNN-non-static (Kim, 2014) 48.0 87.2 CNN-multichannel (Kim, 2014) 47.4 88.1 DRNN (Irsoy and Cardie, 2014) 49.8 86.6 LSTM 46.4 (1.1) 84.9 (0.6) Bidirectional LSTM 49.1 (1.0) 87.5 (0.5) 2-layer LSTM 46.0 (1.3) 86.3 (0.6) 2-layer Bidirectional LSTM 48.5 (1.0) 87.2 (1.0) Dependency Tree-LSTM 48.4 (0.4) 85.7 (0.4) Constituency Tree-LSTM 43.9 (0.6) 82.0 (0.5) – randomly initial</context>
</contexts>
<marker>Chen, Manning, 2014</marker>
<rawString>Chen, Danqi and Christopher D Manning. 2014. A fast and accurate dependency parser using neural networks. In Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ronan Collobert</author>
<author>Jason Weston</author>
<author>L´eon Bottou</author>
<author>Michael Karlen</author>
<author>Koray Kavukcuoglu</author>
<author>Pavel Kuksa</author>
</authors>
<title>Natural language processing (almost) from scratch.</title>
<date>2011</date>
<journal>The Journal of Machine Learning Research</journal>
<pages>12--2493</pages>
<contexts>
<context position="30818" citStr="Collobert et al., 2011" startWordPosition="5108" endWordPosition="5111">ecific metric. Each data point is a mean score over 5 runs, and error bars have been omitted for clarity. We observe that while the Dependency TreeLSTM does significantly outperform its sequential counterparts on the relatedness task for longer sentences of length 13 to 15 (Fig. 4), it also achieves consistently strong performance on shorter sentences. This suggests that unlike sequential LSTMs, Tree-LSTMs are able to encode semantically-useful structural information in the sentence representations that they compose. 8 Related Work Distributed representations of words (Rumelhart et al., 1988; Collobert et al., 2011; Turian et al., 2010; Huang et al., 2012; Mikolov et al., 2013; 1563 Ranking by mean word vector cosine similarity Score a woman is slicing potatoes a woman is cutting potatoes 0.96 a woman is slicing herbs 0.92 a woman is slicing tofu 0.92 a boy is waving at some young runners from the ocean a man and a boy are standing at the bottom of some stairs , 0.92 which are outdoors a group of children in uniforms is standing at a gate and 0.90 one is kissing the mother a group of children in uniforms is standing at a gate and 0.90 there is no one kissing the mother two men are playing guitar some me</context>
</contexts>
<marker>Collobert, Weston, Bottou, Karlen, Kavukcuoglu, Kuksa, 2011</marker>
<rawString>Collobert, Ronan, Jason Weston, L´eon Bottou, Michael Karlen, Koray Kavukcuoglu, and Pavel Kuksa. 2011. Natural language processing (almost) from scratch. The Journal of Machine Learning Research 12:2493–2537.</rawString>
</citation>
<citation valid="true">
<authors>
<author>John Duchi</author>
<author>Elad Hazan</author>
<author>Yoram Singer</author>
</authors>
<title>Adaptive subgradient methods for online learning and stochastic optimization.</title>
<date>2011</date>
<journal>The Journal of Machine Learning Research</journal>
<pages>12--2121</pages>
<contexts>
<context position="22678" citStr="Duchi et al., 2011" startWordPosition="3819" endWordPosition="3822">STM and Dependency TreeLSTM models. 5.3 Hyperparameters and Training Details The hyperparameters for our models were tuned on the development set for each task. We initialized our word representations using publicly available 300-dimensional Glove vectors5 (Pennington et al., 2014). For the sentiment classification task, word representations were updated during training with a learning rate of 0.1. For the semantic relatedness task, word representations were held fixed as we did not observe any significant improvement when the representations were tuned. Our models were trained using AdaGrad (Duchi et al., 2011) with a learning rate of 0.05 and a minibatch size of 25. The model parameters were regularized with a per-minibatch L2 regularization strength of 10−4. The sentiment classifier was additionally regularized using dropout (Srivastava et al., 2014) with a dropout rate of 0.5. We did not observe performance gains using dropout on the semantic relatedness task. 4Constituency parses produced by the Stanford PCFG Parser (Klein and Manning, 2003). 5Trained on 840 billion tokens of Common Crawl data, http://nlp.stanford.edu/projects/glove/. 1561 Method Pearson’s r Spearman’s p MSE Illinois-LH (Lai and</context>
</contexts>
<marker>Duchi, Hazan, Singer, 2011</marker>
<rawString>Duchi, John, Elad Hazan, and Yoram Singer. 2011. Adaptive subgradient methods for online learning and stochastic optimization. The Journal of Machine Learning Research 12:2121–2159.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jeffrey L Elman</author>
</authors>
<title>Finding structure in time.</title>
<date>1990</date>
<journal>Cognitive science</journal>
<volume>14</volume>
<issue>2</issue>
<contexts>
<context position="1647" citStr="Elman, 1990" startWordPosition="230" endWordPosition="231">k). 1 Introduction Most models for distributed representations of phrases and sentences—that is, models where realvalued vectors are used to represent meaning—fall into one of three classes: bag-of-words models, sequence models, and tree-structured models. In bag-of-words models, phrase and sentence representations are independent of word order; for example, they can be generated by averaging constituent word representations (Landauer and Dumais, 1997; Foltz et al., 1998). In contrast, sequence models construct sentence representations as an order-sensitive function of the sequence of tokens (Elman, 1990; Mikolov, 2012). Lastly, tree-structured models compose each phrase and sentence representation from its constituent subphrases according to a given syntactic structure over the sentence (Goller and Kuchler, 1996; Socher et al., 2011). Figure 1: Top: A chain-structured LSTM network. Bottom: A tree-structured LSTM network with arbitrary branching factor. Order-insensitive models are insufficient to fully capture the semantics of natural language due to their inability to account for differences in meaning as a result of differences in word order or syntactic structure (e.g., “cats climb trees”</context>
<context position="5542" citStr="Elman, 1990" startWordPosition="838" endWordPosition="839">baselines on both tasks. Implementations of our models and experiments are available at https:// github.com/stanfordnlp/treelstm. 2 Long Short-Term Memory Networks 2.1 Overview Recurrent neural networks (RNNs) are able to process input sequences of arbitrary length via the recursive application of a transition function on a hidden state vector ht. At each time step t, the hidden state ht is a function of the input vector xt that the network receives at time t and its previous hidden state ht−1. For example, the input vector xt could be a vector representation of the t-th word in body of text (Elman, 1990; Mikolov, 2012). The hidden state ht E Rd can be interpreted as a ddimensional distributed representation of the sequence of tokens observed up to time t. Commonly, the RNN transition function is an affine transformation followed by a pointwise nonlinearity such as the hyperbolic tangent function: ht = tanh (Wxt + Uht−1 + b) . Unfortunately, a problem with RNNs with transition functions of this form is that during training, components of the gradient vector can grow or decay exponentially over long sequences (Hochreiter, 1998; Bengio et al., 1994). This problem with exploding or vanishing gra</context>
</contexts>
<marker>Elman, 1990</marker>
<rawString>Elman, Jeffrey L. 1990. Finding structure in time. Cognitive science 14(2):179–211.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Peter W Foltz</author>
<author>Walter Kintsch</author>
<author>Thomas K Landauer</author>
</authors>
<title>The measurement of textual coherence with latent semantic analysis.</title>
<date>1998</date>
<booktitle>Discourse processes</booktitle>
<pages>25--2</pages>
<contexts>
<context position="1512" citStr="Foltz et al., 1998" startWordPosition="209" endWordPosition="212">two tasks: predicting the semantic relatedness of two sentences (SemEval 2014, Task 1) and sentiment classification (Stanford Sentiment Treebank). 1 Introduction Most models for distributed representations of phrases and sentences—that is, models where realvalued vectors are used to represent meaning—fall into one of three classes: bag-of-words models, sequence models, and tree-structured models. In bag-of-words models, phrase and sentence representations are independent of word order; for example, they can be generated by averaging constituent word representations (Landauer and Dumais, 1997; Foltz et al., 1998). In contrast, sequence models construct sentence representations as an order-sensitive function of the sequence of tokens (Elman, 1990; Mikolov, 2012). Lastly, tree-structured models compose each phrase and sentence representation from its constituent subphrases according to a given syntactic structure over the sentence (Goller and Kuchler, 1996; Socher et al., 2011). Figure 1: Top: A chain-structured LSTM network. Bottom: A tree-structured LSTM network with arbitrary branching factor. Order-insensitive models are insufficient to fully capture the semantics of natural language due to their in</context>
</contexts>
<marker>Foltz, Kintsch, Landauer, 1998</marker>
<rawString>Foltz, Peter W, Walter Kintsch, and Thomas K Landauer. 1998. The measurement of textual coherence with latent semantic analysis. Discourse processes 25(2-3):285–307.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Juri Ganitkevitch</author>
<author>Benjamin Van Durme</author>
<author>Chris Callison-Burch</author>
</authors>
<title>PPDB: The Paraphrase Database.</title>
<date>2013</date>
<booktitle>In Proceedings of HLTNAACL</booktitle>
<marker>Ganitkevitch, Van Durme, Callison-Burch, 2013</marker>
<rawString>Ganitkevitch, Juri, Benjamin Van Durme, and Chris Callison-Burch. 2013. PPDB: The Paraphrase Database. In Proceedings of HLTNAACL 2013.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Christoph Goller</author>
<author>Andreas Kuchler</author>
</authors>
<title>Learning task-dependent distributed representations by backpropagation through structure.</title>
<date>1996</date>
<booktitle>In IEEE International Conference on Neural Networks.</booktitle>
<contexts>
<context position="1860" citStr="Goller and Kuchler, 1996" startWordPosition="257" endWordPosition="260">rds models, sequence models, and tree-structured models. In bag-of-words models, phrase and sentence representations are independent of word order; for example, they can be generated by averaging constituent word representations (Landauer and Dumais, 1997; Foltz et al., 1998). In contrast, sequence models construct sentence representations as an order-sensitive function of the sequence of tokens (Elman, 1990; Mikolov, 2012). Lastly, tree-structured models compose each phrase and sentence representation from its constituent subphrases according to a given syntactic structure over the sentence (Goller and Kuchler, 1996; Socher et al., 2011). Figure 1: Top: A chain-structured LSTM network. Bottom: A tree-structured LSTM network with arbitrary branching factor. Order-insensitive models are insufficient to fully capture the semantics of natural language due to their inability to account for differences in meaning as a result of differences in word order or syntactic structure (e.g., “cats climb trees” vs. “trees climb cats”). We therefore turn to ordersensitive sequential or tree-structured models. In particular, tree-structured models are a linguistically attractive option due to their relation to syntactic i</context>
<context position="32925" citStr="Goller and Kuchler, 1996" startWordPosition="5496" endWordPosition="5499">le relationships, such as that between “beach” and “ocean” in the second example. Pennington et al., 2014) have found wide applicability in a variety of NLP tasks. Following this success, there has been substantial interest in the area of learning distributed phrase and sentence representations (Mitchell and Lapata, 2010; Yessenalina and Cardie, 2011; Grefenstette et al., 2013; Mikolov et al., 2013), as well as distributed representations of longer bodies of text such as paragraphs and documents (Srivastava et al., 2013; Le and Mikolov, 2014). Our approach builds on recursive neural networks (Goller and Kuchler, 1996; Socher et al., 2011), which we abbreviate as Tree-RNNs in order to avoid confusion with recurrent neural networks. Under the Tree-RNN framework, the vector representation associated with each node of a tree is composed as a function of the vectors corresponding to the children of the node. The choice of composition function gives rise to numerous variants of this basic framework. TreeRNNs have been used to parse images of natural scenes (Socher et al., 2011), compose phrase representations from word vectors (Socher et al., 2012), and classify the sentiment polarity of sentences (Socher et al</context>
</contexts>
<marker>Goller, Kuchler, 1996</marker>
<rawString>Goller, Christoph and Andreas Kuchler. 1996. Learning task-dependent distributed representations by backpropagation through structure. In IEEE International Conference on Neural Networks.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Alex Graves</author>
<author>Navdeep Jaitly</author>
<author>A-R Mohamed</author>
</authors>
<title>Hybrid speech recognition with deep bidirectional LSTM.</title>
<date>2013</date>
<booktitle>In IEEE Workshop on Automatic Speech Recognition and Understanding (ASRU).</booktitle>
<contexts>
<context position="3850" citStr="Graves et al., 2013" startWordPosition="564" endWordPosition="567">556–1566, Beijing, China, July 26-31, 2015. c�2015 Association for Computational Linguistics (RNNs) are a natural choice for sequence modeling tasks. Recently, RNNs with Long Short-Term Memory (LSTM) units (Hochreiter and Schmidhuber, 1997) have re-emerged as a popular architecture due to their representational power and effectiveness at capturing long-term dependencies. LSTM networks, which we review in Sec. 2, have been successfully applied to a variety of sequence modeling and prediction tasks, notably machine translation (Bahdanau et al., 2015; Sutskever et al., 2014), speech recognition (Graves et al., 2013), image caption generation (Vinyals et al., 2014), and program execution (Zaremba and Sutskever, 2014). In this paper, we introduce a generalization of the standard LSTM architecture to tree-structured network topologies and show its superiority for representing sentence meaning over a sequential LSTM. While the standard LSTM composes its hidden state from the input at the current time step and the hidden state of the LSTM unit in the previous time step, the tree-structured LSTM, or Tree-LSTM, composes its state from an input vector and the hidden states of arbitrarily many child units. The st</context>
<context position="7943" citStr="Graves et al., 2013" startWordPosition="1267" endWordPosition="1270">rols how much each unit is updated, and the output gate controls the exposure of the internal memory state. The hidden state vector in an LSTM unit is therefore a gated, partial view of the state of the unit’s internal memory cell. Since the value of the gating variables vary for each vector element, the model ht−1 + b(u)) , 1557 can learn to represent information over multiple time scales. 2.2 Variants Two commonly-used variants of the basic LSTM architecture are the Bidirectional LSTM and the Multilayer LSTM (also known as the stacked or deep LSTM). Bidirectional LSTM. A Bidirectional LSTM (Graves et al., 2013) consists of two LSTMs that are run in parallel: one on the input sequence and the other on the reverse of the input sequence. At each time step, the hidden state of the Bidirectional LSTM is the concatenation of the forward and backward hidden states. This setup allows the hidden state to capture both past and future information. Multilayer LSTM. In Multilayer LSTM architectures, the hidden state of an LSTM unit in layer ` is used as input to the LSTM unit in layer `+1 in the same time step (Graves et al., 2013; Sutskever et al., 2014; Zaremba and Sutskever, 2014). Here, the idea is to let th</context>
</contexts>
<marker>Graves, Jaitly, Mohamed, 2013</marker>
<rawString>Graves, Alex, Navdeep Jaitly, and A-R Mohamed. 2013. Hybrid speech recognition with deep bidirectional LSTM. In IEEE Workshop on Automatic Speech Recognition and Understanding (ASRU).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Edward Grefenstette</author>
<author>Georgiana Dinu</author>
<author>YaoZhong Zhang</author>
<author>Mehrnoosh Sadrzadeh</author>
<author>Marco Baroni</author>
</authors>
<title>Multi-step regression learning for compositional distributional semantics.</title>
<date>2013</date>
<booktitle>In Proceedings of the 10th International Conference on Computational Semantics.</booktitle>
<contexts>
<context position="32680" citStr="Grefenstette et al., 2013" startWordPosition="5457" endWordPosition="5460">uitar for donations and plays 4.01 with the case two men are dancing and singing in front of a crowd 4.00 Table 4: Most similar sentences from a 1000-sentence sample drawn from the SICK test set. The TreeLSTM model is able to pick up on more subtle relationships, such as that between “beach” and “ocean” in the second example. Pennington et al., 2014) have found wide applicability in a variety of NLP tasks. Following this success, there has been substantial interest in the area of learning distributed phrase and sentence representations (Mitchell and Lapata, 2010; Yessenalina and Cardie, 2011; Grefenstette et al., 2013; Mikolov et al., 2013), as well as distributed representations of longer bodies of text such as paragraphs and documents (Srivastava et al., 2013; Le and Mikolov, 2014). Our approach builds on recursive neural networks (Goller and Kuchler, 1996; Socher et al., 2011), which we abbreviate as Tree-RNNs in order to avoid confusion with recurrent neural networks. Under the Tree-RNN framework, the vector representation associated with each node of a tree is composed as a function of the vectors corresponding to the children of the node. The choice of composition function gives rise to numerous vari</context>
</contexts>
<marker>Grefenstette, Dinu, Zhang, Sadrzadeh, Baroni, 2013</marker>
<rawString>Grefenstette, Edward, Georgiana Dinu, YaoZhong Zhang, Mehrnoosh Sadrzadeh, and Marco Baroni. 2013. Multi-step regression learning for compositional distributional semantics. In Proceedings of the 10th International Conference on Computational Semantics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sepp Hochreiter</author>
</authors>
<title>The vanishing gradient problem during learning recurrent neural nets and problem solutions.</title>
<date>1998</date>
<journal>International Journal of Uncertainty, Fuzziness and Knowledge-Based Systems</journal>
<volume>6</volume>
<issue>02</issue>
<contexts>
<context position="6074" citStr="Hochreiter, 1998" startWordPosition="928" endWordPosition="930">or xt could be a vector representation of the t-th word in body of text (Elman, 1990; Mikolov, 2012). The hidden state ht E Rd can be interpreted as a ddimensional distributed representation of the sequence of tokens observed up to time t. Commonly, the RNN transition function is an affine transformation followed by a pointwise nonlinearity such as the hyperbolic tangent function: ht = tanh (Wxt + Uht−1 + b) . Unfortunately, a problem with RNNs with transition functions of this form is that during training, components of the gradient vector can grow or decay exponentially over long sequences (Hochreiter, 1998; Bengio et al., 1994). This problem with exploding or vanishing gradients makes it difficult for the RNN model to learn long-distance correlations in a sequence. The LSTM architecture (Hochreiter and Schmidhuber, 1997) addresses this problem of learning long-term dependencies by introducing a memory cell that is able to preserve state over long periods of time. While numerous LSTM variants have been described, here we describe the version used by Zaremba and Sutskever (2014). We define the LSTM unit at each time step t to be a collection of vectors in Rd: an input gate it, a forget gate ft, a</context>
</contexts>
<marker>Hochreiter, 1998</marker>
<rawString>Hochreiter, Sepp. 1998. The vanishing gradient problem during learning recurrent neural nets and problem solutions. International Journal of Uncertainty, Fuzziness and Knowledge-Based Systems 6(02):107–116.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sepp Hochreiter</author>
<author>J¨urgen Schmidhuber</author>
</authors>
<title>Long Short-Term Memory.</title>
<date>1997</date>
<journal>Neural Computation</journal>
<volume>9</volume>
<issue>8</issue>
<contexts>
<context position="3470" citStr="Hochreiter and Schmidhuber, 1997" startWordPosition="506" endWordPosition="510">esults in several NLP tasks against its tree-structured generalization. Due to their capability for processing arbitrarylength sequences, recurrent neural networks y1 y2 y3 y4 x1 x2 x3 x4 y1 y4 y6 x4 x5 x6 x2 y2 y3 x1 1556 Proceedings of the 53rd Annual Meeting of the Association for Computational Linguistics and the 7th International Joint Conference on Natural Language Processing, pages 1556–1566, Beijing, China, July 26-31, 2015. c�2015 Association for Computational Linguistics (RNNs) are a natural choice for sequence modeling tasks. Recently, RNNs with Long Short-Term Memory (LSTM) units (Hochreiter and Schmidhuber, 1997) have re-emerged as a popular architecture due to their representational power and effectiveness at capturing long-term dependencies. LSTM networks, which we review in Sec. 2, have been successfully applied to a variety of sequence modeling and prediction tasks, notably machine translation (Bahdanau et al., 2015; Sutskever et al., 2014), speech recognition (Graves et al., 2013), image caption generation (Vinyals et al., 2014), and program execution (Zaremba and Sutskever, 2014). In this paper, we introduce a generalization of the standard LSTM architecture to tree-structured network topologies</context>
<context position="6293" citStr="Hochreiter and Schmidhuber, 1997" startWordPosition="960" endWordPosition="963">ence of tokens observed up to time t. Commonly, the RNN transition function is an affine transformation followed by a pointwise nonlinearity such as the hyperbolic tangent function: ht = tanh (Wxt + Uht−1 + b) . Unfortunately, a problem with RNNs with transition functions of this form is that during training, components of the gradient vector can grow or decay exponentially over long sequences (Hochreiter, 1998; Bengio et al., 1994). This problem with exploding or vanishing gradients makes it difficult for the RNN model to learn long-distance correlations in a sequence. The LSTM architecture (Hochreiter and Schmidhuber, 1997) addresses this problem of learning long-term dependencies by introducing a memory cell that is able to preserve state over long periods of time. While numerous LSTM variants have been described, here we describe the version used by Zaremba and Sutskever (2014). We define the LSTM unit at each time step t to be a collection of vectors in Rd: an input gate it, a forget gate ft, an output gate ot, a memory cell ct and a hidden state ht. The entries of the gating vectors it, ft and ot are in [0, 1]. We refer to d as the memory dimension of the LSTM. The LSTM transition equations are the following</context>
</contexts>
<marker>Hochreiter, Schmidhuber, 1997</marker>
<rawString>Hochreiter, Sepp and J¨urgen Schmidhuber. 1997. Long Short-Term Memory. Neural Computation 9(8).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Eric H Huang</author>
<author>Richard Socher</author>
<author>Christopher D Manning</author>
<author>Andrew Y Ng</author>
</authors>
<title>Improving word representations via global context and multiple word prototypes.</title>
<date>2012</date>
<booktitle>In Annual Meeting of the Association for Computational Linguistics (ACL).</booktitle>
<contexts>
<context position="30859" citStr="Huang et al., 2012" startWordPosition="5116" endWordPosition="5119">e over 5 runs, and error bars have been omitted for clarity. We observe that while the Dependency TreeLSTM does significantly outperform its sequential counterparts on the relatedness task for longer sentences of length 13 to 15 (Fig. 4), it also achieves consistently strong performance on shorter sentences. This suggests that unlike sequential LSTMs, Tree-LSTMs are able to encode semantically-useful structural information in the sentence representations that they compose. 8 Related Work Distributed representations of words (Rumelhart et al., 1988; Collobert et al., 2011; Turian et al., 2010; Huang et al., 2012; Mikolov et al., 2013; 1563 Ranking by mean word vector cosine similarity Score a woman is slicing potatoes a woman is cutting potatoes 0.96 a woman is slicing herbs 0.92 a woman is slicing tofu 0.92 a boy is waving at some young runners from the ocean a man and a boy are standing at the bottom of some stairs , 0.92 which are outdoors a group of children in uniforms is standing at a gate and 0.90 one is kissing the mother a group of children in uniforms is standing at a gate and 0.90 there is no one kissing the mother two men are playing guitar some men are playing rugby 0.88 two men are talk</context>
</contexts>
<marker>Huang, Socher, Manning, Ng, 2012</marker>
<rawString>Huang, Eric H., Richard Socher, Christopher D. Manning, and Andrew Y. Ng. 2012. Improving word representations via global context and multiple word prototypes. In Annual Meeting of the Association for Computational Linguistics (ACL).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ozan Irsoy</author>
<author>Claire Cardie</author>
</authors>
<title>Deep recursive neural networks for compositionality in language.</title>
<date>2014</date>
<booktitle>In Advances in Neural Information Processing Systems.</booktitle>
<contexts>
<context position="21305" citStr="Irsoy and Cardie, 2014" startWordPosition="3617" endWordPosition="3620"> ratings assigned by different human annotators. Here, we use the similarity model described in Sec. 4.2. For the similarity prediction network (Eqs. 15) we use a hidden layer of size 50. We 3Dependency parses produced by the Stanford Neural Network Dependency Parser (Chen and Manning, 2014). Method Fine-grained Binary RAE (Socher et al., 2013) 43.2 82.4 MV-RNN (Socher et al., 2013) 44.4 82.9 RNTN (Socher et al., 2013) 45.7 85.4 DCNN (Blunsom et al., 2014) 48.5 86.8 Paragraph-Vec (Le and Mikolov, 2014) 48.7 87.8 CNN-non-static (Kim, 2014) 48.0 87.2 CNN-multichannel (Kim, 2014) 47.4 88.1 DRNN (Irsoy and Cardie, 2014) 49.8 86.6 LSTM 46.4 (1.1) 84.9 (0.6) Bidirectional LSTM 49.1 (1.0) 87.5 (0.5) 2-layer LSTM 46.0 (1.3) 86.3 (0.6) 2-layer Bidirectional LSTM 48.5 (1.0) 87.2 (1.0) Dependency Tree-LSTM 48.4 (0.4) 85.7 (0.4) Constituency Tree-LSTM 43.9 (0.6) 82.0 (0.5) – randomly initialized vectors – Glove vectors, fixed 49.7 (0.4) 87.5 (0.8) – Glove vectors, tuned 51.0 (0.5) 88.0 (0.3) Table 2: Test set accuracies on the Stanford Sentiment Treebank. For our experiments, we report mean accuracies over 5 runs (standard deviations in parentheses). Fine-grained: 5-class sentiment classification. Binary: positive/n</context>
</contexts>
<marker>Irsoy, Cardie, 2014</marker>
<rawString>Irsoy, Ozan and Claire Cardie. 2014. Deep recursive neural networks for compositionality in language. In Advances in Neural Information Processing Systems.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sergio Jimenez</author>
<author>George Duenas</author>
<author>Julia Baquero</author>
<author>Alexander Gelbukh</author>
<author>Av Juan Dios B´atiz</author>
<author>Av Mendiz´abal</author>
</authors>
<title>UNAL-NLP: Combining soft cardinality features for semantic textual similarity, relatedness and entailment.</title>
<date>2014</date>
<booktitle>In Proceedings of the 8th International Workshop on Semantic Evaluation (SemEval</booktitle>
<marker>Jimenez, Duenas, Baquero, Gelbukh, B´atiz, Mendiz´abal, 2014</marker>
<rawString>Jimenez, Sergio, George Duenas, Julia Baquero, Alexander Gelbukh, Av Juan Dios B´atiz, and Av Mendiz´abal. 2014. UNAL-NLP: Combining soft cardinality features for semantic textual similarity, relatedness and entailment. In Proceedings of the 8th International Workshop on Semantic Evaluation (SemEval 2014).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yoon Kim</author>
</authors>
<title>Convolutional neural networks for sentence classification.</title>
<date>2014</date>
<booktitle>In Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP).</booktitle>
<contexts>
<context position="21226" citStr="Kim, 2014" startWordPosition="3607" endWordPosition="3608">he two sentences are very related. Each label is the average of 10 ratings assigned by different human annotators. Here, we use the similarity model described in Sec. 4.2. For the similarity prediction network (Eqs. 15) we use a hidden layer of size 50. We 3Dependency parses produced by the Stanford Neural Network Dependency Parser (Chen and Manning, 2014). Method Fine-grained Binary RAE (Socher et al., 2013) 43.2 82.4 MV-RNN (Socher et al., 2013) 44.4 82.9 RNTN (Socher et al., 2013) 45.7 85.4 DCNN (Blunsom et al., 2014) 48.5 86.8 Paragraph-Vec (Le and Mikolov, 2014) 48.7 87.8 CNN-non-static (Kim, 2014) 48.0 87.2 CNN-multichannel (Kim, 2014) 47.4 88.1 DRNN (Irsoy and Cardie, 2014) 49.8 86.6 LSTM 46.4 (1.1) 84.9 (0.6) Bidirectional LSTM 49.1 (1.0) 87.5 (0.5) 2-layer LSTM 46.0 (1.3) 86.3 (0.6) 2-layer Bidirectional LSTM 48.5 (1.0) 87.2 (1.0) Dependency Tree-LSTM 48.4 (0.4) 85.7 (0.4) Constituency Tree-LSTM 43.9 (0.6) 82.0 (0.5) – randomly initialized vectors – Glove vectors, fixed 49.7 (0.4) 87.5 (0.8) – Glove vectors, tuned 51.0 (0.5) 88.0 (0.3) Table 2: Test set accuracies on the Stanford Sentiment Treebank. For our experiments, we report mean accuracies over 5 runs (standard deviations in p</context>
<context position="25452" citStr="Kim (2014)" startWordPosition="4227" endWordPosition="4228">odes vs. 319K for the Constituency Tree-LSTM. This difference is due to (1) the dependency representations containing fewer nodes than the corresponding constituency representations, and (2) the inability to match about 9% of the dependency nodes to a corresponding span in the training data. We found that updating the word representations during training (“fine-tuning” the word embedding) yields a significant boost in performance on the fine-grained classification subtask and gives a minor gain on the binary classification subtask (this finding is consistent with previous work on this task by Kim (2014)). These gains are to be expected since the Glove vectors used to initialize our word representations were not originally trained to capture sentiment. 6.2 Semantic Relatedness Our results are summarized in Table 3. Following Marelli et al. (2014), we use Pearson’s r, Spearman’s p and mean squared error (MSE) as evaluation metrics. The first two metrics are measures of correlation against human evaluations of semantic relatedness. We compare our models against a number of non-LSTM baselines. The mean vector baseline computes sentence representations as a mean of the representations of the cons</context>
</contexts>
<marker>Kim, 2014</marker>
<rawString>Kim, Yoon. 2014. Convolutional neural networks for sentence classification. In Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Dan Klein</author>
<author>Christopher D Manning</author>
</authors>
<title>Accurate unlexicalized parsing.</title>
<date>2003</date>
<booktitle>In Proceedings of the 41st Annual Meeting on Association for Computational Linguistics.</booktitle>
<contexts>
<context position="23121" citStr="Klein and Manning, 2003" startWordPosition="3887" endWordPosition="3890">ord representations were held fixed as we did not observe any significant improvement when the representations were tuned. Our models were trained using AdaGrad (Duchi et al., 2011) with a learning rate of 0.05 and a minibatch size of 25. The model parameters were regularized with a per-minibatch L2 regularization strength of 10−4. The sentiment classifier was additionally regularized using dropout (Srivastava et al., 2014) with a dropout rate of 0.5. We did not observe performance gains using dropout on the semantic relatedness task. 4Constituency parses produced by the Stanford PCFG Parser (Klein and Manning, 2003). 5Trained on 840 billion tokens of Common Crawl data, http://nlp.stanford.edu/projects/glove/. 1561 Method Pearson’s r Spearman’s p MSE Illinois-LH (Lai and Hockenmaier, 2014) 0.7993 0.7538 0.3692 UNAL-NLP (Jimenez et al., 2014) 0.8070 0.7489 0.3550 Meaning Factory (Bjerva et al., 2014) 0.8268 0.7721 0.3224 ECNU (Zhao et al., 2014) 0.8414 – – Mean vectors 0.7577 (0.0013) 0.6738 (0.0027) 0.4557 (0.0090) DT-RNN (Socher et al., 2014) 0.7923 (0.0070) 0.7319 (0.0071) 0.3822 (0.0137) SDT-RNN (Socher et al., 2014) 0.7900 (0.0042) 0.7304 (0.0076) 0.3848 (0.0074) LSTM 0.8528 (0.0031) 0.7911 (0.0059) 0</context>
</contexts>
<marker>Klein, Manning, 2003</marker>
<rawString>Klein, Dan and Christopher D Manning. 2003. Accurate unlexicalized parsing. In Proceedings of the 41st Annual Meeting on Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Alice Lai</author>
<author>Julia Hockenmaier</author>
</authors>
<title>IllinoisLH: A denotational and distributional approach to semantics.</title>
<date>2014</date>
<booktitle>In Proceedings of the 8th International Workshop on Semantic Evaluation (SemEval</booktitle>
<contexts>
<context position="23297" citStr="Lai and Hockenmaier, 2014" startWordPosition="3909" endWordPosition="3912">, 2011) with a learning rate of 0.05 and a minibatch size of 25. The model parameters were regularized with a per-minibatch L2 regularization strength of 10−4. The sentiment classifier was additionally regularized using dropout (Srivastava et al., 2014) with a dropout rate of 0.5. We did not observe performance gains using dropout on the semantic relatedness task. 4Constituency parses produced by the Stanford PCFG Parser (Klein and Manning, 2003). 5Trained on 840 billion tokens of Common Crawl data, http://nlp.stanford.edu/projects/glove/. 1561 Method Pearson’s r Spearman’s p MSE Illinois-LH (Lai and Hockenmaier, 2014) 0.7993 0.7538 0.3692 UNAL-NLP (Jimenez et al., 2014) 0.8070 0.7489 0.3550 Meaning Factory (Bjerva et al., 2014) 0.8268 0.7721 0.3224 ECNU (Zhao et al., 2014) 0.8414 – – Mean vectors 0.7577 (0.0013) 0.6738 (0.0027) 0.4557 (0.0090) DT-RNN (Socher et al., 2014) 0.7923 (0.0070) 0.7319 (0.0071) 0.3822 (0.0137) SDT-RNN (Socher et al., 2014) 0.7900 (0.0042) 0.7304 (0.0076) 0.3848 (0.0074) LSTM 0.8528 (0.0031) 0.7911 (0.0059) 0.2831 (0.0092) Bidirectional LSTM 0.8567 (0.0028) 0.7966 (0.0053) 0.2736 (0.0063) 2-layer LSTM 0.8515 (0.0066) 0.7896 (0.0088) 0.2838 (0.0150) 2-layer Bidirectional LSTM 0.8558</context>
<context position="26745" citStr="Lai and Hockenmaier, 2014" startWordPosition="4432" endWordPosition="4435">both compose vector representations for the nodes in a dependency tree as a sum over affinetransformed child vectors, followed by a nonlinearity. The SDT-RNN is an extension of the DTRNN that uses a separate transformation for each dependency relation. For each of our baselines, including the LSTM models, we use the similarity model described in Sec. 4.2. We also compare against four of the topperforming systems6 submitted to the SemEval 2014 semantic relatedness shared task: ECNU (Zhao et al., 2014), The Meaning Factory (Bjerva et al., 2014), UNAL-NLP (Jimenez et al., 2014), and Illinois-LH (Lai and Hockenmaier, 2014). These systems are heavily feature engineered, generally using a combination of surface form overlap features and lexical distance features derived from WordNet or the Paraphrase Database (Ganitkevitch et al., 2013). Our LSTM models outperform all these sys6We list the strongest results we were able to find for this task; in some cases, these results are stronger than the official performance by the team on the shared task. For example, the listed result by Zhao et al. (2014) is stronger than their submitted system’s Pearson correlation score of 0.8280. 1562 accuracy T 0 5 10 15 20 25 30 35 4</context>
</contexts>
<marker>Lai, Hockenmaier, 2014</marker>
<rawString>Lai, Alice and Julia Hockenmaier. 2014. IllinoisLH: A denotational and distributional approach to semantics. In Proceedings of the 8th International Workshop on Semantic Evaluation (SemEval 2014).</rawString>
</citation>
<citation valid="false">
<booktitle>Proceedings of the 31st International Conference on Machine Learning (ICML-14).</booktitle>
<marker></marker>
<rawString>Proceedings of the 31st International Conference on Machine Learning (ICML-14).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Marco Marelli</author>
<author>Luisa Bentivogli</author>
<author>Marco Baroni</author>
<author>Raffaella Bernardi</author>
<author>Stefano Menini</author>
<author>Roberto Zamparelli</author>
</authors>
<title>SemEval-2014 Task 1: Evaluation of compositional distributional semantic models on full sentences through semantic relatedness and textual entailment.</title>
<date>2014</date>
<booktitle>In Proceedings of the 8th International Workshop on Semantic Evaluation (SemEval</booktitle>
<contexts>
<context position="20302" citStr="Marelli et al., 2014" startWordPosition="3455" endWordPosition="3458">. 4.1 with both Dependency Tree-LSTMs (Sec. 3.1) and Constituency Tree-LSTMs (Sec. 3.2). The Constituency Tree-LSTMs are structured according to the provided parse trees. For the Dependency Tree-LSTMs, we produce dependency parses3 of each sentence; each node in a tree is given a sentiment label if its span matches a labeled span in the training set. 5.2 Semantic Relatedness For a given pair of sentences, the semantic relatedness task is to predict a human-generated rating of the similarity of the two sentences in meaning. We use the Sentences Involving Compositional Knowledge (SICK) dataset (Marelli et al., 2014), consisting of 9927 sentence pairs in a 4500/500/4927 train/dev/test split. The sentences are derived from existing image and video description datasets. Each sentence pair is annotated with a relatedness score y E [1, 5], with 1 indicating that the two sentences are completely unrelated, and 5 indicating that the two sentences are very related. Each label is the average of 10 ratings assigned by different human annotators. Here, we use the similarity model described in Sec. 4.2. For the similarity prediction network (Eqs. 15) we use a hidden layer of size 50. We 3Dependency parses produced b</context>
<context position="25699" citStr="Marelli et al. (2014)" startWordPosition="4264" endWordPosition="4267">ency nodes to a corresponding span in the training data. We found that updating the word representations during training (“fine-tuning” the word embedding) yields a significant boost in performance on the fine-grained classification subtask and gives a minor gain on the binary classification subtask (this finding is consistent with previous work on this task by Kim (2014)). These gains are to be expected since the Glove vectors used to initialize our word representations were not originally trained to capture sentiment. 6.2 Semantic Relatedness Our results are summarized in Table 3. Following Marelli et al. (2014), we use Pearson’s r, Spearman’s p and mean squared error (MSE) as evaluation metrics. The first two metrics are measures of correlation against human evaluations of semantic relatedness. We compare our models against a number of non-LSTM baselines. The mean vector baseline computes sentence representations as a mean of the representations of the constituent words. The DT-RNN and SDT-RNN models (Socher et al., 2014) both compose vector representations for the nodes in a dependency tree as a sum over affinetransformed child vectors, followed by a nonlinearity. The SDT-RNN is an extension of the</context>
</contexts>
<marker>Marelli, Bentivogli, Baroni, Bernardi, Menini, Zamparelli, 2014</marker>
<rawString>Marelli, Marco, Luisa Bentivogli, Marco Baroni, Raffaella Bernardi, Stefano Menini, and Roberto Zamparelli. 2014. SemEval-2014 Task 1: Evaluation of compositional distributional semantic models on full sentences through semantic relatedness and textual entailment. In Proceedings of the 8th International Workshop on Semantic Evaluation (SemEval 2014).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Tom´aˇs Mikolov</author>
</authors>
<title>Statistical Language Models Based on Neural Networks.</title>
<date>2012</date>
<tech>Ph.D. thesis,</tech>
<institution>Brno University of Technology.</institution>
<contexts>
<context position="1663" citStr="Mikolov, 2012" startWordPosition="232" endWordPosition="233">ction Most models for distributed representations of phrases and sentences—that is, models where realvalued vectors are used to represent meaning—fall into one of three classes: bag-of-words models, sequence models, and tree-structured models. In bag-of-words models, phrase and sentence representations are independent of word order; for example, they can be generated by averaging constituent word representations (Landauer and Dumais, 1997; Foltz et al., 1998). In contrast, sequence models construct sentence representations as an order-sensitive function of the sequence of tokens (Elman, 1990; Mikolov, 2012). Lastly, tree-structured models compose each phrase and sentence representation from its constituent subphrases according to a given syntactic structure over the sentence (Goller and Kuchler, 1996; Socher et al., 2011). Figure 1: Top: A chain-structured LSTM network. Bottom: A tree-structured LSTM network with arbitrary branching factor. Order-insensitive models are insufficient to fully capture the semantics of natural language due to their inability to account for differences in meaning as a result of differences in word order or syntactic structure (e.g., “cats climb trees” vs. “trees clim</context>
<context position="5558" citStr="Mikolov, 2012" startWordPosition="840" endWordPosition="841">both tasks. Implementations of our models and experiments are available at https:// github.com/stanfordnlp/treelstm. 2 Long Short-Term Memory Networks 2.1 Overview Recurrent neural networks (RNNs) are able to process input sequences of arbitrary length via the recursive application of a transition function on a hidden state vector ht. At each time step t, the hidden state ht is a function of the input vector xt that the network receives at time t and its previous hidden state ht−1. For example, the input vector xt could be a vector representation of the t-th word in body of text (Elman, 1990; Mikolov, 2012). The hidden state ht E Rd can be interpreted as a ddimensional distributed representation of the sequence of tokens observed up to time t. Commonly, the RNN transition function is an affine transformation followed by a pointwise nonlinearity such as the hyperbolic tangent function: ht = tanh (Wxt + Uht−1 + b) . Unfortunately, a problem with RNNs with transition functions of this form is that during training, components of the gradient vector can grow or decay exponentially over long sequences (Hochreiter, 1998; Bengio et al., 1994). This problem with exploding or vanishing gradients makes it </context>
</contexts>
<marker>Mikolov, 2012</marker>
<rawString>Mikolov, Tom´aˇs. 2012. Statistical Language Models Based on Neural Networks. Ph.D. thesis, Brno University of Technology.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Tomas Mikolov</author>
<author>Ilya Sutskever</author>
<author>Kai Chen</author>
<author>Greg S Corrado</author>
<author>Jeff Dean</author>
</authors>
<title>Distributed representations of words and phrases and their compositionality.</title>
<date>2013</date>
<booktitle>In Advances in Neural Information Processing Systems.</booktitle>
<contexts>
<context position="30881" citStr="Mikolov et al., 2013" startWordPosition="5120" endWordPosition="5123">rror bars have been omitted for clarity. We observe that while the Dependency TreeLSTM does significantly outperform its sequential counterparts on the relatedness task for longer sentences of length 13 to 15 (Fig. 4), it also achieves consistently strong performance on shorter sentences. This suggests that unlike sequential LSTMs, Tree-LSTMs are able to encode semantically-useful structural information in the sentence representations that they compose. 8 Related Work Distributed representations of words (Rumelhart et al., 1988; Collobert et al., 2011; Turian et al., 2010; Huang et al., 2012; Mikolov et al., 2013; 1563 Ranking by mean word vector cosine similarity Score a woman is slicing potatoes a woman is cutting potatoes 0.96 a woman is slicing herbs 0.92 a woman is slicing tofu 0.92 a boy is waving at some young runners from the ocean a man and a boy are standing at the bottom of some stairs , 0.92 which are outdoors a group of children in uniforms is standing at a gate and 0.90 one is kissing the mother a group of children in uniforms is standing at a gate and 0.90 there is no one kissing the mother two men are playing guitar some men are playing rugby 0.88 two men are talking 0.87 two dogs are </context>
<context position="32703" citStr="Mikolov et al., 2013" startWordPosition="5461" endWordPosition="5464">ys 4.01 with the case two men are dancing and singing in front of a crowd 4.00 Table 4: Most similar sentences from a 1000-sentence sample drawn from the SICK test set. The TreeLSTM model is able to pick up on more subtle relationships, such as that between “beach” and “ocean” in the second example. Pennington et al., 2014) have found wide applicability in a variety of NLP tasks. Following this success, there has been substantial interest in the area of learning distributed phrase and sentence representations (Mitchell and Lapata, 2010; Yessenalina and Cardie, 2011; Grefenstette et al., 2013; Mikolov et al., 2013), as well as distributed representations of longer bodies of text such as paragraphs and documents (Srivastava et al., 2013; Le and Mikolov, 2014). Our approach builds on recursive neural networks (Goller and Kuchler, 1996; Socher et al., 2011), which we abbreviate as Tree-RNNs in order to avoid confusion with recurrent neural networks. Under the Tree-RNN framework, the vector representation associated with each node of a tree is composed as a function of the vectors corresponding to the children of the node. The choice of composition function gives rise to numerous variants of this basic fram</context>
</contexts>
<marker>Mikolov, Sutskever, Chen, Corrado, Dean, 2013</marker>
<rawString>Mikolov, Tomas, Ilya Sutskever, Kai Chen, Greg S Corrado, and Jeff Dean. 2013. Distributed representations of words and phrases and their compositionality. In Advances in Neural Information Processing Systems.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jeff Mitchell</author>
<author>Mirella Lapata</author>
</authors>
<title>Composition in distributional models of semantics.</title>
<date>2010</date>
<journal>Cognitive science</journal>
<volume>34</volume>
<issue>8</issue>
<contexts>
<context position="32623" citStr="Mitchell and Lapata, 2010" startWordPosition="5449" endWordPosition="5452">ging and playing the guitar 4.08 the man is opening the guitar for donations and plays 4.01 with the case two men are dancing and singing in front of a crowd 4.00 Table 4: Most similar sentences from a 1000-sentence sample drawn from the SICK test set. The TreeLSTM model is able to pick up on more subtle relationships, such as that between “beach” and “ocean” in the second example. Pennington et al., 2014) have found wide applicability in a variety of NLP tasks. Following this success, there has been substantial interest in the area of learning distributed phrase and sentence representations (Mitchell and Lapata, 2010; Yessenalina and Cardie, 2011; Grefenstette et al., 2013; Mikolov et al., 2013), as well as distributed representations of longer bodies of text such as paragraphs and documents (Srivastava et al., 2013; Le and Mikolov, 2014). Our approach builds on recursive neural networks (Goller and Kuchler, 1996; Socher et al., 2011), which we abbreviate as Tree-RNNs in order to avoid confusion with recurrent neural networks. Under the Tree-RNN framework, the vector representation associated with each node of a tree is composed as a function of the vectors corresponding to the children of the node. The c</context>
</contexts>
<marker>Mitchell, Lapata, 2010</marker>
<rawString>Mitchell, Jeff and Mirella Lapata. 2010. Composition in distributional models of semantics. Cognitive science 34(8):1388–1429.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jeffrey Pennington</author>
<author>Richard Socher</author>
<author>Christopher D Manning</author>
</authors>
<title>Glove: Global vectors for word representation.</title>
<date>2014</date>
<booktitle>In Proceedings of the 2014 Conference on Empiricial Methods in Natural Language Processing (EMNLP).</booktitle>
<contexts>
<context position="22341" citStr="Pennington et al., 2014" startWordPosition="3767" endWordPosition="3770">ford Sentiment Treebank. For our experiments, we report mean accuracies over 5 runs (standard deviations in parentheses). Fine-grained: 5-class sentiment classification. Binary: positive/negative sentiment classification. produce binarized constituency parses4 and dependency parses of the sentences in the dataset for our Constituency Tree-LSTM and Dependency TreeLSTM models. 5.3 Hyperparameters and Training Details The hyperparameters for our models were tuned on the development set for each task. We initialized our word representations using publicly available 300-dimensional Glove vectors5 (Pennington et al., 2014). For the sentiment classification task, word representations were updated during training with a learning rate of 0.1. For the semantic relatedness task, word representations were held fixed as we did not observe any significant improvement when the representations were tuned. Our models were trained using AdaGrad (Duchi et al., 2011) with a learning rate of 0.05 and a minibatch size of 25. The model parameters were regularized with a per-minibatch L2 regularization strength of 10−4. The sentiment classifier was additionally regularized using dropout (Srivastava et al., 2014) with a dropout r</context>
<context position="32407" citStr="Pennington et al., 2014" startWordPosition="5415" endWordPosition="5418">l on the beach 3.79 a young boy wearing a red swimsuit is jumping out of a 3.37 blue kiddies pool the man is tossing a kid into the swimming pool that is 3.19 near the ocean two men are playing guitar the man is singing and playing the guitar 4.08 the man is opening the guitar for donations and plays 4.01 with the case two men are dancing and singing in front of a crowd 4.00 Table 4: Most similar sentences from a 1000-sentence sample drawn from the SICK test set. The TreeLSTM model is able to pick up on more subtle relationships, such as that between “beach” and “ocean” in the second example. Pennington et al., 2014) have found wide applicability in a variety of NLP tasks. Following this success, there has been substantial interest in the area of learning distributed phrase and sentence representations (Mitchell and Lapata, 2010; Yessenalina and Cardie, 2011; Grefenstette et al., 2013; Mikolov et al., 2013), as well as distributed representations of longer bodies of text such as paragraphs and documents (Srivastava et al., 2013; Le and Mikolov, 2014). Our approach builds on recursive neural networks (Goller and Kuchler, 1996; Socher et al., 2011), which we abbreviate as Tree-RNNs in order to avoid confusi</context>
</contexts>
<marker>Pennington, Socher, Manning, 2014</marker>
<rawString>Pennington, Jeffrey, Richard Socher, and Christopher D Manning. 2014. Glove: Global vectors for word representation. In Proceedings of the 2014 Conference on Empiricial Methods in Natural Language Processing (EMNLP).</rawString>
</citation>
<citation valid="true">
<authors>
<author>David E Rumelhart</author>
<author>Geoffrey E Hinton</author>
<author>Ronald J Williams</author>
</authors>
<title>Learning representations by back-propagating errors. Cognitive modeling 5.</title>
<date>1988</date>
<contexts>
<context position="30794" citStr="Rumelhart et al., 1988" startWordPosition="5104" endWordPosition="5107">d by the relevant taskspecific metric. Each data point is a mean score over 5 runs, and error bars have been omitted for clarity. We observe that while the Dependency TreeLSTM does significantly outperform its sequential counterparts on the relatedness task for longer sentences of length 13 to 15 (Fig. 4), it also achieves consistently strong performance on shorter sentences. This suggests that unlike sequential LSTMs, Tree-LSTMs are able to encode semantically-useful structural information in the sentence representations that they compose. 8 Related Work Distributed representations of words (Rumelhart et al., 1988; Collobert et al., 2011; Turian et al., 2010; Huang et al., 2012; Mikolov et al., 2013; 1563 Ranking by mean word vector cosine similarity Score a woman is slicing potatoes a woman is cutting potatoes 0.96 a woman is slicing herbs 0.92 a woman is slicing tofu 0.92 a boy is waving at some young runners from the ocean a man and a boy are standing at the bottom of some stairs , 0.92 which are outdoors a group of children in uniforms is standing at a gate and 0.90 one is kissing the mother a group of children in uniforms is standing at a gate and 0.90 there is no one kissing the mother two men ar</context>
</contexts>
<marker>Rumelhart, Hinton, Williams, 1988</marker>
<rawString>Rumelhart, David E, Geoffrey E Hinton, and Ronald J Williams. 1988. Learning representations by back-propagating errors. Cognitive modeling 5.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Richard Socher</author>
<author>Brody Huval</author>
<author>Christopher D Manning</author>
<author>Andrew Y Ng</author>
</authors>
<title>Semantic compositionality through recursive matrixvector spaces.</title>
<date>2012</date>
<booktitle>In Proceedings of the 2012 Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language Learning (EMNLP).</booktitle>
<contexts>
<context position="33461" citStr="Socher et al., 2012" startWordPosition="5587" endWordPosition="5590">v, 2014). Our approach builds on recursive neural networks (Goller and Kuchler, 1996; Socher et al., 2011), which we abbreviate as Tree-RNNs in order to avoid confusion with recurrent neural networks. Under the Tree-RNN framework, the vector representation associated with each node of a tree is composed as a function of the vectors corresponding to the children of the node. The choice of composition function gives rise to numerous variants of this basic framework. TreeRNNs have been used to parse images of natural scenes (Socher et al., 2011), compose phrase representations from word vectors (Socher et al., 2012), and classify the sentiment polarity of sentences (Socher et al., 2013). 9 Conclusion In this paper, we introduced a generalization of LSTMs to tree-structured network topologies. The Tree-LSTM architecture can be applied to trees with arbitrary branching factor. We demonstrated the effectiveness of the Tree-LSTM by applying the architecture in two tasks: semantic relatedness and sentiment classification, outperforming existing systems on both. Controlling for model dimensionality, we demonstrated that Tree-LSTM models are able to outperform their sequential counterparts. Our results suggest </context>
</contexts>
<marker>Socher, Huval, Manning, Ng, 2012</marker>
<rawString>Socher, Richard, Brody Huval, Christopher D Manning, and Andrew Y Ng. 2012. Semantic compositionality through recursive matrixvector spaces. In Proceedings of the 2012 Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language Learning (EMNLP).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Richard Socher</author>
<author>Andrej Karpathy</author>
<author>Quoc V Le</author>
<author>Christopher D Manning</author>
<author>Andrew Y Ng</author>
</authors>
<title>Grounded compositional semantics for finding and describing images with sentences.</title>
<date>2014</date>
<journal>Transactions of the Association for Computational Linguistics</journal>
<volume>2</volume>
<contexts>
<context position="23556" citStr="Socher et al., 2014" startWordPosition="3950" endWordPosition="3953">out rate of 0.5. We did not observe performance gains using dropout on the semantic relatedness task. 4Constituency parses produced by the Stanford PCFG Parser (Klein and Manning, 2003). 5Trained on 840 billion tokens of Common Crawl data, http://nlp.stanford.edu/projects/glove/. 1561 Method Pearson’s r Spearman’s p MSE Illinois-LH (Lai and Hockenmaier, 2014) 0.7993 0.7538 0.3692 UNAL-NLP (Jimenez et al., 2014) 0.8070 0.7489 0.3550 Meaning Factory (Bjerva et al., 2014) 0.8268 0.7721 0.3224 ECNU (Zhao et al., 2014) 0.8414 – – Mean vectors 0.7577 (0.0013) 0.6738 (0.0027) 0.4557 (0.0090) DT-RNN (Socher et al., 2014) 0.7923 (0.0070) 0.7319 (0.0071) 0.3822 (0.0137) SDT-RNN (Socher et al., 2014) 0.7900 (0.0042) 0.7304 (0.0076) 0.3848 (0.0074) LSTM 0.8528 (0.0031) 0.7911 (0.0059) 0.2831 (0.0092) Bidirectional LSTM 0.8567 (0.0028) 0.7966 (0.0053) 0.2736 (0.0063) 2-layer LSTM 0.8515 (0.0066) 0.7896 (0.0088) 0.2838 (0.0150) 2-layer Bidirectional LSTM 0.8558 (0.0014) 0.7965 (0.0018) 0.2762 (0.0020) Constituency Tree-LSTM 0.8582 (0.0038) 0.7966 (0.0053) 0.2734 (0.0108) Dependency Tree-LSTM 0.8676 (0.0030) 0.8083 (0.0042) 0.2532 (0.0052) Table 3: Test set results on the SICK semantic relatedness subtask. For our e</context>
<context position="26118" citStr="Socher et al., 2014" startWordPosition="4330" endWordPosition="4333">ove vectors used to initialize our word representations were not originally trained to capture sentiment. 6.2 Semantic Relatedness Our results are summarized in Table 3. Following Marelli et al. (2014), we use Pearson’s r, Spearman’s p and mean squared error (MSE) as evaluation metrics. The first two metrics are measures of correlation against human evaluations of semantic relatedness. We compare our models against a number of non-LSTM baselines. The mean vector baseline computes sentence representations as a mean of the representations of the constituent words. The DT-RNN and SDT-RNN models (Socher et al., 2014) both compose vector representations for the nodes in a dependency tree as a sum over affinetransformed child vectors, followed by a nonlinearity. The SDT-RNN is an extension of the DTRNN that uses a separate transformation for each dependency relation. For each of our baselines, including the LSTM models, we use the similarity model described in Sec. 4.2. We also compare against four of the topperforming systems6 submitted to the SemEval 2014 semantic relatedness shared task: ECNU (Zhao et al., 2014), The Meaning Factory (Bjerva et al., 2014), UNAL-NLP (Jimenez et al., 2014), and Illinois-LH </context>
</contexts>
<marker>Socher, Karpathy, Le, Manning, Ng, 2014</marker>
<rawString>Socher, Richard, Andrej Karpathy, Quoc V Le, Christopher D Manning, and Andrew Y Ng. 2014. Grounded compositional semantics for finding and describing images with sentences. Transactions of the Association for Computational Linguistics 2.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Richard Socher</author>
<author>Cliff C Lin</author>
<author>Chris Manning</author>
<author>Andrew Y Ng</author>
</authors>
<title>Parsing natural scenes and natural language with recursive neural networks.</title>
<date>2011</date>
<booktitle>In Proceedings of the 28th International Conference on Machine Learning (ICML-11).</booktitle>
<contexts>
<context position="1882" citStr="Socher et al., 2011" startWordPosition="261" endWordPosition="264">s, and tree-structured models. In bag-of-words models, phrase and sentence representations are independent of word order; for example, they can be generated by averaging constituent word representations (Landauer and Dumais, 1997; Foltz et al., 1998). In contrast, sequence models construct sentence representations as an order-sensitive function of the sequence of tokens (Elman, 1990; Mikolov, 2012). Lastly, tree-structured models compose each phrase and sentence representation from its constituent subphrases according to a given syntactic structure over the sentence (Goller and Kuchler, 1996; Socher et al., 2011). Figure 1: Top: A chain-structured LSTM network. Bottom: A tree-structured LSTM network with arbitrary branching factor. Order-insensitive models are insufficient to fully capture the semantics of natural language due to their inability to account for differences in meaning as a result of differences in word order or syntactic structure (e.g., “cats climb trees” vs. “trees climb cats”). We therefore turn to ordersensitive sequential or tree-structured models. In particular, tree-structured models are a linguistically attractive option due to their relation to syntactic interpretations of sent</context>
<context position="32947" citStr="Socher et al., 2011" startWordPosition="5500" endWordPosition="5503">that between “beach” and “ocean” in the second example. Pennington et al., 2014) have found wide applicability in a variety of NLP tasks. Following this success, there has been substantial interest in the area of learning distributed phrase and sentence representations (Mitchell and Lapata, 2010; Yessenalina and Cardie, 2011; Grefenstette et al., 2013; Mikolov et al., 2013), as well as distributed representations of longer bodies of text such as paragraphs and documents (Srivastava et al., 2013; Le and Mikolov, 2014). Our approach builds on recursive neural networks (Goller and Kuchler, 1996; Socher et al., 2011), which we abbreviate as Tree-RNNs in order to avoid confusion with recurrent neural networks. Under the Tree-RNN framework, the vector representation associated with each node of a tree is composed as a function of the vectors corresponding to the children of the node. The choice of composition function gives rise to numerous variants of this basic framework. TreeRNNs have been used to parse images of natural scenes (Socher et al., 2011), compose phrase representations from word vectors (Socher et al., 2012), and classify the sentiment polarity of sentences (Socher et al., 2013). 9 Conclusion</context>
</contexts>
<marker>Socher, Lin, Manning, Ng, 2011</marker>
<rawString>Socher, Richard, Cliff C Lin, Chris Manning, and Andrew Y Ng. 2011. Parsing natural scenes and natural language with recursive neural networks. In Proceedings of the 28th International Conference on Machine Learning (ICML-11).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Richard Socher</author>
<author>Alex Perelygin</author>
<author>Jean Y Wu</author>
<author>Jason Chuang</author>
<author>Christopher D Manning</author>
<author>Andrew Y Ng</author>
<author>Christopher Potts</author>
</authors>
<title>Recursive deep models for semantic compositionality over a sentiment treebank.</title>
<date>2013</date>
<booktitle>In Proceedings of the 2013 Conference on Empirical Methods in Natural Language Processing (EMNLP).</booktitle>
<contexts>
<context position="17936" citStr="Socher et al., 2013" startWordPosition="3083" endWordPosition="3086">cript k indicates the kth sentence pair. 5 Experiments We evaluate our Tree-LSTM architectures on two tasks: (1) sentiment classification of sentences sampled from movie reviews and (2) predicting the semantic relatedness of sentence pairs. In comparing our Tree-LSTMs against sequential LSTMs, we control for the number of LSTM parameters by varying the dimensionality of the hidden states2. Details for each model variant are summarized in Table 1. 5.1 Sentiment Classification In this task, we predict the sentiment of sentences sampled from movie reviews. We use the Stanford Sentiment Treebank (Socher et al., 2013). There are two subtasks: binary classification of sentences, and fine-grained classification over five classes: very negative, negative, neutral, positive, and very positive. We use the standard train/dev/test splits of 6920/872/1821 for the binary classification subtask and 8544/1101/2210 for the fine-grained classification subtask (there are fewer examples for the binary subtask since 1In the subsequent experiments, we found that optimizing this objective yielded better performance than a mean squared error objective. 2For our Bidirectional LSTMs, the parameters of the forward and backward </context>
<context position="21028" citStr="Socher et al., 2013" startWordPosition="3572" endWordPosition="3575">m existing image and video description datasets. Each sentence pair is annotated with a relatedness score y E [1, 5], with 1 indicating that the two sentences are completely unrelated, and 5 indicating that the two sentences are very related. Each label is the average of 10 ratings assigned by different human annotators. Here, we use the similarity model described in Sec. 4.2. For the similarity prediction network (Eqs. 15) we use a hidden layer of size 50. We 3Dependency parses produced by the Stanford Neural Network Dependency Parser (Chen and Manning, 2014). Method Fine-grained Binary RAE (Socher et al., 2013) 43.2 82.4 MV-RNN (Socher et al., 2013) 44.4 82.9 RNTN (Socher et al., 2013) 45.7 85.4 DCNN (Blunsom et al., 2014) 48.5 86.8 Paragraph-Vec (Le and Mikolov, 2014) 48.7 87.8 CNN-non-static (Kim, 2014) 48.0 87.2 CNN-multichannel (Kim, 2014) 47.4 88.1 DRNN (Irsoy and Cardie, 2014) 49.8 86.6 LSTM 46.4 (1.1) 84.9 (0.6) Bidirectional LSTM 49.1 (1.0) 87.5 (0.5) 2-layer LSTM 46.0 (1.3) 86.3 (0.6) 2-layer Bidirectional LSTM 48.5 (1.0) 87.2 (1.0) Dependency Tree-LSTM 48.4 (0.4) 85.7 (0.4) Constituency Tree-LSTM 43.9 (0.6) 82.0 (0.5) – randomly initialized vectors – Glove vectors, fixed 49.7 (0.4) 87.5 (0</context>
<context position="33533" citStr="Socher et al., 2013" startWordPosition="5599" endWordPosition="5602">uchler, 1996; Socher et al., 2011), which we abbreviate as Tree-RNNs in order to avoid confusion with recurrent neural networks. Under the Tree-RNN framework, the vector representation associated with each node of a tree is composed as a function of the vectors corresponding to the children of the node. The choice of composition function gives rise to numerous variants of this basic framework. TreeRNNs have been used to parse images of natural scenes (Socher et al., 2011), compose phrase representations from word vectors (Socher et al., 2012), and classify the sentiment polarity of sentences (Socher et al., 2013). 9 Conclusion In this paper, we introduced a generalization of LSTMs to tree-structured network topologies. The Tree-LSTM architecture can be applied to trees with arbitrary branching factor. We demonstrated the effectiveness of the Tree-LSTM by applying the architecture in two tasks: semantic relatedness and sentiment classification, outperforming existing systems on both. Controlling for model dimensionality, we demonstrated that Tree-LSTM models are able to outperform their sequential counterparts. Our results suggest further lines of work in characterizing the role of structure in produci</context>
</contexts>
<marker>Socher, Perelygin, Wu, Chuang, Manning, Ng, Potts, 2013</marker>
<rawString>Socher, Richard, Alex Perelygin, Jean Y Wu, Jason Chuang, Christopher D Manning, Andrew Y Ng, and Christopher Potts. 2013. Recursive deep models for semantic compositionality over a sentiment treebank. In Proceedings of the 2013 Conference on Empirical Methods in Natural Language Processing (EMNLP).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nitish Srivastava</author>
<author>Geoffrey Hinton</author>
</authors>
<title>Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdinov.</title>
<date>2014</date>
<journal>Journal of Machine Learning Research</journal>
<pages>15--1929</pages>
<marker>Srivastava, Hinton, 2014</marker>
<rawString>Srivastava, Nitish, Geoffrey Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdinov. 2014. Dropout: A simple way to prevent neural networks from overfitting. Journal of Machine Learning Research 15:1929–1958.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nitish Srivastava</author>
<author>Ruslan Salakhutdinov</author>
<author>Geoffrey Hinton</author>
</authors>
<title>Modeling documents with a Deep Boltzmann Machine.</title>
<date>2013</date>
<booktitle>In Uncertainty in Artificial Intelligence.</booktitle>
<contexts>
<context position="32826" citStr="Srivastava et al., 2013" startWordPosition="5480" endWordPosition="5483">0-sentence sample drawn from the SICK test set. The TreeLSTM model is able to pick up on more subtle relationships, such as that between “beach” and “ocean” in the second example. Pennington et al., 2014) have found wide applicability in a variety of NLP tasks. Following this success, there has been substantial interest in the area of learning distributed phrase and sentence representations (Mitchell and Lapata, 2010; Yessenalina and Cardie, 2011; Grefenstette et al., 2013; Mikolov et al., 2013), as well as distributed representations of longer bodies of text such as paragraphs and documents (Srivastava et al., 2013; Le and Mikolov, 2014). Our approach builds on recursive neural networks (Goller and Kuchler, 1996; Socher et al., 2011), which we abbreviate as Tree-RNNs in order to avoid confusion with recurrent neural networks. Under the Tree-RNN framework, the vector representation associated with each node of a tree is composed as a function of the vectors corresponding to the children of the node. The choice of composition function gives rise to numerous variants of this basic framework. TreeRNNs have been used to parse images of natural scenes (Socher et al., 2011), compose phrase representations from</context>
</contexts>
<marker>Srivastava, Salakhutdinov, Hinton, 2013</marker>
<rawString>Srivastava, Nitish, Ruslan Salakhutdinov, and Geoffrey Hinton. 2013. Modeling documents with a Deep Boltzmann Machine. In Uncertainty in Artificial Intelligence.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ilya Sutskever</author>
<author>Oriol Vinyals</author>
<author>Quoc Le</author>
</authors>
<title>Sequence to sequence learning with neural networks.</title>
<date>2014</date>
<booktitle>In Advances in Neural Information Processing Systems.</booktitle>
<contexts>
<context position="3808" citStr="Sutskever et al., 2014" startWordPosition="558" endWordPosition="561">rence on Natural Language Processing, pages 1556–1566, Beijing, China, July 26-31, 2015. c�2015 Association for Computational Linguistics (RNNs) are a natural choice for sequence modeling tasks. Recently, RNNs with Long Short-Term Memory (LSTM) units (Hochreiter and Schmidhuber, 1997) have re-emerged as a popular architecture due to their representational power and effectiveness at capturing long-term dependencies. LSTM networks, which we review in Sec. 2, have been successfully applied to a variety of sequence modeling and prediction tasks, notably machine translation (Bahdanau et al., 2015; Sutskever et al., 2014), speech recognition (Graves et al., 2013), image caption generation (Vinyals et al., 2014), and program execution (Zaremba and Sutskever, 2014). In this paper, we introduce a generalization of the standard LSTM architecture to tree-structured network topologies and show its superiority for representing sentence meaning over a sequential LSTM. While the standard LSTM composes its hidden state from the input at the current time step and the hidden state of the LSTM unit in the previous time step, the tree-structured LSTM, or Tree-LSTM, composes its state from an input vector and the hidden stat</context>
<context position="8484" citStr="Sutskever et al., 2014" startWordPosition="1368" endWordPosition="1371">ked or deep LSTM). Bidirectional LSTM. A Bidirectional LSTM (Graves et al., 2013) consists of two LSTMs that are run in parallel: one on the input sequence and the other on the reverse of the input sequence. At each time step, the hidden state of the Bidirectional LSTM is the concatenation of the forward and backward hidden states. This setup allows the hidden state to capture both past and future information. Multilayer LSTM. In Multilayer LSTM architectures, the hidden state of an LSTM unit in layer ` is used as input to the LSTM unit in layer `+1 in the same time step (Graves et al., 2013; Sutskever et al., 2014; Zaremba and Sutskever, 2014). Here, the idea is to let the higher layers capture longerterm dependencies of the input sequence. These two variants can be combined as a Multilayer Bidirectional LSTM (Graves et al., 2013). 3 Tree-Structured LSTMs A limitation of the LSTM architectures described in the previous section is that they only allow for strictly sequential information propagation. Here, we propose two natural extensions to the basic LSTM architecture: the Child-Sum Tree-LSTM and the N-ary Tree-LSTM. Both variants allow for richer network topologies where each LSTM unit is able to inco</context>
</contexts>
<marker>Sutskever, Vinyals, Le, 2014</marker>
<rawString>Sutskever, Ilya, Oriol Vinyals, and Quoc VV Le. 2014. Sequence to sequence learning with neural networks. In Advances in Neural Information Processing Systems.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Joseph Turian</author>
<author>Lev Ratinov</author>
<author>Yoshua Bengio</author>
</authors>
<title>Word representations: A simple and general method for semi-supervised learning.</title>
<date>2010</date>
<booktitle>In Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics.</booktitle>
<contexts>
<context position="30839" citStr="Turian et al., 2010" startWordPosition="5112" endWordPosition="5115"> point is a mean score over 5 runs, and error bars have been omitted for clarity. We observe that while the Dependency TreeLSTM does significantly outperform its sequential counterparts on the relatedness task for longer sentences of length 13 to 15 (Fig. 4), it also achieves consistently strong performance on shorter sentences. This suggests that unlike sequential LSTMs, Tree-LSTMs are able to encode semantically-useful structural information in the sentence representations that they compose. 8 Related Work Distributed representations of words (Rumelhart et al., 1988; Collobert et al., 2011; Turian et al., 2010; Huang et al., 2012; Mikolov et al., 2013; 1563 Ranking by mean word vector cosine similarity Score a woman is slicing potatoes a woman is cutting potatoes 0.96 a woman is slicing herbs 0.92 a woman is slicing tofu 0.92 a boy is waving at some young runners from the ocean a man and a boy are standing at the bottom of some stairs , 0.92 which are outdoors a group of children in uniforms is standing at a gate and 0.90 one is kissing the mother a group of children in uniforms is standing at a gate and 0.90 there is no one kissing the mother two men are playing guitar some men are playing rugby 0</context>
</contexts>
<marker>Turian, Ratinov, Bengio, 2010</marker>
<rawString>Turian, Joseph, Lev Ratinov, and Yoshua Bengio. 2010. Word representations: A simple and general method for semi-supervised learning. In Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Oriol Vinyals</author>
<author>Alexander Toshev</author>
<author>Samy Bengio</author>
<author>Dumitru Erhan</author>
</authors>
<title>Show and tell: A neural image caption generator. arXiv preprint arXiv:1411.4555 .</title>
<date>2014</date>
<contexts>
<context position="3899" citStr="Vinyals et al., 2014" startWordPosition="571" endWordPosition="574">15 Association for Computational Linguistics (RNNs) are a natural choice for sequence modeling tasks. Recently, RNNs with Long Short-Term Memory (LSTM) units (Hochreiter and Schmidhuber, 1997) have re-emerged as a popular architecture due to their representational power and effectiveness at capturing long-term dependencies. LSTM networks, which we review in Sec. 2, have been successfully applied to a variety of sequence modeling and prediction tasks, notably machine translation (Bahdanau et al., 2015; Sutskever et al., 2014), speech recognition (Graves et al., 2013), image caption generation (Vinyals et al., 2014), and program execution (Zaremba and Sutskever, 2014). In this paper, we introduce a generalization of the standard LSTM architecture to tree-structured network topologies and show its superiority for representing sentence meaning over a sequential LSTM. While the standard LSTM composes its hidden state from the input at the current time step and the hidden state of the LSTM unit in the previous time step, the tree-structured LSTM, or Tree-LSTM, composes its state from an input vector and the hidden states of arbitrarily many child units. The standard LSTM can then be considered a special case</context>
</contexts>
<marker>Vinyals, Toshev, Bengio, Erhan, 2014</marker>
<rawString>Vinyals, Oriol, Alexander Toshev, Samy Bengio, and Dumitru Erhan. 2014. Show and tell: A neural image caption generator. arXiv preprint arXiv:1411.4555 .</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ainur Yessenalina</author>
<author>Claire Cardie</author>
</authors>
<title>Compositional matrix-space models for sentiment analysis.</title>
<date>2011</date>
<booktitle>In Proceedings of the 2011 Conference on Empirical Methods in Natural Language Processing (EMNLP).</booktitle>
<contexts>
<context position="32653" citStr="Yessenalina and Cardie, 2011" startWordPosition="5453" endWordPosition="5456"> 4.08 the man is opening the guitar for donations and plays 4.01 with the case two men are dancing and singing in front of a crowd 4.00 Table 4: Most similar sentences from a 1000-sentence sample drawn from the SICK test set. The TreeLSTM model is able to pick up on more subtle relationships, such as that between “beach” and “ocean” in the second example. Pennington et al., 2014) have found wide applicability in a variety of NLP tasks. Following this success, there has been substantial interest in the area of learning distributed phrase and sentence representations (Mitchell and Lapata, 2010; Yessenalina and Cardie, 2011; Grefenstette et al., 2013; Mikolov et al., 2013), as well as distributed representations of longer bodies of text such as paragraphs and documents (Srivastava et al., 2013; Le and Mikolov, 2014). Our approach builds on recursive neural networks (Goller and Kuchler, 1996; Socher et al., 2011), which we abbreviate as Tree-RNNs in order to avoid confusion with recurrent neural networks. Under the Tree-RNN framework, the vector representation associated with each node of a tree is composed as a function of the vectors corresponding to the children of the node. The choice of composition function </context>
</contexts>
<marker>Yessenalina, Cardie, 2011</marker>
<rawString>Yessenalina, Ainur and Claire Cardie. 2011. Compositional matrix-space models for sentiment analysis. In Proceedings of the 2011 Conference on Empirical Methods in Natural Language Processing (EMNLP).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Wojciech Zaremba</author>
<author>Ilya Sutskever</author>
</authors>
<title>Learning to execute. arXiv preprint arXiv:1410.4615 .</title>
<date>2014</date>
<contexts>
<context position="3952" citStr="Zaremba and Sutskever, 2014" startWordPosition="578" endWordPosition="581">RNNs) are a natural choice for sequence modeling tasks. Recently, RNNs with Long Short-Term Memory (LSTM) units (Hochreiter and Schmidhuber, 1997) have re-emerged as a popular architecture due to their representational power and effectiveness at capturing long-term dependencies. LSTM networks, which we review in Sec. 2, have been successfully applied to a variety of sequence modeling and prediction tasks, notably machine translation (Bahdanau et al., 2015; Sutskever et al., 2014), speech recognition (Graves et al., 2013), image caption generation (Vinyals et al., 2014), and program execution (Zaremba and Sutskever, 2014). In this paper, we introduce a generalization of the standard LSTM architecture to tree-structured network topologies and show its superiority for representing sentence meaning over a sequential LSTM. While the standard LSTM composes its hidden state from the input at the current time step and the hidden state of the LSTM unit in the previous time step, the tree-structured LSTM, or Tree-LSTM, composes its state from an input vector and the hidden states of arbitrarily many child units. The standard LSTM can then be considered a special case of the Tree-LSTM where each internal node has exactl</context>
<context position="6554" citStr="Zaremba and Sutskever (2014)" startWordPosition="1001" endWordPosition="1004">ctions of this form is that during training, components of the gradient vector can grow or decay exponentially over long sequences (Hochreiter, 1998; Bengio et al., 1994). This problem with exploding or vanishing gradients makes it difficult for the RNN model to learn long-distance correlations in a sequence. The LSTM architecture (Hochreiter and Schmidhuber, 1997) addresses this problem of learning long-term dependencies by introducing a memory cell that is able to preserve state over long periods of time. While numerous LSTM variants have been described, here we describe the version used by Zaremba and Sutskever (2014). We define the LSTM unit at each time step t to be a collection of vectors in Rd: an input gate it, a forget gate ft, an output gate ot, a memory cell ct and a hidden state ht. The entries of the gating vectors it, ft and ot are in [0, 1]. We refer to d as the memory dimension of the LSTM. The LSTM transition equations are the following: (W(i)xt + U(i)ht−1 + b(i)) it = Q , (1) ( W (f)xt + U(f)ht−1 + b(f)) ft = Q , ( W (o)xt + U(o)ht−1 + b(o)) ot = Q , (ut = tanh W(u)xt + U(u) ct=it Out+ft O ct−1, ht = ot O tanh(ct), where xt is the input at the current time step, Q denotes the logistic sigmoi</context>
<context position="8514" citStr="Zaremba and Sutskever, 2014" startWordPosition="1372" endWordPosition="1375">ectional LSTM. A Bidirectional LSTM (Graves et al., 2013) consists of two LSTMs that are run in parallel: one on the input sequence and the other on the reverse of the input sequence. At each time step, the hidden state of the Bidirectional LSTM is the concatenation of the forward and backward hidden states. This setup allows the hidden state to capture both past and future information. Multilayer LSTM. In Multilayer LSTM architectures, the hidden state of an LSTM unit in layer ` is used as input to the LSTM unit in layer `+1 in the same time step (Graves et al., 2013; Sutskever et al., 2014; Zaremba and Sutskever, 2014). Here, the idea is to let the higher layers capture longerterm dependencies of the input sequence. These two variants can be combined as a Multilayer Bidirectional LSTM (Graves et al., 2013). 3 Tree-Structured LSTMs A limitation of the LSTM architectures described in the previous section is that they only allow for strictly sequential information propagation. Here, we propose two natural extensions to the basic LSTM architecture: the Child-Sum Tree-LSTM and the N-ary Tree-LSTM. Both variants allow for richer network topologies where each LSTM unit is able to incorporate information from multi</context>
</contexts>
<marker>Zaremba, Sutskever, 2014</marker>
<rawString>Zaremba, Wojciech and Ilya Sutskever. 2014. Learning to execute. arXiv preprint arXiv:1410.4615 .</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jiang Zhao</author>
<author>Tian Tian Zhu</author>
<author>Man Lan</author>
</authors>
<title>ECNU: One stone two birds: Ensemble of heterogenous measures for semantic relatedness and textual entailment.</title>
<date>2014</date>
<booktitle>In Proceedings of the 8th International Workshop on Semantic Evaluation (SemEval</booktitle>
<contexts>
<context position="23455" citStr="Zhao et al., 2014" startWordPosition="3934" endWordPosition="3937">ntiment classifier was additionally regularized using dropout (Srivastava et al., 2014) with a dropout rate of 0.5. We did not observe performance gains using dropout on the semantic relatedness task. 4Constituency parses produced by the Stanford PCFG Parser (Klein and Manning, 2003). 5Trained on 840 billion tokens of Common Crawl data, http://nlp.stanford.edu/projects/glove/. 1561 Method Pearson’s r Spearman’s p MSE Illinois-LH (Lai and Hockenmaier, 2014) 0.7993 0.7538 0.3692 UNAL-NLP (Jimenez et al., 2014) 0.8070 0.7489 0.3550 Meaning Factory (Bjerva et al., 2014) 0.8268 0.7721 0.3224 ECNU (Zhao et al., 2014) 0.8414 – – Mean vectors 0.7577 (0.0013) 0.6738 (0.0027) 0.4557 (0.0090) DT-RNN (Socher et al., 2014) 0.7923 (0.0070) 0.7319 (0.0071) 0.3822 (0.0137) SDT-RNN (Socher et al., 2014) 0.7900 (0.0042) 0.7304 (0.0076) 0.3848 (0.0074) LSTM 0.8528 (0.0031) 0.7911 (0.0059) 0.2831 (0.0092) Bidirectional LSTM 0.8567 (0.0028) 0.7966 (0.0053) 0.2736 (0.0063) 2-layer LSTM 0.8515 (0.0066) 0.7896 (0.0088) 0.2838 (0.0150) 2-layer Bidirectional LSTM 0.8558 (0.0014) 0.7965 (0.0018) 0.2762 (0.0020) Constituency Tree-LSTM 0.8582 (0.0038) 0.7966 (0.0053) 0.2734 (0.0108) Dependency Tree-LSTM 0.8676 (0.0030) 0.8083 (</context>
<context position="26624" citStr="Zhao et al., 2014" startWordPosition="4414" endWordPosition="4417">s as a mean of the representations of the constituent words. The DT-RNN and SDT-RNN models (Socher et al., 2014) both compose vector representations for the nodes in a dependency tree as a sum over affinetransformed child vectors, followed by a nonlinearity. The SDT-RNN is an extension of the DTRNN that uses a separate transformation for each dependency relation. For each of our baselines, including the LSTM models, we use the similarity model described in Sec. 4.2. We also compare against four of the topperforming systems6 submitted to the SemEval 2014 semantic relatedness shared task: ECNU (Zhao et al., 2014), The Meaning Factory (Bjerva et al., 2014), UNAL-NLP (Jimenez et al., 2014), and Illinois-LH (Lai and Hockenmaier, 2014). These systems are heavily feature engineered, generally using a combination of surface form overlap features and lexical distance features derived from WordNet or the Paraphrase Database (Ganitkevitch et al., 2013). Our LSTM models outperform all these sys6We list the strongest results we were able to find for this task; in some cases, these results are stronger than the official performance by the team on the shared task. For example, the listed result by Zhao et al. (201</context>
</contexts>
<marker>Zhao, Zhu, Lan, 2014</marker>
<rawString>Zhao, Jiang, Tian Tian Zhu, and Man Lan. 2014. ECNU: One stone two birds: Ensemble of heterogenous measures for semantic relatedness and textual entailment. In Proceedings of the 8th International Workshop on Semantic Evaluation (SemEval 2014).</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>