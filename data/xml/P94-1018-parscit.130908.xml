<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<title confidence="0.997341">
A Psycholinguistically Motivated Parser for CCG
</title>
<author confidence="0.949088">
Michael Niv*
</author>
<affiliation confidence="0.833555">
Technion — Israel Institute of Technology
</affiliation>
<address confidence="0.766619">
Haifa, Israel
</address>
<email confidence="0.786001">
Internet: nivOlinc.cis.upenn.edu
</email>
<sectionHeader confidence="0.987872" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999970333333333">
Considering the speed in which humans resolve syn-
tactic ambiguity, and the overwhelming evidence
that syntactic ambiguity is resolved through selec-
tion of the analysis whose interpretation is the most
&apos;sensible&apos;, one comes to the conclusion that inter-
pretation, hence parsing take place incrementally,
just about every word. Considerations of parsimony
in the theory of the syntactic processor lead one to
explore the simplest of parsers: one which repre-
sents only analyses as defined by the grammar and
no other information.
Toward this aim of a simple, incremental parser
I explore the proposal that the competence gram-
mar is a Combinatory Categorial Grammar (CCG).
I address the problem of the proliferating analyses
that stem from CCG&apos;s associativity of derivation.
My solution involves maintaining only the max-
imally incremental analysis and, when necessary,
computing the maximally right-branching analysis.
I use results from the study of rewrite systems to
show that this computation is efficient.
</bodyText>
<sectionHeader confidence="0.999471" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.924041941176471">
The aim of this paper is to work towards a compu-
tational model of how humans syntactically process
the language that they hear and read. The endpoint
of this enterprise is a precise characterization of the
process that humans follow, getting details such as
timing and garden pathing exactly right.
*The research reported here was conducted as part
of my Ph.D. thesis work at the University of Pennsyl-
vania and supported by the following grants: DARPA
N00014-904-1863, ARO DAAL03-89-C-0031, NSF IRI
90-16592, Ben Franklin 91S.3078C-1. Preparation of
this paper was supported by a postdoctoral fellowship
at the Technion in Israel. I am grateful to Mark Hepple,
Mitch Marcus, Mark Steedman, Val Tannen, and Henry
Thompson for helpful suggestions, and to Jeff Siskind
for help with typesetting CCG derivations. Any errors
are my own.
</bodyText>
<subsectionHeader confidence="0.998696">
1.1 Ambiguity Resolution
</subsectionHeader>
<bodyText confidence="0.999881815789474">
Recently, a great deal of evidence has accumu-
lated that humans resolve syntactic ambiguity by
considering the meaning of the available analyses
and selecting the &apos;best&apos; one. Various criteria for
goodness of meaning have been advanced in the
psycholinguistic literature: e.g. thematic compat-
ibility and lexical selection (Trueswell and Tanen-
haus 1994), discourse felicity of definite expressions
(Altmann et al. 1994), temporal coherence in dis-
course (Trueswell and Tanenhaus 1991), grammati-
cal function vis a vis given/new status (Niv 1993b),
and general world-knowledge (Kawamoto and Far-
rar 1993).
Many of the works cited above consider the tim-
ing of the ambiguity resolution decision. The evi-
dence is overwhelming that ambiguity is resolved
within a word or two of the arrival of disambiguat-
ing information— that is, when there is a meaning-
based criterion which militates toward one or an-
other syntactically available analysis, that analysis
is selected. Should the other analysis turn out to be
the ultimately correct analysis, a garden path will
result. Given that the various analyses available are
compared on various criteria of sensibleness, it fol-
lows that these analyses are constructed and main-
tained in parallel until disambiguating information
arrives. Indeed, there is psycholinguistic evidence
that the processor maintains the various analyses
in parallel (Nicol and Pickering 1993; MacDonland
et al. 1992).
Our parser, therefore, must be able to build and
maintain analyses in parallel. It must also extract
from the developing parse in a prompt fashion all
of the semantically relevant syntactic commitments
(e.g. predicate-argument relations) in order to allow
the interpretation module that it feeds to make ac-
curate evaluations of the meaning. Recovery from
garden paths is not addressed in this paper.
</bodyText>
<page confidence="0.996065">
125
</page>
<subsectionHeader confidence="0.701253">
1.2 Parser and Grammar
</subsectionHeader>
<bodyText confidence="0.998930411764706">
Let us adopt the widely held position that humans
posses a representation of grammatical competence
which is independent of any process (e.g. produc-
tion, perception, acquisition) that uses it. Steed-
man (1994) argues that if two theories of the gram-
mar and processor package have identical empirical
coverage, but one has a more complex parser, then
the other is preferred. This preference is not just
on philosophical grounds of cleanliness of one&apos;s the-
ories, but stems from consideration of the evolution
of the human linguistic capacity: A theory whose
grammar requires a complex parser in order to be of
any use would entail a more complex or less likely
evolutionary path which the parser and grammar
took together than would a theory whose gram-
mar requires little specialized apparatus by way of
a parser, and could thus have evolved gradually.
So what is the simplest parser one can con-
struct? In other words, what is the minimal ad-
dition of computational apparatus to the compe-
tence grammar necessary to make it parse? From
the argument in section 1.1, this addition must in-
clude a mechanism for maintaining analyses in par-
allel. Minimally, nothing else is necessary — the
data structure which resides in each parallel slot in
the parser is a direct representation of an analysis
as defined by the competence machinery.
Suppose the grammatical competence is one
that always divides an English clause into a subject
and a predicate (VP henceforth). Suppose also that
the primary operations of the grammar are putting
constituents together. Could the minimal parser
for such a grammar account for the minimal pair in
(1)?
</bodyText>
<listItem confidence="0.943047">
(1) a. The doctor sent for the patient arrived.
b. The flowers sent for the patient arrived.
</listItem>
<bodyText confidence="0.987207782608696">
(1)a is a garden path. In (1)b the garden path is
avoided because flowers are not good senders. The
difference between (1)a and b indicates that well
before the word &apos;arrived&apos; is encountered, the proces-
sor has already resolved the ambiguity introduced
by the word &apos;sent&apos;. That is, in the main-verb anal-
ysis of &apos;sent&apos;, the interpreter is aware of the relation
between the subject the verb before the end of the
VP. But the minimal parser cannot put the subject
together with &apos;sent&apos; or &apos;sent for the&apos; because the
latter are not a complete VP!
There are two possible solutions to this prob-
lem, each relaxes one of the two suppositions above:
Steedman (1994) argues for a grammatical theory
(CCG) which does not always make the subject-
predicate juncture the primary division point of a
clause. Shieber and Johnson (1993) on the other
hand, argue that there is no need to assume that a
constituent has to be complete before it is combined
with its sister(s). At this time, neither approach
is sufficiently developed to be evaluable (e.g. they
both lack broad coverage grammar) so either one is
viable. In this paper, I develop the first.
</bodyText>
<sectionHeader confidence="0.85458" genericHeader="introduction">
2 Preliminaries
</sectionHeader>
<bodyText confidence="0.99975224">
CCG is a lexicalized grammar formalism — a lexi-
con assigns each word to one or more grammatical
categories. Adjacent constituents can combine by
one of a small number of combinatory rules. The
universe of grammatical categories contains a col-
lection of basic categories (e.g. atomic symbols such
as n, np, s, etc. or Prolog terms such np(3,sg)) and
is closed under the category-forming connectives /
and . Intuitively a constituent of category X/Y
(resp. X \Y) is something of category X which is
missing something of category Y to its right (resp.
left). The combinatory rules are listed&apos; in table 1.
They formalize this intuition. A combinatory rule
may be qualified with a predicate over the variables
X, Y, and Zi...
A derivation is a binary tree whose leaves are
each a single-word constituent, and whose internal
nodes are each a constituent which is derived from
its children by an application of one of the corn-
binatory rules. A string w is grammatical just in
case there exists a derivation whose frontier is w. I
equivocate between a derivation and the constituent
at its root. An analysis of a string w is a sequence
of derivations such that the concatenation of their
frontiers is w.
</bodyText>
<sectionHeader confidence="0.987643" genericHeader="method">
3 The Simplest Parser
</sectionHeader>
<bodyText confidence="0.999944">
Let us consider the simplest conceivable parser. Its
specification is &amp;quot;find all analyses of the string so
far.&amp;quot; It has a collection of slots for maintaining
one analysis each, in parallel. Each slot maintains
an analysis of the string seen so far — a sequence
of one or more derivations. The parser has two
operations, as shown in figure 1.
This parser succeeds in constructing the incre-
mental analysis (2) necessary for solving the prob-
lem in (1).
</bodyText>
<footnote confidence="0.780073222222222">
&apos;Two common combinatory rules, type-raising and
substitution are not listed here. The substitution rule
(Steedman 1987) is orthogonal to the present discussion
and can be added without modification. The rule for
type-raising (see e.g. Dowty 1988) can cause difficulties
for the parsing scheme advocated here (Hepple 1987)
and is therefore assumed to apply in the lexicon. So
a proper name, for example, would be have two cate-
gories: np and s/(s\np).
</footnote>
<page confidence="0.994708">
126
</page>
<table confidence="0.999048428571428">
Forward Combination rule name Backward Combination rule name
X/Y Y --+ X &gt;0 Y X\Y ---■ X &lt;0
---4 ----&gt;.
X/Y YIZ XV &gt;1 YIZ X\Y XIZ &lt;1
X/Y Y71. I Z2 XTZi I Z2 &gt;2 Yrti I Z2 X\Y --- Xili I Z2 &lt;2
---,
X/Y WI...1Z,2 --L-+ XIZi...IZT, &gt;n YIZi... IZ,, X\Y ---* XVI... IZ,,,, &lt;n
</table>
<tableCaption confidence="0.9981895">
IZ stands for either /Z or \Z. Underlined regions in a rule must match.
Table 1: The combinatory rules
</tableCaption>
<listItem confidence="0.911387">
• scan
</listItem>
<bodyText confidence="0.898908571428571">
get the next word from the input stream
for each analysis a in the parser&apos;s memory
empty the slot containing a
for each lexical entry e of the word
make a copy a&apos; of a
add the leaf derivation e to the right of a&apos;
add a&apos; as a new analysis
</bodyText>
<listItem confidence="0.971371">
• combine
</listItem>
<bodyText confidence="0.713805875">
for each analysis a in the parser&apos;s memory
if a contains more than one constituent
and some rule can combine the rightmost
two constituents in a
then make a copy a&apos; of a
replace the two constituents of a&apos; by
their combination
add a&apos; as a new analysis
</bodyText>
<figureCaption confidence="0.999224">
Figure 1: Parser operations
</figureCaption>
<bodyText confidence="0.958586854166667">
the flowers sent
s/(s\np)
s/pp
But this parser is just an unconstrained shift-
reduce parser that simulates non-determinism via
parallelism. It suffers from a standard problem of
simple bottom-up parsers: it can only know when a
certain substring has a derivation, but in case a sub-
string does not have a derivation, the parser cannot
yet know whether or not a larger string containing
the substring will have a derivation. This means
that when faced with a string such as
(3) The insults the new students shouted at
the teacher were appalling.
the parser will note the noun-verb ambiguity of &apos;in-
sults&apos;, but will be unable to use the information that
&apos;insults&apos; is preceded by a determiner to rule out the
verb analysis in a timely fashion. It would only no-
tice the difficulty with the verb analysis after it had
come to the end of the string and failed to find a
derivation for it. This delay in ruling out doomed
analyses means that the parser and the interpreter
are burdened with a quickly proliferating collection
of irrelevant analyses.
Standard solution to this problem (e.g. Earley&apos;s
1970 parser; LR parsing, Aho and Johnson 1974)
consider global properties of the competence gram-
mar to infer that no grammatical string will be-
gin with a determiner followed by a verb. These
solutions exact a cost in complicating the design
of the parser: new data structures such as dotted
rules or an LR table must be added to the parser.
The parser is no longer a generic search algorithm
for the competence grammar. Given the flexibil-
ity of CCG derivations, one may consider impos-
ing a very simple constraint on the parser: every
prefix of a grammatical string must have a deriva-
tion. But such a move it too heavy-handed. Indeed
CCG often gives left-branching derivations, but it is
not purely left-branching. For example, the deriva-
tion of a WH-dependency requires leaving the WIT-
filler constituent uncombined until the entire gap-
containing constituent is completed, as in (4).
(4)
whose cat did Fred find
q/(s/np)/n n s/s s/(s\np) s \ np/np &gt;1
q/(s/np) &gt;0 s/(s\np) &gt;1 &gt;0
s/np
</bodyText>
<sectionHeader confidence="0.950818" genericHeader="method">
4 The Viable Analysis Criterion
</sectionHeader>
<bodyText confidence="0.99959">
Given the desideratum to minimize the complexity
of the biologically specified parser, I propose that
the human parser is indeed as simple as the scan-
combine algorithm presented above, and that the
ability to rule out analyses such as determiner+verb
is not innate, but is an acquired skill. This &apos;skill&apos; is
implemented as a criterion which an analysis must
meet in order to survive. An infant starts out with
this criterion completely permissive. Consequently
it cannot process any utterances longer than a few
words without requiring excessively many parser
</bodyText>
<figure confidence="0.9864425">
(2)
s/(s\np)/n n s\np/pp
&gt;0
&gt;1
</figure>
<page confidence="0.970482">
127
</page>
<bodyText confidence="0.999980222222222">
slots. But as the infant observes the various analy-
ses in the parser memory and tracks their respective
outcomes, it notices that certain sequences of cate-
gories never lead to a grammatical overall analysis.
After observing an analysis failing a certain number
of times and never succeeding, the child concludes
that it is not a viable analysis and learns to discard
it. The more spurious analyses are discarded, the
better able the child is to cope with longer strings.
The collection of analyses that are maintained
by the parser is therefore filtered by two indepen-
dent processes: The Viable Analysis Criterion is a
purely syntactic filter which rules out analyses inde-
pendently of ambiguity. The interpreter considers
the semantic information of the remaining analyses
in parallel and occasionally deems certain analyses
more sensible than their competitors, and discards
the latter.
Given that English sentences rarely require
more than two or three CCG constituents at any
point in their parse, and given the limited range
of categories that arise in English, the problem
of learning the viable analysis criterion from data
promises to be comparable to other n-gram learn-
ing tasks. The empirical validation of this proposal
awaits the availability of a broad coverage CCG for
English, and other languages.2
</bodyText>
<sectionHeader confidence="0.984273" genericHeader="method">
5 CCG and flexible derivation
</sectionHeader>
<subsectionHeader confidence="0.91625">
5.1 The Problem
</subsectionHeader>
<bodyText confidence="0.982578170212766">
CCG&apos;s distinguishing characteristic is its deriva-
tional flexibility — the fact that one string is po-
tentially assigned many truth-conditionally equiva-
lent analyses. This feature is crucial to the present
approach of incremental parsing (as well as for a
range of grammatical phenomena, see e.g. Steed-
man 1987, 1994; Dowty 1988). But the additional
ambiguity, sometimes referred to as &apos;spurious&apos;, is
also a source of difficulty for parsing. For example,
the truth-conditionally unambiguous string &apos;John
was thinking that Bill had left&apos; has CCG deriva-
tions corresponding to each of the 132 different bi-
nary trees possible for seven leaves. The fact that
this sentence makes no unusual demands on hu-
mans makes it clear that its exponentially prolif-
erating ambiguous analyses are pruned somehow.
The interpreter, which can resolve many kinds of
ambiguity, cannot be used to for this task: it has
no visible basis for determining, for example, that
the single-constituent analysis &apos;John was thinking&apos;
2In addition to the category-ambiguity problem in
(3), the viable analysis criterion solves other problems,
analogous to shift-reduce ambiguities, which are omit-
ted here for reasons of space. The interested reader is
referred to Niv (1993a) for a comprehensive discussion
and an implementation of the parser proposed here.
somehow makes more sense (in CCG) than the two-
constituent analysis `John&apos;+`was thinking&apos;.
Note that the maximally left-branching deriva-
tion is the one which most promptly identifies syn-
tactic relations, and is thus the preferred derivation.
It is possible to extend the viable analysis criterion
to encompass this consideration of efficiency as well.
The infant learns that it is usually most efficient
to combine whenever possible, and to discard an
analysis in which a combination is possible, but not
taken.3.
While this left-branching criterion eliminates
the inefficiency due to flexibility of derivation, it
gives rise to difficulties with (5).
John loves Mary madly
(5) s/vp vp/np np vp\vp
In (5), it is precisely the non-left-branching
derivation of &apos;John loves Mary&apos; which is necessary
in order to make the VP constituent available for
combination with the adverb. (See Pareschi and
Steedman 1987.)
</bodyText>
<subsectionHeader confidence="0.998295">
5.2 Previous Approaches
</subsectionHeader>
<bodyText confidence="0.95001959375">
Following up on the work of Lambek (1958) who
proposed that the process of deriving the grammat-
icality of a string of categories be viewed as a proof,
there have been quite a few proposals put forth
for computing only normal forms of derivations or
proofs (Konig 1989; Hepple and Morrill 1989; Hep-
ple 1991; inter alia). The basic idea with all of these
works is to define &apos;normal forms&apos; — distinguished
members of each equivalence class of derivations,
and to require the parser to search this smaller
space of possible derivations. But none of the pro-
posed methods result in parsing systems which pro-
ceed incrementally through the string.4
Karttunen (1989) and others have proposed
chart-based parsers which directly address the
derivational ambiguity problem. For the present
purpose, the principal feature of chart parsing —
the factoring out of constituents from analyses —
turns out to create an encumberance: The inter-
preter cannot compare constituents, or arcs, for the
purposes of ambiguity resolution. It must compare
analyses of the entire prefix so far, which are awk-
ward to compute from the developing chart.
3 Discussion of the consequences of this move on the
processing of picture noun extractions and ambiguity-
related filled-gap effects is omitted for lack of space. See
Niv (1993a).
&apos;In the case of Hepple&apos;s (1991) proposal, a left-
branching normal form is indeed computed. But its
computation must be delayed for some words, so it
does not provide the interpreter with timely informa-
tion about the incoming string.
</bodyText>
<page confidence="0.99639">
128
</page>
<bodyText confidence="0.993941307692307">
Pareschi and Steedman (1987) propose the fol-
lowing strategy: (which can be taken out of the
chart-parsing context of their paper) construct
only maximally left-branching derivations, but al-
low a limited form of backtracking when a locally
non-left-branching derivation turns out to have
been necessary. For example, when parsing (5),
Pareschi and Steedman&apos;s algorithm constructs the
left branching analysis for &apos;John loves Mary&apos;. When
it encounters &apos;madly&apos;, it applies &gt;0 in reverse to
solve for the hidden VP constituent &apos;loves Mary&apos;
by subtracting the sjvp category &apos;John&apos; from the s
category &apos;John loves Mary&apos;:
</bodyText>
<figure confidence="0.782002571428571">
(6)
&gt;1
John loves Mary madly
s/vp vp/np np vp\vp
s/np
vp
vp
</figure>
<bodyText confidence="0.998619818181818">
The idea with this &apos;revealing&apos; operation is to ex-
ploit the fact that the rules &gt;n and &lt;n, when viewed
as three-place relations, are functional in all three
arguments. That is, knowledge any two of {left con-
stituent, right constituent, result}, uniquely deter-
mines the third. There are many problems with the
completeness and soundness Pareschi and Steed-
man&apos;s proposal (Hepple 1987; Niv 1993a). For ex-
ample, in (7), the category b c cannot be revealed
after it had participated in two combinations of
mixed direction: &lt;0 and &gt;0.
</bodyText>
<figure confidence="0.7045852">
a/b c d\c b\d b\c\(b\c)
&lt;0
&lt;0
&gt;0
stuck
</figure>
<sectionHeader confidence="0.883084" genericHeader="method">
6 A Proposal
</sectionHeader>
<bodyText confidence="0.9996263125">
Pareschi and Steedman&apos;s idea of lazy parsing is
very attractive in the present setting. I propose
to replace their unification-based revealing opera-
tion with a normal-form based manipulation of the
derivation history. The idea is to construct and
maintain the maximally incremental, left-branching
derivations. (see section 4.) When a constituent
such as the VP &apos;loves Mary&apos; in (5) may be nec-
essary, e.g. whenever the right-most constituent in
an analysis is of the form X \Y, the next-to-right-
most derivation is rewritten to its equivalent right-
branching derivation by repeated application the
local transformations defined in (8) and (9).
The right frontier of the rewritten derivation now
provides all the grammatically possible attachment
sites.
</bodyText>
<equation confidence="0.999229714285714">
W/X X (Yi ••• (Y,_ /Ym Ym IZi...IZn
w NI. • • &apos;m
W • (Ym_1(Zi • •
WPC X WI. • • /YmYm Zi • &gt;n
X1Y-1. •IYm_ilZi• • • (Zn
&gt;m+n-1
W (Yi• • (Ym-i(Zi. • • (Zn
(9)
Yrn 1Z1- • • (Zn X lYi• • 1Yrn-i \Ym W\X
X lYi• • • (Yrn--11Zi• • (Z,„, &lt;11
W &apos;Yr • (Ym-i IZi • • •jZ
Ym (Zi. -(Z„ X (Yi • • lYm_i\YM W \X
W IY1- • • (Yrn-i \Yrn
WIY1. - • (Yrn-i IZi• • (Zn
</equation>
<bodyText confidence="0.999003">
Results from the study of rewrite systems (see
Klop (1992) for an overview) help determine the
computational complexity of this operation:
</bodyText>
<subsectionHeader confidence="0.998681">
6.1 A Rewrite System for Derivations
</subsectionHeader>
<bodyText confidence="0.95649348">
If x is a node in a binary tree let A(x) (resp. p(x))
refer to its left (right) child.
Any subtree of a derivation which matches the
left-hand-side of either (8) or (9) is called a redex.
The result of replacing a redex by the corresponding
right-hand-side of a rule is called the contractum. A
derivation is in normal form (NF) if it contains no
redexes. In the following I use the symbol to
also stand for the relation over pairs of derivations
such that the second is derived from the first by
one application of Let 4-- be the converse
of Let be U Let —4. be the
reflexive transitive closure of and similarly, 4,--
the reflexive transitive closure of and i&lt; » the
reflexive transitive closure of Note that 0 ».
is an equivalence relation.
A rewrite system is strongly normalizing (SN)
if every sequence of applications of --+ is finite.
Theorem 1 is SN5
proof Every derivation with n internal nodes is
assigned a positive integer score. An application of
is guaranteed to yield a derivation with a lower
511epple and Morrill (1989) Proved SN for a slight
variant of --+. The present proof provides a tighter
score function, see lemma 1 below.
</bodyText>
<figure confidence="0.993087777777778">
&gt;0
reveal &gt;0
&lt;0
&gt;0
a
&gt;n
&lt;m+n-1
&lt;rn
&lt;n
</figure>
<page confidence="0.852629">
129
</page>
<figureCaption confidence="0.996787">
Figure 2: Schema for one redex in DRS
</figureCaption>
<bodyText confidence="0.7939095">
score. This is done by defining functions # and a
for each node of the derivation as follows:
</bodyText>
<equation confidence="0.9371375">
, 0 if x is a leaf node
#(x) = 1 1 + #(A(x))+ #(p(x)) otherwise
cr(x) = 0 if x is a leaf node
o(x)) + o-(p(x))+ #(A(x)) otherwise
</equation>
<bodyText confidence="0.9901987">
Each application of decreases a, the score
of the derivation. This follows from the monotonic
dependency of the score of the root of the derivation
upon the scores of each sub-derivation, and from the
fact that locally, the score of a redex decreases when
is applied: In figure 2, a derivation is depicted
schematically with a redex whose sub-constituents
are named a, b, and c. Applying reduces cr(e),
hence the score of the whole derivation.
in redex:
</bodyText>
<equation confidence="0.993790714285714">
#(d) #(a) + #(b) + 1
o(d) • o(a) + cr(b)+ #(a)
cr(e)
o(a) + o•(b) + o(c) + #(b) + 2 #(a) + 1
in contractum:
o(f) o-(b)+ a(c) + #(b)
o-(e&apos;) • a(a) + a(f) + #(a)
</equation>
<listItem confidence="0.6245828">
• cr(a) + cr(b)± a(c) + #(6)+ #(a)
a(a) + a(b)+ o(c) + #(b)+ 2 - #(a) + 1
0
Observe that #(x) is the number of internal nodes
ins.
</listItem>
<bodyText confidence="0.888998142857143">
Lemma 1 Given a derivation x, let n = #x. Ev-
ery sequence of applications of is of length at
most n(n — 1)/2.6
proof By induction on n:
Base case: n = 1; 0 applications are necessary.
Induction: Suppose true for all derivations of fewer
than n internal nodes. Let m = #A(x). So 0 &lt;
</bodyText>
<footnote confidence="0.6486245">
6Niv (1994) shows by example that this bound is
tight.
</footnote>
<equation confidence="0.918537555555555">
m &lt; n — 1 and #p(x) n — m — 1.
o(x) — n(n — 1)/2 =
= a(A(x))+ cr(p(x))+ #(A(x))— n(n — 1)/2
&lt;
m(m-1) (n -1n-m-2)m n(n2-1)
= (In + 1)(m — (n — 1))
&lt;0 recalling that 0 &lt; m &lt; n — 1
0
So far I have shown that every sequence of ap-
</equation>
<bodyText confidence="0.9303042">
plications of is not very long: at most quadratic
in the size of the derivation. I now show that when
there is a choice of redex, it makes no difference
which redex one picks. That is, all redex selection
strategies result in the same normal form.
A rewrite system is Church-Rosser (CR) just in
case
Vx, y.(x y 33z.(x--- A z))
A rewrite system is Weakly Church-Rosser
(WCR) just in case
</bodyText>
<equation confidence="0.833419">
Vx, y, x A y) z A z)
Lemma 2 is WCR.
</equation>
<bodyText confidence="0.624788">
proof Let w be a derivation with two distinct re-
dexes x and y, yielding the two distinct derivations
w&apos; and w&amp;quot; respectively. There are a few possibili-
ties:
case 1: x and y share no internal nodes. There are
three subcases: x dominates y (includes y as a
subconstituent), x is dominated by y, or x and y
are incomparable with respect to dominance. Ei-
ther way, it is clear that the order of application
of makes no difference.
case 2: x and y share some internal node. Without
loss of generality, y does not dominate x. There
exists a derivation z such that z A w&amp;quot; z
This is depicted in figure 3. (Note that all three
internal nodes in figure 3 are of the same rule
direction, either &gt; or &lt;.) 0
Lemma 3 (Newman) WCR A SN D CR.
Theorem 2 is CR.
proof From theorem 1 and lemmas 2 and 3. 0
Therefore any maximal sequence of applica-
tions of will lead to the normal form&apos;. We
are free to select the most efficient redex selection
scheme. From lemma 1 the worst case is quadratic.
Niv (1994) shows that the optimal strategy, of ap-
plying closest as possible to the root, yields ---
applications sequences of at most n steps.
</bodyText>
<footnote confidence="0.9822075">
7 Assuming, as is the case with extant CCG accounts,
that constraints on the applicability of the combinatory
rules do not present significant roadblocks to the deriva-
tion rewrite process.
</footnote>
<page confidence="0.99271">
130
</page>
<bodyText confidence="0.5838215">
Arrows are annotated by the substrucure
to which they are applied
</bodyText>
<figureCaption confidence="0.994117">
Figure 3: Why —4 is weakly Church-Rosser
</figureCaption>
<bodyText confidence="0.948519">
Note that all that was said in this section gen-
eralizes beyond CCG derivations to any associative
algebra.
</bodyText>
<subsectionHeader confidence="0.980436">
6.2 Discussion
</subsectionHeader>
<bodyText confidence="0.9998906">
Given the rightmost subconstituent recovered us-
ing the normal form technique above, how should
parsing proceed? Obviously, if the leftward looking
category which precipitated the normal form com-
putation is a modifier, i.e. of the form X \X, then
it ought to be combined with the recovered con-
stituent in a form analogous to Chomsky adjunc-
tion. But what if this category is not of the form
X X? For example, should the parser compute the
reanalysis in (10)?
</bodyText>
<equation confidence="0.769556714285714">
(10)
a/b b/c c/d s\(a/b)\ (b/d)
&gt;1
a/c
a/b b/c c/d sVa/b)\ (b/d)
b/d &gt;1
s\(a/b)
</equation>
<bodyText confidence="0.999956696969697">
Ascribing the same non-garden-path status to
the reanalysis in (10) that we do to (6) would consti-
tute a very odd move: Before reanalysis, the deriva-
tion encoded the commitment that the /b of the
first category is satisfied by the b of the b/c in the
second category. This commitment is undone in the
reanalysis. This is an undesirable property to have
in a computational model of parsing commitment,
as it renders certain revisions of commitments cos-
ier than others, without any empirical justification.
Furthermore, given the possibility that the parser
change its mind about what serves as argument to
what, the interpreter must be able to cope with
such non-monotonic updates to its view of the anal-
ysis so far — this would surely complicate the de-
sign of the interpreter.&apos; Therefore, constituents on
the right-frontier of a right-normal-form should only
combine with `endocentric&apos; categories to their right.
The precise definition of `endocentric&apos; depends on
the semantic formalism used — it certainly includes
post-head modifiers, and might also include coordi-
nation.
Stipulating that certain reanalyses are impos-
sible immediately makes the parser &apos;incomplete&apos; in
the sense that it cannot find the analysis in (10).
From the current perspective of identifying garden
paths, this incompleteness is a desirable, even a nec-
essary property. In (10), committing to the compo-
sition of a/b and b/c is tantamount to being led
down the garden path. In a different sense, the
current parser is complete: it finds all analyses if
the Viable Analysis Criterion and the interpreter
never discard any analyses.
</bodyText>
<sectionHeader confidence="0.998411" genericHeader="conclusions">
7 Conclusion
</sectionHeader>
<bodyText confidence="0.999972333333333">
The current proposal shifts some of the burden tra-
ditionally associated with the parser to other com-
ponents of the human cognitive faculty: the inter-
preter resolves ambiguity, and an acquired skill re-
moves &apos;garbage&apos; analyses from the parser&apos;s mem-
ory — solving the so-called spurious ambiguity
problem, as well as effectively applying grammar-
global constraints traditionally computed by top-
down techniques or grammar compilation. The re-
sultant parser adheres to the desideratum that it
be a generic search algorithm for the grammar for-
malism, provided the definition of CCG explicitly
includes the notion of &apos;derivation&apos; and explicates the
truth-conditional equivalence relation. Such inclu-
sions have indeed been proposed (Steedman 1990).
</bodyText>
<sectionHeader confidence="0.955358" genericHeader="references">
Bibliography
</sectionHeader>
<reference confidence="0.902113307692308">
Aho, Alfred and S. C. Johnson. 1974, LR Parsing.
ACM Computing Surveys 6(2):99-124.
Altmann, Gerry T., Alan Garnham, and Judith A.
Henstra. 1994. Effects of syntax in human sen-
tence parsing: Evidence against a structure-
based proposal mechanism. Journal of Ex-
perimental Psychology: Learning, Memory and
Cognition 20(1):1-8.
Dowty, David. 1988. Type Raising, Functional
Composition, and Non-Constituent Conjunc-
tion. In Richard T. Oehrle, Emmon Bach, and
81 am indebted to Henry Thompson for a discussion
of monotonicity.
</reference>
<figure confidence="0.9905966">
a
d cb a
a/d &gt;1
&lt;0
&lt;0
</figure>
<page confidence="0.914134">
131
</page>
<reference confidence="0.998229362637363">
Deirdre Wheeler (Eds.), Categorial Grammars
and Natural Language Structures. Reidel.
Earley, Jay. 1970. An Efficient Context-Free Pars-
ing Algorithm. Communications of the Asso-
ciation for Computing Machinery 13:94-102.
Hepple, Mark R. 1987. Methods for Parsing Combi-
natory Grammars and the Spurious Ambiguity
Problem. Master&apos;s thesis, University of Edin-
burgh.
Hepple, Mark R. 1991. Efficient Incremental Pro-
cessing with Categorial Grammar. In Proceed-
ings of the 29th Annual Meeting of the Associ-
ation for Computational Linguistics, 79-86.
Hepple, Mark It. and Glyn V. Morrill. 1989. Pars-
ing and Derivational Equivalence. In Proceed-
ings of the Annual Meeting of the European
Chapter of the Association for Computational
Linguistics.
Karttunen, Lauri. 1989. Radical Lexicalism. In
Mark Baltin and Anthony S. Kroch (Eds.), Al-
ternative Conceptions of Phrase Structure, 43-
65. Chicago: University of Chicago Press.
Kawamoto, Alan and William Farrar. 1993. The
Return of Visiting Relatives: Pragmatic Ef-
fects in Sentence Processing. Quarterly Jour-
nal of Experimental Psychology 46A(3):463 -
487.
Klop, Jan W. 1992. Term Rewrite Systems.
In Samson Abramsky, Dov M. Gabbay, and
T. S. E. Maibaum (Eds.), Handbook of Logic
in Computer Science, Vol. 2, 1 - 116. Oxford:
Clarendon Press.
Konig, Esther. 1989. Parsing as Natural Deduction.
In Proceedings of the 27th Annual Meeting of
the Association for Computational Linguistics,
272-279, June.
Lambek, Joachim. 1958. The Mathematics of
Sentence Structure. American Mathematical
Monthly 65:154-169.
MacDonland, Maryellen, Adam Just, and Patri-
cia Carpenter. 1992. Working Memory Con-
straints on the Processing of Syntactic Ambi-
guity. Cognitive Psychology 24:56-98.
Nicol, Janet L. and Martin J. Pickering. 1993. Pro-
cessing Syntactically Ambiguous Sentences:
Evidence from Semantic Priming. Journal of
Psycholinguistic Research.
Niv, Michael. 1993a. A Computational Model of
Syntactic Processing: Ambiguity Resolution
from Interpretation. PhD thesis, University of
Pennsylvania. (ftp://ftp.cis.upenn.edu/pub/-
ircs/tr/93-27.ps).
Niv, Michael. 1993b. Resolution of Syntactic Am-
biguity: the Case of New Subjects. In Proceed-
ings of the 15th Annual Conference of the Cog-
nitive Science Society, Hillsdale, NJ. Lawrence
Erlbaum Associates.
Niv, Michael. 1994. The complexity of normal
form rewrite sequences for Associativity. Tech-
nical Report LCL 94-6, Computer Science
Department, Technion. (ftp://ftp.cis.upenn.-
edu/pub/niv/rewrite.ps).
Pareschi, Remo and Mark J. Steedman. 1987. A
Lazy Way to Chart Parse with Combinatory
Grammars. In Proceedings of the 25th Annual
Meeting of the Association for Computational
Linguistics.
Shieber, Stuart M. and Mark Johnson. 1993. Vari-
ations on Incremental Interpretation. Journal
of Psycholinguistic Research. (to appear).
Steedman, Mark J. 1987. Combinatory Gram-
mars and Parasitic Gaps. Natural Language
and Linguistic Theory 5:403-439.
Steedman, Mark J. 1990. Gapping as Con-
stituent Coordination. Linguistics and Philos-
ophy 13:207-264.
Steedman, Mark J. 1994. Grammars and Proces-
sors. In Hans Kamp and Christian Rohrer
(Eds.), Aspects of Computational Linguistics.
Springer Verlag. (to appear).
Trueswell, John C. and Michael K. Tanenhaus.
1991. Tense, Temporal Context and Syntactic
Ambiguity Resolution. Language and Cogni-
tive Processses 6:303-338.
Trueswell, John C. and Michael K. Tanenhaus.
1994. Toward a Lexicalist Framework of
Constraint-Based Syntactic Ambiguity Reso-
lution. In Charles Clifton, Lyn Frazier, and
Keith Rayner (Eds.), Perspectives on Sentence
Processing. Hillsdale, NJ: Lawrence Erlbaum
Associates.
</reference>
<page confidence="0.997696">
132
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.969346">
<title confidence="0.999938">A Psycholinguistically Motivated Parser for CCG</title>
<author confidence="0.999778">Michael Niv</author>
<affiliation confidence="0.993468">Technion — Israel Institute of Technology</affiliation>
<address confidence="0.999682">Haifa, Israel</address>
<email confidence="0.998593">Internet:nivOlinc.cis.upenn.edu</email>
<abstract confidence="0.998847636363636">Considering the speed in which humans resolve syntactic ambiguity, and the overwhelming evidence that syntactic ambiguity is resolved through selection of the analysis whose interpretation is the most &apos;sensible&apos;, one comes to the conclusion that interpretation, hence parsing take place incrementally, just about every word. Considerations of parsimony in the theory of the syntactic processor lead one to explore the simplest of parsers: one which represents only analyses as defined by the grammar and no other information. Toward this aim of a simple, incremental parser I explore the proposal that the competence grammar is a Combinatory Categorial Grammar (CCG). I address the problem of the proliferating analyses that stem from CCG&apos;s associativity of derivation. My solution involves maintaining only the maximally incremental analysis and, when necessary, computing the maximally right-branching analysis. I use results from the study of rewrite systems to show that this computation is efficient.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Alfred Aho</author>
<author>S C Johnson</author>
</authors>
<date>1974</date>
<journal>LR Parsing. ACM Computing Surveys</journal>
<pages>6--2</pages>
<contexts>
<context position="10919" citStr="Aho and Johnson 1974" startWordPosition="1815" endWordPosition="1818"> the teacher were appalling. the parser will note the noun-verb ambiguity of &apos;insults&apos;, but will be unable to use the information that &apos;insults&apos; is preceded by a determiner to rule out the verb analysis in a timely fashion. It would only notice the difficulty with the verb analysis after it had come to the end of the string and failed to find a derivation for it. This delay in ruling out doomed analyses means that the parser and the interpreter are burdened with a quickly proliferating collection of irrelevant analyses. Standard solution to this problem (e.g. Earley&apos;s 1970 parser; LR parsing, Aho and Johnson 1974) consider global properties of the competence grammar to infer that no grammatical string will begin with a determiner followed by a verb. These solutions exact a cost in complicating the design of the parser: new data structures such as dotted rules or an LR table must be added to the parser. The parser is no longer a generic search algorithm for the competence grammar. Given the flexibility of CCG derivations, one may consider imposing a very simple constraint on the parser: every prefix of a grammatical string must have a derivation. But such a move it too heavy-handed. Indeed CCG often giv</context>
</contexts>
<marker>Aho, Johnson, 1974</marker>
<rawString>Aho, Alfred and S. C. Johnson. 1974, LR Parsing. ACM Computing Surveys 6(2):99-124.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Gerry T Altmann</author>
<author>Alan Garnham</author>
<author>Judith A Henstra</author>
</authors>
<title>Effects of syntax in human sentence parsing: Evidence against a structurebased proposal mechanism.</title>
<date>1994</date>
<journal>Journal of Experimental Psychology: Learning, Memory and Cognition</journal>
<pages>20--1</pages>
<contexts>
<context position="2453" citStr="Altmann et al. 1994" startWordPosition="367" endWordPosition="370">Hepple, Mitch Marcus, Mark Steedman, Val Tannen, and Henry Thompson for helpful suggestions, and to Jeff Siskind for help with typesetting CCG derivations. Any errors are my own. 1.1 Ambiguity Resolution Recently, a great deal of evidence has accumulated that humans resolve syntactic ambiguity by considering the meaning of the available analyses and selecting the &apos;best&apos; one. Various criteria for goodness of meaning have been advanced in the psycholinguistic literature: e.g. thematic compatibility and lexical selection (Trueswell and Tanenhaus 1994), discourse felicity of definite expressions (Altmann et al. 1994), temporal coherence in discourse (Trueswell and Tanenhaus 1991), grammatical function vis a vis given/new status (Niv 1993b), and general world-knowledge (Kawamoto and Farrar 1993). Many of the works cited above consider the timing of the ambiguity resolution decision. The evidence is overwhelming that ambiguity is resolved within a word or two of the arrival of disambiguating information— that is, when there is a meaningbased criterion which militates toward one or another syntactically available analysis, that analysis is selected. Should the other analysis turn out to be the ultimately cor</context>
</contexts>
<marker>Altmann, Garnham, Henstra, 1994</marker>
<rawString>Altmann, Gerry T., Alan Garnham, and Judith A. Henstra. 1994. Effects of syntax in human sentence parsing: Evidence against a structurebased proposal mechanism. Journal of Experimental Psychology: Learning, Memory and Cognition 20(1):1-8.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David Dowty</author>
</authors>
<title>Type Raising, Functional Composition, and Non-Constituent Conjunction. In</title>
<date>1988</date>
<contexts>
<context position="8669" citStr="Dowty 1988" startWordPosition="1402" endWordPosition="1403">yses of the string so far.&amp;quot; It has a collection of slots for maintaining one analysis each, in parallel. Each slot maintains an analysis of the string seen so far — a sequence of one or more derivations. The parser has two operations, as shown in figure 1. This parser succeeds in constructing the incremental analysis (2) necessary for solving the problem in (1). &apos;Two common combinatory rules, type-raising and substitution are not listed here. The substitution rule (Steedman 1987) is orthogonal to the present discussion and can be added without modification. The rule for type-raising (see e.g. Dowty 1988) can cause difficulties for the parsing scheme advocated here (Hepple 1987) and is therefore assumed to apply in the lexicon. So a proper name, for example, would be have two categories: np and s/(s\np). 126 Forward Combination rule name Backward Combination rule name X/Y Y --+ X &gt;0 Y X\Y ---■ X &lt;0 ---4 ----&gt;. X/Y YIZ XV &gt;1 YIZ X\Y XIZ &lt;1 X/Y Y71. I Z2 XTZi I Z2 &gt;2 Yrti I Z2 X\Y --- Xili I Z2 &lt;2 ---, X/Y WI...1Z,2 --L-+ XIZi...IZT, &gt;n YIZi... IZ,, X\Y ---* XVI... IZ,,,, &lt;n IZ stands for either /Z or \Z. Underlined regions in a rule must match. Table 1: The combinatory rules • scan get the next</context>
<context position="14168" citStr="Dowty 1988" startWordPosition="2347" endWordPosition="2348">em of learning the viable analysis criterion from data promises to be comparable to other n-gram learning tasks. The empirical validation of this proposal awaits the availability of a broad coverage CCG for English, and other languages.2 5 CCG and flexible derivation 5.1 The Problem CCG&apos;s distinguishing characteristic is its derivational flexibility — the fact that one string is potentially assigned many truth-conditionally equivalent analyses. This feature is crucial to the present approach of incremental parsing (as well as for a range of grammatical phenomena, see e.g. Steedman 1987, 1994; Dowty 1988). But the additional ambiguity, sometimes referred to as &apos;spurious&apos;, is also a source of difficulty for parsing. For example, the truth-conditionally unambiguous string &apos;John was thinking that Bill had left&apos; has CCG derivations corresponding to each of the 132 different binary trees possible for seven leaves. The fact that this sentence makes no unusual demands on humans makes it clear that its exponentially proliferating ambiguous analyses are pruned somehow. The interpreter, which can resolve many kinds of ambiguity, cannot be used to for this task: it has no visible basis for determining, f</context>
</contexts>
<marker>Dowty, 1988</marker>
<rawString>Dowty, David. 1988. Type Raising, Functional Composition, and Non-Constituent Conjunction. In Richard T. Oehrle, Emmon Bach, and 81 am indebted to Henry Thompson for a discussion of monotonicity.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Deirdre Wheeler</author>
</authors>
<title>Categorial Grammars and Natural Language Structures.</title>
<publisher>Reidel.</publisher>
<marker>Wheeler, </marker>
<rawString>Deirdre Wheeler (Eds.), Categorial Grammars and Natural Language Structures. Reidel.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jay Earley</author>
</authors>
<title>An Efficient Context-Free Parsing Algorithm.</title>
<date>1970</date>
<journal>Communications of the Association for Computing Machinery</journal>
<pages>13--94</pages>
<marker>Earley, 1970</marker>
<rawString>Earley, Jay. 1970. An Efficient Context-Free Parsing Algorithm. Communications of the Association for Computing Machinery 13:94-102.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mark R Hepple</author>
</authors>
<title>Methods for Parsing Combinatory Grammars and the Spurious Ambiguity Problem. Master&apos;s thesis,</title>
<date>1987</date>
<institution>University of Edinburgh.</institution>
<contexts>
<context position="8744" citStr="Hepple 1987" startWordPosition="1413" endWordPosition="1414">ne analysis each, in parallel. Each slot maintains an analysis of the string seen so far — a sequence of one or more derivations. The parser has two operations, as shown in figure 1. This parser succeeds in constructing the incremental analysis (2) necessary for solving the problem in (1). &apos;Two common combinatory rules, type-raising and substitution are not listed here. The substitution rule (Steedman 1987) is orthogonal to the present discussion and can be added without modification. The rule for type-raising (see e.g. Dowty 1988) can cause difficulties for the parsing scheme advocated here (Hepple 1987) and is therefore assumed to apply in the lexicon. So a proper name, for example, would be have two categories: np and s/(s\np). 126 Forward Combination rule name Backward Combination rule name X/Y Y --+ X &gt;0 Y X\Y ---■ X &lt;0 ---4 ----&gt;. X/Y YIZ XV &gt;1 YIZ X\Y XIZ &lt;1 X/Y Y71. I Z2 XTZi I Z2 &gt;2 Yrti I Z2 X\Y --- Xili I Z2 &lt;2 ---, X/Y WI...1Z,2 --L-+ XIZi...IZT, &gt;n YIZi... IZ,, X\Y ---* XVI... IZ,,,, &lt;n IZ stands for either /Z or \Z. Underlined regions in a rule must match. Table 1: The combinatory rules • scan get the next word from the input stream for each analysis a in the parser&apos;s memory empt</context>
<context position="18682" citStr="Hepple 1987" startWordPosition="3066" endWordPosition="3067">nters &apos;madly&apos;, it applies &gt;0 in reverse to solve for the hidden VP constituent &apos;loves Mary&apos; by subtracting the sjvp category &apos;John&apos; from the s category &apos;John loves Mary&apos;: (6) &gt;1 John loves Mary madly s/vp vp/np np vp\vp s/np vp vp The idea with this &apos;revealing&apos; operation is to exploit the fact that the rules &gt;n and &lt;n, when viewed as three-place relations, are functional in all three arguments. That is, knowledge any two of {left constituent, right constituent, result}, uniquely determines the third. There are many problems with the completeness and soundness Pareschi and Steedman&apos;s proposal (Hepple 1987; Niv 1993a). For example, in (7), the category b c cannot be revealed after it had participated in two combinations of mixed direction: &lt;0 and &gt;0. a/b c d\c b\d b\c\(b\c) &lt;0 &lt;0 &gt;0 stuck 6 A Proposal Pareschi and Steedman&apos;s idea of lazy parsing is very attractive in the present setting. I propose to replace their unification-based revealing operation with a normal-form based manipulation of the derivation history. The idea is to construct and maintain the maximally incremental, left-branching derivations. (see section 4.) When a constituent such as the VP &apos;loves Mary&apos; in (5) may be necessary, </context>
</contexts>
<marker>Hepple, 1987</marker>
<rawString>Hepple, Mark R. 1987. Methods for Parsing Combinatory Grammars and the Spurious Ambiguity Problem. Master&apos;s thesis, University of Edinburgh.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mark R Hepple</author>
</authors>
<title>Efficient Incremental Processing with Categorial Grammar.</title>
<date>1991</date>
<booktitle>In Proceedings of the 29th Annual Meeting of the Association for Computational Linguistics,</booktitle>
<pages>79--86</pages>
<contexts>
<context position="16397" citStr="Hepple 1991" startWordPosition="2698" endWordPosition="2700">o difficulties with (5). John loves Mary madly (5) s/vp vp/np np vp\vp In (5), it is precisely the non-left-branching derivation of &apos;John loves Mary&apos; which is necessary in order to make the VP constituent available for combination with the adverb. (See Pareschi and Steedman 1987.) 5.2 Previous Approaches Following up on the work of Lambek (1958) who proposed that the process of deriving the grammaticality of a string of categories be viewed as a proof, there have been quite a few proposals put forth for computing only normal forms of derivations or proofs (Konig 1989; Hepple and Morrill 1989; Hepple 1991; inter alia). The basic idea with all of these works is to define &apos;normal forms&apos; — distinguished members of each equivalence class of derivations, and to require the parser to search this smaller space of possible derivations. But none of the proposed methods result in parsing systems which proceed incrementally through the string.4 Karttunen (1989) and others have proposed chart-based parsers which directly address the derivational ambiguity problem. For the present purpose, the principal feature of chart parsing — the factoring out of constituents from analyses — turns out to create an encu</context>
</contexts>
<marker>Hepple, 1991</marker>
<rawString>Hepple, Mark R. 1991. Efficient Incremental Processing with Categorial Grammar. In Proceedings of the 29th Annual Meeting of the Association for Computational Linguistics, 79-86.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Glyn V Morrill</author>
</authors>
<title>Parsing and Derivational Equivalence.</title>
<date>1989</date>
<booktitle>In Proceedings of the Annual Meeting of the European Chapter of the Association for Computational Linguistics.</booktitle>
<contexts>
<context position="16384" citStr="Morrill 1989" startWordPosition="2696" endWordPosition="2697">t gives rise to difficulties with (5). John loves Mary madly (5) s/vp vp/np np vp\vp In (5), it is precisely the non-left-branching derivation of &apos;John loves Mary&apos; which is necessary in order to make the VP constituent available for combination with the adverb. (See Pareschi and Steedman 1987.) 5.2 Previous Approaches Following up on the work of Lambek (1958) who proposed that the process of deriving the grammaticality of a string of categories be viewed as a proof, there have been quite a few proposals put forth for computing only normal forms of derivations or proofs (Konig 1989; Hepple and Morrill 1989; Hepple 1991; inter alia). The basic idea with all of these works is to define &apos;normal forms&apos; — distinguished members of each equivalence class of derivations, and to require the parser to search this smaller space of possible derivations. But none of the proposed methods result in parsing systems which proceed incrementally through the string.4 Karttunen (1989) and others have proposed chart-based parsers which directly address the derivational ambiguity problem. For the present purpose, the principal feature of chart parsing — the factoring out of constituents from analyses — turns out to c</context>
<context position="21191" citStr="Morrill (1989)" startWordPosition="3523" endWordPosition="3524">over pairs of derivations such that the second is derived from the first by one application of Let 4-- be the converse of Let be U Let —4. be the reflexive transitive closure of and similarly, 4,-- the reflexive transitive closure of and i&lt; » the reflexive transitive closure of Note that 0 ». is an equivalence relation. A rewrite system is strongly normalizing (SN) if every sequence of applications of --+ is finite. Theorem 1 is SN5 proof Every derivation with n internal nodes is assigned a positive integer score. An application of is guaranteed to yield a derivation with a lower 511epple and Morrill (1989) Proved SN for a slight variant of --+. The present proof provides a tighter score function, see lemma 1 below. &gt;0 reveal &gt;0 &lt;0 &gt;0 a &gt;n &lt;m+n-1 &lt;rn &lt;n 129 Figure 2: Schema for one redex in DRS score. This is done by defining functions # and a for each node of the derivation as follows: , 0 if x is a leaf node #(x) = 1 1 + #(A(x))+ #(p(x)) otherwise cr(x) = 0 if x is a leaf node o(x)) + o-(p(x))+ #(A(x)) otherwise Each application of decreases a, the score of the derivation. This follows from the monotonic dependency of the score of the root of the derivation upon the scores of each sub-derivati</context>
</contexts>
<marker>Morrill, 1989</marker>
<rawString>Hepple, Mark It. and Glyn V. Morrill. 1989. Parsing and Derivational Equivalence. In Proceedings of the Annual Meeting of the European Chapter of the Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Lauri Karttunen</author>
</authors>
<title>Radical Lexicalism.</title>
<date>1989</date>
<booktitle>In Mark Baltin and Anthony S. Kroch (Eds.), Alternative Conceptions of Phrase Structure,</booktitle>
<pages>43--65</pages>
<publisher>University of Chicago Press.</publisher>
<location>Chicago:</location>
<contexts>
<context position="16749" citStr="Karttunen (1989)" startWordPosition="2756" endWordPosition="2757"> who proposed that the process of deriving the grammaticality of a string of categories be viewed as a proof, there have been quite a few proposals put forth for computing only normal forms of derivations or proofs (Konig 1989; Hepple and Morrill 1989; Hepple 1991; inter alia). The basic idea with all of these works is to define &apos;normal forms&apos; — distinguished members of each equivalence class of derivations, and to require the parser to search this smaller space of possible derivations. But none of the proposed methods result in parsing systems which proceed incrementally through the string.4 Karttunen (1989) and others have proposed chart-based parsers which directly address the derivational ambiguity problem. For the present purpose, the principal feature of chart parsing — the factoring out of constituents from analyses — turns out to create an encumberance: The interpreter cannot compare constituents, or arcs, for the purposes of ambiguity resolution. It must compare analyses of the entire prefix so far, which are awkward to compute from the developing chart. 3 Discussion of the consequences of this move on the processing of picture noun extractions and ambiguityrelated filled-gap effects is o</context>
</contexts>
<marker>Karttunen, 1989</marker>
<rawString>Karttunen, Lauri. 1989. Radical Lexicalism. In Mark Baltin and Anthony S. Kroch (Eds.), Alternative Conceptions of Phrase Structure, 43-65. Chicago: University of Chicago Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Alan Kawamoto</author>
<author>William Farrar</author>
</authors>
<title>The Return of Visiting Relatives: Pragmatic Effects in Sentence Processing.</title>
<date>1993</date>
<journal>Quarterly Journal of Experimental Psychology</journal>
<volume>46</volume>
<pages>487</pages>
<contexts>
<context position="2634" citStr="Kawamoto and Farrar 1993" startWordPosition="393" endWordPosition="397">n. 1.1 Ambiguity Resolution Recently, a great deal of evidence has accumulated that humans resolve syntactic ambiguity by considering the meaning of the available analyses and selecting the &apos;best&apos; one. Various criteria for goodness of meaning have been advanced in the psycholinguistic literature: e.g. thematic compatibility and lexical selection (Trueswell and Tanenhaus 1994), discourse felicity of definite expressions (Altmann et al. 1994), temporal coherence in discourse (Trueswell and Tanenhaus 1991), grammatical function vis a vis given/new status (Niv 1993b), and general world-knowledge (Kawamoto and Farrar 1993). Many of the works cited above consider the timing of the ambiguity resolution decision. The evidence is overwhelming that ambiguity is resolved within a word or two of the arrival of disambiguating information— that is, when there is a meaningbased criterion which militates toward one or another syntactically available analysis, that analysis is selected. Should the other analysis turn out to be the ultimately correct analysis, a garden path will result. Given that the various analyses available are compared on various criteria of sensibleness, it follows that these analyses are constructed </context>
</contexts>
<marker>Kawamoto, Farrar, 1993</marker>
<rawString>Kawamoto, Alan and William Farrar. 1993. The Return of Visiting Relatives: Pragmatic Effects in Sentence Processing. Quarterly Journal of Experimental Psychology 46A(3):463 -487.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jan W Klop</author>
</authors>
<title>Term Rewrite Systems. In</title>
<date>1992</date>
<journal>Maibaum (Eds.), Handbook of Logic in Computer Science,</journal>
<volume>2</volume>
<pages>116</pages>
<publisher>Clarendon Press.</publisher>
<location>Oxford:</location>
<contexts>
<context position="20038" citStr="Klop (1992)" startWordPosition="3320" endWordPosition="3321">tbranching derivation by repeated application the local transformations defined in (8) and (9). The right frontier of the rewritten derivation now provides all the grammatically possible attachment sites. W/X X (Yi ••• (Y,_ /Ym Ym IZi...IZn w NI. • • &apos;m W • (Ym_1(Zi • • WPC X WI. • • /YmYm Zi • &gt;n X1Y-1. •IYm_ilZi• • • (Zn &gt;m+n-1 W (Yi• • (Ym-i(Zi. • • (Zn (9) Yrn 1Z1- • • (Zn X lYi• • 1Yrn-i \Ym W\X X lYi• • • (Yrn--11Zi• • (Z,„, &lt;11 W &apos;Yr • (Ym-i IZi • • •jZ Ym (Zi. -(Z„ X (Yi • • lYm_i\YM W \X W IY1- • • (Yrn-i \Yrn WIY1. - • (Yrn-i IZi• • (Zn Results from the study of rewrite systems (see Klop (1992) for an overview) help determine the computational complexity of this operation: 6.1 A Rewrite System for Derivations If x is a node in a binary tree let A(x) (resp. p(x)) refer to its left (right) child. Any subtree of a derivation which matches the left-hand-side of either (8) or (9) is called a redex. The result of replacing a redex by the corresponding right-hand-side of a rule is called the contractum. A derivation is in normal form (NF) if it contains no redexes. In the following I use the symbol to also stand for the relation over pairs of derivations such that the second is derived fro</context>
</contexts>
<marker>Klop, 1992</marker>
<rawString>Klop, Jan W. 1992. Term Rewrite Systems. In Samson Abramsky, Dov M. Gabbay, and T. S. E. Maibaum (Eds.), Handbook of Logic in Computer Science, Vol. 2, 1 - 116. Oxford: Clarendon Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Esther Konig</author>
</authors>
<title>Parsing as Natural Deduction.</title>
<date>1989</date>
<booktitle>In Proceedings of the 27th Annual Meeting of the Association for Computational Linguistics,</booktitle>
<pages>272--279</pages>
<contexts>
<context position="16359" citStr="Konig 1989" startWordPosition="2692" endWordPosition="2693">bility of derivation, it gives rise to difficulties with (5). John loves Mary madly (5) s/vp vp/np np vp\vp In (5), it is precisely the non-left-branching derivation of &apos;John loves Mary&apos; which is necessary in order to make the VP constituent available for combination with the adverb. (See Pareschi and Steedman 1987.) 5.2 Previous Approaches Following up on the work of Lambek (1958) who proposed that the process of deriving the grammaticality of a string of categories be viewed as a proof, there have been quite a few proposals put forth for computing only normal forms of derivations or proofs (Konig 1989; Hepple and Morrill 1989; Hepple 1991; inter alia). The basic idea with all of these works is to define &apos;normal forms&apos; — distinguished members of each equivalence class of derivations, and to require the parser to search this smaller space of possible derivations. But none of the proposed methods result in parsing systems which proceed incrementally through the string.4 Karttunen (1989) and others have proposed chart-based parsers which directly address the derivational ambiguity problem. For the present purpose, the principal feature of chart parsing — the factoring out of constituents from </context>
</contexts>
<marker>Konig, 1989</marker>
<rawString>Konig, Esther. 1989. Parsing as Natural Deduction. In Proceedings of the 27th Annual Meeting of the Association for Computational Linguistics, 272-279, June.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Joachim Lambek</author>
</authors>
<date>1958</date>
<journal>The Mathematics of Sentence Structure. American Mathematical Monthly</journal>
<pages>65--154</pages>
<contexts>
<context position="16133" citStr="Lambek (1958)" startWordPosition="2652" endWordPosition="2653">t learns that it is usually most efficient to combine whenever possible, and to discard an analysis in which a combination is possible, but not taken.3. While this left-branching criterion eliminates the inefficiency due to flexibility of derivation, it gives rise to difficulties with (5). John loves Mary madly (5) s/vp vp/np np vp\vp In (5), it is precisely the non-left-branching derivation of &apos;John loves Mary&apos; which is necessary in order to make the VP constituent available for combination with the adverb. (See Pareschi and Steedman 1987.) 5.2 Previous Approaches Following up on the work of Lambek (1958) who proposed that the process of deriving the grammaticality of a string of categories be viewed as a proof, there have been quite a few proposals put forth for computing only normal forms of derivations or proofs (Konig 1989; Hepple and Morrill 1989; Hepple 1991; inter alia). The basic idea with all of these works is to define &apos;normal forms&apos; — distinguished members of each equivalence class of derivations, and to require the parser to search this smaller space of possible derivations. But none of the proposed methods result in parsing systems which proceed incrementally through the string.4 </context>
</contexts>
<marker>Lambek, 1958</marker>
<rawString>Lambek, Joachim. 1958. The Mathematics of Sentence Structure. American Mathematical Monthly 65:154-169.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Maryellen MacDonland</author>
<author>Adam Just</author>
<author>Patricia Carpenter</author>
</authors>
<date>1992</date>
<booktitle>Working Memory Constraints on the Processing of Syntactic Ambiguity. Cognitive Psychology</booktitle>
<pages>24--56</pages>
<contexts>
<context position="3458" citStr="MacDonland et al. 1992" startWordPosition="522" endWordPosition="525">nformation— that is, when there is a meaningbased criterion which militates toward one or another syntactically available analysis, that analysis is selected. Should the other analysis turn out to be the ultimately correct analysis, a garden path will result. Given that the various analyses available are compared on various criteria of sensibleness, it follows that these analyses are constructed and maintained in parallel until disambiguating information arrives. Indeed, there is psycholinguistic evidence that the processor maintains the various analyses in parallel (Nicol and Pickering 1993; MacDonland et al. 1992). Our parser, therefore, must be able to build and maintain analyses in parallel. It must also extract from the developing parse in a prompt fashion all of the semantically relevant syntactic commitments (e.g. predicate-argument relations) in order to allow the interpretation module that it feeds to make accurate evaluations of the meaning. Recovery from garden paths is not addressed in this paper. 125 1.2 Parser and Grammar Let us adopt the widely held position that humans posses a representation of grammatical competence which is independent of any process (e.g. production, perception, acqui</context>
</contexts>
<marker>MacDonland, Just, Carpenter, 1992</marker>
<rawString>MacDonland, Maryellen, Adam Just, and Patricia Carpenter. 1992. Working Memory Constraints on the Processing of Syntactic Ambiguity. Cognitive Psychology 24:56-98.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Janet L Nicol</author>
<author>Martin J Pickering</author>
</authors>
<title>Processing Syntactically Ambiguous Sentences: Evidence from Semantic Priming.</title>
<date>1993</date>
<journal>Journal of Psycholinguistic Research.</journal>
<contexts>
<context position="3433" citStr="Nicol and Pickering 1993" startWordPosition="518" endWordPosition="521">rrival of disambiguating information— that is, when there is a meaningbased criterion which militates toward one or another syntactically available analysis, that analysis is selected. Should the other analysis turn out to be the ultimately correct analysis, a garden path will result. Given that the various analyses available are compared on various criteria of sensibleness, it follows that these analyses are constructed and maintained in parallel until disambiguating information arrives. Indeed, there is psycholinguistic evidence that the processor maintains the various analyses in parallel (Nicol and Pickering 1993; MacDonland et al. 1992). Our parser, therefore, must be able to build and maintain analyses in parallel. It must also extract from the developing parse in a prompt fashion all of the semantically relevant syntactic commitments (e.g. predicate-argument relations) in order to allow the interpretation module that it feeds to make accurate evaluations of the meaning. Recovery from garden paths is not addressed in this paper. 125 1.2 Parser and Grammar Let us adopt the widely held position that humans posses a representation of grammatical competence which is independent of any process (e.g. prod</context>
</contexts>
<marker>Nicol, Pickering, 1993</marker>
<rawString>Nicol, Janet L. and Martin J. Pickering. 1993. Processing Syntactically Ambiguous Sentences: Evidence from Semantic Priming. Journal of Psycholinguistic Research.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael Niv</author>
</authors>
<title>A Computational Model of Syntactic Processing: Ambiguity Resolution from Interpretation.</title>
<date>1993</date>
<tech>PhD thesis,</tech>
<pages>93--27</pages>
<institution>University of Pennsylvania.</institution>
<contexts>
<context position="2576" citStr="Niv 1993" startWordPosition="388" endWordPosition="389">ing CCG derivations. Any errors are my own. 1.1 Ambiguity Resolution Recently, a great deal of evidence has accumulated that humans resolve syntactic ambiguity by considering the meaning of the available analyses and selecting the &apos;best&apos; one. Various criteria for goodness of meaning have been advanced in the psycholinguistic literature: e.g. thematic compatibility and lexical selection (Trueswell and Tanenhaus 1994), discourse felicity of definite expressions (Altmann et al. 1994), temporal coherence in discourse (Trueswell and Tanenhaus 1991), grammatical function vis a vis given/new status (Niv 1993b), and general world-knowledge (Kawamoto and Farrar 1993). Many of the works cited above consider the timing of the ambiguity resolution decision. The evidence is overwhelming that ambiguity is resolved within a word or two of the arrival of disambiguating information— that is, when there is a meaningbased criterion which militates toward one or another syntactically available analysis, that analysis is selected. Should the other analysis turn out to be the ultimately correct analysis, a garden path will result. Given that the various analyses available are compared on various criteria of sen</context>
<context position="15075" citStr="Niv (1993" startWordPosition="2488" endWordPosition="2489">even leaves. The fact that this sentence makes no unusual demands on humans makes it clear that its exponentially proliferating ambiguous analyses are pruned somehow. The interpreter, which can resolve many kinds of ambiguity, cannot be used to for this task: it has no visible basis for determining, for example, that the single-constituent analysis &apos;John was thinking&apos; 2In addition to the category-ambiguity problem in (3), the viable analysis criterion solves other problems, analogous to shift-reduce ambiguities, which are omitted here for reasons of space. The interested reader is referred to Niv (1993a) for a comprehensive discussion and an implementation of the parser proposed here. somehow makes more sense (in CCG) than the twoconstituent analysis `John&apos;+`was thinking&apos;. Note that the maximally left-branching derivation is the one which most promptly identifies syntactic relations, and is thus the preferred derivation. It is possible to extend the viable analysis criterion to encompass this consideration of efficiency as well. The infant learns that it is usually most efficient to combine whenever possible, and to discard an analysis in which a combination is possible, but not taken.3. Wh</context>
<context position="17388" citStr="Niv (1993" startWordPosition="2857" endWordPosition="2858">t-based parsers which directly address the derivational ambiguity problem. For the present purpose, the principal feature of chart parsing — the factoring out of constituents from analyses — turns out to create an encumberance: The interpreter cannot compare constituents, or arcs, for the purposes of ambiguity resolution. It must compare analyses of the entire prefix so far, which are awkward to compute from the developing chart. 3 Discussion of the consequences of this move on the processing of picture noun extractions and ambiguityrelated filled-gap effects is omitted for lack of space. See Niv (1993a). &apos;In the case of Hepple&apos;s (1991) proposal, a leftbranching normal form is indeed computed. But its computation must be delayed for some words, so it does not provide the interpreter with timely information about the incoming string. 128 Pareschi and Steedman (1987) propose the following strategy: (which can be taken out of the chart-parsing context of their paper) construct only maximally left-branching derivations, but allow a limited form of backtracking when a locally non-left-branching derivation turns out to have been necessary. For example, when parsing (5), Pareschi and Steedman&apos;s al</context>
<context position="18692" citStr="Niv 1993" startWordPosition="3068" endWordPosition="3069">, it applies &gt;0 in reverse to solve for the hidden VP constituent &apos;loves Mary&apos; by subtracting the sjvp category &apos;John&apos; from the s category &apos;John loves Mary&apos;: (6) &gt;1 John loves Mary madly s/vp vp/np np vp\vp s/np vp vp The idea with this &apos;revealing&apos; operation is to exploit the fact that the rules &gt;n and &lt;n, when viewed as three-place relations, are functional in all three arguments. That is, knowledge any two of {left constituent, right constituent, result}, uniquely determines the third. There are many problems with the completeness and soundness Pareschi and Steedman&apos;s proposal (Hepple 1987; Niv 1993a). For example, in (7), the category b c cannot be revealed after it had participated in two combinations of mixed direction: &lt;0 and &gt;0. a/b c d\c b\d b\c\(b\c) &lt;0 &lt;0 &gt;0 stuck 6 A Proposal Pareschi and Steedman&apos;s idea of lazy parsing is very attractive in the present setting. I propose to replace their unification-based revealing operation with a normal-form based manipulation of the derivation history. The idea is to construct and maintain the maximally incremental, left-branching derivations. (see section 4.) When a constituent such as the VP &apos;loves Mary&apos; in (5) may be necessary, e.g. whene</context>
</contexts>
<marker>Niv, 1993</marker>
<rawString>Niv, Michael. 1993a. A Computational Model of Syntactic Processing: Ambiguity Resolution from Interpretation. PhD thesis, University of Pennsylvania. (ftp://ftp.cis.upenn.edu/pub/-ircs/tr/93-27.ps).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael Niv</author>
</authors>
<title>Resolution of Syntactic Ambiguity: the Case of New Subjects.</title>
<date>1993</date>
<booktitle>In Proceedings of the 15th Annual Conference of the Cognitive Science Society,</booktitle>
<location>Hillsdale, NJ. Lawrence Erlbaum Associates.</location>
<contexts>
<context position="2576" citStr="Niv 1993" startWordPosition="388" endWordPosition="389">ing CCG derivations. Any errors are my own. 1.1 Ambiguity Resolution Recently, a great deal of evidence has accumulated that humans resolve syntactic ambiguity by considering the meaning of the available analyses and selecting the &apos;best&apos; one. Various criteria for goodness of meaning have been advanced in the psycholinguistic literature: e.g. thematic compatibility and lexical selection (Trueswell and Tanenhaus 1994), discourse felicity of definite expressions (Altmann et al. 1994), temporal coherence in discourse (Trueswell and Tanenhaus 1991), grammatical function vis a vis given/new status (Niv 1993b), and general world-knowledge (Kawamoto and Farrar 1993). Many of the works cited above consider the timing of the ambiguity resolution decision. The evidence is overwhelming that ambiguity is resolved within a word or two of the arrival of disambiguating information— that is, when there is a meaningbased criterion which militates toward one or another syntactically available analysis, that analysis is selected. Should the other analysis turn out to be the ultimately correct analysis, a garden path will result. Given that the various analyses available are compared on various criteria of sen</context>
<context position="15075" citStr="Niv (1993" startWordPosition="2488" endWordPosition="2489">even leaves. The fact that this sentence makes no unusual demands on humans makes it clear that its exponentially proliferating ambiguous analyses are pruned somehow. The interpreter, which can resolve many kinds of ambiguity, cannot be used to for this task: it has no visible basis for determining, for example, that the single-constituent analysis &apos;John was thinking&apos; 2In addition to the category-ambiguity problem in (3), the viable analysis criterion solves other problems, analogous to shift-reduce ambiguities, which are omitted here for reasons of space. The interested reader is referred to Niv (1993a) for a comprehensive discussion and an implementation of the parser proposed here. somehow makes more sense (in CCG) than the twoconstituent analysis `John&apos;+`was thinking&apos;. Note that the maximally left-branching derivation is the one which most promptly identifies syntactic relations, and is thus the preferred derivation. It is possible to extend the viable analysis criterion to encompass this consideration of efficiency as well. The infant learns that it is usually most efficient to combine whenever possible, and to discard an analysis in which a combination is possible, but not taken.3. Wh</context>
<context position="17388" citStr="Niv (1993" startWordPosition="2857" endWordPosition="2858">t-based parsers which directly address the derivational ambiguity problem. For the present purpose, the principal feature of chart parsing — the factoring out of constituents from analyses — turns out to create an encumberance: The interpreter cannot compare constituents, or arcs, for the purposes of ambiguity resolution. It must compare analyses of the entire prefix so far, which are awkward to compute from the developing chart. 3 Discussion of the consequences of this move on the processing of picture noun extractions and ambiguityrelated filled-gap effects is omitted for lack of space. See Niv (1993a). &apos;In the case of Hepple&apos;s (1991) proposal, a leftbranching normal form is indeed computed. But its computation must be delayed for some words, so it does not provide the interpreter with timely information about the incoming string. 128 Pareschi and Steedman (1987) propose the following strategy: (which can be taken out of the chart-parsing context of their paper) construct only maximally left-branching derivations, but allow a limited form of backtracking when a locally non-left-branching derivation turns out to have been necessary. For example, when parsing (5), Pareschi and Steedman&apos;s al</context>
<context position="18692" citStr="Niv 1993" startWordPosition="3068" endWordPosition="3069">, it applies &gt;0 in reverse to solve for the hidden VP constituent &apos;loves Mary&apos; by subtracting the sjvp category &apos;John&apos; from the s category &apos;John loves Mary&apos;: (6) &gt;1 John loves Mary madly s/vp vp/np np vp\vp s/np vp vp The idea with this &apos;revealing&apos; operation is to exploit the fact that the rules &gt;n and &lt;n, when viewed as three-place relations, are functional in all three arguments. That is, knowledge any two of {left constituent, right constituent, result}, uniquely determines the third. There are many problems with the completeness and soundness Pareschi and Steedman&apos;s proposal (Hepple 1987; Niv 1993a). For example, in (7), the category b c cannot be revealed after it had participated in two combinations of mixed direction: &lt;0 and &gt;0. a/b c d\c b\d b\c\(b\c) &lt;0 &lt;0 &gt;0 stuck 6 A Proposal Pareschi and Steedman&apos;s idea of lazy parsing is very attractive in the present setting. I propose to replace their unification-based revealing operation with a normal-form based manipulation of the derivation history. The idea is to construct and maintain the maximally incremental, left-branching derivations. (see section 4.) When a constituent such as the VP &apos;loves Mary&apos; in (5) may be necessary, e.g. whene</context>
</contexts>
<marker>Niv, 1993</marker>
<rawString>Niv, Michael. 1993b. Resolution of Syntactic Ambiguity: the Case of New Subjects. In Proceedings of the 15th Annual Conference of the Cognitive Science Society, Hillsdale, NJ. Lawrence Erlbaum Associates.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael Niv</author>
</authors>
<title>The complexity of normal form rewrite sequences for Associativity.</title>
<date>1994</date>
<tech>Technical Report LCL 94-6,</tech>
<institution>Computer Science Department,</institution>
<contexts>
<context position="22644" citStr="Niv (1994)" startWordPosition="3815" endWordPosition="3816">hole derivation. in redex: #(d) #(a) + #(b) + 1 o(d) • o(a) + cr(b)+ #(a) cr(e) o(a) + o•(b) + o(c) + #(b) + 2 #(a) + 1 in contractum: o(f) o-(b)+ a(c) + #(b) o-(e&apos;) • a(a) + a(f) + #(a) • cr(a) + cr(b)± a(c) + #(6)+ #(a) a(a) + a(b)+ o(c) + #(b)+ 2 - #(a) + 1 0 Observe that #(x) is the number of internal nodes ins. Lemma 1 Given a derivation x, let n = #x. Every sequence of applications of is of length at most n(n — 1)/2.6 proof By induction on n: Base case: n = 1; 0 applications are necessary. Induction: Suppose true for all derivations of fewer than n internal nodes. Let m = #A(x). So 0 &lt; 6Niv (1994) shows by example that this bound is tight. m &lt; n — 1 and #p(x) n — m — 1. o(x) — n(n — 1)/2 = = a(A(x))+ cr(p(x))+ #(A(x))— n(n — 1)/2 &lt; m(m-1) (n -1n-m-2)m n(n2-1) = (In + 1)(m — (n — 1)) &lt;0 recalling that 0 &lt; m &lt; n — 1 0 So far I have shown that every sequence of applications of is not very long: at most quadratic in the size of the derivation. I now show that when there is a choice of redex, it makes no difference which redex one picks. That is, all redex selection strategies result in the same normal form. A rewrite system is Church-Rosser (CR) just in case Vx, y.(x y 33z.(x--- A z)) A re</context>
<context position="24320" citStr="Niv (1994)" startWordPosition="4157" endWordPosition="4158">at the order of application of makes no difference. case 2: x and y share some internal node. Without loss of generality, y does not dominate x. There exists a derivation z such that z A w&amp;quot; z This is depicted in figure 3. (Note that all three internal nodes in figure 3 are of the same rule direction, either &gt; or &lt;.) 0 Lemma 3 (Newman) WCR A SN D CR. Theorem 2 is CR. proof From theorem 1 and lemmas 2 and 3. 0 Therefore any maximal sequence of applications of will lead to the normal form&apos;. We are free to select the most efficient redex selection scheme. From lemma 1 the worst case is quadratic. Niv (1994) shows that the optimal strategy, of applying closest as possible to the root, yields --- applications sequences of at most n steps. 7 Assuming, as is the case with extant CCG accounts, that constraints on the applicability of the combinatory rules do not present significant roadblocks to the derivation rewrite process. 130 Arrows are annotated by the substrucure to which they are applied Figure 3: Why —4 is weakly Church-Rosser Note that all that was said in this section generalizes beyond CCG derivations to any associative algebra. 6.2 Discussion Given the rightmost subconstituent recovered </context>
</contexts>
<marker>Niv, 1994</marker>
<rawString>Niv, Michael. 1994. The complexity of normal form rewrite sequences for Associativity. Technical Report LCL 94-6, Computer Science Department, Technion. (ftp://ftp.cis.upenn.-edu/pub/niv/rewrite.ps).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Remo Pareschi</author>
<author>Mark J Steedman</author>
</authors>
<title>A Lazy Way to Chart Parse with Combinatory Grammars.</title>
<date>1987</date>
<booktitle>In Proceedings of the 25th Annual Meeting of the Association for Computational Linguistics.</booktitle>
<contexts>
<context position="16065" citStr="Pareschi and Steedman 1987" startWordPosition="2639" endWordPosition="2642">alysis criterion to encompass this consideration of efficiency as well. The infant learns that it is usually most efficient to combine whenever possible, and to discard an analysis in which a combination is possible, but not taken.3. While this left-branching criterion eliminates the inefficiency due to flexibility of derivation, it gives rise to difficulties with (5). John loves Mary madly (5) s/vp vp/np np vp\vp In (5), it is precisely the non-left-branching derivation of &apos;John loves Mary&apos; which is necessary in order to make the VP constituent available for combination with the adverb. (See Pareschi and Steedman 1987.) 5.2 Previous Approaches Following up on the work of Lambek (1958) who proposed that the process of deriving the grammaticality of a string of categories be viewed as a proof, there have been quite a few proposals put forth for computing only normal forms of derivations or proofs (Konig 1989; Hepple and Morrill 1989; Hepple 1991; inter alia). The basic idea with all of these works is to define &apos;normal forms&apos; — distinguished members of each equivalence class of derivations, and to require the parser to search this smaller space of possible derivations. But none of the proposed methods result </context>
<context position="17656" citStr="Pareschi and Steedman (1987)" startWordPosition="2899" endWordPosition="2902">t compare constituents, or arcs, for the purposes of ambiguity resolution. It must compare analyses of the entire prefix so far, which are awkward to compute from the developing chart. 3 Discussion of the consequences of this move on the processing of picture noun extractions and ambiguityrelated filled-gap effects is omitted for lack of space. See Niv (1993a). &apos;In the case of Hepple&apos;s (1991) proposal, a leftbranching normal form is indeed computed. But its computation must be delayed for some words, so it does not provide the interpreter with timely information about the incoming string. 128 Pareschi and Steedman (1987) propose the following strategy: (which can be taken out of the chart-parsing context of their paper) construct only maximally left-branching derivations, but allow a limited form of backtracking when a locally non-left-branching derivation turns out to have been necessary. For example, when parsing (5), Pareschi and Steedman&apos;s algorithm constructs the left branching analysis for &apos;John loves Mary&apos;. When it encounters &apos;madly&apos;, it applies &gt;0 in reverse to solve for the hidden VP constituent &apos;loves Mary&apos; by subtracting the sjvp category &apos;John&apos; from the s category &apos;John loves Mary&apos;: (6) &gt;1 John lo</context>
</contexts>
<marker>Pareschi, Steedman, 1987</marker>
<rawString>Pareschi, Remo and Mark J. Steedman. 1987. A Lazy Way to Chart Parse with Combinatory Grammars. In Proceedings of the 25th Annual Meeting of the Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stuart M Shieber</author>
<author>Mark Johnson</author>
</authors>
<title>Variations on Incremental Interpretation.</title>
<date>1993</date>
<journal>Journal of Psycholinguistic Research.</journal>
<note>(to appear).</note>
<contexts>
<context position="6423" citStr="Shieber and Johnson (1993)" startWordPosition="1018" endWordPosition="1021">, the processor has already resolved the ambiguity introduced by the word &apos;sent&apos;. That is, in the main-verb analysis of &apos;sent&apos;, the interpreter is aware of the relation between the subject the verb before the end of the VP. But the minimal parser cannot put the subject together with &apos;sent&apos; or &apos;sent for the&apos; because the latter are not a complete VP! There are two possible solutions to this problem, each relaxes one of the two suppositions above: Steedman (1994) argues for a grammatical theory (CCG) which does not always make the subjectpredicate juncture the primary division point of a clause. Shieber and Johnson (1993) on the other hand, argue that there is no need to assume that a constituent has to be complete before it is combined with its sister(s). At this time, neither approach is sufficiently developed to be evaluable (e.g. they both lack broad coverage grammar) so either one is viable. In this paper, I develop the first. 2 Preliminaries CCG is a lexicalized grammar formalism — a lexicon assigns each word to one or more grammatical categories. Adjacent constituents can combine by one of a small number of combinatory rules. The universe of grammatical categories contains a collection of basic categori</context>
</contexts>
<marker>Shieber, Johnson, 1993</marker>
<rawString>Shieber, Stuart M. and Mark Johnson. 1993. Variations on Incremental Interpretation. Journal of Psycholinguistic Research. (to appear).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mark J Steedman</author>
</authors>
<title>Combinatory Grammars and Parasitic Gaps. Natural Language and Linguistic Theory 5:403-439.</title>
<date>1987</date>
<contexts>
<context position="8542" citStr="Steedman 1987" startWordPosition="1382" endWordPosition="1383">f their frontiers is w. 3 The Simplest Parser Let us consider the simplest conceivable parser. Its specification is &amp;quot;find all analyses of the string so far.&amp;quot; It has a collection of slots for maintaining one analysis each, in parallel. Each slot maintains an analysis of the string seen so far — a sequence of one or more derivations. The parser has two operations, as shown in figure 1. This parser succeeds in constructing the incremental analysis (2) necessary for solving the problem in (1). &apos;Two common combinatory rules, type-raising and substitution are not listed here. The substitution rule (Steedman 1987) is orthogonal to the present discussion and can be added without modification. The rule for type-raising (see e.g. Dowty 1988) can cause difficulties for the parsing scheme advocated here (Hepple 1987) and is therefore assumed to apply in the lexicon. So a proper name, for example, would be have two categories: np and s/(s\np). 126 Forward Combination rule name Backward Combination rule name X/Y Y --+ X &gt;0 Y X\Y ---■ X &lt;0 ---4 ----&gt;. X/Y YIZ XV &gt;1 YIZ X\Y XIZ &lt;1 X/Y Y71. I Z2 XTZi I Z2 &gt;2 Yrti I Z2 X\Y --- Xili I Z2 &lt;2 ---, X/Y WI...1Z,2 --L-+ XIZi...IZT, &gt;n YIZi... IZ,, X\Y ---* XVI... IZ,,,</context>
<context position="14149" citStr="Steedman 1987" startWordPosition="2343" endWordPosition="2345">in English, the problem of learning the viable analysis criterion from data promises to be comparable to other n-gram learning tasks. The empirical validation of this proposal awaits the availability of a broad coverage CCG for English, and other languages.2 5 CCG and flexible derivation 5.1 The Problem CCG&apos;s distinguishing characteristic is its derivational flexibility — the fact that one string is potentially assigned many truth-conditionally equivalent analyses. This feature is crucial to the present approach of incremental parsing (as well as for a range of grammatical phenomena, see e.g. Steedman 1987, 1994; Dowty 1988). But the additional ambiguity, sometimes referred to as &apos;spurious&apos;, is also a source of difficulty for parsing. For example, the truth-conditionally unambiguous string &apos;John was thinking that Bill had left&apos; has CCG derivations corresponding to each of the 132 different binary trees possible for seven leaves. The fact that this sentence makes no unusual demands on humans makes it clear that its exponentially proliferating ambiguous analyses are pruned somehow. The interpreter, which can resolve many kinds of ambiguity, cannot be used to for this task: it has no visible basis</context>
<context position="16065" citStr="Steedman 1987" startWordPosition="2641" endWordPosition="2642">ion to encompass this consideration of efficiency as well. The infant learns that it is usually most efficient to combine whenever possible, and to discard an analysis in which a combination is possible, but not taken.3. While this left-branching criterion eliminates the inefficiency due to flexibility of derivation, it gives rise to difficulties with (5). John loves Mary madly (5) s/vp vp/np np vp\vp In (5), it is precisely the non-left-branching derivation of &apos;John loves Mary&apos; which is necessary in order to make the VP constituent available for combination with the adverb. (See Pareschi and Steedman 1987.) 5.2 Previous Approaches Following up on the work of Lambek (1958) who proposed that the process of deriving the grammaticality of a string of categories be viewed as a proof, there have been quite a few proposals put forth for computing only normal forms of derivations or proofs (Konig 1989; Hepple and Morrill 1989; Hepple 1991; inter alia). The basic idea with all of these works is to define &apos;normal forms&apos; — distinguished members of each equivalence class of derivations, and to require the parser to search this smaller space of possible derivations. But none of the proposed methods result </context>
<context position="17656" citStr="Steedman (1987)" startWordPosition="2901" endWordPosition="2902">stituents, or arcs, for the purposes of ambiguity resolution. It must compare analyses of the entire prefix so far, which are awkward to compute from the developing chart. 3 Discussion of the consequences of this move on the processing of picture noun extractions and ambiguityrelated filled-gap effects is omitted for lack of space. See Niv (1993a). &apos;In the case of Hepple&apos;s (1991) proposal, a leftbranching normal form is indeed computed. But its computation must be delayed for some words, so it does not provide the interpreter with timely information about the incoming string. 128 Pareschi and Steedman (1987) propose the following strategy: (which can be taken out of the chart-parsing context of their paper) construct only maximally left-branching derivations, but allow a limited form of backtracking when a locally non-left-branching derivation turns out to have been necessary. For example, when parsing (5), Pareschi and Steedman&apos;s algorithm constructs the left branching analysis for &apos;John loves Mary&apos;. When it encounters &apos;madly&apos;, it applies &gt;0 in reverse to solve for the hidden VP constituent &apos;loves Mary&apos; by subtracting the sjvp category &apos;John&apos; from the s category &apos;John loves Mary&apos;: (6) &gt;1 John lo</context>
</contexts>
<marker>Steedman, 1987</marker>
<rawString>Steedman, Mark J. 1987. Combinatory Grammars and Parasitic Gaps. Natural Language and Linguistic Theory 5:403-439.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mark J Steedman</author>
</authors>
<title>Gapping as Constituent Coordination.</title>
<date>1990</date>
<journal>Linguistics and Philosophy</journal>
<pages>13--207</pages>
<marker>Steedman, 1990</marker>
<rawString>Steedman, Mark J. 1990. Gapping as Constituent Coordination. Linguistics and Philosophy 13:207-264.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mark J Steedman</author>
</authors>
<title>Grammars and Processors. In Hans Kamp and Christian Rohrer (Eds.), Aspects of Computational Linguistics.</title>
<date>1994</date>
<publisher>Springer Verlag.</publisher>
<note>(to appear).</note>
<contexts>
<context position="4095" citStr="Steedman (1994)" startWordPosition="623" endWordPosition="625">e, must be able to build and maintain analyses in parallel. It must also extract from the developing parse in a prompt fashion all of the semantically relevant syntactic commitments (e.g. predicate-argument relations) in order to allow the interpretation module that it feeds to make accurate evaluations of the meaning. Recovery from garden paths is not addressed in this paper. 125 1.2 Parser and Grammar Let us adopt the widely held position that humans posses a representation of grammatical competence which is independent of any process (e.g. production, perception, acquisition) that uses it. Steedman (1994) argues that if two theories of the grammar and processor package have identical empirical coverage, but one has a more complex parser, then the other is preferred. This preference is not just on philosophical grounds of cleanliness of one&apos;s theories, but stems from consideration of the evolution of the human linguistic capacity: A theory whose grammar requires a complex parser in order to be of any use would entail a more complex or less likely evolutionary path which the parser and grammar took together than would a theory whose grammar requires little specialized apparatus by way of a parse</context>
<context position="6261" citStr="Steedman (1994)" startWordPosition="994" endWordPosition="995">en path is avoided because flowers are not good senders. The difference between (1)a and b indicates that well before the word &apos;arrived&apos; is encountered, the processor has already resolved the ambiguity introduced by the word &apos;sent&apos;. That is, in the main-verb analysis of &apos;sent&apos;, the interpreter is aware of the relation between the subject the verb before the end of the VP. But the minimal parser cannot put the subject together with &apos;sent&apos; or &apos;sent for the&apos; because the latter are not a complete VP! There are two possible solutions to this problem, each relaxes one of the two suppositions above: Steedman (1994) argues for a grammatical theory (CCG) which does not always make the subjectpredicate juncture the primary division point of a clause. Shieber and Johnson (1993) on the other hand, argue that there is no need to assume that a constituent has to be complete before it is combined with its sister(s). At this time, neither approach is sufficiently developed to be evaluable (e.g. they both lack broad coverage grammar) so either one is viable. In this paper, I develop the first. 2 Preliminaries CCG is a lexicalized grammar formalism — a lexicon assigns each word to one or more grammatical categorie</context>
</contexts>
<marker>Steedman, 1994</marker>
<rawString>Steedman, Mark J. 1994. Grammars and Processors. In Hans Kamp and Christian Rohrer (Eds.), Aspects of Computational Linguistics. Springer Verlag. (to appear).</rawString>
</citation>
<citation valid="true">
<authors>
<author>John C Trueswell</author>
<author>Michael K Tanenhaus</author>
</authors>
<date>1991</date>
<booktitle>Tense, Temporal Context and Syntactic Ambiguity Resolution. Language and Cognitive Processses</booktitle>
<pages>6--303</pages>
<contexts>
<context position="2517" citStr="Trueswell and Tanenhaus 1991" startWordPosition="376" endWordPosition="379">nry Thompson for helpful suggestions, and to Jeff Siskind for help with typesetting CCG derivations. Any errors are my own. 1.1 Ambiguity Resolution Recently, a great deal of evidence has accumulated that humans resolve syntactic ambiguity by considering the meaning of the available analyses and selecting the &apos;best&apos; one. Various criteria for goodness of meaning have been advanced in the psycholinguistic literature: e.g. thematic compatibility and lexical selection (Trueswell and Tanenhaus 1994), discourse felicity of definite expressions (Altmann et al. 1994), temporal coherence in discourse (Trueswell and Tanenhaus 1991), grammatical function vis a vis given/new status (Niv 1993b), and general world-knowledge (Kawamoto and Farrar 1993). Many of the works cited above consider the timing of the ambiguity resolution decision. The evidence is overwhelming that ambiguity is resolved within a word or two of the arrival of disambiguating information— that is, when there is a meaningbased criterion which militates toward one or another syntactically available analysis, that analysis is selected. Should the other analysis turn out to be the ultimately correct analysis, a garden path will result. Given that the various</context>
</contexts>
<marker>Trueswell, Tanenhaus, 1991</marker>
<rawString>Trueswell, John C. and Michael K. Tanenhaus. 1991. Tense, Temporal Context and Syntactic Ambiguity Resolution. Language and Cognitive Processses 6:303-338.</rawString>
</citation>
<citation valid="true">
<authors>
<author>John C Trueswell</author>
<author>Michael K Tanenhaus</author>
</authors>
<title>Toward a Lexicalist Framework of Constraint-Based Syntactic Ambiguity Resolution. In Charles Clifton, Lyn Frazier, and Keith Rayner (Eds.), Perspectives on Sentence Processing. Hillsdale, NJ: Lawrence Erlbaum Associates.</title>
<date>1994</date>
<contexts>
<context position="2387" citStr="Trueswell and Tanenhaus 1994" startWordPosition="357" endWordPosition="361">a postdoctoral fellowship at the Technion in Israel. I am grateful to Mark Hepple, Mitch Marcus, Mark Steedman, Val Tannen, and Henry Thompson for helpful suggestions, and to Jeff Siskind for help with typesetting CCG derivations. Any errors are my own. 1.1 Ambiguity Resolution Recently, a great deal of evidence has accumulated that humans resolve syntactic ambiguity by considering the meaning of the available analyses and selecting the &apos;best&apos; one. Various criteria for goodness of meaning have been advanced in the psycholinguistic literature: e.g. thematic compatibility and lexical selection (Trueswell and Tanenhaus 1994), discourse felicity of definite expressions (Altmann et al. 1994), temporal coherence in discourse (Trueswell and Tanenhaus 1991), grammatical function vis a vis given/new status (Niv 1993b), and general world-knowledge (Kawamoto and Farrar 1993). Many of the works cited above consider the timing of the ambiguity resolution decision. The evidence is overwhelming that ambiguity is resolved within a word or two of the arrival of disambiguating information— that is, when there is a meaningbased criterion which militates toward one or another syntactically available analysis, that analysis is sel</context>
</contexts>
<marker>Trueswell, Tanenhaus, 1994</marker>
<rawString>Trueswell, John C. and Michael K. Tanenhaus. 1994. Toward a Lexicalist Framework of Constraint-Based Syntactic Ambiguity Resolution. In Charles Clifton, Lyn Frazier, and Keith Rayner (Eds.), Perspectives on Sentence Processing. Hillsdale, NJ: Lawrence Erlbaum Associates.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>