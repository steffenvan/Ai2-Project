<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000608">
<title confidence="0.916611">
Generating a Controlled Language
</title>
<author confidence="0.62711">
Laurence Danlos
</author>
<note confidence="0.705655888888889">
Universit4 Paris 7
TALANA UFR Linguistique
Case 7003-2, Place Jussieu
75251- Paris; France
danlos@linguist jussieu fr
Guy Lapalme
Departement d&apos;informatique et RO
Universite de Montreal
C.P. 6128, Succ Centre-Ville
</note>
<address confidence="0.963787">
Montr√©al, Quebec, Canada,1-13C -3J7
</address>
<email confidence="0.99728">
lapalme@iro.umontreal.ca
</email>
<author confidence="0.997193">
Veronika Lux *
</author>
<affiliation confidence="0.961681">
Xerox Research Centre Europe
</affiliation>
<address confidence="0.9563275">
6, chemin de Maupertuis
38240 Meylan, France
</address>
<email confidence="0.99605">
Veronika.Lux@xrce.xerox.com
</email>
<sectionHeader confidence="0.982956" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.9996048">
This paper argues for looking at Controlled Lan-
guages (CL) from a Natural Language Genera-
tion (NLG) perspective. We show that CLs are
used in a normative environment in which dif-
ferent textual modules can be identified, each
having its own set of rules constraining the text.
These rules can be used as a basis for natural
language generation. These ideas were tested in
a proof of concept generator for the domain of
aircraft maintenance manuals.
</bodyText>
<equation confidence="0.556074">
1 What is a Controlled Language?
</equation>
<bodyText confidence="0.990327962962963">
Controlled Languages (CLs) result from a grow-
ing concern about technical documentation
quality and translation, be it human or auto-
matic. A CL consists of a glossary and of writ-
ing rules for the linguistic aspect of the doc-
umentation. These rules are given as recom-
mendations or prohibitions for both the lexicon
and the grammar. Currently, most CLs are
varieties of &amp;quot;controlled English&amp;quot; which derive
from the Caterpillar Tractor Company Funda-
mental English that was elaborated .in the six-
ties (Scheurs and Adriaens, 1992). However CLs
are presently being defined for German, Swedish
and French.
Technical writers find it difficult to comply
with the writing rules of a CL which are often
hard to justify (CLA. 1996). For them, a CL is
seen as an additional constraint on an already
complex task. This is why tools have been de-
Work done while at the Aerospatiale Research Center
veloped for CL users, the best known being con-
formity checkers/controllers such as AlethCL or
SECC (CLA, 1996).
A writer expects that the checking tool should
not only detect errors but also propose a CL
conformable expression. A. Nasr (Nasr, 1996),
who worked on the problem of CL reformula-
tion, underlines the difficulties of this task. Re-
formulation cannot make any hypotheses about
the conformity of the input sentences, and
therefore must deal with a wider variety of
lexico-syntactical constructions than those al-
lowed in a CL. Some instances of noncompliance
are relatively easy to detect but much more dif-
ficult to correct: for example, sentences that are
longer than the prescribed number of words.
So there is little hope that human writers will
ever produce documentation complying strictly
with a CL even with the help of a conformity
checker. We argue that it may be more promis-
ing to use NLG technology for generating doc-
umentation. in. CL instead of analyzing it af-
terwards, as it is the case with a conformity
checker. Few researchers have looked at CLs
fronr:a-.generation point of view.: (Nasr, .1996;
Hartley and Paris, 1996); hut we think that
there are very compelling reasons for taking a
generation perspective, in addition to the ad-
vantages of NLG for CLs that will be presented
in section 3:
* As CLs can be viewed as linguistic specifi-
cations for human beings, it seems natural
.consider them - as specifications for the
linguistic component of an NLG system.
</bodyText>
<page confidence="0.997455">
141
</page>
<bodyText confidence="0.9998866">
o CL writing specifications come on top of
other writing norms which deal with docu-
ment structuring. For example, in the aero-
nautical industry, CLs such Simplified En-
glish (SE) (AEC, 1995) and Francais Ra-
tionalise (FR) (GIFAS, 1996) extend the
ATA 100 norms (Bur, 1995) which describe
the division of the document into chapters,
sections, subsections, etc. reflecting a tree-
structured functional organization of the
airplane: a chapter corresponds to a sys-
tem (e.g. main rotor), a section to a sub-
system (e.g. gear box), a subsection to a
sub-sub-system (e.g. set of gears), and so
on. Over this thematic structure is added a
communicative structure to fulfill two main
goals: describe all systems of the airplane
and prescribe all maintenance instructions
for the airplane. The norms of the ATA
can be viewed as specifications for the text
structuring component of an NLG system.
e The thematic and communicative structur-
ing of the document must also conform
to a systematic non-linear page number-
ing system and strict formatting rules us-
ing SGML tags. These constraints can be
viewed as specifications for the layout com-
ponent of an NLG system.
So we claim that CLs should not be con-
sidered outside the context of the production
of complex structured documents, which natu-
rally raises the question of the automatic gen-
eration of this documentation given some for-
mal representation. This claim led V. Lux (Lux,
1998) to redefine the notion of a CL. Her study
has shown that only a few syntactic constraints
(e.g. coordination constraints) are applicable to
the whole document. Most constraints are only
valid for sub-parts of the document, identified
as &amp;quot;textual modules&apos;. Each textual module has
a particular communicative-goal and a. precise
theme according to the ATA 100 norms. It, can
be divided into smaller modules: for example,
the Task module is divided into simpler Sub-
Task modules which are themselves composed
of simpler Instructions modules. From a lin-
guistic point of view, a textual module uses only
a controlled sublanguage. V. Lux thus extended
FR to a new CL called.-EREM (Francais Ra-
tionalise Etendu Modulaire) comprising many
CLs, each having its own syntactic rules for
a specific textual module. She also performed
a corpus study showing that the same textual
modules could be identified for both French and
English. It should thus be possible to remodu-
larize SE similarly to what has been done to
FR with FREM. In this paper, we therefore
introduce the notion of an Extended Modular
Controlled Language (EMCL) which first de-
fines some general rules and then some more
specific ones for each textual module. We now
look at the problem of automatically generat-
ing technical documentation complying both to
structuration norms such as ATA 100 and to the
rules of an EMCL.
</bodyText>
<sectionHeader confidence="0.807284" genericHeader="keywords">
2 How to generate technical
documentation?
</sectionHeader>
<bodyText confidence="0.9997285">
We assume that a generation system can be di-
vided into a What to say and How to say it
components, even though this may be consid-
ered as a gross simplification.
</bodyText>
<subsectionHeader confidence="0.995478">
2.1 What to say component
</subsectionHeader>
<bodyText confidence="0.999970259259259">
The main difficulty for NLG in a real environ-
ment lies in knowledge modeling. For aircraft
maintenance manuals, existing ontologies could
probably be reused, but even then the model-
ing efforts required are huge. Nevertheless, we
assume that it is possible to design forms which
are sequentially presented to the user to be
filled, as in Drafter (Paris et al., 1995), through
which the technical writer provides the infor-
mation to convey in an appropriate formalism.
These forms can be derived directly from the
tree-like structure of the document given in the
ATA norms. The goal is that, once the writer
has finished filling in these forms, the technical
documentation is already properly structured in
an abstract language instead of a natural one.
In a general text generation setting, using forms
to describe what is to be said might seen, like
a difficult task; but in the context of techni-
cal writing, the informational content is almost
already prescribed and forms are thus a sim-
ple way of complying with the rules of a CL.
Indeed in the now COEI1M011 web environments,
forms are frequently used for eliciting informa-
tion from users. This input can then be pro-
cessed by the-How to say it and layout compo-
nents.
</bodyText>
<page confidence="0.990617">
142
</page>
<bodyText confidence="0.999977371428571">
The writers who find it very difficult to com-
ply with the rules of a CL have no problem
complying with the ATA 100 norms, thereby
producing documents with the right thematic
and communicative structuration. This can be
seen as an illustration of observations made in
psycholinguistics. Levelt (Levelt, 1989, p. 9)--
describes a model of the speaker&apos;s activity in
which choices in the What to say component
are conscious, while choices in the How to say it
component are automatic. This model helps un-
derstand some of the difficulties that CL users
face. A CL forces the writer to become con-
scious of behavioral mechanisms that are usu-
ally automatic; The writer is thus distracted
from choices made earlier in her/his writing
task. So s/he often ends up writing it in the
way it has to be written but does not write ex-
actly what had to be written, thus defeating
the whole purpose of a CL which was meant to
produce a better expression of the information.
This model also explains why a human writer
has less difficulties following the ATA norms:
this part of the job corresponds to conscious
choices. In the NLG scenario, this is replaced
by filling in some information in the forms that
are presented.
To sum up, the What to say component re-
quires a rnodelization of the domain model and
the design of a series of forms to be filled. A
human writer using the NLG system has to fill
forms but on the other hand, s/he does not have
to learn a CL, since compliance with the CL
norms is taken care by the How to say it com-
ponent which we now describe.
</bodyText>
<subsectionHeader confidence="0.986747">
2.2 How to say it component
</subsectionHeader>
<bodyText confidence="0.999875125">
In this section, it is assumed that if a CL is
in fact an EMCL such as FREM, a specific How
to say it component is designed for each textual
module, but always retaining the same formal-
ism.
The lexicon used in the How.- to it com-
ponent should be exactly the one enforced by
the CL. Similarly, the syntactic constructions
and the discourse structures of this component
should correspond to the set of allowed con-
structions / structures in the CL. This can sim-
plify some lexical, syntactic and even discourse
choices to be made within the generation sys-
tem and thus ensure that -the. generated text
complies with the rules of the CL.
However, many writing rules in a CL place
particular syntactic constraints on the use of..
a given lexical item, e.g. in FR a rule forbids
the use of ertipecher (prevent) when followed by
an infinitive clause. To handle such numerous
lexically dependent syntactic rules, a formal-
ism based on a lexicalized grammar is needed.
We chose Lexicalized Tree Adjoining Grammar
(LTAG) for the following reasons:
</bodyText>
<listItem confidence="0.994008">
‚Ä¢ A text generation formalism inspired from
LTAG, called G-TAG, has been designed,
implemented and used in several applica-
tions (Danlos and Meunier, 1996; Meunier,
1997; Danlos, 1998; Meunier and Danlos,
1998; Danlos, 2000). G-TAG takes as in-
put an event graph which can be provided
by the user by filling in some forms which
ensure that all the necessary information
for generation is provided.
‚Ä¢ G-TAG deals with textual phenomena such
</listItem>
<bodyText confidence="0.950741416666667">
as sentence connectors by extending LTAG
to handle discourse comprised of more than
one sentence. One of the major innovations
of FREM compared to FR (and of EMCL
compared to CL) is to implement rules for
connecting sentences (clauses). The way to
connect sentences has largely been ignored
in CLs, although this linguistic issue raises
ambiguities which can lead to maintenance
errors. For example, simple juxtaposition
of sentences is allowed in FR but disallowed
in FREM because it is highly dangerous. A
technician reading Nettoyer X. Verse,- Y
sur X. (Clean X. Pour Y on X.) could in-
terpret this to mean either &amp;quot;Clean X with
Y&amp;quot; or &amp;quot;Clean X with .Z, and next pour
Y on X&amp;quot;. Only one of these operations is
right, the other one may lead to a mainte-
nance error. On the other hand, traditional
syntactical ambiguities such as a preposi-
,tional attachment--will -not- usually lead to
maintenance errors because the technician
can usually solve them on the basis of some
domain knowledge.
</bodyText>
<listItem confidence="0.63906">
‚Ä¢ The lexicalized grammar in G-TAG is com-
</listItem>
<bodyText confidence="0.9943194">
piled from the meta-grammar designed and
implemented by M. H. Candito (Canclito.
1996). This makes it easy to follow the
evolution of rules of an (EM)CL. For ex-
ample. if the rule to write an Instruction
</bodyText>
<page confidence="0.996115">
143
</page>
<bodyText confidence="0.970520151515151">
changes from &amp;quot;Put a verb in the infini-
tive&amp;quot; to &amp;quot;Insert an imperative&amp;quot;, then this
must be changed everywhere in the lexi-
calized grammar. Using the metagrammar
we can achieve this quite easily because of
the hierarchical organization of a LTAG:
with only one rule, an imperative can be
allowed and an infinitive disallowed (in- a
main clause) for every verb, whatever its
argument structure and syntactic construc-
tion.
G-TAC thus seems a good candidate for pro-
ducing technical documentation complying with
the constraints of an (EM)CL. A technical doc-
umentation generator prototype in the aeronau-
tical domain is described in Section 4. It is writ-
ten in Flaubert, an implementation of G-TAC
(Danlos and Meunier, 1996). The How to say
it component would have to be completed by
adding a layout component complying with the
norms of ATA 100. We should also provide re-
vision tools to allow the writer to fine tune the
final text.
So, automatically generating technical docu-
mentation seems technically possible provided
the technical writer is willing to fill forms which
in principle should be less demanding than
learning the rules of an (EM)CL. This approach
also has other advantages, described in the next
section.
3 Advantages of automatic
generation of technical
documentation
</bodyText>
<subsectionHeader confidence="0.998345">
3.1 Multilinguality
</subsectionHeader>
<bodyText confidence="0.999265744680851">
One of the major assets of NLG is its capacity
to simultaneously generate texts in several lan-
guages, and to regenerate updates as often as
necessary, using a single input representation,
thus ensuring coherence among the generated
texts.
Until now, Us- have dealt with -multilingual-
ity by means of the translation hypothesis. It
is for this reason that FR. was developed by
adapting SE, in order to ease the translation
from French to English. FR authors try to en-
sure that everything that can also be written
in FR can be translated into SE. From this
point of view, the definition of a source CLI,
depends on the definition AA. a &apos;target. C1,2.- De-
velopers of CLI are more likely to select struc-
tures which can be easily or even literally trans-
lated into CL2. What then happens if CLi and
CL2 are structurally different? This can lead
to a situation where CLI imposes a cumber-
some writing style that contravene conventions
shared by native speakers of LI, thereby con-
tradicting CLs&apos; aim of enhancing understand-
ability. Rules of an TEM)CL should be elabo-
rated without such multilingual considerations.
Their definition should principally pay atten-
tion to the characteristics of one language, try-
ing to avoid typical ambiguities. Such criteria
are difficult enough to deal within a single lan-
guage without taking translation problems into
account.
Now if we consider multilingual generation in
(EM)CLs, we find that there are major benefits
from the multilingualism modeling proposed by
NLG. In particular, defining a common repre-
sentation is possible since the structure of the
documentation is language independent. Recall
from section 1 that the thematic structure of the
documentation in the aeronautical domain must
reflect the functional decomposition of the air-
plane and that the same textual modules can be
identified in many languages. Thus nothing has
to be changed in the What to say component
(Section 2.1) going from one language to the
other. Only the How to say it component (Sec-
tion 2.2) need be adapted to the target (EM)CL
which should be mortolingually defined.
</bodyText>
<subsectionHeader confidence="0.9984405">
3.2 NLG as an aid for testing and
developing a CL
</subsectionHeader>
<bodyText confidence="0.991290764705882">
An NLG system can provide concrete assistance
for the testing and for the development of a CL.
An NLG system that integrates the CL con-
straints can help discover contradictions in the
CL definition. As an illustration, a major dif-
ficulty in CL definition concerns the coherence
between the lexicon and the writing rules, as il-
lustrated by (Emorine, 1994) with the following
example:
Empecher l&apos;oxygene de s&apos;accurauler (Pre-
vent the oxygen from accumulating) does
not conform to a FR lexically depen-
dent syntactic rule, according to which
einp6cher (prevent) should not be followed
by an infinitive clause.
-.0..E7riperittr l&apos;accumulation enxygene (Pre-
vent oxygen accumulation) does not con-
</bodyText>
<page confidence="0.991915">
144
</page>
<figure confidence="0.898514333333333">
Titled sub-task
title
,
DEPOSER
agent object
Up 05
</figure>
<table confidence="0.9813684">
1st-inst 2nd-inst 3rd-inst
Precond-Inst Simul-Inst Inst
1st-order
1st-order pre-cond 1st-order 2nd-order
DEPOSER ENLEVER 1 , DEPOSER
EXTRAIRE DEPOSER
agent object agent object agent object agent object agent object tool
1 1
U0 04 U0 Ingo Up 02 UO 05 To
U0 03
</table>
<figureCaption confidence="0.9972885">
Figure 1: Event graph given as input to Flaubert. In the prototype, this information is entered in
textual form.
</figureCaption>
<bodyText confidence="0.987930823529412">
Sub-Task
form to FR lexicon, according to which the
verb s&apos;accumuler (accumulate) should be
used instead of the noun accumulation (ac-
cumulation)
o Empecher que l&apos;oxygene Tie s&apos;accumule
(Prevent that the oxygen accumulates)
does not conform to the writing rule that
forbids the use of the subjunctive mode.
So we come to a dead end if we want to use the
verb empecher (prevent). This problem can be
detected automatically by the NLG system. and
an appropriate fix be made in the grammar.
NLG can be used for checking a CL, which
is helpful even if the CL is intended for a hu-
man writer because it may avoid the discovery
of various cases of incoherence by the writer. If
the writers can justify their writing difficulties
by pointing out inconsistencies in the CL defini-
tion, they won&apos;t be motivated to use what they
will tend to corsider as &apos;an-absurd invention by ‚Ä¢
people who understand nothing about the job.
NLG can also help strengthen CLs&apos; claim to
lead to more homogeneous texts, which is equiv-
alent to forbidding certain paraphrases. NLG
precisely deals with paraphrase as, for some in-
puts, a NLG system will produce several texts.
In this way, NLG helps identify which para-
phrases still remain possible in the CL. In prac-
tice, when an NLG system proposes several
texts for one input, it raises the question for
the CL developer: Should a constraint be added
to the CL definition in order to forbid some of
these texts ?
</bodyText>
<sectionHeader confidence="0.819133" genericHeader="method">
4 Proof of concept generator
</sectionHeader>
<bodyText confidence="0.999871625">
The previous sections have argued for the inter-
est of dealing with CL from an NLG perspec-
tive which to our knowledge had never been ex-
amined in such details. To further pursue, V.
Lux ‚Ä¢(Lux, 1998) has developed a proof of con-
cept generator using Flaubert (Meunier, 1997:
Meunier-and -Dardos; -&apos;1998)- to ‚Ä¢ -see ‚Ä¢IoW -these -
theoretical concerns could be applied in prac-
</bodyText>
<page confidence="0.996772">
145
</page>
<table confidence="0.7691154">
Sous-tache 60-007
3.1 Depose du segment d&apos;arret (5)
Apres avoir ertleve le mastic PR, deposer le segment d&apos;arret (4).
- Extraire le parte joint (2) et deposer le joint (3).
- Deposer le segment d&apos;arret (5) a l&apos;aide de l&apos;outillage (Z).
</table>
<figureCaption confidence="0.946663">
Figure 2a._-Text-generateckby-tElembertfrom-theqinput of-Figure-1-
</figureCaption>
<bodyText confidence="0.999973365384615">
tice. The generator can produce text for about
ten subtasks in FREM. These tasks comprise
from two to eleven instructions, illustrating ten
different instruction types such as: simple in-
struction with a goal, simple instruction with a
condition, complex instruction with simultane-
ous actions, etc. They involve the use of various
syntactical constructions such as infinitive or
sentential subordinates, nominalisation, nega-
tion, etc.
Input to the prototype are event graphs such
as the one given in Figure 1. The output is a
well formed French text such as the one in Fig-
ure 2 which was generated from Figure 1. In
Lux&apos;s prototype, the event graphs were hand
coded, but now Flaubert has been rewritten
in CLEF (Meunier, 1999; Meunier and Reyes,
1999), which has a better graphical input mech-
anism that would have eased the input process.
The output text is a sub-task including a ti-
tle and instructions of different types (only the
first three instructions are given in the Figures)
to be performed by the same person (e.g. U0).
FREM defines which connector to use for each
instruction type (e.g. conjunction et for an in-
struction with simultaneous actions).
The generation of noun groups for the ob-
jects (0i), ingredients (Ingi) and tools (Ti) re-
lies on a mapping table between these labels
and their denominations: this was a temporary
solution for problems outside the scope of the
prototype. We should have relied on existing
.nomenclatures for tools-and ingredients, and-en
the fact that objects are systematically repre-
sented in drawings associated with various sub-
tasks e.g. Or‚Äû called segment d&apos;arret, is labeled
(5) on the drawing associated with the exam-
ple above. In a graphical interface environment,
authors would select these objects linked to a
controlled terminology data base.
This proof of -concept generator servechwell-
our purpose of testing our theoretical ideas but
unfortunately it could not be evaluated in a re-
alistic CL text production environment. Our
sponsors were very interested in the results we
have produced but changes in their organisation
made it impossible to carry further investiga-
tions. We intend to further pursue our research
and use the new implementation of Flaubert to
generate controlled language in an other area
of application while keeping the concept of an
extended modular CL.
</bodyText>
<sectionHeader confidence="0.996551" genericHeader="method">
5 Conclusion
</sectionHeader>
<bodyText confidence="0.999973285714286">
This paper has argued that linguistic norms im-
posed by CLs should not be considered in iso-
lation. They are only a part of a set of more
comprehensive norms on the document struc-
ture and layout. This insight led us to define a
notion of textual modules, each with its own
linguistic norms, and to envisage the genera-
tion of technical documentation using an ex-
tended modular controlled language (EM CL).
Norms for document structure such as ATA100,
its linguistic characteristics and its layout re-
quirements may be seen to respectively define
the text structuring, the linguistic and the lay-
out components of an NLG system.
We have also shown that a generation point of
view can help refine the definition of an EM CL.
The EMCL can be defined monolingually, mut-
tilinguality being obtained through NLG. These
ideas were tested within a proof of concept text
generator in the domain of aircraft maintenance
manuals.
</bodyText>
<sectionHeader confidence="0.968418" genericHeader="conclusions">
Acknowledgment
</sectionHeader>
<bodyText confidence="0.9998462">
We thank our former colleagues at Aerospa-
tiale Research Center and Frederic Meunier
who implemented Flaubert. We also thank El-
, .liot t-Macklowitefrwho suggest ed many i nip-rave-
merits to the paper.
</bodyText>
<page confidence="0.998354">
146
</page>
<sectionHeader confidence="0.991357" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.975036556818182">
AECMA Document PSC-85-16598, 1995. Sim-
plified English Standard, a guide for the
preparation of Aircraft Maintenance Doc-
umentation in the International Aerospace
Maintenance Language.
Bureau de .Normalisation. - de PAeronauticlue-
et de l&apos;Espace (BNAE), Issy-les-Moulineaux,
1995. Specification ATA no 100, traduc-
tion francaise. Specification for Manufactur-
er&apos;s Technical Data - ATA Specification 10,
October.
M.-H. Candito. 1996. A principle-based hierar-
chical representation of LTAGs. In Proceed-
ings of the 16th International Conference on
Computational Linguistics, pages 194-199,
Copenhagen.
CLAW. 1996. Proceedings of the First Interna-
tional Workshop on Controlled Language Ap-
plications (CLAW), Leuven.
L. Danlos and F. Meunier. 1996. G-TAG,
un forrnalisme pour la generation de texte :
presentation et applications industrielles. In
Actes du colloque Inform atique et Langue Na-
turelle, Nantes.
L. Danlos. 1998. G-TAG: un formalisme lex-
icalise de generation de textes inspire de
TAG. Traitement Autornatique des Langues
T.A.L., 39(2):4-32.
L. Danlos, 2000. Tag Grammars, chapter G-
TAG: A Lexicalized Formalism for Text Gen-
eration inspired by Tree Adjoining Grammar.
CSLI.
M. Emorine. 1994. Projet de recherche sur la
modelisation des entr√©es verbales du francais
rationalise. Technical report, Universite de
Clermont II.
GIFAS. 1996. Guide dii redacteur - partie 2:
Francais rationalise. Technical report, GI-
FAS, Paris.
A. Hartley and C. Paris, 1996. Le texte
procedural : Ian gage, action et cognition,
chapter Une analyse fonctionnelle de textes
proceduraux : apport de la generation au-
tomatique a. la definition des langues ratio-
nalisees, pages 211 222. Toulouse.
W. LeveIt. 1989. Speaking - from intention
to articulation. MIT Press. Cambridge Mas-
sachusetts.
V. Lux. 1998. Elaboration d&apos;un -francais ratio-
nalise etendu pour un 711(1712lel de maintenance
aeronautique, test en generation automatique.
These de doctorat en linguistique, Universite
Paris 7.
F. Meunier and L. Danlos. 1998. FLAUBERT:
an user-friendly system for multilingual text
generation. In Proceedings of the 9th Interna-
tional.Workshop. on Natural Language Gener-
ation (INLG &apos;98), pages 284-287, Niagara-on-
the-Lake.
F. Meunier and R. Reyes. 1999. Plate-forme de
developpement de generateurs multilingues.
In Actes de la conference de Generation Au-
tomatique de Tarte GAT&apos;99, pages 145-155,
Grenoble, France.
F. Meunier. 1997. Implementation de G-TAG,
formalisrne pour to generation inspiree des
grammaires d&apos;arbres adjoints. These de doc-
torat en informatique, Universite Paris 7.
F. Meunier. 1999. Modelisation des ressources
linguistiques d&apos;une application industrielle.
In TALN&apos;99, pages 243-252, Cargese, Corse,
12-17 juillet.
A. Nasr. 1996. Un rnodele de reformulation au-
tomatique fonde sur la theorie Sens-Texte -
application aux Langues Controlees. Ph.D.
thesis, Universite Paris 7.
C. Paris, K. Vander Linden, M. Fischer,
A. Hartley, L. Pemberton, R. Power, and
D. Scott. 1995. A support tool for writ-
ing multilingaul instructions. In Proceedings
of the 14th International Joint Conference
on Artificial Intelligence (LICAI&apos;95), pages
1398-1404, Montr√©al.
J. Scheurs and G. Adriaens, 1992. Comput-
ers and writing - state of the art. chapter
From cogram to alcogram : toward a con-
trolled english grammar checker, pages 206-
221. Kluwer Academic Publishers, London.
</reference>
<page confidence="0.997743">
147
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.000609">
<title confidence="0.997884">Generating a Controlled Language</title>
<author confidence="0.830871">Laurence</author>
<affiliation confidence="0.889768">Universit4 Paris TALANA UFR</affiliation>
<address confidence="0.988825">Case 7003-2, Place 75251- Paris;</address>
<email confidence="0.784191">danlos@linguistjussieufr</email>
<abstract confidence="0.450668333333333">d&apos;informatique et Universite de C.P. 6128, Succ</abstract>
<address confidence="0.966873">Quebec, Canada,1-13C</address>
<email confidence="0.994685">lapalme@iro.umontreal.ca</email>
<author confidence="0.997655">Veronika Lux</author>
<affiliation confidence="0.995403">Xerox Research Centre</affiliation>
<address confidence="0.630613">6, chemin de</address>
<email confidence="0.973812">Veronika.Lux@xrce.xerox.com</email>
<abstract confidence="0.99803289882353">This paper argues for looking at Controlled Languages (CL) from a Natural Language Generation (NLG) perspective. We show that CLs are used in a normative environment in which different textual modules can be identified, each having its own set of rules constraining the text. These rules can be used as a basis for natural language generation. These ideas were tested in a proof of concept generator for the domain of aircraft maintenance manuals. 1 What is a Controlled Language? Controlled Languages (CLs) result from a growing concern about technical documentation quality and translation, be it human or automatic. A CL consists of a glossary and of writing rules for the linguistic aspect of the documentation. These rules are given as recommendations or prohibitions for both the lexicon and the grammar. Currently, most CLs are varieties of &amp;quot;controlled English&amp;quot; which derive the Tractor Company Funda- English was elaborated .in the sixties (Scheurs and Adriaens, 1992). However CLs are presently being defined for German, Swedish and French. Technical writers find it difficult to comply with the writing rules of a CL which are often hard to justify (CLA. 1996). For them, a CL is seen as an additional constraint on an already task. This is why tools have been de- Work done while at the Aerospatiale Research Center veloped for CL users, the best known being conformity checkers/controllers such as AlethCL or SECC (CLA, 1996). A writer expects that the checking tool should detect errors but also propose a CL conformable expression. A. Nasr (Nasr, 1996), who worked on the problem of CL reformulation, underlines the difficulties of this task. Reformulation cannot make any hypotheses about the conformity of the input sentences, and therefore must deal with a wider variety of lexico-syntactical constructions than those allowed in a CL. Some instances of noncompliance are relatively easy to detect but much more difficult to correct: for example, sentences that are longer than the prescribed number of words. So there is little hope that human writers will ever produce documentation complying strictly with a CL even with the help of a conformity checker. We argue that it may be more promising to use NLG technology for generating documentation. in. CL instead of analyzing it afterwards, as it is the case with a conformity checker. Few researchers have looked at CLs fronr:a-.generation point of view.: (Nasr, .1996; Hartley and Paris, 1996); hut we think that there are very compelling reasons for taking a generation perspective, in addition to the advantages of NLG for CLs that will be presented in section 3: * As CLs can be viewed as linguistic specififor beings, seems natural .consider them as specifications for the linguistic component of an NLG system. 141 writing specifications come on top of other writing norms which deal with document structuring. For example, in the aeronautical industry, CLs such Simplified English (SE) (AEC, 1995) and Francais Rationalise (FR) (GIFAS, 1996) extend the ATA 100 norms (Bur, 1995) which describe the division of the document into chapters, sections, subsections, etc. reflecting a treestructured functional organization of the a chapter corresponds a sys- (e.g. main rotor), to a subsystem (e.g. gear box), a subsection to a (e.g. and so on. Over this thematic structure is added a communicative structure to fulfill two main systems of the airplane maintenance instructions for the airplane. The norms of the ATA be viewed as specifications text structuring component of an NLG system. thematic and communicative structuring of the document must also conform to a systematic non-linear page numbering system and strict formatting rules using SGML tags. These constraints can be viewed as specifications for the layout component of an NLG system. So we claim that CLs should not be considered outside the context of the production of complex structured documents, which naturally raises the question of the automatic genof this given some formal representation. This claim led V. Lux (Lux, the notion of a CL. Her study has shown that only a few syntactic constraints (e.g. coordination constraints) are applicable to document. Most constraints are only for sub-parts of identified modules&apos;. Each textual module has particular communicative-goal and precise theme according to the ATA 100 norms. It, can divided into modules: for example, divided into Subwhich are themselves simpler From a linguistic point of view, a textual module uses only a controlled sublanguage. V. Lux thus extended to a new CL (Francais Rationalise Etendu Modulaire) comprising many CLs, each having its own syntactic rules for a specific textual module. She also performed a corpus study showing that the same textual modules could be identified for both French and English. It should thus be possible to remodularize SE similarly to what has been done to FR with FREM. In this paper, we therefore introduce the notion of an Extended Modular Controlled Language (EMCL) which first defines some general rules and then some more specific ones for each textual module. We now look at the problem of automatically generating technical documentation complying both to structuration norms such as ATA 100 and to the rules of an EMCL. 2 How to generate technical documentation? assume that generation system can be dito say to say it components, even though this may be considered as a gross simplification. to say The main difficulty for NLG in a real environment lies in knowledge modeling. For aircraft maintenance manuals, existing ontologies could probably be reused, but even then the modeling efforts required are huge. Nevertheless, we assume that it is possible to design forms which are sequentially presented to the user to be filled, as in Drafter (Paris et al., 1995), through which the technical writer provides the inforto in an appropriate formalism. These forms can be derived directly from the tree-like structure of the document given in the ATA norms. The goal is that, once the writer has finished filling in these forms, the technical is already in abstract language instead of a natural In a general text generation setting, using forms describe is to be said might seen, like task; but in the context technical writing, the informational content is almost already prescribed and forms are thus a simcomplying with the rules of a CL. in the now environments, forms are frequently used for eliciting information from users. This input can then be proby say it layout components. 142 The writers who find it very difficult to comply with the rules of a CL have no problem complying with the ATA 100 norms, thereby producing documents with the right thematic and communicative structuration. This can be seen as an illustration of observations made in psycholinguistics. Levelt (Levelt, 1989, p. 9)-describes a model of the speaker&apos;s activity in choices in the to say conscious, while choices in the to say it component are automatic. This model helps unsome of the difficulties that face. A CL forces the writer to become conscious of behavioral mechanisms that are usually automatic; The writer is thus distracted from choices made earlier in her/his writing So s/he often ends up writing it the it has be written but does not write exhad be written, thus defeating the whole purpose of a CL which was meant to produce a better expression of the information. This model also explains why a human writer has less difficulties following the ATA norms: this part of the job corresponds to conscious choices. In the NLG scenario, this is replaced by filling in some information in the forms that are presented. sum up, the to say requires a rnodelization of the domain model and the design of a series of forms to be filled. A human writer using the NLG system has to fill forms but on the other hand, s/he does not have to learn a CL, since compliance with the CL is taken care by the to say it component which we now describe. to say it In this section, it is assumed that if a CL is fact an EMCL such as FREM, a specific say it is designed for each textual module, but always retaining the same formalism. lexicon used in the to it ponent should be exactly the one enforced by the CL. Similarly, the syntactic constructions and the discourse structures of this component should correspond to the set of allowed constructions / structures in the CL. This can simplify some lexical, syntactic and even discourse choices to be made within the generation system and thus ensure that -the. generated text complies with the rules of the CL. However, many writing rules in a CL place particular syntactic constraints on the use of.. a given lexical item, e.g. in FR a rule forbids use of (prevent) followed by an infinitive clause. To handle such numerous lexically dependent syntactic rules, a formalism based on a lexicalized grammar is needed. We chose Lexicalized Tree Adjoining Grammar (LTAG) for the following reasons: ‚Ä¢ A text generation formalism inspired from LTAG, called G-TAG, has been designed, implemented and used in several applications (Danlos and Meunier, 1996; Meunier, 1997; Danlos, 1998; Meunier and Danlos, 1998; Danlos, 2000). G-TAG takes as input an event graph which can be provided by the user by filling in some forms which ensure that all the necessary information for generation is provided. ‚Ä¢ G-TAG deals with textual phenomena such as sentence connectors by extending LTAG to handle discourse comprised of more than one sentence. One of the major innovations of FREM compared to FR (and of EMCL compared to CL) is to implement rules for connecting sentences (clauses). The way to connect sentences has largely been ignored in CLs, although this linguistic issue raises ambiguities which can lead to maintenance errors. For example, simple juxtaposition of sentences is allowed in FR but disallowed because it is highly dangerous. A reading X. Y X. (Clean X. Pour Y on X.) inthis to mean either &amp;quot;Clean Y&amp;quot; or &amp;quot;Clean X with .Z, and next pour X&amp;quot;. Only one of these operations is right, the other one may lead to a maintenance error. On the other hand, traditional syntactical ambiguities such as a preposi- ,tional attachment--will -notusually lead to maintenance errors because the technician can usually solve them on the basis of some domain knowledge. The lexicalized grammar in G-TAG is compiled from the meta-grammar designed and implemented by M. H. Candito (Canclito. 1996). This makes it easy to follow the evolution of rules of an (EM)CL. For exif the rule to write an 143 changes from &amp;quot;Put a verb in the infinitive&amp;quot; to &amp;quot;Insert an imperative&amp;quot;, then this must be changed everywhere in the lexicalized grammar. Using the metagrammar we can achieve this quite easily because of the hierarchical organization of a LTAG: with only one rule, an imperative can be and an infinitive disallowed a main clause) for every verb, whatever its argument structure and syntactic construction. G-TAC thus seems a good candidate for producing technical documentation complying with the constraints of an (EM)CL. A technical documentation generator prototype in the aeronautical domain is described in Section 4. It is written in Flaubert, an implementation of G-TAC and Meunier, 1996). The to say would have to be completed by adding a layout component complying with the norms of ATA 100. We should also provide revision tools to allow the writer to fine tune the final text. So, automatically generating technical documentation seems technically possible provided the technical writer is willing to fill forms which in principle should be less demanding than the rules of an (EM)CL. approach other advantages, in the next section. 3 Advantages of automatic generation of technical documentation 3.1 Multilinguality One of the major assets of NLG is its capacity to simultaneously generate texts in several lanand to regenerate updates as often single input representation, thus ensuring coherence among the generated texts. Until now, Ushave dealt with -multilingualby of the translation hypothesis. It is for this reason that FR. was developed by adapting SE, in order to ease the translation from French to English. FR authors try to enthat can also be written in FR can be translated into SE. From this of view, the definition of a source the definition AA. a &apos;target. C1,2.- Deare more likely to structures which can be easily or even literally translated into CL2. What then happens if CLi and different? can lead to a situation where CLI imposes a cumbersome writing style that contravene conventions shared by native speakers of LI, thereby contradicting CLs&apos; aim of enhancing understand- Rules an should be elaborated without such multilingual considerations. Their definition should principally pay attention to the characteristics of one language, trying to avoid typical ambiguities. Such criteria enough to deal within a single language without taking translation problems into account. we consider multilingual generation in (EM)CLs, we find that there are major benefits from the multilingualism modeling proposed by In defining a common repreis possible since the of the documentation is language independent. Recall section that the thematic structure of the documentation in the aeronautical domain must reflect the functional decomposition of the airplane and that the same textual modules can be identified in many languages. Thus nothing has be changed in the to component (Section 2.1) going from one language to the Only the to say it (Section 2.2) need be adapted to the target (EM)CL which should be mortolingually defined. as an aid for testing and developing a CL An NLG system can provide concrete assistance for the testing and for the development of a CL. An NLG system that integrates the CL constraints can help discover contradictions in the CL definition. As an illustration, a major dif- CL concerns the coherence between the lexicon and the writing rules, as illustrated by (Emorine, 1994) with the following example: Empecher l&apos;oxygene de s&apos;accurauler (Prethe oxygen from accumulating) not conform to a FR lexically dependent syntactic rule, according to which (prevent) not be followed by an infinitive clause. enxygene (Preoxygen accumulation) not con- 144 Titled sub-task title , DEPOSER agent object 1st-inst 2nd-inst 3rd-inst Precond-Inst Simul-Inst Inst 1st-order 1st-order pre-cond 1st-order 2nd-order DEPOSER ENLEVER 1 , DEPOSER EXTRAIRE DEPOSER agent object agent object agent object agent object agent object tool 1 1 04 Figure 1: Event graph given as input to Flaubert. In the prototype, this information is entered in textual form. Sub-Task form to FR lexicon, according to which the should be instead of the noun (accumulation) que l&apos;oxygene (Prevent that the oxygen accumulates) not conform writing rule that forbids the use of the subjunctive mode. So we come to a dead end if we want to use the (prevent). problem can be detected automatically by the NLG system. and an appropriate fix be made in the grammar. NLG can be used for checking a CL, which is helpful even if the CL is intended for a human writer because it may avoid the discovery various cases of incoherence writer. If the writers can justify their writing difficulties by pointing out inconsistencies in the CL definition, they won&apos;t be motivated to use what they to &apos;an-absurd invention by ‚Ä¢ people who understand nothing about the job. NLG can also help strengthen CLs&apos; claim to lead to more homogeneous texts, which is equivalent to forbidding certain paraphrases. NLG precisely deals with paraphrase as, for some inputs, a NLG system will produce several texts. In this way, NLG helps identify which paraphrases still remain possible in the CL. In practice, when an NLG system proposes several texts for one input, it raises the question for CL developer: Should be added to the CL definition in order to forbid some of these texts ? 4 Proof of concept generator The previous sections have argued for the interest of dealing with CL from an NLG perspective which to our knowledge had never been examined in such details. To further pursue, V.</abstract>
<note confidence="0.8816671">Lux ‚Ä¢(Lux, 1998) has developed a proof of concept generator using Flaubert (Meunier, 1997: -&apos;1998)to ‚Ä¢ ‚Ä¢IoW concerns could be applied in prac- 145 Sous-tache 60-007 3.1 Depose du segment d&apos;arret (5) Apres avoir ertleve le mastic PR, deposer le segment d&apos;arret (4). - Extraire le parte joint (2) et deposer le joint (3). - Deposer le segment d&apos;arret (5) a l&apos;aide de l&apos;outillage (Z).</note>
<abstract confidence="0.957882906666667">tice. The generator can produce text for about ten subtasks in FREM. These tasks comprise from two to eleven instructions, illustrating ten different instruction types such as: simple instruction with a goal, simple instruction with a condition, complex instruction with simultaneous actions, etc. They involve the use of various syntactical constructions such as infinitive or sentential subordinates, nominalisation, negation, etc. Input to the prototype are event graphs such as the one given in Figure 1. The output is a well formed French text such as the one in Figure 2 which was generated from Figure 1. In Lux&apos;s prototype, the event graphs were hand coded, but now Flaubert has been rewritten in CLEF (Meunier, 1999; Meunier and Reyes, 1999), which has a better graphical input mechanism that would have eased the input process. The output text is a sub-task including a title and instructions of different types (only the first three instructions are given in the Figures) be performed by the same person (e.g. FREM defines which connector to use for each type (e.g. conjunction instruction with simultaneous actions). The generation of noun groups for the obingredients tools relies on a mapping table between these labels and their denominations: this was a temporary solution for problems outside the scope of the prototype. We should have relied on existing for ingredients, the fact that objects are systematically represented in drawings associated with various sube.g. Or‚Äû called d&apos;arret, labeled the drawing associated with the example above. In a graphical interface environment, authors would select these objects linked to a controlled terminology data base. This proof of -concept generator servechwellour purpose of testing our theoretical ideas but unfortunately it could not be evaluated in a realistic CL text production environment. Our sponsors were very interested in the results we have produced but changes in their organisation made it impossible to carry further investigations. We intend to further pursue our research and use the new implementation of Flaubert to generate controlled language in an other area of application while keeping the concept of an extended modular CL. 5 Conclusion This paper has argued that linguistic norms imposed by CLs should not be considered in iso- They are only a part of a more comprehensive norms on the document structure and layout. This insight led us to define a notion of textual modules, each with its own linguistic norms, and to envisage the generation of technical documentation using an extended modular controlled language (EM CL). Norms for document structure such as ATA100, its linguistic characteristics and its layout requirements may be seen to respectively define text structuring, the linguistic and layout components of an NLG system. have also shown that a point of view can help refine the definition of an EM CL. The EMCL can be defined monolingually, muttilinguality being obtained through NLG. These ideas were tested within a proof of concept text generator in the domain of aircraft maintenance manuals. Acknowledgment thank our former colleagues at Aerospa- Center and Frederic Meunier who implemented Flaubert. We also thank El- .liot t-Macklowitefrwho suggest ed many i merits to the paper. 146 References PSC-85-16598, 1995. Simplified English Standard, a guide for the preparation of Aircraft Maintenance Documentation in the International Aerospace Maintenance Language. de .Normalisation. de et de l&apos;Espace (BNAE), Issy-les-Moulineaux, ATA no 100, traduction francaise. Specification for Manufacturer&apos;s Technical Data - ATA Specification 10, October. M.-H. Candito. 1996. A principle-based hierarrepresentation of LTAGs. Proceedings of the 16th International Conference on Linguistics, 194-199, Copenhagen. 1996. of the First International Workshop on Controlled Language Ap- (CLAW), L. Danlos and F. Meunier. 1996. G-TAG, un forrnalisme pour la generation de texte : presentation et applications industrielles. In Actes du colloque Inform atique et Langue Na- L. Danlos. 1998. G-TAG: un formalisme lexicalise de generation de textes inspire de Autornatique des Langues Danlos, 2000. Grammars, G- TAG: A Lexicalized Formalism for Text Generation inspired by Tree Adjoining Grammar. CSLI. M. Emorine. 1994. Projet de recherche sur la modelisation des entr√©es verbales du francais rationalise. Technical report, Universite de Clermont II. GIFAS. 1996. Guide dii redacteur partie 2: Francais rationalise. Technical report, GI- FAS, Paris. Hartley and C. Paris, 1996. texte procedural : Ian gage, action et cognition, chapter Une analyse fonctionnelle de textes proceduraux : apport de la generation automatique a. la definition des langues rationalisees, pages 211 222. Toulouse. LeveIt. 1989. from intention articulation. Press. Cambridge Massachusetts. Lux. 1998. d&apos;un ratioetendu pour un maintenance aeronautique, test en generation automatique. These de doctorat en linguistique, Universite Paris 7. F. Meunier and L. Danlos. 1998. FLAUBERT: an user-friendly system for multilingual text In of the 9th International.Workshop. on Natural Language Gener- (INLG &apos;98), 284-287, Niagara-onthe-Lake. F. Meunier and R. Reyes. 1999. Plate-forme de developpement de generateurs multilingues. de la conference de Generation Aude Tarte GAT&apos;99, 145-155, Grenoble, France. Meunier. 1997. de G-TAG, formalisrne pour to generation inspiree des d&apos;arbres adjoints. de doctorat en informatique, Universite Paris 7. F. Meunier. 1999. Modelisation des ressources linguistiques d&apos;une application industrielle.</abstract>
<note confidence="0.859150789473684">243-252, Cargese, Corse, 12-17 juillet. Nasr. 1996. rnodele de reformulation automatique fonde sur la theorie Sens-Texte aux Langues Controlees. thesis, Universite Paris 7. C. Paris, K. Vander Linden, M. Fischer, A. Hartley, L. Pemberton, R. Power, and D. Scott. 1995. A support tool for writmultilingaul instructions. In of the 14th International Joint Conference Artificial Intelligence (LICAI&apos;95), 1398-1404, Montr√©al. and G. Adriaens, 1992. Computwriting state of the art. From cogram to alcogram : toward a controlled english grammar checker, pages 206- 221. Kluwer Academic Publishers, London. 147</note>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>AECMA Document PSC-85-16598</author>
</authors>
<title>Simplified English Standard, a guide for the preparation of Aircraft Maintenance Documentation in the International Aerospace Maintenance Language.</title>
<date>1995</date>
<marker>PSC-85-16598, 1995</marker>
<rawString>AECMA Document PSC-85-16598, 1995. Simplified English Standard, a guide for the preparation of Aircraft Maintenance Documentation in the International Aerospace Maintenance Language.</rawString>
</citation>
<citation valid="true">
<title>de PAeronauticlueet de l&apos;Espace (BNAE), Issy-les-Moulineaux,</title>
<date>1995</date>
<journal>ATA Specification</journal>
<volume>10</volume>
<marker>1995</marker>
<rawString>Bureau de .Normalisation. - de PAeronauticlueet de l&apos;Espace (BNAE), Issy-les-Moulineaux, 1995. Specification ATA no 100, traduction francaise. Specification for Manufacturer&apos;s Technical Data - ATA Specification 10, October.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M-H Candito</author>
</authors>
<title>A principle-based hierarchical representation of LTAGs.</title>
<date>1996</date>
<booktitle>In Proceedings of the 16th International Conference on Computational Linguistics,</booktitle>
<pages>194--199</pages>
<location>Copenhagen.</location>
<marker>Candito, 1996</marker>
<rawString>M.-H. Candito. 1996. A principle-based hierarchical representation of LTAGs. In Proceedings of the 16th International Conference on Computational Linguistics, pages 194-199, Copenhagen.</rawString>
</citation>
<citation valid="true">
<authors>
<author>CLAW</author>
</authors>
<date>1996</date>
<booktitle>Proceedings of the First International Workshop on Controlled Language Applications (CLAW),</booktitle>
<location>Leuven.</location>
<marker>CLAW, 1996</marker>
<rawString>CLAW. 1996. Proceedings of the First International Workshop on Controlled Language Applications (CLAW), Leuven.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L Danlos</author>
<author>F Meunier</author>
</authors>
<title>G-TAG, un forrnalisme pour la generation de texte : presentation et applications industrielles.</title>
<date>1996</date>
<booktitle>In Actes du colloque Inform atique et Langue Naturelle,</booktitle>
<location>Nantes.</location>
<contexts>
<context position="10312" citStr="Danlos and Meunier, 1996" startWordPosition="1741" endWordPosition="1744">ensure that -the. generated text complies with the rules of the CL. However, many writing rules in a CL place particular syntactic constraints on the use of.. a given lexical item, e.g. in FR a rule forbids the use of ertipecher (prevent) when followed by an infinitive clause. To handle such numerous lexically dependent syntactic rules, a formalism based on a lexicalized grammar is needed. We chose Lexicalized Tree Adjoining Grammar (LTAG) for the following reasons: ‚Ä¢ A text generation formalism inspired from LTAG, called G-TAG, has been designed, implemented and used in several applications (Danlos and Meunier, 1996; Meunier, 1997; Danlos, 1998; Meunier and Danlos, 1998; Danlos, 2000). G-TAG takes as input an event graph which can be provided by the user by filling in some forms which ensure that all the necessary information for generation is provided. ‚Ä¢ G-TAG deals with textual phenomena such as sentence connectors by extending LTAG to handle discourse comprised of more than one sentence. One of the major innovations of FREM compared to FR (and of EMCL compared to CL) is to implement rules for connecting sentences (clauses). The way to connect sentences has largely been ignored in CLs, although this li</context>
<context position="12545" citStr="Danlos and Meunier, 1996" startWordPosition="2119" endWordPosition="2122">changed everywhere in the lexicalized grammar. Using the metagrammar we can achieve this quite easily because of the hierarchical organization of a LTAG: with only one rule, an imperative can be allowed and an infinitive disallowed (in- a main clause) for every verb, whatever its argument structure and syntactic construction. G-TAC thus seems a good candidate for producing technical documentation complying with the constraints of an (EM)CL. A technical documentation generator prototype in the aeronautical domain is described in Section 4. It is written in Flaubert, an implementation of G-TAC (Danlos and Meunier, 1996). The How to say it component would have to be completed by adding a layout component complying with the norms of ATA 100. We should also provide revision tools to allow the writer to fine tune the final text. So, automatically generating technical documentation seems technically possible provided the technical writer is willing to fill forms which in principle should be less demanding than learning the rules of an (EM)CL. This approach also has other advantages, described in the next section. 3 Advantages of automatic generation of technical documentation 3.1 Multilinguality One of the major </context>
</contexts>
<marker>Danlos, Meunier, 1996</marker>
<rawString>L. Danlos and F. Meunier. 1996. G-TAG, un forrnalisme pour la generation de texte : presentation et applications industrielles. In Actes du colloque Inform atique et Langue Naturelle, Nantes.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L Danlos</author>
</authors>
<title>G-TAG: un formalisme lexicalise de generation de textes inspire de TAG.</title>
<date>1998</date>
<booktitle>Traitement Autornatique des Langues T.A.L.,</booktitle>
<pages>39--2</pages>
<contexts>
<context position="10341" citStr="Danlos, 1998" startWordPosition="1747" endWordPosition="1748"> with the rules of the CL. However, many writing rules in a CL place particular syntactic constraints on the use of.. a given lexical item, e.g. in FR a rule forbids the use of ertipecher (prevent) when followed by an infinitive clause. To handle such numerous lexically dependent syntactic rules, a formalism based on a lexicalized grammar is needed. We chose Lexicalized Tree Adjoining Grammar (LTAG) for the following reasons: ‚Ä¢ A text generation formalism inspired from LTAG, called G-TAG, has been designed, implemented and used in several applications (Danlos and Meunier, 1996; Meunier, 1997; Danlos, 1998; Meunier and Danlos, 1998; Danlos, 2000). G-TAG takes as input an event graph which can be provided by the user by filling in some forms which ensure that all the necessary information for generation is provided. ‚Ä¢ G-TAG deals with textual phenomena such as sentence connectors by extending LTAG to handle discourse comprised of more than one sentence. One of the major innovations of FREM compared to FR (and of EMCL compared to CL) is to implement rules for connecting sentences (clauses). The way to connect sentences has largely been ignored in CLs, although this linguistic issue raises ambigui</context>
</contexts>
<marker>Danlos, 1998</marker>
<rawString>L. Danlos. 1998. G-TAG: un formalisme lexicalise de generation de textes inspire de TAG. Traitement Autornatique des Langues T.A.L., 39(2):4-32.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L Danlos</author>
</authors>
<title>Tag Grammars, chapter GTAG: A Lexicalized Formalism for Text Generation inspired by Tree Adjoining Grammar.</title>
<date>2000</date>
<publisher>CSLI.</publisher>
<contexts>
<context position="10382" citStr="Danlos, 2000" startWordPosition="1753" endWordPosition="1754"> writing rules in a CL place particular syntactic constraints on the use of.. a given lexical item, e.g. in FR a rule forbids the use of ertipecher (prevent) when followed by an infinitive clause. To handle such numerous lexically dependent syntactic rules, a formalism based on a lexicalized grammar is needed. We chose Lexicalized Tree Adjoining Grammar (LTAG) for the following reasons: ‚Ä¢ A text generation formalism inspired from LTAG, called G-TAG, has been designed, implemented and used in several applications (Danlos and Meunier, 1996; Meunier, 1997; Danlos, 1998; Meunier and Danlos, 1998; Danlos, 2000). G-TAG takes as input an event graph which can be provided by the user by filling in some forms which ensure that all the necessary information for generation is provided. ‚Ä¢ G-TAG deals with textual phenomena such as sentence connectors by extending LTAG to handle discourse comprised of more than one sentence. One of the major innovations of FREM compared to FR (and of EMCL compared to CL) is to implement rules for connecting sentences (clauses). The way to connect sentences has largely been ignored in CLs, although this linguistic issue raises ambiguities which can lead to maintenance errors</context>
</contexts>
<marker>Danlos, 2000</marker>
<rawString>L. Danlos, 2000. Tag Grammars, chapter GTAG: A Lexicalized Formalism for Text Generation inspired by Tree Adjoining Grammar. CSLI.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Emorine</author>
</authors>
<title>Projet de recherche sur la modelisation des entr√©es verbales du francais rationalise.</title>
<date>1994</date>
<tech>Technical report,</tech>
<institution>Universite de Clermont II.</institution>
<contexts>
<context position="15614" citStr="Emorine, 1994" startWordPosition="2630" endWordPosition="2631">nged in the What to say component (Section 2.1) going from one language to the other. Only the How to say it component (Section 2.2) need be adapted to the target (EM)CL which should be mortolingually defined. 3.2 NLG as an aid for testing and developing a CL An NLG system can provide concrete assistance for the testing and for the development of a CL. An NLG system that integrates the CL constraints can help discover contradictions in the CL definition. As an illustration, a major difficulty in CL definition concerns the coherence between the lexicon and the writing rules, as illustrated by (Emorine, 1994) with the following example: Empecher l&apos;oxygene de s&apos;accurauler (Prevent the oxygen from accumulating) does not conform to a FR lexically dependent syntactic rule, according to which einp6cher (prevent) should not be followed by an infinitive clause. -.0..E7riperittr l&apos;accumulation enxygene (Prevent oxygen accumulation) does not con144 Titled sub-task title , DEPOSER agent object Up 05 1st-inst 2nd-inst 3rd-inst Precond-Inst Simul-Inst Inst 1st-order 1st-order pre-cond 1st-order 2nd-order DEPOSER ENLEVER 1 , DEPOSER EXTRAIRE DEPOSER agent object agent object agent object agent object agent obj</context>
</contexts>
<marker>Emorine, 1994</marker>
<rawString>M. Emorine. 1994. Projet de recherche sur la modelisation des entr√©es verbales du francais rationalise. Technical report, Universite de Clermont II.</rawString>
</citation>
<citation valid="true">
<authors>
<author>GIFAS</author>
</authors>
<title>Guide dii redacteur - partie 2: Francais rationalise.</title>
<date>1996</date>
<tech>Technical report, GIFAS,</tech>
<location>Paris.</location>
<contexts>
<context position="3533" citStr="GIFAS, 1996" startWordPosition="574" endWordPosition="575">r, .1996; Hartley and Paris, 1996); hut we think that there are very compelling reasons for taking a generation perspective, in addition to the advantages of NLG for CLs that will be presented in section 3: * As CLs can be viewed as linguistic specifications for human beings, it seems natural .consider them - as specifications for the linguistic component of an NLG system. 141 o CL writing specifications come on top of other writing norms which deal with document structuring. For example, in the aeronautical industry, CLs such Simplified English (SE) (AEC, 1995) and Francais Rationalise (FR) (GIFAS, 1996) extend the ATA 100 norms (Bur, 1995) which describe the division of the document into chapters, sections, subsections, etc. reflecting a treestructured functional organization of the airplane: a chapter corresponds to a system (e.g. main rotor), a section to a subsystem (e.g. gear box), a subsection to a sub-sub-system (e.g. set of gears), and so on. Over this thematic structure is added a communicative structure to fulfill two main goals: describe all systems of the airplane and prescribe all maintenance instructions for the airplane. The norms of the ATA can be viewed as specifications for </context>
</contexts>
<marker>GIFAS, 1996</marker>
<rawString>GIFAS. 1996. Guide dii redacteur - partie 2: Francais rationalise. Technical report, GIFAS, Paris.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Hartley</author>
<author>C Paris</author>
</authors>
<title>Le texte procedural : Ian gage, action et cognition, chapter Une analyse fonctionnelle de textes proceduraux : apport de la generation automatique a. la definition des langues rationalisees,</title>
<date>1996</date>
<pages>211--222</pages>
<location>Toulouse.</location>
<contexts>
<context position="2955" citStr="Hartley and Paris, 1996" startWordPosition="472" endWordPosition="475">owed in a CL. Some instances of noncompliance are relatively easy to detect but much more difficult to correct: for example, sentences that are longer than the prescribed number of words. So there is little hope that human writers will ever produce documentation complying strictly with a CL even with the help of a conformity checker. We argue that it may be more promising to use NLG technology for generating documentation. in. CL instead of analyzing it afterwards, as it is the case with a conformity checker. Few researchers have looked at CLs fronr:a-.generation point of view.: (Nasr, .1996; Hartley and Paris, 1996); hut we think that there are very compelling reasons for taking a generation perspective, in addition to the advantages of NLG for CLs that will be presented in section 3: * As CLs can be viewed as linguistic specifications for human beings, it seems natural .consider them - as specifications for the linguistic component of an NLG system. 141 o CL writing specifications come on top of other writing norms which deal with document structuring. For example, in the aeronautical industry, CLs such Simplified English (SE) (AEC, 1995) and Francais Rationalise (FR) (GIFAS, 1996) extend the ATA 100 no</context>
</contexts>
<marker>Hartley, Paris, 1996</marker>
<rawString>A. Hartley and C. Paris, 1996. Le texte procedural : Ian gage, action et cognition, chapter Une analyse fonctionnelle de textes proceduraux : apport de la generation automatique a. la definition des langues rationalisees, pages 211 222. Toulouse.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W LeveIt</author>
</authors>
<title>Speaking - from intention to articulation.</title>
<date>1989</date>
<publisher>MIT Press.</publisher>
<location>Cambridge Massachusetts.</location>
<marker>LeveIt, 1989</marker>
<rawString>W. LeveIt. 1989. Speaking - from intention to articulation. MIT Press. Cambridge Massachusetts.</rawString>
</citation>
<citation valid="true">
<authors>
<author>V Lux</author>
</authors>
<title>Elaboration d&apos;un -francais rationalise etendu pour un 711(1712lel de maintenance aeronautique, test en generation automatique. These de doctorat en linguistique, Universite Paris 7.</title>
<date>1998</date>
<contexts>
<context position="4718" citStr="Lux, 1998" startWordPosition="771" endWordPosition="772">ed as specifications for the text structuring component of an NLG system. e The thematic and communicative structuring of the document must also conform to a systematic non-linear page numbering system and strict formatting rules using SGML tags. These constraints can be viewed as specifications for the layout component of an NLG system. So we claim that CLs should not be considered outside the context of the production of complex structured documents, which naturally raises the question of the automatic generation of this documentation given some formal representation. This claim led V. Lux (Lux, 1998) to redefine the notion of a CL. Her study has shown that only a few syntactic constraints (e.g. coordination constraints) are applicable to the whole document. Most constraints are only valid for sub-parts of the document, identified as &amp;quot;textual modules&apos;. Each textual module has a particular communicative-goal and a. precise theme according to the ATA 100 norms. It, can be divided into smaller modules: for example, the Task module is divided into simpler SubTask modules which are themselves composed of simpler Instructions modules. From a linguistic point of view, a textual module uses only a</context>
<context position="18029" citStr="Lux, 1998" startWordPosition="3043" endWordPosition="3044">G precisely deals with paraphrase as, for some inputs, a NLG system will produce several texts. In this way, NLG helps identify which paraphrases still remain possible in the CL. In practice, when an NLG system proposes several texts for one input, it raises the question for the CL developer: Should a constraint be added to the CL definition in order to forbid some of these texts ? 4 Proof of concept generator The previous sections have argued for the interest of dealing with CL from an NLG perspective which to our knowledge had never been examined in such details. To further pursue, V. Lux ‚Ä¢(Lux, 1998) has developed a proof of concept generator using Flaubert (Meunier, 1997: Meunier-and -Dardos; -&apos;1998)- to ‚Ä¢ -see ‚Ä¢IoW -these - theoretical concerns could be applied in prac145 Sous-tache 60-007 3.1 Depose du segment d&apos;arret (5) Apres avoir ertleve le mastic PR, deposer le segment d&apos;arret (4). - Extraire le parte joint (2) et deposer le joint (3). - Deposer le segment d&apos;arret (5) a l&apos;aide de l&apos;outillage (Z). Figure 2a._-Text-generateckby-tElembertfrom-theqinput of-Figure-1- tice. The generator can produce text for about ten subtasks in FREM. These tasks comprise from two to eleven instruction</context>
</contexts>
<marker>Lux, 1998</marker>
<rawString>V. Lux. 1998. Elaboration d&apos;un -francais rationalise etendu pour un 711(1712lel de maintenance aeronautique, test en generation automatique. These de doctorat en linguistique, Universite Paris 7.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F Meunier</author>
<author>L Danlos</author>
</authors>
<title>FLAUBERT: an user-friendly system for multilingual text generation.</title>
<date>1998</date>
<booktitle>In Proceedings of the 9th International.Workshop. on Natural Language Generation (INLG &apos;98),</booktitle>
<pages>284--287</pages>
<location>Niagara-onthe-Lake.</location>
<contexts>
<context position="10367" citStr="Meunier and Danlos, 1998" startWordPosition="1749" endWordPosition="1752">s of the CL. However, many writing rules in a CL place particular syntactic constraints on the use of.. a given lexical item, e.g. in FR a rule forbids the use of ertipecher (prevent) when followed by an infinitive clause. To handle such numerous lexically dependent syntactic rules, a formalism based on a lexicalized grammar is needed. We chose Lexicalized Tree Adjoining Grammar (LTAG) for the following reasons: ‚Ä¢ A text generation formalism inspired from LTAG, called G-TAG, has been designed, implemented and used in several applications (Danlos and Meunier, 1996; Meunier, 1997; Danlos, 1998; Meunier and Danlos, 1998; Danlos, 2000). G-TAG takes as input an event graph which can be provided by the user by filling in some forms which ensure that all the necessary information for generation is provided. ‚Ä¢ G-TAG deals with textual phenomena such as sentence connectors by extending LTAG to handle discourse comprised of more than one sentence. One of the major innovations of FREM compared to FR (and of EMCL compared to CL) is to implement rules for connecting sentences (clauses). The way to connect sentences has largely been ignored in CLs, although this linguistic issue raises ambiguities which can lead to mai</context>
</contexts>
<marker>Meunier, Danlos, 1998</marker>
<rawString>F. Meunier and L. Danlos. 1998. FLAUBERT: an user-friendly system for multilingual text generation. In Proceedings of the 9th International.Workshop. on Natural Language Generation (INLG &apos;98), pages 284-287, Niagara-onthe-Lake.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F Meunier</author>
<author>R Reyes</author>
</authors>
<title>Plate-forme de developpement de generateurs multilingues.</title>
<date>1999</date>
<booktitle>In Actes de la conference de Generation Automatique de Tarte GAT&apos;99,</booktitle>
<pages>145--155</pages>
<location>Grenoble, France.</location>
<contexts>
<context position="19259" citStr="Meunier and Reyes, 1999" startWordPosition="3237" endWordPosition="3240">ustrating ten different instruction types such as: simple instruction with a goal, simple instruction with a condition, complex instruction with simultaneous actions, etc. They involve the use of various syntactical constructions such as infinitive or sentential subordinates, nominalisation, negation, etc. Input to the prototype are event graphs such as the one given in Figure 1. The output is a well formed French text such as the one in Figure 2 which was generated from Figure 1. In Lux&apos;s prototype, the event graphs were hand coded, but now Flaubert has been rewritten in CLEF (Meunier, 1999; Meunier and Reyes, 1999), which has a better graphical input mechanism that would have eased the input process. The output text is a sub-task including a title and instructions of different types (only the first three instructions are given in the Figures) to be performed by the same person (e.g. U0). FREM defines which connector to use for each instruction type (e.g. conjunction et for an instruction with simultaneous actions). The generation of noun groups for the objects (0i), ingredients (Ingi) and tools (Ti) relies on a mapping table between these labels and their denominations: this was a temporary solution for</context>
</contexts>
<marker>Meunier, Reyes, 1999</marker>
<rawString>F. Meunier and R. Reyes. 1999. Plate-forme de developpement de generateurs multilingues. In Actes de la conference de Generation Automatique de Tarte GAT&apos;99, pages 145-155, Grenoble, France.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F Meunier</author>
</authors>
<title>Implementation de G-TAG, formalisrne pour to generation inspiree des grammaires d&apos;arbres adjoints. These de doctorat en informatique, Universite Paris 7.</title>
<date>1997</date>
<contexts>
<context position="10327" citStr="Meunier, 1997" startWordPosition="1745" endWordPosition="1746">d text complies with the rules of the CL. However, many writing rules in a CL place particular syntactic constraints on the use of.. a given lexical item, e.g. in FR a rule forbids the use of ertipecher (prevent) when followed by an infinitive clause. To handle such numerous lexically dependent syntactic rules, a formalism based on a lexicalized grammar is needed. We chose Lexicalized Tree Adjoining Grammar (LTAG) for the following reasons: ‚Ä¢ A text generation formalism inspired from LTAG, called G-TAG, has been designed, implemented and used in several applications (Danlos and Meunier, 1996; Meunier, 1997; Danlos, 1998; Meunier and Danlos, 1998; Danlos, 2000). G-TAG takes as input an event graph which can be provided by the user by filling in some forms which ensure that all the necessary information for generation is provided. ‚Ä¢ G-TAG deals with textual phenomena such as sentence connectors by extending LTAG to handle discourse comprised of more than one sentence. One of the major innovations of FREM compared to FR (and of EMCL compared to CL) is to implement rules for connecting sentences (clauses). The way to connect sentences has largely been ignored in CLs, although this linguistic issue </context>
<context position="18102" citStr="Meunier, 1997" startWordPosition="3055" endWordPosition="3056">ll produce several texts. In this way, NLG helps identify which paraphrases still remain possible in the CL. In practice, when an NLG system proposes several texts for one input, it raises the question for the CL developer: Should a constraint be added to the CL definition in order to forbid some of these texts ? 4 Proof of concept generator The previous sections have argued for the interest of dealing with CL from an NLG perspective which to our knowledge had never been examined in such details. To further pursue, V. Lux ‚Ä¢(Lux, 1998) has developed a proof of concept generator using Flaubert (Meunier, 1997: Meunier-and -Dardos; -&apos;1998)- to ‚Ä¢ -see ‚Ä¢IoW -these - theoretical concerns could be applied in prac145 Sous-tache 60-007 3.1 Depose du segment d&apos;arret (5) Apres avoir ertleve le mastic PR, deposer le segment d&apos;arret (4). - Extraire le parte joint (2) et deposer le joint (3). - Deposer le segment d&apos;arret (5) a l&apos;aide de l&apos;outillage (Z). Figure 2a._-Text-generateckby-tElembertfrom-theqinput of-Figure-1- tice. The generator can produce text for about ten subtasks in FREM. These tasks comprise from two to eleven instructions, illustrating ten different instruction types such as: simple instructi</context>
</contexts>
<marker>Meunier, 1997</marker>
<rawString>F. Meunier. 1997. Implementation de G-TAG, formalisrne pour to generation inspiree des grammaires d&apos;arbres adjoints. These de doctorat en informatique, Universite Paris 7.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F Meunier</author>
</authors>
<title>Modelisation des ressources linguistiques d&apos;une application industrielle.</title>
<date>1999</date>
<booktitle>In TALN&apos;99,</booktitle>
<pages>243--252</pages>
<location>Cargese, Corse,</location>
<contexts>
<context position="19233" citStr="Meunier, 1999" startWordPosition="3235" endWordPosition="3236">structions, illustrating ten different instruction types such as: simple instruction with a goal, simple instruction with a condition, complex instruction with simultaneous actions, etc. They involve the use of various syntactical constructions such as infinitive or sentential subordinates, nominalisation, negation, etc. Input to the prototype are event graphs such as the one given in Figure 1. The output is a well formed French text such as the one in Figure 2 which was generated from Figure 1. In Lux&apos;s prototype, the event graphs were hand coded, but now Flaubert has been rewritten in CLEF (Meunier, 1999; Meunier and Reyes, 1999), which has a better graphical input mechanism that would have eased the input process. The output text is a sub-task including a title and instructions of different types (only the first three instructions are given in the Figures) to be performed by the same person (e.g. U0). FREM defines which connector to use for each instruction type (e.g. conjunction et for an instruction with simultaneous actions). The generation of noun groups for the objects (0i), ingredients (Ingi) and tools (Ti) relies on a mapping table between these labels and their denominations: this wa</context>
</contexts>
<marker>Meunier, 1999</marker>
<rawString>F. Meunier. 1999. Modelisation des ressources linguistiques d&apos;une application industrielle. In TALN&apos;99, pages 243-252, Cargese, Corse, 12-17 juillet.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Nasr</author>
</authors>
<title>Un rnodele de reformulation automatique fonde sur la theorie Sens-Texte -application aux Langues Controlees.</title>
<date>1996</date>
<tech>Ph.D. thesis,</tech>
<institution>Universite Paris</institution>
<contexts>
<context position="2059" citStr="Nasr, 1996" startWordPosition="325" endWordPosition="326"> 1992). However CLs are presently being defined for German, Swedish and French. Technical writers find it difficult to comply with the writing rules of a CL which are often hard to justify (CLA. 1996). For them, a CL is seen as an additional constraint on an already complex task. This is why tools have been deWork done while at the Aerospatiale Research Center veloped for CL users, the best known being conformity checkers/controllers such as AlethCL or SECC (CLA, 1996). A writer expects that the checking tool should not only detect errors but also propose a CL conformable expression. A. Nasr (Nasr, 1996), who worked on the problem of CL reformulation, underlines the difficulties of this task. Reformulation cannot make any hypotheses about the conformity of the input sentences, and therefore must deal with a wider variety of lexico-syntactical constructions than those allowed in a CL. Some instances of noncompliance are relatively easy to detect but much more difficult to correct: for example, sentences that are longer than the prescribed number of words. So there is little hope that human writers will ever produce documentation complying strictly with a CL even with the help of a conformity c</context>
</contexts>
<marker>Nasr, 1996</marker>
<rawString>A. Nasr. 1996. Un rnodele de reformulation automatique fonde sur la theorie Sens-Texte -application aux Langues Controlees. Ph.D. thesis, Universite Paris 7.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C Paris</author>
<author>K Vander Linden</author>
<author>M Fischer</author>
<author>A Hartley</author>
<author>L Pemberton</author>
<author>R Power</author>
<author>D Scott</author>
</authors>
<title>A support tool for writing multilingaul instructions.</title>
<date>1995</date>
<booktitle>In Proceedings of the 14th International Joint Conference on Artificial Intelligence (LICAI&apos;95),</booktitle>
<pages>1398--1404</pages>
<location>Montr√©al.</location>
<contexts>
<context position="6689" citStr="Paris et al., 1995" startWordPosition="1100" endWordPosition="1103">o the rules of an EMCL. 2 How to generate technical documentation? We assume that a generation system can be divided into a What to say and How to say it components, even though this may be considered as a gross simplification. 2.1 What to say component The main difficulty for NLG in a real environment lies in knowledge modeling. For aircraft maintenance manuals, existing ontologies could probably be reused, but even then the modeling efforts required are huge. Nevertheless, we assume that it is possible to design forms which are sequentially presented to the user to be filled, as in Drafter (Paris et al., 1995), through which the technical writer provides the information to convey in an appropriate formalism. These forms can be derived directly from the tree-like structure of the document given in the ATA norms. The goal is that, once the writer has finished filling in these forms, the technical documentation is already properly structured in an abstract language instead of a natural one. In a general text generation setting, using forms to describe what is to be said might seen, like a difficult task; but in the context of technical writing, the informational content is almost already prescribed an</context>
</contexts>
<marker>Paris, Linden, Fischer, Hartley, Pemberton, Power, Scott, 1995</marker>
<rawString>C. Paris, K. Vander Linden, M. Fischer, A. Hartley, L. Pemberton, R. Power, and D. Scott. 1995. A support tool for writing multilingaul instructions. In Proceedings of the 14th International Joint Conference on Artificial Intelligence (LICAI&apos;95), pages 1398-1404, Montr√©al.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Scheurs</author>
<author>G Adriaens</author>
</authors>
<title>Computers and writing - state of the art. chapter From cogram to alcogram : toward a controlled english grammar checker,</title>
<date>1992</date>
<pages>206--221</pages>
<publisher>Kluwer Academic Publishers,</publisher>
<location>London.</location>
<contexts>
<context position="1454" citStr="Scheurs and Adriaens, 1992" startWordPosition="219" endWordPosition="222">of of concept generator for the domain of aircraft maintenance manuals. 1 What is a Controlled Language? Controlled Languages (CLs) result from a growing concern about technical documentation quality and translation, be it human or automatic. A CL consists of a glossary and of writing rules for the linguistic aspect of the documentation. These rules are given as recommendations or prohibitions for both the lexicon and the grammar. Currently, most CLs are varieties of &amp;quot;controlled English&amp;quot; which derive from the Caterpillar Tractor Company Fundamental English that was elaborated .in the sixties (Scheurs and Adriaens, 1992). However CLs are presently being defined for German, Swedish and French. Technical writers find it difficult to comply with the writing rules of a CL which are often hard to justify (CLA. 1996). For them, a CL is seen as an additional constraint on an already complex task. This is why tools have been deWork done while at the Aerospatiale Research Center veloped for CL users, the best known being conformity checkers/controllers such as AlethCL or SECC (CLA, 1996). A writer expects that the checking tool should not only detect errors but also propose a CL conformable expression. A. Nasr (Nasr, </context>
</contexts>
<marker>Scheurs, Adriaens, 1992</marker>
<rawString>J. Scheurs and G. Adriaens, 1992. Computers and writing - state of the art. chapter From cogram to alcogram : toward a controlled english grammar checker, pages 206-221. Kluwer Academic Publishers, London.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>