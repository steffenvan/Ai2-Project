<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000055">
<title confidence="0.97474">
Representing and Accessing Multi-Level Annotations in MMAX2
</title>
<author confidence="0.919114">
Christoph M¨uller
</author>
<affiliation confidence="0.74522">
EML Research gGmbH
</affiliation>
<address confidence="0.832484333333333">
Villa Bosch
Schloß-Wolfsbrunnenweg 33
69118 Heidelberg, Germany
</address>
<email confidence="0.896581">
christoph.mueller@eml-research.de
</email>
<sectionHeader confidence="0.999656" genericHeader="abstract">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999857777777778">
MMAX21 is a versatile, XML-based annotation
tool which has already been used in a variety of an-
notation projects. It is also the tool of choice in the
ongoing project DIANA-Summ, which deals with
anaphora resolution and its application to spoken
dialog summarization. The project uses the ICSI
Meeting Corpus (Janin et al., 2003), a corpus of
multi-party dialogs which contains a considerable
amount of simultaneous speech. It features a semi-
automatically generated segmentation in which
the corpus developers tried to track the flow of the
dialog by inserting segment starts approximately
whenever a person started talking. As a result, the
corpus has some interesting structural properties,
most notably overlap, that are challenging for an
XML-based representation format. The following
brief overview of MMAX2 focuses on this aspect,
using examples from the ICSI Meeting Corpus.
</bodyText>
<sectionHeader confidence="0.961377" genericHeader="method">
2 The MMAX2 Data Model
</sectionHeader>
<bodyText confidence="0.999926125">
Like most current annotation tools, MMAX2
makes use of stand-off annotation. The base data
is represented as a sequence of &lt;word&gt; elements
with exactly one PCDATA child each. Normally,
these PCDATA children represent orthographical
words, but larger or smaller units (e.g. characters)
are also possible, depending on the required gran-
ularity of the representation.2
</bodyText>
<figure confidence="0.912933">
&lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;US-ASCII&amp;quot;?&gt;
&lt;!DOCTYPE words SYSTEM &amp;quot;words.dtd&amp;quot;&gt;
&lt;words&gt;
...
&lt;word id=&amp;quot;word_3710&amp;quot;&gt;That&lt;/word&gt;
&lt;word id=&amp;quot;word_3711&amp;quot;&gt;’s&lt;/word&gt;
&lt;word id=&amp;quot;word_3712&amp;quot;&gt;just&lt;/word&gt;
&lt;word id=&amp;quot;word_3713&amp;quot;&gt;a&lt;/word&gt;
&lt;word id=&amp;quot;word_3714&amp;quot; meta=&amp;quot;true&amp;quot;&gt;Pause&lt;/word&gt;
&lt;word id=&amp;quot;word_3715&amp;quot;&gt;specification&lt;/word&gt;
&lt;word id=&amp;quot;word_3716&amp;quot;&gt;for&lt;/word&gt;
&lt;word id=&amp;quot;word_3717&amp;quot;&gt;the&lt;/word&gt;
</figure>
<footnote confidence="0.864528166666667">
&lt;word id=&amp;quot;word_3718&amp;quot;&gt;X_M_L&lt;/word&gt;
&lt;word id=&amp;quot;word_3719&amp;quot;&gt;Yep&lt;/word&gt;
&lt;word id=&amp;quot;word_3720&amp;quot;&gt;.&lt;/word&gt;
1http://mmax.eml-research.de
2The meta attribute in the example serves to distinguish
meta information from actual spoken words.
</footnote>
<equation confidence="0.449036">
&lt;word id=&amp;quot;word_3721&amp;quot;&gt;format&lt;/word&gt;
&lt;word id=&amp;quot;word_3722&amp;quot;&gt;.&lt;/word&gt;
...
&lt;/words&gt;
</equation>
<bodyText confidence="0.999127925925926">
The order of the elements in the base data file is
determined by the order of the segments that they
belong to.
Annotations are represented in the form of
&lt;markable&gt; elements which reference one or
more base data elements by means of a span at-
tribute. Each markable is associated with exactly
one markable level which has a unique, descrip-
tive name and which groups markables that be-
long to the same category or annotation dimen-
sion. Each markable level is stored in a sepa-
rate XML file which bears the level name as an
XML name space. The ID of a markable must be
unique for the level that it belongs to. Markables
can carry arbitrarily many features in the common
attribute=value format. It is by means of
these features that the actual annotation informa-
tion is represented. For each markable level, ad-
missible attributes and possible values are defined
in an annotation scheme XML file (not shown).
These annotation schemes are much more power-
ful for expressing attribute-related constraints than
e.g. DTDs. The following first example shows the
result of the segmentation of the sample base data.
The participant attribute contains the identi-
fier of the speaker that is associated with the re-
spective segment.
</bodyText>
<footnote confidence="0.630987555555556">
&lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;US-ASCII&amp;quot;?&gt;
&lt;!DOCTYPE markables SYSTEM &amp;quot;markables.dtd&amp;quot;&gt;
&lt;markables xmlns=&amp;quot;www.eml.org/NameSpaces/segment&amp;quot;&gt;
...
&lt;markable id=&amp;quot;markable_468&amp;quot;
span=&amp;quot;word_3710..word_3714&amp;quot;
participant=&amp;quot;me012&amp;quot;/&gt;
&lt;markable id=&amp;quot;markable_469&amp;quot;
span=&amp;quot;word_3715..word_3718&amp;quot;
participant=&amp;quot;me012&amp;quot;/&gt;
&lt;markable id=&amp;quot;markable_470&amp;quot;
span=&amp;quot;word_3719..word_3720&amp;quot;
participant=&amp;quot;mn015&amp;quot;/&gt;
&lt;markable id=&amp;quot;markable_471&amp;quot;
span=&amp;quot;word_3721..word_3722&amp;quot;
participant=&amp;quot;me012&amp;quot;/&gt;
...
&lt;/markables&gt;
</footnote>
<page confidence="0.996459">
73
</page>
<bodyText confidence="0.998574333333333">
The next example contains markables representing
the nominal and verbal chunks in the sample base
data.
</bodyText>
<figure confidence="0.994369136363637">
&lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;US-ASCII&amp;quot;?&gt;
&lt;!DOCTYPE markables SYSTEM &amp;quot;markables.dtd&amp;quot;&gt;
&lt;markables xmlns=&amp;quot;www.eml.org/NameSpaces/chunks&amp;quot;&gt;
...
&lt;markable id=&amp;quot;markable_7834&amp;quot;
span=&amp;quot;word_3710&amp;quot;
type=&amp;quot;demonstrative&amp;quot;/&gt;
&lt;markable id=&amp;quot;markable_7835&amp;quot;
span=&amp;quot;word_3711&amp;quot;
type=&amp;quot;copula&amp;quot;/&gt;
&lt;markable id=&amp;quot;markable_7836&amp;quot;
span=&amp;quot;word_3713..word_3715&amp;quot;
type=&amp;quot;nn&amp;quot;/&gt;
&lt;markable id=&amp;quot;markable_7837&amp;quot;
span=&amp;quot;word_3711..word_3715&amp;quot;
type=&amp;quot;predication&amp;quot;
subject=&amp;quot;markable_7834&amp;quot;/&gt;
&lt;markable id=&amp;quot;markable_7838&amp;quot;
span=&amp;quot;word_3717..word_3718,word_3721&amp;quot;
type=&amp;quot;nn&amp;quot;/&gt;
...
&lt;/markables&gt;
</figure>
<bodyText confidence="0.8377155">
The following basic facts about markables in
MMAX2 are worth noting:
</bodyText>
<listItem confidence="0.9107375">
1. Every markable is defined with reference to
the base data. Markables on the same or different
</listItem>
<bodyText confidence="0.989411095238095">
levels are independent and ignorant of each other,
and only related indirectly, i.e. by means of base
data elements that they have in common.3 Struc-
tural relations like embedding ([[’s] just [a speci-
fication]]) can only be determined with recourse
to the base data elements that each markable
spans. This lazy representation makes it simple
and straightforward to add markables and entire
markable levels to existing annotations. It is also a
natural way to represent non-hierarchical relations
like overlap between markables. For example, a
segment break runs through the nominal chunk
represented by markable markable 7836 ([a
specification]) in the example above. If the seg-
ment markables were defined in terms of the mark-
ables contained in them, this would be a prob-
lem because the nominal chunk crosses a segment
boundary. The downside of this lazy representa-
tion is that more processing is required for e.g.
querying, when the structural relations between
markables have to be determined.
</bodyText>
<listItem confidence="0.9951846">
2. Markables can be discontinuous. A markable
normally spans a sequence of base data elements.
Each connected subsequence of these is called a
markable fragment. A discontinuous markable is
one that contains more than one fragment, like
</listItem>
<bodyText confidence="0.910347214285714">
3Note that this merely means that markables are not
defined in terms of other markables, while they can in-
deed reference each other: In the above example, markable
markable 7837 ([’s just a specification]) uses an associa-
tive relation (in this case named subject) to represent a ref-
erence to markable markable 7834 ([That]) on the same
level. References to markables on other levels can be repre-
sented by prefixing the markable ID with the level name.
markable markable 7838 ([the XML format])
above. Actually, this markable exemplifies what
could be called discontinuous overlap because it
does not only cross a segment boundary, but it also
has to omit elements from an intervening segment
by another speaker.
</bodyText>
<sectionHeader confidence="0.910749" genericHeader="method">
3 Accessing Data From Within MMAX2
</sectionHeader>
<subsectionHeader confidence="0.986915">
3.1 Visualization
</subsectionHeader>
<bodyText confidence="0.99868675">
When a MMAX2 document is currently loaded,
the main display contains the base data text plus
annotation-related information. This information
can comprise
</bodyText>
<listItem confidence="0.999908625">
• line breaks (e.g. one after each segment),
• markable feature’s values (e.g. the
participant value at the beginning
of each segment),
• literal text (e.g. a tab character after the
participant value),
• markable customizations, and
• markable handles.
</listItem>
<bodyText confidence="0.999943222222222">
The so-called markable customizations are in
charge of displaying text in different colors, fonts,
font styles, or font sizes depending on a mark-
able’s features. The order in which they are ap-
plied to the text is determined by the order of
the currently available markable levels. Mark-
able customizations are processed bottom-up, so
markable levels should be ordered in such a way
that levels containing smaller elements (e.g. POS
tags) should be on top of those levels contain-
ing larger elements (chunks, segments etc.). This
way, smaller elements will not be hidden by larger
ones.
When it comes to visualizing several, poten-
tially embedded or overlapping markables, the so-
called markable handles are of particular impor-
tance. In their most simple form, markable han-
dles are pairs of short strings (most often pairs
of brackets) that are displayed directly before and
after each fragment of a markable. When two
or more markables from different levels start at
the same base data element, the nesting order of
the markables (and their handles) is determined
on the basis of the order of the currently avail-
able markable levels. The color of markable han-
dles can also be customized depending on a mark-
able’s features. Figure 1 gives an idea of what the
</bodyText>
<page confidence="0.998491">
74
</page>
<figureCaption confidence="0.999842">
Figure 1: Highlighted markable handles on a discontinuous (left) and an overlapping (right) markable.
</figureCaption>
<bodyText confidence="0.9997381">
MMAX2 main window can look like. Both han-
dles and text background for chunk markables
with type=predication are rendered in light
gray. Other handles are rendered in a darker color.
Markable handles are sensitive to mouse events:
resting the mouse pointer over a markable handle
will highlight all handles of the pertaining mark-
able. Reasonable use of markable customizations
and handles allows for convenient visualization of
even rather complex annotations.
</bodyText>
<subsectionHeader confidence="0.998912">
3.2 Querying
</subsectionHeader>
<bodyText confidence="0.992395782608696">
MMAX2 includes a query console which can be
used to formulate simple queries using a special
multi-level query language called MMAXQL. A
query in MMAXQL consists of a sequence of
query tokens which describe elements (i.e. either
base data elements or markables) to be matched,
and relation operators which specify which rela-
tion should hold between the elements matched
by two adjacent query tokens. A single markable
query token has the form
string/conditions
where string is an optional regular expression
and conditions specifies which features(s) the
markable should match. The most simple condi-
tion is just the name of a markable level, which
will match all markables on that level. If a regular
expression is also supplied, the query will return
only the matching markables. The query
[Aa]n?\s.+/chunks
will return all markables from the chunks level
that begin with the indefinite article4. Markables
with particular features can be queried by specify-
ing the desired attribute-value combinations. The
</bodyText>
<footnote confidence="0.87919">
4The space character in the regular expression must be
masked as \s because otherwise it will be interpreted as a
query token separator.
</footnote>
<bodyText confidence="0.981743676470588">
following query e.g. will return all markables from
the chunks level with a type value of either nn
or demonstrative:
/chunks.type={nn,demonstrative}
If a particular value is defined for exactly one at-
tribute on exactly one markable level only, both
the level and the attribute name can be left out in
a query, rendering queries very concise (cf. the ac-
cess to the meta level below).
Relation operators can be used to connect
two query tokens to form a complex query.
The set of supported sequential and hierarchi-
cal relation operators5 includes meets (default),
starts, starts with, in, dom, equals,
ends, ends with, overlaps right, and
overlaps left. Whether two markables stand
in a certain relation is determined with respect
to the base data elements that they span. In the
current early implementation, for all markables
(including discontinuous ones), only the first and
last base data element is considered. The re-
sult of a query can directly be used as the input
to another query. The following example gives
an idea of what a more complex query can look
like. The query combines the segment level, the
meta level (which contains markables represent-
ing e.g. pauses, emphases, or sounds like breath-
ing or mike noise), and the base data level to re-
trieve those instances of you know from the ICSI
Meeting corpus that occur in segments spoken by
female speakers6 which also contain a pause or an
emphasis (represented on the meta level):
’[Yy]ou know’ in (/participant={f.*} dom /{pause,emphasis})
The next query shows how overlap can be han-
</bodyText>
<footnote confidence="0.99908075">
5Associative relations are not discussed here, (M¨uller,
2005).
6The first letter of the participant value encodes the
speaker’s gender.
</footnote>
<page confidence="0.998919">
75
</page>
<bodyText confidence="0.9719675">
dled. It retrieves all chunk markables along with
their pertaining segments by getting two partial
lists and merging them using the operator or.
(/chunks in /segment) or (/chunks overlaps_right /segment)
</bodyText>
<sectionHeader confidence="0.771155" genericHeader="method">
4 Accessing Data by Means of XSL
</sectionHeader>
<bodyText confidence="0.975867588235294">
MMAX2 has a built-in XSL style sheet proces-
sor7 that can be used from the console to read
a MMAX2 document and process it with a user-
defined XSL style sheet. The XSL processor pro-
vides some special extensions for handling stand-
off annotation as it is realized in MMAX2. In the
current beta implementation, only some basic ex-
tensions exist. The style sheet processor can be
called from the console like this:
org.eml.MMAX2.Process -in INFILE.mmax -style STYLEFILE.xsl
The root element of each MMAX2 document is
the words element, i.e. the root of the base data
file, which will be matched by the supplied XSL
style sheet’s default template. The actual process-
ing starts in the XSL template for the word ele-
ments, i.e. the root element’s children. A minimal
template looks like this:
</bodyText>
<figure confidence="0.9806768">
&lt;xsl:template match=&amp;quot;word&amp;quot;&gt;
&lt;xsl:text&gt; &lt;/xsl:text&gt;
&lt;xsl:apply-templates
select=&amp;quot;mmax:getStartedMarkables(@id)&amp;quot;
mode=&amp;quot;opening&amp;quot;/&gt;
&lt;xsl:value-of select=&amp;quot;text()&amp;quot;/&gt;
&lt;xsl:apply-templates
select=&amp;quot;mmax:getEndedMarkables(@id)&amp;quot;
mode=&amp;quot;closing&amp;quot;/&gt;
&lt;/xsl:template&gt;
</figure>
<bodyText confidence="0.998201916666667">
The above template inserts a white space before
the current word and then calls an extension func-
tion that returns a NodeList containing all mark-
ables starting at the word. The template then
inserts the word’s text and calls another exten-
sion function that returns a NodeList of markables
ending at the word. The markables returned by
the two extension function calls are themselves
matched by XSL templates. A minimal template
pair for matching starting and ending markables
from the chunks level and enclosing them in
bold brackets (using HTML) looks like this:
</bodyText>
<figure confidence="0.872981166666667">
&lt;xsl:template match=&amp;quot;chunks:markable&amp;quot; mode=&amp;quot;opening&amp;quot;&gt;
&lt;b&gt;[&lt;/b&gt;
&lt;/xsl:template&gt;
&lt;xsl:template match=&amp;quot;chunks:markable&amp;quot; mode=&amp;quot;closing&amp;quot;&gt;
&lt;b&gt;]&lt;/b&gt;
&lt;/xsl:template&gt;
</figure>
<bodyText confidence="0.9988964">
Note how the markable level name (here:
chunks) is used as a markable name space
to control which markables the above templates
should match. The following templates wrap a
pair of &lt;p&gt; tags around each markable from
</bodyText>
<footnote confidence="0.563218">
7Based on Apache’s Xalan
</footnote>
<bodyText confidence="0.9776375">
the segment level and adds the value of the
participant attribute to the beginning of each.
</bodyText>
<figure confidence="0.629667111111111">
&lt;xsl:template match=&amp;quot;segment:markable&amp;quot; mode=&amp;quot;opening&amp;quot;&gt;
&lt;xsl:text disable-output-escaping=&amp;quot;yes&amp;quot;&gt;&lt;p&gt;&lt;/xsl:text&gt;
&lt;b&gt;
&lt;xsl:value-of select=&amp;quot;@participant&amp;quot;/&gt;
&lt;/b&gt;
&lt;/xsl:template&gt;
&lt;xsl:template match=&amp;quot;segment:markable&amp;quot; mode=&amp;quot;closing&amp;quot;&gt;
&lt;xsl:text disable-output-escaping=&amp;quot;yes&amp;quot;&gt;&lt;/p&gt;&lt;/xsl:text&gt;
&lt;/xsl:template&gt;
</figure>
<bodyText confidence="0.85554575">
Creating HTML in this way can be useful for
converting a MMAX2 document with multiple
levels of annotation to a lean version for distrib-
ution and (online) viewing.
</bodyText>
<sectionHeader confidence="0.999378" genericHeader="conclusions">
5 Conclusion
</sectionHeader>
<bodyText confidence="0.999937266666667">
MMAX2 is a practically usable tool for multi-
level annotation. Its main field of application is
the manual creation of annotated corpora, which
is supported by flexible and powerful means of vi-
sualizing both simple and complex (incl. overlap-
ping) annotations. MMAX2 also features a sim-
ple query language and a way of accessing anno-
tated corpora by means of XSL style sheets. While
these two data access methods are somewhat lim-
ited in scope, they are still useful in practice. If
a query or processing task is beyond the scope of
what MMAX2 can do, its simple and open XML
data format allows for easy conversion into other
XML-based formats, incl. those of other annota-
tion and query tools.
</bodyText>
<sectionHeader confidence="0.998407" genericHeader="acknowledgments">
Acknowledgements
</sectionHeader>
<bodyText confidence="0.99946">
This work has partly been funded by the Klaus
Tschira Foundation (KTF), Heidelberg, Germany,
and by the Deutsche Forschungsgemeinschaft
(DFG) in the context of the project DIANA-Summ
(STR 545/2-1).
</bodyText>
<sectionHeader confidence="0.999468" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999569666666667">
Janin, A., D. Baron, J. Edwards, D. Ellis, D. Gelbart,
N. Morgan, B. Peskin, T. Pfau, E. Shriberg, A. Stol-
cke &amp; C. Wooters (2003). The ICSI Meeting Cor-
pus. In Proceedings of the IEEE International Con-
ference on Acoustics, Speech and Signal Processing,
Hong Kong, pp. 364–367.
M¨uller, C. (2005). A flexible stand-off data model with
query language for multi-level annotation. In Pro-
ceedings of the Interactive Posters/Demonstrations
session at the 43rd Annual Meeting of the Associa-
tion for Computational Linguistics, Ann Arbor, Mi.,
25-30 June 2005, pp. pp. 109–112.
</reference>
<page confidence="0.99181">
76
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.305894">
<title confidence="0.981745">Representing and Accessing Multi-Level Annotations in MMAX2</title>
<author confidence="0.966569">Christoph</author>
<affiliation confidence="0.704986">EML Research Villa Schloß-Wolfsbrunnenweg</affiliation>
<address confidence="0.999541">69118 Heidelberg, Germany</address>
<email confidence="0.956348">christoph.mueller@eml-research.de</email>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>A Janin</author>
<author>D Baron</author>
<author>J Edwards</author>
<author>D Ellis</author>
<author>D Gelbart</author>
<author>N Morgan</author>
<author>B Peskin</author>
<author>T Pfau</author>
<author>E Shriberg</author>
<author>A Stolcke</author>
<author>C Wooters</author>
</authors>
<title>The ICSI Meeting Corpus.</title>
<date>2003</date>
<booktitle>In Proceedings of the IEEE International Conference on Acoustics, Speech and Signal Processing, Hong Kong,</booktitle>
<pages>364--367</pages>
<marker>Janin, Baron, Edwards, Ellis, Gelbart, Morgan, Peskin, Pfau, Shriberg, Stolcke, Wooters, 2003</marker>
<rawString>Janin, A., D. Baron, J. Edwards, D. Ellis, D. Gelbart, N. Morgan, B. Peskin, T. Pfau, E. Shriberg, A. Stolcke &amp; C. Wooters (2003). The ICSI Meeting Corpus. In Proceedings of the IEEE International Conference on Acoustics, Speech and Signal Processing, Hong Kong, pp. 364–367.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C M¨uller</author>
</authors>
<title>A flexible stand-off data model with query language for multi-level annotation.</title>
<date>2005</date>
<booktitle>In Proceedings of the Interactive Posters/Demonstrations session at the 43rd Annual Meeting of the Association for Computational Linguistics,</booktitle>
<pages>109--112</pages>
<location>Ann Arbor, Mi.,</location>
<marker>M¨uller, 2005</marker>
<rawString>M¨uller, C. (2005). A flexible stand-off data model with query language for multi-level annotation. In Proceedings of the Interactive Posters/Demonstrations session at the 43rd Annual Meeting of the Association for Computational Linguistics, Ann Arbor, Mi., 25-30 June 2005, pp. pp. 109–112.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>