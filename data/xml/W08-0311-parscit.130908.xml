<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.018368">
<title confidence="0.980751">
The MetaMorpho translation system
</title>
<author confidence="0.84919">
Attila Novák, László Tihanyi and Gábor Prószéky
</author>
<affiliation confidence="0.596121">
MorphoLogic
</affiliation>
<address confidence="0.63935">
Orbánhegyi fit 5, Budapest 1126, Hungary
</address>
<email confidence="0.913123">
{novak,tihanyi,proszeky}@morphologic.hu
</email>
<sectionHeader confidence="0.992581" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.964775545454546">
In this article, we present MetaMorpho, a rule
based machine translation system that was
used to create MorphoLogic’s submission to
the WMT08 shared Hungarian to English
translation task. The architecture of Meta-
Morpho does not fit easily into traditional
categories of rule based systems: the building
blocks of its grammar are pairs of rules that
describe source and target language structures
in a parallel fashion and translated structures
are created while parsing the input.
</bodyText>
<sectionHeader confidence="0.998944" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999905">
Three rule-based approaches to MT are tradition-
ally distinguished: direct, interlingua and transfer.
The direct method uses a primitive one-stage proc-
ess in which words in the source language are re-
placed with words in the target language and then
some rearrangement is done. The main idea behind
the interlingua method is that the analysis of any
source language should result in a language-
independent representation. The target language is
then generated from that language-neutral repre-
sentation. The transfer method first parses the sen-
tence of the source language. It then applies rules
that map the lexical and grammatical segments of
the source sentence to a representation in the target
language.
The MetaMorpho machine translation system de-
veloped at MorphoLogic (Prószéky and Tihanyi,
2002), cannot be directly classified in either of the
above categories, although it has the most in com-
mon with the transfer type architecture.
</bodyText>
<sectionHeader confidence="0.744116" genericHeader="method">
2 Translation via immediate transfer
</sectionHeader>
<bodyText confidence="0.999967485714286">
In the MetaMorpho system, both productive
rules of grammar and lexical entries are stored in
the form of patterns, which are like context-free
rules enriched with features. Patterns may contain
more-or-less underspecified slots, ranging from
general productive rules of grammar through more-
or-less idiomatic phrases to fully lexicalized items.
The majority of the patterns (a couple of hundreds
of thousands in the case of our English grammar)
represent partially lexicalized items.
The grammar operates with pairs of patterns
that consist of one source pattern used during bot-
tom-up parsing and one or more target patterns that
are applied during top-down generation of the
translation. While traditional transfer and interlin-
gua based systems consist of separate parsing and
generating rules, in a MetaMorpho grammar, each
parsing rule has its associated generating counter-
part. The translation of the parsed structures is al-
ready determined during parsing the source
language input. The actual generation of the target
language representations does not involve any ad-
ditional transfer operations: target language struc-
tures corresponding to substructures of the source
language parse tree are combined and the leaves of
the resulting tree are interpreted by a morphologi-
cal generator. We call this solution “immediate
transfer” as it uses no separate transfer steps or
target transformations.
The idea behind this architecture has much in
common with the way semantic compositionality
was formalized by Bach (1976) in the from of his
rule-to-rule hypothesis, stating that to every rule of
syntax that combines constituents into a phrase
pertains a corresponding rule of semantics that
</bodyText>
<page confidence="0.982356">
111
</page>
<note confidence="0.400872">
Proceedings of the Third Workshop on Statistical Machine Translation, pages 111–114,
</note>
<page confidence="0.479162">
Columbus, Ohio, USA, June 2008. c�2008 Association for Computational Linguistics
</page>
<bodyText confidence="0.999785090909091">
combines the meanings of the constituents. In the
case of phrases with compositional meaning, the
pair of rules of syntax and semantics are of a gen-
eral nature, while in the case of idioms, the pair of
rules is specific and arbitrary. The architecture im-
plemented in the MetaMorpho system is based on
essentially the same idea, except that the represen-
tation built during analysis of the input sentence is
not expressed in a formal language of some seman-
tic representation but directly in the human target
language of the translation system.
</bodyText>
<sectionHeader confidence="0.939562" genericHeader="method">
3 System architecture
</sectionHeader>
<bodyText confidence="0.999978576470589">
The analysis of the input is performed in three
stages. First the text to be translated is segmented
into sentences, and each sentence is broken up into
a sequence of tokens. This token sequence is the
actual input of the parser. Morphosyntactic annota-
tion of the input word forms is performed by a
morphological analyzer: it assigns morphosyntactic
attribute vectors to word forms. We use the Humor
morphological system (Prószéky and Kis, 1999;
Prószéky and Novák, 2005) that performs an item-
and-arrangement style morphological analysis.
Morphological synthesis of the target language
word forms is performed by the same morphologi-
cal engine.
The system also accepts unknown elements:
they are treated as strings to be inflected at the tar-
get side. The (potentially ambiguous) output of the
morphological analyzer is fed into the syntactic
parser called Moose (Prószéky, Tihanyi and Ugray,
2004), which analyzes this input sequence using
the source language patterns and if it is recognized
as a correct sentence, comes up with one or more
root symbols on the source side.
Every terminal and non-terminal symbol in the
syntactic tree under construction has a set of fea-
tures. The number of features is normally up to a
few dozen, depending on the category. These fea-
tures can either take their values from a finite set of
symbolic items (e.g., values of case can be INS,
ACC, DAT, etc.), or represent a string (e.g.,
lex=&amp;quot;approach&amp;quot;, the lexical form of a token).
The formalism does not contain embedded feature
structures. It is important to note that no structural
or semantic information is amassed in the features
of symbols: the interpretation of the input is con-
tained in the syntactic tree itself, and not in the fea-
tures of the node on the topmost level. Features are
used to express constraints on the applicability of
patterns and to store morphosyntactic valence and
lexical information concerning the parsed input.
More specific patterns (e.g. approach to) can
override more general ones (e.g. approach), in that
case subtrees containing symbols that were created
by the general pattern are deleted. Every symbol
that is created and is not eliminated by an overrid-
ing pattern is retained even if it does not form part
of a correct sentence&apos;s syntactic tree. Each pattern
can explicitly override other rules: if the overriding
rule covers a specific range of the input, it blocks
the overridden ones over the same range. This
method can be used to eliminate spurious ambigui-
ties early during analysis.
When the whole input is processed and no ap-
plicable patterns remain, translation is generated in
a top-down fashion by combining the target struc-
tures corresponding to the source patterns consti-
tuting the source language parse tree.
A source language pattern may have more than
one associated target pattern. The selection of the
target structure to apply relies on constraints on the
actual values of features in the source pattern: the
first target pattern whose conditions are satisfied is
used for target structure generation. To handle
complicated word-order changes, the target struc-
ture may need rearrangement of its elements within
the scope of a single node and its children. There is
another technique that can be used to handle word
order differences between the source and the target
language. A pointer to a subtree can be stored in a
feature when applying a rule at parse time, and
because this feature’s value can percolate up the
parse-tree and down the target tree, just like any
other feature, a phrase swallowed somewhere in
the source side can be expanded at a different loca-
tion in the target tree. This technique can be used
to handle both systematic word order differences
(such as the different but fixed order of constitu-
ents in possessive constructions: possession of pos-
sessor in English versus possessor possession +
possessive suffix in Hungarian) and accidental ones
(such as the fixed order of subject verb and object
in English, versus the “free” order of these con-
stituents in Hungarian1).
Unlike in classical transfer-based systems,
however, these rearrangement operations are al-
</bodyText>
<footnote confidence="0.9708745">
1 In fact the order is determined by various factors other than
grammatical function.
</footnote>
<page confidence="0.994833">
112
</page>
<bodyText confidence="0.999985083333333">
ready determined during parsing the source lan-
guage input. During generation, the already deter-
mined rearranged structures are simply spelled out.
The morphosyntactic feature vectors on the termi-
nal level of the generated tree are interpreted by
the morphological generator that synthesizes the
corresponding target language word forms.
The morphological generator is not a simple in-
verse of the corresponding analyzer. It accepts
many alternative equivalent morphological de-
scriptions of each word form it can generate beside
the one that the corresponding analyzer outputs.
</bodyText>
<sectionHeader confidence="0.978524" genericHeader="method">
4 The rule database
</sectionHeader>
<bodyText confidence="0.999991081632653">
The rules used by the parser explicitly contain
all the features of the daughter nodes to check, all
the features to percolate to the mother node, all the
features to set in the corresponding target struc-
tures and those to be checked on the source lan-
guage structure to decide on the applicability of a
target structure. The fact that all this redundant
information is present in the run-time rule database
makes the operation of the parser efficient in terms
of speed. However, it would be very difficult for
humans to create and maintain the rule database in
this redundant format.
There is a high level version of the language:
although it is not really different in terms of its
syntax from the low-level one, it does not require
default values and default correspondences to be
explicitly listed. The rule database is maintained
using this high level formalism. There is a rule
converter for each language pair that extends the
high-level rules with default information and may
also create transformed rules (such as the passive
version of verbal subcategorization frames) creat-
ing the rule database used by the parser.
Rule conversion is also necessary because in
order to be able to parse a free word order lan-
guage like Hungarian with a parser that uses con-
text free rules, you need to use run time rules that
essentially differ in the way they operate from
what would be suggested by the rules they are de-
rived from in the high level database. In Hungar-
ian, arguments of a predicate may appear in many
different orders in actual sentences and they also
freely mix with sentence level adjuncts. This
means that a verbal argument structure of the high
level rule database with its normal context free rule
interpretation would only cover a fraction of its
real world realizations. Rule conversion effectively
handles this problem by converting rules describ-
ing lexical items with argument structures ex-
pressed using a context free rule formalism into
run time rules that do not actually combine con-
stituents, but only check the saturation of valency
frames. Constituents are combined by other more
generic rules that take care of saturating the argu-
ment slots. This means that while the high level
and the run time rules have a similar syntax, the
semantics of some high level rules may be very
different from similar rules in the low level rule
database.
</bodyText>
<sectionHeader confidence="0.515618" genericHeader="method">
5 Handling sentences with no full parse
</sectionHeader>
<bodyText confidence="0.999961055555556">
The system must not break down if the input
sentence happens not to have a full parse (this in-
evitably happens in the case of real life texts). In
that case, it reverts to using a heuristic process that
constructs an output by combining the output of a
selected set of partial structures covering the whole
sentence stored during parsing the input. In the
MetaMorpho terminology, this is called a “mosaic
translation”. Mosaic translations are usually subop-
timal, because in the absence of a full parse some
structural information such as agreement is usually
lost. There is much to improve on the current algo-
rithm used to create mosaic translations: e.g. it
does not currently utilize a statistical model of the
target language, which has a negative effect on the
fluency of the output. Augmenting the system with
such a component would probably improve its per-
formance considerably.
</bodyText>
<sectionHeader confidence="0.626795" genericHeader="method">
6 Motivation for the MetaMorpho archi-
tecture
</sectionHeader>
<bodyText confidence="0.999990153846154">
An obvious drawback of the architecture de-
scribed above compared to the interlingua and
transfer based systems is that the grammar compo-
nents of the system cannot be simply reused to
build translation systems to new target languages
without a major revision of the grammar. While in
a classical transfer based system, the source lan-
guage grammar may cover phenomena that the
transfer component does not cover, in the Meta-
Morpho architecture, this is not possible. In a
transfer based system, there is a relatively cheaper
way to handle coverage issues partially by aug-
menting only the source grammar (and postponing
</bodyText>
<page confidence="0.998229">
113
</page>
<bodyText confidence="0.999969111111111">
creation of the corresponding transfer rules). This
is not an option in the MetaMorpho architecture.
The main motivation for this system architec-
ture was that it makes it possible to integrate ma-
chine translation and translation memories in a
natural way and to make the system easily extensi-
ble by the user. There is a grammar writer’s work-
bench component of MetaMorpho called Rule
Builder. This makes it possible for users to add
new, lexical or even syntactic patterns to the
grammar in a controlled manner without the need
to recompile the rest, using an SQL database for
user added entries. The technology used in Rule-
Builder can also be applied to create a special
combination of the MetaMorpho machine transla-
tion tool and translation memories (Hodász,
Gr6bler and Kis 2004).
Moreover, existing bilingual lexical databases
(dictionaries of idioms and collocations) are rela-
tively easy to convert to the high level rule format
of the system. The bulk of the grammar of the sys-
tem was created based on such resources. Another
rationale for developing language pair specific
grammars directly is that this way distinctions in
the grammar of the source language not relevant
for the translation to the target language at hand
need not be addressed.
</bodyText>
<sectionHeader confidence="0.82871" genericHeader="conclusions">
7 Performance in the translation task
</sectionHeader>
<bodyText confidence="0.999993548387097">
During development of the system and its grammar
components, regression testing has been performed
using a test set unknown to the developers measur-
ing case insensitive BLEU with three human refer-
ence translations. Our usual test set for the system
translating from Hungarian to English contains 274
sentences of newswire text. We had never used
single reference BLEU before, because, although
creating multiple translations is expensive, single
reference BLEU is quite unreliable usually produc-
ing very low scores especially if the target lan-
guage is morphologically rich, like Hungarian.
The current version of the MetaMorpho system
translating from Hungarian to English has a BLEU
score of 22.14 on our usual newswire test set with
three references. Obtaining a BLEU score of 7.8 on
the WMT08 shared Hungarian to English transla-
tion task test set was rather surprising, so we
checked single reference BLEU on our usual test
set: the scores are 13.02, 14.15 and 16.83 with the
three reference translations respectively.
In the end, we decided to submit our results to the
WMT08 shared translation task in spite of the low
score. But we think, that these figures cast doubts
on the quality of the texts and reference transla-
tions in the test set, especially in cases where both
the English and the Hungarian text were translated
from a third language, so we think that the scores
on the WMT08 test set should be evaluated only
relative to other systems’ performance on the same
data and the same language pair.
</bodyText>
<sectionHeader confidence="0.999192" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999942470588235">
Emmon Bach. 1976. An extension of classical transfor-
mational grammar. In Saenz (ed.) Problems of Lin-
guistic Metatheory: Proceedings of the 1976
Conference, 183–224. East Lansing, MI: Michigan
State University.
Gábor Hodász, Tamás Gr6bler and Balázs Kis. 2004.
Translation memory as a robust example-based trans-
lation system. In Hutchins (ed.), 82–89.
John Hutchins (ed.) Broadening horizons of machine
translation and its applications. Proceedings of the
9th EAMT Workshop, 26–27 April 2004. La Val-
letta: Foundation for International Studies.
Gábor Prószéky and Balázs Kis. 1999. Agglutinative
and other (highly) inflectional languages. In Robert
Dale &amp; Kenneth W. Church (eds.) Proceedings of the
37th Annual Meeting of the Association for Computa-
tional Linguistics, 261–268. Morristown, NJ: Asso-
ciation for Computational Linguistics.
Gábor Prószéky and Attila Novák. 2005. Computational
Morphologies for Small Uralic Languages. In: A.
Arppe, L. Carlson, K. Lindén, J. Piitulainen, M.
Suominen, M. Vainio, H. Westerlund, A. Yli-Jyrä
(eds.): Inquiries into Words, Constraints and Con-
texts Festschrift in the Honour of Kimmo Kosken-
niemi on his 60th Birthday, 116–125. Gummerus
Printing, Saarijärvi/CSLI Publications, Stanford.
Gábor Prószéky and László Tihanyi. 2002 MetaMor-
pho: A Pattern-Based Machine Translation System.
In: Proceedings of the 24th &apos;Translating and the
Computer&apos; Conference, 19–24. ASLIB, London,
United Kingdom.
Gábor Prószéky, László Tihanyi and Gábor Ugray.
2004. Moose: A robust high-performance parser and
generator. In Hutchins (ed.), 138–142.
</reference>
<page confidence="0.998655">
114
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.192059">
<title confidence="0.985328">The MetaMorpho translation system</title>
<author confidence="0.404182">Attila Novák</author>
<author confidence="0.404182">László Tihanyi</author>
<author confidence="0.404182">Gábor</author>
<note confidence="0.481539">Orbánhegyi fit 5, Budapest 1126,</note>
<abstract confidence="0.99889975">In this article, we present MetaMorpho, a rule based machine translation system that was used to create MorphoLogic’s submission to the WMT08 shared Hungarian to English translation task. The architecture of Meta- Morpho does not fit easily into traditional categories of rule based systems: the building blocks of its grammar are pairs of rules that describe source and target language structures in a parallel fashion and translated structures are created while parsing the input.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Emmon Bach</author>
</authors>
<title>An extension of classical transformational grammar.</title>
<date>1976</date>
<booktitle>Problems of Linguistic Metatheory: Proceedings of the 1976 Conference, 183–224. East</booktitle>
<editor>In Saenz (ed.)</editor>
<institution>Michigan State University.</institution>
<location>Lansing, MI:</location>
<contexts>
<context position="3173" citStr="Bach (1976)" startWordPosition="474" endWordPosition="475">rsed structures is already determined during parsing the source language input. The actual generation of the target language representations does not involve any additional transfer operations: target language structures corresponding to substructures of the source language parse tree are combined and the leaves of the resulting tree are interpreted by a morphological generator. We call this solution “immediate transfer” as it uses no separate transfer steps or target transformations. The idea behind this architecture has much in common with the way semantic compositionality was formalized by Bach (1976) in the from of his rule-to-rule hypothesis, stating that to every rule of syntax that combines constituents into a phrase pertains a corresponding rule of semantics that 111 Proceedings of the Third Workshop on Statistical Machine Translation, pages 111–114, Columbus, Ohio, USA, June 2008. c�2008 Association for Computational Linguistics combines the meanings of the constituents. In the case of phrases with compositional meaning, the pair of rules of syntax and semantics are of a general nature, while in the case of idioms, the pair of rules is specific and arbitrary. The architecture impleme</context>
</contexts>
<marker>Bach, 1976</marker>
<rawString>Emmon Bach. 1976. An extension of classical transformational grammar. In Saenz (ed.) Problems of Linguistic Metatheory: Proceedings of the 1976 Conference, 183–224. East Lansing, MI: Michigan State University.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Gábor Hodász</author>
</authors>
<title>Tamás Gr6bler and Balázs Kis.</title>
<date>2004</date>
<pages>82--89</pages>
<editor>In Hutchins (ed.),</editor>
<marker>Hodász, 2004</marker>
<rawString>Gábor Hodász, Tamás Gr6bler and Balázs Kis. 2004. Translation memory as a robust example-based translation system. In Hutchins (ed.), 82–89.</rawString>
</citation>
<citation valid="true">
<title>Broadening horizons of machine translation and its applications.</title>
<date>2004</date>
<booktitle>Proceedings of the 9th EAMT Workshop,</booktitle>
<pages>26--27</pages>
<editor>John Hutchins (ed.)</editor>
<marker>2004</marker>
<rawString>John Hutchins (ed.) Broadening horizons of machine translation and its applications. Proceedings of the 9th EAMT Workshop, 26–27 April 2004. La Valletta: Foundation for International Studies.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Gábor Prószéky</author>
<author>Balázs Kis</author>
</authors>
<title>Agglutinative and other (highly) inflectional languages.</title>
<date>1999</date>
<booktitle>Proceedings of the 37th Annual Meeting of the Association for Computational Linguistics,</booktitle>
<pages>261--268</pages>
<editor>In Robert Dale &amp; Kenneth W. Church (eds.)</editor>
<publisher>Association for Computational Linguistics.</publisher>
<location>Morristown, NJ:</location>
<contexts>
<context position="4522" citStr="Prószéky and Kis, 1999" startWordPosition="689" endWordPosition="692">e input sentence is not expressed in a formal language of some semantic representation but directly in the human target language of the translation system. 3 System architecture The analysis of the input is performed in three stages. First the text to be translated is segmented into sentences, and each sentence is broken up into a sequence of tokens. This token sequence is the actual input of the parser. Morphosyntactic annotation of the input word forms is performed by a morphological analyzer: it assigns morphosyntactic attribute vectors to word forms. We use the Humor morphological system (Prószéky and Kis, 1999; Prószéky and Novák, 2005) that performs an itemand-arrangement style morphological analysis. Morphological synthesis of the target language word forms is performed by the same morphological engine. The system also accepts unknown elements: they are treated as strings to be inflected at the target side. The (potentially ambiguous) output of the morphological analyzer is fed into the syntactic parser called Moose (Prószéky, Tihanyi and Ugray, 2004), which analyzes this input sequence using the source language patterns and if it is recognized as a correct sentence, comes up with one or more roo</context>
</contexts>
<marker>Prószéky, Kis, 1999</marker>
<rawString>Gábor Prószéky and Balázs Kis. 1999. Agglutinative and other (highly) inflectional languages. In Robert Dale &amp; Kenneth W. Church (eds.) Proceedings of the 37th Annual Meeting of the Association for Computational Linguistics, 261–268. Morristown, NJ: Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Gábor Prószéky</author>
<author>Attila Novák</author>
</authors>
<title>Computational Morphologies for Small Uralic Languages. In:</title>
<date>2005</date>
<booktitle>Inquiries into Words, Constraints and Contexts Festschrift in the Honour of Kimmo Koskenniemi on his 60th Birthday, 116–125. Gummerus Printing,</booktitle>
<editor>A. Arppe, L. Carlson, K. Lindén, J. Piitulainen, M. Suominen, M. Vainio, H. Westerlund, A. Yli-Jyrä (eds.):</editor>
<publisher>Saarijärvi/CSLI Publications, Stanford.</publisher>
<contexts>
<context position="4549" citStr="Prószéky and Novák, 2005" startWordPosition="693" endWordPosition="696">expressed in a formal language of some semantic representation but directly in the human target language of the translation system. 3 System architecture The analysis of the input is performed in three stages. First the text to be translated is segmented into sentences, and each sentence is broken up into a sequence of tokens. This token sequence is the actual input of the parser. Morphosyntactic annotation of the input word forms is performed by a morphological analyzer: it assigns morphosyntactic attribute vectors to word forms. We use the Humor morphological system (Prószéky and Kis, 1999; Prószéky and Novák, 2005) that performs an itemand-arrangement style morphological analysis. Morphological synthesis of the target language word forms is performed by the same morphological engine. The system also accepts unknown elements: they are treated as strings to be inflected at the target side. The (potentially ambiguous) output of the morphological analyzer is fed into the syntactic parser called Moose (Prószéky, Tihanyi and Ugray, 2004), which analyzes this input sequence using the source language patterns and if it is recognized as a correct sentence, comes up with one or more root symbols on the source sid</context>
</contexts>
<marker>Prószéky, Novák, 2005</marker>
<rawString>Gábor Prószéky and Attila Novák. 2005. Computational Morphologies for Small Uralic Languages. In: A. Arppe, L. Carlson, K. Lindén, J. Piitulainen, M. Suominen, M. Vainio, H. Westerlund, A. Yli-Jyrä (eds.): Inquiries into Words, Constraints and Contexts Festschrift in the Honour of Kimmo Koskenniemi on his 60th Birthday, 116–125. Gummerus Printing, Saarijärvi/CSLI Publications, Stanford.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Gábor Prószéky</author>
<author>László Tihanyi</author>
</authors>
<title>MetaMorpho: A Pattern-Based Machine Translation System. In:</title>
<date>2002</date>
<booktitle>Proceedings of the 24th &apos;Translating and the Computer&apos; Conference,</booktitle>
<publisher>ASLIB,</publisher>
<location>London, United Kingdom.</location>
<contexts>
<context position="1480" citStr="Prószéky and Tihanyi, 2002" startWordPosition="216" endWordPosition="219">he source language are replaced with words in the target language and then some rearrangement is done. The main idea behind the interlingua method is that the analysis of any source language should result in a languageindependent representation. The target language is then generated from that language-neutral representation. The transfer method first parses the sentence of the source language. It then applies rules that map the lexical and grammatical segments of the source sentence to a representation in the target language. The MetaMorpho machine translation system developed at MorphoLogic (Prószéky and Tihanyi, 2002), cannot be directly classified in either of the above categories, although it has the most in common with the transfer type architecture. 2 Translation via immediate transfer In the MetaMorpho system, both productive rules of grammar and lexical entries are stored in the form of patterns, which are like context-free rules enriched with features. Patterns may contain more-or-less underspecified slots, ranging from general productive rules of grammar through moreor-less idiomatic phrases to fully lexicalized items. The majority of the patterns (a couple of hundreds of thousands in the case of o</context>
</contexts>
<marker>Prószéky, Tihanyi, 2002</marker>
<rawString>Gábor Prószéky and László Tihanyi. 2002 MetaMorpho: A Pattern-Based Machine Translation System. In: Proceedings of the 24th &apos;Translating and the Computer&apos; Conference, 19–24. ASLIB, London, United Kingdom.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Gábor Prószéky</author>
</authors>
<title>László Tihanyi and Gábor Ugray.</title>
<date>2004</date>
<pages>138--142</pages>
<editor>In Hutchins (ed.),</editor>
<marker>Prószéky, 2004</marker>
<rawString>Gábor Prószéky, László Tihanyi and Gábor Ugray. 2004. Moose: A robust high-performance parser and generator. In Hutchins (ed.), 138–142.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>