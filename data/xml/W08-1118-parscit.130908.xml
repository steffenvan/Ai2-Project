<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.327984">
<title confidence="0.992093">
Evaluating an Ontology-Driven WYSIWYM Interface
</title>
<author confidence="0.980263">
Feikje Hielkema Chris Mellish Peter Edwards
</author>
<affiliation confidence="0.989158333333333">
Computing Science
School of Natural &amp; Computing Sciences
University of Aberdeen
</affiliation>
<address confidence="0.97911">
Aberdeen, AB24 3FX, UK
</address>
<email confidence="0.99833">
{f.hielkema, c.mellish, p.edwards}@abdn.ac.uk
</email>
<sectionHeader confidence="0.995637" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999734071428571">
This paper describes an evaluation study of
an ontology-driven WYSIWYM interface for
metadata creation. Although the results are
encouraging, they are not as positive as those
of a similar tool developed for the medical
domain. We believe this may be due, not to
the WYSIWYM interface, but to the complex-
ity of the underlying ontologies and the fact
that subjects were unfamiliar with them. We
discuss the ways in which ontology develop-
ment might be influenced by issues stemming
from using an NLG approach for user access
to data, and the effect these factors have on
general usability.
</bodyText>
<sectionHeader confidence="0.998993" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999953666666667">
In the PolicyGrid1 project we are investigating how
best to support social science researchers through
the use of Semantic Grid (De Roure et al., 2005)
technologies. The Semantic Grid is often described
as an ‘extension of the current Grid in which infor-
mation and services are given well-defined mean-
ing, better enabling computers and people to work
in cooperation’. Semantic Grids thus not only share
data and compute resources, but also share and pro-
cess metadata and knowledge, e.g. through the use
of RDF2 (Resource Description Framework, a meta-
data model for making statements about resources)
</bodyText>
<footnote confidence="0.99910875">
1Funded under the UK Economic and Social Research
Council e-Social Science programme; grant reference RES-
149-25-1027 (http://www.policygrid.org)
2http://www.w3.org/RDF/
</footnote>
<bodyText confidence="0.996793666666667">
or OWL3 (knowledge representation language for
authoring ontologies).
Numerous e-science applications rely on meta-
data descriptions of resources. But how does meta-
data come into existence? Ideally the user should
create it. However, metadata creation is a complex
task, and few users know how to create them in RDF.
To enable our users to describe their resources, we
need to provide a tool that facilitates creation, query-
ing and browsing of metadata by users with no prior
experience of such technologies.
Existing tools that provide access to RDF meta-
data are often graphical, e.g. (Handschuh et al.,
2001; Catarci et al., 2004). However, we believe
that, for social scientists, natural language is the
best medium to use, as the way they conduct their
research and the structure of their documents and
data indicate that they are more oriented towards text
than graphics. Natural language approaches include
GINO (Bernstein and Kaufmann, 2006), an ontol-
ogy editor with an approach reminiscent of Natu-
ral Language Menus (Tennant et al., 1983), and us-
ing Controlled languages such as PENG-D (Schwit-
ter and Tilbrook, 2004). Such natural language ap-
proaches tend to restrict expressivity to ensure that
every entry can be parsed, limiting the language and
often making it stilted, so that there is a small learn-
ing curve before the user knows which structures are
allowed. In order to maintain full expressivity and
to shorten the learning curve, we have elected to use
WYSIWYM (What You See Is What You Meant)
(Power et al., 1998). This is a natural language gen-
eration approach where the system generates a feed-
</bodyText>
<footnote confidence="0.927194">
3http://www.w3.org/TR/owl-features/
</footnote>
<page confidence="0.996442">
138
</page>
<bodyText confidence="0.999955804878049">
back text for the user that is based on a semantic rep-
resentation. This representation is edited directly by
the user by manipulating the feedback text. WYSI-
WYM has been used by a number of other projects,
such as MILE (Piwek et al., 2000) and CLEF (Hal-
lett, 2006). As evaluation results in both of these
projects were very positive (Piwek, 2002; Hallett et
al., 2007), we felt that WYSIWYM would be a suit-
able approach to use in our work.
We have developed a metadata elicitation tool that
enables users to create metadata in the shape of on-
tology instance data; the tool is driven by the on-
tologies that define those instances. We are currently
implementing a WYSIWYM tool for querying, that
uses the same interface as the metadata creation tool.
We also aim to develop a tool for presenting the
results of the query, and for browsing the descrip-
tions in the database. These three tools will be inte-
grated into one consistent interface, so that users can
switch effortlessly between querying, browsing and
editing ontology instance data. This aim is similar
to the support that the graphical tool SHAKEN pro-
vides for ontology editing and browsing (Thom´er´e
et al., 2002). We want to ensure that these tools are
generic, so that if the ontologies change over time
or are replaced, the tools will still function. That
means that all domain specific information (as much
as is possible) should be contained in the ontologies.
In this paper we explore the ways in which Natu-
ral Language Generation issues influence ontology
building and vice versa.
This paper is structured as follows: section 2 de-
scribes the tool for metadata creation that we have
implemented; section 3 discusses issues in ontol-
ogy development and Natural Language Generation;
and section 4 presents an evaluation study of the
metadata creation tool. In section 5 the results of
this study are discussed and compared to those of
the CLEF project; we argue that different domains
and ontologies affect the usability and complexity
of metadata access interfaces.
</bodyText>
<sectionHeader confidence="0.976895" genericHeader="method">
2 The Metadata Creation Tool
</sectionHeader>
<bodyText confidence="0.9847665">
We have developed a WYSIWYM tool that enables
users to upload resources (e.g. acadamic papers,
statistical datasets, interview transcripts) and create
metadata descriptions for them, even if these users
</bodyText>
<figureCaption confidence="0.999579">
Figure 1: The Metadata Creation Tool.
</figureCaption>
<bodyText confidence="0.999934903225806">
are unfamiliar with ontologies. First, the user selects
the type of resource he is depositing (e.g. a Tran-
script). The tool then generates a brief feedback text
that presents the information specified by the user.
The feedback text contains anchors, phrases in red
boldface and blue italics that signal where new in-
formation can be added. When the user clicks on an
anchor, a menu pops up listing the kinds of infor-
mation that can be added here (see Figure 1). After
selecting a menu item, the user is prompted to enter
an appropriate value; this may be a date, a free-text
string, or another object that may or may not be in
the text already. The feedback text is regenerated
whenever the user has added some information.
The tool is driven by one or more ontologies.
Their class hierarchies are presented when users are
selecting a resource type, or creating a new object
as range for a property. The anchors correspond to
individuals in the ontology; the menu items to the
properties of those individuals. The feedback text is
divided into paragraphs which correspond to the in-
dividuals; each property of an individual is realised
as (part of) a sentence in its paragraph. Each prop-
erty in the ontology is associated with a linguistic
specification, a Dependency Tree (Mel’cuk, 1988)
that corresponds to a sentence. The specification
has slots where the source and target of the prop-
erty should be inserted, and is sufficiently detailed
to support processes such as aggregation, through
which the feedback text is made more fluent. For
a more extensive description of the metadata cre-
</bodyText>
<page confidence="0.998255">
139
</page>
<bodyText confidence="0.996690148148148">
ation tool and its implementation, see Hielkema et
al. (2007b).
In August 2007 we ran a pilot evaluation study
(Hielkema et al., 2007a) on this tool. This study was
heuristic in nature, with subjects discussing the in-
terface with the experimenter while performing set
tasks. It highlighted a number of aspects which
we felt it was necessary to improve before embark-
ing on the formal evaluation. Apart from there be-
ing standard usability considerations such as a need
for better undo and help functions, it became evi-
dent that the underlying ontology was neither ex-
tensive enough nor sufficiently well-structured: sub-
jects struggled to find the options they needed, and
were often not satisfied with the options’ names or
their location in the sub-menus. We therefore de-
cided that, as well as improving the basic usability
of the interface, we needed to redevelop the ontol-
ogy that was driving the interface. Users, we felt,
would find it easier to navigate the menus when
this ontology matched their mental model of the do-
main. Throughout the development of this new on-
tology, user requirements and feedback were gath-
ered through a number of focus group sessions. The
next section describes the ways in which this ontol-
ogy development was affected by the demands of the
metadata interface.
</bodyText>
<sectionHeader confidence="0.990043" genericHeader="method">
3 Ontologies in NLG
</sectionHeader>
<bodyText confidence="0.99996526984127">
Portability has always been a major issue in NLG.
Language generation involves the use of much infor-
mation that is domain-specific, and cannot be gener-
alised without a cost in the expressivity of the result-
ing text. If we want to create an application that is
domain-independent, we have to find a way to store
all domain-specific information in a structure that is
easily extended or replaced.
We have decided to use an ontology, a com-
mon structure whose use has become widespread in
knowledge representation. Ideally, we would like to
create a generator that can be applied to any domain,
provided there is an appropriate domain-specific on-
tology. But what information should such an ontol-
ogy contain? How should it be structured? In this
section we explore issues that occur when devel-
oping or adapting ontologies for use in the WYSI-
WYM tool; we believe that this can at least in part
be generalised to NLG. The ontologies we have used
so far were developed at the same time as the WYSI-
WYM tool, so that both tool and ontology influenced
each other’s development. We are currently adapting
an ontology from another e-science project for use
in our WYSIWYM interface, to further investigate
such issues (see section 5).
There are a number of existing tools that generate
language from ontologies, using various approaches.
Wilcock (2003) describes an ontology verbaliser us-
ing XML-based generation. As Wilcock states, his
approach is domain-specific, and therefore probably
incompatible with more general ontologies (and pre-
sumably with ontologies from a different domain).
MIAKT (Bontcheva and Wills, 2004) is a sys-
tem that generates textual medical reports from an
RDF description. It uses a medical domain ontol-
ogy and an NLG lexicon that contains lexicalisa-
tions for the concepts and instances in the ontol-
ogy. In order to verbalise properties, MIAKT’s sur-
face realiser needs lexical specifications for them.
Four basic property types are distinguished whose
sub-properties can mostly be realised automatically
through the grammar rules in the realiser. This tech-
nique increases the portability of the system, but
does affect the variability and expressivity of the
generator.
We do not aim to generate from any ontology in
a domain, but to generate texts with high expressiv-
ity and clarity from ontologies that are designed in
an ‘NLG-aware’ way. We are investigating what re-
quirements an ontology has to meet in order to be
usable for our application, so that for any domain
an ontology can be built or adapted which we can
use to produce a usable NL-interface. As many on-
tology developers are not linguists, ideally we want
to support the adaptation to ‘NLG-aware’ ontologies
without requiring linguistic expertise, for instance
through a supporting software tool. Ontologies are
primarily built to model domain-specific knowledge,
making domain assumptions explicit, and to facili-
tate reasoning with this knowledge. These aims may
sometimes conflict with the requirements of NLG
applications, but they do frequently coincide (e.g.
the need for clear, unambiguous resource names.
</bodyText>
<page confidence="0.979813">
140
</page>
<subsectionHeader confidence="0.995611">
3.1 Domain Ontologies for WYSIWYM
</subsectionHeader>
<bodyText confidence="0.99992288372093">
What information does our WYSIWYM application
need its ontologies to provide? First of all, the parts
of it that will be shown to the user need to be eas-
ily mapped to natural language. The purpose of
the tool is to support creation of ontology instance
data by users unfamiliar with ontologies, so the parts
they see should be comprehensible to novices. The
names of properties are used to populate the pop-
up menus, while the class names are shown in the
class hierarchy. These names are mapped to natu-
ral language by replacing capitals and underscores
with whitespace, and if necessary adding a deter-
miner. Therefore, they need to correspond to phrases
in natural language in order to be understood by the
user, with individual words separated by capitals or
underscores. If there is no intuitive NL-phrase to
represent a class, it probably does not correspond to
a concept in the domain either and might confuse
the user, so it should be removed from the hierarchy.
Classes whose instances are best presented by some
distinctive name (e.g. Person or Paper) should have
a name or title property whose value can be used
(e.g. ‘John’). For other classes (e.g. Interview), the
class name can be used (e.g. ‘some interview’).
We need a linguistic specification for each prop-
erty, sufficiently detailed to support aggregation and
pronominalisation, but also to produce more than
one surface form: a query is presented differently
than a description, even if it contains the same infor-
mation (compare the texts in Figure 1 and 2). The
linguistic specification should be sufficiently rich
to support the generation of these different surface
forms. For this purpose we are using Dependency
Trees, whose richness in both syntactic and semantic
information provides ample support for such trans-
formations. These trees can be associated with the
domain ontology4. This specification also contains
the header of the submenu in which the property
should appear.
Some peculiarities in natural language are
domain-independent. For instance, an address is
presented in a very specific way and cannot be re-
alised in the standard manner without sacrificing
</bodyText>
<footnote confidence="0.983603666666667">
4For an example of how this is done, see
http://www.csd.abdn.ac.uk/research/policygrid/ontologies/
Lexicon/Lexicon.owl
</footnote>
<figureCaption confidence="0.999833">
Figure 2: The Query Tool.
</figureCaption>
<bodyText confidence="0.999643285714286">
clarity (e.g. ‘The address’ street is Union Street.
Its place is Aberdeen’). Such ‘utility’ classes are
used across domains. In PolicyGrid we have cre-
ated a utility ontology that contains classes such as
‘Person’, ‘Address’ and ‘Date’ 5. Instances of these
classes are generated to a special surface form. In or-
der to get the best realisation from the WYSIWYM
tool, domain ontologies should use the classes from
this utility ontology. As the properties of the utility
classes are already furnished with linguistic specifi-
cations, they are already NLG-aware. Another way
to hasten the process is to use, where possible, prop-
erties from this ontology instead of those from the
domain ontology.
</bodyText>
<subsectionHeader confidence="0.858871">
3.2 WYSIWYM for Ontologies
</subsectionHeader>
<bodyText confidence="0.9994525625">
What should the WYSIWYM application do in or-
der to provide access to ontologies? For metadata
creation it is essential that users can only produce
‘correct’ metadata, which does not violate the con-
straints in the ontology. The feedback text should
be presented coherently, while the Text Planner only
uses information that is either domain independent
or present in the ontology. Perhaps most impor-
tantly, the application should support easy creation
of the linguistic information that the ontology must
contain, as we cannot expect ontology developers to
have the linguistic expertise to create Dependency
Trees. We are devising a way for users to cre-
ate a specification by manipulating the surface form
of a ‘template’ specification. We currently have
12 templates which represent commonly used sen-
</bodyText>
<footnote confidence="0.971741">
5http://www.policygrid.org/utility.owl
</footnote>
<page confidence="0.995462">
141
</page>
<bodyText confidence="0.999958695652174">
tences to present ontology properties in text. The
user can fine-tune the surface form by adding adjec-
tives, changing morphological information and the
root of individual words; actions for which only a
basic linguistic knowledge is needed. This approach
is outlined in more detail in (Hielkema et al., 2007b).
The main challenge with this approach is that the
specification is used to generate two surface forms;
it remains to be seen whether a specification that is
fine-tuned through one surface form will accommo-
date the accurate generation of another.
The Penman Upper Model (Bateman, 1990) sup-
ports the specification of linguistic information
through a different approach. The Upper Model is a
domain-independent ontology that supports sophis-
ticated NLP. To make a domain ontology available
for NLP, its resources have to be placed in the hier-
archy of the Upper Model; their place there deter-
mines their surface realisation. This task appears to
require considerable linguistic expertise, but like the
creation of our Dependency Trees could probably be
made easier for non-linguists through some special-
purpose interface.
</bodyText>
<sectionHeader confidence="0.989312" genericHeader="method">
4 Usability Evaluation
</sectionHeader>
<bodyText confidence="0.999942238095238">
The best evaluation of our tool would be to let users
deposit their resources in real-life contexts, but our
tool is not ready for a full deployment. Another way
would be to compare its usability to another meta-
data creation tool in an experiment where users com-
pleted the same tasks with both tools. Unfortunately,
most metadata tools focus on providing support for
ontology editing (e.g. Prot´eg´e6 or GINO (Bern-
stein and Kaufmann, 2006)), or query formulation
(e.g. SEWASIE (Catarci et al., 2004)). A number
of tools for metadata creation use formal (RDF) or
controlled languages, which are difficult to use for
those wholly unfamiliar with formal logic. Other
tools were developed for one specific purpose, e.g.
CREAM (Handschuh et al., 2001) which was de-
veloped for the annotation of web pages, and could
not easily be adapted to our purposes. We were not
aware of any tool that we could adapt to the e-social
science ontologies and thus use in an experiment.
Alternatively, we could have compared our inter-
face to direct authoring of RDF; but in an environ-
</bodyText>
<footnote confidence="0.877255">
6http://protege.stanford.edu/
</footnote>
<bodyText confidence="0.998675954545455">
ment where most users have no experience of on-
tologies or metadata this seemed spurious. Instead,
we adopted an approach similar to that used in the
CLEF project (Hallett et al., 2007). They evaluated
their WYSIWYM system (which enabled users to
create SQL queries for a database in a medical do-
main) by measuring the performance of fifteen sub-
jects on four consecutive tasks, after a brief intro-
duction. These subjects were all knowledgeable in
the domain, and all but two knew the representation
language of the repository and how the data con-
tained in it was structured. These subjects achieved
perfect results from the second task onwards, and
became faster with each task, especially after the
first. We also expected users to become faster and
more accurate with each completed task, and indeed
hoped for perfect scores on their last task.
Subjects Sixteen researchers and PhD students
from various social science-related disciplines par-
ticipated in the experiment. None of them had prior
experience of the metadata elicitation interface, and
only two of the subjects had any previous experi-
ence of using ontologies. The ontology driving the
system models the description of social science re-
sources and was based on requirements gathering
sessions, in which a few subjects had participated.
None of the subjects knew its precise structure.
Methodology After providing some information
about their background, subjects viewed a video in-
troduction7 of six minutes. This video showed the
construction of a simple resource description, high-
lighting the main functionalities of the interface,
while a voice-over explained what was happening
on the screen.
Subjects were then handed four short resource de-
scriptions expressed as paragraphs of English (see
‘Materials’) and asked to reproduce these descrip-
tions as closely as possible using the tool. To avoid
making the choice of the correct options too obvi-
ous, we tried to avoid phrases that corresponded lit-
erally to those in the menus. Each subject received
the descriptions in a different order, in case there
were differences in the complexity of the tasks. Sub-
jects were allowed as much time as they needed to
</bodyText>
<footnote confidence="0.9975475">
7This video can be viewed at http://www.csd.abdn.ac.uk/ re-
search/policygrid/demos/WysiwymIntroduction1.mov
</footnote>
<page confidence="0.988873">
142
</page>
<table confidence="0.998520166666667">
Task order Completion time Operations Total errors Avoidable errors
µ Q µ Q µ Q µ Q
First 512.81 366.132 48.38 24.527 3.31 1.922 1.56 .727
Second 329.50 95.716 37.75 12.228 2.69 2.442 1.38 .957
Third 260.06 90.542 35.13 9.749 2.75 2.720 1.63 1.310
Fourth 309.81 106.049 39.38 10.844 2.00 1.966 1.44 1.504
</table>
<tableCaption confidence="0.999905">
Table 1: Mean completion times, operations and errors per completed task.
</tableCaption>
<bodyText confidence="0.997113468085106">
complete each task.
For each task, the tool recorded the completion
time, the produced description, the number of op-
erations used to produce it, and the frequency with
which various operation types were used, such as
‘undo’ or the ‘help’ functions. After the subjects
had completed all four tasks, they were asked to rate
the usability (very difficult - difficult - OK - easy -
very easy) and usefulness (useless - not much use
- adequate - useful - very useful) of the tool on a
five-point Likert scale, and to note any feedback they
might have. The entire experiment took on average
50 min. per subject.
Materials We used four resource descriptions,
one of which was:
You are depositing the transcript of an
interview that was held by Dr. Rivers
in 1907, at Eddystone. The interview
mainly discussed ‘male-female relation-
ships’, ‘burial practices’ and ‘the social
impact of the interdiction on head hunt-
ing’. Access to this transcript should re-
main private.
Figure 1 shows the corresponding description that
could be produced with the tool. The separation of
the transcript from the interview is an example of the
clear distinctions necessary for knowledge represen-
tation. In natural language, this distinction would
not necessarily be made, and indeed this step was
missed by a number of users.
To ensure that tasks did not repeat identical sub-
tasks, we tried to use different parts of the ontol-
ogy in each task. Every task described a differ-
ent resource type (conference paper, transcript, aca-
demic paper, report), which corresponded to a dif-
ferent class in the ontology. We were also careful to
choose varying menu items (corresponding to prop-
erties in the ontology), although some repetition was
unavoidable (e.g. specifying names). In fact, a real-
life use of the tool would involve rather more task
repetition (specifying titles, authors and dates would
be necessary for practically any resource) than the
artificial descriptions in this study.
Results To analyse the accuracy of the produced
descriptions, we divided each description task into 8
to 10 subtasks. For the task shown in the previous
paragraph, these subtasks were:
</bodyText>
<listItem confidence="0.9940045">
• Specify that you are depositing a ‘Transcript’
• Specify that access is private
• Specify that it is a transcript of an ‘Interview’
(creating an ‘interview’ object)
– Specify the three main topics
– Add an interviewer (creating a ‘Person’
object)
∗ Call this person ‘Dr. Rivers’
– Specify the location of the interview
– Specify the date of the interview
</listItem>
<bodyText confidence="0.997953307692308">
As some subtasks are more complicated than oth-
ers and take longer, we did not try to give each task
exactly the same number of subtasks, but instead en-
sured that all tasks needed the same number of op-
erations (e.g. menu item selections, button clicks,
etc.) in order to be completed. Each subtask that was
missing or completed differently than in the descrip-
tion shown in ‘Materials’ was counted as one er-
ror. Erroneous ways to complete subtasks included
choosing a different menu item and adding informa-
tion to the wrong object. For instance, a number of
subjects, instead of specifying an interviewer for the
interview, added a creator for the transcript; this was
</bodyText>
<page confidence="0.998013">
143
</page>
<bodyText confidence="0.999974162790698">
counted as one erroneously completed subtask, and
therefore one error.
The list of subtasks above shows that some sub-
tasks depend on the successful completion of other
tasks; for instance, you cannot add an interviewer
unless you have created an ‘interview’ object. We
therefore analysed two error counts: the total num-
ber of errors, and the ‘avoidable’ errors. The ‘avoid-
able’ errors were the total number of errors minus
those subtasks that depended on another subtask that
was missing or had been completed incorrectly.
We analysed the mean completion times, number
of operations used and the two error counts of the
tasks that were completed first, second, third and
last, using a repeated measures ANOVA (see Table 1
for the means and standard deviations). Mean com-
pletion times went down significantly (Huynh-Feldt
p-value &lt; 0.01). Tukey’s HSD post-hoc (applied to
a univariate ANOVA, with task order as the indepen-
dent variable) test shows that both the third (p-value
&lt; 0.01) and the fourth (p-value 0.030) were com-
pleted significantly faster than the first task. How-
ever, no significant differences were found for the
number of operations (Huynh-Feldt p-value 0.062),
the total number of errors (Huynh-Feldt p-value
.322) or the number of avoidable errors (Huynh-
Feldt p-value .931).
Subject feedback on the tool was positive: it was
perceived as useful (µ 3.94; 1=‘useless’, 5=‘very
useful’), and OK or easy to use (µ 2.69; 1=‘very
easy’, 5=‘very difficult’). Five subjects expressed a
preference for a form-based interface, and five oth-
ers for a NL-interface such as the one tested. In
feedback, subjects indicated a desire for more form-
based elements in the interface, to speed up the
creation of the standard description elements (e.g.
name/title, author), and complained that the envi-
ronment was initially unfamiliar, with some menu
items overlapping. This unfamiliarity meant that
items that were necessary to complete the descrip-
tion were often overlooked; subjects often solved
this by choosing the closest approximation they
could find, e.g. ‘creator’ instead of ‘interviewer’.
</bodyText>
<sectionHeader confidence="0.988805" genericHeader="evaluation">
5 Discussion and Future Work
</sectionHeader>
<bodyText confidence="0.99998276">
Although users quickly gained speed using the tool,
and were positive in their feedback, the evaluation
results are not nearly as positive as those found for
CLEF (see section 4). The mean number of errors
decreased, but this effect was not significant and
only five out of sixteen subjects received a perfect
score on the last task (four other subjects performed
some earlier task(s) perfectly). Evidently there is
a difference in usability of both tools - but what
causes it? No doubt the difference can partly be as-
cribed to differences in the implementation of the
interface. However, the most common feedback we
received from the subjects was that they were over-
whelmed by the large number of options available to
them. Each class in the social science ontology has
on average 30 properties, which means a descrip-
tion with three objects provides 90 options. In con-
trast, the number of available options in the CLEF
system was deliberately kept small (max. three) for
‘non-terminal anchors’. Especially in the first task,
users had trouble finding the option they wanted,
and although it became easier in the later tasks as
they familiarised themselves with the system, the
results indicate that it remained a problem. This
was likely aggravated by our deliberate avoidance
of subtask-repetition; more standard descriptions,
which always involve titles and authors, might have
produced a greater learning effect. CLEF was de-
veloped for a medical domain, which is well defined
and understood by the experimental subjects. The
social science domain encompasses many different
theories and concepts, not just about what subjects
are investigated, but also about how the research
should be conducted. PolicyGrid has tried to de-
velop an ontology that the different disciplines in
social science could be satisfied with. As a result,
it is quite large and complex, and most users will
only recognise parts of it. Thus the number of avail-
able options in the tool driven by this ontology is
large, and users have to explore the ontology and
learn to navigate it where their domain knowledge
does not suffice. This flattens the learning curve and
decreases the usability of the tool.
Half the users preferred a form-based interface
over an NLG interface. Although forms are an eas-
ily understood mechanism which are just as familiar
to users as natural language, we have three reasons
for preferring the WYSIWYM approach. First, the
large number of options in the ontology means that
a form would reach truly daunting proportions. Sec-
</bodyText>
<page confidence="0.99589">
144
</page>
<bodyText confidence="0.999940086956522">
ond, we want our resource descriptions to be con-
nected through shared people, projects, institutions,
etc; using the expressivity that RDF offers us. This
would be more difficult to achieve in an interface
where the user completes a form by providing each
property with a free-text description. Thirdly, forms
can be confusing for the user as well; the brief de-
scriptions provided for each element are frequently
ambiguous and therefore misunderstood. An NLG-
interface, which provides feedback by presenting the
property in a complete sentence, should help to clar-
ify the meaning of the property name for the user.
As we discussed earlier, there are many con-
straints on the development of domain ontologies
that can be accessed through NLG, and the evalua-
tion indicates that the structure of the ontology is es-
sential for the tool’s usability. Still, the evaluation is
sufficiently positive that we believe the WYSIWYM
approach suitable for providing access to ontologies,
especially for users who are unfamiliar with ontolo-
gies or their graphical representations. Navigation
could be made easier by providing users with an
overview of the underlying ontology, possibly pre-
sented as an index of objects, and the information
that can be specified about each object. An online
manual with some worked examples and screenshots
might also help users get started on the more obvi-
ous parts of a description. We are currently attempt-
ing to adapt an ontology developed in another UK e-
science project8 for use in the WYSIWYM metadata
elication tool. Instead of assuming the depositing of
a resource, this ontology was developed to capture
user-elicited metadata for video annotation. Part of
this metadata is captured automatically, part of it is
elicited from the user. We hope that the adaptation
of an ontology that was originally developed for a
different purpose for use in an NLG application will
highlight other issues involved in the use of ontolo-
gies in NLG.
One way in which subjects did tasks erroneously
was by using the ‘hasComment’ property when they
could not find the option they wanted. This is not
precisely wrong: the metadata it produces is correct
and any human readers will understand the descrip-
tion. But it is not the best description for query-
ing purposes. We think some subjects may have
</bodyText>
<footnote confidence="0.922724">
8http://www.ncess.ac.uk/research/digital records/
</footnote>
<bodyText confidence="0.999693466666667">
had trouble grasping the exact purpose of the pro-
duced descriptions. We hope that users who have
used the query tool to find (the descriptions of) re-
sources, will have a better understanding of what an
effective metadata description is.
We intend to run more evaluation experiments, to
assess the usability but also the usefulness of the
combined toolset. Rather than asking subjects to
copy descriptions or queries, we may ask them to
find a particular resource, or to try to deposit and de-
scribe one of their own papers. If possible, it would
also be interesting to see how they perform the same
tasks using a different interface for metadata ac-
cess, e.g. a graphical interface such as SHAKEN
(Thom´er´e et al., 2002).
</bodyText>
<sectionHeader confidence="0.999559" genericHeader="conclusions">
6 Conclusion
</sectionHeader>
<bodyText confidence="0.999992333333333">
We have presented a WYSIWYM interface for the
creation of RDF metadata, which will be extended
by the addition of querying and browsing tools.
This tool is driven by an ontology that contains all
domain-specific information needed to present it in
natural language. We have highlighted a number of
issues in ontology development for access through
NLG. We have evaluated the tool’s usability through
an experiment with potential users. The results were
encouraging, but indicate that the structure and fa-
miliarity of the underlying ontology strongly influ-
ence the usability of the interface.
</bodyText>
<sectionHeader confidence="0.998226" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.999895333333333">
Many thanks to Catalina Hallett and Richard Power
from the CLEF project, for their help in comparing
the two tools and their different evaluation results.
</bodyText>
<sectionHeader confidence="0.999272" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999418818181818">
J.A. Bateman. 1990. Upper Modelling: A General Or-
ganisation of Knowledge for Natural Language Pro-
cessing. In Proceedings of the International Language
Generation Workshop, Pittsburgh, USA.
A. Bernstein and E. Kaufmann. 2006. GINO - A Guided
Input Natural Language Ontology Editor. In Inter-
national Semantic Web Conference 2006, pages 144–
157.
K. Bontcheva and Y. Wills. 2004. Automatic Re-
port Generation from Ontologies: the MIAKT ap-
proach. In Nineth International Conference on Appli-
</reference>
<page confidence="0.98655">
145
</page>
<reference confidence="0.999706582089552">
cations of Natural Language to Information Systems
(NLDB’2004), Manchester, UK.
T. Catarci, P. Dongilli, T. Di Mascio, E. Franconi, G. San-
tucci, and S. Tessaris. 2004. An Ontology-based Vi-
sual Tool for Query Formulation Support. In Proceed-
ings of the Sixteenth European Conference on Artifi-
cial Intelligence (ECAI2004).
D. De Roure, N.R. Jennings, and N.R. Shadbolt. 2005.
The Semantic Grid: Past, Present and Future. In Pro-
ceedings of the IEEE 93(3), pages 669–681.
C. Hallett, D. Scott, and R. Power. 2007. Composing
Questions through Conceptual Authoring. Computa-
tional Linguistics, 33(1):105–133.
C. Hallett. 2006. Generic Querying of Relational
Databases using Natural Language Generation Tech-
niques. In Proceedings of the Fourth International
Natural Language Generation Conference, pages 88–
95, Nottingham, UK.
S. Handschuh, S. Staab, and A. Maedche. 2001.
CREAM: creating relational metadata with a
component-based, ontology-driven annotation
framework. In K-CAP ’01: Proceedings of the 1st
international conference on Knowledge capture, pages
76–83, New York, NY, USA. ACM Press.
F. Hielkema, P. Edwards, C. Mellish, and J. Farrington.
2007a. A Flexible Interface to Community-Driven
Metadata. In Proceedings of the Third International
Conference on eSocial Science.
F. Hielkema, C. Mellish, and P. Edwards. 2007b. Using
WYSIWYM to Create an Open-ended Interface for the
Semantic Grid. In S. Busemann, editor, Proceedings
of the 11th European Workshop on Natural Language
Generation.
I.A. Mel’cuk. 1988. Dependency Syntax: Theory and
Practice. State University of New York.
P. Piwek, R. Evans, L. Cahil, and N. Tipper. 2000. Natu-
ral Language Generation in the MILE System. In Pro-
ceedings of IMPACTS in NLG workshop, pages 33–42,
Schloss Dagstuhl, Germany.
P. Piwek. 2002. Requirements Definition, Validation,
Verification and Evaluation of the CLIME Interface
and Language Processing Technology. Technical Re-
port ITRI-02-03, ITRI, University of Brighton.
R. Power, D. Scott, and R. Evans. 1998. What You See Is
What You Meant: Direct Knowledge Editing with Nat-
ural Language Feedback. In Proceedings of the Thir-
teenth European Conference on Artificial Intelligence,
Brighton, UK.
R. Schwitter and M. Tilbrook. 2004. Controlled Natu-
ral Language meets the Semantic Web. In Proceed-
ings of the Australasian Language Technology Work-
shop 2004.
H.R. Tennant, K.M. Ross, R.M. Saenz, C.W.Thompson,
and J.R. Miller. 1983. Menu-based Natural Language
Understanding. In Proceedings of the Twenty-first An-
nual Meetings on Association for Computational Lin-
guistics, pages 151–158, Cambridge, Massachusetts.
J. Thom´er´e, K. Barker, V. Chaudhri, P. Clark, M. Erik-
sen, S. Mishra, B. Porter, and A. Rodriguez. 2002.
A Web-based Ontology Browsing and Editing System.
In Eighteenth National Conference on Artificial Intelli-
gence, pages 927–934, Menlo Park, CA, USA. Amer-
ican Association for Artificial Intelligence.
G. Wilcock. 2003. Talking OWLs: Towards an Ontol-
ogy Verbalizer. In Human Language Technology for
the Semantic Web and Web Services (ISWC’03), pages
109–112, Sanibel Island, Florida.
</reference>
<page confidence="0.998822">
146
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.703128">
<title confidence="0.999695">Evaluating an Ontology-Driven WYSIWYM Interface</title>
<author confidence="0.979333">Feikje Hielkema Chris Mellish Peter Edwards</author>
<affiliation confidence="0.977990666666667">Computing School of Natural &amp; Computing University of</affiliation>
<address confidence="0.832749">Aberdeen, AB24 3FX,</address>
<email confidence="0.966492">c.mellish,</email>
<abstract confidence="0.994552066666667">This paper describes an evaluation study of an ontology-driven WYSIWYM interface for metadata creation. Although the results are encouraging, they are not as positive as those of a similar tool developed for the medical domain. We believe this may be due, not to the WYSIWYM interface, but to the complexity of the underlying ontologies and the fact that subjects were unfamiliar with them. We discuss the ways in which ontology development might be influenced by issues stemming from using an NLG approach for user access to data, and the effect these factors have on general usability.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>J A Bateman</author>
</authors>
<title>Upper Modelling: A General Organisation of Knowledge for Natural Language Processing.</title>
<date>1990</date>
<booktitle>In Proceedings of the International Language Generation Workshop,</booktitle>
<location>Pittsburgh, USA.</location>
<contexts>
<context position="16046" citStr="Bateman, 1990" startWordPosition="2593" endWordPosition="2594">rg/utility.owl 141 tences to present ontology properties in text. The user can fine-tune the surface form by adding adjectives, changing morphological information and the root of individual words; actions for which only a basic linguistic knowledge is needed. This approach is outlined in more detail in (Hielkema et al., 2007b). The main challenge with this approach is that the specification is used to generate two surface forms; it remains to be seen whether a specification that is fine-tuned through one surface form will accommodate the accurate generation of another. The Penman Upper Model (Bateman, 1990) supports the specification of linguistic information through a different approach. The Upper Model is a domain-independent ontology that supports sophisticated NLP. To make a domain ontology available for NLP, its resources have to be placed in the hierarchy of the Upper Model; their place there determines their surface realisation. This task appears to require considerable linguistic expertise, but like the creation of our Dependency Trees could probably be made easier for non-linguists through some specialpurpose interface. 4 Usability Evaluation The best evaluation of our tool would be to </context>
</contexts>
<marker>Bateman, 1990</marker>
<rawString>J.A. Bateman. 1990. Upper Modelling: A General Organisation of Knowledge for Natural Language Processing. In Proceedings of the International Language Generation Workshop, Pittsburgh, USA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Bernstein</author>
<author>E Kaufmann</author>
</authors>
<title>GINO - A Guided Input Natural Language Ontology Editor.</title>
<date>2006</date>
<booktitle>In International Semantic Web Conference</booktitle>
<pages>144--157</pages>
<contexts>
<context position="2569" citStr="Bernstein and Kaufmann, 2006" startWordPosition="391" endWordPosition="394"> enable our users to describe their resources, we need to provide a tool that facilitates creation, querying and browsing of metadata by users with no prior experience of such technologies. Existing tools that provide access to RDF metadata are often graphical, e.g. (Handschuh et al., 2001; Catarci et al., 2004). However, we believe that, for social scientists, natural language is the best medium to use, as the way they conduct their research and the structure of their documents and data indicate that they are more oriented towards text than graphics. Natural language approaches include GINO (Bernstein and Kaufmann, 2006), an ontology editor with an approach reminiscent of Natural Language Menus (Tennant et al., 1983), and using Controlled languages such as PENG-D (Schwitter and Tilbrook, 2004). Such natural language approaches tend to restrict expressivity to ensure that every entry can be parsed, limiting the language and often making it stilted, so that there is a small learning curve before the user knows which structures are allowed. In order to maintain full expressivity and to shorten the learning curve, we have elected to use WYSIWYM (What You See Is What You Meant) (Power et al., 1998). This is a natu</context>
<context position="17041" citStr="Bernstein and Kaufmann, 2006" startWordPosition="2748" endWordPosition="2752">onsiderable linguistic expertise, but like the creation of our Dependency Trees could probably be made easier for non-linguists through some specialpurpose interface. 4 Usability Evaluation The best evaluation of our tool would be to let users deposit their resources in real-life contexts, but our tool is not ready for a full deployment. Another way would be to compare its usability to another metadata creation tool in an experiment where users completed the same tasks with both tools. Unfortunately, most metadata tools focus on providing support for ontology editing (e.g. Prot´eg´e6 or GINO (Bernstein and Kaufmann, 2006)), or query formulation (e.g. SEWASIE (Catarci et al., 2004)). A number of tools for metadata creation use formal (RDF) or controlled languages, which are difficult to use for those wholly unfamiliar with formal logic. Other tools were developed for one specific purpose, e.g. CREAM (Handschuh et al., 2001) which was developed for the annotation of web pages, and could not easily be adapted to our purposes. We were not aware of any tool that we could adapt to the e-social science ontologies and thus use in an experiment. Alternatively, we could have compared our interface to direct authoring of</context>
</contexts>
<marker>Bernstein, Kaufmann, 2006</marker>
<rawString>A. Bernstein and E. Kaufmann. 2006. GINO - A Guided Input Natural Language Ontology Editor. In International Semantic Web Conference 2006, pages 144– 157.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Bontcheva</author>
<author>Y Wills</author>
</authors>
<title>Automatic Report Generation from Ontologies: the MIAKT approach.</title>
<date>2004</date>
<booktitle>In Nineth International Conference on Applications of Natural Language to Information Systems (NLDB’2004),</booktitle>
<location>Manchester, UK.</location>
<contexts>
<context position="10085" citStr="Bontcheva and Wills, 2004" startWordPosition="1646" endWordPosition="1649">e WYSIWYM tool, so that both tool and ontology influenced each other’s development. We are currently adapting an ontology from another e-science project for use in our WYSIWYM interface, to further investigate such issues (see section 5). There are a number of existing tools that generate language from ontologies, using various approaches. Wilcock (2003) describes an ontology verbaliser using XML-based generation. As Wilcock states, his approach is domain-specific, and therefore probably incompatible with more general ontologies (and presumably with ontologies from a different domain). MIAKT (Bontcheva and Wills, 2004) is a system that generates textual medical reports from an RDF description. It uses a medical domain ontology and an NLG lexicon that contains lexicalisations for the concepts and instances in the ontology. In order to verbalise properties, MIAKT’s surface realiser needs lexical specifications for them. Four basic property types are distinguished whose sub-properties can mostly be realised automatically through the grammar rules in the realiser. This technique increases the portability of the system, but does affect the variability and expressivity of the generator. We do not aim to generate </context>
</contexts>
<marker>Bontcheva, Wills, 2004</marker>
<rawString>K. Bontcheva and Y. Wills. 2004. Automatic Report Generation from Ontologies: the MIAKT approach. In Nineth International Conference on Applications of Natural Language to Information Systems (NLDB’2004), Manchester, UK.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Catarci</author>
<author>P Dongilli</author>
<author>T Di Mascio</author>
<author>E Franconi</author>
<author>G Santucci</author>
<author>S Tessaris</author>
</authors>
<title>An Ontology-based Visual Tool for Query Formulation Support.</title>
<date>2004</date>
<booktitle>In Proceedings of the Sixteenth European Conference on Artificial Intelligence (ECAI2004).</booktitle>
<marker>Catarci, Dongilli, Di Mascio, Franconi, Santucci, Tessaris, 2004</marker>
<rawString>T. Catarci, P. Dongilli, T. Di Mascio, E. Franconi, G. Santucci, and S. Tessaris. 2004. An Ontology-based Visual Tool for Query Formulation Support. In Proceedings of the Sixteenth European Conference on Artificial Intelligence (ECAI2004).</rawString>
</citation>
<citation valid="true">
<authors>
<author>D De Roure</author>
<author>N R Jennings</author>
<author>N R Shadbolt</author>
</authors>
<title>The Semantic Grid: Past, Present and Future.</title>
<date>2005</date>
<booktitle>In Proceedings of the IEEE</booktitle>
<volume>93</volume>
<issue>3</issue>
<pages>669--681</pages>
<marker>De Roure, Jennings, Shadbolt, 2005</marker>
<rawString>D. De Roure, N.R. Jennings, and N.R. Shadbolt. 2005. The Semantic Grid: Past, Present and Future. In Proceedings of the IEEE 93(3), pages 669–681.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C Hallett</author>
<author>D Scott</author>
<author>R Power</author>
</authors>
<date>2007</date>
<journal>Composing Questions through Conceptual Authoring. Computational Linguistics,</journal>
<volume>33</volume>
<issue>1</issue>
<contexts>
<context position="3643" citStr="Hallett et al., 2007" startWordPosition="574" endWordPosition="577">xpressivity and to shorten the learning curve, we have elected to use WYSIWYM (What You See Is What You Meant) (Power et al., 1998). This is a natural language generation approach where the system generates a feed3http://www.w3.org/TR/owl-features/ 138 back text for the user that is based on a semantic representation. This representation is edited directly by the user by manipulating the feedback text. WYSIWYM has been used by a number of other projects, such as MILE (Piwek et al., 2000) and CLEF (Hallett, 2006). As evaluation results in both of these projects were very positive (Piwek, 2002; Hallett et al., 2007), we felt that WYSIWYM would be a suitable approach to use in our work. We have developed a metadata elicitation tool that enables users to create metadata in the shape of ontology instance data; the tool is driven by the ontologies that define those instances. We are currently implementing a WYSIWYM tool for querying, that uses the same interface as the metadata creation tool. We also aim to develop a tool for presenting the results of the query, and for browsing the descriptions in the database. These three tools will be integrated into one consistent interface, so that users can switch effo</context>
<context position="17878" citStr="Hallett et al., 2007" startWordPosition="2888" endWordPosition="2891">c. Other tools were developed for one specific purpose, e.g. CREAM (Handschuh et al., 2001) which was developed for the annotation of web pages, and could not easily be adapted to our purposes. We were not aware of any tool that we could adapt to the e-social science ontologies and thus use in an experiment. Alternatively, we could have compared our interface to direct authoring of RDF; but in an environ6http://protege.stanford.edu/ ment where most users have no experience of ontologies or metadata this seemed spurious. Instead, we adopted an approach similar to that used in the CLEF project (Hallett et al., 2007). They evaluated their WYSIWYM system (which enabled users to create SQL queries for a database in a medical domain) by measuring the performance of fifteen subjects on four consecutive tasks, after a brief introduction. These subjects were all knowledgeable in the domain, and all but two knew the representation language of the repository and how the data contained in it was structured. These subjects achieved perfect results from the second task onwards, and became faster with each task, especially after the first. We also expected users to become faster and more accurate with each completed </context>
</contexts>
<marker>Hallett, Scott, Power, 2007</marker>
<rawString>C. Hallett, D. Scott, and R. Power. 2007. Composing Questions through Conceptual Authoring. Computational Linguistics, 33(1):105–133.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C Hallett</author>
</authors>
<title>Generic Querying of Relational Databases using Natural Language Generation Techniques.</title>
<date>2006</date>
<booktitle>In Proceedings of the Fourth International Natural Language Generation Conference,</booktitle>
<pages>88--95</pages>
<location>Nottingham, UK.</location>
<contexts>
<context position="3539" citStr="Hallett, 2006" startWordPosition="558" endWordPosition="560">ll learning curve before the user knows which structures are allowed. In order to maintain full expressivity and to shorten the learning curve, we have elected to use WYSIWYM (What You See Is What You Meant) (Power et al., 1998). This is a natural language generation approach where the system generates a feed3http://www.w3.org/TR/owl-features/ 138 back text for the user that is based on a semantic representation. This representation is edited directly by the user by manipulating the feedback text. WYSIWYM has been used by a number of other projects, such as MILE (Piwek et al., 2000) and CLEF (Hallett, 2006). As evaluation results in both of these projects were very positive (Piwek, 2002; Hallett et al., 2007), we felt that WYSIWYM would be a suitable approach to use in our work. We have developed a metadata elicitation tool that enables users to create metadata in the shape of ontology instance data; the tool is driven by the ontologies that define those instances. We are currently implementing a WYSIWYM tool for querying, that uses the same interface as the metadata creation tool. We also aim to develop a tool for presenting the results of the query, and for browsing the descriptions in the dat</context>
</contexts>
<marker>Hallett, 2006</marker>
<rawString>C. Hallett. 2006. Generic Querying of Relational Databases using Natural Language Generation Techniques. In Proceedings of the Fourth International Natural Language Generation Conference, pages 88– 95, Nottingham, UK.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Handschuh</author>
<author>S Staab</author>
<author>A Maedche</author>
</authors>
<title>CREAM: creating relational metadata with a component-based, ontology-driven annotation framework.</title>
<date>2001</date>
<booktitle>In K-CAP ’01: Proceedings of the 1st international conference on Knowledge capture,</booktitle>
<pages>76--83</pages>
<publisher>ACM Press.</publisher>
<location>New York, NY, USA.</location>
<contexts>
<context position="2230" citStr="Handschuh et al., 2001" startWordPosition="338" endWordPosition="341">w.w3.org/RDF/ or OWL3 (knowledge representation language for authoring ontologies). Numerous e-science applications rely on metadata descriptions of resources. But how does metadata come into existence? Ideally the user should create it. However, metadata creation is a complex task, and few users know how to create them in RDF. To enable our users to describe their resources, we need to provide a tool that facilitates creation, querying and browsing of metadata by users with no prior experience of such technologies. Existing tools that provide access to RDF metadata are often graphical, e.g. (Handschuh et al., 2001; Catarci et al., 2004). However, we believe that, for social scientists, natural language is the best medium to use, as the way they conduct their research and the structure of their documents and data indicate that they are more oriented towards text than graphics. Natural language approaches include GINO (Bernstein and Kaufmann, 2006), an ontology editor with an approach reminiscent of Natural Language Menus (Tennant et al., 1983), and using Controlled languages such as PENG-D (Schwitter and Tilbrook, 2004). Such natural language approaches tend to restrict expressivity to ensure that every</context>
<context position="17348" citStr="Handschuh et al., 2001" startWordPosition="2797" endWordPosition="2800">ady for a full deployment. Another way would be to compare its usability to another metadata creation tool in an experiment where users completed the same tasks with both tools. Unfortunately, most metadata tools focus on providing support for ontology editing (e.g. Prot´eg´e6 or GINO (Bernstein and Kaufmann, 2006)), or query formulation (e.g. SEWASIE (Catarci et al., 2004)). A number of tools for metadata creation use formal (RDF) or controlled languages, which are difficult to use for those wholly unfamiliar with formal logic. Other tools were developed for one specific purpose, e.g. CREAM (Handschuh et al., 2001) which was developed for the annotation of web pages, and could not easily be adapted to our purposes. We were not aware of any tool that we could adapt to the e-social science ontologies and thus use in an experiment. Alternatively, we could have compared our interface to direct authoring of RDF; but in an environ6http://protege.stanford.edu/ ment where most users have no experience of ontologies or metadata this seemed spurious. Instead, we adopted an approach similar to that used in the CLEF project (Hallett et al., 2007). They evaluated their WYSIWYM system (which enabled users to create S</context>
</contexts>
<marker>Handschuh, Staab, Maedche, 2001</marker>
<rawString>S. Handschuh, S. Staab, and A. Maedche. 2001. CREAM: creating relational metadata with a component-based, ontology-driven annotation framework. In K-CAP ’01: Proceedings of the 1st international conference on Knowledge capture, pages 76–83, New York, NY, USA. ACM Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F Hielkema</author>
<author>P Edwards</author>
<author>C Mellish</author>
<author>J Farrington</author>
</authors>
<title>A Flexible Interface to Community-Driven Metadata.</title>
<date>2007</date>
<booktitle>In Proceedings of the Third International Conference on eSocial Science.</booktitle>
<contexts>
<context position="7226" citStr="Hielkema et al. (2007" startWordPosition="1173" endWordPosition="1176">divided into paragraphs which correspond to the individuals; each property of an individual is realised as (part of) a sentence in its paragraph. Each property in the ontology is associated with a linguistic specification, a Dependency Tree (Mel’cuk, 1988) that corresponds to a sentence. The specification has slots where the source and target of the property should be inserted, and is sufficiently detailed to support processes such as aggregation, through which the feedback text is made more fluent. For a more extensive description of the metadata cre139 ation tool and its implementation, see Hielkema et al. (2007b). In August 2007 we ran a pilot evaluation study (Hielkema et al., 2007a) on this tool. This study was heuristic in nature, with subjects discussing the interface with the experimenter while performing set tasks. It highlighted a number of aspects which we felt it was necessary to improve before embarking on the formal evaluation. Apart from there being standard usability considerations such as a need for better undo and help functions, it became evident that the underlying ontology was neither extensive enough nor sufficiently well-structured: subjects struggled to find the options they nee</context>
<context position="15758" citStr="Hielkema et al., 2007" startWordPosition="2545" endWordPosition="2548">ect ontology developers to have the linguistic expertise to create Dependency Trees. We are devising a way for users to create a specification by manipulating the surface form of a ‘template’ specification. We currently have 12 templates which represent commonly used sen5http://www.policygrid.org/utility.owl 141 tences to present ontology properties in text. The user can fine-tune the surface form by adding adjectives, changing morphological information and the root of individual words; actions for which only a basic linguistic knowledge is needed. This approach is outlined in more detail in (Hielkema et al., 2007b). The main challenge with this approach is that the specification is used to generate two surface forms; it remains to be seen whether a specification that is fine-tuned through one surface form will accommodate the accurate generation of another. The Penman Upper Model (Bateman, 1990) supports the specification of linguistic information through a different approach. The Upper Model is a domain-independent ontology that supports sophisticated NLP. To make a domain ontology available for NLP, its resources have to be placed in the hierarchy of the Upper Model; their place there determines the</context>
</contexts>
<marker>Hielkema, Edwards, Mellish, Farrington, 2007</marker>
<rawString>F. Hielkema, P. Edwards, C. Mellish, and J. Farrington. 2007a. A Flexible Interface to Community-Driven Metadata. In Proceedings of the Third International Conference on eSocial Science.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F Hielkema</author>
<author>C Mellish</author>
<author>P Edwards</author>
</authors>
<title>Using WYSIWYM to Create an Open-ended Interface for the Semantic Grid.</title>
<date>2007</date>
<booktitle>Proceedings of the 11th European Workshop on Natural Language Generation.</booktitle>
<editor>In S. Busemann, editor,</editor>
<contexts>
<context position="7226" citStr="Hielkema et al. (2007" startWordPosition="1173" endWordPosition="1176">divided into paragraphs which correspond to the individuals; each property of an individual is realised as (part of) a sentence in its paragraph. Each property in the ontology is associated with a linguistic specification, a Dependency Tree (Mel’cuk, 1988) that corresponds to a sentence. The specification has slots where the source and target of the property should be inserted, and is sufficiently detailed to support processes such as aggregation, through which the feedback text is made more fluent. For a more extensive description of the metadata cre139 ation tool and its implementation, see Hielkema et al. (2007b). In August 2007 we ran a pilot evaluation study (Hielkema et al., 2007a) on this tool. This study was heuristic in nature, with subjects discussing the interface with the experimenter while performing set tasks. It highlighted a number of aspects which we felt it was necessary to improve before embarking on the formal evaluation. Apart from there being standard usability considerations such as a need for better undo and help functions, it became evident that the underlying ontology was neither extensive enough nor sufficiently well-structured: subjects struggled to find the options they nee</context>
<context position="15758" citStr="Hielkema et al., 2007" startWordPosition="2545" endWordPosition="2548">ect ontology developers to have the linguistic expertise to create Dependency Trees. We are devising a way for users to create a specification by manipulating the surface form of a ‘template’ specification. We currently have 12 templates which represent commonly used sen5http://www.policygrid.org/utility.owl 141 tences to present ontology properties in text. The user can fine-tune the surface form by adding adjectives, changing morphological information and the root of individual words; actions for which only a basic linguistic knowledge is needed. This approach is outlined in more detail in (Hielkema et al., 2007b). The main challenge with this approach is that the specification is used to generate two surface forms; it remains to be seen whether a specification that is fine-tuned through one surface form will accommodate the accurate generation of another. The Penman Upper Model (Bateman, 1990) supports the specification of linguistic information through a different approach. The Upper Model is a domain-independent ontology that supports sophisticated NLP. To make a domain ontology available for NLP, its resources have to be placed in the hierarchy of the Upper Model; their place there determines the</context>
</contexts>
<marker>Hielkema, Mellish, Edwards, 2007</marker>
<rawString>F. Hielkema, C. Mellish, and P. Edwards. 2007b. Using WYSIWYM to Create an Open-ended Interface for the Semantic Grid. In S. Busemann, editor, Proceedings of the 11th European Workshop on Natural Language Generation.</rawString>
</citation>
<citation valid="true">
<authors>
<author>I A Mel’cuk</author>
</authors>
<title>Dependency Syntax: Theory and Practice.</title>
<date>1988</date>
<publisher>State University of</publisher>
<location>New York.</location>
<marker>Mel’cuk, 1988</marker>
<rawString>I.A. Mel’cuk. 1988. Dependency Syntax: Theory and Practice. State University of New York.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Piwek</author>
<author>R Evans</author>
<author>L Cahil</author>
<author>N Tipper</author>
</authors>
<title>Natural Language Generation in the MILE System. In</title>
<date>2000</date>
<booktitle>Proceedings of IMPACTS in NLG workshop,</booktitle>
<pages>33--42</pages>
<location>Schloss Dagstuhl, Germany.</location>
<contexts>
<context position="3514" citStr="Piwek et al., 2000" startWordPosition="552" endWordPosition="555">tilted, so that there is a small learning curve before the user knows which structures are allowed. In order to maintain full expressivity and to shorten the learning curve, we have elected to use WYSIWYM (What You See Is What You Meant) (Power et al., 1998). This is a natural language generation approach where the system generates a feed3http://www.w3.org/TR/owl-features/ 138 back text for the user that is based on a semantic representation. This representation is edited directly by the user by manipulating the feedback text. WYSIWYM has been used by a number of other projects, such as MILE (Piwek et al., 2000) and CLEF (Hallett, 2006). As evaluation results in both of these projects were very positive (Piwek, 2002; Hallett et al., 2007), we felt that WYSIWYM would be a suitable approach to use in our work. We have developed a metadata elicitation tool that enables users to create metadata in the shape of ontology instance data; the tool is driven by the ontologies that define those instances. We are currently implementing a WYSIWYM tool for querying, that uses the same interface as the metadata creation tool. We also aim to develop a tool for presenting the results of the query, and for browsing th</context>
</contexts>
<marker>Piwek, Evans, Cahil, Tipper, 2000</marker>
<rawString>P. Piwek, R. Evans, L. Cahil, and N. Tipper. 2000. Natural Language Generation in the MILE System. In Proceedings of IMPACTS in NLG workshop, pages 33–42, Schloss Dagstuhl, Germany.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Piwek</author>
</authors>
<title>Requirements Definition, Validation, Verification and Evaluation of the CLIME Interface and Language Processing Technology.</title>
<date>2002</date>
<tech>Technical Report ITRI-02-03,</tech>
<institution>ITRI, University of Brighton.</institution>
<contexts>
<context position="3620" citStr="Piwek, 2002" startWordPosition="572" endWordPosition="573">intain full expressivity and to shorten the learning curve, we have elected to use WYSIWYM (What You See Is What You Meant) (Power et al., 1998). This is a natural language generation approach where the system generates a feed3http://www.w3.org/TR/owl-features/ 138 back text for the user that is based on a semantic representation. This representation is edited directly by the user by manipulating the feedback text. WYSIWYM has been used by a number of other projects, such as MILE (Piwek et al., 2000) and CLEF (Hallett, 2006). As evaluation results in both of these projects were very positive (Piwek, 2002; Hallett et al., 2007), we felt that WYSIWYM would be a suitable approach to use in our work. We have developed a metadata elicitation tool that enables users to create metadata in the shape of ontology instance data; the tool is driven by the ontologies that define those instances. We are currently implementing a WYSIWYM tool for querying, that uses the same interface as the metadata creation tool. We also aim to develop a tool for presenting the results of the query, and for browsing the descriptions in the database. These three tools will be integrated into one consistent interface, so tha</context>
</contexts>
<marker>Piwek, 2002</marker>
<rawString>P. Piwek. 2002. Requirements Definition, Validation, Verification and Evaluation of the CLIME Interface and Language Processing Technology. Technical Report ITRI-02-03, ITRI, University of Brighton.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Power</author>
<author>D Scott</author>
<author>R Evans</author>
</authors>
<title>What You See Is What You Meant: Direct Knowledge Editing with Natural Language Feedback.</title>
<date>1998</date>
<booktitle>In Proceedings of the Thirteenth European Conference on Artificial Intelligence,</booktitle>
<location>Brighton, UK.</location>
<contexts>
<context position="3153" citStr="Power et al., 1998" startWordPosition="492" endWordPosition="495">GINO (Bernstein and Kaufmann, 2006), an ontology editor with an approach reminiscent of Natural Language Menus (Tennant et al., 1983), and using Controlled languages such as PENG-D (Schwitter and Tilbrook, 2004). Such natural language approaches tend to restrict expressivity to ensure that every entry can be parsed, limiting the language and often making it stilted, so that there is a small learning curve before the user knows which structures are allowed. In order to maintain full expressivity and to shorten the learning curve, we have elected to use WYSIWYM (What You See Is What You Meant) (Power et al., 1998). This is a natural language generation approach where the system generates a feed3http://www.w3.org/TR/owl-features/ 138 back text for the user that is based on a semantic representation. This representation is edited directly by the user by manipulating the feedback text. WYSIWYM has been used by a number of other projects, such as MILE (Piwek et al., 2000) and CLEF (Hallett, 2006). As evaluation results in both of these projects were very positive (Piwek, 2002; Hallett et al., 2007), we felt that WYSIWYM would be a suitable approach to use in our work. We have developed a metadata elicitati</context>
</contexts>
<marker>Power, Scott, Evans, 1998</marker>
<rawString>R. Power, D. Scott, and R. Evans. 1998. What You See Is What You Meant: Direct Knowledge Editing with Natural Language Feedback. In Proceedings of the Thirteenth European Conference on Artificial Intelligence, Brighton, UK.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Schwitter</author>
<author>M Tilbrook</author>
</authors>
<title>Controlled Natural Language meets the Semantic Web.</title>
<date>2004</date>
<booktitle>In Proceedings of the Australasian Language Technology Workshop</booktitle>
<contexts>
<context position="2745" citStr="Schwitter and Tilbrook, 2004" startWordPosition="420" endWordPosition="424">technologies. Existing tools that provide access to RDF metadata are often graphical, e.g. (Handschuh et al., 2001; Catarci et al., 2004). However, we believe that, for social scientists, natural language is the best medium to use, as the way they conduct their research and the structure of their documents and data indicate that they are more oriented towards text than graphics. Natural language approaches include GINO (Bernstein and Kaufmann, 2006), an ontology editor with an approach reminiscent of Natural Language Menus (Tennant et al., 1983), and using Controlled languages such as PENG-D (Schwitter and Tilbrook, 2004). Such natural language approaches tend to restrict expressivity to ensure that every entry can be parsed, limiting the language and often making it stilted, so that there is a small learning curve before the user knows which structures are allowed. In order to maintain full expressivity and to shorten the learning curve, we have elected to use WYSIWYM (What You See Is What You Meant) (Power et al., 1998). This is a natural language generation approach where the system generates a feed3http://www.w3.org/TR/owl-features/ 138 back text for the user that is based on a semantic representation. Thi</context>
</contexts>
<marker>Schwitter, Tilbrook, 2004</marker>
<rawString>R. Schwitter and M. Tilbrook. 2004. Controlled Natural Language meets the Semantic Web. In Proceedings of the Australasian Language Technology Workshop 2004.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H R Tennant</author>
<author>K M Ross</author>
<author>R M Saenz</author>
<author>C W Thompson</author>
<author>J R Miller</author>
</authors>
<title>Menu-based Natural Language Understanding.</title>
<date>1983</date>
<booktitle>In Proceedings of the Twenty-first Annual Meetings on Association for Computational Linguistics,</booktitle>
<pages>151--158</pages>
<location>Cambridge, Massachusetts.</location>
<contexts>
<context position="2667" citStr="Tennant et al., 1983" startWordPosition="408" endWordPosition="411">ng and browsing of metadata by users with no prior experience of such technologies. Existing tools that provide access to RDF metadata are often graphical, e.g. (Handschuh et al., 2001; Catarci et al., 2004). However, we believe that, for social scientists, natural language is the best medium to use, as the way they conduct their research and the structure of their documents and data indicate that they are more oriented towards text than graphics. Natural language approaches include GINO (Bernstein and Kaufmann, 2006), an ontology editor with an approach reminiscent of Natural Language Menus (Tennant et al., 1983), and using Controlled languages such as PENG-D (Schwitter and Tilbrook, 2004). Such natural language approaches tend to restrict expressivity to ensure that every entry can be parsed, limiting the language and often making it stilted, so that there is a small learning curve before the user knows which structures are allowed. In order to maintain full expressivity and to shorten the learning curve, we have elected to use WYSIWYM (What You See Is What You Meant) (Power et al., 1998). This is a natural language generation approach where the system generates a feed3http://www.w3.org/TR/owl-featur</context>
</contexts>
<marker>Tennant, Ross, Saenz, Thompson, Miller, 1983</marker>
<rawString>H.R. Tennant, K.M. Ross, R.M. Saenz, C.W.Thompson, and J.R. Miller. 1983. Menu-based Natural Language Understanding. In Proceedings of the Twenty-first Annual Meetings on Association for Computational Linguistics, pages 151–158, Cambridge, Massachusetts.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Thom´er´e</author>
<author>K Barker</author>
<author>V Chaudhri</author>
<author>P Clark</author>
<author>M Eriksen</author>
<author>S Mishra</author>
<author>B Porter</author>
<author>A Rodriguez</author>
</authors>
<title>A Web-based Ontology Browsing and Editing System.</title>
<date>2002</date>
<journal>Artificial Intelligence.</journal>
<booktitle>In Eighteenth National Conference on Artificial Intelligence,</booktitle>
<pages>927--934</pages>
<publisher>American Association for</publisher>
<location>Menlo Park, CA, USA.</location>
<marker>Thom´er´e, Barker, Chaudhri, Clark, Eriksen, Mishra, Porter, Rodriguez, 2002</marker>
<rawString>J. Thom´er´e, K. Barker, V. Chaudhri, P. Clark, M. Eriksen, S. Mishra, B. Porter, and A. Rodriguez. 2002. A Web-based Ontology Browsing and Editing System. In Eighteenth National Conference on Artificial Intelligence, pages 927–934, Menlo Park, CA, USA. American Association for Artificial Intelligence.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Wilcock</author>
</authors>
<title>Talking OWLs: Towards an Ontology Verbalizer. In Human Language Technology for the Semantic Web and Web Services</title>
<date>2003</date>
<pages>109--112</pages>
<location>Sanibel Island, Florida.</location>
<contexts>
<context position="9815" citStr="Wilcock (2003)" startWordPosition="1611" endWordPosition="1612">ctured? In this section we explore issues that occur when developing or adapting ontologies for use in the WYSIWYM tool; we believe that this can at least in part be generalised to NLG. The ontologies we have used so far were developed at the same time as the WYSIWYM tool, so that both tool and ontology influenced each other’s development. We are currently adapting an ontology from another e-science project for use in our WYSIWYM interface, to further investigate such issues (see section 5). There are a number of existing tools that generate language from ontologies, using various approaches. Wilcock (2003) describes an ontology verbaliser using XML-based generation. As Wilcock states, his approach is domain-specific, and therefore probably incompatible with more general ontologies (and presumably with ontologies from a different domain). MIAKT (Bontcheva and Wills, 2004) is a system that generates textual medical reports from an RDF description. It uses a medical domain ontology and an NLG lexicon that contains lexicalisations for the concepts and instances in the ontology. In order to verbalise properties, MIAKT’s surface realiser needs lexical specifications for them. Four basic property type</context>
</contexts>
<marker>Wilcock, 2003</marker>
<rawString>G. Wilcock. 2003. Talking OWLs: Towards an Ontology Verbalizer. In Human Language Technology for the Semantic Web and Web Services (ISWC’03), pages 109–112, Sanibel Island, Florida.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>