<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000005">
<title confidence="0.9993205">
Evaluating the Effectiveness of Information Presentation
in a Full End-To-End Dialogue System
</title>
<author confidence="0.97035">
Taghi Paksima
</author>
<affiliation confidence="0.859420666666666">
Enterprise Search Group
Microsoft
D-81669 Munich, Germany
</affiliation>
<author confidence="0.949497">
Kallirroi Georgila
</author>
<affiliation confidence="0.919299">
Institute for Creative Technologies
University of Southern California
Marina del Rey, CA 90292, USA
</affiliation>
<author confidence="0.982152">
Johanna D. Moore
</author>
<affiliation confidence="0.9982805">
School of Informatics
University of Edinburgh
</affiliation>
<address confidence="0.976051">
Edinburgh, EH8 9AB, UK
</address>
<email confidence="0.9821885">
j.moore@ed.ac.uk
taghi.paksima@microsoft.com kgeorgila@ict.usc.edu
</email>
<sectionHeader confidence="0.997189" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999969173913043">
Recent work on information presenta-
tion in dialogue systems combines user
modelling (UM) and stepwise refine-
ment through clustering and summarisa-
tion (SR) in the UMSR approach. An eval-
uation in which participants rated dialogue
transcripts showed that UMSR presents
complex trade-offs understandably, pro-
vides users with a good overview of their
options, and increases users’ confidence
that all relevant options have been pre-
sented (Demberg and Moore, 2006). In
this paper, we evaluate the effectiveness
of the UMSR approach in a more realis-
tic setting, by incorporating this informa-
tion presentation technique into a full end-
to-end dialogue system in the city infor-
mation domain, and comparing it with the
traditional approach of presenting infor-
mation sequentially. Our results suggest
that despite complications associated with
a real dialogue system setting, the UMSR
model retains its advantages.
</bodyText>
<sectionHeader confidence="0.999471" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.988834833333333">
Spoken dialogue systems (SDS) that help users
find a desired option (e.g., flight, restaurant,
movie) from the set of options satisfying their con-
straints typically present options sequentially, or-
dered along a default dimension (e.g., by price or
departure time). An example is shown in Fig. 1.
The user can then navigate through the options
and refine them by offering new constraints until
a suitable option has been found. However, when
the number of available options is large, this pro-
cess can be painstaking, leading to long dialogues
There are six restaurant options matching your query.
</bodyText>
<figureCaption confidence="0.918325916666667">
Number 1: Voujon offers a bright, airy and contempo-
rary dining area, with simple floral displays and leather
seating. It serves Indian cuisine. It is located in the city
centre. The average price is £24 per person.
Number 2: Saffrani’s decor is modern, the dining room
wee, though the menu is enormous, and the atmosphere
charming. It offers new Indian dishes never before seen
in Edinburgh. It serves Indian, seafood cuisine. It is
located in the city centre. The average price is £28 per
person.
Number 3: Britannia Spice ...
Figure 1: Example of sequential information pre-
</figureCaption>
<bodyText confidence="0.943880576923077">
sentation in the city information domain (modi-
fied version of the TownInfo system (Lemon et al.,
2006)).
and reduced user satisfaction. Thus a major chal-
lenge in the development of SDS is to improve
information presentation algorithms. This is im-
portant for several reasons: (1) to avoid overbur-
dening the user’s memory by presenting too many
options; (2) to ensure that the user is given an
overview of the available option space so that the
optimal option can be found; and (3) to minimise
the number of dialogue turns (hence dialogue du-
ration) required for the user to find an acceptable
option. As Walker et al. (2001) showed, failing to
meet this third goal may reduce overall user satis-
faction.
Recently several approaches have been pro-
posed to overcome the shortcomings of the se-
quential enumeration strategy (Polifroni et al.,
2003; Chung, 2004; Demberg and Moore, 2006;
Polifroni and Walker, 2008). Because of the com-
plexity of building a complete end-to-end SDS,
these approaches have been evaluated using an
“overhearer” methodology in which dialogues are
either hand-crafted or simulated and then pre-
sented to subjects, either as textual transcripts
</bodyText>
<note confidence="0.711956">
Proceedings of SIGDIAL 2009: the 10th Annual Meeting of the Special Interest Group in Discourse and Dialogue, pages 1–10,
</note>
<affiliation confidence="0.658043">
Queen Mary University of London, September 2009. c�2009 Association for Computational Linguistics
</affiliation>
<page confidence="0.983792">
1
</page>
<bodyText confidence="0.995781577777778">
(Demberg and Moore, 2006; Polifroni and Walker,
2008) or audio recordings (Walker et al., 2004),
for rating. The general consensus from these stud-
ies is that users significantly prefer approaches
that take their preferences into account. How-
ever, because users were not interacting with these
SDS, the evaluation criteria were limited to users’
perceptions (e.g., informativeness, good overview
of options, confidence in choice, etc.), and met-
rics such as effectiveness (i.e., actual or perceived
task completion) and efficiency (i.e., length of di-
alogue) could not be assessed. To address this
issue, Winterboer and Moore (2007) carried out
a Wizard-of-Oz (WOz) study in which users par-
ticipated in dialogues controlled by two different
information presentation algorithms. They found
that not only did users prefer presentations based
on a user model, dialogues employing the “user-
model based summarise and refine” (UMSR) ap-
proach led to greater task success and dialogue ef-
ficiency.
In this paper, we take this one step further, and
evaluate the effectiveness of the UMSR approach
in a more realistic setting, incorporating this con-
tent selection and presentation strategy into a full
end-to-end dialogue system, and comparing it to
the traditional sequential enumeration approach.
Our results suggest that despite complications as-
sociated with a real dialogue system setting, the
UMSR model retains its advantages. Our results
also verify the hypothesis that the UMSR model
presents complex trade-offs in a concise, yet un-
derstandable way. Furthermore, as in the WOz
study, the UMSR approach leads to a significant
reduction in the number of dialogue turns.
The structure of the paper is as follows: In
Sec. 2, we discuss related work. In Sec. 3 we
present the full end-to-end SDS used for com-
parison between the standard sequential enumer-
ation approach and the UMSR approach. In Sec. 4
we describe how we implemented the UMSR ap-
proach. Then in Sec. 5 we provide an example. In
Sec. 6 we describe our experimental design and in
Sec. 7 our results. Finally in Sec. 8, we present our
conclusions.
</bodyText>
<sectionHeader confidence="0.974446" genericHeader="introduction">
2 Previous Approaches
</sectionHeader>
<bodyText confidence="0.9307050625">
As noted above, a number of approaches to in-
formation presentation in SDS have recently been
proposed. The user-model based (UM) approach
employs a model of the users preferences and de-
cision theory techniques to identify and present a
small number of options that best match the user’s
preferences (Carenini and Moore, 2001; Walker et
al., 2004; Moore et al., 2004). Fig. 2 shows a sam-
ple presentation generated using the UM approach
for a student user who cares most about price and
flying direct.
There’s a direct flight on BMI with a good price. It
arrives at four ten p.m. and costs a hundred and twelve
pounds. The cheapest flight is on Ryanair. It arrives at
twelve forty-five p.m. and costs just fifty pounds, but it
requires a connection in Dublin.
</bodyText>
<figureCaption confidence="0.807408">
Figure 2: Example of information presentation
</figureCaption>
<bodyText confidence="0.985144073170732">
based on the UM approach, from (Moore et al.,
2004).
Although the UM approach enables a concise
presentation of a small number of options, high-
lighting the ways in which these options satisfy
user preferences, it does not scale up to presenting
a large number of options. When there are hun-
dreds of potentially relevant options to consider
(e.g., all Italian restaurants in New York City),
there may be a large number of options that fit
the user model, making it difficult to narrow down
the number of options. In addition, users may
not be able to provide constraints until they are
presented with more details concerning the option
space. Moreover, the system does not provide an
overview of the available options, which may lead
to the user’s actual or perceived missing out on
possibly better alternatives.
An alternative approach, which we call the sum-
marise and refine approach (SR) (Polifroni et al.,
2003; Chung, 2004) structures large datasets for
summarisation and successive refinement. It sup-
ports the user in narrowing in on a suitable option
by grouping the options in the database into clus-
ters of options with similar features. The system
can then summarise the common attributes of the
options and thus suggest further refinement con-
straints to the user. In this content structuring ap-
proach, the prompts presented to the user and the
order in which they appear, are determined at run-
time based on an algorithm that computes the most
useful set of attributes, as dictated by the set of op-
tions that satisfy the user query. For large datasets,
attributes that partition the data into the minimal
number of clusters are chosen, so that a concise
summary can be presented to the user to refine
(Fig. 3).
In addition to its many advantages, the SR ap-
proach also has several limitations. First, depend-
ing on the size and complexity of the domain,
many turns may be required during the refinement
</bodyText>
<page confidence="0.998473">
2
</page>
<tableCaption confidence="0.82615775">
M: What restaurants do you have?
S: I have found 983 restaurants. Most of them are
located in Boston and Cambridge. There are 32
choices for cuisine. I also have information about
price range.
M: Okay tell me about the ones in Boston.
S: I have found 401 restaurants in Boston. There are
29 choices for cuisine.
M: Do you have any that serve seafood?
S: I have found 19 seafood restaurants. They are
predominantly in Back Bay, the North End, South
Boston and the South End.
</tableCaption>
<figureCaption confidence="0.971316">
Figure 3: Sample dialogue between simulator (M)
and SR system (S), from (Polifroni et al., 2003).
</figureCaption>
<bodyText confidence="0.999906609756098">
process. Because the user’s preferences are not
taken into account, the clusters may contain many
irrelevant entities, which must be filtered out suc-
cessively with each refinement step. Second, if
there is no optimal solution, exploration of trade-
offs between options can be difficult. Finally, the
chosen clusters may be based on attributes that are
irrelevant for the specific user.
In an attempt to combine the benefits of the UM
and SR approaches, Demberg &amp; Moore (2006)
devised the user-model based summarise and re-
fine (UMSR) approach to information presenta-
tion. This approach first clusters the values of each
attribute in order to group them so that the op-
tions can be summarised more easily later, and la-
bels like ”cheap”, ”moderate”, ”expensive” can be
assigned to values of continuous categories such
as “price”. The system then structures options
into an option tree based on the ranking of at-
tributes in the user model, the options returned
from the database, and the attribute-value clus-
tering. The resulting option tree determines how
different options relate to one another, and which
ones are most attractive for the user. After the tree
structure is built, it is pruned to decide which op-
tions are compelling to the user according to the
user model. This allows the system to save time
by omitting options that are not of any potential
interest to the user. Once pruning is complete,
each branch of the tree describes a possible refine-
ment path, and thus can be used to direct dialogue
flow. Trade-offs between alternative options are
presented explicitly in order to provide the user
with a better overview of the option space. In ad-
dition, to give users confidence that they are being
presented with all of the relevant options, a brief
account of all the remaining (irrelevant) options is
also provided. For a more detailed discussion of
the UMSR approach, see (Demberg and Moore,
2006). In Sec. 4 we describe how we employed
the UMSR approach in our system.
</bodyText>
<sectionHeader confidence="0.924802" genericHeader="method">
3 The TownInfo System
</sectionHeader>
<bodyText confidence="0.999981464285714">
The TownInfo SDS was developed as part of the
EC project TALK (Lemon et al., 2006). Users
can search for hotels, bars and restaurants in
an artificial town. The system supports two di-
alogue strategies, one hand-crafted and another
learnt using Reinforcement Learning (Henderson
et al., 2008). For the current experiment we used
the hand-crafted strategy. Natural language un-
derstanding is performed using a keyword-based
parser and natural language generation is based
on templates. The information presentation is se-
quential. An example is given in Fig. 1, taken
from the modified version of TownInfo for the cur-
rent experiment. Although the original TownInfo
system supported speech input and speech output,
here we use text input/output to make sure that our
results are not influenced by poor recognition ac-
curacy or intelligibility due to poor speech syn-
thesis. Of course, as we mention in Sec. 8, the
next step would be to perform an experiment with
speech input/output.
For our current experiment we focussed on
restaurant recommendations and the TownInfo
database had to be extended to include a much
wider range of options to provide more realistic
information presentation scenarios. The database
used in our experiments contains a total of 80
restaurants in Edinburgh, UK.
</bodyText>
<sectionHeader confidence="0.994459" genericHeader="method">
4 The UMSR Algorithm
</sectionHeader>
<bodyText confidence="0.9996995">
This section briefly describes our implementation
of the UMSR algorithm; for more details see
(Demberg and Moore, 2006). Sec. 5 provides an
example for clarity.
</bodyText>
<subsectionHeader confidence="0.996394">
4.1 The User Model
</subsectionHeader>
<bodyText confidence="0.999988777777778">
The user model contains the user’s ranking and
preferred values for the relevant attributes in the
restaurant domain: price, distance, star
rating, service rating, and cuisine
type. Table 1 shows a sample user model. The
Rank field indicates the relative importance of the
attributes for the user, with 1 being most impor-
tant. The Value field indicates the user’s preferred
value for each attribute.1
</bodyText>
<footnote confidence="0.844026">
1If two attributes in a user model have identical ranks, the
order of the preferences is used to decide which has a higher
priority.
</footnote>
<page confidence="0.994188">
3
</page>
<table confidence="0.999613666666667">
UserID Attribute Value Rank
1 Price Cheap 1.00
1 Distance Near 2.00
1 Star High 3.00
1 Cuisine Indian 4.00
1 Service Don’t Care 5.00
</table>
<tableCaption confidence="0.99986">
Table 1: Sample user model for a student.
</tableCaption>
<bodyText confidence="0.9993322">
According to Elzer et al. (1994), some prefer-
ences are enough to reject options outright (and
therefore are more like goals) whereas others are
more purely like preferences (to be weighed and
ranked). Here we do not make such a distinction.
</bodyText>
<subsectionHeader confidence="0.999761">
4.2 Adapting to Changes to the User Model
</subsectionHeader>
<bodyText confidence="0.999994939393939">
In the original design, the user model was cre-
ated at the outset and not modified during the dia-
logue. However, during initial piloting of the sys-
tem, we found that this design did not support “sit-
uational preferences”. For example, consider the
user model for the student in Table 1. This user
normally prefers to have Indian food if she has the
option to (a “dispositional preference”). If, how-
ever, in the current situation she is entertaining a
friend from out of town who wishes to try Scottish
food, the user may decide to explore options for
Scottish cuisine (a “situational preference”). Here,
the user changes her original query for the situa-
tion, thus redefining her preferences. When this
occurs, we must perform a new database query
and rebuild the option tree. To take these dynamic
changes into account during the course of the dia-
logue, at each dialogue turn the user query is com-
pared against the user model, and if any difference
is noted, the user model is updated to reflect the
current preferences, the tree is rebuilt using the
new user model, and the dialogue continues with
a summary of the available options based on this
new tree.
Note that for individual models, i.e. user models
that are designed for individual people and not for
classes of users (student or business person), some
queries could justify situational changes and some
could indicate permanent (or at least less tempo-
rary) changes to the user model (e.g., ”Are there
any nicer restaurants? I got a new job”). In our
experiment we use only class models and we do
not allow permanent changes to the user model.
</bodyText>
<subsectionHeader confidence="0.998653">
4.3 The Clustering Algorithm
</subsectionHeader>
<bodyText confidence="0.9999606">
Following (Polifroni et al., 2003) and (Demberg
and Moore, 2006), we used agglomerative group-
average clustering to automatically group values
for each attribute. The algorithm begins by assign-
ing each unique attribute value to its own bin, and
successively merging bins whose means are most
similar until a stopping criterion (a target of no
more than three clusters, in our implementation)
is met. The bins are then assigned predefined la-
bels, e.g., “cheap”, “moderately priced” and “ex-
pensive” for price. Clustering attribute values
with this algorithm allows for database-dependent
labelling. Therefore, a restaurant with a price of
£35 might be considered as expensive for Edin-
burgh, but inexpensive for London.
</bodyText>
<subsectionHeader confidence="0.99909">
4.4 Building the Option Tree
</subsectionHeader>
<bodyText confidence="0.999976793103448">
The tree building algorithm is recursive. It begins
at the root node, which contains all entities in the
retrieved dataset, and builds up the tree level by
level based on the ranking of attributes in the user
model. At each node of the tree, it retrieves the
next attribute preference from the user model and
then invokes the clustering algorithm for this at-
tribute’s values. Once the current dataset has been
clustered, the algorithm then adds the resultant
clusters as the children of the current node. Af-
ter each cluster is added, the algorithm is invoked
recursively on the newly created children of the
current node.
As the tree is being constructed, the algorithm
arranges the nodes in the tree such that the children
of each node are ordered from left to right in de-
creasing order of desirability. For example, if the
particular user prefers restaurants that are far from
the city centre, the clusters based on distance
would be ordered such that “far” is the leftmost
child and “near” is the rightmost child. Fig. 5 de-
picts an option tree structure for the user model of
Table 1, in the context of the example of Sec. 5.
The numbers in the nodes indicate how many op-
tions are represented by the node.
Given an option tree ordered in this way, to find
the best available options, the system traverses the
tree in a depth-first fashion starting from the root
and selecting the leftmost branch at each node.
</bodyText>
<subsectionHeader confidence="0.994625">
4.5 Pruning the Option Tree
</subsectionHeader>
<bodyText confidence="0.99998525">
The goal of the UMSR algorithm is to present an
overview of the available options, that are most
relevant to the user’s preferences, concisely and
understandably. To determine the relevance of op-
tions, we use the notion of “dominance” defined
in Demberg &amp; Moore (2006). Dominant options
are those for which there is no other option in the
dataset that is better on all attributes. A domi-
</bodyText>
<page confidence="0.987908">
4
</page>
<bodyText confidence="0.999678086956522">
nated option is in all respects equal to or worse
than some other option in the relevant subset of
the database; it should not be of interest for any
rational user.
The pruning algorithm follows Demberg &amp;
Moore (2006), and thus we summarise it only
briefly here. The algorithm operates directly on
the ordered option tree, using the tree structure so
that it can efficiently determine dominance rela-
tions without having to compare each pair of op-
tions. The algorithm traverses the tree in depth-
first order, generating constraints during this pro-
cess. These constraints encode the properties that
other options would need to satisfy in order not to
be dominated by the options which have already
been deemed to be dominant. A node must ful-
fil the constraints that apply to it, otherwise it is
pruned from the tree. If an option (or a cluster of
options) satisfies a constraint, the property that sat-
isfied the constraint is marked as the options’ jus-
tification. If some, but not all, of the constraints
can be satisfied by an option, the constraints are
propagated to the other nodes (see Fig. 5).
</bodyText>
<subsectionHeader confidence="0.992837">
4.6 Natural Language Generation
</subsectionHeader>
<bodyText confidence="0.99938975">
Once a pruned option tree has been constructed,
the system can generate a presentation to the user.
The natural language generation (NLG) algorithm
includes three steps described below.
</bodyText>
<subsectionHeader confidence="0.621545">
4.6.1 Identifying Trade-offs
</subsectionHeader>
<bodyText confidence="0.9999756">
To identify the trade-offs, the algorithm tra-
verses the tree looking for constraints that were
generated during the pruning process. For each
node that generated a constraint, the algorithm
finds the best sibling, which satisfies the con-
straint. It does this by first checking the siblings
of the current node, and if none satisfy the con-
straint, it moves up the tree and recursively tra-
verses siblings of the ancestor node. Once a trade-
off node is found, it is recorded in the option tree
at that point, and the algorithm then searches up-
ward in the tree to find the lowest common parent
of the trade-off nodes. This is the “Differentiating
Parent” for the trade-off; the attribute that deter-
mines the children of this node indicates the trade-
off the user has to make. In the example shown
in Fig. 5, the attribute that the user must trade-
off is distance. The system then generates a
natural language description of the trade-off using
templates, e.g., “For a restaurant that serves Indian
cuisine you would have to go farther from the city
centre”. If a constraint cannot be satisfied, the sys-
tem generates a sentence describing this situation,
e.g., “However, there are no inexpensive restau-
rants that match your preferences”.
</bodyText>
<subsectionHeader confidence="0.803655">
4.6.2 Summarisation
</subsectionHeader>
<bodyText confidence="0.999991933333333">
The summarisation process aims to present the
user with an understandable and concise overview
of the available options, so that she can make
informed decisions on how to proceed with her
query. In a SDS, it is important not to present too
much information in a single turn in order to keep
the memory load on the user manageable. Thus,
in our implementation, the system provides a sum-
mary of the first three attributes (corresponding to
the first three levels of the tree), e.g., “I found 12
restaurants which are inexpensive. Only 7 of them
are near the city centre, out of which only 4 have
a high star rating”. If there are any trade-offs over
the first three attributes, they are also mentioned to
the user, using the algorithm described above.
</bodyText>
<subsubsectionHeader confidence="0.753537">
4.6.3 Turn Generation
</subsubsectionHeader>
<bodyText confidence="0.999959173913044">
The turn generation algorithm first determines
whether the current user’s query is consistent with
the preferences defined in the user model. Since
the option tree, and consequently the generation so
far, have primarily been based on the user model,
if the algorithm notices an inconsistency it will
give priority to the most recent user query as a sit-
uational adjustment (see Sec. 4.2), and then update
the user model to reflect the adjustment. If the user
model is modified, the algorithm rebuilds the op-
tion tree, and generates the next turn using the new
user model and the most recent user query.
To ensure the user that the system has under-
stood her correctly, and to increase her confidence,
the algorithm includes a summary of all attribute
values that are common to the cluster in the option
tree that is being used to generate the summary.
For example, for the second turn in the dialogue of
Fig. 4, although the user’s most recent query was
about cuisine, the system includes a summary
of all the attributes already mentioned to the user:
“All of them are cheap, are near the city centre,
and have a high star rating”.
</bodyText>
<sectionHeader confidence="0.999192" genericHeader="method">
5 Example
</sectionHeader>
<bodyText confidence="0.891473166666667">
To clarify things further, here we present an exam-
ple. A dialogue between the UMSR system and
a student (user model of Table 1) is depicted in
Fig. 4.
Fig. 5 depicts the tree structure for the stu-
dent user of our example. The user begins by
</bodyText>
<page confidence="0.979579">
5
</page>
<tableCaption confidence="0.562440166666667">
U: Tell me about the restaurants you have.
S: I found 12 restaurants which are inexpensive. Only
7 of them are near the city centre, out of which only
4 have a high star rating. I also have information
about cuisine and service quality.
U: Tell me about the cuisine.
</tableCaption>
<bodyText confidence="0.948471727272727">
S: There is only 1 restaurant that serves Scottish food,
and 3 restaurants that serve French food. They all
provide good service quality. All of them are cheap,
are near the city centre, and have a high star rating.
For a restaurant that serves Indian cuisine you
would have to go farther from the city centre.
U: Okay, tell me about the Scottish one.
S: The Jam House’s menu includes Scottish dishes
sparked with international flavour, with a decent
choice of vegetarian dishes. It is located in the
centre. The average price is £22 per person.
U: What about Indian restaurants?
S: I found 2 restaurants that serve Indian food.
Both of them are cheap, within average distance
from the city centre, and have a high star rating.
Only one of them provides good service quality.
U: Okay, tell me about this one.
S: The Raj on the Shore’s theme extends from the
soldier figurines behind the exotic blue bar to the
predominantly Bangladeshi, Indian menu. It serves
Indian and Bangladeshi cuisine. It is located
in the north. The average price is £20 per person.
</bodyText>
<figureCaption confidence="0.925352">
Figure 4: Example dialogue with our UMSR ap-
proach (student user of Table 1).
</figureCaption>
<bodyText confidence="0.999959428571429">
asking generally for a restaurant recommendation,
and the system provides a summary based on the
three top-ranking attributes for this user: price,
distance and star rating, which corre-
spond to the first three levels of the option tree.
Next the user asks about cuisine type, which
generates a trade-off since there are no Indian
restaurants (user’s preference) that are cheap, near
the city centre, and of high star rating. The user
then asks about the Scottish option, before switch-
ing back to her preferred cuisine type (Indian). Be-
cause Indian cuisine was in the user’s initial pref-
erence model, a constraint of cuisine=Tndian
was generated when traversing the leftmost branch
of the tree, and this justified not pruning the un-
shaded nodes in the right subtree of Fig. 5, in or-
der to generate the trade-off. However, if the user
had asked about expensive restaurants, then a new
database query would have been made and a new
option tree would have been built. A more com-
plex example is given in the Appendix.
</bodyText>
<sectionHeader confidence="0.997683" genericHeader="method">
6 Experimental Design
</sectionHeader>
<bodyText confidence="0.9954516">
In total 18 subjects interacted with our two sys-
tems. Each participant interacted three times with
the modified TownInfo system, and another three
times with the system that supported our imple-
mentation of the UMSR model (108 dialogues in
</bodyText>
<figureCaption confidence="0.678321">
Figure 5: A sample option tree structure for the
student user of Table 1. Pruned nodes are shown
as shaded.
</figureCaption>
<bodyText confidence="0.999647090909091">
total). The order of the dialogues was randomised
among the subjects. Each experiment took be-
tween 40 and 50 minutes on average.
For each task, subjects were provided with the
user profile and the actual scenario for the spe-
cific task in hand. The tasks were carefully con-
structed so that half of them could be solved with-
out making any trade-offs and the other half re-
quired a trade-off to be made. At the end of each
task the subjects had to fill out a questionnaire with
10 questions on a 7-point Likert scale. They were
also asked if they had been able to accomplish the
given task (perceived task completion), i.e., to find
a suitable restaurant for the scenario and user pro-
file in hand. Finally, after each task they had to
provide the name(s) of the restaurants they chose
for the task. The name(s) stated for this task were
then used to compare perceived task completion
with actual task completion. At the end of each
task with the UMSR system, the profiles were re-
set to the default attribute values and ranks.
Both systems had identical software configura-
tions, i.e., they only differed in the information
presentation component. Yet another important
feature was that the UMSR based model did not
accept multiple attributes in a single query. So
for instance the user could not ask “I am look-
ing for a moderately priced restaurant near the city
centre that serves Italian food”. This seemed to
be a major shortcoming of the UMSR based sys-
tem compared to the TownInfo system with se-
quential information presentation. However, as we
will see in the following, even with this shortcom-
</bodyText>
<page confidence="0.999038">
6
</page>
<table confidence="0.999578">
System U CC CF A E
UMSR-all 5.04 4.65 3.22 3.66 4.69
TownInfo-all 4.87 4.04 2.93 3.20 3.59
UMSR-with TO 4.74 4.59 2.67 3.26 4.15
TownInfo-with TO 4.59 3.41 2.74 2.33 2.70
UMSR-no TO 5.33 4.70 3.78 4.08 5.22
TownInfo-no TO 5.15 4.67 3.11 4.07 4.48
</table>
<tableCaption confidence="0.8740766">
Table 2: Average scores of the question-
naires for all dialogues, dialogues with trade-
offs (with TO) and dialogues without trade-offs
(no TO) (U=understandability, CC=conciseness,
CF=confidence, A=accessibility, E=efficiency).
</tableCaption>
<bodyText confidence="0.980138333333333">
ing the UMSR approach retained its advantages
and proved more successful than the traditional se-
quential enumeration approach.
</bodyText>
<sectionHeader confidence="0.999886" genericHeader="evaluation">
7 Results
</sectionHeader>
<bodyText confidence="0.999991068181818">
The perceived task completion (PTC) for the
UMSR system and the TownInfo system was
90.74% and 85.19% respectively, and the actual
task completion (ATC) 74.07% and 62.96%. Thus
the UMSR approach led to a relatively better user
confidence in having achieved the task.
The average number of turns was 9.24 for
UMSR compared to 17.78 for TownInfo, which
denotes a significant reduction in the number of
dialogue turns required to accomplish a given
task. This reduction becomes even more promi-
nent when there is a trade-off involved. With such
dialogues, the average number of turns for UMSR
remained almost constant at 9.41, whereas Town-
Info showed an increase reaching up to 24.19.
This huge difference is obviously a significant
improvement in system efficiency and user sat-
isfaction. It also supports our hypothesis that
the UMSR approach can present trade-offs under-
standably. For dialogues without a trade-off the
number of turns was 9.07 for UMSR and 11.37
for TownInfo.
Dialogue duration also showed a great improve-
ment in UMSR over TownInfo (4:49 (m:s) vs.
6:11). The duration however was almost the same
for the two systems when a trade-off existed (4:40
vs. 4:49). This could mean that although the num-
ber of turns in this case is smaller for UMSR, the
length of the generated output is longer, and re-
quires more attention to understand. Yet again in
dialogues without a trade-off, UMSR had a con-
siderably shorter duration than TownInfo (4:57 vs.
7:34).
Average scores of the questionnaires are given
in Table 2.
In response to the question “I thought the way
the system provided information to me was easy
to understand” the average score over all 108 di-
alogues was 5.04 for UMSR and 4.87 for Town-
Info. The preference for UMSR exists for dia-
logues both with and without a trade-off. How-
ever, for all three cases the differences were not
significant (p &gt; 0.05).
Conciseness is the quality of providing a con-
cise overview of all the available options to the
user. The UMSR system was preferred at 4.65
over 4.04 for TownInfo (p = 0.034). The differ-
ence between the two systems is very significant
for dialogues with a trade-off (p &lt; 0.003). How-
ever, for dialogues without a trade-off p = 0.92.
This was predictable as the main innovation in
UMSR is the ability to present trade-offs in a con-
cise and understandable way, hence the significant
difference for the dialogues with trade-offs.
To evaluate their confidence in having heard all
the relevant options, the subjects were asked to
rate the statement “I thought there were better op-
tions for my request than what the system gave
me”. Because of the negative nature of the ques-
tion, the Likert scale was inverted before analysis.
The average score was 3.22 and 2.93 for UMSR
and TownInfo respectively. This indicates that
the users have slightly more confidence in hav-
ing heard all the relevant options with the UMSR
system, although this difference is not significant
(p &gt; 0.05). For dialogues with a trade-off, the
average confidence score was slightly better for
TownInfo (2.74 vs. 2.67), but not significant (p =
0.8). However, there is a significant difference for
dialogues without a trade-off (p &lt; 0.03). An-
other notable issue is the overall low scores for the
cases with a trade-off. This signifies that perhaps
more information needs to be given to the user
for dialogue turns describing a trade-off. A care-
ful balance needs to be drawn between concise-
ness and comprehensiveness in these cases. This
however, will obviously increase dialogue dura-
tion, and might affect understandability.
By accessibility, we mean ease of use and
communication with the system. The scores for
UMSR and TownInfo were 3.66 and 3.20 respec-
tively (p = 0.18). A more significant difference
in accessibility was noted for dialogues with a
trade-off (p = 0.008). Again it seemed that users
preferred UMSR when it came down to dealing
with trade-offs. However, the accessibility scores
for dialogues without a trade-off were almost the
same (p = 0.92).
</bodyText>
<page confidence="0.997699">
7
</page>
<bodyText confidence="0.999962090909091">
Efficiency is the quality of enabling users to
find the optimal option quickly. The statement
“In this task, the system allowed me to find the
optimal restaurant quickly”, resulted in an aver-
age score of 4.69 for UMSR vs. 3.59 for Town-
Info (p = 0.002). Once again, a significant dif-
ference was noted for dialogues with a trade-off,
with 4.15 and 2.70 for UMSR and TownInfo re-
spectively (p = 0.004). However, the difference
for dialogues without a trade-off was not signifi-
cant (p = 0.12).
</bodyText>
<sectionHeader confidence="0.997386" genericHeader="conclusions">
8 Conclusions and Future Work
</sectionHeader>
<bodyText confidence="0.999955411764706">
In this paper, we evaluated the effectiveness of the
UMSR approach in information presentation in a
full end-to-end dialogue system. The UMSR ap-
proach was compared with the traditional sequen-
tial enumeration of options. Our results verified
our hypothesis that the UMSR approach presents a
better overview of the trade-offs within the option
space, and improves user experience and confi-
dence in the system. Furthermore, with the UMSR
approach there is a significant reduction in the
number of dialogue turns required to complete the
task. The results also showed that UMSR specifi-
cally outperforms TownInfo when there is a trade-
off involved. The UMSR results presented statisti-
cally significant improvement for conciseness, ac-
cessibility, and efficiency. Overall, subjects were
more satisfied with the UMSR system. When they
were asked if they would use the system again as
a deployed product the score was 4.74 for UMSR
and 3.70 for TownInfo (p = 0.002), further veri-
fying that the users preferred the UMSR approach
over the sequential enumeration of TownInfo.
In future work we intend to make a number of
improvements. For example in the turn genera-
tion algorithm, we will optimise the generated out-
put in an effort to strike a balance between un-
derstandability and complexity. Another impor-
tant issue is to modify the UMSR algorithm so that
it can accept multiple attributes in a single query.
Moreover, we will perform experiments with both
speech input and output. Finally, we will com-
pare the UMSR approach with the UM and SR ap-
proaches in the same setting, i.e., a full end-to-end
SDS.
</bodyText>
<sectionHeader confidence="0.998705" genericHeader="acknowledgments">
Acknowledgements
</sectionHeader>
<bodyText confidence="0.999970416666667">
This paper is based on a research experiment con-
ducted at the University of Edinburgh. Paksima
was funded by the European Commission Eras-
mus Mundus scholarship program. Georgila was
partially funded by the Wellcome Trust VIP Award
and is currently funded by the U.S. Army Re-
search, Development, and Engineering Command
(RDECOM). The content does not necessarily re-
flect the position or the policy of the U.S. Gov-
ernment, and no official endorsement should be
inferred. The authors thank the three anonymous
reviewers.
</bodyText>
<sectionHeader confidence="0.999427" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999848738095238">
G. Carenini and J.D. Moore. 2001. An empirical study
of the influence of user tailoring on evaluative argu-
ment effectiveness. In Proc. of IJCAI.
G. Chung. 2004. Developing a flexible spoken dialog
system using simulation. In Proc. of ACL.
V. Demberg and J.D. Moore. 2006. Information pre-
sentation in spoken dialogue systems. In Proc. of
EACL.
S. Elzer, J. Chu-Carroll, and S. Carberry. 1994. Recog-
nizing and utilizing user preferences in collaborative
consultation dialogues. In Proc. of UM ’94.
J. Henderson, O. Lemon, and K. Georgila. 2008. Hy-
brid reinforcement/supervised learning of dialogue
policies from fixed datasets. Computational Lin-
guistics, 34(4):487–511.
O. Lemon, K. Georgila, J. Henderson, and M. Stut-
tle. 2006. An isu dialogue system exhibiting re-
inforcement learning of dialogue policies: generic
slot-filling in the talk in-car system. In Proc. of
EACL.
J.D. Moore, M.E. Foster, O. Lemon, and M. White.
2004. Generating tailored, comparative descriptions
in spoken dialogue. In Proc. of FLAIRS.
J. Polifroni and M. Walker. 2008. Intensional sum-
maries as cooperative responses in dialogue: Au-
tomation and evaluation. In Proc. ofACL–HLT.
J. Polifroni, G. Chung, and M. Walker. 2003. To-
wards automatic generation of mixed-initiative di-
alogue systems from web content. In Proc. of Eu-
rospeech.
M.A. Walker, R.J. Passonneau, and J.E. Boland. 2001.
Quantitative and qualitative evaluation of darpa
communicator spoken dialogue systems. In Proc.
ofACL.
M. Walker, S. Whittaker, A. Stent, P. Maloor, J.D.
Moore, M. Johnston, and G. Vasireddy. 2004. Gen-
eration and evaluation of user tailored responses in
dialogue. Cognitive Science, 28:811–840.
A. Winterboer and J.D. Moore. 2007. Evaluating in-
formation presentation strategies for spoken recom-
mendations. In RecSys ’07: Proc. of the 2007 ACM
conference on Recommender systems.
</reference>
<page confidence="0.999418">
8
</page>
<sectionHeader confidence="0.992743" genericHeader="references">
Appendix
</sectionHeader>
<subsectionHeader confidence="0.85991">
Option Tree A for User Model A is built.
</subsectionHeader>
<bodyText confidence="0.750260875">
U: I’d like to get some food tonight.
S: I found 17 restaurants with a high star rating. Only 8 of them provide good service quality, out of which
only 3 serve Scottish food. I also have information about distance and price.
U: Are they close to the city centre?
S: I found 3 restaurants that are located far from the city centre. 1 of them is cheap and 2 are expensive.
They all have a high star rating, provide good service quality, and serve Scottish food. For a restaurant near
the city centre you would have to go for average service quality.
U: How about French cuisine?
</bodyText>
<table confidence="0.282283357142857">
The System cannot answer the query because the “French”cuisine branches of Option Tree A have been
pruned and their nodes are shown as shaded.
User Model A changes to User Model B (situational query).
Option Tree B for User Model B is built.
S: I found 10 restaurants that serve French food. Only 5 of them have a high star rating, out of which only 3
provide good service quality. I also have information about distance and price.
U: Tell me about the distance from the city centre.
S: Only 1 of them is located near the city centre and is inexpensive. It serves French food, has a high star rating,
and provides good service quality.
U: Tell me about it.
S: La Bagatelle’s dishes include a starter of roast pigeon with canelloni of shiitake mushroom, and a main course
of panfried veal with prunes.
U: That’s great. I’ll take it.
. . .
</table>
<figureCaption confidence="0.9969265">
Figure 6: Example dialogue with our UMSR approach for a business person, User Model A (Table 3)
and User Model B (Table 4), Option Tree A (Fig. 7) and Option Tree B (Fig. 8).
</figureCaption>
<table confidence="0.998497166666667">
UserID Attribute Value Rank
2 Star High 1.00
2 Service Good 2.00
2 Cuisine Scottish 3.00
2 Distance Near 4.00
2 Price Don’t Care 5.00
</table>
<tableCaption confidence="0.993468">
Table 3: Sample user model for a business person (User Model A).
</tableCaption>
<table confidence="0.9989565">
UserID Attribute Value Rank
2 Cuisine French 0.95
2 Star High 1.00
2 Service Good 2.00
2 Distance Near 4.00
2 Price Don’t Care 5.00
</table>
<tableCaption confidence="0.93084">
Table 4: Modified user model for a business person after the situational query “I’d like a French restau-
rant” (User Model B).
</tableCaption>
<page confidence="0.98906">
9
</page>
<figureCaption confidence="0.9993">
Figure 7: Option tree structure (Option Tree A) corresponding to the User Model A of Table 3. Pruned
nodes are shown as shaded.
Figure 8: Option tree structure (Option Tree B) corresponding to the User Model B of Table 4. Pruned
nodes are shown as shaded.
</figureCaption>
<page confidence="0.987633">
10
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.647310">
<title confidence="0.9997975">Evaluating the Effectiveness of Information in a Full End-To-End Dialogue System</title>
<author confidence="0.957315">Taghi</author>
<affiliation confidence="0.996183">Enterprise Search</affiliation>
<address confidence="0.999579">D-81669 Munich, Germany</address>
<author confidence="0.882751">Kallirroi Georgila</author>
<affiliation confidence="0.99921">Institute for Creative Technologies University of Southern California</affiliation>
<address confidence="0.999025">Marina del Rey, CA 90292, USA</address>
<author confidence="0.990746">D Johanna</author>
<affiliation confidence="0.999419">School of University of</affiliation>
<address confidence="0.791804">Edinburgh, EH8 9AB,</address>
<email confidence="0.996925">j.moore@ed.ac.uktaghi.paksima@microsoft.comkgeorgila@ict.usc.edu</email>
<abstract confidence="0.999460916666667">Recent work on information presentation in dialogue systems combines user modelling (UM) and stepwise refinement through clustering and summarisation (SR) in the UMSR approach. An evaluation in which participants rated dialogue transcripts showed that UMSR presents complex trade-offs understandably, provides users with a good overview of their options, and increases users’ confidence that all relevant options have been presented (Demberg and Moore, 2006). In this paper, we evaluate the effectiveness of the UMSR approach in a more realistic setting, by incorporating this information presentation technique into a full endto-end dialogue system in the city information domain, and comparing it with the traditional approach of presenting information sequentially. Our results suggest that despite complications associated with a real dialogue system setting, the UMSR model retains its advantages.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>G Carenini</author>
<author>J D Moore</author>
</authors>
<title>An empirical study of the influence of user tailoring on evaluative argument effectiveness.</title>
<date>2001</date>
<booktitle>In Proc. of IJCAI.</booktitle>
<contexts>
<context position="6365" citStr="Carenini and Moore, 2001" startWordPosition="995" endWordPosition="998">dard sequential enumeration approach and the UMSR approach. In Sec. 4 we describe how we implemented the UMSR approach. Then in Sec. 5 we provide an example. In Sec. 6 we describe our experimental design and in Sec. 7 our results. Finally in Sec. 8, we present our conclusions. 2 Previous Approaches As noted above, a number of approaches to information presentation in SDS have recently been proposed. The user-model based (UM) approach employs a model of the users preferences and decision theory techniques to identify and present a small number of options that best match the user’s preferences (Carenini and Moore, 2001; Walker et al., 2004; Moore et al., 2004). Fig. 2 shows a sample presentation generated using the UM approach for a student user who cares most about price and flying direct. There’s a direct flight on BMI with a good price. It arrives at four ten p.m. and costs a hundred and twelve pounds. The cheapest flight is on Ryanair. It arrives at twelve forty-five p.m. and costs just fifty pounds, but it requires a connection in Dublin. Figure 2: Example of information presentation based on the UM approach, from (Moore et al., 2004). Although the UM approach enables a concise presentation of a small </context>
</contexts>
<marker>Carenini, Moore, 2001</marker>
<rawString>G. Carenini and J.D. Moore. 2001. An empirical study of the influence of user tailoring on evaluative argument effectiveness. In Proc. of IJCAI.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Chung</author>
</authors>
<title>Developing a flexible spoken dialog system using simulation.</title>
<date>2004</date>
<booktitle>In Proc. of ACL.</booktitle>
<contexts>
<context position="3388" citStr="Chung, 2004" startWordPosition="527" endWordPosition="528">is important for several reasons: (1) to avoid overburdening the user’s memory by presenting too many options; (2) to ensure that the user is given an overview of the available option space so that the optimal option can be found; and (3) to minimise the number of dialogue turns (hence dialogue duration) required for the user to find an acceptable option. As Walker et al. (2001) showed, failing to meet this third goal may reduce overall user satisfaction. Recently several approaches have been proposed to overcome the shortcomings of the sequential enumeration strategy (Polifroni et al., 2003; Chung, 2004; Demberg and Moore, 2006; Polifroni and Walker, 2008). Because of the complexity of building a complete end-to-end SDS, these approaches have been evaluated using an “overhearer” methodology in which dialogues are either hand-crafted or simulated and then presented to subjects, either as textual transcripts Proceedings of SIGDIAL 2009: the 10th Annual Meeting of the Special Interest Group in Discourse and Dialogue, pages 1–10, Queen Mary University of London, September 2009. c�2009 Association for Computational Linguistics 1 (Demberg and Moore, 2006; Polifroni and Walker, 2008) or audio recor</context>
<context position="7772" citStr="Chung, 2004" startWordPosition="1238" endWordPosition="1239">vant options to consider (e.g., all Italian restaurants in New York City), there may be a large number of options that fit the user model, making it difficult to narrow down the number of options. In addition, users may not be able to provide constraints until they are presented with more details concerning the option space. Moreover, the system does not provide an overview of the available options, which may lead to the user’s actual or perceived missing out on possibly better alternatives. An alternative approach, which we call the summarise and refine approach (SR) (Polifroni et al., 2003; Chung, 2004) structures large datasets for summarisation and successive refinement. It supports the user in narrowing in on a suitable option by grouping the options in the database into clusters of options with similar features. The system can then summarise the common attributes of the options and thus suggest further refinement constraints to the user. In this content structuring approach, the prompts presented to the user and the order in which they appear, are determined at runtime based on an algorithm that computes the most useful set of attributes, as dictated by the set of options that satisfy th</context>
</contexts>
<marker>Chung, 2004</marker>
<rawString>G. Chung. 2004. Developing a flexible spoken dialog system using simulation. In Proc. of ACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>V Demberg</author>
<author>J D Moore</author>
</authors>
<title>Information presentation in spoken dialogue systems.</title>
<date>2006</date>
<booktitle>In Proc. of EACL.</booktitle>
<contexts>
<context position="905" citStr="Demberg and Moore, 2006" startWordPosition="119" endWordPosition="122">USA Johanna D. Moore School of Informatics University of Edinburgh Edinburgh, EH8 9AB, UK j.moore@ed.ac.uk taghi.paksima@microsoft.com kgeorgila@ict.usc.edu Abstract Recent work on information presentation in dialogue systems combines user modelling (UM) and stepwise refinement through clustering and summarisation (SR) in the UMSR approach. An evaluation in which participants rated dialogue transcripts showed that UMSR presents complex trade-offs understandably, provides users with a good overview of their options, and increases users’ confidence that all relevant options have been presented (Demberg and Moore, 2006). In this paper, we evaluate the effectiveness of the UMSR approach in a more realistic setting, by incorporating this information presentation technique into a full endto-end dialogue system in the city information domain, and comparing it with the traditional approach of presenting information sequentially. Our results suggest that despite complications associated with a real dialogue system setting, the UMSR model retains its advantages. 1 Introduction Spoken dialogue systems (SDS) that help users find a desired option (e.g., flight, restaurant, movie) from the set of options satisfying the</context>
<context position="3413" citStr="Demberg and Moore, 2006" startWordPosition="529" endWordPosition="532">for several reasons: (1) to avoid overburdening the user’s memory by presenting too many options; (2) to ensure that the user is given an overview of the available option space so that the optimal option can be found; and (3) to minimise the number of dialogue turns (hence dialogue duration) required for the user to find an acceptable option. As Walker et al. (2001) showed, failing to meet this third goal may reduce overall user satisfaction. Recently several approaches have been proposed to overcome the shortcomings of the sequential enumeration strategy (Polifroni et al., 2003; Chung, 2004; Demberg and Moore, 2006; Polifroni and Walker, 2008). Because of the complexity of building a complete end-to-end SDS, these approaches have been evaluated using an “overhearer” methodology in which dialogues are either hand-crafted or simulated and then presented to subjects, either as textual transcripts Proceedings of SIGDIAL 2009: the 10th Annual Meeting of the Special Interest Group in Discourse and Dialogue, pages 1–10, Queen Mary University of London, September 2009. c�2009 Association for Computational Linguistics 1 (Demberg and Moore, 2006; Polifroni and Walker, 2008) or audio recordings (Walker et al., 200</context>
<context position="11236" citStr="Demberg and Moore, 2006" startWordPosition="1828" endWordPosition="1831"> system to save time by omitting options that are not of any potential interest to the user. Once pruning is complete, each branch of the tree describes a possible refinement path, and thus can be used to direct dialogue flow. Trade-offs between alternative options are presented explicitly in order to provide the user with a better overview of the option space. In addition, to give users confidence that they are being presented with all of the relevant options, a brief account of all the remaining (irrelevant) options is also provided. For a more detailed discussion of the UMSR approach, see (Demberg and Moore, 2006). In Sec. 4 we describe how we employed the UMSR approach in our system. 3 The TownInfo System The TownInfo SDS was developed as part of the EC project TALK (Lemon et al., 2006). Users can search for hotels, bars and restaurants in an artificial town. The system supports two dialogue strategies, one hand-crafted and another learnt using Reinforcement Learning (Henderson et al., 2008). For the current experiment we used the hand-crafted strategy. Natural language understanding is performed using a keyword-based parser and natural language generation is based on templates. The information presen</context>
<context position="12755" citStr="Demberg and Moore, 2006" startWordPosition="2072" endWordPosition="2075">ognition accuracy or intelligibility due to poor speech synthesis. Of course, as we mention in Sec. 8, the next step would be to perform an experiment with speech input/output. For our current experiment we focussed on restaurant recommendations and the TownInfo database had to be extended to include a much wider range of options to provide more realistic information presentation scenarios. The database used in our experiments contains a total of 80 restaurants in Edinburgh, UK. 4 The UMSR Algorithm This section briefly describes our implementation of the UMSR algorithm; for more details see (Demberg and Moore, 2006). Sec. 5 provides an example for clarity. 4.1 The User Model The user model contains the user’s ranking and preferred values for the relevant attributes in the restaurant domain: price, distance, star rating, service rating, and cuisine type. Table 1 shows a sample user model. The Rank field indicates the relative importance of the attributes for the user, with 1 being most important. The Value field indicates the user’s preferred value for each attribute.1 1If two attributes in a user model have identical ranks, the order of the preferences is used to decide which has a higher priority. 3 Use</context>
<context position="15504" citStr="Demberg and Moore, 2006" startWordPosition="2546" endWordPosition="2549">he dialogue continues with a summary of the available options based on this new tree. Note that for individual models, i.e. user models that are designed for individual people and not for classes of users (student or business person), some queries could justify situational changes and some could indicate permanent (or at least less temporary) changes to the user model (e.g., ”Are there any nicer restaurants? I got a new job”). In our experiment we use only class models and we do not allow permanent changes to the user model. 4.3 The Clustering Algorithm Following (Polifroni et al., 2003) and (Demberg and Moore, 2006), we used agglomerative groupaverage clustering to automatically group values for each attribute. The algorithm begins by assigning each unique attribute value to its own bin, and successively merging bins whose means are most similar until a stopping criterion (a target of no more than three clusters, in our implementation) is met. The bins are then assigned predefined labels, e.g., “cheap”, “moderately priced” and “expensive” for price. Clustering attribute values with this algorithm allows for database-dependent labelling. Therefore, a restaurant with a price of £35 might be considered as e</context>
<context position="9802" citStr="Demberg &amp; Moore (2006)" startWordPosition="1586" endWordPosition="1589">y, the North End, South Boston and the South End. Figure 3: Sample dialogue between simulator (M) and SR system (S), from (Polifroni et al., 2003). process. Because the user’s preferences are not taken into account, the clusters may contain many irrelevant entities, which must be filtered out successively with each refinement step. Second, if there is no optimal solution, exploration of tradeoffs between options can be difficult. Finally, the chosen clusters may be based on attributes that are irrelevant for the specific user. In an attempt to combine the benefits of the UM and SR approaches, Demberg &amp; Moore (2006) devised the user-model based summarise and refine (UMSR) approach to information presentation. This approach first clusters the values of each attribute in order to group them so that the options can be summarised more easily later, and labels like ”cheap”, ”moderate”, ”expensive” can be assigned to values of continuous categories such as “price”. The system then structures options into an option tree based on the ranking of attributes in the user model, the options returned from the database, and the attribute-value clustering. The resulting option tree determines how different options relat</context>
<context position="17894" citStr="Demberg &amp; Moore (2006)" startWordPosition="2950" endWordPosition="2953"> in the context of the example of Sec. 5. The numbers in the nodes indicate how many options are represented by the node. Given an option tree ordered in this way, to find the best available options, the system traverses the tree in a depth-first fashion starting from the root and selecting the leftmost branch at each node. 4.5 Pruning the Option Tree The goal of the UMSR algorithm is to present an overview of the available options, that are most relevant to the user’s preferences, concisely and understandably. To determine the relevance of options, we use the notion of “dominance” defined in Demberg &amp; Moore (2006). Dominant options are those for which there is no other option in the dataset that is better on all attributes. A domi4 nated option is in all respects equal to or worse than some other option in the relevant subset of the database; it should not be of interest for any rational user. The pruning algorithm follows Demberg &amp; Moore (2006), and thus we summarise it only briefly here. The algorithm operates directly on the ordered option tree, using the tree structure so that it can efficiently determine dominance relations without having to compare each pair of options. The algorithm traverses th</context>
</contexts>
<marker>Demberg, Moore, 2006</marker>
<rawString>V. Demberg and J.D. Moore. 2006. Information presentation in spoken dialogue systems. In Proc. of EACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Elzer</author>
<author>J Chu-Carroll</author>
<author>S Carberry</author>
</authors>
<title>Recognizing and utilizing user preferences in collaborative consultation dialogues.</title>
<date>1994</date>
<booktitle>In Proc. of UM ’94.</booktitle>
<contexts>
<context position="13559" citStr="Elzer et al. (1994)" startWordPosition="2211" endWordPosition="2214"> distance, star rating, service rating, and cuisine type. Table 1 shows a sample user model. The Rank field indicates the relative importance of the attributes for the user, with 1 being most important. The Value field indicates the user’s preferred value for each attribute.1 1If two attributes in a user model have identical ranks, the order of the preferences is used to decide which has a higher priority. 3 UserID Attribute Value Rank 1 Price Cheap 1.00 1 Distance Near 2.00 1 Star High 3.00 1 Cuisine Indian 4.00 1 Service Don’t Care 5.00 Table 1: Sample user model for a student. According to Elzer et al. (1994), some preferences are enough to reject options outright (and therefore are more like goals) whereas others are more purely like preferences (to be weighed and ranked). Here we do not make such a distinction. 4.2 Adapting to Changes to the User Model In the original design, the user model was created at the outset and not modified during the dialogue. However, during initial piloting of the system, we found that this design did not support “situational preferences”. For example, consider the user model for the student in Table 1. This user normally prefers to have Indian food if she has the op</context>
</contexts>
<marker>Elzer, Chu-Carroll, Carberry, 1994</marker>
<rawString>S. Elzer, J. Chu-Carroll, and S. Carberry. 1994. Recognizing and utilizing user preferences in collaborative consultation dialogues. In Proc. of UM ’94.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Henderson</author>
<author>O Lemon</author>
<author>K Georgila</author>
</authors>
<title>Hybrid reinforcement/supervised learning of dialogue policies from fixed datasets.</title>
<date>2008</date>
<journal>Computational Linguistics,</journal>
<volume>34</volume>
<issue>4</issue>
<contexts>
<context position="11622" citStr="Henderson et al., 2008" startWordPosition="1893" endWordPosition="1896">ers confidence that they are being presented with all of the relevant options, a brief account of all the remaining (irrelevant) options is also provided. For a more detailed discussion of the UMSR approach, see (Demberg and Moore, 2006). In Sec. 4 we describe how we employed the UMSR approach in our system. 3 The TownInfo System The TownInfo SDS was developed as part of the EC project TALK (Lemon et al., 2006). Users can search for hotels, bars and restaurants in an artificial town. The system supports two dialogue strategies, one hand-crafted and another learnt using Reinforcement Learning (Henderson et al., 2008). For the current experiment we used the hand-crafted strategy. Natural language understanding is performed using a keyword-based parser and natural language generation is based on templates. The information presentation is sequential. An example is given in Fig. 1, taken from the modified version of TownInfo for the current experiment. Although the original TownInfo system supported speech input and speech output, here we use text input/output to make sure that our results are not influenced by poor recognition accuracy or intelligibility due to poor speech synthesis. Of course, as we mention</context>
</contexts>
<marker>Henderson, Lemon, Georgila, 2008</marker>
<rawString>J. Henderson, O. Lemon, and K. Georgila. 2008. Hybrid reinforcement/supervised learning of dialogue policies from fixed datasets. Computational Linguistics, 34(4):487–511.</rawString>
</citation>
<citation valid="true">
<authors>
<author>O Lemon</author>
<author>K Georgila</author>
<author>J Henderson</author>
<author>M Stuttle</author>
</authors>
<title>An isu dialogue system exhibiting reinforcement learning of dialogue policies: generic slot-filling in the talk in-car system.</title>
<date>2006</date>
<booktitle>In Proc. of EACL.</booktitle>
<contexts>
<context position="2638" citStr="Lemon et al., 2006" startWordPosition="399" endWordPosition="402">ning area, with simple floral displays and leather seating. It serves Indian cuisine. It is located in the city centre. The average price is £24 per person. Number 2: Saffrani’s decor is modern, the dining room wee, though the menu is enormous, and the atmosphere charming. It offers new Indian dishes never before seen in Edinburgh. It serves Indian, seafood cuisine. It is located in the city centre. The average price is £28 per person. Number 3: Britannia Spice ... Figure 1: Example of sequential information presentation in the city information domain (modified version of the TownInfo system (Lemon et al., 2006)). and reduced user satisfaction. Thus a major challenge in the development of SDS is to improve information presentation algorithms. This is important for several reasons: (1) to avoid overburdening the user’s memory by presenting too many options; (2) to ensure that the user is given an overview of the available option space so that the optimal option can be found; and (3) to minimise the number of dialogue turns (hence dialogue duration) required for the user to find an acceptable option. As Walker et al. (2001) showed, failing to meet this third goal may reduce overall user satisfaction. R</context>
<context position="11413" citStr="Lemon et al., 2006" startWordPosition="1862" endWordPosition="1865">nd thus can be used to direct dialogue flow. Trade-offs between alternative options are presented explicitly in order to provide the user with a better overview of the option space. In addition, to give users confidence that they are being presented with all of the relevant options, a brief account of all the remaining (irrelevant) options is also provided. For a more detailed discussion of the UMSR approach, see (Demberg and Moore, 2006). In Sec. 4 we describe how we employed the UMSR approach in our system. 3 The TownInfo System The TownInfo SDS was developed as part of the EC project TALK (Lemon et al., 2006). Users can search for hotels, bars and restaurants in an artificial town. The system supports two dialogue strategies, one hand-crafted and another learnt using Reinforcement Learning (Henderson et al., 2008). For the current experiment we used the hand-crafted strategy. Natural language understanding is performed using a keyword-based parser and natural language generation is based on templates. The information presentation is sequential. An example is given in Fig. 1, taken from the modified version of TownInfo for the current experiment. Although the original TownInfo system supported spee</context>
</contexts>
<marker>Lemon, Georgila, Henderson, Stuttle, 2006</marker>
<rawString>O. Lemon, K. Georgila, J. Henderson, and M. Stuttle. 2006. An isu dialogue system exhibiting reinforcement learning of dialogue policies: generic slot-filling in the talk in-car system. In Proc. of EACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J D Moore</author>
<author>M E Foster</author>
<author>O Lemon</author>
<author>M White</author>
</authors>
<title>Generating tailored, comparative descriptions in spoken dialogue.</title>
<date>2004</date>
<booktitle>In Proc. of FLAIRS.</booktitle>
<contexts>
<context position="6407" citStr="Moore et al., 2004" startWordPosition="1003" endWordPosition="1006">SR approach. In Sec. 4 we describe how we implemented the UMSR approach. Then in Sec. 5 we provide an example. In Sec. 6 we describe our experimental design and in Sec. 7 our results. Finally in Sec. 8, we present our conclusions. 2 Previous Approaches As noted above, a number of approaches to information presentation in SDS have recently been proposed. The user-model based (UM) approach employs a model of the users preferences and decision theory techniques to identify and present a small number of options that best match the user’s preferences (Carenini and Moore, 2001; Walker et al., 2004; Moore et al., 2004). Fig. 2 shows a sample presentation generated using the UM approach for a student user who cares most about price and flying direct. There’s a direct flight on BMI with a good price. It arrives at four ten p.m. and costs a hundred and twelve pounds. The cheapest flight is on Ryanair. It arrives at twelve forty-five p.m. and costs just fifty pounds, but it requires a connection in Dublin. Figure 2: Example of information presentation based on the UM approach, from (Moore et al., 2004). Although the UM approach enables a concise presentation of a small number of options, highlighting the ways i</context>
</contexts>
<marker>Moore, Foster, Lemon, White, 2004</marker>
<rawString>J.D. Moore, M.E. Foster, O. Lemon, and M. White. 2004. Generating tailored, comparative descriptions in spoken dialogue. In Proc. of FLAIRS.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Polifroni</author>
<author>M Walker</author>
</authors>
<title>Intensional summaries as cooperative responses in dialogue: Automation and evaluation.</title>
<date>2008</date>
<booktitle>In Proc. ofACL–HLT.</booktitle>
<contexts>
<context position="3442" citStr="Polifroni and Walker, 2008" startWordPosition="533" endWordPosition="536">to avoid overburdening the user’s memory by presenting too many options; (2) to ensure that the user is given an overview of the available option space so that the optimal option can be found; and (3) to minimise the number of dialogue turns (hence dialogue duration) required for the user to find an acceptable option. As Walker et al. (2001) showed, failing to meet this third goal may reduce overall user satisfaction. Recently several approaches have been proposed to overcome the shortcomings of the sequential enumeration strategy (Polifroni et al., 2003; Chung, 2004; Demberg and Moore, 2006; Polifroni and Walker, 2008). Because of the complexity of building a complete end-to-end SDS, these approaches have been evaluated using an “overhearer” methodology in which dialogues are either hand-crafted or simulated and then presented to subjects, either as textual transcripts Proceedings of SIGDIAL 2009: the 10th Annual Meeting of the Special Interest Group in Discourse and Dialogue, pages 1–10, Queen Mary University of London, September 2009. c�2009 Association for Computational Linguistics 1 (Demberg and Moore, 2006; Polifroni and Walker, 2008) or audio recordings (Walker et al., 2004), for rating. The general c</context>
</contexts>
<marker>Polifroni, Walker, 2008</marker>
<rawString>J. Polifroni and M. Walker. 2008. Intensional summaries as cooperative responses in dialogue: Automation and evaluation. In Proc. ofACL–HLT.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Polifroni</author>
<author>G Chung</author>
<author>M Walker</author>
</authors>
<title>Towards automatic generation of mixed-initiative dialogue systems from web content.</title>
<date>2003</date>
<booktitle>In Proc. of Eurospeech.</booktitle>
<contexts>
<context position="3375" citStr="Polifroni et al., 2003" startWordPosition="523" endWordPosition="526">tation algorithms. This is important for several reasons: (1) to avoid overburdening the user’s memory by presenting too many options; (2) to ensure that the user is given an overview of the available option space so that the optimal option can be found; and (3) to minimise the number of dialogue turns (hence dialogue duration) required for the user to find an acceptable option. As Walker et al. (2001) showed, failing to meet this third goal may reduce overall user satisfaction. Recently several approaches have been proposed to overcome the shortcomings of the sequential enumeration strategy (Polifroni et al., 2003; Chung, 2004; Demberg and Moore, 2006; Polifroni and Walker, 2008). Because of the complexity of building a complete end-to-end SDS, these approaches have been evaluated using an “overhearer” methodology in which dialogues are either hand-crafted or simulated and then presented to subjects, either as textual transcripts Proceedings of SIGDIAL 2009: the 10th Annual Meeting of the Special Interest Group in Discourse and Dialogue, pages 1–10, Queen Mary University of London, September 2009. c�2009 Association for Computational Linguistics 1 (Demberg and Moore, 2006; Polifroni and Walker, 2008) o</context>
<context position="7758" citStr="Polifroni et al., 2003" startWordPosition="1234" endWordPosition="1237">reds of potentially relevant options to consider (e.g., all Italian restaurants in New York City), there may be a large number of options that fit the user model, making it difficult to narrow down the number of options. In addition, users may not be able to provide constraints until they are presented with more details concerning the option space. Moreover, the system does not provide an overview of the available options, which may lead to the user’s actual or perceived missing out on possibly better alternatives. An alternative approach, which we call the summarise and refine approach (SR) (Polifroni et al., 2003; Chung, 2004) structures large datasets for summarisation and successive refinement. It supports the user in narrowing in on a suitable option by grouping the options in the database into clusters of options with similar features. The system can then summarise the common attributes of the options and thus suggest further refinement constraints to the user. In this content structuring approach, the prompts presented to the user and the order in which they appear, are determined at runtime based on an algorithm that computes the most useful set of attributes, as dictated by the set of options t</context>
<context position="9326" citStr="Polifroni et al., 2003" startWordPosition="1509" endWordPosition="1512">, many turns may be required during the refinement 2 M: What restaurants do you have? S: I have found 983 restaurants. Most of them are located in Boston and Cambridge. There are 32 choices for cuisine. I also have information about price range. M: Okay tell me about the ones in Boston. S: I have found 401 restaurants in Boston. There are 29 choices for cuisine. M: Do you have any that serve seafood? S: I have found 19 seafood restaurants. They are predominantly in Back Bay, the North End, South Boston and the South End. Figure 3: Sample dialogue between simulator (M) and SR system (S), from (Polifroni et al., 2003). process. Because the user’s preferences are not taken into account, the clusters may contain many irrelevant entities, which must be filtered out successively with each refinement step. Second, if there is no optimal solution, exploration of tradeoffs between options can be difficult. Finally, the chosen clusters may be based on attributes that are irrelevant for the specific user. In an attempt to combine the benefits of the UM and SR approaches, Demberg &amp; Moore (2006) devised the user-model based summarise and refine (UMSR) approach to information presentation. This approach first clusters</context>
<context position="15474" citStr="Polifroni et al., 2003" startWordPosition="2541" endWordPosition="2544">ing the new user model, and the dialogue continues with a summary of the available options based on this new tree. Note that for individual models, i.e. user models that are designed for individual people and not for classes of users (student or business person), some queries could justify situational changes and some could indicate permanent (or at least less temporary) changes to the user model (e.g., ”Are there any nicer restaurants? I got a new job”). In our experiment we use only class models and we do not allow permanent changes to the user model. 4.3 The Clustering Algorithm Following (Polifroni et al., 2003) and (Demberg and Moore, 2006), we used agglomerative groupaverage clustering to automatically group values for each attribute. The algorithm begins by assigning each unique attribute value to its own bin, and successively merging bins whose means are most similar until a stopping criterion (a target of no more than three clusters, in our implementation) is met. The bins are then assigned predefined labels, e.g., “cheap”, “moderately priced” and “expensive” for price. Clustering attribute values with this algorithm allows for database-dependent labelling. Therefore, a restaurant with a price o</context>
</contexts>
<marker>Polifroni, Chung, Walker, 2003</marker>
<rawString>J. Polifroni, G. Chung, and M. Walker. 2003. Towards automatic generation of mixed-initiative dialogue systems from web content. In Proc. of Eurospeech.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M A Walker</author>
<author>R J Passonneau</author>
<author>J E Boland</author>
</authors>
<title>Quantitative and qualitative evaluation of darpa communicator spoken dialogue systems.</title>
<date>2001</date>
<booktitle>In Proc. ofACL.</booktitle>
<contexts>
<context position="3158" citStr="Walker et al. (2001)" startWordPosition="489" endWordPosition="492">ntation in the city information domain (modified version of the TownInfo system (Lemon et al., 2006)). and reduced user satisfaction. Thus a major challenge in the development of SDS is to improve information presentation algorithms. This is important for several reasons: (1) to avoid overburdening the user’s memory by presenting too many options; (2) to ensure that the user is given an overview of the available option space so that the optimal option can be found; and (3) to minimise the number of dialogue turns (hence dialogue duration) required for the user to find an acceptable option. As Walker et al. (2001) showed, failing to meet this third goal may reduce overall user satisfaction. Recently several approaches have been proposed to overcome the shortcomings of the sequential enumeration strategy (Polifroni et al., 2003; Chung, 2004; Demberg and Moore, 2006; Polifroni and Walker, 2008). Because of the complexity of building a complete end-to-end SDS, these approaches have been evaluated using an “overhearer” methodology in which dialogues are either hand-crafted or simulated and then presented to subjects, either as textual transcripts Proceedings of SIGDIAL 2009: the 10th Annual Meeting of the </context>
</contexts>
<marker>Walker, Passonneau, Boland, 2001</marker>
<rawString>M.A. Walker, R.J. Passonneau, and J.E. Boland. 2001. Quantitative and qualitative evaluation of darpa communicator spoken dialogue systems. In Proc. ofACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Walker</author>
<author>S Whittaker</author>
<author>A Stent</author>
<author>P Maloor</author>
<author>J D Moore</author>
<author>M Johnston</author>
<author>G Vasireddy</author>
</authors>
<title>Generation and evaluation of user tailored responses in dialogue.</title>
<date>2004</date>
<journal>Cognitive Science,</journal>
<pages>28--811</pages>
<contexts>
<context position="4015" citStr="Walker et al., 2004" startWordPosition="618" endWordPosition="621">rg and Moore, 2006; Polifroni and Walker, 2008). Because of the complexity of building a complete end-to-end SDS, these approaches have been evaluated using an “overhearer” methodology in which dialogues are either hand-crafted or simulated and then presented to subjects, either as textual transcripts Proceedings of SIGDIAL 2009: the 10th Annual Meeting of the Special Interest Group in Discourse and Dialogue, pages 1–10, Queen Mary University of London, September 2009. c�2009 Association for Computational Linguistics 1 (Demberg and Moore, 2006; Polifroni and Walker, 2008) or audio recordings (Walker et al., 2004), for rating. The general consensus from these studies is that users significantly prefer approaches that take their preferences into account. However, because users were not interacting with these SDS, the evaluation criteria were limited to users’ perceptions (e.g., informativeness, good overview of options, confidence in choice, etc.), and metrics such as effectiveness (i.e., actual or perceived task completion) and efficiency (i.e., length of dialogue) could not be assessed. To address this issue, Winterboer and Moore (2007) carried out a Wizard-of-Oz (WOz) study in which users participate</context>
<context position="6386" citStr="Walker et al., 2004" startWordPosition="999" endWordPosition="1002">n approach and the UMSR approach. In Sec. 4 we describe how we implemented the UMSR approach. Then in Sec. 5 we provide an example. In Sec. 6 we describe our experimental design and in Sec. 7 our results. Finally in Sec. 8, we present our conclusions. 2 Previous Approaches As noted above, a number of approaches to information presentation in SDS have recently been proposed. The user-model based (UM) approach employs a model of the users preferences and decision theory techniques to identify and present a small number of options that best match the user’s preferences (Carenini and Moore, 2001; Walker et al., 2004; Moore et al., 2004). Fig. 2 shows a sample presentation generated using the UM approach for a student user who cares most about price and flying direct. There’s a direct flight on BMI with a good price. It arrives at four ten p.m. and costs a hundred and twelve pounds. The cheapest flight is on Ryanair. It arrives at twelve forty-five p.m. and costs just fifty pounds, but it requires a connection in Dublin. Figure 2: Example of information presentation based on the UM approach, from (Moore et al., 2004). Although the UM approach enables a concise presentation of a small number of options, hi</context>
</contexts>
<marker>Walker, Whittaker, Stent, Maloor, Moore, Johnston, Vasireddy, 2004</marker>
<rawString>M. Walker, S. Whittaker, A. Stent, P. Maloor, J.D. Moore, M. Johnston, and G. Vasireddy. 2004. Generation and evaluation of user tailored responses in dialogue. Cognitive Science, 28:811–840.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Winterboer</author>
<author>J D Moore</author>
</authors>
<title>Evaluating information presentation strategies for spoken recommendations.</title>
<date>2007</date>
<booktitle>In RecSys ’07: Proc. of the 2007 ACM conference on Recommender systems.</booktitle>
<contexts>
<context position="4549" citStr="Winterboer and Moore (2007)" startWordPosition="698" endWordPosition="701">emberg and Moore, 2006; Polifroni and Walker, 2008) or audio recordings (Walker et al., 2004), for rating. The general consensus from these studies is that users significantly prefer approaches that take their preferences into account. However, because users were not interacting with these SDS, the evaluation criteria were limited to users’ perceptions (e.g., informativeness, good overview of options, confidence in choice, etc.), and metrics such as effectiveness (i.e., actual or perceived task completion) and efficiency (i.e., length of dialogue) could not be assessed. To address this issue, Winterboer and Moore (2007) carried out a Wizard-of-Oz (WOz) study in which users participated in dialogues controlled by two different information presentation algorithms. They found that not only did users prefer presentations based on a user model, dialogues employing the “usermodel based summarise and refine” (UMSR) approach led to greater task success and dialogue efficiency. In this paper, we take this one step further, and evaluate the effectiveness of the UMSR approach in a more realistic setting, incorporating this content selection and presentation strategy into a full end-to-end dialogue system, and comparing</context>
</contexts>
<marker>Winterboer, Moore, 2007</marker>
<rawString>A. Winterboer and J.D. Moore. 2007. Evaluating information presentation strategies for spoken recommendations. In RecSys ’07: Proc. of the 2007 ACM conference on Recommender systems.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>