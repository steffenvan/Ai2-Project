<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000004">
<title confidence="0.9985805">
Creating and Querying a Domain dependent Know-How Knowledge Base
of Advices and Warnings
</title>
<author confidence="0.921486">
Lionel Fontan
</author>
<affiliation confidence="0.730335">
IRIT - UPS,
</affiliation>
<address confidence="0.9194125">
118 route de Narbonne,
31062 Toulouse Cedex, France.
</address>
<email confidence="0.994778">
antonin follet@hotmail.fr
</email>
<author confidence="0.791985">
Patrick Saint-Dizier
</author>
<affiliation confidence="0.643742">
IRIT - CNRS,
</affiliation>
<address confidence="0.9152975">
118 route de Narbonne,
31062 Toulouse Cedex, France.
</address>
<email confidence="0.999395">
stdizier@irit.fr
</email>
<sectionHeader confidence="0.992518" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999926125">
In this paper, we present the explanation struc-
ture of procedural texts, that supports and moti-
vates the goal-instruction structure. We focus in
particular on arguments, and show how arguments
of type warnings and advices can be extracted. Fi-
nally, we show how a domain dependent know-
how textual knowledge base can be constructed
and queried.
</bodyText>
<sectionHeader confidence="0.998981" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999876727272727">
Procedural texts consist of a sequence of instruc-
tions, designed with some accuracy in order to
reach a goal (e.g. assemble a computer). Procedu-
ral texts may also include subgoals. These are most
of the time realized by means of titles and subti-
tles. The user must carefully follow step by step
the given instructions in order to reach the goal.
The main goal of our project is to analyse the
structure of procedural texts in order to efficiently
and accurately respond to How-to ? questions.
This means identifying titles (which convey the
main goals of the text), sequences of instructions
serving these goals, and a number of additional
structures such as prerequisites, warnings, advices,
illustrations, etc.
In our perspective, procedural texts range
from apparently simple cooking recipes to large
maintenance manuals. They also include docu-
ments as diverse as teaching texts, medical no-
tices, social behavior recommendations, directions
for use, assembly notices, do-it-yourself notices,
itinerary guides, advice texts, savoir-faire guides
</bodyText>
<note confidence="0.616796">
© 2008. Licensed under the Creative Commons
</note>
<footnote confidence="0.819264">
= Attribution-Noncommercial-Share Alike 3.0 Unported
license (http://creativecommons.org/licenses/by-nc-sa/3.0/).
Some rights reserved.
</footnote>
<bodyText confidence="0.999701894736842">
etc. (Aouladomar et al., 2005). Procedural texts
follow a number of structural criteria, whose real-
ization may depend on the author’s writing abili-
ties, on the target user, and on traditions associated
with a given domain. Procedural texts can be regu-
latory, procedural, programmatory, prescriptive or
injunctive. The work we report here was carried
out on a development corpus of French texts taken
from the Web from most of the various domains
cited above.
Argument extraction is not yet a very active
area, althought it has obvious uses in question an-
swering, in decision theory, etc. For example, ex-
tracting arguments from legal texts (ICAIL 2005)
or for answering opinion questions is a major chal-
lenge of primary use.
We have developed a quite detailed analysis of
procedural texts, identifying their main basic com-
ponents as well as their global structure. For that
purpose, we have defined two levels: a segmenta-
tion level that basically tags structures considered
as terminal structures (titles, instructions, advices,
prerequisites, etc.) and a grammar level that binds
these terminal structures to give a global structure
to procedural texts (Delpech et al. 2008). This
structure is textual and dedicated only to elements
relevant to procedurality.
Procedural texts are complex structures, they
often exhibit a quite complex rational (the instruc-
tions) and ’irrational’ structure which is mainly
composed of advices, conditions, preferences,
evaluations, user stimulations, etc. They form
what is called the explanation structure, which mo-
tivates and justifies the goal-instructions structure,
which is the backbone of procedural texts. A num-
ber of these elements are forms of argumentation,
they provide a strong and essential internal cohe-
sion and coherence to procedural texts.
</bodyText>
<page confidence="0.99391">
41
</page>
<note confidence="0.8491455">
Coling 2008: Proceedings of the workshop on Knowledge and Reasoning for Answering Questions, pages 41–48
Manchester, August 2008
</note>
<bodyText confidence="0.999889407407407">
An important aspect of this project is the ac-
curate identification of the explanation structure
as found in procedural texts in order (1) to bet-
ter understand explanation strategies deployed by
humans in precise, concrete and operational situ-
ations and (2) to build a knowledge base of ad-
vices and warnings related to an application do-
main, that reflects several forms of know-how on
this domain. Such repositories exist, but they have
been build completely manually, by various users,
often in a wiki fashion. Our goal is then to allow
users not only to query procedural texts via How
to questions, but also to create and to access to a
repository of advices and warnings (basically Why
questions and some How-to questions to a lesser
extent) about a certain task.
We have already studied the instructional as-
pects of procedural texts and implemented a quite
efficient prototype within the TextCoop project
(Delpech et al. 2008) that tags text with dedicated
XML tags. In this paper, after a brief categoriza-
tion of explanation structure as found in our corpus
of procedural texts, we focus on the argumentation
structure via the recognition of warnings and ad-
vices. Then, we show how a textual knowledge
base of advices and warnings can be produced and
how it can be queried.
</bodyText>
<sectionHeader confidence="0.690046" genericHeader="method">
2 The explanation structure in
procedural texts
</sectionHeader>
<bodyText confidence="0.9990982">
We first present, in this section, the general orga-
nization of the explanation structure as it emerged
from corpus analysis. Then we develop the major
component of procedural texts: the instructional
compound.
</bodyText>
<subsectionHeader confidence="0.98337">
2.1 A global view of the explanation struc-
ture
</subsectionHeader>
<bodyText confidence="0.997805875">
From our development corpus, we established a
classification of the different forms explanations
may take. Basically, the explanation structure is
meant to guide the user by making sure that he
will effectively realize actions as they are speci-
fied, via e.g. threats, rewards, evaluations, advices
and warnings. The main structures are facilita-
tion and argumentation structures; they are either
global (they are adjoined to goals, and have scope
over the whole procedure) or local, included into
instructional compounds, with a scope local to the
instructional compound. This latter case is by far
the most frequently encountered. These structures
are summarized as follows (the terms we use are
either borrowed from works on rhetorical relations
or are just ours if none exist):
</bodyText>
<listItem confidence="0.97875155">
• facilitation structures, which are rhetorical
in essence (Kosseim et al 2000) (Van der
Linden 1993), correspond to How to do X ?
questions, these include two subcategories:
(1) user help, with: hints, evaluations and
encouragements and
(2) controls on instruction realization, with
two cases: (2.1) controls on actions: guid-
ance, focusing, expected result and elabo-
ration and (2.2) controls on user interpre-
tations: definitions, reformulations, illustra-
tions and also elaborations.
• argumentation structures, corresponding
to why do X ? questions.
These have either:
(1) a positive orientation with the author in-
volvement (promises) or not (advices and
justifications) or
(2) a negative orientation with the author in-
volvement (threats) or not (warnings).
</listItem>
<bodyText confidence="0.999437105263158">
In what follows, we will mainly concentrate on this
second point, and in particular on warnings and ad-
vices which are the most frequently encountered
(since there are rarely involvements from the au-
thor). These will be used to construct the know-
how knowledge base. Argumentation structures
are relatively general to an applications domain,
while facilitation structures are much more spe-
cific to the text and the targeted audiences. There
are several ways of defining and approaching ar-
gumentation. Without entering any debate, we
consider here the approach where an argument is
composed of one or more supports associated with
a certain statement, as in the following warning:
carefully plug in your mother card vertically, oth-
erwise you will most likely damage its connec-
tors. where if the intruction (carefully plug in...)
is not correctly realized, the user know the conse-
quences.
</bodyText>
<subsectionHeader confidence="0.917389">
2.2 From instructions to instructional
compounds
</subsectionHeader>
<bodyText confidence="0.9992795">
In most types of texts, we do not find just se-
quences of simple instructions but much more
</bodyText>
<page confidence="0.998319">
42
</page>
<bodyText confidence="0.988848212121212">
complex compounds composed of clusters of in-
structions, that exhibit a number of semantic de-
pendencies between each other, that we call in-
structional compounds. These are organized
around a few main instructions, to which a number
of subordinate instructions, warnings, arguments,
and explanations of various sorts may possibly be
adjoined. All these elements are, in fact, essen-
tial in a compound for a good understanding of the
procedure at stake.
An instructional compound has a relatively
well organized discourse structure, composed of
several layers, which are:
• The goal and justification level, which has
wider scope over the remainder of the com-
pound, indicates motivations for doing ac-
tions that follow in the compound (e.g. in
your bedroom, you must clean regularly the
curtains..., which here motivates actions to
undertake). It gives the fundamental moti-
vation of the compound.
• The instruction kernel structure, which
contains the main instructions. These can be
organized temporally or be just sets of ac-
tions. Actions are identified most frequently
via the presence of action verbs (in relation
to the domain) in the imperative form, or in
the infinitive form introduced by a modal.
We observed also a number of subordinated
instructions forms adjoined to the main in-
structions. These are in general organized
within the compound by means of rhetorical
relations, introduced below.
</bodyText>
<listItem confidence="0.854104581395349">
• The deontic and illocutionary force struc-
tures: consist of marks that operate over
instructions, outlining different parameters.
These linguistic structures play a major role
in argumentation:
– deontic: obligatory, optional, forbid-
den or impossible, alternates (or),
– illocutionary and related aspects:
stresses on actions: necessary, ad-
vised, recommended, to be avoided,
etc. These marks are crucial to identify
the weight of an argument.
• a temporal structure that organizes se-
quences of instructions (and, at a higher
level, instructional compounds). In general,
the temporal structure is very simple, with
sequences of actions to carry out. In some
cases, parallel actions are specified, which
partially overlap.
• The conditional structure: introduces con-
ditions over instructions within the com-
pound or even over the whole instruc-
tional compound. We encounter quite a lot
of structures organizing mutually exclusive
cases.
• the causal structure that indicates the goal
of an action. We identify four types of causal
relations, following (Talmy 2001): intend-to
(direct objective of an action: push the but-
ton to start the engine), Instrumented (use a
2 inch key to dismount the door), Facilitation
(enlarge the hole to better empty the tank)
and Continue (keep the liquid warm till its
colour changes).
• The rhetorical structure whose goal is to
enrich the kernel structure by means of a
number of subordinated aspects (realized as
propositions, possibly instructions) among
which, most notably: enablement, motiva-
tion, circumstance, elaboration, instrument,
precaution, manner. A group of relations
of particular interest in this paper are argu-
ments, developed hereafter.
</listItem>
<bodyText confidence="0.841757294117647">
Explanations and arguments help the user un-
derstand why an instruction must be realized and
what are the risks or the drawbacks if he does not
do it properly. An example of an instructional
compound is:
[instructional compound
[Goal To clean leather armchairs,]
[argument:advice
[instruction choose specialized products dedicated
to furniture,
[instruction and prefer them colourless ]],
[support they will play a protection role, add
beauty, and repair some small damages.]]]
We have here an argument of type advice
which is composed of 2 instructions (later called
a conclusion) and a conjunction of three supports
which motivate the 2 instructions.
</bodyText>
<page confidence="0.999578">
43
</page>
<sectionHeader confidence="0.9607385" genericHeader="method">
3 Identifying arguments in proce-
dures
</sectionHeader>
<bodyText confidence="0.999951428571428">
In this section let us first give a quite informal def-
inition of what an argument is, and how it interacts
with the goal-instructions structure. Let us then
focus on warnings and advices which are, by far,
the most frequently encountered structures. Most
warnings and advices are included into instruc-
tional compounds.
</bodyText>
<subsectionHeader confidence="0.999607">
3.1 Argumentation and Action theories
</subsectionHeader>
<bodyText confidence="0.999872575">
Roughly, argumentation is a process that allows
speakers to construct statements for or against an-
other statement called the conclusion. These for-
mer statements are called supports. The general
form of an argument is : Conclusion ’because’
Support (noted as C because 5). In natural lan-
guage, conclusions often appear before the sup-
port, but they may also appear after. A conclusion
may receive several supports, possibly of different
natures (advices and warnings). Arguments may
be more or less strong, they bear in general a cer-
tain weight, induced from the words they contain
(Anscombre et al. 1981), (Moeschler 1985), (Am-
goud et ali. 2001). In natural contexts, this weight
is somewhat vague, and only general classes can
be produced, e.g. from light to strong.
In the case of procedural texts, the represen-
tation and the role of arguments in a text can be
modelled roughly as follows. Let G be a goal
which can be reached by the sequence of instruc-
tions AZ, i ∈ [1, n], whatever their exact tem-
poral structure is. A subset of those instructions
is interpreted as arguments where each instruction
(Aj, viewed as a conclusion) is paired with a sup-
port 5j that stresses the importance of Aj (Care-
fully plug in your mother card vertically, otherwise
you will damage the connectors). Their general
form is: Aj because 5j (we use here the term ’be-
cause’ which is more vague than the implication
symbol used in formal argumentation, because nat-
ural language is not so radical). Supports 5k which
are negatively oriented are warnings whereas those
which are positively oriented are advices. Neutral
supports simply introduce basic explanations.
Similarly to the principles of argument theory,
but within the framework of action theory (e.g.
Davidson 2003), if Aj is associated with a support
of type warning 5j then if Aj is not realized cor-
rectly, the warning 5j is ’active’ and attacks the
goal G, i.e. it makes its realization more difficult,
if not impossible. Conversely, if 5j is an advice,
it supports the goal G, making its full realization
easier, or providing better results if Aj is executed.
Note however that there is an implicit gradabil-
ity in the realization of an action, which may be
more or less accurately and completely realized.
In that case, negative or positive consequences on
the main goal evolve accordingly.
Supports can themselves receive supports :
don’t add natural fertilizer, this may attract in-
sects, which will damage your young plants. In the
same range of ideas, instructions Aj which are ad-
vices or warnings have a different status than ’nor-
mal’, unsupported instructions (although one can
say that most of them could be associated with an
implicit support such as otherwise you will fail).
Advices are often optional instructions: they are
a kind of invitation to do the associated action for
better results, whereas warnings are an incitation to
be more careful. Therefore, instructions in a proce-
dure do not have all the same operational strength
and status.
As can be noted, our definition includes terms
which are gradual: ’more difficult’, ’easier’, be-
cause in practice, failing to realize an instruction
properly does not necessarily means that the goal
cannot be reached, but the user will just be less
successful, for various reasons. In the natural lan-
guage expressions of conclusions (the Aj) as well
as of supports, there are many modals or classes
of verbs (like risk verbs) that modulate the conse-
quences on G, contrast for example:
use professional products to clean your leathers,
they will give them a brighter aspect. with:
carefully plug in your mother card vertically, oth-
erwise you will most likely damage its connectors.
In the latter case, the goal ’mounting your own PC’
is likely to fail, whereas in the former, the goal
’cleaning your leathers’ will just be less success-
ful.
</bodyText>
<subsectionHeader confidence="0.999865">
3.2 Processing arguments
</subsectionHeader>
<bodyText confidence="0.999843125">
From the above observations, we have defined a
set of patterns that recognize instructions which
are conclusions and their related supports. We de-
fined those patterns from a development corpus
of about 1700 texts from various domains (cook-
ing, do it yourself, gardening, video games, so-
cial advices, etc.). The study is made on French,
English glosses are given here for ease of read-
</bodyText>
<page confidence="0.998125">
44
</page>
<bodyText confidence="0.999661888888889">
ing. The recognition problem is twofold: identi-
fying propositions as conclusions or supports by
means of specific linguistic marks (sometimes we
also found a few typographic marks), and then de-
limiting these elements. In general, boundaries are
either sentences or, by default, instructional com-
pound boundaries. In procedural texts, roughly,
the proportion of advices and warnings is almost
equivalent.
</bodyText>
<subsectionHeader confidence="0.914083">
3.2.1 Processing warnings
</subsectionHeader>
<bodyText confidence="0.999846166666667">
Warnings are basically organized around a unique
structure composed of an ’avoid expression’ com-
bined with a proposition. The variations around
the ’avoid expressions’ capture the illocutionary
force of the argument via several devices, ordered
here by increasing force :
</bodyText>
<listItem confidence="0.9161868">
(1) ’prevention verbs like avoid’ NP / to VP (avoid
hot water)
(2) do not / never / ... VP(infinitive) ... (never put
this cloth in the sun)
(3) it is essential, vital, ... to never VP(infinitive).
</listItem>
<bodyText confidence="0.974296428571429">
In cases where the conclusion is relatively weak in
terms of consequences, it may not have any spe-
cific mark, its recognition is then based on the ob-
servation that it is the instruction that immediately
precedes an already identified support.
Supports are propositions which are identified
from various marks:
</bodyText>
<listItem confidence="0.995929583333333">
(1) via connectors such as: sinon, car, sous peine
de, au risque de (otherwise, under the risk of), etc.
or via verbs expressing consequence,
(2) via negative expressions of the form: in order
not to, in order to avoid, etc.
(3) via specific verbs such as risk verbs introducing
an event (you risk to break). In general the embed-
ded verb has a negative polarity.
(4) via the presence of very negative terms, such
as: nouns: death, disease, etc., adjectives, and
some verbs and adverbs. We have a lexicon of
about 200 negative terms found in our corpora.
</listItem>
<bodyText confidence="0.9984589">
Some supports have a more neutral formula-
tion: they may be a portion of a sentence where
a conclusion has been identified. For example,
a proposition in the future tense or conditional
following a conclusion is identified as a support.
However, as will be seen below, some supports
may be empty, because they can easily be inferred
by the reader. In that case, the argument is said to
be truncated.
Patterns are implemented in Perl and are in-
cluded into the TextCoop software. From the
above observations, with some generalizations and
the construction of lexicons of marks, we have
summarized the extraction process in only 8 pat-
terns for supports and 3 patterns for conclusions.
Pattrens are basically morpho-lexical, with the
need to recognize a few local structures, treated by
means of local automata. A pattern in Perl has the
following form:
(PRO:PER--Modalite +)?--
evit(ez|er)--(\w+ )*--##
with modalite = devoir, veiller a, etre essentiel, etc.
Some local automata are associated with most pat-
terns in order to make them as generic as possible.
In our programme, Perl scripts are treated one af-
ter the other, in sequence. We do not have any effi-
cieny requirement since these treatments are real-
ized in batch mode. However, for the whole pro-
cessing, we tag abouit 200 Mo of text per hour on
a standard 3GhZ Pentium machine.
</bodyText>
<subsectionHeader confidence="0.60987">
3.2.2 Evaluation
</subsectionHeader>
<bodyText confidence="0.931596230769231">
In procedural texts, arguments are tagged by XML
tags. We carried out an indicative evaluation (e.g.
to get improvement directions) on a corpus of 66
texts over various domains, containing 302 argu-
ments, including 140 advices and 162 warnings.
This test corpus was collected from a large collec-
tion of texts from our study corpus. Domains are
in 2 categories: cooking, gardening and do it your-
self, which are very prototypical, and 2 other do-
mains, far less stable: social recommendations and
video games solutions. Arguments were manually
tagged in these texts, and a comparison was made
with the output of the system. Therefore, we report
below the recall, the precision being almost 100%
(very little noise).
We get the following results for warnings:
conclusion support (3) (4)
recognition recognition
88% 91% 95% 95%
(3) conclusions well delimited (4) supports
well delimited, with respect to warnings correctly
identified.
As far as warnings are concerned, results are
really good. Errors are very diverse, some of them
involve uses of the verb pouvoir (to be able to) and
the auxiliary ˆetre (to be).
</bodyText>
<page confidence="0.998087">
45
</page>
<subsectionHeader confidence="0.899701">
3.2.3 Processing Advices
</subsectionHeader>
<bodyText confidence="0.9193374">
Conclusions of type advice are identified essen-
tially by means of two types of patterns (in
French):
(1) advice or preference expressions followed by
an instruction. The expressions may be a verb or a
more complex expression: is advised to, prefer, it
is better, preferable to, etc.,
(2) expression of optionality or of preference fol-
lowed by an instruction: our suggestions:..., or ex-
pression of optionality within the instruction (use
preferably a sharp knife).
In addition, as for warnings, any instruction pre-
ceding a support of type advice is a conclusion.
The first pattern above is recogned by the fol-
lowing script:
ceci|cela|NOM|PRO:
PER+--tre?--ADV?--Verb/
advice exporession--(\w+ )*--##
Supports of type advice are identified on the
basis of 3 distinct types of patterns:
</bodyText>
<listItem confidence="0.8237903125">
(1) Goal exp + (adverb) + positively oriented term.
Goal expressions are e.g.: in order to, for, whereas
adverb includes: better (in French: mieux, plus,
davantage), and positively oriented term includes:
nouns (savings, perfection, gain, etc.), adjectives
(efficient, easy, useful, etc.), or adverbs (well, sim-
ply, etc.). For this latter class of positively oriented
terms we constructed a lexicon that contains about
50 terms. terms.
(2) goal expression with a positive consequence
verb (favour, encourage, save, etc.), or a facilita-
tion verb (improve, optimize, facilitate, embellish,
help, contribute, etc.),
(3) the goal expression in (1) and (2) above can be
replaced by the verb ’to be’ in the future: it will be
easier to locate your keys.
</listItem>
<bodyText confidence="0.921398142857143">
Similarly as above, we carried out an indica-
tive evaluation on the same corpus as above, with
the same experimental conditions. We get the fol-
lowing results for advices:
conclusion support (3)
recognition recognition
79% 84% 92% 91% 91%
(3) conclusions well delimited, (4) supports
well delimited, both with respect to advices cor-
rectly identified. (5) support and conclusion cor-
rectly related.
A short example of an annotated text is given
in Fig. 1 below.
4 Constructing and Querying a
know-how textual database
Besides studying the textual structure of proce-
dural texts and responding to How-to questions
(Delpech et al. 2007) from the analysis of these
texts, a major application of this work is the con-
struction of domain know-how knowledge base,
which is probably quite basic, but which could be
subject to interesting generalizations. Obviously,
to make this knowledge optimal, it would be useful
to associate with every statement a formal repre-
sentation that supports inference, data fusion, etc.
This domain know-how knowledge base of ad-
vices, hints and warnings is of much importance
for different types of users who have a procedure
to realize a task but who want to know more before
starting. Some psychological experiments have in
fact shown that, besides instructions given in pro-
cedural texts, users are very much interested in
what remains implicit in those texts: what you are
supposed to know or care about (but have no means
to ask). This know-how textual database is aimed
to fill in this kind of gap.
The work presented hereafter is still ex-
ploratory, since the task is quite complex. The
domain know-how textual database is planned to
be either directly consulted by users, or queried
by means of requests in natural language or key-
words.
</bodyText>
<subsectionHeader confidence="0.9968735">
4.1 Constructing a text database of do-
main know-how
</subsectionHeader>
<bodyText confidence="0.999943571428571">
There are repositories of advices organized by
sector of activity available on the Web (e.g.
http://www.conseils-gratuit.com). These are real-
ized manually: most of these advices come from
hints sent by readers of these pages. These repos-
itories contain in general simple advices and also
small procedures which are hints to better realize a
certain task.
In our approach, the text units that we have ac-
cess to are either (1) procedural texts decomposed
into subgoals when they are large (e.g. the differ-
ent phases of assembling a computer), or (2) in-
structional compounds. Compounds roughly cor-
respond to the various advice forms found in man-
</bodyText>
<page confidence="0.997744">
46
</page>
<figure confidence="0.9859136">
[procedure
[title How to embellish your balcony
[Prerequisites 1 lattice, window boxes, etc.]
....
[instructional−compound In order to train a plant to grow up a wall, select first a sunny area, clean the floor and
make sure it is flat
[Argument [Conclusion:Advice You should better let a 10 cm interval between the wall and the lattice.]
[Support:Advice This space will allow the air to move around, which is beneficial for the health of your
plant. ]
]]]]
</figure>
<figureCaption confidence="0.999945">
Figure 1: An annotated procedure
</figureCaption>
<bodyText confidence="0.931745661290323">
ually realized repositories of advices. Advices and
warnings mainly appear within these instructional
compounds. However, compounds being inserted
into a larger procedure may be somewhat elliptical
in some cases. Therefore, the textual database we
are constructing will contain titles (to settle con-
text) and compounds.
Let us now present the construction of the do-
main know-how textual database of advices and
warnings. At this stage, this is an experimental ten-
tative that needs further improvements and evalu-
ation. We first process texts by domain, according
to our corpus (about 8000 texts). The main func-
tions of this processing are:
(1) cleaning web pages from irrelevant data (adds,
forums, summaries, links, etc.),
(2) XML tagging the instructional aspects, with
dedicated tags: tagging titles (and reconstructing
the numerous titles which are incomplete, with
missing verb or object, and tagging instructional
compounds and prerequisites, and
(3) tagging within instructional compounds ad-
vices and warnings based on the patterns given
above.
In the textual database, the first
level of structure is domains: house,
coocking, administration, health,
garden, computer, do it yourself,
animals, beauty, society.
Next, below each of these domain top nodes,
we have a list of items that correspond to proce-
dures main titles (e.g. boucher un trou avec du
platre (fill up a hole with plaster). Since, for most
domains we have several hundreds of documents,
we need to organize those titles and abstract over
them. This is being organized around two axis:
(1) task oriented: where action verbs are grouped
on the basis of closely related terms to form a sin-
gle title (for that purpose we use our verb lexical
base (Volem)). A second level of generalization
is carried out by skipping adjuncts, therefore we
have items like: ’repairing walls’ independently of
the material or the technique used, e.g. with plas-
ter. mastic, cement.
(2) object oriented: where we only keep track of
the objects, viewed as a theme: wall, wood, plas-
ter, etc. so that the user can access the different
operations these objects may undergo.
These revised titles form a second level in the
structure of the know-how textual knowledge base.
Below these links, we have the list of relevant
web pages. Each of these pages is associated with
an index composed of the set of titles it contains
and the list of supports identified (reconstructed
supports are not yet included). Titles are used to
make the procedure context more precise so that
the scope of supports is more clear, since some
supports are vague. A short example is given in
Fig. 2 below. Supports which are too vague to be
of any use are filtered out. At the moment we are
studying various forms of filters based on the type
of words they contain and their relevance.
</bodyText>
<subsectionHeader confidence="0.852534">
4.2 Querying the know-how textual
database
</subsectionHeader>
<bodyText confidence="0.999873166666667">
In general, attempting to match queries directly
with supports in order to get the advice, i.e. the
associated conclusion does not lead to the best re-
sults because supports are often incomplete or they
contain a lot of pronominal references. Our match-
ing procedure therefore includes the taking into ac-
count of the page title, or subtitles together with
support contents. It seems that this leads to better
results in terms of accuracy and relevance.
Related to Fig. 2, a query could be: how to
get smooth plaster surfaces on a wall ?. There is
no procedural text that corresponds to this query,
</bodyText>
<page confidence="0.998686">
47
</page>
<reference confidence="0.6773198">
domain: do-it-yourself
topic: repairing walls
repairing your walls with plaster -[INDEX: Title, list of supports]-[TEXT]
filling up holes in your walls ]-[INDEX: Title, list of supports]-[TEXT
topic: painting walls
</reference>
<figureCaption confidence="0.989217">
Figure 2: A text database index
</figureCaption>
<bodyText confidence="0.865402529411765">
which is rather an advice request. Answering this
question is realized by the following steps:
(1) based on keywords which appear as objects in
the query, select a domain and a topic in the knowl-
edge base.
(2) then, over the topics selected, match the query
with one or more supports. Matching is obviously
not direct and requires, as in most systems, some
flexibility. Of interest here are adjectives, which
abound in this type of question, for which we need
to develop scales that capture the different lan-
guage expressions of the properties they character-
ize. This type of scale, in (Cruse 1986), is called
non branching proportional series. For example
’smooth’ will appear on a scale of type ’surface
granularity’ that includes other adjectives such as
rough, grainy, etc.
</bodyText>
<sectionHeader confidence="0.999078" genericHeader="conclusions">
5 Perspectives
</sectionHeader>
<bodyText confidence="0.999995">
The work presented here complements the tagging
of titles and instructional compounds in procedural
texts of various domains, as reported in (Delpech
et al. 2008). We analyzed the forms arguments of
type advice and warning may take, and have imple-
mented and tested a system that tags those struc-
tures and attempts at reconstructing empty sup-
ports. At this level, there is still linguistic and for-
mal work to be carried out, for example to evaluate
the illocutionary force of arguments and to better
settle this work within action theory. We believe
we have a very useful corpus of examples of argu-
ments, of much interest for research in argumenta-
tion theory.
In a second stage, we have now established a
first version of criteria to construct from these ar-
guments a domain know-how textual database, that
users can query to get additional information when
realizing a task, often information which remains
implicit in a procedure, but that users do need to
operate safely and efficiently. The construction of
such a repository is a complex task that we will
pursue, together with an analysis of how it can be
queried accurately.
Credits We thank the French ANR-RNTL re-
search programme for supporting this project. We
also thank very warmly Leila Amgoud for discus-
sions on argumentation, Daniel Kayser for com-
ments on this paper, and 3 anonymous reviewers.
</bodyText>
<sectionHeader confidence="0.999308" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999463">
Amgoud, L., Parsons, S., Maudet, N., 2001,
Arguments, Dialogue, and Negotiation, in: 14th
European Conference on Artificial Intelligence,
Berlin.
Anscombre, J.-Cl. Ducrot, O., 1981, Interro-
gation et Argumentation, in Langue francaise, no
52, L’interrogation, 5 - 22.
Aouladomar, F., Saint-dizier, P., 2005, To-
wards Answering Procedural Questions, Work-
shop KRAQ05, IJCAI05, Edinburgh.
Cruse, A., 1986, Lexical Semantics, Cam-
bridge Univ. Press.
Davidson, D., 1963, Actions, Reasons, and
Causes, Journal of Philosophy, 60.
Delpech, E., Saint-Dizier, P., 2008, Investigat-
ing the Structure of Procedural Texts for Answer-
ing How-to Questions, LREC 2008, Marrakech.
Kosseim, L., Lapalme, G., 2000, Choosing
Rhetorical Structures to Plan Instructional Texts,
Computational Intelligence, Blackwell, Boston.
Moschler, J., 1985, Argumentation et Conver-
sation, El´ements pour une Analyse Pragmatique
du Discours, Hatier - Cr´edif.
ICAIL, 2005, Automatic semantics extraction
in law documents, proceedings, C. Biagili et ali.
(ed), ACM ICAIL publications, Stanford.
Vander Linden, K., 1993, Speaking of Ac-
tions Choosing Rhetorical Status and Grammati-
cal Form in Instructional Text Generation Thesis,
University of Colorado.
</reference>
<page confidence="0.999357">
48
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.826548">
<title confidence="0.997921">Creating and Querying a Domain dependent Know-How Knowledge Base of Advices and Warnings</title>
<author confidence="0.96385">Lionel</author>
<affiliation confidence="0.99164">IRIT -</affiliation>
<address confidence="0.990404">118 route de 31062 Toulouse Cedex, France.</address>
<email confidence="0.935609">antoninfollet@hotmail.fr</email>
<author confidence="0.98977">Patrick</author>
<affiliation confidence="0.996284">IRIT -</affiliation>
<address confidence="0.9948355">118 route de 31062 Toulouse Cedex, France.</address>
<email confidence="0.99912">stdizier@irit.fr</email>
<abstract confidence="0.994987111111111">In this paper, we present the explanation structure of procedural texts, that supports and motivates the goal-instruction structure. We focus in particular on arguments, and show how arguments of type warnings and advices can be extracted. Finally, we show how a domain dependent knowhow textual knowledge base can be constructed and queried.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="false">
<title>domain: do-it-yourself topic: repairing walls repairing your walls with plaster -[INDEX: Title, list of supports]-[TEXT] filling up holes in your walls ]-[INDEX: Title, list of supports]-[TEXT topic: painting walls</title>
<marker></marker>
<rawString>domain: do-it-yourself topic: repairing walls repairing your walls with plaster -[INDEX: Title, list of supports]-[TEXT] filling up holes in your walls ]-[INDEX: Title, list of supports]-[TEXT topic: painting walls</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>