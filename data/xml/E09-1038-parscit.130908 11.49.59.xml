<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000063">
<title confidence="0.999540333333333">
Enhancing Unlexicalized Parsing Performance
using a Wide Coverage Lexicon, Fuzzy Tag-set Mapping,
and EM-HMM-based Lexical Probabilities
</title>
<author confidence="0.998818">
Yoav Goldberg&apos;* Reut Tsarfaty2† Meni Adler&apos;$ Michael Elhadad&apos;
</author>
<affiliation confidence="0.999505">
&apos;Department of Computer Science, Ben Gurion University of the Negev
</affiliation>
<email confidence="0.983048">
{yoavg|adlerm|elhadad}@cs.bgu.ac.il
</email>
<affiliation confidence="0.779085">
2Institute for Logic, Language and Computation, University of Amsterdam
</affiliation>
<email confidence="0.993205">
R.Tsarfaty@uva.nl
</email>
<sectionHeader confidence="0.99374" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999976875">
We present a framework for interfacing
a PCFG parser with lexical information
from an external resource following a dif-
ferent tagging scheme than the treebank.
This is achieved by defining a stochas-
tic mapping layer between the two re-
sources. Lexical probabilities for rare
events are estimated in a semi-supervised
manner from a lexicon and large unanno-
tated corpora. We show that this solu-
tion greatly enhances the performance of
an unlexicalized Hebrew PCFG parser, re-
sulting in state-of-the-art Hebrew parsing
results both when a segmentation oracle is
assumed, and in a real-word parsing sce-
nario of parsing unsegmented tokens.
</bodyText>
<sectionHeader confidence="0.998993" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999861071428572">
The intuition behind unlexicalized parsers is that
the lexicon is mostly separated from the syntax:
specific lexical items are mostly irrelevant for ac-
curate parsing, and can be mediated through the
use of POS tags and morphological hints. This
same intuition also resonates in highly lexicalized
formalism such as CCG: while the lexicon cate-
gories are very fine grained and syntactic in na-
ture, once the lexical category for a lexical item is
determined, the specific lexical form is not taken
into any further consideration.
Despite this apparent separation between the
lexical and the syntactic levels, both are usually es-
timated solely from a single treebank. Thus, while
</bodyText>
<footnote confidence="0.997357166666667">
*Supported by the Lynn and William Frankel Center for
Computer Sciences, Ben Gurion University
†Funded by the Dutch Science Foundation (NWO), grant
number 017.001.271.
*Post-doctoral fellow, Deutsche Telekom labs at Ben Gu-
rion University
</footnote>
<bodyText confidence="0.998583277777778">
PCFGs can be accurate, they suffer from vocabu-
lary coverage problems: treebanks are small and
lexicons induced from them are limited.
The reason for this treebank-centric view in
PCFG learning is 3-fold: the English treebank is
fairly large and English morphology is fairly sim-
ple, so that in English, the treebank does provide
mostly adequate lexical coverage1; Lexicons enu-
merate analyses, but don’t provide probabilities
for them; and, most importantly, the treebank and
the external lexicon are likely to follow different
annotation schemas, reflecting different linguistic
perspectives.
On a different vein of research, current POS tag-
ging technology deals with much larger quantities
of training data than treebanks can provide, and
lexicon-based unsupervised approaches to POS
tagging are practically unlimited in the amount
of training data they can use. POS taggers rely
on richer knowledge than lexical estimates de-
rived from the treebank, have evolved sophisti-
cated strategies to handle OOV and can provide
distributions p(t|w, context) instead of “best tag”
only.
Can these two worlds be combined? We pro-
pose that parsing performance can be greatly im-
proved by using a wide coverage lexicon to sug-
gest analyses for unknown tokens, and estimating
the respective lexical probabilities using a semi-
supervised technique, based on the training pro-
cedure of a lexicon-based HMM POS tagger. For
many resources, this approach can be taken only
on the proviso that the annotation schemes of the
two resources can be aligned.
We take Modern Hebrew parsing as our case
study. Hebrew is a Semitic language with rich
</bodyText>
<footnote confidence="0.9980595">
1This is not the case with other languages, and also not
true for English when adaptation scenarios are considered.
</footnote>
<note confidence="0.96229">
Proceedings of the 12th Conference of the European Chapter of the ACL, pages 327–335,
Athens, Greece, 30 March – 3 April 2009. c�2009 Association for Computational Linguistics
</note>
<page confidence="0.996257">
327
</page>
<bodyText confidence="0.99987422">
morphological structure. This rich structure yields
a large number of distinct word forms, resulting in
a high OOV rate (Adler et al., 2008a). This poses
a serious problem for estimating lexical probabili-
ties from small annotated corpora, such as the He-
brew treebank (Sima’an et al., 2001).
Hebrew has a wide coverage lexicon /
morphological-analyzer (henceforth, KC Ana-
lyzer) available2, but its tagset is different than the
one used by the Hebrew Treebank. These are not
mere technical differences, but derive from dif-
ferent perspectives on the data. The Hebrew TB
tagset is syntactic in nature, while the KC tagset
is lexicographic. This difference in perspective
yields different performance for parsers induced
from tagged data, and a simple mapping between
the two schemes is impossible to define (Sec. 2).
A naive approach for combining the use of the
two resources would be to manually re-tag the
Treebank with the KC tagset, but we show this ap-
proach harms our parser’s performance. Instead,
we propose a novel, layered approach (Sec. 2.1),
in which syntactic (TB) tags are viewed as contex-
tual refinements of the lexicon (KC) tags, and con-
versely, KC tags are viewed as lexical clustering
of the syntactic ones. This layered representation
allows us to easily integrate the syntactic and the
lexicon-based tagsets, without explicitly requiring
the Treebank to be re-tagged.
Hebrew parsing is further complicated by the
fact that common prepositions, conjunctions and
articles are prefixed to the following word and
pronominal elements often appear as suffixes. The
segmentation of prefixes and suffixes can be am-
biguous and must be determined in a specific con-
text only. Thus, the leaves of the syntactic parse
trees do not correspond to space-delimited tokens,
and the yield of the tree is not known in advance.
We show that enhancing the parser with external
lexical information is greatly beneficial, both in an
artificial scenario where the token segmentation is
assumed to be known (Sec. 4), and in a more re-
alistic one in which parsing and segmentation are
handled jointly by the parser (Goldberg and Tsar-
faty, 2008) (Sec. 5). External lexical informa-
tion enhances unlexicalized parsing performance
by as much as 6.67 F-points, an error reduction
of 20% over a Treebank-only parser. Our results
are not only the best published results for pars-
ing Hebrew, but also on par with state-of-the-art
</bodyText>
<footnote confidence="0.853692">
2http://mila.cs.technion.ac.il/hebrew/resources/lexicons/
</footnote>
<bodyText confidence="0.906579333333333">
lexicalized Arabic parsing results assuming gold-
standard fine-grained Part-of-Speech (Maamouri
et al., 2008).3
</bodyText>
<sectionHeader confidence="0.758953" genericHeader="method">
2 A Tale of Two Resources
</sectionHeader>
<bodyText confidence="0.996667465116279">
Modern Hebrew has 2 major linguistic resources:
the Hebrew Treebank (TB), and a wide coverage
Lexicon-based morphological analyzer developed
and maintained by the Knowledge Center for Pro-
cessing Hebrew (KC Analyzer).
The Hebrew Treebank consists of sentences
manually annotated with constituent-based syn-
tactic information. The most recent version (V2)
(Guthmann et al., 2009) has 6,219 sentences, and
covers 28,349 unique tokens and 17,731 unique
segments4.
The KC Analyzer assigns morphological analy-
ses (prefixes, suffixes, POS, gender, person, etc.)
to Hebrew tokens. It is based on a lexicon of
roughly 25,000 word lemmas and their inflection
patterns. From these, 562,439 unique word forms
are derived. These are then prefixed (subject to
constraints) by 73 prepositional prefixes.
It is interesting to note that even with these
numbers, the Lexicon’s coverage is far from com-
plete. Roughly 1,500 unique tokens from the He-
brew Treebank cannot be assigned any analysis
by the KC Lexicon, and Adler et al.(2008a) report
that roughly 4.5% of the tokens in a 42M tokens
corpus of news text are unknown to the Lexicon.
For roughly 400 unique cases in the Treebank, the
Lexicon provides some analyses, but not a correct
one. This goes to emphasize the productive nature
of Hebrew morphology, and stress that robust lex-
ical probability estimates cannot be derived from
an annotated resource as small as the Treebank.
Lexical vs. Syntactic POS Tags The analyses
produced by the KC Analyzer are not compatible
with the Hebrew TB.
The KC tagset (Adler et al., 2008b; Netzer et
al., 2007; Adler, 2007) takes a lexical approach to
POS tagging (“a word can assume only POS tags
that would be assigned to it in a dictionary”), while
the TB takes a syntactic one (“if the word in this
particular positions functions as an Adverb, tag it
as an Adverb, even though it is listed in the dictio-
nary only as a Noun”). We present 2 cases that em-
phasize the difference: Adjectives: the Treebank
</bodyText>
<footnote confidence="0.99965525">
3Our method is orthogonal to lexicalization and can be
used in addition to it if one so wishes.
4In these counts, all numbers are conflated to one canoni-
cal form
</footnote>
<page confidence="0.997866">
328
</page>
<bodyText confidence="0.999934636363637">
treats any word in an adjectivial position as an Ad-
jective. This includes also demonstrative pronouns
m -r5, (this boy). However, from the KC point of
view, the fact that a pronoun can be used to modify
a noun does not mean it should appear in a dictio-
nary as an adjective. The MOD tag: similarly,
the TB has a special POS-tag for words that per-
form syntactic modification. These are mostly ad-
verbs, but almost any Adjective can, in some cir-
cumstances, belong to that class as well. This cat-
egory is highly syntactic, and does not conform to
the lexicon based approach.
In addition, many adverbs and prepositions in
Hebrew are lexicalized instances of a preposition
followed by a noun (e.g., m5rz, “in+softness”,
softly). These can admit both the lexical-
ized and the compositional analyses. Indeed,
many words admit the lexicalized analyses in
one of the resource but not in the other (e.g.,
rztv5 “for+benefit” is Prep in the TB but only
Prep+Noun in the KC, while for -ren “from+side”
it is the other way around).
</bodyText>
<subsectionHeader confidence="0.991356">
2.1 A Unified Resource
</subsectionHeader>
<bodyText confidence="0.98235829787234">
While the syntactic POS tags annotation of the TB
is very useful for assigning the correct tree struc-
ture when the correct POS tag is known, there are
clear benefits to an annotation scheme that can be
easily backed by a dictionary.
We created a unified resource, in which every
word occurrence in the Hebrew treebank is as-
signed a KC-based analysis. This was done in a
semi-automatic manner – for most cases the map-
ping could be defined deterministically. The rest
(less than a thousand instances) were manually as-
signed. Some Treebank tokens had no analyses
in the KC lexicon, and some others did not have
a correct analysis. These were marked as “UN-
KNOWN” and “MISSING” respectively.5
The result is a Treebank which is morpho-
logically annotated according to two different
schemas. On average, each of the 257 TB tags
is mapped to 2.46 of the 273 KC tags.6 While this
resource can serve as a basis for many linguisti-
cally motivated inquiries, the rest of this paper is
5Another solution would be to add these missing cases to
the KC Lexicon. In our view this act is harmful: we don’t
want our Lexicon to artificially overfit our annotated corpora.
6A “tag” in this context means the complete morphologi-
cal information available for a morpheme in the Treebank: its
part of speech, inflectional features and possessive suffixes,
but not prefixes or nominative and accusative suffixes, which
are taken to be separate morphemes.
devoted to using it for constructing a better parser.
Tagsets Comparison In (Adler et al., 2008b),
we hypothesized that due to its syntax-based na-
ture, the Treebank morphological tagset is more
suitable than the KC one for syntax related tasks.
Is this really the case? To verify it, we simulate a
scenario in which the complete gold morpholog-
ical information is available. We train 2 PCFG
grammars, one on each tagged version of the Tree-
bank, and test them on the subset of the develop-
ment set in which every token is completely cov-
ered by the KC Analyzer (351 sentences).7 The
input to the parser is the yields and disambiguated
pre-terminals of the trees to be parsed. The parsing
results are presented in Table 1. Note that this sce-
nario does not reflect actual parsing performance,
as the gold information is never available in prac-
tice, and surface forms are highly ambiguous.
</bodyText>
<equation confidence="0.382220333333333">
Tagging Scheme Precision
TB / syntactic
KC / dictionary
</equation>
<tableCaption confidence="0.71425">
Table 1: evalb results for parsing with Oracle
morphological information, for the two tagsets
</tableCaption>
<bodyText confidence="0.999989041666667">
With gold morphological information, the TB
tagging scheme is more informative for the parser.
The syntax-oriented annotation scheme of the
TB is more informative for parsing than the lexi-
cographic KC scheme. Hence, we would like our
parser to use this TB tagset whenever possible, and
the KC tagset only for rare or unseen words.
A Layered Representation It seems that learn-
ing a treebank PCFG assuming such a different
tagset would require a treebank tagged with the
alternative annotation scheme. Rather than assum-
ing the existence of such an alternative resource,
we present here a novel approach in which we
view the different tagsets as corresponding to dif-
ferent aspects of the morphosyntactic representa-
tion of pre-terminals in the parse trees. Each of
these layers captures subtleties and regularities in
the data, none of which we would want to (and
sometimes, cannot) reduce to the other. We, there-
fore, propose to retain both tagsets and learn a
fuzzy mapping between them.
In practice, we propose an integrated represen-
tation of the tree in which the bottommost layer
represents the yield of the tree, the surface forms
</bodyText>
<footnote confidence="0.837988">
7For details of the train/dev splits as well as the grammar,
see Section 4.2.
</footnote>
<figure confidence="0.869198">
82.94
81.39
Recall
83.59
81.20
</figure>
<page confidence="0.993287">
329
</page>
<bodyText confidence="0.995245333333333">
are tagged with dictionary-based KC POS tags,
and syntactic TB POS tags are in turn mapped onto
the KC ones (see Figure 1).
</bodyText>
<figureCaption confidence="0.975789">
Figure 1: Syntactic (TB), Lexical (KC) and
Layered representations
</figureCaption>
<bodyText confidence="0.994523">
This representation helps to retain the informa-
tion both for the syntactic and the morphologi-
cal POS tagsets, and can be seen as capturing the
interaction between the morphological and syn-
tactic aspects, allowing for a seamless integra-
tion of the two levels of representation. We re-
fer to this intermediate layer of representation as
a morphosyntactic-transfer layer and we formally
depict it as p(tKC|tTB).
This layered representation naturally gives rise
to a generative model in which a phrase level con-
stituent first generates a syntactic POS tag (tTB),
and this in turn generates the lexical POS tag(s)
(tKC). The KC tag then ultimately generates the
terminal symbols (w). We assume that a morpho-
logical analyzer assigns all possible analyses to a
given terminal symbol. Our terminal symbols are,
therefore, pairs: (w, t), and our lexical rules are of
the form t —* (w, t). This gives rise to the follow-
ing equivalence:
p((w, tKC)|tTB) = p(tKC|tTB)p((w, tKC)|tKC)
In Sections (4, 5) we use this layered gener-
ative process to enable a smooth integration of
a PCFG treebank-learned grammar, an external
wide-coverage lexicon, and lexical probabilities
learned in a semi-supervised manner.
</bodyText>
<sectionHeader confidence="0.966095" genericHeader="method">
3 Semi-supervised Lexical Probability
Estimations
</sectionHeader>
<bodyText confidence="0.9995117">
A PCFG parser requires lexical probabilities
of the form p(w|t) (Charniak et al., 1996).
Such information is not readily available in
the lexicon. However, it can be estimated
from the lexicon and large unannotated cor-
pora, by using the well-known Baum-Welch
(EM) algorithm to learn a trigram HMM tagging
model of the form p(t1, ... , tn, w1, ... , wn) =
argmax H p(ti|ti_1, ti_2)p(wi|ti), and taking
the emission probabilities p(w|t) of that model.
In Hebrew, things are more complicated, as
each emission w is not a space delimited token, but
rather a smaller unit (a morphological segment,
henceforth a segment). Adler and Elhadad (2006)
present a lattice-based modification of the Baum-
Welch algorithm to handle this segmentation am-
biguity.
Traditionally, such unsupervised EM-trained
HMM taggers are thought to be inaccurate, but
(Goldberg et al., 2008) showed that by feeding the
EM process with sufficiently good initial proba-
bilities, accurate taggers (&gt; 91% accuracy) can be
learned for both English and Hebrew, based on a
(possibly incomplete) lexicon and large amount of
raw text. They also present a method for automat-
ically obtaining these initial probabilities.
As stated in Section 2, the KC Analyzer (He-
brew Lexicon) coverage is incomplete. Adler
et al.(2008a) use the lexicon to learn a Maximum
Entropy model for predicting possible analyses for
unknown tokens based on their orthography, thus
extending the lexicon to cover (even if noisily) any
unknown token. In what follows, we use KCAna-
lyzer to refer to this extended version.
Finally, these 3 works are combined to create
a state-of-the-art POS-tagger and morphological
disambiguator for Hebrew (Adler, 2007): initial
lexical probabilities are computed based on the
MaxEnt-extended KC Lexicon, and are then fed
to the modified Baum-Welch algorithm, which is
used to fit a morpheme-based tagging model over
a very large corpora. Note that the emission prob-
abilities P(W|T) of that model cover all the mor-
phemes seen in the unannotated training corpus,
even those not covered by the KC Analyzer.8
We hypothesize that such emission probabili-
ties are good estimators for the morpheme-based
P(T —* W) lexical probabilities needed by a
PCFG parser. To test this hypothesis, we use it
to estimate p(tKC —* w) in some of our models.
</bodyText>
<sectionHeader confidence="0.812148" genericHeader="method">
4 Parsing with a Segmentation Oracle
</sectionHeader>
<bodyText confidence="0.9981515">
We now turn to describing our first set of exper-
iments, in which we assume the correct segmen-
</bodyText>
<footnote confidence="0.918994">
8P(W IT) is defined also for words not seen during train-
ing, based on the initial probabilities calculation procedure.
For details, see (Adler, 2007).
</footnote>
<figure confidence="0.994780392857143">
TB:
KC:
Layered:
...
INTB
INKC
ב
NN-F-SKC
תרגסמ
...
INKC
...
NN-F-SKC
ב
תרגסמ
...
PRP-M-S-3-DEMKC
הז
...
JJ-ZYTB
PRP-M-S-3-DEMKC
הז
...
JJ-ZYTB
הז
...
INTB
תרגסמב
</figure>
<page confidence="0.983332">
330
</page>
<bodyText confidence="0.999980125">
tation for each input sentence is known. This is
a strong assumption, as the segmentation stage
is ambiguous, and segmentation information pro-
vides very useful morphological hints that greatly
constrain the search space of the parser. However,
the setting is simpler to understand than the one
in which the parser performs both segmentation
and POS tagging, and the results show some in-
teresting trends. Moreover, some recent studies on
parsing Hebrew, as well as all studies on parsing
Arabic, make this oracle assumption. As such, the
results serve as an interesting comparison. Note
that in real-world parsing situations, the parser is
faced with a stream of ambiguous unsegmented to-
kens, making results in this setting not indicative
of real-world parsing performance.
</bodyText>
<subsectionHeader confidence="0.938385">
4.1 The Models
</subsectionHeader>
<bodyText confidence="0.932510954545455">
The main question we address is the incorporation
of an external lexical resource into the parsing pro-
cess. This is challenging as different resources fol-
low different tagging schemes. One way around
it is re-tagging the treebank according to the new
tagging scheme. This will serve as a baseline
in our experiment. The alternative method uses
the Layered Representation described above (Sec.
2.1). We compare the performance of the two ap-
proaches, and also compare them against the per-
formance of the original treebank without external
information.
We follow the intuition that external lexical re-
sources are needed only when the information
contained in the treebank is too sparse. There-
fore, we use treebank-derived estimates for reli-
able events, and resort to the external resources
only in the cases of rare or OOV words, for which
the treebank distribution is not reliable.
Grammar and Notation For all our experi-
ments, we use the same grammar, and change
only the way lexical probabilities are imple-
mented. The grammar is an unlexicalized
treebank-estimated PCFG with linguistically mo-
tivated state-splits.9
In what follows, a lexical event is a word seg-
ment which is assigned a single POS thereby func-
tioning as a leaf in a syntactic parse tree. A rare
9Details of the grammar: all functional information is re-
moved from the non-terminals, finite and non-finite verbs, as
well as possessive and other PPs are distinguished, definite-
ness structure of constituents is marked, and parent annota-
tion is employed. It is the same grammar as described in
(Goldberg and Tsarfaty, 2008).
(lexical) event is an event occurring less than K
times in the training data, and a reliable (lexical)
event is one occurring at least K times in the train-
ing data. We use OOV to denote lexical events ap-
pearing 0 times in the training data. count(·) is
a counting function over the training data, rare
stands for any rare event, and wrare is a specific
rare event. KCA(·) is the KC Analyzer function,
mapping a lexical event to a set of possible tags
(analyses) according to the lexicon.
</bodyText>
<subsectionHeader confidence="0.97747">
Lexical Models
</subsectionHeader>
<bodyText confidence="0.998332">
All our models use relative frequency estimated
probabilities for reliable lexical events: p(t →
</bodyText>
<equation confidence="0.9971825">
w|t) = count(w,t) They differ only in their treat-
count(t)
</equation>
<bodyText confidence="0.994932">
ment of rare (including OOV) events.
In our Baseline, no external resource is used.
We smooth for rare and OOV events using a per-
tag probability distribution over rare segments,
which we estimate using relative frequency over
rare segments in the training data: p(wrare|t) =
</bodyText>
<equation confidence="0.8811405">
count(rare,t) This is the way lexical probabilities
count(t)
</equation>
<bodyText confidence="0.9960535">
in treebank grammars are usually estimated.
We experiment with two flavours of lexical
models. In the first, LexFilter, the KC Analyzer is
consulted for rare events. We estimate rare events
using the same per-tag distribution as in the base-
line, but use the KC Analyzer to filter out any in-
compatible cases, that is, we force to 0 the proba-
bility of any analysis not supported by the lexicon:
</bodyText>
<equation confidence="0.999406666666667">
count(rare,t) t ∈ KCA(wrare)
p(wrare |t) = count(t)
0 t ∈� KCA(wrare)
</equation>
<bodyText confidence="0.9968012">
Our second flavour of lexical models, Lex-
Probs, the KC Analyzer is consulted to propose
analyses for rare events, and the probability of an
analysis is estimated via the HMM emission func-
tion described in Section 3, which we denote B:
</bodyText>
<equation confidence="0.884708">
p(wrare|t) = B(wrare, t)
</equation>
<bodyText confidence="0.996034">
In both LexFilter and LexProbs, we resort to
the relative frequency estimation in case the event
is not covered in the KC Analyzer.
</bodyText>
<subsectionHeader confidence="0.890142">
Tagset Representations
</subsectionHeader>
<bodyText confidence="0.9987815">
In this work, we are comparing 3 different rep-
resentations: TB, which is the original Treebank,
KC which is the Treebank converted to use the KC
Analyzer tagset, and Layered, which is the layered
representation described above.
The details of the lexical models vary according
to the representation we choose to work with.
For the TB setting, our lexical rules are of the form
</bodyText>
<page confidence="0.997426">
331
</page>
<bodyText confidence="0.999984392857143">
ttb → w. Only the Baseline models are relevant
here, as the tagset is not compatible with that of
the external lexicon.
For the KC setting, our lexical rules are of the form
tkc → w, and their probabilities are estimated as
described above. Note that this setting requires our
trees to be tagged with the new (KC) tagset, and
parsed sentences are also tagged with this tagset.
For the Layered setting, we use lexical rules of
the form ttb → w. Reliable events are esti-
mated as usual, via relative frequency over the
original treebank. For rare events, we estimate
p(ttb → w|ttb) = p(ttb → tkc|ttb)p(tkc → w|tkc),
where the transfer probabilities p(ttb → tkc) are
estimated via relative frequencies over the layered
trees, and the emission probabilities are estimated
either based on other rare events (LexFilter) or
based on the semi-supervised method described in
Section 3 (LexProbs).
The layered setting has several advantages:
First, the resulting trees are all tagged with the
original TB tagset. Second, the training proce-
dure does not require a treebank tagged with the
KC tagset: Instead of learning the transfer layer
from the treebank we could alternatively base our
counts on a different parallel resource, estimate it
from unannotated data using EM, define it heuris-
tically, or use any other estimation procedure.
</bodyText>
<subsectionHeader confidence="0.777888">
4.2 Experiments
</subsectionHeader>
<bodyText confidence="0.999892">
We perform all our experiments on Version 2 of
the Hebrew Treebank, and follow the train/test/dev
split introduced in (Tsarfaty and Sima’an, 2007):
section 1 is used for development, sections 2-12
for training, and section 13 is the test set, which
we do not use in this work. All the reported re-
sults are on the development set.10 After removal
of empty sentences, we have 5241 sentences for
training, and 483 for testing. Due to some changes
in the Treebank11, our results are not directly com-
parable to earlier works. However, our baseline
models are very similar to the models presented
in, e.g. (Goldberg and Tsarfaty, 2008).
In order to compare the performance of the
model on the various tagset representations (TB
tags, KC tags, Layered), we remove from the test
set 51 sentences in which at least one token is
marked as not having any correct segmentation in
the KC Analyzer. This introduces a slight bias in
</bodyText>
<footnote confidence="0.762818">
10This work is part of an ongoing work on a parser, and the
test set is reserved for final evaluation of the entire system.
11Normalization of numbers and percents, correcting of
some incorrect trees, etc.
</footnote>
<bodyText confidence="0.99938525">
favor of the KC-tags setting, and makes the test
somewhat easier for all the models. However, it
allows for a relatively fair comparison between the
various models.12
</bodyText>
<sectionHeader confidence="0.922455" genericHeader="evaluation">
Results and Discussion
</sectionHeader>
<table confidence="0.953792615384615">
Results are presented in Table 2.13
Baseline
rare: &lt; 2 rare: &lt; 10
LexFilter
rare: &lt; 2 rare: &lt; 10
Prec Rec Prec Rec
KC 77.18 76.31 77.34 76.20
Layered 76.69 76.40 76.66 75.74
LexProbs
rare: &lt; 2 rare: &lt; 10
Prec Rec Prec Rec
KC 77.29 76.65 77.22 76.36
Layered 76.81 76.49 76.85 76.08
</table>
<tableCaption confidence="0.8814535">
Table 2: evalb results for parsing with a
segmentation Oracle.
</tableCaption>
<bodyText confidence="0.99988816">
As expected, all the results are much lower than
those with gold fine-grained POS (Table 1).
When not using any external knowledge (Base-
line), the TB tagset performs slightly better than
the converted treebank (KC). Note, however, that
the difference is less pronounced than in the gold
morphology case. When varying the rare words
threshold from 2 to 10, performance drops consid-
erably. Without external knowledge, the parser is
facing difficulties coping with unseen events.
The incorporation of an external lexical knowl-
edge in the form of pruning illegal tag assignments
for unseen words based on the KC lexicon (Lex-
Filter) substantially improves the results (∼ 72 to
∼ 77). The additional lexical knowledge clearly
improves the parser. Moreover, varying the rare
words threshold in this setting hardly affects the
parser performance: the external lexicon suffices
to guide the parser in the right direction. Keep-
ing the rare words threshold high is desirable, as it
reduces overfitting to the treebank vocabulary.
We expected the addition of the semi-
supervised p(t → w) distribution (LexProbs) to
improve the parser, but found it to have an in-
significant effect. The correct segmentation seems
</bodyText>
<footnote confidence="0.9823078">
12We are forced to remove these sentences because of the
artificial setting in which the correct segmentation is given. In
the no-oracle setting (Sec. 5), we do include these sentences.
13The layered trees have an extra layer of bracketing
(tTS --+ txC). We remove this layer prior to evaluation.
</footnote>
<figure confidence="0.90231275">
Prec Rec
72.80 71.70
72.23 70.30
Prec Rec
67.66 64.92
67.22 64.31
TB
KC
</figure>
<page confidence="0.994718">
332
</page>
<bodyText confidence="0.995934327272727">
to remove enough ambiguity as to let the parser
base its decisions on the generic tag distribution
for rare events.
In all the settings with a Segmentation Oracle,
there is no significant difference between the KC
and the Layered representation. We prefer the lay-
ered representation as it provides more flexibility,
does not require trees tagged with the KC tagset,
and produces parse trees with the original TB POS
tags at the leaves.
5 Parsing without a Segmentation Oracle
When parsing real world data, correct token seg-
mentation is not known in advance. For method-
ological reasons, this issue has either been set-
aside (Tsarfaty and Sima’an, 2007), or dealt with
in a pipeline model in which a morphological dis-
ambiguator is run prior to parsing to determine the
correct segmentation. However, Tsarfaty (2006)
argues that there is a strong interaction between
syntax and morphological segmentation, and that
the two tasks should be modeled jointly, and not
in a pipeline model. Several studies followed this
line, (Cohen and Smith, 2007) the most recent of
which is Goldberg and Tsarfaty (2008), who pre-
sented a model based on unweighted lattice pars-
ing for performing the joint task.
This model uses a morphological analyzer to
construct a lattice over all possible morphologi-
cal analyses of an input sentence. The arcs of
the lattice are (w, t) pairs, and a lattice parser
is used to build a parse over the lattice. The
Viterbi parse over the lattice chooses a lattice path,
which induces a segmentation over the input sen-
tence. Thus, parsing and segmentation are per-
formed jointly.
Lexical rules in the model are defined over the
lattice arcs (t —* (w, t)|t), and smoothed probabil-
ities for them are estimated from the treebank via
relative frequency over terminal/preterminal pairs.
The lattice paths themselves are unweighted, re-
flecting the intuition that all morphological anal-
yses are a-priori equally likely, and that their per-
spective strengths should come from the segments
they contain and their interaction with the syntax.
Goldberg and Tsarfaty (2008) use a data-driven
morphological analyzer derived from the treebank.
Their better models incorporated some external
lexical knowledge by use of an Hebrew spell
checker to prune some illegal segmentations.
In what follows, we use the layered represen-
tation to adapt this joint model to use as its mor-
phological analyzer the wide coverage KC Ana-
lyzer in enhancement of a data-driven one. Then,
we further enhance the model with the semi-
supervised lexical probabilities described in Sec 3.
</bodyText>
<subsectionHeader confidence="0.971368">
5.1 Model
</subsectionHeader>
<bodyText confidence="0.999869210526316">
The model of Goldberg and Tsarfaty (2008) uses a
morphological analyzer to constructs a lattice for
each input token. Then, the sentence lattice is built
by concatenating the individual token lattices. The
morphological analyzer used in that work is data
driven based on treebank observations, and em-
ploys some well crafted heuristics for OOV tokens
(for details, see the original paper). Here, we use
instead a morphological analyzer which uses the
KC Lexicon for rare and OOV tokens.
We begin by adapting the rare vs. reliable events
distinction from Section 4 to cover unsegmented
tokens. We define a reliable token to be a token
from the training corpus, which each of its possi-
ble segments according to the training corpus was
seen in the training corpus at least K times.14 All
other tokens are considered to be rare.
Our morphological analyzer works as follows:
For reliable tokens, it returns the set of analyses
seen for this token in the treebank (each analysis
is a sequence of pairs of the form (w, tTB)).
For rare tokens, it returns the set of analyses re-
turned by the KC analyzer (here, analyses are se-
quences of pairs of the form (w, tKC)).
The lattice arcs, then, can take two possible
forms, either (w, tTB) or (w, tKC).
Lexical rules of the form tTB —* (w, tTB) are reli-
able, and their probabilities estimated via relative
frequency over events seen in training.
Lexical rules of the form tTB —* (w, tKC)
are estimated in accordance with the transfer
layer introduced above: p(tTB —* (w, tKC)) _
p(tKC|tTB)p((w, tKC)|tKC).
The remaining question is how to estimate
p((w, tKC)|tKC). Here, we use either the LexFil-
ter (estimated over all rare events) or LexProbs
(estimated via the semisupervised emission prob-
abilities)models, as defined in Section 4.1 above.
</bodyText>
<subsectionHeader confidence="0.895582">
5.2 Experiments
</subsectionHeader>
<bodyText confidence="0.998132">
As our Baseline, we take the best model of (Gold-
berg and Tsarfaty, 2008), run against the current
</bodyText>
<footnote confidence="0.975245333333333">
14Note that this is more inclusive than requiring that the
token itself is seen in the training corpus at least K times, as
some segments may be shared by several tokens.
</footnote>
<page confidence="0.998711">
333
</page>
<bodyText confidence="0.999987277777778">
version of the Treebank.15 This model uses the
same grammar as described in Section 4.1 above,
and use some external information in the form of a
spell-checker wordlist. We compare this Baseline
with the LexFilter and LexProbs models over the
Layered representation.
We use the same test/train splits as described in
Section 4. Contrary to the Oracle segmentation
setting, here we evaluate against all sentences, in-
cluding those containing tokens for which the KC
Analyzer does not contain any correct analyses.
Due to token segmentation ambiguity, the re-
sulting parse yields may be different than the gold
ones, and evalb can not be used. Instead, we use
the evaluation measure of (Tsarfaty, 2006), also
used in (Goldberg and Tsarfaty, 2008), which is
an adaptation of parseval to use characters instead
of space-delimited tokens as its basic units.
</bodyText>
<sectionHeader confidence="0.996453" genericHeader="evaluation">
Results and Discussion
</sectionHeader>
<table confidence="0.940775333333333">
Results are presented in Table 3.
rare: &lt; 2 rare: &lt; 10
Prec Rec Prec Rec
Baseline 67.71 66.35 — —
LexFilter 68.25 69.45 57.72 59.17
LexProbs 73.40 73.99 70.09 73.01
</table>
<tableCaption confidence="0.98398">
Table 3: Parsing results for the joint parsing+seg
task, with varying external knowledge
</tableCaption>
<bodyText confidence="0.97805847826087">
The results are expectedly lower than with the
segmentation Oracle, as the joint task is much
harder, but the external lexical information greatly
benefits the parser also in the joint setting. While
significant, the improvement from the Baseline to
LexFilter is quite small, which is due to the Base-
line’s own rather strong illegal analyses filtering
heuristic. However, unlike the oracle segmenta-
tion case, here the semisupervised lexical prob-
abilities (LexProbs) have a major effect on the
parser performance (— 69 to — 73.5 F-score), an
overall improvement of — 6.6 F-points over the
Baseline, which is the previous state-of-the art for
this joint task. This supports our intuition that rare
lexical events are better estimated using a large
unannotated corpus, and not using a generic tree-
bank distribution, or sparse treebank based counts,
and that lexical probabilities have a crucial role in
resolving segmentation ambiguities.
15While we use the same software as (Goldberg and Tsar-
faty, 2008), the results reported here are significantly lower.
This is due to differences in annotation scheme between V1
and V2 of the Hebrew TB
The parsers with the extended lexicon were un-
able to assign a parse to about 10 of the 483 test
sentences. We count them as having 0-Fscore
in the table results.16 The Baseline parser could
not assign a parse to more than twice that many
sentences, suggesting its lexical pruning heuris-
tic is quite harsh. In fact, the unparsed sen-
tences amount to most of the difference between
the Baseline and LexFilter parsers.
Here, changing the rare tokens threshold has
a significant effect on parsing accuracy, which
suggests that the segmentation for rare tokens is
highly consistent within the corpus. When an un-
known token is encountered, a clear bias should
be taken toward segmentations that were previ-
ously seen in the same corpus. Given that that ef-
fect is remedied to some extent by introducing the
semi-supervised lexical probabilities, we believe
that segmentation accuracy for unseen tokens can
be further improved, perhaps using resources such
as (Gabay et al., 2008), and techniques for incor-
porating some document, as opposed to sentence
level information, into the parsing process.
</bodyText>
<sectionHeader confidence="0.999731" genericHeader="conclusions">
6 Conclusions
</sectionHeader>
<bodyText confidence="0.99990932">
We present a framework for interfacing a parser
with an external lexicon following a differ-
ent annotation scheme. Unlike other studies
(Yang Huang et al., 2005; Szolovits, 2003) in
which such interfacing is achieved by a restricted
heuristic mapping, we propose a novel, stochastic
approach, based on a layered representation. We
show that using an external lexicon for dealing
with rare lexical events greatly benefits a PCFG
parser for Hebrew, and that results can be further
improved by the incorporation of lexical probabil-
ities estimated in a semi-supervised manner using
a wide-coverage lexicon and a large unannotated
corpus. In the future, we plan to integrate this
framework with a parsing model that is specifi-
cally crafted to cope with morphologically rich,
free-word order languages, as proposed in (Tsar-
faty and Sima’an, 2008).
Apart from Hebrew, our method is applicable
in any setting in which there exist a small tree-
bank and a wide-coverage lexical resource. For
example parsing Arabic using the Arabic Tree-
bank and the Buckwalter analyzer, or parsing En-
glish biomedical text using a biomedical treebank
and the UMLS Specialist Lexicon.
</bodyText>
<footnote confidence="0.5131335">
16When discarding these sentences from the test set, result
on the better LexProbs model leap to 74.95P/75.56R.
</footnote>
<page confidence="0.998529">
334
</page>
<sectionHeader confidence="0.995871" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.998878092307693">
M. Adler and M. Elhadad. 2006. An unsupervised
morpheme-based hmm for hebrew morphological
disambiguation. In Proc. of COLING/ACL2006.
Meni Adler, Yoav Goldberg, David Gabay, and
Michael Elhadad. 2008a. Unsupervised lexicon-
based resolution of unknown words for full morpho-
logical analysis. In Proc. of ACL 2008.
Meni Adler, Yael Netzer, David Gabay, Yoav Goldberg,
and Michael Elhadad. 2008b. Tagging a hebrew
corpus: The case of participles. In Proc. of LREC
2008.
Meni Adler. 2007. Hebrew Morphological Disam-
biguation: An Unsupervised Stochastic Word-based
Approach. Ph.D. thesis, Ben-Gurion University of
the Negev, Beer-Sheva, Israel.
Eugene Charniak, Glenn Carroll, John Adcock, An-
thony Cassandra, Yoshihiko Gotoh, Jeremy Katz,
Michael Littman, and John McCann. 1996. Taggers
for parsers. Artif. Intell., 85(1-2):45–57.
Shay B. Cohen and Noah A. Smith. 2007. Joint mor-
phological and syntactic disambiguation. In Pro-
ceedings of EMNLP-CoNLL-07, pages 208–217.
David Gabay, Ziv Ben Eliahu, and Michael Elhadad.
2008. Using wikipedia links to construct word seg-
mentation corpora. In Proc. of the WIKIAI-08 Work-
shop, AAAI-2008 Conference.
Yoav Goldberg and Reut Tsarfaty. 2008. A single gen-
erative model for joint morphological segmentation
and syntactic parsing. In Proc. ofACL 2008.
Yoav Goldberg, Meni Adler, and Michael Elhadad.
2008. Em can find pretty good hmm pos-taggers
(when given a good start). In Proc. of ACL 2008.
Noemie Guthmann, Yuval Krymolowski, Adi Milea,
and Yoad Winter. 2009. Automatic annotation of
morpho-syntactic dependencies in a modern hebrew
treebank. In Proc. of TLT.
Mohamed Maamouri, Ann Bies, and Seth Kulick.
2008. Enhanced annotation and parsing of the ara-
bic treebank. In INFOS 2008, Cairo, Egypt, March
27-29, 2008.
Yael Netzer, Meni Adler, David Gabay, and Michael
Elhadad. 2007. Can you tag the modal? you should!
In ACL07 Workshop on Computational Approaches
to Semitic Languages, Prague, Czech.
K. Sima’an, A. Itai, Y. Winter, A. Altman, and N. Nativ.
2001. Building a tree-bank of modern hebrew text.
Traitement Automatique des Langues, 42(2).
P. Szolovits. 2003. Adding a medical lexicon to an
english parser. In Proc. AMIA 2003 Annual Sympo-
sium.
Reut Tsarfaty and Khalil Sima’an. 2007. Three-
dimensional parametrization for parsing morpholog-
ically rich languages. In Proc. of IWPT 2007.
Reut Tsarfaty and Khalil Sima’an. 2008. Relational-
realizational parsing. In Proc. of CoLING, pages
889–896, Manchester, UK, August. Coling 2008.
Reut Tsarfaty. 2006. Integrated Morphological and
Syntactic Disambiguation for Modern Hebrew. In
Proceedings ofACL-SRW-06.
MS Yang Huang, MD Henry J. Lowe, PhD Dan Klein,
and MS Russell J. Cucina, MD. 2005. Improved
identification of noun phrases in clinical radiology
reports using a high-performance statistical natural
language parser augmented with the umls specialist
lexicon. JAm Med Inform Assoc, 12(3), May.
</reference>
<page confidence="0.999152">
335
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.220242">
<title confidence="0.993249">Enhancing Unlexicalized Parsing Performance using a Wide Coverage Lexicon, Fuzzy Tag-set Mapping, and EM-HMM-based Lexical Probabilities</title>
<degree confidence="0.382872">Reut of Computer Science, Ben Gurion University of the Negev for Logic, Language and Computation, University of Amsterdam</degree>
<email confidence="0.969563">R.Tsarfaty@uva.nl</email>
<abstract confidence="0.998683470588235">We present a framework for interfacing a PCFG parser with lexical information from an external resource following a different tagging scheme than the treebank. This is achieved by defining a stochastic mapping layer between the two resources. Lexical probabilities for rare events are estimated in a semi-supervised manner from a lexicon and large unannotated corpora. We show that this solution greatly enhances the performance of an unlexicalized Hebrew PCFG parser, resulting in state-of-the-art Hebrew parsing results both when a segmentation oracle is assumed, and in a real-word parsing scenario of parsing unsegmented tokens.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>M Adler</author>
<author>M Elhadad</author>
</authors>
<title>An unsupervised morpheme-based hmm for hebrew morphological disambiguation.</title>
<date>2006</date>
<booktitle>In Proc. of COLING/ACL2006.</booktitle>
<contexts>
<context position="15442" citStr="Adler and Elhadad (2006)" startWordPosition="2497" endWordPosition="2500">quires lexical probabilities of the form p(w|t) (Charniak et al., 1996). Such information is not readily available in the lexicon. However, it can be estimated from the lexicon and large unannotated corpora, by using the well-known Baum-Welch (EM) algorithm to learn a trigram HMM tagging model of the form p(t1, ... , tn, w1, ... , wn) = argmax H p(ti|ti_1, ti_2)p(wi|ti), and taking the emission probabilities p(w|t) of that model. In Hebrew, things are more complicated, as each emission w is not a space delimited token, but rather a smaller unit (a morphological segment, henceforth a segment). Adler and Elhadad (2006) present a lattice-based modification of the BaumWelch algorithm to handle this segmentation ambiguity. Traditionally, such unsupervised EM-trained HMM taggers are thought to be inaccurate, but (Goldberg et al., 2008) showed that by feeding the EM process with sufficiently good initial probabilities, accurate taggers (&gt; 91% accuracy) can be learned for both English and Hebrew, based on a (possibly incomplete) lexicon and large amount of raw text. They also present a method for automatically obtaining these initial probabilities. As stated in Section 2, the KC Analyzer (Hebrew Lexicon) coverage</context>
</contexts>
<marker>Adler, Elhadad, 2006</marker>
<rawString>M. Adler and M. Elhadad. 2006. An unsupervised morpheme-based hmm for hebrew morphological disambiguation. In Proc. of COLING/ACL2006.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Meni Adler</author>
<author>Yoav Goldberg</author>
<author>David Gabay</author>
<author>Michael Elhadad</author>
</authors>
<title>Unsupervised lexiconbased resolution of unknown words for full morphological analysis.</title>
<date>2008</date>
<booktitle>In Proc. of ACL</booktitle>
<contexts>
<context position="4015" citStr="Adler et al., 2008" startWordPosition="610" endWordPosition="613"> be taken only on the proviso that the annotation schemes of the two resources can be aligned. We take Modern Hebrew parsing as our case study. Hebrew is a Semitic language with rich 1This is not the case with other languages, and also not true for English when adaptation scenarios are considered. Proceedings of the 12th Conference of the European Chapter of the ACL, pages 327–335, Athens, Greece, 30 March – 3 April 2009. c�2009 Association for Computational Linguistics 327 morphological structure. This rich structure yields a large number of distinct word forms, resulting in a high OOV rate (Adler et al., 2008a). This poses a serious problem for estimating lexical probabilities from small annotated corpora, such as the Hebrew treebank (Sima’an et al., 2001). Hebrew has a wide coverage lexicon / morphological-analyzer (henceforth, KC Analyzer) available2, but its tagset is different than the one used by the Hebrew Treebank. These are not mere technical differences, but derive from different perspectives on the data. The Hebrew TB tagset is syntactic in nature, while the KC tagset is lexicographic. This difference in perspective yields different performance for parsers induced from tagged data, and a</context>
<context position="8040" citStr="Adler et al., 2008" startWordPosition="1246" endWordPosition="1249">cannot be assigned any analysis by the KC Lexicon, and Adler et al.(2008a) report that roughly 4.5% of the tokens in a 42M tokens corpus of news text are unknown to the Lexicon. For roughly 400 unique cases in the Treebank, the Lexicon provides some analyses, but not a correct one. This goes to emphasize the productive nature of Hebrew morphology, and stress that robust lexical probability estimates cannot be derived from an annotated resource as small as the Treebank. Lexical vs. Syntactic POS Tags The analyses produced by the KC Analyzer are not compatible with the Hebrew TB. The KC tagset (Adler et al., 2008b; Netzer et al., 2007; Adler, 2007) takes a lexical approach to POS tagging (“a word can assume only POS tags that would be assigned to it in a dictionary”), while the TB takes a syntactic one (“if the word in this particular positions functions as an Adverb, tag it as an Adverb, even though it is listed in the dictionary only as a Noun”). We present 2 cases that emphasize the difference: Adjectives: the Treebank 3Our method is orthogonal to lexicalization and can be used in addition to it if one so wishes. 4In these counts, all numbers are conflated to one canonical form 328 treats any word </context>
<context position="11185" citStr="Adler et al., 2008" startWordPosition="1796" endWordPosition="1799">many linguistically motivated inquiries, the rest of this paper is 5Another solution would be to add these missing cases to the KC Lexicon. In our view this act is harmful: we don’t want our Lexicon to artificially overfit our annotated corpora. 6A “tag” in this context means the complete morphological information available for a morpheme in the Treebank: its part of speech, inflectional features and possessive suffixes, but not prefixes or nominative and accusative suffixes, which are taken to be separate morphemes. devoted to using it for constructing a better parser. Tagsets Comparison In (Adler et al., 2008b), we hypothesized that due to its syntax-based nature, the Treebank morphological tagset is more suitable than the KC one for syntax related tasks. Is this really the case? To verify it, we simulate a scenario in which the complete gold morphological information is available. We train 2 PCFG grammars, one on each tagged version of the Treebank, and test them on the subset of the development set in which every token is completely covered by the KC Analyzer (351 sentences).7 The input to the parser is the yields and disambiguated pre-terminals of the trees to be parsed. The parsing results are</context>
</contexts>
<marker>Adler, Goldberg, Gabay, Elhadad, 2008</marker>
<rawString>Meni Adler, Yoav Goldberg, David Gabay, and Michael Elhadad. 2008a. Unsupervised lexiconbased resolution of unknown words for full morphological analysis. In Proc. of ACL 2008.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Meni Adler</author>
<author>Yael Netzer</author>
<author>David Gabay</author>
<author>Yoav Goldberg</author>
<author>Michael Elhadad</author>
</authors>
<title>Tagging a hebrew corpus: The case of participles.</title>
<date>2008</date>
<booktitle>In Proc. of LREC</booktitle>
<contexts>
<context position="4015" citStr="Adler et al., 2008" startWordPosition="610" endWordPosition="613"> be taken only on the proviso that the annotation schemes of the two resources can be aligned. We take Modern Hebrew parsing as our case study. Hebrew is a Semitic language with rich 1This is not the case with other languages, and also not true for English when adaptation scenarios are considered. Proceedings of the 12th Conference of the European Chapter of the ACL, pages 327–335, Athens, Greece, 30 March – 3 April 2009. c�2009 Association for Computational Linguistics 327 morphological structure. This rich structure yields a large number of distinct word forms, resulting in a high OOV rate (Adler et al., 2008a). This poses a serious problem for estimating lexical probabilities from small annotated corpora, such as the Hebrew treebank (Sima’an et al., 2001). Hebrew has a wide coverage lexicon / morphological-analyzer (henceforth, KC Analyzer) available2, but its tagset is different than the one used by the Hebrew Treebank. These are not mere technical differences, but derive from different perspectives on the data. The Hebrew TB tagset is syntactic in nature, while the KC tagset is lexicographic. This difference in perspective yields different performance for parsers induced from tagged data, and a</context>
<context position="8040" citStr="Adler et al., 2008" startWordPosition="1246" endWordPosition="1249">cannot be assigned any analysis by the KC Lexicon, and Adler et al.(2008a) report that roughly 4.5% of the tokens in a 42M tokens corpus of news text are unknown to the Lexicon. For roughly 400 unique cases in the Treebank, the Lexicon provides some analyses, but not a correct one. This goes to emphasize the productive nature of Hebrew morphology, and stress that robust lexical probability estimates cannot be derived from an annotated resource as small as the Treebank. Lexical vs. Syntactic POS Tags The analyses produced by the KC Analyzer are not compatible with the Hebrew TB. The KC tagset (Adler et al., 2008b; Netzer et al., 2007; Adler, 2007) takes a lexical approach to POS tagging (“a word can assume only POS tags that would be assigned to it in a dictionary”), while the TB takes a syntactic one (“if the word in this particular positions functions as an Adverb, tag it as an Adverb, even though it is listed in the dictionary only as a Noun”). We present 2 cases that emphasize the difference: Adjectives: the Treebank 3Our method is orthogonal to lexicalization and can be used in addition to it if one so wishes. 4In these counts, all numbers are conflated to one canonical form 328 treats any word </context>
<context position="11185" citStr="Adler et al., 2008" startWordPosition="1796" endWordPosition="1799">many linguistically motivated inquiries, the rest of this paper is 5Another solution would be to add these missing cases to the KC Lexicon. In our view this act is harmful: we don’t want our Lexicon to artificially overfit our annotated corpora. 6A “tag” in this context means the complete morphological information available for a morpheme in the Treebank: its part of speech, inflectional features and possessive suffixes, but not prefixes or nominative and accusative suffixes, which are taken to be separate morphemes. devoted to using it for constructing a better parser. Tagsets Comparison In (Adler et al., 2008b), we hypothesized that due to its syntax-based nature, the Treebank morphological tagset is more suitable than the KC one for syntax related tasks. Is this really the case? To verify it, we simulate a scenario in which the complete gold morphological information is available. We train 2 PCFG grammars, one on each tagged version of the Treebank, and test them on the subset of the development set in which every token is completely covered by the KC Analyzer (351 sentences).7 The input to the parser is the yields and disambiguated pre-terminals of the trees to be parsed. The parsing results are</context>
</contexts>
<marker>Adler, Netzer, Gabay, Goldberg, Elhadad, 2008</marker>
<rawString>Meni Adler, Yael Netzer, David Gabay, Yoav Goldberg, and Michael Elhadad. 2008b. Tagging a hebrew corpus: The case of participles. In Proc. of LREC 2008.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Meni Adler</author>
</authors>
<title>Hebrew Morphological Disambiguation: An Unsupervised Stochastic Word-based Approach.</title>
<date>2007</date>
<tech>Ph.D. thesis,</tech>
<institution>Ben-Gurion University of the Negev,</institution>
<location>Beer-Sheva, Israel.</location>
<contexts>
<context position="8076" citStr="Adler, 2007" startWordPosition="1254" endWordPosition="1255">Lexicon, and Adler et al.(2008a) report that roughly 4.5% of the tokens in a 42M tokens corpus of news text are unknown to the Lexicon. For roughly 400 unique cases in the Treebank, the Lexicon provides some analyses, but not a correct one. This goes to emphasize the productive nature of Hebrew morphology, and stress that robust lexical probability estimates cannot be derived from an annotated resource as small as the Treebank. Lexical vs. Syntactic POS Tags The analyses produced by the KC Analyzer are not compatible with the Hebrew TB. The KC tagset (Adler et al., 2008b; Netzer et al., 2007; Adler, 2007) takes a lexical approach to POS tagging (“a word can assume only POS tags that would be assigned to it in a dictionary”), while the TB takes a syntactic one (“if the word in this particular positions functions as an Adverb, tag it as an Adverb, even though it is listed in the dictionary only as a Noun”). We present 2 cases that emphasize the difference: Adjectives: the Treebank 3Our method is orthogonal to lexicalization and can be used in addition to it if one so wishes. 4In these counts, all numbers are conflated to one canonical form 328 treats any word in an adjectivial position as an Adj</context>
<context position="16482" citStr="Adler, 2007" startWordPosition="2660" endWordPosition="2661">ge amount of raw text. They also present a method for automatically obtaining these initial probabilities. As stated in Section 2, the KC Analyzer (Hebrew Lexicon) coverage is incomplete. Adler et al.(2008a) use the lexicon to learn a Maximum Entropy model for predicting possible analyses for unknown tokens based on their orthography, thus extending the lexicon to cover (even if noisily) any unknown token. In what follows, we use KCAnalyzer to refer to this extended version. Finally, these 3 works are combined to create a state-of-the-art POS-tagger and morphological disambiguator for Hebrew (Adler, 2007): initial lexical probabilities are computed based on the MaxEnt-extended KC Lexicon, and are then fed to the modified Baum-Welch algorithm, which is used to fit a morpheme-based tagging model over a very large corpora. Note that the emission probabilities P(W|T) of that model cover all the morphemes seen in the unannotated training corpus, even those not covered by the KC Analyzer.8 We hypothesize that such emission probabilities are good estimators for the morpheme-based P(T —* W) lexical probabilities needed by a PCFG parser. To test this hypothesis, we use it to estimate p(tKC —* w) in som</context>
</contexts>
<marker>Adler, 2007</marker>
<rawString>Meni Adler. 2007. Hebrew Morphological Disambiguation: An Unsupervised Stochastic Word-based Approach. Ph.D. thesis, Ben-Gurion University of the Negev, Beer-Sheva, Israel.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Eugene Charniak</author>
<author>Glenn Carroll</author>
<author>John Adcock</author>
<author>Anthony Cassandra</author>
<author>Yoshihiko Gotoh</author>
<author>Jeremy Katz</author>
<author>Michael Littman</author>
<author>John McCann</author>
</authors>
<title>Taggers for parsers.</title>
<date>1996</date>
<journal>Artif. Intell.,</journal>
<pages>85--1</pages>
<contexts>
<context position="14889" citStr="Charniak et al., 1996" startWordPosition="2405" endWordPosition="2408">l analyzer assigns all possible analyses to a given terminal symbol. Our terminal symbols are, therefore, pairs: (w, t), and our lexical rules are of the form t —* (w, t). This gives rise to the following equivalence: p((w, tKC)|tTB) = p(tKC|tTB)p((w, tKC)|tKC) In Sections (4, 5) we use this layered generative process to enable a smooth integration of a PCFG treebank-learned grammar, an external wide-coverage lexicon, and lexical probabilities learned in a semi-supervised manner. 3 Semi-supervised Lexical Probability Estimations A PCFG parser requires lexical probabilities of the form p(w|t) (Charniak et al., 1996). Such information is not readily available in the lexicon. However, it can be estimated from the lexicon and large unannotated corpora, by using the well-known Baum-Welch (EM) algorithm to learn a trigram HMM tagging model of the form p(t1, ... , tn, w1, ... , wn) = argmax H p(ti|ti_1, ti_2)p(wi|ti), and taking the emission probabilities p(w|t) of that model. In Hebrew, things are more complicated, as each emission w is not a space delimited token, but rather a smaller unit (a morphological segment, henceforth a segment). Adler and Elhadad (2006) present a lattice-based modification of the Ba</context>
</contexts>
<marker>Charniak, Carroll, Adcock, Cassandra, Gotoh, Katz, Littman, McCann, 1996</marker>
<rawString>Eugene Charniak, Glenn Carroll, John Adcock, Anthony Cassandra, Yoshihiko Gotoh, Jeremy Katz, Michael Littman, and John McCann. 1996. Taggers for parsers. Artif. Intell., 85(1-2):45–57.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Shay B Cohen</author>
<author>Noah A Smith</author>
</authors>
<title>Joint morphological and syntactic disambiguation.</title>
<date>2007</date>
<booktitle>In Proceedings of EMNLP-CoNLL-07,</booktitle>
<pages>208--217</pages>
<contexts>
<context position="27787" citStr="Cohen and Smith, 2007" startWordPosition="4539" endWordPosition="4542">gs at the leaves. 5 Parsing without a Segmentation Oracle When parsing real world data, correct token segmentation is not known in advance. For methodological reasons, this issue has either been setaside (Tsarfaty and Sima’an, 2007), or dealt with in a pipeline model in which a morphological disambiguator is run prior to parsing to determine the correct segmentation. However, Tsarfaty (2006) argues that there is a strong interaction between syntax and morphological segmentation, and that the two tasks should be modeled jointly, and not in a pipeline model. Several studies followed this line, (Cohen and Smith, 2007) the most recent of which is Goldberg and Tsarfaty (2008), who presented a model based on unweighted lattice parsing for performing the joint task. This model uses a morphological analyzer to construct a lattice over all possible morphological analyses of an input sentence. The arcs of the lattice are (w, t) pairs, and a lattice parser is used to build a parse over the lattice. The Viterbi parse over the lattice chooses a lattice path, which induces a segmentation over the input sentence. Thus, parsing and segmentation are performed jointly. Lexical rules in the model are defined over the latt</context>
</contexts>
<marker>Cohen, Smith, 2007</marker>
<rawString>Shay B. Cohen and Noah A. Smith. 2007. Joint morphological and syntactic disambiguation. In Proceedings of EMNLP-CoNLL-07, pages 208–217.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David Gabay</author>
<author>Ziv Ben Eliahu</author>
<author>Michael Elhadad</author>
</authors>
<title>Using wikipedia links to construct word segmentation corpora.</title>
<date>2008</date>
<booktitle>In Proc. of the WIKIAI-08 Workshop, AAAI-2008 Conference.</booktitle>
<contexts>
<context position="34613" citStr="Gabay et al., 2008" startWordPosition="5666" endWordPosition="5669">t of the difference between the Baseline and LexFilter parsers. Here, changing the rare tokens threshold has a significant effect on parsing accuracy, which suggests that the segmentation for rare tokens is highly consistent within the corpus. When an unknown token is encountered, a clear bias should be taken toward segmentations that were previously seen in the same corpus. Given that that effect is remedied to some extent by introducing the semi-supervised lexical probabilities, we believe that segmentation accuracy for unseen tokens can be further improved, perhaps using resources such as (Gabay et al., 2008), and techniques for incorporating some document, as opposed to sentence level information, into the parsing process. 6 Conclusions We present a framework for interfacing a parser with an external lexicon following a different annotation scheme. Unlike other studies (Yang Huang et al., 2005; Szolovits, 2003) in which such interfacing is achieved by a restricted heuristic mapping, we propose a novel, stochastic approach, based on a layered representation. We show that using an external lexicon for dealing with rare lexical events greatly benefits a PCFG parser for Hebrew, and that results can b</context>
</contexts>
<marker>Gabay, Eliahu, Elhadad, 2008</marker>
<rawString>David Gabay, Ziv Ben Eliahu, and Michael Elhadad. 2008. Using wikipedia links to construct word segmentation corpora. In Proc. of the WIKIAI-08 Workshop, AAAI-2008 Conference.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yoav Goldberg</author>
<author>Reut Tsarfaty</author>
</authors>
<title>A single generative model for joint morphological segmentation and syntactic parsing.</title>
<date>2008</date>
<booktitle>In Proc. ofACL</booktitle>
<contexts>
<context position="6008" citStr="Goldberg and Tsarfaty, 2008" startWordPosition="932" endWordPosition="936">e following word and pronominal elements often appear as suffixes. The segmentation of prefixes and suffixes can be ambiguous and must be determined in a specific context only. Thus, the leaves of the syntactic parse trees do not correspond to space-delimited tokens, and the yield of the tree is not known in advance. We show that enhancing the parser with external lexical information is greatly beneficial, both in an artificial scenario where the token segmentation is assumed to be known (Sec. 4), and in a more realistic one in which parsing and segmentation are handled jointly by the parser (Goldberg and Tsarfaty, 2008) (Sec. 5). External lexical information enhances unlexicalized parsing performance by as much as 6.67 F-points, an error reduction of 20% over a Treebank-only parser. Our results are not only the best published results for parsing Hebrew, but also on par with state-of-the-art 2http://mila.cs.technion.ac.il/hebrew/resources/lexicons/ lexicalized Arabic parsing results assuming goldstandard fine-grained Part-of-Speech (Maamouri et al., 2008).3 2 A Tale of Two Resources Modern Hebrew has 2 major linguistic resources: the Hebrew Treebank (TB), and a wide coverage Lexicon-based morphological analyz</context>
<context position="19920" citStr="Goldberg and Tsarfaty, 2008" startWordPosition="3220" endWordPosition="3223">ange only the way lexical probabilities are implemented. The grammar is an unlexicalized treebank-estimated PCFG with linguistically motivated state-splits.9 In what follows, a lexical event is a word segment which is assigned a single POS thereby functioning as a leaf in a syntactic parse tree. A rare 9Details of the grammar: all functional information is removed from the non-terminals, finite and non-finite verbs, as well as possessive and other PPs are distinguished, definiteness structure of constituents is marked, and parent annotation is employed. It is the same grammar as described in (Goldberg and Tsarfaty, 2008). (lexical) event is an event occurring less than K times in the training data, and a reliable (lexical) event is one occurring at least K times in the training data. We use OOV to denote lexical events appearing 0 times in the training data. count(·) is a counting function over the training data, rare stands for any rare event, and wrare is a specific rare event. KCA(·) is the KC Analyzer function, mapping a lexical event to a set of possible tags (analyses) according to the lexicon. Lexical Models All our models use relative frequency estimated probabilities for reliable lexical events: p(t </context>
<context position="24146" citStr="Goldberg and Tsarfaty, 2008" startWordPosition="3933" endWordPosition="3936">e perform all our experiments on Version 2 of the Hebrew Treebank, and follow the train/test/dev split introduced in (Tsarfaty and Sima’an, 2007): section 1 is used for development, sections 2-12 for training, and section 13 is the test set, which we do not use in this work. All the reported results are on the development set.10 After removal of empty sentences, we have 5241 sentences for training, and 483 for testing. Due to some changes in the Treebank11, our results are not directly comparable to earlier works. However, our baseline models are very similar to the models presented in, e.g. (Goldberg and Tsarfaty, 2008). In order to compare the performance of the model on the various tagset representations (TB tags, KC tags, Layered), we remove from the test set 51 sentences in which at least one token is marked as not having any correct segmentation in the KC Analyzer. This introduces a slight bias in 10This work is part of an ongoing work on a parser, and the test set is reserved for final evaluation of the entire system. 11Normalization of numbers and percents, correcting of some incorrect trees, etc. favor of the KC-tags setting, and makes the test somewhat easier for all the models. However, it allows f</context>
<context position="27844" citStr="Goldberg and Tsarfaty (2008)" startWordPosition="4549" endWordPosition="4552">Oracle When parsing real world data, correct token segmentation is not known in advance. For methodological reasons, this issue has either been setaside (Tsarfaty and Sima’an, 2007), or dealt with in a pipeline model in which a morphological disambiguator is run prior to parsing to determine the correct segmentation. However, Tsarfaty (2006) argues that there is a strong interaction between syntax and morphological segmentation, and that the two tasks should be modeled jointly, and not in a pipeline model. Several studies followed this line, (Cohen and Smith, 2007) the most recent of which is Goldberg and Tsarfaty (2008), who presented a model based on unweighted lattice parsing for performing the joint task. This model uses a morphological analyzer to construct a lattice over all possible morphological analyses of an input sentence. The arcs of the lattice are (w, t) pairs, and a lattice parser is used to build a parse over the lattice. The Viterbi parse over the lattice chooses a lattice path, which induces a segmentation over the input sentence. Thus, parsing and segmentation are performed jointly. Lexical rules in the model are defined over the lattice arcs (t —* (w, t)|t), and smoothed probabilities for </context>
<context position="29353" citStr="Goldberg and Tsarfaty (2008)" startWordPosition="4795" endWordPosition="4798"> segments they contain and their interaction with the syntax. Goldberg and Tsarfaty (2008) use a data-driven morphological analyzer derived from the treebank. Their better models incorporated some external lexical knowledge by use of an Hebrew spell checker to prune some illegal segmentations. In what follows, we use the layered representation to adapt this joint model to use as its morphological analyzer the wide coverage KC Analyzer in enhancement of a data-driven one. Then, we further enhance the model with the semisupervised lexical probabilities described in Sec 3. 5.1 Model The model of Goldberg and Tsarfaty (2008) uses a morphological analyzer to constructs a lattice for each input token. Then, the sentence lattice is built by concatenating the individual token lattices. The morphological analyzer used in that work is data driven based on treebank observations, and employs some well crafted heuristics for OOV tokens (for details, see the original paper). Here, we use instead a morphological analyzer which uses the KC Lexicon for rare and OOV tokens. We begin by adapting the rare vs. reliable events distinction from Section 4 to cover unsegmented tokens. We define a reliable token to be a token from the</context>
<context position="31177" citStr="Goldberg and Tsarfaty, 2008" startWordPosition="5103" endWordPosition="5107"> Lexical rules of the form tTB —* (w, tTB) are reliable, and their probabilities estimated via relative frequency over events seen in training. Lexical rules of the form tTB —* (w, tKC) are estimated in accordance with the transfer layer introduced above: p(tTB —* (w, tKC)) _ p(tKC|tTB)p((w, tKC)|tKC). The remaining question is how to estimate p((w, tKC)|tKC). Here, we use either the LexFilter (estimated over all rare events) or LexProbs (estimated via the semisupervised emission probabilities)models, as defined in Section 4.1 above. 5.2 Experiments As our Baseline, we take the best model of (Goldberg and Tsarfaty, 2008), run against the current 14Note that this is more inclusive than requiring that the token itself is seen in the training corpus at least K times, as some segments may be shared by several tokens. 333 version of the Treebank.15 This model uses the same grammar as described in Section 4.1 above, and use some external information in the form of a spell-checker wordlist. We compare this Baseline with the LexFilter and LexProbs models over the Layered representation. We use the same test/train splits as described in Section 4. Contrary to the Oracle segmentation setting, here we evaluate against a</context>
<context position="33507" citStr="Goldberg and Tsarfaty, 2008" startWordPosition="5481" endWordPosition="5485">nlike the oracle segmentation case, here the semisupervised lexical probabilities (LexProbs) have a major effect on the parser performance (— 69 to — 73.5 F-score), an overall improvement of — 6.6 F-points over the Baseline, which is the previous state-of-the art for this joint task. This supports our intuition that rare lexical events are better estimated using a large unannotated corpus, and not using a generic treebank distribution, or sparse treebank based counts, and that lexical probabilities have a crucial role in resolving segmentation ambiguities. 15While we use the same software as (Goldberg and Tsarfaty, 2008), the results reported here are significantly lower. This is due to differences in annotation scheme between V1 and V2 of the Hebrew TB The parsers with the extended lexicon were unable to assign a parse to about 10 of the 483 test sentences. We count them as having 0-Fscore in the table results.16 The Baseline parser could not assign a parse to more than twice that many sentences, suggesting its lexical pruning heuristic is quite harsh. In fact, the unparsed sentences amount to most of the difference between the Baseline and LexFilter parsers. Here, changing the rare tokens threshold has a si</context>
</contexts>
<marker>Goldberg, Tsarfaty, 2008</marker>
<rawString>Yoav Goldberg and Reut Tsarfaty. 2008. A single generative model for joint morphological segmentation and syntactic parsing. In Proc. ofACL 2008.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yoav Goldberg</author>
<author>Meni Adler</author>
<author>Michael Elhadad</author>
</authors>
<title>Em can find pretty good hmm pos-taggers (when given a good start).</title>
<date>2008</date>
<booktitle>In Proc. of ACL</booktitle>
<contexts>
<context position="15659" citStr="Goldberg et al., 2008" startWordPosition="2528" endWordPosition="2531">e well-known Baum-Welch (EM) algorithm to learn a trigram HMM tagging model of the form p(t1, ... , tn, w1, ... , wn) = argmax H p(ti|ti_1, ti_2)p(wi|ti), and taking the emission probabilities p(w|t) of that model. In Hebrew, things are more complicated, as each emission w is not a space delimited token, but rather a smaller unit (a morphological segment, henceforth a segment). Adler and Elhadad (2006) present a lattice-based modification of the BaumWelch algorithm to handle this segmentation ambiguity. Traditionally, such unsupervised EM-trained HMM taggers are thought to be inaccurate, but (Goldberg et al., 2008) showed that by feeding the EM process with sufficiently good initial probabilities, accurate taggers (&gt; 91% accuracy) can be learned for both English and Hebrew, based on a (possibly incomplete) lexicon and large amount of raw text. They also present a method for automatically obtaining these initial probabilities. As stated in Section 2, the KC Analyzer (Hebrew Lexicon) coverage is incomplete. Adler et al.(2008a) use the lexicon to learn a Maximum Entropy model for predicting possible analyses for unknown tokens based on their orthography, thus extending the lexicon to cover (even if noisily</context>
</contexts>
<marker>Goldberg, Adler, Elhadad, 2008</marker>
<rawString>Yoav Goldberg, Meni Adler, and Michael Elhadad. 2008. Em can find pretty good hmm pos-taggers (when given a good start). In Proc. of ACL 2008.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Noemie Guthmann</author>
<author>Yuval Krymolowski</author>
<author>Adi Milea</author>
<author>Yoad Winter</author>
</authors>
<title>Automatic annotation of morpho-syntactic dependencies in a modern hebrew treebank.</title>
<date>2009</date>
<booktitle>In Proc. of TLT.</booktitle>
<contexts>
<context position="6856" citStr="Guthmann et al., 2009" startWordPosition="1050" endWordPosition="1053">sing Hebrew, but also on par with state-of-the-art 2http://mila.cs.technion.ac.il/hebrew/resources/lexicons/ lexicalized Arabic parsing results assuming goldstandard fine-grained Part-of-Speech (Maamouri et al., 2008).3 2 A Tale of Two Resources Modern Hebrew has 2 major linguistic resources: the Hebrew Treebank (TB), and a wide coverage Lexicon-based morphological analyzer developed and maintained by the Knowledge Center for Processing Hebrew (KC Analyzer). The Hebrew Treebank consists of sentences manually annotated with constituent-based syntactic information. The most recent version (V2) (Guthmann et al., 2009) has 6,219 sentences, and covers 28,349 unique tokens and 17,731 unique segments4. The KC Analyzer assigns morphological analyses (prefixes, suffixes, POS, gender, person, etc.) to Hebrew tokens. It is based on a lexicon of roughly 25,000 word lemmas and their inflection patterns. From these, 562,439 unique word forms are derived. These are then prefixed (subject to constraints) by 73 prepositional prefixes. It is interesting to note that even with these numbers, the Lexicon’s coverage is far from complete. Roughly 1,500 unique tokens from the Hebrew Treebank cannot be assigned any analysis by</context>
</contexts>
<marker>Guthmann, Krymolowski, Milea, Winter, 2009</marker>
<rawString>Noemie Guthmann, Yuval Krymolowski, Adi Milea, and Yoad Winter. 2009. Automatic annotation of morpho-syntactic dependencies in a modern hebrew treebank. In Proc. of TLT.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mohamed Maamouri</author>
<author>Ann Bies</author>
<author>Seth Kulick</author>
</authors>
<title>Enhanced annotation and parsing of the arabic treebank.</title>
<date>2008</date>
<booktitle>In INFOS 2008,</booktitle>
<location>Cairo, Egypt,</location>
<contexts>
<context position="6451" citStr="Maamouri et al., 2008" startWordPosition="991" endWordPosition="994">e token segmentation is assumed to be known (Sec. 4), and in a more realistic one in which parsing and segmentation are handled jointly by the parser (Goldberg and Tsarfaty, 2008) (Sec. 5). External lexical information enhances unlexicalized parsing performance by as much as 6.67 F-points, an error reduction of 20% over a Treebank-only parser. Our results are not only the best published results for parsing Hebrew, but also on par with state-of-the-art 2http://mila.cs.technion.ac.il/hebrew/resources/lexicons/ lexicalized Arabic parsing results assuming goldstandard fine-grained Part-of-Speech (Maamouri et al., 2008).3 2 A Tale of Two Resources Modern Hebrew has 2 major linguistic resources: the Hebrew Treebank (TB), and a wide coverage Lexicon-based morphological analyzer developed and maintained by the Knowledge Center for Processing Hebrew (KC Analyzer). The Hebrew Treebank consists of sentences manually annotated with constituent-based syntactic information. The most recent version (V2) (Guthmann et al., 2009) has 6,219 sentences, and covers 28,349 unique tokens and 17,731 unique segments4. The KC Analyzer assigns morphological analyses (prefixes, suffixes, POS, gender, person, etc.) to Hebrew tokens.</context>
</contexts>
<marker>Maamouri, Bies, Kulick, 2008</marker>
<rawString>Mohamed Maamouri, Ann Bies, and Seth Kulick. 2008. Enhanced annotation and parsing of the arabic treebank. In INFOS 2008, Cairo, Egypt, March 27-29, 2008.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yael Netzer</author>
<author>Meni Adler</author>
<author>David Gabay</author>
<author>Michael Elhadad</author>
</authors>
<title>Can you tag the modal? you should!</title>
<date>2007</date>
<booktitle>In ACL07 Workshop on Computational Approaches to Semitic Languages,</booktitle>
<location>Prague, Czech.</location>
<contexts>
<context position="8062" citStr="Netzer et al., 2007" startWordPosition="1250" endWordPosition="1253">y analysis by the KC Lexicon, and Adler et al.(2008a) report that roughly 4.5% of the tokens in a 42M tokens corpus of news text are unknown to the Lexicon. For roughly 400 unique cases in the Treebank, the Lexicon provides some analyses, but not a correct one. This goes to emphasize the productive nature of Hebrew morphology, and stress that robust lexical probability estimates cannot be derived from an annotated resource as small as the Treebank. Lexical vs. Syntactic POS Tags The analyses produced by the KC Analyzer are not compatible with the Hebrew TB. The KC tagset (Adler et al., 2008b; Netzer et al., 2007; Adler, 2007) takes a lexical approach to POS tagging (“a word can assume only POS tags that would be assigned to it in a dictionary”), while the TB takes a syntactic one (“if the word in this particular positions functions as an Adverb, tag it as an Adverb, even though it is listed in the dictionary only as a Noun”). We present 2 cases that emphasize the difference: Adjectives: the Treebank 3Our method is orthogonal to lexicalization and can be used in addition to it if one so wishes. 4In these counts, all numbers are conflated to one canonical form 328 treats any word in an adjectivial posi</context>
</contexts>
<marker>Netzer, Adler, Gabay, Elhadad, 2007</marker>
<rawString>Yael Netzer, Meni Adler, David Gabay, and Michael Elhadad. 2007. Can you tag the modal? you should! In ACL07 Workshop on Computational Approaches to Semitic Languages, Prague, Czech.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Sima’an</author>
<author>A Itai</author>
<author>Y Winter</author>
<author>A Altman</author>
<author>N Nativ</author>
</authors>
<title>Building a tree-bank of modern hebrew text.</title>
<date>2001</date>
<booktitle>Traitement Automatique des Langues,</booktitle>
<volume>42</volume>
<issue>2</issue>
<marker>Sima’an, Itai, Winter, Altman, Nativ, 2001</marker>
<rawString>K. Sima’an, A. Itai, Y. Winter, A. Altman, and N. Nativ. 2001. Building a tree-bank of modern hebrew text. Traitement Automatique des Langues, 42(2).</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Szolovits</author>
</authors>
<title>Adding a medical lexicon to an english parser.</title>
<date>2003</date>
<booktitle>In Proc. AMIA 2003 Annual Symposium.</booktitle>
<contexts>
<context position="34922" citStr="Szolovits, 2003" startWordPosition="5715" endWordPosition="5716">oward segmentations that were previously seen in the same corpus. Given that that effect is remedied to some extent by introducing the semi-supervised lexical probabilities, we believe that segmentation accuracy for unseen tokens can be further improved, perhaps using resources such as (Gabay et al., 2008), and techniques for incorporating some document, as opposed to sentence level information, into the parsing process. 6 Conclusions We present a framework for interfacing a parser with an external lexicon following a different annotation scheme. Unlike other studies (Yang Huang et al., 2005; Szolovits, 2003) in which such interfacing is achieved by a restricted heuristic mapping, we propose a novel, stochastic approach, based on a layered representation. We show that using an external lexicon for dealing with rare lexical events greatly benefits a PCFG parser for Hebrew, and that results can be further improved by the incorporation of lexical probabilities estimated in a semi-supervised manner using a wide-coverage lexicon and a large unannotated corpus. In the future, we plan to integrate this framework with a parsing model that is specifically crafted to cope with morphologically rich, free-wor</context>
</contexts>
<marker>Szolovits, 2003</marker>
<rawString>P. Szolovits. 2003. Adding a medical lexicon to an english parser. In Proc. AMIA 2003 Annual Symposium.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Reut Tsarfaty</author>
<author>Khalil Sima’an</author>
</authors>
<title>Threedimensional parametrization for parsing morphologically rich languages.</title>
<date>2007</date>
<booktitle>In Proc. of IWPT</booktitle>
<marker>Tsarfaty, Sima’an, 2007</marker>
<rawString>Reut Tsarfaty and Khalil Sima’an. 2007. Threedimensional parametrization for parsing morphologically rich languages. In Proc. of IWPT 2007.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Reut Tsarfaty</author>
<author>Khalil Sima’an</author>
</authors>
<title>Relationalrealizational parsing.</title>
<date>2008</date>
<booktitle>In Proc. of CoLING,</booktitle>
<pages>889--896</pages>
<location>Manchester, UK,</location>
<marker>Tsarfaty, Sima’an, 2008</marker>
<rawString>Reut Tsarfaty and Khalil Sima’an. 2008. Relationalrealizational parsing. In Proc. of CoLING, pages 889–896, Manchester, UK, August. Coling 2008.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Reut Tsarfaty</author>
</authors>
<title>Integrated Morphological and Syntactic Disambiguation for Modern Hebrew.</title>
<date>2006</date>
<booktitle>In Proceedings ofACL-SRW-06.</booktitle>
<contexts>
<context position="27559" citStr="Tsarfaty (2006)" startWordPosition="4505" endWordPosition="4506">e between the KC and the Layered representation. We prefer the layered representation as it provides more flexibility, does not require trees tagged with the KC tagset, and produces parse trees with the original TB POS tags at the leaves. 5 Parsing without a Segmentation Oracle When parsing real world data, correct token segmentation is not known in advance. For methodological reasons, this issue has either been setaside (Tsarfaty and Sima’an, 2007), or dealt with in a pipeline model in which a morphological disambiguator is run prior to parsing to determine the correct segmentation. However, Tsarfaty (2006) argues that there is a strong interaction between syntax and morphological segmentation, and that the two tasks should be modeled jointly, and not in a pipeline model. Several studies followed this line, (Cohen and Smith, 2007) the most recent of which is Goldberg and Tsarfaty (2008), who presented a model based on unweighted lattice parsing for performing the joint task. This model uses a morphological analyzer to construct a lattice over all possible morphological analyses of an input sentence. The arcs of the lattice are (w, t) pairs, and a lattice parser is used to build a parse over the </context>
<context position="32076" citStr="Tsarfaty, 2006" startWordPosition="5255" endWordPosition="5256"> 4.1 above, and use some external information in the form of a spell-checker wordlist. We compare this Baseline with the LexFilter and LexProbs models over the Layered representation. We use the same test/train splits as described in Section 4. Contrary to the Oracle segmentation setting, here we evaluate against all sentences, including those containing tokens for which the KC Analyzer does not contain any correct analyses. Due to token segmentation ambiguity, the resulting parse yields may be different than the gold ones, and evalb can not be used. Instead, we use the evaluation measure of (Tsarfaty, 2006), also used in (Goldberg and Tsarfaty, 2008), which is an adaptation of parseval to use characters instead of space-delimited tokens as its basic units. Results and Discussion Results are presented in Table 3. rare: &lt; 2 rare: &lt; 10 Prec Rec Prec Rec Baseline 67.71 66.35 — — LexFilter 68.25 69.45 57.72 59.17 LexProbs 73.40 73.99 70.09 73.01 Table 3: Parsing results for the joint parsing+seg task, with varying external knowledge The results are expectedly lower than with the segmentation Oracle, as the joint task is much harder, but the external lexical information greatly benefits the parser als</context>
</contexts>
<marker>Tsarfaty, 2006</marker>
<rawString>Reut Tsarfaty. 2006. Integrated Morphological and Syntactic Disambiguation for Modern Hebrew. In Proceedings ofACL-SRW-06.</rawString>
</citation>
<citation valid="true">
<authors>
<author>MS Yang Huang</author>
<author>Henry J Lowe</author>
<author>Dan Klein</author>
<author>MS Russell J Cucina</author>
</authors>
<title>Improved identification of noun phrases in clinical radiology reports using a high-performance statistical natural language parser augmented with the umls specialist lexicon. JAm Med Inform Assoc,</title>
<date>2005</date>
<volume>12</volume>
<issue>3</issue>
<contexts>
<context position="34904" citStr="Huang et al., 2005" startWordPosition="5711" endWordPosition="5714">as should be taken toward segmentations that were previously seen in the same corpus. Given that that effect is remedied to some extent by introducing the semi-supervised lexical probabilities, we believe that segmentation accuracy for unseen tokens can be further improved, perhaps using resources such as (Gabay et al., 2008), and techniques for incorporating some document, as opposed to sentence level information, into the parsing process. 6 Conclusions We present a framework for interfacing a parser with an external lexicon following a different annotation scheme. Unlike other studies (Yang Huang et al., 2005; Szolovits, 2003) in which such interfacing is achieved by a restricted heuristic mapping, we propose a novel, stochastic approach, based on a layered representation. We show that using an external lexicon for dealing with rare lexical events greatly benefits a PCFG parser for Hebrew, and that results can be further improved by the incorporation of lexical probabilities estimated in a semi-supervised manner using a wide-coverage lexicon and a large unannotated corpus. In the future, we plan to integrate this framework with a parsing model that is specifically crafted to cope with morphologica</context>
</contexts>
<marker>Huang, Lowe, Klein, Cucina, 2005</marker>
<rawString>MS Yang Huang, MD Henry J. Lowe, PhD Dan Klein, and MS Russell J. Cucina, MD. 2005. Improved identification of noun phrases in clinical radiology reports using a high-performance statistical natural language parser augmented with the umls specialist lexicon. JAm Med Inform Assoc, 12(3), May.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>