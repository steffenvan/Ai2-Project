<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.020906">
<title confidence="0.794688">
Formalisation of Intensionality as Algorithms
</title>
<author confidence="0.961447">
Roussanka Loukanova
</author>
<affiliation confidence="0.985503">
Computational Linguistics, Uppsala University and TiLPS, Tilburg Universiy
</affiliation>
<email confidence="0.976417">
rloukano@stp.lingfil.uu.se
</email>
<sectionHeader confidence="0.912696" genericHeader="abstract">
1 Background and Recent Development
</sectionHeader>
<bodyText confidence="0.999523333333333">
In a sequence of papers, Moschovakis developed a class of languages of re-
cursion as a new approach to the mathematical notion of algorithm and de-
velopment of computational semantics, e.g., see Moschovakis [7], for FLR,
and Moschovakis [8], for Lλar. In particular, the language and theory of
acyclic recursion Lλar is intended for modeling the logical concepts of mean-
ing and synonymy, from the perspective of the theory of computability, by
targeting adequateness of computational semantics of NL. Lλar is a higher
order type theory, which is a proper extension of Gallin’s TY2, Gallin [3],
and, thus, of Montague’s Intensional Logic (IL). Lλar has a highly expressive
language, an effective reduction calculus and strong mathematical proper-
ties. It models the notion of algorithm by abstract mathematical objects,
which are tuple of functions defined by mutual recursion, called acyclic re-
cursors. The referential intensions of the meaningful Lλar terms are acyclic
recursors defined by their canonical forms, which are recursion terms. For
the construction of recursion terms (where-terms), the language Lλar uses a
recursion operator, denoted by the constant where that applies over a head
term A0 and a set of assignments, called body, {p1 := A1, ... , pn := An},
where each Ai is a term of the same type as the recursion variable pi
(1 G i G n): A0 where{p1 := A1,. . . ,pn := An}. The where-terms rep-
resent recursive computations by designating functional recursors: intu-
itively, the denotation of the term A0 depends on the functions denoted
by p1, ... , pn that are computed recursively by the system of assignments
{p1 := A1,. . . , pn := An}. In an acyclic system of assignments, the com-
putations close-off. The formal syntax of Lλar allows only recursion terms
with acyclic systems of assignments, while the FLR allows cyclicity, but is
limited with respect to its type system. The languages of recursion (e.g.,
FLR and Lλar) have two semantic layers: denotational semantics and ref-
</bodyText>
<page confidence="0.971595">
295
</page>
<bodyText confidence="0.989453566666667">
Proceedings of the 8th International Conference on Computational Semantics, pages 295–298,
Tilburg, January 2009. c�2009 International Conference on Computational Semantics
erential intensions. The recursion terms of Lλar are essential for encoding
that two-fold semantic information. Denotational Semantics: For any
given semantic structure 91, there is at most one, well-defined denotation
function, den, from terms and variable assignments to objects in the do-
main of 91. Thus, for any variable assignment g, an Lλar term A of type
a denotes a uniquely defined object den(A)(g) of the subdomain 91Q of 91.
Lλar has a reduction calculus that reduces each term A to its canonical form
cf(A) ≡ A0 where {p1 := A1,. . . , pte, := Ate,} (unique modulo congruence, i.e.,
with respect to renaming bound variables and reordering of assignments).
Intensional Semantics: The notion of intension in the languages of re-
cursion covers the most essential, computational aspect of the concept of
meaning. Intuitively, Int(A) is the algorithm for computing its denotation
den(A). Formally, the referential intension, Int(A), of a meaningful expres-
sion A is the recursor that is defined by the canonical form cf(A) of A. Two
meaningful expressions are synonymous iff their referential intensions are
naturally isomorphic, i.e., they are the same algorithms. Thus, the algorith-
mic meaning of a well-formed expression (i.e., its sense) is the information
for how to “compute” its denotation, i.e., expressions have sense by carry-
ing instructions for acquiring what they denote in a structure (model). The
canonical form cf(A) of a meaningful term A encodes its intension, i.e., the
algorithm for computing its denotation, via: (1) the basic semantic facts,
which consist of {p1 := A1, ... , pte, := Ate,} and the “head pattern” A0,
that are needed for computing the denotational interpretation den(A), and
(2) a rank order of the steps for incremental computation of the denotation
den(A)(g), e.g., a terminating order of the recursive steps that compute each
den(AZ)(g), for i E {0, ... , n}. Thus, the languages of recursion offer a for-
malisation of central computational aspects of Frege’s distinction between
sense and denotation, with two semantic “levels”:
</bodyText>
<equation confidence="0.3310305">
NL Syntax =⇒ Lλr =⇒ Referential Intensions (Algorithms) =⇒ Denotations
� ComputationalSemantics
</equation>
<bodyText confidence="0.932634857142857">
2 Open Problems for the Language of Acyclic Re-
cursion as Semantic Theory of NL
Relational Type Theory with Partiality Acyclic recursion terms and
acyclic recursors model terminating algorithms for computing the denota-
tions of meaningful expressions. The idea of restricting recursion languages
to acyclicity, as in Lλar, is that, for certain applications to NL semantics,
partiality and self-reference are not needed. In 80’s, Barwise and Perry
</bodyText>
<page confidence="0.990824">
296
</page>
<bodyText confidence="0.999930142857143">
(e.g., [1]) introduced Situation Theory with the ideas that partiality, factual
content and situatedness are crucial features of the meaning concepts that
involve mental states, incl. attitudes. Situation Theory models partiality
and the inherent relational and situational nature of information, in general,
not only linguistic, by diverging from the traditional type theoretic settings.
Situation Semantics proceeds as a special case of application of Situation
Theory to NL semantic information. By taking up the ideas of partiality,
Muskens [9] realized the ideas of Situation Semantics by generalizing Gallin’s
TY2 with partial relations and building corresponding generalized Montague
grammars, i.e., Partial Type-theoretic Grammars. The importance of par-
tial relational structures to semantics of NL is well investigated by Situation
Theory. Furthermore, Muskens [9] demonstrated that encoding relational
type systems is not only inadequate in the case of partial relational struc-
tures, but needless. That opens a need of extending the language Lλar to a
full higher order type theory for modeling recursors with partial functions
and relations.
Factuality and State Variation Lλar uses states (similar to indexes for
possible worlds and times, situations, contexts) at all levels of its own syntax
and semantics. However, the potential expressiveness of Lλar for represen-
tation of state dependant semantic objects has not been fully developed.
There is a need of more finely grained semantic concepts by a type theory
of recursion that: (a) represents denotation functions with values that are
partial, situated objects with factual content, and, (b) uses terms with inter-
nal variation of state constants and state variables that occur inside terms.
Such terms are more adequate representation of information that depends
on varying1 states. Work in the direction of representing locality of semantic
facts in Lλar, has been done (however without state variation in individual
terms) by Kalyvianaki [5],[4].
Denotation and Intention Muskens [10] refined the denotation func-
tion by a revision of Thomason’s Intentional Logic. The result is a logi-
cal grammar that takes propositions as primitive objects, with a relation
that associates propositions with sets of possible worlds. The techniques of
Muskens [10] offer a possibility for refining the denotational semantics of re-
cursion languages by splitting it into two sub-layers: (a) situated denotations
(as above), and, (b) denotational intention:
</bodyText>
<figure confidence="0.23432625">
Syn Lλr =⇒ Intensions (Algorithms) =⇒ Denotations
(Sit Denotations
&apos;Similarly to, for example, the varying resource situations in Situation Theory.
Denotational Intentions
</figure>
<page confidence="0.976597">
297
</page>
<bodyText confidence="0.9997855">
Underspecification Underspecified semantic representation became
major effort of contemporary research, see Bunt [2] for a comprehensive
overview of the field. Representing semantic underspecification of NL with
languages of recursion needs to be developed. Initial work, see Loukanova [6],
shows the unique expressiveness of Lλar to accommodate its inherent facilities
for representing semantic underspecification of NL expressions.
Representation of Attitudes Semantics of attitudes, such as know,
believe, etc., in the languages of recursion, is an open problem.
Syntax-Semantics Interface A major work to be done is to define
render relations from NL to languages of recursion. Initial work shows that
that is a realistic task. A more demanding task, with potential applications,
e.g., to machine translation, is a render relation with inverse to NL.
</bodyText>
<sectionHeader confidence="0.99782" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999980318181818">
[1] J. Barwise and J. Perry. Situations and Attitudes. Cambridge, MA:MIT press,
1983.
[2] H. Bunt. Semantic underspecification: Which technique for what purpose? In
H. Bunt and R. Muskens, editors, Computing Meaning, volume 3 of Studies in
Linguistics and Philosophy 83, pages 55–85. Springer, Dordrecht, 2007.
[3] D. Gallin. Intensional and Higher-Order Modal Logic. North-Holland, 1975.
[4] E. Kalyvianaki. Algorithmic Natural Language Semantics. PhD thesis, Uni-
versity of Athens, 2007.
[5] E. Kalyvianaki. Factual content in algorithmic natural language semantics.
In V. V. Nurmi and D. Sustretov, editors, Proceedings of the Twelfth ESSLLI
2007 Student Session, pages 123–133, Dublin, Ireland, 2007.
[6] R. Loukanova. Typed lambda language of acyclic recursion and scope under-
specification. In R. Muskens, editor, Workshop on New Directions in Type-
theoretic Grammars, ESSLLI 2007, pages 73–89, Dublin, Ireland, 2007.
[7] Y. N. Moschovakis. Sense and denotation as algorithm and value. Number 2
in Lecture Notes in Logic, pages 210–249. Springer, 1994.
[8] Y. N. Moschovakis. A logical calculus of meaning and synonymy. Linguistics
and Philosophy, 29:27–89, 2006.
[9] R. Muskens. Meaning and Partiality. Studies in Logic, Language and Infor-
mation. Stanford: CSLI Publications, 1995.
[10] R. Muskens. Sense and the computation of reference. Linguistics and Philos-
ophy, 28:473–504, 2005.
</reference>
<page confidence="0.997121">
298
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.017156">
<title confidence="0.999667">Formalisation of Intensionality as Algorithms</title>
<author confidence="0.973382">Roussanka Loukanova</author>
<affiliation confidence="0.487613">Computational Linguistics, Uppsala University and TiLPS, Tilburg</affiliation>
<abstract confidence="0.990936567307692">rloukano@stp.lingfil.uu.se 1 Background and Recent Development In a sequence of papers, Moschovakis developed a class of languages of recursion as a new approach to the mathematical notion of algorithm and development of computational semantics, e.g., see Moschovakis [7], for FLR, Moschovakis [8], for In particular, the language and theory of recursion is intended for modeling the logical concepts of meaning and synonymy, from the perspective of the theory of computability, by adequateness of computational semantics of NL. is a higher type theory, which is a proper extension of Gallin’s Gallin [3], thus, of Montague’s Intensional Logic (IL). has a highly expressive language, an effective reduction calculus and strong mathematical properties. It models the notion of algorithm by abstract mathematical objects, which are tuple of functions defined by mutual recursion, called acyclic re- The referential intensions of the meaningful terms are acyclic defined by their canonical forms, which are For construction of recursion terms the language uses a operator, denoted by the constant applies over a a set of assignments, called ... , := each a term of the same type as the recursion variable . . := represent recursive computations by designating functional recursors: intuthe denotation of the term on the functions denoted ... , that are computed recursively by the system of assignments . . , := In an acyclic system of assignments, the comclose-off. The formal syntax of allows only recursion terms with acyclic systems of assignments, while the FLR allows cyclicity, but is limited with respect to its type system. The languages of recursion (e.g., and have two semantic layers: denotational semantics and ref- 295 of the 8th International Conference on Computational pages 295–298, January 2009. International Conference on Computational Semantics intensions. The recursion terms of essential for encoding two-fold semantic information. Semantics: any semantic structure there is at most one, well-defined denotation from terms and variable assignments to objects in the doof Thus, for any variable assignment an type denotes uniquely defined object of the subdomain a reduction calculus that reduces each term its canonical form . . , modulo congruence, i.e., with respect to renaming bound variables and reordering of assignments). Semantics: notion of intension in the languages of recursion covers the most essential, computational aspect of the concept of Intuitively, is the computing its denotation Formally, the of a meaningful expresthe recursor that is defined by the canonical form of Two meaningful expressions are synonymous iff their referential intensions are naturally isomorphic, i.e., they are the same algorithms. Thus, the algorithmic meaning of a well-formed expression (i.e., its sense) is the information for how to “compute” its denotation, i.e., expressions have sense by carrying instructions for acquiring what they denote in a structure (model). The form of a meaningful term its intension, i.e., the algorithm for computing its denotation, via: (1) the basic semantic facts, consist of ... , the “head pattern” are needed for computing the denotational interpretation and a of the steps for incremental computation of the denotation e.g., a terminating order of the recursive steps that compute each for ... , Thus, the languages of recursion offer a formalisation of central computational aspects of Frege’s distinction between sense and denotation, with two semantic “levels”: Syntax Intensions (Algorithms) 2 Open Problems for the Language of Acyclic Recursion as Semantic Theory of NL Type Theory with Partiality recursion terms and acyclic recursors model terminating algorithms for computing the denotations of meaningful expressions. The idea of restricting recursion languages acyclicity, as in that, for certain applications to NL semantics, partiality and self-reference are not needed. In 80’s, Barwise and Perry 296 (e.g., [1]) introduced Situation Theory with the ideas that partiality, factual content and situatedness are crucial features of the meaning concepts that involve mental states, incl. attitudes. Situation Theory models partiality and the inherent relational and situational nature of information, in general, not only linguistic, by diverging from the traditional type theoretic settings. Situation Semantics proceeds as a special case of application of Situation Theory to NL semantic information. By taking up the ideas of partiality, Muskens [9] realized the ideas of Situation Semantics by generalizing Gallin’s partial relations and building corresponding generalized Montague grammars, i.e., Partial Type-theoretic Grammars. The importance of partial relational structures to semantics of NL is well investigated by Situation Theory. Furthermore, Muskens [9] demonstrated that encoding relational type systems is not only inadequate in the case of partial relational strucbut needless. That opens a need of extending the language a full higher order type theory for modeling recursors with partial functions and relations. and State Variation to indexes for possible worlds and times, situations, contexts) at all levels of its own syntax semantics. However, the potential expressiveness of representation of state dependant semantic objects has not been fully developed. There is a need of more finely grained semantic concepts by a type theory of recursion that: (a) represents denotation functions with values that are partial, situated objects with factual content, and, (b) uses terms with internal variation of state constants and state variables that occur inside terms. Such terms are more adequate representation of information that depends Work in the direction of representing locality of semantic in been done (however without state variation in individual terms) by Kalyvianaki [5],[4]. and Intention [10] refined the denotation function by a revision of Thomason’s Intentional Logic. The result is a logical grammar that takes propositions as primitive objects, with a relation that associates propositions with sets of possible worlds. The techniques of Muskens [10] offer a possibility for refining the denotational semantics of relanguages by splitting it into two sub-layers: (a) denotations above), and, (b)</abstract>
<note confidence="0.6657584">(Algorithms) Denotations to, for example, the varying situations Situation Theory. Denotational Intentions 297</note>
<abstract confidence="0.987706333333333">semantic representation became major effort of contemporary research, see Bunt [2] for a comprehensive overview of the field. Representing semantic underspecification of NL with languages of recursion needs to be developed. Initial work, see Loukanova [6], the unique expressiveness of to accommodate its inherent facilities for representing semantic underspecification of NL expressions. of Attitudes of attitudes, such as etc., in the languages of recursion, is an open problem. Interface major work to be done is to define from NL to languages of recursion. Initial work shows that that is a realistic task. A more demanding task, with potential applications, e.g., to machine translation, is a render relation with inverse to NL.</abstract>
<note confidence="0.937667416666666">References J. Barwise and J. Perry. and Cambridge, MA:MIT press, 1983. [2] H. Bunt. Semantic underspecification: Which technique for what purpose? In Bunt and R. Muskens, editors, volume 3 of in and Philosophy pages 55–85. Springer, Dordrecht, 2007. D. Gallin. and Higher-Order Modal North-Holland, 1975. E. Kalyvianaki. Natural Language PhD thesis, University of Athens, 2007. [5] E. Kalyvianaki. Factual content in algorithmic natural language semantics. V. V. Nurmi and D. Sustretov, editors, of the Twelfth ESSLLI Student pages 123–133, Dublin, Ireland, 2007. [6] R. Loukanova. Typed lambda language of acyclic recursion and scope under- In R. Muskens, editor, on New Directions in Type- ESSLLI 2007, pages 73–89, Dublin, Ireland, 2007. [7] Y. N. Moschovakis. Sense and denotation as algorithm and value. Number 2 in Lecture Notes in Logic, pages 210–249. Springer, 1994. Y. N. Moschovakis. A logical calculus of meaning and synonymy. 29:27–89, 2006. R. Muskens. and Studies in Logic, Language and Information. Stanford: CSLI Publications, 1995. R. Muskens. Sense and the computation of reference. and Philos- 28:473–504, 2005. 298</note>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>J Barwise</author>
<author>J Perry</author>
</authors>
<title>Situations and Attitudes.</title>
<date>1983</date>
<location>Cambridge, MA:MIT press,</location>
<contexts>
<context position="5004" citStr="[1]" startWordPosition="786" endWordPosition="786">nse and denotation, with two semantic “levels”: NL Syntax =⇒ Lλr =⇒ Referential Intensions (Algorithms) =⇒ Denotations � ComputationalSemantics 2 Open Problems for the Language of Acyclic Recursion as Semantic Theory of NL Relational Type Theory with Partiality Acyclic recursion terms and acyclic recursors model terminating algorithms for computing the denotations of meaningful expressions. The idea of restricting recursion languages to acyclicity, as in Lλar, is that, for certain applications to NL semantics, partiality and self-reference are not needed. In 80’s, Barwise and Perry 296 (e.g., [1]) introduced Situation Theory with the ideas that partiality, factual content and situatedness are crucial features of the meaning concepts that involve mental states, incl. attitudes. Situation Theory models partiality and the inherent relational and situational nature of information, in general, not only linguistic, by diverging from the traditional type theoretic settings. Situation Semantics proceeds as a special case of application of Situation Theory to NL semantic information. By taking up the ideas of partiality, Muskens [9] realized the ideas of Situation Semantics by generalizing Gal</context>
</contexts>
<marker>[1]</marker>
<rawString>J. Barwise and J. Perry. Situations and Attitudes. Cambridge, MA:MIT press, 1983.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Bunt</author>
</authors>
<title>Semantic underspecification: Which technique for what purpose?</title>
<date>2007</date>
<booktitle>Computing Meaning,</booktitle>
<volume>3</volume>
<pages>55--85</pages>
<editor>In H. Bunt and R. Muskens, editors,</editor>
<publisher>Springer,</publisher>
<location>Dordrecht,</location>
<contexts>
<context position="7793" citStr="[2]" startWordPosition="1190" endWordPosition="1190">itive objects, with a relation that associates propositions with sets of possible worlds. The techniques of Muskens [10] offer a possibility for refining the denotational semantics of recursion languages by splitting it into two sub-layers: (a) situated denotations (as above), and, (b) denotational intention: Syn Lλr =⇒ Intensions (Algorithms) =⇒ Denotations (Sit Denotations &apos;Similarly to, for example, the varying resource situations in Situation Theory. Denotational Intentions 297 Underspecification Underspecified semantic representation became major effort of contemporary research, see Bunt [2] for a comprehensive overview of the field. Representing semantic underspecification of NL with languages of recursion needs to be developed. Initial work, see Loukanova [6], shows the unique expressiveness of Lλar to accommodate its inherent facilities for representing semantic underspecification of NL expressions. Representation of Attitudes Semantics of attitudes, such as know, believe, etc., in the languages of recursion, is an open problem. Syntax-Semantics Interface A major work to be done is to define render relations from NL to languages of recursion. Initial work shows that that is a </context>
</contexts>
<marker>[2]</marker>
<rawString>H. Bunt. Semantic underspecification: Which technique for what purpose? In H. Bunt and R. Muskens, editors, Computing Meaning, volume 3 of Studies in Linguistics and Philosophy 83, pages 55–85. Springer, Dordrecht, 2007.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Gallin</author>
</authors>
<title>Intensional and Higher-Order Modal Logic.</title>
<date>1975</date>
<publisher>North-Holland,</publisher>
<contexts>
<context position="794" citStr="[3]" startWordPosition="116" endWordPosition="116"> Development In a sequence of papers, Moschovakis developed a class of languages of recursion as a new approach to the mathematical notion of algorithm and development of computational semantics, e.g., see Moschovakis [7], for FLR, and Moschovakis [8], for Lλar. In particular, the language and theory of acyclic recursion Lλar is intended for modeling the logical concepts of meaning and synonymy, from the perspective of the theory of computability, by targeting adequateness of computational semantics of NL. Lλar is a higher order type theory, which is a proper extension of Gallin’s TY2, Gallin [3], and, thus, of Montague’s Intensional Logic (IL). Lλar has a highly expressive language, an effective reduction calculus and strong mathematical properties. It models the notion of algorithm by abstract mathematical objects, which are tuple of functions defined by mutual recursion, called acyclic recursors. The referential intensions of the meaningful Lλar terms are acyclic recursors defined by their canonical forms, which are recursion terms. For the construction of recursion terms (where-terms), the language Lλar uses a recursion operator, denoted by the constant where that applies over a h</context>
</contexts>
<marker>[3]</marker>
<rawString>D. Gallin. Intensional and Higher-Order Modal Logic. North-Holland, 1975.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Kalyvianaki</author>
</authors>
<title>Algorithmic Natural Language Semantics.</title>
<date>2007</date>
<tech>PhD thesis,</tech>
<institution>University of Athens,</institution>
<contexts>
<context position="7008" citStr="[4]" startWordPosition="1081" endWordPosition="1081">ic objects has not been fully developed. There is a need of more finely grained semantic concepts by a type theory of recursion that: (a) represents denotation functions with values that are partial, situated objects with factual content, and, (b) uses terms with internal variation of state constants and state variables that occur inside terms. Such terms are more adequate representation of information that depends on varying1 states. Work in the direction of representing locality of semantic facts in Lλar, has been done (however without state variation in individual terms) by Kalyvianaki [5],[4]. Denotation and Intention Muskens [10] refined the denotation function by a revision of Thomason’s Intentional Logic. The result is a logical grammar that takes propositions as primitive objects, with a relation that associates propositions with sets of possible worlds. The techniques of Muskens [10] offer a possibility for refining the denotational semantics of recursion languages by splitting it into two sub-layers: (a) situated denotations (as above), and, (b) denotational intention: Syn Lλr =⇒ Intensions (Algorithms) =⇒ Denotations (Sit Denotations &apos;Similarly to, for example, the varying </context>
</contexts>
<marker>[4]</marker>
<rawString>E. Kalyvianaki. Algorithmic Natural Language Semantics. PhD thesis, University of Athens, 2007.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Kalyvianaki</author>
</authors>
<title>Factual content in algorithmic natural language semantics.</title>
<date>2007</date>
<booktitle>Proceedings of the Twelfth ESSLLI 2007 Student Session,</booktitle>
<pages>123--133</pages>
<editor>In V. V. Nurmi and D. Sustretov, editors,</editor>
<location>Dublin, Ireland,</location>
<contexts>
<context position="7004" citStr="[5]" startWordPosition="1081" endWordPosition="1081">mantic objects has not been fully developed. There is a need of more finely grained semantic concepts by a type theory of recursion that: (a) represents denotation functions with values that are partial, situated objects with factual content, and, (b) uses terms with internal variation of state constants and state variables that occur inside terms. Such terms are more adequate representation of information that depends on varying1 states. Work in the direction of representing locality of semantic facts in Lλar, has been done (however without state variation in individual terms) by Kalyvianaki [5],[4]. Denotation and Intention Muskens [10] refined the denotation function by a revision of Thomason’s Intentional Logic. The result is a logical grammar that takes propositions as primitive objects, with a relation that associates propositions with sets of possible worlds. The techniques of Muskens [10] offer a possibility for refining the denotational semantics of recursion languages by splitting it into two sub-layers: (a) situated denotations (as above), and, (b) denotational intention: Syn Lλr =⇒ Intensions (Algorithms) =⇒ Denotations (Sit Denotations &apos;Similarly to, for example, the vary</context>
</contexts>
<marker>[5]</marker>
<rawString>E. Kalyvianaki. Factual content in algorithmic natural language semantics. In V. V. Nurmi and D. Sustretov, editors, Proceedings of the Twelfth ESSLLI 2007 Student Session, pages 123–133, Dublin, Ireland, 2007.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Loukanova</author>
</authors>
<title>Typed lambda language of acyclic recursion and scope underspecification.</title>
<date>2007</date>
<booktitle>Workshop on New Directions in Typetheoretic Grammars, ESSLLI 2007,</booktitle>
<pages>73--89</pages>
<editor>In R. Muskens, editor,</editor>
<location>Dublin, Ireland,</location>
<marker>[6]</marker>
<rawString>R. Loukanova. Typed lambda language of acyclic recursion and scope underspecification. In R. Muskens, editor, Workshop on New Directions in Typetheoretic Grammars, ESSLLI 2007, pages 73–89, Dublin, Ireland, 2007.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Y N Moschovakis</author>
</authors>
<title>Sense and denotation as algorithm and value.</title>
<date>1994</date>
<journal>Number</journal>
<booktitle>in Lecture Notes in Logic,</booktitle>
<volume>2</volume>
<pages>210--249</pages>
<publisher>Springer,</publisher>
<marker>[7]</marker>
<rawString>Y. N. Moschovakis. Sense and denotation as algorithm and value. Number 2 in Lecture Notes in Logic, pages 210–249. Springer, 1994.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Y N Moschovakis</author>
</authors>
<title>A logical calculus of meaning and synonymy.</title>
<date>2006</date>
<journal>Linguistics and Philosophy,</journal>
<volume>29</volume>
<marker>[8]</marker>
<rawString>Y. N. Moschovakis. A logical calculus of meaning and synonymy. Linguistics and Philosophy, 29:27–89, 2006.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Muskens</author>
</authors>
<title>Meaning and Partiality. Studies in Logic, Language and Information.</title>
<date>1995</date>
<publisher>CSLI Publications,</publisher>
<location>Stanford:</location>
<contexts>
<context position="5542" citStr="[9]" startWordPosition="862" endWordPosition="862">ference are not needed. In 80’s, Barwise and Perry 296 (e.g., [1]) introduced Situation Theory with the ideas that partiality, factual content and situatedness are crucial features of the meaning concepts that involve mental states, incl. attitudes. Situation Theory models partiality and the inherent relational and situational nature of information, in general, not only linguistic, by diverging from the traditional type theoretic settings. Situation Semantics proceeds as a special case of application of Situation Theory to NL semantic information. By taking up the ideas of partiality, Muskens [9] realized the ideas of Situation Semantics by generalizing Gallin’s TY2 with partial relations and building corresponding generalized Montague grammars, i.e., Partial Type-theoretic Grammars. The importance of partial relational structures to semantics of NL is well investigated by Situation Theory. Furthermore, Muskens [9] demonstrated that encoding relational type systems is not only inadequate in the case of partial relational structures, but needless. That opens a need of extending the language Lλar to a full higher order type theory for modeling recursors with partial functions and relati</context>
</contexts>
<marker>[9]</marker>
<rawString>R. Muskens. Meaning and Partiality. Studies in Logic, Language and Information. Stanford: CSLI Publications, 1995.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Muskens</author>
</authors>
<title>Sense and the computation of reference.</title>
<date>2005</date>
<journal>Linguistics and Philosophy,</journal>
<volume>28</volume>
<contexts>
<context position="7047" citStr="[10]" startWordPosition="1086" endWordPosition="1086">d. There is a need of more finely grained semantic concepts by a type theory of recursion that: (a) represents denotation functions with values that are partial, situated objects with factual content, and, (b) uses terms with internal variation of state constants and state variables that occur inside terms. Such terms are more adequate representation of information that depends on varying1 states. Work in the direction of representing locality of semantic facts in Lλar, has been done (however without state variation in individual terms) by Kalyvianaki [5],[4]. Denotation and Intention Muskens [10] refined the denotation function by a revision of Thomason’s Intentional Logic. The result is a logical grammar that takes propositions as primitive objects, with a relation that associates propositions with sets of possible worlds. The techniques of Muskens [10] offer a possibility for refining the denotational semantics of recursion languages by splitting it into two sub-layers: (a) situated denotations (as above), and, (b) denotational intention: Syn Lλr =⇒ Intensions (Algorithms) =⇒ Denotations (Sit Denotations &apos;Similarly to, for example, the varying resource situations in Situation Theory</context>
</contexts>
<marker>[10]</marker>
<rawString>R. Muskens. Sense and the computation of reference. Linguistics and Philosophy, 28:473–504, 2005.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>