<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000060">
<title confidence="0.969425">
Tagging The Web: Building A Robust Web Tagger with Neural Network
</title>
<author confidence="0.993294">
Ji Ma†, Yue Zhang$ and Jingbo Zhu††Northeastern University, China
</author>
<affiliation confidence="0.998271">
$Singapore University of Technology and Design
</affiliation>
<email confidence="0.801415">
majineu@gmail.com
yue zhang@sutd.edu.sg
zhujingbo@mail.neu.edu.cn
</email>
<sectionHeader confidence="0.997136" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999895866666667">
In this paper, we address the problem of
web-domain POS tagging using a two-
phase approach. The first phase learns rep-
resentations that capture regularities un-
derlying web text. The representation is
integrated as features into a neural network
that serves as a scorer for an easy-first POS
tagger. Parameters of the neural network
are trained using guided learning in the
second phase. Experiment on the SANCL
2012 shared task show that our approach
achieves 93.15% average tagging accu-
racy, which is the best accuracy reported
so far on this data set, higher than those
given by ensembled syntactic parsers.
</bodyText>
<sectionHeader confidence="0.999393" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999918609375">
Analysing and extracting useful information from
the web has become an increasingly important re-
search direction for the NLP community, where
many tasks require part-of-speech (POS) tag-
ging as a fundamental preprocessing step. How-
ever, state-of-the-art POS taggers in the literature
(Collins, 2002; Shen et al., 2007) are mainly opti-
mized on the the Penn Treebank (PTB), and when
shifted to web data, tagging accuracies drop sig-
nificantly (Petrov and McDonald, 2012).
The problem we face here can be considered
as a special case of domain adaptation, where we
have access to labelled data on the source domain
(PTB) and unlabelled data on the target domain
(web data). Exploiting useful information from
the web data can be the key to improving web
domain tagging. Towards this end, we adopt the
idea of learning representations which has been
demonstrated useful in capturing hidden regular-
ities underlying the raw input data (web text, in
our case).
Our approach consists of two phrases. In the
pre-training phase, we learn an encoder that con-
verts the web text into an intermediate represen-
tation, which acts as useful features for prediction
tasks. We integrate the learned encoder with a set
of well-established features for POS tagging (Rat-
naparkhi, 1996; Collins, 2002) in a single neural
network, which is applied as a scorer to an easy-
first POS tagger. We choose the easy-first tagging
approach since it has been demonstrated to give
higher accuracies than the standard left-to-right
POS tagger (Shen et al., 2007; Ma et al., 2013).
In the fine-tuning phase, the parameters of the
network are optimized on a set of labelled train-
ing data using guided learning. The learned model
preserves the property of preferring to tag easy
words first. To our knowledge, we are the first to
investigate guided learning for neural networks.
The idea of learning representations from un-
labelled data and then fine-tuning a model with
such representations according to some supervised
criterion has been studied before (Turian et al.,
2010; Collobert et al., 2011; Glorot et al., 2011).
While most previous work focus on in-domain se-
quential labelling or cross-domain classification
tasks, we are the first to learn representations for
web-domain structured prediction. Previous work
treats the learned representations either as model
parameters that are further optimized in super-
vised fine-tuning (Collobert et al., 2011) or as
fixed features that are kept unchanged (Turian et
al., 2010; Glorot et al., 2011). In this work,
we investigate both strategies and give empirical
comparisons in the cross-domain setting. Our re-
sults suggest that while both strategies improve
in-domain tagging accuracies, keeping the learned
representation unchanged consistently results in
better cross-domain accuracies.
We conduct experiments on the official data set
provided by the SANCL 2012 shared task (Petrov
and McDonald, 2012). Our method achieves a
93.15% average accuracy across the web-domain,
which is the best result reported so far on this data
</bodyText>
<page confidence="0.979334">
144
</page>
<note confidence="0.8310565">
Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics, pages 144–154,
Baltimore, Maryland, USA, June 23-25 2014. c�2014 Association for Computational Linguistics
</note>
<bodyText confidence="0.998973">
set, higher than those given by ensembled syntac-
tic parsers. Our code will be publicly available at
https://github.com/majineu/TWeb.
</bodyText>
<sectionHeader confidence="0.789275" genericHeader="introduction">
2 Learning from Web Text
</sectionHeader>
<bodyText confidence="0.999719333333334">
Unsupervised learning is often used for training
encoders that convert the input data to abstract rep-
resentations (i.e. encoding vectors). Such repre-
sentations capture hidden properties of the input,
and can be used as features for supervised tasks
(Bengio, 2009; Ranzato et al., 2007). Among the
many proposed encoders, we choose the restricted
Boltzmann machine (RBM), which has been suc-
cessfully used in many tasks (Lee et al., 2009b;
Hinton et al., 2006). In this section, we give some
background on RBMs and then show how they can
be used to learn representations of the web text.
</bodyText>
<subsectionHeader confidence="0.86253">
2.1 Restricted Boltzmann Machine
</subsectionHeader>
<bodyText confidence="0.9999495">
The RBM is a type of graphical model that con-
tains two layers of binary stochastic units v E
{0,1}V and h E {0,1}H, corresponding to a set
of visible and hidden variables, respectively. The
RBM defines the joint probability distribution over
v and h by an energy function
</bodyText>
<equation confidence="0.888976">
E(v, h) = −c0h − b0v − h0Wv, (1)
</equation>
<bodyText confidence="0.997610333333333">
which is factorized by a visible bias b E RV , a
hidden bias c E RH and a weight matrix W E
RH×V .The joint distribution P(v, h) is given by
</bodyText>
<equation confidence="0.9735975">
1
P(v, h) = Z exp(E(v, h)), (2)
</equation>
<bodyText confidence="0.998791166666667">
where Z is the partition function.
The affine form of E with respect to v and h
implies that the visible variables are conditionally
independent with each other given the hidden layer
units, and vice versa. This yields the conditional
distribution:
</bodyText>
<equation confidence="0.998427">
V H
P(v|h) = Y P(vj|h) P(h|v) = Y P(hi|v)
j=1 i=1
P(vj = 1|h) = Q(bj + W·jh) (3)
P(hi = 1|v) = Q(cj + Wi·v) (4)
</equation>
<bodyText confidence="0.999547">
Here Q denotes the sigmoid function. Parameters
of RBMs θ = {b, c, W} can be trained efficiently
using contrastive divergence learning (CD), see
(Hinton, 2002) for detailed descriptions of CD.
</bodyText>
<subsectionHeader confidence="0.998152">
2.2 Encoding Web Text with RBM
</subsectionHeader>
<bodyText confidence="0.999172257142857">
Most of the indicative features for POS disam-
biguation can be found from the words and word
combinations within a local context (Ratnaparkhi,
1996; Collins, 2002). Inspired by this observa-
tion, we apply the RBM to learn feature repre-
sentations from word n-grams. More specifically,
given the ith word wi of a sentence, we apply
RBMs to model the joint distribution of the n-gram
(wi−l, · · · , wi+r), where l and r denote the left
and right window, respectively. Note that the vis-
ible units of RBMs are binary. While in our case,
each visible variable corresponds to a word, which
may take on tens-of-thousands of different values.
Therefore, the RBM need to be re-factorized to
make inference tractable.
We utilize the Word Representation RBM (WR-
RBM) factorization proposed by Dahl et al.
(2012). The basic idea is to share word representa-
tions across different positions in the input n-gram
while using position-dependent weights to distin-
guish between different word orders.
Let wk be the k-th entry of lexicon L, and wk
be its one-hot representation (i.e., only the k-th
component of wk is 1, and all the others are 0).
Let v(j) represents the j-th visible variable of the
WRRBM, which is a vector of length |L|. Then
v(j) = wk means that the j-th word in the n-gram
is wk. Let D E RD×|L |be a projection matrix,
then Dwk projects wk into a D-dimensional real
value vector (embedding). For each position j,
there is a weight matrix W(j) E RH×D, which
is used to model the interaction between the hid-
den layer and the word projection in position j.
The visible biases are also shared across different
positions (b(j) = b bj) and the energy function is:
</bodyText>
<equation confidence="0.986896384615385">
E(v, h) = −c0h − Xn (b0v(j) + h0W(j)Dv(j)),
j=1
(5)
which yields the conditional distributions:
n
P(v|h) = Y P(v(j)|h) P(h|v) = Y P(hi|v)
j=1 i=1
W(j)Dv(j)) (6)
i·
P(v(j) = wk|h) = Z1 exp(b0wk + h0W(j)Dwk)
(7)
P(hi = 1|v) = Q(ci + Xn
j=1
</equation>
<page confidence="0.891028">
145
</page>
<bodyText confidence="0.993353772727273">
Again Z is the partition function.
The parameters {b, c, D, W(1), ... , W(n)}
can be trained using a Metropolis-Hastings-based
CD variant and the learned word representations
also capture certain syntactic information; see
Dahl et al. (2012) for more details.
Note that one can stack standard RBMs on top
of a WRRBM to construct a Deep Belief Network
(DBN). By adopting greedy layer-wise training
(Hinton et al., 2006; Bengio et al., 2007), DBNs
are capable of modelling higher order non-linear
relations between the input, and has been demon-
strated to improve performance for many com-
puter vision tasks (Hinton et al., 2006; Bengio et
al., 2007; Lee et al., 2009a). However, in this work
we do not observe further improvement by em-
ploying DBNs. This may partly be due to the fact
that unlike computer vision tasks, the input struc-
ture of POS tagging or other sequential labelling
tasks is relatively simple, and a single non-linear
layer is enough to model the interactions within
the input (Wang and Manning, 2013).
</bodyText>
<sectionHeader confidence="0.9959125" genericHeader="method">
3 Neural Network for POS
Disambiguation
</sectionHeader>
<bodyText confidence="0.99986645">
We integrate the learned WRRBM into a neural
network, which serves as a scorer for POS dis-
ambiguation. The main challenge to designing
the neural network structure is: on the one hand,
we hope that the model can take the advantage
of information provided by the learned WRRBM,
which reflects general properties of web texts, so
that the model generalizes well in the web domain;
on the other hand, we also hope to improve the
model’s discriminative power by utilizing well-
established POS tagging features, such as those of
Ratnaparkhi (1996).
Our approach is to leverage the two sources of
information in one neural network by combining
them though a shared output layer, as shown in
Figure 1. Under the output layer, the network
consists of two modules: the web-feature mod-
ule, which incorporates knowledge from the pre-
trained WRRBM, and the sparse-feature module,
which makes use of other POS tagging features.
</bodyText>
<subsectionHeader confidence="0.999834">
3.1 The Web-Feature Module
</subsectionHeader>
<bodyText confidence="0.91461725">
The web-feature module, shown in the lower left
part of Figure 1, consists of a input layer and two
hidden layers. The input for the this module is the
word n-gram (wi−l, ... , wi+r), the form of which
</bodyText>
<figureCaption confidence="0.76640575">
Figure 1: The proposed neural network. The web-
feature module (lower left) and sparse-feature
module (lower right) are combined by a shared
output layer (upper).
</figureCaption>
<bodyText confidence="0.99207525">
is identical to the training data of the pre-trained
WRRBM.
The first layer is a linear projection layer, where
each word in the input is projected into a D-
dimensional real value vector using the projection
operation described in Section 2.2. The output of
this layer o1w is the concatenation of the projec-
tions of wi−l, . . . , wi+r:
</bodyText>
<equation confidence="0.8796845">
⎞
⎠ ⎟ (8)
</equation>
<bodyText confidence="0.9998714">
Here M1w denotes the parameters of the first layer
of the web-feature module, which is a D x |L|
projection matrix.
The second layer is a sigmoid layer to model
non-linear relations between the word projections:
</bodyText>
<equation confidence="0.995602">
o2w = σ(M2wo1w + b2w) (9)
</equation>
<bodyText confidence="0.9960019">
Parameters of this layer include: a bias vector
b2w E RH and a weight matrix M2w E RHxnD.
The web-feature module enables us to explore
the learned WRRBM in various ways. First, it al-
lows us to investigate knowledge from the WR-
RBM incrementally. We can choose to use only
the word representations of the learned WRRBM.
This can be achieved by initializing only the first
layer of the web module with the projection matrix
D of the learned WRRBM:
</bodyText>
<equation confidence="0.8204415">
M1 +— D. (10)
w
</equation>
<bodyText confidence="0.998687">
Alternatively, we can choose to use the hidden
states of the WRRBM, which can be treated as the
</bodyText>
<figure confidence="0.908294571428572">
⎛
⎜
o1 =
w ⎝
M1wwi−l
...
M1wwi+r
</figure>
<page confidence="0.992767">
146
</page>
<bodyText confidence="0.9984492">
representations of the input n-gram. This can be
achieved by also initializing the parameters of the
second layer of the web-feature module using the
position-dependent weight matrix and hidden bias
of the learned WRRBM:
</bodyText>
<equation confidence="0.999255">
b2w ← c (11)
M2w ← (W(1),..., W(n)) (12)
</equation>
<bodyText confidence="0.999972875">
Second, the web-feature module also allows us
to make a comparison between whether or not to
further adjust the pre-trained representation in the
supervised fine-tuning phase, which corresponds
to the supervised learning strategies of Turian et al.
(2010) and Collobert et al. (2011), respectively. To
our knowledge, no investigations have been pre-
sented in the literature on this issue.
</bodyText>
<subsectionHeader confidence="0.999761">
3.2 The Sparse-Feature Module
</subsectionHeader>
<bodyText confidence="0.935608833333333">
The sparse-feature module, as shown in the lower
right part of Figure 1, is designed to incorporate
commonly-used tagging features. The input for
this module is a vector of boolean values Φ(x) =
(f1(x), ... , fk(x)), where x denotes the partially
tagged input sentence and fz(x) denotes a fea-
ture function, which returns 1 if the correspond-
ing feature fires and 0 otherwise. The first layer of
this module is a linear transformation layer, which
converts the high dimensional sparse vector into a
fixed-dimensional real value vector:
os = MsΦ(x) + bs (13)
Depending on the specific task being considered,
the output of this layer can be further fed to other
non-linear layers, such as a sigmoid or hyperbolic
tangent layer, to model more complex relations.
For POS tagging, we found that a simple linear
layer yields satisfactory accuracies.
The web-feature and sparse-feature modules are
combined by a linear output layer, as shown in the
upper part of Figure 1. The value of each unit in
this layer denotes the score of the corresponding
POS tag.
oo = Mo
ow
+ bo (14)
os
In some circumstances, probability distribution
over POS tags might be a more preferable form
of output. Such distribution can be easily obtained
by adding a soft-max layer on top of the output
layer to perform a local normalization, as done by
Collobert et al. (2011).
Algorithm 1 Easy-first POS tagging
Input: x a sentence of m words w1, ... , wm
Output: tag sequence of x
</bodyText>
<listItem confidence="0.960189857142857">
1: U ← [w1, ... , wm] // untagged words
2: while U =6 [] do
3: ( ˆw, ˆt) ← arg max(w,t)∈U×T S(w, t)
4: ˆw.t ← tˆ
5: U ← U/[ ˆw] // remove wˆ from U
6: end while
7: return [w1.t, ... , wm.t]
</listItem>
<sectionHeader confidence="0.9118615" genericHeader="method">
4 Easy-first POS tagging with Neural
Network
</sectionHeader>
<bodyText confidence="0.9999578">
The neural network proposed in Section 3 is used
for POS disambiguation by the easy-first POS tag-
ger. Parameters of the network are trained using
guided learning, where learning and search inter-
act with each other.
</bodyText>
<subsectionHeader confidence="0.983413">
4.1 Easy-first POS tagging
</subsectionHeader>
<bodyText confidence="0.999964636363637">
Pseudo-code of easy-first tagging is shown in Al-
gorithm 1. Rather than tagging a sentence from
left to right, easy-first tagging is based on a deter-
ministic process, repeatedly selecting the easiest
word to tag. Here “easiness” is evaluated based
on a statistical model. At each step, the algorithm
adopts a scorer, the neural network in our case,
to assign a score to each possible word-tag pair
(w, t), and then selects the highest score one ( ˆw, ˆt)
to tag (i.e., tag wˆ with ˆt). The algorithm repeats
until all words are tagged.
</bodyText>
<subsectionHeader confidence="0.985973">
4.2 Training
</subsectionHeader>
<bodyText confidence="0.999929058823529">
The training algorithm repeats for several itera-
tions over the training data, which is a set of sen-
tences labelled with gold standard POS tags. In
each iteration, the procedure shown in Algorithm
2 is applied to each sentence in the training set.
At each step during the processing of a training
example, the algorithm calculates a margin loss
based on two word-tag pairs (w, t) and ( ˆw, ˆt) (line
4 ∼ line 6). (w, t) denotes the word-tag pair that
has the highest model score among those that are
inconsistent with the gold standard, while ( ˆw, ˆt)
denotes the one that has the highest model score
among those that are consistent with the gold stan-
dard. If the loss is zero, the algorithm continues to
process the next untagged word. Otherwise, pa-
rameters are updated using back-propagation.
The standard back-propagation algorithm
</bodyText>
<page confidence="0.990985">
147
</page>
<bodyText confidence="0.9983937">
(Rumelhart et al., 1988) cannot be applied
directly. This is because the standard loss is
calculated based on a unique input vector. This
condition does not hold in our case, because wˆ
and w may refer to different words, which means
that the margin loss in line 6 of Algorithm 2 is
calculated based on two different input vectors,
denoted by ( ˆw) and (w), respectively.
We solve this problem by decomposing the mar-
gin loss in line 6 into two parts:
</bodyText>
<listItem confidence="0.999621">
• 1 + nn(w, t), which is associated with (w);
• −nn( ˆw, ˆt), which is associated with ( ˆw).
</listItem>
<bodyText confidence="0.999184555555556">
In this way, two separate back-propagation up-
dates can be used to update the model’s parameters
(line 8 ∼ line 11). For the special case where wˆ
and w do refer to the same word w, it can be easily
verified that the two separate back-propagation up-
dates equal to the standard back-propagation with
a loss 1 + nn(w, t) − nn(w, ˆt) on the input (w).
The algorithm proposed here belongs to a gen-
eral framework named guided learning, where
search and learning interact with each other. The
algorithm learns not only a local classifier, but also
the inference order. While previous work (Shen et
al., 2007; Zhang and Clark, 2011; Goldberg and
Elhadad, 2010) apply guided learning to train a
linear classifier by using variants of the percep-
tron algorithm, we are the first to combine guided
learning with a neural network, by using a margin
loss and a modified back-propagation algorithm.
</bodyText>
<sectionHeader confidence="0.999708" genericHeader="evaluation">
5 Experiments
</sectionHeader>
<subsectionHeader confidence="0.918635">
5.1 Setup
</subsectionHeader>
<bodyText confidence="0.980601736842105">
Our experiments are conducted on the data set
provided by the SANCL 2012 shared task, which
aims at building a single robust syntactic anal-
ysis system across the web-domain. The data
set consists of labelled data for both the source
(Wall Street Journal portion of the Penn Treebank)
and target (web) domains. The web domain data
can be further classified into five sub-domains, in-
cluding emails, weblogs, business reviews, news
groups and Yahoo!Answers. While emails and
weblogs are used as the development sets, reviews,
news groups and Yahoo!Answers are used as the
final test sets. Participants are not allowed to use
web-domain labelled data for training. In addi-
tion to labelled data, a large amount of unlabelled
data on the web domain is also provided. Statistics
Algorithm 2 Training over one sentence
Input: (x, t) a tagged sentence, neural net nn
Output: updated neural net nn&apos;
</bodyText>
<listItem confidence="0.509816875">
1: U ← [w1, ... , wm] // untagged words
2: R ← [(w1, t1), ... , (wm, tm)] // reference
3: while U =� [] do
4: (w, t) ← arg max(w,t)E(UxT/R) nn(w, t)
5: ( ˆw, ˆt) ← arg max(w,t)ER nn(w, t)
6: loss ← max(0,1 + nn(w, t) − nn( ˆw, ˆt))
7: if loss &gt; 0 then
8: eˆ ← nn.BackPropErr(( ˆw), −nn( ˆw, ˆt))
9: e ← nn.BackPropErr((w),1+nn(w, t))
10: nn.Update(( ˆw), ˆe)
11: nn.Update((w), e)
12: else
13: U ← U/{ ˆw}, R ← R/( ˆw, ˆt)
14: end if
15: end while
16: return nn
</listItem>
<bodyText confidence="0.99904">
about labelled and unlabelled data are summarized
in Table 1 and Table 2, respectively.
The raw web domain data contains much noise,
including spelling error, emotions and inconsis-
tent capitalization. Following some participants
(Le Roux et al., 2012), we conduct simple prepro-
cessing steps to the input of the development and
the test sets1
</bodyText>
<listItem confidence="0.976272714285714">
• Neutral quotes are transformed to opening or
closing quotes.
• Tokens starting with “www.”, “http.” or end-
ing with “.org”, “.com” are converted to a
“#URL” symbol
• Repeated punctuations such as “!!!!” are col-
lapsed into one.
• Left brackets such as “&lt;”,“{” and “[” are
converted to “-LRB-”. Similarly, right brack-
ets are converted to “-RRB-”
• Upper cased words that contain more than 4
letters are lowercased.
• Consecutive occurrences of one or more dig-
its within a word are replaced with “#DIG”
</listItem>
<bodyText confidence="0.994132">
We apply the same preprocessing steps to all the
unlabelled data. In addition, following Dahl et
</bodyText>
<footnote confidence="0.9867445">
1The preprocessing steps make use of no POS knowledge,
and does not bring any unfair advantages to the participants.
</footnote>
<page confidence="0.958291">
148
</page>
<table confidence="0.9998252">
Training set Dev set Test set
WSJ-Train Emails Weblogs WSJ-dev Answers Newsgroups Reviews WSJ-test
#Sen 30060 2,450 1,016 1,336 1,744 1,195 1,906 1,640
#Words 731,678 29,131 24,025 32,092 28,823 20,651 28,086 35,590
#Types 35,933 5,478 4,747 5,889 4,370 4,924 4,797 6,685
</table>
<tableCaption confidence="0.8521475">
Table 1: Statistics of the labelled data. #Sen denotes number of sentences. #Words and #Types denote
number of words and unique word types, respectively.
</tableCaption>
<table confidence="0.994585">
Emails Weblogs Answers Newsgroups Reviews
#Sen 1,194,173 524,834 27,274 1,000,000 1,965,350
#Words 17,047,731 10,365,284 424,299 18,424,657 29,289,169
#Types 221,576 166,515 33,325 357,090 287,575
</table>
<tableCaption confidence="0.96131">
Table 2: Statistics of the raw unlabelled data.
</tableCaption>
<table confidence="0.9957616">
features templates
unigram H(wi), C(wi), L(wi), L(wi−1), L(wi+1), ti−2, ti−1, ti+1, ti+2
bigram L(wi) G L(wi−1), L(wi) O L(wi+1), ti−2 O ti−1, ti−1 O ti+1, ti+1 O ti+2,
L(wi) O ti−2, L(wi) O ti−1, L(wi) O ti+1, L(wi) O ti+2
trigram L(wi) O ti−2 O ti−1, L(wi) O ti−1 O ti+1, L(wi) (D ti+1 O ti+2
</table>
<tableCaption confidence="0.9252265">
Table 3: Feature templates, where wi denotes the current word. H(w) and C(w) indicates whether w
contains hyphen and upper case letters, respectively. L(w) denotes a lowercased w.
</tableCaption>
<bodyText confidence="0.994600095238095">
al. (2012) and Turian et al. (2010), we also low-
ercased all the unlabelled data and removed those
sentences that contain less than 90% a-z letters.
The tagging performance is evaluated accord-
ing to the official evaluation metrics of SANCL
2012. The tagging accuracy is defined as the per-
centage of words (punctuations included) that are
correctly tagged. The averaged accuracies are cal-
culated across the web domain data.
We trained the WRRBM on web-domain data
of different sizes (number of sentences). The data
sets are generated by first concatenating all the
cleaned unlabelled data, then selecting sentences
evenly across the concatenated file.
For each data set, we investigate an extensive set
of combinations of hyper-parameters: the n-gram
window (l, r) in {(1,1), (2, 1), (1, 2), (2, 2)}; the
hidden layer size in {200, 300, 400}; the learning
rate in {0.1, 0.01, 0.001}. All these parameters are
selected according to the averaged accuracy on the
development set.
</bodyText>
<subsectionHeader confidence="0.980216">
5.2 Baseline
</subsectionHeader>
<bodyText confidence="0.999572166666667">
We reimplemented the greedy easy-first POS tag-
ger of Ma et al. (2013), which is used for all the
experiments. While the tagger of Ma et al. (2013)
utilizes a linear scorer, our tagger adopts the neural
network as its scorer. The neural network of our
baseline tagger only contains the sparse-feature
module. We use this baseline to examine the per-
formance of a tagger trained purely on the source
domain. Feature templates are shown in Table 3,
which are based on those of Ratnaparkhi (1996)
and Shen et al. (2007).
Accuracies of the baseline tagger are shown in
the upper part of Table 6. Compared with the
performance of the official baseline (row 4 of Ta-
ble 6), which is evaluated based on the output of
BerkeleyParser (Petrov et al., 2006; Petrov and
Klein, 2007), our baseline tagger achieves com-
parable accuracies on both the source and target
domain data. With data preprocessing, the aver-
age accuracy boosts to about 92.02 on the test set
of the target domain. This is consistent with pre-
vious work (Le Roux et al., 2011), which found
that for noisy data such as web domain text, data
cleaning is a effective and necessary step.
</bodyText>
<subsectionHeader confidence="0.998449">
5.3 Exploring the Learned Knowledge
</subsectionHeader>
<bodyText confidence="0.999980333333333">
As mentioned in Section 3.1, the knowledge
learned from the WRRBM can be investigated
incrementally, using word representation, which
corresponds to initializing only the projection
layer of web-feature module with the projection
matrix of the learned WRRBM, or ngram-level
representation, which corresponds to initializing
both the projection and sigmoid layers of the web-
feature module by the learned WRRBM. In each
case, there can be two different training strate-
gies depending on whether the learned representa-
tions are further adjusted or kept unchanged dur-
ing the fine-turning phrase. Experimental results
under the 4 combined settings on the development
sets are illustrated in Figure 2, 3 and 4, where the
</bodyText>
<page confidence="0.993256">
149
</page>
<figure confidence="0.986252666666667">
WSJ
200 400 600 800 1000
Number of unlabelled sentences (k)
</figure>
<figureCaption confidence="0.9837925">
Figure 2: Tagging accuracies on the source-
domain data. “word” and “ngram” denote using
word representations and n-gram representations,
respectively. “fixed” and “adjust” denote that the
learned representation are kept unchanged or fur-
ther adjusted in supervised learning, respectively.
</figureCaption>
<figure confidence="0.992942666666667">
Email
200 400 600 800 1000
Number of unlabelled sentences (k)
</figure>
<figureCaption confidence="0.997898">
Figure 3: Accuracies on the email domain.
</figureCaption>
<figure confidence="0.982123">
Weblog
200 400 600 800 1000
Number of unlabelled sentences (k)
</figure>
<figureCaption confidence="0.999942">
Figure 4: Accuracies on the weblog domain.
</figureCaption>
<bodyText confidence="0.97983">
x-axis denotes the size of the training data and y-
axis denotes tagging accuracy.
</bodyText>
<subsubsectionHeader confidence="0.59701">
5.3.1 Effect of the Training Strategy
</subsubsectionHeader>
<bodyText confidence="0.954181">
From Figure 2 we can see that when knowl-
edge from the pre-trained WRRBM is incorpo-
</bodyText>
<table confidence="0.998965666666667">
method all non-oov oov
baseline 89.81 92.42 65.64
word-adjust +0.09 −0.05 +1.38
word-fix +0.11 +0.13 +1.73
ngram-adjust +0.53 +0.52 +0.53
ngram-fix +0.69 +0.60 +2.30
</table>
<tableCaption confidence="0.999841">
Table 4: Performance on the email domain.
</tableCaption>
<bodyText confidence="0.9936138">
rated, both the training strategies (“word-fixed”
vs “word-adjusted”, “ngram-fixed” vs “ngram-
adjusted”) improve accuracies on the source do-
main, which is consistent with previous findings
(Turian et al., 2010; Collobert et al., 2011). In
addition, adjusting the learned representation or
keeping them fixed does not result in too much dif-
ference in tagging accuracies.
On the web-domain data, shown in Figure 3 and
4, we found that leaving the learned representation
unchanged (“word-fixed”, “ngram-fixed”) yields
consistently higher performance gains. This re-
sult is to some degree expected. Intuitively, unsu-
pervised pre-training moves the parameters of the
WRRBM towards the region where properties of
the web domain data are properly modelled. How-
ever, since fine-tuning is conducted with respect
to the source domain, adjusting the parameters
of the pre-trained representation towards optimiz-
ing source domain tagging accuracies would dis-
rupt its ability in modelling the web domain data.
Therefore, a better idea is to keep the representa-
tion unchanged so that we can learn a function that
maps the general web-text properties to its syntac-
tic categories.
</bodyText>
<subsectionHeader confidence="0.687335">
5.3.2 Word and N-gram Representation
</subsectionHeader>
<bodyText confidence="0.988643176470588">
From Figures 2, 3 and 4, we can see that
adopting the ngram-level representation consis-
tently achieves better performance compared with
using word representations only (“word-fixed”
vs “ngram-fixed”, “word-adjusted” vs “ngram-
adjusted”). This result illustrates that the ngram-
level knowledge captures more complex interac-
tions of the web text, which cannot be recovered
by using only word embeddings. Similar result
was reported by Dahl et al. (2012), who found
that using both the word embeddings and the hid-
den units of a tri-gram WRRBM as additional fea-
tures for a CRF chunker yields larger improve-
ments than using word embeddings only.
Finally, more detailed accuracies under the 4
settings on the email domain are shown in Table
4. We can see that the improvement of using word
</bodyText>
<figure confidence="0.991431939393939">
Accuracy
96.9
96.8
96.7
96.6
96.5
word-fixed
word-adjust
ngram-fixed
ngram-adjust
Accuracy
89.8
90.8
90.6
90.4
90.2
91
90
word-fixed
word-adjust
ngram-fixed
ngram-adjust
Accuracy
95.8
95.6
95.4
95.2
94.8
95
word-fixed
word-adjust
ngram-fixed
ngram-adjust
</figure>
<page confidence="0.98631">
150
</page>
<table confidence="0.9994724">
RBM-E RBM-W RBM-M
+acc% Emails +0.73 +0.37 +0.69
Weblog +0.31 +0.52 +0.54
cov% Emails 95.24 92.79 93.88
Weblog 90.21 97.74 94.77
</table>
<tableCaption confidence="0.765351666666667">
Table 5: Effect of unlabelled data. “+acc” denotes
improvement in tagging accuracy and “cov” de-
notes the lexicon coverages.
</tableCaption>
<bodyText confidence="0.97585075">
representations mainly comes from better accu-
racy of out-of-vocabulary (oov) words. By con-
trast, using n-gram representations improves the
performance on both oov and non-oov.
</bodyText>
<subsectionHeader confidence="0.999377">
5.4 Effect of Unlabelled Domain Data
</subsectionHeader>
<bodyText confidence="0.9999828">
In some circumstances, we may know beforehand
that the target domain data belongs to a certain
sub-domain, such as the email domain. In such
cases, it might be desirable to train WRRBM using
data only on that domain. We conduct experiments
to test whether using the target domain data to
train the WRRBM yields better performance com-
pared with using mixed data from all sub-domains.
We trained 3 WRRBMs using the email do-
main data (RBM-E), weblog domain data (RBM-
W) and mixed domain data (RBM-M), respec-
tively, with each data set consisting of 300k sen-
tences. Tagging performance and lexicon cover-
ages of each data set on the development sets are
shown in Table 5. We can see that using the target
domain data achieves similar improvements com-
pared with using the mixed data. However, for the
email domain, RBM-W yields much smaller im-
provement compared with RBM-E, and vice versa.
From the lexicon coverages, we can see that the
sub-domains varies significantly. The results sug-
gest that using mixed data can achieve almost as
good performance as using the target sub-domain
data, while using mixed data yields a much more
robust tagger across all sub-domains.
</bodyText>
<subsectionHeader confidence="0.99542">
5.5 Final Results
</subsectionHeader>
<bodyText confidence="0.988451333333333">
The best result achieved by using a 4-gram WR-
RBM, (wi−2, ... , wi+1), with 300 hidden units
learned on 1,000k web domain sentences are
shown in row 3 of Table 6. Performance of the
top 2 systems of the SANCL 2012 task are also
shown in Table 6. Our greedy tagger achieves 93%
tagging accuracy, which is significantly better than
the baseline’s 92.02% accuracy (p &lt; 0.05 by Mc-
Nemar’s test). Moreover, we achieve the high-
est tagging accuracy reported so far on this data
set, surpassing those achieved using parser combi-
nations based on self-training (Tang et al., 2012;
Le Roux et al., 2012). In addition, different from
Le Roux et al. (2012), we do not use any external
resources in data cleaning.
</bodyText>
<sectionHeader confidence="0.999831" genericHeader="related work">
6 Related Work
</sectionHeader>
<bodyText confidence="0.999834431818182">
Learning representations has been intensively
studied in computer vision tasks (Bengio et al.,
2007; Lee et al., 2009a). In NLP, there is also
much work along this line. In particular, Col-
lobert et al. (2011) and Turian et al. (2010) learn
word embeddings to improve the performance of
in-domain POS tagging, named entity recogni-
tion, chunking and semantic role labelling. Yang
et al. (2013) induce bi-lingual word embeddings
for word alignment. Zheng et al. (2013) investi-
gate Chinese character embeddings for joint word
segmentation and POS tagging. While those ap-
proaches mainly explore token-level representa-
tions (word or character embeddings), using WR-
RBM is able to utilize both word and n-gram rep-
resentations.
Titov (2011) and Glorot et al. (2011) propose
to learn representations from the mixture of both
source and target domain unlabelled data to im-
prove cross-domain sentiment classification. Titov
(2011) also propose a regularizer to constrain the
inter-domain variability. In particular, their reg-
ularizer aims to minimize the Kullback-Leibler
(KL) distance between the marginal distributions
of the learned representations on the source and
target domains.
Their work differs from ours in that their ap-
proaches learn representations from the feature
vectors for sentiment classification, which might
be of thousands of dimensions. Such high di-
mensional input gives rise to high computational
cost and it is not clear whether those approaches
can be applied to large scale unlabelled data, with
hundreds of millions of training examples. Our
method learns representations from only word n-
grams with n ranging from 3 to 5, which can
be easily applied to large scale-data. In addition,
while Titov (2011) and Glorot et al. (2011) use the
learned representation to improve cross-domain
classification tasks, we are the first to apply it to
cross-domain structured prediction.
Blitzer et al. (2006) propose to induce shared
representations for domain adaptation, which is
based on the alternating structure optimization
</bodyText>
<page confidence="0.993896">
151
</page>
<table confidence="0.997603">
System Answer Newsgroup Review WSJ-t Avg
baseline-raw 89.79 91.36 89.96 97.09 90.31
baseline-clean 91.35 92.06 92.92 97.09 92.02
best-clean 92.37 93.59 93.62 97.44 93.15
baseline-offical 90.20 91.24 89.33 97.08 90.26
Le Roux et al.(2011) 91.79 93.81 93.11 97.29 92.90
Tang et al. (2012) 91.76 92.91 91.94 97.49 92.20
</table>
<tableCaption confidence="0.953018">
Table 6: Main results. “baseline-raw” and “baseline-clean” denote performance of our baseline tagger
</tableCaption>
<bodyText confidence="0.998469777777778">
on the raw and cleaned data, respectively. “best-clean” is best performance achieved using a 4-gram
WRRBM. The lower part shows accuracies of the official baseline and that of the top 2 participants.
(ASO) method of Ando and Zhang (2005). The
idea is to project the original feature representa-
tions into low dimensional representations, which
yields a high-accuracy classifier on the target do-
main. The new representations are induced based
on the auxiliary tasks defined on unlabelled data
together with a dimensionality reduction tech-
nique. Such auxiliary tasks can be specific to the
supervised task. As pointed out by Plank (2009),
for many NLP tasks, defining the auxiliary tasks is
a non-trivial engineering problem. Compared with
Blitzer et al. (2006), the advantage of using RBMs
is that it learns representations in a pure unsuper-
vised manner, which is much simpler.
Besides learning representations, another line
of research addresses domain-adaptation by in-
stance re-weighting (Bickel et al., 2007; Jiang
and Zhai, 2007) or feature re-weighting (Satpal
and Sarawagi, 2007). Those methods assume that
each example x that has a non-zero probability on
the source domain must have a non-zero proba-
bility on the target domain, and vice-versa. As
pointed out by Titov (2011), such an assumption
is likely to be too restrictive since most NLP tasks
adopt word-based or lexicon-based features that
vary significantly across different domains.
Regarding using neural networks for sequential
labelling, our approach shares similarity with that
of Collobert et al. (2011). In particular, we both
use a non-linear layer to model complex relations
underling word embeddings. However, our net-
work differs from theirs in the following aspects.
Collobert et al. (2011) model the dependency be-
tween neighbouring tags in a generative manner,
by employing a transition score AZA. Training the
score involves a forward process of complexity
O(nT2), where T denotes the number of tags. Our
model captures such a dependency in a discrimina-
tive manner, by just adding tag-related features to
the sparse-feature module. In addition, Collobert
et al. (2011) train their network by maximizing the
training set likelihood, while our approach is to
minimize the margin loss using guided learning.
</bodyText>
<sectionHeader confidence="0.998865" genericHeader="conclusions">
7 Conclusion
</sectionHeader>
<bodyText confidence="0.999989421052632">
We built a web-domain POS tagger using a
two-phase approach. We used a WRRBM to
learn the representation of the web text and
incorporate the representation in a neural net-
work, which is trained using guided learning
for easy-first POS tagging. Experiment showed
that our approach achieved significant improve-
ment in tagging the web domain text. In ad-
dition, we found that keeping the learned repre-
sentations unchanged yields better performance
compared with further optimizing them on the
source domain data. We release our tools at
https://github.com/majineu/TWeb.
For future work, we would like to investigate
the two-phase approach to more challenging tasks,
such as web domain syntactic parsing. We be-
lieve that high-accuracy web domain taggers and
parsers would benefit a wide range of downstream
tasks such as machine translation2.
</bodyText>
<sectionHeader confidence="0.998665" genericHeader="acknowledgments">
8 Acknowledgements
</sectionHeader>
<bodyText confidence="0.9997933">
We would like to thank Hugo Larochelle for his
advices on re-implementing WRRBM. We also
thank Nan Yang, Shujie Liu and Tong Xiao for
the fruitful discussions, and three anonymous re-
viewers for their insightful suggestions. This re-
search was supported by the National Science
Foundation of China (61272376; 61300097), the
research grant T2MOE1301 from Singapore Min-
istry of Education (MOE) and the start-up grant
SRG ISTD2012038 from SUTD.
</bodyText>
<sectionHeader confidence="0.983597" genericHeader="references">
References
</sectionHeader>
<footnote confidence="0.941436666666667">
Rie Ando and Tong Zhang. 2005. A high-performance
semi-supervised learning method for text chunk-
2This work is done while the first author is visiting SUTD.
</footnote>
<page confidence="0.991417">
152
</page>
<reference confidence="0.999425223214286">
ing. In Proceedings of the 43rd Annual Meeting
of the Association for Computational Linguistics
(ACL’05), pages 1–9, Ann Arbor, Michigan, June.
Association for Computational Linguistics.
Yoshua Bengio, Pascal Lamblin, Dan Popovici, and
Hugo Larochelle. 2007. Greedy layer-wise train-
ing of deep networks. In B. Sch¨olkopf, J. Platt, and
T. Hoffman, editors, Advances in Neural Informa-
tion Processing Systems 19, pages 153–160. MIT
Press, Cambridge, MA.
Yoshua Bengio. 2009. Learning deep architectures for
AI. Foundations and Trends in Machine Learning,
2(1):1–127. Also published as a book. Now Pub-
lishers, 2009.
Steffen Bickel, Michael Brckner, and Tobias Scheffer.
2007. Discriminative learning for differing training
and test distributions. In Proc of ICML 2007, pages
81–88. ACM Press.
John Blitzer, Ryan McDonald, and Fernando Pereira.
2006. Domain adaptation with structural correspon-
dence learning. In Proceedings of the 2006 Con-
ference on Empirical Methods in Natural Language
Processing, pages 120–128, Sydney, Australia, July.
Association for Computational Linguistics.
Michael Collins. 2002. Discriminative training meth-
ods for hidden markov models: theory and experi-
ments with perceptron algorithms. In Proceedings
of the ACL-02 conference on Empirical methods in
natural language processing - Volume 10, EMNLP
’02, pages 1–8, Stroudsburg, PA, USA. Association
for Computational Linguistics.
R. Collobert, J. Weston, L. Bottou, M. Karlen,
K. Kavukcuoglu, and P. Kuksa. 2011. Natural lan-
guage processing (almost) from scratch. Journal of
Machine Learning Research, 12:2493–2537.
George E. Dahl, Ryan P. Adams, and Hugo Larochelle.
2012. Training restricted boltzmann machines on
word observations. In John Langford and Joelle
Pineau, editors, Proceedings of the 29th Interna-
tional Conference on Machine Learning (ICML-12),
ICML ’12, pages 679–686, New York, NY, USA,
July. Omnipress.
Xavier Glorot, Antoine Bordes, and Yoshua Bengio.
2011. Domain adaptation for large-scale sentiment
classification: A deep learning approach. In Proc of
ICML 2011, pages 513–520.
Yoav Goldberg and Michael Elhadad. 2010. An effi-
cient algorithm for easy-first non-directional depen-
dency parsing. In Human Language Technologies:
The 2010 Annual Conference of the North American
Chapter of the Association for Computational Lin-
guistics, HLT ’10, pages 742–750, Stroudsburg, PA,
USA. Association for Computational Linguistics.
Geoffrey E. Hinton, Simon Osindero, and Yee-Whye
Teh. 2006. A fast learning algorithm for deep belief
nets. Neural Comput., 18(7):1527–1554, July.
Geoffrey E. Hinton. 2002. Training products of ex-
perts by minimizing contrastive divergence. Neural
Comput., 14(8):1771–1800, August.
Jing Jiang and ChengXiang Zhai. 2007. Instance
weighting for domain adaptation in nlp. In Pro-
ceedings of the 45th Annual Meeting of the Associ-
ation of Computational Linguistics, pages 264–271,
Prague, Czech Republic, June. Association for Com-
putational Linguistics.
Joseph Le Roux, Jennifer Foster, Joachim Wagner, Ra-
sul Samad Zadeh Kaljahi, and Anton Bryl. 2012.
DCU-Paris13 Systems for the SANCL 2012 Shared
Task. In Proceedings of the NAACL 2012 First
Workshop on Syntactic Analysis of Non-Canonical
Language (SANCL), pages 1–4, Montr´eal, Canada,
June.
Honglak Lee, Roger Grosse, Rajesh Ranganath, and
Andrew Y. Ng. 2009a. Convolutional deep belief
networks for scalable unsupervised learning of hi-
erarchical representations. In Proc of ICML 2009,
pages 609–616.
Honglak Lee, Peter Pham, Yan Largman, and Andrew
Ng. 2009b. Unsupervised feature learning for audio
classification using convolutional deep belief net-
works. In Y. Bengio, D. Schuurmans, J. Lafferty,
C. K. I. Williams, and A. Culotta, editors, Advances
in Neural Information Processing Systems 22, pages
1096–1104.
Ji Ma, Jingbo Zhu, Tong Xiao, and Nan Yang. 2013.
Easy-first pos tagging and dependency parsing with
beam search. In Proceedings of the 51st Annual
Meeting of the Association for Computational Lin-
guistics (Volume 2: Short Papers), pages 110–114,
Sofia, Bulgaria, August. Association for Computa-
tional Linguistics.
Slav Petrov and Dan Klein. 2007. Improved infer-
ence for unlexicalized parsing. In Human Language
Technologies 2007: The Conference of the North
American Chapter of the Association for Computa-
tional Linguistics; Proceedings of the Main Confer-
ence, pages 404–411, Rochester, New York, April.
Association for Computational Linguistics.
Slav Petrov and Ryan McDonald. 2012. Overview of
the 2012 shared task on parsing the web. Notes of
the First Workshop on Syntactic Analysis of Non-
Canonical Language (SANCL).
Slav Petrov, Leon Barrett, Romain Thibaux, and Dan
Klein. 2006. Learning accurate, compact, and
interpretable tree annotation. In Proceedings of
the 21st International Conference on Computational
Linguistics and 44th Annual Meeting of the Associa-
tion for Computational Linguistics, pages 433–440,
Sydney, Australia, July. Association for Computa-
tional Linguistics.
Barbara Plank. 2009. Structural correspondence learn-
ing for parse disambiguation. In Alex Lascarides,
</reference>
<page confidence="0.989721">
153
</page>
<reference confidence="0.999939067567568">
Claire Gardent, and Joakim Nivre, editors, EACL
(Student Research Workshop), pages 37–45. The As-
sociation for Computer Linguistics.
Marc’Aurelio Ranzato, Christopher Poultney, Sumit
Chopra, and Yann LeCun. 2007. Efficient learn-
ing of sparse representations with an energy-based
model. In B. Sch¨olkopf, J. Platt, and T. Hoffman,
editors, Advances in Neural Information Process-
ing Systems 19, pages 1137–1144. MIT Press, Cam-
bridge, MA.
Adwait Ratnaparkhi. 1996. A maximum entropy
model for part-of-speech tagging. In Proceedings
of the Conference on Empirical Methods in Natural
Language Processing.
David E. Rumelhart, Geoffrey E. Hinton, and Ronald J.
Williams. 1988. Neurocomputing: Foundations
of research. chapter Learning Representations
by Back-propagating Errors, pages 696–699. MIT
Press, Cambridge, MA, USA.
Sandeepkumar Satpal and Sunita Sarawagi. 2007. Do-
main adaptation of conditional probability models
via feature subsetting. In PKDD, volume 4702 of
Lecture Notes in Computer Science, pages 224–235.
Springer.
Libin Shen, Giorgio Satta, and Aravind Joshi. 2007.
Guided learning for bidirectional sequence classi-
fication. In Proceedings of the 45th Annual Meet-
ing of the Association of Computational Linguistics,
pages 760–767, Prague, Czech Republic, June. As-
sociation for Computational Linguistics.
Buzhou Tang, Min Jiang, and Hua Xu. 2012.
Varderlibt’s systems for sancl2012 shared task. In
Proceedings of the NAACL 2012 First Workshop
on Syntactic Analysis of Non-Canonical Language
(SANCL), Montr´eal, Canada, June.
Ivan Titov. 2011. Domain adaptation by constraining
inter-domain variability of latent feature representa-
tion. In Proceedings of the 49th Annual Meeting of
the Association for Computational Linguistics: Hu-
man Language Technologies, pages 62–71, Portland,
Oregon, USA, June. Association for Computational
Linguistics.
Joseph Turian, Lev-Arie Ratinov, and Yoshua Bengio.
2010. Word representations: A simple and general
method for semi-supervised learning. In Proceed-
ings of the 48th Annual Meeting of the Association
for Computational Linguistics, pages 384–394, Up-
psala, Sweden, July. Association for Computational
Linguistics.
Mengqiu Wang and Christopher D. Manning. 2013.
Effect of non-linear deep architecture in sequence la-
beling. In Proceedings of the 6th International Joint
Conference on Natural Language Processing (IJC-
NLP).
Nan Yang, Shujie Liu, Mu Li, Ming Zhou, and Neng-
hai Yu. 2013. Word alignment modeling with con-
text dependent deep neural network. In Proceed-
ings of the 51st Annual Meeting of the Association
for Computational Linguistics (Volume 1: Long Pa-
pers), pages 166–175, Sofia, Bulgaria, August. As-
sociation for Computational Linguistics.
Yue Zhang and Stephen Clark. 2011. Syntax-based
grammaticality improvement using ccg and guided
search. In Proceedings of the 2011 Conference on
Empirical Methods in Natural Language Process-
ing, pages 1147–1157, Edinburgh, Scotland, UK.,
July. Association for Computational Linguistics.
Xiaoqing Zheng, Hanyang Chen, and Tianyu Xu.
2013. Deep learning for Chinese word segmenta-
tion and POS tagging. In Proceedings of the 2013
Conference on Empirical Methods in Natural Lan-
guage Processing, pages 647–657, Seattle, Wash-
ington, USA, October. Association for Computa-
tional Linguistics.
</reference>
<page confidence="0.999771">
154
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.692758">
<title confidence="0.981605">Tagging The Web: Building A Robust Web Tagger with Neural Network</title>
<affiliation confidence="0.9496095">Yue and Jingbo University, University of Technology and</affiliation>
<abstract confidence="0.978982833333333">yue zhujingbo@mail.neu.edu.cn Abstract In this paper, we address the problem of web-domain POS tagging using a twophase approach. The first phase learns representations that capture regularities underlying web text. The representation is integrated as features into a neural network that serves as a scorer for an easy-first POS tagger. Parameters of the neural network are trained using guided learning in the second phase. Experiment on the SANCL 2012 shared task show that our approach average tagging accuracy, which is the best accuracy reported so far on this data set, higher than those given by ensembled syntactic parsers.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>ing</author>
</authors>
<date></date>
<booktitle>In Proceedings of the 43rd Annual Meeting of the Association for Computational Linguistics (ACL’05),</booktitle>
<pages>1--9</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Ann Arbor, Michigan,</location>
<marker>ing, </marker>
<rawString>ing. In Proceedings of the 43rd Annual Meeting of the Association for Computational Linguistics (ACL’05), pages 1–9, Ann Arbor, Michigan, June. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yoshua Bengio</author>
<author>Pascal Lamblin</author>
<author>Dan Popovici</author>
<author>Hugo Larochelle</author>
</authors>
<title>Greedy layer-wise training of deep networks.</title>
<date>2007</date>
<booktitle>Advances in Neural Information Processing Systems 19,</booktitle>
<pages>153--160</pages>
<editor>In B. Sch¨olkopf, J. Platt, and T. Hoffman, editors,</editor>
<publisher>MIT Press,</publisher>
<location>Cambridge, MA.</location>
<contexts>
<context position="8292" citStr="Bengio et al., 2007" startWordPosition="1376" endWordPosition="1379">lds the conditional distributions: n P(v|h) = Y P(v(j)|h) P(h|v) = Y P(hi|v) j=1 i=1 W(j)Dv(j)) (6) i· P(v(j) = wk|h) = Z1 exp(b0wk + h0W(j)Dwk) (7) P(hi = 1|v) = Q(ci + Xn j=1 145 Again Z is the partition function. The parameters {b, c, D, W(1), ... , W(n)} can be trained using a Metropolis-Hastings-based CD variant and the learned word representations also capture certain syntactic information; see Dahl et al. (2012) for more details. Note that one can stack standard RBMs on top of a WRRBM to construct a Deep Belief Network (DBN). By adopting greedy layer-wise training (Hinton et al., 2006; Bengio et al., 2007), DBNs are capable of modelling higher order non-linear relations between the input, and has been demonstrated to improve performance for many computer vision tasks (Hinton et al., 2006; Bengio et al., 2007; Lee et al., 2009a). However, in this work we do not observe further improvement by employing DBNs. This may partly be due to the fact that unlike computer vision tasks, the input structure of POS tagging or other sequential labelling tasks is relatively simple, and a single non-linear layer is enough to model the interactions within the input (Wang and Manning, 2013). 3 Neural Network for </context>
<context position="28937" citStr="Bengio et al., 2007" startWordPosition="4862" endWordPosition="4865">s of the SANCL 2012 task are also shown in Table 6. Our greedy tagger achieves 93% tagging accuracy, which is significantly better than the baseline’s 92.02% accuracy (p &lt; 0.05 by McNemar’s test). Moreover, we achieve the highest tagging accuracy reported so far on this data set, surpassing those achieved using parser combinations based on self-training (Tang et al., 2012; Le Roux et al., 2012). In addition, different from Le Roux et al. (2012), we do not use any external resources in data cleaning. 6 Related Work Learning representations has been intensively studied in computer vision tasks (Bengio et al., 2007; Lee et al., 2009a). In NLP, there is also much work along this line. In particular, Collobert et al. (2011) and Turian et al. (2010) learn word embeddings to improve the performance of in-domain POS tagging, named entity recognition, chunking and semantic role labelling. Yang et al. (2013) induce bi-lingual word embeddings for word alignment. Zheng et al. (2013) investigate Chinese character embeddings for joint word segmentation and POS tagging. While those approaches mainly explore token-level representations (word or character embeddings), using WRRBM is able to utilize both word and n-gr</context>
</contexts>
<marker>Bengio, Lamblin, Popovici, Larochelle, 2007</marker>
<rawString>Yoshua Bengio, Pascal Lamblin, Dan Popovici, and Hugo Larochelle. 2007. Greedy layer-wise training of deep networks. In B. Sch¨olkopf, J. Platt, and T. Hoffman, editors, Advances in Neural Information Processing Systems 19, pages 153–160. MIT Press, Cambridge, MA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yoshua Bengio</author>
</authors>
<title>Learning deep architectures for AI. Foundations and Trends</title>
<date>2009</date>
<booktitle>in Machine Learning,</booktitle>
<volume>2</volume>
<issue>1</issue>
<publisher>Now Publishers,</publisher>
<note>Also published as a book.</note>
<contexts>
<context position="4535" citStr="Bengio, 2009" startWordPosition="700" endWordPosition="701">eedings of the 52nd Annual Meeting of the Association for Computational Linguistics, pages 144–154, Baltimore, Maryland, USA, June 23-25 2014. c�2014 Association for Computational Linguistics set, higher than those given by ensembled syntactic parsers. Our code will be publicly available at https://github.com/majineu/TWeb. 2 Learning from Web Text Unsupervised learning is often used for training encoders that convert the input data to abstract representations (i.e. encoding vectors). Such representations capture hidden properties of the input, and can be used as features for supervised tasks (Bengio, 2009; Ranzato et al., 2007). Among the many proposed encoders, we choose the restricted Boltzmann machine (RBM), which has been successfully used in many tasks (Lee et al., 2009b; Hinton et al., 2006). In this section, we give some background on RBMs and then show how they can be used to learn representations of the web text. 2.1 Restricted Boltzmann Machine The RBM is a type of graphical model that contains two layers of binary stochastic units v E {0,1}V and h E {0,1}H, corresponding to a set of visible and hidden variables, respectively. The RBM defines the joint probability distribution over v</context>
</contexts>
<marker>Bengio, 2009</marker>
<rawString>Yoshua Bengio. 2009. Learning deep architectures for AI. Foundations and Trends in Machine Learning, 2(1):1–127. Also published as a book. Now Publishers, 2009.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Steffen Bickel</author>
<author>Michael Brckner</author>
<author>Tobias Scheffer</author>
</authors>
<title>Discriminative learning for differing training and test distributions.</title>
<date>2007</date>
<booktitle>In Proc of ICML</booktitle>
<pages>81--88</pages>
<publisher>ACM Press.</publisher>
<contexts>
<context position="32300" citStr="Bickel et al., 2007" startWordPosition="5378" endWordPosition="5381">t domain. The new representations are induced based on the auxiliary tasks defined on unlabelled data together with a dimensionality reduction technique. Such auxiliary tasks can be specific to the supervised task. As pointed out by Plank (2009), for many NLP tasks, defining the auxiliary tasks is a non-trivial engineering problem. Compared with Blitzer et al. (2006), the advantage of using RBMs is that it learns representations in a pure unsupervised manner, which is much simpler. Besides learning representations, another line of research addresses domain-adaptation by instance re-weighting (Bickel et al., 2007; Jiang and Zhai, 2007) or feature re-weighting (Satpal and Sarawagi, 2007). Those methods assume that each example x that has a non-zero probability on the source domain must have a non-zero probability on the target domain, and vice-versa. As pointed out by Titov (2011), such an assumption is likely to be too restrictive since most NLP tasks adopt word-based or lexicon-based features that vary significantly across different domains. Regarding using neural networks for sequential labelling, our approach shares similarity with that of Collobert et al. (2011). In particular, we both use a non-l</context>
</contexts>
<marker>Bickel, Brckner, Scheffer, 2007</marker>
<rawString>Steffen Bickel, Michael Brckner, and Tobias Scheffer. 2007. Discriminative learning for differing training and test distributions. In Proc of ICML 2007, pages 81–88. ACM Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>John Blitzer</author>
<author>Ryan McDonald</author>
<author>Fernando Pereira</author>
</authors>
<title>Domain adaptation with structural correspondence learning.</title>
<date>2006</date>
<booktitle>In Proceedings of the 2006 Conference on Empirical Methods in Natural Language Processing,</booktitle>
<pages>120--128</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Sydney, Australia,</location>
<contexts>
<context position="30748" citStr="Blitzer et al. (2006)" startWordPosition="5144" endWordPosition="5147">classification, which might be of thousands of dimensions. Such high dimensional input gives rise to high computational cost and it is not clear whether those approaches can be applied to large scale unlabelled data, with hundreds of millions of training examples. Our method learns representations from only word ngrams with n ranging from 3 to 5, which can be easily applied to large scale-data. In addition, while Titov (2011) and Glorot et al. (2011) use the learned representation to improve cross-domain classification tasks, we are the first to apply it to cross-domain structured prediction. Blitzer et al. (2006) propose to induce shared representations for domain adaptation, which is based on the alternating structure optimization 151 System Answer Newsgroup Review WSJ-t Avg baseline-raw 89.79 91.36 89.96 97.09 90.31 baseline-clean 91.35 92.06 92.92 97.09 92.02 best-clean 92.37 93.59 93.62 97.44 93.15 baseline-offical 90.20 91.24 89.33 97.08 90.26 Le Roux et al.(2011) 91.79 93.81 93.11 97.29 92.90 Tang et al. (2012) 91.76 92.91 91.94 97.49 92.20 Table 6: Main results. “baseline-raw” and “baseline-clean” denote performance of our baseline tagger on the raw and cleaned data, respectively. “best-clean” </context>
<context position="32050" citStr="Blitzer et al. (2006)" startWordPosition="5341" endWordPosition="5344">s of the official baseline and that of the top 2 participants. (ASO) method of Ando and Zhang (2005). The idea is to project the original feature representations into low dimensional representations, which yields a high-accuracy classifier on the target domain. The new representations are induced based on the auxiliary tasks defined on unlabelled data together with a dimensionality reduction technique. Such auxiliary tasks can be specific to the supervised task. As pointed out by Plank (2009), for many NLP tasks, defining the auxiliary tasks is a non-trivial engineering problem. Compared with Blitzer et al. (2006), the advantage of using RBMs is that it learns representations in a pure unsupervised manner, which is much simpler. Besides learning representations, another line of research addresses domain-adaptation by instance re-weighting (Bickel et al., 2007; Jiang and Zhai, 2007) or feature re-weighting (Satpal and Sarawagi, 2007). Those methods assume that each example x that has a non-zero probability on the source domain must have a non-zero probability on the target domain, and vice-versa. As pointed out by Titov (2011), such an assumption is likely to be too restrictive since most NLP tasks adop</context>
</contexts>
<marker>Blitzer, McDonald, Pereira, 2006</marker>
<rawString>John Blitzer, Ryan McDonald, and Fernando Pereira. 2006. Domain adaptation with structural correspondence learning. In Proceedings of the 2006 Conference on Empirical Methods in Natural Language Processing, pages 120–128, Sydney, Australia, July. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael Collins</author>
</authors>
<title>Discriminative training methods for hidden markov models: theory and experiments with perceptron algorithms.</title>
<date>2002</date>
<booktitle>In Proceedings of the ACL-02 conference on Empirical methods in natural language processing - Volume 10, EMNLP ’02,</booktitle>
<pages>1--8</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Stroudsburg, PA, USA.</location>
<contexts>
<context position="1175" citStr="Collins, 2002" startWordPosition="174" endWordPosition="175"> of the neural network are trained using guided learning in the second phase. Experiment on the SANCL 2012 shared task show that our approach achieves 93.15% average tagging accuracy, which is the best accuracy reported so far on this data set, higher than those given by ensembled syntactic parsers. 1 Introduction Analysing and extracting useful information from the web has become an increasingly important research direction for the NLP community, where many tasks require part-of-speech (POS) tagging as a fundamental preprocessing step. However, state-of-the-art POS taggers in the literature (Collins, 2002; Shen et al., 2007) are mainly optimized on the the Penn Treebank (PTB), and when shifted to web data, tagging accuracies drop significantly (Petrov and McDonald, 2012). The problem we face here can be considered as a special case of domain adaptation, where we have access to labelled data on the source domain (PTB) and unlabelled data on the target domain (web data). Exploiting useful information from the web data can be the key to improving web domain tagging. Towards this end, we adopt the idea of learning representations which has been demonstrated useful in capturing hidden regularities </context>
<context position="6117" citStr="Collins, 2002" startWordPosition="991" endWordPosition="992">independent with each other given the hidden layer units, and vice versa. This yields the conditional distribution: V H P(v|h) = Y P(vj|h) P(h|v) = Y P(hi|v) j=1 i=1 P(vj = 1|h) = Q(bj + W·jh) (3) P(hi = 1|v) = Q(cj + Wi·v) (4) Here Q denotes the sigmoid function. Parameters of RBMs θ = {b, c, W} can be trained efficiently using contrastive divergence learning (CD), see (Hinton, 2002) for detailed descriptions of CD. 2.2 Encoding Web Text with RBM Most of the indicative features for POS disambiguation can be found from the words and word combinations within a local context (Ratnaparkhi, 1996; Collins, 2002). Inspired by this observation, we apply the RBM to learn feature representations from word n-grams. More specifically, given the ith word wi of a sentence, we apply RBMs to model the joint distribution of the n-gram (wi−l, · · · , wi+r), where l and r denote the left and right window, respectively. Note that the visible units of RBMs are binary. While in our case, each visible variable corresponds to a word, which may take on tens-of-thousands of different values. Therefore, the RBM need to be re-factorized to make inference tractable. We utilize the Word Representation RBM (WRRBM) factorizat</context>
</contexts>
<marker>Collins, 2002</marker>
<rawString>Michael Collins. 2002. Discriminative training methods for hidden markov models: theory and experiments with perceptron algorithms. In Proceedings of the ACL-02 conference on Empirical methods in natural language processing - Volume 10, EMNLP ’02, pages 1–8, Stroudsburg, PA, USA. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Collobert</author>
<author>J Weston</author>
<author>L Bottou</author>
<author>M Karlen</author>
<author>K Kavukcuoglu</author>
<author>P Kuksa</author>
</authors>
<title>Natural language processing (almost) from scratch.</title>
<date>2011</date>
<journal>Journal of Machine Learning Research,</journal>
<pages>12--2493</pages>
<contexts>
<context position="2935" citStr="Collobert et al., 2011" startWordPosition="464" endWordPosition="467">to give higher accuracies than the standard left-to-right POS tagger (Shen et al., 2007; Ma et al., 2013). In the fine-tuning phase, the parameters of the network are optimized on a set of labelled training data using guided learning. The learned model preserves the property of preferring to tag easy words first. To our knowledge, we are the first to investigate guided learning for neural networks. The idea of learning representations from unlabelled data and then fine-tuning a model with such representations according to some supervised criterion has been studied before (Turian et al., 2010; Collobert et al., 2011; Glorot et al., 2011). While most previous work focus on in-domain sequential labelling or cross-domain classification tasks, we are the first to learn representations for web-domain structured prediction. Previous work treats the learned representations either as model parameters that are further optimized in supervised fine-tuning (Collobert et al., 2011) or as fixed features that are kept unchanged (Turian et al., 2010; Glorot et al., 2011). In this work, we investigate both strategies and give empirical comparisons in the cross-domain setting. Our results suggest that while both strategie</context>
<context position="11936" citStr="Collobert et al. (2011)" startWordPosition="2006" endWordPosition="2009">f the WRRBM, which can be treated as the ⎛ ⎜ o1 = w ⎝ M1wwi−l ... M1wwi+r 146 representations of the input n-gram. This can be achieved by also initializing the parameters of the second layer of the web-feature module using the position-dependent weight matrix and hidden bias of the learned WRRBM: b2w ← c (11) M2w ← (W(1),..., W(n)) (12) Second, the web-feature module also allows us to make a comparison between whether or not to further adjust the pre-trained representation in the supervised fine-tuning phase, which corresponds to the supervised learning strategies of Turian et al. (2010) and Collobert et al. (2011), respectively. To our knowledge, no investigations have been presented in the literature on this issue. 3.2 The Sparse-Feature Module The sparse-feature module, as shown in the lower right part of Figure 1, is designed to incorporate commonly-used tagging features. The input for this module is a vector of boolean values Φ(x) = (f1(x), ... , fk(x)), where x denotes the partially tagged input sentence and fz(x) denotes a feature function, which returns 1 if the corresponding feature fires and 0 otherwise. The first layer of this module is a linear transformation layer, which converts the high d</context>
<context position="13412" citStr="Collobert et al. (2011)" startWordPosition="2256" endWordPosition="2259">ayer, to model more complex relations. For POS tagging, we found that a simple linear layer yields satisfactory accuracies. The web-feature and sparse-feature modules are combined by a linear output layer, as shown in the upper part of Figure 1. The value of each unit in this layer denotes the score of the corresponding POS tag. oo = Mo ow + bo (14) os In some circumstances, probability distribution over POS tags might be a more preferable form of output. Such distribution can be easily obtained by adding a soft-max layer on top of the output layer to perform a local normalization, as done by Collobert et al. (2011). Algorithm 1 Easy-first POS tagging Input: x a sentence of m words w1, ... , wm Output: tag sequence of x 1: U ← [w1, ... , wm] // untagged words 2: while U =6 [] do 3: ( ˆw, ˆt) ← arg max(w,t)∈U×T S(w, t) 4: ˆw.t ← tˆ 5: U ← U/[ ˆw] // remove wˆ from U 6: end while 7: return [w1.t, ... , wm.t] 4 Easy-first POS tagging with Neural Network The neural network proposed in Section 3 is used for POS disambiguation by the easy-first POS tagger. Parameters of the network are trained using guided learning, where learning and search interact with each other. 4.1 Easy-first POS tagging Pseudo-code of e</context>
<context position="24472" citStr="Collobert et al., 2011" startWordPosition="4140" endWordPosition="4143">size of the training data and yaxis denotes tagging accuracy. 5.3.1 Effect of the Training Strategy From Figure 2 we can see that when knowledge from the pre-trained WRRBM is incorpomethod all non-oov oov baseline 89.81 92.42 65.64 word-adjust +0.09 −0.05 +1.38 word-fix +0.11 +0.13 +1.73 ngram-adjust +0.53 +0.52 +0.53 ngram-fix +0.69 +0.60 +2.30 Table 4: Performance on the email domain. rated, both the training strategies (“word-fixed” vs “word-adjusted”, “ngram-fixed” vs “ngramadjusted”) improve accuracies on the source domain, which is consistent with previous findings (Turian et al., 2010; Collobert et al., 2011). In addition, adjusting the learned representation or keeping them fixed does not result in too much difference in tagging accuracies. On the web-domain data, shown in Figure 3 and 4, we found that leaving the learned representation unchanged (“word-fixed”, “ngram-fixed”) yields consistently higher performance gains. This result is to some degree expected. Intuitively, unsupervised pre-training moves the parameters of the WRRBM towards the region where properties of the web domain data are properly modelled. However, since fine-tuning is conducted with respect to the source domain, adjusting </context>
<context position="29046" citStr="Collobert et al. (2011)" startWordPosition="4882" endWordPosition="4886">h is significantly better than the baseline’s 92.02% accuracy (p &lt; 0.05 by McNemar’s test). Moreover, we achieve the highest tagging accuracy reported so far on this data set, surpassing those achieved using parser combinations based on self-training (Tang et al., 2012; Le Roux et al., 2012). In addition, different from Le Roux et al. (2012), we do not use any external resources in data cleaning. 6 Related Work Learning representations has been intensively studied in computer vision tasks (Bengio et al., 2007; Lee et al., 2009a). In NLP, there is also much work along this line. In particular, Collobert et al. (2011) and Turian et al. (2010) learn word embeddings to improve the performance of in-domain POS tagging, named entity recognition, chunking and semantic role labelling. Yang et al. (2013) induce bi-lingual word embeddings for word alignment. Zheng et al. (2013) investigate Chinese character embeddings for joint word segmentation and POS tagging. While those approaches mainly explore token-level representations (word or character embeddings), using WRRBM is able to utilize both word and n-gram representations. Titov (2011) and Glorot et al. (2011) propose to learn representations from the mixture o</context>
<context position="32864" citStr="Collobert et al. (2011)" startWordPosition="5465" endWordPosition="5468">in-adaptation by instance re-weighting (Bickel et al., 2007; Jiang and Zhai, 2007) or feature re-weighting (Satpal and Sarawagi, 2007). Those methods assume that each example x that has a non-zero probability on the source domain must have a non-zero probability on the target domain, and vice-versa. As pointed out by Titov (2011), such an assumption is likely to be too restrictive since most NLP tasks adopt word-based or lexicon-based features that vary significantly across different domains. Regarding using neural networks for sequential labelling, our approach shares similarity with that of Collobert et al. (2011). In particular, we both use a non-linear layer to model complex relations underling word embeddings. However, our network differs from theirs in the following aspects. Collobert et al. (2011) model the dependency between neighbouring tags in a generative manner, by employing a transition score AZA. Training the score involves a forward process of complexity O(nT2), where T denotes the number of tags. Our model captures such a dependency in a discriminative manner, by just adding tag-related features to the sparse-feature module. In addition, Collobert et al. (2011) train their network by maxi</context>
</contexts>
<marker>Collobert, Weston, Bottou, Karlen, Kavukcuoglu, Kuksa, 2011</marker>
<rawString>R. Collobert, J. Weston, L. Bottou, M. Karlen, K. Kavukcuoglu, and P. Kuksa. 2011. Natural language processing (almost) from scratch. Journal of Machine Learning Research, 12:2493–2537.</rawString>
</citation>
<citation valid="true">
<authors>
<author>George E Dahl</author>
<author>Ryan P Adams</author>
<author>Hugo Larochelle</author>
</authors>
<title>Training restricted boltzmann machines on word observations.</title>
<date>2012</date>
<booktitle>In John Langford and Joelle Pineau, editors, Proceedings of the 29th International Conference on Machine Learning (ICML-12), ICML ’12,</booktitle>
<pages>679--686</pages>
<publisher>Omnipress.</publisher>
<location>New York, NY, USA,</location>
<contexts>
<context position="6751" citStr="Dahl et al. (2012)" startWordPosition="1099" endWordPosition="1102">is observation, we apply the RBM to learn feature representations from word n-grams. More specifically, given the ith word wi of a sentence, we apply RBMs to model the joint distribution of the n-gram (wi−l, · · · , wi+r), where l and r denote the left and right window, respectively. Note that the visible units of RBMs are binary. While in our case, each visible variable corresponds to a word, which may take on tens-of-thousands of different values. Therefore, the RBM need to be re-factorized to make inference tractable. We utilize the Word Representation RBM (WRRBM) factorization proposed by Dahl et al. (2012). The basic idea is to share word representations across different positions in the input n-gram while using position-dependent weights to distinguish between different word orders. Let wk be the k-th entry of lexicon L, and wk be its one-hot representation (i.e., only the k-th component of wk is 1, and all the others are 0). Let v(j) represents the j-th visible variable of the WRRBM, which is a vector of length |L|. Then v(j) = wk means that the j-th word in the n-gram is wk. Let D E RD×|L |be a projection matrix, then Dwk projects wk into a D-dimensional real value vector (embedding). For ea</context>
<context position="8094" citStr="Dahl et al. (2012)" startWordPosition="1341" endWordPosition="1344">word projection in position j. The visible biases are also shared across different positions (b(j) = b bj) and the energy function is: E(v, h) = −c0h − Xn (b0v(j) + h0W(j)Dv(j)), j=1 (5) which yields the conditional distributions: n P(v|h) = Y P(v(j)|h) P(h|v) = Y P(hi|v) j=1 i=1 W(j)Dv(j)) (6) i· P(v(j) = wk|h) = Z1 exp(b0wk + h0W(j)Dwk) (7) P(hi = 1|v) = Q(ci + Xn j=1 145 Again Z is the partition function. The parameters {b, c, D, W(1), ... , W(n)} can be trained using a Metropolis-Hastings-based CD variant and the learned word representations also capture certain syntactic information; see Dahl et al. (2012) for more details. Note that one can stack standard RBMs on top of a WRRBM to construct a Deep Belief Network (DBN). By adopting greedy layer-wise training (Hinton et al., 2006; Bengio et al., 2007), DBNs are capable of modelling higher order non-linear relations between the input, and has been demonstrated to improve performance for many computer vision tasks (Hinton et al., 2006; Bengio et al., 2007; Lee et al., 2009a). However, in this work we do not observe further improvement by employing DBNs. This may partly be due to the fact that unlike computer vision tasks, the input structure of PO</context>
<context position="25887" citStr="Dahl et al. (2012)" startWordPosition="4355" endWordPosition="4358">the representation unchanged so that we can learn a function that maps the general web-text properties to its syntactic categories. 5.3.2 Word and N-gram Representation From Figures 2, 3 and 4, we can see that adopting the ngram-level representation consistently achieves better performance compared with using word representations only (“word-fixed” vs “ngram-fixed”, “word-adjusted” vs “ngramadjusted”). This result illustrates that the ngramlevel knowledge captures more complex interactions of the web text, which cannot be recovered by using only word embeddings. Similar result was reported by Dahl et al. (2012), who found that using both the word embeddings and the hidden units of a tri-gram WRRBM as additional features for a CRF chunker yields larger improvements than using word embeddings only. Finally, more detailed accuracies under the 4 settings on the email domain are shown in Table 4. We can see that the improvement of using word Accuracy 96.9 96.8 96.7 96.6 96.5 word-fixed word-adjust ngram-fixed ngram-adjust Accuracy 89.8 90.8 90.6 90.4 90.2 91 90 word-fixed word-adjust ngram-fixed ngram-adjust Accuracy 95.8 95.6 95.4 95.2 94.8 95 word-fixed word-adjust ngram-fixed ngram-adjust 150 RBM-E RB</context>
</contexts>
<marker>Dahl, Adams, Larochelle, 2012</marker>
<rawString>George E. Dahl, Ryan P. Adams, and Hugo Larochelle. 2012. Training restricted boltzmann machines on word observations. In John Langford and Joelle Pineau, editors, Proceedings of the 29th International Conference on Machine Learning (ICML-12), ICML ’12, pages 679–686, New York, NY, USA, July. Omnipress.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Xavier Glorot</author>
<author>Antoine Bordes</author>
<author>Yoshua Bengio</author>
</authors>
<title>Domain adaptation for large-scale sentiment classification: A deep learning approach.</title>
<date>2011</date>
<booktitle>In Proc of ICML 2011,</booktitle>
<pages>513--520</pages>
<contexts>
<context position="2957" citStr="Glorot et al., 2011" startWordPosition="468" endWordPosition="471">s than the standard left-to-right POS tagger (Shen et al., 2007; Ma et al., 2013). In the fine-tuning phase, the parameters of the network are optimized on a set of labelled training data using guided learning. The learned model preserves the property of preferring to tag easy words first. To our knowledge, we are the first to investigate guided learning for neural networks. The idea of learning representations from unlabelled data and then fine-tuning a model with such representations according to some supervised criterion has been studied before (Turian et al., 2010; Collobert et al., 2011; Glorot et al., 2011). While most previous work focus on in-domain sequential labelling or cross-domain classification tasks, we are the first to learn representations for web-domain structured prediction. Previous work treats the learned representations either as model parameters that are further optimized in supervised fine-tuning (Collobert et al., 2011) or as fixed features that are kept unchanged (Turian et al., 2010; Glorot et al., 2011). In this work, we investigate both strategies and give empirical comparisons in the cross-domain setting. Our results suggest that while both strategies improve in-domain ta</context>
<context position="29594" citStr="Glorot et al. (2011)" startWordPosition="4968" endWordPosition="4971">s also much work along this line. In particular, Collobert et al. (2011) and Turian et al. (2010) learn word embeddings to improve the performance of in-domain POS tagging, named entity recognition, chunking and semantic role labelling. Yang et al. (2013) induce bi-lingual word embeddings for word alignment. Zheng et al. (2013) investigate Chinese character embeddings for joint word segmentation and POS tagging. While those approaches mainly explore token-level representations (word or character embeddings), using WRRBM is able to utilize both word and n-gram representations. Titov (2011) and Glorot et al. (2011) propose to learn representations from the mixture of both source and target domain unlabelled data to improve cross-domain sentiment classification. Titov (2011) also propose a regularizer to constrain the inter-domain variability. In particular, their regularizer aims to minimize the Kullback-Leibler (KL) distance between the marginal distributions of the learned representations on the source and target domains. Their work differs from ours in that their approaches learn representations from the feature vectors for sentiment classification, which might be of thousands of dimensions. Such hig</context>
</contexts>
<marker>Glorot, Bordes, Bengio, 2011</marker>
<rawString>Xavier Glorot, Antoine Bordes, and Yoshua Bengio. 2011. Domain adaptation for large-scale sentiment classification: A deep learning approach. In Proc of ICML 2011, pages 513–520.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yoav Goldberg</author>
<author>Michael Elhadad</author>
</authors>
<title>An efficient algorithm for easy-first non-directional dependency parsing.</title>
<date>2010</date>
<booktitle>In Human Language Technologies: The 2010 Annual Conference of the North American Chapter of the Association for Computational Linguistics, HLT ’10,</booktitle>
<pages>742--750</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Stroudsburg, PA, USA.</location>
<contexts>
<context position="16580" citStr="Goldberg and Elhadad, 2010" startWordPosition="2831" endWordPosition="2834"> back-propagation updates can be used to update the model’s parameters (line 8 ∼ line 11). For the special case where wˆ and w do refer to the same word w, it can be easily verified that the two separate back-propagation updates equal to the standard back-propagation with a loss 1 + nn(w, t) − nn(w, ˆt) on the input (w). The algorithm proposed here belongs to a general framework named guided learning, where search and learning interact with each other. The algorithm learns not only a local classifier, but also the inference order. While previous work (Shen et al., 2007; Zhang and Clark, 2011; Goldberg and Elhadad, 2010) apply guided learning to train a linear classifier by using variants of the perceptron algorithm, we are the first to combine guided learning with a neural network, by using a margin loss and a modified back-propagation algorithm. 5 Experiments 5.1 Setup Our experiments are conducted on the data set provided by the SANCL 2012 shared task, which aims at building a single robust syntactic analysis system across the web-domain. The data set consists of labelled data for both the source (Wall Street Journal portion of the Penn Treebank) and target (web) domains. The web domain data can be further</context>
</contexts>
<marker>Goldberg, Elhadad, 2010</marker>
<rawString>Yoav Goldberg and Michael Elhadad. 2010. An efficient algorithm for easy-first non-directional dependency parsing. In Human Language Technologies: The 2010 Annual Conference of the North American Chapter of the Association for Computational Linguistics, HLT ’10, pages 742–750, Stroudsburg, PA, USA. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Geoffrey E Hinton</author>
<author>Simon Osindero</author>
<author>Yee-Whye Teh</author>
</authors>
<title>A fast learning algorithm for deep belief nets.</title>
<date>2006</date>
<journal>Neural Comput.,</journal>
<volume>18</volume>
<issue>7</issue>
<contexts>
<context position="4731" citStr="Hinton et al., 2006" startWordPosition="731" endWordPosition="734">ics set, higher than those given by ensembled syntactic parsers. Our code will be publicly available at https://github.com/majineu/TWeb. 2 Learning from Web Text Unsupervised learning is often used for training encoders that convert the input data to abstract representations (i.e. encoding vectors). Such representations capture hidden properties of the input, and can be used as features for supervised tasks (Bengio, 2009; Ranzato et al., 2007). Among the many proposed encoders, we choose the restricted Boltzmann machine (RBM), which has been successfully used in many tasks (Lee et al., 2009b; Hinton et al., 2006). In this section, we give some background on RBMs and then show how they can be used to learn representations of the web text. 2.1 Restricted Boltzmann Machine The RBM is a type of graphical model that contains two layers of binary stochastic units v E {0,1}V and h E {0,1}H, corresponding to a set of visible and hidden variables, respectively. The RBM defines the joint probability distribution over v and h by an energy function E(v, h) = −c0h − b0v − h0Wv, (1) which is factorized by a visible bias b E RV , a hidden bias c E RH and a weight matrix W E RH×V .The joint distribution P(v, h) is gi</context>
<context position="8270" citStr="Hinton et al., 2006" startWordPosition="1372" endWordPosition="1375">)), j=1 (5) which yields the conditional distributions: n P(v|h) = Y P(v(j)|h) P(h|v) = Y P(hi|v) j=1 i=1 W(j)Dv(j)) (6) i· P(v(j) = wk|h) = Z1 exp(b0wk + h0W(j)Dwk) (7) P(hi = 1|v) = Q(ci + Xn j=1 145 Again Z is the partition function. The parameters {b, c, D, W(1), ... , W(n)} can be trained using a Metropolis-Hastings-based CD variant and the learned word representations also capture certain syntactic information; see Dahl et al. (2012) for more details. Note that one can stack standard RBMs on top of a WRRBM to construct a Deep Belief Network (DBN). By adopting greedy layer-wise training (Hinton et al., 2006; Bengio et al., 2007), DBNs are capable of modelling higher order non-linear relations between the input, and has been demonstrated to improve performance for many computer vision tasks (Hinton et al., 2006; Bengio et al., 2007; Lee et al., 2009a). However, in this work we do not observe further improvement by employing DBNs. This may partly be due to the fact that unlike computer vision tasks, the input structure of POS tagging or other sequential labelling tasks is relatively simple, and a single non-linear layer is enough to model the interactions within the input (Wang and Manning, 2013).</context>
</contexts>
<marker>Hinton, Osindero, Teh, 2006</marker>
<rawString>Geoffrey E. Hinton, Simon Osindero, and Yee-Whye Teh. 2006. A fast learning algorithm for deep belief nets. Neural Comput., 18(7):1527–1554, July.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Geoffrey E Hinton</author>
</authors>
<title>Training products of experts by minimizing contrastive divergence.</title>
<date>2002</date>
<journal>Neural Comput.,</journal>
<volume>14</volume>
<issue>8</issue>
<contexts>
<context position="5890" citStr="Hinton, 2002" startWordPosition="954" endWordPosition="955"> matrix W E RH×V .The joint distribution P(v, h) is given by 1 P(v, h) = Z exp(E(v, h)), (2) where Z is the partition function. The affine form of E with respect to v and h implies that the visible variables are conditionally independent with each other given the hidden layer units, and vice versa. This yields the conditional distribution: V H P(v|h) = Y P(vj|h) P(h|v) = Y P(hi|v) j=1 i=1 P(vj = 1|h) = Q(bj + W·jh) (3) P(hi = 1|v) = Q(cj + Wi·v) (4) Here Q denotes the sigmoid function. Parameters of RBMs θ = {b, c, W} can be trained efficiently using contrastive divergence learning (CD), see (Hinton, 2002) for detailed descriptions of CD. 2.2 Encoding Web Text with RBM Most of the indicative features for POS disambiguation can be found from the words and word combinations within a local context (Ratnaparkhi, 1996; Collins, 2002). Inspired by this observation, we apply the RBM to learn feature representations from word n-grams. More specifically, given the ith word wi of a sentence, we apply RBMs to model the joint distribution of the n-gram (wi−l, · · · , wi+r), where l and r denote the left and right window, respectively. Note that the visible units of RBMs are binary. While in our case, each </context>
</contexts>
<marker>Hinton, 2002</marker>
<rawString>Geoffrey E. Hinton. 2002. Training products of experts by minimizing contrastive divergence. Neural Comput., 14(8):1771–1800, August.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jing Jiang</author>
<author>ChengXiang Zhai</author>
</authors>
<title>Instance weighting for domain adaptation in nlp.</title>
<date>2007</date>
<booktitle>In Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics,</booktitle>
<pages>264--271</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Prague, Czech Republic,</location>
<contexts>
<context position="32323" citStr="Jiang and Zhai, 2007" startWordPosition="5382" endWordPosition="5385">resentations are induced based on the auxiliary tasks defined on unlabelled data together with a dimensionality reduction technique. Such auxiliary tasks can be specific to the supervised task. As pointed out by Plank (2009), for many NLP tasks, defining the auxiliary tasks is a non-trivial engineering problem. Compared with Blitzer et al. (2006), the advantage of using RBMs is that it learns representations in a pure unsupervised manner, which is much simpler. Besides learning representations, another line of research addresses domain-adaptation by instance re-weighting (Bickel et al., 2007; Jiang and Zhai, 2007) or feature re-weighting (Satpal and Sarawagi, 2007). Those methods assume that each example x that has a non-zero probability on the source domain must have a non-zero probability on the target domain, and vice-versa. As pointed out by Titov (2011), such an assumption is likely to be too restrictive since most NLP tasks adopt word-based or lexicon-based features that vary significantly across different domains. Regarding using neural networks for sequential labelling, our approach shares similarity with that of Collobert et al. (2011). In particular, we both use a non-linear layer to model co</context>
</contexts>
<marker>Jiang, Zhai, 2007</marker>
<rawString>Jing Jiang and ChengXiang Zhai. 2007. Instance weighting for domain adaptation in nlp. In Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics, pages 264–271, Prague, Czech Republic, June. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Joseph Le Roux</author>
<author>Jennifer Foster</author>
<author>Joachim Wagner</author>
<author>Rasul Samad Zadeh Kaljahi</author>
<author>Anton Bryl</author>
</authors>
<title>Shared Task.</title>
<date>2012</date>
<booktitle>DCU-Paris13 Systems for the SANCL</booktitle>
<pages>1--4</pages>
<location>Montr´eal, Canada,</location>
<marker>Le Roux, Foster, Wagner, Kaljahi, Bryl, 2012</marker>
<rawString>Joseph Le Roux, Jennifer Foster, Joachim Wagner, Rasul Samad Zadeh Kaljahi, and Anton Bryl. 2012. DCU-Paris13 Systems for the SANCL 2012 Shared Task. In Proceedings of the NAACL 2012 First Workshop on Syntactic Analysis of Non-Canonical Language (SANCL), pages 1–4, Montr´eal, Canada, June.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Honglak Lee</author>
<author>Roger Grosse</author>
<author>Rajesh Ranganath</author>
<author>Andrew Y Ng</author>
</authors>
<title>Convolutional deep belief networks for scalable unsupervised learning of hierarchical representations.</title>
<date>2009</date>
<booktitle>In Proc of ICML</booktitle>
<pages>609--616</pages>
<contexts>
<context position="4708" citStr="Lee et al., 2009" startWordPosition="727" endWordPosition="730">putational Linguistics set, higher than those given by ensembled syntactic parsers. Our code will be publicly available at https://github.com/majineu/TWeb. 2 Learning from Web Text Unsupervised learning is often used for training encoders that convert the input data to abstract representations (i.e. encoding vectors). Such representations capture hidden properties of the input, and can be used as features for supervised tasks (Bengio, 2009; Ranzato et al., 2007). Among the many proposed encoders, we choose the restricted Boltzmann machine (RBM), which has been successfully used in many tasks (Lee et al., 2009b; Hinton et al., 2006). In this section, we give some background on RBMs and then show how they can be used to learn representations of the web text. 2.1 Restricted Boltzmann Machine The RBM is a type of graphical model that contains two layers of binary stochastic units v E {0,1}V and h E {0,1}H, corresponding to a set of visible and hidden variables, respectively. The RBM defines the joint probability distribution over v and h by an energy function E(v, h) = −c0h − b0v − h0Wv, (1) which is factorized by a visible bias b E RV , a hidden bias c E RH and a weight matrix W E RH×V .The joint dis</context>
<context position="8516" citStr="Lee et al., 2009" startWordPosition="1414" endWordPosition="1417">rs {b, c, D, W(1), ... , W(n)} can be trained using a Metropolis-Hastings-based CD variant and the learned word representations also capture certain syntactic information; see Dahl et al. (2012) for more details. Note that one can stack standard RBMs on top of a WRRBM to construct a Deep Belief Network (DBN). By adopting greedy layer-wise training (Hinton et al., 2006; Bengio et al., 2007), DBNs are capable of modelling higher order non-linear relations between the input, and has been demonstrated to improve performance for many computer vision tasks (Hinton et al., 2006; Bengio et al., 2007; Lee et al., 2009a). However, in this work we do not observe further improvement by employing DBNs. This may partly be due to the fact that unlike computer vision tasks, the input structure of POS tagging or other sequential labelling tasks is relatively simple, and a single non-linear layer is enough to model the interactions within the input (Wang and Manning, 2013). 3 Neural Network for POS Disambiguation We integrate the learned WRRBM into a neural network, which serves as a scorer for POS disambiguation. The main challenge to designing the neural network structure is: on the one hand, we hope that the mod</context>
<context position="28955" citStr="Lee et al., 2009" startWordPosition="4866" endWordPosition="4869">ask are also shown in Table 6. Our greedy tagger achieves 93% tagging accuracy, which is significantly better than the baseline’s 92.02% accuracy (p &lt; 0.05 by McNemar’s test). Moreover, we achieve the highest tagging accuracy reported so far on this data set, surpassing those achieved using parser combinations based on self-training (Tang et al., 2012; Le Roux et al., 2012). In addition, different from Le Roux et al. (2012), we do not use any external resources in data cleaning. 6 Related Work Learning representations has been intensively studied in computer vision tasks (Bengio et al., 2007; Lee et al., 2009a). In NLP, there is also much work along this line. In particular, Collobert et al. (2011) and Turian et al. (2010) learn word embeddings to improve the performance of in-domain POS tagging, named entity recognition, chunking and semantic role labelling. Yang et al. (2013) induce bi-lingual word embeddings for word alignment. Zheng et al. (2013) investigate Chinese character embeddings for joint word segmentation and POS tagging. While those approaches mainly explore token-level representations (word or character embeddings), using WRRBM is able to utilize both word and n-gram representations</context>
</contexts>
<marker>Lee, Grosse, Ranganath, Ng, 2009</marker>
<rawString>Honglak Lee, Roger Grosse, Rajesh Ranganath, and Andrew Y. Ng. 2009a. Convolutional deep belief networks for scalable unsupervised learning of hierarchical representations. In Proc of ICML 2009, pages 609–616.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Honglak Lee</author>
<author>Peter Pham</author>
<author>Yan Largman</author>
<author>Andrew Ng</author>
</authors>
<title>Unsupervised feature learning for audio classification using convolutional deep belief networks.</title>
<date>2009</date>
<booktitle>Advances in Neural Information Processing Systems 22,</booktitle>
<pages>1096--1104</pages>
<editor>In Y. Bengio, D. Schuurmans, J. Lafferty, C. K. I. Williams, and A. Culotta, editors,</editor>
<contexts>
<context position="4708" citStr="Lee et al., 2009" startWordPosition="727" endWordPosition="730">putational Linguistics set, higher than those given by ensembled syntactic parsers. Our code will be publicly available at https://github.com/majineu/TWeb. 2 Learning from Web Text Unsupervised learning is often used for training encoders that convert the input data to abstract representations (i.e. encoding vectors). Such representations capture hidden properties of the input, and can be used as features for supervised tasks (Bengio, 2009; Ranzato et al., 2007). Among the many proposed encoders, we choose the restricted Boltzmann machine (RBM), which has been successfully used in many tasks (Lee et al., 2009b; Hinton et al., 2006). In this section, we give some background on RBMs and then show how they can be used to learn representations of the web text. 2.1 Restricted Boltzmann Machine The RBM is a type of graphical model that contains two layers of binary stochastic units v E {0,1}V and h E {0,1}H, corresponding to a set of visible and hidden variables, respectively. The RBM defines the joint probability distribution over v and h by an energy function E(v, h) = −c0h − b0v − h0Wv, (1) which is factorized by a visible bias b E RV , a hidden bias c E RH and a weight matrix W E RH×V .The joint dis</context>
<context position="8516" citStr="Lee et al., 2009" startWordPosition="1414" endWordPosition="1417">rs {b, c, D, W(1), ... , W(n)} can be trained using a Metropolis-Hastings-based CD variant and the learned word representations also capture certain syntactic information; see Dahl et al. (2012) for more details. Note that one can stack standard RBMs on top of a WRRBM to construct a Deep Belief Network (DBN). By adopting greedy layer-wise training (Hinton et al., 2006; Bengio et al., 2007), DBNs are capable of modelling higher order non-linear relations between the input, and has been demonstrated to improve performance for many computer vision tasks (Hinton et al., 2006; Bengio et al., 2007; Lee et al., 2009a). However, in this work we do not observe further improvement by employing DBNs. This may partly be due to the fact that unlike computer vision tasks, the input structure of POS tagging or other sequential labelling tasks is relatively simple, and a single non-linear layer is enough to model the interactions within the input (Wang and Manning, 2013). 3 Neural Network for POS Disambiguation We integrate the learned WRRBM into a neural network, which serves as a scorer for POS disambiguation. The main challenge to designing the neural network structure is: on the one hand, we hope that the mod</context>
<context position="28955" citStr="Lee et al., 2009" startWordPosition="4866" endWordPosition="4869">ask are also shown in Table 6. Our greedy tagger achieves 93% tagging accuracy, which is significantly better than the baseline’s 92.02% accuracy (p &lt; 0.05 by McNemar’s test). Moreover, we achieve the highest tagging accuracy reported so far on this data set, surpassing those achieved using parser combinations based on self-training (Tang et al., 2012; Le Roux et al., 2012). In addition, different from Le Roux et al. (2012), we do not use any external resources in data cleaning. 6 Related Work Learning representations has been intensively studied in computer vision tasks (Bengio et al., 2007; Lee et al., 2009a). In NLP, there is also much work along this line. In particular, Collobert et al. (2011) and Turian et al. (2010) learn word embeddings to improve the performance of in-domain POS tagging, named entity recognition, chunking and semantic role labelling. Yang et al. (2013) induce bi-lingual word embeddings for word alignment. Zheng et al. (2013) investigate Chinese character embeddings for joint word segmentation and POS tagging. While those approaches mainly explore token-level representations (word or character embeddings), using WRRBM is able to utilize both word and n-gram representations</context>
</contexts>
<marker>Lee, Pham, Largman, Ng, 2009</marker>
<rawString>Honglak Lee, Peter Pham, Yan Largman, and Andrew Ng. 2009b. Unsupervised feature learning for audio classification using convolutional deep belief networks. In Y. Bengio, D. Schuurmans, J. Lafferty, C. K. I. Williams, and A. Culotta, editors, Advances in Neural Information Processing Systems 22, pages 1096–1104.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ji Ma</author>
<author>Jingbo Zhu</author>
<author>Tong Xiao</author>
<author>Nan Yang</author>
</authors>
<title>Easy-first pos tagging and dependency parsing with beam search.</title>
<date>2013</date>
<booktitle>In Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics (Volume 2: Short Papers),</booktitle>
<pages>110--114</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Sofia, Bulgaria,</location>
<contexts>
<context position="2418" citStr="Ma et al., 2013" startWordPosition="381" endWordPosition="384">ta (web text, in our case). Our approach consists of two phrases. In the pre-training phase, we learn an encoder that converts the web text into an intermediate representation, which acts as useful features for prediction tasks. We integrate the learned encoder with a set of well-established features for POS tagging (Ratnaparkhi, 1996; Collins, 2002) in a single neural network, which is applied as a scorer to an easyfirst POS tagger. We choose the easy-first tagging approach since it has been demonstrated to give higher accuracies than the standard left-to-right POS tagger (Shen et al., 2007; Ma et al., 2013). In the fine-tuning phase, the parameters of the network are optimized on a set of labelled training data using guided learning. The learned model preserves the property of preferring to tag easy words first. To our knowledge, we are the first to investigate guided learning for neural networks. The idea of learning representations from unlabelled data and then fine-tuning a model with such representations according to some supervised criterion has been studied before (Turian et al., 2010; Collobert et al., 2011; Glorot et al., 2011). While most previous work focus on in-domain sequential labe</context>
<context position="21451" citStr="Ma et al. (2013)" startWordPosition="3651" endWordPosition="3654">M on web-domain data of different sizes (number of sentences). The data sets are generated by first concatenating all the cleaned unlabelled data, then selecting sentences evenly across the concatenated file. For each data set, we investigate an extensive set of combinations of hyper-parameters: the n-gram window (l, r) in {(1,1), (2, 1), (1, 2), (2, 2)}; the hidden layer size in {200, 300, 400}; the learning rate in {0.1, 0.01, 0.001}. All these parameters are selected according to the averaged accuracy on the development set. 5.2 Baseline We reimplemented the greedy easy-first POS tagger of Ma et al. (2013), which is used for all the experiments. While the tagger of Ma et al. (2013) utilizes a linear scorer, our tagger adopts the neural network as its scorer. The neural network of our baseline tagger only contains the sparse-feature module. We use this baseline to examine the performance of a tagger trained purely on the source domain. Feature templates are shown in Table 3, which are based on those of Ratnaparkhi (1996) and Shen et al. (2007). Accuracies of the baseline tagger are shown in the upper part of Table 6. Compared with the performance of the official baseline (row 4 of Table 6), whic</context>
</contexts>
<marker>Ma, Zhu, Xiao, Yang, 2013</marker>
<rawString>Ji Ma, Jingbo Zhu, Tong Xiao, and Nan Yang. 2013. Easy-first pos tagging and dependency parsing with beam search. In Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics (Volume 2: Short Papers), pages 110–114, Sofia, Bulgaria, August. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Slav Petrov</author>
<author>Dan Klein</author>
</authors>
<title>Improved inference for unlexicalized parsing. In Human Language Technologies</title>
<date>2007</date>
<booktitle>The Conference of the North American Chapter of the Association for Computational Linguistics; Proceedings of the Main Conference,</booktitle>
<pages>404--411</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Rochester, New York,</location>
<contexts>
<context position="22149" citStr="Petrov and Klein, 2007" startWordPosition="3774" endWordPosition="3777">3) utilizes a linear scorer, our tagger adopts the neural network as its scorer. The neural network of our baseline tagger only contains the sparse-feature module. We use this baseline to examine the performance of a tagger trained purely on the source domain. Feature templates are shown in Table 3, which are based on those of Ratnaparkhi (1996) and Shen et al. (2007). Accuracies of the baseline tagger are shown in the upper part of Table 6. Compared with the performance of the official baseline (row 4 of Table 6), which is evaluated based on the output of BerkeleyParser (Petrov et al., 2006; Petrov and Klein, 2007), our baseline tagger achieves comparable accuracies on both the source and target domain data. With data preprocessing, the average accuracy boosts to about 92.02 on the test set of the target domain. This is consistent with previous work (Le Roux et al., 2011), which found that for noisy data such as web domain text, data cleaning is a effective and necessary step. 5.3 Exploring the Learned Knowledge As mentioned in Section 3.1, the knowledge learned from the WRRBM can be investigated incrementally, using word representation, which corresponds to initializing only the projection layer of web</context>
</contexts>
<marker>Petrov, Klein, 2007</marker>
<rawString>Slav Petrov and Dan Klein. 2007. Improved inference for unlexicalized parsing. In Human Language Technologies 2007: The Conference of the North American Chapter of the Association for Computational Linguistics; Proceedings of the Main Conference, pages 404–411, Rochester, New York, April. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Slav Petrov</author>
<author>Ryan McDonald</author>
</authors>
<title>Overview of the 2012 shared task on parsing the web. Notes of the First Workshop on Syntactic Analysis of NonCanonical Language (SANCL).</title>
<date>2012</date>
<contexts>
<context position="1344" citStr="Petrov and McDonald, 2012" startWordPosition="201" endWordPosition="204">% average tagging accuracy, which is the best accuracy reported so far on this data set, higher than those given by ensembled syntactic parsers. 1 Introduction Analysing and extracting useful information from the web has become an increasingly important research direction for the NLP community, where many tasks require part-of-speech (POS) tagging as a fundamental preprocessing step. However, state-of-the-art POS taggers in the literature (Collins, 2002; Shen et al., 2007) are mainly optimized on the the Penn Treebank (PTB), and when shifted to web data, tagging accuracies drop significantly (Petrov and McDonald, 2012). The problem we face here can be considered as a special case of domain adaptation, where we have access to labelled data on the source domain (PTB) and unlabelled data on the target domain (web data). Exploiting useful information from the web data can be the key to improving web domain tagging. Towards this end, we adopt the idea of learning representations which has been demonstrated useful in capturing hidden regularities underlying the raw input data (web text, in our case). Our approach consists of two phrases. In the pre-training phase, we learn an encoder that converts the web text in</context>
<context position="3790" citStr="Petrov and McDonald, 2012" startWordPosition="588" endWordPosition="591">he learned representations either as model parameters that are further optimized in supervised fine-tuning (Collobert et al., 2011) or as fixed features that are kept unchanged (Turian et al., 2010; Glorot et al., 2011). In this work, we investigate both strategies and give empirical comparisons in the cross-domain setting. Our results suggest that while both strategies improve in-domain tagging accuracies, keeping the learned representation unchanged consistently results in better cross-domain accuracies. We conduct experiments on the official data set provided by the SANCL 2012 shared task (Petrov and McDonald, 2012). Our method achieves a 93.15% average accuracy across the web-domain, which is the best result reported so far on this data 144 Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics, pages 144–154, Baltimore, Maryland, USA, June 23-25 2014. c�2014 Association for Computational Linguistics set, higher than those given by ensembled syntactic parsers. Our code will be publicly available at https://github.com/majineu/TWeb. 2 Learning from Web Text Unsupervised learning is often used for training encoders that convert the input data to abstract representations (i.</context>
</contexts>
<marker>Petrov, McDonald, 2012</marker>
<rawString>Slav Petrov and Ryan McDonald. 2012. Overview of the 2012 shared task on parsing the web. Notes of the First Workshop on Syntactic Analysis of NonCanonical Language (SANCL).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Slav Petrov</author>
<author>Leon Barrett</author>
<author>Romain Thibaux</author>
<author>Dan Klein</author>
</authors>
<title>Learning accurate, compact, and interpretable tree annotation.</title>
<date>2006</date>
<booktitle>In Proceedings of the 21st International Conference on Computational Linguistics and 44th Annual Meeting of the Association for Computational Linguistics,</booktitle>
<pages>433--440</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Sydney, Australia,</location>
<contexts>
<context position="22124" citStr="Petrov et al., 2006" startWordPosition="3770" endWordPosition="3773">ger of Ma et al. (2013) utilizes a linear scorer, our tagger adopts the neural network as its scorer. The neural network of our baseline tagger only contains the sparse-feature module. We use this baseline to examine the performance of a tagger trained purely on the source domain. Feature templates are shown in Table 3, which are based on those of Ratnaparkhi (1996) and Shen et al. (2007). Accuracies of the baseline tagger are shown in the upper part of Table 6. Compared with the performance of the official baseline (row 4 of Table 6), which is evaluated based on the output of BerkeleyParser (Petrov et al., 2006; Petrov and Klein, 2007), our baseline tagger achieves comparable accuracies on both the source and target domain data. With data preprocessing, the average accuracy boosts to about 92.02 on the test set of the target domain. This is consistent with previous work (Le Roux et al., 2011), which found that for noisy data such as web domain text, data cleaning is a effective and necessary step. 5.3 Exploring the Learned Knowledge As mentioned in Section 3.1, the knowledge learned from the WRRBM can be investigated incrementally, using word representation, which corresponds to initializing only th</context>
</contexts>
<marker>Petrov, Barrett, Thibaux, Klein, 2006</marker>
<rawString>Slav Petrov, Leon Barrett, Romain Thibaux, and Dan Klein. 2006. Learning accurate, compact, and interpretable tree annotation. In Proceedings of the 21st International Conference on Computational Linguistics and 44th Annual Meeting of the Association for Computational Linguistics, pages 433–440, Sydney, Australia, July. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Barbara Plank</author>
</authors>
<title>Structural correspondence learning for parse disambiguation.</title>
<date>2009</date>
<pages>37--45</pages>
<editor>In Alex Lascarides, Claire Gardent, and Joakim Nivre, editors, EACL (Student Research Workshop),</editor>
<publisher>The Association for Computer Linguistics.</publisher>
<contexts>
<context position="31926" citStr="Plank (2009)" startWordPosition="5324" endWordPosition="5325"> data, respectively. “best-clean” is best performance achieved using a 4-gram WRRBM. The lower part shows accuracies of the official baseline and that of the top 2 participants. (ASO) method of Ando and Zhang (2005). The idea is to project the original feature representations into low dimensional representations, which yields a high-accuracy classifier on the target domain. The new representations are induced based on the auxiliary tasks defined on unlabelled data together with a dimensionality reduction technique. Such auxiliary tasks can be specific to the supervised task. As pointed out by Plank (2009), for many NLP tasks, defining the auxiliary tasks is a non-trivial engineering problem. Compared with Blitzer et al. (2006), the advantage of using RBMs is that it learns representations in a pure unsupervised manner, which is much simpler. Besides learning representations, another line of research addresses domain-adaptation by instance re-weighting (Bickel et al., 2007; Jiang and Zhai, 2007) or feature re-weighting (Satpal and Sarawagi, 2007). Those methods assume that each example x that has a non-zero probability on the source domain must have a non-zero probability on the target domain, </context>
</contexts>
<marker>Plank, 2009</marker>
<rawString>Barbara Plank. 2009. Structural correspondence learning for parse disambiguation. In Alex Lascarides, Claire Gardent, and Joakim Nivre, editors, EACL (Student Research Workshop), pages 37–45. The Association for Computer Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Marc’Aurelio Ranzato</author>
<author>Christopher Poultney</author>
<author>Sumit Chopra</author>
<author>Yann LeCun</author>
</authors>
<title>Efficient learning of sparse representations with an energy-based model.</title>
<date>2007</date>
<booktitle>Advances in Neural Information Processing Systems 19,</booktitle>
<pages>1137--1144</pages>
<editor>In B. Sch¨olkopf, J. Platt, and T. Hoffman, editors,</editor>
<publisher>MIT Press,</publisher>
<location>Cambridge, MA.</location>
<contexts>
<context position="4558" citStr="Ranzato et al., 2007" startWordPosition="702" endWordPosition="705"> 52nd Annual Meeting of the Association for Computational Linguistics, pages 144–154, Baltimore, Maryland, USA, June 23-25 2014. c�2014 Association for Computational Linguistics set, higher than those given by ensembled syntactic parsers. Our code will be publicly available at https://github.com/majineu/TWeb. 2 Learning from Web Text Unsupervised learning is often used for training encoders that convert the input data to abstract representations (i.e. encoding vectors). Such representations capture hidden properties of the input, and can be used as features for supervised tasks (Bengio, 2009; Ranzato et al., 2007). Among the many proposed encoders, we choose the restricted Boltzmann machine (RBM), which has been successfully used in many tasks (Lee et al., 2009b; Hinton et al., 2006). In this section, we give some background on RBMs and then show how they can be used to learn representations of the web text. 2.1 Restricted Boltzmann Machine The RBM is a type of graphical model that contains two layers of binary stochastic units v E {0,1}V and h E {0,1}H, corresponding to a set of visible and hidden variables, respectively. The RBM defines the joint probability distribution over v and h by an energy fun</context>
</contexts>
<marker>Ranzato, Poultney, Chopra, LeCun, 2007</marker>
<rawString>Marc’Aurelio Ranzato, Christopher Poultney, Sumit Chopra, and Yann LeCun. 2007. Efficient learning of sparse representations with an energy-based model. In B. Sch¨olkopf, J. Platt, and T. Hoffman, editors, Advances in Neural Information Processing Systems 19, pages 1137–1144. MIT Press, Cambridge, MA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Adwait Ratnaparkhi</author>
</authors>
<title>A maximum entropy model for part-of-speech tagging.</title>
<date>1996</date>
<booktitle>In Proceedings of the Conference on Empirical Methods in Natural Language Processing.</booktitle>
<contexts>
<context position="2138" citStr="Ratnaparkhi, 1996" startWordPosition="334" endWordPosition="336">target domain (web data). Exploiting useful information from the web data can be the key to improving web domain tagging. Towards this end, we adopt the idea of learning representations which has been demonstrated useful in capturing hidden regularities underlying the raw input data (web text, in our case). Our approach consists of two phrases. In the pre-training phase, we learn an encoder that converts the web text into an intermediate representation, which acts as useful features for prediction tasks. We integrate the learned encoder with a set of well-established features for POS tagging (Ratnaparkhi, 1996; Collins, 2002) in a single neural network, which is applied as a scorer to an easyfirst POS tagger. We choose the easy-first tagging approach since it has been demonstrated to give higher accuracies than the standard left-to-right POS tagger (Shen et al., 2007; Ma et al., 2013). In the fine-tuning phase, the parameters of the network are optimized on a set of labelled training data using guided learning. The learned model preserves the property of preferring to tag easy words first. To our knowledge, we are the first to investigate guided learning for neural networks. The idea of learning re</context>
<context position="6101" citStr="Ratnaparkhi, 1996" startWordPosition="989" endWordPosition="990"> are conditionally independent with each other given the hidden layer units, and vice versa. This yields the conditional distribution: V H P(v|h) = Y P(vj|h) P(h|v) = Y P(hi|v) j=1 i=1 P(vj = 1|h) = Q(bj + W·jh) (3) P(hi = 1|v) = Q(cj + Wi·v) (4) Here Q denotes the sigmoid function. Parameters of RBMs θ = {b, c, W} can be trained efficiently using contrastive divergence learning (CD), see (Hinton, 2002) for detailed descriptions of CD. 2.2 Encoding Web Text with RBM Most of the indicative features for POS disambiguation can be found from the words and word combinations within a local context (Ratnaparkhi, 1996; Collins, 2002). Inspired by this observation, we apply the RBM to learn feature representations from word n-grams. More specifically, given the ith word wi of a sentence, we apply RBMs to model the joint distribution of the n-gram (wi−l, · · · , wi+r), where l and r denote the left and right window, respectively. Note that the visible units of RBMs are binary. While in our case, each visible variable corresponds to a word, which may take on tens-of-thousands of different values. Therefore, the RBM need to be re-factorized to make inference tractable. We utilize the Word Representation RBM (W</context>
<context position="9452" citStr="Ratnaparkhi (1996)" startWordPosition="1573" endWordPosition="1574"> the input (Wang and Manning, 2013). 3 Neural Network for POS Disambiguation We integrate the learned WRRBM into a neural network, which serves as a scorer for POS disambiguation. The main challenge to designing the neural network structure is: on the one hand, we hope that the model can take the advantage of information provided by the learned WRRBM, which reflects general properties of web texts, so that the model generalizes well in the web domain; on the other hand, we also hope to improve the model’s discriminative power by utilizing wellestablished POS tagging features, such as those of Ratnaparkhi (1996). Our approach is to leverage the two sources of information in one neural network by combining them though a shared output layer, as shown in Figure 1. Under the output layer, the network consists of two modules: the web-feature module, which incorporates knowledge from the pretrained WRRBM, and the sparse-feature module, which makes use of other POS tagging features. 3.1 The Web-Feature Module The web-feature module, shown in the lower left part of Figure 1, consists of a input layer and two hidden layers. The input for the this module is the word n-gram (wi−l, ... , wi+r), the form of which</context>
<context position="21873" citStr="Ratnaparkhi (1996)" startWordPosition="3726" endWordPosition="3727"> {0.1, 0.01, 0.001}. All these parameters are selected according to the averaged accuracy on the development set. 5.2 Baseline We reimplemented the greedy easy-first POS tagger of Ma et al. (2013), which is used for all the experiments. While the tagger of Ma et al. (2013) utilizes a linear scorer, our tagger adopts the neural network as its scorer. The neural network of our baseline tagger only contains the sparse-feature module. We use this baseline to examine the performance of a tagger trained purely on the source domain. Feature templates are shown in Table 3, which are based on those of Ratnaparkhi (1996) and Shen et al. (2007). Accuracies of the baseline tagger are shown in the upper part of Table 6. Compared with the performance of the official baseline (row 4 of Table 6), which is evaluated based on the output of BerkeleyParser (Petrov et al., 2006; Petrov and Klein, 2007), our baseline tagger achieves comparable accuracies on both the source and target domain data. With data preprocessing, the average accuracy boosts to about 92.02 on the test set of the target domain. This is consistent with previous work (Le Roux et al., 2011), which found that for noisy data such as web domain text, dat</context>
</contexts>
<marker>Ratnaparkhi, 1996</marker>
<rawString>Adwait Ratnaparkhi. 1996. A maximum entropy model for part-of-speech tagging. In Proceedings of the Conference on Empirical Methods in Natural Language Processing.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David E Rumelhart</author>
<author>Geoffrey E Hinton</author>
<author>Ronald J Williams</author>
</authors>
<title>Neurocomputing: Foundations of research. chapter Learning Representations by Back-propagating Errors,</title>
<date>1988</date>
<pages>696--699</pages>
<publisher>MIT Press,</publisher>
<location>Cambridge, MA, USA.</location>
<contexts>
<context position="15407" citStr="Rumelhart et al., 1988" startWordPosition="2617" endWordPosition="2620">g set. At each step during the processing of a training example, the algorithm calculates a margin loss based on two word-tag pairs (w, t) and ( ˆw, ˆt) (line 4 ∼ line 6). (w, t) denotes the word-tag pair that has the highest model score among those that are inconsistent with the gold standard, while ( ˆw, ˆt) denotes the one that has the highest model score among those that are consistent with the gold standard. If the loss is zero, the algorithm continues to process the next untagged word. Otherwise, parameters are updated using back-propagation. The standard back-propagation algorithm 147 (Rumelhart et al., 1988) cannot be applied directly. This is because the standard loss is calculated based on a unique input vector. This condition does not hold in our case, because wˆ and w may refer to different words, which means that the margin loss in line 6 of Algorithm 2 is calculated based on two different input vectors, denoted by ( ˆw) and (w), respectively. We solve this problem by decomposing the margin loss in line 6 into two parts: • 1 + nn(w, t), which is associated with (w); • −nn( ˆw, ˆt), which is associated with ( ˆw). In this way, two separate back-propagation updates can be used to update the mo</context>
</contexts>
<marker>Rumelhart, Hinton, Williams, 1988</marker>
<rawString>David E. Rumelhart, Geoffrey E. Hinton, and Ronald J. Williams. 1988. Neurocomputing: Foundations of research. chapter Learning Representations by Back-propagating Errors, pages 696–699. MIT Press, Cambridge, MA, USA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sandeepkumar Satpal</author>
<author>Sunita Sarawagi</author>
</authors>
<title>Domain adaptation of conditional probability models via feature subsetting.</title>
<date>2007</date>
<booktitle>In PKDD,</booktitle>
<volume>4702</volume>
<pages>224--235</pages>
<publisher>Springer.</publisher>
<contexts>
<context position="32375" citStr="Satpal and Sarawagi, 2007" startWordPosition="5389" endWordPosition="5392"> tasks defined on unlabelled data together with a dimensionality reduction technique. Such auxiliary tasks can be specific to the supervised task. As pointed out by Plank (2009), for many NLP tasks, defining the auxiliary tasks is a non-trivial engineering problem. Compared with Blitzer et al. (2006), the advantage of using RBMs is that it learns representations in a pure unsupervised manner, which is much simpler. Besides learning representations, another line of research addresses domain-adaptation by instance re-weighting (Bickel et al., 2007; Jiang and Zhai, 2007) or feature re-weighting (Satpal and Sarawagi, 2007). Those methods assume that each example x that has a non-zero probability on the source domain must have a non-zero probability on the target domain, and vice-versa. As pointed out by Titov (2011), such an assumption is likely to be too restrictive since most NLP tasks adopt word-based or lexicon-based features that vary significantly across different domains. Regarding using neural networks for sequential labelling, our approach shares similarity with that of Collobert et al. (2011). In particular, we both use a non-linear layer to model complex relations underling word embeddings. However, </context>
</contexts>
<marker>Satpal, Sarawagi, 2007</marker>
<rawString>Sandeepkumar Satpal and Sunita Sarawagi. 2007. Domain adaptation of conditional probability models via feature subsetting. In PKDD, volume 4702 of Lecture Notes in Computer Science, pages 224–235. Springer.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Libin Shen</author>
<author>Giorgio Satta</author>
<author>Aravind Joshi</author>
</authors>
<title>Guided learning for bidirectional sequence classification.</title>
<date>2007</date>
<booktitle>In Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics,</booktitle>
<pages>760--767</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Prague, Czech Republic,</location>
<contexts>
<context position="1195" citStr="Shen et al., 2007" startWordPosition="176" endWordPosition="179">network are trained using guided learning in the second phase. Experiment on the SANCL 2012 shared task show that our approach achieves 93.15% average tagging accuracy, which is the best accuracy reported so far on this data set, higher than those given by ensembled syntactic parsers. 1 Introduction Analysing and extracting useful information from the web has become an increasingly important research direction for the NLP community, where many tasks require part-of-speech (POS) tagging as a fundamental preprocessing step. However, state-of-the-art POS taggers in the literature (Collins, 2002; Shen et al., 2007) are mainly optimized on the the Penn Treebank (PTB), and when shifted to web data, tagging accuracies drop significantly (Petrov and McDonald, 2012). The problem we face here can be considered as a special case of domain adaptation, where we have access to labelled data on the source domain (PTB) and unlabelled data on the target domain (web data). Exploiting useful information from the web data can be the key to improving web domain tagging. Towards this end, we adopt the idea of learning representations which has been demonstrated useful in capturing hidden regularities underlying the raw i</context>
<context position="16528" citStr="Shen et al., 2007" startWordPosition="2823" endWordPosition="2826">ated with ( ˆw). In this way, two separate back-propagation updates can be used to update the model’s parameters (line 8 ∼ line 11). For the special case where wˆ and w do refer to the same word w, it can be easily verified that the two separate back-propagation updates equal to the standard back-propagation with a loss 1 + nn(w, t) − nn(w, ˆt) on the input (w). The algorithm proposed here belongs to a general framework named guided learning, where search and learning interact with each other. The algorithm learns not only a local classifier, but also the inference order. While previous work (Shen et al., 2007; Zhang and Clark, 2011; Goldberg and Elhadad, 2010) apply guided learning to train a linear classifier by using variants of the perceptron algorithm, we are the first to combine guided learning with a neural network, by using a margin loss and a modified back-propagation algorithm. 5 Experiments 5.1 Setup Our experiments are conducted on the data set provided by the SANCL 2012 shared task, which aims at building a single robust syntactic analysis system across the web-domain. The data set consists of labelled data for both the source (Wall Street Journal portion of the Penn Treebank) and targ</context>
<context position="21896" citStr="Shen et al. (2007)" startWordPosition="3729" endWordPosition="3732">l these parameters are selected according to the averaged accuracy on the development set. 5.2 Baseline We reimplemented the greedy easy-first POS tagger of Ma et al. (2013), which is used for all the experiments. While the tagger of Ma et al. (2013) utilizes a linear scorer, our tagger adopts the neural network as its scorer. The neural network of our baseline tagger only contains the sparse-feature module. We use this baseline to examine the performance of a tagger trained purely on the source domain. Feature templates are shown in Table 3, which are based on those of Ratnaparkhi (1996) and Shen et al. (2007). Accuracies of the baseline tagger are shown in the upper part of Table 6. Compared with the performance of the official baseline (row 4 of Table 6), which is evaluated based on the output of BerkeleyParser (Petrov et al., 2006; Petrov and Klein, 2007), our baseline tagger achieves comparable accuracies on both the source and target domain data. With data preprocessing, the average accuracy boosts to about 92.02 on the test set of the target domain. This is consistent with previous work (Le Roux et al., 2011), which found that for noisy data such as web domain text, data cleaning is a effecti</context>
</contexts>
<marker>Shen, Satta, Joshi, 2007</marker>
<rawString>Libin Shen, Giorgio Satta, and Aravind Joshi. 2007. Guided learning for bidirectional sequence classification. In Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics, pages 760–767, Prague, Czech Republic, June. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Buzhou Tang</author>
<author>Min Jiang</author>
<author>Hua Xu</author>
</authors>
<title>Varderlibt’s systems for sancl2012 shared task.</title>
<date>2012</date>
<booktitle>In Proceedings of the NAACL 2012 First Workshop on Syntactic Analysis of Non-Canonical Language (SANCL),</booktitle>
<location>Montr´eal, Canada,</location>
<contexts>
<context position="28692" citStr="Tang et al., 2012" startWordPosition="4821" endWordPosition="4824"> tagger across all sub-domains. 5.5 Final Results The best result achieved by using a 4-gram WRRBM, (wi−2, ... , wi+1), with 300 hidden units learned on 1,000k web domain sentences are shown in row 3 of Table 6. Performance of the top 2 systems of the SANCL 2012 task are also shown in Table 6. Our greedy tagger achieves 93% tagging accuracy, which is significantly better than the baseline’s 92.02% accuracy (p &lt; 0.05 by McNemar’s test). Moreover, we achieve the highest tagging accuracy reported so far on this data set, surpassing those achieved using parser combinations based on self-training (Tang et al., 2012; Le Roux et al., 2012). In addition, different from Le Roux et al. (2012), we do not use any external resources in data cleaning. 6 Related Work Learning representations has been intensively studied in computer vision tasks (Bengio et al., 2007; Lee et al., 2009a). In NLP, there is also much work along this line. In particular, Collobert et al. (2011) and Turian et al. (2010) learn word embeddings to improve the performance of in-domain POS tagging, named entity recognition, chunking and semantic role labelling. Yang et al. (2013) induce bi-lingual word embeddings for word alignment. Zheng et</context>
<context position="31160" citStr="Tang et al. (2012)" startWordPosition="5204" endWordPosition="5207">e Titov (2011) and Glorot et al. (2011) use the learned representation to improve cross-domain classification tasks, we are the first to apply it to cross-domain structured prediction. Blitzer et al. (2006) propose to induce shared representations for domain adaptation, which is based on the alternating structure optimization 151 System Answer Newsgroup Review WSJ-t Avg baseline-raw 89.79 91.36 89.96 97.09 90.31 baseline-clean 91.35 92.06 92.92 97.09 92.02 best-clean 92.37 93.59 93.62 97.44 93.15 baseline-offical 90.20 91.24 89.33 97.08 90.26 Le Roux et al.(2011) 91.79 93.81 93.11 97.29 92.90 Tang et al. (2012) 91.76 92.91 91.94 97.49 92.20 Table 6: Main results. “baseline-raw” and “baseline-clean” denote performance of our baseline tagger on the raw and cleaned data, respectively. “best-clean” is best performance achieved using a 4-gram WRRBM. The lower part shows accuracies of the official baseline and that of the top 2 participants. (ASO) method of Ando and Zhang (2005). The idea is to project the original feature representations into low dimensional representations, which yields a high-accuracy classifier on the target domain. The new representations are induced based on the auxiliary tasks defi</context>
</contexts>
<marker>Tang, Jiang, Xu, 2012</marker>
<rawString>Buzhou Tang, Min Jiang, and Hua Xu. 2012. Varderlibt’s systems for sancl2012 shared task. In Proceedings of the NAACL 2012 First Workshop on Syntactic Analysis of Non-Canonical Language (SANCL), Montr´eal, Canada, June.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ivan Titov</author>
</authors>
<title>Domain adaptation by constraining inter-domain variability of latent feature representation.</title>
<date>2011</date>
<booktitle>In Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics: Human Language Technologies,</booktitle>
<pages>62--71</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Portland, Oregon, USA,</location>
<contexts>
<context position="29569" citStr="Titov (2011)" startWordPosition="4965" endWordPosition="4966">. In NLP, there is also much work along this line. In particular, Collobert et al. (2011) and Turian et al. (2010) learn word embeddings to improve the performance of in-domain POS tagging, named entity recognition, chunking and semantic role labelling. Yang et al. (2013) induce bi-lingual word embeddings for word alignment. Zheng et al. (2013) investigate Chinese character embeddings for joint word segmentation and POS tagging. While those approaches mainly explore token-level representations (word or character embeddings), using WRRBM is able to utilize both word and n-gram representations. Titov (2011) and Glorot et al. (2011) propose to learn representations from the mixture of both source and target domain unlabelled data to improve cross-domain sentiment classification. Titov (2011) also propose a regularizer to constrain the inter-domain variability. In particular, their regularizer aims to minimize the Kullback-Leibler (KL) distance between the marginal distributions of the learned representations on the source and target domains. Their work differs from ours in that their approaches learn representations from the feature vectors for sentiment classification, which might be of thousand</context>
<context position="32572" citStr="Titov (2011)" startWordPosition="5425" endWordPosition="5426"> auxiliary tasks is a non-trivial engineering problem. Compared with Blitzer et al. (2006), the advantage of using RBMs is that it learns representations in a pure unsupervised manner, which is much simpler. Besides learning representations, another line of research addresses domain-adaptation by instance re-weighting (Bickel et al., 2007; Jiang and Zhai, 2007) or feature re-weighting (Satpal and Sarawagi, 2007). Those methods assume that each example x that has a non-zero probability on the source domain must have a non-zero probability on the target domain, and vice-versa. As pointed out by Titov (2011), such an assumption is likely to be too restrictive since most NLP tasks adopt word-based or lexicon-based features that vary significantly across different domains. Regarding using neural networks for sequential labelling, our approach shares similarity with that of Collobert et al. (2011). In particular, we both use a non-linear layer to model complex relations underling word embeddings. However, our network differs from theirs in the following aspects. Collobert et al. (2011) model the dependency between neighbouring tags in a generative manner, by employing a transition score AZA. Trainin</context>
</contexts>
<marker>Titov, 2011</marker>
<rawString>Ivan Titov. 2011. Domain adaptation by constraining inter-domain variability of latent feature representation. In Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics: Human Language Technologies, pages 62–71, Portland, Oregon, USA, June. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Joseph Turian</author>
<author>Lev-Arie Ratinov</author>
<author>Yoshua Bengio</author>
</authors>
<title>Word representations: A simple and general method for semi-supervised learning.</title>
<date>2010</date>
<booktitle>In Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics,</booktitle>
<pages>384--394</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Uppsala, Sweden,</location>
<contexts>
<context position="2911" citStr="Turian et al., 2010" startWordPosition="460" endWordPosition="463">as been demonstrated to give higher accuracies than the standard left-to-right POS tagger (Shen et al., 2007; Ma et al., 2013). In the fine-tuning phase, the parameters of the network are optimized on a set of labelled training data using guided learning. The learned model preserves the property of preferring to tag easy words first. To our knowledge, we are the first to investigate guided learning for neural networks. The idea of learning representations from unlabelled data and then fine-tuning a model with such representations according to some supervised criterion has been studied before (Turian et al., 2010; Collobert et al., 2011; Glorot et al., 2011). While most previous work focus on in-domain sequential labelling or cross-domain classification tasks, we are the first to learn representations for web-domain structured prediction. Previous work treats the learned representations either as model parameters that are further optimized in supervised fine-tuning (Collobert et al., 2011) or as fixed features that are kept unchanged (Turian et al., 2010; Glorot et al., 2011). In this work, we investigate both strategies and give empirical comparisons in the cross-domain setting. Our results suggest t</context>
<context position="11908" citStr="Turian et al. (2010)" startWordPosition="2001" endWordPosition="2004">o use the hidden states of the WRRBM, which can be treated as the ⎛ ⎜ o1 = w ⎝ M1wwi−l ... M1wwi+r 146 representations of the input n-gram. This can be achieved by also initializing the parameters of the second layer of the web-feature module using the position-dependent weight matrix and hidden bias of the learned WRRBM: b2w ← c (11) M2w ← (W(1),..., W(n)) (12) Second, the web-feature module also allows us to make a comparison between whether or not to further adjust the pre-trained representation in the supervised fine-tuning phase, which corresponds to the supervised learning strategies of Turian et al. (2010) and Collobert et al. (2011), respectively. To our knowledge, no investigations have been presented in the literature on this issue. 3.2 The Sparse-Feature Module The sparse-feature module, as shown in the lower right part of Figure 1, is designed to incorporate commonly-used tagging features. The input for this module is a vector of boolean values Φ(x) = (f1(x), ... , fk(x)), where x denotes the partially tagged input sentence and fz(x) denotes a feature function, which returns 1 if the corresponding feature fires and 0 otherwise. The first layer of this module is a linear transformation laye</context>
<context position="20429" citStr="Turian et al. (2010)" startWordPosition="3485" endWordPosition="3488">,657 29,289,169 #Types 221,576 166,515 33,325 357,090 287,575 Table 2: Statistics of the raw unlabelled data. features templates unigram H(wi), C(wi), L(wi), L(wi−1), L(wi+1), ti−2, ti−1, ti+1, ti+2 bigram L(wi) G L(wi−1), L(wi) O L(wi+1), ti−2 O ti−1, ti−1 O ti+1, ti+1 O ti+2, L(wi) O ti−2, L(wi) O ti−1, L(wi) O ti+1, L(wi) O ti+2 trigram L(wi) O ti−2 O ti−1, L(wi) O ti−1 O ti+1, L(wi) (D ti+1 O ti+2 Table 3: Feature templates, where wi denotes the current word. H(w) and C(w) indicates whether w contains hyphen and upper case letters, respectively. L(w) denotes a lowercased w. al. (2012) and Turian et al. (2010), we also lowercased all the unlabelled data and removed those sentences that contain less than 90% a-z letters. The tagging performance is evaluated according to the official evaluation metrics of SANCL 2012. The tagging accuracy is defined as the percentage of words (punctuations included) that are correctly tagged. The averaged accuracies are calculated across the web domain data. We trained the WRRBM on web-domain data of different sizes (number of sentences). The data sets are generated by first concatenating all the cleaned unlabelled data, then selecting sentences evenly across the conc</context>
<context position="24447" citStr="Turian et al., 2010" startWordPosition="4136" endWordPosition="4139">. x-axis denotes the size of the training data and yaxis denotes tagging accuracy. 5.3.1 Effect of the Training Strategy From Figure 2 we can see that when knowledge from the pre-trained WRRBM is incorpomethod all non-oov oov baseline 89.81 92.42 65.64 word-adjust +0.09 −0.05 +1.38 word-fix +0.11 +0.13 +1.73 ngram-adjust +0.53 +0.52 +0.53 ngram-fix +0.69 +0.60 +2.30 Table 4: Performance on the email domain. rated, both the training strategies (“word-fixed” vs “word-adjusted”, “ngram-fixed” vs “ngramadjusted”) improve accuracies on the source domain, which is consistent with previous findings (Turian et al., 2010; Collobert et al., 2011). In addition, adjusting the learned representation or keeping them fixed does not result in too much difference in tagging accuracies. On the web-domain data, shown in Figure 3 and 4, we found that leaving the learned representation unchanged (“word-fixed”, “ngram-fixed”) yields consistently higher performance gains. This result is to some degree expected. Intuitively, unsupervised pre-training moves the parameters of the WRRBM towards the region where properties of the web domain data are properly modelled. However, since fine-tuning is conducted with respect to the </context>
<context position="29071" citStr="Turian et al. (2010)" startWordPosition="4888" endWordPosition="4891">an the baseline’s 92.02% accuracy (p &lt; 0.05 by McNemar’s test). Moreover, we achieve the highest tagging accuracy reported so far on this data set, surpassing those achieved using parser combinations based on self-training (Tang et al., 2012; Le Roux et al., 2012). In addition, different from Le Roux et al. (2012), we do not use any external resources in data cleaning. 6 Related Work Learning representations has been intensively studied in computer vision tasks (Bengio et al., 2007; Lee et al., 2009a). In NLP, there is also much work along this line. In particular, Collobert et al. (2011) and Turian et al. (2010) learn word embeddings to improve the performance of in-domain POS tagging, named entity recognition, chunking and semantic role labelling. Yang et al. (2013) induce bi-lingual word embeddings for word alignment. Zheng et al. (2013) investigate Chinese character embeddings for joint word segmentation and POS tagging. While those approaches mainly explore token-level representations (word or character embeddings), using WRRBM is able to utilize both word and n-gram representations. Titov (2011) and Glorot et al. (2011) propose to learn representations from the mixture of both source and target </context>
</contexts>
<marker>Turian, Ratinov, Bengio, 2010</marker>
<rawString>Joseph Turian, Lev-Arie Ratinov, and Yoshua Bengio. 2010. Word representations: A simple and general method for semi-supervised learning. In Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics, pages 384–394, Uppsala, Sweden, July. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mengqiu Wang</author>
<author>Christopher D Manning</author>
</authors>
<title>Effect of non-linear deep architecture in sequence labeling.</title>
<date>2013</date>
<booktitle>In Proceedings of the 6th International Joint Conference on Natural Language Processing (IJCNLP).</booktitle>
<contexts>
<context position="8869" citStr="Wang and Manning, 2013" startWordPosition="1474" endWordPosition="1477">ing (Hinton et al., 2006; Bengio et al., 2007), DBNs are capable of modelling higher order non-linear relations between the input, and has been demonstrated to improve performance for many computer vision tasks (Hinton et al., 2006; Bengio et al., 2007; Lee et al., 2009a). However, in this work we do not observe further improvement by employing DBNs. This may partly be due to the fact that unlike computer vision tasks, the input structure of POS tagging or other sequential labelling tasks is relatively simple, and a single non-linear layer is enough to model the interactions within the input (Wang and Manning, 2013). 3 Neural Network for POS Disambiguation We integrate the learned WRRBM into a neural network, which serves as a scorer for POS disambiguation. The main challenge to designing the neural network structure is: on the one hand, we hope that the model can take the advantage of information provided by the learned WRRBM, which reflects general properties of web texts, so that the model generalizes well in the web domain; on the other hand, we also hope to improve the model’s discriminative power by utilizing wellestablished POS tagging features, such as those of Ratnaparkhi (1996). Our approach is</context>
</contexts>
<marker>Wang, Manning, 2013</marker>
<rawString>Mengqiu Wang and Christopher D. Manning. 2013. Effect of non-linear deep architecture in sequence labeling. In Proceedings of the 6th International Joint Conference on Natural Language Processing (IJCNLP).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nan Yang</author>
<author>Shujie Liu</author>
<author>Mu Li</author>
<author>Ming Zhou</author>
<author>Nenghai Yu</author>
</authors>
<title>Word alignment modeling with context dependent deep neural network.</title>
<date>2013</date>
<booktitle>In Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers),</booktitle>
<pages>166--175</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Sofia, Bulgaria,</location>
<contexts>
<context position="29229" citStr="Yang et al. (2013)" startWordPosition="4912" endWordPosition="4915">hose achieved using parser combinations based on self-training (Tang et al., 2012; Le Roux et al., 2012). In addition, different from Le Roux et al. (2012), we do not use any external resources in data cleaning. 6 Related Work Learning representations has been intensively studied in computer vision tasks (Bengio et al., 2007; Lee et al., 2009a). In NLP, there is also much work along this line. In particular, Collobert et al. (2011) and Turian et al. (2010) learn word embeddings to improve the performance of in-domain POS tagging, named entity recognition, chunking and semantic role labelling. Yang et al. (2013) induce bi-lingual word embeddings for word alignment. Zheng et al. (2013) investigate Chinese character embeddings for joint word segmentation and POS tagging. While those approaches mainly explore token-level representations (word or character embeddings), using WRRBM is able to utilize both word and n-gram representations. Titov (2011) and Glorot et al. (2011) propose to learn representations from the mixture of both source and target domain unlabelled data to improve cross-domain sentiment classification. Titov (2011) also propose a regularizer to constrain the inter-domain variability. In</context>
</contexts>
<marker>Yang, Liu, Li, Zhou, Yu, 2013</marker>
<rawString>Nan Yang, Shujie Liu, Mu Li, Ming Zhou, and Nenghai Yu. 2013. Word alignment modeling with context dependent deep neural network. In Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), pages 166–175, Sofia, Bulgaria, August. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yue Zhang</author>
<author>Stephen Clark</author>
</authors>
<title>Syntax-based grammaticality improvement using ccg and guided search.</title>
<date>2011</date>
<booktitle>In Proceedings of the 2011 Conference on Empirical Methods in Natural Language Processing,</booktitle>
<pages>1147--1157</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Edinburgh, Scotland, UK.,</location>
<contexts>
<context position="16551" citStr="Zhang and Clark, 2011" startWordPosition="2827" endWordPosition="2830"> this way, two separate back-propagation updates can be used to update the model’s parameters (line 8 ∼ line 11). For the special case where wˆ and w do refer to the same word w, it can be easily verified that the two separate back-propagation updates equal to the standard back-propagation with a loss 1 + nn(w, t) − nn(w, ˆt) on the input (w). The algorithm proposed here belongs to a general framework named guided learning, where search and learning interact with each other. The algorithm learns not only a local classifier, but also the inference order. While previous work (Shen et al., 2007; Zhang and Clark, 2011; Goldberg and Elhadad, 2010) apply guided learning to train a linear classifier by using variants of the perceptron algorithm, we are the first to combine guided learning with a neural network, by using a margin loss and a modified back-propagation algorithm. 5 Experiments 5.1 Setup Our experiments are conducted on the data set provided by the SANCL 2012 shared task, which aims at building a single robust syntactic analysis system across the web-domain. The data set consists of labelled data for both the source (Wall Street Journal portion of the Penn Treebank) and target (web) domains. The w</context>
</contexts>
<marker>Zhang, Clark, 2011</marker>
<rawString>Yue Zhang and Stephen Clark. 2011. Syntax-based grammaticality improvement using ccg and guided search. In Proceedings of the 2011 Conference on Empirical Methods in Natural Language Processing, pages 1147–1157, Edinburgh, Scotland, UK., July. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Xiaoqing Zheng</author>
<author>Hanyang Chen</author>
<author>Tianyu Xu</author>
</authors>
<title>Deep learning for Chinese word segmentation and POS tagging.</title>
<date>2013</date>
<booktitle>In Proceedings of the 2013 Conference on Empirical Methods in Natural Language Processing,</booktitle>
<pages>647--657</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Seattle, Washington, USA,</location>
<contexts>
<context position="29303" citStr="Zheng et al. (2013)" startWordPosition="4923" endWordPosition="4926">l., 2012; Le Roux et al., 2012). In addition, different from Le Roux et al. (2012), we do not use any external resources in data cleaning. 6 Related Work Learning representations has been intensively studied in computer vision tasks (Bengio et al., 2007; Lee et al., 2009a). In NLP, there is also much work along this line. In particular, Collobert et al. (2011) and Turian et al. (2010) learn word embeddings to improve the performance of in-domain POS tagging, named entity recognition, chunking and semantic role labelling. Yang et al. (2013) induce bi-lingual word embeddings for word alignment. Zheng et al. (2013) investigate Chinese character embeddings for joint word segmentation and POS tagging. While those approaches mainly explore token-level representations (word or character embeddings), using WRRBM is able to utilize both word and n-gram representations. Titov (2011) and Glorot et al. (2011) propose to learn representations from the mixture of both source and target domain unlabelled data to improve cross-domain sentiment classification. Titov (2011) also propose a regularizer to constrain the inter-domain variability. In particular, their regularizer aims to minimize the Kullback-Leibler (KL) </context>
</contexts>
<marker>Zheng, Chen, Xu, 2013</marker>
<rawString>Xiaoqing Zheng, Hanyang Chen, and Tianyu Xu. 2013. Deep learning for Chinese word segmentation and POS tagging. In Proceedings of the 2013 Conference on Empirical Methods in Natural Language Processing, pages 647–657, Seattle, Washington, USA, October. Association for Computational Linguistics.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>