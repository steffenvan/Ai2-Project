<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.145797">
<note confidence="0.349836">
SOLUTIONS TO ISSUES DEPEND ON THE KNOWLEDGE REPRESENTATION
</note>
<affiliation confidence="0.539551333333333">
Frederick B. Thompson
California Institute of Technology
Pasadena, California
</affiliation>
<bodyText confidence="0.999855262626263">
In organizing this panel, our
Chairman, Bob Moore, expressed the view
that too often discussion of natural
language access to data bases has focused
on what particular systems can or cannot
do, rather than on underlying issues. He
then admirably proceeded to organize the
panel around issues rather than systems.
In responding, I attempted • to frame my
remarks on each of his five issues in a
general way that would not reflect my ewn
parochiol experience and interest. At one
point I thought that I had succeeded quite
well. However, after taking a clearer eyed
view, it was apparent that my remarks
reflected assumptions about knowledge
representation that were by no means
universal. This suggests a sixth issue
which I would like to nominatel
Are there really useful generalizations
about computational linguistic issues
that are independent of assumptions
concerning knowledge eepresentation?
will come back to this sixth issue
after discussing the five chosen by our
Chairmen.
Issue 41: Agereaate Functions and Quantity.
gaSs“oati.
First, let us at this issue in a
somewhat different way. In many data base
situations, there are classs of
individuals all of whose members share the
eame attributes and thus, from the point
of view of the data base &apos;ire
indistinguishable, Thus there is no need
to add ell of these individuale as
separaee entities, To use Bob Moore&apos;s
example, if a DEPARTMENT file has a field
for NUMBER-OF-EMPLOYEES, it stands to
reason that the particular individuals who
actually existed in the various
departments would not be separately
represnted in the database (for otherwise
there would be a redundancy whose
consisilency would be hard to police). In
such situations we need the notion of a
&amp;quot;collective,&amp;quot; namely a single data base
object that takes the place of a number of
individuals and which can carry their
common attributes together with one
edditionel item of information, namely
their number, Thus a DEPARTMENT could
have as a single member such a collective
of employees, indeed it could have several
such collective members and other
individual members as well. The procedure
that is called when answering &amp;quot;how many&amp;quot;
and &amp;quot;number of&amp;quot; questions would know the
difference between subclasses, individual
members and collective members; it would
know to recurse on subclasses, add one to
its count for. individual members and add
the indicated number to its count for
collective members. This appears to be a
unified framework that will handle all of
the cases mentioned in Bob Moore&apos;s
statement of Issue 41.
Issue #2: Time and Tease
I should like to split this issue into
two, The first sob-issue is the problem of
handling continously varying phenomena,
such as the movement of ships, the
changing of relative amounts of
ingredients in chemical reactions, or the
percent completions of tasks. Here It is
apparent that each instance will require a
specialized procedure to handle
interpolation. Ships cannot sail across
land, thus an interpolation procedure that
produces the position of a ship on the
basis of its pointe of departure ond
destination will need to know about the
coastlines of continents; movements to
chemical equilibriums are not linear; task
completions depend on changing personnel
assignments, Just as we computational
linguists provide to our system user the
capability to introduce into his data base
system such notions ee locations of ports
and ships, etc., we must also provide the
means by which he can define such
continuously varying parameters as
position in such ways that appropriate
interpolations can be made by the general
system in conjunction with the particular
definition, For example, the veer may
define: &amp;quot;position of X&amp;quot; in terms of
calculations, perhaps extensive, involving
the actual geometry of the eerie.
</bodyText>
<page confidence="0.993959">
169
</page>
<bodyText confidence="0.998600229357798">
The second sub-issue on which I would
like to comment concerns those cases
where discrete Time ineervals provide an
adequate representation of the time
aspects relevant to the data base, In
these coses, if the time information is
complete, ie, , actual starting and ending
times of all events are recorded in the
data base, the handling of time is rather
straightforward. However this case often
does not apply. Consider the following
example:
&amp;quot;The Kittyhawk arrived in London Monday,
The Meru will sail from London Friday.
Will the Kittyhawk and Mary have been in
London at the same time?&amp;quot;
One is tempted to allow the computer
to give a response: &amp;quot;Possibly,&amp;quot; however
the introduction of a three valued logic
is fraught with. well known dangers of its
own. A more protracted response gets in
the way of clause imbedding; how does one
handle:
&amp;quot;Will ships that have been in London
Together sail together?&amp;quot;
One answer would be:
&amp;quot;The Kittyhawk arrived last Monday;
the Moru will sail next Friday. If
they will have been there at the same
time, then not all ships that were in
London together will sail together, but
they would be the only exceptions.&amp;quot;
Choosing a relevant diagnostie
messoge, as above, is a major and
difficult computational liguietic issue
going well beyound questions concerning
time and tense.
Issue 43: Quentifying into Questions
This is a deep, philosophical
question. Computational linguists have
progressed beyond the considerntion of
tingle sentences, and are seeking to
follow The focus of a dialogue and
identify the theme of a discourse. This is
eventuelle en infinite regreee, ultimately
involviny cross cultural backgrounds, the
(perhaps Machiavellian) intent of those
who control the use. of a particular
application, etc, But the engineering
problem, at least at the present state of
the art, is eimple: what response is most
useful to the user/ Consider two possible
answers to the following question:
&amp;quot;Who meneges each department?&amp;quot;
Ai: &amp;quot;Mo single person manages all of
the departments.&amp;quot;
A2: &amp;quot;department manager
dept. A manager A
Unless there were an undue number of
departments involved, the second is
clearly preferred, for it suffices &apos;even if
the first were intended. In our own
experience, &amp;quot;each&amp;quot; can usefully be
interpreted as calling for a labeled list
as answer in almost all cases. The
difficulties of being more clever are
great and will often result in a
combinatorial explosion, I am sure, for a
long time into the future, we will be
seeking simple solutions that (a) are
responsive in most cases, (b) provide the
needed information, even though redundant
in some case, and (0 make clear the
misinterpretation in the few case where
this arises, even though these solutions
may violate strict linguistic analysis.
Issue 44: Querying, semanticalle_Comelex
Fields
In presenting this issue to the panel,
Bob Moore used the following three
questions as an example:
&amp;quot;Is John Jones a child of an MIT
alumnus?&amp;quot;
&amp;quot;Is one of John Jones&apos;s parents an MIT
alumnus/&amp;quot;
&amp;quot;Did either parent of John Jones attend
MIT?&amp;quot;
The apparent problem is the
possibility of multiple descriptions,
often involving disparate words, for
getting at data in the data base, In
designing our systems, we recognize two
truths which appear to conflict: (a) the
value of minimizing the redundancy of
information in the data base, (b) the
necessity of non-independent words in the
yocabulure. In our own work, as most of
you know, we have stressed the use of
definitions as ci means of achieving a
eynthesie of these two principles. /
recommend it to you us a very ueeful tool
in handline problems like Bob presents. We
illustrate how Bob&apos;s example can be
handled:
&amp;quot;definition:child:converse of parent
verb: John &amp;quot;attend &amp;quot;s MIT: John is a
eludent of MIT
definition:aleiee s:person who had
been a student&amp;quot;
</bodyText>
<page confidence="0.991245">
170
</page>
<bodyText confidence="0.998600574257426">
The ebove three questions then are
enelyzed as:
&amp;quot;John Jones is (converse of parent) of a
person who had been a student of MIT?&amp;quot;
&amp;quot;One of John Jones&apos;s parents is a person
who had been a student of MIT?&amp;quot;
&amp;quot;Was either parent of John Jones a
student of MIT?&amp;quot;
I do not wish to slur over the fact
that a definition mechanism must be hishly
sophisticated in its handling of free
variables, but our experience indicates
that this can be done quite
satisfactorily,
Issue 45: Multi-Filesgueries
This issue has been stated by Bob in
terms of a traditional multiple file data
base structure, This issue hns its
counterpart in semantic net datri base
structures discussed in paper&apos;s on
knowledge representation, Since we use
such a semantic net structure for our
data, let me rephrase the issue in those
terms. In Bob&apos;s statement of the issue, he
uses the example of the SHIP file and the
PORT file, where the SHIP file has fields
for home port, departure port and
deetination port. Paralleling his
example, let us consider the phrase:
&amp;quot;London ship&amp;quot;. Suppose that (a) there was
a ship named London, and (b) London was a
home port, port of departure and
destination, not necessarily of the same
ship. Then &amp;quot;London ship&amp;quot; is four ways
ambiguous, meaning: (i) the ship London,
(2) London (home port) ships, (3) London
(departure port) ships and (4) London
(destination port) ehips. In this
formulation of the problem, all is easy;
insofar as the phrase &amp;quot;London ship&amp;quot; is not
disambiguated in context, the user is
informed of the ambiguous meanings and the
associated responses. The difficulty
arises when there are possibile
interpretations farther afield. Fort
Collins is neither a port nor a ship,
however the headquarters of the ABC
Shipping Company is there and they own
several ships. What are we to mean by
&amp;quot;Fort Collins ship &amp;quot;1 These are problems
that were first attacked by Quillian, and
I am not sure that anyone has added to his
seminal analysis of them. In our own work,
we have stopped at &amp;quot;once removed&amp;quot;
.::onnections, as illustrated by the foot—
way ambiguity above.
Issue 46: Solutions to Issues Depend on
KnowlgAgft Representuion
As I look back on the above remarks
concerning Bob&apos;s five issues, it becomes
apparent that the usefulness of these
remarks depends on the degree one is aware
of the knowledge representation that
underlies the solution suggested. For
example, in the case of the last issue, if
one only knew about traditional file
structures, finding paths that link fields
in more than one file appears all but
unsolvable. Even if one is accustomed to
semantic net structures, the viability of
finding connective paths is highly
dependent on the existence of back links
between attributes and their arguments and
values. Adding a definitional capability,
other than simple abbreviations and
synonyms, turns on the way free variables
are handled in general and on the
apparatus for binding them; for example,
in processing the definition;
&amp;quot;definition:area:length times width&amp;quot;
when applied to a class, say &amp;quot;areas of
ships&amp;quot;, how does one ensure that he will
obtain;
&amp;quot;length(i) * width(i)
for i s 1 to number of ships&amp;quot;
rather than
&amp;quot;length(1) * width(j)
for i,j i to number of ships?&amp;quot;
It comes down to howvariables are
maintained in the underlying knowledge
representation.
• One is forced to conclude that the
basis for the integration of the syntax
and semontics of computational linguistic
systems is accomplished when the
decisions on knowledge representation are
made. Discussions of our various solution
to the issues of computational linguistics
can meaningfully take place only in terms
of these underlying knowledge
representatioes,
</bodyText>
<page confidence="0.997323">
171
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.261665">
<title confidence="0.998698">SOLUTIONS TO ISSUES DEPEND ON THE KNOWLEDGE REPRESENTATION</title>
<author confidence="0.999889">Frederick B Thompson</author>
<affiliation confidence="0.999993">California Institute of Technology</affiliation>
<address confidence="0.9929">Pasadena, California</address>
<abstract confidence="0.983370051724137">In organizing this panel, our Chairman, Bob Moore, expressed the view that too often discussion of natural language access to data bases has focused on what particular systems can or cannot do, rather than on underlying issues. He then admirably proceeded to organize the panel around issues rather than systems. In responding, I attempted • to frame my remarks on each of his five issues in a general way that would not reflect my ewn parochiol experience and interest. At one point I thought that I had succeeded quite well. However, after taking a clearer eyed view, it was apparent that my remarks reflected assumptions about knowledge representation that were by no means universal. This suggests a sixth issue which I would like to nominatel Are there really useful generalizations about computational linguistic issues that are independent of assumptions concerning knowledge eepresentation? come back sixth issue after discussing the five chosen by our Chairmen. 41: Functions and Quantity. gaSs“oati. let us this issue in a somewhat different way. In many data base situations, there are classs of individuals all of whose members share the eame attributes and thus, from the point view the data base &apos;ire Thus there is no to add ell of these individuale as separaee entities, To use Bob Moore&apos;s example, if a DEPARTMENT file has a field for NUMBER-OF-EMPLOYEES, it stands to reason that the particular individuals who actually existed in the various departments would not be separately represnted in the database (for otherwise there would be a redundancy whose consisilency would be hard to police). In such situations we need the notion of a &amp;quot;collective,&amp;quot; namely a single data base object that takes the place of a number of individuals and which can carry their common attributes together with one edditionel item of information, namely their number, Thus a DEPARTMENT could have as a single member such a collective of employees, indeed it could have several such collective members and other individual members as well. The procedure that is called when answering &amp;quot;how many&amp;quot; and &amp;quot;number of&amp;quot; questions would know the difference between subclasses, individual members and collective members; it would know to recurse on subclasses, add one to count individual members and add the indicated number to its count for collective members. This appears to be a unified framework that will handle all of the cases mentioned in Bob Moore&apos;s statement of Issue 41. I should like to split this issue into two, The first sob-issue is the problem of handling continously varying phenomena, such as the movement of ships, the changing of relative amounts of ingredients in chemical reactions, or the percent completions of tasks. Here It is apparent that each instance will require a procedure interpolation. Ships cannot sail across land, thus an interpolation procedure that produces the position of a ship on the basis of its pointe of departure ond will need to know coastlines of continents; movements to chemical equilibriums are not linear; task completions depend on changing personnel assignments, Just as we computational linguists provide to our system user the capability to introduce into his data base system such notions ee locations of ports and ships, etc., we must also provide the means by which he can define such continuously varying parameters as position in such ways that appropriate interpolations can be made by the general system in conjunction with the particular definition, For example, the veer may define: &amp;quot;position of X&amp;quot; in terms of calculations, perhaps extensive, involving the actual geometry of the eerie. 169 The second sub-issue on which I would like to comment concerns those cases where discrete Time ineervals provide an adequate representation of the time aspects relevant to the data base, In these coses, if the time information is complete, ie, , actual starting and ending times of all events are recorded in the data base, the handling of time is rather straightforward. However this case often does not apply. Consider the following example: &amp;quot;The Kittyhawk arrived in London Monday, The Meru will sail from London Friday. Will the Kittyhawk and Mary have been in London at the same time?&amp;quot; One is tempted to allow the computer</abstract>
<intro confidence="0.431123">to give a response: &amp;quot;Possibly,&amp;quot; however</intro>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
</citationList>
</algorithm>
</algorithms>