<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000035">
<title confidence="0.998326">
A Meta-Level Grammar:
Redefining Synchronous TAG for Translation and Paraphrase
</title>
<author confidence="0.999022">
Mark Dras
</author>
<affiliation confidence="0.985128666666667">
Microsoft Research Institute
Department of Computer Science
Macquarie University, Australia
</affiliation>
<email confidence="0.993354">
markd@ics.mq.edu.au
</email>
<sectionHeader confidence="0.97973" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999302307692308">
In applications such as translation and
paraphrase, operations are carried out on
grammars at the meta level. This pa-
per shows how a meta-grammar, defining
structure at the meta level, is useful in
the case of such operations; in particu-
lar, how it solves problems in the current
definition of Synchronous TAG (Shieber,
1994) caused by ignoring such structure
in mapping between grammars, for appli-
cations such as translation. Moreover, es-
sential properties of the formalism remain
unchanged.
</bodyText>
<sectionHeader confidence="0.995468" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999915375">
A grammar is, among other things, a device by
which it is possible to express structure in a
set of entities; a grammar formalism, the con-
straints on how a grammar is allowed to ex-
press this. Once a grammar has been used to
express structural relationships, in many ap-
plications there are operations which act at a
&apos;meta level&apos; on the structures expressed by the
grammar: for example, lifting rules on a depen-
dency grammar to achieve pseudo-projectivity
(Kahane et al, 1998), and mapping between
synchronised Tree Adjoining Grammars (TAGs)
(Shieber and Schabes, 1990; Shieber 1994) as
in machine translation or syntax-to-semantics
transfer. At this meta level, however, the oper-
ations do not themselves exploit any structure.
This paper explores how, in the TAG case, us-
ing a meta-level grammar to define meta-level
structure resolves the flaws in the ability of Syn-
chronous TAG (S-TAG) to be a representation
for applications such as machine translation or
paraphrase.
This paper is set out as follows. It describes
the expressivity problems of S-TAG as noted
in Shieber (1994), and shows how these occur
also in syntactic paraphrasing. It then demon-
strates, illustrated by the relative structural
complexity which occurs at the meta level in
syntactic paraphrase, how a meta-level gram-
mar resolves the representational problems; and
it further shows that this has no effect on the
generative capacity of S-TAG.
</bodyText>
<sectionHeader confidence="0.787908" genericHeader="introduction">
2 S-TAG and Machine Translation
</sectionHeader>
<bodyText confidence="0.999961724137931">
Synchronous TAG, the mapping between two
Tree Adjoining Grammars, was first proposed
by Shieber and Schabes (1990). An applica-
tion proposed concurrently with the definition
of S-TAG was that of machine translation, map-
ping between English and French (Abeille et al,
1990); work continues in the area, for example
using S-TAG for English-Korean machine trans-
lation in a practical system (Palmer et al, 1998).
In mapping between, say, English and French,
there is a lexicalised TAG for each language (see
XTAG, 1995, for an overview of such a gram-
mar). Under the definition of TAG, a grammar
contains elementary trees, rather than flat rules,
which combine together via the operations of
substitution and adjunction (composition oper-
ations) to form composite structures—derived
trees—which will ultimately provide structural
representations for an input string if this string
is grammatical. An overview of TAGs is given
in Joshi and Schabes (1996).
The characteristics of TAGs make them better
suited to describing natural language than Con-
text Free Grammars (CFGs): CFGs are not ad-
equate to describe the entire syntax of natural
language (Shieber, 1985), while TAGs are able
to provide structures for the constructions prob-
lematic for CFGs, and without a much greater
generative capacity. Two particular characteris-
</bodyText>
<page confidence="0.98136">
80
</page>
<figure confidence="0.995476142857143">
01: NP04. VP 02: NP
NP1 Garrad
defeated
NP VP
Garrad
Adv VP
cunningly V NP
03: NP etc Det
Det N the defeated Det
the Sumerians
Sumerians
05: VP 02(1) /5(2) 03 (2 • 2)
Adv VP. 04(1)
cunningly
</figure>
<figureCaption confidence="0.999966">
Figure 1: Elementary TAG trees
</figureCaption>
<bodyText confidence="0.999681413793104">
tics of TAG that make it well suited to describ-
ing natural language are the extended domain of
locality (EDL) and factoring recursion from the
domain of dependencies (FRD). In TAG, for in-
stance, information concerning dependencies is
given in one tree (EDL): for example, in Fig-
ure 1,1 the information that the verb defeated
has subject and object arguments is contained
in the tree al. In a CFG, with rules of the
form S NP VP and VP —&gt; V NP, it is
not possible to have information about both ar-
guments in the same rule unless the VP node
is lost. TAG keeps dependencies together, or
local, no matter how far apart the correspond-
ing lexical items are. FRD means that recursive
information—for example, a sequence of adjec-
tives modifying the object noun of defeated—are
factored out into separate trees, leaving depen-
dencies together.
A consequence of the TAG definition is that, un-
like CFG, a TAG derived tree is not a record of
its own derivation. In CFG, each tree given as
a structural description to a string enables the
rules applied to be recovered. In a TAG, this is
not possible, so each derived tree has an asso-
ciated derivation tree. If the trees in Figure 1
were composed to give a structural description
for Garrad cunningly defeated the Sumerians,
the derived tree and its corresponding deriva-
</bodyText>
<footnote confidence="0.9858615">
&apos;The figures use standard TAG notation: 4. for nodes
requiring substitution, * for foot nodes of auxiliary trees.
</footnote>
<figureCaption confidence="0.8814675">
Figure 2: Derived and derivation trees, respec-
tively, for Figure 1
</figureCaption>
<bodyText confidence="0.995560814814815">
tion tree would be as in Figure 2.2
Weir (1988) terms the derived tree, and its
component elementary trees, OBJECT-LEVEL
TREES; the derivation tree is termed a META-
LEVEL TREE, since it describes the object-level
trees. The derivation trees are context free
(Weir, 1988), that is, they can be expressed by
a CFG; Weir showed that applying a TAG yield
function to a context free derivation tree (that
is, reading the labels off the tree, and substi-
tuting or adjoining the corresponding object-
level trees as appropriate) will uniquely specify
a TAG tree. Schabes and Shieber (1994) charac-
terise this as a function D from derivation trees
to derived trees.
The idea behind S-TAG is to take two TAGs
and link them in an appropriate way so that
when substitution or adjunction occurs in a tree
in one grammar, then a corresponding compo-
sition operation occurs in a tree in the other
grammar. Because of the way TAG&apos;s EDL cap-
tures dependencies, it is not problematic to have
translations more complex than word-for-word
mappings (Abeille et al, 1990). For example,
from the Abeille et al paper, handling argument
swap, as in (1), is straightforward. These would
be represented by tree pairs as in Figure 3.
</bodyText>
<footnote confidence="0.526242666666667">
21n derivation trees, addresses are given using the
Gorn addressing scheme, although these are omitted in
this paper where the composition operations are obvious.
</footnote>
<page confidence="0.997221">
81
</page>
<figure confidence="0.857281307692308">
W
NPU VP
V PP
1
manque P N.13
1
ae: NP.1,111 VP
V NPI.
misses
a
NP NP NP NP
CI7 : 1 as: 1 1
John Jean Mary Marie /
</figure>
<figureCaption confidence="0.5563475">
Figure 3: S-TAG with argument swap
(1) a. John misses Mary. a[misses] a[manque a]
b. Marie manque a Jean. • •
a[John] a[Mary] a[Jean] c[Marie]
</figureCaption>
<bodyText confidence="0.99875228125">
In these tree pairs, a diacritic (U) represents
a link between the trees, such that if a substi-
tution or adjunction occurs at one end of the
link, a corresponding operation must occur at
the other end, which is situated in the other
tree of the same tree pair. Thus if the tree for
John in a7 is substituted at 111 in the left tree
of a6, the tree for Jean must be substituted at
in the right tree. The diacritic F31 allows a
sentential modifier for both trees (e.g. unfortu-
nately I malheureusement).
The original definition of S-TAG (Shieber and
Schabes, 1990), however, had a greater genera-
tive capacity than that of its component TAG
grammars: even though each component gram-
mar could only generate Tree Adjoining Lan-
guages (TALs), an S-TAG pairing two TAG
grammars could generate non-TALs. Hence, a
redefinition was proposed (Shieber, 1994). Un-
der this new definition, the mapping between
grammars occurs at the meta level: there is an
isomorphism between derivation trees, preserv-
ing structure at the meta level, which estab-
lishes the translation. For example, the deriva-
tion trees for (1) using the elementary trees of
Figure 3 is given in Figure 4; there is a clear
isomorphism, with a bijection between nodes,
and parent-child relationships preserved in the
mapping.
In translation, it is not always possible to have
a bijection between nodes. Take, for example,
(2).
</bodyText>
<figureCaption confidence="0.94515">
Figure 4: Derivation tree pair for Fig 3
</figureCaption>
<listItem confidence="0.489003666666667">
(2) a. Hopefully John misses Mary.
b. On espere que Marie manque
Jean.
</listItem>
<bodyText confidence="0.999920857142857">
In English, hopefully would be represented by a
single tree; in French, on espere que typically
by two. Shieber (1994) proposed the idea of
bounded subderivation to deal with such aber-
rant cases—treating the two nodes in the deriva-
tion tree representing on espere que as singular,
and basing the isomorphism on this. This idea
of bounded subderivation solves several difficul-
ties with the isomorphism requirement, but not
all. An example by Shieber demonstrates that
translation involving clitics causes problems un-
der this definition, as in (3). The partial deriva-
tion trees containing the clitic /ui and its English
parallel are as in Figure 5.
</bodyText>
<listItem confidence="0.9980435">
(3) a. The doctor treats his teeth.
b. Le docteur lui soigne les dents.
</listItem>
<bodyText confidence="0.999848285714286">
A potentially unbounded amount of material in-
tervening in the branches of the righthand tree
means that an isomorphism between the trees
cannot be established under Shieber&apos;s specifi-
cation even with the modification of bounded
subderivations. Shieber suggested that the iso-
morphism requirement may be overly stringent;
</bodyText>
<page confidence="0.971596">
82
</page>
<figure confidence="0.948575">
a[treats] a[soigne]
o[teeth] a[lui] a[dents]
a[his]
</figure>
<figureCaption confidence="0.99939">
Figure 5: Clitic derivation trees
</figureCaption>
<bodyText confidence="0.996257833333333">
but intuitively, it seems reasonable that what
occurs in one grammar should be mirrored in
the other in some way, and this reflected in the
derivation history.
Section 3 looks at representing syntactic para-
phrase in S-TAG, where similar problems are
encountered; in doing this, it can be seen more
clearly than in translation that the difficulty is
caused not by the isomorphism requirement it-
self but by the fact that the isomorphism does
not exploit any of the structure inherent in the
derivation trees.
</bodyText>
<sectionHeader confidence="0.993922" genericHeader="method">
3 S-TAG and Paraphrase
</sectionHeader>
<bodyText confidence="0.999787454545455">
Syntactic paraphrase can also be described with
S-TAG (Dras, 1997; Dras, forthcoming). The
manner of representing paraphrase in S-TAG
is similar to the translation representation de-
scribed in Section 2. The reason for illustrating
both is that syntactic paraphrase, because of its
structural complexity, is able to illuminate the
nature of the problem with S-TAG. In a specific
parallel, a difficulty like that of the clitics oc-
curs here also, for example in paraphrases such
as (4).
</bodyText>
<listItem confidence="0.752168">
(4) a. The jacket which collected the dust
</listItem>
<bodyText confidence="0.992554024390244">
was tweed.
b. The jacket collected the dust. It
was tweed.
Tree pairs which could represent the elements in
the mapping between (4a) and (413) are given in
Figure 6. It is clearly the case that the trees in
the tree pair a9 are not elementary trees, in the
same way that on espere que is not represented
by a single elementary tree: in both cases, such
single elementary trees would violate the Con-
dition on Elementary Tree Minimality (Frank,
1992). The tree pair a9 is the one that captures
the syntactic rearrangement in this paraphrase;
such a tree pair will be termed the STRUCTURAL
MAPPING PAIR (SMP). Taking as a basic set of
trees the XTAG standard grammar of English
(XTAG, 1995), the derivation tree pair for (4)
would be as in Figure 7.3 Apart from a9, each
tree in Figure 6 corresponds to an elementary
object-level tree, as indicated by its label; the
remaining labels, indicated in bold in the meta-
levet derivation tree in Figure 7, correspond to
the elementary object-level trees forming a9, in
much the same way that on espere que is repre-
sented by a subderivation comprising an on tree
substituted into an espere que tree.
Note that the nodes corresponding to the left
tree of the SMP form two discontinuous groups,
but these discontinuous groups are clearly re-
lated. Dras (forthcoming) describes the condi-
tions under which these discontinuous groupings
are acceptable in paraphrase; these discontinu-
ous groupings are treated as a single block with
SLOTS connecting the groupings, whose fillers
must be of particular types. Fundamentally,
however, the structure is the same as for clitics:
in one derivation tree the grouped elements are
in one branch of the tree, and in the other they
are in two separate branches with the possibility
of an unbounded amount of intervening mate-
rial, as described below in Section 4.
</bodyText>
<sectionHeader confidence="0.997191" genericHeader="method">
4 Meta-Level Structure
</sectionHeader>
<bodyText confidence="0.8799223">
Example (5) illustrates why the paraphrase in
(4) has the same difficulty as the clitic example
in (3) when represented in S-TAG: because un-
bounded intervening material can occur when
promoting arbitrarily deeply embedded relative
clauses to sentence level, as indicated by Fig-
ure 8, an isomorphism is not possible between
derivation trees representing paraphrases such
as (4) and (5). Again, the component trees of
the SMP are in bold in Figure 8.
(5) a. The jacket which collected the dust
which covered the floor was tweed.
b. The jacket which collected the dust
3Node labels, the object-level tree names, are given
according to the XTAG standard: see Appendix B of
XTAG (1995). This is done so that the component trees
of the aggregate a9 and their types are obvious. The
lexical item to which each is bound is given in square
brackets, to make the trees, and the correspondence be-
tween for example Figure 6 and Figure 7, clearer.
</bodyText>
<page confidence="0.994952">
83
</page>
<figure confidence="0.9989633">
NP
NPo El
ae.
Comp
which
NP VP
1
V NI., 1
collected
VP
V VP
1
is V AdjP
I I
Adj
tweed
NP VP
1
it V VP
is V AdjP
I I
e Adj
1
tweed
NP0111 VP
collected
Punct
NP NP ( Det Det NP NP
N Det N the 012: Detl, N Det N
jacket jacket the dust dust
</figure>
<figureCaption confidence="0.998729">
Figure 6: S-TAG for (4)
</figureCaption>
<equation confidence="0.989118">
anx0Ax1[tweed]
-
aNXdxN[jacket] ,f3Vvx[was]
_ - - -
aDXD[the] /3NOnx0Vnxl[collected]
fiCOMPs[which] aNXdx,N[dust]
anx0Axl[tweed]
_ - -
_ - - -
aNXdx1V[jacket) OVvx[was] )3sPys[.]
aDXD[thel anx0Vnxl[collected]
als1XN[it] aNXdx,N[dust]
aDXD[the] aDXD[the)
</equation>
<figureCaption confidence="0.731704666666667">
Figure 7: Derivation tree pair for example (4)
was tweed. The dust covered the
floor.4
</figureCaption>
<bodyText confidence="0.993139">
The paraphrase in (4) and in Figures 6 and 7,
and other paraphrase examples, strongly sug-
gest that these more complex mappings are not
an aberration that can be dealt with by patch-
ing measures such as bounded subderivation. It
is clear that the meta level is fundamentally not
just for establishing a one-to-one onto mapping
between nodes; rather, it is also about defin-
ing structures representing, for example, the
4The referring expression that is the subject of this
second sentence has changed from it in (4) to the dust
so the antecedent is clear. Ensuring it is appropriately
coreferent, by using two occurrences of the same diacritic
in the same tree, necessitates a change in the properties
of the formalism unrelated to the one discussed in this
paper; see Dras (forthcoming). Assume, for the purpose
of this example, that the referring expression is fixed and
given, as is the case with it, rather than determined by
coindexed diacritics.
SMP at this meta level: in an isomorphism be-
tween trees in Figure 8, it is necessary to re-
gard the SMP components of each tree as a uni-
tary substructure and map them to each other.
The discontinuous groupings should form these
substructures regardless of intervening material,
and this is suggestive of TAG&apos;s EDL.
In the TAG definition, the derivation trees are
context free (Weir, 1988), and can be expressed
by a CFG. The isomorphism in the S-TAG def-
inition of Shieber (1994) reflects this, by effec-
tively adopting the single-level domain of local-
ity (extended slightly in cases of bounded sub-
derivation, but still effectively a single level), in
the way that context free trees are fundamen-
tally made from single level components and
grown by concatenation of these single levels.
This is what causes the isomorphism require-
ment to fail, the inability to express substruc-
tures at the meta level in order to map between
them, rather than just mapping between (effec-
</bodyText>
<page confidence="0.997263">
84
</page>
<table confidence="0.8064236">
anx0Axl weed] anx0A2511tweed]
aNXdxN (jacket]
f/Vvx[is] aNXdxN [jacket] fArvx[is] f3sPLis[.]
- -
aDXD[the] pN021[scollected]
fiCOMPs[which] aNXdx.N[dust]
aDX1J[the]
aDXD[the] prOlocOVux I [collected] anx0Vnx1[covered]
_ aNXN[it] allXdx.N[floorl
PCOMPs[which] aNXdxN[dust] oDX1.1. [the]
_
a DXD[thel fiNOrix0Vnxlicovered]
PCOMPs[which] aNXdx.N [floor]
1
aDXD[t he]
</table>
<figureCaption confidence="0.997461">
Figure 8: Derivation tree for example (5)
</figureCaption>
<bodyText confidence="0.99262974509804">
tively) single nodes.
To solve the problem with isomorphism, a meta-
level grammar can be defined to specify the
necessary substructures prior to mapping, with
minimality conditions on what can be consid-
ered acceptable discontinuity. Specifically, in
this case, a TAG meta-level grammar can be
defined, rather than the implicit CFG, because
this captures the EDL well. The TAG yield
function of Weir (1988) can then be applied to
these derivation trees to get derived trees. This,
of course, raises questions about effects on gen-
erative capacity and other properties; these are
dealt with in Section 5.
A procedure for automatically constructing a
TAG meta-grammar is as follows in Construc-
tion 1. The basic idea is that where the node
bijection is still appropriate, the grammar re-
tains its context free nature (by using single-
level TAG trees composed by substitution, mim-
icking CFG tree concatenation), but where EDL
is required, multi-level TAG initial trees are
defined, with TAG auxiliary trees for describ-
ing the intervening material. These meta-level
trees are then mapped appropriately; this cor-
responds to a bijection of nodes at the meta-
meta level. For (5), the meta-level grammar for
the left projection then looks as in Figure 9,
and for the right projection as in Figure 10.
Figure 11 contains the meta-meta-level trees,
the tree pair that is the derivation of the meta
level, where the mapping is a bijection between
nodes. Adding unbounded material would then
just be reflected in the meta-meta-level as a list
of 3 nodes depending from the 015/018 nodes in
these trees.
The question may be asked, Why isn&apos;t it the
case that the same effect will occur at the meta-
meta level that required the meta-grammar in
the first place, leading perhaps to an infinite
(and useless) sequence? The intuition is that it
is the meta-level, rather than anywhere &apos;higher&apos;,
which is fundamentally the place to specify
structure: the object level specifies the trees,
and the meta level specifies the grouping or
structure of these trees. Then the mapping
takes place on these structures, rather than the
object-level trees; hence the need for a grammar
at the meta-level but not beyond.
Construction 1 To build a TAG metagram-
mar:
</bodyText>
<listItem confidence="0.7223032">
1. An initial tree in the metagrammar is
formed for each part of the derivation tree
corresponding to the substructure repre-
senting an SMP, including the slots so that
a contiguous tree is formed. Any node that
links these parts of the derivation tree to
other subtrees in the derivation tree is also
included, and becomes a substitution node
in the metagrammar tree.
2. Auxiliary trees are formed corresponding to
</listItem>
<bodyText confidence="0.8878827">
the parts of the derivation trees that are slot
fillers along with the nodes in the discon-
tinuous regions adjacent to the slots; one
contiguous auxiliary tree is formed for each
bounded sequence of slot fillers within each
substructure. These trees also satisfy cer-
tain minimality conditions.
3. The remaining metagrammar trees then
come from splitting the derivation tree
into single-level trees, with the nodes on
</bodyText>
<page confidence="0.997368">
85
</page>
<table confidence="0.911774">
a13: anx0Axl a16: anx0Axl
OVvx
aNXdxN f3Vvx
aNXdxN OsPUs
1 aNXdxN
aDXD aNXdxN aNXdxN4.
aDXD 3NOnx0Vnx1
OCOMPs aNXdxN4,
</table>
<figure confidence="0.955232166666667">
a14: aNXdxN
1
aDXD
015: aNXdxN
aDXD ONOnx0Vnxl
OCOMPs aNXdxN.
a47: aNXdxN
1
aDXD
018: aNXdxN
aDXD ONOnx0Vnxl
OCOMPs aNXdxN.
</figure>
<figureCaption confidence="0.998658666666667">
Figure 10: Meta-grammar for (5h)
Figure 9: Meta-grammar for (5a) a14 015 a17 018
these single-level trees in the rnetagrammar
marked for substitution if the corresponding
nodes in the derivation tree have subtrees.
Figure 11: Derivation tree pair for Fig 3
</figureCaption>
<bodyText confidence="0.999954588235294">
The minimality conditions in Step 2 of Con-
struction 1 are in keeping with the idea of min-
imality elsewhere in TAG (for example, Frank,
1992). The key condition is that meta-level
auxiliary trees are rooted in a-labelled nodes,
and have only 0-labelled nodes along the spine.
The intuition here is that slots (the nodes which
meta-level auxiliary trees adjoin into) must be
a-labelled: 0-labelled trees would not need
slots, as the substructure could instead be con-
tinuous and the 0-labelled trees would just ad-
join in. So the meta-level auxiliary trees are
rooted in a-labelled trees; but they have only /3-
labelled trees in the spine, as they aim to repre-
sent the minimal amount of recursive material.
Notwithstanding these conditions, the construc-
tion is quite straightforward.
</bodyText>
<sectionHeader confidence="0.99843" genericHeader="method">
5 Generative Capacity
</sectionHeader>
<bodyText confidence="0.997346166666667">
Weir (1988) showed that there is an infinite pro-
gression of TAG-related formalisms, in genera-
tive capacity between CFGs and indexed gram-
mars. A formalism J in the progression is de-
fined by applying the TAG yield function to a
derivation tree defined by a grammar formalism
the generative capacity of J is a superset
of Thus using a TAG meta-grammar, as
described in Section 4, would suggest that the
generative capacity of the object-level formal-
ism would necessarily have been increased over
that of TAG.
However, there is a regular form for TAGs
(Rogers, 1994), such that the trees of TAGs in
this regular form are local sets; that is, they
are context free. The meta-level TAG built by
Construction 1 with the appropriate conditions
on slots is in this regular form. A proof of this
is in Dras (forthcoming); a sketch is as follows.
If adjunction may not occur along the spine of
another auxiliary tree, the grammar is in regu-
lar form. This kind of adjunction does not oc-
cur under Construction 1 because all meta-level
auxiliary trees are rooted in a-labelled trees
(object-level auxiliary trees), while their spines
consist only of 13-labelled trees (object-level ini-
tial trees).
Since the meta-level grammar is context free,
despite being expressed using a TAG grammar,
this means that the object-level grammar is still
</bodyText>
<page confidence="0.985786">
86
</page>
<bodyText confidence="0.497927">
a TAG.
</bodyText>
<sectionHeader confidence="0.926052" genericHeader="conclusions">
6 Conclusion
</sectionHeader>
<bodyText confidence="0.999980954545455">
In principle, a meta-grammar is desirable, as it
specifies substructures at a meta level, which is
necessary when operations are carried out that
are applied at this meta level. In a practical ap-
plication, it solves problems in one such formal-
ism, S-TAG, when used for paraphrase or trans-
lation, as outlined by Shieber (1994). Moreover,
the formalism remains fundamentally the same,
in specifying mappings between two grammars
of restricted generative capacity; and in cases
where this is important, it is possible to avoid
changing the generative capacity of the S-TAG
formalism in applying this meta-grammar
Currently this revised version of the S-TAG for-
malism is used as the low-level representation in
the Reluctant Paraphrasing framework of Dras
(1998; forthcoming). It is likely to also be use-
ful in representations for machine translation
between languages that are structurally more
dissimilar than English and French, and hence
more in need of structural definition of object-
level constructs; exploring this is future work.
</bodyText>
<sectionHeader confidence="0.999257" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999907274509803">
Abeille, Anne, Yves Schabes and Aravind Joshi.
1990. Using Lexicalized TAGs for Machine Trans-
lation. Proceedings of the 13th International Con-
ference on Computational Linguistics, 1-6.
Dras, Mark. 1997. Representing Paraphrases Using
S-TAGs. Proceedings of the 35th Meeting of the As-
sociation for Computational Linguistics, 516-518.
Dras, Mark. 1998. Search in Constraint-Based
Paraphrasing. Natural Language Processing and In-
dustrial Applications (NLP+IA98), 213-219.
Dras, Mark. forthcoming. Tree Adjoining Grammar
and the Reluctant Paraphrasing of Text. PhD thesis,
Macquarie University, Australia.
Joshi, Aravind and Yves Schabes. 1996. Tree-
Adjoining Grammars. In Grzegorz Rozenberg and
Arto Salomaa (eds.), Handbook of Formal Lan-
guages, Vol 3, 69-123. Springer-Verlag. New York,
NY.
Kahane, Sylvain, Alexis Nasr and Owen Ram-
bow. 1998. Pseudo-Projectivity: A Polynomi-
ally Parsable Non-Projective Dependency Gram-
mar. Proceedings of the 36th Annual Meeting of the
Association for Computational Linguistics, 646-652.
Palmer, Martha, Owen Rambow and Alexis Nasr.
1998. Rapid Prototyping of Domain-Specific Ma-
chine Translation Systems. AMTA-98, Langhorne,
PA.
Rogers, James. 1994. Capturing CFLs with Tree
Adjoining Grammars. Proceedings of the 32nd Meet-
ing of the Association for Computational Linguis-
tics, 155-162.
Schabes, Yves and Stuart Shieber. 1994. An Al-
ternative Conception of Tree-Adjoining Derivation.
Computational Linguistics, 20(1): 91-124.
Shieber, Stuart. 1985. Evidence against the context-
freeness of natural language. Linguistics and Philos-
ophy, 8,333-343.
Shieber, Stuart and Yves Schabes. 1990. Syn-
chronous Tree-Adjoining Grammars. Proceedings of
the 13th International Conference on Computational
Linguistics, 253-258.
Shieber, Stuart. 1994. Restricting the Weak-
Generative Capacity of Synchronous Tree-Adjoining
Grammars. Computational Intelligence, 10(4), 371-
386.
Weir, David. 1988. Characterizing Mildly Context-
Sensitive Grammar Formalisms. PhD thesis, Uni-
versity of Pennsylvania.
XTAG. 1995. A Lexicalized Tree Adjoining Gram-
mar for English. Technical Report IRCS95-03, Uni-
versity of Pennsylvania.
</reference>
<page confidence="0.999476">
87
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.899876">
<title confidence="0.9994315">A Meta-Level Grammar: Redefining Synchronous TAG for Translation and Paraphrase</title>
<author confidence="0.999364">Mark Dras</author>
<affiliation confidence="0.996922333333333">Microsoft Research Institute Department of Computer Science Macquarie University, Australia</affiliation>
<email confidence="0.993382">markd@ics.mq.edu.au</email>
<abstract confidence="0.993736928571429">In applications such as translation and paraphrase, operations are carried out on grammars at the meta level. This paper shows how a meta-grammar, defining structure at the meta level, is useful in the case of such operations; in particular, how it solves problems in the current definition of Synchronous TAG (Shieber, 1994) caused by ignoring such structure in mapping between grammars, for applications such as translation. Moreover, essential properties of the formalism remain unchanged.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Anne Abeille</author>
<author>Yves Schabes</author>
<author>Aravind Joshi</author>
</authors>
<title>Using Lexicalized TAGs for Machine Translation.</title>
<date>1990</date>
<booktitle>Proceedings of the 13th International Conference on Computational Linguistics,</booktitle>
<pages>1--6</pages>
<contexts>
<context position="2435" citStr="Abeille et al, 1990" startWordPosition="376" endWordPosition="379">ese occur also in syntactic paraphrasing. It then demonstrates, illustrated by the relative structural complexity which occurs at the meta level in syntactic paraphrase, how a meta-level grammar resolves the representational problems; and it further shows that this has no effect on the generative capacity of S-TAG. 2 S-TAG and Machine Translation Synchronous TAG, the mapping between two Tree Adjoining Grammars, was first proposed by Shieber and Schabes (1990). An application proposed concurrently with the definition of S-TAG was that of machine translation, mapping between English and French (Abeille et al, 1990); work continues in the area, for example using S-TAG for English-Korean machine translation in a practical system (Palmer et al, 1998). In mapping between, say, English and French, there is a lexicalised TAG for each language (see XTAG, 1995, for an overview of such a grammar). Under the definition of TAG, a grammar contains elementary trees, rather than flat rules, which combine together via the operations of substitution and adjunction (composition operations) to form composite structures—derived trees—which will ultimately provide structural representations for an input string if this stri</context>
<context position="6235" citStr="Abeille et al, 1990" startWordPosition="1022" endWordPosition="1025">ff the tree, and substituting or adjoining the corresponding objectlevel trees as appropriate) will uniquely specify a TAG tree. Schabes and Shieber (1994) characterise this as a function D from derivation trees to derived trees. The idea behind S-TAG is to take two TAGs and link them in an appropriate way so that when substitution or adjunction occurs in a tree in one grammar, then a corresponding composition operation occurs in a tree in the other grammar. Because of the way TAG&apos;s EDL captures dependencies, it is not problematic to have translations more complex than word-for-word mappings (Abeille et al, 1990). For example, from the Abeille et al paper, handling argument swap, as in (1), is straightforward. These would be represented by tree pairs as in Figure 3. 21n derivation trees, addresses are given using the Gorn addressing scheme, although these are omitted in this paper where the composition operations are obvious. 81 W NPU VP V PP 1 manque P N.13 1 ae: NP.1,111 VP V NPI. misses a NP NP NP NP CI7 : 1 as: 1 1 John Jean Mary Marie / Figure 3: S-TAG with argument swap (1) a. John misses Mary. a[misses] a[manque a] b. Marie manque a Jean. • • a[John] a[Mary] a[Jean] c[Marie] In these tree pairs</context>
</contexts>
<marker>Abeille, Schabes, Joshi, 1990</marker>
<rawString>Abeille, Anne, Yves Schabes and Aravind Joshi. 1990. Using Lexicalized TAGs for Machine Translation. Proceedings of the 13th International Conference on Computational Linguistics, 1-6.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mark Dras</author>
</authors>
<title>Representing Paraphrases Using S-TAGs.</title>
<date>1997</date>
<booktitle>Proceedings of the 35th Meeting of the Association for Computational Linguistics,</booktitle>
<pages>516--518</pages>
<contexts>
<context position="10026" citStr="Dras, 1997" startWordPosition="1665" endWordPosition="1666">rivation trees but intuitively, it seems reasonable that what occurs in one grammar should be mirrored in the other in some way, and this reflected in the derivation history. Section 3 looks at representing syntactic paraphrase in S-TAG, where similar problems are encountered; in doing this, it can be seen more clearly than in translation that the difficulty is caused not by the isomorphism requirement itself but by the fact that the isomorphism does not exploit any of the structure inherent in the derivation trees. 3 S-TAG and Paraphrase Syntactic paraphrase can also be described with S-TAG (Dras, 1997; Dras, forthcoming). The manner of representing paraphrase in S-TAG is similar to the translation representation described in Section 2. The reason for illustrating both is that syntactic paraphrase, because of its structural complexity, is able to illuminate the nature of the problem with S-TAG. In a specific parallel, a difficulty like that of the clitics occurs here also, for example in paraphrases such as (4). (4) a. The jacket which collected the dust was tweed. b. The jacket collected the dust. It was tweed. Tree pairs which could represent the elements in the mapping between (4a) and (</context>
</contexts>
<marker>Dras, 1997</marker>
<rawString>Dras, Mark. 1997. Representing Paraphrases Using S-TAGs. Proceedings of the 35th Meeting of the Association for Computational Linguistics, 516-518.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mark Dras</author>
</authors>
<title>Search in Constraint-Based Paraphrasing.</title>
<date>1998</date>
<booktitle>Natural Language Processing and Industrial Applications (NLP+IA98),</booktitle>
<pages>213--219</pages>
<marker>Dras, 1998</marker>
<rawString>Dras, Mark. 1998. Search in Constraint-Based Paraphrasing. Natural Language Processing and Industrial Applications (NLP+IA98), 213-219.</rawString>
</citation>
<citation valid="true">
<authors>
<author>forthcoming</author>
</authors>
<title>Tree Adjoining Grammar and the Reluctant Paraphrasing of Text.</title>
<date></date>
<tech>PhD thesis,</tech>
<institution>Macquarie University,</institution>
<marker>forthcoming, </marker>
<rawString>Dras, Mark. forthcoming. Tree Adjoining Grammar and the Reluctant Paraphrasing of Text. PhD thesis, Macquarie University, Australia.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Aravind Joshi</author>
<author>Yves Schabes</author>
</authors>
<title>TreeAdjoining Grammars.</title>
<date>1996</date>
<booktitle>In Grzegorz Rozenberg and Arto Salomaa (eds.), Handbook of Formal Languages,</booktitle>
<volume>3</volume>
<pages>69--123</pages>
<publisher>Springer-Verlag.</publisher>
<location>New York, NY.</location>
<contexts>
<context position="3110" citStr="Joshi and Schabes (1996)" startWordPosition="481" endWordPosition="484">AG for English-Korean machine translation in a practical system (Palmer et al, 1998). In mapping between, say, English and French, there is a lexicalised TAG for each language (see XTAG, 1995, for an overview of such a grammar). Under the definition of TAG, a grammar contains elementary trees, rather than flat rules, which combine together via the operations of substitution and adjunction (composition operations) to form composite structures—derived trees—which will ultimately provide structural representations for an input string if this string is grammatical. An overview of TAGs is given in Joshi and Schabes (1996). The characteristics of TAGs make them better suited to describing natural language than Context Free Grammars (CFGs): CFGs are not adequate to describe the entire syntax of natural language (Shieber, 1985), while TAGs are able to provide structures for the constructions problematic for CFGs, and without a much greater generative capacity. Two particular characteris80 01: NP04. VP 02: NP NP1 Garrad defeated NP VP Garrad Adv VP cunningly V NP 03: NP etc Det Det N the defeated Det the Sumerians Sumerians 05: VP 02(1) /5(2) 03 (2 • 2) Adv VP. 04(1) cunningly Figure 1: Elementary TAG trees tics o</context>
</contexts>
<marker>Joshi, Schabes, 1996</marker>
<rawString>Joshi, Aravind and Yves Schabes. 1996. TreeAdjoining Grammars. In Grzegorz Rozenberg and Arto Salomaa (eds.), Handbook of Formal Languages, Vol 3, 69-123. Springer-Verlag. New York, NY.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sylvain Kahane</author>
<author>Alexis Nasr</author>
<author>Owen Rambow</author>
</authors>
<title>Pseudo-Projectivity: A Polynomially Parsable Non-Projective Dependency Grammar.</title>
<date>1998</date>
<booktitle>Proceedings of the 36th Annual Meeting of the Association for Computational Linguistics,</booktitle>
<pages>646--652</pages>
<location>Palmer, Martha, Owen Rambow</location>
<contexts>
<context position="1193" citStr="Kahane et al, 1998" startWordPosition="183" endWordPosition="186">mapping between grammars, for applications such as translation. Moreover, essential properties of the formalism remain unchanged. 1 Introduction A grammar is, among other things, a device by which it is possible to express structure in a set of entities; a grammar formalism, the constraints on how a grammar is allowed to express this. Once a grammar has been used to express structural relationships, in many applications there are operations which act at a &apos;meta level&apos; on the structures expressed by the grammar: for example, lifting rules on a dependency grammar to achieve pseudo-projectivity (Kahane et al, 1998), and mapping between synchronised Tree Adjoining Grammars (TAGs) (Shieber and Schabes, 1990; Shieber 1994) as in machine translation or syntax-to-semantics transfer. At this meta level, however, the operations do not themselves exploit any structure. This paper explores how, in the TAG case, using a meta-level grammar to define meta-level structure resolves the flaws in the ability of Synchronous TAG (S-TAG) to be a representation for applications such as machine translation or paraphrase. This paper is set out as follows. It describes the expressivity problems of S-TAG as noted in Shieber (1</context>
</contexts>
<marker>Kahane, Nasr, Rambow, 1998</marker>
<rawString>Kahane, Sylvain, Alexis Nasr and Owen Rambow. 1998. Pseudo-Projectivity: A Polynomially Parsable Non-Projective Dependency Grammar. Proceedings of the 36th Annual Meeting of the Association for Computational Linguistics, 646-652. Palmer, Martha, Owen Rambow and Alexis Nasr. 1998. Rapid Prototyping of Domain-Specific Machine Translation Systems. AMTA-98, Langhorne, PA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>James Rogers</author>
</authors>
<title>Capturing CFLs with Tree Adjoining Grammars.</title>
<date>1994</date>
<booktitle>Proceedings of the 32nd Meeting of the Association for Computational Linguistics,</booktitle>
<pages>155--162</pages>
<contexts>
<context position="21133" citStr="Rogers, 1994" startWordPosition="3514" endWordPosition="3515">on is quite straightforward. 5 Generative Capacity Weir (1988) showed that there is an infinite progression of TAG-related formalisms, in generative capacity between CFGs and indexed grammars. A formalism J in the progression is defined by applying the TAG yield function to a derivation tree defined by a grammar formalism the generative capacity of J is a superset of Thus using a TAG meta-grammar, as described in Section 4, would suggest that the generative capacity of the object-level formalism would necessarily have been increased over that of TAG. However, there is a regular form for TAGs (Rogers, 1994), such that the trees of TAGs in this regular form are local sets; that is, they are context free. The meta-level TAG built by Construction 1 with the appropriate conditions on slots is in this regular form. A proof of this is in Dras (forthcoming); a sketch is as follows. If adjunction may not occur along the spine of another auxiliary tree, the grammar is in regular form. This kind of adjunction does not occur under Construction 1 because all meta-level auxiliary trees are rooted in a-labelled trees (object-level auxiliary trees), while their spines consist only of 13-labelled trees (object-</context>
</contexts>
<marker>Rogers, 1994</marker>
<rawString>Rogers, James. 1994. Capturing CFLs with Tree Adjoining Grammars. Proceedings of the 32nd Meeting of the Association for Computational Linguistics, 155-162.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yves Schabes</author>
<author>Stuart Shieber</author>
</authors>
<title>An Alternative Conception of Tree-Adjoining Derivation.</title>
<date>1994</date>
<journal>Computational Linguistics,</journal>
<volume>20</volume>
<issue>1</issue>
<pages>91--124</pages>
<contexts>
<context position="5770" citStr="Schabes and Shieber (1994)" startWordPosition="941" endWordPosition="944">nd derivation trees, respectively, for Figure 1 tion tree would be as in Figure 2.2 Weir (1988) terms the derived tree, and its component elementary trees, OBJECT-LEVEL TREES; the derivation tree is termed a METALEVEL TREE, since it describes the object-level trees. The derivation trees are context free (Weir, 1988), that is, they can be expressed by a CFG; Weir showed that applying a TAG yield function to a context free derivation tree (that is, reading the labels off the tree, and substituting or adjoining the corresponding objectlevel trees as appropriate) will uniquely specify a TAG tree. Schabes and Shieber (1994) characterise this as a function D from derivation trees to derived trees. The idea behind S-TAG is to take two TAGs and link them in an appropriate way so that when substitution or adjunction occurs in a tree in one grammar, then a corresponding composition operation occurs in a tree in the other grammar. Because of the way TAG&apos;s EDL captures dependencies, it is not problematic to have translations more complex than word-for-word mappings (Abeille et al, 1990). For example, from the Abeille et al paper, handling argument swap, as in (1), is straightforward. These would be represented by tree </context>
</contexts>
<marker>Schabes, Shieber, 1994</marker>
<rawString>Schabes, Yves and Stuart Shieber. 1994. An Alternative Conception of Tree-Adjoining Derivation. Computational Linguistics, 20(1): 91-124.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stuart Shieber</author>
</authors>
<title>Evidence against the contextfreeness of natural language.</title>
<date>1985</date>
<journal>Linguistics and Philosophy,</journal>
<pages>8--333</pages>
<contexts>
<context position="3317" citStr="Shieber, 1985" startWordPosition="516" endWordPosition="517">a grammar). Under the definition of TAG, a grammar contains elementary trees, rather than flat rules, which combine together via the operations of substitution and adjunction (composition operations) to form composite structures—derived trees—which will ultimately provide structural representations for an input string if this string is grammatical. An overview of TAGs is given in Joshi and Schabes (1996). The characteristics of TAGs make them better suited to describing natural language than Context Free Grammars (CFGs): CFGs are not adequate to describe the entire syntax of natural language (Shieber, 1985), while TAGs are able to provide structures for the constructions problematic for CFGs, and without a much greater generative capacity. Two particular characteris80 01: NP04. VP 02: NP NP1 Garrad defeated NP VP Garrad Adv VP cunningly V NP 03: NP etc Det Det N the defeated Det the Sumerians Sumerians 05: VP 02(1) /5(2) 03 (2 • 2) Adv VP. 04(1) cunningly Figure 1: Elementary TAG trees tics of TAG that make it well suited to describing natural language are the extended domain of locality (EDL) and factoring recursion from the domain of dependencies (FRD). In TAG, for instance, information concer</context>
</contexts>
<marker>Shieber, 1985</marker>
<rawString>Shieber, Stuart. 1985. Evidence against the contextfreeness of natural language. Linguistics and Philosophy, 8,333-343.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stuart Shieber</author>
<author>Yves Schabes</author>
</authors>
<title>Synchronous Tree-Adjoining Grammars.</title>
<date>1990</date>
<booktitle>Proceedings of the 13th International Conference on Computational Linguistics,</booktitle>
<pages>253--258</pages>
<contexts>
<context position="1285" citStr="Shieber and Schabes, 1990" startWordPosition="195" endWordPosition="198">operties of the formalism remain unchanged. 1 Introduction A grammar is, among other things, a device by which it is possible to express structure in a set of entities; a grammar formalism, the constraints on how a grammar is allowed to express this. Once a grammar has been used to express structural relationships, in many applications there are operations which act at a &apos;meta level&apos; on the structures expressed by the grammar: for example, lifting rules on a dependency grammar to achieve pseudo-projectivity (Kahane et al, 1998), and mapping between synchronised Tree Adjoining Grammars (TAGs) (Shieber and Schabes, 1990; Shieber 1994) as in machine translation or syntax-to-semantics transfer. At this meta level, however, the operations do not themselves exploit any structure. This paper explores how, in the TAG case, using a meta-level grammar to define meta-level structure resolves the flaws in the ability of Synchronous TAG (S-TAG) to be a representation for applications such as machine translation or paraphrase. This paper is set out as follows. It describes the expressivity problems of S-TAG as noted in Shieber (1994), and shows how these occur also in syntactic paraphrasing. It then demonstrates, illust</context>
<context position="7377" citStr="Shieber and Schabes, 1990" startWordPosition="1234" endWordPosition="1237"> a] b. Marie manque a Jean. • • a[John] a[Mary] a[Jean] c[Marie] In these tree pairs, a diacritic (U) represents a link between the trees, such that if a substitution or adjunction occurs at one end of the link, a corresponding operation must occur at the other end, which is situated in the other tree of the same tree pair. Thus if the tree for John in a7 is substituted at 111 in the left tree of a6, the tree for Jean must be substituted at in the right tree. The diacritic F31 allows a sentential modifier for both trees (e.g. unfortunately I malheureusement). The original definition of S-TAG (Shieber and Schabes, 1990), however, had a greater generative capacity than that of its component TAG grammars: even though each component grammar could only generate Tree Adjoining Languages (TALs), an S-TAG pairing two TAG grammars could generate non-TALs. Hence, a redefinition was proposed (Shieber, 1994). Under this new definition, the mapping between grammars occurs at the meta level: there is an isomorphism between derivation trees, preserving structure at the meta level, which establishes the translation. For example, the derivation trees for (1) using the elementary trees of Figure 3 is given in Figure 4; there</context>
</contexts>
<marker>Shieber, Schabes, 1990</marker>
<rawString>Shieber, Stuart and Yves Schabes. 1990. Synchronous Tree-Adjoining Grammars. Proceedings of the 13th International Conference on Computational Linguistics, 253-258.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stuart Shieber</author>
</authors>
<title>Restricting the WeakGenerative Capacity of Synchronous Tree-Adjoining Grammars.</title>
<date>1994</date>
<journal>Computational Intelligence,</journal>
<volume>10</volume>
<issue>4</issue>
<pages>371--386</pages>
<contexts>
<context position="1300" citStr="Shieber 1994" startWordPosition="199" endWordPosition="200">emain unchanged. 1 Introduction A grammar is, among other things, a device by which it is possible to express structure in a set of entities; a grammar formalism, the constraints on how a grammar is allowed to express this. Once a grammar has been used to express structural relationships, in many applications there are operations which act at a &apos;meta level&apos; on the structures expressed by the grammar: for example, lifting rules on a dependency grammar to achieve pseudo-projectivity (Kahane et al, 1998), and mapping between synchronised Tree Adjoining Grammars (TAGs) (Shieber and Schabes, 1990; Shieber 1994) as in machine translation or syntax-to-semantics transfer. At this meta level, however, the operations do not themselves exploit any structure. This paper explores how, in the TAG case, using a meta-level grammar to define meta-level structure resolves the flaws in the ability of Synchronous TAG (S-TAG) to be a representation for applications such as machine translation or paraphrase. This paper is set out as follows. It describes the expressivity problems of S-TAG as noted in Shieber (1994), and shows how these occur also in syntactic paraphrasing. It then demonstrates, illustrated by the re</context>
<context position="5770" citStr="Shieber (1994)" startWordPosition="943" endWordPosition="944">n trees, respectively, for Figure 1 tion tree would be as in Figure 2.2 Weir (1988) terms the derived tree, and its component elementary trees, OBJECT-LEVEL TREES; the derivation tree is termed a METALEVEL TREE, since it describes the object-level trees. The derivation trees are context free (Weir, 1988), that is, they can be expressed by a CFG; Weir showed that applying a TAG yield function to a context free derivation tree (that is, reading the labels off the tree, and substituting or adjoining the corresponding objectlevel trees as appropriate) will uniquely specify a TAG tree. Schabes and Shieber (1994) characterise this as a function D from derivation trees to derived trees. The idea behind S-TAG is to take two TAGs and link them in an appropriate way so that when substitution or adjunction occurs in a tree in one grammar, then a corresponding composition operation occurs in a tree in the other grammar. Because of the way TAG&apos;s EDL captures dependencies, it is not problematic to have translations more complex than word-for-word mappings (Abeille et al, 1990). For example, from the Abeille et al paper, handling argument swap, as in (1), is straightforward. These would be represented by tree </context>
<context position="7660" citStr="Shieber, 1994" startWordPosition="1280" endWordPosition="1281">er tree of the same tree pair. Thus if the tree for John in a7 is substituted at 111 in the left tree of a6, the tree for Jean must be substituted at in the right tree. The diacritic F31 allows a sentential modifier for both trees (e.g. unfortunately I malheureusement). The original definition of S-TAG (Shieber and Schabes, 1990), however, had a greater generative capacity than that of its component TAG grammars: even though each component grammar could only generate Tree Adjoining Languages (TALs), an S-TAG pairing two TAG grammars could generate non-TALs. Hence, a redefinition was proposed (Shieber, 1994). Under this new definition, the mapping between grammars occurs at the meta level: there is an isomorphism between derivation trees, preserving structure at the meta level, which establishes the translation. For example, the derivation trees for (1) using the elementary trees of Figure 3 is given in Figure 4; there is a clear isomorphism, with a bijection between nodes, and parent-child relationships preserved in the mapping. In translation, it is not always possible to have a bijection between nodes. Take, for example, (2). Figure 4: Derivation tree pair for Fig 3 (2) a. Hopefully John misse</context>
<context position="15311" citStr="Shieber (1994)" startWordPosition="2574" endWordPosition="2575"> this example, that the referring expression is fixed and given, as is the case with it, rather than determined by coindexed diacritics. SMP at this meta level: in an isomorphism between trees in Figure 8, it is necessary to regard the SMP components of each tree as a unitary substructure and map them to each other. The discontinuous groupings should form these substructures regardless of intervening material, and this is suggestive of TAG&apos;s EDL. In the TAG definition, the derivation trees are context free (Weir, 1988), and can be expressed by a CFG. The isomorphism in the S-TAG definition of Shieber (1994) reflects this, by effectively adopting the single-level domain of locality (extended slightly in cases of bounded subderivation, but still effectively a single level), in the way that context free trees are fundamentally made from single level components and grown by concatenation of these single levels. This is what causes the isomorphism requirement to fail, the inability to express substructures at the meta level in order to map between them, rather than just mapping between (effec84 anx0Axl weed] anx0A2511tweed] aNXdxN (jacket] f/Vvx[is] aNXdxN [jacket] fArvx[is] f3sPLis[.] - - aDXD[the] </context>
<context position="22244" citStr="Shieber (1994)" startWordPosition="3701" endWordPosition="3702">led trees (object-level auxiliary trees), while their spines consist only of 13-labelled trees (object-level initial trees). Since the meta-level grammar is context free, despite being expressed using a TAG grammar, this means that the object-level grammar is still 86 a TAG. 6 Conclusion In principle, a meta-grammar is desirable, as it specifies substructures at a meta level, which is necessary when operations are carried out that are applied at this meta level. In a practical application, it solves problems in one such formalism, S-TAG, when used for paraphrase or translation, as outlined by Shieber (1994). Moreover, the formalism remains fundamentally the same, in specifying mappings between two grammars of restricted generative capacity; and in cases where this is important, it is possible to avoid changing the generative capacity of the S-TAG formalism in applying this meta-grammar Currently this revised version of the S-TAG formalism is used as the low-level representation in the Reluctant Paraphrasing framework of Dras (1998; forthcoming). It is likely to also be useful in representations for machine translation between languages that are structurally more dissimilar than English and Frenc</context>
</contexts>
<marker>Shieber, 1994</marker>
<rawString>Shieber, Stuart. 1994. Restricting the WeakGenerative Capacity of Synchronous Tree-Adjoining Grammars. Computational Intelligence, 10(4), 371-386.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David Weir</author>
</authors>
<title>Characterizing Mildly ContextSensitive Grammar Formalisms.</title>
<date>1988</date>
<tech>PhD thesis,</tech>
<institution>University of Pennsylvania.</institution>
<contexts>
<context position="5239" citStr="Weir (1988)" startWordPosition="856" endWordPosition="857">rd of its own derivation. In CFG, each tree given as a structural description to a string enables the rules applied to be recovered. In a TAG, this is not possible, so each derived tree has an associated derivation tree. If the trees in Figure 1 were composed to give a structural description for Garrad cunningly defeated the Sumerians, the derived tree and its corresponding deriva&apos;The figures use standard TAG notation: 4. for nodes requiring substitution, * for foot nodes of auxiliary trees. Figure 2: Derived and derivation trees, respectively, for Figure 1 tion tree would be as in Figure 2.2 Weir (1988) terms the derived tree, and its component elementary trees, OBJECT-LEVEL TREES; the derivation tree is termed a METALEVEL TREE, since it describes the object-level trees. The derivation trees are context free (Weir, 1988), that is, they can be expressed by a CFG; Weir showed that applying a TAG yield function to a context free derivation tree (that is, reading the labels off the tree, and substituting or adjoining the corresponding objectlevel trees as appropriate) will uniquely specify a TAG tree. Schabes and Shieber (1994) characterise this as a function D from derivation trees to derived t</context>
<context position="15221" citStr="Weir, 1988" startWordPosition="2557" endWordPosition="2558"> to the one discussed in this paper; see Dras (forthcoming). Assume, for the purpose of this example, that the referring expression is fixed and given, as is the case with it, rather than determined by coindexed diacritics. SMP at this meta level: in an isomorphism between trees in Figure 8, it is necessary to regard the SMP components of each tree as a unitary substructure and map them to each other. The discontinuous groupings should form these substructures regardless of intervening material, and this is suggestive of TAG&apos;s EDL. In the TAG definition, the derivation trees are context free (Weir, 1988), and can be expressed by a CFG. The isomorphism in the S-TAG definition of Shieber (1994) reflects this, by effectively adopting the single-level domain of locality (extended slightly in cases of bounded subderivation, but still effectively a single level), in the way that context free trees are fundamentally made from single level components and grown by concatenation of these single levels. This is what causes the isomorphism requirement to fail, the inability to express substructures at the meta level in order to map between them, rather than just mapping between (effec84 anx0Axl weed] anx</context>
<context position="16614" citStr="Weir (1988)" startWordPosition="2766" endWordPosition="2767"> anx0Vnx1[covered] _ aNXN[it] allXdx.N[floorl PCOMPs[which] aNXdxN[dust] oDX1.1. [the] _ a DXD[thel fiNOrix0Vnxlicovered] PCOMPs[which] aNXdx.N [floor] 1 aDXD[t he] Figure 8: Derivation tree for example (5) tively) single nodes. To solve the problem with isomorphism, a metalevel grammar can be defined to specify the necessary substructures prior to mapping, with minimality conditions on what can be considered acceptable discontinuity. Specifically, in this case, a TAG meta-level grammar can be defined, rather than the implicit CFG, because this captures the EDL well. The TAG yield function of Weir (1988) can then be applied to these derivation trees to get derived trees. This, of course, raises questions about effects on generative capacity and other properties; these are dealt with in Section 5. A procedure for automatically constructing a TAG meta-grammar is as follows in Construction 1. The basic idea is that where the node bijection is still appropriate, the grammar retains its context free nature (by using singlelevel TAG trees composed by substitution, mimicking CFG tree concatenation), but where EDL is required, multi-level TAG initial trees are defined, with TAG auxiliary trees for de</context>
<context position="20582" citStr="Weir (1988)" startWordPosition="3420" endWordPosition="3421">ed in a-labelled nodes, and have only 0-labelled nodes along the spine. The intuition here is that slots (the nodes which meta-level auxiliary trees adjoin into) must be a-labelled: 0-labelled trees would not need slots, as the substructure could instead be continuous and the 0-labelled trees would just adjoin in. So the meta-level auxiliary trees are rooted in a-labelled trees; but they have only /3- labelled trees in the spine, as they aim to represent the minimal amount of recursive material. Notwithstanding these conditions, the construction is quite straightforward. 5 Generative Capacity Weir (1988) showed that there is an infinite progression of TAG-related formalisms, in generative capacity between CFGs and indexed grammars. A formalism J in the progression is defined by applying the TAG yield function to a derivation tree defined by a grammar formalism the generative capacity of J is a superset of Thus using a TAG meta-grammar, as described in Section 4, would suggest that the generative capacity of the object-level formalism would necessarily have been increased over that of TAG. However, there is a regular form for TAGs (Rogers, 1994), such that the trees of TAGs in this regular for</context>
</contexts>
<marker>Weir, 1988</marker>
<rawString>Weir, David. 1988. Characterizing Mildly ContextSensitive Grammar Formalisms. PhD thesis, University of Pennsylvania.</rawString>
</citation>
<citation valid="true">
<authors>
<author>XTAG</author>
</authors>
<title>A Lexicalized Tree Adjoining Grammar for English.</title>
<date>1995</date>
<tech>Technical Report IRCS95-03,</tech>
<institution>University of Pennsylvania.</institution>
<contexts>
<context position="2677" citStr="XTAG, 1995" startWordPosition="418" endWordPosition="419">ows that this has no effect on the generative capacity of S-TAG. 2 S-TAG and Machine Translation Synchronous TAG, the mapping between two Tree Adjoining Grammars, was first proposed by Shieber and Schabes (1990). An application proposed concurrently with the definition of S-TAG was that of machine translation, mapping between English and French (Abeille et al, 1990); work continues in the area, for example using S-TAG for English-Korean machine translation in a practical system (Palmer et al, 1998). In mapping between, say, English and French, there is a lexicalised TAG for each language (see XTAG, 1995, for an overview of such a grammar). Under the definition of TAG, a grammar contains elementary trees, rather than flat rules, which combine together via the operations of substitution and adjunction (composition operations) to form composite structures—derived trees—which will ultimately provide structural representations for an input string if this string is grammatical. An overview of TAGs is given in Joshi and Schabes (1996). The characteristics of TAGs make them better suited to describing natural language than Context Free Grammars (CFGs): CFGs are not adequate to describe the entire sy</context>
<context position="11175" citStr="XTAG, 1995" startWordPosition="1863" endWordPosition="1864">could represent the elements in the mapping between (4a) and (413) are given in Figure 6. It is clearly the case that the trees in the tree pair a9 are not elementary trees, in the same way that on espere que is not represented by a single elementary tree: in both cases, such single elementary trees would violate the Condition on Elementary Tree Minimality (Frank, 1992). The tree pair a9 is the one that captures the syntactic rearrangement in this paraphrase; such a tree pair will be termed the STRUCTURAL MAPPING PAIR (SMP). Taking as a basic set of trees the XTAG standard grammar of English (XTAG, 1995), the derivation tree pair for (4) would be as in Figure 7.3 Apart from a9, each tree in Figure 6 corresponds to an elementary object-level tree, as indicated by its label; the remaining labels, indicated in bold in the metalevet derivation tree in Figure 7, correspond to the elementary object-level trees forming a9, in much the same way that on espere que is represented by a subderivation comprising an on tree substituted into an espere que tree. Note that the nodes corresponding to the left tree of the SMP form two discontinuous groups, but these discontinuous groups are clearly related. Dra</context>
<context position="13025" citStr="XTAG (1995)" startWordPosition="2170" endWordPosition="2171">ulty as the clitic example in (3) when represented in S-TAG: because unbounded intervening material can occur when promoting arbitrarily deeply embedded relative clauses to sentence level, as indicated by Figure 8, an isomorphism is not possible between derivation trees representing paraphrases such as (4) and (5). Again, the component trees of the SMP are in bold in Figure 8. (5) a. The jacket which collected the dust which covered the floor was tweed. b. The jacket which collected the dust 3Node labels, the object-level tree names, are given according to the XTAG standard: see Appendix B of XTAG (1995). This is done so that the component trees of the aggregate a9 and their types are obvious. The lexical item to which each is bound is given in square brackets, to make the trees, and the correspondence between for example Figure 6 and Figure 7, clearer. 83 NP NPo El ae. Comp which NP VP 1 V NI., 1 collected VP V VP 1 is V AdjP I I Adj tweed NP VP 1 it V VP is V AdjP I I e Adj 1 tweed NP0111 VP collected Punct NP NP ( Det Det NP NP N Det N the 012: Detl, N Det N jacket jacket the dust dust Figure 6: S-TAG for (4) anx0Ax1[tweed] - aNXdxN[jacket] ,f3Vvx[was] _ - - - aDXD[the] /3NOnx0Vnxl[collect</context>
</contexts>
<marker>XTAG, 1995</marker>
<rawString>XTAG. 1995. A Lexicalized Tree Adjoining Grammar for English. Technical Report IRCS95-03, University of Pennsylvania.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>