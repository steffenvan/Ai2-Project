<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.074407">
<title confidence="0.9995215">
A Framework for Customizable Generation of Hypertext
Presentations
</title>
<author confidence="0.983499">
Benoit Lavoie and Owen Rambow
</author>
<affiliation confidence="0.937899">
CoGenTex, Inc.
</affiliation>
<address confidence="0.97644">
840 Hanshaw Road, Ithaca, NY 14850, USA
</address>
<email confidence="0.995776">
benoit, owen@cogentex.corn
</email>
<sectionHeader confidence="0.993806" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999794416666667">
In this paper, we present a framework, PRE-
SENTOR, for the development and customiza-
tion of hypertext presentation generators. PRE-
SENTOR offers intuitive and powerful declarative
languages specifying the presentation at differ-
ent levels: macro-planning, micro-planning, re-
alization, and formatting. PRESENTOR is im-
plemented and is portable cross-platform and
cross-domain. It has been used with success in
several application domains including weather
forecasting, object modeling, system descrip-
tion and requirements summarization.
</bodyText>
<sectionHeader confidence="0.998799" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999851194444445">
Presenting information through text and hyper-
text has become a major area of research and
development. Complex systems must often deal
with a rapidly growing amount of information.
In this context, there is a need for presenta-
tion techniques facilitating a rapid development
and customization of the presentations accord-
ing to particular standards or preferences. Typ-
ically, the overall task of generating a presen-
tation is decomposed into several subtasks in-
cluding: macro-planning or text planning (de-
termining output content and structure), micro-
planning or sentence planning (determining ab-
stract target language resources to express con-
tent, such as lexical items and syntactic con-
structions and aggregating the representations),
realization (producing the text string) and for-
matting (determining the formatting marks to
insert in the text string). Developing an appli-
cation to present the information for a given
domain is often a time-consuming operation
requiring the implementation from scratch of
domain communication knowledge (Kittredge
et al., 1991) required for the different genera-
tion subtasks. In this technical note and demo
we present a new presentation framework, PRE-
SENTOR, whose main purpose is to facilitate the
development of presentation applications. PRE-
SENTOR has been used with success in differ-
ent domains including object model description
(Lavoie et al., 1997), weather forecasting (Kit-
tredge and Lavoie, 1998) and system require-
ments summarization (Ehrhart et al., 1998;
Barzilay et al., 1998). PRESENTOR has the
following characteristics, which we believe are
unique in this combination:
</bodyText>
<listItem confidence="0.975861454545454">
• PRESENTOR modules are implemented in
Java and C++. It is therefore easily portable
cross-platform.
• PRESENTOR modules use declarative knowl-
edge interpreted at run-time which can be cus-
tomized by non-programmers without changing
the modules.
• PRESENTOR uses rich presentation plans (or
exemplars) (Rambow et al., 1998) which can be
used to specify the presentation at different lev-
els of abstraction (rhetorical, conceptual, syn-
</listItem>
<bodyText confidence="0.958305375">
tactic, and surface form) and which can be used
for deep or shallow generation.
In Section 2, we describe the overall architec-
ture of PRESENTOR. In Section 3 to Section 6,
we present the different specifications used to
define domain communication knowledge and
linguistic knowledge. Finally, in Section 7, we
describe the outlook for PRESENTOR.
</bodyText>
<sectionHeader confidence="0.905668" genericHeader="method">
2 PRESENTOR Architecture
</sectionHeader>
<bodyText confidence="0.996224375">
The architecture of PRESENTOR illustrated in
Figure 1 consists of a core generator with sev-
eral associated knowledge bases. The core gen-
erator has a pipeline architecture which is sim-
ilar to many existing systems (Reiter, 1994):
an incoming request is received by the genera-
tor interface triggering sequentially the macro-
planning, micro-planning, realization and fi-
</bodyText>
<page confidence="0.996442">
718
</page>
<figureCaption confidence="0.999963">
Figure 1: Architecture of PRESENTOR
</figureCaption>
<bodyText confidence="0.99969484">
nally the formatting of a presentation which is
then returned by the system. This pipeline ar-
chitecture minimizes the interdependencies be-
tween the different modules facilitating the up-
grade of each module with minimal impact on
the overall system. It has been proposed that a
pipeline architecture is not an adequate model
for NLG (Rubinoff, 1992). However, we are not
aware of any example from practical applica-
tions that could not be implemented with this
architecture. One of the innovations of PRE-
SENTOR is in the use of a common presenta-
tion structure which facilitates the integration
of the processing by the different modules. The
macro-planner creates a structure and the other
components add to it.
All modules use declarative knowledge bases
distinguished from the generator engine. This
facilitates the reuse of the framework for new
application domains with minimal impact on
the modules composing the generator. As a re-
sult, PRESENTOR can allow non-programmers
to develop their own generator applications.
Specifically, PRESENTOR uses the following
types of knowledge bases:
</bodyText>
<listItem confidence="0.998658695652174">
• Environment variables: an open list of vari-
ables with corresponding values used to specify
the configuration.
• Exemplars: a library of schema-like struc-
tures (McKeown, 1985; Rambow and Korelsky,
1992) specifying the presentation to be gener-
ated at different levels of abstraction (rhetori-
cal, conceptual, syntactic, surface form).
• Rhetorical dictionary: a knowledge base in-
dicating how to realize rhetorical relations lin-
guistically.
• Conceptual dictionary: a knowledge base
used to map language-independent conceptual
structures to language-specific syntactic struc-
tures.
• Linguistic grammar transformation rules
specifying the transformation of syntactic struc-
tures into surface word forms and punctuation
marks.
• Lexicon: a knowledge base containing the
syntactic and morphological attributes of lex-
emes.
• Format style: formatting specifications as-
</listItem>
<bodyText confidence="0.959724428571428">
sociated with different elements of the presen-
tation (not yet implemented).
As an example, let us consider a simple case
illustrated in Figure 2 taken from a design sum-
marization domain. Hyperlinks integrated in
the presentation allow the user to obtain ad-
ditional generated presentations.
</bodyText>
<figureCaption confidence="0.999037">
Figure 2: Presentation Sample
</figureCaption>
<bodyText confidence="0.999495">
The next sections present the different types
of knowledge used by PRESENTOR to define and
construct the presentation of Figure 2.
</bodyText>
<sectionHeader confidence="0.995473" genericHeader="method">
3 Exemplar Library
</sectionHeader>
<bodyText confidence="0.999846538461538">
An exemplar (Rambow et al., 1998; White and
Caldwell, 1998) is a type of schema (McKeown,
1985; Rambow and Korelsky, 1992) whose pur-
pose is to determine, for a given presentation
request, the general specification of the presen-
tation regarding its macro-structure, its con-
tent and its format. One main distinction be-
tween the exemplars of PRESENTOR and ordi-
nary schemas is that they integrate conceptual,
syntactic and surface form specifications of the
content, and can be used for both deep and shal-
low generation, and combining both generality
and simplicity. An exemplar can contain dif-
</bodyText>
<figure confidence="0.997513709677419">
Configurable Know edge
_ Exemplar
Library
_&gt;
Rhetorical
• Dictionary
tConceptualj
Dictionary
Linguistic
Grammar
Format Styl.
Domain Data
Core Generator
Macro-Planner
Micro-Planner
Realizer
(Realpro)
_o
8
- Formatter
•:*
Data Base
Project ProjAF-2
System DBSys
Site Ramstein
Host Gauss
Soft FDBMgr
Site Syngapour
Host Jakarta
Soft FDBC1t
Description of FDBMgr
</figure>
<figureCaption confidence="0.9452024">
FDBMgr is a software component
which is deployed on host Gauss.
FDBMgr tuns as is a server and a
daemon and is written in C(ANSI)
and JAVA.
</figureCaption>
<figure confidence="0.7704775">
Request
Presentation
</figure>
<page confidence="0.989861">
719
</page>
<bodyText confidence="0.991582">
ferent type of specifications, each of which is
optional except for the name of the exemplar:
</bodyText>
<listItem confidence="0.99903615625">
• Name: Specification of the name of the ex-
emplar.
• Parameters: Specification of the arguments
passed in parameters when the exemplar is
called.
• Conditions of evaluation: Specification of
the conditions under which the exemplar can
be evaluated.
• Data: Specification of domain data instan-
tiated at run-time.
• Constituency: Specification of the presenta-
tion constituency by references to other exem-
plars.
• Rhetorical dependencies: Specification of
the rhetorical relations between constituents.
• Features specification: Open list of features
(names and values) associated with an element
of presentation. These features can be used in
other knowledge bases such as grammar, lexi-
con, etc.
• Formatting specification: Specification of
HTML tags associated with the presentation
structure constructed from the exemplar.
• Conceptual content specification: Specifica-
tion of content at the conceptual level.
• Syntactic content specification: Specifica-
tion of content at the lexico-syntactic level.
• Surface form content specification: Specifi-
cation of the content (any level of granularity)
at the surface level.
• Documentation: Documentation of the ex-
emplar for maintenance purposes.
</listItem>
<bodyText confidence="0.9960052">
Once defined, exemplars can be clustered into
reusable libraries.
Figure 3 illustrates an exemplar, soft-
description, to generate the textual descrip-
tion of Figure 2, Here, the description for a
given object $SOFT, referring to a piece of soft-
ware, is decomposed into seven constituents to
introduce a title, two paragraph breaks, and
some specifications for the software type, its
host(s), its usage(s) and its implementation lan-
guage(s). In this specification, all the con-
stituents are evaluated. The result of this
evaluation creates seven presentation segments
added as constituents (daughters) to the cur-
rent growth point in the presentation structure
being generated. Referential identifiers (ref 1,
ref2, ref4) assigned to some constituents
are also being used to specify a rhetorical rela-
tion of elaboration and to specify syntactic con-
junction.
</bodyText>
<figure confidence="0.986206642857143">
Exemplar:
Name: soft-description
Param: C $SOFT
Const: [AND
( title ( $SOFT )
paragraph-break ( )
object-type ( $SOFT ) : refl
soft-host ( $SOFT ) : ref2
paragraph-break ( )
soft-usage ( $SOFT ) : ref3
soft-language ( $SOFT ) ref4
Rhet: ( ( refl ft-ELABORATION ref2 )
( ref3 CONJUNCTION ref4 ) ]
Desc: [ Describe the software ]
</figure>
<figureCaption confidence="0.999845">
Figure 3: Exemplar for Software Description
</figureCaption>
<bodyText confidence="0.979230285714286">
Figure 4 illustrates an exemplar specifying
the conceptual specification of an object type.
The notational convention used in this paper is
to represent variables with labels preceded by
a sign, the concepts are upper case English
labels preceded by a # sign, and conceptual re-
lations are lower case English labels preceded
by a # sign. In Figure 4 the conceptual content
specification is used to built a conceptual tree
structure indicating the state concept #HAS-
TYPE has as an object $OBJECT which is
of type $TYPE. This variable is initialized by
a call to the function ikrs.getData( $OBJECT
#type ) defined for the application domain.
</bodyText>
<figure confidence="0.834618666666667">
Exemplar:
Name: object-type
Param: $OBJECT ]
Var: $TYPE = ikrs.getData( $OBJECT *type ) ]
Concept: (
*HAS-TYPE (
*object $OBJECT
*type $TYPE
Desc: ( Describe the object type
</figure>
<figureCaption confidence="0.996154">
Figure 4: Exemplar for Object Type
</figureCaption>
<sectionHeader confidence="0.9877" genericHeader="method">
4 Conceptual Dictionary
</sectionHeader>
<bodyText confidence="0.932574">
PRESENTOR uses a conceptual dictionary for
the mapping of conceptual domain-specific rep-
</bodyText>
<page confidence="0.987918">
720
</page>
<bodyText confidence="0.999821722222222">
resentations to linguistic domain-indepenent
representations. This mapping (transition) has
the advantage that the modules processing
conceptual representations can be unabashedly
domain-specific, which is necessary in applica-
tions, since a broad-coverage implementation of
a domain-independent theory of conceptual rep-
resentations and their mapping to linguistic rep-
resentations is still far from being realistic.
Linguistic representations found in the con-
ceptual dictionary are deep-syntactic structures
(DSyntSs) which are conform to those that
REALPRO (Lavoie and Rambow, 1997), PRE-
SENTOR&apos;s sentence realizer, takes as input. The
main characteristics of a deep-syntactic struc-
ture, inspired in this form by I. Mel&apos;euk&apos;s
Meaning-Text Theory (Mel&apos;euk, 1988), are the
following:
</bodyText>
<listItem confidence="0.978755153846154">
• The DSyntS is an unordered dependency
tree with labeled nodes and labeled arcs.
• The DSyntS is lesicalized, meaning that
the nodes are labeled with lexemes (uninflected
words) from the target language.
• The DSyntS is a syntactic representation,
meaning that the arcs of the tree are labeled
with syntactic relations such as &amp;quot;subject&amp;quot; (rep-
resented in DSyntSs as I), rather than concep-
tual or semantic relations such as &amp;quot;agent&amp;quot;.
• The DSyntS is a deep syntactic represen-
tation, meaning that only meaning-bearing lex-
emes are represented, and not function words.
</listItem>
<bodyText confidence="0.996361954545455">
Conceptual representations (ConcSs) used by
PRESENTOR are inspired by the characteristics
of the DSyntSs in the sense that both types
of representations are unordered tree structures
with labelled arcs specifying the roles (concep-
tual or syntactic) of each node. However, in
a ConcS, concepts are used instead of lexemes,
and conceptual relations are used instead of re-
lations. The similairies of the representions for
the ConcSs and DSyntSs facilitate their map-
ping and the sharing of the functions that pro-
cess them.
Figure 5 illustrates a simple case of lexicaliza-
tion for the state concept #HAS-TYPE intro-
duced in the exemplar defined in Figure 4. If the
goal is a sentence, BE1 is used with $OBJECT
as its first (I) syntactic actant and $TYPE as
its second (II). If the goal is a noun phrase,
a complex noun phrase is used (e.g., software
component FDBMgr). The lexicalization can be
controlled by the user by modifying the appro-
priate lexical entries.
</bodyText>
<figure confidence="0.964930928571429">
Lexicalization-rule:
Concept: *HAS-TYPE
Cases: [ Case:
WAS-TYPE (*object $OBJ
*type $TYPE)] I [goal:S]
&lt;--&gt;
BE1 ( I $OBJ
II $TYPE ) I C]
Case:
[*HAS-TYPE (*object $OBJ
*type $TYPE)] 1 [goal:NP]
&lt;--&gt;
[ $TYPE ( APPEND $OBJECT ) ] I ]
3
</figure>
<figureCaption confidence="0.998883">
Figure 5: Conceptual Dictionary Entry
</figureCaption>
<sectionHeader confidence="0.975312" genericHeader="method">
5 Rhetorical Dictionary
</sectionHeader>
<bodyText confidence="0.998839444444444">
PRESENTOR uses a rhetorical dictionary to in-
dicate how to express the rhetorical relations
connecting clauses using syntax and/or lexical
means (cue words). Figure 6 shows a rule used
to combine clauses linked by an elaboration re-
lationship. This rule combines clauses FDBMgr
is a software component and FDBMgr is de-
ployed on host Gauss into FDBMgr is a software
component which is deployed on host Gauss.
</bodyText>
<figure confidence="0.9820726">
Rhetorical-rule:
Relation: R-ELABORATION
Cases: [
Case:
[ R-ELABORATION
( nucleus $V ( I $X II $Y )
satellite $Z ( I $X ) ]
&lt;--&gt;
$V ( I $X II $Y ( ATTR $Z )
3
</figure>
<figureCaption confidence="0.999087">
Figure 6: Rhetorical Dictionary Entry
</figureCaption>
<sectionHeader confidence="0.976199" genericHeader="evaluation">
6 Lexicon and Linguistic Grammar
</sectionHeader>
<bodyText confidence="0.999676833333333">
The lexicon defines different linguistic charac-
teristics of lexemes such as their categories, gov-
ernment patterns, morphology, etc., and which
are used for the realization process. The lin-
guistic grammars of PRESENTOR are used to
transform a deep-syntactic representation into
</bodyText>
<page confidence="0.991551">
721
</page>
<bodyText confidence="0.999849333333333">
a linearized list of all the lexemes and punctu-
ation marks composing a sentence. The format
of the declarative lexicon and of the grammar
rules is that of the REALPRO realizer, which we
discussed in (Lavoie and Rambow, 1997). We
omit further discussion here.
</bodyText>
<sectionHeader confidence="0.997172" genericHeader="conclusions">
7 Status
</sectionHeader>
<bodyText confidence="0.999976592592593">
PRESENTOR is currently implemented in Java
and C++, and has been used with success in
projects in different domains. We intend to add
a declarative specification of formatting style in
the near future.
A serious limitation of the current implemen-
tation is the fact that the configurability of
PRESENTOR at the micro-planning level is re-
stricted to the lexicalization and the linguistic
realization of rhetorical relations. Pronominal-
ization rules remain hard-coded heuristics in the
micro-planner but can be guided by features
introduced in the presentation representations.
This is problematic since pronominalization is
often domain specific and may require changing
the heuristics when porting a system to a new
domain.
CoGenTex has developed a complementary
alternative to PRESENTOR, EXEMPLARS (White
and Caldwell, 1998) which gives a better pro-
grammatic control to the processing of the rep-
resentations that PRESENTOR does. While EX-
EMPLARS focuses on programmatic extensibil-
ity, PRESENTOR focus on declarative represen-
tation specification. Both approaches are com-
plementary and work is currently being done in
order to integrate their features.
</bodyText>
<sectionHeader confidence="0.997487" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.999832222222222">
The work reported in this paper was partially
funded by AFRL under contract F30602-92-C-
0015 and SBIR F30602-92-C-0124, and by US-
AFMC under contract F30602-96-C-0076. We
are thankful to R. Barzilay, T. Caldwell, J. De-
Cristofaro, It. Kittredge, T. Korelsky, D. Mc-
Cullough, and M. White for their comments and
criticism made during the development of PRE-
SENTOR.
</bodyText>
<sectionHeader confidence="0.999259" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.9995265">
Barzilay, R., Rambow, 0., McCullough, D, Korel-
sky, T., and Lavoie, B. (1998). DesignExpert:
A Knowledge-Based Tool for Developing System-
Wide Properties, In Proceedings of the 9th Inter-
national Workshop on Natural Language Genera-
tion, Ontario, Canada.
Ehrhart, L., Rambow, 0., Webber F., McEnerney,
J., and Korelsky, T. (1998) DesignExpert: Devel-
oping System-Wide Properties with Knowledge-
Based Tools. Lee Scott Ehrhart, Submitted.
Kittredge, R. and Lavoie, B. (1998). MeteoCo-
gent: A Knowledge-Based Tool For Generating
Weather Forecast Texts, In Proceedings of Amer-
ican Meteorological Society Al Conference (AMS-
98), Phoenix, AZ.
Kittredge, R., Korelsky, T. and Rambow, R. (1991).
On the Need for Domain Communication Knowl-
edge, in Computational Intelligence, Vol 7, No
4.
Lavoie, B., Rambow, 0., and Reiter, E. (1997). Cus-
tomizable Descriptions of Object-Oriented Mod-
els, In Proceedings of the Conference on Applied
Natural Language Processing (ANLP&apos;97), Wash-
ington, DC.
Lavoie, B. and Rambow, 0. (1997). RealPro - A
Fast, Portable Sentence Realizer, In Proceedings
of the Conference on Applied Natural Language
Processing (ANLP&apos;97), Washington, DC.
Mann, W. and Thompson, S. (1987). Rhetorical
Structure Theory: A Theory of Text Organization,
ISI technical report RS-87-190.
McKeown, K. (1985). Text Generation, Cambridge
University Press.
Mel&apos;euk, I. A. (1988). Dependency Syntax: Theory
and Practice. State University of New York Press,
New York.
Rambow, 0., Caldwell, D. E., Lavoie, B., McCul-
lough, D., and White, M. (1998). Text Planning:
Communicative Intentions and the Conventional-
ity of Linguistic Communication. In preparation.
Rambow, 0. and Korelsky, T. (1992). Applied Text
Generation, In Third Conference on Applied Nat-
ural Language Processing, pages 40-47, Trento,
Italy.
Reiter, E. (1994). Has a Consensus NL Generation
Architecture Appeared, and is it Psycholinguisti-
cally Plausible? In Proceedings of the 7th Inter-
national Workshop on Natural Language Genera-
tion, pages 163-170, Maine.
Rubinoff, R. (1992). Integrating Text Planning and
Linguistic Choice by Annotating Linguistic Struc-
tures, In Aspects of Automated Natural Language
Generation, pages 45-56, Trento, Italy.
White, M. and Caldwell, D. E. (1998). EXEM-
PLARS: A Practical Exensible Framework for
Real-Time Text Generation, In Proceedings of the
9th International Workshop on Natural Language
Generation, Ontario, Canada.
</reference>
<page confidence="0.997068">
722
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.793862">
<title confidence="0.99643">A Framework for Customizable Generation of Hypertext Presentations</title>
<author confidence="0.955358">Lavoie Rambow</author>
<affiliation confidence="0.99093">CoGenTex, Inc.</affiliation>
<address confidence="0.999971">840 Hanshaw Road, Ithaca, NY 14850, USA</address>
<email confidence="0.923577">benoit,owen@cogentex.corn</email>
<abstract confidence="0.993052307692308">In this paper, we present a framework, PRE- SENTOR, for the development and customization of hypertext presentation generators. PRE- SENTOR offers intuitive and powerful declarative languages specifying the presentation at different levels: macro-planning, micro-planning, realization, and formatting. PRESENTOR is implemented and is portable cross-platform and cross-domain. It has been used with success in several application domains including weather forecasting, object modeling, system description and requirements summarization.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>D McCullough</author>
<author>T Korelsky</author>
<author>B Lavoie</author>
</authors>
<title>DesignExpert: A Knowledge-Based Tool for Developing SystemWide Properties,</title>
<date>1998</date>
<booktitle>In Proceedings of the 9th International Workshop on Natural Language Generation,</booktitle>
<location>Ontario, Canada.</location>
<marker>McCullough, Korelsky, Lavoie, 1998</marker>
<rawString>Barzilay, R., Rambow, 0., McCullough, D, Korelsky, T., and Lavoie, B. (1998). DesignExpert: A Knowledge-Based Tool for Developing SystemWide Properties, In Proceedings of the 9th International Workshop on Natural Language Generation, Ontario, Canada.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F Webber</author>
<author>J McEnerney</author>
<author>T Korelsky</author>
</authors>
<title>DesignExpert: Developing System-Wide Properties with KnowledgeBased Tools.</title>
<date>1998</date>
<location>Lee Scott Ehrhart, Submitted.</location>
<marker>Webber, McEnerney, Korelsky, 1998</marker>
<rawString>Ehrhart, L., Rambow, 0., Webber F., McEnerney, J., and Korelsky, T. (1998) DesignExpert: Developing System-Wide Properties with KnowledgeBased Tools. Lee Scott Ehrhart, Submitted.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Kittredge</author>
<author>B Lavoie</author>
</authors>
<title>MeteoCogent: A Knowledge-Based Tool For Generating Weather Forecast Texts,</title>
<date>1998</date>
<booktitle>In Proceedings of American Meteorological Society Al Conference (AMS98),</booktitle>
<location>Phoenix, AZ.</location>
<contexts>
<context position="2177" citStr="Kittredge and Lavoie, 1998" startWordPosition="308" endWordPosition="312">ng marks to insert in the text string). Developing an application to present the information for a given domain is often a time-consuming operation requiring the implementation from scratch of domain communication knowledge (Kittredge et al., 1991) required for the different generation subtasks. In this technical note and demo we present a new presentation framework, PRESENTOR, whose main purpose is to facilitate the development of presentation applications. PRESENTOR has been used with success in different domains including object model description (Lavoie et al., 1997), weather forecasting (Kittredge and Lavoie, 1998) and system requirements summarization (Ehrhart et al., 1998; Barzilay et al., 1998). PRESENTOR has the following characteristics, which we believe are unique in this combination: • PRESENTOR modules are implemented in Java and C++. It is therefore easily portable cross-platform. • PRESENTOR modules use declarative knowledge interpreted at run-time which can be customized by non-programmers without changing the modules. • PRESENTOR uses rich presentation plans (or exemplars) (Rambow et al., 1998) which can be used to specify the presentation at different levels of abstraction (rhetorical, conc</context>
</contexts>
<marker>Kittredge, Lavoie, 1998</marker>
<rawString>Kittredge, R. and Lavoie, B. (1998). MeteoCogent: A Knowledge-Based Tool For Generating Weather Forecast Texts, In Proceedings of American Meteorological Society Al Conference (AMS98), Phoenix, AZ.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Kittredge</author>
<author>T Korelsky</author>
<author>R Rambow</author>
</authors>
<title>On the Need for Domain Communication Knowledge,</title>
<date>1991</date>
<journal>in Computational Intelligence,</journal>
<volume>7</volume>
<contexts>
<context position="1798" citStr="Kittredge et al., 1991" startWordPosition="251" endWordPosition="254">several subtasks including: macro-planning or text planning (determining output content and structure), microplanning or sentence planning (determining abstract target language resources to express content, such as lexical items and syntactic constructions and aggregating the representations), realization (producing the text string) and formatting (determining the formatting marks to insert in the text string). Developing an application to present the information for a given domain is often a time-consuming operation requiring the implementation from scratch of domain communication knowledge (Kittredge et al., 1991) required for the different generation subtasks. In this technical note and demo we present a new presentation framework, PRESENTOR, whose main purpose is to facilitate the development of presentation applications. PRESENTOR has been used with success in different domains including object model description (Lavoie et al., 1997), weather forecasting (Kittredge and Lavoie, 1998) and system requirements summarization (Ehrhart et al., 1998; Barzilay et al., 1998). PRESENTOR has the following characteristics, which we believe are unique in this combination: • PRESENTOR modules are implemented in Ja</context>
</contexts>
<marker>Kittredge, Korelsky, Rambow, 1991</marker>
<rawString>Kittredge, R., Korelsky, T. and Rambow, R. (1991). On the Need for Domain Communication Knowledge, in Computational Intelligence, Vol 7, No 4.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Lavoie</author>
<author>Rambow</author>
</authors>
<title>Customizable Descriptions of Object-Oriented Models,</title>
<date>1997</date>
<booktitle>In Proceedings of the Conference on Applied Natural Language Processing (ANLP&apos;97),</booktitle>
<location>Washington, DC.</location>
<contexts>
<context position="11152" citStr="Lavoie and Rambow, 1997" startWordPosition="1675" endWordPosition="1678">ping of conceptual domain-specific rep720 resentations to linguistic domain-indepenent representations. This mapping (transition) has the advantage that the modules processing conceptual representations can be unabashedly domain-specific, which is necessary in applications, since a broad-coverage implementation of a domain-independent theory of conceptual representations and their mapping to linguistic representations is still far from being realistic. Linguistic representations found in the conceptual dictionary are deep-syntactic structures (DSyntSs) which are conform to those that REALPRO (Lavoie and Rambow, 1997), PRESENTOR&apos;s sentence realizer, takes as input. The main characteristics of a deep-syntactic structure, inspired in this form by I. Mel&apos;euk&apos;s Meaning-Text Theory (Mel&apos;euk, 1988), are the following: • The DSyntS is an unordered dependency tree with labeled nodes and labeled arcs. • The DSyntS is lesicalized, meaning that the nodes are labeled with lexemes (uninflected words) from the target language. • The DSyntS is a syntactic representation, meaning that the arcs of the tree are labeled with syntactic relations such as &amp;quot;subject&amp;quot; (represented in DSyntSs as I), rather than conceptual or semant</context>
<context position="14309" citStr="Lavoie and Rambow, 1997" startWordPosition="2199" endWordPosition="2202">Z ( I $X ) ] &lt;--&gt; $V ( I $X II $Y ( ATTR $Z ) 3 Figure 6: Rhetorical Dictionary Entry 6 Lexicon and Linguistic Grammar The lexicon defines different linguistic characteristics of lexemes such as their categories, government patterns, morphology, etc., and which are used for the realization process. The linguistic grammars of PRESENTOR are used to transform a deep-syntactic representation into 721 a linearized list of all the lexemes and punctuation marks composing a sentence. The format of the declarative lexicon and of the grammar rules is that of the REALPRO realizer, which we discussed in (Lavoie and Rambow, 1997). We omit further discussion here. 7 Status PRESENTOR is currently implemented in Java and C++, and has been used with success in projects in different domains. We intend to add a declarative specification of formatting style in the near future. A serious limitation of the current implementation is the fact that the configurability of PRESENTOR at the micro-planning level is restricted to the lexicalization and the linguistic realization of rhetorical relations. Pronominalization rules remain hard-coded heuristics in the micro-planner but can be guided by features introduced in the presentatio</context>
</contexts>
<marker>Lavoie, Rambow, 1997</marker>
<rawString>Lavoie, B., Rambow, 0., and Reiter, E. (1997). Customizable Descriptions of Object-Oriented Models, In Proceedings of the Conference on Applied Natural Language Processing (ANLP&apos;97), Washington, DC.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Lavoie</author>
<author>Rambow</author>
</authors>
<title>RealPro - A Fast, Portable Sentence Realizer,</title>
<date>1997</date>
<booktitle>In Proceedings of the Conference on Applied Natural Language Processing (ANLP&apos;97),</booktitle>
<location>Washington, DC.</location>
<contexts>
<context position="11152" citStr="Lavoie and Rambow, 1997" startWordPosition="1675" endWordPosition="1678">ping of conceptual domain-specific rep720 resentations to linguistic domain-indepenent representations. This mapping (transition) has the advantage that the modules processing conceptual representations can be unabashedly domain-specific, which is necessary in applications, since a broad-coverage implementation of a domain-independent theory of conceptual representations and their mapping to linguistic representations is still far from being realistic. Linguistic representations found in the conceptual dictionary are deep-syntactic structures (DSyntSs) which are conform to those that REALPRO (Lavoie and Rambow, 1997), PRESENTOR&apos;s sentence realizer, takes as input. The main characteristics of a deep-syntactic structure, inspired in this form by I. Mel&apos;euk&apos;s Meaning-Text Theory (Mel&apos;euk, 1988), are the following: • The DSyntS is an unordered dependency tree with labeled nodes and labeled arcs. • The DSyntS is lesicalized, meaning that the nodes are labeled with lexemes (uninflected words) from the target language. • The DSyntS is a syntactic representation, meaning that the arcs of the tree are labeled with syntactic relations such as &amp;quot;subject&amp;quot; (represented in DSyntSs as I), rather than conceptual or semant</context>
<context position="14309" citStr="Lavoie and Rambow, 1997" startWordPosition="2199" endWordPosition="2202">Z ( I $X ) ] &lt;--&gt; $V ( I $X II $Y ( ATTR $Z ) 3 Figure 6: Rhetorical Dictionary Entry 6 Lexicon and Linguistic Grammar The lexicon defines different linguistic characteristics of lexemes such as their categories, government patterns, morphology, etc., and which are used for the realization process. The linguistic grammars of PRESENTOR are used to transform a deep-syntactic representation into 721 a linearized list of all the lexemes and punctuation marks composing a sentence. The format of the declarative lexicon and of the grammar rules is that of the REALPRO realizer, which we discussed in (Lavoie and Rambow, 1997). We omit further discussion here. 7 Status PRESENTOR is currently implemented in Java and C++, and has been used with success in projects in different domains. We intend to add a declarative specification of formatting style in the near future. A serious limitation of the current implementation is the fact that the configurability of PRESENTOR at the micro-planning level is restricted to the lexicalization and the linguistic realization of rhetorical relations. Pronominalization rules remain hard-coded heuristics in the micro-planner but can be guided by features introduced in the presentatio</context>
</contexts>
<marker>Lavoie, Rambow, 1997</marker>
<rawString>Lavoie, B. and Rambow, 0. (1997). RealPro - A Fast, Portable Sentence Realizer, In Proceedings of the Conference on Applied Natural Language Processing (ANLP&apos;97), Washington, DC.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W Mann</author>
<author>S Thompson</author>
</authors>
<title>Rhetorical Structure Theory: A Theory of Text Organization,</title>
<date>1987</date>
<booktitle>ISI technical report</booktitle>
<pages>87--190</pages>
<marker>Mann, Thompson, 1987</marker>
<rawString>Mann, W. and Thompson, S. (1987). Rhetorical Structure Theory: A Theory of Text Organization, ISI technical report RS-87-190.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K McKeown</author>
</authors>
<title>Text Generation,</title>
<date>1985</date>
<publisher>Cambridge University Press.</publisher>
<contexts>
<context position="4829" citStr="McKeown, 1985" startWordPosition="719" endWordPosition="720">r creates a structure and the other components add to it. All modules use declarative knowledge bases distinguished from the generator engine. This facilitates the reuse of the framework for new application domains with minimal impact on the modules composing the generator. As a result, PRESENTOR can allow non-programmers to develop their own generator applications. Specifically, PRESENTOR uses the following types of knowledge bases: • Environment variables: an open list of variables with corresponding values used to specify the configuration. • Exemplars: a library of schema-like structures (McKeown, 1985; Rambow and Korelsky, 1992) specifying the presentation to be generated at different levels of abstraction (rhetorical, conceptual, syntactic, surface form). • Rhetorical dictionary: a knowledge base indicating how to realize rhetorical relations linguistically. • Conceptual dictionary: a knowledge base used to map language-independent conceptual structures to language-specific syntactic structures. • Linguistic grammar transformation rules specifying the transformation of syntactic structures into surface word forms and punctuation marks. • Lexicon: a knowledge base containing the syntactic </context>
<context position="6078" citStr="McKeown, 1985" startWordPosition="902" endWordPosition="903">mes. • Format style: formatting specifications associated with different elements of the presentation (not yet implemented). As an example, let us consider a simple case illustrated in Figure 2 taken from a design summarization domain. Hyperlinks integrated in the presentation allow the user to obtain additional generated presentations. Figure 2: Presentation Sample The next sections present the different types of knowledge used by PRESENTOR to define and construct the presentation of Figure 2. 3 Exemplar Library An exemplar (Rambow et al., 1998; White and Caldwell, 1998) is a type of schema (McKeown, 1985; Rambow and Korelsky, 1992) whose purpose is to determine, for a given presentation request, the general specification of the presentation regarding its macro-structure, its content and its format. One main distinction between the exemplars of PRESENTOR and ordinary schemas is that they integrate conceptual, syntactic and surface form specifications of the content, and can be used for both deep and shallow generation, and combining both generality and simplicity. An exemplar can contain difConfigurable Know edge _ Exemplar Library _&gt; Rhetorical • Dictionary tConceptualj Dictionary Linguistic </context>
</contexts>
<marker>McKeown, 1985</marker>
<rawString>McKeown, K. (1985). Text Generation, Cambridge University Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>I A Mel&apos;euk</author>
</authors>
<title>Dependency Syntax: Theory and Practice.</title>
<date>1988</date>
<publisher>State University of New York Press,</publisher>
<location>New York.</location>
<contexts>
<context position="11330" citStr="Mel&apos;euk, 1988" startWordPosition="1703" endWordPosition="1704">epresentations can be unabashedly domain-specific, which is necessary in applications, since a broad-coverage implementation of a domain-independent theory of conceptual representations and their mapping to linguistic representations is still far from being realistic. Linguistic representations found in the conceptual dictionary are deep-syntactic structures (DSyntSs) which are conform to those that REALPRO (Lavoie and Rambow, 1997), PRESENTOR&apos;s sentence realizer, takes as input. The main characteristics of a deep-syntactic structure, inspired in this form by I. Mel&apos;euk&apos;s Meaning-Text Theory (Mel&apos;euk, 1988), are the following: • The DSyntS is an unordered dependency tree with labeled nodes and labeled arcs. • The DSyntS is lesicalized, meaning that the nodes are labeled with lexemes (uninflected words) from the target language. • The DSyntS is a syntactic representation, meaning that the arcs of the tree are labeled with syntactic relations such as &amp;quot;subject&amp;quot; (represented in DSyntSs as I), rather than conceptual or semantic relations such as &amp;quot;agent&amp;quot;. • The DSyntS is a deep syntactic representation, meaning that only meaning-bearing lexemes are represented, and not function words. Conceptual repre</context>
</contexts>
<marker>Mel&apos;euk, 1988</marker>
<rawString>Mel&apos;euk, I. A. (1988). Dependency Syntax: Theory and Practice. State University of New York Press, New York.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D E Caldwell</author>
<author>B Lavoie</author>
<author>D McCullough</author>
<author>M White</author>
</authors>
<title>Text Planning: Communicative Intentions and the Conventionality of Linguistic Communication. In preparation.</title>
<date>1998</date>
<marker>Caldwell, Lavoie, McCullough, White, 1998</marker>
<rawString>Rambow, 0., Caldwell, D. E., Lavoie, B., McCullough, D., and White, M. (1998). Text Planning: Communicative Intentions and the Conventionality of Linguistic Communication. In preparation.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Korelsky</author>
</authors>
<title>Applied Text Generation,</title>
<date>1992</date>
<booktitle>In Third Conference on Applied Natural Language Processing,</booktitle>
<pages>40--47</pages>
<location>Trento, Italy.</location>
<contexts>
<context position="4857" citStr="Korelsky, 1992" startWordPosition="723" endWordPosition="724">the other components add to it. All modules use declarative knowledge bases distinguished from the generator engine. This facilitates the reuse of the framework for new application domains with minimal impact on the modules composing the generator. As a result, PRESENTOR can allow non-programmers to develop their own generator applications. Specifically, PRESENTOR uses the following types of knowledge bases: • Environment variables: an open list of variables with corresponding values used to specify the configuration. • Exemplars: a library of schema-like structures (McKeown, 1985; Rambow and Korelsky, 1992) specifying the presentation to be generated at different levels of abstraction (rhetorical, conceptual, syntactic, surface form). • Rhetorical dictionary: a knowledge base indicating how to realize rhetorical relations linguistically. • Conceptual dictionary: a knowledge base used to map language-independent conceptual structures to language-specific syntactic structures. • Linguistic grammar transformation rules specifying the transformation of syntactic structures into surface word forms and punctuation marks. • Lexicon: a knowledge base containing the syntactic and morphological attributes</context>
<context position="6106" citStr="Korelsky, 1992" startWordPosition="906" endWordPosition="907">tting specifications associated with different elements of the presentation (not yet implemented). As an example, let us consider a simple case illustrated in Figure 2 taken from a design summarization domain. Hyperlinks integrated in the presentation allow the user to obtain additional generated presentations. Figure 2: Presentation Sample The next sections present the different types of knowledge used by PRESENTOR to define and construct the presentation of Figure 2. 3 Exemplar Library An exemplar (Rambow et al., 1998; White and Caldwell, 1998) is a type of schema (McKeown, 1985; Rambow and Korelsky, 1992) whose purpose is to determine, for a given presentation request, the general specification of the presentation regarding its macro-structure, its content and its format. One main distinction between the exemplars of PRESENTOR and ordinary schemas is that they integrate conceptual, syntactic and surface form specifications of the content, and can be used for both deep and shallow generation, and combining both generality and simplicity. An exemplar can contain difConfigurable Know edge _ Exemplar Library _&gt; Rhetorical • Dictionary tConceptualj Dictionary Linguistic Grammar Format Styl. Domain </context>
</contexts>
<marker>Korelsky, 1992</marker>
<rawString>Rambow, 0. and Korelsky, T. (1992). Applied Text Generation, In Third Conference on Applied Natural Language Processing, pages 40-47, Trento, Italy.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Reiter</author>
</authors>
<title>Has a Consensus NL Generation Architecture Appeared, and is it Psycholinguistically Plausible?</title>
<date>1994</date>
<booktitle>In Proceedings of the 7th International Workshop on Natural Language Generation,</booktitle>
<pages>163--170</pages>
<location>Maine.</location>
<contexts>
<context position="3386" citStr="Reiter, 1994" startWordPosition="497" endWordPosition="498">conceptual, syntactic, and surface form) and which can be used for deep or shallow generation. In Section 2, we describe the overall architecture of PRESENTOR. In Section 3 to Section 6, we present the different specifications used to define domain communication knowledge and linguistic knowledge. Finally, in Section 7, we describe the outlook for PRESENTOR. 2 PRESENTOR Architecture The architecture of PRESENTOR illustrated in Figure 1 consists of a core generator with several associated knowledge bases. The core generator has a pipeline architecture which is similar to many existing systems (Reiter, 1994): an incoming request is received by the generator interface triggering sequentially the macroplanning, micro-planning, realization and fi718 Figure 1: Architecture of PRESENTOR nally the formatting of a presentation which is then returned by the system. This pipeline architecture minimizes the interdependencies between the different modules facilitating the upgrade of each module with minimal impact on the overall system. It has been proposed that a pipeline architecture is not an adequate model for NLG (Rubinoff, 1992). However, we are not aware of any example from practical applications tha</context>
</contexts>
<marker>Reiter, 1994</marker>
<rawString>Reiter, E. (1994). Has a Consensus NL Generation Architecture Appeared, and is it Psycholinguistically Plausible? In Proceedings of the 7th International Workshop on Natural Language Generation, pages 163-170, Maine.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Rubinoff</author>
</authors>
<title>Integrating Text Planning and Linguistic Choice by Annotating Linguistic Structures,</title>
<date>1992</date>
<journal>In Aspects of Automated Natural Language Generation,</journal>
<pages>45--56</pages>
<location>Trento, Italy.</location>
<contexts>
<context position="3912" citStr="Rubinoff, 1992" startWordPosition="578" endWordPosition="579">ator has a pipeline architecture which is similar to many existing systems (Reiter, 1994): an incoming request is received by the generator interface triggering sequentially the macroplanning, micro-planning, realization and fi718 Figure 1: Architecture of PRESENTOR nally the formatting of a presentation which is then returned by the system. This pipeline architecture minimizes the interdependencies between the different modules facilitating the upgrade of each module with minimal impact on the overall system. It has been proposed that a pipeline architecture is not an adequate model for NLG (Rubinoff, 1992). However, we are not aware of any example from practical applications that could not be implemented with this architecture. One of the innovations of PRESENTOR is in the use of a common presentation structure which facilitates the integration of the processing by the different modules. The macro-planner creates a structure and the other components add to it. All modules use declarative knowledge bases distinguished from the generator engine. This facilitates the reuse of the framework for new application domains with minimal impact on the modules composing the generator. As a result, PRESENTO</context>
</contexts>
<marker>Rubinoff, 1992</marker>
<rawString>Rubinoff, R. (1992). Integrating Text Planning and Linguistic Choice by Annotating Linguistic Structures, In Aspects of Automated Natural Language Generation, pages 45-56, Trento, Italy.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M White</author>
<author>D E Caldwell</author>
</authors>
<title>EXEMPLARS: A Practical Exensible Framework for Real-Time Text Generation,</title>
<date>1998</date>
<booktitle>In Proceedings of the 9th International Workshop on Natural Language Generation,</booktitle>
<location>Ontario, Canada.</location>
<contexts>
<context position="6043" citStr="White and Caldwell, 1998" startWordPosition="893" endWordPosition="896"> syntactic and morphological attributes of lexemes. • Format style: formatting specifications associated with different elements of the presentation (not yet implemented). As an example, let us consider a simple case illustrated in Figure 2 taken from a design summarization domain. Hyperlinks integrated in the presentation allow the user to obtain additional generated presentations. Figure 2: Presentation Sample The next sections present the different types of knowledge used by PRESENTOR to define and construct the presentation of Figure 2. 3 Exemplar Library An exemplar (Rambow et al., 1998; White and Caldwell, 1998) is a type of schema (McKeown, 1985; Rambow and Korelsky, 1992) whose purpose is to determine, for a given presentation request, the general specification of the presentation regarding its macro-structure, its content and its format. One main distinction between the exemplars of PRESENTOR and ordinary schemas is that they integrate conceptual, syntactic and surface form specifications of the content, and can be used for both deep and shallow generation, and combining both generality and simplicity. An exemplar can contain difConfigurable Know edge _ Exemplar Library _&gt; Rhetorical • Dictionary </context>
<context position="15177" citStr="White and Caldwell, 1998" startWordPosition="2328" endWordPosition="2331">e. A serious limitation of the current implementation is the fact that the configurability of PRESENTOR at the micro-planning level is restricted to the lexicalization and the linguistic realization of rhetorical relations. Pronominalization rules remain hard-coded heuristics in the micro-planner but can be guided by features introduced in the presentation representations. This is problematic since pronominalization is often domain specific and may require changing the heuristics when porting a system to a new domain. CoGenTex has developed a complementary alternative to PRESENTOR, EXEMPLARS (White and Caldwell, 1998) which gives a better programmatic control to the processing of the representations that PRESENTOR does. While EXEMPLARS focuses on programmatic extensibility, PRESENTOR focus on declarative representation specification. Both approaches are complementary and work is currently being done in order to integrate their features. Acknowledgments The work reported in this paper was partially funded by AFRL under contract F30602-92-C0015 and SBIR F30602-92-C-0124, and by USAFMC under contract F30602-96-C-0076. We are thankful to R. Barzilay, T. Caldwell, J. DeCristofaro, It. Kittredge, T. Korelsky, D.</context>
</contexts>
<marker>White, Caldwell, 1998</marker>
<rawString>White, M. and Caldwell, D. E. (1998). EXEMPLARS: A Practical Exensible Framework for Real-Time Text Generation, In Proceedings of the 9th International Workshop on Natural Language Generation, Ontario, Canada.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>