<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000003">
<title confidence="0.964434">
Building a Shallow Arabic Morphological Analyzer in One Day
</title>
<author confidence="0.997567">
Kareem Darwish
</author>
<affiliation confidence="0.9981835">
Electrical and Computer Engineering Dept.,
University of Maryland, College Park
</affiliation>
<address confidence="0.924221">
College Park, MD 20742
</address>
<email confidence="0.998662">
kareem@glue.umd.edu
</email>
<sectionHeader confidence="0.957998" genericHeader="abstract">
Abstract:
</sectionHeader>
<bodyText confidence="0.9984757">
The paper presents a rapid method of
developing a shallow Arabic
morphological analyzer. The analyzer
will only be concerned with generating
the possible roots of any given Arabic
word. The analyzer is based on
automatically derived rules and statistics.
For evaluation, the analyzer is compared
to a commercially available Arabic
Morphological Analyzer.
</bodyText>
<sectionHeader confidence="0.99376" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.99989668292683">
Due to the morphological complexity of the
Arabic language, Arabic morphology has become
an integral part of many Arabic Information
Retrieval (IR) systems. Some of the Arabic IR
systems that use morphology include Swift [1] and
Sakhr’s electronic publishing software [2]. Some
Arabic IR studies have shown that the use of
Arabic roots as indexing terms substantially
improves the retrieval effectiveness over the use of
stems, which in turn improve retrieval
effectiveness over words [3] [4] [5].
Arabic words are divided into three types: noun,
verb, and particle [6]. Nouns and verbs are
derived from a closed set of around 10,000 roots
[7]. The roots are commonly three or four letters
and are rarely five letters. Arabic nouns and verbs
are derived from roots by applying templates to
the roots to generate stems and then introducing
prefixes and suffixes. Figure 1 shows some
templates for 3 letter roots. Figure 2 shows some
of the possible prefixes and suffixes and their
perspective meaning. The number of unique
Arabic words (or surface forms) is estimated to be
6 x 1010 words [8]. Figure 3 shows some of the
words that maybe generated from the root
“ktb”. (Refer to figure I in the Appendix for the
mapping between the Arabic letters and their Latin
representations).
Further, a word may be derived from several
different roots. For example the word
“AymAn” can be derived from five different
roots. Figure 4 shows possible roots for the word
“AymAn” and the meaning of the word based
on each. For the purposes of this paper, a word is
any Arabic surface form, a stem is a word without
any prefixes or suffixes, and a root is a linguistic
unit of meaning, which has no prefix, suffix, or
infix. However, often irregular roots, which
contain double or weak letters, lead to stems and
words that have letters from the root that are
deleted or replaced.
</bodyText>
<figureCaption confidence="0.541031125">
CCC “ktb” CCAC “ktAb” CACC “kAtb”
(wrote) (book) (writer)
mCCwC “mktwb” CCACyC “ktAtyb” CCwC “ktwb”
(something (middle (Qur’an (skilled
written) letter schools) writer)
doubled)
Figure 1: Some templates to generate stems from roots
with an examples from the root ( “ktb”)
</figureCaption>
<bodyText confidence="0.94802325">
Examples of prefixes
“w” and “f” Then “Al” the
“k” like “l” To “wAl” and
the
Examples of suffixes
“h” his “hm” Their “hA” her
“k” your “km” your “y” my
(singular) (plural)
</bodyText>
<figureCaption confidence="0.926734">
Figure 2: some examples of prefixes and suffixes and
their meanings
</figureCaption>
<bodyText confidence="0.998823555555556">
Building a large-scale morphological analyzers is
typically a laborious and time-consuming task.
For example, MORPHO3 was developed by RDI
in 3 man/years [8]. However, in this paper, we
will present a quick method for performing
shallow morphological analysis for use in
information retrieval, which entails finding the
roots of words, in one day. The method is based
on collecting statistics from word-root pairs:
</bodyText>
<listItem confidence="0.9421394">
1. to build morphological rules for deriving roots
from words,
2. to construct a list of prefixes and suffixes, and
3. to estimate the probability that a rule will be
used or a prefix or suffix will be seen.
</listItem>
<bodyText confidence="0.998715888888889">
This analyzer, called Sebawai, is possibly the first
cross-platform freely-distributable analyzer for
Arabic.
Section 2 will provide background on some of the
published research in Arabic Morphology. Section
3 will provide a description of the shallow
morphological analyzer. Section 4 evaluates the
analyzer and will address some of the
shortcomings of the system.
</bodyText>
<figure confidence="0.4563458125">
“ktb” He “yktb” He is “Aktb” I write
wrote writin
g
“kAtb” Writer “ktAb” Book “ktAbh His
” book
“wktAb And “ktAbhm” Their “ktb” books
h” his book
book
Root Meaning pronunciation
“Amn” peace Eman
“Aym” two poor people Ayyiman
“mAn” will he give Ayama’nu
support
“ymn” covenant Ayman
“ymA” will they Ayama’na
(feminine) point to
</figure>
<figureCaption confidence="0.995995">
Figure 4: the possible roots for the word “AymAn”
</figureCaption>
<bodyText confidence="0.9250855">
along with the meaning and pronunciation of the word
based on the different roots.
</bodyText>
<sectionHeader confidence="0.93776" genericHeader="introduction">
2 Background
</sectionHeader>
<bodyText confidence="0.98921576">
Significant work has been done in the area of the
Arabic morphological analysis. The three main
approaches to the problem are:
1. The Symbolic Approach: In this approach,
morphotactic (rules governing the combination of
morphemes, which are meaning bearing units in
the language) and orthographic (spelling rules)
rules are programmed into a finite state transducer
(FST). Koskenniemi proposed a two-level
system for language morphology, which led to
Antworth’s two-level morphology system PC-
KIMMO [9] [19]. Later, Beesley and Buckwalter
developed an Arabic morphology system,
ALPNET, that uses a slightly enhanced
implementation of PC-KIMMO [10]. Currently,
ALPNET is owned by Xerox and uses Xerox
Finite-State Morphology tools [11]. However,
this approach was criticized by Ahmed [8] for
requiring excessive manual processing to state
rules in an FST and for the ability only to analyze
words that appear in Arabic dictionaries. Kiraz
summarized many variations of the FST approach
[12]. Much information on two-level morphology
and PC-Kimmo is available in the PC-KIMMO
user’s guide [20].
</bodyText>
<listItem confidence="0.987498733333333">
2. The Statistical Approach: Goldsmith
proposed an unsupervised learning automatic
morphology tool called AutoMorphology [14].
This system is advantageous because it learns
prefixes, suffixes, and patterns from a corpus or
word-list in the target language without any need
for human intervention. However, such a system
would not be effective in Arabic morphology,
because it does not address the issues of
infixation, and would not detect uncommon
prefixes and suffixes.
3. The Hybrid Approach: This approach
uses rules in conjunction with statistics. This
approach employs a list of prefixes, a list of
suffixes, and templates to transform from a
</listItem>
<bodyText confidence="0.999350470588235">
stem to a root. Possible prefix-suffix-
template combinations are constructed for a
word to derive the possible roots. RDI’s
system called MORPHO3 utilizes such this
model [8]. Although such systems achieve
broader morphological coverage of the Arabic
language, manual derivation of rules is
laborious, time-consuming and requires a
good knowledge of Arabic orthographic and
morphotactic rules. In fact, MORPHO3 was
built in 3 man/years [8]. Large-scale
morphological analyzers provide more
information than just the root of a word.
They may provide information such as the
meaning of prefixes and suffixes and may
perform root disambiguation [8] [10] [11].
However, this paper is concerned with
</bodyText>
<figureCaption confidence="0.994264">
Figure 3: some of the words that can derived from the
</figureCaption>
<bodyText confidence="0.87277525">
root form “ktb”
morphological analysis for the purpose of IR.
Arabic IR is enhanced when the roots are used
in indexing and searching [3] [4] [5].
</bodyText>
<sectionHeader confidence="0.958228" genericHeader="method">
3 System Description
</sectionHeader>
<bodyText confidence="0.999932533333333">
Sebawai, the system discussed here, is similar to
the hybrid approach used by RDI’s MORPHO3
[8]. However, this system does not require
manually constructed lists of rules and affixes.
Instead, the system replaces the manual processing
with automatic processing.
The system has two main modules. The first
utilizes a list of Arabic word-root pairs (1) to
derive a list of prefixes and suffixes, (2) to
construct stem templates, and (3) to compute the
likelihood that a prefix, a suffix, or a template
would appear. The second accepts Arabic words
as input, attempts to construct possible prefix-
suffix-temple combinations, and outputs a ranked
list of possible roots.
</bodyText>
<subsectionHeader confidence="0.999534">
3.1 Getting a list of Word-Root Pairs
</subsectionHeader>
<bodyText confidence="0.999819">
The list of word-root pairs may be constructed
either manually, using a dictionary, or by using a
pre-existing morphological analyzer such as
ALPNET or MORPHO3 [8] [10].
</bodyText>
<listItem confidence="0.957852526315789">
1. Manual construction of word-root pair list:
Building the list of several thousand pairs
manually is time consuming, but feasible.
Assuming that a person who knows Arabic can
generate a root for a word every 5 seconds, the
manual process would require about 14 hours of
work to produce 10,000 word-root pairs.
2. Automatic construction of a list using
dictionary parsing: Extracting word-root pairs
from an electronic dictionary is a feasible process.
Since Arabic words are looked up in a dictionary
using their root form, an electronic dictionary such
as Lisan Al-Arab may be parsed to generate the
desired list. However, some care should be given
to throw away dictionary examples and words
unrelated to the root.
3. Automatic construction using a pre-existing
morphological analyzer: This process is simple,
but requires the availability of an analyzer.
</listItem>
<bodyText confidence="0.999746">
For the purposes of this paper, the third method
was used to construct the list. Two lists of Arabic
words were fed to ALPNET (which was the only
Arabic morphological analyzer available to the
author) and then the output was parsed to generate
the word-root pairs. One list was extracted from a
corpus of traditional Arabic text, called Zad,
owned by Al-Areeb Electronic Publishers [15].
The list contains 9,606 words that ALPNET was
able to analyze successfully. The original list was
larger, but the words that ALPNET was unable to
analyze were excluded. The other list was
extracted from the LDC Arabic collection
(LDC2001T55) containing AFP news-wire stories
[16]. This list contains 560,000 words. Of the
560,000 words, ALPNET was able to analyze
270,000 words successfully. The rest of the
words (about 290,000) were used for evaluating
Sebawai.
</bodyText>
<subsectionHeader confidence="0.997123">
3.2 Training
</subsectionHeader>
<bodyText confidence="0.999963538461538">
As stated above, this module takes a word-root
pair as input. By comparing the word to the root,
the system determines the prefix, suffix, and stem
template. For example, given the pair (
“wktAbhm”, “ktb”), the system generates
“w” as the prefix, “hm” as the suffix, and
“CCAC” as the stem template (C’s represent the
letters in the root). The system increases the
number of occurrences of the prefix “w”, the
suffix “hm”, and the template “CCAC” by one.
The system takes into account the cases where
there are no prefixes or suffixes and denotes either
of them with the symbol “#”.
</bodyText>
<figure confidence="0.65666275">
Word w k t A b hm
Root k t b
Parts Prefix Stem template Suffix
() ( --CCAC) ( )
</figure>
<figureCaption confidence="0.999304">
Figure 5: The decomposition of the word
</figureCaption>
<bodyText confidence="0.9662795">
“wktAbhm” with root “ktAb”
After that, the lists of prefixes, suffixes, and
templates are read through to assign probabilities
to items on the lists by dividing the occurrence of
each item in each list by the total number of
words. The probabilities being calculated are
given for character strings S1 and S2 and template
T as:
P(S1 begins a word, S1 is a prefix)
P(S2 ends a word, S2 is a suffix)
P(T is a template)
Another potential way of calculating the
probabilities of prefixes and suffixes is to use the
conditional probabilities that the item appears in
the word and is actually a prefix or suffix. For
example, if “w” appeared as the first letter in the
word 100 times, 70 times of which it was actually
a prefix, then the probability would be .70. In
other words, the probabilities being calculated are
given for character strings S1 and S2 as:
P(S1 is a prefix  |S1 begins a word)
P(S2 is a suffix  |S2 ends a word)
Notice that Sebawai’s stems are slightly different
from standard stems. Standard stem templates
may have letters added in the middle and in the
beginning. For example the template
“mCCwC” has “m” placed before the root and
“w” placed in the middle. Both “m” and “w”
are a part of the stem template. However, the
training module has no prior knowledge of
standard stem templates. Therefore, for the
template “mCCwC”, “m” is simply treated
as a part of the prefix list and the extracted
template is “CCwC”.
</bodyText>
<subsectionHeader confidence="0.988222">
3.3 Root Detection
</subsectionHeader>
<bodyText confidence="0.9932411">
The detect-root module accepts an Arabic word
and attempts to generate prefix-suffix-template
combinations. The combinations are produced by
progressively removing prefixes and suffixes and
then trying matching all the produced stems to a
template. For example, for the Arabic word
“AymAn” the possible prefixes are “#”, “A”, and
“Ay”, and the possible suffixes are “#”, “n”,
and “An”.
The resulting feasible stems are:
</bodyText>
<table confidence="0.997211666666667">
Stem Prefix Template Suffix Root
“AymAn” “#” “CyCAC” “#” “Amn”
“ymAn” “A” “CCAC” “#” “ymn”
mAn ” “Ay” “CCC” # ” “mAn”
“Aym” “#” “CCC” “An” “Aym”
“ymA” “A” “CCC” “n” “ymA”
</table>
<bodyText confidence="0.9999027">
The ones that the system deemed as not feasible
are “AymA” and “ym”. Although “AymA”
is not feasible, “ym” is actually feasible (comes
from the root “ymm”), but the system did not
know how to deal with it. The paper will address
this problem in the next sub-section. The possible
roots are ordered according to the product of the
probability that a prefix S1 would be observed, the
probability that a suffix S2 would be observed, and
the probability that a template T would be used.
</bodyText>
<equation confidence="0.9971265">
P(root) =
P(S1 begins a word, S1 is a prefix)
* P(S2 ends a word, S2 is a suffix)
* P(T is a template)
</equation>
<bodyText confidence="0.999688181818182">
The probabilities of stems, suffixes, and templates
are assumed to be independent. The
independence assumption is made to simplify the
ranking, but is not necessarily a correct
assumption because certain prefix-suffix
combinations are not allowed. Using the system
requires some smoothing which will be discussed
in the next subsection. The generated roots are
compared to a list of 10,000 roots extracted
automatically from an electronic copy of Lisan al-
Arab to verify their existence in the language [7].
</bodyText>
<subsectionHeader confidence="0.953152">
3.4 Missed or Erroneous Roots
</subsectionHeader>
<bodyText confidence="0.999958085714286">
As seen above, the system deemed the stem
“ym” not feasible, while in actuality the stem
maps to the root “ymm”. Other cases where the
system failed were when the root had weak
letters. Weak letters are “A”, “y”, and “w”.
The weak letters are frequently substituted for
each other in stem form or dropped all together.
For example, the word “qAl” has the root
“qwl” or “qyl” which would make the word
mean ‘he said’ or ‘he napped’ respectively. Also,
the word “f” has the root “wfy” where the
letters “w” and “y” are missing. To
compensate for these problems, two letter stems
were corrected by introducing new stems that are
generated by doubling the last letter (to produce
“ymm” from “ym”) and by adding weak letters
before or after the stem. As for stems with a weak
middle letter, new stems are introduced by
substituting the middle letter with the other weak
letters. For example, for “qAl”, the system
would introduce the stems “qwl” and “qyl”.
This process over-generates potential roots. For
example, from the three potential roots “qAl”,
“qwl”, and “qyl”, “qAl” is not a valid
root and is thus removed (by comparing to the list
of valid roots). To account for the changes, the
following probabilities were calculated: (a) the
probability that a weak letter w1 would be
transformed to another weak letter w2, (b) the
probability that a two letter word would have a
root with the second letter doubled (such as
“ymm”), and (c) the probability that a two letter
word was derived from a root by dropping an
initial or trailing weak letter. The new probability
of the root becomes:
</bodyText>
<equation confidence="0.9101564">
P(root) =
P(S1 begins a word, S1 is a prefix)
* P(S2 ends a word, S2 is a suffix)
* P(T is a template)
* P(letter substitution or letter addition)
</equation>
<bodyText confidence="0.999958142857143">
As for smoothing the prefix and suffix
probabilities, Witten-Bell discounting was used
[17]. The smoothing is necessary because many
prefixes and suffixes were erroneously produced.
This is a result of word-root pair errors. Using this
smoothing strategy, if a prefix or a suffix is
observed only once, then it is removed from the
respective list. As for the list of templates, it was
reviewed by an Arabic speaker (the author of the
paper) to insure the correctness of the templates.
The Arabic examiner was aided by example words
the system provided for each template. If a
template was deemed not correct, it was removed
from the list.
</bodyText>
<subsectionHeader confidence="0.846548">
3.5 Particles
</subsectionHeader>
<bodyText confidence="0.999929333333333">
To account for particles, a list of Arabic particles
was constructed with aid of An-Nahw Ash-Shamil
(an Arabic grammar book) [6]. If the system
matched a potential stem to one of the words on
the particle list, the system would indicate that the
word is a particle. Note that particles are allowed
to have suffixes and prefixes. A complete list of
the particles used by Sebawai is available upon
request.
</bodyText>
<subsectionHeader confidence="0.965884">
3.6 Letter Normalizations
</subsectionHeader>
<bodyText confidence="0.995111285714286">
The system employs a letter normalization strategy
in order to account for spelling variations and to
ease in the deduction of roots from words. The
first normalization deals with the letters “y” and
“Y” (alef maqsoura). Both are normalized to
“y”. The reason behind this normalization is that
there is no one convention for spelling “y” or
“Y” when either appears at the end of a word
(Note that “Y” only appears at the end of a
word). In the Othmani script of the Holy Qur’an
for example, any “y” is written as “Y” when it
appears at the end of a word [18]. The second
normalization is that of “” (hamza), “❺” (alef
maad), “❻” (alef with hamza on top), “ ” (hamza on
w), “” (alef with hamza on the bottom), and “ ”
(hamza on ya). The reason for this normalization
is that all forms of hamza are represented in
dictionaries as one in root form namely “” or “”,
depending on the dictionary, and people often
misspell different forms of alef. All are
normalized to the symbol “A”.
</bodyText>
<sectionHeader confidence="0.90802" genericHeader="method">
4 Evaluation and Discussion
</sectionHeader>
<bodyText confidence="0.999404166666667">
To evaluate Sebawai, it was compared to
ALPNET. A random set of a 100 word-root pairs
produced by ALPNET was manually examined to
verify their correctness and consequently verify
the correctness of ALPNET. ALPNET produces
some possible roots for each given word in
unranked order, but all pairs were correct.
Three experiments were preformed. In the first
and second experiments, Sebawai is trained on a
large list and a small list of word-root pairs
respectively. After the training, a list of words is
fed into Sebawai and ALPNET for analysis. The
correctness of analysis and coverage of both
systems are compared. In the third experiment, a
document collection is indexed using roots
produced by both systems. Retrieval
effectiveness of indexing using roots produced
from each system is examined.
</bodyText>
<subsectionHeader confidence="0.998991">
4.1 Using a Large Training Set
</subsectionHeader>
<bodyText confidence="0.998777976190476">
A list of 270K words was used for training the
system and a list of 9,606 Arabic words was used
for evaluation. Of the small test set, ALPNET
analyzed all the words, while Sebawai analyzed
9,497 and failed on 112. For the generated roots,
three different automatic evaluations were done:
First (Auto-Eval-1): The top generated root is
compared to the roots generated by ALPNET. If
the root is on the list, it is considered correct.
Using this method, 8,206 roots were considered
correct.
Second (Auto-Eval-2): The top two generated
roots from Sebawai were compared to the list of
roots that were generated by ALPNET. If either
root appeared in the list then the morphological
analysis was considered correct. Using this
evaluation method, 8,861 roots were considered
correct.
Third (Auto-Eval-n): All the generated roots are
compared to the ones generated by ALPNET. If
any match is found, the analysis is considered
correct. Using this method, 9,136 roots were
considered correct.
However, this automatic evaluation has two
flaws:
1. The number of Arabic roots in ALPNET’s
inventory are only 4,600 roots while the number
of roots used by Sebawai are more than 10,000.
This could result in a correct roots being missed by
ALPNET.
2. ALPNET often under-analyzes. For example
the word “fy” could be the particle “fy” or
could be a stem with the root “fyy”. ALPNET
only generates the particle “fy”, but not the other
root “fyy”. This could lead to false negatives.
Therefore manual examination of reject roots was
necessary. However, due to the large number of
rejected roots, 100 rejected roots from the
evaluation Auto-Eval-1 and Auto-Eval-2 were
selected at random for examination to estimate the
shortfall of the automatic evaluation. Of the 100
rejected roots:
</bodyText>
<table confidence="0.9988303125">
Evaluation Correct Incorrect
Method
Auto-Eval-1 46 54
Auto-Eval-2 38 62
Results summary:
Eval. No. of Failures No. or roots No. of roots
method words deemed estimated to
(correct be correct
/incorrect) (manual
evaluation)
Auto- 9,606 112 8,206 / 1,291 8,800
Eval-1 (1.17%) (86.4 / 13.6%) (92.7%)
Auto- 9,606 112 8,861 / 636 9,136
Eval-2 (1.17%) (93.3 / 6.7%) (96.1%)
Auto- 9,606 112 9,136 / 360 -
Eval-n (1.17%) (96.2 / 3.8%)
</table>
<bodyText confidence="0.999214181818182">
Another list of 292,216 words that ALPNET was
unable to recognize were fed to Sebawai. Sebawai
analyzed 128,169 words (43.9%), and failed
otherwise. To verify the correctness of the system,
100 words were taken at random from the list for
manual examination. Of the 100, 47 were actually
analyzed correctly. Many of the failures were
named-Entities. Extrapolating from the results of
the manual examination, Sebawai would
successfully recognize an estimated 60,000 words
(20% of the original list).
</bodyText>
<sectionHeader confidence="0.653655" genericHeader="method">
Results summary:
</sectionHeader>
<bodyText confidence="0.998169625">
Number Number of roots An estimate of the
of words detected correctly detected
roots
292,216 128,169 (43.9%) 60,000 (20%)
The failure of ALPNET and the low accuracy of
Sebawai warrant further investigation. A quick
review of the list shows a high frequency of named
entities, misspelled words, and obscure words.
</bodyText>
<subsectionHeader confidence="0.998294">
4.2 Using a Small Training Set
</subsectionHeader>
<bodyText confidence="0.999421818181818">
The 9,606 words list was used for training and the
270K words list was used for evaluation. The
same automatic evaluation method mentioned
above was used. Of the 270,468 words, the
system was unable to analyze 84,421, and
analyzed 186,047. Similar to the experiment with
the large training set, three automatic evaluations
were used: Auto-Eval-1, Auto-Eval-2, and Auto-
Eval-n. For Auto-Eval-1 and Auto-Eval-2, 100 of
the rejected roots were manually examined to
verify correctness. Of the 100 roots examined:
</bodyText>
<table confidence="0.970217928571429">
Results summary:
Eval. No. of Words No. or roots No. of roots
Method roots not deemed estimated to
analyzed (correct be correct
/incorrect) (manual
evaluation)
Auto- 270,468 84,421 130,990 / 147,507
Eval-1 (31.21%) 55,057 (79.3%)
(70.4 / 29.6%)
Auto- 270,468 84,421 149,906 / 166,169
Eval-2 (31.21%) 36,141 (89.3%)
(80.6 / 19.4%)
Auto- 270,468 84,421 159, 02 / 27,020 -
Eval-n (31.21%) (85.5 / 14.5%)
</table>
<bodyText confidence="0.9948621">
Also, the 292,216 words that ALPNET was
unable to recognize were fed to Sebawai.
Sebawai analyzed 92,929 words (31.8%). To
verify the correctness of the system, 100 words
were taken at random from the list for manual
examination. Of the 100, 55 were actually
analyzed correctly. Extrapolating from the results
of the manual examination, Sebawai would
successfully recognize an estimated 60,000 words
(20% of the original list).
</bodyText>
<sectionHeader confidence="0.467466" genericHeader="method">
Results summary:
</sectionHeader>
<bodyText confidence="0.989279">
Number Number of roots An estimate of the
of words detected correctly detected
roots
292,216 92,929 (31.8%) 51,000 (17%)
</bodyText>
<subsectionHeader confidence="0.997193">
4.3 Retrieval Effectiveness
</subsectionHeader>
<bodyText confidence="0.9951402">
In the third part of the evaluation, the Zad
document collection, which contains 4,000
documents, was used for retrieval evaluation.
Associated with the collection was a set of 25
queries and their relevance judgments. Sebawai
</bodyText>
<table confidence="0.682633">
Eval. Method Correct Incorrect
Auto-Eval-1 30 70
Auto-Eval-2 45 55
</table>
<bodyText confidence="0.997333">
was trained using the list of 270K words. InQuery
was the retrieval engine used.
In the evaluation, 4 different runs were performed.
In the first two, the collection was indexed using
one root and two roots produced by ALPNET. In
the later two, the collection was indexed using the
top root and the top two roots generated by
Sebawai. Mean average precision was used as the
figure of merit in comparing the runs. For
statistical significance, a paired two-tailed t-test
was used. Statistical significance was concluded if
the p-value of t-test was lower than .05.
</bodyText>
<table confidence="0.9217955">
Results summary:
Index term Mean Avg. Precision
ALPNET – 1 root 0.34
ALPNET – 2 root 0.36
Sebawai – 1 root 0.45
Sebawai – 1 root 0.29
</table>
<bodyText confidence="0.995915083333333">
Using Sebawai’s guess of the most likely root
resulted in a higher mean average precision than
when using one root produced by ALPNET (Note
that ALPNET randomly ordered the possible
roots). Further, using two roots from ALPNET
slightly improved mean average precision, but the
improvement was not statistically significant.
Using the top two roots from Sebawai significantly
harmed retrieval. A likely reason for the fall in
mean average precision when the second root was
introduced is that the second root amounted to
noise.
</bodyText>
<subsectionHeader confidence="0.991227">
4.4 Success and Limitations
</subsectionHeader>
<bodyText confidence="0.981635636363636">
The evaluation method clearly shows the
effectiveness of Sebawai. In fact, Sebawai
significantly outperformed ALPNET in retrieval
experiments. The analyzer is often able to detect
roots that were missed by a commercially
available system. Also, due to the fact that rule
are derived automatically, Sebawai was developed
very rapidly. It was built in less than 12 hours
using about 200 lines of Perl code [21]. Further,
the analyzer is able to derive the roots of 40,000
words per minute on a Pentium class machine with
256 MB of RAM running Linux. Also, Sebawai is
twice as fast as ALPNET on the same machine.
Rewriting Sebawai in a compiled language such as
C is likely to improve the analysis speed.
Furthermore, the method used to develop this
Arabic morphological analyzer can potentially be
used to rapidly develop morphological analyzers
for other languages. Some languages exhibit
morphological properties similar to those of
Arabic such as Hebrew [12].
However, the system is restricted in the following
aspects:
1. Since it limits the choice of roots to a fixed
set, it does not stem words transliterated from
other languages such as transliterated named
entities. For example, the English word Britain is
transliterated as “bryTAnyA”. From
“bryTAnyA”, some the words that maybe
generated are: “bryTAny” (British),
“AlbryTAny” (the British), and
“AlbryTAnyyn” (Englishmen).
have 3 letter roots. For example, the word ⑨ “q”
</bodyText>
<listItem confidence="0.452138">
2. Some words in Arabic are 1 letter long, but
</listItem>
<bodyText confidence="0.953884333333333">
means “protect (in the form of command)”. Since
they are very rare, they may not appear in the
training set.
</bodyText>
<listItem confidence="0.665815">
3. Some individual words in Arabic constitute
</listItem>
<bodyText confidence="0.958303545454545">
complete sentences. For example, the word
“AnlzmkmwhA” means “will we
forcefully bind you to it?” These also are rare and
may not appear in a training set.
4. The analyzer lacks the ability to decipher
which prefix-suffix combinations are legal.
Although deciphering the legal combinations is
feasible using statistics, the process would
potentially require a huge number of examples to
insure that the system would not disallow legal
combinations.
</bodyText>
<sectionHeader confidence="0.969678" genericHeader="method">
5 Conclusion and Future Work
</sectionHeader>
<bodyText confidence="0.9999548">
The paper presented a way to rapidly develop a
shallow Arabic morphological analyzer. The
analyzer is based on automatically derived rules
and statistics. The analyzer is cross-platform and
freely-distributable. Although some knowledge
of the Arabic language was required to verify the
correctness of derived rules for example, the
amount of time required to build the rules is
reduced to hours rather than days or weeks. Some
the possible future work includes:
</bodyText>
<listItem confidence="0.945175777777778">
1. Integrating stemming with the analyzer to
handle words the analyzer failed on.
2. Attempting to develop morphological
analyzers for other language using the same
method describe in the paper.
3. Collecting statistics on legal prefix-suffix
combinations to further improve the analyzer.
4. Comparing the retrieval effectiveness when
indexing is done using this analyzer compared to
</listItem>
<bodyText confidence="0.995669">
another commercially available analyzer such as
ALPNET or MORPHO3.
5. Examining the words for which ALPNET was
unable to produce roots. This would give insight
into the strength and weakness of ALPNET.
</bodyText>
<sectionHeader confidence="0.983615" genericHeader="evaluation">
Acknowledgements:
</sectionHeader>
<bodyText confidence="0.997852666666667">
I would like to thank Douglas W. Oard, Nizar
Habash, and Amy Weinberg for all their valuable
feedback.
</bodyText>
<sectionHeader confidence="0.990158" genericHeader="conclusions">
References:
</sectionHeader>
<reference confidence="0.999776577464789">
1. RDI (Research and Development
International), Cairo, Egypt. www.rdi-eg.com
2. Sakhr, Cairo, Egypt. www.sakhr.com
3. Al-Kharashi, Ibrahim and Martha Evens,
“Comparing Words, Stems, and Roots as Index
Terms in an Arabic Information Retrieval.”
JASIS. 45 (8): 548-560, 1994.
4. Abu-Salem, Hani, Mahmoud Al-Omari, and
Martha Evens, “Stemming Methodologies
Over Individual Query Words for Arabic
Information Retrieval.” JASIS. 50 (6): 524-
529, 1999.
5. Hmeidi, Ismail, Ghassan Kanaan, and Martha
Evens, “Design and Implementation of
Automatic Indexing for Information Retrieval
with Arabic Documents.” JASIS. 48 (10):
867-881, 1997.
6. Abdul-Al-Aal, Abdul-Monem, An-Nahw
Ashamil. Maktabat Annahda Al-Masriya,
Cairo, Egypt, 1987.
7. Ibn Manzour, Lisan Al-Arab.
www.muhaddith.org.
8. Ahmed, Mohamed Attia, “A Large-Scale
Computational Processor of the Arabic
Morphology, and Applications.” A Master’s
Thesis, Faculty of Engineering, Cairo
University, Cairo, Egypt, 2000.
9. Koskenniemi, Kimmo, “Two Level
Morphology: A General Computational
Model for Word-form Recognition and
Production.” Publication No. 11, Dept. of
General Linguistics, University of Helsinki,
Helsinki, 1983.
10. Beesley, Kenneth, Tim Buckwalter, and Stuart
Newton, “Two-Level Finite-State Analysis of
Arabic Morphology.” Proceedings of the
Seminar on Bilingual Computing in Arabic
and English, Cambridge, England, 1989.
11. Beesley, Kenneth, “Arabic Finite-State
Morphological Analysis and Generation.”
COLING-96, 1996.
12. Kiraz, George, “Arabic Computation
Morphology in the West.” Proceedings of the
6th International Conference and Exhibition
on Multi-lingual Computing, Cambridge,
1998.
13. The Temple Project. http://crl.nmsu.edu/tide/
14. Goldsmith, John, “Unsupervised Learning of
the Morphology of a Natural Language.”
http://humanities.uchicago.edu/faculty/golds
mith/, 2000.
15. Al-Areeb Electronic Publishers, LLC. 16013
Malcolm Dr., Laurel, MD 20707, USA
16. Cole, Andy, David Graff, and Kevin Walker,
“Arabic Newswire Part 1 Corpus (1-58563-
190-6)”, Linguistic Data Consortium (LDC).
www.ldc.upenn.edu
17. Jurafsky, Daniel and James Martin, “Speech
and Language Processing.” Prentice Hall,
New Jersey, 2000.
18. The Holy Qur’an.
19. Antworth, Evan L, “PC-KIMMO: a two-level
processor for morphological analysis.“
Occasional Publications in Academic
Computing No. 16. Dallas, TX: Summer
Institute of Linguistics, 1990.
20. Antworth, Evan L, “PC-KIMMO User’s
Guide.”
www.sil.org/pckimmo/v2/doc/guide.html,
1995
21. Perl. www.perl.com
</reference>
<sectionHeader confidence="0.45865" genericHeader="references">
Appendix:
</sectionHeader>
<figureCaption confidence="0.94584">
figure 1: Letter mappings
</figureCaption>
<figure confidence="0.996021714285714">
A A A A A
A A b t p
v i H x d
O r z S P
S D T Z E
i f Q k l
M n h W y
</figure>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.558924">
<title confidence="0.999956">Building a Shallow Arabic Morphological Analyzer in One Day</title>
<author confidence="0.975452">Kareem</author>
<affiliation confidence="0.9972845">Electrical and Computer Engineering University of Maryland, College</affiliation>
<address confidence="0.982938">College Park, MD</address>
<email confidence="0.999075">kareem@glue.umd.edu</email>
<abstract confidence="0.9642938">The paper presents a rapid method of developing a shallow morphological analyzer. The analyzer will only be concerned with generating the possible roots of any given Arabic word. The analyzer is based automatically derived rules and statistics. For evaluation, the analyzer is compared to a commercially available Arabic</abstract>
<intro confidence="0.661487">Morphological Analyzer.</intro>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="false">
<institution>RDI (Research and Development International),</institution>
<location>Cairo, Egypt. www.rdi-eg.com</location>
<contexts>
<context position="802" citStr="[1]" startWordPosition="115" endWordPosition="115">bstract: The paper presents a rapid method of developing a shallow Arabic morphological analyzer. The analyzer will only be concerned with generating the possible roots of any given Arabic word. The analyzer is based on automatically derived rules and statistics. For evaluation, the analyzer is compared to a commercially available Arabic Morphological Analyzer. 1 Introduction Due to the morphological complexity of the Arabic language, Arabic morphology has become an integral part of many Arabic Information Retrieval (IR) systems. Some of the Arabic IR systems that use morphology include Swift [1] and Sakhr’s electronic publishing software [2]. Some Arabic IR studies have shown that the use of Arabic roots as indexing terms substantially improves the retrieval effectiveness over the use of stems, which in turn improve retrieval effectiveness over words [3] [4] [5]. Arabic words are divided into three types: noun, verb, and particle [6]. Nouns and verbs are derived from a closed set of around 10,000 roots [7]. The roots are commonly three or four letters and are rarely five letters. Arabic nouns and verbs are derived from roots by applying templates to the roots to generate stems and th</context>
</contexts>
<marker>1.</marker>
<rawString>RDI (Research and Development International), Cairo, Egypt. www.rdi-eg.com</rawString>
</citation>
<citation valid="true">
<authors>
<author>Cairo Sakhr</author>
</authors>
<date></date>
<note>www.sakhr.com</note>
<contexts>
<context position="849" citStr="[2]" startWordPosition="121" endWordPosition="121">eveloping a shallow Arabic morphological analyzer. The analyzer will only be concerned with generating the possible roots of any given Arabic word. The analyzer is based on automatically derived rules and statistics. For evaluation, the analyzer is compared to a commercially available Arabic Morphological Analyzer. 1 Introduction Due to the morphological complexity of the Arabic language, Arabic morphology has become an integral part of many Arabic Information Retrieval (IR) systems. Some of the Arabic IR systems that use morphology include Swift [1] and Sakhr’s electronic publishing software [2]. Some Arabic IR studies have shown that the use of Arabic roots as indexing terms substantially improves the retrieval effectiveness over the use of stems, which in turn improve retrieval effectiveness over words [3] [4] [5]. Arabic words are divided into three types: noun, verb, and particle [6]. Nouns and verbs are derived from a closed set of around 10,000 roots [7]. The roots are commonly three or four letters and are rarely five letters. Arabic nouns and verbs are derived from roots by applying templates to the roots to generate stems and then introducing prefixes and suffixes. Figure 1 </context>
</contexts>
<marker>2.</marker>
<rawString>Sakhr, Cairo, Egypt. www.sakhr.com</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ibrahim Al-Kharashi</author>
<author>Martha Evens</author>
</authors>
<title>Comparing Words, Stems, and Roots as Index Terms in an Arabic Information Retrieval.”</title>
<date>1994</date>
<journal>JASIS.</journal>
<volume>45</volume>
<issue>8</issue>
<pages>548--560</pages>
<contexts>
<context position="1066" citStr="[3]" startWordPosition="155" endWordPosition="155">For evaluation, the analyzer is compared to a commercially available Arabic Morphological Analyzer. 1 Introduction Due to the morphological complexity of the Arabic language, Arabic morphology has become an integral part of many Arabic Information Retrieval (IR) systems. Some of the Arabic IR systems that use morphology include Swift [1] and Sakhr’s electronic publishing software [2]. Some Arabic IR studies have shown that the use of Arabic roots as indexing terms substantially improves the retrieval effectiveness over the use of stems, which in turn improve retrieval effectiveness over words [3] [4] [5]. Arabic words are divided into three types: noun, verb, and particle [6]. Nouns and verbs are derived from a closed set of around 10,000 roots [7]. The roots are commonly three or four letters and are rarely five letters. Arabic nouns and verbs are derived from roots by applying templates to the roots to generate stems and then introducing prefixes and suffixes. Figure 1 shows some templates for 3 letter roots. Figure 2 shows some of the possible prefixes and suffixes and their perspective meaning. The number of unique Arabic words (or surface forms) is estimated to be 6 x 1010 words </context>
<context position="7041" citStr="[3]" startWordPosition="1118" endWordPosition="1118">ules is laborious, time-consuming and requires a good knowledge of Arabic orthographic and morphotactic rules. In fact, MORPHO3 was built in 3 man/years [8]. Large-scale morphological analyzers provide more information than just the root of a word. They may provide information such as the meaning of prefixes and suffixes and may perform root disambiguation [8] [10] [11]. However, this paper is concerned with Figure 3: some of the words that can derived from the root form “ktb” morphological analysis for the purpose of IR. Arabic IR is enhanced when the roots are used in indexing and searching [3] [4] [5]. 3 System Description Sebawai, the system discussed here, is similar to the hybrid approach used by RDI’s MORPHO3 [8]. However, this system does not require manually constructed lists of rules and affixes. Instead, the system replaces the manual processing with automatic processing. The system has two main modules. The first utilizes a list of Arabic word-root pairs (1) to derive a list of prefixes and suffixes, (2) to construct stem templates, and (3) to compute the likelihood that a prefix, a suffix, or a template would appear. The second accepts Arabic words as input, attempts to c</context>
</contexts>
<marker>3.</marker>
<rawString>Al-Kharashi, Ibrahim and Martha Evens, “Comparing Words, Stems, and Roots as Index Terms in an Arabic Information Retrieval.” JASIS. 45 (8): 548-560, 1994.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hani Abu-Salem</author>
<author>Mahmoud Al-Omari</author>
<author>Martha Evens</author>
</authors>
<title>Stemming Methodologies Over Individual Query Words for Arabic Information Retrieval.”</title>
<date>1999</date>
<journal>JASIS.</journal>
<volume>50</volume>
<issue>6</issue>
<pages>524--529</pages>
<contexts>
<context position="1070" citStr="[4]" startWordPosition="156" endWordPosition="156">evaluation, the analyzer is compared to a commercially available Arabic Morphological Analyzer. 1 Introduction Due to the morphological complexity of the Arabic language, Arabic morphology has become an integral part of many Arabic Information Retrieval (IR) systems. Some of the Arabic IR systems that use morphology include Swift [1] and Sakhr’s electronic publishing software [2]. Some Arabic IR studies have shown that the use of Arabic roots as indexing terms substantially improves the retrieval effectiveness over the use of stems, which in turn improve retrieval effectiveness over words [3] [4] [5]. Arabic words are divided into three types: noun, verb, and particle [6]. Nouns and verbs are derived from a closed set of around 10,000 roots [7]. The roots are commonly three or four letters and are rarely five letters. Arabic nouns and verbs are derived from roots by applying templates to the roots to generate stems and then introducing prefixes and suffixes. Figure 1 shows some templates for 3 letter roots. Figure 2 shows some of the possible prefixes and suffixes and their perspective meaning. The number of unique Arabic words (or surface forms) is estimated to be 6 x 1010 words [8].</context>
<context position="7045" citStr="[4]" startWordPosition="1119" endWordPosition="1119"> is laborious, time-consuming and requires a good knowledge of Arabic orthographic and morphotactic rules. In fact, MORPHO3 was built in 3 man/years [8]. Large-scale morphological analyzers provide more information than just the root of a word. They may provide information such as the meaning of prefixes and suffixes and may perform root disambiguation [8] [10] [11]. However, this paper is concerned with Figure 3: some of the words that can derived from the root form “ktb” morphological analysis for the purpose of IR. Arabic IR is enhanced when the roots are used in indexing and searching [3] [4] [5]. 3 System Description Sebawai, the system discussed here, is similar to the hybrid approach used by RDI’s MORPHO3 [8]. However, this system does not require manually constructed lists of rules and affixes. Instead, the system replaces the manual processing with automatic processing. The system has two main modules. The first utilizes a list of Arabic word-root pairs (1) to derive a list of prefixes and suffixes, (2) to construct stem templates, and (3) to compute the likelihood that a prefix, a suffix, or a template would appear. The second accepts Arabic words as input, attempts to const</context>
</contexts>
<marker>4.</marker>
<rawString>Abu-Salem, Hani, Mahmoud Al-Omari, and Martha Evens, “Stemming Methodologies Over Individual Query Words for Arabic Information Retrieval.” JASIS. 50 (6): 524-529, 1999.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ismail Hmeidi</author>
<author>Ghassan Kanaan</author>
<author>Martha Evens</author>
</authors>
<date>1997</date>
<booktitle>Design and Implementation of Automatic Indexing for Information Retrieval with Arabic Documents.” JASIS.</booktitle>
<volume>48</volume>
<issue>10</issue>
<pages>867--881</pages>
<contexts>
<context position="1074" citStr="[5]" startWordPosition="157" endWordPosition="157">uation, the analyzer is compared to a commercially available Arabic Morphological Analyzer. 1 Introduction Due to the morphological complexity of the Arabic language, Arabic morphology has become an integral part of many Arabic Information Retrieval (IR) systems. Some of the Arabic IR systems that use morphology include Swift [1] and Sakhr’s electronic publishing software [2]. Some Arabic IR studies have shown that the use of Arabic roots as indexing terms substantially improves the retrieval effectiveness over the use of stems, which in turn improve retrieval effectiveness over words [3] [4] [5]. Arabic words are divided into three types: noun, verb, and particle [6]. Nouns and verbs are derived from a closed set of around 10,000 roots [7]. The roots are commonly three or four letters and are rarely five letters. Arabic nouns and verbs are derived from roots by applying templates to the roots to generate stems and then introducing prefixes and suffixes. Figure 1 shows some templates for 3 letter roots. Figure 2 shows some of the possible prefixes and suffixes and their perspective meaning. The number of unique Arabic words (or surface forms) is estimated to be 6 x 1010 words [8]. Fig</context>
<context position="7049" citStr="[5]" startWordPosition="1120" endWordPosition="1120">laborious, time-consuming and requires a good knowledge of Arabic orthographic and morphotactic rules. In fact, MORPHO3 was built in 3 man/years [8]. Large-scale morphological analyzers provide more information than just the root of a word. They may provide information such as the meaning of prefixes and suffixes and may perform root disambiguation [8] [10] [11]. However, this paper is concerned with Figure 3: some of the words that can derived from the root form “ktb” morphological analysis for the purpose of IR. Arabic IR is enhanced when the roots are used in indexing and searching [3] [4] [5]. 3 System Description Sebawai, the system discussed here, is similar to the hybrid approach used by RDI’s MORPHO3 [8]. However, this system does not require manually constructed lists of rules and affixes. Instead, the system replaces the manual processing with automatic processing. The system has two main modules. The first utilizes a list of Arabic word-root pairs (1) to derive a list of prefixes and suffixes, (2) to construct stem templates, and (3) to compute the likelihood that a prefix, a suffix, or a template would appear. The second accepts Arabic words as input, attempts to construct</context>
</contexts>
<marker>5.</marker>
<rawString>Hmeidi, Ismail, Ghassan Kanaan, and Martha Evens, “Design and Implementation of Automatic Indexing for Information Retrieval with Arabic Documents.” JASIS. 48 (10): 867-881, 1997.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Abdul-Monem Abdul-Al-Aal</author>
</authors>
<title>An-Nahw Ashamil. Maktabat Annahda Al-Masriya,</title>
<date>1987</date>
<location>Cairo, Egypt,</location>
<contexts>
<context position="1147" citStr="[6]" startWordPosition="169" endWordPosition="169">ological Analyzer. 1 Introduction Due to the morphological complexity of the Arabic language, Arabic morphology has become an integral part of many Arabic Information Retrieval (IR) systems. Some of the Arabic IR systems that use morphology include Swift [1] and Sakhr’s electronic publishing software [2]. Some Arabic IR studies have shown that the use of Arabic roots as indexing terms substantially improves the retrieval effectiveness over the use of stems, which in turn improve retrieval effectiveness over words [3] [4] [5]. Arabic words are divided into three types: noun, verb, and particle [6]. Nouns and verbs are derived from a closed set of around 10,000 roots [7]. The roots are commonly three or four letters and are rarely five letters. Arabic nouns and verbs are derived from roots by applying templates to the roots to generate stems and then introducing prefixes and suffixes. Figure 1 shows some templates for 3 letter roots. Figure 2 shows some of the possible prefixes and suffixes and their perspective meaning. The number of unique Arabic words (or surface forms) is estimated to be 6 x 1010 words [8]. Figure 3 shows some of the words that maybe generated from the root “ktb”. (</context>
<context position="16052" citStr="[6]" startWordPosition="2651" endWordPosition="2651">ed. This is a result of word-root pair errors. Using this smoothing strategy, if a prefix or a suffix is observed only once, then it is removed from the respective list. As for the list of templates, it was reviewed by an Arabic speaker (the author of the paper) to insure the correctness of the templates. The Arabic examiner was aided by example words the system provided for each template. If a template was deemed not correct, it was removed from the list. 3.5 Particles To account for particles, a list of Arabic particles was constructed with aid of An-Nahw Ash-Shamil (an Arabic grammar book) [6]. If the system matched a potential stem to one of the words on the particle list, the system would indicate that the word is a particle. Note that particles are allowed to have suffixes and prefixes. A complete list of the particles used by Sebawai is available upon request. 3.6 Letter Normalizations The system employs a letter normalization strategy in order to account for spelling variations and to ease in the deduction of roots from words. The first normalization deals with the letters “y” and “Y” (alef maqsoura). Both are normalized to “y”. The reason behind this normalization is that the</context>
</contexts>
<marker>6.</marker>
<rawString>Abdul-Al-Aal, Abdul-Monem, An-Nahw Ashamil. Maktabat Annahda Al-Masriya, Cairo, Egypt, 1987.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Ibn Manzour</author>
</authors>
<title>Lisan Al-Arab.</title>
<note>www.muhaddith.org.</note>
<contexts>
<context position="1221" citStr="[7]" startWordPosition="183" endWordPosition="183">he Arabic language, Arabic morphology has become an integral part of many Arabic Information Retrieval (IR) systems. Some of the Arabic IR systems that use morphology include Swift [1] and Sakhr’s electronic publishing software [2]. Some Arabic IR studies have shown that the use of Arabic roots as indexing terms substantially improves the retrieval effectiveness over the use of stems, which in turn improve retrieval effectiveness over words [3] [4] [5]. Arabic words are divided into three types: noun, verb, and particle [6]. Nouns and verbs are derived from a closed set of around 10,000 roots [7]. The roots are commonly three or four letters and are rarely five letters. Arabic nouns and verbs are derived from roots by applying templates to the roots to generate stems and then introducing prefixes and suffixes. Figure 1 shows some templates for 3 letter roots. Figure 2 shows some of the possible prefixes and suffixes and their perspective meaning. The number of unique Arabic words (or surface forms) is estimated to be 6 x 1010 words [8]. Figure 3 shows some of the words that maybe generated from the root “ktb”. (Refer to figure I in the Appendix for the mapping between the Arabic lette</context>
<context position="13505" citStr="[7]" startWordPosition="2209" endWordPosition="2209">t) = P(S1 begins a word, S1 is a prefix) * P(S2 ends a word, S2 is a suffix) * P(T is a template) The probabilities of stems, suffixes, and templates are assumed to be independent. The independence assumption is made to simplify the ranking, but is not necessarily a correct assumption because certain prefix-suffix combinations are not allowed. Using the system requires some smoothing which will be discussed in the next subsection. The generated roots are compared to a list of 10,000 roots extracted automatically from an electronic copy of Lisan alArab to verify their existence in the language [7]. 3.4 Missed or Erroneous Roots As seen above, the system deemed the stem “ym” not feasible, while in actuality the stem maps to the root “ymm”. Other cases where the system failed were when the root had weak letters. Weak letters are “A”, “y”, and “w”. The weak letters are frequently substituted for each other in stem form or dropped all together. For example, the word “qAl” has the root “qwl” or “qyl” which would make the word mean ‘he said’ or ‘he napped’ respectively. Also, the word “f” has the root “wfy” where the letters “w” and “y” are missing. To compensate for these problems, two lett</context>
</contexts>
<marker>7.</marker>
<rawString>Ibn Manzour, Lisan Al-Arab. www.muhaddith.org.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mohamed Attia Ahmed</author>
</authors>
<title>A Large-Scale Computational Processor of the Arabic Morphology, and Applications.” A Master’s Thesis, Faculty of Engineering,</title>
<date>2000</date>
<location>Cairo University, Cairo, Egypt,</location>
<contexts>
<context position="1669" citStr="[8]" startWordPosition="260" endWordPosition="260"> [4] [5]. Arabic words are divided into three types: noun, verb, and particle [6]. Nouns and verbs are derived from a closed set of around 10,000 roots [7]. The roots are commonly three or four letters and are rarely five letters. Arabic nouns and verbs are derived from roots by applying templates to the roots to generate stems and then introducing prefixes and suffixes. Figure 1 shows some templates for 3 letter roots. Figure 2 shows some of the possible prefixes and suffixes and their perspective meaning. The number of unique Arabic words (or surface forms) is estimated to be 6 x 1010 words [8]. Figure 3 shows some of the words that maybe generated from the root “ktb”. (Refer to figure I in the Appendix for the mapping between the Arabic letters and their Latin representations). Further, a word may be derived from several different roots. For example the word “AymAn” can be derived from five different roots. Figure 4 shows possible roots for the word “AymAn” and the meaning of the word based on each. For the purposes of this paper, a word is any Arabic surface form, a stem is a word without any prefixes or suffixes, and a root is a linguistic unit of meaning, which has no prefix, su</context>
<context position="3110" citStr="[8]" startWordPosition="505" endWordPosition="505">ktwb” CCACyC “ktAtyb” CCwC “ktwb” (something (middle (Qur’an (skilled written) letter schools) writer) doubled) Figure 1: Some templates to generate stems from roots with an examples from the root ( “ktb”) Examples of prefixes “w” and “f” Then “Al” the “k” like “l” To “wAl” and the Examples of suffixes “h” his “hm” Their “hA” her “k” your “km” your “y” my (singular) (plural) Figure 2: some examples of prefixes and suffixes and their meanings Building a large-scale morphological analyzers is typically a laborious and time-consuming task. For example, MORPHO3 was developed by RDI in 3 man/years [8]. However, in this paper, we will present a quick method for performing shallow morphological analysis for use in information retrieval, which entails finding the roots of words, in one day. The method is based on collecting statistics from word-root pairs: 1. to build morphological rules for deriving roots from words, 2. to construct a list of prefixes and suffixes, and 3. to estimate the probability that a rule will be used or a prefix or suffix will be seen. This analyzer, called Sebawai, is possibly the first cross-platform freely-distributable analyzer for Arabic. Section 2 will provide b</context>
<context position="5200" citStr="[8]" startWordPosition="833" endWordPosition="833">c (rules governing the combination of morphemes, which are meaning bearing units in the language) and orthographic (spelling rules) rules are programmed into a finite state transducer (FST). Koskenniemi proposed a two-level system for language morphology, which led to Antworth’s two-level morphology system PCKIMMO [9] [19]. Later, Beesley and Buckwalter developed an Arabic morphology system, ALPNET, that uses a slightly enhanced implementation of PC-KIMMO [10]. Currently, ALPNET is owned by Xerox and uses Xerox Finite-State Morphology tools [11]. However, this approach was criticized by Ahmed [8] for requiring excessive manual processing to state rules in an FST and for the ability only to analyze words that appear in Arabic dictionaries. Kiraz summarized many variations of the FST approach [12]. Much information on two-level morphology and PC-Kimmo is available in the PC-KIMMO user’s guide [20]. 2. The Statistical Approach: Goldsmith proposed an unsupervised learning automatic morphology tool called AutoMorphology [14]. This system is advantageous because it learns prefixes, suffixes, and patterns from a corpus or word-list in the target language without any need for human interventi</context>
<context position="6594" citStr="[8]" startWordPosition="1044" endWordPosition="1044">d Approach: This approach uses rules in conjunction with statistics. This approach employs a list of prefixes, a list of suffixes, and templates to transform from a stem to a root. Possible prefix-suffixtemplate combinations are constructed for a word to derive the possible roots. RDI’s system called MORPHO3 utilizes such this model [8]. Although such systems achieve broader morphological coverage of the Arabic language, manual derivation of rules is laborious, time-consuming and requires a good knowledge of Arabic orthographic and morphotactic rules. In fact, MORPHO3 was built in 3 man/years [8]. Large-scale morphological analyzers provide more information than just the root of a word. They may provide information such as the meaning of prefixes and suffixes and may perform root disambiguation [8] [10] [11]. However, this paper is concerned with Figure 3: some of the words that can derived from the root form “ktb” morphological analysis for the purpose of IR. Arabic IR is enhanced when the roots are used in indexing and searching [3] [4] [5]. 3 System Description Sebawai, the system discussed here, is similar to the hybrid approach used by RDI’s MORPHO3 [8]. However, this system does</context>
<context position="7939" citStr="[8]" startWordPosition="1262" endWordPosition="1262">e system has two main modules. The first utilizes a list of Arabic word-root pairs (1) to derive a list of prefixes and suffixes, (2) to construct stem templates, and (3) to compute the likelihood that a prefix, a suffix, or a template would appear. The second accepts Arabic words as input, attempts to construct possible prefixsuffix-temple combinations, and outputs a ranked list of possible roots. 3.1 Getting a list of Word-Root Pairs The list of word-root pairs may be constructed either manually, using a dictionary, or by using a pre-existing morphological analyzer such as ALPNET or MORPHO3 [8] [10]. 1. Manual construction of word-root pair list: Building the list of several thousand pairs manually is time consuming, but feasible. Assuming that a person who knows Arabic can generate a root for a word every 5 seconds, the manual process would require about 14 hours of work to produce 10,000 word-root pairs. 2. Automatic construction of a list using dictionary parsing: Extracting word-root pairs from an electronic dictionary is a feasible process. Since Arabic words are looked up in a dictionary using their root form, an electronic dictionary such as Lisan Al-Arab may be parsed to gen</context>
</contexts>
<marker>8.</marker>
<rawString>Ahmed, Mohamed Attia, “A Large-Scale Computational Processor of the Arabic Morphology, and Applications.” A Master’s Thesis, Faculty of Engineering, Cairo University, Cairo, Egypt, 2000.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kimmo Koskenniemi</author>
</authors>
<title>Two Level Morphology: A General Computational Model for Word-form Recognition and</title>
<date>1983</date>
<tech>Production.” Publication No. 11,</tech>
<institution>Dept. of General Linguistics, University of Helsinki,</institution>
<location>Helsinki,</location>
<contexts>
<context position="4916" citStr="[9]" startWordPosition="792" endWordPosition="792">ymAn” along with the meaning and pronunciation of the word based on the different roots. 2 Background Significant work has been done in the area of the Arabic morphological analysis. The three main approaches to the problem are: 1. The Symbolic Approach: In this approach, morphotactic (rules governing the combination of morphemes, which are meaning bearing units in the language) and orthographic (spelling rules) rules are programmed into a finite state transducer (FST). Koskenniemi proposed a two-level system for language morphology, which led to Antworth’s two-level morphology system PCKIMMO [9] [19]. Later, Beesley and Buckwalter developed an Arabic morphology system, ALPNET, that uses a slightly enhanced implementation of PC-KIMMO [10]. Currently, ALPNET is owned by Xerox and uses Xerox Finite-State Morphology tools [11]. However, this approach was criticized by Ahmed [8] for requiring excessive manual processing to state rules in an FST and for the ability only to analyze words that appear in Arabic dictionaries. Kiraz summarized many variations of the FST approach [12]. Much information on two-level morphology and PC-Kimmo is available in the PC-KIMMO user’s guide [20]. 2. The St</context>
</contexts>
<marker>9.</marker>
<rawString>Koskenniemi, Kimmo, “Two Level Morphology: A General Computational Model for Word-form Recognition and Production.” Publication No. 11, Dept. of General Linguistics, University of Helsinki, Helsinki, 1983.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kenneth Beesley</author>
<author>Tim Buckwalter</author>
<author>Stuart Newton</author>
</authors>
<title>Two-Level Finite-State Analysis of Arabic Morphology.”</title>
<date>1989</date>
<booktitle>Proceedings of the Seminar on Bilingual Computing in Arabic and English,</booktitle>
<location>Cambridge, England,</location>
<contexts>
<context position="5061" citStr="[10]" startWordPosition="812" endWordPosition="812"> of the Arabic morphological analysis. The three main approaches to the problem are: 1. The Symbolic Approach: In this approach, morphotactic (rules governing the combination of morphemes, which are meaning bearing units in the language) and orthographic (spelling rules) rules are programmed into a finite state transducer (FST). Koskenniemi proposed a two-level system for language morphology, which led to Antworth’s two-level morphology system PCKIMMO [9] [19]. Later, Beesley and Buckwalter developed an Arabic morphology system, ALPNET, that uses a slightly enhanced implementation of PC-KIMMO [10]. Currently, ALPNET is owned by Xerox and uses Xerox Finite-State Morphology tools [11]. However, this approach was criticized by Ahmed [8] for requiring excessive manual processing to state rules in an FST and for the ability only to analyze words that appear in Arabic dictionaries. Kiraz summarized many variations of the FST approach [12]. Much information on two-level morphology and PC-Kimmo is available in the PC-KIMMO user’s guide [20]. 2. The Statistical Approach: Goldsmith proposed an unsupervised learning automatic morphology tool called AutoMorphology [14]. This system is advantageous</context>
<context position="6805" citStr="[10]" startWordPosition="1076" endWordPosition="1076">e combinations are constructed for a word to derive the possible roots. RDI’s system called MORPHO3 utilizes such this model [8]. Although such systems achieve broader morphological coverage of the Arabic language, manual derivation of rules is laborious, time-consuming and requires a good knowledge of Arabic orthographic and morphotactic rules. In fact, MORPHO3 was built in 3 man/years [8]. Large-scale morphological analyzers provide more information than just the root of a word. They may provide information such as the meaning of prefixes and suffixes and may perform root disambiguation [8] [10] [11]. However, this paper is concerned with Figure 3: some of the words that can derived from the root form “ktb” morphological analysis for the purpose of IR. Arabic IR is enhanced when the roots are used in indexing and searching [3] [4] [5]. 3 System Description Sebawai, the system discussed here, is similar to the hybrid approach used by RDI’s MORPHO3 [8]. However, this system does not require manually constructed lists of rules and affixes. Instead, the system replaces the manual processing with automatic processing. The system has two main modules. The first utilizes a list of Arabic wo</context>
</contexts>
<marker>10.</marker>
<rawString>Beesley, Kenneth, Tim Buckwalter, and Stuart Newton, “Two-Level Finite-State Analysis of Arabic Morphology.” Proceedings of the Seminar on Bilingual Computing in Arabic and English, Cambridge, England, 1989.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kenneth Beesley</author>
</authors>
<title>Arabic Finite-State Morphological Analysis and Generation.”</title>
<date>1996</date>
<booktitle>COLING-96,</booktitle>
<contexts>
<context position="5148" citStr="[11]" startWordPosition="825" endWordPosition="825"> The Symbolic Approach: In this approach, morphotactic (rules governing the combination of morphemes, which are meaning bearing units in the language) and orthographic (spelling rules) rules are programmed into a finite state transducer (FST). Koskenniemi proposed a two-level system for language morphology, which led to Antworth’s two-level morphology system PCKIMMO [9] [19]. Later, Beesley and Buckwalter developed an Arabic morphology system, ALPNET, that uses a slightly enhanced implementation of PC-KIMMO [10]. Currently, ALPNET is owned by Xerox and uses Xerox Finite-State Morphology tools [11]. However, this approach was criticized by Ahmed [8] for requiring excessive manual processing to state rules in an FST and for the ability only to analyze words that appear in Arabic dictionaries. Kiraz summarized many variations of the FST approach [12]. Much information on two-level morphology and PC-Kimmo is available in the PC-KIMMO user’s guide [20]. 2. The Statistical Approach: Goldsmith proposed an unsupervised learning automatic morphology tool called AutoMorphology [14]. This system is advantageous because it learns prefixes, suffixes, and patterns from a corpus or word-list in the t</context>
<context position="6810" citStr="[11]" startWordPosition="1077" endWordPosition="1077">binations are constructed for a word to derive the possible roots. RDI’s system called MORPHO3 utilizes such this model [8]. Although such systems achieve broader morphological coverage of the Arabic language, manual derivation of rules is laborious, time-consuming and requires a good knowledge of Arabic orthographic and morphotactic rules. In fact, MORPHO3 was built in 3 man/years [8]. Large-scale morphological analyzers provide more information than just the root of a word. They may provide information such as the meaning of prefixes and suffixes and may perform root disambiguation [8] [10] [11]. However, this paper is concerned with Figure 3: some of the words that can derived from the root form “ktb” morphological analysis for the purpose of IR. Arabic IR is enhanced when the roots are used in indexing and searching [3] [4] [5]. 3 System Description Sebawai, the system discussed here, is similar to the hybrid approach used by RDI’s MORPHO3 [8]. However, this system does not require manually constructed lists of rules and affixes. Instead, the system replaces the manual processing with automatic processing. The system has two main modules. The first utilizes a list of Arabic word-ro</context>
</contexts>
<marker>11.</marker>
<rawString>Beesley, Kenneth, “Arabic Finite-State Morphological Analysis and Generation.” COLING-96, 1996.</rawString>
</citation>
<citation valid="false">
<authors>
<author>George Kiraz</author>
</authors>
<title>Arabic Computation Morphology in the West.”</title>
<booktitle>Proceedings of the 6th International Conference and Exhibition on Multi-lingual Computing,</booktitle>
<location>Cambridge,</location>
<contexts>
<context position="5403" citStr="[12]" startWordPosition="866" endWordPosition="866"> proposed a two-level system for language morphology, which led to Antworth’s two-level morphology system PCKIMMO [9] [19]. Later, Beesley and Buckwalter developed an Arabic morphology system, ALPNET, that uses a slightly enhanced implementation of PC-KIMMO [10]. Currently, ALPNET is owned by Xerox and uses Xerox Finite-State Morphology tools [11]. However, this approach was criticized by Ahmed [8] for requiring excessive manual processing to state rules in an FST and for the ability only to analyze words that appear in Arabic dictionaries. Kiraz summarized many variations of the FST approach [12]. Much information on two-level morphology and PC-Kimmo is available in the PC-KIMMO user’s guide [20]. 2. The Statistical Approach: Goldsmith proposed an unsupervised learning automatic morphology tool called AutoMorphology [14]. This system is advantageous because it learns prefixes, suffixes, and patterns from a corpus or word-list in the target language without any need for human intervention. However, such a system would not be effective in Arabic morphology, because it does not address the issues of infixation, and would not detect uncommon prefixes and suffixes. 3. The Hybrid Approach: </context>
<context position="25252" citStr="[12]" startWordPosition="4160" endWordPosition="4160">than 12 hours using about 200 lines of Perl code [21]. Further, the analyzer is able to derive the roots of 40,000 words per minute on a Pentium class machine with 256 MB of RAM running Linux. Also, Sebawai is twice as fast as ALPNET on the same machine. Rewriting Sebawai in a compiled language such as C is likely to improve the analysis speed. Furthermore, the method used to develop this Arabic morphological analyzer can potentially be used to rapidly develop morphological analyzers for other languages. Some languages exhibit morphological properties similar to those of Arabic such as Hebrew [12]. However, the system is restricted in the following aspects: 1. Since it limits the choice of roots to a fixed set, it does not stem words transliterated from other languages such as transliterated named entities. For example, the English word Britain is transliterated as “bryTAnyA”. From “bryTAnyA”, some the words that maybe generated are: “bryTAny” (British), “AlbryTAny” (the British), and “AlbryTAnyyn” (Englishmen). have 3 letter roots. For example, the word  “q” 2. Some words in Arabic are 1 letter long, but means “protect (in the form of command)”. Since they are very rare, they may not</context>
</contexts>
<marker>12.</marker>
<rawString>Kiraz, George, “Arabic Computation Morphology in the West.” Proceedings of the 6th International Conference and Exhibition on Multi-lingual Computing, Cambridge,</rawString>
</citation>
<citation valid="false">
<title>The Temple Project.</title>
<note>http://crl.nmsu.edu/tide/</note>
<marker>13.</marker>
<rawString>The Temple Project. http://crl.nmsu.edu/tide/</rawString>
</citation>
<citation valid="true">
<authors>
<author>John Goldsmith</author>
</authors>
<title>Unsupervised Learning of the Morphology of a Natural Language.” http://humanities.uchicago.edu/faculty/golds mith/,</title>
<date>2000</date>
<contexts>
<context position="5632" citStr="[14]" startWordPosition="896" endWordPosition="896">d implementation of PC-KIMMO [10]. Currently, ALPNET is owned by Xerox and uses Xerox Finite-State Morphology tools [11]. However, this approach was criticized by Ahmed [8] for requiring excessive manual processing to state rules in an FST and for the ability only to analyze words that appear in Arabic dictionaries. Kiraz summarized many variations of the FST approach [12]. Much information on two-level morphology and PC-Kimmo is available in the PC-KIMMO user’s guide [20]. 2. The Statistical Approach: Goldsmith proposed an unsupervised learning automatic morphology tool called AutoMorphology [14]. This system is advantageous because it learns prefixes, suffixes, and patterns from a corpus or word-list in the target language without any need for human intervention. However, such a system would not be effective in Arabic morphology, because it does not address the issues of infixation, and would not detect uncommon prefixes and suffixes. 3. The Hybrid Approach: This approach uses rules in conjunction with statistics. This approach employs a list of prefixes, a list of suffixes, and templates to transform from a stem to a root. Possible prefix-suffixtemplate combinations are constructed </context>
</contexts>
<marker>14.</marker>
<rawString>Goldsmith, John, “Unsupervised Learning of the Morphology of a Natural Language.” http://humanities.uchicago.edu/faculty/golds mith/, 2000.</rawString>
</citation>
<citation valid="false">
<booktitle>Al-Areeb Electronic Publishers, LLC. 16013 Malcolm Dr.,</booktitle>
<location>Laurel, MD 20707, USA</location>
<contexts>
<context position="9192" citStr="[15]" startWordPosition="1464" endWordPosition="1464"> be given to throw away dictionary examples and words unrelated to the root. 3. Automatic construction using a pre-existing morphological analyzer: This process is simple, but requires the availability of an analyzer. For the purposes of this paper, the third method was used to construct the list. Two lists of Arabic words were fed to ALPNET (which was the only Arabic morphological analyzer available to the author) and then the output was parsed to generate the word-root pairs. One list was extracted from a corpus of traditional Arabic text, called Zad, owned by Al-Areeb Electronic Publishers [15]. The list contains 9,606 words that ALPNET was able to analyze successfully. The original list was larger, but the words that ALPNET was unable to analyze were excluded. The other list was extracted from the LDC Arabic collection (LDC2001T55) containing AFP news-wire stories [16]. This list contains 560,000 words. Of the 560,000 words, ALPNET was able to analyze 270,000 words successfully. The rest of the words (about 290,000) were used for evaluating Sebawai. 3.2 Training As stated above, this module takes a word-root pair as input. By comparing the word to the root, the system determines th</context>
</contexts>
<marker>15.</marker>
<rawString>Al-Areeb Electronic Publishers, LLC. 16013 Malcolm Dr., Laurel, MD 20707, USA</rawString>
</citation>
<citation valid="true">
<authors>
<author>Andy Cole</author>
<author>David Graff</author>
<author>Kevin Walker</author>
</authors>
<date></date>
<journal>Arabic Newswire Part</journal>
<booktitle>Linguistic Data Consortium (LDC). www.ldc.upenn.edu</booktitle>
<volume>1</volume>
<contexts>
<context position="9473" citStr="[16]" startWordPosition="1508" endWordPosition="1508">nstruct the list. Two lists of Arabic words were fed to ALPNET (which was the only Arabic morphological analyzer available to the author) and then the output was parsed to generate the word-root pairs. One list was extracted from a corpus of traditional Arabic text, called Zad, owned by Al-Areeb Electronic Publishers [15]. The list contains 9,606 words that ALPNET was able to analyze successfully. The original list was larger, but the words that ALPNET was unable to analyze were excluded. The other list was extracted from the LDC Arabic collection (LDC2001T55) containing AFP news-wire stories [16]. This list contains 560,000 words. Of the 560,000 words, ALPNET was able to analyze 270,000 words successfully. The rest of the words (about 290,000) were used for evaluating Sebawai. 3.2 Training As stated above, this module takes a word-root pair as input. By comparing the word to the root, the system determines the prefix, suffix, and stem template. For example, given the pair ( “wktAbhm”, “ktb”), the system generates “w” as the prefix, “hm” as the suffix, and “CCAC” as the stem template (C’s represent the letters in the root). The system increases the number of occurrences of the prefix “</context>
</contexts>
<marker>16.</marker>
<rawString>Cole, Andy, David Graff, and Kevin Walker, “Arabic Newswire Part 1 Corpus (1-58563-190-6)”, Linguistic Data Consortium (LDC). www.ldc.upenn.edu</rawString>
</citation>
<citation valid="true">
<authors>
<author>Daniel Jurafsky</author>
<author>James Martin</author>
</authors>
<date>2000</date>
<booktitle>Speech and Language Processing.”</booktitle>
<publisher>Prentice Hall,</publisher>
<location>New Jersey,</location>
<contexts>
<context position="15362" citStr="[17]" startWordPosition="2534" endWordPosition="2534">lated: (a) the probability that a weak letter w1 would be transformed to another weak letter w2, (b) the probability that a two letter word would have a root with the second letter doubled (such as “ymm”), and (c) the probability that a two letter word was derived from a root by dropping an initial or trailing weak letter. The new probability of the root becomes: P(root) = P(S1 begins a word, S1 is a prefix) * P(S2 ends a word, S2 is a suffix) * P(T is a template) * P(letter substitution or letter addition) As for smoothing the prefix and suffix probabilities, Witten-Bell discounting was used [17]. The smoothing is necessary because many prefixes and suffixes were erroneously produced. This is a result of word-root pair errors. Using this smoothing strategy, if a prefix or a suffix is observed only once, then it is removed from the respective list. As for the list of templates, it was reviewed by an Arabic speaker (the author of the paper) to insure the correctness of the templates. The Arabic examiner was aided by example words the system provided for each template. If a template was deemed not correct, it was removed from the list. 3.5 Particles To account for particles, a list of Ar</context>
</contexts>
<marker>17.</marker>
<rawString>Jurafsky, Daniel and James Martin, “Speech and Language Processing.” Prentice Hall, New Jersey, 2000.</rawString>
</citation>
<citation valid="false">
<institution>The Holy Qur’an.</institution>
<contexts>
<context position="16913" citStr="[18]" startWordPosition="2807" endWordPosition="2807">lable upon request. 3.6 Letter Normalizations The system employs a letter normalization strategy in order to account for spelling variations and to ease in the deduction of roots from words. The first normalization deals with the letters “y” and “Y” (alef maqsoura). Both are normalized to “y”. The reason behind this normalization is that there is no one convention for spelling “y” or “Y” when either appears at the end of a word (Note that “Y” only appears at the end of a word). In the Othmani script of the Holy Qur’an for example, any “y” is written as “Y” when it appears at the end of a word [18]. The second normalization is that of “” (hamza), “” (alef maad), “” (alef with hamza on top), “ ” (hamza on w), “” (alef with hamza on the bottom), and “ ” (hamza on ya). The reason for this normalization is that all forms of hamza are represented in dictionaries as one in root form namely “” or “”, depending on the dictionary, and people often misspell different forms of alef. All are normalized to the symbol “A”. 4 Evaluation and Discussion To evaluate Sebawai, it was compared to ALPNET. A random set of a 100 word-root pairs produced by ALPNET was manually examined to verify their correct</context>
</contexts>
<marker>18.</marker>
<rawString>The Holy Qur’an.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Evan L Antworth</author>
</authors>
<title>PC-KIMMO: a two-level processor for morphological analysis.“</title>
<date>1990</date>
<booktitle>Occasional Publications in Academic Computing No. 16. Dallas, TX: Summer Institute of Linguistics,</booktitle>
<contexts>
<context position="4921" citStr="[19]" startWordPosition="793" endWordPosition="793">” along with the meaning and pronunciation of the word based on the different roots. 2 Background Significant work has been done in the area of the Arabic morphological analysis. The three main approaches to the problem are: 1. The Symbolic Approach: In this approach, morphotactic (rules governing the combination of morphemes, which are meaning bearing units in the language) and orthographic (spelling rules) rules are programmed into a finite state transducer (FST). Koskenniemi proposed a two-level system for language morphology, which led to Antworth’s two-level morphology system PCKIMMO [9] [19]. Later, Beesley and Buckwalter developed an Arabic morphology system, ALPNET, that uses a slightly enhanced implementation of PC-KIMMO [10]. Currently, ALPNET is owned by Xerox and uses Xerox Finite-State Morphology tools [11]. However, this approach was criticized by Ahmed [8] for requiring excessive manual processing to state rules in an FST and for the ability only to analyze words that appear in Arabic dictionaries. Kiraz summarized many variations of the FST approach [12]. Much information on two-level morphology and PC-Kimmo is available in the PC-KIMMO user’s guide [20]. 2. The Statist</context>
</contexts>
<marker>19.</marker>
<rawString>Antworth, Evan L, “PC-KIMMO: a two-level processor for morphological analysis.“ Occasional Publications in Academic Computing No. 16. Dallas, TX: Summer Institute of Linguistics, 1990.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Evan L Antworth</author>
</authors>
<note>PC-KIMMO User’s Guide.” www.sil.org/pckimmo/v2/doc/guide.html,</note>
<contexts>
<context position="5505" citStr="[20]" startWordPosition="881" endWordPosition="881">tem PCKIMMO [9] [19]. Later, Beesley and Buckwalter developed an Arabic morphology system, ALPNET, that uses a slightly enhanced implementation of PC-KIMMO [10]. Currently, ALPNET is owned by Xerox and uses Xerox Finite-State Morphology tools [11]. However, this approach was criticized by Ahmed [8] for requiring excessive manual processing to state rules in an FST and for the ability only to analyze words that appear in Arabic dictionaries. Kiraz summarized many variations of the FST approach [12]. Much information on two-level morphology and PC-Kimmo is available in the PC-KIMMO user’s guide [20]. 2. The Statistical Approach: Goldsmith proposed an unsupervised learning automatic morphology tool called AutoMorphology [14]. This system is advantageous because it learns prefixes, suffixes, and patterns from a corpus or word-list in the target language without any need for human intervention. However, such a system would not be effective in Arabic morphology, because it does not address the issues of infixation, and would not detect uncommon prefixes and suffixes. 3. The Hybrid Approach: This approach uses rules in conjunction with statistics. This approach employs a list of prefixes, a l</context>
</contexts>
<marker>20.</marker>
<rawString>Antworth, Evan L, “PC-KIMMO User’s Guide.” www.sil.org/pckimmo/v2/doc/guide.html,</rawString>
</citation>
<citation valid="false">
<authors>
<author>Perl</author>
</authors>
<note>www.perl.com</note>
<contexts>
<context position="24701" citStr="[21]" startWordPosition="4070" endWordPosition="4070">i significantly harmed retrieval. A likely reason for the fall in mean average precision when the second root was introduced is that the second root amounted to noise. 4.4 Success and Limitations The evaluation method clearly shows the effectiveness of Sebawai. In fact, Sebawai significantly outperformed ALPNET in retrieval experiments. The analyzer is often able to detect roots that were missed by a commercially available system. Also, due to the fact that rule are derived automatically, Sebawai was developed very rapidly. It was built in less than 12 hours using about 200 lines of Perl code [21]. Further, the analyzer is able to derive the roots of 40,000 words per minute on a Pentium class machine with 256 MB of RAM running Linux. Also, Sebawai is twice as fast as ALPNET on the same machine. Rewriting Sebawai in a compiled language such as C is likely to improve the analysis speed. Furthermore, the method used to develop this Arabic morphological analyzer can potentially be used to rapidly develop morphological analyzers for other languages. Some languages exhibit morphological properties similar to those of Arabic such as Hebrew [12]. However, the system is restricted in the follow</context>
</contexts>
<marker>21.</marker>
<rawString>Perl. www.perl.com</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>