<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000005">
<note confidence="0.764197">
TREATMENT OF LONG DISTANCE DEPENDENCIES IN LFG AND TAG:
FUNCTIONAL UNCERTAINTY IN LFG IS A COROLLARY IN TAG*
</note>
<author confidence="0.658502">
Aravind K. Joshi
</author>
<affiliation confidence="0.965015">
Dept. of Computer &amp; Information Science
University of Pennsylvania
</affiliation>
<address confidence="0.733638">
Philadelphia, PA 19104
</address>
<email confidence="0.981156">
joshi@linc.cis.upenn.edu
</email>
<author confidence="0.798986">
K. Vijay-Shanker
</author>
<affiliation confidence="0.9865735">
Dept. of Computer &amp; Information Science
University of Delaware
</affiliation>
<address confidence="0.860204">
Newark, DE 19716
</address>
<email confidence="0.993012">
vijay@udel.edu
</email>
<sectionHeader confidence="0.98905" genericHeader="abstract">
ABSTRACT
</sectionHeader>
<bodyText confidence="0.999913">
In this paper the functional uncertainty machin-
ery in LFG is compared with the treatment of long
distance dependencies in TAG. It is shown that
the functional uncertainty machinery is redundant
in TAG, i.e., what functional uncertainty accom-
plishes for LFG follows from the TAG formalism
itself and some aspects of the linguistic theory in-
stantiated in TAG. It is also shown that the anal-
yses provided by the functional uncertainty ma-
chinery can be obtained without requiring power
beyond mildly context-sensitive grammars. Some
linguistic and computational aspects of these re-
sults have been briefly discussed also.
</bodyText>
<sectionHeader confidence="0.999565" genericHeader="introduction">
1 INTRODUCTION
</sectionHeader>
<bodyText confidence="0.999958888888889">
The so-called long distance dependencies are char-
acterized in Lexical Functional Grammars (LFG)
by the use of the formal device of functional un-
certainty, as defined by Kaplan and Zaenan [3]
and Kaplan and Maxwell [2]. In this paper, we
relate. this characterization to that provided by
Tree Adjoining Grammars (TAG), showing a di-
rect correspondence between the functional uncer-
tainty equations in LFG analyses and the elemen-
tary trees in TAGs that give analyses for &amp;quot;long dis-
tance&amp;quot; dependencies. We show that the functional
uncertainty machinery is redundant in TAG, i.e.,
what functional uncertainty accomplishes for LFG
follows from the TAG formalism itself and some
fundamental aspects of the linguistic theory in-
stantiated in TAG. We thus show that these anal-
yses can be obtained without requiring power be-
yond mildly context-sensitive grammars. We also
</bodyText>
<note confidence="0.648293666666667">
â€¢This work was partially supported (for the first au-
thor) by the DARPA grant N00014-85-K0018, ARO grant
DAA29-84-9-0027, and NSF grant 1R184-10413-A02. The
first author also benefited from some discussion with Mark
Johnson and Ron Kaplan at the Titisee Workshop on Uni-
fication Grammars, March, 1988.
</note>
<bodyText confidence="0.99726975">
briefly discuss the linguistic and computational
significance of these results.
Long distance phenomena are associated with
the so-called movement. The following examples,
</bodyText>
<listItem confidence="0.98883075">
1. Mary Henry telephoned.
2. Mary Bill said that Henry telephoned.
3. Mary John claimed that Bill said that Henry
telephoned.
</listItem>
<bodyText confidence="0.999469227272728">
illustrate the long distance dependencies due to
topicalization, where the verb telephoned and its
object Mary can be arbitrarily apart. It is diffi-
cult to state generalizations about these phenom-
ena if one relies entirely on the surface structure
(as defined in CFG based frameworks) since these
phenomena cannot be localized at this level. Ka-
plan and Zaenan [3] note that, in LFG, rather than
stating the generalizations on the c-structure, they
must be stated on f-structures, since long distance
dependencies are predicate argument dependen-
cies, and such functional dependencies are rep-
resented in the f-structures. Thus, as stated in
[2, 3], in the sentences (1), (2), and (3) above,
the dependencies are captured by the equations
(in the LFG notationl) by I TOPIC =1 OBJ,
I TOPIC =T COMP OBJ, and I TOPIC =1
COMP COMP OBJ, respectively, which state
that, the topic Mary is also the object of tele-
phoned. In general, since any number of additional
complement predicates may be introduced, these
equations will have the general form
</bodyText>
<sectionHeader confidence="0.239601" genericHeader="method">
TOPIC =1 COMP COMP ... OBJ
</sectionHeader>
<bodyText confidence="0.987855333333333">
Kaplan and Zaenen [3] introduced the formal
device of functional uncertainty, in which this gen-
eral case is stated by the equation
</bodyText>
<footnote confidence="0.696099">
1Because of lack of space, we will not define the LFG
notation. We assume that the reader is familiar with it.
</footnote>
<page confidence="0.98452">
220
</page>
<note confidence="0.668479">
I TOPIC =1 COMP&apos;OBJ
</note>
<bodyText confidence="0.995405090909091">
The functional uncertainty device restricts the
labels (such as COMP&apos;) to be drawn from the
class of regular expressions. The definition of f-
structures is extended to allow such equations [2,
3]. Informally, this definition states that if f is a
f-structure and a is a regular set, then (f a) = v
holds if the value of f for the attribute s is a
structure Ii fi such that (fly) = v holds, where sy
is a string in a, or f = v and c E a.
The functional uncertainty approach may be
characterized as a localization of the long dis-
tance dependencies; a localization at the level of f-
structures rather than at the level of c-structures.
This illustrates the fact that if we use CFG-like
rules to produce the surface structures, it is hard
to state some generalizations directly; on the other
hand, f-structures or elementary trees in TAGs
(since they localize the predicate argument depen-
dencies) are appropriate domains in which to state
these generalizations. We show that there is a di-
rect link between the regular expressions used in
LFG and the elementary trees of TAG.
</bodyText>
<subsectionHeader confidence="0.995816">
1.1 OUTLINE OF THE PAPER
</subsectionHeader>
<bodyText confidence="0.969112470588235">
In Section 2, we will define briefly the TAG for-
malism, describing some of the key points of the
linguistic theory underlying it. We will also de-
scribe briefly Feature Structure Based Tree Ad-
joining Grammars (FTAG), and show how some
elementary trees (auxiliary trees) behave as func-
tions over feature structures. We will then show
how regular sets over labels (such as COMP&apos;) can
also be denoted by functions over feature struc-
tures. In Section 3, we will consider the example of
topicalization as it appears in Section 1 and show
that the same statements are made by the two
formalisms when we represent both the elemen-
tary trees of FTAG and functional uncertainties
in LFG as functions over feature structures. We
also point out some differences in the two analy-
ses which arise due to the differences in the for-
malisms. In Section 4, we point out how these
similar statements are stated differently in the two
formalisms. The equations that capture the lin-
guistic generalizations are still associated with in-
dividual rules (for the c-structure) of the grammar
in LFG. &apos;rims, in order to state generalizations
for a phenomenon that is not localized in the c-
structure, extra machinery such as functional un-
certainty is needed. We show that what this extra
machinery achieves for CFG based systems follows
as a corollary of the TAG framework. This results
from the fact that the elementary trees in a TAG
provide an extended domain of locality, and factor
out recursion and dependencies. A computational
consequence of this result is that we can obtain
these analyses without going outside the power
of TAG and thus staying within the class of con-
strained grammatical formalisms characterized as
mildly context-sensitive (Joshi [1]). Another con-
sequence of the differences in the representations
(and localization) in the two formalisms is as fol-
lows. In a TAG, once an elementary tree is picked,
there is no uncertainty about the functionality in
long distance dependencies. Because LFG relies
on a CFG framework, interactions between uncer-
tainty equations can arise; the lack of such interac-
tions in TAG can lead to simpler processing of long
distance dependencies. Finally, we make some re-
marks as to the linguistic significance of restrict-
ing the use of regular sets in the functional uncer-
tainty machinery by showing that the linguistic
theory instantiated in TAG can predict that the
path depicting the &amp;quot;movement&amp;quot; in long distance
dependencies can be characterized by regular sets.
</bodyText>
<sectionHeader confidence="0.996792" genericHeader="method">
2 INTRODUCTION TO TAG
</sectionHeader>
<bodyText confidence="0.954190814814815">
Tree Adjoining Grammars (TAGs) are tree rewrit-
ing systems that are specified by a finite set of
elementary trees. An operation called adjoining2
is used to compose trees. The key property of
the linguistic theory of TAGs is that TAGs allow
factoring of recursion from the domain of depen-
dencies, which are defined by the set of elemen-
tary trees. Thus, the elementary trees in a TAG
correspond to minimal linguistic structures that
localize the dependencies such as agreement, sub-
categorization, and filler-gap. There are two kinds
of elementary trees: the initial trees and auxiliary
trees. The initial trees (Figure 1) roughly corre-
spond to &amp;quot;simple sentences&amp;quot;. Thus, the root of an
initial tree is labeled by S or S. The frontier is all
terminals.
The auxiliary trees (Figure 1) correspond
roughly to minimal recursive constructions. Thus,
if the root of an auxiliary tree is labeled by a non-
terminal symbol, X, then there is a node (called
the foot node) in the frontier which is labeled by
X. The rest of the nodes in the frontier are labeled
by terminal symbols.
2We do not consider lexicalized TAGs (defined by Sch-
abes, Abeille, and Joshi [7]) which allow both adjoining
and substitution. The results of this paper apply directly
to them. Besides, they are formally equivalent to TAGs.
</bodyText>
<page confidence="0.97685">
221
</page>
<figure confidence="0.959607458333333">
As Widen,
go&amp;quot;
falir PIP
VeeNi
/NvP
V
As main um
2. The relation of n to its descendants, i.e., the
view from below. This feature structure is
called bn.
a:
P/NVP
t root
X broot
x t foot
brooi
E/XN
t/Nvp\
I ;
..*. ,,, .......
Figure 2: Feature Structures and Adjoining
r s
Pâ€¢â€¢â– / , â€¢ NP â€¢ VP
adisixiss If was â€¢
</figure>
<figureCaption confidence="0.999962">
Figure 1: Elementary Trees in a TAG
</figureCaption>
<bodyText confidence="0.999933888888889">
We will now define the operation of adjoining.
Consider the adjoining of ,3 at the node marked
with * in a. The subtree of a under the node
marked with * is excised, and ,3 is inserted in its
place. Finally, the excised subtree is inserted be-
low the foot node of ai as shown in Figure 1.
A more detailed description of TAGs and their
linguistic relevance may be found in (Kroch and
Joshi [5]).
</bodyText>
<sectionHeader confidence="0.991437666666667" genericHeader="method">
2.1 FEATURE STRUCTURE BASED
TREE ADJOINING GRAMMARS
(FTAG)
</sectionHeader>
<bodyText confidence="0.9992106">
In unification grammars, a feature structure is as-
sociated with a node in a derivation tree in order
to describe that node and its relation to features
of other nodes in the derivation tree. In a FTAG,
with each internal node, q, we associate two fea-
ture structures (for details, see [9]). These two
feature structures capture the following relations
(Figure 2)
1. The relation of q to its supertree, i.e., the view
of the node from the top. The feature struc-
ture that describes this relationship is called
Note that both the i,, and br, feature structures
hold for the node q. On the other hand, with each
leaf node (either a terminal node or a foot node),
lb we associate only one feature structure (let us
call it 413).
Let us now consider the case when adjoining
takes place as shown in the Figure 2. The notation
we use is to write alongside each node, the t and b
statements, with the t statement written above the
b statement. Let us say that
-root)broot and tfoot =
11100t are the t and b statements of the root and
foot nodes of the auxiliary tree used for adjoining
at the node q. Based on what t and b stand for, it
is obvious that on adjoining the statements In and
troot hold for the node corresponding to the root
of the auxiliary tree. Similarly, the statements
and bfoot hold for the node corresponding to the
foot of the auxiliary tree. Thus, on adjoining, we
unify I,, with trâ€žot, and 141 with bfoot. In fact,
this adjoining -is permissible only if t,.oâ€žt and tâ€ž
are compatible and so are b1 00g and b,,. If we do
not adjoin at the node, q, then we unify I,, with
bâ€ž. More details of the definition of FTAG may be
found in [8, 9].
We now give an example of an initial tree and an
auxiliary tree in Figure 3. We have shown only the
necessary top and bottom feature structures for
the relevant nodes. Also in each feature structure
</bodyText>
<footnote confidence="0.957535">
3The linguistic relevance of this restriction has been dis-
cussed elsewhere (Kroch and Joshi [5]). The general frame-
work does not necessarily require it.
</footnote>
<page confidence="0.996115">
222
</page>
<bodyText confidence="0.999195684210526">
shown, we have only included those feature-value
pairs that are relevant. For the auxiliary tree, we
have labeled the root node S. We could have la-
beled it S with COMP and S as daughter nodes.
These details are not relevant to the main point
of the paper. We note that, just as in a TAG, the
elementary trees which are the domains of depen-
dencies are available as a single unit during each
step of the derivation. For example, in al the topic
and the object of the verb belong to the same tree
(since this dependency has been factored into ai)
and are coindexed to specify the movement due to
topicalization. In such cases, the dependencies be-
tween these nodes can be stated directly, avoiding
the percolation of features during the derivation
process as in string rewriting systems. Thus, these
dependencies can be checked locally, and thus this
checking need not be linked to the derivation pro-
cess in an unbounded manner.
</bodyText>
<figure confidence="0.996627666666667">
t
r
1â€¢44:1131
I
hi&amp;quot; SIP VT
I VN
Om V Np
I I
soplumod
</figure>
<figureCaption confidence="0.9997875">
Figure 3: Example of Feature Structures Associ-
ated with Elementary Trees
</figureCaption>
<bodyText confidence="0.983771935483871">
to adjoining, since this feature structure is not
known, we will treat it as a variable that gets in-
stantiated on adjoining. This treatment can be
formalized by treating the auxiliary trees as func-
tions over feature structures (by .A-abstracting the
variable corresponding to the feature structure for
the tree that will appear below the foot node).
Adjoining corresponds to applying this function to
the feature structure corresponding to the subtree
below the node where adjoining takes place.
Treating adjoining as function application,
where we consider auxiliary trees as functions, the
representation of p is a function, say f, of the
form (see Figure 2)
Af.(troot A .. â€¢ (b100t A f))
If we now consider the tree 7 and the node 9, to
allow the adjoining of ft at the node 9, we must
represent 7 by
Note that if we do not adjoin at 77, since t,7 and
/3,7 have to be unified, we must represent 7 by the
formula
(...tn A 6,7 A ...)
which can be obtained by representing 7 by
where I is the identity function. Similarly, we
must allow adjoining by any auxiliary tree adjoin-
able at q (admissibility of adjoining is determined
by the success or failure of unification). Thus, if
/A,. â€¢ â€¢ ,j3, form the set of auxiliary trees, to allow
for the possibility of adjoining by any auxiliary
tree, as well as the possibility of no adjoining at a
node, we must have a function, F, given by
</bodyText>
<equation confidence="0.409316">
F = Af.(foi(f)v v f(f) V f)
</equation>
<bodyText confidence="0.9930402">
and then we represent 7 by
In this way, we can represent the elementary trees
(and hence the grammar) in an extended version
of R-K logic (the extension consists of adding .\-
abstraction and application).
</bodyText>
<sectionHeader confidence="0.5740935" genericHeader="method">
2.2 A CALCULUS TO REPRESENT
FTAG
</sectionHeader>
<bodyText confidence="0.998946444444445">
In [8, 9], we have described a calculus, extending
the logic developed by Rounds and Kasper [4, 6],
to encode the trees in a FTAG. We will very briefly
describe this representation here.
To understand the representation of adjoining,
consider the trees given in Figure 2, and in partic-
ular, the node q. The feature structures associated
with the node where adjoining takes place should
reflect the feature structure after adjoining and as
well as without adjoining. Further, the feature
structure (corresponding to the tree structure be-
low it) to be associated with the foot node is not
known prior to adjoining, but becomes specified
upon adjoining. Thus, the bottom feature struc-
ture associated with the foot node, which is 6100t
before adjoining, is instantiated on adjoining by
unifying it with a feature structure for the tree
that will finally appear below this node. Prior
</bodyText>
<page confidence="0.997705">
223
</page>
<sectionHeader confidence="0.961468333333333" genericHeader="method">
3 LFG AND TAG ANALYSES
FOR LONG DISTANCE DE-
PENDENCIES
</sectionHeader>
<bodyText confidence="0.999937047619048">
We will now relate the analyses of long distance de-
pendencies in LFG and TAG. For this purpose, we
will focus our attention only on the dependencies
due to topicalization, as illustrated by sentences
1, 2, and 3 in Section 1.
To facilitate our discussion, we will consider reg-
ular sets over labels (as used by the functional
uncertainty machinery) as functions over feature
structures (as we did for auxiliary trees in FTAG).
In order to describe the representation of regu-
lar sets, we will treat all labels (attributes) as
functions over feature structures. Thus, the label
COMP, for example, is a function which given a
value feature structure (say v) returns a feature
structure denoted by COMP : v. Therefore, we
can denote it by Av.COMP : v. In order to de-
scribe the representation of arbitrary regular sets
we have to consider only their associated regular
expressions. For example, COMP&amp;quot; can be repre-
sented by the function C* which is the fixed-point4
of
</bodyText>
<equation confidence="0.990399333333333">
F = Av.(F(COMP : v)V v)5
Thus, the equation
TOPIC =1 COMP*OBJ
</equation>
<bodyText confidence="0.977790526315789">
is satisfied by a feature structure that satisfies
TOPIC : v A C * (OBJ : v). This feature
structure will have a general form described by
TOPIC : v A COMP :COMP : ...OBJ : v.
Consider the FTAG fragment (as shown in Fig-
ure 3) which can be used to generate the sentences
1, 2, and 3 in Section 1. The initial tree al will
be represented by cat : 37A F(topic : v A F(pred :
telephonedAobj : v)). Ignoring some irrelevant de-
tails (such as the possibility of adjoining at nodes
other than the S node), we can represent al as
al = topic: v A F(obj : v)
Turning our attention to /31, let us consider the
bottom feature structure of the root of )31. Since
its COMP is the feature structure associated with
the foot node (notice that no adjoining is allowed
at the foot node and hence it has only one feature
structure), and since adjoining can take place at
the root node, we have the representation of 01 as
</bodyText>
<footnote confidence="0.7274415">
4 In [8] , we have established that the fixed-point exists.
5We use the fact that Râ€¢ = FeliU {e}.
</footnote>
<equation confidence="0.494393">
Af.F(comp : f A subj : (...) A .. .)
</equation>
<bodyText confidence="0.9998115">
where F is the function described in Section 2.2.
From the point of view of the path from the root
to the complement, the NP and VP nodes are
irrelevant, so are any adjoinings on these nodes.
So once again, if we discard the irrelevant infor-
mation (from the point of view of comparing this
analyses with the one in LFG), we can simplify
the representation of gl as
</bodyText>
<equation confidence="0.704324">
Af.F(cornp : f)
</equation>
<bodyText confidence="0.998136">
As explained in Section 2.2, since 131 is the only
auxiliary tree of interest, F would be defined as
F = Af./31(f)V f. Using the definition of /31 above,
and making some reductions we have
</bodyText>
<equation confidence="0.966455">
F = AfF(comp : f) V f
</equation>
<bodyText confidence="0.9993038">
This is exactly the same analysis as in LFG using
the functional uncertainty machinery. Note that
the fixed-point of F is C*. Now consider al. Ob-
viously any structure derived from it can now be
represented as
</bodyText>
<equation confidence="0.818555">
topic : v A C * (obj : v)
</equation>
<bodyText confidence="0.999792764705883">
This is the same analysis as given by LFG.
In a TAG, the dependent items are part of the
same elementary tree. Features of these nodes can
be related locally within this elementary tree (as
in al). This relation is unaffected by any adjoin-
ings on nodes of the elementary tree. Although
the paths from the root to these dependent items
are elaborated by the adjoinings, no external de-
vice (such as the functional uncertainty machin-
ery) needs to be used to restrict the possible paths
between the dependent nodes. For instance, in
the example we have considered, the fact that
TOPIC = COMP : COMP... : OBJ follows
from the TAG framework itself. The regular path
restrictions made in functional uncertainty state-
ments such as in TOPIC = COMP*OBJ is re-
dundant within the TAG framework.
</bodyText>
<sectionHeader confidence="0.9996305" genericHeader="method">
4 COMPARISON OF THE TWO
FORMALISMS
</sectionHeader>
<bodyText confidence="0.9998742">
We have compared LFG and TAG analyses of
long distance dependencies, and have shown that
what functional uncertainty does for LFG comes
out as a corollary in TAG, without going beyond
the power of mildly context sensitive grammars.
</bodyText>
<page confidence="0.607567">
22 1
</page>
<bodyText confidence="0.99997471875">
Both approaches aim to localize long distance de-
pendencies; the difference between TAG and LFG
arises due to the domain of locality that the for-
malisms provide (i.e., the domain over which state-
ments of dependencies can be stated within the
formalisms).
In the LFG framework, CFG-like productions
are used to build the c-structure. Equations are
associated with these productions in order to build
the f-structure. Since the long distance depen-
dencies are localized at the functional level, addi-
tional machinery (functional uncertainty) is pro-
vided to capture this localization. In a TAG, the
elementary trees, though used to build the &amp;quot;phrase
structure&amp;quot; tree, also form the domain for localizing
the functional dependencies. As a result, the long
distance dependencies can be localized in the el-
ementary trees. Therefore, such elementary trees
tell us exactly where the filler &amp;quot;moves&amp;quot; (even in
the case of such unbounded dependencies) and the
functional uncertainty machinery is not necessary
in the TAG framework. However, the functional
uncertainty machinery makes explicit the predic-
tions about the path between the &amp;quot;moved&amp;quot; argu-
ment (filler) and the predicate (which is close to
the gap). In a TAG, this prediction is not explicit.
Hence, as we have shown in the case of topicaliza-
tion, the nature of elementary trees determines the
derivation sequences allowed and we can confirm
(as we have done in Section 3) that this predic-
tion is the same as that made by the functional
uncertainty machinery.
</bodyText>
<sectionHeader confidence="0.999364" genericHeader="method">
4.1 INTERACTIONS AMONG UNCER-
TAINTY EQUATIONS
</sectionHeader>
<bodyText confidence="0.9997206">
The functional uncertainty machinery is a means
by which infinite disjunctions can be specified in
a finite manner. The reason that infinite number
of disjunctions appear, is due to the fact that they
correspond to infinite number of possible deriva-
tions. In a CFG based formalism, the checking of
dependency cannot be separated from the deriva-
tion process. On the other hand, as shown in [9],
since this separation is possible in TAG, only fi-
nite disjunctions are needed. In each elementary
tree, there is no uncertainty about the kind of de-
pendency between a filler and the position of the
corresponding gap. Different dependencies corre-
spond to different elementary trees. In this sense
there is disjunction, but it is still only finite. Hav-
ing picked one tree, there is no uncertainty about
the grammatical function of the filler, no matter
how many COMPs come in between due to adjoin-
ing. This fact may have important consequences
from the point of view of relative efficiency of pro-
cessing of long distance dependencies in LFG and
TAG. Consider, for example, the problem of in-
teractions between two or more uncertainty equa-
tions in LFG as stated in [2]. Certain strings in
COMP cannot be solutions for
</bodyText>
<equation confidence="0.679069">
(1 TOPIC)=(f COMP* GF)
</equation>
<bodyText confidence="0.997891583333333">
when this equation is conjoined (i.e., when it in-
teracts) with (f COMP SUBJ NUM)= SING
and (f TOPIC NUM) = PL. In this case, the
shorter string COMP SUBJ cannot be used for
COMP* GF because of the interaction, although
the strings COMP SUBJ, i&gt; 2 can satisfy the
above set of equations. In general, in LFG, extra
work has to be done to account for interactions.
On the other hand, in TAG, as we noted above,
since there is no uncertainty about the grammat-
ical function of the filler, such interactions do not
arise at all.
</bodyText>
<sectionHeader confidence="0.914415" genericHeader="method">
4.2 REGULAR SETS IN FUNCTIONAL
UNCERTAINTY
</sectionHeader>
<bodyText confidence="0.999980586206896">
From the definition of TAGs, it can be shown that
the paths are always context-free sets [11]. If there
are linguistic phenomena where the uncertainty
machinery with regular sets is not enough, then
the question arises whether TAG can provide an
adequate analysis, given that paths are context-
free sets in TAGs. On the other hand, if regular
sets are enough, we would like to explore whether
the regularity requirement has a linguistic signif-
icance by itself. As far as we are aware, Kaplan
and Zaenen [3] do not claim that the regularity
requirement follows from the linguistic considera-
tions. Rather, they have illustrated the adequacy
of regular sets for the linguistic phenomena they
have described. However, it appears that an ap-
propriate linguistic theory instantiated in the TAG
framework will justify the use of regular sets for
the long distance phenomena considered here.
To illustrate our claim, let us consider the el-
ementary trees that are used in the TAG anal-
ysis of long distance dependencies. The elemen-
tary trees, al and 1(31 (given in Figure 3), are good
representative examples of such trees. In the ini-
tial tree, al, the topic node is coindexed with the
empty NP node that plays the grammatical role
of object. At the functional level, this NP node
is the object of the S node of al (which is cap-
tured in the bottom feature structure associated
with the S node). Hence, our representation of
</bodyText>
<page confidence="0.994239">
225
</page>
<bodyText confidence="0.9907824">
al (i.e., looking at it from the top) is given by
topic : v A F(obj : v), capturing the &amp;quot;movement&amp;quot;
due to topicalization. Thus, the path in the func-
tional structure between the topic and the object
is entirely determined by the function F, which
in turn depends on the auxiliary trees that can
be adjoined at the S node. These auxiliary trees,
such as 13i, are those that introduce complemen-
tizer predicates. Auxiliary trees, in general, in-
troduce modifiers or complementizer predicates as
in (For our present discussion we can ignore
the modifier type auxiliary trees). Auxiliary trees
upon adjoining do not disturb the predicate ar-
gument structure of the tree to which they are
adjoined. If we consider trees such as 9j, the com-
plement is given by the tree that appears below
the foot node. A principle of a linguistic theory
instantiated in TAG (see [5]), similar to the pro-
jection principle, predicts that the complement of
the root (looking at it from below) is the feature
structure associated with the foot node and (more
importantly) this relation cannot be disrupted by
any adjoinings. Thus, if we are given the feature
structure, f, for the foot node (known only af-
ter adjoining), the bottom feature structure of the
root can be specified as comp: f, and that of the
top feature structure of the root is F(comp : f),
where F, as in al, is used to account for a.djoinings
at the root.
To summarize, in al, the functional dependency
between the topic and object nodes is entirely de-
termined by the root and foot nodes of auxiliary
trees that can be adjoined at the S node (the ef-
fect of using the function F). By examining such
auxiliary trees, we have characterized the latter
path as Af.F(comp : f). In grammatical terms,
the path depicted by F can be specified by right-
linear productions
Fâ€”oFcomp:fle
Since right-linear grammars generate only regular
sets, and TAGs predict the use of such right-linear
rules for the description of the paths, as just shown
above, we can thus state that TAGs give a justi-
fication for the use of regular expressions in the
functional uncertainty machinery.
</bodyText>
<sectionHeader confidence="0.98726" genericHeader="method">
4.3 GENERATIVE CAPACITY AND
LONG DISTANCE DEPENDENCY
</sectionHeader>
<bodyText confidence="0.999980754716981">
We will now show that what functional uncer-
tainty accomplishes for LFG can be achieved
within the FTAG framework without requiring
power beyond that of TAGs. FTAG, as described
in this paper, is unlimited in its generative ca-
pacity. By placing no restrictions on the feature
structures associated with the nodes of elemen-
tary trees, it is possible to generate any recursively
enumerable language. In [9], we have defined a
restricted version of FTAG, called RFTAG, that
can generate only TALs (the languages generated
by TAGs). In RFTAG, we insist that the fea-
ture structures that are associated with nodes are
bounded in size, a requirement similar to the finite
closure membership restriction in GPSG. This re-
stricted system will not allow us to give the analy-
sis for the long distance dependencies due to top-
icalization (as given in the earlier sections), since
we use the COMP attribute whose value cannot be
bounded in size. However, it is possible to extend
RFTAG in a certain way such that such analysis
can be given. This extension of RFTAG still does
not go beyond TAG and thus is within the class of
mildly context-sensitive grammar formalisms de-
fined by Joshi [1]. This extension of RFTAG is
discussed in [10].
To give an informal idea of this extension and
a justification for the above argument, let us con-
sider the auxiliary tree, th in Figure 3. Although
we coindex the value of the comp feature in the
feature structure of the root node of gi with the
feature structure associated with the foot node, we
should note that this coindexing does not affect
the contergreeness of derivation. Stated differ-
ently, the adjoining sequence at the root is inde-
pendent of other nodes in the tree in spite of the
coindexing. This is due to the fact that as the fea-
ture structure of the foot of /31 gets instantiated
on adjoining, this value is simply substituted (and
not unified) for the value of the comp feature of
the root node. Thus, the comp feature is being
used just as any other feature that can be used
to give tree addresses (except that comp indicates
dominance at the functional level rather than at
the tree structure level). In [10], we have formal-
ized this notion by introducing graph adjoining
grammars which generate exactly the same lan-
guages as TAGs. In a graph adjoining grammar,
th is represented as shown in Figure 4. Notice
that in this representation the comp feature is like
the features 1-and 2 (which indicate the left and
right daughters of a node) and therefore not used
explicitly.
</bodyText>
<sectionHeader confidence="0.997779" genericHeader="conclusions">
5 CONCLUSION
</sectionHeader>
<bodyText confidence="0.9972985">
We have shown that for the treatment of long dis-
tance dependencies in TAG, the functional un-
</bodyText>
<page confidence="0.998379">
226
</page>
<figureCaption confidence="0.999501">
Figure 4: An Elementary DAG
</figureCaption>
<bodyText confidence="0.99988675">
certainty machinery in LFG is redundant. We
have also shown that the analyses provided by
the functional uncertainty machinery can be ob-
tained without going beyond the power of mildly
context-sensitive grammars. We have briefly dis-
cussed some linguistic and computational aspects
of these results.
We believe that our results described in this pa-
per can be extended to other formalisms, such as
Combinatory Categorial Grammars (CCG), which
also provide an extended domain of locality. It is
of particular interest to carry out this investiga-
tion in the context of CCG because of their weak
equivalence to TAG (Weir and Joshi [12]). This
exploration will help us view this equivalence from
the structural point of view.
</bodyText>
<sectionHeader confidence="0.999904" genericHeader="references">
REFERENCES
</sectionHeader>
<reference confidence="0.999877370370371">
[1] A. K. Joshi. How much context-sensitivity
is necessary for characterizing structural de-
scriptions â€” Tree Adjoining Grammars. In D.
Dowty, L. Karttunen, and A. Zwicky, editors,
Natural Language Processing â€” Theoretical,
Computational and Psychological Perspective,
Cambridge University Press, New York, NY,
1985. Originally presented in 1983.
[2] R. M. Kaplan and J. T. Maxwell. An al-
gorithm for functional uncertainity. In 12th
International Conference on Comput. Ling.,
1988. _
[3] R. M. Kaplan and A. Zaenen. Long distance
dependencies,constituent structure, and func-
tional uncertainity. In M. Baltin and A.
Kroch, editors, Alternative Conceptions of
Phrase Structure, Chicago University Press,
Chicago. IL, 1988.
[4] R. Kasper and W. C. Rounds. A logical se-
mantics for feature structures. In 24th meet-
ing Assoc. Comput. Ling., 1986.
[5] A. Kroch and A.K. Joshi. Linguistic Rele-
vance of Tree Adjoining Grammars. Technical
Report MS-CIS-85-18, Department of Com-
puter and Information Science, University of
Pennsylvania, Philadelphia, 1985. to appear
in Linguistics and Philosophy, 1989.
[6] W. C. Rounds and R. Kasper. A complete
logical calculus for record structures repre-
senting linguistic information. In IEEE Sym-
posium on Logic and Cornputer Science, 1986.
[7] Y. Schabes, A. Abeille, and A. K. Joshi. New
parsing strategies for tree adjoining gram-
mars. In 12th International Conference on
Assoc. Comput. Ling., 1988.
[8] K. Vijayashanker. A Study of Tee Adjoining
Grammars. PhD thesis, University of Penn-
sylvania, Philadelphia, Pa, 1987.
[9] K. Vijay-Shanker and A. K. Joshi. Fea-
ture structure based tree adjoining grammars.
In 12th International Conference on Cornput.
Ling., 1988.
[10] K. Vijay-Shanker and A.K. Joshi. Unification
based approach to tree adjoining grammar.
1989. forthcoming.
[11] K. Vijay-Shanker, D. J. Weir, and A. K.
Joshi. Characterizing structural descriptions
produced by various grammatical formalisms.
In 2501 meeting Assoc. Comput. Ling., 1987.
[12] D. J. Weir and A. K. Joshi. Combinatory cat-
egorial grammars: generative power and rela-
tionship to linear context-free rewriting sys-
tems. In 2601 meeting Assoc. Comput. Ling.,
1988.
</reference>
<page confidence="0.997942">
227
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.875300">
<title confidence="0.987935">TREATMENT OF LONG DISTANCE DEPENDENCIES IN LFG AND TAG: FUNCTIONAL UNCERTAINTY IN LFG IS A COROLLARY IN TAG*</title>
<author confidence="0.999942">Aravind K Joshi</author>
<affiliation confidence="0.999907">Dept. of Computer &amp; Information Science University of Pennsylvania</affiliation>
<address confidence="0.999547">Philadelphia, PA 19104</address>
<email confidence="0.999386">joshi@linc.cis.upenn.edu</email>
<author confidence="0.999257">K Vijay-Shanker</author>
<affiliation confidence="0.997678">of Computer Science University of Delaware</affiliation>
<address confidence="0.94121">Newark, DE 19716</address>
<email confidence="0.998739">vijay@udel.edu</email>
<abstract confidence="0.997053214285714">In this paper the functional uncertainty machinery in LFG is compared with the treatment of long distance dependencies in TAG. It is shown that the functional uncertainty machinery is redundant in TAG, i.e., what functional uncertainty accomplishes for LFG follows from the TAG formalism itself and some aspects of the linguistic theory instantiated in TAG. It is also shown that the analyses provided by the functional uncertainty machinery can be obtained without requiring power beyond mildly context-sensitive grammars. Some linguistic and computational aspects of these results have been briefly discussed also.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>A K Joshi</author>
</authors>
<title>How much context-sensitivity is necessary for characterizing structural descriptions â€” Tree Adjoining Grammars. In</title>
<date>1985</date>
<booktitle>Natural Language Processing â€” Theoretical, Computational and Psychological Perspective,</booktitle>
<editor>D. Dowty, L. Karttunen, and A. Zwicky, editors,</editor>
<publisher>Cambridge University Press,</publisher>
<location>New York, NY,</location>
<note>Originally presented in</note>
<contexts>
<context position="6606" citStr="[1]" startWordPosition="1085" endWordPosition="1085"> that is not localized in the cstructure, extra machinery such as functional uncertainty is needed. We show that what this extra machinery achieves for CFG based systems follows as a corollary of the TAG framework. This results from the fact that the elementary trees in a TAG provide an extended domain of locality, and factor out recursion and dependencies. A computational consequence of this result is that we can obtain these analyses without going outside the power of TAG and thus staying within the class of constrained grammatical formalisms characterized as mildly context-sensitive (Joshi [1]). Another consequence of the differences in the representations (and localization) in the two formalisms is as follows. In a TAG, once an elementary tree is picked, there is no uncertainty about the functionality in long distance dependencies. Because LFG relies on a CFG framework, interactions between uncertainty equations can arise; the lack of such interactions in TAG can lead to simpler processing of long distance dependencies. Finally, we make some remarks as to the linguistic significance of restricting the use of regular sets in the functional uncertainty machinery by showing that the </context>
<context position="27151" citStr="[1]" startWordPosition="4705" endWordPosition="4705">ures that are associated with nodes are bounded in size, a requirement similar to the finite closure membership restriction in GPSG. This restricted system will not allow us to give the analysis for the long distance dependencies due to topicalization (as given in the earlier sections), since we use the COMP attribute whose value cannot be bounded in size. However, it is possible to extend RFTAG in a certain way such that such analysis can be given. This extension of RFTAG still does not go beyond TAG and thus is within the class of mildly context-sensitive grammar formalisms defined by Joshi [1]. This extension of RFTAG is discussed in [10]. To give an informal idea of this extension and a justification for the above argument, let us consider the auxiliary tree, th in Figure 3. Although we coindex the value of the comp feature in the feature structure of the root node of gi with the feature structure associated with the foot node, we should note that this coindexing does not affect the contergreeness of derivation. Stated differently, the adjoining sequence at the root is independent of other nodes in the tree in spite of the coindexing. This is due to the fact that as the feature st</context>
</contexts>
<marker>[1]</marker>
<rawString>A. K. Joshi. How much context-sensitivity is necessary for characterizing structural descriptions â€” Tree Adjoining Grammars. In D. Dowty, L. Karttunen, and A. Zwicky, editors, Natural Language Processing â€” Theoretical, Computational and Psychological Perspective, Cambridge University Press, New York, NY, 1985. Originally presented in 1983.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R M Kaplan</author>
<author>J T Maxwell</author>
</authors>
<title>An algorithm for functional uncertainity.</title>
<date>1988</date>
<booktitle>In 12th International Conference on Comput. Ling.,</booktitle>
<note></note>
<contexts>
<context position="1211" citStr="[2]" startWordPosition="184" endWordPosition="184">es for LFG follows from the TAG formalism itself and some aspects of the linguistic theory instantiated in TAG. It is also shown that the analyses provided by the functional uncertainty machinery can be obtained without requiring power beyond mildly context-sensitive grammars. Some linguistic and computational aspects of these results have been briefly discussed also. 1 INTRODUCTION The so-called long distance dependencies are characterized in Lexical Functional Grammars (LFG) by the use of the formal device of functional uncertainty, as defined by Kaplan and Zaenan [3] and Kaplan and Maxwell [2]. In this paper, we relate. this characterization to that provided by Tree Adjoining Grammars (TAG), showing a direct correspondence between the functional uncertainty equations in LFG analyses and the elementary trees in TAGs that give analyses for &amp;quot;long distance&amp;quot; dependencies. We show that the functional uncertainty machinery is redundant in TAG, i.e., what functional uncertainty accomplishes for LFG follows from the TAG formalism itself and some fundamental aspects of the linguistic theory instantiated in TAG. We thus show that these analyses can be obtained without requiring power beyond m</context>
<context position="3096" citStr="[2, 3]" startWordPosition="474" endWordPosition="475">es due to topicalization, where the verb telephoned and its object Mary can be arbitrarily apart. It is difficult to state generalizations about these phenomena if one relies entirely on the surface structure (as defined in CFG based frameworks) since these phenomena cannot be localized at this level. Kaplan and Zaenan [3] note that, in LFG, rather than stating the generalizations on the c-structure, they must be stated on f-structures, since long distance dependencies are predicate argument dependencies, and such functional dependencies are represented in the f-structures. Thus, as stated in [2, 3], in the sentences (1), (2), and (3) above, the dependencies are captured by the equations (in the LFG notationl) by I TOPIC =1 OBJ, I TOPIC =T COMP OBJ, and I TOPIC =1 COMP COMP OBJ, respectively, which state that, the topic Mary is also the object of telephoned. In general, since any number of additional complement predicates may be introduced, these equations will have the general form TOPIC =1 COMP COMP ... OBJ Kaplan and Zaenen [3] introduced the formal device of functional uncertainty, in which this general case is stated by the equation 1Because of lack of space, we will not define the </context>
<context position="21769" citStr="[2]" startWordPosition="3772" endWordPosition="3772">een a filler and the position of the corresponding gap. Different dependencies correspond to different elementary trees. In this sense there is disjunction, but it is still only finite. Having picked one tree, there is no uncertainty about the grammatical function of the filler, no matter how many COMPs come in between due to adjoining. This fact may have important consequences from the point of view of relative efficiency of processing of long distance dependencies in LFG and TAG. Consider, for example, the problem of interactions between two or more uncertainty equations in LFG as stated in [2]. Certain strings in COMP cannot be solutions for (1 TOPIC)=(f COMP* GF) when this equation is conjoined (i.e., when it interacts) with (f COMP SUBJ NUM)= SING and (f TOPIC NUM) = PL. In this case, the shorter string COMP SUBJ cannot be used for COMP* GF because of the interaction, although the strings COMP SUBJ, i&gt; 2 can satisfy the above set of equations. In general, in LFG, extra work has to be done to account for interactions. On the other hand, in TAG, as we noted above, since there is no uncertainty about the grammatical function of the filler, such interactions do not arise at all. 4.2 </context>
</contexts>
<marker>[2]</marker>
<rawString>R. M. Kaplan and J. T. Maxwell. An algorithm for functional uncertainity. In 12th International Conference on Comput. Ling., 1988. _</rawString>
</citation>
<citation valid="true">
<authors>
<author>R M Kaplan</author>
<author>A Zaenen</author>
</authors>
<title>Long distance dependencies,constituent structure, and functional uncertainity.</title>
<date>1988</date>
<booktitle>Alternative Conceptions of Phrase Structure,</booktitle>
<editor>In M. Baltin and A. Kroch, editors,</editor>
<publisher>Chicago University Press,</publisher>
<location>Chicago. IL,</location>
<contexts>
<context position="1184" citStr="[3]" startWordPosition="179" endWordPosition="179">onal uncertainty accomplishes for LFG follows from the TAG formalism itself and some aspects of the linguistic theory instantiated in TAG. It is also shown that the analyses provided by the functional uncertainty machinery can be obtained without requiring power beyond mildly context-sensitive grammars. Some linguistic and computational aspects of these results have been briefly discussed also. 1 INTRODUCTION The so-called long distance dependencies are characterized in Lexical Functional Grammars (LFG) by the use of the formal device of functional uncertainty, as defined by Kaplan and Zaenan [3] and Kaplan and Maxwell [2]. In this paper, we relate. this characterization to that provided by Tree Adjoining Grammars (TAG), showing a direct correspondence between the functional uncertainty equations in LFG analyses and the elementary trees in TAGs that give analyses for &amp;quot;long distance&amp;quot; dependencies. We show that the functional uncertainty machinery is redundant in TAG, i.e., what functional uncertainty accomplishes for LFG follows from the TAG formalism itself and some fundamental aspects of the linguistic theory instantiated in TAG. We thus show that these analyses can be obtained witho</context>
<context position="2814" citStr="[3]" startWordPosition="432" endWordPosition="432">nce of these results. Long distance phenomena are associated with the so-called movement. The following examples, 1. Mary Henry telephoned. 2. Mary Bill said that Henry telephoned. 3. Mary John claimed that Bill said that Henry telephoned. illustrate the long distance dependencies due to topicalization, where the verb telephoned and its object Mary can be arbitrarily apart. It is difficult to state generalizations about these phenomena if one relies entirely on the surface structure (as defined in CFG based frameworks) since these phenomena cannot be localized at this level. Kaplan and Zaenan [3] note that, in LFG, rather than stating the generalizations on the c-structure, they must be stated on f-structures, since long distance dependencies are predicate argument dependencies, and such functional dependencies are represented in the f-structures. Thus, as stated in [2, 3], in the sentences (1), (2), and (3) above, the dependencies are captured by the equations (in the LFG notationl) by I TOPIC =1 OBJ, I TOPIC =T COMP OBJ, and I TOPIC =1 COMP COMP OBJ, respectively, which state that, the topic Mary is also the object of telephoned. In general, since any number of additional complement</context>
<context position="22913" citStr="[3]" startWordPosition="3975" endWordPosition="3975"> of the filler, such interactions do not arise at all. 4.2 REGULAR SETS IN FUNCTIONAL UNCERTAINTY From the definition of TAGs, it can be shown that the paths are always context-free sets [11]. If there are linguistic phenomena where the uncertainty machinery with regular sets is not enough, then the question arises whether TAG can provide an adequate analysis, given that paths are contextfree sets in TAGs. On the other hand, if regular sets are enough, we would like to explore whether the regularity requirement has a linguistic significance by itself. As far as we are aware, Kaplan and Zaenen [3] do not claim that the regularity requirement follows from the linguistic considerations. Rather, they have illustrated the adequacy of regular sets for the linguistic phenomena they have described. However, it appears that an appropriate linguistic theory instantiated in the TAG framework will justify the use of regular sets for the long distance phenomena considered here. To illustrate our claim, let us consider the elementary trees that are used in the TAG analysis of long distance dependencies. The elementary trees, al and 1(31 (given in Figure 3), are good representative examples of such </context>
</contexts>
<marker>[3]</marker>
<rawString>R. M. Kaplan and A. Zaenen. Long distance dependencies,constituent structure, and functional uncertainity. In M. Baltin and A. Kroch, editors, Alternative Conceptions of Phrase Structure, Chicago University Press, Chicago. IL, 1988.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Kasper</author>
<author>W C Rounds</author>
</authors>
<title>A logical semantics for feature structures.</title>
<date>1986</date>
<booktitle>In 24th meeting Assoc. Comput. Ling.,</booktitle>
<contexts>
<context position="14281" citStr="[4, 6]" startWordPosition="2461" endWordPosition="2462"> or failure of unification). Thus, if /A,. â€¢ â€¢ ,j3, form the set of auxiliary trees, to allow for the possibility of adjoining by any auxiliary tree, as well as the possibility of no adjoining at a node, we must have a function, F, given by F = Af.(foi(f)v v f(f) V f) and then we represent 7 by In this way, we can represent the elementary trees (and hence the grammar) in an extended version of R-K logic (the extension consists of adding .\- abstraction and application). 2.2 A CALCULUS TO REPRESENT FTAG In [8, 9], we have described a calculus, extending the logic developed by Rounds and Kasper [4, 6], to encode the trees in a FTAG. We will very briefly describe this representation here. To understand the representation of adjoining, consider the trees given in Figure 2, and in particular, the node q. The feature structures associated with the node where adjoining takes place should reflect the feature structure after adjoining and as well as without adjoining. Further, the feature structure (corresponding to the tree structure below it) to be associated with the foot node is not known prior to adjoining, but becomes specified upon adjoining. Thus, the bottom feature structure associated w</context>
</contexts>
<marker>[4]</marker>
<rawString>R. Kasper and W. C. Rounds. A logical semantics for feature structures. In 24th meeting Assoc. Comput. Ling., 1986.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Kroch</author>
<author>A K Joshi</author>
</authors>
<title>Linguistic Relevance of Tree Adjoining Grammars.</title>
<date>1985</date>
<tech>Technical Report MS-CIS-85-18,</tech>
<institution>Department of Computer and Information Science, University of Pennsylvania,</institution>
<location>Philadelphia,</location>
<note>to appear in Linguistics and Philosophy,</note>
<contexts>
<context position="9416" citStr="[5]" startWordPosition="1578" endWordPosition="1578">cture is called bn. a: P/NVP t root X broot x t foot brooi E/XN t/Nvp\ I ; ..*. ,,, ....... Figure 2: Feature Structures and Adjoining r s Pâ€¢â€¢â– / , â€¢ NP â€¢ VP adisixiss If was â€¢ Figure 1: Elementary Trees in a TAG We will now define the operation of adjoining. Consider the adjoining of ,3 at the node marked with * in a. The subtree of a under the node marked with * is excised, and ,3 is inserted in its place. Finally, the excised subtree is inserted below the foot node of ai as shown in Figure 1. A more detailed description of TAGs and their linguistic relevance may be found in (Kroch and Joshi [5]). 2.1 FEATURE STRUCTURE BASED TREE ADJOINING GRAMMARS (FTAG) In unification grammars, a feature structure is associated with a node in a derivation tree in order to describe that node and its relation to features of other nodes in the derivation tree. In a FTAG, with each internal node, q, we associate two feature structures (for details, see [9]). These two feature structures capture the following relations (Figure 2) 1. The relation of q to its supertree, i.e., the view of the node from the top. The feature structure that describes this relationship is called Note that both the i,, and br, </context>
<context position="11421" citStr="[5]" startWordPosition="1948" endWordPosition="1948">xiliary tree. Thus, on adjoining, we unify I,, with trâ€žot, and 141 with bfoot. In fact, this adjoining -is permissible only if t,.oâ€žt and tâ€ž are compatible and so are b1 00g and b,,. If we do not adjoin at the node, q, then we unify I,, with bâ€ž. More details of the definition of FTAG may be found in [8, 9]. We now give an example of an initial tree and an auxiliary tree in Figure 3. We have shown only the necessary top and bottom feature structures for the relevant nodes. Also in each feature structure 3The linguistic relevance of this restriction has been discussed elsewhere (Kroch and Joshi [5]). The general framework does not necessarily require it. 222 shown, we have only included those feature-value pairs that are relevant. For the auxiliary tree, we have labeled the root node S. We could have labeled it S with COMP and S as daughter nodes. These details are not relevant to the main point of the paper. We note that, just as in a TAG, the elementary trees which are the domains of dependencies are available as a single unit during each step of the derivation. For example, in al the topic and the object of the verb belong to the same tree (since this dependency has been factored int</context>
<context position="24680" citStr="[5]" startWordPosition="4281" endWordPosition="4281"> depends on the auxiliary trees that can be adjoined at the S node. These auxiliary trees, such as 13i, are those that introduce complementizer predicates. Auxiliary trees, in general, introduce modifiers or complementizer predicates as in (For our present discussion we can ignore the modifier type auxiliary trees). Auxiliary trees upon adjoining do not disturb the predicate argument structure of the tree to which they are adjoined. If we consider trees such as 9j, the complement is given by the tree that appears below the foot node. A principle of a linguistic theory instantiated in TAG (see [5]), similar to the projection principle, predicts that the complement of the root (looking at it from below) is the feature structure associated with the foot node and (more importantly) this relation cannot be disrupted by any adjoinings. Thus, if we are given the feature structure, f, for the foot node (known only after adjoining), the bottom feature structure of the root can be specified as comp: f, and that of the top feature structure of the root is F(comp : f), where F, as in al, is used to account for a.djoinings at the root. To summarize, in al, the functional dependency between the top</context>
</contexts>
<marker>[5]</marker>
<rawString>A. Kroch and A.K. Joshi. Linguistic Relevance of Tree Adjoining Grammars. Technical Report MS-CIS-85-18, Department of Computer and Information Science, University of Pennsylvania, Philadelphia, 1985. to appear in Linguistics and Philosophy, 1989.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W C Rounds</author>
<author>R Kasper</author>
</authors>
<title>A complete logical calculus for record structures representing linguistic information.</title>
<date>1986</date>
<booktitle>In IEEE Symposium on Logic and Cornputer Science,</booktitle>
<contexts>
<context position="14281" citStr="[4, 6]" startWordPosition="2461" endWordPosition="2462"> or failure of unification). Thus, if /A,. â€¢ â€¢ ,j3, form the set of auxiliary trees, to allow for the possibility of adjoining by any auxiliary tree, as well as the possibility of no adjoining at a node, we must have a function, F, given by F = Af.(foi(f)v v f(f) V f) and then we represent 7 by In this way, we can represent the elementary trees (and hence the grammar) in an extended version of R-K logic (the extension consists of adding .\- abstraction and application). 2.2 A CALCULUS TO REPRESENT FTAG In [8, 9], we have described a calculus, extending the logic developed by Rounds and Kasper [4, 6], to encode the trees in a FTAG. We will very briefly describe this representation here. To understand the representation of adjoining, consider the trees given in Figure 2, and in particular, the node q. The feature structures associated with the node where adjoining takes place should reflect the feature structure after adjoining and as well as without adjoining. Further, the feature structure (corresponding to the tree structure below it) to be associated with the foot node is not known prior to adjoining, but becomes specified upon adjoining. Thus, the bottom feature structure associated w</context>
</contexts>
<marker>[6]</marker>
<rawString>W. C. Rounds and R. Kasper. A complete logical calculus for record structures representing linguistic information. In IEEE Symposium on Logic and Cornputer Science, 1986.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Y Schabes</author>
<author>A Abeille</author>
<author>A K Joshi</author>
</authors>
<title>New parsing strategies for tree adjoining grammars.</title>
<date>1988</date>
<booktitle>In 12th International Conference on Assoc. Comput. Ling.,</booktitle>
<contexts>
<context position="8532" citStr="[7]" startWordPosition="1407" endWordPosition="1407"> trees: the initial trees and auxiliary trees. The initial trees (Figure 1) roughly correspond to &amp;quot;simple sentences&amp;quot;. Thus, the root of an initial tree is labeled by S or S. The frontier is all terminals. The auxiliary trees (Figure 1) correspond roughly to minimal recursive constructions. Thus, if the root of an auxiliary tree is labeled by a nonterminal symbol, X, then there is a node (called the foot node) in the frontier which is labeled by X. The rest of the nodes in the frontier are labeled by terminal symbols. 2We do not consider lexicalized TAGs (defined by Schabes, Abeille, and Joshi [7]) which allow both adjoining and substitution. The results of this paper apply directly to them. Besides, they are formally equivalent to TAGs. 221 As Widen, go&amp;quot; falir PIP VeeNi /NvP V As main um 2. The relation of n to its descendants, i.e., the view from below. This feature structure is called bn. a: P/NVP t root X broot x t foot brooi E/XN t/Nvp\ I ; ..*. ,,, ....... Figure 2: Feature Structures and Adjoining r s Pâ€¢â€¢â– / , â€¢ NP â€¢ VP adisixiss If was â€¢ Figure 1: Elementary Trees in a TAG We will now define the operation of adjoining. Consider the adjoining of ,3 at the node marked with * in a.</context>
</contexts>
<marker>[7]</marker>
<rawString>Y. Schabes, A. Abeille, and A. K. Joshi. New parsing strategies for tree adjoining grammars. In 12th International Conference on Assoc. Comput. Ling., 1988.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Vijayashanker</author>
</authors>
<title>A Study of Tee Adjoining Grammars.</title>
<date>1987</date>
<tech>PhD thesis,</tech>
<institution>University of Pennsylvania,</institution>
<location>Philadelphia, Pa,</location>
<contexts>
<context position="11125" citStr="[8, 9]" startWordPosition="1896" endWordPosition="1897"> auxiliary tree used for adjoining at the node q. Based on what t and b stand for, it is obvious that on adjoining the statements In and troot hold for the node corresponding to the root of the auxiliary tree. Similarly, the statements and bfoot hold for the node corresponding to the foot of the auxiliary tree. Thus, on adjoining, we unify I,, with trâ€žot, and 141 with bfoot. In fact, this adjoining -is permissible only if t,.oâ€žt and tâ€ž are compatible and so are b1 00g and b,,. If we do not adjoin at the node, q, then we unify I,, with bâ€ž. More details of the definition of FTAG may be found in [8, 9]. We now give an example of an initial tree and an auxiliary tree in Figure 3. We have shown only the necessary top and bottom feature structures for the relevant nodes. Also in each feature structure 3The linguistic relevance of this restriction has been discussed elsewhere (Kroch and Joshi [5]). The general framework does not necessarily require it. 222 shown, we have only included those feature-value pairs that are relevant. For the auxiliary tree, we have labeled the root node S. We could have labeled it S with COMP and S as daughter nodes. These details are not relevant to the main point </context>
<context position="14192" citStr="[8, 9]" startWordPosition="2446" endWordPosition="2447">y auxiliary tree adjoinable at q (admissibility of adjoining is determined by the success or failure of unification). Thus, if /A,. â€¢ â€¢ ,j3, form the set of auxiliary trees, to allow for the possibility of adjoining by any auxiliary tree, as well as the possibility of no adjoining at a node, we must have a function, F, given by F = Af.(foi(f)v v f(f) V f) and then we represent 7 by In this way, we can represent the elementary trees (and hence the grammar) in an extended version of R-K logic (the extension consists of adding .\- abstraction and application). 2.2 A CALCULUS TO REPRESENT FTAG In [8, 9], we have described a calculus, extending the logic developed by Rounds and Kasper [4, 6], to encode the trees in a FTAG. We will very briefly describe this representation here. To understand the representation of adjoining, consider the trees given in Figure 2, and in particular, the node q. The feature structures associated with the node where adjoining takes place should reflect the feature structure after adjoining and as well as without adjoining. Further, the feature structure (corresponding to the tree structure below it) to be associated with the foot node is not known prior to adjoini</context>
<context position="17055" citStr="[8]" startWordPosition="2957" endWordPosition="2957"> tree al will be represented by cat : 37A F(topic : v A F(pred : telephonedAobj : v)). Ignoring some irrelevant details (such as the possibility of adjoining at nodes other than the S node), we can represent al as al = topic: v A F(obj : v) Turning our attention to /31, let us consider the bottom feature structure of the root of )31. Since its COMP is the feature structure associated with the foot node (notice that no adjoining is allowed at the foot node and hence it has only one feature structure), and since adjoining can take place at the root node, we have the representation of 01 as 4 In [8] , we have established that the fixed-point exists. 5We use the fact that Râ€¢ = FeliU {e}. Af.F(comp : f A subj : (...) A .. .) where F is the function described in Section 2.2. From the point of view of the path from the root to the complement, the NP and VP nodes are irrelevant, so are any adjoinings on these nodes. So once again, if we discard the irrelevant information (from the point of view of comparing this analyses with the one in LFG), we can simplify the representation of gl as Af.F(cornp : f) As explained in Section 2.2, since 131 is the only auxiliary tree of interest, F would be de</context>
</contexts>
<marker>[8]</marker>
<rawString>K. Vijayashanker. A Study of Tee Adjoining Grammars. PhD thesis, University of Pennsylvania, Philadelphia, Pa, 1987.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Vijay-Shanker</author>
<author>A K Joshi</author>
</authors>
<title>Feature structure based tree adjoining grammars.</title>
<date>1988</date>
<booktitle>In 12th International Conference on Cornput. Ling.,</booktitle>
<contexts>
<context position="9765" citStr="[9]" startWordPosition="1638" endWordPosition="1638">de marked with * is excised, and ,3 is inserted in its place. Finally, the excised subtree is inserted below the foot node of ai as shown in Figure 1. A more detailed description of TAGs and their linguistic relevance may be found in (Kroch and Joshi [5]). 2.1 FEATURE STRUCTURE BASED TREE ADJOINING GRAMMARS (FTAG) In unification grammars, a feature structure is associated with a node in a derivation tree in order to describe that node and its relation to features of other nodes in the derivation tree. In a FTAG, with each internal node, q, we associate two feature structures (for details, see [9]). These two feature structures capture the following relations (Figure 2) 1. The relation of q to its supertree, i.e., the view of the node from the top. The feature structure that describes this relationship is called Note that both the i,, and br, feature structures hold for the node q. On the other hand, with each leaf node (either a terminal node or a foot node), lb we associate only one feature structure (let us call it 413). Let us now consider the case when adjoining takes place as shown in the Figure 2. The notation we use is to write alongside each node, the t and b statements, with </context>
<context position="11125" citStr="[8, 9]" startWordPosition="1896" endWordPosition="1897"> auxiliary tree used for adjoining at the node q. Based on what t and b stand for, it is obvious that on adjoining the statements In and troot hold for the node corresponding to the root of the auxiliary tree. Similarly, the statements and bfoot hold for the node corresponding to the foot of the auxiliary tree. Thus, on adjoining, we unify I,, with trâ€žot, and 141 with bfoot. In fact, this adjoining -is permissible only if t,.oâ€žt and tâ€ž are compatible and so are b1 00g and b,,. If we do not adjoin at the node, q, then we unify I,, with bâ€ž. More details of the definition of FTAG may be found in [8, 9]. We now give an example of an initial tree and an auxiliary tree in Figure 3. We have shown only the necessary top and bottom feature structures for the relevant nodes. Also in each feature structure 3The linguistic relevance of this restriction has been discussed elsewhere (Kroch and Joshi [5]). The general framework does not necessarily require it. 222 shown, we have only included those feature-value pairs that are relevant. For the auxiliary tree, we have labeled the root node S. We could have labeled it S with COMP and S as daughter nodes. These details are not relevant to the main point </context>
<context position="14192" citStr="[8, 9]" startWordPosition="2446" endWordPosition="2447">y auxiliary tree adjoinable at q (admissibility of adjoining is determined by the success or failure of unification). Thus, if /A,. â€¢ â€¢ ,j3, form the set of auxiliary trees, to allow for the possibility of adjoining by any auxiliary tree, as well as the possibility of no adjoining at a node, we must have a function, F, given by F = Af.(foi(f)v v f(f) V f) and then we represent 7 by In this way, we can represent the elementary trees (and hence the grammar) in an extended version of R-K logic (the extension consists of adding .\- abstraction and application). 2.2 A CALCULUS TO REPRESENT FTAG In [8, 9], we have described a calculus, extending the logic developed by Rounds and Kasper [4, 6], to encode the trees in a FTAG. We will very briefly describe this representation here. To understand the representation of adjoining, consider the trees given in Figure 2, and in particular, the node q. The feature structures associated with the node where adjoining takes place should reflect the feature structure after adjoining and as well as without adjoining. Further, the feature structure (corresponding to the tree structure below it) to be associated with the foot node is not known prior to adjoini</context>
<context position="21003" citStr="[9]" startWordPosition="3641" endWordPosition="3641">derivation sequences allowed and we can confirm (as we have done in Section 3) that this prediction is the same as that made by the functional uncertainty machinery. 4.1 INTERACTIONS AMONG UNCERTAINTY EQUATIONS The functional uncertainty machinery is a means by which infinite disjunctions can be specified in a finite manner. The reason that infinite number of disjunctions appear, is due to the fact that they correspond to infinite number of possible derivations. In a CFG based formalism, the checking of dependency cannot be separated from the derivation process. On the other hand, as shown in [9], since this separation is possible in TAG, only finite disjunctions are needed. In each elementary tree, there is no uncertainty about the kind of dependency between a filler and the position of the corresponding gap. Different dependencies correspond to different elementary trees. In this sense there is disjunction, but it is still only finite. Having picked one tree, there is no uncertainty about the grammatical function of the filler, no matter how many COMPs come in between due to adjoining. This fact may have important consequences from the point of view of relative efficiency of process</context>
<context position="26380" citStr="[9]" startWordPosition="4571" endWordPosition="4571"> as just shown above, we can thus state that TAGs give a justification for the use of regular expressions in the functional uncertainty machinery. 4.3 GENERATIVE CAPACITY AND LONG DISTANCE DEPENDENCY We will now show that what functional uncertainty accomplishes for LFG can be achieved within the FTAG framework without requiring power beyond that of TAGs. FTAG, as described in this paper, is unlimited in its generative capacity. By placing no restrictions on the feature structures associated with the nodes of elementary trees, it is possible to generate any recursively enumerable language. In [9], we have defined a restricted version of FTAG, called RFTAG, that can generate only TALs (the languages generated by TAGs). In RFTAG, we insist that the feature structures that are associated with nodes are bounded in size, a requirement similar to the finite closure membership restriction in GPSG. This restricted system will not allow us to give the analysis for the long distance dependencies due to topicalization (as given in the earlier sections), since we use the COMP attribute whose value cannot be bounded in size. However, it is possible to extend RFTAG in a certain way such that such a</context>
</contexts>
<marker>[9]</marker>
<rawString>K. Vijay-Shanker and A. K. Joshi. Feature structure based tree adjoining grammars. In 12th International Conference on Cornput. Ling., 1988.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Vijay-Shanker</author>
<author>A K Joshi</author>
</authors>
<title>Unification based approach to tree adjoining grammar.</title>
<date>1989</date>
<note>forthcoming.</note>
<contexts>
<context position="27197" citStr="[10]" startWordPosition="4713" endWordPosition="4713">ed in size, a requirement similar to the finite closure membership restriction in GPSG. This restricted system will not allow us to give the analysis for the long distance dependencies due to topicalization (as given in the earlier sections), since we use the COMP attribute whose value cannot be bounded in size. However, it is possible to extend RFTAG in a certain way such that such analysis can be given. This extension of RFTAG still does not go beyond TAG and thus is within the class of mildly context-sensitive grammar formalisms defined by Joshi [1]. This extension of RFTAG is discussed in [10]. To give an informal idea of this extension and a justification for the above argument, let us consider the auxiliary tree, th in Figure 3. Although we coindex the value of the comp feature in the feature structure of the root node of gi with the feature structure associated with the foot node, we should note that this coindexing does not affect the contergreeness of derivation. Stated differently, the adjoining sequence at the root is independent of other nodes in the tree in spite of the coindexing. This is due to the fact that as the feature structure of the foot of /31 gets instantiated o</context>
</contexts>
<marker>[10]</marker>
<rawString>K. Vijay-Shanker and A.K. Joshi. Unification based approach to tree adjoining grammar. 1989. forthcoming.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Vijay-Shanker</author>
<author>D J Weir</author>
<author>A K Joshi</author>
</authors>
<title>Characterizing structural descriptions produced by various grammatical formalisms.</title>
<date>1987</date>
<booktitle>In 2501 meeting Assoc. Comput. Ling.,</booktitle>
<contexts>
<context position="22501" citStr="[11]" startWordPosition="3905" endWordPosition="3905">s) with (f COMP SUBJ NUM)= SING and (f TOPIC NUM) = PL. In this case, the shorter string COMP SUBJ cannot be used for COMP* GF because of the interaction, although the strings COMP SUBJ, i&gt; 2 can satisfy the above set of equations. In general, in LFG, extra work has to be done to account for interactions. On the other hand, in TAG, as we noted above, since there is no uncertainty about the grammatical function of the filler, such interactions do not arise at all. 4.2 REGULAR SETS IN FUNCTIONAL UNCERTAINTY From the definition of TAGs, it can be shown that the paths are always context-free sets [11]. If there are linguistic phenomena where the uncertainty machinery with regular sets is not enough, then the question arises whether TAG can provide an adequate analysis, given that paths are contextfree sets in TAGs. On the other hand, if regular sets are enough, we would like to explore whether the regularity requirement has a linguistic significance by itself. As far as we are aware, Kaplan and Zaenen [3] do not claim that the regularity requirement follows from the linguistic considerations. Rather, they have illustrated the adequacy of regular sets for the linguistic phenomena they have </context>
</contexts>
<marker>[11]</marker>
<rawString>K. Vijay-Shanker, D. J. Weir, and A. K. Joshi. Characterizing structural descriptions produced by various grammatical formalisms. In 2501 meeting Assoc. Comput. Ling., 1987.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D J Weir</author>
<author>A K Joshi</author>
</authors>
<title>Combinatory categorial grammars: generative power and relationship to linear context-free rewriting systems.</title>
<date>1988</date>
<booktitle>In 2601 meeting Assoc. Comput. Ling.,</booktitle>
<marker>[12]</marker>
<rawString>D. J. Weir and A. K. Joshi. Combinatory categorial grammars: generative power and relationship to linear context-free rewriting systems. In 2601 meeting Assoc. Comput. Ling., 1988.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>