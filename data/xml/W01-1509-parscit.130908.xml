<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000106">
<title confidence="0.616501">
Tools and resources for Tree Adjoining Grammars
</title>
<note confidence="0.815715">
François Barthélemy,
CEDRIC – CNAM,
92 Rue St Martin
FR-75141 Paris Cedex 03
</note>
<email confidence="0.968392">
barthe@cnam.fr
</email>
<author confidence="0.793129333333333">
Pierre Boullier, Philippe Deschamp
Linda Kaouane, Abdelaziz Khajour
Éric Villemonte de la Clergerie
</author>
<affiliation confidence="0.564379">
ATOLL - INRIA,
Domaine de Voluceau - BP 105
</affiliation>
<address confidence="0.714484">
FR-78153 Le Chesnay Cedex
</address>
<email confidence="0.997183">
Eric.De_La_Clergerie@inria.fr
</email>
<sectionHeader confidence="0.995605" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999948142857143">
This paper presents a workbench for
Tree Adjoining Grammars that we are
currently developing. This workbench
includes several tools and resources
based on the markup language XML,
used as a convenient language to format
and exchange linguistic resources.
</bodyText>
<sectionHeader confidence="0.998993" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.98886215">
Our primary concern lies in the developmen-
t of efficient parsers for various grammatical for-
malisms of interest for Natural Language Pro-
cessing. Tree Adjoining Grammars [TAG] is one
of these formalisms, important from a linguistic
point of view but also because it is possible to de-
sign efficient parsers.
However, during our work on TAG, we were
confronted with a lack of standardization of gram-
mars, especially when dealing with wide cover-
age grammars. The XTAG System1 (The XTAG
Research Group, 1995) provides an implicit stan-
dard, but it is not very readable and lacks explic-
it specifications. The various grammars we stud-
ied presented many variations. Moreover, we also
noted many problems of consistencies in most of
them.
Following others, amongst whom LT XML2
and especially (Bonhomme and Lopez, 2000),
we considered that the markup language XML3
</bodyText>
<footnote confidence="0.999849333333333">
1http://www.cis.upenn.edu/~xtag/
2http://www.ltg.ed.ac.uk/
3http://www.w3c.org/XML/
</footnote>
<bodyText confidence="0.999761684210526">
would be a good choice to represent TAG, espe-
cially with the possibility of providing an explicit
and logical specification via a DTD. Being textu-
al, resources in XML can be read by humans and
easily exchanged and maintained. Finally, there
exists more and more supports to handle XML re-
sources. We have also found that XML is a conve-
nient language to store linguistic results, such as
the shared derivation forests output by our TAG
parsers.
The paper starts with a brief introduction to
TAGs. Section 3 presents the different XML en-
codings that we have designed for the representa-
tion of grammars and derivation forests. Section 4
presents several different maintenance tools we
are developing to handle grammars and deriva-
tion forests. Section 5 presents servers used to
access different kind of informations. Interfaces
for these servers are presented in Section 6.
</bodyText>
<sectionHeader confidence="0.982147" genericHeader="introduction">
2 Tree Adjoining Grammars
</sectionHeader>
<bodyText confidence="0.997163928571428">
The TAG formalism (Joshi, 1987) is particular-
ly suitable to describe many linguistic phenome-
na. A TAG is given by a set of elementary trees
partitioned into initial trees and auxiliary trees.
Internal nodes are labeled by non-terminals and
leaves by non-terminal or terminals. Each auxil-
iary tree has a distinguished leaf, called its foot
and labeled by a non-terminal, the same as the
root node of .
Two operations may be used to derive trees
from elementary trees. The first one, called sub-
stitution, replaces a leaf node labeled by a non-
terminal by an initial tree whose root is also
labeled by . The second operation, called ad-
</bodyText>
<figureCaption confidence="0.999569">
Figure 1: Adjunction
</figureCaption>
<figure confidence="0.994458772727273">
donne: \DONNER,\ V
{mode=,indnum=sing}
\DONNER,\V: tn1pn2[p_2=à]
{NP_0.t:restr=+,hum
NP_2.t:restr=+hum}
tn1pn2
A
Root
β
Auxiliary Tree
Spine
A Foot
Adjunction
A
A
A
Adjunction
node v
(1) quelqu’un donne quelque chose à quelqu’un
somebody gives something to somebody
(2) Yves donne un joli livre à Sabine
Yves gives a nice book to Sabine
</figure>
<bodyText confidence="0.997370473684211">
junction, is illustrated by Figure 1. An auxiliary
tree whose root is labeled by maybe adjoined
at any node labeled by . The subtree rooted
at is grafted to the foot of .
Feature TAGs extend TAGs by attaching to n-
odes a pair of first-order terms represented by
Feature Structures [FS] and called top and bot-
tom arguments. These feature structures may be
used, for instance, to handle agreement or enforce
semantic restrictions.
Lexicalized (Feature) TAGs assumes that each
elementary tree has at least one lexical node la-
beled by a terminal. However, explicit lexicalized
grammars would be huge, with one or more ele-
mentary trees for each entry in the lexicon. The
choice made by the XTAG group and by all the
designers of wide coverage TAGs is to factor-
ize the grammars and gives enough information
to lexicalize parts of the grammars when needed.
Morphological entries (or inflected forms) refer-
ence one or more lemma entries, which, in turn,
refer to families of tree schema. A tree schema is
an elementary tree with a distinguished leaf called
anchor node that is to be replaced by a morpho-
logical entry. Each reference may be completed
by additional constraints.
For instance, extracted from a small French
grammar, Figure 2 shows the basic elements
(morphological entry donne, lemma \DONNER\,
and tree schema tn1pn2) used to build the tree
tn1pn2(donne) corresponding to the syntactic
pattern (1) and illustrated by sentence (2). The
lemma part states that the subject NP and the
prepositional complement NP must both be hu-
man and that NP is introduced by the preposi-
tion à (co-anchoring). In the tree tn1pn2, the
substitution nodes are marked with and the an-
chor node with .
</bodyText>
<figureCaption confidence="0.992147">
Figure 2: Tree schema
</figureCaption>
<sectionHeader confidence="0.996355" genericHeader="method">
3 XML Encoding
</sectionHeader>
<subsectionHeader confidence="0.999957">
3.1 Representing grammars
</subsectionHeader>
<bodyText confidence="0.9998736">
We have designed a DTD4 that clearly specifies
the relations between the various components of
a grammar. For instance, the following DTD frag-
ment states that a morphological entry is char-
acterized by a field lex and includes zero or
more description entries (for documentation) and
at least one reference to a lemma (lemmaref).
Similarly, an element lemmaref is character-
ized by the fields name and cat, and may be
completed by a FS argument (fs).
</bodyText>
<sectionHeader confidence="0.64370925" genericHeader="method">
&lt;!ELEMENT morph (desc*,lemmaref+)&gt;
&lt;!ATTLIST morph lex CDATA #REQUIRED&gt;
&lt;!ELEMENT lemmaref (fs?)&gt;
&lt;!ATTLIST lemmaref name CDATA #REQUIRED
</sectionHeader>
<subsectionHeader confidence="0.609401">
cat CDATA #REQUIRED&gt;
</subsectionHeader>
<bodyText confidence="0.9996958">
Following the DTD, the various elements de-
scribed in Figure 2 may be represented by the
(tiny) following XML fragment, omitting the FS
specification on nodes for sake of space and clar-
ity.
</bodyText>
<footnote confidence="0.986043875">
&lt;tag axiom=&amp;quot;s&amp;quot;&gt;
&lt;morph lex=&amp;quot;donne&amp;quot;&gt;
&lt;lemmaref cat=&amp;quot;v&amp;quot; name=&amp;quot;*DONNER*&amp;quot;&gt;
&lt;fs&gt;
&lt;f name=&amp;quot;mode&amp;quot;&gt;
&lt;val&gt;ind&lt;/val&gt;
&lt;val&gt;subj&lt;/val&gt;
4http://atoll.inria.fr/~clerger/tag.dtd,xml
</footnote>
<figure confidence="0.9979303">
S
NP VP
NP PP
P NP
V
&lt;&gt;V
&lt;/f&gt;
&lt;f name=&amp;quot;num&amp;quot;&gt;
&lt;val&gt;sing&lt;/val&gt;
&lt;/f&gt;
&lt;/fs&gt;
&lt;/lemmaref&gt;
&lt;/morph&gt;
&lt;lemma cat=&amp;quot;v&amp;quot; name=&amp;quot;*DONNER*&amp;quot;&gt;
&lt;anchor tree_id=&amp;quot;family[@name=tn1pn2]&amp;quot;&gt;
&lt;coanchor node_id=&amp;quot;p_2&amp;quot;&gt;
&lt;lex&gt;à&lt;/lex&gt;
&lt;/coanchor&gt;
&lt;equation node_id=&amp;quot;np_0&amp;quot; type=&amp;quot;top&amp;quot;&gt;
&lt;fs&gt;
&lt;f name=&amp;quot;restr&amp;quot;&gt;
&lt;val&gt;plushum&lt;/val&gt;
&lt;/f&gt;
&lt;/fs&gt;
&lt;/equation&gt;
&lt;equation node_id=&amp;quot;np_2&amp;quot; type=&amp;quot;top&amp;quot;&gt;
&lt;fs&gt;
&lt;f name=&amp;quot;restr&amp;quot;&gt;
&lt;val&gt;plushum&lt;/val&gt;
&lt;/f&gt;
&lt;/fs&gt;
&lt;/equation&gt;
&lt;/anchor&gt;
&lt;/lemma&gt;
&lt;family name=&amp;quot;tn1pn2&amp;quot;&gt;
&lt;tree name=&amp;quot;tn1pn2&amp;quot;&gt;
&lt;node cat=&amp;quot;s&amp;quot; adj=&amp;quot;yes&amp;quot; type=&amp;quot;std&amp;quot;&gt;
&lt;node cat=&amp;quot;np&amp;quot; id=&amp;quot;np_0&amp;quot; type=&amp;quot;subst&amp;quot; /&gt;
&lt;node cat=&amp;quot;vp&amp;quot; adj=&amp;quot;yes&amp;quot; type=&amp;quot;std&amp;quot;&gt;
&lt;node cat=&amp;quot;v&amp;quot; adj=&amp;quot;yes&amp;quot; type=&amp;quot;anchor&amp;quot; /&gt;
&lt;node cat=&amp;quot;np&amp;quot; type=&amp;quot;subst&amp;quot; /&gt;
&lt;node cat=&amp;quot;pp&amp;quot; adj=&amp;quot;yes&amp;quot; type=&amp;quot;std&amp;quot;&gt;
&lt;node cat=&amp;quot;p&amp;quot; id=&amp;quot;p_2&amp;quot; type=&amp;quot;subst&amp;quot;/&gt;
&lt;node cat=&amp;quot;np&amp;quot; id=&amp;quot;np_2&amp;quot; type=&amp;quot;subst&amp;quot;/&gt;
&lt;/node&gt;
&lt;/node&gt;
&lt;/node&gt;
&lt;/tree&gt;
&lt;/family&gt;
&lt;/tag&gt;
</figure>
<bodyText confidence="0.999499714285714">
Currently, we have encoded a small French
grammar (50 tree schemata, 117 lemmas and
345 morphological entries) and an English gram-
mar (456 tree schemata, 333 lemmas and
507 morphological entries). We are processing
some other larger grammars (for both English and
French).
</bodyText>
<subsectionHeader confidence="0.999765">
3.2 Encoding derivations
</subsectionHeader>
<bodyText confidence="0.999975833333334">
A (deterministic) TAG parser may return either
the result of the analysis as a parse tree, or the
steps of the derivation as a derivation tree. These
two alternatives are illustrated for sentence (3) by
Figures 3 and 4 (with Figure 5 showing the ele-
mentary lexicalized trees). A derivation tree in-
dicates which operation (substitution or adjunc-
tion of some tree) has taken place on which node
of which tree, for instance the adjunction of tree
a joli at node labeled N. It is worth noting that
the parse tree may be retrieved from the deriva-
tion tree, which motivates our interest in deriva-
</bodyText>
<figure confidence="0.690869">
un Adj N
joli livre
</figure>
<figureCaption confidence="0.99744">
Figure 3: Parse Tree
</figureCaption>
<bodyText confidence="0.615488">
adj
a(joli)
</bodyText>
<figureCaption confidence="0.9999455">
Figure 4: Derivation Tree
Figure 6: Organization of a derivation forest
</figureCaption>
<bodyText confidence="0.999769">
In case of ambiguity (frequent in NLP), several
or even an unbounded number of derivation trees
may actually be compacted into a shared deriva-
tion forest, equivalent to a Context-Free Grammar
(Lang, 1991). This remark has guided the design
</bodyText>
<figure confidence="0.983302115384616">
tion trees. donne un joli livre à Sabine
(3) Yves gives a nice book to Sabine
Yves
S
NP VP
NP
V
PP
donne
NP
NP
P
Yves
à Sabine
D
N
subst
tn1pn2(donne,à)
subst
np(Yves)
subst
npdn(livre)
subst
d(un)
subst
np(Sabine)
</figure>
<figureCaption confidence="0.990081">
Figure 5: Elementary trees
</figureCaption>
<figure confidence="0.996086857142857">
NP np(Yves)
donne
NP npdn(livre)
NP PP
P
à
D N
livre
D d(un)
a(joli) N
Adj
joli
S tn1pn2(donne,à)
NP VP
N
V
Yves
NP
NP np(Sabine)
Sabine
un
</figure>
<bodyText confidence="0.999801666666667">
of a DTD5 to encode shared derivation forests.
This DTD introduces the primary elements op,
deriv, and node as well as an element opref
used to reference elements op. The logical orga-
nization of these elements is sketched in Figure 6.
More precisely:
op , identified by its attribute id, denotes either
an operation of substitution or of adjunction
(attribute type) on some syntactic catego-
ry (attribute cat) for some span of the in-
put string (attribute span). Sub-elements of
op may also be present to specify the feature
values associated to the operation.
deriv details a possible derivation for some oper-
ation, based on some lexicalized tree given
by a tree schema (attribute tree) and an an-
chor (anchor).
node specifies which operation op has been per-
formed on some node (attribute node_id)
of an elementary tree during a derivation.
A derivation tree may be expressed in a nested
way using only elements op, deriv, and node.
A shared forest will require the use of opref to
denote multiple occurrences of a same operation.
</bodyText>
<footnote confidence="0.750889">
5http://atoll.inria.fr/~clerger/forest.dtd,xml
</footnote>
<bodyText confidence="0.998993666666667">
The above derivation tree may be represented
by the following XML fragment (omitting infor-
mation about the feature structures).
</bodyText>
<table confidence="0.837963055555556">
&lt;forest parser=&amp;quot;Light DyALog&amp;quot;&gt;
&lt;sentence&gt; Yves donne un joli livre à Sabine
&lt;/sentence&gt;
&lt;op cat=&amp;quot;s&amp;quot; span=&amp;quot;0 7&amp;quot; id=&amp;quot;1&amp;quot; type=&amp;quot;subst&amp;quot;&gt;
&lt;deriv tree=&amp;quot;tn1pn2&amp;quot; anchor=&amp;quot;donne&amp;quot;&gt;
&lt;node id=&amp;quot;p_2&amp;quot;&gt;&lt;opref ref=&amp;quot;5&amp;quot; /&gt;&lt;/node&gt;
&lt;node id=&amp;quot;np_0&amp;quot;&gt;&lt;opref ref=&amp;quot;2&amp;quot; /&gt;&lt;/node&gt;
&lt;node id=&amp;quot;1&amp;quot;&gt;&lt;opref ref=&amp;quot;4&amp;quot; /&gt;&lt;/node&gt;
&lt;node id=&amp;quot;np_2&amp;quot;&gt;&lt;opref ref=&amp;quot;6&amp;quot; /&gt;&lt;/node&gt;
&lt;/deriv&gt;
&lt;/op&gt;
&lt;op cat=&amp;quot;np&amp;quot; span=&amp;quot;0 1&amp;quot; id=&amp;quot;2&amp;quot; type=&amp;quot;subst&amp;quot;&gt;
&lt;deriv tree=&amp;quot;np&amp;quot; anchor=&amp;quot;Yves&amp;quot; /&gt;
&lt;/op&gt;
&lt;op cat=&amp;quot;np&amp;quot; span=&amp;quot;2 5&amp;quot; id=&amp;quot;4&amp;quot; type=&amp;quot;subst&amp;quot;&gt;
&lt;deriv tree=&amp;quot;npdn&amp;quot; anchor=&amp;quot;livre&amp;quot;&gt;
&lt;node id=&amp;quot;n_&amp;quot;&gt;&lt;opref ref=&amp;quot;10&amp;quot; /&gt;&lt;/node&gt;
&lt;node id=&amp;quot;0&amp;quot;&gt;&lt;opref ref=&amp;quot;8&amp;quot; /&gt;&lt;/node&gt;
</table>
<figure confidence="0.8583686">
&lt;/deriv&gt;
&lt;/op&gt;
&lt;op cat=&amp;quot;p&amp;quot; span=&amp;quot;5 6&amp;quot; id=&amp;quot;5&amp;quot; type=&amp;quot;subst&amp;quot;&gt;
&lt;deriv tree=&amp;quot;p&amp;quot; anchor=&amp;quot;à&amp;quot; /&gt;
&lt;/op&gt;
&lt;op cat=&amp;quot;np&amp;quot; span=&amp;quot;6 7&amp;quot; id=&amp;quot;6&amp;quot; type=&amp;quot;subst&amp;quot;&gt;
&lt;deriv tree=&amp;quot;np&amp;quot; anchor=&amp;quot;Sabine&amp;quot; /&gt;
&lt;/op&gt;
&lt;op cat=&amp;quot;d&amp;quot; span=&amp;quot;2 3&amp;quot; id=&amp;quot;8&amp;quot; type=&amp;quot;subst&amp;quot;&gt;
&lt;deriv tree=&amp;quot;d&amp;quot; anchor=&amp;quot;un&amp;quot; /&gt;
&lt;/op&gt;
&lt;op cat=&amp;quot;n&amp;quot; span=&amp;quot;3 5 4 5&amp;quot; id=&amp;quot;10&amp;quot; type=&amp;quot;adj&amp;quot;&gt;
&lt;deriv tree=&amp;quot;an&amp;quot; anchor=&amp;quot;joli&amp;quot; /&gt;
&lt;/op&gt;
&lt;/forest&gt;
</figure>
<sectionHeader confidence="0.97326" genericHeader="method">
4 Maintenance tools
</sectionHeader>
<subsectionHeader confidence="0.967955">
4.1 For the grammars
</subsectionHeader>
<bodyText confidence="0.99818575">
The XML encoding of grammars is convenient
for maintenance and exchange. However, it does
not correspond to the input formats expected by
the two parser compilers we develop. One of
them (DyALog) expects a prolog-like representa-
tion of the grammars (Alonso Pardo et al., 2000)
while the second one expects Range Concatena-
tion Grammars [RCG] (Boullier, 2000).
</bodyText>
<figure confidence="0.711391">
Analyzer
LP
</figure>
<figureCaption confidence="0.999422">
Figure 7: Maintenance Tools for the grammars
</figureCaption>
<bodyText confidence="0.999960038461538">
Therefore, we have developed in Perl a set of
maintenance modules, for these conversions and
for other tasks (Figure 7). The central module
TAG implements an object-oriented view of the
logical structure specified by the Grammar DTD.
The other modules add new methods to the class-
es introduced by TAG.
Besides the conversion modules LP and RCG,
we also have a read/write XML module. Mod-
ule Checker is used to check (partially) the co-
herence of the grammar and to produce some s-
tatistics. Module Analyzer extracts information
needed for the compilation by the DyALog sys-
tem. Module Strip deletes all information rela-
tive to feature structures from the grammar. Mod-
ule SQL may be used to store to and load from a
SQL database.
Our choice of Perl has been motivated by the
availability from archive sites of many Perl mod-
ules to handle XML resources or database access.
Moreover, the development of a Perl module is
fast (for a prototype), generally only a few hours.
For instance, we have realized a prototype mod-
ule LaTeX, useful to build the documentation of
a grammar. We are also thinking of an HTML
module to build online versions.
</bodyText>
<subsectionHeader confidence="0.962971">
4.2 For the derivation forests
</subsectionHeader>
<bodyText confidence="0.9914695">
Similarly, we have also developed a set of mod-
ules to handle derivation forests (Fig. 8) with a
</bodyText>
<figureCaption confidence="0.997813">
Figure 8: Maintenance Tools for the forests
</figureCaption>
<bodyText confidence="0.999804846153846">
central module FOREST and conversion mod-
ules. Modules LP, RCG, and XTAG read the out-
put formats of the derivation forests produced by
our parsers and by the TAG parser6. The forests
can then be emitted in XML format (module XM-
L), in HTML format (module HTML), as trees
(module Tree) or as dependency graphs (module
Dep).
Other modules should be added in the future,
such as SQL module to read to and to write from
a database used as a derivation tree-bank, a Strip
module to remove features, or different filtering
modules to extract subsets of a forest.
</bodyText>
<sectionHeader confidence="0.995235" genericHeader="method">
5 Servers
</sectionHeader>
<bodyText confidence="0.9998732">
Exploiting some of these modules, but also other
components developed in Java, we are installing
several servers to access different kinds of infor-
mation (parsers, grammars, forests) in uniform
and distributed ways.
</bodyText>
<subsectionHeader confidence="0.996561">
5.1 A server of parsers
</subsectionHeader>
<bodyText confidence="0.998958538461538">
We are exploring several ways to build efficient
parsers for TAGs (Éric Villemonte de la Clerg-
erie and Alonso Pardo, 1998; Alonso Pardo et
al., 2000; Éric Villemonte de la Clergerie, 2001;
Boullier, 2000; Barthélemy et al., 2001; Barthéle-
my et al., 2000), which leads us to maintain
a growing set of parsers. Moreover, we wish
to be able to compare the output produced by
these parsers to check soundness, completeness
and level of sharing in the derivation forests. To
achieve these objectives, we provide a uniform
setting by installing a simple server of parsers,
written in Perl. Once connected to this server, one
</bodyText>
<footnote confidence="0.711644">
6http://www.cis.upenn.edu/~xtag/
</footnote>
<figure confidence="0.9957945">
XTAG
XML
RCG
Strip
TAG
Checker
SQL
LaTeX
Dep
RCG
XTAG
XML
Tree
HTML
LP
FOREST
</figure>
<bodyText confidence="0.996731363636363">
selects a parser and sends a sentence to parse; the
server returns the shared derivation forest in raw,
HTML, XML, Tree or Dep formats.
A WEB front-end7 may be used to connect to
this server. Figures 9 and 10 show two views of a
derivation forest built using the server.
Another WEB front-end8 allows the direct sub-
mission to the server of a derivation forest in
one of the 3 recognized input formats (LP, RCG,
XTAG). Submission in XML format should be
added soon.
</bodyText>
<figureCaption confidence="0.998568">
Figure 9: Derivation tree
</figureCaption>
<subsectionHeader confidence="0.99973">
5.2 A server of grammars
</subsectionHeader>
<bodyText confidence="0.9999746">
Because of the size of wide-coverage grammars,
we believe that working with grammars stored in
files is no longer a valid option (except for ex-
changing them). Databases should be used in-
stead where bits of information can be efficiently
retrieved. Moreover, modern database managers
provide server fonctionalities and security mech-
anisms.
Around these ideas, we are currently develop-
ing in Java a server of grammars.
First the grammars are loaded into a SQL
database (namely MySQL9). It should be noted
that the structure of the database reflects the XML
structure for grammars and not directly the struc-
ture of the grammars. This means that the loading
</bodyText>
<footnote confidence="0.999929333333333">
7http://medoc.inria.fr/pub-cgi-bin/parser.cgi
8http://medoc.inria.fr/pub-cgi-bin/forest.cgi
9http://www.mysql.com/
</footnote>
<bodyText confidence="0.99476035">
phase may be performed for (almost) any kind of
XML documents.
The second main component of the server is a
small query language used to fetch information
from the database while hiding, for non special-
ists, the complexity of languages SQL, XQL or
XPath. We have chosen an object oriented nota-
tion which, once again, reflects the structure of
the TAG DTD and which is also close to path
equations familiar to computational linguists in,
for instance, HPSG. We have several types such as
family, morph, tree or node corresponding
to the different kinds of elements of the DTD. For
each type, several methods are available. For ex-
ample, the following query returns the name and
the Database Id (DBId) of all trees belonging to
family tn1pn2. A second kind of requests takes
a DBId and returns the full XML fragment as-
sociated to the XML element whose index in the
database is .
</bodyText>
<equation confidence="0.910567285714286">
var
tree t;
select
t.name; t;
where
t.family.name’ = ’tn1pn2
end
</equation>
<bodyText confidence="0.9995951">
The grammar server works as a Java servlet, in-
tegrated in a HTTP server Apache using JServ10.
It may be accessed using URL with parameters
(as done for CGI scripts). The server decodes the
parameters and transforms the query into a SQL
query send to the database corresponding to the
selected grammar. The result is either a table en-
coded in XML format or an XML fragment of the
grammar. A small WEB interface11 is available to
display the results in a navigator (by transforming
them into HTML) but it is also possible to get the
results as an XML file. Tools can therefore query
the server by sending a URL and getting back the
results in XML.
The server should be soon completed for edi-
tion tasks. Full deletion of an element and of its
descendants may be achieved using DBIds. Ad-
dition can be achieved by sending an XML frag-
ment and a DBId (stating where to attach the XM-
L fragment).
</bodyText>
<footnote confidence="0.991017">
10http://www.apache.org
11http://tequila.inria.fr/
</footnote>
<figure confidence="0.9981483">
d 2 3
d(un)
n 3 5 4 5
an(joli)
np_2
np_0
np#1
p_2
s 0 7
tn1pn2(donne)
np 0 1
np(Yves)
np 2 5
p 5 6
p(a)
np 6 7
np(Sabine)
n_
d#0
npdn(livre)
</figure>
<figureCaption confidence="0.948833">
Figure 10: Dependency view
</figureCaption>
<figure confidence="0.998936529411764">
p_2
p
Yves donne
Sabine
a
np_0 np_2
np tn1pn2
np
np#1
livre
un
d#0
d
npdn
joli
n_
an
</figure>
<subsectionHeader confidence="0.983991">
5.3 A server of derivation forests
</subsectionHeader>
<bodyText confidence="0.999979333333333">
The development of a server of derivation forests
has just started, along the same lines we followed
for the server of grammars. Such a server will be
an alternative to treebanks. Two main functional-
ities are planned for this server. First the possi-
bility to add a derivation forest to the underlying
database (in order to build corpora of derivation-
s) and second, ways to access these derivations
through a simple but powerful query language.
</bodyText>
<sectionHeader confidence="0.999792" genericHeader="method">
6 Interfaces
</sectionHeader>
<bodyText confidence="0.999967346153846">
We have already mentioned WEB interfaces to
the parser server and the grammar server. Besides
these interfaces, we (Kaouane, 2000) have also
modified and enriched a Java interface developed
by Patrice Lopez (Lopez, 2000). The new version
can import grammars and derivation forests that
follow our XML DTD. It can also use the server
of parsers, sending the sentence to parse and re-
ceiving the shared derivation forest in XML for-
mat.
The derivations are extracted from the deriva-
tion forests and, for each derivation, the tool dis-
plays both the derivation tree and the correspond-
ing parse tree (see Figure 11). It is also possi-
ble to follow step by step a derivation by moving
forward or backward. We found this functionali-
ty useful to understand or explain to students the
workouts of TAG.
The viewer may also be used to browse the d-
ifferent components of a grammar (trees and lex-
icons), therefore helping in its maintenance.
This tool already exploits the parser server, but
we also plan to extend it to exploit the grammar
server (for browsing the grammars or displaying
a derived tree) and the forest server (for accessing
derivation forests).
</bodyText>
<sectionHeader confidence="0.951283" genericHeader="conclusions">
Conclusion
</sectionHeader>
<bodyText confidence="0.999950166666666">
The experiments we have performed have
strengthened our opinion that XML is really ad-
equate to maintain and exchange linguistic re-
sources and that XML allows us to quickly de-
velop tools to handle these resources. Most of the
components presented in this paper have been de-
veloped over a short period of time, and, while
still preliminary, are fully usable. We believe that
XML and these tools gives us solid foundation-
s to further develop a complete environment to
handle TAGs, based on many simple and easy-
to-maintain tools (instead of having a monolith-
ic system). We also think that the availabili-
ty of such tools or resources may prove useful
for linguists (to develop grammars with browsing
and maintenance tools), for parser developers (to
browse grammars and derivations), and for stu-
dents in computational linguistics (to understand
Tree Adjoining Grammars).
The tools and resources that we develop are
freely available. Tools are based on a modular ar-
chitecture with a specification given by the DTD
and we hope that new components will be added
by other people.
</bodyText>
<sectionHeader confidence="0.999474" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.996189948275862">
Miguel Alonso Pardo, Djamé Seddah, and Éric Ville-
monte de la Clergerie. 2000. Practical aspects
in compiling tabular TAG parsers. In Proceedings
of the th International Workshop on Tree Adjoin-
ing Grammars and Related Formalisms (TAG+5),
pages 27–32, Université Paris 7, Jussieu, Paris,
France, May.
Figure 11: Screen capture of the Java derivation viewer
F. Barthélemy, P. Boullier, Ph. Deschamp, and
É. Villemonte de la Clergerie. 2001. Guided pars-
ing of range concatenation languages. In Proceed-
ings of the 39th Annual Meeting of the Association
for Computational Linguistics (ACL’01), Universi-
ty of Toulouse, France, July. to be published.
Patrick Bonhomme and Patrice Lopez. 2000. TagML:
XML encoding of resources for lexicalized tree ad-
joining grammars. In Proceedings of LREC 2000,
Athens.
Pierre Boullier. 2000. Range concatenation gram-
mars. In Proceedings of the th International Work-
shop on Parsing Technologies (IWPT2000), pages
53–64, Trento, Italy, February. see also Rapport de
recherche n 3342, online at http://www.inria.
fr/RRRT/RR-3342.html, INRIA, France, Jan-
uary 1998, 41 pages.
Aravind K. Joshi. 1987. An introduction to
tree adjoining grammars. In Alexis Manaster-
Ramer, editor, Mathematics of Language, pages
87–115. John Benjamins Publishing Co., Amster-
dam/Philadelphia.
Linda Kaouane. 2000. Adaptation et utilisation d’un
environnement graphique pour les TAG au dessus
du système DyALog. Mémoire de DEA, Université
d’Orléans.
Bernard Lang. 1991. Towards a uniform formal
framework for parsing. In Masaru Tomita, editor,
Current issues in Parsing Technology, chapter 11.
Kluwer Academic Publishers. Also appeared in the
Proceedings of International Workshop on Parsing
Technologies – IWPT89.
Patrice Lopez. 2000. LTAG workbench: A general
framework for LTAG. In Proceedings of the th In-
ternational Workshop on Tree Adjoining Grammars
and Related Formalisms (TAG+5), Paris, May.
Éric Villemonte de la Clergerie and Miguel Alon-
so Pardo. 1998. A tabular interpretation of
a class of 2-stack automata. In Proceed-
ings of ACL/COLING’98, August. online at
ftp://ftp.inria.fr/INRIA/Projects/
Atoll/Eric.Clergerie/SD2SA.ps.gz.
Éric Villemonte de la Clergerie. 2001. Refining tabu-
lar parsers for TAGs. In Proceedings ofNAACL’01,
June. to be published.
The XTAG Research Group. 1995. A lexicalized
tree adjoining grammar for English. Technical Re-
port IRCS 95-03, Institute for Research in Cogni-
tive Science, University of Pennsylvania, Philadel-
phia, PA, USA, March.
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.110994">
<title confidence="0.9725865">Tools and resources for Tree Adjoining Grammars François</title>
<author confidence="0.612834">CEDRIC</author>
<address confidence="0.806619">92 Rue St FR-75141 Paris Cedex</address>
<email confidence="0.973072">barthe@cnam.fr</email>
<author confidence="0.71484">Pierre Boullier</author>
<author confidence="0.71484">Philippe Deschamp Khajour Éric Villemonte de_la</author>
<affiliation confidence="0.889306">ATOLL - Domaine de Voluceau - BP</affiliation>
<address confidence="0.928585">FR-78153 Le Chesnay</address>
<email confidence="0.901754">Eric.De_La_Clergerie@inria.fr</email>
<abstract confidence="0.999362375">This paper presents a workbench for Tree Adjoining Grammars that we are currently developing. This workbench includes several tools and resources based on the markup language XML, used as a convenient language to format and exchange linguistic resources.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Miguel Alonso Pardo</author>
</authors>
<title>Djamé Seddah, and Éric Villemonte de la Clergerie.</title>
<date>2000</date>
<booktitle>In Proceedings of the th International Workshop on Tree Adjoining Grammars and Related Formalisms (TAG+5),</booktitle>
<pages>27--32</pages>
<institution>Université Paris</institution>
<location>Jussieu, Paris, France,</location>
<marker>Pardo, 2000</marker>
<rawString>Miguel Alonso Pardo, Djamé Seddah, and Éric Villemonte de la Clergerie. 2000. Practical aspects in compiling tabular TAG parsers. In Proceedings of the th International Workshop on Tree Adjoining Grammars and Related Formalisms (TAG+5), pages 27–32, Université Paris 7, Jussieu, Paris, France, May.</rawString>
</citation>
<citation valid="false">
<title>Figure 11: Screen capture of the Java derivation viewer</title>
<marker></marker>
<rawString>Figure 11: Screen capture of the Java derivation viewer</rawString>
</citation>
<citation valid="true">
<authors>
<author>Deschamp</author>
<author>É Villemonte de la Clergerie</author>
</authors>
<title>Guided parsing of range concatenation languages.</title>
<date>2001</date>
<booktitle>In Proceedings of the 39th Annual Meeting of the Association for Computational Linguistics (ACL’01),</booktitle>
<institution>University of Toulouse, France,</institution>
<note>to be published.</note>
<marker>Deschamp, Clergerie, 2001</marker>
<rawString>F. Barthélemy, P. Boullier, Ph. Deschamp, and É. Villemonte de la Clergerie. 2001. Guided parsing of range concatenation languages. In Proceedings of the 39th Annual Meeting of the Association for Computational Linguistics (ACL’01), University of Toulouse, France, July. to be published.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Patrick Bonhomme</author>
<author>Patrice Lopez</author>
</authors>
<title>TagML: XML encoding of resources for lexicalized tree adjoining grammars.</title>
<date>2000</date>
<booktitle>In Proceedings of LREC 2000,</booktitle>
<location>Athens.</location>
<contexts>
<context position="1428" citStr="Bonhomme and Lopez, 2000" startWordPosition="217" endWordPosition="220"> these formalisms, important from a linguistic point of view but also because it is possible to design efficient parsers. However, during our work on TAG, we were confronted with a lack of standardization of grammars, especially when dealing with wide coverage grammars. The XTAG System1 (The XTAG Research Group, 1995) provides an implicit standard, but it is not very readable and lacks explicit specifications. The various grammars we studied presented many variations. Moreover, we also noted many problems of consistencies in most of them. Following others, amongst whom LT XML2 and especially (Bonhomme and Lopez, 2000), we considered that the markup language XML3 1http://www.cis.upenn.edu/~xtag/ 2http://www.ltg.ed.ac.uk/ 3http://www.w3c.org/XML/ would be a good choice to represent TAG, especially with the possibility of providing an explicit and logical specification via a DTD. Being textual, resources in XML can be read by humans and easily exchanged and maintained. Finally, there exists more and more supports to handle XML resources. We have also found that XML is a convenient language to store linguistic results, such as the shared derivation forests output by our TAG parsers. The paper starts with a bri</context>
</contexts>
<marker>Bonhomme, Lopez, 2000</marker>
<rawString>Patrick Bonhomme and Patrice Lopez. 2000. TagML: XML encoding of resources for lexicalized tree adjoining grammars. In Proceedings of LREC 2000, Athens.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Pierre Boullier</author>
</authors>
<title>Range concatenation grammars.</title>
<date>2000</date>
<booktitle>In Proceedings of the th International Workshop on Parsing Technologies (IWPT2000),</booktitle>
<pages>53--64</pages>
<location>Trento, Italy,</location>
<contexts>
<context position="11166" citStr="Boullier, 2000" startWordPosition="1733" endWordPosition="1734">riv tree=&amp;quot;np&amp;quot; anchor=&amp;quot;Sabine&amp;quot; /&gt; &lt;/op&gt; &lt;op cat=&amp;quot;d&amp;quot; span=&amp;quot;2 3&amp;quot; id=&amp;quot;8&amp;quot; type=&amp;quot;subst&amp;quot;&gt; &lt;deriv tree=&amp;quot;d&amp;quot; anchor=&amp;quot;un&amp;quot; /&gt; &lt;/op&gt; &lt;op cat=&amp;quot;n&amp;quot; span=&amp;quot;3 5 4 5&amp;quot; id=&amp;quot;10&amp;quot; type=&amp;quot;adj&amp;quot;&gt; &lt;deriv tree=&amp;quot;an&amp;quot; anchor=&amp;quot;joli&amp;quot; /&gt; &lt;/op&gt; &lt;/forest&gt; 4 Maintenance tools 4.1 For the grammars The XML encoding of grammars is convenient for maintenance and exchange. However, it does not correspond to the input formats expected by the two parser compilers we develop. One of them (DyALog) expects a prolog-like representation of the grammars (Alonso Pardo et al., 2000) while the second one expects Range Concatenation Grammars [RCG] (Boullier, 2000). Analyzer LP Figure 7: Maintenance Tools for the grammars Therefore, we have developed in Perl a set of maintenance modules, for these conversions and for other tasks (Figure 7). The central module TAG implements an object-oriented view of the logical structure specified by the Grammar DTD. The other modules add new methods to the classes introduced by TAG. Besides the conversion modules LP and RCG, we also have a read/write XML module. Module Checker is used to check (partially) the coherence of the grammar and to produce some statistics. Module Analyzer extracts information needed for the c</context>
<context position="13539" citStr="Boullier, 2000" startWordPosition="2141" endWordPosition="2142">o and to write from a database used as a derivation tree-bank, a Strip module to remove features, or different filtering modules to extract subsets of a forest. 5 Servers Exploiting some of these modules, but also other components developed in Java, we are installing several servers to access different kinds of information (parsers, grammars, forests) in uniform and distributed ways. 5.1 A server of parsers We are exploring several ways to build efficient parsers for TAGs (Éric Villemonte de la Clergerie and Alonso Pardo, 1998; Alonso Pardo et al., 2000; Éric Villemonte de la Clergerie, 2001; Boullier, 2000; Barthélemy et al., 2001; Barthélemy et al., 2000), which leads us to maintain a growing set of parsers. Moreover, we wish to be able to compare the output produced by these parsers to check soundness, completeness and level of sharing in the derivation forests. To achieve these objectives, we provide a uniform setting by installing a simple server of parsers, written in Perl. Once connected to this server, one 6http://www.cis.upenn.edu/~xtag/ XTAG XML RCG Strip TAG Checker SQL LaTeX Dep RCG XTAG XML Tree HTML LP FOREST selects a parser and sends a sentence to parse; the server returns the sh</context>
</contexts>
<marker>Boullier, 2000</marker>
<rawString>Pierre Boullier. 2000. Range concatenation grammars. In Proceedings of the th International Workshop on Parsing Technologies (IWPT2000), pages 53–64, Trento, Italy, February. see also Rapport de recherche n 3342, online at http://www.inria. fr/RRRT/RR-3342.html, INRIA, France, January 1998, 41 pages.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Aravind K Joshi</author>
</authors>
<title>An introduction to tree adjoining grammars.</title>
<date>1987</date>
<booktitle>Mathematics of Language,</booktitle>
<pages>87--115</pages>
<editor>In Alexis ManasterRamer, editor,</editor>
<publisher>John Benjamins Publishing Co., Amsterdam/Philadelphia.</publisher>
<contexts>
<context position="2485" citStr="Joshi, 1987" startWordPosition="382" endWordPosition="383">that XML is a convenient language to store linguistic results, such as the shared derivation forests output by our TAG parsers. The paper starts with a brief introduction to TAGs. Section 3 presents the different XML encodings that we have designed for the representation of grammars and derivation forests. Section 4 presents several different maintenance tools we are developing to handle grammars and derivation forests. Section 5 presents servers used to access different kind of informations. Interfaces for these servers are presented in Section 6. 2 Tree Adjoining Grammars The TAG formalism (Joshi, 1987) is particularly suitable to describe many linguistic phenomena. A TAG is given by a set of elementary trees partitioned into initial trees and auxiliary trees. Internal nodes are labeled by non-terminals and leaves by non-terminal or terminals. Each auxiliary tree has a distinguished leaf, called its foot and labeled by a non-terminal, the same as the root node of . Two operations may be used to derive trees from elementary trees. The first one, called substitution, replaces a leaf node labeled by a nonterminal by an initial tree whose root is also labeled by . The second operation, called ad</context>
</contexts>
<marker>Joshi, 1987</marker>
<rawString>Aravind K. Joshi. 1987. An introduction to tree adjoining grammars. In Alexis ManasterRamer, editor, Mathematics of Language, pages 87–115. John Benjamins Publishing Co., Amsterdam/Philadelphia.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Linda Kaouane</author>
</authors>
<title>Adaptation et utilisation d’un environnement graphique pour les TAG au dessus du système DyALog. Mémoire de DEA, Université d’Orléans.</title>
<date>2000</date>
<contexts>
<context position="18106" citStr="Kaouane, 2000" startWordPosition="2925" endWordPosition="2926">rver of derivation forests The development of a server of derivation forests has just started, along the same lines we followed for the server of grammars. Such a server will be an alternative to treebanks. Two main functionalities are planned for this server. First the possibility to add a derivation forest to the underlying database (in order to build corpora of derivations) and second, ways to access these derivations through a simple but powerful query language. 6 Interfaces We have already mentioned WEB interfaces to the parser server and the grammar server. Besides these interfaces, we (Kaouane, 2000) have also modified and enriched a Java interface developed by Patrice Lopez (Lopez, 2000). The new version can import grammars and derivation forests that follow our XML DTD. It can also use the server of parsers, sending the sentence to parse and receiving the shared derivation forest in XML format. The derivations are extracted from the derivation forests and, for each derivation, the tool displays both the derivation tree and the corresponding parse tree (see Figure 11). It is also possible to follow step by step a derivation by moving forward or backward. We found this functionality usefu</context>
</contexts>
<marker>Kaouane, 2000</marker>
<rawString>Linda Kaouane. 2000. Adaptation et utilisation d’un environnement graphique pour les TAG au dessus du système DyALog. Mémoire de DEA, Université d’Orléans.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Bernard Lang</author>
</authors>
<title>Towards a uniform formal framework for parsing.</title>
<date>1991</date>
<booktitle>Current issues in Parsing Technology, chapter 11. Kluwer Academic Publishers. Also appeared in the Proceedings of International Workshop on Parsing Technologies – IWPT89.</booktitle>
<editor>In Masaru Tomita, editor,</editor>
<contexts>
<context position="8199" citStr="Lang, 1991" startWordPosition="1276" endWordPosition="1277">ch operation (substitution or adjunction of some tree) has taken place on which node of which tree, for instance the adjunction of tree a joli at node labeled N. It is worth noting that the parse tree may be retrieved from the derivation tree, which motivates our interest in derivaun Adj N joli livre Figure 3: Parse Tree adj a(joli) Figure 4: Derivation Tree Figure 6: Organization of a derivation forest In case of ambiguity (frequent in NLP), several or even an unbounded number of derivation trees may actually be compacted into a shared derivation forest, equivalent to a Context-Free Grammar (Lang, 1991). This remark has guided the design tion trees. donne un joli livre à Sabine (3) Yves gives a nice book to Sabine Yves S NP VP NP V PP donne NP NP P Yves à Sabine D N subst tn1pn2(donne,à) subst np(Yves) subst npdn(livre) subst d(un) subst np(Sabine) Figure 5: Elementary trees NP np(Yves) donne NP npdn(livre) NP PP P à D N livre D d(un) a(joli) N Adj joli S tn1pn2(donne,à) NP VP N V Yves NP NP np(Sabine) Sabine un of a DTD5 to encode shared derivation forests. This DTD introduces the primary elements op, deriv, and node as well as an element opref used to reference elements op. The logical org</context>
</contexts>
<marker>Lang, 1991</marker>
<rawString>Bernard Lang. 1991. Towards a uniform formal framework for parsing. In Masaru Tomita, editor, Current issues in Parsing Technology, chapter 11. Kluwer Academic Publishers. Also appeared in the Proceedings of International Workshop on Parsing Technologies – IWPT89.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Patrice Lopez</author>
</authors>
<title>LTAG workbench: A general framework for LTAG.</title>
<date>2000</date>
<booktitle>In Proceedings of the th International Workshop on Tree Adjoining Grammars and Related Formalisms (TAG+5),</booktitle>
<location>Paris,</location>
<contexts>
<context position="1428" citStr="Lopez, 2000" startWordPosition="219" endWordPosition="220">isms, important from a linguistic point of view but also because it is possible to design efficient parsers. However, during our work on TAG, we were confronted with a lack of standardization of grammars, especially when dealing with wide coverage grammars. The XTAG System1 (The XTAG Research Group, 1995) provides an implicit standard, but it is not very readable and lacks explicit specifications. The various grammars we studied presented many variations. Moreover, we also noted many problems of consistencies in most of them. Following others, amongst whom LT XML2 and especially (Bonhomme and Lopez, 2000), we considered that the markup language XML3 1http://www.cis.upenn.edu/~xtag/ 2http://www.ltg.ed.ac.uk/ 3http://www.w3c.org/XML/ would be a good choice to represent TAG, especially with the possibility of providing an explicit and logical specification via a DTD. Being textual, resources in XML can be read by humans and easily exchanged and maintained. Finally, there exists more and more supports to handle XML resources. We have also found that XML is a convenient language to store linguistic results, such as the shared derivation forests output by our TAG parsers. The paper starts with a bri</context>
<context position="18196" citStr="Lopez, 2000" startWordPosition="2939" endWordPosition="2940">d, along the same lines we followed for the server of grammars. Such a server will be an alternative to treebanks. Two main functionalities are planned for this server. First the possibility to add a derivation forest to the underlying database (in order to build corpora of derivations) and second, ways to access these derivations through a simple but powerful query language. 6 Interfaces We have already mentioned WEB interfaces to the parser server and the grammar server. Besides these interfaces, we (Kaouane, 2000) have also modified and enriched a Java interface developed by Patrice Lopez (Lopez, 2000). The new version can import grammars and derivation forests that follow our XML DTD. It can also use the server of parsers, sending the sentence to parse and receiving the shared derivation forest in XML format. The derivations are extracted from the derivation forests and, for each derivation, the tool displays both the derivation tree and the corresponding parse tree (see Figure 11). It is also possible to follow step by step a derivation by moving forward or backward. We found this functionality useful to understand or explain to students the workouts of TAG. The viewer may also be used to</context>
</contexts>
<marker>Lopez, 2000</marker>
<rawString>Patrice Lopez. 2000. LTAG workbench: A general framework for LTAG. In Proceedings of the th International Workshop on Tree Adjoining Grammars and Related Formalisms (TAG+5), Paris, May. Éric Villemonte de la Clergerie and Miguel Alonso Pardo. 1998. A tabular interpretation of</rawString>
</citation>
<citation valid="false">
<title>a class of 2-stack automata.</title>
<booktitle>In Proceedings of ACL/COLING’98, August. online at ftp://ftp.inria.fr/INRIA/Projects/ Atoll/Eric.Clergerie/SD2SA.ps.gz.</booktitle>
<marker></marker>
<rawString>a class of 2-stack automata. In Proceedings of ACL/COLING’98, August. online at ftp://ftp.inria.fr/INRIA/Projects/ Atoll/Eric.Clergerie/SD2SA.ps.gz.</rawString>
</citation>
<citation valid="true">
<title>Éric Villemonte de la Clergerie.</title>
<date>2001</date>
<booktitle>In Proceedings ofNAACL’01,</booktitle>
<note>to be published.</note>
<marker>2001</marker>
<rawString>Éric Villemonte de la Clergerie. 2001. Refining tabular parsers for TAGs. In Proceedings ofNAACL’01, June. to be published.</rawString>
</citation>
<citation valid="true">
<authors>
<author>The XTAG Research Group</author>
</authors>
<title>A lexicalized tree adjoining grammar for English.</title>
<date>1995</date>
<tech>Technical Report IRCS 95-03,</tech>
<institution>Institute for Research in Cognitive Science, University of Pennsylvania,</institution>
<location>Philadelphia, PA, USA,</location>
<contexts>
<context position="1122" citStr="Group, 1995" startWordPosition="170" endWordPosition="171">rkup language XML, used as a convenient language to format and exchange linguistic resources. 1 Introduction Our primary concern lies in the development of efficient parsers for various grammatical formalisms of interest for Natural Language Processing. Tree Adjoining Grammars [TAG] is one of these formalisms, important from a linguistic point of view but also because it is possible to design efficient parsers. However, during our work on TAG, we were confronted with a lack of standardization of grammars, especially when dealing with wide coverage grammars. The XTAG System1 (The XTAG Research Group, 1995) provides an implicit standard, but it is not very readable and lacks explicit specifications. The various grammars we studied presented many variations. Moreover, we also noted many problems of consistencies in most of them. Following others, amongst whom LT XML2 and especially (Bonhomme and Lopez, 2000), we considered that the markup language XML3 1http://www.cis.upenn.edu/~xtag/ 2http://www.ltg.ed.ac.uk/ 3http://www.w3c.org/XML/ would be a good choice to represent TAG, especially with the possibility of providing an explicit and logical specification via a DTD. Being textual, resources in X</context>
</contexts>
<marker>Group, 1995</marker>
<rawString>The XTAG Research Group. 1995. A lexicalized tree adjoining grammar for English. Technical Report IRCS 95-03, Institute for Research in Cognitive Science, University of Pennsylvania, Philadelphia, PA, USA, March.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>