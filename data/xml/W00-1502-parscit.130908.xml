<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000006">
<title confidence="0.865148">
Composing a General-Purpose Toolbox for Swedish
</title>
<author confidence="0.742291">
Fredrik Olsson and Bjorn Gamback
</author>
<email confidence="0.665642">
{fredriko,gamback}@sics.se
</email>
<affiliation confidence="0.856216">
Information and Language Engineering Group
Swedish Institute of Computer Science
</affiliation>
<address confidence="0.988814">
Box 1263, S-164 29 Kista, Sweden
</address>
<email confidence="0.979598">
http://www.sics.se/humle/ile
</email>
<sectionHeader confidence="0.986161" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999834111111111">
The paper discusses the lessons we have learned
from the work on building a reusable toolset
for Swedish within the framework of GATE, the
General Architecture for Text Engineering, from
the University of Sheffield, UK.
We describe our toolbox SVENSK and the rea-
sons behind the choices made in the design, as
well as the overall conclusions for language pro-
cessing toolbox design which can be drawn.
</bodyText>
<sectionHeader confidence="0.993761" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.9995905">
Why is it desirable to have a general-purpose
toolset for Language Engineering? In general,
it is likely that the following items hold:
language diversity
Research in Language Engineering tends to
be expensive since the results may not al-
ways be shared across languages, e.g., a tag-
ger or parser for German is not applicable
to Swedish. This implies that much of the
work carried out in one language has to be
carried out in other languages as well.
evaluation
Evaluation of language processing software
is a cumbersome task, and it would ease up
things if researchers could cooperate in con-
structing test-suits and measures that ap-
ply to those and then share data and meth-
ods within a common framework.
commercialisation
If you want to go commercial, it is im-
portant that the prototyping and testing
phases can be carried out without the over-
head of having to construct a new frame-
work each time a new kind of system is to
be developed.
In addition, for small languages like Swedish
(with about 9 million speakers), there are not
that many researchers in Computational Lin-
guistics, and thus not many at all in the various
sub-fields of the area. To be able to share re-
sults between groups in the same research area
is crucial for every-day research. Both to show
off results and for teaching purposes.
In order to encompass this, a general frame-
work for Language Engineering could, or should,
be expected to:
</bodyText>
<listItem confidence="0.981986142857143">
• cut development time and cost by reusing
what has been done before;
• ensure that systems are scalable to pre-
vent unexpected draw-backs due to the &amp;quot;toy
problem syndrome&amp;quot;;
• provide, in the long run, a good setting for
evaluation of language engineering tasks.
</listItem>
<bodyText confidence="0.999543764705883">
In this paper we will discuss the lessons we
have learned from the work on building such a
toolbox for Swedish; however, we set out by de-
scribing some of the reasons for why our project
from the start was laid out as it was.
In particular, the section following concen-
trates on our own project and toolbox architec-
ture together with University of Sheffield&apos;s un-
derlying GATE system, while Section 3 draws
on the experiences from some other, previous
and current, work on designing large language
processing systems. Section 4 then moves on to
the central purpose of the paper, discussing the
main insights gained during the course of the
project. Finally, Section 5 supplies a short bul-
let list with some of the overall conclusions we
have drawn.
</bodyText>
<sectionHeader confidence="0.438766" genericHeader="method">
2 A toolbox for Swedish: SVENSK
</sectionHeader>
<bodyText confidence="0.997452916666667">
The SVENSK project (Eriksson and Gamback,
1997; Olsson et al., 1998; Gamback and Olsson,
2000) is a national effort funded by the Swedish
National Board for Industrial and Technical De-
velopment (NUTEK) to encompass some of the
difficulties outlined above. The aim of SVENSK
has been to develop a multi-purpose language
processing system for Swedish based, where pos-
sible, on existing components, and targeted at
research and teaching. The SVENSK system as
such is thus mainly the sum of a fairly large set
of different reusable language resources.
</bodyText>
<subsectionHeader confidence="0.984759">
2.1 Choice of platform
</subsectionHeader>
<bodyText confidence="0.999978291666667">
In 1995 when the SVENSK project started to take
shape, there was a need for a platform flexible
enough to act as a framework for the language
processing programs intended to constitute the
toolbox. At the end of the selection process,
there were two platforms remaining; the Eu-
ropean Commission initiative ALEP, Advanced
Language Engineering Platform (Simpkins and
Groenendijk, 1994) and GATE, General Archi-
tecture for Text Engineering, from the Univer-
sity of Sheffield, UK (Cunningham et al., 1996).
GATE was chosen since it was, among other
things, freely available and did not impose its
own linguistic theories on the modules to be
integrated. Even though ALEP, at the time,
turned out to be too slow to fit as a software
framework for SVENSK, it was considered feasi-
ble to integrate external modules in it (Eriksson
and Gamback, 1997).
More general points about both these projects
will be discussed below, ALEP in Section 3.3
and GATE in Section 3.5. We will right away de-
scribe the GATE system as such, though, from
our perspective within the SVENSK project.
</bodyText>
<subsectionHeader confidence="0.95469">
2.2 GATE
</subsectionHeader>
<bodyText confidence="0.99974025">
GATE consists of three different parts; a docu-
ment manager, a graphical interface, and a set
of language engineering objects. This section
gives an overview of each one of them.
</bodyText>
<subsubsectionHeader confidence="0.49218">
2.2.1 GATE Document Manager, GDM
</subsubsectionHeader>
<bodyText confidence="0.98921506">
The GDM, which is based on the TIPSTER
database architecture (Grishman and others,
1997), serves as a communication center for the
components in GATE. It stores all information
about texts that language processing systems re-
quire to run, as well as the information they pro-
duce. The GDM stores annotations associated
to sequences of byte offsets in the original text.
Each annotation may have several attributes,
which in turn may have zero or more values. The
byte offsets are used as pointers into the original
text in order to enable separate storage of the
source text and the database holding informa-
tion associated to it. Also, the GDM provides a
well-defined application programming interface
(API) for handling the data it stores.
2.2.2 GATE Graphical Interface, GGI
The GGI is a graphical launch-pad which en-
ables interactive testing and building of langu-
age processing systems within GATE. Various
tasks are supported, such as integrating new
language processing modules, building systems,
launching them, and viewing the results. The
philosophy of the interface is to provide the user
woth a rich set of tools. There are, for example,
several generic viewers for displaying module re-
sults, ranging from raw annotations to complex
parse trees via output from part-of-speech tag-
gers.
2.2.3 Language engineering objects
At the very heart of building a GATE-based
system system we find the so-called Collection
of REusable Objects for Language Engineering,
CREOLE. The CREOLE modules/objects in
the GATE system should be thought of as in-
terfaces to resources; data, algorithmical or a
mixture of both. A CREOLE module may be
a &amp;quot;wrapper&amp;quot; around an already existing piece of
software or it may be an entire program devel-
oped explicitly for GATE compliance. It is the
CREOLE modules that perform the real work
of analysing texts in a GATE-based system.
The tasks for a CREOLE module involve set-
ting up the environment for the language pro-
cessing program it implements, or &amp;quot;wraps&amp;quot; (e.g.,
processing arguments given by the user via the
GGI), as well as retrieving information from the
GDM, invoking the program, and taking care
of the output produced, that is, format it and
record it in the GDM.
</bodyText>
<subsectionHeader confidence="0.97057">
2.3 CREOLE modules in SVENSK
</subsectionHeader>
<bodyText confidence="0.99973175">
From GATE&apos;s point of view, SVENSK is a set
of CREOLE objects. The language processing
software wrapped by the CREOLE objects are
in-house modules, commercially available mod-
</bodyText>
<figure confidence="0.998101518518519">
Free text
GATE Text Cat
Text preprocessor
SWECG: Swedish
Constraint Grammar
Constraint tags
SWECG2SLE
(format converter)
• Lexical tIemplates
DSP: Domain DUP: Deep-level
Specific Processor Unification Processor
Tokeniser
1 Tokeni led text
UCP: Uppsala
Chart Processor
Sentences
Brill Tagger
for Swedish
ParserBox
(educational tool):
Top-Down, BUP, wfst,
HeadParse, LinkParse,
ChartParse, LR-Parse
Sentence splitter
•
•
Dependency graphs Quasi-Logical Forms Morphological structures POS-tagged text Attribute-value structures
</figure>
<figureCaption confidence="0.999962">
Figure 1: How the modules in SVENSK are interconnected to form different processing chains.
</figureCaption>
<bodyText confidence="0.99828935">
ules, and modules from Swedish academia. The
modules integrated so far are shown in Figure 1.
As indicated in the figure, there are dif-
ferent ways the input texts can take through
the system. At the top end of the picture,
van Noord&apos;s freely available&apos; language identi-
fier TextCat constitutes the starting point for
all processing chains in SVENSK. Here, it allows
the user to restrain the input to the system to
be in Swedish.
We then have two main options, either to pass
the input through SWECG, the Swedish ver-
sion of LingSoft oy&apos;s and Helsinki University&apos;s
Constraint Grammar (Karlsson et al., 1995), or
through a parallel sequence of tokenisation and
sentence segmentation developed specifically for
the SVENSK project (Olsson, 1998).
The processing chains then split further, and
from left to right in Figure 1 end in the
following modules;
</bodyText>
<listItem confidence="0.927058444444445">
• DSP, the Domain Specific Processor (Sun-
nehall, 1996) produces shallow dependency
graphs intended for use in applications re-
quiring a robust interface for a specific ap-
plication, such as the Olga dialogue system
(Beskow et al., 1997);
• DUP, the Deep-level Unification-based Pro-
cessor, a component made up of a
large-scale unification-based grammar for
</listItem>
<bodyText confidence="0.983597666666667">
&apos;At www. let .rug.n1/-vannoord/TextCat
Swedish (Gamback, 1997) and an LR-
parser (Samuelsson, 1994). It yields a rel-
atively &apos;deep&apos; level of analysis but at the
cost of robustness, and has previously been
used for machine translation and database
interfacing projects, including the SICS-
SRI-Telia &amp;quot;Spoken Language Translator&amp;quot;
(Rayner et al., 1993).
</bodyText>
<listItem confidence="0.986618666666667">
• the Uppsala Chart Processor (Shgvall-Hein,
1981) produces morphological analyses;
• a Swedish version (Priitz, 1997) of the Brill
Tagger (Brill, 1992);
• the ParserBox, an educational tool consist-
ing of seven parsers operating on a small
grammar. At this end the different ways
the parsers process the input is of main in-
terest, rather than the output produced.
</listItem>
<bodyText confidence="0.99879425">
Each of the components has a standardised in-
put/output interface, users will have the choice
of working with the supplied development sys-
tem as may be appropriate for academic re-
search on particular aspects of language use
or selecting and combining modules for integra-
tion into a user application. Since the I/O in-
terfaces conform to the annotation model of the
TIPSTER architecture (Grishman, 1995) devel-
opers (and users) can easily add components to
the platform, and then link them together to
form an application.
</bodyText>
<figure confidence="0.947011">
Options Utilities I MODULE Help I
File I Mew Layout
</figure>
<figureCaption confidence="0.800365">
Figure 2: An example of a system built by some of the SVENSK modules.
</figureCaption>
<figure confidence="0.996201888888889">
upphrill
TextCat svensk lextoken svensk Parserbox:
token split Head
Parserbox:
Chart
swecg dsp
...-
Document: (all)
Collection: Thomeigambackitollectionsicoling_coll
</figure>
<bodyText confidence="0.999175823529412">
Alternatively, two components with the same
interfaces and functionality can be defined for
the platform, and then evaluated in the same
application. This allows students to experi-
ment with different approaches to a linguis-
tic problem (such as parsing, using the algo-
rithms supplied on the ParserBox), or research
experiments to use the most appropriate compo-
nent for their purposes and performance criteria
(such as speed, robustness, etc).
Figure 2 shows how some of the SVENSK mod-
ules can be linked within GATE to form four
different processing chains, in this case with
three possible output levels: dependency-based
semantics (from DSP), POS-tagged text (from
Brill), or syntactic analyses obtained from either
a chart parser or a head-based parsing strategy.
</bodyText>
<sectionHeader confidence="0.999865" genericHeader="method">
3 Related work
</sectionHeader>
<bodyText confidence="0.999820625">
Over the years there have been many efforts in
the direction of creating large toolsets for langu-
age processing. Some have been built with one
particular application or class of applications
in mind, but mostly the more or less explicit
aim has been to create reusable toolsets for a
wide range of tasks. In this section we will look
at some of the major stepping stones.
</bodyText>
<subsectionHeader confidence="0.999054">
3.1 Setback 1: Eurotra
</subsectionHeader>
<bodyText confidence="0.999904434782609">
Back in 1977, the first steps were taken towards
what would become the most ambitious effort
in the field seen so far. The goal of the Eurotra
Programme was to develop a machine transla-
tion system collaboratively in all the member-
states of the (then) European Community. A
working group tried to establish linguistic and
software standards as the basis for the project,
but the amount of work done in this group was
intended to be small, while the main efforts were
to be localised to centra in the different states,
working on some of the (at the end) nine langu-
ages and 72 language pairs (King and Perschke,
1987; Bech and Nygaard, 1988).
After the project, &amp;quot;Eurotra bashing&amp;quot; has de-
veloped into something of a sport for Euro-
pean computational linguists, resulting in that
the reasons for why the project failed (at least
partially2) have in themselves not been dis-
2Tailure&apos; is a relative notion, since it was not orig-
inally a goal of the Eurotra Programme to build one
production-quality system. The degrees of freedom left
for the different groups had the positive effect of building
up language processing competence and infrastructure in
the EC countries and of producing some working, full-
scale &amp;quot;spin-off&amp;quot; systems, such as PaTrans (Hansen, 1994).
cussed enough. Certainly, the lack of over-
all coordination soon became a liability. In-
herent short-comings of the formalisms, and
inefficiency of the implementation related to
fundamental problems with the formalisms are
another reason which have been pointed out
(Crookston, 1990; Pulman et al., 1991).
However, the main problem with the frame-
work was probably that it never in itself moved
towards one system; indeed, Johnson and Ros-
ner (1987) discussed a software environment for
Eurotra building on tools for rapid implementa-
tion and evaluation of a variety of experimen-
tal theories. In the spirit of that several paral-
lel systems and formalisms were used, and the
formalisms changed rapidly over time. Still,
no framework was developed which could ac-
commodate these different types of modules, no
clear interfaces were designed, no central in-
stance under-took the integration task.
</bodyText>
<subsectionHeader confidence="0.990487">
3.2 Success Story 1: CLE
</subsectionHeader>
<bodyText confidence="0.999964952380953">
In contrast to the multi-site Eurotra effort, SRI
International&apos;s Cambridge Research Centre and
Cambridge University&apos;s Computer Laboratory
in 1985 suggested a UK-internal project devel-
oping a Core Language Engine (CLE), a domain
independent system for translating English sen-
tences into formal representations (Alshawi et
al., 1992). SRI&apos;s CLE built on a modular-staged
design in which explicit intermediate levels of
linguistic representation were used as an inter-
face between successive phases of analysis.
The CLE has been applied to a range of tasks,
including machine translation and interfacing to
a reasoning engine. The modular design also
proved well suited for porting to other langu-
ages and the implementation was quite efficient.
Thus, the project proved its purpose. However,
even though the CLE system received consider-
able attention, it failed to spread in the commu-
nity, the main reason being that it simply was
too expensive to obtain it.3
</bodyText>
<subsectionHeader confidence="0.985497">
3.3 Setback 2: ALEP
</subsectionHeader>
<bodyText confidence="0.965622684210526">
Following the Eurotra tradition, ALEP, the Ad-
vanced Language Engineering Platform (Simp-
kins and Groenendijk, 1994; Bredenkamp et
3&amp;quot;You don&apos;t give away a one million pound program&amp;quot;
(SRI research manager). Contrast this with the strategy
of, e.g., John McAfee to give away his antivirus software
for free and making millions on selling the updates!
al., 1997), introduced in Section 2.1, was an-
other European Commission initiative to pro-
vide the European language research and engi-
neering community with a general purpose re-
search and development environment.
The ALEP platform supplied a range of pro-
cessing resources and was particularly targeted
at supporting multilinguality. However, it im-
posed its own formalisms (for grammars, etc.)
on the developers and users. In addition, the
initial implementations were as inefficient as Eu-
rotra&apos;s and ALEP never became widely spread.
</bodyText>
<subsectionHeader confidence="0.879881">
3.4 Success Story 2: Verbmobil
</subsectionHeader>
<bodyText confidence="0.999990090909091">
The real contrast to Eurotra came with Verb-
mobil, a multi-site German government effort
which started in the early 90&apos;s (Kay et al., 1994).
The main processing stream of the project was
clearly defined (even though parallel and com-
plementary modules were allowed) and the in-
terfaces between different groups and modules
were developed during the project in intense
inter-group discussions.
A major reason why the project succeeded in
producing an overall joint system was a con-
centrated effort by a central system administra-
tion group which incorporated components de-
veloped at several different sites and in many
different programming paradigms into one plat-
form (Bub and Schwinn, 1996). The Verbmo-
bil architecture employs ICE, Intarc Communi-
cation Environment (Amtrup, 1997), a general
communication package, but which of course has
been primarily developed for the specific needs
of the Verbmobil task, non-incremental multi-
lingual spoken dialogue translation.
</bodyText>
<subsectionHeader confidence="0.911478">
3.5 Success Story 3: GATE
</subsectionHeader>
<bodyText confidence="0.9998595">
In the mid 90&apos;s, the UK Engineering and Physi-
cal Sciences Research Council (EPSRC) started
to fund a project at the University of Sheffield
aimed at building a General Architecture for
Text Engineering, GATE (Cunningham et al.,
1996; Gaizauskas et al., 1996; Cunningham et
al., 1997; Cunningham et al., 1999).
As described in Section 2.2, GATE does not
adhere to a particular linguistic theory, but is
rather an architecture and a development envi-
ronment designed to fit the needs of researchers
and application developers. It presents users
with an environment in which it is easy to use
and integrate tools and databases, all accessi-
</bodyText>
<tableCaption confidence="0.998777">
Table 1: Language processing resources in SVENSK
</tableCaption>
<table confidence="0.954993075">
Processing resource Main task Author(s)
TextCat
Tokeniser
LexToken
Sentence splitter
Swedish Brill Tagger
Uppsala Chart Processor
LP-Detect
Swedish Constraint Grammar
SWECG2CLE
Deep-level Unification-based
Processor
Domain-specific Processor
ParserBox
Language identification
Tokenisation
Lexicalised phrase tokenisation
Segmentation
Part-of-speech tagging
Morphology
Lexicalised phrase recognition
Morphosyntactic analysis
Format converter
Swedish grammar
LR-parser
Dependency structure semantics
Educational tool
[van Noord; U Groningen]
[Olsson; SICS &amp; Uppsala U]
[Hassel, Johansson; SICS &amp; Sthlm U]
[Olsson; SICS &amp; Uppsala U]
[Priitz; Uppsala U]
[Sagvall-Hein; Uppsala U]
[J. Lindberg; Stockholm U]
[LingSoft oy &amp; Helsinki U]
[Eriksson; SICS]
[Gamback; SICS],
[Samuelsson; SICS]
[Sunnehall; SICS]
[Eineborg, Olsson et al; SICS]
</table>
<bodyText confidence="0.9999355">
ble through a friendly user interface. The plat-
form is free for non-commercial and research
purposes, and has so far been distributed to
more than 250 different sites around the world.4
</bodyText>
<subsectionHeader confidence="0.59949">
3.6 Meanwhile in the US... Galaxy
</subsectionHeader>
<bodyText confidence="0.9999681">
In the US, there have also been some efforts in
the direction of open architectures that incor-
porates language processing resources, in par-
ticular within the research programmes spon-
sored by DARPA, the Defense Advanced Re-
search Projects Agency. With TIPSTER (Gr-
ishman, 1995), the design of a general architec-
ture was agreed upon; however, the full TIP-
STER annotation scheme (Grishman and oth-
ers, 1997) has not been implemented as such.
Instead, the MITRE Cooperation is currently
(under DARPA funding) developing Communi-
cator, a testbed similar to the Verbmobil one.
The initial DARPA Communicator architec-
ture builds on MIT&apos;s Galaxy system (Seneff et
al., 1998). A central process, the Hub, is con-
nected with a variety of server processes and
governs the control flow between them. A wide
range of component types are supported: langu-
age understanding and generation, speech recog-
</bodyText>
<footnote confidence="0.984146">
41n June 2000, according to the &amp;quot;incomplete&amp;quot; list of
licensees given on the GATE web pages:
www.dcs.shef .ac.uk/research/groups/n1p/gate
</footnote>
<bodyText confidence="0.999672083333333">
nition and synthesis, dialogue management, and
context tracking (Goldschen and Loehr, 1999).
The goal of the Communicator to provide
an architecture used by everyone, easing the
work of porting modules and system evaluation
seems decent in itself; however, the system
has not been that well received within the US
research community. (&amp;quot;We&apos;ve spent most of our
time the last year trying to make our stuff follow
Communicator standards, rather than on doing
research,&amp;quot; anonymous US researcher, personal
communication 2000).
</bodyText>
<sectionHeader confidence="0.910684" genericHeader="method">
4 Issues in composing a toolset
</sectionHeader>
<bodyText confidence="0.999974066666667">
A result of the integration in SVENSK is that
programs from many different sources and back-
grounds, which originally were not built to com-
municate which each other are doing this now.
Table 1 shows the main tasks of all the SVENSK
modules, as well as the author(s) and sources
behind the different units.
Collecting and distributing algorithmic re-
sources and making different programs interop-
crate present a wide range of challenges, along
several different dimensions; we will denote the
key dimensions &apos;diplomatic&apos;, technical, and lin-
guistic. In the rest of this section we will discuss
some of the experiences we have drawn from the
project with regards to these dimensions.
</bodyText>
<subsectionHeader confidence="0.979913">
4.1 Diplomatic challenges
</subsectionHeader>
<bodyText confidence="0.999982611111111">
With &apos;diplomatic&apos;, we mean some of the conclu-
sions which can be drawn from the examples of
other systems in Section 3. Eurotra and ALEP
both had the problem of linguists not wanting to
agree on formalism standards while a framework
supporting diversity was lacking. The CLE was
successful as a system, but commercial short-
sightedness destroyed its chances of more wide-
spread popularity.
Commercial interests have also been a prob-
lem within SVENSK, but we have also seen that
it is hard to get access to academic LE resources.
The need for component reuse is often appreci-
ated by everybody in the field. However, to put
action behind words is not as easy. In particu-
lar, researches need to be convinced to invest the
extra time and resources to package their com-
ponents in an exportable and reusable form.
</bodyText>
<tableCaption confidence="0.959653">
Table 2: Resource availability
</tableCaption>
<figure confidence="0.564761875">
Availability Resource(s)
In-house and free DSP, DUP, Tokeniser,
LexToken, ParserBox,
Sentence splitter
External and free TextCat, GATE,
LP-Detect
External, restricted UCP, Swedish Brill
Commercial, closed SWECG
</figure>
<bodyText confidence="0.9743265">
A key aim of the project has been that the
resources included in SVENSK should be freely
available for non-commercial use, at least for
Swedish institutions. As can been seen in Ta-
ble 2 all current components except for SWECG
meet this requirement.5 Of course, process-
ing resources included in the system in the fu-
ture should preferably also match this free-for-
all strategy.
Still, making language processing resources
freely available and, in particular, reusability
of resources is really a very uncommon con-
cept in the computational linguistic community.
Possibly this also reflects another uncommon
concept, that of experiment reproducibility; in
5SWECG, the Swedish Constraint Grammar, is avail-
able from LingSoft oy, Helsinki, unfortunately for a cur-
rently discouragingly high license fee, albeit reduced for
academic SVENSK users.
most research areas the possibility for other re-
searchers to reproduce an experiment is taken
for granted. Yes, this is the very core of what
is accepted as good research at all. Strangely
enough, this is rarely the case in Computer Sci-
ence in general and definitely not within Com-
putational Linguistics.
We believe that this will change and that re-
producibility will be generally accepted as a cri-
teria of good research even in Computational
Linguistics. And to give other researchers the
option of reproducing an experiment means giv-
ing them access to the language engineering re-
sources used in the experiment. Convincing the
members of the CL research community to both
make their own processing resources freely avail-
able to the rest of the community and actually
even to try to reuse somebody else&apos;s resources is
indeed a tough &apos;diplomatic&apos; challenge.
</bodyText>
<subsectionHeader confidence="0.979796">
4.2 Technical/software challenges
</subsectionHeader>
<bodyText confidence="0.999378923076923">
From the technical point of view, one major
conclusion is that the difficulties of integrating
language processing software never can be over-
estimated. Even when using a liberal frame-
work like GATE it is hard work making differ-
ent pieces of software from different sources and
built according to different programming tradi-
tions meet any kind of interface standard.
To give the flavour of the problem, Table 3
singles out the underlying implementation lan-
guages of some of the SVENSK components,
while diversity in software authors and sources
was shown already in Table 1.
</bodyText>
<tableCaption confidence="0.996801">
Table 3: Implementation languages
</tableCaption>
<table confidence="0.743856888888889">
Language Resource(s)
Prolog DSP, DUP, ParserBox
C/C++ SWECG, Brill,
Tokeniser, GATE (part)
Tcl/Tk GATE
Perl TextCat, Brill (part),
LexToken, LP-Detect,
Sentence splitter
LISP UCP
</table>
<bodyText confidence="0.999930272727273">
The application programming interface thus
moves to the centre of attention: No matter how
linguistically adequate a piece of language pro-
cessing software is, without a proper API it can-
not be used in conjunction with other programs.
In a way, it is understandable that academia
does not always put much effort in packag-
ing and documenting their software, since their
main purpose is not to sell and widely distribute
it. The trouble is that some of the actors on the
commercial scene do not document their sys-
tems in a proper manner, either. Far too of-
ten this has resulted in inconsistencies with the
input and output of other modules. This prob-
ably reflects a certain level of immaturity in the
field when it comes to software development; the
problem might solve itself when the level of com-
petition between different companies increases.
Software portability is another issue: The
components available often rely on a particular
operating system or a particular software envi-
ronment to work, something which may cause
problems in settings when you wish to distribute
your collected efforts to other parties, or when
you wish to add a new component to your col-
lection. If you are not careful when integrating
components that are not first and foremost in-
tended to function together, it is not likely that
their combined performance will even level with
the performance of the individual programs re-
garding, e.g., time and memory requirements.
In software industry in general, it is hard to
recreate the situations where bugs occur, and it
is even harder to correct them once you have
found them. When collecting and integrating a
set of heterogenous language processing compo-
nents, the problem of localising a bug is even
harder. As long as the source code of the soft-
ware under consideration is available, you might
be able to correct the bugs yourself; however,
software delivered as a &amp;quot;black-box&amp;quot; (that is, if it
is impossible to access the code inside, which is
common for commercial software), allow no one
to remedy even the smallest flaw.
</bodyText>
<subsectionHeader confidence="0.997969">
4.3 Linguistic challenges
</subsectionHeader>
<bodyText confidence="0.993713709677419">
Of course, LE components differ with respect to
such things as language coverage, processing ac-
curacy and the types of tasks addressed. It is
also the case that tasks can be done at various
levels of proficiency. The trouble is that there
is no quality control available to either the tool-
box developer nor to the end-user. If a large
number of LE components are to be integrated,
they should first be categorised so that compo-
nents with a great difference in, say, lexical cov-
erage are not combined.
A familiar problem for all builders of language
processing systems relates to the adaptation to
new domains. When reusing resources built by
others this becomes even more accentuated, es-
pecially if an LE resource is available only in the
&amp;quot;black box&amp;quot; form (and thus relates to the issues
of the previous subsection).
In general, the power required of a language
processing system is affected by three main fac-
tors: the type of task involved, the needs of the
specific application, and the application domain,
including the vocabulary and the register (sub-
language) complexity. It seems impossible or
at least very hard! to compose a really gen-
eral toolkit. Toolkits will always have to focus
on some classes of tasks and applications and/or
on some language and operation domains.
A classification of the SVENSK components ac-
cording to three different limitation dimensions
is given in Table 4.
</bodyText>
<tableCaption confidence="0.994427">
Table 4: Linguistic limitations
</tableCaption>
<table confidence="0.9390875">
Limitations Resource(s)
Language dependent All except TextCat and
Sentence splitter (some)
Domain dependent DSP
(most others more or less)
Sentence-based DSP, DUP, ParserBox
</table>
<sectionHeader confidence="0.979357" genericHeader="conclusions">
5 Conclusions
</sectionHeader>
<bodyText confidence="0.828882642857143">
• A toolset should not be too general. There
has to be some focus on its end-usage, at
least to some manageable set of classes of
tasks and applications.
• The portability issues across operating sys-
tems as well as institutional borders de-
pends on technical issues such as licenses
and availability. The &amp;quot;a chain is never
stronger than its weakest link&amp;quot;-metaphor is
certainly applicable!
• The domain and coverage of language pro-
cessing software is an additional obstacle;
it is important to match pieces of software
accordingly!
</bodyText>
<sectionHeader confidence="0.970888" genericHeader="acknowledgments">
Acknowledgements
</sectionHeader>
<bodyText confidence="0.999584083333333">
The SVENSK project has been funded by SICS
and NUTEK under grants P5475 and P13338-1.
Several persons have been involved in the
project since its start in 1995, in particular
Mikael Eriksson who did the first work on the
GATE interfacing. Mats Wiren and Barbro
Atlestam were the key persons behind ensur-
ing the project&apos;s funding. Scott McGlashan,
Charlotta Berglund, Victoria Johansson and
Kristina Hassel all worked directly on SVENSK
at SICS, while Christer Samuelsson, Jussi Karl-
gren, Nikolaj Lindberg, Lena Santamarta and
Ivan Bretan worked on other SICS projects
which contributed indirectly to the system.
Klas Prfitz, Anna Shgvall-Hein and Jan &amp;quot;Beb&amp;quot;
Lindberg donated language processing resources
to the project. Gertjan van Noord sat an ex-
ample for all researchers by making his software
freely available, as did Hamish Cunningham and
the rest of the Sheffield GATE group. Thanks
also to the members of sYENsx&apos;s scientific ad-
visory board which have greatly influenced the
project: Barbro, Anna, Mats, Robin Cooper,
Lars Ahrenberg, and Calle Welin.
</bodyText>
<sectionHeader confidence="0.997297" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999763209039549">
Hiyan Alshawi, editor, David Carter, Jan van
Eijck, Bjorn Gamback, Robert C. Moore,
Douglas B. Moran, Fernando C. N. Pereira,
Stephen G. Pulman, Manny Rayner, and
Arnold G. Smith. 1992. The Core Language
Engine. MIT Press, Cambridge, Mass.
Jan W. Amtrup. 1997. ICE: A communica-
tion environment for Natural Language Pro-
cessing. In Proc. International Conference
on Parallel and Distributed Processing Tech-
niques and Applications, Las Vegas, Nevada.
Annelise Bech and Anders Nygaard. 1988. The
E-framework: A formalism for Natural Lan-
guage Processing. In Proc. 12th Interna-
tional Conference on Computational Linguis-
tics, volume 1, pages 36-45, Budapest, Hun-
gary. ACL.
Jonas Beskow, Kjell Elenius, and Scott Mac-
Glashan. 1997. Olga a dialogue system
with an animated talking agent. In G. Kokki-
nakis, N. Fakotakis, and E. Dermatas, editors,
Proc. 5th European Conference on Speech
Communication and Technology, volume 3,
pages 1651-1654, Rhodes, Greece. ESCA.
Andrew Bredenkamp, Thierry Declerck, Fred-
erik Fouvry, Bradley Music, and Axel The-
ofilidis. 1997. Linguistic engineering using
ALEP. In (Mitkov and Nicolov, 1997), pages
92-97.
Eric Brill. 1992. A simple rule-based part of
speech tagger. In Proc. 3rd Conference on
Applied Natural Language Processing, pages
152-155, Trento, Italy. ACL.
Thomas Bub and Johannes Schwinn. 1996.
Verbmobil: The evolution of a complex large
speech-to-speech translation system. In Proc.
4th International Conference on Spoken Lan-
guage Processing, Philadelphia, Pennsylvania.
Ian Crookston. 1990. The E-framework:
Emerging problems. In H. Karlgren, editor,
Proc. 13th International Conference on Com-
putational Linguistics, volume 2, pages 66-71,
Helsinki, Finland. ACL.
Hamish Cunningham, Yorick Wilks, and
Robert J. Gaizauskas. 1996. GATE a Gen-
eral Architecture for Text Engineering. In
Proc. 16th International Conference on Com-
putational Linguistics, volume 2, pages 1057-
1060, Kobenhavn, Denmark. ACL.
Hamish Cunningham, Kevin Humphreys,
Robert J. Gaizauskas, and Yorick Wilks.
1997. Software infrastructure for Natural
Language Processing. In Proc. 5th Confer-
ence on Applied Natural Language Processing,
Washington, DC. ACL.
Hamish Cunningham, Robert J. Gaizauskas,
Kevin Humphreys, and Yorick Wilks. 1999.
Experience with a Language Engineering ar-
chitecture: Three years of GATE. In Proc.
Workshop on Reference Architectures and
Data Standards for NLP, Edinburgh, Scot-
land. AISB.
Mikael Eriksson and Bjorn Gamback. 1997.
SVENSK: A toolbox of Swedish language pro-
cessing resources. In (Mitkov and Nicolov,
1997), pages 336-341.
Robert Gaizauskas, Hamish Cunningham,
Yorick Wilks, Peter Rodgers, and Kevin
Humphreys. 1996. GATE: An environment
to support research and development in
Natural Language Engineering. In Proc. 8th
International Conference on Tools with Al,
Toulouse, France. IEEE.
Bjorn Gamback. 1997. Processing Swedish Sen-
tences: A Unification-Based Grammar and
some Applications. PhD Thesis, The Royal
Institute of Technology, Dept. of Computer
and Systems Sciences, Stockholm, Sweden.
Bjorn Gamback and Fredrik Olsson. 2000. Ex-
periences of Language Engineering algorithm
reuse. In Proc. 2nd International Confer-
ence on Language Resources and Evaluation,
volume 1, pages 161-166, Athens, Greece.
ELRA.
Alan Goldschen and Dan Loehr. 1999. The role
of the DARPA Communicator architecture as
a human computer interface for distributed
simulations. In Spring Simulation Interoper-
ability Workshop, Orlando, Florida. SISO.
Ralph Grishman et al., 1997. TIPSTER Text
Phase II Architecture Design. Version 2.3.
New York, NY.
Ralph Grishman, 1995. TIPSTER Phase II Ar-
chitecture Design Document (Tinman Archi-
tecture) Version 1.52. New York, NY.
Viggo Hansen. 1994. PaTrans a MT-system:
Development and implementation of and ex-
periences from a MT-system. In Proc. 1st
Conference of the Association for Machine
Translation in the Americas, pages 114-121,
Columbia, Maryland. AMTA.
Rod Johnson and Mike Rosner. 1987. Machine
translation and software tools. In (King,
1987), chapter 11, pages 154-167.
Fred Karlsson, Atro Voutilainen, Juha Heikkila,
and Arto Anttila, editors. 1995. Constraint
Grammar: A Language-Independent System
for Parsing Unrestricted Text. Mouton de
Gruyter, Berlin, Germany.
Martin Kay, Jean Mark Gawron, and Peter
Norvig. 1994. Verbmobil: A Translation Sys-
tem for Face-to-Face Dialog. Number 33 in
Lecture Notes. CSLI, Stanford, California.
Maggie King, editor. 1987. Machine Transla-
tion Today: the State of the Art. Edinburgh
University Press, Edinburgh, Scotland.
Maggie King and Sergei Perschke. 1987. EU-
ROTRA. In (King, 1987), chapter 19, pages
373-391.
Ruslan Mitkov and Nicolas Nicolov, editors.
1997. Proc. 2nd International Conference on
Recent Advances in Natural Language Pro-
cessing, Tzigov Chark, Bulgaria.
Fredrik Olsson. 1998. Tagging and morpholog-
ical processing in the SVENSK system. MA
Thesis, Uppsala University, Sweden.
Fredrik Olsson, Bjorn Gamback, and Mikael
Eriksson. 1998. Reusing Swedish language
processing resources in SVENSK. In Proc.
Workshop on Minimizing the Effort for Lan-
guage Resource Acquisition (LREC98), pages
27-33, Granada, Spain. ELRA.
Klas Praz. 1997. Preparing a training corpus
in Swedish for training an automatic part of
speech tagging system. In H. Kalverkamper
and B. Svane, editors, Ubersetzen und Dol-
metschen. Forschungsstand und Perspektive.
Translation and Interpreting. State and Per-
spectives. Proc. Humboldt-Stockholm Sympo-
sium, Stockholm University, Sweden.
S. G. Pulman, editor, H. Alshawi, D. J. Arnold,
D. M. Carter, J. Lindop, K. Netter, J. Tsu-
jii, and H. Uszkoreit. 1991. Eurotra ET6/1:
Rule Formalism and Virtual Machine Design
Study. CEC, Luxembourg.
Manny Rayner, Ivan Bretan, David Carter,
Michael Collins, Vassilios Digalakis, Bjorn
Gamback, Jaan Kaja, Jussi Karlgren, Bertil
Lyberg, Steve Pulman, Patti Price, and
Christer Samuelsson. 1993. Spoken language
translation with mid-90&apos;s technology: A case
study. In Proc. 3rd European Conference on
Speech Communication and Technology, vol-
ume 2, pages 1299-1302, Berlin, Germany.
ESCA.
Anna Shgvall-Hein. 1981. An overview of the
Uppsala Chart Parser version 1 (UCP-1).
Technical report, Center for Computational
Linguistics, Uppsala University, Sweden.
Christer Samuelsson. 1994. Fast Natural-
Language Parsing Using Explanation-Based
Learning. PhD Thesis, The Royal Institute of
Technology, Dept. of Computer and Systems
Sciences, Stockholm, Sweden.
Stephanieo Seneff, Ed Hurley, Raymond Lau,
Christine Pao, Philipp Schmid, and Victor
Zue. 1998. Galaxy—II: A reference architec-
ture for conversational system development.
In Proc. 5th International Conference on Spo-
ken Language Processing, volume 3, pages
931-934, Sydney, Australia.
Neil Simpkins and Marius Groenendijk. 1994.
The ALEP project. Technical report, Cray
(now Anite) Systems / CEC, Luxembourg.
Joel Sunnehall. 1996. Robust parsing using
dependency with constraints and preference.
MA Thesis, Uppsala University, Sweden.
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.409877">
<title confidence="0.999937">Composing a General-Purpose Toolbox for Swedish</title>
<author confidence="0.838333">Fredrik Olsson</author>
<author confidence="0.838333">Bjorn</author>
<email confidence="0.738101">fredriko@sics.se</email>
<email confidence="0.738101">gamback@sics.se</email>
<affiliation confidence="0.709524">Information and Language Engineering Swedish Institute of Computer</affiliation>
<address confidence="0.867663">Box 1263, S-164 29 Kista,</address>
<web confidence="0.956058">http://www.sics.se/humle/ile</web>
<abstract confidence="0.9947128">The paper discusses the lessons we have learned from the work on building a reusable toolset for Swedish within the framework of GATE, the General Architecture for Text Engineering, from the University of Sheffield, UK. describe our toolbox the reasons behind the choices made in the design, as well as the overall conclusions for language processing toolbox design which can be drawn.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Arnold G Smith</author>
</authors>
<title>The Core Language Engine.</title>
<date>1992</date>
<editor>Hiyan Alshawi, editor, David Carter, Jan van Eijck, Bjorn Gamback, Robert C. Moore, Douglas B. Moran, Fernando C. N. Pereira, Stephen G. Pulman, Manny Rayner, and</editor>
<publisher>MIT Press,</publisher>
<location>Cambridge, Mass.</location>
<marker>Smith, 1992</marker>
<rawString>Hiyan Alshawi, editor, David Carter, Jan van Eijck, Bjorn Gamback, Robert C. Moore, Douglas B. Moran, Fernando C. N. Pereira, Stephen G. Pulman, Manny Rayner, and Arnold G. Smith. 1992. The Core Language Engine. MIT Press, Cambridge, Mass.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jan W Amtrup</author>
</authors>
<title>ICE: A communication environment for Natural Language Processing. In</title>
<date>1997</date>
<booktitle>Proc. International Conference on Parallel and Distributed Processing Techniques and Applications,</booktitle>
<location>Las Vegas, Nevada.</location>
<contexts>
<context position="16722" citStr="Amtrup, 1997" startWordPosition="2694" endWordPosition="2695">eam of the project was clearly defined (even though parallel and complementary modules were allowed) and the interfaces between different groups and modules were developed during the project in intense inter-group discussions. A major reason why the project succeeded in producing an overall joint system was a concentrated effort by a central system administration group which incorporated components developed at several different sites and in many different programming paradigms into one platform (Bub and Schwinn, 1996). The Verbmobil architecture employs ICE, Intarc Communication Environment (Amtrup, 1997), a general communication package, but which of course has been primarily developed for the specific needs of the Verbmobil task, non-incremental multilingual spoken dialogue translation. 3.5 Success Story 3: GATE In the mid 90&apos;s, the UK Engineering and Physical Sciences Research Council (EPSRC) started to fund a project at the University of Sheffield aimed at building a General Architecture for Text Engineering, GATE (Cunningham et al., 1996; Gaizauskas et al., 1996; Cunningham et al., 1997; Cunningham et al., 1999). As described in Section 2.2, GATE does not adhere to a particular linguistic</context>
</contexts>
<marker>Amtrup, 1997</marker>
<rawString>Jan W. Amtrup. 1997. ICE: A communication environment for Natural Language Processing. In Proc. International Conference on Parallel and Distributed Processing Techniques and Applications, Las Vegas, Nevada.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Annelise Bech</author>
<author>Anders Nygaard</author>
</authors>
<title>The E-framework: A formalism for Natural Language Processing. In</title>
<date>1988</date>
<booktitle>Proc. 12th International Conference on Computational Linguistics,</booktitle>
<volume>1</volume>
<pages>36--45</pages>
<publisher>ACL.</publisher>
<location>Budapest, Hungary.</location>
<contexts>
<context position="12534" citStr="Bech and Nygaard, 1988" startWordPosition="2038" endWordPosition="2041">e first steps were taken towards what would become the most ambitious effort in the field seen so far. The goal of the Eurotra Programme was to develop a machine translation system collaboratively in all the memberstates of the (then) European Community. A working group tried to establish linguistic and software standards as the basis for the project, but the amount of work done in this group was intended to be small, while the main efforts were to be localised to centra in the different states, working on some of the (at the end) nine languages and 72 language pairs (King and Perschke, 1987; Bech and Nygaard, 1988). After the project, &amp;quot;Eurotra bashing&amp;quot; has developed into something of a sport for European computational linguists, resulting in that the reasons for why the project failed (at least partially2) have in themselves not been dis2Tailure&apos; is a relative notion, since it was not originally a goal of the Eurotra Programme to build one production-quality system. The degrees of freedom left for the different groups had the positive effect of building up language processing competence and infrastructure in the EC countries and of producing some working, fullscale &amp;quot;spin-off&amp;quot; systems, such as PaTrans (H</context>
</contexts>
<marker>Bech, Nygaard, 1988</marker>
<rawString>Annelise Bech and Anders Nygaard. 1988. The E-framework: A formalism for Natural Language Processing. In Proc. 12th International Conference on Computational Linguistics, volume 1, pages 36-45, Budapest, Hungary. ACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jonas Beskow</author>
<author>Kjell Elenius</author>
<author>Scott MacGlashan</author>
</authors>
<title>Olga a dialogue system with an animated talking agent.</title>
<date>1997</date>
<booktitle>Proc. 5th European Conference on Speech Communication and Technology,</booktitle>
<volume>3</volume>
<pages>1651--1654</pages>
<editor>In G. Kokkinakis, N. Fakotakis, and E. Dermatas, editors,</editor>
<location>Rhodes, Greece. ESCA.</location>
<contexts>
<context position="9083" citStr="Beskow et al., 1997" startWordPosition="1478" endWordPosition="1481">her to pass the input through SWECG, the Swedish version of LingSoft oy&apos;s and Helsinki University&apos;s Constraint Grammar (Karlsson et al., 1995), or through a parallel sequence of tokenisation and sentence segmentation developed specifically for the SVENSK project (Olsson, 1998). The processing chains then split further, and from left to right in Figure 1 end in the following modules; • DSP, the Domain Specific Processor (Sunnehall, 1996) produces shallow dependency graphs intended for use in applications requiring a robust interface for a specific application, such as the Olga dialogue system (Beskow et al., 1997); • DUP, the Deep-level Unification-based Processor, a component made up of a large-scale unification-based grammar for &apos;At www. let .rug.n1/-vannoord/TextCat Swedish (Gamback, 1997) and an LRparser (Samuelsson, 1994). It yields a relatively &apos;deep&apos; level of analysis but at the cost of robustness, and has previously been used for machine translation and database interfacing projects, including the SICSSRI-Telia &amp;quot;Spoken Language Translator&amp;quot; (Rayner et al., 1993). • the Uppsala Chart Processor (Shgvall-Hein, 1981) produces morphological analyses; • a Swedish version (Priitz, 1997) of the Brill Ta</context>
</contexts>
<marker>Beskow, Elenius, MacGlashan, 1997</marker>
<rawString>Jonas Beskow, Kjell Elenius, and Scott MacGlashan. 1997. Olga a dialogue system with an animated talking agent. In G. Kokkinakis, N. Fakotakis, and E. Dermatas, editors, Proc. 5th European Conference on Speech Communication and Technology, volume 3, pages 1651-1654, Rhodes, Greece. ESCA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Andrew Bredenkamp</author>
<author>Thierry Declerck</author>
<author>Frederik Fouvry</author>
<author>Bradley Music</author>
<author>Axel Theofilidis</author>
</authors>
<title>Linguistic engineering using ALEP. In (Mitkov and Nicolov,</title>
<date>1997</date>
<pages>92--97</pages>
<marker>Bredenkamp, Declerck, Fouvry, Music, Theofilidis, 1997</marker>
<rawString>Andrew Bredenkamp, Thierry Declerck, Frederik Fouvry, Bradley Music, and Axel Theofilidis. 1997. Linguistic engineering using ALEP. In (Mitkov and Nicolov, 1997), pages 92-97.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Eric Brill</author>
</authors>
<title>A simple rule-based part of speech tagger.</title>
<date>1992</date>
<booktitle>In Proc. 3rd Conference on Applied Natural Language Processing,</booktitle>
<pages>152--155</pages>
<publisher>ACL.</publisher>
<location>Trento, Italy.</location>
<contexts>
<context position="9701" citStr="Brill, 1992" startWordPosition="1570" endWordPosition="1571">P, the Deep-level Unification-based Processor, a component made up of a large-scale unification-based grammar for &apos;At www. let .rug.n1/-vannoord/TextCat Swedish (Gamback, 1997) and an LRparser (Samuelsson, 1994). It yields a relatively &apos;deep&apos; level of analysis but at the cost of robustness, and has previously been used for machine translation and database interfacing projects, including the SICSSRI-Telia &amp;quot;Spoken Language Translator&amp;quot; (Rayner et al., 1993). • the Uppsala Chart Processor (Shgvall-Hein, 1981) produces morphological analyses; • a Swedish version (Priitz, 1997) of the Brill Tagger (Brill, 1992); • the ParserBox, an educational tool consisting of seven parsers operating on a small grammar. At this end the different ways the parsers process the input is of main interest, rather than the output produced. Each of the components has a standardised input/output interface, users will have the choice of working with the supplied development system as may be appropriate for academic research on particular aspects of language use or selecting and combining modules for integration into a user application. Since the I/O interfaces conform to the annotation model of the TIPSTER architecture (Gri</context>
</contexts>
<marker>Brill, 1992</marker>
<rawString>Eric Brill. 1992. A simple rule-based part of speech tagger. In Proc. 3rd Conference on Applied Natural Language Processing, pages 152-155, Trento, Italy. ACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Thomas Bub</author>
<author>Johannes Schwinn</author>
</authors>
<title>Verbmobil: The evolution of a complex large speech-to-speech translation system.</title>
<date>1996</date>
<booktitle>In Proc. 4th International Conference on Spoken Language Processing,</booktitle>
<location>Philadelphia, Pennsylvania.</location>
<contexts>
<context position="16633" citStr="Bub and Schwinn, 1996" startWordPosition="2680" endWordPosition="2683">rman government effort which started in the early 90&apos;s (Kay et al., 1994). The main processing stream of the project was clearly defined (even though parallel and complementary modules were allowed) and the interfaces between different groups and modules were developed during the project in intense inter-group discussions. A major reason why the project succeeded in producing an overall joint system was a concentrated effort by a central system administration group which incorporated components developed at several different sites and in many different programming paradigms into one platform (Bub and Schwinn, 1996). The Verbmobil architecture employs ICE, Intarc Communication Environment (Amtrup, 1997), a general communication package, but which of course has been primarily developed for the specific needs of the Verbmobil task, non-incremental multilingual spoken dialogue translation. 3.5 Success Story 3: GATE In the mid 90&apos;s, the UK Engineering and Physical Sciences Research Council (EPSRC) started to fund a project at the University of Sheffield aimed at building a General Architecture for Text Engineering, GATE (Cunningham et al., 1996; Gaizauskas et al., 1996; Cunningham et al., 1997; Cunningham et</context>
</contexts>
<marker>Bub, Schwinn, 1996</marker>
<rawString>Thomas Bub and Johannes Schwinn. 1996. Verbmobil: The evolution of a complex large speech-to-speech translation system. In Proc. 4th International Conference on Spoken Language Processing, Philadelphia, Pennsylvania.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ian Crookston</author>
</authors>
<title>The E-framework: Emerging problems.</title>
<date>1990</date>
<booktitle>Proc. 13th International Conference on Computational Linguistics,</booktitle>
<volume>2</volume>
<pages>66--71</pages>
<editor>In H. Karlgren, editor,</editor>
<publisher>ACL.</publisher>
<location>Helsinki, Finland.</location>
<contexts>
<context position="13428" citStr="Crookston, 1990" startWordPosition="2179" endWordPosition="2180">ginally a goal of the Eurotra Programme to build one production-quality system. The degrees of freedom left for the different groups had the positive effect of building up language processing competence and infrastructure in the EC countries and of producing some working, fullscale &amp;quot;spin-off&amp;quot; systems, such as PaTrans (Hansen, 1994). cussed enough. Certainly, the lack of overall coordination soon became a liability. Inherent short-comings of the formalisms, and inefficiency of the implementation related to fundamental problems with the formalisms are another reason which have been pointed out (Crookston, 1990; Pulman et al., 1991). However, the main problem with the framework was probably that it never in itself moved towards one system; indeed, Johnson and Rosner (1987) discussed a software environment for Eurotra building on tools for rapid implementation and evaluation of a variety of experimental theories. In the spirit of that several parallel systems and formalisms were used, and the formalisms changed rapidly over time. Still, no framework was developed which could accommodate these different types of modules, no clear interfaces were designed, no central instance under-took the integration</context>
</contexts>
<marker>Crookston, 1990</marker>
<rawString>Ian Crookston. 1990. The E-framework: Emerging problems. In H. Karlgren, editor, Proc. 13th International Conference on Computational Linguistics, volume 2, pages 66-71, Helsinki, Finland. ACL.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Hamish Cunningham</author>
</authors>
<location>Yorick Wilks, and</location>
<marker>Cunningham, </marker>
<rawString>Hamish Cunningham, Yorick Wilks, and</rawString>
</citation>
<citation valid="true">
<authors>
<author>Robert J Gaizauskas</author>
</authors>
<title>GATE a General Architecture for Text Engineering. In</title>
<date>1996</date>
<booktitle>Proc. 16th International Conference on Computational Linguistics,</booktitle>
<volume>2</volume>
<pages>1057--1060</pages>
<publisher>ACL.</publisher>
<location>Kobenhavn, Denmark.</location>
<marker>Gaizauskas, 1996</marker>
<rawString>Robert J. Gaizauskas. 1996. GATE a General Architecture for Text Engineering. In Proc. 16th International Conference on Computational Linguistics, volume 2, pages 1057-1060, Kobenhavn, Denmark. ACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hamish Cunningham</author>
<author>Kevin Humphreys</author>
<author>Robert J Gaizauskas</author>
<author>Yorick Wilks</author>
</authors>
<title>Software infrastructure for Natural Language Processing.</title>
<date>1997</date>
<booktitle>In Proc. 5th Conference on Applied Natural Language Processing,</booktitle>
<publisher>ACL.</publisher>
<location>Washington, DC.</location>
<contexts>
<context position="17218" citStr="Cunningham et al., 1997" startWordPosition="2769" endWordPosition="2772">o one platform (Bub and Schwinn, 1996). The Verbmobil architecture employs ICE, Intarc Communication Environment (Amtrup, 1997), a general communication package, but which of course has been primarily developed for the specific needs of the Verbmobil task, non-incremental multilingual spoken dialogue translation. 3.5 Success Story 3: GATE In the mid 90&apos;s, the UK Engineering and Physical Sciences Research Council (EPSRC) started to fund a project at the University of Sheffield aimed at building a General Architecture for Text Engineering, GATE (Cunningham et al., 1996; Gaizauskas et al., 1996; Cunningham et al., 1997; Cunningham et al., 1999). As described in Section 2.2, GATE does not adhere to a particular linguistic theory, but is rather an architecture and a development environment designed to fit the needs of researchers and application developers. It presents users with an environment in which it is easy to use and integrate tools and databases, all accessiTable 1: Language processing resources in SVENSK Processing resource Main task Author(s) TextCat Tokeniser LexToken Sentence splitter Swedish Brill Tagger Uppsala Chart Processor LP-Detect Swedish Constraint Grammar SWECG2CLE Deep-level Unificatio</context>
</contexts>
<marker>Cunningham, Humphreys, Gaizauskas, Wilks, 1997</marker>
<rawString>Hamish Cunningham, Kevin Humphreys, Robert J. Gaizauskas, and Yorick Wilks. 1997. Software infrastructure for Natural Language Processing. In Proc. 5th Conference on Applied Natural Language Processing, Washington, DC. ACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hamish Cunningham</author>
<author>Robert J Gaizauskas</author>
<author>Kevin Humphreys</author>
<author>Yorick Wilks</author>
</authors>
<title>Experience with a Language Engineering architecture: Three years of GATE.</title>
<date>1999</date>
<booktitle>In Proc. Workshop on Reference Architectures and Data Standards for NLP,</booktitle>
<publisher>AISB.</publisher>
<location>Edinburgh, Scotland.</location>
<contexts>
<context position="17244" citStr="Cunningham et al., 1999" startWordPosition="2773" endWordPosition="2776">chwinn, 1996). The Verbmobil architecture employs ICE, Intarc Communication Environment (Amtrup, 1997), a general communication package, but which of course has been primarily developed for the specific needs of the Verbmobil task, non-incremental multilingual spoken dialogue translation. 3.5 Success Story 3: GATE In the mid 90&apos;s, the UK Engineering and Physical Sciences Research Council (EPSRC) started to fund a project at the University of Sheffield aimed at building a General Architecture for Text Engineering, GATE (Cunningham et al., 1996; Gaizauskas et al., 1996; Cunningham et al., 1997; Cunningham et al., 1999). As described in Section 2.2, GATE does not adhere to a particular linguistic theory, but is rather an architecture and a development environment designed to fit the needs of researchers and application developers. It presents users with an environment in which it is easy to use and integrate tools and databases, all accessiTable 1: Language processing resources in SVENSK Processing resource Main task Author(s) TextCat Tokeniser LexToken Sentence splitter Swedish Brill Tagger Uppsala Chart Processor LP-Detect Swedish Constraint Grammar SWECG2CLE Deep-level Unification-based Processor Domain-s</context>
</contexts>
<marker>Cunningham, Gaizauskas, Humphreys, Wilks, 1999</marker>
<rawString>Hamish Cunningham, Robert J. Gaizauskas, Kevin Humphreys, and Yorick Wilks. 1999. Experience with a Language Engineering architecture: Three years of GATE. In Proc. Workshop on Reference Architectures and Data Standards for NLP, Edinburgh, Scotland. AISB.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mikael Eriksson</author>
<author>Bjorn Gamback</author>
</authors>
<title>SVENSK: A toolbox of Swedish language processing resources. In (Mitkov and Nicolov,</title>
<date>1997</date>
<pages>336--341</pages>
<contexts>
<context position="3172" citStr="Eriksson and Gamback, 1997" startWordPosition="528" endWordPosition="531">t was laid out as it was. In particular, the section following concentrates on our own project and toolbox architecture together with University of Sheffield&apos;s underlying GATE system, while Section 3 draws on the experiences from some other, previous and current, work on designing large language processing systems. Section 4 then moves on to the central purpose of the paper, discussing the main insights gained during the course of the project. Finally, Section 5 supplies a short bullet list with some of the overall conclusions we have drawn. 2 A toolbox for Swedish: SVENSK The SVENSK project (Eriksson and Gamback, 1997; Olsson et al., 1998; Gamback and Olsson, 2000) is a national effort funded by the Swedish National Board for Industrial and Technical Development (NUTEK) to encompass some of the difficulties outlined above. The aim of SVENSK has been to develop a multi-purpose language processing system for Swedish based, where possible, on existing components, and targeted at research and teaching. The SVENSK system as such is thus mainly the sum of a fairly large set of different reusable language resources. 2.1 Choice of platform In 1995 when the SVENSK project started to take shape, there was a need for</context>
<context position="4536" citStr="Eriksson and Gamback, 1997" startWordPosition="752" endWordPosition="755">the selection process, there were two platforms remaining; the European Commission initiative ALEP, Advanced Language Engineering Platform (Simpkins and Groenendijk, 1994) and GATE, General Architecture for Text Engineering, from the University of Sheffield, UK (Cunningham et al., 1996). GATE was chosen since it was, among other things, freely available and did not impose its own linguistic theories on the modules to be integrated. Even though ALEP, at the time, turned out to be too slow to fit as a software framework for SVENSK, it was considered feasible to integrate external modules in it (Eriksson and Gamback, 1997). More general points about both these projects will be discussed below, ALEP in Section 3.3 and GATE in Section 3.5. We will right away describe the GATE system as such, though, from our perspective within the SVENSK project. 2.2 GATE GATE consists of three different parts; a document manager, a graphical interface, and a set of language engineering objects. This section gives an overview of each one of them. 2.2.1 GATE Document Manager, GDM The GDM, which is based on the TIPSTER database architecture (Grishman and others, 1997), serves as a communication center for the components in GATE. It</context>
</contexts>
<marker>Eriksson, Gamback, 1997</marker>
<rawString>Mikael Eriksson and Bjorn Gamback. 1997. SVENSK: A toolbox of Swedish language processing resources. In (Mitkov and Nicolov, 1997), pages 336-341.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Robert Gaizauskas</author>
<author>Hamish Cunningham</author>
<author>Yorick Wilks</author>
<author>Peter Rodgers</author>
<author>Kevin Humphreys</author>
</authors>
<title>GATE: An environment to support research and development in Natural Language Engineering. In</title>
<date>1996</date>
<booktitle>Proc. 8th International Conference on Tools with Al,</booktitle>
<publisher>IEEE.</publisher>
<location>Toulouse, France.</location>
<contexts>
<context position="17193" citStr="Gaizauskas et al., 1996" startWordPosition="2765" endWordPosition="2768">programming paradigms into one platform (Bub and Schwinn, 1996). The Verbmobil architecture employs ICE, Intarc Communication Environment (Amtrup, 1997), a general communication package, but which of course has been primarily developed for the specific needs of the Verbmobil task, non-incremental multilingual spoken dialogue translation. 3.5 Success Story 3: GATE In the mid 90&apos;s, the UK Engineering and Physical Sciences Research Council (EPSRC) started to fund a project at the University of Sheffield aimed at building a General Architecture for Text Engineering, GATE (Cunningham et al., 1996; Gaizauskas et al., 1996; Cunningham et al., 1997; Cunningham et al., 1999). As described in Section 2.2, GATE does not adhere to a particular linguistic theory, but is rather an architecture and a development environment designed to fit the needs of researchers and application developers. It presents users with an environment in which it is easy to use and integrate tools and databases, all accessiTable 1: Language processing resources in SVENSK Processing resource Main task Author(s) TextCat Tokeniser LexToken Sentence splitter Swedish Brill Tagger Uppsala Chart Processor LP-Detect Swedish Constraint Grammar SWECG2</context>
</contexts>
<marker>Gaizauskas, Cunningham, Wilks, Rodgers, Humphreys, 1996</marker>
<rawString>Robert Gaizauskas, Hamish Cunningham, Yorick Wilks, Peter Rodgers, and Kevin Humphreys. 1996. GATE: An environment to support research and development in Natural Language Engineering. In Proc. 8th International Conference on Tools with Al, Toulouse, France. IEEE.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Bjorn Gamback</author>
</authors>
<title>Processing Swedish Sentences: A Unification-Based Grammar and some Applications.</title>
<date>1997</date>
<tech>PhD Thesis,</tech>
<institution>The Royal Institute of Technology, Dept. of Computer and Systems Sciences,</institution>
<location>Stockholm,</location>
<contexts>
<context position="3172" citStr="Gamback, 1997" startWordPosition="530" endWordPosition="531">t as it was. In particular, the section following concentrates on our own project and toolbox architecture together with University of Sheffield&apos;s underlying GATE system, while Section 3 draws on the experiences from some other, previous and current, work on designing large language processing systems. Section 4 then moves on to the central purpose of the paper, discussing the main insights gained during the course of the project. Finally, Section 5 supplies a short bullet list with some of the overall conclusions we have drawn. 2 A toolbox for Swedish: SVENSK The SVENSK project (Eriksson and Gamback, 1997; Olsson et al., 1998; Gamback and Olsson, 2000) is a national effort funded by the Swedish National Board for Industrial and Technical Development (NUTEK) to encompass some of the difficulties outlined above. The aim of SVENSK has been to develop a multi-purpose language processing system for Swedish based, where possible, on existing components, and targeted at research and teaching. The SVENSK system as such is thus mainly the sum of a fairly large set of different reusable language resources. 2.1 Choice of platform In 1995 when the SVENSK project started to take shape, there was a need for</context>
<context position="4536" citStr="Gamback, 1997" startWordPosition="754" endWordPosition="755"> process, there were two platforms remaining; the European Commission initiative ALEP, Advanced Language Engineering Platform (Simpkins and Groenendijk, 1994) and GATE, General Architecture for Text Engineering, from the University of Sheffield, UK (Cunningham et al., 1996). GATE was chosen since it was, among other things, freely available and did not impose its own linguistic theories on the modules to be integrated. Even though ALEP, at the time, turned out to be too slow to fit as a software framework for SVENSK, it was considered feasible to integrate external modules in it (Eriksson and Gamback, 1997). More general points about both these projects will be discussed below, ALEP in Section 3.3 and GATE in Section 3.5. We will right away describe the GATE system as such, though, from our perspective within the SVENSK project. 2.2 GATE GATE consists of three different parts; a document manager, a graphical interface, and a set of language engineering objects. This section gives an overview of each one of them. 2.2.1 GATE Document Manager, GDM The GDM, which is based on the TIPSTER database architecture (Grishman and others, 1997), serves as a communication center for the components in GATE. It</context>
<context position="9265" citStr="Gamback, 1997" startWordPosition="1504" endWordPosition="1505">on and sentence segmentation developed specifically for the SVENSK project (Olsson, 1998). The processing chains then split further, and from left to right in Figure 1 end in the following modules; • DSP, the Domain Specific Processor (Sunnehall, 1996) produces shallow dependency graphs intended for use in applications requiring a robust interface for a specific application, such as the Olga dialogue system (Beskow et al., 1997); • DUP, the Deep-level Unification-based Processor, a component made up of a large-scale unification-based grammar for &apos;At www. let .rug.n1/-vannoord/TextCat Swedish (Gamback, 1997) and an LRparser (Samuelsson, 1994). It yields a relatively &apos;deep&apos; level of analysis but at the cost of robustness, and has previously been used for machine translation and database interfacing projects, including the SICSSRI-Telia &amp;quot;Spoken Language Translator&amp;quot; (Rayner et al., 1993). • the Uppsala Chart Processor (Shgvall-Hein, 1981) produces morphological analyses; • a Swedish version (Priitz, 1997) of the Brill Tagger (Brill, 1992); • the ParserBox, an educational tool consisting of seven parsers operating on a small grammar. At this end the different ways the parsers process the input is of </context>
</contexts>
<marker>Gamback, 1997</marker>
<rawString>Bjorn Gamback. 1997. Processing Swedish Sentences: A Unification-Based Grammar and some Applications. PhD Thesis, The Royal Institute of Technology, Dept. of Computer and Systems Sciences, Stockholm, Sweden.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Bjorn Gamback</author>
<author>Fredrik Olsson</author>
</authors>
<title>Experiences of Language Engineering algorithm reuse.</title>
<date>2000</date>
<booktitle>In Proc. 2nd International Conference on Language Resources and Evaluation,</booktitle>
<volume>1</volume>
<pages>161--166</pages>
<location>Athens, Greece. ELRA.</location>
<contexts>
<context position="3220" citStr="Gamback and Olsson, 2000" startWordPosition="536" endWordPosition="539">ion following concentrates on our own project and toolbox architecture together with University of Sheffield&apos;s underlying GATE system, while Section 3 draws on the experiences from some other, previous and current, work on designing large language processing systems. Section 4 then moves on to the central purpose of the paper, discussing the main insights gained during the course of the project. Finally, Section 5 supplies a short bullet list with some of the overall conclusions we have drawn. 2 A toolbox for Swedish: SVENSK The SVENSK project (Eriksson and Gamback, 1997; Olsson et al., 1998; Gamback and Olsson, 2000) is a national effort funded by the Swedish National Board for Industrial and Technical Development (NUTEK) to encompass some of the difficulties outlined above. The aim of SVENSK has been to develop a multi-purpose language processing system for Swedish based, where possible, on existing components, and targeted at research and teaching. The SVENSK system as such is thus mainly the sum of a fairly large set of different reusable language resources. 2.1 Choice of platform In 1995 when the SVENSK project started to take shape, there was a need for a platform flexible enough to act as a framewor</context>
</contexts>
<marker>Gamback, Olsson, 2000</marker>
<rawString>Bjorn Gamback and Fredrik Olsson. 2000. Experiences of Language Engineering algorithm reuse. In Proc. 2nd International Conference on Language Resources and Evaluation, volume 1, pages 161-166, Athens, Greece. ELRA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Alan Goldschen</author>
<author>Dan Loehr</author>
</authors>
<title>The role of the DARPA Communicator architecture as a human computer interface for distributed simulations.</title>
<date>1999</date>
<booktitle>In Spring Simulation Interoperability Workshop,</booktitle>
<publisher>SISO.</publisher>
<location>Orlando, Florida.</location>
<contexts>
<context position="19781" citStr="Goldschen and Loehr, 1999" startWordPosition="3143" endWordPosition="3146">der DARPA funding) developing Communicator, a testbed similar to the Verbmobil one. The initial DARPA Communicator architecture builds on MIT&apos;s Galaxy system (Seneff et al., 1998). A central process, the Hub, is connected with a variety of server processes and governs the control flow between them. A wide range of component types are supported: language understanding and generation, speech recog41n June 2000, according to the &amp;quot;incomplete&amp;quot; list of licensees given on the GATE web pages: www.dcs.shef .ac.uk/research/groups/n1p/gate nition and synthesis, dialogue management, and context tracking (Goldschen and Loehr, 1999). The goal of the Communicator to provide an architecture used by everyone, easing the work of porting modules and system evaluation seems decent in itself; however, the system has not been that well received within the US research community. (&amp;quot;We&apos;ve spent most of our time the last year trying to make our stuff follow Communicator standards, rather than on doing research,&amp;quot; anonymous US researcher, personal communication 2000). 4 Issues in composing a toolset A result of the integration in SVENSK is that programs from many different sources and backgrounds, which originally were not built to co</context>
</contexts>
<marker>Goldschen, Loehr, 1999</marker>
<rawString>Alan Goldschen and Dan Loehr. 1999. The role of the DARPA Communicator architecture as a human computer interface for distributed simulations. In Spring Simulation Interoperability Workshop, Orlando, Florida. SISO.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ralph Grishman</author>
</authors>
<date>1997</date>
<booktitle>TIPSTER Text Phase II Architecture Design. Version 2.3.</booktitle>
<location>New York, NY.</location>
<marker>Grishman, 1997</marker>
<rawString>Ralph Grishman et al., 1997. TIPSTER Text Phase II Architecture Design. Version 2.3. New York, NY.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ralph Grishman</author>
</authors>
<title>TIPSTER Phase II Architecture Design Document (Tinman Architecture) Version 1.52.</title>
<date>1995</date>
<location>New York, NY.</location>
<contexts>
<context position="10313" citStr="Grishman, 1995" startWordPosition="1672" endWordPosition="1673">92); • the ParserBox, an educational tool consisting of seven parsers operating on a small grammar. At this end the different ways the parsers process the input is of main interest, rather than the output produced. Each of the components has a standardised input/output interface, users will have the choice of working with the supplied development system as may be appropriate for academic research on particular aspects of language use or selecting and combining modules for integration into a user application. Since the I/O interfaces conform to the annotation model of the TIPSTER architecture (Grishman, 1995) developers (and users) can easily add components to the platform, and then link them together to form an application. Options Utilities I MODULE Help I File I Mew Layout Figure 2: An example of a system built by some of the SVENSK modules. upphrill TextCat svensk lextoken svensk Parserbox: token split Head Parserbox: Chart swecg dsp ...- Document: (all) Collection: Thomeigambackitollectionsicoling_coll Alternatively, two components with the same interfaces and functionality can be defined for the platform, and then evaluated in the same application. This allows students to experiment with dif</context>
<context position="18946" citStr="Grishman, 1995" startWordPosition="3016" endWordPosition="3018">t oy &amp; Helsinki U] [Eriksson; SICS] [Gamback; SICS], [Samuelsson; SICS] [Sunnehall; SICS] [Eineborg, Olsson et al; SICS] ble through a friendly user interface. The platform is free for non-commercial and research purposes, and has so far been distributed to more than 250 different sites around the world.4 3.6 Meanwhile in the US... Galaxy In the US, there have also been some efforts in the direction of open architectures that incorporates language processing resources, in particular within the research programmes sponsored by DARPA, the Defense Advanced Research Projects Agency. With TIPSTER (Grishman, 1995), the design of a general architecture was agreed upon; however, the full TIPSTER annotation scheme (Grishman and others, 1997) has not been implemented as such. Instead, the MITRE Cooperation is currently (under DARPA funding) developing Communicator, a testbed similar to the Verbmobil one. The initial DARPA Communicator architecture builds on MIT&apos;s Galaxy system (Seneff et al., 1998). A central process, the Hub, is connected with a variety of server processes and governs the control flow between them. A wide range of component types are supported: language understanding and generation, speec</context>
</contexts>
<marker>Grishman, 1995</marker>
<rawString>Ralph Grishman, 1995. TIPSTER Phase II Architecture Design Document (Tinman Architecture) Version 1.52. New York, NY.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Viggo Hansen</author>
</authors>
<title>PaTrans a MT-system: Development and implementation of and experiences from a MT-system.</title>
<date>1994</date>
<booktitle>In Proc. 1st Conference of the Association for Machine Translation in the Americas,</booktitle>
<pages>114--121</pages>
<location>Columbia, Maryland. AMTA.</location>
<contexts>
<context position="13146" citStr="Hansen, 1994" startWordPosition="2138" endWordPosition="2139">). After the project, &amp;quot;Eurotra bashing&amp;quot; has developed into something of a sport for European computational linguists, resulting in that the reasons for why the project failed (at least partially2) have in themselves not been dis2Tailure&apos; is a relative notion, since it was not originally a goal of the Eurotra Programme to build one production-quality system. The degrees of freedom left for the different groups had the positive effect of building up language processing competence and infrastructure in the EC countries and of producing some working, fullscale &amp;quot;spin-off&amp;quot; systems, such as PaTrans (Hansen, 1994). cussed enough. Certainly, the lack of overall coordination soon became a liability. Inherent short-comings of the formalisms, and inefficiency of the implementation related to fundamental problems with the formalisms are another reason which have been pointed out (Crookston, 1990; Pulman et al., 1991). However, the main problem with the framework was probably that it never in itself moved towards one system; indeed, Johnson and Rosner (1987) discussed a software environment for Eurotra building on tools for rapid implementation and evaluation of a variety of experimental theories. In the spi</context>
</contexts>
<marker>Hansen, 1994</marker>
<rawString>Viggo Hansen. 1994. PaTrans a MT-system: Development and implementation of and experiences from a MT-system. In Proc. 1st Conference of the Association for Machine Translation in the Americas, pages 114-121, Columbia, Maryland. AMTA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Rod Johnson</author>
<author>Mike Rosner</author>
</authors>
<title>Machine translation and software tools.</title>
<date>1987</date>
<booktitle>In (King, 1987), chapter 11,</booktitle>
<pages>154--167</pages>
<contexts>
<context position="13593" citStr="Johnson and Rosner (1987)" startWordPosition="2205" endWordPosition="2209">t of building up language processing competence and infrastructure in the EC countries and of producing some working, fullscale &amp;quot;spin-off&amp;quot; systems, such as PaTrans (Hansen, 1994). cussed enough. Certainly, the lack of overall coordination soon became a liability. Inherent short-comings of the formalisms, and inefficiency of the implementation related to fundamental problems with the formalisms are another reason which have been pointed out (Crookston, 1990; Pulman et al., 1991). However, the main problem with the framework was probably that it never in itself moved towards one system; indeed, Johnson and Rosner (1987) discussed a software environment for Eurotra building on tools for rapid implementation and evaluation of a variety of experimental theories. In the spirit of that several parallel systems and formalisms were used, and the formalisms changed rapidly over time. Still, no framework was developed which could accommodate these different types of modules, no clear interfaces were designed, no central instance under-took the integration task. 3.2 Success Story 1: CLE In contrast to the multi-site Eurotra effort, SRI International&apos;s Cambridge Research Centre and Cambridge University&apos;s Computer Labor</context>
</contexts>
<marker>Johnson, Rosner, 1987</marker>
<rawString>Rod Johnson and Mike Rosner. 1987. Machine translation and software tools. In (King, 1987), chapter 11, pages 154-167.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Fred Karlsson</author>
</authors>
<title>Atro Voutilainen, Juha Heikkila, and Arto Anttila,</title>
<date>1995</date>
<location>editors.</location>
<marker>Karlsson, 1995</marker>
<rawString>Fred Karlsson, Atro Voutilainen, Juha Heikkila, and Arto Anttila, editors. 1995. Constraint Grammar: A Language-Independent System for Parsing Unrestricted Text. Mouton de Gruyter, Berlin, Germany.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Martin Kay</author>
<author>Jean Mark Gawron</author>
<author>Peter Norvig</author>
</authors>
<title>Verbmobil: A Translation System for Face-to-Face Dialog.</title>
<date>1994</date>
<journal>Number</journal>
<booktitle>in Lecture Notes. CSLI,</booktitle>
<volume>33</volume>
<location>Stanford, California.</location>
<contexts>
<context position="16084" citStr="Kay et al., 1994" startWordPosition="2595" endWordPosition="2598">o provide the European language research and engineering community with a general purpose research and development environment. The ALEP platform supplied a range of processing resources and was particularly targeted at supporting multilinguality. However, it imposed its own formalisms (for grammars, etc.) on the developers and users. In addition, the initial implementations were as inefficient as Eurotra&apos;s and ALEP never became widely spread. 3.4 Success Story 2: Verbmobil The real contrast to Eurotra came with Verbmobil, a multi-site German government effort which started in the early 90&apos;s (Kay et al., 1994). The main processing stream of the project was clearly defined (even though parallel and complementary modules were allowed) and the interfaces between different groups and modules were developed during the project in intense inter-group discussions. A major reason why the project succeeded in producing an overall joint system was a concentrated effort by a central system administration group which incorporated components developed at several different sites and in many different programming paradigms into one platform (Bub and Schwinn, 1996). The Verbmobil architecture employs ICE, Intarc Co</context>
</contexts>
<marker>Kay, Gawron, Norvig, 1994</marker>
<rawString>Martin Kay, Jean Mark Gawron, and Peter Norvig. 1994. Verbmobil: A Translation System for Face-to-Face Dialog. Number 33 in Lecture Notes. CSLI, Stanford, California.</rawString>
</citation>
<citation valid="true">
<date>1987</date>
<booktitle>Machine Translation Today: the State of the Art.</booktitle>
<editor>Maggie King, editor.</editor>
<publisher>Edinburgh University Press,</publisher>
<location>Edinburgh, Scotland.</location>
<contexts>
<context position="13593" citStr="(1987)" startWordPosition="2209" endWordPosition="2209">nguage processing competence and infrastructure in the EC countries and of producing some working, fullscale &amp;quot;spin-off&amp;quot; systems, such as PaTrans (Hansen, 1994). cussed enough. Certainly, the lack of overall coordination soon became a liability. Inherent short-comings of the formalisms, and inefficiency of the implementation related to fundamental problems with the formalisms are another reason which have been pointed out (Crookston, 1990; Pulman et al., 1991). However, the main problem with the framework was probably that it never in itself moved towards one system; indeed, Johnson and Rosner (1987) discussed a software environment for Eurotra building on tools for rapid implementation and evaluation of a variety of experimental theories. In the spirit of that several parallel systems and formalisms were used, and the formalisms changed rapidly over time. Still, no framework was developed which could accommodate these different types of modules, no clear interfaces were designed, no central instance under-took the integration task. 3.2 Success Story 1: CLE In contrast to the multi-site Eurotra effort, SRI International&apos;s Cambridge Research Centre and Cambridge University&apos;s Computer Labor</context>
</contexts>
<marker>1987</marker>
<rawString>Maggie King, editor. 1987. Machine Translation Today: the State of the Art. Edinburgh University Press, Edinburgh, Scotland.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Maggie King</author>
<author>Sergei Perschke</author>
</authors>
<date>1987</date>
<booktitle>EUROTRA. In (King, 1987), chapter 19,</booktitle>
<pages>373--391</pages>
<contexts>
<context position="12509" citStr="King and Perschke, 1987" startWordPosition="2034" endWordPosition="2037"> Eurotra Back in 1977, the first steps were taken towards what would become the most ambitious effort in the field seen so far. The goal of the Eurotra Programme was to develop a machine translation system collaboratively in all the memberstates of the (then) European Community. A working group tried to establish linguistic and software standards as the basis for the project, but the amount of work done in this group was intended to be small, while the main efforts were to be localised to centra in the different states, working on some of the (at the end) nine languages and 72 language pairs (King and Perschke, 1987; Bech and Nygaard, 1988). After the project, &amp;quot;Eurotra bashing&amp;quot; has developed into something of a sport for European computational linguists, resulting in that the reasons for why the project failed (at least partially2) have in themselves not been dis2Tailure&apos; is a relative notion, since it was not originally a goal of the Eurotra Programme to build one production-quality system. The degrees of freedom left for the different groups had the positive effect of building up language processing competence and infrastructure in the EC countries and of producing some working, fullscale &amp;quot;spin-off&amp;quot; sy</context>
</contexts>
<marker>King, Perschke, 1987</marker>
<rawString>Maggie King and Sergei Perschke. 1987. EUROTRA. In (King, 1987), chapter 19, pages 373-391.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ruslan Mitkov</author>
<author>Nicolas Nicolov</author>
<author>editors</author>
</authors>
<date>1997</date>
<booktitle>Proc. 2nd International Conference on Recent Advances in Natural Language Processing, Tzigov Chark,</booktitle>
<location>Bulgaria.</location>
<marker>Mitkov, Nicolov, editors, 1997</marker>
<rawString>Ruslan Mitkov and Nicolas Nicolov, editors. 1997. Proc. 2nd International Conference on Recent Advances in Natural Language Processing, Tzigov Chark, Bulgaria.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Fredrik Olsson</author>
</authors>
<title>Tagging and morphological processing in the SVENSK system. MA Thesis,</title>
<date>1998</date>
<institution>Uppsala University, Sweden.</institution>
<contexts>
<context position="8740" citStr="Olsson, 1998" startWordPosition="1423" endWordPosition="1424">e are different ways the input texts can take through the system. At the top end of the picture, van Noord&apos;s freely available&apos; language identifier TextCat constitutes the starting point for all processing chains in SVENSK. Here, it allows the user to restrain the input to the system to be in Swedish. We then have two main options, either to pass the input through SWECG, the Swedish version of LingSoft oy&apos;s and Helsinki University&apos;s Constraint Grammar (Karlsson et al., 1995), or through a parallel sequence of tokenisation and sentence segmentation developed specifically for the SVENSK project (Olsson, 1998). The processing chains then split further, and from left to right in Figure 1 end in the following modules; • DSP, the Domain Specific Processor (Sunnehall, 1996) produces shallow dependency graphs intended for use in applications requiring a robust interface for a specific application, such as the Olga dialogue system (Beskow et al., 1997); • DUP, the Deep-level Unification-based Processor, a component made up of a large-scale unification-based grammar for &apos;At www. let .rug.n1/-vannoord/TextCat Swedish (Gamback, 1997) and an LRparser (Samuelsson, 1994). It yields a relatively &apos;deep&apos; level of</context>
</contexts>
<marker>Olsson, 1998</marker>
<rawString>Fredrik Olsson. 1998. Tagging and morphological processing in the SVENSK system. MA Thesis, Uppsala University, Sweden.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Fredrik Olsson</author>
<author>Bjorn Gamback</author>
<author>Mikael Eriksson</author>
</authors>
<title>Reusing Swedish language processing resources in SVENSK.</title>
<date>1998</date>
<booktitle>In Proc. Workshop on Minimizing the Effort for Language Resource Acquisition (LREC98),</booktitle>
<pages>27--33</pages>
<publisher>ELRA.</publisher>
<location>Granada,</location>
<contexts>
<context position="3193" citStr="Olsson et al., 1998" startWordPosition="532" endWordPosition="535"> particular, the section following concentrates on our own project and toolbox architecture together with University of Sheffield&apos;s underlying GATE system, while Section 3 draws on the experiences from some other, previous and current, work on designing large language processing systems. Section 4 then moves on to the central purpose of the paper, discussing the main insights gained during the course of the project. Finally, Section 5 supplies a short bullet list with some of the overall conclusions we have drawn. 2 A toolbox for Swedish: SVENSK The SVENSK project (Eriksson and Gamback, 1997; Olsson et al., 1998; Gamback and Olsson, 2000) is a national effort funded by the Swedish National Board for Industrial and Technical Development (NUTEK) to encompass some of the difficulties outlined above. The aim of SVENSK has been to develop a multi-purpose language processing system for Swedish based, where possible, on existing components, and targeted at research and teaching. The SVENSK system as such is thus mainly the sum of a fairly large set of different reusable language resources. 2.1 Choice of platform In 1995 when the SVENSK project started to take shape, there was a need for a platform flexible </context>
</contexts>
<marker>Olsson, Gamback, Eriksson, 1998</marker>
<rawString>Fredrik Olsson, Bjorn Gamback, and Mikael Eriksson. 1998. Reusing Swedish language processing resources in SVENSK. In Proc. Workshop on Minimizing the Effort for Language Resource Acquisition (LREC98), pages 27-33, Granada, Spain. ELRA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Klas Praz</author>
</authors>
<title>Preparing a training corpus in Swedish for training an automatic part of speech tagging system.</title>
<date>1997</date>
<booktitle>Ubersetzen und Dolmetschen. Forschungsstand und Perspektive. Translation and Interpreting. State and Perspectives. Proc. Humboldt-Stockholm Symposium,</booktitle>
<editor>In H. Kalverkamper and B. Svane, editors,</editor>
<institution>Stockholm University, Sweden.</institution>
<marker>Praz, 1997</marker>
<rawString>Klas Praz. 1997. Preparing a training corpus in Swedish for training an automatic part of speech tagging system. In H. Kalverkamper and B. Svane, editors, Ubersetzen und Dolmetschen. Forschungsstand und Perspektive. Translation and Interpreting. State and Perspectives. Proc. Humboldt-Stockholm Symposium, Stockholm University, Sweden.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Uszkoreit</author>
</authors>
<date>1991</date>
<booktitle>Eurotra ET6/1: Rule Formalism and Virtual Machine Design Study. CEC,</booktitle>
<editor>S. G. Pulman, editor, H. Alshawi, D. J. Arnold, D. M. Carter, J. Lindop, K. Netter, J. Tsujii, and</editor>
<location>Luxembourg.</location>
<marker>Uszkoreit, 1991</marker>
<rawString>S. G. Pulman, editor, H. Alshawi, D. J. Arnold, D. M. Carter, J. Lindop, K. Netter, J. Tsujii, and H. Uszkoreit. 1991. Eurotra ET6/1: Rule Formalism and Virtual Machine Design Study. CEC, Luxembourg.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Manny Rayner</author>
<author>Ivan Bretan</author>
<author>David Carter</author>
<author>Michael Collins</author>
<author>Vassilios Digalakis</author>
<author>Bjorn Gamback</author>
<author>Jaan Kaja</author>
<author>Jussi Karlgren</author>
<author>Bertil Lyberg</author>
<author>Steve Pulman</author>
<author>Patti Price</author>
<author>Christer Samuelsson</author>
</authors>
<title>Spoken language translation with mid-90&apos;s technology: A case study.</title>
<date>1993</date>
<booktitle>In Proc. 3rd European Conference on Speech Communication and Technology,</booktitle>
<volume>2</volume>
<pages>1299--1302</pages>
<location>Berlin, Germany. ESCA.</location>
<contexts>
<context position="9547" citStr="Rayner et al., 1993" startWordPosition="1546" endWordPosition="1549">ency graphs intended for use in applications requiring a robust interface for a specific application, such as the Olga dialogue system (Beskow et al., 1997); • DUP, the Deep-level Unification-based Processor, a component made up of a large-scale unification-based grammar for &apos;At www. let .rug.n1/-vannoord/TextCat Swedish (Gamback, 1997) and an LRparser (Samuelsson, 1994). It yields a relatively &apos;deep&apos; level of analysis but at the cost of robustness, and has previously been used for machine translation and database interfacing projects, including the SICSSRI-Telia &amp;quot;Spoken Language Translator&amp;quot; (Rayner et al., 1993). • the Uppsala Chart Processor (Shgvall-Hein, 1981) produces morphological analyses; • a Swedish version (Priitz, 1997) of the Brill Tagger (Brill, 1992); • the ParserBox, an educational tool consisting of seven parsers operating on a small grammar. At this end the different ways the parsers process the input is of main interest, rather than the output produced. Each of the components has a standardised input/output interface, users will have the choice of working with the supplied development system as may be appropriate for academic research on particular aspects of language use or selectin</context>
</contexts>
<marker>Rayner, Bretan, Carter, Collins, Digalakis, Gamback, Kaja, Karlgren, Lyberg, Pulman, Price, Samuelsson, 1993</marker>
<rawString>Manny Rayner, Ivan Bretan, David Carter, Michael Collins, Vassilios Digalakis, Bjorn Gamback, Jaan Kaja, Jussi Karlgren, Bertil Lyberg, Steve Pulman, Patti Price, and Christer Samuelsson. 1993. Spoken language translation with mid-90&apos;s technology: A case study. In Proc. 3rd European Conference on Speech Communication and Technology, volume 2, pages 1299-1302, Berlin, Germany. ESCA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Anna Shgvall-Hein</author>
</authors>
<title>An overview of the Uppsala Chart Parser version 1 (UCP-1).</title>
<date>1981</date>
<tech>Technical report,</tech>
<institution>Center for Computational Linguistics, Uppsala University, Sweden.</institution>
<contexts>
<context position="9599" citStr="Shgvall-Hein, 1981" startWordPosition="1555" endWordPosition="1556">g a robust interface for a specific application, such as the Olga dialogue system (Beskow et al., 1997); • DUP, the Deep-level Unification-based Processor, a component made up of a large-scale unification-based grammar for &apos;At www. let .rug.n1/-vannoord/TextCat Swedish (Gamback, 1997) and an LRparser (Samuelsson, 1994). It yields a relatively &apos;deep&apos; level of analysis but at the cost of robustness, and has previously been used for machine translation and database interfacing projects, including the SICSSRI-Telia &amp;quot;Spoken Language Translator&amp;quot; (Rayner et al., 1993). • the Uppsala Chart Processor (Shgvall-Hein, 1981) produces morphological analyses; • a Swedish version (Priitz, 1997) of the Brill Tagger (Brill, 1992); • the ParserBox, an educational tool consisting of seven parsers operating on a small grammar. At this end the different ways the parsers process the input is of main interest, rather than the output produced. Each of the components has a standardised input/output interface, users will have the choice of working with the supplied development system as may be appropriate for academic research on particular aspects of language use or selecting and combining modules for integration into a user </context>
</contexts>
<marker>Shgvall-Hein, 1981</marker>
<rawString>Anna Shgvall-Hein. 1981. An overview of the Uppsala Chart Parser version 1 (UCP-1). Technical report, Center for Computational Linguistics, Uppsala University, Sweden.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Christer Samuelsson</author>
</authors>
<title>Fast NaturalLanguage Parsing Using Explanation-Based Learning.</title>
<date>1994</date>
<tech>PhD Thesis,</tech>
<institution>The Royal Institute of Technology, Dept. of Computer and Systems Sciences,</institution>
<location>Stockholm,</location>
<contexts>
<context position="9300" citStr="Samuelsson, 1994" startWordPosition="1510" endWordPosition="1511">eloped specifically for the SVENSK project (Olsson, 1998). The processing chains then split further, and from left to right in Figure 1 end in the following modules; • DSP, the Domain Specific Processor (Sunnehall, 1996) produces shallow dependency graphs intended for use in applications requiring a robust interface for a specific application, such as the Olga dialogue system (Beskow et al., 1997); • DUP, the Deep-level Unification-based Processor, a component made up of a large-scale unification-based grammar for &apos;At www. let .rug.n1/-vannoord/TextCat Swedish (Gamback, 1997) and an LRparser (Samuelsson, 1994). It yields a relatively &apos;deep&apos; level of analysis but at the cost of robustness, and has previously been used for machine translation and database interfacing projects, including the SICSSRI-Telia &amp;quot;Spoken Language Translator&amp;quot; (Rayner et al., 1993). • the Uppsala Chart Processor (Shgvall-Hein, 1981) produces morphological analyses; • a Swedish version (Priitz, 1997) of the Brill Tagger (Brill, 1992); • the ParserBox, an educational tool consisting of seven parsers operating on a small grammar. At this end the different ways the parsers process the input is of main interest, rather than the outp</context>
</contexts>
<marker>Samuelsson, 1994</marker>
<rawString>Christer Samuelsson. 1994. Fast NaturalLanguage Parsing Using Explanation-Based Learning. PhD Thesis, The Royal Institute of Technology, Dept. of Computer and Systems Sciences, Stockholm, Sweden.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stephanieo Seneff</author>
<author>Ed Hurley</author>
<author>Raymond Lau</author>
<author>Christine Pao</author>
<author>Philipp Schmid</author>
<author>Victor Zue</author>
</authors>
<title>Galaxy—II: A reference architecture for conversational system development.</title>
<date>1998</date>
<booktitle>In Proc. 5th International Conference on Spoken Language Processing,</booktitle>
<volume>3</volume>
<pages>931--934</pages>
<location>Sydney, Australia.</location>
<contexts>
<context position="19334" citStr="Seneff et al., 1998" startWordPosition="3077" endWordPosition="3080">ts in the direction of open architectures that incorporates language processing resources, in particular within the research programmes sponsored by DARPA, the Defense Advanced Research Projects Agency. With TIPSTER (Grishman, 1995), the design of a general architecture was agreed upon; however, the full TIPSTER annotation scheme (Grishman and others, 1997) has not been implemented as such. Instead, the MITRE Cooperation is currently (under DARPA funding) developing Communicator, a testbed similar to the Verbmobil one. The initial DARPA Communicator architecture builds on MIT&apos;s Galaxy system (Seneff et al., 1998). A central process, the Hub, is connected with a variety of server processes and governs the control flow between them. A wide range of component types are supported: language understanding and generation, speech recog41n June 2000, according to the &amp;quot;incomplete&amp;quot; list of licensees given on the GATE web pages: www.dcs.shef .ac.uk/research/groups/n1p/gate nition and synthesis, dialogue management, and context tracking (Goldschen and Loehr, 1999). The goal of the Communicator to provide an architecture used by everyone, easing the work of porting modules and system evaluation seems decent in itse</context>
</contexts>
<marker>Seneff, Hurley, Lau, Pao, Schmid, Zue, 1998</marker>
<rawString>Stephanieo Seneff, Ed Hurley, Raymond Lau, Christine Pao, Philipp Schmid, and Victor Zue. 1998. Galaxy—II: A reference architecture for conversational system development. In Proc. 5th International Conference on Spoken Language Processing, volume 3, pages 931-934, Sydney, Australia.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Neil Simpkins</author>
<author>Marius Groenendijk</author>
</authors>
<date>1994</date>
<booktitle>The ALEP project. Technical report, Cray (now Anite) Systems / CEC,</booktitle>
<contexts>
<context position="4080" citStr="Simpkins and Groenendijk, 1994" startWordPosition="673" endWordPosition="676">essing system for Swedish based, where possible, on existing components, and targeted at research and teaching. The SVENSK system as such is thus mainly the sum of a fairly large set of different reusable language resources. 2.1 Choice of platform In 1995 when the SVENSK project started to take shape, there was a need for a platform flexible enough to act as a framework for the language processing programs intended to constitute the toolbox. At the end of the selection process, there were two platforms remaining; the European Commission initiative ALEP, Advanced Language Engineering Platform (Simpkins and Groenendijk, 1994) and GATE, General Architecture for Text Engineering, from the University of Sheffield, UK (Cunningham et al., 1996). GATE was chosen since it was, among other things, freely available and did not impose its own linguistic theories on the modules to be integrated. Even though ALEP, at the time, turned out to be too slow to fit as a software framework for SVENSK, it was considered feasible to integrate external modules in it (Eriksson and Gamback, 1997). More general points about both these projects will be discussed below, ALEP in Section 3.3 and GATE in Section 3.5. We will right away describ</context>
<context position="15150" citStr="Simpkins and Groenendijk, 1994" startWordPosition="2446" endWordPosition="2450">interface between successive phases of analysis. The CLE has been applied to a range of tasks, including machine translation and interfacing to a reasoning engine. The modular design also proved well suited for porting to other languages and the implementation was quite efficient. Thus, the project proved its purpose. However, even though the CLE system received considerable attention, it failed to spread in the community, the main reason being that it simply was too expensive to obtain it.3 3.3 Setback 2: ALEP Following the Eurotra tradition, ALEP, the Advanced Language Engineering Platform (Simpkins and Groenendijk, 1994; Bredenkamp et 3&amp;quot;You don&apos;t give away a one million pound program&amp;quot; (SRI research manager). Contrast this with the strategy of, e.g., John McAfee to give away his antivirus software for free and making millions on selling the updates! al., 1997), introduced in Section 2.1, was another European Commission initiative to provide the European language research and engineering community with a general purpose research and development environment. The ALEP platform supplied a range of processing resources and was particularly targeted at supporting multilinguality. However, it imposed its own formali</context>
</contexts>
<marker>Simpkins, Groenendijk, 1994</marker>
<rawString>Neil Simpkins and Marius Groenendijk. 1994. The ALEP project. Technical report, Cray (now Anite) Systems / CEC, Luxembourg.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Joel Sunnehall</author>
</authors>
<title>Robust parsing using dependency with constraints and preference. MA Thesis,</title>
<date>1996</date>
<institution>Uppsala University, Sweden.</institution>
<contexts>
<context position="8903" citStr="Sunnehall, 1996" startWordPosition="1450" endWordPosition="1452">itutes the starting point for all processing chains in SVENSK. Here, it allows the user to restrain the input to the system to be in Swedish. We then have two main options, either to pass the input through SWECG, the Swedish version of LingSoft oy&apos;s and Helsinki University&apos;s Constraint Grammar (Karlsson et al., 1995), or through a parallel sequence of tokenisation and sentence segmentation developed specifically for the SVENSK project (Olsson, 1998). The processing chains then split further, and from left to right in Figure 1 end in the following modules; • DSP, the Domain Specific Processor (Sunnehall, 1996) produces shallow dependency graphs intended for use in applications requiring a robust interface for a specific application, such as the Olga dialogue system (Beskow et al., 1997); • DUP, the Deep-level Unification-based Processor, a component made up of a large-scale unification-based grammar for &apos;At www. let .rug.n1/-vannoord/TextCat Swedish (Gamback, 1997) and an LRparser (Samuelsson, 1994). It yields a relatively &apos;deep&apos; level of analysis but at the cost of robustness, and has previously been used for machine translation and database interfacing projects, including the SICSSRI-Telia &amp;quot;Spoke</context>
</contexts>
<marker>Sunnehall, 1996</marker>
<rawString>Joel Sunnehall. 1996. Robust parsing using dependency with constraints and preference. MA Thesis, Uppsala University, Sweden.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>