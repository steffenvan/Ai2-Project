<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.219332">
<title confidence="0.9556945">
Realizing the Costs: Template-Based Surface Realisation in the GRAPH
Approach to Referring Expression Generation
</title>
<author confidence="0.984432">
Ivo Brugman Mari¨et Theune Emiel Krahmer Jette Viethen
</author>
<affiliation confidence="0.919096">
University of Twente University of Twente Tilburg University Macquarie University
The Netherlands The Netherlands The Netherlands Australia
</affiliation>
<email confidence="0.979296">
i.h.g.brugman@student.utwente.nl m.theune@utwente.nl e.j.krahmer@uvt.nl jviethen@ics.mq.edu.au
</email>
<sectionHeader confidence="0.993339" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.9997272">
We describe a new realiser developed for
the TUNA 2009 Challenge, and present its
evaluation scores on the development set,
showing a clear increase in performance
compared to last year’s simple realiser.
</bodyText>
<sectionHeader confidence="0.999262" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999973529411765">
The TUNA Challenge 2009 is the last in a series
of challenges using the TUNA corpus of refer-
ring expressions (Gatt et al. 2007) for compara-
tive evaluation of referring expression generation.
The 2009 Challenge is aimed at end-to-end re-
ferring expression generation, which encompasses
two subtasks: (1) attribute selection, choosing a
number of attributes that uniquely characterize a
target object, distinguishing it from other objects
in a visual scene, and (2) realisation, converting
the selected set of attributes into a word string.
Our contributions to the previous Challenges fo-
cused on subtask (1), but this year we focus on
subtask (2). Below, we briefly sketch how attribute
selection is performed in our system, describe our
newly developed realiser, and present our evalua-
tion results on the TUNA 2009 development set.
</bodyText>
<sectionHeader confidence="0.915633" genericHeader="method">
2 Attribute selection
</sectionHeader>
<bodyText confidence="0.999965695652174">
We use the Graph-based algorithm of Krahmer
et al. (2003) for attribute selection. In this ap-
proach, objects and their attributes are represented
in a graph as nodes and edges respectively, and
attribute selection is seen as a graph search prob-
lem that outputs the cheapest distinguishing graph,
given a particular cost function that assigns costs
to attributes. By assigning zero costs to some at-
tributes, e.g., the type of an object, the human
tendency to mention redundant properties can be
mimicked. For the TUNA Challenge 2009 we
use the same settings as last year (Krahmer et al.
2008). The used cost function assigns a zero cost
to attributes that are highly frequent in the TUNA
corpus, while the other attributes have a cost of
either 1 (somewhat infrequent) or 2 (very infre-
quent). The order in which attributes are added
is also controlled: to ensure that the cheapest at-
tributes are added first, they are tried in the order
of their frequency in the TUNA (2008) training
corpus. Using these settings, last year the GRAPH
attribute selection algorithm made the top 3 on all
evaluation measures (Gatt et al. 2008, Table 11).
</bodyText>
<sectionHeader confidence="0.996965" genericHeader="method">
3 Realisation
</sectionHeader>
<bodyText confidence="0.99868172">
The main resource for realisation is a set of tem-
plates, derived from the human-produced object
descriptions in the TUNA 2009 training data. To
construct the templates, we first grouped the de-
scriptions by the combination of attributes they
expressed. For instance, in the domain of furni-
ture references, all descriptions expressing the at-
tributes colour, type and orientation were grouped
together. This was done for all combinations of
attributes. Next, for each description, parts of the
word string were related to the attributes in the set.
For instance, for the string “red couch facing left”,
we linked “red” to colour, “couch” to type, and
“facing left” to orientation.1 This provided us with
information on how the attributes were expressed
(e.g., by adjectives or prepositional phrases) and
in which order they appeared in the word string.
For each combination of attributes, the surface or-
der that occurred most frequently was selected as
the basis for a template. If multiple orderings
were equally frequent, we chose the most natural-
seeming one. This resulted in templates such as
“the [colour] [type] facing [orientation]” for the at-
tribute set {type, colour, orientation}.
During realisation, the templates are used as fol-
</bodyText>
<footnote confidence="0.99689625">
1This corresponds to the ANNOTATED-WORD-STRING
nodes already present in the TUNA corpus. Unfortunately,
various problems prevented us from automatically deriving
our templates from those existing annotations.
</footnote>
<note confidence="0.8124145">
Proceedings of the 12th European Workshop on Natural Language Generation, pages 183–184,
Athens, Greece, 30 – 31 March 2009. c�2009 Association for Computational Linguistics
</note>
<page confidence="0.998463">
183
</page>
<bodyText confidence="0.999745978723405">
lows. When a set of attributes is input to the re-
aliser, it checks if there is a template matching this
particular attribute combination. If so, the tem-
plate is selected, and the gaps in the template are
filled with lexical expressions for the attribute val-
ues. The words used to express the values are
those that occurred most frequently in the train-
ing data for this particular template. If no match-
ing template is found, a description is generated
in a simple rule-based fashion, based on the re-
aliser we used last year, but with improved lexical
choices. For example, the old realiser always used
the word “person” to express the type attribute in
descriptions of people, whereas in the TUNA cor-
pus “man” is used most frequently. We changed
the realiser to reflect such human preferences.
Template construction for the furniture domain
was fairly straightforward, resulting in 25 tem-
plates. In practice, only 13 of these are used. Since
the GRAPH attribute selection algorithm adds the
type and colour attributes to a description for free,
these attributes are always selected, making any
templates lacking them irrelevant given the current
settings of the algorithm.
For the more realistic people domain, template
construction was more complicated. For exam-
ple, when the hairColour attribute is mentioned in
human descriptions it can refer either to the hair
on a person’s head (“white-haired”) or his beard
(“with a white beard”). The attribute selection al-
gorithm does not make this distinction, leaving it
unclear which of the two realisations should be
used when hairColour and hasBeard attributes are
both to be included in a description. We solved
this by simply using the expression that occurred
most frequently in the training data for each at-
tribute combination, even allowing hairColour to
be mentioned twice if this happened in most hu-
man descriptions. Another problem is that many
attribute combinations occurred only once in the
training data, leading to a very large number (50+)
of potential templates. We reduced this number in
an ad hoc manner, by ignoring combinations in-
volving attributes (such as hasHair) that are very
unlikely to be selected given the current settings
of the attribute selection algorithm. This approach
left us with 40 templates in the people domain.
</bodyText>
<sectionHeader confidence="0.991085" genericHeader="evaluation">
4 Evaluation
</sectionHeader>
<bodyText confidence="0.6936005">
System performance is measured by comparing
the generated word strings to the human descrip-
</bodyText>
<table confidence="0.9995355">
MED MNED BLEU 3
Furniture 4.94 (5.48) 0.48 (0.50) 0.27 (0.22)
People 5.15 (7.53) 0.46 (0.67) 0.33 (0.07)
Overall 5.03 (6.42) 0.47 (0.58) 0.30 (0.15)
</table>
<tableCaption confidence="0.8293635">
Table 1: Results on the 2009 development set (be-
tween brackets are those using last year’s realiser).
</tableCaption>
<bodyText confidence="0.999418964285714">
tions in the TUNA development set, comprising
80 furniture and 68 people descriptions. The eval-
uation measures reported here are mean edit dis-
tance (MED), the mean of the token-based Lev-
enshtein edit distance between the reference word
strings and the system word strings, mean nor-
malised edit distance (MNED), where the edit dis-
tance is normalised by the number of tokens, and
cumulative BLEU 3 score. Table 1 summarizes
our evaluation results. For comparison, we also
provide the results obtained when using last year’s
simple realiser, which we reimplemented in Java.
We see a clear improvement when we compare
the performance of the new and the old realiser, in
particular in the people domain. However, further
evaluation experiments are required to determine
whether the improvements are mostly due to our
use of templates derived from human descriptions,
or to the simple improvements in lexical choice
incorporated in the rules used as fall-back in case
no matching templates are found.
To further improve the realiser, we need to add
templates for all remaining attribute combinations
found in the corpus. This should not be difficult,
as the set-up of the realiser allows easy creation of
templates. It should also be easily portable to other
languages; in fact we intend to explore its use for
the realisation of referring expressions in Dutch.
</bodyText>
<sectionHeader confidence="0.999104" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.997141">
Gatt, A., I. van der Sluis and K. van Deemter 2007.
Evaluating algorithms for the generation of referring
expressions using a balanced corpus. Proceedings of
ENLG 2007 49-56.
Gatt, A., A. Belz and E. Kow 2008. The TUNA chal-
lenge 2008: Overview and evaluation results Pro-
ceedings of INLG 2008 198-206.
Krahmer, E., S. van Erk and A. Verleg 2003. Graph-
based generation of referring expressions. Compu-
tational Linguistics, 29(1), 53-72.
Krahmer, E., M. Theune, J. Viethen, and I. Hendrickx
2008. GRAPH: The costs of redundancy in referring
expressions. Proceedings of INLG 2008 227-229.
</reference>
<page confidence="0.998705">
184
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.894535">
<title confidence="0.9979345">Realizing the Costs: Template-Based Surface Realisation in the GRAPH Approach to Referring Expression Generation</title>
<author confidence="0.999633">Ivo Brugman Mari¨et Theune Emiel Krahmer Jette Viethen</author>
<affiliation confidence="0.999995">University of Twente University of Twente Tilburg University Macquarie University</affiliation>
<address confidence="0.930328">The Netherlands The Netherlands The Netherlands Australia</address>
<email confidence="0.987623">i.h.g.brugman@student.utwente.nlm.theune@utwente.nle.j.krahmer@uvt.nljviethen@ics.mq.edu.au</email>
<abstract confidence="0.996013333333333">We describe a new realiser developed for the TUNA 2009 Challenge, and present its evaluation scores on the development set, showing a clear increase in performance compared to last year’s simple realiser.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>A Gatt</author>
<author>I van der Sluis</author>
<author>K van Deemter</author>
</authors>
<title>Evaluating algorithms for the generation of referring expressions using a balanced corpus.</title>
<date>2007</date>
<booktitle>Proceedings of ENLG</booktitle>
<pages>49--56</pages>
<marker>Gatt, van der Sluis, van Deemter, 2007</marker>
<rawString>Gatt, A., I. van der Sluis and K. van Deemter 2007. Evaluating algorithms for the generation of referring expressions using a balanced corpus. Proceedings of ENLG 2007 49-56.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Gatt</author>
<author>A Belz</author>
<author>E Kow</author>
</authors>
<title>The TUNA challenge 2008: Overview and evaluation results</title>
<date>2008</date>
<booktitle>Proceedings of INLG</booktitle>
<pages>198--206</pages>
<contexts>
<context position="2607" citStr="Gatt et al. 2008" startWordPosition="399" endWordPosition="402">r the TUNA Challenge 2009 we use the same settings as last year (Krahmer et al. 2008). The used cost function assigns a zero cost to attributes that are highly frequent in the TUNA corpus, while the other attributes have a cost of either 1 (somewhat infrequent) or 2 (very infrequent). The order in which attributes are added is also controlled: to ensure that the cheapest attributes are added first, they are tried in the order of their frequency in the TUNA (2008) training corpus. Using these settings, last year the GRAPH attribute selection algorithm made the top 3 on all evaluation measures (Gatt et al. 2008, Table 11). 3 Realisation The main resource for realisation is a set of templates, derived from the human-produced object descriptions in the TUNA 2009 training data. To construct the templates, we first grouped the descriptions by the combination of attributes they expressed. For instance, in the domain of furniture references, all descriptions expressing the attributes colour, type and orientation were grouped together. This was done for all combinations of attributes. Next, for each description, parts of the word string were related to the attributes in the set. For instance, for the strin</context>
</contexts>
<marker>Gatt, Belz, Kow, 2008</marker>
<rawString>Gatt, A., A. Belz and E. Kow 2008. The TUNA challenge 2008: Overview and evaluation results Proceedings of INLG 2008 198-206.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Krahmer</author>
<author>S van Erk</author>
<author>A Verleg</author>
</authors>
<title>Graphbased generation of referring expressions.</title>
<date>2003</date>
<journal>Computational Linguistics,</journal>
<volume>29</volume>
<issue>1</issue>
<pages>53--72</pages>
<marker>Krahmer, van Erk, Verleg, 2003</marker>
<rawString>Krahmer, E., S. van Erk and A. Verleg 2003. Graphbased generation of referring expressions. Computational Linguistics, 29(1), 53-72.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Krahmer</author>
<author>M Theune</author>
<author>J Viethen</author>
<author>I Hendrickx</author>
</authors>
<title>GRAPH: The costs of redundancy in referring expressions.</title>
<date>2008</date>
<booktitle>Proceedings of INLG</booktitle>
<pages>227--229</pages>
<contexts>
<context position="2076" citStr="Krahmer et al. 2008" startWordPosition="307" endWordPosition="310">t set. 2 Attribute selection We use the Graph-based algorithm of Krahmer et al. (2003) for attribute selection. In this approach, objects and their attributes are represented in a graph as nodes and edges respectively, and attribute selection is seen as a graph search problem that outputs the cheapest distinguishing graph, given a particular cost function that assigns costs to attributes. By assigning zero costs to some attributes, e.g., the type of an object, the human tendency to mention redundant properties can be mimicked. For the TUNA Challenge 2009 we use the same settings as last year (Krahmer et al. 2008). The used cost function assigns a zero cost to attributes that are highly frequent in the TUNA corpus, while the other attributes have a cost of either 1 (somewhat infrequent) or 2 (very infrequent). The order in which attributes are added is also controlled: to ensure that the cheapest attributes are added first, they are tried in the order of their frequency in the TUNA (2008) training corpus. Using these settings, last year the GRAPH attribute selection algorithm made the top 3 on all evaluation measures (Gatt et al. 2008, Table 11). 3 Realisation The main resource for realisation is a set</context>
</contexts>
<marker>Krahmer, Theune, Viethen, Hendrickx, 2008</marker>
<rawString>Krahmer, E., M. Theune, J. Viethen, and I. Hendrickx 2008. GRAPH: The costs of redundancy in referring expressions. Proceedings of INLG 2008 227-229.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>