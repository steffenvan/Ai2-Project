<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000003">
<title confidence="0.991002">
Generating Text with a Theorem Prover
</title>
<author confidence="0.980132">
Ivan I. Garibay
</author>
<affiliation confidence="0.998874">
School of Computer Science
University of Central Florida
</affiliation>
<address confidence="0.549364">
Orlando, FL
</address>
<email confidence="0.862299">
igaribayOcs.ucf.edu
</email>
<sectionHeader confidence="0.971554" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.99988645">
The process of documenting designs is tedious and
often error-prone. We discuss a system that au-
tomatically generates documentation for the single
step transition behavior of Statecharts with particu-
lar focus on the correctness of the result in the sense
that the document will present all and only the facts
corresponding to the design being documented.
Our approach is to translate the Statechart into
a propositional formula, then translate this formula
into a natural language report. In the later transla-
tion pragmatic effects arise due to the way the in-
formation is presented. Whereas such effects can be
difficult to quantify, we account for them within an
abstract framework by applying a series of transfor-
mations on the structure on the report while pre-
serving soundness and completeness of the logical
content. The result is an automatically generated
hypertext report that is both logically correct and,
to a relatively high degree of confidence, free of mis-
leading implicatures.
</bodyText>
<sectionHeader confidence="0.995596" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999790809523809">
Producing technical documentation is a time-
consuming and expensive task. For instance, Re-
iter et al. (1995), report cases of engineers expend-
ing five hours on documentation for each hour spent
on design and of airplane documentation sets which
weigh more than the actual airplane being docu-
mented. Part of the reason for this problem is the
gap between Computer Aided Design (CAD) tools
and similar tools for assisting the documentation of
those designs. Since research efforts focus primarily
in the former, this situation is likely to get worse as
the CAD tools get more powerful while documenta-
tion tools lag far behind.
In this paper we address the matter of automatic
generation of technical documentation (Reiter et al.,
1992; Reiter et al., 1995; Rosner and Stede, 1992;
Svenberg, 1994; Punshon et al., 1997) by studying
the problem of automatically generating documents
describing the single step transition behavior of Stat-
echarts.
From a natural language generation (NLG) per-
</bodyText>
<figure confidence="0.9618894">
Statechart
Question tree + Tree transformations
Text Planning Hypertext as implicit text planner (user)
Realization Templates
Hyper-text Document
</figure>
<figureCaption confidence="0.99998">
Figure 1: Conceptual view of the system.
</figureCaption>
<bodyText confidence="0.999938619047619">
spective, this problem is distinguished in that the
formal correctness of the document being generated
is crucial while felicitousness of the style is rela-
tively unimportant. This leads us to a solution
based on formally verifiable theorem-proving tech-
niques which allows us to approach strategic NLG is-
sues within a highly abstract and conceptually clear
framework.
The system takes a statechart in the form of a
labeled directed graph and translates it into a set
of propositional formulae defining its transition be-
havior. A hyper-text natural language document is
generated on-demand from this set of formulae in
response to the reader&apos;s interaction with the appli-
cation.
Figure 1 depicts a comparative (Moore and Paris,
1993; Paris et al., 1991; Hovy, 1988) conceptual view
of the system while Fig. 2 shows the system archi-
tecture. A prototype has been fully implemented
with the exception of the statechart axiomatization
module. 1
</bodyText>
<sectionHeader confidence="0.969425" genericHeader="introduction">
2 A Logical Semantics for
Statecharts
</sectionHeader>
<bodyText confidence="0.999787166666667">
The graphical language of statecharts as proposed
by David Harel (Harel et al., 1987; Harel and Naa-
mad, 1996), has been widely recognized as a impor-
tant tool for analyzing complex reactive systems.
It has been implemented in commercial applica-
tions like STATEMATE (Harel and Politi, 1998)
</bodyText>
<footnote confidence="0.619825666666667">
1-A full description of this algorithmic translation of a stat-
echart from its graphical formalism to the propositional logic
input format used in this work is described in Garibay (2000).
</footnote>
<figure confidence="0.898549">
Content Planning
Theorem
---&apos;, Prover
</figure>
<page confidence="0.635232">
13
</page>
<figure confidence="0.991786071428572">
Statechart
Axiomatization
Module
Statechart Axioms
Reduction to
MRCNF module
Quick Reduction
to MRCNF module
Question Tree Node...*
Information Itraction Module
Hyper-text Organization/Realization Modul
Theorem
Prover
Generated Hyper-text Page
</figure>
<equation confidence="0.822285764705882">
((TV .#=;. WORKING V WAITING)
(TV.next 4==:. WORKING.next V WAITING,next)
(WORKING -■ 4 WAITING)
(WORKING.next -4 WAITING.next)
(WAITING -4 4 WORKING)
(WAITING.next WORKING.next)
(WORKING IMAGE A SOUND)
(WORKING.next •:==&gt; IMAGE.next A SOUND.next)
((TV) A
((WORKING A PICTURE A PIC-OFF A WAITING,next) V
(WORKING A (PICTURE A PIC-OFF) A
((IMAGE A PICTURE A PIC-OFF A WAITING.next) V
(IMAGE A (PICTURE A PIC-OFF) A
((PICTURE A PIC-OFF A WAITING.next) V
(PICTURE A TXT A MUTE.next A TEXT.next) V
(PICTURE A-, OFF A-, TXT A PICTURE.next)
)))
</equation>
<figureCaption confidence="0.987264">
Figure 4: Section of the propositional logic transla-
tion of the example statechart (Fig. 3).
</figureCaption>
<figure confidence="0.763893">
User Interface (Browser)
</figure>
<figureCaption confidence="0.99961825">
Figure 2: System architecture of the theorem prover
based generator. The dotted box is not imple-
mented.
Figure 3: Example Statechart.
</figureCaption>
<bodyText confidence="0.999933925925926">
and RHAPSODY from ilogix (I-Logix Inc., 2000)
and has been adopted as a part of the Unified Mod-
eling Language (UML Revision Task Force, 1999;
Booch, 1999), an endeavor to standardize a language
of blueprints for software.
Statecharts (Fig. 3) are an extension of conven-
tional finite state machines in which the states may
have a hierarchical structure. A configuration is de-
fined as a maximal set of non-conflicting states which
are active at a given time. A transition connects
states and is labeled with the set of events that trig-
ger it, and a second set of events that are generated
when the transition is taken. A step of the statechart
relates the current configuration and the events that
are active to the next configuration and the events
that are generated. A configuration and the set of
events that are active is referred to as a status.
We capture a step of a statechart as a pair of
propositional models, one for the current status and
one for the next status. In practice, we incorpo-
rate this into a single model with two versions of
each propositional variable: P for the truth value in
the current status and Pn for the truth value in the
next status 2. A full description of the algorithm
for translating statecharts to sets of formulae can
be found in Garibay (2000). For a example of this
translation see Fig. 4.
</bodyText>
<sectionHeader confidence="0.476268" genericHeader="method">
3 The Minimum Clausal Theory of
the St atechart s
</sectionHeader>
<bodyText confidence="0.99992092">
At this point, we have a formula that entails the the-
ory of the single step transition behavior of a Stat-
echart. We can fulfill our requirement of generat-
ing a sound and complete report just by translating
this formula into English. However, this approach
presents a number of problems. For instance, the
AND and OR connectives do not in general have the
same meaning in English as they do in logic (Gazdar,
1979), furthermore, unlike in the logical formula the
scope of the connectives in English is not, in gen-
eral, well defined (Holt and Klein, 1999). To mini-
mize the ambiguity, we need to take the formula to
a form with minimal nesting of operators.
Potentially a more significant problem is the fact
that much of the theory (the formula plus all its logi-
cal consequences) is obtainable only via complicated
inferences. Since the reader understands the trans-
lation of the formula at an intuitive level, making
only limited inferences, a direct translation will fail
to communicate the entire theory. Hence, we would
like to take the formula to a form that is closed, in
some sense, under logical consequences.
We address both issues by using what we refer to
as minimal (fully) resolved conjunctive normal form
(MRCNF). A formula is in a MRCNF if and only if
</bodyText>
<footnote confidence="0.802015333333333">
2These single step models will form the basis for a tem-
poral model capturing the full behavior of the statecharts as
described by Harel and Naamad (1996).
</footnote>
<figure confidence="0.9989801875">
TV
IMAGE
TXT/ (
MUTE
SOUND
MUTE
PIC_OFF
ESOUND
WAITING
TXT/
ESOUND
WORKING
ON
PICTURE
TEXT
SON
</figure>
<page confidence="0.991158">
14
</page>
<bodyText confidence="0.9999119">
it is in conjunctive normal form (CNF) and is closed
under resolution, absorption and tautology (Fitting,
1990; Rogers and Vijay-Shanker, 1994). The clo-
sure under resolution is effectively a finite approx-
imation of closure under consequence, that is, ev-
ery clause that is a logical consequence of the the-
ory entailed by the formula is a direct consequence
of some clause in the MRCNF. The other two op-
erations guarantee minimality in size by removing
clauses that are trivially true (tautology), and those
that are proper super-sets of another (absorption).
Hence, the translation will communicate not only
the initial facts but also those inferred by resolution.
Moreover, a formula in this form is just a conjunc-
tion of disjunctions—eliminating the scoping prob-
lem. If we interpret the disjunctions as implications,
the translation into English will be just a sequence
of implicative sentences that are to be interpreted
conjunctively—a typical structure for such informa-
tion in English.
</bodyText>
<sectionHeader confidence="0.9848215" genericHeader="method">
4 Organizing the Hyper-text
Report: The Question Tree
</sectionHeader>
<bodyText confidence="0.992814287671233">
A formula in MRCNF is organized in a way that
resembles a sequence of implicative sentences. The
problem now is the size of this sequence. Large to
begin with, its size is increased by the transforma-
tion to CNF and closure under resolution. Hence,
the translation of MRCNF directly into a sequence
of statements would present an uninterpretable se-
quence of facts. If they are going to be understood
by the reader there is a need for some kind of struc-
ture. The correct organization depends heavily on
the reader&apos;s goals and expectations. However, be-
yond the assumption that the reader&apos;s generic goal
is to obtain information about the transition behav-
ior of the statechart under consideration, we do not
make any assumptions about what the particular
reader&apos;s goals may be. Instead we present the report
as a hyper-text document and allow the reader to in-
teractively refine their goal by following hyper-links.
Effectively, the reader&apos;s queries focus the theory of
the statechart in a particular aspect of its behavior3.
In this way, as in Reiter et al. (1992) and Levine
et al. (1991), we use hyper-text as an implicit text
planner, in the sense that we account for every pos-
sible model of the user/system interaction and let
the actual reader decide which goal to pursue.
We will call the reader&apos;s selections choices. Each
choice the reader makes narrows the information we
have to convey, limiting it to all and only the part
that is logically consistent with that choice. We will
say that the reader refines the theory by making
the choice. At each point, the choices available to
the reader are all the propositional variables that
31n a process that will be precisely described shortly.
the theory is contingent upon. The reader effec-
tively fixes the valuation of one of these variables
to true or false. The system then adds the reader&apos;s
choice to the theory and recalculates the MRCNF. If
the newly obtained theory remains contingent upon
some variables, the reader then will have available
a new set of choices. If not, the reader will have
reached a set of non-contingent facts (henceforth
facts) which are consequences of all the previous
choices.
While this process makes the information more
accessible by giving it a logical structure, it does
nothing to reduce the size of the report. We resolve
this by generating the document on demand. While
the refinement process (the core computation for on-
demand generation) can potentially be very expen-
sive in terms of time, the fact that we are adding sin-
gleton clauses to an already minimum set of clausal
consequences allows us to use a simplified form of
the theorem prover with asymptotic time complex-
ity linear in the number of clauses.
We can visualize the process of the reader mak-
ing choices as navigating a question tree, in which
each branch is labeled with a choice and each node
contains the theory of the Statechart as refined by
the path of choices from the root to that node. In
this tree, a reader&apos;s choice is equivalent to the ques-
tion: &amp;quot;What are the circumstances/situations if X
is true/false?.&amp;quot; The root is the full theory of the
transition behavior of the Statechart. The children
of a node are obtained by fixing the valuation of
each of its contingent propositional variables in turn
and recomputing the MRCNF. The leaves are non-
contingent theories (those containing only facts) 4.
Conceptually, the labels of each path from the root
to a leaf together with each one of the facts in that
leaf corresponds to all and only the valuations which
are models of the original theory. Therefore, the
question tree is sound and complete in the logical
sense.
</bodyText>
<sectionHeader confidence="0.993562" genericHeader="method">
5 Generating the Hyper-text Page
under Pragmatic Considerations:
Information Extraction Module
</sectionHeader>
<bodyText confidence="0.999681111111111">
This tree turns out to provide a useful framework
to address pragmatic issues—those that arise princi-
pally from the structure of the report itself (Gazdar,
1979). By addressing these issues in the context of
the question tree, rather than in its realization as a
report, we abstract away from a great deal of sub-
tle semantic detail that would otherwise obscure the
analysis. Our approach consists of applying a se-
ries of transformations that resolve these issues while
</bodyText>
<footnote confidence="0.978445">
41n general this structure is a directed acyclic graph which
Reiter et al. call the question space (Reiter et al., 1995), but
since we work with a tree that spans it, we prefer question
tree.
</footnote>
<page confidence="0.996416">
15
</page>
<bodyText confidence="0.9795605">
preserving logical soundness and completeness of the
document.
</bodyText>
<subsectionHeader confidence="0.997721">
5.1 Promoting facts
</subsectionHeader>
<bodyText confidence="0.999981263157895">
In the question tree, the facts are either reported at
the end of a chain of choices or are encoded in the
choices themselves. A sequence of these choices is
analogous to a chain of nested implications in which
the antecedents are the choices made by the user
and the consequence is the theory as refined by the
choices. This refinement continues until we obtain
a non-contingent theory—one in which all variables
have valuations. Thus, the chain of implications
eventually leads to a set of facts as its final con-
sequence. The pragmatic problem in this case re-
lates to the amount of information to be provided
(Grice&apos;s Maxim of Quantity (Grice, 1975)). This
maxim states that speakers will make their contri-
bution as informative as is required, but not more
informative than that (Gazdar, 1979). Under this
assumption, reporting a fact as a consequence of a
sequence of choices explicitly denies that this fact is
a consequence of any prefix of that sequence, in con-
trast to the logical semantics of implication. Such
implicatures, while not consequences of the logical
content, are valid inferences that people make on
the basis of well established expectations about the
communicative act.
To avoid this false implicature, we present the
facts to the reader as soon as they become available,
that is, as soon as they become non-contingent in
the theory. The transformation, in this case, moves
the facts from the leaves to the interior nodes. This
transformation does not change the set of models
represented in the tree simply because the move-
ment of facts does not eliminate any path of the tree.
Hence, the transformation preserves soundness and
completeness of the tree.
In practice, the facts are just the singleton clauses
of a theory, therefore we can realize this transforma-
tion by simply reporting singleton clauses as soon as
they appear in the theory.
</bodyText>
<subsectionHeader confidence="0.99919">
5.2 Reporting facts only once
</subsectionHeader>
<bodyText confidence="0.999876916666667">
On the other hand, facts in a theory are also facts in
every consistent refinement of that theory. Hence,
reporting all the facts at each node of the question
tree leads us to report many of them repeatedly. In
effect, every fact reported in a node will be reported
in each of its children as well. This repetition of facts
violates the &amp;quot;upper-bound&amp;quot; of Quantity—it reports
more than is relevant. In this case Quantity requires
us to report only information that is &amp;quot;new&amp;quot;.
In general, what is new will depend not only on
what is reported but on inferences the reader is likely
to have made (McDonald, 1992). We have, however,
already committed to being explicit; our assumption
is that the reader makes essentially no inferences,
that they know all and only what we have explicitly
reported. Therefore, we can satisfy the upper bound
of Quantity by reporting each fact exactly once on
each branch—when it first becomes non-contingent.
To do this, we simply keep a list of all facts that
have been reported in the current branch; this is the
extent of our model of the user.
This transformation does not change the set of
models represented in the tree, since it only elimi-
nates repeated literals.
</bodyText>
<subsectionHeader confidence="0.9995">
5.3 Promoting single level implications
</subsectionHeader>
<bodyText confidence="0.999877739130435">
One of the difficulties in using Quantity is to deter-
mine what information is &amp;quot;required&amp;quot;. At each node
of the question tree we have a current theory to re-
port. The issue, in essence, is what to report at that
node and what to report at its descendents. On one
hand, it seems clear that we are, at least, required
to report the non-contingent facts at each node. On
the other hand, we don&apos;t want to report the whole
theory at the root.
Our intuition is that the degree to which facts
are relevant is inversely proportional to the diffi-
culty of interpreting them. Under these circum-
stances, un-nested implications (i.e., binary disjunc-
tions) are simple enough that the reader is likely to
expect them to be reported. From the perspective
of the question tree, this suggest, that in addition
to the facts at a node, we should also report, as im-
plications, the facts at its non-contingent children
(those that are leaves). We refer to the choices lead-
ing to non-contingent theories as conclusive choices.
These are reported as single-level implications (&amp;quot;If X
then (some sequence of facts)&amp;quot;). This has the effect
of promoting the leaves of the tree to their parent
pages.
Note that a choice that is conclusive at some page
will also be conclusive at each page in the subtree
rooted at that page (or, rather, at each page reached
by a sequence of choices consistent with that choice).
In keeping with the principle of reporting a fact ex-
actly once along each path, we must avoid reporting
the implication at the descendent pages. To this
end, after reporting each of the conclusive choices
on a page, we report the remainder of the tree be-
low that page under an &amp;quot;Otherwise&amp;quot; choice in which
the theory has been refined with the complements
of the conclusive choices. This has the effect of dra-
matically restructuring the tree: each of the non-
contingent leaves is promoted to the highest page at
which the choice that selects it becomes conclusive.
Once again this transformation reorganizes the
branches of the question tree without changing the
set of models it represents.
To find the conclusive choices we run the theorem
prover on the current theory extended, in turn, with
each literal upon which it is contingent. If the re-
sulting theory is non-contingent, then that literal is a
</bodyText>
<page confidence="0.990541">
16
</page>
<listItem confidence="0.943007647058824">
So far:
• (the current configuration does not include the state WORKING)
• it.....at OFF is not active).
Facts:
• the next configuration will not include the state WORKING.
Independent off whether:
• the event PIC-OFF is active.
Depends on whether:
• the current configuration includes the states SON and SOF.
• the event MUTE is active.
Choices:
• If the current configuration includes the state SON [ then...
• If the current configuration does not include the state SON C then...
• If the current configuration includes the state SOF [ then...
• If the current configuration does not include the state SOF [ then...
• If the event MUTE is active [ then... ]
• If the event MUTE is not active [ then... 1
</listItem>
<figureCaption confidence="0.998969">
Figure 5: Example of generated hyper-text page.
</figureCaption>
<bodyText confidence="0.963516">
The following choices are conclusive:
</bodyText>
<listItem confidence="0.629019">
• If the event OFF is active then:
- the next configuration will include the state WAITING,
but will not include the states PICTURE or TEXT.
- the event MUTE will not be generated.
• If the next configuration includes the state WAITING then.
- the event OFF is active.
- the next configuration vill not include the states PICTURE or TEXT
- the event MUTE will not be generated.
</listItem>
<figure confidence="0.535203">
[Otherwise ..,)
</figure>
<figureCaption confidence="0.9734795">
Figure 6: Conclusive choices section (up), non-
conclusive otherwise section (bottom).
</figureCaption>
<bodyText confidence="0.999034090909091">
conclusive choice. To find the remainder of the tree
to be reported under the &amp;quot;Otherwise&amp;quot; case we ex-
tend the current theory with the negation of each of
the conclusive choices. If the resulting theory is in-
consistent we will say that the conclusive choices are
exhaustive, if the result is a contingent theory we will
say that the conclusive choices are non-exhaustive
with non-conclusive otherwise, and if the result is
a non-contingent theory we will say that the con-
clusive choices, in this case, are non-exhaustive with
conclusive otherwise.
</bodyText>
<subsectionHeader confidence="0.9999">
5.4 Aggregating pairs of single conditionals
</subsectionHeader>
<bodyText confidence="0.97595925">
It frequently happens that, at some page, two con-
clusive choices lead to the same model. In this case,
we would report that each implies (among other
things) the other. However, these two implications
can be aggregated to form a biconditional. Further-
more, Quantity requires us to select the strongest
connective that applies in any such case because if
a weaker connective is selected it suggests that no
stronger one applies (a scalar implicature). Con-
sequently, we are actually compelled to aggregate
these two facts into a single biconditional.
In practice, we use the theorem prover to either
prove or disprove, for every implication, whether its
converse is a theorem of the current theory. If proved
then the biconditional is reported.
Biconditional Implications:
- the next configuration will include the state SOFF if and only if
the next configuration will not include the state SON.
One of the following must be the case:
Either:
- the current configuration includes the state SOFF,
but does not include the state TEXT.
- the event ESOUND is not active.
- the next configuration will include the state SOFF,
but will not include the state SON.
- the event ESOUND will not be generated.
4&apos;tbe current configuration includes the state SOFF,
but does not include the state TEXT.
- the event ESOUND is active.
- the next configuration will include the state SON,
but will not include the state DOFF.
- the event ESOUND will not be generated.
</bodyText>
<figureCaption confidence="0.9652895">
Figure 7: Biconditional implications and models sec-
tions.
</figureCaption>
<bodyText confidence="0.638618666666667">
Otherwise:
- the current configuration does hot include the state TEXT
- the next configuration will not include the state SON.
</bodyText>
<figureCaption confidence="0.985883">
Figure 8: Conclusive otherwise section.
</figureCaption>
<sectionHeader confidence="0.990645" genericHeader="method">
6 Hyper-text Organization and
Realization Module
</sectionHeader>
<bodyText confidence="0.999863272727273">
The organization of the hyper-text page generated
from each node of the question tree visited by the
user is shown in Fig. 5. At the top of the page we
report (parenthetically) the set of choices that have
led to this page. Next we report all of the new facts
obtained from the current theory as described in sec-
tions 5.1 and 5.2. Then, the propositions that the
theory is no longer dependent on (those which no
longer occur in the theory ) followed by the list of
propositions on which it does depend. Finally we
present the choices or, if there are any, the conclu-
sive choices. In the first (Fig. 5), each choice is pre-
sented as an implicative sentence with a hyper-text
link leading to another page (another node of the
question tree). In the second (Fig. 6 top), we present
the set of conclusive choices followed by one of the
three possible cases (described in Section 5.3) for
the &amp;quot;Otherwise&amp;quot; case. If the conclusive choices are
exhaustive (the otherwise case is inconsistent), we
report the biconditional implications (Section 5.4)
followed by the final models (Fig 7). If they are ex-
haustive with a conclusive otherwise, we report the
otherwise as another conclusive choice (Fig 8). Fi-
nally, if they are exhaustive with a non-conclusive
otherwise, we report only an otherwise hyper-link
(Fig 6 bottom).
The realization module is, in essence, a pattern
matching and template filling process. It&apos;s basic
component simply translates facts into fixed English
language sentences.&apos; Facts are represented by lit-
erals. These are classified into the following cate-
gories: current state, current event, next state, and
next event and the literals in each category are syn-
</bodyText>
<footnote confidence="0.907093">
5With added html mark-up.
</footnote>
<page confidence="0.995645">
17
</page>
<table confidence="0.59946425">
Set of Literals (facts)
((WAITING next OFF WORKING -PICTURE next TXT
Ordering and Aggregation
( WORKING ) ( OFF TXT) ( WAITING nc t -PICTURE aunt))
</table>
<subsectionHeader confidence="0.307028">
Template based realization
</subsectionHeader>
<bodyText confidence="0.519041">
The current configuration includes the state WORKING
Thu next configuration will include the state WAITING, but wiU not include the state PICTURE
The events OFF and TXT are active
</bodyText>
<figureCaption confidence="0.999415">
Figure 9: Example of realization.
</figureCaption>
<bodyText confidence="0.9869475">
tactically aggregated (Dalianis, 1999). The process
is illustrated in Figure 9.
</bodyText>
<sectionHeader confidence="0.998055" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.99884075">
Grady Booch. 1999. UML in action. Communica-
tions of the ACM, 42(10).
Hercules Dalianis. 1999. Aggregation in natural
language generation. Computational Intelligence,
15(4):384-414.
Melvin Fitting. 1990. First-order Logic and Au-
tomated Theorem Proving. Springer-Verlag, New
York.
Ivan Ibargiien Garibay. 2000. Automatic genera-
tion of natural language documentation from stat-
echarts. Master&apos;s thesis, University of Central
Florida.
Gerald Gazdar. 1979. Pragmatics: Implicature,
Presupposition, and Logical Form. Academic
Press.
H. Paul Grice. 1975. Logic and conversation. In
Peter Cole and Jerry L. Morgan, editors, Syntax
and Semantics: Speech Acts, volume 3, pages 41-
58. Academic Press.
David Harel and Amnon Naamad. 1996. The
STATEMATE semantics of statecharts. ACM
Transactions on Software Engineering and
Methodology, 5(4):293-333, Oct.
David Harel and Machal Politi. 1998. Modeling
Reactive Systems with Statecharts: The STATE-
MATE Approach. McGraw-Hill. QA 76.9 .S88
H3677 1998.
D. Harel, A. Pnueli, J. P. Schmidt, and R. Sherman.
1987. On the formal semantics of statecharts. In
Symposium on Logic in Computer Science, pages
54-64. Computer Society of the IEEE, Computer
Society Press, June.
Alexander Holt and Ewan Klein. 1999. A
semantically-derived subset of english for hard-
ware verification. In Proceedings of the 37th An-
nual Meeting of the Association for Computa-
tional Linguistics.
Eduard H. Hovy. 1988. Generating Natural Lan-
guage under Pragmatic Constraints. Lawrence
Erlbaum Associates.
I-Logix Inc. 2000. http://www.ilogix.com.
John Levine, Alison Cawsey, Chris Mellish,
Lawrence Poynter, Ehud Reiter, Paul Tyson, and
John Walker. 1991. IDAS: Combining hypertext
and natural language generation. In Third Euro-
pean Workshop on Natural Language Generation,
pages 55-62, Innsbruck, Austria.
David D. McDonald. 1992. Type-driven suppres-
sion of redundancy in the generation of inference-
rich reports. In R. Dale, E. Hovy, D. Rosner,
and 0. Stock, editors, Aspects of Automated Nat-
ural Language Generation, volume 587 of Lec-
ture Notes in Artificial Intelligence, pages 73-88.
Springer-Velag.
Johanna D. Moore and Cecile L. Paris. 1993. Plan-
ning text for advisory dialogues: Capturing inten-
tional and rhetorical information. Computational
Linguistics, 19(4):651-694.
Cecile L. Paris, William R. Swartout, and
William C. Mann, editors. 1991. Natural Lan-
guage Generation in Artificial Intelligence and
Computational Linguistics. Kluwer Academic
Publishers.
J. M. Punshon, J. P. Tremblay, P. G. Sorenson, and
P. S. Findeisen. 1997. From formal specifications
to natural language: A case of study. In 12th
IEEE International Conference Automated Soft-
ware Engineering, pages 309-310, Incline Village,
Nevada; USA, November. IEEE Computer Soci-
ety.
Ehud Reiter, Chris Mellish, and John Levine. 1992.
Automatic generation of on-line documentation in
the IDAS project. In Third Conference on Ap-
plied Natural Language Processing (ANLP-1992),
pages 64-71, Trento, Italy.
Ehud Reiter, Chris Mellish, and John Levine. 1995.
Automatic generation of technical documentation.
Applied Artificial Intelligence, 9(3):259-287.
James Rogers and K. Vijay-Shanker. 1994. Obtain-
ing trees from their descriptions: An application
to tree-adjoining grammars. Computational Intel-
ligence, 10:401-421.
D. Rosner and M. Stede. 1992. Customizing rst
for the automatic production of technical man-
uals. In R. Dale et al., editors, Aspects of Auto-
mated Natural Language Generation, number 587
in Lecture Notes in Artificial Intelligence, pages
199-214, Berlin. Springer Verlag.
S. Svenberg. 1994. Representing conceptual and lin-
guistic knowledge for multi-lingual generation in
a technical domain. In Proceedings of the 7th In-
ternational Workshop on Natural Language Gen-
eration, pages 245-248, Kennebunkport.
UML Revision Task Force, 1999. OMG Unified Mod-
eling Language Specification , v. 1.3. Document
ad/99-06-09. Object Management Group, June.
</reference>
<page confidence="0.999288">
18
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.858319">
<title confidence="0.999898">Generating Text with a Theorem Prover</title>
<author confidence="0.999992">Ivan I Garibay</author>
<affiliation confidence="0.9994825">School of Computer Science University of Central Florida</affiliation>
<address confidence="0.881927">Orlando, FL</address>
<email confidence="0.999323">igaribayOcs.ucf.edu</email>
<abstract confidence="0.998788761904762">The process of documenting designs is tedious and often error-prone. We discuss a system that automatically generates documentation for the single step transition behavior of Statecharts with particular focus on the correctness of the result in the sense that the document will present all and only the facts corresponding to the design being documented. Our approach is to translate the Statechart into a propositional formula, then translate this formula into a natural language report. In the later translation pragmatic effects arise due to the way the information is presented. Whereas such effects can be difficult to quantify, we account for them within an abstract framework by applying a series of transformations on the structure on the report while preserving soundness and completeness of the logical content. The result is an automatically generated hypertext report that is both logically correct and, to a relatively high degree of confidence, free of misleading implicatures.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Grady Booch</author>
</authors>
<title>UML in action.</title>
<date>1999</date>
<journal>Communications of the ACM,</journal>
<volume>42</volume>
<issue>10</issue>
<contexts>
<context position="5014" citStr="Booch, 1999" startWordPosition="778" endWordPosition="779">) A ((IMAGE A PICTURE A PIC-OFF A WAITING.next) V (IMAGE A (PICTURE A PIC-OFF) A ((PICTURE A PIC-OFF A WAITING.next) V (PICTURE A TXT A MUTE.next A TEXT.next) V (PICTURE A-, OFF A-, TXT A PICTURE.next) ))) Figure 4: Section of the propositional logic translation of the example statechart (Fig. 3). User Interface (Browser) Figure 2: System architecture of the theorem prover based generator. The dotted box is not implemented. Figure 3: Example Statechart. and RHAPSODY from ilogix (I-Logix Inc., 2000) and has been adopted as a part of the Unified Modeling Language (UML Revision Task Force, 1999; Booch, 1999), an endeavor to standardize a language of blueprints for software. Statecharts (Fig. 3) are an extension of conventional finite state machines in which the states may have a hierarchical structure. A configuration is defined as a maximal set of non-conflicting states which are active at a given time. A transition connects states and is labeled with the set of events that trigger it, and a second set of events that are generated when the transition is taken. A step of the statechart relates the current configuration and the events that are active to the next configuration and the events that a</context>
</contexts>
<marker>Booch, 1999</marker>
<rawString>Grady Booch. 1999. UML in action. Communications of the ACM, 42(10).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hercules Dalianis</author>
</authors>
<title>Aggregation in natural language generation.</title>
<date>1999</date>
<journal>Computational Intelligence,</journal>
<pages>15--4</pages>
<marker>Dalianis, 1999</marker>
<rawString>Hercules Dalianis. 1999. Aggregation in natural language generation. Computational Intelligence, 15(4):384-414.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Melvin Fitting</author>
</authors>
<title>First-order Logic and Automated Theorem Proving.</title>
<date>1990</date>
<publisher>Springer-Verlag,</publisher>
<location>New York.</location>
<contexts>
<context position="7870" citStr="Fitting, 1990" startWordPosition="1280" endWordPosition="1281"> would like to take the formula to a form that is closed, in some sense, under logical consequences. We address both issues by using what we refer to as minimal (fully) resolved conjunctive normal form (MRCNF). A formula is in a MRCNF if and only if 2These single step models will form the basis for a temporal model capturing the full behavior of the statecharts as described by Harel and Naamad (1996). TV IMAGE TXT/ ( MUTE SOUND MUTE PIC_OFF ESOUND WAITING TXT/ ESOUND WORKING ON PICTURE TEXT SON 14 it is in conjunctive normal form (CNF) and is closed under resolution, absorption and tautology (Fitting, 1990; Rogers and Vijay-Shanker, 1994). The closure under resolution is effectively a finite approximation of closure under consequence, that is, every clause that is a logical consequence of the theory entailed by the formula is a direct consequence of some clause in the MRCNF. The other two operations guarantee minimality in size by removing clauses that are trivially true (tautology), and those that are proper super-sets of another (absorption). Hence, the translation will communicate not only the initial facts but also those inferred by resolution. Moreover, a formula in this form is just a con</context>
</contexts>
<marker>Fitting, 1990</marker>
<rawString>Melvin Fitting. 1990. First-order Logic and Automated Theorem Proving. Springer-Verlag, New York.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ivan Ibargiien Garibay</author>
</authors>
<title>Automatic generation of natural language documentation from statecharts. Master&apos;s thesis,</title>
<date>2000</date>
<institution>University of Central Florida.</institution>
<contexts>
<context position="3782" citStr="Garibay (2000)" startWordPosition="594" endWordPosition="595">A prototype has been fully implemented with the exception of the statechart axiomatization module. 1 2 A Logical Semantics for Statecharts The graphical language of statecharts as proposed by David Harel (Harel et al., 1987; Harel and Naamad, 1996), has been widely recognized as a important tool for analyzing complex reactive systems. It has been implemented in commercial applications like STATEMATE (Harel and Politi, 1998) 1-A full description of this algorithmic translation of a statechart from its graphical formalism to the propositional logic input format used in this work is described in Garibay (2000). Content Planning Theorem ---&apos;, Prover 13 Statechart Axiomatization Module Statechart Axioms Reduction to MRCNF module Quick Reduction to MRCNF module Question Tree Node...* Information Itraction Module Hyper-text Organization/Realization Modul Theorem Prover Generated Hyper-text Page ((TV .#=;. WORKING V WAITING) (TV.next 4==:. WORKING.next V WAITING,next) (WORKING -■ 4 WAITING) (WORKING.next -4 WAITING.next) (WAITING -4 4 WORKING) (WAITING.next WORKING.next) (WORKING IMAGE A SOUND) (WORKING.next •:==&gt; IMAGE.next A SOUND.next) ((TV) A ((WORKING A PICTURE A PIC-OFF A WAITING,next) V (WORKING </context>
<context position="6145" citStr="Garibay (2000)" startWordPosition="979" endWordPosition="980">tion and the events that are active to the next configuration and the events that are generated. A configuration and the set of events that are active is referred to as a status. We capture a step of a statechart as a pair of propositional models, one for the current status and one for the next status. In practice, we incorporate this into a single model with two versions of each propositional variable: P for the truth value in the current status and Pn for the truth value in the next status 2. A full description of the algorithm for translating statecharts to sets of formulae can be found in Garibay (2000). For a example of this translation see Fig. 4. 3 The Minimum Clausal Theory of the St atechart s At this point, we have a formula that entails the theory of the single step transition behavior of a Statechart. We can fulfill our requirement of generating a sound and complete report just by translating this formula into English. However, this approach presents a number of problems. For instance, the AND and OR connectives do not in general have the same meaning in English as they do in logic (Gazdar, 1979), furthermore, unlike in the logical formula the scope of the connectives in English is n</context>
</contexts>
<marker>Garibay, 2000</marker>
<rawString>Ivan Ibargiien Garibay. 2000. Automatic generation of natural language documentation from statecharts. Master&apos;s thesis, University of Central Florida.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Gerald Gazdar</author>
</authors>
<title>Pragmatics: Implicature, Presupposition, and Logical Form.</title>
<date>1979</date>
<publisher>Academic Press.</publisher>
<contexts>
<context position="6656" citStr="Gazdar, 1979" startWordPosition="1072" endWordPosition="1073">iption of the algorithm for translating statecharts to sets of formulae can be found in Garibay (2000). For a example of this translation see Fig. 4. 3 The Minimum Clausal Theory of the St atechart s At this point, we have a formula that entails the theory of the single step transition behavior of a Statechart. We can fulfill our requirement of generating a sound and complete report just by translating this formula into English. However, this approach presents a number of problems. For instance, the AND and OR connectives do not in general have the same meaning in English as they do in logic (Gazdar, 1979), furthermore, unlike in the logical formula the scope of the connectives in English is not, in general, well defined (Holt and Klein, 1999). To minimize the ambiguity, we need to take the formula to a form with minimal nesting of operators. Potentially a more significant problem is the fact that much of the theory (the formula plus all its logical consequences) is obtainable only via complicated inferences. Since the reader understands the translation of the formula at an intuitive level, making only limited inferences, a direct translation will fail to communicate the entire theory. Hence, w</context>
<context position="12691" citStr="Gazdar, 1979" startWordPosition="2086" endWordPosition="2087">puting the MRCNF. The leaves are noncontingent theories (those containing only facts) 4. Conceptually, the labels of each path from the root to a leaf together with each one of the facts in that leaf corresponds to all and only the valuations which are models of the original theory. Therefore, the question tree is sound and complete in the logical sense. 5 Generating the Hyper-text Page under Pragmatic Considerations: Information Extraction Module This tree turns out to provide a useful framework to address pragmatic issues—those that arise principally from the structure of the report itself (Gazdar, 1979). By addressing these issues in the context of the question tree, rather than in its realization as a report, we abstract away from a great deal of subtle semantic detail that would otherwise obscure the analysis. Our approach consists of applying a series of transformations that resolve these issues while 41n general this structure is a directed acyclic graph which Reiter et al. call the question space (Reiter et al., 1995), but since we work with a tree that spans it, we prefer question tree. 15 preserving logical soundness and completeness of the document. 5.1 Promoting facts In the questio</context>
<context position="14072" citStr="Gazdar, 1979" startWordPosition="2321" endWordPosition="2322">nested implications in which the antecedents are the choices made by the user and the consequence is the theory as refined by the choices. This refinement continues until we obtain a non-contingent theory—one in which all variables have valuations. Thus, the chain of implications eventually leads to a set of facts as its final consequence. The pragmatic problem in this case relates to the amount of information to be provided (Grice&apos;s Maxim of Quantity (Grice, 1975)). This maxim states that speakers will make their contribution as informative as is required, but not more informative than that (Gazdar, 1979). Under this assumption, reporting a fact as a consequence of a sequence of choices explicitly denies that this fact is a consequence of any prefix of that sequence, in contrast to the logical semantics of implication. Such implicatures, while not consequences of the logical content, are valid inferences that people make on the basis of well established expectations about the communicative act. To avoid this false implicature, we present the facts to the reader as soon as they become available, that is, as soon as they become non-contingent in the theory. The transformation, in this case, move</context>
</contexts>
<marker>Gazdar, 1979</marker>
<rawString>Gerald Gazdar. 1979. Pragmatics: Implicature, Presupposition, and Logical Form. Academic Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Paul Grice</author>
</authors>
<title>Logic and conversation.</title>
<date>1975</date>
<booktitle>Syntax and Semantics: Speech Acts,</booktitle>
<volume>3</volume>
<pages>41--58</pages>
<editor>In Peter Cole and Jerry L. Morgan, editors,</editor>
<publisher>Academic Press.</publisher>
<contexts>
<context position="13928" citStr="Grice, 1975" startWordPosition="2298" endWordPosition="2299">her reported at the end of a chain of choices or are encoded in the choices themselves. A sequence of these choices is analogous to a chain of nested implications in which the antecedents are the choices made by the user and the consequence is the theory as refined by the choices. This refinement continues until we obtain a non-contingent theory—one in which all variables have valuations. Thus, the chain of implications eventually leads to a set of facts as its final consequence. The pragmatic problem in this case relates to the amount of information to be provided (Grice&apos;s Maxim of Quantity (Grice, 1975)). This maxim states that speakers will make their contribution as informative as is required, but not more informative than that (Gazdar, 1979). Under this assumption, reporting a fact as a consequence of a sequence of choices explicitly denies that this fact is a consequence of any prefix of that sequence, in contrast to the logical semantics of implication. Such implicatures, while not consequences of the logical content, are valid inferences that people make on the basis of well established expectations about the communicative act. To avoid this false implicature, we present the facts to t</context>
</contexts>
<marker>Grice, 1975</marker>
<rawString>H. Paul Grice. 1975. Logic and conversation. In Peter Cole and Jerry L. Morgan, editors, Syntax and Semantics: Speech Acts, volume 3, pages 41-58. Academic Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David Harel</author>
<author>Amnon Naamad</author>
</authors>
<title>The STATEMATE semantics of statecharts.</title>
<date>1996</date>
<journal>ACM Transactions on Software Engineering and Methodology,</journal>
<pages>5--4</pages>
<contexts>
<context position="3416" citStr="Harel and Naamad, 1996" startWordPosition="533" endWordPosition="537">set of propositional formulae defining its transition behavior. A hyper-text natural language document is generated on-demand from this set of formulae in response to the reader&apos;s interaction with the application. Figure 1 depicts a comparative (Moore and Paris, 1993; Paris et al., 1991; Hovy, 1988) conceptual view of the system while Fig. 2 shows the system architecture. A prototype has been fully implemented with the exception of the statechart axiomatization module. 1 2 A Logical Semantics for Statecharts The graphical language of statecharts as proposed by David Harel (Harel et al., 1987; Harel and Naamad, 1996), has been widely recognized as a important tool for analyzing complex reactive systems. It has been implemented in commercial applications like STATEMATE (Harel and Politi, 1998) 1-A full description of this algorithmic translation of a statechart from its graphical formalism to the propositional logic input format used in this work is described in Garibay (2000). Content Planning Theorem ---&apos;, Prover 13 Statechart Axiomatization Module Statechart Axioms Reduction to MRCNF module Quick Reduction to MRCNF module Question Tree Node...* Information Itraction Module Hyper-text Organization/Realiz</context>
<context position="7660" citStr="Harel and Naamad (1996)" startWordPosition="1243" endWordPosition="1246">ly via complicated inferences. Since the reader understands the translation of the formula at an intuitive level, making only limited inferences, a direct translation will fail to communicate the entire theory. Hence, we would like to take the formula to a form that is closed, in some sense, under logical consequences. We address both issues by using what we refer to as minimal (fully) resolved conjunctive normal form (MRCNF). A formula is in a MRCNF if and only if 2These single step models will form the basis for a temporal model capturing the full behavior of the statecharts as described by Harel and Naamad (1996). TV IMAGE TXT/ ( MUTE SOUND MUTE PIC_OFF ESOUND WAITING TXT/ ESOUND WORKING ON PICTURE TEXT SON 14 it is in conjunctive normal form (CNF) and is closed under resolution, absorption and tautology (Fitting, 1990; Rogers and Vijay-Shanker, 1994). The closure under resolution is effectively a finite approximation of closure under consequence, that is, every clause that is a logical consequence of the theory entailed by the formula is a direct consequence of some clause in the MRCNF. The other two operations guarantee minimality in size by removing clauses that are trivially true (tautology), and </context>
</contexts>
<marker>Harel, Naamad, 1996</marker>
<rawString>David Harel and Amnon Naamad. 1996. The STATEMATE semantics of statecharts. ACM Transactions on Software Engineering and Methodology, 5(4):293-333, Oct.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David Harel</author>
<author>Machal Politi</author>
</authors>
<title>Modeling Reactive Systems with Statecharts:</title>
<date>1998</date>
<booktitle>The STATEMATE Approach. McGraw-Hill. QA 76.9 .S88 H3677</booktitle>
<contexts>
<context position="3595" citStr="Harel and Politi, 1998" startWordPosition="562" endWordPosition="565"> interaction with the application. Figure 1 depicts a comparative (Moore and Paris, 1993; Paris et al., 1991; Hovy, 1988) conceptual view of the system while Fig. 2 shows the system architecture. A prototype has been fully implemented with the exception of the statechart axiomatization module. 1 2 A Logical Semantics for Statecharts The graphical language of statecharts as proposed by David Harel (Harel et al., 1987; Harel and Naamad, 1996), has been widely recognized as a important tool for analyzing complex reactive systems. It has been implemented in commercial applications like STATEMATE (Harel and Politi, 1998) 1-A full description of this algorithmic translation of a statechart from its graphical formalism to the propositional logic input format used in this work is described in Garibay (2000). Content Planning Theorem ---&apos;, Prover 13 Statechart Axiomatization Module Statechart Axioms Reduction to MRCNF module Quick Reduction to MRCNF module Question Tree Node...* Information Itraction Module Hyper-text Organization/Realization Modul Theorem Prover Generated Hyper-text Page ((TV .#=;. WORKING V WAITING) (TV.next 4==:. WORKING.next V WAITING,next) (WORKING -■ 4 WAITING) (WORKING.next -4 WAITING.next</context>
</contexts>
<marker>Harel, Politi, 1998</marker>
<rawString>David Harel and Machal Politi. 1998. Modeling Reactive Systems with Statecharts: The STATEMATE Approach. McGraw-Hill. QA 76.9 .S88 H3677 1998.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Harel</author>
<author>A Pnueli</author>
<author>J P Schmidt</author>
<author>R Sherman</author>
</authors>
<title>On the formal semantics of statecharts. In</title>
<date>1987</date>
<journal>Computer Society of the IEEE, Computer</journal>
<booktitle>Symposium on Logic in Computer Science,</booktitle>
<pages>54--64</pages>
<publisher>Society Press,</publisher>
<contexts>
<context position="3391" citStr="Harel et al., 1987" startWordPosition="529" endWordPosition="532">ranslates it into a set of propositional formulae defining its transition behavior. A hyper-text natural language document is generated on-demand from this set of formulae in response to the reader&apos;s interaction with the application. Figure 1 depicts a comparative (Moore and Paris, 1993; Paris et al., 1991; Hovy, 1988) conceptual view of the system while Fig. 2 shows the system architecture. A prototype has been fully implemented with the exception of the statechart axiomatization module. 1 2 A Logical Semantics for Statecharts The graphical language of statecharts as proposed by David Harel (Harel et al., 1987; Harel and Naamad, 1996), has been widely recognized as a important tool for analyzing complex reactive systems. It has been implemented in commercial applications like STATEMATE (Harel and Politi, 1998) 1-A full description of this algorithmic translation of a statechart from its graphical formalism to the propositional logic input format used in this work is described in Garibay (2000). Content Planning Theorem ---&apos;, Prover 13 Statechart Axiomatization Module Statechart Axioms Reduction to MRCNF module Quick Reduction to MRCNF module Question Tree Node...* Information Itraction Module Hyper</context>
</contexts>
<marker>Harel, Pnueli, Schmidt, Sherman, 1987</marker>
<rawString>D. Harel, A. Pnueli, J. P. Schmidt, and R. Sherman. 1987. On the formal semantics of statecharts. In Symposium on Logic in Computer Science, pages 54-64. Computer Society of the IEEE, Computer Society Press, June.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Alexander Holt</author>
<author>Ewan Klein</author>
</authors>
<title>A semantically-derived subset of english for hardware verification.</title>
<date>1999</date>
<booktitle>In Proceedings of the 37th Annual Meeting of the Association for Computational Linguistics.</booktitle>
<contexts>
<context position="6796" citStr="Holt and Klein, 1999" startWordPosition="1094" endWordPosition="1097">ation see Fig. 4. 3 The Minimum Clausal Theory of the St atechart s At this point, we have a formula that entails the theory of the single step transition behavior of a Statechart. We can fulfill our requirement of generating a sound and complete report just by translating this formula into English. However, this approach presents a number of problems. For instance, the AND and OR connectives do not in general have the same meaning in English as they do in logic (Gazdar, 1979), furthermore, unlike in the logical formula the scope of the connectives in English is not, in general, well defined (Holt and Klein, 1999). To minimize the ambiguity, we need to take the formula to a form with minimal nesting of operators. Potentially a more significant problem is the fact that much of the theory (the formula plus all its logical consequences) is obtainable only via complicated inferences. Since the reader understands the translation of the formula at an intuitive level, making only limited inferences, a direct translation will fail to communicate the entire theory. Hence, we would like to take the formula to a form that is closed, in some sense, under logical consequences. We address both issues by using what w</context>
</contexts>
<marker>Holt, Klein, 1999</marker>
<rawString>Alexander Holt and Ewan Klein. 1999. A semantically-derived subset of english for hardware verification. In Proceedings of the 37th Annual Meeting of the Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Eduard H Hovy</author>
</authors>
<title>Generating Natural Language under Pragmatic Constraints. Lawrence Erlbaum Associates.</title>
<date>1988</date>
<contexts>
<context position="3093" citStr="Hovy, 1988" startWordPosition="483" endWordPosition="484">relatively unimportant. This leads us to a solution based on formally verifiable theorem-proving techniques which allows us to approach strategic NLG issues within a highly abstract and conceptually clear framework. The system takes a statechart in the form of a labeled directed graph and translates it into a set of propositional formulae defining its transition behavior. A hyper-text natural language document is generated on-demand from this set of formulae in response to the reader&apos;s interaction with the application. Figure 1 depicts a comparative (Moore and Paris, 1993; Paris et al., 1991; Hovy, 1988) conceptual view of the system while Fig. 2 shows the system architecture. A prototype has been fully implemented with the exception of the statechart axiomatization module. 1 2 A Logical Semantics for Statecharts The graphical language of statecharts as proposed by David Harel (Harel et al., 1987; Harel and Naamad, 1996), has been widely recognized as a important tool for analyzing complex reactive systems. It has been implemented in commercial applications like STATEMATE (Harel and Politi, 1998) 1-A full description of this algorithmic translation of a statechart from its graphical formalism</context>
</contexts>
<marker>Hovy, 1988</marker>
<rawString>Eduard H. Hovy. 1988. Generating Natural Language under Pragmatic Constraints. Lawrence Erlbaum Associates.</rawString>
</citation>
<citation valid="true">
<authors>
<author>I-Logix Inc</author>
</authors>
<title>IDAS: Combining hypertext and natural language generation.</title>
<date>2000</date>
<booktitle>In Third European Workshop on Natural Language Generation,</booktitle>
<pages>55--62</pages>
<location>Innsbruck, Austria.</location>
<marker>Inc, 2000</marker>
<rawString>I-Logix Inc. 2000. http://www.ilogix.com. John Levine, Alison Cawsey, Chris Mellish, Lawrence Poynter, Ehud Reiter, Paul Tyson, and John Walker. 1991. IDAS: Combining hypertext and natural language generation. In Third European Workshop on Natural Language Generation, pages 55-62, Innsbruck, Austria.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David D McDonald</author>
</authors>
<title>Type-driven suppression of redundancy in the generation of inferencerich reports. In</title>
<date>1992</date>
<journal>Aspects of Automated Natural Language Generation,</journal>
<booktitle>of Lecture Notes in Artificial Intelligence,</booktitle>
<volume>587</volume>
<pages>73--88</pages>
<editor>R. Dale, E. Hovy, D. Rosner, and 0. Stock, editors,</editor>
<publisher>Springer-Velag.</publisher>
<contexts>
<context position="15779" citStr="McDonald, 1992" startWordPosition="2611" endWordPosition="2612">nly once On the other hand, facts in a theory are also facts in every consistent refinement of that theory. Hence, reporting all the facts at each node of the question tree leads us to report many of them repeatedly. In effect, every fact reported in a node will be reported in each of its children as well. This repetition of facts violates the &amp;quot;upper-bound&amp;quot; of Quantity—it reports more than is relevant. In this case Quantity requires us to report only information that is &amp;quot;new&amp;quot;. In general, what is new will depend not only on what is reported but on inferences the reader is likely to have made (McDonald, 1992). We have, however, already committed to being explicit; our assumption is that the reader makes essentially no inferences, that they know all and only what we have explicitly reported. Therefore, we can satisfy the upper bound of Quantity by reporting each fact exactly once on each branch—when it first becomes non-contingent. To do this, we simply keep a list of all facts that have been reported in the current branch; this is the extent of our model of the user. This transformation does not change the set of models represented in the tree, since it only eliminates repeated literals. 5.3 Promo</context>
</contexts>
<marker>McDonald, 1992</marker>
<rawString>David D. McDonald. 1992. Type-driven suppression of redundancy in the generation of inferencerich reports. In R. Dale, E. Hovy, D. Rosner, and 0. Stock, editors, Aspects of Automated Natural Language Generation, volume 587 of Lecture Notes in Artificial Intelligence, pages 73-88. Springer-Velag.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Johanna D Moore</author>
<author>Cecile L Paris</author>
</authors>
<title>Planning text for advisory dialogues: Capturing intentional and rhetorical information.</title>
<date>1993</date>
<journal>Computational Linguistics,</journal>
<pages>19--4</pages>
<contexts>
<context position="3060" citStr="Moore and Paris, 1993" startWordPosition="475" endWordPosition="478">ucial while felicitousness of the style is relatively unimportant. This leads us to a solution based on formally verifiable theorem-proving techniques which allows us to approach strategic NLG issues within a highly abstract and conceptually clear framework. The system takes a statechart in the form of a labeled directed graph and translates it into a set of propositional formulae defining its transition behavior. A hyper-text natural language document is generated on-demand from this set of formulae in response to the reader&apos;s interaction with the application. Figure 1 depicts a comparative (Moore and Paris, 1993; Paris et al., 1991; Hovy, 1988) conceptual view of the system while Fig. 2 shows the system architecture. A prototype has been fully implemented with the exception of the statechart axiomatization module. 1 2 A Logical Semantics for Statecharts The graphical language of statecharts as proposed by David Harel (Harel et al., 1987; Harel and Naamad, 1996), has been widely recognized as a important tool for analyzing complex reactive systems. It has been implemented in commercial applications like STATEMATE (Harel and Politi, 1998) 1-A full description of this algorithmic translation of a statec</context>
</contexts>
<marker>Moore, Paris, 1993</marker>
<rawString>Johanna D. Moore and Cecile L. Paris. 1993. Planning text for advisory dialogues: Capturing intentional and rhetorical information. Computational Linguistics, 19(4):651-694.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Cecile L Paris</author>
<author>William R Swartout</author>
<author>William C Mann</author>
<author>editors</author>
</authors>
<date>1991</date>
<booktitle>Natural Language Generation in Artificial Intelligence and Computational Linguistics.</booktitle>
<publisher>Kluwer Academic Publishers.</publisher>
<contexts>
<context position="3080" citStr="Paris et al., 1991" startWordPosition="479" endWordPosition="482">ess of the style is relatively unimportant. This leads us to a solution based on formally verifiable theorem-proving techniques which allows us to approach strategic NLG issues within a highly abstract and conceptually clear framework. The system takes a statechart in the form of a labeled directed graph and translates it into a set of propositional formulae defining its transition behavior. A hyper-text natural language document is generated on-demand from this set of formulae in response to the reader&apos;s interaction with the application. Figure 1 depicts a comparative (Moore and Paris, 1993; Paris et al., 1991; Hovy, 1988) conceptual view of the system while Fig. 2 shows the system architecture. A prototype has been fully implemented with the exception of the statechart axiomatization module. 1 2 A Logical Semantics for Statecharts The graphical language of statecharts as proposed by David Harel (Harel et al., 1987; Harel and Naamad, 1996), has been widely recognized as a important tool for analyzing complex reactive systems. It has been implemented in commercial applications like STATEMATE (Harel and Politi, 1998) 1-A full description of this algorithmic translation of a statechart from its graphi</context>
</contexts>
<marker>Paris, Swartout, Mann, editors, 1991</marker>
<rawString>Cecile L. Paris, William R. Swartout, and William C. Mann, editors. 1991. Natural Language Generation in Artificial Intelligence and Computational Linguistics. Kluwer Academic Publishers.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J M Punshon</author>
<author>J P Tremblay</author>
<author>P G Sorenson</author>
<author>P S Findeisen</author>
</authors>
<title>From formal specifications to natural language: A case of study.</title>
<date>1997</date>
<booktitle>In 12th IEEE International Conference Automated Software Engineering,</booktitle>
<pages>309--310</pages>
<publisher>IEEE Computer Society.</publisher>
<location>Incline Village, Nevada; USA,</location>
<contexts>
<context position="1974" citStr="Punshon et al., 1997" startWordPosition="311" endWordPosition="314">n design and of airplane documentation sets which weigh more than the actual airplane being documented. Part of the reason for this problem is the gap between Computer Aided Design (CAD) tools and similar tools for assisting the documentation of those designs. Since research efforts focus primarily in the former, this situation is likely to get worse as the CAD tools get more powerful while documentation tools lag far behind. In this paper we address the matter of automatic generation of technical documentation (Reiter et al., 1992; Reiter et al., 1995; Rosner and Stede, 1992; Svenberg, 1994; Punshon et al., 1997) by studying the problem of automatically generating documents describing the single step transition behavior of Statecharts. From a natural language generation (NLG) perStatechart Question tree + Tree transformations Text Planning Hypertext as implicit text planner (user) Realization Templates Hyper-text Document Figure 1: Conceptual view of the system. spective, this problem is distinguished in that the formal correctness of the document being generated is crucial while felicitousness of the style is relatively unimportant. This leads us to a solution based on formally verifiable theorem-pro</context>
</contexts>
<marker>Punshon, Tremblay, Sorenson, Findeisen, 1997</marker>
<rawString>J. M. Punshon, J. P. Tremblay, P. G. Sorenson, and P. S. Findeisen. 1997. From formal specifications to natural language: A case of study. In 12th IEEE International Conference Automated Software Engineering, pages 309-310, Incline Village, Nevada; USA, November. IEEE Computer Society.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ehud Reiter</author>
<author>Chris Mellish</author>
<author>John Levine</author>
</authors>
<title>Automatic generation of on-line documentation in the IDAS project.</title>
<date>1992</date>
<booktitle>In Third Conference on Applied Natural Language Processing (ANLP-1992),</booktitle>
<pages>64--71</pages>
<location>Trento, Italy.</location>
<contexts>
<context position="1890" citStr="Reiter et al., 1992" startWordPosition="297" endWordPosition="300">ort cases of engineers expending five hours on documentation for each hour spent on design and of airplane documentation sets which weigh more than the actual airplane being documented. Part of the reason for this problem is the gap between Computer Aided Design (CAD) tools and similar tools for assisting the documentation of those designs. Since research efforts focus primarily in the former, this situation is likely to get worse as the CAD tools get more powerful while documentation tools lag far behind. In this paper we address the matter of automatic generation of technical documentation (Reiter et al., 1992; Reiter et al., 1995; Rosner and Stede, 1992; Svenberg, 1994; Punshon et al., 1997) by studying the problem of automatically generating documents describing the single step transition behavior of Statecharts. From a natural language generation (NLG) perStatechart Question tree + Tree transformations Text Planning Hypertext as implicit text planner (user) Realization Templates Hyper-text Document Figure 1: Conceptual view of the system. spective, this problem is distinguished in that the formal correctness of the document being generated is crucial while felicitousness of the style is relative</context>
<context position="9864" citStr="Reiter et al. (1992)" startWordPosition="1604" endWordPosition="1607">nd of structure. The correct organization depends heavily on the reader&apos;s goals and expectations. However, beyond the assumption that the reader&apos;s generic goal is to obtain information about the transition behavior of the statechart under consideration, we do not make any assumptions about what the particular reader&apos;s goals may be. Instead we present the report as a hyper-text document and allow the reader to interactively refine their goal by following hyper-links. Effectively, the reader&apos;s queries focus the theory of the statechart in a particular aspect of its behavior3. In this way, as in Reiter et al. (1992) and Levine et al. (1991), we use hyper-text as an implicit text planner, in the sense that we account for every possible model of the user/system interaction and let the actual reader decide which goal to pursue. We will call the reader&apos;s selections choices. Each choice the reader makes narrows the information we have to convey, limiting it to all and only the part that is logically consistent with that choice. We will say that the reader refines the theory by making the choice. At each point, the choices available to the reader are all the propositional variables that 31n a process that will</context>
</contexts>
<marker>Reiter, Mellish, Levine, 1992</marker>
<rawString>Ehud Reiter, Chris Mellish, and John Levine. 1992. Automatic generation of on-line documentation in the IDAS project. In Third Conference on Applied Natural Language Processing (ANLP-1992), pages 64-71, Trento, Italy.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ehud Reiter</author>
<author>Chris Mellish</author>
<author>John Levine</author>
</authors>
<title>Automatic generation of technical documentation.</title>
<date>1995</date>
<journal>Applied Artificial Intelligence,</journal>
<pages>9--3</pages>
<contexts>
<context position="1266" citStr="Reiter et al. (1995)" startWordPosition="193" endWordPosition="197">e later translation pragmatic effects arise due to the way the information is presented. Whereas such effects can be difficult to quantify, we account for them within an abstract framework by applying a series of transformations on the structure on the report while preserving soundness and completeness of the logical content. The result is an automatically generated hypertext report that is both logically correct and, to a relatively high degree of confidence, free of misleading implicatures. 1 Introduction Producing technical documentation is a timeconsuming and expensive task. For instance, Reiter et al. (1995), report cases of engineers expending five hours on documentation for each hour spent on design and of airplane documentation sets which weigh more than the actual airplane being documented. Part of the reason for this problem is the gap between Computer Aided Design (CAD) tools and similar tools for assisting the documentation of those designs. Since research efforts focus primarily in the former, this situation is likely to get worse as the CAD tools get more powerful while documentation tools lag far behind. In this paper we address the matter of automatic generation of technical documentat</context>
<context position="13119" citStr="Reiter et al., 1995" startWordPosition="2157" endWordPosition="2160"> Information Extraction Module This tree turns out to provide a useful framework to address pragmatic issues—those that arise principally from the structure of the report itself (Gazdar, 1979). By addressing these issues in the context of the question tree, rather than in its realization as a report, we abstract away from a great deal of subtle semantic detail that would otherwise obscure the analysis. Our approach consists of applying a series of transformations that resolve these issues while 41n general this structure is a directed acyclic graph which Reiter et al. call the question space (Reiter et al., 1995), but since we work with a tree that spans it, we prefer question tree. 15 preserving logical soundness and completeness of the document. 5.1 Promoting facts In the question tree, the facts are either reported at the end of a chain of choices or are encoded in the choices themselves. A sequence of these choices is analogous to a chain of nested implications in which the antecedents are the choices made by the user and the consequence is the theory as refined by the choices. This refinement continues until we obtain a non-contingent theory—one in which all variables have valuations. Thus, the c</context>
</contexts>
<marker>Reiter, Mellish, Levine, 1995</marker>
<rawString>Ehud Reiter, Chris Mellish, and John Levine. 1995. Automatic generation of technical documentation. Applied Artificial Intelligence, 9(3):259-287.</rawString>
</citation>
<citation valid="true">
<authors>
<author>James Rogers</author>
<author>K Vijay-Shanker</author>
</authors>
<title>Obtaining trees from their descriptions: An application to tree-adjoining grammars.</title>
<date>1994</date>
<journal>Computational Intelligence,</journal>
<pages>10--401</pages>
<contexts>
<context position="7903" citStr="Rogers and Vijay-Shanker, 1994" startWordPosition="1282" endWordPosition="1285">take the formula to a form that is closed, in some sense, under logical consequences. We address both issues by using what we refer to as minimal (fully) resolved conjunctive normal form (MRCNF). A formula is in a MRCNF if and only if 2These single step models will form the basis for a temporal model capturing the full behavior of the statecharts as described by Harel and Naamad (1996). TV IMAGE TXT/ ( MUTE SOUND MUTE PIC_OFF ESOUND WAITING TXT/ ESOUND WORKING ON PICTURE TEXT SON 14 it is in conjunctive normal form (CNF) and is closed under resolution, absorption and tautology (Fitting, 1990; Rogers and Vijay-Shanker, 1994). The closure under resolution is effectively a finite approximation of closure under consequence, that is, every clause that is a logical consequence of the theory entailed by the formula is a direct consequence of some clause in the MRCNF. The other two operations guarantee minimality in size by removing clauses that are trivially true (tautology), and those that are proper super-sets of another (absorption). Hence, the translation will communicate not only the initial facts but also those inferred by resolution. Moreover, a formula in this form is just a conjunction of disjunctions—eliminat</context>
</contexts>
<marker>Rogers, Vijay-Shanker, 1994</marker>
<rawString>James Rogers and K. Vijay-Shanker. 1994. Obtaining trees from their descriptions: An application to tree-adjoining grammars. Computational Intelligence, 10:401-421.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Rosner</author>
<author>M Stede</author>
</authors>
<title>Customizing rst for the automatic production of technical manuals.</title>
<date>1992</date>
<booktitle>Aspects of Automated Natural Language Generation, number 587 in Lecture Notes in Artificial Intelligence,</booktitle>
<pages>199--214</pages>
<editor>In R. Dale et al., editors,</editor>
<publisher>Springer Verlag.</publisher>
<location>Berlin.</location>
<contexts>
<context position="1935" citStr="Rosner and Stede, 1992" startWordPosition="305" endWordPosition="308">s on documentation for each hour spent on design and of airplane documentation sets which weigh more than the actual airplane being documented. Part of the reason for this problem is the gap between Computer Aided Design (CAD) tools and similar tools for assisting the documentation of those designs. Since research efforts focus primarily in the former, this situation is likely to get worse as the CAD tools get more powerful while documentation tools lag far behind. In this paper we address the matter of automatic generation of technical documentation (Reiter et al., 1992; Reiter et al., 1995; Rosner and Stede, 1992; Svenberg, 1994; Punshon et al., 1997) by studying the problem of automatically generating documents describing the single step transition behavior of Statecharts. From a natural language generation (NLG) perStatechart Question tree + Tree transformations Text Planning Hypertext as implicit text planner (user) Realization Templates Hyper-text Document Figure 1: Conceptual view of the system. spective, this problem is distinguished in that the formal correctness of the document being generated is crucial while felicitousness of the style is relatively unimportant. This leads us to a solution b</context>
</contexts>
<marker>Rosner, Stede, 1992</marker>
<rawString>D. Rosner and M. Stede. 1992. Customizing rst for the automatic production of technical manuals. In R. Dale et al., editors, Aspects of Automated Natural Language Generation, number 587 in Lecture Notes in Artificial Intelligence, pages 199-214, Berlin. Springer Verlag.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Svenberg</author>
</authors>
<title>Representing conceptual and linguistic knowledge for multi-lingual generation in a technical domain.</title>
<date>1994</date>
<booktitle>In Proceedings of the 7th International Workshop on Natural Language Generation,</booktitle>
<pages>245--248</pages>
<location>Kennebunkport.</location>
<contexts>
<context position="1951" citStr="Svenberg, 1994" startWordPosition="309" endWordPosition="310">ach hour spent on design and of airplane documentation sets which weigh more than the actual airplane being documented. Part of the reason for this problem is the gap between Computer Aided Design (CAD) tools and similar tools for assisting the documentation of those designs. Since research efforts focus primarily in the former, this situation is likely to get worse as the CAD tools get more powerful while documentation tools lag far behind. In this paper we address the matter of automatic generation of technical documentation (Reiter et al., 1992; Reiter et al., 1995; Rosner and Stede, 1992; Svenberg, 1994; Punshon et al., 1997) by studying the problem of automatically generating documents describing the single step transition behavior of Statecharts. From a natural language generation (NLG) perStatechart Question tree + Tree transformations Text Planning Hypertext as implicit text planner (user) Realization Templates Hyper-text Document Figure 1: Conceptual view of the system. spective, this problem is distinguished in that the formal correctness of the document being generated is crucial while felicitousness of the style is relatively unimportant. This leads us to a solution based on formally</context>
</contexts>
<marker>Svenberg, 1994</marker>
<rawString>S. Svenberg. 1994. Representing conceptual and linguistic knowledge for multi-lingual generation in a technical domain. In Proceedings of the 7th International Workshop on Natural Language Generation, pages 245-248, Kennebunkport.</rawString>
</citation>
<citation valid="true">
<authors>
<author>UML Revision</author>
</authors>
<title>Task Force,</title>
<date>1999</date>
<journal>OMG Unified Modeling Language Specification , v. 1.3. Document</journal>
<pages>99--06</pages>
<institution>Object Management Group,</institution>
<marker>Revision, 1999</marker>
<rawString>UML Revision Task Force, 1999. OMG Unified Modeling Language Specification , v. 1.3. Document ad/99-06-09. Object Management Group, June.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>