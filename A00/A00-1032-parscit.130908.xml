<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000494">
<title confidence="0.795633">
Language Independent Morphological Analysis
</title>
<author confidence="0.8666">
Yamashita, Tatsuo and Matsumoto, Yuji
</author>
<affiliation confidence="0.8903125">
Graduate School of Information Science
Nara Institute of Science and Technology
</affiliation>
<note confidence="0.638225">
{tatuo-y,matsu} Ois. aist-nara. ac.jp
</note>
<sectionHeader confidence="0.974449" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999958583333333">
This paper proposes a framework of language inde-
pendent morphological analysis and mainly concen-
trate on tokenization, the first process of morpholog-
ical analysis. Although tokenization is usually not
regarded as a difficult task in most segmented lan-
guages such as English, there are a number of prob-
lems in achieving precise treatment of lexical entries.
We first introduce the concept of morpho-fragments,
which are intermediate units between characters and
lexical entries. We describe our approach to resolve
problems arising in tokenization so as to attain a
language independent morphological analyzer.
</bodyText>
<sectionHeader confidence="0.998428" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.99999037037037">
The first step in natural language processing is to
identify words in a sentence. We call this process a
morphological analysis. Various languages exist in
the world, and strategies for morphological analysis
differ by types of language. Conventionally, mor-
phological analyzers have been developed in one an-
alyzer for each language approach. This is a lan-
guage dependent approach. In contrast, We propose
a framework of language independent morphologi-
cal analysis system. We employ one analyzer for
any language approach. This approach enables a
rapid implementation of morphological analysis sys-
tems for new languages.
We define two types of written languages: one
is a segmented language, and the other is a non-
segmented language. In non-segmented languages
such as Chinese and Japanese, since words are not
separated by delimiters such as white spaces, tok-
enization is a important and difficult task. In seg-
mented languages such as English, since words are
seemingly separated by white spaces or punctuation
marks, tokenization is regarded as a relatively easy
task and little attention has been paid to. Therefore,
each language dependent morphological analyzer has
its own strategy for tokenization. We call a string
defined in the dictionary lexeme. From an algorith-
mic point of view, tokenization is regarded as the
process of converting an input stream of characters
into a stream of lexemes.
We assume that a morphological analysis consists
of three processes: tokenization, dictionary look-
up, and disambiguation. Dictionary look-up gets
a string and returns a set of lexemes with part-of-
speech information. This implicitly contains lemma-
tization. Disambiguation selects the most plausible
sequence of lexemes by a use of a rule-base model
or a hidden Markov model (HMM)(Manning and
Schiitze, 1999). Disambiguation is already language
independent, since it does not process strings di-
rectly and therefore will not be taken up. On the
other hand, tokenization and dictionary look-up are
language dependent and shall be explained more in
this paper.
We consider problems concerning tokenization
of segmented languages in Section 2. To resolve
these problem, we first apply the method of non-
segmented languages processing to segmented lan-
guages (Section 3). However, we do not obtain a
satisfactory result. Then, we introduce the con-
cept of morpho-fragments to generalize the method
of non-segmented language processing (Section 4).
The proposed framework resolves most problems in
tokenization, and an efficient language independent
part-of-speech tagging becomes possible.
</bodyText>
<subsectionHeader confidence="0.830201">
2 Problems of Tokenization in
Segmented Languages
</subsectionHeader>
<bodyText confidence="0.9995018125">
In segmented languages such as English, tokeniza-
tion is regarded as a relatively easy task and little
attention has been paid to. When a sentence has
clear word boundaries, the analyzer just consults
the dictionary look-up component whether strings
between delimiters exist in the dictionary. If any
string exists, the dictionary look-up component re-
turns the set of possible parts-of-speech. This string
is known as graphic word which is defined as &amp;quot;a string
of contiguous alphanumeric characters with space on
either side; may include hyphens and apostrophes,
but no other punctuation marks&amp;quot; (Ku6era and Fran-
cis, 1967).
Conventionally, in segmented languages, an ana-
lyzer converts a stream of characters into graphic
words (see the rows labeled &amp;quot;Characters&amp;quot; and
</bodyText>
<page confidence="0.995039">
232
</page>
<note confidence="0.657666">
Sentence Dr. Lee and John&apos;s son go to the McDonald&apos;s in New York.
</note>
<table confidence="0.921680166666667">
Characters Aril ILIelel laInIdi IJIelhinl&apos;Iel Is101n1 Ig10I Mel It!hie&apos; ImIcIDIelnlellIcillel 111711 INIelel IYIelrlk1.1
Graphic Prid iLee! land! &apos;John&apos;s&apos; &apos;son&apos; &apos;go&apos; Ito! &apos;the&apos; &apos;McDonald&apos;s&apos; lin! &apos;New! &apos;York!.!
Words
Lexemes &apos;Dr.&apos; &apos;Lee&apos; land! IJohnl&apos;sl &apos;son&apos; lgol Ito! &apos;the&apos; &apos;McDonald&apos;s! Iiill New York!.!
Morpho- Pr1.1 !Lee&apos; land&apos; John! &apos;Is! &apos;son&apos; lgo! Ito! &apos;the! IMcDosaldi&apos;Isl lin! &apos;New&apos; York! .1
fragments
</table>
<figureCaption confidence="0.938475">
Figure 1: Decomposition of Sentence in English
</figureCaption>
<table confidence="0.879956166666667">
Sentence 41I*BrCelgt- L. -C-1/1Z .
(He is home for holiday.)
Characters IIAIIII*IIINI-CINTIII LI-Cill&apos;IZ I 0
Lexemes
Morpho- I ill 1 it iw FiN 1 --(7, 04 its .
fragments
</table>
<figureCaption confidence="0.999124">
Figure 2: Decomposition of Sentence in Japanese
</figureCaption>
<bodyText confidence="0.977779558823529">
&amp;quot;Graphic Words&amp;quot; in Figure 1) and searches the dic-
tionary for these graphic words. However, in prac-
tice, we want a sequence of lexemes (see the line
labeled &amp;quot;Lexemes&amp;quot; in Figure 1). We list two major
problems of tokenization in segmented languages be-
low (examples in English). We use the term segment
to refer to a string separated by white spaces.
1. Segmentation(one segment into several lex-
emes):
Segments with a period at the end (e.g, &amp;quot;Calif.&amp;quot;
and &amp;quot;etc.&amp;quot;) suffer from segmentation ambigu-
ity. The period can denote an abbreviation, the
end of a sentence, or both. The problem of sen-
tence boundary ambiguity is not easy to solve
(Palmer and Hearst, 1997). A segment with
an apostrophe also has segmentation ambiguity.
For example, &amp;quot;McDonald&apos;s&amp;quot; is ambiguous since
this string can be segmented into either &amp;quot;Mc-
Donald / Proper noun&amp;quot; + &amp;quot;&apos;s / Possessive end-
ing&amp;quot; or &amp;quot;McDonald&apos;s / Proper noun (company
name)&amp;quot;. In addition, &amp;quot;boys&apos; &amp;quot; in a sentence &amp;quot;...
the boys&apos; toys ...&amp;quot; is ambiguous. The string can
be segmented into either &amp;quot;boys&apos; / Plural posses-
sive&amp;quot; or &amp;quot;boys / Plural Noun&amp;quot; + &amp;quot; &apos; / Punctu-
ation (the end of a quotation)&amp;quot; (Manning and
Schiitze, 1999). If a hyphenated segment such
as &amp;quot;data-base,&amp;quot; &amp;quot;F-16,&amp;quot; or &amp;quot;MS-DOS&amp;quot; exists in
the dictionary, it should be an independent lex-
eme. However, if a hyphenated segment such as
&amp;quot;55-years-old&amp;quot; does not exist in the dictionary,
hyphens should be treated as independent to-
kens(Fox, 1992). Other punctuation marks such
as &amp;quot;/&amp;quot; or &amp;quot;_&amp;quot; have the same problem in &amp;quot;OS/2&amp;quot;
or &amp;quot;max_size&amp;quot; (in programming languages).
</bodyText>
<sectionHeader confidence="0.692941" genericHeader="method">
2. Round-up(several segments into one lexeme):
</sectionHeader>
<bodyText confidence="0.999811172413793">
If a lexeme consisting of a sequence of segments
such as a proper noun (e.g., &amp;quot;New York&amp;quot;) or
a phrasal verb (e.g., &amp;quot;look at&amp;quot; and &amp;quot;get up&amp;quot;)
exists in the dictionary, it should be a lexeme.
To handle such lexemes, we need to store multi-
segment lexemes in the dictionary. Webster and
Kit handle idioms and fixed expressions in this
way(Webster and Kit, 1992). In Penn Tree-
bank(Santorini, 1990), a proper noun like &amp;quot;New
York&amp;quot; is defined as two individual proper nouns
&amp;quot;New / NNP&amp;quot; + &amp;quot;York / NNP,&amp;quot; disregarding
round-up of several segments into a lexeme.
The definition of lexemes in a dictionary depends
on the requirement of application. Therefore, a sim-
ple pattern matcher is not enough to deal with lan-
guage independent tokenization.
Non-segmented languages do not have a delimiter
between lexemes (Figure 2). Therefore, a treatment
of further segmentation and rounding up has been
well considered. In a non-segmented language, the
analyzer considers all prefixes from each position in
the sentence, checks whether each prefix matches
the lexeme in the dictionary, stores these lexemes
in a graph structure, and finds the most plausible
sequence of lexemes in the graph structure. To find
the sequence, Nagata proposed a probabilistic lan-
guage model for non-segmented languages(Nagata,
1994)(Nagata, 1999).
The crucial difference between segmented and
</bodyText>
<page confidence="0.989949">
233
</page>
<bodyText confidence="0.9999872">
non-segmented languages in the process of morpho-
logical analysis appears in the way of the dictionary
look-up. The standard technique for looking up lex-
emes in Japanese dictionaries is to use a trie struc-
ture(Fredkin, 1960)(Knuth, 1998). A trie structured
dictionary gives all possible lexemes that start at
a given position in a sentence effectively(Morimoto
and Aoe, 1993). We call this method of word
looking-up as &amp;quot;common prefix search&amp;quot; (hereafter
CPS). Figure 3 shows a part of the trie for Japanese
lexeme dictionary. The results of CPS for &amp;quot;i4Ati.
ft&lt; &amp;quot;(I go to Ebina.) are &amp;quot;it&amp;quot; and &amp;quot;i4ti.&amp;quot; To
get all possible lexemes in the sentence, the analyzer
has to slide the start position for CPS to the right
by character by character.
</bodyText>
<sectionHeader confidence="0.987976" genericHeader="method">
3 A Naive Approach
</sectionHeader>
<bodyText confidence="0.999916866666667">
A simple method that directly applies the mor-
phological analysis method for non-segmented lan-
guages can handle the problems of segmented
languages. For instance, to analyze the sen-
tence, &amp;quot;They&apos;ve gone to school together,&amp;quot; we first
delete all white spaces in the sentence and get
&amp;quot;They&apos;vegonetoschooltogether.&amp;quot; Then we pass it to
the analyzer for non-segmented languages. However,
the analyzer may return the result as &amp;quot;They / &apos;ve /
gone / to / school / to / get / her / .&amp;quot; inducing a
spurious ambiguity. Mills applied this method and
tokenized the medieval manuscript in Cornish(Mills,
1998).
We carried out experiments to examine the in-
fluence of delimiter deletion. We use Penn Tree-
bank(Santorini, 1990) part-of-speech tagged cor-
pus (1.3M lexemes) to train an HMM and ana-
lyze sentences by HMM-based morphological ana-
lyzer MOZ(Yamashita, 1999)(Ymashita et al., 1999).
We use a bigram model for training it from the cor-
pus. Test data is the same as the training corpus.
Table 1 shows accuracy of segmentation and part-of-
speech tagging. The accuracy is expressed in terms
of recall and precision(Nagata, 1999). Let the num-
ber of lexemes in the tagged corpus be Std, the num-
ber of lexemes in the output of the analyze be Sys,
and the number of matched lexemes be M. Recall
is defined as M/Std, precision is defined as MISys.
The following are the labels in Table 1 (sentence for-
mats and methods we use):
LXS We isolate all the lexemes in sentences and
apply the method for segmented languages to
the sentences. This situation is ideal, since
the problems we discussed in Section 2 do
not exist. In other words, all the sentences
do not have segmentation ambiguity. We use
the results as the baseline. Example sentence:
&amp;quot;Itu&apos;suMr.uLeeu&apos;supenu.&amp;quot;
NSP We remove all the spaces in sentences and
apply the method for non-segmented lan-
guages to the sentences. Example sentence:
&amp;quot;It &apos; sMr . Lee &apos; spen.&amp;quot;
NOR Sentences are in the original normal format.
We apply the method for non-segmented lan-
guages to the sentences. Example sentence:
&amp;quot;It&apos; suMr .uLee&apos;supen.&amp;quot;
Because of no segmentation ambiguity, &amp;quot;LXS&amp;quot;
performs better than &amp;quot;NSP&amp;quot; and &amp;quot;NOR.&amp;quot; The fol-
lowing are typical example of segmentation errors.
The errors originate from conjunctive ambiguity and
disjunctive ambiguity(Guo, 1997).
conjunctive ambiguity The analyzer recognized
&amp;quot;away,&amp;quot; &amp;quot;ahead,&amp;quot; &amp;quot;anymore,&amp;quot; and &amp;quot;workforce&amp;quot;
as &amp;quot;a way,&amp;quot; &amp;quot;a head,&amp;quot; &amp;quot;any more,&amp;quot; and &amp;quot;work
force,&amp;quot; respectively. In the results of &amp;quot;NSP,&amp;quot; the
number of this type of error is 11,267.
disjunctive ambiguity The analyzer recognized
&amp;quot;a tour,&amp;quot; &amp;quot;a ton,&amp;quot; and &amp;quot;Alaskan or&amp;quot; as &amp;quot;at our,&amp;quot;
&amp;quot;at on,&amp;quot; and &amp;quot;Alaska nor,&amp;quot; respectively. In the
results of &amp;quot;NSP,&amp;quot; the number of this type of er-
ror is 233.
Since only &amp;quot;NSP&amp;quot; has disjunctive ambiguity, &amp;quot;NOR&amp;quot;
performs better than &amp;quot;NSP.&amp;quot; This shows that white
spaces between segments help to decrease segmenta-
tion ambiguity.
Though the proportional difference in accuracy
looks slight between these models, there is a con-
siderable influence in the analysis efficiency. In the
cases of &amp;quot;NSP&amp;quot; and &amp;quot;NOR,&amp;quot; the analyzer may look
up the dictionary from any position in a given sen-
tence, therefore candidates for lexemes increase, and
the analysis time also increase. The results of our
experiments show that the run time of analyses of
&amp;quot;NSP&amp;quot; or &amp;quot;NOR&amp;quot; takes about 4 times more than
that of &amp;quot;LXS.&amp;quot;
</bodyText>
<sectionHeader confidence="0.972534" genericHeader="method">
4 Morpho-fragments: The Building
Blocks
</sectionHeader>
<bodyText confidence="0.99994">
Although segmented languages seemingly have clear
word boundaries, there are problems of further seg-
mentation and rounding up as introduced in Section
2. The naive approach in Section 3 does not work
well. In this section, we propose an efficient and so-
phisticated method to solve the problems by intro-
ducing the concept of morpho-fragments. We also
show that a uniform treatment of segmented and
non-segmented languages is possible without induc-
ing the spurious ambiguity.
</bodyText>
<subsectionHeader confidence="0.966036">
4.1 Definition
</subsectionHeader>
<bodyText confidence="0.9993635">
The morpho-fragments (MFs) of a language is de-
fined as the smallest set of strings of the alphabet
which can compose all lexemes in the dictionary. In
other words, MFs are intermediate units between
</bodyText>
<page confidence="0.982236">
234
</page>
<figure confidence="0.999338857142857">
g,• /Noun (pawn)
• • tv/Noun (shrimp)
ts
0—&apos;frifit-$ /Proper noun (Ebina City)
- &lt; /Verb (walk)
• 3.1/Noun (sidewalk)
0— &apos;;144/Noun (footbridge)
</figure>
<figureCaption confidence="0.999476">
Figure 3: Japanese Trie Structured Dictionary
</figureCaption>
<table confidence="0.999752">
Segmentation POS Tagging Analysis Time
( Recall / Precision ) ( Recall / Precision ) ( Ratio )
LXS 100 96.98 1.0
NSP 99.52 / 99.67 96.52 / 96.69 4.3
NOR 99.87 / 99.91 96.84 / 96.88 4.2
MF 99.88 / 99.93 96.85 / 96.91 1.4
</table>
<tableCaption confidence="0.999846">
Table 1: Results of Experiments
</tableCaption>
<bodyText confidence="0.999972272727273">
characters and lexemes (see Figure 1 and Figure 2).
MFs are well defined tokens which are specialized
for language independent morphological analysis.
For example, in English, all punctuation marks
are MFs. Parts of a token separated by a punctu-
ation mark such as &amp;quot;He,&amp;quot; &amp;quot;s,&amp;quot; and the punctuation
mark itself, &amp;quot; &apos; &amp;quot; in &amp;quot;He&apos;s&amp;quot; are MFs. The tokens in
a compound lexeme such as &amp;quot;New&amp;quot; and &amp;quot;York&amp;quot; in
&amp;quot;New York&amp;quot; are also MFs. In non-segmented lan-
guages such as Chinese and Japanese, every single
character is a MF. Figure 4 shows decomposition of
sentences into MFs (enclosed by &amp;quot;I&amp;quot; and &amp;quot;I&amp;quot;) for sev-
eral languages. Delimiters (denoted &amp;quot;c&amp;quot;) are treated
as special MFs that cannot start nor end a lexeme.
Once the set of MFs is determined, the dictio-
nary is compiled into a trie structure in which the
edges are labeled by MFs, as shown in Figure 5 for
English and in Figure 3 for Japanese. A trie struc-
ture ensures to return all and only possible lexemes
starting at a particular position in a sentence by a
one-time consultation to the dictionary, resulting in
an efficient dictionary look-up with no spurious am-
biguity.
When we analyze a sentence of a non-segmented
language, to get all possible lexemes in the sentence,
the analyzer slides the position one character by
one character from the beginning to the end of the
sentence and consults the trie structured dictionary
(Section 2). Note that every character is a MF in
non-segmented languages. In the same way, to an-
alyze a sentence of a segmented language, the an-
alyzer slides the position one MF by one MF and
consults the trie structured dictionary, then, all pos-
sible lexemes are obtained. For example, in Figure 5,
the results of CPS for &amp;quot;m in ...&amp;quot; are &amp;quot; &amp;quot; and &amp;quot;m,&amp;quot;
and the results for &amp;quot;New York is ...&amp;quot; are &amp;quot;New&amp;quot; and
&amp;quot;New York.&amp;quot;
Therefore, a morphological analyzer with CPS-
based dictionary look-up for non-segmented lan-
guages can be used for the analysis of segmented
languages. In other words, MFs make possible lan-
guage independent morphological analysis. We can
also say MFs specify the positions to start as well as
to end the dictionary look-up.
</bodyText>
<page confidence="0.996441">
235
</page>
<table confidence="0.9397178">
Language Sentence Recognized Morpho-fragments
English I&apos;m in New York. [I][&apos;][m]u[inlu [New] u [York] [ .]
Chinese A1-1. (He is my little brother.) [4thl[AllalA1M11-
Korean 13-42.011 7,1-4. (I go to school.) —• [LI-1 u [MI [0111 u [7,11 [.]
Japanese 1 1.../ 25. (Let&apos;s go to school.)
</table>
<figureCaption confidence="0.999147">
Figure 4: Recognition of Morpho-fragments
</figureCaption>
<figure confidence="0.991969666666667">
I/Pronoun
&apos;/Punctuation
&apos;m/Verb
• &apos;s/Possessive ending
New
• New/Adjective
uYork
•
0-- New_York/Proper noun
</figure>
<figureCaption confidence="0.999739">
Figure 5: English Trie Structured Dictionary
</figureCaption>
<bodyText confidence="0.879487">
rn
</bodyText>
<subsectionHeader confidence="0.997807">
4.2 How to Recognize Morpho-fragments
</subsectionHeader>
<bodyText confidence="0.999868230769231">
The problem is that it is not easy to identify the
complete set of MFs for a segmented language. We
do not make effort to find out the minimum and com-
plete set of MFs. Instead, we decide to specify all
the possible delimiters and punctuation marks ap-
pearing in the dictionary, these may separate MFs
or become themselves as MFs. By specifying the fol-
lowing three kinds of information for the language
under consideration, we attain a pseudo-complete
MF definition. The following setting not only sim-
plifies the identification of MFs but also achieves a
uniform framework of language dependent morpho-
logical analysis system.
</bodyText>
<sectionHeader confidence="0.405899" genericHeader="method">
1. The language type:
</sectionHeader>
<bodyText confidence="0.999548">
The languages are classified into two groups:
segmented and non-segmented languages.
&amp;quot;Language type&amp;quot; decides if every character in
the language can be an MF. In non-segmented
language every character can be an MF. In
segmented language, punctuation marks and
sequences of characters except for delimiters
can be an MF.
</bodyText>
<listItem confidence="0.901578857142857">
2. The set of the delimiters acting as boundaries:
These act as boundaries of MFs. However, these
can not be independent MFs (can not start nor
end a lexeme). For example, white spaces are
delimiters in segmented languages.
3. The set of the punctuation marks and other
symbols:
</listItem>
<bodyText confidence="0.928640555555556">
These act as a boundary of MFs as well as an
MF. Examples are an apostrophe in &amp;quot;It&apos;s,&amp;quot; a
period in &amp;quot;Mr.,&amp;quot; and a hyphen in &amp;quot;F-16.&amp;quot;
• Using these information, the process of recogniz-
ing MFs becomes simple and easy. The process can
be implemented by a finite state machine or a simple
pattern matcher.
The following is the example of the definition for
English:
</bodyText>
<listItem confidence="0.99959175">
1. Language type: segmented language
2. Delimiters: white spaces, tabs, and carriage-
returns
3. Punctuation marks: [.][,][:][;][&apos;][&amp;quot;][-]• • • [0] [1][21- • -
</listItem>
<bodyText confidence="0.9843205">
As is clear from the definition, &amp;quot;punctuation marks&amp;quot;
are not necessary for non-segmented language, since
</bodyText>
<page confidence="0.99422">
236
</page>
<bodyText confidence="0.715983">
every character is an MF. The following is the ex-
ample for Japanese and Chinese.
</bodyText>
<listItem confidence="0.999832666666667">
1. Language type: non-segmented language
2. Delimiters: not required
3. Punctuation marks: not required
</listItem>
<bodyText confidence="0.921986714285714">
Though Korean sentences are separated by spaces
into phrasal segments, Korean is a non-segmented
language essentially, since each phrasal segment does
not have lexeme boundaries. We call this type of lan-
guages incompletely-segmented languages. German
is also categorized as this type. The following is the
example for Korean.
</bodyText>
<listItem confidence="0.999791666666667">
1. Language type: non-segmented language
2. Delimiters: spaces, tabs, and carriage-returns
3. Punctuation marks: not required
</listItem>
<bodyText confidence="0.999963590909091">
In incompletely-segmented languages, such as Ko-
rean, we have to consider two types of connection of
lexemes, one is &amp;quot;over a delimiter&amp;quot; and the other is
&amp;quot;inside a segment&amp;quot; (Hirano and Matsumoto, 1996).
If we regard delimiters as lexemes, a trigram model
can make it possible to treat both types.
The definition gives possible starting positions of
MFs in sentences of the language and the same
morphological analysis system is usable for any lan-
guage.
We examined an effect of applying the morpho-
fragments to analysis. Conditions of the experiment
are almost the same as &amp;quot;NOR.&amp;quot; The difference is
that we use the morpho-fragments definition for En-
glish. The row labeled &amp;quot;MF&amp;quot; in Table 1 shows the
results of the analysis. Using the morpho-fragments
decreases the analysis time drastically. The accuracy
is also better than those of the naive approaches.
Well studied language such as English may have
a hand tuned tokenizer which is superior to ours.
However, to tune a tokenizer by hand is not suitable
to implement many minor languages.
</bodyText>
<subsectionHeader confidence="0.99603">
4.3 Implementation
</subsectionHeader>
<bodyText confidence="0.999970333333333">
We implement a language independent morphologi-
cal analysis system based on the concept of morpho-
fragments(Yamashita, 1999). With an existence of
tagged corpus, it is straightforward to implement
part-of-speech taggers. We have implemented sev-
eral of such taggers. The system uses an HMM.
This is trained by a part-of-speech tagged corpus.
We overview the setting and performance of tagging
for several languages.
</bodyText>
<subsectionHeader confidence="0.416386">
English
</subsectionHeader>
<bodyText confidence="0.96698">
An HMM is trained by the part-of-speech
tagged corpus part of Penn Treebank(Santorini,
1990) (1.3 million morphemes). We use a tri-
gram model. The lexemes in the dictionary are
taken from the corpus as well as from the en-
try words in Oxford Advanced Learner&apos;s Dictio-
nary(Mitton, 1992). The system achieves 97%
precision and recall for training data, 95% pre-
cision and recall for test data.
Japanese
An HMM is trained by Japanese part-of-speech
tagged corpus(Rea, 1998) (0.9 million mor-
phemes). We use a trigram model. The
lexemes in the dictionary are taken from the
corpus as well as from the dictionary of
ChaSen(Matsumoto et al., 1999), a freely avail-
able Japanese morphological analyzer. The sys-
tem achieves 97% precision and recall for train-
ing and test data.
</bodyText>
<sectionHeader confidence="0.541397" genericHeader="method">
Chinese
</sectionHeader>
<bodyText confidence="0.99961425">
An HMM is trained by the Chinese part-of-
speech tagged corpus released by CKIP(Chinese
Knowledge Information Processing Group,
1995) (2.1 million morphemes). We use a bi-
gram model. The lexemes in the dictionary
are taken only from the corpus. The system
achieves 95% precision and recall for training
data, 91% precision and recall for test data.
</bodyText>
<sectionHeader confidence="0.999691" genericHeader="conclusions">
5 Related Work and Remarks
</sectionHeader>
<bodyText confidence="0.999544388888889">
We address two problems of tokenization in seg-
mented languages: further segmentation and round-
up. These problems are discussed by several authors
including Mills(Mills, 1998) Webster &amp; Kit(Webster
and Kit, 1992). However, their proposed solutions
are not language independent.
To resolve the problems of tokenization, we first
apply the method of non-segmented languages pro-
cessing. However, this causes spurious segmenta-
tion ambiguity and a considerable influence in the
analysis times. Therefore, we propose the concept
of morpho-fragments that minimally comprises the
lexemes in a language. Although the idea is quite
simple, our approach avoids spurious ambiguity and
attains an efficient look-up of a trie structured dic-
tionary. In conclusion, the concept of morpho-
fragments makes it easy to implemented language
independent morphological analysis.
</bodyText>
<sectionHeader confidence="0.996667" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.9927559">
Chinese Knowledge Information Processing Group,
1995. rti PLR reg 7?&amp;quot; 04 MM.
Academia Sinica Institute of Information Science.
in Chinese.
Christopher Fox, 1992. Lexical Analysis and Sto-
plists, chapter 7, pages 102-130. In Frakes and
Baeza-Yates (Frakes and Baeza-Yates, 1992).
William B. Frakes and Ricardo A. Baeza-Yates, ed-
itors. 1992. Information Retrieval: Data Struc-
tures &amp; Algorithms. Prentice-Hall.
</reference>
<page confidence="0.962389">
237
</page>
<reference confidence="0.988644212121212">
Edward Fredkin. 1960. Trie memory. Communica-
tions of the ACM, 3(9):490-500, September.
Jin Guo. 1997. Critical tokenization and its prop-
erties. Computational Linguistics, 23(4):569-596,
December.
Yoshitaka Hirano and Yuji Matsumoto. 1996. A
proposal of korean conjugation system and its ap-
plication to morphological analysis. In Proceed-
ings of the 11th Pacific Asia Conference on Lan-
guage, Information and Computation (PA CLIC
11), pages 229-236, December.
Donald E. Knuth. 1998. The Art of Computer Pro-
gramming : Sorting and Searching, volume 3.
Addison-Wesley, second edition, May.
Henry Ktfeera and W. Nelson Francis. 1967. Com-
putational Analysis of Present-Day American En-
glish. Brown University Press.
Christopher D. Manning and Hinrich Schiitze. 1999.
Foundations of Statistical Natural Language Pro-
cessing. The MIT Press.
Yuji Matsumoto, Akira Kitauchi, Tatsuo Yamashita,
and Yoshitaka Hirano, 1999. Japanese Mor-
phological Analysis System ChaSen version 2.0
Manual. NAIST Technical Report NAIST-IS-
TR99009, April.
Jon Mills. 1998. Lexicon based critical tokenization:
An algorithm. In Euralex&apos;98, pages 213-220, Au-
gust.
Roger Mitton, 1992. A Description of A Computer-
Usable Dictionary File Based on The Oxford Ad-
vanced Learner&apos;s Dictionary of Current English.
K. Morimoto and J. Aoe. 1993. Two trie structures
for natural language dictionaries. In Proceedings
of Natural Language Processing Pacific Rim Sym-
posium, pages 302-311.
Masaaki Nagata. 1994. A stochastic japanese mor-
phological analyzer using a forward-dp backward-
a* n-best search algorithm. In COLING-94, vol-
ume 1, pages 201-207, August.
Masaaki Nagata. 1999. A part of speech estimation
method for japanese unknown words using a sta-
tistical model of morphology and context. In 37th
Annual Meeting of the Association for Computa-
tional Linguistics, Proceedings of the Conference,
pages 277-284, June.
David D. Palmer and Marti A. Hearst. 1997. Adap-
tive multilingual sentence boundary disambigua-
tion. Computational Linguistics, 23(2):241-267,
June.
Real World Computing Partnership, 1998. RWC
Text Database Report. in Japanese.
Beatrice Santorini, 1990. Part-of-Speech Tagging
Guidelines for the Penn Treebank Project (3rd Re-
vision, 2nd printing), June.
Jonathan J. Webster and Chunyu Kit. 1992. Tok-
enization as the initial phase in nlp. In COLING-
92, volume 4, pages 1106-1110, August.
Tatsuo Yamashita, 1999. MOZ and LimaTK Man-
ual. NAIST Computational Linguistics Labora-
tory, &lt;http: / /c1. aist- nara. ac .jpr tatuo-y/ ma/ &gt; ,
August. in Japanese.
Tatsuo Ymashita, Msakazu Fujio, and Yuji Mat-
sumoto. 1999. Language independent tools for
natural language processing. In Proceedings of the
Eighteenth International Conference on Computer
Processing, pages 237-240, March.
</reference>
<page confidence="0.997067">
238
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.470271">
<title confidence="0.999105">Language Independent Morphological Analysis</title>
<author confidence="0.94597">Tatsuo Yamashita</author>
<author confidence="0.94597">Yuji Matsumoto</author>
<affiliation confidence="0.9984455">Graduate School of Information Science Nara Institute of Science and Technology</affiliation>
<email confidence="0.50172">tatuo-yOis.aist-nara.ac.jp</email>
<email confidence="0.50172">matsuOis.aist-nara.ac.jp</email>
<abstract confidence="0.999580538461539">This paper proposes a framework of language independent morphological analysis and mainly concentrate on tokenization, the first process of morphological analysis. Although tokenization is usually not regarded as a difficult task in most segmented languages such as English, there are a number of problems in achieving precise treatment of lexical entries. We first introduce the concept of morpho-fragments, which are intermediate units between characters and lexical entries. We describe our approach to resolve problems arising in tokenization so as to attain a language independent morphological analyzer.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<title>Chinese Knowledge Information Processing Group,</title>
<date>1995</date>
<note>in Chinese.</note>
<marker>1995</marker>
<rawString>Chinese Knowledge Information Processing Group, 1995. rti PLR reg 7?&amp;quot; 04 MM. Academia Sinica Institute of Information Science. in Chinese.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Christopher Fox</author>
</authors>
<title>Lexical Analysis and Stoplists, chapter 7,</title>
<date>1992</date>
<booktitle>In Frakes and Baeza-Yates (Frakes and Baeza-Yates,</booktitle>
<pages>102--130</pages>
<contexts>
<context position="6394" citStr="Fox, 1992" startWordPosition="989" endWordPosition="991">ald / Proper noun&amp;quot; + &amp;quot;&apos;s / Possessive ending&amp;quot; or &amp;quot;McDonald&apos;s / Proper noun (company name)&amp;quot;. In addition, &amp;quot;boys&apos; &amp;quot; in a sentence &amp;quot;... the boys&apos; toys ...&amp;quot; is ambiguous. The string can be segmented into either &amp;quot;boys&apos; / Plural possessive&amp;quot; or &amp;quot;boys / Plural Noun&amp;quot; + &amp;quot; &apos; / Punctuation (the end of a quotation)&amp;quot; (Manning and Schiitze, 1999). If a hyphenated segment such as &amp;quot;data-base,&amp;quot; &amp;quot;F-16,&amp;quot; or &amp;quot;MS-DOS&amp;quot; exists in the dictionary, it should be an independent lexeme. However, if a hyphenated segment such as &amp;quot;55-years-old&amp;quot; does not exist in the dictionary, hyphens should be treated as independent tokens(Fox, 1992). Other punctuation marks such as &amp;quot;/&amp;quot; or &amp;quot;_&amp;quot; have the same problem in &amp;quot;OS/2&amp;quot; or &amp;quot;max_size&amp;quot; (in programming languages). 2. Round-up(several segments into one lexeme): If a lexeme consisting of a sequence of segments such as a proper noun (e.g., &amp;quot;New York&amp;quot;) or a phrasal verb (e.g., &amp;quot;look at&amp;quot; and &amp;quot;get up&amp;quot;) exists in the dictionary, it should be a lexeme. To handle such lexemes, we need to store multisegment lexemes in the dictionary. Webster and Kit handle idioms and fixed expressions in this way(Webster and Kit, 1992). In Penn Treebank(Santorini, 1990), a proper noun like &amp;quot;New York&amp;quot; is defined a</context>
</contexts>
<marker>Fox, 1992</marker>
<rawString>Christopher Fox, 1992. Lexical Analysis and Stoplists, chapter 7, pages 102-130. In Frakes and Baeza-Yates (Frakes and Baeza-Yates, 1992).</rawString>
</citation>
<citation valid="true">
<authors>
<author>William B Frakes</author>
<author>A Ricardo</author>
</authors>
<date>1992</date>
<booktitle>Information Retrieval: Data Structures &amp; Algorithms.</booktitle>
<editor>Baeza-Yates, editors.</editor>
<publisher>Prentice-Hall.</publisher>
<marker>Frakes, Ricardo, 1992</marker>
<rawString>William B. Frakes and Ricardo A. Baeza-Yates, editors. 1992. Information Retrieval: Data Structures &amp; Algorithms. Prentice-Hall.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Edward Fredkin</author>
</authors>
<title>Trie memory.</title>
<date>1960</date>
<journal>Communications of the ACM,</journal>
<pages>3--9</pages>
<contexts>
<context position="8137" citStr="Fredkin, 1960" startWordPosition="1267" endWordPosition="1269">rom each position in the sentence, checks whether each prefix matches the lexeme in the dictionary, stores these lexemes in a graph structure, and finds the most plausible sequence of lexemes in the graph structure. To find the sequence, Nagata proposed a probabilistic language model for non-segmented languages(Nagata, 1994)(Nagata, 1999). The crucial difference between segmented and 233 non-segmented languages in the process of morphological analysis appears in the way of the dictionary look-up. The standard technique for looking up lexemes in Japanese dictionaries is to use a trie structure(Fredkin, 1960)(Knuth, 1998). A trie structured dictionary gives all possible lexemes that start at a given position in a sentence effectively(Morimoto and Aoe, 1993). We call this method of word looking-up as &amp;quot;common prefix search&amp;quot; (hereafter CPS). Figure 3 shows a part of the trie for Japanese lexeme dictionary. The results of CPS for &amp;quot;i4Ati. ft&lt; &amp;quot;(I go to Ebina.) are &amp;quot;it&amp;quot; and &amp;quot;i4ti.&amp;quot; To get all possible lexemes in the sentence, the analyzer has to slide the start position for CPS to the right by character by character. 3 A Naive Approach A simple method that directly applies the morphological analysis met</context>
</contexts>
<marker>Fredkin, 1960</marker>
<rawString>Edward Fredkin. 1960. Trie memory. Communications of the ACM, 3(9):490-500, September.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jin Guo</author>
</authors>
<title>Critical tokenization and its properties.</title>
<date>1997</date>
<journal>Computational Linguistics,</journal>
<pages>23--4</pages>
<contexts>
<context position="10944" citStr="Guo, 1997" startWordPosition="1735" endWordPosition="1736"> use the results as the baseline. Example sentence: &amp;quot;Itu&apos;suMr.uLeeu&apos;supenu.&amp;quot; NSP We remove all the spaces in sentences and apply the method for non-segmented languages to the sentences. Example sentence: &amp;quot;It &apos; sMr . Lee &apos; spen.&amp;quot; NOR Sentences are in the original normal format. We apply the method for non-segmented languages to the sentences. Example sentence: &amp;quot;It&apos; suMr .uLee&apos;supen.&amp;quot; Because of no segmentation ambiguity, &amp;quot;LXS&amp;quot; performs better than &amp;quot;NSP&amp;quot; and &amp;quot;NOR.&amp;quot; The following are typical example of segmentation errors. The errors originate from conjunctive ambiguity and disjunctive ambiguity(Guo, 1997). conjunctive ambiguity The analyzer recognized &amp;quot;away,&amp;quot; &amp;quot;ahead,&amp;quot; &amp;quot;anymore,&amp;quot; and &amp;quot;workforce&amp;quot; as &amp;quot;a way,&amp;quot; &amp;quot;a head,&amp;quot; &amp;quot;any more,&amp;quot; and &amp;quot;work force,&amp;quot; respectively. In the results of &amp;quot;NSP,&amp;quot; the number of this type of error is 11,267. disjunctive ambiguity The analyzer recognized &amp;quot;a tour,&amp;quot; &amp;quot;a ton,&amp;quot; and &amp;quot;Alaskan or&amp;quot; as &amp;quot;at our,&amp;quot; &amp;quot;at on,&amp;quot; and &amp;quot;Alaska nor,&amp;quot; respectively. In the results of &amp;quot;NSP,&amp;quot; the number of this type of error is 233. Since only &amp;quot;NSP&amp;quot; has disjunctive ambiguity, &amp;quot;NOR&amp;quot; performs better than &amp;quot;NSP.&amp;quot; This shows that white spaces between segments help to decrease segmentation ambiguity. Though</context>
</contexts>
<marker>Guo, 1997</marker>
<rawString>Jin Guo. 1997. Critical tokenization and its properties. Computational Linguistics, 23(4):569-596, December.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yoshitaka Hirano</author>
<author>Yuji Matsumoto</author>
</authors>
<title>A proposal of korean conjugation system and its application to morphological analysis.</title>
<date>1996</date>
<booktitle>In Proceedings of the 11th Pacific Asia Conference on Language, Information and Computation (PA CLIC 11),</booktitle>
<pages>229--236</pages>
<contexts>
<context position="18513" citStr="Hirano and Matsumoto, 1996" startWordPosition="2988" endWordPosition="2991">are separated by spaces into phrasal segments, Korean is a non-segmented language essentially, since each phrasal segment does not have lexeme boundaries. We call this type of languages incompletely-segmented languages. German is also categorized as this type. The following is the example for Korean. 1. Language type: non-segmented language 2. Delimiters: spaces, tabs, and carriage-returns 3. Punctuation marks: not required In incompletely-segmented languages, such as Korean, we have to consider two types of connection of lexemes, one is &amp;quot;over a delimiter&amp;quot; and the other is &amp;quot;inside a segment&amp;quot; (Hirano and Matsumoto, 1996). If we regard delimiters as lexemes, a trigram model can make it possible to treat both types. The definition gives possible starting positions of MFs in sentences of the language and the same morphological analysis system is usable for any language. We examined an effect of applying the morphofragments to analysis. Conditions of the experiment are almost the same as &amp;quot;NOR.&amp;quot; The difference is that we use the morpho-fragments definition for English. The row labeled &amp;quot;MF&amp;quot; in Table 1 shows the results of the analysis. Using the morpho-fragments decreases the analysis time drastically. The accuracy</context>
</contexts>
<marker>Hirano, Matsumoto, 1996</marker>
<rawString>Yoshitaka Hirano and Yuji Matsumoto. 1996. A proposal of korean conjugation system and its application to morphological analysis. In Proceedings of the 11th Pacific Asia Conference on Language, Information and Computation (PA CLIC 11), pages 229-236, December.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Donald E Knuth</author>
</authors>
<title>The Art of Computer Programming : Sorting and Searching,</title>
<date>1998</date>
<volume>3</volume>
<note>Addison-Wesley, second edition,</note>
<contexts>
<context position="8150" citStr="Knuth, 1998" startWordPosition="1269" endWordPosition="1270">on in the sentence, checks whether each prefix matches the lexeme in the dictionary, stores these lexemes in a graph structure, and finds the most plausible sequence of lexemes in the graph structure. To find the sequence, Nagata proposed a probabilistic language model for non-segmented languages(Nagata, 1994)(Nagata, 1999). The crucial difference between segmented and 233 non-segmented languages in the process of morphological analysis appears in the way of the dictionary look-up. The standard technique for looking up lexemes in Japanese dictionaries is to use a trie structure(Fredkin, 1960)(Knuth, 1998). A trie structured dictionary gives all possible lexemes that start at a given position in a sentence effectively(Morimoto and Aoe, 1993). We call this method of word looking-up as &amp;quot;common prefix search&amp;quot; (hereafter CPS). Figure 3 shows a part of the trie for Japanese lexeme dictionary. The results of CPS for &amp;quot;i4Ati. ft&lt; &amp;quot;(I go to Ebina.) are &amp;quot;it&amp;quot; and &amp;quot;i4ti.&amp;quot; To get all possible lexemes in the sentence, the analyzer has to slide the start position for CPS to the right by character by character. 3 A Naive Approach A simple method that directly applies the morphological analysis method for non-s</context>
</contexts>
<marker>Knuth, 1998</marker>
<rawString>Donald E. Knuth. 1998. The Art of Computer Programming : Sorting and Searching, volume 3. Addison-Wesley, second edition, May.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Henry Ktfeera</author>
<author>W Nelson Francis</author>
</authors>
<title>Computational Analysis of Present-Day American English.</title>
<date>1967</date>
<publisher>Brown University Press.</publisher>
<marker>Ktfeera, Francis, 1967</marker>
<rawString>Henry Ktfeera and W. Nelson Francis. 1967. Computational Analysis of Present-Day American English. Brown University Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Christopher D Manning</author>
<author>Hinrich Schiitze</author>
</authors>
<title>Foundations of Statistical Natural Language Processing.</title>
<date>1999</date>
<publisher>The MIT Press.</publisher>
<contexts>
<context position="2641" citStr="Manning and Schiitze, 1999" startWordPosition="394" endWordPosition="397">rategy for tokenization. We call a string defined in the dictionary lexeme. From an algorithmic point of view, tokenization is regarded as the process of converting an input stream of characters into a stream of lexemes. We assume that a morphological analysis consists of three processes: tokenization, dictionary lookup, and disambiguation. Dictionary look-up gets a string and returns a set of lexemes with part-ofspeech information. This implicitly contains lemmatization. Disambiguation selects the most plausible sequence of lexemes by a use of a rule-base model or a hidden Markov model (HMM)(Manning and Schiitze, 1999). Disambiguation is already language independent, since it does not process strings directly and therefore will not be taken up. On the other hand, tokenization and dictionary look-up are language dependent and shall be explained more in this paper. We consider problems concerning tokenization of segmented languages in Section 2. To resolve these problem, we first apply the method of nonsegmented languages processing to segmented languages (Section 3). However, we do not obtain a satisfactory result. Then, we introduce the concept of morpho-fragments to generalize the method of non-segmented l</context>
<context position="6117" citStr="Manning and Schiitze, 1999" startWordPosition="944" endWordPosition="947">an abbreviation, the end of a sentence, or both. The problem of sentence boundary ambiguity is not easy to solve (Palmer and Hearst, 1997). A segment with an apostrophe also has segmentation ambiguity. For example, &amp;quot;McDonald&apos;s&amp;quot; is ambiguous since this string can be segmented into either &amp;quot;McDonald / Proper noun&amp;quot; + &amp;quot;&apos;s / Possessive ending&amp;quot; or &amp;quot;McDonald&apos;s / Proper noun (company name)&amp;quot;. In addition, &amp;quot;boys&apos; &amp;quot; in a sentence &amp;quot;... the boys&apos; toys ...&amp;quot; is ambiguous. The string can be segmented into either &amp;quot;boys&apos; / Plural possessive&amp;quot; or &amp;quot;boys / Plural Noun&amp;quot; + &amp;quot; &apos; / Punctuation (the end of a quotation)&amp;quot; (Manning and Schiitze, 1999). If a hyphenated segment such as &amp;quot;data-base,&amp;quot; &amp;quot;F-16,&amp;quot; or &amp;quot;MS-DOS&amp;quot; exists in the dictionary, it should be an independent lexeme. However, if a hyphenated segment such as &amp;quot;55-years-old&amp;quot; does not exist in the dictionary, hyphens should be treated as independent tokens(Fox, 1992). Other punctuation marks such as &amp;quot;/&amp;quot; or &amp;quot;_&amp;quot; have the same problem in &amp;quot;OS/2&amp;quot; or &amp;quot;max_size&amp;quot; (in programming languages). 2. Round-up(several segments into one lexeme): If a lexeme consisting of a sequence of segments such as a proper noun (e.g., &amp;quot;New York&amp;quot;) or a phrasal verb (e.g., &amp;quot;look at&amp;quot; and &amp;quot;get up&amp;quot;) exists in the dict</context>
</contexts>
<marker>Manning, Schiitze, 1999</marker>
<rawString>Christopher D. Manning and Hinrich Schiitze. 1999. Foundations of Statistical Natural Language Processing. The MIT Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yuji Matsumoto</author>
<author>Akira Kitauchi</author>
<author>Tatsuo Yamashita</author>
<author>Yoshitaka Hirano</author>
</authors>
<title>Japanese Morphological Analysis System ChaSen version 2.0 Manual.</title>
<date>1999</date>
<tech>NAIST Technical Report NAIST-ISTR99009,</tech>
<contexts>
<context position="20427" citStr="Matsumoto et al., 1999" startWordPosition="3299" endWordPosition="3302">ned by the part-of-speech tagged corpus part of Penn Treebank(Santorini, 1990) (1.3 million morphemes). We use a trigram model. The lexemes in the dictionary are taken from the corpus as well as from the entry words in Oxford Advanced Learner&apos;s Dictionary(Mitton, 1992). The system achieves 97% precision and recall for training data, 95% precision and recall for test data. Japanese An HMM is trained by Japanese part-of-speech tagged corpus(Rea, 1998) (0.9 million morphemes). We use a trigram model. The lexemes in the dictionary are taken from the corpus as well as from the dictionary of ChaSen(Matsumoto et al., 1999), a freely available Japanese morphological analyzer. The system achieves 97% precision and recall for training and test data. Chinese An HMM is trained by the Chinese part-ofspeech tagged corpus released by CKIP(Chinese Knowledge Information Processing Group, 1995) (2.1 million morphemes). We use a bigram model. The lexemes in the dictionary are taken only from the corpus. The system achieves 95% precision and recall for training data, 91% precision and recall for test data. 5 Related Work and Remarks We address two problems of tokenization in segmented languages: further segmentation and rou</context>
</contexts>
<marker>Matsumoto, Kitauchi, Yamashita, Hirano, 1999</marker>
<rawString>Yuji Matsumoto, Akira Kitauchi, Tatsuo Yamashita, and Yoshitaka Hirano, 1999. Japanese Morphological Analysis System ChaSen version 2.0 Manual. NAIST Technical Report NAIST-ISTR99009, April.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jon Mills</author>
</authors>
<title>Lexicon based critical tokenization: An algorithm.</title>
<date>1998</date>
<booktitle>In Euralex&apos;98,</booktitle>
<pages>213--220</pages>
<contexts>
<context position="9260" citStr="Mills, 1998" startWordPosition="1456" endWordPosition="1457">. 3 A Naive Approach A simple method that directly applies the morphological analysis method for non-segmented languages can handle the problems of segmented languages. For instance, to analyze the sentence, &amp;quot;They&apos;ve gone to school together,&amp;quot; we first delete all white spaces in the sentence and get &amp;quot;They&apos;vegonetoschooltogether.&amp;quot; Then we pass it to the analyzer for non-segmented languages. However, the analyzer may return the result as &amp;quot;They / &apos;ve / gone / to / school / to / get / her / .&amp;quot; inducing a spurious ambiguity. Mills applied this method and tokenized the medieval manuscript in Cornish(Mills, 1998). We carried out experiments to examine the influence of delimiter deletion. We use Penn Treebank(Santorini, 1990) part-of-speech tagged corpus (1.3M lexemes) to train an HMM and analyze sentences by HMM-based morphological analyzer MOZ(Yamashita, 1999)(Ymashita et al., 1999). We use a bigram model for training it from the corpus. Test data is the same as the training corpus. Table 1 shows accuracy of segmentation and part-ofspeech tagging. The accuracy is expressed in terms of recall and precision(Nagata, 1999). Let the number of lexemes in the tagged corpus be Std, the number of lexemes in t</context>
<context position="21109" citStr="Mills, 1998" startWordPosition="3409" endWordPosition="3410">ves 97% precision and recall for training and test data. Chinese An HMM is trained by the Chinese part-ofspeech tagged corpus released by CKIP(Chinese Knowledge Information Processing Group, 1995) (2.1 million morphemes). We use a bigram model. The lexemes in the dictionary are taken only from the corpus. The system achieves 95% precision and recall for training data, 91% precision and recall for test data. 5 Related Work and Remarks We address two problems of tokenization in segmented languages: further segmentation and roundup. These problems are discussed by several authors including Mills(Mills, 1998) Webster &amp; Kit(Webster and Kit, 1992). However, their proposed solutions are not language independent. To resolve the problems of tokenization, we first apply the method of non-segmented languages processing. However, this causes spurious segmentation ambiguity and a considerable influence in the analysis times. Therefore, we propose the concept of morpho-fragments that minimally comprises the lexemes in a language. Although the idea is quite simple, our approach avoids spurious ambiguity and attains an efficient look-up of a trie structured dictionary. In conclusion, the concept of morphofrag</context>
</contexts>
<marker>Mills, 1998</marker>
<rawString>Jon Mills. 1998. Lexicon based critical tokenization: An algorithm. In Euralex&apos;98, pages 213-220, August.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Roger Mitton</author>
</authors>
<title>A Description of A ComputerUsable Dictionary File Based on The Oxford Advanced Learner&apos;s Dictionary of Current English.</title>
<date>1992</date>
<contexts>
<context position="20073" citStr="Mitton, 1992" startWordPosition="3241" endWordPosition="3243">orphofragments(Yamashita, 1999). With an existence of tagged corpus, it is straightforward to implement part-of-speech taggers. We have implemented several of such taggers. The system uses an HMM. This is trained by a part-of-speech tagged corpus. We overview the setting and performance of tagging for several languages. English An HMM is trained by the part-of-speech tagged corpus part of Penn Treebank(Santorini, 1990) (1.3 million morphemes). We use a trigram model. The lexemes in the dictionary are taken from the corpus as well as from the entry words in Oxford Advanced Learner&apos;s Dictionary(Mitton, 1992). The system achieves 97% precision and recall for training data, 95% precision and recall for test data. Japanese An HMM is trained by Japanese part-of-speech tagged corpus(Rea, 1998) (0.9 million morphemes). We use a trigram model. The lexemes in the dictionary are taken from the corpus as well as from the dictionary of ChaSen(Matsumoto et al., 1999), a freely available Japanese morphological analyzer. The system achieves 97% precision and recall for training and test data. Chinese An HMM is trained by the Chinese part-ofspeech tagged corpus released by CKIP(Chinese Knowledge Information Pro</context>
</contexts>
<marker>Mitton, 1992</marker>
<rawString>Roger Mitton, 1992. A Description of A ComputerUsable Dictionary File Based on The Oxford Advanced Learner&apos;s Dictionary of Current English.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Morimoto</author>
<author>J Aoe</author>
</authors>
<title>Two trie structures for natural language dictionaries.</title>
<date>1993</date>
<booktitle>In Proceedings of Natural Language Processing Pacific Rim Symposium,</booktitle>
<pages>302--311</pages>
<contexts>
<context position="8288" citStr="Morimoto and Aoe, 1993" startWordPosition="1288" endWordPosition="1291"> and finds the most plausible sequence of lexemes in the graph structure. To find the sequence, Nagata proposed a probabilistic language model for non-segmented languages(Nagata, 1994)(Nagata, 1999). The crucial difference between segmented and 233 non-segmented languages in the process of morphological analysis appears in the way of the dictionary look-up. The standard technique for looking up lexemes in Japanese dictionaries is to use a trie structure(Fredkin, 1960)(Knuth, 1998). A trie structured dictionary gives all possible lexemes that start at a given position in a sentence effectively(Morimoto and Aoe, 1993). We call this method of word looking-up as &amp;quot;common prefix search&amp;quot; (hereafter CPS). Figure 3 shows a part of the trie for Japanese lexeme dictionary. The results of CPS for &amp;quot;i4Ati. ft&lt; &amp;quot;(I go to Ebina.) are &amp;quot;it&amp;quot; and &amp;quot;i4ti.&amp;quot; To get all possible lexemes in the sentence, the analyzer has to slide the start position for CPS to the right by character by character. 3 A Naive Approach A simple method that directly applies the morphological analysis method for non-segmented languages can handle the problems of segmented languages. For instance, to analyze the sentence, &amp;quot;They&apos;ve gone to school together</context>
</contexts>
<marker>Morimoto, Aoe, 1993</marker>
<rawString>K. Morimoto and J. Aoe. 1993. Two trie structures for natural language dictionaries. In Proceedings of Natural Language Processing Pacific Rim Symposium, pages 302-311.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Masaaki Nagata</author>
</authors>
<title>A stochastic japanese morphological analyzer using a forward-dp backwarda* n-best search algorithm.</title>
<date>1994</date>
<booktitle>In COLING-94,</booktitle>
<volume>1</volume>
<pages>201--207</pages>
<contexts>
<context position="7849" citStr="Nagata, 1994" startWordPosition="1224" endWordPosition="1225"> enough to deal with language independent tokenization. Non-segmented languages do not have a delimiter between lexemes (Figure 2). Therefore, a treatment of further segmentation and rounding up has been well considered. In a non-segmented language, the analyzer considers all prefixes from each position in the sentence, checks whether each prefix matches the lexeme in the dictionary, stores these lexemes in a graph structure, and finds the most plausible sequence of lexemes in the graph structure. To find the sequence, Nagata proposed a probabilistic language model for non-segmented languages(Nagata, 1994)(Nagata, 1999). The crucial difference between segmented and 233 non-segmented languages in the process of morphological analysis appears in the way of the dictionary look-up. The standard technique for looking up lexemes in Japanese dictionaries is to use a trie structure(Fredkin, 1960)(Knuth, 1998). A trie structured dictionary gives all possible lexemes that start at a given position in a sentence effectively(Morimoto and Aoe, 1993). We call this method of word looking-up as &amp;quot;common prefix search&amp;quot; (hereafter CPS). Figure 3 shows a part of the trie for Japanese lexeme dictionary. The results</context>
</contexts>
<marker>Nagata, 1994</marker>
<rawString>Masaaki Nagata. 1994. A stochastic japanese morphological analyzer using a forward-dp backwarda* n-best search algorithm. In COLING-94, volume 1, pages 201-207, August.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Masaaki Nagata</author>
</authors>
<title>A part of speech estimation method for japanese unknown words using a statistical model of morphology and context.</title>
<date>1999</date>
<booktitle>In 37th Annual Meeting of the Association for Computational Linguistics, Proceedings of the Conference,</booktitle>
<pages>277--284</pages>
<contexts>
<context position="7863" citStr="Nagata, 1999" startWordPosition="1225" endWordPosition="1226">l with language independent tokenization. Non-segmented languages do not have a delimiter between lexemes (Figure 2). Therefore, a treatment of further segmentation and rounding up has been well considered. In a non-segmented language, the analyzer considers all prefixes from each position in the sentence, checks whether each prefix matches the lexeme in the dictionary, stores these lexemes in a graph structure, and finds the most plausible sequence of lexemes in the graph structure. To find the sequence, Nagata proposed a probabilistic language model for non-segmented languages(Nagata, 1994)(Nagata, 1999). The crucial difference between segmented and 233 non-segmented languages in the process of morphological analysis appears in the way of the dictionary look-up. The standard technique for looking up lexemes in Japanese dictionaries is to use a trie structure(Fredkin, 1960)(Knuth, 1998). A trie structured dictionary gives all possible lexemes that start at a given position in a sentence effectively(Morimoto and Aoe, 1993). We call this method of word looking-up as &amp;quot;common prefix search&amp;quot; (hereafter CPS). Figure 3 shows a part of the trie for Japanese lexeme dictionary. The results of CPS for &amp;quot;i</context>
<context position="9777" citStr="Nagata, 1999" startWordPosition="1540" endWordPosition="1541">biguity. Mills applied this method and tokenized the medieval manuscript in Cornish(Mills, 1998). We carried out experiments to examine the influence of delimiter deletion. We use Penn Treebank(Santorini, 1990) part-of-speech tagged corpus (1.3M lexemes) to train an HMM and analyze sentences by HMM-based morphological analyzer MOZ(Yamashita, 1999)(Ymashita et al., 1999). We use a bigram model for training it from the corpus. Test data is the same as the training corpus. Table 1 shows accuracy of segmentation and part-ofspeech tagging. The accuracy is expressed in terms of recall and precision(Nagata, 1999). Let the number of lexemes in the tagged corpus be Std, the number of lexemes in the output of the analyze be Sys, and the number of matched lexemes be M. Recall is defined as M/Std, precision is defined as MISys. The following are the labels in Table 1 (sentence formats and methods we use): LXS We isolate all the lexemes in sentences and apply the method for segmented languages to the sentences. This situation is ideal, since the problems we discussed in Section 2 do not exist. In other words, all the sentences do not have segmentation ambiguity. We use the results as the baseline. Example s</context>
</contexts>
<marker>Nagata, 1999</marker>
<rawString>Masaaki Nagata. 1999. A part of speech estimation method for japanese unknown words using a statistical model of morphology and context. In 37th Annual Meeting of the Association for Computational Linguistics, Proceedings of the Conference, pages 277-284, June.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David D Palmer</author>
<author>Marti A Hearst</author>
</authors>
<title>Adaptive multilingual sentence boundary disambiguation.</title>
<date>1997</date>
<journal>Computational Linguistics,</journal>
<pages>23--2</pages>
<contexts>
<context position="5628" citStr="Palmer and Hearst, 1997" startWordPosition="858" endWordPosition="861">d searches the dictionary for these graphic words. However, in practice, we want a sequence of lexemes (see the line labeled &amp;quot;Lexemes&amp;quot; in Figure 1). We list two major problems of tokenization in segmented languages below (examples in English). We use the term segment to refer to a string separated by white spaces. 1. Segmentation(one segment into several lexemes): Segments with a period at the end (e.g, &amp;quot;Calif.&amp;quot; and &amp;quot;etc.&amp;quot;) suffer from segmentation ambiguity. The period can denote an abbreviation, the end of a sentence, or both. The problem of sentence boundary ambiguity is not easy to solve (Palmer and Hearst, 1997). A segment with an apostrophe also has segmentation ambiguity. For example, &amp;quot;McDonald&apos;s&amp;quot; is ambiguous since this string can be segmented into either &amp;quot;McDonald / Proper noun&amp;quot; + &amp;quot;&apos;s / Possessive ending&amp;quot; or &amp;quot;McDonald&apos;s / Proper noun (company name)&amp;quot;. In addition, &amp;quot;boys&apos; &amp;quot; in a sentence &amp;quot;... the boys&apos; toys ...&amp;quot; is ambiguous. The string can be segmented into either &amp;quot;boys&apos; / Plural possessive&amp;quot; or &amp;quot;boys / Plural Noun&amp;quot; + &amp;quot; &apos; / Punctuation (the end of a quotation)&amp;quot; (Manning and Schiitze, 1999). If a hyphenated segment such as &amp;quot;data-base,&amp;quot; &amp;quot;F-16,&amp;quot; or &amp;quot;MS-DOS&amp;quot; exists in the dictionary, it should be an in</context>
</contexts>
<marker>Palmer, Hearst, 1997</marker>
<rawString>David D. Palmer and Marti A. Hearst. 1997. Adaptive multilingual sentence boundary disambiguation. Computational Linguistics, 23(2):241-267, June.</rawString>
</citation>
<citation valid="true">
<title>Real World Computing Partnership,</title>
<date>1998</date>
<note>in Japanese.</note>
<marker>1998</marker>
<rawString>Real World Computing Partnership, 1998. RWC Text Database Report. in Japanese.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Beatrice Santorini</author>
</authors>
<title>Part-of-Speech Tagging Guidelines for the Penn Treebank Project (3rd Revision, 2nd printing),</title>
<date>1990</date>
<contexts>
<context position="6950" citStr="Santorini, 1990" startWordPosition="1083" endWordPosition="1085">, hyphens should be treated as independent tokens(Fox, 1992). Other punctuation marks such as &amp;quot;/&amp;quot; or &amp;quot;_&amp;quot; have the same problem in &amp;quot;OS/2&amp;quot; or &amp;quot;max_size&amp;quot; (in programming languages). 2. Round-up(several segments into one lexeme): If a lexeme consisting of a sequence of segments such as a proper noun (e.g., &amp;quot;New York&amp;quot;) or a phrasal verb (e.g., &amp;quot;look at&amp;quot; and &amp;quot;get up&amp;quot;) exists in the dictionary, it should be a lexeme. To handle such lexemes, we need to store multisegment lexemes in the dictionary. Webster and Kit handle idioms and fixed expressions in this way(Webster and Kit, 1992). In Penn Treebank(Santorini, 1990), a proper noun like &amp;quot;New York&amp;quot; is defined as two individual proper nouns &amp;quot;New / NNP&amp;quot; + &amp;quot;York / NNP,&amp;quot; disregarding round-up of several segments into a lexeme. The definition of lexemes in a dictionary depends on the requirement of application. Therefore, a simple pattern matcher is not enough to deal with language independent tokenization. Non-segmented languages do not have a delimiter between lexemes (Figure 2). Therefore, a treatment of further segmentation and rounding up has been well considered. In a non-segmented language, the analyzer considers all prefixes from each position in the se</context>
<context position="9374" citStr="Santorini, 1990" startWordPosition="1473" endWordPosition="1475"> languages can handle the problems of segmented languages. For instance, to analyze the sentence, &amp;quot;They&apos;ve gone to school together,&amp;quot; we first delete all white spaces in the sentence and get &amp;quot;They&apos;vegonetoschooltogether.&amp;quot; Then we pass it to the analyzer for non-segmented languages. However, the analyzer may return the result as &amp;quot;They / &apos;ve / gone / to / school / to / get / her / .&amp;quot; inducing a spurious ambiguity. Mills applied this method and tokenized the medieval manuscript in Cornish(Mills, 1998). We carried out experiments to examine the influence of delimiter deletion. We use Penn Treebank(Santorini, 1990) part-of-speech tagged corpus (1.3M lexemes) to train an HMM and analyze sentences by HMM-based morphological analyzer MOZ(Yamashita, 1999)(Ymashita et al., 1999). We use a bigram model for training it from the corpus. Test data is the same as the training corpus. Table 1 shows accuracy of segmentation and part-ofspeech tagging. The accuracy is expressed in terms of recall and precision(Nagata, 1999). Let the number of lexemes in the tagged corpus be Std, the number of lexemes in the output of the analyze be Sys, and the number of matched lexemes be M. Recall is defined as M/Std, precision is </context>
<context position="19882" citStr="Santorini, 1990" startWordPosition="3208" endWordPosition="3209">ver, to tune a tokenizer by hand is not suitable to implement many minor languages. 4.3 Implementation We implement a language independent morphological analysis system based on the concept of morphofragments(Yamashita, 1999). With an existence of tagged corpus, it is straightforward to implement part-of-speech taggers. We have implemented several of such taggers. The system uses an HMM. This is trained by a part-of-speech tagged corpus. We overview the setting and performance of tagging for several languages. English An HMM is trained by the part-of-speech tagged corpus part of Penn Treebank(Santorini, 1990) (1.3 million morphemes). We use a trigram model. The lexemes in the dictionary are taken from the corpus as well as from the entry words in Oxford Advanced Learner&apos;s Dictionary(Mitton, 1992). The system achieves 97% precision and recall for training data, 95% precision and recall for test data. Japanese An HMM is trained by Japanese part-of-speech tagged corpus(Rea, 1998) (0.9 million morphemes). We use a trigram model. The lexemes in the dictionary are taken from the corpus as well as from the dictionary of ChaSen(Matsumoto et al., 1999), a freely available Japanese morphological analyzer. T</context>
</contexts>
<marker>Santorini, 1990</marker>
<rawString>Beatrice Santorini, 1990. Part-of-Speech Tagging Guidelines for the Penn Treebank Project (3rd Revision, 2nd printing), June.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jonathan J Webster</author>
<author>Chunyu Kit</author>
</authors>
<title>Tokenization as the initial phase in nlp.</title>
<date>1992</date>
<booktitle>In COLING92,</booktitle>
<volume>4</volume>
<pages>1106--1110</pages>
<contexts>
<context position="6915" citStr="Webster and Kit, 1992" startWordPosition="1077" endWordPosition="1080">ars-old&amp;quot; does not exist in the dictionary, hyphens should be treated as independent tokens(Fox, 1992). Other punctuation marks such as &amp;quot;/&amp;quot; or &amp;quot;_&amp;quot; have the same problem in &amp;quot;OS/2&amp;quot; or &amp;quot;max_size&amp;quot; (in programming languages). 2. Round-up(several segments into one lexeme): If a lexeme consisting of a sequence of segments such as a proper noun (e.g., &amp;quot;New York&amp;quot;) or a phrasal verb (e.g., &amp;quot;look at&amp;quot; and &amp;quot;get up&amp;quot;) exists in the dictionary, it should be a lexeme. To handle such lexemes, we need to store multisegment lexemes in the dictionary. Webster and Kit handle idioms and fixed expressions in this way(Webster and Kit, 1992). In Penn Treebank(Santorini, 1990), a proper noun like &amp;quot;New York&amp;quot; is defined as two individual proper nouns &amp;quot;New / NNP&amp;quot; + &amp;quot;York / NNP,&amp;quot; disregarding round-up of several segments into a lexeme. The definition of lexemes in a dictionary depends on the requirement of application. Therefore, a simple pattern matcher is not enough to deal with language independent tokenization. Non-segmented languages do not have a delimiter between lexemes (Figure 2). Therefore, a treatment of further segmentation and rounding up has been well considered. In a non-segmented language, the analyzer considers all pr</context>
<context position="21146" citStr="Webster and Kit, 1992" startWordPosition="3413" endWordPosition="3416">l for training and test data. Chinese An HMM is trained by the Chinese part-ofspeech tagged corpus released by CKIP(Chinese Knowledge Information Processing Group, 1995) (2.1 million morphemes). We use a bigram model. The lexemes in the dictionary are taken only from the corpus. The system achieves 95% precision and recall for training data, 91% precision and recall for test data. 5 Related Work and Remarks We address two problems of tokenization in segmented languages: further segmentation and roundup. These problems are discussed by several authors including Mills(Mills, 1998) Webster &amp; Kit(Webster and Kit, 1992). However, their proposed solutions are not language independent. To resolve the problems of tokenization, we first apply the method of non-segmented languages processing. However, this causes spurious segmentation ambiguity and a considerable influence in the analysis times. Therefore, we propose the concept of morpho-fragments that minimally comprises the lexemes in a language. Although the idea is quite simple, our approach avoids spurious ambiguity and attains an efficient look-up of a trie structured dictionary. In conclusion, the concept of morphofragments makes it easy to implemented la</context>
</contexts>
<marker>Webster, Kit, 1992</marker>
<rawString>Jonathan J. Webster and Chunyu Kit. 1992. Tokenization as the initial phase in nlp. In COLING92, volume 4, pages 1106-1110, August.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Tatsuo Yamashita</author>
</authors>
<date>1999</date>
<booktitle>MOZ and LimaTK Manual. NAIST Computational Linguistics Laboratory, / /c1. aist- nara. ac .jpr tatuo-y/ ma/ &gt; ,</booktitle>
<note>in Japanese.</note>
<contexts>
<context position="9513" citStr="Yamashita, 1999" startWordPosition="1495" endWordPosition="1496">st delete all white spaces in the sentence and get &amp;quot;They&apos;vegonetoschooltogether.&amp;quot; Then we pass it to the analyzer for non-segmented languages. However, the analyzer may return the result as &amp;quot;They / &apos;ve / gone / to / school / to / get / her / .&amp;quot; inducing a spurious ambiguity. Mills applied this method and tokenized the medieval manuscript in Cornish(Mills, 1998). We carried out experiments to examine the influence of delimiter deletion. We use Penn Treebank(Santorini, 1990) part-of-speech tagged corpus (1.3M lexemes) to train an HMM and analyze sentences by HMM-based morphological analyzer MOZ(Yamashita, 1999)(Ymashita et al., 1999). We use a bigram model for training it from the corpus. Test data is the same as the training corpus. Table 1 shows accuracy of segmentation and part-ofspeech tagging. The accuracy is expressed in terms of recall and precision(Nagata, 1999). Let the number of lexemes in the tagged corpus be Std, the number of lexemes in the output of the analyze be Sys, and the number of matched lexemes be M. Recall is defined as M/Std, precision is defined as MISys. The following are the labels in Table 1 (sentence formats and methods we use): LXS We isolate all the lexemes in sentence</context>
<context position="19491" citStr="Yamashita, 1999" startWordPosition="3147" endWordPosition="3149"> same as &amp;quot;NOR.&amp;quot; The difference is that we use the morpho-fragments definition for English. The row labeled &amp;quot;MF&amp;quot; in Table 1 shows the results of the analysis. Using the morpho-fragments decreases the analysis time drastically. The accuracy is also better than those of the naive approaches. Well studied language such as English may have a hand tuned tokenizer which is superior to ours. However, to tune a tokenizer by hand is not suitable to implement many minor languages. 4.3 Implementation We implement a language independent morphological analysis system based on the concept of morphofragments(Yamashita, 1999). With an existence of tagged corpus, it is straightforward to implement part-of-speech taggers. We have implemented several of such taggers. The system uses an HMM. This is trained by a part-of-speech tagged corpus. We overview the setting and performance of tagging for several languages. English An HMM is trained by the part-of-speech tagged corpus part of Penn Treebank(Santorini, 1990) (1.3 million morphemes). We use a trigram model. The lexemes in the dictionary are taken from the corpus as well as from the entry words in Oxford Advanced Learner&apos;s Dictionary(Mitton, 1992). The system achie</context>
</contexts>
<marker>Yamashita, 1999</marker>
<rawString>Tatsuo Yamashita, 1999. MOZ and LimaTK Manual. NAIST Computational Linguistics Laboratory, &lt;http: / /c1. aist- nara. ac .jpr tatuo-y/ ma/ &gt; , August. in Japanese.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Tatsuo Ymashita</author>
<author>Msakazu Fujio</author>
<author>Yuji Matsumoto</author>
</authors>
<title>Language independent tools for natural language processing.</title>
<date>1999</date>
<booktitle>In Proceedings of the Eighteenth International Conference on Computer Processing,</booktitle>
<pages>237--240</pages>
<contexts>
<context position="9536" citStr="Ymashita et al., 1999" startWordPosition="1496" endWordPosition="1499">te spaces in the sentence and get &amp;quot;They&apos;vegonetoschooltogether.&amp;quot; Then we pass it to the analyzer for non-segmented languages. However, the analyzer may return the result as &amp;quot;They / &apos;ve / gone / to / school / to / get / her / .&amp;quot; inducing a spurious ambiguity. Mills applied this method and tokenized the medieval manuscript in Cornish(Mills, 1998). We carried out experiments to examine the influence of delimiter deletion. We use Penn Treebank(Santorini, 1990) part-of-speech tagged corpus (1.3M lexemes) to train an HMM and analyze sentences by HMM-based morphological analyzer MOZ(Yamashita, 1999)(Ymashita et al., 1999). We use a bigram model for training it from the corpus. Test data is the same as the training corpus. Table 1 shows accuracy of segmentation and part-ofspeech tagging. The accuracy is expressed in terms of recall and precision(Nagata, 1999). Let the number of lexemes in the tagged corpus be Std, the number of lexemes in the output of the analyze be Sys, and the number of matched lexemes be M. Recall is defined as M/Std, precision is defined as MISys. The following are the labels in Table 1 (sentence formats and methods we use): LXS We isolate all the lexemes in sentences and apply the method </context>
</contexts>
<marker>Ymashita, Fujio, Matsumoto, 1999</marker>
<rawString>Tatsuo Ymashita, Msakazu Fujio, and Yuji Matsumoto. 1999. Language independent tools for natural language processing. In Proceedings of the Eighteenth International Conference on Computer Processing, pages 237-240, March.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>