<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000003">
<title confidence="0.991334">
An Open Source Urdu Resource Grammar
</title>
<author confidence="0.889144">
Shafqat M Virk Muhammad Humayoun Aarne Ranta
</author>
<affiliation confidence="0.9266065">
Department of Applied IT Laboratory of Mathmatics Department of CS &amp; Eng
University of Gothenburg University of Savoie University of Gothenburg
</affiliation>
<email confidence="0.993044">
virk@chalmers.se mhuma@univ-savoie.fr aarne@chalmers.se
</email>
<sectionHeader confidence="0.99464" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999880192307692">
We develop a grammar for Urdu in
Grammatical Framework (GF). GF is a
programming language for defining
multilingual grammar applications. GF
resource grammar library currently
supports 16 languages. These grammars
follow an Interlingua approach and
consist of morphology and syntax
modules that cover a wide range of
features of a language. In this paper we
explore different syntactic features of the
Urdu language, and show how to fit them
in the multilingual framework of GF. We
also discuss how we cover some of the
distinguishing features of Urdu such as,
ergativity in verb agreement (see Sec
4.2). The main purpose of GF resource
grammar library is to provide an easy
way to write natural language
applications without knowing the details
of syntax, morphology and lexicon. To
demonstrate it, we use Urdu resource
grammar to add support for Urdu in the
work reported in (Angelov and Ranta,
2010) which is an implementation of
Attempto (Attempto 2008) in GF.
</bodyText>
<sectionHeader confidence="0.997776" genericHeader="keywords">
1. Introduction
</sectionHeader>
<bodyText confidence="0.999709818181818">
Urdu is an Indo-European language of the Indo-
Aryan family, widely spoken in south Asia. It is
a national language of Pakistan and one of the
official languages of India. It is written in a
modified Perso-Arabic script from right to left.
As regards vocabulary, it has a strong influence
of Arabic and Persian along with some
borrowing from Turkish and English. Urdu is an
SOV language having fairly free word order. It
is closely related to Hindi as both originated
from the dialect of Delhi region called khari boli
(Masica, 1991).
We develop a grammar for Urdu that addresses
problems related to automated text translation
using an Interlingua approach and provide a way
to precisely translate text. This is described in
Section 2. Then we describe different levels of
grammar development including morphology
(Section 3) and syntax (Section 4). In Section 6,
we discuss an application in which a semantics-
driven translation system is built upon these
components.
</bodyText>
<sectionHeader confidence="0.981881" genericHeader="introduction">
2. GF (Grammatical Framework)
</sectionHeader>
<bodyText confidence="0.995360884615385">
GF (Grammatical Framework, Ranta 2004) is a
tool for working with grammars, implementing a
programming language for writing grammars
which in term is based on a mathematical theory
about languages and grammars1. Many
multilingual dialog and text generation
applications have been built using GF. GF
grammars have two levels the abstract and the
concrete syntax2. The abstract syntax is
language independent and is common to all
languages in GF grammar library. It is based on
common syntactic or semantic constructions,
which work for all the involved languages on an
appropriate level of abstraction. The concrete
syntax is language dependent and defines a
mapping from abstract to actual textual
representation in a specific language2. GF uses
the term ‘category’ to model different parts of
speech (e.g verbs, nouns adjectives etc.). An
abstract syntax defines a set of categories, as
well as a set of tree building functions. Concrete
syntax contains rules telling how these trees are
linearized. Separating the tree building rules
(abstract syntax) from linearization rules
(concrete syntax) makes it possible to have
multiple concrete syntaxes for one abstract. This
</bodyText>
<footnote confidence="0.9587065">
1 http://www.grammaticalframework.org
2 In given example code ’fun’ and ’cat’ belongs to abstract syntax, ’lin’ and ’lincat’ belongs to concrete syntax
</footnote>
<page confidence="0.962929">
153
</page>
<note confidence="0.9953335">
Proceedings of the 8th Workshop on Asian Language Resources, pages 153–160,
Beijing, China, 21-22 August 2010. c�2010 Asian Federation for Natural Language Processing
</note>
<bodyText confidence="0.993526111111111">
makes it possible to parse text in one language
and translate it to multiple languages.
Grammars in GF can be roughly classified into
two kinds: resource grammars and application
grammars. Resource grammars are general
purpose grammars (Ranta, 2009a) that try to
cover the general aspects of a language
linguistically and whose abstract syntax encodes
syntactic structures. Application grammars, on
the other hand, encode semantic structures, but
in order to be accurate they are typically limited
to specific domains. However, they are not
written from scratch for each domain, but they
use resource grammars as libraries (Ranta
2009b).
Previously GF had resource grammars for 16
languages: English, Italian, Spanish, French,
Catalan, Swedish, Norwegian, Danish, Finish,
Russian, Bulgarian, German, Interlingua (an
artificial language), Polish, Romanian and
Dutch. Most of these languages are European
languages. We developed resource grammar for
Urdu making it the 17th in total and the first
south Asian language. Resource grammars for
several other languages (e.g. Arabic, Turkish,
Persian, Maltese and Swahili) are under
construction.
</bodyText>
<sectionHeader confidence="0.975813" genericHeader="method">
3. Morphology
</sectionHeader>
<bodyText confidence="0.9998570625">
In GF resource grammars a test lexicon of 350
words is provided for each language. These
words are built through lexical functions. The
rules for defining Urdu morphology are
borrowed from (Humayoun et el., 2006), in
which Urdu morphology was developed in the
Functional Morphology toolkit (Forsberg and
Ranta, 2004). Although it is possible to
automatically generate equivalent GF code from
it, we wrote the rules of morphology from
scratch in GF, to receive better abstractions than
are possible in generated code. Furthermore, we
extend this work by including compound words.
However, the details of morphology are beyond
the scope of this paper, and its focus is on
syntax.
</bodyText>
<sectionHeader confidence="0.989117" genericHeader="method">
4. Syntax
</sectionHeader>
<bodyText confidence="0.926275333333333">
While morphological analysis deals with the
formation and inflection of individual words,
syntax shows how these words (parts of speech)
are grouped together to build well formed
phrases. In this section we show how this works
and is implemented for Urdu.
</bodyText>
<subsectionHeader confidence="0.990194">
4.1 Noun Phrases (NP)
</subsectionHeader>
<bodyText confidence="0.999534631578948">
When nouns are to be used in sentences as part
of speech, then there are several linguistic
details which need to be considered. For
example other words can modify a noun, and
nouns have characteristics such as gender,
number etc. When all such required details are
grouped together with the noun, the resulting
structure is known as noun phrase (NP). The
basic structure of Urdu noun phrase is, “(M) H
(M)” according to (Butt M., 1995), where (M) is
a modifier and (H) is the head of a NP. Head is
the word which is compulsory and modifiers can
or cannot be there. In Urdu modifiers are of two
types pre-modifiers i.e modifiers that come
before the head for instance (OL OILS kali: bli:
“black cat”), and post-modifiers which come
after the head for instance (,.:— ?&apos; tm sb “you
all”). In GF resource library we represent NP as
a record
</bodyText>
<equation confidence="0.857231">
lincat NP : Type = {s : NPCase =&gt; Str ; a :
Agr} ;
</equation>
<bodyText confidence="0.944569">
where
</bodyText>
<equation confidence="0.9938917">
NPCase = NPC Case  |NPErg  |NPAbl
|NPIns|NPLoc1NPLoc2
|NPDat;|NPAcc
Case = Dir  |Obl  |Voc ;
Agr = Ag Gender Number UPerson ;
Gender = Masc  |Fem ;
UPerson = Pers1 |Pers2_Casual
 |Pers2_Familiar  |Pers2_Respect
 |Pers3_Near  |Pers3_Distant;
Number = Sg  |Pl ;
</equation>
<bodyText confidence="0.993504375">
Thus NP is a record with two fields, ’s’ and ’a’.
‘s’ is an inflection table and stores different
forms of a noun.
The Urdu NP has a system of syntactic cases
which is partly different from the morphological
cases of the category noun (N). The case
markers that follow nouns in the form of post-
positions cannot be handled at lexical level
</bodyText>
<page confidence="0.998807">
154
</page>
<bodyText confidence="0.9999356">
through morphological suffixes and are thus
handled at syntactic level (Butt et el., 2002).
Here we create different forms of a noun phrase
to handle case markers for Urdu nouns. Here is a
short description of the different cases of NP :
</bodyText>
<listItem confidence="0.9977913125">
• NPC Case: this is used to retain the
original case of Noun
• NPErg: Ergative case with case marker
‘ne: =i’
• NPAbl: Ablative with case marker ‘se:
=7’
• NPIns: Instrumental case with case
marker ‘se: =-’
• NPLoc1: Locative case with case
marker ‘mi: c-:A’
• NPLoc2: Locative case with case
marker ‘pr .,’
• NPDat: Dative case with case marker
‘k -4’
• NPAcc: Accusative case with case
marker ‘k -4
</listItem>
<bodyText confidence="0.9980208">
And ‘a’ (Agr in the code sample given in
previous column) is the agreement feature of the
the noun that is used for selecting the
appropriate form of other categories that agree
with nouns.
A noun is converted to an intermediate category
common noun (CN; also known as N-Bar)
which is then converted to NP category. CN
deals with nouns and their modifiers. As an
example consider adjectival modification:
</bodyText>
<equation confidence="0.961169">
fun AdjCN : AP -&gt; CN -&gt; CN ;
lin AdjCN ap cn = {
s = \\n,c =&gt;
ap.s ! n ! cn.g ! c ! Posit ++ cn.s ! n ! c ;
g = cn.g
} ;
</equation>
<bodyText confidence="0.987707">
The linearization of AdjCN gives us common
nouns such as (fit, 1� ȹn a pani: “cold
water”) where a CN (fit, pani: “water”) is
modified by an AP ( 1� , ȹn a “cold”).
Since Urdu adjectives also inflect in number,
gender, case and degree, we need to concatenate
the appropriate form of adjective that agrees
with common noun. This is ensured by selecting
the corresponding forms of adjective and
common noun from their inflection tables using
selection operator (‘!’). Since CN does not
inflect in degree but the adjective does, we fix
the degree to be positive (Posit) in this
construction. Other modifiers include possibly
adverbs, relative clauses, and appositional
attributes.
A CN can be converted to a NP using different
functions: common nouns with determiners;
proper names; pronouns; and bare nouns as mass
terms:
</bodyText>
<listItem confidence="0.66295725">
fun DetCN : Det -&gt; CN -&gt; NP (e.g the boy)
fun UsePN : PN -&gt; NP (e.g John)
fun UsePron : Pron -&gt; NP (e.g he)
fun MassNP : CN -&gt; NP (e.g milk)
</listItem>
<bodyText confidence="0.999916166666667">
These different ways of building NP’s, which
are common in different languages, are defined
in the abstract syntax of the resource grammar,
but the linearization of these functions is
language dependent and is therefore defined in
the concrete syntaxes.
</bodyText>
<subsectionHeader confidence="0.984649">
4.2 Verb Phrases (VP)
</subsectionHeader>
<bodyText confidence="0.999977">
A verb phrase is a single or a group of words
that act as a predicate. In our construction Urdu
verb phrase has following structure
</bodyText>
<equation confidence="0.999058857142857">
lincat VP = {
s : VPHForm =&gt; {fin, inf: Str} ;
obj : {s : Str ; a : Agr} ;
vType : VType ;
comp : Agr =&gt; Str;
embComp : Str ;
ad : Str } ;
</equation>
<bodyText confidence="0.957839">
where
</bodyText>
<equation confidence="0.562319666666667">
VPHForm =
VPTense VPPTense Agr
 |VPReq HLevel  |VPStem
</equation>
<bodyText confidence="0.628329">
and
</bodyText>
<equation confidence="0.6226965">
VPPTense = VPPres |VPPast |VPFutr;
HLevel = Tu |Tum |Ap |Neutr
</equation>
<page confidence="0.985145">
155
</page>
<bodyText confidence="0.998641393258427">
In GF representation a VP is a record with
different fields. The most important field is ‘s’
which is an inflectional table and stores different
forms of Verb.
At VP level we define Urdu tenses by using a
simplified tense system, which has only three
tenses, named VPPres, VPPast, VPFutr. In case
of VPTense for every possible combination of
VPPTense and agreement (gender, number,
person) a tuple of two string values {fin, inf :
Str} is created. ‘fin’ stores the coupla (auxiliary
verb) , and ‘inf’ stores corresponding form of
verb. VPStem is a special tense which stores the
root form of verb. This form is used to create the
full set of Urdu tenses at clause level (tenses in
which the root form of verb is used, i.e.
perfective and progressive tenses). Handling
tenses at clause level rather than at verb phrase
level simplifies the VP and results in a more
efficient grammar.
The resource grammar has a common API
which has a much simplified tense system,
which is close to Germanic languages. It is
divided into tense and anteriority. There are only
four tenses named as present, past, future and
conditional, and two possibilities of anteriority
(Simul , Anter). This means it creates 8
combinations. This abstract tense system does
not cover all the tenses in Urdu. We have
covered the rest of tenses at clause level, even
though these tenses are not accessible by the
common API, but still can be used in language
specific modules.
Other forms for verb phrases include request
form (VPReq), imperative form (VPImp). There
are four levels of requests in Urdu. Three of
them correspond to (t -4, tm ?5 , a:p پ1 ) honor
levels and the fourth is neutral with respect to
honorific levels. .
The Urdu VP is a complex structure that has
different parts: the main part is a verb and then
there are other auxiliaries attached to verb. For
example an adverb can be attached to a verb as a
modifier. We have a special field ‘ad’ in our VP
representation. It is a simple string that can be
attached with the verb to build a modified verb.
In Urdu the complement of a verb precedes the
actual verb e.g (ﮯﮨ ��ﮨ�� ��ڑود ﮦو o dna tahti:
he: “she want to run”), here (Uﮨ. tahna “want”)
is complement of verb (��ڑود dna “run”),
except in the case where, a sentence or a
question is the complement of the verb. In that
case complement of the verb comes at the very
end of clause e.g (o khta he: kh o dti: he: ﮦو
ﮯﮨ �ڑود ﮦو ہ� ﮯﮨ UﮩS “he says that she runs”).
We have two different fields named ‘compl’ and
‘embCompl’ in the VP to deal with these
different situations.
‘vType’ field is used to store information about
type of a verb. In Urdu a verb can be transitive,
intransitive or double-transitive (Schmidt R. L.,
1999). This information is important when
dealing with ergativity in verb agreement. The
information about the object of the verb is stored
in ‘obj’ field. All this information that a VP
carries is used when a VP is used in the
construction of a clause.
A distinguishing feature of Urdu verb agreement
is ‘ergativity’. Urdu is one of those languages
that shows split ergativity at verb level. Final
verb agreement is with direct subjective except
in the transitive perfective tense. In transitive
perfective tense verb agreement is with direct
object. In this case the subject takes the ergative
construction (subject with addition of ergative
case marker (ne: ﮯ�).
However, in the case of the simple past tense,
verb shows ergative behavior, but in case of
other perfective tenses (e.g immediate past,
remote past etc) there are two different
approaches, in first one auxiliary verb (tka L&lt;-I-)
is used to make clauses. If (tka L&lt;-I-) is used,
verb does not show ergative behavior and final
verb agreement is with direct subjective.
Consider the following example
ﮯﮨ L$� %&amp;}&apos; بLSS LSﮍ~
lka Direct ktab Direct xri:d Root tka aux_verb he:
The boy has bought a book
The second way to make the same clause is
</bodyText>
<equation confidence="0.552398">
ﮯﮨ *%&amp;}&apos; بL&amp;quot;,S ﮯ� ﮯ�ﮍI
</equation>
<bodyText confidence="0.999397">
lke: ne: Erg ktab Direct_Fem xri:di: Direct_Fem he:
The boy has bought a book
In the first case the subject (lka, ��ﮍ� “boy”) is
in direct case and auxiliary verb agrees to
subject, but in second case verb is in agreement
with object and ergative case of subject is used.
However, in the current implementation we
follow the first approach.
</bodyText>
<page confidence="0.997646">
156
</page>
<bodyText confidence="0.828756">
In the concrete syntax we ensure this ergative
behavior through the following code segment in
GF. However the code given here is just a
segment of the code that is relevant.
case vt of {
VPPast =&gt; case vp.vType of {
</bodyText>
<equation confidence="0.5277478">
(Vtrans |VTransPost) =&gt; &lt;NPErg, vp.obj.a&gt;
_ =&gt; &lt;NPC Dir, np.a&gt;
} ;
_ =&gt; &lt;NPC Dir, np.a&gt;
} ;
</equation>
<bodyText confidence="0.864973875">
e.g in case of simple past tense if verb is
transitive then ergative case of noun is used and
agreement is with object of verb. In all other
cases direct case of noun is used and agreement
is with subject of verb.
A VP is constructed in different ways; the
simplest is
fun UseV : V -&gt; VP ;
where V is the morphological category and VP
is the syntactic category. There are other ways to
make a VP from other categories, or
combinations of categories. For example
fun AdvVP : VP -&gt; Adv -&gt; VP ;
An adverb can be attached to a VP to make an
adverbial modified VP. For example (i:ha uy,
U-9-)
</bodyText>
<subsectionHeader confidence="0.998092">
4.3 Adjective Phrases (AP)
</subsectionHeader>
<bodyText confidence="0.949588384615385">
Adjectives (A) are converted into the much
richer category adjectival phrases (AP) at syntax
level. The simplest function to convert is
fun PositA : A -&gt; AP ;
Its linearization is very simple, since in our case
AP is similar to A e.g.
fun PositA a = a ;
There are other ways of making AP for example
fun ComparA : A -&gt; NP -&gt; AP ;
When a comparative AP is created from an
adjective and a NP, constant “se: =-” is used
between oblique form of noun and adjective. For
example linearization of above function is
</bodyText>
<equation confidence="0.67417975">
lin ComparA a np = {
s = \\n,g,c,d =&gt; np.s ! NPC Obl ++ &amp;quot;se:&amp;quot;
++ a.s ! n ! g ! c ! d ;
} ;
</equation>
<subsectionHeader confidence="0.979556">
4.4 Clauses
</subsectionHeader>
<bodyText confidence="0.8869868">
A clause is a syntactic category that has variable
tense, polarity and order. Predication of a NP
and VP gives simplest clause
fun PredVP : NP -&gt; VP -&gt; Cl ;
The subject-verb agreement is insured through
agreement feature of NP which is passed to verb
as inherent feature. A clause is of following type
lincat Clause : Type = {s : VPHTense =&gt;
Polarity =&gt; Order =&gt; Str} ;
Here VPHTense represents different tenses in
Urdu. Even though current abstract level of
common API does not cover all tenses of Urdu,
we cover them at clause level and can be
accessed through language specific module. So,
VPHTense is of following type
</bodyText>
<equation confidence="0.990891">
VPHTense = VPGenPres  |VPPastSimple
 |VPFut  |VPContPres
 |VPContPast  |VPContFut
 |VPPerfPres  |VPPerfPast
 |VPPerfFut  |VPPerfPresCont
 |VPPerfPastCont
 |VPPerfFutCont  |VPSubj
</equation>
<bodyText confidence="0.99968675">
Polarity is used to make positive and negative
sentences; Order is used to make simple and
interrogative sentences. These parameters are of
following forms
</bodyText>
<equation confidence="0.9787055">
Polarity = Pos  |Neg
Order = ODir  |OQuest
</equation>
<bodyText confidence="0.99458">
PredVP function will create clauses with
variable tense, polarity and order which are
</bodyText>
<page confidence="0.995162">
157
</page>
<bodyText confidence="0.991479416666667">
fixed at sentence level by different functions,
one is.
fun UseCl : Temp -&gt; Pol -&gt; Cl -&gt; S
Here Temp is syntactic category which is in the
form of a record having field for Tense and
Anteriority. Tense in the Temp category refers
to abstract level Tense and we just map it to
Urdu tenses by selecting the appropriate clause.
This will create simple declarative sentence,
other forms of sentences (e.g Question
sentences) are handled in Questions categories
of GF which follows next.
</bodyText>
<subsectionHeader confidence="0.9844235">
4.5 Question Clauses and Question
Sentences
</subsectionHeader>
<bodyText confidence="0.968463277777778">
Common API provides different ways to create
question clauses. The simplest way is to create
from simple clause
fun QuestCl : Cl -&gt; QCl ;
In Urdu simple interrogative sentences are
created by just adding “ki:a tA” at the start of a
direct clause that already have been created at
clause level. Hence, the linearization of above
function simply selects appropriate form of
clause and adds “ki:a tA” at the start. However
this clause still has variable tense and polarity
which is fixed at sentence level e.g
fun UseQCl : Temp -&gt; Pol -&gt; QCl -&gt; QS
Other forms of question clauses include clauses
made with interrogative pronouns (IP),
interrogative adverbs (IAdv), and interrogative
determiners (IDet), categories. Some of the
functions for creating question clauses are
</bodyText>
<equation confidence="0.792822">
fun QuestVP : IP -&gt; VP -&gt; QCl (e.g who
walks)
</equation>
<bodyText confidence="0.862367">
fun QuestIAdv : IAdv -&gt; Cl -&gt; QCl (e.g why
does he walk)
IP, IAdv, IDet etc are built at morphological
level and can also be created with following
functions.
</bodyText>
<listItem confidence="0.859250666666667">
fun AdvIP : IP -&gt; Adv -&gt; IP
fun IdetQuant : IQuant -&gt; Num -&gt; IDet ;
fun PrepIP : Prep -&gt; IP -&gt; IAdv ;
</listItem>
<sectionHeader confidence="0.717651" genericHeader="method">
5. Example
</sectionHeader>
<bodyText confidence="0.943422888888889">
As an example consider the translation of
following sentence from English to Urdu, to see
how our proposed system works at different
levels.
He drinks hot milk.
Figure 1 shows the parse tree for this sentence.
As a resource grammar developer our goal is to
provide correct concrete level linearization of
this tree for Urdu.
</bodyText>
<figureCaption confidence="0.990848">
Figure 1. Parse tree of an example sentence
</figureCaption>
<bodyText confidence="0.983240666666667">
The nodes in this tree represent different
categories and its branching shows how a
particular category is built from other categories
and/or leaves (words from lexicon). In GF
notation these are the syntactic rules which are
declared at abstract level. For example category
CN can be built from an AP (adjectival phrase)
and a CN. So in GF representation it has
following type signature.
fun AdjCN : AP -&gt; CN -&gt; CN ;
A correct implementation of this rule in Urdu
concrete syntax ensures correct formation of a
common noun (Aa9a f-� grm ddȺ “hot milk”)
from a CN (Aa9a ddȺ “milk”) modified by an
Adjective ( f-A , grm “hot”).
</bodyText>
<page confidence="0.996404">
158
</page>
<bodyText confidence="0.96212675">
A NP is constructed from this CN by one of the
NP construction rules (see section 4.1 for
details). A VPSlash (object missing VP) is build
from a two place verb (U- pi:ta “drinks”). This
VPSlash is then converted to VP through
function
fun ComplSlash : VPSlash -&gt; NP -&gt; VP ;
Resulting VP and NP are grouped together to
make a VP (ﮯﮨ tu هدود م-. grm ddr&apos; pi:ta he:
“drinks hot milk”). Finally clause (ﮯﮨ 1lu هدود م_.
ﮦو h grm ddr&apos; pi:ta he: “he drinks hot milk”) is
build from NP (ﮦو h “he”) which is build from
pronoun (ﮦو h “he”) and VP (ﮯﮨ 1lu هدود مy.
grm ddr&apos; pi:ta he: “drinks hot milk”). Language
dependent concrete syntax assures that correct
forms of words are selected from lexicon and
word order is according to rules of that specific
language. While, morphology makes sure that
correct forms of words are built during lexicon
development.
</bodyText>
<sectionHeader confidence="0.965997" genericHeader="method">
6. An application: Attempto
</sectionHeader>
<bodyText confidence="0.999773">
An experiment of implementing Controlled
languages in GF is reported in (Angelov and
Ranta, 2010). In this experiment, a grammar for
Attempto Controlled English (Attempto, 2008)
is implemented and then ported to six languages
(English, Finnish, French, German, Italian, and
Swedish) using the GF resource library. To
demonstrate the usefulness of our grammar and
to check its correctness, we have added Urdu to
this set. Now, we can translate Attempto
documents between all of these seven languages.
The implementation followed the general recipe
for how new languages can be added (Angelov
and Ranta, 2009) and created no surprises.
However the details of this implementation are
beyond the scope of this paper.
</bodyText>
<sectionHeader confidence="0.999818" genericHeader="method">
7. Related Work
</sectionHeader>
<bodyText confidence="0.999935033333333">
A suite of Urdu resources were reported in
(Humayoun et el., 2006) including a fairly
complete open-source Urdu morphology and a
small fragment of syntax in GF. In this sense, it
is a predecessor of Urdu resource grammar,
implemented in a different but related
formalism.
Like the GF resource library, Pargram project
(Butt et el., 2007) aims at building a set of
parallel grammars including Urdu. The
grammars in Pargram are connected with each
other by transfer functions, rather than a
common representation. Further, the Urdu
grammar is still one of the least implemented
grammars in Pargram at the moment. This
project is based on the theoretical framework of
lexical functional grammar (LFG).
Other than Pargram, most work is based on LFG
and translation is unidirectional i.e. from
English to Urdu only. For instance, English to
Urdu MT System is developed under the Urdu
Localization Project (Hussain, 2004), (Sarfraz
and Naseem, 2007) and (Khalid et el., 2009).
Similarly, (Zafer and Masood, 2009) reports
another English-Urdu MT system developed
with example based approach. On the other
hand, (Sinha and Mahesh, 2009) presents a
strategy for deriving Urdu sentences from
English-Hindi MT system. However, it seems to
be a partial solution to the problem.
</bodyText>
<sectionHeader confidence="0.994854" genericHeader="method">
8. Future Work
</sectionHeader>
<bodyText confidence="0.999904823529412">
The common resource grammar API does not
cover all the aspects of Urdu language, and non-
generalizable language-specific features are
supposed to be handled in language-specific
modules. In our current implementation of Urdu
resource grammar we have not covered those
features. For example in Urdu it is possible to
build a VP from only VPSlash (VPSlash
category represents object missing VP) e.g (ﮯﮨ
t14 kȹata he:) without adding the object. This
rule is not present in the common API. One
direction for future work is to cover such
language specific features.
Another direction for future work could be to
include the causative forms of verb which are
not included in the current implementation due
to efficiency issues.
</bodyText>
<sectionHeader confidence="0.997803" genericHeader="conclusions">
9. Conclusion
</sectionHeader>
<bodyText confidence="0.998346666666667">
The resource grammar we develop consists of
44 categories and 190 functions3 which cover a
fair enough part of language and is enough for
</bodyText>
<footnote confidence="0.883087">
3 http://www.grammaticalframework.org/lib/doc/synopsis.html
</footnote>
<page confidence="0.997796">
159
</page>
<bodyText confidence="0.999900461538462">
building domain specific application grammars
including multilingual dialogue systems,
controlled language translation, software
localization etc. Since a common API for
multiple languages is provided, this grammar is
useful in applications where we need to parse
and translate the text from one to many other
languages.
However our approach of common abstract
syntax has its limitations and does not cover all
aspects of Urdu language. This is why it is not
possible to use our grammar for arbitrary text
parsing and generation.
</bodyText>
<sectionHeader confidence="0.989108" genericHeader="references">
10. References
</sectionHeader>
<reference confidence="0.999808513513513">
Angelov K. and Ranta A. 2010. Implementing
controlled Languages in GF. Controlled Natural
Language (CNL) 2009, LNCS/LNAI Vol. 5972
(To appear)
Attempto 2008. Project Homepage.
attempto.ifi.uzh.ch/site/
Butt M., 1995. The Structures of Complex Predicate
in Hindi Stanford: CSLI Publications
Butt M., Dyvik H., King T. H., Masuichi H., and
Rohrer C. 2002. The Parallel Grammar Project.
In Proceedings of COLING-2002 Workshop on
Grammar Engineering and Evaluation. pp. 1-7.
Butt, M. and King, T. H. 2007. Urdu in a Parallel
Grammar Development Environment&apos;. In T.
Takenobu and C.-R. Huang (eds.) Language
Resources and Evaluation: Special Issue on Asian
Language Processing: State of the Art Resources
and Processing 41:191-207.
Forsberg M., and Ranta A., 2004. Functional
Morphology. Proceedings of the Ninth ACM
SIGPLAN International Conference of Functional
Programming, Snowbird, Utah.
Humayoun M., Hammarström H., and Ranta A.
Urdu Morphology, Orthography and Lexicon
Extraction. CAASL-2: The Second Workshop on
Computational Approaches to Arabic Script-based
Languages, July 21-22, 2007, LSA 2007
Linguistic Institute, Stanford University. 2007
Hussain, S. 2004. Urdu Localization Project.
COLING:WORKSHOP ON Computational
Approaches to Arabic Script-based Languages,
Geneva. pp. 80-81
Khalid, U., Karamat, N., Iqbal, S. and Hussain, S.
2009. Semi-Automatic Lexical Functional
Grammar Development. Proceedings of the
Conference on Language &amp; Technology 2009.
Masica C., 1991. The Indo-Aryan Languages,
Cambridge, Cambridge University Press, ISBN
9780521299442.
Ranta A., Grammatical Framework: A Type-
Theoretical Grammar Formalism. The Journal of
Functional Programming 14(2) (2004) 145–189.
Ranta A. The GF Resource Grammar Library
A systematic presentation of the library from the
linguistic point of view. to appear in the on-line
journal Linguistics in Language Technology,
2009a.
Ranta A. Grammars as Software Libraries. From
Semantics to Computer Science, Cambridge
University Press, Cambridge, pp. 281-308, 2009b.
Rizvi, S. M. J. 2007. Development of Algorithms and
Computational Grammar of Urdu. Department of
Computer &amp; Information Sciences/ Pakistan
Institute of Engineering and Applied Sciences
Nilore Islamabad. Pakistan.
Sarfraz H. and Naseem T., 2007. Sentence
Segmentation and Segment Re-Ordering for
English to Urdu Machine Translation. In
Proceedings of the Conference on Language and
Technology, August 07-11, 2007, University of
Peshawar, Pakistan.
Schmidt R. L., 1999. Urdu an Essential
Grammar,Routledge Grammars.
Sinha R., and Mahesh K., 2009. Developing English-
Urdu Machine Translation Via Hind., Third
Workshop on Computational Approaches to
Arabic Script-based Languages (CAASL3) in
conjunction with The twelfth Machine Translation
Summit. Ottawa, Ontario, Canada.
Zafar M. and Masood A., 2009. Interactive English
to Urdu Machine Translation using Example-
Based Approach. International Journal on
Computer Science and Engineering Vol.1(3),
2009, pp 275-282.
</reference>
<page confidence="0.997484">
160
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.420773">
<title confidence="0.99903">An Open Source Urdu Resource Grammar</title>
<author confidence="0.997973">Shafqat M Virk Muhammad Humayoun Aarne Ranta</author>
<affiliation confidence="0.997062">Department of Applied IT Laboratory of Mathmatics Department of CS &amp; Eng University of Gothenburg University of Savoie University of</affiliation>
<abstract confidence="0.964820464285714">virk@chalmers.se mhuma@univ-savoie.fr aarne@chalmers.se Abstract We develop a grammar for Urdu in Grammatical Framework (GF). GF is a programming language for defining multilingual grammar applications. GF resource grammar library currently supports 16 languages. These grammars follow an Interlingua approach and consist of morphology and syntax modules that cover a wide range of features of a language. In this paper we explore different syntactic features of the Urdu language, and show how to fit them in the multilingual framework of GF. We also discuss how we cover some of the distinguishing features of Urdu such as, ergativity in verb agreement (see Sec 4.2). The main purpose of GF resource grammar library is to provide an easy way to write natural language applications without knowing the details of syntax, morphology and lexicon. To demonstrate it, we use Urdu resource grammar to add support for Urdu in the work reported in (Angelov and Ranta, 2010) which is an implementation of Attempto (Attempto 2008) in GF.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>K Angelov</author>
<author>A Ranta</author>
</authors>
<date>2010</date>
<booktitle>Implementing controlled Languages in GF. Controlled Natural Language (CNL) 2009, LNCS/LNAI</booktitle>
<volume>5972</volume>
<note>(To appear)</note>
<contexts>
<context position="1193" citStr="Angelov and Ranta, 2010" startWordPosition="181" endWordPosition="184">tax modules that cover a wide range of features of a language. In this paper we explore different syntactic features of the Urdu language, and show how to fit them in the multilingual framework of GF. We also discuss how we cover some of the distinguishing features of Urdu such as, ergativity in verb agreement (see Sec 4.2). The main purpose of GF resource grammar library is to provide an easy way to write natural language applications without knowing the details of syntax, morphology and lexicon. To demonstrate it, we use Urdu resource grammar to add support for Urdu in the work reported in (Angelov and Ranta, 2010) which is an implementation of Attempto (Attempto 2008) in GF. 1. Introduction Urdu is an Indo-European language of the IndoAryan family, widely spoken in south Asia. It is a national language of Pakistan and one of the official languages of India. It is written in a modified Perso-Arabic script from right to left. As regards vocabulary, it has a strong influence of Arabic and Persian along with some borrowing from Turkish and English. Urdu is an SOV language having fairly free word order. It is closely related to Hindi as both originated from the dialect of Delhi region called khari boli (Mas</context>
<context position="20656" citStr="Angelov and Ranta, 2010" startWordPosition="3578" endWordPosition="3581">r&apos; pi:ta he: “drinks hot milk”). Finally clause (ﮯﮨ 1lu هدود م_. ﮦو h grm ddr&apos; pi:ta he: “he drinks hot milk”) is build from NP (ﮦو h “he”) which is build from pronoun (ﮦو h “he”) and VP (ﮯﮨ 1lu هدود مy. grm ddr&apos; pi:ta he: “drinks hot milk”). Language dependent concrete syntax assures that correct forms of words are selected from lexicon and word order is according to rules of that specific language. While, morphology makes sure that correct forms of words are built during lexicon development. 6. An application: Attempto An experiment of implementing Controlled languages in GF is reported in (Angelov and Ranta, 2010). In this experiment, a grammar for Attempto Controlled English (Attempto, 2008) is implemented and then ported to six languages (English, Finnish, French, German, Italian, and Swedish) using the GF resource library. To demonstrate the usefulness of our grammar and to check its correctness, we have added Urdu to this set. Now, we can translate Attempto documents between all of these seven languages. The implementation followed the general recipe for how new languages can be added (Angelov and Ranta, 2009) and created no surprises. However the details of this implementation are beyond the scope</context>
</contexts>
<marker>Angelov, Ranta, 2010</marker>
<rawString>Angelov K. and Ranta A. 2010. Implementing controlled Languages in GF. Controlled Natural Language (CNL) 2009, LNCS/LNAI Vol. 5972 (To appear)</rawString>
</citation>
<citation valid="true">
<authors>
<author>Attempto</author>
</authors>
<title>Project Homepage. attempto.ifi.uzh.ch/site/</title>
<date>2008</date>
<contexts>
<context position="1248" citStr="Attempto 2008" startWordPosition="191" endWordPosition="192"> this paper we explore different syntactic features of the Urdu language, and show how to fit them in the multilingual framework of GF. We also discuss how we cover some of the distinguishing features of Urdu such as, ergativity in verb agreement (see Sec 4.2). The main purpose of GF resource grammar library is to provide an easy way to write natural language applications without knowing the details of syntax, morphology and lexicon. To demonstrate it, we use Urdu resource grammar to add support for Urdu in the work reported in (Angelov and Ranta, 2010) which is an implementation of Attempto (Attempto 2008) in GF. 1. Introduction Urdu is an Indo-European language of the IndoAryan family, widely spoken in south Asia. It is a national language of Pakistan and one of the official languages of India. It is written in a modified Perso-Arabic script from right to left. As regards vocabulary, it has a strong influence of Arabic and Persian along with some borrowing from Turkish and English. Urdu is an SOV language having fairly free word order. It is closely related to Hindi as both originated from the dialect of Delhi region called khari boli (Masica, 1991). We develop a grammar for Urdu that addresse</context>
<context position="20736" citStr="Attempto, 2008" startWordPosition="3591" endWordPosition="3592">“he drinks hot milk”) is build from NP (ﮦو h “he”) which is build from pronoun (ﮦو h “he”) and VP (ﮯﮨ 1lu هدود مy. grm ddr&apos; pi:ta he: “drinks hot milk”). Language dependent concrete syntax assures that correct forms of words are selected from lexicon and word order is according to rules of that specific language. While, morphology makes sure that correct forms of words are built during lexicon development. 6. An application: Attempto An experiment of implementing Controlled languages in GF is reported in (Angelov and Ranta, 2010). In this experiment, a grammar for Attempto Controlled English (Attempto, 2008) is implemented and then ported to six languages (English, Finnish, French, German, Italian, and Swedish) using the GF resource library. To demonstrate the usefulness of our grammar and to check its correctness, we have added Urdu to this set. Now, we can translate Attempto documents between all of these seven languages. The implementation followed the general recipe for how new languages can be added (Angelov and Ranta, 2009) and created no surprises. However the details of this implementation are beyond the scope of this paper. 7. Related Work A suite of Urdu resources were reported in (Huma</context>
</contexts>
<marker>Attempto, 2008</marker>
<rawString>Attempto 2008. Project Homepage. attempto.ifi.uzh.ch/site/</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Butt</author>
</authors>
<title>The Structures of Complex Predicate in Hindi Stanford:</title>
<date>1995</date>
<publisher>CSLI Publications</publisher>
<marker>Butt, 1995</marker>
<rawString>Butt M., 1995. The Structures of Complex Predicate in Hindi Stanford: CSLI Publications</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Butt</author>
<author>H Dyvik</author>
<author>T H King</author>
<author>H Masuichi</author>
<author>C Rohrer</author>
</authors>
<title>The Parallel Grammar Project.</title>
<date>2002</date>
<booktitle>In Proceedings of COLING-2002 Workshop on Grammar Engineering and Evaluation.</booktitle>
<pages>1--7</pages>
<marker>Butt, Dyvik, King, Masuichi, Rohrer, 2002</marker>
<rawString>Butt M., Dyvik H., King T. H., Masuichi H., and Rohrer C. 2002. The Parallel Grammar Project. In Proceedings of COLING-2002 Workshop on Grammar Engineering and Evaluation. pp. 1-7.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Butt</author>
<author>T H King</author>
</authors>
<title>Urdu in a Parallel Grammar Development Environment&apos;.</title>
<date>2007</date>
<booktitle>Language Resources and Evaluation: Special Issue on Asian Language Processing: State of the Art Resources and Processing</booktitle>
<pages>41--191</pages>
<editor>In T. Takenobu and C.-R. Huang (eds.)</editor>
<marker>Butt, King, 2007</marker>
<rawString>Butt, M. and King, T. H. 2007. Urdu in a Parallel Grammar Development Environment&apos;. In T. Takenobu and C.-R. Huang (eds.) Language Resources and Evaluation: Special Issue on Asian Language Processing: State of the Art Resources and Processing 41:191-207.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Forsberg</author>
<author>A Ranta</author>
</authors>
<title>Functional Morphology.</title>
<date>2004</date>
<booktitle>Proceedings of the Ninth ACM SIGPLAN International Conference of Functional Programming,</booktitle>
<location>Snowbird, Utah.</location>
<contexts>
<context position="5234" citStr="Forsberg and Ranta, 2004" startWordPosition="799" endWordPosition="802"> Romanian and Dutch. Most of these languages are European languages. We developed resource grammar for Urdu making it the 17th in total and the first south Asian language. Resource grammars for several other languages (e.g. Arabic, Turkish, Persian, Maltese and Swahili) are under construction. 3. Morphology In GF resource grammars a test lexicon of 350 words is provided for each language. These words are built through lexical functions. The rules for defining Urdu morphology are borrowed from (Humayoun et el., 2006), in which Urdu morphology was developed in the Functional Morphology toolkit (Forsberg and Ranta, 2004). Although it is possible to automatically generate equivalent GF code from it, we wrote the rules of morphology from scratch in GF, to receive better abstractions than are possible in generated code. Furthermore, we extend this work by including compound words. However, the details of morphology are beyond the scope of this paper, and its focus is on syntax. 4. Syntax While morphological analysis deals with the formation and inflection of individual words, syntax shows how these words (parts of speech) are grouped together to build well formed phrases. In this section we show how this works a</context>
</contexts>
<marker>Forsberg, Ranta, 2004</marker>
<rawString>Forsberg M., and Ranta A., 2004. Functional Morphology. Proceedings of the Ninth ACM SIGPLAN International Conference of Functional Programming, Snowbird, Utah.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Humayoun</author>
<author>H Hammarström</author>
<author>A Ranta</author>
</authors>
<title>Urdu Morphology, Orthography and Lexicon Extraction.</title>
<date>2007</date>
<booktitle>CAASL-2: The Second Workshop on Computational Approaches to Arabic Script-based Languages,</booktitle>
<institution>Linguistic Institute, Stanford University.</institution>
<marker>Humayoun, Hammarström, Ranta, 2007</marker>
<rawString>Humayoun M., Hammarström H., and Ranta A. Urdu Morphology, Orthography and Lexicon Extraction. CAASL-2: The Second Workshop on Computational Approaches to Arabic Script-based Languages, July 21-22, 2007, LSA 2007 Linguistic Institute, Stanford University. 2007</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Hussain</author>
</authors>
<title>Urdu Localization Project.</title>
<date>2004</date>
<booktitle>COLING:WORKSHOP ON Computational Approaches to Arabic Script-based Languages,</booktitle>
<pages>80--81</pages>
<location>Geneva.</location>
<contexts>
<context position="22203" citStr="Hussain, 2004" startWordPosition="3827" endWordPosition="3828"> Pargram project (Butt et el., 2007) aims at building a set of parallel grammars including Urdu. The grammars in Pargram are connected with each other by transfer functions, rather than a common representation. Further, the Urdu grammar is still one of the least implemented grammars in Pargram at the moment. This project is based on the theoretical framework of lexical functional grammar (LFG). Other than Pargram, most work is based on LFG and translation is unidirectional i.e. from English to Urdu only. For instance, English to Urdu MT System is developed under the Urdu Localization Project (Hussain, 2004), (Sarfraz and Naseem, 2007) and (Khalid et el., 2009). Similarly, (Zafer and Masood, 2009) reports another English-Urdu MT system developed with example based approach. On the other hand, (Sinha and Mahesh, 2009) presents a strategy for deriving Urdu sentences from English-Hindi MT system. However, it seems to be a partial solution to the problem. 8. Future Work The common resource grammar API does not cover all the aspects of Urdu language, and nongeneralizable language-specific features are supposed to be handled in language-specific modules. In our current implementation of Urdu resource g</context>
</contexts>
<marker>Hussain, 2004</marker>
<rawString>Hussain, S. 2004. Urdu Localization Project. COLING:WORKSHOP ON Computational Approaches to Arabic Script-based Languages, Geneva. pp. 80-81</rawString>
</citation>
<citation valid="true">
<authors>
<author>U Khalid</author>
<author>N Karamat</author>
<author>S Iqbal</author>
<author>S Hussain</author>
</authors>
<title>Semi-Automatic Lexical Functional Grammar Development.</title>
<date>2009</date>
<booktitle>Proceedings of the Conference on Language &amp; Technology</booktitle>
<marker>Khalid, Karamat, Iqbal, Hussain, 2009</marker>
<rawString>Khalid, U., Karamat, N., Iqbal, S. and Hussain, S. 2009. Semi-Automatic Lexical Functional Grammar Development. Proceedings of the Conference on Language &amp; Technology 2009.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C Masica</author>
</authors>
<title>The Indo-Aryan Languages, Cambridge,</title>
<date>1991</date>
<pages>9780521299442</pages>
<publisher>Cambridge University Press,</publisher>
<contexts>
<context position="1803" citStr="Masica, 1991" startWordPosition="287" endWordPosition="288">10) which is an implementation of Attempto (Attempto 2008) in GF. 1. Introduction Urdu is an Indo-European language of the IndoAryan family, widely spoken in south Asia. It is a national language of Pakistan and one of the official languages of India. It is written in a modified Perso-Arabic script from right to left. As regards vocabulary, it has a strong influence of Arabic and Persian along with some borrowing from Turkish and English. Urdu is an SOV language having fairly free word order. It is closely related to Hindi as both originated from the dialect of Delhi region called khari boli (Masica, 1991). We develop a grammar for Urdu that addresses problems related to automated text translation using an Interlingua approach and provide a way to precisely translate text. This is described in Section 2. Then we describe different levels of grammar development including morphology (Section 3) and syntax (Section 4). In Section 6, we discuss an application in which a semanticsdriven translation system is built upon these components. 2. GF (Grammatical Framework) GF (Grammatical Framework, Ranta 2004) is a tool for working with grammars, implementing a programming language for writing grammars wh</context>
</contexts>
<marker>Masica, 1991</marker>
<rawString>Masica C., 1991. The Indo-Aryan Languages, Cambridge, Cambridge University Press, ISBN 9780521299442.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Ranta</author>
</authors>
<title>Grammatical Framework: A TypeTheoretical Grammar Formalism.</title>
<date>2004</date>
<journal>The Journal of Functional Programming</journal>
<volume>14</volume>
<issue>2</issue>
<pages>145--189</pages>
<contexts>
<context position="2306" citStr="Ranta 2004" startWordPosition="363" endWordPosition="364">losely related to Hindi as both originated from the dialect of Delhi region called khari boli (Masica, 1991). We develop a grammar for Urdu that addresses problems related to automated text translation using an Interlingua approach and provide a way to precisely translate text. This is described in Section 2. Then we describe different levels of grammar development including morphology (Section 3) and syntax (Section 4). In Section 6, we discuss an application in which a semanticsdriven translation system is built upon these components. 2. GF (Grammatical Framework) GF (Grammatical Framework, Ranta 2004) is a tool for working with grammars, implementing a programming language for writing grammars which in term is based on a mathematical theory about languages and grammars1. Many multilingual dialog and text generation applications have been built using GF. GF grammars have two levels the abstract and the concrete syntax2. The abstract syntax is language independent and is common to all languages in GF grammar library. It is based on common syntactic or semantic constructions, which work for all the involved languages on an appropriate level of abstraction. The concrete syntax is language depe</context>
<context position="5234" citStr="Ranta, 2004" startWordPosition="801" endWordPosition="802"> Dutch. Most of these languages are European languages. We developed resource grammar for Urdu making it the 17th in total and the first south Asian language. Resource grammars for several other languages (e.g. Arabic, Turkish, Persian, Maltese and Swahili) are under construction. 3. Morphology In GF resource grammars a test lexicon of 350 words is provided for each language. These words are built through lexical functions. The rules for defining Urdu morphology are borrowed from (Humayoun et el., 2006), in which Urdu morphology was developed in the Functional Morphology toolkit (Forsberg and Ranta, 2004). Although it is possible to automatically generate equivalent GF code from it, we wrote the rules of morphology from scratch in GF, to receive better abstractions than are possible in generated code. Furthermore, we extend this work by including compound words. However, the details of morphology are beyond the scope of this paper, and its focus is on syntax. 4. Syntax While morphological analysis deals with the formation and inflection of individual words, syntax shows how these words (parts of speech) are grouped together to build well formed phrases. In this section we show how this works a</context>
</contexts>
<marker>Ranta, 2004</marker>
<rawString>Ranta A., Grammatical Framework: A TypeTheoretical Grammar Formalism. The Journal of Functional Programming 14(2) (2004) 145–189.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Ranta</author>
</authors>
<title>The GF Resource Grammar Library A systematic presentation of the library from the linguistic point of view. to appear in the on-line journal Linguistics in Language Technology,</title>
<date>2009</date>
<contexts>
<context position="4012" citStr="Ranta, 2009" startWordPosition="621" endWordPosition="622">oncrete syntaxes for one abstract. This 1 http://www.grammaticalframework.org 2 In given example code ’fun’ and ’cat’ belongs to abstract syntax, ’lin’ and ’lincat’ belongs to concrete syntax 153 Proceedings of the 8th Workshop on Asian Language Resources, pages 153–160, Beijing, China, 21-22 August 2010. c�2010 Asian Federation for Natural Language Processing makes it possible to parse text in one language and translate it to multiple languages. Grammars in GF can be roughly classified into two kinds: resource grammars and application grammars. Resource grammars are general purpose grammars (Ranta, 2009a) that try to cover the general aspects of a language linguistically and whose abstract syntax encodes syntactic structures. Application grammars, on the other hand, encode semantic structures, but in order to be accurate they are typically limited to specific domains. However, they are not written from scratch for each domain, but they use resource grammars as libraries (Ranta 2009b). Previously GF had resource grammars for 16 languages: English, Italian, Spanish, French, Catalan, Swedish, Norwegian, Danish, Finish, Russian, Bulgarian, German, Interlingua (an artificial language), Polish, Ro</context>
<context position="21166" citStr="Ranta, 2009" startWordPosition="3659" endWordPosition="3660">mpto An experiment of implementing Controlled languages in GF is reported in (Angelov and Ranta, 2010). In this experiment, a grammar for Attempto Controlled English (Attempto, 2008) is implemented and then ported to six languages (English, Finnish, French, German, Italian, and Swedish) using the GF resource library. To demonstrate the usefulness of our grammar and to check its correctness, we have added Urdu to this set. Now, we can translate Attempto documents between all of these seven languages. The implementation followed the general recipe for how new languages can be added (Angelov and Ranta, 2009) and created no surprises. However the details of this implementation are beyond the scope of this paper. 7. Related Work A suite of Urdu resources were reported in (Humayoun et el., 2006) including a fairly complete open-source Urdu morphology and a small fragment of syntax in GF. In this sense, it is a predecessor of Urdu resource grammar, implemented in a different but related formalism. Like the GF resource library, Pargram project (Butt et el., 2007) aims at building a set of parallel grammars including Urdu. The grammars in Pargram are connected with each other by transfer functions, rat</context>
</contexts>
<marker>Ranta, 2009</marker>
<rawString>Ranta A. The GF Resource Grammar Library A systematic presentation of the library from the linguistic point of view. to appear in the on-line journal Linguistics in Language Technology, 2009a.</rawString>
</citation>
<citation valid="false">
<authors>
<author>A Ranta</author>
</authors>
<title>Grammars as Software Libraries. From Semantics to Computer Science,</title>
<pages>281--308</pages>
<publisher>Cambridge University Press,</publisher>
<location>Cambridge,</location>
<marker>Ranta, </marker>
<rawString>Ranta A. Grammars as Software Libraries. From Semantics to Computer Science, Cambridge University Press, Cambridge, pp. 281-308, 2009b.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S M J Rizvi</author>
</authors>
<date>2007</date>
<booktitle>Development of Algorithms and Computational Grammar of Urdu. Department of Computer &amp; Information Sciences/ Pakistan Institute of Engineering and Applied Sciences Nilore Islamabad. Pakistan.</booktitle>
<marker>Rizvi, 2007</marker>
<rawString>Rizvi, S. M. J. 2007. Development of Algorithms and Computational Grammar of Urdu. Department of Computer &amp; Information Sciences/ Pakistan Institute of Engineering and Applied Sciences Nilore Islamabad. Pakistan.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Sarfraz</author>
<author>T Naseem</author>
</authors>
<title>Sentence Segmentation and Segment Re-Ordering for English to Urdu Machine Translation.</title>
<date>2007</date>
<booktitle>In Proceedings of the Conference on Language and Technology,</booktitle>
<institution>University of Peshawar, Pakistan.</institution>
<contexts>
<context position="22231" citStr="Sarfraz and Naseem, 2007" startWordPosition="3829" endWordPosition="3832">(Butt et el., 2007) aims at building a set of parallel grammars including Urdu. The grammars in Pargram are connected with each other by transfer functions, rather than a common representation. Further, the Urdu grammar is still one of the least implemented grammars in Pargram at the moment. This project is based on the theoretical framework of lexical functional grammar (LFG). Other than Pargram, most work is based on LFG and translation is unidirectional i.e. from English to Urdu only. For instance, English to Urdu MT System is developed under the Urdu Localization Project (Hussain, 2004), (Sarfraz and Naseem, 2007) and (Khalid et el., 2009). Similarly, (Zafer and Masood, 2009) reports another English-Urdu MT system developed with example based approach. On the other hand, (Sinha and Mahesh, 2009) presents a strategy for deriving Urdu sentences from English-Hindi MT system. However, it seems to be a partial solution to the problem. 8. Future Work The common resource grammar API does not cover all the aspects of Urdu language, and nongeneralizable language-specific features are supposed to be handled in language-specific modules. In our current implementation of Urdu resource grammar we have not covered t</context>
</contexts>
<marker>Sarfraz, Naseem, 2007</marker>
<rawString>Sarfraz H. and Naseem T., 2007. Sentence Segmentation and Segment Re-Ordering for English to Urdu Machine Translation. In Proceedings of the Conference on Language and Technology, August 07-11, 2007, University of Peshawar, Pakistan.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R L Schmidt</author>
</authors>
<title>Urdu an Essential Grammar,Routledge Grammars.</title>
<date>1999</date>
<marker>Schmidt, 1999</marker>
<rawString>Schmidt R. L., 1999. Urdu an Essential Grammar,Routledge Grammars.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Sinha</author>
<author>K Mahesh</author>
</authors>
<title>Developing EnglishUrdu Machine Translation Via Hind., Third Workshop on Computational Approaches to Arabic Script-based Languages (CAASL3) in conjunction with The twelfth Machine Translation Summit.</title>
<date>2009</date>
<location>Ottawa, Ontario, Canada.</location>
<contexts>
<context position="22416" citStr="Sinha and Mahesh, 2009" startWordPosition="3857" endWordPosition="3860">ation. Further, the Urdu grammar is still one of the least implemented grammars in Pargram at the moment. This project is based on the theoretical framework of lexical functional grammar (LFG). Other than Pargram, most work is based on LFG and translation is unidirectional i.e. from English to Urdu only. For instance, English to Urdu MT System is developed under the Urdu Localization Project (Hussain, 2004), (Sarfraz and Naseem, 2007) and (Khalid et el., 2009). Similarly, (Zafer and Masood, 2009) reports another English-Urdu MT system developed with example based approach. On the other hand, (Sinha and Mahesh, 2009) presents a strategy for deriving Urdu sentences from English-Hindi MT system. However, it seems to be a partial solution to the problem. 8. Future Work The common resource grammar API does not cover all the aspects of Urdu language, and nongeneralizable language-specific features are supposed to be handled in language-specific modules. In our current implementation of Urdu resource grammar we have not covered those features. For example in Urdu it is possible to build a VP from only VPSlash (VPSlash category represents object missing VP) e.g (ﮯﮨ t14 kȹata he:) without adding the object. This </context>
</contexts>
<marker>Sinha, Mahesh, 2009</marker>
<rawString>Sinha R., and Mahesh K., 2009. Developing EnglishUrdu Machine Translation Via Hind., Third Workshop on Computational Approaches to Arabic Script-based Languages (CAASL3) in conjunction with The twelfth Machine Translation Summit. Ottawa, Ontario, Canada.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Zafar</author>
<author>A Masood</author>
</authors>
<title>Interactive English to Urdu Machine Translation using ExampleBased Approach.</title>
<date>2009</date>
<journal>International Journal on Computer Science and Engineering</journal>
<volume>1</volume>
<issue>3</issue>
<pages>275--282</pages>
<marker>Zafar, Masood, 2009</marker>
<rawString>Zafar M. and Masood A., 2009. Interactive English to Urdu Machine Translation using ExampleBased Approach. International Journal on Computer Science and Engineering Vol.1(3), 2009, pp 275-282.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>