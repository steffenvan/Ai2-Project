<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000002">
<title confidence="0.941207">
Hybrid text mining for finding abbreviations and their definitions
</title>
<author confidence="0.685627">
Youngja Park, Roy J. Byrd
</author>
<affiliation confidence="0.275494">
IBM Thomas J. Watson Research Center
</affiliation>
<address confidence="0.695324">
P.O. Box 704, Yorktown Heights
New York 10598, USA
</address>
<email confidence="0.974037">
{pyoungja, roybyrd}@us.ibm.com
</email>
<sectionHeader confidence="0.996927" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.9999216">
We present a hybrid text mining
method for finding abbreviations and
their definitions in free format texts. To
deal with the problem, this method
employs pattern-based abbreviation
rules in addition to text markers and cue
words. The pattern-based rules describe
how abbreviations are formed from
definitions. Rules can be generated
automatically and/or manually and can
be augmented when the system
processes new documents. The
proposed method has the advantages of
high accuracy, high flexibility, wide
coverage, and fast recognition.
</bodyText>
<sectionHeader confidence="0.961461" genericHeader="introduction">
Introduction
</sectionHeader>
<bodyText confidence="0.99989995945946">
Many organizations have a large number of
on-line documents -- such as manuals, technical
reports, transcriptions of customer service calls
or telephone conferences, and electronic mail --
which contain information of great potential
value. In order to utilize the knowledge these
data contain, we need to be able to create
common glossaries of domain-specific names
and terms. While we were working on automatic
glossary extraction, we noticed that technical
documents contain a lot of abbreviated terms,
which carry important knowledge about the
domains. We concluded that the correct
recognition of abbreviations and their definitions
is very important for understanding the
documents and for extracting information from
them [1, 6, 9, 11].
An abbreviation is usually formed by a
simple method: taking zero or more letters from
each word of its definition. However, the
tendency to make unique, interesting
abbreviations is growing. So, it is easy to find
new kinds of abbreviations which cannot be
processed by hard-coded heuristics-based
algorithms [1, 6, 7, 13, 14], since they are
formed in ways not anticipated when the
algorithms were devised.
We propose a hybrid text mining approach to
deal with these problems. We use three kinds of
knowledge: pattern-based abbreviation rules,
text markers, and linguistic cue words. An
abbreviation rule consists of an abbreviation
pattern, a definition pattern and a formation rule.
The formation rule describes how an
abbreviation is formed from a definition. There
may exist multiple formation rules for a given
pair of abbreviation and definition patterns.
Abbreviation rules are described in Section 3.
Text markers are special symbols frequently
used to imply the abbreviation-definition
relationship in texts. They include characters
such as ‘(...)’, ‘[...]’, and ‘=’. Cue words are
particular words occurring in the local contexts
of abbreviations and the definitions, which
strongly imply the abbreviation relationship.
They include words such as “or”, “short”,
“acronym” and “stand”. Text markers and cue
words are discussed in section 2.4.
This system has 5 components --
abbreviation recognizer, definition finder, rule
applier, abbreviation matcher and best match
selector -- as shown in Figure 1. The
abbreviation recognizer seeks candidate
abbreviations in a text and generates their
patterns (Section 1). When an abbreviation
candidate is found, the system determines the
contexts within which to look for a definition.
When it finds a candidate definition, it generates
a pattern for it also (Section 2).
Having generated the abbreviation pattern
and the definition pattern, the system first
searches the rulebase for a rule which would
generate the abbreviation from the definition.
The rules for the given candidates are applied in
the order of rule priorities (Section 4.1). If the
rulebase is empty or if no existing rule matches
the candidate abbreviation with the candidate
definition, the system runs the abbreviation
matcher and generates a new abbreviation rule.
The abbreviation matcher consists of 5 layered
matching algorithms (Section 4.2). If the
matcher succeeds, new rules may be added to
the rulebase, allowing it to grow as the system
processes new documents.
</bodyText>
<figureCaption confidence="0.981883">
Fig. 1. System Overview
</figureCaption>
<sectionHeader confidence="0.928486" genericHeader="method">
1. Abbreviation Recognition
</sectionHeader>
<subsectionHeader confidence="0.999816">
1.1 Candidate Abbreviations
</subsectionHeader>
<bodyText confidence="0.999508625">
An abbreviation is defined as a shortened
form of a written word or phrase used in place of
the full form [2]. Acronyms are a special case of
abbreviations which are devoted to multi-word
full forms. In this work, we consider a string of
alphabetic, numeric and special characters as a
candidate abbreviation if it satisfies the
following three conditions:
</bodyText>
<listItem confidence="0.990797909090909">
(1) Its first character is alphabetic or numeric
(2) Its length is between 2 and 10 characters
(3) It contains at least one capital letter
and if the string meets the following restrictions:
(1) It is not a known (dictionary) word
containing an initial capital letter and
appearing as the first word in a sentence.
(2) It is not a member of a predefined set of
person and location names.
(3) It is not a member of user-defined list of
stopwords.
</listItem>
<bodyText confidence="0.971411333333333">
The first restriction keeps many common
words from being treated as possible
abbreviations. Many proper names have the
same characteristics above and may be
recognized as abbreviations. To reduce
generating false candidates and thus improve
system performace, we use a list of proper
names created by the Talent system[3, 10]. We
also provide users with a way to create a user
defined list of stopwords.
Based on these conditions, AI (Artificial
Intelligence), Baracuda (Boldly Advanced and
</bodyText>
<listItem confidence="0.850630875">
Refined Aircraft Concept Under Development
for AGATE), SgRP (seating reference point),
2MASS (Two-Micron All Sky Survey), ACIS
(Advanced CCD Imaging Spectrometer), W3C
(World Wide Web Consortium), T/C/F
(Trim/Chassis/Final) are recognized as candidate
abbreviations.
1. 2 Abbreviation Patterns
</listItem>
<bodyText confidence="0.993763363636364">
Once a candidate abbreviation is identified an
abbreviation pattern is generated from it. An
abbreviation pattern is a string of ‘c’ and ‘n’
characters. An alphabetic character is replaced
with a ‘c’ and a sequence of numeric characters
(including ‘.’ and ‘,’) is replaced with an ‘n’
regardless of its length. Non-alphanumeric
characters such as hyphen, slash, and ampersand
are not reflected in abbreviation patterns. Some
examples of candidate abbreviations and their
patterns are in Table 1.
</bodyText>
<tableCaption confidence="0.961248">
Table 1 Abbreviation Patterns
</tableCaption>
<table confidence="0.696475857142857">
Abbreviations Patterns
2MASS ncccc
NEXT cccc
R&amp;D cc
SN1987A ccnc
T/C/F ccc
V3.5 cn
</table>
<sectionHeader confidence="0.989147" genericHeader="method">
2. Definition Finding
</sectionHeader>
<subsectionHeader confidence="0.999871">
2.1 Search Space
</subsectionHeader>
<bodyText confidence="0.999936">
This system searches for a possible definition
of a candidate abbreviation in its left and right
contexts. The size of the search space is a
function of the length of the abbreviation and the
</bodyText>
<figure confidence="0.9940543125">
Abbreviation
Recognizer
Stopwords
Definition
Finder
Names
Abbreviation
Matcher
Rule
Applier
Rule
Base
RuleBase
Update
Best-Match
Selector
</figure>
<bodyText confidence="0.998522625">
maximally allowed distance (offset) between a
definition and its abbreviation.
We have analyzed about 4,500 abbreviations
and their definitions in computer science texts.
The maximum number of skipped words (words
in a definition that are not reflected in the
abbreviation) was 4 in our sample data. Based
on this analysis, we decided that, for relatively
short abbreviations (from two to four
characters), the length of a definition in words
should not be greater than twice the abbreviation
length. For long abbreviations (five or more
characters), the definition should not be longer
than the abbreviation length plus 5. Thus, the
maximum length of a definition D of an
abbreviation A is calculated as follows.
</bodyText>
<equation confidence="0.692252">
max. |D |= min {|A |+ 5, |A |* 2}
</equation>
<bodyText confidence="0.968225">
The maximum offset means the longest
distance of a definition from an abbreviation. If
a definition is in the left context, the distance is
the number of words from the last word of the
definition to the abbreviation. If a definition is in
the right context, the distance is the number of
words from the abbreviation to the first word of
the definition. We set the maximum offset to 10
in this experiment. Therefore, the size of each
search space is {max. |D |+ 10} words to the left
and right of the candidate abbreviation as shown
in Fig 2.
Fig. 2 Search Space for Definitions
</bodyText>
<subsectionHeader confidence="0.997882">
2.2 Definition Search
</subsectionHeader>
<bodyText confidence="0.969738125">
The system searches for candidate definitions
within the search space. A sequence of words in
the contexts is considered as a candidate
definition if it satisfies the following conditions.
(1) The first character of the first word of a
definition is matched with the first
character of the abbreviation (including
‘replacement match (Section 3)’).
</bodyText>
<listItem confidence="0.999210714285714">
(2) All words in a definition are in the same
sentence.
(3) The first word and the last word of a
definition are not prepositions, be-verbs,
modal verbs, conjunctions or pronouns.
(4) Some symbols such as (, ), [, ], {, }, =, !,
? may not be inside of a definition.
</listItem>
<subsectionHeader confidence="0.998776">
2.3 Definition Patterns
</subsectionHeader>
<bodyText confidence="0.994816">
Next, we preprocess the candidate definition
as follows to generate a pattern for the
candidate.
</bodyText>
<listItem confidence="0.994915666666667">
(1) replace special symbols with spaces.
Input/Output =&gt; Input Output
(2) separate strings of numerical characters.
Windows98 =&gt; Windows 98
(3) separate prefixes1) from the headword
reusable =&gt; re usable
</listItem>
<bodyText confidence="0.95603925">
A definition pattern consists of the characters
‘w’ (word), ‘s’ (stopword), ‘p’ (prefix), ‘h’
(headword) and ‘n’ (number). Some examples
of definitions and their patterns are in Table 2.
</bodyText>
<tableCaption confidence="0.942256">
Table 2 Definition Patterns
</tableCaption>
<table confidence="0.972856833333333">
Definitions Patterns
Product Database phw
Supernova 1987A phnw
Trim/Chassis/Final www
Two-Micron All Sky Survey wwwww
U.S. Department of Agriculture wwsw
</table>
<bodyText confidence="0.999970833333333">
In the above examples, the definition pattern
for ‘product database’ is ‘phw’, which is not
morphologically correct. This happens because
‘pro’ is included in our prefix list and ‘duct’ is
found in the dictionary and we don’t do any
semantic-level processing.
</bodyText>
<subsectionHeader confidence="0.997079">
2.4 Syntactic Cues
</subsectionHeader>
<bodyText confidence="0.904061555555556">
We extract some orthographic and syntactic
structure information as well as possible
definitions from the contexts. If there exist text
markers and/or cue words in the contexts of a
candidate abbreviation and its candidate
definition, the pair is highly likely to be valid
and to be useful for augmenting the abbreviation
1) We currently have 60 prefixes such as anti, bi,
electro, inter, pre, sub, trans, un.
</bodyText>
<figure confidence="0.982153142857143">
max. length of
a definition
D
search search
A
max. offset
D
</figure>
<bodyText confidence="0.5468375">
rulebase. The structures we take into account
include:
</bodyText>
<listItem confidence="0.994251625">
(1) (abbr) or [abbr]
(2) (definition) or [definition]
(3) abbr = definition
(4) definition = abbr
(5) abbr, or definition
(6) definition, or abbr
(7) abbr ... stands/short/acronym ... definition
(8) definition, abbr for short
</listItem>
<sectionHeader confidence="0.850831" genericHeader="method">
3. Abbreviation Rules
</sectionHeader>
<subsectionHeader confidence="0.999836">
3.1 Abbreviation Rule Format
</subsectionHeader>
<bodyText confidence="0.9960716">
An abbreviation rule describes how an
abbreviation is formed from its definition. An
abbreviation rule, R, consists of an abbreviation
pattern (A_Pattern), a definition pattern
(D_Pattern) and a formation rule (F_Rule).
</bodyText>
<equation confidence="0.547467">
R = &lt;A_Pattern, D_Pattern, F_Rule&gt;
</equation>
<bodyText confidence="0.999875340909091">
A formation rule defines how each character
in an abbreviation is formed from a definition.
An element in a formation rule has a pair of
values, a word number and a formation method.
A word number is the sequential location of a
word within the preprocessed definition. A
formation method represents how a character (or
characters) in the word takes part in the
abbreviation.
We have defined five kinds of formation
methods: ‘F’, ‘I’, ‘L’, ‘E’ and ‘R’. ‘F’ means
that the first character of a word occurs in the
abbreviation. Similarly, ‘I’ refers to an interior
character and ‘L’ indicates the last character of a
word. ‘E’ means ‘exact match’ and ‘R’ means
‘replacement match’. Exact match (‘E’) is used
only for matching numbers. If both a candidate
abbreviation and a candidate definition contain a
string of numeric characters, the two numbers
must be exactly same. For example, “V3” is not
an abbreviation of “Version 3.5” but may be an
abbreviation of “Version 3”. Replacement match
(‘R’) is for recognizing multi-characters
abbreviated with one character. In our current
list of replacement matches, ‘x’ in an
abbreviation may stand for “hex”, “ex”, “trans”,
or “cross”; ‘f’ may stand for “ph”; ‘1’ may
stand for “first”, “one”, or “1st”; and so on.
Some examples of abbreviation rules are listed
in Table 3.
In one example, the abbreviation rule for the
abbreviation “NEXT” and its definition “Near-
End CrossTalk” is &lt;cccc, www, (1, F) (2, F) (3,
R) (3, I)&gt;. The definition is encoded in “www”
because “Near-End” is divided in two words
“Near” and “End. This rule means that the first
character in the abbreviation ‘N’ is formed from
the first letter of the first word ‘(1, F)’; the
second character ‘E’ is from the first letter of the
second word ‘(2, F)’; the third character ‘X’ is
formed by a replacement match within the third
word (“Cross” is replaced into ‘X’); and ‘T’
comes from an interior character of the third
word.
</bodyText>
<tableCaption confidence="0.9917">
Table 3 Abbreviation Rule Expamples
</tableCaption>
<table confidence="0.9829678125">
2-MASS Two-Micron All Sky Survey
&lt;ncccc, wwwww , (1,R) (2,F) (3,F) (4,F) (5,F)&gt;
CFCs chlorofluorocarbons
&lt;cccc, w, (1,F) (1,I) (1, I) (1, L) &gt;
CONTOUR Comet Nuclear Tour
&lt;ccccccc, www, (1,F)(1,I)(2,F)(3,F)(3,I)(3,I)(3,L) &gt;
NEXT Near-End CrossTalk
&lt;cccc, www, (1,F) (2, F) (3, R) (3, I)&gt;
SN1987A Supernova 1987A
&lt;ccnc, phnw, (1, F) (2, F) (3, E) (4, F)&gt;
TAXI Transparent Asynchrous Transceiver Interface
&lt;cccc, wwww, (1,F) (2,F) (3,R) (4,F)&gt;
X2B Hexadecimal to Binary
&lt;cnc, phsw, (1,R) (3, R) (4, F)&gt;
W3C World Wide Web Consortium
&lt;cnc, wwww, (1,F) (2,F) (3,F) (4,F)&gt;
</table>
<subsectionHeader confidence="0.998237">
3.2 The Initial RuleBase
</subsectionHeader>
<bodyText confidence="0.9801942">
We constructed an initial rulebase from our
analysis of 4,500 abbreviations in the field of
computer science, which were collected from
the Web. We ran the Abbreviation Matcher
routine to generate patterns and formation rules
for the abbreviations and their definitions and
selected frequent rules for the initial rulebase.
The initial rulebase currently contains 45
abbreviation rules, some of which are shown in
Table 4.
</bodyText>
<sectionHeader confidence="0.998034" genericHeader="method">
4. Matching Abbreviations and
Definitions
</sectionHeader>
<subsectionHeader confidence="0.998119">
4.1 Rule Application
</subsectionHeader>
<bodyText confidence="0.994759">
When the system has found a candidate
abbreviation with a candidate definition, it
generates the A_pattern and the D_pattern,
</bodyText>
<tableCaption confidence="0.932337">
Table 4 Initial RuleBase
</tableCaption>
<table confidence="0.991318736842105">
Pattern Formation Rule
A_Pat D_Pat
cc wph (1,F)(2,F)
cc wsw (1,F)(3,F)
cc ww (1,F)(2,F)
ccc phww (1,F)(3,F)(4,F)
ccc wphw (1,F)(2,F)(4,F)
ccc wsw (1,F)(2,F)(3,F)
ccc wsww (1,F)(3,F)(4,F)
ccc wwph (1,F)(2,F)(3,F)
ccc wwsw (1,F)(2,F)(4,F)
ccc www (1,F)(2,F)(3,F)
ccc www (1,R)(2,F)(3,R)
cccc phwsww (1,F)(3,F)(5,F)(6,F)
cccc wphww (1,F)(2,F)(4,F)(5,F)
cccc wsww (1,F)(2,F)(3,F)(4,F)
ccn wwn (1,F)(2,F)(3,E)
cnc wsw (1,F)(2,R)(3,F)
ncc www (1,R)(2,F)(3,F)
</table>
<bodyText confidence="0.999555181818182">
respectively, and then looks up the pattern pair
in the rulebase. If the pair exists, the system
applies the associated formation rules in priority
order. If any rule can generate the given
abbreviation from the definition, the pair is
regarded as valid.
Suppose, for example, that the abbreviation
“5GL” and the definition “fifth generation
language” are found in a text. The system
preprocesses them and generates their patterns.
In this case, the A_Pattern is “ncc” and the
D_Pattern is “www”. A formation rule &lt;(1, R)
(2, F) (3, F)&gt; is associated with this pattern pair
in the rulebase. Thus, the system applies the
rule to determine the validity of the
abbreviation/definition pair. The first word
(‘fifth’) can be replaced into ‘5’ [(1, R)]; the first
character of the second word is ‘G’ [(2, F)]; and
the first character of the third word is ‘L’ [(3,
F)]. Hence the pair is valid and ‘fifth generation
language’ is considered to be a definition of
‘5GL’.
</bodyText>
<subsectionHeader confidence="0.992874">
4.2 The Abbreviation Matcher
</subsectionHeader>
<bodyText confidence="0.9992710625">
If the rulebase does not have rules for the
pattern pair or if no rule successfully generates
the abbreviation from the definition, and if the
pair occurs in one of the cue environments
described in section 2.4, the system activates the
Abbreviation Matcher routine. This routine is
also used for creating the initial rulebase.
The Abbreviation Matcher contains five
layered matching algorithms. We categorized
abbreviations into five different types, one for
each layer, based on the relationship between the
abbreviation length and the length of the
corresponding definition. Abbreviations of type
1 are the most frequent in our 4,500 item
sample. Type 2 is the next most frequent, and so
on.
</bodyText>
<listItem confidence="0.753059352941176">
(1) Layer 1 : |A |= |D|
EDS, Electronic Data System
MPH, miles per hour
2MASS, Two Micron All Sky Servey
(2) Layer 2 : |A |= |D |- |S|
F&amp;M, Facilities and Materials
ASCA, Advanced Satellite for Cosmology
and Astrophysics
(2) Layer 3 : |A |&lt; |D|
4GT, 4 Gigabyte memory Tuning
FAME, Full Sky Astrometric Mapping Explorer
(3) Layer 4 : |A |&gt; |D|
DB, DataBase
CONTOUR, Comet Nuclear Tour
(4) Layer 5 : special numerals
W3C, World Wide Web Consortium
D2T2, Dye Diffusion Thermal Transfer
</listItem>
<bodyText confidence="0.996421545454545">
|A |represents the length of an abbreviation
pattern. |D |is the length of a definition pattern.
|S |indicates the number of stopwords in a
definition.
This system processes an &lt;A, D&gt; pair by
applying the algorithms in layer order,
beginning at layer 1. If the pair is matched at
any layer, matching stops and the successful
formation rule is returned. If a match is not
found at any layer, the candidate pair is
discarded.
</bodyText>
<subsectionHeader confidence="0.999918">
4.3 Best Match Selection
</subsectionHeader>
<bodyText confidence="0.9999436">
The system may generate multiple definition
candidates in many cases, but we assume that
there exists only one definition in a local
context. In order to select the best candidate, we
employ several weighting features.
</bodyText>
<listItem confidence="0.814789">
(1) syntactic cues
</listItem>
<bodyText confidence="0.944169">
A definition has a higher weight than other
candidates if it has syntactic cues.
</bodyText>
<listItem confidence="0.714733">
(2) rule priority
</listItem>
<bodyText confidence="0.856741">
A definition has a higher weight if it was
matched by a higher priority rule.
</bodyText>
<listItem confidence="0.941301">
(3) distance
</listItem>
<bodyText confidence="0.956834">
The definition closest to the abbreviation is
favored over other candidate definitions.
</bodyText>
<listItem confidence="0.844481">
(4) capitalization
</listItem>
<bodyText confidence="0.97017">
A definition with initial capital letters is
preferred.
</bodyText>
<listItem confidence="0.869606">
(5) number of words
</listItem>
<bodyText confidence="0.998288333333333">
A definition is preferred based on the
following sequence of length comparisons:
|A |= |D|, |A |&lt; |D |and |A |&gt; |D|.
</bodyText>
<listItem confidence="0.947561">
(6) number of stopwords
</listItem>
<bodyText confidence="0.999911705882353">
A definition having fewer stopwords is
preferred.
If multiple candidate definitions are found in
a document for an abbreviation, these six
features are tested on the definitions in the order
given, until one definition remains. If ambiguity
still remains at the end of the test, the first
definition is selected.
Users can specify whether they want to
update the rulebase with the results of
processing a new document. If an existing rule
successfully matches an abbreviation/definition
pair, then that rule’s frequency is updated in the
rulebase, thereby increasing the rule’s priority.
Users may also specify a rule threshold; new
rules which occur with a frequency exceeding
the threshold will be added to the rulebase.
</bodyText>
<sectionHeader confidence="0.984158" genericHeader="evaluation">
5. Experiments and Results
</sectionHeader>
<bodyText confidence="0.999915">
We have conducted experiments with three
documents: a book about automotive
engineering (D1), a technical book from a
pharmaceutical company (D2), and NASA press
releases for 1999 (D3). The data used in the
experiments and experimental results are shown
in Table 5. Performance is evaluated using recall
and precision.
</bodyText>
<tableCaption confidence="0.977247">
Table 5 Test Data and Experimetal Results
</tableCaption>
<table confidence="0.996376428571429">
D1 D2 D3
Size (# of words) 20,379 97,000 83,539
No. of Abbreviations 33 63 81
Correct 31 60 76
Found Incorrect 1 0 2
Total 32 60 78
Missed 1 3 5
</table>
<bodyText confidence="0.999328142857143">
For D1, the system found 32 abbreviations
and their definitions but among them 1
abbreviation is incorrect. Thus, it shows 93.9%
recall and 96.9% precision. For D2, it found 60
pairs and missed 3 pairs showing 95.2% recall
and 100% precision. For D3, it found 78 pairs
with 2 incorrect results and missed 5 pairs. The
recall rate is 93.8 % and precision is 97.4 %.
The reasons for missing some
abbreviations are (a) the definitions fell outside
of the search space (b) misinterpretation by the
part-of-speech tagger (c) matches beyond
system’s current capability. Some examples of
missed abbreviations are:
</bodyText>
<listItem confidence="0.9984346">
(1) DEHP di-2-ethylhexylphthalate
(2) ALT alanine aminotransferase
(3) ASI Italian Space Agency
(4) MIDEX medium-class Explorer
(5) CAMEX-3 Third Convection and
</listItem>
<subsectionHeader confidence="0.609397">
Moisture Experiment
</subsectionHeader>
<bodyText confidence="0.999951214285715">
For (1), we would need to add the domain-
specific prefixes “ethyl and “hexyl” to the prefix
list. In general, adaptation of our method to new
technical domains will probably involve the
addition of domain-specific prefixes to the
prefix list. (2) failed because there was no first
letter match for “aminotransferase”. The
abbreviation in (3) is an acronym of the Italian
translation of the definition. In (4), there is no
credible source for the “I” in the abbreviation. In
(5), the numeric replacement in the abbreviation
is permuted. These and other phenomena such
as compound word processing will be the
subject of further investigation.
</bodyText>
<sectionHeader confidence="0.999814" genericHeader="conclusions">
6. Related Work
</sectionHeader>
<bodyText confidence="0.999732580645161">
AFP (Acronym Finding Program) is an early
attempt to automatically find acronyms and their
definitions in free text [13]. In this work,
however, an acronym candidate is simply an
upper-case word from 3 to 10 characters in
length. AFP looks for candidate expansions in
two sub-windows – the pre-window and the
post-window - of the acronym by applying an
LCS (longest common subsequence) algorithm.
Each subwindow’s length in words is set to
twice the number of characters in the acronym
and it looks for matching letters occurring at
word beginnings or after hyphens.
However, AFP does not support 2-letter
acronyms that are very common in texts (e.g.,
AI, DB, and IP) and it does not allow interior-
letter matches that are not uncommon in
abbreviations.
TLA (Three Letter Acronym) [14] removes
all non-alphabetic characters and breaks the text
into chunks based on the occurrences of ‘(’, ‘)’
and ‘.’ characters. It looks for candidate
acronyms in each chunk and attempts to find
matching definitions in the preceding and
following chunks. Candidate acronyms and
candidate definitions are compared by matching
up to the first three letters of each word in the
chunks. The potential matches are passed
through a number of ad-hoc heuristics below,
each of which can reject any candidate
acronyms.
</bodyText>
<listItem confidence="0.671717625">
· Acronyms are shorter than their definitions
· Acronyms contain initial characters of most
of the words in their definitions
· Acronyms are given in upper case
· Shorter acronyms tend to have longer words
in their definition
· Longer acronyms tend to have more stop
words
</listItem>
<bodyText confidence="0.9998252">
As part of a larger study of the topology of
relations across the World-Wide Web,
Sundaresan and Yi [12] explore specific
relations involving acronyms and their
definitions. Similar to other work on mining the
Web for relations (e.g., Kleinberg [5] for
hyperlinks and Larson [8] for bibliometrics),
their work uses duality-based methods to build
networks of interrelated syntactic cues,
acronym-definition pairs, and formation rules. It
develops iterative techniques for finding new
acronym-definition pairs, given a set of syntactic
cues, and for finding new syntactic cues, given a
set of known pairs. It can also learn new
formation rules.
While the overall system frameworks are
quite different, our hybrid text mining method
and the duality-based method both use similar
underlying machinery: syntactic cues,
abbreviation-definition pairs, and formation
rules. Differences include the hybrid method&apos;s
use of a more abstract representation for
formation rules, the central use of abbreviation
patterns and definition patterns as the organizing
principle for the rule base, and the use of cue
words among the syntactic cues.
The developers of the Acrophile system at
UMass Amherst [7] evaluated four different
acronym extraction algorithms against
manually-analyzed test documents and against
hand-crafted acronym dictionaries. Their
&amp;quot;canonical-contextual&amp;quot; algorithm, which shares
elements with our hybrid method, was the most
successful one. In particular, Acrophile uses a
fixed 40-word search space for their
&amp;quot;contextual&amp;quot; definition search and has a set of
syntactic cues similar to ours for defining the
&amp;quot;canonical&amp;quot; environments in which
abbreviation-definition pairs may be found.
Beyond special handling for numeric
characters in acronyms, however, there is no
provision for replacement matches; for explicit
lists of prefixes, known words, and proper
names; or for adaptively learning new acronym
patterns. Acrophile&apos;s system environment and
experimental results are quite interesting; by
directed search of the World-Wide Web, the
system was able to exceed the coverage of the
largest publicly available hand-crafted on-line
acronym dictionary.
</bodyText>
<subsectionHeader confidence="0.57322">
Conclusions and Future Work
</subsectionHeader>
<bodyText confidence="0.9924652">
We have introduced a new hybrid approach
for finding abbreviations and their definitions in
unstructured texts. The problem of abbreviation
processing has attracted relatively little attention
in NLP field. However, technical documents use
a lot of abbreviations to represent domain-
specific knowledge. Thus, the ability to find
correct abbreviations and their definitions is
very important to being able to utilize the
information contained in those documents. It is
also very useful for many NLP applications such
as information retrieval [1] and glossary
extraction [4, 9, 11].
The proposed method has the following
advantages:
(1) It is simple and fast.
A small number of formation rules can
describe many abbreviations. By keeping
these rules in the rulebase, this system can
process most abbreviations by simple
pattern matches. Furthermore, the
abbreviation matcher consists of 5 simple
match routines and each routine is dedicated
to a certain type of abbreviations. Thus, it is
conceptually simple and fast.
</bodyText>
<listItem confidence="0.945425266666666">
(2) It shows high recall and precision rates.
(3) It provides for flexible user customization.
For example, users can specify rule
thresholds for updating the rulebase.
(4) It is trainable. The rulebase may be
automatically refined as the system
processes new documents.
(5) It is adaptable to new styles and editorial
conventions. It can process new types of
abbreviations by inserting appropriate rules
in the rulebase without modifying the
system. Rules are symbolic, so users can
easily add, modify, or delete the rules by
hand.
(6) It can be adapted to new technical domains.
</listItem>
<bodyText confidence="0.9977435">
The dictionary, set of replacement matches,
stopword list, and prefix list, can be tailored
for new domains.
In addition to the lacunae mentioned in
Section 5, we are aware that there are classes of
abbreviations which our current method does not
handle adequately. These are typically written
with all lower-case characters and are almost
never introduced with text markers or cue
words. Examples are :
</bodyText>
<listItem confidence="0.9999486">
• cu – customer
• hw – hardware
• mgr – manager
• pgm – program
• sw – software
</listItem>
<bodyText confidence="0.999634">
Mechanisms for processing these abbreviations,
which tend to occur in informal text such as
email, chat rooms, or customer service call
records, are the subject of ongoing research in
our project.
</bodyText>
<sectionHeader confidence="0.999481" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999789771929825">
[1] Byrd, Roy, Yael Ravin, and John Prager.
Lexical Assistance at the Information-Retrieval User
Interface. Research Report, RC19484, IBM T.J.
Watson Research Center, 1994.
[2] G. &amp; C. Merriam Co. Webster’s New Collegiate
Dictionary. 1981
[3] IBM T. J. Watson Research. The Talent (Text
Analysis and Language Engineering) project.
http://www.research.ibm.com/talent/. 2001.
[4] Justeson, John and Slava Katz. Technical
terminology: some linguistic properties and an
algorithm for identification in text. Natural Language
Engineering, 1(1):9-17, 1995.
[5] Kleinberg, Jon. Authoritative sources in a
hyperlinked environment, In Proceedings of the 9th
ACM-SIAM Symposium on Discrete Algorithms, May
1997.
[6] Kugimiya, Shuzo, Yoji Fukumochi, Ichiko Sata,
Tokyuki Hirai, and Hitoshi Suzuki. Machine
Translation apparatus having a process function for
proper nouns with acronyms. US Patent 5161105,
1992
[7] Larkey, Leah, Paul Ogilvie, Andrew Price and
Brenden Tamilio. Acrophile:An Automated Acronym
Extractor and Server, In Proceedings of the ACM
Digital Libraries conference, pp. 205-214, 2000.
[8] Larson, R. Bibliometrics of the World-Wide
Web: An exploratory analysis of the intellectual
structure of cyberspace, Technical Report, School of
Information Management and Systems, University of
California, Berkeley, 1966.
http://sherlock.sims.berkeley.edu/docs/asis96/asis96.
html.
[9] Maynard, Diana and Sophia Anaiadou. Term
Extraction using a Similarity-based Approach. In
Recent Advances in Computational Terminology,
John Benjamins, 1999.
[10] Ravin, Yael, Nina Wacholder and Misook Choi.
Disambiguation of proper names in text. 17th
Annual ACM-SIGIR Conference, 1997.
[11] Roark, Brian and Eugene Charniak. Noun-
phrase co-occurrence statistics for semi-automatic
semantic lexicon construction. In proceedings of the
36th Annual Meeting of the Association for
Computational Linguistics, pp 1110-1116, 1998.
[12] Sundaresan, Neel and Jeonghee Yi. Mining the
Web for Relations, In The Ninth International World
Wide Web Conference, 2000.
http://www9.org/w9cdrom/363/363.html.
[13] Taghva, Kazem and Jeff Gilbreth. Recognizing
Acronyms and their Definitions, Technical Report
95-03, Information Science Research Institute,
University of Nevada, Las Vegas, June 1995.
[14] Yeates, Stuart. Automatic Extraction of
Acronyms from text. In Proceedings of the Third
New Zealand Computer Science Research Students’
Conference. Pp 117-124, 1999.
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.948523">
<title confidence="0.99908">Hybrid text mining for finding abbreviations and their definitions</title>
<author confidence="0.999987">Youngja Park</author>
<author confidence="0.999987">Roy J Byrd</author>
<affiliation confidence="0.989569">IBM Thomas J. Watson Research</affiliation>
<address confidence="0.998897">P.O. Box 704, Yorktown New York 10598, USA</address>
<email confidence="0.999603">pyoungja@us.ibm.com</email>
<email confidence="0.999603">roybyrd@us.ibm.com</email>
<abstract confidence="0.99756625">We present a hybrid text mining method for finding abbreviations and their definitions in free format texts. To deal with the problem, this method employs pattern-based abbreviation rules in addition to text markers and cue words. The pattern-based rules describe how abbreviations are formed from definitions. Rules can be generated automatically and/or manually and can be augmented when the system processes new documents. The proposed method has the advantages of high accuracy, high flexibility, wide coverage, and fast recognition.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Roy Byrd</author>
<author>Yael Ravin</author>
<author>John Prager</author>
</authors>
<title>Lexical Assistance at the Information-Retrieval User Interface.</title>
<date>1994</date>
<booktitle>Research Report, RC19484, IBM T.J. Watson Research Center,</booktitle>
<contexts>
<context position="1514" citStr="[1, 6, 9, 11]" startWordPosition="219" endWordPosition="222">vice calls or telephone conferences, and electronic mail -- which contain information of great potential value. In order to utilize the knowledge these data contain, we need to be able to create common glossaries of domain-specific names and terms. While we were working on automatic glossary extraction, we noticed that technical documents contain a lot of abbreviated terms, which carry important knowledge about the domains. We concluded that the correct recognition of abbreviations and their definitions is very important for understanding the documents and for extracting information from them [1, 6, 9, 11]. An abbreviation is usually formed by a simple method: taking zero or more letters from each word of its definition. However, the tendency to make unique, interesting abbreviations is growing. So, it is easy to find new kinds of abbreviations which cannot be processed by hard-coded heuristics-based algorithms [1, 6, 7, 13, 14], since they are formed in ways not anticipated when the algorithms were devised. We propose a hybrid text mining approach to deal with these problems. We use three kinds of knowledge: pattern-based abbreviation rules, text markers, and linguistic cue words. An abbreviat</context>
<context position="24672" citStr="[1]" startWordPosition="3908" endWordPosition="3908">ted on-line acronym dictionary. Conclusions and Future Work We have introduced a new hybrid approach for finding abbreviations and their definitions in unstructured texts. The problem of abbreviation processing has attracted relatively little attention in NLP field. However, technical documents use a lot of abbreviations to represent domainspecific knowledge. Thus, the ability to find correct abbreviations and their definitions is very important to being able to utilize the information contained in those documents. It is also very useful for many NLP applications such as information retrieval [1] and glossary extraction [4, 9, 11]. The proposed method has the following advantages: (1) It is simple and fast. A small number of formation rules can describe many abbreviations. By keeping these rules in the rulebase, this system can process most abbreviations by simple pattern matches. Furthermore, the abbreviation matcher consists of 5 simple match routines and each routine is dedicated to a certain type of abbreviations. Thus, it is conceptually simple and fast. (2) It shows high recall and precision rates. (3) It provides for flexible user customization. For example, users can specify r</context>
</contexts>
<marker>[1]</marker>
<rawString>Byrd, Roy, Yael Ravin, and John Prager. Lexical Assistance at the Information-Retrieval User Interface. Research Report, RC19484, IBM T.J. Watson Research Center, 1994.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G</author>
<author>C Merriam Co</author>
</authors>
<title>Webster’s New Collegiate Dictionary.</title>
<date>1981</date>
<contexts>
<context position="4203" citStr="[2]" startWordPosition="637" endWordPosition="637">Section 4.1). If the rulebase is empty or if no existing rule matches the candidate abbreviation with the candidate definition, the system runs the abbreviation matcher and generates a new abbreviation rule. The abbreviation matcher consists of 5 layered matching algorithms (Section 4.2). If the matcher succeeds, new rules may be added to the rulebase, allowing it to grow as the system processes new documents. Fig. 1. System Overview 1. Abbreviation Recognition 1.1 Candidate Abbreviations An abbreviation is defined as a shortened form of a written word or phrase used in place of the full form [2]. Acronyms are a special case of abbreviations which are devoted to multi-word full forms. In this work, we consider a string of alphabetic, numeric and special characters as a candidate abbreviation if it satisfies the following three conditions: (1) Its first character is alphabetic or numeric (2) Its length is between 2 and 10 characters (3) It contains at least one capital letter and if the string meets the following restrictions: (1) It is not a known (dictionary) word containing an initial capital letter and appearing as the first word in a sentence. (2) It is not a member of a predefine</context>
</contexts>
<marker>[2]</marker>
<rawString>G. &amp; C. Merriam Co. Webster’s New Collegiate Dictionary. 1981</rawString>
</citation>
<citation valid="true">
<authors>
<author>IBM T J Watson Research</author>
</authors>
<title>The Talent (Text Analysis and Language Engineering) project.</title>
<date>2001</date>
<note>http://www.research.ibm.com/talent/.</note>
<contexts>
<context position="5222" citStr="[3, 10]" startWordPosition="805" endWordPosition="806">he following restrictions: (1) It is not a known (dictionary) word containing an initial capital letter and appearing as the first word in a sentence. (2) It is not a member of a predefined set of person and location names. (3) It is not a member of user-defined list of stopwords. The first restriction keeps many common words from being treated as possible abbreviations. Many proper names have the same characteristics above and may be recognized as abbreviations. To reduce generating false candidates and thus improve system performace, we use a list of proper names created by the Talent system[3, 10]. We also provide users with a way to create a user defined list of stopwords. Based on these conditions, AI (Artificial Intelligence), Baracuda (Boldly Advanced and Refined Aircraft Concept Under Development for AGATE), SgRP (seating reference point), 2MASS (Two-Micron All Sky Survey), ACIS (Advanced CCD Imaging Spectrometer), W3C (World Wide Web Consortium), T/C/F (Trim/Chassis/Final) are recognized as candidate abbreviations. 1. 2 Abbreviation Patterns Once a candidate abbreviation is identified an abbreviation pattern is generated from it. An abbreviation pattern is a string of ‘c’ and ‘n’</context>
</contexts>
<marker>[3]</marker>
<rawString>IBM T. J. Watson Research. The Talent (Text Analysis and Language Engineering) project. http://www.research.ibm.com/talent/. 2001.</rawString>
</citation>
<citation valid="true">
<authors>
<author>John Justeson</author>
<author>Slava Katz</author>
</authors>
<title>Technical terminology: some linguistic properties and an algorithm for identification in text.</title>
<date>1995</date>
<journal>Natural Language Engineering,</journal>
<pages>1--1</pages>
<contexts>
<context position="24707" citStr="[4, 9, 11]" startWordPosition="3912" endWordPosition="3914">ry. Conclusions and Future Work We have introduced a new hybrid approach for finding abbreviations and their definitions in unstructured texts. The problem of abbreviation processing has attracted relatively little attention in NLP field. However, technical documents use a lot of abbreviations to represent domainspecific knowledge. Thus, the ability to find correct abbreviations and their definitions is very important to being able to utilize the information contained in those documents. It is also very useful for many NLP applications such as information retrieval [1] and glossary extraction [4, 9, 11]. The proposed method has the following advantages: (1) It is simple and fast. A small number of formation rules can describe many abbreviations. By keeping these rules in the rulebase, this system can process most abbreviations by simple pattern matches. Furthermore, the abbreviation matcher consists of 5 simple match routines and each routine is dedicated to a certain type of abbreviations. Thus, it is conceptually simple and fast. (2) It shows high recall and precision rates. (3) It provides for flexible user customization. For example, users can specify rule thresholds for updating the rul</context>
</contexts>
<marker>[4]</marker>
<rawString>Justeson, John and Slava Katz. Technical terminology: some linguistic properties and an algorithm for identification in text. Natural Language Engineering, 1(1):9-17, 1995.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jon Kleinberg</author>
</authors>
<title>Authoritative sources in a hyperlinked environment,</title>
<date>1997</date>
<booktitle>In Proceedings of the 9th ACM-SIAM Symposium on Discrete Algorithms,</booktitle>
<contexts>
<context position="22193" citStr="[5]" startWordPosition="3554" endWordPosition="3554">mber of ad-hoc heuristics below, each of which can reject any candidate acronyms. · Acronyms are shorter than their definitions · Acronyms contain initial characters of most of the words in their definitions · Acronyms are given in upper case · Shorter acronyms tend to have longer words in their definition · Longer acronyms tend to have more stop words As part of a larger study of the topology of relations across the World-Wide Web, Sundaresan and Yi [12] explore specific relations involving acronyms and their definitions. Similar to other work on mining the Web for relations (e.g., Kleinberg [5] for hyperlinks and Larson [8] for bibliometrics), their work uses duality-based methods to build networks of interrelated syntactic cues, acronym-definition pairs, and formation rules. It develops iterative techniques for finding new acronym-definition pairs, given a set of syntactic cues, and for finding new syntactic cues, given a set of known pairs. It can also learn new formation rules. While the overall system frameworks are quite different, our hybrid text mining method and the duality-based method both use similar underlying machinery: syntactic cues, abbreviation-definition pairs, and</context>
</contexts>
<marker>[5]</marker>
<rawString>Kleinberg, Jon. Authoritative sources in a hyperlinked environment, In Proceedings of the 9th ACM-SIAM Symposium on Discrete Algorithms, May 1997.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Shuzo Kugimiya</author>
</authors>
<title>Yoji Fukumochi, Ichiko Sata, Tokyuki Hirai, and Hitoshi Suzuki. Machine Translation apparatus having a process function for proper nouns with acronyms.</title>
<tech>US Patent 5161105,</tech>
<contexts>
<context position="1514" citStr="[1, 6, 9, 11]" startWordPosition="219" endWordPosition="222">vice calls or telephone conferences, and electronic mail -- which contain information of great potential value. In order to utilize the knowledge these data contain, we need to be able to create common glossaries of domain-specific names and terms. While we were working on automatic glossary extraction, we noticed that technical documents contain a lot of abbreviated terms, which carry important knowledge about the domains. We concluded that the correct recognition of abbreviations and their definitions is very important for understanding the documents and for extracting information from them [1, 6, 9, 11]. An abbreviation is usually formed by a simple method: taking zero or more letters from each word of its definition. However, the tendency to make unique, interesting abbreviations is growing. So, it is easy to find new kinds of abbreviations which cannot be processed by hard-coded heuristics-based algorithms [1, 6, 7, 13, 14], since they are formed in ways not anticipated when the algorithms were devised. We propose a hybrid text mining approach to deal with these problems. We use three kinds of knowledge: pattern-based abbreviation rules, text markers, and linguistic cue words. An abbreviat</context>
</contexts>
<marker>[6]</marker>
<rawString>Kugimiya, Shuzo, Yoji Fukumochi, Ichiko Sata, Tokyuki Hirai, and Hitoshi Suzuki. Machine Translation apparatus having a process function for proper nouns with acronyms. US Patent 5161105,</rawString>
</citation>
<citation valid="true">
<authors>
<author>Leah Larkey</author>
<author>Paul Ogilvie</author>
<author>Andrew Price</author>
<author>Brenden Tamilio</author>
</authors>
<title>Acrophile:An Automated Acronym Extractor and Server,</title>
<date>2000</date>
<booktitle>In Proceedings of the ACM Digital Libraries conference,</booktitle>
<pages>205--214</pages>
<contexts>
<context position="1843" citStr="[1, 6, 7, 13, 14]" startWordPosition="271" endWordPosition="275">nical documents contain a lot of abbreviated terms, which carry important knowledge about the domains. We concluded that the correct recognition of abbreviations and their definitions is very important for understanding the documents and for extracting information from them [1, 6, 9, 11]. An abbreviation is usually formed by a simple method: taking zero or more letters from each word of its definition. However, the tendency to make unique, interesting abbreviations is growing. So, it is easy to find new kinds of abbreviations which cannot be processed by hard-coded heuristics-based algorithms [1, 6, 7, 13, 14], since they are formed in ways not anticipated when the algorithms were devised. We propose a hybrid text mining approach to deal with these problems. We use three kinds of knowledge: pattern-based abbreviation rules, text markers, and linguistic cue words. An abbreviation rule consists of an abbreviation pattern, a definition pattern and a formation rule. The formation rule describes how an abbreviation is formed from a definition. There may exist multiple formation rules for a given pair of abbreviation and definition patterns. Abbreviation rules are described in Section 3. Text markers are</context>
<context position="23132" citStr="[7]" startWordPosition="3692" endWordPosition="3692">set of known pairs. It can also learn new formation rules. While the overall system frameworks are quite different, our hybrid text mining method and the duality-based method both use similar underlying machinery: syntactic cues, abbreviation-definition pairs, and formation rules. Differences include the hybrid method&apos;s use of a more abstract representation for formation rules, the central use of abbreviation patterns and definition patterns as the organizing principle for the rule base, and the use of cue words among the syntactic cues. The developers of the Acrophile system at UMass Amherst [7] evaluated four different acronym extraction algorithms against manually-analyzed test documents and against hand-crafted acronym dictionaries. Their &amp;quot;canonical-contextual&amp;quot; algorithm, which shares elements with our hybrid method, was the most successful one. In particular, Acrophile uses a fixed 40-word search space for their &amp;quot;contextual&amp;quot; definition search and has a set of syntactic cues similar to ours for defining the &amp;quot;canonical&amp;quot; environments in which abbreviation-definition pairs may be found. Beyond special handling for numeric characters in acronyms, however, there is no provision for rep</context>
</contexts>
<marker>[7]</marker>
<rawString>Larkey, Leah, Paul Ogilvie, Andrew Price and Brenden Tamilio. Acrophile:An Automated Acronym Extractor and Server, In Proceedings of the ACM Digital Libraries conference, pp. 205-214, 2000.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Larson</author>
</authors>
<title>Bibliometrics of the World-Wide Web: An exploratory analysis of the intellectual structure of cyberspace,</title>
<date>1966</date>
<tech>Technical Report,</tech>
<institution>School of Information Management and Systems, University of California, Berkeley,</institution>
<note>http://sherlock.sims.berkeley.edu/docs/asis96/asis96. html.</note>
<contexts>
<context position="22223" citStr="[8]" startWordPosition="3559" endWordPosition="3559">w, each of which can reject any candidate acronyms. · Acronyms are shorter than their definitions · Acronyms contain initial characters of most of the words in their definitions · Acronyms are given in upper case · Shorter acronyms tend to have longer words in their definition · Longer acronyms tend to have more stop words As part of a larger study of the topology of relations across the World-Wide Web, Sundaresan and Yi [12] explore specific relations involving acronyms and their definitions. Similar to other work on mining the Web for relations (e.g., Kleinberg [5] for hyperlinks and Larson [8] for bibliometrics), their work uses duality-based methods to build networks of interrelated syntactic cues, acronym-definition pairs, and formation rules. It develops iterative techniques for finding new acronym-definition pairs, given a set of syntactic cues, and for finding new syntactic cues, given a set of known pairs. It can also learn new formation rules. While the overall system frameworks are quite different, our hybrid text mining method and the duality-based method both use similar underlying machinery: syntactic cues, abbreviation-definition pairs, and formation rules. Differences </context>
</contexts>
<marker>[8]</marker>
<rawString>Larson, R. Bibliometrics of the World-Wide Web: An exploratory analysis of the intellectual structure of cyberspace, Technical Report, School of Information Management and Systems, University of California, Berkeley, 1966. http://sherlock.sims.berkeley.edu/docs/asis96/asis96. html.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Diana Maynard</author>
<author>Sophia Anaiadou</author>
</authors>
<title>Term Extraction using a Similarity-based Approach.</title>
<date>1999</date>
<booktitle>In Recent Advances in Computational Terminology,</booktitle>
<location>John Benjamins,</location>
<contexts>
<context position="1514" citStr="[1, 6, 9, 11]" startWordPosition="219" endWordPosition="222">vice calls or telephone conferences, and electronic mail -- which contain information of great potential value. In order to utilize the knowledge these data contain, we need to be able to create common glossaries of domain-specific names and terms. While we were working on automatic glossary extraction, we noticed that technical documents contain a lot of abbreviated terms, which carry important knowledge about the domains. We concluded that the correct recognition of abbreviations and their definitions is very important for understanding the documents and for extracting information from them [1, 6, 9, 11]. An abbreviation is usually formed by a simple method: taking zero or more letters from each word of its definition. However, the tendency to make unique, interesting abbreviations is growing. So, it is easy to find new kinds of abbreviations which cannot be processed by hard-coded heuristics-based algorithms [1, 6, 7, 13, 14], since they are formed in ways not anticipated when the algorithms were devised. We propose a hybrid text mining approach to deal with these problems. We use three kinds of knowledge: pattern-based abbreviation rules, text markers, and linguistic cue words. An abbreviat</context>
<context position="24707" citStr="[4, 9, 11]" startWordPosition="3912" endWordPosition="3914">ry. Conclusions and Future Work We have introduced a new hybrid approach for finding abbreviations and their definitions in unstructured texts. The problem of abbreviation processing has attracted relatively little attention in NLP field. However, technical documents use a lot of abbreviations to represent domainspecific knowledge. Thus, the ability to find correct abbreviations and their definitions is very important to being able to utilize the information contained in those documents. It is also very useful for many NLP applications such as information retrieval [1] and glossary extraction [4, 9, 11]. The proposed method has the following advantages: (1) It is simple and fast. A small number of formation rules can describe many abbreviations. By keeping these rules in the rulebase, this system can process most abbreviations by simple pattern matches. Furthermore, the abbreviation matcher consists of 5 simple match routines and each routine is dedicated to a certain type of abbreviations. Thus, it is conceptually simple and fast. (2) It shows high recall and precision rates. (3) It provides for flexible user customization. For example, users can specify rule thresholds for updating the rul</context>
</contexts>
<marker>[9]</marker>
<rawString>Maynard, Diana and Sophia Anaiadou. Term Extraction using a Similarity-based Approach. In Recent Advances in Computational Terminology, John Benjamins, 1999.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yael Ravin</author>
</authors>
<title>Nina Wacholder and Misook Choi. Disambiguation of proper names in text.</title>
<date>1997</date>
<booktitle>17th Annual ACM-SIGIR Conference,</booktitle>
<contexts>
<context position="5222" citStr="[3, 10]" startWordPosition="805" endWordPosition="806">he following restrictions: (1) It is not a known (dictionary) word containing an initial capital letter and appearing as the first word in a sentence. (2) It is not a member of a predefined set of person and location names. (3) It is not a member of user-defined list of stopwords. The first restriction keeps many common words from being treated as possible abbreviations. Many proper names have the same characteristics above and may be recognized as abbreviations. To reduce generating false candidates and thus improve system performace, we use a list of proper names created by the Talent system[3, 10]. We also provide users with a way to create a user defined list of stopwords. Based on these conditions, AI (Artificial Intelligence), Baracuda (Boldly Advanced and Refined Aircraft Concept Under Development for AGATE), SgRP (seating reference point), 2MASS (Two-Micron All Sky Survey), ACIS (Advanced CCD Imaging Spectrometer), W3C (World Wide Web Consortium), T/C/F (Trim/Chassis/Final) are recognized as candidate abbreviations. 1. 2 Abbreviation Patterns Once a candidate abbreviation is identified an abbreviation pattern is generated from it. An abbreviation pattern is a string of ‘c’ and ‘n’</context>
</contexts>
<marker>[10]</marker>
<rawString>Ravin, Yael, Nina Wacholder and Misook Choi. Disambiguation of proper names in text. 17th Annual ACM-SIGIR Conference, 1997.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Brian Roark</author>
<author>Eugene Charniak</author>
</authors>
<title>Nounphrase co-occurrence statistics for semi-automatic semantic lexicon construction.</title>
<date>1998</date>
<booktitle>In proceedings of the 36th Annual Meeting of the Association for Computational Linguistics,</booktitle>
<pages>1110--1116</pages>
<contexts>
<context position="1514" citStr="[1, 6, 9, 11]" startWordPosition="219" endWordPosition="222">vice calls or telephone conferences, and electronic mail -- which contain information of great potential value. In order to utilize the knowledge these data contain, we need to be able to create common glossaries of domain-specific names and terms. While we were working on automatic glossary extraction, we noticed that technical documents contain a lot of abbreviated terms, which carry important knowledge about the domains. We concluded that the correct recognition of abbreviations and their definitions is very important for understanding the documents and for extracting information from them [1, 6, 9, 11]. An abbreviation is usually formed by a simple method: taking zero or more letters from each word of its definition. However, the tendency to make unique, interesting abbreviations is growing. So, it is easy to find new kinds of abbreviations which cannot be processed by hard-coded heuristics-based algorithms [1, 6, 7, 13, 14], since they are formed in ways not anticipated when the algorithms were devised. We propose a hybrid text mining approach to deal with these problems. We use three kinds of knowledge: pattern-based abbreviation rules, text markers, and linguistic cue words. An abbreviat</context>
<context position="24707" citStr="[4, 9, 11]" startWordPosition="3912" endWordPosition="3914">ry. Conclusions and Future Work We have introduced a new hybrid approach for finding abbreviations and their definitions in unstructured texts. The problem of abbreviation processing has attracted relatively little attention in NLP field. However, technical documents use a lot of abbreviations to represent domainspecific knowledge. Thus, the ability to find correct abbreviations and their definitions is very important to being able to utilize the information contained in those documents. It is also very useful for many NLP applications such as information retrieval [1] and glossary extraction [4, 9, 11]. The proposed method has the following advantages: (1) It is simple and fast. A small number of formation rules can describe many abbreviations. By keeping these rules in the rulebase, this system can process most abbreviations by simple pattern matches. Furthermore, the abbreviation matcher consists of 5 simple match routines and each routine is dedicated to a certain type of abbreviations. Thus, it is conceptually simple and fast. (2) It shows high recall and precision rates. (3) It provides for flexible user customization. For example, users can specify rule thresholds for updating the rul</context>
</contexts>
<marker>[11]</marker>
<rawString>Roark, Brian and Eugene Charniak. Nounphrase co-occurrence statistics for semi-automatic semantic lexicon construction. In proceedings of the 36th Annual Meeting of the Association for Computational Linguistics, pp 1110-1116, 1998.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Neel Sundaresan</author>
<author>Jeonghee Yi</author>
</authors>
<title>Mining the Web for Relations,</title>
<date>2000</date>
<booktitle>In The Ninth International World Wide Web Conference,</booktitle>
<note>http://www9.org/w9cdrom/363/363.html.</note>
<contexts>
<context position="22049" citStr="[12]" startWordPosition="3533" endWordPosition="3533">date definitions are compared by matching up to the first three letters of each word in the chunks. The potential matches are passed through a number of ad-hoc heuristics below, each of which can reject any candidate acronyms. · Acronyms are shorter than their definitions · Acronyms contain initial characters of most of the words in their definitions · Acronyms are given in upper case · Shorter acronyms tend to have longer words in their definition · Longer acronyms tend to have more stop words As part of a larger study of the topology of relations across the World-Wide Web, Sundaresan and Yi [12] explore specific relations involving acronyms and their definitions. Similar to other work on mining the Web for relations (e.g., Kleinberg [5] for hyperlinks and Larson [8] for bibliometrics), their work uses duality-based methods to build networks of interrelated syntactic cues, acronym-definition pairs, and formation rules. It develops iterative techniques for finding new acronym-definition pairs, given a set of syntactic cues, and for finding new syntactic cues, given a set of known pairs. It can also learn new formation rules. While the overall system frameworks are quite different, our </context>
</contexts>
<marker>[12]</marker>
<rawString>Sundaresan, Neel and Jeonghee Yi. Mining the Web for Relations, In The Ninth International World Wide Web Conference, 2000. http://www9.org/w9cdrom/363/363.html.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kazem Taghva</author>
<author>Jeff Gilbreth</author>
</authors>
<title>Recognizing Acronyms and their Definitions,</title>
<date>1995</date>
<tech>Technical Report 95-03,</tech>
<institution>Information Science Research Institute, University of Nevada, Las Vegas,</institution>
<contexts>
<context position="1843" citStr="[1, 6, 7, 13, 14]" startWordPosition="271" endWordPosition="275">nical documents contain a lot of abbreviated terms, which carry important knowledge about the domains. We concluded that the correct recognition of abbreviations and their definitions is very important for understanding the documents and for extracting information from them [1, 6, 9, 11]. An abbreviation is usually formed by a simple method: taking zero or more letters from each word of its definition. However, the tendency to make unique, interesting abbreviations is growing. So, it is easy to find new kinds of abbreviations which cannot be processed by hard-coded heuristics-based algorithms [1, 6, 7, 13, 14], since they are formed in ways not anticipated when the algorithms were devised. We propose a hybrid text mining approach to deal with these problems. We use three kinds of knowledge: pattern-based abbreviation rules, text markers, and linguistic cue words. An abbreviation rule consists of an abbreviation pattern, a definition pattern and a formation rule. The formation rule describes how an abbreviation is formed from a definition. There may exist multiple formation rules for a given pair of abbreviation and definition patterns. Abbreviation rules are described in Section 3. Text markers are</context>
<context position="20498" citStr="[13]" startWordPosition="3275" endWordPosition="3275"> involve the addition of domain-specific prefixes to the prefix list. (2) failed because there was no first letter match for “aminotransferase”. The abbreviation in (3) is an acronym of the Italian translation of the definition. In (4), there is no credible source for the “I” in the abbreviation. In (5), the numeric replacement in the abbreviation is permuted. These and other phenomena such as compound word processing will be the subject of further investigation. 6. Related Work AFP (Acronym Finding Program) is an early attempt to automatically find acronyms and their definitions in free text [13]. In this work, however, an acronym candidate is simply an upper-case word from 3 to 10 characters in length. AFP looks for candidate expansions in two sub-windows – the pre-window and the post-window - of the acronym by applying an LCS (longest common subsequence) algorithm. Each subwindow’s length in words is set to twice the number of characters in the acronym and it looks for matching letters occurring at word beginnings or after hyphens. However, AFP does not support 2-letter acronyms that are very common in texts (e.g., AI, DB, and IP) and it does not allow interiorletter matches that ar</context>
</contexts>
<marker>[13]</marker>
<rawString>Taghva, Kazem and Jeff Gilbreth. Recognizing Acronyms and their Definitions, Technical Report 95-03, Information Science Research Institute, University of Nevada, Las Vegas, June 1995.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stuart Yeates</author>
</authors>
<title>Automatic Extraction of Acronyms from text.</title>
<date>1999</date>
<booktitle>In Proceedings of the Third New Zealand Computer Science Research Students’ Conference. Pp 117-124,</booktitle>
<contexts>
<context position="1843" citStr="[1, 6, 7, 13, 14]" startWordPosition="271" endWordPosition="275">nical documents contain a lot of abbreviated terms, which carry important knowledge about the domains. We concluded that the correct recognition of abbreviations and their definitions is very important for understanding the documents and for extracting information from them [1, 6, 9, 11]. An abbreviation is usually formed by a simple method: taking zero or more letters from each word of its definition. However, the tendency to make unique, interesting abbreviations is growing. So, it is easy to find new kinds of abbreviations which cannot be processed by hard-coded heuristics-based algorithms [1, 6, 7, 13, 14], since they are formed in ways not anticipated when the algorithms were devised. We propose a hybrid text mining approach to deal with these problems. We use three kinds of knowledge: pattern-based abbreviation rules, text markers, and linguistic cue words. An abbreviation rule consists of an abbreviation pattern, a definition pattern and a formation rule. The formation rule describes how an abbreviation is formed from a definition. There may exist multiple formation rules for a given pair of abbreviation and definition patterns. Abbreviation rules are described in Section 3. Text markers are</context>
<context position="21162" citStr="[14]" startWordPosition="3386" endWordPosition="3386">pper-case word from 3 to 10 characters in length. AFP looks for candidate expansions in two sub-windows – the pre-window and the post-window - of the acronym by applying an LCS (longest common subsequence) algorithm. Each subwindow’s length in words is set to twice the number of characters in the acronym and it looks for matching letters occurring at word beginnings or after hyphens. However, AFP does not support 2-letter acronyms that are very common in texts (e.g., AI, DB, and IP) and it does not allow interiorletter matches that are not uncommon in abbreviations. TLA (Three Letter Acronym) [14] removes all non-alphabetic characters and breaks the text into chunks based on the occurrences of ‘(’, ‘)’ and ‘.’ characters. It looks for candidate acronyms in each chunk and attempts to find matching definitions in the preceding and following chunks. Candidate acronyms and candidate definitions are compared by matching up to the first three letters of each word in the chunks. The potential matches are passed through a number of ad-hoc heuristics below, each of which can reject any candidate acronyms. · Acronyms are shorter than their definitions · Acronyms contain initial characters of mos</context>
</contexts>
<marker>[14]</marker>
<rawString>Yeates, Stuart. Automatic Extraction of Acronyms from text. In Proceedings of the Third New Zealand Computer Science Research Students’ Conference. Pp 117-124, 1999.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>