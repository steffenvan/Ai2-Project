<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<title confidence="0.98362">
Preserving Discourse Structure when Simplifying Text
</title>
<author confidence="0.944232">
Advaith Siddharthan
</author>
<affiliation confidence="0.971672">
Natural Language and Information Processing Group
Computer Laboratory, University of Cambridge
</affiliation>
<category confidence="0.306361">
as372 @cl . cam. ac .uk
</category>
<sectionHeader confidence="0.987769" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999980863636364">
Text simplification involves restructur-
ing sentences by replacing particu-
lar syntactic constructs (like embedded
clauses and appositives). The aim is to
make the text easier to read for some tar-
get group (like aphasics and people with
low reading ages) or easier to process by
some program (like a parser or machine
translation system). However, sentence-
level syntactic restructuring can wreak
havoc with the discourse structure of a
text, actually making it harder to com-
prehend, and possibly even altering its
meaning. In this paper, we present
and evaluate techniques for detecting
and correcting disruptions in discourse
structure caused by syntactic restructur-
ing. In particular, we look at the issues
of preserving the rhetorical relationships
between the original clauses and phrases
and preserving the anaphoric link struc-
ture of the text.
</bodyText>
<sectionHeader confidence="0.999471" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.992429244897959">
Syntactic restructuring involves replacing partic-
ular syntactic constructs (like embedded clauses
and appositives) in sentences. The aim is usu-
ally to reduce their grammatical complexity to
make the text either easier to read for some target
group (like aphasics and people with low reading
ages) or easier to process by some program (like
parsers or machine translation systems). When
we constrain the restructuring operations to pre-
serve the meaning and information content of the
original text, we call the process text simplifica-
tion. Syntactic transforms for dis-embedding rela-
tive clauses were first suggested as a preprocessing
step for parsers (Chandrasekar et al., 1996; Chan-
drasekar and Srinivas, 1997) as they reduce sen-
tence length and hence improve parser throughput.
They were later used as part of a text simplification
project aimed at making newspaper text accessible
to aphasics (Carroll et al., 1999; Devlin, 1999).
We illustrate syntactic simplification with an ex-
ample. The sentence (1) a. contains two relative
clauses and one conjoined verb phrase. Our text
simplification system can simplify (1) a. to (1) b.
(1) a. Also contributing to the firmness in copper, the an-
alyst noted, was a report by Chicago purchasing
agents, which precedes the full purchasing agents re-
port that is due out today and gives an indication of
what the full report might hold.
b. Also contributing to the firmness in copper, the an-
alyst noted, was a report by Chicago purchasing
agents. The Chicago report precedes a full purchas-
ing agents report. The full report is due out today.
The Chicago report gives an indication of what the
full report might hold.
A broad coverage text simplification system is
expected to be useful to people with language dis-
abilities like aphasia (Carroll et al., 1999; Devlin,
1999), adults learning English (by aiding the con-
struction of texts that are of the desired linguistic
complexity, while being relevant to adults), non-
native English speakers surfing a predominantly
English internet and users of limited channel de-
vices (software that displays text in short sen-
tences that fit on small screens could improve the
usability of these devices).
Further, text simplification is useful as a prepro-
cessing tool to improve the performance of other
applications like parsing and machine transla-
tion (where performance deteriorates rapidly with
</bodyText>
<page confidence="0.998478">
103
</page>
<table confidence="0.930346125">
Simplify Recursively
Input Sentence
Analysis Transformation Regeneration
Determine Clauses Apply Sequence of Rules Select Cue Words
Decide Attachment Generate Referring Expressions
Select Determiners
Output Sentences Order Simplified Sentences
Restore Anaphoric Links
</table>
<figureCaption confidence="0.997038">
Figure 1: An Architecture for Syntactic Simplification
</figureCaption>
<bodyText confidence="0.999918757575758">
sentence length) and text summarisation systems
based on sentence extraction (as simplified sen-
tences contain smaller units of information).
Previous research on text simplification has not
considered the discourse level issues that arise
from applying syntactic transforms at the sen-
tence level. Chandrasekar and Srinivas (1997), for
example, use an architecture with two stages—
analysis and transformation. There are various
discourse level issues that arise when carrying out
sentence-level syntactic restructuring of the sort
illustrated by example 1. Not considering these
discourse implications could result in the resul-
tant text losing coherence, thus making it harder to
read, or alter the intended meaning; in either case,
making the text harder to comprehend. Our ar-
chitecture (figure 1) therefore uses a third stage—
regeneration, that we describe in this paper.
In section 2, we describe how to preserve the
rhetorical relations (Mann and Thompson, 1988)
that existed between clauses and phrases in the
original text and ensure that we do not introduce
spurious relations and conversational implicatures.
Applying syntactic transforms on text contain-
ing pronouns can cause further discourse level
problems. In section 3, we discuss how syntactic
transforms can result in discourse referents getting
introduced in different orders, with different gram-
matical relations, and how this could make it hard
for a reader (or program) to correctly resolve pro-
nouns further in the text.
In section 4 we conduct a corpus evaluation of
the techniques described in sections 2 and 3.
</bodyText>
<sectionHeader confidence="0.885847" genericHeader="method">
2 Preserving Rhetorical Relations
</sectionHeader>
<bodyText confidence="0.999915333333333">
In this section, we discuss how generation issues
like cue-word selection, referring expression gen-
eration, determiner choice and sentence ordering
can be resolved so as to minimise disruption in
the text&apos;s rhetorical structure. Then, in section 3,
we show that the process of preserving rhetorical
structure can unavoidably result in the destruction
of the anaphoric link structure of a document and
provide techniques to restore this structure.
</bodyText>
<subsectionHeader confidence="0.995491">
2.1 Using Cue Words
</subsectionHeader>
<bodyText confidence="0.999683857142857">
Subordinating conjunctions connect clauses and
make one of the clauses subordinate. Subordinat-
ing conjunctions also act as cue words that define
the relationship between the conjoined clauses.
When separating out the conjoined clauses, we can
preserve the rhetorical relation between them by
introducing a new cue word like however or then:
</bodyText>
<listItem confidence="0.956449142857143">
(2) a. Though all these politicians avow their respect for
genuine cases, it&apos;s the tritest lip service.
b. All these politicians avow their respect for genuine
cases. However, it&apos;s the tritest lip service.
(3) a. Kenya was the scene of a major terrorist attack on
August 7 1998, when a car bomb blast outside the
US embassy in Nairobi killed 219 people.
</listItem>
<figureCaption confidence="0.3177745">
b. Kenya was the scene of a major terrorist attack on
August 7 1998. A car bomb blast outside the US
</figureCaption>
<bodyText confidence="0.9740595">
embassy in Nairobi killed 219 people then.
The table below gives a list of conjunctions (co-
ordinating, subordinating and correlative) and the
corresponding cue word that our algorithm intro-
duces:
Conjunctions Cue Word
although, though, whereas, but however
or, or else otherwise
even though still
if, if...then suppose...then
when then
not only. but also also
because, since, as hence
and
Our algorithm does not separate out conjoined
clauses in cases where there is no appropriate cue
</bodyText>
<page confidence="0.998405">
104
</page>
<bodyText confidence="0.999899">
word; for example, when the conjunction is un-
less. The placement of cue words is sentence ini-
tial, apart from then that is placed sentence finally
(a sentence initial then would erroneously trigger
a chronological sequence relation). The ordering
of simplified sentences is described in section 2.4.
</bodyText>
<subsectionHeader confidence="0.999453">
2.2 Generating Referring Expressions
</subsectionHeader>
<bodyText confidence="0.999973384615385">
In the examples above, the extracted clause had a
subject and could be made into a stand alone sen-
tence trivially. However, when splitting a sentence
into two by dis-embedding a relative clause, we
need to provide the clause with a subject. The
referent noun phrase hence gets duplicated, oc-
curring once in each simplified sentence. This
phenomenon also occurs when separating out con-
joined verb phrases and extracting appositives. We
now need to generate a referring expression the
second time, as duplicating the whole noun phrase
can make the text stilted and cause unwanted con-
versational implicatures. For example, contrast:
</bodyText>
<listItem confidence="0.870069692307692">
(4) a. &apos;The pace of life was slower in those days,&apos; says 51-
year-old Cathy Tinsall, who had five children.
b. &apos;The pace of life was slower in those days,&apos; says 51-
year-old Cathy Tinsall. Cathy Tinsall had five chil-
dren.
c. &apos;The pace of life was slower in those days,&apos; says 51-
year-old Cathy Tinsall. 51-year-old Cathy Tinsall
had five children.
(4) c., apart from sounding stilted, emphasises
Cathy Tinsall&apos;s age. This might, for example, in-
advertently suggest to the reader that the relation-
ship between her age and her having five children
is important.
</listItem>
<bodyText confidence="0.940275066666667">
Existing referring expression generation algo-
rithms (Reiter and Dale, 1992; Dale and Haddock,
1991) can&apos;t cope with open domains like news-
paper text as they assume a classification of ad-
jectives which is possible only for very restricted
domains. We have proposed a new algorithm
(Siddharthan and Copestake, 2002) that relies on
WordNet synonym and antonym sets and gives
equivalent results on the examples cited in the lit-
erature and improved results in other cases that
prior approaches cannot handle. This algorithm
is suitable for open domains like newspaper text
and has been evaluated on the text-simplification
task using Wall Street Journal data with promising
results (summarised in section 4).
</bodyText>
<subsectionHeader confidence="0.986094">
2.3 Determiner Choice
</subsectionHeader>
<bodyText confidence="0.999474777777778">
In example 4, the relative clause attached to a
proper noun. However, in general, we have to de-
cide on what determiners to use. This decision de-
pends on the rhetorical relation between the ex-
tracted clause or phrase and its referent NP.
In the non-restrictive case (for either appositives
or relative clauses), the rhetorical relation is that of
elaboration. This relation continues to hold when
we make the clause into the second sentence:
</bodyText>
<listItem confidence="0.836193833333334">
(5) a. A former ceremonial officer, who was at the heart of
Whitehall&apos;s patronage machinery, said there should
be a review of the honours list.
b. A former ceremonial officer said there should be a
review of the honours list. This officer was at the
heart of Whitehall&apos;s patronage machinery.
</listItem>
<bodyText confidence="0.999660538461538">
For extracting non-restrictive constructs, we
only need to ensure that the referring expression
contains a definite determiner. The determiner this
is stronger than the and can only be used if there
is no future reference that uses the determiner the.
When simplifying restrictive clauses, the rela-
tionship between the clause and the referent noun
phrase is that of specification; that is, identifying a
member (or some members) from a larger set. To
preserve this, we require an indefinite determiner
(a or some) in the noun phrase that the clause at-
taches to. This has the effect of introducing the
member(s) of the larger set into the discourse:
</bodyText>
<listItem confidence="0.9774425">
(6) a. The man who had brought it in for an estimate then
returned to collect it.
b. A man had brought it in for an estimate. This man
then returned to collect it.
</listItem>
<bodyText confidence="0.9998546">
The indefinite article is not introduced if the NP
contains a numerical attribute (eg. ...two conver-
sions which turned out to be crucial.). The refer-
ring expression contains a definite determiner as
usual. The algorithm for selecting determiners is:
</bodyText>
<listItem confidence="0.608568">
Algorithm select_determiner
1. IF restrictive clause THEN
</listItem>
<bodyText confidence="0.985836285714286">
IF head noun is not a proper noun AND NP does
not contain a numerical attribute THEN
introduce indefinite determiner (a or some)
in NP in the first sentence
2. IF no future references to the NP THEN
introduce this or these in referring expression
ELSE introduce the in referring exp.
</bodyText>
<page confidence="0.981382">
105
</page>
<note confidence="0.293445">
2.4 Sentence Order 5. IF sent2 can be simplified further THEN
</note>
<equation confidence="0.499863">
order = &amp;quot;reverse&amp;quot;
</equation>
<bodyText confidence="0.844832175">
In general, the clause order should be preserved
in the transformed sentences. However, there are
a few exceptions. In the following example, the
lack of a suitable cue word for the reason relation
forces us to change the clause ordering and use the
cue word for the consequence relation.
(7) a. The &amp;quot;unengageable&amp;quot; element of the welfare popula-
tion is rising because the city is playing reclassifica-
tion games.
b. The city is playing reclassification games. Hence the
&amp;quot;unengageable&amp;quot; element of the welfare population is
rising.
We also need to reverse the clause ordering
when extracting non-restrictive clauses that attach
to noun phrases in the subject position; the elabo-
ration clause or phrase has to come second. This is
illustrated in example 5 above. Also, the elabora-
tion relation tends to get lost if the second sentence
is separated from the noun phrase being elaborated
by too much text. This can happen if the first sen-
tence is very long, or if it contains another con-
struct to be simplified. Consider:
(8) a. The agency, which is funded through insurance pre-
miums from employers , insures pension benefits for
some 30 million private-sector workers who take part
in single-employer pension plans.
b. The agency is funded through insurance premiums
from employers. The agency insures pension benefits
for some 30 million private-sector workers. These
workers take part in single-employer pension plans.
c. The agency insures pension benefits for some 30 mil-
lion private-sector workers. These workers take part
in single-employer pension plans. The agency is
funded through insurance premiums from employers.
It is obvious that the ordering (8) b. is less dis-
ruptive than (8) c. In such cases, using sentence
order to preserve rhetorical relations is counter-
productive and we make the extracted clause the
first sentence.
Algorithm sentence _order
</bodyText>
<listItem confidence="0.98734275">
1. order = &amp;quot;preserve&amp;quot;
2. IF cue word introduction changes clause order THEN
order = &amp;quot;reverse&amp;quot;
3. IF non-restrictive clause THEN
IF referent NP is a subject THEN
order = &amp;quot;reverse&amp;quot;
4. IF length(senti )-length(sent2) &gt; threshold THEN
order = &amp;quot;reverse&amp;quot;
</listItem>
<bodyText confidence="0.999915404761905">
Syntactic restructuring that involves splitting sen-
tences or changing their voice can change the
grammatical function of NPs and alter the order
in which they are introduced into the discourse.
This can affect the reader&apos;s ability to correctly re-
solve pronouns further in the text. If we cannot en-
sure that the most salient (Lappin and Leass, 1994;
Kennedy and Boguraev, 1996) entities before sim-
plification remain the most salient after simplifica-
tion, we have to consider the possibility of broken
anaphoric links We do this in section 3.2.
When syntactic restructuring reverses the orig-
inal clause order, this disruption in the anaphoric
link structure can become evident in the restruc-
tured sentences themselves. We illustrate this in
section 3.1.
In both cases, our approach is the same;
we make use of a pronoun-resolution algorithm
in deciding what to generate. The discussion
in this section is based on salience and our
implementation uses a shallow version of the
Lappin and Leass (1994) algorithm. It is worth
pointing out in advance that in the examples that
follow, we use the term salience to mean &amp;quot;salience,
as calculated by our algorithm&amp;quot;, which may differ
slightly from other calculations that use differently
weighted features.
We use a three sentence discourse window con-
taining the sentence to be simplified and the two
previous sentences and calculate the salience of
entities at the end of this window. We then sim-
plify the required sentence, splitting it into two or
changing its voice from passive to active. We then
check that any pronouns in this sentence resolve to
the same antecedents in the original and simplified
text. If not, we need to replace them with referring
expressions. This process needs to continue till the
relative salience of entities in the original and re-
structured text is the same, at which point we know
that the resolution of future pronouns will not be
affected by our restructuring. We now illustrate
the process with examples.
</bodyText>
<figure confidence="0.7514474">
6. RETURN order
3 Preserving Anaphoric Structure
106
3.1 Problems with reversing Clause Order 3.2 Fixing future Anaphoric Links
Consider:
</figure>
<listItem confidence="0.861743375">
(9) a. Incredulity is an increasingly lost art.
b. It requires a certain self-confidence to go on holding
the line that Elvis Presley 1 isn&apos;t in an underground
recording studio somewhere.
c. David Beckham2 is prone to provoking revisionist
hints because the virtues he2 represents are rare not
only in the general population but especially so in
football.
</listItem>
<bodyText confidence="0.967200647058823">
When we restructure sentence (9) c. into (9) c&apos;.
below, we need to check that the pronouns con-
tinue to refer to the same antecedents.
(9) c&apos;. The virtues he&apos; represents are rare not only in
the general population but especially so in football.
Hence, David Beckham is prone to provoking revi-
sionist hints.
Our salience-based pronoun resolution system
resolves he to David Beckham in the original text,
but incorrectly to Elvis Presley in the restructured
text. We therefore need to replace he by David
Beckham (its antecedent in the original text). We
then check whether the David Beckham in the sec-
ond sentence would, if replaced by the pronoun he,
still be interpreted correctly. Our pronoun resolu-
tion system tells us it will. Hence we can safely
simplify sentence (9) c. to (9) c&amp;quot;. below:
</bodyText>
<listItem confidence="0.8174542">
(9) c&amp;quot;. The virtues David Beckham2 represents are rare not
only in the general population but especially so in
football. Hence, he2 is prone to provoking revisionist
hints.
Algorithm fix _restructured_sentence
1. FOR every pronoun in restructured sentences DO 2-3
2. resolve pronoun in original and restructured text.
3. IF they are not the same THEN
(a) replace pronoun in restructured text with refer-
ring expression for antecedent in original text
(b) IF that antecedent NP has ended up in second
sentence THEN
i. temporarily replace that NP with pronoun
ii. check that it resolves correctly.
iii. IF it does THEN
</listItem>
<equation confidence="0.572248333333333">
make the replacement in i permanent
ELSE
withdraw replacement in i
</equation>
<bodyText confidence="0.8274495">
We still need to ensure that future anaphoric
links are not affected. This is described next.
We now describe how we can tell when future
anaphoric links will be affected, and how we can
fix disrupted links
3.2.1 Transforms that preserve Relative
Salience
In example 9 above, the five most salient classes
at the end of sentence (9) c. in the original text are:
David Beckham, revisionist hints,
virtues, general population, football
The five most salient classes at the end of sentence
</bodyText>
<listItem confidence="0.745592">
(9) c&amp;quot;. in the restructured text are:
</listItem>
<bodyText confidence="0.804856666666667">
David Beckham, revisionist hints,
virtues, general population, football
We find that the relative salience of entities is pre-
served. This tells us that the reader will be able to
resolve future pronouns correctly.
For another example, consider:
</bodyText>
<listItem confidence="0.97073275">
(10) a. The Supreme Court agreed to decide whether the fed-
eral Pension Benefit Guaranty Corp. may require
LTV Corp. to reassume funding responsibility for a
$2.3 billion shortfall in the company&apos;s pension plans
</listItem>
<bodyText confidence="0.953791086956522">
b. The high court&apos;s decision may affect the stability of
many large corporate pension plans that have relied
on the availability of pension insurance provided by
the federal insurance agency.
c. The agencyl , which is funded through insurance pre-
miums from employers , insures pension benefits for
some 30 million private-sector workers who take part
in single-employer pension plans.
At the end of sentence (10) c., the top 5 salience
classes are (in order):
agency; pension benefits, 30 million
private-sector workers, part, single-
employer pension plans
When we split sentence (10) c. the first time, we
choose to order the simplified sentences as (10) c&apos;.
(sentence (10) c. is the same as sentence 8 that was
dealt with in section 2.4).
(10) c&apos;. The agency&apos; is funded through insurance premiums
from employers. The agency&apos; insures pension ben-
efits for some 30 million private-sector workers who
take part in single-employer pension plans.
When sentence (10) c. is replaced by (10) c&apos;.
the top 5 salience classes are:
</bodyText>
<page confidence="0.997756">
107
</page>
<bodyText confidence="0.989022875">
agency, pension benefits, 30 million
private-sector workers, part, single-
employer pension plans
Again, we find that the relative salience of enti-
ties is preserved by this transform and hence future
anaphoric links will not be disturbed. As an illus-
tration of this, consider the sentence following the
simplified sentence (10) c&apos;. in the original text:
</bodyText>
<listItem confidence="0.7891925">
(10) d. It&apos; recently reported assets of $2.4 billion and liabil-
ities of $4 billion.
</listItem>
<bodyText confidence="0.825624">
Our anaphora resolution algorithm resolves the
pronoun (it) in sentence (10) d. identically (to
agency) for the simplified and original texts, sug-
gesting that we can safely leave it as it is.
</bodyText>
<subsectionHeader confidence="0.451729">
3.2.2 Transforms that alter Relative Salience
</subsectionHeader>
<bodyText confidence="0.9880265">
If a clause attaches to a non-subject NP, the dis-
course structure is invariably disturbed. Consider:
</bodyText>
<listItem confidence="0.7998805">
(11) a. Back then, scientists&apos; had no way of ferreting out
specific genes, but under a microscope they&amp;quot; could
see the 23 pairs of chromosomes in the cells that con-
tain the genes.
b. Occasionally, gross chromosome damage was visi-
ble.
c. Dr. Knudson2 found that some children with the eye
cancer had inherited a damaged copy of chromosome
No. 13 from a parent3, who had necessarily had the
disease.
</listItem>
<bodyText confidence="0.921043">
At the end of sentence (11) c., the top 5 salience
classes are:
Dr Knudson, children, damaged copy,
parent, eye cancer
When we split the last sentence, we have the
choice of ordering the simplified sentences as ei-
ther of (11) c&apos;. or (11) c&amp;quot;.
</bodyText>
<listItem confidence="0.5654405">
(11) c&apos;. A parent3 had necessarily had the disease. Dr.
Knudson2 found that some children with the eye can-
</listItem>
<bodyText confidence="0.979885821428572">
cer had inherited a damaged copy of chromosome
No. 13 from the parent.
c&amp;quot;. Dr. Knudson2 found that some children with the eye
cancer had inherited a damaged copy of chromosome
No. 13 from a parent. The parent had necessarily
had the disease.
When sentence (11) c. is replaced by (11) c&apos;.,
the top 5 salience classes are:
Dr Knudson, children, damaged copy,
parent, eye cancer
When sentence (11) c. is replaced by (11) c&amp;quot;.,
the top 5 salience classes are:
parent, disease, Dr Knudson, children,
damaged copy
There is now a conflict between preserving the
discourse structure in terms of anaphoric links
and preserving the discourse structure in terms of
rhetorical relations. The non-restrictive relative
clause has an elaboration relationship with the ref-
erent NP. To maintain this elaboration relation-
ship after simplification, the dis-embedded clause
needs to be the second sentence, as in (11) c&amp;quot;.
However, this ordering significantly disrupts the
relative salience of different entities that is more or
less preserved by the ordering (11) c&apos;. This con-
flict between picking the ordering that preserves
anaphoric links and the ordering that preserves
rhetorical structure is unavoidable as the simplifi-
cation process places a noun phrase that was orig-
inally in a non-subject position in a subject po-
sition, hence boosting its salience. Our solution
is to select the ordering that preserves rhetorical
structure ((11) c&amp;quot;.) and detect and then fix broken
anaphoric links as described next.
We detect and fix broken anaphoric links as fol-
lows. We consider each sentence following the
simplified sentence. For each pronoun we en-
counter, we use our anaphora resolution proce-
dure to find its antecedent in both the original and
simplified texts. If the antecedents differ, we re-
place the pronoun by a referring expression for its
correct antecedent (determined using the original
text). The salience scores are then recomputed.
This process continues until the relative salience
of entities in the original and simplified text are
the same again.
Now consider the sentence that follows the sim-
plified sentence (11) c.
(11) d. Under a microscope he orxgxnal:2 , surzphfied: 3 could ac-
tually see that a bit of chromosome 13 was missing.
Our anaphora resolution algorithm resolves the
pronoun he in sentence (11) d. to Dr Knudson
in the original text, but incorrectly to parent in the
simplified text. To preserve the meaning of the
original text, we need to replace the pronoun in
the simplified text with a new referring expression
</bodyText>
<page confidence="0.998181">
108
</page>
<bodyText confidence="0.911257130434782">
for its antecedent in the original text. Thus we,
replace (11) d. with (11) d&apos;. below:
(11) d&apos;. Under a microscope Dr. Knudson2 could actually see
that a bit of chromosome 13 was missing.
Now, we find that at the end of this sentence,
the five most salient classes are the similar for the
original text:
Dr Knudson, microscope, bit, chromo-
some, children
and the simplified text:
Dr Knudson, microscope, bit, chromo-
some, parent
This tells us that future anaphoric link will not
be disrupted by our simplification process.
This process of fixing anaphoric links looks
quite daunting. However, in practice, as salience
decreases rapidly at sentence boundaries, we
rarely (in only 2% of the cases; refer to section
4 on evaluation) have to consider more than just
the one sentence succeeding the transformed one.
Hence the loop in step 2 below is rarely executed
more than once.
A1gorithmfixutureiinks
</bodyText>
<listItem confidence="0.978477166666667">
1. IF relative salience of entities in original and trans-
formed text is same, THEN flag = 0 ELSE flag =1
2. WHILE flag DO steps 3 and 6
3. FOR every pronoun in next sentence DO 4-5
4. resolve pronoun in original and transformed text.
5. IF they are not the same THEN
</listItem>
<bodyText confidence="0.532112">
replace pronoun in transformed text with referring
expression for antecedent in original text
</bodyText>
<listItem confidence="0.327108">
6. IF relative salience of entities in original and trans-
formed text is same, THEN flag= 0 ELSE flag =1
</listItem>
<sectionHeader confidence="0.999467" genericHeader="evaluation">
4 Evaluation
</sectionHeader>
<bodyText confidence="0.991190023809524">
For many of the algorithms presented in this pa-
per, evaluation is difficult. It is hard to quantify the
effects of text restructuring on a text&apos;s discourse-
level structure. The effects of many regeneration
decisions (eg. cue word selection and sentence or-
dering) on the regenerated text are largely stylistic,
which makes evaluation subjective.
The referring expression generator gives correct
results on 81%, acceptable results on - 12% and
wrong results on 7% of cases, when evaluated
on WSJ data (Siddharthan and Copestake, 2002).
A generated referring expression was labelled as
correct if it was optimal and factually accurate,
as acceptable if the generated expression was ac-
curate but suboptimal and as wrong if the gen-
erated expression was nonsensical or ambiguous
with a distractor. The mistakes mainly arose due to
multi-word expressions being incorrectly analysed
as multiple attributes to generate, for example, the
care products from personal care products.
That evaluation considered only examples
where there were one or more distractors in con-
text. However, in over 90% of the cases for which
we need to generate referring expressions, the con-
trast set of distractors is empty, which means the
error rate for our application is less than 1%.
For a preliminary evaluation of the other regen-
eration components, we used a corpus of newspa-
per columns and news reports, travelogues, medi-
cal articles and literary extracts and manually ex-
amined the output of our text simplification algo-
rithm on the first 250 embedded clauses.
Our method for selecting determiners gave
wrong results on 4% of examples. The following
examples show the output of our algorithm for two
sentences. In example 12, the adjectival pronoun
his would have been preferable to this in the refer-
ring expression. In example 13, the referring ex-
pression should have had the indefinite determiner
a.
(12) a. Puckett played in 10 All-Star games during his ca-
reer, which was cut short by glaucoma.
</bodyText>
<subsectionHeader confidence="0.533085">
b. Puckett played in 10 All-Star games during his ca-
</subsectionHeader>
<bodyText confidence="0.875436307692308">
reer. This career was cut short by glaucoma.
(13) a. Petroleum companies were also popular because of
expectations of a weaker dollar, which cuts crude-oil
prices.
b. Petroleum companies were also popular because of
expectations of a weaker dollar. This weaker dollar
cuts crude-oil prices.
The algorithms on preserving anaphoric links
can be evaluated more objectively. 20% of
the cases contained pronouns in the sentence to
be simplified. Assuming that salience based
anaphora resolution algorithms perform with an
accuracy of 0.65 on open domains (Barbu
</bodyText>
<page confidence="0.997413">
109
</page>
<bodyText confidence="0.9999475">
and Mitkov, 2001; Preiss, 2002), algorithm
fix_restructured_sentence can be expected to have
an error rate of around 20 x 0.35%= 7%. In prac-
tice, our algorithm made mistakes in only 2.5%
of the cases. This is because our anaphora resolu-
tion algorithm performs with an accuracy of -0.80
on our corpus, and because intra-sentential pro-
nouns are relatively easy to resolve.
The loop in algorithm fix_future_links needed to
be executed only once in 98% of the cases. In the
remaining 2% cases, the loop needed to be exe-
cuted twice. 15% of the cases contained anaphora
in the sentence following the simplified sentence.
Assuming again that salience based anaphora res-
olution algorithms perform with an accuracy of
- 0.65 on open domains, algorithm fix,future _links
can be expected to have an error rate of around
15 x 0.35%= - 5%. Experimentally, using our
anaphora resolution on this corpus, we report an
error rate of -4%.
</bodyText>
<sectionHeader confidence="0.994558" genericHeader="conclusions">
5 Conclusions and Future Work
</sectionHeader>
<bodyText confidence="0.999982571428571">
In this paper, we have motivated the need for a
regeneration component in text simplification sys-
tems by showing how naive syntactic restructuring
of text can significantly disturb discourse struc-
ture. We have presented and evaluated techniques
for detecting and correcting these disruptions in
discourse structure. In particular, we have exam-
ined the issues of preserving the rhetorical rela-
tionships between the original clauses and phrases
and preserving the text&apos;s anaphoric link struc-
ture. We believe that the techniques we have de-
scribed to analyse the simplified discourse might
prove useful to other NLP applications that in-
volve transforming text; in particular, summarisa-
tion and translation.
We have tried to evaluate our algorithms intrin-
sically. Future work includes an extrinsic eval-
uation of these algorithms, using comprehension
tests on subjects. This would be more useful than
intrinsic evaluations in judging the benefits of text
restructuring to target groups like aphasics.
</bodyText>
<sectionHeader confidence="0.984708" genericHeader="acknowledgments">
Acknowledgement
</sectionHeader>
<bodyText confidence="0.995721">
This work was partially supported by the EC
Fifth framework project Deep Thought IST-2001-
37836.
</bodyText>
<sectionHeader confidence="0.99064" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.99992354">
Catalina Barbu and Ruslan Mitkov. 2001. Evaluation
tool for rule-based anaphora resolution methods. In
Proceedings of the 39th Annual Meeting of the Asso-
ciation for Computational Linguistics (ACL 2001),
Toulouse, France, pages 34-41.
John Carroll, Guido Minnen, Darren Pearce, Yvonne
Canning, Siobhan Devlin, and John Tait. 1999.
Simplifying English text for language impaired
readers. In Proceedings of the 9th Conference of the
European Chapter of the Association for Computa-
tional Linguistics (EACL), Bergen, Norway.
Raman Chandrasekar and Bangalore Srinivas. 1997.
Automatic induction of rules for text simplification.
Knowledge-Based Systems, 10:183-190.
Raman Chandrasekar, Christine Doran, and Bangalore
Srinivas. 1996. Motivations and methods for text
simplification. In Proceedings of the Sixteenth In-
ternational Conference on Computational Linguis-
tics (COLING &apos;96), Copenhagen, Denmark.
Robert Dale and N. Haddock. 1991. Generating refer-
ring expressions involving relations. In Proceedings
of EACL-91, Berlin, pages 161-166.
Siobhan Devlin. 1999. Simplifying natural language
for aphasic readers. Technical report, Ph.D. thesis,
University of Sunderland, UK.
Christopher Kennedy and Branimir Boguraev. 1996.
Anaphora in a wider context: Tracking discourse
referents. In European Conference on Artificial In-
telligence, pages 582-586. John Wiley and Sons,
Ltd, London/New York.
Shalom Lappin and Herbert J. Leass. 1994. An algo-
rithm for pronominal anaphora resolution. Compu-
tational Linguistics, 20(4):535-561.
William C. Mann and Sandra A. Thompson. 1988.
Rhetorical Structure Theory: Towards a functional
theory of text organization. Text, 8(3):243-281.
Judita Preiss. 2002. Choosing a parser for anaphora
resolution. In Proceedings of the 4th Discourse
Anaphora and Anaphor Resolution Colloquium
(DAARC 2002), Lisbon, Portugal, pages 175-180.
Ehud Reiter and Robert Dale. 1992. A fast algorithm
for the generation of referring expressions. In Pro-
ceedings of the 14th International Conference on
Computational Linguistics, Nantes, France, pages
232-238.
Advaith Siddharthan and Ann Copestake. 2002. Gen-
erating anaphora for simplifying text. In Proceed-
ings of the 4th Discourse Anaphora and Anaphor
Resolution Colloquium (DAARC 2002), Lisbon, Por-
tugal, pages 199-204.
</reference>
<page confidence="0.998398">
110
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.217140">
<title confidence="0.946934">Preserving Discourse Structure when Simplifying Text Advaith Natural Language and Information Processing</title>
<note confidence="0.2723425">Computer Laboratory, University of as372 @cl . cam. ac .uk</note>
<abstract confidence="0.997725304347826">Text simplification involves restructuring sentences by replacing particular syntactic constructs (like embedded clauses and appositives). The aim is to make the text easier to read for some target group (like aphasics and people with low reading ages) or easier to process by some program (like a parser or machine translation system). However, sentencelevel syntactic restructuring can wreak havoc with the discourse structure of a text, actually making it harder to comprehend, and possibly even altering its meaning. In this paper, we present and evaluate techniques for detecting and correcting disruptions in discourse structure caused by syntactic restructuring. In particular, we look at the issues of preserving the rhetorical relationships between the original clauses and phrases and preserving the anaphoric link structure of the text.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Catalina Barbu</author>
<author>Ruslan Mitkov</author>
</authors>
<title>Evaluation tool for rule-based anaphora resolution methods.</title>
<date>2001</date>
<booktitle>In Proceedings of the 39th Annual Meeting of the Association for Computational Linguistics (ACL</booktitle>
<pages>34--41</pages>
<location>Toulouse, France,</location>
<marker>Barbu, Mitkov, 2001</marker>
<rawString>Catalina Barbu and Ruslan Mitkov. 2001. Evaluation tool for rule-based anaphora resolution methods. In Proceedings of the 39th Annual Meeting of the Association for Computational Linguistics (ACL 2001), Toulouse, France, pages 34-41.</rawString>
</citation>
<citation valid="true">
<authors>
<author>John Carroll</author>
<author>Guido Minnen</author>
<author>Darren Pearce</author>
<author>Yvonne Canning</author>
<author>Siobhan Devlin</author>
<author>John Tait</author>
</authors>
<title>Simplifying English text for language impaired readers.</title>
<date>1999</date>
<booktitle>In Proceedings of the 9th Conference of the European Chapter of the Association for Computational Linguistics (EACL),</booktitle>
<location>Bergen, Norway.</location>
<contexts>
<context position="1982" citStr="Carroll et al., 1999" startWordPosition="297" endWordPosition="300">r easier to process by some program (like parsers or machine translation systems). When we constrain the restructuring operations to preserve the meaning and information content of the original text, we call the process text simplification. Syntactic transforms for dis-embedding relative clauses were first suggested as a preprocessing step for parsers (Chandrasekar et al., 1996; Chandrasekar and Srinivas, 1997) as they reduce sentence length and hence improve parser throughput. They were later used as part of a text simplification project aimed at making newspaper text accessible to aphasics (Carroll et al., 1999; Devlin, 1999). We illustrate syntactic simplification with an example. The sentence (1) a. contains two relative clauses and one conjoined verb phrase. Our text simplification system can simplify (1) a. to (1) b. (1) a. Also contributing to the firmness in copper, the analyst noted, was a report by Chicago purchasing agents, which precedes the full purchasing agents report that is due out today and gives an indication of what the full report might hold. b. Also contributing to the firmness in copper, the analyst noted, was a report by Chicago purchasing agents. The Chicago report precedes a </context>
</contexts>
<marker>Carroll, Minnen, Pearce, Canning, Devlin, Tait, 1999</marker>
<rawString>John Carroll, Guido Minnen, Darren Pearce, Yvonne Canning, Siobhan Devlin, and John Tait. 1999. Simplifying English text for language impaired readers. In Proceedings of the 9th Conference of the European Chapter of the Association for Computational Linguistics (EACL), Bergen, Norway.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Raman Chandrasekar</author>
<author>Bangalore Srinivas</author>
</authors>
<title>Automatic induction of rules for text simplification. Knowledge-Based Systems,</title>
<date>1997</date>
<pages>10--183</pages>
<contexts>
<context position="1776" citStr="Chandrasekar and Srinivas, 1997" startWordPosition="262" endWordPosition="266"> embedded clauses and appositives) in sentences. The aim is usually to reduce their grammatical complexity to make the text either easier to read for some target group (like aphasics and people with low reading ages) or easier to process by some program (like parsers or machine translation systems). When we constrain the restructuring operations to preserve the meaning and information content of the original text, we call the process text simplification. Syntactic transforms for dis-embedding relative clauses were first suggested as a preprocessing step for parsers (Chandrasekar et al., 1996; Chandrasekar and Srinivas, 1997) as they reduce sentence length and hence improve parser throughput. They were later used as part of a text simplification project aimed at making newspaper text accessible to aphasics (Carroll et al., 1999; Devlin, 1999). We illustrate syntactic simplification with an example. The sentence (1) a. contains two relative clauses and one conjoined verb phrase. Our text simplification system can simplify (1) a. to (1) b. (1) a. Also contributing to the firmness in copper, the analyst noted, was a report by Chicago purchasing agents, which precedes the full purchasing agents report that is due out </context>
<context position="4096" citStr="Chandrasekar and Srinivas (1997)" startWordPosition="620" endWordPosition="623"> Input Sentence Analysis Transformation Regeneration Determine Clauses Apply Sequence of Rules Select Cue Words Decide Attachment Generate Referring Expressions Select Determiners Output Sentences Order Simplified Sentences Restore Anaphoric Links Figure 1: An Architecture for Syntactic Simplification sentence length) and text summarisation systems based on sentence extraction (as simplified sentences contain smaller units of information). Previous research on text simplification has not considered the discourse level issues that arise from applying syntactic transforms at the sentence level. Chandrasekar and Srinivas (1997), for example, use an architecture with two stages— analysis and transformation. There are various discourse level issues that arise when carrying out sentence-level syntactic restructuring of the sort illustrated by example 1. Not considering these discourse implications could result in the resultant text losing coherence, thus making it harder to read, or alter the intended meaning; in either case, making the text harder to comprehend. Our architecture (figure 1) therefore uses a third stage— regeneration, that we describe in this paper. In section 2, we describe how to preserve the rhetoric</context>
</contexts>
<marker>Chandrasekar, Srinivas, 1997</marker>
<rawString>Raman Chandrasekar and Bangalore Srinivas. 1997. Automatic induction of rules for text simplification. Knowledge-Based Systems, 10:183-190.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Raman Chandrasekar</author>
<author>Christine Doran</author>
<author>Bangalore Srinivas</author>
</authors>
<title>Motivations and methods for text simplification.</title>
<date>1996</date>
<booktitle>In Proceedings of the Sixteenth International Conference on Computational Linguistics (COLING &apos;96),</booktitle>
<location>Copenhagen, Denmark.</location>
<contexts>
<context position="1742" citStr="Chandrasekar et al., 1996" startWordPosition="258" endWordPosition="261"> syntactic constructs (like embedded clauses and appositives) in sentences. The aim is usually to reduce their grammatical complexity to make the text either easier to read for some target group (like aphasics and people with low reading ages) or easier to process by some program (like parsers or machine translation systems). When we constrain the restructuring operations to preserve the meaning and information content of the original text, we call the process text simplification. Syntactic transforms for dis-embedding relative clauses were first suggested as a preprocessing step for parsers (Chandrasekar et al., 1996; Chandrasekar and Srinivas, 1997) as they reduce sentence length and hence improve parser throughput. They were later used as part of a text simplification project aimed at making newspaper text accessible to aphasics (Carroll et al., 1999; Devlin, 1999). We illustrate syntactic simplification with an example. The sentence (1) a. contains two relative clauses and one conjoined verb phrase. Our text simplification system can simplify (1) a. to (1) b. (1) a. Also contributing to the firmness in copper, the analyst noted, was a report by Chicago purchasing agents, which precedes the full purchas</context>
</contexts>
<marker>Chandrasekar, Doran, Srinivas, 1996</marker>
<rawString>Raman Chandrasekar, Christine Doran, and Bangalore Srinivas. 1996. Motivations and methods for text simplification. In Proceedings of the Sixteenth International Conference on Computational Linguistics (COLING &apos;96), Copenhagen, Denmark.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Robert Dale</author>
<author>N Haddock</author>
</authors>
<title>Generating referring expressions involving relations.</title>
<date>1991</date>
<booktitle>In Proceedings of EACL-91,</booktitle>
<pages>161--166</pages>
<location>Berlin,</location>
<contexts>
<context position="8763" citStr="Dale and Haddock, 1991" startWordPosition="1363" endWordPosition="1366"> in those days,&apos; says 51- year-old Cathy Tinsall, who had five children. b. &apos;The pace of life was slower in those days,&apos; says 51- year-old Cathy Tinsall. Cathy Tinsall had five children. c. &apos;The pace of life was slower in those days,&apos; says 51- year-old Cathy Tinsall. 51-year-old Cathy Tinsall had five children. (4) c., apart from sounding stilted, emphasises Cathy Tinsall&apos;s age. This might, for example, inadvertently suggest to the reader that the relationship between her age and her having five children is important. Existing referring expression generation algorithms (Reiter and Dale, 1992; Dale and Haddock, 1991) can&apos;t cope with open domains like newspaper text as they assume a classification of adjectives which is possible only for very restricted domains. We have proposed a new algorithm (Siddharthan and Copestake, 2002) that relies on WordNet synonym and antonym sets and gives equivalent results on the examples cited in the literature and improved results in other cases that prior approaches cannot handle. This algorithm is suitable for open domains like newspaper text and has been evaluated on the text-simplification task using Wall Street Journal data with promising results (summarised in section</context>
</contexts>
<marker>Dale, Haddock, 1991</marker>
<rawString>Robert Dale and N. Haddock. 1991. Generating referring expressions involving relations. In Proceedings of EACL-91, Berlin, pages 161-166.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Siobhan Devlin</author>
</authors>
<title>Simplifying natural language for aphasic readers.</title>
<date>1999</date>
<tech>Technical report, Ph.D. thesis,</tech>
<institution>University of Sunderland, UK.</institution>
<contexts>
<context position="1997" citStr="Devlin, 1999" startWordPosition="301" endWordPosition="302"> some program (like parsers or machine translation systems). When we constrain the restructuring operations to preserve the meaning and information content of the original text, we call the process text simplification. Syntactic transforms for dis-embedding relative clauses were first suggested as a preprocessing step for parsers (Chandrasekar et al., 1996; Chandrasekar and Srinivas, 1997) as they reduce sentence length and hence improve parser throughput. They were later used as part of a text simplification project aimed at making newspaper text accessible to aphasics (Carroll et al., 1999; Devlin, 1999). We illustrate syntactic simplification with an example. The sentence (1) a. contains two relative clauses and one conjoined verb phrase. Our text simplification system can simplify (1) a. to (1) b. (1) a. Also contributing to the firmness in copper, the analyst noted, was a report by Chicago purchasing agents, which precedes the full purchasing agents report that is due out today and gives an indication of what the full report might hold. b. Also contributing to the firmness in copper, the analyst noted, was a report by Chicago purchasing agents. The Chicago report precedes a full purchasing</context>
</contexts>
<marker>Devlin, 1999</marker>
<rawString>Siobhan Devlin. 1999. Simplifying natural language for aphasic readers. Technical report, Ph.D. thesis, University of Sunderland, UK.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Christopher Kennedy</author>
<author>Branimir Boguraev</author>
</authors>
<title>Anaphora in a wider context: Tracking discourse referents.</title>
<date>1996</date>
<booktitle>In European Conference on Artificial Intelligence,</booktitle>
<pages>582--586</pages>
<publisher>John Wiley and Sons, Ltd,</publisher>
<location>London/New York.</location>
<contexts>
<context position="14096" citStr="Kennedy and Boguraev, 1996" startWordPosition="2242" endWordPosition="2245">r 1. order = &amp;quot;preserve&amp;quot; 2. IF cue word introduction changes clause order THEN order = &amp;quot;reverse&amp;quot; 3. IF non-restrictive clause THEN IF referent NP is a subject THEN order = &amp;quot;reverse&amp;quot; 4. IF length(senti )-length(sent2) &gt; threshold THEN order = &amp;quot;reverse&amp;quot; Syntactic restructuring that involves splitting sentences or changing their voice can change the grammatical function of NPs and alter the order in which they are introduced into the discourse. This can affect the reader&apos;s ability to correctly resolve pronouns further in the text. If we cannot ensure that the most salient (Lappin and Leass, 1994; Kennedy and Boguraev, 1996) entities before simplification remain the most salient after simplification, we have to consider the possibility of broken anaphoric links We do this in section 3.2. When syntactic restructuring reverses the original clause order, this disruption in the anaphoric link structure can become evident in the restructured sentences themselves. We illustrate this in section 3.1. In both cases, our approach is the same; we make use of a pronoun-resolution algorithm in deciding what to generate. The discussion in this section is based on salience and our implementation uses a shallow version of the La</context>
</contexts>
<marker>Kennedy, Boguraev, 1996</marker>
<rawString>Christopher Kennedy and Branimir Boguraev. 1996. Anaphora in a wider context: Tracking discourse referents. In European Conference on Artificial Intelligence, pages 582-586. John Wiley and Sons, Ltd, London/New York.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Shalom Lappin</author>
<author>Herbert J Leass</author>
</authors>
<title>An algorithm for pronominal anaphora resolution.</title>
<date>1994</date>
<journal>Computational Linguistics,</journal>
<pages>20--4</pages>
<contexts>
<context position="14067" citStr="Lappin and Leass, 1994" startWordPosition="2238" endWordPosition="2241">Algorithm sentence _order 1. order = &amp;quot;preserve&amp;quot; 2. IF cue word introduction changes clause order THEN order = &amp;quot;reverse&amp;quot; 3. IF non-restrictive clause THEN IF referent NP is a subject THEN order = &amp;quot;reverse&amp;quot; 4. IF length(senti )-length(sent2) &gt; threshold THEN order = &amp;quot;reverse&amp;quot; Syntactic restructuring that involves splitting sentences or changing their voice can change the grammatical function of NPs and alter the order in which they are introduced into the discourse. This can affect the reader&apos;s ability to correctly resolve pronouns further in the text. If we cannot ensure that the most salient (Lappin and Leass, 1994; Kennedy and Boguraev, 1996) entities before simplification remain the most salient after simplification, we have to consider the possibility of broken anaphoric links We do this in section 3.2. When syntactic restructuring reverses the original clause order, this disruption in the anaphoric link structure can become evident in the restructured sentences themselves. We illustrate this in section 3.1. In both cases, our approach is the same; we make use of a pronoun-resolution algorithm in deciding what to generate. The discussion in this section is based on salience and our implementation use</context>
</contexts>
<marker>Lappin, Leass, 1994</marker>
<rawString>Shalom Lappin and Herbert J. Leass. 1994. An algorithm for pronominal anaphora resolution. Computational Linguistics, 20(4):535-561.</rawString>
</citation>
<citation valid="true">
<authors>
<author>William C Mann</author>
<author>Sandra A Thompson</author>
</authors>
<title>Rhetorical Structure Theory: Towards a functional theory of text organization.</title>
<date>1988</date>
<tech>Text,</tech>
<pages>8--3</pages>
<contexts>
<context position="4734" citStr="Mann and Thompson, 1988" startWordPosition="718" endWordPosition="721"> use an architecture with two stages— analysis and transformation. There are various discourse level issues that arise when carrying out sentence-level syntactic restructuring of the sort illustrated by example 1. Not considering these discourse implications could result in the resultant text losing coherence, thus making it harder to read, or alter the intended meaning; in either case, making the text harder to comprehend. Our architecture (figure 1) therefore uses a third stage— regeneration, that we describe in this paper. In section 2, we describe how to preserve the rhetorical relations (Mann and Thompson, 1988) that existed between clauses and phrases in the original text and ensure that we do not introduce spurious relations and conversational implicatures. Applying syntactic transforms on text containing pronouns can cause further discourse level problems. In section 3, we discuss how syntactic transforms can result in discourse referents getting introduced in different orders, with different grammatical relations, and how this could make it hard for a reader (or program) to correctly resolve pronouns further in the text. In section 4 we conduct a corpus evaluation of the techniques described in s</context>
</contexts>
<marker>Mann, Thompson, 1988</marker>
<rawString>William C. Mann and Sandra A. Thompson. 1988. Rhetorical Structure Theory: Towards a functional theory of text organization. Text, 8(3):243-281.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Judita Preiss</author>
</authors>
<title>Choosing a parser for anaphora resolution.</title>
<date>2002</date>
<booktitle>In Proceedings of the 4th Discourse Anaphora and Anaphor Resolution Colloquium (DAARC 2002),</booktitle>
<pages>175--180</pages>
<location>Lisbon, Portugal,</location>
<contexts>
<context position="27722" citStr="Preiss, 2002" startWordPosition="4493" endWordPosition="4494">r games during his career. This career was cut short by glaucoma. (13) a. Petroleum companies were also popular because of expectations of a weaker dollar, which cuts crude-oil prices. b. Petroleum companies were also popular because of expectations of a weaker dollar. This weaker dollar cuts crude-oil prices. The algorithms on preserving anaphoric links can be evaluated more objectively. 20% of the cases contained pronouns in the sentence to be simplified. Assuming that salience based anaphora resolution algorithms perform with an accuracy of 0.65 on open domains (Barbu 109 and Mitkov, 2001; Preiss, 2002), algorithm fix_restructured_sentence can be expected to have an error rate of around 20 x 0.35%= 7%. In practice, our algorithm made mistakes in only 2.5% of the cases. This is because our anaphora resolution algorithm performs with an accuracy of -0.80 on our corpus, and because intra-sentential pronouns are relatively easy to resolve. The loop in algorithm fix_future_links needed to be executed only once in 98% of the cases. In the remaining 2% cases, the loop needed to be executed twice. 15% of the cases contained anaphora in the sentence following the simplified sentence. Assuming again t</context>
</contexts>
<marker>Preiss, 2002</marker>
<rawString>Judita Preiss. 2002. Choosing a parser for anaphora resolution. In Proceedings of the 4th Discourse Anaphora and Anaphor Resolution Colloquium (DAARC 2002), Lisbon, Portugal, pages 175-180.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ehud Reiter</author>
<author>Robert Dale</author>
</authors>
<title>A fast algorithm for the generation of referring expressions.</title>
<date>1992</date>
<booktitle>In Proceedings of the 14th International Conference on Computational Linguistics,</booktitle>
<pages>232--238</pages>
<location>Nantes, France,</location>
<contexts>
<context position="8738" citStr="Reiter and Dale, 1992" startWordPosition="1359" endWordPosition="1362">pace of life was slower in those days,&apos; says 51- year-old Cathy Tinsall, who had five children. b. &apos;The pace of life was slower in those days,&apos; says 51- year-old Cathy Tinsall. Cathy Tinsall had five children. c. &apos;The pace of life was slower in those days,&apos; says 51- year-old Cathy Tinsall. 51-year-old Cathy Tinsall had five children. (4) c., apart from sounding stilted, emphasises Cathy Tinsall&apos;s age. This might, for example, inadvertently suggest to the reader that the relationship between her age and her having five children is important. Existing referring expression generation algorithms (Reiter and Dale, 1992; Dale and Haddock, 1991) can&apos;t cope with open domains like newspaper text as they assume a classification of adjectives which is possible only for very restricted domains. We have proposed a new algorithm (Siddharthan and Copestake, 2002) that relies on WordNet synonym and antonym sets and gives equivalent results on the examples cited in the literature and improved results in other cases that prior approaches cannot handle. This algorithm is suitable for open domains like newspaper text and has been evaluated on the text-simplification task using Wall Street Journal data with promising resul</context>
</contexts>
<marker>Reiter, Dale, 1992</marker>
<rawString>Ehud Reiter and Robert Dale. 1992. A fast algorithm for the generation of referring expressions. In Proceedings of the 14th International Conference on Computational Linguistics, Nantes, France, pages 232-238.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Advaith Siddharthan</author>
<author>Ann Copestake</author>
</authors>
<title>Generating anaphora for simplifying text.</title>
<date>2002</date>
<booktitle>In Proceedings of the 4th Discourse Anaphora and Anaphor Resolution Colloquium (DAARC 2002),</booktitle>
<pages>199--204</pages>
<location>Lisbon, Portugal,</location>
<contexts>
<context position="8977" citStr="Siddharthan and Copestake, 2002" startWordPosition="1398" endWordPosition="1401">fe was slower in those days,&apos; says 51- year-old Cathy Tinsall. 51-year-old Cathy Tinsall had five children. (4) c., apart from sounding stilted, emphasises Cathy Tinsall&apos;s age. This might, for example, inadvertently suggest to the reader that the relationship between her age and her having five children is important. Existing referring expression generation algorithms (Reiter and Dale, 1992; Dale and Haddock, 1991) can&apos;t cope with open domains like newspaper text as they assume a classification of adjectives which is possible only for very restricted domains. We have proposed a new algorithm (Siddharthan and Copestake, 2002) that relies on WordNet synonym and antonym sets and gives equivalent results on the examples cited in the literature and improved results in other cases that prior approaches cannot handle. This algorithm is suitable for open domains like newspaper text and has been evaluated on the text-simplification task using Wall Street Journal data with promising results (summarised in section 4). 2.3 Determiner Choice In example 4, the relative clause attached to a proper noun. However, in general, we have to decide on what determiners to use. This decision depends on the rhetorical relation between th</context>
<context position="25635" citStr="Siddharthan and Copestake, 2002" startWordPosition="4154" endWordPosition="4157">alience of entities in original and transformed text is same, THEN flag= 0 ELSE flag =1 4 Evaluation For many of the algorithms presented in this paper, evaluation is difficult. It is hard to quantify the effects of text restructuring on a text&apos;s discourselevel structure. The effects of many regeneration decisions (eg. cue word selection and sentence ordering) on the regenerated text are largely stylistic, which makes evaluation subjective. The referring expression generator gives correct results on 81%, acceptable results on - 12% and wrong results on 7% of cases, when evaluated on WSJ data (Siddharthan and Copestake, 2002). A generated referring expression was labelled as correct if it was optimal and factually accurate, as acceptable if the generated expression was accurate but suboptimal and as wrong if the generated expression was nonsensical or ambiguous with a distractor. The mistakes mainly arose due to multi-word expressions being incorrectly analysed as multiple attributes to generate, for example, the care products from personal care products. That evaluation considered only examples where there were one or more distractors in context. However, in over 90% of the cases for which we need to generate ref</context>
</contexts>
<marker>Siddharthan, Copestake, 2002</marker>
<rawString>Advaith Siddharthan and Ann Copestake. 2002. Generating anaphora for simplifying text. In Proceedings of the 4th Discourse Anaphora and Anaphor Resolution Colloquium (DAARC 2002), Lisbon, Portugal, pages 199-204.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>