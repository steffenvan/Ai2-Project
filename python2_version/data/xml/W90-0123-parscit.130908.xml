<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<title confidence="0.998472">
Relational-Grammar-Based Generation in the JETS Japanese-English
Machine Translation System
</title>
<author confidence="0.5749594">
David E. Johnson
IBM Research, T. J. Watson Research Laboratory
P.O. Box 218
Yorktown Heights, NY 10598 USA
Hideo Watanabe
</author>
<affiliation confidence="0.53932">
IBM Research, Tokyo Research Laboratory
</affiliation>
<address confidence="0.3308095">
5-19 Sanbancho, Chiyoda-ku
Tokyo 102, Japan
</address>
<sectionHeader confidence="0.977404" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999636458333333">
This paper describes the design and func-
tioning of the English generation phase in
JETS, a limited transfer, Japanese-English
machine translation system that is loosely
based on the linguistic framework of relational
grammar. To facilitate the development of
relational-grammar-based generators, we have
built an NL-and-application-independent gen-
erator shell and relational grammar rule-
writing language. The implemented generator,
GENIE, maps abstract canonical structures,
representing the basic predicate-argument
structures of sentences, into well-formed
English sentences via a two-stage plan-and-ex-
ecute design. This modularity permits the
independent development of a very general,
deterministic execution grammar that is driven
by a set of planning rules sensitive to lexical,
syntactic and stylistic constraints. Processing
in GENIE is category-driven, i.e., grammatical
rules are distributed over a part-of-speech
hierarchy and, using an inheritance mech-
anism, are invoked only if appropriate for the
category being processed.
</bodyText>
<sectionHeader confidence="0.998111" genericHeader="introduction">
1- Introduction
</sectionHeader>
<bodyText confidence="0.999888457142857">
This paper discusses relational-grammar-based gener-
ation in the context of JETS, a Japanese-English
machine translation (MT) system that is being devel-
oped at the IBM Research Tokyo Research Laboratory.
To put our work in perspective, we first explain the
motivation for basing JETS on relational grammar (RG)
and then sketch the processing flow in translation. With
this background, we (i) describe and illustrate certain
aspects of the rule-writing language, GEAR, in which
the GENIE English generator has been written; (ii)
comment on key aspects of the generator shell, GEN-
SHELL, in which GENIE has been developed; and (iii)
discuss the design and functioning of the GENIE
English generator.
With few exceptions such as the work being done
at CMU (cf. KBMT-89 (1989), Nirenburg (1987), and
Nirenburg, et. al. (1988)), in the SEMSYN project at
the University of Stuttgart (Rosner (1986)), and the
joint work between the ISI Penman project and the
University of Saarbrticken (Bateman, et. al. (1989)),
generation within the area of machine translation has
received very little attention. Typically, MT systems
have no independently functioning, linguistically justi-
fied generation grammar. In the case of transfer
systems, much of the target language grammar is typi-
cally built into the transfer component, resulting in a
non-modular, rigid and linguistically inadequate system.
It is the norm in MT systems for the linguistic complexi-
ties inherent in robust generation to be simply ignored,
contributing to the inadequacy of MT systems.
In contrast, we have sought to shift more of the
processing burden from transfer onto generation,
allowing our system to incorporate a variety of results
coming from theoretical linguistics. GENIE is an appli-
cation-and-language-independent generator embodying
</bodyText>
<page confidence="0.996957">
174
</page>
<bodyText confidence="0.99069184375">
a robust, linguistically justified RG grammar of English.
Moreover, GENIE incorporates a syntax planner that
applies a set of planning rules determining which rules
in the execution grammar should be applied. As long
recognized in work on text generators, the incorpo-
ration of a syntax planner introduces the kind of flexi-
bility required for robust generation.
JETS is a so-called limited transfer system, i.e., a
system in which structural transfer is kept to a
minimum. The key RG notion in our work is that of
canonical (relational) structure (CS), an abstract level of
syntactic structure representing the basic predicate-ar-
gument structure of clauses in terms of a universal set of
primitive (grammatical) relations such as subject, direct
object, indirect object, chomeur.1
Given the basic assumption that one is developing
a limited transfer system, implying deep analyses of
both the source and target languages which converge on
structurally similar internal representations for trans-
lation equivalents in a wide range of cases, it is critical
to select a linguistic framework which supports the
required analyses, enabling one to conceptualize the lin-
guistic processing in a uniform manner. As discussed in
Johnson (1988b), with respect to MT, RG is a logical
choice of linguistic framework since CSs provide a
natural syntactic bridge between languages as diverse in
structure as Japanese and English. This is so for two
reasons: (1) within one language, the CSs of para-
phrases are typically the same or highly similar and (2)
translation equivalents often have structurally similar if
not isomorphic CSs.
One of the key advantages of RG comes from its
explicit representation of grammatical relations like
subject and direct object, which are argued to be uni-
versal. In contrast, structure-based frameworks such as
transformational-generative grammar (TG) at best only
implicitly represent grammatical relations such as
subject and direct object in terms of linear precedence
and dominance, which are language particular. If one
considers the task of transfer, for instance, it is clear
that representing basic clause structure in terms of
explicitly marked, order-independent relations rather
than in terms of language-dependent structural relations
reduces the amount of structure changing to be done in
the transfer component. This is especially true for lan-
guages like Japanese and English, which differ greatly in
superficial structural properties (not to mention the fact
that Japanese has very free word order, which arguably
makes it even less suited to structure-based frame-
works).
2- Processing Flow in JETS and GENIE
As in all transfer systems, linguistic processing in JETS
can be divided into three phases: analysis, which con-
sists of lexical analysis and parsing, transfer and gener-
ation. The output of analysis is a Japanese CS, which
represents the basic predicate-argument structure of the
Japanese sentence.2 Transfer produces an English CS,
which is often, but not always, isomorphic to the Japa-
nese CS. The English CS is passed to the GENIE gen-
erator, whose task is to generate a grammatically
correct and stylistically appropriate English sentence
given a well-formed CS.
To illustrate, consider the following Japanese sen-
tence and two of the possible English translations:
</bodyText>
<listItem confidence="0.6283105">
I. karera wa Tookyoo e itta rashii
they top Tokyo to went seem
2. They seem to have gone to Tokyo.
3. It seems that they went to Tokyo.
</listItem>
<bodyText confidence="0.947357">
In translating (1), analysis maps the input string into the
Japanese CS shown at the left in Figure 1 on the next
page. Transfer then maps the Japanese CS into the
English CS shown at the right in Figure 1.
I For theoretical background on RG, see the many articles listed in the bibliographic reference Dubinsky and Rosen (1987).
Note that the following abbreviations are used in glosses of Japanese examples: top (topic), nm (nominalize), and pp (post-
position).
</bodyText>
<page confidence="0.683203">
2 For discussion of parsing in JETS, see Maruyama, Watanabe and Ogino (1989).
175
</page>
<figure confidence="0.945431545454546">
Japanese CS for (1) English CS for (2) &amp; (3)
rashii seem
1 1
go(tense . past)
1 loc
they Tokyo
(topic . T) (prep . to)
itta
loc
karera Tookyoo
(topic . wa) (pp . e)
</figure>
<figureCaption confidence="0.999362">
Figure 1. Canonical structures for (1), (2) and (3). Note
that &amp;quot;1&amp;quot; means &amp;quot;subject&amp;quot;, &amp;quot;lc&amp;quot; means &amp;quot;locative&amp;quot;.
</figureCaption>
<bodyText confidence="0.939864272727273">
Given the English CS, it is up to the GENIE English
generator to generate either (2) or (3). Based on the
information that they in the English CS is marked as the
topic of the sentence, GENIE will map the CS into the
superficial (unordered) relational structure shown in
Figure 2 via the relational rule of Subject-to-Subject
Raising (so-called A-raising). Subsequent rules of
Tense-Spelling and Linearization (including the spelling
out of verbal forms and prepositions) will result in the
string They seem to have gone to Tokyo, as shown in
Figure 3.
</bodyText>
<equation confidence="0.71779425">
seem
go(past) they
loc
Tokyo(to)
</equation>
<figureCaption confidence="0.9175835">
Figure 2. A-Raising Applied to the CS of (2) and (3).
Note that &amp;quot;6&amp;quot; means &amp;quot;complement&amp;quot;.
</figureCaption>
<equation confidence="0.931400428571428">
seem
6i
go(past)
loc
Tokyo(to)
loc
Tokyo(to)
</equation>
<bodyText confidence="0.8706755">
=== Linearization, etc. ===&gt;
They seem to have gone to Tokyo
</bodyText>
<figureCaption confidence="0.996309">
Figure 3. Rest of the Derivation of (2)
</figureCaption>
<bodyText confidence="0.999956043478261">
As illustrated above, RG, like TG, is a &amp;quot;multi-
strata!&amp;quot; theory, i.e., clauses typically have more than
one level of syntactic analysis, and these levels/strata
are mediated by clause-level rules. In the case of TG,
the structures are phrase-structure trees, and transf-
ormations map trees into trees; in the case of RG, the
structures are edge-labelled trees (called relational struc-
tures (RS)), where the edge labels represent primitive
relations, and the rules map RSs into RSs.
The use of multiple strata sets RG apart from
functional frameworks such as FUG (Kay 1979) and
LFG (Bresnan 1982), which also use primitive relations
(functions), and from all other monostratal frameworks
such as GPSG (Gazdar, et. al. 1985), whether func-
tional or not. The manipulation of explicitly marked
relations in unordered relational structures sets RG
apart from TG. In our work on Japanese-English MT,
the RG concept of multiple relational strata has proven
to be of significant practical use — facilitating the
design and development of a limited transfer component
and a robust generation component, enhancing modu-
larity, and allowing the linguistic processing to be con-
ceptualized in a uniform fashion.
</bodyText>
<figure confidence="0.99774975">
seem
1
go(past)
/ 1 c
they
A-Raising
====&gt;
Tokyo(to)
Tense-
Spelling
====&gt;
they
seem
have they
61
go(pastpart)
</figure>
<page confidence="0.988544">
176
</page>
<sectionHeader confidence="0.77924" genericHeader="method">
3- The RG Rule Writing Language: GEAR
</sectionHeader>
<bodyText confidence="0.987761692307693">
One key aspect of our implementation of an RG gener-
ator is the GEAR rule-writing language. GEAR permits
a grammar developer to write computationally powerful
RG rules in a linguistically natural manner. GEAR
rules identify grammatical objects via path specifica-
tions, of which there are two types: (1) node-specifier,
consisting of a sequence of one or more relation names,
and (2) property-specifier, consisting of a node-specifier
followed by a property name. For instance, 1:1 indi-
cates a node that is the subject of a node that is the
subject of the node currently being processed (the
focus) and 2.tense denotes the value of the property
tense of a node that is the direct object of the focus.
GEAR path expressions are superficially similar to the
expressions used in unification-based frameworks such
as FUG and PATR (Shieber, et. al. (1983)). However,
GEAR is not unification based, rather it provides a
number of procedural operations, including node
deletion and node creation.
Each rule consists of a sequence of statements, of
which there are several types, e.g., IF-THEN-ELSE,
CALL, ON and restructuring statements. IF-THEN-
ELSE statements control the rule internal processing
flow. CALL statements are used to invoke rules by
name. An ON statement invokes a specified rule on a
node reachable from the focus via a node-specifier.
There are several types of restructuring state-
ment, e.g., ASSIGN, CREATE, DELETE and COPY.
An ASSIGN statement is used to alter the relations of a
node identified via a node-specifier; the new relation is
also specified by a node-specifier. The core of
GENIE&apos;s A-raising rule, whose relational changes are
illustrated in Figure 2 above, is (using 6 for &amp;quot;comple-
ment&amp;quot;):
(ASSIGN 1 6) &amp;quot;Assign my subject as my complement&amp;quot;
(ASSIGN 6:1 1) &amp;quot;Assign my complement&apos;s subject as
my subject&amp;quot;
The complete rule is shown in Figure 4.
% % Define the rule A-raising for intransitive verbs
</bodyText>
<figure confidence="0.3868324">
(DEF-RULE A-Raising OF Intransitive-verb
% % If the A-raising rule switch is turned on
(IF (A-raise is &apos;yes)
% then assign my subject as my complement
THEN (ASSIGN 1 6)
% °AD and assign my complement&apos;s subject as my subject
(ASSIGN 6:1 1)
%% and on my complement call the rule
% % which makes infinitives
(ON 6 (CALL Make-Infinitive))))
</figure>
<figureCaption confidence="0.994192">
Figure 4. GENIE&apos;s A-Raising rule
</figureCaption>
<bodyText confidence="0.978837">
Creation, copying and deletion of nodes are also
specifiable but space limitations preclude discussion.
</bodyText>
<sectionHeader confidence="0.954579" genericHeader="method">
4- The GENSHELL generator shell
</sectionHeader>
<bodyText confidence="0.999857821428571">
Building on our experience with an earlier prototype
developed by Schindler (1988), we have developed an
NL-independent generator shell, GENSHELL, to facili-
tate the development of RG generators. For any given
generator, grammar developers need only specify the
designated grammatical relations, parts of speech, a
part-of-speech hierarchy, dictionaries and grammars.
GENSHELL takes this information and constructs a
runtime generator.
One of the distinctive aspects of GENSHELL,
due to Schindler (1988), is the concept of category-
driven processing. In category-driven processing, parts
of speech are represented as categories in a category
hierarchy (POSH) and nodes in RSs are represented as
objects which are instances of categories and thus can
inherit properties via the POSH. Among the inheritable
properties are grammar rules. For instance, the rules
for Passive and Subject-to-Object Raising (so-called
B-Raising; discussed later) would be associated with the
class Transitive Verb, A-raising would be associated
with the class Intransitive Verb, and Subject-Verb
Agreement would be associated with the superordinate
class Verb.
In our implementation, all rules are defined with
respect to named rule bundles, and rule bundles are
associated either with categories in the POSH, the
general/default cases, or with lexical entries, the special
cases. Rule definitions have the form:
</bodyText>
<page confidence="0.989404">
177
</page>
<bodyText confidence="0.997919512820513">
(DEF-RULE rulename OF rule-bundle-name
(rule-body)).
(As shown in Figure 4 above, a default rule bundle
associated with a POS class is given the same name as
that class.) When a node N associated with category C
and lexical entry L is being processed, the rule search
routine, given a rule named R — the latter comes from
so-called agenda rules which are also associated with C
— uses inheritance to first search for R among any rule
bundles named in L, then searches for R among C&apos;s
rules, then C&apos;s parent&apos;s rules and so on up to the top of
the hierarchy until either some rule named R is found or
the top category is reached and the process fails. In
short, in category-driven processing, the grammar
invoked on N is constructed as appropriate at proc-
essing time on the basis of lexically activated rules and
the rules accessible to N&apos;s category using the POSH and
inheritance.
One example is the ordering of adjectives and
nouns. The class Noun is associated with a
general/default linearization rule which orders adjec-
tives before nouns, generating phrases like tall woman.
Nouns like someone, anyone, etc. are associated with a
lexically triggered linearization rule which places the
adjective after the head noun. These two rules are both
named Linearize. Thus, if the focus is someone and it is
modified by tall, the search routine, looking for
Linearize, will first find the special rule, correctly gener-
ating someone tall.
A category-driven system has two advantages
over more conventional rule systems: (i) it provides a
natural mechanism for dealing with special cases trig-
gered by lexical items, while providing a fail-soft mech-
anism in the form of the general rules inherited from the
POSH and (ii) only rules that in principle could be rele-
vant to processing a given node in an RS will be tested
for application. That is, the POSH provides a linguis-
tically motivated means for organizing a large grammar
into subgrammars.3
</bodyText>
<sectionHeader confidence="0.498777" genericHeader="method">
5- GENIE: the English generator
</sectionHeader>
<bodyText confidence="0.993072512195122">
Generating from CSs requires a robust generation
grammar of the target language, as well as a decision-
making component that decides which surface form is to
be generated. The generation grammar employed in
GENIE is a (deterministic) relational grammar having a
substantial number of clause-level rules which alter
grammatical relations, e.g., Passive, A-raising and
B-raising, as well as minor rules such as Tense-Spelling
and Linearization (the latter of which does not alter
grammatical relations).
As illustrated in Figure 1 above, CSs typically do
not correspond directly to grammatical sentences.
Further, any given CS typically constitutes the basis for
the generation of a number of superficial forms, e.g.,
(2) and (3) above. This control problem has been
addressed by splitting generation into two phases: a
syntax planning phase and an execution phase. The
function of GENIE&apos;s planner is quite different from that
of other generators. Typically, generator planners
decide &amp;quot;what to say&amp;quot;, constructing some sort of internal
representation that is then processed by a realization
component. Typical planners will be concerned with
chunking into sentences, topic selection and word
choice (see, e.g., Appelt(1985), Danlos (1984),
Hovy(1985), Kukich (1983), McKeown (1985), McDo-
nald (1984)), and Mann (1983)).
In the case of JETS, however, since we are in the
domain of transfer-based MT, all of these &amp;quot;high level&amp;quot;
considerations are decided by the analysis and transfer
components. In GENIE&apos;s case, the planner must, on
the basis of a given CS, deal with a myriad of low-level
syntactic conditions and their interactions (most of
which have not been discussed or even recognized in
the generation literature). Internal to GENIE, this
means deciding which of the rules in the deterministic
execution grammar should be applied. For instance,
CSs with seem have a disjunctive grammatical condi-
tion: they must either be raised, yielding the pattern NP
seem to VP (as in (2) above) , or extraposed, yielding
the pattern It seems that S (as in (3) above). Failure to
apply either A-raising or so-called It-Extraposition
</bodyText>
<footnote confidence="0.981307">
3 Earlier work using a lexical hierarchy and inheritance in natural language processing includes Wilensky (1981), Jacobs
(1985) and Zernik and Dyer (1987). These works make heavy use of phrasal patterns (so-called pattern-concept pairs) and
so the conception of grammar and lexicon and hence the notion of what is inherited in these works differ greatly from ours,
which is part of the generative-linguistic tradition.
</footnote>
<page confidence="0.99683">
178
</page>
<bodyText confidence="0.998802446428572">
would result in the ungrammatical pattern *That S
seems (in the case of Figure 1 above: *That they went to
Tokyo seems). The decision to apply A-raising in the
above example is stylistic (&amp;quot;make the topic the main
clause subject, if possible&amp;quot;), but the disjunctive require-
ment (&amp;quot;apply either A-raising or It-Extraposition&amp;quot;) is
grammatical. Having no control over &amp;quot;what to say&amp;quot;,
GENIE&apos;s planner is conceptually part of the realization
phase and not part of the typical &amp;quot;planning phase&amp;quot;.
GENIE&apos;s planner communicates which rules
should be applied to the execution grammar via a set of
so-called rule switches, which are simply binary-valued
properties whose property names are the names of exe-
cution rules, e.g., (A-raise . Yes), (Passive . No). As
shown in Figure 4 above, IF statements are often used
to test for a rule-switch value, which value is either set
by a planning rule or comes from a lexical entry. Rule
switches are a generalization of the earlier concept of
transformational rule features (cf. Lakoff 1970); the
generalization is that rule switches can be dynamically set
by planning rules, based on lexical, syntactic, semantic and
stylistic considerations (see Johnson 1988a for more
examples and further discussion).4
For example, in (1) above, based on the informa-
tion that they is the topic (this information comes from
transfer), a syntax planning rule which is partly respon-
sible for making topics surface subjects sets the switch
(A-raise . Yes), turning on A-raising, and the switch
(It-Extra . No), turning off It- extraposition, resulting in
(2) rather than (3). GENIE&apos;s architecture is shown in
Figure 5.
Planning rules insure that a multitude of lexico-
syntactic and stylistic conditions are met, e.g., that
clauses with modals do not undergo A-raising, pre-
venting the generation of, e.g., *They seem to can swim;
that clauses with verbs like force have passivized subor-
dinate clauses where required to meet coreferential
deletion conditions (cf. She forced him to be examined
by the doctor, *She forced him (for) the doctor to
examine him); and that verbs like teach undergo dative
alternation if there is no specified direct object, gener-
ating He taught her rather than He taught to her (cf.
sing, which has the opposite condition - He sang to her
but *He sang her).
It is also the responsibility of the planner to make
sure island constraints are not violated. For instance, if
a wh-nominal is in a sentential subject, then planning
rules turn on execution rules such as A-raising resulting
in sentences like Who is likely to win (via A-Raising)
rather than *Who is to win likely? or the stylistically
marginal ?Who is it likely (that) will win?. This heuristic
planning rule also insures that in the case of so-called
Tough-Movement sentences, GENIE will generate sen-
tences like Who is easy to please?, (via Tough-Move-
ment) rather than either *Who is to please easy? or
?Who is it easy to please?.
</bodyText>
<figure confidence="0.997233714285714">
English CS (Transfer Output)
Initialization Gen.
Dict.
\l/
English CS
(dictionary information added)
English Sentence
</figure>
<figureCaption confidence="0.919181">
Figure 5. GENIE Components. Note that the POSH
contains the agenda rules and the default planning and
execution rules organized by POS.
</figureCaption>
<figure confidence="0.992020384615385">
Syntax Planner
English CS (rule switche
RG Execution Grammar //
- Precycle
- Cycle
- Post-cycle
- Linearization
/ POSH
/
set)
&lt; 2&gt;
Special
Rules
</figure>
<footnote confidence="0.971643">
4 After completing this work, we discovered that Bates and Ingria (1981) also used a mechanism similar to our &amp;quot;rule
switches&amp;quot; to control generation within a TO framework. Their transformational constraints, however, were set by a human
who wished to test what a given set of constraints would produce. That is, their system had no syntax planner which would
evaluate a given base structure via a set of planning rules and set constraints insuring the generation of only grammatical
sentences.
</footnote>
<page confidence="0.997972">
179
</page>
<bodyText confidence="0.99677375">
Execution rules are turned on (or off) either by
syntax planning rules or by lexical entries. To illustrate
the use of lexical rule-switches, consider the following
example from JETS involving verbs of prevention:
</bodyText>
<listItem confidence="0.74985575">
4. kanojo wa kare ga iku no o habanda
she top he pp go nm pp prevent
5. She prevented him from going.
,
</listItem>
<bodyText confidence="0.974507571428571">
On the Japanese side, the postposition ga marks the
subject of the embedded clause kare ga iku, which has
been nominalized with the dummy noun no, which
carries the direct object marker o. Following the argu-
ments given in Postal (1974), we assume that prevent is
a so-called B-raising trigger (B-raising is the controver-
sial rule which relates sentences such as He believes that
she knows (not raised) and He believes her to know, in
which her is raised up as direct object of believe). The
CS for (5) is as shown to the right in Figure 6 and the
CS of the Japanese sentence (4) is shown to the left:5
Figure 6. Canonical Structures for (4) and (5)
GENIE&apos;s rule of B-raising, given in Figure 7, maps the
English CS into a superficial RS, as shown in Figure 8.
As shown in Figure 6, the English and the Japanese
CSs are isomorphic, i.e., there are no structural changes
in transfer.
To produce (5) from the English CS in Figure 6,
as illustrated in Figure 8, merely requires the dictionary
entry depicted in Figure 9.
To% Define the rule B-raising for transitive verbs
</bodyText>
<sectionHeader confidence="0.388449" genericHeader="method">
(DEF-RULE B-Raising OF Transitive-Verb
</sectionHeader>
<bodyText confidence="0.76094">
%% If the B-raising rule switch is &amp;quot;yes&amp;quot;
</bodyText>
<figure confidence="0.405192111111111">
(IF (B-raise is &apos;yes)
13/0% then make my direct object my complement
THEN (ASSIGN 2 6)
% % and make my complement&apos;s subject
ok To my direct object
(ASSIGN 6:1 2)
% % and on my complement call the rule
°/0% that makes infinitives
(ON 6 (CALL Make-Infinitive))))
</figure>
<figureCaption confidence="0.995593">
Figure 7. GENIE&apos;s B-Raising Rule
</figureCaption>
<figure confidence="0.940222857142857">
prevent prevent
B-Raising
s e go
1 he go
(prep . from)
he (ccomp . ing)
= Other Rules =&gt; She prevented him from going
</figure>
<figureCaption confidence="0.999588">
Figure 8. Example of B-Raising Application
</figureCaption>
<figure confidence="0.9112265">
:lexical-form. prevent
:category. transitive-verb
:rep-lexical-form. nil
:rep-category. nil
:properties. (B-Raise . Yes) (cprep . from)(cvform . ing)
:additional-rule-sets. nil
</figure>
<figureCaption confidence="0.997339">
Figure 9. Lexical entry for &amp;quot;prevent&amp;quot;
</figureCaption>
<bodyText confidence="0.9808465">
This lexical entry states that prevent is a transitive verb,
hence has access to the rules defined for transitive verbs
</bodyText>
<figure confidence="0.992383555555556">
Japanese CS for (4) English CS for (5)
habanda
TRANSFER
prevent
lcnojo iku she
(topic . wa) (topic . T)
1
kare
2
</figure>
<footnote confidence="0.6831275">
5 Postal&apos;s English-internal arguments were based on the fact that the direct object of prevent could be existential there,
weather it and idiom chunks (cf. She prevented there from being a riot/it from raining/the cat from being let out of the bag).
</footnote>
<page confidence="0.994917">
180
</page>
<bodyText confidence="0.999984530612245">
in the POSH, e.g., Passive and B-raising (and the rules
of superordinate classes), and that among its properties
are the rule switch setting (B-Raise . Yes), which trig-
gers Subject-to-Object raising, the feature (ccomp .
from), which determines that the complement clause
(fragment) will be flagged with from via a general rule,
and the feature (cvform . ing), which Make-Infinitive
will use when called by B-Raising to determine the verb
form going in the example. Prevent has no
rep(lacement)-lexical-form, which is used, e.g., to map a
single input form such as look-up into a verb look and a
particle up, or more generally to map senses into lexical
strings. &amp;quot;Rep-cat&amp;quot;, also nil here, can be used to map
one category system into another (not used in GENIE).
&amp;quot;Additional-rule-sets&amp;quot;, also nil, is the repository for the
names of any rule bundles associated with a lexical
entry (e.g., easy, hard, etc. would have the additional-
rule-set name tough-movement, which contains the
Tough Movement rule and the planning rule that turns
Tough Movement on).
As depicted in Figure 5 above, the execution
component consists of three relation-changing phases,
called &amp;quot;pre-cycle&amp;quot;, &amp;quot;cycle&amp;quot; and &amp;quot;post-cycle&amp;quot;, in which
execution rules are applied bottom-to-top, followed by
a top-down linearization phase, which builds an output
string that is then sent to the morphological component
(not shown). Each phase has its own set of agenda
rules, whose functions are to either call grammatical
rules or shift control, i.e., agenda rules are a sequence of
CALL statements. Agenda rules, like grammatical rules,
are defined for classes, so that, e.g., the cyclic agendas
for adjectives, nouns and verbs are different. For
instance, part of the agenda for the cyclic phase of tran-
sitive verbs is: ... (Call B-raising) (Call Dative) (Call
Passive) ..., but none of these rules are relevant to
adjectives, nouns or intransitive verbs. It should be
noted that rules called by a particular agenda might be
accessed via inheritance. E.g., Reflexivization is called
in the cyclic agenda for transitive verbs, but it is associ-
ated with the class Predicate so that it is available to
adjectives in cases like He is proud of himself (it is
assumed that Reflexivization is executed on the proud
clause before A-Raising applies on be).
The grammar implemented in GENIE to date
includes many of the important rules for English clause
structure, including Yes/No questions, Wh-questions,
relative clauses, subordinate clauses of various types,
verb-particle combinations, raisings of various sorts,
passives, and extrapositions.
</bodyText>
<sectionHeader confidence="0.901736" genericHeader="conclusions">
6- Concluding Remarks
</sectionHeader>
<bodyText confidence="0.9999234">
We have developed an application-and-NL-independent
generator shell, GENSHELL, including a flexible dic-
tionary system and a high-level rule-writing system,
GEAR, to facilitate the development of category-driven
RG generators. GENSHELL/GEAR provides a pow-
erful computational framework for the development of
RG-based natural-language-processing components.
We have also implemented GENIE, a robust English
generator, within GENSHELL/GEAR. Besides the
novel use of RG and category-driven processing,
GENIE is notable for its two-stage plan-and-execute
design.
JETS and GENIE are currently being tested on
sentences from Asahi newspaper editorials on economic
matters, a challenging task since editorial sentences can
be very long, with essentially unrestricted vocabulary.
Nevertheless, we have found the initial tests of the gen-
erator encouraging, supporting our view that besides its
intrinsic theoretical interest, RG has practical value in
natural language processing.
</bodyText>
<sectionHeader confidence="0.999003" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.9996812">
Appelt, D. E. 1985. Planning English Sentences. ACL
Series: Studies in Natural Language Processing.
Cambridge UP, Cambridge.
Bateman, J., R. Kasper, J. Schtitz and E. Steiner. 1989.
&amp;quot;Interfacing an English Text Generator with a
German MT Analysis,&amp;quot; submitted to the European
ACL, Manchester, 1989.
Bates, M. and R. Ingria. 1981. &amp;quot;Controlled Transfor-
mational Sentence Generation,&amp;quot; Proceedings of the
19th Annual Meeting of the Association for Compu-
tational Linguistics, Stanford, CA.
Bresnan, J. (ed.) 1982. The Mental Representation of
Grammatical Relations. MIT Press, Cambridge,
Mass.
Danlos, L. 1984. &amp;quot;Conceptual and Linguistic Decisions
in Generation,&amp;quot; Proceedings of COLING-84, Stan-
ford, pp. 501-504.
Dubinksy, S. and C. Rosen (eds) 1987. &amp;quot;A Bibli-
ography on Relational Grammar Through 1987 with
Selected Titles on Lexical-Functional Grammar,&amp;quot;
</reference>
<page confidence="0.980805">
181
</page>
<reference confidence="0.998245597402597">
distributed by Indiana University Linguistics Club,
Bloomington, Indiana.
Gazdar, G., E. Klein, G. Pullum and I. Sag. 1985. Gen-
eralized Phrase Structure Grammar. Harvard Univer-
sity Press, Cambridge, Mass.
Hovy, E. 1985. &amp;quot;Integrating Text Planning and Pro-
duction in Generation,&amp;quot; Proceedings of IJCAI-85,
Los Angeles, CA.
Jacobs, P. S. 1985. A Knowledge-Based Approach to
Language Production. PhD dissertation, UC
Berkeley, Computer Science Division, UCB/CSD
86/254, Berkeley, CA.
Johnson, D. E. 1988a. &amp;quot;On the Linguistic Design of
Post-Analysis in the JETS Japanese-English
Machine Translation System&amp;quot;, Proceedings of the
International Conference on Fifth Generation Com-
puter Systems 1988, Tokyo.
Johnson, D. E. 1988b. &amp;quot;A Relational Grammar
Approach to Machine Translation,&amp;quot; Proceedings of
the Information Processing Society of Japan, Natural
Language Processing, Vol. 88.61.
Kay, M. 1979. &amp;quot;Functional Grammar,&amp;quot; Proceedings 5th
Annual Meeting of the Berkeley Linguistics Society,
Berkeley, CA, pp. 142-158.
KBMT-89. 1989. KBMT-89 Project Report, Center
for Machine Translation, Carnegie Mellon Univer-
sity.
Kukich, K. 1983. Knowledge-Based Report Generation:
A Knowledge Engineering Approach to Natural Lan-
guage Report Generation. PhD dissertation, Infor-
mation Science Department, University of
Pittsburgh.
Lakoff, G. 1970. Irregularity in Syntax. Holt, Rinehart,
Winston, New York.
Mann, W. 1983. &amp;quot;An Overview of the Penman Text
Generation System,&amp;quot; Proceedings of the National
Conference on Artificial Intelligence, pp. 261-265.
Maruyama, H., H. Watanabe, and S. Ogino. 1989. &amp;quot;An
Interactive Japanese Parser for Machine Trans-
lation,&amp;quot; Proceedings of COLING90, Helsinki, to
appear.
McDonald, D. 1984. &amp;quot;Description Direct Control: Its
Implication for Natural Language Generation,&amp;quot; in
N. J. Cercone (ed.) Computational Linguistics, Per-
gamon Press, Oxford, pp. 403-424.
McKeown, K. 1985. Text Generation. Cambridge Uni-
versity Press, Cambridge.
Nirenburg, S. 1987. &amp;quot;A Distributed Generation System
for Machine Translation,&amp;quot; Technical Report, Center
for Machine Translation, Carnegie Mellon Univer-
sity.
Nirenburg, S., R. McCardell, E. Nyberg, P. Werner, S.
Huffman, E. Kenschaft, and I. Nirenburg. 1988.
&amp;quot;Diogenes-88,&amp;quot; Technical Report, Center for
Machine Translation, Carnegie Mellon University.
Postal, P. M. 1974. On Raising. MIT Press, Cambridge.
Wisner, D. 1986. &amp;quot;When Mariko Talks to Siegfried -
Experiences from a Japanese/German Machine
Translation Project,&amp;quot; Proceedings of COLING-86,
Bonn.
Schindler, Peter A. 1988. &amp;quot;General: An Object-Or-
iented System Shell for Relational Grammar-Based
Natural Language Processing&amp;quot;, master&apos;s thesis,
Department of Electrical Engineering and Computer
Science, MIT.
Shieber, S. M., H. Uszkoreit, F.C.N. Pereira, J.J.
Robinson and M. Tyson. 1983. &amp;quot;The Formalism
and Implementation of PATR-II,&amp;quot; In Research on
Interactive Acquisition and Use of Knowledge, Al
Center, SRI International, Menlo Park, CA.
Wilensky, R. 1981. &amp;quot;A Knowledge-Based Approach to
Natural Language Processing: A Progress Report,&amp;quot;
Proceedings Seventh International Joint Conference
on Artificial Intelligence, Vancouver.
Zernik, U. and M. G. Dyer. 1987. &amp;quot;The Self-Ex-
tending Phrasal Lexicon,&amp;quot; Computational Linguistics,
vol. 13, No. 3-4, pp. 308-325.
</reference>
<page confidence="0.99801">
182
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.167217">
<title confidence="0.9988475">Relational-Grammar-Based Generation in the JETS Machine Translation System</title>
<author confidence="0.999352">E David</author>
<affiliation confidence="0.944173">IBM Research, T. J. Watson Research</affiliation>
<address confidence="0.657359">P.O. Box Yorktown Heights, NY 10598 USA</address>
<email confidence="0.493051">Hideo</email>
<affiliation confidence="0.99108">IBM Research, Tokyo Research</affiliation>
<address confidence="0.7987845">5-19 Sanbancho, Tokyo 102, Japan</address>
<abstract confidence="0.99975204">This paper describes the design and functioning of the English generation phase in JETS, a limited transfer, Japanese-English machine translation system that is loosely based on the linguistic framework of relational grammar. To facilitate the development of relational-grammar-based generators, we have built an NL-and-application-independent generator shell and relational grammar rulewriting language. The implemented generator, GENIE, maps abstract canonical structures, representing the basic predicate-argument structures of sentences, into well-formed English sentences via a two-stage plan-and-execute design. This modularity permits the independent development of a very general, deterministic execution grammar that is driven by a set of planning rules sensitive to lexical, syntactic and stylistic constraints. Processing GENIE is grammatical rules are distributed over a part-of-speech hierarchy and, using an inheritance mechanism, are invoked only if appropriate for the category being processed.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>D E Appelt</author>
</authors>
<title>Planning English Sentences.</title>
<date>1985</date>
<booktitle>ACL Series: Studies in Natural Language Processing. Cambridge UP,</booktitle>
<location>Cambridge.</location>
<marker>Appelt, 1985</marker>
<rawString>Appelt, D. E. 1985. Planning English Sentences. ACL Series: Studies in Natural Language Processing. Cambridge UP, Cambridge.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Bateman</author>
<author>R Kasper</author>
<author>J Schtitz</author>
<author>E Steiner</author>
</authors>
<title>Interfacing an English Text Generator with a German MT Analysis,&amp;quot; submitted to the European ACL,</title>
<date>1989</date>
<location>Manchester,</location>
<marker>Bateman, Kasper, Schtitz, Steiner, 1989</marker>
<rawString>Bateman, J., R. Kasper, J. Schtitz and E. Steiner. 1989. &amp;quot;Interfacing an English Text Generator with a German MT Analysis,&amp;quot; submitted to the European ACL, Manchester, 1989.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Bates</author>
<author>R Ingria</author>
</authors>
<title>Controlled Transformational Sentence Generation,&amp;quot;</title>
<date>1981</date>
<booktitle>Proceedings of the 19th Annual Meeting of the Association for Computational Linguistics,</booktitle>
<location>Stanford, CA.</location>
<contexts>
<context position="21313" citStr="Bates and Ingria (1981)" startWordPosition="3376" endWordPosition="3379">NIE will generate sentences like Who is easy to please?, (via Tough-Movement) rather than either *Who is to please easy? or ?Who is it easy to please?. English CS (Transfer Output) Initialization Gen. Dict. \l/ English CS (dictionary information added) English Sentence Figure 5. GENIE Components. Note that the POSH contains the agenda rules and the default planning and execution rules organized by POS. Syntax Planner English CS (rule switche RG Execution Grammar // - Precycle - Cycle - Post-cycle - Linearization / POSH / set) &lt; 2&gt; Special Rules 4 After completing this work, we discovered that Bates and Ingria (1981) also used a mechanism similar to our &amp;quot;rule switches&amp;quot; to control generation within a TO framework. Their transformational constraints, however, were set by a human who wished to test what a given set of constraints would produce. That is, their system had no syntax planner which would evaluate a given base structure via a set of planning rules and set constraints insuring the generation of only grammatical sentences. 179 Execution rules are turned on (or off) either by syntax planning rules or by lexical entries. To illustrate the use of lexical rule-switches, consider the following example fr</context>
</contexts>
<marker>Bates, Ingria, 1981</marker>
<rawString>Bates, M. and R. Ingria. 1981. &amp;quot;Controlled Transformational Sentence Generation,&amp;quot; Proceedings of the 19th Annual Meeting of the Association for Computational Linguistics, Stanford, CA.</rawString>
</citation>
<citation valid="false">
<title>The Mental Representation of Grammatical Relations.</title>
<pages>1982</pages>
<editor>Bresnan, J. (ed.)</editor>
<publisher>MIT Press,</publisher>
<location>Cambridge, Mass.</location>
<marker></marker>
<rawString>Bresnan, J. (ed.) 1982. The Mental Representation of Grammatical Relations. MIT Press, Cambridge, Mass.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L Danlos</author>
</authors>
<title>Conceptual and Linguistic Decisions in Generation,&amp;quot;</title>
<date>1984</date>
<booktitle>Proceedings of COLING-84, Stanford,</booktitle>
<pages>501--504</pages>
<contexts>
<context position="16607" citStr="Danlos (1984)" startWordPosition="2609" endWordPosition="2610">CS typically constitutes the basis for the generation of a number of superficial forms, e.g., (2) and (3) above. This control problem has been addressed by splitting generation into two phases: a syntax planning phase and an execution phase. The function of GENIE&apos;s planner is quite different from that of other generators. Typically, generator planners decide &amp;quot;what to say&amp;quot;, constructing some sort of internal representation that is then processed by a realization component. Typical planners will be concerned with chunking into sentences, topic selection and word choice (see, e.g., Appelt(1985), Danlos (1984), Hovy(1985), Kukich (1983), McKeown (1985), McDonald (1984)), and Mann (1983)). In the case of JETS, however, since we are in the domain of transfer-based MT, all of these &amp;quot;high level&amp;quot; considerations are decided by the analysis and transfer components. In GENIE&apos;s case, the planner must, on the basis of a given CS, deal with a myriad of low-level syntactic conditions and their interactions (most of which have not been discussed or even recognized in the generation literature). Internal to GENIE, this means deciding which of the rules in the deterministic execution grammar should be applied. Fo</context>
</contexts>
<marker>Danlos, 1984</marker>
<rawString>Danlos, L. 1984. &amp;quot;Conceptual and Linguistic Decisions in Generation,&amp;quot; Proceedings of COLING-84, Stanford, pp. 501-504.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Dubinksy</author>
<author>C Rosen</author>
</authors>
<title>A Bibliography on Relational Grammar Through</title>
<date>1987</date>
<institution>Indiana University Linguistics Club,</institution>
<location>Bloomington, Indiana.</location>
<marker>Dubinksy, Rosen, 1987</marker>
<rawString>Dubinksy, S. and C. Rosen (eds) 1987. &amp;quot;A Bibliography on Relational Grammar Through 1987 with Selected Titles on Lexical-Functional Grammar,&amp;quot; distributed by Indiana University Linguistics Club, Bloomington, Indiana.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Gazdar</author>
<author>E Klein</author>
<author>G Pullum</author>
<author>I Sag</author>
</authors>
<title>Generalized Phrase Structure Grammar.</title>
<date>1985</date>
<publisher>Harvard University Press,</publisher>
<location>Cambridge, Mass.</location>
<marker>Gazdar, Klein, Pullum, Sag, 1985</marker>
<rawString>Gazdar, G., E. Klein, G. Pullum and I. Sag. 1985. Generalized Phrase Structure Grammar. Harvard University Press, Cambridge, Mass.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Hovy</author>
</authors>
<title>Integrating Text Planning and Production in Generation,&amp;quot;</title>
<date>1985</date>
<booktitle>Proceedings of IJCAI-85,</booktitle>
<location>Los Angeles, CA.</location>
<marker>Hovy, 1985</marker>
<rawString>Hovy, E. 1985. &amp;quot;Integrating Text Planning and Production in Generation,&amp;quot; Proceedings of IJCAI-85, Los Angeles, CA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P S Jacobs</author>
</authors>
<title>A Knowledge-Based Approach to Language Production.</title>
<date>1985</date>
<institution>UC Berkeley, Computer Science Division,</institution>
<location>UCB/CSD 86/254, Berkeley, CA.</location>
<note>PhD dissertation,</note>
<contexts>
<context position="17620" citStr="Jacobs (1985)" startWordPosition="2772" endWordPosition="2773">f which have not been discussed or even recognized in the generation literature). Internal to GENIE, this means deciding which of the rules in the deterministic execution grammar should be applied. For instance, CSs with seem have a disjunctive grammatical condition: they must either be raised, yielding the pattern NP seem to VP (as in (2) above) , or extraposed, yielding the pattern It seems that S (as in (3) above). Failure to apply either A-raising or so-called It-Extraposition 3 Earlier work using a lexical hierarchy and inheritance in natural language processing includes Wilensky (1981), Jacobs (1985) and Zernik and Dyer (1987). These works make heavy use of phrasal patterns (so-called pattern-concept pairs) and so the conception of grammar and lexicon and hence the notion of what is inherited in these works differ greatly from ours, which is part of the generative-linguistic tradition. 178 would result in the ungrammatical pattern *That S seems (in the case of Figure 1 above: *That they went to Tokyo seems). The decision to apply A-raising in the above example is stylistic (&amp;quot;make the topic the main clause subject, if possible&amp;quot;), but the disjunctive requirement (&amp;quot;apply either A-raising or </context>
</contexts>
<marker>Jacobs, 1985</marker>
<rawString>Jacobs, P. S. 1985. A Knowledge-Based Approach to Language Production. PhD dissertation, UC Berkeley, Computer Science Division, UCB/CSD 86/254, Berkeley, CA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D E Johnson</author>
</authors>
<title>On the Linguistic Design of Post-Analysis in the JETS Japanese-English Machine Translation System&amp;quot;,</title>
<date>1988</date>
<booktitle>Proceedings of the International Conference on Fifth Generation Computer Systems 1988,</booktitle>
<location>Tokyo.</location>
<contexts>
<context position="4395" citStr="Johnson (1988" startWordPosition="644" endWordPosition="645">redicate-argument structure of clauses in terms of a universal set of primitive (grammatical) relations such as subject, direct object, indirect object, chomeur.1 Given the basic assumption that one is developing a limited transfer system, implying deep analyses of both the source and target languages which converge on structurally similar internal representations for translation equivalents in a wide range of cases, it is critical to select a linguistic framework which supports the required analyses, enabling one to conceptualize the linguistic processing in a uniform manner. As discussed in Johnson (1988b), with respect to MT, RG is a logical choice of linguistic framework since CSs provide a natural syntactic bridge between languages as diverse in structure as Japanese and English. This is so for two reasons: (1) within one language, the CSs of paraphrases are typically the same or highly similar and (2) translation equivalents often have structurally similar if not isomorphic CSs. One of the key advantages of RG comes from its explicit representation of grammatical relations like subject and direct object, which are argued to be universal. In contrast, structure-based frameworks such as tra</context>
<context position="19103" citStr="Johnson 1988" startWordPosition="3010" endWordPosition="3011">set of so-called rule switches, which are simply binary-valued properties whose property names are the names of execution rules, e.g., (A-raise . Yes), (Passive . No). As shown in Figure 4 above, IF statements are often used to test for a rule-switch value, which value is either set by a planning rule or comes from a lexical entry. Rule switches are a generalization of the earlier concept of transformational rule features (cf. Lakoff 1970); the generalization is that rule switches can be dynamically set by planning rules, based on lexical, syntactic, semantic and stylistic considerations (see Johnson 1988a for more examples and further discussion).4 For example, in (1) above, based on the information that they is the topic (this information comes from transfer), a syntax planning rule which is partly responsible for making topics surface subjects sets the switch (A-raise . Yes), turning on A-raising, and the switch (It-Extra . No), turning off It- extraposition, resulting in (2) rather than (3). GENIE&apos;s architecture is shown in Figure 5. Planning rules insure that a multitude of lexicosyntactic and stylistic conditions are met, e.g., that clauses with modals do not undergo A-raising, preventin</context>
</contexts>
<marker>Johnson, 1988</marker>
<rawString>Johnson, D. E. 1988a. &amp;quot;On the Linguistic Design of Post-Analysis in the JETS Japanese-English Machine Translation System&amp;quot;, Proceedings of the International Conference on Fifth Generation Computer Systems 1988, Tokyo.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D E Johnson</author>
</authors>
<title>A Relational Grammar Approach to Machine Translation,&amp;quot;</title>
<date>1988</date>
<booktitle>Proceedings of the Information Processing Society of Japan, Natural Language Processing,</booktitle>
<volume>Vol.</volume>
<pages>88--61</pages>
<contexts>
<context position="4395" citStr="Johnson (1988" startWordPosition="644" endWordPosition="645">redicate-argument structure of clauses in terms of a universal set of primitive (grammatical) relations such as subject, direct object, indirect object, chomeur.1 Given the basic assumption that one is developing a limited transfer system, implying deep analyses of both the source and target languages which converge on structurally similar internal representations for translation equivalents in a wide range of cases, it is critical to select a linguistic framework which supports the required analyses, enabling one to conceptualize the linguistic processing in a uniform manner. As discussed in Johnson (1988b), with respect to MT, RG is a logical choice of linguistic framework since CSs provide a natural syntactic bridge between languages as diverse in structure as Japanese and English. This is so for two reasons: (1) within one language, the CSs of paraphrases are typically the same or highly similar and (2) translation equivalents often have structurally similar if not isomorphic CSs. One of the key advantages of RG comes from its explicit representation of grammatical relations like subject and direct object, which are argued to be universal. In contrast, structure-based frameworks such as tra</context>
<context position="19103" citStr="Johnson 1988" startWordPosition="3010" endWordPosition="3011">set of so-called rule switches, which are simply binary-valued properties whose property names are the names of execution rules, e.g., (A-raise . Yes), (Passive . No). As shown in Figure 4 above, IF statements are often used to test for a rule-switch value, which value is either set by a planning rule or comes from a lexical entry. Rule switches are a generalization of the earlier concept of transformational rule features (cf. Lakoff 1970); the generalization is that rule switches can be dynamically set by planning rules, based on lexical, syntactic, semantic and stylistic considerations (see Johnson 1988a for more examples and further discussion).4 For example, in (1) above, based on the information that they is the topic (this information comes from transfer), a syntax planning rule which is partly responsible for making topics surface subjects sets the switch (A-raise . Yes), turning on A-raising, and the switch (It-Extra . No), turning off It- extraposition, resulting in (2) rather than (3). GENIE&apos;s architecture is shown in Figure 5. Planning rules insure that a multitude of lexicosyntactic and stylistic conditions are met, e.g., that clauses with modals do not undergo A-raising, preventin</context>
</contexts>
<marker>Johnson, 1988</marker>
<rawString>Johnson, D. E. 1988b. &amp;quot;A Relational Grammar Approach to Machine Translation,&amp;quot; Proceedings of the Information Processing Society of Japan, Natural Language Processing, Vol. 88.61.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Kay</author>
</authors>
<title>Functional Grammar,&amp;quot;</title>
<date>1979</date>
<booktitle>Proceedings 5th Annual Meeting of the Berkeley Linguistics Society,</booktitle>
<pages>142--158</pages>
<location>Berkeley, CA,</location>
<contexts>
<context position="8814" citStr="Kay 1979" startWordPosition="1372" endWordPosition="1373">Figure 3. Rest of the Derivation of (2) As illustrated above, RG, like TG, is a &amp;quot;multistrata!&amp;quot; theory, i.e., clauses typically have more than one level of syntactic analysis, and these levels/strata are mediated by clause-level rules. In the case of TG, the structures are phrase-structure trees, and transformations map trees into trees; in the case of RG, the structures are edge-labelled trees (called relational structures (RS)), where the edge labels represent primitive relations, and the rules map RSs into RSs. The use of multiple strata sets RG apart from functional frameworks such as FUG (Kay 1979) and LFG (Bresnan 1982), which also use primitive relations (functions), and from all other monostratal frameworks such as GPSG (Gazdar, et. al. 1985), whether functional or not. The manipulation of explicitly marked relations in unordered relational structures sets RG apart from TG. In our work on Japanese-English MT, the RG concept of multiple relational strata has proven to be of significant practical use — facilitating the design and development of a limited transfer component and a robust generation component, enhancing modularity, and allowing the linguistic processing to be conceptualiz</context>
</contexts>
<marker>Kay, 1979</marker>
<rawString>Kay, M. 1979. &amp;quot;Functional Grammar,&amp;quot; Proceedings 5th Annual Meeting of the Berkeley Linguistics Society, Berkeley, CA, pp. 142-158.</rawString>
</citation>
<citation valid="true">
<authors>
<author>KBMT-89</author>
</authors>
<date>1989</date>
<tech>KBMT-89 Project Report,</tech>
<institution>Center for Machine Translation, Carnegie Mellon University.</institution>
<marker>KBMT-89, 1989</marker>
<rawString>KBMT-89. 1989. KBMT-89 Project Report, Center for Machine Translation, Carnegie Mellon University.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Kukich</author>
</authors>
<title>Knowledge-Based Report Generation: A Knowledge Engineering Approach to Natural Language Report Generation.</title>
<date>1983</date>
<tech>PhD dissertation,</tech>
<institution>Information Science Department, University of Pittsburgh.</institution>
<contexts>
<context position="16634" citStr="Kukich (1983)" startWordPosition="2612" endWordPosition="2613">e basis for the generation of a number of superficial forms, e.g., (2) and (3) above. This control problem has been addressed by splitting generation into two phases: a syntax planning phase and an execution phase. The function of GENIE&apos;s planner is quite different from that of other generators. Typically, generator planners decide &amp;quot;what to say&amp;quot;, constructing some sort of internal representation that is then processed by a realization component. Typical planners will be concerned with chunking into sentences, topic selection and word choice (see, e.g., Appelt(1985), Danlos (1984), Hovy(1985), Kukich (1983), McKeown (1985), McDonald (1984)), and Mann (1983)). In the case of JETS, however, since we are in the domain of transfer-based MT, all of these &amp;quot;high level&amp;quot; considerations are decided by the analysis and transfer components. In GENIE&apos;s case, the planner must, on the basis of a given CS, deal with a myriad of low-level syntactic conditions and their interactions (most of which have not been discussed or even recognized in the generation literature). Internal to GENIE, this means deciding which of the rules in the deterministic execution grammar should be applied. For instance, CSs with seem h</context>
</contexts>
<marker>Kukich, 1983</marker>
<rawString>Kukich, K. 1983. Knowledge-Based Report Generation: A Knowledge Engineering Approach to Natural Language Report Generation. PhD dissertation, Information Science Department, University of Pittsburgh.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Lakoff</author>
</authors>
<title>Irregularity in Syntax.</title>
<date>1970</date>
<location>Holt, Rinehart, Winston, New York.</location>
<contexts>
<context position="18934" citStr="Lakoff 1970" startWordPosition="2986" endWordPosition="2987">ly part of the realization phase and not part of the typical &amp;quot;planning phase&amp;quot;. GENIE&apos;s planner communicates which rules should be applied to the execution grammar via a set of so-called rule switches, which are simply binary-valued properties whose property names are the names of execution rules, e.g., (A-raise . Yes), (Passive . No). As shown in Figure 4 above, IF statements are often used to test for a rule-switch value, which value is either set by a planning rule or comes from a lexical entry. Rule switches are a generalization of the earlier concept of transformational rule features (cf. Lakoff 1970); the generalization is that rule switches can be dynamically set by planning rules, based on lexical, syntactic, semantic and stylistic considerations (see Johnson 1988a for more examples and further discussion).4 For example, in (1) above, based on the information that they is the topic (this information comes from transfer), a syntax planning rule which is partly responsible for making topics surface subjects sets the switch (A-raise . Yes), turning on A-raising, and the switch (It-Extra . No), turning off It- extraposition, resulting in (2) rather than (3). GENIE&apos;s architecture is shown in</context>
</contexts>
<marker>Lakoff, 1970</marker>
<rawString>Lakoff, G. 1970. Irregularity in Syntax. Holt, Rinehart, Winston, New York.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W Mann</author>
</authors>
<title>An Overview of the Penman Text Generation System,&amp;quot;</title>
<date>1983</date>
<booktitle>Proceedings of the National Conference on Artificial Intelligence,</booktitle>
<pages>261--265</pages>
<contexts>
<context position="16685" citStr="Mann (1983)" startWordPosition="2620" endWordPosition="2621"> forms, e.g., (2) and (3) above. This control problem has been addressed by splitting generation into two phases: a syntax planning phase and an execution phase. The function of GENIE&apos;s planner is quite different from that of other generators. Typically, generator planners decide &amp;quot;what to say&amp;quot;, constructing some sort of internal representation that is then processed by a realization component. Typical planners will be concerned with chunking into sentences, topic selection and word choice (see, e.g., Appelt(1985), Danlos (1984), Hovy(1985), Kukich (1983), McKeown (1985), McDonald (1984)), and Mann (1983)). In the case of JETS, however, since we are in the domain of transfer-based MT, all of these &amp;quot;high level&amp;quot; considerations are decided by the analysis and transfer components. In GENIE&apos;s case, the planner must, on the basis of a given CS, deal with a myriad of low-level syntactic conditions and their interactions (most of which have not been discussed or even recognized in the generation literature). Internal to GENIE, this means deciding which of the rules in the deterministic execution grammar should be applied. For instance, CSs with seem have a disjunctive grammatical condition: they must </context>
</contexts>
<marker>Mann, 1983</marker>
<rawString>Mann, W. 1983. &amp;quot;An Overview of the Penman Text Generation System,&amp;quot; Proceedings of the National Conference on Artificial Intelligence, pp. 261-265.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Maruyama</author>
<author>H Watanabe</author>
<author>S Ogino</author>
</authors>
<title>An Interactive Japanese Parser for Machine Translation,&amp;quot;</title>
<date>1989</date>
<booktitle>Proceedings of COLING90,</booktitle>
<location>Helsinki,</location>
<note>to appear.</note>
<marker>Maruyama, Watanabe, Ogino, 1989</marker>
<rawString>Maruyama, H., H. Watanabe, and S. Ogino. 1989. &amp;quot;An Interactive Japanese Parser for Machine Translation,&amp;quot; Proceedings of COLING90, Helsinki, to appear.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D McDonald</author>
</authors>
<title>Description Direct Control: Its Implication for Natural Language Generation,&amp;quot;</title>
<date>1984</date>
<booktitle>Computational Linguistics, Pergamon Press,</booktitle>
<pages>403--424</pages>
<editor>in N. J. Cercone (ed.)</editor>
<location>Oxford,</location>
<contexts>
<context position="16667" citStr="McDonald (1984)" startWordPosition="2616" endWordPosition="2618"> number of superficial forms, e.g., (2) and (3) above. This control problem has been addressed by splitting generation into two phases: a syntax planning phase and an execution phase. The function of GENIE&apos;s planner is quite different from that of other generators. Typically, generator planners decide &amp;quot;what to say&amp;quot;, constructing some sort of internal representation that is then processed by a realization component. Typical planners will be concerned with chunking into sentences, topic selection and word choice (see, e.g., Appelt(1985), Danlos (1984), Hovy(1985), Kukich (1983), McKeown (1985), McDonald (1984)), and Mann (1983)). In the case of JETS, however, since we are in the domain of transfer-based MT, all of these &amp;quot;high level&amp;quot; considerations are decided by the analysis and transfer components. In GENIE&apos;s case, the planner must, on the basis of a given CS, deal with a myriad of low-level syntactic conditions and their interactions (most of which have not been discussed or even recognized in the generation literature). Internal to GENIE, this means deciding which of the rules in the deterministic execution grammar should be applied. For instance, CSs with seem have a disjunctive grammatical con</context>
</contexts>
<marker>McDonald, 1984</marker>
<rawString>McDonald, D. 1984. &amp;quot;Description Direct Control: Its Implication for Natural Language Generation,&amp;quot; in N. J. Cercone (ed.) Computational Linguistics, Pergamon Press, Oxford, pp. 403-424.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K McKeown</author>
</authors>
<title>Text Generation.</title>
<date>1985</date>
<publisher>Cambridge University Press,</publisher>
<location>Cambridge.</location>
<contexts>
<context position="16650" citStr="McKeown (1985)" startWordPosition="2614" endWordPosition="2615"> generation of a number of superficial forms, e.g., (2) and (3) above. This control problem has been addressed by splitting generation into two phases: a syntax planning phase and an execution phase. The function of GENIE&apos;s planner is quite different from that of other generators. Typically, generator planners decide &amp;quot;what to say&amp;quot;, constructing some sort of internal representation that is then processed by a realization component. Typical planners will be concerned with chunking into sentences, topic selection and word choice (see, e.g., Appelt(1985), Danlos (1984), Hovy(1985), Kukich (1983), McKeown (1985), McDonald (1984)), and Mann (1983)). In the case of JETS, however, since we are in the domain of transfer-based MT, all of these &amp;quot;high level&amp;quot; considerations are decided by the analysis and transfer components. In GENIE&apos;s case, the planner must, on the basis of a given CS, deal with a myriad of low-level syntactic conditions and their interactions (most of which have not been discussed or even recognized in the generation literature). Internal to GENIE, this means deciding which of the rules in the deterministic execution grammar should be applied. For instance, CSs with seem have a disjunctiv</context>
</contexts>
<marker>McKeown, 1985</marker>
<rawString>McKeown, K. 1985. Text Generation. Cambridge University Press, Cambridge.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Nirenburg</author>
</authors>
<title>A Distributed Generation System for Machine Translation,&amp;quot;</title>
<date>1987</date>
<tech>Technical Report,</tech>
<institution>Center for Machine Translation, Carnegie Mellon University.</institution>
<contexts>
<context position="2149" citStr="Nirenburg (1987)" startWordPosition="303" endWordPosition="304">rch Tokyo Research Laboratory. To put our work in perspective, we first explain the motivation for basing JETS on relational grammar (RG) and then sketch the processing flow in translation. With this background, we (i) describe and illustrate certain aspects of the rule-writing language, GEAR, in which the GENIE English generator has been written; (ii) comment on key aspects of the generator shell, GENSHELL, in which GENIE has been developed; and (iii) discuss the design and functioning of the GENIE English generator. With few exceptions such as the work being done at CMU (cf. KBMT-89 (1989), Nirenburg (1987), and Nirenburg, et. al. (1988)), in the SEMSYN project at the University of Stuttgart (Rosner (1986)), and the joint work between the ISI Penman project and the University of Saarbrticken (Bateman, et. al. (1989)), generation within the area of machine translation has received very little attention. Typically, MT systems have no independently functioning, linguistically justified generation grammar. In the case of transfer systems, much of the target language grammar is typically built into the transfer component, resulting in a non-modular, rigid and linguistically inadequate system. It is t</context>
</contexts>
<marker>Nirenburg, 1987</marker>
<rawString>Nirenburg, S. 1987. &amp;quot;A Distributed Generation System for Machine Translation,&amp;quot; Technical Report, Center for Machine Translation, Carnegie Mellon University.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Nirenburg</author>
<author>R McCardell</author>
<author>E Nyberg</author>
<author>P Werner</author>
<author>S Huffman</author>
<author>E Kenschaft</author>
<author>I Nirenburg</author>
</authors>
<date>1988</date>
<tech>Diogenes-88,&amp;quot; Technical Report,</tech>
<institution>Center for Machine Translation, Carnegie Mellon University.</institution>
<marker>Nirenburg, McCardell, Nyberg, Werner, Huffman, Kenschaft, Nirenburg, 1988</marker>
<rawString>Nirenburg, S., R. McCardell, E. Nyberg, P. Werner, S. Huffman, E. Kenschaft, and I. Nirenburg. 1988. &amp;quot;Diogenes-88,&amp;quot; Technical Report, Center for Machine Translation, Carnegie Mellon University.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P M Postal</author>
</authors>
<title>On Raising.</title>
<date>1974</date>
<publisher>MIT Press,</publisher>
<location>Cambridge.</location>
<contexts>
<context position="22291" citStr="Postal (1974)" startWordPosition="3545" endWordPosition="3546"> insuring the generation of only grammatical sentences. 179 Execution rules are turned on (or off) either by syntax planning rules or by lexical entries. To illustrate the use of lexical rule-switches, consider the following example from JETS involving verbs of prevention: 4. kanojo wa kare ga iku no o habanda she top he pp go nm pp prevent 5. She prevented him from going. , On the Japanese side, the postposition ga marks the subject of the embedded clause kare ga iku, which has been nominalized with the dummy noun no, which carries the direct object marker o. Following the arguments given in Postal (1974), we assume that prevent is a so-called B-raising trigger (B-raising is the controversial rule which relates sentences such as He believes that she knows (not raised) and He believes her to know, in which her is raised up as direct object of believe). The CS for (5) is as shown to the right in Figure 6 and the CS of the Japanese sentence (4) is shown to the left:5 Figure 6. Canonical Structures for (4) and (5) GENIE&apos;s rule of B-raising, given in Figure 7, maps the English CS into a superficial RS, as shown in Figure 8. As shown in Figure 6, the English and the Japanese CSs are isomorphic, i.e.</context>
</contexts>
<marker>Postal, 1974</marker>
<rawString>Postal, P. M. 1974. On Raising. MIT Press, Cambridge.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Wisner</author>
</authors>
<title>When Mariko Talks to Siegfried -Experiences from a Japanese/German Machine Translation Project,&amp;quot;</title>
<date>1986</date>
<booktitle>Proceedings of COLING-86,</booktitle>
<location>Bonn.</location>
<marker>Wisner, 1986</marker>
<rawString>Wisner, D. 1986. &amp;quot;When Mariko Talks to Siegfried -Experiences from a Japanese/German Machine Translation Project,&amp;quot; Proceedings of COLING-86, Bonn.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Peter A Schindler</author>
</authors>
<title>General: An Object-Oriented System Shell for Relational Grammar-Based Natural Language Processing&amp;quot;,</title>
<date>1988</date>
<tech>master&apos;s thesis,</tech>
<institution>Department of Electrical Engineering and Computer Science, MIT.</institution>
<contexts>
<context position="12094" citStr="Schindler (1988)" startWordPosition="1902" endWordPosition="1903">sing for intransitive verbs (DEF-RULE A-Raising OF Intransitive-verb % % If the A-raising rule switch is turned on (IF (A-raise is &apos;yes) % then assign my subject as my complement THEN (ASSIGN 1 6) % °AD and assign my complement&apos;s subject as my subject (ASSIGN 6:1 1) %% and on my complement call the rule % % which makes infinitives (ON 6 (CALL Make-Infinitive)))) Figure 4. GENIE&apos;s A-Raising rule Creation, copying and deletion of nodes are also specifiable but space limitations preclude discussion. 4- The GENSHELL generator shell Building on our experience with an earlier prototype developed by Schindler (1988), we have developed an NL-independent generator shell, GENSHELL, to facilitate the development of RG generators. For any given generator, grammar developers need only specify the designated grammatical relations, parts of speech, a part-of-speech hierarchy, dictionaries and grammars. GENSHELL takes this information and constructs a runtime generator. One of the distinctive aspects of GENSHELL, due to Schindler (1988), is the concept of categorydriven processing. In category-driven processing, parts of speech are represented as categories in a category hierarchy (POSH) and nodes in RSs are repr</context>
</contexts>
<marker>Schindler, 1988</marker>
<rawString>Schindler, Peter A. 1988. &amp;quot;General: An Object-Oriented System Shell for Relational Grammar-Based Natural Language Processing&amp;quot;, master&apos;s thesis, Department of Electrical Engineering and Computer Science, MIT.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S M Shieber</author>
<author>H Uszkoreit</author>
<author>F C N Pereira</author>
<author>J J Robinson</author>
<author>M Tyson</author>
</authors>
<title>The Formalism and Implementation of PATR-II,&amp;quot;</title>
<date>1983</date>
<booktitle>In Research on Interactive Acquisition and Use of Knowledge, Al Center, SRI International,</booktitle>
<location>Menlo Park, CA.</location>
<marker>Shieber, Uszkoreit, Pereira, Robinson, Tyson, 1983</marker>
<rawString>Shieber, S. M., H. Uszkoreit, F.C.N. Pereira, J.J. Robinson and M. Tyson. 1983. &amp;quot;The Formalism and Implementation of PATR-II,&amp;quot; In Research on Interactive Acquisition and Use of Knowledge, Al Center, SRI International, Menlo Park, CA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Wilensky</author>
</authors>
<title>A Knowledge-Based Approach to Natural Language Processing: A Progress Report,&amp;quot;</title>
<date>1981</date>
<booktitle>Proceedings Seventh International Joint Conference on Artificial Intelligence,</booktitle>
<location>Vancouver.</location>
<contexts>
<context position="17605" citStr="Wilensky (1981)" startWordPosition="2770" endWordPosition="2771">eractions (most of which have not been discussed or even recognized in the generation literature). Internal to GENIE, this means deciding which of the rules in the deterministic execution grammar should be applied. For instance, CSs with seem have a disjunctive grammatical condition: they must either be raised, yielding the pattern NP seem to VP (as in (2) above) , or extraposed, yielding the pattern It seems that S (as in (3) above). Failure to apply either A-raising or so-called It-Extraposition 3 Earlier work using a lexical hierarchy and inheritance in natural language processing includes Wilensky (1981), Jacobs (1985) and Zernik and Dyer (1987). These works make heavy use of phrasal patterns (so-called pattern-concept pairs) and so the conception of grammar and lexicon and hence the notion of what is inherited in these works differ greatly from ours, which is part of the generative-linguistic tradition. 178 would result in the ungrammatical pattern *That S seems (in the case of Figure 1 above: *That they went to Tokyo seems). The decision to apply A-raising in the above example is stylistic (&amp;quot;make the topic the main clause subject, if possible&amp;quot;), but the disjunctive requirement (&amp;quot;apply eithe</context>
</contexts>
<marker>Wilensky, 1981</marker>
<rawString>Wilensky, R. 1981. &amp;quot;A Knowledge-Based Approach to Natural Language Processing: A Progress Report,&amp;quot; Proceedings Seventh International Joint Conference on Artificial Intelligence, Vancouver.</rawString>
</citation>
<citation valid="true">
<authors>
<author>U Zernik</author>
<author>M G Dyer</author>
</authors>
<title>The Self-Extending Phrasal Lexicon,&amp;quot;</title>
<date>1987</date>
<journal>Computational Linguistics,</journal>
<volume>13</volume>
<pages>308--325</pages>
<contexts>
<context position="17647" citStr="Zernik and Dyer (1987)" startWordPosition="2775" endWordPosition="2778">een discussed or even recognized in the generation literature). Internal to GENIE, this means deciding which of the rules in the deterministic execution grammar should be applied. For instance, CSs with seem have a disjunctive grammatical condition: they must either be raised, yielding the pattern NP seem to VP (as in (2) above) , or extraposed, yielding the pattern It seems that S (as in (3) above). Failure to apply either A-raising or so-called It-Extraposition 3 Earlier work using a lexical hierarchy and inheritance in natural language processing includes Wilensky (1981), Jacobs (1985) and Zernik and Dyer (1987). These works make heavy use of phrasal patterns (so-called pattern-concept pairs) and so the conception of grammar and lexicon and hence the notion of what is inherited in these works differ greatly from ours, which is part of the generative-linguistic tradition. 178 would result in the ungrammatical pattern *That S seems (in the case of Figure 1 above: *That they went to Tokyo seems). The decision to apply A-raising in the above example is stylistic (&amp;quot;make the topic the main clause subject, if possible&amp;quot;), but the disjunctive requirement (&amp;quot;apply either A-raising or It-Extraposition&amp;quot;) is gramm</context>
</contexts>
<marker>Zernik, Dyer, 1987</marker>
<rawString>Zernik, U. and M. G. Dyer. 1987. &amp;quot;The Self-Extending Phrasal Lexicon,&amp;quot; Computational Linguistics, vol. 13, No. 3-4, pp. 308-325.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>