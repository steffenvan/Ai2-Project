<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000001">
<title confidence="0.9969815">
Anatomy of Annotation Schemes:
Mapping to GrAF
</title>
<author confidence="0.998165">
Nancy Ide
</author>
<affiliation confidence="0.865276">
Department of Computer Science
Vassar College
</affiliation>
<address confidence="0.65622">
Poughkeepsie, NY, USA
</address>
<email confidence="0.998416">
ide@cs.vassar.edu
</email>
<author confidence="0.995472">
Harry Bunt
</author>
<affiliation confidence="0.9904895">
Tilburg Center for Creative Computing
Tilburg University, The Netherlands
</affiliation>
<email confidence="0.994462">
harry.bunt@uvt.nl
</email>
<sectionHeader confidence="0.993824" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.9995485">
In this paper, we apply the annota-
tion scheme design methodology defined
in (Bunt, 2010) and demonstrate its use
for generating a mapping from an exist-
ing annotation scheme to a representa-
tion in GrAF format. The most impor-
tant features of this methodology are (1)
the distinction of the abstract and con-
crete syntax of an annotation language;
(2) the specification of a formal seman-
tics for the abstract syntax; and (3) the
formalization of the relation between ab-
stract and concrete syntax, which guar-
antees that any concrete syntax inherits
the semantics of the abstract syntax, and
thus guarantees meaning-preserving map-
pings between representation formats. By
way of illustration, we apply this map-
ping strategy to annotations from ISO-
TimeML, PropBank, and FrameNet.
</bodyText>
<sectionHeader confidence="0.998983" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999838172413793">
The Linguistic Annotation Framework (LAF, (Ide
and Romary, 2004); ISO 24612, 2009) defines
an abstract model for annotations together with
an XML serialization of the model, the Graph
Annotation Format (GrAF, (Ide and Suderman,
2007)). GrAF is intended to be a pivot format ca-
pable of representing diverse annotation types of
varying complexity, guaranteeing syntactic con-
sistency among the different annotations. GrAF
does not address the issue of semantic consis-
tency among annotation labels and categories; this
is assumed to be handled by other standardiza-
tion efforts such as ISOCat (Kemps-Snijders et al.,
2009). ISOCat provides a set of data categories at
various levels of granularity, each accompanied by
a precise definition of its linguistic meaning. La-
bels applied in a user-defined annotation scheme
should be mapped to these categories in order to
ensure semantic consistency among annotations of
the same phenomenon.
While the mapping of annotation labels to a
common definition, coupled with the syntactic
consistency guaranteed by GrAF, takes a giant
step towards the harmonization of linguistic an-
notations, this is still not enough to ensure that
these annotations are sufficiently compatible to en-
able merging, comparison, and manipulation with
common software. For this, the conceptual struc-
ture of the annotation, in terms of the structural
relations among the defined annotation categories,
must also be consistent. It is therefore necessary to
consider this aspect of annotation scheme design
in order to achieve a comprehensive treatment of
the requirements for full harmonization of linguis-
tic annotations.
In (Bunt, 2010), a design methodology for se-
mantic annotation schemes is proposed, devel-
oped during the ISO project “Semantic annota-
tion framework, Part 1: Time and events” (“Se-
mAF/Time”, for short), which is currently near-
ing completion (see ISO DIS 24617-1, 2009). The
methodology includes a syntax that specifies both
a class of representation structures and a class
of more abstract annotation structures. These
two components of the language specification are
called its concrete and abstract syntax, respec-
tively. A distinguishing feature of the proposed
methodology is that the semantics is defined for
the structures of the abstract syntax, rather than
for the expressions that represent these structures.
In this paper, we generalize the design method-
ology defined in (Bunt, 2010) and demonstrate
its use for generating a mapping from an ex-
isting annotation scheme to a representation in
GrAF format. By way of illustration, we apply
the mapping strategy to annotations from ISO-
TimeML (ISO, 2009), PropBank (Palmer et al.,
2005), and FrameNet (Baker et al., 1998).
</bodyText>
<page confidence="0.967585">
247
</page>
<note confidence="0.9705145">
Proceedings of the Fourth Linguistic Annotation Workshop, ACL 2010, pages 247–255,
Uppsala, Sweden, 15-16 July 2010. c�2010 Association for Computational Linguistics
</note>
<sectionHeader confidence="0.968322" genericHeader="introduction">
2 Background
</sectionHeader>
<bodyText confidence="0.999907142857143">
The process of corpus annotation may consist of
attaching simple labels to textual elements, such
as part of speech and syntactic designations and
named entity tags. For more complex types of
annotation, annotations include a variety of ad-
ditional information about linguistic features and
relations. This is especially true for the kinds
of semantic annotation that have recently begun
to be undertaken in earnest, including semantic
role labeling (e.g., FrameNet and PropBank) and
time and event annotation (e.g., TimeML). How-
ever, these annotation schemes are not always de-
signed based on formal principles, and as a result,
comparing or merging information–even from two
schemes annotating the same phenomenon–can be
difficult or impossible without substantial human
effort.
A major source of difficulties in interpreting an-
notation scheme content is that information in the
annotation is implicit rather than explicit, making
(especially) structural relations among parts of the
linguistic information ambiguous. This often re-
sults from the use of an impoverished representa-
tion scheme, which provides only minimal mech-
anisms for bracketing and association. Consider,
for example, the two annotation fragments below,
expressed with parenthetic bracketing, taken from
a computational lexicon:
</bodyText>
<listItem confidence="0.9919145">
(1) (SUBC ((NP-TO-INF-LOC) (NP-PP)))
(2) (FEATURES ((NHUMAN) (COUNTABLE)))
</listItem>
<bodyText confidence="0.9996612">
In (1), the bracketed information is a list of alter-
natives, whereas in (2), it is a set of properties, but
there is no way to automatically distinguish the
two in order to process them differently. Another
example comes from PropBank:
</bodyText>
<equation confidence="0.796834">
wsj/00/wsj_0003.mrg 13 6 gold have.03
vn--a 0:2-ARG0 6:0-rel 7:1-ARG1
10:1-ARGM-ADV
</equation>
<bodyText confidence="0.9993469">
Because of the “flat” representation1, it is im-
possible to automatically determine if the mor-
phosyntactic descriptor “vn–a” is associated with
the element annotated as “rel”, vs. the “gold”
descriptor that is (assumedly) associated with the
entire proposition. In both of these examples,
linguistically-informed humans have little diffi-
culty determining the structure because of the
knowledge they bring to the interpretation. This
knowledge is then embedded in the processing
</bodyText>
<footnote confidence="0.9921205">
1In PropBank annotation, this information appears on a
single line.
</footnote>
<bodyText confidence="0.9989005">
software so that the data are processed properly;
however, because it is not a part of the represen-
tation itself, it is not available to others who may
develop software for other kinds of processing.
To avoid these problems, annotation scheme de-
sign in ISO projects is split into two phases: the
specification of (1) an abstract model consisting
of annotation categories and structures and (2)
specification of (possibly multiple) representation
structures. An abstract model of annotation struc-
tures is typically implemented via development of
a “metamodel”, i.e. a listing of the categories
of entities and relations to be considered, often
visualized by a UML-like diagram–i.e., a graph.
Schemes described via this method are trivially
mappable to GrAF, ensuring that syntactic con-
sistency among the different schemes, whatever
their original representation structures may be, is
achievable. It also ensures that these schemes are
trivially mappable to different representation for-
mats that are used in various software systems,
e.g., GATE, UIMA, NLTK, GraphViz, etc.
</bodyText>
<subsectionHeader confidence="0.51566">
3 Anatomy of an annotation scheme
</subsectionHeader>
<bodyText confidence="0.999911833333333">
As specified in (Bunt, 2010), an annotation
scheme consists of a syntax that specifies a class of
more abstract annotation structures (the abstract
syntax) and a class of representation structures (the
concrete syntax), plus a semantics associated with
the abstract syntax.
</bodyText>
<subsectionHeader confidence="0.999779">
3.1 Abstract syntax
</subsectionHeader>
<bodyText confidence="0.997014647058824">
The abstract syntax of an annotation scheme de-
fines the set-theoretical structures which constitute
the information that may be contained in annota-
tions. It consists of (a) a specification of the el-
ements from which these structures are built up,
called a conceptual inventory; and (b) annota-
tion construction rules, which describe the possi-
ble combinations of these elements into annota-
tion structures. The semantics of the annotation
scheme components is defined for the annotation
structures of the abstract syntax; Bunt (2010) pro-
vides a formal specification of the semantics of
ISO-TimeML in terms of Discourse Representa-
tion Structures (Kamp and Reyle, 1993), and de-
fines the class of concrete representations of the
structures defined by the abstract syntax.
For example, a fragment of the ISO-TimeML2
</bodyText>
<footnote confidence="0.7322205">
2All references to ISO-TimeML are based on the state
of the project as documented in ISO 264617-1:2009(E) from
</footnote>
<page confidence="0.993394">
248
</page>
<bodyText confidence="0.701726">
conceptual inventory includes:3
</bodyText>
<listItem confidence="0.953074166666667">
• finite sets of elements called event types,
tenses, aspects, signatures, cardinalities, and
veracities.
• finite sets of elements called temporal rela-
tions, duration relations, event subordination
relations, aspectual relations, etc.
</listItem>
<bodyText confidence="0.999835666666667">
The annotation construction rules for ISO-
TimeML specify how to construct two types
of annotation structures: entity structures and
link structures. One type of entity structure,
called an event structure, is defined as a 6-tuple
(e, t, a, s, k, v) where e is a member of the set of
event types; t and a are a tense and an aspect,
respectively; s is a signature (a set-theoretical
type that is used for handling quantification over
events); k is a cardinality, used for expressing in-
formation about the size of a set of events in-
volved in a quantified relation; and v is a verac-
ity, which is used to represent whether an event is
claimed to have occurred, or claimed not to have
occurred (for dealing with positive and negative
polarity, respectively), or to have yet another sta-
tus such as ‘possibly’ or ‘requested’, for handling
such cases as Please come back later today. A
time-amount structure is a pair (n, u) or a triple
(R, n, u), where n is a real number, R a numerical
relation, and u a temporal unit. The rules also de-
fine a link structure called an event duration struc-
ture as a triple (event structure, time-amount
structure, duration relation).
</bodyText>
<subsectionHeader confidence="0.999807">
3.2 Concrete syntax
</subsectionHeader>
<bodyText confidence="0.9878778">
The concrete syntax provides the representation of
annotation structures defined in the abstract syn-
tax. A concrete syntax is said to be ideal for
a given abstract syntax if there is a one-to-one
correspondence between the structures defined by
the abstract syntax and those defined by the con-
crete syntax. An ideal concrete syntax RF1 de-
fines a function F1 from annotation structures to
RFi-representations, and an inverse function F�1
i
from RF1-representations to annotation structures.
In other words, the abstract and the concrete syn-
tax are isomorphic. Since this holds for any ideal
concrete syntax, it follows that any two ideal rep-
resentation formats are isomorphic. Given two
</bodyText>
<footnote confidence="0.819955666666667">
September 2009.
3See (Bunt, 2010) for the full specification for ISO-
TimeML.
</footnote>
<equation confidence="0.4594701">
&lt;isoTimeML-ICS1rep xml:id=&amp;quot;a1&amp;quot;&gt;
&lt;EVENT xml:id=&amp;quot;e1&amp;quot; anchor=&amp;quot;t2&amp;quot;
type =&amp;quot;FAST&amp;quot; tense=PAST
signature=&amp;quot;INDIVIDUAL&amp;quot;/&gt;
&lt;TIME-AMOUNT xml:id=&amp;quot;ta1&amp;quot;
anchor=&amp;quot;t4&amp;quot; numeral=&amp;quot;2&amp;quot; unit=&amp;quot;day&amp;quot;/&gt;
&lt;MLINK event=&amp;quot;e1&amp;quot;
duration=&amp;quot;ta1&amp;quot; relType=&amp;quot;FOR&amp;quot;/&gt;
&lt;/isoTimeML-ICS1rep&gt;
Tokens: [It1][fastedt2][fort3][twot4][dayst5].
</equation>
<figureCaption confidence="0.996415">
Figure 1: ISO-TimeML ICS1 annotation
</figureCaption>
<bodyText confidence="0.999471">
ideal representation formats RFi and RFj we can
define a homomorphic mapping Cij from RFi-
representations to RFj-representations by
</bodyText>
<equation confidence="0.8658305">
(1) Cij =D Fj o F−1
i , i.e. Cij(r) = Fj(F−1
i (r))
for any RFi-representation r
</equation>
<bodyText confidence="0.866158105263158">
and conversely, we can define a homomorphic
mapping Cji from RFj-representations to RFi-
representations by
(2) Cji =D Fi o F−1
j , i.e. Cji(r) = Fi(F −1
j (r))
for any RFj-representation r
These two mappings constitute conversions from
one format to the other, that is, they constitute
one-to-one meaning-preserving mappings: if µ(r)
denotes the meaning of representation r, then
µ(Cij(r)) = µ(r) for any Fi-representation r,
and conversely, µ(Cji(r&apos;)) = µ(r&apos;) for any Fj-
representation r&apos;.
Figure 1 shows a rendering of the sentence I
fasted for two days using a concrete XML-based
syntax for the annotation structures defined by
the ISO-TimeML abstract syntax, called the ICS-1
format, as described in (Bunt, 2010).
</bodyText>
<sectionHeader confidence="0.981594" genericHeader="method">
4 GrAF overview
</sectionHeader>
<bodyText confidence="0.999656083333333">
GrAF is an exchange or pivot format intended to
simplify the processes of merging of annotations
from different sources and using annotations with
different software systems. The underlying data
model is a directed acyclic graph, which is iso-
morphic to UML-like structures that may be used
to define an abstract syntax for a given annotation
scheme, as described in section 3.
GrAF is an XML serialization of a formal graph
consisting of nodes and edges, either or both
of which are decorated with feature structures.
Nodes may have edges to one or more other nodes
</bodyText>
<page confidence="0.989859">
249
</page>
<figure confidence="0.9989434">
&lt;node xml:id=&amp;quot;fn-n1&amp;quot;/&gt;
&lt;a label=&amp;quot;FE&amp;quot; ref=&amp;quot;fn-n1&amp;quot; as=&amp;quot;FrameNet&amp;quot;&gt;
&lt;fs&gt;
&lt;f name=&amp;quot;FE&amp;quot; value=&amp;quot;Recipient&amp;quot;/&gt;
&lt;f name=&amp;quot;GF&amp;quot; value=&amp;quot;Obj&amp;quot;/&gt;
&lt;f name=&amp;quot;PT&amp;quot; value=&amp;quot;NP&amp;quot;/&gt;
&lt;/fs&gt;
&lt;/a&gt;
&lt;edge id=&amp;quot;e1&amp;quot; from=&amp;quot;fn-n1&amp;quot;
to=&amp;quot;fntok-n5&amp;quot;/&gt;
</figure>
<figureCaption confidence="0.9673755">
Figure 2: FrameNet frame element annotation in
GrAF
</figureCaption>
<bodyText confidence="0.999981">
in the graph, or they may be linked directly to re-
gions within the primary data that is being anno-
tated. The feature structure attached to a node or
edge provides the content of the annotation–that
is, the associated linguistic information expressed
as a set of attribute-value pairs. The feature struc-
tures in GrAF conform to formal feature struc-
ture specifications and may be subjected to op-
erations defined over feature structures, including
subsumption and unification. As a result, any rep-
resentation of an annotation in GrAF must consist
of a feature structure that provides all of the rele-
vant linguistic information.
Figure 2 shows a fragment of a FrameNet frame
element annotation, serialized in GrAF XML. It
consists of a graph node with id “fn-n1” and an an-
notation with the label “FE”4. The ref attribute on
the &lt;a&gt; (annotation) element associates the anno-
tation with node “fn-n1”. The annotation contains
a feature structure with three features: FE (Frame
element), GF (Grammatical Function), and PT
(Phrase Type). An edge connects the node to an-
other node in the graph with the id “fntok-n5” (not
shown here), which is associated with annotation
information for a token that in turn references the
span of text in primary data being annotated.
</bodyText>
<sectionHeader confidence="0.957825" genericHeader="method">
5 Mapping to GrAF
</sectionHeader>
<bodyText confidence="0.889253857142857">
LAF specifies that an annotation representation R
is valid if it is mappable to a meaning-preserving
representation in GrAF, and that its GrAF repre-
sentation is in turn mappable to R. In terms of
the definitions in section 3, a LAF-valid repre-
sentation R is one where µ(R) = µ(CRG(R))
and µ(G) = µ(CGR(G)), where G is a GrAF
4Note that the value of the label attribute is, for practical
purposes, a convenience; it is used primarily when generating
alternative representation formats.
representation. We can also define a valid anno-
tation scheme in terms of conversion transitivity
through GrAF; that is, for two arbitrary annotation
schemes R and S, the following holds:
</bodyText>
<equation confidence="0.997981">
µ(R) = µ(CRG(R)) = µ(CGS(S))
</equation>
<bodyText confidence="0.999550375">
Our goal here is to provide a formal speci-
fication for the mapping function CRG, assum-
ing the existence of a formal specification of
an annotation scheme as outlined in section 3.
To accomplish this, it is necessary to identify
the two components of an abstract syntax for
annotation scheme R: the conceptual inventory
and the annotation construction rules that indi-
cate how elements of the conceptual inventory are
combined into annotation structures–specifically,
entity structures, which describe annotation ob-
jects, and link structures, which describe relations
among entity structures. Once these are available,
a general procedure for establishing a GrAF repre-
sentation of the annotation structures is as follows:
For each type of entity structure e:
</bodyText>
<listItem confidence="0.878766666666667">
• introduce a label Le, where Le is the entity
structure type;
• define a set of features f corresponding one-
to-one with the components of the n-tuple
of elements from the conceptual inventory
defining entity structure e.
</listItem>
<bodyText confidence="0.992995">
A link structure is a triple (E1, E2, r) consisting
of two sets of entity structures and a relational el-
ement defining a relation between them. For each
type of link structure:
</bodyText>
<listItem confidence="0.921414">
1. introduce a label Lr, where Lr is the type
name of relation r.
2. If r is associated with a set of elements from
the conceptual inventory, then features are
created as in (2), above.
</listItem>
<bodyText confidence="0.9522574">
In GrAF, an annotation A consists of a label L
and a feature structure containing a set of features
f. Annotations may be associated with nodes or
edges in the graph. Typically, entity structures are
associated with nodes that have links into a region
of primary data or one or more edges connecting it
to other nodes in the graph. Link structures are as-
sociated with edges, identifying a relation among
two or more entity structures. In the simplest case,
a link structure consists of a relation between two
</bodyText>
<page confidence="0.971643">
250
</page>
<bodyText confidence="0.999931">
entity structures, each of a given type; in the cor-
responding GrAF representation, the link structure
label is associated with an edge d that connects
nodes n1, n2, each of which is decorated with an-
notations labeled L1, L2, respectively.
For example, for the ISO-TimeML abstract
syntax fragment provided in section 3, we de-
fine the labels EVENT and INSTANT cor-
responding to the two entity structures with
names event structure and time amount struc-
ture, and a link structure TIME-ANCHORING.
Because an event structure is defined as a 6-
tuple (e, t, a, s, k, v), we define six features event,
tense, aspect signature, cardinality, and verac-
ity.5 A time-amount structure may be a pair
(n, u) or a triple (R, n, u), where n is a real
number, R a numerical relation, and u a tem-
poral unit, so we introduce features numeral,
unit, and relType. Finally, the time anchoring
link structure is a triple (event structure, time-
amountstructure, duration relation). In this
case, the first two elements of the triple are the
entity structures being linked; these will be repre-
sented as nodes in the GrAF implementation. The
label and features associated with each entity and
link structure provide the template for an annota-
tion corresponding to that structure with appropri-
ate values filled in, which may then be associated
with a node or edge in the graph.
</bodyText>
<subsectionHeader confidence="0.783577">
5.1 ISO-TimeML example
</subsectionHeader>
<bodyText confidence="0.999952444444445">
The GrAF representation of the ISO-TimeML an-
notation for the sentence I fasted for two days is
shown in Figure 3, based on the abstract syntax
given in section 3.1.
To create an annotation corresponding to an
ISO-TimeML entity structure, a node &lt;node&gt; el-
ement) is created and assigned a unique identi-
fier as the value of the XML attribute xml:id. An
annotation (&lt;a&gt;) element is also created, with a
label attribute whose value is the entity structure
name, and which contains a feature structure pro-
viding the appropriate feature/value pairs for that
entity structure. The annotation is associated with
the node by using the node’s unique identifier as
the value of the ref attribute on the &lt;a&gt; element.
An edge is then created from the node to another
node in the graph (r2) that references the data to be
annotated–in this case, one or more tokens defined
</bodyText>
<footnote confidence="0.855015333333333">
5The latter three attributes have the default values INDI-
VIDUAL, 1, and POSITIVE, respectively, and will be omit-
ted in the examples to follow if they have these values.
</footnote>
<bodyText confidence="0.922116842105263">
over regions of the primary data.
ISO-TimeML link structures define a relation
between two entity structures, and are rendered in
GrAF as a labeled edge between the nodes anno-
tated with the entity structure information. In the
ISO-TimeML example, an annotation with label
MLINK (‘measure link’) is created with a single
feature relType. The from and to attributes on the
&lt;edge&gt; element link the node with the EVENT
entity structure annotation (node tml-n1 in the
example) to the node with the TIME-AMOUNT
annotation (tml-n2). This edge is then associ-
ated with the MLINK annotation (cf. Bunt and
Pustejovsky, 2009; Pustejovsky et al., 2010).
Figure 1 shows the rendering of the ISO-
TimeML abstract syntax in the ICS-1 concrete
syntax. Following Section 3.2, these two realiza-
tions of the abstract syntax for ISO-TimeML are
isomorphic.
</bodyText>
<figure confidence="0.995065212121212">
&lt;node xml:id=&amp;quot;tml-n1&amp;quot;/&gt;
&lt;a label=&amp;quot;EVENT&amp;quot; ref=&amp;quot;tml-n1&amp;quot;
as=&amp;quot;TimeML&amp;quot;&gt;
&lt;fs&gt;
&lt;f name=&amp;quot;event&amp;quot; value=&amp;quot;fast&amp;quot;/&gt;
&lt;f name=&amp;quot;tense&amp;quot; value=&amp;quot;Past&amp;quot;/&gt;
&lt;f name=&amp;quot;signature&amp;quot;
value=&amp;quot;individual&amp;quot;/&gt;
&lt;/fs&gt;
&lt;/a&gt;
&lt;edge xml:id=&amp;quot;tml-e1&amp;quot; from=&amp;quot;tml-n1&amp;quot;
to=&amp;quot;t2&amp;quot;/&gt;
&lt;node xml:id=&amp;quot;tml-n2&amp;quot;/&gt;
&lt;a label=&amp;quot;TIME-AMOUNT&amp;quot; ref=&amp;quot;tml-n2&amp;quot;
as=&amp;quot;TimeML&amp;quot;&gt;
&lt;fs&gt;
&lt;f name=&amp;quot;numeral&amp;quot; value=&amp;quot;2&amp;quot;/&gt;
&lt;f name=&amp;quot;unit&amp;quot; value=&amp;quot;day&amp;quot;/&gt;
&lt;/fs&gt;
&lt;/a&gt;
&lt;edge xml:id=&amp;quot;tml-e2&amp;quot; from=&amp;quot;tml-n2&amp;quot;
to=&amp;quot;t4&amp;quot;/&gt;
&lt;edge xml:id=&amp;quot;tml-e3&amp;quot; from=&amp;quot;tml-n2&amp;quot;
to=&amp;quot;t5&amp;quot;/&gt;
&lt;edge xml:id=&amp;quot;tml-e4&amp;quot; from=&amp;quot;tml-n1&amp;quot;
to=&amp;quot;tml-n2&amp;quot;/&gt;
&lt;a label=&amp;quot;MLINK&amp;quot; ref=&amp;quot;tml-e4&amp;quot;
as=&amp;quot;TimeML&amp;quot;&gt;
&lt;fs&gt;
&lt;f name=&amp;quot;relType&amp;quot; value=&amp;quot;FOR&amp;quot;/&gt;
&lt;/fs&gt;
&lt;/a&gt;
Tokens: [It1][fastedt2][fort3][twot4][dayst5].
</figure>
<figureCaption confidence="0.999597">
Figure 3: ISO-TimeML annotation in GrAF
</figureCaption>
<page confidence="0.990332">
251
</page>
<subsectionHeader confidence="0.98385">
5.2 Reverse engineering the abstract syntax
</subsectionHeader>
<bodyText confidence="0.999982666666667">
The previous two sections show how schemes for
which an abstract syntax is specified can be ren-
dered in GrAF as well as other concrete syn-
tax representations. However, as noted in sec-
tion 2, many annotation formats–especially legacy
formats–were not designed based on an underly-
ing data model. Therefore, in order to achieve a
mapping to GrAF, it is necessary to “reverse en-
gineer” the annotation format to define its abstract
syntax. Because of problems such as those out-
lined in Section 2, this exercise may require some
extrapolation of information that is implicit, or not
specified, in the original annotation format. We
provide two examples below, one for PropBank
and one for FrameNet.
</bodyText>
<subsectionHeader confidence="0.743051">
5.2.1 An abstract syntax for PropBank
</subsectionHeader>
<bodyText confidence="0.969292666666667">
The PropBank format specifies an annotation for
a sentence consisting of several columns, specify-
ing the file path; the sentence number within the
file; the number of the terminal in the sentence
that is the location of the verb; a status indica-
tion; a frameset identifier (frame and sense num-
ber); an inflection field providing person, tense,
aspect, voice, and form of the verb; and one or
more “proplabels” representing an annotation as-
sociated with a particular argument or adjunct of
the proposition. Proplabels are associated with
primary data via reference to the Penn Treebank
(PTB) node in the syntax tree of the sentence.
Based on this we can specify a portion of a
PropBank conceptual Inventory:
</bodyText>
<listItem confidence="0.999598272727273">
• a special proposition type verb, designating
the verb (replaces PropBank “rel”);
• a finite set PROP = {ARGA, ARGM,
ARG0, ARG1, ARG2} of proposition la-
bels;
• a finite set FEAT = {EXT, DIR, LOC,
TMP, REC, PRD, NEG, MOD, ADV,
MNR, CAU, PNC, DIS}, plus the set of
prepositions and “null”, comprising the set of
features;
• a finite set of sets INF =
</listItem>
<construct confidence="0.874518166666667">
{form, tense, aspect, person, voice},
where form = {infinitive, gerund,
participle, finite}, tense = {future,
past, present}, aspect = {perfect,
progressive, both}, person =
{default, 3rd},
</construct>
<listItem confidence="0.552769">
and voice = {active, passive}.
• a finite set FrameSets = {fs1, fs2, ...fsn}
</listItem>
<bodyText confidence="0.97298525">
where each fsi is a frame set defined in Prop-
Bank.
An abstract syntax for PropBank could specify
the following annotation construction rules:
</bodyText>
<listItem confidence="0.9507455">
• a proposition entity structure is a pair (f, A)
where f is a frameset and A is a set of argu-
ment entity structures.6
• an argument entity structure is an argument
a E PROP xFEAT.
• a verb entity structure is a 5-tuple
(f, t, a, p, v) where f E form, t E tense,
a E aspect, p E person, and v E voice.
</listItem>
<bodyText confidence="0.999627576923077">
Based on this, the PropBank annotation in Sec-
tion 2 can be rendered into a concrete syntax; in
this case, in GrAF as shown in Figure 4. Note that
the to attribute on &lt;edge&gt; elements have as val-
ues the reference to PTB nodes from the original
PropBank encoding; in GrAF, these values would
be identifers on the appropriate nodes in a GrAF
representation of PTB. We have also included role
names (e.g., “owner”) in the annotation, which are
not present in the original; this was done for con-
venience and readability, and the values for the
“role” feature could have been given as arg-0, arg-
1, etc. instead.
The original PropBank encoding is close to an
ideal concrete syntax, as it can be generated from
the abstract syntax. However, the round trip back
to the abstract syntax is not possible, because it is
necessary to do some interpretation of associations
among bits of annotation information in order to
construct the abstract syntax and, subsequently,
map the PropBank format to GrAF. Specifically,
in the GrAF encoding the inflection information is
associated with the node referencing the verb, but
this association is not explicit in the original (and
in fact may not be what the annotation scheme de-
signers intended).
</bodyText>
<subsectionHeader confidence="0.915493">
5.2.2 An abstract syntax for FrameNet
</subsectionHeader>
<bodyText confidence="0.988447">
The FrameNet XML format is shown in Fig-
ure 5.7 The structure and content of this encod-
ing is highly oriented toward a presentation view,
</bodyText>
<footnote confidence="0.99878875">
6We do not include the bookkeeping information associ-
ated with a PropBank annotation in the abstract syntax.
7Some detail concerning the html display has been omit-
ted for brevity.
</footnote>
<page confidence="0.994281">
252
</page>
<figure confidence="0.980908213114754">
&lt;node xml:id=&amp;quot;pb-n1&amp;quot;/&gt;
&lt;a label=&amp;quot;Proposition&amp;quot; ref=&amp;quot;pb-n1&amp;quot;
as=&amp;quot;PropBank&amp;quot;&gt;
&lt;fs&gt;
&lt;f name=&amp;quot;file&amp;quot;
value=&amp;quot;wsj/00/wsj_0003.mrg&amp;quot;/&gt;
&lt;f name=&amp;quot;sentenceNo&amp;quot; value=&amp;quot;13&amp;quot;/&gt;
&lt;f name=&amp;quot;verbOffset&amp;quot; value=&amp;quot;6&amp;quot;/&gt;
&lt;f name=&amp;quot;status&amp;quot; value=&amp;quot;gold&amp;quot;/&gt;
&lt;f name=&amp;quot;frameSet&amp;quot;
value=&amp;quot;have.03&amp;quot;/&gt;
&lt;/fs&gt;
&lt;/a&gt;
&lt;node xml:id=&amp;quot;pb-n2&amp;quot;/&gt;
&lt;a label=&amp;quot;VERB&amp;quot; ref=&amp;quot;pb-n2&amp;quot;
as=&amp;quot;PropBank&amp;quot;&gt;
&lt;fs&gt;
&lt;f name=&amp;quot;role&amp;quot; value=&amp;quot;rel&amp;quot;/&gt;
&lt;f name=&amp;quot;form&amp;quot; value=&amp;quot;finite&amp;quot;/&gt;
&lt;f name=&amp;quot;tense&amp;quot; value=&amp;quot;present&amp;quot;/&gt;
&lt;f name=&amp;quot;voice&amp;quot; value=&amp;quot;active&amp;quot;/&gt;
&lt;/fs&gt;
&lt;/a&gt;
&lt;edge xml:id=&amp;quot;pb-e1&amp;quot; from=&amp;quot;pb-n1&amp;quot;
to=&amp;quot;pb-n2&amp;quot;/&gt;
&lt;edge xml:id=&amp;quot;pb-e2&amp;quot; from=&amp;quot;pb-n2&amp;quot;
to=&amp;quot;ptb-6-0&amp;quot;/&gt;
&lt;node xml:id=&amp;quot;pb-n3&amp;quot;/&gt;
&lt;a label=&amp;quot;ARG0&amp;quot; ref=&amp;quot;pb-n3&amp;quot;
as=&amp;quot;PropBank&amp;quot;&gt;
&lt;fs&gt;
&lt;f name=&amp;quot;role&amp;quot; value=&amp;quot;owner&amp;quot;/&gt;
&lt;/fs&gt;
&lt;/a&gt;
&lt;edge xml:id=&amp;quot;pb-e3&amp;quot; from=&amp;quot;pb-n1&amp;quot;
to=&amp;quot;pb-n3&amp;quot;/&gt;
&lt;edge xml:id=&amp;quot;pb-e4&amp;quot; from=&amp;quot;pb-n3&amp;quot;
to=&amp;quot;ptb-0-2&amp;quot;/&gt;
&lt;node xml:id=&amp;quot;pb-n4&amp;quot;/&gt;
&lt;a label=&amp;quot;ARG1&amp;quot; ref=&amp;quot;pb-n4&amp;quot;
as=&amp;quot;PropBank&amp;quot;&gt;
&lt;fs&gt;
&lt;f name=&amp;quot;role&amp;quot; value=&amp;quot;possession&amp;quot;/&gt;
&lt;/fs&gt;
&lt;/a&gt;
&lt;edge xml:id=&amp;quot;e5&amp;quot; from=&amp;quot;pb-n1&amp;quot;
to=&amp;quot;pb-n4&amp;quot;/&gt;
&lt;edge xml:id=&amp;quot;e6&amp;quot; from=&amp;quot;pb-n4&amp;quot;
to=&amp;quot;ptb-7-1&amp;quot;/&gt;
&lt;node xml:id=&amp;quot;pb-n5&amp;quot;/&gt;
&lt;a label=&amp;quot;ARGM&amp;quot; ref=&amp;quot;pb-n5&amp;quot;
as=&amp;quot;PropBank&amp;quot;&gt;
&lt;fs&gt;
&lt;f name=&amp;quot;role&amp;quot; value=&amp;quot;adjunct&amp;quot;/&gt;
&lt;f name=&amp;quot;feature&amp;quot; value=&amp;quot;adverbial&amp;quot;/&gt;
&lt;/fs&gt;
&lt;/a&gt;
&lt;edge xml:id=&amp;quot;e7&amp;quot; from=&amp;quot;pb-n1&amp;quot;
to=&amp;quot;pb-n5&amp;quot;/&gt;
&lt;edge xml:id=&amp;quot;e8&amp;quot; from=&amp;quot;pb-n5&amp;quot;
to=&amp;quot;ptb-10-1&amp;quot;/&gt;
</figure>
<figureCaption confidence="0.999712">
Figure 4: PropBank annotation in GrAF 253
</figureCaption>
<bodyText confidence="0.9993728">
intended to support display of the sentence and
frame elements in a browser.
A partial abstract syntax for FrameNet derived
from this format includes the following conceptual
inventory:
</bodyText>
<listItem confidence="0.997600615384615">
• a Target, designating the frame-evoking lex-
ical unit;
• a finite set FE = {Recipient, Supplier,
Means, ...} of frame element labels;
• a finite set GF = {Obj, Ext, Dep, ...} of
grammatical functions.
• a finite set PT = {NP, PP, ...} of phrase
types.
• a finite set LU = {u1, u2, ...un} where each
ui is a lexical unit.
• a finite set POS = {n, v, a, r} denoting
parts of speech;
• a finite set FrameNames = {f1, f2,...fn}
</listItem>
<bodyText confidence="0.998172">
where each fi is a frame defined in
FrameNet.
An abstract syntax for this partial inventory
could specify the following annotation construc-
tion rules:
</bodyText>
<listItem confidence="0.7024046">
• a frame entity structure is a pair (f, A) where
f is a frame name, u is a lexical unit, and F is
a set of frame element (FE) entity structures.
• an FE entity structure is a triple {f, g, p}, f E
FE,g E GF,p E PT.
</listItem>
<bodyText confidence="0.9999465">
The GrAF rendering of the abstract syntax is
given in Figure 6, which was generated from the
FrameNet abstract syntax using the rules outlined
in section 5. Both the FrameNet XML and the
GrAF rendering provide an ideal concrete syntax
because they are isomorphic8 to the abstract syn-
tax and, by the definition in section 3.2, are con-
versions of one another.
</bodyText>
<sectionHeader confidence="0.99949" genericHeader="conclusions">
6 Conclusion
</sectionHeader>
<bodyText confidence="0.996843916666667">
In this paper we outlined a methodology for an-
notation scheme design and development; demon-
strated how schemes designed using this method-
ology may be easily mapped to GrAF; and demon-
strated how “reverse engineering” an annotation
8Obviously, in the FrameNet XML additional elements
are introduced for display and bookkeeping purposes.
format whose abstract syntax is unspecified can
provide the information required to map that for-
mat to GrAF. This work was undertaken with two
goals in mind: (1) to provide a formal method for
mapping to GrAF; and (2) to demonstrate the ad-
vantages of a methodology for annotation scheme
design that is based on an abstract model, as
adopted in ISO TC37 SC4 projects and formalized
in (Bunt, 2010). The ultimate goal is, of course, to
achieve harmonization of annotation formats, so
that they can be merged, enabling the study of in-
teractions among information at different linguis-
tic levels; compared, in order to both evaluate and
improve automatic annotation accuracy; and to en-
able seamless transition from one software envi-
ronment to another when creating and using lin-
guistic annotations.
</bodyText>
<figure confidence="0.995202787878788">
&lt;annotationSet lexUnitRef=&amp;quot;11673&amp;quot;
luName=&amp;quot;provide.v&amp;quot; frameRef=&amp;quot;1346&amp;quot;
frameName=&amp;quot;Supply&amp;quot;
status=&amp;quot;MANUAL&amp;quot; ID=&amp;quot;2022935&amp;quot;&gt;
&lt;layer rank=&amp;quot;1&amp;quot; name=&amp;quot;Target&amp;quot;&gt;
&lt;label end=&amp;quot;109&amp;quot; start=&amp;quot;103&amp;quot;
name=&amp;quot;Target&amp;quot;/&gt;
&lt;/layer&gt;
&lt;layer rank=&amp;quot;1&amp;quot; name=&amp;quot;FE&amp;quot;&gt;
&lt;label bgColor=&amp;quot;0000FF&amp;quot; ... end=&amp;quot;138&amp;quot;
start=&amp;quot;111&amp;quot; name=&amp;quot;Recipient&amp;quot;/&gt;
&lt;label bgColor=&amp;quot;FF0000&amp;quot;... end=&amp;quot;84&amp;quot;
start=&amp;quot;83&amp;quot; name=&amp;quot;Supplier&amp;quot;/&gt;
&lt;label bgColor=&amp;quot;FF00FF&amp;quot;... end=&amp;quot;79&amp;quot;
start=&amp;quot;0&amp;quot; name=&amp;quot;Means&amp;quot;/&gt;
&lt;/layer&gt;
&lt;layer rank=&amp;quot;1&amp;quot; name=&amp;quot;GF&amp;quot;&gt;
&lt;label end=&amp;quot;138&amp;quot; start=&amp;quot;111&amp;quot;
name=&amp;quot;Obj&amp;quot;/&gt;
&lt;label end=&amp;quot;84&amp;quot; start=&amp;quot;83&amp;quot;
name=&amp;quot;Ext&amp;quot;/&gt;
&lt;label end=&amp;quot;79&amp;quot; start=&amp;quot;0&amp;quot;
name=&amp;quot;Dep&amp;quot;/&gt;
&lt;/layer&gt;
&lt;layer rank=&amp;quot;1&amp;quot; name=&amp;quot;PT&amp;quot;&gt;
&lt;label end=&amp;quot;138&amp;quot; start=&amp;quot;111&amp;quot;
name=&amp;quot;NP&amp;quot;/&gt;
&lt;label end=&amp;quot;84&amp;quot; start=&amp;quot;83&amp;quot;
name=&amp;quot;NP&amp;quot;/&gt;
&lt;label end=&amp;quot;79&amp;quot; start=&amp;quot;0&amp;quot; name=&amp;quot;PP&amp;quot;/&gt;
&lt;/layer&gt;
...
&lt;/annotationSet&gt;
</figure>
<figureCaption confidence="0.998553">
Figure 5: FrameNet XML format
</figureCaption>
<sectionHeader confidence="0.987899" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.829132">
Collin F. Baker, Charles J. Fillmore, and John B. Lowe.
1998. The Berkeley FrameNet project. In Proceed-
</reference>
<figure confidence="0.998528661290322">
&lt;node xml:id=&amp;quot;fn-as1&amp;quot;/&gt;
&lt;a label=&amp;quot;annotationSet&amp;quot; ref=&amp;quot;fn-as1&amp;quot;
as=&amp;quot;FrameNet&amp;quot;&gt;
&lt;fs&gt;
&lt;f name=&amp;quot;lexUnitRef&amp;quot; value=&amp;quot;11673&amp;quot;/&gt;
&lt;f name=&amp;quot;luName&amp;quot; value=&amp;quot;provide.v&amp;quot;/&gt;
&lt;f name=&amp;quot;frameRef&amp;quot; value=&amp;quot;1346&amp;quot;/&gt;
&lt;f name=&amp;quot;frameName&amp;quot; value=&amp;quot;Supply&amp;quot;/&gt;
&lt;f name=&amp;quot;status&amp;quot; value=&amp;quot;MANUAL&amp;quot;/&gt;
&lt;f name=&amp;quot;ID&amp;quot; value=&amp;quot;2022935&amp;quot;/&gt;
&lt;/fs&gt;
&lt;/a&gt;
&lt;node xml:id=&amp;quot;fn-n1&amp;quot;/&gt;
&lt;a label=&amp;quot;Target&amp;quot; ref=&amp;quot;fn-n1&amp;quot;
as=&amp;quot;FrameNet&amp;quot;&gt;
&lt;fs&gt;
&lt;f name=&amp;quot;name&amp;quot; value=&amp;quot;Target&amp;quot;/&gt;
&lt;/fs&gt;
&lt;/a&gt;
&lt;edge xml:id=&amp;quot;e69&amp;quot; from=&amp;quot;fn-as1&amp;quot;
to=&amp;quot;fn-n1&amp;quot;/&gt;
&lt;edge xml:id=&amp;quot;e90&amp;quot; from=&amp;quot;fn-n1&amp;quot;
to=&amp;quot;fn-t1&amp;quot;/&gt;
&lt;node xml:id=&amp;quot;fn-n2&amp;quot;/&gt;
&lt;a label=&amp;quot;FE&amp;quot; ref=&amp;quot;fn-n2&amp;quot;
as=&amp;quot;FrameNet&amp;quot;&gt;
&lt;fs&gt;
&lt;f name=&amp;quot;FE&amp;quot; value=&amp;quot;Recipient&amp;quot;/&gt;
&lt;f name=&amp;quot;GF&amp;quot; value=&amp;quot;Obj&amp;quot;/&gt;
&lt;f name=&amp;quot;PT&amp;quot; value=&amp;quot;NP&amp;quot;/&gt;
&lt;/fs&gt;
&lt;/a&gt;
&lt;edge xml:id=&amp;quot;e67&amp;quot; from=&amp;quot;fn-as1&amp;quot;
to=&amp;quot;fn-n2&amp;quot;/&gt;
&lt;edge xml:id=&amp;quot;e91&amp;quot; from=&amp;quot;fn-n2&amp;quot;
to=&amp;quot;fn-t2&amp;quot;/&gt;
&lt;node xml:id=&amp;quot;fn-n3&amp;quot;/&gt;
&lt;a label=&amp;quot;FE&amp;quot; ref=&amp;quot;fn-n3&amp;quot;
as=&amp;quot;FrameNet&amp;quot;&gt;
&lt;fs&gt;
&lt;f name=&amp;quot;FE&amp;quot; value=&amp;quot;Supplier&amp;quot;/&gt;
&lt;f name=&amp;quot;GF&amp;quot; value=&amp;quot;Ext&amp;quot;/&gt;
&lt;f name=&amp;quot;PT&amp;quot; value=&amp;quot;NP&amp;quot;/&gt;
&lt;/fs&gt;
&lt;/a&gt;
&lt;edge xml:id=&amp;quot;e46&amp;quot; from=&amp;quot;fn-as1&amp;quot;
to=&amp;quot;fn-n3&amp;quot;/&gt;
&lt;edge xml:id=&amp;quot;e92&amp;quot; from=&amp;quot;fn-n3&amp;quot;
to=&amp;quot;fn-t3&amp;quot;/&gt;
&lt;node xml:id=&amp;quot;fn-n4&amp;quot;/&gt;
&lt;a label=&amp;quot;FE&amp;quot; ref=&amp;quot;fn-n4&amp;quot;
as=&amp;quot;FrameNet&amp;quot;&gt;
&lt;fs&gt;
&lt;f name=&amp;quot;FE&amp;quot; value=&amp;quot;Means&amp;quot;/&gt;
&lt;f name=&amp;quot;GF&amp;quot; value=&amp;quot;Dep&amp;quot;/&gt;
&lt;f name=&amp;quot;PT&amp;quot; value=&amp;quot;PP&amp;quot;/&gt;
&lt;/fs&gt;
&lt;/a&gt;
&lt;edge xml:id=&amp;quot;e10&amp;quot; from=&amp;quot;fn-as1&amp;quot;
to=&amp;quot;fn-n4&amp;quot;/&gt;
&lt;edge xml:id=&amp;quot;e93&amp;quot; from=&amp;quot;fn-n4&amp;quot;
to=&amp;quot;fn-t4&amp;quot;/&gt;
</figure>
<figureCaption confidence="0.999028">
Figure 6: FrameNet in GrAF format
</figureCaption>
<page confidence="0.99584">
254
</page>
<reference confidence="0.994974877551021">
ings of the 17th international conference on Compu-
tational linguistics, pages 86–90, Morristown, NJ,
USA. Association for Computational Linguistics.
Harry Bunt and James Pustejovsky. 2010. Annotation
of temporal and event quantification. In Proceed-
ings of the Fifth International Workshop on Interop-
erable Semantic Annotation (ISA-5), pages 15–22,
Hong Kong SAR. City University of Hong Kong.
Harry Bunt. 2010. A methodology for designing
semantic annotation languages exploiting semantic-
syntactic isomorphisms. In Proceedings of the Sec-
ond International Conference on Global Interoper-
ability for Language Resources (ICGL2010), pages
29–46, Hong Kong SAR. City University of Hong
Kong.
Nancy Ide and Laurent Romary. 2004. Interna-
tional standard for a linguistic annotation frame-
work. Journal of Natural Language Engineering,
10(3–4):211–225.
Nancy Ide and Keith Suderman. 2007. GrAF: A graph-
based format for linguistic annotations. In Proceed-
ings of the First Linguistic Annotation Workshop,
pages 1–8, Prague.
ISO. 2009. Language Resource Management - Seman-
tic Annotation Framework (SemAF) - Part 1: Time
and Events. Secretariat KATS, October. ISO In-
ternational Standard 24617-1:2009(E)), 11 October
2009.
H. Kamp and U. Reyle. 1993. From Discourse to
Logic. Kluwer Academic Publishers, Dordrecht.
Marc Kemps-Snijders, Menzo Windhouwer, Peter Wit-
tenburg, and Sue Ellen Wright. 2009. ISOcat : Re-
modelling metadata for language resources. Inter-
national Journal of Metadata and Semantic Ontolo-
gies, 4(4):261–276.
Inderjeet Mani, James Pustejovsky, and Beth Sund-
heim. 2004. Introduction to the special issue on
temporal information processing. ACM Transac-
tions on Asian Language Information Processing
(TALIP), 3(1):1–10.
Martha Palmer, Daniel Gildea, and Paul Kingsbury.
2005. The Proposition Bank: An annotated cor-
pus of semantic roles. Computational Linguistics,
31(1):71–106, March.
James Pustejovsky, Harry Bunt, Kiyong Lee, and Lau-
rent Romary. 2010. ISO-TimeML: An International
Standard for Semantic Annotation. In Proceedings
of the Fifth International Workshop on Interoperable
Semantic Annotation (ISA-5), Paris. ELDA.
</reference>
<page confidence="0.998403">
255
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.127612">
<title confidence="0.975191">Anatomy of Annotation Mapping to GrAF</title>
<author confidence="0.961274">Nancy</author>
<affiliation confidence="0.7799135">Department of Computer Vassar</affiliation>
<address confidence="0.823416">Poughkeepsie, NY,</address>
<email confidence="0.999502">ide@cs.vassar.edu</email>
<author confidence="0.889852">Harry</author>
<affiliation confidence="0.9803065">Tilburg Center for Creative Tilburg University, The</affiliation>
<email confidence="0.968613">harry.bunt@uvt.nl</email>
<abstract confidence="0.99468775">In this paper, we apply the annotation scheme design methodology defined in (Bunt, 2010) and demonstrate its use for generating a mapping from an existing annotation scheme to a representation in GrAF format. The most important features of this methodology are (1) the distinction of the abstract and concrete syntax of an annotation language; (2) the specification of a formal semantics for the abstract syntax; and (3) the formalization of the relation between abstract and concrete syntax, which guarantees that any concrete syntax inherits the semantics of the abstract syntax, and thus guarantees meaning-preserving mappings between representation formats. By way of illustration, we apply this mapping strategy to annotations from ISO-</abstract>
<intro confidence="0.353925">TimeML, PropBank, and FrameNet.</intro>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Collin F Baker</author>
<author>Charles J Fillmore</author>
<author>John B Lowe</author>
</authors>
<title>The Berkeley FrameNet project.</title>
<date>1998</date>
<booktitle>In Proceedings of the 17th international conference on Computational linguistics,</booktitle>
<pages>86--90</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Morristown, NJ, USA.</location>
<contexts>
<context position="3747" citStr="Baker et al., 1998" startWordPosition="571" endWordPosition="574">ication are called its concrete and abstract syntax, respectively. A distinguishing feature of the proposed methodology is that the semantics is defined for the structures of the abstract syntax, rather than for the expressions that represent these structures. In this paper, we generalize the design methodology defined in (Bunt, 2010) and demonstrate its use for generating a mapping from an existing annotation scheme to a representation in GrAF format. By way of illustration, we apply the mapping strategy to annotations from ISOTimeML (ISO, 2009), PropBank (Palmer et al., 2005), and FrameNet (Baker et al., 1998). 247 Proceedings of the Fourth Linguistic Annotation Workshop, ACL 2010, pages 247–255, Uppsala, Sweden, 15-16 July 2010. c�2010 Association for Computational Linguistics 2 Background The process of corpus annotation may consist of attaching simple labels to textual elements, such as part of speech and syntactic designations and named entity tags. For more complex types of annotation, annotations include a variety of additional information about linguistic features and relations. This is especially true for the kinds of semantic annotation that have recently begun to be undertaken in earnest,</context>
</contexts>
<marker>Baker, Fillmore, Lowe, 1998</marker>
<rawString>Collin F. Baker, Charles J. Fillmore, and John B. Lowe. 1998. The Berkeley FrameNet project. In Proceedings of the 17th international conference on Computational linguistics, pages 86–90, Morristown, NJ, USA. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Harry Bunt</author>
<author>James Pustejovsky</author>
</authors>
<title>Annotation of temporal and event quantification.</title>
<date>2010</date>
<booktitle>In Proceedings of the Fifth International Workshop on Interoperable Semantic Annotation (ISA-5),</booktitle>
<pages>15--22</pages>
<institution>Hong Kong SAR. City University of Hong Kong.</institution>
<marker>Bunt, Pustejovsky, 2010</marker>
<rawString>Harry Bunt and James Pustejovsky. 2010. Annotation of temporal and event quantification. In Proceedings of the Fifth International Workshop on Interoperable Semantic Annotation (ISA-5), pages 15–22, Hong Kong SAR. City University of Hong Kong.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Harry Bunt</author>
</authors>
<title>A methodology for designing semantic annotation languages exploiting semanticsyntactic isomorphisms.</title>
<date>2010</date>
<booktitle>In Proceedings of the Second International Conference on Global Interoperability for Language Resources (ICGL2010),</booktitle>
<pages>29--46</pages>
<institution>Hong Kong SAR. City University of Hong Kong.</institution>
<contexts>
<context position="2690" citStr="Bunt, 2010" startWordPosition="407" endWordPosition="408">ranteed by GrAF, takes a giant step towards the harmonization of linguistic annotations, this is still not enough to ensure that these annotations are sufficiently compatible to enable merging, comparison, and manipulation with common software. For this, the conceptual structure of the annotation, in terms of the structural relations among the defined annotation categories, must also be consistent. It is therefore necessary to consider this aspect of annotation scheme design in order to achieve a comprehensive treatment of the requirements for full harmonization of linguistic annotations. In (Bunt, 2010), a design methodology for semantic annotation schemes is proposed, developed during the ISO project “Semantic annotation framework, Part 1: Time and events” (“SemAF/Time”, for short), which is currently nearing completion (see ISO DIS 24617-1, 2009). The methodology includes a syntax that specifies both a class of representation structures and a class of more abstract annotation structures. These two components of the language specification are called its concrete and abstract syntax, respectively. A distinguishing feature of the proposed methodology is that the semantics is defined for the s</context>
<context position="7302" citStr="Bunt, 2010" startWordPosition="1098" endWordPosition="1099">ted via development of a “metamodel”, i.e. a listing of the categories of entities and relations to be considered, often visualized by a UML-like diagram–i.e., a graph. Schemes described via this method are trivially mappable to GrAF, ensuring that syntactic consistency among the different schemes, whatever their original representation structures may be, is achievable. It also ensures that these schemes are trivially mappable to different representation formats that are used in various software systems, e.g., GATE, UIMA, NLTK, GraphViz, etc. 3 Anatomy of an annotation scheme As specified in (Bunt, 2010), an annotation scheme consists of a syntax that specifies a class of more abstract annotation structures (the abstract syntax) and a class of representation structures (the concrete syntax), plus a semantics associated with the abstract syntax. 3.1 Abstract syntax The abstract syntax of an annotation scheme defines the set-theoretical structures which constitute the information that may be contained in annotations. It consists of (a) a specification of the elements from which these structures are built up, called a conceptual inventory; and (b) annotation construction rules, which describe th</context>
<context position="10657" citStr="Bunt, 2010" startWordPosition="1640" endWordPosition="1641">oncrete syntax is said to be ideal for a given abstract syntax if there is a one-to-one correspondence between the structures defined by the abstract syntax and those defined by the concrete syntax. An ideal concrete syntax RF1 defines a function F1 from annotation structures to RFi-representations, and an inverse function F�1 i from RF1-representations to annotation structures. In other words, the abstract and the concrete syntax are isomorphic. Since this holds for any ideal concrete syntax, it follows that any two ideal representation formats are isomorphic. Given two September 2009. 3See (Bunt, 2010) for the full specification for ISOTimeML. &lt;isoTimeML-ICS1rep xml:id=&amp;quot;a1&amp;quot;&gt; &lt;EVENT xml:id=&amp;quot;e1&amp;quot; anchor=&amp;quot;t2&amp;quot; type =&amp;quot;FAST&amp;quot; tense=PAST signature=&amp;quot;INDIVIDUAL&amp;quot;/&gt; &lt;TIME-AMOUNT xml:id=&amp;quot;ta1&amp;quot; anchor=&amp;quot;t4&amp;quot; numeral=&amp;quot;2&amp;quot; unit=&amp;quot;day&amp;quot;/&gt; &lt;MLINK event=&amp;quot;e1&amp;quot; duration=&amp;quot;ta1&amp;quot; relType=&amp;quot;FOR&amp;quot;/&gt; &lt;/isoTimeML-ICS1rep&gt; Tokens: [It1][fastedt2][fort3][twot4][dayst5]. Figure 1: ISO-TimeML ICS1 annotation ideal representation formats RFi and RFj we can define a homomorphic mapping Cij from RFirepresentations to RFj-representations by (1) Cij =D Fj o F−1 i , i.e. Cij(r) = Fj(F−1 i (r)) for any RFi-representation r and conversely, </context>
<context position="11955" citStr="Bunt, 2010" startWordPosition="1825" endWordPosition="1826">by (2) Cji =D Fi o F−1 j , i.e. Cji(r) = Fi(F −1 j (r)) for any RFj-representation r These two mappings constitute conversions from one format to the other, that is, they constitute one-to-one meaning-preserving mappings: if µ(r) denotes the meaning of representation r, then µ(Cij(r)) = µ(r) for any Fi-representation r, and conversely, µ(Cji(r&apos;)) = µ(r&apos;) for any Fjrepresentation r&apos;. Figure 1 shows a rendering of the sentence I fasted for two days using a concrete XML-based syntax for the annotation structures defined by the ISO-TimeML abstract syntax, called the ICS-1 format, as described in (Bunt, 2010). 4 GrAF overview GrAF is an exchange or pivot format intended to simplify the processes of merging of annotations from different sources and using annotations with different software systems. The underlying data model is a directed acyclic graph, which is isomorphic to UML-like structures that may be used to define an abstract syntax for a given annotation scheme, as described in section 3. GrAF is an XML serialization of a formal graph consisting of nodes and edges, either or both of which are decorated with feature structures. Nodes may have edges to one or more other nodes 249 &lt;node xml:id</context>
<context position="28058" citStr="Bunt, 2010" startWordPosition="4415" endWordPosition="4416">using this methodology may be easily mapped to GrAF; and demonstrated how “reverse engineering” an annotation 8Obviously, in the FrameNet XML additional elements are introduced for display and bookkeeping purposes. format whose abstract syntax is unspecified can provide the information required to map that format to GrAF. This work was undertaken with two goals in mind: (1) to provide a formal method for mapping to GrAF; and (2) to demonstrate the advantages of a methodology for annotation scheme design that is based on an abstract model, as adopted in ISO TC37 SC4 projects and formalized in (Bunt, 2010). The ultimate goal is, of course, to achieve harmonization of annotation formats, so that they can be merged, enabling the study of interactions among information at different linguistic levels; compared, in order to both evaluate and improve automatic annotation accuracy; and to enable seamless transition from one software environment to another when creating and using linguistic annotations. &lt;annotationSet lexUnitRef=&amp;quot;11673&amp;quot; luName=&amp;quot;provide.v&amp;quot; frameRef=&amp;quot;1346&amp;quot; frameName=&amp;quot;Supply&amp;quot; status=&amp;quot;MANUAL&amp;quot; ID=&amp;quot;2022935&amp;quot;&gt; &lt;layer rank=&amp;quot;1&amp;quot; name=&amp;quot;Target&amp;quot;&gt; &lt;label end=&amp;quot;109&amp;quot; start=&amp;quot;103&amp;quot; name=&amp;quot;Target&amp;quot;/&gt; &lt;/layer&gt;</context>
</contexts>
<marker>Bunt, 2010</marker>
<rawString>Harry Bunt. 2010. A methodology for designing semantic annotation languages exploiting semanticsyntactic isomorphisms. In Proceedings of the Second International Conference on Global Interoperability for Language Resources (ICGL2010), pages 29–46, Hong Kong SAR. City University of Hong Kong.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nancy Ide</author>
<author>Laurent Romary</author>
</authors>
<title>International standard for a linguistic annotation framework.</title>
<date>2004</date>
<journal>Journal of Natural Language Engineering,</journal>
<pages>10--3</pages>
<contexts>
<context position="1106" citStr="Ide and Romary, 2004" startWordPosition="164" endWordPosition="167">atures of this methodology are (1) the distinction of the abstract and concrete syntax of an annotation language; (2) the specification of a formal semantics for the abstract syntax; and (3) the formalization of the relation between abstract and concrete syntax, which guarantees that any concrete syntax inherits the semantics of the abstract syntax, and thus guarantees meaning-preserving mappings between representation formats. By way of illustration, we apply this mapping strategy to annotations from ISOTimeML, PropBank, and FrameNet. 1 Introduction The Linguistic Annotation Framework (LAF, (Ide and Romary, 2004); ISO 24612, 2009) defines an abstract model for annotations together with an XML serialization of the model, the Graph Annotation Format (GrAF, (Ide and Suderman, 2007)). GrAF is intended to be a pivot format capable of representing diverse annotation types of varying complexity, guaranteeing syntactic consistency among the different annotations. GrAF does not address the issue of semantic consistency among annotation labels and categories; this is assumed to be handled by other standardization efforts such as ISOCat (Kemps-Snijders et al., 2009). ISOCat provides a set of data categories at v</context>
</contexts>
<marker>Ide, Romary, 2004</marker>
<rawString>Nancy Ide and Laurent Romary. 2004. International standard for a linguistic annotation framework. Journal of Natural Language Engineering, 10(3–4):211–225.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nancy Ide</author>
<author>Keith Suderman</author>
</authors>
<title>GrAF: A graphbased format for linguistic annotations.</title>
<date>2007</date>
<booktitle>In Proceedings of the First Linguistic Annotation Workshop,</booktitle>
<pages>1--8</pages>
<location>Prague.</location>
<contexts>
<context position="1275" citStr="Ide and Suderman, 2007" startWordPosition="190" endWordPosition="193">bstract syntax; and (3) the formalization of the relation between abstract and concrete syntax, which guarantees that any concrete syntax inherits the semantics of the abstract syntax, and thus guarantees meaning-preserving mappings between representation formats. By way of illustration, we apply this mapping strategy to annotations from ISOTimeML, PropBank, and FrameNet. 1 Introduction The Linguistic Annotation Framework (LAF, (Ide and Romary, 2004); ISO 24612, 2009) defines an abstract model for annotations together with an XML serialization of the model, the Graph Annotation Format (GrAF, (Ide and Suderman, 2007)). GrAF is intended to be a pivot format capable of representing diverse annotation types of varying complexity, guaranteeing syntactic consistency among the different annotations. GrAF does not address the issue of semantic consistency among annotation labels and categories; this is assumed to be handled by other standardization efforts such as ISOCat (Kemps-Snijders et al., 2009). ISOCat provides a set of data categories at various levels of granularity, each accompanied by a precise definition of its linguistic meaning. Labels applied in a user-defined annotation scheme should be mapped to </context>
</contexts>
<marker>Ide, Suderman, 2007</marker>
<rawString>Nancy Ide and Keith Suderman. 2007. GrAF: A graphbased format for linguistic annotations. In Proceedings of the First Linguistic Annotation Workshop, pages 1–8, Prague.</rawString>
</citation>
<citation valid="true">
<authors>
<author>ISO</author>
</authors>
<title>Language Resource Management - Semantic Annotation Framework (SemAF) - Part 1: Time and Events.</title>
<date>2009</date>
<booktitle>Secretariat KATS, October. ISO International Standard 24617-1:2009(E)),</booktitle>
<pages>11</pages>
<contexts>
<context position="3680" citStr="ISO, 2009" startWordPosition="562" endWordPosition="563">on structures. These two components of the language specification are called its concrete and abstract syntax, respectively. A distinguishing feature of the proposed methodology is that the semantics is defined for the structures of the abstract syntax, rather than for the expressions that represent these structures. In this paper, we generalize the design methodology defined in (Bunt, 2010) and demonstrate its use for generating a mapping from an existing annotation scheme to a representation in GrAF format. By way of illustration, we apply the mapping strategy to annotations from ISOTimeML (ISO, 2009), PropBank (Palmer et al., 2005), and FrameNet (Baker et al., 1998). 247 Proceedings of the Fourth Linguistic Annotation Workshop, ACL 2010, pages 247–255, Uppsala, Sweden, 15-16 July 2010. c�2010 Association for Computational Linguistics 2 Background The process of corpus annotation may consist of attaching simple labels to textual elements, such as part of speech and syntactic designations and named entity tags. For more complex types of annotation, annotations include a variety of additional information about linguistic features and relations. This is especially true for the kinds of semant</context>
</contexts>
<marker>ISO, 2009</marker>
<rawString>ISO. 2009. Language Resource Management - Semantic Annotation Framework (SemAF) - Part 1: Time and Events. Secretariat KATS, October. ISO International Standard 24617-1:2009(E)), 11 October 2009.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Kamp</author>
<author>U Reyle</author>
</authors>
<title>From Discourse to Logic.</title>
<date>1993</date>
<publisher>Kluwer Academic Publishers,</publisher>
<location>Dordrecht.</location>
<contexts>
<context position="8232" citStr="Kamp and Reyle, 1993" startWordPosition="1238" endWordPosition="1241"> defines the set-theoretical structures which constitute the information that may be contained in annotations. It consists of (a) a specification of the elements from which these structures are built up, called a conceptual inventory; and (b) annotation construction rules, which describe the possible combinations of these elements into annotation structures. The semantics of the annotation scheme components is defined for the annotation structures of the abstract syntax; Bunt (2010) provides a formal specification of the semantics of ISO-TimeML in terms of Discourse Representation Structures (Kamp and Reyle, 1993), and defines the class of concrete representations of the structures defined by the abstract syntax. For example, a fragment of the ISO-TimeML2 2All references to ISO-TimeML are based on the state of the project as documented in ISO 264617-1:2009(E) from 248 conceptual inventory includes:3 • finite sets of elements called event types, tenses, aspects, signatures, cardinalities, and veracities. • finite sets of elements called temporal relations, duration relations, event subordination relations, aspectual relations, etc. The annotation construction rules for ISOTimeML specify how to construct</context>
</contexts>
<marker>Kamp, Reyle, 1993</marker>
<rawString>H. Kamp and U. Reyle. 1993. From Discourse to Logic. Kluwer Academic Publishers, Dordrecht.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Marc Kemps-Snijders</author>
<author>Menzo Windhouwer</author>
<author>Peter Wittenburg</author>
<author>Sue Ellen Wright</author>
</authors>
<title>ISOcat : Remodelling metadata for language resources.</title>
<date>2009</date>
<journal>International Journal of Metadata and Semantic Ontologies,</journal>
<volume>4</volume>
<issue>4</issue>
<contexts>
<context position="1659" citStr="Kemps-Snijders et al., 2009" startWordPosition="249" endWordPosition="252">troduction The Linguistic Annotation Framework (LAF, (Ide and Romary, 2004); ISO 24612, 2009) defines an abstract model for annotations together with an XML serialization of the model, the Graph Annotation Format (GrAF, (Ide and Suderman, 2007)). GrAF is intended to be a pivot format capable of representing diverse annotation types of varying complexity, guaranteeing syntactic consistency among the different annotations. GrAF does not address the issue of semantic consistency among annotation labels and categories; this is assumed to be handled by other standardization efforts such as ISOCat (Kemps-Snijders et al., 2009). ISOCat provides a set of data categories at various levels of granularity, each accompanied by a precise definition of its linguistic meaning. Labels applied in a user-defined annotation scheme should be mapped to these categories in order to ensure semantic consistency among annotations of the same phenomenon. While the mapping of annotation labels to a common definition, coupled with the syntactic consistency guaranteed by GrAF, takes a giant step towards the harmonization of linguistic annotations, this is still not enough to ensure that these annotations are sufficiently compatible to en</context>
</contexts>
<marker>Kemps-Snijders, Windhouwer, Wittenburg, Wright, 2009</marker>
<rawString>Marc Kemps-Snijders, Menzo Windhouwer, Peter Wittenburg, and Sue Ellen Wright. 2009. ISOcat : Remodelling metadata for language resources. International Journal of Metadata and Semantic Ontologies, 4(4):261–276.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Inderjeet Mani</author>
<author>James Pustejovsky</author>
<author>Beth Sundheim</author>
</authors>
<title>Introduction to the special issue on temporal information processing.</title>
<date>2004</date>
<journal>ACM Transactions on Asian Language Information Processing (TALIP),</journal>
<volume>3</volume>
<issue>1</issue>
<marker>Mani, Pustejovsky, Sundheim, 2004</marker>
<rawString>Inderjeet Mani, James Pustejovsky, and Beth Sundheim. 2004. Introduction to the special issue on temporal information processing. ACM Transactions on Asian Language Information Processing (TALIP), 3(1):1–10.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Martha Palmer</author>
<author>Daniel Gildea</author>
<author>Paul Kingsbury</author>
</authors>
<title>The Proposition Bank: An annotated corpus of semantic roles.</title>
<date>2005</date>
<journal>Computational Linguistics,</journal>
<volume>31</volume>
<issue>1</issue>
<contexts>
<context position="3712" citStr="Palmer et al., 2005" startWordPosition="565" endWordPosition="568">wo components of the language specification are called its concrete and abstract syntax, respectively. A distinguishing feature of the proposed methodology is that the semantics is defined for the structures of the abstract syntax, rather than for the expressions that represent these structures. In this paper, we generalize the design methodology defined in (Bunt, 2010) and demonstrate its use for generating a mapping from an existing annotation scheme to a representation in GrAF format. By way of illustration, we apply the mapping strategy to annotations from ISOTimeML (ISO, 2009), PropBank (Palmer et al., 2005), and FrameNet (Baker et al., 1998). 247 Proceedings of the Fourth Linguistic Annotation Workshop, ACL 2010, pages 247–255, Uppsala, Sweden, 15-16 July 2010. c�2010 Association for Computational Linguistics 2 Background The process of corpus annotation may consist of attaching simple labels to textual elements, such as part of speech and syntactic designations and named entity tags. For more complex types of annotation, annotations include a variety of additional information about linguistic features and relations. This is especially true for the kinds of semantic annotation that have recently</context>
</contexts>
<marker>Palmer, Gildea, Kingsbury, 2005</marker>
<rawString>Martha Palmer, Daniel Gildea, and Paul Kingsbury. 2005. The Proposition Bank: An annotated corpus of semantic roles. Computational Linguistics, 31(1):71–106, March.</rawString>
</citation>
<citation valid="true">
<authors>
<author>James Pustejovsky</author>
<author>Harry Bunt</author>
<author>Kiyong Lee</author>
<author>Laurent Romary</author>
</authors>
<title>ISO-TimeML: An International Standard for Semantic Annotation.</title>
<date>2010</date>
<booktitle>In Proceedings of the Fifth International Workshop on Interoperable Semantic Annotation (ISA-5),</booktitle>
<location>Paris. ELDA.</location>
<contexts>
<context position="19673" citStr="Pustejovsky et al., 2010" startWordPosition="3108" endWordPosition="3111">f the primary data. ISO-TimeML link structures define a relation between two entity structures, and are rendered in GrAF as a labeled edge between the nodes annotated with the entity structure information. In the ISO-TimeML example, an annotation with label MLINK (‘measure link’) is created with a single feature relType. The from and to attributes on the &lt;edge&gt; element link the node with the EVENT entity structure annotation (node tml-n1 in the example) to the node with the TIME-AMOUNT annotation (tml-n2). This edge is then associated with the MLINK annotation (cf. Bunt and Pustejovsky, 2009; Pustejovsky et al., 2010). Figure 1 shows the rendering of the ISOTimeML abstract syntax in the ICS-1 concrete syntax. Following Section 3.2, these two realizations of the abstract syntax for ISO-TimeML are isomorphic. &lt;node xml:id=&amp;quot;tml-n1&amp;quot;/&gt; &lt;a label=&amp;quot;EVENT&amp;quot; ref=&amp;quot;tml-n1&amp;quot; as=&amp;quot;TimeML&amp;quot;&gt; &lt;fs&gt; &lt;f name=&amp;quot;event&amp;quot; value=&amp;quot;fast&amp;quot;/&gt; &lt;f name=&amp;quot;tense&amp;quot; value=&amp;quot;Past&amp;quot;/&gt; &lt;f name=&amp;quot;signature&amp;quot; value=&amp;quot;individual&amp;quot;/&gt; &lt;/fs&gt; &lt;/a&gt; &lt;edge xml:id=&amp;quot;tml-e1&amp;quot; from=&amp;quot;tml-n1&amp;quot; to=&amp;quot;t2&amp;quot;/&gt; &lt;node xml:id=&amp;quot;tml-n2&amp;quot;/&gt; &lt;a label=&amp;quot;TIME-AMOUNT&amp;quot; ref=&amp;quot;tml-n2&amp;quot; as=&amp;quot;TimeML&amp;quot;&gt; &lt;fs&gt; &lt;f name=&amp;quot;numeral&amp;quot; value=&amp;quot;2&amp;quot;/&gt; &lt;f name=&amp;quot;unit&amp;quot; value=&amp;quot;day&amp;quot;/&gt; &lt;/fs&gt; &lt;/a&gt; &lt;edge xml:id=&amp;quot;tml-e2&amp;quot; from</context>
</contexts>
<marker>Pustejovsky, Bunt, Lee, Romary, 2010</marker>
<rawString>James Pustejovsky, Harry Bunt, Kiyong Lee, and Laurent Romary. 2010. ISO-TimeML: An International Standard for Semantic Annotation. In Proceedings of the Fifth International Workshop on Interoperable Semantic Annotation (ISA-5), Paris. ELDA.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>