<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.398568">
<title confidence="0.909324">
Cross-Platform, Cross-Grammar Comparison Can it be Done?
</title>
<author confidence="0.931155">
Ulrich Callmeier and Stephan Oepen
</author>
<affiliation confidence="0.872658">
Saarland University
Computational Linguistics
</affiliation>
<address confidence="0.586372">
{ uc 1 oe}@coli.uni-sb.de
</address>
<email confidence="0.869732">
(see http: //www.coli .uni-sb.de/itsdb/&apos;)
</email>
<sectionHeader confidence="0.992503" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999969646153847">
This software demonstration reviews re-
cent improvements in comparing large-scale
unification-based parsing systems, both across
different platforms and multiple grammars.
Over the past few years significant progress
was accomplished in efficient processing with
wide-coverage HPSG grammars. A large num-
ber of engineering improvements in current
systems were achieved through collaboration of
multiple research centers and mutual exchange
of experience, encoding techniques, algorithms,
and pieces of software.
We argue for an approach to grammar and
system engineering that makes systematic ex-
perimentation and the precise empirical study
of system properties a focal point in develop-
ment. Adapting the profiling metaphor familiar
from software engineering to constraint-based
grammars and parsers enables developers to
maintain an accurate record of system evolu-
tion, identify grammar and system deficiencies
quickly, and compare to earlier versions, among
analytically varied configurations, or between
different systems. We demonstrate a suite of in-
tegrated software packages facilitating this ap-
proach, which are publicly available both separ-
ately and together.
The [i nc r tsd b 0] profiling environment
(Oepen &amp; Carroll, 2000) integrates empirical
assessment and systematic progress evaluation
into the development cycle for grammars and
processing systems; it enables developers to ob-
tain an accurate snapshot of current system be-
haviour (a profile) with minimal effort. Profiles
can then be analysed and visualized at vari-
able granularity, reflecting various aspects of
system competence and performance, and com-
pared to earlier results. Since the [incr tsd 60]
package has been integrated with some eight
processing platforms by now, it has greatly fa-
cilitated cross-fertilization between various re-
search groups and implementations.
PET is a platform for experimentation with
processing techniques and the implementa-
tion of efficient processors for unification-based
grammars (Callmeier, 2000). It synthesizes
a range of techniques for efficient processing
from earlier systems into a modular C++ im-
plementation, supplying building blocks (such
as various unifiers) from which a large number
of experimental setups can be configured. A
parser built from PET components can be used
as a time- and memory-efficient run-time sys-
tem for grammars developed in the LKB sys-
tem distributed by CSLI Stanford (Copestake
&amp; Flickinger, 2000). In daily grammar develop-
ment it allows frequent, rapid regression tests.
We emphasize in this demonstration the cru-
cial importance of experimental system compar-
ison, eclectic engineering, and incremental opti-
mization. Only through the careful analysis of a
large number of interacting system parameters
can one establish reliable points of comparison
across different parsers and multiple grammars
simultaneously.
</bodyText>
<sectionHeader confidence="0.998916" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.993713533333333">
Callmeier, U. (2000). PET — A platform for ex-
perimentation with efficient HPSG processing
techniques. Natural Language Engineering, 6
(I) (Special Issue on Efficient Processing with
HPSG), 99-108.
Copestake, A., &amp; Flickinger, D. (2000). An open-
source grammar development environment and
broad-coverage English grammar using HPSG.
In Proceedings of the Second Linguistic Re-
sources and Evaluation Conference (pp. 591 –
600). Athens, Greece.
Oepen, S., Sz Carroll, J. (2000). Performance profil-
ing for parser engineering. Natural Language En-
gineering, 6 (1) (Special Issue on Efficient Pro-
cessing with HPSG), 81 – 97.
</reference>
<page confidence="0.999319">
53
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.040277">
<title confidence="0.904455">Cross-Platform, Cross-Grammar Comparison Can it be Done?</title>
<author confidence="0.812712">Ulrich Callmeier</author>
<author confidence="0.812712">Stephan</author>
<affiliation confidence="0.523111">Saarland</affiliation>
<note confidence="0.842107">Computational uc 1</note>
<web confidence="0.96871">http: .uni-sb.de/itsdb/&apos;</web>
<abstract confidence="0.992133131578947">This software demonstration reviews recent improvements in comparing large-scale unification-based parsing systems, both across different platforms and multiple grammars. Over the past few years significant progress was accomplished in efficient processing with A large number of engineering improvements in current systems were achieved through collaboration of multiple research centers and mutual exchange of experience, encoding techniques, algorithms, and pieces of software. We argue for an approach to grammar and system engineering that makes systematic experimentation and the precise empirical study of system properties a focal point in development. Adapting the profiling metaphor familiar from software engineering to constraint-based grammars and parsers enables developers to maintain an accurate record of system evolution, identify grammar and system deficiencies quickly, and compare to earlier versions, among analytically varied configurations, or between different systems. We demonstrate a suite of integrated software packages facilitating this approach, which are publicly available both separately and together. The [i nc r tsd b 0] profiling environment 2000) integrates empirical assessment and systematic progress evaluation into the development cycle for grammars and processing systems; it enables developers to obtain an accurate snapshot of current system behaviour (a profile) with minimal effort. Profiles can then be analysed and visualized at variable granularity, reflecting various aspects of system competence and performance, and compared to earlier results. Since the [incr tsd 60] package has been integrated with some eight processing platforms by now, it has greatly facilitated cross-fertilization between various research groups and implementations. a platform for experimentation with processing techniques and the implementation of efficient processors for unification-based grammars (Callmeier, 2000). It synthesizes a range of techniques for efficient processing from earlier systems into a modular C++ implementation, supplying building blocks (such as various unifiers) from which a large number of experimental setups can be configured. A built from can be used as a timeand memory-efficient run-time sysfor grammars developed in the system distributed by CSLI Stanford (Copestake 2000). In daily grammar development it allows frequent, rapid regression tests. We emphasize in this demonstration the crucial importance of experimental system comparison, eclectic engineering, and incremental optimization. Only through the careful analysis of a large number of interacting system parameters can one establish reliable points of comparison across different parsers and multiple grammars simultaneously. References Callmeier, U. (2000). PET — A platform for experimentation with efficient HPSG processing Language Engineering, 6 (I) (Special Issue on Efficient Processing with A., &amp; Flickinger, An opensource grammar development environment and broad-coverage English grammar using HPSG. of the Second Linguistic Reand Evaluation Conference 591 –</abstract>
<note confidence="0.736240666666667">600). Athens, Greece. S., J. (2000). Performance profilfor parser engineering. Language Engineering, 6 (1) (Special Issue on Efficient Prowith HPSG), – 97. 53</note>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>U Callmeier</author>
</authors>
<title>PET — A platform for experimentation with efficient HPSG processing techniques.</title>
<date>2000</date>
<journal>Natural Language Engineering,</journal>
<booktitle>(Special Issue on Efficient Processing with HPSG),</booktitle>
<volume>6</volume>
<pages>99--108</pages>
<contexts>
<context position="2218" citStr="Callmeier, 2000" startWordPosition="306" endWordPosition="307">o obtain an accurate snapshot of current system behaviour (a profile) with minimal effort. Profiles can then be analysed and visualized at variable granularity, reflecting various aspects of system competence and performance, and compared to earlier results. Since the [incr tsd 60] package has been integrated with some eight processing platforms by now, it has greatly facilitated cross-fertilization between various research groups and implementations. PET is a platform for experimentation with processing techniques and the implementation of efficient processors for unification-based grammars (Callmeier, 2000). It synthesizes a range of techniques for efficient processing from earlier systems into a modular C++ implementation, supplying building blocks (such as various unifiers) from which a large number of experimental setups can be configured. A parser built from PET components can be used as a time- and memory-efficient run-time system for grammars developed in the LKB system distributed by CSLI Stanford (Copestake &amp; Flickinger, 2000). In daily grammar development it allows frequent, rapid regression tests. We emphasize in this demonstration the crucial importance of experimental system comparis</context>
</contexts>
<marker>Callmeier, 2000</marker>
<rawString>Callmeier, U. (2000). PET — A platform for experimentation with efficient HPSG processing techniques. Natural Language Engineering, 6 (I) (Special Issue on Efficient Processing with HPSG), 99-108.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Copestake</author>
<author>D Flickinger</author>
</authors>
<title>An opensource grammar development environment and broad-coverage English grammar using HPSG.</title>
<date>2000</date>
<booktitle>In Proceedings of the Second Linguistic Resources and Evaluation Conference (pp. 591 – 600).</booktitle>
<location>Athens, Greece.</location>
<marker>Copestake, Flickinger, 2000</marker>
<rawString>Copestake, A., &amp; Flickinger, D. (2000). An opensource grammar development environment and broad-coverage English grammar using HPSG. In Proceedings of the Second Linguistic Resources and Evaluation Conference (pp. 591 – 600). Athens, Greece.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Oepen</author>
<author>Sz Carroll</author>
<author>J</author>
</authors>
<title>Performance profiling for parser engineering.</title>
<date>2000</date>
<journal>Natural Language Engineering,</journal>
<booktitle>(Special Issue on Efficient Processing with HPSG), 81 – 97.</booktitle>
<volume>6</volume>
<issue>1</issue>
<marker>Oepen, Carroll, J, 2000</marker>
<rawString>Oepen, S., Sz Carroll, J. (2000). Performance profiling for parser engineering. Natural Language Engineering, 6 (1) (Special Issue on Efficient Processing with HPSG), 81 – 97.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>