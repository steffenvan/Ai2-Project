<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.126673">
<bodyText confidence="0.954568575342466">
If The Parser Fails*
Ralph M. Weischedel
University of Delaware
and
John E. Black**
W. L. Gore &amp; Associates, Inc.
The unforgiving nature of natural language components
when someone uses an unexpected input has recently been
a concern of several projects. For instance, Carbonell
(1979) discusses inferring the meaning of new words.
Hendrix, et.al. (1978) describe a system that provides a
means for naive users to define personalized paraphrases
and that lists the items expected next at a point where
the parser blocks. Weischedel, et.al. (1978) show how
to relax both syntactic and semantic constraints such
that some classes of ungrammatical or semantically
inappropriate input are understood. Kwasny and
Sondheimer (1979) present techniques for understanding
several classes of syntactically ill-formed input. Codd,
et.al. (1978) and Lebowitz (1979) present alternatives
to top-down, left-to-right parsers as a means of dealing
with some of these problems.
This paper presents heuristics for responding to inputs
that cannot be parsed even using the techniques
referenced in the last paragraph for relaxing syntactic
and semantic constraints. The paper concentrates on
the results of an experiment testing our heuristics.
We assume only that the parser is written in the ATN
formalism. In this method, the parser writer must
assign a sequence of condition-action pairs for each
state of the ATN. If no parse can be found, the
condition-action pairs of the last state of the path that
progressed furthest through the input string are used to
generate a message about the nature of the problem, the
interpretation being followed, and what was expected
next. The conditions may refer to any ATN register, the
input string, or any computation upon them (even
semantic ones). The actions can include any computation
(even restarting the parse after altering the unparsed
portion) and can generate any responses to the user.
These heuristics were tested on a grammar which uses
only syntactic information. We constructed test data
such that one sentence would block at each of the 39
states of the ATN where blockage could occur. In only
3 of the 39 cases did the parser continue beyond the
point that was the true source of the parse failing.
From the tests, it was clear that the heuristics
frequently pinpointed the exact cause of the block.
However, the response did not always convey that
precision to the user due to the technical nature of the
grammatical cause of the blockage. Even though the
heuristics correctly selected one state in the over-
whelming majority of cases, frequently there were
several possible causes for blocking at a given state.
Another aspect of our analysis was the computational and
developmental costs for adding these heuristics to a
parser. Clearly, only a small fraction of the parsing
time and memory usage is needed to record the longest
partial parse and generate messages for the last state
on it. Significant effort is required of the grammar
writer to devise the condition-action pairs. However,
such analysis of the grammar certainly adds to the
programmer&apos;s understanding of the grammar, and the
condition-action pairs provide significant documentation
*This work was supported by the University of Delaware
Research Foundation, Inc.
**This work was performed while John Black was with the
Dept. of Computer &amp; Information Sciences, University of
Delaware.
of the grammar. Only one page of program code and nine
pages of constant character strings for use in messages
were added.
From the experiment we conclude the following:
</bodyText>
<listItem confidence="0.795137142857143">
1. The heuristics are powerful for small natural
language front ends to an application domain.
2. The heuristics should also be quite effective in a
compiler, where parsing is far more deterministic.
3. The heuristics will be more effective in a semantic
grammar or in a parser which frequently interacts with
a semantic component to guide it.
</listItem>
<bodyText confidence="0.999836083333333">
We will be adding condition-action pairs to the states
of the RUS parser (Bobrow, 1978) and will add relaxation
techniques for both syntactic and semantic constraints
as described in Weischedel, et.al. (1978) and Kwasny
and Sondheimer (1979). The purpose is to test the
effectiveness of paraphrasing partial semantic inter-
pretations as a means of explaining the interpretation
being followed. Furthermore, Bobrow (1978) indicates
that semantic guidance makes the RUS parser significancly
more deterministic; we wish to test the effect of this
on the ability of our heuristics to pinpoint the nature
of a block.
</bodyText>
<sectionHeader confidence="0.91191" genericHeader="abstract">
References
</sectionHeader>
<reference confidence="0.999805666666667">
Bobrow, Robert S., &amp;quot;The RUS System,&amp;quot; in Research in
Natural Language Understanding, B. L. Webber and
R. Bobrow (eds.), BBM Report No. 3878, Bolt Beranek and
Newman, Inc., Cambridae, MA, 1978.
Carbonell, Jaime G., &amp;quot;Toward a Self-Extending Parser,&amp;quot; in
Proceedings of the 17th Annual Meeting of the Association
for Computational Linguistics, San Diego, August, 1979,
3-7.
Codd, E. F., R. S. Arnold, J-M. Cadiou, C. L. Chang and
N. Roussopoulis, &amp;quot;RENDEZVOUS Version 1: An Experimental-
Language Query Formulation System for Casual Users of
Relational Data Bases,&amp;quot; IBM Research Report RJ 2144, San
Jose, CA, January, 1978.
Hendrix, Gary G., Earl D. Sacerdoti, Daniel Sagalowicz,
and Jonathan Slocum, &amp;quot;Developing a Natural Language
Interface to Complex Data,&amp;quot; ACM Transactions on Database
Systems, 3, 2, (1978), 105-147.
Kwasny, Stan C. and Norman K. Sondheimer, &amp;quot;Ungrammatica-
lity and Extragrammaticality in Natural Language
Understanding Systems,&amp;quot; in Proceedings of the 17th Annual
Meeting of the Association for Computational Linguistics,
San Diego, Auoust, 1979, 19-23.
Lebowitz, Michael, &amp;quot;Reading with a Purpose,&amp;quot; in
Proceedings of the 17th Annual Meeting of the Association
for Computational Linguistics, San Diego, August, 1979,
59-63.
Weischedel, Ralph M., Wilfried M. Voge, and Mark James,
&amp;quot;An Artificial Intelligence Approach to Language
Instruction,&amp;quot; Artificial Intelligence, 10, (1978),
225-240.
</reference>
<page confidence="0.999079">
95
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.002995">
<title confidence="0.996753">If The Parser Fails*</title>
<author confidence="0.999981">Ralph M Weischedel</author>
<affiliation confidence="0.8364085">University of Delaware and</affiliation>
<author confidence="0.982885">John E Black</author>
<abstract confidence="0.986121474576271">W. L. Gore &amp; Associates, Inc. The unforgiving nature of natural language components when someone uses an unexpected input has recently been a concern of several projects. For instance, Carbonell discusses inferring the meaning of Hendrix, et.al. (1978) describe a system that provides a means for naive users to define personalized paraphrases and that lists the items expected next at a point where the parser blocks. Weischedel, et.al. (1978) show how to relax both syntactic and semantic constraints such that some classes of ungrammatical or semantically inappropriate input are understood. Kwasny and Sondheimer (1979) present techniques for understanding several classes of syntactically ill-formed input. Codd, et.al. (1978) and Lebowitz (1979) present alternatives to top-down, left-to-right parsers as a means of dealing with some of these problems. This paper presents heuristics for responding to inputs that cannot be parsed even using the techniques referenced in the last paragraph for relaxing syntactic and semantic constraints. The paper concentrates on the results of an experiment testing our heuristics. We assume only that the parser is written in the ATN formalism. In this method, the parser writer must assign a sequence of condition-action pairs for each state of the ATN. If no parse can be found, the condition-action pairs of the last state of the path that progressed furthest through the input string are used to generate a message about the nature of the problem, the interpretation being followed, and what was expected next. The conditions may refer to any ATN register, the string, or upon them (even semantic ones). The actions can include any computation (even restarting the parse after altering the unparsed portion) and can generate any responses to the user. These heuristics were tested on a grammar which uses only syntactic information. We constructed test data such that one sentence would block at each of the 39 states of the ATN where blockage could occur. In only 3 of the 39 cases did the parser continue beyond the point that was the true source of the parse failing. From the tests, it was clear that the heuristics frequently pinpointed the exact cause of the block. However, the response did not always convey that precision to the user due to the technical nature of the grammatical cause of the blockage. Even though the heuristics correctly selected one state in the overwhelming majority of cases, frequently there were several possible causes for blocking at a given state. Another aspect of our analysis was the computational and developmental costs for adding these heuristics to a parser. Clearly, only a small fraction of the parsing time and memory usage is needed to record the longest partial parse and generate messages for the last state on it. Significant effort is required of the grammar writer to devise the condition-action pairs. However, such analysis of the grammar certainly adds to the programmer&apos;s understanding of the grammar, and the condition-action pairs provide significant documentation</abstract>
<note confidence="0.979634666666667">This work was supported by the University of Delaware Research Foundation, Inc. **This work was performed while John Black was with the</note>
<affiliation confidence="0.725388">Dept. of Computer &amp; Information Sciences, University of</affiliation>
<abstract confidence="0.996999041666667">Delaware. of the grammar. Only one page of program code and nine pages of constant character strings for use in messages were added. From the experiment we conclude the following: 1. The heuristics are powerful for small natural language front ends to an application domain. 2. The heuristics should also be quite effective in a compiler, where parsing is far more deterministic. 3. The heuristics will be more effective in a semantic grammar or in a parser which frequently interacts with a semantic component to guide it. be adding condition-action pairs to the states of the RUS parser (Bobrow, 1978) and will add relaxation techniques for both syntactic and semantic constraints as described in Weischedel, et.al. (1978) and Kwasny and Sondheimer (1979). The purpose is to test the effectiveness of paraphrasing partial semantic interpretations as a means of explaining the interpretation being followed. Furthermore, Bobrow (1978) indicates that semantic guidance makes the RUS parser significancly more deterministic; we wish to test the effect of this on the ability of our heuristics to pinpoint the nature of a block.</abstract>
<note confidence="0.790437419354839">References Bobrow, Robert S., &amp;quot;The RUS System,&amp;quot; in Research in Natural Language Understanding, B. L. Webber and R. Bobrow (eds.), BBM Report No. 3878, Bolt Beranek and Newman, Inc., Cambridae, MA, 1978. Carbonell, Jaime G., &amp;quot;Toward a Self-Extending Parser,&amp;quot; in Proceedings of the 17th Annual Meeting of the Association for Computational Linguistics, San Diego, August, 1979, 3-7. Codd, E. F., R. S. Arnold, J-M. Cadiou, C. L. Chang and N. Roussopoulis, &amp;quot;RENDEZVOUS Version 1: An Experimental- Language Query Formulation System for Casual Users of Relational Data Bases,&amp;quot; IBM Research Report RJ 2144, San Jose, CA, January, 1978. Hendrix, Gary G., Earl D. Sacerdoti, Daniel Sagalowicz, and Jonathan Slocum, &amp;quot;Developing a Natural Language to Complex Data,&amp;quot; Transactions on Database Systems,3, 2, (1978), 105-147. Kwasny, Stan C. and Norman K. Sondheimer, &amp;quot;Ungrammaticality and Extragrammaticality in Natural Language Understanding Systems,&amp;quot; in Proceedings of the 17th Annual Meeting of the Association for Computational Linguistics, San Diego, Auoust, 1979, 19-23. Lebowitz, Michael, &amp;quot;Reading with a Purpose,&amp;quot; in Proceedings of the 17th Annual Meeting of the Association for Computational Linguistics, San Diego, August, 1979, 59-63. Weischedel, Ralph M., Wilfried M. Voge, and Mark James, &amp;quot;An Artificial Intelligence Approach to Language Intelligence,10, (1978), 225-240.</note>
<intro confidence="0.616458">95</intro>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Robert S Bobrow</author>
</authors>
<title>The RUS System,&amp;quot;</title>
<date>1978</date>
<booktitle>in Research in Natural Language Understanding,</booktitle>
<editor>B. L. Webber and R. Bobrow (eds.),</editor>
<location>Cambridae, MA,</location>
<marker>Bobrow, 1978</marker>
<rawString>Bobrow, Robert S., &amp;quot;The RUS System,&amp;quot; in Research in Natural Language Understanding, B. L. Webber and R. Bobrow (eds.), BBM Report No. 3878, Bolt Beranek and Newman, Inc., Cambridae, MA, 1978.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jaime G Carbonell</author>
</authors>
<title>Toward a Self-Extending Parser,&amp;quot;</title>
<date>1979</date>
<booktitle>in Proceedings of the 17th Annual Meeting of the Association for Computational Linguistics,</booktitle>
<pages>3--7</pages>
<location>San Diego,</location>
<marker>Carbonell, 1979</marker>
<rawString>Carbonell, Jaime G., &amp;quot;Toward a Self-Extending Parser,&amp;quot; in Proceedings of the 17th Annual Meeting of the Association for Computational Linguistics, San Diego, August, 1979, 3-7.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E F Codd</author>
<author>R S Arnold</author>
<author>J-M Cadiou</author>
<author>C L Chang</author>
<author>N Roussopoulis</author>
</authors>
<title>RENDEZVOUS Version 1: An ExperimentalLanguage Query Formulation System for Casual Users of Relational Data Bases,&amp;quot;</title>
<date>1978</date>
<tech>IBM Research Report RJ 2144,</tech>
<location>San Jose, CA,</location>
<marker>Codd, Arnold, Cadiou, Chang, Roussopoulis, 1978</marker>
<rawString>Codd, E. F., R. S. Arnold, J-M. Cadiou, C. L. Chang and N. Roussopoulis, &amp;quot;RENDEZVOUS Version 1: An ExperimentalLanguage Query Formulation System for Casual Users of Relational Data Bases,&amp;quot; IBM Research Report RJ 2144, San Jose, CA, January, 1978.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Gary G Hendrix</author>
<author>Earl D Sacerdoti</author>
<author>Daniel Sagalowicz</author>
<author>Jonathan Slocum</author>
</authors>
<title>Developing a Natural Language Interface to Complex Data,&amp;quot;</title>
<date>1978</date>
<journal>ACM Transactions on Database Systems,</journal>
<volume>3</volume>
<pages>105--147</pages>
<marker>Hendrix, Sacerdoti, Sagalowicz, Slocum, 1978</marker>
<rawString>Hendrix, Gary G., Earl D. Sacerdoti, Daniel Sagalowicz, and Jonathan Slocum, &amp;quot;Developing a Natural Language Interface to Complex Data,&amp;quot; ACM Transactions on Database Systems, 3, 2, (1978), 105-147.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stan C Kwasny</author>
<author>Norman K Sondheimer</author>
</authors>
<title>Ungrammaticality and Extragrammaticality in Natural Language Understanding Systems,&amp;quot;</title>
<date>1979</date>
<booktitle>in Proceedings of the 17th Annual Meeting of the Association for Computational Linguistics,</booktitle>
<location>San Diego, Auoust,</location>
<contexts>
<context position="725" citStr="Kwasny and Sondheimer (1979)" startWordPosition="107" endWordPosition="110">Associates, Inc. The unforgiving nature of natural language components when someone uses an unexpected input has recently been a concern of several projects. For instance, Carbonell (1979) discusses inferring the meaning of new words. Hendrix, et.al. (1978) describe a system that provides a means for naive users to define personalized paraphrases and that lists the items expected next at a point where the parser blocks. Weischedel, et.al. (1978) show how to relax both syntactic and semantic constraints such that some classes of ungrammatical or semantically inappropriate input are understood. Kwasny and Sondheimer (1979) present techniques for understanding several classes of syntactically ill-formed input. Codd, et.al. (1978) and Lebowitz (1979) present alternatives to top-down, left-to-right parsers as a means of dealing with some of these problems. This paper presents heuristics for responding to inputs that cannot be parsed even using the techniques referenced in the last paragraph for relaxing syntactic and semantic constraints. The paper concentrates on the results of an experiment testing our heuristics. We assume only that the parser is written in the ATN formalism. In this method, the parser writer m</context>
</contexts>
<marker>Kwasny, Sondheimer, 1979</marker>
<rawString>Kwasny, Stan C. and Norman K. Sondheimer, &amp;quot;Ungrammaticality and Extragrammaticality in Natural Language Understanding Systems,&amp;quot; in Proceedings of the 17th Annual Meeting of the Association for Computational Linguistics, San Diego, Auoust, 1979, 19-23.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael Lebowitz</author>
</authors>
<title>Reading with a Purpose,&amp;quot;</title>
<date>1979</date>
<booktitle>in Proceedings of the 17th Annual Meeting of the Association for Computational Linguistics,</booktitle>
<pages>59--63</pages>
<location>San Diego,</location>
<contexts>
<context position="853" citStr="Lebowitz (1979)" startWordPosition="125" endWordPosition="126">everal projects. For instance, Carbonell (1979) discusses inferring the meaning of new words. Hendrix, et.al. (1978) describe a system that provides a means for naive users to define personalized paraphrases and that lists the items expected next at a point where the parser blocks. Weischedel, et.al. (1978) show how to relax both syntactic and semantic constraints such that some classes of ungrammatical or semantically inappropriate input are understood. Kwasny and Sondheimer (1979) present techniques for understanding several classes of syntactically ill-formed input. Codd, et.al. (1978) and Lebowitz (1979) present alternatives to top-down, left-to-right parsers as a means of dealing with some of these problems. This paper presents heuristics for responding to inputs that cannot be parsed even using the techniques referenced in the last paragraph for relaxing syntactic and semantic constraints. The paper concentrates on the results of an experiment testing our heuristics. We assume only that the parser is written in the ATN formalism. In this method, the parser writer must assign a sequence of condition-action pairs for each state of the ATN. If no parse can be found, the condition-action pairs </context>
</contexts>
<marker>Lebowitz, 1979</marker>
<rawString>Lebowitz, Michael, &amp;quot;Reading with a Purpose,&amp;quot; in Proceedings of the 17th Annual Meeting of the Association for Computational Linguistics, San Diego, August, 1979, 59-63.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ralph M Weischedel</author>
<author>Wilfried M Voge</author>
<author>Mark James</author>
</authors>
<title>An Artificial Intelligence Approach to Language Instruction,&amp;quot;</title>
<date>1978</date>
<journal>Artificial Intelligence,</journal>
<volume>10</volume>
<pages>225--240</pages>
<marker>Weischedel, Voge, James, 1978</marker>
<rawString>Weischedel, Ralph M., Wilfried M. Voge, and Mark James, &amp;quot;An Artificial Intelligence Approach to Language Instruction,&amp;quot; Artificial Intelligence, 10, (1978), 225-240.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>