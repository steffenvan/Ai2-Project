<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000002">
<sectionHeader confidence="0.6030605" genericHeader="abstract">
INCORPORATING INHERITANCE AND FEATURE STRUCTURES
INTO A LOGIC GRAMMAR FORMALISM
</sectionHeader>
<address confidence="0.705854">
Harry H. Porter, III
Oregon Graduate Center
19600 N.W. Von Neumann Dr.
Beaverton Oregon 97006-1999
</address>
<email confidence="0.574132">
ABSTRACT
</email>
<bodyText confidence="0.999608818181818">
Hassan Ait-Kaci introduced the 0-term,
an informational structure resembling feature-
based functional structures but which also
includes taxonomic inheritance (Ait-Kaci, 1984).
We describe I/J-terms and how they have been
incorporated into the Logic Grammar formal-
ism. The result, which we call Inheritance
Grammar, is a proper superset of DCG and
includes many features of PATR-II. Its taxo-
nomic reasoning facilitates semantic type-class
reasoning during grammatical analysis.
</bodyText>
<sectionHeader confidence="0.997866" genericHeader="introduction">
INTRODUCTION
</sectionHeader>
<bodyText confidence="0.999806684210526">
The Inheritance Grammar (IG) formalism
is an extension of Hassan Ait-Kaci&apos;s work on •ti)-
terms (Ait-Kaci, 1984; Ait-Kaci and Nasr,
1986). A 0-term is an informational structure
similar to both the feature structure of PATR-H
(Shieber, 1985; Shieber, et al, 1986) and the
first-order term of logic. 0-terms are ordered by
subsumption and form a lattice in which
unification of tk-terms amounts to greatest lower
bounds (GLB, ). In Inheritance Grammar, t&apos;-
terms are incorporated into a computational
paradigm similar to the Definite Clause Gram-
mar (DCG) formalism (Pereira and Warren,
1980). Unlike feature structures and first-order
terms, the atomic symbols of 0-terms are
ordered in an IS-A taxonomy, a distinction that
is useful in performing semantic type-class rea-
soning during grammatical analysis. We begin
by discussing this ordering.
</bodyText>
<sectionHeader confidence="0.9985565" genericHeader="method">
THE IS-A RELATION AMONG
FEATURE VALUES
</sectionHeader>
<bodyText confidence="0.980047585365854">
Like other grammar formalisms using
feature-based functional structures, we will
assume a fixed set of symbols called the signa-
ture. These symbols are atomic values used to
represent lexical, syntactic and semantic
categories and other feature values. In many
formalisms (e.g. DCG and PATR-H), equality is
the only operation for symbols; in IG symbols
are related in an IS-A hierarchy. These rela-
tionships are indicated in the grammar using
statements such asl:
boy &lt; masculineObject.
girl &lt; feminineObject.
man &lt; masculineObject.
woman &lt; feminineObject.
{boy, girl} &lt; child.
{man, woman} &lt; adult.
{child, adult} &lt; human.
The symbol &lt; can be read as &amp;quot;is a&amp;quot; and the
notation {a1, • • • ,a„}&lt;b is an abbreviation for
ai&lt;b, • • • ,an&lt;b. The grammar writer need not
distinguish between instances and classes, or
between syntactic and semantic categories when
the hierarchy is specified. Such distinctions are
only determined by how the symbols are used in
the grammar. Note that this example ordering
exhibits multiple inheritance: feminine0b-
jects are not necessarily humans and
humans are not necessarily feminine0b-
jects, yet a girl is both a human and a
feminineObject.
Computation of LUB (U) and GLB )
in arbitrary partial orders is problematic. In
IG, the grammar writer specifies an arbitrary
ordering which the rule execution system
automatically embeds in a lattice by the addi-
tion of newly created symbols (Maier, 1980).
Symbols may be thought of as standing
for conceptual sets or semantic types and the
IS-A relationship can be thought of as set
Symbols appearing in the grammar but not in the
</bodyText>
<page confidence="0.994378">
228
</page>
<bodyText confidence="0.999990916666667">
inclusion. Finding the GLB—i.e. unification of
symbols—then amounts to set intersection. For
the partial order specified above, two new sym-
bols are automatically added, representing
semantic categories implied by the IS-A state-
ments, i.e. human females and human males.
The first new category (human females) can be
thought of as the intersection of human and
feminineObject or as the union of girl and
woman2, and similarly for human males. The
signature resulting from the IS-A statements is
shown in Figure 1.
</bodyText>
<sectionHeader confidence="0.830677" genericHeader="method">
tP-TERMS AS FEATURE STRUCTURES
</sectionHeader>
<bodyText confidence="0.998339825">
Much work in computational linguistics is
focussed around the application of unification to
an informational structure that maps attribute
names (also called feature names, slot names, or
labels) to values (Kay, 1984a; Kay, 1984b;
Shieber, 1985; Shieber, et al, 1986). A value is
either atomic or (recursively) another such map-
ping. These mappings are called by various
names: feature structures, functional structures,
f-structures, and feature matrices. The feature
structures of PATR-II are most easily under-
stood by viewing them as directed, acyclic
graphs (DAGs) whose arcs are annotated with
feature labels and whose leaves are annotated
with atomic feature values (Shieber, 1985).
IS-A statements are taken to be unrelated.
20r anything in between. One is the most liberal in-
terpretation, the other the most conservative. The signa-
ture could be extended by adding both classes, and any
number in between.
IGs use ii)-terms, an informational struc-
ture that is best described as a rooted, possibly
cyclic, directed graph. Each node (both leaf
and interior) is annotated with a symbol from
the signature. Each arc of the graph is labelled
with a feature label (an attribute). The set of
feature labels is unordered and is distinct from
the signature. The formal definition of 1/)-terms,
given in set theoretic terms, is complicated in
several ways beyond the scope of this
presentation—see the definition of well-formed
types in (Ait-Kaci, 1984). We give several
examples to give the flavor of lb-terms.
Feature structures are often represented
using a bracketed matrix notation, in addition
to the DAG notation. ii.)-terms, on the other
hand, are represented using a textual notation
similar to that of first-order terms. The syntax
of the textual representation is given by the fol-
lowing extended BNF grammar3.
</bodyText>
<equation confidence="0.6035315">
term symbol [ featureList I
] featureList
featureList ::= ( feature , feature ,
, feature )
</equation>
<bodyText confidence="0.979728818181818">
feature label term
label variable [ : term ]
Our first example contains the symbols
np , singular, and third. The label of
3 The vertical bar separates alternate constituents,
brackets enclose optional constituents, and ellipses are used
(loosely) to indicate repetition. The characters ( ) , and
are terminals.
feminineObject human masculineObject
adult humanFemale humanMale child
woman man girl boy
</bodyText>
<figureCaption confidence="0.998621">
Figure 1. A signature.
</figureCaption>
<page confidence="0.987807">
229
</page>
<bodyText confidence="0.934993322033898">
the root node, np, is called the head symbol.
This 1/)-term contains two features, labelled by
number and person.
np ( number 4› singular,
person 4› third)
The next example includes a subterm at
agreement+:
(cat 4&gt; np,
agreement 4› (number 4&gt; singular,
person 4› third))
In this ii,-term the head symbol is missing, as is
the head symbol of the subterm. When a sym-
bol is missing, the most general symbol of the
signature ( T ) is implied.
In traditional first-order terms, a variable
serves two purposes. First, as a wild card, it
serves as a place holder which will match any
term. Second, as a tag, one variable can con-
strain several positions in the term to be filled
by the same structure. In 7,G-terms, the wild
card function is filled by the maximal symbol of
the signature ( T ) which will match any V.)-term
during unification. Variables are used
exclusively for the tagging function to indicate
0-term coreference. By convention, variables
always begin with an uppercase letter while
symbols and labels begin with lowercase letters
and digits.
In the following 0-term, representing The
man wants to dance with Mary, X is a variable
used to identify the subject of wants with the
subject of dance.
sentence (
subject =&gt; X: man,
predicate 4&gt; wants,
verbComp clause
subject .0. X,
predicate Ll&gt; dance,
object mary ))
If a variable X appears in a term tagging
a subterm t, then all subterms tagged by other
occurrences of X must be consistent with (i.e.
unify with) t4. If a variable appears without a
subterm following it, the term consisting of sim-
ply the top symbol ( T ) is assumed. The con-
straint implied by variable coreference is not
just equality of structure but equality of refer-
ence. Further unifications that add information
to one sub-structure will necessarily add it to
the other. Thus, in this example, X constrains
the terms appearing at the paths subject
and verbCompsubject to be the same
term.
In the 0-term representation of the sen-
tence The man with the toupee sneezed, shown
below, the np filling the subject role, X, has
two attributes. One is a qualifier filled by
a relativeClause whose subject is X
itself.
</bodyText>
<construct confidence="0.345269">
sentence (
subject =&gt;, X: np (
head -4› man,
qualifier --.4› relativeClause
subject..=&gt; X,
predicate 4› wear,
object =&gt; toupee)),
predicate =.&gt; sneezed)
</construct>
<bodyText confidence="0.997105">
As the graphical representation (in Figure 2) of
this term clearly shows, this -term is cyclic.
</bodyText>
<sectionHeader confidence="0.969914" genericHeader="method">
UNIFICATION OF 1//-TERMS
</sectionHeader>
<bodyText confidence="0.998567">
The unification of two ti)-terms is similar
to the unification of two feature structures in
PATR-II or two first-order terms in logic.
Unification of two terms t1 and t2 proceeds as
follows. First, the head symbols of t1 and t2&apos;are
unified. That is, the GLB of the two symbols in
the signature lattice becomes the head symbol
of the result. Second, the subterms of t1 and t2
are unified. When t1 and t2 both contain the
feature f, the corresponding subterms are unified
and added as feature f of the result. If one
term, say t1, contains feature f and the other
term does not, then the result will contain
feature f with the value from t1. This is the
same result that would obtain if t2 contained
feature f with value T . Finally, the subterm
Normally, the subterm at X will be written follow-
ing the first occurrence of X and all other occurrences of X
will not include subterms.
</bodyText>
<page confidence="0.971282">
230
</page>
<bodyText confidence="0.999823333333333">
coreference constraints implied by the variables
in t1 and t2 are respected. That is, the result is
the least constrained 0-term such that if two
paths (addresses) in t1 (or t2) are tagged by the
same variable (i.e. they eorefer) then they will
corefer in the result.
</bodyText>
<equation confidence="0.955374909090909">
For example, when the I/I-term
(agreement4.&gt; X:(number4&gt;singular),
subject • (agreement,X))
is unified with
(subject,
(agreement
(personthird) ) )
the result is
(agreement X: (numbersingular,
personthird) ,
subject (agreementX) )
</equation>
<sectionHeader confidence="0.966241" genericHeader="method">
INHERITANCE GRAMMARS
</sectionHeader>
<bodyText confidence="0.9941828">
An IG consists of several IS-A statements
and several grammar rules. A grammar rule is
a definite clause which uses t,G-terms in place of
the first-order literals used in first-order logic
programmings. Much of the notation of Prolog
and DCGs is used. In particular, the : - sym-
bol separates a rule head from the 0-terms
comprising the rule body. Analogously to Pro-
log, list notation (using [, I, and ]) can be
used as a shorthand for ti,-terms representing
lists and containing head and tail features.
When the --&gt; symbol is used instead of :
the rule is treated as a context-free grammar
rule and the interpreter automatically appends
two additional arguments (start and end) to
facilitate parsing. The final syntactic sugar
allows feature labels to be elided; sequentially
numbered numeric labels are automatically sup-
plied.
Our first simple Inheritance Grammar
consists of the rules:
sent --&gt; noun (Num) , verb (Num) .
noun (plural) --&gt; [cats] .
verb (plural) --&gt; [meow] .
The sentence to be parsed is supplied as a goal
</bodyText>
<figure confidence="0.610697">
6 This is to be contrasted with LOGIN, in which tb-
-stsentence)
</figure>
<figureCaption confidence="0.98904">
Figure 2. Graphical representation of a 0-term.
</figureCaption>
<figure confidence="0.99893775">
subject
predicate
subject
predicate object
sneezed
head qualifier
relativeClause
toupee
</figure>
<page confidence="0.993894">
231
</page>
<bodyText confidence="0.84981544">
clause, as in:
: - sent ( [cats , meow] , [] ) .
The interpreter first translates these clauses
into the following equivalent IG clauses,
expanding away the notational sugar, before
execution begins.
sent (startP1, end.P3) : -
noun (1Num, start+Pl, end+P 2) ,
verb (1+Num, startP 2 , endP3) .
noun (1.plural ,
startlist (headcats, ,
endL) .
verb (1p1ura1 ,
start list (headmeow, tail+L) ,
end+L) .
: - sent (startlist (
headcats,
(
headmeow,
) ,
endnil) .
As this example indicates, every DCG is an
Inheritance Grammar. However, since the argu-
ments may be arbitrary /P.-terms, IG can also
accomodate feature structure manipulation.
</bodyText>
<sectionHeader confidence="0.953718" genericHeader="method">
TYPE-CLASS REASONING IN PARSING
</sectionHeader>
<bodyText confidence="0.984287285714285">
Several logic-based grammars have used
semantic categorization of verb arguments to
disambiguate word senses and fill case slots (e.g.
Dahl, 1979; Dahl, 1981; McCord, 1980). The
primary motivation for using /P.-terms for gram-
matical analysis is to facilitate such semantic
type-class reasoning during the parsing stage.
As an example, the DCG presented in
(McCord, 1980) uses unification to do taxonomic
reasoning. Two types unify if one is a subtype
of the other; the result is the most specific type.
For example, if the first-order term smith:_
representing an untyped individual&apos;, is unified
with the type expression X :person: student,
representing the student subtype of person, the
result is smith:person:student.
terms replace first-order terms rather than predications.
Here the colon is used as a right-associative infix
operator meaning subtype.
While . this grammar achieves extensive
coverage, we perceive two shortcomings to the
approach. (1) The semantic hierarchy is some-
what inflexible because it is distributed
throughout the lexicon, rather than being main-
tained separately. (2) Multiple Inheritance is
not accommodated (although see McCord,
1985). In IG, the 0-term student can act as a
typed variable and unifies with the 1/)-term
smith (yielding smith) assuming the presence
of IS-A statements such as:
student &lt; person.
{smith. Jones, brown} &lt; student.
The taxonomy is specified separately—even with
the potential of dynamic modification—and mul-
tiple inheritance is accommodated naturally.
</bodyText>
<sectionHeader confidence="0.999009" genericHeader="method">
OTHER GRAMMATICAL APPLICATIONS
OF TAXONOMIC REASONING
</sectionHeader>
<bodyText confidence="0.96879905">
The taxonomic reasoning mechanism of IG
has applications in lexical and syntactic
categorization as well as in semantic type-class
reasoning. As an illustration which uses /l&apos;-term
predications, consider the problem of writing a
grammar that accepts a prepositional phrase or
a relative clause after a noun phrase but only
accepts a prepositional phrase after the verb
phrase. So The flower under the tree wilted, The
flower that was under the tree wilted, and John
ate under the tree should be accepted but not
*John ate that was under the tree. The taxon-
omy specifies that prepositionalPhrase
and relativeClause are npModifiers but
only a prepositionalPhrase is a vpMo-
di fier. The following highly abbreviated IG
shows one simple solution:
{prepositionalPhrase,
relativeClause} &lt; npModifier.
prepositionalPhrase &lt; vpModifier.
</bodyText>
<figure confidence="0.720758333333333">
sent ( ) --&gt;
vpModifier
np ( ...) --&gt; np ( ) ,
npModifier
np ( ...) --&gt;
vp(-) --&gt; • • •
prepositionalPhrase(..
232
relativeClause (... ) --&gt; Janeiro.
</figure>
<sectionHeader confidence="0.981449" genericHeader="conclusions">
IMPLEMENTATION
</sectionHeader>
<bodyText confidence="0.991384384615385">
We have implemented an IG development
environment in Smalltalk on the Tektronix
4406. The IS-A statements are handled by an
ordering package which dynamically performs
the lattice extension and which allows interac-
tive display of the ordering. Many of the tech-
niques used in standard depth-first Prolog exe-
cution have been carried over to IG execution.
To speed grammar execution, our system
precompiles the grammar rules. To speed gram-
mar development, incremental compilation
allows individual rules to be compiled when
modified. We are currently developing a large
grammar using this environment.
As in Prolog, top-down evaluation is not
complete. Earley Deduction (Pereira and War-
ren, 1980; Porter, 1986), a sound and complete
evaluation strategy for Logic programs, frees
the writer of DCGs from the worry of infinite
left-recursion. Earley Deduction is essentially a
generalized form of chart parsing (Kaplan, 1973;
Winograd, 1983), applicable to DCGs. We are
investigating the application of alternative exe-
cution strategies, such as Earley Deduction and
Extension Tables (Dietrich and Warren, 1986)
to the execution of IGs.
</bodyText>
<sectionHeader confidence="0.998458" genericHeader="acknowledgments">
ACKNOWLEDGEMENTS
</sectionHeader>
<reference confidence="0.46479725">
Valuable interactions with the following people
are gratefully acknowledged: Hassan Ait-Kaci,
David Maier, David S. Warren, Fernando
Pereira, and Lauri Karttunen.
</reference>
<sectionHeader confidence="0.987441" genericHeader="references">
REFERENCES
</sectionHeader>
<reference confidence="0.999627379310345">
Ait-Kaci, Hassan. 1984. A Lattice
Theoretic Approach to Computation Based on a
Calculus of Partially Ordered Type Structures,
Ph.D. Dissertation, University of Pennsylvannia,
Philadelphia, PA.
Ait-Kaci, Hassan and Nasr, Roger. 1986.
LOGIN: A Logic Programming Language with
Built-in Inheritance, Journal of Logic Program-
ming, 3(3):185-216.
Dahl, Veronica. 1979. Logical Design of
Deductive NL Consultable Data Bases, Proc.
5th Intl. Conf. on Very Large Data Bases, Rio de
Dahl, Veronica. 1981. Translating Span-
ish into Logic through Logic, Am. Journal of
Comp. Linguistics, 7(3):149-164.
Dietrich, Susan Wagner and Warren,
David S. 1986. Extension Tables: Memo Rela-
tions in Logic Programming, Technical Report
86/18, C.S. Dept., SUNY, Stony Brook, New
York.
Kaplan, Ronald. 1973. A General Syn-
tactic Processor, in: Randall Rustin, Ed.,
Natural Language Processing, Algorithmics
Press, New York, NY.
Kay, Martin. 1984a. Functional
Unification Grammar: A Formalism for Machine
Translation, Proc. 22nd Ann. Meeting of the
Assoc. for Computational Linguistics (COLING),
Stanford University, Palo Alto, CA.
Kay, Martin. 1984b. Unification in
Grammar, Natural Lang. Understanding and
Logic Programming Conf. Proceedings, MISA-
INRIA, Rennes, France.
Maier, David. 1980. DAGs as Lattices:
Extended Abstract, Unpublished manuscript.
McCord, Michael C. 1980. Using Slots
and Modifiers in Logic Grammars for Natural
Language, Artificial Intelligence, 18(3):327-368.
McCord, Michael C. 1985. Modular Logic
Grammars, Proc. of the 23rd ACL Conference,
Chicago, IL.
Pereira, F.C.N. and Warren, D.H.D. 1980.
Definite Clause Grammars for Language
Analysis - A Survey of the Formalism and a
Comparison with Augmented Transition Net-
works, Artificial Intelligence, 13:231-278.
Pereira, F.C.N. and Warren, D.H.D. 1983.
Parsing as Deduction, 21st Annual Meeting of
the Assoc. for Computational Linguistics, Bos-
ton, MA.
Porter, Harry H. 1986. Earley Deduction,
Technical Report CS/E-86-002, Oregon Gradu-
ate Center, Beaverton, OR.
Shieber, Stuart M. 1985. An Introduction
to Unification-Based Approaches to Grammar,
Tutorial Session Notes, 23rd Annual Meeting of
the Assoc. for Computational Linguistics, Chi-
cago, IL.
</reference>
<page confidence="0.981815">
233
</page>
<reference confidence="0.999266">
Shieber, S.M., Pereira, F.C.N., Karttunen,
L. and Kay, M. 1986. A Compilation of Papers
on Unification-Based Grammar Formalisms,
Parts I and II, Center for the Study of Language
and Information, Stanford.
Winograd, Terry. 1983. Language as a
Cognitive Process, Vol. 1: Syntax, Addison-
Wesley, Reading, MA.
</reference>
<page confidence="0.998379">
234
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.956814">
<title confidence="0.9923835">INCORPORATING INHERITANCE AND FEATURE STRUCTURES INTO A LOGIC GRAMMAR FORMALISM</title>
<author confidence="0.999025">Harry H Porter</author>
<affiliation confidence="0.999833">Oregon Graduate Center</affiliation>
<address confidence="0.9908885">19600 N.W. Von Neumann Dr. Beaverton Oregon 97006-1999</address>
<abstract confidence="0.999071916666667">Hassan Ait-Kaci introduced the 0-term, an informational structure resembling featurebased functional structures but which also includes taxonomic inheritance (Ait-Kaci, 1984). We describe I/J-terms and how they have been incorporated into the Logic Grammar formalism. The result, which we call Inheritance Grammar, is a proper superset of DCG and includes many features of PATR-II. Its taxonomic reasoning facilitates semantic type-class reasoning during grammatical analysis.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="false">
<authors>
<author>S Warren</author>
<author>Fernando Pereira</author>
<author>Lauri Karttunen</author>
</authors>
<title>Valuable interactions with the following people are gratefully acknowledged: Hassan Ait-Kaci,</title>
<location>David Maier, David</location>
<marker>Warren, Pereira, Karttunen, </marker>
<rawString>Valuable interactions with the following people are gratefully acknowledged: Hassan Ait-Kaci, David Maier, David S. Warren, Fernando Pereira, and Lauri Karttunen.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hassan Ait-Kaci</author>
</authors>
<title>A Lattice Theoretic Approach to Computation Based on a Calculus of Partially Ordered Type Structures,</title>
<date>1984</date>
<institution>Ph.D. Dissertation, University of Pennsylvannia,</institution>
<location>Philadelphia, PA.</location>
<contexts>
<context position="789" citStr="Ait-Kaci, 1984" startWordPosition="108" endWordPosition="109">999 ABSTRACT Hassan Ait-Kaci introduced the 0-term, an informational structure resembling featurebased functional structures but which also includes taxonomic inheritance (Ait-Kaci, 1984). We describe I/J-terms and how they have been incorporated into the Logic Grammar formalism. The result, which we call Inheritance Grammar, is a proper superset of DCG and includes many features of PATR-II. Its taxonomic reasoning facilitates semantic type-class reasoning during grammatical analysis. INTRODUCTION The Inheritance Grammar (IG) formalism is an extension of Hassan Ait-Kaci&apos;s work on •ti)- terms (Ait-Kaci, 1984; Ait-Kaci and Nasr, 1986). A 0-term is an informational structure similar to both the feature structure of PATR-H (Shieber, 1985; Shieber, et al, 1986) and the first-order term of logic. 0-terms are ordered by subsumption and form a lattice in which unification of tk-terms amounts to greatest lower bounds (GLB, ). In Inheritance Grammar, t&apos;- terms are incorporated into a computational paradigm similar to the Definite Clause Grammar (DCG) formalism (Pereira and Warren, 1980). Unlike feature structures and first-order terms, the atomic symbols of 0-terms are ordered in an IS-A taxonomy, a disti</context>
<context position="5158" citStr="Ait-Kaci, 1984" startWordPosition="801" endWordPosition="802">ignature could be extended by adding both classes, and any number in between. IGs use ii)-terms, an informational structure that is best described as a rooted, possibly cyclic, directed graph. Each node (both leaf and interior) is annotated with a symbol from the signature. Each arc of the graph is labelled with a feature label (an attribute). The set of feature labels is unordered and is distinct from the signature. The formal definition of 1/)-terms, given in set theoretic terms, is complicated in several ways beyond the scope of this presentation—see the definition of well-formed types in (Ait-Kaci, 1984). We give several examples to give the flavor of lb-terms. Feature structures are often represented using a bracketed matrix notation, in addition to the DAG notation. ii.)-terms, on the other hand, are represented using a textual notation similar to that of first-order terms. The syntax of the textual representation is given by the following extended BNF grammar3. term symbol [ featureList I ] featureList featureList ::= ( feature , feature , , feature ) feature label term label variable [ : term ] Our first example contains the symbols np , singular, and third. The label of 3 The vertical ba</context>
</contexts>
<marker>Ait-Kaci, 1984</marker>
<rawString>Ait-Kaci, Hassan. 1984. A Lattice Theoretic Approach to Computation Based on a Calculus of Partially Ordered Type Structures, Ph.D. Dissertation, University of Pennsylvannia, Philadelphia, PA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hassan Ait-Kaci</author>
<author>Roger Nasr</author>
</authors>
<title>LOGIN: A Logic Programming Language with Built-in Inheritance,</title>
<date>1986</date>
<journal>Journal of Logic Programming,</journal>
<pages>3--3</pages>
<contexts>
<context position="815" citStr="Ait-Kaci and Nasr, 1986" startWordPosition="110" endWordPosition="113">san Ait-Kaci introduced the 0-term, an informational structure resembling featurebased functional structures but which also includes taxonomic inheritance (Ait-Kaci, 1984). We describe I/J-terms and how they have been incorporated into the Logic Grammar formalism. The result, which we call Inheritance Grammar, is a proper superset of DCG and includes many features of PATR-II. Its taxonomic reasoning facilitates semantic type-class reasoning during grammatical analysis. INTRODUCTION The Inheritance Grammar (IG) formalism is an extension of Hassan Ait-Kaci&apos;s work on •ti)- terms (Ait-Kaci, 1984; Ait-Kaci and Nasr, 1986). A 0-term is an informational structure similar to both the feature structure of PATR-H (Shieber, 1985; Shieber, et al, 1986) and the first-order term of logic. 0-terms are ordered by subsumption and form a lattice in which unification of tk-terms amounts to greatest lower bounds (GLB, ). In Inheritance Grammar, t&apos;- terms are incorporated into a computational paradigm similar to the Definite Clause Grammar (DCG) formalism (Pereira and Warren, 1980). Unlike feature structures and first-order terms, the atomic symbols of 0-terms are ordered in an IS-A taxonomy, a distinction that is useful in p</context>
</contexts>
<marker>Ait-Kaci, Nasr, 1986</marker>
<rawString>Ait-Kaci, Hassan and Nasr, Roger. 1986. LOGIN: A Logic Programming Language with Built-in Inheritance, Journal of Logic Programming, 3(3):185-216.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Veronica Dahl</author>
</authors>
<date>1979</date>
<booktitle>Logical Design of Deductive NL Consultable Data Bases, Proc. 5th Intl. Conf. on Very Large Data Bases, Rio de</booktitle>
<contexts>
<context position="11901" citStr="Dahl, 1979" startWordPosition="1937" endWordPosition="1938"> sent (startP1, end.P3) : - noun (1Num, start+Pl, end+P 2) , verb (1+Num, startP 2 , endP3) . noun (1.plural , startlist (headcats, , endL) . verb (1p1ura1 , start list (headmeow, tail+L) , end+L) . : - sent (startlist ( headcats, ( headmeow, ) , endnil) . As this example indicates, every DCG is an Inheritance Grammar. However, since the arguments may be arbitrary /P.-terms, IG can also accomodate feature structure manipulation. TYPE-CLASS REASONING IN PARSING Several logic-based grammars have used semantic categorization of verb arguments to disambiguate word senses and fill case slots (e.g. Dahl, 1979; Dahl, 1981; McCord, 1980). The primary motivation for using /P.-terms for grammatical analysis is to facilitate such semantic type-class reasoning during the parsing stage. As an example, the DCG presented in (McCord, 1980) uses unification to do taxonomic reasoning. Two types unify if one is a subtype of the other; the result is the most specific type. For example, if the first-order term smith:_ representing an untyped individual&apos;, is unified with the type expression X :person: student, representing the student subtype of person, the result is smith:person:student. terms replace first-orde</context>
</contexts>
<marker>Dahl, 1979</marker>
<rawString>Dahl, Veronica. 1979. Logical Design of Deductive NL Consultable Data Bases, Proc. 5th Intl. Conf. on Very Large Data Bases, Rio de</rawString>
</citation>
<citation valid="true">
<authors>
<author>Veronica Dahl</author>
</authors>
<title>Translating Spanish into Logic through Logic,</title>
<date>1981</date>
<journal>Am. Journal of Comp. Linguistics,</journal>
<pages>7--3</pages>
<contexts>
<context position="11913" citStr="Dahl, 1981" startWordPosition="1939" endWordPosition="1940">P1, end.P3) : - noun (1Num, start+Pl, end+P 2) , verb (1+Num, startP 2 , endP3) . noun (1.plural , startlist (headcats, , endL) . verb (1p1ura1 , start list (headmeow, tail+L) , end+L) . : - sent (startlist ( headcats, ( headmeow, ) , endnil) . As this example indicates, every DCG is an Inheritance Grammar. However, since the arguments may be arbitrary /P.-terms, IG can also accomodate feature structure manipulation. TYPE-CLASS REASONING IN PARSING Several logic-based grammars have used semantic categorization of verb arguments to disambiguate word senses and fill case slots (e.g. Dahl, 1979; Dahl, 1981; McCord, 1980). The primary motivation for using /P.-terms for grammatical analysis is to facilitate such semantic type-class reasoning during the parsing stage. As an example, the DCG presented in (McCord, 1980) uses unification to do taxonomic reasoning. Two types unify if one is a subtype of the other; the result is the most specific type. For example, if the first-order term smith:_ representing an untyped individual&apos;, is unified with the type expression X :person: student, representing the student subtype of person, the result is smith:person:student. terms replace first-order terms rath</context>
</contexts>
<marker>Dahl, 1981</marker>
<rawString>Dahl, Veronica. 1981. Translating Spanish into Logic through Logic, Am. Journal of Comp. Linguistics, 7(3):149-164.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Susan Wagner Dietrich</author>
<author>David S Warren</author>
</authors>
<title>Extension Tables: Memo Relations in Logic Programming,</title>
<date>1986</date>
<tech>Technical Report 86/18,</tech>
<location>New York.</location>
<marker>Dietrich, Warren, 1986</marker>
<rawString>Dietrich, Susan Wagner and Warren, David S. 1986. Extension Tables: Memo Relations in Logic Programming, Technical Report 86/18, C.S. Dept., SUNY, Stony Brook, New York.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ronald Kaplan</author>
</authors>
<title>A General Syntactic Processor, in: Randall Rustin, Ed., Natural Language Processing,</title>
<date>1973</date>
<publisher>Algorithmics Press,</publisher>
<location>New York, NY.</location>
<marker>Kaplan, 1973</marker>
<rawString>Kaplan, Ronald. 1973. A General Syntactic Processor, in: Randall Rustin, Ed., Natural Language Processing, Algorithmics Press, New York, NY.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Martin Kay</author>
</authors>
<title>Functional Unification Grammar: A Formalism for Machine Translation,</title>
<date>1984</date>
<booktitle>Proc. 22nd Ann. Meeting of the Assoc. for Computational Linguistics (COLING),</booktitle>
<institution>Stanford University,</institution>
<location>Palo Alto, CA.</location>
<contexts>
<context position="3925" citStr="Kay, 1984" startWordPosition="606" endWordPosition="607">omatically added, representing semantic categories implied by the IS-A statements, i.e. human females and human males. The first new category (human females) can be thought of as the intersection of human and feminineObject or as the union of girl and woman2, and similarly for human males. The signature resulting from the IS-A statements is shown in Figure 1. tP-TERMS AS FEATURE STRUCTURES Much work in computational linguistics is focussed around the application of unification to an informational structure that maps attribute names (also called feature names, slot names, or labels) to values (Kay, 1984a; Kay, 1984b; Shieber, 1985; Shieber, et al, 1986). A value is either atomic or (recursively) another such mapping. These mappings are called by various names: feature structures, functional structures, f-structures, and feature matrices. The feature structures of PATR-II are most easily understood by viewing them as directed, acyclic graphs (DAGs) whose arcs are annotated with feature labels and whose leaves are annotated with atomic feature values (Shieber, 1985). IS-A statements are taken to be unrelated. 20r anything in between. One is the most liberal interpretation, the other the most c</context>
</contexts>
<marker>Kay, 1984</marker>
<rawString>Kay, Martin. 1984a. Functional Unification Grammar: A Formalism for Machine Translation, Proc. 22nd Ann. Meeting of the Assoc. for Computational Linguistics (COLING), Stanford University, Palo Alto, CA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Martin Kay</author>
</authors>
<date>1984</date>
<booktitle>Unification in Grammar, Natural Lang. Understanding and Logic Programming Conf. Proceedings,</booktitle>
<location>MISAINRIA, Rennes, France.</location>
<contexts>
<context position="3925" citStr="Kay, 1984" startWordPosition="606" endWordPosition="607">omatically added, representing semantic categories implied by the IS-A statements, i.e. human females and human males. The first new category (human females) can be thought of as the intersection of human and feminineObject or as the union of girl and woman2, and similarly for human males. The signature resulting from the IS-A statements is shown in Figure 1. tP-TERMS AS FEATURE STRUCTURES Much work in computational linguistics is focussed around the application of unification to an informational structure that maps attribute names (also called feature names, slot names, or labels) to values (Kay, 1984a; Kay, 1984b; Shieber, 1985; Shieber, et al, 1986). A value is either atomic or (recursively) another such mapping. These mappings are called by various names: feature structures, functional structures, f-structures, and feature matrices. The feature structures of PATR-II are most easily understood by viewing them as directed, acyclic graphs (DAGs) whose arcs are annotated with feature labels and whose leaves are annotated with atomic feature values (Shieber, 1985). IS-A statements are taken to be unrelated. 20r anything in between. One is the most liberal interpretation, the other the most c</context>
</contexts>
<marker>Kay, 1984</marker>
<rawString>Kay, Martin. 1984b. Unification in Grammar, Natural Lang. Understanding and Logic Programming Conf. Proceedings, MISAINRIA, Rennes, France.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David Maier</author>
</authors>
<title>DAGs as Lattices: Extended Abstract,</title>
<date>1980</date>
<note>Unpublished manuscript.</note>
<contexts>
<context position="2984" citStr="Maier, 1980" startWordPosition="456" endWordPosition="457">ween syntactic and semantic categories when the hierarchy is specified. Such distinctions are only determined by how the symbols are used in the grammar. Note that this example ordering exhibits multiple inheritance: feminine0bjects are not necessarily humans and humans are not necessarily feminine0bjects, yet a girl is both a human and a feminineObject. Computation of LUB (U) and GLB ) in arbitrary partial orders is problematic. In IG, the grammar writer specifies an arbitrary ordering which the rule execution system automatically embeds in a lattice by the addition of newly created symbols (Maier, 1980). Symbols may be thought of as standing for conceptual sets or semantic types and the IS-A relationship can be thought of as set Symbols appearing in the grammar but not in the 228 inclusion. Finding the GLB—i.e. unification of symbols—then amounts to set intersection. For the partial order specified above, two new symbols are automatically added, representing semantic categories implied by the IS-A statements, i.e. human females and human males. The first new category (human females) can be thought of as the intersection of human and feminineObject or as the union of girl and woman2, and simi</context>
</contexts>
<marker>Maier, 1980</marker>
<rawString>Maier, David. 1980. DAGs as Lattices: Extended Abstract, Unpublished manuscript.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael C McCord</author>
</authors>
<title>Using Slots and Modifiers in Logic Grammars for Natural Language,</title>
<date>1980</date>
<journal>Artificial Intelligence,</journal>
<pages>18--3</pages>
<contexts>
<context position="11928" citStr="McCord, 1980" startWordPosition="1941" endWordPosition="1942">: - noun (1Num, start+Pl, end+P 2) , verb (1+Num, startP 2 , endP3) . noun (1.plural , startlist (headcats, , endL) . verb (1p1ura1 , start list (headmeow, tail+L) , end+L) . : - sent (startlist ( headcats, ( headmeow, ) , endnil) . As this example indicates, every DCG is an Inheritance Grammar. However, since the arguments may be arbitrary /P.-terms, IG can also accomodate feature structure manipulation. TYPE-CLASS REASONING IN PARSING Several logic-based grammars have used semantic categorization of verb arguments to disambiguate word senses and fill case slots (e.g. Dahl, 1979; Dahl, 1981; McCord, 1980). The primary motivation for using /P.-terms for grammatical analysis is to facilitate such semantic type-class reasoning during the parsing stage. As an example, the DCG presented in (McCord, 1980) uses unification to do taxonomic reasoning. Two types unify if one is a subtype of the other; the result is the most specific type. For example, if the first-order term smith:_ representing an untyped individual&apos;, is unified with the type expression X :person: student, representing the student subtype of person, the result is smith:person:student. terms replace first-order terms rather than predica</context>
</contexts>
<marker>McCord, 1980</marker>
<rawString>McCord, Michael C. 1980. Using Slots and Modifiers in Logic Grammars for Natural Language, Artificial Intelligence, 18(3):327-368.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael C McCord</author>
</authors>
<title>Modular Logic Grammars,</title>
<date>1985</date>
<booktitle>Proc. of the 23rd ACL Conference,</booktitle>
<location>Chicago, IL.</location>
<contexts>
<context position="12922" citStr="McCord, 1985" startWordPosition="2089" endWordPosition="2090">senting an untyped individual&apos;, is unified with the type expression X :person: student, representing the student subtype of person, the result is smith:person:student. terms replace first-order terms rather than predications. Here the colon is used as a right-associative infix operator meaning subtype. While . this grammar achieves extensive coverage, we perceive two shortcomings to the approach. (1) The semantic hierarchy is somewhat inflexible because it is distributed throughout the lexicon, rather than being maintained separately. (2) Multiple Inheritance is not accommodated (although see McCord, 1985). In IG, the 0-term student can act as a typed variable and unifies with the 1/)-term smith (yielding smith) assuming the presence of IS-A statements such as: student &lt; person. {smith. Jones, brown} &lt; student. The taxonomy is specified separately—even with the potential of dynamic modification—and multiple inheritance is accommodated naturally. OTHER GRAMMATICAL APPLICATIONS OF TAXONOMIC REASONING The taxonomic reasoning mechanism of IG has applications in lexical and syntactic categorization as well as in semantic type-class reasoning. As an illustration which uses /l&apos;-term predications, cons</context>
</contexts>
<marker>McCord, 1985</marker>
<rawString>McCord, Michael C. 1985. Modular Logic Grammars, Proc. of the 23rd ACL Conference, Chicago, IL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F C N Pereira</author>
<author>D H D Warren</author>
</authors>
<title>Definite Clause Grammars for Language Analysis - A Survey of the Formalism and a Comparison with Augmented Transition Networks,</title>
<date>1980</date>
<journal>Artificial Intelligence,</journal>
<pages>13--231</pages>
<contexts>
<context position="1268" citStr="Pereira and Warren, 1980" startWordPosition="181" endWordPosition="184">grammatical analysis. INTRODUCTION The Inheritance Grammar (IG) formalism is an extension of Hassan Ait-Kaci&apos;s work on •ti)- terms (Ait-Kaci, 1984; Ait-Kaci and Nasr, 1986). A 0-term is an informational structure similar to both the feature structure of PATR-H (Shieber, 1985; Shieber, et al, 1986) and the first-order term of logic. 0-terms are ordered by subsumption and form a lattice in which unification of tk-terms amounts to greatest lower bounds (GLB, ). In Inheritance Grammar, t&apos;- terms are incorporated into a computational paradigm similar to the Definite Clause Grammar (DCG) formalism (Pereira and Warren, 1980). Unlike feature structures and first-order terms, the atomic symbols of 0-terms are ordered in an IS-A taxonomy, a distinction that is useful in performing semantic type-class reasoning during grammatical analysis. We begin by discussing this ordering. THE IS-A RELATION AMONG FEATURE VALUES Like other grammar formalisms using feature-based functional structures, we will assume a fixed set of symbols called the signature. These symbols are atomic values used to represent lexical, syntactic and semantic categories and other feature values. In many formalisms (e.g. DCG and PATR-H), equality is t</context>
</contexts>
<marker>Pereira, Warren, 1980</marker>
<rawString>Pereira, F.C.N. and Warren, D.H.D. 1980. Definite Clause Grammars for Language Analysis - A Survey of the Formalism and a Comparison with Augmented Transition Networks, Artificial Intelligence, 13:231-278.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F C N Pereira</author>
<author>D H D Warren</author>
</authors>
<date>1983</date>
<booktitle>Parsing as Deduction, 21st Annual Meeting of the Assoc. for Computational Linguistics,</booktitle>
<location>Boston, MA.</location>
<marker>Pereira, Warren, 1983</marker>
<rawString>Pereira, F.C.N. and Warren, D.H.D. 1983. Parsing as Deduction, 21st Annual Meeting of the Assoc. for Computational Linguistics, Boston, MA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Harry H Porter</author>
</authors>
<title>Earley Deduction,</title>
<date>1986</date>
<tech>Technical Report CS/E-86-002,</tech>
<institution>Oregon Graduate Center,</institution>
<location>Beaverton, OR.</location>
<marker>Porter, 1986</marker>
<rawString>Porter, Harry H. 1986. Earley Deduction, Technical Report CS/E-86-002, Oregon Graduate Center, Beaverton, OR.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stuart M Shieber</author>
</authors>
<title>An Introduction to Unification-Based Approaches to Grammar, Tutorial Session Notes,</title>
<date>1985</date>
<booktitle>23rd Annual Meeting of the Assoc. for Computational Linguistics,</booktitle>
<location>Chicago, IL.</location>
<contexts>
<context position="918" citStr="Shieber, 1985" startWordPosition="128" endWordPosition="129">hich also includes taxonomic inheritance (Ait-Kaci, 1984). We describe I/J-terms and how they have been incorporated into the Logic Grammar formalism. The result, which we call Inheritance Grammar, is a proper superset of DCG and includes many features of PATR-II. Its taxonomic reasoning facilitates semantic type-class reasoning during grammatical analysis. INTRODUCTION The Inheritance Grammar (IG) formalism is an extension of Hassan Ait-Kaci&apos;s work on •ti)- terms (Ait-Kaci, 1984; Ait-Kaci and Nasr, 1986). A 0-term is an informational structure similar to both the feature structure of PATR-H (Shieber, 1985; Shieber, et al, 1986) and the first-order term of logic. 0-terms are ordered by subsumption and form a lattice in which unification of tk-terms amounts to greatest lower bounds (GLB, ). In Inheritance Grammar, t&apos;- terms are incorporated into a computational paradigm similar to the Definite Clause Grammar (DCG) formalism (Pereira and Warren, 1980). Unlike feature structures and first-order terms, the atomic symbols of 0-terms are ordered in an IS-A taxonomy, a distinction that is useful in performing semantic type-class reasoning during grammatical analysis. We begin by discussing this orderi</context>
<context position="3953" citStr="Shieber, 1985" startWordPosition="610" endWordPosition="611">enting semantic categories implied by the IS-A statements, i.e. human females and human males. The first new category (human females) can be thought of as the intersection of human and feminineObject or as the union of girl and woman2, and similarly for human males. The signature resulting from the IS-A statements is shown in Figure 1. tP-TERMS AS FEATURE STRUCTURES Much work in computational linguistics is focussed around the application of unification to an informational structure that maps attribute names (also called feature names, slot names, or labels) to values (Kay, 1984a; Kay, 1984b; Shieber, 1985; Shieber, et al, 1986). A value is either atomic or (recursively) another such mapping. These mappings are called by various names: feature structures, functional structures, f-structures, and feature matrices. The feature structures of PATR-II are most easily understood by viewing them as directed, acyclic graphs (DAGs) whose arcs are annotated with feature labels and whose leaves are annotated with atomic feature values (Shieber, 1985). IS-A statements are taken to be unrelated. 20r anything in between. One is the most liberal interpretation, the other the most conservative. The signature c</context>
</contexts>
<marker>Shieber, 1985</marker>
<rawString>Shieber, Stuart M. 1985. An Introduction to Unification-Based Approaches to Grammar, Tutorial Session Notes, 23rd Annual Meeting of the Assoc. for Computational Linguistics, Chicago, IL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S M Shieber</author>
<author>F C N Pereira</author>
<author>L Karttunen</author>
<author>M Kay</author>
</authors>
<title>A Compilation of Papers on Unification-Based Grammar Formalisms, Parts I and II, Center for the Study of Language and Information,</title>
<date>1986</date>
<location>Stanford.</location>
<contexts>
<context position="941" citStr="Shieber, et al, 1986" startWordPosition="130" endWordPosition="133">des taxonomic inheritance (Ait-Kaci, 1984). We describe I/J-terms and how they have been incorporated into the Logic Grammar formalism. The result, which we call Inheritance Grammar, is a proper superset of DCG and includes many features of PATR-II. Its taxonomic reasoning facilitates semantic type-class reasoning during grammatical analysis. INTRODUCTION The Inheritance Grammar (IG) formalism is an extension of Hassan Ait-Kaci&apos;s work on •ti)- terms (Ait-Kaci, 1984; Ait-Kaci and Nasr, 1986). A 0-term is an informational structure similar to both the feature structure of PATR-H (Shieber, 1985; Shieber, et al, 1986) and the first-order term of logic. 0-terms are ordered by subsumption and form a lattice in which unification of tk-terms amounts to greatest lower bounds (GLB, ). In Inheritance Grammar, t&apos;- terms are incorporated into a computational paradigm similar to the Definite Clause Grammar (DCG) formalism (Pereira and Warren, 1980). Unlike feature structures and first-order terms, the atomic symbols of 0-terms are ordered in an IS-A taxonomy, a distinction that is useful in performing semantic type-class reasoning during grammatical analysis. We begin by discussing this ordering. THE IS-A RELATION A</context>
<context position="3976" citStr="Shieber, et al, 1986" startWordPosition="612" endWordPosition="615"> categories implied by the IS-A statements, i.e. human females and human males. The first new category (human females) can be thought of as the intersection of human and feminineObject or as the union of girl and woman2, and similarly for human males. The signature resulting from the IS-A statements is shown in Figure 1. tP-TERMS AS FEATURE STRUCTURES Much work in computational linguistics is focussed around the application of unification to an informational structure that maps attribute names (also called feature names, slot names, or labels) to values (Kay, 1984a; Kay, 1984b; Shieber, 1985; Shieber, et al, 1986). A value is either atomic or (recursively) another such mapping. These mappings are called by various names: feature structures, functional structures, f-structures, and feature matrices. The feature structures of PATR-II are most easily understood by viewing them as directed, acyclic graphs (DAGs) whose arcs are annotated with feature labels and whose leaves are annotated with atomic feature values (Shieber, 1985). IS-A statements are taken to be unrelated. 20r anything in between. One is the most liberal interpretation, the other the most conservative. The signature could be extended by add</context>
</contexts>
<marker>Shieber, Pereira, Karttunen, Kay, 1986</marker>
<rawString>Shieber, S.M., Pereira, F.C.N., Karttunen, L. and Kay, M. 1986. A Compilation of Papers on Unification-Based Grammar Formalisms, Parts I and II, Center for the Study of Language and Information, Stanford.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Terry Winograd</author>
</authors>
<title>Language as a Cognitive Process,</title>
<date>1983</date>
<volume>1</volume>
<publisher>Syntax, AddisonWesley,</publisher>
<location>Reading, MA.</location>
<marker>Winograd, 1983</marker>
<rawString>Winograd, Terry. 1983. Language as a Cognitive Process, Vol. 1: Syntax, AddisonWesley, Reading, MA.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>