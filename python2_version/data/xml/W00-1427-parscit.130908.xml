<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.002284">
<title confidence="0.954387">
Robust, Applied Morphological Generation
</title>
<author confidence="0.98494">
Guido Minnen John Carroll Darren Pearce
</author>
<affiliation confidence="0.98336">
Cognitive and Computing Sciences
University of Sussex
</affiliation>
<address confidence="0.996781">
Brighton BN1 9QH, UK
</address>
<email confidence="0.999293">
ffirstname.lastnamel@cogs.susx.ac.uk
</email>
<sectionHeader confidence="0.997393" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999889266666667">
In practical natural language generation sys-
tems it is often advantageous to have a separate
component that deals purely with morphologi-
cal processing. We present such a component: a
fast and robust morphological generator for En-
glish based on finite-state techniques that gen-
erates a word form given a specification of the
lemma, part-of-speech, and the type of inflec-
tion required. We describe how this morpholog-
ical generator is used in a prototype system for
automatic simplification of English newspaper
text, and discuss practical morphological and
orthographic issues we have encountered in gen-
eration of unrestricted text within this applica-
tion.
</bodyText>
<sectionHeader confidence="0.995581" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.998894919354839">
Most approaches to natural language generation
(NLG) ignore morphological variation during
word choice, postponing the computation of the
actual word forms to be output to a final stage,
sometimes termed clinearisation&apos;. The advan-
tage of this setup is that the syntactic/lexical
realisation component does not have to consider
all possible word forms corresponding to each
lemma (Shieber et al., 1990). In practice, it is
advantageous to have morphological generation
as a postprocessing component that is separate
from the rest of the NLG system. A benefit
is that since there are no competing claims on
the representation framework from other types
of linguistic and non-linguistic knowledge, the
developer of the morphological generator is free
to express morphological information in a per-
spicuous and elegant manner. A further bene-
fit is that localising morphological knowledge in
a single component facilitates more systematic
and reliable updating. From a software engi-
neering perspective. modularisation is likely to
reduce system development costs and increase
system reliability. As an individual module,
the morphological generator will be more easily
shareable between several different NLG appli-
cations, and integrated into new ones. Finally,
such a generator can be used on its own in other
types of applications that do not contain a stan-
dard NLG syntactic/lexical realisation compo-
nent, such as text simplification (see Section 3).
In this paper we describe a fast and robust
generator for the inflectional morphology of En-
glish that generates a word form given a speci-
fication of a lemma, a part-of-speech (PoS) la-
bel, and an inflectional type. The morphologi-
cal generator was built using data from several
large corpora and machine readable dictionar-
ies. It does not contain an explicit lexicon or
word-list, but instead comprises a set of mor-
phological generalisations together with a list of
exceptions for specific (irregular) word forms.
This organisation into generalisations and ex-
ceptions can save time and effort in system de-
velopment since the addition of new vocabu-
lary that has regular morphology does not re-
quire any changes to the generator. In addition,
the generalisation-exception architecture can be
used to specify----and also override—preferences
in cases where a lemma has more than one pos-
sible surface word form given a particular inflec-
tional type and PoS label.
The generator is packaged up as a Unix &apos;fil-
ter&apos;, making it easy to integrate into applica-
tions. It is based on efficient finite-state tech-
niques, and is implemented using the widely
available Unix Flex utility (a reimplementation
of the AT&amp;T Unix Lex tool) (Levine et al.,
1992). The generator is freely available to the
NLG research community (see Section 5 below).
The paper is structured as follows. Section 2
describes the morphological generator and eval-
</bodyText>
<page confidence="0.996571">
201
</page>
<bodyText confidence="0.998704375">
uates its accuracy. Section 3 outlines how the
generator is put to .use in a prototype system for
automatic simplification of text, and discusses
a number of practical morphological and ortho-
graphic issues that we have encountered. Sec-
tion 4 relates our work to that of others, and we
conclude (Section 5) with directions for future
work.
</bodyText>
<sectionHeader confidence="0.973761" genericHeader="method">
2 Morphological Generation
</sectionHeader>
<subsectionHeader confidence="0.991466">
2.1 The Generator
</subsectionHeader>
<bodyText confidence="0.983373">
The morphological generator covers the produc-
tive English affixes s for the plural form of nouns
and the third person singular present tense of
verbs, and ed for the past tense, en for the
past participle, and ing for the present partici-
ple forms of verbs.&apos; The generator is imple-
mented in Flex.
The standard use of Flex is to construct
&apos;scanners&apos;, programs that recognise lexical pat-
terns in text (Levine et al., 1992). A Flex
description—the high-level description of a
scanner that Flex takes as input—consists of a
set of &apos;rules&apos;: pairs of regular expression pat-
terns (which Flex compiles into deterministic
finite-state automata (Aho et al., 1986)), and
actions consisting of arbitrary C code. Flex cre-
ates as output a C program which at run-time
scans a text looking for occurrences of the reg-
ular expressions. Whenever it finds one, it exe-
cutes the corresponding C code. Flex is part of
the Berkeley Unix distribution and as a result
Flex programs are very portable. The standard
version of Flex works with any ISO-8559 char-
acter set; Unicode support is also available.
The morphological generator expects to re-
ceive as input a sequence of tokens of the form
lemma inflection_label. where lemma specifies
the lemma of the word form to be generated,
inflection specifies the type of inflection (i.e. s,
ed, en or ing), and label specifies the PoS of the
word form. The PoS labels follow the same pat-
tern as in the Lancaster CLAWS tag sets (Gar-
side et al., 1987; Burnard, 1995). with noun tags
starting with N. etc. The symbols + and _ are
delimiters.
An example of a morphological generator rule
is given in (1).
We do not curreutly cover comparative and superla-
tive forms of adjectives or adverbs since t heir pro Ind iv-
it,: is much less predictable.
</bodyText>
<equation confidence="0.580293">
(1) {A}+&amp;quot;s+s_N&amp;quot;
</equation>
<bodyText confidence="0.991208911764706">
.L....:=Iret.urn(nRatord_form(1,!!es&amp;quot;));}
The left-hand side of the rule is a regular expres-
sion. The braces signify exactly one occurrence
of an element of the character set abbreviated
by the symbol A; we assume here that A abbre-
viates the upper and lower case letters of the al-
phabet. The next symbol + specifies that there
must be a se,querire of one anniore characters,
each belonging to the character set abbreviated
by A. Double quotes indicate literal character
symbols. The right-hand side of the rule gives
the C code to be executed when an input string
matches the regular expression. When the Flex
rule matches the input address-I-8_1V, for exam-
ple, the C function np_vord_form (defined else-
where in the generator) is called to determine
the word form corresponding to the input: the
function deletes the inflection type and PoS la-
bel specifications and the delimiters, removes
the last character of the lemma, and finally at-
taches the characters es; the word form gener-
ated is thus addresses.
Of course not all plural noun inflections are
correctly generated by the rule in (1) since
there are many irregularities and subregular-
ities. These are dealt with using additional,
more specific, rules. The order in which these
rules are applied to the input follows exactly
the order in which the rules appear in the Flex
description. This makes for a very simple and
perspicuous way to express generalizations and
exceptions. For instance, the rule in (2) gener-
ates the plural form of many English nouns that
originate from Latin, such as stimulus.
</bodyText>
<equation confidence="0.7207305">
(2) {A}+&amp;quot;us+s_N&amp;quot;
Ireturn(np_word_form(2,&amp;quot;i&amp;quot;)) ;
</equation>
<bodyText confidence="0.999774909090909">
With the input stimulus-f-s_N, the output is
stimuli rather than the incorrect *stimuluses
that would follow from the application of the
more general rule in (1). By ensuring that this
rule precedes the rule in (1) in the description,
nouns such as stimutus get the correct plural
form inflection. Some other words in this class,
though, do not have the Latinate plural form
(e.g. *boni as a plural form of bonus); in these
cases the generator contains rules specifying the
correct forms as exceptions.
</bodyText>
<page confidence="0.996346">
202
</page>
<subsectionHeader confidence="0.902933">
2.2 Inflectional Preferences
</subsectionHeader>
<bodyText confidence="0.9999945">
The rules constituting&amp;quot;the generator do not nec-
essarily have to be mutually exclusive, so they
can be used to capture the inflectional morphol-
ogy of lemmata that have more than one pos-
sible inflected form given a specific PoS label
and inflectional type. An example of this is the
multiple inflections of the noun cactus, which
has not only the Latinate plural form cacti but
also the English-plural-form cactuses: • In addi-
tion, inflections of some words differ according
to dialect. For example, the past participle form
of the verb to bear is borne in British English,
whereas in American English the preferred word
form is born.
In cases where there is more than one possi-
ble inflection for a particular input lemma, the
order of the rules in the Flex description de-
termines the inflectional preference. For exam-
ple, with the noun cactus, the fact that the rule
in (2) precedes the one in (1) causes the gener-
ator to output the word form cacti rather than
cactuses even though both rules are applicable.2
It is important to note, though, that the gen-
erator will always choose between multiple in-
flections: there is no way for it to output all
possible word forms for a particular input.3
</bodyText>
<subsectionHeader confidence="0.99586">
2.3 Consonant Doubling
</subsectionHeader>
<bodyText confidence="0.967087636363636">
An important issue concerning morphological
generation that is closely related to that of
inflectional preference is consonant doubling.
This phenomenon, occurring mainly in British
English, involves the doubling of a consonant
at the end of a lemma when the lemma is in-
flected. For example, the past tense/participle
inflection of the verb to travel is travelled in
British English, where the final consonant of the
lemma is doubled before the suffix is attached.
In American English the past tense/participle
inflection of the verb to travel is usually spelt
traveled. Consonant doubling is triggered on
the basis of both orthographic and phonologi-
cal information: when a word ends in one vowel
2ftu1e choice based on ordering in the description can
in fact be overridden by arranging for the second or sub-
sequent match to cover a larger part of the input so that
the longest match heuristic applies (Levine et al., 1992).
Hut note that the rules in (1) and (2) will always match
the same input span_
3Flex does not allow the use of rules that have Hen-
iteal left-hand side regular expressions.
followed by one consonant and the last part of
the-word is - stressed-,--in: -general. the ,corisoriant
is doubled (Procter, 1995). However there are
exceptions to this, and in any case the input to
the morphological generator does not contain
information about stress.
Consider the Flex rule in (3), where the sym-
bols C and V abbreviate the character sets con-
sisting of (upper and lower case) consonants and
,vowels,- respectively.
</bodyText>
<equation confidence="0.7026235">
(3) {A}*{C}{V}&amp;quot;t+ed_V&amp;quot;
Ireturn(cb_wordform(0,&amp;quot;t&amp;quot;,&amp;quot;ed&amp;quot;));}
</equation>
<bodyText confidence="0.999961">
Given the input submit-i-ed_V this rule correctly
generates submitted. However, the verb to ex-
hibit does not undergo consonant doubling so
this rule will generate, incorrectly, the word
form exhibitted.
In order to ensure that the correct inflection
of a verb is generated, the morphological gener-
ator uses a list of (around 1,100) lemmata that
allow consonant doubling, extracted automati-
cally from the British National Corpus (BNC;
Burnard, 1995). The list is checked before in-
flecting verbs. Given the fact that there are
many more verbs that do not allow consonant
doubling, listing the verbs that do is the most
economic solution. An added benefit is that if a
lemma does allow consonant doubling but is not
included in the list then the word form gener-
ated will still be correct with respect to Ameri-
can English.
</bodyText>
<subsectionHeader confidence="0.987486">
2.4 Deriving the Generator
</subsectionHeader>
<bodyText confidence="0.999892833333333">
The morphological generator comprises a set of
of approximately 1,650 rules expressing mor-
phological regularities, subregularities, and ex-
ceptions for specific words; also around 350 lines
of C/Flex code for program initialisation and
defining the functions called by the rule actions.
The rule set is in fact obtained by automati-
cally reversing a morphological analyser. This
is a much enhanced version of the analyser orig-
inally developed for the GATE system (Cun-
ningham et al., 1996). Minnen and Carroll (Un-
der review) describe in detail how the reversal is
performed. The generator executable occupies
around 700Kb on disc.
The analyser--and therefore the generator
includes exception lists derived from WordNet
(version 1.5: Miller et al., 1993). In addi-
tion. we have incorporated data acquired semi-
</bodyText>
<page confidence="0.993463">
203
</page>
<bodyText confidence="0.7932491">
automatically from the following corpora and
machine readable, dictionaries: the LOB cor-
pus (Garside et al., 1987), the Penn Tree-
bank (Marcus et al., 1993), the SUSANNE cor-
pus (Sampson, 1995), the Spoken English Cor-
pus (Taylor and Knowles, 1988), the Oxford
Psycholinguistic Database (Quinlan, 1992), and
the &amp;quot;Computer-Usable&amp;quot; version of the Oxford
Advanced Learner&apos;s Dictionary of Current En-
glish (OALDCE; Mitton, 1992).
</bodyText>
<subsectionHeader confidence="0.937279">
2.5 Evaluation
</subsectionHeader>
<bodyText confidence="0.9989136">
Minnen and Carroll (Under review) report an
evaluation of the accuracy of the morphologi-
cal generator with respect to the CELEX lexi-
cal database (version 2.5; Baayen et al., 1993).
This threw up a small number of errors which
we have now fixed. We have rerun the CELEX-
based evaluation: against the past tense, past
and present participle, and third person singu-
lar present tense inflections of verbs, and all plu-
ral nouns. After excluding multi-word entries
(phrasal verbs, etc.) we were left with 38,882
out of the original 160,595 word forms. For each
of these word forms we fed the corresponding
input (derived automatically from the lemma-
tisation and inflection specification provided by
CELEX) to the generator.
We compared the generator output with the
original CELEX word forms, producing a list
of mistakes apparently made by the generator,
which we then checked by hand. In a number
of cases either the CELEX lemmatisation was
wrong in that it disagreed with the relevant en-
try in the Cambridge International Dictionary
of English (Procter, 1995), or the output of the
generator was correct even though it was not
identical to the word form given in CELEX.
We did not count these cases as mistakes. We
also found that CELEX is inconsistent with re-
spect to consonant doubling. For example, it
includes the word form pettifogged,1 whereas
it omits many consonant doubled words that
are much more common (according to counts
from the BNC). For example, the BNC con-
tains around 850 occurrences of the word form
programming tagged as a verb. but this form
is not present in CELEX. The form programing
does occur in CELEX. but does not in the BNC.
&apos;A rare word, meaning to be overly concerned with
small, unimportant details.
We did not count these cases as mistakes either.
Of the remaining 359% mistakes 346-cOneerned
word forms that do not occur at all in the 100M
words of the BNC. We categorised these as irrel-
evant for practical applications and so discarded
them. Thus the type accuracy of the morpho-
logical analyser with respect to the CELEX lex-
ical database is 99.97%. The token accuracy is
99.98% with respect to the 14,825,661 relevant
tokens inthe BNC (Le—a.rate.of two errors per
ten thousand words).
We tested the processing speed of the gener-
ator on a Sun Ultra 10 workstation. In order
to discount program startup times (which are
anyway only of the order of 0.05 seconds) we
used input files of 400K and 800K tokens and
recorded the difference in timings; we took the
averages of 10 runs. Despite its wide coverage
the morphological generator is very fast: it gen-
erates at a rate of more than 80,000 words per
second.5
</bodyText>
<sectionHeader confidence="0.8120315" genericHeader="method">
3 The Generator in an Applied
System
</sectionHeader>
<subsectionHeader confidence="0.999501">
3.1 Text Simplification
</subsectionHeader>
<bodyText confidence="0.980799538461539">
The morphological generator forms part of a
prototype system for automatic simplification
of English newspaper text (Carroll et al., 1999).
The goal is to help people with aphasia (a lan-
guage impairment typically occurring as a re-
sult of a stroke or head injury) to better un-
derstand English newspaper text. The system
comprises two main components: an analysis
module which downloads the source newspaper
texts from the web and computes syntactic anal-
yses for the sentences in them, and a simpli-
fication module which operates on the output
of the analyser to improve the comprehensibil-
ity of the text. Syntactic simplification (Can-
ning and Tait, 1999) operates on the syntax
trees produced in the analysis phase, for exam-
ple converting sentences in the passive voice to
active, and splitting long sentences at appropri-
ate points. A subsequent lexical simplification
stage (Devlin and Tait, 1998) replaces difficult
or rare content words with simpler synonyms.
The analysis component contains a morpho-
logical analyser, and it is the base forms of
is likely that a modest increase in speed could he
obtained by specifying optimisation levels in Flex and
gcc that are higher than the defaults.
</bodyText>
<page confidence="0.993979">
204
</page>
<bodyText confidence="0.9999678">
words that are passed through the system; this
eases the task of the lexical simplification mod-
ule. The final processing stage in the system
is therefore morphological generation, using the
generator described in the previous section.
</bodyText>
<subsectionHeader confidence="0.999461">
3.2 Applied Morphological Generation
</subsectionHeader>
<bodyText confidence="0.999931789473684">
We are currently testing the components of the
simplification system on a corpus of 1000 news
stories downloaded from the :Sund,erland Echo
(a local newspaper in North-East England). In
our testing we have found that newly encoun-
tered vocabulary only rarely necessitates any
modification to the generator (or rather the
analyser) source; if the word has regular mor-
phology then it is handled by the rules express-
ing generalisations. Also, a side-effect of the fact
that the generator is derived from the analyser
is that the two modules have exactly the same
coverage and are guaranteed to stay in step with
each other. This is important in the context of
an applied system. The accuracy of the gener-
ator is quite sufficient for this application; our
experience is that typographical mistakes in the
original newspaper text are much more common
than errors in morphological processing.
</bodyText>
<subsectionHeader confidence="0.998627">
3.3 Orthographic Postprocessing
</subsectionHeader>
<bodyText confidence="0.985913105263158">
Some orthographic phenomena span more than
one word. These cannot be dealt with in mor-
phological generation since this works strictly a
word at a time. We have therefore implemented
a final orthographic postprocessing stage. Con-
sider the sentence:6
(4) *Brian Cookman is the attraction at
the King &apos;8 Arms on Saturday night
and he will be back on Sunday night
for a acoustic jam session.
This is incorrect orthographically because the
determiner in the final noun phrase should be
an, as in an acoustic jam session. In fact an
must be used if the following word starts with
a vowel sound, and a otherwise. We achieve
this, again using a filter implemented in Flex,
with a set of general rules keying off the next
word&apos;s first letter (having skipped any inter-
vening sentence-internal punctuation), together
</bodyText>
<footnote confidence="0.91498775">
5Th is sentence is taken from the story &amp;quot;The demise
of Sunderland&apos;s \faux Breweries is giving local musicians
a case of the blues- published in the Sundt:Timid Echo
on 26 August 1999.
</footnote>
<bodyText confidence="0.981858258064516">
with a list of exceptions (e.g. heir, unanimous)
•-,collected -us ingthe:pronunciabion information in
the OALDCE, supplemented by further cases
(e.g. unidimensional) found in the BNC. In the
case of abbreviations or acronyms (recognised
by the occurrence of non-word-initial capital let-
ters and trailing full-stops) we key off the pro-
nunciation of the first letter considered in isola-
tion.
Similarly, .the orthography of the .genitive
marker cannot be determined without taking
context into account, since it depends on the
identity of the last letter of the preceding word.
In the sentence in (4) we need only eliminate
the space before the genitive marking, obtain-
ing King&apos;s Arms. But, following the newspaper
style guide, if the preceding word ends in s or z
we have to &apos;reduce&apos; the marker as in, for exam-
ple, Stacey Edwards&apos; skilful fingers.
The generation of contractions presents more
of a problem. For example, changing he will
to he&apos;ll would make (4) more idiomatic. But
there are cases where this type of contraction is
not permissible. Since these cases seem to be
dependent on syntactic context (see Section 4
below), and we have syntactic structure from
the analysis phase, we are in a good position
to make the correct choice. However, we have
not yet tackled this issue and currently take the
conservative approach of not contracting in any
circumstances.
</bodyText>
<sectionHeader confidence="0.999932" genericHeader="evaluation">
4 Related Work
</sectionHeader>
<bodyText confidence="0.999948388888889">
We are following a well-established line of re-
search into the use of finite-state techniques for
lexical and shallow syntactic NLP tasks (e.g.
Karttunen et al. (1996)). Lexical transduc-
ers have been used extensively for morphological
analysis, and in theory a finite-state transducer
implementing an analyser can be reversed to
produce a generator. However, we are not aware
of published research on finite-state morpho-
logical generators (1) establishing whether in
practice they perform with similar efficiency to
morphological analysers, (2) quantifying their
type/token accuracy with respect to an inde-
pendent, extensive &apos;gold standard&apos;, and (3) in-
dicating how easily they can be integrated
into Larger systems. Furthermore, although a
number of finite-state compilation toolkits (e.g.
Karttunen (1994)) are publicly available or can
</bodyText>
<page confidence="0.997161">
205
</page>
<bodyText confidence="0.99711262886598">
be licensed for research use, associated large-
scale linguistic ..descrip Lions—for-example:En—
glish morphological lexicons---are usually com-
mercial products and are therefore not freely
available to the NLG research community.
The work reported here is alsorelated to
work on lexicon representation and morpho-
logical processing using the DATR representa-
tion language (Cahill, 1993; Evans and Gazdar,
.1996). However, ..we,..adopt. less • of ar, theoreti-7.
cal and more of an engineering perspective, fo-
cusing on morphological generation in the con-
text of wide-coverage practical NLG applica-
tions. There are also parallels to research in
the two-level morphology framework (Kosken-
niemi, 1983), although in contrast to our ap-
proach this framework has required exhaustive
lexica and hand-crafted morphological (unifi-
cation) grammars in addition to orthographic
descriptions (van Noord, 1991; Ritchie et al.,
1992). The SRI Core Language Engine (Al-
shawi, 1992) uses a set of declarative segmen-
tation rules which are similar in content to our
rules and are used in reverse to generate word
forms. The system, however, is not freely avail-
able, again requires an exhaustive stem lexicon,
and the rules are not compiled into an efficiently
executable finite-state machine but are only in-
terpreted.
The work that is perhaps the most similar
in spirit to ours is that of the LADL group, in
their compilation of large lexicons of inflected
word forms into finite-state transducers (Mohri,
1996). The resulting analysers run at a com-
parable speed to our generator and the (com-
pacted) executables are of similar size. How-
ever, a full form lexicon is unwieldy and incon-
venient to update, and a system derived from it
cannot cope gracefully with unknown words be-
cause it does not contain generalisations about
regular or subregular morphological behaviour.
The morphological components of current
widely-used NLG systems tend to consist of
hard-wired procedural code that is tightly
bound to the workings of the rest of the system.
For instance, the Nigel grammar (Matthie.ssen,
1984) contains Lisp code that classifies verb,
noun and adjective endings, and these classes
are picked up by further code inside the KPIVEL
system (Bateman., 2000) itself which performs
inflectional generation by stripping off variable
length trailing strings and concatenating suf-
, fixes_ Anorphologically..-suhregular4orrns
must be entered explicitly in the lexicon, as well
as irregular ones. The situation is similar in
FUF/SURGE, morphological generation in the
SURGE grammar (Elhadad and Robin, 1996)
being performed by procedures which inspect
lemma endings, strip off trailing strings when
appropriate, and concatenate suffixes.
-,..:Imicurrent,NLG:systesus,-,Prbhographic infor-
mation is distributed throughout the lexicon
and is applied via the grammar or by hard-wired
code. This makes orthographic processing dif-
ficult to decouple from the rest of the system,
compromising maintainability and ease of reuse.
For example, in SURGE, markers for a/an us-
age can be added to lexical entries for nouns to
indicate that their initial sound is consonant-
or vowel-like, and is contrary to what their or-
thography would suggest. (This is only a partial
solution since adjectives, adverbs and more
rarely other parts of speech—can follow the in-
definite article and thus need the same treat-
ment). The appropriate indefinite article is in-
serted by procedures associated with the gram-
ma&amp;quot;. In DRAFTER-2 (Power et aL, 1998), an
a/an feature can be associated with any lex-
ical entry, and its value is propagated up to
the NP level through leftmost rule daughters in
the grammar (Power, personal communication).
Both of these systems interleave orthographic
processing with other processes in realisation.
In addition. neither has a mechanism for stat-
ing exceptions for whole subclasses of words, for
example those starting us followed by a vowel—
such as use and usual—which must be preceded
by a. KPML appears not to perform this type
of processing at all.
We are not aware of any literature describing
(practical) NLG systems that generate contrac-
tions. However, interesting linguistic research in
this direction is reported by PulInni and Zwicky
(In preparation. This work investigates the un-
derlying syntactic structure of sentences that
block auxiliary reductions, for example those
with VP ellipsis as in (5).
</bodyText>
<figure confidence="0.425778">
(5) * She&apos;s usually home when he&apos;s.
</figure>
<page confidence="0.996559">
206
</page>
<sectionHeader confidence="0.992289" genericHeader="conclusions">
5 Conclusions
</sectionHeader>
<bodyText confidence="0.999562975">
We have described a generator-for -English
flectional morphology. The main features of the
generator are:
wide coverage and high accuracy It in-
corporates data from several large corpora
and machine readable dictionaries. An
evaluation has shown the error rate to be
very low.
robustness The generator does not contain
an explicit lexicon or word-list, but instead
comprises a set of morphological generali-
sations together with a list of exceptions for
specific (irregular) words. Unknown words
are very often handled correctly by the gen-
eralisations.
maintainability and ease of use The or-
ganisation into generalisations and excep-
tions can save development time since ad-
dition of new vocabulary that has regular
morphology does not require any changes
to be made. The generator is packaged up
as a Unix filter, making it easy to integrate
into applications.
speed and portability The generator is
based on efficient finite-state techniques,
and implemented using the widely available
Unix Flex utility.
freely available The morphological gener-
ator and the orthographic postproces-
sor are freely available to the NLG re-
search community. See &lt;http://www.cogs.
susx.ac.uk/lab/nip/carroll/morph.html&gt;.
In future work we intend to investigate the
use of phonological information in machine
readable dictionaries for a inore principled so-
lution to the consonant doubling problem. We
also plan to further increase the flexibility of
the generator by including an option that al-
lows the user to choose whether it ha.s a prefer-
ence for generating British or American English
</bodyText>
<sectionHeader confidence="0.98829" genericHeader="acknowledgments">
Acknowledgements
</sectionHeader>
<bodyText confidence="0.996770818181818">
This work was funded by UK EPSRC project
GR/L53175 PSET: Practical Simplification of
English Text&apos;, and by an EPSRC Advanced Fel-
lowship to the second author. The original ver-
sion of the morphological analyser was kindly
provided to us by the University of Sheffield
GATE project—Chris -Brew, Dale, Gerdemann • •
Adam Kilgarriff and Ehud Reiter have sug-
gested improvements to the analyser/generator.
Thanks also to the anonymous reviewers for in-
sightful comments.
</bodyText>
<sectionHeader confidence="0.997607" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999271534883721">
Alfred Aho, Ravi Sethi, and Jeffrey Ullman.
.1986..-L-Campilers: :Principles,;.Technigues and.
Tools. Addison-Wesley.
Hiyan Alshawi, editor. 1992. The Core Lan-
guage Engine. MIT Press, Cambridge, MA.
Harald Baayen, Richard Piepenbrock, and Hed-
derik van Rijn. 1993. The CELEX Lexi-
cal Database (CD-ROM). Linguistic Data
Consortium, University of Pennsylvania,
Philadelphia, PA, USA.
John Bateman. 2000. KPML (Version 3.1)
March 2000. University of Bremen, Germany,
&lt;http://www1b10.uni-bremen.de/anglistik/
langpro/kpml/README.html&gt;.
Lou Burnard. 1995. Users reference guide for
the British National Corpus. Technical re-
port, Oxford University Computing Services.
Lynne Cahill. 1993. Morphonology in the lex-
icon. In Proceedings of the 6th Conference
of the European Chapter of the Association
for Computational Linguistics, pages 87-96,
Utrecht, The Netherlands.
Yvonne Canning and John Tait. 1999. Syntac-
tic simplification of newspaper text for apha-
sic readers. In Proceedings of the ACM SIGIR
Workshop on Customised Information Deliv-
ery, Berkeley, CA, USA.
,John Carroll, Guido Minnen, Darren Pearce,
Yvonne Canning, Siobhan Devlin, and John
Tait. 1999. Simplifying English text for lan-
guage impaired readers. in Proceedings of the
9th Conference of the European Chapter of
the Association for Computational Linguis-
tics (EACL), Bergen, Norway.
Hamish Cunningham, Yorick Wilks, and Robert
Gaizauskas. 1996. GATE---a General Archi-
tecture for Text Engineering. In Proceed-
ings of the 16th Conference on Computational
Linguistics. Copenhagen, Denmark.
Siobhan Devlin and John Tait. 1998. The use
of a psycliolinguistic database in the simpli-
fication of text for aphasic readers. In (Ner-
bonne. 1998).
</reference>
<page confidence="0.968573">
207
</page>
<reference confidence="0.999418287234043">
Michael Elhadad and Jacques Robin. 1996. An
overview of SURGE rensahlo.comprehen-.
sive syntactic realization component. Tech-
nical Report 96-03, Dept of Mathematics and
Computer Science, Ben Gurion University, Is-
rael.
Roger Evans and Gerald Gazdar. 1996. DATR:
a language for lexical knowledge representa-
tion. Computational Linguistics, 22.
Roger Garside, Geoffrey _Leech, and Geoffrey
Sampson. 1987. The computational analysis
of English: a corpus-based approach. Long-
man, London.
Lauri Karttunen, Jean-Pierre Chanod, Gregory
Grefenstette, and Anne Schiller. 1996. Regu-
lar expressions for language engineering. Nat-
ural Language Engineering, 2(4):305-329.
Lauri Karttunen. 1994. Constructing lexical
transducers. In Proceedings of the 14th Con-
ference on Computational Linguistics, pages
406-411, Kyoto, Japan.
Kimmo Koskenniemi. 1983. Two-level model
for morphological analysis. In 8th Interna-
tional Joint Conference on Artificial Intelli-
gence, pages 683-685, Karlsruhe, Germany.
John Levine, Tony Mason, and Doug Brown.
1992. Lex E4 Yacc. O&apos;Reilly and Associates,
second edition_
Mitch Marcus, Beatrice Santorini, and
Mary Ann Marcinkiewicz. 1993. Build-
ing a large annotated corpus of English: the
Penn Treebank. Computational Linguistics,
19(4313-330.
Christian Matthiessen. 1984. Systemic Gram-
mar in computation: The Nigel case. In Pro-
ceedings of the 1st Conference of the European
Chapter of the Association for Computational
Linguistics, pages 155-164, Pisa, Italy.
George Miller, Richard Beckwith, Cliristialie
Fellbaurn, Derek Gross, Katherine Miller, and
Ranciee Tengi. 1993. Five Papers on Word-
Net. Princeton University, Princeton. N.J.
Guido Minnen and John Carroll. Under review.
Fast and robust morphological processing tools
for practical NLP applications.
Roger MAWR. 1992. A description of a
computer-usable dictionary File based on
the Oxford Advanced Learner&apos;s Dictio-
nary of Current English. Available at
&lt;ftp://ota.ox.ac.iik/plib/otafpublic/dicts/710/
text-71 DAN. &gt; .
Mehryar Mohri. 1996. On some applications of
-a.utomata,-.theory.,to.,:naturaldan, .
guage processing. Natural Language Engi-
neering, 2(0:61-80.
John Nerbonne, editor. 1998. Linguistic
Databases. Lecture Notes. CSLI Publica-
tions, Stanford., USA.
Richard Power, Donia Scott, and Roger Evans.
1998. What You See Is What You Meant: di-
rect knowledge .editing with naturaLlanguage
feedback. In Proceedings of the 13th Bien-
nial European Conference on Artificial Intel-
ligence (ECAI 98), Brighton, UK.
Paul Procter. 1995. Cambridge International
Dictionary of English. Cambridge University
Press.
Geoffrey Pullum and Arnold Zwicky. In prepa-
ration. Licensing of prosodic features by
syntactic rules: the key to auxiliary reduc-
tion. First version presented to the Annual
Meeting of the Linguistic Society of America,
Chicago, Illinois, January 1997. Available at
&lt;http://www.lsadc.org/web2/99modabform.ht
Philip Quinlan. 1992. The Oxford Psycholin-
guistic Database. Oxford University Press.
Graeme Ritchie, Graham Russell, Alan Black,
and Stephen Pulman. 1992. Computational
morphology: practical mechanisms for the
English lexicon. MIT Press.
Geoffrey Sampson. 1995. English for the com-
puter. Oxford University Press.
Stuart Shieber, Certjan van Noord, Robert
Moore, and Fernando Pereira. 1990. Seman-
tic head-driven generation. Computational
Linguistics, 16(I):7-17_
Lita Taylor and Gerry Knowles. 1988. Man-
ual of information to accompany the SEC
Corpus: the machine-readable corpus of spo-
ken English. Manuscript, University of Lan-
caster. UK.
Certjan van Noord. 1991. Morphology in
MiMo2. Manuscript, University of Utrerlit,
The Netherlands.
</reference>
<page confidence="0.997772">
208
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.585954">
<title confidence="0.999894">Robust, Applied Morphological Generation</title>
<author confidence="0.999746">Guido Minnen John Carroll Darren Pearce</author>
<affiliation confidence="0.9775265">Cognitive and Computing University of</affiliation>
<address confidence="0.781893">Brighton BN1 9QH,</address>
<email confidence="0.999028">ffirstname.lastnamel@cogs.susx.ac.uk</email>
<abstract confidence="0.98613625">natural language generation sysit often advantageous to have a separate component that deals purely with morphological processing. We present such a component: a fast and robust morphological generator for English based on finite-state techniques that generates a word form given a specification of the lemma, part-of-speech, and the type of inflection required. We describe how this morphological generator is used in a prototype system for automatic simplification of English newspaper text, and discuss practical morphological and orthographic issues we have encountered in generation of unrestricted text within this application.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="false">
<authors>
<author>Alfred Aho</author>
<author>Ravi Sethi</author>
<author>Jeffrey Ullman</author>
</authors>
<booktitle>1986..-L-Campilers: :Principles,;.Technigues and. Tools.</booktitle>
<publisher>Addison-Wesley.</publisher>
<marker>Aho, Sethi, Ullman, </marker>
<rawString>Alfred Aho, Ravi Sethi, and Jeffrey Ullman. .1986..-L-Campilers: :Principles,;.Technigues and. Tools. Addison-Wesley.</rawString>
</citation>
<citation valid="true">
<title>The Core Language Engine.</title>
<date>1992</date>
<editor>Hiyan Alshawi, editor.</editor>
<publisher>MIT Press,</publisher>
<location>Cambridge, MA.</location>
<marker>1992</marker>
<rawString>Hiyan Alshawi, editor. 1992. The Core Language Engine. MIT Press, Cambridge, MA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Harald Baayen</author>
<author>Richard Piepenbrock</author>
<author>Hedderik van Rijn</author>
</authors>
<date>1993</date>
<booktitle>The CELEX Lexical Database (CD-ROM). Linguistic</booktitle>
<institution>Data Consortium, University of Pennsylvania,</institution>
<location>Philadelphia, PA, USA.</location>
<marker>Baayen, Piepenbrock, van Rijn, 1993</marker>
<rawString>Harald Baayen, Richard Piepenbrock, and Hedderik van Rijn. 1993. The CELEX Lexical Database (CD-ROM). Linguistic Data Consortium, University of Pennsylvania, Philadelphia, PA, USA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>John Bateman</author>
</authors>
<date>2000</date>
<journal>KPML (Version</journal>
<volume>3</volume>
<institution>University of Bremen,</institution>
<location>Germany, langpro/kpml/README.html&gt;.</location>
<marker>Bateman, 2000</marker>
<rawString>John Bateman. 2000. KPML (Version 3.1) March 2000. University of Bremen, Germany, &lt;http://www1b10.uni-bremen.de/anglistik/ langpro/kpml/README.html&gt;.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Lou Burnard</author>
</authors>
<title>Users reference guide for the British National Corpus.</title>
<date>1995</date>
<tech>Technical report,</tech>
<institution>Oxford University Computing Services.</institution>
<contexts>
<context position="5605" citStr="Burnard, 1995" startWordPosition="893" endWordPosition="894">g C code. Flex is part of the Berkeley Unix distribution and as a result Flex programs are very portable. The standard version of Flex works with any ISO-8559 character set; Unicode support is also available. The morphological generator expects to receive as input a sequence of tokens of the form lemma inflection_label. where lemma specifies the lemma of the word form to be generated, inflection specifies the type of inflection (i.e. s, ed, en or ing), and label specifies the PoS of the word form. The PoS labels follow the same pattern as in the Lancaster CLAWS tag sets (Garside et al., 1987; Burnard, 1995). with noun tags starting with N. etc. The symbols + and _ are delimiters. An example of a morphological generator rule is given in (1). We do not curreutly cover comparative and superlative forms of adjectives or adverbs since t heir pro Ind ivit,: is much less predictable. (1) {A}+&amp;quot;s+s_N&amp;quot; .L....:=Iret.urn(nRatord_form(1,!!es&amp;quot;));} The left-hand side of the rule is a regular expression. The braces signify exactly one occurrence of an element of the character set abbreviated by the symbol A; we assume here that A abbreviates the upper and lower case letters of the alphabet. The next symbol + sp</context>
<context position="11288" citStr="Burnard, 1995" startWordPosition="1831" endWordPosition="1832">V abbreviate the character sets consisting of (upper and lower case) consonants and ,vowels,- respectively. (3) {A}*{C}{V}&amp;quot;t+ed_V&amp;quot; Ireturn(cb_wordform(0,&amp;quot;t&amp;quot;,&amp;quot;ed&amp;quot;));} Given the input submit-i-ed_V this rule correctly generates submitted. However, the verb to exhibit does not undergo consonant doubling so this rule will generate, incorrectly, the word form exhibitted. In order to ensure that the correct inflection of a verb is generated, the morphological generator uses a list of (around 1,100) lemmata that allow consonant doubling, extracted automatically from the British National Corpus (BNC; Burnard, 1995). The list is checked before inflecting verbs. Given the fact that there are many more verbs that do not allow consonant doubling, listing the verbs that do is the most economic solution. An added benefit is that if a lemma does allow consonant doubling but is not included in the list then the word form generated will still be correct with respect to American English. 2.4 Deriving the Generator The morphological generator comprises a set of of approximately 1,650 rules expressing morphological regularities, subregularities, and exceptions for specific words; also around 350 lines of C/Flex cod</context>
</contexts>
<marker>Burnard, 1995</marker>
<rawString>Lou Burnard. 1995. Users reference guide for the British National Corpus. Technical report, Oxford University Computing Services.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Lynne Cahill</author>
</authors>
<title>Morphonology in the lexicon.</title>
<date>1993</date>
<booktitle>In Proceedings of the 6th Conference of the European Chapter of the Association for Computational Linguistics,</booktitle>
<pages>87--96</pages>
<location>Utrecht, The Netherlands.</location>
<contexts>
<context position="21614" citStr="Cahill, 1993" startWordPosition="3508" endWordPosition="3509">nt, extensive &apos;gold standard&apos;, and (3) indicating how easily they can be integrated into Larger systems. Furthermore, although a number of finite-state compilation toolkits (e.g. Karttunen (1994)) are publicly available or can 205 be licensed for research use, associated largescale linguistic ..descrip Lions—for-example:En— glish morphological lexicons---are usually commercial products and are therefore not freely available to the NLG research community. The work reported here is alsorelated to work on lexicon representation and morphological processing using the DATR representation language (Cahill, 1993; Evans and Gazdar, .1996). However, ..we,..adopt. less • of ar, theoreti-7. cal and more of an engineering perspective, focusing on morphological generation in the context of wide-coverage practical NLG applications. There are also parallels to research in the two-level morphology framework (Koskenniemi, 1983), although in contrast to our approach this framework has required exhaustive lexica and hand-crafted morphological (unification) grammars in addition to orthographic descriptions (van Noord, 1991; Ritchie et al., 1992). The SRI Core Language Engine (Alshawi, 1992) uses a set of declarat</context>
</contexts>
<marker>Cahill, 1993</marker>
<rawString>Lynne Cahill. 1993. Morphonology in the lexicon. In Proceedings of the 6th Conference of the European Chapter of the Association for Computational Linguistics, pages 87-96, Utrecht, The Netherlands.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yvonne Canning</author>
<author>John Tait</author>
</authors>
<title>Syntactic simplification of newspaper text for aphasic readers.</title>
<date>1999</date>
<booktitle>In Proceedings of the ACM SIGIR Workshop on Customised Information Delivery,</booktitle>
<location>Berkeley, CA, USA.</location>
<contexts>
<context position="16283" citStr="Canning and Tait, 1999" startWordPosition="2660" endWordPosition="2664">orms part of a prototype system for automatic simplification of English newspaper text (Carroll et al., 1999). The goal is to help people with aphasia (a language impairment typically occurring as a result of a stroke or head injury) to better understand English newspaper text. The system comprises two main components: an analysis module which downloads the source newspaper texts from the web and computes syntactic analyses for the sentences in them, and a simplification module which operates on the output of the analyser to improve the comprehensibility of the text. Syntactic simplification (Canning and Tait, 1999) operates on the syntax trees produced in the analysis phase, for example converting sentences in the passive voice to active, and splitting long sentences at appropriate points. A subsequent lexical simplification stage (Devlin and Tait, 1998) replaces difficult or rare content words with simpler synonyms. The analysis component contains a morphological analyser, and it is the base forms of is likely that a modest increase in speed could he obtained by specifying optimisation levels in Flex and gcc that are higher than the defaults. 204 words that are passed through the system; this eases the</context>
</contexts>
<marker>Canning, Tait, 1999</marker>
<rawString>Yvonne Canning and John Tait. 1999. Syntactic simplification of newspaper text for aphasic readers. In Proceedings of the ACM SIGIR Workshop on Customised Information Delivery, Berkeley, CA, USA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>John Carroll</author>
<author>Guido Minnen</author>
<author>Darren Pearce</author>
<author>Yvonne Canning</author>
<author>Siobhan Devlin</author>
<author>John Tait</author>
</authors>
<title>Simplifying English text for language impaired readers.</title>
<date>1999</date>
<booktitle>in Proceedings of the 9th Conference of the European Chapter of the Association for Computational Linguistics (EACL),</booktitle>
<location>Bergen, Norway.</location>
<contexts>
<context position="15769" citStr="Carroll et al., 1999" startWordPosition="2574" endWordPosition="2577">We tested the processing speed of the generator on a Sun Ultra 10 workstation. In order to discount program startup times (which are anyway only of the order of 0.05 seconds) we used input files of 400K and 800K tokens and recorded the difference in timings; we took the averages of 10 runs. Despite its wide coverage the morphological generator is very fast: it generates at a rate of more than 80,000 words per second.5 3 The Generator in an Applied System 3.1 Text Simplification The morphological generator forms part of a prototype system for automatic simplification of English newspaper text (Carroll et al., 1999). The goal is to help people with aphasia (a language impairment typically occurring as a result of a stroke or head injury) to better understand English newspaper text. The system comprises two main components: an analysis module which downloads the source newspaper texts from the web and computes syntactic analyses for the sentences in them, and a simplification module which operates on the output of the analyser to improve the comprehensibility of the text. Syntactic simplification (Canning and Tait, 1999) operates on the syntax trees produced in the analysis phase, for example converting s</context>
</contexts>
<marker>Carroll, Minnen, Pearce, Canning, Devlin, Tait, 1999</marker>
<rawString>,John Carroll, Guido Minnen, Darren Pearce, Yvonne Canning, Siobhan Devlin, and John Tait. 1999. Simplifying English text for language impaired readers. in Proceedings of the 9th Conference of the European Chapter of the Association for Computational Linguistics (EACL), Bergen, Norway.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hamish Cunningham</author>
<author>Yorick Wilks</author>
<author>Robert Gaizauskas</author>
</authors>
<title>GATE---a General Architecture for Text Engineering.</title>
<date>1996</date>
<booktitle>In Proceedings of the 16th Conference on Computational Linguistics.</booktitle>
<location>Copenhagen, Denmark.</location>
<contexts>
<context position="12172" citStr="Cunningham et al., 1996" startWordPosition="1976" endWordPosition="1980"> not included in the list then the word form generated will still be correct with respect to American English. 2.4 Deriving the Generator The morphological generator comprises a set of of approximately 1,650 rules expressing morphological regularities, subregularities, and exceptions for specific words; also around 350 lines of C/Flex code for program initialisation and defining the functions called by the rule actions. The rule set is in fact obtained by automatically reversing a morphological analyser. This is a much enhanced version of the analyser originally developed for the GATE system (Cunningham et al., 1996). Minnen and Carroll (Under review) describe in detail how the reversal is performed. The generator executable occupies around 700Kb on disc. The analyser--and therefore the generator includes exception lists derived from WordNet (version 1.5: Miller et al., 1993). In addition. we have incorporated data acquired semi203 automatically from the following corpora and machine readable, dictionaries: the LOB corpus (Garside et al., 1987), the Penn Treebank (Marcus et al., 1993), the SUSANNE corpus (Sampson, 1995), the Spoken English Corpus (Taylor and Knowles, 1988), the Oxford Psycholinguistic Dat</context>
</contexts>
<marker>Cunningham, Wilks, Gaizauskas, 1996</marker>
<rawString>Hamish Cunningham, Yorick Wilks, and Robert Gaizauskas. 1996. GATE---a General Architecture for Text Engineering. In Proceedings of the 16th Conference on Computational Linguistics. Copenhagen, Denmark.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Siobhan Devlin</author>
<author>John Tait</author>
</authors>
<title>The use of a psycliolinguistic database in the simplification of text for aphasic readers. In (Nerbonne.</title>
<date>1998</date>
<contexts>
<context position="16527" citStr="Devlin and Tait, 1998" startWordPosition="2699" endWordPosition="2702">nderstand English newspaper text. The system comprises two main components: an analysis module which downloads the source newspaper texts from the web and computes syntactic analyses for the sentences in them, and a simplification module which operates on the output of the analyser to improve the comprehensibility of the text. Syntactic simplification (Canning and Tait, 1999) operates on the syntax trees produced in the analysis phase, for example converting sentences in the passive voice to active, and splitting long sentences at appropriate points. A subsequent lexical simplification stage (Devlin and Tait, 1998) replaces difficult or rare content words with simpler synonyms. The analysis component contains a morphological analyser, and it is the base forms of is likely that a modest increase in speed could he obtained by specifying optimisation levels in Flex and gcc that are higher than the defaults. 204 words that are passed through the system; this eases the task of the lexical simplification module. The final processing stage in the system is therefore morphological generation, using the generator described in the previous section. 3.2 Applied Morphological Generation We are currently testing the</context>
</contexts>
<marker>Devlin, Tait, 1998</marker>
<rawString>Siobhan Devlin and John Tait. 1998. The use of a psycliolinguistic database in the simplification of text for aphasic readers. In (Nerbonne. 1998).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael Elhadad</author>
<author>Jacques Robin</author>
</authors>
<title>An overview of SURGE rensahlo.comprehen-. sive syntactic realization component.</title>
<date>1996</date>
<tech>Technical Report 96-03,</tech>
<institution>Dept of Mathematics and Computer Science, Ben Gurion University,</institution>
<contexts>
<context position="23806" citStr="Elhadad and Robin, 1996" startWordPosition="3846" endWordPosition="3849">code that is tightly bound to the workings of the rest of the system. For instance, the Nigel grammar (Matthie.ssen, 1984) contains Lisp code that classifies verb, noun and adjective endings, and these classes are picked up by further code inside the KPIVEL system (Bateman., 2000) itself which performs inflectional generation by stripping off variable length trailing strings and concatenating suf, fixes_ Anorphologically..-suhregular4orrns must be entered explicitly in the lexicon, as well as irregular ones. The situation is similar in FUF/SURGE, morphological generation in the SURGE grammar (Elhadad and Robin, 1996) being performed by procedures which inspect lemma endings, strip off trailing strings when appropriate, and concatenate suffixes. -,..:Imicurrent,NLG:systesus,-,Prbhographic information is distributed throughout the lexicon and is applied via the grammar or by hard-wired code. This makes orthographic processing difficult to decouple from the rest of the system, compromising maintainability and ease of reuse. For example, in SURGE, markers for a/an usage can be added to lexical entries for nouns to indicate that their initial sound is consonantor vowel-like, and is contrary to what their ortho</context>
</contexts>
<marker>Elhadad, Robin, 1996</marker>
<rawString>Michael Elhadad and Jacques Robin. 1996. An overview of SURGE rensahlo.comprehen-. sive syntactic realization component. Technical Report 96-03, Dept of Mathematics and Computer Science, Ben Gurion University, Israel.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Roger Evans</author>
<author>Gerald Gazdar</author>
</authors>
<title>DATR: a language for lexical knowledge representation.</title>
<date>1996</date>
<journal>Computational Linguistics,</journal>
<volume>22</volume>
<marker>Evans, Gazdar, 1996</marker>
<rawString>Roger Evans and Gerald Gazdar. 1996. DATR: a language for lexical knowledge representation. Computational Linguistics, 22.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Roger Garside</author>
<author>Geoffrey Leech</author>
<author>Geoffrey Sampson</author>
</authors>
<title>The computational analysis of English: a corpus-based approach.</title>
<date>1987</date>
<publisher>Longman,</publisher>
<location>London.</location>
<contexts>
<context position="5589" citStr="Garside et al., 1987" startWordPosition="888" endWordPosition="892">cutes the corresponding C code. Flex is part of the Berkeley Unix distribution and as a result Flex programs are very portable. The standard version of Flex works with any ISO-8559 character set; Unicode support is also available. The morphological generator expects to receive as input a sequence of tokens of the form lemma inflection_label. where lemma specifies the lemma of the word form to be generated, inflection specifies the type of inflection (i.e. s, ed, en or ing), and label specifies the PoS of the word form. The PoS labels follow the same pattern as in the Lancaster CLAWS tag sets (Garside et al., 1987; Burnard, 1995). with noun tags starting with N. etc. The symbols + and _ are delimiters. An example of a morphological generator rule is given in (1). We do not curreutly cover comparative and superlative forms of adjectives or adverbs since t heir pro Ind ivit,: is much less predictable. (1) {A}+&amp;quot;s+s_N&amp;quot; .L....:=Iret.urn(nRatord_form(1,!!es&amp;quot;));} The left-hand side of the rule is a regular expression. The braces signify exactly one occurrence of an element of the character set abbreviated by the symbol A; we assume here that A abbreviates the upper and lower case letters of the alphabet. The </context>
<context position="12608" citStr="Garside et al., 1987" startWordPosition="2043" endWordPosition="2046"> in fact obtained by automatically reversing a morphological analyser. This is a much enhanced version of the analyser originally developed for the GATE system (Cunningham et al., 1996). Minnen and Carroll (Under review) describe in detail how the reversal is performed. The generator executable occupies around 700Kb on disc. The analyser--and therefore the generator includes exception lists derived from WordNet (version 1.5: Miller et al., 1993). In addition. we have incorporated data acquired semi203 automatically from the following corpora and machine readable, dictionaries: the LOB corpus (Garside et al., 1987), the Penn Treebank (Marcus et al., 1993), the SUSANNE corpus (Sampson, 1995), the Spoken English Corpus (Taylor and Knowles, 1988), the Oxford Psycholinguistic Database (Quinlan, 1992), and the &amp;quot;Computer-Usable&amp;quot; version of the Oxford Advanced Learner&apos;s Dictionary of Current English (OALDCE; Mitton, 1992). 2.5 Evaluation Minnen and Carroll (Under review) report an evaluation of the accuracy of the morphological generator with respect to the CELEX lexical database (version 2.5; Baayen et al., 1993). This threw up a small number of errors which we have now fixed. We have rerun the CELEXbased eva</context>
</contexts>
<marker>Garside, Leech, Sampson, 1987</marker>
<rawString>Roger Garside, Geoffrey _Leech, and Geoffrey Sampson. 1987. The computational analysis of English: a corpus-based approach. Longman, London.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Lauri Karttunen</author>
<author>Jean-Pierre Chanod</author>
<author>Gregory Grefenstette</author>
<author>Anne Schiller</author>
</authors>
<title>Regular expressions for language engineering.</title>
<date>1996</date>
<journal>Natural Language Engineering,</journal>
<pages>2--4</pages>
<contexts>
<context position="20558" citStr="Karttunen et al. (1996)" startWordPosition="3358" endWordPosition="3361">e will to he&apos;ll would make (4) more idiomatic. But there are cases where this type of contraction is not permissible. Since these cases seem to be dependent on syntactic context (see Section 4 below), and we have syntactic structure from the analysis phase, we are in a good position to make the correct choice. However, we have not yet tackled this issue and currently take the conservative approach of not contracting in any circumstances. 4 Related Work We are following a well-established line of research into the use of finite-state techniques for lexical and shallow syntactic NLP tasks (e.g. Karttunen et al. (1996)). Lexical transducers have been used extensively for morphological analysis, and in theory a finite-state transducer implementing an analyser can be reversed to produce a generator. However, we are not aware of published research on finite-state morphological generators (1) establishing whether in practice they perform with similar efficiency to morphological analysers, (2) quantifying their type/token accuracy with respect to an independent, extensive &apos;gold standard&apos;, and (3) indicating how easily they can be integrated into Larger systems. Furthermore, although a number of finite-state comp</context>
</contexts>
<marker>Karttunen, Chanod, Grefenstette, Schiller, 1996</marker>
<rawString>Lauri Karttunen, Jean-Pierre Chanod, Gregory Grefenstette, and Anne Schiller. 1996. Regular expressions for language engineering. Natural Language Engineering, 2(4):305-329.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Lauri Karttunen</author>
</authors>
<title>Constructing lexical transducers.</title>
<date>1994</date>
<booktitle>In Proceedings of the 14th Conference on Computational Linguistics,</booktitle>
<pages>406--411</pages>
<location>Kyoto, Japan.</location>
<contexts>
<context position="21197" citStr="Karttunen (1994)" startWordPosition="3450" endWordPosition="3451">have been used extensively for morphological analysis, and in theory a finite-state transducer implementing an analyser can be reversed to produce a generator. However, we are not aware of published research on finite-state morphological generators (1) establishing whether in practice they perform with similar efficiency to morphological analysers, (2) quantifying their type/token accuracy with respect to an independent, extensive &apos;gold standard&apos;, and (3) indicating how easily they can be integrated into Larger systems. Furthermore, although a number of finite-state compilation toolkits (e.g. Karttunen (1994)) are publicly available or can 205 be licensed for research use, associated largescale linguistic ..descrip Lions—for-example:En— glish morphological lexicons---are usually commercial products and are therefore not freely available to the NLG research community. The work reported here is alsorelated to work on lexicon representation and morphological processing using the DATR representation language (Cahill, 1993; Evans and Gazdar, .1996). However, ..we,..adopt. less • of ar, theoreti-7. cal and more of an engineering perspective, focusing on morphological generation in the context of wide-co</context>
</contexts>
<marker>Karttunen, 1994</marker>
<rawString>Lauri Karttunen. 1994. Constructing lexical transducers. In Proceedings of the 14th Conference on Computational Linguistics, pages 406-411, Kyoto, Japan.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kimmo Koskenniemi</author>
</authors>
<title>Two-level model for morphological analysis.</title>
<date>1983</date>
<booktitle>In 8th International Joint Conference on Artificial Intelligence,</booktitle>
<pages>683--685</pages>
<location>Karlsruhe, Germany.</location>
<contexts>
<context position="21926" citStr="Koskenniemi, 1983" startWordPosition="3554" endWordPosition="3556">ons—for-example:En— glish morphological lexicons---are usually commercial products and are therefore not freely available to the NLG research community. The work reported here is alsorelated to work on lexicon representation and morphological processing using the DATR representation language (Cahill, 1993; Evans and Gazdar, .1996). However, ..we,..adopt. less • of ar, theoreti-7. cal and more of an engineering perspective, focusing on morphological generation in the context of wide-coverage practical NLG applications. There are also parallels to research in the two-level morphology framework (Koskenniemi, 1983), although in contrast to our approach this framework has required exhaustive lexica and hand-crafted morphological (unification) grammars in addition to orthographic descriptions (van Noord, 1991; Ritchie et al., 1992). The SRI Core Language Engine (Alshawi, 1992) uses a set of declarative segmentation rules which are similar in content to our rules and are used in reverse to generate word forms. The system, however, is not freely available, again requires an exhaustive stem lexicon, and the rules are not compiled into an efficiently executable finite-state machine but are only interpreted. T</context>
</contexts>
<marker>Koskenniemi, 1983</marker>
<rawString>Kimmo Koskenniemi. 1983. Two-level model for morphological analysis. In 8th International Joint Conference on Artificial Intelligence, pages 683-685, Karlsruhe, Germany.</rawString>
</citation>
<citation valid="true">
<authors>
<author>John Levine</author>
<author>Tony Mason</author>
<author>Doug Brown</author>
</authors>
<date>1992</date>
<note>Lex E4 Yacc. O&apos;Reilly and Associates, second edition_</note>
<contexts>
<context position="3554" citStr="Levine et al., 1992" startWordPosition="543" endWordPosition="546">ince the addition of new vocabulary that has regular morphology does not require any changes to the generator. In addition, the generalisation-exception architecture can be used to specify----and also override—preferences in cases where a lemma has more than one possible surface word form given a particular inflectional type and PoS label. The generator is packaged up as a Unix &apos;filter&apos;, making it easy to integrate into applications. It is based on efficient finite-state techniques, and is implemented using the widely available Unix Flex utility (a reimplementation of the AT&amp;T Unix Lex tool) (Levine et al., 1992). The generator is freely available to the NLG research community (see Section 5 below). The paper is structured as follows. Section 2 describes the morphological generator and eval201 uates its accuracy. Section 3 outlines how the generator is put to .use in a prototype system for automatic simplification of text, and discusses a number of practical morphological and orthographic issues that we have encountered. Section 4 relates our work to that of others, and we conclude (Section 5) with directions for future work. 2 Morphological Generation 2.1 The Generator The morphological generator cov</context>
<context position="10176" citStr="Levine et al., 1992" startWordPosition="1655" endWordPosition="1658">nse/participle inflection of the verb to travel is travelled in British English, where the final consonant of the lemma is doubled before the suffix is attached. In American English the past tense/participle inflection of the verb to travel is usually spelt traveled. Consonant doubling is triggered on the basis of both orthographic and phonological information: when a word ends in one vowel 2ftu1e choice based on ordering in the description can in fact be overridden by arranging for the second or subsequent match to cover a larger part of the input so that the longest match heuristic applies (Levine et al., 1992). Hut note that the rules in (1) and (2) will always match the same input span_ 3Flex does not allow the use of rules that have Heniteal left-hand side regular expressions. followed by one consonant and the last part of the-word is - stressed-,--in: -general. the ,corisoriant is doubled (Procter, 1995). However there are exceptions to this, and in any case the input to the morphological generator does not contain information about stress. Consider the Flex rule in (3), where the symbols C and V abbreviate the character sets consisting of (upper and lower case) consonants and ,vowels,- respecti</context>
</contexts>
<marker>Levine, Mason, Brown, 1992</marker>
<rawString>John Levine, Tony Mason, and Doug Brown. 1992. Lex E4 Yacc. O&apos;Reilly and Associates, second edition_</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mitch Marcus</author>
<author>Beatrice Santorini</author>
<author>Mary Ann Marcinkiewicz</author>
</authors>
<title>Building a large annotated corpus of English: the Penn Treebank.</title>
<date>1993</date>
<journal>Computational Linguistics,</journal>
<pages>19--4313</pages>
<contexts>
<context position="12649" citStr="Marcus et al., 1993" startWordPosition="2051" endWordPosition="2054">ng a morphological analyser. This is a much enhanced version of the analyser originally developed for the GATE system (Cunningham et al., 1996). Minnen and Carroll (Under review) describe in detail how the reversal is performed. The generator executable occupies around 700Kb on disc. The analyser--and therefore the generator includes exception lists derived from WordNet (version 1.5: Miller et al., 1993). In addition. we have incorporated data acquired semi203 automatically from the following corpora and machine readable, dictionaries: the LOB corpus (Garside et al., 1987), the Penn Treebank (Marcus et al., 1993), the SUSANNE corpus (Sampson, 1995), the Spoken English Corpus (Taylor and Knowles, 1988), the Oxford Psycholinguistic Database (Quinlan, 1992), and the &amp;quot;Computer-Usable&amp;quot; version of the Oxford Advanced Learner&apos;s Dictionary of Current English (OALDCE; Mitton, 1992). 2.5 Evaluation Minnen and Carroll (Under review) report an evaluation of the accuracy of the morphological generator with respect to the CELEX lexical database (version 2.5; Baayen et al., 1993). This threw up a small number of errors which we have now fixed. We have rerun the CELEXbased evaluation: against the past tense, past and</context>
</contexts>
<marker>Marcus, Santorini, Marcinkiewicz, 1993</marker>
<rawString>Mitch Marcus, Beatrice Santorini, and Mary Ann Marcinkiewicz. 1993. Building a large annotated corpus of English: the Penn Treebank. Computational Linguistics, 19(4313-330.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Christian Matthiessen</author>
</authors>
<title>Systemic Grammar in computation: The Nigel case.</title>
<date>1984</date>
<booktitle>In Proceedings of the 1st Conference of the European Chapter of the Association for Computational Linguistics,</booktitle>
<pages>155--164</pages>
<location>Pisa, Italy.</location>
<marker>Matthiessen, 1984</marker>
<rawString>Christian Matthiessen. 1984. Systemic Grammar in computation: The Nigel case. In Proceedings of the 1st Conference of the European Chapter of the Association for Computational Linguistics, pages 155-164, Pisa, Italy.</rawString>
</citation>
<citation valid="true">
<authors>
<author>George Miller</author>
<author>Richard Beckwith</author>
<author>Cliristialie Fellbaurn</author>
<author>Derek Gross</author>
<author>Katherine Miller</author>
<author>Ranciee Tengi</author>
</authors>
<title>Five Papers on WordNet.</title>
<date>1993</date>
<institution>Princeton University,</institution>
<location>Princeton. N.J.</location>
<contexts>
<context position="12436" citStr="Miller et al., 1993" startWordPosition="2016" endWordPosition="2019">, and exceptions for specific words; also around 350 lines of C/Flex code for program initialisation and defining the functions called by the rule actions. The rule set is in fact obtained by automatically reversing a morphological analyser. This is a much enhanced version of the analyser originally developed for the GATE system (Cunningham et al., 1996). Minnen and Carroll (Under review) describe in detail how the reversal is performed. The generator executable occupies around 700Kb on disc. The analyser--and therefore the generator includes exception lists derived from WordNet (version 1.5: Miller et al., 1993). In addition. we have incorporated data acquired semi203 automatically from the following corpora and machine readable, dictionaries: the LOB corpus (Garside et al., 1987), the Penn Treebank (Marcus et al., 1993), the SUSANNE corpus (Sampson, 1995), the Spoken English Corpus (Taylor and Knowles, 1988), the Oxford Psycholinguistic Database (Quinlan, 1992), and the &amp;quot;Computer-Usable&amp;quot; version of the Oxford Advanced Learner&apos;s Dictionary of Current English (OALDCE; Mitton, 1992). 2.5 Evaluation Minnen and Carroll (Under review) report an evaluation of the accuracy of the morphological generator wit</context>
</contexts>
<marker>Miller, Beckwith, Fellbaurn, Gross, Miller, Tengi, 1993</marker>
<rawString>George Miller, Richard Beckwith, Cliristialie Fellbaurn, Derek Gross, Katherine Miller, and Ranciee Tengi. 1993. Five Papers on WordNet. Princeton University, Princeton. N.J.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Guido Minnen</author>
<author>John Carroll</author>
</authors>
<title>Under review. Fast and robust morphological processing tools for practical NLP applications.</title>
<marker>Minnen, Carroll, </marker>
<rawString>Guido Minnen and John Carroll. Under review. Fast and robust morphological processing tools for practical NLP applications.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Roger MAWR</author>
</authors>
<title>A description of a computer-usable dictionary File based on the Oxford Advanced Learner&apos;s Dictionary of Current English. Available at text-71 DAN. &gt; .</title>
<date>1992</date>
<marker>MAWR, 1992</marker>
<rawString>Roger MAWR. 1992. A description of a computer-usable dictionary File based on the Oxford Advanced Learner&apos;s Dictionary of Current English. Available at &lt;ftp://ota.ox.ac.iik/plib/otafpublic/dicts/710/ text-71 DAN. &gt; .</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mehryar Mohri</author>
</authors>
<title>On some applications of -a.utomata,-.theory.,to.,:naturaldan, . guage processing.</title>
<date>1996</date>
<journal>Natural Language Engineering,</journal>
<pages>2--0</pages>
<contexts>
<context position="22718" citStr="Mohri, 1996" startWordPosition="3683" endWordPosition="3684">(van Noord, 1991; Ritchie et al., 1992). The SRI Core Language Engine (Alshawi, 1992) uses a set of declarative segmentation rules which are similar in content to our rules and are used in reverse to generate word forms. The system, however, is not freely available, again requires an exhaustive stem lexicon, and the rules are not compiled into an efficiently executable finite-state machine but are only interpreted. The work that is perhaps the most similar in spirit to ours is that of the LADL group, in their compilation of large lexicons of inflected word forms into finite-state transducers (Mohri, 1996). The resulting analysers run at a comparable speed to our generator and the (compacted) executables are of similar size. However, a full form lexicon is unwieldy and inconvenient to update, and a system derived from it cannot cope gracefully with unknown words because it does not contain generalisations about regular or subregular morphological behaviour. The morphological components of current widely-used NLG systems tend to consist of hard-wired procedural code that is tightly bound to the workings of the rest of the system. For instance, the Nigel grammar (Matthie.ssen, 1984) contains Lisp</context>
</contexts>
<marker>Mohri, 1996</marker>
<rawString>Mehryar Mohri. 1996. On some applications of -a.utomata,-.theory.,to.,:naturaldan, . guage processing. Natural Language Engineering, 2(0:61-80.</rawString>
</citation>
<citation valid="true">
<title>Linguistic Databases. Lecture Notes.</title>
<date>1998</date>
<editor>John Nerbonne, editor.</editor>
<publisher>CSLI Publications,</publisher>
<location>Stanford., USA.</location>
<marker>1998</marker>
<rawString>John Nerbonne, editor. 1998. Linguistic Databases. Lecture Notes. CSLI Publications, Stanford., USA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Richard Power</author>
<author>Donia Scott</author>
<author>Roger Evans</author>
</authors>
<title>What You See Is What You Meant: direct knowledge .editing with naturaLlanguage feedback.</title>
<date>1998</date>
<booktitle>In Proceedings of the 13th Biennial European Conference on Artificial Intelligence (ECAI 98),</booktitle>
<location>Brighton, UK.</location>
<marker>Power, Scott, Evans, 1998</marker>
<rawString>Richard Power, Donia Scott, and Roger Evans. 1998. What You See Is What You Meant: direct knowledge .editing with naturaLlanguage feedback. In Proceedings of the 13th Biennial European Conference on Artificial Intelligence (ECAI 98), Brighton, UK.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Paul Procter</author>
</authors>
<title>Cambridge International Dictionary of English.</title>
<date>1995</date>
<publisher>Cambridge University Press.</publisher>
<contexts>
<context position="10479" citStr="Procter, 1995" startWordPosition="1709" endWordPosition="1710">sis of both orthographic and phonological information: when a word ends in one vowel 2ftu1e choice based on ordering in the description can in fact be overridden by arranging for the second or subsequent match to cover a larger part of the input so that the longest match heuristic applies (Levine et al., 1992). Hut note that the rules in (1) and (2) will always match the same input span_ 3Flex does not allow the use of rules that have Heniteal left-hand side regular expressions. followed by one consonant and the last part of the-word is - stressed-,--in: -general. the ,corisoriant is doubled (Procter, 1995). However there are exceptions to this, and in any case the input to the morphological generator does not contain information about stress. Consider the Flex rule in (3), where the symbols C and V abbreviate the character sets consisting of (upper and lower case) consonants and ,vowels,- respectively. (3) {A}*{C}{V}&amp;quot;t+ed_V&amp;quot; Ireturn(cb_wordform(0,&amp;quot;t&amp;quot;,&amp;quot;ed&amp;quot;));} Given the input submit-i-ed_V this rule correctly generates submitted. However, the verb to exhibit does not undergo consonant doubling so this rule will generate, incorrectly, the word form exhibitted. In order to ensure that the correct </context>
<context position="13986" citStr="Procter, 1995" startWordPosition="2267" endWordPosition="2268">lti-word entries (phrasal verbs, etc.) we were left with 38,882 out of the original 160,595 word forms. For each of these word forms we fed the corresponding input (derived automatically from the lemmatisation and inflection specification provided by CELEX) to the generator. We compared the generator output with the original CELEX word forms, producing a list of mistakes apparently made by the generator, which we then checked by hand. In a number of cases either the CELEX lemmatisation was wrong in that it disagreed with the relevant entry in the Cambridge International Dictionary of English (Procter, 1995), or the output of the generator was correct even though it was not identical to the word form given in CELEX. We did not count these cases as mistakes. We also found that CELEX is inconsistent with respect to consonant doubling. For example, it includes the word form pettifogged,1 whereas it omits many consonant doubled words that are much more common (according to counts from the BNC). For example, the BNC contains around 850 occurrences of the word form programming tagged as a verb. but this form is not present in CELEX. The form programing does occur in CELEX. but does not in the BNC. &apos;A r</context>
</contexts>
<marker>Procter, 1995</marker>
<rawString>Paul Procter. 1995. Cambridge International Dictionary of English. Cambridge University Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Geoffrey Pullum</author>
<author>Arnold Zwicky</author>
</authors>
<title>In preparation. Licensing of prosodic features by syntactic rules: the key to auxiliary reduction. First version presented to the Annual Meeting of the Linguistic Society of America,</title>
<date>1997</date>
<location>Chicago, Illinois,</location>
<note>Available at</note>
<marker>Pullum, Zwicky, 1997</marker>
<rawString>Geoffrey Pullum and Arnold Zwicky. In preparation. Licensing of prosodic features by syntactic rules: the key to auxiliary reduction. First version presented to the Annual Meeting of the Linguistic Society of America, Chicago, Illinois, January 1997. Available at &lt;http://www.lsadc.org/web2/99modabform.ht</rawString>
</citation>
<citation valid="true">
<authors>
<author>Philip Quinlan</author>
</authors>
<title>The Oxford Psycholinguistic Database.</title>
<date>1992</date>
<publisher>Oxford University Press.</publisher>
<contexts>
<context position="12793" citStr="Quinlan, 1992" startWordPosition="2074" endWordPosition="2075">n and Carroll (Under review) describe in detail how the reversal is performed. The generator executable occupies around 700Kb on disc. The analyser--and therefore the generator includes exception lists derived from WordNet (version 1.5: Miller et al., 1993). In addition. we have incorporated data acquired semi203 automatically from the following corpora and machine readable, dictionaries: the LOB corpus (Garside et al., 1987), the Penn Treebank (Marcus et al., 1993), the SUSANNE corpus (Sampson, 1995), the Spoken English Corpus (Taylor and Knowles, 1988), the Oxford Psycholinguistic Database (Quinlan, 1992), and the &amp;quot;Computer-Usable&amp;quot; version of the Oxford Advanced Learner&apos;s Dictionary of Current English (OALDCE; Mitton, 1992). 2.5 Evaluation Minnen and Carroll (Under review) report an evaluation of the accuracy of the morphological generator with respect to the CELEX lexical database (version 2.5; Baayen et al., 1993). This threw up a small number of errors which we have now fixed. We have rerun the CELEXbased evaluation: against the past tense, past and present participle, and third person singular present tense inflections of verbs, and all plural nouns. After excluding multi-word entries (phr</context>
</contexts>
<marker>Quinlan, 1992</marker>
<rawString>Philip Quinlan. 1992. The Oxford Psycholinguistic Database. Oxford University Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Graeme Ritchie</author>
<author>Graham Russell</author>
<author>Alan Black</author>
<author>Stephen Pulman</author>
</authors>
<title>Computational morphology: practical mechanisms for the English lexicon.</title>
<date>1992</date>
<publisher>MIT Press.</publisher>
<contexts>
<context position="22145" citStr="Ritchie et al., 1992" startWordPosition="3584" endWordPosition="3587">entation and morphological processing using the DATR representation language (Cahill, 1993; Evans and Gazdar, .1996). However, ..we,..adopt. less • of ar, theoreti-7. cal and more of an engineering perspective, focusing on morphological generation in the context of wide-coverage practical NLG applications. There are also parallels to research in the two-level morphology framework (Koskenniemi, 1983), although in contrast to our approach this framework has required exhaustive lexica and hand-crafted morphological (unification) grammars in addition to orthographic descriptions (van Noord, 1991; Ritchie et al., 1992). The SRI Core Language Engine (Alshawi, 1992) uses a set of declarative segmentation rules which are similar in content to our rules and are used in reverse to generate word forms. The system, however, is not freely available, again requires an exhaustive stem lexicon, and the rules are not compiled into an efficiently executable finite-state machine but are only interpreted. The work that is perhaps the most similar in spirit to ours is that of the LADL group, in their compilation of large lexicons of inflected word forms into finite-state transducers (Mohri, 1996). The resulting analysers r</context>
</contexts>
<marker>Ritchie, Russell, Black, Pulman, 1992</marker>
<rawString>Graeme Ritchie, Graham Russell, Alan Black, and Stephen Pulman. 1992. Computational morphology: practical mechanisms for the English lexicon. MIT Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Geoffrey Sampson</author>
</authors>
<title>English for the computer.</title>
<date>1995</date>
<publisher>Oxford University Press.</publisher>
<contexts>
<context position="12685" citStr="Sampson, 1995" startWordPosition="2059" endWordPosition="2060">h enhanced version of the analyser originally developed for the GATE system (Cunningham et al., 1996). Minnen and Carroll (Under review) describe in detail how the reversal is performed. The generator executable occupies around 700Kb on disc. The analyser--and therefore the generator includes exception lists derived from WordNet (version 1.5: Miller et al., 1993). In addition. we have incorporated data acquired semi203 automatically from the following corpora and machine readable, dictionaries: the LOB corpus (Garside et al., 1987), the Penn Treebank (Marcus et al., 1993), the SUSANNE corpus (Sampson, 1995), the Spoken English Corpus (Taylor and Knowles, 1988), the Oxford Psycholinguistic Database (Quinlan, 1992), and the &amp;quot;Computer-Usable&amp;quot; version of the Oxford Advanced Learner&apos;s Dictionary of Current English (OALDCE; Mitton, 1992). 2.5 Evaluation Minnen and Carroll (Under review) report an evaluation of the accuracy of the morphological generator with respect to the CELEX lexical database (version 2.5; Baayen et al., 1993). This threw up a small number of errors which we have now fixed. We have rerun the CELEXbased evaluation: against the past tense, past and present participle, and third perso</context>
</contexts>
<marker>Sampson, 1995</marker>
<rawString>Geoffrey Sampson. 1995. English for the computer. Oxford University Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stuart Shieber</author>
<author>Certjan van Noord</author>
<author>Robert Moore</author>
<author>Fernando Pereira</author>
</authors>
<date>1990</date>
<booktitle>Semantic head-driven generation. Computational Linguistics,</booktitle>
<pages>16--7</pages>
<marker>Shieber, van Noord, Moore, Pereira, 1990</marker>
<rawString>Stuart Shieber, Certjan van Noord, Robert Moore, and Fernando Pereira. 1990. Semantic head-driven generation. Computational Linguistics, 16(I):7-17_</rawString>
</citation>
<citation valid="true">
<authors>
<author>Lita Taylor</author>
<author>Gerry Knowles</author>
</authors>
<title>Manual of information to accompany the SEC Corpus: the machine-readable corpus of spoken English.</title>
<date>1988</date>
<tech>Manuscript,</tech>
<publisher>UK.</publisher>
<institution>University of Lancaster.</institution>
<contexts>
<context position="12739" citStr="Taylor and Knowles, 1988" startWordPosition="2066" endWordPosition="2069">ly developed for the GATE system (Cunningham et al., 1996). Minnen and Carroll (Under review) describe in detail how the reversal is performed. The generator executable occupies around 700Kb on disc. The analyser--and therefore the generator includes exception lists derived from WordNet (version 1.5: Miller et al., 1993). In addition. we have incorporated data acquired semi203 automatically from the following corpora and machine readable, dictionaries: the LOB corpus (Garside et al., 1987), the Penn Treebank (Marcus et al., 1993), the SUSANNE corpus (Sampson, 1995), the Spoken English Corpus (Taylor and Knowles, 1988), the Oxford Psycholinguistic Database (Quinlan, 1992), and the &amp;quot;Computer-Usable&amp;quot; version of the Oxford Advanced Learner&apos;s Dictionary of Current English (OALDCE; Mitton, 1992). 2.5 Evaluation Minnen and Carroll (Under review) report an evaluation of the accuracy of the morphological generator with respect to the CELEX lexical database (version 2.5; Baayen et al., 1993). This threw up a small number of errors which we have now fixed. We have rerun the CELEXbased evaluation: against the past tense, past and present participle, and third person singular present tense inflections of verbs, and all</context>
</contexts>
<marker>Taylor, Knowles, 1988</marker>
<rawString>Lita Taylor and Gerry Knowles. 1988. Manual of information to accompany the SEC Corpus: the machine-readable corpus of spoken English. Manuscript, University of Lancaster. UK.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Certjan van Noord</author>
</authors>
<date>1991</date>
<institution>University of Utrerlit, The Netherlands.</institution>
<note>Morphology in MiMo2. Manuscript,</note>
<marker>van Noord, 1991</marker>
<rawString>Certjan van Noord. 1991. Morphology in MiMo2. Manuscript, University of Utrerlit, The Netherlands.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>