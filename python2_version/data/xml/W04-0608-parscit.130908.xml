<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000001">
<title confidence="0.991874">
An Extensible Framework for Efficient Document Management Using
RDF and OWL
</title>
<author confidence="0.846307">
Erica Meena
</author>
<affiliation confidence="0.622079333333333">
Laboratory LORIA
Vandoeuvre-les-Nancy
France
</affiliation>
<email confidence="0.977213">
meena@loria.fr
</email>
<author confidence="0.660364">
Ashwani Kumar
</author>
<affiliation confidence="0.554238">
M.I.T
</affiliation>
<address confidence="0.862959">
Cambridge, MA
USA
</address>
<email confidence="0.998674">
ashwani@mit.edu
</email>
<author confidence="0.78726">
Laurent Romary
</author>
<affiliation confidence="0.556550333333333">
Laboratory LORIA
Vandoeuvre-les-Nancy
France
</affiliation>
<email confidence="0.945882">
romary@loria.fr
</email>
<sectionHeader confidence="0.994097" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999479846153846">
In this paper, we describe an integrated approach to-
wards dealing with various semantic and structural is-
sues associated with document management. We
provide motivations for using XML, RDF and OWL in
building a seamless architecture to serve not only as a
document exchange service but also to enable higher
level services such as annotations, metadata access and
querying. The key idea is to manifest differential treat-
ments for the actual document structure, semantic con-
tent of the document and ontological document
organization. The deployment of this architecture in the
PROTEUS project1 provides an industrial setting for
evaluation and further specification.
</bodyText>
<sectionHeader confidence="0.998211" genericHeader="introduction">
1. Introduction
</sectionHeader>
<bodyText confidence="0.999758235294118">
Digital documents are ubiquitously used to encode, pre-
serve as well as exchange useful information in order to
accomplish information sharing across the community.
As the growth in volumes of digital data is exponential,
it is necessary to adopt a principled way of managing
these documents. Besides, due to the distributed nature
of information, it is also imperative to take into account
the geographical and enterprise-level barriers for uni-
form data access and retrieval.
The ITEA (Information Technology for European Ad-
vancement) project, Proteus2 has similar objectives.
Proteus is a collaborative initiative of French, German
and Belgium companies, universities and research in-
stitutes aimed at developing a European generic soft-
ware platform usable for implementation of web-based
e-maintenance centers. It implements a generic archi-
tecture for integrated document management using ena-
</bodyText>
<footnote confidence="0.739642">
1 This material is based upon work supported by the ITEA (Information Tech-
nology for European Advancement) programme under Grant 01011 (2002).
2 http://www.proteus-iteaproject.com/
</footnote>
<bodyText confidence="0.998953240740741">
bling technologies such as XML, RDF and OWL. Most
of the existing document management systems ([1], [2])
limit themselves in the scope of application or document
formats or simply neglect any structure-based analysis.
However, considering our requirements, it is obvious
that only a multi-layered functional architecture can
cover various issues related to distributed document
management such as localized vs global structural con-
straints, conceptual definition of documents, reasoning-
based discovery etc.
Indeed, evolving technologies such as XML (eXtensible
Markup Language), RDF (Resource Description
Framework) and OWL (Web Ontology Language) pro-
vide us with rich set of application frameworks that if
applied intelligently, can help a great deal in solving
these problems. XML ([3]) is primarily designed for
low-level structural descriptions. It provides a tree of
structured nodes, which can be efficiently used to de-
scribe documents and check their models using DTDs
(Document Type Definitions) or XML Schemas. Be-
sides, XML enables easy human readability as well as
efficient machine interpretability. However, there are
issues if we only deal with the structural aspect. If one
wants to pick some semantic information from a docu-
ment, there is no straightforward way other than to con-
strain it by an schema or make an application hand-
programmed to recognize certain document-specific
semantics. Furthermore, if the schema changes over
time, it could typically introduce new intermediate ele-
ments. This might have the consequences of invalidat-
ing certain queries and creating incoherencies in the
semantic data-model of the document.
RDF (Resource Description Framework) and OWL
(Web Ontology Language) build upon the XML syntax
to describe the actual semantics of a document and pro-
vide useful reasoning and inference mechanisms. RDF
([4]) specifies graphs of nodes, which are connected by
directed arcs representing relational predicates such as
URIs (Uniform Resource Identifiers) and encode the
conceptual model of the real world. Unlike XML, an
RDF schema is a simple vocabulary language. The
parse of the semantic graph results in a set of triples,
which mimic predicate-argument conceptual structures.
OWL can be used on top of these semantic structures to
do logical reasoning and discover relations that are not
explicit and obvious.
In the following sections we discuss how we use these
technologies to enable a generic document management
system. Firstly, in Section 2 we describe the document
management and the Proteus architecture followed by
discussion on Annotations in Section 3. Section 4 pro-
vides brief account of the model theoretic access
mechanisms enabled by OWL followed by description
of data categories in Section 5.
</bodyText>
<sectionHeader confidence="0.992056" genericHeader="method">
2. Document Management Architecture
</sectionHeader>
<bodyText confidence="0.999918225">
Without differentiating at the level of content, layout
and formats, we treat documents as information re-
sources. These information resources can potentially be
distributed across various document repositories called
e-Doc servers. Figure 2.1 demonstrates a simplified
distributed document management system. The archi-
tecture shows how three different document repositories
could co-exist functionally along with the Annotea en-
abled annotation framework ([5]). These servers imple-
ment procedural mechanisms for query access and
retrieval of documents. Besides, these documents can be
annotated and the annotations reside on an independent
server known as the annotation server, which also
serves as a document server. Principally, annotations
can be viewed as information resources, which are de-
scribed in RDF.
ers though distinct at the level of data flow and
individual processing of information, afford function-
alities that are exploited by the e-Doc server.
Figure 2.2 shows various such layers of the e-Doc
server. On the foundation level, it is assumed that every
document on the e-Doc server adheres to a single syntax
i.e. XML, which represents the top most layer in the
architecture. The second layer depicts the access points
that are broadly categorized along various dimensions
such as metadata, conceptual/ontology system and ter-
minology. A detailed description of the access points
will be carried out in the Section 4. The e-Doc server is
assumed to be flexible enough to handle all possible
ontology formats/standards whether it is a native XML
document or a text or a picture/video data coming from
some streaming applications. This forms the third im-
portant layer of the e-Doc server. The bottom layer rep-
resents Annotations [6], which adheres to the RDF [4]
syntax. This layer forms an integral part of the e-Doc
server as it enables annotation capability and RDF-
describable semantics to the actively retrieved document
or existing documents in the server [7]. Besides, RDF
also provides the opportunity to utilize annotations as
access points for the documents.
</bodyText>
<figure confidence="0.998948555555556">
XML Syntax
Meta-data Conceptual Terminology
(1 doc) system
Native XML (n ontogies) Application
document Misc. textual Picture/ Data (XML)
format Videos
RDF
Document
server
Access
points
Document
Annotations
Query
Retrieve
View
User
Comment
</figure>
<figureCaption confidence="0.994036">
Figure 2.2: General Organization of the e-Doc Server
Figure 2.1: Simplified view of the distributed document
server architecture
</figureCaption>
<bodyText confidence="0.9994914">
The e-Doc server consists of several functional layers
that inter-communicate and holistically, serve the cu-
mulative purpose of document management. These lay-
As can be seen from the Figure 2.2, a user interacts with
the server through a client interface by launching his
queries. The architecture provides the user ample flexi-
bility in utilizing different levels of descriptions for re-
trieving documents by providing variety of access
points. In the following sections, we describe each of
these access layers in more detail.
</bodyText>
<listItem confidence="0.766886">
3. Annotations: Specified as RDF Model
</listItem>
<bodyText confidence="0.998495125">
Annotations form the most abstract layer within the e-
Doc architecture. They can be broadly defined as com-
ments, notes, explanations, or other types of external
remarks that can be attached to either a document or a
sub portion of a document. As annotations are consid-
ered external, it is possible to annotate a document as a
whole or in part without actually editing its content or
structure. Conceptually, annotations can be considered
</bodyText>
<figure confidence="0.96222525">
TEI/XML Doc
Server 1
TEI/XML Doc
Annotea
Server 2
RDF
Server 3
TEI/XML Doc
</figure>
<bodyText confidence="0.998767882352941">
as metadata, as they give additional information about
an existing piece of data. Annotations can have many
distinguishing properties, which can be broadly classi-
fied as:-
Physical location:- An annotation can be stored
locally or on one or more annotation servers;
Scope:- An annotation can be associated with a
document as a whole or to a sub-portion of a
document.
Annotation type:- Annotations can have vari-
ous functional types such as, “Comment”,
“Remark”, “Query” e.t.c....
Due to this abstract nature and multiplicity of functional
types, a formal treatment of annotations is often un-
wieldy. Therefore, it is desired to have a semantically
driven structural representation for annotations, which
we describe below.
</bodyText>
<subsectionHeader confidence="0.902472">
Annotation Semantics
</subsectionHeader>
<bodyText confidence="0.999545090909091">
Annotations are stored in one or multiple annotation
servers. These servers endorse exchange protocols as
specified by Annotea [5]. Essentially, the Annotation
Server can be regarded as a general purpose RDF store,
with additional mechanisms for optimized queries and
access. This RDF store is built on top of a general SQL
store. Annotations are stored in a generic RDF database
accessible through an Apache HTTP server (see Figure
3.1). All communication between a client and an anno-
tation server uses the standard HTTP methods such as
POST or GET.
</bodyText>
<figureCaption confidence="0.763386">
Figure 3.1: Access to the Annotation server
</figureCaption>
<bodyText confidence="0.999503444444444">
Annotations have metadata associated with them, which
is modeled according to an RDF schema and encode
information such as date of creation of the annotation,
name of the author, the annotation type (e.g. comment,
query, correction) the URI [8] of the annotated docu-
ment, and an Xpointer [9] that specifies what part of the
document was annotated, and the URI to the body of the
annotation which is assumed to be an XHTML [10]
document (Figure 3.2).
</bodyText>
<figure confidence="0.95472288">
&lt;rdf:RDF
xmlns:NS0=&apos;http://www.w3.org/2000/10
/annotation-ns#&apos;
...&gt;
&lt;dc:creator&gt;Ashwani&lt;/dc:creator&gt;
&lt;rdf:type
rdf:resource=&apos;http://www.w3.org/2000
/10/annotation-ns#Annotation&apos;/&gt;
&lt;NS1:origin rdf:nodeID=&apos;A0&apos;/&gt;
&lt;NS0:created&gt;2004-05-
24T01:11Z&lt;/NS0:created&gt;
&lt;NS0:annotates
rdf:resource=&apos;http://docB4.teiSpec.o
rg&apos;/&gt; &lt;rdf:type
rdf:resource=&apos;http://www.w3.org/2000
/10/annotationType#Comment&apos;/&gt;
&lt;NS0:body rdf:resource=&apos;Please re-
view this document.&apos;/&gt;
&lt;dc:title&gt;review&lt;/dc:title&gt;
&lt;dc:date&gt;2004-05-24T01:11Z&lt;/dc:date&gt;
&lt;/rdf:Description&gt; &lt;rdf:Description
rdf:nodeID=&apos;A1&apos;&gt;
....
&lt;/rdf:Description&gt;
&lt;/rdf:RDF&gt;
</figure>
<figureCaption confidence="0.996876">
Figure 3.2: An abridged Annotation in RDF
</figureCaption>
<bodyText confidence="0.999387">
Xpointers are used to point to the Annotated portions
within the document, while Xlinks [11] are used to
setup a link between the Document and it&apos;s annotation.
</bodyText>
<subsectionHeader confidence="0.908488">
Annotation Operations
</subsectionHeader>
<bodyText confidence="0.99998356">
The user makes a selection of the text to be annotated
and provides the annotation along with other details
such as author name, date of creation, type of annota-
tion, URI of the annotated document etc. The annota-
tions are published using standard HTTP POST method.
To do this the client generates an RDF description of the
annotation that includes the metadata and the body and
sends it to the server. The annotation server receives the
data and assigns a URI to the annotation i.e. the body,
while metadata is identified by the URI of the Docu-
ment.
For annotation retrieval, the client queries the annota-
tion server via the HTTP GET method, requesting the
annotation metadata by means of the document&apos;s URI.
The annotation server replies with an RDF-specified list
of the annotation metadata. For each list of annotations
that the client receives, it parses the metadata of each
annotation, resolves the Xpointer of the annotation, and
if successful, highlights the annotated text. If the user
clicks on the highlighted text, the browser uses an
HTTP GET method to fetch the body of the annotation
from the URI specified in the metadata.
The following are the broad categories of the annotation
functions implemented by the annotation server:
Annotate a document as a whole.
</bodyText>
<figure confidence="0.9637762">
Client
Query
interface
http
POST
http GET
Annotation Server
SQL store
RDF
database
</figure>
<bodyText confidence="0.937156285714286">
Annotate a portion of a document.
Query to access all the annotations for a par-
ticular document.
Query to access type specific or any of the
metadata property specific annotations, which
serve as query parameters for all the annotated
documents.
</bodyText>
<sectionHeader confidence="0.845745" genericHeader="method">
4. Model Based Access: Using OWL
</sectionHeader>
<bodyText confidence="0.99993553125">
As described in the previous section, the RDF layer
provides an enhanced mechanism for querying and ac-
cessing a document. However, to enable full-fledged
management of documents, it is imperative to incorpo-
rate some reasoning-based abstract semantics such as
OWL (Web Ontology Language) over a cluster of
documents. OWL provides formal mechanisms for de-
scribing ontology of documents. By doing so, the ar-
chitecture can provide flexible access points as well as
logical inference mechanisms, which are necessary
while performing metadata queries.
Access points play an important role by providing flexi-
bility and intuitiveness in access mechanisms to the
user. Figure 4.1 depicts a very basic characterization of
the access points. As it is illustrated in the figure, a spe-
cific access point is needed to direct a query to attain
certain desired result set. Within the Proteus framework,
the e-doc architecture provides a model driven specifi-
cation of access points such as metadata-based, onto-
logical, or terminological model. The model driven
approach has strong significance in the sense that every
access point is associated by certain abstract informa-
tion structure so that it provides transparency to the que-
ries, which remain independent from actual
implementation and data formats (e.g. XML DTD).
Even though these models are independent, they are
flexible enough to interact among themselves. For ex-
ample, results of queries on one model can act as a ref-
erence for another model. The references may be
transformed into document excerpts by requests made
synchronously at the query stage or asynchronously
when the user wants to visualize the information.
</bodyText>
<figureCaption confidence="0.90754">
Figure 4.1 Characterization of Access Points
</figureCaption>
<subsectionHeader confidence="0.858035">
Terminological Access:
</subsectionHeader>
<bodyText confidence="0.997305727272727">
Terminology can be defined as the description of spe-
cialized vocabulary of an application domain. As it
contains a nomenclature of technical terms, it is capable
of providing a conceptual view of the domain. Termi-
nology can be either monolingual or multilingual by
nature. Monolinguality specifies a one to one relation
between a term and a concept or a term to its equiva-
lences or a term to the related documents, while mul-
tilinguality specifies relation between term to certain
target terms or term to certain target documents.
The Following is a simplified Proteus terminology ex-
</bodyText>
<figure confidence="0.805591538461538">
ample:
&lt;struct type=“TE”&gt;[Terminological
Entry]
&lt;feat type=“definition”
xml:lang=”fr”&gt; Dispositif
permettant d&apos;imprimer un
déplacement linéaire ou angulaire A
un élément mobile. &lt;/feat&gt;
&lt;struct type=“LS”&gt;[Language Section]
&lt;feat type=“language”&gt;fr&lt;/feat&gt;
&lt;struct type=“TS”&gt;[Term Section]
&lt;feat type=“term”&gt;vérin&lt;/feat&gt;
&lt;struct type=“TCS”&gt;[Term Component
Section]
&lt;feat type=“partOfSpeech”&gt;
noun
&lt;/feat&gt;
.....
&lt;/struct&gt;
Description of terminological model
A general terminological model contains a Termino-
logical entry section, a Language section and a Term
section.
Terminological Entry
/Language/
/Note/
</figure>
<bodyText confidence="0.9959728">
Figure 4.2 describes a simplified terminology model -
the terminological section contains entries such as iden-
tifier, subject field, definition, and explanations etc.,
where as the other sections such as the language and the
term sections contain details regarding the language
</bodyText>
<figure confidence="0.9446315">
Search primitives
Ontological
references
or
data excerpts
Data server1
Data serveri
Data servern
Query Result
Access point
Data Source
Term Section
/Term/
/Term
</figure>
<figureCaption confidence="0.750356">
Figure 4.2 Simplified terminological model
</figureCaption>
<figure confidence="0.9981885">
/Entry
identifier/
/Subject field/
/Definition/
/Explanation/
/Example/
/Note/
Language Section
</figure>
<bodyText confidence="0.998708230769231">
used and the term status respectively. This can also be
seen within the sample Proteus terminology described
above.
Terminological access is significant in cases where the
user is aware of the specific term and needs to make a
search within the related domain to access certain
documents of his interest. For example, an operator of a
firm might be willing to retrieve all the maintenance
documents related to the term “Pump”. Thanks to the
terminological access point, the operator needs nothing
but just the term to launch his query and retrieve the
desired document. The above-mentioned scenario is
depicted in Figure 4.3
</bodyText>
<figure confidence="0.961042666666667">
Terminological system
Operator
E-doc
</figure>
<figureCaption confidence="0.999603">
Figure 4.3: A Sample Terminological Access
</figureCaption>
<bodyText confidence="0.993878157894737">
Terminological access plays a dual role. On one hand it
acts as a data source providing support for finding mono
or multilingual equivalences or linguistic descriptions.
On the other hand, it provides access for on-line docu-
ments. When seen as a data source, it can also provide
indexing support for manual indexing and can perform
semi-automated indexing:
Graphic files (drawings, pictures, video,
scanned texts etc): manual indexing
Text files: semi-automatic indexing; suggestion
of descriptors to be confirmed by a human ex-
pert
Data, e.g. from monitoring: automatic indexing
with metadata.
Terminological model serves as a gateway to the Ontol-
ogy-based Conceptual model of the domain (Figure
4.4). Use of a technical term as a query parameter re-
lates to set of relevant concepts, which can further be
used to retrieve the desired set of documents.
</bodyText>
<figure confidence="0.560192">
Conceptual system Terminological system
</figure>
<figureCaption confidence="0.8871265">
Figure 4.4 interaction of terminological model with
other models
</figureCaption>
<subsectionHeader confidence="0.856024">
Meta-Data Access
</subsectionHeader>
<bodyText confidence="0.999665333333333">
Metadata can be loosely defined as “data about data”..
Specifically, metadata encodes certain attributive infor-
mation about the data, in our case documents, which can
be used to access data. Within this platform the meta-
model can be seen as a meta-tree of nodes in which
every node refers to certain precise set of information
descriptors. For example, Dublin Core descriptors such
as title, author, date, publisher, etc can potentially be
represented as nodes in the description trees.
</bodyText>
<subsectionHeader confidence="0.602677">
Meta-model Description
</subsectionHeader>
<bodyText confidence="0.9929891875">
This Meta-model is discussed keeping the specific
Dublin Core [12] model in mind. Meta model consists
of three basic components, a Resource, an Element, and
its value.
Resource – the object being described.
Element – a characteristic or property of the
Resource.
Value – the literal value corresponding to the
Element.
Figure 4.5 shows a simplified view of the Dublin core
reference model, within which the Element Qualifiers
are nothing but additional attributes that further specify
the relationship of the element to the resource. On the
other hand, the value qualifiers can be described as ad-
ditional attributes that further specify the relationship of
the value to the element.
</bodyText>
<figure confidence="0.99819">
PUMP
List of available maintenance docs
Turbine
Links
(hasDoc)
Suggestions
(concepts!)
E-doc User
</figure>
<figureCaption confidence="0.995943">
Figure 4.5: Simplified view of the Dublin Core refer-
ence model.
</figureCaption>
<figure confidence="0.957302545454546">
For Example:
Element = Creator
Component = Firstname Value = Ashwani
Component = Lastname Value = Kumar
Component = Email Value = ashwani@kumar.com
Element = Contributor
Value = fn:Erica Meena; org:DSTC
Type = Illustrator
Encoding = vCard
Resource= http://www.loria.fr/projets/proteus/RDU/NOTE-
PIR 20040304.html
</figure>
<bodyText confidence="0.999197888888889">
Access of documents by means of metadata is a very
important as well as a practical usage, as the user can
directly retrieve a well defined piece of information,
under the condition that he knows a small number of
“facts” about the information: e.g. the authors name, the
date, the reference number or the date of a previous
maintenance. This corresponds to a typical situation
within the Proteus framework (see Figure 4.6). Meta-
data access, in other way, can be seen as an advanced
index functionality, which can update itself and grow
automatically in the same form as the amount of stored
information grows.
For example:
While sorting documents by date or type, the date, time,
source or author information can always be automati-
cally collected. However, in case of a new maintenance
document, advanced metadata can be collected by ask-
ing a human to enter it into the system.
</bodyText>
<figureCaption confidence="0.873353">
Figure 4.6: Document access via metadata
</figureCaption>
<bodyText confidence="0.9998285">
Metadata model can be seen as an enhanced search
mechanism. A sequence of access points i.e. terminol-
ogy followed by metadata, when launched can help in
refining the search along an attribute dimension.
</bodyText>
<subsectionHeader confidence="0.976285">
Ontology Access
</subsectionHeader>
<bodyText confidence="0.9985555">
Ontology is a hierarchy of concepts or in other way a
platform for describing the concepts used within a spe-
cific domain, maintenance in our case. Its independence
with regard to specific model or format makes it inter-
operable. For example, one can have an ontology repre-
sented in a UML [13] class diagram whereas the same
ontology can be represented in an XML schema. As
already discussed, Ontology is complementary to termi-
nology in terms of attribution of concepts to terms.
Conceptually, it serves as an abstract structure, which
can be populated by the interested parties and thus, can
serve as a very important access point. An abridged
example of an abstract Proteus OWL [14] ontology ver-
sion can be seen in the figure 4.7
</bodyText>
<figure confidence="0.99665">
&lt;?xml version=&amp;quot;1.0&amp;quot;?&gt;
&lt;rdf:RDF
xmlns:owl=&amp;quot;http://www.w3.org/2002/07/ow
l#&amp;quot;
xmlns:gmoloc=&amp;quot;http://www.proteus.com/GM
O/locations#&amp;quot;&gt;
&lt;owl:Ontology rdf:about=&amp;quot;&amp;quot;&gt;
&lt;rdf:comment&gt;The Engineering compo-
nent of the PIR&lt;/rdf:comment&gt;
&lt;/owl:Ontology&gt;
&lt;owl:Class rdf:ID=&amp;quot;Contract&amp;quot;&gt;
&lt;rdfs:subClassOf&gt;
&lt;owl:Class rdf:ID=&amp;quot;Document&amp;quot;/&gt;
&lt;/rdfs:subClassOf&gt;
&lt;/owl:Class&gt;
&lt;owl:Class rdf:ID=&amp;quot;Manager&amp;quot;&gt;
&lt;rdfs:subClassOf&gt;
&lt;owl:Class rdf:ID=&amp;quot;Actor&amp;quot;/&gt;
&lt;/rdfs:subClassOf&gt;
&lt;/owl:Class&gt;
&lt;/rdf:RDF&gt;
</figure>
<figureCaption confidence="0.991359">
Figure 4.7: An example of Proteus ontology
</figureCaption>
<subsectionHeader confidence="0.633152">
Ontology model description
</subsectionHeader>
<bodyText confidence="0.9954744">
As per the requirements of the Proteus project, an ontol-
ogy model comprises of a three-tiered structure. The
three layers consist of General concepts (General
Maintenance Ontology), Application Profiles, and the
industrial contexts respectively. These layers are built
up keeping in mind the interoperability with other ex-
ternal applications. As can be seen from the Figure 4.8
below, the general concept layer has the highest
interoperability as it contains basic level concepts such
as Actors, Documents, Location, Equipments etc. The
</bodyText>
<figure confidence="0.9456735">
List of available mai
0 r
ntenance docs
Dublin Core
Title: name of the client
2 Creator: name of the method agent
3 Subject: Equipment ID
Description: type of equipment
5 Publisher: CEF CIGMA division
Contributor: division out of CIGMA
6
Date: date of the draw-up
7 Type: procedure, FMECA, ...
8 Format: .doc, .ppt, . xls (not useful)
</figure>
<footnote confidence="0.523218857142857">
9 Identifier: name of the site (location)
Source: former version
Language: French, English, German
Relation: related FMECA, procedure,
video, pictures, ...
Coverage: equipment location
Rights: public, confidential
</footnote>
<page confidence="0.459662">
E-�oc
</page>
<bodyText confidence="0.9992746875">
second layer (Application Profiles) consists of concepts,
which are specific to a certain application, for instance
pertinent to a train manufacturing company, or an avia-
tion company. All the layers are bound to inherit con-
cepts, but not necessarily all from the first layer (general
concept), which in turn forms the parent layer of all
other layers. The third layer (Industrial contexts) con-
tains concepts very specific to an industry for instance,
car manufacturing companies such as Ford, GM etc.
Instances can be derived only from the last layer i.e. the
Industrial contexts layer.
The model is open for external sources i.e. ontology
from external sources can be merged within each layer,
for example, SUMO [15], which is a higher-level ontol-
ogy. It contains very general concepts, which can be
used directly within our ontology.
</bodyText>
<figureCaption confidence="0.756652">
Figure 4.8: Proteus Ontology model
</figureCaption>
<bodyText confidence="0.999047173913043">
OWL-DL is used for specifying the ontological model
as it provides the following advantages:
Basic support for describing classification hier-
archies and simple constraint features. e.g. mi-
gration path for thesauri and other taxonomies;
Rich expressiveness;
Computational completeness and decidability;
Allows imports of OWL Lite simple descrip-
tion;
Allows consistency checks across description
levels;
Existence of optimized inference platforms.
E.g. Racer [16].
In a way, ontology access is a complementary approach
to the terminology access, as terminology structure de-
scribes the global concept behind a thematic domain,
but does not deliver a functional description of the do-
main. The ontology access exactly provides this func-
tional description (as is usually needed in the
maintenance domain). The concept remains global when
referring to a generic class of entities and gets specific
when describing a particular entity type. Apart from the
normal functionality of this access point, it can be very
important when combined with retrieval by natural lan-
guage and by visual elements (hierarchy structured sets
of pictures). In a way we can see ontology as an empty
structure with user-defined class relationships, which
can be filled with visual elements (photos, drawing,
scheme) and then the referring terms.
For example Figure 4.9 depicts visual search of docu-
ments via ontology. In order to avoid complexity, only
recommended terms are used to name the objects repre-
sented by the visual elements. Other terms can be left
apart pointing to plain concepts (without visual con-
cepts). The index of the metadata tool could be virtually
integrated into the index administrated by the terminol-
ogy tool. This enables a two-step-search, beginning with
a word and then finding the actually searched item not
by selecting a more specific term from the terminology
tool, but by looking for a picture of the searched item in
the functional concept. This index could also be virtu-
ally integrated into the index of the functional concept.
Thus the user could situate the search results provided
by the metadata tool within the functional structure of
the maintained equipment (instead of getting designa-
tion, ID-Number, description and meta data only).
</bodyText>
<figureCaption confidence="0.708672">
Figure 4.9: Visual search of documents via ontology
</figureCaption>
<sectionHeader confidence="0.97839" genericHeader="method">
5. Data Category Specification
</sectionHeader>
<bodyText confidence="0.999799666666667">
The various models (terminology, annotations, etc.) and
functionalities (access primitives to an e-doc server)
have to be defined in such a way that a similar piece of
information (e.g. author, subject field, term, etc.) means
the same thing from one place to another. Such a se-
mantic definition of data categories (in the terminology
of ISO committee TC 37) acts in complementary to an
ontology such as the one we define in the Proteus sys-
tem since it is intended to be a general purpose layer of
descriptors that may be used in other environments than
that of a specific project. Therefore, we adopted a simi-
lar methodology as that of the efforts within the ISO TC
37 committee to deploy a data category registry of all
descriptors used in the project as reference semantic
units described in accordance to ISO standard 11179
</bodyText>
<figure confidence="0.996845333333334">
Conceptual system
portal
List of available
maintenance docs,
parameters setting,
user manual
Maintenance doc
(including
needed tools),
Operator
dedicated to one single site
of
E-Doc
External High interoperability
General concepts
(GMO)
Application profiles
Industrial contexts
Example
Actors, Location, Documents,
Equipment
Car manufacturing company
FORD
Low interoperability
Instances
Ford Tech
Report
</figure>
<bodyText confidence="0.997738625">
(metadata registries). Such a registry plays a double
role:
It provides unique entry point (of formal public
identifier) for any model that refers to it;
It gives a precise description of the data cate-
gory by means of a definition and associated
documentation (examples, application notes,
etc.).
</bodyText>
<sectionHeader confidence="0.99928" genericHeader="conclusions">
6. Conclusions
</sectionHeader>
<bodyText confidence="0.9999966">
We have provided a brief account of how document
structure and inherent semantics can be captured and
processed efficiently by the emerging technologies such
as XML, RDF and OWL. By doing so, we have brought
innovations in correlating different levels of document
management with respect to various services afforded
by these technologies. The differential treatment of
structure, content and organization provides ample
flexibility and extensibility, which are the primary re-
quirements for such a system.
</bodyText>
<sectionHeader confidence="0.999118" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999760961538462">
[1]Lagoze C, Dienst - An Architecture for Distributed
Document Libraries, Communications of the ACM,
Vol. 38, No 4, April 1995. 12
[2]Satoshi Wakayama, Yasuki Ito, Toshihiko Fukuda
and Kanji Kato, Distributed Object-Based Applica-
tions for Document Management, Hitachi Review
Vol. 47 (1998), No.6
[3]Tim Bray, Jean Paoli, C. M. Sperberg-McQueen,
Extensible Markup Language (XML) 1.0., eds.W3C
Recommendation 10-February-1998.
[4]Swick Lassila, Resource Description Framework
(RDF) Model and Syntax Specification., World Wide
Web Consortium Recommendation, 1999.
http://www.w3.org/TR/REC-rdf-syntax/.
[5]José Kahan, Marja-Riitta Koivunen, Eric Prud&apos;Hom-
meaux, and Ralph R. Swick, Annotea: An Open RDF
Infrastructure for shared Web Annotations, in Proc.
of the WWW10 International Conference, Hong
Kong, May 2001.
[6]The W3C Collaborative Web Annotation Project ...
or how to have fun while building an RDF infra-
structure. http://www.w3.org/2000/Talks/www9-
annotations/Overview.html.
[7]N. F. Noy, M. Sintek, S. Decker, M. Crubezy, R. W.
Fergerson, &amp; M. A. Musen. Creating Semantic Web
Contents with Protege-2000. IEEE Intelligent Sys-
tems 16(2):60-71, 2001.
[8]T. Berners-Lee, R. Fielding, and L. Masinter, Uni-
form Resource Identifiers (URI): Generic Syntax,
IETF Draft Standard August 1998 (RFC 2396).
[9]XML Pointer Language. http://www.w3.orgwtr/xptr/
[10]The Extensible HyperText Markup Language.
http://www.w3.org/TR/xhtml1/
[11]XML Linking Language.
http://www.w3.org/TR/xlink/
[12]Dublin Core Metadata Initiative. OCLC, Dublin
Ohio. http://purl.org/dc/ .
[13]Unified Modeling Language Home Page.
http://uml.org/ .
[14]Deborah L. McGuinness and Frank van Harmelen,
OWL Web Ontology Language Overview, W3C
Proposed Recommendation, 15 December 2003.
http://www.w3.org/TR/owl-features/.
[15]Niles, I., and Pease, A. 2001. Towards a Standard
Upper Ontology. In Proceedings of the 2nd Interna-
tional Conference on Formal Ontology in Informa-
tion Systems (FOIS-2001), Chris Welty and Barry
Smith, eds, Ogunquit, Maine, October 17-19, 2001.
[16]V.Haarslev and R. Moller. Description of the
RACER system and its applications. In DL2001
Workshop on Description Logics, Stanford, CA,
2001.
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.195807">
<title confidence="0.9983455">An Extensible Framework for Efficient Document Management RDF and OWL</title>
<author confidence="0.989235">Erica Meena</author>
<affiliation confidence="0.6275125">Laboratory LORIA Vandoeuvre-les-Nancy</affiliation>
<address confidence="0.618037">France</address>
<email confidence="0.987757">meena@loria.fr</email>
<author confidence="0.997481">Ashwani Kumar</author>
<affiliation confidence="0.974669">M.I.T</affiliation>
<address confidence="0.9946175">Cambridge, MA USA</address>
<email confidence="0.999715">ashwani@mit.edu</email>
<author confidence="0.996056">Laurent Romary</author>
<affiliation confidence="0.6990505">Laboratory LORIA Vandoeuvre-les-Nancy</affiliation>
<address confidence="0.851006">France</address>
<email confidence="0.997178">romary@loria.fr</email>
<abstract confidence="0.997227071428572">In this paper, we describe an integrated approach towards dealing with various semantic and structural issues associated with document management. We provide motivations for using XML, RDF and OWL in building a seamless architecture to serve not only as a document exchange service but also to enable higher level services such as annotations, metadata access and querying. The key idea is to manifest differential treatments for the actual document structure, semantic content of the document and ontological document organization. The deployment of this architecture in the provides an industrial setting for evaluation and further specification.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>C Lagoze</author>
<author>Dienst</author>
</authors>
<title>An Architecture for Distributed Document Libraries,</title>
<date>1995</date>
<journal>Communications of the ACM,</journal>
<volume>38</volume>
<pages>12</pages>
<contexts>
<context position="2141" citStr="[1]" startWordPosition="306" endWordPosition="306">ctives. Proteus is a collaborative initiative of French, German and Belgium companies, universities and research institutes aimed at developing a European generic software platform usable for implementation of web-based e-maintenance centers. It implements a generic architecture for integrated document management using ena1 This material is based upon work supported by the ITEA (Information Technology for European Advancement) programme under Grant 01011 (2002). 2 http://www.proteus-iteaproject.com/ bling technologies such as XML, RDF and OWL. Most of the existing document management systems ([1], [2]) limit themselves in the scope of application or document formats or simply neglect any structure-based analysis. However, considering our requirements, it is obvious that only a multi-layered functional architecture can cover various issues related to distributed document management such as localized vs global structural constraints, conceptual definition of documents, reasoningbased discovery etc. Indeed, evolving technologies such as XML (eXtensible Markup Language), RDF (Resource Description Framework) and OWL (Web Ontology Language) provide us with rich set of application frameworks</context>
</contexts>
<marker>[1]</marker>
<rawString>Lagoze C, Dienst - An Architecture for Distributed Document Libraries, Communications of the ACM, Vol. 38, No 4, April 1995. 12</rawString>
</citation>
<citation valid="true">
<authors>
<author>Satoshi Wakayama</author>
</authors>
<title>Yasuki Ito, Toshihiko Fukuda and Kanji Kato, Distributed Object-Based Applications for Document Management,</title>
<date>1998</date>
<journal>Hitachi Review</journal>
<volume>47</volume>
<contexts>
<context position="2146" citStr="[2]" startWordPosition="307" endWordPosition="307">s. Proteus is a collaborative initiative of French, German and Belgium companies, universities and research institutes aimed at developing a European generic software platform usable for implementation of web-based e-maintenance centers. It implements a generic architecture for integrated document management using ena1 This material is based upon work supported by the ITEA (Information Technology for European Advancement) programme under Grant 01011 (2002). 2 http://www.proteus-iteaproject.com/ bling technologies such as XML, RDF and OWL. Most of the existing document management systems ([1], [2]) limit themselves in the scope of application or document formats or simply neglect any structure-based analysis. However, considering our requirements, it is obvious that only a multi-layered functional architecture can cover various issues related to distributed document management such as localized vs global structural constraints, conceptual definition of documents, reasoningbased discovery etc. Indeed, evolving technologies such as XML (eXtensible Markup Language), RDF (Resource Description Framework) and OWL (Web Ontology Language) provide us with rich set of application frameworks that</context>
</contexts>
<marker>[2]</marker>
<rawString>Satoshi Wakayama, Yasuki Ito, Toshihiko Fukuda and Kanji Kato, Distributed Object-Based Applications for Document Management, Hitachi Review Vol. 47 (1998), No.6</rawString>
</citation>
<citation valid="false">
<booktitle>Extensible Markup Language (XML) 1.0., eds.W3C Recommendation 10-February-1998.</booktitle>
<editor>Tim Bray, Jean Paoli, C. M. Sperberg-McQueen,</editor>
<contexts>
<context position="2830" citStr="[3]" startWordPosition="403" endWordPosition="403">ect any structure-based analysis. However, considering our requirements, it is obvious that only a multi-layered functional architecture can cover various issues related to distributed document management such as localized vs global structural constraints, conceptual definition of documents, reasoningbased discovery etc. Indeed, evolving technologies such as XML (eXtensible Markup Language), RDF (Resource Description Framework) and OWL (Web Ontology Language) provide us with rich set of application frameworks that if applied intelligently, can help a great deal in solving these problems. XML ([3]) is primarily designed for low-level structural descriptions. It provides a tree of structured nodes, which can be efficiently used to describe documents and check their models using DTDs (Document Type Definitions) or XML Schemas. Besides, XML enables easy human readability as well as efficient machine interpretability. However, there are issues if we only deal with the structural aspect. If one wants to pick some semantic information from a document, there is no straightforward way other than to constrain it by an schema or make an application handprogrammed to recognize certain document-sp</context>
</contexts>
<marker>[3]</marker>
<rawString>Tim Bray, Jean Paoli, C. M. Sperberg-McQueen, Extensible Markup Language (XML) 1.0., eds.W3C Recommendation 10-February-1998.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Swick Lassila</author>
</authors>
<title>Resource Description Framework (RDF) Model and Syntax Specification., World Wide Web Consortium Recommendation,</title>
<date>1999</date>
<note>http://www.w3.org/TR/REC-rdf-syntax/.</note>
<contexts>
<context position="3891" citStr="[4]" startWordPosition="567" endWordPosition="567">there is no straightforward way other than to constrain it by an schema or make an application handprogrammed to recognize certain document-specific semantics. Furthermore, if the schema changes over time, it could typically introduce new intermediate elements. This might have the consequences of invalidating certain queries and creating incoherencies in the semantic data-model of the document. RDF (Resource Description Framework) and OWL (Web Ontology Language) build upon the XML syntax to describe the actual semantics of a document and provide useful reasoning and inference mechanisms. RDF ([4]) specifies graphs of nodes, which are connected by directed arcs representing relational predicates such as URIs (Uniform Resource Identifiers) and encode the conceptual model of the real world. Unlike XML, an RDF schema is a simple vocabulary language. The parse of the semantic graph results in a set of triples, which mimic predicate-argument conceptual structures. OWL can be used on top of these semantic structures to do logical reasoning and discover relations that are not explicit and obvious. In the following sections we discuss how we use these technologies to enable a generic document </context>
<context position="6607" citStr="[4]" startWordPosition="985" endWordPosition="985">n the architecture. The second layer depicts the access points that are broadly categorized along various dimensions such as metadata, conceptual/ontology system and terminology. A detailed description of the access points will be carried out in the Section 4. The e-Doc server is assumed to be flexible enough to handle all possible ontology formats/standards whether it is a native XML document or a text or a picture/video data coming from some streaming applications. This forms the third important layer of the e-Doc server. The bottom layer represents Annotations [6], which adheres to the RDF [4] syntax. This layer forms an integral part of the e-Doc server as it enables annotation capability and RDFdescribable semantics to the actively retrieved document or existing documents in the server [7]. Besides, RDF also provides the opportunity to utilize annotations as access points for the documents. XML Syntax Meta-data Conceptual Terminology (1 doc) system Native XML (n ontogies) Application document Misc. textual Picture/ Data (XML) format Videos RDF Document server Access points Document Annotations Query Retrieve View User Comment Figure 2.2: General Organization of the e-Doc Server F</context>
</contexts>
<marker>[4]</marker>
<rawString>Swick Lassila, Resource Description Framework (RDF) Model and Syntax Specification., World Wide Web Consortium Recommendation, 1999. http://www.w3.org/TR/REC-rdf-syntax/.</rawString>
</citation>
<citation valid="true">
<authors>
<author>José Kahan</author>
<author>Marja-Riitta Koivunen</author>
<author>Eric Prud&apos;Hommeaux</author>
<author>Ralph R Swick</author>
</authors>
<title>Annotea: An Open RDF Infrastructure for shared Web Annotations,</title>
<date>2001</date>
<booktitle>in Proc. of the WWW10 International Conference,</booktitle>
<location>Hong Kong,</location>
<contexts>
<context position="5289" citStr="[5]" startWordPosition="773" endWordPosition="773">he model theoretic access mechanisms enabled by OWL followed by description of data categories in Section 5. 2. Document Management Architecture Without differentiating at the level of content, layout and formats, we treat documents as information resources. These information resources can potentially be distributed across various document repositories called e-Doc servers. Figure 2.1 demonstrates a simplified distributed document management system. The architecture shows how three different document repositories could co-exist functionally along with the Annotea enabled annotation framework ([5]). These servers implement procedural mechanisms for query access and retrieval of documents. Besides, these documents can be annotated and the annotations reside on an independent server known as the annotation server, which also serves as a document server. Principally, annotations can be viewed as information resources, which are described in RDF. ers though distinct at the level of data flow and individual processing of information, afford functionalities that are exploited by the e-Doc server. Figure 2.2 shows various such layers of the e-Doc server. On the foundation level, it is assumed</context>
<context position="9232" citStr="[5]" startWordPosition="1390" endWordPosition="1390">e:- An annotation can be associated with a document as a whole or to a sub-portion of a document. Annotation type:- Annotations can have various functional types such as, “Comment”, “Remark”, “Query” e.t.c.... Due to this abstract nature and multiplicity of functional types, a formal treatment of annotations is often unwieldy. Therefore, it is desired to have a semantically driven structural representation for annotations, which we describe below. Annotation Semantics Annotations are stored in one or multiple annotation servers. These servers endorse exchange protocols as specified by Annotea [5]. Essentially, the Annotation Server can be regarded as a general purpose RDF store, with additional mechanisms for optimized queries and access. This RDF store is built on top of a general SQL store. Annotations are stored in a generic RDF database accessible through an Apache HTTP server (see Figure 3.1). All communication between a client and an annotation server uses the standard HTTP methods such as POST or GET. Figure 3.1: Access to the Annotation server Annotations have metadata associated with them, which is modeled according to an RDF schema and encode information such as date of crea</context>
</contexts>
<marker>[5]</marker>
<rawString>José Kahan, Marja-Riitta Koivunen, Eric Prud&apos;Hommeaux, and Ralph R. Swick, Annotea: An Open RDF Infrastructure for shared Web Annotations, in Proc. of the WWW10 International Conference, Hong Kong, May 2001.</rawString>
</citation>
<citation valid="false">
<title>The W3C Collaborative Web Annotation Project ... or how to have fun while building an RDF infrastructure.</title>
<note>http://www.w3.org/2000/Talks/www9-annotations/Overview.html.</note>
<contexts>
<context position="6577" citStr="[6]" startWordPosition="979" endWordPosition="979">epresents the top most layer in the architecture. The second layer depicts the access points that are broadly categorized along various dimensions such as metadata, conceptual/ontology system and terminology. A detailed description of the access points will be carried out in the Section 4. The e-Doc server is assumed to be flexible enough to handle all possible ontology formats/standards whether it is a native XML document or a text or a picture/video data coming from some streaming applications. This forms the third important layer of the e-Doc server. The bottom layer represents Annotations [6], which adheres to the RDF [4] syntax. This layer forms an integral part of the e-Doc server as it enables annotation capability and RDFdescribable semantics to the actively retrieved document or existing documents in the server [7]. Besides, RDF also provides the opportunity to utilize annotations as access points for the documents. XML Syntax Meta-data Conceptual Terminology (1 doc) system Native XML (n ontogies) Application document Misc. textual Picture/ Data (XML) format Videos RDF Document server Access points Document Annotations Query Retrieve View User Comment Figure 2.2: General Orga</context>
</contexts>
<marker>[6]</marker>
<rawString>The W3C Collaborative Web Annotation Project ... or how to have fun while building an RDF infrastructure. http://www.w3.org/2000/Talks/www9-annotations/Overview.html.</rawString>
</citation>
<citation valid="true">
<authors>
<author>N F Noy</author>
<author>M Sintek</author>
<author>S Decker</author>
<author>M Crubezy</author>
<author>R W Fergerson</author>
<author>M A Musen</author>
</authors>
<title>Creating Semantic Web Contents with</title>
<date>2001</date>
<booktitle>Protege-2000. IEEE Intelligent Systems 16(2):60-71,</booktitle>
<contexts>
<context position="6809" citStr="[7]" startWordPosition="1017" endWordPosition="1017">of the access points will be carried out in the Section 4. The e-Doc server is assumed to be flexible enough to handle all possible ontology formats/standards whether it is a native XML document or a text or a picture/video data coming from some streaming applications. This forms the third important layer of the e-Doc server. The bottom layer represents Annotations [6], which adheres to the RDF [4] syntax. This layer forms an integral part of the e-Doc server as it enables annotation capability and RDFdescribable semantics to the actively retrieved document or existing documents in the server [7]. Besides, RDF also provides the opportunity to utilize annotations as access points for the documents. XML Syntax Meta-data Conceptual Terminology (1 doc) system Native XML (n ontogies) Application document Misc. textual Picture/ Data (XML) format Videos RDF Document server Access points Document Annotations Query Retrieve View User Comment Figure 2.2: General Organization of the e-Doc Server Figure 2.1: Simplified view of the distributed document server architecture The e-Doc server consists of several functional layers that inter-communicate and holistically, serve the cumulative purpose of</context>
</contexts>
<marker>[7]</marker>
<rawString>N. F. Noy, M. Sintek, S. Decker, M. Crubezy, R. W. Fergerson, &amp; M. A. Musen. Creating Semantic Web Contents with Protege-2000. IEEE Intelligent Systems 16(2):60-71, 2001.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Berners-Lee</author>
<author>R Fielding</author>
<author>L Masinter</author>
</authors>
<title>Uniform Resource Identifiers (URI): Generic Syntax,</title>
<date>1998</date>
<booktitle>IETF Draft Standard</booktitle>
<contexts>
<context position="9941" citStr="[8]" startWordPosition="1506" endWordPosition="1506">nisms for optimized queries and access. This RDF store is built on top of a general SQL store. Annotations are stored in a generic RDF database accessible through an Apache HTTP server (see Figure 3.1). All communication between a client and an annotation server uses the standard HTTP methods such as POST or GET. Figure 3.1: Access to the Annotation server Annotations have metadata associated with them, which is modeled according to an RDF schema and encode information such as date of creation of the annotation, name of the author, the annotation type (e.g. comment, query, correction) the URI [8] of the annotated document, and an Xpointer [9] that specifies what part of the document was annotated, and the URI to the body of the annotation which is assumed to be an XHTML [10] document (Figure 3.2). &lt;rdf:RDF xmlns:NS0=&apos;http://www.w3.org/2000/10 /annotation-ns#&apos; ...&gt; &lt;dc:creator&gt;Ashwani&lt;/dc:creator&gt; &lt;rdf:type rdf:resource=&apos;http://www.w3.org/2000 /10/annotation-ns#Annotation&apos;/&gt; &lt;NS1:origin rdf:nodeID=&apos;A0&apos;/&gt; &lt;NS0:created&gt;2004-05- 24T01:11Z&lt;/NS0:created&gt; &lt;NS0:annotates rdf:resource=&apos;http://docB4.teiSpec.o rg&apos;/&gt; &lt;rdf:type rdf:resource=&apos;http://www.w3.org/2000 /10/annotationType#Comment&apos;/&gt; &lt;NS</context>
</contexts>
<marker>[8]</marker>
<rawString>T. Berners-Lee, R. Fielding, and L. Masinter, Uniform Resource Identifiers (URI): Generic Syntax, IETF Draft Standard August 1998 (RFC 2396).</rawString>
</citation>
<citation valid="false">
<authors>
<author>XML Pointer Language</author>
</authors>
<note>http://www.w3.orgwtr/xptr/</note>
<contexts>
<context position="9988" citStr="[9]" startWordPosition="1515" endWordPosition="1515">F store is built on top of a general SQL store. Annotations are stored in a generic RDF database accessible through an Apache HTTP server (see Figure 3.1). All communication between a client and an annotation server uses the standard HTTP methods such as POST or GET. Figure 3.1: Access to the Annotation server Annotations have metadata associated with them, which is modeled according to an RDF schema and encode information such as date of creation of the annotation, name of the author, the annotation type (e.g. comment, query, correction) the URI [8] of the annotated document, and an Xpointer [9] that specifies what part of the document was annotated, and the URI to the body of the annotation which is assumed to be an XHTML [10] document (Figure 3.2). &lt;rdf:RDF xmlns:NS0=&apos;http://www.w3.org/2000/10 /annotation-ns#&apos; ...&gt; &lt;dc:creator&gt;Ashwani&lt;/dc:creator&gt; &lt;rdf:type rdf:resource=&apos;http://www.w3.org/2000 /10/annotation-ns#Annotation&apos;/&gt; &lt;NS1:origin rdf:nodeID=&apos;A0&apos;/&gt; &lt;NS0:created&gt;2004-05- 24T01:11Z&lt;/NS0:created&gt; &lt;NS0:annotates rdf:resource=&apos;http://docB4.teiSpec.o rg&apos;/&gt; &lt;rdf:type rdf:resource=&apos;http://www.w3.org/2000 /10/annotationType#Comment&apos;/&gt; &lt;NS0:body rdf:resource=&apos;Please review this documen</context>
</contexts>
<marker>[9]</marker>
<rawString>XML Pointer Language. http://www.w3.orgwtr/xptr/</rawString>
</citation>
<citation valid="false">
<title>The Extensible HyperText Markup Language.</title>
<note>http://www.w3.org/TR/xhtml1/</note>
<contexts>
<context position="10123" citStr="[10]" startWordPosition="1541" endWordPosition="1541">ver (see Figure 3.1). All communication between a client and an annotation server uses the standard HTTP methods such as POST or GET. Figure 3.1: Access to the Annotation server Annotations have metadata associated with them, which is modeled according to an RDF schema and encode information such as date of creation of the annotation, name of the author, the annotation type (e.g. comment, query, correction) the URI [8] of the annotated document, and an Xpointer [9] that specifies what part of the document was annotated, and the URI to the body of the annotation which is assumed to be an XHTML [10] document (Figure 3.2). &lt;rdf:RDF xmlns:NS0=&apos;http://www.w3.org/2000/10 /annotation-ns#&apos; ...&gt; &lt;dc:creator&gt;Ashwani&lt;/dc:creator&gt; &lt;rdf:type rdf:resource=&apos;http://www.w3.org/2000 /10/annotation-ns#Annotation&apos;/&gt; &lt;NS1:origin rdf:nodeID=&apos;A0&apos;/&gt; &lt;NS0:created&gt;2004-05- 24T01:11Z&lt;/NS0:created&gt; &lt;NS0:annotates rdf:resource=&apos;http://docB4.teiSpec.o rg&apos;/&gt; &lt;rdf:type rdf:resource=&apos;http://www.w3.org/2000 /10/annotationType#Comment&apos;/&gt; &lt;NS0:body rdf:resource=&apos;Please review this document.&apos;/&gt; &lt;dc:title&gt;review&lt;/dc:title&gt; &lt;dc:date&gt;2004-05-24T01:11Z&lt;/dc:date&gt; &lt;/rdf:Description&gt; &lt;rdf:Description rdf:nodeID=&apos;A1&apos;&gt; .... &lt;/rdf:</context>
</contexts>
<marker>[10]</marker>
<rawString>The Extensible HyperText Markup Language. http://www.w3.org/TR/xhtml1/</rawString>
</citation>
<citation valid="false">
<authors>
<author>XML Linking Language</author>
</authors>
<note>http://www.w3.org/TR/xlink/</note>
<contexts>
<context position="10881" citStr="[11]" startWordPosition="1598" endWordPosition="1598">//www.w3.org/2000 /10/annotation-ns#Annotation&apos;/&gt; &lt;NS1:origin rdf:nodeID=&apos;A0&apos;/&gt; &lt;NS0:created&gt;2004-05- 24T01:11Z&lt;/NS0:created&gt; &lt;NS0:annotates rdf:resource=&apos;http://docB4.teiSpec.o rg&apos;/&gt; &lt;rdf:type rdf:resource=&apos;http://www.w3.org/2000 /10/annotationType#Comment&apos;/&gt; &lt;NS0:body rdf:resource=&apos;Please review this document.&apos;/&gt; &lt;dc:title&gt;review&lt;/dc:title&gt; &lt;dc:date&gt;2004-05-24T01:11Z&lt;/dc:date&gt; &lt;/rdf:Description&gt; &lt;rdf:Description rdf:nodeID=&apos;A1&apos;&gt; .... &lt;/rdf:Description&gt; &lt;/rdf:RDF&gt; Figure 3.2: An abridged Annotation in RDF Xpointers are used to point to the Annotated portions within the document, while Xlinks [11] are used to setup a link between the Document and it&apos;s annotation. Annotation Operations The user makes a selection of the text to be annotated and provides the annotation along with other details such as author name, date of creation, type of annotation, URI of the annotated document etc. The annotations are published using standard HTTP POST method. To do this the client generates an RDF description of the annotation that includes the metadata and the body and sends it to the server. The annotation server receives the data and assigns a URI to the annotation i.e. the body, while metadata is</context>
</contexts>
<marker>[11]</marker>
<rawString>XML Linking Language. http://www.w3.org/TR/xlink/</rawString>
</citation>
<citation valid="false">
<authors>
<author>Dublin Core</author>
</authors>
<title>Metadata Initiative. OCLC,</title>
<location>Dublin Ohio.</location>
<note>http://purl.org/dc/ .</note>
<contexts>
<context position="18360" citStr="[12]" startWordPosition="2745" endWordPosition="2745">her models Meta-Data Access Metadata can be loosely defined as “data about data”.. Specifically, metadata encodes certain attributive information about the data, in our case documents, which can be used to access data. Within this platform the metamodel can be seen as a meta-tree of nodes in which every node refers to certain precise set of information descriptors. For example, Dublin Core descriptors such as title, author, date, publisher, etc can potentially be represented as nodes in the description trees. Meta-model Description This Meta-model is discussed keeping the specific Dublin Core [12] model in mind. Meta model consists of three basic components, a Resource, an Element, and its value. Resource – the object being described. Element – a characteristic or property of the Resource. Value – the literal value corresponding to the Element. Figure 4.5 shows a simplified view of the Dublin core reference model, within which the Element Qualifiers are nothing but additional attributes that further specify the relationship of the element to the resource. On the other hand, the value qualifiers can be described as additional attributes that further specify the relationship of the value</context>
</contexts>
<marker>[12]</marker>
<rawString>Dublin Core Metadata Initiative. OCLC, Dublin Ohio. http://purl.org/dc/ .</rawString>
</citation>
<citation valid="false">
<institution>Unified Modeling Language Home Page.</institution>
<note>http://uml.org/ .</note>
<contexts>
<context position="20880" citStr="[13]" startWordPosition="3152" endWordPosition="3152">ected by asking a human to enter it into the system. Figure 4.6: Document access via metadata Metadata model can be seen as an enhanced search mechanism. A sequence of access points i.e. terminology followed by metadata, when launched can help in refining the search along an attribute dimension. Ontology Access Ontology is a hierarchy of concepts or in other way a platform for describing the concepts used within a specific domain, maintenance in our case. Its independence with regard to specific model or format makes it interoperable. For example, one can have an ontology represented in a UML [13] class diagram whereas the same ontology can be represented in an XML schema. As already discussed, Ontology is complementary to terminology in terms of attribution of concepts to terms. Conceptually, it serves as an abstract structure, which can be populated by the interested parties and thus, can serve as a very important access point. An abridged example of an abstract Proteus OWL [14] ontology version can be seen in the figure 4.7 &lt;?xml version=&amp;quot;1.0&amp;quot;?&gt; &lt;rdf:RDF xmlns:owl=&amp;quot;http://www.w3.org/2002/07/ow l#&amp;quot; xmlns:gmoloc=&amp;quot;http://www.proteus.com/GM O/locations#&amp;quot;&gt; &lt;owl:Ontology rdf:about=&amp;quot;&amp;quot;&gt; &lt;rd</context>
</contexts>
<marker>[13]</marker>
<rawString>Unified Modeling Language Home Page. http://uml.org/ .</rawString>
</citation>
<citation valid="true">
<authors>
<author>Deborah L McGuinness</author>
<author>Frank van Harmelen</author>
</authors>
<date>2003</date>
<journal>OWL Web Ontology Language Overview, W3C Proposed Recommendation,</journal>
<volume>15</volume>
<note>http://www.w3.org/TR/owl-features/.</note>
<contexts>
<context position="21271" citStr="[14]" startWordPosition="3216" endWordPosition="3216">the concepts used within a specific domain, maintenance in our case. Its independence with regard to specific model or format makes it interoperable. For example, one can have an ontology represented in a UML [13] class diagram whereas the same ontology can be represented in an XML schema. As already discussed, Ontology is complementary to terminology in terms of attribution of concepts to terms. Conceptually, it serves as an abstract structure, which can be populated by the interested parties and thus, can serve as a very important access point. An abridged example of an abstract Proteus OWL [14] ontology version can be seen in the figure 4.7 &lt;?xml version=&amp;quot;1.0&amp;quot;?&gt; &lt;rdf:RDF xmlns:owl=&amp;quot;http://www.w3.org/2002/07/ow l#&amp;quot; xmlns:gmoloc=&amp;quot;http://www.proteus.com/GM O/locations#&amp;quot;&gt; &lt;owl:Ontology rdf:about=&amp;quot;&amp;quot;&gt; &lt;rdf:comment&gt;The Engineering component of the PIR&lt;/rdf:comment&gt; &lt;/owl:Ontology&gt; &lt;owl:Class rdf:ID=&amp;quot;Contract&amp;quot;&gt; &lt;rdfs:subClassOf&gt; &lt;owl:Class rdf:ID=&amp;quot;Document&amp;quot;/&gt; &lt;/rdfs:subClassOf&gt; &lt;/owl:Class&gt; &lt;owl:Class rdf:ID=&amp;quot;Manager&amp;quot;&gt; &lt;rdfs:subClassOf&gt; &lt;owl:Class rdf:ID=&amp;quot;Actor&amp;quot;/&gt; &lt;/rdfs:subClassOf&gt; &lt;/owl:Class&gt; &lt;/rdf:RDF&gt; Figure 4.7: An example of Proteus ontology Ontology model description As per the requ</context>
</contexts>
<marker>[14]</marker>
<rawString>Deborah L. McGuinness and Frank van Harmelen, OWL Web Ontology Language Overview, W3C Proposed Recommendation, 15 December 2003. http://www.w3.org/TR/owl-features/.</rawString>
</citation>
<citation valid="true">
<authors>
<author>I Niles</author>
<author>A Pease</author>
</authors>
<title>Towards a Standard Upper Ontology.</title>
<date>2001</date>
<booktitle>In Proceedings of the 2nd International Conference on Formal Ontology in Information Systems (FOIS-2001), Chris Welty and</booktitle>
<location>eds, Ogunquit, Maine,</location>
<contexts>
<context position="23665" citStr="[15]" startWordPosition="3551" endWordPosition="3551">ce pertinent to a train manufacturing company, or an aviation company. All the layers are bound to inherit concepts, but not necessarily all from the first layer (general concept), which in turn forms the parent layer of all other layers. The third layer (Industrial contexts) contains concepts very specific to an industry for instance, car manufacturing companies such as Ford, GM etc. Instances can be derived only from the last layer i.e. the Industrial contexts layer. The model is open for external sources i.e. ontology from external sources can be merged within each layer, for example, SUMO [15], which is a higher-level ontology. It contains very general concepts, which can be used directly within our ontology. Figure 4.8: Proteus Ontology model OWL-DL is used for specifying the ontological model as it provides the following advantages: Basic support for describing classification hierarchies and simple constraint features. e.g. migration path for thesauri and other taxonomies; Rich expressiveness; Computational completeness and decidability; Allows imports of OWL Lite simple description; Allows consistency checks across description levels; Existence of optimized inference platforms. </context>
</contexts>
<marker>[15]</marker>
<rawString>Niles, I., and Pease, A. 2001. Towards a Standard Upper Ontology. In Proceedings of the 2nd International Conference on Formal Ontology in Information Systems (FOIS-2001), Chris Welty and Barry Smith, eds, Ogunquit, Maine, October 17-19, 2001.</rawString>
</citation>
<citation valid="true">
<authors>
<author>V Haarslev</author>
<author>R Moller</author>
</authors>
<title>Description of the RACER system and its applications.</title>
<date>2001</date>
<booktitle>In DL2001 Workshop on Description Logics,</booktitle>
<location>Stanford, CA,</location>
<contexts>
<context position="24280" citStr="[16]" startWordPosition="3637" endWordPosition="3637">a higher-level ontology. It contains very general concepts, which can be used directly within our ontology. Figure 4.8: Proteus Ontology model OWL-DL is used for specifying the ontological model as it provides the following advantages: Basic support for describing classification hierarchies and simple constraint features. e.g. migration path for thesauri and other taxonomies; Rich expressiveness; Computational completeness and decidability; Allows imports of OWL Lite simple description; Allows consistency checks across description levels; Existence of optimized inference platforms. E.g. Racer [16]. In a way, ontology access is a complementary approach to the terminology access, as terminology structure describes the global concept behind a thematic domain, but does not deliver a functional description of the domain. The ontology access exactly provides this functional description (as is usually needed in the maintenance domain). The concept remains global when referring to a generic class of entities and gets specific when describing a particular entity type. Apart from the normal functionality of this access point, it can be very important when combined with retrieval by natural langu</context>
</contexts>
<marker>[16]</marker>
<rawString>V.Haarslev and R. Moller. Description of the RACER system and its applications. In DL2001 Workshop on Description Logics, Stanford, CA, 2001.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>