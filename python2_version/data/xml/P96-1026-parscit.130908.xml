<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.001913">
<title confidence="0.9940955">
Two Sources of Control over the Generation of Software
Instructions*
</title>
<author confidence="0.987562">
Anthony Hartley
</author>
<affiliation confidence="0.9896285">
Language Centre
University of Brighton, Falmer
</affiliation>
<address confidence="0.995981">
Brighton BN1 9PH, UK
</address>
<email confidence="0.999421">
afh@itri.bton.ac.uk
</email>
<sectionHeader confidence="0.999564" genericHeader="abstract">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999914884615385">
Our work addresses the generation of software manu-
als in French and English, starting from a semantic
model of the task to be documented (Paris et al.,
1995). Our prime concern is to be able to exercise
control over the mapping from the task model to the
generated text. We set out to establish whether the
task model alone is sufficient to control the linguis-
tic output of a text generation system, or whether
additional control is required. In this event, an ob-
vious source to explore is the communicative pur-
pose of the author, which is not necessarily constant
throughout a manual. Indeed, in a typical software
manual, it is possible to distinguish at least three
sections, each with a different purpose: a tutorial
containing exercises for new users, a series of step-
by-step instructions for the major tasks to be ac-
complished, and a ready-reference summary of the
commands.
We need, therefore, to characterise the linguis-
tic expressions of the different elements of the task
model, and to establish whether these expressions
are sensitive or not to their context, that is, the
functional section in which they appear. This pa-
per presents the results of an analysis we conducted
to this end on a corpus of software instructions in
French.
</bodyText>
<sectionHeader confidence="0.997467" genericHeader="keywords">
2 Methodology
</sectionHeader>
<bodyText confidence="0.9867085">
The methodology we employed is similar to that en-
dorsed by (Biber, 1995). It is summarised as follows:
</bodyText>
<listItem confidence="0.701663">
1. Collect the texts and note their situational char-
acteristics. We consider two such character-
</listItem>
<footnote confidence="0.845911666666667">
This work is partially supported by the Engineering
and Physical Sciences Research Council (EPsRc) Grant
J19221, by BC/DAAD ARC Project 293, by the Commis-
</footnote>
<affiliation confidence="0.849845">
sion of the European Union Grant LRE-62009, and by
the Office of Naval Research Grant N00014-96-1-0465.
t Starting this fall, Dr. Paris&apos; address will be CSIRO,
Division of Information Technology, Sydney Laboratory,
Building E6B, Macquarie University Campus, North
Ryde, Sydney, NSW 2113, Australia.
</affiliation>
<author confidence="0.878899">
Cecile Parist
</author>
<affiliation confidence="0.998146">
Information Technology Research Institute
University of Brighton, Lewes Road
</affiliation>
<address confidence="0.969787">
Brighton BN2 4AT, UK
</address>
<email confidence="0.735639">
clpeitri.brighton.ac.uk
</email>
<bodyText confidence="0.5540295">
istics: task structure and communicative pur-
pose.
</bodyText>
<listItem confidence="0.968183555555556">
2. Identify the range of linguistic features to be
included in the analysis;
3. Code the corpus in terms of the selected fea-
tures;
4. Compute the frequency count of each linguistic
feature;
5. Identify co-occurrences between linguistic fea-
tures and the situational characteristics under
consideration.
</listItem>
<bodyText confidence="0.999864611111111">
We first carried out a classical sublanguage analy-
sis on our corpus as a whole, without differentiating
between any of the situational characteristics (Hart-
ley and Paris, 1995). This initial description was
necessary to give us a clear statement of the lin-
guistic potential required of our text generator, to
which we could relate any restrictions on language
imposed by situational variables. Thus we can ac-
count for language restrictions by appealing to gen-
eral discourse principles, in keeping with the recom-
mendations of (Kittredge, 1995) and (Biber, 1995)
for the definition of sublanguages.
We then correlated task elements with grammati-
cal features. Finally, where linguistic realisation was
under-determined by task structure alone, we estab-
lished whether the communicative purpose provided
more discriminating control over the linguistic re-
sources available.
</bodyText>
<sectionHeader confidence="0.8513805" genericHeader="introduction">
3 Linguistic Framework: Systemic
Functional Linguistics
</sectionHeader>
<bodyText confidence="0.9966351">
Our analysis was carried out within the framework
of Systemic-Functional Linguistics (sFL) (Halliday,
1978; Halliday, 1985) which views language as a re-
source for the creation of meaning. SFL stratifies
meaning into context and language. The strata of
the linguistic resources are organised into networks
of choices, each choice resulting in a different mean-
ing realised (i.e., expressed) by appropriate struc-
tures. The emphasis is on paradigmatic choices, as
opposed to syntagmatic structures. Choices made in
</bodyText>
<page confidence="0.997414">
192
</page>
<bodyText confidence="0.99991948">
each stratum constrain the choices available in the
stratum beneath. Context thus constrains language.
This framework was chosen for several reasons.
First, the organisation of linguistic resources accord-
ing to this principle is well-suited to natural lan-
guage generation, where the starting point is nec-
essarily a communicative goal, and the task is to
find the most appropriate expression for the in-
tended meaning (Matthiessen and Bateman, 1991).
Second, a functional perspective offers an advan-
tage for multilingual text generation, because of its
ability to achieve a level of linguistic description
which holds across languages more effectively than
do structurally-based accounts. The approach has
been shown capable of supporting the sharing of lin-
guistic resources between languages as structurally
distinct as English and Japanese (Bateman et al.,
1991a; Bateman et al., 1991b). It is therefore rea-
sonable to expect that at least the same degree of
commonality of description is achievable between
English and French within this framework. Finally,
KPML (Bateman, 1994), the tactical generator we
employ, is based on SFL, and it is thus appropriate
for us to characterise the corpus in terms immedi-
ately applicable to our generator.
</bodyText>
<sectionHeader confidence="0.967335" genericHeader="method">
4 Coding features
</sectionHeader>
<bodyText confidence="0.980751">
Our lexico-grammatical coding was done using the
networks and features of the Nigel grammar (Hal-
liday, 1985). We focused on four main concerns,
guided by previous work on instructional texts, e.g.,
(Lehrberger, 1986; Plum et al., 1990; Ghadessy,
1993; Kosseim and Lapalme, 1994).
</bodyText>
<listItem confidence="0.991942652173913">
• Relations between processes: to determine
whether textual cohesion was achieved
through conjunctives or through relations
implicit in the task structure elements.
Among the features considered were clause
dependency and conjunction type.
• Agency: to see whether the actor perform-
ing or enabling a particular action is clearly
identified, and whether the reader is explic-
itly addressed. We coded here for features
such as voice and agent types.
• Mood, modality and polarity: to find out
the extent to which actions are presented
to the reader as being desirable, possible,
mandatory, or prohibited. We coded for
both true and implicit negatives, and for
both personal and impersonal expressions
of modality.
• Process types: to see how the domain is
construed in terms of actions on the part
of the user and the software. We coded for
sub-categories of material, mental, verbal
and relational processes.
</listItem>
<sectionHeader confidence="0.970953" genericHeader="method">
5 The Corpus
</sectionHeader>
<bodyText confidence="0.999807620689655">
The analysis was conducted on the French version
of the Macintosh MacWrite manual (Kaehler, 1983).
The manual is derived from an English source by a
process of adaptive translation (Sager, 1993), i.e.,
one which localises the text to the expectations of
the target readership. The fact that the translation
is adaptive rather than literal gives us confidence in
using this manual for our analysis.&apos; Furthermore,
we know that Macintosh documentation undergoes
thorough local quality control. It certainly conforms
to the principles of good documentation established
by current research on technical documentation and
on the needs of end-users, e.g., (Carroll, 1994; Ham-
mond, 1994), in that it supplies clear and concise
information for the task at hand. Finally, we have
been assured by French users of the software that
they consider this particular manual to be well writ-
ten and to bear no unnatural trace of its origins.
Technical manuals within a specific domain con-
stitute a sublanguage, e.g., (Kittredge, 1982; Sager
et at., 1980). An important defining property of a
sublanguage is that of closure, both lexical and syn-
tactic. Lexical closure has been demonstrated by, for
example, (Kittredge, 1987), who shows that after as
few as the first 2000 words of a sublanguage text,
the number of new word types increases little if at
all. Other work, e.g., (Biber, 1988; Biber, 1989) and
(Grishman and Kittredge, 1986) illustrates the prop-
erty of syntactic closure, which means that generally
available constructions just do not occur in this or
that sublanguage. In the light of these results, we
considered a corpus of 15000 words to be adequate
for our purposes, at least for an initial analysis.
The MacWrite manual is organised into three
chapters, corresponding to the three different sec-
tions identified earlier: a tutorial, a series of step-
by-step instructions for the major word-processing
tasks, and a ready-reference summary of the com-
mands. We omitted the tutorial because the gen-
eration of such text is not our concern, retaining
the other two chapters which provide the user with
generic instructions for performing relevant tasks,
and descriptions of the commands available within
MacWrite. The overlap in information between the
two chapters offers opportunities to observe differ-
ences in the linguistic expressions of the same task
structure elements in different contexts.
1We would have preferred to use a manual which orig-
inated in French to exclude all possibility of interfer-
ence from a source language, but this proved impossi-
ble. Surprisingly, it appears that large French compa-
nies often have their documents authored in English by
francophones and subsequently translated into French.
One large French software house that we contacted does
author its documentation in French, but had registered
considerable customer dissatisfaction with its quality.
We decided, therefore, that their material would be un-
suitable for our purposes.
</bodyText>
<page confidence="0.993313">
193
</page>
<figure confidence="0.908805">
Goals: La selection
Gloss: Selection
Pour selectionner un mot, (faites un double-clic sur le mot)
Gloss: To select a word, (do a double-click on the word)
Functions: (Fermer Get article permet de fermer une fenetre activee
Gloss: (Close —) This command enables you to close the active window
Constraints: Si vous donnez a votre document le titre d&apos;un document deje, existant, (une zone de
dialogue apparait)
Gloss: If you give your document the title of an existing document, (a dialog box
appears)
Results: (Choisissez Coller dans le menu Edition —) Une copie du contenu du presse-papiers apparait
Gloss: (Choose Paste from the Edit menu —) A copy of the content of the clipboard appears
Substeps: Fermez la fenetre Rechercher
Gloss: Close the Find window
Ensuite, on ouvre le document de destination
Gloss: Next, one opens the target document
</figure>
<figureCaption confidence="0.999424">
Figure 1: Examples of task element expressions
</figureCaption>
<sectionHeader confidence="0.918755" genericHeader="method">
6 Task Structure
</sectionHeader>
<bodyText confidence="0.999064913043478">
Task structure is constituted by five types of task
elements, which we define below. We used the no-
tion of task structure element both as a contextual
feature for the analysis and to determine the seg-
mentation of the text into units. Each unit is taken
to be the expression of a single task element.
Our definition of the task elements is based on the
concepts and relations commonly chosen to repre-
sent a task structure (a goal and its associated plan),
e.g., (Fikes and Nilsson, 1971; Sacerdoti, 1977), and
on related research, e.g., (Kosseim and Lapalme,
1994). Our generator produces instructions from an
underlying semantic knowledge base which uses this
representation (Paris et al., 1995). To generate an
instruction for performing a task is to chose some
task elements to be expressed and linearise them so
that they form a coherent set for a given goal the
user might have. We distinguish the following ele-
ments, and provide examples of them in Figure 1:2
goals: actions that users will adopt as goals and
which motivate the use of a plan.
functions: actions that represent the functionality
of an interface object (such as a menu item). A
</bodyText>
<footnote confidence="0.746860333333333">
2The text in parentheses in the Figure is part of the
linguistic context of the task element rather than the
element itself.
</footnote>
<bodyText confidence="0.996248785714286">
function is closely related to a goal, in that it is
also an action that the user may want to per-
form. However, the function is accessed through
the interface object, and not through a plan.
constraints and preconditions:
states which must hold before a plan can be
employed successfully. The domain model dis-
tinguishes constraints (states which cannot be
achieved through planning) and preconditions
(states which can be achieved through plan-
ning). We do not make this distinction in
the linguistic analysis and regroup these related
task structure elements under one label. We
decided to proceed in this way to determine at
first how constraints in general are expressed.
Moreover, it is not always clear from the text
which type of constraint is expressed. Drawing
too fine distinctions in the corpus analysis at
this point, in the absence of a test for assigning
a unit to one of these constraint types, would
have rendered the results of the analysis more
subjective and thus less reliable.
results: states which arise as planned or unplanned
effects of carrying out a plan. While it might
be important to separate planned and un-
planned effects in the underlying representa-
tion, we again abstract over them in the lexico-
grammatical coding.
</bodyText>
<page confidence="0.995011">
194
</page>
<bodyText confidence="0.9998795">
sub-steps: actions which contribute to the execu-
tion of the plan. If the sub-steps are not prim-
itive, they can themselves be achieved through
other plans.
</bodyText>
<sectionHeader confidence="0.971472" genericHeader="method">
7 The Coding Procedure
</sectionHeader>
<bodyText confidence="0.999973333333333">
No tools exist to automate a functional analysis of
text, which makes coding a large body of text a time-
consuming task. We first performed a detailed cod-
ing of units of texts on approximately 25% of the
corpus, or about 400 units,3 using the WAG coder
(O&apos;Donnell, 1995), a tool designed to facilitate a
functional analysis.
We then used a public-domain concordance pro-
gram, MonoConc (Barlow, 1994), to verify the rep-
resentativeness of the results. We enumerated the
realisations of those features that the first analysis
had shown as marked, and produced KWIC4 list-
ings for each set of realisations. We found that the
second analysis corroborated the results of the first,
consistent with the nature of sublanguages.
</bodyText>
<sectionHeader confidence="0.881559" genericHeader="method">
8 Distribution of Grammatical
Features over Task Structure and
Communicative Purpose
</sectionHeader>
<bodyText confidence="0.999724111111111">
We examined the correlations between lexico-
grammatical realisations and task elements and com-
municative purpose. The results are best expressed
using tables generated by WAG: given any system,
WAG splits the codings into a number of sets, one for
each feature in that system. Percentages and means
are computed, and the sets are compared statisti-
cally, using the standard T-test. WAG displays the
results with an indicator of how statistically signifi-
cant a value is compared to the combined means in
the other sets. The counts were all done using the
local mean, that is, the feature count is divided by
the total number of codings which select that fea-
ture&apos;s system. Full definitions of the features can be
found in (Halliday, 1985; Bateman et al., 1990).
In some cases, the type of task element is on its
own sufficient to determine, or at least strongly con-
strain, its linguistic realisation. The limited space
available here allows us to provide only a small num-
ber of examples, shown in Figure 2. We see that the
use of modals is excluded in the expression of func-
tion, result and constraint, whereas goal and sub-
step do admit modals. As far as the polarity sys-
tem is concerned, negation is effectively ruled out
for function, goal and substep. Finally, with respect
to the mood system, only substep can be realised
through imperatives.
</bodyText>
<footnote confidence="0.87908125">
3The authors followed guidelines for identifying task
element units which had yielded consistent results when
used by students coding other corpora.
&apos;Key Word In Context
</footnote>
<bodyText confidence="0.999932446428572">
In other cases, however, we observe a diversity of
realisations. We highlight here three cases: modality
in goal, polarity in constraint, and mood in substep.
In such cases, we must appeal to another source of
control over the apparently available choices. We
have looked to the construct of genre (Martin, 1992)
to provide this additional control, on two grounds:
(1) since genres are distinguished by their commu-
nicative purposes, we can view each of the functional
sections already identified as a distinct genre; (2)
genre is presented as controlling text structure and
realisation. In Martin&apos;s view, genre is defined as a
staged, goal-oriented social process realised through
register, the context of situation, which in turn is
realised in language to achieve the goals of a text.
Genre is responsible for the selection of a text struc-
ture in terms of task elements. As part of the re-
alisation process, generic choices preselect a register
associated with particular elements of text structure,
which in turn preselect lexico-grammatical features.
The coding of our text in terms genre and task el-
ements thus allows us to establish the role played
by genre in the realisations of the task elements. It
will also allow us to determine the text structures
appropriate in each genre, a study we are currently
undertaking. This is consistent with other accounts
of text structure for text generation in technical do-
mains, e.g., (McKeown, 1985; Paris, 1993; Kittredge
et al., 1991).
For those cases where the realisation remains
under-determined by the task element type, we con-
ducted a finer-grained analysis, by overlaying a genre
partition on the undifferentiated data. We distin-
guished earlier two genres with which we are con-
cerned: ready-reference and step-by-step. In the
manual analysed, we recognised two more specific
communicative purposes in the step-by-step section:
to enable the reader to perform a task, and to in-
crease the reader&apos;s knowledge about the task, the
way to achieve it, or the properties of the system
as a whole. Because of their distinct communica-
tive purposes, we again feel justified in calling these
genres. We label them respectively procedure and
elaboration. The intention that the reader should
recognise the differences in function of each section
is underscored by the use of distinctive typographi-
cal devices, such as fonts and lay-out.&apos;
The first step at this stage of the analysis was to
establish whether there was an effective overlap in
task elements among the three genres under consid-
eration. The results of this step is shown in Figure 3.
Sub-step and goal are found in all three genres, while
constraint, result and function occur in both ready-
reference and elaboration but are absent from pro-
cedure.
The next step was to undertake a comparative
</bodyText>
<footnote confidence="0.99383">
5See (Hartley and Paris, 1995) for examples extracted
from the manuals.
</footnote>
<page confidence="0.993844">
195
</page>
<table confidence="0.9938131875">
Modal-System Function Result Constraint Goal Substep
modal 0% 1% 0% 24% 16%
non-modal 100% 99% 100% 76% 84%
polarity
positive 100% 90% 68% 97% 97%
negative 0% 10% 32% 3% 3%
mood-system
declarative 100% 100% 100% 100% 24%
imperative 0% 0% 0% 0% 76%
Figure 2: Selective realisations of task elements
Ready-Reference Procedure Elaboration
Sub-step 37% 77% 42%
Goal 11% 23% 14%
Constraint 10% 0% 14%
Result 23% 0% 27%
Function 11% 0% 3%
</table>
<figureCaption confidence="0.99953">
Figure 3: Distribution of task structure elements over genres
</figureCaption>
<bodyText confidence="0.999871016393443">
analysis of the lexico-grammatical features found in
the three genres. This analysis indicated that the
language employed in these different sections of the
text varies greatly. We summarise here the two
genres that are strongly contrasted: procedure and
ready-reference. Elaboration shares features with
both of these.
procedure: The top-level goal of the user is ex-
pressed as a nominalisation. Actions to be
achieved by the reader are almost exclusively
realised by imperatives, directly addressing the
reader. These actions are mostly material di-
rected actions, and there are no causatives. Few
modals are employed, and, when they are, it is
to express obligation impersonally. The polar-
ity of processes is always positive. Procedure
employs mostly independent clauses, and, when
clause complexes are used, the conjunctions are
mostly purpose (linking a user goal and an ac-
tion) and alternative (linking two user actions
or two goals).
ready-reference: In this genre, all task elements
are always realised through clauses. The declar-
ative mood predominates, with few impera-
tives addressing the reader. Virtually all the
causatives occur here. On the dimension of
modality, the emphasis is on personal possi-
bility, rather than obligation, and on inclina-
tion. We find in this genre most of the ver-
bal processes, entirely absent from procedure.
Ready-reference is more weighted than proce-
dure towards dependent clauses, and is partic-
ularly marked by the presence of temporal con-
junctions.
The analysis so far demonstrates that genre, like
task structure, provides some measure of control
over the linguistic resources but that neither of these
alone is sufficient to drive a generation system. The
final step was therefore to look at the realisations
of the task elements differentiated by genre, in cases
where the realisation was not strongly determined
by the task element.
We refer the reader back to Figure 2, and the
under-constrained cases of modality in goal, polar-
ity in constraint, and mood in substep. Figure 4
shows the realisations the task element goal with re-
spect to the modal system, which brings into sharp
relief the absence of modality from procedure. Fig-
ure 5 presents the realisations by genre of the po-
larity system for constraint. We observe that only
positive polarity occurs in ready-reference. Finally,
we note from Figure 6 that the realisation of sub-
steps is heavily loaded in favour of imperatives in
procedure.
These figures show that genre does indeed provide
useful additional control over the expression of task
elements, which can be exploited by a text genera-
tion system. Neither task structure nor genre alone
is sufficient to provide this control, but, taken to-
gether, they offer a real prospect of adequate control
over the output of a text generator.
</bodyText>
<page confidence="0.997264">
196
</page>
<table confidence="0.850337090909091">
Procedure Ready-Reference Elaboration
Non-modal 100.0% 75.0% 72.6%
Modal 0.0% 25.0% 28.4%
Figure 4: Genre-related differences in the modal system for goal
Ready-Reference Elaboration
Negative 0.0% 41.7%
Positive 100% 58.3%
Figure 5: Genre-related differences in the polarity system for constraint
Procedure Ready-Reference Elaboration
Imperative 97.3% 44.4% 77.6%
Declarative 2.7% 55.6% 22.4%
</table>
<figureCaption confidence="0.956329">
Figure 6: Genre-related differences in the mood system for substep
</figureCaption>
<sectionHeader confidence="0.999183" genericHeader="related work">
9 Related Work
</sectionHeader>
<bodyText confidence="0.999958714285714">
The results from our linguistic analysis are con-
sistent with other research on sublanguages in the
instructions domain, in both French and English,
e.g., (Kosseim and Lapalme, 1994; Paris and Scott,
1994). Our analysis goes beyond previous work by
identifying within the discourse context the means
for exercising explicit control over a text generator.
An interesting difference with respect to previous
descriptions is the use of the true (or direct) imper-
ative to express an action in the procedure genre,
as results from (Paris and Scott, 1994) seem to in-
dicate that the infinitive-form of the imperative is
preferred in French. These results, however, were
obtained from a corpus of instructions mostly for
domestic appliances as opposed to software manuals.
Furthermore the use of the infinitive-form in instruc-
tions in general as observed by (Kocourek, 1982) is
declining, as some of the conventions already com-
mon in English technical writing are being adopted
by French technical writers, e.g., (Timbal-Duclaux,
1990).
We also note that the patterns of realisations un-
covered in our analysis follow the principle of good
technical writing practice known as the minimal-
ist approach, e.g., (Carroll, 1994; Hammond, 1994).
Moreover, we observe that our corpus does not ex-
hibit shortcomings identified in a Systemic Func-
tional analysis of English software manuals (Plum
et al., 1990), such as a high incidence of agentless
passive and a failure to distinguish the function of
informing from that of instructing.
Other work has focused on the cross-linguistic re-
alisations of two specific semantic relations (gener-
ation and enablement) (Delin et al., 1994; Delin et
al., 1996), in a more general corpus of instructions
for household appliances. Our work focuses on the
single application domain of software instructions.
However, it takes into consideration the whole task
structure and looks at the realisation of semantic el-
ements as found in the knowledge base, instead of
two semantic relations not explicitly present in the
underlying semantic model.
</bodyText>
<sectionHeader confidence="0.995761" genericHeader="conclusions">
10 Conclusion
</sectionHeader>
<bodyText confidence="0.999670117647059">
In this paper we have shown how genre and task
structure provide two essential sources of control
over the text generation process. Genre does so
by constraining the selection of the task elements
and the range of their expressions. These elements,
which are the procedural representation of the user&apos;s
tasks, constitute a layer of control which mediates
between genre and text, but which, without genre,
cannot control the grammar adequately.
The work presented here is informing the devel-
opment of our text generator by specifying the nec-
essary coverage of the French grammar to be imple-
mented, the required discourse structures, and the
mechanisms needed to control them. We continue
to explore further situational and contextual factors
which might allow a system to fully control its avail-
able linguistic resources.
</bodyText>
<sectionHeader confidence="0.999237" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.998691">
Michael Barlow. 1994. A Guide to MonoConc.
Athelston, Houston, TX.
John A. Bateman, Robert T. Kasper, Johanna D.
Moore, and Richard Whitney. 1990. A general or-
</reference>
<page confidence="0.992178">
197
</page>
<reference confidence="0.991727495412844">
ganization of knowledge for natural language pro-
cessing: The Penman Upper Model. Technical
report, USC/ISI, March.
John A. Bateman, Christian M.I.M. Matthiessen,
Keizo Nanri, and Licheng Zeng. 1991a. The re-use
of linguistic resources across languages in multilin-
gual generation components. In Proceedings of the
1991 International Joint Conference on Artificial
Intelligence, Volume 2, Sydney, Australia, pages
966 - 971. Morgan Kaufmann Publishers.
John A. Bateman, Christian M.I.M. Matthiessen,
Keizo Nanri, and Licheng Zeng. 1991b. Multi-
lingual text generation: an architecture based on
functional typology. In International Conference
on Current Issues in Computational Linguistics,
Penang, Malaysia.
John A. Bateman. 1994. KPML: The KOMET-
Penman (Multilingual) Development Environ-
ment. Technical report, Institut fiir Integrierte
Publikations- und Inform ationssysteme (IPSI),
GMD, Darmstadt, September. Release 0.6.
Douglas Biber. 1988. Variation Across Speech and
Writing. Cambridge University Press, Cambridge
UK.
Douglas Biber. 1989. A typology of English texts.
Linguistics, 27:3-43.
Douglas Biber. 1995. Dimensions of Register Vari-
ation: A Cross-linguistic comparison. Cambridge
University Press, Cambridge UK.
John Carroll. 1994. Techniques for minimalist doc-
umentation and user interface design. In Quality
of Technical Documentation, pages 67-75. Rodopi,
Amsterdam.
Judy Delin, Anthony Hartley, Cecile Paris, Donia
Scott, and Keith Vander Linden. 1994. Ex-
pressing procedural relationships in multilingual
instructions. In Proceedings of the Seventh In-
ternational Workshop on Natural Language Gen-
eration, Kennebunkport, MN, 21-24 June 1994,
pages 61-70.
Judy Delin, Donia Scott, and Anthony Hartley.
1996. Language-specific mappings from seman-
tics to syntax. In Proceedings of the 16th Interna-
tional Conference on Computational Linguistics
(COLING-96), Copenhagen, Denmark, August.
R. E. Fikes and Nils Nilsson. 1971. STRIPS: a new
approach to the application of theorem proving
to problem solving. Artificial Intelligence, 2:189-
208.
Mohsen Ghadessy, editor. 1993. Register Analysis:
Theory and Practice. Frances Pinter, London.
Ralph Grishman and Richard Kittredge, editors.
1986. Analyzing Language in Restricted Domains.
Lawrence Erlbaum Associates, Hillsdale, New Jer-
sey.
Michael A. K. Halliday. 1978. Language as a Social
Semiotic: The Social Interpretation of Language
and Meaning. Edward Arnold, London.
Michael A. K. Halliday. 1985. An Introduction to
Functional Grammar. Edward Arnold, London.
Nick Hammond. 1994. Less is More: The Mini-
malist Approach. Usability Now! A Guide to Us-
ability. Published by the Open University and the
Department of Trade and Industry.
Anthony Hartley and Cecile Paris. 1995. French cor-
pus analysis and grammatical description. Techni-
cal Report Project IED/4/1/5827, ITRI, Novem-
ber.
Carol Kaehler. 1983. Macintosh MacWrite. Apple
Seedrin, Les Ulis, France.
Richard Kittredge, Tanya Korelsky, and Owen Ram-
bow. 1991. On the Need for Domain Commu-
nication Knowledge. Computational Intelligence,
7(4):305-314, November.
Richard Kittredge. 1982. Variation and Homogene-
ity of Sublanguages. In Richard Kittredge and
J. Lehrberger, editors, Sublanguage: Studies of
language in restricted semantic domains, pages
107-137. de Gruyter, Berlin and New York.
Richard Kittredge. 1987. The significance of sub-
language for automatic translation. In Sergei
Nirenburg, editor, Machine Translation: Theoret-
ical and methodological issues, pages 59-67. Cam-
bridge University Press, London.
Richard Kittredge. 1995. Efficiency vs. Generality
in Interlingual Design: Some Linguistic Consid-
erations. In the Working notes of the IJCAI-95
Workshop on Multilingual Text Generation, Au-
gust 20-21, Montreal, Canada.
Rostislav Kocourek. 1982. La langue francaise de
la technique et de la science. Brandstetter Verlag,
Wiesbaden, Germany.
Leila Kosseim and Guy Lapalme. 1994. Content and
rhetorical status selection in instructional texts.
In Proceedings of the Seventh International Work-
shop on Natural Language Generation, Kenneb-
unkport, MN, 21-24 June 1994, pages 53-60.
John Lehrberger. 1986. Sublanguage Analysis. In
Ralph Grishman and Richard Kittredge, editors,
Analyzing Language in Restricted Domains, pages
19-38. Lawrence Erlbaum Associates, Hillsdale,
New Jersey.
James R. Martin. 1992. English text: systems and
structure. Benjamins, Amsterdam.
Christian M.I.M. Matthiessen and John A. Bate-
man. 1991. Text generation and systemic-
functional linguistics: experiences from English
and Japanese. Frances Pinter Publishers and St.
Martin&apos;s Press, London and New York.
</reference>
<page confidence="0.98179">
198
</page>
<reference confidence="0.988720425">
Kathleen R. McKeown. 1985. Text Generation.
Cambridge University Press, New York.
Michael O&apos;Donnell. 1995. From Corpus to Cod-
ings: Semi-Automating the Acquisition of Lin-
guistic Features. Proceedings of the AAAI Spring
Symposium on Empirical Methods in Discourse
Interpretation and Generation, Stanford Univer-
sity, California, March 27 - 29, March.
Cecile Paris and Donia Scott. 1994. Stylistic vari-
ation in multilingual instructions. In Proceedings
of the Seventh International Workshop on Nat-
ural Language Generation, Kennebunkport, MN,
21-24 June 1994, pages 45 — 52.
Cecile Paris, Keith Vander Linden, Markus Fischer,
Anthony Hartley, Lyn Pemberton, Richard Power,
and Donia Scott. 1995. A support tool for writ-
ing multilingual instructions. In Proceedings of
the Fourteenth International Joint Conference on
Artificial Intelligence, August 20-25, Montréal,
Canada, pages 1398-1404.
Cecile L. Paris. 1993. User Modelling in Text Gen-
eration. Frances Pinter, London.
Guenter A. Plum, Christian M.I.M. Matthiessen,
Michael A.K. Halliday, and Natalie Shea. 1990.
The Electronic Discourse Analyzer Project: Re-
port on Textual Analysis of FJ Manuals. Techni-
cal report, Fujitsu Australia Limited, Documen-
tation Engineering Division. EDA Project Deliv-
erables; Output 7.
Earl D. Sacerdoti. 1977. A Structure for Plans and
Behavior. Elsevier, New York.
Juan C. Sager, David Dungworth, and Peter F. Mc-
Donald. 1980. English Special Languages. Brand-
stetter Verlag, Wiesbaden, Germany.
Juan C. Sager. 1993. Language Engineering and
Translation: Consequences of Automation. John
Benjamins Publishing Company, Amsterdam.
Louis Timbal-Duclaux. 1990. La communica-
tion ecrite scientifique et technique. ESF, Paris,
France.
</reference>
<page confidence="0.998796">
199
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.778675">
<title confidence="0.981859">Two Sources of Control over the Generation of Software Instructions*</title>
<author confidence="0.998677">Anthony Hartley</author>
<affiliation confidence="0.950492">Language Centre University of Brighton, Falmer</affiliation>
<address confidence="0.999693">Brighton BN1 9PH, UK</address>
<email confidence="0.889971">afh@itri.bton.ac.uk</email>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Michael Barlow</author>
</authors>
<title>A Guide to MonoConc. Athelston,</title>
<date>1994</date>
<location>Houston, TX.</location>
<contexts>
<context position="13454" citStr="Barlow, 1994" startWordPosition="2142" endWordPosition="2143"> in the lexicogrammatical coding. 194 sub-steps: actions which contribute to the execution of the plan. If the sub-steps are not primitive, they can themselves be achieved through other plans. 7 The Coding Procedure No tools exist to automate a functional analysis of text, which makes coding a large body of text a timeconsuming task. We first performed a detailed coding of units of texts on approximately 25% of the corpus, or about 400 units,3 using the WAG coder (O&apos;Donnell, 1995), a tool designed to facilitate a functional analysis. We then used a public-domain concordance program, MonoConc (Barlow, 1994), to verify the representativeness of the results. We enumerated the realisations of those features that the first analysis had shown as marked, and produced KWIC4 listings for each set of realisations. We found that the second analysis corroborated the results of the first, consistent with the nature of sublanguages. 8 Distribution of Grammatical Features over Task Structure and Communicative Purpose We examined the correlations between lexicogrammatical realisations and task elements and communicative purpose. The results are best expressed using tables generated by WAG: given any system, WA</context>
</contexts>
<marker>Barlow, 1994</marker>
<rawString>Michael Barlow. 1994. A Guide to MonoConc. Athelston, Houston, TX.</rawString>
</citation>
<citation valid="true">
<authors>
<author>John A Bateman</author>
<author>Robert T Kasper</author>
<author>Johanna D Moore</author>
<author>Richard Whitney</author>
</authors>
<title>A general organization of knowledge for natural language processing: The Penman Upper Model.</title>
<date>1990</date>
<tech>Technical report, USC/ISI,</tech>
<contexts>
<context position="14615" citStr="Bateman et al., 1990" startWordPosition="2329" endWordPosition="2332">xpressed using tables generated by WAG: given any system, WAG splits the codings into a number of sets, one for each feature in that system. Percentages and means are computed, and the sets are compared statistically, using the standard T-test. WAG displays the results with an indicator of how statistically significant a value is compared to the combined means in the other sets. The counts were all done using the local mean, that is, the feature count is divided by the total number of codings which select that feature&apos;s system. Full definitions of the features can be found in (Halliday, 1985; Bateman et al., 1990). In some cases, the type of task element is on its own sufficient to determine, or at least strongly constrain, its linguistic realisation. The limited space available here allows us to provide only a small number of examples, shown in Figure 2. We see that the use of modals is excluded in the expression of function, result and constraint, whereas goal and substep do admit modals. As far as the polarity system is concerned, negation is effectively ruled out for function, goal and substep. Finally, with respect to the mood system, only substep can be realised through imperatives. 3The authors </context>
</contexts>
<marker>Bateman, Kasper, Moore, Whitney, 1990</marker>
<rawString>John A. Bateman, Robert T. Kasper, Johanna D. Moore, and Richard Whitney. 1990. A general organization of knowledge for natural language processing: The Penman Upper Model. Technical report, USC/ISI, March.</rawString>
</citation>
<citation valid="true">
<authors>
<author>John A Bateman</author>
<author>Christian M I M Matthiessen</author>
<author>Keizo Nanri</author>
<author>Licheng Zeng</author>
</authors>
<title>The re-use of linguistic resources across languages in multilingual generation components.</title>
<date>1991</date>
<booktitle>In Proceedings of the 1991 International Joint Conference on Artificial Intelligence, Volume 2,</booktitle>
<pages>966--971</pages>
<publisher>Morgan Kaufmann Publishers.</publisher>
<location>Sydney, Australia,</location>
<contexts>
<context position="4886" citStr="Bateman et al., 1991" startWordPosition="745" endWordPosition="748">to natural language generation, where the starting point is necessarily a communicative goal, and the task is to find the most appropriate expression for the intended meaning (Matthiessen and Bateman, 1991). Second, a functional perspective offers an advantage for multilingual text generation, because of its ability to achieve a level of linguistic description which holds across languages more effectively than do structurally-based accounts. The approach has been shown capable of supporting the sharing of linguistic resources between languages as structurally distinct as English and Japanese (Bateman et al., 1991a; Bateman et al., 1991b). It is therefore reasonable to expect that at least the same degree of commonality of description is achievable between English and French within this framework. Finally, KPML (Bateman, 1994), the tactical generator we employ, is based on SFL, and it is thus appropriate for us to characterise the corpus in terms immediately applicable to our generator. 4 Coding features Our lexico-grammatical coding was done using the networks and features of the Nigel grammar (Halliday, 1985). We focused on four main concerns, guided by previous work on instructional texts, e.g., (Le</context>
</contexts>
<marker>Bateman, Matthiessen, Nanri, Zeng, 1991</marker>
<rawString>John A. Bateman, Christian M.I.M. Matthiessen, Keizo Nanri, and Licheng Zeng. 1991a. The re-use of linguistic resources across languages in multilingual generation components. In Proceedings of the 1991 International Joint Conference on Artificial Intelligence, Volume 2, Sydney, Australia, pages 966 - 971. Morgan Kaufmann Publishers.</rawString>
</citation>
<citation valid="true">
<authors>
<author>John A Bateman</author>
<author>Christian M I M Matthiessen</author>
<author>Keizo Nanri</author>
<author>Licheng Zeng</author>
</authors>
<title>Multilingual text generation: an architecture based on functional typology.</title>
<date>1991</date>
<booktitle>In International Conference on Current Issues in Computational Linguistics, Penang,</booktitle>
<contexts>
<context position="4886" citStr="Bateman et al., 1991" startWordPosition="745" endWordPosition="748">to natural language generation, where the starting point is necessarily a communicative goal, and the task is to find the most appropriate expression for the intended meaning (Matthiessen and Bateman, 1991). Second, a functional perspective offers an advantage for multilingual text generation, because of its ability to achieve a level of linguistic description which holds across languages more effectively than do structurally-based accounts. The approach has been shown capable of supporting the sharing of linguistic resources between languages as structurally distinct as English and Japanese (Bateman et al., 1991a; Bateman et al., 1991b). It is therefore reasonable to expect that at least the same degree of commonality of description is achievable between English and French within this framework. Finally, KPML (Bateman, 1994), the tactical generator we employ, is based on SFL, and it is thus appropriate for us to characterise the corpus in terms immediately applicable to our generator. 4 Coding features Our lexico-grammatical coding was done using the networks and features of the Nigel grammar (Halliday, 1985). We focused on four main concerns, guided by previous work on instructional texts, e.g., (Le</context>
</contexts>
<marker>Bateman, Matthiessen, Nanri, Zeng, 1991</marker>
<rawString>John A. Bateman, Christian M.I.M. Matthiessen, Keizo Nanri, and Licheng Zeng. 1991b. Multilingual text generation: an architecture based on functional typology. In International Conference on Current Issues in Computational Linguistics, Penang, Malaysia.</rawString>
</citation>
<citation valid="true">
<authors>
<author>John A Bateman</author>
</authors>
<title>KPML: The KOMETPenman (Multilingual) Development Environment.</title>
<date>1994</date>
<journal>Release</journal>
<booktitle>Institut fiir Integrierte Publikations- und Inform ationssysteme (IPSI), GMD,</booktitle>
<tech>Technical report,</tech>
<volume>0</volume>
<location>Darmstadt,</location>
<contexts>
<context position="5103" citStr="Bateman, 1994" startWordPosition="781" endWordPosition="782">ional perspective offers an advantage for multilingual text generation, because of its ability to achieve a level of linguistic description which holds across languages more effectively than do structurally-based accounts. The approach has been shown capable of supporting the sharing of linguistic resources between languages as structurally distinct as English and Japanese (Bateman et al., 1991a; Bateman et al., 1991b). It is therefore reasonable to expect that at least the same degree of commonality of description is achievable between English and French within this framework. Finally, KPML (Bateman, 1994), the tactical generator we employ, is based on SFL, and it is thus appropriate for us to characterise the corpus in terms immediately applicable to our generator. 4 Coding features Our lexico-grammatical coding was done using the networks and features of the Nigel grammar (Halliday, 1985). We focused on four main concerns, guided by previous work on instructional texts, e.g., (Lehrberger, 1986; Plum et al., 1990; Ghadessy, 1993; Kosseim and Lapalme, 1994). • Relations between processes: to determine whether textual cohesion was achieved through conjunctives or through relations implicit in th</context>
</contexts>
<marker>Bateman, 1994</marker>
<rawString>John A. Bateman. 1994. KPML: The KOMETPenman (Multilingual) Development Environment. Technical report, Institut fiir Integrierte Publikations- und Inform ationssysteme (IPSI), GMD, Darmstadt, September. Release 0.6.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Douglas Biber</author>
</authors>
<title>Variation Across Speech and Writing.</title>
<date>1988</date>
<publisher>Cambridge University Press,</publisher>
<location>Cambridge UK.</location>
<contexts>
<context position="7854" citStr="Biber, 1988" startWordPosition="1223" endWordPosition="1224">ly, we have been assured by French users of the software that they consider this particular manual to be well written and to bear no unnatural trace of its origins. Technical manuals within a specific domain constitute a sublanguage, e.g., (Kittredge, 1982; Sager et at., 1980). An important defining property of a sublanguage is that of closure, both lexical and syntactic. Lexical closure has been demonstrated by, for example, (Kittredge, 1987), who shows that after as few as the first 2000 words of a sublanguage text, the number of new word types increases little if at all. Other work, e.g., (Biber, 1988; Biber, 1989) and (Grishman and Kittredge, 1986) illustrates the property of syntactic closure, which means that generally available constructions just do not occur in this or that sublanguage. In the light of these results, we considered a corpus of 15000 words to be adequate for our purposes, at least for an initial analysis. The MacWrite manual is organised into three chapters, corresponding to the three different sections identified earlier: a tutorial, a series of stepby-step instructions for the major word-processing tasks, and a ready-reference summary of the commands. We omitted the t</context>
</contexts>
<marker>Biber, 1988</marker>
<rawString>Douglas Biber. 1988. Variation Across Speech and Writing. Cambridge University Press, Cambridge UK.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Douglas Biber</author>
</authors>
<title>A typology of English texts.</title>
<date>1989</date>
<journal>Linguistics,</journal>
<pages>27--3</pages>
<contexts>
<context position="7868" citStr="Biber, 1989" startWordPosition="1225" endWordPosition="1226">een assured by French users of the software that they consider this particular manual to be well written and to bear no unnatural trace of its origins. Technical manuals within a specific domain constitute a sublanguage, e.g., (Kittredge, 1982; Sager et at., 1980). An important defining property of a sublanguage is that of closure, both lexical and syntactic. Lexical closure has been demonstrated by, for example, (Kittredge, 1987), who shows that after as few as the first 2000 words of a sublanguage text, the number of new word types increases little if at all. Other work, e.g., (Biber, 1988; Biber, 1989) and (Grishman and Kittredge, 1986) illustrates the property of syntactic closure, which means that generally available constructions just do not occur in this or that sublanguage. In the light of these results, we considered a corpus of 15000 words to be adequate for our purposes, at least for an initial analysis. The MacWrite manual is organised into three chapters, corresponding to the three different sections identified earlier: a tutorial, a series of stepby-step instructions for the major word-processing tasks, and a ready-reference summary of the commands. We omitted the tutorial becaus</context>
</contexts>
<marker>Biber, 1989</marker>
<rawString>Douglas Biber. 1989. A typology of English texts. Linguistics, 27:3-43.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Douglas Biber</author>
</authors>
<title>Dimensions of Register Variation: A Cross-linguistic comparison.</title>
<date>1995</date>
<publisher>Cambridge University Press,</publisher>
<location>Cambridge UK.</location>
<contexts>
<context position="1519" citStr="Biber, 1995" startWordPosition="250" endWordPosition="251">l containing exercises for new users, a series of stepby-step instructions for the major tasks to be accomplished, and a ready-reference summary of the commands. We need, therefore, to characterise the linguistic expressions of the different elements of the task model, and to establish whether these expressions are sensitive or not to their context, that is, the functional section in which they appear. This paper presents the results of an analysis we conducted to this end on a corpus of software instructions in French. 2 Methodology The methodology we employed is similar to that endorsed by (Biber, 1995). It is summarised as follows: 1. Collect the texts and note their situational characteristics. We consider two such characterThis work is partially supported by the Engineering and Physical Sciences Research Council (EPsRc) Grant J19221, by BC/DAAD ARC Project 293, by the Commission of the European Union Grant LRE-62009, and by the Office of Naval Research Grant N00014-96-1-0465. t Starting this fall, Dr. Paris&apos; address will be CSIRO, Division of Information Technology, Sydney Laboratory, Building E6B, Macquarie University Campus, North Ryde, Sydney, NSW 2113, Australia. Cecile Parist Informa</context>
<context position="3146" citStr="Biber, 1995" startWordPosition="495" endWordPosition="496">he situational characteristics under consideration. We first carried out a classical sublanguage analysis on our corpus as a whole, without differentiating between any of the situational characteristics (Hartley and Paris, 1995). This initial description was necessary to give us a clear statement of the linguistic potential required of our text generator, to which we could relate any restrictions on language imposed by situational variables. Thus we can account for language restrictions by appealing to general discourse principles, in keeping with the recommendations of (Kittredge, 1995) and (Biber, 1995) for the definition of sublanguages. We then correlated task elements with grammatical features. Finally, where linguistic realisation was under-determined by task structure alone, we established whether the communicative purpose provided more discriminating control over the linguistic resources available. 3 Linguistic Framework: Systemic Functional Linguistics Our analysis was carried out within the framework of Systemic-Functional Linguistics (sFL) (Halliday, 1978; Halliday, 1985) which views language as a resource for the creation of meaning. SFL stratifies meaning into context and language</context>
</contexts>
<marker>Biber, 1995</marker>
<rawString>Douglas Biber. 1995. Dimensions of Register Variation: A Cross-linguistic comparison. Cambridge University Press, Cambridge UK.</rawString>
</citation>
<citation valid="true">
<authors>
<author>John Carroll</author>
</authors>
<title>Techniques for minimalist documentation and user interface design.</title>
<date>1994</date>
<booktitle>In Quality of Technical Documentation,</booktitle>
<pages>67--75</pages>
<location>Rodopi, Amsterdam.</location>
<contexts>
<context position="7148" citStr="Carroll, 1994" startWordPosition="1102" endWordPosition="1103">f the Macintosh MacWrite manual (Kaehler, 1983). The manual is derived from an English source by a process of adaptive translation (Sager, 1993), i.e., one which localises the text to the expectations of the target readership. The fact that the translation is adaptive rather than literal gives us confidence in using this manual for our analysis.&apos; Furthermore, we know that Macintosh documentation undergoes thorough local quality control. It certainly conforms to the principles of good documentation established by current research on technical documentation and on the needs of end-users, e.g., (Carroll, 1994; Hammond, 1994), in that it supplies clear and concise information for the task at hand. Finally, we have been assured by French users of the software that they consider this particular manual to be well written and to bear no unnatural trace of its origins. Technical manuals within a specific domain constitute a sublanguage, e.g., (Kittredge, 1982; Sager et at., 1980). An important defining property of a sublanguage is that of closure, both lexical and syntactic. Lexical closure has been demonstrated by, for example, (Kittredge, 1987), who shows that after as few as the first 2000 words of a</context>
<context position="23220" citStr="Carroll, 1994" startWordPosition="3709" endWordPosition="3710">imperative is preferred in French. These results, however, were obtained from a corpus of instructions mostly for domestic appliances as opposed to software manuals. Furthermore the use of the infinitive-form in instructions in general as observed by (Kocourek, 1982) is declining, as some of the conventions already common in English technical writing are being adopted by French technical writers, e.g., (Timbal-Duclaux, 1990). We also note that the patterns of realisations uncovered in our analysis follow the principle of good technical writing practice known as the minimalist approach, e.g., (Carroll, 1994; Hammond, 1994). Moreover, we observe that our corpus does not exhibit shortcomings identified in a Systemic Functional analysis of English software manuals (Plum et al., 1990), such as a high incidence of agentless passive and a failure to distinguish the function of informing from that of instructing. Other work has focused on the cross-linguistic realisations of two specific semantic relations (generation and enablement) (Delin et al., 1994; Delin et al., 1996), in a more general corpus of instructions for household appliances. Our work focuses on the single application domain of software </context>
</contexts>
<marker>Carroll, 1994</marker>
<rawString>John Carroll. 1994. Techniques for minimalist documentation and user interface design. In Quality of Technical Documentation, pages 67-75. Rodopi, Amsterdam.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Judy Delin</author>
<author>Anthony Hartley</author>
<author>Cecile Paris</author>
<author>Donia Scott</author>
<author>Keith Vander Linden</author>
</authors>
<title>Expressing procedural relationships in multilingual instructions.</title>
<date>1994</date>
<booktitle>In Proceedings of the Seventh International Workshop on Natural Language Generation, Kennebunkport, MN,</booktitle>
<pages>21--24</pages>
<contexts>
<context position="23668" citStr="Delin et al., 1994" startWordPosition="3778" endWordPosition="3781">that the patterns of realisations uncovered in our analysis follow the principle of good technical writing practice known as the minimalist approach, e.g., (Carroll, 1994; Hammond, 1994). Moreover, we observe that our corpus does not exhibit shortcomings identified in a Systemic Functional analysis of English software manuals (Plum et al., 1990), such as a high incidence of agentless passive and a failure to distinguish the function of informing from that of instructing. Other work has focused on the cross-linguistic realisations of two specific semantic relations (generation and enablement) (Delin et al., 1994; Delin et al., 1996), in a more general corpus of instructions for household appliances. Our work focuses on the single application domain of software instructions. However, it takes into consideration the whole task structure and looks at the realisation of semantic elements as found in the knowledge base, instead of two semantic relations not explicitly present in the underlying semantic model. 10 Conclusion In this paper we have shown how genre and task structure provide two essential sources of control over the text generation process. Genre does so by constraining the selection of the ta</context>
</contexts>
<marker>Delin, Hartley, Paris, Scott, Linden, 1994</marker>
<rawString>Judy Delin, Anthony Hartley, Cecile Paris, Donia Scott, and Keith Vander Linden. 1994. Expressing procedural relationships in multilingual instructions. In Proceedings of the Seventh International Workshop on Natural Language Generation, Kennebunkport, MN, 21-24 June 1994, pages 61-70.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Judy Delin</author>
<author>Donia Scott</author>
<author>Anthony Hartley</author>
</authors>
<title>Language-specific mappings from semantics to syntax.</title>
<date>1996</date>
<booktitle>In Proceedings of the 16th International Conference on Computational Linguistics (COLING-96),</booktitle>
<location>Copenhagen, Denmark,</location>
<contexts>
<context position="23689" citStr="Delin et al., 1996" startWordPosition="3782" endWordPosition="3785"> realisations uncovered in our analysis follow the principle of good technical writing practice known as the minimalist approach, e.g., (Carroll, 1994; Hammond, 1994). Moreover, we observe that our corpus does not exhibit shortcomings identified in a Systemic Functional analysis of English software manuals (Plum et al., 1990), such as a high incidence of agentless passive and a failure to distinguish the function of informing from that of instructing. Other work has focused on the cross-linguistic realisations of two specific semantic relations (generation and enablement) (Delin et al., 1994; Delin et al., 1996), in a more general corpus of instructions for household appliances. Our work focuses on the single application domain of software instructions. However, it takes into consideration the whole task structure and looks at the realisation of semantic elements as found in the knowledge base, instead of two semantic relations not explicitly present in the underlying semantic model. 10 Conclusion In this paper we have shown how genre and task structure provide two essential sources of control over the text generation process. Genre does so by constraining the selection of the task elements and the r</context>
</contexts>
<marker>Delin, Scott, Hartley, 1996</marker>
<rawString>Judy Delin, Donia Scott, and Anthony Hartley. 1996. Language-specific mappings from semantics to syntax. In Proceedings of the 16th International Conference on Computational Linguistics (COLING-96), Copenhagen, Denmark, August.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R E Fikes</author>
<author>Nils Nilsson</author>
</authors>
<title>STRIPS: a new approach to the application of theorem proving to problem solving.</title>
<date>1971</date>
<journal>Artificial Intelligence,</journal>
<pages>2--189</pages>
<contexts>
<context position="10841" citStr="Fikes and Nilsson, 1971" startWordPosition="1702" endWordPosition="1705">vre le document de destination Gloss: Next, one opens the target document Figure 1: Examples of task element expressions 6 Task Structure Task structure is constituted by five types of task elements, which we define below. We used the notion of task structure element both as a contextual feature for the analysis and to determine the segmentation of the text into units. Each unit is taken to be the expression of a single task element. Our definition of the task elements is based on the concepts and relations commonly chosen to represent a task structure (a goal and its associated plan), e.g., (Fikes and Nilsson, 1971; Sacerdoti, 1977), and on related research, e.g., (Kosseim and Lapalme, 1994). Our generator produces instructions from an underlying semantic knowledge base which uses this representation (Paris et al., 1995). To generate an instruction for performing a task is to chose some task elements to be expressed and linearise them so that they form a coherent set for a given goal the user might have. We distinguish the following elements, and provide examples of them in Figure 1:2 goals: actions that users will adopt as goals and which motivate the use of a plan. functions: actions that represent th</context>
</contexts>
<marker>Fikes, Nilsson, 1971</marker>
<rawString>R. E. Fikes and Nils Nilsson. 1971. STRIPS: a new approach to the application of theorem proving to problem solving. Artificial Intelligence, 2:189-208.</rawString>
</citation>
<citation valid="true">
<title>Register Analysis: Theory and Practice.</title>
<date>1993</date>
<editor>Mohsen Ghadessy, editor.</editor>
<location>Frances Pinter, London.</location>
<marker>1993</marker>
<rawString>Mohsen Ghadessy, editor. 1993. Register Analysis: Theory and Practice. Frances Pinter, London.</rawString>
</citation>
<citation valid="true">
<title>Analyzing Language in Restricted Domains. Lawrence Erlbaum Associates,</title>
<date>1986</date>
<editor>Ralph Grishman and Richard Kittredge, editors.</editor>
<location>Hillsdale, New Jersey.</location>
<marker>1986</marker>
<rawString>Ralph Grishman and Richard Kittredge, editors. 1986. Analyzing Language in Restricted Domains. Lawrence Erlbaum Associates, Hillsdale, New Jersey.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael A K Halliday</author>
</authors>
<title>Language as a Social Semiotic: The Social Interpretation of Language and Meaning. Edward</title>
<date>1978</date>
<location>Arnold, London.</location>
<contexts>
<context position="3616" citStr="Halliday, 1978" startWordPosition="556" endWordPosition="557">r language restrictions by appealing to general discourse principles, in keeping with the recommendations of (Kittredge, 1995) and (Biber, 1995) for the definition of sublanguages. We then correlated task elements with grammatical features. Finally, where linguistic realisation was under-determined by task structure alone, we established whether the communicative purpose provided more discriminating control over the linguistic resources available. 3 Linguistic Framework: Systemic Functional Linguistics Our analysis was carried out within the framework of Systemic-Functional Linguistics (sFL) (Halliday, 1978; Halliday, 1985) which views language as a resource for the creation of meaning. SFL stratifies meaning into context and language. The strata of the linguistic resources are organised into networks of choices, each choice resulting in a different meaning realised (i.e., expressed) by appropriate structures. The emphasis is on paradigmatic choices, as opposed to syntagmatic structures. Choices made in 192 each stratum constrain the choices available in the stratum beneath. Context thus constrains language. This framework was chosen for several reasons. First, the organisation of linguistic res</context>
</contexts>
<marker>Halliday, 1978</marker>
<rawString>Michael A. K. Halliday. 1978. Language as a Social Semiotic: The Social Interpretation of Language and Meaning. Edward Arnold, London.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael A K Halliday</author>
</authors>
<title>An Introduction to Functional Grammar. Edward</title>
<date>1985</date>
<location>Arnold, London.</location>
<contexts>
<context position="3633" citStr="Halliday, 1985" startWordPosition="558" endWordPosition="559">ictions by appealing to general discourse principles, in keeping with the recommendations of (Kittredge, 1995) and (Biber, 1995) for the definition of sublanguages. We then correlated task elements with grammatical features. Finally, where linguistic realisation was under-determined by task structure alone, we established whether the communicative purpose provided more discriminating control over the linguistic resources available. 3 Linguistic Framework: Systemic Functional Linguistics Our analysis was carried out within the framework of Systemic-Functional Linguistics (sFL) (Halliday, 1978; Halliday, 1985) which views language as a resource for the creation of meaning. SFL stratifies meaning into context and language. The strata of the linguistic resources are organised into networks of choices, each choice resulting in a different meaning realised (i.e., expressed) by appropriate structures. The emphasis is on paradigmatic choices, as opposed to syntagmatic structures. Choices made in 192 each stratum constrain the choices available in the stratum beneath. Context thus constrains language. This framework was chosen for several reasons. First, the organisation of linguistic resources according </context>
<context position="5393" citStr="Halliday, 1985" startWordPosition="828" endWordPosition="830">inguistic resources between languages as structurally distinct as English and Japanese (Bateman et al., 1991a; Bateman et al., 1991b). It is therefore reasonable to expect that at least the same degree of commonality of description is achievable between English and French within this framework. Finally, KPML (Bateman, 1994), the tactical generator we employ, is based on SFL, and it is thus appropriate for us to characterise the corpus in terms immediately applicable to our generator. 4 Coding features Our lexico-grammatical coding was done using the networks and features of the Nigel grammar (Halliday, 1985). We focused on four main concerns, guided by previous work on instructional texts, e.g., (Lehrberger, 1986; Plum et al., 1990; Ghadessy, 1993; Kosseim and Lapalme, 1994). • Relations between processes: to determine whether textual cohesion was achieved through conjunctives or through relations implicit in the task structure elements. Among the features considered were clause dependency and conjunction type. • Agency: to see whether the actor performing or enabling a particular action is clearly identified, and whether the reader is explicitly addressed. We coded here for features such as voic</context>
<context position="14592" citStr="Halliday, 1985" startWordPosition="2327" endWordPosition="2328">sults are best expressed using tables generated by WAG: given any system, WAG splits the codings into a number of sets, one for each feature in that system. Percentages and means are computed, and the sets are compared statistically, using the standard T-test. WAG displays the results with an indicator of how statistically significant a value is compared to the combined means in the other sets. The counts were all done using the local mean, that is, the feature count is divided by the total number of codings which select that feature&apos;s system. Full definitions of the features can be found in (Halliday, 1985; Bateman et al., 1990). In some cases, the type of task element is on its own sufficient to determine, or at least strongly constrain, its linguistic realisation. The limited space available here allows us to provide only a small number of examples, shown in Figure 2. We see that the use of modals is excluded in the expression of function, result and constraint, whereas goal and substep do admit modals. As far as the polarity system is concerned, negation is effectively ruled out for function, goal and substep. Finally, with respect to the mood system, only substep can be realised through imp</context>
</contexts>
<marker>Halliday, 1985</marker>
<rawString>Michael A. K. Halliday. 1985. An Introduction to Functional Grammar. Edward Arnold, London.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nick Hammond</author>
</authors>
<title>Less is More: The Minimalist Approach. Usability Now! A Guide to Usability. Published by the Open University and the Department of Trade and Industry.</title>
<date>1994</date>
<contexts>
<context position="7164" citStr="Hammond, 1994" startWordPosition="1104" endWordPosition="1106"> MacWrite manual (Kaehler, 1983). The manual is derived from an English source by a process of adaptive translation (Sager, 1993), i.e., one which localises the text to the expectations of the target readership. The fact that the translation is adaptive rather than literal gives us confidence in using this manual for our analysis.&apos; Furthermore, we know that Macintosh documentation undergoes thorough local quality control. It certainly conforms to the principles of good documentation established by current research on technical documentation and on the needs of end-users, e.g., (Carroll, 1994; Hammond, 1994), in that it supplies clear and concise information for the task at hand. Finally, we have been assured by French users of the software that they consider this particular manual to be well written and to bear no unnatural trace of its origins. Technical manuals within a specific domain constitute a sublanguage, e.g., (Kittredge, 1982; Sager et at., 1980). An important defining property of a sublanguage is that of closure, both lexical and syntactic. Lexical closure has been demonstrated by, for example, (Kittredge, 1987), who shows that after as few as the first 2000 words of a sublanguage tex</context>
<context position="23236" citStr="Hammond, 1994" startWordPosition="3711" endWordPosition="3712">referred in French. These results, however, were obtained from a corpus of instructions mostly for domestic appliances as opposed to software manuals. Furthermore the use of the infinitive-form in instructions in general as observed by (Kocourek, 1982) is declining, as some of the conventions already common in English technical writing are being adopted by French technical writers, e.g., (Timbal-Duclaux, 1990). We also note that the patterns of realisations uncovered in our analysis follow the principle of good technical writing practice known as the minimalist approach, e.g., (Carroll, 1994; Hammond, 1994). Moreover, we observe that our corpus does not exhibit shortcomings identified in a Systemic Functional analysis of English software manuals (Plum et al., 1990), such as a high incidence of agentless passive and a failure to distinguish the function of informing from that of instructing. Other work has focused on the cross-linguistic realisations of two specific semantic relations (generation and enablement) (Delin et al., 1994; Delin et al., 1996), in a more general corpus of instructions for household appliances. Our work focuses on the single application domain of software instructions. Ho</context>
</contexts>
<marker>Hammond, 1994</marker>
<rawString>Nick Hammond. 1994. Less is More: The Minimalist Approach. Usability Now! A Guide to Usability. Published by the Open University and the Department of Trade and Industry.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Anthony Hartley</author>
<author>Cecile Paris</author>
</authors>
<title>French corpus analysis and grammatical description.</title>
<date>1995</date>
<tech>Technical Report Project IED/4/1/5827,</tech>
<location>ITRI,</location>
<contexts>
<context position="2762" citStr="Hartley and Paris, 1995" startWordPosition="431" endWordPosition="435">earch Institute University of Brighton, Lewes Road Brighton BN2 4AT, UK clpeitri.brighton.ac.uk istics: task structure and communicative purpose. 2. Identify the range of linguistic features to be included in the analysis; 3. Code the corpus in terms of the selected features; 4. Compute the frequency count of each linguistic feature; 5. Identify co-occurrences between linguistic features and the situational characteristics under consideration. We first carried out a classical sublanguage analysis on our corpus as a whole, without differentiating between any of the situational characteristics (Hartley and Paris, 1995). This initial description was necessary to give us a clear statement of the linguistic potential required of our text generator, to which we could relate any restrictions on language imposed by situational variables. Thus we can account for language restrictions by appealing to general discourse principles, in keeping with the recommendations of (Kittredge, 1995) and (Biber, 1995) for the definition of sublanguages. We then correlated task elements with grammatical features. Finally, where linguistic realisation was under-determined by task structure alone, we established whether the communic</context>
<context position="18198" citStr="Hartley and Paris, 1995" startWordPosition="2917" endWordPosition="2920">tention that the reader should recognise the differences in function of each section is underscored by the use of distinctive typographical devices, such as fonts and lay-out.&apos; The first step at this stage of the analysis was to establish whether there was an effective overlap in task elements among the three genres under consideration. The results of this step is shown in Figure 3. Sub-step and goal are found in all three genres, while constraint, result and function occur in both readyreference and elaboration but are absent from procedure. The next step was to undertake a comparative 5See (Hartley and Paris, 1995) for examples extracted from the manuals. 195 Modal-System Function Result Constraint Goal Substep modal 0% 1% 0% 24% 16% non-modal 100% 99% 100% 76% 84% polarity positive 100% 90% 68% 97% 97% negative 0% 10% 32% 3% 3% mood-system declarative 100% 100% 100% 100% 24% imperative 0% 0% 0% 0% 76% Figure 2: Selective realisations of task elements Ready-Reference Procedure Elaboration Sub-step 37% 77% 42% Goal 11% 23% 14% Constraint 10% 0% 14% Result 23% 0% 27% Function 11% 0% 3% Figure 3: Distribution of task structure elements over genres analysis of the lexico-grammatical features found in the th</context>
</contexts>
<marker>Hartley, Paris, 1995</marker>
<rawString>Anthony Hartley and Cecile Paris. 1995. French corpus analysis and grammatical description. Technical Report Project IED/4/1/5827, ITRI, November.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Carol Kaehler</author>
</authors>
<title>Macintosh MacWrite. Apple Seedrin, Les Ulis,</title>
<date>1983</date>
<contexts>
<context position="6582" citStr="Kaehler, 1983" startWordPosition="1017" endWordPosition="1018">for features such as voice and agent types. • Mood, modality and polarity: to find out the extent to which actions are presented to the reader as being desirable, possible, mandatory, or prohibited. We coded for both true and implicit negatives, and for both personal and impersonal expressions of modality. • Process types: to see how the domain is construed in terms of actions on the part of the user and the software. We coded for sub-categories of material, mental, verbal and relational processes. 5 The Corpus The analysis was conducted on the French version of the Macintosh MacWrite manual (Kaehler, 1983). The manual is derived from an English source by a process of adaptive translation (Sager, 1993), i.e., one which localises the text to the expectations of the target readership. The fact that the translation is adaptive rather than literal gives us confidence in using this manual for our analysis.&apos; Furthermore, we know that Macintosh documentation undergoes thorough local quality control. It certainly conforms to the principles of good documentation established by current research on technical documentation and on the needs of end-users, e.g., (Carroll, 1994; Hammond, 1994), in that it suppl</context>
</contexts>
<marker>Kaehler, 1983</marker>
<rawString>Carol Kaehler. 1983. Macintosh MacWrite. Apple Seedrin, Les Ulis, France.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Richard Kittredge</author>
<author>Tanya Korelsky</author>
<author>Owen Rambow</author>
</authors>
<title>On the Need for Domain Communication Knowledge.</title>
<date>1991</date>
<journal>Computational Intelligence,</journal>
<pages>7--4</pages>
<contexts>
<context position="16854" citStr="Kittredge et al., 1991" startWordPosition="2698" endWordPosition="2701">ask elements. As part of the realisation process, generic choices preselect a register associated with particular elements of text structure, which in turn preselect lexico-grammatical features. The coding of our text in terms genre and task elements thus allows us to establish the role played by genre in the realisations of the task elements. It will also allow us to determine the text structures appropriate in each genre, a study we are currently undertaking. This is consistent with other accounts of text structure for text generation in technical domains, e.g., (McKeown, 1985; Paris, 1993; Kittredge et al., 1991). For those cases where the realisation remains under-determined by the task element type, we conducted a finer-grained analysis, by overlaying a genre partition on the undifferentiated data. We distinguished earlier two genres with which we are concerned: ready-reference and step-by-step. In the manual analysed, we recognised two more specific communicative purposes in the step-by-step section: to enable the reader to perform a task, and to increase the reader&apos;s knowledge about the task, the way to achieve it, or the properties of the system as a whole. Because of their distinct communicative</context>
</contexts>
<marker>Kittredge, Korelsky, Rambow, 1991</marker>
<rawString>Richard Kittredge, Tanya Korelsky, and Owen Rambow. 1991. On the Need for Domain Communication Knowledge. Computational Intelligence, 7(4):305-314, November.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Richard Kittredge</author>
</authors>
<title>Variation and Homogeneity of Sublanguages.</title>
<date>1982</date>
<booktitle>Sublanguage: Studies of language in restricted semantic domains,</booktitle>
<pages>107--137</pages>
<editor>In Richard Kittredge and J. Lehrberger, editors,</editor>
<location>Berlin and New York.</location>
<contexts>
<context position="7499" citStr="Kittredge, 1982" startWordPosition="1162" endWordPosition="1163">Furthermore, we know that Macintosh documentation undergoes thorough local quality control. It certainly conforms to the principles of good documentation established by current research on technical documentation and on the needs of end-users, e.g., (Carroll, 1994; Hammond, 1994), in that it supplies clear and concise information for the task at hand. Finally, we have been assured by French users of the software that they consider this particular manual to be well written and to bear no unnatural trace of its origins. Technical manuals within a specific domain constitute a sublanguage, e.g., (Kittredge, 1982; Sager et at., 1980). An important defining property of a sublanguage is that of closure, both lexical and syntactic. Lexical closure has been demonstrated by, for example, (Kittredge, 1987), who shows that after as few as the first 2000 words of a sublanguage text, the number of new word types increases little if at all. Other work, e.g., (Biber, 1988; Biber, 1989) and (Grishman and Kittredge, 1986) illustrates the property of syntactic closure, which means that generally available constructions just do not occur in this or that sublanguage. In the light of these results, we considered a cor</context>
</contexts>
<marker>Kittredge, 1982</marker>
<rawString>Richard Kittredge. 1982. Variation and Homogeneity of Sublanguages. In Richard Kittredge and J. Lehrberger, editors, Sublanguage: Studies of language in restricted semantic domains, pages 107-137. de Gruyter, Berlin and New York.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Richard Kittredge</author>
</authors>
<title>The significance of sublanguage for automatic translation.</title>
<date>1987</date>
<booktitle>Machine Translation: Theoretical and methodological issues,</booktitle>
<pages>59--67</pages>
<editor>In Sergei Nirenburg, editor,</editor>
<publisher>Cambridge University Press,</publisher>
<location>London.</location>
<contexts>
<context position="7690" citStr="Kittredge, 1987" startWordPosition="1192" endWordPosition="1193">echnical documentation and on the needs of end-users, e.g., (Carroll, 1994; Hammond, 1994), in that it supplies clear and concise information for the task at hand. Finally, we have been assured by French users of the software that they consider this particular manual to be well written and to bear no unnatural trace of its origins. Technical manuals within a specific domain constitute a sublanguage, e.g., (Kittredge, 1982; Sager et at., 1980). An important defining property of a sublanguage is that of closure, both lexical and syntactic. Lexical closure has been demonstrated by, for example, (Kittredge, 1987), who shows that after as few as the first 2000 words of a sublanguage text, the number of new word types increases little if at all. Other work, e.g., (Biber, 1988; Biber, 1989) and (Grishman and Kittredge, 1986) illustrates the property of syntactic closure, which means that generally available constructions just do not occur in this or that sublanguage. In the light of these results, we considered a corpus of 15000 words to be adequate for our purposes, at least for an initial analysis. The MacWrite manual is organised into three chapters, corresponding to the three different sections ident</context>
</contexts>
<marker>Kittredge, 1987</marker>
<rawString>Richard Kittredge. 1987. The significance of sublanguage for automatic translation. In Sergei Nirenburg, editor, Machine Translation: Theoretical and methodological issues, pages 59-67. Cambridge University Press, London.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Richard Kittredge</author>
</authors>
<title>Efficiency vs. Generality in Interlingual Design: Some Linguistic Considerations.</title>
<date>1995</date>
<booktitle>In the Working notes of the IJCAI-95 Workshop on Multilingual Text Generation,</booktitle>
<location>Montreal, Canada.</location>
<contexts>
<context position="3128" citStr="Kittredge, 1995" startWordPosition="492" endWordPosition="493">guistic features and the situational characteristics under consideration. We first carried out a classical sublanguage analysis on our corpus as a whole, without differentiating between any of the situational characteristics (Hartley and Paris, 1995). This initial description was necessary to give us a clear statement of the linguistic potential required of our text generator, to which we could relate any restrictions on language imposed by situational variables. Thus we can account for language restrictions by appealing to general discourse principles, in keeping with the recommendations of (Kittredge, 1995) and (Biber, 1995) for the definition of sublanguages. We then correlated task elements with grammatical features. Finally, where linguistic realisation was under-determined by task structure alone, we established whether the communicative purpose provided more discriminating control over the linguistic resources available. 3 Linguistic Framework: Systemic Functional Linguistics Our analysis was carried out within the framework of Systemic-Functional Linguistics (sFL) (Halliday, 1978; Halliday, 1985) which views language as a resource for the creation of meaning. SFL stratifies meaning into co</context>
</contexts>
<marker>Kittredge, 1995</marker>
<rawString>Richard Kittredge. 1995. Efficiency vs. Generality in Interlingual Design: Some Linguistic Considerations. In the Working notes of the IJCAI-95 Workshop on Multilingual Text Generation, August 20-21, Montreal, Canada.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Rostislav Kocourek</author>
</authors>
<title>La langue francaise de la technique et de la science.</title>
<date>1982</date>
<publisher>Brandstetter Verlag,</publisher>
<location>Wiesbaden, Germany.</location>
<contexts>
<context position="22874" citStr="Kocourek, 1982" startWordPosition="3655" endWordPosition="3656">entifying within the discourse context the means for exercising explicit control over a text generator. An interesting difference with respect to previous descriptions is the use of the true (or direct) imperative to express an action in the procedure genre, as results from (Paris and Scott, 1994) seem to indicate that the infinitive-form of the imperative is preferred in French. These results, however, were obtained from a corpus of instructions mostly for domestic appliances as opposed to software manuals. Furthermore the use of the infinitive-form in instructions in general as observed by (Kocourek, 1982) is declining, as some of the conventions already common in English technical writing are being adopted by French technical writers, e.g., (Timbal-Duclaux, 1990). We also note that the patterns of realisations uncovered in our analysis follow the principle of good technical writing practice known as the minimalist approach, e.g., (Carroll, 1994; Hammond, 1994). Moreover, we observe that our corpus does not exhibit shortcomings identified in a Systemic Functional analysis of English software manuals (Plum et al., 1990), such as a high incidence of agentless passive and a failure to distinguish </context>
</contexts>
<marker>Kocourek, 1982</marker>
<rawString>Rostislav Kocourek. 1982. La langue francaise de la technique et de la science. Brandstetter Verlag, Wiesbaden, Germany.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Leila Kosseim</author>
<author>Guy Lapalme</author>
</authors>
<title>Content and rhetorical status selection in instructional texts.</title>
<date>1994</date>
<booktitle>In Proceedings of the Seventh International Workshop on Natural Language Generation, Kennebunkport, MN,</booktitle>
<pages>21--24</pages>
<contexts>
<context position="5563" citStr="Kosseim and Lapalme, 1994" startWordPosition="853" endWordPosition="856">le to expect that at least the same degree of commonality of description is achievable between English and French within this framework. Finally, KPML (Bateman, 1994), the tactical generator we employ, is based on SFL, and it is thus appropriate for us to characterise the corpus in terms immediately applicable to our generator. 4 Coding features Our lexico-grammatical coding was done using the networks and features of the Nigel grammar (Halliday, 1985). We focused on four main concerns, guided by previous work on instructional texts, e.g., (Lehrberger, 1986; Plum et al., 1990; Ghadessy, 1993; Kosseim and Lapalme, 1994). • Relations between processes: to determine whether textual cohesion was achieved through conjunctives or through relations implicit in the task structure elements. Among the features considered were clause dependency and conjunction type. • Agency: to see whether the actor performing or enabling a particular action is clearly identified, and whether the reader is explicitly addressed. We coded here for features such as voice and agent types. • Mood, modality and polarity: to find out the extent to which actions are presented to the reader as being desirable, possible, mandatory, or prohibit</context>
<context position="10919" citStr="Kosseim and Lapalme, 1994" startWordPosition="1713" endWordPosition="1716">igure 1: Examples of task element expressions 6 Task Structure Task structure is constituted by five types of task elements, which we define below. We used the notion of task structure element both as a contextual feature for the analysis and to determine the segmentation of the text into units. Each unit is taken to be the expression of a single task element. Our definition of the task elements is based on the concepts and relations commonly chosen to represent a task structure (a goal and its associated plan), e.g., (Fikes and Nilsson, 1971; Sacerdoti, 1977), and on related research, e.g., (Kosseim and Lapalme, 1994). Our generator produces instructions from an underlying semantic knowledge base which uses this representation (Paris et al., 1995). To generate an instruction for performing a task is to chose some task elements to be expressed and linearise them so that they form a coherent set for a given goal the user might have. We distinguish the following elements, and provide examples of them in Figure 1:2 goals: actions that users will adopt as goals and which motivate the use of a plan. functions: actions that represent the functionality of an interface object (such as a menu item). A 2The text in p</context>
<context position="22189" citStr="Kosseim and Lapalme, 1994" startWordPosition="3545" endWordPosition="3548">oration Non-modal 100.0% 75.0% 72.6% Modal 0.0% 25.0% 28.4% Figure 4: Genre-related differences in the modal system for goal Ready-Reference Elaboration Negative 0.0% 41.7% Positive 100% 58.3% Figure 5: Genre-related differences in the polarity system for constraint Procedure Ready-Reference Elaboration Imperative 97.3% 44.4% 77.6% Declarative 2.7% 55.6% 22.4% Figure 6: Genre-related differences in the mood system for substep 9 Related Work The results from our linguistic analysis are consistent with other research on sublanguages in the instructions domain, in both French and English, e.g., (Kosseim and Lapalme, 1994; Paris and Scott, 1994). Our analysis goes beyond previous work by identifying within the discourse context the means for exercising explicit control over a text generator. An interesting difference with respect to previous descriptions is the use of the true (or direct) imperative to express an action in the procedure genre, as results from (Paris and Scott, 1994) seem to indicate that the infinitive-form of the imperative is preferred in French. These results, however, were obtained from a corpus of instructions mostly for domestic appliances as opposed to software manuals. Furthermore the </context>
</contexts>
<marker>Kosseim, Lapalme, 1994</marker>
<rawString>Leila Kosseim and Guy Lapalme. 1994. Content and rhetorical status selection in instructional texts. In Proceedings of the Seventh International Workshop on Natural Language Generation, Kennebunkport, MN, 21-24 June 1994, pages 53-60.</rawString>
</citation>
<citation valid="true">
<authors>
<author>John Lehrberger</author>
</authors>
<title>Sublanguage Analysis.</title>
<date>1986</date>
<booktitle>Analyzing Language in Restricted Domains,</booktitle>
<pages>19--38</pages>
<editor>In Ralph Grishman and Richard Kittredge, editors,</editor>
<location>Hillsdale, New Jersey.</location>
<contexts>
<context position="5500" citStr="Lehrberger, 1986" startWordPosition="845" endWordPosition="846">91a; Bateman et al., 1991b). It is therefore reasonable to expect that at least the same degree of commonality of description is achievable between English and French within this framework. Finally, KPML (Bateman, 1994), the tactical generator we employ, is based on SFL, and it is thus appropriate for us to characterise the corpus in terms immediately applicable to our generator. 4 Coding features Our lexico-grammatical coding was done using the networks and features of the Nigel grammar (Halliday, 1985). We focused on four main concerns, guided by previous work on instructional texts, e.g., (Lehrberger, 1986; Plum et al., 1990; Ghadessy, 1993; Kosseim and Lapalme, 1994). • Relations between processes: to determine whether textual cohesion was achieved through conjunctives or through relations implicit in the task structure elements. Among the features considered were clause dependency and conjunction type. • Agency: to see whether the actor performing or enabling a particular action is clearly identified, and whether the reader is explicitly addressed. We coded here for features such as voice and agent types. • Mood, modality and polarity: to find out the extent to which actions are presented to </context>
</contexts>
<marker>Lehrberger, 1986</marker>
<rawString>John Lehrberger. 1986. Sublanguage Analysis. In Ralph Grishman and Richard Kittredge, editors, Analyzing Language in Restricted Domains, pages 19-38. Lawrence Erlbaum Associates, Hillsdale, New Jersey.</rawString>
</citation>
<citation valid="true">
<authors>
<author>James R Martin</author>
</authors>
<title>English text: systems and structure. Benjamins,</title>
<date>1992</date>
<location>Amsterdam.</location>
<contexts>
<context position="15684" citStr="Martin, 1992" startWordPosition="2510" endWordPosition="2511">ed out for function, goal and substep. Finally, with respect to the mood system, only substep can be realised through imperatives. 3The authors followed guidelines for identifying task element units which had yielded consistent results when used by students coding other corpora. &apos;Key Word In Context In other cases, however, we observe a diversity of realisations. We highlight here three cases: modality in goal, polarity in constraint, and mood in substep. In such cases, we must appeal to another source of control over the apparently available choices. We have looked to the construct of genre (Martin, 1992) to provide this additional control, on two grounds: (1) since genres are distinguished by their communicative purposes, we can view each of the functional sections already identified as a distinct genre; (2) genre is presented as controlling text structure and realisation. In Martin&apos;s view, genre is defined as a staged, goal-oriented social process realised through register, the context of situation, which in turn is realised in language to achieve the goals of a text. Genre is responsible for the selection of a text structure in terms of task elements. As part of the realisation process, gen</context>
</contexts>
<marker>Martin, 1992</marker>
<rawString>James R. Martin. 1992. English text: systems and structure. Benjamins, Amsterdam.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Christian M I M Matthiessen</author>
<author>John A Bateman</author>
</authors>
<title>Text generation and systemicfunctional linguistics: experiences from English and Japanese. Frances Pinter Publishers and St.</title>
<date>1991</date>
<publisher>Martin&apos;s Press,</publisher>
<location>London and New York.</location>
<contexts>
<context position="4472" citStr="Matthiessen and Bateman, 1991" startWordPosition="685" endWordPosition="688">ulting in a different meaning realised (i.e., expressed) by appropriate structures. The emphasis is on paradigmatic choices, as opposed to syntagmatic structures. Choices made in 192 each stratum constrain the choices available in the stratum beneath. Context thus constrains language. This framework was chosen for several reasons. First, the organisation of linguistic resources according to this principle is well-suited to natural language generation, where the starting point is necessarily a communicative goal, and the task is to find the most appropriate expression for the intended meaning (Matthiessen and Bateman, 1991). Second, a functional perspective offers an advantage for multilingual text generation, because of its ability to achieve a level of linguistic description which holds across languages more effectively than do structurally-based accounts. The approach has been shown capable of supporting the sharing of linguistic resources between languages as structurally distinct as English and Japanese (Bateman et al., 1991a; Bateman et al., 1991b). It is therefore reasonable to expect that at least the same degree of commonality of description is achievable between English and French within this framework</context>
</contexts>
<marker>Matthiessen, Bateman, 1991</marker>
<rawString>Christian M.I.M. Matthiessen and John A. Bateman. 1991. Text generation and systemicfunctional linguistics: experiences from English and Japanese. Frances Pinter Publishers and St. Martin&apos;s Press, London and New York.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kathleen R McKeown</author>
</authors>
<title>Text Generation.</title>
<date>1985</date>
<publisher>Cambridge University Press,</publisher>
<location>New York.</location>
<contexts>
<context position="16816" citStr="McKeown, 1985" startWordPosition="2694" endWordPosition="2695">text structure in terms of task elements. As part of the realisation process, generic choices preselect a register associated with particular elements of text structure, which in turn preselect lexico-grammatical features. The coding of our text in terms genre and task elements thus allows us to establish the role played by genre in the realisations of the task elements. It will also allow us to determine the text structures appropriate in each genre, a study we are currently undertaking. This is consistent with other accounts of text structure for text generation in technical domains, e.g., (McKeown, 1985; Paris, 1993; Kittredge et al., 1991). For those cases where the realisation remains under-determined by the task element type, we conducted a finer-grained analysis, by overlaying a genre partition on the undifferentiated data. We distinguished earlier two genres with which we are concerned: ready-reference and step-by-step. In the manual analysed, we recognised two more specific communicative purposes in the step-by-step section: to enable the reader to perform a task, and to increase the reader&apos;s knowledge about the task, the way to achieve it, or the properties of the system as a whole. B</context>
</contexts>
<marker>McKeown, 1985</marker>
<rawString>Kathleen R. McKeown. 1985. Text Generation. Cambridge University Press, New York.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael O&apos;Donnell</author>
</authors>
<title>From Corpus to Codings: Semi-Automating the Acquisition of Linguistic Features.</title>
<date>1995</date>
<booktitle>Proceedings of the AAAI Spring Symposium on Empirical Methods in Discourse Interpretation and Generation,</booktitle>
<pages>29</pages>
<institution>Stanford University,</institution>
<location>California,</location>
<contexts>
<context position="13326" citStr="O&apos;Donnell, 1995" startWordPosition="2123" endWordPosition="2124">While it might be important to separate planned and unplanned effects in the underlying representation, we again abstract over them in the lexicogrammatical coding. 194 sub-steps: actions which contribute to the execution of the plan. If the sub-steps are not primitive, they can themselves be achieved through other plans. 7 The Coding Procedure No tools exist to automate a functional analysis of text, which makes coding a large body of text a timeconsuming task. We first performed a detailed coding of units of texts on approximately 25% of the corpus, or about 400 units,3 using the WAG coder (O&apos;Donnell, 1995), a tool designed to facilitate a functional analysis. We then used a public-domain concordance program, MonoConc (Barlow, 1994), to verify the representativeness of the results. We enumerated the realisations of those features that the first analysis had shown as marked, and produced KWIC4 listings for each set of realisations. We found that the second analysis corroborated the results of the first, consistent with the nature of sublanguages. 8 Distribution of Grammatical Features over Task Structure and Communicative Purpose We examined the correlations between lexicogrammatical realisations</context>
</contexts>
<marker>O&apos;Donnell, 1995</marker>
<rawString>Michael O&apos;Donnell. 1995. From Corpus to Codings: Semi-Automating the Acquisition of Linguistic Features. Proceedings of the AAAI Spring Symposium on Empirical Methods in Discourse Interpretation and Generation, Stanford University, California, March 27 - 29, March.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Cecile Paris</author>
<author>Donia Scott</author>
</authors>
<title>Stylistic variation in multilingual instructions.</title>
<date>1994</date>
<booktitle>In Proceedings of the Seventh International Workshop on Natural Language Generation, Kennebunkport, MN,</booktitle>
<pages>21--24</pages>
<contexts>
<context position="22213" citStr="Paris and Scott, 1994" startWordPosition="3549" endWordPosition="3552">.0% 72.6% Modal 0.0% 25.0% 28.4% Figure 4: Genre-related differences in the modal system for goal Ready-Reference Elaboration Negative 0.0% 41.7% Positive 100% 58.3% Figure 5: Genre-related differences in the polarity system for constraint Procedure Ready-Reference Elaboration Imperative 97.3% 44.4% 77.6% Declarative 2.7% 55.6% 22.4% Figure 6: Genre-related differences in the mood system for substep 9 Related Work The results from our linguistic analysis are consistent with other research on sublanguages in the instructions domain, in both French and English, e.g., (Kosseim and Lapalme, 1994; Paris and Scott, 1994). Our analysis goes beyond previous work by identifying within the discourse context the means for exercising explicit control over a text generator. An interesting difference with respect to previous descriptions is the use of the true (or direct) imperative to express an action in the procedure genre, as results from (Paris and Scott, 1994) seem to indicate that the infinitive-form of the imperative is preferred in French. These results, however, were obtained from a corpus of instructions mostly for domestic appliances as opposed to software manuals. Furthermore the use of the infinitive-fo</context>
</contexts>
<marker>Paris, Scott, 1994</marker>
<rawString>Cecile Paris and Donia Scott. 1994. Stylistic variation in multilingual instructions. In Proceedings of the Seventh International Workshop on Natural Language Generation, Kennebunkport, MN, 21-24 June 1994, pages 45 — 52.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Cecile Paris</author>
<author>Keith Vander Linden</author>
<author>Markus Fischer</author>
<author>Anthony Hartley</author>
<author>Lyn Pemberton</author>
<author>Richard Power</author>
<author>Donia Scott</author>
</authors>
<title>A support tool for writing multilingual instructions.</title>
<date>1995</date>
<booktitle>In Proceedings of the Fourteenth International Joint Conference on Artificial Intelligence,</booktitle>
<pages>1398--1404</pages>
<location>Montréal, Canada,</location>
<contexts>
<context position="11051" citStr="Paris et al., 1995" startWordPosition="1731" endWordPosition="1734">e below. We used the notion of task structure element both as a contextual feature for the analysis and to determine the segmentation of the text into units. Each unit is taken to be the expression of a single task element. Our definition of the task elements is based on the concepts and relations commonly chosen to represent a task structure (a goal and its associated plan), e.g., (Fikes and Nilsson, 1971; Sacerdoti, 1977), and on related research, e.g., (Kosseim and Lapalme, 1994). Our generator produces instructions from an underlying semantic knowledge base which uses this representation (Paris et al., 1995). To generate an instruction for performing a task is to chose some task elements to be expressed and linearise them so that they form a coherent set for a given goal the user might have. We distinguish the following elements, and provide examples of them in Figure 1:2 goals: actions that users will adopt as goals and which motivate the use of a plan. functions: actions that represent the functionality of an interface object (such as a menu item). A 2The text in parentheses in the Figure is part of the linguistic context of the task element rather than the element itself. function is closely r</context>
</contexts>
<marker>Paris, Linden, Fischer, Hartley, Pemberton, Power, Scott, 1995</marker>
<rawString>Cecile Paris, Keith Vander Linden, Markus Fischer, Anthony Hartley, Lyn Pemberton, Richard Power, and Donia Scott. 1995. A support tool for writing multilingual instructions. In Proceedings of the Fourteenth International Joint Conference on Artificial Intelligence, August 20-25, Montréal, Canada, pages 1398-1404.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Cecile L Paris</author>
</authors>
<title>User Modelling in Text Generation.</title>
<date>1993</date>
<location>Frances Pinter, London.</location>
<contexts>
<context position="16829" citStr="Paris, 1993" startWordPosition="2696" endWordPosition="2697">in terms of task elements. As part of the realisation process, generic choices preselect a register associated with particular elements of text structure, which in turn preselect lexico-grammatical features. The coding of our text in terms genre and task elements thus allows us to establish the role played by genre in the realisations of the task elements. It will also allow us to determine the text structures appropriate in each genre, a study we are currently undertaking. This is consistent with other accounts of text structure for text generation in technical domains, e.g., (McKeown, 1985; Paris, 1993; Kittredge et al., 1991). For those cases where the realisation remains under-determined by the task element type, we conducted a finer-grained analysis, by overlaying a genre partition on the undifferentiated data. We distinguished earlier two genres with which we are concerned: ready-reference and step-by-step. In the manual analysed, we recognised two more specific communicative purposes in the step-by-step section: to enable the reader to perform a task, and to increase the reader&apos;s knowledge about the task, the way to achieve it, or the properties of the system as a whole. Because of the</context>
</contexts>
<marker>Paris, 1993</marker>
<rawString>Cecile L. Paris. 1993. User Modelling in Text Generation. Frances Pinter, London.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Guenter A Plum</author>
<author>Christian M I M Matthiessen</author>
<author>Michael A K Halliday</author>
<author>Natalie Shea</author>
</authors>
<date>1990</date>
<booktitle>The Electronic Discourse Analyzer Project: Report on Textual Analysis of FJ Manuals. Technical report, Fujitsu Australia Limited, Documentation Engineering Division. EDA Project Deliverables; Output 7.</booktitle>
<contexts>
<context position="5519" citStr="Plum et al., 1990" startWordPosition="847" endWordPosition="850">., 1991b). It is therefore reasonable to expect that at least the same degree of commonality of description is achievable between English and French within this framework. Finally, KPML (Bateman, 1994), the tactical generator we employ, is based on SFL, and it is thus appropriate for us to characterise the corpus in terms immediately applicable to our generator. 4 Coding features Our lexico-grammatical coding was done using the networks and features of the Nigel grammar (Halliday, 1985). We focused on four main concerns, guided by previous work on instructional texts, e.g., (Lehrberger, 1986; Plum et al., 1990; Ghadessy, 1993; Kosseim and Lapalme, 1994). • Relations between processes: to determine whether textual cohesion was achieved through conjunctives or through relations implicit in the task structure elements. Among the features considered were clause dependency and conjunction type. • Agency: to see whether the actor performing or enabling a particular action is clearly identified, and whether the reader is explicitly addressed. We coded here for features such as voice and agent types. • Mood, modality and polarity: to find out the extent to which actions are presented to the reader as being</context>
<context position="23397" citStr="Plum et al., 1990" startWordPosition="3735" endWordPosition="3738">rmore the use of the infinitive-form in instructions in general as observed by (Kocourek, 1982) is declining, as some of the conventions already common in English technical writing are being adopted by French technical writers, e.g., (Timbal-Duclaux, 1990). We also note that the patterns of realisations uncovered in our analysis follow the principle of good technical writing practice known as the minimalist approach, e.g., (Carroll, 1994; Hammond, 1994). Moreover, we observe that our corpus does not exhibit shortcomings identified in a Systemic Functional analysis of English software manuals (Plum et al., 1990), such as a high incidence of agentless passive and a failure to distinguish the function of informing from that of instructing. Other work has focused on the cross-linguistic realisations of two specific semantic relations (generation and enablement) (Delin et al., 1994; Delin et al., 1996), in a more general corpus of instructions for household appliances. Our work focuses on the single application domain of software instructions. However, it takes into consideration the whole task structure and looks at the realisation of semantic elements as found in the knowledge base, instead of two sema</context>
</contexts>
<marker>Plum, Matthiessen, Halliday, Shea, 1990</marker>
<rawString>Guenter A. Plum, Christian M.I.M. Matthiessen, Michael A.K. Halliday, and Natalie Shea. 1990. The Electronic Discourse Analyzer Project: Report on Textual Analysis of FJ Manuals. Technical report, Fujitsu Australia Limited, Documentation Engineering Division. EDA Project Deliverables; Output 7.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Earl D Sacerdoti</author>
</authors>
<title>A Structure for Plans and Behavior.</title>
<date>1977</date>
<publisher>Elsevier,</publisher>
<location>New York.</location>
<contexts>
<context position="10859" citStr="Sacerdoti, 1977" startWordPosition="1706" endWordPosition="1707">ation Gloss: Next, one opens the target document Figure 1: Examples of task element expressions 6 Task Structure Task structure is constituted by five types of task elements, which we define below. We used the notion of task structure element both as a contextual feature for the analysis and to determine the segmentation of the text into units. Each unit is taken to be the expression of a single task element. Our definition of the task elements is based on the concepts and relations commonly chosen to represent a task structure (a goal and its associated plan), e.g., (Fikes and Nilsson, 1971; Sacerdoti, 1977), and on related research, e.g., (Kosseim and Lapalme, 1994). Our generator produces instructions from an underlying semantic knowledge base which uses this representation (Paris et al., 1995). To generate an instruction for performing a task is to chose some task elements to be expressed and linearise them so that they form a coherent set for a given goal the user might have. We distinguish the following elements, and provide examples of them in Figure 1:2 goals: actions that users will adopt as goals and which motivate the use of a plan. functions: actions that represent the functionality of</context>
</contexts>
<marker>Sacerdoti, 1977</marker>
<rawString>Earl D. Sacerdoti. 1977. A Structure for Plans and Behavior. Elsevier, New York.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Juan C Sager</author>
<author>David Dungworth</author>
<author>Peter F McDonald</author>
</authors>
<title>English Special Languages.</title>
<date>1980</date>
<publisher>Brandstetter Verlag,</publisher>
<location>Wiesbaden, Germany.</location>
<marker>Sager, Dungworth, McDonald, 1980</marker>
<rawString>Juan C. Sager, David Dungworth, and Peter F. McDonald. 1980. English Special Languages. Brandstetter Verlag, Wiesbaden, Germany.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Juan C Sager</author>
</authors>
<title>Language Engineering and Translation: Consequences of Automation.</title>
<date>1993</date>
<publisher>John Benjamins Publishing Company,</publisher>
<location>Amsterdam.</location>
<contexts>
<context position="6679" citStr="Sager, 1993" startWordPosition="1033" endWordPosition="1034">o which actions are presented to the reader as being desirable, possible, mandatory, or prohibited. We coded for both true and implicit negatives, and for both personal and impersonal expressions of modality. • Process types: to see how the domain is construed in terms of actions on the part of the user and the software. We coded for sub-categories of material, mental, verbal and relational processes. 5 The Corpus The analysis was conducted on the French version of the Macintosh MacWrite manual (Kaehler, 1983). The manual is derived from an English source by a process of adaptive translation (Sager, 1993), i.e., one which localises the text to the expectations of the target readership. The fact that the translation is adaptive rather than literal gives us confidence in using this manual for our analysis.&apos; Furthermore, we know that Macintosh documentation undergoes thorough local quality control. It certainly conforms to the principles of good documentation established by current research on technical documentation and on the needs of end-users, e.g., (Carroll, 1994; Hammond, 1994), in that it supplies clear and concise information for the task at hand. Finally, we have been assured by French u</context>
</contexts>
<marker>Sager, 1993</marker>
<rawString>Juan C. Sager. 1993. Language Engineering and Translation: Consequences of Automation. John Benjamins Publishing Company, Amsterdam.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Louis Timbal-Duclaux</author>
</authors>
<title>La communication ecrite scientifique et technique. ESF,</title>
<date>1990</date>
<location>Paris, France.</location>
<contexts>
<context position="23035" citStr="Timbal-Duclaux, 1990" startWordPosition="3679" endWordPosition="3680">descriptions is the use of the true (or direct) imperative to express an action in the procedure genre, as results from (Paris and Scott, 1994) seem to indicate that the infinitive-form of the imperative is preferred in French. These results, however, were obtained from a corpus of instructions mostly for domestic appliances as opposed to software manuals. Furthermore the use of the infinitive-form in instructions in general as observed by (Kocourek, 1982) is declining, as some of the conventions already common in English technical writing are being adopted by French technical writers, e.g., (Timbal-Duclaux, 1990). We also note that the patterns of realisations uncovered in our analysis follow the principle of good technical writing practice known as the minimalist approach, e.g., (Carroll, 1994; Hammond, 1994). Moreover, we observe that our corpus does not exhibit shortcomings identified in a Systemic Functional analysis of English software manuals (Plum et al., 1990), such as a high incidence of agentless passive and a failure to distinguish the function of informing from that of instructing. Other work has focused on the cross-linguistic realisations of two specific semantic relations (generation an</context>
</contexts>
<marker>Timbal-Duclaux, 1990</marker>
<rawString>Louis Timbal-Duclaux. 1990. La communication ecrite scientifique et technique. ESF, Paris, France.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>