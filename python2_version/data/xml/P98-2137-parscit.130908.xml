<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.080659">
<title confidence="0.971982">
Babel: A testbed for research in origins of language
</title>
<author confidence="0.868969">
Angus McIntyre
</author>
<affiliation confidence="0.529896">
Sony CSL Paris
</affiliation>
<address confidence="0.628202">
6 rue Amyot
Paris 75003, France
</address>
<email confidence="0.852114">
angusacsl.sony.fr
</email>
<sectionHeader confidence="0.989948" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999959272727273">
We believe that language is a complex adaptive
system that emerges from adaptive interactions
between language users and continues to evolve
and adapt through repeated interactions. Our
research looks at the mechanisms and processes
involved in such emergence and adaptation. To
provide a basis for our computer simulations,
we have implemented an open-ended, extensi-
ble testbed called Babel which allows rapid con-
struction of experiments and flexible visualiza-
tion of results.
</bodyText>
<sectionHeader confidence="0.9988" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999978433333334">
Over the past few years, a growing number of
researchers have begun to look at some of the
fundamental questions in linguistics in a new
light, using new tools and methodologies to ex-
plore a number of unresolved issues. Among
these issues are questions about the origin and
the evolution of natural languages - how a lan-
guage can arise, and how it can continue to de-
velop and change over time (see (Steels, 1997)
for a summary).
Some workers in the field stick relatively
closely to what might be described as the Chom-
skyan orthodoxy (see (Chomsky, 1981), (Chom-
sky, 1986)) in assuming the existence of a
genetically-encoded language acquisition device
(LAD) which is primarily responsible for deter-
mining the properties of language. For these
researchers (see for example (Briscoe, 1997)),
computer simulations offer the chance to ex-
plore the possible properties and origins of the
LAD.
Other researchers choose to focus not on ge-
netic evolution of human linguistic faculties, but
on the selectionist forces that operate on lan-
guage itself. Kirby and Hurford (Kirby and
Hurford, 1997), for example, have shown that
a model of selectionist processes operating on
the language is able to explain both linguis-
tic universals and variational constraints. The
role of selection effects on language can even
be explored independently of any assumed in-
herited language faculty; Oliphant (Oliphant,
1996) shows that communication may emerge
from the nature of structured and repeated in-
teractions between language users, while Steels
(Steels, 1996) demonstrates how a coherent
shared language can evolve in a population of
agents as a result of repeated language games
— stylised interactions involving the exchange of
linguistic information.
Our research views language as a complex
adaptive system that emerges as a result of
interactions between language users. Contin-
ued adaptive interactions lead naturally to the
evolution of the language and the diffusion of
new linguistic tokens and properties through the
community of speakers. Using computer simu-
lations of populations of language users, we are
investigating the processes that shape natural
language and exploring possible learning mech-
anisms that can allow coherent shared commu-
nication systems to arise in populations.
This paper describes a tool that we have de-
veloped to allow rapid implementation of exper-
imental simulations within this paradigm. Our
description begins with an overview of the prin-
cipal requirements we aimed to meet, followed
by a more detailed look at the actual imple-
mentation of the tool and the facilities that it
provides.
</bodyText>
<sectionHeader confidence="0.996437" genericHeader="introduction">
2 Requirements
</sectionHeader>
<bodyText confidence="0.997178">
Our approach to studying language is based
on multi-agent simulations. Mainstream re-
search on multi-agent systems has given rise
to a number of environments and programming
</bodyText>
<page confidence="0.992488">
830
</page>
<bodyText confidence="0.9999865">
languages for building simulations (consider, for
example, SWARM (Minar et al., 1996), GAEA
(Nakashima et al., 1996), or AKL (Carlson et
al., 1994)), but none of these systems have been
designed for specifically linguistic experimen-
tation. Moreover, we wanted to work within
the paradigm proposed by Steels (Steels, 1996),
where language-using agents construct a shared
language through repeated interactions with a
precise structure. Examples of such games in-
clude naming games, in which agents take turns
naming and learning the names of objects in
their simulated environment, imitation games
in which one agent attempts to meaningfully
imitate a linguistic form presented by another,
and discrimination games, in which agents at-
tempt to build a system that allows them to dis-
cern distinctions between objects in the environ-
ment. The tool needed to provide a library of re-
usable building blocks with which we could de-
scribe the formal structure of these games, rep-
resent the principal elements of the simulated
environment, and develop models of the agents&apos;
memories and learning processes. Moreover, it
was important that it should be open-ended, so
that we would be able to use pre-defined ele-
ments to rapidly build new simulations based
on new game types or agent properties.
In addition to providing building blocks for
simulation development, the system must of-
fer an interface for controlling the simulations.
This interface should allow users to launch sim-
ulations, to modify the environment by adding
or removing agents, to change experimental pa-
rameters and so forth. To simplify the task of
porting the tool and to protect simulation de-
velopers from the intricacies of user interface
programming, we also wanted to isolate the in-
terface code as much as possible from the code
defining the (portable) core of the system and
from code written by experimenters.
Lastly, the tool was required to provide ways
in which the data generated by simulations
could be visualized. One of the challenges in
this type of simulation, particularly where mul-
tiple agents are involved, is in getting an impres-
sion of the changes that are taking place. We
wanted something that could let us &apos;look inside&apos;
our simulations as they ran and try to get an
idea of what was actually happening. It should
also, of course, provide the means to export the
data for subsequent analysis or presentation.
In summary, the system needed to offer an
extensible set of building blocks for simulation
development, tools for controlling the simula-
tions, and tools for visualizing the progress of
simulations. In the next section we will look at
the approach taken to meeting these needs.
</bodyText>
<sectionHeader confidence="0.990528" genericHeader="method">
3 Implementation
</sectionHeader>
<bodyText confidence="0.999989321428571">
The choice of language for the implementation
was determined by the need for a standardized
language suitable for rapid prototyping with
good symbolic and list-processing capabilities.
While the portability of Java was tempting, we
eventually decided on Common LISP ((Steele,
1990)) with its more powerful symbol and list
manipulation facilities.
Babel was developed using Macintosh Com-
mon LISP from Digitool, and has since been
ported to Windows under Allegro Common
LISP by colleagues at the Vrije Universiteit
Brussel. The core of the system is portable
Common LISP that can run on any platform,
leaving only the interface to be ported to other
platforms. In future, when stable implementa-
tions of the Common LISP Interface Manager
(CUM) are widely available, it may be possi-
ble to produce a single version which will run
on any system. The task of porting is, however,
not too onerous, since the majority of the code is
contained in the portable core. Most important
of all, experimenter code — definitions of agents,
game types and environments — can typically
run without modification on any platform. The
high-level services provided by the toolkit mean
that experimenters rarely need to get involved
in platform-specific interface programming.
</bodyText>
<subsectionHeader confidence="0.998114">
3.1 Class library
</subsectionHeader>
<bodyText confidence="0.97550175">
Building blocks for experimental development
are provided by a rich class library of
CLOS (Common LISP Object System) objects.
Classes present in the library include
</bodyText>
<listItem confidence="0.999636166666667">
• basic agent classes
• classes for capturing information about in-
teractions, the contexts in which they take
place and the linguistic tokens exchanged
• classes representing the agent&apos;s environ-
ment (&apos;worlds&apos;)
</listItem>
<page confidence="0.854108">
831
</page>
<listItem confidence="0.950406333333333">
• data structures that can be used to imple-
ment agent memories and learning mecha-
nisms
</listItem>
<bodyText confidence="0.999940689655172">
The two most important kinds of classes
are the agent and the world classes. The
agent classes define the capabilities of individ-
ual agents - the way they store information,
the kind of utterances they can produce, and
the mechanisms they use to learn or to build
structure. Depending on the nature of the envi-
ronment, agents may also have attributes such
as position, age, energy state, social status, or
any other property that might be relevant. The
core class library provides a root class of agents,
together with some specializations appropriate
to given interaction types or learning models.
Experimenters can use these classes as founda-
tions for building agents to function in a specific
experimental context.
While agent classes define the capabilities and
properties of individual speakers in the language
community, the world classes capture the prop-
erties of the world and, more importantly, the
nature of interactions between the agents. In
this way, procedural definitions of the different
kinds of language games can be given as part of
the definition of a basic world class. The exper-
imenter can use a given language game simply
by basing their experimental world on the ap-
propriate class.
As an example, consider the following code
fragment taken from the ng-world class:
</bodyText>
<figure confidence="0.611192363636364">
(defmethod RUN-GAME ((World ng-world))
(let*
((Speaker (choose-speaker ...))
(Hearer (choose-hearer ...))
(Context (choose-context ...))
(Utterance (compose-utterance ...))
(Success
(when Utterance
(recognise-or-store ...))))
(update-world-state ...)
(register-interaction ...)))
</figure>
<bodyText confidence="0.999192166666667">
This defines the basic form of the naming
game - the choice of speaker and hearer, the
choice of a context (including a topic), and the
construction of an utterance by the speaker, fol-
lowed by recognition of the utterance by the
hearer&apos;. The state of the world - including the
</bodyText>
<footnote confidence="0.9772285">
1To make the code easier to read, function arguments
are not shown
</footnote>
<figureCaption confidence="0.999782">
Figure 1: Core classes in Babel
</figureCaption>
<bodyText confidence="0.99994516">
agents&apos; own memory structures - is then up-
dated and the interaction is registered by the
monitoring system (described later). Each of
the methods called by this method can be indi-
vidually overridden by subclasses, giving exper-
imenters fine control over the procedures used
to choose speakers or hearers, formulate utter-
ances, store information and so forth.
The class library is implemented in a modular
fashion, so that experimenters can extend the
functionality of the base classes by loading ad-
ditional modules. The multiple-inheritance sys-
tem in CLOS allows properties to be attached
to experimental objects simply by making them
inherit from different subclasses. For instance,
any object can be given a position by making
it inherit from the class spatial-object de-
fined in the Space module, as shown in Figure
1, which shows a portion of the existing class
library.
As Babel evolves, useful classes and data
structures defined by experimenters are ab-
sorbed into the core library set where they can
in turn serve as building blocks for future ex-
periments.
</bodyText>
<subsectionHeader confidence="0.987939">
3.2 Control interface
</subsectionHeader>
<bodyText confidence="0.99833">
In addition to the core class library, Babel must
provide an interface that can be used to control
</bodyText>
<figure confidence="0.995350342105263">
world
reporter monitor
open-gdng-
world
Geographically.
Distributed
Naming Game
spatial-
object
world-with-
objects
open-
world
object
agent context utterance
configurable-
object
ng-agent ng-world
gdna-
gdng- worrd
agent
Naming
Game
open-ng-
world
cluster
832
Control
Controls Fa-rameters I Reporters I Tasks
C=I
ima ) I
T.11 Ihe■ sl*
ear,
Met* OW
•••••• 55=
113&amp;quot;:3
to.104....
*won na
</figure>
<figureCaption confidence="0.999618">
Figure 2: Babel&apos;s main control window
</figureCaption>
<bodyText confidence="0.999895259259259">
the simulations. As previously noted, the core
Babel functions and the code defining the inter-
face are carefully separated, in order to facilitate
porting and allow experimenters to write code
that does not depend on — or require knowledge
of — any specific operating system platform.
The control interface in Babel is realised by
a single window that allows the user to launch
simulations, to set experimental parameters, to
configure data reporting tools and even to write
simple batch scripts to control ongoing simu-
lations. The different functionalities are sepa-
rated out into subpanes that group related con-
trols together. Figure 2 shows a stylised view of
the interface, showing each of the main control
panes.
Access to interface functions is available to
experimenter code through a well-defined API.
For instance, experimental parameters can be
declared using a simple description language
that specifies the type, range and default val-
ues for each parameter. Parameters declared in
this way are automatically accessible for editing
through the parameter editor, and can even be
updated programmatically at runtime by batch
scripts executed by Babel&apos;s built-in task proces-
sor.
</bodyText>
<subsectionHeader confidence="0.999802">
3.3 Visualization tools
</subsectionHeader>
<bodyText confidence="0.999962581818182">
A major challenge has been to provide a way
to allow experimenters to follow the progress
of their experiments and to view and extract
data from the simulations. The same consid-
erations that governed design of the interface
are applicable here as well: the code needed to
display simulation data (for instance by draw-
ing a graph onscreen) is typically platform-
dependent, but experimenters should not need
to get involved in user interface programming
simply to see their results. Moreover, they
should not need to &apos;reinvent the wheel&apos; each
time; once a particular way of visualizing data
has been implemented, it should be available to
all experiments that can make use of a similar
representation.
The approach taken in Babel has been to sep-
arate out the task of data collection from the
task of data display. We call the data collectors
monitors, because they monitor the simulation
as it proceeds and sample data at appropriate
intervals or under specific circumstances. Data
display is handled by reporters, which take in-
formation from the monitors and present it to
the user or export it for analysis by other pro-
grams.
Monitors and reporters stand in a many-to-
many relationship to each other. The data from
a given monitor type can be shown by a range
of different possible reporters; in the same way,
a single reporter instance can show the out-
put from multiple monitors simultaneously. In
the case of a graph display, for example, dif-
ferent experimental variables or measures may
be drawn on the same chart, as shown in Fig-
ure 3, where change in population is graphed
against communicative success over time. Simi-
larly, a map might show the positions of individ-
ual agents and the zones of occurrence of differ-
ent linguistic features. The control interface al-
lows users to instantiate and combine monitors
and reporters, while a description system allows
the Babel framework to ensure that users do not
attempt to combine incompatible reporters and
monitors at runtime, issuing a warning if the
user attempts to make an inappropriate match.
Communication between monitors and re-
porters is defined by a high-level API, allowing
the monitors to remain platform-independent.
Experimenters can build their own monitors
based on a library of core monitor classes which
define appropriate behaviors such as taking
samples at specified intervals, reacting to events
in the world or watching for the occurrence of
particular conditions. Other classes may spec-
</bodyText>
<page confidence="0.998422">
833
</page>
<figureCaption confidence="0.9799225">
Figure 3: A graph display with two installed
monitors
</figureCaption>
<bodyText confidence="0.999660777777778">
ify the sampling range of a given monitor — a
single agent, a defined group, or the entire pop-
ulation — and multiple-inheritance makes it pos-
sible to flexibly combine the different types. Ef-
forts have been made to provide powerful base
classes to perform commonly-required tasks. In
some cases, adding new monitoring functional-
ity can involve as little as defining and declaring
a single sampling function.
</bodyText>
<sectionHeader confidence="0.997942" genericHeader="evaluation">
4 Evaluation and status
</sectionHeader>
<bodyText confidence="0.9999882">
At the time of writing, the Babel toolkit is still
under development, and has only been released
to a very limited test group. Nevertheless, ini-
tial reactions have been generally positive, and
the consensus seems to be that it meets its pri-
mary goal of simplifying and accelerating the
task of developing simulations. A Windows port
is in progress, and there are plans to make the
software available to a wider community in fu-
ture if there is sufficient interest.
</bodyText>
<sectionHeader confidence="0.999259" genericHeader="conclusions">
5 Conclusion
</sectionHeader>
<bodyText confidence="0.999985666666667">
This paper has presented an software environ-
ment for the development of multi-agent-based
simulations of language emergence and evolu-
tion. Among the innovative features of the soft-
ware are a class library capable of represent-
ing the stylised interactions known as language
games which form the basis of our research, and
a flexible mechanism for capturing and present-
ing data generated by the simulation.
</bodyText>
<sectionHeader confidence="0.999073" genericHeader="acknowledgments">
6 Acknowledgements
</sectionHeader>
<bodyText confidence="0.999917428571429">
The Babel environment was developed at the
Sony Computer Science Laboratory in Paris.
My colleagues Luc Steels and Frederic Kaplan
of Sony CSL Paris, and Joris van Looveren and
Bart de Boer from the Vrije Universiteit Brus-
sel have provided essential feedback and sugges-
tions throughout the development process.
</bodyText>
<sectionHeader confidence="0.998023" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.995432634146341">
Ted Briscoe. 1997. Language acquisition: the
bioprogram hypothesis and the baldwin ef-
fect. Language. (submitted).
B. Carlson, S. Janson, and S. Haridi. 1994.
Akl(fd): A concurrent language for fd pro-
gramming. In Proceedings of the 1994 In-
ternational Logic Programming Symposium.
MIT Press.
Noam Chomsky. 1981. Government and Bind-
ing. Foris, Dordrecht.
Noam Chomsky. 1986. Knowledge of Language.
Praeger.
Simon Kirby and James Hurford. 1997. Learn-
ing, culture and evolution in the origin of lin-
guistic constraints. In Phil Husbands and In-
man Harvey, editors, Fourth European Con-
ference on Artificial Life. MIT Press.
Nelson Minar, Roger Burkhart, Chris Langton,
and Manor Ashkenazi. 1996. The swarm sim-
ulation system: A toolkit for building multi-
agent simulations. Technical report, SantaFe
Institute.
Hideyuki Nakashima, Itsuki Noda, and Kenichi
Handa. 1996. Organic programming lan-
guage gaea for multi-agents. In Mario
Tokoro, editor, Proceedings of the Second In-
ternational Conference on Multi-Agent Sys-
tems, pages 236-243, Menlo Park,CA. The
AAAI Press.
Mike Oliphant. 1996. The dilemma of saus-
surean communication. BioSystems, 37(1-
2):31-38.
Guy L. Steele. 1990. Common LISP: The Lan-
guage. Digital Press, Bedford, MA., second
edition.
Luc Steels. 1996. Self-organizing vocabularies.
In C. Langton, editor, Proceedings of Alife V,
Nara, Japan.
Luc Steels. 1997. The synthetic modeling of
language origins. Evolution of Communica-
tion Journal, 1(1):1-34.
</reference>
<figure confidence="0.954533">
aquilogegiggml Graph Display 1
P.vollatios Ploalter
Populattm Stu
</figure>
<page confidence="0.975753">
834
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.854062">
<title confidence="0.999562">Babel: A testbed for research in origins of language</title>
<author confidence="0.999672">Angus McIntyre</author>
<affiliation confidence="0.95195">Sony CSL Paris</affiliation>
<address confidence="0.931345">6 rue Amyot Paris 75003, France</address>
<email confidence="0.989249">angusacsl.sony.fr</email>
<abstract confidence="0.999068416666667">that language is a complex adaptive system that emerges from adaptive interactions between language users and continues to evolve and adapt through repeated interactions. Our research looks at the mechanisms and processes involved in such emergence and adaptation. To provide a basis for our computer simulations, we have implemented an open-ended, extensible testbed called Babel which allows rapid construction of experiments and flexible visualization of results.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Ted Briscoe</author>
</authors>
<title>Language acquisition: the bioprogram hypothesis and the baldwin effect.</title>
<date>1997</date>
<journal>Language. (submitted).</journal>
<contexts>
<context position="1422" citStr="Briscoe, 1997" startWordPosition="225" endWordPosition="226">gies to explore a number of unresolved issues. Among these issues are questions about the origin and the evolution of natural languages - how a language can arise, and how it can continue to develop and change over time (see (Steels, 1997) for a summary). Some workers in the field stick relatively closely to what might be described as the Chomskyan orthodoxy (see (Chomsky, 1981), (Chomsky, 1986)) in assuming the existence of a genetically-encoded language acquisition device (LAD) which is primarily responsible for determining the properties of language. For these researchers (see for example (Briscoe, 1997)), computer simulations offer the chance to explore the possible properties and origins of the LAD. Other researchers choose to focus not on genetic evolution of human linguistic faculties, but on the selectionist forces that operate on language itself. Kirby and Hurford (Kirby and Hurford, 1997), for example, have shown that a model of selectionist processes operating on the language is able to explain both linguistic universals and variational constraints. The role of selection effects on language can even be explored independently of any assumed inherited language faculty; Oliphant (Oliphan</context>
</contexts>
<marker>Briscoe, 1997</marker>
<rawString>Ted Briscoe. 1997. Language acquisition: the bioprogram hypothesis and the baldwin effect. Language. (submitted).</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Carlson</author>
<author>S Janson</author>
<author>S Haridi</author>
</authors>
<title>Akl(fd): A concurrent language for fd programming.</title>
<date>1994</date>
<booktitle>In Proceedings of the 1994 International Logic Programming Symposium.</booktitle>
<publisher>MIT Press.</publisher>
<contexts>
<context position="3578" citStr="Carlson et al., 1994" startWordPosition="557" endWordPosition="560">ed to allow rapid implementation of experimental simulations within this paradigm. Our description begins with an overview of the principal requirements we aimed to meet, followed by a more detailed look at the actual implementation of the tool and the facilities that it provides. 2 Requirements Our approach to studying language is based on multi-agent simulations. Mainstream research on multi-agent systems has given rise to a number of environments and programming 830 languages for building simulations (consider, for example, SWARM (Minar et al., 1996), GAEA (Nakashima et al., 1996), or AKL (Carlson et al., 1994)), but none of these systems have been designed for specifically linguistic experimentation. Moreover, we wanted to work within the paradigm proposed by Steels (Steels, 1996), where language-using agents construct a shared language through repeated interactions with a precise structure. Examples of such games include naming games, in which agents take turns naming and learning the names of objects in their simulated environment, imitation games in which one agent attempts to meaningfully imitate a linguistic form presented by another, and discrimination games, in which agents attempt to build </context>
</contexts>
<marker>Carlson, Janson, Haridi, 1994</marker>
<rawString>B. Carlson, S. Janson, and S. Haridi. 1994. Akl(fd): A concurrent language for fd programming. In Proceedings of the 1994 International Logic Programming Symposium. MIT Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Noam Chomsky</author>
</authors>
<title>Government and Binding. Foris,</title>
<date>1981</date>
<location>Dordrecht.</location>
<contexts>
<context position="1189" citStr="Chomsky, 1981" startWordPosition="192" endWordPosition="193">ments and flexible visualization of results. 1 Introduction Over the past few years, a growing number of researchers have begun to look at some of the fundamental questions in linguistics in a new light, using new tools and methodologies to explore a number of unresolved issues. Among these issues are questions about the origin and the evolution of natural languages - how a language can arise, and how it can continue to develop and change over time (see (Steels, 1997) for a summary). Some workers in the field stick relatively closely to what might be described as the Chomskyan orthodoxy (see (Chomsky, 1981), (Chomsky, 1986)) in assuming the existence of a genetically-encoded language acquisition device (LAD) which is primarily responsible for determining the properties of language. For these researchers (see for example (Briscoe, 1997)), computer simulations offer the chance to explore the possible properties and origins of the LAD. Other researchers choose to focus not on genetic evolution of human linguistic faculties, but on the selectionist forces that operate on language itself. Kirby and Hurford (Kirby and Hurford, 1997), for example, have shown that a model of selectionist processes opera</context>
</contexts>
<marker>Chomsky, 1981</marker>
<rawString>Noam Chomsky. 1981. Government and Binding. Foris, Dordrecht.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Noam Chomsky</author>
</authors>
<date>1986</date>
<journal>Knowledge of Language. Praeger.</journal>
<contexts>
<context position="1206" citStr="Chomsky, 1986" startWordPosition="194" endWordPosition="196">e visualization of results. 1 Introduction Over the past few years, a growing number of researchers have begun to look at some of the fundamental questions in linguistics in a new light, using new tools and methodologies to explore a number of unresolved issues. Among these issues are questions about the origin and the evolution of natural languages - how a language can arise, and how it can continue to develop and change over time (see (Steels, 1997) for a summary). Some workers in the field stick relatively closely to what might be described as the Chomskyan orthodoxy (see (Chomsky, 1981), (Chomsky, 1986)) in assuming the existence of a genetically-encoded language acquisition device (LAD) which is primarily responsible for determining the properties of language. For these researchers (see for example (Briscoe, 1997)), computer simulations offer the chance to explore the possible properties and origins of the LAD. Other researchers choose to focus not on genetic evolution of human linguistic faculties, but on the selectionist forces that operate on language itself. Kirby and Hurford (Kirby and Hurford, 1997), for example, have shown that a model of selectionist processes operating on the langu</context>
</contexts>
<marker>Chomsky, 1986</marker>
<rawString>Noam Chomsky. 1986. Knowledge of Language. Praeger.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Simon Kirby</author>
<author>James Hurford</author>
</authors>
<title>Learning, culture and evolution in the origin of linguistic constraints.</title>
<date>1997</date>
<booktitle>Fourth European Conference on Artificial Life.</booktitle>
<editor>In Phil Husbands and Inman Harvey, editors,</editor>
<publisher>MIT Press.</publisher>
<contexts>
<context position="1719" citStr="Kirby and Hurford, 1997" startWordPosition="271" endWordPosition="274"> relatively closely to what might be described as the Chomskyan orthodoxy (see (Chomsky, 1981), (Chomsky, 1986)) in assuming the existence of a genetically-encoded language acquisition device (LAD) which is primarily responsible for determining the properties of language. For these researchers (see for example (Briscoe, 1997)), computer simulations offer the chance to explore the possible properties and origins of the LAD. Other researchers choose to focus not on genetic evolution of human linguistic faculties, but on the selectionist forces that operate on language itself. Kirby and Hurford (Kirby and Hurford, 1997), for example, have shown that a model of selectionist processes operating on the language is able to explain both linguistic universals and variational constraints. The role of selection effects on language can even be explored independently of any assumed inherited language faculty; Oliphant (Oliphant, 1996) shows that communication may emerge from the nature of structured and repeated interactions between language users, while Steels (Steels, 1996) demonstrates how a coherent shared language can evolve in a population of agents as a result of repeated language games — stylised interactions </context>
</contexts>
<marker>Kirby, Hurford, 1997</marker>
<rawString>Simon Kirby and James Hurford. 1997. Learning, culture and evolution in the origin of linguistic constraints. In Phil Husbands and Inman Harvey, editors, Fourth European Conference on Artificial Life. MIT Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nelson Minar</author>
<author>Roger Burkhart</author>
<author>Chris Langton</author>
<author>Manor Ashkenazi</author>
</authors>
<title>The swarm simulation system: A toolkit for building multiagent simulations.</title>
<date>1996</date>
<tech>Technical report,</tech>
<institution>SantaFe Institute.</institution>
<contexts>
<context position="3516" citStr="Minar et al., 1996" startWordPosition="546" endWordPosition="549">opulations. This paper describes a tool that we have developed to allow rapid implementation of experimental simulations within this paradigm. Our description begins with an overview of the principal requirements we aimed to meet, followed by a more detailed look at the actual implementation of the tool and the facilities that it provides. 2 Requirements Our approach to studying language is based on multi-agent simulations. Mainstream research on multi-agent systems has given rise to a number of environments and programming 830 languages for building simulations (consider, for example, SWARM (Minar et al., 1996), GAEA (Nakashima et al., 1996), or AKL (Carlson et al., 1994)), but none of these systems have been designed for specifically linguistic experimentation. Moreover, we wanted to work within the paradigm proposed by Steels (Steels, 1996), where language-using agents construct a shared language through repeated interactions with a precise structure. Examples of such games include naming games, in which agents take turns naming and learning the names of objects in their simulated environment, imitation games in which one agent attempts to meaningfully imitate a linguistic form presented by anothe</context>
</contexts>
<marker>Minar, Burkhart, Langton, Ashkenazi, 1996</marker>
<rawString>Nelson Minar, Roger Burkhart, Chris Langton, and Manor Ashkenazi. 1996. The swarm simulation system: A toolkit for building multiagent simulations. Technical report, SantaFe Institute.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hideyuki Nakashima</author>
<author>Itsuki Noda</author>
<author>Kenichi Handa</author>
</authors>
<title>Organic programming language gaea for multi-agents.</title>
<date>1996</date>
<booktitle>Proceedings of the Second International Conference on Multi-Agent Systems,</booktitle>
<pages>236--243</pages>
<editor>In Mario Tokoro, editor,</editor>
<publisher>The AAAI Press.</publisher>
<contexts>
<context position="3547" citStr="Nakashima et al., 1996" startWordPosition="551" endWordPosition="554">ribes a tool that we have developed to allow rapid implementation of experimental simulations within this paradigm. Our description begins with an overview of the principal requirements we aimed to meet, followed by a more detailed look at the actual implementation of the tool and the facilities that it provides. 2 Requirements Our approach to studying language is based on multi-agent simulations. Mainstream research on multi-agent systems has given rise to a number of environments and programming 830 languages for building simulations (consider, for example, SWARM (Minar et al., 1996), GAEA (Nakashima et al., 1996), or AKL (Carlson et al., 1994)), but none of these systems have been designed for specifically linguistic experimentation. Moreover, we wanted to work within the paradigm proposed by Steels (Steels, 1996), where language-using agents construct a shared language through repeated interactions with a precise structure. Examples of such games include naming games, in which agents take turns naming and learning the names of objects in their simulated environment, imitation games in which one agent attempts to meaningfully imitate a linguistic form presented by another, and discrimination games, in</context>
</contexts>
<marker>Nakashima, Noda, Handa, 1996</marker>
<rawString>Hideyuki Nakashima, Itsuki Noda, and Kenichi Handa. 1996. Organic programming language gaea for multi-agents. In Mario Tokoro, editor, Proceedings of the Second International Conference on Multi-Agent Systems, pages 236-243, Menlo Park,CA. The AAAI Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mike Oliphant</author>
</authors>
<title>The dilemma of saussurean communication.</title>
<date>1996</date>
<journal>BioSystems,</journal>
<pages>37--1</pages>
<contexts>
<context position="2030" citStr="Oliphant, 1996" startWordPosition="320" endWordPosition="321">, 1997)), computer simulations offer the chance to explore the possible properties and origins of the LAD. Other researchers choose to focus not on genetic evolution of human linguistic faculties, but on the selectionist forces that operate on language itself. Kirby and Hurford (Kirby and Hurford, 1997), for example, have shown that a model of selectionist processes operating on the language is able to explain both linguistic universals and variational constraints. The role of selection effects on language can even be explored independently of any assumed inherited language faculty; Oliphant (Oliphant, 1996) shows that communication may emerge from the nature of structured and repeated interactions between language users, while Steels (Steels, 1996) demonstrates how a coherent shared language can evolve in a population of agents as a result of repeated language games — stylised interactions involving the exchange of linguistic information. Our research views language as a complex adaptive system that emerges as a result of interactions between language users. Continued adaptive interactions lead naturally to the evolution of the language and the diffusion of new linguistic tokens and properties t</context>
</contexts>
<marker>Oliphant, 1996</marker>
<rawString>Mike Oliphant. 1996. The dilemma of saussurean communication. BioSystems, 37(1-2):31-38.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Guy L Steele</author>
</authors>
<title>Common LISP: The Language.</title>
<date>1990</date>
<publisher>Digital Press,</publisher>
<location>Bedford, MA.,</location>
<note>second edition.</note>
<contexts>
<context position="6393" citStr="Steele, 1990" startWordPosition="1013" endWordPosition="1014"> subsequent analysis or presentation. In summary, the system needed to offer an extensible set of building blocks for simulation development, tools for controlling the simulations, and tools for visualizing the progress of simulations. In the next section we will look at the approach taken to meeting these needs. 3 Implementation The choice of language for the implementation was determined by the need for a standardized language suitable for rapid prototyping with good symbolic and list-processing capabilities. While the portability of Java was tempting, we eventually decided on Common LISP ((Steele, 1990)) with its more powerful symbol and list manipulation facilities. Babel was developed using Macintosh Common LISP from Digitool, and has since been ported to Windows under Allegro Common LISP by colleagues at the Vrije Universiteit Brussel. The core of the system is portable Common LISP that can run on any platform, leaving only the interface to be ported to other platforms. In future, when stable implementations of the Common LISP Interface Manager (CUM) are widely available, it may be possible to produce a single version which will run on any system. The task of porting is, however, not too </context>
</contexts>
<marker>Steele, 1990</marker>
<rawString>Guy L. Steele. 1990. Common LISP: The Language. Digital Press, Bedford, MA., second edition.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Luc Steels</author>
</authors>
<title>Self-organizing vocabularies.</title>
<date>1996</date>
<booktitle>Proceedings of Alife V,</booktitle>
<editor>In C. Langton, editor,</editor>
<location>Nara, Japan.</location>
<contexts>
<context position="2174" citStr="Steels, 1996" startWordPosition="341" endWordPosition="342">n genetic evolution of human linguistic faculties, but on the selectionist forces that operate on language itself. Kirby and Hurford (Kirby and Hurford, 1997), for example, have shown that a model of selectionist processes operating on the language is able to explain both linguistic universals and variational constraints. The role of selection effects on language can even be explored independently of any assumed inherited language faculty; Oliphant (Oliphant, 1996) shows that communication may emerge from the nature of structured and repeated interactions between language users, while Steels (Steels, 1996) demonstrates how a coherent shared language can evolve in a population of agents as a result of repeated language games — stylised interactions involving the exchange of linguistic information. Our research views language as a complex adaptive system that emerges as a result of interactions between language users. Continued adaptive interactions lead naturally to the evolution of the language and the diffusion of new linguistic tokens and properties through the community of speakers. Using computer simulations of populations of language users, we are investigating the processes that shape nat</context>
<context position="3752" citStr="Steels, 1996" startWordPosition="585" endWordPosition="586"> a more detailed look at the actual implementation of the tool and the facilities that it provides. 2 Requirements Our approach to studying language is based on multi-agent simulations. Mainstream research on multi-agent systems has given rise to a number of environments and programming 830 languages for building simulations (consider, for example, SWARM (Minar et al., 1996), GAEA (Nakashima et al., 1996), or AKL (Carlson et al., 1994)), but none of these systems have been designed for specifically linguistic experimentation. Moreover, we wanted to work within the paradigm proposed by Steels (Steels, 1996), where language-using agents construct a shared language through repeated interactions with a precise structure. Examples of such games include naming games, in which agents take turns naming and learning the names of objects in their simulated environment, imitation games in which one agent attempts to meaningfully imitate a linguistic form presented by another, and discrimination games, in which agents attempt to build a system that allows them to discern distinctions between objects in the environment. The tool needed to provide a library of reusable building blocks with which we could des</context>
</contexts>
<marker>Steels, 1996</marker>
<rawString>Luc Steels. 1996. Self-organizing vocabularies. In C. Langton, editor, Proceedings of Alife V, Nara, Japan.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Luc Steels</author>
</authors>
<title>The synthetic modeling of language origins.</title>
<date>1997</date>
<journal>Evolution of Communication Journal,</journal>
<pages>1--1</pages>
<contexts>
<context position="1047" citStr="Steels, 1997" startWordPosition="168" endWordPosition="169">is for our computer simulations, we have implemented an open-ended, extensible testbed called Babel which allows rapid construction of experiments and flexible visualization of results. 1 Introduction Over the past few years, a growing number of researchers have begun to look at some of the fundamental questions in linguistics in a new light, using new tools and methodologies to explore a number of unresolved issues. Among these issues are questions about the origin and the evolution of natural languages - how a language can arise, and how it can continue to develop and change over time (see (Steels, 1997) for a summary). Some workers in the field stick relatively closely to what might be described as the Chomskyan orthodoxy (see (Chomsky, 1981), (Chomsky, 1986)) in assuming the existence of a genetically-encoded language acquisition device (LAD) which is primarily responsible for determining the properties of language. For these researchers (see for example (Briscoe, 1997)), computer simulations offer the chance to explore the possible properties and origins of the LAD. Other researchers choose to focus not on genetic evolution of human linguistic faculties, but on the selectionist forces that</context>
</contexts>
<marker>Steels, 1997</marker>
<rawString>Luc Steels. 1997. The synthetic modeling of language origins. Evolution of Communication Journal, 1(1):1-34.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>