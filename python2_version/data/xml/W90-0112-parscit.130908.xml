<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000051">
<title confidence="0.974986">
Domain Communication Knowledge
</title>
<author confidence="0.998894">
Owen Rambow*
</author>
<affiliation confidence="0.998914">
Department of Computer and Information Science
University of Pennsylvania
</affiliation>
<address confidence="0.39588">
Philadelphia, PA 19104
</address>
<sectionHeader confidence="0.980954" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999853375">
This paper advances the hypothesis that any text plan-
ning task relies, explicitly or implicitly, on domain-
specific text planning knowledge. This knowledge, &amp;quot;do-
main communication knowledge&amp;quot;, is different from both
domain knowledge and general knowledge about com-
munication. The paper presents the text generation
system Joyce, which represents such knowledge explic-
itly.
</bodyText>
<subsectionHeader confidence="0.949778">
The Joyce Text Generation System
</subsectionHeader>
<bodyText confidence="0.9958959">
The Joyce text generation system is a part of the soft-
ware design environment Ulysses (Korelsky and Ulysses
Staff, 1988; Rosenthal et al., 1988). Ulysses is a graph-
ical environment for the design of secure, distributed
software systems. The design proceeds hierarchically
by top-down refinement. A formal specification inter-
face and a theorem prover allow the user to formally
verify the flow security of the designed system.
Joyce is part of the user interface. Joyce generates
different types of texts about software designs:
</bodyText>
<listItem confidence="0.811617">
• It generates annotations of the design which are in-
tended to serve as system documentation during and
after the design process.
• It is used to explain the result of a heuristic security
</listItem>
<bodyText confidence="0.9416705625">
design tool, the &amp;quot;flow analyzer&amp;quot;.
The texts Joyce generates are specifically conceived
of as written texts: there is no feature for interactive
natural-language explanation. The texts may be several
paragraphs long. The text in figure 1 is an annotation
of the component &amp;quot;Host&amp;quot;; the graphical representation
of the first level of the design of the Host is shown in fig-
ure 2. (This picture corresponds to the first of the two
paragraphs of the text.) The text annotates the soft-
ware design by describing its structure and interpreting
it in terms of its security characteristics.
*The research reported in this paper was carried out
while the author was at Odyssey Research Associates,
Ithaca, NY. It was supported by the Air Force Systems
Command at Rome Air Development Center under Con-
tract No. F30602-85-C-0098
</bodyText>
<subsectionHeader confidence="0.936892">
Structure of Joyce
</subsectionHeader>
<bodyText confidence="0.988604875">
Joyce consists of three separate modules, which perform
distinct tasks and access their own knowledge bases.
1. The text planner produces a list of propositions,
which represents both the content and the structure
of the intended text. Thus, the task of Joyce&apos;s text
planner is similar in definition to TEXT&apos;s (McKe-
own, 1985), but different from that of Penman (Hovy,
1988), which expects the content selection task to
have already been performed. Each proposition is ex-
pressed in a language-independent, conceptual frame-
like formalism. It encodes a minimal amount of infor-
mation, but can be realized as an independent sen-
tence if necessary. The text planner draws on domain
communication knowledge expressed in a high-level
schema language (see below).
2. The sentence planner takes the list of propositions
and determines how to express them in natural
language. This task includes choosing lexicaliza-
tions and a syntactic structure for each propositions,
and assembling these lexico-syntactic structures into
larger sentences. It draws on knowledge captured in
the conceptual/Engish dictionary.
3. The linguistic realizer takes the syntactic structures
and produces surface sentences. It draws on syntactic
and morphological knowledge, expressed in the lexi-
con. The linguistic component is based on Meaning-
Text Theory (Mel&apos;euk, 1988), and is a reimplementa-
tion in Lisp of Polguere&apos;s Prolog implementation (see
(Iordanskaja et al., 1988a; Iordanskaja et al., 1988b)).
Usually, the task of text generation is subdivided
into two subtasks (planning and realization), not three.
However, there is a certain amount of disagreement
about where the line between the two is to be drawn.
For example, McKeown&apos;s TEXT (McKeown, 1985) and
ROsner&apos;s SEMTEX (ROsner, 1987) seem to consider
the tasks that Joyce classifies as sentence planning
as part of the realization process, whereas Meteer&apos;s
SPOKESMAN (Meteer, 1989) classifies them as part
of text planning. The proposed finer-grained terminol-
ogy may prove useful in discussing text generation and
</bodyText>
<page confidence="0.997837">
87
</page>
<note confidence="0.87726">
HOST: General Structure and Security Features
</note>
<bodyText confidence="0.99920195">
The multilevel Host is a complex component of the Sta-
tion. It contains a Kernel, a TIP, a Process, a Net Han-
dler and a group of Managers. The Process, the TIP,
the Managers and the Net Handler communicate only
through the Kernel. The manifestly secure Process and
the Managers perform auxiliary functions. The Process
is low-level. The TIP serves as interface to a User; the
Net Handler handles communication with a Net. The
security statuses of the TIP, the Managers and the Net
Handler have not yet been specified.
The Kernel is a complex component. Its security status
has not yet been specified. The Kernel contains a Mes-
sage Switch, an Adress Register and a Locator. The
Adress Register, the Locator and the Message Switch
communicate directly with each other. The low-level
Adress Register and the multilevel Locator are data-
bases. The Message Switch handles communication
with the TIP, the Process, the Managers and the Net
Handler. The security status of the Message Switch has
not yet been specified.
</bodyText>
<figureCaption confidence="0.999667">
Figure 1: The HOST Text
</figureCaption>
<bodyText confidence="0.99993">
text generation systems by avoiding ambiguity. In this
paper, &amp;quot;text planning&amp;quot; will always be used in this nar-
rower sense.
The three modules have been implemented in a
pipelined manner. Execution is interleaved temporally,
so that surface text is produced shortly after the gener-
ation process is initiated. However, data need only flow
in one direction; each module knows what information
the next module requires.
</bodyText>
<subsectionHeader confidence="0.976278">
Text Planning in Joyce: the Task
</subsectionHeader>
<bodyText confidence="0.9984128">
Since there was no corpus of texts available for analysis
prior to the design of the text planning component, the
first task of the design was to assemble such a corpus.
Specialists in the design of secure software were asked to
produce short descriptions of their designs, concentrat-
ing on the structure and security features of the designs.
This exercise provided useful insight into the problem.
In particular, it became obvious that a text planner,
whether human or machine, would face the following
problems:
</bodyText>
<listItem confidence="0.987245909090909">
• Even if virtually unlimited domain knowledge is avail-
able (i.e, human experts), it is impossible to translate
this knowledge directly into the knowledge required
for writing texts about that domain. How to write
about a new domain must be learned. Typically, hu-
mans do this by repeatedly going through a cycle of
text production, critique and revision.
• The underlying representation in Ulysses (its domain
representation) is designed in a way best suited for
the formal modeling and mathematical verification of
security properties, rather than for the storage and
</listItem>
<bodyText confidence="0.918327">
retrieval of information. Therefore, the text planner
must interpret the data in order to communicate it.
It is not sufficient to simply retrieve data.
</bodyText>
<listItem confidence="0.999750333333333">
• The texts in the corpus have a clear rhetorical struc-
ture, but the relations that hold between the rhetori-
cal blocks are not very varied: using the terminology
of RST (Mann and Thompson, 1987), they are by
and large restricted to the elaborate, background
and sequence relationships. This rhetorical &amp;quot;flat-
ness&amp;quot; effectively rules out an approach to planning
these texts which is based only or even largely on
rhetorical considerations.
• Since there are numerous objects in the domain, with
an ever larger number of interconnections between
them, &amp;quot;paths&amp;quot; through the domain representation
cannot be relied on for providing the organizing prin-
ciple for text planning: the text would become repet-
itive and long. Furthermore, the decision of which of
the many possible paths to take would still remain
open. A &amp;quot;procedural strategy&amp;quot; (Paris and McKeown,
1986) is not sufficient to plan the text.
</listItem>
<bodyText confidence="0.999871833333333">
The question, then, is: how can text be planned in
those domains and applications in which previously pro-
posed strategies seem to fail for reasons particular to
the domain or application? (This is essentially the sec-
ond of Hovy&apos;s &amp;quot;unsolved problems in the planning of
paragraphs&amp;quot;, (Hovy, 1989)).
</bodyText>
<subsectionHeader confidence="0.996645333333333">
Text Planning and Domain
Communication Knowledge
Three Types of Knowledge
</subsectionHeader>
<bodyText confidence="0.989047458333333">
Recent research in text planning has stressed the impor-
tance for text planning of what may be called &amp;quot;commu-
nication knowledge&amp;quot;, general and domain-independent
knowledge about how to use language in order to
achieve communicative goals. Communication knowl-
edge includes rhetoric and knowledge about thematic&apos;
structure. Rhetoric relates complex goals of communi-
cation to other, more elementary goals of communica-
tion. Thematic knowledge relates the thematic func-
tion of sentence elements to the thematic function of
elements in adjacent sentences. Communication knowl-
edge is independent of any particular domain knowl-
edge. However, between domain and communication
knowledge one may identify a third type of knowl-
edge, which I will call &amp;quot;domain communication knowl-
edge&amp;quot;. Domain communication knowledge relates do-
main knowledge to all aspects of verbal communication,
including communicative goals and function. It is nec-
essarily domain-dependent. However, it is not the same
as domain knowledge; it is not needed to reason about
&apos;The term &amp;quot;thematic&amp;quot; will refer, in this paper, to the
communicative structure of a sentence, and will group
together the phenomena that have been identified as
topic/comment or theme/rheme.
</bodyText>
<page confidence="0.988923">
88
</page>
<figure confidence="0.966916888888889">
Ulysses Graphics Interface -- HOSTS
OTHER MANAGERS
NET HANDLER TIP
• KERNEL 0--•
• •—•
• —Noy
II
OTHER PROCESSES
Commands:
</figure>
<figureCaption confidence="0.999962">
Figure 2: The HOST Graphical Representation
</figureCaption>
<bodyText confidence="0.999885416666667">
the domain, it is needed to communicate about the
domain. For example, consider the task of describing
some objects in some domain. Communication knowl-
edge about thematic structure implies a strategy that
describes those objects together that share some fea-
ture. Domain knowledge can supply information about
which objects share which feature. But if there are
many different features, the task remains of choosing
the feature according to which the descriptions will be
grouped together. This choice must be based on knowl-
edge which is neither general knowledge about com-
munication (since the choice depends on the particular
features of objects in the domain), but it is not actual
domain knowledge, either (since it is only needed for
planning communiction).
What is the role of domain communication knowledge
in text planning? Rather than trying avoid the stigma
of domain-specifity, I propose to tackle the problem
head-on, and posit the hypothesis that all text planning
tasks require domain communication knowledge. The
rest of this section will attempt to motivate this hypoth-
esis by investigating two other text planning systems.
The following section then discusses the representation
of domain communication knowledge in Joyce.
</bodyText>
<subsectionHeader confidence="0.9967135">
Domain Communication Knowledge in
Other Systems
</subsectionHeader>
<bodyText confidence="0.9997465">
Researchers whose principal interest lies in the repre-
sentation and use of rhetorical or thematic knowledge
have paid less attention to domain-specific problems in
text planning. I will analyze two text planning systems
in order to illustrate the hypothesis that any text plan-
ning task involves domain communication knowledge.
</bodyText>
<listItem confidence="0.987867">
• McKeown&apos;s TEXT (McKeown, 1985) uses schemas to
encode rhetorical knowledge2. These schemas &amp;quot;cap-
ture patterns of textual structure that are frequently
used by a variety of people&amp;quot; (McKeown, 1985, p. 37).
Each schema consists of a list of rhetorical predi-
cates; the predicates can be matched against the do-
main representation and realized by a proposition,
or they can be instantiated by another schema. The
schemas/predicates represent basic rhetorical opera-
tions, such as identification, compare and con-
trast and constituency.
</listItem>
<bodyText confidence="0.9998946">
The rhetorical schemas are domain-independent, but
the text planner needs to relate them to a given do-
main in order to produce a text plan. This is where
domain communication knowledge is needed. The
domain communication knowledge is implicitly en-
</bodyText>
<footnote confidence="0.334376333333333">
2For reasons of space limitations, this analysis disregards
TEXT&apos;s use of thematic knowledge. A more complete anal-
ysis would not significantly alter the conclusion.
</footnote>
<page confidence="0.999346">
89
</page>
<bodyText confidence="0.999921361111111">
coded in the &amp;quot;semantics&amp;quot; of the rhetorical predicates:
&amp;quot;these are semantics in the sense that they define
what a predicate means in a database system&amp;quot; (McK-
eown, 1985, P. 45). The semantics are implemented
as functions that access the data base. The semantics
are dependent on the structure of the data base, but
independent of its domain. However, the domain of
the texts is precisely the structure of the data base,
not the domain of the data base. In this sense, the
semantics are specific to the domain of the texts. (A
similar analysis would apply to other interfaces to
data bases that are based on principally on rhetoric,
such as Maybury&apos;s JENNY (Maybury, 1989).)
By way of example, consider McKeown &apos;s discussion of
TEXT&apos;s response to the user query &amp;quot;What is a ship?&amp;quot;
(McKeown, 1985, p. 47). Using its rhetorical com-
munication knowledge, TEXT decides that the first
predicate to be matched is the identification pred-
icate. Communication knowledge cannot, however,
be used to interpret the domain representation in or-
der to find appropriate information that might serve
to identify a ship. Neither is domain knowledge suf-
ficient: the domain representation encodes the facts
that a ship is a water-going vehicle and that it travels
on the surface, but it does not reveal that these two
facts are exactly what is needed to identify a ship.
Thus the different types of knowledge have very dif-
ferent purposes in TEXT: rhetorical knowledge re-
lates the discourse goal to a sequence of constituent
communicative goals. Each communicative goal can
in turn be related to another set of communicative
goals. Once the recursive expansion of communica-
tive goals comes to an end, domain communication
knowledge (the semantics function) relates each com-
municative goal to domain knowledge and produces
a proposition.
</bodyText>
<listItem confidence="0.603523">
• TWRM-TOPOGRAPHIC, a system under develop-
ment at the University of Constance (see (Sonnen-
berger, 1988)), produces natural language abstracts
from texts. The generation component of TWRM-
TOPOGRAPHIC uses a similar system architecture
to TEXT, but relies on different knowledge. Its
generation component, developped by Gabi Sonnen-
berger, uses an explicit encoding of thematic knowl-
edge to guide the text planning process. The start-
ing point of the abstracting and generation process is
a representation of the contents of a text, the &amp;quot;text
graph&amp;quot;. It expresses the thematical relations between
text spans. A discourse strategy is chosen on the ba-
sis of the thematic progression pattern of the text
graph. The graph determines the sequence of propo-
sitions for realization.
</listItem>
<bodyText confidence="0.999902454545455">
Thus, domain-independent knowledge about typical
patterns of thematic progression guides the text plan-
ning process. Here, no semantics are needed since the
information about thematic roles is already expressed
by the text graph from which the discourse strategies
draw their information. It is in constructing the text
graph that domain communication knowledge is used
so that the relevance of domain facts to the commu-
nicative process can be encoded. The use of domain
communication knowledge is crucial to the text plan-
ning process, but remains implicit.
</bodyText>
<subsectionHeader confidence="0.542607">
Making Domain Communication
Knowledge Explicit
</subsectionHeader>
<bodyText confidence="0.999733777777778">
If the hypotheses that any text planning task requires
domain communication knowledge is correct, then the
question arises about how to represent and use such
knowledge. Usually, domain communication knowledge
is simply represented as LISP code (such as the seman-
tics in TEXT), or implicitly encoded into the input to
the text planner (such as the text graph in TWRM-
TOPOGRAPHIC). Some other knowledge representa-
tion formalism is needed.
</bodyText>
<sectionHeader confidence="0.82185" genericHeader="method">
Domain Communication Knowledge
Representation in Joyce
</sectionHeader>
<bodyText confidence="0.999849269230769">
In choosing a formalism for representing domain
communication knowledge, a fact becomes apparent:
though certain types of texts (such as Russian folk
tales) may be generated by a context-free formalism
such as a &amp;quot;story grammar&amp;quot; (or even a &amp;quot;mildly context-
sensitive&amp;quot; formalism such as a TAG), this is not true
in general. A context-free formalism cannot capture in
full generality the knowledge needed to plan texts. On
the other hand, if domain communication knowledge
is to be an interesting concept, then its representation
must be restricted in some way; simply using, say, LISP
code does not represent much insight into the process
of text planning. A good approach may be, therefore,
to choose a restricted formalism and then to enquire
in what ways it needs to be expanded to allow for the
types of operations that text planning requires.
These considerations have lead to the choice of
domain-specific schemas as the basis for text planning
in Joyce. These schemas are similar in form to those
used by McKeown. Basically, a schema is an ordered set
of instructions. The instructions can be calls to other
schemas, recursive calls to the same schema, or they
can produce a specific proposition and add it to the
text representation. The schemas support conditional
branching and iteration. In addition, two new instruc-
tions represent extensions to the context-free formalism.
</bodyText>
<listItem confidence="0.972651625">
• A portion of the text plan can be edited. To do this,
a schema is called, but any propositions that are cre-
ated (by the schema or by any schema it calls) are not
added to the text representation. They are kept on a
separate list in the order they are created. When the
execution of the schema terminates, an editing func-
tion is applied to the list. This editing function can
be a default function, or it can be explicitly named
</listItem>
<page confidence="0.996487">
90
</page>
<bodyText confidence="0.9990154">
in the call to the schema. It can delete propositions,
change their order, change their contents or create
new ones. The choice of an editing function depends
on the domain and on the particular requirements of
the text. This type of revision is different from the
revision Meteer discusses in (Meteer, 1988), as it is
situated at the text plan level, rather than the sen-
tence level. The same remark holds for Gabriel&apos;s Yh
system (Gabriel, 1988). Its complex architecture ex-
ecutes a cycle of text production, observation by &amp;quot;ex-
perts&amp;quot; and text modification. However, these experts
are all situated at the sentence planning level; the
text plan is produced by domain-specific text plan-
ners (such as an &amp;quot;array expert&amp;quot;), and is not itself
subject to revision.
</bodyText>
<listItem confidence="0.987520666666667">
• Schemas can post to a &amp;quot;blackboard&amp;quot;, and check this
blackboard for messages. This allows for additional
control and communication between schemas which
are called at different times during the text planning
process and cannot communicate with each other by
passing arguments.
</listItem>
<bodyText confidence="0.97619476">
Instead of being templates that limit the structure of
the text to certain preconceived types, the schemas are
now an explicit and compact representation of domain
communication knowledge.
Example
Consider the first paragraph of the sample text in fig-
ure 1. It describes the component &amp;quot;Host&amp;quot;. A rhetorical
schema might specify a sequence of the identification
predicate (the first sentence), the constituency pred-
icate (the second and third sentences) and several am-
plification predicates (the remaining four sentences).
This analysis shows that the resulting text has a well-
formed rhetorical structure. However, this analysis in
itself does not constitute a text plan, since the text
planner must know how to relate the rhetorical predi-
cates to the domain knowledge, i.e., how to choose infor-
mation from the domain representation to realize each
predicate. The system maintains many different kinds
of information about each component: its name; its
parent, sibling, and subcomponents in the hierarchical
model; its ports; its security level; its secutiy status;
the location and size of its icon on the screen; various
information relating to the formal specification of the
component. Choosing different types of information to
realize each predicate will result in very different texts:
</bodyText>
<listItem confidence="0.9941703">
• For example, the identification could be accom-
plished by reporting the name of a comonent and
its location on the screen, or by describing its con-
nectivity with its sibling components.
• In order to describe the constituency of a compo-
nent, the text planner will most likely report the sub-
components of a component, but it could also dicuss
its ports. It may or may not discuss the way the
subcomponents are connected (their connectivity).
defschema describe-complex-component
I. condition not-atomic-component?
2. local-variable relevant-components
are (get-relevant-components self)
3. theme self
4. exclusive-choice toplevel-id or lower-id
5. contains
6. exclusive-choice star-connectivity
or complete-connectivity
or default-connectivity
7. exclusive-choice enforced-security or not-secure
</listItem>
<figure confidence="0.469179833333333">
8. edit-for-these-objects
objects (exclude-from corns relevant-components)
schema security-functional-features
edit-function join-same-concepts
9. force-paragraph
10. for-these-objects relevant-components: general
</figure>
<figureCaption confidence="0.7407915">
Figure 3: The DESCRIBE-COMPLEX-COMPO-
NENT Schema
</figureCaption>
<listItem confidence="0.734576666666667">
• The notion of amplification is so general as to allow
any of the information in the domain representation
to realize the rhetorical predicate.
</listItem>
<bodyText confidence="0.99980884375">
The domain communication knowledge needed to
make these decisions is explicitly represented in Joyce
by schemas. An example of such a schema is found in
figure 3. It provides the basic framework for the first
paragraph of the HOST text.
In this schema, each numbered line represents an in-
struction. Executing every instruction in turn will ac-
complish the goal associated with the schema, namely
to describe a comlpex component. Special operators are
represented in boldface. Words in Roman font repre-
sent either calls other schemas, or variables or functions.
Words and numbers in italics are comments. (The ac-
tual lisp-based representation of this schema in Joyce
contains some additional parentheses, of course.)
This particular schema is only applicable if the com-
ponent to which its is applied is not atomic. The Host
meets this condition (line 1). Line 2 sets up a local
variable, and line 3 defines the theme (topic) of the
paragraph to be the Host. Line 4 identifies the com-
ponent under discussion: the particular choice of how
to identify a component depends on whether it is the
top-level component, or whether it has a parent com-
ponent. Since the Host does have a parent component,
schema lower-id (not shown here) is chosen. Its execu-
tion generates three propositions, identifying the Host
by its parent component, its complexity and its security
level. The sentence planner merges these propositions
into the first sentence.
In order to describe the constituents of the compo-
nent under discussion, Joyce first calls the contains
schema which lists the subcomponents of the Host (line
5). It then describes the connectivity of the subcompo-
</bodyText>
<page confidence="0.997314">
91
</page>
<bodyText confidence="0.999783176470588">
nent. The simple solution would be to follow a proce-
dural strategy and to list all connections between sub-
components (The Net Handler communicates with the
Kernel. The Kernel communicates with the Managers.
...). However, for certain types of connectivity there
are descriptive shortcuts: for example, all subcompo-
nents may communicate with all other subcomponents,
or all subcomponents may communicate with exactly
one central subcomponent (as is the case of the Host
in the sample paragraph). In fact, if no descriptive
shortcut is available, it turns out that the resulting text
is so cumbersome that it is better not to describe the
connectivity at all (the user may consult the graphical
representation). The text planner must be able to iden-
tify these special cases of connectivity and choose the
applicable descriptive strategy, or initiate the default
strategy if no shortcuts are available (line 6).
Joyce amplifies on the previously given information
by giving some additional information about the Host
(line 7; no additional security information is available
for the Host, so no proposition is generated), and about
each of its subcomponents. Joyce has already deter-
mined that one component, the Kernel, contains sub-
components of its own (and is thus a &amp;quot;relevant&amp;quot; com-
ponent — line 2). The second paragraph of the HOST
text is devoted to it, so it is not discussed in the para-
graph about the Host. For the remaining subcompo-
nents, Joyce decides to give a brief description of their
function and of their security features. However, Joyce
must also decide on how to order the information. No
order can be specified on rhetorical grounds, since no
component is more salient than the others. Joyce tries
to group together those components that perform sim-
ilar functions, thus avoiding the need to repeat func-
tional descriptions: The (...) Process and the Man-
agers perform auxiliary functions. This is encoded in
the edit-for-these-objects instruction of the schema
(line 8). It calls schema security-functional-features
on the reduced set of subcomponents (without the Ker-
nel). Instead of sending propositions to the sentence
planner as they are generated by schema security-
functional-features, the propositions are saved un-
til comlpeteion of the iteration. Then editing func-
tion join-same-concepts is applied, which rearranges
the propositions, and they are then sent to the sen-
tence planner. The sentence planner can exploit the
adjacency of similar propositions, and forms single sen-
tences.
The paragraph is then completed (line 9) and the
general text planner called recursively on the Kernel
(line 10).
</bodyText>
<subsectionHeader confidence="0.939903">
Domain Communication Knowledge and
&amp;quot;Planning From First Principles&amp;quot;
</subsectionHeader>
<bodyText confidence="0.999985406779661">
If the thesis that all text planning tasks require domain
communication knowledge is correct, then it would ap-
pear that &amp;quot;planning from first principles&amp;quot;, i.e. text
planning using only general knowledge about communi-
cation and knowledge about the domain (and a reader
model), would be impossible. This conclusion is non-
sensical: clearly, human text planners succeed in writ-
ing about new domains. But if text planning from
first principles is possible, as anecdotal evidence sug-
gests, then what is the status of domain communication
knowledge?
Consider the following approach to text planning:
Supposing that for any given domain only a finite num-
ber of facts is known, one could list all possible order-
ings of the elements of all subsets of these facts and
use pure communication knowledge along with a reader
model to evaluate each of these text plans. The com-
munication knowledge would serve as a constraint on
possible text plans, or as an evaluation metric for the
quality of a text plan (the fewer violations of commu-
nicative principles it exhibits, the better). This brute-
force bottom-up approach can be refined by using gen-
eral communication knowledge to do some preliminary
top-down planning. For example, a rhetorical predicate
can refine a high-level communicative goal into a set of
more easily achievable goals, as in TEXT. Nonetheless,
even in this approach it is necessary to form all possible
sequences of relevant domain information that together
may achieve a lower-levl goal and perform extensive rea-
soning based on communication knowledge and the user
model.
These approaches thus represent true text planning
from first principles, since they do not require domain
communication knowledge. But they require reason-
ing about an exponential number of possible text se-
quences. They are computationally unattractive for
any true applications. In order to make text planning
more efficient, domain communication knowledge is re-
quired. Thus, costly text planning from first principles
can be understood as the process of acquiring or compil-
ing domain communication knowledge. Ways in which
domain facts can contribute to achieving a particular
communicative goal are deduced by a complex process
using only domain and communication knowledge, but
once such reasoning has been performed, its results are
explicitly encoded in the domain communication knowl-
edge representation. This knowledge can then be used
for subsequent text planning tasks. Intuitively, this ex-
plains why humans get better and faster at generating
a given type of text about a specific domain once they
have done so several times.
This view is analogous to Patten&apos;s proposal (Patten,
1988) to precompile communication planning knowl-
edge according to the theory of register. However, his
proposal is aimed at what in Joyce is classified as sen-
tence planning knowledge, since register-related deci-
sions are made by the sentence-planner in Joyce. Do-
main communication knowledge might be considered a
precompilation of genre knowledge.
</bodyText>
<page confidence="0.982494">
92
</page>
<subsectionHeader confidence="0.716713">
Further Research
</subsectionHeader>
<bodyText confidence="0.976025730769231">
A fundamental issue remains as an open research ques-
tion: what is the mode of interaction between domain
communication knowledge and general communication
knowledge? Three views are possible:
1. Does text planning start with general communication
knowledge, with the domain-specific knowledge tak-
ing over in order to relate &amp;quot;atomic&amp;quot; communicative
goals to domain facts (as in TEXT)?
2. Is there a continuum from general domain-
independent knowledge via specific but domain-
independent knowledge to domain-dependent com-
munication knowledge (Moore and Paris&apos;s Moti-
vation plan operator for motivating replacements
(Moore and Paris, 1989) is an example of a specific
but domain-independent communication strategy)?
This would suggest a multi-layered representation of
these different types of communication knowledge.
3. Is general communication knowledge implicitly en-
coded into the domain communication knowledge
(as in Joyce)? In this view, general communication
knowledge would be used explictly only during the
process of compiling domain communication knowl-
edge.
This underlying issue affects the more particular
questions that the proposed representation formalism
for domain communication knowledge raises:
</bodyText>
<listItem confidence="0.9729694">
1. Is a schema-based approach an adequate representa-
tion for domain communication knowledge?
2. What types of editing functions are needed?
3. How do genre and user-tailoring affect domain com-
munication knowledge?
</listItem>
<sectionHeader confidence="0.998373" genericHeader="method">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.99845725">
I would like to thank Robert Dale, Richard Kittredge,
Tanya Korelsky, Libby Levison and Bonnie Webber for
helpful comments and discussions about various drafts
of this paper.
</bodyText>
<sectionHeader confidence="0.960134" genericHeader="method">
Bibliography
</sectionHeader>
<reference confidence="0.999861258064516">
Richard P. Gabriel. Deliberate writing. In David D.
McDonald and Leonard Bolc, editors, Natural Lan-
guage Generation Systems, pages 1-46. Springer Ver-
lag, 1988.
Eduard H. Hovy. Planning coherent multisentential
text. In Proceedings of the 26th Annual Meeting,
pages 163-169, Buffalo, 1988. ACL.
Eduard H. Hovy. Some unsolved problems in the plan-
ning of paragraphs. In Extended Abstracts Presented
at the Second European Natural Langugae Generation
Workshop, Edinburgh, 1989.
Lidija Iordanskaja, Richard Kittredge, and Alain
Polguere. Implementing the meaning-text model for
language generation. Paper presented at COLING-
88, 1988.
Lidija Iordanskaja, Richard Kittredge, and Alain
Polguere. Lexical selection and paraphrase in a
meaning-text generation model. Technical report,
Odyssey Research Associates, 1988.
Tatiana Korelsky and Ulysses Staff. Ulysses: a com-
puter security modeling environment. In Proceedings
of the 14th National Conference on Security and Pri-
vacy, Baltimore, 1988. NBS.
William C. Mann and Sandra A. Thompson. Rhetori-
cal structure theory: A theory of text organization.
Technical report, ISI, 1987.
Mark T. Maybury. Knowledge based text generation.
Technical report, RADC, 1989.
Kathleen McKeown. Text Generation. Cambridge Uni-
versity Press, Cambridge, 1985.
Igor A. Mel&apos;euk. Dependency Syntax: Theory and
Practice. State University of New York Press, New
York, 1988.
Marie W. Meteer. The implication of revisions for natu-
ral language generation. In Proceedings of the Fourth
International Workshop on Natural Language Gener-
ation, Catalina Island, 1988.
Marie W. Meteer. The spokesman natural language
generation system. Technical report, BBN Systems
and Technologies Corporation, 1989.
Johanna D. Moore and Cecile L. Paris. Planning text
for advisory dialogues. In Proceedings of the 27th
Annual Meeting, Vancouver, 1989. ACL.
Cede L. Paris and Kathleen R. McKeown. Discourse
strategies for describing complex physical objects.
In Gerard Kempen, editor, Natural Language Gen-
eration, pages 97-115. Martinus Nijhoff Publishers,
1986.
Terry Patten. Compiling the interface between text
planning and realization. In Proceedings of the AAAI
Workshop on Text Planning and Realization, St.Paul,
1988.
David Rosenthal, Tatiana Korelsky, Daryl McCullogh,
Owen Rambow, and D.G.Weber. The Ulysses inte-
grated modeling environment and its relationship to
KBSA. Heuristics, 1(2):42-49, 1988.
Dietmar Rosner. The automated news agency SEM-
TEX — a text generator for German. In G. Kempen,
editor, Natural Language Generation: New Results
in Artificial Intelligence, Psychology and Linguistics,
pages 138-148. Kluwer Academic Publishers, Boston,
1987.
</reference>
<page confidence="0.983587">
93
</page>
<reference confidence="0.9880074">
Gabi Sonnenberger. Flexible Generierung von
natiirlichsprachigen Abstracts aus Textreprisen-
tationsstrukturen. In 4. Osterreichische Artifi-
cial Intelligence Tagung: Proceedings, pages 72-82.
Springer, Berlin, 1988.
</reference>
<page confidence="0.999551">
94
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.000000">
<title confidence="0.999915">Domain Communication Knowledge</title>
<author confidence="0.998046">Owen</author>
<affiliation confidence="0.999888">Department of Computer and Information University of</affiliation>
<address confidence="0.997704">Philadelphia, PA 19104</address>
<abstract confidence="0.980550297297297">This paper advances the hypothesis that any text planning task relies, explicitly or implicitly, on domainspecific text planning knowledge. This knowledge, &amp;quot;domain communication knowledge&amp;quot;, is different from both domain knowledge and general knowledge about communication. The paper presents the text generation system Joyce, which represents such knowledge explicitly. The Joyce Text Generation System The Joyce text generation system is a part of the software design environment Ulysses (Korelsky and Ulysses 1988; Rosenthal 1988). Ulysses is a graphical environment for the design of secure, distributed software systems. The design proceeds hierarchically by top-down refinement. A formal specification interface and a theorem prover allow the user to formally verify the flow security of the designed system. Joyce is part of the user interface. Joyce generates different types of texts about software designs: • It generates annotations of the design which are intended to serve as system documentation during and after the design process. • It is used to explain the result of a heuristic security design tool, the &amp;quot;flow analyzer&amp;quot;. The texts Joyce generates are specifically conceived of as written texts: there is no feature for interactive natural-language explanation. The texts may be several paragraphs long. The text in figure 1 is an annotation of the component &amp;quot;Host&amp;quot;; the graphical representation of the first level of the design of the Host is shown in figure 2. (This picture corresponds to the first of the two paragraphs of the text.) The text annotates the software design by describing its structure and interpreting it in terms of its security characteristics. *The research reported in this paper was carried out while the author was at Odyssey Research Associates,</abstract>
<address confidence="0.691529">Ithaca, NY. It was supported by the Air Force Systems</address>
<note confidence="0.674022">Command at Rome Air Development Center under Con-</note>
<pubnum confidence="0.824991">tract No. F30602-85-C-0098</pubnum>
<abstract confidence="0.992317901639345">Structure of Joyce Joyce consists of three separate modules, which perform distinct tasks and access their own knowledge bases. The planner a list of propositions, which represents both the content and the structure of the intended text. Thus, the task of Joyce&apos;s text planner is similar in definition to TEXT&apos;s (McKeown, 1985), but different from that of Penman (Hovy, 1988), which expects the content selection task to have already been performed. Each proposition is expressed in a language-independent, conceptual framelike formalism. It encodes a minimal amount of information, but can be realized as an independent sentence if necessary. The text planner draws on domain communication knowledge expressed in a high-level schema language (see below). The planner the list of propositions and determines how to express them in natural language. This task includes choosing lexicalizations and a syntactic structure for each propositions, and assembling these lexico-syntactic structures into larger sentences. It draws on knowledge captured in the conceptual/Engish dictionary. The realizer the syntactic structures and produces surface sentences. It draws on syntactic and morphological knowledge, expressed in the lexicon. The linguistic component is based on Meaning- Text Theory (Mel&apos;euk, 1988), and is a reimplementation in Lisp of Polguere&apos;s Prolog implementation (see al., Iordanskaja al., Usually, the task of text generation is subdivided into two subtasks (planning and realization), not three. However, there is a certain amount of disagreement about where the line between the two is to be drawn. For example, McKeown&apos;s TEXT (McKeown, 1985) and ROsner&apos;s SEMTEX (ROsner, 1987) seem to consider the tasks that Joyce classifies as sentence planning as part of the realization process, whereas Meteer&apos;s SPOKESMAN (Meteer, 1989) classifies them as part of text planning. The proposed finer-grained terminology may prove useful in discussing text generation and 87 HOST: General Structure and Security Features The multilevel Host is a complex component of the Station. It contains a Kernel, a TIP, a Process, a Net Handler and a group of Managers. The Process, the TIP, the Managers and the Net Handler communicate only through the Kernel. The manifestly secure Process and the Managers perform auxiliary functions. The Process is low-level. The TIP serves as interface to a User; the Net Handler handles communication with a Net. The security statuses of the TIP, the Managers and the Net Handler have not yet been specified. The Kernel is a complex component. Its security status has not yet been specified. The Kernel contains a Message Switch, an Adress Register and a Locator. The Adress Register, the Locator and the Message Switch communicate directly with each other. The low-level Adress Register and the multilevel Locator are databases. The Message Switch handles communication with the TIP, the Process, the Managers and the Net Handler. The security status of the Message Switch has not yet been specified. Figure 1: The HOST Text text generation systems by avoiding ambiguity. In this paper, &amp;quot;text planning&amp;quot; will always be used in this narrower sense. The three modules have been implemented in a pipelined manner. Execution is interleaved temporally, so that surface text is produced shortly after the generation process is initiated. However, data need only flow in one direction; each module knows what information the next module requires. Text Planning in Joyce: the Task Since there was no corpus of texts available for analysis prior to the design of the text planning component, the task of the design assemble such a corpus. Specialists in the design of secure software were asked to produce short descriptions of their designs, concentrating on the structure and security features of the designs. This exercise provided useful insight into the problem. In particular, it became obvious that a text planner, whether human or machine, would face the following problems: • Even if virtually unlimited domain knowledge is available (i.e, human experts), it is impossible to translate this knowledge directly into the knowledge required for writing texts about that domain. How to write about a new domain must be learned. Typically, humans do this by repeatedly going through a cycle of text production, critique and revision. • The underlying representation in Ulysses (its domain representation) is designed in a way best suited for the formal modeling and mathematical verification of security properties, rather than for the storage and retrieval of information. Therefore, the text planner must interpret the data in order to communicate it. It is not sufficient to simply retrieve data. • The texts in the corpus have a clear rhetorical structure, but the relations that hold between the rhetorical blocks are not very varied: using the terminology of RST (Mann and Thompson, 1987), they are by large restricted to the background This rhetorical &amp;quot;flatness&amp;quot; effectively rules out an approach to planning these texts which is based only or even largely on rhetorical considerations. • Since there are numerous objects in the domain, with an ever larger number of interconnections between them, &amp;quot;paths&amp;quot; through the domain representation cannot be relied on for providing the organizing principle for text planning: the text would become repetitive and long. Furthermore, the decision of which of the many possible paths to take would still remain open. A &amp;quot;procedural strategy&amp;quot; (Paris and McKeown, 1986) is not sufficient to plan the text. The question, then, is: how can text be planned in those domains and applications in which previously proposed strategies seem to fail for reasons particular to the domain or application? (This is essentially the second of Hovy&apos;s &amp;quot;unsolved problems in the planning of paragraphs&amp;quot;, (Hovy, 1989)).</abstract>
<title confidence="0.876254333333333">Text Planning and Domain Communication Knowledge Three Types of Knowledge</title>
<abstract confidence="0.997493041666667">Recent research in text planning has stressed the importance for text planning of what may be called &amp;quot;communication knowledge&amp;quot;, general and domain-independent knowledge about how to use language in order to achieve communicative goals. Communication knowledge includes rhetoric and knowledge about thematic&apos; structure. Rhetoric relates complex goals of communication to other, more elementary goals of communication. Thematic knowledge relates the thematic function of sentence elements to the thematic function of elements in adjacent sentences. Communication knowledge is independent of any particular domain knowledge. However, between domain and communication knowledge one may identify a third type of knowledge, which I will call &amp;quot;domain communication knowledge&amp;quot;. Domain communication knowledge relates domain knowledge to all aspects of verbal communication, including communicative goals and function. It is necessarily domain-dependent. However, it is not the same as domain knowledge; it is not needed to reason about term will refer, in this paper, to the communicative structure of a sentence, and will group together the phenomena that have been identified as topic/comment or theme/rheme.</abstract>
<note confidence="0.509759">88</note>
<title confidence="0.8391152">Ulysses Graphics Interface -- HOSTS OTHER MANAGERS NET HANDLER TIP • KERNEL 0--• • •—•</title>
<author confidence="0.903689">—Noy</author>
<affiliation confidence="0.93036">II</affiliation>
<title confidence="0.323173">OTHER PROCESSES Commands: Figure 2: The HOST Graphical Representation</title>
<abstract confidence="0.994013437198068">domain, it is needed to the domain. For example, consider the task of describing some objects in some domain. Communication knowledge about thematic structure implies a strategy that describes those objects together that share some feature. Domain knowledge can supply information about which objects share which feature. But if there are many different features, the task remains of choosing the feature according to which the descriptions will be grouped together. This choice must be based on knowledge which is neither general knowledge about communication (since the choice depends on the particular features of objects in the domain), but it is not actual domain knowledge, either (since it is only needed for planning communiction). What is the role of domain communication knowledge in text planning? Rather than trying avoid the stigma I propose to tackle the problem and posit the hypothesis that text planning require domain communication knowledge. rest of this section will attempt to motivate this hypothesis by investigating two other text planning systems. The following section then discusses the representation of domain communication knowledge in Joyce. Domain Communication Knowledge in Other Systems Researchers whose principal interest lies in the representation and use of rhetorical or thematic knowledge have paid less attention to domain-specific problems in text planning. I will analyze two text planning systems to illustrate the hypothesis that any text planning task involves domain communication knowledge. • McKeown&apos;s TEXT (McKeown, 1985) uses schemas to rhetorical These schemas &amp;quot;capture patterns of textual structure that are frequently used by a variety of people&amp;quot; (McKeown, 1985, p. 37). Each schema consists of a list of rhetorical predicates; the predicates can be matched against the domain representation and realized by a proposition, or they can be instantiated by another schema. The schemas/predicates represent basic rhetorical operations, such as identification, compare and contrast and constituency. The rhetorical schemas are domain-independent, but the text planner needs to relate them to a given domain in order to produce a text plan. This is where domain communication knowledge is needed. The communication knowledge is implicitly enreasons of space limitations, this analysis disregards TEXT&apos;s use of thematic knowledge. A more complete analysis would not significantly alter the conclusion. 89 coded in the &amp;quot;semantics&amp;quot; of the rhetorical predicates: &amp;quot;these are semantics in the sense that they define a predicate in database system&amp;quot; (McK- 1985, P.45). The semantics are implemented as functions that access the data base. The semantics are dependent on the structure of the data base, but independent of its domain. However, the domain of texts is precisely the the data base, the the data base. In this sense, the semantics are specific to the domain of the texts. (A similar analysis would apply to other interfaces to data bases that are based on principally on rhetoric, such as Maybury&apos;s JENNY (Maybury, 1989).) By way of example, consider McKeown &apos;s discussion of TEXT&apos;s response to the user query &amp;quot;What is a ship?&amp;quot; (McKeown, 1985, p. 47). Using its rhetorical communication knowledge, TEXT decides that the first to be matched is the predicate. Communication knowledge cannot, however, be used to interpret the domain representation in order to find appropriate information that might serve to identify a ship. Neither is domain knowledge sufficient: the domain representation encodes the facts that a ship is a water-going vehicle and that it travels on the surface, but it does not reveal that these two facts are exactly what is needed to identify a ship. Thus the different types of knowledge have very different purposes in TEXT: rhetorical knowledge relates the discourse goal to a sequence of constituent communicative goals. Each communicative goal can in turn be related to another set of communicative goals. Once the recursive expansion of communicative goals comes to an end, domain communication knowledge (the semantics function) relates each communicative goal to domain knowledge and produces a proposition. • TWRM-TOPOGRAPHIC, a system under development at the University of Constance (see (Sonnenberger, 1988)), produces natural language abstracts from texts. The generation component of TWRM- TOPOGRAPHIC uses a similar system architecture to TEXT, but relies on different knowledge. Its generation component, developped by Gabi Sonnenberger, uses an explicit encoding of thematic knowledge to guide the text planning process. The starting point of the abstracting and generation process is a representation of the contents of a text, the &amp;quot;text graph&amp;quot;. It expresses the thematical relations between text spans. A discourse strategy is chosen on the basis of the thematic progression pattern of the text graph. The graph determines the sequence of propositions for realization. Thus, domain-independent knowledge about typical patterns of thematic progression guides the text planning process. Here, no semantics are needed since the information about thematic roles is already expressed by the text graph from which the discourse strategies draw their information. It is in constructing the text graph that domain communication knowledge is used so that the relevance of domain facts to the communicative process can be encoded. The use of domain communication knowledge is crucial to the text planning process, but remains implicit. Making Domain Knowledge Explicit If the hypotheses that any text planning task requires domain communication knowledge is correct, then the question arises about how to represent and use such knowledge. Usually, domain communication knowledge is simply represented as LISP code (such as the semantics in TEXT), or implicitly encoded into the input to the text planner (such as the text graph in TWRM- TOPOGRAPHIC). Some other knowledge representation formalism is needed. Domain Communication Knowledge Representation in Joyce In choosing a formalism for representing domain communication knowledge, a fact becomes apparent: though certain types of texts (such as Russian folk tales) may be generated by a context-free formalism such as a &amp;quot;story grammar&amp;quot; (or even a &amp;quot;mildly contextsensitive&amp;quot; formalism such as a TAG), this is not true in general. A context-free formalism cannot capture in full generality the knowledge needed to plan texts. On the other hand, if domain communication knowledge is to be an interesting concept, then its representation must be restricted in some way; simply using, say, LISP code does not represent much insight into the process of text planning. A good approach may be, therefore, to choose a restricted formalism and then to enquire in what ways it needs to be expanded to allow for the types of operations that text planning requires. These considerations have lead to the choice of domain-specific schemas as the basis for text planning in Joyce. These schemas are similar in form to those used by McKeown. Basically, a schema is an ordered set of instructions. The instructions can be calls to other schemas, recursive calls to the same schema, or they can produce a specific proposition and add it to the text representation. The schemas support conditional branching and iteration. In addition, two new instructions represent extensions to the context-free formalism. • A portion of the text plan can be edited. To do this, a schema is called, but any propositions that are created (by the schema or by any schema it calls) are not added to the text representation. They are kept on a separate list in the order they are created. When the execution of the schema terminates, an editing function is applied to the list. This editing function can be a default function, or it can be explicitly named 90 in the call to the schema. It can delete propositions, change their order, change their contents or create new ones. The choice of an editing function depends on the domain and on the particular requirements of the text. This type of revision is different from the revision Meteer discusses in (Meteer, 1988), as it is situated at the text plan level, rather than the sentence level. The same remark holds for Gabriel&apos;s Yh system (Gabriel, 1988). Its complex architecture executes a cycle of text production, observation by &amp;quot;experts&amp;quot; and text modification. However, these experts are all situated at the sentence planning level; the text plan is produced by domain-specific text planners (such as an &amp;quot;array expert&amp;quot;), and is not itself subject to revision. • Schemas can post to a &amp;quot;blackboard&amp;quot;, and check this blackboard for messages. This allows for additional control and communication between schemas which are called at different times during the text planning process and cannot communicate with each other by passing arguments. Instead of being templates that limit the structure of the text to certain preconceived types, the schemas are now an explicit and compact representation of domain communication knowledge. Example Consider the first paragraph of the sample text in figure 1. It describes the component &amp;quot;Host&amp;quot;. A rhetorical might specify a sequence of the (the first sentence), the predsecond and third sentences) and several am- (the remaining four sentences). This analysis shows that the resulting text has a wellformed rhetorical structure. However, this analysis in itself does not constitute a text plan, since the text planner must know how to relate the rhetorical predicates to the domain knowledge, i.e., how to choose information from the domain representation to realize each predicate. The system maintains many different kinds of information about each component: its name; its parent, sibling, and subcomponents in the hierarchical model; its ports; its security level; its secutiy status; the location and size of its icon on the screen; various information relating to the formal specification of the component. Choosing different types of information to realize each predicate will result in very different texts: For example, the be accomplished by reporting the name of a comonent and its location on the screen, or by describing its connectivity with its sibling components. In order to describe the a component, the text planner will most likely report the subcomponents of a component, but it could also dicuss its ports. It may or may not discuss the way the subcomponents are connected (their connectivity). local-variable are (get-relevant-components self) theme exclusive-choice 5. contains exclusive-choice or complete-connectivity or default-connectivity exclusive-choice 8. edit-for-these-objects corns relevant-components) 9. force-paragraph for-these-objects general Figure 3: The DESCRIBE-COMPLEX-COMPO- NENT Schema The notion of so general as to allow any of the information in the domain representation to realize the rhetorical predicate. The domain communication knowledge needed to make these decisions is explicitly represented in Joyce by schemas. An example of such a schema is found in figure 3. It provides the basic framework for the first paragraph of the HOST text. In this schema, each numbered line represents an instruction. Executing every instruction in turn will accomplish the goal associated with the schema, namely to describe a comlpex component. Special operators are represented in boldface. Words in Roman font represent either calls other schemas, or variables or functions. Words and numbers in italics are comments. (The actual lisp-based representation of this schema in Joyce contains some additional parentheses, of course.) This particular schema is only applicable if the component to which its is applied is not atomic. The Host meets this condition (line 1). Line 2 sets up a local variable, and line 3 defines the theme (topic) of the paragraph to be the Host. Line 4 identifies the component under discussion: the particular choice of how to identify a component depends on whether it is the top-level component, or whether it has a parent component. Since the Host does have a parent component, shown here) is chosen. Its execution generates three propositions, identifying the Host by its parent component, its complexity and its security level. The sentence planner merges these propositions into the first sentence. In order to describe the constituents of the compounder discussion, Joyce first calls the schema which lists the subcomponents of the Host (line It then describes the connectivity of the subcompo- 91 nent. The simple solution would be to follow a procedural strategy and to list all connections between sub- Net Handler communicates with the Kernel. The Kernel communicates with the Managers. ...). However, for certain types of connectivity there are descriptive shortcuts: for example, all subcompomay communicate with subcomponents, or all subcomponents may communicate with exactly one central subcomponent (as is the case of the Host in the sample paragraph). In fact, if no descriptive shortcut is available, it turns out that the resulting text is so cumbersome that it is better not to describe the connectivity at all (the user may consult the graphical representation). The text planner must be able to identify these special cases of connectivity and choose the applicable descriptive strategy, or initiate the default strategy if no shortcuts are available (line 6). Joyce amplifies on the previously given information by giving some additional information about the Host (line 7; no additional security information is available for the Host, so no proposition is generated), and about each of its subcomponents. Joyce has already determined that one component, the Kernel, contains subcomponents of its own (and is thus a &amp;quot;relevant&amp;quot; component — line 2). The second paragraph of the HOST text is devoted to it, so it is not discussed in the paragraph about the Host. For the remaining subcomponents, Joyce decides to give a brief description of their function and of their security features. However, Joyce must also decide on how to order the information. No order can be specified on rhetorical grounds, since no component is more salient than the others. Joyce tries to group together those components that perform similar functions, thus avoiding the need to repeat funcdescriptions: (...) Process and the Manperform auxiliary functions. is encoded in of the schema 8). It calls schema on the reduced set of subcomponents (without the Kernel). Instead of sending propositions to the sentence as they are generated by schema securitypropositions are saved until comlpeteion of the iteration. Then editing funcapplied, which rearranges the propositions, and they are then sent to the sentence planner. The sentence planner can exploit the adjacency of similar propositions, and forms single sentences. The paragraph is then completed (line 9) and the general text planner called recursively on the Kernel (line 10). Domain Communication Knowledge and &amp;quot;Planning From First Principles&amp;quot; If the thesis that all text planning tasks require domain communication knowledge is correct, then it would appear that &amp;quot;planning from first principles&amp;quot;, i.e. text planning using only general knowledge about communication and knowledge about the domain (and a reader model), would be impossible. This conclusion is nonsensical: clearly, human text planners succeed in writing about new domains. But if text planning from first principles is possible, as anecdotal evidence suggests, then what is the status of domain communication knowledge? Consider the following approach to text planning: Supposing that for any given domain only a finite number of facts is known, one could list all possible orderings of the elements of all subsets of these facts and use pure communication knowledge along with a reader model to evaluate each of these text plans. The communication knowledge would serve as a constraint on possible text plans, or as an evaluation metric for the quality of a text plan (the fewer violations of communicative principles it exhibits, the better). This bruteforce bottom-up approach can be refined by using general communication knowledge to do some preliminary top-down planning. For example, a rhetorical predicate can refine a high-level communicative goal into a set of more easily achievable goals, as in TEXT. Nonetheless, even in this approach it is necessary to form all possible sequences of relevant domain information that together may achieve a lower-levl goal and perform extensive reasoning based on communication knowledge and the user model. These approaches thus represent true text planning from first principles, since they do not require domain communication knowledge. But they require reasoning about an exponential number of possible text sequences. They are computationally unattractive for any true applications. In order to make text planning more efficient, domain communication knowledge is required. Thus, costly text planning from first principles can be understood as the process of acquiring or compiling domain communication knowledge. Ways in which domain facts can contribute to achieving a particular communicative goal are deduced by a complex process using only domain and communication knowledge, but once such reasoning has been performed, its results are explicitly encoded in the domain communication knowledge representation. This knowledge can then be used for subsequent text planning tasks. Intuitively, this explains why humans get better and faster at generating a given type of text about a specific domain once they have done so several times. This view is analogous to Patten&apos;s proposal (Patten, 1988) to precompile communication planning knowledge according to the theory of register. However, his proposal is aimed at what in Joyce is classified as sentence planning knowledge, since register-related decisions are made by the sentence-planner in Joyce. Domain communication knowledge might be considered a precompilation of genre knowledge. 92 Further Research A fundamental issue remains as an open research question: what is the mode of interaction between domain communication knowledge and general communication knowledge? Three views are possible: 1. Does text planning start with general communication knowledge, with the domain-specific knowledge taking over in order to relate &amp;quot;atomic&amp;quot; communicative goals to domain facts (as in TEXT)? 2. Is there a continuum from general domainindependent knowledge via specific but domainindependent knowledge to domain-dependent comknowledge (Moore and Paris&apos;s Motioperator for motivating replacements (Moore and Paris, 1989) is an example of a specific but domain-independent communication strategy)? This would suggest a multi-layered representation of these different types of communication knowledge. 3. Is general communication knowledge implicitly encoded into the domain communication knowledge (as in Joyce)? In this view, general communication knowledge would be used explictly only during the process of compiling domain communication knowledge. This underlying issue affects the more particular questions that the proposed representation formalism for domain communication knowledge raises: 1. Is a schema-based approach an adequate representation for domain communication knowledge? 2. What types of editing functions are needed? 3. How do genre and user-tailoring affect domain communication knowledge?</abstract>
<title confidence="0.587547">Acknowledgments</title>
<author confidence="0.771742">I would like to thank Robert Dale</author>
<author confidence="0.771742">Richard Kittredge</author>
<author confidence="0.771742">Tanya Korelsky</author>
<author confidence="0.771742">Libby Levison</author>
<author confidence="0.771742">Bonnie Webber for</author>
<abstract confidence="0.916207">helpful comments and discussions about various drafts of this paper.</abstract>
<title confidence="0.385691">Bibliography</title>
<author confidence="0.941662">Deliberate writing In David D</author>
<note confidence="0.7402492">and Leonard Bolc, editors, Lan- Generation Systems, 1-46. Springer Verlag, 1988. Eduard H. Hovy. Planning coherent multisentential In of the 26th Annual Meeting, pages 163-169, Buffalo, 1988. ACL. Eduard H. Hovy. Some unsolved problems in the planof paragraphs. In Abstracts Presented at the Second European Natural Langugae Generation 1989.</note>
<title confidence="0.734819">Lidija Iordanskaja, Richard Kittredge, and Alain</title>
<author confidence="0.842249">Implementing the meaning-text model for</author>
<note confidence="0.75566185">language generation. Paper presented at COLING- 88, 1988. Lidija Iordanskaja, Richard Kittredge, and Alain Polguere. Lexical selection and paraphrase in a meaning-text generation model. Technical report, Odyssey Research Associates, 1988. Tatiana Korelsky and Ulysses Staff. Ulysses: a comsecurity modeling environment. In of the 14th National Conference on Security and Pri- 1988. NBS. William C. Mann and Sandra A. Thompson. Rhetorical structure theory: A theory of text organization. Technical report, ISI, 1987. Mark T. Maybury. Knowledge based text generation. Technical report, RADC, 1989. McKeown. Generation. University Press, Cambridge, 1985. A. Mel&apos;euk. Syntax: Theory and University of New York Press, New York, 1988.</note>
<abstract confidence="0.765105368421053">Marie W. Meteer. The implication of revisions for natulanguage generation. In of the Fourth International Workshop on Natural Language Gener- Island, 1988. Marie W. Meteer. The spokesman natural language generation system. Technical report, BBN Systems and Technologies Corporation, 1989. Johanna D. Moore and Cecile L. Paris. Planning text advisory dialogues. In of the 27th Meeting, 1989. ACL. Cede L. Paris and Kathleen R. McKeown. Discourse strategies for describing complex physical objects. Gerard Kempen, editor, Language Gen- 97-115. Martinus Nijhoff Publishers, 1986. Terry Patten. Compiling the interface between text and realization. In of the AAAI on Text Planning and Realization, 1988.</abstract>
<author confidence="0.439263">The Ulysses inte-</author>
<note confidence="0.741418928571428">grated modeling environment and its relationship to 1988. Dietmar Rosner. The automated news agency SEM- TEX — a text generator for German. In G. Kempen, Language Generation: New Results in Artificial Intelligence, Psychology and Linguistics, pages 138-148. Kluwer Academic Publishers, Boston, 1987. 93 Gabi Sonnenberger. Flexible Generierung von Abstracts aus Textreprisentationsstrukturen. In Intelligence Tagung: Proceedings, 72-82. Springer, Berlin, 1988.</note>
<intro confidence="0.593424">94</intro>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Richard P Gabriel</author>
</authors>
<title>Deliberate writing. In</title>
<date>1988</date>
<journal>Natural Language Generation Systems,</journal>
<pages>1--46</pages>
<editor>David D. McDonald and Leonard Bolc, editors,</editor>
<publisher>Springer Verlag,</publisher>
<contexts>
<context position="18053" citStr="Gabriel, 1988" startWordPosition="2862" endWordPosition="2863">en the execution of the schema terminates, an editing function is applied to the list. This editing function can be a default function, or it can be explicitly named 90 in the call to the schema. It can delete propositions, change their order, change their contents or create new ones. The choice of an editing function depends on the domain and on the particular requirements of the text. This type of revision is different from the revision Meteer discusses in (Meteer, 1988), as it is situated at the text plan level, rather than the sentence level. The same remark holds for Gabriel&apos;s Yh system (Gabriel, 1988). Its complex architecture executes a cycle of text production, observation by &amp;quot;experts&amp;quot; and text modification. However, these experts are all situated at the sentence planning level; the text plan is produced by domain-specific text planners (such as an &amp;quot;array expert&amp;quot;), and is not itself subject to revision. • Schemas can post to a &amp;quot;blackboard&amp;quot;, and check this blackboard for messages. This allows for additional control and communication between schemas which are called at different times during the text planning process and cannot communicate with each other by passing arguments. Instead of b</context>
</contexts>
<marker>Gabriel, 1988</marker>
<rawString>Richard P. Gabriel. Deliberate writing. In David D. McDonald and Leonard Bolc, editors, Natural Language Generation Systems, pages 1-46. Springer Verlag, 1988.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Eduard H Hovy</author>
</authors>
<title>Planning coherent multisentential text.</title>
<date>1988</date>
<booktitle>In Proceedings of the 26th Annual Meeting,</booktitle>
<pages>163--169</pages>
<publisher>ACL.</publisher>
<location>Buffalo,</location>
<contexts>
<context position="2476" citStr="Hovy, 1988" startWordPosition="388" endWordPosition="389">ported in this paper was carried out while the author was at Odyssey Research Associates, Ithaca, NY. It was supported by the Air Force Systems Command at Rome Air Development Center under Contract No. F30602-85-C-0098 Structure of Joyce Joyce consists of three separate modules, which perform distinct tasks and access their own knowledge bases. 1. The text planner produces a list of propositions, which represents both the content and the structure of the intended text. Thus, the task of Joyce&apos;s text planner is similar in definition to TEXT&apos;s (McKeown, 1985), but different from that of Penman (Hovy, 1988), which expects the content selection task to have already been performed. Each proposition is expressed in a language-independent, conceptual framelike formalism. It encodes a minimal amount of information, but can be realized as an independent sentence if necessary. The text planner draws on domain communication knowledge expressed in a high-level schema language (see below). 2. The sentence planner takes the list of propositions and determines how to express them in natural language. This task includes choosing lexicalizations and a syntactic structure for each propositions, and assembling </context>
</contexts>
<marker>Hovy, 1988</marker>
<rawString>Eduard H. Hovy. Planning coherent multisentential text. In Proceedings of the 26th Annual Meeting, pages 163-169, Buffalo, 1988. ACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Eduard H Hovy</author>
</authors>
<title>Some unsolved problems in the planning of paragraphs.</title>
<date>1989</date>
<booktitle>In Extended Abstracts Presented at the Second European Natural Langugae Generation Workshop,</booktitle>
<location>Edinburgh,</location>
<contexts>
<context position="8094" citStr="Hovy, 1989" startWordPosition="1281" endWordPosition="1282"> representation cannot be relied on for providing the organizing principle for text planning: the text would become repetitive and long. Furthermore, the decision of which of the many possible paths to take would still remain open. A &amp;quot;procedural strategy&amp;quot; (Paris and McKeown, 1986) is not sufficient to plan the text. The question, then, is: how can text be planned in those domains and applications in which previously proposed strategies seem to fail for reasons particular to the domain or application? (This is essentially the second of Hovy&apos;s &amp;quot;unsolved problems in the planning of paragraphs&amp;quot;, (Hovy, 1989)). Text Planning and Domain Communication Knowledge Three Types of Knowledge Recent research in text planning has stressed the importance for text planning of what may be called &amp;quot;communication knowledge&amp;quot;, general and domain-independent knowledge about how to use language in order to achieve communicative goals. Communication knowledge includes rhetoric and knowledge about thematic&apos; structure. Rhetoric relates complex goals of communication to other, more elementary goals of communication. Thematic knowledge relates the thematic function of sentence elements to the thematic function of elements</context>
</contexts>
<marker>Hovy, 1989</marker>
<rawString>Eduard H. Hovy. Some unsolved problems in the planning of paragraphs. In Extended Abstracts Presented at the Second European Natural Langugae Generation Workshop, Edinburgh, 1989.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Lidija Iordanskaja</author>
<author>Richard Kittredge</author>
<author>Alain Polguere</author>
</authors>
<title>Implementing the meaning-text model for language generation. Paper presented at COLING88,</title>
<date>1988</date>
<contexts>
<context position="3541" citStr="Iordanskaja et al., 1988" startWordPosition="543" endWordPosition="546">etermines how to express them in natural language. This task includes choosing lexicalizations and a syntactic structure for each propositions, and assembling these lexico-syntactic structures into larger sentences. It draws on knowledge captured in the conceptual/Engish dictionary. 3. The linguistic realizer takes the syntactic structures and produces surface sentences. It draws on syntactic and morphological knowledge, expressed in the lexicon. The linguistic component is based on MeaningText Theory (Mel&apos;euk, 1988), and is a reimplementation in Lisp of Polguere&apos;s Prolog implementation (see (Iordanskaja et al., 1988a; Iordanskaja et al., 1988b)). Usually, the task of text generation is subdivided into two subtasks (planning and realization), not three. However, there is a certain amount of disagreement about where the line between the two is to be drawn. For example, McKeown&apos;s TEXT (McKeown, 1985) and ROsner&apos;s SEMTEX (ROsner, 1987) seem to consider the tasks that Joyce classifies as sentence planning as part of the realization process, whereas Meteer&apos;s SPOKESMAN (Meteer, 1989) classifies them as part of text planning. The proposed finer-grained terminology may prove useful in discussing text generation a</context>
</contexts>
<marker>Iordanskaja, Kittredge, Polguere, 1988</marker>
<rawString>Lidija Iordanskaja, Richard Kittredge, and Alain Polguere. Implementing the meaning-text model for language generation. Paper presented at COLING88, 1988.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Lidija Iordanskaja</author>
<author>Richard Kittredge</author>
<author>Alain Polguere</author>
</authors>
<title>Lexical selection and paraphrase in a meaning-text generation model. Technical report, Odyssey Research Associates,</title>
<date>1988</date>
<contexts>
<context position="3541" citStr="Iordanskaja et al., 1988" startWordPosition="543" endWordPosition="546">etermines how to express them in natural language. This task includes choosing lexicalizations and a syntactic structure for each propositions, and assembling these lexico-syntactic structures into larger sentences. It draws on knowledge captured in the conceptual/Engish dictionary. 3. The linguistic realizer takes the syntactic structures and produces surface sentences. It draws on syntactic and morphological knowledge, expressed in the lexicon. The linguistic component is based on MeaningText Theory (Mel&apos;euk, 1988), and is a reimplementation in Lisp of Polguere&apos;s Prolog implementation (see (Iordanskaja et al., 1988a; Iordanskaja et al., 1988b)). Usually, the task of text generation is subdivided into two subtasks (planning and realization), not three. However, there is a certain amount of disagreement about where the line between the two is to be drawn. For example, McKeown&apos;s TEXT (McKeown, 1985) and ROsner&apos;s SEMTEX (ROsner, 1987) seem to consider the tasks that Joyce classifies as sentence planning as part of the realization process, whereas Meteer&apos;s SPOKESMAN (Meteer, 1989) classifies them as part of text planning. The proposed finer-grained terminology may prove useful in discussing text generation a</context>
</contexts>
<marker>Iordanskaja, Kittredge, Polguere, 1988</marker>
<rawString>Lidija Iordanskaja, Richard Kittredge, and Alain Polguere. Lexical selection and paraphrase in a meaning-text generation model. Technical report, Odyssey Research Associates, 1988.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Tatiana Korelsky</author>
<author>Ulysses Staff</author>
</authors>
<title>Ulysses: a computer security modeling environment.</title>
<date>1988</date>
<booktitle>In Proceedings of the 14th National Conference on Security and Privacy,</booktitle>
<publisher>NBS.</publisher>
<location>Baltimore,</location>
<marker>Korelsky, Staff, 1988</marker>
<rawString>Tatiana Korelsky and Ulysses Staff. Ulysses: a computer security modeling environment. In Proceedings of the 14th National Conference on Security and Privacy, Baltimore, 1988. NBS.</rawString>
</citation>
<citation valid="true">
<authors>
<author>William C Mann</author>
<author>Sandra A Thompson</author>
</authors>
<title>Rhetorical structure theory: A theory of text organization.</title>
<date>1987</date>
<tech>Technical report, ISI,</tech>
<contexts>
<context position="7103" citStr="Mann and Thompson, 1987" startWordPosition="1121" endWordPosition="1124">oing through a cycle of text production, critique and revision. • The underlying representation in Ulysses (its domain representation) is designed in a way best suited for the formal modeling and mathematical verification of security properties, rather than for the storage and retrieval of information. Therefore, the text planner must interpret the data in order to communicate it. It is not sufficient to simply retrieve data. • The texts in the corpus have a clear rhetorical structure, but the relations that hold between the rhetorical blocks are not very varied: using the terminology of RST (Mann and Thompson, 1987), they are by and large restricted to the elaborate, background and sequence relationships. This rhetorical &amp;quot;flatness&amp;quot; effectively rules out an approach to planning these texts which is based only or even largely on rhetorical considerations. • Since there are numerous objects in the domain, with an ever larger number of interconnections between them, &amp;quot;paths&amp;quot; through the domain representation cannot be relied on for providing the organizing principle for text planning: the text would become repetitive and long. Furthermore, the decision of which of the many possible paths to take would still r</context>
</contexts>
<marker>Mann, Thompson, 1987</marker>
<rawString>William C. Mann and Sandra A. Thompson. Rhetorical structure theory: A theory of text organization. Technical report, ISI, 1987.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mark T Maybury</author>
</authors>
<title>Knowledge based text generation.</title>
<date>1989</date>
<tech>Technical report, RADC,</tech>
<contexts>
<context position="12786" citStr="Maybury, 1989" startWordPosition="2008" endWordPosition="2009"> &amp;quot;these are semantics in the sense that they define what a predicate means in a database system&amp;quot; (McKeown, 1985, P. 45). The semantics are implemented as functions that access the data base. The semantics are dependent on the structure of the data base, but independent of its domain. However, the domain of the texts is precisely the structure of the data base, not the domain of the data base. In this sense, the semantics are specific to the domain of the texts. (A similar analysis would apply to other interfaces to data bases that are based on principally on rhetoric, such as Maybury&apos;s JENNY (Maybury, 1989).) By way of example, consider McKeown &apos;s discussion of TEXT&apos;s response to the user query &amp;quot;What is a ship?&amp;quot; (McKeown, 1985, p. 47). Using its rhetorical communication knowledge, TEXT decides that the first predicate to be matched is the identification predicate. Communication knowledge cannot, however, be used to interpret the domain representation in order to find appropriate information that might serve to identify a ship. Neither is domain knowledge sufficient: the domain representation encodes the facts that a ship is a water-going vehicle and that it travels on the surface, but it does no</context>
</contexts>
<marker>Maybury, 1989</marker>
<rawString>Mark T. Maybury. Knowledge based text generation. Technical report, RADC, 1989.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kathleen McKeown</author>
</authors>
<title>Text Generation.</title>
<date>1985</date>
<publisher>Cambridge University Press,</publisher>
<location>Cambridge,</location>
<contexts>
<context position="2428" citStr="McKeown, 1985" startWordPosition="379" endWordPosition="381">s of its security characteristics. *The research reported in this paper was carried out while the author was at Odyssey Research Associates, Ithaca, NY. It was supported by the Air Force Systems Command at Rome Air Development Center under Contract No. F30602-85-C-0098 Structure of Joyce Joyce consists of three separate modules, which perform distinct tasks and access their own knowledge bases. 1. The text planner produces a list of propositions, which represents both the content and the structure of the intended text. Thus, the task of Joyce&apos;s text planner is similar in definition to TEXT&apos;s (McKeown, 1985), but different from that of Penman (Hovy, 1988), which expects the content selection task to have already been performed. Each proposition is expressed in a language-independent, conceptual framelike formalism. It encodes a minimal amount of information, but can be realized as an independent sentence if necessary. The text planner draws on domain communication knowledge expressed in a high-level schema language (see below). 2. The sentence planner takes the list of propositions and determines how to express them in natural language. This task includes choosing lexicalizations and a syntactic </context>
<context position="3828" citStr="McKeown, 1985" startWordPosition="590" endWordPosition="591">stic realizer takes the syntactic structures and produces surface sentences. It draws on syntactic and morphological knowledge, expressed in the lexicon. The linguistic component is based on MeaningText Theory (Mel&apos;euk, 1988), and is a reimplementation in Lisp of Polguere&apos;s Prolog implementation (see (Iordanskaja et al., 1988a; Iordanskaja et al., 1988b)). Usually, the task of text generation is subdivided into two subtasks (planning and realization), not three. However, there is a certain amount of disagreement about where the line between the two is to be drawn. For example, McKeown&apos;s TEXT (McKeown, 1985) and ROsner&apos;s SEMTEX (ROsner, 1987) seem to consider the tasks that Joyce classifies as sentence planning as part of the realization process, whereas Meteer&apos;s SPOKESMAN (Meteer, 1989) classifies them as part of text planning. The proposed finer-grained terminology may prove useful in discussing text generation and 87 HOST: General Structure and Security Features The multilevel Host is a complex component of the Station. It contains a Kernel, a TIP, a Process, a Net Handler and a group of Managers. The Process, the TIP, the Managers and the Net Handler communicate only through the Kernel. The m</context>
<context position="11206" citStr="McKeown, 1985" startWordPosition="1752" endWordPosition="1753">of this section will attempt to motivate this hypothesis by investigating two other text planning systems. The following section then discusses the representation of domain communication knowledge in Joyce. Domain Communication Knowledge in Other Systems Researchers whose principal interest lies in the representation and use of rhetorical or thematic knowledge have paid less attention to domain-specific problems in text planning. I will analyze two text planning systems in order to illustrate the hypothesis that any text planning task involves domain communication knowledge. • McKeown&apos;s TEXT (McKeown, 1985) uses schemas to encode rhetorical knowledge2. These schemas &amp;quot;capture patterns of textual structure that are frequently used by a variety of people&amp;quot; (McKeown, 1985, p. 37). Each schema consists of a list of rhetorical predicates; the predicates can be matched against the domain representation and realized by a proposition, or they can be instantiated by another schema. The schemas/predicates represent basic rhetorical operations, such as identification, compare and contrast and constituency. The rhetorical schemas are domain-independent, but the text planner needs to relate them to a given dom</context>
<context position="12908" citStr="McKeown, 1985" startWordPosition="2029" endWordPosition="2030">e semantics are implemented as functions that access the data base. The semantics are dependent on the structure of the data base, but independent of its domain. However, the domain of the texts is precisely the structure of the data base, not the domain of the data base. In this sense, the semantics are specific to the domain of the texts. (A similar analysis would apply to other interfaces to data bases that are based on principally on rhetoric, such as Maybury&apos;s JENNY (Maybury, 1989).) By way of example, consider McKeown &apos;s discussion of TEXT&apos;s response to the user query &amp;quot;What is a ship?&amp;quot; (McKeown, 1985, p. 47). Using its rhetorical communication knowledge, TEXT decides that the first predicate to be matched is the identification predicate. Communication knowledge cannot, however, be used to interpret the domain representation in order to find appropriate information that might serve to identify a ship. Neither is domain knowledge sufficient: the domain representation encodes the facts that a ship is a water-going vehicle and that it travels on the surface, but it does not reveal that these two facts are exactly what is needed to identify a ship. Thus the different types of knowledge have ve</context>
</contexts>
<marker>McKeown, 1985</marker>
<rawString>Kathleen McKeown. Text Generation. Cambridge University Press, Cambridge, 1985.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Igor A Mel&apos;euk</author>
</authors>
<title>Dependency Syntax: Theory and Practice.</title>
<date>1988</date>
<publisher>State University of New York Press,</publisher>
<location>New York,</location>
<contexts>
<context position="3439" citStr="Mel&apos;euk, 1988" startWordPosition="529" endWordPosition="530">el schema language (see below). 2. The sentence planner takes the list of propositions and determines how to express them in natural language. This task includes choosing lexicalizations and a syntactic structure for each propositions, and assembling these lexico-syntactic structures into larger sentences. It draws on knowledge captured in the conceptual/Engish dictionary. 3. The linguistic realizer takes the syntactic structures and produces surface sentences. It draws on syntactic and morphological knowledge, expressed in the lexicon. The linguistic component is based on MeaningText Theory (Mel&apos;euk, 1988), and is a reimplementation in Lisp of Polguere&apos;s Prolog implementation (see (Iordanskaja et al., 1988a; Iordanskaja et al., 1988b)). Usually, the task of text generation is subdivided into two subtasks (planning and realization), not three. However, there is a certain amount of disagreement about where the line between the two is to be drawn. For example, McKeown&apos;s TEXT (McKeown, 1985) and ROsner&apos;s SEMTEX (ROsner, 1987) seem to consider the tasks that Joyce classifies as sentence planning as part of the realization process, whereas Meteer&apos;s SPOKESMAN (Meteer, 1989) classifies them as part of </context>
</contexts>
<marker>Mel&apos;euk, 1988</marker>
<rawString>Igor A. Mel&apos;euk. Dependency Syntax: Theory and Practice. State University of New York Press, New York, 1988.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Marie W Meteer</author>
</authors>
<title>The implication of revisions for natural language generation.</title>
<date>1988</date>
<booktitle>In Proceedings of the Fourth International Workshop on Natural Language Generation,</booktitle>
<location>Catalina Island,</location>
<contexts>
<context position="17916" citStr="Meteer, 1988" startWordPosition="2837" endWordPosition="2838"> or by any schema it calls) are not added to the text representation. They are kept on a separate list in the order they are created. When the execution of the schema terminates, an editing function is applied to the list. This editing function can be a default function, or it can be explicitly named 90 in the call to the schema. It can delete propositions, change their order, change their contents or create new ones. The choice of an editing function depends on the domain and on the particular requirements of the text. This type of revision is different from the revision Meteer discusses in (Meteer, 1988), as it is situated at the text plan level, rather than the sentence level. The same remark holds for Gabriel&apos;s Yh system (Gabriel, 1988). Its complex architecture executes a cycle of text production, observation by &amp;quot;experts&amp;quot; and text modification. However, these experts are all situated at the sentence planning level; the text plan is produced by domain-specific text planners (such as an &amp;quot;array expert&amp;quot;), and is not itself subject to revision. • Schemas can post to a &amp;quot;blackboard&amp;quot;, and check this blackboard for messages. This allows for additional control and communication between schemas which</context>
</contexts>
<marker>Meteer, 1988</marker>
<rawString>Marie W. Meteer. The implication of revisions for natural language generation. In Proceedings of the Fourth International Workshop on Natural Language Generation, Catalina Island, 1988.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Marie W Meteer</author>
</authors>
<title>The spokesman natural language generation system.</title>
<date>1989</date>
<booktitle>Technical report, BBN Systems and Technologies Corporation,</booktitle>
<contexts>
<context position="4011" citStr="Meteer, 1989" startWordPosition="617" endWordPosition="618">sed on MeaningText Theory (Mel&apos;euk, 1988), and is a reimplementation in Lisp of Polguere&apos;s Prolog implementation (see (Iordanskaja et al., 1988a; Iordanskaja et al., 1988b)). Usually, the task of text generation is subdivided into two subtasks (planning and realization), not three. However, there is a certain amount of disagreement about where the line between the two is to be drawn. For example, McKeown&apos;s TEXT (McKeown, 1985) and ROsner&apos;s SEMTEX (ROsner, 1987) seem to consider the tasks that Joyce classifies as sentence planning as part of the realization process, whereas Meteer&apos;s SPOKESMAN (Meteer, 1989) classifies them as part of text planning. The proposed finer-grained terminology may prove useful in discussing text generation and 87 HOST: General Structure and Security Features The multilevel Host is a complex component of the Station. It contains a Kernel, a TIP, a Process, a Net Handler and a group of Managers. The Process, the TIP, the Managers and the Net Handler communicate only through the Kernel. The manifestly secure Process and the Managers perform auxiliary functions. The Process is low-level. The TIP serves as interface to a User; the Net Handler handles communication with a Ne</context>
</contexts>
<marker>Meteer, 1989</marker>
<rawString>Marie W. Meteer. The spokesman natural language generation system. Technical report, BBN Systems and Technologies Corporation, 1989.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Johanna D Moore</author>
<author>Cecile L Paris</author>
</authors>
<title>Planning text for advisory dialogues.</title>
<date>1989</date>
<booktitle>In Proceedings of the 27th Annual Meeting,</booktitle>
<publisher>ACL.</publisher>
<location>Vancouver,</location>
<contexts>
<context position="29138" citStr="Moore and Paris, 1989" startWordPosition="4570" endWordPosition="4573">tal issue remains as an open research question: what is the mode of interaction between domain communication knowledge and general communication knowledge? Three views are possible: 1. Does text planning start with general communication knowledge, with the domain-specific knowledge taking over in order to relate &amp;quot;atomic&amp;quot; communicative goals to domain facts (as in TEXT)? 2. Is there a continuum from general domainindependent knowledge via specific but domainindependent knowledge to domain-dependent communication knowledge (Moore and Paris&apos;s Motivation plan operator for motivating replacements (Moore and Paris, 1989) is an example of a specific but domain-independent communication strategy)? This would suggest a multi-layered representation of these different types of communication knowledge. 3. Is general communication knowledge implicitly encoded into the domain communication knowledge (as in Joyce)? In this view, general communication knowledge would be used explictly only during the process of compiling domain communication knowledge. This underlying issue affects the more particular questions that the proposed representation formalism for domain communication knowledge raises: 1. Is a schema-based ap</context>
</contexts>
<marker>Moore, Paris, 1989</marker>
<rawString>Johanna D. Moore and Cecile L. Paris. Planning text for advisory dialogues. In Proceedings of the 27th Annual Meeting, Vancouver, 1989. ACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Cede L Paris</author>
<author>Kathleen R McKeown</author>
</authors>
<title>Discourse strategies for describing complex physical objects.</title>
<date>1986</date>
<booktitle>Natural Language Generation,</booktitle>
<pages>97--115</pages>
<editor>In Gerard Kempen, editor,</editor>
<publisher>Martinus Nijhoff Publishers,</publisher>
<contexts>
<context position="7764" citStr="Paris and McKeown, 1986" startWordPosition="1224" endWordPosition="1227"> the elaborate, background and sequence relationships. This rhetorical &amp;quot;flatness&amp;quot; effectively rules out an approach to planning these texts which is based only or even largely on rhetorical considerations. • Since there are numerous objects in the domain, with an ever larger number of interconnections between them, &amp;quot;paths&amp;quot; through the domain representation cannot be relied on for providing the organizing principle for text planning: the text would become repetitive and long. Furthermore, the decision of which of the many possible paths to take would still remain open. A &amp;quot;procedural strategy&amp;quot; (Paris and McKeown, 1986) is not sufficient to plan the text. The question, then, is: how can text be planned in those domains and applications in which previously proposed strategies seem to fail for reasons particular to the domain or application? (This is essentially the second of Hovy&apos;s &amp;quot;unsolved problems in the planning of paragraphs&amp;quot;, (Hovy, 1989)). Text Planning and Domain Communication Knowledge Three Types of Knowledge Recent research in text planning has stressed the importance for text planning of what may be called &amp;quot;communication knowledge&amp;quot;, general and domain-independent knowledge about how to use languag</context>
</contexts>
<marker>Paris, McKeown, 1986</marker>
<rawString>Cede L. Paris and Kathleen R. McKeown. Discourse strategies for describing complex physical objects. In Gerard Kempen, editor, Natural Language Generation, pages 97-115. Martinus Nijhoff Publishers, 1986.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Terry Patten</author>
</authors>
<title>Compiling the interface between text planning and realization.</title>
<date>1988</date>
<booktitle>In Proceedings of the AAAI Workshop on Text Planning and Realization,</booktitle>
<location>St.Paul,</location>
<contexts>
<context position="28143" citStr="Patten, 1988" startWordPosition="4426" endWordPosition="4427">main communication knowledge. Ways in which domain facts can contribute to achieving a particular communicative goal are deduced by a complex process using only domain and communication knowledge, but once such reasoning has been performed, its results are explicitly encoded in the domain communication knowledge representation. This knowledge can then be used for subsequent text planning tasks. Intuitively, this explains why humans get better and faster at generating a given type of text about a specific domain once they have done so several times. This view is analogous to Patten&apos;s proposal (Patten, 1988) to precompile communication planning knowledge according to the theory of register. However, his proposal is aimed at what in Joyce is classified as sentence planning knowledge, since register-related decisions are made by the sentence-planner in Joyce. Domain communication knowledge might be considered a precompilation of genre knowledge. 92 Further Research A fundamental issue remains as an open research question: what is the mode of interaction between domain communication knowledge and general communication knowledge? Three views are possible: 1. Does text planning start with general comm</context>
</contexts>
<marker>Patten, 1988</marker>
<rawString>Terry Patten. Compiling the interface between text planning and realization. In Proceedings of the AAAI Workshop on Text Planning and Realization, St.Paul, 1988.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David Rosenthal</author>
<author>Tatiana Korelsky</author>
<author>Daryl McCullogh</author>
</authors>
<title>Owen Rambow, and D.G.Weber. The Ulysses integrated modeling environment and its relationship to KBSA.</title>
<date>1988</date>
<journal>Heuristics,</journal>
<pages>1--2</pages>
<contexts>
<context position="697" citStr="Rosenthal et al., 1988" startWordPosition="96" endWordPosition="99">ormation Science University of Pennsylvania Philadelphia, PA 19104 Abstract This paper advances the hypothesis that any text planning task relies, explicitly or implicitly, on domainspecific text planning knowledge. This knowledge, &amp;quot;domain communication knowledge&amp;quot;, is different from both domain knowledge and general knowledge about communication. The paper presents the text generation system Joyce, which represents such knowledge explicitly. The Joyce Text Generation System The Joyce text generation system is a part of the software design environment Ulysses (Korelsky and Ulysses Staff, 1988; Rosenthal et al., 1988). Ulysses is a graphical environment for the design of secure, distributed software systems. The design proceeds hierarchically by top-down refinement. A formal specification interface and a theorem prover allow the user to formally verify the flow security of the designed system. Joyce is part of the user interface. Joyce generates different types of texts about software designs: • It generates annotations of the design which are intended to serve as system documentation during and after the design process. • It is used to explain the result of a heuristic security design tool, the &amp;quot;flow anal</context>
</contexts>
<marker>Rosenthal, Korelsky, McCullogh, 1988</marker>
<rawString>David Rosenthal, Tatiana Korelsky, Daryl McCullogh, Owen Rambow, and D.G.Weber. The Ulysses integrated modeling environment and its relationship to KBSA. Heuristics, 1(2):42-49, 1988.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Dietmar Rosner</author>
</authors>
<title>The automated news agency SEMTEX — a text generator for German.</title>
<date>1987</date>
<booktitle>Natural Language Generation: New Results in Artificial Intelligence, Psychology and Linguistics,</booktitle>
<pages>138--148</pages>
<editor>In G. Kempen, editor,</editor>
<publisher>Kluwer Academic Publishers,</publisher>
<location>Boston,</location>
<marker>Rosner, 1987</marker>
<rawString>Dietmar Rosner. The automated news agency SEMTEX — a text generator for German. In G. Kempen, editor, Natural Language Generation: New Results in Artificial Intelligence, Psychology and Linguistics, pages 138-148. Kluwer Academic Publishers, Boston, 1987.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Gabi Sonnenberger</author>
</authors>
<title>Flexible Generierung von natiirlichsprachigen Abstracts aus Textreprisentationsstrukturen.</title>
<booktitle>In 4. Osterreichische Artificial Intelligence Tagung: Proceedings,</booktitle>
<pages>72--82</pages>
<marker>Sonnenberger, </marker>
<rawString>Gabi Sonnenberger. Flexible Generierung von natiirlichsprachigen Abstracts aus Textreprisentationsstrukturen. In 4. Osterreichische Artificial Intelligence Tagung: Proceedings, pages 72-82.</rawString>
</citation>
<citation valid="false">
<date>1988</date>
<publisher>Springer,</publisher>
<location>Berlin,</location>
<marker>1988</marker>
<rawString>Springer, Berlin, 1988.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>