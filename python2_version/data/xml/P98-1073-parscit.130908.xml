<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000074">
<title confidence="0.7835025">
Vers l&apos;utilisation des methodes formelles pour
le developpement de linguiciels
</title>
<note confidence="0.8212825">
Bile! Gargouri, Mohamed Jmaiel, Abdelmajid Ben Hamadou
Laboratoire LARIS
FSEG-SFAX, B.P. 1088
3018 SFAX, TUNISIA
</note>
<email confidence="0.999408">
E-mail: {Abdelmajid.Benhamadou@fsegs.rnu.tn}
</email>
<sectionHeader confidence="0.994825" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.997087780487805">
Formal methods have&apos;nt been applied enough in
the development process of lingware although
their advantages have been proved in many
other domains. In this framework, we have
investigated some applications dealing with
different processing levels (lexical analyses,
morphology, syntax, semantic and pragmatic).
These investigations has mainly led to the
following observations. First of all, we have no-
ticed a lack of use of methodologies that cover
all the life cycle of a software development. The
formal specification has not been used in the
first development phases. In addition, we have
noticed the lack of formal validation and
consequently the insufficient guarantee of the
developed software results. Moreover, there
has been no appeal to rigorous methods of
integration to solve the dichotomy of data
and processing problem. However, the use of
the formal aspect in the Natural Language
Processing (NLP) has generally been limited to
describing the natural language knowledge (i.e.,
grammars) and specifying the treatments using
algorithmic languages. Few are those who have
used a high level specification language.
This paper focuses on the contributions of
formal methods in developing natural language
software starting from an experimentation
carried out on a real application and which
consists in specifying and validating the sys-
tem CORTEXA (Correction ORthographique
des TEXtes Arabes) using the VDM formal
method.
First of all, we review the advantages of formal
methods in the general software development
process. Then, we present the experimentation
and the obtained results. After that, we place
the formal methods advantages in the context
of NLP. Finally, we give some methodological
criteria that allow the choice of an appropriate
formal method.
</bodyText>
<note confidence="0.549441">
Résumé:
</note>
<bodyText confidence="0.9997973125">
Les methodes formelles n&apos;ont pas ete suff-
isamment utilisees dans le processus de
developpement des linguiciels, alors qu&apos;elles
ont fait leurs preuves dans d&apos;autres domaines.
Le present article essaye de mettre en relief
les avantages des methodes formelles dans le
contexte des langues naturelles, partant des
resultats d&apos;une experience realisee sur une ap-
plication reelle. Dans un premier temps, nous
rappellons les avantages globaux des methodes
formelles dans le processus de developpement
d&apos;un logiciel. Ensuite, nous placons ces
avantages dans le contexte des langues na-
turelles. Enfin, nous donnons les criteres
methodologiques pour le choix d&apos;une methode
formelle appropriee.
</bodyText>
<sectionHeader confidence="0.999032" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.9999325">
L&apos;automatisation des langues naturelles a
beneficie jusqu&apos;a nos jours de nombreuses
annees de recherches et continue encore a
faire l&apos;objet de plusieurs travaux, notamment
dans le domaine du genie linguistique pour le
developpement d&apos;applications specifiques.
L&apos;etude des approches de developpement des
applications liees au Traitement Automatique
des Langues Naturelles (TALN), a tous ses
niveaux (i.e., lexical, morphologique, syntax-
ique, semantique et pragmatique), (Fuchs, 1993;
Sabah, 1989) nous a permis de constater une
quasi-absence de l&apos;utilisation de methodologies
de developpement qui integrent toutes les
phases du cycle de vie d&apos;un logiciel. En par-
ticulier, au niveau des premieres etapes, nous
avons constate l&apos;absence quasi-totale de la phase
de specification formelle.
D&apos;un autre cote, nous avons constate une dif-
ficulte, voire absence de validation formelle
des approches utilisees dans le developpement
et par consequent de garantie sur les perfor-
mances des resultats obtenus. De meme, nous
avons remarque le non recours a des methodes
rigoureuses d&apos;integration pour resoudre le
probleme de la dichotomie donnees-traitements.
L&apos;utilisation des outils formels s&apos;est limitee,
dans la plupart des cas, a la description du Ian-
gage (i.e., les grammaires) et a la specification
des traitements reduite, generalement, a l&apos;usage
d&apos;un langage algorithmique. Rares sont ceux
qui ont utilise un langage de specification
formelle de haut niveau (Zajac, 1986; Jensen
et al., 1993).
Apres une presentation des avantages qu&apos;offrent
les methodes formelles dans le processus de
developpement d&apos;un logiciel, d&apos;une maniere
generale, cet article essaye de mettre en re-
lief les avantages specifiques au domaine de
TALN partant d&apos;une experience menee au sein
de notre equipe en utilisant la methode VDM
(Dawes, 1991; Jones, 1986). Il donne, a la fin,
des criteres permettant le choix d&apos;une methode
formelle appropriee.
</bodyText>
<sectionHeader confidence="0.9558815" genericHeader="method">
2 Rappel des principaux avantages
des methodes formelles
</sectionHeader>
<bodyText confidence="0.999684848484848">
L&apos;integration des methodes formelles dans le
processus de developpement de certaines ap-
plications critiques comme les systemes temps
reel et les systemes distribties a donne ses
preuves ces dernieres annees (Barroca and Der-
mid, 1992; Dick and Woods, 1997; Ledru,
1993). C&apos;est ce qui a motive leur utilisation
dans le developpement de logiciels traitant des
problemes complexes au niveau industriel (Hui
et al., 1997).
Une methode formelle est consideree comme
une demarche de developpement de logiciels
basee sur des notations mathematiques et des
preuves de validation formelles (Habrias, 1995).
Cette demarche utilise un processus de raffine-
ment qui part d&apos;une specification abstraite des
besoins pour deboucher sur une specification
raffinee et executable (ou directement codable
en un langage de programmation). Les princi-
paux avantages des methodes formelles peuvent
etre resumes dans les points suivants :
La precision et la non ambiguite : l&apos;utilisation
d&apos;un langage base sur des notations formelles
et precises permet d&apos;eviter toute ambiguite et
toute redondance dans la specification.
La detection d&apos;erreurs conceptuelles le plus tot
possible: l&apos;application de preuves de validation
de la specification tout le long du processus
de raffinement de cette derniere, garanti la
detection des erreurs de conception le plus tot
possible dans le processus de developpement
de l&apos;application. En l&apos;absence d&apos;une telle
validation, les erreurs de conception ne seront
</bodyText>
<page confidence="0.996456">
439
</page>
<bodyText confidence="0.9560423">
detectees qu&apos;apres la phase d&apos;implementation
ce qui engendrera un cOut supplementaire.
La satisfaction de la conception
(eventuellement de l&apos;implementation ) par
rapport aux besoins : elle est garantie grace
au processus de raffinement qui part d&apos;une
specification des besoins et applique des regles
coherentes de transformation pour aboutir a la
conception finale.
Le controle de la coherence donnees-
traitements : qui est directement pris en charge
grace aux preuves de validation.
La reutilisation : le raffinement des
specifications formelles et leurs decompositions
successives permettent de mettre en evidence
des niveaux d&apos;abstraction interessants pour la
resolution du probleme et pour promouvoir la
reutilisation (des specifications).
3 Presentation et resultats de
l&apos;experimentation
</bodyText>
<subsectionHeader confidence="0.981976">
3.1 Choix et demarche utilisee
</subsectionHeader>
<bodyText confidence="0.999869923076923">
Pour mesurer l&apos;impact de l&apos;utilisation des
methodes formelles dans le contexte du TALN,
nous avons effectue la specification complete
et validee du systeme CORTEXA (Correction
ORthographique des TEXtes Arabes) (Ben-
Hamadou, 1993) developpe au sein de notre lab-
oratoire.
Outre la disponibilite de la documentation, en
matiere de conception et d&apos;implementation, le
choix du systeme CORTEXA est aussi motive
par la diversite des approches utilisees pour la
representation des connaissances et des traite-
ments. En effet, il se compose :
</bodyText>
<listItem confidence="0.996392307692308">
• d&apos;un module de detection des erreurs base
sur une analyse affixale qui utilise un
systeme a etats finis (les reseaux de tran-
sitions augmentees : ATN). L&apos;analyse af-
fixale effectue la decomposition d&apos;un mot
en ses composants premiers : prefixe, in-
fixe, suffixe et racine en se referant a. un
ensemble de lexiques et de structures de
donnees,
• d&apos;un module de correction des erreurs or-
thographiques qui utilise un systeme a base
de regles et
• d&apos;un autre module de correction des erreurs
</listItem>
<bodyText confidence="0.999213625">
typographiques qui se base sur un systeme
mixte.
Le choix de VDM pour la specification de COR-
TEXA est motive, d&apos;une part, par le fait que
cette methode se base sur les predicats qui don-
nent un haut pouvoir expressif, et d&apos;autre part,
pour sa notation simple et riche. Aussi, VDM
a fait ses preuves dans le developpement de
plusieurs systemes d&apos;information. Contraire-
ment aux environnements de specification des
donnees linguistiques tels que D-PATR (Kart-
tunen, 1986), EAGLES (Erbach et al., 1996),
etc, VDM permet de specifier a la fois des traite-
ments et des donnees (dans notre contexte des
donnees linguistiques) et offre une methodologie
de developpement d&apos;applications se basant sur
des raffinements et des transformations validees.
Partant de la description informelle des be-
soins, nous avons developpe la specification
abstraite du systeme CORTEXA (appelee
aussi specification implicite) qui englobe, en-
tre autres, la specification formelle de ses fonc-
tions, de ses actions et de ses regles de correc-
tion. Cette specification a ete, ensuite, validee
en utilisant des preuves formelles. Enfin, nous
avons generalise la specification de conception
(appelee aussi specification explicite ou directe)
a partir de la specification abstraite moyen-
nant des regles relatives a la methode VDM.
Cette specification de conception est facile-
ment transformee en code pour realiser la phase
d&apos;implementation.
</bodyText>
<subsectionHeader confidence="0.991057">
3.2 Resultats obtenus
</subsectionHeader>
<bodyText confidence="0.9863222">
L&apos;utilisation de la methode formelle VDM pour
la specification complete et validee du systeme
CORTEXA a conduit, entre autres, aux con-
stats suivants :
Insuffisance en regles : l&apos;utilisation des preuves
formelles nous a permis de mettre en relief, par
rapport a la specification initiale, certaines situ-
ations non prises en compte. En particulier, les
preuves qui permettent de s&apos;assurer que pour
chaque type d&apos;erreur doit exister au moms une
regle de correction nous ont permis de constater
que l&apos;ensemble des regles de correction, initiale-
ment propose, ne permet pas de prendre en
charge toute la typologie d&apos;erreurs.
Exemple 1: preuve relative a. Perreur de sup-
</bodyText>
<page confidence="0.963744">
440
</page>
<table confidence="0.886991">
pression
(V w&apos; CH, Vw E Lex).(Del(w, w&apos;)A
w&apos; Lex) E Reg).w E R(0)
Lex:oh
le lexique de reference
CH: l&apos;ensemble des sequences de chaines de
caracteres
Reg: l&apos;ensemble des regles de correction
R (w) : l&apos;application de la regle R sur la chaine
w. On represente une regle en VDM par une
fonction
Del() : un predicat qui verifie l&apos;erreur de
suppression de caractere.
</table>
<bodyText confidence="0.9921348">
La precision et la concision de la
specification: en comparant la specification in-
formelle du systeme CORTEXA, presentee dans
la documentation, avec la specification formelle
developpee, nous remarquons que cette derniere
est plus precise et plus concise. L&apos;exemple
2, donne ci-apres, qui presente la specification
formelle de la fonction de generation des
decompositions affixales possibles d&apos;un mot w,
illustre ce constat.
</bodyText>
<sectionHeader confidence="0.405243" genericHeader="method">
Exemple 2:
</sectionHeader>
<bodyText confidence="0.8120092">
I sdecomp(w,p,i, s, root : C H)r : B
pre True
post 3a,b E CH (w=p•a•i•b•sA
root = a • b) A (Spre fixe(w,p) A
Ssuf f ix(w , s) A Sin fixe(w,i))
</bodyText>
<equation confidence="0.998872">
B : le type booleen
Sinfixe0 ( respectivement Sprefixe0 et
Ssuffixe0) : un predicat qui verifie la
</equation>
<bodyText confidence="0.999123583333333">
propriete d&apos;un infixe (respectivement d&apos;un
prefixe et d&apos;un suffixe) pour une chaine.
Facilite du developpement du code : la
specification de conception obtenue est suffisam-
ment explicite pour les donnees et algorith-
mique pour les traitements. Elle est donc facile-
ment codable en un langage de programmation.
L&apos;exemple 3, illustre l&apos;usage d&apos;une notation al-
gorithmique dans la specification des fonctions.
II presente la fonction S-Radical de verification
de la propriete d&apos;un radical (forme par la racine
et l&apos;infixe).
</bodyText>
<figure confidence="0.8540715">
Exemple 3:
Sradical : CH x CH B
Sradical(si, 52) —Def if sl = []
then False
else if Spre fixe(si, s2)
then True
else Sradical(tl(si), 52)
oh
</figure>
<bodyText confidence="0.948465142857143">
t/O : une fonction VDM qui retourne la
sequence en entree privee de sa tete.
Unicite de la notation : les methodes formelles
permettent d&apos;utiliser la meme notation pour
decrire aussi bien les donnees que les traite-
ments. En effet, avec le langage VDM-SL, as-
socie a VDM, nous avons Pu specifier toutes les
fonctions et les donnees de reference de COR-
TEXA. Les exemples 4 et 5 illustrent cette
unicite pour la representation des donnees corn-
posees et des fonctions.
Exemple 4 : l&apos;enregistrement relatif aux
donnees d&apos;une decomposition d&apos;un mot en un
prefixe, un infixe, un suffixe et une racine.
</bodyText>
<equation confidence="0.9985495">
Decomp p: CH
i : CH
s : C H
r : C H
</equation>
<bodyText confidence="0.893166">
Exemple 5: specification de l&apos;action qui genere
les propositions de correction des suffixes par
suppression de caractere
</bodyText>
<figure confidence="0.3573614">
A3s(p : CH,c : CH AR)SCand : set of CH
pre True
post 3 a,b,pi E CH p= a•c•b
Api=a•bApi E Su f f == {pi} C SC and
oh
CHAR: l&apos;ensemble des caracteres
SCand : les suffixes candidats a la
correction
Suff : l&apos;ensemble des suffixes.
Coherence donnees-traitements : l&apos;unicite de
</figure>
<bodyText confidence="0.999419333333333">
la notation, a permis d&apos;appliquer des preuves
formelles a la fois sur des donnees et des
traitements et par consequent de controler la
coherence de ces derniers. L&apos;exemple 1 illustre
ce contrOle dans le cas d&apos;un systeme a base de
regles.
</bodyText>
<page confidence="0.997387">
441
</page>
<bodyText confidence="0.9991991">
La validation de chaque composant du
systeme pour chaque composant ou module
du systeme CORTEXA, nous avons applique les
preuves de validation appropriees, ce qui nous a
permis de valider tous les resultats partiels du
systeme. Le theoreme de l&apos;exemple 6, donne
ci-apres, permet de prouver qu&apos;a la suite de
l&apos;application de la regle de correction d&apos;une er-
reur de substitution, les propositions de correc-
tion obtenues appartiennent au lexique.
</bodyText>
<equation confidence="0.796528666666667">
Exemple 6:
E C H ,V w E Lex .S ub(w , w&apos;)
3R E Reg .R(v1) C Lex
oji
Sub : un predicat qui verifie l&apos;erreur de
substitution de caracteres.
</equation>
<bodyText confidence="0.980400151898734">
4 Interets des methodes formelles en
genie linguistique
Cette experimentation, bien qu&apos;elle soit assez
limitee dans le temps (elle a dure une annee en-
viron) et dans son contexte (elle s&apos;est interesse
un seul systeme et non h plusieurs), elle nous
a permis d&apos;apprecier a juste titre l&apos;interet de
recourir aux methodes formelles dans le pro-
cessus de developpement des applications liees
au TALN. Elle nous a aussi permis de degager
certains avantages globaux dedies au domaine
du TALN qui viennent consolider ceux que
nous avons déjà cites dans un cadre general
de developpement des logiciels. Ces avantages
specifiques peuvent etre resumes et argumentes
dans les points qui suivent.
D&apos;abord, au niveau de la specification des
besoins, les applications du TALN sont
generalement tres ambitieuses au depart. Or
on connait aujourd&apos;hui les limites des modeles
linguistiques et des outils de representation des
connaissances. L&apos;utilisation d&apos;outils formels
dans les premieres etapes de developpement
(i.e., analyse) permet de mettre tres vite en
evidence les limites du systeme a developper, en
particulier, sur le plan de la couverture linguis-
tique et par consequent de partir pour l&apos;etape de
conception sur une version validee du systeme
qui sera implemente et de prevoir d&apos;emble les
possibilites d&apos;extention et de reutilisation.
Par ailleurs, la complexite des traitements lies
au langage naturel et la diversite des donnees
linguistiques et des fortes interactions qui ex-
istent entre donnees et traitements rendent
la tache de conception tres difficile et pou-
vant engendrer des problemes d&apos;incoherence.
L&apos;utilisation des methodes formelles au niveau
de la conception permet d&apos;abord, de gerer
la dichotomie donnees-traitements soit par
l&apos;integration (i.e., en utilisation l&apos;approche ob-
jet), soit par le controle de coherence (i.e.,
par des preuves de validation) et ensuite de
mettre en evidence, par des regroupements
et des raffinements successifs, des abstractions
interessantes reutilisables telsque des modules
ou des sous-systemes pouvant etre disponibles
dans une bibliotheque (Darricau et al., 1997).
Ces abstractions correspondent par exemple a
des modules standards du TALN traitant le
niveau phonetique, morphologique, syntaxique,
etc. Notons a ce propos que, la reutilisation
de specifications (i.e., de conception) peut se
faire directement ou moyennant des adapta-
tions. Les methodes formelles offrent des
environnements qui facilitent ces adaptations
(editeurs,..) et qui permettent la validation des
nouvelles specifications.
Enfin, l&apos;utilisation d&apos;une notation uniforme
donne la possibilite d&apos;integrer dans la meme
application une variete de connaissances sur la
langue specifiees avec des formalismes differents
(i.e., grammaires d&apos;unification, HPSG, Gram-
maires Formelles, etc). Ce qui permet-
tera d&apos;avoir une meilleure coherence dans la
specification finale a produire.
5 Les criteres de choix d&apos;une
methode formelle pour le TALN
L&apos;utilisation de la methode VDM pour la
specification complete et validee du systeme
CORTEXA a ete a titre d&apos;essai. Toute-
fois, le choix d&apos;une methode formelle pour
le developpement d&apos;une application de TALN
reste crucial. Ce choix doit tenir compte des
specificites du domaine des langues naturelles
sur le plan du langage de specification et sur
celui de la methodologie appliquee. Dans ce qui
suit, nous donnons quelques criteres que nous
jugeons pertinents dans le choix d&apos;une methode
formelle dans le contexte de TALN :
</bodyText>
<page confidence="0.994958">
442
</page>
<bodyText confidence="0.9684041">
• Le pouvoir expressif de la
methode : possibilite d&apos;integrer dans la
meme specification des connaissances lin-
guistiques variees decrites avec des formal-
ismes differents. Le langage de specification
doit pouvoir unifier la representation des
differentes expressions. Le pouvoir expres-
sif concerne aussi la specification conjointe
des donnees linguistiques et les traitements
qui leurs sont appliques.
</bodyText>
<listItem confidence="0.987598555555556">
• Simplicite de la notation et de la
methodologie de developpement.
• Couverture maximale du cycle de vie du
logiciel a developper.
• Existance d&apos;Ateliers de Genie Logiciel
(AGLs) qui supportent la methode.
• Possibilite de supporter l&apos;architecture du
systeme envisage (i.e., sequentielle, dis-
tribuee, parallele, etc).
</listItem>
<sectionHeader confidence="0.996996" genericHeader="conclusions">
6 Conclusion
</sectionHeader>
<bodyText confidence="0.999268">
L&apos;utilisation des methodes formelles dans le
contexte des langues naturelles permet, non
seulement de consolider les avantages globaux
de ces methodes dans le cadre general de
developpement de logiciels, mais aussi de rap-
porter de nouveaux profits specifiques au do-
maine. Cette utilisation concerne aussi bien
le processus de developpement des applications
que leur maintenance. Cependant, le choix
d&apos;une methode appropriee reste lie a la disponi-
bilite d&apos;outils logiciels associes qui facilitent sa
mise en oeuvre et a la construction d&apos;une bib-
liotheque de specifications reutilisables.
Actuellement, nos travaux se concentrent sur
la finalisation d&apos;une approche que nous avons
developpee pour generaliser l&apos;utilisation des
methodes formelles (VDM ou autres) dans
le processus de developpement des linguiciels.
Cette approche integre les principaux formal-
ismes existants de description des connaissances
linguistiques (i.e., Grammaires d&apos;Unification,
Grammaires FormeIles, HPSG, etc).
</bodyText>
<sectionHeader confidence="0.998475" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.998012150943396">
L. M. Barroca and J. A. Mc Dermid. 1992. For-
mal methods : use and relevance for the de-
velopment of safety-critical systems. The Com-
puter Journal, 35(6).
A. BenHamadou. 1993. Verification et correc-
tion automatiques par analyse affixale des textes
ecrits en langage naturel : le cas de l&apos;arabe non
voyelle. Ph.D. thesis, Faculte des Sciences de
Tunis. These Es-Sciences en Informatique.
M. Darricau, H. Hadj Mabrouk, and J.G.
Ganascia. 1997. Une approche pour la
reutilisation des specifications de logiciels.
Genie Logiciel, (45):21-27, September.
J. Dawes. 1991. The VDM-SL reference guide.
Pitman Publishing.
J. Dick and E. Woods. 1997. Lessons learned
from rigorous system software development. In-
formation and Software Technology, 39:551-
560.
G. Erbach, J. Dorre, S. Manandhar, and
H. Uszkoreit. 1996. A report on the draft ea-
gles encoding standard for hpsg. In Actes de
TALN-96, Marseille, France, May.
C. Fuchs. 1993. Linguistique et Traitements
Automatiques des Langues. Hachette.
H. Habrias. 1995. Les specifications formelles
pour les systemes d&apos;informations quoi ?
pourquoi ?comments? Ingenierie des systemes
d&apos;information, 3(2) :205-253.
J. Hui, L. Dong, and X. Xiren. 1997. Using
formal specification language in industrial soft-
ware development. In Procedings of the IEEE
International Conference on Intelligent Process-
ing Systems, pages 1847-1851, Beijing, China,
October.
K. Jensen, G.E. Heidorn, and S. D. Richard-
son. 1993. NLP: The PLNLP Approach. Kul-
wer academic publishers.
C. B. Jones. 1986. Systematic software devel-
opment using VDM. Printice Hall.
L. Karttunen. 1986. D-patr : A development
environment for unification-based grammars. In
In Proceedings of the 11th International Confer-
ence on Computational Linguistics, pages 74-
80, Bonn, Germany.
Y. Ledru. 1993. Developing reactive systems in
a vdm framework. Science of Computer Pro-
gramming, 20:51-71.
G. Sabah. 1989. L&apos;intelligence artificielle et le
langage. Hermes.
R. Zajac. 1986. Scsl : a linguistic specification
language for mt. In Procedings of COLING&apos;86,
pages 25-92, Bonn, Germany, August.
</reference>
<page confidence="0.999343">
443
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.786360">
<title confidence="0.953221">Vers l&apos;utilisation des methodes formelles pour le developpement de linguiciels</title>
<author confidence="0.998438">Bile Gargouri</author>
<author confidence="0.998438">Mohamed Jmaiel</author>
<author confidence="0.998438">Abdelmajid Ben Hamadou</author>
<affiliation confidence="0.93322">Laboratoire LARIS</affiliation>
<address confidence="0.984531">1088 3018 SFAX, TUNISIA</address>
<email confidence="0.990175">E-mail:{Abdelmajid.Benhamadou@fsegs.rnu.tn}</email>
<abstract confidence="0.99902920338983">Formal methods have&apos;nt been applied enough in the development process of lingware although their advantages have been proved in many other domains. In this framework, we have investigated some applications dealing with different processing levels (lexical analyses, morphology, syntax, semantic and pragmatic). These investigations has mainly led to the following observations. First of all, we have noticed a lack of use of methodologies that cover all the life cycle of a software development. The formal specification has not been used in the first development phases. In addition, we have noticed the lack of formal validation and consequently the insufficient guarantee of the developed software results. Moreover, there has been no appeal to rigorous methods of integration to solve the dichotomy of data and processing problem. However, the use of the formal aspect in the Natural Language Processing (NLP) has generally been limited to describing the natural language knowledge (i.e., grammars) and specifying the treatments using algorithmic languages. Few are those who have used a high level specification language. This paper focuses on the contributions of formal methods in developing natural language software starting from an experimentation carried out on a real application and which consists in specifying and validating the system CORTEXA (Correction ORthographique des TEXtes Arabes) using the VDM formal method. First of all, we review the advantages of formal methods in the general software development process. Then, we present the experimentation and the obtained results. After that, we place the formal methods advantages in the context of NLP. Finally, we give some methodological criteria that allow the choice of an appropriate formal method. Résumé: Les methodes formelles n&apos;ont pas ete suffisamment utilisees dans le processus de developpement des linguiciels, alors qu&apos;elles ont fait leurs preuves dans d&apos;autres domaines. Le present article essaye de mettre en relief les avantages des methodes formelles dans le contexte des langues naturelles, partant des resultats d&apos;une experience realisee sur une application reelle. Dans un premier temps, nous rappellons les avantages globaux des methodes formelles dans le processus de developpement d&apos;un logiciel. Ensuite, nous placons ces dans le contexte des langues naturelles. Enfin, nous donnons les criteres methodologiques pour le choix d&apos;une methode formelle appropriee.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>L M Barroca</author>
<author>J A Mc Dermid</author>
</authors>
<title>Formal methods : use and relevance for the development of safety-critical systems.</title>
<date>1992</date>
<journal>The Computer Journal,</journal>
<volume>35</volume>
<issue>6</issue>
<contexts>
<context position="4930" citStr="Barroca and Dermid, 1992" startWordPosition="716" endWordPosition="720">eveloppement d&apos;un logiciel, d&apos;une maniere generale, cet article essaye de mettre en relief les avantages specifiques au domaine de TALN partant d&apos;une experience menee au sein de notre equipe en utilisant la methode VDM (Dawes, 1991; Jones, 1986). Il donne, a la fin, des criteres permettant le choix d&apos;une methode formelle appropriee. 2 Rappel des principaux avantages des methodes formelles L&apos;integration des methodes formelles dans le processus de developpement de certaines applications critiques comme les systemes temps reel et les systemes distribties a donne ses preuves ces dernieres annees (Barroca and Dermid, 1992; Dick and Woods, 1997; Ledru, 1993). C&apos;est ce qui a motive leur utilisation dans le developpement de logiciels traitant des problemes complexes au niveau industriel (Hui et al., 1997). Une methode formelle est consideree comme une demarche de developpement de logiciels basee sur des notations mathematiques et des preuves de validation formelles (Habrias, 1995). Cette demarche utilise un processus de raffinement qui part d&apos;une specification abstraite des besoins pour deboucher sur une specification raffinee et executable (ou directement codable en un langage de programmation). Les principaux a</context>
</contexts>
<marker>Barroca, Dermid, 1992</marker>
<rawString>L. M. Barroca and J. A. Mc Dermid. 1992. Formal methods : use and relevance for the development of safety-critical systems. The Computer Journal, 35(6).</rawString>
</citation>
<citation valid="true">
<authors>
<author>A BenHamadou</author>
</authors>
<title>Verification et correction automatiques par analyse affixale des textes ecrits en langage naturel : le cas de l&apos;arabe non voyelle.</title>
<date>1993</date>
<booktitle>Ph.D. thesis, Faculte des Sciences de Tunis. These Es-Sciences en</booktitle>
<pages>45--21</pages>
<contexts>
<context position="7219" citStr="BenHamadou, 1993" startWordPosition="1048" endWordPosition="1050"> pris en charge grace aux preuves de validation. La reutilisation : le raffinement des specifications formelles et leurs decompositions successives permettent de mettre en evidence des niveaux d&apos;abstraction interessants pour la resolution du probleme et pour promouvoir la reutilisation (des specifications). 3 Presentation et resultats de l&apos;experimentation 3.1 Choix et demarche utilisee Pour mesurer l&apos;impact de l&apos;utilisation des methodes formelles dans le contexte du TALN, nous avons effectue la specification complete et validee du systeme CORTEXA (Correction ORthographique des TEXtes Arabes) (BenHamadou, 1993) developpe au sein de notre laboratoire. Outre la disponibilite de la documentation, en matiere de conception et d&apos;implementation, le choix du systeme CORTEXA est aussi motive par la diversite des approches utilisees pour la representation des connaissances et des traitements. En effet, il se compose : • d&apos;un module de detection des erreurs base sur une analyse affixale qui utilise un systeme a etats finis (les reseaux de transitions augmentees : ATN). L&apos;analyse affixale effectue la decomposition d&apos;un mot en ses composants premiers : prefixe, infixe, suffixe et racine en se referant a. un ense</context>
</contexts>
<marker>BenHamadou, 1993</marker>
<rawString>A. BenHamadou. 1993. Verification et correction automatiques par analyse affixale des textes ecrits en langage naturel : le cas de l&apos;arabe non voyelle. Ph.D. thesis, Faculte des Sciences de Tunis. These Es-Sciences en Informatique. M. Darricau, H. Hadj Mabrouk, and J.G. Ganascia. 1997. Une approche pour la reutilisation des specifications de logiciels. Genie Logiciel, (45):21-27, September.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Dawes</author>
</authors>
<title>The VDM-SL reference guide.</title>
<date>1991</date>
<publisher>Pitman Publishing.</publisher>
<contexts>
<context position="4537" citStr="Dawes, 1991" startWordPosition="660" endWordPosition="661">plupart des cas, a la description du Iangage (i.e., les grammaires) et a la specification des traitements reduite, generalement, a l&apos;usage d&apos;un langage algorithmique. Rares sont ceux qui ont utilise un langage de specification formelle de haut niveau (Zajac, 1986; Jensen et al., 1993). Apres une presentation des avantages qu&apos;offrent les methodes formelles dans le processus de developpement d&apos;un logiciel, d&apos;une maniere generale, cet article essaye de mettre en relief les avantages specifiques au domaine de TALN partant d&apos;une experience menee au sein de notre equipe en utilisant la methode VDM (Dawes, 1991; Jones, 1986). Il donne, a la fin, des criteres permettant le choix d&apos;une methode formelle appropriee. 2 Rappel des principaux avantages des methodes formelles L&apos;integration des methodes formelles dans le processus de developpement de certaines applications critiques comme les systemes temps reel et les systemes distribties a donne ses preuves ces dernieres annees (Barroca and Dermid, 1992; Dick and Woods, 1997; Ledru, 1993). C&apos;est ce qui a motive leur utilisation dans le developpement de logiciels traitant des problemes complexes au niveau industriel (Hui et al., 1997). Une methode formelle </context>
</contexts>
<marker>Dawes, 1991</marker>
<rawString>J. Dawes. 1991. The VDM-SL reference guide. Pitman Publishing.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Dick</author>
<author>E Woods</author>
</authors>
<title>Lessons learned from rigorous system software development.</title>
<date>1997</date>
<booktitle>Information and Software Technology,</booktitle>
<pages>39--551</pages>
<contexts>
<context position="4952" citStr="Dick and Woods, 1997" startWordPosition="721" endWordPosition="724">, d&apos;une maniere generale, cet article essaye de mettre en relief les avantages specifiques au domaine de TALN partant d&apos;une experience menee au sein de notre equipe en utilisant la methode VDM (Dawes, 1991; Jones, 1986). Il donne, a la fin, des criteres permettant le choix d&apos;une methode formelle appropriee. 2 Rappel des principaux avantages des methodes formelles L&apos;integration des methodes formelles dans le processus de developpement de certaines applications critiques comme les systemes temps reel et les systemes distribties a donne ses preuves ces dernieres annees (Barroca and Dermid, 1992; Dick and Woods, 1997; Ledru, 1993). C&apos;est ce qui a motive leur utilisation dans le developpement de logiciels traitant des problemes complexes au niveau industriel (Hui et al., 1997). Une methode formelle est consideree comme une demarche de developpement de logiciels basee sur des notations mathematiques et des preuves de validation formelles (Habrias, 1995). Cette demarche utilise un processus de raffinement qui part d&apos;une specification abstraite des besoins pour deboucher sur une specification raffinee et executable (ou directement codable en un langage de programmation). Les principaux avantages des methodes </context>
</contexts>
<marker>Dick, Woods, 1997</marker>
<rawString>J. Dick and E. Woods. 1997. Lessons learned from rigorous system software development. Information and Software Technology, 39:551-560.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Erbach</author>
<author>J Dorre</author>
<author>S Manandhar</author>
<author>H Uszkoreit</author>
</authors>
<title>A report on the draft eagles encoding standard for hpsg.</title>
<date>1996</date>
<booktitle>In Actes de TALN-96,</booktitle>
<location>Marseille, France,</location>
<contexts>
<context position="8506" citStr="Erbach et al., 1996" startWordPosition="1262" endWordPosition="1265">ection des erreurs orthographiques qui utilise un systeme a base de regles et • d&apos;un autre module de correction des erreurs typographiques qui se base sur un systeme mixte. Le choix de VDM pour la specification de CORTEXA est motive, d&apos;une part, par le fait que cette methode se base sur les predicats qui donnent un haut pouvoir expressif, et d&apos;autre part, pour sa notation simple et riche. Aussi, VDM a fait ses preuves dans le developpement de plusieurs systemes d&apos;information. Contrairement aux environnements de specification des donnees linguistiques tels que D-PATR (Karttunen, 1986), EAGLES (Erbach et al., 1996), etc, VDM permet de specifier a la fois des traitements et des donnees (dans notre contexte des donnees linguistiques) et offre une methodologie de developpement d&apos;applications se basant sur des raffinements et des transformations validees. Partant de la description informelle des besoins, nous avons developpe la specification abstraite du systeme CORTEXA (appelee aussi specification implicite) qui englobe, entre autres, la specification formelle de ses fonctions, de ses actions et de ses regles de correction. Cette specification a ete, ensuite, validee en utilisant des preuves formelles. Enf</context>
</contexts>
<marker>Erbach, Dorre, Manandhar, Uszkoreit, 1996</marker>
<rawString>G. Erbach, J. Dorre, S. Manandhar, and H. Uszkoreit. 1996. A report on the draft eagles encoding standard for hpsg. In Actes de TALN-96, Marseille, France, May.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C Fuchs</author>
</authors>
<title>Linguistique et Traitements Automatiques</title>
<date>1993</date>
<volume>3</volume>
<issue>2</issue>
<pages>205--253</pages>
<contexts>
<context position="3207" citStr="Fuchs, 1993" startWordPosition="459" endWordPosition="460">gues naturelles. Enfin, nous donnons les criteres methodologiques pour le choix d&apos;une methode formelle appropriee. 1 Introduction L&apos;automatisation des langues naturelles a beneficie jusqu&apos;a nos jours de nombreuses annees de recherches et continue encore a faire l&apos;objet de plusieurs travaux, notamment dans le domaine du genie linguistique pour le developpement d&apos;applications specifiques. L&apos;etude des approches de developpement des applications liees au Traitement Automatique des Langues Naturelles (TALN), a tous ses niveaux (i.e., lexical, morphologique, syntaxique, semantique et pragmatique), (Fuchs, 1993; Sabah, 1989) nous a permis de constater une quasi-absence de l&apos;utilisation de methodologies de developpement qui integrent toutes les phases du cycle de vie d&apos;un logiciel. En particulier, au niveau des premieres etapes, nous avons constate l&apos;absence quasi-totale de la phase de specification formelle. D&apos;un autre cote, nous avons constate une difficulte, voire absence de validation formelle des approches utilisees dans le developpement et par consequent de garantie sur les performances des resultats obtenus. De meme, nous avons remarque le non recours a des methodes rigoureuses d&apos;integration p</context>
</contexts>
<marker>Fuchs, 1993</marker>
<rawString>C. Fuchs. 1993. Linguistique et Traitements Automatiques des Langues. Hachette. H. Habrias. 1995. Les specifications formelles pour les systemes d&apos;informations quoi ? pourquoi ?comments? Ingenierie des systemes d&apos;information, 3(2) :205-253.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Hui</author>
<author>L Dong</author>
<author>X Xiren</author>
</authors>
<title>Using formal specification language in industrial software development.</title>
<date>1997</date>
<booktitle>In Procedings of the IEEE International Conference on Intelligent Processing Systems,</booktitle>
<pages>1847--1851</pages>
<location>Beijing, China,</location>
<contexts>
<context position="5114" citStr="Hui et al., 1997" startWordPosition="746" endWordPosition="749">en utilisant la methode VDM (Dawes, 1991; Jones, 1986). Il donne, a la fin, des criteres permettant le choix d&apos;une methode formelle appropriee. 2 Rappel des principaux avantages des methodes formelles L&apos;integration des methodes formelles dans le processus de developpement de certaines applications critiques comme les systemes temps reel et les systemes distribties a donne ses preuves ces dernieres annees (Barroca and Dermid, 1992; Dick and Woods, 1997; Ledru, 1993). C&apos;est ce qui a motive leur utilisation dans le developpement de logiciels traitant des problemes complexes au niveau industriel (Hui et al., 1997). Une methode formelle est consideree comme une demarche de developpement de logiciels basee sur des notations mathematiques et des preuves de validation formelles (Habrias, 1995). Cette demarche utilise un processus de raffinement qui part d&apos;une specification abstraite des besoins pour deboucher sur une specification raffinee et executable (ou directement codable en un langage de programmation). Les principaux avantages des methodes formelles peuvent etre resumes dans les points suivants : La precision et la non ambiguite : l&apos;utilisation d&apos;un langage base sur des notations formelles et precis</context>
</contexts>
<marker>Hui, Dong, Xiren, 1997</marker>
<rawString>J. Hui, L. Dong, and X. Xiren. 1997. Using formal specification language in industrial software development. In Procedings of the IEEE International Conference on Intelligent Processing Systems, pages 1847-1851, Beijing, China, October.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Jensen</author>
<author>G E Heidorn</author>
<author>S D Richardson</author>
</authors>
<title>NLP: The PLNLP Approach. Kulwer academic publishers.</title>
<date>1993</date>
<contexts>
<context position="4211" citStr="Jensen et al., 1993" startWordPosition="608" endWordPosition="611"> formelle des approches utilisees dans le developpement et par consequent de garantie sur les performances des resultats obtenus. De meme, nous avons remarque le non recours a des methodes rigoureuses d&apos;integration pour resoudre le probleme de la dichotomie donnees-traitements. L&apos;utilisation des outils formels s&apos;est limitee, dans la plupart des cas, a la description du Iangage (i.e., les grammaires) et a la specification des traitements reduite, generalement, a l&apos;usage d&apos;un langage algorithmique. Rares sont ceux qui ont utilise un langage de specification formelle de haut niveau (Zajac, 1986; Jensen et al., 1993). Apres une presentation des avantages qu&apos;offrent les methodes formelles dans le processus de developpement d&apos;un logiciel, d&apos;une maniere generale, cet article essaye de mettre en relief les avantages specifiques au domaine de TALN partant d&apos;une experience menee au sein de notre equipe en utilisant la methode VDM (Dawes, 1991; Jones, 1986). Il donne, a la fin, des criteres permettant le choix d&apos;une methode formelle appropriee. 2 Rappel des principaux avantages des methodes formelles L&apos;integration des methodes formelles dans le processus de developpement de certaines applications critiques comme</context>
</contexts>
<marker>Jensen, Heidorn, Richardson, 1993</marker>
<rawString>K. Jensen, G.E. Heidorn, and S. D. Richardson. 1993. NLP: The PLNLP Approach. Kulwer academic publishers.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C B Jones</author>
</authors>
<title>Systematic software development using VDM. Printice</title>
<date>1986</date>
<booktitle>In Proceedings of the 11th International Conference on Computational Linguistics,</booktitle>
<pages>74--80</pages>
<location>Bonn, Germany.</location>
<contexts>
<context position="4551" citStr="Jones, 1986" startWordPosition="662" endWordPosition="663">as, a la description du Iangage (i.e., les grammaires) et a la specification des traitements reduite, generalement, a l&apos;usage d&apos;un langage algorithmique. Rares sont ceux qui ont utilise un langage de specification formelle de haut niveau (Zajac, 1986; Jensen et al., 1993). Apres une presentation des avantages qu&apos;offrent les methodes formelles dans le processus de developpement d&apos;un logiciel, d&apos;une maniere generale, cet article essaye de mettre en relief les avantages specifiques au domaine de TALN partant d&apos;une experience menee au sein de notre equipe en utilisant la methode VDM (Dawes, 1991; Jones, 1986). Il donne, a la fin, des criteres permettant le choix d&apos;une methode formelle appropriee. 2 Rappel des principaux avantages des methodes formelles L&apos;integration des methodes formelles dans le processus de developpement de certaines applications critiques comme les systemes temps reel et les systemes distribties a donne ses preuves ces dernieres annees (Barroca and Dermid, 1992; Dick and Woods, 1997; Ledru, 1993). C&apos;est ce qui a motive leur utilisation dans le developpement de logiciels traitant des problemes complexes au niveau industriel (Hui et al., 1997). Une methode formelle est consideree</context>
</contexts>
<marker>Jones, 1986</marker>
<rawString>C. B. Jones. 1986. Systematic software development using VDM. Printice Hall. L. Karttunen. 1986. D-patr : A development environment for unification-based grammars. In In Proceedings of the 11th International Conference on Computational Linguistics, pages 74-80, Bonn, Germany.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Y Ledru</author>
</authors>
<title>Developing reactive systems in a vdm framework.</title>
<date>1993</date>
<journal>Science of Computer Programming,</journal>
<pages>20--51</pages>
<contexts>
<context position="4966" citStr="Ledru, 1993" startWordPosition="725" endWordPosition="726">le, cet article essaye de mettre en relief les avantages specifiques au domaine de TALN partant d&apos;une experience menee au sein de notre equipe en utilisant la methode VDM (Dawes, 1991; Jones, 1986). Il donne, a la fin, des criteres permettant le choix d&apos;une methode formelle appropriee. 2 Rappel des principaux avantages des methodes formelles L&apos;integration des methodes formelles dans le processus de developpement de certaines applications critiques comme les systemes temps reel et les systemes distribties a donne ses preuves ces dernieres annees (Barroca and Dermid, 1992; Dick and Woods, 1997; Ledru, 1993). C&apos;est ce qui a motive leur utilisation dans le developpement de logiciels traitant des problemes complexes au niveau industriel (Hui et al., 1997). Une methode formelle est consideree comme une demarche de developpement de logiciels basee sur des notations mathematiques et des preuves de validation formelles (Habrias, 1995). Cette demarche utilise un processus de raffinement qui part d&apos;une specification abstraite des besoins pour deboucher sur une specification raffinee et executable (ou directement codable en un langage de programmation). Les principaux avantages des methodes formelles peuv</context>
</contexts>
<marker>Ledru, 1993</marker>
<rawString>Y. Ledru. 1993. Developing reactive systems in a vdm framework. Science of Computer Programming, 20:51-71.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Sabah</author>
</authors>
<title>L&apos;intelligence artificielle et le langage.</title>
<date>1989</date>
<location>Hermes.</location>
<contexts>
<context position="3221" citStr="Sabah, 1989" startWordPosition="461" endWordPosition="462">es. Enfin, nous donnons les criteres methodologiques pour le choix d&apos;une methode formelle appropriee. 1 Introduction L&apos;automatisation des langues naturelles a beneficie jusqu&apos;a nos jours de nombreuses annees de recherches et continue encore a faire l&apos;objet de plusieurs travaux, notamment dans le domaine du genie linguistique pour le developpement d&apos;applications specifiques. L&apos;etude des approches de developpement des applications liees au Traitement Automatique des Langues Naturelles (TALN), a tous ses niveaux (i.e., lexical, morphologique, syntaxique, semantique et pragmatique), (Fuchs, 1993; Sabah, 1989) nous a permis de constater une quasi-absence de l&apos;utilisation de methodologies de developpement qui integrent toutes les phases du cycle de vie d&apos;un logiciel. En particulier, au niveau des premieres etapes, nous avons constate l&apos;absence quasi-totale de la phase de specification formelle. D&apos;un autre cote, nous avons constate une difficulte, voire absence de validation formelle des approches utilisees dans le developpement et par consequent de garantie sur les performances des resultats obtenus. De meme, nous avons remarque le non recours a des methodes rigoureuses d&apos;integration pour resoudre l</context>
</contexts>
<marker>Sabah, 1989</marker>
<rawString>G. Sabah. 1989. L&apos;intelligence artificielle et le langage. Hermes.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Zajac</author>
</authors>
<title>Scsl : a linguistic specification language for mt.</title>
<date>1986</date>
<booktitle>In Procedings of COLING&apos;86,</booktitle>
<pages>25--92</pages>
<location>Bonn, Germany,</location>
<contexts>
<context position="4189" citStr="Zajac, 1986" startWordPosition="606" endWordPosition="607">de validation formelle des approches utilisees dans le developpement et par consequent de garantie sur les performances des resultats obtenus. De meme, nous avons remarque le non recours a des methodes rigoureuses d&apos;integration pour resoudre le probleme de la dichotomie donnees-traitements. L&apos;utilisation des outils formels s&apos;est limitee, dans la plupart des cas, a la description du Iangage (i.e., les grammaires) et a la specification des traitements reduite, generalement, a l&apos;usage d&apos;un langage algorithmique. Rares sont ceux qui ont utilise un langage de specification formelle de haut niveau (Zajac, 1986; Jensen et al., 1993). Apres une presentation des avantages qu&apos;offrent les methodes formelles dans le processus de developpement d&apos;un logiciel, d&apos;une maniere generale, cet article essaye de mettre en relief les avantages specifiques au domaine de TALN partant d&apos;une experience menee au sein de notre equipe en utilisant la methode VDM (Dawes, 1991; Jones, 1986). Il donne, a la fin, des criteres permettant le choix d&apos;une methode formelle appropriee. 2 Rappel des principaux avantages des methodes formelles L&apos;integration des methodes formelles dans le processus de developpement de certaines applic</context>
</contexts>
<marker>Zajac, 1986</marker>
<rawString>R. Zajac. 1986. Scsl : a linguistic specification language for mt. In Procedings of COLING&apos;86, pages 25-92, Bonn, Germany, August.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>