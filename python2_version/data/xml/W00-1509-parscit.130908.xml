<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000043">
<title confidence="0.975565">
A Rational Agent for the Construction of a Semantic Model*
</title>
<note confidence="0.90013575">
PAUTRET Vincent
Universit6 de Rennes I, ENSSAT
6 rue de K6rampont, BP 447
Lannion, France, 22300
</note>
<email confidence="0.974916">
Vincent.Pautret@enssat.fr
</email>
<sectionHeader confidence="0.997228" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999975176470588">
This paper presents a methodology that
aims at building knowledge models from
a natural language description of a
domain. Our methodology is based on
the establishment of a dialogue with the
knowledge engineer of an application.
This dialogue is motivated by the
Semantic Differentiation Process, which
solves problems related to acquisition
and modelling.
Moreover, the dialogue can be naturally
formalised within a theory of
communicating rational agents. We can
thus consider a more complete
automation of the process of modelling
and show how to integrate our
methodology into this type of theory.
</bodyText>
<sectionHeader confidence="0.979034" genericHeader="introduction">
Introduction
</sectionHeader>
<bodyText confidence="0.999909142857143">
Knowledge Based Systems separate the
semantic model - which handles the system
knowledge - from the reasoning process -
which uses this knowledge. The main
advantage of this approach is that only the
semantic model has to be changed to handle a
different application domain. However, the
creation of a semantic model for a given
application is a manual process, which is
difficult to automate (Paris and Vander Linden
(1996)).
Tools (Heijst et al. (1997)) or workbenches
((Mikheev and Finch (1995), (Delisle (1996))
already exist that aim at building semantic
representations at the domain level (using the
vocabulary of KADS (Wielinga et al. (1992)).
With these tools and workbenches, conceptual
knowledge models (like ontologies)
independent of the application domain are
built. However, the knowledge engineer task
remains fastidious. One of the difficulties in
completely automating the acquisition and
modelling process comes from a lack of
interaction with the knowledge engineer.
In order to improve these interactions (and thus
to facilitate modelling), we propose a
methodology based on a natural language
dialogue with the knowledge engineer. This
methodology can be implemented into a
rational agent. In this way, this agent is given
capabilities of modelling by means of
conceptual diagrams defined in our
methodology. We show how to make this
integration within the formal theory of
communicating rational agents of Sadek
(Sadek (1991), (Sadek et al. (1997))).
Section 1 introduces the bases of the
methodology. Section 2 explains how to
integrate it into a theory of rational agents for
its effective implementation. The last section
presents the guidelines to implement our
methodology into a rational agent.
</bodyText>
<sectionHeader confidence="0.780614" genericHeader="method">
1 Bases of the methodology
</sectionHeader>
<bodyText confidence="0.999850111111111">
The methodology aims at building a semantic
model of a domain from a natural language
description. It is based on three successive
stages: the acquisition stage, the modelling
stage, and the transfer stage.
The acquisition stage consists of the analysis
of each domain description utterance. A
morpho-syntactic analysis is followed by a
semantic analysis in order to build a semantic
representation of each utterance. In an iterative
way, these representations are integrated into a
general model: the Construction Model (CM).
The modelling stage consists of an interactive
reorganisation of the CM once the description
process is completed.
The transfer stage extracts the relevant
information from the CM and builds the
semantic domain model.
</bodyText>
<footnote confidence="0.804241">
* This work was realised within the framework of a PhD
in France Telecom R&amp;D.
</footnote>
<subsectionHeader confidence="0.994106">
1.1 Construction Model
</subsectionHeader>
<bodyText confidence="0.999989157894737">
On the one hand, Construction Model must
have a sufficient expressiveness, which makes
it possible to represent domain knowledge and
knowledge related to its own structure at the
same time. On the other hand, it must have a
flexible enough structure, which can be
handled simply and efficiently.
We use a formal language based on KL-ONE-
like description logic. The central part of the
model is a semantic network whose nodes are
concepts and whose arcs are semantic domain
or modelling relations (for example
subconcept, composition, property, etc.) The
representation language also offers the
possibility to express abstract concepts (as a
composition of concepts and relations of the
network), as well as constraints and negative
knowledge related to the concepts and relations
of the network.
</bodyText>
<subsectionHeader confidence="0.97419">
1.2 Basic tools for knowledge
acquisition
</subsectionHeader>
<bodyText confidence="0.999944291666667">
During the modelling process, which is based
on dialogue, the knowledge engineer
utterances are analysed and the relevant
information has to be extracted from them. For
this purpose, we use two tools to acquire
knowledge from texts.
The first tool is a robust morpho-syntactic
analyser, which produces a syntagmatic graph
(Giguet (1998)) where each node is a syntagm
and each relation is a syntactic relation. A
syntagmatic graph is produced for each
utterance of the description.
The semantic tool makes use of the results of
the morpho-syntactic tool to produce a
semantic representation of each utterance.
Thanks to four basic operations, it integrates
this representation into CM. The first operation
identifies the concepts that are already known.
The second one is related to generalisation and
organises the concepts into hierarchies. The
third one calculates the common characteristics
to the concepts. Finally, the last one places the
semantic relations resulting from the semantic
analysis into CM.
</bodyText>
<subsectionHeader confidence="0.98877">
1.3 Semantic Differentiation Process
</subsectionHeader>
<bodyText confidence="0.999376842105263">
The Semantic Differentiation Process is based
on a set of generic conceptual diagrams, whose
role is to modify the CM structure. We follow
an empirical process to exhibit modelling
problems and to define a conceptual diagram
as a solution to each one.
An initial situation and several final situations
define a conceptual diagram. Situations are
expressed in terms of the language of CM
representation, namely as sets of first order
logic formulae. A situation corresponds to a
particular structuring of generic concepts and
generic relationships between these concepts.
A condition is associated with each final
situation. The conceptual diagrams are
represented in the following form (we will use
more readily a chart of the initial and final
situations of a diagram as on the example of
figure 1).
</bodyText>
<figure confidence="0.7424736">
Name_of_the_diagram
&lt;Initial_situation&gt;
&lt;condition_1&gt; &lt;Final_situation_1&gt;
...
&lt;condition_n&gt; &lt;Final_situation_n&gt;
</figure>
<bodyText confidence="0.999069789473684">
where Initial_situation and Final_situation_k
(k ∈ {1,...,n}) refer to the initial situation and
the n final situations associated with the
diagram, and condition_k (k ∈{1,...,n}) refer
to the condition associated with
Final_situation_k.
Diagrams are divided into three main families.
The first family (two diagrams) is dedicated to
the integration problems. The second one
(seven diagrams) allows model simplifications
while the third one (eleven diagrams) allows
modifications of the model structure. The
diagrams constituting the first family are
applied during the acquisition stage while
those of the two other families are applied
during the modelling stage. The diagrams are
ordered according to the importance of the
modifications they produce on the model. For
example, the simplification diagrams are
applied before the modelling ones.
A diagram can only be used once the model
under development has validated the initial
situation. When the initial situation has been
instantiated, a dialogue begins with the
knowledge engineer until one of the conditions
associated with each final situation is
validated. CM is then restructured to resemble
the final situation, which corresponds to the
condition. The role of this dialogue is to
determine the best transformation of the model
by the considered conceptual diagram for the
problem under consideration. An algorithm of
processing of graphs carries out the passage
from the initial situation to the selected final
situation, which directly removes assertions
from the model or adds some to it.
determined thanks to the following dialogue
with the knowledge engineer:
</bodyText>
<figureCaption confidence="0.99903">
Figure 1: Factorisation diagram
</figureCaption>
<bodyText confidence="0.994759428571429">
Figure 1 shows the Factorisation diagram,
which belongs to the second family of
diagrams. The role of this diagram is to
factorise a relation from the subconcepts to
their supconcept (final situation 1) or to add
relations, which would have been forgotten by
the knowledge engineer (final situation 2). The
first case makes it possible to reduce the
number of relations and thus the complexity of
the model. With the second one, supplements
can be added to the model after missing
information has been detected.
The initial situation shows several subconcepts
Cf, ..., Cg of concept C, which have the same
relation R on the same concept C’.
In final situation 1, relation R is placed on
concept C, whereas in final situation 2, relation
R is extended between C’ and some of the
subconcepts of C (concepts Cf, ..., Cg, ..., Ch).
When the initial situation is detected in the
model, the evolution of the model is
</bodyText>
<construct confidence="0.836369">
Q1 – Subconcepts Cf, ..., Cg of C have the same
relation R with C’. Have all subconcepts of C
this relation with C’?
</construct>
<bodyText confidence="0.9999222">
With a positive answer, the model is
transformed like final situation 1 (by adding
relation R on C and by removing R between
subconcepts of C and C’). With a negative
answer the dialogue proceeds as follows:
</bodyText>
<figure confidence="0.484389333333333">
Q2 – What are the different concepts that have
this relation R with concept C’?
The model then evolves to situation 2.
</figure>
<figureCaption confidence="0.978707">
Figure 2: Property Extraction diagram
</figureCaption>
<bodyText confidence="0.997487866666667">
Figure 2 shows the Property Extraction
diagram, which belongs to the third family of
diagrams (modelling stage). It is intended to
extract a particular property of a concept from
its structure. From the structural viewpoint, a
definition of a concept could be compared to
the complex terms extracted by LEXTER
(Bourigault (1994)). A concept comprises a
word in head position (the headword) and a list
of qualifications. Each qualification is
recursively composed of a word and a list of
qualifications. For example, a specialised
server for weather forecast has the word server
as headword and weather forecast and
specialised as qualifications. In the context of
</bodyText>
<figure confidence="0.998700815384616">
Initial situation
C
C’
...
...
...
...
C1
Cf
Cg
Ch
Cn
R R
R
C’
Final situation 1
C
...
...
...
...
C1
Cf
Cg
Ch
Cn
...
Ch
Final situation 2
C
C’
...
Cg
...
R
R
R
C1
...
Ck: concept
R: relation
Cf
Cn
: relation
: subconcept relation
P
C
property
...
...
P
Pf
Pn
: relation
: subconcept relation
Initial situation
C
...
...
Cf
Cn
C1
Final situation
Ck: concept
Pk: property
</figure>
<bodyText confidence="0.999465357142857">
the diagram of figure 2, weather forecast is
seen as a property of the concept.
Hence, if the system detects different
qualifications of the concepts that have the
same headword, the system asks the
knowledge engineer whether it is possible to
gather the qualifications under a same
property. The dialogue associated to this
diagram is very simple. The system only needs
to ask the knowledge engineer if s/he wants to
apply the diagram. If s/he answers positively,
the system asks the knowledge engineer for the
name of the property. Otherwise, the system
does not modify the model.
</bodyText>
<subsectionHeader confidence="0.965068">
1.4 A short example
</subsectionHeader>
<bodyText confidence="0.968199571428571">
Here is an example of dialogue in the AGS
application, which is a vocal query, over the
telephone, of the shared-revenue information
voice services directory (applied to the areas of
“employment” and “weather forecast”) hosted
by France Telecom. K stands for the
knowledge engineer, S for the system, and N
for note on the current modelling state.
K: There exist servers for weather forecast,
servers for employment and mail order
servers.
N: The system creates the concept &amp;quot;server&amp;quot; and
places the three types of servers as subconcepts
of this abstraction (by using the second basic
operation, cf. section 1.2).
K: The servers for weather forecast and the
servers for employment have telephone
numbers.
K: That is all.
S: O.K.
S: The servers for weather forecast and the
servers for employment own a telephone
number. Do mail-order servers own a
telephone number as well?
K: Yes.
S: O.K.
N: The system factorizes the relation on the
concept &amp;quot;server&amp;quot; by applying the Factorization
diagram.
S: I detect some properties of the servers
(weather forecast, employment, and mail
order). Is it possible to group together these
properties under the same concept?
N: The system applies here the Property
Extraction diagram.
</bodyText>
<figure confidence="0.8412854">
K: Yes.
S: Could you give the name of the concept?
K: Theme.
S: O.K.
N: Then the system builds the final model.
</figure>
<figureCaption confidence="0.999806">
Figure 3: Example of a semantic model
</figureCaption>
<bodyText confidence="0.971439666666667">
2 Integration of the methodology into
a rational agent
The core of our methodology is the dialogue
with the knowledge engineer. The
communicative rational agents provide a
theoretical framework that is particularly
adapted to the formalisation of this dialogue. In
this way, we extend the theory of rational
agents proposed by Sadek (Sadek (1991)), thus
giving the agents the ability to build a semantic
model of an application while following the
interactive principles of our methodology.
</bodyText>
<subsectionHeader confidence="0.994093">
2.1 The theory of rational agency
</subsectionHeader>
<bodyText confidence="0.999977777777778">
The whole theory of rational agency is
expressed in a homogeneous multimodal logic
of mental attitudes and actions (or events).
Modal operator of belief Bi satisfies a KD45-
model. The resulting agents are fully
introspective and have consistent beliefs.
Formula Bip is read “property p is a logical
consequence of the beliefs of agent i”. The
mental attitude of intention is defined as a
complex combination of primitive mental
attitudes like belief and choice1, as a relatively
similar way as Cohen and Levesque (1990).
Formula Iip is read “agent i intends to bring
about proposition p”.
In order to reason about action, two modal
operators are introduced, a being an action
expression and 0 a formula: Feasible(a,0)
means that a can take place and if it does, 0
</bodyText>
<footnote confidence="0.5348905">
1 For sake of simplicity, we only focus on belief
and intention. For more details, see Sadek (1991).
</footnote>
<figure confidence="0.9636464">
telephone number
theme
weather employment mail-order
forecast
possess
property
server
applied, it must be done. The calculation of
feasibility results from the axiom (1) of the
theory.
&lt;i,Facto_2&gt;
P: Bi(initial_situation ∧ ¬relation(R,C,C’)) ∧
∧k∈{1,É,n} Bifi (relation(R,Ck,C’))
E: Bi(final_situation_2)
Bi(Feasible(a)) ⇒ IiDone(a) (2)
</figure>
<bodyText confidence="0.999956357142857">
where a refers to a primitive action associated
with a conceptual diagram.
Conditions associated with each alternative of
a conceptual diagram are the source of the
dialogue to apply the diagram (see section 1).
We have to supplement the model of
communicative behaviour of modeller agent in
order to convey to it the capacity to initiate the
dialogue with the knowledge engineer. This
dialogue increases its knowledge until it can
determine which alternative of the diagram
(i.e. which primitive action) to apply. For each
primitive action, we introduce an axioms
schema of the following form:
</bodyText>
<equation confidence="0.996875">
Bi(initial_situation) ∧ φ ⇒ Iiψ (3)
</equation>
<bodyText confidence="0.99962935">
where initial_situation is associated with the
corresponding conceptual diagram. φ
(condition of release of the primitive action)
and ψ (goal starting the corresponding
dialogue) are expressed according to
condition_k (condition associated with the
primitive action).
For example, φ can be defined by
¬Bifi(condition_k) and ψ by Bifi(condition_k).
Bifiφ is a syntactic abbreviation defined in the
theory and means that agent i knows if φ is true
or not.
When several actions (resulting from the
intentions derived by the axioms) are
applicable in the same state, logic does not
make it possible to choose the order in which
they are applied. In an implementation, we
need to be careful to follow the order defined
by the methodology. This is achieved by a
process of control of the inferences.
</bodyText>
<subsectionHeader confidence="0.99592">
2.3 Example
</subsectionHeader>
<bodyText confidence="0.913033166666667">
We show the reasoning process related to the
application of the factorisation diagram
presented in section 1. The primitive actions
associated to the diagram are:
&lt;i, Facto_1&gt;
P: Bi(initial_situation ∧ relation(R,C,C’))
E: Bi(final_situation_1)
where R, C, C1, É, Cn, and C’ are the relations
and the concepts identified in the conceptual
diagram (cf. figure 1).
The two axioms schemata associated to the
primitive actions are respectively3:
</bodyText>
<equation confidence="0.9988922">
Bi(initial_situation) ∧ ¬Bifi (relation(R,C,C’))
⇒ IiBifi (relation(R,C,C’)) (4)
Bi(initial_situation) ∧ Bi(¬relation(R,C,C’)) ∧
¬[∧k∈{1,É,n} Bifi (relation(R,Ck,C’))] ⇒ IiBrefi(ιx
relation(R,x,C’) ∧ subconcept(x,C)) (5)
</equation>
<bodyText confidence="0.98313830952381">
where R, C, and C’ are the relations and
concepts identified in the conceptual diagram
(cf. figure 1).
Let us suppose that the modeller agent is
configured in such a way that the conceptual
diagram is applicable, i.e. Bi(initial_situation)
can be derived from its mental state. Moreover,
let us suppose that it can infer no knowledge in
connection with relation(R, C, C’), i.e. it can
only conclude (Bifi (relation(R, C, C’)).
The instantiation of the axiom (4) thus
generates the intention of the agent to know if
the concepts C and C’ are or not linked by R.
Then the traditional mechanisms of planning of
the theory take over (cf. Sadek (1991)) and
produce an act of dialogue aiming at requiring
missing information to the knowledge engineer
(cf. dialogue Q1 of section 1.3).
If the answer to this question is positive, the
axioms of rational behaviour of the theory
involve Bi(relation(R, C, C’)). All the
preconditions of the primitive action Facto_1
are then checked and the axioms (1) and (2)
induce the execution of the first alternative of
the conceptual diagram (Facto_1). The
resulting mental state of the agent conforms to
the final situation 1.
If, on the contrary, the answer is negative, the
agent acquires the knowledge: Bi(¬relation(R,
C, C’)). The axiom (5) then applies as long as
the agent does not have a knowledge
3 Brefi(ιx φ(x)) means that agent i knows the
objects, which check the property φ.
supplements on relation(R, Ck, C’) for all
k∈{1,..., n}. These produces the intention at
the origin of the act of dialogue aiming at
requiring of the knowledge engineer the whole
of the subconcepts of C in relation R with C’
(cf. dialogue Q2 of section 1.3). The primitive
action Facto_2 can then be carried out and
leads to a mental state that conforms to the
final situation 2.
</bodyText>
<sectionHeader confidence="0.9943305" genericHeader="method">
3 Integration into an operational
system
</sectionHeader>
<subsectionHeader confidence="0.999765">
3.1 The Artimis technology
</subsectionHeader>
<bodyText confidence="0.9998115625">
The Artimis technology of France Telecom
R&amp;D provides a generic framework to
instantiate intelligent dialoguing agents. Such
agents can interact cooperatively in natural
language with human users.
Artimis software is composed of four main
modules: a rational unit (which is the kernel of
the system), a natural language interpretation
unit, a natural language generation unit, and a
domain knowledge management unit (Sadek et
al. (1997), Sadek (1999)).
The rational unit conveys the agent the ability
to dialogue and to reason about knowledge and
action.
The natural language interpretation unit uses
island-driven parsing and semantic completion
(Sadek et al. (1997)). Island-driven parsing
means that small syntactic structures in the text
are spotted, with as few range dependencies as
possible. The semantic completion builds a
well-formed logical formula with the result of
the parse.
The natural language generation unit verbalises
dialogue acts produced by the rational unit.
Finally, the domain knowledge management
unit contains a representation of the domain
knowledge. It provides several functions (like
concepts identification) to have access to the
knowledge.
Artimis software works in lab versions on
several real applications like the AGS one. It is
written in Quintus Prolog.
</bodyText>
<subsectionHeader confidence="0.9600385">
3.2 Guidelines for the integration into
an Artimis dialogue agent
</subsectionHeader>
<bodyText confidence="0.999749">
We present, in this section, the needed
modifications in order to integrate our
methodology into an Artimis dialogue agent.
</bodyText>
<subsubsectionHeader confidence="0.627747">
3.2.1 Modification of the two natural
</subsubsectionHeader>
<bodyText confidence="0.924781173913043">
language components
We have to modify the natural language
interpretation unit at two levels.
Firstly, the system must take into account all
the words of the utterance in order to detect the
new concepts. We make the assumption that
the sentences are syntactically and
semantically correct.
Secondly, a robust syntactic analysis, based on
an approach such as (Giguet (1998)) must be
implemented to get as much information as
possible on the relations between the concepts.
In order to solve syntaxico-semantic
ambiguities we introduce two particular
relations: unknown and context. The unknown
relation means that the analyser detects a
relation but can not determine its exact nature.
The relation context means that two concepts
are present in the same utterance without any
other information.
Example:
Input sentences:
There are servers and telephone numbers.
</bodyText>
<sectionHeader confidence="0.564816" genericHeader="evaluation">
Results:
</sectionHeader>
<bodyText confidence="0.8142432">
concept([server]) concept([telephone,
number])
relation(context, [server], [telephone,
number])
The natural language generation unit recovers
the vocabulary necessary to the generation of
sentences related to the domain thanks to the
interpreter, which keeps the link between the
concepts of CM and the vocabulary of the
description.
</bodyText>
<subsubsectionHeader confidence="0.87123">
3.2.2 Modification of the rational unit
</subsubsectionHeader>
<bodyText confidence="0.99998375">
In order to increase the reasoning capabilities
of the rational unit so that it can direct the
construction of the semantic model as well as
the dialogue with the knowledge engineer, we
add the logical axioms and the primitive
actions that we defined in section 2. The
rational unit should then not be rebuilt but
rather updated.
</bodyText>
<subsubsectionHeader confidence="0.5512935">
3.2.3 Modification of the knowledge
management unit
</subsubsectionHeader>
<bodyText confidence="0.99999002631579">
The main modifications concern this module.
We extend the language of representation of
the model with the primitives of the CM.
In order to be able to insert a new knowledge
in the model, we add the four basic operations.
The original identification function is modified
to take into account the modification of the
knowledge representation language.
The second function builds the hierarchies by
using the structure of the concepts. For
example, “ server for employment ” and
“server for weather forecast” belong to the
same hierarchy since they are two “servers”.
They are generalised by the concept “server”.
The third function places relations between
two concepts and their qualifying common
part. For example, “server for employment”
and “employment theme” have the common
part “employment”.
The last one is a transfer function between the
result of interpretation and CM.
The organisation algorithm of the model tries
to instantiate the initial situations of the
diagrams in a definite order. This order
depends of the priority associated to each
diagram. The priority is given according to the
transformations carried out by the diagram: the
more significant the transformations, the
weaker the priority. When a situation is
validated, the corresponding formulae are
injected into the rational unit. This one then
takes over to calculate a question. Following
the answer of the knowledge engineer, a new
knowledge is asserted and the process starts
again from the beginning. When no diagram is
applicable, the algorithm stops and the
knowledge engineer is provided with the
model.
</bodyText>
<sectionHeader confidence="0.999715" genericHeader="conclusions">
4 Conclusion
</sectionHeader>
<bodyText confidence="0.999951952380953">
We define a methodology of semantic
modelling of a domain. It is based on
conceptual diagrams that formalise the
incremental evolutions of the structure of the
semantic model during its construction. A
dialogue with the knowledge engineer directs
the application of these diagrams.
We also formalise the use of our methodology
within a theory of communicating rational
agents. This specification provides the rational
agent with new reasoning capabilities, which
aim at building a semantic model by
questioning the knowledge engineer and by
applying the conceptual diagrams according to
the principles of our methodology.
We thus open prospects for automation since
effective agents implementing this type of
theory are already operational like, for
example, those resulting from Artimis
technology (Sadek et al. (1997), Sadek
(1999)).
</bodyText>
<sectionHeader confidence="0.99839" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999655844444444">
Bourigault D. (1994) Lexter, un logiciel
d’Extraction de Terminologie. Application a
l’acquisition a partir de textes. Acole des Hautes
Atudes en Sciences Sociales, Paris.
Cohen P.R. and Levesque H.J. (1990) Intention is
choice with commitment, Artificial Intelligence
42(2-3):213-262.
Delisle S. (1996) Le Traitement Automatique du
Langage Naturel au Service de l&apos;Ingenieur de la
Connaissance : le Syst6me READER.
International Conference on Natural Language
Processing and Industrial Applications, Moncton
(New-Brunswick, Canada).
Giguet E. (1998) Methode pour l’analyse
automatique de structures formelles sur
documents multilingues. Th6se de Doctorat
Informatique, Universite de Caen, France.
Mikheev A. and Finch S. (1995) Towards a
Workbench for Acquisition of Domain
Knowledge from Natural Language. Proceedings
of EACL’95, Dublin, Ireland.
Paris C. and Vander Linden K. (1996) Building
Knowledge Bases for the Generation of Software
Documentation, COLING&apos;96, University of
Copenhagen, Denmark.
Sadek M.D. (1991) Attitudes mentales et
interaction rationnelle : vers une theorie formelle
de la communication, Th6se de Doctorat
Informatique, Universite de Rennes I, France.
Sadek M.D., Bretier P., and Panaget F. (1997)
ARTIMIS: Natural Dialogue Meets Rational
Agency, IJCAI-97, Japan.
Sadek D. (1999) Design Considerations on
Dialogue Systems: From Theory to Technology –
The Case of Artimis- Proceedings of the ESCA
TR Workshop on Interactive Dialogue for
Multimodal Systems (IDS’99), Kloster Irsee,
Germany.
Van Heijst G., Schreiber A.TH., and Wielinga B.J
(1997) Using Explicit Ontologies in KBS
Development, International Journal of Human-
Computer Studies, 42(2/3) : 183-292.
Wielinga B., Schreiber A., and Breuker J. (1992)
KADS: A Modelling Approach to Knowledge
Engineering. Knowledge Acquisition 4(1):5-53.
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.331442">
<title confidence="0.626947">Rational Agent for the Construction of a Semantic PAUTRET</title>
<author confidence="0.386842">I Rennes</author>
<affiliation confidence="0.981349">rue de BP</affiliation>
<address confidence="0.954961">Lannion, France,</address>
<email confidence="0.975319">Vincent.Pautret@enssat.fr</email>
<abstract confidence="0.998786166666667">This paper presents a methodology that aims at building knowledge models from a natural language description of a domain. Our methodology is based on the establishment of a dialogue with the knowledge engineer of an application. This dialogue is motivated by the Semantic Differentiation Process, which solves problems related to acquisition and modelling. Moreover, the dialogue can be naturally formalised within a theory of communicating rational agents. We can thus consider a more complete automation of the process of modelling and show how to integrate our methodology into this type of theory.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>D Bourigault</author>
</authors>
<title>Lexter, un logiciel d’Extraction de Terminologie. Application a l’acquisition a partir de textes. Acole des Hautes Atudes en Sciences Sociales,</title>
<date>1994</date>
<location>Paris.</location>
<contexts>
<context position="9579" citStr="Bourigault (1994)" startWordPosition="1490" endWordPosition="1491">adding relation R on C and by removing R between subconcepts of C and C’). With a negative answer the dialogue proceeds as follows: Q2 – What are the different concepts that have this relation R with concept C’? The model then evolves to situation 2. Figure 2: Property Extraction diagram Figure 2 shows the Property Extraction diagram, which belongs to the third family of diagrams (modelling stage). It is intended to extract a particular property of a concept from its structure. From the structural viewpoint, a definition of a concept could be compared to the complex terms extracted by LEXTER (Bourigault (1994)). A concept comprises a word in head position (the headword) and a list of qualifications. Each qualification is recursively composed of a word and a list of qualifications. For example, a specialised server for weather forecast has the word server as headword and weather forecast and specialised as qualifications. In the context of Initial situation C C’ ... ... ... ... C1 Cf Cg Ch Cn R R R C’ Final situation 1 C ... ... ... ... C1 Cf Cg Ch Cn ... Ch Final situation 2 C C’ ... Cg ... R R R C1 ... Ck: concept R: relation Cf Cn : relation : subconcept relation P C property ... ... P Pf Pn : re</context>
</contexts>
<marker>Bourigault, 1994</marker>
<rawString>Bourigault D. (1994) Lexter, un logiciel d’Extraction de Terminologie. Application a l’acquisition a partir de textes. Acole des Hautes Atudes en Sciences Sociales, Paris.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P R Cohen</author>
<author>H J Levesque</author>
</authors>
<title>Intention is choice with commitment,</title>
<date>1990</date>
<journal>Artificial Intelligence</journal>
<pages>42--2</pages>
<contexts>
<context position="13298" citStr="Cohen and Levesque (1990)" startWordPosition="2118" endWordPosition="2121">ication while following the interactive principles of our methodology. 2.1 The theory of rational agency The whole theory of rational agency is expressed in a homogeneous multimodal logic of mental attitudes and actions (or events). Modal operator of belief Bi satisfies a KD45- model. The resulting agents are fully introspective and have consistent beliefs. Formula Bip is read “property p is a logical consequence of the beliefs of agent i”. The mental attitude of intention is defined as a complex combination of primitive mental attitudes like belief and choice1, as a relatively similar way as Cohen and Levesque (1990). Formula Iip is read “agent i intends to bring about proposition p”. In order to reason about action, two modal operators are introduced, a being an action expression and 0 a formula: Feasible(a,0) means that a can take place and if it does, 0 1 For sake of simplicity, we only focus on belief and intention. For more details, see Sadek (1991). telephone number theme weather employment mail-order forecast possess property server applied, it must be done. The calculation of feasibility results from the axiom (1) of the theory. &lt;i,Facto_2&gt; P: Bi(initial_situation ∧ ¬relation(R,C,C’)) ∧ ∧k∈{1,É,n}</context>
</contexts>
<marker>Cohen, Levesque, 1990</marker>
<rawString>Cohen P.R. and Levesque H.J. (1990) Intention is choice with commitment, Artificial Intelligence 42(2-3):213-262.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Delisle</author>
</authors>
<title>Le Traitement Automatique du Langage Naturel au Service de l&apos;Ingenieur de la Connaissance : le</title>
<date>1996</date>
<booktitle>Syst6me READER. International Conference on Natural Language Processing and Industrial Applications,</booktitle>
<location>Moncton (New-Brunswick, Canada).</location>
<contexts>
<context position="1320" citStr="Delisle (1996)" startWordPosition="202" endWordPosition="203">ocess of modelling and show how to integrate our methodology into this type of theory. Introduction Knowledge Based Systems separate the semantic model - which handles the system knowledge - from the reasoning process - which uses this knowledge. The main advantage of this approach is that only the semantic model has to be changed to handle a different application domain. However, the creation of a semantic model for a given application is a manual process, which is difficult to automate (Paris and Vander Linden (1996)). Tools (Heijst et al. (1997)) or workbenches ((Mikheev and Finch (1995), (Delisle (1996)) already exist that aim at building semantic representations at the domain level (using the vocabulary of KADS (Wielinga et al. (1992)). With these tools and workbenches, conceptual knowledge models (like ontologies) independent of the application domain are built. However, the knowledge engineer task remains fastidious. One of the difficulties in completely automating the acquisition and modelling process comes from a lack of interaction with the knowledge engineer. In order to improve these interactions (and thus to facilitate modelling), we propose a methodology based on a natural language</context>
</contexts>
<marker>Delisle, 1996</marker>
<rawString>Delisle S. (1996) Le Traitement Automatique du Langage Naturel au Service de l&apos;Ingenieur de la Connaissance : le Syst6me READER. International Conference on Natural Language Processing and Industrial Applications, Moncton (New-Brunswick, Canada).</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Giguet</author>
</authors>
<title>Methode pour l’analyse automatique de structures formelles sur documents multilingues.</title>
<date>1998</date>
<booktitle>Th6se de Doctorat Informatique, Universite de</booktitle>
<location>Caen, France.</location>
<contexts>
<context position="4576" citStr="Giguet (1998)" startWordPosition="703" endWordPosition="704">ntation language also offers the possibility to express abstract concepts (as a composition of concepts and relations of the network), as well as constraints and negative knowledge related to the concepts and relations of the network. 1.2 Basic tools for knowledge acquisition During the modelling process, which is based on dialogue, the knowledge engineer utterances are analysed and the relevant information has to be extracted from them. For this purpose, we use two tools to acquire knowledge from texts. The first tool is a robust morpho-syntactic analyser, which produces a syntagmatic graph (Giguet (1998)) where each node is a syntagm and each relation is a syntactic relation. A syntagmatic graph is produced for each utterance of the description. The semantic tool makes use of the results of the morpho-syntactic tool to produce a semantic representation of each utterance. Thanks to four basic operations, it integrates this representation into CM. The first operation identifies the concepts that are already known. The second one is related to generalisation and organises the concepts into hierarchies. The third one calculates the common characteristics to the concepts. Finally, the last one pla</context>
<context position="19842" citStr="Giguet (1998)" startWordPosition="3145" endWordPosition="3146">tus Prolog. 3.2 Guidelines for the integration into an Artimis dialogue agent We present, in this section, the needed modifications in order to integrate our methodology into an Artimis dialogue agent. 3.2.1 Modification of the two natural language components We have to modify the natural language interpretation unit at two levels. Firstly, the system must take into account all the words of the utterance in order to detect the new concepts. We make the assumption that the sentences are syntactically and semantically correct. Secondly, a robust syntactic analysis, based on an approach such as (Giguet (1998)) must be implemented to get as much information as possible on the relations between the concepts. In order to solve syntaxico-semantic ambiguities we introduce two particular relations: unknown and context. The unknown relation means that the analyser detects a relation but can not determine its exact nature. The relation context means that two concepts are present in the same utterance without any other information. Example: Input sentences: There are servers and telephone numbers. Results: concept([server]) concept([telephone, number]) relation(context, [server], [telephone, number]) The n</context>
</contexts>
<marker>Giguet, 1998</marker>
<rawString>Giguet E. (1998) Methode pour l’analyse automatique de structures formelles sur documents multilingues. Th6se de Doctorat Informatique, Universite de Caen, France.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Mikheev</author>
<author>S Finch</author>
</authors>
<title>Towards a Workbench for Acquisition of Domain Knowledge from Natural Language.</title>
<date>1995</date>
<booktitle>Proceedings of EACL’95,</booktitle>
<location>Dublin, Ireland.</location>
<contexts>
<context position="1303" citStr="Mikheev and Finch (1995)" startWordPosition="198" endWordPosition="201">mplete automation of the process of modelling and show how to integrate our methodology into this type of theory. Introduction Knowledge Based Systems separate the semantic model - which handles the system knowledge - from the reasoning process - which uses this knowledge. The main advantage of this approach is that only the semantic model has to be changed to handle a different application domain. However, the creation of a semantic model for a given application is a manual process, which is difficult to automate (Paris and Vander Linden (1996)). Tools (Heijst et al. (1997)) or workbenches ((Mikheev and Finch (1995), (Delisle (1996)) already exist that aim at building semantic representations at the domain level (using the vocabulary of KADS (Wielinga et al. (1992)). With these tools and workbenches, conceptual knowledge models (like ontologies) independent of the application domain are built. However, the knowledge engineer task remains fastidious. One of the difficulties in completely automating the acquisition and modelling process comes from a lack of interaction with the knowledge engineer. In order to improve these interactions (and thus to facilitate modelling), we propose a methodology based on a</context>
</contexts>
<marker>Mikheev, Finch, 1995</marker>
<rawString>Mikheev A. and Finch S. (1995) Towards a Workbench for Acquisition of Domain Knowledge from Natural Language. Proceedings of EACL’95, Dublin, Ireland.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C Paris</author>
<author>Vander Linden K</author>
</authors>
<title>Building Knowledge Bases for the Generation of Software Documentation, COLING&apos;96,</title>
<date>1996</date>
<institution>University of Copenhagen, Denmark.</institution>
<marker>Paris, K, 1996</marker>
<rawString>Paris C. and Vander Linden K. (1996) Building Knowledge Bases for the Generation of Software Documentation, COLING&apos;96, University of Copenhagen, Denmark.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M D Sadek</author>
</authors>
<title>Attitudes mentales et interaction rationnelle : vers une theorie formelle de la communication,</title>
<date>1991</date>
<booktitle>Th6se de Doctorat Informatique, Universite de Rennes I,</booktitle>
<contexts>
<context position="2254" citStr="Sadek (1991)" startWordPosition="341" endWordPosition="342">. One of the difficulties in completely automating the acquisition and modelling process comes from a lack of interaction with the knowledge engineer. In order to improve these interactions (and thus to facilitate modelling), we propose a methodology based on a natural language dialogue with the knowledge engineer. This methodology can be implemented into a rational agent. In this way, this agent is given capabilities of modelling by means of conceptual diagrams defined in our methodology. We show how to make this integration within the formal theory of communicating rational agents of Sadek (Sadek (1991), (Sadek et al. (1997))). Section 1 introduces the bases of the methodology. Section 2 explains how to integrate it into a theory of rational agents for its effective implementation. The last section presents the guidelines to implement our methodology into a rational agent. 1 Bases of the methodology The methodology aims at building a semantic model of a domain from a natural language description. It is based on three successive stages: the acquisition stage, the modelling stage, and the transfer stage. The acquisition stage consists of the analysis of each domain description utterance. A mor</context>
<context position="12599" citStr="Sadek (1991)" startWordPosition="2008" endWordPosition="2009">group together these properties under the same concept? N: The system applies here the Property Extraction diagram. K: Yes. S: Could you give the name of the concept? K: Theme. S: O.K. N: Then the system builds the final model. Figure 3: Example of a semantic model 2 Integration of the methodology into a rational agent The core of our methodology is the dialogue with the knowledge engineer. The communicative rational agents provide a theoretical framework that is particularly adapted to the formalisation of this dialogue. In this way, we extend the theory of rational agents proposed by Sadek (Sadek (1991)), thus giving the agents the ability to build a semantic model of an application while following the interactive principles of our methodology. 2.1 The theory of rational agency The whole theory of rational agency is expressed in a homogeneous multimodal logic of mental attitudes and actions (or events). Modal operator of belief Bi satisfies a KD45- model. The resulting agents are fully introspective and have consistent beliefs. Formula Bip is read “property p is a logical consequence of the beliefs of agent i”. The mental attitude of intention is defined as a complex combination of primitive</context>
<context position="16727" citStr="Sadek (1991)" startWordPosition="2653" endWordPosition="2654">ns and concepts identified in the conceptual diagram (cf. figure 1). Let us suppose that the modeller agent is configured in such a way that the conceptual diagram is applicable, i.e. Bi(initial_situation) can be derived from its mental state. Moreover, let us suppose that it can infer no knowledge in connection with relation(R, C, C’), i.e. it can only conclude (Bifi (relation(R, C, C’)). The instantiation of the axiom (4) thus generates the intention of the agent to know if the concepts C and C’ are or not linked by R. Then the traditional mechanisms of planning of the theory take over (cf. Sadek (1991)) and produce an act of dialogue aiming at requiring missing information to the knowledge engineer (cf. dialogue Q1 of section 1.3). If the answer to this question is positive, the axioms of rational behaviour of the theory involve Bi(relation(R, C, C’)). All the preconditions of the primitive action Facto_1 are then checked and the axioms (1) and (2) induce the execution of the first alternative of the conceptual diagram (Facto_1). The resulting mental state of the agent conforms to the final situation 1. If, on the contrary, the answer is negative, the agent acquires the knowledge: Bi(¬relat</context>
</contexts>
<marker>Sadek, 1991</marker>
<rawString>Sadek M.D. (1991) Attitudes mentales et interaction rationnelle : vers une theorie formelle de la communication, Th6se de Doctorat Informatique, Universite de Rennes I, France.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M D Sadek</author>
<author>P Bretier</author>
<author>F Panaget</author>
</authors>
<date>1997</date>
<booktitle>ARTIMIS: Natural Dialogue Meets Rational Agency, IJCAI-97,</booktitle>
<contexts>
<context position="2276" citStr="Sadek et al. (1997)" startWordPosition="343" endWordPosition="346">fficulties in completely automating the acquisition and modelling process comes from a lack of interaction with the knowledge engineer. In order to improve these interactions (and thus to facilitate modelling), we propose a methodology based on a natural language dialogue with the knowledge engineer. This methodology can be implemented into a rational agent. In this way, this agent is given capabilities of modelling by means of conceptual diagrams defined in our methodology. We show how to make this integration within the formal theory of communicating rational agents of Sadek (Sadek (1991), (Sadek et al. (1997))). Section 1 introduces the bases of the methodology. Section 2 explains how to integrate it into a theory of rational agents for its effective implementation. The last section presents the guidelines to implement our methodology into a rational agent. 1 Bases of the methodology The methodology aims at building a semantic model of a domain from a natural language description. It is based on three successive stages: the acquisition stage, the modelling stage, and the transfer stage. The acquisition stage consists of the analysis of each domain description utterance. A morpho-syntactic analysis</context>
<context position="18384" citStr="Sadek et al. (1997)" startWordPosition="2923" endWordPosition="2926">imitive action Facto_2 can then be carried out and leads to a mental state that conforms to the final situation 2. 3 Integration into an operational system 3.1 The Artimis technology The Artimis technology of France Telecom R&amp;D provides a generic framework to instantiate intelligent dialoguing agents. Such agents can interact cooperatively in natural language with human users. Artimis software is composed of four main modules: a rational unit (which is the kernel of the system), a natural language interpretation unit, a natural language generation unit, and a domain knowledge management unit (Sadek et al. (1997), Sadek (1999)). The rational unit conveys the agent the ability to dialogue and to reason about knowledge and action. The natural language interpretation unit uses island-driven parsing and semantic completion (Sadek et al. (1997)). Island-driven parsing means that small syntactic structures in the text are spotted, with as few range dependencies as possible. The semantic completion builds a well-formed logical formula with the result of the parse. The natural language generation unit verbalises dialogue acts produced by the rational unit. Finally, the domain knowledge management unit contain</context>
</contexts>
<marker>Sadek, Bretier, Panaget, 1997</marker>
<rawString>Sadek M.D., Bretier P., and Panaget F. (1997) ARTIMIS: Natural Dialogue Meets Rational Agency, IJCAI-97, Japan.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Sadek</author>
</authors>
<title>Design Considerations on Dialogue Systems: From Theory to Technology – The Case of Artimis-</title>
<date>1999</date>
<booktitle>Proceedings of the ESCA TR Workshop on Interactive Dialogue for Multimodal Systems (IDS’99),</booktitle>
<location>Kloster Irsee, Germany.</location>
<contexts>
<context position="18398" citStr="Sadek (1999)" startWordPosition="2927" endWordPosition="2928">2 can then be carried out and leads to a mental state that conforms to the final situation 2. 3 Integration into an operational system 3.1 The Artimis technology The Artimis technology of France Telecom R&amp;D provides a generic framework to instantiate intelligent dialoguing agents. Such agents can interact cooperatively in natural language with human users. Artimis software is composed of four main modules: a rational unit (which is the kernel of the system), a natural language interpretation unit, a natural language generation unit, and a domain knowledge management unit (Sadek et al. (1997), Sadek (1999)). The rational unit conveys the agent the ability to dialogue and to reason about knowledge and action. The natural language interpretation unit uses island-driven parsing and semantic completion (Sadek et al. (1997)). Island-driven parsing means that small syntactic structures in the text are spotted, with as few range dependencies as possible. The semantic completion builds a well-formed logical formula with the result of the parse. The natural language generation unit verbalises dialogue acts produced by the rational unit. Finally, the domain knowledge management unit contains a representa</context>
</contexts>
<marker>Sadek, 1999</marker>
<rawString>Sadek D. (1999) Design Considerations on Dialogue Systems: From Theory to Technology – The Case of Artimis- Proceedings of the ESCA TR Workshop on Interactive Dialogue for Multimodal Systems (IDS’99), Kloster Irsee, Germany.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Van Heijst</author>
<author>Schreiber A TH</author>
<author>B J Wielinga</author>
</authors>
<title>Using Explicit Ontologies</title>
<date>1997</date>
<booktitle>in KBS Development, International Journal of HumanComputer Studies, 42(2/3) :</booktitle>
<pages>183--292</pages>
<marker>Van Heijst, TH, Wielinga, 1997</marker>
<rawString>Van Heijst G., Schreiber A.TH., and Wielinga B.J (1997) Using Explicit Ontologies in KBS Development, International Journal of HumanComputer Studies, 42(2/3) : 183-292.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Wielinga</author>
<author>A Schreiber</author>
<author>J Breuker</author>
</authors>
<title>KADS: A Modelling Approach to Knowledge Engineering.</title>
<date>1992</date>
<journal>Knowledge Acquisition</journal>
<pages>4--1</pages>
<contexts>
<context position="1455" citStr="Wielinga et al. (1992)" startWordPosition="221" endWordPosition="224">arate the semantic model - which handles the system knowledge - from the reasoning process - which uses this knowledge. The main advantage of this approach is that only the semantic model has to be changed to handle a different application domain. However, the creation of a semantic model for a given application is a manual process, which is difficult to automate (Paris and Vander Linden (1996)). Tools (Heijst et al. (1997)) or workbenches ((Mikheev and Finch (1995), (Delisle (1996)) already exist that aim at building semantic representations at the domain level (using the vocabulary of KADS (Wielinga et al. (1992)). With these tools and workbenches, conceptual knowledge models (like ontologies) independent of the application domain are built. However, the knowledge engineer task remains fastidious. One of the difficulties in completely automating the acquisition and modelling process comes from a lack of interaction with the knowledge engineer. In order to improve these interactions (and thus to facilitate modelling), we propose a methodology based on a natural language dialogue with the knowledge engineer. This methodology can be implemented into a rational agent. In this way, this agent is given capa</context>
</contexts>
<marker>Wielinga, Schreiber, Breuker, 1992</marker>
<rawString>Wielinga B., Schreiber A., and Breuker J. (1992) KADS: A Modelling Approach to Knowledge Engineering. Knowledge Acquisition 4(1):5-53.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>