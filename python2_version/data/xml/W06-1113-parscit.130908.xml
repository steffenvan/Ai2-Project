<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<title confidence="0.988255">
Variants of tree similarity in a Question Answering task
</title>
<author confidence="0.997916">
Martin Emms
</author>
<affiliation confidence="0.861070333333333">
Dept of Computer Science
Trinity College
Ireland
</affiliation>
<sectionHeader confidence="0.980709" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.9999581">
The results of experiments on the appli-
cation of a variety of distance measures
to a question-answering task are reported.
Variants of tree-distance are considered,
including whole-vs-sub tree, node weight-
ing, wild cards and lexical emphasis. We
derive string-distance as a special case
of tree-distance and show that a particu-
lar parameterisation of tree-distance out-
performs the string-distance measure.
</bodyText>
<sectionHeader confidence="0.999394" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.921219777777778">
This paper studies the deployment in a ques-
tion answering task of methods which assess the
similarity of question and answer representations.
Given questions such as
Q1 what does malloc return ?
Q2 What year did poet Emily Dickinson die?
and a collection of sentences (eg. a computer man-
ual, a corpus of newspaper articles), the task is to
retrieve the sentences that answer the question, eg.
</bodyText>
<subsubsectionHeader confidence="0.399911">
A1 the malloc function returns a null pointer
</subsubsectionHeader>
<bodyText confidence="0.963022153846154">
A2 In 1886 , poet Emily Dickinson died in Amherst, Mass
One philosophy for finding answers to ques-
tions would be to convert questions and candidate
answers into logical forms and to compute answer-
hood by apply theorem-proving methods. Another
philosophy is to assume that the answers are simi-
lar to the questions, where similarity might be de-
fined in many different ways. While not all an-
swers to all questions will be similar, there’s an
intuition that most questions can be answered in
a way which shares quite a bit with the question,
and that accordingly with a large enough corpus, a
similarity-based approach could be fruitful.
</bodyText>
<sectionHeader confidence="0.995647" genericHeader="introduction">
2 Distance Measures
</sectionHeader>
<bodyText confidence="0.999686333333333">
In pursuing such a similarity-based approach to
question-answering, the key decisions to be made
are the representations of the questions and an-
swers, and relatedly, distance measures between
them.
We will primarily be concerned with measures
which refer to a linguistic structure assigned to a
word sequence – variants of tree-distance, but we
will also consider string-distance.
</bodyText>
<subsectionHeader confidence="0.913287">
2.1 Tree Measures
</subsectionHeader>
<bodyText confidence="0.9999279375">
Following (Zhang and Shasha, 1989), one can ar-
rive at tree-distance in the following way. Given
source and target ordered, labelled trees, S and
T, consider the set H(S, T) of all 1-to-1 par-
tial maps, σ, from S into T, which are homo-
morphisms preserving left-to-right order and an-
cestry1. Let the alignment, σ′, be the enlarg-
ment of the map σ with pairs (Si, A) for nodes
Si E� dom(σ) and (A,Tj) for nodes Tj E� ran(σ).
Let D define deletion costs for the (Si, A), Z inser-
tion costs for the (A, Tj), and R replacement costs
for the (Si, Tj) which represent nodes with non-
identical labels. Then a total cost for the align-
ment, C(σ′) can be defined as the sum of these
components costs, and the tree distance can then
be defined as the cost of the least-cost map:
</bodyText>
<equation confidence="0.864342">
A(S,T) = min(IC(σ′) I σ E H(S,T)1)
</equation>
<bodyText confidence="0.938041857142857">
For any 3 trees, T1, T2, T3, the triangle inequal-
ity holds A(T1, T3) G A(T1, T2) + A(T2, T3).
1If Tj1 = a(Si1) and Tj2 = a(Si2) then (i) Si1 is to the
left of Si2 iff Tj1 is to the left of Tj2 and (ii) Si1 is a descen-
dant of Si2 iff Tj1 is a descendant of Tj2, with descendency
understood as the transitive closure of the daugher-mother re-
lation.
</bodyText>
<page confidence="0.901214">
100
</page>
<note confidence="0.716010166666667">
Proceedings of the Workshop on Linguistic Distances, pages 100–108,
Sydney, July 2006. c�2006 Association for Computational Linguistics
Briefly the argument is as follows. Given map-
pingsQ ∈ H(T1,T2), and τ ∈ H(T2,T3), Qoτ ∈
H(T1,T3)2, so (Q o τ)′ is an alignment between
T1 and T3, and A(T1, T3) ≤ C((Q o τ)′). The
</note>
<bodyText confidence="0.985297634146342">
cost of the composition is less than the sum of the
costs of the composed maps: Q’s insertions and re-
placements contribute only if they fall in dom(τ),
τ’s deletions and replacements contribute only if
they act on ran(Q).
From this basic definition, one can depart in
a number of directions. First of all, there is a
part-vs-whole dimension of variation. Where
A(S, T) gives the cost of aligning the whole
source tree S with the target T, one can consider
variants where one minimises over a set of sub-
parts of S. This is equivalent to letting all but the
nodes belonging to the chosen sub-part to delete
at zero cost3. Let δ(S,T) be the sub-tree dis-
S(S, T), be the sub-traversal distance,
in which sub-traversals of the left-to-right, post-
order traversal of S are considered. As for A, the
�
triangle inequality holds for δ and δ – one needs
to extend the notion of alignment with a set of free
�
deletions. Unlike A, δ and δ are not symmetric.
All of A, δ and δ� are implicitly parametrised by
the cost functions, D, I and R. In the work below
4 other parameters are explored
Node weighting W: this is a function which
assigns a real-number weight to each each
node. The cost function then refers to the
weights. In experiments reported below,
Dw((Si, w), A) = w, Iw(A, (Tj, w)) = w,
Rw((Si, ws), (Tj, wt)) = max(ws, wt), if
Si and Tj have unequal labels. The experi-
ments reported below use 2 weighting func-
tion STR, and LEX. STR assign weights
according to the syntactic structure, via a
classification of nodes as heads vs. comple-
ments vs. adjuncts vs. the rest, with es-
sentially adjuncts given 1/5th the weights of
heads and complements, and other daughters
1/2, via essentially the following top-down
algorithm:
</bodyText>
<construct confidence="0.687487">
Str(node, rank) :
assign weight 1/rank to node
for each daughter d
2Vx E T1Vz E T3((x, z) E σ o τ iff 3y E T2((x, y) E
σ, (y, z) E τ)
</construct>
<footnote confidence="0.798059">
3Note that if one minimises also over sub-parts of the tar-
get, you do not get an interesting notion, as the minimum will
inevitably involve at most one node of source and target.
</footnote>
<construct confidence="0.679572">
if (d is head or complement){
</construct>
<equation confidence="0.986385625">
assign weight= 1/rank,
Str(rank, d) }
else if (d is adjunct) {
assign weight= 1/(5 x rank),
Str(5 * rank, d)}
else {
assign weight= 1/(2 x rank)
Str(2 * rank, d) }
</equation>
<bodyText confidence="0.997813413793104">
LEX is a function which can be composed
with STR, and scales up the weights of leaf
nodes by a factor of 3.
Target wild cards T(∗): this is a function which
classifies certain target sub-trees as wild-
card. If source Si is mapped to target Tj, and
Tj is the root of a wild-card tree, all nodes
within the Si sub-tree can be deleted for 0
cost, and all those within the Tj sub-tree can
be inserted for 0 cost. A wild card np tree
might can be put in the position of the gap in
wh-questions, allowing for example what is
memory allocation, to closely match any sen-
tences with memory allocation as their ob-
ject, no matter what their subject – see Fig-
ure 3.
Source self-effacers S/A: this is a function
which classifies source sub-trees as self-
effacers. Such trees can be deleted in
their entirety for zero cost. If S/A clas-
sifies all source sub-trees as self-effacing,
then A(S/A) will coincide with notion of
’tree-distance with Cut’ given in (Zhang and
Shasha, 1989).
Target self-inserters A/T: this is a function
which classifies certain target sub-trees as
self-inserters. Such trees can be inserted in
their entirety for zero cost. A candidate might
be optional adjuncts.4
</bodyText>
<subsectionHeader confidence="0.999552">
2.2 Sequence Measures
</subsectionHeader>
<bodyText confidence="0.999740142857143">
The tree-distance measures work with an elabora-
tion of the original questions and answers. (Lev-
enshtein, 1966) defined the 1 dimensional precur-
sor of tree distance, which works directly on the
2 word sequences for the answer and question.
For two sequences, s, t, and vertical (or hori-
zontal) tree encodings l tree(s) and l tree(t), if
</bodyText>
<footnote confidence="0.84350625">
4Thus a target wild-card is somewhat like a target self-
effacer, but one which also licenses the classification of a
matched source sub-tree as a being self-effacer.
tance. Let
</footnote>
<page confidence="0.9962265">
101
102
</page>
<bodyText confidence="0.99204">
structural weighting STR has been used: size of
a node reflects the weight. 4 of the nodes in the
source represent the use of an auxiliary verb, and
receive low weight, changing the optimum match
to one covering the whole source tree. There is
some price paid in matching the dissimilar subject
nps.
</bodyText>
<figure confidence="0.999161542857143">
s
sub tree matching dist=5.0
np
n
lhs be rhs
vp
s
process
vp
np
vp
lhs
call rhs pro lhs be
rhs
s
s
sub tree matching dist=3.6
np something
np
np
vp
np
n
n
n
n
n
n
n lhs be rhs pro
memory
allocation
memory
allocation
process vp something
vp
</figure>
<figureCaption confidence="0.944125">
Figure 1: Sub tree example
</figureCaption>
<figure confidence="0.881897666666667">
lhs call rhs lhs be rhs
np
np
</figure>
<bodyText confidence="0.992185923076923">
we define H(s, t), as A(l tree(s), l tree(t)), and
7r(s,t), as S(l tree(s),l tree(t)), then H and 7r
coincide with the standard sequence edit distance
and sub-sequence edit distance. As special cases
of A and S, H and 7r inherit the triangle inequality
property.
To illustrate some of the tree-distance defini-
tions, in the following example, a A distance of
3 between 2 trees is obtained, assuming unit costs
for deletions (shown in red and double outline), in-
sertions (shown in green and double outline), and
substitutions (shown in blue and linked with an ar-
row):
</bodyText>
<figure confidence="0.993138777777778">
a
b
b
b
a
a b b a
whole tree matching dist=3.0
a a
c
</figure>
<bodyText confidence="0.988276916666667">
Note also in this picture that nodes that are mapped
without a relabelling are shown at the same hori-
zontal level, with no linking arrow.
Figure 1 shows a sub-tree example – S. The
source tree nodes which do not belong to the cho-
sen sub-tree are shown in grey. The lowest vp sub-
tree in the source is selected, and mapped to the
vp in the target. The remaining target nodes must
be inserted, but this costs less than a match which
starts higher and necessitates some deletions and
substitutions.
Figure 2 shows a sub-tree example where the
</bodyText>
<figure confidence="0.5036165">
n
memoryallocation
</figure>
<figureCaption confidence="0.991437">
Figure 2: Structurally weighted example
</figureCaption>
<bodyText confidence="0.66284675">
Figure 3 continues the example, but this time
in the subject position there is a sub-tree which is
classified as a wild-card np tree, and it matches at
0 cost with the subject np in the source tree.
</bodyText>
<figure confidence="0.994365045454545">
process
n lhs be rhs
np vp np_wild
s
lhs
call rhs be
memoryallocation
vp
n
np
n
n
something
pro
memoryallocation
n
s
rhs lhs
vp
np
n
n
</figure>
<figureCaption confidence="0.8652395">
sub tree matching dist=1.6
Figure 3: Wild-card example
</figureCaption>
<bodyText confidence="0.947320333333333">
The basis of the algorithm used to calculate A
is the ZhangShasha algorithm (Zhang and Shasha,
1989): the Appendix summarises it. The im-
</bodyText>
<equation confidence="0.964386">
n
n
n
n
n
memoryallocation
</equation>
<bodyText confidence="0.999527666666667">
plementation is based on code implementing A
(Fontana et al., 2004), adapting it to allowing for
the S and S� variants and T(∗), S/A, and A/T pa-
rameters, and to generate the human-readable dis-
plays of the alignments (such as seen in figures 1,2
and 3).
</bodyText>
<subsectionHeader confidence="0.977467">
2.3 Order invariant measures
</subsectionHeader>
<bodyText confidence="0.990550813953488">
Assessing answer/question similarity by variants
of tree distance or sequence edit-distance, means
that distance will not be word-order invariant.
There are also measures which are word-order in-
variant, sometimes called token-based measures.
These measures are usually couched in a vector
representation of questions and answers, where
vector dimensions are words from (some cho-
sen enumeration) of words (see (Salton and Lesk,
1968)). In the simplest case the values on each
dimensions are in {0, 1}, denoting presence or ab-
sence of a word. If • is vector product and aw
is the set of words in a sequence a, then a� • b�=
|aw ∩ bw|, for the binary vectors representing aw,
bw. Three well known measures based on this are
given below, both in terms vectors, and for binary
vectors, the equivalent formulation with sets:
These measure similarity, not difference, ranging
for 1 for identical aw,bw, to 0 for disjoint. In
the binary case, Dice/Jaccard similarity can be
related to the alignment-based, difference count-
ing perspective of the edit-distances. If we de-
fine Hw(a, b) as |aw ∪ bw |− |aw ∩ bw |– the size
of the symmetric difference between aw and bw –
this can be seen as a set-based version of edit dis-
tance5, which (i) considers mappings on the sets of
words, aw, bw, not the sequences a, b, and (ii) sets
replacement cost to infinity. A difference measure
(ranging from 0 for identical aw,bw to 1 for dis-
joint) results if Hw(a, b) is divided by |aw |+ |bw|
(resp. |aw ∪ bw|) and this difference measures will
give the reverse of a ranking by Dice (resp. Jac-
card) similarity.
The Cosine is a measure of the angle be-
�
binary-case to the alignment-based, difference-
counting perspective of the edit-distances: di-
viding Hw(a, b), the symmetric difference, by
|aw|.5|bw|.5 does not give a measure with maxi-
mum value 1 for the disjoint case, and does not
give the reverse of a ranking by Cosine similarity.6
Below we shall use θ to denote the Cosine dis-
tance.
</bodyText>
<sectionHeader confidence="0.994305" genericHeader="method">
3 The Question Answering Tasks
</sectionHeader>
<bodyText confidence="0.998283416666667">
For a given representation r (parse trees, word se-
quences etc.), and distance measure d, we shall
generically take a Question Answering by Dis-
tance (QAD) task to be given by a set of queries,
Q, and for each query q, a corpus of potential an-
swer sentences, CORq. For each a ∈ CORq, the
system determines d(r(a), r(q)), the distance be-
tween the representations of a and q, then uses this
to sort CORq into Aq. This sorting is then evalu-
ated in the following way. If a, ∈ Aq is the correct
answer, then the correct-answer-rank is the rank
of a, in Aq:
</bodyText>
<equation confidence="0.477147">
 |{a ∈ Aq : d(r(a), r(q)) ≤ d(r(a,), r(q))} |
</equation>
<bodyText confidence="0.907198545454545">
whilst the correct-answer-cutoff is the proportion
of Aq cut off by the correct answer a,:
 |{a E A9 : d(r(a), r(q)) &lt; d(r(a.), r(q))}  |/  |A9 |
Lower values for this connote better performance.
Another figure of merit is the reciprocal correct-
answer-rank. Higher values of this connote better
performance.
Note the notion of answerhood is not one requir-
ing answers to be the sub-sentential phrases asso-
ciated with wh-phrases in the question. Also not
all the questions are wh-questions.
Note also that the set of candidate answers
CORq is sorted by the answer-to-query distance,
d(r(a), r(q)), not the query-to-answer distance,
d(r(q), r(a)). The intuition is that the queries are
short and the answers longer, with sub-part that re-
ally contains the answer.
The performance of some of the above men-
tioned distance measures on 2 examples of QAD
tasks has been measured:
GNU Library Manual QAD Task: in
this case Q is a set of 88 hand-created
</bodyText>
<figure confidence="0.544526">
Dice 2(d • b)/(d •d) + ( b • b))
= 2(|aw ∩ bw|)/(|aw |+ |bw|)
Jaccard (d •b)/(d • d) + b • b − a�• b)
= (|aw ∩ bw|)/(|aw ∪ bw)
Cosine (d •b)/(d • d).5((b(••b).5
= (|aw ∩ bw|)/((|aw|)0.5(|bw|)0.5)
</figure>
<footnote confidence="0.710221">
tween the vectors d, b, and is not relatable in the
6if the vectors are normalised by their length, then you
511&apos;(a, b) could be equivalently defined as |(d −9)|2 can show |(d&amp;quot;/|&amp;quot;a |− �b/ |b|)|2 reverses the Cosine ranking
</footnote>
<page confidence="0.998584">
103
</page>
<bodyText confidence="0.99995906122449">
queries, and CORA, shared by all the
queries, is the sentences of the manual
of the GNU C Library7 ( |CORA |^
31, 000).
The TREC 11 QAD task: In this
case Q was the 500 questions of the
TREC11 QA track (Voorhees and Buck-
land, 2002), whose answers are drawn
from a large corpus of newspaper arti-
cles. CORA was taken to be the sen-
tences of the top 50 from the top-1000
ranking of articles provided by TREC11
for each question ( |CORA |^ 1000).
Answer correctness was determined us-
ing the TREC11 answer regular expres-
sions.
For the tree-distance measures, 2 parsing sys-
tems have been used. For convenience of refer-
ence, we will call the first parser, the trinity parser.
This is a home-grown parser combining a disam-
biguating part-of-speech tagger with a bottom-up
chartparser, refering to CFG-like syntax rules and
a subcategorisation system somewhat in a catego-
rial grammar style. Right-branching analyses are
prefered and a final selection of edges from all
available is made using a leftmost/longest selec-
tion strategy – there is always an output regardless
of whether there is a single input-encompassing
edge. Preterminal node labels are a combination
of a main functor with other feature terms, but the
replacement cost function R is set to ignore the
feature terms. Terminal node labels are base forms
of words, not inflected forms. For the structural
weighting algorithm, SER, the necessary node
distinctions are furnished directly by the parser for
vp, and by a small set of structure matching rules
for other structures (nps, pps etc). The structures
output for wh-questions are essentially deep struc-
tures, re-ordering an auxiliary inversion, and plac-
ing a tree in the position of a gap.
The Collins parser (Collins, 1999) (Model 3
variant) is a probabilistic parser, using a model of
trees as built top-down with a repertoire of moves,
learnt from the Penn Treebank. The preterminal
node labels are a combination of a Penn Tree-
bank label with other information pertaining to the
head/complement/adjunct distinction, but the re-
placement cost function R is set to ignore all but
the Penn Treebank part of the label. The termi-
</bodyText>
<footnote confidence="0.92459">
7http://www.gnu.org
</footnote>
<bodyText confidence="0.99984175">
nal node labels are inflected forms of words, not
base forms. For the structural weighting algo-
rithm, SER, the necessary node distinctions are
furnished directly by the parser. For the question
parses, a set of transformations is applied to the
parses directly given by the parser, which compa-
rable to the trinity parser, re-order auxiliary inver-
sion, and place a tree in the position of a gap.
</bodyText>
<sectionHeader confidence="0.980412" genericHeader="method">
4 Relating Parse Quality to Retrieval
Performance
</sectionHeader>
<bodyText confidence="0.920525217391304">
As a kind of sanity-check on the idea of the us-
ing syntactic structures in retrieving answers, we
performed some experiments in which we var-
ied the sophistication of the parse trees that the
parsers could produce, the expectation being that
the less sophisticated the parse, the less successful
would be question-answering performance. The
left-hand data in Table 1 refers to various reduc-
tions of the linguistic knowledge bases of the trin-
ity parser(thin50 = random removal of 50% subset,
manual = manual removal of a subset, flat = en-
tirely flat parses, gold = hand-correction of query
parses and their correct answers). The right-hand
data in Table 1 refers to experiments in which the
repertoire of moves available to the Collins parser,
as defined by its grammar file, was reduced to dif-
ferent sized random subsets of itself.
Figure 4 shows the empirical cumulative den-
sity function (ecdf) of the correct-answer-cutoff
obtained with the weighted sub-tree with wild
cards measure. For each possible value c of
correct-answer-cutoff, it plots the percentage of
queries with a correct-answer-cutoff ≤ c.
</bodyText>
<figureCaption confidence="0.85935175">
Figure 4: Success vs Cut-offfor different parse settings:
x = correct-answer-cutoff, y = proportion of queries whose
correct-answer-cutoff ≤ x (ranking by weighted sub-tree
with wild cards) (Library task)
</figureCaption>
<bodyText confidence="0.681584">
What these experiments show is that the ques-
</bodyText>
<figure confidence="0.998473444444444">
0.4 0.8
0 0.4
0 . 00
gold
full
thin50
manual
0.0 0.1 0.2 0.3 0.4 0.
flat
</figure>
<page confidence="0.995008">
104
</page>
<tableCaption confidence="0.9664425">
Table 1: Distribution of Correct Cutoff across query set Q in different parse settings. Left-hand data =
GNU task, trinity parser, right-hand data = TREC11 task, Collins parser
</tableCaption>
<table confidence="0.999689363636364">
Parsing 1st Qu. Median Mean 3rd Qu.
flat 0.1559 0.2459 0.2612 0.3920
manual 0.0215 0.2103 0.2203 0.3926
thin50 0.01418 0.02627 0.157 0.2930
full 0.00389 0.04216 0.1308 0.2198
gold 0.00067 0.0278 0.1087 0.1669
Parsing 1st Qu. Median Mean 3rd Qu.
55 0.3157 0.6123 0.5345 0.766400
75 0.02946 0.1634 0.2701 0.4495
85 0.0266 0.1227 0.2501 0.4380
100 0.01256 0.08306 0.2097 0.2901
</table>
<bodyText confidence="0.999003333333333">
tion answering performance is a function of the so-
phistication of the parses that the parsers are able
to produce.
</bodyText>
<sectionHeader confidence="0.972557" genericHeader="method">
5 Comparing Distance Measures
</sectionHeader>
<bodyText confidence="0.979497020833333">
Table 2 gives results on the Library task, using the
trinity parser, for some variations of the distance
measure.
Considering the results in 2, the best perform-
ing measure (mrr = 0.27) was the sub-traversal
distance, 6, assigning weights structurally using
STR, with lexical emphasis LEX, and treating a
gap position as an np wild card. This slightly out
performs the sub-tree measure, 6 (mrr = 0.25).
An alternative approach to discounting parts of
the answer tree, allowing any sub-tree of the an-
swer the option to delete for free (A(W = Str o
Lex, T(*) = np gap, S/A = b)) performs con-
siderably worse (mrr = 0.16). Presumably this is
because it is too enthusiastic to assemble the query
tree from disparate parts of the answer tree. By
�
comparison, 6 and 6 can only assembly the query
tree from parts of the answer tree that are more
closely connected.
�
The tree-distance measures (6, 6) using struc-
tural weights, lexical emphasis and wild cards
(mrr = 0.27) out-perform the sub-sequence mea-
sure, 7r (mrr = 0.197). It also out-performs the
cosine measure, 0 (mrr = 0.190). But 7r and 0
either out-perform or perform at about the same
level as the tree-distance measure if the lexical
emphasis is removed (see 6(W = Str, T (*) =
np gap), mrr = 0.160).
The tree-distance measure 6 works better if
structural weighting is used (mrr = 0.09) than
if it is not (mrr = 0.04).
The tree-distance measure 6 works better with
wild-cards (see 6(W = Str, T (*) = np gap),
mrr = 0.160, than without (see 6(W = Str),
mrr = 0.090).
Table 3 gives some results on the TREC11 task,
using the Collins parser. Fewer comparisons have
been made here.
The sub-traversal measure, using structural
weighting, lexical emphasis, and wild-cards per-
forms better (mrr = 0.150) than the sub-sequence
measure (mrr = 0.09), which in turn performs
better than the basic sub-traversal measure, with-
outh structural weighting, lexical emphasis or
wild-cards (mrr = 0.076). The cosine distance,
0, performed best.
</bodyText>
<sectionHeader confidence="0.999382" genericHeader="method">
6 Discussion
</sectionHeader>
<bodyText confidence="0.998115625">
For the parsers used, you could easily have 2
sentences with completely different words, and
very different meanings, but which would have the
same pre-terminal syntactic structure: the preter-
minal syntactic structure is not a function of the
meaning. Given this, it is perhaps not surpris-
ing that there will be cases that the sequence dis-
tance easily spots as dissimilar, but which the tree
distance measure, without any lexical emphasis,
will regard as quite similar, and this perhaps ex-
plains why, without any lexical emphasis, the tree-
distance measure performs at similar level to, or
worse than, the sub-sequence distance measure.
With some kind of lexical emphasis in place,
the tree-distance measures out-perform the sub-
sequence measures. We can speculate as to the
reason for this. There are two kinds of case
where the tree-distance measures could be ex-
pected to spot a similarity which the sequence-
distance measures will fail to spot. One is when
the question and answer are more or less simi-
lar on their head words, but differ in determiners,
auxiliaries and adjuncts. The sequence distance
measure will pay more of a price for these differ-
ences than the structurally weighted tree-distance.
Another kind of case is when the answer supplies
words which match a wild-card in the middle of
the query tree, as might happen for example in:
Q: what do child processes inherit from their par-
ent processes
A: a child process inherits the owner and permis-
sions from the ancestor process
</bodyText>
<page confidence="0.999554">
105
</page>
<tableCaption confidence="0.996507">
Table 2: For different distance measures (Library task, trinity parser), distrution of correct-answer-
cutoff, mean reciprocal rank mrr
</tableCaption>
<table confidence="0.998616545454546">
distance type 1st Qu. cutoff Mean mrr
Median
S(W = 5tr o Lex, T(*) = np gap) 8.630-05 8.944-04 2.460-02 0.270
S(W = 5tr o Lex, T(*) = np gap) 9.414e-05 1.428e-03 7.133e-02 0.255
7r bases 1.569e-04 2.087e-03 5.181e-02 0.197
0 bases 1.569e-04 8.630e-04 1.123e-02 0.190
A(W = 5tr o Lex,T(*) = np gap, 5/λ = b) 4.080e-04 9.352-03 5.853-02 0.160
S(W = 5tr, T(*) = np gap) 3.923e-04 1.964e-02 1.162e-01 0.160
S(W = 5tr) 5.060e-03 3.865e-02 1.303e-01 0.090
S 1.324e-03 1.046e-01 1.852e-01 0.040
A 8.398e-02 2.633e-01 3.531e-01 0.003
</table>
<tableCaption confidence="0.9903735">
Table 3: For different distance measures (TREC task, collins parser) the distribution of correct-answer-
cutoff and mean reciprocal rank (mrr)
</tableCaption>
<table confidence="0.9949235">
distance type 1st Qu. cutoff Mean mrr
Median
0 forms 7.847e-03 2.631e-02 1.068e-01 0.167
S(W = 5tr o Lex, T(*) = np gap) 8.452e-03 4.898e-02 1.558e-01 0.150
7r forms 2.113e-02 7.309-02 2.051e-01 0.092
S� 1.815e-02 1.030e-01 3.269e-01 0.076
</table>
<bodyText confidence="0.997114836734694">
The tree-distance measures will see these as
similar, but the sub-sequence measure will pay a
large price for words in the answer that match the
gap position in the query. Thus one can argue that
the use of structural weighting, and wild-card trees
in the query analysis will tend to equate things
which the sequence distance sees as dissimilar.
Another possible reason that the tree-distance
measure out-performs the sub-sequence measure
is that it may be able to distinguish things which
the sequence distance will tend to treat as equiva-
lent. A question might make the thematic role of
some entity very clear, but use very few significant
words as in:
what does malloc do ?
Using tree distance will favour answer sen-
tences with malloc as the subject, such as mal-
loc returns a null pointer. The basic problem for
the sequence distance here is that it does not have
much to work with and will only be able to parti-
tion the answer set into a small set of equivalence
classes.
These are speculations as to why tree-distance
would out-perform sequence distance. Whether
these equating and discriminating advantages
which theoretically should accrue to S, S� actually
will do so, will depend on the accuracy of the pars-
ing: if there is too much bad parsing, then we will
be equating that which we should keep apart, and
discriminating that which we should equate.
In the two tasks, the relationship between the
tree-distance measures and the order-invariant co-
sine measure worked out differently. The reasons
for this are not clear at the moment. One pos-
sibility is that our use of the Collins parser has
not yet resulted in good enough parses, especially
question parses – recall that the indication from
4 was that improved parse quality will give better
retrieval performance. Also it is possible that rel-
ative to the queries in the Library task, the amount
of word-order permutation between question and
answer is greater in the TREC task. This is also
indicated by the fact that on the TREC task, the
sub-sequence measure, 7r, falls considerably be-
hind the cosine measure, 0, whereas for the Li-
brary task they perform at similar levels.
Some other researchers have also looked at
the use of tree-distance measures in semantically-
oriented tasks. Punyakonok(2004) report work
</bodyText>
<page confidence="0.994897">
106
</page>
<bodyText confidence="0.999960323529412">
using tree-distance to do question-answering on
the TREC11 data. Their work differs from that
presented here in several ways. They take the
parse trees which are output by Collins parser and
convert them into dependency trees between the
leaves. They compute the distance from query to
the answer, rather than from answer to query, us-
ing essentially the variant of tree-distance that al-
lows arbitrary sub-trees of the target to insert for
zero-cost. Presumably this directionality differ-
ence is not a significant one, and with distances
calculated from answers to queries, this would cor-
respond to the variant that allows arbitrary source
sub-trees to delete with zero cost. The cost func-
tions are parameterised to refer in the case of wild-
card replacements to (i) information derived from
Named Entity recognisers so different kinds of wh
wild-cards can be given low-cost replacment with
vocabulary categorised as belong to the right kind
by NE recognition and (ii) base-form information.
There is no way to make a numerical compar-
ison because they took a different answer corpus
CORA – the articles containing the answers sug-
gested by TREC11 participants – and a different
criterion of correctness – an answer was correct if
it belonged to an article which the TREC11 adju-
dicators judges to contain a correct answer.
Their adaptation of cost functions to refer to es-
sentially semantic annotations of tree nodes is an
avenue we intend to explore in future work. What
this paper has sought to do is to investigate intrin-
sic syntactic parameters that might influence per-
formance. The hope is that these parameters still
play a role in an enriched system.
</bodyText>
<sectionHeader confidence="0.996359" genericHeader="conclusions">
7 Conclusion and Future Work
</sectionHeader>
<bodyText confidence="0.999896739130435">
For two different parsers, and two different
question-answering tasks, we have shown that im-
proved parse quality leads to better performance,
and that a tree-distance measure out-performs a
sequence distance measure. We have focussed on
intrinsic, syntactic properties of parse-trees. It is
not realistic to expect that exclusively using tree-
distance measures in this rather pure way will give
state-of-the-art question-answering performance,
but the contribution of this paper is the (start of
an) exporation of the syntactic parameters which
effect the use of tree-distance in question answer-
ing. More work needs to be done in systematically
varying the parsers, question-answering tasks, and
parametrisations of tree-distance over all the pos-
sibilities.
There are many possibilities to be explored in-
volving adapting cost functions to enriched node
descriptions. Already mentioned above, is the pos-
sibility to involve semantic information in the cost
functions. Another avenue is introducing weight-
ings based on corpus-derived statistics, essentially
making the distance comparision refer to extrin-
sic factors. One open question is whether anal-
ogously to idf, cost functions for (non-lexical)
nodes should depend on tree-bank frequencies.
Another question needing further exploration is
the dependency-vs-constituency contrast. Interest-
ingly Punyakonok(2004) themselves speculate:
each node in a tree represents only a
word in the sentence; we believe that ap-
propriately combining nodes into mean-
ingful phrases may allow our approach
to perform better.
We found working with constituency trees that
it was the sub-traversal distance measure that per-
formed best, and it needs to be seen whether this
holds also for dependency trees. Also to be ex-
plored is the role of structural weighting in a sys-
tem using dependency trees.
A final speculation that it would be interesting
to explore is whether one can use feed-back from
performance on a QATD task as a driver in the
machine-learning of probabilities for a parser, in
an approach analogous to the use of the language-
model in parser training.
</bodyText>
<sectionHeader confidence="0.999549" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.9998948125">
Michael Collins. 1999. Head-driven statistical models
for natural language parsing. Ph.D. thesis, Univer-
sity of Pennsylvania.
Walter Fontana, Ivo L. Hofacker, and Pe-
ter F. Stadler. 2004. Vienna rna package.
www.tbi.univie.ac.at/˜ivo/RNA.
V. I. Levenshtein. 1966. Binary codes capable of cor-
recting insertions and reversals. Sov. Phys. Dokl,
10:707–710.
Vasin Punyakanok, Dan Roth, and Wen tau Yih. 2004.
Natural language inference via dependency tree
mapping: An application to question answering.
Computational Linguistics.
G. Salton and M. E. Lesk. 1968. Computer evala-
tion of indexing and text processing. Journal of the
ACM, 15:8–36, January.
</reference>
<page confidence="0.98327">
107
</page>
<reference confidence="0.996132125">
Ellen Voorhees and Lori Buckland, editors. 2002. The
Eleventh Text REtrieval Conference (TREC 2002).
Department of Commerce, National Institute of
Standards and Technology.
K. Zhang and D. Shasha. 1989. Simple fast algorithms
for the editing distance between trees and related
problems. SIAM Journal of Computing, 18:1245–
1262.
</reference>
<sectionHeader confidence="0.992865" genericHeader="acknowledgments">
Appendix
</sectionHeader>
<bodyText confidence="0.999968914285714">
This appendix briefly summarises the algorithm
to compute the tree-distance, based on (Zhang
and Shasha, 1989) (see Section 2.1 for definition
of tree-distance). The algorithm operates on the
left-to-right post-order traversals of trees. Given
source and target trees S and T, the output is a
table T, indexed vertically by the traversal of S
and horizontally by the traversal of T, and posi-
tion T [i][j] is the tree-distance from the S subtree
rooted at i, to the T subtree rooted at j. Thus the
bottom righthand corner of the table represents the
tree distance between S and T.
If k is the index of a node of the tree, the left-
most leaf, l(k), is the index of the leaf reached
by following the left-branch down. For a given
leaf there is a highest node of which it is the
left-most leaf. Let such a node be called a key-
root. Let KR(T) be the sequence of key-roots
in T. The algorithm is a doubly nested loop as-
cending throught the key-roots of S and T, in
which for each pair of key-roots (i, j), a routine
tree dist(i, j) updates the T table.
Suppose i is any node of S. Then for any is
with l(i) &lt; is &lt; i, the subsequence of S from
l(i) to is can be seen as a forest of subtrees of S,
denoted F(l(i),is). tree dist(i, j) creates a ta-
ble F, indexed vertically from l(i) to i and hori-
zontally from l(j) to j, such that F[is][jt] repre-
sents the distance between the forests F(l(i), is)
and F (l(j), jt). Also the F table should be seen
as having an extra left-most column, representing
for each is, l(i) &lt; is &lt; i, the F(l(i), is) to 0 map-
ping (pure deletion), and an extra uppermost row
representing for each for each jt, l(j) &lt; jt &lt; j,
the 0 to F (l(j), jt) mapping (pure insertion).
</bodyText>
<equation confidence="0.954614857142857">
tree dist(i, j){
initialize:
F[l(i)][0], ... , F[i][0] = 1, ... ,i − l(i) + 1
F[0][l(j)], ..., F[0][j] = 1,...,j − l(j) + 1
loop: `dis, l(i) &lt; is &lt; i,`djt, l(j) &lt; jt &lt; j
{
case 1: l(is) = l(i) and l(jt) = l(j)
T [is][jt] = F[is][jt] = min of swap, delete,
insert, where
swap = F[is − 1][jt − 1] + swap(is, jt)
delete = F[is − 1][jt] + delete(is)
insert = F[is][jt − 1] + insert(jt)
case 2: either l(is) =� l(i) or l(jt) =� l(j)
F[is][jt] = min of delete, insert, for + tree,
</equation>
<bodyText confidence="0.980311923076923">
where
swap, delete, insert as before and
for + tree = F[l(is) − 1][l(jt) − 1] + T [is][jt]
}
}
In case 1, the ‘forests’ F(l(i), is) and
F (l(j), jt) are both single trees and the computed
forest distance is transferred to the tree-distance
table T . In case 2, at least one of F(l(i), is) or
F (l(j), jt) represents a forest of more than one
tree. This means there is the possibility that the
final trees in the two forests are mapped to each
other. This quantity is found from the T table.
This formulation gives the whole-tree distance
between S and T. For the sub-tree distance, you
take the minimum of the final column of T . For
the sub-traversal case, you do the same but on the
final iteration, you set the pure deletion column
of F to all 0s, and take the minimum of the final
column of F.
To accommodate wild-card target trees, case
1 in the above is extended to allow T[is][jt] =
F[is][jt] = 0 in case jt is the root of a wild-card
tree. To accommodate self-effacing source trees,
case 2 in the above is extended to also consider
for + tree del = F[l(is) − 1, jt].
</bodyText>
<page confidence="0.997927">
108
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.714777">
<title confidence="0.997128">Variants of tree similarity in a Question Answering task</title>
<author confidence="0.99144">Martin</author>
<affiliation confidence="0.938671">Dept of Computer Trinity</affiliation>
<address confidence="0.841873">Ireland</address>
<abstract confidence="0.998980181818182">The results of experiments on the application of a variety of distance measures to a question-answering task are reported. Variants of tree-distance are considered, including whole-vs-sub tree, node weighting, wild cards and lexical emphasis. We derive string-distance as a special case of tree-distance and show that a particular parameterisation of tree-distance outperforms the string-distance measure.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Michael Collins</author>
</authors>
<title>Head-driven statistical models for natural language parsing.</title>
<date>1999</date>
<tech>Ph.D. thesis,</tech>
<institution>University of Pennsylvania.</institution>
<contexts>
<context position="15775" citStr="Collins, 1999" startWordPosition="2808" endWordPosition="2809">erminal node labels are a combination of a main functor with other feature terms, but the replacement cost function R is set to ignore the feature terms. Terminal node labels are base forms of words, not inflected forms. For the structural weighting algorithm, SER, the necessary node distinctions are furnished directly by the parser for vp, and by a small set of structure matching rules for other structures (nps, pps etc). The structures output for wh-questions are essentially deep structures, re-ordering an auxiliary inversion, and placing a tree in the position of a gap. The Collins parser (Collins, 1999) (Model 3 variant) is a probabilistic parser, using a model of trees as built top-down with a repertoire of moves, learnt from the Penn Treebank. The preterminal node labels are a combination of a Penn Treebank label with other information pertaining to the head/complement/adjunct distinction, but the replacement cost function R is set to ignore all but the Penn Treebank part of the label. The termi7http://www.gnu.org nal node labels are inflected forms of words, not base forms. For the structural weighting algorithm, SER, the necessary node distinctions are furnished directly by the parser. F</context>
</contexts>
<marker>Collins, 1999</marker>
<rawString>Michael Collins. 1999. Head-driven statistical models for natural language parsing. Ph.D. thesis, University of Pennsylvania.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Walter Fontana</author>
<author>Ivo L Hofacker</author>
<author>Peter F Stadler</author>
</authors>
<date>2004</date>
<note>Vienna rna package. www.tbi.univie.ac.at/˜ivo/RNA.</note>
<contexts>
<context position="9877" citStr="Fontana et al., 2004" startWordPosition="1771" endWordPosition="1774">e Figure 3 continues the example, but this time in the subject position there is a sub-tree which is classified as a wild-card np tree, and it matches at 0 cost with the subject np in the source tree. process n lhs be rhs np vp np_wild s lhs call rhs be memoryallocation vp n np n n something pro memoryallocation n s rhs lhs vp np n n sub tree matching dist=1.6 Figure 3: Wild-card example The basis of the algorithm used to calculate A is the ZhangShasha algorithm (Zhang and Shasha, 1989): the Appendix summarises it. The imn n n n n memoryallocation plementation is based on code implementing A (Fontana et al., 2004), adapting it to allowing for the S and S� variants and T(∗), S/A, and A/T parameters, and to generate the human-readable displays of the alignments (such as seen in figures 1,2 and 3). 2.3 Order invariant measures Assessing answer/question similarity by variants of tree distance or sequence edit-distance, means that distance will not be word-order invariant. There are also measures which are word-order invariant, sometimes called token-based measures. These measures are usually couched in a vector representation of questions and answers, where vector dimensions are words from (some chosen enu</context>
</contexts>
<marker>Fontana, Hofacker, Stadler, 2004</marker>
<rawString>Walter Fontana, Ivo L. Hofacker, and Peter F. Stadler. 2004. Vienna rna package. www.tbi.univie.ac.at/˜ivo/RNA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>V I Levenshtein</author>
</authors>
<title>Binary codes capable of correcting insertions and reversals.</title>
<date>1966</date>
<journal>Sov. Phys. Dokl,</journal>
<pages>10--707</pages>
<contexts>
<context position="7034" citStr="Levenshtein, 1966" startWordPosition="1246" endWordPosition="1248"> function which classifies source sub-trees as selfeffacers. Such trees can be deleted in their entirety for zero cost. If S/A classifies all source sub-trees as self-effacing, then A(S/A) will coincide with notion of ’tree-distance with Cut’ given in (Zhang and Shasha, 1989). Target self-inserters A/T: this is a function which classifies certain target sub-trees as self-inserters. Such trees can be inserted in their entirety for zero cost. A candidate might be optional adjuncts.4 2.2 Sequence Measures The tree-distance measures work with an elaboration of the original questions and answers. (Levenshtein, 1966) defined the 1 dimensional precursor of tree distance, which works directly on the 2 word sequences for the answer and question. For two sequences, s, t, and vertical (or horizontal) tree encodings l tree(s) and l tree(t), if 4Thus a target wild-card is somewhat like a target selfeffacer, but one which also licenses the classification of a matched source sub-tree as a being self-effacer. tance. Let 101 102 structural weighting STR has been used: size of a node reflects the weight. 4 of the nodes in the source represent the use of an auxiliary verb, and receive low weight, changing the optimum </context>
</contexts>
<marker>Levenshtein, 1966</marker>
<rawString>V. I. Levenshtein. 1966. Binary codes capable of correcting insertions and reversals. Sov. Phys. Dokl, 10:707–710.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Vasin Punyakanok</author>
<author>Dan Roth</author>
<author>Wen tau Yih</author>
</authors>
<title>Natural language inference via dependency tree mapping: An application to question answering. Computational Linguistics.</title>
<date>2004</date>
<marker>Punyakanok, Roth, Yih, 2004</marker>
<rawString>Vasin Punyakanok, Dan Roth, and Wen tau Yih. 2004. Natural language inference via dependency tree mapping: An application to question answering. Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Salton</author>
<author>M E Lesk</author>
</authors>
<title>Computer evalation of indexing and text processing.</title>
<date>1968</date>
<journal>Journal of the ACM,</journal>
<pages>15--8</pages>
<contexts>
<context position="10524" citStr="Salton and Lesk, 1968" startWordPosition="1872" endWordPosition="1875"> for the S and S� variants and T(∗), S/A, and A/T parameters, and to generate the human-readable displays of the alignments (such as seen in figures 1,2 and 3). 2.3 Order invariant measures Assessing answer/question similarity by variants of tree distance or sequence edit-distance, means that distance will not be word-order invariant. There are also measures which are word-order invariant, sometimes called token-based measures. These measures are usually couched in a vector representation of questions and answers, where vector dimensions are words from (some chosen enumeration) of words (see (Salton and Lesk, 1968)). In the simplest case the values on each dimensions are in {0, 1}, denoting presence or absence of a word. If • is vector product and aw is the set of words in a sequence a, then a� • b�= |aw ∩ bw|, for the binary vectors representing aw, bw. Three well known measures based on this are given below, both in terms vectors, and for binary vectors, the equivalent formulation with sets: These measure similarity, not difference, ranging for 1 for identical aw,bw, to 0 for disjoint. In the binary case, Dice/Jaccard similarity can be related to the alignment-based, difference counting perspective of</context>
</contexts>
<marker>Salton, Lesk, 1968</marker>
<rawString>G. Salton and M. E. Lesk. 1968. Computer evalation of indexing and text processing. Journal of the ACM, 15:8–36, January.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ellen Voorhees</author>
<author>Lori Buckland</author>
<author>editors</author>
</authors>
<date>2002</date>
<booktitle>The Eleventh Text REtrieval Conference (TREC 2002). Department of Commerce, National Institute of Standards and Technology.</booktitle>
<marker>Voorhees, Buckland, editors, 2002</marker>
<rawString>Ellen Voorhees and Lori Buckland, editors. 2002. The Eleventh Text REtrieval Conference (TREC 2002). Department of Commerce, National Institute of Standards and Technology.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Zhang</author>
<author>D Shasha</author>
</authors>
<title>Simple fast algorithms for the editing distance between trees and related problems.</title>
<date>1989</date>
<journal>SIAM Journal of Computing,</journal>
<volume>18</volume>
<pages>1262</pages>
<contexts>
<context position="2074" citStr="Zhang and Shasha, 1989" startWordPosition="327" endWordPosition="330">ions can be answered in a way which shares quite a bit with the question, and that accordingly with a large enough corpus, a similarity-based approach could be fruitful. 2 Distance Measures In pursuing such a similarity-based approach to question-answering, the key decisions to be made are the representations of the questions and answers, and relatedly, distance measures between them. We will primarily be concerned with measures which refer to a linguistic structure assigned to a word sequence – variants of tree-distance, but we will also consider string-distance. 2.1 Tree Measures Following (Zhang and Shasha, 1989), one can arrive at tree-distance in the following way. Given source and target ordered, labelled trees, S and T, consider the set H(S, T) of all 1-to-1 partial maps, σ, from S into T, which are homomorphisms preserving left-to-right order and ancestry1. Let the alignment, σ′, be the enlargment of the map σ with pairs (Si, A) for nodes Si E� dom(σ) and (A,Tj) for nodes Tj E� ran(σ). Let D define deletion costs for the (Si, A), Z insertion costs for the (A, Tj), and R replacement costs for the (Si, Tj) which represent nodes with nonidentical labels. Then a total cost for the alignment, C(σ′) ca</context>
<context position="6692" citStr="Zhang and Shasha, 1989" startWordPosition="1194" endWordPosition="1197">, and all those within the Tj sub-tree can be inserted for 0 cost. A wild card np tree might can be put in the position of the gap in wh-questions, allowing for example what is memory allocation, to closely match any sentences with memory allocation as their object, no matter what their subject – see Figure 3. Source self-effacers S/A: this is a function which classifies source sub-trees as selfeffacers. Such trees can be deleted in their entirety for zero cost. If S/A classifies all source sub-trees as self-effacing, then A(S/A) will coincide with notion of ’tree-distance with Cut’ given in (Zhang and Shasha, 1989). Target self-inserters A/T: this is a function which classifies certain target sub-trees as self-inserters. Such trees can be inserted in their entirety for zero cost. A candidate might be optional adjuncts.4 2.2 Sequence Measures The tree-distance measures work with an elaboration of the original questions and answers. (Levenshtein, 1966) defined the 1 dimensional precursor of tree distance, which works directly on the 2 word sequences for the answer and question. For two sequences, s, t, and vertical (or horizontal) tree encodings l tree(s) and l tree(t), if 4Thus a target wild-card is some</context>
<context position="9747" citStr="Zhang and Shasha, 1989" startWordPosition="1748" endWordPosition="1751">e deletions and substitutions. Figure 2 shows a sub-tree example where the n memoryallocation Figure 2: Structurally weighted example Figure 3 continues the example, but this time in the subject position there is a sub-tree which is classified as a wild-card np tree, and it matches at 0 cost with the subject np in the source tree. process n lhs be rhs np vp np_wild s lhs call rhs be memoryallocation vp n np n n something pro memoryallocation n s rhs lhs vp np n n sub tree matching dist=1.6 Figure 3: Wild-card example The basis of the algorithm used to calculate A is the ZhangShasha algorithm (Zhang and Shasha, 1989): the Appendix summarises it. The imn n n n n memoryallocation plementation is based on code implementing A (Fontana et al., 2004), adapting it to allowing for the S and S� variants and T(∗), S/A, and A/T parameters, and to generate the human-readable displays of the alignments (such as seen in figures 1,2 and 3). 2.3 Order invariant measures Assessing answer/question similarity by variants of tree distance or sequence edit-distance, means that distance will not be word-order invariant. There are also measures which are word-order invariant, sometimes called token-based measures. These measure</context>
</contexts>
<marker>Zhang, Shasha, 1989</marker>
<rawString>K. Zhang and D. Shasha. 1989. Simple fast algorithms for the editing distance between trees and related problems. SIAM Journal of Computing, 18:1245– 1262.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>