<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000001">
<sectionHeader confidence="0.889109" genericHeader="abstract">
ZERO MORPHEMES
IN UNIFICATION-BASED COMBINATORY CATEGORIAL GRAMMAR
</sectionHeader>
<author confidence="0.548709">
Chinatsu Aone
</author>
<affiliation confidence="0.705682">
The University of Texas at Austin
</affiliation>
<sectionHeader confidence="0.652814" genericHeader="introduction">
MCC
</sectionHeader>
<bodyText confidence="0.286486">
3500 West Balcones Center Dr.
Austin, TX 78759
(aoneÂ©mcc.com)
Kent Wittenburg
MCC
3500 West Balcones Center Dr.
Austin, TX 78759
(wittenburg@mcc.com)
</bodyText>
<sectionHeader confidence="0.991588" genericHeader="method">
ABSTRACT
</sectionHeader>
<bodyText confidence="0.999830916666667">
In this paper, we report on our use of
zero morphemes in Unification-Based
Combinatory Categorial Grammar. After illus-
trating the benefits of this approach with several
examples, we describe the algorithm for compil-
ing zero morphemes into unary rules, which al-
lows us to use zero morphemes more efficiently
in natural language processing.1 Then, we dis-
cuss the question of equivalence of a grammar
with these unary rules to the original grammar.
Lastly, we compare our approach to zero mor-
phemes with possible alternatives.
</bodyText>
<sectionHeader confidence="0.672207" genericHeader="method">
1. Zero Morphemes in Categorial Grammar
</sectionHeader>
<bodyText confidence="0.994278842105263">
In English and in other natural
languages, it is attractive to posit the existence
of morphemes that are invisible on the surface
but have their own syntactic and semantic defini-
tions. In our analyses, they are just like any
other overt morphemes except for having null
strings (i.e. &amp;quot; &amp;quot;), and we call them zero mor-
phemes. Most in Categorial Grammar and relat-
ed forms of unification-based grammars, on the
other hand, take the rule-based approach. That
is, they assume that there are unary rules that
change features or categories of their arguments
(cf. Dowty 1977, Hoeksema 1985, Wittenburg
1986, Wood 1987). Below, we will discuss the
advantages of our zero morpheme approach
over the rule-based approach.
Zero morphemes should be distin-
guished from so-called &amp;quot;gaps&amp;quot; in wh-questions
and relative clauses in that zero morphemes are
not traces or &amp;quot;place holders&amp;quot; of any other overt
morphemes in a given sentence. There are at
1. The work described here is implemented in
Common Lisp and being used in the Lucy
natural language understanding system at
MCC.
least two types of zero morphemes: zero mor-
phemes at the morphology level and those at
the syntax level.
A zero morpheme at the morphology
level applies to a free morpheme and forms an
inflected word. Such examples are present
tense zero morpheme (PR ES) as in &amp;quot;I
like+PRES dogs&amp;quot; and a singular zero morpheme
(SG) as in &amp;quot;a dog+SG&amp;quot;. These two are the coun-
terparts of a third person singular present tense
morpheme (&amp;quot;+s&amp;quot; as in &amp;quot;John like+s dogs&amp;quot; and a
plural morpheme (&amp;quot;+s&amp;quot; as in &amp;quot;two dog+s&amp;quot;), re-
spectively.
</bodyText>
<equation confidence="0.98894825">
(1) dog +SG
N[num:null] N(num:sglIN[num:nuli]
dog +s
N[num:null] N[num:pIDN[num:null]
</equation>
<bodyText confidence="0.999825285714286">
Notice that, unlike the rule-based approach, the
declarative and compositional nature of the zero
morpheme approach makes the semantic analy-
sis easier, since each zero morpheme has its
semantic definition in the lexicon and therefore
can contribute its semantics to the whole inter-
pretation just as an overt morpheme does. Also,
the monotonicity of our &amp;quot;feature adding&amp;quot; ap-
proach, as opposed to &amp;quot;default feature&amp;quot; ap-
proach (e.g., Gazdar 1987), is attractive in com-
positional semantics because it does not have to
retract or override a semantic translation contrib-
uted by a word with a default feature. For exam-
ple, &amp;quot;dog&amp;quot; in both &amp;quot;dog+SG&amp;quot; and &amp;quot;dog+s&amp;quot; contrib-
utes the same translation, and the suffixes
&amp;quot;+SG&amp;quot; and &amp;quot;-i-s&amp;quot; just add the semantics of num-
ber to their respective head nouns. In addition,
this approach helps reduce redundancy in the
lexicon. For instance, we do not have to define
for each base verb in the lexicon their present-
tense counterparts.
</bodyText>
<page confidence="0.994567">
189
</page>
<figure confidence="0.999865176470588">
a man
apply&gt;
REL-MOD the daughter of whom John liked
(N114)/S[re1:4] NP/N N (NIN)/NP NP[rel:+] NP (SNP)/NP
type-raising
SONNP)
S[rel:+]f(S/NP)
S[rel:+]
IAN
apply&lt;
aPply&gt;
LIFT
apply&gt;
aPPly&gt; N[rel:+11N
compose&gt;
N[re1:4] SINP
NP[rel:+1
</figure>
<figureCaption confidence="0.999992">
Figure 1: Derivation of &amp;quot;a man the daughter of whom John liked&amp;quot;
</figureCaption>
<bodyText confidence="0.999931">
Some zero morphemes at the syntax level
are those which may apply to a constituent larg-
er than a single word and change the categories
or features of the constituent. They are like ordi-
nary derivational or inflectional morphemes ex-
cept that their application is not confined within a
word boundary. In English, one example is the
noun compounding zero morpheme (CPD),
which derives a noun modifier from a noun. In
Categorial Grammar, its syntactic type is
(N/N)\N.2 For instance, a noun compound &amp;quot;dog
food&amp;quot; might have the following derivation.
</bodyText>
<subsectionHeader confidence="0.8517015">
dog CPD food
N (N/N)\N N
</subsectionHeader>
<bodyText confidence="0.931098333333333">
aPply&lt;
N/N
aPPly&gt;
In knowledge-based or object-oriented
semantics (cf. Hirst 1987), which our WCY sys-
tem uses, the treatment of compound nouns is
straightforward when we employ a zero mor-
pheme CPD.3 In LUCY, CPD has a list of trans-
lations in the semantic lexicon, each of which is
a slot relation (a two-place predicate as its syn-
tactic type) in the knowledge base. For exam-
ple, for &amp;quot;dog food&amp;quot; CPD may be translated into
(food-typically-eaten x y), where x must be an in-
stance of class Animal and y that of Food.
Thus, a translation of CPD is equivalent to a
</bodyText>
<listItem confidence="0.922309">
2. CPD is leftward-looking to parallel the defini-
tion of a hyphen as in &amp;quot;four-wheeler&amp;quot;.
3. Some compound nouns are considered as
&amp;quot;idiomatic&amp;quot; single lexical entries, and they do
not have a CPD morpheme. (e.g. &amp;quot;elephant
garlic&amp;quot;)
</listItem>
<bodyText confidence="0.986310972972973">
value bound to the &amp;quot;implicit relation&amp;quot; called nn
that Hobbs and Martin (1987) introduce to re-
solve compound nouns in TACITUS. In our
case, having CPD as a lexical item, we do not
have to introduce such an implicit relation at the
semantics level.
An analogous zero morpheme provides
a natural analysis for relative clauses, deriving a
noun modifier from S. This zero morpheme,
which we call REL-MOD, plays an important role
in an analysis of pied-piping, which seems diffi-
cult for other approaches such as Steedman
(1987, 1988). (See Pollard (1988) for his criti-
cism of Steedman&apos;s approach.) Steedman as-
sumes that relative pronouns are type-raised al-
ready in the lexicon and have noun-modifier type
(NIN)/(S/(SINP). In Figure 1, we show a deriva-
tion of a pied-piping relative clause &amp;quot;a man the
daughter of whom John liked &amp;quot; using REL-
MOD.4 5
Other zero morphemes at the syntax
level are used to deal with optional words. We
define a zero morpheme for an invisible
morpheme that is a counterpart of the overt one.
An example is an accusative relative pronoun as
in &amp;quot;a student (who) I met yesterday&amp;quot;. Another
example of this kind is &amp;quot;you&amp;quot; in imperative
4. We assume that accusative wh-words are of
basic NP type in the lexicon. A unary rule
LIFT, which is similar to type-raising rule,
lifts any NP of basic type with [rel:4] feature
to a higher type NP, characteristic of fronted
phrases. This feature is passed up by way
of unification.
5. We actually use predictive versions of corn-
binators in our runtime system (Wittenburg
1987).
</bodyText>
<figure confidence="0.874603">
(2)
3.89
R: X/Y Y ==&gt; X M: A/B
==&gt; ==&gt; A
</figure>
<figureCaption confidence="0.992415">
Figure 2: Compiling a zero morpheme
</figureCaption>
<bodyText confidence="0.95875175">
sentences. Having a zero morpheme for the
unrealized &amp;quot;you&amp;quot; makes parsing and the
interpretation of imperative sentences
straightforward.6
</bodyText>
<figure confidence="0.989355">
(3)
IMP IMP-YOU finish dinner
S[mood:imp]IS NP (S\NP)/NP NP
[case:nom]
apply&gt;
[mood:imp]
</figure>
<bodyText confidence="0.996300142857143">
Analogous to the treatment of optional
words, VP-ellipsis as in &amp;quot;Mary likes a dog, and
Bill does too&amp;quot; is handled syntactically by defining
a syntax-level zero morpheme for an elided verb
phrase (called VP-ELLIPSIS). During the
discourse process in LUCY, the antecedent of
VP-ELLIPS1S is recovered.&apos;
</bodyText>
<sectionHeader confidence="0.883392" genericHeader="method">
Bill does VP-ELLIPSIS
NP S\NP/(SINP) S\NP
</sectionHeader>
<subsectionHeader confidence="0.72876">
S\NP
</subsectionHeader>
<bodyText confidence="0.959979777777778">
Now to summarize the advantages for
having zero morphemes, first, zero morphemes
like PRES and SG reduce redundancy in the
lexicon. Second, zero morphemes seem to be a
natural way to express words that do not appear
6. Each sentence must have one of the three
mood features -- declarative, interrogative,
and imperative mood. They are added by
zero morphemes DECL, (DUES, and IMP,
respectively.
7. See Kameyama and Barnett (1989).
on the surface but have their overt counterparts
(e.g., null accusative relative pronouns,
vp-ellipsis). Third, since each zero morpheme
has its own syntax and semantic interpretation in
much the same way as overt morphemes, and
since the semantic interpretations of binary rules
that combine a zero morpheme with its
argument (or functor) are kept as simple as they
are in Categorial Grammar, semantic
interpretations of sentences with zero mor-
phemes are compositional and straightforward.
Typically in the rule-based approach, the
semantic operations of unary rules are more
complicated: they might perform such operations
as introducing or retracting some semantic
primitives that do not exist in the semantic
lexicon. But with our zero morpheme approach,
we can avoid such complication. Lastly, using
zero morpheme REL-MOD makes the analysis
of pied-piping and preposition fronting of relative
clauses in Categorial Grammar possible.
In the following section, we propose an
approach that keeps all these advantages of
zero morphemes while maintaining the efficiency
of the rule approach in terms of parsing.
</bodyText>
<sectionHeader confidence="0.704667" genericHeader="method">
2. Compiling Zero Morphemes
</sectionHeader>
<bodyText confidence="0.999192928571428">
In natural language processing, simply
proposing zero morphemes at each juncture in a
given input string during parsing would be a
nightmare of inefficiency. However, using the
fact that there are only a few binary rules in
Categorial Grammar and each zero morpheme
can combine with only a subset of these rules
because of its directionality compatibility, we can
pre-compile zero morphemes into equivalent
unary rules and use the latter for parsing. Our
approach is an extension of the predictive com-
binator compilation method discussed in
Wittenburg (1987). The idea is that we first unify
a zero morpheme M with the left or right daugh-
</bodyText>
<figure confidence="0.7495216">
S\NP
apply&lt;
apply&gt;
apply&gt;
apply&lt;
</figure>
<page confidence="0.983057">
190
</page>
<bodyText confidence="0.9850293">
Let M be a zero morpheme, R be a binary rule. For each M in the grammar, do the following:
For each binary rule R in the grammar
if the syntax graph of M unifies with the left daughter of R
then call the unified binary graph R&apos;, and
make the right daughter of R&apos; the daughter of a new unary rule R1
make the parent of R&apos; the parent of R1
if the syntax graph of M unifies with the right daughter of R
then call the unified binary graph FR&apos;
make the left daughter of R&apos; the daughter of a new unary rule RI
make the parent of R&apos; the parent of Al.
</bodyText>
<figureCaption confidence="0.993236">
Figure 3: Algorithm for compiling zero morphemes
</figureCaption>
<bodyText confidence="0.983495777777778">
ter of each binary rule R. If they unify, we create
a specialized version of this binary rule R&apos;, main-
taining features of M acquired through unifica-
tion. Then, we derive a unary rule out of this
specialized binary rule and use it in parsing.
Thus, if M is of type A/B, R is forward applica-
tion, and M unifies with the left daughter of R,
the compiling procedure is schematized as in
Figure 2.
Now I shall describe the algorithm for
compiling zero morphemes in Figure 3. During
this compiling process, the semantic interpreta-
tion of each resulting unary rule is also calculat-
ed from the interpretation of the binary rule and
that of the zero morpheme. For example, if the
semantics of M is M&apos;, given that the semantic in-
terpretation of forward application is ?dun-
Aarg(fun arg), we get Xarg(M&apos; arg) for the se-
mantic interpretation of the compiled unary rule.8
We also have a mechanism to merge
two resulting unary rules into a new one. That
is, if a unary rule R1 applies to some category A,
giving A&apos;, and then a unary rule R2 applies to A&apos;,
giving A&amp;quot;, we merge R1 and R2 into a new
unary rule R3, which takes A as its argument
and returns A&amp;quot;. For example, after compiling
IMP-rule and IMP-YOU-rule from zero mor-
phemes IMP and IMP-YOU (cf. (3)), we could
merge these two rules into one rule, IMP+IMP-
YOU rule. During parsing, we use the merged
rule and deactivate the original two rules.
3. The Grammar with Compiled zero mor-
phemes
The grammar with the resulting unary
rules has the same generative capacity as the
8. See Wittenburg and Aone (1989) for the de-
</bodyText>
<subsectionHeader confidence="0.799645">
tails of Lucy syntax/semantics interface.
</subsectionHeader>
<bodyText confidence="0.981933222222222">
source grammar with zero morphemes in the
lexicon because these unary rules are originally
derived by only using the zero morphemes and
binary rules in the source grammar. Thus, a
derivation which uses a unary rule can always
be mapped to a derivation in the original gram-
mar, and vice versa. For example, look at the
following example of CPD-RULE vs. zero mor-
pheme CPD:
</bodyText>
<figure confidence="0.551215714285714">
(5) a. dog food apply&gt;
N N
77-1/Nâ cpd-rule
b. dog CPD food
N (N/N)\N N
1â¢â¢â 110â 1â¢â 
N/N apply&lt;
</figure>
<bodyText confidence="0.995055">
Now, if we assume that we use
Categorial Grammar with four binary rules,
namely, apply&gt;, applyr, compose&gt;, and com-
poser, as Steedman (1987) does, we can pre-
dict, among 8 possibilities (4 rules and the 2
daughters for each rule), the maximum number
of unary rules that we derive from a zero mor-
pheme according to its syntactic type.8 if a zero
morpheme is of type A/B, it unifies with the left
daughters of apply&gt;, apply&lt; and compose&gt; and
with the right daughters of apply&gt; and corn-
9. Zero morphemes do not combine with wh-
word type-raising rule LIFT, which is the only
unary rule in our grammar besides the com-
piled unary rules from zero morphemes.
</bodyText>
<equation confidence="0.502448">
apply&gt;
</equation>
<page confidence="0.989755">
191
</page>
<bodyText confidence="0.9999494375">
pose&gt;. Thus, there are 5 possible unary rules
for this type of zero morpheme. If a zero mor-
pheme is of type ANB, there are also 5 possibili-
ties. That is, it unifies with the left daughter of
apply&lt; and compose&lt;, and the right daughters
of apply&gt;, apply&lt; and compose&lt;. If a zero mor-
pheme is of basic type, there are only 2 possibil-
ities; it unifies only with the left daughter of
apply&lt; and the right daughter of apply&gt;.
Furthermore, in our English grammar,
we have been able to constrain the number of
unary rules by pre-specifying for compilation
which rules to unify a given zero morpheme
We add such compiler flags in the
definition of each zero morpheme. We can do
this for the morphology-level zero morphemes
because they are never combined with anything
other than their root morphemes by binary rules,
and because we know which side of a root
morpheme a given zero affix appears and what
are the possible syntactic types of the root
morpheme. As for zero morphemes at the
syntax level, we can ignore composition rules
when compiling zero morphemes which are in
islands to &amp;quot;extraction&amp;quot;, since these rules are only
necessary in extraction contexts. CPD,
REL-MOD and IMP-YOU are such syntax-level
zero morphemes. Additional facts about English
have allowed us to specify only one binary rule
for each syntax-level zero morpheme in our
English grammar. An example of a zero
morpheme definition is shown below.
</bodyText>
<listItem confidence="0.4745712">
(6) (defzeromorpheme PRES
:syntax S[tns:pres]\S[tns:null]
:compile-info (:binary-rule compose&lt;
daughter R))
4. Comparison in View of Parsing Zero
</listItem>
<subsectionHeader confidence="0.457804">
Morphemes
</subsectionHeader>
<bodyText confidence="0.99998634375">
In this section, we compare our
approach to zero morphemes to alternative
ways from the parsing point of view. Since we
do not know any other comparable approach
which specifically included zero morphemes in
natural language processing, we compare ours
to the possible approaches which are analogous
to those which tried to deal with gaps. For
example, in Bear and Karttunen&apos;s (1979)
treatment of wh-question and relative pronoun
gaps in Phrase Structure Grammar, a gap is
proposed at each vertex during parsing if there
is a wh-question word or a relative pronoun in
the stack. We can use an analogous approach
for zero morphemes, but clearly this will be
extremely inefficient. It is more so because 1)
there is no restriction such as that there should
be only one zero morpheme within an S clause,
and 2) the stack is useless because zero mor-
phemes are independent morphemes and are
not &amp;quot;bound&amp;quot; to other morphemes comparable to
wh-words.
Shieber (1985) proposes a more
efficient approach to gaps in the PATR-II
formalism, extending Earley&apos;s algorithm by using
restriction to do top-down filtering. While an
approach to zero morphemes similar to
Shieber&apos;s gap treatment is possible, we can see
one advantage of ours. That is, our approach
does not depend on what kind of parsing
algorithm we choose. It can be top-down as well
as bottom-up.
</bodyText>
<sectionHeader confidence="0.997087" genericHeader="conclusions">
5. Conclusion
</sectionHeader>
<bodyText confidence="0.999955470588235">
Hoeksema (1985] argues for the
rule-based approach over the zero morpheme
approach, pointing out that the postulation of
zero morphemes requires certain arbitrary
decisions about their position in the word or in
the sentence. While we admit that such
arbitrariness exists in some zero morphemes we
have defined, we believe the advantages of
positing zero morphemes, as discussed in
Section 1, outweigh this objection. Our
approach combines the linguistic advantages of
the zero morpheme analysis with the efficiency
of a rule-based approach. Our use of zero
morphemes is not restricted to the traditional
zero-affix domain. We use them, for example, to
handle optional words and VP-ellipsis, extending
the coverage of our grammar in a natural way.
</bodyText>
<sectionHeader confidence="0.998281" genericHeader="acknowledgments">
ACKNOWLEDGEMENTS
</sectionHeader>
<bodyText confidence="0.996309285714286">
We would like to thank Megurni
Kameyama and Michael O&apos;Leary for their help.
10. In fact, we use more than two kinds of com-
position rules for the compilation of the mor-
phology-level zero morphemes. (e.g. PRES
in (1)) But this does not cause any &amp;quot;rule pro-
liferation&amp;quot; problem for this reason.
</bodyText>
<sectionHeader confidence="0.99922" genericHeader="references">
REFERENCES
</sectionHeader>
<bodyText confidence="0.4550105">
Bear, John and Lauri Kartlunen. 1979. PSG: A
Simple Phrase Structure Parser. In R. Bley-
Vroman and S. Schmerling (eds.), Texas
Linguistic Forum. No. 15.
</bodyText>
<page confidence="0.80813">
192
</page>
<reference confidence="0.999804873015873">
Dowty, David. 1979. Word Meaning and
Montague Grammar. D. Reidel Publishing
Company.
Gazdar, Gerald. 1987. Linguistic Applications
of Default Inheritance Mechanisms. In P.
Whitelock et al. (eds.), Linguistic Theory and
Computer Applications. Academic Press.
Hirst, Graeme. 1987. Semantic Interpretation
and the Resolution of Ambiguity. Cambridge
University Press.
Hobbs, Jerry and Paul Martin. 1987. Local
Pragmatics. in Proceedings 1..ICAI-87.
Hoeks e ma, Jack. 1985. Categorial
Morphology. Garland Publishing, Inc. New
York &amp; London.
Kameyama, Megumi and Jim Barnett. 1989.
VP Ellipsis with Distributed Knowledge
Sources. MCC Technical Report number
ACT-HI-145-89.
Pollard, Carl. 1988. Categorial Grammar and
Phrase Structure Grammar: An Excursion on
the Syntax-Semantics Frontier. In R. Oehrle
et al. (eds.), Categorial Grammars and
Natural Language Structures. D. Reidel
Publishing Company.
Shieber, Stuart. 1985. Using Restriction to
Extend Parsing Algorithms for Complex-
Feature-Based Formalisms. In Proceedings
of the 23rd Annual Meetings of the
Association for Computational Linguistics_
145-152.
1986. An Introduction to
Unification-Based Approaches to Grammar.
CSLI, Stanford University, California.
Steadman, Mark. 1985. Dependency and
Coordination in the Grammar of Dutch and
English. Language. 61:523-568.
1987. Combinatory Grammars
and Parasitic Gaps. Natural Language and
Linguistic Theory. 5:403-439.
1988. Combinators and
Grammars. In R. Oehrle et al. (eds.),
Categorial Grammars and Natural Language
Structures. D. Reidel Publishing Company.
Wittenburg, Kent. 1986_ Natural Language
Parsing with Combinatory Categorial
Grammar in a Graph-Unification-Based
Formalism. Doctoral dissertation, The
University of Texas, Austin.
1987. Predictive combina-
tors: A Method for Efficient Processing of
Combinatory Categorial Grammars. In
Proceedings of the 25th Annual Meetings of
the Association for Computational Linguistics.
Wittenburg, Kent and Chinatsu Aone. 1989.
Aspects of a Categorial Syntax/Semantics
Interface. MCC Technical Report number
ACT-HI-143-89.
Wood, Mary. 1987. Paradigmatic Rules for
Categorial Grammars. CCUUMIST Report,
Centre for Computational Linguistics,
University of Manchester, Institute of Science
and Technology.
</reference>
<page confidence="0.999248">
193
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.000829">
<title confidence="0.974173">ZERO MORPHEMES UNIFICATION-BASED GRAMMAR</title>
<author confidence="0.883451">Chinatsu Aone</author>
<affiliation confidence="0.761647">The University of Texas at Austin MCC</affiliation>
<address confidence="0.993902">3500 West Balcones Center Dr. Austin, TX 78759</address>
<email confidence="0.912088">(aoneÂ©mcc.com)</email>
<author confidence="0.922278">Kent Wittenburg</author>
<affiliation confidence="0.729369">MCC</affiliation>
<address confidence="0.990865">3500 West Balcones Center Dr. Austin, TX 78759</address>
<email confidence="0.839914">(wittenburg@mcc.com)</email>
<abstract confidence="0.998620981042653">In this paper, we report on our use of morphemes Unification-Based Combinatory Categorial Grammar. After illustrating the benefits of this approach with several examples, we describe the algorithm for compiling zero morphemes into unary rules, which allows us to use zero morphemes more efficiently natural language Then, we discuss the question of equivalence of a grammar with these unary rules to the original grammar. Lastly, we compare our approach to zero morphemes with possible alternatives. 1. Zero Morphemes in Categorial Grammar In English and in other natural languages, it is attractive to posit the existence of morphemes that are invisible on the surface but have their own syntactic and semantic definitions. In our analyses, they are just like any other overt morphemes except for having null strings (i.e. &amp;quot; &amp;quot;), and we call them zero morphemes. Most in Categorial Grammar and related forms of unification-based grammars, on the other hand, take the rule-based approach. That is, they assume that there are unary rules that change features or categories of their arguments (cf. Dowty 1977, Hoeksema 1985, Wittenburg 1986, Wood 1987). Below, we will discuss the advantages of our zero morpheme approach over the rule-based approach. Zero morphemes should be distinguished from so-called &amp;quot;gaps&amp;quot; in wh-questions and relative clauses in that zero morphemes are not traces or &amp;quot;place holders&amp;quot; of any other overt morphemes in a given sentence. There are at 1. The work described here is implemented in Common Lisp and being used in the Lucy natural language understanding system at MCC. least two types of zero morphemes: zero morphemes at the morphology level and those at the syntax level. A zero morpheme at the morphology level applies to a free morpheme and forms an inflected word. Such examples are present tense zero morpheme (PR ES) as in &amp;quot;I like+PRES dogs&amp;quot; and a singular zero morpheme (SG) as in &amp;quot;a dog+SG&amp;quot;. These two are the counterparts of a third person singular present tense morpheme (&amp;quot;+s&amp;quot; as in &amp;quot;John like+s dogs&amp;quot; and a plural morpheme (&amp;quot;+s&amp;quot; as in &amp;quot;two dog+s&amp;quot;), respectively. (1) dog +SG N[num:null] N(num:sglIN[num:nuli] dog +s N[num:null] N[num:pIDN[num:null] Notice that, unlike the rule-based approach, the declarative and compositional nature of the zero morpheme approach makes the semantic analysis easier, since each zero morpheme has its semantic definition in the lexicon and therefore can contribute its semantics to the whole interpretation just as an overt morpheme does. Also, the monotonicity of our &amp;quot;feature adding&amp;quot; approach, as opposed to &amp;quot;default feature&amp;quot; approach (e.g., Gazdar 1987), is attractive in compositional semantics because it does not have to retract or override a semantic translation contributed by a word with a default feature. For example, &amp;quot;dog&amp;quot; in both &amp;quot;dog+SG&amp;quot; and &amp;quot;dog+s&amp;quot; contributes the same translation, and the suffixes &amp;quot;+SG&amp;quot; and &amp;quot;-i-s&amp;quot; just add the semantics of number to their respective head nouns. In addition, approach helps in the lexicon. For instance, we do not have to define for each base verb in the lexicon their presenttense counterparts. 189 a man apply&gt; REL-MOD the daughter of whom John liked (N114)/S[re1:4] NP/N N (NIN)/NP NP[rel:+] NP (SNP)/NP type-raising SONNP) S[rel:+]f(S/NP) S[rel:+] IAN apply&lt; aPply&gt; LIFT apply&gt; aPPly&gt; N[rel:+11N compose&gt; N[re1:4] NP[rel:+1 SINP Figure 1: Derivation of &amp;quot;a man the daughter of whom John liked&amp;quot; Some zero morphemes at the syntax level are those which may apply to a constituent larger than a single word and change the categories or features of the constituent. They are like ordinary derivational or inflectional morphemes except that their application is not confined within a word boundary. In English, one example is the noun compounding zero morpheme (CPD), which derives a noun modifier from a noun. In Categorial Grammar, its syntactic type is For instance, a noun compound &amp;quot;dog food&amp;quot; might have the following derivation. dog CPD food (N/N)\N aPply&lt; N/N aPPly&gt; In knowledge-based or object-oriented semantics (cf. Hirst 1987), which our WCY system uses, the treatment of compound nouns is straightforward when we employ a zero mor- In LUCY, CPD has a list of translations in the semantic lexicon, each of which is a slot relation (a two-place predicate as its syntactic type) in the knowledge base. For example, for &amp;quot;dog food&amp;quot; CPD may be translated into x y), where be an instance of class Animal and y that of Food. Thus, a translation of CPD is equivalent to a 2. CPD is leftward-looking to parallel the definition of a hyphen as in &amp;quot;four-wheeler&amp;quot;. 3. Some compound nouns are considered as &amp;quot;idiomatic&amp;quot; single lexical entries, and they do not have a CPD morpheme. (e.g. &amp;quot;elephant garlic&amp;quot;) bound to the &amp;quot;implicit relation&amp;quot; called that Hobbs and Martin (1987) introduce to resolve compound nouns in TACITUS. In our case, having CPD as a lexical item, we do not have to introduce such an implicit relation at the semantics level. An analogous zero morpheme provides a natural analysis for relative clauses, deriving a noun modifier from S. This zero morpheme, which we call REL-MOD, plays an important role of pied-piping, which seems difficult for other approaches such as Steedman (1987, 1988). (See Pollard (1988) for his criticism of Steedman&apos;s approach.) Steedman assumes that relative pronouns are type-raised already in the lexicon and have noun-modifier type (NIN)/(S/(SINP). In Figure 1, we show a derivation of a pied-piping relative clause &amp;quot;a man the daughter of whom John liked &amp;quot; using REL- 5 Other zero morphemes at the syntax are used to deal with We define a zero morpheme for an invisible morpheme that is a counterpart of the overt one. An example is an accusative relative pronoun as in &amp;quot;a student (who) I met yesterday&amp;quot;. Another example of this kind is &amp;quot;you&amp;quot; in imperative 4. We assume that accusative wh-words are of basic NP type in the lexicon. A unary rule LIFT, which is similar to type-raising rule, any NP of type with [rel:4] feature to a higher type NP, characteristic of fronted phrases. This feature is passed up by way of unification. 5. We actually use predictive versions of cornin runtime system (Wittenburg 1987). (2) 3.89 R: X/Y Y ==&gt; X M: A/B ==&gt; ==&gt; A Figure 2: Compiling a zero morpheme sentences. Having a zero morpheme for the unrealized &amp;quot;you&amp;quot; makes parsing and the interpretation of imperative sentences IMP IMP-YOU finish dinner S[mood:imp]IS NP (S\NP)/NP NP [case:nom] apply&gt; [mood:imp] Analogous to the treatment of optional words, VP-ellipsis as in &amp;quot;Mary likes a dog, and Bill does too&amp;quot; is handled syntactically by defining a syntax-level zero morpheme for an elided verb phrase (called VP-ELLIPSIS). During the discourse process in LUCY, the antecedent of VP-ELLIPS1S is recovered.&apos; Bill does VP-ELLIPSIS NP S\NP/(SINP) S\NP S\NP Now to summarize the advantages for zero morphemes, first, like PRES and SG reduce redundancy in the lexicon. Second, zero morphemes seem to be a natural way to express words that do not appear 6. Each sentence must have one of the three mood features -declarative, interrogative, and imperative mood. They are added by zero morphemes DECL, (DUES, and IMP, respectively. 7. See Kameyama and Barnett (1989). on the surface but have their overt counterparts (e.g., null accusative relative pronouns, vp-ellipsis). Third, since each zero morpheme has its own syntax and semantic interpretation in much the same way as overt morphemes, and since the semantic interpretations of binary rules that combine a zero morpheme with its argument (or functor) are kept as simple as they are in Categorial Grammar, semantic interpretations of sentences with zero morphemes are compositional and straightforward. Typically in the rule-based approach, the semantic operations of unary rules are more complicated: they might perform such operations as introducing or retracting some semantic primitives that do not exist in the semantic lexicon. But with our zero morpheme approach, such complication. Lastly, using zero morpheme REL-MOD makes the analysis of pied-piping and preposition fronting of relative clauses in Categorial Grammar possible. In the following section, we propose an approach that keeps all these advantages of zero morphemes while maintaining the efficiency of the rule approach in terms of parsing. 2. Compiling Zero Morphemes In natural language processing, simply proposing zero morphemes at each juncture in a given input string during parsing would be a nightmare of inefficiency. However, using the fact that there are only a few binary rules in Categorial Grammar and each zero morpheme can combine with only a subset of these rules because of its directionality compatibility, we can pre-compile zero morphemes into equivalent unary rules and use the latter for parsing. Our approach is an extension of the predictive combinator compilation method discussed in Wittenburg (1987). The idea is that we first unify zero morpheme M with the left or right daugh- S\NP apply&lt; apply&gt; apply&gt; apply&lt; 190 Let M be a zero morpheme, R be a binary rule. For each M in the grammar, do the following: For each binary rule R in the grammar the syntax graph of M unifies with the of R then call the unified binary graph R&apos;, and make the right daughter of R&apos; the daughter of a new unary rule R1 make the parent of R&apos; the parent of R1 the syntax graph of M unifies with the of R then call the unified binary graph FR&apos; make the left daughter of R&apos; the daughter of a new unary rule RI make the parent of R&apos; the parent of Al. Figure 3: Algorithm for compiling zero morphemes ter of each binary rule R. If they unify, we create a specialized version of this binary rule R&apos;, maintaining features of M acquired through unification. Then, we derive a unary rule out of this specialized binary rule and use it in parsing. M of type A/B, R is forward applicaunifies with the left daughter of R, the compiling procedure is schematized as in Now I shall describe the algorithm for compiling zero morphemes in Figure 3. During this compiling process, the semantic interpretation of each resulting unary rule is also calculated from the interpretation of the binary rule and of the morpheme. For example, the semantics of M is M&apos;, given that the semantic interpretation of forward application is ?dun- Aarg(fun arg), we get Xarg(M&apos; arg) for the seinterpretation of the compiled unary We also have a mechanism to merge two resulting unary rules into a new one. That is, if a unary rule R1 applies to some category A, giving A&apos;, and then a unary rule R2 applies to A&apos;, giving A&amp;quot;, we merge R1 and R2 into a new unary rule R3, which takes A as its argument and returns A&amp;quot;. For example, after compiling IMP-rule and IMP-YOU-rule from zero morphemes IMP and IMP-YOU (cf. (3)), we could these two rules into one rule, IMP+IMP- During parsing, we use the merged rule and deactivate the original two rules. 3. The Grammar with Compiled zero morphemes The grammar with the resulting unary rules has the same generative capacity as the See Wittenburg and Aone (1989) for the de- Lucy syntax/semantics interface. source grammar with zero morphemes in the lexicon because these unary rules are originally derived by only using the zero morphemes and binary rules in the source grammar. Thus, a derivation which uses a unary rule can always be mapped to a derivation in the original grammar, and vice versa. For example, look at the following example of CPD-RULE vs. zero morpheme CPD: (5) a. dog food apply&gt; N N cpd-rule b. dog CPD food N (N/N)\N N 1â¢â¢â 110â 1â¢â  Now, if we assume that we use Categorial Grammar with four binary rules, namely, apply&gt;, applyr, compose&gt;, and composer, as Steedman (1987) does, we can predict, among 8 possibilities (4 rules and the 2 daughters for each rule), the maximum number of unary rules that we derive from a zero moraccording to its syntactic if a zero morpheme is of type A/B, it unifies with the left daughters of apply&gt;, apply&lt; and compose&gt; and the right daughters of apply&gt; and corn- 9. Zero morphemes do not combine with whword type-raising rule LIFT, which is the only unary rule in our grammar besides the compiled unary rules from zero morphemes. apply&gt; 191 pose&gt;. Thus, there are 5 possible unary rules for this type of zero morpheme. If a zero morpheme is of type ANB, there are also 5 possibilities. That is, it unifies with the left daughter of apply&lt; and compose&lt;, and the right daughters of apply&gt;, apply&lt; and compose&lt;. If a zero morpheme is of basic type, there are only 2 possibilities; it unifies only with the left daughter of apply&lt; and the right daughter of apply&gt;. Furthermore, in our English grammar, we have been able to constrain the number of unary rules by pre-specifying for compilation which rules to unify a given zero morpheme We add such compiler flags in the definition of each zero morpheme. We can do for the morphemes because they are never combined with anything other than their root morphemes by binary rules, and because we know which side of a root morpheme a given zero affix appears and what are the possible syntactic types of the root morpheme. As for zero morphemes at the we can ignore composition rules when compiling zero morphemes which are in islands to &amp;quot;extraction&amp;quot;, since these rules are only necessary in extraction contexts. CPD, REL-MOD and IMP-YOU are such syntax-level zero morphemes. Additional facts about English have allowed us to specify only one binary rule for each syntax-level zero morpheme in our English grammar. An example of a zero morpheme definition is shown below. (6) (defzeromorpheme PRES :syntax S[tns:pres]\S[tns:null] :compile-info (:binary-rule compose&lt; daughter R)) in View of Parsing Zero Morphemes In this section, we compare our approach to zero morphemes to alternative ways from the parsing point of view. Since we do not know any other comparable approach which specifically included zero morphemes in natural language processing, we compare ours to the possible approaches which are analogous to those which tried to deal with gaps. For example, in Bear and Karttunen&apos;s (1979) treatment of wh-question and relative pronoun gaps in Phrase Structure Grammar, a gap is proposed at each vertex during parsing if there is a wh-question word or a relative pronoun in the stack. We can use an analogous approach for zero morphemes, but clearly this will be extremely inefficient. It is more so because 1) there is no restriction such as that there should be only one zero morpheme within an S clause, and 2) the stack is useless because zero morphemes are independent morphemes and are not &amp;quot;bound&amp;quot; to other morphemes comparable to wh-words. Shieber (1985) proposes a more efficient approach to gaps in the PATR-II formalism, extending Earley&apos;s algorithm by using do top-down filtering. While an approach to zero morphemes similar to Shieber&apos;s gap treatment is possible, we can see one advantage of ours. That is, our approach does not depend on what kind of parsing algorithm we choose. It can be top-down as well as bottom-up. 5. Conclusion Hoeksema (1985] argues for the rule-based approach over the zero morpheme approach, pointing out that the postulation of zero morphemes requires certain arbitrary about their position in the in the sentence. While we admit that such arbitrariness exists in some zero morphemes we have defined, we believe the advantages of positing zero morphemes, as discussed in Section 1, outweigh this objection. Our approach combines the linguistic advantages of the zero morpheme analysis with the efficiency of a rule-based approach. Our use of zero morphemes is not restricted to the traditional zero-affix domain. We use them, for example, to handle optional words and VP-ellipsis, extending the coverage of our grammar in a natural way. ACKNOWLEDGEMENTS would like thank Megurni Kameyama and Michael O&apos;Leary for their help. 10. In fact, we use more than two kinds of composition rules for the compilation of the morphology-level zero morphemes. (e.g. PRES in (1)) But this does not cause any &amp;quot;rule proliferation&amp;quot; problem for this reason.</abstract>
<title confidence="0.550652">REFERENCES John and Lauri Kartlunen. PSG: A</title>
<author confidence="0.859324">In Bley-</author>
<affiliation confidence="0.948477">and Schmerling (eds.),</affiliation>
<note confidence="0.819918727272727">Forum. 15. 192 David. 1979. Meaning and Grammar. Reidel Publishing Company. Gazdar, Gerald. 1987. Linguistic Applications of Default Inheritance Mechanisms. In P. et al. (eds.), Theory and Applications. Press. Graeme. 1987. Interpretation the Resolution of Ambiguity. University Press. Hobbs, Jerry and Paul Martin. 1987. Local in 1..ICAI-87. e ma, Jack. 1985. Publishing, Inc. New York &amp; London. Kameyama, Megumi and Jim Barnett. 1989. VP Ellipsis with Distributed Knowledge Sources. MCC Technical Report number ACT-HI-145-89. Pollard, Carl. 1988. Categorial Grammar and</note>
<title confidence="0.337747">Phrase Structure Grammar: An Excursion on</title>
<author confidence="0.521309333333333">Grammars</author>
<author confidence="0.521309333333333">Language Structures Reidel</author>
<affiliation confidence="0.971473">Publishing Company.</affiliation>
<address confidence="0.934466">Shieber, Stuart. 1985. Using Restriction to</address>
<note confidence="0.7812398">Extend Parsing Algorithms for Complex- Formalisms. In of the 23rd Annual Meetings of the Association for Computational Linguistics_ 145-152.</note>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>David Dowty</author>
</authors>
<title>Word Meaning and</title>
<date>1979</date>
<publisher>Reidel Publishing Company.</publisher>
<marker>Dowty, 1979</marker>
<rawString>Dowty, David. 1979. Word Meaning and Montague Grammar. D. Reidel Publishing Company.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Gerald Gazdar</author>
</authors>
<title>Linguistic Applications of Default Inheritance Mechanisms. In</title>
<date>1987</date>
<booktitle>Linguistic Theory and Computer Applications.</booktitle>
<editor>P. Whitelock et al. (eds.),</editor>
<publisher>Academic Press.</publisher>
<contexts>
<context position="2931" citStr="Gazdar 1987" startWordPosition="470" endWordPosition="471">s in &amp;quot;John like+s dogs&amp;quot; and a plural morpheme (&amp;quot;+s&amp;quot; as in &amp;quot;two dog+s&amp;quot;), respectively. (1) dog +SG N[num:null] N(num:sglIN[num:nuli] dog +s N[num:null] N[num:pIDN[num:null] Notice that, unlike the rule-based approach, the declarative and compositional nature of the zero morpheme approach makes the semantic analysis easier, since each zero morpheme has its semantic definition in the lexicon and therefore can contribute its semantics to the whole interpretation just as an overt morpheme does. Also, the monotonicity of our &amp;quot;feature adding&amp;quot; approach, as opposed to &amp;quot;default feature&amp;quot; approach (e.g., Gazdar 1987), is attractive in compositional semantics because it does not have to retract or override a semantic translation contributed by a word with a default feature. For example, &amp;quot;dog&amp;quot; in both &amp;quot;dog+SG&amp;quot; and &amp;quot;dog+s&amp;quot; contributes the same translation, and the suffixes &amp;quot;+SG&amp;quot; and &amp;quot;-i-s&amp;quot; just add the semantics of number to their respective head nouns. In addition, this approach helps reduce redundancy in the lexicon. For instance, we do not have to define for each base verb in the lexicon their presenttense counterparts. 189 a man apply&gt; REL-MOD the daughter of whom John liked (N114)/S[re1:4] NP/N N (NIN)/</context>
</contexts>
<marker>Gazdar, 1987</marker>
<rawString>Gazdar, Gerald. 1987. Linguistic Applications of Default Inheritance Mechanisms. In P. Whitelock et al. (eds.), Linguistic Theory and Computer Applications. Academic Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Graeme Hirst</author>
</authors>
<title>Semantic Interpretation and the Resolution of Ambiguity.</title>
<date>1987</date>
<publisher>Cambridge University Press.</publisher>
<contexts>
<context position="4397" citStr="Hirst 1987" startWordPosition="710" endWordPosition="711">are those which may apply to a constituent larger than a single word and change the categories or features of the constituent. They are like ordinary derivational or inflectional morphemes except that their application is not confined within a word boundary. In English, one example is the noun compounding zero morpheme (CPD), which derives a noun modifier from a noun. In Categorial Grammar, its syntactic type is (N/N)\N.2 For instance, a noun compound &amp;quot;dog food&amp;quot; might have the following derivation. dog CPD food N (N/N)\N N aPply&lt; N/N aPPly&gt; In knowledge-based or object-oriented semantics (cf. Hirst 1987), which our WCY system uses, the treatment of compound nouns is straightforward when we employ a zero morpheme CPD.3 In LUCY, CPD has a list of translations in the semantic lexicon, each of which is a slot relation (a two-place predicate as its syntactic type) in the knowledge base. For example, for &amp;quot;dog food&amp;quot; CPD may be translated into (food-typically-eaten x y), where x must be an instance of class Animal and y that of Food. Thus, a translation of CPD is equivalent to a 2. CPD is leftward-looking to parallel the definition of a hyphen as in &amp;quot;four-wheeler&amp;quot;. 3. Some compound nouns are consider</context>
</contexts>
<marker>Hirst, 1987</marker>
<rawString>Hirst, Graeme. 1987. Semantic Interpretation and the Resolution of Ambiguity. Cambridge University Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jerry Hobbs</author>
<author>Paul Martin</author>
</authors>
<title>Local Pragmatics. in</title>
<date>1987</date>
<booktitle>Proceedings 1..ICAI-87.</booktitle>
<contexts>
<context position="5178" citStr="Hobbs and Martin (1987)" startWordPosition="849" endWordPosition="852">n the semantic lexicon, each of which is a slot relation (a two-place predicate as its syntactic type) in the knowledge base. For example, for &amp;quot;dog food&amp;quot; CPD may be translated into (food-typically-eaten x y), where x must be an instance of class Animal and y that of Food. Thus, a translation of CPD is equivalent to a 2. CPD is leftward-looking to parallel the definition of a hyphen as in &amp;quot;four-wheeler&amp;quot;. 3. Some compound nouns are considered as &amp;quot;idiomatic&amp;quot; single lexical entries, and they do not have a CPD morpheme. (e.g. &amp;quot;elephant garlic&amp;quot;) value bound to the &amp;quot;implicit relation&amp;quot; called nn that Hobbs and Martin (1987) introduce to resolve compound nouns in TACITUS. In our case, having CPD as a lexical item, we do not have to introduce such an implicit relation at the semantics level. An analogous zero morpheme provides a natural analysis for relative clauses, deriving a noun modifier from S. This zero morpheme, which we call REL-MOD, plays an important role in an analysis of pied-piping, which seems difficult for other approaches such as Steedman (1987, 1988). (See Pollard (1988) for his criticism of Steedman&apos;s approach.) Steedman assumes that relative pronouns are type-raised already in the lexicon and ha</context>
</contexts>
<marker>Hobbs, Martin, 1987</marker>
<rawString>Hobbs, Jerry and Paul Martin. 1987. Local Pragmatics. in Proceedings 1..ICAI-87.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hoeks e ma</author>
<author>Jack</author>
</authors>
<title>Categorial Morphology.</title>
<date>1985</date>
<publisher>Garland Publishing, Inc.</publisher>
<location>New York &amp; London.</location>
<marker>ma, Jack, 1985</marker>
<rawString>Hoeks e ma, Jack. 1985. Categorial Morphology. Garland Publishing, Inc. New York &amp; London.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Megumi Kameyama</author>
<author>Jim Barnett</author>
</authors>
<title>VP Ellipsis with Distributed Knowledge Sources.</title>
<date>1989</date>
<tech>MCC Technical Report number</tech>
<pages>145--89</pages>
<contexts>
<context position="7712" citStr="Kameyama and Barnett (1989)" startWordPosition="1272" endWordPosition="1275">level zero morpheme for an elided verb phrase (called VP-ELLIPSIS). During the discourse process in LUCY, the antecedent of VP-ELLIPS1S is recovered.&apos; Bill does VP-ELLIPSIS NP S\NP/(SINP) S\NP S\NP Now to summarize the advantages for having zero morphemes, first, zero morphemes like PRES and SG reduce redundancy in the lexicon. Second, zero morphemes seem to be a natural way to express words that do not appear 6. Each sentence must have one of the three mood features -- declarative, interrogative, and imperative mood. They are added by zero morphemes DECL, (DUES, and IMP, respectively. 7. See Kameyama and Barnett (1989). on the surface but have their overt counterparts (e.g., null accusative relative pronouns, vp-ellipsis). Third, since each zero morpheme has its own syntax and semantic interpretation in much the same way as overt morphemes, and since the semantic interpretations of binary rules that combine a zero morpheme with its argument (or functor) are kept as simple as they are in Categorial Grammar, semantic interpretations of sentences with zero morphemes are compositional and straightforward. Typically in the rule-based approach, the semantic operations of unary rules are more complicated: they mig</context>
</contexts>
<marker>Kameyama, Barnett, 1989</marker>
<rawString>Kameyama, Megumi and Jim Barnett. 1989. VP Ellipsis with Distributed Knowledge Sources. MCC Technical Report number ACT-HI-145-89.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Carl Pollard</author>
</authors>
<title>Categorial Grammar and Phrase Structure Grammar: An Excursion on the Syntax-Semantics Frontier. In</title>
<date>1988</date>
<booktitle>Categorial Grammars and Natural Language Structures. D.</booktitle>
<editor>R. Oehrle et al. (eds.),</editor>
<publisher>Reidel Publishing Company.</publisher>
<contexts>
<context position="5649" citStr="Pollard (1988)" startWordPosition="930" endWordPosition="931">es, and they do not have a CPD morpheme. (e.g. &amp;quot;elephant garlic&amp;quot;) value bound to the &amp;quot;implicit relation&amp;quot; called nn that Hobbs and Martin (1987) introduce to resolve compound nouns in TACITUS. In our case, having CPD as a lexical item, we do not have to introduce such an implicit relation at the semantics level. An analogous zero morpheme provides a natural analysis for relative clauses, deriving a noun modifier from S. This zero morpheme, which we call REL-MOD, plays an important role in an analysis of pied-piping, which seems difficult for other approaches such as Steedman (1987, 1988). (See Pollard (1988) for his criticism of Steedman&apos;s approach.) Steedman assumes that relative pronouns are type-raised already in the lexicon and have noun-modifier type (NIN)/(S/(SINP). In Figure 1, we show a derivation of a pied-piping relative clause &amp;quot;a man the daughter of whom John liked &amp;quot; using RELMOD.4 5 Other zero morphemes at the syntax level are used to deal with optional words. We define a zero morpheme for an invisible morpheme that is a counterpart of the overt one. An example is an accusative relative pronoun as in &amp;quot;a student (who) I met yesterday&amp;quot;. Another example of this kind is &amp;quot;you&amp;quot; in imperativ</context>
</contexts>
<marker>Pollard, 1988</marker>
<rawString>Pollard, Carl. 1988. Categorial Grammar and Phrase Structure Grammar: An Excursion on the Syntax-Semantics Frontier. In R. Oehrle et al. (eds.), Categorial Grammars and Natural Language Structures. D. Reidel Publishing Company.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stuart Shieber</author>
</authors>
<title>Using Restriction to Extend Parsing Algorithms for ComplexFeature-Based Formalisms.</title>
<date>1985</date>
<booktitle>In Proceedings of the 23rd Annual Meetings of the Association for Computational Linguistics_</booktitle>
<pages>145--152</pages>
<contexts>
<context position="15370" citStr="Shieber (1985)" startWordPosition="2593" endWordPosition="2594">or example, in Bear and Karttunen&apos;s (1979) treatment of wh-question and relative pronoun gaps in Phrase Structure Grammar, a gap is proposed at each vertex during parsing if there is a wh-question word or a relative pronoun in the stack. We can use an analogous approach for zero morphemes, but clearly this will be extremely inefficient. It is more so because 1) there is no restriction such as that there should be only one zero morpheme within an S clause, and 2) the stack is useless because zero morphemes are independent morphemes and are not &amp;quot;bound&amp;quot; to other morphemes comparable to wh-words. Shieber (1985) proposes a more efficient approach to gaps in the PATR-II formalism, extending Earley&apos;s algorithm by using restriction to do top-down filtering. While an approach to zero morphemes similar to Shieber&apos;s gap treatment is possible, we can see one advantage of ours. That is, our approach does not depend on what kind of parsing algorithm we choose. It can be top-down as well as bottom-up. 5. Conclusion Hoeksema (1985] argues for the rule-based approach over the zero morpheme approach, pointing out that the postulation of zero morphemes requires certain arbitrary decisions about their position in t</context>
</contexts>
<marker>Shieber, 1985</marker>
<rawString>Shieber, Stuart. 1985. Using Restriction to Extend Parsing Algorithms for ComplexFeature-Based Formalisms. In Proceedings of the 23rd Annual Meetings of the Association for Computational Linguistics_ 145-152.</rawString>
</citation>
<citation valid="true">
<title>An Introduction to Unification-Based Approaches to Grammar. CSLI,</title>
<date>1986</date>
<institution>Stanford University,</institution>
<location>California.</location>
<marker>1986</marker>
<rawString>1986. An Introduction to Unification-Based Approaches to Grammar. CSLI, Stanford University, California.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mark Steadman</author>
</authors>
<date>1985</date>
<booktitle>Dependency and Coordination in the Grammar of Dutch and English. Language.</booktitle>
<pages>61--523</pages>
<marker>Steadman, 1985</marker>
<rawString>Steadman, Mark. 1985. Dependency and Coordination in the Grammar of Dutch and English. Language. 61:523-568.</rawString>
</citation>
<citation valid="true">
<title>Combinatory Grammars and Parasitic Gaps. Natural Language and Linguistic Theory.</title>
<date>1987</date>
<pages>5--403</pages>
<contexts>
<context position="5178" citStr="(1987)" startWordPosition="852" endWordPosition="852">xicon, each of which is a slot relation (a two-place predicate as its syntactic type) in the knowledge base. For example, for &amp;quot;dog food&amp;quot; CPD may be translated into (food-typically-eaten x y), where x must be an instance of class Animal and y that of Food. Thus, a translation of CPD is equivalent to a 2. CPD is leftward-looking to parallel the definition of a hyphen as in &amp;quot;four-wheeler&amp;quot;. 3. Some compound nouns are considered as &amp;quot;idiomatic&amp;quot; single lexical entries, and they do not have a CPD morpheme. (e.g. &amp;quot;elephant garlic&amp;quot;) value bound to the &amp;quot;implicit relation&amp;quot; called nn that Hobbs and Martin (1987) introduce to resolve compound nouns in TACITUS. In our case, having CPD as a lexical item, we do not have to introduce such an implicit relation at the semantics level. An analogous zero morpheme provides a natural analysis for relative clauses, deriving a noun modifier from S. This zero morpheme, which we call REL-MOD, plays an important role in an analysis of pied-piping, which seems difficult for other approaches such as Steedman (1987, 1988). (See Pollard (1988) for his criticism of Steedman&apos;s approach.) Steedman assumes that relative pronouns are type-raised already in the lexicon and ha</context>
<context position="9412" citStr="(1987)" startWordPosition="1534" endWordPosition="1534">n terms of parsing. 2. Compiling Zero Morphemes In natural language processing, simply proposing zero morphemes at each juncture in a given input string during parsing would be a nightmare of inefficiency. However, using the fact that there are only a few binary rules in Categorial Grammar and each zero morpheme can combine with only a subset of these rules because of its directionality compatibility, we can pre-compile zero morphemes into equivalent unary rules and use the latter for parsing. Our approach is an extension of the predictive combinator compilation method discussed in Wittenburg (1987). The idea is that we first unify a zero morpheme M with the left or right daughS\NP apply&lt; apply&gt; apply&gt; apply&lt; 190 Let M be a zero morpheme, R be a binary rule. For each M in the grammar, do the following: For each binary rule R in the grammar if the syntax graph of M unifies with the left daughter of R then call the unified binary graph R&apos;, and make the right daughter of R&apos; the daughter of a new unary rule R1 make the parent of R&apos; the parent of R1 if the syntax graph of M unifies with the right daughter of R then call the unified binary graph FR&apos; make the left daughter of R&apos; the daughter of</context>
<context position="12326" citStr="(1987)" startWordPosition="2077" endWordPosition="2077"> source grammar with zero morphemes in the lexicon because these unary rules are originally derived by only using the zero morphemes and binary rules in the source grammar. Thus, a derivation which uses a unary rule can always be mapped to a derivation in the original grammar, and vice versa. For example, look at the following example of CPD-RULE vs. zero morpheme CPD: (5) a. dog food apply&gt; N N 77-1/Nâ cpd-rule b. dog CPD food N (N/N)\N N 1â¢â¢â 110â 1â¢â  N/N apply&lt; Now, if we assume that we use Categorial Grammar with four binary rules, namely, apply&gt;, applyr, compose&gt;, and composer, as Steedman (1987) does, we can predict, among 8 possibilities (4 rules and the 2 daughters for each rule), the maximum number of unary rules that we derive from a zero morpheme according to its syntactic type.8 if a zero morpheme is of type A/B, it unifies with the left daughters of apply&gt;, apply&lt; and compose&gt; and with the right daughters of apply&gt; and corn9. Zero morphemes do not combine with whword type-raising rule LIFT, which is the only unary rule in our grammar besides the compiled unary rules from zero morphemes. apply&gt; 191 pose&gt;. Thus, there are 5 possible unary rules for this type of zero morpheme. If</context>
</contexts>
<marker>1987</marker>
<rawString>1987. Combinatory Grammars and Parasitic Gaps. Natural Language and Linguistic Theory. 5:403-439.</rawString>
</citation>
<citation valid="true">
<title>Combinators and Grammars. In</title>
<date>1988</date>
<booktitle>Categorial Grammars and Natural Language Structures. D.</booktitle>
<editor>R. Oehrle et al. (eds.),</editor>
<publisher>Reidel Publishing Company.</publisher>
<contexts>
<context position="5628" citStr="(1987, 1988)" startWordPosition="927" endWordPosition="928">ingle lexical entries, and they do not have a CPD morpheme. (e.g. &amp;quot;elephant garlic&amp;quot;) value bound to the &amp;quot;implicit relation&amp;quot; called nn that Hobbs and Martin (1987) introduce to resolve compound nouns in TACITUS. In our case, having CPD as a lexical item, we do not have to introduce such an implicit relation at the semantics level. An analogous zero morpheme provides a natural analysis for relative clauses, deriving a noun modifier from S. This zero morpheme, which we call REL-MOD, plays an important role in an analysis of pied-piping, which seems difficult for other approaches such as Steedman (1987, 1988). (See Pollard (1988) for his criticism of Steedman&apos;s approach.) Steedman assumes that relative pronouns are type-raised already in the lexicon and have noun-modifier type (NIN)/(S/(SINP). In Figure 1, we show a derivation of a pied-piping relative clause &amp;quot;a man the daughter of whom John liked &amp;quot; using RELMOD.4 5 Other zero morphemes at the syntax level are used to deal with optional words. We define a zero morpheme for an invisible morpheme that is a counterpart of the overt one. An example is an accusative relative pronoun as in &amp;quot;a student (who) I met yesterday&amp;quot;. Another example of this kind </context>
</contexts>
<marker>1988</marker>
<rawString>1988. Combinators and Grammars. In R. Oehrle et al. (eds.), Categorial Grammars and Natural Language Structures. D. Reidel Publishing Company.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kent Wittenburg</author>
</authors>
<title>Natural Language Parsing with Combinatory Categorial Grammar in a Graph-Unification-Based Formalism. Doctoral dissertation,</title>
<date>1986</date>
<booktitle>In Proceedings of the 25th Annual Meetings of the Association for Computational Linguistics.</booktitle>
<institution>The University of Texas,</institution>
<location>Austin.</location>
<contexts>
<context position="1439" citStr="Wittenburg 1986" startWordPosition="226" endWordPosition="227">ategorial Grammar In English and in other natural languages, it is attractive to posit the existence of morphemes that are invisible on the surface but have their own syntactic and semantic definitions. In our analyses, they are just like any other overt morphemes except for having null strings (i.e. &amp;quot; &amp;quot;), and we call them zero morphemes. Most in Categorial Grammar and related forms of unification-based grammars, on the other hand, take the rule-based approach. That is, they assume that there are unary rules that change features or categories of their arguments (cf. Dowty 1977, Hoeksema 1985, Wittenburg 1986, Wood 1987). Below, we will discuss the advantages of our zero morpheme approach over the rule-based approach. Zero morphemes should be distinguished from so-called &amp;quot;gaps&amp;quot; in wh-questions and relative clauses in that zero morphemes are not traces or &amp;quot;place holders&amp;quot; of any other overt morphemes in a given sentence. There are at 1. The work described here is implemented in Common Lisp and being used in the Lucy natural language understanding system at MCC. least two types of zero morphemes: zero morphemes at the morphology level and those at the syntax level. A zero morpheme at the morphology l</context>
</contexts>
<marker>Wittenburg, 1986</marker>
<rawString>Wittenburg, Kent. 1986_ Natural Language Parsing with Combinatory Categorial Grammar in a Graph-Unification-Based Formalism. Doctoral dissertation, The University of Texas, Austin. 1987. Predictive combinators: A Method for Efficient Processing of Combinatory Categorial Grammars. In Proceedings of the 25th Annual Meetings of the Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kent Wittenburg</author>
<author>Chinatsu Aone</author>
</authors>
<title>Aspects of a Categorial Syntax/Semantics Interface.</title>
<date>1989</date>
<tech>MCC Technical Report number</tech>
<pages>143--89</pages>
<contexts>
<context position="11668" citStr="Wittenburg and Aone (1989)" startWordPosition="1959" endWordPosition="1962">to a new one. That is, if a unary rule R1 applies to some category A, giving A&apos;, and then a unary rule R2 applies to A&apos;, giving A&amp;quot;, we merge R1 and R2 into a new unary rule R3, which takes A as its argument and returns A&amp;quot;. For example, after compiling IMP-rule and IMP-YOU-rule from zero morphemes IMP and IMP-YOU (cf. (3)), we could merge these two rules into one rule, IMP+IMPYOU rule. During parsing, we use the merged rule and deactivate the original two rules. 3. The Grammar with Compiled zero morphemes The grammar with the resulting unary rules has the same generative capacity as the 8. See Wittenburg and Aone (1989) for the details of Lucy syntax/semantics interface. source grammar with zero morphemes in the lexicon because these unary rules are originally derived by only using the zero morphemes and binary rules in the source grammar. Thus, a derivation which uses a unary rule can always be mapped to a derivation in the original grammar, and vice versa. For example, look at the following example of CPD-RULE vs. zero morpheme CPD: (5) a. dog food apply&gt; N N 77-1/Nâ cpd-rule b. dog CPD food N (N/N)\N N 1â¢â¢â 110â 1â¢â  N/N apply&lt; Now, if we assume that we use Categorial Grammar with four binary rules, namely, </context>
</contexts>
<marker>Wittenburg, Aone, 1989</marker>
<rawString>Wittenburg, Kent and Chinatsu Aone. 1989. Aspects of a Categorial Syntax/Semantics Interface. MCC Technical Report number ACT-HI-143-89.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mary Wood</author>
</authors>
<title>Paradigmatic Rules for Categorial Grammars.</title>
<date>1987</date>
<tech>CCUUMIST Report,</tech>
<institution>Centre for Computational Linguistics, University of Manchester, Institute of Science and Technology.</institution>
<contexts>
<context position="1451" citStr="Wood 1987" startWordPosition="228" endWordPosition="229"> In English and in other natural languages, it is attractive to posit the existence of morphemes that are invisible on the surface but have their own syntactic and semantic definitions. In our analyses, they are just like any other overt morphemes except for having null strings (i.e. &amp;quot; &amp;quot;), and we call them zero morphemes. Most in Categorial Grammar and related forms of unification-based grammars, on the other hand, take the rule-based approach. That is, they assume that there are unary rules that change features or categories of their arguments (cf. Dowty 1977, Hoeksema 1985, Wittenburg 1986, Wood 1987). Below, we will discuss the advantages of our zero morpheme approach over the rule-based approach. Zero morphemes should be distinguished from so-called &amp;quot;gaps&amp;quot; in wh-questions and relative clauses in that zero morphemes are not traces or &amp;quot;place holders&amp;quot; of any other overt morphemes in a given sentence. There are at 1. The work described here is implemented in Common Lisp and being used in the Lucy natural language understanding system at MCC. least two types of zero morphemes: zero morphemes at the morphology level and those at the syntax level. A zero morpheme at the morphology level applies</context>
</contexts>
<marker>Wood, 1987</marker>
<rawString>Wood, Mary. 1987. Paradigmatic Rules for Categorial Grammars. CCUUMIST Report, Centre for Computational Linguistics, University of Manchester, Institute of Science and Technology.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>