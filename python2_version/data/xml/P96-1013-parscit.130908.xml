<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000001">
<title confidence="0.608812">
Parsing for Semidirectional Lambek Grammar is NP-Complete
</title>
<author confidence="0.902819">
Jochen Dorre
</author>
<affiliation confidence="0.9414015">
Institut fiir maschinelle Sprachverarbeitung
University of Stuttgart
</affiliation>
<sectionHeader confidence="0.989164" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.939103941176471">
We study the computational complexity
of the parsing problem of a variant of
Lambek Categorial Grammar that we call
semidirectional. In semidirectional Lambek
calculus SDL there is an additional non-
directional abstraction rule allowing the
formula abstracted over to appear any-
where in the premise sequent&apos;s left-hand
side, thus permitting non-peripheral ex-
traction. SDL grammars are able to gen-
erate each context-free language and more
than that. We show that the parsing prob-
lem for semidirectional Lambek Grammar
is NP-complete by a reduction of the 3-
Partition problem.
Key words: computational complexity,
Lambek Categorial Grammar
</bodyText>
<sectionHeader confidence="0.99968" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999533610169491">
Categorial Grammar (CG) and in particular Lambek
Categorial Grammar (LCG) have their well-known
benefits for the formal treatment of natural language
syntax and semantics. The most outstanding of these
benefits is probably the fact that the specific way,
how the complete grammar is encoded, namely in
terms of &apos;combinatory potentials&apos; of its words, gives
us at the same time recipes for the construction of
meanings, once the words have been combined with
others to form larger linguistic entities. Although
both frameworks are equivalent in weak generative
capacity — both derive exactly the context-free lan-
guages —, LCG is superior to CG in that it can cope
in a natural way with extraction and unbounded de-
pendency phenomena. For instance, no special cate-
gory assignments need to be stipulated to handle a
relative clause containing a trace, because it is an-
alyzed, via hypothetical reasoning, like a traceless
clause with the trace being the hypothesis to be dis-
charged when combined with the relative pronoun.
Figure 1 illustrates this proof-logical behaviour. No-
tice that this natural-deduction-style proof in the
type logic corresponds very closely to the phrase-
structure tree one would like to adopt in an analysis
with traces. We thus can derive Bill misses e as
an s from the hypothesis that there is a &amp;quot;phantom&amp;quot;
np in the place of the trace. Discharging the hypoth-
esis, indicated by index 1, results in Bill misses
being analyzed as an s 1 np from zero hypotheses. Ob-
serve, however, that such a bottom-up synthesis of a
new unsaturated type is only required, if that type
is to be consumed (as the antecedent of an impli-
cation) by another type. Otherwise there would be
a simpler proof without this abstraction. In our ex-
ample the relative pronoun has such a complex type
triggering an extraction.
A drawback of the pure Lambek Calculus L is that it
only allows for so-called &apos;peripheral extraction&apos;, i.e.,
in our example the trace should better be initial or
final in the relative clause.
This inflexibility of Lambek Calculus is one of the
reasons why many researchers study richer systems
today. For instance, the recent work by Moortgat
(Moortgat 94) gives a systematic in-depth study of
mixed Lambek systems, which integrate the systems
L, NL, NLP, and LP. These ingredient systems are
obtained by varying the Lambek calculus along two
dimensions: adding the permutation rule (P) and/or
dropping the assumption that the type combinator
(which forms the sequences the systems talk about)
is associative (N for non-associative).
Taken for themselves these variants of L are of lit-
tle use in linguistic descriptions. But in Moortgat&apos;s
mixed system all the different resource management
modes of the different systems are left intact in the
combination and can be exploited in different parts
of the grammar. The relative pronoun which would,
for instance, receive category (np\np)1(np –0 s)
with –o being implication in LP,1 i.e., it requires
</bodyText>
<footnote confidence="0.996316333333333">
1The Lambek calculus with permutation LP is also
called the &amp;quot;nondirectional Lambek calculus&amp;quot; (Ben-
them 88). In it the leftward and rightward implication
</footnote>
<page confidence="0.997773">
95
</page>
<figure confidence="0.989591">
(the book) which misses
(np\np)/(s/np) (np\s) I np [np]
Bill
np np\s
sInpi
np\np
</figure>
<figureCaption confidence="0.99995">
Figure I: Extraction as resource-conscious hypothetical reasoning
</figureCaption>
<bodyText confidence="0.999498346153846">
as an argument &amp;quot;an s lacking an np somewhere&amp;quot; .2.
The present paper studies the computational com-
plexity of a variant of the Lambek Calculus that lies
between L and LP, the Semidirectional Lambek Cal-
culus SDL.3 Since LP derivability is known to be NP-
complete, it is interesting to study restrictions on the
use of the LP operator —o. A restriction that leaves
its proposed linguistic applications intact is to admit
a type B —o A only as the argument type in func-
tional applications, but never as the functor. Stated
prove-theoretically for Gentzen-style systems, this
amounts to disallowing the left rule for —o. Surpris-
ingly, the resulting system SDL can be stated with-
out the need for structural rules, i.e., as a monolithic
system with just one structural connective, because
the ability of the abstracted-over formula to permute
can be directly encoded in the right rule for —0. 4
Note that our purpose for studying SDL is not that
it might be in any sense better suited for a theory of
grammar (except perhaps, because of its simplicity),
but rather, because it exhibits a core of logical be-
haviour that any richer system also needs to include,
at least if it should allow for non-peripheral extrac-
tion. The sources of complexity uncovered here are
thus a forteriori present in all these richer systems
as well.
</bodyText>
<footnote confidence="0.939168">
collapse.
2Morrill (Morrill 94) achieves the same effect with a
permutation modality A applied to the np gap: (31 6,np)
&apos;This name was coined by Esther Konig-Baumer, who
employs a variant of this calculus in her LexGram system
(Icanig 95) for practical grammar development.
4It should be pointed out that the resource manage-
ment in this calculus is very closely related to the han-
dling and interaction of local valency and unbounded
dependencies in HPSG. The latter being handled with
set-valued features SLASH, QUE and REL essentially emu-
lates the permutation potential of abstracted categories
in semidirectional Lambek Grammar. A more detailed
analysis of the relation between HPSG and SDL is given
in (Konig 95).
</footnote>
<sectionHeader confidence="0.973024" genericHeader="method">
2 Semidirectional Lambek Grammar
</sectionHeader>
<subsectionHeader confidence="0.999823">
2.1 Lambek calculus
</subsectionHeader>
<bodyText confidence="0.885840157894737">
The semidirectional Lambek calculus (henceforth
SDL) is a variant of J. Lambek&apos;s original (Lam-
bek 58) calculus of syntactic types. We start by
defining the Lambek calculus and extend it to ob-
tain SDL.
Formulae (also called &amp;quot;syntactic types&amp;quot;) are built
from a set of propositional variables (or &amp;quot;primitive
types&amp;quot;) B = {bl, b2, .} and the three binary con-
nectives •, \, /, called product, left implication, and
right implication. We use generally capital letters A,
B,C , ...to denote formulae and capitals towards the
end of the alphabet T,U,V,... to denote sequences
of formulae. The concatenation of sequences U and
V is denoted by (U, V).
The (usual) formal framework of these logics is a
Gentzen-style sequent calculus. Sequents are pairs
(U, A), written as U = A, where A is a type and U
is a sequence of types.&apos; The claim embodied by se-
quent U A can be read as &amp;quot;formula A is derivable
from the structured database U&amp;quot;. Figure 2 shows
Lambek&apos;s original calculus L.
First of all, since we don&apos;t need products to obtain
our results and since they only complicate matters,
we eliminate products from consideration in the se-
quel.
In Semidirectional Lambek Calculus we add as ad-
ditional connective the LP implication —o, but equip
it only with a right rule.
U, B, V =A
2=-13-0 A (-0 R) if T = (U,V) nonempty.
&apos;
5In contrast to Linear Logic (Girard 87) the order
of types in U is essential, since the structural rule of
permutation is not assumed to hold. Moreover, the fact
that only a single formula may appear on the right of
make the Lambek calculus an intuitionistic fragment of
the multiplicative fragment of non-commutative propo-
sitional Linear Logic.
</bodyText>
<page confidence="0.982828">
96
</page>
<figure confidence="0.901796222222222">
b b (Ax)
T=B U,A,V ,„\ U,B A „ if U nonempty
U, AI B ,T, V C U AIB if U nonempty
TB U,A,V B,U A „ D\
U, T, B\A, V = C 1-L&apos;) U B\A lb)
U,A,B,V r, UA
U, A • B,V C U,V (..R)
TA
U,T,V C (Cut)
</figure>
<figureCaption confidence="0.999581">
Figure 2: Lambek calculus L
</figureCaption>
<bodyText confidence="0.963618090909091">
Let us define the polarity of a subformula of a se-
quent A1, , A = A as follows: A has positive po-
larity, each of Ai have negative polarity and if BIC
or C\B has polarity p, then B also has polarity p
and C has the opposite polarity of p in the sequent.
A consequence of only allowing the (-o R) rule,
which is easily proved by induction, is that in any
derivable sequent -o may only appear in positive
polarity. Hence, -0 may not occur in the (cut) for-
mula A of a (Cut) application and any subformula
B -o A which occurs somewhere in the prove must
also occur in the final sequent. When we assume the
final sequent&apos;s RHS to be primitive (or -o-less), then
the (-o R) rule will be used exactly once for each
(positively) occuring -o-subformula. In other words,
(-o R) may only do what it is supposed to do: ex-
traction, and we can directly read off the category
assignment which extractions there will be.
We can show Cut Elimination for this calculus by a
straight-forward adaptation of the Cut elimination
proof for L. We omit the proof for reasons of space.
Proposition 1 (Cut Elimination) Each
SDL-derivable sequent has a cut-free proof
The cut-free system enjoys, as usual for Lambek-like
logics, the Subformula Property: in any proof only
subformulae of the goal sequent may appear.
In our considerations below we will make heavy use
of the well-known count invariant for Lambek sys-
tems (Benthem 88), which is an expression of the
resource-consciousness of these logics. Define #b(A)
(the b-count of A), a function counting positive and
negative occurrences of primitive type b in an arbi-
trary type A, to be
</bodyText>
<equation confidence="0.776011">
1
0 ifA=b
</equation>
<bodyText confidence="0.683602">
if A primitive and A 0 b
</bodyText>
<equation confidence="0.992681">
#6(A) = #b(B)- #b(C) if A :--- BIC or A= C\B
1
orA=C--oB
#b(B) -I- #b(C) if A = B • C
</equation>
<bodyText confidence="0.994938583333333">
The invariant now states that for any primitive b,
the b-count of the RHS and the LHS of any derivable
sequent are the same. By noticing that this invariant
is true for (Ax) and is preserved by the rules, we
immediately can state:
Proposition 2 (Count Invariant) IfESDL U
A, then #b(U) = #b(A) for any b E B.
Let us in parallel to SDL consider the fragment of it
in which (/R) and (\R) are disallowed. We call this
fragment SDL-. Remarkable about this fragment is
that any positive occurrence of an implication must
be -o and any negative one must be / or \
</bodyText>
<subsectionHeader confidence="0.996494">
2.2 Lambek Grammar
</subsectionHeader>
<construct confidence="0.775677">
Definition 3 We define a Lambek grammar to be a
quadruple (E,..F,bs,1) consisting of the finite alpha-
bet of terminals E, the set .F of all Lambek formulae
generated from some set of propositional variables
which includes the distinguished variable s, and the
lexical map 1: E 2.;* which maps each terminal to
a finite subset of .F.
</construct>
<bodyText confidence="0.998766">
We extend the lexical map I to nonempty strings
of terminals by setting /(wiw2 wn) := d(wi) x
</bodyText>
<equation confidence="0.786485">
/(w2) x x /(wn) for wiw2 ...wn E E+.
</equation>
<footnote confidence="0.690110666666667">
The language generated by a Lambek grammar G =
(E,T,b5,1) is defined as the set of all strings
w1tv2 wn E E+ for which there exists a sequence
</footnote>
<page confidence="0.995451">
97
</page>
<figure confidence="0.9311569">
S
(IL)
A2, .13; &amp;quot;, B2, cT, C2, Cr&apos;, bn= X
2x(-oR)
BI- 4, B2, CT, C2, Cr&apos;, c -0 (b -o
B1&amp;quot;, B2) CP.) C2) bn+1 y (*)
x Ani -1, A2, B, B2, cT, C2, C, b = x 2x(-oR)
(IL)
A7-1, 212, , B2 C2 C -0 (b --o x)
A7, A2, .1312, B2, Cr, C2 X
</figure>
<figureCaption confidence="0.999885">
Figure 3: Proof of A7, A2, B&amp;quot;?, B2, cT, C2 = x
</figureCaption>
<bodyText confidence="0.990817621621622">
of types U E 1(wiw2 wn) and FL U bs. We
denote this language by L(G).
An SDL-grammar is defined exactly like a Lambek
grammar, except that 1-su replaces EL.
Given a grammar G and a string w = w1w2 wn,
the parsing (or recognition) problem asks the ques-
tion, whether w is in L(G).
It is not immediately obvious, how the generative
capacity of SDL-grammars relate to Lambek gram-
mars or nondirectional Lambek grammars (based
on calculus LP). Whereas Lambek grammars gener-
ate exactly the context-free languages (modulo the
missing empty word) (Pentus 93), the latter gen-
erate all permutation closures of context-free lan-
guages (Benthem 88). This excludes many context-
free or even regular languages, but includes some
context-sensitive ones, e.g., the permutation closure
of an bn cn
Concerning SDL, it is straightforward to show that
all context-free languages can be generated by SDL-
grammars.
Proposition 4 Every context-free language is gen-
erated by some SDL-grammar.
Proof. We can use a the standard transformation
of an arbitrary cfr. grammar G = (N ,T, P, 8) to a
categorial grammar G&apos;. Since -o does not appear
in G&apos; each SDL-proof of a lexical assignment must
be also an L-proof, i.e. exactly the same strings are
judged grammatical by SDL as are judged by L. 0
Note that since the {(Ax), (I L),(\L)} subset of L
already accounts for the cfr. languages, this obser-
vation extends to SDL-.
Moreover, some languages which are not context-free
can also be generated.
Example. Consider the following grammar G for
the language an bncn . We use primitive types B =
{b , c, x, y, z} and define the lexical map for E =
</bodyText>
<equation confidence="0.978370666666667">
{a, b, c} as follows:
1(a) := x 1 (c -o (b -o x)), x I (c -o (b -o y)) )
=A1 =A2
1(b) := (y 1 y, (y11911 z }
= = -bi2
1(c) := (z/ce, }.
</equation>
<bodyText confidence="0.995716090909091">
The distinguished primitive type is x. To simplify
the argumentation, we abbreviate types as indicated
above.
Now, observe that a sequent U = x, where U is the
image of some string over E, only then may have bal-
anced primitive counts, if U contains exactly one oc-
currence of each of A2, B2 and C2 (accounting for the
one supernumerary x and balanced y and z counts)
and for some number n &gt; 0, n occurrences of each
of A1, B1, and C1 (because, resource-oriented speak-
ing, each Bi and Ci &amp;quot;consume&amp;quot; a b and c, resp., and
each Ai &amp;quot;provides&amp;quot; a pair b, c). Hence, only strings
containing the same number of a&apos;s, b&apos;s and c&apos;s may
be produced. Furthermore, due to the Subformula
Property we know that in a cut-free proof of U x,
the main formula in abstractions (right rules) may
only be either c -o (b -o X) or b -o X, where
X E {x,y}, since all other implication types have
primitive antecedents. Hence, the LHS of any se-
quent in the proof must be a subsequence of U, with
some additional b types and c types interspersed.
But then it is easy to show that U can only be of
the form
Al&apos;, A2, Br , B2, Cr&apos;, C2,
since any / connective in U needs to be introduced
via (IL).
It remains to be shown, that there is actually a proof
for such a sequent. It is given in Figure 3.
The sequent marked with *is easily seen to be deriv-
able without abstractions.
A remarkable point about SDL&apos;s ability to cover this
language is that neither L nor LP can generate it.
Hence, this example substantiates the claim made in
</bodyText>
<page confidence="0.99194">
98
</page>
<bodyText confidence="0.996839888888889">
(Moortgat 94) that the inferential capacity of mixed
Lambek systems may be greater than the sum of
its component parts. Moreover, the attentive reader
will have noticed that our encoding also extends to
languages having more groups of n symbols, i.e., to
languages of the form a7a72&apos;
Finally, we note in passing that for this grammar the
rules (/R) and (\R) are irrelevant, i.e. that it is at
the same time an SDI grammar.
</bodyText>
<sectionHeader confidence="0.6689845" genericHeader="method">
3 NP-Completeness of the Parsing
Problem
</sectionHeader>
<bodyText confidence="0.9998396">
We show that the Parsing Problem for SDL-
grammars is NP-complete by a reduction of the
3-Partition Problem to it.6 This well-known NP-
complete problem is cited in (GareyJohnson 79) as
follows.
</bodyText>
<listItem confidence="0.667702">
Instance: Set A of 3m elements, a bound N E
Z+, and a size s(a) E Z+ for each
a E A such that &lt; s(a) &lt;1+ and
EnEA s(a)= mN.
Question: Can A be partitioned into m disjoint
sets Ai, A2, ,A, such that, for
1 &lt; &lt; m, s(a) = N (note
that each Ai must therefore contain
exactly 3 elements from A)?
Comment: NP-complete in the strong sense.
</listItem>
<bodyText confidence="0.998820857142857">
Here is our reduction. Let r = (A, in, N, s) be
a given 3-Partition instance. For notational conve-
nience we abbreviate (...((A1B1)1B2)1 _VA, by
A/B„ • ...• B2 • B1 and similarly B, -0 (• • • (131 -0
A) . . .) by Bn• ...• B2 • Bi -0 A, but note that this
is just an abbreviation in the product-free fragment.
Moreover the notation Ak stands for
</bodyText>
<equation confidence="0.4592355">
A • A • . . . • A
k times
</equation>
<bodyText confidence="0.921384">
We then define the SDL-grammar Gr = bs, I)
as follows:
</bodyText>
<equation confidence="0.9913055">
E
.1 := all formulae over primitive types
B= {a, d}
bs := a
1(v) := a/ (q. • b3 • . . . • bm3 • 41 • 47 • . . . • cN -0 d)
for 1 &lt; i &lt; 3m - 1:
l(w) := U1&lt;j&lt;rn did•ki •c;(ai)
l(w3rn) Lit&lt; &lt;rn d bi • ei(a3m)
</equation>
<footnote confidence="0.9854396">
6A similar reduction has been used in (LincolnWin-
kler 94) to show that derivability in the multiplicative
fragment of propositional Linear Logic with only the con-
nectives —o and (equivalently Lambek calculus with
permutation LP) is NP-complete.
</footnote>
<bodyText confidence="0.885067166666667">
The word we are interested in is v w1 w2
We do not care about other words that might be
generated by Gr. Our claim now is that a given
3-Partition problem r is solvable if and only if
V w3,7, is in L(Gr). We consider each direction
in turn.
</bodyText>
<construct confidence="0.944634666666667">
Lemma 5 (Soundness) If a 3-Partition problem
F = (A, in, N, s) has a solution, then v w1...w3,, is
in L(Gr)•
</construct>
<bodyText confidence="0.999163333333333">
Proof. We have to show, when given a solution to F,
how to choose a type sequence U E d(vwi
and construct an SDL proof for U = a. Suppose
A = {al, a2, , a3,}. From a given solution (set
of triples) A1, A2, ,A,, we can compute in poly-
nomial time a mapping k that sends the index of
an element to the index of its solution triple, i.e.,
k(i) = j if ai E Ai. To obtain the required sequence
U, we simply choose for the wi terminals the type
</bodyText>
<figure confidence="0.420599181818182">
did • bk(i). cs(,a.,`) (resp. 0143m ). cks()
,&amp;quot;&amp;quot;;) for w3m).
Hence the complete sequent to solve is:
al (b? • • . . . • b3,„ • civ • c12v • . . . • c,,N d)
did • bk(i) • csk((q1))
(*) dld • bk(3rn - 1) • csk(a3Z- 11.)
d/bkom) • Csk((a33n7))
a
Let a/B0, Barn a be a shorthand for (*),
and let X stand for the sequence of primitive types
b k (3m) Cs4a33,77)) b (31.11— 1), Csk((a33,77:11? , • • • bk (1) , C 34c; ) •
</figure>
<bodyText confidence="0.9970026">
Using rule (IL) only, we can obviously prove
, B37n , X = d. Now, applying (-o R)3m-I-Nm
times we can obtain B1, B3m,= /30, since there
are in total, for each i, 3 bi and N ci in X. As final
step we have
</bodyText>
<equation confidence="0.8394825">
, B3m Bo a a ,
a/B0, a &amp;quot;)
</equation>
<bodyText confidence="0.946962">
which completes the proof. 0
</bodyText>
<construct confidence="0.77029275">
Lemma 6 (Completeness) Let F = (A, m, N, s)
be an arbitrary 3-Partition problem and Gr the cor-
responding SDL-grammar as defined above. Then r
has a solution, if t.; tv .w,,, is in L(Gr)•
</construct>
<reference confidence="0.7010646">
Proof. Let v wi ...w3m E L(Gr) and
a/(b33. • ... • b3m ciiv • ... • cmN -o d), Bi, B3m a
be a witnessing derivable sequent, i.e., for 1 &lt; i &lt;
3m, B, E ). Now, since the counts of this se-
quent must be balanced, the sequence B1,
</reference>
<page confidence="0.998802">
99
</page>
<bodyText confidence="0.999473166666667">
must contain for each 1 &lt; j &lt; m exactly 3 bi and
exactly N ci as subformulae. Therefore we can read
off the solution to I&apos; from this sequent by including
in Aj (for 1 &lt; j &lt; m) those three ai for which Bi
has an occurrence of b, say these are aj(1), ni(2) and
ct2(3). We verify, again via balancedness of the prim-
itive counts, that s(aj(i)) s(a3(2))+ s(ai(3)) = N
holds, because these are the numbers of positive and
negative occurrences of ci in the sequent. This com-
pletes the proof. 0
The reduction above proves NP-hardness of the pars-
ing problem. We need strong NP-completeness of
3-Partition here, since our reduction uses a unary
encoding. Moreover, the parsing problem also lies
within NP, since for a given grammar G proofs are
linearly bound by the length of the string and hence,
we can simply guess a proof and check it in polyno-
mial time. Therefore we can state the following:
</bodyText>
<figureCaption confidence="0.7121605">
Theorem 7 The parsing problem for SDL is NP-
complete.
</figureCaption>
<bodyText confidence="0.9823025">
Finally, we observe that for this reduction the rules
(/R) and (\R) are again irrelevant and that we can
extend this result to SDL
–
</bodyText>
<sectionHeader confidence="0.999592" genericHeader="conclusions">
4 Conclusion
</sectionHeader>
<bodyText confidence="0.999709777777778">
We have defined a variant of Lambek&apos;s original cal-
culus of types that allows abstracted-over categories
to freely permute. Grammars based on SDL can
generate any context-free language and more than
that. The parsing problem for SDL, however, we
have shown to be NP-complete. This result indi-
cates that efficient parsing for grammars that al-
low for large numbers of unbounded dependencies
from within one node may be problematic, even in
the categorial framework. Note that the fact, that
this problematic case doesn&apos;t show up in the correct
analysis of normal NL sentences, doesn&apos;t mean that
a parser wouldn&apos;t have to try it, unless some arbi-
trary bound to that number is assumed. For practi-
cal grammar engineering one can devise the motto
avoid accumulation of unbounded dependencies by
whatever means.
On the theoretical side we think that this result for
SOL is also of some importance, since SDL exhibits
a core of logical behaviour that any (Lambek-based)
logic must have which accounts for non-peripheral
extraction by some form of permutation. And hence,
this result increases our understanding of the nec-
essary computational properties of such richer sys-
tems. To our knowledge the question, whether the
Lambek calculus itself or its associated parsing prob-
lem are NP-hard, are still open.
</bodyText>
<sectionHeader confidence="0.99846" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999694206896552">
J. van Benthem. The Lambek Calculus. In R. T. 0.
et al. (Ed.), Categorial Grammars and Natural Lan-
guage Structures, pp. 35-68. Reidel, 1988.
M. R. Garey and D. S. Johnson. Computers
and Intractability—A Guide to the Theory of NP-
Completeness. Freeman, San Francisco, Cal., 1979.
J.-Y. Girard. Linear Logic. Theoretical Computer
Science, 50(1):1-102, 1987.
E. Konig. LexGram - a practical categorial gram-
mar formalism. In Proceedings of the Workshop on
Computational Logic for Natural Language Process-
ing. A Joint COMPULOGNET/ELSNET/EAGLES
Workshop, Edinburgh, Scotland, April 1995.
J. Lambek. The Mathematics of Sentence Struc-
ture. American Mathematical Monthly, 65(3):154-
170, 1958.
P. Lincoln and T. Winkler. Constant-Only Multi-
plicative Linear Logic is NP-Complete. Theoretical
Computer Science, 135(1):155-169, Dec. 1994.
M. Moortgat. Residuation in Mixed Lambek Sys-
tems. In M. Moortgat (Ed.), Lambek Calculus. Mul-
timodal and Polymorphic Extensions, DYANA-2 de-
liverable R1.1.B. ESPRIT, Basic Research Project
6852, Sept. 1994.
G. Morrill. Type Logical Grammar: Categorial Logic
of Signs. Kluwer, 1994.
M. Pentus. Lambek grammars are context free. In
Proceedings of Logic in Computer Science, Montreal,
1993.
</reference>
<page confidence="0.990619">
100
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.785034">
<title confidence="0.998198">Parsing for Semidirectional Lambek Grammar is NP-Complete</title>
<author confidence="0.979974">Jochen Dorre</author>
<affiliation confidence="0.9941045">Institut fiir maschinelle Sprachverarbeitung University of Stuttgart</affiliation>
<abstract confidence="0.99860175">We study the computational complexity of the parsing problem of a variant of Lambek Categorial Grammar that we call semidirectional Lambek calculus SDL there is an additional nondirectional abstraction rule allowing the formula abstracted over to appear anywhere in the premise sequent&apos;s left-hand side, thus permitting non-peripheral extraction. SDL grammars are able to generate each context-free language and more than that. We show that the parsing problem for semidirectional Lambek Grammar is NP-complete by a reduction of the 3- Partition problem.</abstract>
<keyword confidence="0.997676">Key words: computational complexity,</keyword>
<intro confidence="0.828807">Lambek Categorial Grammar</intro>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Proof</author>
</authors>
<title>Let v wi ...w3m E L(Gr) and a/(b33. • ... • b3m ciiv • ... • cmN -o d), Bi, B3m a be a witnessing derivable sequent, i.e., for 1</title>
<date>1988</date>
<booktitle>i &lt; 3m, B, E ). Now, since the</booktitle>
<pages>35--68</pages>
<location>Reidel,</location>
<marker>Proof, 1988</marker>
<rawString>Proof. Let v wi ...w3m E L(Gr) and a/(b33. • ... • b3m ciiv • ... • cmN -o d), Bi, B3m a be a witnessing derivable sequent, i.e., for 1 &lt; i &lt; 3m, B, E ). Now, since the counts of this sequent must be balanced, the sequence B1, J. van Benthem. The Lambek Calculus. In R. T. 0. et al. (Ed.), Categorial Grammars and Natural Language Structures, pp. 35-68. Reidel, 1988.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M R Garey</author>
<author>D S Johnson</author>
</authors>
<title>Computers and Intractability—A Guide to the Theory of NPCompleteness. Freeman,</title>
<date>1979</date>
<location>San Francisco, Cal.,</location>
<marker>Garey, Johnson, 1979</marker>
<rawString>M. R. Garey and D. S. Johnson. Computers and Intractability—A Guide to the Theory of NPCompleteness. Freeman, San Francisco, Cal., 1979.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J-Y Girard</author>
</authors>
<title>Linear Logic.</title>
<date>1987</date>
<journal>Theoretical Computer Science,</journal>
<pages>50--1</pages>
<marker>Girard, 1987</marker>
<rawString>J.-Y. Girard. Linear Logic. Theoretical Computer Science, 50(1):1-102, 1987.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Konig</author>
</authors>
<title>LexGram - a practical categorial grammar formalism.</title>
<date>1995</date>
<booktitle>In Proceedings of the Workshop on Computational Logic for Natural Language Processing. A Joint COMPULOGNET/ELSNET/EAGLES Workshop,</booktitle>
<location>Edinburgh, Scotland,</location>
<marker>Konig, 1995</marker>
<rawString>E. Konig. LexGram - a practical categorial grammar formalism. In Proceedings of the Workshop on Computational Logic for Natural Language Processing. A Joint COMPULOGNET/ELSNET/EAGLES Workshop, Edinburgh, Scotland, April 1995.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Lambek</author>
</authors>
<title>The Mathematics of Sentence Structure.</title>
<date>1958</date>
<pages>65--3</pages>
<publisher>American Mathematical Monthly,</publisher>
<marker>Lambek, 1958</marker>
<rawString>J. Lambek. The Mathematics of Sentence Structure. American Mathematical Monthly, 65(3):154-170, 1958.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Lincoln</author>
<author>T Winkler</author>
</authors>
<title>Constant-Only Multiplicative Linear Logic is NP-Complete.</title>
<date>1994</date>
<journal>Theoretical Computer Science,</journal>
<booktitle>In M. Moortgat (Ed.), Lambek Calculus. Multimodal and Polymorphic Extensions, DYANA-2 deliverable R1.1.B. ESPRIT, Basic Research Project 6852,</booktitle>
<pages>135--1</pages>
<marker>Lincoln, Winkler, 1994</marker>
<rawString>P. Lincoln and T. Winkler. Constant-Only Multiplicative Linear Logic is NP-Complete. Theoretical Computer Science, 135(1):155-169, Dec. 1994. M. Moortgat. Residuation in Mixed Lambek Systems. In M. Moortgat (Ed.), Lambek Calculus. Multimodal and Polymorphic Extensions, DYANA-2 deliverable R1.1.B. ESPRIT, Basic Research Project 6852, Sept. 1994.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Morrill</author>
</authors>
<title>Type Logical Grammar: Categorial Logic of Signs.</title>
<date>1994</date>
<publisher>Kluwer,</publisher>
<marker>Morrill, 1994</marker>
<rawString>G. Morrill. Type Logical Grammar: Categorial Logic of Signs. Kluwer, 1994.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Pentus</author>
</authors>
<title>Lambek grammars are context free.</title>
<date>1993</date>
<booktitle>In Proceedings of Logic in Computer Science,</booktitle>
<location>Montreal,</location>
<marker>Pentus, 1993</marker>
<rawString>M. Pentus. Lambek grammars are context free. In Proceedings of Logic in Computer Science, Montreal, 1993.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>