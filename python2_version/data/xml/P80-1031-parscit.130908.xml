<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000001">
<note confidence="0.666001">
ATN 0,Attl4R /10DELMIG MI APPLIED LINGUISTICS
</note>
<author confidence="0.746618">
T. P. KEHLER
</author>
<affiliation confidence="0.9462728">
Department of Mathematics and Physics
Texas Woman&apos;s University
R. C. MODS
Department of Coaputer Science
Virginia Technological University
</affiliation>
<bodyText confidence="0.993815642857143">
ABSTRACT: AugmentedlransitiOn Network graamars have
significant areas of unexplored application as a simula-
tion tool for grannar designers. The intent of this pa-
per is to discuss scene current efforts in developing a
grammar testing tool for the specialist in linguistics.
The scope of the system under discussion is to display
structures based on the nndeled graunar. Full language
definiticmiwith facilitation of semantic interpretation
is not within the scope of the systems described in this
Paper. Application of grannar testing to an applied
linguistics research enviLuuu=tt is emphasized. Exten-
sions to the teaching of linguistics principles and to
refinement of the primitive ATN functions are also con-
sidered.
</bodyText>
<listItem confidence="0.717109">
1. Using Network Mbdels in Experimental Graamar Design
</listItem>
<bodyText confidence="0.94425925">
Application of the ATN to general grammar modeling
for simulation and comparative purposes was first sug-
gested by Woods(1). Motivating factors for using the
network model as an applied grammar design tool are:
</bodyText>
<listItem confidence="0.982239">
1. The model provides a means of organizing struc-
tural descriptions at any level, from surface
syntax to deep propositional interpretations.
2. A network andel may be used to represent differ-
ent theoretical approaches to grammar definition.
3. The graphical representation of a grammar permit-
ted by the network model is a relatively clear
and precise way to express notions about struc-
ture.
4. Camputatio-nal sinulation of the grammar enables
systematic tracing of subcceponents and testing
against text data.
</listItem>
<bodyText confidence="0.999798224489796">
Grilles (2), in a series of linguistics workshops, demon-
sated the utility of the network model even in envi-
ummits where computational testing of granuars was not
possible. Grimes, along with other contributors to the
referenced work, illustrated the flexibility of the Al
in tagmemic analysis of grammatical structures. ATN
implementations have mostly focused on effective natural
language understanding systems, assuming a computation-
ally sophisticated research etnrirmutt. Implementations
are often in an environment which requires scae in-
depth understanding and support of LISP systems. Re-
cently much of the information on the ATN formalism,
applications and techniques for implementation was sum-
marized by Bates (3). Though many systems have been
developed, little attention has been given to creating
an interactive grammar modeling system for an individual
with highly developed linguistics skills but poorly de-
veloped computational skills.
The individual involved in field linguistics is
concerned with developing concise workable descriptions
of some corpus of data in a given Language. Particular
problem in developing rules for interpreting surface
structures are proposed and discussed in relation to
the data. In field linguistics applications, this in-
volves developing a taxonomy of structural types follaw-
ed by hypothesizing underlying rule systems which pro-
vide the highest level of data integration at a
syntactic as well as semantic level of analysis. The
AIN is proposed as a tool for assisting the linguist to
develop systematic descriptions of language data. It is
assumed that the typical user will interface with the
system at a point where an Ani and lexicon have been
developed. The AIN is developed fran the theoretical
model chosen by the linguist.
Once the AIN is implemented as a ccuputational pro-
cedure, the user enters test data, displays structures,
examines the lexicon, and edits the grammar to produce
a refined ATN grammar description. The displayed struc-
tures provide a labeled structural interpretation of the
input string based on the linguistic model used. Trac-
ing&apos;of the parse may be used to follow the process of
building the structural interpretation. Ccoputational
implementation requires giving attention to the details
of the interrelationships of gra:met:1.nel rules and the
interaction between the grammar rule system and the lex-
ical representation. Testing the grammar against data
forces a level of systemization that is significantly
more rigorous than discussion oriented evaluation of
gramer systems.
</bodyText>
<sectionHeader confidence="0.717592" genericHeader="method">
2. Design Considerations
</sectionHeader>
<bodyText confidence="0.9999761">
The general design goal for the grammar testing
system described here is to provide a tool for develop-
ing experimentally driven, systematic representation
models of language data. Engineering of a full Language
understanding system is not the primary focus of the
efforts described in this paper. Ideally, one would
like to provide a tool which would attract applied lin-
guists to use such a system as a simulation environment
for andel development.
The design goals for the system described are:
</bodyText>
<listItem confidence="0.9997162">
1. Ease of use for both novice and expert modes of
operation,
2. Perspicuity of grammar representation,
3. Support for a variety of linguistic theories,
4. Transportability to a variety of systems.
</listItem>
<bodyText confidence="0.999981058823529">
The prototype grammar design system consists of a
grammar generator, an editor, and a monitor. The func-
tion of the grammar editor is to provide a means of
defining and manipulating grammar descriptions without
requiring the user to work in a specific programming
language environment. The editor is also used to edit
lexicons. The editor knows about the A emvironment
and can provide assistance to the user as needed.
The monitor&apos;s function is to handle input and out-
put of grammar and lexicon files, manage displays and
trarPs of parsings, provide consultation on the system
use as needed, and enable the user to cycle from editor
to parsing with minimum effort. The monitor can also be
used to provide facilities for studying grammar effi-
ciency. Transportability of the grammar modeling system
is established by a program generator which enables im-
plementation in different programming languages.
</bodyText>
<page confidence="0.997771">
123
</page>
<listItem confidence="0.353433">
3. Two Implementatioms of Grammar Testing Systems
</listItem>
<bodyText confidence="0.99986025">
To develop some understanding on the design and
implementation requirements for a system as spec-
ified in the previous section, two experimental grammar
testing systems have been developed. A partial AIN im-
plementation was done by Kehler(4) in a system (SNOPAR)
which provided some interactive grammar and development
facilities. SNOPAR incorporated several of the basic
features of a grammar generator and monitor, with a
limited editor, a grammar generator and a number of
other features.
Both SNOPAR and ADEPT are implemented in SNOBOL
and both have been transported across operating systems
(i.e. TOPS-20 to IBM&apos;s CMS). For implementation of text
editing and program grammar generation, the SNOBOL4
language is reasonable. However, the lack of comprehen-
sive list storage management is a limitation on the ex-
tension of this implementation to a full natural lan-
guage understanding system. Originally, SNOBOL was used
because a suitable I.TCP was not available to the
implementor.
</bodyText>
<subsectionHeader confidence="0.722249">
3.1 SNOPAR
</subsectionHeader>
<bodyText confidence="0.953352633333334">
SNOPAR provides the following functions: grammar
creation and editing, lexicon creation and editing, ex-
ecution (with scae error trapping), traring/debugging
and file handling. The greater creation portion has as
an option use of an interactive grammar to create an
ATN. One of the goals in the design of SAOPARwas to
introduce a notation which was easier to read than the
LISP representation most frequently used.
Two basic formats have been used for writing gram-
mars in SAMUL One separates the context-free syntax
type operations fran the tests and actions of the gram-
mar. This action block format is of the following gen-
eral form:
arc- type-block
state arc-type :S(DO(test-action-block))
arc-type :S(DD(test-action-block))
:F (F7E1URN)
where arc-type is a CAT, PARSE or FINDWRD etc., and
test-action-block appears as follows:
test-action-block
state arc-test ! action :S(TD(arc-type-block))
arc-test I action :S(&apos;DO(arc-type-block))
where an arc-test is a COMPAR or other test and an
action is a SETR or BUILDS type action. Note that an
additional intermediate state is introduced for the test
and actions of the A.
The more sta dard format used is given as:
state-4 arc-type -.2, condition-test-and-action-block
--ipnew-state
An exaaple noun phrase is given as:
</bodyText>
<listItem confidence="0.6875735">
NP CAT(&apos;DET&apos;) StaR(&apos;NP&apos;,&apos;DET&apos;,Q) :S(IO(&apos;ADJ&apos;))
CAT(&apos;NPR&apos;) sbut(We&apos;,&apos;NPR&apos;,Q)
: S (&apos;ID( &apos; POP1P &apos; ) )F (FREIURN)
ADJ CAT(&apos;ADJ&apos;) SEIX(&apos;RP&apos;,&apos;ADJ&apos;,Q) :S(TO(&apos;ADJ&amp;quot;))
CAT(&apos;N&apos;) StTR(&apos;NP&apos;,&apos;N&apos;,Q)
: S (TO ( &apos; N&apos; ) )F (FREIURN)
NPP PARSE(PPO) bt..c.R(&apos;NP&apos;,&apos;NFP&apos;,Q):S(TO(&apos;UPP&apos;))
POPNP NP = BUILDS (NP) :(REILTO)
</listItem>
<bodyText confidence="0.976889647058823">
The Parse function calls subnetworks which consist of
Parse, Cat or other arc-types. Structures are initial-
ly built through use of the Stilt function which uses
the top level constituent name (e.g. NP) to form a list
of the constituents referenced by the register name in
SEM. All registers are treated as stacks. The BUILDS
function may use the implicit register name sequence as
a default to build the named structure. The top level
constituent naae (i.e. NP) contains a list of the regis-
ters set during the parse which beccaes the default list
for structure building. There are global stacks for
history taking and back up functions.
Typically, for other than the initial creation of a
ammar by a naive user, the AIN function library of the
system is used in conjunction with a system editor for
grammar development. Several AIN grammars have been
written with this system.
</bodyText>
<subsectionHeader confidence="0.993498">
3.2 ADEPT ,
</subsectionHeader>
<bodyText confidence="0.99885475">
In an effort to make an easy-to-use simulation tool
for linguists, the basic concepts of SNOPAR were extend-
ed by Wbods(5) to a full ATN implementation in a system
called ADEPT. ADEPT is a system for generating AMIN pro-
gram through the use of a network editor, lexicon
editor, error correction and detection component, and a
monitor for execution of the grammar. Figure 1 shows
the system organization of ADEPT.
</bodyText>
<table confidence="0.906773555555556">
The editor in ADEPT provides the following
functions:
- network creation&apos;
- arc deletion or editing
- arc insertion
- arc reordering
- state insertion and deletion
The four main editor oaanmli types are suaaarized below:
E &lt;rlef&gt; Edits a network
(Creates it if it doesn&apos;t exist)
E &lt;State&gt;,&lt;State&gt; Edit arc information
D &lt;nee&gt; Deletes a network
D &lt;stat Deletes a state
D &lt;State&gt;,Otat4&gt; Delete an arc
I &lt;state&gt; Insert a state
I &lt;state&gt; Xstate&gt; Insert an arc
O &lt;stat.0 Order arcs from a state
L &lt;filenam0 List networks
</table>
<bodyText confidence="0.999846384615385">
State, network, and arc editing are distinguished by
context and the arguments of the E, D, or I commands.
For a previously undefined E net causes definition of
the network. The user must specify all states in the
network before starting. The editor processes the state
list requesting arc relations and art information such as
the tests or arc actions. The states are used to help
diagnose errors caused by misspelling If a state or
omission of a state.
Once the network is defined, arcs may by edited by
specifying the origin and destination of the arc. The
arc information is presented in the following order: arc
destination, arc type, arc test and arc actions. Each of
</bodyText>
<figure confidence="0.997239733333333">
MN DiiPlay
AMI Program
Generator
AIN Functions IN1
vparser
ATN Grammar
Program
MN
Grammar
Editor
AM Files
the
?iI.exicon
xicon -
Le14Editor
</figure>
<page confidence="0.984599">
124
</page>
<bodyText confidence="0.9884768">
these it is displayed, permitting the user to Change
values on the arc list by typing in the needed informa-
tion. MUltiple arcs between states are differentiated
by specifying the order number of the arc or by dis-
playing all arcs to the user and requesting selection
of the desired arc.
New arcs are inserted in the network by the I ccm-
mend. Nhenever an arc insert is performed all arcs from
the state are mcbered and displayed. After the user
specifies the number of the arc that the new arc is to
follow, the arc information is entered.
Arcs may be reordered by specifying the starting
state for the arcs of interest using the 0 command. The
user is then requested to specify the new ordering of the
arcs.
Insertion and deletion of a state requires that the
editor determine the states which may be reached from
the new state as well as finding which arcs terminate on
the new state. Once this information has been establish-
ed, the arc information may be entered.
Nhen a state is deleted, all arcs which immediately
leave the state or which enter the state fras other
states are removed. Error conditions existing in the
network as a result of the deletion are then reported.
The user then either verifies the requested deletion and
corrects any errors or cancels the request.
Grammar files are stored in a list format. The PUT
command causes all networks currently defined to be writ-
ten out to a file. GET will read in and define a grammar.
If the network is already defined, the network is not
read in.
By placing a series of checking functions in an ATI
editor, it is possible to filter out many potential
errors before a grammar is tested. The user is Able to
focus an the grammar model and not on the specific pro-
gnawing requirements. A monitor program provides a top
level interface to the user once a grammar is defined for
parsing sentences. In addition, the monitor program
manages the stacks as well as the SEM, LIFT and HOLD
lists for the network grammar. Switches may be set to
control the tracing of the parse.
An Additional feature of the Ubods ADEPT system is
the use of easy to read displays for the lexicon and
grammar. An example arc is shown:
012)--CAT(&apos;DET.)-- (ADJ)
</bodyText>
<sectionHeader confidence="0.558822" genericHeader="method">
***NO TESTS. ***
ACTIONS
</sectionHeader>
<bodyText confidence="0.9474408">
stiat(&apos;DET&apos;)
ADEPT has been used to develop a small grammar of
English. Future experiments are planned for using
ADEPT in an linguistics applications oriented environ-
rent.
</bodyText>
<listItem confidence="0.584955">
4. Experiments in Grammar Modeling
</listItem>
<bodyText confidence="0.999662526315789">
Utilization of the ATN as a grammar definition
system in Linguistics and language education is still at
an early stage of development. Ueischedel et.al.(6)
have developed an AIN-based system as an intelligent
CAI too for teaching foreign language. ithin the
SNOPAR system, experiments in modeling English transfor-
mational grammar exercises and modeling field linguis-
tics exercises have been carried out. In field linguis-
tics research some grammar development has been done.
Of interest here is the systematic formulation of rule
systems associated with the syntax and semantics of
natural Language subsystems. Proposed model grammars can
be evaluated for efficiency of representation and extend-
ibility to a larger corpus of data. Essential to this
approach is the existence of a self-contained easy-to-use
transportable Am modeling systems. In the following
sections some example applications of grammar testing to
field linguistics exercises and application to modeling
a Language indigenous to the Philippines are given.
</bodyText>
<subsectionHeader confidence="0.828025">
4.1 An Exercise Computationally Assisted Taxonomy
</subsectionHeader>
<bodyText confidence="0.999720357142857">
Typical exercises in a first course in field lin-
guistics give the student a series of phrases or senten-
ces in a language not known to the student. Taxonomic
analysis of the data is to be done producing a set of
formulas for constituent types and the hierarchical
relationship of constituents. In this particular case a
tagmemic analysis is done. Consider the following three
sentences selected from Apinaye exercise (Problem 100)(7):
kukren kokoi the monkey eats
kukren kokoi rack the big donkey eats
ape rack mih mach the good man works well
First a simple lexicon is contructed, from this and other
data. Secondly, immediate constituent analysis is car-
ried out to yield the following tagmemic formulae:
</bodyText>
<equation confidence="0.999551333333333">
ICL := Pred:VP + Subj:NP
NP := Head:N + Nmod:AD
VP := Head :V + Vmod:AD
</equation>
<bodyText confidence="0.959111">
The AIN is then defined as a simple syntactic organiza-
tion of constituent types. The SROPAR representation of
this grammar would be:
</bodyText>
<equation confidence="0.969465642857143">
ICL PARSE(VP()) St (&apos;ICL&apos;,&apos;Pred&apos;,Q)
:5(10 &apos;SU&apos; ) )F (FREDJRN)
SU PARSE(NP()) SETR(&apos;ICI,&apos;,&apos;SUbj&apos;,01)
:S(IO(&apos;POPICL&apos;))F(FREIURN)
PoPia. ICL = BUELDS(Ia..) (RETURN)
VP CAT(&apos;V&apos;) st;ER(&apos;VP&apos;,&apos;Head&apos;,Q)
:S(TO( &apos;VMOD&apos;))F(FRETURN)
VMOD CAT(&apos;AD&apos;)
POPVP VP = BUMS (VP) : (RETURN)
NP CAT(&apos;N&apos;) SETR(&apos;NP&apos;,&apos;Head&apos;,Q)
:5(T0(&apos;N1OD&apos;))F(FRETURN)
NMOD CAT(&apos;AD&apos;) SETR(&apos;NP&apos;,&apos;NMod&apos;,Q)
POPNP NP = BUILDS(NP) :(REIURN)
END
</equation>
<bodyText confidence="0.9593185">
Thus permitting the parse of the first sentence (Kukren
kokoi) as:
</bodyText>
<figure confidence="0.8916904375">
(ICL
CPred
(VP
(Read KUKREN)))
(Subj
(NP
(Read KOKOI))))
English gloss may be used as in the following example:
GLOSS:
WORK MUCH MAN WELL/GOD The good man works a lot.
STATE: ICL LOUT:
(ICL
CPred
(VP
(Head APE
Mod RAH)))
</figure>
<footnote confidence="0.91057375">
(SCbj
(Head MIH)
(214od MFH))))
Each sentence in the exercise may be entered, making
</footnote>
<page confidence="0.997452">
125
</page>
<bodyText confidence="0.993708416666666">
corrections to the grammar as needed. Once the basic
notions of syntax and hierarchy are established, the
model may then be extended to incorporate context-
sensitive and semantic features. Frequently, in propos-
ing a taxosomi for a series of sentences, one is tempted
to propose mmarous structural types in order to handle
all of the data. The orientation of grammar testing
encourages the user to look for more concise representa-
tions. Tracing the sentence parse can yield information
about the efficiency of the representation. Tracing is
also illustrative to the student, permitting many pars-
ings to be Observed.
</bodyText>
<subsectionHeader confidence="0.996851">
4.2 Cotabato Manobo
</subsectionHeader>
<bodyText confidence="0.985191896551724">
An A2N representation of a graamar for Cotabato
Mancbo was done by Errington(3) using the manual propos-
ed by Grimes (2). Recently, the gramma:class implemented
and tested using SNOPAR. The implementation took place
over a three month period with initial implementation at
the word level and eventual extension to the clause
level with conjunctions and eabedding. Comments were
used throughout the grammar OD explain the rational for
partimiaT. arc types, tests or actions.
A.wide variety of clause types are handled by the
grammar A specific requirement in the Mambo grammar
is the ability to handle a significant amount of test-
ing on the arcs. For example, it is not uncommon to
have three or for arcs of the same type differentiated
by checks on registers from previous points in the parse.
With nine network types, this leads to a considerable
amount of time being spent in context checking. A
straight forward approach to the grammar design leads to
a considerable amount of backing up in the parse. Utile
a high speed parse was not an objective of the design,
it did point out the difficulty in designing gramrs of
significant size without getting in to provamming
practice and applying more efficient parsing routines.
Since an objective of the project is to provide a sys-
tem which emphasizes the linguistics and not prograaming
practice, it was necessary to maintain descriptive
clarity at the sacrifice of performance. An example
parse for a clause is given:
E.G KAEN SA STAN SA BEGAS -- The person is eating rice
</bodyText>
<figure confidence="0.887412538461538">
GLOSS:
EAT THE PERSON.PEOPLE THE RICE
3TAM : CL LAPLIT :
(a,
(VP
(v13
onm)
(1/07 EG) action is &apos;eat&apos;
(Vms FRES)
(Vt1OD BASIC)
(TDOC AL-PORF)
(VTYPE1 MANS)
(VSTEIKAUi)))
(NTYPE VB)))
(FCC focus is &apos;the people&apos;
3`IP
(Mr SA)
(NUC
wax
1/4,4 ETAW)))))
(ACM actor is &apos;the people&apos;
(HP
(DET SA)
(NUC
(MCC
(N =4) ) ) ) )
</figure>
<reference confidence="0.500575285714286">
(NONACT object is &apos;rice&apos;
(MP
mer SA)
aldc
(mc
(N SWAS))))))
5. Summary and Conclusions
</reference>
<bodyText confidence="0.955326884615385">
Development of a relatively easy to use, transpor-
table graamar design system can make possible the use of
grammar modeling in the applied linguistics environment,
in education and in linguistics research. A first step
in this effort has been carried out by implementing, tao
experimental systems,SNOPAR and ADT, which emphasize
notational clarity and an editor/monitor interface to
the user. The network editor is designed to provide
error handling, correction and interactiontaith the user
in establishing a network model of the grammar
Some applications of SNOPAR have been made to
testing taxonomically based grammars. Future use of
ADEPT in the linguistics education/research is planned.
Developing a user-oriented Am modeling system for
linguists provides certain insights to the AT model
itself. Such things as the perspicuity of the A1
representation of a grammar and the ATN model applica-
bility to a variety of language types can be evaluated.
In addition, a core widespread application of AINs can
lead to same standardization in grammar modeling.
The related issue of developing interfaces for user
extension of grarmars in natural language processing
systeas can be investigated fran increased use of the
ATN model by the person who is not a sperialist in arti-
ficial intelligence. The systems general design does
not Limit itself to application to the AZA =del.
</bodyText>
<sectionHeader confidence="0.812124" genericHeader="method">
6. References
</sectionHeader>
<reference confidence="0.99984132">
1. Woods, W., Transition Network Grams for Natural
Language Analysis, Ccanunications of the ACM, vol.
13, no. 10, 1970.
Grimes, J., Transition Network Grammars, A Guide,
Network Grammars, Grimes, J., ed., 1975.
3. Bates, iladelein, The Theory and Practice of Augment-
ed Transition Network Grammars, Lecture Notes in
Computer Science, Coos, G. and Hartmanis, J., ed.,
l97t.
4. Kehler, T.P., SNOPAR: A Grammar Testing System,
AJCL 55, 1976.
5. Woods, C.A., ADEPT - Testing System for Augmented
Transition Network Graamars, Masters Thesis,
Virginia Tech, 1979.
6. Weischedel. R14., Voge, Tilt, James, M., An
Artificial Intelligence Approach to Language Instruc-
tion, Artificial Intelligence, Vol. 10, No. 3, 1978.
7. Merrifield, WilLimaR., Constance M. Naish, Calvin
R.&apos;Rensch, Gillian Story, Laboratory Manual for
Moroholov and Syntax, 196/.
3. Errington, Ross, &apos;Transition Network Grammar of
Cotabato Mao.&apos; Studies in Philippine Linguistics,
edited by Casilda Edrial-luzares ani Austin Hale.
Volume 3, Number 2. Manila: Summer Institute of
Linguistics. 1979.
</reference>
<page confidence="0.998528">
126
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.000001">
<title confidence="0.992364">ATN 0,Attl4R /10DELMIG MI APPLIED LINGUISTICS</title>
<author confidence="0.999969">T P KEHLER</author>
<affiliation confidence="0.969477">Department of Mathematics and Physics Texas Woman&apos;s University</affiliation>
<author confidence="0.975004">R C MODS</author>
<affiliation confidence="0.998861">Department of Coaputer Science Virginia Technological University</affiliation>
<abstract confidence="0.99710965060241">AugmentedlransitiOn Network graamars have significant areas of unexplored application as a simulatool for grannar intent of this paper is to discuss scene current efforts in developing a grammar testing tool for the specialist in linguistics. The scope of the system under discussion is to display structures based on the nndeled graunar. Full language definiticmiwith facilitation of semantic interpretation is not within the scope of the systems described in this Paper. Application of grannar testing to an applied linguistics research enviLuuu=tt is emphasized. Extensions to the teaching of linguistics principles and to refinement of the primitive ATN functions are also considered. 1. Using Network Mbdels in Experimental Graamar Design Application of the ATN to general grammar modeling simulation and comparative purposes suggested by Woods(1). Motivating factors for using the network model as an applied grammar design tool are: 1. The model provides a means of organizing structural descriptions at any level, from surface syntax to deep propositional interpretations. 2. A network andel may be used to represent different theoretical approaches to grammar definition. 3. The graphical representation of a grammar permitted by the network model is a relatively clear and precise way to express notions about structure. 4. sinulation of the grammar enables systematic tracing of subcceponents and testing against text data. Grilles (2), in a series of linguistics workshops, demonsated the utility of the network model even in enviummits where computational testing of granuars was not possible. Grimes, along with other contributors to the referenced work, illustrated the flexibility of the Al in tagmemic analysis of grammatical structures. ATN implementations have mostly focused on effective natural language understanding systems, assuming a computationally sophisticated research etnrirmutt. Implementations often in an environment which requires scae depth understanding and support of LISP systems. Recently much of the information on the ATN formalism, applications and techniques for implementation was summarized by Bates (3). Though many systems have been developed, little attention has been given to creating an interactive grammar modeling system for an individual highly developed linguistics poorly decomputational The individual involved in field linguistics is concerned with developing concise workable descriptions of some corpus of data in a given Language. Particular problem in developing rules for interpreting surface structures are proposed and discussed in relation to the data. In field linguistics applications, this involves developing a taxonomy of structural types follawed by hypothesizing underlying rule systems which provide the highest level of data integration at a syntactic as well as semantic level of analysis. The AIN is proposed as a tool for assisting the linguist to develop systematic descriptions of language data. It is assumed that the typical user will interface with the system at a point where an Ani and lexicon have been developed. The AIN is developed fran the theoretical model chosen by the linguist. Once the AIN is implemented as a ccuputational procedure, the user enters test data, displays structures, examines the lexicon, and edits the grammar to produce a refined ATN grammar description. The displayed structures provide a labeled structural interpretation of the input string based on the linguistic model used. Tracing&apos;of the parse may be used to follow the process of building the structural interpretation. Ccoputational implementation requires giving attention to the details of the interrelationships of gra:met:1.nel rules and the interaction between the grammar rule system and the lexical representation. Testing the grammar against data forces a level of systemization that is significantly more rigorous than discussion oriented evaluation of gramer systems. 2. Design Considerations goal for the grammar testing described here is to provide tool developing experimentally driven, systematic representation models of language data. Engineering of a full Language understanding system is not the primary focus of the efforts described in this paper. Ideally, one would to provide a would attract applied linguists to use such a system as a simulation environment for andel development. The design goals for the system described are: 1. Ease of use for both novice and expert modes of operation, 2. Perspicuity of grammar representation, 3. Support for a variety of linguistic theories, 4. Transportability to a variety of systems. The prototype grammar design system consists of a grammar generator, an editor, and a monitor. The funcof the grammar editor to a means of defining and manipulating grammar descriptions without requiring the user to work in a specific programming environment. The editor is also used lexicons. The editor knows about the A emvironment and can provide assistance to the user as needed. monitor&apos;s function to input and output of grammar and lexicon files, manage displays and trarPs of parsings, provide consultation on the system needed, and enable the user to cycle from editor to parsing with minimum effort. The monitor can also be used to provide facilities for studying grammar efficiency. Transportability of the grammar modeling system is established by a program generator which enables implementation in different programming languages. 123 3. Two Implementatioms of Grammar Testing Systems To develop some understanding on the design and implementation requirements for a system as specified in the previous section, two experimental grammar systems have been developed. A partial implementation was done by Kehler(4) in a system (SNOPAR) which provided some interactive grammar and development facilities. SNOPAR incorporated several of the basic features of a grammar generator and monitor, with a limited editor, a grammar generator and a number of other features. SNOPAR and implemented in SNOBOL and both have been transported across operating systems TOPS-20 IBM&apos;s CMS). implementation of text editing and program grammar generation, the SNOBOL4 However, the lack of comprehensive list storage management is a limitation on the exof this implementation full natural language understanding system. Originally, SNOBOL was used a suitable I.TCPwas not available to the implementor. 3.1 SNOPAR SNOPAR provides the following functions: grammar creation and editing, lexicon creation and editing, execution (with scae error trapping), traring/debugging and file handling. The greater creation portion has as an option use of an interactive grammar to create an ATN. One of the goals in the design of SAOPARwas to introduce a notation which was easier to read than the LISP representation most frequently used. Two basic formats have been used for writing grammars in SAMUL One separates the context-free syntax type operations fran the tests and actions of the grammar. This action block format is of the following general form: arctype-block state arc-type :S(DO(test-action-block)) arc-type :S(DD(test-action-block)) :F (F7E1URN) arc-type CAT, PARSE or and test-action-block appears as follows: test-action-block state arc-test ! action :S(TD(arc-type-block)) arc-test I action :S(&apos;DO(arc-type-block)) an arc-test COMPAR or other test and an action is a SETR or BUILDS type action. Note that an additional intermediate state is introduced for the test and actions of the A. The more sta dard format used is given as: condition-test-and-action-block --ipnew-state An exaaple noun phrase is given as:</abstract>
<degree confidence="0.781198777777778">StaR(&apos;NP&apos;,&apos;DET&apos;,Q) :S(IO(&apos;ADJ&apos;)) CAT(&apos;NPR&apos;) sbut(We&apos;,&apos;NPR&apos;,Q) : S (&apos;ID( &apos; POP1P &apos; ) )F (FREIURN) ADJ CAT(&apos;ADJ&apos;) SEIX(&apos;RP&apos;,&apos;ADJ&apos;,Q) :S(TO(&apos;ADJ&amp;quot;)) CAT(&apos;N&apos;) StTR(&apos;NP&apos;,&apos;N&apos;,Q) : S (TO ( &apos; N&apos; ) )F (FREIURN) PARSE(PPO) POPNP NP = BUILDS (NP) :(REILTO) The Parse function calls subnetworks which consist of</degree>
<abstract confidence="0.986718053571429">Parse, Cat or other arc-types. Structures are initialbuilt through use of the Stilt function which the top level constituent name (e.g. NP) to form a list of the constituents referenced by the register name in All registers are treated as stacks. function may use the implicit register name sequence as a default to build the named structure. The top level naae (i.e. a list of the registers set during the parse which beccaes the default list for structure building. There are global stacks for history taking and back up functions. for other than initial of a by a naive user, the library of the system is used in conjunction with a system editor for development. Several have been written with this system. , an effort an easy-to-use simulation tool for linguists, the basic concepts of SNOPAR were extendby Wbods(5) to a full in a system ADEPT is system for generating program through the use of a network editor, lexicon editor, error correction and detection component, and a monitor for execution of the grammar. Figure 1 shows system organization of editor in the following functions: network creation&apos; arc deletion or editing arc insertion arc reordering state insertion and deletion four main editor oaanmli types are E &lt;rlef&gt; Edits a network (Creates it if it doesn&apos;t exist) E &lt;State&gt;,&lt;State&gt; Edit arc information D &lt;nee&gt; Deletes a network D &lt;stat Deletes a state D &lt;State&gt;,Otat4&gt; Delete an arc I &lt;state&gt; Insert a state I &lt;state&gt; Xstate&gt; Insert an arc O &lt;stat.0 Order arcs from a state L &lt;filenam0 List networks State, network, and arc editing are distinguished by context and the arguments of the E, D, or I commands. For a previously undefined E net causes definition of network. The user must states in the network before starting. The editor processes the state list requesting arc relations and art information such as the tests or arc actions. The states are used to help diagnose errors caused by misspelling If a state or omission of a state. the network arcs may by edited by specifying the origin and destination of the arc. The information in the following order: arc destination, arc type, arc test and arc actions. Each of</abstract>
<title confidence="0.8139925">AMI Program Generator Functions Program MN Grammar</title>
<abstract confidence="0.894449831858407">Editor the ?iI.exicon xicon - 124 these it is displayed, permitting the user to Change values on the arc list by typing in the needed information. MUltiple arcs between states are differentiated by specifying the order number of the arc or by disall arcs user and requesting selection of the desired arc. New arcs are inserted in the network by the I ccmmend. Nhenever an arc insert is performed all arcs from the state are mcbered and displayed. After the user the number of the arc that the new arc to the arc information Arcs may be reordered by specifying the starting state for the arcs of interest using the 0 command. The requested the new ordering of the arcs. Insertion and deletion of a state requires that the editor determine the states which may be reached from the new state as well as finding which arcs terminate on the new state. Once this information has been established, the arc information may be entered. Nhen a state is deleted, all arcs which immediately leave the state or which enter the state fras other states are removed. Error conditions existing in the network as a result of the deletion are then reported. The user then either verifies the requested deletion and corrects any errors or cancels the request. Grammar files are stored in a list format. The PUT command causes all networks currently defined to be written out to a file. GET will read in and define a grammar. If the network is already defined, the network is not read in. By placing a series of checking functions in an ATI it out many potential errors before a grammar is tested. The user is Able to focus an the grammar model and not on the specific prognawing requirements. A monitor program provides a top interface user once a grammar is defined for parsing sentences. In addition, the monitor program manages the stacks as well as the SEM, LIFT and HOLD for the network grammar. Switches may be set control the tracing of the parse. An Additional feature of the Ubods ADEPT system is the use of easy to read displays for the lexicon and grammar. An example arc is shown: (ADJ) ***NO TESTS. *** ACTIONS stiat(&apos;DET&apos;) has been used a small grammar of English. Future experiments are planned for using ADEPT in an linguistics applications oriented environrent. 4. Experiments in Grammar Modeling Utilization of the ATN as a grammar definition system in Linguistics and language education is still at an early stage of development. Ueischedel et.al.(6) have developed an AIN-based system as an intelligent CAI too for teaching foreign language. ithin the SNOPAR system, experiments in modeling English transformational grammar exercises and modeling field linguistics exercises have been carried out. In field linguistics research some grammar development has been done. Of interest here is the systematic formulation of rule systems associated with the syntax and semantics of natural Language subsystems. Proposed model grammars can be evaluated for efficiency of representation and extendlarger corpus of data. Essential to this approach is the existence of a self-contained easy-to-use systems. In the following some example applications of grammar testing field linguistics exercises and application to modeling Language indigenous Philippines are given. 4.1 An Exercise Computationally Assisted Taxonomy Typical exercises in a first course in field linguistics give the student a series of phrases or sentences in a language not known to the student. Taxonomic of the data is to producing a set of formulas for constituent types and the hierarchical relationship of constituents. In this particular case a tagmemic analysis is done. Consider the following three sentences selected from Apinaye exercise (Problem 100)(7): kukren kokoi the monkey eats kukren kokoi rack the big donkey eats ape rack mih mach the good man works well First a simple lexicon is contructed, from this and other data. Secondly, immediate constituent analysis is carried out to yield the following tagmemic formulae: ICL := Pred:VP + Subj:NP NP := Head:N + Nmod:AD VP := Head :V + Vmod:AD The AIN is then defined as a simple syntactic organization of constituent types. The SROPAR representation of this grammar would be: ICL PARSE(VP()) St (&apos;ICL&apos;,&apos;Pred&apos;,Q) :5(10 &apos;SU&apos; ) )F (FREDJRN) PARSE(NP()) :S(IO(&apos;POPICL&apos;))F(FREIURN) ICL BUELDS(Ia..) VP CAT(&apos;V&apos;) st;ER(&apos;VP&apos;,&apos;Head&apos;,Q) :S(TO( &apos;VMOD&apos;))F(FRETURN) VMOD CAT(&apos;AD&apos;) POPVP VP = BUMS (VP) : (RETURN) NP CAT(&apos;N&apos;) SETR(&apos;NP&apos;,&apos;Head&apos;,Q) :5(T0(&apos;N1OD&apos;))F(FRETURN) NMOD CAT(&apos;AD&apos;) SETR(&apos;NP&apos;,&apos;NMod&apos;,Q) POPNP NP = BUILDS(NP) :(REIURN) END Thus permitting the parse of the first sentence (Kukren</abstract>
<note confidence="0.763306863636364">kokoi) as: (ICL CPred (VP (Read KUKREN))) (Subj (NP (Read KOKOI)))) English gloss may be used as in the following example: GLOSS: WORK MUCH MAN WELL/GOD The good man works a lot. STATE: ICL LOUT: (ICL CPred (VP (Head APE Mod RAH))) (SCbj (Head MIH) (214od MFH)))) Each sentence in the exercise may be entered, making 125</note>
<abstract confidence="0.918654904255319">to the grammar Once the basic notions of syntax and hierarchy are established, the may then to incorporate contextsensitive and semantic features. Frequently, in proposa taxosomi for a series of sentences, one to propose mmarous structural types in order to handle all of the data. The orientation of grammar testing the user to look for representations. Tracing the sentence parse can yield information about the efficiency of the representation. Tracing is also illustrative to the student, permitting many parsings to be Observed. 4.2 Cotabato Manobo An A2N representation of a graamar for Cotabato Mancbo was done by Errington(3) using the manual proposed by Grimes (2). Recently, the gramma:class implemented and tested using SNOPAR. The implementation took place over a three month period with initial implementation at the word level and eventual extension to the clause level with conjunctions and eabedding. Comments were throughout the grammar the rational for partimiaT. arc types, tests or actions. A.wide variety of clause types are handled by the grammar A specific requirement in the Mambo grammar is the ability to handle a significant amount of testing on the arcs. For example, it is not uncommon to have three or for arcs of the same type differentiated by checks on registers from previous points in the parse. With nine network types, this leads to a considerable amount of time being spent in context checking. A straight forward approach to the grammar design leads to a considerable amount of backing up in the parse. Utile a high speed parse was not an objective of the design, it did point out the difficulty in designing gramrs of significant size without getting in to provamming practice and applying more efficient parsing routines. Since an objective of the project is to provide a system which emphasizes the linguistics and not prograaming practice, it was necessary to maintain descriptive clarity at the sacrifice of performance. An example parse for a clause is given: KAEN STAN SA BEGAS -- The person rice GLOSS: EAT THE PERSON.PEOPLE THE RICE 3TAM : CL LAPLIT : (a, (VP (v13 onm) EG) is &apos;eat&apos; (Vt1OD BASIC) (VTYPE1 MANS) (VSTEIKAUi))) (FCC focus is &apos;the people&apos; 3`IP (NUC wax is &apos;the people&apos; (HP (NUC (MCC (N =4) ) ) ) ) object &apos;rice&apos; (MP aldc (mc (N SWAS)))))) 5. Summary and Conclusions Development of a relatively easy to use, transportable graamar design system can make possible the use of grammar modeling in the applied linguistics environment, in education and in linguistics research. A first step in this effort has been carried out by implementing, tao experimental systems,SNOPAR and ADT, which emphasize notational clarity and an editor/monitor interface to the user. The network editor is designed to provide error handling, correction and interactiontaith the user in establishing a network model of the grammar Some applications of SNOPAR have been made to testing taxonomically based grammars. Future use of in the linguistics education/research Developing a user-oriented Am modeling system for linguists provides certain insights to the AT model itself. Such things as the perspicuity of the A1 representation of a grammar and the ATN model applicability to a variety of language types can be evaluated. In addition, a core widespread application of AINs can lead to same standardization in grammar modeling. The related issue of developing interfaces for user extension of grarmars in natural language processing can be investigated use of the ATN model by the person who is not a sperialist in artificial intelligence. The systems general design does not Limit itself to application to the AZA =del.</abstract>
<note confidence="0.967472789473684">6. References Woods, Network Grams for Natural Analysis, of the ACM,vol. 13, no. 10, 1970. Grimes, J., Transition Network Grammars, A Guide, Grammars,Grimes, J., ed., 1975. 3. Bates, iladelein, The Theory and Practice of Augment- Transition Network Grammars, Notes in Science,Coos, G. and Hartmanis, J., ed., l97t. Kehler, T.P., Grammar Testing System, AJCL 55, 1976. 5. Woods, C.A., ADEPT - Testing System for Augmented Network Graamars, Masters Virginia Tech, 1979. Weischedel. M., An Artificial Intelligence Approach to Language Instruc- Intelligence,Vol. 10, No. 3, 1978. 7. Merrifield, WilLimaR., Constance M. Naish, Calvin</note>
<author confidence="0.717302">Gillian Story</author>
<author confidence="0.717302">Manual for</author>
<note confidence="0.899485857142857">and Syntax,196/. Ross, &apos;Transition Network Grammar of Mao.&apos; in Philippine Linguistics, edited by Casilda Edrial-luzares ani Austin Hale. Volume 3, Number 2. Manila: Summer Institute of Linguistics. 1979. 126</note>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="false">
<title>NONACT object is &apos;rice&apos;</title>
<journal>(MP mer SA) aldc (mc (N SWAS</journal>
<marker></marker>
<rawString> (NONACT object is &apos;rice&apos; (MP mer SA) aldc (mc (N SWAS))))))</rawString>
</citation>
<citation valid="false">
<institution>Summary and Conclusions</institution>
<contexts>
<context position="9482" citStr="(5)" startWordPosition="1464" endWordPosition="1464">ed structure. The top level constituent naae (i.e. NP) contains a list of the registers set during the parse which beccaes the default list for structure building. There are global stacks for history taking and back up functions. Typically, for other than the initial creation of a ammar by a naive user, the AIN function library of the system is used in conjunction with a system editor for grammar development. Several AIN grammars have been written with this system. 3.2 ADEPT , In an effort to make an easy-to-use simulation tool for linguists, the basic concepts of SNOPAR were extended by Wbods(5) to a full ATN implementation in a system called ADEPT. ADEPT is a system for generating AMIN program through the use of a network editor, lexicon editor, error correction and detection component, and a monitor for execution of the grammar. Figure 1 shows the system organization of ADEPT. The editor in ADEPT provides the following functions: - network creation&apos; - arc deletion or editing - arc insertion - arc reordering - state insertion and deletion The four main editor oaanmli types are suaaarized below: E &lt;rlef&gt; Edits a network (Creates it if it doesn&apos;t exist) E &lt;State&gt;,&lt;State&gt; Edit arc info</context>
</contexts>
<marker>5.</marker>
<rawString>Summary and Conclusions</rawString>
</citation>
<citation valid="true">
<authors>
<author>W Woods</author>
</authors>
<title>Transition Network Grams for Natural Language Analysis,</title>
<date>1970</date>
<journal>Ccanunications of the ACM,</journal>
<volume>13</volume>
<editor>Grimes, J., Transition Network Grammars, A Guide, Network Grammars, Grimes, J., ed.,</editor>
<contexts>
<context position="1094" citStr="(1)" startWordPosition="161" endWordPosition="161">tem under discussion is to display structures based on the nndeled graunar. Full language definiticmiwith facilitation of semantic interpretation is not within the scope of the systems described in this Paper. Application of grannar testing to an applied linguistics research enviLuuu=tt is emphasized. Extensions to the teaching of linguistics principles and to refinement of the primitive ATN functions are also considered. 1. Using Network Mbdels in Experimental Graamar Design Application of the ATN to general grammar modeling for simulation and comparative purposes was first suggested by Woods(1). Motivating factors for using the network model as an applied grammar design tool are: 1. The model provides a means of organizing structural descriptions at any level, from surface syntax to deep propositional interpretations. 2. A network andel may be used to represent different theoretical approaches to grammar definition. 3. The graphical representation of a grammar permitted by the network model is a relatively clear and precise way to express notions about structure. 4. Camputatio-nal sinulation of the grammar enables systematic tracing of subcceponents and testing against text data. Gr</context>
</contexts>
<marker>1.</marker>
<rawString>Woods, W., Transition Network Grams for Natural Language Analysis, Ccanunications of the ACM, vol. 13, no. 10, 1970. Grimes, J., Transition Network Grammars, A Guide, Network Grammars, Grimes, J., ed., 1975.</rawString>
</citation>
<citation valid="false">
<authors>
<author>iladelein Bates</author>
</authors>
<title>The Theory and Practice of Augmented Transition Network Grammars,</title>
<booktitle>Lecture Notes in Computer Science, Coos,</booktitle>
<pages>97</pages>
<editor>G. and Hartmanis, J., ed.,</editor>
<contexts>
<context position="2411" citStr="(3)" startWordPosition="359" endWordPosition="359">ere computational testing of granuars was not possible. Grimes, along with other contributors to the referenced work, illustrated the flexibility of the Al in tagmemic analysis of grammatical structures. ATN implementations have mostly focused on effective natural language understanding systems, assuming a computationally sophisticated research etnrirmutt. Implementations are often in an environment which requires scae indepth understanding and support of LISP systems. Recently much of the information on the ATN formalism, applications and techniques for implementation was summarized by Bates (3). Though many systems have been developed, little attention has been given to creating an interactive grammar modeling system for an individual with highly developed linguistics skills but poorly developed computational skills. The individual involved in field linguistics is concerned with developing concise workable descriptions of some corpus of data in a given Language. Particular problem in developing rules for interpreting surface structures are proposed and discussed in relation to the data. In field linguistics applications, this involves developing a taxonomy of structural types follaw</context>
<context position="16995" citStr="(3)" startWordPosition="2708" endWordPosition="2708">l may then be extended to incorporate contextsensitive and semantic features. Frequently, in proposing a taxosomi for a series of sentences, one is tempted to propose mmarous structural types in order to handle all of the data. The orientation of grammar testing encourages the user to look for more concise representations. Tracing the sentence parse can yield information about the efficiency of the representation. Tracing is also illustrative to the student, permitting many parsings to be Observed. 4.2 Cotabato Manobo An A2N representation of a graamar for Cotabato Mancbo was done by Errington(3) using the manual proposed by Grimes (2). Recently, the gramma:class implemented and tested using SNOPAR. The implementation took place over a three month period with initial implementation at the word level and eventual extension to the clause level with conjunctions and eabedding. Comments were used throughout the grammar OD explain the rational for partimiaT. arc types, tests or actions. A.wide variety of clause types are handled by the grammar A specific requirement in the Mambo grammar is the ability to handle a significant amount of testing on the arcs. For example, it is not uncommon to</context>
</contexts>
<marker>3.</marker>
<rawString>Bates, iladelein, The Theory and Practice of Augmented Transition Network Grammars, Lecture Notes in Computer Science, Coos, G. and Hartmanis, J., ed., l97t.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T P Kehler</author>
</authors>
<title>SNOPAR: A Grammar Testing System,</title>
<date>1976</date>
<journal>AJCL</journal>
<volume>55</volume>
<contexts>
<context position="6156" citStr="(4)" startWordPosition="943" endWordPosition="943">, and enable the user to cycle from editor to parsing with minimum effort. The monitor can also be used to provide facilities for studying grammar efficiency. Transportability of the grammar modeling system is established by a program generator which enables implementation in different programming languages. 123 3. Two Implementatioms of Grammar Testing Systems To develop some understanding on the design and implementation requirements for a system as specified in the previous section, two experimental grammar testing systems have been developed. A partial AIN implementation was done by Kehler(4) in a system (SNOPAR) which provided some interactive grammar and development facilities. SNOPAR incorporated several of the basic features of a grammar generator and monitor, with a limited editor, a grammar generator and a number of other features. Both SNOPAR and ADEPT are implemented in SNOBOL and both have been transported across operating systems (i.e. TOPS-20 to IBM&apos;s CMS). For implementation of text editing and program grammar generation, the SNOBOL4 language is reasonable. However, the lack of comprehensive list storage management is a limitation on the extension of this implementatio</context>
</contexts>
<marker>4.</marker>
<rawString>Kehler, T.P., SNOPAR: A Grammar Testing System, AJCL 55, 1976.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C A Woods</author>
</authors>
<title>ADEPT - Testing System for Augmented Transition Network Graamars, Masters Thesis,</title>
<date>1979</date>
<location>Virginia Tech,</location>
<contexts>
<context position="9482" citStr="(5)" startWordPosition="1464" endWordPosition="1464">ed structure. The top level constituent naae (i.e. NP) contains a list of the registers set during the parse which beccaes the default list for structure building. There are global stacks for history taking and back up functions. Typically, for other than the initial creation of a ammar by a naive user, the AIN function library of the system is used in conjunction with a system editor for grammar development. Several AIN grammars have been written with this system. 3.2 ADEPT , In an effort to make an easy-to-use simulation tool for linguists, the basic concepts of SNOPAR were extended by Wbods(5) to a full ATN implementation in a system called ADEPT. ADEPT is a system for generating AMIN program through the use of a network editor, lexicon editor, error correction and detection component, and a monitor for execution of the grammar. Figure 1 shows the system organization of ADEPT. The editor in ADEPT provides the following functions: - network creation&apos; - arc deletion or editing - arc insertion - arc reordering - state insertion and deletion The four main editor oaanmli types are suaaarized below: E &lt;rlef&gt; Edits a network (Creates it if it doesn&apos;t exist) E &lt;State&gt;,&lt;State&gt; Edit arc info</context>
</contexts>
<marker>5.</marker>
<rawString>Woods, C.A., ADEPT - Testing System for Augmented Transition Network Graamars, Masters Thesis, Virginia Tech, 1979.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Voge R14</author>
<author>James Tilt</author>
<author>M</author>
</authors>
<title>An Artificial Intelligence Approach to Language Instruction,</title>
<date>1978</date>
<journal>Artificial Intelligence,</journal>
<volume>10</volume>
<contexts>
<context position="13681" citStr="(6)" startWordPosition="2195" endWordPosition="2195">ches may be set to control the tracing of the parse. An Additional feature of the Ubods ADEPT system is the use of easy to read displays for the lexicon and grammar. An example arc is shown: 012)--CAT(&apos;DET.)-- (ADJ) ***NO TESTS. *** ACTIONS stiat(&apos;DET&apos;) ADEPT has been used to develop a small grammar of English. Future experiments are planned for using ADEPT in an linguistics applications oriented environrent. 4. Experiments in Grammar Modeling Utilization of the ATN as a grammar definition system in Linguistics and language education is still at an early stage of development. Ueischedel et.al.(6) have developed an AIN-based system as an intelligent CAI too for teaching foreign language. ithin the SNOPAR system, experiments in modeling English transformational grammar exercises and modeling field linguistics exercises have been carried out. In field linguistics research some grammar development has been done. Of interest here is the systematic formulation of rule systems associated with the syntax and semantics of natural Language subsystems. Proposed model grammars can be evaluated for efficiency of representation and extendibility to a larger corpus of data. Essential to this approac</context>
</contexts>
<marker>6.</marker>
<rawString>Weischedel. R14., Voge, Tilt, James, M., An Artificial Intelligence Approach to Language Instruction, Artificial Intelligence, Vol. 10, No. 3, 1978.</rawString>
</citation>
<citation valid="true">
<authors>
<author>WilLimaR Merrifield</author>
<author>Constance M Naish</author>
<author>Calvin R &apos;Rensch</author>
</authors>
<date></date>
<institution>Gillian Story, Laboratory Manual for Moroholov and Syntax,</institution>
<contexts>
<context position="15031" citStr="(7)" startWordPosition="2399" endWordPosition="2399">r testing to field linguistics exercises and application to modeling a Language indigenous to the Philippines are given. 4.1 An Exercise Computationally Assisted Taxonomy Typical exercises in a first course in field linguistics give the student a series of phrases or sentences in a language not known to the student. Taxonomic analysis of the data is to be done producing a set of formulas for constituent types and the hierarchical relationship of constituents. In this particular case a tagmemic analysis is done. Consider the following three sentences selected from Apinaye exercise (Problem 100)(7): kukren kokoi the monkey eats kukren kokoi rack the big donkey eats ape rack mih mach the good man works well First a simple lexicon is contructed, from this and other data. Secondly, immediate constituent analysis is carried out to yield the following tagmemic formulae: ICL := Pred:VP + Subj:NP NP := Head:N + Nmod:AD VP := Head :V + Vmod:AD The AIN is then defined as a simple syntactic organization of constituent types. The SROPAR representation of this grammar would be: ICL PARSE(VP()) St (&apos;ICL&apos;,&apos;Pred&apos;,Q) :5(10 &apos;SU&apos; ) )F (FREDJRN) SU PARSE(NP()) SETR(&apos;ICI,&apos;,&apos;SUbj&apos;,01) :S(IO(&apos;POPICL&apos;))F(FREI</context>
</contexts>
<marker>7.</marker>
<rawString>Merrifield, WilLimaR., Constance M. Naish, Calvin R.&apos;Rensch, Gillian Story, Laboratory Manual for Moroholov and Syntax, 196/.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ross Errington</author>
</authors>
<title>Transition Network Grammar of Cotabato Mao.&apos; Studies in Philippine Linguistics, edited by Casilda Edrial-luzares ani Austin Hale. Volume 3, Number 2. Manila: Summer Institute of Linguistics.</title>
<date>1979</date>
<contexts>
<context position="2411" citStr="(3)" startWordPosition="359" endWordPosition="359">ere computational testing of granuars was not possible. Grimes, along with other contributors to the referenced work, illustrated the flexibility of the Al in tagmemic analysis of grammatical structures. ATN implementations have mostly focused on effective natural language understanding systems, assuming a computationally sophisticated research etnrirmutt. Implementations are often in an environment which requires scae indepth understanding and support of LISP systems. Recently much of the information on the ATN formalism, applications and techniques for implementation was summarized by Bates (3). Though many systems have been developed, little attention has been given to creating an interactive grammar modeling system for an individual with highly developed linguistics skills but poorly developed computational skills. The individual involved in field linguistics is concerned with developing concise workable descriptions of some corpus of data in a given Language. Particular problem in developing rules for interpreting surface structures are proposed and discussed in relation to the data. In field linguistics applications, this involves developing a taxonomy of structural types follaw</context>
<context position="16995" citStr="(3)" startWordPosition="2708" endWordPosition="2708">l may then be extended to incorporate contextsensitive and semantic features. Frequently, in proposing a taxosomi for a series of sentences, one is tempted to propose mmarous structural types in order to handle all of the data. The orientation of grammar testing encourages the user to look for more concise representations. Tracing the sentence parse can yield information about the efficiency of the representation. Tracing is also illustrative to the student, permitting many parsings to be Observed. 4.2 Cotabato Manobo An A2N representation of a graamar for Cotabato Mancbo was done by Errington(3) using the manual proposed by Grimes (2). Recently, the gramma:class implemented and tested using SNOPAR. The implementation took place over a three month period with initial implementation at the word level and eventual extension to the clause level with conjunctions and eabedding. Comments were used throughout the grammar OD explain the rational for partimiaT. arc types, tests or actions. A.wide variety of clause types are handled by the grammar A specific requirement in the Mambo grammar is the ability to handle a significant amount of testing on the arcs. For example, it is not uncommon to</context>
</contexts>
<marker>3.</marker>
<rawString>Errington, Ross, &apos;Transition Network Grammar of Cotabato Mao.&apos; Studies in Philippine Linguistics, edited by Casilda Edrial-luzares ani Austin Hale. Volume 3, Number 2. Manila: Summer Institute of Linguistics. 1979.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>