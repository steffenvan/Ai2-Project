<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.003041">
<title confidence="0.999257">
Addressing How-to Questions using a Spoken Dialogue System:
a Viable Approach?
</title>
<author confidence="0.996127">
Silvia Quarteroni
</author>
<affiliation confidence="0.7782435">
University of Trento
38050 Povo (Trento), Italy
</affiliation>
<email confidence="0.992684">
silviaq@disi.unitn.it
</email>
<sectionHeader confidence="0.997317" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.9998554">
In this document, we illustrate how com-
plex questions such as procedural (how-to)
ones can be addressed in an interactive for-
mat by means of a spoken dialogue sys-
tem. The advantages of interactivity and
in particular of spoken dialogue with re-
spect to standard Question Answering set-
tings are numerous. First, addressing user
needs that do not necessarily arise in front
of a computer; moreover, a spoken or mul-
timodal answer format can often be bet-
ter suited to the user’s need. Finally, the
procedural nature of the information itself
makes iterative question formulation and
answer production particularly appealing.
</bodyText>
<sectionHeader confidence="0.999517" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999916045454546">
Question answering (QA) is nowadays an estab-
lished technology, advancing information retrieval
to the point of allowing queries to be formulated
in natural language and to return actual answers
(in the form of sentences/phrases).
While the first QA systems (Simmons, 1965)
mainly dealt with factoid questions, i.e. ques-
tions about names, dates and all that can be re-
duced to a fact, a number of systems in the last
decade have appeared with the aim of addressing
non-factoid questions (Voorhees, 2003). In par-
ticular, the problem of addressing definition ques-
tions has received great attention from the research
community (Chen et al., 2006; Moschitti et al.,
2007), while less research has been conducted so
far on other types of non-factoid QA, such as why-
questions (Verberne et al., 2007; Pechsiri et al.,
2008) and procedural (also called how-to) ques-
tions (Yin, 2006; Delpech and Saint-Dizier, 2008).
Another recent trend in QA is interactivity, i.e.
the use of a dialogue interface to better support
the user, e.g. by resolving anaphoric and elliptic
</bodyText>
<note confidence="0.709146666666667">
Patrick Saint-Dizier
IRIT
Toulouse, France
</note>
<email confidence="0.913932">
stdizier@irit.fr
</email>
<bodyText confidence="0.999955945945946">
expressions in his/her queries (Webb and Strza-
lkowski, 2006). Indeed, the dialogue community
has been addressing the problem of information
seeking for decades, often with very satisfying
commercial products able to interact not only in
text but especially via spoken interfaces (Gupta et
al., 2006; Traum, 1996). However, also in this
field the information retrieval task has mainly fo-
cused on a limited domain (travel planning, tele-
com rates) and on returning database values rather
than cooperatively solving problems or providing
complex information.
In this paper, we focus on handling procedural
questions, not as commonly researched as defini-
tional QA but for which a number of resources
are available on the Web. Indeed, although por-
tals dedicated to how-to questions exist (eHow.
com), where stereotyped questions are presented
together with a few responses, QA would allow a
broader approach to intelligently respond to how-
to questions.
Our main claim is that joining the existing QA
technology for complex procedural questions with
the potentials of spoken conversation would pro-
vide an excellent testbed for the integration of
these two technologies. Indeed, understanding and
answering procedural questions requires a high
level of cooperation between the user and the sys-
tem: a procedure is a complex answer to return
and would better be provided and received step by
step than “dumped” in a text-to-speech generator
or a text file.
In the rest of this document, we outline the main
features of procedural QA and the approach we
propose to address it via dialogue. We illustrate
the potentials of our approach with two use cases
of different complexity.
</bodyText>
<sectionHeader confidence="0.94625" genericHeader="method">
2 Procedural Question Answering
</sectionHeader>
<bodyText confidence="0.934904">
Procedural text contains not only step-by-step in-
structions, but also additional content such as
</bodyText>
<page confidence="0.993765">
19
</page>
<note confidence="0.9925705">
Proceedings of the 2009 Workshop on Knowledge and Reasoning for Answering Questions, ACL-IJCNLP 2009, pages 19–23,
Suntec, Singapore, 6 August 2009. c�2009 ACL and AFNLP
</note>
<bodyText confidence="0.91237475">
warnings, recommendations and advice. Due to
the argumentative nature of such text, procedural
QA is a complex task. Indeed, the main challeges
offered by procedural QA can be summarized as:
</bodyText>
<listItem confidence="0.97133752631579">
1. Acquiring procedural data:
• (automatically) obtaining the data, filter-
ing out text with little procedural con-
tent;
• tagging relevant structures in procedures
(such as warnings, advice, step-wise in-
structions);
• efficiently indexing texts based on their
title and content;
2. Answering procedural questions:
• recognizing and interpreting procedu-
ral questions (question classification and
analysis);
• pinpointing answer passages (answer re-
trieval);
• generating answers to procedural ques-
tions and supporting interaction span-
ning over more than one Q/A pair, such
as step-by-step procedural descriptions.
</listItem>
<bodyText confidence="0.999783875">
To our knowledge, little extensive work exists
in this field; an example is the TextCoop project
(Delpech and Saint-Dizier, 2008) that produced a
procedural tagger able to recognize and segment
the main units found in French procedural text (ti-
tles, instructions, prerequisites, warnings and ad-
vice) via an ad hoc markup convention (see Table
1). In addition, QA technology was used for the
resolution of elliptic titles and their indexing for
answer matching (titles often express goals).
Although automatic procedure tagging and
analysis appears as a necessary step towards an ef-
ficient treatment of procedural questions, we argue
that an accurate choice of the format and modality
in which their answers are returned would be a vi-
tal advantage. In particular, we propose to return
the response to a procedural QA under the form
of oral instructions rather than text to read. In-
deed, besides the advantages of oral communica-
tion in terms of expressiveness, the latter solution
may be inappropriate in some situations such as
when walking around or driving.
In Section 3, we discuss our dialogue-based ap-
proach to procedural QA.
</bodyText>
<sectionHeader confidence="0.989036" genericHeader="method">
3 Dialogue-based Procedural QA
</sectionHeader>
<bodyText confidence="0.999979428571429">
We believe that the integration of QA research
with a Spoken Dialogue System (SDS) is a
promising approach to procedural Question An-
swering. Indeed, work on procedural QA so far
accounts for the textual structures of written docu-
ments; since procedural texts are in general highly
interactive, it is clear that the pairing with a spo-
ken dialogue system is of much interest. In addi-
tion, a spoken interface enables to go far beyond a
mere enumeration of instructions (as found in Web
pages), achieving cooperation between the service
provider (SDS) and the user.
A first step towards this is the (automatic or
semi-automatic) annotation of procedural texts via
an ad hoc markup in order to distinguish sub-
texts that can yield to dialogues, such as conditions
(texts containing “if you are under 20 ... ”, “if you
are aged between ... ” may be translated in the
question: “how old are you?”). Similarly, in warn-
ings, terms bearing the illocutionary force (“Re-
member”, “Caution”, “Notice”) can be marked in
order to be stressed.
During system execution, instructions can be ut-
tered one after the other, waiting for an acknowl-
edgement from the user, but the system can also
provide more information about the task at hand
upon request. Moreover, the system can provide
alternative solutions when users have trouble car-
rying out an instruction (“I cannot pay by credit
card”), or make an instruction more explicit by
splitting it into simpler ones (automatically gen-
erating another how-to question for the subgoal at
hand).
Finally, in addition to speech and dialogue, mul-
timodal aspects of interactivity can be consid-
ered, such as displaying a map when providing an
itinerary, or a 3D picture related to an instruction.
Translating a procedural text into speech is a
challenge that requires intensive NLP processing,
a strong and accurate domain model and an ability
for reasoning. In order to address this challenge,
we propose the following approach:
</bodyText>
<listItem confidence="0.980381333333333">
1. Obtain domain-related data from the Web;
2. Represent domain knowledge and reasoning.
While most of the factual knowledge of a do-
main can be captured by means of an en-
riched ontology, other types of knowledge
(know-how, domain constraints, etc.) and
</listItem>
<page confidence="0.978247">
20
</page>
<bodyText confidence="0.971376806451613">
reasoning procedures need to be defined on
other grounds, optionally manually;
3. Devise a Dialogue Manager able to interact
about procedural information using markup
in the procedural data representation;
4. Define how the procedural data representa-
tion can be rendered by a Natural Language
Generator;
5. Use existing technology for Automatic
Speech Recognition and Text-To-Speech.
Evidently, the difficulty of answering procedu-
ral questions via dialogue varies depending on the
availability and format of answers. We distinguish
between two types of questions:
Type 1: a procedural text corresponding to the
question is already available on the Web; in
this case, the user’s query can be answered
by tagging such text using a tagger such as
TextCoop and enriching it with dialogic and
prosodic markers to be rendered by an off-
the-shelf TTS module;
Type 2: there is no direct answer to the user’s
query on the Web; for instance, the answer
may be dependent on information which the
user has not yet provided. In this case, the
query must first be formulated, and procedu-
ral tagging/TTS intervene later.
In Sections 4 and 5, we report two case stud-
ies reflecting type 1 and type 2 situations, respec-
tively: the first relates to the University helpdesk
domain, the second to the tourist advice domain.
</bodyText>
<sectionHeader confidence="0.987085" genericHeader="method">
4 Text-to-Speech from a Web page
</sectionHeader>
<bodyText confidence="0.999493928571429">
To illustrate type 1 questions, we study a well-
known domain, universities, where helpdesks
must provide various kinds of procedural informa-
tion (dealing with e.g. paperwork, student life and
infrastructure).Let us consider the question: “How
to get a student card in Wolverhampton?”. In Fig.
1, we report an extract of the top Web page ob-
tained by typing such question into a search en-
gine. It can be noted that in this case, the top
search engine result contains the procedural an-
swer sought by the question, hence procedural tag-
ging can be performed on the text.
A possible procedural annotation has been
(manually) applied to the same text in Figure 2,
</bodyText>
<figureCaption confidence="0.840035333333333">
Figure 1: Extract from the top Web hit for: “How
to get a student card in Wolverhampton?” (source:
wlv.ac.uk)
</figureCaption>
<bodyText confidence="0.999385571428571">
following the conventions used in the TexCoop
tagger (see Tab. 1) to denote the abilities of a pro-
cedural tagger. While some of the HTML objects
in the Webpage, such as title, headers and enumer-
ations, are directly converted in their equivalent
tags (item, subtitle), additional markup ap-
pears, such as warnings and prerequisites.
</bodyText>
<tableCaption confidence="0.996427">
Table 1: TextCoop procedural markup (extract)
</tableCaption>
<bodyText confidence="0.919439708333333">
Label Example
title “Get your student ID card”
subtitle “What you’ll need”
cond “if you are a UK student”
objective “in order to get your ID”
instr “Head to the Uni info service.”
prerequisite “You’ll need 3 passport photos”
warning “Format MUST be passport!”
aim “to get good photos”
advice “try the photobooth next to ... ”
At this point, using a dialogue system to sim-
ply “read out” the above passage (even if split
into their main components) would result in inef-
fective, close-to intonation free speech. Indeed,
in order to provide instructions to the Natural
Language Generator and Text-to-Speech modules
of a dialogue system for verbalizing such text,
dialogue-level markup must be added to the above
procedural annotation.
In some cases, direct mapping rules can be de-
vised to directly translate procedural markup into
dialogue patterns. For instance, step-by-step in-
structions (item) contained in the itemize en-
vironment can be rendered as a sequence of inform
</bodyText>
<page confidence="0.997541">
21
</page>
<figure confidence="0.989171266666667">
&lt;subtitle&gt; Applying for an ID card &lt;/subtitle&gt;
&lt;inst-compound&gt;
When you receive a firm offer from the University,you can upload your photo
for your student ID card, &lt;warning&gt; and you should do this as soon as
you can. &lt;/warning&gt;
&lt;/inst-compound&gt;
&lt;prerequisite&gt; What you’ll need
&lt;itemize&gt;
&lt;item:1&gt; Your student number, a seven-digit number which will be on your
offer letter &lt; /item:1&gt;
&lt;item:2&gt; A digital photo that meets the requirements outlined below
&lt; /item:2&gt;
&lt;item:3&gt; Access to a computer with Internet access to send your
photo to the University using the Photo Upload facility.&lt; /item:3&gt;
&lt;/itemize&gt;&lt;/prerequisite&gt;
</figure>
<figureCaption confidence="0.704041666666667">
&lt;inst-compound&gt; &lt;cond&gt; If you don’t have a digital photo or a com-
puter with internet access, &lt;/cond&gt; ...
Figure 2: Procedural annotation of a Web page
</figureCaption>
<bodyText confidence="0.998909619047619">
dialogue acts, expecting acknowledgments (ack)
from the user. In addition, conditions can be ren-
dered as yes-no questions (“If you don’t have a
digital photo” becomes ask(digital photo));
In other cases, such as verbalizing warnings and
advice, specific salient words should be marked
with prosodic information as to how to pronounce
them. Specific lexical patters can be matched by
rules to provide such annotations, such as “Re-
member” or “as soon as possible”. Finally, part of
the procedural annotation could be excluded from
the dialog when redundant or implicit. For in-
stance, titles (title) could be skipped or men-
tioned separately by the dialogue system (e.g.
“Would you like to hear about how to Get your
student ID card?”).
Figure 3 illustrates the dialog act and prosodic
annotation enriching the procedural one of Figure
2. Such generic markup can then me converted
in a specific commercial voice markup languages,
e.g. VXML or SALT, via simple rules.
</bodyText>
<sectionHeader confidence="0.722903" genericHeader="method">
5 Integrating Scenarios and QA
</sectionHeader>
<bodyText confidence="0.969636526315789">
Besides improving access to procedures via direct
interactions by spoken dialogue, it is often neces-
sary to interact with the user to get more precise
information about his query, so that the response
can be accurate enough. Furthermore, a number
of procedural questions do not get any direct re-
sponse via Web queries. This is the case of type
2 questions, as introduced in Section 3. There are
several reasons to this situation. First, a number
of these questions are both complex and very spe-
cific. Next, most of them involve various forms
of reasoning and of elaboration. Other questions
require the integration of several simpler proce-
dures, e.g. via concatenation. Finally, others re-
&lt;subtitle&gt; Applying for an ID card &lt;/subtitle&gt;
&lt;inst-compound&gt; When you receive a firm offer from the University,
you can upload your photo for your student ID card, &lt;warning&gt; and
you should do this &lt; /prosody:emphasize&gt; as soon as you can.
&lt; /prosody:emphasize&gt; &lt;/warning&gt; &lt;/inst-compound&gt;
</bodyText>
<figure confidence="0.995891642857143">
&lt;prerequisite&gt; What you’ll need
&lt;itemize&gt;
&lt;item:1&gt; &lt;dialog:inform-ack&gt; Your student number, a seven-
digit number which will be on your offerletter&lt; /dialog:inform-ack&gt;
&lt; /item:1&gt;
&lt;item:2&gt; &lt;dialog:inform-ack&gt; A digital photo that meets the re-
quirements outlined below &lt; /dialog:inform-ack&gt; &lt; /item:2&gt;
&lt;item:3&gt; &lt;dialog:inform-ack&gt; Access to a computer with Inter-
net access to send your photo to the University using the Photo Upload facility.
&lt; /dialog:inform-ack&gt; &lt; /item:3&gt;
&lt;/itemize&gt; &lt;/prerequisite&gt;
&lt;inst-compound&gt; &lt;dialog:ask&gt; &lt;cond&gt; If you don’t have a dig-
ital photo or a computer with internet access,&lt;/cond&gt; &lt; /dialog:ask&gt;
. . .
</figure>
<figureCaption confidence="0.953138">
Figure 3: Dialog act and prosodic annotation of a
Web page
</figureCaption>
<bodyText confidence="0.999392388888889">
quire a substantial adaptation of existing proce-
dures: adaptation to a different context, general-
izations (e.g. knowing how to register in a uni-
versity may lead to a generalization so that it is
globally acceptable for other universities).
This is in particular the case for non-trivial
itineraries. For example, looking on the Web for
ways to go from Toulouse to Trento does not lead
to any solution. Search engines return partial and
often local information, e.g. description of Verona
airport, train schedules going via Trento, etc. We
need in this case to define a very generic scenario,
which is a procedure, of type ’travel’ and, for a
given trip, to construct the details from simpler
procedures or factual data available on the Web.
To overcome these limitations and to be able to
offer a real QA service, we propose the following
approach:
</bodyText>
<listItem confidence="0.9539695">
• Creating a general scenario, in our case for
itinerary construction, involving dialogue to
get necessary (departure/arrival location and
dates, etc.) and optional (budget, comfort,
etc.) information from the user.
• Including reasoning procedures and prefer-
</listItem>
<bodyText confidence="0.936720333333333">
ences related to transportation: e.g. it is
preferable to fly above a certain distance or if
there are obstacles (sea, mountains), or elab-
orate compromise between cost and trans-
portation length. Itinerary construction also
involves a planner, that operates over any
kind of transportation means, paired with an
optimizer. The planner should be flexible so
that it can propose alternatives (e.g. train or
</bodyText>
<page confidence="0.986727">
22
</page>
<bodyText confidence="0.998267459459459">
renting a car, stops at different places) while
the optimizer should take user preferences
into account.
• Submitting queries to a search engine to get
detailed information on precise points: flight
schedules, airport transportation, bus routes,
etc. Such queries are triggered by the differ-
ent functions of the scenario to fill in infor-
mation slots. From search engine results, it
is necessary to process the text segments so
that the correct information is found. This in-
cludes either getting precise data or selecting
a text portion (e.g. that describes services,
schedules, etc.).
• Summarizing the information and generat-
ing a response in natural language under the
form of a procedure, possibly with schemas,
maps, etc. and then producing a vocal output.
As shown above, parts of this scenario may
be vocal or multimedia. As in most natural
language generation systems, this involves a
planner that operates of various types of input
data (text, words, structured sequences of the
scenarion) and a language generation compo-
nent which, in this type of application, can
be based on predefined word sequences and
gaps to be filled in for the query at stake.
This approach has its roots in the frames and
scripts of cognitive science and AI in the 70s
(Schank and Abelson, 1977). However, in our
case we include a QA component to get informa-
tion and a planner to construct the itinerary based
on the results of the queries which also outputs
a procedure in natural language. In addition, the
proposed approach supports cooperative dialogues
and provides explanations to the user when there
is no direct answer to his request.
</bodyText>
<sectionHeader confidence="0.999447" genericHeader="conclusions">
6 Perspectives
</sectionHeader>
<bodyText confidence="0.99999315">
We have proposed a model of procedural QA sys-
tem conducting cooperative spoken dialogue with
the user. Indeed, we argue that the advantages of
spoken communication channel to address proce-
dural QA are mainly twofold. On the one hand,
procedural information can be returned to the user
in a more efficient way compared to the textual
format. On the other hand, cooperative dialogue
allows the system to understand and refine the
user’s information needs and to account for the
cases when information is not directly available on
the Web.
Our proposed approach has currently only been
validated through case studies and a long process
is required in order to achieve spoken procedural
QA. However, we believe that using existing re-
sources to address procedural information, such as
procedural taggers, as well as state-of-the art QA
and spoken dialogue technology, fulfilling our ob-
jectives is a feasible task.
</bodyText>
<sectionHeader confidence="0.999435" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999833756756756">
Y. Chen, M. Zhou, and S. Wang. 2006. Reranking an-
swers from definitional QA using language models.
In Proc. ACL.
E. Delpech and P. Saint-Dizier. 2008. Investigating the
structure of procedural texts for answering how-to
questions. In Proc. LREC.
N. Gupta, G. Tur, D. Hakkani-tur, G. Riccardi, S. Ban-
galore, M. Rahim, and M Gilbert. 2006. The AT&amp;T
spoken language understanding system. IEEE trans-
actions on speech and audio, 14:213–222.
A. Moschitti, S. Quarteroni, R. Basili, and S. Man-
andhar. 2007. Exploiting syntactic and shallow se-
mantic kernels for question/answer classification. In
Proc. ACL.
C. Pechsiri, P. Sroison, and U. Janviriyasopa. 2008.
Know-why extraction from textual data. In Proc.
KRAQ.
R. C. Schank and R. P. Abelson. 1977. Scripts, plans,
goals, and understanding: An inquiry into human
knowledge structures. Erlbaum.
R. F. Simmons. 1965. Answering english questions by
computer: a survey. Comm. ACM, 8(1):53–70.
D. Traum. 1996. Dialogue management in conversa-
tional agency: The TRAINS-93 dialogue manager.
In Proc. TWLT, pages 1–11.
S. Verberne, L. Boves, N. Oostdijk, and P. Coppen.
2007. Evaluating discourse-based answer extraction
for why-question answering. In Proc. SIGIR, pages
735–737.
E. M. Voorhees. 2003. Overview of TREC 2003. In
Proc. TREC.
N. Webb and T. Strzalkowski, editors. 2006. Proc.
HLT-NAACL Workshop on Interactive Question An-
swering.
L. Yin. 2006. A two-stage approach to retrieving an-
swers for how-to questions. In Proc. EACL (Student
Session).
</reference>
<page confidence="0.998935">
23
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.836531">
<title confidence="0.9651745">Addressing How-to Questions using a Spoken Dialogue a Viable Approach?</title>
<author confidence="0.905226">Silvia</author>
<affiliation confidence="0.99837">University of</affiliation>
<address confidence="0.957447">38050 Povo (Trento),</address>
<email confidence="0.999356">silviaq@disi.unitn.it</email>
<abstract confidence="0.9986718125">In this document, we illustrate how complex questions such as procedural (how-to) ones can be addressed in an interactive format by means of a spoken dialogue system. The advantages of interactivity and in particular of spoken dialogue with respect to standard Question Answering settings are numerous. First, addressing user needs that do not necessarily arise in front of a computer; moreover, a spoken or multimodal answer format can often be better suited to the user’s need. Finally, the procedural nature of the information itself makes iterative question formulation and answer production particularly appealing.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Y Chen</author>
<author>M Zhou</author>
<author>S Wang</author>
</authors>
<title>Reranking answers from definitional QA using language models.</title>
<date>2006</date>
<booktitle>In Proc. ACL.</booktitle>
<contexts>
<context position="1451" citStr="Chen et al., 2006" startWordPosition="223" endWordPosition="226"> is nowadays an established technology, advancing information retrieval to the point of allowing queries to be formulated in natural language and to return actual answers (in the form of sentences/phrases). While the first QA systems (Simmons, 1965) mainly dealt with factoid questions, i.e. questions about names, dates and all that can be reduced to a fact, a number of systems in the last decade have appeared with the aim of addressing non-factoid questions (Voorhees, 2003). In particular, the problem of addressing definition questions has received great attention from the research community (Chen et al., 2006; Moschitti et al., 2007), while less research has been conducted so far on other types of non-factoid QA, such as whyquestions (Verberne et al., 2007; Pechsiri et al., 2008) and procedural (also called how-to) questions (Yin, 2006; Delpech and Saint-Dizier, 2008). Another recent trend in QA is interactivity, i.e. the use of a dialogue interface to better support the user, e.g. by resolving anaphoric and elliptic Patrick Saint-Dizier IRIT Toulouse, France stdizier@irit.fr expressions in his/her queries (Webb and Strzalkowski, 2006). Indeed, the dialogue community has been addressing the proble</context>
</contexts>
<marker>Chen, Zhou, Wang, 2006</marker>
<rawString>Y. Chen, M. Zhou, and S. Wang. 2006. Reranking answers from definitional QA using language models. In Proc. ACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Delpech</author>
<author>P Saint-Dizier</author>
</authors>
<title>Investigating the structure of procedural texts for answering how-to questions.</title>
<date>2008</date>
<booktitle>In Proc. LREC.</booktitle>
<contexts>
<context position="1715" citStr="Delpech and Saint-Dizier, 2008" startWordPosition="266" endWordPosition="269">mainly dealt with factoid questions, i.e. questions about names, dates and all that can be reduced to a fact, a number of systems in the last decade have appeared with the aim of addressing non-factoid questions (Voorhees, 2003). In particular, the problem of addressing definition questions has received great attention from the research community (Chen et al., 2006; Moschitti et al., 2007), while less research has been conducted so far on other types of non-factoid QA, such as whyquestions (Verberne et al., 2007; Pechsiri et al., 2008) and procedural (also called how-to) questions (Yin, 2006; Delpech and Saint-Dizier, 2008). Another recent trend in QA is interactivity, i.e. the use of a dialogue interface to better support the user, e.g. by resolving anaphoric and elliptic Patrick Saint-Dizier IRIT Toulouse, France stdizier@irit.fr expressions in his/her queries (Webb and Strzalkowski, 2006). Indeed, the dialogue community has been addressing the problem of information seeking for decades, often with very satisfying commercial products able to interact not only in text but especially via spoken interfaces (Gupta et al., 2006; Traum, 1996). However, also in this field the information retrieval task has mainly foc</context>
<context position="4829" citStr="Delpech and Saint-Dizier, 2008" startWordPosition="741" endWordPosition="744"> content; • tagging relevant structures in procedures (such as warnings, advice, step-wise instructions); • efficiently indexing texts based on their title and content; 2. Answering procedural questions: • recognizing and interpreting procedural questions (question classification and analysis); • pinpointing answer passages (answer retrieval); • generating answers to procedural questions and supporting interaction spanning over more than one Q/A pair, such as step-by-step procedural descriptions. To our knowledge, little extensive work exists in this field; an example is the TextCoop project (Delpech and Saint-Dizier, 2008) that produced a procedural tagger able to recognize and segment the main units found in French procedural text (titles, instructions, prerequisites, warnings and advice) via an ad hoc markup convention (see Table 1). In addition, QA technology was used for the resolution of elliptic titles and their indexing for answer matching (titles often express goals). Although automatic procedure tagging and analysis appears as a necessary step towards an efficient treatment of procedural questions, we argue that an accurate choice of the format and modality in which their answers are returned would be </context>
</contexts>
<marker>Delpech, Saint-Dizier, 2008</marker>
<rawString>E. Delpech and P. Saint-Dizier. 2008. Investigating the structure of procedural texts for answering how-to questions. In Proc. LREC.</rawString>
</citation>
<citation valid="true">
<authors>
<author>N Gupta</author>
<author>G Tur</author>
<author>D Hakkani-tur</author>
<author>G Riccardi</author>
<author>S Bangalore</author>
<author>M Rahim</author>
<author>M Gilbert</author>
</authors>
<date>2006</date>
<booktitle>The AT&amp;T spoken language understanding system. IEEE transactions on speech and audio,</booktitle>
<pages>14--213</pages>
<contexts>
<context position="2226" citStr="Gupta et al., 2006" startWordPosition="342" endWordPosition="345">iri et al., 2008) and procedural (also called how-to) questions (Yin, 2006; Delpech and Saint-Dizier, 2008). Another recent trend in QA is interactivity, i.e. the use of a dialogue interface to better support the user, e.g. by resolving anaphoric and elliptic Patrick Saint-Dizier IRIT Toulouse, France stdizier@irit.fr expressions in his/her queries (Webb and Strzalkowski, 2006). Indeed, the dialogue community has been addressing the problem of information seeking for decades, often with very satisfying commercial products able to interact not only in text but especially via spoken interfaces (Gupta et al., 2006; Traum, 1996). However, also in this field the information retrieval task has mainly focused on a limited domain (travel planning, telecom rates) and on returning database values rather than cooperatively solving problems or providing complex information. In this paper, we focus on handling procedural questions, not as commonly researched as definitional QA but for which a number of resources are available on the Web. Indeed, although portals dedicated to how-to questions exist (eHow. com), where stereotyped questions are presented together with a few responses, QA would allow a broader appro</context>
</contexts>
<marker>Gupta, Tur, Hakkani-tur, Riccardi, Bangalore, Rahim, Gilbert, 2006</marker>
<rawString>N. Gupta, G. Tur, D. Hakkani-tur, G. Riccardi, S. Bangalore, M. Rahim, and M Gilbert. 2006. The AT&amp;T spoken language understanding system. IEEE transactions on speech and audio, 14:213–222.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Moschitti</author>
<author>S Quarteroni</author>
<author>R Basili</author>
<author>S Manandhar</author>
</authors>
<title>Exploiting syntactic and shallow semantic kernels for question/answer classification. In</title>
<date>2007</date>
<booktitle>Proc. ACL.</booktitle>
<contexts>
<context position="1476" citStr="Moschitti et al., 2007" startWordPosition="227" endWordPosition="230">ablished technology, advancing information retrieval to the point of allowing queries to be formulated in natural language and to return actual answers (in the form of sentences/phrases). While the first QA systems (Simmons, 1965) mainly dealt with factoid questions, i.e. questions about names, dates and all that can be reduced to a fact, a number of systems in the last decade have appeared with the aim of addressing non-factoid questions (Voorhees, 2003). In particular, the problem of addressing definition questions has received great attention from the research community (Chen et al., 2006; Moschitti et al., 2007), while less research has been conducted so far on other types of non-factoid QA, such as whyquestions (Verberne et al., 2007; Pechsiri et al., 2008) and procedural (also called how-to) questions (Yin, 2006; Delpech and Saint-Dizier, 2008). Another recent trend in QA is interactivity, i.e. the use of a dialogue interface to better support the user, e.g. by resolving anaphoric and elliptic Patrick Saint-Dizier IRIT Toulouse, France stdizier@irit.fr expressions in his/her queries (Webb and Strzalkowski, 2006). Indeed, the dialogue community has been addressing the problem of information seeking </context>
</contexts>
<marker>Moschitti, Quarteroni, Basili, Manandhar, 2007</marker>
<rawString>A. Moschitti, S. Quarteroni, R. Basili, and S. Manandhar. 2007. Exploiting syntactic and shallow semantic kernels for question/answer classification. In Proc. ACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C Pechsiri</author>
<author>P Sroison</author>
<author>U Janviriyasopa</author>
</authors>
<title>Know-why extraction from textual data. In</title>
<date>2008</date>
<booktitle>Proc. KRAQ.</booktitle>
<contexts>
<context position="1625" citStr="Pechsiri et al., 2008" startWordPosition="253" endWordPosition="256">s (in the form of sentences/phrases). While the first QA systems (Simmons, 1965) mainly dealt with factoid questions, i.e. questions about names, dates and all that can be reduced to a fact, a number of systems in the last decade have appeared with the aim of addressing non-factoid questions (Voorhees, 2003). In particular, the problem of addressing definition questions has received great attention from the research community (Chen et al., 2006; Moschitti et al., 2007), while less research has been conducted so far on other types of non-factoid QA, such as whyquestions (Verberne et al., 2007; Pechsiri et al., 2008) and procedural (also called how-to) questions (Yin, 2006; Delpech and Saint-Dizier, 2008). Another recent trend in QA is interactivity, i.e. the use of a dialogue interface to better support the user, e.g. by resolving anaphoric and elliptic Patrick Saint-Dizier IRIT Toulouse, France stdizier@irit.fr expressions in his/her queries (Webb and Strzalkowski, 2006). Indeed, the dialogue community has been addressing the problem of information seeking for decades, often with very satisfying commercial products able to interact not only in text but especially via spoken interfaces (Gupta et al., 200</context>
</contexts>
<marker>Pechsiri, Sroison, Janviriyasopa, 2008</marker>
<rawString>C. Pechsiri, P. Sroison, and U. Janviriyasopa. 2008. Know-why extraction from textual data. In Proc. KRAQ.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R C Schank</author>
<author>R P Abelson</author>
</authors>
<title>Scripts, plans, goals, and understanding: An inquiry into human knowledge structures.</title>
<date>1977</date>
<publisher>Erlbaum.</publisher>
<contexts>
<context position="17750" citStr="Schank and Abelson, 1977" startWordPosition="2834" endWordPosition="2837">guage under the form of a procedure, possibly with schemas, maps, etc. and then producing a vocal output. As shown above, parts of this scenario may be vocal or multimedia. As in most natural language generation systems, this involves a planner that operates of various types of input data (text, words, structured sequences of the scenarion) and a language generation component which, in this type of application, can be based on predefined word sequences and gaps to be filled in for the query at stake. This approach has its roots in the frames and scripts of cognitive science and AI in the 70s (Schank and Abelson, 1977). However, in our case we include a QA component to get information and a planner to construct the itinerary based on the results of the queries which also outputs a procedure in natural language. In addition, the proposed approach supports cooperative dialogues and provides explanations to the user when there is no direct answer to his request. 6 Perspectives We have proposed a model of procedural QA system conducting cooperative spoken dialogue with the user. Indeed, we argue that the advantages of spoken communication channel to address procedural QA are mainly twofold. On the one hand, pro</context>
</contexts>
<marker>Schank, Abelson, 1977</marker>
<rawString>R. C. Schank and R. P. Abelson. 1977. Scripts, plans, goals, and understanding: An inquiry into human knowledge structures. Erlbaum.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R F Simmons</author>
</authors>
<title>Answering english questions by computer: a survey.</title>
<date>1965</date>
<journal>Comm. ACM,</journal>
<volume>8</volume>
<issue>1</issue>
<contexts>
<context position="1083" citStr="Simmons, 1965" startWordPosition="163" endWordPosition="164">numerous. First, addressing user needs that do not necessarily arise in front of a computer; moreover, a spoken or multimodal answer format can often be better suited to the user’s need. Finally, the procedural nature of the information itself makes iterative question formulation and answer production particularly appealing. 1 Introduction Question answering (QA) is nowadays an established technology, advancing information retrieval to the point of allowing queries to be formulated in natural language and to return actual answers (in the form of sentences/phrases). While the first QA systems (Simmons, 1965) mainly dealt with factoid questions, i.e. questions about names, dates and all that can be reduced to a fact, a number of systems in the last decade have appeared with the aim of addressing non-factoid questions (Voorhees, 2003). In particular, the problem of addressing definition questions has received great attention from the research community (Chen et al., 2006; Moschitti et al., 2007), while less research has been conducted so far on other types of non-factoid QA, such as whyquestions (Verberne et al., 2007; Pechsiri et al., 2008) and procedural (also called how-to) questions (Yin, 2006;</context>
</contexts>
<marker>Simmons, 1965</marker>
<rawString>R. F. Simmons. 1965. Answering english questions by computer: a survey. Comm. ACM, 8(1):53–70.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Traum</author>
</authors>
<title>Dialogue management in conversational agency: The TRAINS-93 dialogue manager.</title>
<date>1996</date>
<booktitle>In Proc. TWLT,</booktitle>
<pages>1--11</pages>
<contexts>
<context position="2240" citStr="Traum, 1996" startWordPosition="346" endWordPosition="347">d procedural (also called how-to) questions (Yin, 2006; Delpech and Saint-Dizier, 2008). Another recent trend in QA is interactivity, i.e. the use of a dialogue interface to better support the user, e.g. by resolving anaphoric and elliptic Patrick Saint-Dizier IRIT Toulouse, France stdizier@irit.fr expressions in his/her queries (Webb and Strzalkowski, 2006). Indeed, the dialogue community has been addressing the problem of information seeking for decades, often with very satisfying commercial products able to interact not only in text but especially via spoken interfaces (Gupta et al., 2006; Traum, 1996). However, also in this field the information retrieval task has mainly focused on a limited domain (travel planning, telecom rates) and on returning database values rather than cooperatively solving problems or providing complex information. In this paper, we focus on handling procedural questions, not as commonly researched as definitional QA but for which a number of resources are available on the Web. Indeed, although portals dedicated to how-to questions exist (eHow. com), where stereotyped questions are presented together with a few responses, QA would allow a broader approach to intelli</context>
</contexts>
<marker>Traum, 1996</marker>
<rawString>D. Traum. 1996. Dialogue management in conversational agency: The TRAINS-93 dialogue manager. In Proc. TWLT, pages 1–11.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Verberne</author>
<author>L Boves</author>
<author>N Oostdijk</author>
<author>P Coppen</author>
</authors>
<title>Evaluating discourse-based answer extraction for why-question answering.</title>
<date>2007</date>
<booktitle>In Proc. SIGIR,</booktitle>
<pages>735--737</pages>
<contexts>
<context position="1601" citStr="Verberne et al., 2007" startWordPosition="249" endWordPosition="252">to return actual answers (in the form of sentences/phrases). While the first QA systems (Simmons, 1965) mainly dealt with factoid questions, i.e. questions about names, dates and all that can be reduced to a fact, a number of systems in the last decade have appeared with the aim of addressing non-factoid questions (Voorhees, 2003). In particular, the problem of addressing definition questions has received great attention from the research community (Chen et al., 2006; Moschitti et al., 2007), while less research has been conducted so far on other types of non-factoid QA, such as whyquestions (Verberne et al., 2007; Pechsiri et al., 2008) and procedural (also called how-to) questions (Yin, 2006; Delpech and Saint-Dizier, 2008). Another recent trend in QA is interactivity, i.e. the use of a dialogue interface to better support the user, e.g. by resolving anaphoric and elliptic Patrick Saint-Dizier IRIT Toulouse, France stdizier@irit.fr expressions in his/her queries (Webb and Strzalkowski, 2006). Indeed, the dialogue community has been addressing the problem of information seeking for decades, often with very satisfying commercial products able to interact not only in text but especially via spoken inter</context>
</contexts>
<marker>Verberne, Boves, Oostdijk, Coppen, 2007</marker>
<rawString>S. Verberne, L. Boves, N. Oostdijk, and P. Coppen. 2007. Evaluating discourse-based answer extraction for why-question answering. In Proc. SIGIR, pages 735–737.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E M Voorhees</author>
</authors>
<title>Overview of TREC</title>
<date>2003</date>
<booktitle>In Proc. TREC.</booktitle>
<contexts>
<context position="1312" citStr="Voorhees, 2003" startWordPosition="203" endWordPosition="204">ormation itself makes iterative question formulation and answer production particularly appealing. 1 Introduction Question answering (QA) is nowadays an established technology, advancing information retrieval to the point of allowing queries to be formulated in natural language and to return actual answers (in the form of sentences/phrases). While the first QA systems (Simmons, 1965) mainly dealt with factoid questions, i.e. questions about names, dates and all that can be reduced to a fact, a number of systems in the last decade have appeared with the aim of addressing non-factoid questions (Voorhees, 2003). In particular, the problem of addressing definition questions has received great attention from the research community (Chen et al., 2006; Moschitti et al., 2007), while less research has been conducted so far on other types of non-factoid QA, such as whyquestions (Verberne et al., 2007; Pechsiri et al., 2008) and procedural (also called how-to) questions (Yin, 2006; Delpech and Saint-Dizier, 2008). Another recent trend in QA is interactivity, i.e. the use of a dialogue interface to better support the user, e.g. by resolving anaphoric and elliptic Patrick Saint-Dizier IRIT Toulouse, France s</context>
</contexts>
<marker>Voorhees, 2003</marker>
<rawString>E. M. Voorhees. 2003. Overview of TREC 2003. In Proc. TREC.</rawString>
</citation>
<citation valid="true">
<date>2006</date>
<booktitle>Proc. HLT-NAACL Workshop on Interactive Question Answering.</booktitle>
<editor>N. Webb and T. Strzalkowski, editors.</editor>
<marker>2006</marker>
<rawString>N. Webb and T. Strzalkowski, editors. 2006. Proc. HLT-NAACL Workshop on Interactive Question Answering.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L Yin</author>
</authors>
<title>A two-stage approach to retrieving answers for how-to questions.</title>
<date>2006</date>
<booktitle>In Proc. EACL</booktitle>
<publisher>(Student Session).</publisher>
<contexts>
<context position="1682" citStr="Yin, 2006" startWordPosition="264" endWordPosition="265">ons, 1965) mainly dealt with factoid questions, i.e. questions about names, dates and all that can be reduced to a fact, a number of systems in the last decade have appeared with the aim of addressing non-factoid questions (Voorhees, 2003). In particular, the problem of addressing definition questions has received great attention from the research community (Chen et al., 2006; Moschitti et al., 2007), while less research has been conducted so far on other types of non-factoid QA, such as whyquestions (Verberne et al., 2007; Pechsiri et al., 2008) and procedural (also called how-to) questions (Yin, 2006; Delpech and Saint-Dizier, 2008). Another recent trend in QA is interactivity, i.e. the use of a dialogue interface to better support the user, e.g. by resolving anaphoric and elliptic Patrick Saint-Dizier IRIT Toulouse, France stdizier@irit.fr expressions in his/her queries (Webb and Strzalkowski, 2006). Indeed, the dialogue community has been addressing the problem of information seeking for decades, often with very satisfying commercial products able to interact not only in text but especially via spoken interfaces (Gupta et al., 2006; Traum, 1996). However, also in this field the informat</context>
</contexts>
<marker>Yin, 2006</marker>
<rawString>L. Yin. 2006. A two-stage approach to retrieving answers for how-to questions. In Proc. EACL (Student Session).</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>