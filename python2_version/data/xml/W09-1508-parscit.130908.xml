<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.618230">
<title confidence="0.987278">
Grammar Engineering for CCG using Ant and XSLT∗
</title>
<author confidence="0.987259">
Scott Martin, Rajakrishnan Rajkumar, and Michael White
</author>
<affiliation confidence="0.996508">
Ohio State University
Department of Linguistics
</affiliation>
<email confidence="0.998566">
{scott,raja,mwhite}@ling.ohio-state.edu
</email>
<sectionHeader confidence="0.912696" genericHeader="abstract">
Overview
</sectionHeader>
<bodyText confidence="0.999937">
Corpus conversion and grammar extraction have
traditionally been portrayed as tasks that are
performed once and never again revisited (Burke
et al., 2004). We report the successful imple-
mentation of an approach to these tasks that
facilitates the improvement of grammar engi-
neering as an evolving process. Taking the
standard version of the CCGbank (Hocken-
maier and Steedman, 2007) as input, our sys-
tem then introduces greater depth of linguis-
tic insight by augmenting it with attributes
the original corpus lacks: Propbank roles and
head lexicalization for case-marking preposi-
tions (Boxwell and White, 2008), derivational
re-structuring for punctuation analysis (White
and Rajkumar, 2008), named entity annotation
and lemmatization. Our implementation ap-
plies successive XSLT transforms controlled by
Apache Ant (http://ant.apache.org/) to an
XML translation of this corpus, finally produc-
ing an OpenCCG grammar (http://openccg.
sourceforge.net/). This design is beneficial
to grammar engineering both because of XSLT’s
unique suitability to performing arbitrary trans-
formations of XML trees and the fine-grained
control that Ant provides. The resulting system
enables state-of-the-art BLEU scores for surface
realization on section 23 of the CCGbank.
</bodyText>
<sectionHeader confidence="0.992053" genericHeader="keywords">
1 Design
</sectionHeader>
<bodyText confidence="0.970137">
Rather than transforming the corpus, it would
be simple to introduce several of the corpus aug-
</bodyText>
<footnote confidence="0.913984">
∗This work was supported in part by NSF grant no.
IIS-0812297.
</footnote>
<page confidence="0.996611">
45
</page>
<bodyText confidence="0.999976095238095">
mentations that we make (e.g. punctuation re-
structuring) during grammar extraction. How-
ever, machine learning applications (e.g., real-
ization ranking) benefit when the corpus and
extracted grammar are consistent. A case in
point: annotating the corpus with named en-
tities, then using n-gram models with words re-
placed by their class labels to score realization.
Accordingly, our pipeline design starts by gen-
erating an XML version of the CCGbank us-
ing JavaCC (http://javacc.dev.java.net/)
from the original corpus. Next, conversion and
extraction transforms are applied to create a
converted corpus (also in XML) and extracted
grammar (in OpenCCG format).
We refactored our original design to separate
the grammar engineering task into several con-
figurable processes using Ant tasks. This sim-
plifies process management, speeds experiment
iterations, and facilitates the comparison of dif-
ferent grammar engineering strategies.
</bodyText>
<sectionHeader confidence="0.982078" genericHeader="introduction">
2 Implementation
</sectionHeader>
<bodyText confidence="0.99967525">
It seemed natural to implement our pipeline pro-
cedure in XSLT since both OpenCCG grammars
and our CCGbank translation are represented in
XML. Aside from its inherent attributes, XSLT
requires no re-compilation as a result of being an
interpreted language. Also, because both con-
version and extraction use a series of transforms
in a chain, each required sub-step can be split
into as many XSLT transforms as desired.
Both the conversion and extraction steps
were implemented by extending Ant with cus-
tom tasks as configuring Ant tasks requires no
</bodyText>
<note confidence="0.858389">
Proceedings of the NAACL HLT Workshop on Software Engineering, Testing, and Quality Assurance for Natural Language Processing, pages 45–46,
Boulder, Colorado, June 2009. c�2009 Association for Computational Linguistics
</note>
<bodyText confidence="0.999945578947368">
source editing or compilation. Ant is partic-
ularly well-suited to this process because, like
OpenCCG (whose libraries are used in the ex-
traction phase), it is written in Java. Our sys-
tem also employs the Ant-provided javacc task,
invoking the JavaCC parser to translate the
CCGbank to XML. This approach is preferable
to a direct Java implementation because it keeps
source code and configuration separate, allowing
for more rapid grammar engineering iterations.
Our particular implementation harnesses
Ant’s built-in FileSet (for specification of
groups of corpus files) and FileList (for re-
use of series of XSLT transforms) data types.
The first of our extension tasks, convert, encap-
sulates the conversion process while the second
task, extract, implements the grammar extrac-
tion procedure for a previously-converted cor-
pus.
</bodyText>
<sectionHeader confidence="0.999207" genericHeader="method">
3 Experimental Impact
</sectionHeader>
<bodyText confidence="0.999985096774193">
Our conversion process currently supports var-
ious experiments by including only specified
transforms. We gain the ability to cre-
ate corpora with various combinations of at-
tributes, among them punctuation annotation,
semantic class information, and named entities
(lack of space precludes inclusion of examples
here; see http://www.ling.ohio-state.edu/
~scott/publications/grammareng/). In ad-
dition to extracting grammars, the extraction
task employs a constrained parser to create log-
ical forms (LFs) for surface realization and ex-
tracts SRILM training data for realization scor-
ing. This task also enables feature extraction
from LF graphs for training during supertagging
for realization (Espinosa et al., 2008).
Our design supports comprehensive experi-
mentation and has helped facilitate recent ef-
forts to investigate factors impacting surface re-
alization, such as semantic classes and named
entities. Our initial results reported in (White et
al., 2007) record 69.7% single-rooted LFs with a
BLEU score of 0.5768. But current figures stand
at 95.8% single-rooted LFs and a state-of-the
art BLEU score of 0.8506 on section 23 of the
CCGbank. (Fragmentary LFs result when at
least one semantic dependency is missing from
the LF graph.) In achieving these results, im-
provements in the grammar engineering process
have been at least as important as improvements
in the statistical models.
</bodyText>
<sectionHeader confidence="0.978993" genericHeader="conclusions">
4 Conclusions and Future Work
</sectionHeader>
<bodyText confidence="0.999996454545454">
We designed and implemented a system that fa-
cilitates the process of grammar engineering by
separating conversion and extraction steps into
a pipeline of XSLT transforms. Our Ant imple-
mentation is highly configurable and has posi-
tive effects on our grammar engineering efforts,
including increased process control and a short-
ened testing cycle for different grammar engi-
neering approaches. Future work will focus on
increasing the number of single-rooted LFs and
integrating this system with OpenCCG.
</bodyText>
<sectionHeader confidence="0.998453" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.998378666666667">
[Boxwell and White2008] Stephen Boxwell and
Michael White. 2008. Projecting Propbank roles
onto the CCGbank. In Proc. LREC-08.
[Burke et al.2004] Michael Burke, Aoife Cahill,
Mairead Mccarthy, Ruth O’Donovan, Josef
Genabith, and Andy Way. 2004. Evaluating
automatic LFG F-structure annotation for the
Penn-II treebank. Research on Language and
Computation, 2:523–547, December.
[Espinosa et al.2008] Dominic Espinosa, Michael
White, and Dennis Mehay. 2008. Hypertagging:
Supertagging for surface realization with CCG.
In Proc. ACL-08: HLT.
[Hockenmaier and Steedman2007] Julia Hockenmaier
and Mark Steedman. 2007. CCGbank: A Corpus
of CCG Derivations and Dependency Structures
Extracted from the Penn Treebank. Computa-
tional Linguistics, 33(3):355–396.
[White and Rajkumar2008] Michael White and Ra-
jakrishnan Rajkumar. 2008. A more precise
analysis of punctuation for broad-coverage sur-
face realization with CCG. In Proc. of the Work-
shop on Grammar Engineering Across Frame-
works (GEAF08).
[White et al.2007] Michael White, Rajakrishnan Ra-
jkumar, and Scott Martin. 2007. Towards broad
coverage surface realization with CCG. In Proc.
of the Workshop on Using Corpora for NLG: Lan-
guage Generation and Machine Translation (UC-
NLG+MT).
</reference>
<page confidence="0.999608">
46
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.027394">
<title confidence="0.98688">Engineering for CCG using Ant and</title>
<author confidence="0.968178">Scott Martin</author>
<author confidence="0.968178">Rajakrishnan Rajkumar</author>
<author confidence="0.968178">Michael</author>
<affiliation confidence="0.910781">Ohio State Department of</affiliation>
<abstract confidence="0.997742731343284">Overview Corpus conversion and grammar extraction have traditionally been portrayed as tasks that are performed once and never again revisited (Burke et al., 2004). We report the successful implementation of an approach to these tasks that facilitates the improvement of grammar engineering as an evolving process. Taking the standard version of the CCGbank (Hockenmaier and Steedman, 2007) as input, our system then introduces greater depth of linguistic insight by augmenting it with attributes the original corpus lacks: Propbank roles and head lexicalization for case-marking prepositions (Boxwell and White, 2008), derivational re-structuring for punctuation analysis (White and Rajkumar, 2008), named entity annotation and lemmatization. Our implementation applies successive XSLT transforms controlled by Ant to an XML translation of this corpus, finally producan OpenCCG grammar This design is beneficial to grammar engineering both because of XSLT’s unique suitability to performing arbitrary transformations of XML trees and the fine-grained control that Ant provides. The resulting system enables state-of-the-art BLEU scores for surface realization on section 23 of the CCGbank. 1 Design Rather than transforming the corpus, it would simple to introduce several of the corpus augwork was supported in part by NSF grant no. IIS-0812297. 45 mentations that we make (e.g. punctuation restructuring) during grammar extraction. However, machine learning applications (e.g., realization ranking) benefit when the corpus and extracted grammar are consistent. A case in point: annotating the corpus with named entities, then using n-gram models with words replaced by their class labels to score realization. Accordingly, our pipeline design starts by generating an XML version of the CCGbank us- JavaCC from the original corpus. Next, conversion and extraction transforms are applied to create a converted corpus (also in XML) and extracted grammar (in OpenCCG format). We refactored our original design to separate the grammar engineering task into several configurable processes using Ant tasks. This simplifies process management, speeds experiment iterations, and facilitates the comparison of different grammar engineering strategies. 2 Implementation It seemed natural to implement our pipeline procedure in XSLT since both OpenCCG grammars and our CCGbank translation are represented in XML. Aside from its inherent attributes, XSLT requires no re-compilation as a result of being an interpreted language. Also, because both conversion and extraction use a series of transforms in a chain, each required sub-step can be split into as many XSLT transforms as desired. Both the conversion and extraction steps were implemented by extending Ant with custom tasks as configuring Ant tasks requires no of the NAACL HLT Workshop on Software Engineering, Testing, and Quality Assurance for Natural Language pages 45–46, Colorado, June 2009. Association for Computational Linguistics source editing or compilation. Ant is particularly well-suited to this process because, like OpenCCG (whose libraries are used in the extraction phase), it is written in Java. Our sysalso employs the Ant-provided invoking the JavaCC parser to translate the CCGbank to XML. This approach is preferable to a direct Java implementation because it keeps source code and configuration separate, allowing for more rapid grammar engineering iterations. Our particular implementation harnesses built-in specification of of corpus files) and reuse of series of XSLT transforms) data types. first of our extension tasks, encapsulates the conversion process while the second implements the grammar extraction procedure for a previously-converted corpus. 3 Experimental Impact Our conversion process currently supports various experiments by including only specified We gain the ability to ate corpora with various combinations of attributes, among them punctuation annotation, semantic class information, and named entities (lack of space precludes inclusion of examples see In addition to extracting grammars, the extraction task employs a constrained parser to create logical forms (LFs) for surface realization and extracts SRILM training data for realization scoring. This task also enables feature extraction from LF graphs for training during supertagging for realization (Espinosa et al., 2008). Our design supports comprehensive experimentation and has helped facilitate recent efforts to investigate factors impacting surface realization, such as semantic classes and named entities. Our initial results reported in (White et al., 2007) record 69.7% single-rooted LFs with a BLEU score of 0.5768. But current figures stand at 95.8% single-rooted LFs and a state-of-the art BLEU score of 0.8506 on section 23 of the CCGbank. (Fragmentary LFs result when at least one semantic dependency is missing from the LF graph.) In achieving these results, improvements in the grammar engineering process have been at least as important as improvements in the statistical models. 4 Conclusions and Future Work We designed and implemented a system that facilitates the process of grammar engineering by separating conversion and extraction steps into a pipeline of XSLT transforms. Our Ant implementation is highly configurable and has positive effects on our grammar engineering efforts, including increased process control and a shortened testing cycle for different grammar engineering approaches. Future work will focus on increasing the number of single-rooted LFs and integrating this system with OpenCCG.</abstract>
<note confidence="0.68248725">References [Boxwell and White2008] Stephen Boxwell and Michael White. 2008. Projecting Propbank roles the CCGbank. In [Burke et al.2004] Michael Burke, Aoife Cahill, Mairead Mccarthy, Ruth O’Donovan, Josef Genabith, and Andy Way. 2004. Evaluating automatic LFG F-structure annotation for the treebank. on Language and 2:523–547, December. [Espinosa et al.2008] Dominic Espinosa, Michael White, and Dennis Mehay. 2008. Hypertagging: Supertagging for surface realization with CCG. ACL-08: [Hockenmaier and Steedman2007] Julia Hockenmaier and Mark Steedman. 2007. CCGbank: A Corpus of CCG Derivations and Dependency Structures from the Penn Treebank. Computa- 33(3):355–396. [White and Rajkumar2008] Michael White and Ra-</note>
<abstract confidence="0.961127666666667">jakrishnan Rajkumar. 2008. A more precise analysis of punctuation for broad-coverage surrealization with CCG. In of the Workshop on Grammar Engineering Across Frame- [White et al.2007] Michael White, Rajakrishnan Rajkumar, and Scott Martin. 2007. Towards broad surface realization with CCG. In of the Workshop on Using Corpora for NLG: Language Generation and Machine Translation (UC-</abstract>
<intro confidence="0.492791">46</intro>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Stephen Boxwell</author>
<author>Michael White</author>
</authors>
<title>Projecting Propbank roles onto the CCGbank. In</title>
<date>2008</date>
<booktitle>Proc. LREC-08.</booktitle>
<marker>[Boxwell and White2008]</marker>
<rawString>Stephen Boxwell and Michael White. 2008. Projecting Propbank roles onto the CCGbank. In Proc. LREC-08.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael Burke</author>
<author>Aoife Cahill</author>
<author>Mairead Mccarthy</author>
<author>Ruth O’Donovan</author>
<author>Josef Genabith</author>
<author>Andy Way</author>
</authors>
<title>Evaluating automatic LFG F-structure annotation for the Penn-II treebank.</title>
<date>2004</date>
<journal>Research on Language and Computation,</journal>
<pages>2--523</pages>
<marker>[Burke et al.2004]</marker>
<rawString>Michael Burke, Aoife Cahill, Mairead Mccarthy, Ruth O’Donovan, Josef Genabith, and Andy Way. 2004. Evaluating automatic LFG F-structure annotation for the Penn-II treebank. Research on Language and Computation, 2:523–547, December.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Dominic Espinosa</author>
<author>Michael White</author>
<author>Dennis Mehay</author>
</authors>
<title>Hypertagging: Supertagging for surface realization with CCG.</title>
<date>2008</date>
<booktitle>In Proc. ACL-08: HLT.</booktitle>
<marker>[Espinosa et al.2008]</marker>
<rawString>Dominic Espinosa, Michael White, and Dennis Mehay. 2008. Hypertagging: Supertagging for surface realization with CCG. In Proc. ACL-08: HLT.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Julia Hockenmaier</author>
<author>Mark Steedman</author>
</authors>
<title>CCGbank: A Corpus of CCG Derivations and Dependency Structures Extracted from the Penn Treebank.</title>
<date>2007</date>
<journal>Computational Linguistics,</journal>
<volume>33</volume>
<issue>3</issue>
<marker>[Hockenmaier and Steedman2007]</marker>
<rawString>Julia Hockenmaier and Mark Steedman. 2007. CCGbank: A Corpus of CCG Derivations and Dependency Structures Extracted from the Penn Treebank. Computational Linguistics, 33(3):355–396.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael White</author>
<author>Rajakrishnan Rajkumar</author>
</authors>
<title>A more precise analysis of punctuation for broad-coverage surface realization with CCG.</title>
<date>2008</date>
<booktitle>In Proc. of the Workshop on Grammar Engineering Across Frameworks (GEAF08).</booktitle>
<marker>[White and Rajkumar2008]</marker>
<rawString>Michael White and Rajakrishnan Rajkumar. 2008. A more precise analysis of punctuation for broad-coverage surface realization with CCG. In Proc. of the Workshop on Grammar Engineering Across Frameworks (GEAF08).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael White</author>
<author>Rajakrishnan Rajkumar</author>
<author>Scott Martin</author>
</authors>
<title>Towards broad coverage surface realization with CCG.</title>
<date>2007</date>
<booktitle>In Proc. of the Workshop on Using Corpora for NLG: Language Generation and Machine Translation (UCNLG+MT).</booktitle>
<marker>[White et al.2007]</marker>
<rawString>Michael White, Rajakrishnan Rajkumar, and Scott Martin. 2007. Towards broad coverage surface realization with CCG. In Proc. of the Workshop on Using Corpora for NLG: Language Generation and Machine Translation (UCNLG+MT).</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>