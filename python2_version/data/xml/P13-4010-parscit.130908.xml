<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.001651">
<title confidence="0.9894055">
ICARUS – An Extensible Graphical Search Tool
for Dependency Treebanks
</title>
<author confidence="0.967085">
Markus G¨artner Gregor Thiele Wolfgang Seeker Anders Bj¨orkelund Jonas Kuhn
</author>
<affiliation confidence="0.9576275">
Institut f¨ur Maschinelle Sprachverarbeitung
University of Stuttgart
</affiliation>
<email confidence="0.99423">
firstname.lastname@ims.uni-stuttgart.de
</email>
<sectionHeader confidence="0.99377" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999872875">
We present ICARUS, a versatile graphi-
cal search tool to query dependency tree-
banks. Search results can be inspected
both quantitatively and qualitatively by
means of frequency lists, tables, or depen-
dency graphs. ICARUS also ships with
plugins that enable it to interface with tool
chains running either locally or remotely.
</bodyText>
<sectionHeader confidence="0.998803" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999688">
In this paper we present ICARUS&apos; a search and
visualization tool that primarily targets depen-
dency syntax. The tool has been designed such
that it requires minimal effort to get started with
searching a treebank or system output of an auto-
matic dependency parser, while still allowing for
flexible queries. It enables the user to search de-
pendency treebanks given a variety of constraints,
including searching for particular subtrees. Em-
phasis has been placed on a functionality that
makes it possible for the user to switch back and
forth between a high-level, aggregated view of the
search results and browsing of particular corpus
instances, with an intuitive visualization of the
way in which it matches the query. We believe this
to be an important prerequisite for accessing anno-
tated corpora, especially for non-expert users.
Search queries in ICARUS can be constructed
either in a graphical or a text-based manner. Build-
ing queries graphically removes the overhead of
learning a specialized query language and thus
makes the tool more accessible for a wider audi-
ence. ICARUS provides a very intuitive way of
breaking down the search results in terms of fre-
quency statistics (such as the distribution of part-
of-speech on one child of a particular verb against
the lemma of another child). The dimensions for
</bodyText>
<affiliation confidence="0.4251915">
&apos;Interactive platform for Corpus Analysis and Research
tools, University of Stuttgart
</affiliation>
<bodyText confidence="0.999576388888889">
the frequency break-down are simply specified by
using grouping operators in the query. The fre-
quency tables are filled and updated in real time
as the search proceeds through the corpus – allow-
ing for a quick detection of misassumptions in the
query.
ICARUS uses a plugin-based architecture that
permits the user to write his own plugins and in-
tegrate them into the system. For example, it
comes with a plugin that interfaces with an exter-
nal parser that can be used to parse a sentence from
within the user interface. The constraints for the
query can then be copy-pasted from the resulting
parse visualization. This facilitates example-based
querying, which is particularly helpful for inexpe-
rienced users – they do not have to recall details
of the annotation conventions outside of their fo-
cus of interests but can go by what the parser pro-
vides.2
ICARUS is written entirely in Java and runs out
of the box without requiring any installation of
the tool itself or additional libraries. This makes
it platform independent and the only requirement
is that a Java Runtime Environment (JRE) is in-
stalled on the host system. It is open-source and
freely available for download.3
As parsers and other Natural Language Pro-
cessing (NLP) tools are starting to find their way
into other sciences such as (digital) humanities or
social sciences, it gets increasingly important to
provide intuitive visualization tools that integrate
seamlessly with existing NLP tools and are easy
to use also for non-linguists. ICARUS interfaces
readily with NLP tools provided as web services
by CLARIN-D,4 the German incarnation of the
European Infrastructure initiative CLARIN.
</bodyText>
<footnote confidence="0.9997565">
2This is of course only practical with rather reliable auto-
matic parsers, but in our experience, the state-of-the-art qual-
ity is sufficient.
3www.ims.uni-stuttgart.de/forschung/
ressourcen/werkzeuge/icarus.en.html
4http://de.clarin.eu
</footnote>
<page confidence="0.983555">
55
</page>
<bodyText confidence="0.844145555555556">
Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics, pages 55–60,
Sofia, Bulgaria, August 4-9 2013. c�2013 Association for Computational Linguistics
The remainder of this paper is structured as fol-
lows: In Section 2 we elaborate on the motivation
for the tool and discuss related work. Section 3
presents a running example of how to build queries
and how results are visualized. In Section 4 we
outline the details of the architecture. Section 5
discusses ongoing work, and Section 6 concludes.
</bodyText>
<sectionHeader confidence="0.974488" genericHeader="introduction">
2 Background
</sectionHeader>
<bodyText confidence="0.99997805">
Linguistically annotated corpora are among the
most important sources of knowledge for empir-
ical linguistics as well as computational modeling
of natural language. Moreover, for most users the
only way to develop a systematic understanding
of the phenomena in the annotations is through a
process of continuous exploration, which requires
suitable and intuitive tools.
As automatic analysis tools such as syntactic
parsers have reached a high quality standard, ex-
ploration of large collections of auto-parsed cor-
pus material becomes more and more common. Of
course, the querying problem is the same no matter
whether some target annotation was added manu-
ally, as in a treebank, or automatically. Yet, the
strategy changes, as the user will try to make sure
he catches systematic parsing errors and develops
an understanding of how the results he is deal-
ing with come about. While there is no guaran-
teed method for avoiding erroneous matches, we
believe that an easy-to-use transparent querying
mechanism that allows the user to look at the same
or similar results from various angles is the best
possible basis for an informed usage: frequency
tables breaking down the corpus distributions in
different dimensions are a good high-level hint,
and the actual corpus instances should be only one
or two mouse clicks away, presented with a con-
cise visualization of the respective instantiation of
the query constraints.
Syntactic annotations are quite difficult to query
if one is interested in specific constructions that
are not directly encoded in the annotation labels
(which is the case for most interesting phenom-
ena). Several tools have been developed to enable
researchers to do this. However, many of these
tools are designed for constituent trees only.
Dependency syntax has become popular as a
framework for treebanking because it lends itself
naturally to the representation of free word order
phenomena and was thus adopted in the creation of
treebanks for many languages that have less strict
word order, such as the Prague Dependency Tree-
bank for Czech (Hajiˇc et al., 2000) or SynTagRus
for Russian (Boguslavsky et al., 2000).
A simple tool for visualization of dependency
trees is What’s wrong with my NLP? (Riedel,
2008). Its querying functionality is however lim-
ited to simple string-searching on surface forms. A
somewhat more advanced tool is MaltEval (Nils-
son and Nivre, 2008), which offers a number of
predefined search patterns ranging from part-of-
speech tag to branching degree.
On the other hand, powerful tools such as PML-
TQ (Pajas and ˇStˇep´anek, 2009) or INESS (Meurer,
2012) offer expressive query languages and can
facilitate cross-layer queries (e.g., involving both
syntactic and semantic structures). They also
accommodate both constituent and dependency
structures.
In terms of complexity in usage and expressiv-
ity, we believe ICARUS constitutes a middle way
between highly expressive and very simple visu-
alization tools. It is easy to use, requires no in-
stallation, while still having rich query and visual-
ization capabilities. ICARUS is similar to PML-
TQ in that it also allows the user to create queries
graphically. It is also similar to the search tool
GrETEL (Augustinus et al., 2012) as it interfaces
with a parser, allowing the user to create queries
starting from an automatic parse. Thus, queries
can be created without any prior knowledge of the
treebank annotation scheme.
As for searching constituent treebanks, there
is a plethora of existing search tools, such
as TGrep2 (Rohde, 2001), TigerSearch (Lezius,
2002), MonaSearch (Maryns, 2009), and Fangorn
(Ghodke and Bird, 2012), among others. They im-
plement different query languages with varying ef-
ficiency and expressiveness.
</bodyText>
<sectionHeader confidence="0.997897" genericHeader="method">
3 Introductory Example
</sectionHeader>
<bodyText confidence="0.999977444444444">
Before going into the technical details, we show
an example of what you can do with ICARUS.
Assume that a user is interested in passive con-
structions in English, but does not know exactly
how this is annotated in a treebank. As a first step,
he can use a provided plugin that interfaces with
a tool chain5 to parse a sentence that contains a
passive construction (thus adopting the example-
based querying approach laid out in the introduc-
</bodyText>
<footnote confidence="0.991285">
5using mate-tools by Bohnet (2010); available at
http://code.google.com/p/mate-tools
</footnote>
<page confidence="0.997406">
56
</page>
<bodyText confidence="0.9999565">
tion). Figure 1 shows the parser interface. In the
lower field, the user entered the sentence. The
other two fields show the output of the parser, once
as a graph and once as a feature value description.
</bodyText>
<figureCaption confidence="0.550891">
Figure 1: Parsing the sentence ”Mary was kissed
by a boy.” with a predefined tool chain.
</figureCaption>
<bodyText confidence="0.999911642857143">
In the second step, the user can then mark parts
of the output graph by selecting some nodes and
edges, and have ICARUS construct a query struc-
ture from it, following the drag-and-drop scheme
users are familiar with from typical office soft-
ware. The automatically built query can be man-
ually adjusted by the user (relaxing constraints)
and then be used to search for similar structures
in a treebank. The parsing step can of course be
skipped altogether, and a query can be constructed
by hand right away. Figure 2 shows the query
builder, where the user can define or edit search
graphs graphically in the main window, or enter
them as a query string in the lower window.
</bodyText>
<figureCaption confidence="0.982273">
Figure 2: Query builder for constructing queries.
</figureCaption>
<bodyText confidence="0.990071714285714">
For the example, Figure 3 shows the query as it
is automatically constructed by ICARUS from the
partial parse tree (3a), and what it might look like
after the user has changed it (3b). The modified
query matches passive constructions in English, as
annotated in the CoNLL 2008 Shared Task data set
(Surdeanu et al., 2008), which we use here.
</bodyText>
<figure confidence="0.958772">
(a) automatically extracted (b) manually edited
</figure>
<figureCaption confidence="0.952774666666667">
Figure 3: Search graphs for finding passive con-
structions. (a) was constructed automatically from
the parsed sentence, (b) is a more general version.
</figureCaption>
<bodyText confidence="0.999811230769231">
The search returns 6,386 matches. Note that
the query (Figure 3b) contains a &lt;*&gt;-expression.
This grouping operator groups the results accord-
ing to the specified dimension, in this case by the
lemma of the passivized verb. Figure 4 shows
the result view. On the left, a list of lemmas is
presented, sorted by frequency. Clicking on the
lemma displays the list of matches containing that
particular lemma on the right side. The match-
ing sentences can then be browsed, with the active
sentence also being shown as a tree. Note that the
instantiation of the query constraints is highlighted
in the tree display.
</bodyText>
<figureCaption confidence="0.71821">
Figure 4: Passive constructions in the treebank
grouped by lemma and sorted by frequency.
</figureCaption>
<bodyText confidence="0.982457928571429">
The query could be further refined to restrict it
to passives with an overt logical subject, using a
more complex search graph for the by-phrase and
a second instance of the grouping operator. The
results will then also be grouped by the lemma of
the logical subject, and are therefore presented as
a two-dimensional table. Figure 5 shows the new
query and the resulting view. The user is presented
with a frequency table, where each cell contains
the number of hits for this particular combination
of verb lemma and logical subject. Clicking on
the cell opens up a view similar to the right part of
Figure 4 where the user can then again browse the
actual trees.
</bodyText>
<page confidence="0.995428">
57
</page>
<figureCaption confidence="0.94470625">
Figure 5: Search graph and result view for passive
constructions with overt logical subjects, grouped
by lemma of the verb and the lemma of the logical
subject.
</figureCaption>
<bodyText confidence="0.943271857142857">
Finally, we can add a third grouping operator.
Figure 6 shows a further refined query for passives
with an overt logical subject and an object. In the
results, the user is presented with a list of values
for the first grouping operator to the left. Clicking
on one item in that list opens up a table on the right
presenting the other two dimensions of the query.
Figure 6: Search graph and result view for passive
constructions with an overt logical subject and an
object, grouped by lemma of the verb, the logical
subject, and the object.
This example demonstrates a typical use case
for a user that is interested in certain linguistic
constructions in his corpus. Creating the search
graph and interpreting the results does not re-
quire any specialized knowledge other than fa-
miliarity with the annotation of the corpus being
searched. It especially does not require any pro-
gramming skills, and the possibility to graphically
build a query obviates the need to learn a special-
ized query language.
</bodyText>
<sectionHeader confidence="0.991772" genericHeader="method">
4 Architecture
</sectionHeader>
<bodyText confidence="0.9997378">
This section goes into more details about the in-
ner workings of ICARUS. A main component
is the search engine, which enables the user to
quickly search treebanks for whatever he is inter-
ested in. A second important feature of ICARUS
is the plugin-based architecture, which allows for
the definition of custom extensions. Currently,
ICARUS can read the commonly used CoNLL de-
pendency formats, and it is easy to write exten-
sions in order to add additional formats.
</bodyText>
<subsectionHeader confidence="0.999892">
4.1 Search Engine and Query Builder
</subsectionHeader>
<bodyText confidence="0.999951944444445">
ICARUS has a tree-based search engine for tree-
banks, and includes a graphical query builder.
Structure and appearance of search graphs are sim-
ilar to the design used for displaying dependency
trees (cf. Figure 1), which is realized with the
open-source library JGraph.6 Queries and/or their
results can be saved to disk and later reloaded for
further processing.
Defining a query graphically basically amounts
to drawing a partial graph structure that defines
the type of structure that the user is interested in.
In practice, this is done by creating nodes in the
query builder and connecting them by edges. The
nodes correspond to words in the dependency trees
of the treebank. Several features like word iden-
tity, lemma, part of speech, etc. can be specified
for each node in the search graph in order to re-
strict the query. Dominance and precedence con-
straints over a set of nodes can be defined by sim-
ply linking nodes with the appropriate edge type.
Edges can be further specified for relation type,
distance, direction, projectivity, and transitivity. A
simple example is shown in Figures 2 and 3. The
search engine supports regular expressions for all
string-properties (form, lemma, part of speech, re-
lation). It also supports negation of (existence of)
nodes and edges, and their properties.
As an alternative to the search graph, the user
can also specify the query in a text-based format
by constructing a comma separated collection of
constraints in the form of key=value pairs for a
single node contained within square brackets. Hi-
erarchical structures are expressed by nesting their
textual representation. Figure 7 shows the text-
based form of the three queries used in the exam-
ples in Section 3.
</bodyText>
<footnote confidence="0.974132">
6http://www.jgraph.com/
</footnote>
<page confidence="0.997198">
58
</page>
<figure confidence="0.6235405">
Query 1: [lemma=be[pos=VBN,lemma=&lt;*&gt;,rel=VC]]
Query 2: [lemma=be[pos=VBN,lemma=&lt;*&gt;,rel=VC[form=by,rel=LGS[lemma=&lt;*&gt;,rel=PMOD]]]]
Query 3: [lemma=be[pos=VBN,lemma=&lt;*&gt;,rel=VC[form=by,rel=LGS[lemma=&lt;*&gt;,rel=PMOD]]
[lemma=&lt;*&gt;,rel=OBJ]]]
</figure>
<figureCaption confidence="0.999173">
Figure 7: Text representation of the three queries used in the example in Section 3.
</figureCaption>
<bodyText confidence="0.999917825">
A central feature of the query language is the
grouping operator (&lt;*&gt;), which will match any
value and cause the search engine to group result
entries by the actual instance of the property de-
clared to be grouped. The results of the search
will then be visualized as a list of instances to-
gether with their respective frequencies. Results
can be sorted alphabetically or by frequency (ab-
solute or relative counts) . Depending on the num-
ber of grouping operators used (up to a maximum
of three) the result is structured as a list of fre-
quencies (cf. Figure 4), a table of frequencies for
pairs of instances (cf. Figure 5), or a list where
each item then opens up a table of frequency re-
sults (cf. Figure 6). In the search graph and the
result view, different colors are used to distinguish
between different grouping operators.
The ICARUS search engine offers three differ-
ent search modes:
Sentence-based. Sentence based search stops at
the first successful hit in a sentence and returns
every sentence on a list of results at most once.
Exhaustive sentence-based. The exhaustive
sentence-based search mode extends the sentence
based search by the possibility of processing mul-
tiple hits within a single sentence. Every sentence
with at least one hit is returned exactly once. In the
result view, the user can then browse the different
hits found in one sentence.
Hit-based. Every successful hit is returned sepa-
rately on the corresponding list of results.
When a query is issued, the search results are
displayed on the fly as the search engine is pro-
cessing the treebank. The sentences can be ren-
dered in one of two ways: either as a tree, where
nodes are arranged vertically by depth in the tree,
or horizontally with all the nodes arranged side-
by-side. If a tree does not fit on the screen, part of
it is automatically collapsed but can be expanded
again by the user.
</bodyText>
<subsectionHeader confidence="0.984376">
4.2 Extensibility
</subsectionHeader>
<bodyText confidence="0.943933">
ICARUS relies on the Java Plugin Framework,7
which provides a powerful XML-based frame-
</bodyText>
<footnote confidence="0.876211">
7http://jpf.sourceforge.net/
</footnote>
<bodyText confidence="0.999946181818182">
work for defining plugins similarly to the engine
used by the popular Eclipse IDE project. The
plugin-based architecture makes it possible for
anybody to write extensions to ICARUS that are
specialized for a particular task. The parser inte-
gration of mate-tools demonstrated in Section 3 is
an example for such an extension.
The plugin system facilitates custom extensions
that make it possible to intercept certain stages
of an ongoing search process and interact with it.
This makes it possible for external tools to pre-
process search data and apply additional annota-
tions and/or filtering, or even make use of exist-
ing indices by using search constraints to limit the
amount of data passed to the search engine. With
this general setup, it is for example possible to eas-
ily extend ICARUS to work with constituent trees.
ICARUS comes with a dedicated plugin that
enables access to web services provided by
CLARIN-D. The project aims to provide tools and
services for language-centered research in the hu-
manities and social sciences. In contrast to the in-
tegration of, e.g., mate-tools, where the tool chain
is executed locally, the user can define a tool chain
by chaining several web services (e.g., lemmatiz-
ers, part-of-speech taggers etc.) together and ap-
ply them to his own data. To do this, ICARUS
is able to read and write the TCF exchange for-
mat (Heid et al., 2010) that is used by CLARIN-D
web services. The output can then be inspected
and searched using ICARUS. As new NLP tools
are added as CLARIN-D web services they can be
immediately employed by ICARUS.
</bodyText>
<sectionHeader confidence="0.968929" genericHeader="method">
5 Upcoming Extensions
</sectionHeader>
<bodyText confidence="0.954830222222222">
An upcoming release includes the following ex-
tensions:
• Currently, treebanks are assumed to fit into
the executing computer’s main memory.
The new implementation will support asyn-
chronous loading of data, with notifications
passed to the query engine or a plugin when
required data is available. Treebanks with
millions of entries can then be loaded in less
</bodyText>
<page confidence="0.996063">
59
</page>
<bodyText confidence="0.987076">
memory consuming chunks, thus keeping the
system responsive when access is requested.
• The search engine is being extended with an
operator that allows disjunctions of queries.
This will enable the user to aggregate fre-
quency output over multiple queries.
</bodyText>
<sectionHeader confidence="0.99916" genericHeader="conclusions">
6 Conclusion
</sectionHeader>
<bodyText confidence="0.999984333333333">
We have presented ICARUS, a versatile and user-
friendly search and visualization tool for depen-
dency trees. It is aimed not only at (computa-
tional) linguists, but also at people from other dis-
ciplines, e.g., the humanities or social sciences,
who work with language data. It lets the user
create queries graphically and returns results (1)
quantitatively by means of frequency lists and ta-
bles as well as (2) qualitatively by connecting the
statistics to the matching sentences and allowing
the user to browse them graphically. Its plugin-
based architecture enables it to interface for exam-
ple with external processing pipelines, which lets
the user apply processing tools directly from the
user interface.
In the future, specialized plugins are planned
to work with different linguistic annotations, e.g.
cross-sentence annotations as used to annotate
coreference chains. Additionally, a plugin is in-
tended that interfaces the search engine with a
database.
</bodyText>
<sectionHeader confidence="0.997639" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.999930444444444">
This work was funded by the Deutsche
Forschungsgemeinschaft (DFG) via the SFB
732 “Incremental Specification in Context”,
project D8, and by the Bundesministerium f¨ur
Bildung und Forschung (BMBF) via project No.
01UG1120F, CLARIN-D center Stuttgart. The
authors are also indebted to Andr´e Blessing and
Heike Zinsmeister for reading an earlier draft of
this paper.
</bodyText>
<sectionHeader confidence="0.999477" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999934934426229">
Liesbeth Augustinus, Vincent Vandeghinste, and
Frank Van Eynde. 2012. Example-based Treebank
Querying. In Proceedings of the Eight International
Conference on Language Resources and Evaluation
(LREC’12), Istanbul, Turkey. ELRA.
Igor Boguslavsky, Svetlana Grigorieva, Nikolai Grig-
oriev, Leonid Kreidlin, and Nadezhda Frid. 2000.
Dependency Treebank for Russian: Concept, Tools,
Types of Information. In COLING 2000, pages
987–991, Saarbr¨ucken, Germany.
Bernd Bohnet. 2010. Top Accuracy and Fast Depen-
dency Parsing is not a Contradiction. In COLING
2010, pages 89–97, Beijing, China.
Sumukh Ghodke and Steven Bird. 2012. Fangorn: A
System for Querying very large Treebanks. In COL-
ING 2012: Demonstration Papers, pages 175–182,
Mumbai, India.
Jan Hajiˇc, Alena B¨ohmov´a, Eva Hajiˇcov´a, and Barbora
Vidov´a-Hladk´a. 2000. The Prague Dependency
Treebank: A Three-Level Annotation Scenario. In
Treebanks: Building and Using Parsed Corpora,
pages 103–127. Amsterdam:Kluwer.
Ulrich Heid, Helmut Schmid, Kerstin Eckart, and Er-
hard Hinrichs. 2010. A Corpus Representation For-
mat for Linguistic Web Services: The D-SPIN Text
Corpus Format and its Relationship with ISO Stan-
dards. In Proceedings of the Seventh International
Conference on Language Resources and Evaluation
(LREC’10), Valletta, Malta. ELRA.
Wolfgang Lezius. 2002. Ein Suchwerkzeug f¨ur syn-
taktisch annotierte Textkorpora. Ph.D. thesis, IMS,
University of Stuttgart.
Hendrik Maryns. 2009. MonaSearch – A Tool for
Querying Linguistic Treebanks. In Proceedings of
TLT 2009, Groningen.
Paul Meurer. 2012. INESS-Search: A Search System
for LFG (and Other) Treebanks. In Miriam Butt and
Tracy Holloway King, editors, Proceedings of the
LFG2012 Conference. CSLI Publications.
Jens Nilsson and Joakim Nivre. 2008. MaltEval: an
Evaluation and Visualization Tool for Dependency
Parsing. In Proceedings of the Sixth International
Conference on Language Resources and Evaluation
(LREC’08), Marrakech, Morocco. ELRA.
Petr Pajas and Jan ˇStˇep´anek. 2009. System for Query-
ing Syntactically Annotated Corpora. In Proceed-
ings of the ACL-IJCNLP 2009 Software Demonstra-
tions, pages 33–36, Suntec, Singapore. Association
for Computational Linguistics.
Sebastian Riedel. 2008. What’s Wrong With My
NLP?
http://code.google.com/p/
whatswrong/.
Douglas L.T. Rohde. 2001. TGrep2 the next-
generation search engine for parse trees.
http://tedlab.mit.edu/˜dr/Tgrep2/.
Mihai Surdeanu, Richard Johansson, Adam Meyers,
Llu´ıs M`arquez, and Joakim Nivre. 2008. The
CoNLL 2008 Shared Task on Joint Parsing of Syn-
tactic and Semantic Dependencies. In CoNLL 2008,
pages 159–177, Manchester, England.
</reference>
<page confidence="0.998414">
60
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.957970">
<title confidence="0.9973425">ICARUS – An Extensible Graphical Search for Dependency Treebanks</title>
<author confidence="0.999726">Markus G¨artner Gregor Thiele Wolfgang Seeker Anders Bj¨orkelund Jonas</author>
<affiliation confidence="0.9979335">Institut f¨ur Maschinelle University of</affiliation>
<email confidence="0.981724">firstname.lastname@ims.uni-stuttgart.de</email>
<abstract confidence="0.998338555555556">We present ICARUS, a versatile graphical search tool to query dependency treebanks. Search results can be inspected both quantitatively and qualitatively by means of frequency lists, tables, or dependency graphs. ICARUS also ships with plugins that enable it to interface with tool chains running either locally or remotely.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Liesbeth Augustinus</author>
<author>Vincent Vandeghinste</author>
<author>Frank Van Eynde</author>
</authors>
<title>Example-based Treebank Querying.</title>
<date>2012</date>
<booktitle>In Proceedings of the Eight International Conference on Language Resources and Evaluation (LREC’12),</booktitle>
<location>Istanbul, Turkey. ELRA.</location>
<marker>Augustinus, Vandeghinste, Van Eynde, 2012</marker>
<rawString>Liesbeth Augustinus, Vincent Vandeghinste, and Frank Van Eynde. 2012. Example-based Treebank Querying. In Proceedings of the Eight International Conference on Language Resources and Evaluation (LREC’12), Istanbul, Turkey. ELRA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Igor Boguslavsky</author>
<author>Svetlana Grigorieva</author>
<author>Nikolai Grigoriev</author>
<author>Leonid Kreidlin</author>
<author>Nadezhda Frid</author>
</authors>
<title>Dependency Treebank for Russian: Concept, Tools, Types of Information.</title>
<date>2000</date>
<booktitle>In COLING</booktitle>
<pages>987--991</pages>
<location>Saarbr¨ucken, Germany.</location>
<contexts>
<context position="6583" citStr="Boguslavsky et al., 2000" startWordPosition="1027" endWordPosition="1030">s that are not directly encoded in the annotation labels (which is the case for most interesting phenomena). Several tools have been developed to enable researchers to do this. However, many of these tools are designed for constituent trees only. Dependency syntax has become popular as a framework for treebanking because it lends itself naturally to the representation of free word order phenomena and was thus adopted in the creation of treebanks for many languages that have less strict word order, such as the Prague Dependency Treebank for Czech (Hajiˇc et al., 2000) or SynTagRus for Russian (Boguslavsky et al., 2000). A simple tool for visualization of dependency trees is What’s wrong with my NLP? (Riedel, 2008). Its querying functionality is however limited to simple string-searching on surface forms. A somewhat more advanced tool is MaltEval (Nilsson and Nivre, 2008), which offers a number of predefined search patterns ranging from part-ofspeech tag to branching degree. On the other hand, powerful tools such as PMLTQ (Pajas and ˇStˇep´anek, 2009) or INESS (Meurer, 2012) offer expressive query languages and can facilitate cross-layer queries (e.g., involving both syntactic and semantic structures). They </context>
</contexts>
<marker>Boguslavsky, Grigorieva, Grigoriev, Kreidlin, Frid, 2000</marker>
<rawString>Igor Boguslavsky, Svetlana Grigorieva, Nikolai Grigoriev, Leonid Kreidlin, and Nadezhda Frid. 2000. Dependency Treebank for Russian: Concept, Tools, Types of Information. In COLING 2000, pages 987–991, Saarbr¨ucken, Germany.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Bernd Bohnet</author>
</authors>
<title>Top Accuracy and Fast Dependency Parsing is not a Contradiction. In COLING</title>
<date>2010</date>
<pages>89--97</pages>
<location>Beijing, China.</location>
<contexts>
<context position="8663" citStr="Bohnet (2010)" startWordPosition="1362" endWordPosition="1363">ke and Bird, 2012), among others. They implement different query languages with varying efficiency and expressiveness. 3 Introductory Example Before going into the technical details, we show an example of what you can do with ICARUS. Assume that a user is interested in passive constructions in English, but does not know exactly how this is annotated in a treebank. As a first step, he can use a provided plugin that interfaces with a tool chain5 to parse a sentence that contains a passive construction (thus adopting the examplebased querying approach laid out in the introduc5using mate-tools by Bohnet (2010); available at http://code.google.com/p/mate-tools 56 tion). Figure 1 shows the parser interface. In the lower field, the user entered the sentence. The other two fields show the output of the parser, once as a graph and once as a feature value description. Figure 1: Parsing the sentence ”Mary was kissed by a boy.” with a predefined tool chain. In the second step, the user can then mark parts of the output graph by selecting some nodes and edges, and have ICARUS construct a query structure from it, following the drag-and-drop scheme users are familiar with from typical office software. The aut</context>
</contexts>
<marker>Bohnet, 2010</marker>
<rawString>Bernd Bohnet. 2010. Top Accuracy and Fast Dependency Parsing is not a Contradiction. In COLING 2010, pages 89–97, Beijing, China.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sumukh Ghodke</author>
<author>Steven Bird</author>
</authors>
<title>Fangorn: A System for Querying very large Treebanks.</title>
<date>2012</date>
<booktitle>In COLING 2012: Demonstration Papers,</booktitle>
<pages>175--182</pages>
<location>Mumbai, India.</location>
<contexts>
<context position="8068" citStr="Ghodke and Bird, 2012" startWordPosition="1260" endWordPosition="1263">hile still having rich query and visualization capabilities. ICARUS is similar to PMLTQ in that it also allows the user to create queries graphically. It is also similar to the search tool GrETEL (Augustinus et al., 2012) as it interfaces with a parser, allowing the user to create queries starting from an automatic parse. Thus, queries can be created without any prior knowledge of the treebank annotation scheme. As for searching constituent treebanks, there is a plethora of existing search tools, such as TGrep2 (Rohde, 2001), TigerSearch (Lezius, 2002), MonaSearch (Maryns, 2009), and Fangorn (Ghodke and Bird, 2012), among others. They implement different query languages with varying efficiency and expressiveness. 3 Introductory Example Before going into the technical details, we show an example of what you can do with ICARUS. Assume that a user is interested in passive constructions in English, but does not know exactly how this is annotated in a treebank. As a first step, he can use a provided plugin that interfaces with a tool chain5 to parse a sentence that contains a passive construction (thus adopting the examplebased querying approach laid out in the introduc5using mate-tools by Bohnet (2010); ava</context>
</contexts>
<marker>Ghodke, Bird, 2012</marker>
<rawString>Sumukh Ghodke and Steven Bird. 2012. Fangorn: A System for Querying very large Treebanks. In COLING 2012: Demonstration Papers, pages 175–182, Mumbai, India.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jan Hajiˇc</author>
<author>Alena B¨ohmov´a</author>
<author>Eva Hajiˇcov´a</author>
<author>Barbora Vidov´a-Hladk´a</author>
</authors>
<title>The Prague Dependency Treebank: A Three-Level Annotation Scenario. In Treebanks: Building and Using Parsed Corpora,</title>
<date>2000</date>
<pages>103--127</pages>
<publisher>Amsterdam:Kluwer.</publisher>
<marker>Hajiˇc, B¨ohmov´a, Hajiˇcov´a, Vidov´a-Hladk´a, 2000</marker>
<rawString>Jan Hajiˇc, Alena B¨ohmov´a, Eva Hajiˇcov´a, and Barbora Vidov´a-Hladk´a. 2000. The Prague Dependency Treebank: A Three-Level Annotation Scenario. In Treebanks: Building and Using Parsed Corpora, pages 103–127. Amsterdam:Kluwer.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ulrich Heid</author>
<author>Helmut Schmid</author>
<author>Kerstin Eckart</author>
<author>Erhard Hinrichs</author>
</authors>
<title>A Corpus Representation Format for Linguistic Web Services: The D-SPIN Text Corpus Format and its Relationship with ISO Standards.</title>
<date>2010</date>
<booktitle>In Proceedings of the Seventh International Conference on Language Resources and Evaluation (LREC’10),</booktitle>
<location>Valletta, Malta. ELRA.</location>
<contexts>
<context position="18746" citStr="Heid et al., 2010" startWordPosition="3034" endWordPosition="3037">e possible to easily extend ICARUS to work with constituent trees. ICARUS comes with a dedicated plugin that enables access to web services provided by CLARIN-D. The project aims to provide tools and services for language-centered research in the humanities and social sciences. In contrast to the integration of, e.g., mate-tools, where the tool chain is executed locally, the user can define a tool chain by chaining several web services (e.g., lemmatizers, part-of-speech taggers etc.) together and apply them to his own data. To do this, ICARUS is able to read and write the TCF exchange format (Heid et al., 2010) that is used by CLARIN-D web services. The output can then be inspected and searched using ICARUS. As new NLP tools are added as CLARIN-D web services they can be immediately employed by ICARUS. 5 Upcoming Extensions An upcoming release includes the following extensions: • Currently, treebanks are assumed to fit into the executing computer’s main memory. The new implementation will support asynchronous loading of data, with notifications passed to the query engine or a plugin when required data is available. Treebanks with millions of entries can then be loaded in less 59 memory consuming chu</context>
</contexts>
<marker>Heid, Schmid, Eckart, Hinrichs, 2010</marker>
<rawString>Ulrich Heid, Helmut Schmid, Kerstin Eckart, and Erhard Hinrichs. 2010. A Corpus Representation Format for Linguistic Web Services: The D-SPIN Text Corpus Format and its Relationship with ISO Standards. In Proceedings of the Seventh International Conference on Language Resources and Evaluation (LREC’10), Valletta, Malta. ELRA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Wolfgang Lezius</author>
</authors>
<title>Ein Suchwerkzeug f¨ur syntaktisch annotierte Textkorpora.</title>
<date>2002</date>
<tech>Ph.D. thesis,</tech>
<institution>IMS, University of Stuttgart.</institution>
<contexts>
<context position="8004" citStr="Lezius, 2002" startWordPosition="1253" endWordPosition="1254">n tools. It is easy to use, requires no installation, while still having rich query and visualization capabilities. ICARUS is similar to PMLTQ in that it also allows the user to create queries graphically. It is also similar to the search tool GrETEL (Augustinus et al., 2012) as it interfaces with a parser, allowing the user to create queries starting from an automatic parse. Thus, queries can be created without any prior knowledge of the treebank annotation scheme. As for searching constituent treebanks, there is a plethora of existing search tools, such as TGrep2 (Rohde, 2001), TigerSearch (Lezius, 2002), MonaSearch (Maryns, 2009), and Fangorn (Ghodke and Bird, 2012), among others. They implement different query languages with varying efficiency and expressiveness. 3 Introductory Example Before going into the technical details, we show an example of what you can do with ICARUS. Assume that a user is interested in passive constructions in English, but does not know exactly how this is annotated in a treebank. As a first step, he can use a provided plugin that interfaces with a tool chain5 to parse a sentence that contains a passive construction (thus adopting the examplebased querying approach</context>
</contexts>
<marker>Lezius, 2002</marker>
<rawString>Wolfgang Lezius. 2002. Ein Suchwerkzeug f¨ur syntaktisch annotierte Textkorpora. Ph.D. thesis, IMS, University of Stuttgart.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hendrik Maryns</author>
</authors>
<title>MonaSearch – A Tool for Querying Linguistic Treebanks.</title>
<date>2009</date>
<booktitle>In Proceedings of TLT 2009,</booktitle>
<location>Groningen.</location>
<contexts>
<context position="8031" citStr="Maryns, 2009" startWordPosition="1256" endWordPosition="1257"> requires no installation, while still having rich query and visualization capabilities. ICARUS is similar to PMLTQ in that it also allows the user to create queries graphically. It is also similar to the search tool GrETEL (Augustinus et al., 2012) as it interfaces with a parser, allowing the user to create queries starting from an automatic parse. Thus, queries can be created without any prior knowledge of the treebank annotation scheme. As for searching constituent treebanks, there is a plethora of existing search tools, such as TGrep2 (Rohde, 2001), TigerSearch (Lezius, 2002), MonaSearch (Maryns, 2009), and Fangorn (Ghodke and Bird, 2012), among others. They implement different query languages with varying efficiency and expressiveness. 3 Introductory Example Before going into the technical details, we show an example of what you can do with ICARUS. Assume that a user is interested in passive constructions in English, but does not know exactly how this is annotated in a treebank. As a first step, he can use a provided plugin that interfaces with a tool chain5 to parse a sentence that contains a passive construction (thus adopting the examplebased querying approach laid out in the introduc5u</context>
</contexts>
<marker>Maryns, 2009</marker>
<rawString>Hendrik Maryns. 2009. MonaSearch – A Tool for Querying Linguistic Treebanks. In Proceedings of TLT 2009, Groningen.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Paul Meurer</author>
</authors>
<title>INESS-Search: A Search System for LFG (and Other) Treebanks.</title>
<date>2012</date>
<booktitle>Proceedings of the LFG2012 Conference.</booktitle>
<editor>In Miriam Butt and Tracy Holloway King, editors,</editor>
<publisher>CSLI Publications.</publisher>
<contexts>
<context position="7047" citStr="Meurer, 2012" startWordPosition="1104" endWordPosition="1105">ve less strict word order, such as the Prague Dependency Treebank for Czech (Hajiˇc et al., 2000) or SynTagRus for Russian (Boguslavsky et al., 2000). A simple tool for visualization of dependency trees is What’s wrong with my NLP? (Riedel, 2008). Its querying functionality is however limited to simple string-searching on surface forms. A somewhat more advanced tool is MaltEval (Nilsson and Nivre, 2008), which offers a number of predefined search patterns ranging from part-ofspeech tag to branching degree. On the other hand, powerful tools such as PMLTQ (Pajas and ˇStˇep´anek, 2009) or INESS (Meurer, 2012) offer expressive query languages and can facilitate cross-layer queries (e.g., involving both syntactic and semantic structures). They also accommodate both constituent and dependency structures. In terms of complexity in usage and expressivity, we believe ICARUS constitutes a middle way between highly expressive and very simple visualization tools. It is easy to use, requires no installation, while still having rich query and visualization capabilities. ICARUS is similar to PMLTQ in that it also allows the user to create queries graphically. It is also similar to the search tool GrETEL (Augu</context>
</contexts>
<marker>Meurer, 2012</marker>
<rawString>Paul Meurer. 2012. INESS-Search: A Search System for LFG (and Other) Treebanks. In Miriam Butt and Tracy Holloway King, editors, Proceedings of the LFG2012 Conference. CSLI Publications.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jens Nilsson</author>
<author>Joakim Nivre</author>
</authors>
<title>MaltEval: an Evaluation and Visualization Tool for Dependency Parsing.</title>
<date>2008</date>
<booktitle>In Proceedings of the Sixth International Conference on Language Resources and Evaluation (LREC’08),</booktitle>
<location>Marrakech, Morocco. ELRA.</location>
<contexts>
<context position="6840" citStr="Nilsson and Nivre, 2008" startWordPosition="1067" endWordPosition="1071">syntax has become popular as a framework for treebanking because it lends itself naturally to the representation of free word order phenomena and was thus adopted in the creation of treebanks for many languages that have less strict word order, such as the Prague Dependency Treebank for Czech (Hajiˇc et al., 2000) or SynTagRus for Russian (Boguslavsky et al., 2000). A simple tool for visualization of dependency trees is What’s wrong with my NLP? (Riedel, 2008). Its querying functionality is however limited to simple string-searching on surface forms. A somewhat more advanced tool is MaltEval (Nilsson and Nivre, 2008), which offers a number of predefined search patterns ranging from part-ofspeech tag to branching degree. On the other hand, powerful tools such as PMLTQ (Pajas and ˇStˇep´anek, 2009) or INESS (Meurer, 2012) offer expressive query languages and can facilitate cross-layer queries (e.g., involving both syntactic and semantic structures). They also accommodate both constituent and dependency structures. In terms of complexity in usage and expressivity, we believe ICARUS constitutes a middle way between highly expressive and very simple visualization tools. It is easy to use, requires no installat</context>
</contexts>
<marker>Nilsson, Nivre, 2008</marker>
<rawString>Jens Nilsson and Joakim Nivre. 2008. MaltEval: an Evaluation and Visualization Tool for Dependency Parsing. In Proceedings of the Sixth International Conference on Language Resources and Evaluation (LREC’08), Marrakech, Morocco. ELRA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Petr Pajas</author>
<author>Jan ˇStˇep´anek</author>
</authors>
<title>System for Querying Syntactically Annotated Corpora.</title>
<date>2009</date>
<booktitle>In Proceedings of the ACL-IJCNLP 2009 Software Demonstrations,</booktitle>
<pages>33--36</pages>
<institution>Suntec, Singapore. Association for Computational Linguistics.</institution>
<marker>Pajas, ˇStˇep´anek, 2009</marker>
<rawString>Petr Pajas and Jan ˇStˇep´anek. 2009. System for Querying Syntactically Annotated Corpora. In Proceedings of the ACL-IJCNLP 2009 Software Demonstrations, pages 33–36, Suntec, Singapore. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sebastian Riedel</author>
</authors>
<title>What’s Wrong With My NLP?</title>
<date>2008</date>
<contexts>
<context position="6680" citStr="Riedel, 2008" startWordPosition="1045" endWordPosition="1046">Several tools have been developed to enable researchers to do this. However, many of these tools are designed for constituent trees only. Dependency syntax has become popular as a framework for treebanking because it lends itself naturally to the representation of free word order phenomena and was thus adopted in the creation of treebanks for many languages that have less strict word order, such as the Prague Dependency Treebank for Czech (Hajiˇc et al., 2000) or SynTagRus for Russian (Boguslavsky et al., 2000). A simple tool for visualization of dependency trees is What’s wrong with my NLP? (Riedel, 2008). Its querying functionality is however limited to simple string-searching on surface forms. A somewhat more advanced tool is MaltEval (Nilsson and Nivre, 2008), which offers a number of predefined search patterns ranging from part-ofspeech tag to branching degree. On the other hand, powerful tools such as PMLTQ (Pajas and ˇStˇep´anek, 2009) or INESS (Meurer, 2012) offer expressive query languages and can facilitate cross-layer queries (e.g., involving both syntactic and semantic structures). They also accommodate both constituent and dependency structures. In terms of complexity in usage and </context>
</contexts>
<marker>Riedel, 2008</marker>
<rawString>Sebastian Riedel. 2008. What’s Wrong With My NLP?</rawString>
</citation>
<citation valid="false">
<note>http://code.google.com/p/ whatswrong/.</note>
<marker></marker>
<rawString>http://code.google.com/p/ whatswrong/.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Douglas L T Rohde</author>
</authors>
<title>TGrep2 the nextgeneration search engine for parse trees.</title>
<date>2001</date>
<note>http://tedlab.mit.edu/˜dr/Tgrep2/.</note>
<contexts>
<context position="7976" citStr="Rohde, 2001" startWordPosition="1250" endWordPosition="1251">nd very simple visualization tools. It is easy to use, requires no installation, while still having rich query and visualization capabilities. ICARUS is similar to PMLTQ in that it also allows the user to create queries graphically. It is also similar to the search tool GrETEL (Augustinus et al., 2012) as it interfaces with a parser, allowing the user to create queries starting from an automatic parse. Thus, queries can be created without any prior knowledge of the treebank annotation scheme. As for searching constituent treebanks, there is a plethora of existing search tools, such as TGrep2 (Rohde, 2001), TigerSearch (Lezius, 2002), MonaSearch (Maryns, 2009), and Fangorn (Ghodke and Bird, 2012), among others. They implement different query languages with varying efficiency and expressiveness. 3 Introductory Example Before going into the technical details, we show an example of what you can do with ICARUS. Assume that a user is interested in passive constructions in English, but does not know exactly how this is annotated in a treebank. As a first step, he can use a provided plugin that interfaces with a tool chain5 to parse a sentence that contains a passive construction (thus adopting the ex</context>
</contexts>
<marker>Rohde, 2001</marker>
<rawString>Douglas L.T. Rohde. 2001. TGrep2 the nextgeneration search engine for parse trees. http://tedlab.mit.edu/˜dr/Tgrep2/.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mihai Surdeanu</author>
<author>Richard Johansson</author>
<author>Adam Meyers</author>
<author>Llu´ıs M`arquez</author>
<author>Joakim Nivre</author>
</authors>
<date>2008</date>
<booktitle>The CoNLL 2008 Shared Task on Joint Parsing of Syntactic and Semantic Dependencies. In CoNLL</booktitle>
<pages>159--177</pages>
<location>Manchester, England.</location>
<marker>Surdeanu, Johansson, Meyers, M`arquez, Nivre, 2008</marker>
<rawString>Mihai Surdeanu, Richard Johansson, Adam Meyers, Llu´ıs M`arquez, and Joakim Nivre. 2008. The CoNLL 2008 Shared Task on Joint Parsing of Syntactic and Semantic Dependencies. In CoNLL 2008, pages 159–177, Manchester, England.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>