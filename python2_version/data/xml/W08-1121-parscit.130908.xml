<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.057961">
<title confidence="0.9954175">
Degree of Abstraction in Referring Expression Generation and its Relation
with the Construction of the Contrast Set
</title>
<author confidence="0.954513">
Raquel Herv´as
</author>
<affiliation confidence="0.7487085">
Facultad de Inform´atica
Universidad Complutense de Madrid
</affiliation>
<address confidence="0.893735">
Madrid, Spain
</address>
<email confidence="0.996711">
raquelhb@fdi.ucm.es
</email>
<author confidence="0.900595">
Pablo Gerv´as
</author>
<affiliation confidence="0.7101925">
Facultad de Inform´atica
Universidad Complutense de Madrid
</affiliation>
<address confidence="0.889773">
Madrid, Spain
</address>
<email confidence="0.997809">
pgervas@sip.ucm.es
</email>
<sectionHeader confidence="0.995397" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.998063631578947">
Referring Expression Generation (REG) is the
task that deals with references to entities ap-
pearing in a spoken or written discourse. If
these referents are organized in terms of a tax-
onomy, there are two problems when estab-
lishing a reference that would distinguish an
intended referent from its possible distractors.
The first one is the choice of the set ofpossible
distractrors or contrast set in the given situa-
tion. The second is to identify at what level of
the taxonomy to phrase the reference so that
it unambiguously picks out only the intended
referent, leaving all possible distractors in dif-
ferent branches of the taxonomy. We discuss
the use of ontologies to deal with the REG
task, paying special attention to the choice of
the the contrast set and to the use of the in-
formation of the ontology to select the most
appropriate type to be used for the referent.
</bodyText>
<sectionHeader confidence="0.999006" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.996812195121951">
Referring Expression Generation (REG) is the task
that deals with references of entities appearing in a
discourse. In a context where possible referents are
organized in terms of a taxonomy (or subsumption
hierarchy) and may additionally be differentiated by
their attributes, there are two possible ways of estab-
lishing a reference that will distinguish an intended
referent from its possible distractors.
One is to identify at what level of the taxonomy to
phrase the reference so that it unambiguously picks
out only the intended referent, leaving all possible
distractors in different branches of the taxonomy.
Another, applied once a particular level of reference
has been chosen, is to resort to mentioning addi-
tional attributes of the intended referents that distin-
guish it from any remaining distractors that share the
same branch of the taxonomy.
While the second task has been addressed often
in existing literature, the first one is often glossed
over by requiring that the levels to be used for each
element come specified in the input. However, if
this task is to be considered as a specific problem
to be solved computationally, it opens up an addi-
tional problem. If the elements in the universe are
classified in a taxonomy with a single root and the
reference was established at a high enough level in
the taxonomy, potentially everything in the universe
could be a distractor for any other element.
In this paper we will discuss the use of ontolo-
gies to deal with the referring expression generation
task. We will pay special attention to the choice of
the contrast set and the use of ontology information
to select the most appropriate type to be used for the
referent. This work has been centered in the gener-
ation of definite noun phrases where the type of an
element and a set of its properties are given to dis-
tinguish it from the other elements in focus. We are
also supposing that the situations in which the ref-
erence is produced are static, that is, the addressee’s
perception of the world does not change during the
process of reference generation.
</bodyText>
<sectionHeader confidence="0.999573" genericHeader="related work">
2 Related Work
</sectionHeader>
<bodyText confidence="0.9999605">
The appropriate use of referring expressions to com-
pete with human-generated texts involves a certain
difficulty. According to Reiter and Dale (2000), a re-
ferring expression must communicate enough infor-
</bodyText>
<page confidence="0.991201">
161
</page>
<bodyText confidence="0.999975066666666">
mation to identify univocally the intended referent
within the context of the current discourse, but al-
ways avoiding unnecessary or redundant modifiers.
Reiter and Dale (1992) describe a fast algorithm
for generating referring expressions in the context
of a natural language generation system. Their al-
gorithm relies on the following set of assumptions
about the underlying knowledge base that must be
used: (1) every entity is characterized in terms of
a collection of attributes and their values, (2) every
entity has as one of its attributes a type, and (3) the
knowledge base may organize some attribute values
as a subsumption hierarchy. Additionally, each ob-
ject represented in the system should have an associ-
ated basic level value, which corresponds to the con-
cept which is preferred when referring to that object.
These assumptions are satisfied if a description
logic ontology is used for this purpose. Entities
would correspond to instances of concepts from the
ontology, the attribute corresponding to the type
would be the concept of which they are immediate
instances, and the taxonomical structure of the on-
tology of concepts would provide the subsumption
hierarchy. To construct a reference to a particular
entity, the algorithm takes as input a symbol corre-
sponding to the intended referent and a list of sym-
bols corresponding to other entities in focus, known
as the contrast set. The algorithm returns a list of
attribute-value pairs that correspond to the semantic
content of the referring expression.
</bodyText>
<sectionHeader confidence="0.98706" genericHeader="method">
3 Generating References Using Ontologies
</sectionHeader>
<bodyText confidence="0.999993">
A previously developed ontology about wines has
been used to test the ideas presented in this work.
This is a sample ontology implemented following
a version published by Brachman and colleagues
(Brachman et al., 1991) and distributed along with
the CLASSIC knowledge representation system.
We have focused on the taxonomy of wines pro-
vided by the ontology. Wines are divided in three
main categories: Red Wine, White Wine and
Rose Wine. Inside these main categories there is
a complex taxonomy of different kinds of wines.
In addition, the ontology also contains several in-
stances of the different concepts. Each of these
instances is described using features such as body,
color, flavor, producer, and so on.
The aim is to generate references for different in-
stances of wines which are together in a discourse.
The first step is to select the set of distractors or con-
trast set for the specific referent. Then, an algorithm
for deciding which is the best reference to use is ap-
plied. We have considered as the best reference pos-
sible the use of the type that distinguishes the refer-
ent from the distractors and at the same time is as
general as possible. For example, if we are referring
to an instance of Chardonnay wine (that is a white
one) in a situation where the rest of wines are all
red wines, the most suitable reference is “the white
wine” and not “the chardonnay”. On the contrary,
the more specific (but unnecessary) reference might
lead the addressee to infer that this information is
somehow relevant. If only white wines (as direct
type of the referent) are considered for the contrast
set, only the more specific (and inappropriate) refer-
ence may be generated. Therefore, a wide enough
contrast set must be considered in each case.
Finally, if the type chosen is not enough to dis-
tinguish the referent from the contrast set, attribute
selection is applied to select a subset of the element
properties that distinguish it.
</bodyText>
<subsectionHeader confidence="0.999419">
3.1 Composing the Contrast Set
</subsectionHeader>
<bodyText confidence="0.9999965">
Information about type is generally used to deter-
mine which elements of the world must be consid-
ered in the contrast set. In this work, all the informa-
tion about the world is located in an ontology. Each
instance of the world contained in it has a direct type
(the most specific concept it belongs to) and a set of
undirect types that are all the types between the di-
rect type and the root of the ontology.
In the work developed we have used the whole
ontology as contrast set. We have considered it as
the most suitable option for most situations where
the elements involved can belong to quite different
types. As we will see later, this choice avoids the
use of references more specific than desired while at
the same time it allows the algorithm to choose the
type that is more suitable in a given situation.
</bodyText>
<subsectionHeader confidence="0.999622">
3.2 An Appropriate Type for the Referent
</subsectionHeader>
<bodyText confidence="0.9999775">
Our approach takes as initial distinguishing attribute
the type of the elements appearing in the world. This
kind of solution is enough when the types defined for
each of the entities of the world are fixed and there is
</bodyText>
<page confidence="0.995841">
162
</page>
<bodyText confidence="0.999972307692308">
not a close relation for different types. For example,
a solution that takes as type the strict one defined
in an element would not consider a doberman and a
chihuahua as being both of them dogs.
The algorithm we have implemented can be seen
in Figure 1. Here, r is the intended referent, C is
the contrast set, A is the list of attributes that the in-
stances of the ontology hold, typeValue is the type
that would be assigned to the referent by the algo-
rithm, and L is the list of attribute-value pairs re-
turned if the type is not enough to rule out all the
distractors. The rules-out function works as the
one used in the Incremental algorithm, and the func-
tion incremental-algorithm calls directly to
the original algorithm by Reiter and Dale.
The function find-best-value-type is the
one that delivers the most appropriate type for the
intended referent r taking into account the informa-
tion in the ontology. We have considered as basic
level value for the type the most specific of the com-
mon types of the instances of the ontology. From
this basic level type, the branch of concepts between
it and the direct type of the intended referent r is vis-
ited. The type that will be used in the reference is the
most general concept from this branch that discards
a bigger number of distractors.
</bodyText>
<subsectionHeader confidence="0.9894475">
3.3 Attribute Selection for Reference
Completion
</subsectionHeader>
<bodyText confidence="0.99995725">
In some cases the type would not be enough to dis-
tinguish a referent from the other elements of the
world. This situation is produced when they belong
to the same type. In this situation it will be necessary
to use their properties to distinguish between them.
The attribute selection carried out in the Incremental
algorithm from Reiter and Dale has been applied to
these situations.
</bodyText>
<sectionHeader confidence="0.9679" genericHeader="method">
4 Some Examples
</sectionHeader>
<bodyText confidence="0.998721">
We have tested the implemented algorithm over dif-
ferent situations in which a set of wines is presented.
For each of them, a distinguishing description is pro-
vided using the appropriate type found using the on-
tology and a set of attributes when they were re-
quired. The instances of the world we have con-
sidered are shown in Table 1 (the properties of the
wines that have not been used by the algorithm are
</bodyText>
<figureCaption confidence="0.999816">
Figure 1: The Algorithm
</figureCaption>
<bodyText confidence="0.985091333333333">
not shown). The references generated for each of
the referents are (numbers correspond to examples
in the table):
</bodyText>
<listItem confidence="0.918405166666667">
1. “The Riesling”. There is another white wine
but not a Dry Riesling one, so the most
general type discarding all the distractors is
Riesling.
2. “The moderate Cabernet Sauvignon”. Here
the type is not enough to distinguish this
</listItem>
<bodyText confidence="0.841097333333333">
referent, so its attributes are used. The
property that distinguish it from the other
Cabernet Sauvignon is the flavor.
</bodyText>
<listItem confidence="0.791963428571429">
3. “The strong Cabernet Sauvignon”. As in
the previous case the strong flavor is used
to distinguish the wine from the other
Cabernet Sauvignon.
4. “The Rose Wine”. In this case there are no
more rose wines, so this generic type is enough
to distinguish the referent.
</listItem>
<page confidence="0.999377">
163
</page>
<tableCaption confidence="0.999601">
Table 1: Examples
</tableCaption>
<sectionHeader confidence="0.996637" genericHeader="conclusions">
5 Conclusions and Future Work
</sectionHeader>
<bodyText confidence="0.99999284375">
The main advantage of this approach is that the al-
gorithm always finds the most suitable value for the
type, taking into account the other entities of the
world. Since this solution is completely generic and
domain-independent, the algorithm would work in
the same way with more general ontologies. For
example, if the considered ontology contains infor-
mation not only about wines, but also about other
kinds of drinks, the values to be used as types of
the referents would also be chosen in the same way.
In this situation the referent could be the only wine
among other drinks, and the reference generated for
it would be the most appropriate one: “the wine”.
In the Incremental algorithm, Reiter and Dale do
not address the question of how the contrast set is
constructed, stating that the contrast set is one of the
inputs of their algorithm. In our work, we have cho-
sen as contrast set all the instances that can be found
in the ontology. This solution allows the algorithm
to work with enough information to choose exactly
at which level of the ontology the discourse is being
displayed (more general or more specific). With this
information the generated references are adapted to
the level of specificity required in each case.
The Incremental algorithm also states that the ba-
sic level value is obtained from the knowledge base
or the user model. In this paper we have imple-
mented a dynamic way to obtain this value that only
depends on the knowledge available about the world.
However, the use of some kind of user model repre-
senting the expertise level of the addressee in a spe-
cific domain could be explored in the future.
</bodyText>
<sectionHeader confidence="0.9982" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.9998746">
This research is funded by the Spanish Ministry
of Education and Science (TIN2006-14433-C02-01
project) and the UCM and the Direcci´on General de
Universidades e Investigaci´on of the CAM (CCG07-
UCM/TIC-2803).
</bodyText>
<sectionHeader confidence="0.999252" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999676153846154">
Brachman. Ronald J. and McGuiness, Deborah L. and
Patel-Schneider, Peter F. and Resnick, Lori A. 1991.
Living with CLASSIC: when and how to use a KL-
ONE-like language. Principles in Semantic Net-
works: Explorations in the Representation of Knowl-
edge, pages 401–456. Morgan Kaufmann, California.
Reiter, Ehud and Dale, Robert. 1992. A fast algorithm
for the generation of referring expressions. Proc. of
the 14th conference on Computational Linguistics, pp.
232-238. Association for Computational Linguistics.
Reiter, Ehud and Dale, Robert. 2000. Building Natural
Language Generation Systems. Cambridge University
Press.
</reference>
<page confidence="0.998513">
164
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.454431">
<title confidence="0.99866">Degree of Abstraction in Referring Expression Generation and its Relation with the Construction of the Contrast Set</title>
<author confidence="0.920344">Raquel</author>
<affiliation confidence="0.9046385">Facultad de Universidad Complutense de</affiliation>
<address confidence="0.815791">Madrid,</address>
<email confidence="0.969005">raquelhb@fdi.ucm.es</email>
<author confidence="0.95414">Pablo</author>
<affiliation confidence="0.95388">Facultad de Universidad Complutense de</affiliation>
<address confidence="0.817697">Madrid,</address>
<email confidence="0.993098">pgervas@sip.ucm.es</email>
<abstract confidence="0.99929505">Referring Expression Generation (REG) is the task that deals with references to entities appearing in a spoken or written discourse. If these referents are organized in terms of a taxonomy, there are two problems when establishing a reference that would distinguish an intended referent from its possible distractors. The first one is the choice of the set ofpossible or set the given situation. The second is to identify at what level of the taxonomy to phrase the reference so that it unambiguously picks out only the intended referent, leaving all possible distractors in different branches of the taxonomy. We discuss the use of ontologies to deal with the REG task, paying special attention to the choice of the the contrast set and to the use of the information of the ontology to select the most appropriate type to be used for the referent.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>J Ronald</author>
<author>Deborah L McGuiness</author>
<author>Peter F Patel-Schneider</author>
<author>Lori A Resnick</author>
</authors>
<title>Living with CLASSIC: when and how to use a KLONE-like language. Principles</title>
<date>1991</date>
<booktitle>in Semantic Networks: Explorations in the Representation of Knowledge,</booktitle>
<pages>401--456</pages>
<publisher>Morgan Kaufmann,</publisher>
<location>California.</location>
<marker>Ronald, McGuiness, Patel-Schneider, Resnick, 1991</marker>
<rawString>Brachman. Ronald J. and McGuiness, Deborah L. and Patel-Schneider, Peter F. and Resnick, Lori A. 1991. Living with CLASSIC: when and how to use a KLONE-like language. Principles in Semantic Networks: Explorations in the Representation of Knowledge, pages 401–456. Morgan Kaufmann, California.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ehud Reiter</author>
<author>Robert Dale</author>
</authors>
<title>A fast algorithm for the generation of referring expressions.</title>
<date>1992</date>
<booktitle>Proc. of the 14th conference on Computational Linguistics,</booktitle>
<pages>232--238</pages>
<institution>Association for Computational Linguistics.</institution>
<contexts>
<context position="3701" citStr="Reiter and Dale (1992)" startWordPosition="603" endWordPosition="606">e other elements in focus. We are also supposing that the situations in which the reference is produced are static, that is, the addressee’s perception of the world does not change during the process of reference generation. 2 Related Work The appropriate use of referring expressions to compete with human-generated texts involves a certain difficulty. According to Reiter and Dale (2000), a referring expression must communicate enough infor161 mation to identify univocally the intended referent within the context of the current discourse, but always avoiding unnecessary or redundant modifiers. Reiter and Dale (1992) describe a fast algorithm for generating referring expressions in the context of a natural language generation system. Their algorithm relies on the following set of assumptions about the underlying knowledge base that must be used: (1) every entity is characterized in terms of a collection of attributes and their values, (2) every entity has as one of its attributes a type, and (3) the knowledge base may organize some attribute values as a subsumption hierarchy. Additionally, each object represented in the system should have an associated basic level value, which corresponds to the concept w</context>
</contexts>
<marker>Reiter, Dale, 1992</marker>
<rawString>Reiter, Ehud and Dale, Robert. 1992. A fast algorithm for the generation of referring expressions. Proc. of the 14th conference on Computational Linguistics, pp. 232-238. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ehud Reiter</author>
<author>Robert Dale</author>
</authors>
<title>Building Natural Language Generation Systems.</title>
<date>2000</date>
<publisher>Cambridge University Press.</publisher>
<contexts>
<context position="3468" citStr="Reiter and Dale (2000)" startWordPosition="568" endWordPosition="571">tion to select the most appropriate type to be used for the referent. This work has been centered in the generation of definite noun phrases where the type of an element and a set of its properties are given to distinguish it from the other elements in focus. We are also supposing that the situations in which the reference is produced are static, that is, the addressee’s perception of the world does not change during the process of reference generation. 2 Related Work The appropriate use of referring expressions to compete with human-generated texts involves a certain difficulty. According to Reiter and Dale (2000), a referring expression must communicate enough infor161 mation to identify univocally the intended referent within the context of the current discourse, but always avoiding unnecessary or redundant modifiers. Reiter and Dale (1992) describe a fast algorithm for generating referring expressions in the context of a natural language generation system. Their algorithm relies on the following set of assumptions about the underlying knowledge base that must be used: (1) every entity is characterized in terms of a collection of attributes and their values, (2) every entity has as one of its attribu</context>
</contexts>
<marker>Reiter, Dale, 2000</marker>
<rawString>Reiter, Ehud and Dale, Robert. 2000. Building Natural Language Generation Systems. Cambridge University Press.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>