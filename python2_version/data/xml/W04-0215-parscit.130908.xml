<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.009643">
<title confidence="0.93832">
LiveTree: An Integrated Workbench for Discourse Processing
</title>
<author confidence="0.937588">
Gian Lorenzo Thione, Martin van den Berg, Chris Culy, Livia Polanyi
</author>
<affiliation confidence="0.7155755">
FX Palo Alto Laboratory
3400 Hillview Ave, Bldg. 4
</affiliation>
<address confidence="0.915097">
Palo Alto, CA 94304
</address>
<email confidence="0.987124">
{thione|vdberg|culy|polanyi}@fxpal.com
</email>
<sectionHeader confidence="0.992123" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999713166666667">
In this paper, we introduce LiveTree,
a core component of LIDAS, the Lin-
guistic Discourse Analysis System for
automatic discourse parsing with the
Unified Linguistic Discourse Model
(U-LDM) (X et al, 2004). LiveTree is
an integrated workbench for super-
vised and unsupervised creation, stor-
age and manipulation of the discourse
structure of text documents under the
U-LDM. The LiveTree environment
provides tools for manual and auto-
matic U-LDM segmentation and dis-
course parsing. Document manage-
ment, grammar testing, manipulation
of discourse structures and creation
and editing of discourse relations are
also supported.
</bodyText>
<sectionHeader confidence="0.998694" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999954111111111">
In this paper, we introduce LiveTree, a
core component of LIDAS (the Linguistic
Discourse Analysis System) for automatic
discourse parsing with the Unified Lin-
guistic Discourse Model (U-LDM) (Po-
lanyi et al, 2004). The U-LDM is a theory
of discourse structure and semantics that
has as its goal assigning the correct inter-
pretation to natural language utterances.
</bodyText>
<subsectionHeader confidence="0.999263">
1.1 Overview of LiveTree
</subsectionHeader>
<bodyText confidence="0.999957121212121">
LiveTree is an integrated workbench for
supervised and unsupervised creation,
storage and manipulation of the discourse
structure of text documents under the U-
LDM. LiveTree does not support speech,
dialog or interaction annotation (Bernsen
et al. 2002, 2003 and over view of systems
in Bernsen et al. 2002). The LiveTree en-
vironment provides tools for manual and
automatic U-LDM segmentation and dis-
course parsing. Like RSTTool, LiveTree
provides support for segmentation, mark-
ing structural relations among segments,
and creating and editing discourse rela-
tions (O’Donnell 2003). Similar to the D-
LTAG system described in Forbes et al
(2003) LiveTree is an experimental dis-
course parser implementing a theory of
sentential and discourse relations. How-
ever, LiveTree is also a complete docu-
ment handling and manual and automatic
discourse parsing system. Various applica-
tions are supported as web services. Ac-
cordingly, LiveTree serves as both the user
interface and theory development envi-
ronment for PALSUMM, a text summari-
zation system built on top of LIDAS (See
Section 5 below) In this paper, we de-
scribe the resources LiveTree workbench
provides for discourse level theoretical
development as well as document han-
dling, manual and automatic text annota-
tion and parsing.
</bodyText>
<subsectionHeader confidence="0.974867">
1.2 LiveTree Functionalities
</subsectionHeader>
<bodyText confidence="0.999839636363636">
LiveTree’s Java architecture shown in
Figures 1 is modular and highly extensi-
ble. LiveTree is made up by: (1) a Model
Manager which provides interfaces for
manipulation, storage and retrieval of ac-
tual documents and discourse representa-
tions; (2) a Module Manager, which han-
dles and provides access to the main GUI
and to all installed modules; and (3) a Ser-
vice Manager providing a polling interface
for all active LiveTree Services. Manager
components rely on stubs which can be
implemented and extended from outside
the framework’s core.
The LiveTree Module Manager and all
installed LiveTree Modules lie on top of a
general GUI Layer handling the main Li-
veTree window, which includes a menu
bar, a tool bar, a status bar and four doc-
king areas. The status bar is used for mes-
sages to the user and notification of status
for asynchronous services. The menu bar
</bodyText>
<table confidence="0.9995054375">
- Framework/Architectural
o Module Manager Architecture with
independent dockable floating win-
dows for each independent module
o Service Manager with multi-threaded
support for asynchronous services, no-
tification management and SOAP/web-
service support
o Generalized Model Manager for sup-
port of multiple discourse theo-
ries/models
o Scripting Engine for automatic batch
execution of actions and commands
Module Manager Model Manager Service Manager
GUI Interface Layer Model Stub Service Synchronization Layer
Document Discourse
Stub Theory
Stub
Module Stub Service Stub
Parsing Parsing
Segmentation Ontology
Document HTML U-LDM PALSUMM LDM Parser
Module Tree Module
Context BDU-Tree Xle2Xml OntoPAL
Module Module
D-Grammar RST
Module
- Default Modules - Default Services
o Document Module; BDU-Tree Module; DPT Module; o Discourse Parsing Service; U-LDM
Search Module; Content Module; Grammar Module; Model Persistence Service; Xle2Xml
Segments Module. Syntax Parsing Service; Discourse
Segmentation Service; OntoPAL
</table>
<figureCaption confidence="0.998585">
Figure 1: LiveTree Architecture.
</figureCaption>
<bodyText confidence="0.982811285714286">
Core system and several implemented modules and services
and the toolbar allow rapid access to gene-
ral functions and to module-specific ac-
tions, including hiding and showing modu-
le windows. Every module is assigned a
window which can be resized, docked or
hidden/shown.
When multiple modules are docked in
the same docking area they are arranged in
a tabbed interface which allows easy ac-
cess and maximizes display real-estate.
Finally, the GUI Layer administers con-
textual pop-up menus in a general, mod-
ule-independent fashion: any module can
register a number of actions bound to a
specific context (e.g. a sentence, a node, a
sub-tree, etc.) and at the user&apos;s request, the
GUI Layer polls the Module Manager for
appropriate actions from every installed
module. LiveTree’s clean and intuitive
interface is independent of the specific
modules installed and allows for seamless
integration of custom modules not part of
the current implementation.
Table 1 gives a comprehensive over-
view of LiveTree features as well as iden-
tifying the modules or services that pro-
vide them.
</bodyText>
<sectionHeader confidence="0.962427" genericHeader="introduction">
2 Document Handling
</sectionHeader>
<bodyText confidence="0.999775411764706">
The Model Manager (MM) is the main
access point to models, defined as the syn-
chronized unions of a document and its
(annotated) discourse structure. The MM
requires that appropriate LiveTree Ser-
vices provide functionalities needed for
persistent storage and retrieval of anno-
tated documents. As long as documents
are not modified externally, their discourse
representations can also be retrieved from
a persistent XML format encoding U-
LDM tree structure, visualization parame-
ters, surface and deep node content along
with other user-defined annotations.
The Document Module (DM) enables
full document creation, modification and
annotation at the document, re-
gion/selection, and sentence level. The
DM provides the visual representation of
an HTML document1 and preserves the
text organization, formatting, and non-
textual information (figures, tables, etc.) of
HTML source documents. The DM also
provides visual feedback capabilities in-
cluding highlighting and hiding/showing
sections of documents. The Document
Stub Interface provides the mapping be-
tween a document’s content and notions of
paragraphs, sentences, units and spans. In
the current implementation, a document is
divided in paragraphs according to stan-
dard notions; paragraphs are then token-
ized in sentences using simple heuristics
and sentences are segmented into Basic
</bodyText>
<footnote confidence="0.9904045">
1 Currently, only HTML document formats
are supported. Other data formats can also be
supported by implementing the Document Stub
Interface (DSI) appropriately,
</footnote>
<table confidence="0.999895852941176">
Feature Description Modules &amp; Services
Document Handling Support for HTML Documents (Import, Export, Document Module
Create, Edit, Print, Tokenize in sentences)
Discourse Support for LDM Discourse Segments (Automatic BDU-Tree Module,
Segmentation Sentence Segmentation; Manual Editing of Segments; Content Module,
(Automatic &amp; Manual) Manual Sentence Segmentation; Inspect Segments’ Xle2Xml Syntax parsing Ser-
Syntax Content) vice,
Discourse Segmenter
Discourse Structure Support for LDM DPT and BDU Trees (Automatic BDU-Tree Module,
Creation Discourse Parsing; Sub-tree Attachment via Drag ‘n DPT Module,
Document and Drop; Editing including Node Type Editing and Con- Content Module,
Sentence Level tent Editing; Node/Sub-tree Removal; Node-Specific Notes Module,
(Automatic &amp; Manual) Notes Editing; Expand/Collapse Sub-Trees; Export to Discourse Parsing Service
JPG; Printing; Extensible Semantic Composition)
Semantic Content Support for Feature Structure-like Semantic Con- BDU-Tree Module,
Inspection tent of LDM Nodes (Node Specific via mouse selec- DPT Module,
tion; F-Structure graphical view; In Place Editing; Content Module
Grammar Condition Querying)
Search Full Text and RE search on: Document content, Search Module,
Node Surface Content, Nodes Semantic Content, Document Module,
Node-Specific Notes ; Online retrieval of matching DPT Module
sources
U-LDM Rule Editing Grammar Editor: reusable conditions; easy-to-use Grammar Module
GUI
Discourse Grammar Support for Manual Grammar Testing (Check for Grammar Module,
Testing rule enablement between attachment point and M- DPT Module,
(Manual &amp; Scripted) BDU selected from actual subtrees; Support Scripted Discourse Parsing Service
Testing with XML Based Language)
Persistence Support Implements and supports serialization and deseri- LDM Persistence Service
alization in LiveTree XML format of LDM Annota-
tion for documents.
Other Functionalities Tree Structure Zooming and Panning, Print Pre- Tree Module,
view Functionalities, Copy/Cut/Paste for text and Document Module,
trees) BDU-Tree Module
</table>
<tableCaption confidence="0.999864">
Table 1: Overview of LiveTree features and the modules or services that provide them.
</tableCaption>
<bodyText confidence="0.988449">
Discourse Units following the U-LDM
discourse segmentation conventions dis-
cussed below.
</bodyText>
<sectionHeader confidence="0.9894515" genericHeader="method">
3 LiveTree Support for Discourse
Annotation
</sectionHeader>
<bodyText confidence="0.999522727272727">
The LiveTree Workbench supports manual
and automatic, supervised and unsuper-
vised annotation practices for each step in
the analysis process. In addition, our de-
fault implementation includes a com-
pletely integrated interface for writing,
testing and debugging U-LDM Discourse
grammar rules which are used for auto-
matically constructing the discourse repre-
sentation for individual sentences and en-
tire texts.
</bodyText>
<subsectionHeader confidence="0.995872">
3.1 U-LDM Parsing Steps
</subsectionHeader>
<bodyText confidence="0.9997395">
The U-LDM specifies rules both for seg-
menting sentences into Basic Discourse
Units (BDUs) and then for combining the
BDUs into an Open-Right Discourse Parse
Tree (DPT) that captures structural rela-
tions among constituent structures. The U-
LDM discourse parsing process can be
summarized as follows:
</bodyText>
<listItem confidence="0.9879148125">
• Identify potential Basic Discourse
Units (BDUs) within sentence from
output of analysis of sentence docu-
ments from the Xerox Linguistic Envi-
ronment (XLE) Lexical Functional
Grammar (LFG) parser using sen-
tence-segmentation rules.
• Construct a set of Open-Right BDU-
trees representations which map onto
top-level coordinated structures within
the sentence, using syntactic informa-
tion from the XLE parse and sentential
discourse rules to identify the relation-
ships among BDUs.
• Attach the BDU-trees, each one as a
single unit, to the DPT by computing
</listItem>
<bodyText confidence="0.585995785714286">
the relationship between the node cor-
responding to the root of a BDU-Tree
to accessible DCUs aligned along the
right edge of the DPT using rules of
discourse relations. There are 3 possi-
ble macro-types of relation:
Coordination: new unit continues de-
velopment of previous unit
Subordination: new unit provides
additional information about previ-
ous unit
N-ary: new unit bears a special logi-
cal, rhetorical or genre based rela-
tionship to previous unit
</bodyText>
<listItem confidence="0.951914">
• Once a BDU-tree is attached, its
leaves become terminal nodes of the
DPT and nodes on its right edge be-
come therefore accessible for attach-
ment in the next iteration of the proc-
ess.
</listItem>
<subsectionHeader confidence="0.951007">
3.2 Live Tree Modules for U-LDM
discourse annotation
</subsectionHeader>
<bodyText confidence="0.999638818181818">
Live Tree Modules (LTM) provide exten-
sive manual and automatic capabilities for
annotating documents with U-LDM dis-
course tags. They are local to the frame-
work and provide user-directed functional-
ities, relying on mutual interaction through
the LiveTree GUI. Two modules in Li-
veTree’s current implementation contrib-
ute primarily to discourse annotation (be-
sides the DM): the BDU-Tree Module and
the DPT Module.
</bodyText>
<subsectionHeader confidence="0.686113">
3.2.1 Discourse Segmentation
</subsectionHeader>
<bodyText confidence="0.999906243243243">
A critical task for U-LDM analysis is to
account for the availability for update of
appropriate discourse contexts or sub-
contexts introduced in earlier text. Thus,
discourse segmentation under the U-LDM
requires the identification of discourse
units within the sentence that can function
as possible attachment points as well as
segmenting sentential units and non-
sentential structures such as titles from
other units. The U-LDM may match in-
coming discourse utterances with target
contexts which are in syntactically subor-
dinated positions within a previous sen-
tence. In order to construct the appropriate
representation of the rhetorical or semantic
structure of discourse we must therefore
keep sub-sentential units available for at-
tachment at independent nodes along the
right edge of the DPT.
For discourse segmentation, the U-LDM
depends on the syntactic analysis of con-
stituent sentences. Initially, sentences are
divided up into discourse segments reflect-
ing syntactic encodings of minimal units
of meaning or function. Subsequently,
some segments are identified as Basic
Discourse Units (BDUs). Only those dis-
course segments that are of a type that can
be independently continued are BDUs.
Operator segments are one example of
non-BDU segments. Gerunds, nominaliza-
tions, auxiliary and modal verbs or clefts
are verb based constituents but not seg-
ments because they do not independently
establish an interpretation context for up-
date by subsequent units (Polanyi, 2004).
</bodyText>
<figureCaption confidence="0.934588333333333">
Figure 2: A segmented sentence and
the BDU-Trees corresponding to its two
coordination-chunks.
</figureCaption>
<bodyText confidence="0.999965454545455">
In LiveTree, the BDU-Tree Module
shown in Figure 2 provides the visual in-
terface and annotation tools for sentence
segmentation. The top section of the
BDU-Tree window is composed of two
areas: a small toolbar, and the sen-
tence/segment viewer. A simple toggle-
button interface allows the user to select
between automatic or manual segmenta-
tion. In automatic mode, an external Seg-
mentation Service (part of LIDAS) is
polled and a set of segments retrieved.
Segments are automatically colored, and
segments embedding other segments are
represented by non-contiguous spans of
text associated by the same highlighting
color. In manual mode segmentation is
performed by dragging the divider (the
rightmost button in the toolbar) to the de-
sired span boundaries and, if necessary,
assigning non-contiguous spans to the
same segment using drag-n-drop.
</bodyText>
<subsectionHeader confidence="0.802847">
3.2.2 BDU Tree Construction
</subsectionHeader>
<bodyText confidence="0.999954487804878">
In LIDAS operating in automatic mode,
BDU-Trees are constructed from seg-
mented sentences by mapping the LFG f-
structure representations of sentential syn-
tax produced by the XLE onto appropri-
ated sentence-level discourse attachments.
The resulting structure is a BDU-Tree, a
DPT of an individual sentence. Although
automatic BDU-Tree parsing can only be
performed on automatically generated seg-
ments, LiveTree supports manual con-
struction of BDU-Trees regardless of how
segmentation occurred.
In manual mode, segments can be
dragged from the Sentence Viewer area to
the bottom section of the window. When
dropped, these become BDU nodes and
the content of the node can be manually
annotated. To create the relationship be-
tween two nodes the user drags one node
over the other as attachment point and se-
lects a preferred relation from a pop-up
menu. If syntactic/semantic annotations
are present they are correctly percolated
and composed throughout the BDU-Tree.
BDU Trees can be easily edited and
manipulated for correcting or changing
annotations, and for improving results
generated by automatic BDU-Tree pars-
ing. Nodes can be removed, their associ-
ated annotations inspected and modified,
and the type of relation node changed.
When the type of a relation node is
changed, the annotations of all nodes
dominating the changed relation are up-
dated and the correct syntactic/semantic
information percolated through the tree in
accord with the new relation type. Nodes
and whole sub-trees can be detached and
reattached at a different point using simple
mouse gestures.
</bodyText>
<sectionHeader confidence="0.854065" genericHeader="method">
3.2.3 Discourse Parse Tree Construc-
tion
</sectionHeader>
<bodyText confidence="0.999715727272727">
U-LDM discourse parsing is a three step
process: (1) segmentation, (2) BDU-Tree
Parsing, and (3) DPT parsing. LiveTree
supports automatic and manual modes at
all three stages enabling multiple annota-
tion scenarios.
For example, users can segment and an-
notate a document entirely by hand, or,
alternatively, rely on automatic segmenta-
tion and BDU-Tree parsing while manu-
ally completing the more error-prone stage
of DPT parsing. Another option is to boot-
strap the annotation at every stage using
LiveTree automatic resources and then
manually correct mistakes and undesired
choices (supervised mode). A Discourse
Segmentation Service and a Discourse
Parsing Service using two separate dis-
course grammars provide automation. The
user interfaces of the BDU-Tree Module
and of the DPT module allow for manual
and supervised annotation.
</bodyText>
<subsectionHeader confidence="0.917226">
3.3 Discourse Relations under the U-
LDM
</subsectionHeader>
<bodyText confidence="0.999963088235294">
Automatic DPT parsing is rule based.
Lexical information (synonym, antonym,
hypernym, discourse connectives), seman-
tics (involving genericity, modality, cardi-
nality, temporal interpretation etc.), and
syntactic information (including topicali-
zation, grammatical function promo-
tion/demotion, etc.) are used by weighted
ordered discourse grammar rules to deter-
mine both the site of attachment and the
relationship obtaining among the nodes.
Rules may combine different sources of
evidential information. LiveTree provides
a complete rule development and testing
environment used for both theoretical in-
vestigation and automatic parsing.
When a BDU-Tree is available for at-
tachment, linguistic information available
at DCUs along the right edge of the DPT
is compared with evidence retrieved from
the incoming BDU-Tree to identify se-
mantic information that acts as an “ana-
phoric anchor” for information in the in-
coming BDU-Tree by examining the
content of the root node (M-BDU). Each
attachment rule is checked against infor-
mation available at the M-BDU and at the
available DCUs and an ordered set of at-
tachment sites and associated relations, as
specified by the winning rules, is gener-
ated. Local semantic, lexical and syntactic
information is percolated up through the
tree according to the constraints of the dis-
course relations at each dominating node.
</bodyText>
<figureCaption confidence="0.980359">
Figure 3: Two views of a document’s discourse structure. Trees and subtrees can be modi-
</figureCaption>
<bodyText confidence="0.986195375">
fied, rearranged and moved through simple drag ‘n drop operations.
If multiple attachments are possible, am-
biguous parses ordered by likelihood are
generated. In LiveTree operating in auto-
matic mode, the system proposes a pre-
ferred structure. Dispreferred structures
can be obtained by operating in supervised
mode.
</bodyText>
<subsectionHeader confidence="0.955495">
3.4 The DPT Module
</subsectionHeader>
<bodyText confidence="0.9999524">
The DPT Module shown in Figure 3
provides the visual representation and ma-
nipulation interface for U-LDM Discourse
Trees. Advanced viewing capabilities help
the user analyze large complex discourse
structures: sub-trees can be collapsed and
expanded; zooming and panning capabili-
ties and fit-to-page printing are fully sup-
ported. Trees and sub-trees can be moved,
rearranged, and removed with the same
editing functions available as in the BDU-
Tree Module. In addition, automatic layout
capabilities enable even the most graphi-
cally complex discourse structures to be
displayed clearly.
</bodyText>
<sectionHeader confidence="0.944577" genericHeader="method">
4 Discourse parsing with LiveTree
</sectionHeader>
<bodyText confidence="0.999673816326531">
In order to create an DPT, a user can
work in different modes. In Fully Auto-
matic (Unsupervised) mode, the user sim-
ply selects a document for full processing.
The document is tokenized, each sentence
is automatically segmented, and passed to
the parser. The discourse parsing service
automatically creates BDU-Trees from
each sentence and as trees are created they
are attached to the emerging DPT. The
user can then revise the structure and make
changes2. In Incremental Automatic (Su-
pervised) mode, the user is prompted for
corrections at selected stages of the proc-
ess. For example, after a sentence is se-
lected by the system for processing, auto-
matically segmented 3 , and parsed into
BDU-Trees, the user can rearrange nodes,
change relationships between nodes, and if
necessary, even merge multiple BDU-
Trees into one. The BDU-Tree(s) might
then be automatically attached to the DPT
and the user prompted again to correct any
mistakes. When the parsing process is su-
pervised in this way, the number of overall
mistakes is often reduced because attach-
ments occur on incrementally checked
structures thus maintaining the correct
open right edge at all times.
Finally, in Manual DPT Parsing mode,
BDU-Trees can be dragged from the
BDU-Tree module to the DPT module and
manually attached to the DPT however the
BDU-Trees were computed. The decision
of how to combine manual and automatic
processing is made by the user.
2 For large documents problems often arise
as parsing mistakes build on themselves as the
right edge changes and large structures are
harder to examine and manipulate.
3 Optionally the user can correct any seg-
mentation mistake at this stage, though this
interrupts the automatic mode and the attach-
ment of the sentence must be completed ma-
nually, since the necessary syntactic informa-
tion is no longer attached to the segments. Of
course, this information which was likely to
have been incorrect anyway, thereby necessita-
ting correcting the segmentation.
</bodyText>
<subsectionHeader confidence="0.879704">
4.1 Discourse Grammar Writing and
Testing
</subsectionHeader>
<bodyText confidence="0.9999393">
LiveTree incorporates facilities for writ-
ing, accessing and testing discourse
grammars both at the sentence and at the
document level. Rules are edited via a dia-
log window which allows the user to cre-
ate new rules by reusing macros and con-
ditions previously used in other rules.
Access to all defined types of discourse
relations is permitted and it is easy to set
priorities and preempting relations among
existing rules.
Rules are tested in two ways. In scripted
mode, testcase files are written specifying
exemplary sentences and the discourse
rule(s) to be tested, along with the ex-
pected outcome. This way, several rules
and several testcases can be tested auto-
matically at once. A report is created at the
end of the process with information about
the outcome of the tests. In manual mode,
a rule can be selected for testing from the
Grammar Module and a node or subtree
from the DPT can be dragged on a candi-
date attachment site. The parser attempts
to make an attachment using the selected
rule and reports the result to the user. This
mechanism has proven very useful during
grammar creation providing important in-
formation to understand why expected
structures are not created by the parser.
</bodyText>
<sectionHeader confidence="0.994915" genericHeader="method">
5 The PALSUMM Text Summarizer
</sectionHeader>
<bodyText confidence="0.999978333333333">
The global discourse trees resulting
from U-LDM parsing in the LiveTree En-
vironment are used for text summarization
in the PALSUMM System. PALSUMM is
a hybrid sentence extraction system that
uses conventional statistical methods to
identify important information in a text
and then marks for extraction those dis-
course segments in the DPT that are nec-
essary in order to provide context for ref-
erence and proper resolution of anaphors.
The goal of PALSUMM Summarization is
to produce high quality readable summa-
ries. We have tested our summarization
methods using both manually annotated
and automatically created U-LDM struc-
tures of Technical Reports taken from the
FX Palo Alto archive of over 300 reports
in more than 10 domains of computer sci-
ence. These reports vary in size from a few
to thirty or more pages. All 300 reports
have been automatically summarized. Ini-
tial results, though hardly perfect, are en-
couraging.
</bodyText>
<sectionHeader confidence="0.998827" genericHeader="conclusions">
6 Conclusion
</sectionHeader>
<bodyText confidence="0.999992555555556">
LiveTree is a powerful and extremely
flexible workbench for discourse level
NLP annotation and parsing tasks.
Throughout the design and implementa-
tion of LiveTree, our goal has been to sup-
port a full range of work-practices and to
make sure that annotation steps were inte-
grated in an intuitive and seamless fash-
ion. Services and modules make use of
available resources efficiently and interop-
erate unobtrusively. New functionalities
can be easily added on top of existing ones
and the service-oriented LiveTree archi-
tecture enables concurrent and asynchro-
nous services to be executed locally or
remotely as automatically generated web
services. Working in LiveTree has proven
very efficient without waste of user’s time.
For example, a document can be parsed
automatically in the background while
other tasks such as manual annotation,
grammar writing or testing are performed.
While LiveTree has been designed an im-
plemented as a workbench for U-LDM
analysis, many of the features and aspects
of the architecture could be adopted for
use with other analytic frameworks.
</bodyText>
<sectionHeader confidence="0.999307" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999856956521739">
Bernsen, N. O., Dybkjær, L., and Kolodnytsky,
M.: An Interface for Annotating Natural In-
teractivity. In J. v. Kuppevelt and R. W.
Smith (Eds.): Current and New Directions
in Discourse and Dialogue, Dordrecht:
Kluwer 2003. Ch. 3. pp. 35–62.
Bernsen, N. O., Dybkjær, L. and Kolodnytsky,
M.: The NITE Workbench - A Tool for An-
notation of Natural Interactivity and Multi-
modal Data. Proceedings of the Third Inter-
national Conference on Language
Resources and Evaluation (LREC-2002),
Las Palmas, 2002, 43-49.
Katherine Forbes, Eleni Miltsakaki, Rashmi
Prasad, Anoop Sarkar, Aravind Joshi and
Bonnie Webber. 2003. D-LTAG System -
Discourse Parsing with a Lexicalized Tree-
Adjoining Grammar , Journal of Language,
Logic and Information, 12(3).
Barbara Grosz and Candace Sidner. 1986. At-
tention, Intention and the Structure of Dis-
course. Computational Linguistics 12:175-
204.
Bonnie Webber and Aravind Joshi. 1998. An-
choring a Lexicalized Tree-Adjoining
Grammar for Discourse. ACL/COLING
Workshop on Discourse Relations and Dis-
course Markers, Montreal, Canada.
William C. Mann and Sandra A. Thompson.
1988. Rhetorical Structure Theory: Towards
a Functional Theory of Text Organization.
Text 8(3)243-281.
Marcu, Daniel. 2000. The Theory and Practice
of Discourse Parsing and Summarization.
The MIT Press. Cambridge, MA.
O’Donnell, Michael. 2003. RSTTool.
(http:www.waysoft.com/RSTTool.)
Livia Polanyi and Remko Scha. 1984. A syn-
tactic approach to discourse semantics. In
Proceedings of COLING 6. Stanford, CA.
413-419.
Livia Polanyi, Martin van den Berg, Chris
Culy, Gian Lorenzo Thione, David Ahn.
2004. A Rule Based Approach to Discourse
Parsing. Proceedings of SIGDIAL ’04. Bos-
ton MA.
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.433048">
<title confidence="0.999928">LiveTree: An Integrated Workbench for Discourse Processing</title>
<author confidence="0.979352">Gian Lorenzo Thione</author>
<author confidence="0.979352">Martin van_den_Berg</author>
<author confidence="0.979352">Chris Culy</author>
<author confidence="0.979352">Livia</author>
<affiliation confidence="0.461542">FX Palo Alto</affiliation>
<address confidence="0.9791385">3400 Hillview Ave, Bldg. Palo Alto, CA</address>
<email confidence="0.999422">{thione|vdberg|culy|polanyi}@fxpal.com</email>
<abstract confidence="0.998892578947368">In this paper, we introduce LiveTree, a core component of LIDAS, the Linguistic Discourse Analysis System for automatic discourse parsing with the Unified Linguistic Discourse Model (U-LDM) (X et al, 2004). LiveTree is an integrated workbench for supervised and unsupervised creation, storage and manipulation of the discourse structure of text documents under the U-LDM. The LiveTree environment provides tools for manual and automatic U-LDM segmentation and discourse parsing. Document management, grammar testing, manipulation of discourse structures and creation and editing of discourse relations are also supported.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>N O Bernsen</author>
<author>L Dybkjær</author>
<author>M Kolodnytsky</author>
</authors>
<title>An Interface for Annotating Natural Interactivity. In</title>
<date>2003</date>
<journal>Ch.</journal>
<booktitle>Directions in Discourse and Dialogue,</booktitle>
<volume>3</volume>
<pages>35--62</pages>
<location>Dordrecht: Kluwer</location>
<marker>Bernsen, Dybkjær, Kolodnytsky, 2003</marker>
<rawString>Bernsen, N. O., Dybkjær, L., and Kolodnytsky, M.: An Interface for Annotating Natural Interactivity. In J. v. Kuppevelt and R. W. Smith (Eds.): Current and New Directions in Discourse and Dialogue, Dordrecht: Kluwer 2003. Ch. 3. pp. 35–62.</rawString>
</citation>
<citation valid="true">
<authors>
<author>N O Bernsen</author>
<author>L Dybkjær</author>
<author>M Kolodnytsky</author>
</authors>
<title>The NITE Workbench - A Tool for Annotation of Natural Interactivity and Multimodal Data.</title>
<date>2002</date>
<booktitle>Proceedings of the Third International Conference on Language Resources and Evaluation (LREC-2002),</booktitle>
<pages>43--49</pages>
<location>Las Palmas,</location>
<contexts>
<context position="1522" citStr="Bernsen et al. 2002" startWordPosition="221" endWordPosition="224">troduce LiveTree, a core component of LIDAS (the Linguistic Discourse Analysis System) for automatic discourse parsing with the Unified Linguistic Discourse Model (U-LDM) (Polanyi et al, 2004). The U-LDM is a theory of discourse structure and semantics that has as its goal assigning the correct interpretation to natural language utterances. 1.1 Overview of LiveTree LiveTree is an integrated workbench for supervised and unsupervised creation, storage and manipulation of the discourse structure of text documents under the ULDM. LiveTree does not support speech, dialog or interaction annotation (Bernsen et al. 2002, 2003 and over view of systems in Bernsen et al. 2002). The LiveTree environment provides tools for manual and automatic U-LDM segmentation and discourse parsing. Like RSTTool, LiveTree provides support for segmentation, marking structural relations among segments, and creating and editing discourse relations (O’Donnell 2003). Similar to the DLTAG system described in Forbes et al (2003) LiveTree is an experimental discourse parser implementing a theory of sentential and discourse relations. However, LiveTree is also a complete document handling and manual and automatic discourse parsing syste</context>
</contexts>
<marker>Bernsen, Dybkjær, Kolodnytsky, 2002</marker>
<rawString>Bernsen, N. O., Dybkjær, L. and Kolodnytsky, M.: The NITE Workbench - A Tool for Annotation of Natural Interactivity and Multimodal Data. Proceedings of the Third International Conference on Language Resources and Evaluation (LREC-2002), Las Palmas, 2002, 43-49.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Katherine Forbes</author>
<author>Eleni Miltsakaki</author>
<author>Rashmi Prasad</author>
<author>Anoop Sarkar</author>
<author>Aravind Joshi</author>
<author>Bonnie Webber</author>
</authors>
<title>D-LTAG System -Discourse Parsing with a Lexicalized TreeAdjoining Grammar ,</title>
<date>2003</date>
<journal>Journal of Language, Logic and Information,</journal>
<volume>12</volume>
<issue>3</issue>
<contexts>
<context position="1912" citStr="Forbes et al (2003)" startWordPosition="282" endWordPosition="285">ted workbench for supervised and unsupervised creation, storage and manipulation of the discourse structure of text documents under the ULDM. LiveTree does not support speech, dialog or interaction annotation (Bernsen et al. 2002, 2003 and over view of systems in Bernsen et al. 2002). The LiveTree environment provides tools for manual and automatic U-LDM segmentation and discourse parsing. Like RSTTool, LiveTree provides support for segmentation, marking structural relations among segments, and creating and editing discourse relations (O’Donnell 2003). Similar to the DLTAG system described in Forbes et al (2003) LiveTree is an experimental discourse parser implementing a theory of sentential and discourse relations. However, LiveTree is also a complete document handling and manual and automatic discourse parsing system. Various applications are supported as web services. Accordingly, LiveTree serves as both the user interface and theory development environment for PALSUMM, a text summarization system built on top of LIDAS (See Section 5 below) In this paper, we describe the resources LiveTree workbench provides for discourse level theoretical development as well as document handling, manual and autom</context>
</contexts>
<marker>Forbes, Miltsakaki, Prasad, Sarkar, Joshi, Webber, 2003</marker>
<rawString>Katherine Forbes, Eleni Miltsakaki, Rashmi Prasad, Anoop Sarkar, Aravind Joshi and Bonnie Webber. 2003. D-LTAG System -Discourse Parsing with a Lexicalized TreeAdjoining Grammar , Journal of Language, Logic and Information, 12(3).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Barbara Grosz</author>
<author>Candace Sidner</author>
</authors>
<date>1986</date>
<booktitle>Attention, Intention and the Structure of Discourse. Computational Linguistics</booktitle>
<pages>12--175</pages>
<marker>Grosz, Sidner, 1986</marker>
<rawString>Barbara Grosz and Candace Sidner. 1986. Attention, Intention and the Structure of Discourse. Computational Linguistics 12:175-204.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Bonnie Webber</author>
<author>Aravind Joshi</author>
</authors>
<title>Anchoring a Lexicalized Tree-Adjoining Grammar for Discourse.</title>
<date>1998</date>
<booktitle>ACL/COLING Workshop on Discourse Relations and Discourse Markers,</booktitle>
<location>Montreal, Canada.</location>
<marker>Webber, Joshi, 1998</marker>
<rawString>Bonnie Webber and Aravind Joshi. 1998. Anchoring a Lexicalized Tree-Adjoining Grammar for Discourse. ACL/COLING Workshop on Discourse Relations and Discourse Markers, Montreal, Canada.</rawString>
</citation>
<citation valid="true">
<authors>
<author>William C Mann</author>
<author>Sandra A Thompson</author>
</authors>
<title>Rhetorical Structure Theory: Towards a Functional Theory of Text Organization.</title>
<date>1988</date>
<tech>Text 8(3)243-281.</tech>
<marker>Mann, Thompson, 1988</marker>
<rawString>William C. Mann and Sandra A. Thompson. 1988. Rhetorical Structure Theory: Towards a Functional Theory of Text Organization. Text 8(3)243-281.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Daniel Marcu</author>
</authors>
<title>The Theory and Practice of Discourse Parsing and Summarization.</title>
<date>2000</date>
<publisher>The MIT Press.</publisher>
<location>Cambridge, MA.</location>
<marker>Marcu, 2000</marker>
<rawString>Marcu, Daniel. 2000. The Theory and Practice of Discourse Parsing and Summarization. The MIT Press. Cambridge, MA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael O’Donnell</author>
</authors>
<date>2003</date>
<note>RSTTool. (http:www.waysoft.com/RSTTool.)</note>
<marker>O’Donnell, 2003</marker>
<rawString>O’Donnell, Michael. 2003. RSTTool. (http:www.waysoft.com/RSTTool.)</rawString>
</citation>
<citation valid="true">
<authors>
<author>Livia Polanyi</author>
<author>Remko Scha</author>
</authors>
<title>A syntactic approach to discourse semantics.</title>
<date>1984</date>
<booktitle>In Proceedings of COLING 6.</booktitle>
<pages>413--419</pages>
<location>Stanford, CA.</location>
<marker>Polanyi, Scha, 1984</marker>
<rawString>Livia Polanyi and Remko Scha. 1984. A syntactic approach to discourse semantics. In Proceedings of COLING 6. Stanford, CA. 413-419.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Livia Polanyi</author>
<author>Martin van den Berg</author>
<author>Chris Culy</author>
<author>Gian Lorenzo Thione</author>
<author>David Ahn</author>
</authors>
<title>A Rule Based Approach to Discourse Parsing.</title>
<date>2004</date>
<booktitle>Proceedings of SIGDIAL ’04.</booktitle>
<location>Boston MA.</location>
<marker>Polanyi, van den Berg, Culy, Thione, Ahn, 2004</marker>
<rawString>Livia Polanyi, Martin van den Berg, Chris Culy, Gian Lorenzo Thione, David Ahn. 2004. A Rule Based Approach to Discourse Parsing. Proceedings of SIGDIAL ’04. Boston MA.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>