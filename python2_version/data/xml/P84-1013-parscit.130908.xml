<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000014">
<note confidence="0.6046965">
THE SYNTAX AND SEMANTICS OF USER-DEFINED MODIFIERS
IN A
TRANSPORTABLE NATURAL LANGUAGE PROCESSOR
Bruce W. Ballard
</note>
<affiliation confidence="0.9871475">
Dept. of Computer Science
Duke University
</affiliation>
<address confidence="0.464492">
Durham, N.C. 27706
</address>
<email confidence="0.355473">
ABSTRACT
</email>
<bodyText confidence="0.998076285714286">
The Layered Domain Class system (LDC) is an
experimental natural language processor being
developed at Duke University which reached the
prototype stage in May of 1983. Its primary goals are
(1) to provide English-language retrieval capabilities
for structured but unnormalized data files created by
the user; (2) to allow very complex semantics, in terms
of the information directly available from the physical
data file; and (3) to enable users to customize the
system to operate with new types of data. In this paper
we shall discuss (a) the types of modifiers LDC provides
for; (b) how information about the syntax and
semantics of modifiers is obtained from users; and (c)
how this information is used to process English inputs.
</bodyText>
<sectionHeader confidence="0.929629" genericHeader="method">
I INTRODUCTION
</sectionHeader>
<bodyText confidence="0.99986197826087">
The Layered Domain Class system (LDC) is an
experimental natural language processor being
developed at Duke University. In this paper we
concentrate on the typ 3S of modifiers provided by LDC
and the methods by which the system acquires
information about the syntax and semantics of user-
defined modifiers. A more complete description is
available in [4,5], and further details on matters not
discussed in this paper can be found in [1,2,8,8,9].
The LDC system is made up of two primary
components. First, the knowledge acquisition
component, whose job is to find out about the
vocabulary and semantics of the language to be used
for a new domain, then inquire about the composition
of the underlying input file. Second, the User-Phase
Processor, which enables a user to obtain statistical
reductions on his or her data by typed English inputs.
The top-level design of the User-Phase processor
involves a linear sequence of modules for scanning the
input and looking up each token in the dictionary;
parsing the scanned input to determine its syntactic
structure; translation of the parsed input into an
appropriate formal query; and finally query processing.
This research has been supported in part by the
National Science Foundation, Grants MCS-81-16607 and
IST-83-01994; in part by the National Library of
Medicine, Grant LM-07003; and in part by the Air Force
Office of Scientific Research, Grant 81-0221.
The User-Phrase portion of LDC resembles familiar
natural language database query systems such as
INTELLECT, JETS, LADDER, LUNAR, PHLIQA, PLANES, REL,
RENDEZVOUS, TQA, and USL (see [10-231) while the
overall LDC system is similar in its objectives to more
recent systems such as ASK, CONSUL, IRUS, and TEAM
(see [24-31]).
At the time of this writing, LDC has been
completely customized for two fairly complex domains,
from which examples are drawn in the remainder of the
paper, and several simpler ones. The complex domains
are a final grades domain, giving course grades for
students in an academic department, and a building
organization domain, containing information on the
floors, wings, corridors, occupants, and so forth for one
or more buildings. Among the simpler domains LDC has
been customized for are files giving employee
information and stock market quotations.
</bodyText>
<sectionHeader confidence="0.698533" genericHeader="method">
II MODIFIER TYPES PROVIDED FOR
</sectionHeader>
<bodyText confidence="0.999558217391304">
As shown in [4], LDC handles inputs about as
complicated as
students who were given a passing grade by an
instructor Jim took a graduate course from
As suggested here, most of the syntactic and semantic
sophistication of inputs to LDC are due to noun phrase
modifiers, including a fairly broad coverage of relative
clauses. For example, if LDC is told that &amp;quot;students take
courses from instructors&amp;quot;, it will accept auch relative
clause forms as
students who took a graduate course from Trivedi
courses Sarah took from Rogers
instructors Jim took a graduate course from
courses that were taken by Jim
students who did not take a course from Rosenberg
We summarize the modifier types distinguished by LDC
in Table 1. which is divided into four parts roughly
corresponding to pre-nominal, nominal, post-nominal,
and negating modifiers. We have included several
modifier types, most of them anaphoric, which are
processed syntactically, and methods for whose
semantic processing are being implemented along the
lines suggested in [7].
</bodyText>
<page confidence="0.997102">
52
</page>
<bodyText confidence="0.99971104">
Most of the names we give to modifier types are self-
explanatory, but the reader will notice that we have
chosen to categorize verbs, based upon their
semantics, as trivial verbs, implied parameter verbs:
and operational verbs. &amp;quot;Trivial&amp;quot; verbs, which involve no
semantics to speak of, can be roughly paraphrased as
&amp;quot;be associated with&amp;quot;. For example, students who take a
certain course are precisely those students associated
with the database records related to the course.
&amp;quot;Implied parameter&amp;quot; verbs can be paraphrased as a
longer &amp;quot;trivial&amp;quot; verb phrase by adding a parameter and
requisite noise words for syntactic acceptability. For
example, students who fail a course are those students
who snake a grade of F in the course. Finally,
&amp;quot;operational&amp;quot; verbs require an operation to be
performed on one or more of its noun phrase
arguments, rather than simply asking for a comparison
of its noun phrase referent(s) against values in
specified fields of the physical data file. For example,
the students who outscore Jim are precisely those
students who make a grade higher than the grade of
Jim. At present, prepositions are treated semantically
as trivial verbs, so that &amp;quot;students in Al&amp;quot; is interpreted
as &amp;quot;students associated with records related to the Al
course&amp;quot;.
</bodyText>
<tableCaption confidence="0.875912">
Table 1 - Modifier Types Available in LDC
</tableCaption>
<bodyText confidence="0.661473757575757">
Modifier Type Example Usage Syntax Semantics
Implemented Implemented
Ordinal the second floor yes yes
Superlative the largest office yes yes
4
Anaphoric better students yes no
Comparative more desirable instructors
Adjective the large rooms yes yes
classgs that were small
Anaphoric adjacent offices yes no
Argument-Taking Adjective
Anaphoric failing students yes no
Implied-Parameter Verb
Noun Modifier conference rooms yes yes
I Subtype offices . yes yes
Argument-Taking Noun classmates of Jim yes yes
Jim&apos;s classmates
Anaphoric the best classmate- yes no
Argument-Taking Noun
Prepositional Phrase students in CPS215 yes (yes)
Comparative Phrase students better than Jim yes yes
a higher grade than a C
Trivial instructors who teach Al yes yes
Verb Phrase students who took Al from Smith
Implied-Parameter students who failed Al yes yes
Verb Phrase
Operational students who outscored Jim yes yes
Verb Phrase
Argument-Taking Adjective offices adjacent to X-238 yes yes
Negations the non graduate students yes yes
(of many sorts) offices not adjacent to X-238
instructors that did not teach Al
etc.
</bodyText>
<page confidence="0.963314">
53
</page>
<sectionHeader confidence="0.489619" genericHeader="method">
III KNOWLEDGE ACQUISITION FOR MODIFIERS
</sectionHeader>
<bodyText confidence="0.999861444444444">
The job of the knowledge acquisition module
of LDC, called &amp;quot;Prep&amp;quot; in Figure 1, is to&apos; find out about
(a) the vocabulary of the new domain and (b) the
composition of the physical data file. This paper is
concerned only with vocabulary acquisition, which
occurs in three stages. In Stage 1, Prep asks the user
to name each entity, or conceptual data item, of the
domain. As each entity name is given. Prep asks for
several simple kinds of information, as in
</bodyText>
<table confidence="0.910199833333333">
ENTITY NAME? section
SYNONYMS: class
TYPE (PERSON, NUMBER, LIST, PATTERN, NONE)?
pattern
GIVE 2 OR 3 EXAMPLE NAMES: cps51.12, ee34.1
NOUN SUBTYPES: none
ADJECTIVES: large, small
NOUN MODIFIERS: none
HIGHER LEVEL ENTITIES: class
LOWER LEVEL ENTITIES: student, instructor
MULTIPLE ENTITY? yes
ORDERED ENTITY? yes
</table>
<bodyText confidence="0.9365625">
Prep next determines the case structure of verbs
having the given entity as surface subject, as in
</bodyText>
<sectionHeader confidence="0.930366" genericHeader="method">
ACQUIRING VERBS FOR STUDENT:
</sectionHeader>
<bodyText confidence="0.998987888888889">
A STUDENT CAN pass a course
fail a course
take a course from an instructor
make a grade from an instructor
make a grade in a course
In Stage 2, Prep learns the morhological variants of
words not known to it, e.g. plurals for nouns,
comparative and superlative forms for adjectives, and
past tense and participle forms for verbs. For example,
</bodyText>
<table confidence="0.3710688">
PAST-TENSE VERB ACQUISITION
PLEASE GIVE CORRECTED FORMS, OR HIT RETURN
FAIL FAILED &gt;
BITE BITED &gt; bit
TRY TRIED &gt;
</table>
<bodyText confidence="0.870848">
In Stage 3, Prep acquires the semantics of adjectives,
verbs, and other modifier types, based upon the
following principles.
</bodyText>
<listItem confidence="0.68229575">
1. Systems which attempt to acquire complex
semantics from relatively untrained users had
better restrict the class of the domains they seek
to provide an interface to.
</listItem>
<bodyText confidence="0.968819380952381">
For this reason, LDC restricts itself to a class of
domains [1] in which the important relationships
among domain entities involve hierarchical
decompositions.
2. There need not be any correlation between the type
of modifier being defined and the way in which its
meaning relates to the underlying data file.
For this reason, Prep acquires the meanings of all
user-defined modifiers in the same manner by
providing such primitives as id, the identity function;
val, which retrieves a specified field of a record; num,
which returns the size of its argument, which is
assumed to be a set; sum, which returns the sum of &apos;.ts
list of inputs; avg, which returns the average of its list
of inputs; and pct, which returns the percentage of its
list of boolean arguments which are true. Other user-
defined adjectives may also be used. Thus, a &amp;quot;desirable
instructor&amp;quot; might be defined as an instructor who gave
a good grade to more than half his students, where a
&amp;quot;good grade&amp;quot; is defined as a grade of B or above. These
two adjectives may be specified as shown below.
</bodyText>
<sectionHeader confidence="0.744078" genericHeader="method">
ACQUIRING SEMANTICS FOR DESIRABLE INSTRUCTOR
</sectionHeader>
<figure confidence="0.596264545454545">
PRIMARY? section
TARGET? grade
PATH IS: GRADE /STUDENT /SECTION-
FUNCTIONS? good /id /pct
PREDICATE? &gt; 50
ACQUIRING SEMANTICS FOR GOOD GRADE
PRIMARY? grade
TARGET? grade
PATH IS: GRADE
FUNCTIONS? val
PREDICATE? &gt;= B
</figure>
<bodyText confidence="0.999510666666667">
As shown here, Prep requests three pieces of
information for each adjective-entity pair, namely (1)
the primary (highest-level) and target tiowest-level)
entities needed to specify the desired adjective
meaning; (2) a list of functions corresponding to the
arcs on the path from the primary to the target nodes;
and finally (3) a predicate to be applied to the
numerical value obtained from the series of function
calls just acquired.
</bodyText>
<sectionHeader confidence="0.9568715" genericHeader="method">
IV UTILIZATION OF THE INFORMATION ACQUIRED
DURING PREPROCESSING
</sectionHeader>
<bodyText confidence="0.998764666666667">
As shown in Figure 1, the English-language
processor of LDC achieves domain independence by
restricting itself to (a) a domain-independent,
linguistically-motivated phrase-structure grammar [6]
and (b) and the domain-specific files produced by the
knowledge acquisition module.
The simplest file is the pattern file, which
captures the morphology of domain-specific proper
nouns, e.g. the entity type &amp;quot;room&amp;quot; may have values
such as X-238 and A-22, or &amp;quot;letter, dash, digits&amp;quot;. This
information frees us from having to store all possible
field values in the dictionary, as some systems do, or to
make reference to the physical data file when new data
values are typed by the user, as other systems do.
The domain-specific dictionary file contains
some standard terms (articles, ordinals, etc.) and also
both root words and inflections for terms acquired
from the user. The sample dictionary entry
(longest Superl long (nt meeting week))
says that &amp;quot;longest&amp;quot; is the superlative form of the
adjective &amp;quot;long&amp;quot;, and may occur in noun phrases whose
head noun refers to entities of type meeting or week.
By having this information in the dictionary, the parser
can perform &amp;quot;local&amp;quot; compatibility checks to assure the
</bodyText>
<page confidence="0.989399">
54
</page>
<figure confidence="0.9996125625">
User--&apos;
User
PREP
Dictionary Compat Macro
File File
PARSER TRANSLATOR RETRIEVAL
Augmented
Phrase-Structured
Grammar
Pattern
File
z
SCANNER
Text-Edited
Data
File
</figure>
<figureCaption confidence="0.996997">
Figure 1 - Overview of LDC
</figureCaption>
<bodyText confidence="0.949835360655738">
integrity of a noun phrase being built up, i.e. to assure
all words in the phrase can go together on non-
syntactic grounds. This aids in disambiguation, yet
avoids expensive interaction with a subsequent
semantics module.
An opportunity to perform &amp;quot;non-local&amp;quot;
compatibility checking is provided for by the eompat
file, which tells (a) the case structure of each verb, Le.
which prepositions may occur and which entity types
may fill each noun phrase &amp;quot;slot&amp;quot;, and (b) which pairs of
entity types may be linked by each preposition. The
former information will have been acquired directly
from the user, while the latter is predicted by
heuristics based upon the sorts of conceptual
relationships that can occur in the &amp;quot;layered&amp;quot; domains
of interest [1].
Finally, the macro file contains the meanings
of modifiers, roughly in the form in which they were
acquired using the specification language discussed in
the previous section. Although this required .us to
formulate our own retrieval query language [3], having
complex modifier meanings directly exceutable by the
retrieval module enables us to avoid many of the
problems typically arising in the translation from parse
structures to formal retrieval queries. Furthermore,
some modifier meanings can be derived by the system
from the meanings of other modifiers, rather than
separately acquired from the user. For example, if the
meaning of the adjective &amp;quot;large&amp;quot; has been given by the
user, the system automatically processes &amp;quot;largest&amp;quot; and
&amp;quot;larger than ...&amp;quot; by appropriately interpreting the
macro body for &amp;quot;large&amp;quot;.
A partially unsolved problem in macro
processing involves the resolution of scope ambiguities
related to negation Interestingly, most meaningful
interpretations of phrases containing &amp;quot;nrin&amp;quot; or &amp;quot;not&amp;quot;
can be obtained by inserting the retrieval module&apos;s Not
command at an appropriate point in the macro body
for the modifier in question. For example,
students who were not failed by Rosenberg
might or might not be intended to include students
who did not take a course from Rosenberg. The
retrieval query commands generated by the positive
usage of &amp;quot;fail&amp;quot;, as in
students that Rosenberg failed
would be the sequence
instructor = Rosenberg;
student -&gt; fail
so the question is whether to introduce &amp;quot;not&amp;quot; at the
phrase level
not instructor = Rosenberg;
student -&gt; fail
or instead at the verb level
instructor = Rosenberg;
not istudent -&gt; fail]
Our current system takes the literal reading, and thus
generates the first interpretation given. The example
points out the close relationship between negation
scope and the important problem of &amp;quot;presupposition&amp;quot;,
in that the user may be interested only in students who
had a chance to be failed.
</bodyText>
<page confidence="0.995885">
55
</page>
<bodyText confidence="0.432264333333333">
17. Hendrix, G., Sacerdoti, E., Sagalowicz. D. and Slocum, J.
Developing a natural language interface to complex data.
ACM Trans. on Database Systems, 3 (1978), 2, pp. 105-147.
18. Lehmann, H. Interpretation of natural language in an
information system. IBM J. Res. Dem 22 (1978), 5, pp.
560-571.
</bodyText>
<sectionHeader confidence="0.813995" genericHeader="references">
REFERENCES
</sectionHeader>
<bodyText confidence="0.907661666666667">
1. Ballard, B. A &amp;quot;Domain Class&amp;quot; approach to transportable
natural language processing. cognition and Brain
Theory, 5 (1982), 3, pp. 269-287.
</bodyText>
<reference confidence="0.999937204301076">
2. Ballard, B. and Lusth, J. An English-language processing
system that &amp;quot;learns&amp;quot; about new domains. AFIPS National
Cbmputer Conference, 1983, pp. 39-46.
3. Ballard, B. and Lusth, J. The design of DOMINO: a
knowledge-based information retrieval processor for
office enviroments. Tech. Report CS-1984-2, Dept. of
Computer Science, Duke University, February 1984.
4. Ballard, B., Lusth, J. and Tinkham, N. LDC-1: a
transportable, knowledge-based natural language
processor for office environments. ACM Nans. on Office
Information Systems, 2 (1984), 1, pp. 1-25.
5. Ballard, B., Lusth, J. and Tinkham, N. Transportable
English language processing for office environments.
AFIPS National Computer Conference, 1984, to appear in
the proceedings.
6. Ballard, B. and Tinkham, N. A phrase-structured
grammatical formalism for transportable natural
language processing. Amer. J. Computational Linguistics,
to appear.
7. Biermann, A. and Ballard, B. Toward natural language
computation. Amer. J. Computational Linguistics, 6
(1980), 2, pp. 71-86.
8. Lusth, J. Conceptual Information Retrieval for Improved
Natural Language Processing (Master&apos;s Thesis). Dept. of
Computer Science, Duke University, February 1984.
9. Lusth, J. and Ballard, B. Knowledge acquisition for a
natural language processor. Conference on Artificial
Intelligence, Oakland University, Rochester, Michigan.
April 1983, to appear in the proceedings.
10. Bronnenberg, W., Landsbergen, S., Scha, R.,
Schoenmakers, W. and van Utteren, E. PHLIQA-1, a
question-answering system for data-base consultation in
natural English. Philips tech. Rev. 38 (1978-79), pp.
229-239 and 269-284.
11. Codd, T. Seven steps to RENDEZVOUS with the casual
user. In Data Base Management, J. Kimbie and K.
Koffeman (Eds.), North-Holland, 1974.
12. Codd. T. RENDEZVOUS Version 1: An experimental
English-language query formulation system for casual
users of relational data bases. IBM Research Report
RJ2144, San Jose, Ca., 1978.
13. Finin, T., Goodman, B. and Tennant, H. JETS: achieving
completeness through coverage and closure. Int. J. Conf.
on Artificial Intelligence, 1979, pp. 275-281.
14. Harris, L. User-oriented data base query with the Robot
natural language system. hit. J. Man-Machine Studies, 9
(1977), pp. 697-713.
15. Harris, L. The ROBOT system: natural language
processing applied to data base query. ACM National
Conference, 1978, pp. 165-172.
16. Hendrix, G. Human engineering for applied natural
language processing. hit. J. Conf. on Artificial
Intelligence, 1977, pp. 183-191.
19. Plath, W. REQUEST: a natural language question-
answering system. IBM J: Res. Dev., 20 (1976), 4, pp. 326-
335.
20. Thompson, F. and Thompson, B. Practical natural
language processing: the REL system as prototype. In
Advances in Computers, Vol. 3, M. Rubinoff and M. Yovits,
Eds., Academic Press, 1975.
21. Waltz, D. An English language question answering system
for a large relational database. Comm. ACM 21 (1978), 7,
pp. 528-539.
22. Woods, W. Semantics and quantification in natural
language question answering. In Advances in Computers,
Vol. 17, H. Yovits, Ed., Academic Press, 1978.
23. Woods, W., Kaplan, R. and Nash-Webber, B. The Lunar
Sciences Natural Language Information System: Final
Report. Report 2378, Bolt, Beranek and Newman,
Cambridge, Mass., 1972.
24. Ginsparg, J. A robust portable natural language data
base interface. Conf. on Applied Natural Language
Processing, Santa Monica, Ca., 1983, pp. 25-30.
25. Grosz, B. TEAM: A transportable natural language
interface system. Conf. on Applied Natural Language
Processing, Santa Monica, Ca., 1983, pp. 39-45.
26. Haas, N. and Hendrix, G. An approach to acquiring and
applying knowledge. First Nat. Conf. on Artificial
Intelligence, Stanford Univ., Palo Alto, Ca., 1980, pp. 235-
239.
27. Hendrix, G. and Lewis, W. Transportable natural-language
interfaces to databases. Proc. /9th Annual Meeting of the
ACL, Stanford Univ., 1981, pp. 159-165.
28. Mark, W. Representation and inference in the Consul
system. Int. Joint Conf. on Artificial Intelligence, 1981.
29. Thompson, B. and Thompson, F. Introducing ASK, a
simple knowledgeable system. Conf. on Applied Natural
Language Processing, Santa Monica, Ca., 1983, pp. 17-24.
30. Thompson, F. and Thompson, B. Shifting to a higher gear
in a natural language system. National Computer
Conference, 1981, 657-662.
31. Wilczynski, D. Knowledge acquisition in the Consul
system. Mt. Joint Conf. on Artificial Intelligence, 1981.
</reference>
<page confidence="0.998424">
56
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.963805">
<title confidence="0.994343333333333">THE SYNTAX AND SEMANTICS OF USER-DEFINED MODIFIERS IN A TRANSPORTABLE NATURAL LANGUAGE PROCESSOR</title>
<author confidence="0.99998">Bruce W Ballard</author>
<affiliation confidence="0.999907">Dept. of Computer Science Duke University</affiliation>
<address confidence="0.997882">Durham, N.C. 27706</address>
<abstract confidence="0.998655733333333">The Layered Domain Class system (LDC) is an experimental natural language processor being developed at Duke University which reached the prototype stage in May of 1983. Its primary goals are (1) to provide English-language retrieval capabilities for structured but unnormalized data files created by the user; (2) to allow very complex semantics, in terms of the information directly available from the physical data file; and (3) to enable users to customize the system to operate with new types of data. In this paper we shall discuss (a) the types of modifiers LDC provides for; (b) how information about the syntax and semantics of modifiers is obtained from users; and (c) how this information is used to process English inputs.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>B Ballard</author>
<author>J Lusth</author>
</authors>
<title>An English-language processing system that &amp;quot;learns&amp;quot; about new domains.</title>
<date>1983</date>
<booktitle>AFIPS National Cbmputer Conference,</booktitle>
<pages>39--46</pages>
<contexts>
<context position="1376" citStr="[1,2,8,8,9]" startWordPosition="218" endWordPosition="218"> (b) how information about the syntax and semantics of modifiers is obtained from users; and (c) how this information is used to process English inputs. I INTRODUCTION The Layered Domain Class system (LDC) is an experimental natural language processor being developed at Duke University. In this paper we concentrate on the typ 3S of modifiers provided by LDC and the methods by which the system acquires information about the syntax and semantics of userdefined modifiers. A more complete description is available in [4,5], and further details on matters not discussed in this paper can be found in [1,2,8,8,9]. The LDC system is made up of two primary components. First, the knowledge acquisition component, whose job is to find out about the vocabulary and semantics of the language to be used for a new domain, then inquire about the composition of the underlying input file. Second, the User-Phase Processor, which enables a user to obtain statistical reductions on his or her data by typed English inputs. The top-level design of the User-Phase processor involves a linear sequence of modules for scanning the input and looking up each token in the dictionary; parsing the scanned input to determine its s</context>
</contexts>
<marker>2.</marker>
<rawString>Ballard, B. and Lusth, J. An English-language processing system that &amp;quot;learns&amp;quot; about new domains. AFIPS National Cbmputer Conference, 1983, pp. 39-46.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Ballard</author>
<author>J Lusth</author>
</authors>
<title>The design of DOMINO: a knowledge-based information retrieval processor for office enviroments.</title>
<date>1984</date>
<tech>Tech. Report CS-1984-2,</tech>
<institution>Dept. of Computer Science, Duke University,</institution>
<contexts>
<context position="12616" citStr="[3]" startWordPosition="2015" endWordPosition="2015">r and which entity types may fill each noun phrase &amp;quot;slot&amp;quot;, and (b) which pairs of entity types may be linked by each preposition. The former information will have been acquired directly from the user, while the latter is predicted by heuristics based upon the sorts of conceptual relationships that can occur in the &amp;quot;layered&amp;quot; domains of interest [1]. Finally, the macro file contains the meanings of modifiers, roughly in the form in which they were acquired using the specification language discussed in the previous section. Although this required .us to formulate our own retrieval query language [3], having complex modifier meanings directly exceutable by the retrieval module enables us to avoid many of the problems typically arising in the translation from parse structures to formal retrieval queries. Furthermore, some modifier meanings can be derived by the system from the meanings of other modifiers, rather than separately acquired from the user. For example, if the meaning of the adjective &amp;quot;large&amp;quot; has been given by the user, the system automatically processes &amp;quot;largest&amp;quot; and &amp;quot;larger than ...&amp;quot; by appropriately interpreting the macro body for &amp;quot;large&amp;quot;. A partially unsolved problem in macr</context>
</contexts>
<marker>3.</marker>
<rawString>Ballard, B. and Lusth, J. The design of DOMINO: a knowledge-based information retrieval processor for office enviroments. Tech. Report CS-1984-2, Dept. of Computer Science, Duke University, February 1984.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Ballard</author>
<author>J Lusth</author>
<author>N Tinkham</author>
</authors>
<title>LDC-1: a transportable, knowledge-based natural language processor for office environments.</title>
<date>1984</date>
<journal>ACM Nans. on Office Information Systems,</journal>
<volume>2</volume>
<pages>1--25</pages>
<contexts>
<context position="1288" citStr="[4,5]" startWordPosition="203" endWordPosition="203"> data. In this paper we shall discuss (a) the types of modifiers LDC provides for; (b) how information about the syntax and semantics of modifiers is obtained from users; and (c) how this information is used to process English inputs. I INTRODUCTION The Layered Domain Class system (LDC) is an experimental natural language processor being developed at Duke University. In this paper we concentrate on the typ 3S of modifiers provided by LDC and the methods by which the system acquires information about the syntax and semantics of userdefined modifiers. A more complete description is available in [4,5], and further details on matters not discussed in this paper can be found in [1,2,8,8,9]. The LDC system is made up of two primary components. First, the knowledge acquisition component, whose job is to find out about the vocabulary and semantics of the language to be used for a new domain, then inquire about the composition of the underlying input file. Second, the User-Phase Processor, which enables a user to obtain statistical reductions on his or her data by typed English inputs. The top-level design of the User-Phase processor involves a linear sequence of modules for scanning the input a</context>
<context position="3291" citStr="[4]" startWordPosition="518" endWordPosition="518">. At the time of this writing, LDC has been completely customized for two fairly complex domains, from which examples are drawn in the remainder of the paper, and several simpler ones. The complex domains are a final grades domain, giving course grades for students in an academic department, and a building organization domain, containing information on the floors, wings, corridors, occupants, and so forth for one or more buildings. Among the simpler domains LDC has been customized for are files giving employee information and stock market quotations. II MODIFIER TYPES PROVIDED FOR As shown in [4], LDC handles inputs about as complicated as students who were given a passing grade by an instructor Jim took a graduate course from As suggested here, most of the syntactic and semantic sophistication of inputs to LDC are due to noun phrase modifiers, including a fairly broad coverage of relative clauses. For example, if LDC is told that &amp;quot;students take courses from instructors&amp;quot;, it will accept auch relative clause forms as students who took a graduate course from Trivedi courses Sarah took from Rogers instructors Jim took a graduate course from courses that were taken by Jim students who did</context>
</contexts>
<marker>4.</marker>
<rawString>Ballard, B., Lusth, J. and Tinkham, N. LDC-1: a transportable, knowledge-based natural language processor for office environments. ACM Nans. on Office Information Systems, 2 (1984), 1, pp. 1-25.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Ballard</author>
<author>J Lusth</author>
<author>N Tinkham</author>
</authors>
<title>Transportable English language processing for office environments.</title>
<date>1984</date>
<journal>AFIPS National Computer Conference,</journal>
<note>to appear in the proceedings.</note>
<contexts>
<context position="1288" citStr="[4,5]" startWordPosition="203" endWordPosition="203"> data. In this paper we shall discuss (a) the types of modifiers LDC provides for; (b) how information about the syntax and semantics of modifiers is obtained from users; and (c) how this information is used to process English inputs. I INTRODUCTION The Layered Domain Class system (LDC) is an experimental natural language processor being developed at Duke University. In this paper we concentrate on the typ 3S of modifiers provided by LDC and the methods by which the system acquires information about the syntax and semantics of userdefined modifiers. A more complete description is available in [4,5], and further details on matters not discussed in this paper can be found in [1,2,8,8,9]. The LDC system is made up of two primary components. First, the knowledge acquisition component, whose job is to find out about the vocabulary and semantics of the language to be used for a new domain, then inquire about the composition of the underlying input file. Second, the User-Phase Processor, which enables a user to obtain statistical reductions on his or her data by typed English inputs. The top-level design of the User-Phase processor involves a linear sequence of modules for scanning the input a</context>
</contexts>
<marker>5.</marker>
<rawString>Ballard, B., Lusth, J. and Tinkham, N. Transportable English language processing for office environments. AFIPS National Computer Conference, 1984, to appear in the proceedings.</rawString>
</citation>
<citation valid="false">
<authors>
<author>B Ballard</author>
<author>N Tinkham</author>
</authors>
<title>A phrase-structured grammatical formalism for transportable natural language processing.</title>
<journal>Amer. J. Computational Linguistics,</journal>
<note>to appear.</note>
<contexts>
<context position="10412" citStr="[6]" startWordPosition="1662" endWordPosition="1662">namely (1) the primary (highest-level) and target tiowest-level) entities needed to specify the desired adjective meaning; (2) a list of functions corresponding to the arcs on the path from the primary to the target nodes; and finally (3) a predicate to be applied to the numerical value obtained from the series of function calls just acquired. IV UTILIZATION OF THE INFORMATION ACQUIRED DURING PREPROCESSING As shown in Figure 1, the English-language processor of LDC achieves domain independence by restricting itself to (a) a domain-independent, linguistically-motivated phrase-structure grammar [6] and (b) and the domain-specific files produced by the knowledge acquisition module. The simplest file is the pattern file, which captures the morphology of domain-specific proper nouns, e.g. the entity type &amp;quot;room&amp;quot; may have values such as X-238 and A-22, or &amp;quot;letter, dash, digits&amp;quot;. This information frees us from having to store all possible field values in the dictionary, as some systems do, or to make reference to the physical data file when new data values are typed by the user, as other systems do. The domain-specific dictionary file contains some standard terms (articles, ordinals, etc.) an</context>
</contexts>
<marker>6.</marker>
<rawString>Ballard, B. and Tinkham, N. A phrase-structured grammatical formalism for transportable natural language processing. Amer. J. Computational Linguistics, to appear.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Biermann</author>
<author>B Ballard</author>
</authors>
<title>Toward natural language computation.</title>
<date>1980</date>
<journal>Amer. J. Computational Linguistics,</journal>
<volume>6</volume>
<pages>71--86</pages>
<contexts>
<context position="4304" citStr="[7]" startWordPosition="679" endWordPosition="679">ve clause forms as students who took a graduate course from Trivedi courses Sarah took from Rogers instructors Jim took a graduate course from courses that were taken by Jim students who did not take a course from Rosenberg We summarize the modifier types distinguished by LDC in Table 1. which is divided into four parts roughly corresponding to pre-nominal, nominal, post-nominal, and negating modifiers. We have included several modifier types, most of them anaphoric, which are processed syntactically, and methods for whose semantic processing are being implemented along the lines suggested in [7]. 52 Most of the names we give to modifier types are selfexplanatory, but the reader will notice that we have chosen to categorize verbs, based upon their semantics, as trivial verbs, implied parameter verbs: and operational verbs. &amp;quot;Trivial&amp;quot; verbs, which involve no semantics to speak of, can be roughly paraphrased as &amp;quot;be associated with&amp;quot;. For example, students who take a certain course are precisely those students associated with the database records related to the course. &amp;quot;Implied parameter&amp;quot; verbs can be paraphrased as a longer &amp;quot;trivial&amp;quot; verb phrase by adding a parameter and requisite noise w</context>
</contexts>
<marker>7.</marker>
<rawString>Biermann, A. and Ballard, B. Toward natural language computation. Amer. J. Computational Linguistics, 6 (1980), 2, pp. 71-86.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Lusth</author>
</authors>
<title>Conceptual Information Retrieval for Improved Natural Language Processing (Master&apos;s Thesis).</title>
<date>1984</date>
<institution>Dept. of Computer Science, Duke University,</institution>
<contexts>
<context position="1376" citStr="[1,2,8,8,9]" startWordPosition="218" endWordPosition="218"> (b) how information about the syntax and semantics of modifiers is obtained from users; and (c) how this information is used to process English inputs. I INTRODUCTION The Layered Domain Class system (LDC) is an experimental natural language processor being developed at Duke University. In this paper we concentrate on the typ 3S of modifiers provided by LDC and the methods by which the system acquires information about the syntax and semantics of userdefined modifiers. A more complete description is available in [4,5], and further details on matters not discussed in this paper can be found in [1,2,8,8,9]. The LDC system is made up of two primary components. First, the knowledge acquisition component, whose job is to find out about the vocabulary and semantics of the language to be used for a new domain, then inquire about the composition of the underlying input file. Second, the User-Phase Processor, which enables a user to obtain statistical reductions on his or her data by typed English inputs. The top-level design of the User-Phase processor involves a linear sequence of modules for scanning the input and looking up each token in the dictionary; parsing the scanned input to determine its s</context>
</contexts>
<marker>8.</marker>
<rawString>Lusth, J. Conceptual Information Retrieval for Improved Natural Language Processing (Master&apos;s Thesis). Dept. of Computer Science, Duke University, February 1984.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Lusth</author>
<author>B Ballard</author>
</authors>
<title>Knowledge acquisition for a natural language processor.</title>
<date>1983</date>
<booktitle>Conference on Artificial Intelligence,</booktitle>
<location>Oakland University, Rochester, Michigan.</location>
<note>to appear in the proceedings.</note>
<contexts>
<context position="1376" citStr="[1,2,8,8,9]" startWordPosition="218" endWordPosition="218"> (b) how information about the syntax and semantics of modifiers is obtained from users; and (c) how this information is used to process English inputs. I INTRODUCTION The Layered Domain Class system (LDC) is an experimental natural language processor being developed at Duke University. In this paper we concentrate on the typ 3S of modifiers provided by LDC and the methods by which the system acquires information about the syntax and semantics of userdefined modifiers. A more complete description is available in [4,5], and further details on matters not discussed in this paper can be found in [1,2,8,8,9]. The LDC system is made up of two primary components. First, the knowledge acquisition component, whose job is to find out about the vocabulary and semantics of the language to be used for a new domain, then inquire about the composition of the underlying input file. Second, the User-Phase Processor, which enables a user to obtain statistical reductions on his or her data by typed English inputs. The top-level design of the User-Phase processor involves a linear sequence of modules for scanning the input and looking up each token in the dictionary; parsing the scanned input to determine its s</context>
</contexts>
<marker>9.</marker>
<rawString>Lusth, J. and Ballard, B. Knowledge acquisition for a natural language processor. Conference on Artificial Intelligence, Oakland University, Rochester, Michigan. April 1983, to appear in the proceedings.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W Bronnenberg</author>
<author>S Landsbergen</author>
<author>R Scha</author>
<author>W Schoenmakers</author>
<author>E van Utteren</author>
</authors>
<title>PHLIQA-1, a question-answering system for data-base consultation in natural English. Philips tech.</title>
<date>1978</date>
<journal>Rev.</journal>
<volume>38</volume>
<pages>229--239</pages>
<marker>10.</marker>
<rawString>Bronnenberg, W., Landsbergen, S., Scha, R., Schoenmakers, W. and van Utteren, E. PHLIQA-1, a question-answering system for data-base consultation in natural English. Philips tech. Rev. 38 (1978-79), pp. 229-239 and 269-284.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Codd</author>
</authors>
<title>Seven steps to RENDEZVOUS with the casual user.</title>
<date>1974</date>
<journal>In Data Base Management, J. Kimbie</journal>
<marker>11.</marker>
<rawString>Codd, T. Seven steps to RENDEZVOUS with the casual user. In Data Base Management, J. Kimbie and K. Koffeman (Eds.), North-Holland, 1974.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T</author>
</authors>
<title>RENDEZVOUS Version 1: An experimental English-language query formulation system for casual users of relational data bases.</title>
<date>1978</date>
<booktitle>IBM Research Report RJ2144,</booktitle>
<location>San Jose, Ca.,</location>
<marker>12.</marker>
<rawString>Codd. T. RENDEZVOUS Version 1: An experimental English-language query formulation system for casual users of relational data bases. IBM Research Report RJ2144, San Jose, Ca., 1978.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Finin</author>
<author>B Goodman</author>
<author>H Tennant</author>
</authors>
<title>JETS: achieving completeness through coverage and closure.</title>
<date>1979</date>
<journal>Int. J. Conf. on Artificial Intelligence,</journal>
<pages>275--281</pages>
<marker>13.</marker>
<rawString>Finin, T., Goodman, B. and Tennant, H. JETS: achieving completeness through coverage and closure. Int. J. Conf. on Artificial Intelligence, 1979, pp. 275-281.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L Harris</author>
</authors>
<title>User-oriented data base query with the Robot natural language system.</title>
<date>1977</date>
<journal>hit. J. Man-Machine Studies,</journal>
<volume>9</volume>
<pages>697--713</pages>
<marker>14.</marker>
<rawString>Harris, L. User-oriented data base query with the Robot natural language system. hit. J. Man-Machine Studies, 9 (1977), pp. 697-713.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L Harris</author>
</authors>
<title>The ROBOT system: natural language processing applied to data base query.</title>
<date>1978</date>
<journal>ACM National Conference,</journal>
<pages>165--172</pages>
<marker>15.</marker>
<rawString>Harris, L. The ROBOT system: natural language processing applied to data base query. ACM National Conference, 1978, pp. 165-172.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Hendrix</author>
</authors>
<title>Human engineering for applied natural language processing.</title>
<date>1977</date>
<journal>hit. J. Conf. on Artificial Intelligence,</journal>
<pages>183--191</pages>
<marker>16.</marker>
<rawString>Hendrix, G. Human engineering for applied natural language processing. hit. J. Conf. on Artificial Intelligence, 1977, pp. 183-191.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W Plath</author>
</authors>
<title>REQUEST: a natural language questionanswering system.</title>
<date>1976</date>
<journal>IBM J: Res. Dev.,</journal>
<volume>20</volume>
<pages>326</pages>
<marker>19.</marker>
<rawString>Plath, W. REQUEST: a natural language questionanswering system. IBM J: Res. Dev., 20 (1976), 4, pp. 326-</rawString>
</citation>
<citation valid="true">
<authors>
<author>F Thompson</author>
<author>B Thompson</author>
</authors>
<title>Practical natural language processing: the REL system as prototype.</title>
<date>1975</date>
<booktitle>In Advances in Computers,</booktitle>
<volume>3</volume>
<publisher>Academic Press,</publisher>
<marker>20.</marker>
<rawString>Thompson, F. and Thompson, B. Practical natural language processing: the REL system as prototype. In Advances in Computers, Vol. 3, M. Rubinoff and M. Yovits, Eds., Academic Press, 1975.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Waltz</author>
</authors>
<title>An English language question answering system for a large relational database.</title>
<date>1978</date>
<journal>Comm. ACM</journal>
<volume>21</volume>
<pages>528--539</pages>
<marker>21.</marker>
<rawString>Waltz, D. An English language question answering system for a large relational database. Comm. ACM 21 (1978), 7, pp. 528-539.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W Woods</author>
</authors>
<title>Semantics and quantification in natural language question answering.</title>
<date>1978</date>
<booktitle>In Advances in Computers,</booktitle>
<volume>17</volume>
<publisher>Academic Press,</publisher>
<marker>22.</marker>
<rawString>Woods, W. Semantics and quantification in natural language question answering. In Advances in Computers, Vol. 17, H. Yovits, Ed., Academic Press, 1978.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W Woods</author>
<author>R Kaplan</author>
<author>B Nash-Webber</author>
</authors>
<title>The Lunar Sciences Natural Language Information System:</title>
<date>1972</date>
<tech>Final Report. Report 2378,</tech>
<location>Bolt, Beranek and Newman, Cambridge, Mass.,</location>
<marker>23.</marker>
<rawString>Woods, W., Kaplan, R. and Nash-Webber, B. The Lunar Sciences Natural Language Information System: Final Report. Report 2378, Bolt, Beranek and Newman, Cambridge, Mass., 1972.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Ginsparg</author>
</authors>
<title>A robust portable natural language data base interface.</title>
<date>1983</date>
<booktitle>Conf. on Applied Natural Language Processing,</booktitle>
<pages>25--30</pages>
<location>Santa Monica, Ca.,</location>
<contexts>
<context position="2687" citStr="[24, 25, 26, 27, 28, 29, 30, 31]" startWordPosition="422" endWordPosition="422">query; and finally query processing. This research has been supported in part by the National Science Foundation, Grants MCS-81-16607 and IST-83-01994; in part by the National Library of Medicine, Grant LM-07003; and in part by the Air Force Office of Scientific Research, Grant 81-0221. The User-Phrase portion of LDC resembles familiar natural language database query systems such as INTELLECT, JETS, LADDER, LUNAR, PHLIQA, PLANES, REL, RENDEZVOUS, TQA, and USL (see [10-231) while the overall LDC system is similar in its objectives to more recent systems such as ASK, CONSUL, IRUS, and TEAM (see [24, 25, 26, 27, 28, 29, 30, 31]). At the time of this writing, LDC has been completely customized for two fairly complex domains, from which examples are drawn in the remainder of the paper, and several simpler ones. The complex domains are a final grades domain, giving course grades for students in an academic department, and a building organization domain, containing information on the floors, wings, corridors, occupants, and so forth for one or more buildings. Among the simpler domains LDC has been customized for are files giving employee information and stock market quotations. II MODIFIER TYPES PROVIDED FOR As shown in</context>
</contexts>
<marker>24.</marker>
<rawString>Ginsparg, J. A robust portable natural language data base interface. Conf. on Applied Natural Language Processing, Santa Monica, Ca., 1983, pp. 25-30.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Grosz</author>
</authors>
<title>TEAM: A transportable natural language interface system.</title>
<date>1983</date>
<booktitle>Conf. on Applied Natural Language Processing,</booktitle>
<pages>39--45</pages>
<location>Santa Monica, Ca.,</location>
<contexts>
<context position="2687" citStr="[24, 25, 26, 27, 28, 29, 30, 31]" startWordPosition="422" endWordPosition="422">query; and finally query processing. This research has been supported in part by the National Science Foundation, Grants MCS-81-16607 and IST-83-01994; in part by the National Library of Medicine, Grant LM-07003; and in part by the Air Force Office of Scientific Research, Grant 81-0221. The User-Phrase portion of LDC resembles familiar natural language database query systems such as INTELLECT, JETS, LADDER, LUNAR, PHLIQA, PLANES, REL, RENDEZVOUS, TQA, and USL (see [10-231) while the overall LDC system is similar in its objectives to more recent systems such as ASK, CONSUL, IRUS, and TEAM (see [24, 25, 26, 27, 28, 29, 30, 31]). At the time of this writing, LDC has been completely customized for two fairly complex domains, from which examples are drawn in the remainder of the paper, and several simpler ones. The complex domains are a final grades domain, giving course grades for students in an academic department, and a building organization domain, containing information on the floors, wings, corridors, occupants, and so forth for one or more buildings. Among the simpler domains LDC has been customized for are files giving employee information and stock market quotations. II MODIFIER TYPES PROVIDED FOR As shown in</context>
</contexts>
<marker>25.</marker>
<rawString>Grosz, B. TEAM: A transportable natural language interface system. Conf. on Applied Natural Language Processing, Santa Monica, Ca., 1983, pp. 39-45.</rawString>
</citation>
<citation valid="true">
<authors>
<author>N Haas</author>
<author>G Hendrix</author>
</authors>
<title>An approach to acquiring and applying knowledge.</title>
<date>1980</date>
<booktitle>First Nat. Conf. on Artificial Intelligence,</booktitle>
<pages>235</pages>
<location>Stanford Univ., Palo Alto, Ca.,</location>
<contexts>
<context position="2687" citStr="[24, 25, 26, 27, 28, 29, 30, 31]" startWordPosition="422" endWordPosition="422">query; and finally query processing. This research has been supported in part by the National Science Foundation, Grants MCS-81-16607 and IST-83-01994; in part by the National Library of Medicine, Grant LM-07003; and in part by the Air Force Office of Scientific Research, Grant 81-0221. The User-Phrase portion of LDC resembles familiar natural language database query systems such as INTELLECT, JETS, LADDER, LUNAR, PHLIQA, PLANES, REL, RENDEZVOUS, TQA, and USL (see [10-231) while the overall LDC system is similar in its objectives to more recent systems such as ASK, CONSUL, IRUS, and TEAM (see [24, 25, 26, 27, 28, 29, 30, 31]). At the time of this writing, LDC has been completely customized for two fairly complex domains, from which examples are drawn in the remainder of the paper, and several simpler ones. The complex domains are a final grades domain, giving course grades for students in an academic department, and a building organization domain, containing information on the floors, wings, corridors, occupants, and so forth for one or more buildings. Among the simpler domains LDC has been customized for are files giving employee information and stock market quotations. II MODIFIER TYPES PROVIDED FOR As shown in</context>
</contexts>
<marker>26.</marker>
<rawString>Haas, N. and Hendrix, G. An approach to acquiring and applying knowledge. First Nat. Conf. on Artificial Intelligence, Stanford Univ., Palo Alto, Ca., 1980, pp. 235-</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Hendrix</author>
<author>W Lewis</author>
</authors>
<title>Transportable natural-language interfaces to databases.</title>
<date>1981</date>
<booktitle>Proc. /9th Annual Meeting of the ACL, Stanford Univ.,</booktitle>
<pages>159--165</pages>
<contexts>
<context position="2687" citStr="[24, 25, 26, 27, 28, 29, 30, 31]" startWordPosition="422" endWordPosition="422">query; and finally query processing. This research has been supported in part by the National Science Foundation, Grants MCS-81-16607 and IST-83-01994; in part by the National Library of Medicine, Grant LM-07003; and in part by the Air Force Office of Scientific Research, Grant 81-0221. The User-Phrase portion of LDC resembles familiar natural language database query systems such as INTELLECT, JETS, LADDER, LUNAR, PHLIQA, PLANES, REL, RENDEZVOUS, TQA, and USL (see [10-231) while the overall LDC system is similar in its objectives to more recent systems such as ASK, CONSUL, IRUS, and TEAM (see [24, 25, 26, 27, 28, 29, 30, 31]). At the time of this writing, LDC has been completely customized for two fairly complex domains, from which examples are drawn in the remainder of the paper, and several simpler ones. The complex domains are a final grades domain, giving course grades for students in an academic department, and a building organization domain, containing information on the floors, wings, corridors, occupants, and so forth for one or more buildings. Among the simpler domains LDC has been customized for are files giving employee information and stock market quotations. II MODIFIER TYPES PROVIDED FOR As shown in</context>
</contexts>
<marker>27.</marker>
<rawString>Hendrix, G. and Lewis, W. Transportable natural-language interfaces to databases. Proc. /9th Annual Meeting of the ACL, Stanford Univ., 1981, pp. 159-165.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W Mark</author>
</authors>
<title>Representation and inference in the Consul system.</title>
<date>1981</date>
<booktitle>Int. Joint Conf. on Artificial Intelligence,</booktitle>
<contexts>
<context position="2687" citStr="[24, 25, 26, 27, 28, 29, 30, 31]" startWordPosition="422" endWordPosition="422">query; and finally query processing. This research has been supported in part by the National Science Foundation, Grants MCS-81-16607 and IST-83-01994; in part by the National Library of Medicine, Grant LM-07003; and in part by the Air Force Office of Scientific Research, Grant 81-0221. The User-Phrase portion of LDC resembles familiar natural language database query systems such as INTELLECT, JETS, LADDER, LUNAR, PHLIQA, PLANES, REL, RENDEZVOUS, TQA, and USL (see [10-231) while the overall LDC system is similar in its objectives to more recent systems such as ASK, CONSUL, IRUS, and TEAM (see [24, 25, 26, 27, 28, 29, 30, 31]). At the time of this writing, LDC has been completely customized for two fairly complex domains, from which examples are drawn in the remainder of the paper, and several simpler ones. The complex domains are a final grades domain, giving course grades for students in an academic department, and a building organization domain, containing information on the floors, wings, corridors, occupants, and so forth for one or more buildings. Among the simpler domains LDC has been customized for are files giving employee information and stock market quotations. II MODIFIER TYPES PROVIDED FOR As shown in</context>
</contexts>
<marker>28.</marker>
<rawString>Mark, W. Representation and inference in the Consul system. Int. Joint Conf. on Artificial Intelligence, 1981.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Thompson</author>
<author>F Thompson</author>
</authors>
<title>Introducing ASK, a simple knowledgeable system.</title>
<date>1983</date>
<booktitle>Conf. on Applied Natural Language Processing,</booktitle>
<pages>17--24</pages>
<location>Santa Monica, Ca.,</location>
<contexts>
<context position="2687" citStr="[24, 25, 26, 27, 28, 29, 30, 31]" startWordPosition="422" endWordPosition="422">query; and finally query processing. This research has been supported in part by the National Science Foundation, Grants MCS-81-16607 and IST-83-01994; in part by the National Library of Medicine, Grant LM-07003; and in part by the Air Force Office of Scientific Research, Grant 81-0221. The User-Phrase portion of LDC resembles familiar natural language database query systems such as INTELLECT, JETS, LADDER, LUNAR, PHLIQA, PLANES, REL, RENDEZVOUS, TQA, and USL (see [10-231) while the overall LDC system is similar in its objectives to more recent systems such as ASK, CONSUL, IRUS, and TEAM (see [24, 25, 26, 27, 28, 29, 30, 31]). At the time of this writing, LDC has been completely customized for two fairly complex domains, from which examples are drawn in the remainder of the paper, and several simpler ones. The complex domains are a final grades domain, giving course grades for students in an academic department, and a building organization domain, containing information on the floors, wings, corridors, occupants, and so forth for one or more buildings. Among the simpler domains LDC has been customized for are files giving employee information and stock market quotations. II MODIFIER TYPES PROVIDED FOR As shown in</context>
</contexts>
<marker>29.</marker>
<rawString>Thompson, B. and Thompson, F. Introducing ASK, a simple knowledgeable system. Conf. on Applied Natural Language Processing, Santa Monica, Ca., 1983, pp. 17-24.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F Thompson</author>
<author>B Thompson</author>
</authors>
<title>Shifting to a higher gear in a natural language system.</title>
<date>1981</date>
<booktitle>National Computer Conference,</booktitle>
<pages>657--662</pages>
<contexts>
<context position="2687" citStr="[24, 25, 26, 27, 28, 29, 30, 31]" startWordPosition="422" endWordPosition="422">query; and finally query processing. This research has been supported in part by the National Science Foundation, Grants MCS-81-16607 and IST-83-01994; in part by the National Library of Medicine, Grant LM-07003; and in part by the Air Force Office of Scientific Research, Grant 81-0221. The User-Phrase portion of LDC resembles familiar natural language database query systems such as INTELLECT, JETS, LADDER, LUNAR, PHLIQA, PLANES, REL, RENDEZVOUS, TQA, and USL (see [10-231) while the overall LDC system is similar in its objectives to more recent systems such as ASK, CONSUL, IRUS, and TEAM (see [24, 25, 26, 27, 28, 29, 30, 31]). At the time of this writing, LDC has been completely customized for two fairly complex domains, from which examples are drawn in the remainder of the paper, and several simpler ones. The complex domains are a final grades domain, giving course grades for students in an academic department, and a building organization domain, containing information on the floors, wings, corridors, occupants, and so forth for one or more buildings. Among the simpler domains LDC has been customized for are files giving employee information and stock market quotations. II MODIFIER TYPES PROVIDED FOR As shown in</context>
</contexts>
<marker>30.</marker>
<rawString>Thompson, F. and Thompson, B. Shifting to a higher gear in a natural language system. National Computer Conference, 1981, 657-662.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Wilczynski</author>
</authors>
<title>Knowledge acquisition in the Consul system.</title>
<date>1981</date>
<booktitle>Mt. Joint Conf. on Artificial Intelligence,</booktitle>
<contexts>
<context position="2687" citStr="[24, 25, 26, 27, 28, 29, 30, 31]" startWordPosition="422" endWordPosition="422">query; and finally query processing. This research has been supported in part by the National Science Foundation, Grants MCS-81-16607 and IST-83-01994; in part by the National Library of Medicine, Grant LM-07003; and in part by the Air Force Office of Scientific Research, Grant 81-0221. The User-Phrase portion of LDC resembles familiar natural language database query systems such as INTELLECT, JETS, LADDER, LUNAR, PHLIQA, PLANES, REL, RENDEZVOUS, TQA, and USL (see [10-231) while the overall LDC system is similar in its objectives to more recent systems such as ASK, CONSUL, IRUS, and TEAM (see [24, 25, 26, 27, 28, 29, 30, 31]). At the time of this writing, LDC has been completely customized for two fairly complex domains, from which examples are drawn in the remainder of the paper, and several simpler ones. The complex domains are a final grades domain, giving course grades for students in an academic department, and a building organization domain, containing information on the floors, wings, corridors, occupants, and so forth for one or more buildings. Among the simpler domains LDC has been customized for are files giving employee information and stock market quotations. II MODIFIER TYPES PROVIDED FOR As shown in</context>
</contexts>
<marker>31.</marker>
<rawString>Wilczynski, D. Knowledge acquisition in the Consul system. Mt. Joint Conf. on Artificial Intelligence, 1981.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>