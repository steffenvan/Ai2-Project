<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000329">
<title confidence="0.900565">
Resource sharing among HPSG and LTAG communities
by a method of grammar conversion from FB-LTAG to HPSG
</title>
<author confidence="0.99354">
Naoki Yoshinaga Yusuke Miyao
</author>
<affiliation confidence="0.999295">
Department of Information Science, Graduate school of Science, University of Tokyo
</affiliation>
<address confidence="0.776914">
Hongo 7-3-1, Bunkyo-ku, Tokyo, 113-0033, Japan
</address>
<email confidence="0.994295">
{yoshinag, yusuke}@is.s.u-tokyo.ac.jp
</email>
<author confidence="0.9883">
Kentaro Torisawa
</author>
<affiliation confidence="0.794705">
School of Information Science, Japan Advanced Institute of Science and Technology
Asahidai 1-1, Tatsunokuchi-cho, Noumi-gun, Ishikawa, 923-1292, Japan
Information and Human Behavior, PRESTO, Japan Science and Technology Corporation
Kawaguchi Hon-cho 4-1-8, Kawaguchi-shi, Saitama, 332-0012, Japan
</affiliation>
<email confidence="0.96989">
torisawa@jaist.ac.jp
</email>
<author confidence="0.986133">
Jun’ichi Tsujii
</author>
<affiliation confidence="0.999882">
Department of Computer Science, Graduate school of Information Science and Technology, University of Tokyo
</affiliation>
<address confidence="0.680975">
Hongo 7-3-1, Bunkyo-ku, Tokyo, 113-0033, Japan
CREST, JST (Japan Science and Technology Corporation)
Kawaguchi Hon-cho 4-1-8, Kawaguchi-shi, Saitama, 332-0012, Japan
</address>
<email confidence="0.992067">
tsujii@is.s.u-tokyo.ac.jp
</email>
<sectionHeader confidence="0.994691" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.9998392">
This paper describes the RenTAL sys-
tem, which enables sharing resources
in LTAG and HPSG formalisms by a
method of grammar conversion from
an FB-LTAG grammar to a strongly
equivalent HPSG-style grammar. The
system is applied to the latest version
of the XTAG English grammar. Ex-
perimental results show that the ob-
tained HPSG-style grammar success-
fully worked with an HPSG parser, and
achieved a drastic speed-up against an
LTAG parser. This system enables to
share not only grammars and lexicons
but also parsing techniques.
</bodyText>
<sectionHeader confidence="0.998543" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.99856516">
This paper describes an approach for shar-
ing resources in various grammar formalisms
such as Feature-Based Lexicalized Tree Adjoin-
ing Grammar (FB-LTAG1) (Vijay-Shanker, 1987;
Vijay-Shanker and Joshi, 1988) and Head-Driven
Phrase Structure Grammar (HPSG) (Pollard and
Sag, 1994) by a method of grammar conver-
sion. The RenTAL system automatically converts
an FB-LTAG grammar into a strongly equiva-
lent HPSG-style grammar (Yoshinaga and Miyao,
2001). Strong equivalence means that both gram-
mars generate exactly equivalent parse results,
and that we can share the LTAG grammars and
lexicons in HPSG applications. Our system can
reduce considerable workload to develop a huge
resource (grammars and lexicons) from scratch.
Our concern is, however, not limited to the
sharing of grammars and lexicons. Strongly
equivalent grammars enable the sharing of
ideas developed in each formalism. There
have been many studies on parsing tech-
niques (Poller and Becker, 1998; Flickinger et
al., 2000), ones on disambiguation models (Chi-
ang, 2000; Kanayama et al., 2000), and ones
on programming/grammar-development environ-
</bodyText>
<footnote confidence="0.9801555">
1In this paper, we use the term LTAG to refer to FB-
LTAG, if not confusing.
</footnote>
<figureCaption confidence="0.999909">
Figure 1: The RenTAL System: Overview
</figureCaption>
<bodyText confidence="0.9998585">
ment (Sarkar and Wintner, 1999; Doran et al.,
2000; Makino et al., 1998). These works are re-
stricted to each closed community, and the rela-
tion between them is not well discussed. Investi-
gating the relation will be apparently valuable for
both communities.
In this paper, we show that the strongly equiv-
alent grammars enable the sharing of “parsing
techniques”, which are dependent on each com-
putational framework and have never been shared
among HPSG and LTAG communities. We ap-
ply our system to the latest version of the XTAG
English grammar (The XTAG Research Group,
2001), which is a large-scale FB-LTAG gram-
mar. A parsing experiment shows that an efficient
HPSG parser with the obtained grammar achieved
a significant speed-up against an existing LTAG
parser (Yoshinaga et al., 2001). This result im-
plies that parsing techniques for HPSG are also
beneficial for LTAG parsing. We can say that the
grammar conversion enables us to share HPSG
parsing techniques in LTAG parsing.
Figure 1 depicts a brief sketch of the RenTAL
system. The system consists of the following four
modules: Tree converter, Type hierarchy extrac-
tor, Lexicon converter and Derivation translator.
The tree converter module is a core module of the
system, which is an implementation of the gram-
mar conversion algorithm given in Section 3. The
type hierarchy extractor module extracts the sym-
bols of the node, features, and feature values from
the LTAG elementary tree templates and lexicon,
and construct the type hierarchy from them. The
lexicon converter module converts LTAG elemen-
tary tree templates into HPSG lexical entries. The
derivation translator module takes HPSG parse
</bodyText>
<figureCaption confidence="0.994823">
Figure 2: Elementary trees
</figureCaption>
<bodyText confidence="0.9999544375">
trees, and map them to LTAG derivation trees. All
modules other than the last one are related to the
conversion process from LTAG into HPSG, and
the last one enables to obtain LTAG analysis from
the obtained HPSG analysis.
Tateisi et al. also translated LTAG into
HPSG (Tateisi et al., 1998). However, their
method depended on translator’s intuitive analy-
sis of the original grammar. Thus the transla-
tion was manual and grammar dependent. The
manual translation demanded considerable efforts
from the translator, and obscures the equiva-
lence between the original and obtained gram-
mars. Other works (Kasper et al., 1995; Becker
and Lopez, 2000) convert HPSG grammars into
LTAG grammars. However, given the greater ex-
pressive power of HPSG, it is impossible to con-
vert an arbitrary HPSG grammar into an LTAG
grammar. Therefore, a conversion from HPSG
into LTAG often requires some restrictions on the
HPSG grammar to suppress its generative capac-
ity. Thus, the conversion loses the equivalence of
the grammars, and we cannot gain the above ad-
vantages.
Section 2 reviews the source and the tar-
get grammar formalisms of the conversion algo-
rithm. Section 3 describes the conversion algo-
rithm which the core module in the RenTAL sys-
tem uses. Section 4 presents the evaluation of
the RenTAL system through experiments with the
XTAG English grammar. Section 5 concludes this
study and addresses future works.
</bodyText>
<sectionHeader confidence="0.996504" genericHeader="introduction">
2 Background
</sectionHeader>
<subsectionHeader confidence="0.960426">
2.1 Feature-Based Lexicalized Tree
Adjoining Grammar (FB-LTAG)
</subsectionHeader>
<bodyText confidence="0.984981666666667">
LTAG (Schabes et al., 1988) is a grammar formal-
ism that provides syntactic analyses for a sentence
by composing elementary trees with two opera-
</bodyText>
<figureCaption confidence="0.945065">
Figure 6: Parsing with an HPSG grammar
</figureCaption>
<equation confidence="0.992404333333333">
Arg :
Arg : NP
Sym : NP
Arg :
Sym : VP
Arg : VP
Sym : VP
Arg : NP
we can run
</equation>
<figureCaption confidence="0.9999735">
Figure 3: Substitution
Figure 4: Adjunction
</figureCaption>
<bodyText confidence="0.999752727272728">
tions called substitution and adjunction. Elemen-
tary trees are classified into two types, initial trees
and auxiliary trees (Figure 2). An elementary tree
has at least one leaf node labeled with a terminal
symbol called an anchor (marked with o). In an
auxiliary tree, one leaf node is labeled with the
same symbol as the root node and is specially
marked as afoot node (marked with *). In an el-
ementary tree, leaf nodes with the exception of
anchors and the foot node are called substitution
nodes (marked with , ).
Substitution replaces a substitution node with
another initial tree (Figure 3). Adjunction grafts
an auxiliary tree with the root node and foot
node labeled x onto an internal node of another
tree with the same symbol x (Figure 4). FB-
LTAG (Vijay-Shanker, 1987; Vijay-Shanker and
Joshi, 1988) is an extension of the LTAG formal-
ism. In FB-LTAG, each node in the elementary
trees has a feature structure, containing grammat-
ical constraints on the node. Figure 5 shows a
result of LTAG analysis, which is described not
</bodyText>
<figureCaption confidence="0.995172">
Figure 5: Derived trees and derivation trees
</figureCaption>
<bodyText confidence="0.914378466666667">
only by derived trees (i.e., parse trees) but also by
derivation trees. A derivation tree is a structural
description in LTAG and represents the history of
combinations of elementary trees.
There are several grammars developed in the
FB-LTAG formalism, including the XTAG En-
glish grammar, a large-scale grammar for En-
glish (The XTAG Research Group, 2001). The
XTAG group (Doran et al., 2000) at the Univer-
sity of Pennsylvania is also developing Korean,
Chinese, and Hindi grammars. Development of
a large-scale French grammar (Abeill´e and Can-
dito, 2000) has also started at the University of
Pennsylvania and is expanded at University of
Paris 7.
</bodyText>
<subsectionHeader confidence="0.997353">
2.2 Head-Driven Phrase Structure
Grammar (HPSG)
</subsectionHeader>
<bodyText confidence="0.999983083333333">
An HPSG grammar consists of lexical entries and
ID grammar rules, each of which is described
with typed feature structures (Carpenter, 1992). A
lexical entry for each word expresses the charac-
teristics of the word, such as the subcategorization
frame and the grammatical category. An ID gram-
mar rule represents a relation between a mother
and its daughters, and is independent of lexical
characteristics. Figure 6 illustrates an example of
bottom-up parsing with an HPSG grammar. First,
lexical entries for “can” and “run” are unified re-
spectively with the daughter feature structures of
</bodyText>
<figure confidence="0.330071">
Canonical elementary trees Non-canonical elementary trees
</figure>
<figureCaption confidence="0.999729">
Figure 7: A canonical elementary tree and exceptions
</figureCaption>
<bodyText confidence="0.999940894736842">
an ID grammar rule. The feature structure of the
mother node is determined as a result of these uni-
fications. The center of Figure 6 shows a rule ap-
plication to “can run” and “we”.
There are a variety of works on efficient pars-
ing with HPSG, which allow the use of HPSG-
based processing in practical application con-
texts (Flickinger et al., 2000). Stanford Univer-
sity is developing the English Resource Gram-
mar, an HPSG grammar for English, as a part
of the Linguistic Grammars Online (LinGO)
project (Flickinger, 2000). In practical con-
text, German, English, and Japanese HPSG-based
grammars are developed and used in the Verb-
mobil project (Kay et al., 1994). Our group
has developed a wide-coverage HPSG grammar
for Japanese (Mitsuishi et al., 1998), which is
used in a high-accuracy Japanese dependency an-
alyzer (Kanayama et al., 2000).
</bodyText>
<sectionHeader confidence="0.987436" genericHeader="method">
3 Grammar conversion
</sectionHeader>
<bodyText confidence="0.99805725">
The grammar conversion from LTAG to
HPSG (Yoshinaga and Miyao, 2001) is the
core portion of the RenTAL system. The
conversion algorithm consists of:
</bodyText>
<listItem confidence="0.9890385">
1. Conversion of canonical elementary trees to
HPSG lexical entries.
2. Definition of ID grammar rules to emulate
substitution and adjunction.
3. Conversion of non-canonical elementary
trees to canonical ones.
</listItem>
<bodyText confidence="0.966911">
The left-hand side of Figure 7 shows a canoni-
cal elementary tree, which satisfies the following
conditions:
</bodyText>
<figureCaption confidence="0.821926333333333">
Condition 1 A tree must have only one anchor.
Figure 8: A conversion from a canonical elemen-
tary tree into an HPSG lexical entry
</figureCaption>
<equation confidence="0.849409285714286">
mother
rSym
L :
Arg :
� � ����
�
� � �
</equation>
<table confidence="0.842054333333333">
Sym : 1
Arg : Leaf : 3 351
2)
Dir : eft
Foot? :
trunk node
</table>
<figureCaption confidence="0.994742">
Figure 9: Left substitution rule
</figureCaption>
<bodyText confidence="0.995495823529412">
Condition 2 All branchings in a tree must con-
tain trunk nodes.
Trunk nodes are nodes on a trunk, which is a path
from an anchor to the root node (the thick lines in
Figure 7) (Kasper et al., 1995). Condition 1 guar-
antees that a canonical elementary tree has only
one trunk, and Condition 2 guarantees that each
branching consists of a trunk node, a leaf node,
and their mother (also a trunk node). The right-
hand side of Figure 7 shows elementary trees vi-
olating the conditions.
Canonical elementary trees can be directly con-
verted to HPSG lexical entries by regarding each
leaf node as a subcategorization element of the
anchor, and by encoding them into a list. Fig-
ure 8 shows an example of the conversion. By
following the trunk from the anchor “think” to the
</bodyText>
<figure confidence="0.8367147">
i
1
2
I
�Sym : 3
Arg :
substitution node
35
mother
Sym :
Arg :
� �
� �
� �
� �
1
4ftJ 1 2 +35
le
+
foot node trunk node
</figure>
<figureCaption confidence="0.990509">
Figure 10: Left adjunction rule
</figureCaption>
<bodyText confidence="0.975541605263158">
root node labeled S, we store each branching in
a list. As shown in Figure 8, each branching is
specified by a leaf node and the mother node. A
feature Sym represents the non-terminal symbol
of the mother node. Features Leaf, Dir, Foot?
represent the leaf node; the non-terminal symbol,
the direction (on which side of the trunk node the
leaf node is), and the type (whether a foot node or
a substitution node), respectively.
Figures 9 and 10 show ID grammar rules to em-
ulate substitution and adjunction. These grammar
rules are independent of the original grammar be-
cause they don’t specify any characteristics spe-
cific to the original grammar.
In the substitution rule, the Sym feature of the
substitution node must have the value of the Leaf
feature 3 of the trunk node. The Arg feature of
the substitution node must be a null list, because
the substitution node must be unified only with
the node corresponding to the root node of the ini-
tial tree. The substitution rule percolates the tail
elements 2 of the Arg feature of a trunk node to
the mother in order to continue constructing the
tree.
In the adjunction rule, the Sym feature of a
foot node must have the same value as the Leaf
feature 4 . The value of the Arg feature of the
mother node is a concatenation list of both Arg
features 2 and 3 of its daughters because we
first construct the tree corresponding to the ad-
joining tree and next continue constructing the
tree corresponding to the adjoined tree. The value
“+” or “—” of the Foot? feature explicitly de-
termines whether the next rule application is the
adjunction rule or the substitution rule.
Figure 11 shows an instance of rule applica-
tions. The thick line indicates the adjoined tree
(a1) and the dashed line indicates the adjoining
</bodyText>
<figureCaption confidence="0.998809">
Figure 11: An example of rule applications
Figure 12: Division of a multi-anchored elemen-
tary tree into single-anchored trees
</figureCaption>
<bodyText confidence="0.992101681818182">
tree ()2). The adjunction rule is applied to con-
struct the branching marked with *, where “think”
takes as an argument a node whose Sym feature’s
value is S. By applying the adjunction rule, the
Arg feature of the mother node (B) becomes a
concatenation list of both Arg features of )1 ( 8 )
and a1 ( 5 ). Note that when the construction of
)1 is completed, the Arg feature of the trunk node
(C) will be its former state (A). We can continue
constructing a1 as if nothing had happened.
Multi-anchored elementary trees, which violate
Condition 1, are divided into multiple canonical
elementary trees. We call the cutting nodes in the
divided trees cut-off nodes (Figure 12). Note that
a cut-off node is marked by an identifier to pre-
serve a co-occurrence relation among the multiple
anchors. Figure 12 shows an example of the con-
version of a multi-anchored elementary tree for a
compound expression “look for”. We first select
an anchor “look” as the syntactic head, and tra-
verse the tree along the trunk from the root node
S to the anchor “look”. We then cut off the multi-
</bodyText>
<figure confidence="0.996932461538462">
3i
1 ff) append
2 ff)
Sym
Arg : :
Leaf :
Dir :
Foot? :
1
Sym :
Arg :
4
3
</figure>
<figureCaption confidence="0.999986">
Figure 13: Combination of a non-anchored subtree into anchored trees
</figureCaption>
<bodyText confidence="0.969534189655172">
anchored elementary tree at the node PP, and cut-
off nodes PP in resulting single-anchored trees are
marked by an identifier look for.
Non-canonical elementary trees violating Con-
dition 2 have a non-anchored subtree which is
a subtree of depth 1 or above with no anchor.
A non-anchored subtree is converted into multi-
anchored trees by substituting the deepest node
(Figure 13). Substituted nodes are marked as
breaking points to remember that the nodes orig-
inate from the substitution nodes. In the resulting
trees, all subtrees are anchored so that we can ap-
ply the above conversion algorithms. Figure 13
shows a conversion of a non-canonical elemen-
tary tree for it-cleft. A substitution node P in the
non-anchored subtree is selected, and is substi-
tuted by each initial tree. The substituted node
P in resulting multi-anchored trees are marked as
breaking points.
The above algorithm gives the conversion of
LTAG, and it can be easily extended to handle an
FB-LTAG grammar by merely storing a feature
structure of each node into the Sym feature and
Leaf feature together with the non-terminal sym-
bol. Feature structure unification is executed by
ID grammar rules.
The strong equivalence is assured because only
substitution/adjunction operations performed in
LTAG are performed with the obtained HPSG-
style grammar. This is because each element
in the Arg feature selects only feature structures
corresponding to trees which can substitute/be
adjoined by each leaf node of an elementary
tree. By following a history of rule applications,
each combination of elementary trees in LTAG
derivation trees can be readily recovered. The
strong equivalence holds also for conversion of
non-canonical elementary trees. For trees violat-
ing Condition 1, we can distinguish the cut-off
Table 1: The classification of elementary tree
templates in the XTAG English grammar (LTAG)
and converted lexical entry templates correspond-
ing to them (HPSG): A: canonical elementary
trees, 13: elementary trees violating only Condi-
tion 1, C: elementary trees violating only Condi-
tion 2, D: elementary trees violating both condi-
tions
Grammar A 8 C D Total
LTAG 326 764 54 50 1,194
HPSG 326 1,992 1,083 2,474 5,875
nodes from the substitution nodes owing to iden-
tifiers, which recover the co-occurrence relation
in the original elementary trees between the di-
vided trees. For trees violating Condition 2, we
can identify substitution nodes in a combined tree
because they are marked as breaking points, and
we can consider the combined tree as two trees in
the LTAG derivation.
</bodyText>
<sectionHeader confidence="0.998656" genericHeader="evaluation">
4 Experiments
</sectionHeader>
<bodyText confidence="0.998839666666667">
The RenTAL system is implemented in LiL-
FeS (Makino et al., 1998)2. LiLFeS is one of
the fastest inference engines for processing fea-
ture structure logic, and efficient HPSG parsers
have already been built on this system (Nishida
et al., 1999; Torisawa et al., 2000). We ap-
plied our system to the XTAG English gram-
mar (The XTAG Research Group, 2001)3, which
is a large-scale FB-LTAG grammar for English.
</bodyText>
<footnote confidence="0.990223666666667">
2The RenTAL system is available at:
http://www-tsujii.is.s.u-tokyo.ac.jp/rental/
3We used the grammar attached to the latest distribution
of an LTAG parser which we used for the parsing experi-
ment. The parser is available at:
ftp://ftp.cis.upenn.edu/pub/xtag/lem/lem-0.13.0.i686.tgz
</footnote>
<tableCaption confidence="0.9854205">
Table 2: Parsing performance with the XTAG En-
glish grammar for the ATIS corpus.
</tableCaption>
<table confidence="0.848095666666667">
Parser Parse Time (sec.)
lem 19.64
TNT 0.77
</table>
<bodyText confidence="0.997888314285714">
The XTAG English grammar consists of 1,1944
elementary tree templates and around 45,000 lex-
ical items5. We successfully converted all the
elementary tree templates in the XTAG English
grammar to HPSG lexical entry templates. Ta-
ble 1 shows the classifications of elementary tree
templates of the XTAG English grammar, ac-
cording to the conditions we introduced in Sec-
tion 3, and also shows the number of correspond-
ing HPSG lexical entry templates. Conversion
took about 25 minutes CPU time on a 700 Mhz
Pentium III Xeon with four gigabytes main mem-
ory.
The original and the obtained grammar gener-
ated exactly the same number of derivation trees
in the parsing experiment with 457 sentences
from the ATIS corpus (Marcus et al., 1994)6 (the
average length is 6.32 words). This result empir-
ically attested the strong equivalence of our algo-
rithm.
Table 2 shows the average parsing time with
the LTAG and HPSG parsers. In Table 2, lem
refers to the LTAG parser (Sarkar et al., 2000),
ANSI C implementation of the two-phase pars-
ing algorithm that performs the head corner pars-
ing (van Noord, 1994) without features (phase
1), and then executes feature unification (phase
2). TNT refers to the HPSG parser (Torisawa et
al., 2000), C++ implementation of the two-phase
parsing algorithm that performs filtering with a
compiled CFG (phase 1) and then executes fea-
ture unification (phase 2). Table 2 clearly shows
that the HPSG parser is significantly faster than
the LTAG parser. This result implies that parsing
techniques for HPSG are also beneficial for LTAG
</bodyText>
<footnote confidence="0.990967">
4We eliminated 32 elementary trees because the LTAG
parser cannot produce correct derivation trees with them.
5These lexical items are a subset of the original XTAG
English grammar distribution.
6We eliminated 59 sentences because of a time-out of
the parsers, and 61 sentences because the LTAG parser does
not produce correct derivation trees because of bugs in its
preprocessor.
</footnote>
<bodyText confidence="0.9980144">
parsing. We can say that the grammar conversion
enables us to share HPSG parsing techniques in
LTAG parsing. Another paper (Yoshinaga et al.,
2001) describes the detailed analysis on the factor
of the difference of parsing performance.
</bodyText>
<sectionHeader confidence="0.997706" genericHeader="conclusions">
5 Conclusion
</sectionHeader>
<bodyText confidence="0.999979304347826">
We described the RenTAL system, a grammar
converter from FB-LTAG to HPSG. The grammar
conversion guarantees the strong equivalence, and
hence we can obtain an HPSG-style grammar
equivalent to existing LTAG grammars. Experi-
mental result showed that the system enabled to
share not only LTAG grammars, but also HPSG
parsing techniques. This system will enable a
variety of resource sharing such as the sharing
of the programming/grammar-development envi-
ronment (Makino et al., 1998; Sarkar and Wint-
ner, 1999) and grammar extraction methods from
bracketed corpora (Xia, 1999; Chen and Vijay-
Shanker, 2000; Neumann, 1998). Although our
system connects only FB-LTAG and HPSG, we
believe that our approach can be extended to other
formalisms such as Lexical-Functional Gram-
mar (Kaplan and Bresnan, 1982).
Acknowledgment The authors are indebted
to Mr. Anoop Sarkar for his help in using his
parser in our experiment. The authors would like
to thank anonymous reviewers for their valuable
comments and criticisms on this paper.
</bodyText>
<sectionHeader confidence="0.997874" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.996663857142857">
Anne Abeill´e and Marie-H´el`ene Candito. 2000.
FTAG: A Lexicalized Tree Adjoining Grammar for
French. In Anne Abeill´e and Owen Rambow, edi-
tors, Tree Adjoining Grammars: Formal, Computa-
tional and Linguistic Aspects, pages 305–329. CSLI
publications.
Tilman Becker and Patrice Lopez. 2000. Adapting
HPSG-to-TAG compilation to wide-coverage gram-
mars. In Proc. of TAG+5, pages 47–54.
Bob Carpenter. 1992. The Logic of Typed Feature
Structures. Cambridge University Press.
John Chen and K. Vijay-Shanker. 2000. Automated
extraction of TAGs from the Penn Treebank. In
Proc. ofIWPT 2000.
</reference>
<note confidence="0.880316571428571">
David Chiang. 2000. Statistical parsing with an
automatically-extracted Tree Adjoining Grammar.
In Proc. ofACL 2000, pages 456–463.
Kenji Nishida, Kentaro Torisawa, and Jun’ichi Tsujii.
1999. An efficient HPSG parsing algorithm with ar-
ray unification. In Proc. ofNLPRS ’99, pages 144–
149.
</note>
<reference confidence="0.999302462365591">
Christy Doran, Beth Ann Hockey, Anoop Sarkar,
B. Srinivas, and Fei Xia. 2000. Evolution of the
XTAG system. In Anne Abeill´e and Owen Ram-
bow, editors, Tree Adjoining Grammars: Formal,
Computational and Linguistic Aspects, pages 371–
403. CSLI publications.
Dan Flickinger, Stephen Oepen, Jun’ichi Tsujii, and
Hans Uszkoreit, editors. 2000. Natural Language
Engineering – Special Issue on Efficient Processing
with HPSG: Methods, Systems, Evaluation. Cam-
bridge University Press.
Dan Flickinger. 2000. On building a more effi-
cient grammar by exploiting types. Natural Lan-
guage Engineering – Special Issue on Efficient Pro-
cessing with HPSG: Methods, Systems, Evaluation,
6(1):15–28.
Hiroshi Kanayama, Kentaro Torisawa, Yutaka Mitsu-
isi, and Jun’ichi Tsujii. 2000. Hybrid Japanese
parser with hand-crafted grammar and statistics. In
Proc. of COLING 2000, pages 411–417.
Ronald Kaplan and Joan Bresnan. 1982. Lexical-
Functional Grammar: A formal system for gram-
matical representation. In Joan Bresnan, editor, The
Mental Representation of Grammatical Relations,
pages 173–281. The MIT Press.
Robert Kasper, Bernd Kiefer, Klaus Netter, and
K. Vijay-Shanker. 1995. Compilation of HPSG to
TAG. In Proc. ofACL ’94, pages 92–99.
M. Kay, J. Gawron, and P. Norvig. 1994. Verbmo-
bil: A Translation System for Face-to-Face Dialog.
CSLI Publications.
Takaki Makino, Minoru Yoshida, Kentaro Torisawa,
and Jun’ichi Tsujii. 1998. LiLFeS — towards a
practical HPSG parsers. In Proc. of COLING–ACL
’98, pages 807–811.
Mitchell Marcus, Beatrice Santorini, and Mary Ann
Marcinkiewicz. 1994. Building a large annotated
corpus of English: the Penn Treebank. Computa-
tional Linguistics, 19(2):313–330.
Yutaka Mitsuishi, Kentaro Torisawa, and Jun’ichi Tsu-
jii. 1998. HPSG-style underspecified Japanese
grammar with wide coverage. In Proc. of
COLING–ACL ’98, pages 876–880.
G¨uter Neumann. 1998. Automatic extraction of
stochastic lexcalized tree grammars from treebanks.
In Proc. of TAG+4, pages 120–123.
Carl Pollard and Ivan A. Sag. 1994. Head-Driven
Phrase Structure Grammar. University of Chicago
Press and CSLI Publications.
Peter Poller and Tilman Becker. 1998. Two-step TAG
parsing revisited. In Proc. of TAG+4, pages 143–
146.
Anoop Sarkar and Shuly Wintner. 1999. Typing as a
means for validating feature structures. In Proc.of
CLIN ’99, pages 159–167.
Anoop Sarkar, Fei Xia, and Aravind Joshi. 2000.
Some experiments on indicators of parsing com-
plexity for lexicalized grammars. In Proc. of COL-
ING 2000, pages 37–42.
Yves Schabes, Anne Abeille, and Aravind K. Joshi.
1988. Parsing strategies with ‘lexicalized’ gram-
mars: Application to Tree Adjoining Grammars. In
Proc. of 12th COLING ’92, pages 578–583.
Yuka Tateisi, Kentaro Torisawa, Yusuke Miyao, and
Jun’ichi Tsujii. 1998. Translating the XTAG En-
glish grammar to HPSG. In Proc. of TAG+4, pages
172–175.
The XTAG Research Group. 2001. A Lex-
icalized Tree Adjoining Grammar for English.
http://www.cis.upenn.edu/˜xtag/.
Kentaro Torisawa, Kenji Nishida, Yusuke Miyao, and
Jun’ichi Tsujii. 2000. An HPSG parser with CFG
filtering. Natural Language Engineering – Special
Issue on Efficient Processing with HPSG: Methods,
Systems, Evaluation, 6(1):63–80.
Gertjan van Noord. 1994. Head corner parsing for
TAG. Computational Intelligence, 10(4):525–534.
K. Vijay-Shanker and Aravind K. Joshi. 1988. Fea-
ture structures based Tree Adjoining Grammars. In
Proc. of 12th COLING ’92, pages 714–719.
K. Vijay-Shanker. 1987. A Study of Tree Adjoining
Grammars. Ph.D. thesis, Department of Computer
&amp; Information Science, University of Pennsylvania.
Fei Xia. 1999. Extracting Tree Adjoining Grammars
from bracketed corpora. In Proc. of NLPRS ’99,
pages 398–403.
Naoki Yoshinaga and Yusuke Miyao. 2001. Grammar
conversion from FB-LTAG to HPSG. In Proc. of
ESSLLI 2001 Student Session. To appear.
Naoki Yoshinaga, Yusuke Miyao, Kentaro Torisawa,
and Jun’ichi Tsujii. 2001. Efficient LTAG parsing
using HPSG parsers. In Proc. of PACLING 2001.
To appear.
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.279560">
<title confidence="0.9745865">Resource sharing among HPSG and LTAG by a method of grammar conversion from FB-LTAG to HPSG</title>
<author confidence="0.996696">Naoki Yoshinaga Yusuke Miyao</author>
<affiliation confidence="0.999887">Department of Information Science, Graduate school of Science, University of Tokyo</affiliation>
<address confidence="0.933861">Hongo 7-3-1, Bunkyo-ku, Tokyo, 113-0033, Japan</address>
<author confidence="0.948061">Kentaro Torisawa</author>
<affiliation confidence="0.990793">School of Information Science, Japan Advanced Institute of Science and</affiliation>
<address confidence="0.602823">Asahidai 1-1, Tatsunokuchi-cho, Noumi-gun, Ishikawa, 923-1292,</address>
<affiliation confidence="0.596614">Information and Human Behavior, PRESTO, Japan Science and Technology</affiliation>
<address confidence="0.862547">Kawaguchi Hon-cho 4-1-8, Kawaguchi-shi, Saitama, 332-0012,</address>
<email confidence="0.971664">torisawa@jaist.ac.jp</email>
<author confidence="0.989589">Jun’ichi Tsujii</author>
<affiliation confidence="0.999444">Department of Computer Science, Graduate school of Information Science and Technology, University of</affiliation>
<address confidence="0.90302">Hongo 7-3-1, Bunkyo-ku, Tokyo, 113-0033,</address>
<affiliation confidence="0.882249">CREST, JST (Japan Science and Technology</affiliation>
<address confidence="0.993914">Kawaguchi Hon-cho 4-1-8, Kawaguchi-shi, Saitama, 332-0012,</address>
<email confidence="0.987749">tsujii@is.s.u-tokyo.ac.jp</email>
<abstract confidence="0.9996385625">paper describes RenTAL syswhich enables sharing resources in LTAG and HPSG formalisms by a method of grammar conversion from an FB-LTAG grammar to a strongly equivalent HPSG-style grammar. The system is applied to the latest version of the XTAG English grammar. Experimental results show that the obtained HPSG-style grammar successfully worked with an HPSG parser, and achieved a drastic speed-up against an LTAG parser. This system enables to share not only grammars and lexicons but also parsing techniques.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Anne Abeill´e</author>
<author>Marie-H´el`ene Candito</author>
</authors>
<title>FTAG: A Lexicalized Tree Adjoining Grammar for French.</title>
<date>2000</date>
<booktitle>In Anne Abeill´e and Owen Rambow, editors, Tree Adjoining Grammars: Formal, Computational and Linguistic Aspects,</booktitle>
<pages>305--329</pages>
<publisher>CSLI publications.</publisher>
<marker>Abeill´e, Candito, 2000</marker>
<rawString>Anne Abeill´e and Marie-H´el`ene Candito. 2000. FTAG: A Lexicalized Tree Adjoining Grammar for French. In Anne Abeill´e and Owen Rambow, editors, Tree Adjoining Grammars: Formal, Computational and Linguistic Aspects, pages 305–329. CSLI publications.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Tilman Becker</author>
<author>Patrice Lopez</author>
</authors>
<title>Adapting HPSG-to-TAG compilation to wide-coverage grammars.</title>
<date>2000</date>
<booktitle>In Proc. of TAG+5,</booktitle>
<pages>47--54</pages>
<contexts>
<context position="5045" citStr="Becker and Lopez, 2000" startWordPosition="760" endWordPosition="763">to LTAG derivation trees. All modules other than the last one are related to the conversion process from LTAG into HPSG, and the last one enables to obtain LTAG analysis from the obtained HPSG analysis. Tateisi et al. also translated LTAG into HPSG (Tateisi et al., 1998). However, their method depended on translator’s intuitive analysis of the original grammar. Thus the translation was manual and grammar dependent. The manual translation demanded considerable efforts from the translator, and obscures the equivalence between the original and obtained grammars. Other works (Kasper et al., 1995; Becker and Lopez, 2000) convert HPSG grammars into LTAG grammars. However, given the greater expressive power of HPSG, it is impossible to convert an arbitrary HPSG grammar into an LTAG grammar. Therefore, a conversion from HPSG into LTAG often requires some restrictions on the HPSG grammar to suppress its generative capacity. Thus, the conversion loses the equivalence of the grammars, and we cannot gain the above advantages. Section 2 reviews the source and the target grammar formalisms of the conversion algorithm. Section 3 describes the conversion algorithm which the core module in the RenTAL system uses. Section</context>
</contexts>
<marker>Becker, Lopez, 2000</marker>
<rawString>Tilman Becker and Patrice Lopez. 2000. Adapting HPSG-to-TAG compilation to wide-coverage grammars. In Proc. of TAG+5, pages 47–54.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Bob Carpenter</author>
</authors>
<title>The Logic of Typed Feature Structures.</title>
<date>1992</date>
<publisher>Cambridge University Press.</publisher>
<contexts>
<context position="8095" citStr="Carpenter, 1992" startWordPosition="1274" endWordPosition="1275">eloped in the FB-LTAG formalism, including the XTAG English grammar, a large-scale grammar for English (The XTAG Research Group, 2001). The XTAG group (Doran et al., 2000) at the University of Pennsylvania is also developing Korean, Chinese, and Hindi grammars. Development of a large-scale French grammar (Abeill´e and Candito, 2000) has also started at the University of Pennsylvania and is expanded at University of Paris 7. 2.2 Head-Driven Phrase Structure Grammar (HPSG) An HPSG grammar consists of lexical entries and ID grammar rules, each of which is described with typed feature structures (Carpenter, 1992). A lexical entry for each word expresses the characteristics of the word, such as the subcategorization frame and the grammatical category. An ID grammar rule represents a relation between a mother and its daughters, and is independent of lexical characteristics. Figure 6 illustrates an example of bottom-up parsing with an HPSG grammar. First, lexical entries for “can” and “run” are unified respectively with the daughter feature structures of Canonical elementary trees Non-canonical elementary trees Figure 7: A canonical elementary tree and exceptions an ID grammar rule. The feature structure</context>
</contexts>
<marker>Carpenter, 1992</marker>
<rawString>Bob Carpenter. 1992. The Logic of Typed Feature Structures. Cambridge University Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>John Chen</author>
<author>K Vijay-Shanker</author>
</authors>
<title>Automated extraction of TAGs from the Penn Treebank.</title>
<date>2000</date>
<booktitle>In Proc. ofIWPT</booktitle>
<marker>Chen, Vijay-Shanker, 2000</marker>
<rawString>John Chen and K. Vijay-Shanker. 2000. Automated extraction of TAGs from the Penn Treebank. In Proc. ofIWPT 2000.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Christy Doran</author>
<author>Beth Ann Hockey</author>
<author>Anoop Sarkar</author>
<author>B Srinivas</author>
<author>Fei Xia</author>
</authors>
<title>Evolution of the XTAG system.</title>
<date>2000</date>
<booktitle>In Anne Abeill´e and Owen Rambow, editors, Tree Adjoining Grammars: Formal, Computational and Linguistic Aspects,</booktitle>
<pages>371--403</pages>
<publisher>CSLI publications.</publisher>
<contexts>
<context position="2769" citStr="Doran et al., 2000" startWordPosition="393" endWordPosition="396">ad to develop a huge resource (grammars and lexicons) from scratch. Our concern is, however, not limited to the sharing of grammars and lexicons. Strongly equivalent grammars enable the sharing of ideas developed in each formalism. There have been many studies on parsing techniques (Poller and Becker, 1998; Flickinger et al., 2000), ones on disambiguation models (Chiang, 2000; Kanayama et al., 2000), and ones on programming/grammar-development environ1In this paper, we use the term LTAG to refer to FBLTAG, if not confusing. Figure 1: The RenTAL System: Overview ment (Sarkar and Wintner, 1999; Doran et al., 2000; Makino et al., 1998). These works are restricted to each closed community, and the relation between them is not well discussed. Investigating the relation will be apparently valuable for both communities. In this paper, we show that the strongly equivalent grammars enable the sharing of “parsing techniques”, which are dependent on each computational framework and have never been shared among HPSG and LTAG communities. We apply our system to the latest version of the XTAG English grammar (The XTAG Research Group, 2001), which is a large-scale FB-LTAG grammar. A parsing experiment shows that a</context>
<context position="7650" citStr="Doran et al., 2000" startWordPosition="1203" endWordPosition="1206">n FB-LTAG, each node in the elementary trees has a feature structure, containing grammatical constraints on the node. Figure 5 shows a result of LTAG analysis, which is described not Figure 5: Derived trees and derivation trees only by derived trees (i.e., parse trees) but also by derivation trees. A derivation tree is a structural description in LTAG and represents the history of combinations of elementary trees. There are several grammars developed in the FB-LTAG formalism, including the XTAG English grammar, a large-scale grammar for English (The XTAG Research Group, 2001). The XTAG group (Doran et al., 2000) at the University of Pennsylvania is also developing Korean, Chinese, and Hindi grammars. Development of a large-scale French grammar (Abeill´e and Candito, 2000) has also started at the University of Pennsylvania and is expanded at University of Paris 7. 2.2 Head-Driven Phrase Structure Grammar (HPSG) An HPSG grammar consists of lexical entries and ID grammar rules, each of which is described with typed feature structures (Carpenter, 1992). A lexical entry for each word expresses the characteristics of the word, such as the subcategorization frame and the grammatical category. An ID grammar </context>
</contexts>
<marker>Doran, Hockey, Sarkar, Srinivas, Xia, 2000</marker>
<rawString>Christy Doran, Beth Ann Hockey, Anoop Sarkar, B. Srinivas, and Fei Xia. 2000. Evolution of the XTAG system. In Anne Abeill´e and Owen Rambow, editors, Tree Adjoining Grammars: Formal, Computational and Linguistic Aspects, pages 371– 403. CSLI publications.</rawString>
</citation>
<citation valid="true">
<date>2000</date>
<booktitle>Natural Language Engineering – Special Issue on Efficient Processing with HPSG: Methods, Systems, Evaluation.</booktitle>
<editor>Dan Flickinger, Stephen Oepen, Jun’ichi Tsujii, and Hans Uszkoreit, editors.</editor>
<publisher>Cambridge University Press.</publisher>
<marker>2000</marker>
<rawString>Dan Flickinger, Stephen Oepen, Jun’ichi Tsujii, and Hans Uszkoreit, editors. 2000. Natural Language Engineering – Special Issue on Efficient Processing with HPSG: Methods, Systems, Evaluation. Cambridge University Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Dan Flickinger</author>
</authors>
<title>On building a more efficient grammar by exploiting types.</title>
<date>2000</date>
<journal>Natural Language Engineering – Special Issue on Efficient Processing with HPSG: Methods, Systems, Evaluation,</journal>
<volume>6</volume>
<issue>1</issue>
<contexts>
<context position="9172" citStr="Flickinger, 2000" startWordPosition="1450" endWordPosition="1451">ementary trees Non-canonical elementary trees Figure 7: A canonical elementary tree and exceptions an ID grammar rule. The feature structure of the mother node is determined as a result of these unifications. The center of Figure 6 shows a rule application to “can run” and “we”. There are a variety of works on efficient parsing with HPSG, which allow the use of HPSGbased processing in practical application contexts (Flickinger et al., 2000). Stanford University is developing the English Resource Grammar, an HPSG grammar for English, as a part of the Linguistic Grammars Online (LinGO) project (Flickinger, 2000). In practical context, German, English, and Japanese HPSG-based grammars are developed and used in the Verbmobil project (Kay et al., 1994). Our group has developed a wide-coverage HPSG grammar for Japanese (Mitsuishi et al., 1998), which is used in a high-accuracy Japanese dependency analyzer (Kanayama et al., 2000). 3 Grammar conversion The grammar conversion from LTAG to HPSG (Yoshinaga and Miyao, 2001) is the core portion of the RenTAL system. The conversion algorithm consists of: 1. Conversion of canonical elementary trees to HPSG lexical entries. 2. Definition of ID grammar rules to emu</context>
</contexts>
<marker>Flickinger, 2000</marker>
<rawString>Dan Flickinger. 2000. On building a more efficient grammar by exploiting types. Natural Language Engineering – Special Issue on Efficient Processing with HPSG: Methods, Systems, Evaluation, 6(1):15–28.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hiroshi Kanayama</author>
<author>Kentaro Torisawa</author>
<author>Yutaka Mitsuisi</author>
<author>Jun’ichi Tsujii</author>
</authors>
<title>Hybrid Japanese parser with hand-crafted grammar and statistics.</title>
<date>2000</date>
<booktitle>In Proc. of COLING</booktitle>
<pages>411--417</pages>
<contexts>
<context position="2553" citStr="Kanayama et al., 2000" startWordPosition="357" endWordPosition="360">nd Miyao, 2001). Strong equivalence means that both grammars generate exactly equivalent parse results, and that we can share the LTAG grammars and lexicons in HPSG applications. Our system can reduce considerable workload to develop a huge resource (grammars and lexicons) from scratch. Our concern is, however, not limited to the sharing of grammars and lexicons. Strongly equivalent grammars enable the sharing of ideas developed in each formalism. There have been many studies on parsing techniques (Poller and Becker, 1998; Flickinger et al., 2000), ones on disambiguation models (Chiang, 2000; Kanayama et al., 2000), and ones on programming/grammar-development environ1In this paper, we use the term LTAG to refer to FBLTAG, if not confusing. Figure 1: The RenTAL System: Overview ment (Sarkar and Wintner, 1999; Doran et al., 2000; Makino et al., 1998). These works are restricted to each closed community, and the relation between them is not well discussed. Investigating the relation will be apparently valuable for both communities. In this paper, we show that the strongly equivalent grammars enable the sharing of “parsing techniques”, which are dependent on each computational framework and have never been </context>
<context position="9491" citStr="Kanayama et al., 2000" startWordPosition="1499" endWordPosition="1502">ficient parsing with HPSG, which allow the use of HPSGbased processing in practical application contexts (Flickinger et al., 2000). Stanford University is developing the English Resource Grammar, an HPSG grammar for English, as a part of the Linguistic Grammars Online (LinGO) project (Flickinger, 2000). In practical context, German, English, and Japanese HPSG-based grammars are developed and used in the Verbmobil project (Kay et al., 1994). Our group has developed a wide-coverage HPSG grammar for Japanese (Mitsuishi et al., 1998), which is used in a high-accuracy Japanese dependency analyzer (Kanayama et al., 2000). 3 Grammar conversion The grammar conversion from LTAG to HPSG (Yoshinaga and Miyao, 2001) is the core portion of the RenTAL system. The conversion algorithm consists of: 1. Conversion of canonical elementary trees to HPSG lexical entries. 2. Definition of ID grammar rules to emulate substitution and adjunction. 3. Conversion of non-canonical elementary trees to canonical ones. The left-hand side of Figure 7 shows a canonical elementary tree, which satisfies the following conditions: Condition 1 A tree must have only one anchor. Figure 8: A conversion from a canonical elementary tree into an </context>
</contexts>
<marker>Kanayama, Torisawa, Mitsuisi, Tsujii, 2000</marker>
<rawString>Hiroshi Kanayama, Kentaro Torisawa, Yutaka Mitsuisi, and Jun’ichi Tsujii. 2000. Hybrid Japanese parser with hand-crafted grammar and statistics. In Proc. of COLING 2000, pages 411–417.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ronald Kaplan</author>
<author>Joan Bresnan</author>
</authors>
<title>LexicalFunctional Grammar: A formal system for grammatical representation.</title>
<date>1982</date>
<booktitle>The Mental Representation of Grammatical Relations,</booktitle>
<pages>173--281</pages>
<editor>In Joan Bresnan, editor,</editor>
<publisher>The MIT Press.</publisher>
<marker>Kaplan, Bresnan, 1982</marker>
<rawString>Ronald Kaplan and Joan Bresnan. 1982. LexicalFunctional Grammar: A formal system for grammatical representation. In Joan Bresnan, editor, The Mental Representation of Grammatical Relations, pages 173–281. The MIT Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Robert Kasper</author>
<author>Bernd Kiefer</author>
<author>Klaus Netter</author>
<author>K Vijay-Shanker</author>
</authors>
<date>1995</date>
<booktitle>Compilation of HPSG to TAG. In Proc. ofACL ’94,</booktitle>
<pages>92--99</pages>
<contexts>
<context position="5020" citStr="Kasper et al., 1995" startWordPosition="756" endWordPosition="759"> trees, and map them to LTAG derivation trees. All modules other than the last one are related to the conversion process from LTAG into HPSG, and the last one enables to obtain LTAG analysis from the obtained HPSG analysis. Tateisi et al. also translated LTAG into HPSG (Tateisi et al., 1998). However, their method depended on translator’s intuitive analysis of the original grammar. Thus the translation was manual and grammar dependent. The manual translation demanded considerable efforts from the translator, and obscures the equivalence between the original and obtained grammars. Other works (Kasper et al., 1995; Becker and Lopez, 2000) convert HPSG grammars into LTAG grammars. However, given the greater expressive power of HPSG, it is impossible to convert an arbitrary HPSG grammar into an LTAG grammar. Therefore, a conversion from HPSG into LTAG often requires some restrictions on the HPSG grammar to suppress its generative capacity. Thus, the conversion loses the equivalence of the grammars, and we cannot gain the above advantages. Section 2 reviews the source and the target grammar formalisms of the conversion algorithm. Section 3 describes the conversion algorithm which the core module in the Re</context>
<context position="10437" citStr="Kasper et al., 1995" startWordPosition="1672" endWordPosition="1675">on of non-canonical elementary trees to canonical ones. The left-hand side of Figure 7 shows a canonical elementary tree, which satisfies the following conditions: Condition 1 A tree must have only one anchor. Figure 8: A conversion from a canonical elementary tree into an HPSG lexical entry mother rSym L : Arg : � � ���� � � � � Sym : 1 Arg : Leaf : 3 351 2) Dir : eft Foot? : trunk node Figure 9: Left substitution rule Condition 2 All branchings in a tree must contain trunk nodes. Trunk nodes are nodes on a trunk, which is a path from an anchor to the root node (the thick lines in Figure 7) (Kasper et al., 1995). Condition 1 guarantees that a canonical elementary tree has only one trunk, and Condition 2 guarantees that each branching consists of a trunk node, a leaf node, and their mother (also a trunk node). The righthand side of Figure 7 shows elementary trees violating the conditions. Canonical elementary trees can be directly converted to HPSG lexical entries by regarding each leaf node as a subcategorization element of the anchor, and by encoding them into a list. Figure 8 shows an example of the conversion. By following the trunk from the anchor “think” to the i 1 2 I �Sym : 3 Arg : substitutio</context>
</contexts>
<marker>Kasper, Kiefer, Netter, Vijay-Shanker, 1995</marker>
<rawString>Robert Kasper, Bernd Kiefer, Klaus Netter, and K. Vijay-Shanker. 1995. Compilation of HPSG to TAG. In Proc. ofACL ’94, pages 92–99.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Kay</author>
<author>J Gawron</author>
<author>P Norvig</author>
</authors>
<title>Verbmobil: A Translation System for Face-to-Face Dialog.</title>
<date>1994</date>
<publisher>CSLI Publications.</publisher>
<contexts>
<context position="9312" citStr="Kay et al., 1994" startWordPosition="1471" endWordPosition="1474"> of the mother node is determined as a result of these unifications. The center of Figure 6 shows a rule application to “can run” and “we”. There are a variety of works on efficient parsing with HPSG, which allow the use of HPSGbased processing in practical application contexts (Flickinger et al., 2000). Stanford University is developing the English Resource Grammar, an HPSG grammar for English, as a part of the Linguistic Grammars Online (LinGO) project (Flickinger, 2000). In practical context, German, English, and Japanese HPSG-based grammars are developed and used in the Verbmobil project (Kay et al., 1994). Our group has developed a wide-coverage HPSG grammar for Japanese (Mitsuishi et al., 1998), which is used in a high-accuracy Japanese dependency analyzer (Kanayama et al., 2000). 3 Grammar conversion The grammar conversion from LTAG to HPSG (Yoshinaga and Miyao, 2001) is the core portion of the RenTAL system. The conversion algorithm consists of: 1. Conversion of canonical elementary trees to HPSG lexical entries. 2. Definition of ID grammar rules to emulate substitution and adjunction. 3. Conversion of non-canonical elementary trees to canonical ones. The left-hand side of Figure 7 shows a </context>
</contexts>
<marker>Kay, Gawron, Norvig, 1994</marker>
<rawString>M. Kay, J. Gawron, and P. Norvig. 1994. Verbmobil: A Translation System for Face-to-Face Dialog. CSLI Publications.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Takaki Makino</author>
<author>Minoru Yoshida</author>
<author>Kentaro Torisawa</author>
<author>Jun’ichi Tsujii</author>
</authors>
<title>LiLFeS — towards a practical HPSG parsers.</title>
<date>1998</date>
<booktitle>In Proc. of COLING–ACL ’98,</booktitle>
<pages>807--811</pages>
<contexts>
<context position="2791" citStr="Makino et al., 1998" startWordPosition="397" endWordPosition="400"> resource (grammars and lexicons) from scratch. Our concern is, however, not limited to the sharing of grammars and lexicons. Strongly equivalent grammars enable the sharing of ideas developed in each formalism. There have been many studies on parsing techniques (Poller and Becker, 1998; Flickinger et al., 2000), ones on disambiguation models (Chiang, 2000; Kanayama et al., 2000), and ones on programming/grammar-development environ1In this paper, we use the term LTAG to refer to FBLTAG, if not confusing. Figure 1: The RenTAL System: Overview ment (Sarkar and Wintner, 1999; Doran et al., 2000; Makino et al., 1998). These works are restricted to each closed community, and the relation between them is not well discussed. Investigating the relation will be apparently valuable for both communities. In this paper, we show that the strongly equivalent grammars enable the sharing of “parsing techniques”, which are dependent on each computational framework and have never been shared among HPSG and LTAG communities. We apply our system to the latest version of the XTAG English grammar (The XTAG Research Group, 2001), which is a large-scale FB-LTAG grammar. A parsing experiment shows that an efficient HPSG parse</context>
<context position="16882" citStr="Makino et al., 1998" startWordPosition="2793" endWordPosition="2796">n 1, C: elementary trees violating only Condition 2, D: elementary trees violating both conditions Grammar A 8 C D Total LTAG 326 764 54 50 1,194 HPSG 326 1,992 1,083 2,474 5,875 nodes from the substitution nodes owing to identifiers, which recover the co-occurrence relation in the original elementary trees between the divided trees. For trees violating Condition 2, we can identify substitution nodes in a combined tree because they are marked as breaking points, and we can consider the combined tree as two trees in the LTAG derivation. 4 Experiments The RenTAL system is implemented in LiLFeS (Makino et al., 1998)2. LiLFeS is one of the fastest inference engines for processing feature structure logic, and efficient HPSG parsers have already been built on this system (Nishida et al., 1999; Torisawa et al., 2000). We applied our system to the XTAG English grammar (The XTAG Research Group, 2001)3, which is a large-scale FB-LTAG grammar for English. 2The RenTAL system is available at: http://www-tsujii.is.s.u-tokyo.ac.jp/rental/ 3We used the grammar attached to the latest distribution of an LTAG parser which we used for the parsing experiment. The parser is available at: ftp://ftp.cis.upenn.edu/pub/xtag/le</context>
</contexts>
<marker>Makino, Yoshida, Torisawa, Tsujii, 1998</marker>
<rawString>Takaki Makino, Minoru Yoshida, Kentaro Torisawa, and Jun’ichi Tsujii. 1998. LiLFeS — towards a practical HPSG parsers. In Proc. of COLING–ACL ’98, pages 807–811.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mitchell Marcus</author>
<author>Beatrice Santorini</author>
<author>Mary Ann Marcinkiewicz</author>
</authors>
<title>Building a large annotated corpus of English: the Penn Treebank. Computational Linguistics,</title>
<date>1994</date>
<contexts>
<context position="18358" citStr="Marcus et al., 1994" startWordPosition="3028" endWordPosition="3031">cessfully converted all the elementary tree templates in the XTAG English grammar to HPSG lexical entry templates. Table 1 shows the classifications of elementary tree templates of the XTAG English grammar, according to the conditions we introduced in Section 3, and also shows the number of corresponding HPSG lexical entry templates. Conversion took about 25 minutes CPU time on a 700 Mhz Pentium III Xeon with four gigabytes main memory. The original and the obtained grammar generated exactly the same number of derivation trees in the parsing experiment with 457 sentences from the ATIS corpus (Marcus et al., 1994)6 (the average length is 6.32 words). This result empirically attested the strong equivalence of our algorithm. Table 2 shows the average parsing time with the LTAG and HPSG parsers. In Table 2, lem refers to the LTAG parser (Sarkar et al., 2000), ANSI C implementation of the two-phase parsing algorithm that performs the head corner parsing (van Noord, 1994) without features (phase 1), and then executes feature unification (phase 2). TNT refers to the HPSG parser (Torisawa et al., 2000), C++ implementation of the two-phase parsing algorithm that performs filtering with a compiled CFG (phase 1)</context>
</contexts>
<marker>Marcus, Santorini, Marcinkiewicz, 1994</marker>
<rawString>Mitchell Marcus, Beatrice Santorini, and Mary Ann Marcinkiewicz. 1994. Building a large annotated corpus of English: the Penn Treebank. Computational Linguistics, 19(2):313–330.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yutaka Mitsuishi</author>
<author>Kentaro Torisawa</author>
<author>Jun’ichi Tsujii</author>
</authors>
<title>HPSG-style underspecified Japanese grammar with wide coverage.</title>
<date>1998</date>
<booktitle>In Proc. of COLING–ACL ’98,</booktitle>
<pages>876--880</pages>
<contexts>
<context position="9404" citStr="Mitsuishi et al., 1998" startWordPosition="1485" endWordPosition="1488">ure 6 shows a rule application to “can run” and “we”. There are a variety of works on efficient parsing with HPSG, which allow the use of HPSGbased processing in practical application contexts (Flickinger et al., 2000). Stanford University is developing the English Resource Grammar, an HPSG grammar for English, as a part of the Linguistic Grammars Online (LinGO) project (Flickinger, 2000). In practical context, German, English, and Japanese HPSG-based grammars are developed and used in the Verbmobil project (Kay et al., 1994). Our group has developed a wide-coverage HPSG grammar for Japanese (Mitsuishi et al., 1998), which is used in a high-accuracy Japanese dependency analyzer (Kanayama et al., 2000). 3 Grammar conversion The grammar conversion from LTAG to HPSG (Yoshinaga and Miyao, 2001) is the core portion of the RenTAL system. The conversion algorithm consists of: 1. Conversion of canonical elementary trees to HPSG lexical entries. 2. Definition of ID grammar rules to emulate substitution and adjunction. 3. Conversion of non-canonical elementary trees to canonical ones. The left-hand side of Figure 7 shows a canonical elementary tree, which satisfies the following conditions: Condition 1 A tree must</context>
</contexts>
<marker>Mitsuishi, Torisawa, Tsujii, 1998</marker>
<rawString>Yutaka Mitsuishi, Kentaro Torisawa, and Jun’ichi Tsujii. 1998. HPSG-style underspecified Japanese grammar with wide coverage. In Proc. of COLING–ACL ’98, pages 876–880.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G¨uter Neumann</author>
</authors>
<title>Automatic extraction of stochastic lexcalized tree grammars from treebanks.</title>
<date>1998</date>
<booktitle>In Proc. of TAG+4,</booktitle>
<pages>120--123</pages>
<marker>Neumann, 1998</marker>
<rawString>G¨uter Neumann. 1998. Automatic extraction of stochastic lexcalized tree grammars from treebanks. In Proc. of TAG+4, pages 120–123.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Carl Pollard</author>
<author>Ivan A Sag</author>
</authors>
<title>Head-Driven Phrase Structure Grammar.</title>
<date>1994</date>
<publisher>University of Chicago Press and CSLI Publications.</publisher>
<contexts>
<context position="1777" citStr="Pollard and Sag, 1994" startWordPosition="237" endWordPosition="240">rammar. The system is applied to the latest version of the XTAG English grammar. Experimental results show that the obtained HPSG-style grammar successfully worked with an HPSG parser, and achieved a drastic speed-up against an LTAG parser. This system enables to share not only grammars and lexicons but also parsing techniques. 1 Introduction This paper describes an approach for sharing resources in various grammar formalisms such as Feature-Based Lexicalized Tree Adjoining Grammar (FB-LTAG1) (Vijay-Shanker, 1987; Vijay-Shanker and Joshi, 1988) and Head-Driven Phrase Structure Grammar (HPSG) (Pollard and Sag, 1994) by a method of grammar conversion. The RenTAL system automatically converts an FB-LTAG grammar into a strongly equivalent HPSG-style grammar (Yoshinaga and Miyao, 2001). Strong equivalence means that both grammars generate exactly equivalent parse results, and that we can share the LTAG grammars and lexicons in HPSG applications. Our system can reduce considerable workload to develop a huge resource (grammars and lexicons) from scratch. Our concern is, however, not limited to the sharing of grammars and lexicons. Strongly equivalent grammars enable the sharing of ideas developed in each forma</context>
</contexts>
<marker>Pollard, Sag, 1994</marker>
<rawString>Carl Pollard and Ivan A. Sag. 1994. Head-Driven Phrase Structure Grammar. University of Chicago Press and CSLI Publications.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Peter Poller</author>
<author>Tilman Becker</author>
</authors>
<title>Two-step TAG parsing revisited.</title>
<date>1998</date>
<booktitle>In Proc. of TAG+4,</booktitle>
<pages>143--146</pages>
<contexts>
<context position="2458" citStr="Poller and Becker, 1998" startWordPosition="342" endWordPosition="345">matically converts an FB-LTAG grammar into a strongly equivalent HPSG-style grammar (Yoshinaga and Miyao, 2001). Strong equivalence means that both grammars generate exactly equivalent parse results, and that we can share the LTAG grammars and lexicons in HPSG applications. Our system can reduce considerable workload to develop a huge resource (grammars and lexicons) from scratch. Our concern is, however, not limited to the sharing of grammars and lexicons. Strongly equivalent grammars enable the sharing of ideas developed in each formalism. There have been many studies on parsing techniques (Poller and Becker, 1998; Flickinger et al., 2000), ones on disambiguation models (Chiang, 2000; Kanayama et al., 2000), and ones on programming/grammar-development environ1In this paper, we use the term LTAG to refer to FBLTAG, if not confusing. Figure 1: The RenTAL System: Overview ment (Sarkar and Wintner, 1999; Doran et al., 2000; Makino et al., 1998). These works are restricted to each closed community, and the relation between them is not well discussed. Investigating the relation will be apparently valuable for both communities. In this paper, we show that the strongly equivalent grammars enable the sharing of</context>
</contexts>
<marker>Poller, Becker, 1998</marker>
<rawString>Peter Poller and Tilman Becker. 1998. Two-step TAG parsing revisited. In Proc. of TAG+4, pages 143– 146.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Anoop Sarkar</author>
<author>Shuly Wintner</author>
</authors>
<title>Typing as a means for validating feature structures.</title>
<date>1999</date>
<booktitle>In Proc.of CLIN ’99,</booktitle>
<pages>159--167</pages>
<contexts>
<context position="2749" citStr="Sarkar and Wintner, 1999" startWordPosition="389" endWordPosition="392">reduce considerable workload to develop a huge resource (grammars and lexicons) from scratch. Our concern is, however, not limited to the sharing of grammars and lexicons. Strongly equivalent grammars enable the sharing of ideas developed in each formalism. There have been many studies on parsing techniques (Poller and Becker, 1998; Flickinger et al., 2000), ones on disambiguation models (Chiang, 2000; Kanayama et al., 2000), and ones on programming/grammar-development environ1In this paper, we use the term LTAG to refer to FBLTAG, if not confusing. Figure 1: The RenTAL System: Overview ment (Sarkar and Wintner, 1999; Doran et al., 2000; Makino et al., 1998). These works are restricted to each closed community, and the relation between them is not well discussed. Investigating the relation will be apparently valuable for both communities. In this paper, we show that the strongly equivalent grammars enable the sharing of “parsing techniques”, which are dependent on each computational framework and have never been shared among HPSG and LTAG communities. We apply our system to the latest version of the XTAG English grammar (The XTAG Research Group, 2001), which is a large-scale FB-LTAG grammar. A parsing exp</context>
</contexts>
<marker>Sarkar, Wintner, 1999</marker>
<rawString>Anoop Sarkar and Shuly Wintner. 1999. Typing as a means for validating feature structures. In Proc.of CLIN ’99, pages 159–167.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Anoop Sarkar</author>
<author>Fei Xia</author>
<author>Aravind Joshi</author>
</authors>
<title>Some experiments on indicators of parsing complexity for lexicalized grammars.</title>
<date>2000</date>
<booktitle>In Proc. of COLING</booktitle>
<pages>37--42</pages>
<contexts>
<context position="18604" citStr="Sarkar et al., 2000" startWordPosition="3072" endWordPosition="3075">ed in Section 3, and also shows the number of corresponding HPSG lexical entry templates. Conversion took about 25 minutes CPU time on a 700 Mhz Pentium III Xeon with four gigabytes main memory. The original and the obtained grammar generated exactly the same number of derivation trees in the parsing experiment with 457 sentences from the ATIS corpus (Marcus et al., 1994)6 (the average length is 6.32 words). This result empirically attested the strong equivalence of our algorithm. Table 2 shows the average parsing time with the LTAG and HPSG parsers. In Table 2, lem refers to the LTAG parser (Sarkar et al., 2000), ANSI C implementation of the two-phase parsing algorithm that performs the head corner parsing (van Noord, 1994) without features (phase 1), and then executes feature unification (phase 2). TNT refers to the HPSG parser (Torisawa et al., 2000), C++ implementation of the two-phase parsing algorithm that performs filtering with a compiled CFG (phase 1) and then executes feature unification (phase 2). Table 2 clearly shows that the HPSG parser is significantly faster than the LTAG parser. This result implies that parsing techniques for HPSG are also beneficial for LTAG 4We eliminated 32 element</context>
</contexts>
<marker>Sarkar, Xia, Joshi, 2000</marker>
<rawString>Anoop Sarkar, Fei Xia, and Aravind Joshi. 2000. Some experiments on indicators of parsing complexity for lexicalized grammars. In Proc. of COLING 2000, pages 37–42.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yves Schabes</author>
<author>Anne Abeille</author>
<author>Aravind K Joshi</author>
</authors>
<title>Parsing strategies with ‘lexicalized’ grammars: Application to Tree Adjoining Grammars.</title>
<date>1988</date>
<booktitle>In Proc. of 12th COLING ’92,</booktitle>
<pages>578--583</pages>
<contexts>
<context position="5906" citStr="Schabes et al., 1988" startWordPosition="899" endWordPosition="902">rictions on the HPSG grammar to suppress its generative capacity. Thus, the conversion loses the equivalence of the grammars, and we cannot gain the above advantages. Section 2 reviews the source and the target grammar formalisms of the conversion algorithm. Section 3 describes the conversion algorithm which the core module in the RenTAL system uses. Section 4 presents the evaluation of the RenTAL system through experiments with the XTAG English grammar. Section 5 concludes this study and addresses future works. 2 Background 2.1 Feature-Based Lexicalized Tree Adjoining Grammar (FB-LTAG) LTAG (Schabes et al., 1988) is a grammar formalism that provides syntactic analyses for a sentence by composing elementary trees with two operaFigure 6: Parsing with an HPSG grammar Arg : Arg : NP Sym : NP Arg : Sym : VP Arg : VP Sym : VP Arg : NP we can run Figure 3: Substitution Figure 4: Adjunction tions called substitution and adjunction. Elementary trees are classified into two types, initial trees and auxiliary trees (Figure 2). An elementary tree has at least one leaf node labeled with a terminal symbol called an anchor (marked with o). In an auxiliary tree, one leaf node is labeled with the same symbol as the ro</context>
</contexts>
<marker>Schabes, Abeille, Joshi, 1988</marker>
<rawString>Yves Schabes, Anne Abeille, and Aravind K. Joshi. 1988. Parsing strategies with ‘lexicalized’ grammars: Application to Tree Adjoining Grammars. In Proc. of 12th COLING ’92, pages 578–583.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yuka Tateisi</author>
<author>Kentaro Torisawa</author>
<author>Yusuke Miyao</author>
<author>Jun’ichi Tsujii</author>
</authors>
<title>Translating the XTAG English grammar to HPSG.</title>
<date>1998</date>
<booktitle>In Proc. of TAG+4,</booktitle>
<pages>172--175</pages>
<contexts>
<context position="4693" citStr="Tateisi et al., 1998" startWordPosition="707" endWordPosition="710">racts the symbols of the node, features, and feature values from the LTAG elementary tree templates and lexicon, and construct the type hierarchy from them. The lexicon converter module converts LTAG elementary tree templates into HPSG lexical entries. The derivation translator module takes HPSG parse Figure 2: Elementary trees trees, and map them to LTAG derivation trees. All modules other than the last one are related to the conversion process from LTAG into HPSG, and the last one enables to obtain LTAG analysis from the obtained HPSG analysis. Tateisi et al. also translated LTAG into HPSG (Tateisi et al., 1998). However, their method depended on translator’s intuitive analysis of the original grammar. Thus the translation was manual and grammar dependent. The manual translation demanded considerable efforts from the translator, and obscures the equivalence between the original and obtained grammars. Other works (Kasper et al., 1995; Becker and Lopez, 2000) convert HPSG grammars into LTAG grammars. However, given the greater expressive power of HPSG, it is impossible to convert an arbitrary HPSG grammar into an LTAG grammar. Therefore, a conversion from HPSG into LTAG often requires some restrictions</context>
</contexts>
<marker>Tateisi, Torisawa, Miyao, Tsujii, 1998</marker>
<rawString>Yuka Tateisi, Kentaro Torisawa, Yusuke Miyao, and Jun’ichi Tsujii. 1998. Translating the XTAG English grammar to HPSG. In Proc. of TAG+4, pages 172–175.</rawString>
</citation>
<citation valid="true">
<authors>
<author>The XTAG Research Group</author>
</authors>
<title>A Lexicalized Tree Adjoining Grammar for English.</title>
<date>2001</date>
<note>http://www.cis.upenn.edu/˜xtag/.</note>
<contexts>
<context position="3294" citStr="Group, 2001" startWordPosition="483" endWordPosition="484">igure 1: The RenTAL System: Overview ment (Sarkar and Wintner, 1999; Doran et al., 2000; Makino et al., 1998). These works are restricted to each closed community, and the relation between them is not well discussed. Investigating the relation will be apparently valuable for both communities. In this paper, we show that the strongly equivalent grammars enable the sharing of “parsing techniques”, which are dependent on each computational framework and have never been shared among HPSG and LTAG communities. We apply our system to the latest version of the XTAG English grammar (The XTAG Research Group, 2001), which is a large-scale FB-LTAG grammar. A parsing experiment shows that an efficient HPSG parser with the obtained grammar achieved a significant speed-up against an existing LTAG parser (Yoshinaga et al., 2001). This result implies that parsing techniques for HPSG are also beneficial for LTAG parsing. We can say that the grammar conversion enables us to share HPSG parsing techniques in LTAG parsing. Figure 1 depicts a brief sketch of the RenTAL system. The system consists of the following four modules: Tree converter, Type hierarchy extractor, Lexicon converter and Derivation translator. Th</context>
<context position="7613" citStr="Group, 2001" startWordPosition="1198" endWordPosition="1199">nsion of the LTAG formalism. In FB-LTAG, each node in the elementary trees has a feature structure, containing grammatical constraints on the node. Figure 5 shows a result of LTAG analysis, which is described not Figure 5: Derived trees and derivation trees only by derived trees (i.e., parse trees) but also by derivation trees. A derivation tree is a structural description in LTAG and represents the history of combinations of elementary trees. There are several grammars developed in the FB-LTAG formalism, including the XTAG English grammar, a large-scale grammar for English (The XTAG Research Group, 2001). The XTAG group (Doran et al., 2000) at the University of Pennsylvania is also developing Korean, Chinese, and Hindi grammars. Development of a large-scale French grammar (Abeill´e and Candito, 2000) has also started at the University of Pennsylvania and is expanded at University of Paris 7. 2.2 Head-Driven Phrase Structure Grammar (HPSG) An HPSG grammar consists of lexical entries and ID grammar rules, each of which is described with typed feature structures (Carpenter, 1992). A lexical entry for each word expresses the characteristics of the word, such as the subcategorization frame and the</context>
<context position="17166" citStr="Group, 2001" startWordPosition="2844" endWordPosition="2845">elementary trees between the divided trees. For trees violating Condition 2, we can identify substitution nodes in a combined tree because they are marked as breaking points, and we can consider the combined tree as two trees in the LTAG derivation. 4 Experiments The RenTAL system is implemented in LiLFeS (Makino et al., 1998)2. LiLFeS is one of the fastest inference engines for processing feature structure logic, and efficient HPSG parsers have already been built on this system (Nishida et al., 1999; Torisawa et al., 2000). We applied our system to the XTAG English grammar (The XTAG Research Group, 2001)3, which is a large-scale FB-LTAG grammar for English. 2The RenTAL system is available at: http://www-tsujii.is.s.u-tokyo.ac.jp/rental/ 3We used the grammar attached to the latest distribution of an LTAG parser which we used for the parsing experiment. The parser is available at: ftp://ftp.cis.upenn.edu/pub/xtag/lem/lem-0.13.0.i686.tgz Table 2: Parsing performance with the XTAG English grammar for the ATIS corpus. Parser Parse Time (sec.) lem 19.64 TNT 0.77 The XTAG English grammar consists of 1,1944 elementary tree templates and around 45,000 lexical items5. We successfully converted all the </context>
</contexts>
<marker>Group, 2001</marker>
<rawString>The XTAG Research Group. 2001. A Lexicalized Tree Adjoining Grammar for English. http://www.cis.upenn.edu/˜xtag/.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kentaro Torisawa</author>
<author>Kenji Nishida</author>
<author>Yusuke Miyao</author>
<author>Jun’ichi Tsujii</author>
</authors>
<title>An HPSG parser with CFG filtering.</title>
<date>2000</date>
<journal>Natural Language Engineering – Special Issue on Efficient Processing with HPSG: Methods, Systems, Evaluation,</journal>
<volume>6</volume>
<issue>1</issue>
<contexts>
<context position="17083" citStr="Torisawa et al., 2000" startWordPosition="2826" endWordPosition="2829">itution nodes owing to identifiers, which recover the co-occurrence relation in the original elementary trees between the divided trees. For trees violating Condition 2, we can identify substitution nodes in a combined tree because they are marked as breaking points, and we can consider the combined tree as two trees in the LTAG derivation. 4 Experiments The RenTAL system is implemented in LiLFeS (Makino et al., 1998)2. LiLFeS is one of the fastest inference engines for processing feature structure logic, and efficient HPSG parsers have already been built on this system (Nishida et al., 1999; Torisawa et al., 2000). We applied our system to the XTAG English grammar (The XTAG Research Group, 2001)3, which is a large-scale FB-LTAG grammar for English. 2The RenTAL system is available at: http://www-tsujii.is.s.u-tokyo.ac.jp/rental/ 3We used the grammar attached to the latest distribution of an LTAG parser which we used for the parsing experiment. The parser is available at: ftp://ftp.cis.upenn.edu/pub/xtag/lem/lem-0.13.0.i686.tgz Table 2: Parsing performance with the XTAG English grammar for the ATIS corpus. Parser Parse Time (sec.) lem 19.64 TNT 0.77 The XTAG English grammar consists of 1,1944 elementary </context>
<context position="18849" citStr="Torisawa et al., 2000" startWordPosition="3112" endWordPosition="3115">exactly the same number of derivation trees in the parsing experiment with 457 sentences from the ATIS corpus (Marcus et al., 1994)6 (the average length is 6.32 words). This result empirically attested the strong equivalence of our algorithm. Table 2 shows the average parsing time with the LTAG and HPSG parsers. In Table 2, lem refers to the LTAG parser (Sarkar et al., 2000), ANSI C implementation of the two-phase parsing algorithm that performs the head corner parsing (van Noord, 1994) without features (phase 1), and then executes feature unification (phase 2). TNT refers to the HPSG parser (Torisawa et al., 2000), C++ implementation of the two-phase parsing algorithm that performs filtering with a compiled CFG (phase 1) and then executes feature unification (phase 2). Table 2 clearly shows that the HPSG parser is significantly faster than the LTAG parser. This result implies that parsing techniques for HPSG are also beneficial for LTAG 4We eliminated 32 elementary trees because the LTAG parser cannot produce correct derivation trees with them. 5These lexical items are a subset of the original XTAG English grammar distribution. 6We eliminated 59 sentences because of a time-out of the parsers, and 61 se</context>
</contexts>
<marker>Torisawa, Nishida, Miyao, Tsujii, 2000</marker>
<rawString>Kentaro Torisawa, Kenji Nishida, Yusuke Miyao, and Jun’ichi Tsujii. 2000. An HPSG parser with CFG filtering. Natural Language Engineering – Special Issue on Efficient Processing with HPSG: Methods, Systems, Evaluation, 6(1):63–80.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Gertjan van Noord</author>
</authors>
<title>Head corner parsing for TAG.</title>
<date>1994</date>
<journal>Computational Intelligence,</journal>
<volume>10</volume>
<issue>4</issue>
<marker>van Noord, 1994</marker>
<rawString>Gertjan van Noord. 1994. Head corner parsing for TAG. Computational Intelligence, 10(4):525–534.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Vijay-Shanker</author>
<author>Aravind K Joshi</author>
</authors>
<title>Feature structures based Tree Adjoining Grammars.</title>
<date>1988</date>
<booktitle>In Proc. of 12th COLING ’92,</booktitle>
<pages>714--719</pages>
<contexts>
<context position="1705" citStr="Vijay-Shanker and Joshi, 1988" startWordPosition="227" endWordPosition="230">grammar conversion from an FB-LTAG grammar to a strongly equivalent HPSG-style grammar. The system is applied to the latest version of the XTAG English grammar. Experimental results show that the obtained HPSG-style grammar successfully worked with an HPSG parser, and achieved a drastic speed-up against an LTAG parser. This system enables to share not only grammars and lexicons but also parsing techniques. 1 Introduction This paper describes an approach for sharing resources in various grammar formalisms such as Feature-Based Lexicalized Tree Adjoining Grammar (FB-LTAG1) (Vijay-Shanker, 1987; Vijay-Shanker and Joshi, 1988) and Head-Driven Phrase Structure Grammar (HPSG) (Pollard and Sag, 1994) by a method of grammar conversion. The RenTAL system automatically converts an FB-LTAG grammar into a strongly equivalent HPSG-style grammar (Yoshinaga and Miyao, 2001). Strong equivalence means that both grammars generate exactly equivalent parse results, and that we can share the LTAG grammars and lexicons in HPSG applications. Our system can reduce considerable workload to develop a huge resource (grammars and lexicons) from scratch. Our concern is, however, not limited to the sharing of grammars and lexicons. Strongly</context>
<context position="6990" citStr="Vijay-Shanker and Joshi, 1988" startWordPosition="1094" endWordPosition="1097">ode labeled with a terminal symbol called an anchor (marked with o). In an auxiliary tree, one leaf node is labeled with the same symbol as the root node and is specially marked as afoot node (marked with *). In an elementary tree, leaf nodes with the exception of anchors and the foot node are called substitution nodes (marked with , ). Substitution replaces a substitution node with another initial tree (Figure 3). Adjunction grafts an auxiliary tree with the root node and foot node labeled x onto an internal node of another tree with the same symbol x (Figure 4). FBLTAG (Vijay-Shanker, 1987; Vijay-Shanker and Joshi, 1988) is an extension of the LTAG formalism. In FB-LTAG, each node in the elementary trees has a feature structure, containing grammatical constraints on the node. Figure 5 shows a result of LTAG analysis, which is described not Figure 5: Derived trees and derivation trees only by derived trees (i.e., parse trees) but also by derivation trees. A derivation tree is a structural description in LTAG and represents the history of combinations of elementary trees. There are several grammars developed in the FB-LTAG formalism, including the XTAG English grammar, a large-scale grammar for English (The XTA</context>
</contexts>
<marker>Vijay-Shanker, Joshi, 1988</marker>
<rawString>K. Vijay-Shanker and Aravind K. Joshi. 1988. Feature structures based Tree Adjoining Grammars. In Proc. of 12th COLING ’92, pages 714–719.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Vijay-Shanker</author>
</authors>
<title>A Study of Tree Adjoining Grammars.</title>
<date>1987</date>
<tech>Ph.D. thesis,</tech>
<institution>Department of Computer &amp; Information Science, University of Pennsylvania.</institution>
<contexts>
<context position="1673" citStr="Vijay-Shanker, 1987" startWordPosition="225" endWordPosition="226">lisms by a method of grammar conversion from an FB-LTAG grammar to a strongly equivalent HPSG-style grammar. The system is applied to the latest version of the XTAG English grammar. Experimental results show that the obtained HPSG-style grammar successfully worked with an HPSG parser, and achieved a drastic speed-up against an LTAG parser. This system enables to share not only grammars and lexicons but also parsing techniques. 1 Introduction This paper describes an approach for sharing resources in various grammar formalisms such as Feature-Based Lexicalized Tree Adjoining Grammar (FB-LTAG1) (Vijay-Shanker, 1987; Vijay-Shanker and Joshi, 1988) and Head-Driven Phrase Structure Grammar (HPSG) (Pollard and Sag, 1994) by a method of grammar conversion. The RenTAL system automatically converts an FB-LTAG grammar into a strongly equivalent HPSG-style grammar (Yoshinaga and Miyao, 2001). Strong equivalence means that both grammars generate exactly equivalent parse results, and that we can share the LTAG grammars and lexicons in HPSG applications. Our system can reduce considerable workload to develop a huge resource (grammars and lexicons) from scratch. Our concern is, however, not limited to the sharing of</context>
<context position="6958" citStr="Vijay-Shanker, 1987" startWordPosition="1092" endWordPosition="1093">s at least one leaf node labeled with a terminal symbol called an anchor (marked with o). In an auxiliary tree, one leaf node is labeled with the same symbol as the root node and is specially marked as afoot node (marked with *). In an elementary tree, leaf nodes with the exception of anchors and the foot node are called substitution nodes (marked with , ). Substitution replaces a substitution node with another initial tree (Figure 3). Adjunction grafts an auxiliary tree with the root node and foot node labeled x onto an internal node of another tree with the same symbol x (Figure 4). FBLTAG (Vijay-Shanker, 1987; Vijay-Shanker and Joshi, 1988) is an extension of the LTAG formalism. In FB-LTAG, each node in the elementary trees has a feature structure, containing grammatical constraints on the node. Figure 5 shows a result of LTAG analysis, which is described not Figure 5: Derived trees and derivation trees only by derived trees (i.e., parse trees) but also by derivation trees. A derivation tree is a structural description in LTAG and represents the history of combinations of elementary trees. There are several grammars developed in the FB-LTAG formalism, including the XTAG English grammar, a large-sc</context>
</contexts>
<marker>Vijay-Shanker, 1987</marker>
<rawString>K. Vijay-Shanker. 1987. A Study of Tree Adjoining Grammars. Ph.D. thesis, Department of Computer &amp; Information Science, University of Pennsylvania.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Fei Xia</author>
</authors>
<title>Extracting Tree Adjoining Grammars from bracketed corpora.</title>
<date>1999</date>
<booktitle>In Proc. of NLPRS ’99,</booktitle>
<pages>398--403</pages>
<marker>Xia, 1999</marker>
<rawString>Fei Xia. 1999. Extracting Tree Adjoining Grammars from bracketed corpora. In Proc. of NLPRS ’99, pages 398–403.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Naoki Yoshinaga</author>
<author>Yusuke Miyao</author>
</authors>
<title>Grammar conversion from FB-LTAG to HPSG.</title>
<date>2001</date>
<booktitle>In Proc. of ESSLLI</booktitle>
<note>Student Session. To appear.</note>
<contexts>
<context position="1946" citStr="Yoshinaga and Miyao, 2001" startWordPosition="263" endWordPosition="266">ith an HPSG parser, and achieved a drastic speed-up against an LTAG parser. This system enables to share not only grammars and lexicons but also parsing techniques. 1 Introduction This paper describes an approach for sharing resources in various grammar formalisms such as Feature-Based Lexicalized Tree Adjoining Grammar (FB-LTAG1) (Vijay-Shanker, 1987; Vijay-Shanker and Joshi, 1988) and Head-Driven Phrase Structure Grammar (HPSG) (Pollard and Sag, 1994) by a method of grammar conversion. The RenTAL system automatically converts an FB-LTAG grammar into a strongly equivalent HPSG-style grammar (Yoshinaga and Miyao, 2001). Strong equivalence means that both grammars generate exactly equivalent parse results, and that we can share the LTAG grammars and lexicons in HPSG applications. Our system can reduce considerable workload to develop a huge resource (grammars and lexicons) from scratch. Our concern is, however, not limited to the sharing of grammars and lexicons. Strongly equivalent grammars enable the sharing of ideas developed in each formalism. There have been many studies on parsing techniques (Poller and Becker, 1998; Flickinger et al., 2000), ones on disambiguation models (Chiang, 2000; Kanayama et al.</context>
<context position="9582" citStr="Yoshinaga and Miyao, 2001" startWordPosition="1513" endWordPosition="1516">lication contexts (Flickinger et al., 2000). Stanford University is developing the English Resource Grammar, an HPSG grammar for English, as a part of the Linguistic Grammars Online (LinGO) project (Flickinger, 2000). In practical context, German, English, and Japanese HPSG-based grammars are developed and used in the Verbmobil project (Kay et al., 1994). Our group has developed a wide-coverage HPSG grammar for Japanese (Mitsuishi et al., 1998), which is used in a high-accuracy Japanese dependency analyzer (Kanayama et al., 2000). 3 Grammar conversion The grammar conversion from LTAG to HPSG (Yoshinaga and Miyao, 2001) is the core portion of the RenTAL system. The conversion algorithm consists of: 1. Conversion of canonical elementary trees to HPSG lexical entries. 2. Definition of ID grammar rules to emulate substitution and adjunction. 3. Conversion of non-canonical elementary trees to canonical ones. The left-hand side of Figure 7 shows a canonical elementary tree, which satisfies the following conditions: Condition 1 A tree must have only one anchor. Figure 8: A conversion from a canonical elementary tree into an HPSG lexical entry mother rSym L : Arg : � � ���� � � � � Sym : 1 Arg : Leaf : 3 351 2) Dir</context>
</contexts>
<marker>Yoshinaga, Miyao, 2001</marker>
<rawString>Naoki Yoshinaga and Yusuke Miyao. 2001. Grammar conversion from FB-LTAG to HPSG. In Proc. of ESSLLI 2001 Student Session. To appear.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Naoki Yoshinaga</author>
<author>Yusuke Miyao</author>
<author>Kentaro Torisawa</author>
<author>Jun’ichi Tsujii</author>
</authors>
<title>Efficient LTAG parsing using HPSG parsers.</title>
<date>2001</date>
<booktitle>In Proc. of PACLING</booktitle>
<note>To appear.</note>
<contexts>
<context position="3507" citStr="Yoshinaga et al., 2001" startWordPosition="514" endWordPosition="517">ell discussed. Investigating the relation will be apparently valuable for both communities. In this paper, we show that the strongly equivalent grammars enable the sharing of “parsing techniques”, which are dependent on each computational framework and have never been shared among HPSG and LTAG communities. We apply our system to the latest version of the XTAG English grammar (The XTAG Research Group, 2001), which is a large-scale FB-LTAG grammar. A parsing experiment shows that an efficient HPSG parser with the obtained grammar achieved a significant speed-up against an existing LTAG parser (Yoshinaga et al., 2001). This result implies that parsing techniques for HPSG are also beneficial for LTAG parsing. We can say that the grammar conversion enables us to share HPSG parsing techniques in LTAG parsing. Figure 1 depicts a brief sketch of the RenTAL system. The system consists of the following four modules: Tree converter, Type hierarchy extractor, Lexicon converter and Derivation translator. The tree converter module is a core module of the system, which is an implementation of the grammar conversion algorithm given in Section 3. The type hierarchy extractor module extracts the symbols of the node, feat</context>
<context position="19707" citStr="Yoshinaga et al., 2001" startWordPosition="3247" endWordPosition="3250">LTAG parser. This result implies that parsing techniques for HPSG are also beneficial for LTAG 4We eliminated 32 elementary trees because the LTAG parser cannot produce correct derivation trees with them. 5These lexical items are a subset of the original XTAG English grammar distribution. 6We eliminated 59 sentences because of a time-out of the parsers, and 61 sentences because the LTAG parser does not produce correct derivation trees because of bugs in its preprocessor. parsing. We can say that the grammar conversion enables us to share HPSG parsing techniques in LTAG parsing. Another paper (Yoshinaga et al., 2001) describes the detailed analysis on the factor of the difference of parsing performance. 5 Conclusion We described the RenTAL system, a grammar converter from FB-LTAG to HPSG. The grammar conversion guarantees the strong equivalence, and hence we can obtain an HPSG-style grammar equivalent to existing LTAG grammars. Experimental result showed that the system enabled to share not only LTAG grammars, but also HPSG parsing techniques. This system will enable a variety of resource sharing such as the sharing of the programming/grammar-development environment (Makino et al., 1998; Sarkar and Wintne</context>
</contexts>
<marker>Yoshinaga, Miyao, Torisawa, Tsujii, 2001</marker>
<rawString>Naoki Yoshinaga, Yusuke Miyao, Kentaro Torisawa, and Jun’ichi Tsujii. 2001. Efficient LTAG parsing using HPSG parsers. In Proc. of PACLING 2001. To appear.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>