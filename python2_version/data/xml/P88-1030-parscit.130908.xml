<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<note confidence="0.709727333333333">
DEDUCTIVE PARSING WITH MULTIPLE LEVELS OF REPRESENTATION.*
Mark Johnson,
Brain and Cognitive Sciences, M.I.T.
</note>
<sectionHeader confidence="0.835719" genericHeader="abstract">
ABSTRACT
</sectionHeader>
<bodyText confidence="0.999970090909091">
This paper discusses a sequence of deductive
parsers, called PAD1 - PAD5, that utilize an
axiomatization of the principles and
parameters of GB theory, including a restricted
transformational component (Move-a). PAD2
uses an inference control strategy based on the
&apos;freeze&apos; predicate of Prolog-II, while PAD3 - 5
utilize the Unfold-Fold transformation to
transform the original axiomatization into a
form that functions as a recursive descent Prolog
parser for the fragment.
</bodyText>
<sectionHeader confidence="0.998561" genericHeader="introduction">
INTRODUCTION
</sectionHeader>
<bodyText confidence="0.999799944444445">
This paper reports on several deductive parsers
for a fragment of Chomsky&apos;s Government and
Binding theory (Chomsky 1981, 1986; Van
Riemsdijk and Williams 1984). These parsers
were constructed to illustrate the Parsing as
Deduction&apos; approach, which views a parser as
a specialized theorem-prover which uses
knowledge of a language (i.e. its grammar) as a
set of axioms from which information about the
utterances of that language (e.g. their
structural descriptions) can be deduced. This
approach directly inspired by the seminal
paper by Pereira and Warren (1983). Johnson
(1988a) motivates the Parsing as Deduction
approach in more detail than is possible here,
and Johnson (1988b) extends the techniques
presented in this paper to deal with a more
complex fragment.
</bodyText>
<note confidence="0.46520025">
Steven Abney, Bob Berwick, Nelson Correa,
Tim Hickey, Elizabeth Highleyman, Ewan Klein,
Peter Ludlow, Martin Kay, Fernando Pereira and
Whitman Richards all made helpful suggestions
</note>
<bodyText confidence="0.997944036363637">
regarding this work, although all responsibility for
errors remains my own. The research reported here
was supported by a grant by the Systems
Development Foundation to the Center for the
Study of Language and Information at Stanford
University and a Postdoctoral Fellowship awarded by
the Fairchild Foundation through the Brain and
Cognitive Sciences Department at MIT.
In this paper I describe a sequence of model
deductive parsers, called PAD1 - PAD5, for a
fragment of GB theory. These parsers are not
designed for practical application, but simply
to show that GB deductive parsers can actually
be built. These parsers take PF representations
as their input and produce LF representations as
their output. They differ from most extant GB
parsers in that they make explicit use of the
four levels of representation that GB attributes
to an utterance - namely D-structure, S-
structure, PF and LF - and the transformational
relationship that holds between them. A
&apos;grammar&apos; for these parsers consists entirely of
a set of parameter values that parameterize
the principles of GB theory - thus the parsers
described here can be regarded as &apos;principle-
based&apos; (Berwick 1987) - and the parsers&apos; top-
level internal structure transparently reflects
(some of) the principles of that theory; X&apos; and
O theory apply at D-structure, Case theory
applies at S-structure, Move-a is stated as a
relation between D- and S-structure, and LF-
movement relates S-structure and LF. In
particular, the constraints on S-structures that
result from the interaction of Move-a with
principles constraining D-structure (i.e. X&apos; and
O theories) are used constructively throughout
the parsing process.
The PAD parsers are designed to directly
mirror the deductive structure of GB theory.
Intuitively, it seems that deductive parsers
should be able to mirror theories with a rich
internal deductive structure; these parsers show
that to a first approximation this is in fact the
case. For example, the PAD parsers have no
direct specification of a &apos;rule&apos; of Passive, rather
they deduce the relevant properties of the
Passive construction from the interaction of 0
theory, Move-a, and Case theory.
It must be stressed that the PAD parsers are
only &apos;model&apos; parsers. The fragment of English
they accept could only be called &apos;restricted&apos;.
They have no account of WH-movement, and
Move-a is restricted to apply to lexical
categories, for example, and they incorporate
none of the principles of Bounding Theory.
</bodyText>
<page confidence="0.99563">
241
</page>
<bodyText confidence="0.983227785714285">
However, the techniques used to construct these
parsers are general, and they should extend to a
more substantial fragment.
A SKETCH OF GB THEORY
In the remainder of this section I sketch the
aspects of GB theory relevant to the discussion
below; for more detail the reader should consult
one of the standard texts (e.g. Van Riemsdijk
and Williams 1986). GB theory posits four
distinct representations of an utterance, D-
structure, S-structure, PF and LF. To a first
approximation, D-structure represents
configurationally the thematic or predicate-
argument structure of the utterance, S-structure
represents the utterance&apos;s surface constituent
structure, PF represents its phonetic form, and
LF (&amp;quot;Logical Form&amp;quot;) is a configurational
representation of the scopal relationships
between the quantificational elements present
in the utterance. The PF and LF representations
constitute the interface between language and
other cognitive systems external to the
language module (Chomsky 1986, p. 68). For
example, the PF representation &amp;quot;Everybody is
loved&amp;quot; together with the D-structure, 5-
structure and LF representations shown in
Figure 1 might constitute a well-formed
quadruple for English.
</bodyText>
<figure confidence="0.25105975">
INFL&amp;quot; INFL&amp;quot;
/ INFL&apos; / NFL&apos;
NP zNvp NP zNvp
I INFL ,••■
NFL, ‘ everybody ie ■Npi
13e V NP
lo;ed everybody lo;red e
S-structure
xmr INFL&amp;quot;
&amp;quot;&amp;quot; NINFL&apos;
NP ■
everybody
IKin-
-■ip
ie V NPI
LF lo■red e
</figure>
<figureCaption confidence="0.997358">
Figure 1: Representations of GB Theory.
</figureCaption>
<bodyText confidence="0.99996925">
In order for such a quadruple to be well-formed
it must satisfy all of the principles of grammar;
e.g. the D-structure and S-structure must be
related by Move-a, the D-structure must satisfy
X&apos;-theory and 0-theory, etc. This is shown
schematically in Figure 2, where the shaded
rounded boxes indicate the four levels of
representation, the boxes indicate relations
that must hold simultaneously between pairs of
structures, and the ellipses designate properties
that must hold of a single structure. This
diagram is based on the organization of GB
theory sketched by Van Riemsdijk and
Williams (1986, p. 310), and represents the
organization of principles and structures
incorporated in the parsers discussed below.
</bodyText>
<figureCaption confidence="0.994149">
Figure 2: (Some of) The Principles of GB
</figureCaption>
<bodyText confidence="0.975486125">
Theory.
The principles of grammar are parameterized;
the set of structures they admit depends on the
value of these parameters. These principles
are hypothesised to be innate (and hence
universally true of all human languages, thus
they are often called &apos;Universal Grammar&apos;), so
the extra knowledge that a human requires in
order to know a language consists entirely of the
values (or settings) of the parameters plus the
lexicon for the language concerned. The syntax
of the English fragment accepted by the parsers
discussed below is completely specified by the
following list of parameters. The first two
parameters determine the X&apos; component, the
third parameter determines the Move-a
relation, and the fourth parameter identifies
the direction of Case assignment.
(1) headFirst.
specFirst.
movesInSyntax(np).
rightwardCaseAssigrunent.
I conclude this section with some brief remarks
on the computational problems involved in
constructing a GB parser. It seems that one can
only construct a practical GB parser by
simultaneously using constraints from all of the
principles of grammar mentioned above
(excepting LF-Movement), but this involves
being able to &apos;invert&apos; Move-a &apos;on the fly&apos;.
Because of the difficultly of doing this, most
D-structure
</bodyText>
<page confidence="0.971337">
242
</page>
<bodyText confidence="0.999945583333333">
implementations of GB parsers ignore Move-a
entirely and reformulate X&apos; and 0 Theories so
that they apply at S-structure instead of D-
structure, even though this weakens the
explanatory power of the theory and
complicates the resulting grammar, as
Chomsky (1981) points out. The work reported
here shows that it is possible to invert a simple
formulation of Move-a &apos;on the fly&apos;, suggesting
that it is possible to build parsers that take
advantage of the D-structure/S-structure
distinction offered by GB theory.
</bodyText>
<sectionHeader confidence="0.867575" genericHeader="method">
PARSING AS DEDUCTION
</sectionHeader>
<bodyText confidence="0.99529335">
As just outlined, GB theory decomposes a
competent user&apos;s knowledge of a language
possessed into two components: (i) the universal
component (Univeral Grammar), and (ii) a set
of parameter values and a lexicon, which
together constitute the knowledge of that
particular language above and beyond the
universal component. The relationship between
these two components of a human&apos;s knowledge
of a language and the knowledge of the
utterances of that language that they induce
can be formally described as follows: we regard
Universal Grammar as a logical theory, i.e. a
deductively closed set of statements expressed
in a specialized logical language, and the
lexicon and parameter values that constitute
the specific knowledge of a human language
beyond Universal Grammar as a set of formulae
in that logical language. In the theory of of
Universal Grammar, these formulae imply
statements describing the linguistic properties
of utterances of that human language; these
statements constitute knowledge of utterances
that the parser computes.
The parsers presented below compute instances
of the &apos;parse&apos; relation, which is true of a PF-LF
pair if and only if there is a D-structure and an
S-structure such that the D-structure, 5-
structure, PF, LF quadruple is well-formed with
respect to all of the (parameterized) principles
of grammar. For simplicity, the &apos;phonology&apos;
relation is approximated here by the 5-
structure &apos;yield&apos; function. Specifically, the
input to the language processor are PF
representations and that the processor produces
the corresponding LF representations as output.
The relationship between the parameter
settings and lexicon to the &apos;parse&apos; relation is
sketched in Figure 3. ,
Knowledge of the Language
</bodyText>
<subsectionHeader confidence="0.944286">
Parameter Settings
</subsectionHeader>
<bodyText confidence="0.9994295">
headFirst.
specFirst.
movesInSyntax(np).
rightwardCaseAssignment.
</bodyText>
<subsectionHeader confidence="0.580612">
Lexicon
</subsectionHeader>
<bodyText confidence="0.960538166666667">
thetaAssigner(love).
thetaAssigner(loved).
nonThetaAssigner(sleep).
•••
imply in the theory of Universal Grammar
Knowledge of Utterances of the Language.
parseqeverybodycs,love,somebody),
everybodyi somebodyj [I&amp;quot; [NP ej I [I, [I -s)
[V&amp;quot; Ir Iv love] (Nip ej DUB])
parseaeverybody,-s,love,somebodyk
[ somebodyj everybodyi [I&amp;quot; [NP ei ] [r -s]
[V&amp;quot; [V&apos; love] [NP ej ]]]]IB)
</bodyText>
<figure confidence="0.699209">
••••••
</figure>
<figureCaption confidence="0.969574">
Figure 3: Knowledge of a Language and its
Utterances.
</figureCaption>
<bodyText confidence="0.9999825">
It is important to emphasise that the choice of
logical language and the properties of
utterances computed by the parser are made
here simply on the basis of their familiarity
and simplicity: no theoretical significance
should be attached to them. I do not claim that
first-order logic is the &apos;language of the mind&apos;,
nor that the knowledge of utterances computed
by the human language processor are instances
of &apos;parse&apos; relation (see Berwick and Weinberg
1984 for further discussion of this last point).
To construct a deductive parser for GB one builds
a specialized theorem-prover for Universal
Grammar that relates the parameter values
and lexicon to the &apos;parse&apos; relation, provides it
with parameter settings and a lexicon as
hypotheses, and uses it to derive the
consequences of these hypotheses that describe
the utterance of interest. The Universal
Grammar inference engine used in the PAD
parsers is constructed using a Horn-clause
theorem-prover (a Prolog interpreter). The
Horn-clause theorem-prover is provided with
an wdomatization V of the theory of Universal
</bodyText>
<page confidence="0.991526">
243
</page>
<bodyText confidence="0.926806636363636">
Grammar as well as the hypotheses 11 that
represent the parameter settings and lexicon.
Since a set of hypotheses Simply a consequence
F in the theory of Universal Grammar if and
only if 91u &apos;11 implies F in first-order logic, a
Horn-clause theorem-prover using
axiomatization 41 is capable of deriving the
consequences of 91 that follow in the theory of
Universal Grammar. Thus the PAD parsers
have the logical structure diagrammed in
Figure 4.
</bodyText>
<subsectionHeader confidence="0.265258">
Knowledge of Language
</subsectionHeader>
<bodyText confidence="0.483461">
Axiomatization of Universal Grammar
parse(String, LF) :-
xBar(infl2,DS), theta(inf12,0,DS),
moveAlpha(DSALSSAD,
caseFilter(inf12,0,SS),
phonology(String/U,SS),
1fMovement(SS,LF).
</bodyText>
<figure confidence="0.872133">
Parameter Settings + Lexicon
headFirst.
•••
thetaAssigner(love).
It imply in First-order Logic
Knowledge of Utterances of the Language.
parseqeverybodycs,love,somebodyl,
[ everybodyi [ somebody Er [NP el] [I&apos; [I -s]
[V&amp;quot; [V&apos; [V love] iNp ej EBB])
</figure>
<figureCaption confidence="0.999283">
Figure 4: The Structure of the PAD Parsers.
</figureCaption>
<bodyText confidence="0.997523378378378">
The clause defining the &apos;parse&apos; relation given in
Figure 4 as part of the axiomatization of GB
theory is the actual Prolog definition of &apos;parse&apos;
used in the PAD1 and PAD2 parsers. Thus the
top-level structure of the knowledge of
language employed by the PAD parsers mirrors
the top-level structure of GB theory.
Ideally the internal structure of the various
principles of grammar should reflect the
internal organization of the principles of GB
(e.g. Case assigment should be defined in terms
of Government), but for simplicity the
principles are wdomatized directly here. For
reasons of space a complete description of the
all of the principles is not given here; however
a sketch of one of the principles, the Case
Filter, is given in the remainder of this section.
The other principles are implemented in a
similiar fashion.
The Case Filter as formulated in PAD applies
recursively throughout the S-structure,
associating each node with one of the three
atomic values ass, rec or 0. These values
represent the Case properties of the node they
are associated with; a node associated with
the property ass must be a Case assigner, a node
associated with the property rec must be
capable of being assigned Case, and a node
associated with the property 0 must be neutral
with respect to Case. The Case Filter
determines if there is an assignment of these
values to nodes in the tree consistent with the
principles of Case assignment. A typical
assignment of Case properties to the nodes of an
S-structure in English is shown in 5, where the
Case properties of a node are depicted by the
boldface annotations on that node.1
</bodyText>
<figure confidence="0.974138857142857">
INFL&amp;quot; :0
NP : rec INFL&apos; : ass
--••■—
everybody INFL : ass VP:0
be V&apos;:0
V : 0 NP:0
loved
</figure>
<figureCaption confidence="0.999971">
Figure 5: Case Properties.
</figureCaption>
<bodyText confidence="0.983920142857143">
The Case Filter is parameterized with respect
to the predicates irightwardCaseAssignment&apos;
and leftwardCaseAssigiunent&apos;; if these are
specified as parameter settings of the language
concerned, the Case Filter permits Case
assigners and receivers to appear in the
relevant linear order. The lexicon contains
definitions of the one-place predicates
&apos;noCase&apos;, &apos;assignsCase&apos; and &apos;needsCase&apos; which
hold of lexical items with the relevant
1 These annotations are reminiscent of the
complex feature bundles associated with categories
in GPSG (Gazdar et. al. 1986). The formulation here
differs from the complex feature bundle approach
in that the values associated with nodes by the Case
Filter are not components of that node&apos;s category
label, and hence are invisible to other principles of
grammar. Thus this formulation imposes an
informational encapsulation of the principles of
grammar that the complex feature approach does
not.
</bodyText>
<page confidence="0.990868">
244
</page>
<bodyText confidence="0.924273125">
property; these predicates are used by the Case
Filter to ensure the associations of Case
properties with lexical items are valid.
Specifically, the Case Filter liscences the
following structures:
(2a) a constituent with no Case properties may
have a Case assigner and a Case receiver
as daughters iff they are in the
appropriate order for the language
concerned,
(2b) a constituent with no Case properties may
have any number of daughters with no
Case properties,
(2c) a constituent with Case property C may be
realized as a lexical item W if W is
permitted by the lexicon to have Case
property C, and
(2d) INFL&apos; assign Case to its left if its INFL
daughter is a Case assigner.
This axiomatization of Universal Grammar
together with the parameter values and
lexicon for English is used as the axiom set of a
Prolog interpreter to produce the parser called
PAD1. Its typical behaviour is shown below.2
</bodyText>
<equation confidence="0.883200875">
:parse(teverybody, - s, love, somebody), LS)
LF = everybodriAsomebodyjAinfl2inpi,
# (- s), # love, np:j][1]
LF = somebody::j^everybody:dAinfl2inpi,
# (- s), vpiv1:[v: # love, np:j1[1]
No (more) solutions
:parse(tharry, be, loved), LF)
LF = infl2:[np: # harry, # be,
</equation>
<bodyText confidence="0.644873">
# loved, np:OM]
No (more) solutions
</bodyText>
<sectionHeader confidence="0.631259" genericHeader="method">
AN ALTERNATIVE CONTROL STRUCTURE
</sectionHeader>
<bodyText confidence="0.987862470588235">
Because it uses the SLD inference control
strategy of Prolog with the axiomatization of
Universal Grammar shown above, PAD1
functions as a &apos;generate and test&apos; parser.
Specifically, it enumerates all D-structures
that satisfy X&apos;-theory, filters those that fail
to satisfy 8-theory, computes the corresponding
2 For the reasons explained below, the X&apos;
principle used in this run of parser was restricted to
allow only finitely many D-structures.
S-structures using Move-a, removes all S-
structures that fail to satisfy the Case Filter,
and only then determines if the terminal string
of the S-structure is the string it was given to
parse. Since the X&apos; principle admits infinitely
many D-structures the resulting procedure is
only a semi-decision procedure, i.e. the parser
is not guaranteed to terminate on
ungrammatical input.
Clearly the PAD1 parser does not use its
knowledge of language in an efficient manner.
It would be more efficient to co-routine between
the principles of grammar, checking each
existing node for well-formedness with respect
to these principles and ensuring that the
terminal string of the partially constructed 5-
structure matches the string to be parsed before
creating any additional nodes. Because the
Parsing as Deduction framework conceptually
separates the knowledge used by the processor
from the manner in which that knowledge is
used, we can use an inference control strategy
that applies the principles of grammar in the
manner just described. The PAD2 parser
incorporates the same knowledge of language as
PAD1 (in fact textually identical), but it uses
an inference control strategy inspired by the
&apos;freeze&apos; predicate of Prolog-II (Cohen 1985,
Giannesini et. al. 1986) to achieve this goal.
The control strategy used in PAD2 allows
inferences using specified predicates to be
delayed until specified arguments to these
predicates are at least partially instantiated.
When some other application of an inference
rule instantiates such an argument the current
sequence of inferences is suspended and the
delayed inference performed immediately.
Figure 6 lists the predicates that are delayed
in this manner, and the argument that they
require to be at least partially instantiated
before inferences using them will proceed.
</bodyText>
<table confidence="0.831506428571429">
Predicate Delayed on
X&apos; theory D-structure
8 theory D-structure
Move-a S-structure
Case Filter S-structure
Phonology not delayed
LF-Movement S-structure
</table>
<figureCaption confidence="0.999657">
Figure 6: The Control Strategy of PAD2.
</figureCaption>
<bodyText confidence="0.9989415">
With this control strategy the parsing process
proceeds as follows. Inferences using the X&apos;, 9,
</bodyText>
<page confidence="0.996513">
245
</page>
<bodyText confidence="0.999845090909091">
Case, Move-a and LF-movement principles are
immediately delayed since the relevant
structures are uninstantiated. The &apos;phonology&apos;
principle (a simple recursive tree-walking
predicate that collects terminal items) is not
delayed, so the parser begins performing
inferences associated with it. These
instantiate the top node of the S-structure, so
the delayed inferences resulting from the Case
Filter, Move-a and LF-movement are
performed. The inferences associated with
Move-a result in the instantiation of the top
node(s) of the D-structure, and hence the
delayed inferences associated with the X&apos; and
9 principles are also performed. Only after all
of the principles have applied to the 5-
structure node instantiated by the &apos;phonology&apos;
relation and the corresponding D-structure
node(s) instantiated by Move-a are any further
inferences associated with the &apos;phonology&apos;
relation performed, causing the instantiation of
further S-structure nodes and the repetition of
the cycle of activation and delaying.
Thus the PAD2 parser simultaneously constructs
D-structure, S-structure and LF representations
in a top-down left-to-right fashion, functioning
in effect as a recursive descent parser. This top-
down behaviour is not an essential property of a
parser such as PAD2; using techniques based on
those described by Pereira and Shieber (1987)
and Cohen and Hickey (1987) it should be
possible to construct parsers that use the same
knowledge of language in a bottom-up fashion.
</bodyText>
<sectionHeader confidence="0.933607" genericHeader="method">
TRANSFORMING THE AXIOMATIZATION
</sectionHeader>
<bodyText confidence="0.999949289855072">
In this section I sketch a program
transformation which transforms the original
axiomatization of the grammar to an
equivalent axiomatization that in effect
exhibits this &apos;co-routining&apos; behaviour when
executed using Prolog&apos;s SLD inference control
strategy. Interestingly, a data-flow analysis of
this transformed axiomatization (viewed as a
Prolog program) justifies a further
transformation that yields an equivalent
program that avoids the construction of D-
structure trees altogether. The resulting
parsers, PAD3 — PAD5, use the same parameter
settings and lexicon as PAD1 and PAD2, and
they provably compute the same PF—LF
relationship as PAD2 does. The particular
techniques used to construct these parsers
depend on the internal details of the
formulation of the principles of grammar
adopted here — specifically on their simple
recursive structure — and I do not claim that
they will generalize to more extensive
formulations of these principles.
Recall that the knowledge of a language
incorporated in PAD1 and PAD2 consists of two
separate components, (i) parameter values and
a lexicon, and (ii) an axiomatization V of the
theory of Universal Grammar. The
axiomatization v specifies the deductively
closed set of statements that constitute the
theory of Universal Grammar, and clearly any
axiomatization &apos; equivalent to V (i.e. one
which defines the same set of statements)
defines exactly the same theory of Universal
Grammar. Thus the original axiomatization
of Universal Grammar used in the PAD parsers
can be replaced with any equivalent
axiomatization ir and the system will entail
exactly the same knowledge of the utterances of
the language. A deductive parser using (ir in
place of 41 may perform a difference sequence of
inference steps but ultimately it will infer an
identical set of consequences (ignoring non-
termination).
The PAD3 parser uses the same parameter
values and lexicon as PAD1 and PAD2, but it
uses a reaxiomatization of Universal Grammar
obtained by applying the Unfold/Fold
transformation described and proven correct by
Tamaki and Sato (1984) and Kanamori and
Horiuchi (1988). Essentially, the Unfold/Fold
transformation is used here to replace a
sequence of predicates each of which
recursively traverses the same structure by a
single predicate recursive on that structure that
requires every node in that structure to meet all
of the constraints imposed by the original
sequence of predicates. In the PAD3 parser the
X&apos;, 0, Move-a, Case and Phonology principles
used in PAD1 and PAD2 are folded and
replaced by the single predicate &apos;p&apos; that holds
of exactly the D-structure, S-structure PF
triples admitted by the conjunction of the
original principles.
Because the reaxiomatization technique used
here replaces the original axiomatization of
PAD1 and PAD2 with an equivalent one (in the
sense of the minimum Herbrand model
semantics), the PAD3 parser provably infers
</bodyText>
<page confidence="0.994039">
246
</page>
<bodyText confidence="0.9786151">
exactly the same knowledge of language as
PAD1 and PAD2. Because PAD3&apos;s knowledge of
the principles of grammar that relate D-
structure, S-structure and PF is now represented
by the single recursive predicate &apos;p&apos; that checks
the well-formedness of a node with respect to
all of the relevant principles, PAD3 exhibits
the &apos;co-routining&apos; behaviour of PAD2 rather
than the &apos;generate and test&apos; behaviour of
PAD1, even when used with the standard SLD
inference control strategy of Prolog.3
PAD3 constructs D-structures, just as PAD1 and
PAD2 do. However, a simple analysis of the
data dependencies in the PAD3 program shows
that in this particular case no predicate uses
the 0-structure value returned by a call to
predicate &apos;p&apos; (even when &apos;p&apos; calls itself
recursively, the D-structure value returned is
ignored). Therefore replacing the predicate &apos;p&apos;
with a predicate &apos;pl&apos; exactly equivalent to &apos;p&apos;
except that it avoids construction of any D-
structures does not affect the set of consequences
of these wdoms.4 The PAD4 parser is exactly
the same as the PAD3 parser, except that it
uses the predicate &apos;pl&apos; instead of &apos;p&apos;, so it
therefore computes exactly the same PF - LF
relationship as all of the other PAD parsers,
but it avoids the construction of any D-structure
nodes. That is, the PAD4 parser makes use of
exactly the same parameter settings and
lexicon as the other PAD parsers, and it uses
this knowledge to compute exactly the same
knowledge of utterances. It differs from the
other PAD parsers in that it does not use this
knowledge to explicitly construct a D-structure
representation of the utterance it is parsing.
This same combination of the Unfold/Fold
transformation followed data dependency
analysis can also be performed on all of the
principles of grammar simultaneously. The
</bodyText>
<sectionHeader confidence="0.878784" genericHeader="method">
3 Although in terms of control strategy PAD3
</sectionHeader>
<bodyText confidence="0.999529868421053">
is very similiar to PAD2, it is computationally much
more efficient than PAD2, because it is executed
directly, whereas PAD2 is interpreted by the meta-
interpreter with the &apos;delay&apos; control structure.
4 The generation of the predicate &apos;pi&apos; from
the predicate &apos;p&apos; can be regarded an example of
static garbage-collection (I thank T. Hickey for this
observation). Clearly, a corresponding run-time
garbage collection operation could be performed on
the nodes of the partially constructed D-structures
in PAD2.
Unfold/Fold transformation produces a
predicate in which a data-dependency
analysis identifies both D-structure and S-
structure values as ignored. The PADS parser
uses the resulting predicate as its
axiomatization of Universal Grammar, thus
PAD5 is a parser which uses exactly the same
parameter values and lexicon as the earlier
parsers to compute exactly the same PF-LF
relationship as these parsers, but it does so
without explictly constructing either D-
structures or S-structures.
To summarize, this section presents three new
parsers. The first, PAD3, utilized a re-
wdomatization of Universal Grammar, which
when coupled with the SLD inference control
strategy of Prolog resulted in a parser that
constructs 0-structures and S-structures &apos;in
parallel&apos;, much like PAD2. A data dependency
analysis of the PAD3 program revealed that
the D-structures computed were never used, and
PAD4 exploits this fact to avoid the
construction of D-structures entirely. The
techniques used to generate PAD4 were also
used to generate PAD5, which avoids the
explicit construction of both D-structures and 5-
structures.
</bodyText>
<sectionHeader confidence="0.969278" genericHeader="conclusions">
CONCLUSION.
</sectionHeader>
<bodyText confidence="0.983840217391305">
•
In this paper I described several deductive
parsers for GB theory. They knowledge of
language that they used incorporated the top-
level structure of GB theory, thus
demonstrating that parsers can actually be
built that directly reflect the structure of this
theory.
This work might be extended in several ways.
First, the fragment of English covered by the
parser could be extended to include a wider
range of linguistic phenomena. It would be
interesting to determine if the techniques
described here to axiomatize the principles of
grammar and to reaxiomatize Universal
Grammar to avoid the construction of D-
structures could be used on this enlarged
fragment - a program transformation for
reaxiomatizing a more general formulation of
Move-a is given in Johnson (1988b).
Second, the wdomatization of the principles of
Universal Grammar could be reformulated to
incorporate the &apos;internal&apos; deductive structure of
</bodyText>
<page confidence="0.988551">
247
</page>
<bodyText confidence="0.999950517241379">
the components of GB theory. For example, one
might define c-command or goverment as
primitives, and define the principles in terms
of these. It would be interesting to determine if
a deductive parser can take advantage of this
internal deductive structure in the same way
that the PAD parsers utilized the deductive
relationships between the various principles of
grammar.
Third, it would be interesting to investigate the
performance of parsers using various inference
control strategies. The co-routining strategy
employed by PAD2 is of obvious interest, as are
its deterministic and non-deterministic bottom-
up and left-corner variants. These only scratch
the surface of possibilities, since the Parsing as
Deduction framework allows one to straight-
forwardly formulate control strategies
sensitive to the various principles of grammar.
For example, it is easy to specify inference
control strategies that delay all computations
concerning particular principles (e.g. binding
theory) until the end of the parsing process.
Fourth, one might attempt to develop
specialized logical languages that are
capabale of expressing knowledge of languages
and knowledge of utterances in a more succinct
and computationally useful fashion than the
first-order languages.
</bodyText>
<sectionHeader confidence="0.985303" genericHeader="references">
BIBLIOGRAPHY
</sectionHeader>
<reference confidence="0.999620529411765">
Berwick, R. (1987) Principle-based Parsing.
MIT Artificial Intelligence Laboratory
Technical Report No. 972. Also to appear in
The Processing of Linguistic Structure, The MIT
Press, Cambridge, Mass.
Berwick, R. and A. Weinberg. (1984) The
Grammatical Basis of Linguistic Performance.
The MIT Press, Cambridge, Mass.
Chomsky, N. (1981) Lectures on Government and
Binding. Foris, Dordrect.
Chomsky, N. (1986) Knowledge of Language,
Its Nature, Origin and Use. Praeger, New York.
Cohen, J. (1985) Describing Prolog by its
Interpretation and Compilation. C. ACM.
28:12, p. 1311-1324.
Cohen, J. and T. Hickey. (1987) Parsing and
Compiling Using Prolog. ACM Trans.
Programming Languages and Systems. 9:2, p.
125-163.
Gazdar, G., E. Klein, G. Pullum and I. Sag.
(1985) Generalized Phrase Structure Grammar.
Basil Blackwell, Oxford.
Giannesini, F., H. Kanoui, R. Pasero, and M. v.
Caneghem. Prolog. Addison-Wesley, Reading,
Mass. 1986.
Johnson, M. (1988a) Parsing as Deduction, the
Use of Knowledge of Language, ms.
Johnson, M. (1988b) Computing with Move-a
using the Unfold-Fold Transformation, ms.
Kanamori, T. and K. Horiuchi (1988)
Construction of Logic Programs Based on
Generalized Unfold/Fold Rules, in Lassez, ed.,
Proceedings of the Fourth International
Conference of Logic Programming, p. 744 - 768,
The MIT Press, Cambridge, Mass.
Pereira, F. and S. Shieber. (1987) Prolog and
Natural Language Processing. CSLI Lecture
Notes Series, distributed by Chicago
University Press. Chicago.
Pereira, F. and D. Warren. (1983) Parsing as
Deduction. In Proceedings of the 21st Annual
Meeting of the Association for Computational
Linguistics, MIT, Cambridge, Mass.
Tamald, H. and T. Sato. (1984) Unfold/Fold
Transformation of Logic Programs. In
Proceedings of the Second International Logic
Programming Conference, p. 127-138, Uppsala
University, Uppsala, Sweden.
Van Riemsdijk, H. and E. Williams. (1986)
Introduction to the Theory of Grammar. The
MIT Press, Cambridge, Mass.
</reference>
<page confidence="0.997008">
248
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.267744">
<title confidence="0.999582">PARSING WITH MULTIPLE LEVELS</title>
<author confidence="0.999987">Mark Johnson</author>
<affiliation confidence="0.297553">Brain and Cognitive Sciences, M.I.T.</affiliation>
<abstract confidence="0.991499833333333">This paper discusses a sequence of deductive parsers, called PAD1 - PAD5, that utilize an axiomatization of the principles and parameters of GB theory, including a restricted transformational component (Move-a). PAD2 uses an inference control strategy based on the &apos;freeze&apos; predicate of Prolog-II, while PAD3 - 5 utilize the Unfold-Fold transformation to transform the original axiomatization into a form that functions as a recursive descent Prolog parser for the fragment.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>R Berwick</author>
</authors>
<title>Principle-based Parsing.</title>
<date>1987</date>
<journal>MIT Artificial Intelligence Laboratory</journal>
<booktitle>The Processing of Linguistic Structure, The</booktitle>
<tech>Technical Report No. 972.</tech>
<publisher>MIT Press,</publisher>
<location>Cambridge, Mass.</location>
<note>Also to appear in</note>
<contexts>
<context position="2726" citStr="Berwick 1987" startWordPosition="415" endWordPosition="416">how that GB deductive parsers can actually be built. These parsers take PF representations as their input and produce LF representations as their output. They differ from most extant GB parsers in that they make explicit use of the four levels of representation that GB attributes to an utterance - namely D-structure, Sstructure, PF and LF - and the transformational relationship that holds between them. A &apos;grammar&apos; for these parsers consists entirely of a set of parameter values that parameterize the principles of GB theory - thus the parsers described here can be regarded as &apos;principlebased&apos; (Berwick 1987) - and the parsers&apos; toplevel internal structure transparently reflects (some of) the principles of that theory; X&apos; and O theory apply at D-structure, Case theory applies at S-structure, Move-a is stated as a relation between D- and S-structure, and LFmovement relates S-structure and LF. In particular, the constraints on S-structures that result from the interaction of Move-a with principles constraining D-structure (i.e. X&apos; and O theories) are used constructively throughout the parsing process. The PAD parsers are designed to directly mirror the deductive structure of GB theory. Intuitively, i</context>
</contexts>
<marker>Berwick, 1987</marker>
<rawString>Berwick, R. (1987) Principle-based Parsing. MIT Artificial Intelligence Laboratory Technical Report No. 972. Also to appear in The Processing of Linguistic Structure, The MIT Press, Cambridge, Mass.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Berwick</author>
<author>A Weinberg</author>
</authors>
<title>The Grammatical Basis of Linguistic Performance.</title>
<date>1984</date>
<publisher>The MIT Press,</publisher>
<location>Cambridge, Mass.</location>
<contexts>
<context position="10708" citStr="Berwick and Weinberg 1984" startWordPosition="1638" endWordPosition="1641">arseaeverybody,-s,love,somebodyk [ somebodyj everybodyi [I&amp;quot; [NP ei ] [r -s] [V&amp;quot; [V&apos; love] [NP ej ]]]]IB) •••••• Figure 3: Knowledge of a Language and its Utterances. It is important to emphasise that the choice of logical language and the properties of utterances computed by the parser are made here simply on the basis of their familiarity and simplicity: no theoretical significance should be attached to them. I do not claim that first-order logic is the &apos;language of the mind&apos;, nor that the knowledge of utterances computed by the human language processor are instances of &apos;parse&apos; relation (see Berwick and Weinberg 1984 for further discussion of this last point). To construct a deductive parser for GB one builds a specialized theorem-prover for Universal Grammar that relates the parameter values and lexicon to the &apos;parse&apos; relation, provides it with parameter settings and a lexicon as hypotheses, and uses it to derive the consequences of these hypotheses that describe the utterance of interest. The Universal Grammar inference engine used in the PAD parsers is constructed using a Horn-clause theorem-prover (a Prolog interpreter). The Horn-clause theorem-prover is provided with an wdomatization V of the theory </context>
</contexts>
<marker>Berwick, Weinberg, 1984</marker>
<rawString>Berwick, R. and A. Weinberg. (1984) The Grammatical Basis of Linguistic Performance. The MIT Press, Cambridge, Mass.</rawString>
</citation>
<citation valid="true">
<authors>
<author>N Chomsky</author>
</authors>
<date>1981</date>
<booktitle>Lectures on Government and Binding. Foris,</booktitle>
<location>Dordrect.</location>
<contexts>
<context position="726" citStr="Chomsky 1981" startWordPosition="102" endWordPosition="103">RACT This paper discusses a sequence of deductive parsers, called PAD1 - PAD5, that utilize an axiomatization of the principles and parameters of GB theory, including a restricted transformational component (Move-a). PAD2 uses an inference control strategy based on the &apos;freeze&apos; predicate of Prolog-II, while PAD3 - 5 utilize the Unfold-Fold transformation to transform the original axiomatization into a form that functions as a recursive descent Prolog parser for the fragment. INTRODUCTION This paper reports on several deductive parsers for a fragment of Chomsky&apos;s Government and Binding theory (Chomsky 1981, 1986; Van Riemsdijk and Williams 1984). These parsers were constructed to illustrate the Parsing as Deduction&apos; approach, which views a parser as a specialized theorem-prover which uses knowledge of a language (i.e. its grammar) as a set of axioms from which information about the utterances of that language (e.g. their structural descriptions) can be deduced. This approach directly inspired by the seminal paper by Pereira and Warren (1983). Johnson (1988a) motivates the Parsing as Deduction approach in more detail than is possible here, and Johnson (1988b) extends the techniques presented in </context>
<context position="7726" citStr="Chomsky (1981)" startWordPosition="1191" endWordPosition="1192">tional problems involved in constructing a GB parser. It seems that one can only construct a practical GB parser by simultaneously using constraints from all of the principles of grammar mentioned above (excepting LF-Movement), but this involves being able to &apos;invert&apos; Move-a &apos;on the fly&apos;. Because of the difficultly of doing this, most D-structure 242 implementations of GB parsers ignore Move-a entirely and reformulate X&apos; and 0 Theories so that they apply at S-structure instead of Dstructure, even though this weakens the explanatory power of the theory and complicates the resulting grammar, as Chomsky (1981) points out. The work reported here shows that it is possible to invert a simple formulation of Move-a &apos;on the fly&apos;, suggesting that it is possible to build parsers that take advantage of the D-structure/S-structure distinction offered by GB theory. PARSING AS DEDUCTION As just outlined, GB theory decomposes a competent user&apos;s knowledge of a language possessed into two components: (i) the universal component (Univeral Grammar), and (ii) a set of parameter values and a lexicon, which together constitute the knowledge of that particular language above and beyond the universal component. The rela</context>
</contexts>
<marker>Chomsky, 1981</marker>
<rawString>Chomsky, N. (1981) Lectures on Government and Binding. Foris, Dordrect.</rawString>
</citation>
<citation valid="true">
<authors>
<author>N Chomsky</author>
</authors>
<title>Knowledge of Language, Its Nature, Origin and Use.</title>
<date>1986</date>
<publisher>Praeger,</publisher>
<location>New York.</location>
<contexts>
<context position="5017" citStr="Chomsky 1986" startWordPosition="765" endWordPosition="766">four distinct representations of an utterance, Dstructure, S-structure, PF and LF. To a first approximation, D-structure represents configurationally the thematic or predicateargument structure of the utterance, S-structure represents the utterance&apos;s surface constituent structure, PF represents its phonetic form, and LF (&amp;quot;Logical Form&amp;quot;) is a configurational representation of the scopal relationships between the quantificational elements present in the utterance. The PF and LF representations constitute the interface between language and other cognitive systems external to the language module (Chomsky 1986, p. 68). For example, the PF representation &amp;quot;Everybody is loved&amp;quot; together with the D-structure, 5- structure and LF representations shown in Figure 1 might constitute a well-formed quadruple for English. INFL&amp;quot; INFL&amp;quot; / INFL&apos; / NFL&apos; NP zNvp NP zNvp I INFL ,••■ NFL, ‘ everybody ie ■Npi 13e V NP lo;ed everybody lo;red e S-structure xmr INFL&amp;quot; &amp;quot;&amp;quot; NINFL&apos; NP ■ everybody IKin-■ip ie V NPI LF lo■red e Figure 1: Representations of GB Theory. In order for such a quadruple to be well-formed it must satisfy all of the principles of grammar; e.g. the D-structure and S-structure must be related by Move-a, th</context>
</contexts>
<marker>Chomsky, 1986</marker>
<rawString>Chomsky, N. (1986) Knowledge of Language, Its Nature, Origin and Use. Praeger, New York.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Cohen</author>
</authors>
<title>Describing Prolog by its Interpretation and Compilation.</title>
<date>1985</date>
<journal>C. ACM.</journal>
<volume>28</volume>
<pages>1311--1324</pages>
<contexts>
<context position="17848" citStr="Cohen 1985" startWordPosition="2766" endWordPosition="2767">nd ensuring that the terminal string of the partially constructed 5- structure matches the string to be parsed before creating any additional nodes. Because the Parsing as Deduction framework conceptually separates the knowledge used by the processor from the manner in which that knowledge is used, we can use an inference control strategy that applies the principles of grammar in the manner just described. The PAD2 parser incorporates the same knowledge of language as PAD1 (in fact textually identical), but it uses an inference control strategy inspired by the &apos;freeze&apos; predicate of Prolog-II (Cohen 1985, Giannesini et. al. 1986) to achieve this goal. The control strategy used in PAD2 allows inferences using specified predicates to be delayed until specified arguments to these predicates are at least partially instantiated. When some other application of an inference rule instantiates such an argument the current sequence of inferences is suspended and the delayed inference performed immediately. Figure 6 lists the predicates that are delayed in this manner, and the argument that they require to be at least partially instantiated before inferences using them will proceed. Predicate Delayed on</context>
</contexts>
<marker>Cohen, 1985</marker>
<rawString>Cohen, J. (1985) Describing Prolog by its Interpretation and Compilation. C. ACM. 28:12, p. 1311-1324.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Cohen</author>
<author>T Hickey</author>
</authors>
<title>Parsing and Compiling Using Prolog.</title>
<date>1987</date>
<journal>ACM Trans. Programming Languages and Systems.</journal>
<volume>9</volume>
<pages>125--163</pages>
<contexts>
<context position="20091" citStr="Cohen and Hickey (1987)" startWordPosition="3092" endWordPosition="3095">n and the corresponding D-structure node(s) instantiated by Move-a are any further inferences associated with the &apos;phonology&apos; relation performed, causing the instantiation of further S-structure nodes and the repetition of the cycle of activation and delaying. Thus the PAD2 parser simultaneously constructs D-structure, S-structure and LF representations in a top-down left-to-right fashion, functioning in effect as a recursive descent parser. This topdown behaviour is not an essential property of a parser such as PAD2; using techniques based on those described by Pereira and Shieber (1987) and Cohen and Hickey (1987) it should be possible to construct parsers that use the same knowledge of language in a bottom-up fashion. TRANSFORMING THE AXIOMATIZATION In this section I sketch a program transformation which transforms the original axiomatization of the grammar to an equivalent axiomatization that in effect exhibits this &apos;co-routining&apos; behaviour when executed using Prolog&apos;s SLD inference control strategy. Interestingly, a data-flow analysis of this transformed axiomatization (viewed as a Prolog program) justifies a further transformation that yields an equivalent program that avoids the construction of Ds</context>
</contexts>
<marker>Cohen, Hickey, 1987</marker>
<rawString>Cohen, J. and T. Hickey. (1987) Parsing and Compiling Using Prolog. ACM Trans. Programming Languages and Systems. 9:2, p. 125-163.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Gazdar</author>
<author>E Klein</author>
<author>G Pullum</author>
<author>I Sag</author>
</authors>
<title>Generalized Phrase Structure Grammar.</title>
<date>1985</date>
<publisher>Basil Blackwell,</publisher>
<location>Oxford.</location>
<marker>Gazdar, Klein, Pullum, Sag, 1985</marker>
<rawString>Gazdar, G., E. Klein, G. Pullum and I. Sag. (1985) Generalized Phrase Structure Grammar. Basil Blackwell, Oxford.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Prolog</author>
</authors>
<date>1986</date>
<publisher>Addison-Wesley,</publisher>
<location>Reading, Mass.</location>
<marker>Prolog, 1986</marker>
<rawString>Giannesini, F., H. Kanoui, R. Pasero, and M. v. Caneghem. Prolog. Addison-Wesley, Reading, Mass. 1986.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Johnson</author>
</authors>
<title>Parsing as Deduction,</title>
<date>1988</date>
<journal>the Use of Knowledge of Language, ms.</journal>
<contexts>
<context position="1185" citStr="Johnson (1988" startWordPosition="172" endWordPosition="173">ser for the fragment. INTRODUCTION This paper reports on several deductive parsers for a fragment of Chomsky&apos;s Government and Binding theory (Chomsky 1981, 1986; Van Riemsdijk and Williams 1984). These parsers were constructed to illustrate the Parsing as Deduction&apos; approach, which views a parser as a specialized theorem-prover which uses knowledge of a language (i.e. its grammar) as a set of axioms from which information about the utterances of that language (e.g. their structural descriptions) can be deduced. This approach directly inspired by the seminal paper by Pereira and Warren (1983). Johnson (1988a) motivates the Parsing as Deduction approach in more detail than is possible here, and Johnson (1988b) extends the techniques presented in this paper to deal with a more complex fragment. Steven Abney, Bob Berwick, Nelson Correa, Tim Hickey, Elizabeth Highleyman, Ewan Klein, Peter Ludlow, Martin Kay, Fernando Pereira and Whitman Richards all made helpful suggestions regarding this work, although all responsibility for errors remains my own. The research reported here was supported by a grant by the Systems Development Foundation to the Center for the Study of Language and Information at Stan</context>
<context position="27370" citStr="Johnson (1988" startWordPosition="4233" endWordPosition="4234">ry, thus demonstrating that parsers can actually be built that directly reflect the structure of this theory. This work might be extended in several ways. First, the fragment of English covered by the parser could be extended to include a wider range of linguistic phenomena. It would be interesting to determine if the techniques described here to axiomatize the principles of grammar and to reaxiomatize Universal Grammar to avoid the construction of Dstructures could be used on this enlarged fragment - a program transformation for reaxiomatizing a more general formulation of Move-a is given in Johnson (1988b). Second, the wdomatization of the principles of Universal Grammar could be reformulated to incorporate the &apos;internal&apos; deductive structure of 247 the components of GB theory. For example, one might define c-command or goverment as primitives, and define the principles in terms of these. It would be interesting to determine if a deductive parser can take advantage of this internal deductive structure in the same way that the PAD parsers utilized the deductive relationships between the various principles of grammar. Third, it would be interesting to investigate the performance of parsers using</context>
</contexts>
<marker>Johnson, 1988</marker>
<rawString>Johnson, M. (1988a) Parsing as Deduction, the Use of Knowledge of Language, ms.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Johnson</author>
</authors>
<title>Computing with Move-a using the Unfold-Fold Transformation,</title>
<date>1988</date>
<location>ms.</location>
<contexts>
<context position="1185" citStr="Johnson (1988" startWordPosition="172" endWordPosition="173">ser for the fragment. INTRODUCTION This paper reports on several deductive parsers for a fragment of Chomsky&apos;s Government and Binding theory (Chomsky 1981, 1986; Van Riemsdijk and Williams 1984). These parsers were constructed to illustrate the Parsing as Deduction&apos; approach, which views a parser as a specialized theorem-prover which uses knowledge of a language (i.e. its grammar) as a set of axioms from which information about the utterances of that language (e.g. their structural descriptions) can be deduced. This approach directly inspired by the seminal paper by Pereira and Warren (1983). Johnson (1988a) motivates the Parsing as Deduction approach in more detail than is possible here, and Johnson (1988b) extends the techniques presented in this paper to deal with a more complex fragment. Steven Abney, Bob Berwick, Nelson Correa, Tim Hickey, Elizabeth Highleyman, Ewan Klein, Peter Ludlow, Martin Kay, Fernando Pereira and Whitman Richards all made helpful suggestions regarding this work, although all responsibility for errors remains my own. The research reported here was supported by a grant by the Systems Development Foundation to the Center for the Study of Language and Information at Stan</context>
<context position="27370" citStr="Johnson (1988" startWordPosition="4233" endWordPosition="4234">ry, thus demonstrating that parsers can actually be built that directly reflect the structure of this theory. This work might be extended in several ways. First, the fragment of English covered by the parser could be extended to include a wider range of linguistic phenomena. It would be interesting to determine if the techniques described here to axiomatize the principles of grammar and to reaxiomatize Universal Grammar to avoid the construction of Dstructures could be used on this enlarged fragment - a program transformation for reaxiomatizing a more general formulation of Move-a is given in Johnson (1988b). Second, the wdomatization of the principles of Universal Grammar could be reformulated to incorporate the &apos;internal&apos; deductive structure of 247 the components of GB theory. For example, one might define c-command or goverment as primitives, and define the principles in terms of these. It would be interesting to determine if a deductive parser can take advantage of this internal deductive structure in the same way that the PAD parsers utilized the deductive relationships between the various principles of grammar. Third, it would be interesting to investigate the performance of parsers using</context>
</contexts>
<marker>Johnson, 1988</marker>
<rawString>Johnson, M. (1988b) Computing with Move-a using the Unfold-Fold Transformation, ms.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Kanamori</author>
<author>K Horiuchi</author>
</authors>
<title>Construction of Logic Programs Based on Generalized Unfold/Fold Rules,</title>
<date>1988</date>
<booktitle>Proceedings of the Fourth International Conference of Logic Programming,</booktitle>
<pages>744--768</pages>
<editor>in Lassez, ed.,</editor>
<publisher>The MIT Press,</publisher>
<location>Cambridge, Mass.</location>
<contexts>
<context position="22343" citStr="Kanamori and Horiuchi (1988)" startWordPosition="3437" endWordPosition="3440">rammar used in the PAD parsers can be replaced with any equivalent axiomatization ir and the system will entail exactly the same knowledge of the utterances of the language. A deductive parser using (ir in place of 41 may perform a difference sequence of inference steps but ultimately it will infer an identical set of consequences (ignoring nontermination). The PAD3 parser uses the same parameter values and lexicon as PAD1 and PAD2, but it uses a reaxiomatization of Universal Grammar obtained by applying the Unfold/Fold transformation described and proven correct by Tamaki and Sato (1984) and Kanamori and Horiuchi (1988). Essentially, the Unfold/Fold transformation is used here to replace a sequence of predicates each of which recursively traverses the same structure by a single predicate recursive on that structure that requires every node in that structure to meet all of the constraints imposed by the original sequence of predicates. In the PAD3 parser the X&apos;, 0, Move-a, Case and Phonology principles used in PAD1 and PAD2 are folded and replaced by the single predicate &apos;p&apos; that holds of exactly the D-structure, S-structure PF triples admitted by the conjunction of the original principles. Because the reaxio</context>
</contexts>
<marker>Kanamori, Horiuchi, 1988</marker>
<rawString>Kanamori, T. and K. Horiuchi (1988) Construction of Logic Programs Based on Generalized Unfold/Fold Rules, in Lassez, ed., Proceedings of the Fourth International Conference of Logic Programming, p. 744 - 768, The MIT Press, Cambridge, Mass.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F Pereira</author>
<author>S Shieber</author>
</authors>
<date>1987</date>
<booktitle>Prolog and Natural Language Processing. CSLI Lecture Notes Series, distributed by</booktitle>
<publisher>Chicago University Press. Chicago.</publisher>
<contexts>
<context position="20063" citStr="Pereira and Shieber (1987)" startWordPosition="3087" endWordPosition="3090">ated by the &apos;phonology&apos; relation and the corresponding D-structure node(s) instantiated by Move-a are any further inferences associated with the &apos;phonology&apos; relation performed, causing the instantiation of further S-structure nodes and the repetition of the cycle of activation and delaying. Thus the PAD2 parser simultaneously constructs D-structure, S-structure and LF representations in a top-down left-to-right fashion, functioning in effect as a recursive descent parser. This topdown behaviour is not an essential property of a parser such as PAD2; using techniques based on those described by Pereira and Shieber (1987) and Cohen and Hickey (1987) it should be possible to construct parsers that use the same knowledge of language in a bottom-up fashion. TRANSFORMING THE AXIOMATIZATION In this section I sketch a program transformation which transforms the original axiomatization of the grammar to an equivalent axiomatization that in effect exhibits this &apos;co-routining&apos; behaviour when executed using Prolog&apos;s SLD inference control strategy. Interestingly, a data-flow analysis of this transformed axiomatization (viewed as a Prolog program) justifies a further transformation that yields an equivalent program that a</context>
</contexts>
<marker>Pereira, Shieber, 1987</marker>
<rawString>Pereira, F. and S. Shieber. (1987) Prolog and Natural Language Processing. CSLI Lecture Notes Series, distributed by Chicago University Press. Chicago.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F Pereira</author>
<author>D Warren</author>
</authors>
<title>Parsing as Deduction.</title>
<date>1983</date>
<booktitle>In Proceedings of the 21st Annual Meeting of the Association for Computational Linguistics,</booktitle>
<location>MIT, Cambridge, Mass.</location>
<contexts>
<context position="1170" citStr="Pereira and Warren (1983)" startWordPosition="168" endWordPosition="171">ecursive descent Prolog parser for the fragment. INTRODUCTION This paper reports on several deductive parsers for a fragment of Chomsky&apos;s Government and Binding theory (Chomsky 1981, 1986; Van Riemsdijk and Williams 1984). These parsers were constructed to illustrate the Parsing as Deduction&apos; approach, which views a parser as a specialized theorem-prover which uses knowledge of a language (i.e. its grammar) as a set of axioms from which information about the utterances of that language (e.g. their structural descriptions) can be deduced. This approach directly inspired by the seminal paper by Pereira and Warren (1983). Johnson (1988a) motivates the Parsing as Deduction approach in more detail than is possible here, and Johnson (1988b) extends the techniques presented in this paper to deal with a more complex fragment. Steven Abney, Bob Berwick, Nelson Correa, Tim Hickey, Elizabeth Highleyman, Ewan Klein, Peter Ludlow, Martin Kay, Fernando Pereira and Whitman Richards all made helpful suggestions regarding this work, although all responsibility for errors remains my own. The research reported here was supported by a grant by the Systems Development Foundation to the Center for the Study of Language and Info</context>
</contexts>
<marker>Pereira, Warren, 1983</marker>
<rawString>Pereira, F. and D. Warren. (1983) Parsing as Deduction. In Proceedings of the 21st Annual Meeting of the Association for Computational Linguistics, MIT, Cambridge, Mass.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Tamald</author>
<author>T Sato</author>
</authors>
<title>Unfold/Fold Transformation of Logic Programs.</title>
<date>1984</date>
<booktitle>In Proceedings of the Second International Logic Programming Conference,</booktitle>
<pages>127--138</pages>
<institution>Uppsala University,</institution>
<location>Uppsala,</location>
<marker>Tamald, Sato, 1984</marker>
<rawString>Tamald, H. and T. Sato. (1984) Unfold/Fold Transformation of Logic Programs. In Proceedings of the Second International Logic Programming Conference, p. 127-138, Uppsala University, Uppsala, Sweden.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Van Riemsdijk</author>
<author>E Williams</author>
</authors>
<title>Introduction to the Theory of Grammar.</title>
<date>1986</date>
<publisher>The MIT Press,</publisher>
<location>Cambridge, Mass.</location>
<marker>Van Riemsdijk, Williams, 1986</marker>
<rawString>Van Riemsdijk, H. and E. Williams. (1986) Introduction to the Theory of Grammar. The MIT Press, Cambridge, Mass.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>