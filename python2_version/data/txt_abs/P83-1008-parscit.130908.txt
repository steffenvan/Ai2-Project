<newSection> III A-CALCULUS IN THE PROLOG INTERPRETER There are several deficiencies in this Prolog implementation of grammars using the A-calculus as a meaning representation language.
First, neither of the suggested implementations of A-reduction in Prolog are particularly attractive.
The first, which uses first-order constants to represent variables, requires the addition of a messy gensym argument place to every predicate to simulate the global counter: This seems both inelegant and a duplication of effort, since the Prolog interpreter has a similar kind of variable-handling mechanism built into it.
The second approach takes advantage of Prolog's built-in variable facilities, but requires the use of Prolog's meta-logical facilities to do so.
This is because Prolog variables are serving two functions, as Prolog variables and as A-variables.
The two kinds of variables function differently and must be differentiated.
Second, there is a problem with invertibility.
Many Prolog programs are invertible and may be run 'backwards'.
We should be able, for example, to evaluate the sentence grammar predicate giving the meaning of a sentence and have the system produce the sentence itself.
This ability to go from a meaning formula back to an English phrase that would produce it is one of the attractive properties of logic grammars.
The grammar presented here can also be run this way.
However, a careful look at this computation process reveals that with this implementation the Prolog interpreter performs essentially an exhaustive search.
It generates every subphrase, A-reduces it and checks to see if it has the desired meaning.
Aside from being theoretically unsatisfactory, for a grammar much larger than a trivially-small one, this approach would not be computationally feasible.
So the question arises as to whether the Prolog interpreter might be enhanced to know about A-formulas and manipulate them directly.
Then the Prolog interpreter itself would handle the A-reduction and would be responsible for avoiding variable collisions.
The logic grammars would look even simpler because the lreduce predicate would not need to be explicitly included in each grammar rule.
For example, the ts clause in the grammar in the figure above would become: ts(lapply(M1,M2),X,Y) :te(M1,X,Z), iv(M2,Z,Y).
Declarations to the Prolog interpreter could be included to indicate the predicate argument places that contain A-terms.
Consider what would be involved in this modification to the Prolog system.
It might seem that all that is required is just the addition of a A-reduction operator applied to A-arguments.
And indeed when executing in the forward direction, this is essentially all that is involved.
Consider what happens, however, if we wish to execute the grammar in the reverse direction, i.e., give a A-term that is a meaning, and have the Prolog system find the English phrase that has that meaning.
Now we find the need for a 'A-expansion' ability.
Consider the situation in which we present Prolog with the following goal: ts(forall(X,implies(man(X),walk(X))),S,[]).
Prolog would first try to match it with the head of the ts clause given above.
This would require matching the first terms, i.e., forall(X,implies(lapply(man,X),lapply(walk,X))) and lapply(M1,M2) (using our encoding of A-terms as Prolog terms.)
The matcher would have available the types of the variables and terms.
We would like it to be able to discover that by substituting the right terms for the variables, in particular substituting lambda(P,forall(X,implies( lapply(man,X),lapply(P,X)))) for M1 and walk for M2 in the second term, it becomes the same as the first term (after reduction).
These M1 and M2 values would then be passed on to the te and iv predicates.
The iv predicate, for example, can easily find in the facts the word to express the meaning of the term, walk; it is the work 'walks' and is expressed by the fact iv(walk,[walksIX],X), shown above.
For the predicate te, given the value of Ml, the system would have to match it against the head of the te clause and then do further computation to eventually construct the sentence.
What we require is a general algorithm for matching A-terms.
Just as Prolog uses unification of first-order terms for its parameter mechanism, to enhance Prolog to include A-terms, we need general unification of A-terms.
The problem is that A-unification is much more complicated than first-order unification.
For a unifiable pair of first-order terms, there exists a unique (up to change of bound variable) most general unifier (mgu) for them.
In the case of A-terms, this is not true; there may be many unifiers, which are not generalizations of one another.
Furthermore unification of A-terms is, in general, undecidable.
These facts in themselves, while perhaps discouraging, need not force us to abandon hope.
The fact that there is no unique mgu just contributes another place for nondeterminism to the Prolog interpreter.
And all interpreters which have the power of a universal Turing machine have undecidable properties.
Perhaps another source of undecidability can be accommodated.
Huet [19791 &quot;s given a semi-decision procedure for unification in the typed A-calculus.
The question of whether this approach is feasible really comes down to the finer properties of the unification procedure.
It seems not unreasonable to hope that in the relatively simple cases we seem to have in our grammars, this procedure can be made to perform adequately.
Notice that, for parsing in the forward direction, the system will always be unifying a A-term with a variable, in which case the unification problem is trivial.
We are in the process of programming Huet's algorithm to include it in a simple Prolog-like interpreter.
We intend to experiment with it to see how it performs on the A-terms used to represent meanings of natural language expressions.
Warren [1982] points out how some suggestions for incorporating A-calculus into Prolog are motivated by needs that can easily and naturally be met in Prolog itself, unextended.
Following his suggestions for how to represent A-expressions in in Prolog directly, we would represent the meaning of a sentence by a set of asserted Prolog clauses and an encoding atomic name, which would have to be generated.
While this might be an interesting alternate approach to meaning representations, it is quite different from the ones discussed here.