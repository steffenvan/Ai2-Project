<newSection> 1.
INTRODUCTION As part of our long-term research into techniques for information retrieval from natural language data bases, we have developed over the past few years a natural language interface for data base retrieval (1,2).
In developing this system, we have sought general, conceptually simple, linguistically-based solutions to problems of semantic representation and interpretation.
One component of the system, which we have recently redesigned and are now implementing in its revised form, involves the generation of responses.
This paper will briefly describe our approach, and how this approach simplifies some of the problems of response generation.
Our system processes a query in four stages: syntactic analysis, semantic analysis, simplification, and retrieval (see Figure 1).
The syntactic analysis, which is performed by the Linguistic String Parser, constructs a parse tree and then applies a series of transformations which decompose the sentence into a operator-operandadjunct tree.
The semantic analysis first translates this tree into a formula of the predicate calculus with set-formers and quantification over sets.
This is followed by anaphora resolution (replacement of pronouns with their antecedents) and predicate expansion (replacement of predicates not appearing in the data base by their definitions in terms of predicates in the data base).
The simplification stage performs certain optimizations on nested quantifiers, after which the retrieval component evaluates the formula with respect to the data base and generates a response.
Our original system, like many current question-answering systems, had simple mechanisms for generating lists and tables in response to questions.
As we broadened our system's coverage, however, to include predicate expansion and to handle a broad range of conjoined structures, the number of ad hoc rules for generating answers grew considerably.
We decided therefore to introduce a much more general mechanism, for translating predicate calculus expressions back into English.
To understand how this can simplify response generation, we must consider a few of the problems of generating responses.
The basic mechanism of answer generation is very simple.
Yes-no questions are translated into predicate formulas: if the formula evaluates to true, print &quot;yes&quot;, else &quot;no&quot;.
Wh-questions translate into set-formers: the extension of the set is the answer to the question.
One complication is embedded set-formers.
An embedded set-former arises when the question contains a quantifier or conjunction with wider scope than the question word.
For example, the question Which students passed the French exam and which failed it?
will be translated into two set-formers connected by and: fs E set-of-students 1 passed (s, French exam)} and fs e set-of-students I failed (s, French exam)} It would be confusing to print the two sets by themselves.
Instead, for each set to be printed, we take the predicate satisfied by the set, add a universal quantifier over the extension of the set, and convert the resulting formula into an English sentence.
For our example, this would mean where 51 {s E set-of-students 1 passed(s,French exam)} and print-English-equivalent-of (Vx EE2) failed (x, French exam)' where S2 = {s E set-of-students 1 failed(s,French exam)} which would generate a response such as John, Paul, and Mary passed the French exam; Sam and Judy failed it.
The same technique will handle set-formers within the scope of quantifiers, as in the sentence Which exams did each student take?
Additional complications arise when the system wants to add some words or explanation to the direct answer to a question.
When asked a yes-no question, a helpful question-answering system will try to provide more information than just &quot;yes&quot; or &quot;no&quot;.
In our system, if the outermost quantifier is existential -- (3x e S) C(x) -we print {x e 5 I C(x)}: if it is universal -(Vx e s) coo -- we print {x E S 1 1C(x)}.
For example, in response to Did all the students take the English exam?
our system will reply No, John, Mary, and Sam did not.
When the outermost quantifier is the product of predicate expansion, however, it is not sufficient to print the corresponding set, since the predicate which this set satisfies is not explicit in the question.
For example, in the data base of radiology reports we are currently using, a report is negative if it does not show any positive or suspicious medical findings.
Thus the question Was the X-ray negative?
would be translated into negative (X-ray) and expanded into (Vf E medical-findings) lshow(X-ray,f) so the system would compute the set {f e medical-findings 1 show(X-ray,f)} Just printing the extension of this set, No, metastases.