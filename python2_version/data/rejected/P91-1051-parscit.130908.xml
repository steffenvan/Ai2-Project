<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.410572">
<title confidence="0.953367">
Conceptual Revision for Natural Language Generation
</title>
<author confidence="0.878244">
Ben E. Cline
</author>
<affiliation confidence="0.936579">
Department of Computer Science
</affiliation>
<address confidence="0.511748">
Blacksburg, VA 24061
</address>
<email confidence="0.986112">
benjy@vtvml.cc.vt.edu
</email>
<bodyText confidence="0.999965807228916">
Traditional natural language generation systems are
based on a pipelined architecture. A conceptual compo-
nent selects items from a knowledge base and orders them
into a message to address some discourse goal. This mes-
sage is passed to the stylistic component that makes lex-
ical and syntactic choices to produce a natural language
surface text. By contrast, humans producing formal text
typically create drafts which they polish through revision
[Hayes and Flower 1980]. One proposal for improving the
quality of computer-generated multisentential text is to
incorporate a draft-and-revision paradigm.
Some researchers have suggested that revision in gener-
ation systems should only affect stylistic elements of the
text [Vaughan and McDonald 1986]. But human writers
also engage in conceptual revision, and there is reason to
believe that techniques for conceptual revision should also
be useful for a generation system producing formal text.
Yazdani [1987] argues that both stylistic and conceptual
revisions are useful. This paper extends those arguments
and provides further evidence for the usefulness of con-
ceptual as well as stylistic revision. We present strategies
for identifying situations applicable to conceptual revision
and techniques for effecting the revision.
Why is revision important for a natural language gener-
ation system? First, Hayes and Flower suggest that revi-
sion reduces the cognitive strain of an author by postpon-
ing the need to make some decisions while concentrating
on others. A generation system can reduce complexity in
the same way. By using revision, generation modules can
be simpler. Second, inspection of surface text is necessary
to determine whether the generated text is ambiguous.
Ambiguities result not only from the words used at the
surface level but from their relationships to other words
in the text. To detect ambiguities, the surface text must
be read. If that process reveals ambiguity, the text can be
regenerated using different words or syntax. A revision
component is the ideal location for reading generated text
and identifying ambiguities.
The Kalos system being developed by the author is de-
signed to perform both stylistic and conceptual revision.
Kalos will generate portions of a draft user&apos;s guide for
a microprocessor from an abstract architectural descrip-
tion of the microprocessor. The system achieves concep-
tual generation using a discourse schema system [McK-
ewon 1985, Paris 1985]; stylistic generation will be rule-
based. The revision component will review the generated
text and produce recommendations to the conceptual and
stylistic components as to how to improve the text.
Kalos takes a knowledge intensive approach. Each com-
ponent of the system, including conceptual generation,
stylistic generation, and revision, has access to the full
knowledge of the system, and they use the same infer-
ence system. This use of a unified knowledge base lets
the revision component identify easily both the concepts
and schema slots from which the surface string was gen-
erated. This type of association is crucial for a revision
system. In systems where knowledge is localized, it is dif-
ficult or impossible to determine the deep level knowledge
responsible for a particular subtext.
In Kalos, conceptual revision will be applied to at least
three situations. First, the Kalos revision module will
detect situations where a preferred word or phrase will
improve the text. Second, it will detect the need for an
example to produce clearer text. Third, it will attempt
to identify paragraphs that are too short or too long.
Kalos generates text aimed at engineers and others
experienced with microprocessors, using preferred words
and phrases common to user&apos;s guides covering various mi-
croprocessors. The revision module will manage use of
preferred words for two reasons. First, performing pre-
ferred word processing in the revision component reduces
the complexity of the generation components. Second,
using preferred phraseology can affect both the concep-
tual and the stylistic components, so placing the logic
for handling preferred words and phrases in the revision
component localizes the necessary knowledge structures
for easier maintenance and expansion.
For example, consider a description of the address bus
of the Zilog Z-80 microprocessor: &amp;quot;The address bus of the
Zilog Z-80 microprocessor is sixteen bits wide.&amp;quot; Using
the preferred phrase &amp;quot;address space&amp;quot;, the same fact can
be restated as follows: &amp;quot;The Zilog Z-80 has a sixty-four
kilobyte address space.&amp;quot;
</bodyText>
<page confidence="0.99313">
347
</page>
<bodyText confidence="0.999004523255814">
The first sentence relates an attribute of the address
bus, while the second sentence makes a statement di-
rectly about the processor. The second sentence both
uses a preferred way of describing the processor&apos;s maxi-
mum memory size and gives an important feature of the
microprocessor. It is thus desirable to include it in an
overview paragraph of the microprocessor rather than in
a following paragraph describing its buses.
Kalos will contain rules indicating preferred phrases for
the discourse goal of describing a microprocessor. In this
example, the relevant rule states that if the size of the
address bus is described, replace the sentence with a de-
scription of the address space of the microprocessor. As
noted above, Kalos will have a representation of the sur-
face sentence which includes the surface representation
and associations to the concepts and schemata from which
the sentence was generated. By inspecting the underly-
ing concept, Kalos can determine that the rule should be
applied. It can then locate the schemata responsible for
the text and make the revision.
The revision component of Kalos will be used to sug-
gest at which points in the text an example is appropriate.
This processing is placed in the revision module to re-
duce the complexity of the conceptual generation module.
Examples will sometimes be included in the text in the
description of individual instructions. Instructions that
are straightforward do not require an example. Consider
the add instruction of typical microprocessor. A typical
reader of a microprocessor user&apos;s guide will gain little or
no information from an example of the add instruction
after reading the description of the register transfers in-
volved. This is not the case, however, with more compli-
cated instructions involving several registers and register
transfers.
In Kalos, the process schema selects the knowledge
structures needed to describe the actions of an instruc-
tion. This schema has an optional example slot which will
initially be left empty by the conceptual generation mod-
ule. The Kalos revision module inspects the underlying
conceptual structures of instruction descriptions to deter-
mine if an instruction is complicated, based on the num-
ber of register transfers and the number of registers in-
volved. When a complicated instruction is identified, the
revision module will suggest that the generation module
expand the text by filling the example slot of the process
schema. It is then the task of the conceptual generation
component to construct an example.
Kalos&apos;s third type of conceptual revision relates to the
size of generated paragraphs. Extremely short or long
paragraphs are sometimes appropriate, but they are sus-
pect and will be examined by the revision component for
possible restructuring.
Kalos will attempt to expand small paragraphs by sug-
gesting revisions that fill optional schema slots when the
text is regenerated. In Kalos, text can be expanded by
adding an example or comparing and contrasting the ob-
ject being described to another object. The suggestions to
add text will be inspected by the generation module and
implemented if they meet two criteria. First, the knowl-
edge base must contain the information necessary to fill
the optional schema slot. Second, the inclusion of the ad-
ditional knowledge must pass a test for salience. Salience
will be based in part on deviation from typicality [Cline
and Nutter, 1989].
The revision module will also try to restructure long
paragraphs. It will look at both the surface text and
the underlying concepts from which the text was gener-
ated in order to produce suggestions for the revision. To
reduce the amount of text, the revision component will
suggest that the generation component either remove an
optional schema slot or take a different choice point in
a schema. Targets for removal include embedded com-
pare and contrast schemata and example slots in process
schemata. The revision module may also select a different
choice point in the constituency schema to list part cat-
egories rather than parts. For example, an overview of a
typical microprocessor would do better to list instruction
categories than to list over a hundred instructions. In
reducing long paragraphs, the revision module will have
some simple characterizations as to how important the
removed information is. Based on these measures, the re-
vision component may decide to retain the lengthy para-
graph.
Cline, B. E. St Nutter, J. T. (1989) Implications of natural
categories for natural language generation. In: Proceed-
ings of the First Annual SNePS Workshop.
</bodyText>
<reference confidence="0.99653585">
Gregg, L. W. St Steinberg, E. R. (Eds.) (1980) Cognitive
Processes in Writing. Hillsdale, NJ: Erlbaum.
Hayes, J. R. St Flower, L. S. (1980) Identifying the Orga-
nization of Writing Processes. In: Gregg St Steinberg.
Kempen, G. (Ed.) (1987) Natural Language Generation.
Dordrecht: Martinus Nijhoff Publishers.
McKeown, K. R. (1985) Text Generation: Using Dis-
course Strategies and Focus Constraints to Generate Nat-
ural Language Text. Cambridge: Cambridge University
Press.
Paris, C. L. (1985) Description Strategies for Naive
and Expert Users. In: Proceedings of the 23rd Annual
Meeting of the Association of Computational Linguistics.
Chicago, Ill.
Vaughan, M. M. St McDonald, D. D. (1986) A Model of
Revision in Natural Language Generation. In: Proceed-
ings of the 24th Annual Meeting of the Association for
Computational Linguistics. New York.
Yazdani, M. (1987) Reviewing as a Component of the
Text Generation Process. In: Kempen
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.038112">
<title confidence="0.999957">Conceptual Revision for Natural Language Generation</title>
<author confidence="0.999994">Ben E Cline</author>
<affiliation confidence="0.999957">Department of Computer Science</affiliation>
<address confidence="0.999007">Blacksburg, VA 24061</address>
<email confidence="0.998021">benjy@vtvml.cc.vt.edu</email>
<abstract confidence="0.998811083832335">Traditional natural language generation systems are based on a pipelined architecture. A conceptual component selects items from a knowledge base and orders them into a message to address some discourse goal. This message is passed to the stylistic component that makes lexical and syntactic choices to produce a natural language surface text. By contrast, humans producing formal text typically create drafts which they polish through revision [Hayes and Flower 1980]. One proposal for improving the quality of computer-generated multisentential text is to incorporate a draft-and-revision paradigm. Some researchers have suggested that revision in generation systems should only affect stylistic elements of the text [Vaughan and McDonald 1986]. But human writers also engage in conceptual revision, and there is reason to believe that techniques for conceptual revision should also be useful for a generation system producing formal text. Yazdani [1987] argues that both stylistic and conceptual revisions are useful. This paper extends those arguments and provides further evidence for the usefulness of conceptual as well as stylistic revision. We present strategies for identifying situations applicable to conceptual revision and techniques for effecting the revision. Why is revision important for a natural language generation system? First, Hayes and Flower suggest that revision reduces the cognitive strain of an author by postponing the need to make some decisions while concentrating on others. A generation system can reduce complexity in the same way. By using revision, generation modules can be simpler. Second, inspection of surface text is necessary to determine whether the generated text is ambiguous. Ambiguities result not only from the words used at the surface level but from their relationships to other words in the text. To detect ambiguities, the surface text must be read. If that process reveals ambiguity, the text can be regenerated using different words or syntax. A revision component is the ideal location for reading generated text and identifying ambiguities. The Kalos system being developed by the author is designed to perform both stylistic and conceptual revision. Kalos will generate portions of a draft user&apos;s guide for a microprocessor from an abstract architectural description of the microprocessor. The system achieves conceptual generation using a discourse schema system [McKewon 1985, Paris 1985]; stylistic generation will be rulebased. The revision component will review the generated text and produce recommendations to the conceptual and stylistic components as to how to improve the text. Kalos takes a knowledge intensive approach. Each component of the system, including conceptual generation, stylistic generation, and revision, has access to the full knowledge of the system, and they use the same inference system. This use of a unified knowledge base lets the revision component identify easily both the concepts and schema slots from which the surface string was generated. This type of association is crucial for a revision system. In systems where knowledge is localized, it is difficult or impossible to determine the deep level knowledge responsible for a particular subtext. In Kalos, conceptual revision will be applied to at least three situations. First, the Kalos revision module will detect situations where a preferred word or phrase will improve the text. Second, it will detect the need for an example to produce clearer text. Third, it will attempt to identify paragraphs that are too short or too long. Kalos generates text aimed at engineers and others experienced with microprocessors, using preferred words and phrases common to user&apos;s guides covering various microprocessors. The revision module will manage use of preferred words for two reasons. First, performing preferred word processing in the revision component reduces the complexity of the generation components. Second, using preferred phraseology can affect both the conceptual and the stylistic components, so placing the logic for handling preferred words and phrases in the revision component localizes the necessary knowledge structures for easier maintenance and expansion. For example, consider a description of the address bus of the Zilog Z-80 microprocessor: &amp;quot;The address bus of the Zilog Z-80 microprocessor is sixteen bits wide.&amp;quot; Using the preferred phrase &amp;quot;address space&amp;quot;, the same fact can be restated as follows: &amp;quot;The Zilog Z-80 has a sixty-four kilobyte address space.&amp;quot; 347 The first sentence relates an attribute of the address bus, while the second sentence makes a statement directly about the processor. The second sentence both uses a preferred way of describing the processor&apos;s maximum memory size and gives an important feature of the microprocessor. It is thus desirable to include it in an overview paragraph of the microprocessor rather than in a following paragraph describing its buses. Kalos will contain rules indicating preferred phrases for the discourse goal of describing a microprocessor. In this example, the relevant rule states that if the size of the address bus is described, replace the sentence with a description of the address space of the microprocessor. As noted above, Kalos will have a representation of the surface sentence which includes the surface representation and associations to the concepts and schemata from which the sentence was generated. By inspecting the underlying concept, Kalos can determine that the rule should be applied. It can then locate the schemata responsible for the text and make the revision. The revision component of Kalos will be used to suggest at which points in the text an example is appropriate. This processing is placed in the revision module to reduce the complexity of the conceptual generation module. Examples will sometimes be included in the text in the description of individual instructions. Instructions that are straightforward do not require an example. Consider the add instruction of typical microprocessor. A typical reader of a microprocessor user&apos;s guide will gain little or no information from an example of the add instruction after reading the description of the register transfers involved. This is not the case, however, with more complicated instructions involving several registers and register transfers. In Kalos, the process schema selects the knowledge structures needed to describe the actions of an instruction. This schema has an optional example slot which will initially be left empty by the conceptual generation module. The Kalos revision module inspects the underlying conceptual structures of instruction descriptions to determine if an instruction is complicated, based on the number of register transfers and the number of registers involved. When a complicated instruction is identified, the revision module will suggest that the generation module expand the text by filling the example slot of the process schema. It is then the task of the conceptual generation component to construct an example. Kalos&apos;s third type of conceptual revision relates to the size of generated paragraphs. Extremely short or long paragraphs are sometimes appropriate, but they are suspect and will be examined by the revision component for possible restructuring. Kalos will attempt to expand small paragraphs by suggesting revisions that fill optional schema slots when the text is regenerated. In Kalos, text can be expanded by adding an example or comparing and contrasting the object being described to another object. The suggestions to add text will be inspected by the generation module and implemented if they meet two criteria. First, the knowledge base must contain the information necessary to fill the optional schema slot. Second, the inclusion of the additional knowledge must pass a test for salience. Salience will be based in part on deviation from typicality [Cline and Nutter, 1989]. The revision module will also try to restructure long paragraphs. It will look at both the surface text and the underlying concepts from which the text was generated in order to produce suggestions for the revision. To reduce the amount of text, the revision component will suggest that the generation component either remove an optional schema slot or take a different choice point in a schema. Targets for removal include embedded compare and contrast schemata and example slots in process schemata. The revision module may also select a different choice point in the constituency schema to list part categories rather than parts. For example, an overview of a typical microprocessor would do better to list instruction categories than to list over a hundred instructions. In reducing long paragraphs, the revision module will have some simple characterizations as to how important the removed information is. Based on these measures, the revision component may decide to retain the lengthy paragraph.</abstract>
<note confidence="0.544472826086957">Cline, B. E. St Nutter, J. T. (1989) Implications of natural for natural language generation. In: Proceedings of the First Annual SNePS Workshop. L. W. St Steinberg, E. R. (Eds.) (1980) in Writing. NJ: Erlbaum. J. R. L. S. (1980) Identifying the Organization of Writing Processes. In: Gregg St Steinberg. G. (Ed.) (1987) Language Generation. Dordrecht: Martinus Nijhoff Publishers. K. R. (1985) Generation: Using Discourse Strategies and Focus Constraints to Generate Nat- Language Text. Cambridge University Press. Paris, C. L. (1985) Description Strategies for Naive Expert Users. In: of the 23rd Annual Meeting of the Association of Computational Linguistics. Chicago, Ill. Vaughan, M. M. St McDonald, D. D. (1986) A Model of in Natural Language Generation. In: Proceedings of the 24th Annual Meeting of the Association for Linguistics. New Yazdani, M. (1987) Reviewing as a Component of the Text Generation Process. In: Kempen</note>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>L W St Steinberg Gregg</author>
<author>E R</author>
</authors>
<date>1980</date>
<booktitle>Cognitive Processes in Writing.</booktitle>
<publisher>Erlbaum.</publisher>
<location>Hillsdale, NJ:</location>
<marker>Gregg, R, 1980</marker>
<rawString>Gregg, L. W. St Steinberg, E. R. (Eds.) (1980) Cognitive Processes in Writing. Hillsdale, NJ: Erlbaum.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J R St Flower Hayes</author>
<author>L S</author>
</authors>
<title>Identifying the Organization of Writing Processes. In: Gregg St Steinberg.</title>
<date>1980</date>
<marker>Hayes, S, 1980</marker>
<rawString>Hayes, J. R. St Flower, L. S. (1980) Identifying the Organization of Writing Processes. In: Gregg St Steinberg.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Kempen</author>
</authors>
<title>Natural Language Generation.</title>
<date>1987</date>
<publisher>Martinus Nijhoff Publishers.</publisher>
<location>Dordrecht:</location>
<marker>Kempen, 1987</marker>
<rawString>Kempen, G. (Ed.) (1987) Natural Language Generation. Dordrecht: Martinus Nijhoff Publishers.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K R McKeown</author>
</authors>
<title>Text Generation: Using Discourse Strategies and Focus Constraints to Generate Natural Language Text. Cambridge:</title>
<date>1985</date>
<publisher>Cambridge University Press.</publisher>
<marker>McKeown, 1985</marker>
<rawString>McKeown, K. R. (1985) Text Generation: Using Discourse Strategies and Focus Constraints to Generate Natural Language Text. Cambridge: Cambridge University Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C L Paris</author>
</authors>
<title>Description Strategies for Naive and Expert Users. In:</title>
<date>1985</date>
<booktitle>Proceedings of the 23rd Annual Meeting of the Association of Computational Linguistics.</booktitle>
<location>Chicago, Ill.</location>
<contexts>
<context position="2587" citStr="Paris 1985" startWordPosition="390" endWordPosition="391">n the text. To detect ambiguities, the surface text must be read. If that process reveals ambiguity, the text can be regenerated using different words or syntax. A revision component is the ideal location for reading generated text and identifying ambiguities. The Kalos system being developed by the author is designed to perform both stylistic and conceptual revision. Kalos will generate portions of a draft user&apos;s guide for a microprocessor from an abstract architectural description of the microprocessor. The system achieves conceptual generation using a discourse schema system [McKewon 1985, Paris 1985]; stylistic generation will be rulebased. The revision component will review the generated text and produce recommendations to the conceptual and stylistic components as to how to improve the text. Kalos takes a knowledge intensive approach. Each component of the system, including conceptual generation, stylistic generation, and revision, has access to the full knowledge of the system, and they use the same inference system. This use of a unified knowledge base lets the revision component identify easily both the concepts and schema slots from which the surface string was generated. This type</context>
</contexts>
<marker>Paris, 1985</marker>
<rawString>Paris, C. L. (1985) Description Strategies for Naive and Expert Users. In: Proceedings of the 23rd Annual Meeting of the Association of Computational Linguistics. Chicago, Ill.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M M St McDonald Vaughan</author>
<author>D D</author>
</authors>
<title>A Model of Revision in Natural Language Generation. In:</title>
<date>1986</date>
<booktitle>Proceedings of the 24th Annual Meeting of the Association for Computational Linguistics.</booktitle>
<location>New York.</location>
<marker>Vaughan, D, 1986</marker>
<rawString>Vaughan, M. M. St McDonald, D. D. (1986) A Model of Revision in Natural Language Generation. In: Proceedings of the 24th Annual Meeting of the Association for Computational Linguistics. New York.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Yazdani</author>
</authors>
<title>Reviewing as a Component of the Text Generation Process. In:</title>
<date>1987</date>
<location>Kempen</location>
<marker>Yazdani, 1987</marker>
<rawString>Yazdani, M. (1987) Reviewing as a Component of the Text Generation Process. In: Kempen</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>