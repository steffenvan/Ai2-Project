<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<title confidence="0.867375">
The Meaning of OF and HAVE in the USL System
</title>
<author confidence="0.370328">
Magdalena Zoeppritz
</author>
<affiliation confidence="0.206902">
IBM Germany
</affiliation>
<address confidence="0.189372333333333">
Heidelberg Scientific Center
Tiergartenstrasse 15
D-6900 Heidelberg WEST GERMANY
</address>
<bodyText confidence="0.997742222222222">
This paper shows how the transformational relationship between HAVE-sentences and
OF-phrases is used to represent data contained in sentences with HAVE as the main verb
in the context of an information system using natural language to access a relational data
base. An overview of the system first establishes the framework in which natural language
processing is done. Then ways of representing HAVE are discussed with emphasis on the
relation between HAVE and OF. The interpretation proposed and the interpretation
process are illustrated by a list of representative queries and phrases against a small data
base. In conclusion, this interpretation is extended to prepositional attributes with WITH
and WITHOUT, and problems are discussed.
</bodyText>
<sectionHeader confidence="0.990267" genericHeader="abstract">
1. Introduction
</sectionHeader>
<bodyText confidence="0.983693966666667">
The User Specialty Languages (USL) System trans-
lates input in natural language German into expres-
sions in the formal language of the data base system
associated with USL, accesses the data base with these
expressions and transmits the results to the user either
directly or after performing additional operations on
the output. The system was developed at the Heidel-
berg Scientific Center of IBM Germany by H. Leh-
mann, N. Ott, the students K. Horlander and W.
Sauermann, and the author.
USL was designed to provide data base access for
user groups whose requirements are not satisfied by
standard programs and for whom having special pro-
grams written or learning to program themselves would
not be feasible.
The system was to be capable of dealing with natu-
ral language in a variety of different application con-
texts and not restricted to a particular field or world.
This purpose determined the methods used and the
corresponding limitations of the system. Within these
limits, we have tried in the implementation to incorpo-
rate the syntactic constructions to be expected in the
context of data base interaction and to provide the
correct interpretations for them.
The data base management system is an implemen-
tation of the relational model, the Peterlee Relational
Test Vehicle (PRTV, Todd, 1975) with its data base
language ISBL. This is the target language of the
translation process. The method of translation is a
substantial extension of the methods used in the REL
System (Rapidly Extensible Language, Thompson et
al., 1969, Dostert et al., 1971). This system treats
natural language much like a formal language in that
syntactic constructions and function words are inter-
preted by the system according to the semantics of the
language built into the system, but nouns, verbs, and
adjectives are treated as variables of which only the
data type — the word class — is known.
The underlying assumption is the following: The
meanings of prepositions, dates, verbs like HAVE and
BE and syntactic constructions, on the one hand, are
independent of the subject matter; on the other hand,
nouns, verbs, and adjectives and their meanings vary
from application to application. In the context of a
given data base, these words identify the names of
relations; their meaning is restricted to the association
between word and corresponding relation. Names and
numbers identify values within tuples.
In USL, these words can be added to the system by
the user to match the shape of the relations in his data
base. A prompting routine guides the vocabulary defi-
nition and makes sure that all information needed by
the system is entered.
The advantage of not providing the user with the
vocabulary of his application already built into the
system is that he is not restricted in his choice of
words, and new words can be added easily. The dis-
Copyright 1981 by the Association for Computational Linguistics. Permission to copy without fee all or part of this material is granted
provided that the copies are not made for direct commercial advantage and the Journal reference and this copyright notice are included on
the first page. To copy otherwise, or to republish, requires a fee and/or specific permission.
</bodyText>
<page confidence="0.419566">
0362-613X/81/020109-11$01.00
</page>
<note confidence="0.43696">
American Journal of Computational Linguistics, Volume 7, Number 2, April-June 1981 109
Magdalena Zoeppritz The Meaning of OF and HAVE in the USL-System
</note>
<bodyText confidence="0.999885341463415">
advantage is that the system knows only what has
been explicitly defined by the user, and common sense
knowledge, e.g. that an employee is a person or that a
salary does not own a house, is not reflected in the
system and is not used in the interpretation process.
This also means that the interpretation can make only
very restricted use of deep case relationships, because
the information on deep cases would have to be ob-
tained from the user. We see no way as yet to elicit
this information reliably and consistently, without
confusing or boring the user.
When used for an application, then, the system
works with two vocabularies, one user-defined, con-
taining the nouns, verbs, and adjectives referring to
the data base of his application, the other system-
defined, containing prepositions, quantifiers, interroga-
tives, particles, names of days and months, nouns ref-
erring to operations like minimum, maximum, plus,
minus, etc., the verbs BE and HAVE, and adjectives
like GREATER, MORE, and LESS. The system-
defined words and their meanings to the system are
the same for all applications.
The purpose of this paper is to discuss and demon-
strate the interpretation of one of these system-
defined words: the verb HAVE when used as the main
verb of a sentence. (HAVE as an auxiliary has not
been implemented.) An overview of the system first
establishes the framework in which this interpretation
has its place. This is followed by a discussion of
HAVE in general and possible representations of it in
USL. The solution proposed here and implemented in
USL uses the transformational relationship between
HAVE-sentences and OF-phrases to represent and
search data contained in HAVE-sentences in the rela-
tion addressed by the accusative of HAVE. This in-
terpretation is applied to a list of representative quer-
ies and phrases against a small data base as a test of
the interpretation and as an illustration of the interpre-
tation process. In the concluding sections, the inter-
pretation is extended to prepositional attributes with
WITH and WITHOUT, and problems are discussed.
</bodyText>
<sectionHeader confidence="0.844537" genericHeader="keywords">
2. The System
</sectionHeader>
<bodyText confidence="0.997452285714286">
This section contains a brief overview of the sys-
tem. More detail, particularly on the interpretation, is
found in Ott (1977, 1978), and Lehmann (1978).
Information on language coverage is found in Leh-
mann et al. (1977), and documentation on the gram-
mar is in preparation.
The system consists of three parts:
</bodyText>
<listItem confidence="0.999127">
1. Parser and grammar rules
2. Function processor and interpretation
routines
3. Data base and data base language
</listItem>
<bodyText confidence="0.999576396551724">
The system contains about 800 syntactic and 200
lexical (system-defined words) rules. The rules are
mostly context-free, with some context-sensitive and
some transformational rules, written in a modified
Backus Normal Form (BNF). Each rule contains the
name of an interpretation routine written in PL/1,
which performs operations in correspondence to the
meaning of the syntactic construction.
The parser and function processor are USAGE
(User Application Generator), developed at the IBM
Paris Scientific Center, along the principles of Kay
(1967), with considerable modifications and exten-
sions. It works from left to right, bottom-up, through
the input string. The input is tested against the rules,
and rules are applied wherever there is a match, lexical
rules first. The result is several disconnected subtrees,
which are discarded, and one or more trees spanning
the entire input. Only the full parses are processed
further. Each node in the tree contains the name of
the interpretation routine from the grammar rule used
in its construction.
The function processor walks down the tree and
calls the interpretation routines associated with each
node. In the original concept developed for REL, the
interpretation routines were executed on the spot and
the result was passed as an input parameter to the next
routine. This procedure proved insufficient for the
interpretation of quantifiers, negation, and coordinated
structures. The original concept was changed so that
now the interpretation routines do not simply pass on
a result, but successively build a structure reflecting
semantic dependencies indicated by the syntactic
structures, the names of the relations, columns and
values taking part in these dependencies, as well as
information on syntactic function and scope of individ-
ual elements in the tree. This structure is processed
recursively and translated into expressions in the data
base language ISBL (cf. Ott, 1979, and Lehmann,
1978, for detail on the interpretation process).
The resulting ISBL strings are passed to the data-
base management system to access the data base and
perform the update or retrieval operations requested.
In the simple case, if the answer is a list or table of
items, and the question calls for nothing more, the
answer is formatted and printed. For yes/no ques-
tions, the return code from the data base is translated
to the proper answer. Questions involving some types
of quantification and arithmetic need further process-
ing on the answer.
The data base is relational. Relations can be
thought of as tables with rows and columns. Noun,
verbs, and adjectives refer to relation names; they can
be words in the language or words invented for a spe-
cific purpose. Names of columns within relations,
so-called role names are standardized in USL. They
correspond to the complements of the nouns, verbs, or
adjectives. This often coincides with their valence, but
is not valence in the strict sense, because it does not
</bodyText>
<page confidence="0.758877">
110 American Journal of Computational Linguistics, Volume 7, Number 2, April-June 1981
</page>
<subsectionHeader confidence="0.284962">
Magdalena Zoeppritz The Meaning of OF and HAVE in the USL-System
</subsectionHeader>
<bodyText confidence="0.997120083333333">
matter in USL whether complements are obligatory or
optional in the language, but only whether these com-
plements are needed in the application. Thus, a rela-
tion SUPPLIER can be defined with two, three, or
more columns, depending on the data and purposes of
the data base containing it, e.g.:
supplier of product
supplier of product to recipient
supplier of product to recipient at time
The standard role names are:
NOM nominative with verbs, with nouns and
adjectives, set of objects referred to
</bodyText>
<figure confidence="0.940713692307692">
ACC accusative
DAT dative
GEN genitive
OF genitive attribute
LA place
LO origin
LG goal
LD distance
LP path
TA point in time, date
TO start
TG end
TD duration
</figure>
<bodyText confidence="0.903039428571429">
(preposition) e.g. FUER, name of preposition
governed
Thus, a sentence like:
Joan is the daughter of Harry
makes the system look for a relation DAUGHTER
with two columns, NOM and OF, to add the tuple
Joan, Harry.
</bodyText>
<sectionHeader confidence="0.7382385" genericHeader="introduction">
DAUGHTER
NOM OF
</sectionHeader>
<subsectionHeader confidence="0.969523">
Joan Harry
</subsectionHeader>
<bodyText confidence="0.9999839">
The words IS, THE, and OF, as well as the
constructions SUBJECT-OF and PREDICATE-
NOMINAL-OF, are understood by the system.
DAUGHTER is known to be a noun and therefore a
relation name. JOAN and HARRY are unknown
strings and therefore assumed to be values in a rela-
tion. Within this framework, the verb HAVE is one of
the system-defined words. The following section dis-
cusses the interpretation of HAVE in the USL system
and the reasons for this interpretation.
</bodyText>
<sectionHeader confidence="0.894121" genericHeader="method">
3. The Interpretation of HAVE
</sectionHeader>
<bodyText confidence="0.996678">
Compared with the extensive discussion of the verb
BE, which is accorded special treatment both in lin-
guistics and logic, the verb HAVE does not seem to
have appeared in any way problematic. Syntactic pe-
culiarities have been observed — a transitive verb
which does not readily admit the passive — and a
wide range of meanings are given in any dictionary,
many of them idiomatic. For sentence analysis within
a data base context, the major question is that of
where to store information contained in sentences with
HAVE as the main verb and from where to retrieve it.
In the interpretation found in Cresswell (1973) or
Bennet&apos;s (1974) extension of Montague, HAVE ap-
pears as a two-place predicate.
This interpretation is also widely accepted in artifi-
cial intelligence. But, as we are going to show, the
interpretation leads to incorrect results and should be
abandoned.
HAVE as a two-place predicate in a relational data
base would have to be set up as a relation HAVE with
two columns, one for the subject, one for the objects
of HAVE-sentences. The tuples of the relation would
contain the individuals (names, part numbers, figures)
among which the relation HAVE holds. However, a
closer look at the contents of such a relation shows
that two places, one for the subject and one for the
object, are not enough. Given the facts that:
John has a secretary by the name of Pauline
John has a daughter named Polly, who is a
secretary
The corresponding data base entries in the relations
HAVE, DAUGHTER, and SECRETARY would read:
</bodyText>
<sectionHeader confidence="0.818886" genericHeader="method">
HAVE DAUGHTER SECRETARY
</sectionHeader>
<subsectionHeader confidence="0.683721">
NOM ACC NOM OF NOM OF
John Polly Polly John Polly Bill
John Pauline Pauline John
</subsectionHeader>
<bodyText confidence="0.999453">
From this would follow correctly that &amp;quot;John has
(daughter) Polly&amp;quot; and &amp;quot;John has (secretary) Pauline&amp;quot;
but also that &amp;quot;John has two secretaries&amp;quot;, because both
Polly and Pauline are secretaries. The relationship
between elements expressed as &amp;quot;x has y&amp;quot; is too vague;
it can apply in too many cases, and can often be re-
versed &amp;quot;if x has (daughter) y, then y has (parent) x&amp;quot;;
so that at least the specific relationship that makes it
possible to speak of x having y would have to be re-
corded in a third column: &amp;quot;x has y as z&amp;quot;. In that case,
the examples above would not lead to John&apos;s having
two secretaries:
</bodyText>
<sectionHeader confidence="0.636765666666667" genericHeader="method">
HAVE
NOM ACC AS
John Pauline secretary
</sectionHeader>
<subsectionHeader confidence="0.973659">
John Polly daughter
</subsectionHeader>
<bodyText confidence="0.992709557471264">
What is written in the third column sometimes ap-
pears overtly in sentences, but it is not part of the
valence of HAVE, so that it would be difficult to re-
quire HAVE to be used only with reference to the
relationship in the third column. Furthermore, the fact
that the items in the third column are names of rela-
tionships and not names of individuals is significant in
itself. This leads to the conclusion that HAVE should
not be regarded as a primitive predicate at all, but as a
derived predicate, derivable just in case some other
American Journal of Computational Linguistics, Volume 7, Number 2, April-June 1981 111
Magdalena Zoeppritz The Meaning of OF and HAVE in the USL-System
to
relationship exists between the individuals in question.
With different aims and from a different point of
view, this has already been observed by Bach
(1967:476-77):
It has often been said that be has no meaning by
itself but only in connection with Predicate, the
passive construction, and so on. The same is true
of have. The two forms are distinguished syntac-
tically from most true verbs by the fact that they
have no selectional restrictions in themselves, but
occur in constructions where the selections reach
across from &amp;quot;subject&amp;quot; to &amp;quot;object&amp;quot; or complement.
Likewise, from a semantic point of view, their
contribution to the meaning of the sentence is
determined completely by the items that they link.
Conversely, HAVE can only be used meaningfully
to link elements where some other relationship deter-
mining the nature of that link is expressed or can be
inferred. The vague term &amp;quot;some other relationship&amp;quot;
needs more clarification than can be given at this time.
It is clear that the relationship must be representable
as a two-place predicate, but many such predicates do
not serve as the basis for deriving HAVE. It seems,
for instance, that the relations expressed by action
verbs do not permit HAVE to be derived directly,
though their agent nominalizations often do:
John teaches Jack
John has Jack o Jack has John
John is the teacher of Jack
= Jack has John as his teacher
The relationships most often associated with HAVE
are those of possession and ownership. That the
meaning of HAVE is much wider is commonplace. (A
detailed analysis of the syntactic properties of HAVE
and their association with different meanings is found
in Pitha 1971 and 1972). Still, the verbs OWN and
POSSESS can be replaced by HAVE without interven-
ing nominalization and the extension of
John has a bicycle
John owns a bicycle
John has a bicycle in his possession
seems artificial. On the other hand, the conclusion:
If John has a bicycle, then he owns a bicycle
is plausible and often true, but not necessarily so, and
will be false with different choices of objects. In the
case of inalienable possession as the objects of HAVE
sentences, the conclusion is absurd, so that the objects
of HAVE and OWN are taken to refer to different
entities (Bierwisch, 1965). Nevertheless, while it is
clearly impossible to restrict the interpretation of
HAVE to possession, any other interpretation will face
the problem that HAVE is often used as a synonym of
OWN or POSSESS (cf. section 6). This may be the
reason why HAVE is often regarded as a primitive for
possession (e.g. Langacker, 1975). There is a trans-
formational relationship between HAVE and OF, al-
ready discussed e.g. in Bach (1967):
Peter has a daughter Joan
Joan is the daughter of Peter
But there is a peculiarity: Whereas HAVE can be used
with names, as well as with names and common nouns,
whereby a relationship is implied if if is not overtly
expressed (e.g., We each have our own room, I have
A101), OF is rarely used only with names:
Peter has A202
?(The) A202 of Peter
but
Peter has a room
The room of Peter
This seems to show that, unlike HAVE-sentences,
OF-phrases are acceptable only where the relationship
between individuals is not implied but overtly stated.
There is no base relationship underlying the use of
OF, the base relationship is the one preceding OF in
the OF-phrase. Furthermore, OF-phrases seem to be
the specific means to express such relationships. The
&amp;quot;secretary of Peter&amp;quot; is the individual which is related
to Peter via the relationship &amp;quot;secretary of&amp;quot;. OF-
phrases cannot be expanded in the same way as
HAVE-sentences can be expanded by AS-
complements to introduce the &amp;quot;real&amp;quot; base relationship.
And, because the base relationship is overtly stated,
OF-phrases cannot be reversed:
?(The) Peter of the secretary
In this sense, OF-phrases can be considered as being
more explicit than the HAVE-sentences into which
they can be transformed.
This led to the decision to interpret HAVE sen-
tences in USL as transformations of OF-phrases and
consequently to search or store information in HAVE-
sentences not in a relation representing the verb, but
in the columns with the role-name OF in relations
addressed by the nouns in the sentence.
The following uses of OF are not transformational-
ly related to HAVE and are excluded here:
Helen of Troy
piece of chalk
distance of 3 miles
love of God
angel of a nurse
the destruction of the city
basket (full/out) of wood
man of property
For the purposes of data base query, some of these
constructions with OF do not seem to be necessary.
Measure expressions are desirable, but have not been
implemented. An unsolved problem is how OF-
phrases resulting from nominalizations of verbs can be
related within the USL framework in a general way to
from
112 American Journal of Computational Linguistics, Volume 7, Number 2, April-June 1981
Magdalena Zoeppritz The Meaning of OF and HAVE in the USL-System
the verb or to the event referred to. The remaining
uses of OF have a range of meaning similar to HAVE
in expressing not only possession and part-of relation-
ships, but also any number of other relationships
which, in the case of OF, are explicitly named by the
noun preceding OF and, in the case of HAVE, can be
inferred from the nouns or occur explicitly in the AS-
complement.
All uses where OF is related to HAVE, as well as
some of the other uses, can in German also be ex-
pressed by genitive attributes (not all are possible in
English because of the restricted use of the genitive).
The uses related to HAVE also appear as possessive
pronouns. Genitive attributes, as well as possessive
pronouns, are interpreted in the same way as OF-
phrases. An additional selection operation for posses-
sive pronouns is necessary to obtain a match between
the individual members of the sets referred to by the
possessive and addressed by the head noun of the
possessive.
If the transformational relationship between
HAVE-sentences and OF-phrases is to be used, and
HAVE-sentences access the OF-column of relations
(the column with the role name OF), there are still
two possibilities: Given the sentence:
Which manager has a secretary?
a first interpretation addresses the OF-column of
MANAGER and compares the contents of that col-
umn with the list of secretaries: &amp;quot;Is there a manager of
somebody, is that somebody a secretary, and if so,
who is the manager&amp;quot;:
The set of x, such that x is a manager of y
and y is a secretary:
Ix I EY(M(x,Y) A S(Y))1
This interpretation is valid only where secretaries are
managed by the people whose secretary they are, but
fails for:
Which manager has room 35?
unless the room of the manager is also contained in
the OF-column of MANAGER. In general, this inter-
pretation will work only where everything a manager
can have is contained in the OF-column of MANAG-
ER and is therefore not useful as a general solution.
Furthermore, the interpretation is unable to handle
correctly sentences like:
Which manager has a musician as his secretary?
Which manager has a secretary as his musician? 1
It assigns the following interpretation to both sen-
tences:
</bodyText>
<sectionHeader confidence="0.492176" genericHeader="method">
Ix I Ey(M(x,y) A S(y) A Mu(y))1
</sectionHeader>
<bodyText confidence="0.9168068">
though their meaning is clearly different.
1 The possessive pronoun here and in the examples below
makes for better reading of the English glosses, the German exam-
ples do not have it and it is not necessary for the discussion.
A second interpretation of the sentence below:
Which manager has a secretary?
searches in the OF-column of the accusative, SECRE-
TARY, for an entry that is also listed in MANAGER:
&amp;quot;Is there a secretary of somebody, is that somebody a
manager, and if so, who is it&amp;quot;:
</bodyText>
<tableCaption confidence="0.8041265">
The set of x such that there is a y who is
a secretary and y is secretary of x and x is
a manager:
Ix I Ey(S(y,x) A M(X))}
</tableCaption>
<table confidence="0.4980775">
Accordingly:
Which manager has room 35?
</table>
<tableCaption confidence="0.281012666666667">
The set of x such that the room of x is 35
and x is a manager:
fx I A(x,35) A M(x)i
</tableCaption>
<bodyText confidence="0.977134388888889">
The second solution does not require that every-
thing a manager can have is found in the OF-column
of manager. The selection starts with the relation
named by the direct object of HAVE. In this way it is
also guaranteed that the relation specified actually
obtains between the respective individuals. In the
example:
Which manager has a secretary?
the secretary requested is not just any secretary, but
the secretary of this manager, not perhaps a colleague
of this manager and the secretary of another.
This interpretation also distinguishes between the
two sentences with AS-complements, whereby the
complement takes the place of the accusative and the
accusative is treated as an apposition to it.
Which manager has a musician as his secretary?
The set of x such that y is secretary of x
and y is a musician and x is a manager:
</bodyText>
<equation confidence="0.85908">
Ix I Ey(S(y,x) A M(X) A Mu(y))1
Which manager has a secretary as his musician?
The set of x such that y is musician of x
and y is a secretary and x is a manager:
fx I Ey(Mu(y,x) A M(x) A S(Y))1
</equation>
<bodyText confidence="0.9595532">
The first solution could be used as an escape if the
other interpretation does not yield a result, but it leads
to multiple interpretations with the same result for
relations that are defined as converses of one another.
In other cases, this interpretation leads to. answers
where the answer should be undefined:
Which manager has 5000?
(salary, personnel, or what)
Which manager has A202?
(room, car, personnel number)
As a result, the second interpretation has been imple-
mented in its strict form: There is generally no answer
defined for queries in which the object of HAVE does
not contain a relation. In human dialogue, such ques-
tions can often be answered because either it is clear
that HAVE means POSSESS or BE PART OF, or
American Journal of Computational Linguistics, Volume 7, Number 2, April-June 1981 113
Magdalena Zoeppritz The Meaning of OF and HAVE in the USL-System
because what corresponds to the relation appears from
the context.
</bodyText>
<subsectionHeader confidence="0.531862">
4. Test of the Interpretation
</subsectionHeader>
<bodyText confidence="0.999748644444445">
In order to see whether relating the subject of
HAVE to the OF-column of the accusative of HAVE
is a correct and general solution to the problem of
interpreting HAVE, this interpretation was tried out
with sentences containing HAVE and six types of
noun phrases relevant in USL: names, quantified com-
mon nouns, common nouns preceded by interrogatives,
relative pronouns, interrogative pronouns, and noun
phrases with apposition, all both in subject and object
positions. Coordinated noun phrases were not tested
separately, because they are expanded into as many
separate sentences as there are noun phrases in the
coordination. Similarly, where there is no negation,
common nouns preceded by quantifier or preceded by
interrogative do not require different interpretations
with respect to HAVE. Quantifiers trigger several
transformation operations on the ISBL-string resulting
from the translation (Ott, 1977), but the translation is
the same. Interrogatives indicate which columns of
the result are to figure in the answer. Appositions of
the type &amp;quot;secretary Moser&amp;quot;, &amp;quot;Moser as secretary&amp;quot;
(including AS-complements of HAVE) have been in-
cluded, because the first type furnishes a selection
from the relation addressed, and the second type the
relation itself.
The relevant features then are: name, noun, inter-
rogative, referent of relative pronoun, and negation.
The following section lists the test phrases for these
cases, but not all their permutations. Also, appositions
are not shown for relative clauses, for the sake of
brevity. The list illustrates how the interpretation of
HAVE outlined here is implemented in USL. For
each case, the general ISBL expression which results
from the interpretation of HAVE is formed. Then
examples are formulated against a sample data base
and translated into ISBL expressions according to the
general schema, and the results of the data base opera-
tions triggered by the ISBL expression are shown,
together with the columns taking part in the selection
operations. The examples have been left in German,
with glosses in English, because some of the construc-
tions tested cannot be formulated in English in the
same way.
The sample data base contains the following rela-
tions:
</bodyText>
<table confidence="0.884744">
MANAGER SECRETARY MUSICIAN
NOM OF NOM OF NOM
Stern Moser Moser Sauer Moser
Stern Mahle Mahle KOnig Pahle
Sauer Konig Maier Kiifer Peter
Notation:
NOM relation/value in the nominative of HAVE
ACC relation/value in the accusative of HAVE
APP relation/value in the apposition
</table>
<bodyText confidence="0.354091444444444">
NOMnom NOM-column of the relation in the nominative
OFnom OF-column of the relation in the nominative
NOMacc NOM-column of the relation in the accusative
OFacc OF-column of the relation in the accusative
NOMapp NOM-column of the relation in the apposition
OFapp OF-column of the relation in the apposition
NOMwh NOM-column of the relation with interrogative
NOMrel NOM-column of the relation governing the
relative pronoun
</bodyText>
<figure confidence="0.819120666666667">
MA relation MANAGER
SEK relation SECRETARY
NOMma NOM-column of the relation manager,
similarly NOMsek, OFma, OFsek, NOMmus
join operator
select operator
project operator
subtract
equal
and
The string
((NOMxACC);NOMnom=0Facc) °/0NOMwh
</figure>
<bodyText confidence="0.997372058823529">
reads as &amp;quot;join the relations addressed by the nomina-
tive and accusative of HAVE, select those tuples
where the NOM-column of the relation in the nomina-
tive equals the OF-column of the relation in the accu-
sative, and project for printing the NOM-column of
those relations where the noun phrases contain inter-
rogatives.&amp;quot; In terms of a question against the sample
data base this means:
Which manager has which secretary?
NOM, the relation in the nominative, is MA for MAN-
AGER, ACC is SECRETARY: MAxSEK. NOMnom
is the NOM-column of MANAGER, OFacc is the
OF-column of SECRETARY, the relation in the accu-
sative: NOMma=0Fsek. Both nominative and accu-
sative noun phrases contain interrogatives. Therefore
the NOM-columns of both must be projected for out-
put: %NOMma,NOMsek.
</bodyText>
<equation confidence="0.741511">
((MAxSEK);NOMma = OFsek) %NOMma,NOMsek
</equation>
<bodyText confidence="0.996930666666667">
The following data base operations result from this
string: join of the relations MANAGER and SECRE-
TARY:
</bodyText>
<table confidence="0.796607">
MANAGER SECRETARY
NOM OF NOM OF
Stern Moser Moser Sauer
Stern Moser Mahle KOnig
Stern Moser Maier Kiifer
Stern Mahle Moser Sauer
Stern Mahle Mahle KOnig
Stern Mahle Maier Kiifer
Sauer Konig Moser Sauer
Sauer Kbnig Mahle Konig
</table>
<subsectionHeader confidence="0.705518">
Sauer Konig Maier Kiif er
</subsectionHeader>
<bodyText confidence="0.999398">
In the actual implementation, the select operation
precedes the join for reasons of economy. The result
is an equi-join, where only those tuples are joined
where the equality requested by the select operator
</bodyText>
<page confidence="0.755427">
114 American Journal of Computational Linguistics, Volume 7, Number 2, April-June 1981
</page>
<bodyText confidence="0.917536">
Magdalena Zoeppritz The Meaning of OF and HAVE in the USL-System
exists. This join is shown for the test cases wherever
it applies. Similarly, where only one relation is in-
volved, the tuples resulting from the selection opera-
tion are shown, not the whole relation. The columns
inspected for selection are shown in full. For the
present example, the result of the equi-join is the tu-
ple:
</bodyText>
<table confidence="0.198867555555556">
( MA x SEK )
Sauer Kiinig Moser Sauer
The columns inspected for selection are the NOM-
column of MANAGER and the OF-column of SEC-
RETARY:
NOMma = OFsek
Stern Sauer
Stern K6nig
Sauer KUfer
</table>
<bodyText confidence="0.818014875">
Equality is true for &amp;quot;Sauer&amp;quot;. The corresponding data
is now projected, Sauer and the secretary of Sauer:
NOMma , NOMsek
Sauer Moser
The printed result of the operations and answer to the
question
Which manager has which secretary?
then is:
</bodyText>
<sectionHeader confidence="0.665337" genericHeader="method">
MANAGER SECRETARY
</sectionHeader>
<subsectionHeader confidence="0.810984">
Sauer Moser-
</subsectionHeader>
<bodyText confidence="0.999645923076923">
In the case of negation in wh-questions and relative
clauses, a set thus found is subtracted from the set to
be projected, so that &amp;quot;which manager does not have a
secretary&amp;quot; is interpreted as &amp;quot;find the managers who
have secretaries and subtract them from the set of
managers, to get the managers who do not have secre-
taries&amp;quot;. In yes/no questions, also, the positive case is
searched in the data base, and the answer depends on
whether the result is an empty set. So, &amp;quot;does Moser
have no manager&amp;quot; is interpreted as &amp;quot;find the manager
of Moser&amp;quot;. If the resulting list is empty, there is no
manager of Moser and the answer is YES, if it is not,
the answer is NO.2
</bodyText>
<figure confidence="0.994518333333334">
2. Relative clauses
a. Two relations
b. Relation and name
B. Negation
1. Questions
a. Two relations
b. Relation and interrogative pronoun
c. Relation and name
d. Appositions
2. Relative clauses
a. Two relations
b. Relation and name
</figure>
<bodyText confidence="0.408920666666667">
For ease of reference, the actual test cases below
are each preceded by their section headings according
to the outline above.
</bodyText>
<figure confidence="0.747070423076923">
A. No negation
A.I. Questions
A.1.a. Two relations
General schema:
((NOMxACC);NOMnom=0Facc)%NOMwh
Welchen Manager hat welche Sekretarin?
Which manager does which secretary have?
( ( SEK x MA ) ;NOMsek=0Fma) %NOMma,NOMsek
Moser Sauer Stern Moser Moser Moser Stern Moser
Mahle KOnig Stern Mahle Mahle Mahle Stern Mahle
Maier
Welche Sekretarin hat welcher Manager?
Which secretary does which manager have?
( ( MA x SEK ) ;NOMma=0Fsek) %NOMsek,NOMma
Sauer Kiinig Moser Sauer Stern Sauer Moser Sauer
Stern Kiinig
Sauer &apos;&lt;lifer
Relation and interrogative pronoun
General schema:
(ACC;OFacc)%0Facc,NOMacc
Wer hat welche Sekretarin?
Who has which secretary?
The test cases are ordered as follows: ( SEK ;OFsek) %0Fsek,NOMsek
A. No negation Moser Sauer Sauer Sauer Moser
1. Questions Mahle KOnig Knig Knig Mahle
a. Two relations: subject and object are nouns Maier KUfer KUfer KUfer Maier
</figure>
<listItem confidence="0.9273561">
b. Relation and interrogative pronoun:
subject or object is an interrogative pronoun
c. Relation and name: subject or object is a name
d. Apposition, two relations, one in the nominative
e. Apposition, two relations in the accusative
f. Apposition, three relations
g. Apposition, name in the accusative
h. Apposition, name in the nominative
i. Apposition and two interrogative pronouns
the apposition belongs to one of the pronouns
</listItem>
<footnote confidence="0.877639666666667">
2 DOCH was selected as the answer in GERMAN, because
NO confuses those speakers who use NO to answer negated ques-
tions in the affirmative.
</footnote>
<bodyText confidence="0.771384666666667">
Wen hat welche Sekretarin?
Whom does which secretary have?
The accusative is not a relation; the answer is not
defined.
A.1.c.. Relation and name
General schema:
</bodyText>
<footnote confidence="0.7551344">
(ACC;OFacc =NOM) % NOMcc
Welcher Manager hat Moser?
Which manager has Moser?
The accusative is not a relation; the answer is not
defined.
</footnote>
<table confidence="0.837301181818182">
American Journal of Computational Linguistics, Volume 7, Number 2, April-June 1981 115
Magdalena Zoeppritz The Meaning of OF and HAVE in the USL-System
Welchen Manager hat Moser?
Which manager does Moser have?
( MA ;0Facc=Moser) %NOMma
Stern Moser Moser Stern
Mahle
KOnig
A.! .d. Apposition, two relations, one in the nominative
General schema:
( (NOMxAPP)) ;NOMnom = OFapp)%NOMwh
</table>
<bodyText confidence="0.926792483870968">
only for appositions to the accusative
The relation in the apposition takes the place of the
relation in the accusative in the scheme for A.1.a. If
one of the two relations is in the nominative, and the
other in the apposition to the accusative, the formula-
tion &amp;quot;whom as&amp;quot; is equivalent to &amp;quot;which&amp;quot;.
Which manager has whom as a secretary?
is equivalent to
Which manager has which secretary?
If the question begins with the accusative, there are
two readings: one placing the apposition with the pre-
ceding nominative, and a second reading which places
it with the accusative. This second reading is the pre-
ferred reading. Therefore, the examples
Welcher Manager hat wen als Sekretarin?
Which manager has whom as his secretary?
Wen hat welcher Manager als Sekretarin?
Whom does which manager have as his secretary?
are all translated like:
Welcher Manager hat welche Sekretarin?
Which manager has which secretary?
A. 1.e. Apposition, both relations in the accusative
General schema:
( (ACC xAPP) ;NOMacc= NOMapp) °/00Fapp,NOMwh
Wer hat welchen Manager als Sekretarin?
Who has which manager as his secretary?
Welchen Manager hat wer als Sekretarin?
Which manager does who have as his secretary?
( (Ma x SEK ) ;NOMma=Nomsek) %0Fapp,NOMma
There is no equality Stern Moser NONE FOUND
so the join is empty Stern Mahle
</bodyText>
<subsectionHeader confidence="0.868743">
Sauer Maier
</subsectionHeader>
<bodyText confidence="0.600666">
A.l.f. Apposition, three relations
</bodyText>
<equation confidence="0.328323666666667">
General schema:
((NOMxACCxAPP);
NOMnom= OFapp&amp;NOMacc=NOMapp)%0Fapp
</equation>
<footnote confidence="0.7750635">
Welcher Manager hat einen Musiker als Sekretarin?
Which manager has a musician as his secretary?
</footnote>
<note confidence="0.6085534">
(( MA x MUS x SEK ) ;NOMma=0Fsek&amp;NOMmus=NOMsek) %0Fsek
Sa. Ko. Mo. Mo. Se. Stern Sauer Moser Moser Sauer
Stern KOnig Pahle Mahle
Sauer K6fer Peter Maier
A.1.g. Apposition, name in the accusative
</note>
<table confidence="0.618628">
General schema:
(ACC ;NOMacc= APP) %0Facc
Wer hat die Sekretarin Moser?
Who has the secretary Moser?
( SEK ;NOMsek=Moser) %0Fsek
Moser Sauer Moser Sauer
Mahle
Meier
</table>
<bodyText confidence="0.9929152">
Wer hat Moser als Sekretarin?
Who has Moser as his secretary?
The name and the apposition are permuted by the
grammar, so that the input to the translation is the
same as in the previous example.
</bodyText>
<subsectionHeader confidence="0.401332">
A.1.h. Apposition, name in the nominative
</subsectionHeader>
<bodyText confidence="0.931812">
General schema:
(APP; OFapp=NOM)%NOMapp
only for appositions to the accusative
Wen hat Sauer als Sekretarin?
Whom does Sauer have as his secretary?
In one reading of this sentence, &amp;quot;as a secretary&amp;quot; is
read as apposition to &amp;quot;Sauer&amp;quot;, and the question cannot
be answered. The second, preferred, reading of the
sentence places the apposition with the accusative:
</bodyText>
<table confidence="0.6989505">
( SEK ;OFsek=Sauer) %NOMsek
Moser Sauer Sauer Moser
Kcinig
Kufer
</table>
<bodyText confidence="0.9364796">
Where the name is in the apposition,
Wen hat die Sekretarin Moser?
Whom does the secretary Moser have?
there is no second reading: the answer is not defined.
A.1.i. Apposition and two interrogative pronouns
General schema:
(APP;NOMapp)%NOMapp,OFapp
only for appositions to the accusative
Wer hat wen als Sekretarin?
Who has whom as his secretary?
</bodyText>
<table confidence="0.78554475">
( SEK ;NOMsek) %0Fsek,NOMsek
Moser Sauer Moser Sauer Moser
Mahle Konig Mahle KOnig Mahle
Maier Klifer Maier Kiifer Maier
</table>
<bodyText confidence="0.994275428571428">
Wen hat wer als Manager?
Whom does who have as his manager?
Again, the first reading associates &amp;quot;manager&amp;quot; with the
noun phrase preceding it, and there is no answer. The
second reading places the apposition with &amp;quot;wen&amp;quot; and
is translated like the previous example, though with
different relations.
</bodyText>
<note confidence="0.2497145">
( MA ;NOMma) %NOMma,OFma
Stern Moser Stern Stern Moser
Stern Mahle Stern Stern Mahle
Sauer KOnig Sauer Sauer Konig
</note>
<page confidence="0.692002">
116 American Journal of Computational Linguistics, Volume 7, Number 2, April-June 1981
</page>
<figure confidence="0.7458873">
Magdalena Zoeppritz The Meaning of OF and HAVE in the USL-System
A.2. Relative clauses
A.2.a. Two relations
General schema:
((NOMxACC);NOMnom=0Facc)°/0NOMrel
Manager, der eine Sekretarin hat
Manager, who has a secretary
( ( MA x SEK) ;NOMma=0Fsek) %NOMma
Sauer Kiinig Moser Sauer Stern Sauer Sauer
Stern Kiinig
Sauer &apos;&lt;lifer
Manager, den eine Sekretarin hat
Manager, whom a secretary has
( ( SEK x MA ) ;NOMsek=0Fma) %NOMma
Moser Sauer Stern Moser Moser Moser Stern
Mahle Kiinig Stern Mahle Mahle Mahle
Maier KOnig
A.2.b. Relation and name
General schema:
(ACC;OFacc=NOM)%N0Mrel
Manager, den Moser hat
Manager whom Moser has
( MA ;OFma=Moser) %NOMma
Stern Moser Moser Stern
Mahle
Knig
Manager, der Moser.hat
Manager who has Moser
The accusative is not a relation; the answer is not
defined.
B. Negation
B.1. Questions
B.1.a. Two relations
General schema:
(NOMwh-(((NOMxACC);NOMnom=0Facc)%NOMwh))
Welcher Manager hat keine Sekretarin?
Which Manager does not have a secretary?
(NOMma-(( ( MA x Sek) ;NOMma=0Fsek) %NOMma) )
Stern Sauer KOnig Moser Sauer Stern Sauer Stern
Stern Stern Konig
</figure>
<subsectionHeader confidence="0.658454">
Sauer Sauer Kiifer Sauer
</subsectionHeader>
<bodyText confidence="0.750395">
Welchen Manager hat Keine Sekretarin?
Which manager does no secretary have?
</bodyText>
<equation confidence="0.652144">
(NOMma-(( ( SEK x MA ) ;NOMsek=0Fma) %NOMma) )
</equation>
<author confidence="0.406464">
Stern Moser Sauer Stern Moser Moser Moser Stern
Stern Mahle KOnig Stern Mahle Mahle Mahle Stern
Sauer Maier KOnig Sauer
</author>
<subsectionHeader confidence="0.561756">
B.! .b. Relation and interrogative pronoun
</subsectionHeader>
<bodyText confidence="0.992313333333333">
Who does not have a secretary?
The general schema would look like:
(NOMwh-(ACC;OFacc)%NOMacc)
But since the interrogative pronoun does not contain a
relation, there is no set to subtract from. These ques-
tions cannot be answered in USL, because the set
often implied by the context or the meaning of words
is not known. The set is given by formulations like
&amp;quot;which x does not have y&amp;quot;.
</bodyText>
<note confidence="0.625147">
B.1.c. Relation and name
</note>
<table confidence="0.9326908">
General schema:
NOT(ACC;OFacc=NOM)%NOMacc
Hat Moser keinen Manager?
Does Moser have no Manager?
NOT( MA ;OFma=Moser) %NOMma
Stern Moser Moser Stern the set is
Mahle not empty:
Maier OUCH
Hat Moser kein Manager?
Does no manager have Moser?
</table>
<bodyText confidence="0.8408525">
The accusative is not a relation; the answer is not
defined.
</bodyText>
<subsectionHeader confidence="0.634585">
B.1.d. Appositions
</subsectionHeader>
<bodyText confidence="0.990651714285714">
Wer hat die Sekretarin Moser nicht?
Who does not have the secretary Moser?
Wer hat keine Sekretarin Moser?
Who has no secretary named Moser?
These examples can be interpreted as &amp;quot;who of the
people having secretaries have a secretary other than
Moser&amp;quot;. This interpretation is not implemented, be-
cause for the majority of negated questions containing
interrogative pronouns, there is no interpretation in
USL. So the exceptions are not interpreted either, to
avoid confusion.
The general schema would look like:
(0Facc-((ACC;NOMacc=APP)%0Facc))
The examples above would be translated as:
</bodyText>
<figure confidence="0.431496625">
(0Fsek-(( SEK ;NOMsek=Moser) %0Fsek)
Sauer Moser Sauer Moser Sauer
Keinig Mahle Kinig
6fer Maier 6fer
B.2. Relative clauses
B.2.a. Two relations&apos;
General schema:
(NOMrel-(((NOMxACC);NOMnom=0Facc)%N0Mrel))
</figure>
<bodyText confidence="0.9518395">
Sekretarin, die keinen Manager hat
Secretary who does not have a manager
</bodyText>
<equation confidence="0.778977">
(NOMsek-(( ( SEK x MA ) ;NOMsek=0Fma) %NOMsek) )
</equation>
<subsectionHeader confidence="0.512361">
Moser Moser Sauer Stern Moser Moser Moser Moser
Mahle Mahle Ki;nig Stern Mahle Mahle Mahle Mahle
Maier Maier KOnig Maier
</subsectionHeader>
<bodyText confidence="0.992543">
Sekretarin, die kein Manager hat
Secretary, whom no manager has
</bodyText>
<equation confidence="0.829703">
(NOMsek-(( ( MA x SEK ) ;NOMma=0Fsek) %NOMsek) )
</equation>
<reference confidence="0.182151125">
Moser Sauer Konig Moser Sauer Stern Sauer Moser
Mahle Stern KOnig Mahle
Maier Sauer (lifer Maier
American Journal of Computational Linguistics, Volume 7, Number 2, April-June 1981 117
Magdalena Zoeppritz The Meaning of OF and HAVE in the USL-System
B.2.b. Relation and name
General schema:
(NOMrel-((ACC;OFacc=NOM)°/0NOMrel))
</reference>
<bodyText confidence="0.978083">
Sekretarin, die den Sauer nicht hat
Secretary, who does not have Sauer
The accusative is not a relation; the answer is not
defined.
Sekretarin, die der Sauer nicht hat
Secretary whom Sauer does not have
</bodyText>
<table confidence="0.902921">
(NOMsek-(( SEK ;OFsek=Sauer) %NOMsek)
Moser Moser Sauer Sauer Moser
Mahle KOnig Mahle
Maier Kiifer Maier
</table>
<sectionHeader confidence="0.967343" genericHeader="conclusions">
5. WITH and WITHOUT
</sectionHeader>
<bodyText confidence="0.996082552631579">
Prepositional phrases containing WITH and WITH-
OUT can also be related to OF-phrases (Lees
1960:93) and to HAVE (Poldauf 1967:33f.), unless
the prepositions are governed by the verb or are part
of instrumental, comitative, or adverbial phrases.
Where WITH-phrases are defined as prepositional
complements of nouns, verbs or adjectives, they are
related to the corresponding WITH-column in the
corresponding relation. WITHOUT should then be
treated as &amp;quot;not with&amp;quot;, but this is not implemented.
Phrases containing WITH and WITHOUT that are not
complements are interpreted in the following manner:
The NOM-column of the relation addressed by the
noun governing the prepositional phrase is related to
the OF-column of the relation addressed by the prepo-
sitional phrase. As a result, except for the columns for
projection and subtraction, the following groups of
phrases each have the same translation:
(SEK;OFsek=x)
secretary of x
x has secretary
x with secretary
x&apos;s secretary
NOT(SEK;OFsek=x)
not secretary of x
x has no secretary
x without secretary
not x&apos;s secretary
( (MAxSEK);NOMma=0Fsek)
secretary of manager
manager has secretary
manager with secretary
manager&apos;s secretary
NOT ( (MAxSEK);NOMma=0Fsek)
not secretary of manager
manager has no secretary
manager without secretary
not manager&apos;s secretary
</bodyText>
<sectionHeader confidence="0.973029" genericHeader="acknowledgments">
6. Problems
</sectionHeader>
<bodyText confidence="0.985890583333334">
In conclusion, some of the problems of this inter-
pretation must be pointed out. If there are relations
POSSESS or OWN in the data base, HAVE sentences
could be meant to refer to these relations. But there
is no mechanism that automatically would look for
such relations and either access them directly or resort
to them if the standard interpretation fails. A solution
to this problem is for the user to define HAVE as a
synonym for POSSESS. He can then delete the
system-defined HAVE altogether, if he is sure to use
HAVE only in the sense of OWN. But he will proba-
bly want his definition in addition to the system de-
fined HAVE. This leads to two parses and interpreta-
tions. In many cases only one of them will bring re-
sults, but sometimes both lead to the same answer.
Thus,
Does John have a secretary?
will be interpreted both as:
Is there a secretary of John?
and
Does John own a secretary?
where the second interpretation will fail. But the
query
Does John have a car?
can bring answers to both interpretations, depending
on the structure of the data base.
A consequence of not having a relation HAVE on
the one hand and on the other of expecting all adver-
biaIs and prepositional phrases to refer to columns in
relations causes difficulties where prepositions are
used in conjunction with HAVE and also with BE, as
in questions like:
Where does Peter have his office?
To whom is Peter married?
When is Peter&apos;s birthday?
Is Peter&apos;s birthday on Friday?
The German equivalent of the last two questions uses
the verb HAVE:
Wann hat Peter Geburtstag?
Hat Peter am Freitag Geburtstag?
For sentences with HAVE and BE as the main
verb, the adverbiaIs and prepositional phrases which
have been attached to the verb by the grammar are
relocated to the noun phrase addressing the relation
that contains the corresponding columns. For the
examples above, this means the columns LA, P=to,
and TA, respectively, in the relations OFFICE,
BIRTHDAY, and MARRIED.
A serious problem for which we currently have no
solution results from the fact that there is no interpre-
tation where the accusative does not contain a rela-
tion. As can be seen from the examples, it is often
intuitively clear what the interpretation of such sen-
118 American Journal of Computational Linguistics, Volume 7, Number 2, April-June 1981
Magdalena Zoeppritz The Meaning of OF and HAVE in the USL-System
tences could be. &amp;quot;The secretary who has Sauer&amp;quot; could
easily be the secretary of Sauer in the context of &amp;quot;who
has whom to work for&amp;quot;, but in the context of &amp;quot;who
has which manager&amp;quot;, the &amp;quot;secretary who has Sauer&amp;quot;
can be the one whose manager is Sauer. As was
shown above, the predicate HAVE is a derived predi-
cate, it is applicable only where a more basic associa-
tion exists between the elements in question. This
predicate is found explicitly expressed, where HAVE
sentences are expanded by AS-complements.
Peter has a musician as secretary
If there is no AS-complement and the accusative of
HAVE contains a common noun, that noun generally
points to the predicate; the AS-complement would be
redundant.
Peter has a musician
can be read as
Peter has a musician as his musician
But in the proper context, the base predicate can be
clearly something else: In a conversation about hob-
bies of secretaries, the same sentence &amp;quot;Peter has a
musician&amp;quot; can mean
Peter has a musician as his secretary
In human dialogue the general rule that the base
predicate appears in the accusative noun phrase can be
overridden by special contexts, but in the general case
the rule holds and can be used in the framework of
data base interaction. In the absence of reference to a
predicate in the accusative of HAVE, the base predi-
cate can only be deduced from the context. It can be
one of the properties of the element in the accusative,
e.g. Sauer&apos;s being a manager, a father, or an employer,
or it can coincide with the predicate referred to by the
nominative. Therefore, the attempt at interpretation
of such sentences would lead to choosing among plau-
sible alternatives, choices that would remain arbitrary
even if carefully made, and the results would be unre-
liable. We have avoided this at the cost of not provid-
ing general interpretations for these cases, even though
the individual case is often intuitively interpretable,
because we feel that in the framework of data base
interaction it is more important for the system to react
consistently and reliably than to simulate human dia-
logue.
Since this paper was originally written, the USL
System has moved to using System R as the data base
management system, with SQL as the query language
and target language for the interpretation. The
PRTV-version of USL has been used by small groups
in their applications, and initial results are encouraging
(Lehmann et al., 1978, Krause, 1979). Further study
is necessary, particularly with respect to data-base
design and vocabulary definition by users.
</bodyText>
<sectionHeader confidence="0.984938" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.9967145">
Bach, E. (1967): Have and be in English syntax,&amp;quot; Language 43,
462-485.
Bennet, M.R. (1974): &amp;quot;Some extensions of a montague fragment of
English,&amp;quot; UCLA Dissertation, Indiana Linguistics Club (1975).
Bierwisch, M. (1965): &amp;quot;Eine Hierarchie syntaktisch-semantischer
Merkmale,&amp;quot; Studio Grammatika V. 29-86.
Codd, E.F. (1972): &amp;quot;Relational completeness of data base sublan-
guages,&amp;quot; Research Report RJ 987, IBM Research Laboratory,
San Jose, California.
Cresswell, M.J. (1973): Logics and Languages. London.
Dostert, B.H., and Thompson, F.B. (1971): &amp;quot;The syntax of REL
English,&amp;quot; REL Report No. 1, California Institute of Technology,
Pasadena.
Kay, M. (1967): &amp;quot;Experiments with a powerful parser,&amp;quot; Second
International Conference on Computational Linguistics, Grenoble,
August 1967,
Krause, J. (1979): &amp;quot;Preliminary results of a user study with the
&apos;User Specialty Languages&apos; System and consequences for the
architecture of natural language interfaces,&amp;quot; Technical Report
TR 79.04.003, IBM Heidelberg Scientific Center.
Langacker, R.W. (1975): &amp;quot;Functional stratigraphy,&amp;quot; Papers from
the Parasession on Functionalism, April 17, 1975, (ed. R.E.
Grossmann, L.J. San, and T.J. Vance), Chicago Linguistic
Society, Chicago.
Lees, R.B. (1960): The Grammar of English Nominalizations, The
Hague.
Lehmann, H., Ott, N., and Zoeppritz, M. (1977): &amp;quot;Language
facilities of USL/German, Version III,&amp;quot; Technical Note TN
77.04, IBM Heidelberg Scientific Center, 1977.
Lehmann, H., Ott N., and Zoeppritz, M. (1978): &amp;quot;User experi-
ments with natural language for data base access,&amp;quot; Proceedings
7th International Conference on Computational Linguistics, Ber-
gen, Norway, August 1978.
Lehmann, H. (1978): &amp;quot;Interpretation of natural language in an
information system,&amp;quot; IBM Journal of Research and Development
22, 5, 560-572.
Ott, N. (1977): &amp;quot;Interpretation of questions with quantifiers and
negation in the USL System,&amp;quot; Technical Report TN 77.10.005,
IBM Heidelberg Scientific Center.
Ott, N. (1979): &amp;quot;Das experimentelle, auf natiirlicher Sprache
basierende Informationssystem USL,&amp;quot; Nachrichten fuer Doku-
mentation 3, 129-139.
Pitha, P. (1971): &amp;quot;Remarks on Possessivity,&amp;quot; Prague Bulletin of
Mathematical Linguistics 16, 33-46.
Pitha, P. (1972): &amp;quot;Remarks on Possessivity II,&amp;quot; Prague Bulletin of
Mathematical Linguistics 17, 25-36.
Poldauf, I. (1967): &amp;quot;The have construction,&amp;quot; Prague Studies in
English 12, 40.
Thompson, F.B., Lockemann, P.C., Dostert, B.H., and Deverill,
R.S. (1969): &amp;quot;REL: A rapidly extensible language system,&amp;quot;
Proceedings 24th National ACM Conference, New York, August
1969.
Todd, S.J.P. (1975): &apos;&apos;PRTV - A technical overview,&amp;quot; Technical
Report UKSC 0075, IBM Scientific Center, Peterlee, England,
(also in IBM Systems Journal 15, 285-308).
Magdalena Zoeppritz is a staff member at the IBM
Heidelberg Scientific Center. She received the Master of
Arts degree in English and general linguistics from the
University of Hamburg in 1968.
American Journal of Computational Linguistics, Volume 7, Number 2, April-June 1981 119
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.696953">
<title confidence="0.99988">The Meaning of OF and HAVE in the USL System</title>
<author confidence="0.999958">Magdalena Zoeppritz</author>
<affiliation confidence="0.910304666666667">IBM Heidelberg Scientific Tiergartenstrasse</affiliation>
<address confidence="0.95246">D-6900 Heidelberg WEST GERMANY</address>
<abstract confidence="0.994446555555556">This paper shows how the transformational relationship between HAVE-sentences and OF-phrases is used to represent data contained in sentences with HAVE as the main verb in the context of an information system using natural language to access a relational data base. An overview of the system first establishes the framework in which natural language processing is done. Then ways of representing HAVE are discussed with emphasis on the relation between HAVE and OF. The interpretation proposed and the interpretation process are illustrated by a list of representative queries and phrases against a small data base. In conclusion, this interpretation is extended to prepositional attributes with WITH and WITHOUT, and problems are discussed.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Moser Sauer</author>
</authors>
<title>Konig Moser Sauer Stern Sauer Moser Mahle Stern KOnig Mahle Maier Sauer (lifer</title>
<date>1981</date>
<journal>Maier American Journal of Computational Linguistics,</journal>
<volume>7</volume>
<pages>117</pages>
<marker>Sauer, 1981</marker>
<rawString>Moser Sauer Konig Moser Sauer Stern Sauer Moser Mahle Stern KOnig Mahle Maier Sauer (lifer Maier American Journal of Computational Linguistics, Volume 7, Number 2, April-June 1981 117</rawString>
</citation>
<citation valid="false">
<authors>
<author>Magdalena Zoeppritz</author>
</authors>
<title>The Meaning of OF and HAVE in the USL-System B.2.b. Relation and name General schema: (NOMrel-((ACC;OFacc=NOM)°/0NOMrel</title>
<marker>Zoeppritz, </marker>
<rawString>Magdalena Zoeppritz The Meaning of OF and HAVE in the USL-System B.2.b. Relation and name General schema: (NOMrel-((ACC;OFacc=NOM)°/0NOMrel))</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Bach</author>
</authors>
<title>Have and be in English syntax,&amp;quot;</title>
<date>1967</date>
<journal>Language</journal>
<volume>43</volume>
<pages>462--485</pages>
<contexts>
<context position="14446" citStr="Bach (1967" startWordPosition="2383" endWordPosition="2384">. Furthermore, the fact that the items in the third column are names of relationships and not names of individuals is significant in itself. This leads to the conclusion that HAVE should not be regarded as a primitive predicate at all, but as a derived predicate, derivable just in case some other American Journal of Computational Linguistics, Volume 7, Number 2, April-June 1981 111 Magdalena Zoeppritz The Meaning of OF and HAVE in the USL-System to relationship exists between the individuals in question. With different aims and from a different point of view, this has already been observed by Bach (1967:476-77): It has often been said that be has no meaning by itself but only in connection with Predicate, the passive construction, and so on. The same is true of have. The two forms are distinguished syntactically from most true verbs by the fact that they have no selectional restrictions in themselves, but occur in constructions where the selections reach across from &amp;quot;subject&amp;quot; to &amp;quot;object&amp;quot; or complement. Likewise, from a semantic point of view, their contribution to the meaning of the sentence is determined completely by the items that they link. Conversely, HAVE can only be used meaningfully </context>
<context position="16966" citStr="Bach (1967)" startWordPosition="2810" endWordPosition="2811">he case of inalienable possession as the objects of HAVE sentences, the conclusion is absurd, so that the objects of HAVE and OWN are taken to refer to different entities (Bierwisch, 1965). Nevertheless, while it is clearly impossible to restrict the interpretation of HAVE to possession, any other interpretation will face the problem that HAVE is often used as a synonym of OWN or POSSESS (cf. section 6). This may be the reason why HAVE is often regarded as a primitive for possession (e.g. Langacker, 1975). There is a transformational relationship between HAVE and OF, already discussed e.g. in Bach (1967): Peter has a daughter Joan Joan is the daughter of Peter But there is a peculiarity: Whereas HAVE can be used with names, as well as with names and common nouns, whereby a relationship is implied if if is not overtly expressed (e.g., We each have our own room, I have A101), OF is rarely used only with names: Peter has A202 ?(The) A202 of Peter but Peter has a room The room of Peter This seems to show that, unlike HAVE-sentences, OF-phrases are acceptable only where the relationship between individuals is not implied but overtly stated. There is no base relationship underlying the use of OF, t</context>
</contexts>
<marker>Bach, 1967</marker>
<rawString>Bach, E. (1967): Have and be in English syntax,&amp;quot; Language 43, 462-485.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M R Bennet</author>
</authors>
<title>Some extensions of a montague fragment of English,&amp;quot;</title>
<date>1974</date>
<journal>UCLA Dissertation, Indiana Linguistics Club</journal>
<marker>Bennet, 1974</marker>
<rawString>Bennet, M.R. (1974): &amp;quot;Some extensions of a montague fragment of English,&amp;quot; UCLA Dissertation, Indiana Linguistics Club (1975).</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Bierwisch</author>
</authors>
<title>Eine Hierarchie syntaktisch-semantischer Merkmale,&amp;quot; Studio Grammatika V.</title>
<date>1965</date>
<pages>29--86</pages>
<contexts>
<context position="16543" citStr="Bierwisch, 1965" startWordPosition="2739" endWordPosition="2740">ound in Pitha 1971 and 1972). Still, the verbs OWN and POSSESS can be replaced by HAVE without intervening nominalization and the extension of John has a bicycle John owns a bicycle John has a bicycle in his possession seems artificial. On the other hand, the conclusion: If John has a bicycle, then he owns a bicycle is plausible and often true, but not necessarily so, and will be false with different choices of objects. In the case of inalienable possession as the objects of HAVE sentences, the conclusion is absurd, so that the objects of HAVE and OWN are taken to refer to different entities (Bierwisch, 1965). Nevertheless, while it is clearly impossible to restrict the interpretation of HAVE to possession, any other interpretation will face the problem that HAVE is often used as a synonym of OWN or POSSESS (cf. section 6). This may be the reason why HAVE is often regarded as a primitive for possession (e.g. Langacker, 1975). There is a transformational relationship between HAVE and OF, already discussed e.g. in Bach (1967): Peter has a daughter Joan Joan is the daughter of Peter But there is a peculiarity: Whereas HAVE can be used with names, as well as with names and common nouns, whereby a rela</context>
</contexts>
<marker>Bierwisch, 1965</marker>
<rawString>Bierwisch, M. (1965): &amp;quot;Eine Hierarchie syntaktisch-semantischer Merkmale,&amp;quot; Studio Grammatika V. 29-86.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E F Codd</author>
</authors>
<title>Relational completeness of data base sublanguages,&amp;quot;</title>
<date>1972</date>
<tech>Research Report RJ 987,</tech>
<institution>IBM Research Laboratory,</institution>
<location>San Jose, California.</location>
<marker>Codd, 1972</marker>
<rawString>Codd, E.F. (1972): &amp;quot;Relational completeness of data base sublanguages,&amp;quot; Research Report RJ 987, IBM Research Laboratory, San Jose, California.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M J Cresswell</author>
</authors>
<title>Logics and Languages.</title>
<date>1973</date>
<location>London.</location>
<contexts>
<context position="11926" citStr="Cresswell (1973)" startWordPosition="1941" endWordPosition="1942">E Compared with the extensive discussion of the verb BE, which is accorded special treatment both in linguistics and logic, the verb HAVE does not seem to have appeared in any way problematic. Syntactic peculiarities have been observed — a transitive verb which does not readily admit the passive — and a wide range of meanings are given in any dictionary, many of them idiomatic. For sentence analysis within a data base context, the major question is that of where to store information contained in sentences with HAVE as the main verb and from where to retrieve it. In the interpretation found in Cresswell (1973) or Bennet&apos;s (1974) extension of Montague, HAVE appears as a two-place predicate. This interpretation is also widely accepted in artificial intelligence. But, as we are going to show, the interpretation leads to incorrect results and should be abandoned. HAVE as a two-place predicate in a relational data base would have to be set up as a relation HAVE with two columns, one for the subject, one for the objects of HAVE-sentences. The tuples of the relation would contain the individuals (names, part numbers, figures) among which the relation HAVE holds. However, a closer look at the contents of s</context>
</contexts>
<marker>Cresswell, 1973</marker>
<rawString>Cresswell, M.J. (1973): Logics and Languages. London.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B H Dostert</author>
<author>F B Thompson</author>
</authors>
<title>The syntax of REL English,&amp;quot;</title>
<date>1971</date>
<tech>REL Report No. 1,</tech>
<institution>California Institute of Technology,</institution>
<location>Pasadena.</location>
<marker>Dostert, Thompson, 1971</marker>
<rawString>Dostert, B.H., and Thompson, F.B. (1971): &amp;quot;The syntax of REL English,&amp;quot; REL Report No. 1, California Institute of Technology, Pasadena.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Kay</author>
</authors>
<title>Experiments with a powerful parser,&amp;quot;</title>
<date>1967</date>
<booktitle>Second International Conference on Computational Linguistics,</booktitle>
<location>Grenoble,</location>
<contexts>
<context position="7358" citStr="Kay (1967)" startWordPosition="1184" endWordPosition="1185">d interpretation routines 3. Data base and data base language The system contains about 800 syntactic and 200 lexical (system-defined words) rules. The rules are mostly context-free, with some context-sensitive and some transformational rules, written in a modified Backus Normal Form (BNF). Each rule contains the name of an interpretation routine written in PL/1, which performs operations in correspondence to the meaning of the syntactic construction. The parser and function processor are USAGE (User Application Generator), developed at the IBM Paris Scientific Center, along the principles of Kay (1967), with considerable modifications and extensions. It works from left to right, bottom-up, through the input string. The input is tested against the rules, and rules are applied wherever there is a match, lexical rules first. The result is several disconnected subtrees, which are discarded, and one or more trees spanning the entire input. Only the full parses are processed further. Each node in the tree contains the name of the interpretation routine from the grammar rule used in its construction. The function processor walks down the tree and calls the interpretation routines associated with e</context>
</contexts>
<marker>Kay, 1967</marker>
<rawString>Kay, M. (1967): &amp;quot;Experiments with a powerful parser,&amp;quot; Second International Conference on Computational Linguistics, Grenoble, August 1967,</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Krause</author>
</authors>
<title>Preliminary results of a user study with the &apos;User Specialty Languages&apos; System and consequences for the architecture of natural language interfaces,&amp;quot;</title>
<date>1979</date>
<tech>Technical Report TR 79.04.003,</tech>
<institution>IBM Heidelberg Scientific Center.</institution>
<marker>Krause, 1979</marker>
<rawString>Krause, J. (1979): &amp;quot;Preliminary results of a user study with the &apos;User Specialty Languages&apos; System and consequences for the architecture of natural language interfaces,&amp;quot; Technical Report TR 79.04.003, IBM Heidelberg Scientific Center.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R W Langacker</author>
</authors>
<title>Functional stratigraphy,&amp;quot; Papers from the Parasession on Functionalism,</title>
<date>1975</date>
<volume>17</volume>
<editor>(ed. R.E. Grossmann, L.J. San, and T.J. Vance),</editor>
<publisher>Linguistic Society,</publisher>
<location>Chicago</location>
<contexts>
<context position="16865" citStr="Langacker, 1975" startWordPosition="2793" endWordPosition="2794">lausible and often true, but not necessarily so, and will be false with different choices of objects. In the case of inalienable possession as the objects of HAVE sentences, the conclusion is absurd, so that the objects of HAVE and OWN are taken to refer to different entities (Bierwisch, 1965). Nevertheless, while it is clearly impossible to restrict the interpretation of HAVE to possession, any other interpretation will face the problem that HAVE is often used as a synonym of OWN or POSSESS (cf. section 6). This may be the reason why HAVE is often regarded as a primitive for possession (e.g. Langacker, 1975). There is a transformational relationship between HAVE and OF, already discussed e.g. in Bach (1967): Peter has a daughter Joan Joan is the daughter of Peter But there is a peculiarity: Whereas HAVE can be used with names, as well as with names and common nouns, whereby a relationship is implied if if is not overtly expressed (e.g., We each have our own room, I have A101), OF is rarely used only with names: Peter has A202 ?(The) A202 of Peter but Peter has a room The room of Peter This seems to show that, unlike HAVE-sentences, OF-phrases are acceptable only where the relationship between ind</context>
</contexts>
<marker>Langacker, 1975</marker>
<rawString>Langacker, R.W. (1975): &amp;quot;Functional stratigraphy,&amp;quot; Papers from the Parasession on Functionalism, April 17, 1975, (ed. R.E. Grossmann, L.J. San, and T.J. Vance), Chicago Linguistic Society, Chicago.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R B Lees</author>
</authors>
<title>The Grammar of English Nominalizations, The Hague.</title>
<date>1960</date>
<marker>Lees, 1960</marker>
<rawString>Lees, R.B. (1960): The Grammar of English Nominalizations, The Hague.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Lehmann</author>
<author>N Ott</author>
<author>M Zoeppritz</author>
</authors>
<title>Language facilities of USL/German, Version III,&amp;quot;</title>
<date>1977</date>
<booktitle>Technical Note TN 77.04, IBM Heidelberg Scientific Center,</booktitle>
<contexts>
<context position="6606" citStr="Lehmann et al. (1977)" startWordPosition="1069" endWordPosition="1073">ences in the relation addressed by the accusative of HAVE. This interpretation is applied to a list of representative queries and phrases against a small data base as a test of the interpretation and as an illustration of the interpretation process. In the concluding sections, the interpretation is extended to prepositional attributes with WITH and WITHOUT, and problems are discussed. 2. The System This section contains a brief overview of the system. More detail, particularly on the interpretation, is found in Ott (1977, 1978), and Lehmann (1978). Information on language coverage is found in Lehmann et al. (1977), and documentation on the grammar is in preparation. The system consists of three parts: 1. Parser and grammar rules 2. Function processor and interpretation routines 3. Data base and data base language The system contains about 800 syntactic and 200 lexical (system-defined words) rules. The rules are mostly context-free, with some context-sensitive and some transformational rules, written in a modified Backus Normal Form (BNF). Each rule contains the name of an interpretation routine written in PL/1, which performs operations in correspondence to the meaning of the syntactic construction. Th</context>
</contexts>
<marker>Lehmann, Ott, Zoeppritz, 1977</marker>
<rawString>Lehmann, H., Ott, N., and Zoeppritz, M. (1977): &amp;quot;Language facilities of USL/German, Version III,&amp;quot; Technical Note TN 77.04, IBM Heidelberg Scientific Center, 1977.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Lehmann</author>
<author>N Ott</author>
<author>M Zoeppritz</author>
</authors>
<title>User experiments with natural language for data base access,&amp;quot;</title>
<date>1978</date>
<booktitle>Proceedings 7th International Conference on Computational Linguistics,</booktitle>
<location>Bergen, Norway,</location>
<marker>Lehmann, Ott, Zoeppritz, 1978</marker>
<rawString>Lehmann, H., Ott N., and Zoeppritz, M. (1978): &amp;quot;User experiments with natural language for data base access,&amp;quot; Proceedings 7th International Conference on Computational Linguistics, Bergen, Norway, August 1978.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Lehmann</author>
</authors>
<title>Interpretation of natural language in an information system,&amp;quot;</title>
<date>1978</date>
<journal>IBM Journal of Research and Development</journal>
<volume>22</volume>
<pages>560--572</pages>
<contexts>
<context position="6538" citStr="Lehmann (1978)" startWordPosition="1060" endWordPosition="1061">F-phrases to represent and search data contained in HAVE-sentences in the relation addressed by the accusative of HAVE. This interpretation is applied to a list of representative queries and phrases against a small data base as a test of the interpretation and as an illustration of the interpretation process. In the concluding sections, the interpretation is extended to prepositional attributes with WITH and WITHOUT, and problems are discussed. 2. The System This section contains a brief overview of the system. More detail, particularly on the interpretation, is found in Ott (1977, 1978), and Lehmann (1978). Information on language coverage is found in Lehmann et al. (1977), and documentation on the grammar is in preparation. The system consists of three parts: 1. Parser and grammar rules 2. Function processor and interpretation routines 3. Data base and data base language The system contains about 800 syntactic and 200 lexical (system-defined words) rules. The rules are mostly context-free, with some context-sensitive and some transformational rules, written in a modified Backus Normal Form (BNF). Each rule contains the name of an interpretation routine written in PL/1, which performs operation</context>
<context position="8767" citStr="Lehmann, 1978" startWordPosition="1403" endWordPosition="1404">d insufficient for the interpretation of quantifiers, negation, and coordinated structures. The original concept was changed so that now the interpretation routines do not simply pass on a result, but successively build a structure reflecting semantic dependencies indicated by the syntactic structures, the names of the relations, columns and values taking part in these dependencies, as well as information on syntactic function and scope of individual elements in the tree. This structure is processed recursively and translated into expressions in the data base language ISBL (cf. Ott, 1979, and Lehmann, 1978, for detail on the interpretation process). The resulting ISBL strings are passed to the database management system to access the data base and perform the update or retrieval operations requested. In the simple case, if the answer is a list or table of items, and the question calls for nothing more, the answer is formatted and printed. For yes/no questions, the return code from the data base is translated to the proper answer. Questions involving some types of quantification and arithmetic need further processing on the answer. The data base is relational. Relations can be thought of as tabl</context>
</contexts>
<marker>Lehmann, 1978</marker>
<rawString>Lehmann, H. (1978): &amp;quot;Interpretation of natural language in an information system,&amp;quot; IBM Journal of Research and Development 22, 5, 560-572.</rawString>
</citation>
<citation valid="true">
<authors>
<author>N Ott</author>
</authors>
<title>Interpretation of questions with quantifiers and negation in the USL System,&amp;quot;</title>
<date>1977</date>
<tech>Technical Report TN 77.10.005,</tech>
<institution>IBM Heidelberg Scientific Center.</institution>
<contexts>
<context position="6511" citStr="Ott (1977" startWordPosition="1056" endWordPosition="1057">n HAVE-sentences and OF-phrases to represent and search data contained in HAVE-sentences in the relation addressed by the accusative of HAVE. This interpretation is applied to a list of representative queries and phrases against a small data base as a test of the interpretation and as an illustration of the interpretation process. In the concluding sections, the interpretation is extended to prepositional attributes with WITH and WITHOUT, and problems are discussed. 2. The System This section contains a brief overview of the system. More detail, particularly on the interpretation, is found in Ott (1977, 1978), and Lehmann (1978). Information on language coverage is found in Lehmann et al. (1977), and documentation on the grammar is in preparation. The system consists of three parts: 1. Parser and grammar rules 2. Function processor and interpretation routines 3. Data base and data base language The system contains about 800 syntactic and 200 lexical (system-defined words) rules. The rules are mostly context-free, with some context-sensitive and some transformational rules, written in a modified Backus Normal Form (BNF). Each rule contains the name of an interpretation routine written in PL/</context>
<context position="25050" citStr="Ott, 1977" startWordPosition="4200" endWordPosition="4201">on nouns, common nouns preceded by interrogatives, relative pronouns, interrogative pronouns, and noun phrases with apposition, all both in subject and object positions. Coordinated noun phrases were not tested separately, because they are expanded into as many separate sentences as there are noun phrases in the coordination. Similarly, where there is no negation, common nouns preceded by quantifier or preceded by interrogative do not require different interpretations with respect to HAVE. Quantifiers trigger several transformation operations on the ISBL-string resulting from the translation (Ott, 1977), but the translation is the same. Interrogatives indicate which columns of the result are to figure in the answer. Appositions of the type &amp;quot;secretary Moser&amp;quot;, &amp;quot;Moser as secretary&amp;quot; (including AS-complements of HAVE) have been included, because the first type furnishes a selection from the relation addressed, and the second type the relation itself. The relevant features then are: name, noun, interrogative, referent of relative pronoun, and negation. The following section lists the test phrases for these cases, but not all their permutations. Also, appositions are not shown for relative clauses,</context>
</contexts>
<marker>Ott, 1977</marker>
<rawString>Ott, N. (1977): &amp;quot;Interpretation of questions with quantifiers and negation in the USL System,&amp;quot; Technical Report TN 77.10.005, IBM Heidelberg Scientific Center.</rawString>
</citation>
<citation valid="true">
<authors>
<author>N Ott</author>
</authors>
<title>Das experimentelle, auf natiirlicher Sprache basierende Informationssystem USL,&amp;quot;</title>
<date>1979</date>
<journal>Nachrichten fuer Dokumentation</journal>
<volume>3</volume>
<pages>129--139</pages>
<contexts>
<context position="8748" citStr="Ott, 1979" startWordPosition="1400" endWordPosition="1401">procedure proved insufficient for the interpretation of quantifiers, negation, and coordinated structures. The original concept was changed so that now the interpretation routines do not simply pass on a result, but successively build a structure reflecting semantic dependencies indicated by the syntactic structures, the names of the relations, columns and values taking part in these dependencies, as well as information on syntactic function and scope of individual elements in the tree. This structure is processed recursively and translated into expressions in the data base language ISBL (cf. Ott, 1979, and Lehmann, 1978, for detail on the interpretation process). The resulting ISBL strings are passed to the database management system to access the data base and perform the update or retrieval operations requested. In the simple case, if the answer is a list or table of items, and the question calls for nothing more, the answer is formatted and printed. For yes/no questions, the return code from the data base is translated to the proper answer. Questions involving some types of quantification and arithmetic need further processing on the answer. The data base is relational. Relations can be</context>
</contexts>
<marker>Ott, 1979</marker>
<rawString>Ott, N. (1979): &amp;quot;Das experimentelle, auf natiirlicher Sprache basierende Informationssystem USL,&amp;quot; Nachrichten fuer Dokumentation 3, 129-139.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Pitha</author>
</authors>
<title>Remarks on Possessivity,&amp;quot;</title>
<date>1971</date>
<journal>Prague Bulletin of Mathematical Linguistics</journal>
<volume>16</volume>
<pages>33--46</pages>
<contexts>
<context position="15945" citStr="Pitha 1971" startWordPosition="2634" endWordPosition="2635">icate, but many such predicates do not serve as the basis for deriving HAVE. It seems, for instance, that the relations expressed by action verbs do not permit HAVE to be derived directly, though their agent nominalizations often do: John teaches Jack John has Jack o Jack has John John is the teacher of Jack = Jack has John as his teacher The relationships most often associated with HAVE are those of possession and ownership. That the meaning of HAVE is much wider is commonplace. (A detailed analysis of the syntactic properties of HAVE and their association with different meanings is found in Pitha 1971 and 1972). Still, the verbs OWN and POSSESS can be replaced by HAVE without intervening nominalization and the extension of John has a bicycle John owns a bicycle John has a bicycle in his possession seems artificial. On the other hand, the conclusion: If John has a bicycle, then he owns a bicycle is plausible and often true, but not necessarily so, and will be false with different choices of objects. In the case of inalienable possession as the objects of HAVE sentences, the conclusion is absurd, so that the objects of HAVE and OWN are taken to refer to different entities (Bierwisch, 1965). </context>
</contexts>
<marker>Pitha, 1971</marker>
<rawString>Pitha, P. (1971): &amp;quot;Remarks on Possessivity,&amp;quot; Prague Bulletin of Mathematical Linguistics 16, 33-46.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Pitha</author>
</authors>
<title>Remarks on Possessivity II,&amp;quot;</title>
<date>1972</date>
<journal>Prague Bulletin of Mathematical Linguistics</journal>
<volume>17</volume>
<pages>25--36</pages>
<marker>Pitha, 1972</marker>
<rawString>Pitha, P. (1972): &amp;quot;Remarks on Possessivity II,&amp;quot; Prague Bulletin of Mathematical Linguistics 17, 25-36.</rawString>
</citation>
<citation valid="true">
<authors>
<author>I Poldauf</author>
</authors>
<title>The have construction,&amp;quot;</title>
<date>1967</date>
<journal>Prague Studies in English</journal>
<volume>12</volume>
<pages>40</pages>
<marker>Poldauf, 1967</marker>
<rawString>Poldauf, I. (1967): &amp;quot;The have construction,&amp;quot; Prague Studies in English 12, 40.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F B Thompson</author>
<author>P C Lockemann</author>
<author>B H Dostert</author>
<author>R S Deverill</author>
</authors>
<title>REL: A rapidly extensible language system,&amp;quot;</title>
<date>1969</date>
<booktitle>Proceedings 24th National ACM Conference,</booktitle>
<location>New York,</location>
<contexts>
<context position="2448" citStr="Thompson et al., 1969" startWordPosition="384" endWordPosition="387">d the corresponding limitations of the system. Within these limits, we have tried in the implementation to incorporate the syntactic constructions to be expected in the context of data base interaction and to provide the correct interpretations for them. The data base management system is an implementation of the relational model, the Peterlee Relational Test Vehicle (PRTV, Todd, 1975) with its data base language ISBL. This is the target language of the translation process. The method of translation is a substantial extension of the methods used in the REL System (Rapidly Extensible Language, Thompson et al., 1969, Dostert et al., 1971). This system treats natural language much like a formal language in that syntactic constructions and function words are interpreted by the system according to the semantics of the language built into the system, but nouns, verbs, and adjectives are treated as variables of which only the data type — the word class — is known. The underlying assumption is the following: The meanings of prepositions, dates, verbs like HAVE and BE and syntactic constructions, on the one hand, are independent of the subject matter; on the other hand, nouns, verbs, and adjectives and their me</context>
</contexts>
<marker>Thompson, Lockemann, Dostert, Deverill, 1969</marker>
<rawString>Thompson, F.B., Lockemann, P.C., Dostert, B.H., and Deverill, R.S. (1969): &amp;quot;REL: A rapidly extensible language system,&amp;quot; Proceedings 24th National ACM Conference, New York, August 1969.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S J P Todd</author>
</authors>
<title>PRTV - A technical overview,&amp;quot;</title>
<date>1975</date>
<journal>IBM Systems Journal</journal>
<tech>Technical Report UKSC 0075,</tech>
<volume>15</volume>
<pages>285--308</pages>
<institution>IBM Scientific Center,</institution>
<location>Peterlee, England,</location>
<note>also in</note>
<contexts>
<context position="2215" citStr="Todd, 1975" startWordPosition="348" endWordPosition="349">ld not be feasible. The system was to be capable of dealing with natural language in a variety of different application contexts and not restricted to a particular field or world. This purpose determined the methods used and the corresponding limitations of the system. Within these limits, we have tried in the implementation to incorporate the syntactic constructions to be expected in the context of data base interaction and to provide the correct interpretations for them. The data base management system is an implementation of the relational model, the Peterlee Relational Test Vehicle (PRTV, Todd, 1975) with its data base language ISBL. This is the target language of the translation process. The method of translation is a substantial extension of the methods used in the REL System (Rapidly Extensible Language, Thompson et al., 1969, Dostert et al., 1971). This system treats natural language much like a formal language in that syntactic constructions and function words are interpreted by the system according to the semantics of the language built into the system, but nouns, verbs, and adjectives are treated as variables of which only the data type — the word class — is known. The underlying a</context>
</contexts>
<marker>Todd, 1975</marker>
<rawString>Todd, S.J.P. (1975): &apos;&apos;PRTV - A technical overview,&amp;quot; Technical Report UKSC 0075, IBM Scientific Center, Peterlee, England, (also in IBM Systems Journal 15, 285-308).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Magdalena</author>
</authors>
<title>Zoeppritz is a staff member at the IBM Heidelberg Scientific Center. She received the Master of Arts degree in English and general linguistics from the University of Hamburg in</title>
<date>1968</date>
<marker>Magdalena, 1968</marker>
<rawString>Magdalena Zoeppritz is a staff member at the IBM Heidelberg Scientific Center. She received the Master of Arts degree in English and general linguistics from the University of Hamburg in 1968.</rawString>
</citation>
<citation valid="true">
<date>1981</date>
<journal>American Journal of Computational Linguistics,</journal>
<volume>7</volume>
<pages>119</pages>
<marker>1981</marker>
<rawString>American Journal of Computational Linguistics, Volume 7, Number 2, April-June 1981 119</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>