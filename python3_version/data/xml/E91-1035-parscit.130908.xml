<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<note confidence="0.658662">
PROOF FIGURES AND STRUCTURAL OPERATORS
FOR CATEGORIA.L GRAMMAR*
Guy Barry, Mark Hepplet, Neil Leslie and Glyn Morrill&apos;
Centre for Cognitive Science, University of Edinburgh
2 Buccleuch Place, Edinburgh EH8 9LW, Scotland
guyecogsci.ed.ac.uk, mrhScl.cam.ac.uk,
</note>
<email confidence="0.405208">
neilecogaci.ed.ac.uk, Glyn.Morrillelet.ruu.n1
</email>
<sectionHeader confidence="0.964676" genericHeader="abstract">
ABSTRACT
</sectionHeader>
<bodyText confidence="0.998812416666667">
Use of Lambek&apos;s (1958) categorial grammar for lin-
guistic work has generally been rather limited. There
appear to be two main reasons for this: the nota-
tions most. commonly used can sometimes obscure the
structure of proofs and fail to clearly convey linguistic
structure, and the calculus as it stands is apparently
not powerful enough to describe many phenomena en-
countered in natural language.
In this paper we suggest ways of dealing with both
these deficiencies. Firstly, we reformulate Lambek&apos;s
system using proof figures based on the &apos;natural de-
duction&apos; notation commonly used for derivations in
logic, and discuss some of the related proof-theory.
Natural deduction is generally regarded as the most
economical and comprehensible system for working
on proofs by hand, and we suggest that the same
advantages hold for a similar presentation of cate-
gorial derivations. Secondly, we introduce devices
called structural modalities, based on the structural
rules found in logic, for the characterization of com-
mutation, iteration and optionality. This permits the
description of linguistic phenomena which Lambek&apos;s
system does not capture with the desired sensitivity
and generality.
</bodyText>
<sectionHeader confidence="0.895692" genericHeader="keywords">
LAMBEK CATEGORIAL
GRAMMAR
PRELIMINARIES
</sectionHeader>
<bodyText confidence="0.999631625">
Categorial grammar is an approach to language de-
scription in which the combination of expressions is
governed not by specific linguistic rules but by general
logical inference mechanisms. The point of departure
can be seen as Frege&apos;s position that there are certain
&apos;complete expressions&apos; which are the primary bear-
ers of meaning, and that the meanings of &apos;incomplete
expressions&apos; (including words) are derivative, being
</bodyText>
<listItem confidence="0.970892571428571">
• We would like to thank Robin Cooper, Martin Picker-
ing and Pete Whitelock for conunents and discussion relat-
ing to this work. The authors were respectively supported
by SERC Research Studentship 88306971; ESRC Re-
search Studentship C00428722003; ESPRIT Project 393
and Cognitive Science/HCI Research Initiative 89/CS01
and 89/CS25; SERC Postdoctoral Fellowship B/ITF/206.
</listItem>
<footnote confidence="0.710342">
I Now at University of Cambridge Computer Labora-
tory, New MIISCIIITIS Site, Pembroke Street, Cambridge
032 3Q(:, England.
1Now at OTS, Trans 10, 3512 JK Utrecht, Netherlands.
</footnote>
<bodyText confidence="0.9998105">
their contribution to the meanings of the expressions
in which they occur. We suppose that linguistic ob-
jects have (at least) two components, form (syntactic)
and meaning (semantic). We refer to sets of such ob-
jects as categories, which are indexed by types, and
stipulate that all complete expressions belong to cat-
egories indexed by primitive types. We then recur-
sively classify incomplete expressions according to the
means by which they combine (syntactically and se-
mantically) with other expressions.
In the &apos;syntactic calculus&apos; of Lambek (1958) (var-
iously known as Lambek categorial grammar, Lambek
calculus, or L), expressions are classified by means of
a set of bidirectional types as defined in (1).
</bodyText>
<listItem confidence="0.860981">
(1) a. If X is a primitive type then X is a type.
</listItem>
<bodyText confidence="0.936649">
b. If X and Y are types then X/ Y and Y \ X
are types.
X/ Y (resp. Y X) is the type of incomplete expres-
sions that syntactically combine with a following (resp.
preceding) expression of type Y to form an expression
of type X, and semantically are functions from mean-
ings of type Y to meanings of type X.
Let us assume complete expressions to be sen-
tences (indexed by the primitive type S), noun phrases
(NP), common nouns (N), and non-finite verb phrases
(VP). By the above definitions, we may assign types
to words as follows:
</bodyText>
<listItem confidence="0.917989">
(2) John, Mary, Suzy := NP
</listItem>
<bodyText confidence="0.42691">
man, paper := N
</bodyText>
<equation confidence="0.9460106">
the := NP/N
likes, read := (NP\S)/NP
quickly := (NP\S)\(NP\S)
without := ((NP\S)\(NP\S))/VP
understanding := VP/NP
</equation>
<bodyText confidence="0.99958125">
We represent the form of a word by printing it in
italics, and its meaning by the same word in boldface.
For instance, the form of the word &amp;quot;man&amp;quot; will be
represented as man and its meaning as man.
</bodyText>
<sectionHeader confidence="0.835648" genericHeader="method">
PROOF FIGURES
</sectionHeader>
<bodyText confidence="0.9854932">
We shall present the rules of L by means of proof
figures, based on Prawitz&apos; (1965) systems of &apos;nat-
ural deduction&apos;. Natural deduction was developed
by Gentzen (1936) to reflect the natural process of
mathematical reasoning in which one uses a number
of inference rules to justify a single proposition, the
conclusion, on the basis of having justifications of a
number of propositions, called assumptions. During
- 198 -
a proof one may temporarily make a new assumption
if one of the rules licenses the subsequent withdrawal
of this assumption. The rule is said to discharge the
assumption. The conclusion is said to depend on the
undischarged assumptions, which are called the hy-
potheses of the proof.
A proof is usually represented as a tree with the
assumptions as leaves and the conclusion at the root.
Finding a proof is then seen as the task of filling this
tree in, and the inference rules as operations on the
partially completed tree. One can write the infer-
ence rules out as such operations, but as these are
rather unwieldy it is more usual to present the rules
in a more compact form as operations from a set of
subproofs (the premises) to a conclusion, as follows
(where m &gt; 1 and n &gt; 0):
</bodyText>
<equation confidence="0.921736">
( 3 ) [Y0i
Xm-Ini- 1
</equation>
<bodyText confidence="0.978042076923077">
This states that a proof of Z can be obtained from
proofs of X1, , xn, by discharging appropriate oc-
currences of assumptions Y1, • • . Y. The use of
square brackets around an assumption indicates its
discharge. It is the name of the rule, and the index i
is included to disambiguate proofs, since there may be
an uncertainty as to which rule has discharged which
assumption.
As propositions are represented by formulas in
logic, so linguistic categories are represented by type
formulas in L. The left-to-right order of types indi-
cates the order in which the forms of subexpressions
are to be concatenated to give a composite expres-
sion derived by the proof. Thus we must take note
of the order and place of occurrence of the premises
of the rules in the proof figures for L. There is also
a problem with the presentation of the rules in the
compact notation as some of the rules will be written
as if they had a number of conclusions, as follows:
(4)
nation rule for / states that a proof of type X f Y
followed by a proof of type Y yields a proof of type
X. Similarly the elimination rule for \ states that
a proof of type nx preceded by a proof of type Y
yields a proof of type X. Using the notation above,
we may write these rules as follows:
</bodyText>
<listItem confidence="0.776704">
(6) a. &apos; • b.
</listItem>
<sectionHeader confidence="0.632325" genericHeader="method">
X./Y V Y Y\X
/E
</sectionHeader>
<bodyText confidence="0.999750866666667">
We shall give a semantics for this calculus in the same
style as the traditional functional semantics for intu-
itionistic logic (Troelstra 1969; Howard 1980). In the
two rules above, the meaning of the composite expres-
sion (of type X) is given by the functional application
of the meaning of the functor expression (i.e. the one
of type X/ Y or Y\ X) to the meaning of the argument
expression (i.e. the one of type Y). We represent func-
tion application by juxtaposition, so that likes John
means likes applied to John.
Using the rules /E and \E, we may derive &amp;quot;Mary
likes John&amp;quot; as a sentence as follows:
The meaning of, the sentence is read off the proof by
interpreting the /E and \E inferences as function ap-
plication, giving the following:
</bodyText>
<listItem confidence="0.53375">
(8) (likes John) Mary
</listItem>
<bodyText confidence="0.999666444444445">
The introduction rule for / states that where the
rightmost assumption in a proof of the type X is of
type Y, that assumption may be discharged to give
a proof of the type X/Y. Similarly, the introduction
rule for \ states that where the leftmost assumption
in a proof of the type X is of type Y, that assumption
may be discharged to give a proof of the type Y \X .
Using the notation above, we may write these rules
as follows:
</bodyText>
<figure confidence="0.813005833333333">
\E
X
(7) Mary likes John
NP
(NP\S)/NP NP
/E
NP\S
\E
X„,
Il
yn
This rule should be seen as a shorthand for:
( 5 )
(9) a. V.)i
.
X/Y/P
X1
Xi • • • Xm
</figure>
<bodyText confidence="0.997289269230769">
If the rules are viewed in this way it will be seen that
they do not violate the single conclusion nature of the
figures.
As with standard natural deduction, for each con-
nective there is an elimination rule which Eitates how
a type containing that connective may be Consumed,
and an introduction rule which states how a type con-
taining that connective may be derived. The elimi-
Note however that this notation does not embody the
conditions that have been stated, namely that in /I
Y is the rightmost undischarged assumption in the
proof of X, and in \I Y is the leftmost undischarged
assumption in the proof of X. In addition, L carries
the condition that in both /I and \I the sole assump-
tion in a proof cannot be withdrawn, so that no types
are assigned to the empty string.
In the introduction rules, the meaning of the re-
suit is given by lambda-abstraction over the meaning
of the discharged assumption, which can be repre-
sented by a variable of the appropriate type. The re-
lationship between lambda-abstraction and function
application is given by the law of /3-equality in (10),
- 199
where a0ly] means &apos;a with substituted for y&apos;. (See
Hindley and Seldin 1986 for a full exposition of the
typed lambda-calculus.)
</bodyText>
<listItem confidence="0.74421">
(10) (AY[a])O = (OM
</listItem>
<bodyText confidence="0.999586545454546">
Since exactly one assumption must be withdrawn, the
resulting lambda-terms have the property that each
binder binds exactly one variable occurrence; we refer
to this as the &apos;single-bind&apos; property (van Benthem
1983). The rules in (9) are analogous to the usual
natural deduction rule of conditionalization, except
that the latter allows withdrawal of any number of
assumptions, in any position.
The /I and \1 rules are commonly used in con-
structions that are assumed in other theories to in-
volve &apos;empty categories&apos;, such as (11):
</bodyText>
<listItem confidence="0.851259">
(11) (John is the man) who Mary likes.
</listItem>
<bodyText confidence="0.708988">
We assume that the relative clause modifies the noun
&amp;quot;man&amp;quot; and hence should receive the type N \N. The
string &amp;quot;Mary likes&amp;quot; can be derived as of type S/NP,
and so assignment of the type (N\N)/(S/NP) to the
object relative pronoun &amp;quot;who&amp;quot; allows the analysis in
</bodyText>
<listItem confidence="0.854209">
(12) (cf. Ades and Steedman 1982):
</listItem>
<figure confidence="0.539333142857143">
(12) who Mary likes
(NP\S)/NP [N111 /E
NP &apos; NP\S
E
(N\N)/(S/NP) S/NP
/E
N\N
</figure>
<bodyText confidence="0.924199666666667">
The meaning of the string can be read off the proof by
interpreting /I and \I as lambda-abstraction, giving
the term in (13):
</bodyText>
<listItem confidence="0.655093">
(13) who (Ax[(likes x) Mary])
</listItem>
<bodyText confidence="0.999113">
Note that this mechanism is only powerful enough
to allow constructions where the extraction site is
clause-peripheral; for non-peripheral extraction (and
multiple extraction) we appear to need an extended
logic, as described later.
</bodyText>
<sectionHeader confidence="0.984895" genericHeader="method">
DERIVATIONAL EQUIVALENCE AND
NORMAL FORMS
</sectionHeader>
<bodyText confidence="0.9992384">
In the above system it is possible to give more than
one proof for a single reading of a string. For exam-
ple, conipare the derivation of &amp;quot;Mary likes John&amp;quot; in
(7), and the corresponding lambda-term in (8), with
the derivation in (14) and the lambda-term in (15):
</bodyText>
<figure confidence="0.617936666666667">
(14) Mary likes John
(NP \ S)/NP [NP)&apos;
/E
NP NP\S
\E
/11
S/NP NP
/E
(15) x[(likes x) Mary]) John
</figure>
<bodyText confidence="0.9993851">
By the definition in (10), the terms in (8) and (15) are
fl-equal, and thus have the same meaning; the proofs
in (7) and (14) are said to exhibit derivational equiva-
lence. The relation of derivational equivalence clearly
divides the set of proofs into equivalence classes. We
shall define a notion of normal form for proofs (and
their corresponding terms) in such a way that each
equivalence class of proofs contains a unique normal
form (cf. Hepple and Morrill 1989).
We first define the notions of contraction and reduc-
tion. A contraction schema R I&gt; C consists of a par-
ticular pattern R within proofs or terms (the redex)
and an equal and simpler pattern C (the contractum).
A reduction consists of a series of contractions, each
replacing an occurrence of a redex by its contractum.
A normal form is then a proof or term on which no
contractions are possible.
We define the following contraction schemas: weak
contraction in (16) for proofs, and 13-contraction in
(17) for the corresponding lambda-terms.
</bodyText>
<equation confidence="0.92176">
(16) a. [Yy
X
X/Y/P
/E
b.
Y Y \X
• \E
(17) y[a])/3 a[fly]
</equation>
<bodyText confidence="0.999666307692308">
From (10) we see that /3-contraction preserves mean-
ing according to the standard functional interpreta-
tion of typed lambda-calculus. Therefore the cor-
responding weak contraction preserves the semantic
functional interpretation of the proof; in addition it
preserves the syntactic string interpretation since the
redex and contractum contain the same leaves in the
same order. For example, the proof in (14) weakly
contracts to the proof in (7), and correspondingly the
term in (15) fl-contracts to the term in (8). The
results of these contractions cannot be further con-
tracted and so are the respective results of reduction
to weak normal form and /3-normal form.
Weak contraction in L strictly decreases the size
of proofs (e.g. the number of symbols in a contractum
is always less than that in a redex), and /3-contraction
in the single-bind lambda-calculus strictly decreases
the size of terms. Thus there is strong normalization
with respect to these reductions: every proof (term)
reduces to a weak normal form (13-normal form) in
a finite number of steps. This has as a corollary
(normalization) that every proof (term) has a nor-
mal form, so that normal forms are fully represen-
tative: every proof (term) is equal to one in normal
form. Since reductions preserve interpretations, an
interpretation of a normal form will always be the
</bodyText>
<equation confidence="0.97225875">
/II
X
r&gt;
- 200 -
</equation>
<bodyText confidence="0.999349666666667">
same as that of the original proof (term). Thus re-
stricting the search to just such proofs addresses the
problem of derivational equivalence, while preserving
generality in that all interpretations are found.
Proofs in L and single-bind lambda-terms (like
the more general cases of intuitionistic proofs and full
lambda-terms) exhibit a property called the Church-
Rosser property,&apos; from which it follows that normal
forms are unique.2
For formulations of L that are oriented to pars-
ing, defining normal forms for proofs provides a basis
for handling the so-called &apos;spurious ambiguity&apos; prob-
lem, by providing for parsing methods which return
all and only normal form proofs. See Konig (1989)
and Ilcpple (1990).
</bodyText>
<sectionHeader confidence="0.974142" genericHeader="method">
STRUCTURAL MODALITIES
</sectionHeader>
<bodyText confidence="0.99682795">
From a logical perspective, L can be seen as the weak-
est of a hierarchy of implicational sequent logics which
differ in the amount of freedom allowed in the use
of assumptions. The highest of these is (the impli-
cational fragment of) the logistic calculus 1.1 intro-
duced in Gentzen (1936). Gentzen formulated this
calculus in terms of sequences of propositions, and
then provided explicit structural rules to show the
permitted ways to manipulate these sequences. The
structural rules are permutation, which allows the or-
der of the assumptions to be changed; contraction,
which allows an assumption to be used more than
once; and weakening, which allows an assumption to
be ignored. For a discussion of the logics generated
by dropping some or all of these structural rules see
e.g. van Benthem (1987).
Although freely applying structural rules are clear-
ly not appropriate in categorial grammars for linguis-
tic description, commutable, iterable and optional el-
ements do occur in natural language. This suggests
that we should have a way to indicate that structural
operations are permissible on specific types, while still
forbidding their general application. To achieve this
‘ve propose to follow the precedent of the .exponen-
lial operators of Girard&apos;s (1987) linear sequent logic,
which lacks the rules of contraction and weakening,
by suggesting a similar system of operators called
structural modalities. Here we shall describe a sys-
tem of universal modalities, which allow us to deal
with the logic of commutable, iterable and. optional
extractions.3
For each universal modality we shall present an
elimination rule, and one or more &apos;operational rules&apos;,
‘vhicli are essentially controlled versions of structural
1This is the property that if a proof (term) Ai reduces
to two proofs (terms) Nt, N2, then there is a proof (term)
to which both NI and N2 reduce.
2 The above remarks also extend to a second form of re-
duction, strong reduction/n-reduction, which we have not
space to describe here. See Morrill et at. (1990).
</bodyText>
<footnote confidence="0.916443666666667">
3The name is chosen because the elimination and in-
troduction rules appropriate to each operator turn out to
be those for the universal modality in the modal logic 89.
</footnote>
<subsectionHeader confidence="0.788192">
See Doscn (1990).
</subsectionHeader>
<bodyText confidence="0.99973875">
rules. (Introduction rules can also be defined, but we
omit these here for brevity and because they are not
required for the linguistic applications we discuss.)
Note that these operators are strictly formal devices
and not geared towards specific linguistic phenom-
ena. Their use for the applications described, which
are suggested purely for illustration, may lead to over-
generation in some cases.4
</bodyText>
<sectionHeader confidence="0.902662" genericHeader="method">
COMMUTATION
</sectionHeader>
<bodyText confidence="0.941971333333333">
The type AX is assigned to an item of type X which
may be freely permuted. A has the following infer-
ence rules:
</bodyText>
<listItem confidence="0.5170275">
(18) :
AX
</listItem>
<subsectionHeader confidence="0.420527">
—AE &amp;Pim Prmatt
</subsectionHeader>
<bodyText confidence="0.885098375">
X Y AX AX Y
From these rules we see that an occurrence of an item
of type X in any position may be derived from an item
of type AX.
We may use this operator in a treatment of rela-
tivization that will allow not only peripheral extrac-
tion as in (19a), but also non-peripheral extraction as
in (19b):
</bodyText>
<listItem confidence="0.640669333333333">
(19) a. (Here is the paper) which Suzy read.
b. (Here is the paper) which Suzy read
quickly.
</listItem>
<bodyText confidence="0.9309889">
We shall generate these examples by assuming that
&amp;quot;which&amp;quot; licenses extraction from any position in the
body of the relative clause. We may accomplish this
by giving &amp;quot;which&amp;quot; the type (N \N)/(S/ANP) (cf. the
extraction operator j of Moortgat (1988)). This al-
lows the derivations in (20a-b) (see Figure 1), which
correspond to the lambda-terms in (21a-b) respec-
tively:
(21) a. which (Ax[(read x) Suzy])
b. which (Ax[(quickly (read x)) Suzy])
</bodyText>
<sectionHeader confidence="0.943215" genericHeader="method">
ITERATION
</sectionHeader>
<bodyText confidence="0.999453666666667">
The type X1 is assigned to an item of type X which
may be freely permuted and iterated. has the fol-
lowing inference rules:
</bodyText>
<figure confidence="0.6165946">
(22) &apos;
—IE Prm —Prml
X Y Xt XI Y
Con
Xt Xl
</figure>
<note confidence="0.761963">
4In Morrill et al. (1990) we give a system of modali-
</note>
<bodyText confidence="0.99842025">
ties that differs from the present proposal in several re-
spects. There are two unidirectional commutation modal-
ities rather than the single bidirectional modality given
here, and a single operational rule is associated with each
of the universal modalities. We also suggest a (more ten-
tative) system of exietengia/ modalities for dealing with
elements that are themselves commutable, iterable or
optional.
</bodyText>
<figure confidence="0.99139687037037">
- 201 -
(20) a. which Suzy read
(ANN&apos;
(NP\S)/NP NP
/E
NP\S
\E
(N\N)/(S/ANP) S/ANPI
/E
N\N
b. which Suzy read quickly
(NP\S)\(NP\S) [ANP)&apos;
Prmil
AM&apos; (NP\S)\(NP\S)
(NP\S)/NP NP
NP NP\S
\E
/I&apos;
(N\N)/(S/ANP) S/ANP
/E
N\N
(24) which Suzy read without understanding
(NP&apos;)&apos; Con
NP&apos;
VP/NP NP
/E
((NP\S)\(NP\S))/VP VP
/E
(NP\S)\(NP\S)
(NP \S)\(NP \S)
NP
/E
NP\S
Prim&apos;
(NP\S)/NP NP
/E
NP\S
\E
NP NP\S
\E
S/NP&apos;/II
(N \N)/(S/NP!)
N\N
(28) too long for Suzy to concentrate
(ForP/VP)/NP NP
/6
ForP/VP
VP /E Np1111
ForP
wknll
PredP/(ForP/NPII)
ForP
ForP/NPU/II
PredP
</figure>
<figureCaption confidence="0.999378">
Figure 1. Derivations illustrating use of structural modalities
</figureCaption>
<bodyText confidence="0.904054727272727">
/E
- 202-
One or more occurrences of items of type X in any
position may be derived from an item of type X&apos;.
We may use this modality in a treatment of mul-
tiple extraction. Consider the parasitic gap construc-
tion in (23):
(23) (Here is the paper) which Suzy read without
understanding.
In order to generate both this example and the ones
in (19), we shall now assume that &amp;quot;which&apos; licenses
extraction not just from any position in the body of
a relative clause, but from any number of positions
greater than or equal to one. We may do this by al-
tering the type of &amp;quot;which&amp;quot; to (N\N)/(S/NP1). Since
has all the inference rules a A, the derivations in
(20 will still go through with the new type. In addi-
tion, the &apos;Con inference rule allows the derivation of
(23) given in (24) (see Figure 1), and the correspond-
ing term in (25):
(25) which (Az[((witliput (understanding z))
(read x)) Suzy])
</bodyText>
<sectionHeader confidence="0.961519" genericHeader="method">
OPTIONALITY
</sectionHeader>
<bodyText confidence="0.998513">
The type X1 is assigned to an item of type X which
may be freely permuted, iterated and omitted. 1 has
the following inference rules:
</bodyText>
<equation confidence="0.4642425">
ill &gt; Y jll
IlPrinrP
Y xH X II r
xll x Ii (icon i II 1% wlm &apos; Wknn
</equation>
<bodyText confidence="0.999781">
Zero or more occurrences of items of type X in any
position may be derived from an item of type Xn.
We may use this modality in a treatment of op-
tional extraction, as illustrated by (27):
</bodyText>
<listItem confidence="0.791058285714286">
(27) a. (The paper was) to long for SuzY to read.
b. (The paper was) too long for Suzy to read
quickly.
c. (The paper was) too long for Suzy to read
without understanding.
d. (The paper was) too long for Suzy to con-
centrate.
</listItem>
<bodyText confidence="0.9364888">
We shall assume for simplicity that &amp;quot;to&amp;quot;-infinitives
are single lexical items of type vp, that &amp;quot;for-to&amp;quot; clauses
have a special atomic type ForP (so that &amp;quot;for&amp;quot; has
the type (ForP/VP)/NP), and that predicate phrases
have a special atomic type PredP. Given these assign-
ments, the type Pred1)/(ForFiNP1) for &amp;quot;too long&amp;quot;
would allow (27a--c), but not (27d). In order to gener-
ate all four examples, we shall a,ssume that &amp;quot;too long&amp;quot;
licenses extraction from any number of positions in
the embedded clause greater than or equal to zero,
and thus give it the type Pred13/(ForP/NPII). Again,
has all the inference rules oft, generating (27a--c),
and the WkliN rule allows (27d) to be derived as in
(28) (see Figure 1), giving the term in (29):
(29) too-long (Azifor (to-concentrate Suzy)))
</bodyText>
<sectionHeader confidence="0.960158" genericHeader="conclusions">
CONCLUSIONS
</sectionHeader>
<bodyText confidence="0.999335818181818">
We have introduced &amp;scheme of proof figures for Lam-
bek categorial grammar in the style of natural de-
duction, and proposed structural modalities which we
suggest are suitable for the capture of linguistic gen.,
eralizations. It remains to extend the semantic treat-
ment of the structural modalities, to rgfine the proof
theory, and hence to develop more efficient parsing al,
gorithms. For the present, we hope that the proposals
made can be seen as gaining linguistic practicality in
the categorial description of natural 1”guage, with-
out losing mathematical elegance.
</bodyText>
<sectionHeader confidence="0.964083" genericHeader="references">
RurgRENcs
</sectionHeader>
<reference confidence="0.991934132075472">
Ades, A.E. and Steedman, M.J, (1982). On the order
of words. Linguistics and Philosophy 4, 517-588.
van Benthem, J. (1983). The semantics of variety in
categorial grammar. Report 83-29, Department of Math-
ematics, Simon Fraser UniversitT. Also in W. Buszkowski,
W. Marciszewski and J. van Benthem (ads), Catoorial
Grammar, Volume 25, Linguistic 4c Literary Studies in
Eastern Europe, John Benjmnins, Amsterdam/Philadelphia,
57-84.
van Benthem, J. (1987). Categorial granunar and type
theory. Prepublication Series 87-07, Institute for Lan-
guage, Logic and Information, University of Amsterdam,
Dosen, K. (1990). Modal logic as rnetalogic, To ap-
pear in P. Petkov (ed.), Proceedings of the &amp;quot;Kleene &apos;90&amp;quot;
Conference, Springer-Verlag.
Gentzen, G. (1936). On the meanings of thp logical
constants. In Szabo (ed., 1969), The Collected Papers of
Gerhard Gentsen, North Holland, Amsterdam.
Girard, J-Y. (1987). Linear logic. Theoretical Come
pater Science 50, 1-102.
Hepple, M. (1990). Normal form theorem proving for
the Lambek calculus. In Proceedings of COLING 1990.
Hepple, M. and Morrill, G. (1989). Parsing and deriva-
tional equivalence. hr Proceedings of the Four* Confer-
ence of the European Chapter of the Association for Com-
yutational Linguistics, UMIST, Manchester.
Hindley, J.R. and Seldin, J.P. (1986). httradution to
Combinators and Lambda-calculus. Carntoridge UniVor-
sity Press, Cambridge,
Howard, W. (1980). The formulae-as-types notion
of constructioo. In J.R. Ifindley and J.P. Seldin (eds),
To ILD. Curry; Essays on Combinatory Logic, karnbtlaT
Calculus and Formalism, Academic Presa, New York and
London, 479-490.
Konig, E. (1489). Parsing as natural deduction. In
Proceedings of the 27th Annual Meeting of the Association
for Cornyuhrtional Linguistics.
Lamb*, J. (1958). The mathematics of sentence struc-
ture. American Mathematical Monthly 65, 154-170.
Moortgat, M. (1988). Categorial Invelligations: Log-
ical and Linguistic Aspects of the fannhck Calculus. Foris,
Dordrecht.
Morrill, G., Leslie, N., Hepple, M. and Barry, 0. (1990).
Categorial deductions and structural operations. In O.
Barry and G. Morrill (e4s), Erliakarph, Workin, Papers
in Cognitive Science, Volume if: Stittliee in Cteporiel
Grammar, Centre for Cognitive Science, University of gd-
inburgh.
Prawiti• 0, (1965). Natural Deduction: a Proof Thee
ore tical Study. Almqvlst and Wiksell, Uppsala.
Troelstra, A.S. (1969). Principles of Intuitionism:
Lecture Notes in Mathematics Vol. 05. Springer-Verlag.
- 203 -
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.090508">
<title confidence="0.998157">PROOF FIGURES AND STRUCTURAL OPERATORS FOR CATEGORIA.L GRAMMAR*</title>
<author confidence="0.999969">Guy Barry</author>
<author confidence="0.999969">Mark Hepplet</author>
<author confidence="0.999969">Neil Leslie</author>
<author confidence="0.999969">Glyn Morrill&apos;</author>
<affiliation confidence="0.999955">Centre for Cognitive Science, University of Edinburgh</affiliation>
<address confidence="0.983422">2 Buccleuch Place, Edinburgh EH8 9LW, Scotland</address>
<email confidence="0.926871">guyecogsci.ed.ac.uk,mrhScl.cam.ac.uk,</email>
<address confidence="0.727415">neilecogaci.ed.ac.uk, Glyn.Morrillelet.ruu.n1</address>
<abstract confidence="0.992478627906977">Use of Lambek&apos;s (1958) categorial grammar for linguistic work has generally been rather limited. There appear to be two main reasons for this: the notations most. commonly used can sometimes obscure the structure of proofs and fail to clearly convey linguistic structure, and the calculus as it stands is apparently not powerful enough to describe many phenomena encountered in natural language. In this paper we suggest ways of dealing with both these deficiencies. Firstly, we reformulate Lambek&apos;s system using proof figures based on the &apos;natural deduction&apos; notation commonly used for derivations in logic, and discuss some of the related proof-theory. Natural deduction is generally regarded as the most economical and comprehensible system for working on proofs by hand, and we suggest that the same advantages hold for a similar presentation of categorial derivations. Secondly, we introduce devices structural on the structural rules found in logic, for the characterization of commutation, iteration and optionality. This permits the description of linguistic phenomena which Lambek&apos;s system does not capture with the desired sensitivity and generality. LAMBEK CATEGORIAL GRAMMAR PRELIMINARIES Categorial grammar is an approach to language description in which the combination of expressions is governed not by specific linguistic rules but by general logical inference mechanisms. The point of departure can be seen as Frege&apos;s position that there are certain &apos;complete expressions&apos; which are the primary bearers of meaning, and that the meanings of &apos;incomplete expressions&apos; (including words) are derivative, being • We would like to thank Robin Cooper, Martin Pickering and Pete Whitelock for conunents and discussion relating to this work. The authors were respectively supported by SERC Research Studentship 88306971; ESRC Research Studentship C00428722003; ESPRIT Project 393 and Cognitive Science/HCI Research Initiative 89/CS01 and 89/CS25; SERC Postdoctoral Fellowship B/ITF/206.</abstract>
<affiliation confidence="0.956695">I Now at University of Cambridge Computer Labora-</affiliation>
<address confidence="0.791956">Pembroke Street, Cambridge 032 3Q(:, England. at Trans 10, 3512 Utrecht, Netherlands.</address>
<abstract confidence="0.994664605504587">their contribution to the meanings of the expressions in which they occur. We suppose that linguistic ob- (at least) components, form (syntactic) and meaning (semantic). We refer to sets of such obas are indexed by stipulate that all complete expressions belong to catindexed by primitive then recursively classify incomplete expressions according to the means by which they combine (syntactically and semantically) with other expressions. In the &apos;syntactic calculus&apos; of Lambek (1958) (varknown as categorial grammar, Lambek L), expressions are classified by means of set of types defined in (1). a. If a primitive type then a type. If Y are types then and Y \ are types. (resp. Y the type of incomplete expressions that syntactically combine with a following (resp. preceding) expression of type Y to form an expression type semantically are functions from meanof type Y to meanings of type Let us assume complete expressions to be sentences (indexed by the primitive type S), noun phrases (NP), common nouns (N), and non-finite verb phrases (VP). By the above definitions, we may assign types to words as follows: (2) John, Mary, Suzy := NP man, paper := N the := NP/N read (NP\S)/NP (NP\S)\(NP\S) ((NP\S)\(NP\S))/VP VP/NP We represent the form of a word by printing it in italics, and its meaning by the same word in boldface. For instance, the form of the word &amp;quot;man&amp;quot; will be man and its meaning as PROOF FIGURES shall the rules of L by means of figures, based on Prawitz&apos; (1965) systems of &apos;natural deduction&apos;. Natural deduction was developed by Gentzen (1936) to reflect the natural process of mathematical reasoning in which one uses a number rules justify a single proposition, the basis of having justifications of a of propositions, called - 198 proof one may temporarily a new assumption if one of the rules licenses the subsequent withdrawal this assumption. The rule is said to The conclusion is said to the assumptions, which are called the hythe proof. A proof is usually represented as a tree with the assumptions as leaves and the conclusion at the root. Finding a proof is then seen as the task of filling this tree in, and the inference rules as operations on the partially completed tree. One can write the inference rules out as such operations, but as these are rather unwieldy it is more usual to present the rules more compact form as operations from a set of (the a as (where m &gt; 1 and n &gt; 0): 3 states that a proof of be obtained from of X1, , discharging appropriate currences of assumptions Y1, • • . Y. The use of square brackets around an assumption indicates its the name of the rule, and the index i is included to disambiguate proofs, since there may be an uncertainty as to which rule has discharged which assumption. propositions are represented formulas in logic, so linguistic categories are represented by type in left-to-right order of types indiorder in which the forms of subexpressions are to be concatenated to give a composite expresderived by the proof. Thus we must note of the order and place of occurrence of the premises the rules in the proof figures for is a problem with the presentation of the rules in the compact notation as some of the rules will be written had a number of conclusions, as follows: (4) rule for / states that a proof of type f Y followed by a proof of type Y yields a proof of type the elimination rule for \ states proof of by a proof of type Y a proof of type the notation above, we may write these rules as follows: (6) a. &apos; • V Y\X /E shall give a semantics for this calculus the same style as the traditional functional semantics for intuitionistic logic (Troelstra 1969; Howard 1980). In the two rules above, the meaning of the composite expres- (of type given by the functional application the meaning of the (i.e. the one type Y Y\ the meaning of the expression (i.e. the one of type Y). We represent funcapplication by juxtaposition, so that John means likes applied to John. rules /E and \E, we may derive &amp;quot;Mary likes John&amp;quot; as a sentence as follows: The meaning of, the sentence is read off the proof by interpreting the /E and \E inferences as function application, giving the following:</abstract>
<author confidence="0.581248">Mary</author>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>A E Ades</author>
<author>M J Steedman</author>
</authors>
<title>On the order of words.</title>
<date>1982</date>
<journal>Linguistics and Philosophy</journal>
<volume>4</volume>
<pages>517--588</pages>
<contexts>
<context position="10103" citStr="Ades and Steedman 1982" startWordPosition="1742" endWordPosition="1745"> analogous to the usual natural deduction rule of conditionalization, except that the latter allows withdrawal of any number of assumptions, in any position. The /I and \1 rules are commonly used in constructions that are assumed in other theories to involve &apos;empty categories&apos;, such as (11): (11) (John is the man) who Mary likes. We assume that the relative clause modifies the noun &amp;quot;man&amp;quot; and hence should receive the type N \N. The string &amp;quot;Mary likes&amp;quot; can be derived as of type S/NP, and so assignment of the type (N\N)/(S/NP) to the object relative pronoun &amp;quot;who&amp;quot; allows the analysis in (12) (cf. Ades and Steedman 1982): (12) who Mary likes (NP\S)/NP [N111 /E NP &apos; NP\S E (N\N)/(S/NP) S/NP /E N\N The meaning of the string can be read off the proof by interpreting /I and \I as lambda-abstraction, giving the term in (13): (13) who (Ax[(likes x) Mary]) Note that this mechanism is only powerful enough to allow constructions where the extraction site is clause-peripheral; for non-peripheral extraction (and multiple extraction) we appear to need an extended logic, as described later. DERIVATIONAL EQUIVALENCE AND NORMAL FORMS In the above system it is possible to give more than one proof for a single reading of a st</context>
</contexts>
<marker>Ades, Steedman, 1982</marker>
<rawString>Ades, A.E. and Steedman, M.J, (1982). On the order of words. Linguistics and Philosophy 4, 517-588.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J van Benthem</author>
</authors>
<title>The semantics of variety in categorial grammar.</title>
<date>1983</date>
<booktitle>Catoorial Grammar, Volume 25, Linguistic 4c Literary Studies in Eastern Europe,</booktitle>
<tech>Report 83-29,</tech>
<pages>57--84</pages>
<institution>Department of Mathematics, Simon Fraser UniversitT.</institution>
<location>John Benjmnins, Amsterdam/Philadelphia,</location>
<note>Also in</note>
<marker>van Benthem, 1983</marker>
<rawString>van Benthem, J. (1983). The semantics of variety in categorial grammar. Report 83-29, Department of Mathematics, Simon Fraser UniversitT. Also in W. Buszkowski, W. Marciszewski and J. van Benthem (ads), Catoorial Grammar, Volume 25, Linguistic 4c Literary Studies in Eastern Europe, John Benjmnins, Amsterdam/Philadelphia, 57-84.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J van Benthem</author>
</authors>
<title>Categorial granunar and type theory.</title>
<date>1987</date>
<tech>Prepublication Series 87-07,</tech>
<institution>Institute for Language, Logic and Information, University of Amsterdam,</institution>
<marker>van Benthem, 1987</marker>
<rawString>van Benthem, J. (1987). Categorial granunar and type theory. Prepublication Series 87-07, Institute for Language, Logic and Information, University of Amsterdam,</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Dosen</author>
</authors>
<title>Modal logic as rnetalogic, To appear</title>
<date>1990</date>
<booktitle>Proceedings of the &amp;quot;Kleene &apos;90&amp;quot; Conference,</booktitle>
<editor>in P. Petkov (ed.),</editor>
<publisher>Springer-Verlag.</publisher>
<marker>Dosen, 1990</marker>
<rawString>Dosen, K. (1990). Modal logic as rnetalogic, To appear in P. Petkov (ed.), Proceedings of the &amp;quot;Kleene &apos;90&amp;quot; Conference, Springer-Verlag.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Gentzen</author>
</authors>
<title>On the meanings of thp logical constants.</title>
<date>1936</date>
<booktitle>In Szabo (ed., 1969), The Collected Papers of Gerhard Gentsen,</booktitle>
<location>North Holland, Amsterdam.</location>
<contexts>
<context position="4329" citStr="Gentzen (1936)" startWordPosition="683" endWordPosition="684">hrases (VP). By the above definitions, we may assign types to words as follows: (2) John, Mary, Suzy := NP man, paper := N the := NP/N likes, read := (NP\S)/NP quickly := (NP\S)\(NP\S) without := ((NP\S)\(NP\S))/VP understanding := VP/NP We represent the form of a word by printing it in italics, and its meaning by the same word in boldface. For instance, the form of the word &amp;quot;man&amp;quot; will be represented as man and its meaning as man. PROOF FIGURES We shall present the rules of L by means of proof figures, based on Prawitz&apos; (1965) systems of &apos;natural deduction&apos;. Natural deduction was developed by Gentzen (1936) to reflect the natural process of mathematical reasoning in which one uses a number of inference rules to justify a single proposition, the conclusion, on the basis of having justifications of a number of propositions, called assumptions. During - 198 - a proof one may temporarily make a new assumption if one of the rules licenses the subsequent withdrawal of this assumption. The rule is said to discharge the assumption. The conclusion is said to depend on the undischarged assumptions, which are called the hypotheses of the proof. A proof is usually represented as a tree with the assumptions </context>
<context position="14414" citStr="Gentzen (1936)" startWordPosition="2466" endWordPosition="2467">hat normal forms are unique.2 For formulations of L that are oriented to parsing, defining normal forms for proofs provides a basis for handling the so-called &apos;spurious ambiguity&apos; problem, by providing for parsing methods which return all and only normal form proofs. See Konig (1989) and Ilcpple (1990). STRUCTURAL MODALITIES From a logical perspective, L can be seen as the weakest of a hierarchy of implicational sequent logics which differ in the amount of freedom allowed in the use of assumptions. The highest of these is (the implicational fragment of) the logistic calculus 1.1 introduced in Gentzen (1936). Gentzen formulated this calculus in terms of sequences of propositions, and then provided explicit structural rules to show the permitted ways to manipulate these sequences. The structural rules are permutation, which allows the order of the assumptions to be changed; contraction, which allows an assumption to be used more than once; and weakening, which allows an assumption to be ignored. For a discussion of the logics generated by dropping some or all of these structural rules see e.g. van Benthem (1987). Although freely applying structural rules are clearly not appropriate in categorial g</context>
</contexts>
<marker>Gentzen, 1936</marker>
<rawString>Gentzen, G. (1936). On the meanings of thp logical constants. In Szabo (ed., 1969), The Collected Papers of Gerhard Gentsen, North Holland, Amsterdam.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J-Y Girard</author>
</authors>
<title>Linear logic.</title>
<date>1987</date>
<journal>Theoretical Come pater Science</journal>
<volume>50</volume>
<pages>1--102</pages>
<marker>Girard, 1987</marker>
<rawString>Girard, J-Y. (1987). Linear logic. Theoretical Come pater Science 50, 1-102.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Hepple</author>
</authors>
<title>Normal form theorem proving for the Lambek calculus.</title>
<date>1990</date>
<booktitle>In Proceedings of COLING</booktitle>
<marker>Hepple, 1990</marker>
<rawString>Hepple, M. (1990). Normal form theorem proving for the Lambek calculus. In Proceedings of COLING 1990.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Hepple</author>
<author>G Morrill</author>
</authors>
<title>Parsing and derivational equivalence. hr</title>
<date>1989</date>
<booktitle>Proceedings of the Four* Conference of the European Chapter of the Association for Comyutational Linguistics,</booktitle>
<location>UMIST, Manchester.</location>
<contexts>
<context position="11438" citStr="Hepple and Morrill 1989" startWordPosition="1972" endWordPosition="1975">), with the derivation in (14) and the lambda-term in (15): (14) Mary likes John (NP \ S)/NP [NP)&apos; /E NP NP\S \E /11 S/NP NP /E (15) x[(likes x) Mary]) John By the definition in (10), the terms in (8) and (15) are fl-equal, and thus have the same meaning; the proofs in (7) and (14) are said to exhibit derivational equivalence. The relation of derivational equivalence clearly divides the set of proofs into equivalence classes. We shall define a notion of normal form for proofs (and their corresponding terms) in such a way that each equivalence class of proofs contains a unique normal form (cf. Hepple and Morrill 1989). We first define the notions of contraction and reduction. A contraction schema R I&gt; C consists of a particular pattern R within proofs or terms (the redex) and an equal and simpler pattern C (the contractum). A reduction consists of a series of contractions, each replacing an occurrence of a redex by its contractum. A normal form is then a proof or term on which no contractions are possible. We define the following contraction schemas: weak contraction in (16) for proofs, and 13-contraction in (17) for the corresponding lambda-terms. (16) a. [Yy X X/Y/P /E b. Y Y \X • \E (17) y[a])/3 a[fly] </context>
</contexts>
<marker>Hepple, Morrill, 1989</marker>
<rawString>Hepple, M. and Morrill, G. (1989). Parsing and derivational equivalence. hr Proceedings of the Four* Conference of the European Chapter of the Association for Comyutational Linguistics, UMIST, Manchester.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J R Hindley</author>
<author>J P Seldin</author>
</authors>
<title>httradution to Combinators and Lambda-calculus.</title>
<date>1986</date>
<publisher>Carntoridge UniVorsity Press,</publisher>
<location>Cambridge,</location>
<contexts>
<context position="9170" citStr="Hindley and Seldin 1986" startWordPosition="1585" endWordPosition="1588"> and in \I Y is the leftmost undischarged assumption in the proof of X. In addition, L carries the condition that in both /I and \I the sole assumption in a proof cannot be withdrawn, so that no types are assigned to the empty string. In the introduction rules, the meaning of the resuit is given by lambda-abstraction over the meaning of the discharged assumption, which can be represented by a variable of the appropriate type. The relationship between lambda-abstraction and function application is given by the law of /3-equality in (10), - 199 where a0ly] means &apos;a with substituted for y&apos;. (See Hindley and Seldin 1986 for a full exposition of the typed lambda-calculus.) (10) (AY[a])O = (OM Since exactly one assumption must be withdrawn, the resulting lambda-terms have the property that each binder binds exactly one variable occurrence; we refer to this as the &apos;single-bind&apos; property (van Benthem 1983). The rules in (9) are analogous to the usual natural deduction rule of conditionalization, except that the latter allows withdrawal of any number of assumptions, in any position. The /I and \1 rules are commonly used in constructions that are assumed in other theories to involve &apos;empty categories&apos;, such as (11</context>
</contexts>
<marker>Hindley, Seldin, 1986</marker>
<rawString>Hindley, J.R. and Seldin, J.P. (1986). httradution to Combinators and Lambda-calculus. Carntoridge UniVorsity Press, Cambridge,</rawString>
</citation>
<citation valid="true">
<authors>
<author>W Howard</author>
</authors>
<title>The formulae-as-types notion of constructioo.</title>
<date>1980</date>
<booktitle>In J.R. Ifindley and J.P. Seldin (eds), To ILD. Curry; Essays on Combinatory Logic, karnbtlaT Calculus and Formalism, Academic Presa,</booktitle>
<pages>479--490</pages>
<location>New York and London,</location>
<contexts>
<context position="6820" citStr="Howard 1980" startWordPosition="1146" endWordPosition="1147"> of the rules in the compact notation as some of the rules will be written as if they had a number of conclusions, as follows: (4) nation rule for / states that a proof of type X f Y followed by a proof of type Y yields a proof of type X. Similarly the elimination rule for \ states that a proof of type nx preceded by a proof of type Y yields a proof of type X. Using the notation above, we may write these rules as follows: (6) a. &apos; • b. X./Y V Y Y\X /E We shall give a semantics for this calculus in the same style as the traditional functional semantics for intuitionistic logic (Troelstra 1969; Howard 1980). In the two rules above, the meaning of the composite expression (of type X) is given by the functional application of the meaning of the functor expression (i.e. the one of type X/ Y or Y\ X) to the meaning of the argument expression (i.e. the one of type Y). We represent function application by juxtaposition, so that likes John means likes applied to John. Using the rules /E and \E, we may derive &amp;quot;Mary likes John&amp;quot; as a sentence as follows: The meaning of, the sentence is read off the proof by interpreting the /E and \E inferences as function application, giving the following: (8) (likes Joh</context>
</contexts>
<marker>Howard, 1980</marker>
<rawString>Howard, W. (1980). The formulae-as-types notion of constructioo. In J.R. Ifindley and J.P. Seldin (eds), To ILD. Curry; Essays on Combinatory Logic, karnbtlaT Calculus and Formalism, Academic Presa, New York and London, 479-490.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Konig</author>
</authors>
<title>Parsing as natural deduction.</title>
<date>1489</date>
<booktitle>In Proceedings of the 27th Annual Meeting of the Association for Cornyuhrtional Linguistics.</booktitle>
<marker>Konig, 1489</marker>
<rawString>Konig, E. (1489). Parsing as natural deduction. In Proceedings of the 27th Annual Meeting of the Association for Cornyuhrtional Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Lamb</author>
</authors>
<title>The mathematics of sentence structure.</title>
<date>1958</date>
<journal>American Mathematical Monthly</journal>
<volume>65</volume>
<pages>154--170</pages>
<marker>Lamb, 1958</marker>
<rawString>Lamb*, J. (1958). The mathematics of sentence structure. American Mathematical Monthly 65, 154-170.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Moortgat</author>
</authors>
<title>Categorial Invelligations: Logical and Linguistic Aspects of the fannhck Calculus. Foris,</title>
<date>1988</date>
<location>Dordrecht.</location>
<contexts>
<context position="17525" citStr="Moortgat (1988)" startWordPosition="2985" endWordPosition="2986"> rules we see that an occurrence of an item of type X in any position may be derived from an item of type AX. We may use this operator in a treatment of relativization that will allow not only peripheral extraction as in (19a), but also non-peripheral extraction as in (19b): (19) a. (Here is the paper) which Suzy read. b. (Here is the paper) which Suzy read quickly. We shall generate these examples by assuming that &amp;quot;which&amp;quot; licenses extraction from any position in the body of the relative clause. We may accomplish this by giving &amp;quot;which&amp;quot; the type (N \N)/(S/ANP) (cf. the extraction operator j of Moortgat (1988)). This allows the derivations in (20a-b) (see Figure 1), which correspond to the lambda-terms in (21a-b) respectively: (21) a. which (Ax[(read x) Suzy]) b. which (Ax[(quickly (read x)) Suzy]) ITERATION The type X1 is assigned to an item of type X which may be freely permuted and iterated. has the following inference rules: (22) &apos; —IE Prm —Prml X Y Xt XI Y Con Xt Xl 4In Morrill et al. (1990) we give a system of modalities that differs from the present proposal in several respects. There are two unidirectional commutation modalities rather than the single bidirectional modality given here, and </context>
</contexts>
<marker>Moortgat, 1988</marker>
<rawString>Moortgat, M. (1988). Categorial Invelligations: Logical and Linguistic Aspects of the fannhck Calculus. Foris, Dordrecht.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Morrill</author>
<author>N Leslie</author>
<author>M Hepple</author>
<author>Barry</author>
</authors>
<title>Categorial deductions and structural operations.</title>
<date>1990</date>
<booktitle>In O. Barry and G. Morrill (e4s), Erliakarph, Workin, Papers in Cognitive Science, Volume if: Stittliee in Cteporiel Grammar,</booktitle>
<institution>Centre for Cognitive Science, University of gdinburgh.</institution>
<contexts>
<context position="17919" citStr="Morrill et al. (1990)" startWordPosition="3057" endWordPosition="3060">hese examples by assuming that &amp;quot;which&amp;quot; licenses extraction from any position in the body of the relative clause. We may accomplish this by giving &amp;quot;which&amp;quot; the type (N \N)/(S/ANP) (cf. the extraction operator j of Moortgat (1988)). This allows the derivations in (20a-b) (see Figure 1), which correspond to the lambda-terms in (21a-b) respectively: (21) a. which (Ax[(read x) Suzy]) b. which (Ax[(quickly (read x)) Suzy]) ITERATION The type X1 is assigned to an item of type X which may be freely permuted and iterated. has the following inference rules: (22) &apos; —IE Prm —Prml X Y Xt XI Y Con Xt Xl 4In Morrill et al. (1990) we give a system of modalities that differs from the present proposal in several respects. There are two unidirectional commutation modalities rather than the single bidirectional modality given here, and a single operational rule is associated with each of the universal modalities. We also suggest a (more tentative) system of exietengia/ modalities for dealing with elements that are themselves commutable, iterable or optional. - 201 - (20) a. which Suzy read (ANN&apos; (NP\S)/NP NP /E NP\S \E (N\N)/(S/ANP) S/ANPI /E N\N b. which Suzy read quickly (NP\S)\(NP\S) [ANP)&apos; Prmil AM&apos; (NP\S)\(NP\S) (NP\S</context>
</contexts>
<marker>Morrill, Leslie, Hepple, Barry, 1990</marker>
<rawString>Morrill, G., Leslie, N., Hepple, M. and Barry, 0. (1990). Categorial deductions and structural operations. In O. Barry and G. Morrill (e4s), Erliakarph, Workin, Papers in Cognitive Science, Volume if: Stittliee in Cteporiel Grammar, Centre for Cognitive Science, University of gdinburgh.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Prawiti•</author>
</authors>
<title>Natural Deduction: a Proof Thee ore tical Study. Almqvlst and Wiksell,</title>
<date>1965</date>
<location>Uppsala.</location>
<marker>Prawiti•, 1965</marker>
<rawString>Prawiti• 0, (1965). Natural Deduction: a Proof Thee ore tical Study. Almqvlst and Wiksell, Uppsala.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A S Troelstra</author>
</authors>
<title>Principles of Intuitionism:</title>
<date>1969</date>
<journal>Lecture Notes in Mathematics</journal>
<volume>05</volume>
<pages>203</pages>
<publisher>Springer-Verlag. -</publisher>
<contexts>
<context position="6806" citStr="Troelstra 1969" startWordPosition="1144" endWordPosition="1145">the presentation of the rules in the compact notation as some of the rules will be written as if they had a number of conclusions, as follows: (4) nation rule for / states that a proof of type X f Y followed by a proof of type Y yields a proof of type X. Similarly the elimination rule for \ states that a proof of type nx preceded by a proof of type Y yields a proof of type X. Using the notation above, we may write these rules as follows: (6) a. &apos; • b. X./Y V Y Y\X /E We shall give a semantics for this calculus in the same style as the traditional functional semantics for intuitionistic logic (Troelstra 1969; Howard 1980). In the two rules above, the meaning of the composite expression (of type X) is given by the functional application of the meaning of the functor expression (i.e. the one of type X/ Y or Y\ X) to the meaning of the argument expression (i.e. the one of type Y). We represent function application by juxtaposition, so that likes John means likes applied to John. Using the rules /E and \E, we may derive &amp;quot;Mary likes John&amp;quot; as a sentence as follows: The meaning of, the sentence is read off the proof by interpreting the /E and \E inferences as function application, giving the following: </context>
</contexts>
<marker>Troelstra, 1969</marker>
<rawString>Troelstra, A.S. (1969). Principles of Intuitionism: Lecture Notes in Mathematics Vol. 05. Springer-Verlag. - 203 -</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>