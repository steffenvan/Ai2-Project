<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000441">
<note confidence="0.468634">
MAGEAD:
</note>
<title confidence="0.993046">
A Morphological Analyzer and Generator for the Arabic Dialects
</title>
<author confidence="0.997231">
Nizar Habash and Owen Rambow
</author>
<affiliation confidence="0.9958535">
Center for Computational Learning Systems
Columbia University
</affiliation>
<address confidence="0.982685">
New York, NY 10115, USA
</address>
<email confidence="0.998374">
habash,rambow @cs.columbia.edu
</email>
<sectionHeader confidence="0.99385" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999838583333333">
We present MAGEAD, a morphological
analyzer and generator for the Arabic lan-
guage family. Our work is novel in that
it explicitly addresses the need for pro-
cessing the morphology of the dialects.
MAGEAD performs an on-line analysis to
or generation from a root+pattern+features
representation, it has separate phonologi-
cal and orthographic representations, and
it allows for combining morphemes from
different dialects. We present a detailed
evaluation of MAGEAD.
</bodyText>
<sectionHeader confidence="0.998993" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999457416666667">
In this paper we present MAGEAD, a morphologi-
cal analyzer and generator for the Arabic language
family, by which we mean both Modern Standard
Arabic (MSA) and the spoken dialects.&apos; Our work
is novel in that it explicitly addresses the need for
processing the morphology of the dialects as well.
The principal theoretical contribution of this pa-
per is an organization of morphological knowl-
edge for processing multiple variants of one lan-
guage family. The principal practical contribu-
tion is the first morphological analyzer and gen-
erator for an Arabic dialect that includes a root-
and-pattern analysis (which is also the first wide-
coverage implementation of root-and-pattern mor-
phology for any language using a multitape finite-
state machine). We also provide a novel type of
detailed evaluation in which we investigate how
&apos;We would like to thank several anonymous reviewers for
comments that helped us improve this paper. The work re-
ported in this paper was supported by NSF Award 0329163,
with additional work performed under the DARPA GALE
program, contract HR0011-06-C-0023. The authors are listed
in alphabetical order.
different sources of lexical information affect per-
formance of morphological analysis.
This paper is organized as follows. In Section 2,
we present the relevant facts about morphology
in the Arabic language family. Previous work is
summarized in Section 3. We present our design
goals in Section 4, and then discuss our approach
to representing linguistic knowledge for morpho-
logical analysis in Section 5. The implementa-
tion is sketched in Section 6. We outline the steps
involved in creating a Levantine analyzer in Sec-
tion 7. We evaluate our system in Section 8, and
then conclude.
</bodyText>
<sectionHeader confidence="0.987145" genericHeader="introduction">
2 Arabic Morphology
</sectionHeader>
<subsectionHeader confidence="0.988346">
2.1 Variants of Arabic
</subsectionHeader>
<bodyText confidence="0.999769190476191">
The Arabic-speaking world is characterized by
diglossia (Ferguson, 1959). Modern Standard
Arabic (MSA) is the shared written language from
Morocco to the Gulf, but it is not a native lan-
guage of anyone. It is spoken only in formal,
scripted contexts (news, speeches). In addition,
there is a continuum of spoken dialects (varying
geographically, but also by social class, gender,
etc.) which are native languages, but rarely writ-
ten (except in very informal contexts: collections
of folk tales, newsgroups, email, etc). We will re-
fer to MSA and the dialects as variants of Ara-
bic. Variants differ phonologically, lexically, mor-
phologically, and syntactically from one another;
many pairs of variants are mutually unintelligible.
In unscripted situations where spoken MSA would
normally be required (such as talk shows on TV),
speakers usually resort to repeated code-switching
between their dialect and MSA, as nearly all native
speakers of Arabic are unable to produce sustained
spontaneous discourse in MSA.
</bodyText>
<page confidence="0.980675">
681
</page>
<note confidence="0.533631">
Proceedings of the 21st International Conference on Computational Linguistics and 44th Annual Meeting of the ACL, pages 681–688,
Sydney, July 2006. c�2006 Association for Computational Linguistics
</note>
<bodyText confidence="0.999791625">
In this paper, we discuss MSA and Levantine,
the dialect spoken (roughly) in Syria, Lebanon,
Jordan, Palestine, and Israel. Our Levantine data
comes from Jordan. The discussion in this section
uses only examples from MSA, but all variants
show a combination of root-and-pattern and affix-
ational morphology and similar examples could be
found for Levantine.
</bodyText>
<subsectionHeader confidence="0.9988">
2.2 Roots, Patterns and Vocalism
</subsectionHeader>
<bodyText confidence="0.989143888888889">
Arabic morphemes fall into three categories: tem-
platic morphemes, affixational morphemes, and
non-templatic word stems (NTWSs). NTWSs
are word stems that are not constructed from
a root/pattern/vocalism combination. Verbs are
never NTWSs.
Templatic morphemes come in three types that
are equally needed to create a word stem: roots,
patterns and vocalisms. The root morpheme is a
sequence of three, four, or five consonants (termed
radicals) that signifies some abstract meaning
shared by all its derivations. For example, the
words katab ‘to write’, kaAtib ‘writer’,
and maktuwb ‘written’ all share the root
morpheme ktb (✞ ) ‘writing-related’. The pat-
tern morpheme is an abstract template in which
roots and vocalisms are inserted. The vocalism
morpheme specifies which short vowels to use
with a pattern. We will represent the pattern as a
string made up of numbers to indicate radical posi-
tion, of the symbol V to indicate the position of the
vocalism, and of pattern consonants (if needed).
A word stem is constructed by interleaving the
three types of templatic morphemes. For example,
the word stem katab ‘to write’ is constructed
from the root ktb ( ), the pattern 1V2V3 and
the vocalism aa.
</bodyText>
<subsectionHeader confidence="0.998673">
2.3 Affixational Morphemes
</subsectionHeader>
<bodyText confidence="0.999861875">
Arabic affixes can be prefixes such as sa+
(+ ) ‘will/[future]’, suffixes such as +uwna
( +) ‘[masculine plural]’ or circumfixes such as
ta++na ( ++☎ ) ‘[imperfective subject 2nd person
fem. plural]’. Multiple affixes can appear in a
word. For example, the word wasayak-
tubuwnahA ‘and they will write it’ has two pre-
fixes, one circumfix and one suffix:2
</bodyText>
<footnote confidence="0.70636">
2We analyze the imperfective word stem as including an
initial short vowel, and leave a discussion of this analysis to
future publications.
</footnote>
<equation confidence="0.5987428">
(1) wasayaktubuwnahA
+uwna
masculine-plural
+hA
it
</equation>
<subsectionHeader confidence="0.998986">
2.4 Morphological Rewrite Rules
</subsectionHeader>
<bodyText confidence="0.993539842105263">
An Arabic word is constructed by first creating a
word stem from templatic morphemes or by us-
ing a NTWS. Affixational morphemes are then
added to this stem. The process of combining
morphemes involves a number of phonological,
morphemic and orthographic rules that modify the
form of the created word so it is not a simple inter-
leaving or concatenation of its morphemic compo-
nents.
An example of a phonological rewrite rule is the
voicing of the /t/ of the verbal pattern V1tV2V3
(Form VIII) when the first root radical is /z/, /d/, or
/*/ ( , , or ): the verbal stem zhr+V1tV2V3+iaa
is realized phonologically as /izdahar/ (ortho-
graphically: ) ‘flourish’ not /iztahar/ (ortho-
graphically: ). An example of an orthographic
rewrite rule is the deletion of the Alif () of the def-
inite article morpheme Al+ (+ ) in nouns when
preceded by the preposition l+ (+✱ ).
</bodyText>
<sectionHeader confidence="0.998267" genericHeader="method">
3 Previous Work
</sectionHeader>
<bodyText confidence="0.999933652173913">
There has been a considerable amount of work on
Arabic morphological analysis; for an overview,
see (Al-Sughaiyer and Al-Kharashi, 2004). We
summarize some of the most relevant work here.
Kataja and Koskenniemi (1988) present a sys-
tem for handling Akkadian root-and-pattern mor-
phology by adding an additional lexicon com-
ponent to Koskenniemi’s two-level morphology
(1983). The first large scale implementation
of Arabic morphology within the constraints of
finite-state methods is that of Beesley et al. (1989)
with a ‘detouring’ mechanism for access to mul-
tiple lexica, which gives rise to other works by
Beesley (Beesley, 1998) and, independently, by
Buckwalter (2004).
The approach of McCarthy (1981) to describ-
ing root-and-pattern morphology in the framework
of autosegmental phonology has given rise to a
number of computational proposals. Kay (1987)
proposes a framework with which each of the au-
tosegmental tiers is assigned a tape in a multi-tape
finite state machine, with an additional tape for the
surface form. Kiraz (2000,2001) extends Kay’s
</bodyText>
<figure confidence="0.8321385">
y+ aktub
3person write
sa+
will
wa+
and
</figure>
<page confidence="0.994134">
682
</page>
<bodyText confidence="0.999895428571429">
approach and implements a small working multi-
tape system for MSA and Syriac. Other autoseg-
mental approaches (described in more details in
Kiraz 2001 (Chapter 4)) include those of Kornai
(1995), Bird and Ellison (1994), Pulman and Hep-
ple (1993), whose formalism Kiraz adopts, and
others.
</bodyText>
<sectionHeader confidence="0.990674" genericHeader="method">
4 Design Goals for MAGEAD
</sectionHeader>
<bodyText confidence="0.999867910714286">
This work is aimed at a unified processing archi-
tecture for the morphology of all variants of Ara-
bic, including the dialects. Three design goals fol-
low from this overall goal:
First, we want to be able to use the analyzer
when we do not have a lexicon, or only a partial
lexicon. This is because, despite the similarities
between dialects at the morphological and lexical
levels, we do cannot assume we have a complete
lexicon for every dialect we wish to morphologi-
cally analyze. As a result, we want an on-line ana-
lyzer which performs full morphological analysis
at run time.
Second, we want to be able to exploit the ex-
isting regularities among the variants, in particu-
lar systematic sound changes which operate at the
level of the radicals, and pattern changes. This re-
quires an explicit analysis into root and pattern.
Third, the dialects are mainly used in spoken
communication and in the rare cases when they are
written they do not have standard orthographies,
and different (inconsistent) orthographies may be
used even within a single written text. We thus
need a representation of morphology that incorpo-
rates models of both phonology and orthogra-
phy.
In addition, we add two general requirements
for morphological analyzers. First, we want both a
morphological analyzer and a morphological gen-
erator. Second, we want to use a representation
that is defined in terms of a lexeme and attribute-
value pairs for morphological features such as as-
pect or person. This is because we want our com-
ponent to be usable in natural language processing
(NLP) applications such as natural language gen-
eration and machine translation, and the lexeme
provides a usable lexicographic abstraction. Note
that the second general requirement (an analysis
to a lexemic representation) appears to clash with
the first design desideratum (we may not have a
lexicon).
We tackle these requirements by doing a full
analysis of templatic morphology, rather than
“precompiling” the templatic morphology into
stems and only analyzing affixational morphol-
ogy on-line (as is done in (Buckwalter, 2004)).
Our implementation uses the multitape approach
of Kiraz (2000). This is the first large-scale im-
plementation of that approach. We extend it by
adding an additional tape for independently mod-
eling phonology and orthography. The use of fi-
nite state technology makes MAGEAD usable as a
generator as well as an analyzer, unlike some mor-
phological analyzers which cannot be converted to
generators in a straightforward manner (Buckwal-
ter, 2004; Habash, 2004).
</bodyText>
<sectionHeader confidence="0.977461" genericHeader="method">
5 The MAGEAD System: Representation
</sectionHeader>
<subsectionHeader confidence="0.894917">
of Linguistic Knowledge
</subsectionHeader>
<bodyText confidence="0.999898076923077">
MAGEAD relates (bidirectionally) a lexeme and a
set of linguistic features to a surface word form
through a sequence of transformations. In a gen-
eration perspective, the features are translated to
abstract morphemes which are then ordered, and
expressed as concrete morphemes. The concrete
templatic morphemes are interdigitated and affixes
added, and finally morphological and phonologi-
cal rewrite rules are applied. In this section, we
discuss our organization of linguistic knowledge,
and give some examples; a more complete discus-
sion of the organization of linguistic knowledge in
MAGEAD can be found in (Habash et al., 2006).
</bodyText>
<subsectionHeader confidence="0.999266">
5.1 Morphological Behavior Classes
</subsectionHeader>
<bodyText confidence="0.999738578947369">
Morphological analyses are represented in terms
of a lexeme and features. We define the lexeme
to be a triple consisting of a root (or an NTWS),
a meaning index, and a morphological behavior
class (MBC). We do not deal with issues relating
to word sense here and therefore do not further dis-
cuss the meaning index. It is through this view of
the lexeme (which incorporates productive deriva-
tional morphology without making claims about
semantic predictability) that we can both have a
lexeme-based representation, and operate without
a lexicon. In fact, because lexemes have internal
structure, we can hypothesize lexemes on the fly
without having to make wild guesses (we know
the pattern, it is only the root that we are guess-
ing). We will see in Section 8 that this approach
does not wildly overgenerate.
We use as our example the surface form
Aizdaharat (Azdhrt without diacritics)
</bodyText>
<page confidence="0.995585">
683
</page>
<bodyText confidence="0.805208">
‘she/it flourished’. The lexeme-and-features rep-
resentation of this word form is as follows:
</bodyText>
<listItem confidence="0.956671">
(2) Root:zhr MBC:verb-VIII POS:V PER:3
GEN:F NUM:SG ASPECT:PERF
</listItem>
<bodyText confidence="0.999869322580645">
An MBC maps sets of linguistic feature-value
pairs to sets of abstract morphemes. For ex-
ample, MBC verb-VIII maps the feature-value
pair ASPECT:PERF to the abstract root mor-
pheme [PAT PV:VIII], which in MSA corre-
sponds to the concrete root morpheme AV1tV2V3,
while the MBC verb-I maps ASPECT:PERF to
the abstract root morpheme [PAT PV:I], which
in MSA corresponds to the concrete root mor-
pheme 1V2V3. We define MBCs using a hierar-
chical representation with non-monotonic inher-
itance. The hierarchy allows us to specify only
once those feature-to-morpheme mappings for all
MBCs which share them. For example, the root
node of our MBC hierarchy is a word, and all
Arabic words share certain mappings, such as that
from the linguistic feature conj:w to the clitic w+.
This means that all Arabic words can take a cliti-
cized conjunction. Similarly, the object pronomi-
nal clitics are the same for all transitive verbs, no
matter what their templatic pattern is. We have
developed a specification language for express-
ing MBC hierarchies in a concise manner. Our
hypothesis is that the MBC hierarchy is variant-
independent, though as more variants are added,
some modifications may be needed. Our current
MBC hierarchy specification for both MSA and
Levantine, which covers only the verbs, comprises
66 classes, of which 25 are abstract, i.e., only used
for organizing the inheritance hierarchy and never
instantiated in a lexeme.
</bodyText>
<subsectionHeader confidence="0.9972265">
5.2 Ordering and Mapping Abstract and
Concrete Morphemes
</subsectionHeader>
<bodyText confidence="0.8732127">
To keep the MBC hierarchy variant-independent,
we have also chosen a variant-independent repre-
sentation of the morphemes that the MBC hier-
archy maps to. We refer to these morphemes as
abstract morphemes (AMs). The AMs are then
ordered into the surface order of the correspond-
ing concrete morphemes. The ordering of AMs
is specified in a variant-independent context-free
grammar. At this point, our example (2) looks like
this:
</bodyText>
<listItem confidence="0.831292">
(3) [Root:zhr][PAT PV:VIII]
[VOC PV:VIII-act] + [SUBJSUF PV:3FS]
</listItem>
<bodyText confidence="0.999783428571429">
Note that as the root, pattern, and vocalism are
not ordered with respect to each other, they are
simply juxtaposed. The ‘+’ sign indicates the
ordering of affixational morphemes. Only now
are the AMs translated to concrete morphemes
(CMs), which are concatenated in the specified or-
der. Our example becomes:
</bodyText>
<listItem confidence="0.498449">
(4) zhr,AV1tV2V3,iaa +at
</listItem>
<bodyText confidence="0.989172">
The interdigitation of root, pattern and vocalism
then yields the form Aiztahar+at.
</bodyText>
<subsectionHeader confidence="0.9979155">
5.3 Morphological, Phonological, and
Orthographic Rules
</subsectionHeader>
<bodyText confidence="0.999974615384616">
We have two types of rules. Morphophone-
mic/phonological rules map from the morphemic
representation to the phonological and ortho-
graphic representations. This includes default
rules which copy roots and vocalisms to the
phonological and orthographic tiers, and special-
ized rules to handle hollow verbs (verbs with a
glide as their middle radical), or more special-
ized rules for cases such as the pattern consonant
change in Form VIII (the /t/ of the pattern changes
to a /d/ if the first radical is /z/, /d/, or /*/; this rule
operates in our example). For MSA, we have 69
rules of this type.
Orthographic rules rewrite only the ortho-
graphic representation. These include, for exam-
ples, rules for using the shadda (consonant dou-
bling diacritic). For MSA, we have 53 such rules.
For our example, we get /izdaharat/ at the
phonological level. Using standard MSA dia-
critized orthography, our example becomes Aizda-
harat (in transliteration). Removing the diacritics
turns this into the more familiar Azdhrt.
Note that in analysis mode, we hypothesize all
possible diacritics (a finite number, even in com-
bination) and perform the analysis on the resulting
multi-path automaton.
</bodyText>
<sectionHeader confidence="0.965034" genericHeader="method">
6 The MAGEAn System: Implementation
</sectionHeader>
<bodyText confidence="0.9995132">
We follow (Kiraz, 2000) in using a multitape rep-
resentation. We extend the analysis of Kiraz by in-
troducing a fifth tier. The five tiers are used as fol-
lows: Tier 1: pattern and affixational morphemes;
Tier 2: root; Tier 3: vocalism; Tier 4: phonologi-
cal representation; Tier 5: orthographic represen-
tation. In the generation direction, tiers 1 through
3 are always input tiers. Tier 4 is first an output
tier, and subsequently an input tier. Tier 5 is al-
ways an output tier.
</bodyText>
<page confidence="0.995571">
684
</page>
<bodyText confidence="0.999986">
We have implemented multi-tape finite state
automata as a layer on top of the AT&amp;T two-
tape finite state transducers (Mohri et al., 1998).
We have defined a specification language for the
higher multitape level, the new Morphtools for-
mat. Specification in the Morphtools format of
different types of information such as rules or
context-free grammars for morpheme ordering are
compiled to the appropriate Lextools format (an
NLP-oriented extension of the AT&amp;T toolkit for
finite-state machines, (Sproat, 1995)). For reasons
of space, we omit a further discussion of Mor-
phtools. For details, see (Habash et al., 2005).
</bodyText>
<sectionHeader confidence="0.975998" genericHeader="method">
7 From MSA to Levantine
</sectionHeader>
<bodyText confidence="0.995168013333334">
We modified MAGEAD so that it accepts Levantine
rather than MSA verbs. Our effort concentrated
on the orthographic representation; to simplify our
task, we used a diacritic-free orthography for Lev-
antine developed at the Linguistic Data Consor-
tium (Maamouri et al., 2006). Changes were done
only to the representations of linguistic knowledge
at the four levels discussed in Section 5, not to the
processing engine.
Morphological Behavior Classes: The MBCs
are variant-independent, so in theory no changes
needed to be implemented. However, as Levantine
is our first dialect, we expand the MBCs to include
two AMs not found in MSA: the aspectual particle
and the postfix negation marker.
Abstract Morpheme Ordering: The context-
free grammar representing the ordering of AMs
needed to be extended to order the two new AMs,
which was straightforward.
Mapping Abstract to Concrete Morphemes:
This step requires four types of changes to a table
representing this mapping. In the first category,
the new AMs require mapping to CMs. Second,
those AMs which do not exist in Levantine need to
be mapped to zero (or to an error value). These are
dual number, and subjunctive and jussive moods.
Third, in Levantine some AMs allow additional
CMs in allomorphic variation with the same CMs
as seen in MSA. This affects three object clitics;
for example, the second person masculine plu-
ral, in addition to +kum (also found in MSA),
also can be +kuwA. Fourth, in five cases, the
subject suffix in the imperfective is simply differ-
ent for Levantine. For example, the second per-
son feminine singular indicative imperfective suf-
fix changes from + +iyna in MSA to + +iy in
Levantine. Note that more changes in CMs would
be required were we completely modeling Levan-
tine phonology (i.e., including the short vowels).
Morphological, Phonological, and Ortho-
graphic Rules. We needed to change one rule, and
add one. In MSA, the vowel between the second
and third radical is deleted when they are identical
(“gemination”) only if the third radical is followed
by a suffix starting with a vowel. In Levantine,
in contrast, gemination always happens, indepen-
dently of the suffix. If the suffix starts with a con-
sonant, a long /e/ is inserted after the third radical.
The new rule deletes the first person singular sub-
ject prefix for the imperfective, + A+, when it is
preceded by the aspectual marker +✆ b+.
We summarize now the expertise required to
convert MSA resources to Levantine, and we com-
ment on the amount of work needed for adding
a further dialect. We modified the MBC hierar-
chy, but only minor changes were needed. We ex-
pect only one major further change to the MBCs,
namely the addition of an indirect object clitic
(since the indirect object in some dialects is some-
times represented as an orthographic clitic). The
AM ordering can be read off from examples in
a fairly straightforward manner; the introduction
of an indirect object AM would, for example, re-
quire an extension of the ordering specification.
The mapping from AMs to CMs, which is variant-
specific, can be obtained easily from a linguisti-
cally trained (near-)native speaker or from a gram-
mar handbook, and with a little more effort from
an informant. Finally, the rules, which again can
be variant-specific, require either a good morpho-
phonological treatise for the dialect, a linguisti-
cally trained (near-)native speaker, or extensive ac-
cess to an informant. In our case, the entire con-
version from MSA to Levantine was performed by
a native speaker linguist in about six hours.
</bodyText>
<sectionHeader confidence="0.995694" genericHeader="evaluation">
8 Evaluation
</sectionHeader>
<bodyText confidence="0.9999135">
The goal of the evaluation is primarily to investi-
gate how reduced lexical resources affect the per-
formance of morphological analysis, as we will
not have complete lexicons for the dialects. A sec-
ond goal is to validate MAGEAD in analysis mode
by comparing it to the Buckwalter analyzer (Buck-
walter, 2004) when MAGEAD has a full lexicon at
its disposal. Because of the lack of resources for
the dialects, we use primarily MSA for both goals,
but we also discuss a more modest evaluation on a
</bodyText>
<page confidence="0.99811">
685
</page>
<bodyText confidence="0.9792844">
Levantine corpus.
We first discuss the different sources of lexical
knowledge, and then present our evaluation met-
rics. We then separately evaluate MSA and Lev-
antine morphological analysis.
</bodyText>
<subsectionHeader confidence="0.997698">
8.1 Lexical Knowledge Sources
</subsectionHeader>
<bodyText confidence="0.982818291666667">
We evaluate the following sources of lexical
knowledge on what roots, i.e, combinations of rad-
icals, are possible. Except for all, these are lists of
attested verbal roots. It is not a trivial task to com-
pile a list of verbal roots for MSA, and we com-
pare different sources for these lists.
all: All radical combinations are allowed, we
use no lexical knowledge at all.
dar: List of roots extracted by (Darwish,
2003) from Lisan AZ’arab, a large Arabic dictio-
nary.
bwl: A list of roots appearing as comments in
the Buckwalter lexicon (Buckwalter, 2004).
lex: Roots extracted by us from the list of lex-
eme citation forms in the Buckwalter lexicon us-
ing surfacy heuristics for quick-and-dirty morpho-
logical analysis.
mbc: This is the same list as lex, except that
we pair each root with the MBCs with which it was
seen in the Buckwalter lexicon (recall that for us,
a lexeme is a root with an MBC). Note that mbc
represents a full lexicon, though it was converted
automatically from the Buckwalter lexicon and it
has not been hand-checked.
</bodyText>
<subsectionHeader confidence="0.999918">
8.2 Test Corpora and Metrics
</subsectionHeader>
<bodyText confidence="0.999745404255319">
For development and testing purposes, we use
MSA and Levantine. For MSA, we use the
Penn Arabic Treebank (ATB) (Maamouri et al.,
2004). The morphological annotation we use
is the “before-file”, which lists the untokenized
words (as they appear in the Arabic original text)
and all possible analyses according to the Buck-
walter analyzer (Buckwalter, 2004). The analysis
which is correct for the given token in its context
is marked; sometimes, it is also hand-corrected
(or added by hand), while the contextually incor-
rect analyses are never hand-corrected. For devel-
opment, we use ATB1 section 20000715, and for
testing, Sections 20001015 and 20001115 (13,885
distinct verbal types).
For Levantine, we use a similarly annotated cor-
pus, the Levantine Arabic Treebank (LATB) from
the Linguistic Data Consortium. However, there
are three major differences: the text is transcribed
speech, the corpus is much smaller, and, since,
there is no morphological analyzer for Levantine
currently, the before-files are the result of running
the MSA Buckwalter analyzer on the Levantine to-
ken, with many of the analyses incorrect, and only
the analysis chosen for the token in context usually
hand-corrected. We use LATB files fsa 16* for de-
velopment, and for testing, files fsa 17*, fsa 18*
(14 conversations, 3,175 distinct verbal types).
We evaluate using three different metrics. The
token-based metrics are the corresponding type-
based metric weighted by the number of occur-
rences of the type in the test corpus.
Recall (TyR for type recall, ToR for token re-
call): what proportion of the analyses in the gold
standard does MAGEAD get?
Precision (TyP for type precision, ToP for to-
ken precision): what proportion of the analyses
that MAGEAD gets are also in the gold standard?
Context token recall (CToR): how often does
MAGEAD get the contextually correct analysis for
that token?
We do not give context precision figures, as
MAGEAD does not determine the contextually cor-
rect analysis (this is a tagging problem). Rather,
we interpret the context recall figures as a measure
of how often MAGEAD gets the most important of
the analyses (i.e., the correct one) for each token.
</bodyText>
<table confidence="0.724922">
Roots TyR TyP ToR ToP CToR
all 21952 98.5 44.8 98.6 36.9 97.9
dar 10377 98.1 50.5 98.3 43.3 97.7
bwl 6450 96.7 52.2 97.2 42.9 96.7
lex 3658 97.3 55.6 97.3 49.2 97.5
mbc 3658 96.1 63.5 95.8 59.4 96.4
</table>
<figureCaption confidence="0.954121">
Figure 1: Results comparing MAGEAD to the Buckwalter
</figureCaption>
<bodyText confidence="0.605202333333333">
Analyzer on MSA for different root restrictions, and for dif-
ferent metrics; “Roots” indicates the number of possible roots
for that restriction; all numbers are percent figures
</bodyText>
<subsectionHeader confidence="0.998972">
8.3 Quantitative Analysis: MSA
</subsectionHeader>
<bodyText confidence="0.999386727272727">
The results are summarized in Figure 1. We see
that we get a (rough) recall-precision trade-off,
both for types and for tokens: the more restric-
tive we are, the higher our precision, but recall
declines. For all, we get excellent recall, and an
overgeneration by a factor of only 2. This perfor-
mance, assuming it is roughly indicative of dialect
performance, allows us to conclude that we can
use MAGEAD as a dialect morphological analyzer
without a lexicon.
For the root lists, we see that precision is al-
</bodyText>
<page confidence="0.997768">
686
</page>
<bodyText confidence="0.9999736">
ways higher than for all, as many false analyses
are eliminated. At the same time, some correct
analyses are also eliminated. Furthermore, bwl
under performs somewhat. The change from lex to
mbc is interesting, as mbc is a true lexicon (since
it does not only state which roots are possible, but
also what their MBC is). Precision increases sub-
stantially, but not as much as we had hoped. We
investigate the errors of mbc in the next subsection
in more detail.
</bodyText>
<subsectionHeader confidence="0.989304">
8.4 Qualitative Analysis: MSA
</subsectionHeader>
<bodyText confidence="0.999993659574468">
The gold standard we are using has been gener-
ated automatically using the Buckwalter analyzer.
Only the contextually correct analysis has been
hand-checked. As a result, our quantitative analy-
sis in Section 8.3 leaves open the question of how
good the gold standard is in the first place. We an-
alyzed all of the 2,536 false positives (types) pro-
duced by MAGEAn on our development set (anal-
yses it suggested, but which the Test corpus did
not have). In 75% of the errors, the Buckwalter
analyzer does not provide a passive voice analy-
sis which differs from the active voice one only
in diacritics which are not written. 7% are cases
where Buckwalter does not make distinctions that
MAGEAn makes (e.g. mood variations that are
not phonologically realized); in 4.4% of the er-
rors a correct analysis was created but it was not
produced by Buckwalter for various reasons. If
we count these cases as true positives rather than
as false positives (as in the case in Figure 1) and
take type frequency into account, we obtain a to-
ken precision rate of 94.9% on the development
set.
The remaining cases are MAGEAn errors. 3.3%
are missing rules to handle special cases such as
jussive mood interaction with weak radicals; 5.4%
are incorrect combinations of morphemes such as
passive voice and object pronouns; 2.6% of the er-
rors are cases of pragmatic overgeneration such as
second person masculine subjects with a second
person feminine plural object. 1.5% of the errors
are errors of the mbc-root list and 1.2% are other
errors. A large number of these errors are fixable
errors.
There were 162 false negatives (gold standard
analyses MAGEAn did not get). 65.4% of these
errors were a result of the use of the mbc list re-
striction. The rest of the errors are all a result
of unhandled phenomena in MAGEAn: quadrilat-
eral roots (13.6%), imperatives (8%), and specific
missing rules/ rule failures (13%) (e.g., for han-
dling some weak radicals/hamza cases, pattern IX
gemination-like behavior, etc.).
We conclude that we can claim that our preci-
sion numbers are actually much higher, and that
we can further improve them by adding more rules
and knowledge to MAGEAn.
</bodyText>
<subsectionHeader confidence="0.8475905">
8.5 Quantitative and Qualitative Analysis:
Levantine
</subsectionHeader>
<bodyText confidence="0.927379090909091">
For the Levantine, we do not have a list of all
possible analyses for each word in the gold stan-
dard: only the contextually appropriate analysis is
hand-checked. We therefore only report context
recall in Figure 2. As a baseline, we report the
MSA MAGEAn with the all restriction applied to
the same Levantine test corpus. As we can see,
the MSA system performs poorly on Levantine in-
put. The Levantine system we use is the one de-
scribed in Section 7. We use the resulting ana-
lyzer with the all option as we have no informa-
tion on roots in Levantine. MAGEAn with Lev-
antine knowledge does well, missing only one in
20 contextually correct analyses. We take this to
mean that the architecture of MAGEAn allows us
to port MAGEAn fairly rapidly to a new dialect
and to perform adequately well on the most im-
portant analysis for each token, the contextually
relevant one.
System CTyR CToR
MSA-all 52.9 60.4
LEV-all 95.4 94.2
</bodyText>
<figureCaption confidence="0.997616">
Figure 2: Results on Levantine; MSA-all is a baseline
</figureCaption>
<bodyText confidence="0.9999013">
For the Levantine MAGEAn, there were 25 er-
rors, cases of contextually selected analyses that
MAGEAn did not get (false negatives). Most
of these are related to phenomena that MAGEAn
doesn’t currently handle: imperatives (48%)
(which are much more common in speech corpora)
and quadrilateral roots (8%). There were four
cases (16%) of an unhandled variant spelling of an
object pronoun and 7 cases (28%) of hamza/weak
radical rule errors.
</bodyText>
<sectionHeader confidence="0.998773" genericHeader="conclusions">
9 Outlook
</sectionHeader>
<bodyText confidence="0.999962333333333">
We have described a morphological analyzer for
Arabic and its dialects which decomposes word
forms into the templatic morphemes and relates
</bodyText>
<page confidence="0.994624">
687
</page>
<bodyText confidence="0.9996153">
morphemes to strings. We have evaluated the cur-
rent state of the implementation both for MSA and
for Levantine, both quantitatively and in a detailed
error analysis, and have shown that we have met
our design objectives of having a flexible analyzer
which can be used on a new dialect in the absence
of a lexicon and with a restrained amount of man-
ual knowledge engineering needed.
In ongoing work, we are populating MAGEAD
with more knowledge (morphemes and rules) for
MSA nouns and other parts of speech, for more of
Levantine, and for more dialects. We intend to in-
clude a full phonological representation for Levan-
tine (including short vowels). In future work, we
will investigate the derivation of words with mor-
phemes from more than one variant (code switch-
ing). We will also investigate ways of using mor-
phologically tagged corpora to assign weights to
the arcs in the transducer so that the analyses re-
turned by MAGEAD are ranked.
</bodyText>
<sectionHeader confidence="0.999091" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999853963855421">
Imad A. Al-Sughaiyer and Ibrahim A. Al-Kharashi.
2004. Arabic morphological analysis techniques:
A comprehensive survey. Journal of the Ameri-
can Societyfor Information Science and Technology,
55(3):189–213.
K. Beesley, T. Buckwalter, and S. Newton. 1989. Two-
level finite-state analysis of Arabic morphology. In
Proceedings of the Seminar on Bilingual Computing
in Arabic and English, page n.p.
K. Beesley. 1998. Arabic morphology using only
finite-state operations. In M. Rosner, editor, Pro-
ceedings of the Workshop on Computational Ap-
proaches to Semitic Languages, pages 50–7, Mon-
tereal.
S. Bird and T. Ellison. 1994. One-level phonology.
Computational Linguistics, 20(1):55–90.
Tim Buckwalter. 2004. Buckwalter Arabic morpho-
logical analyzer version 2.0.
Kareem Darwish. 2003. Building a shallow Arabic
morphological analyser in one day. In ACL02 Work-
shop on Computational Approaches to Semitic Lan-
guages, Philadelpia, PA. Association for Computa-
tional Linguistics.
Charles F Ferguson. 1959. Diglossia. Word,
15(2):325–340.
Nizar Habash, Owen Rambow, and Geroge Kiraz.
2005. Morphological analysis and generation for
arabic dialects. In Proceedings of the ACL Work-
shop on Computational Approaches to Semitic Lan-
guages, Ann Arbor, MI.
Nizar Habash, Owen Rabmow, and Richard Sproat.
2006. The representation of linguistic knowledge in
a pan-Arabic morphological analyzer. Paper under
preparation, Columbia University and UIUC.
Nizar Habash. 2004. Large scale lexeme based arabic
morphological generation. In Proceedings of Traite-
ment Automatique du Langage Naturel (TALN-04).
Fez, Morocco.
L. Kataja and K. Koskenniemi. 1988. Finite state de-
scription of Semitic morphology. In COLING-88:
Papers Presented to the 12th International Confer-
ence on Computational Linguistics, volume 1, pages
313–15.
Martin Kay. 1987. Nonconcatenative finite-state mor-
phology. In Proceedings of the Third Conference of
the European Chapter of the Association for Com-
putational Linguistics, pages 2–10.
George Anton Kiraz. 2000. Multi-tiered nonlinear
morphology using multi-tape finite automata: A
case study on Syriac and Arabic. Computational
Linguistics, 26(1):77–105.
George Kiraz. 2001. Computational Nonlinear Mor-
phology: With Emphasis on Semitic Languages.
Cambridge University Press.
A. Kornai. 1995. Formal Phonology. Garland Pub-
lishing.
K. Koskenniemi. 1983. Two-Level Morphology. Ph.D.
thesis, University of Helsinki.
Mohamed Maamouri, Ann Bies, and Tim Buckwalter.
2004. The Penn Arabic Treebank: Building a large-
scale annotated arabic corpus. In NEMLAR Con-
ference on Arabic Language Resources and Tools,
Cairo, Egypt.
Mohamed Maamouri, Ann Bies, Tim Buckwalter,
Mona Diab, Nizar Habash, Owen Rambow, and
Dalila Tabessi. 2006. Developing and using a pilot
dialectal arabic treebank. In Proceedings of LREC,
Genoa, Italy.
John McCarthy. 1981. A prosodic theory of
nonconcatenative morphology. Linguistic Inquiry,
12(3):373–418.
M. Mohri, F. Pereira, and M. Riley. 1998. A ratio-
nal design for a weighted finite-state transducer li-
brary. In D. Wood and S. Yu, editors, Automata
Implementation, Lecture Notes in Computer Science
1436, pages 144–58. Springer.
S. Pulman and M. Hepple. 1993. A feature-based for-
malism for two-level phonology: a description and
implementation. Computer Speech and Language,
7:333–58.
Richard Sproat. 1995. Lextools: Tools for finite-
state linguistic analysis. Technical Report 11522-
951108-10TM, Bell Laboratories.
</reference>
<page confidence="0.997348">
688
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.717860">
<title confidence="0.999938">A Morphological Analyzer and Generator for the Arabic Dialects</title>
<author confidence="0.998606">Nizar Habash</author>
<author confidence="0.998606">Owen Rambow</author>
<affiliation confidence="0.999603">Center for Computational Learning Systems Columbia University</affiliation>
<address confidence="0.999819">New York, NY 10115, USA</address>
<email confidence="0.999797">@cs.columbia.edu</email>
<abstract confidence="0.999235">present a morphological analyzer and generator for the Arabic language family. Our work is novel in that it explicitly addresses the need for processing the morphology of the dialects. an on-line analysis to or generation from a root+pattern+features representation, it has separate phonological and orthographic representations, and it allows for combining morphemes from different dialects. We present a detailed</abstract>
<intro confidence="0.722968">of</intro>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Imad A Al-Sughaiyer</author>
<author>Ibrahim A Al-Kharashi</author>
</authors>
<title>Arabic morphological analysis techniques: A comprehensive survey.</title>
<date>2004</date>
<journal>Journal of the American Societyfor Information Science and Technology,</journal>
<volume>55</volume>
<issue>3</issue>
<contexts>
<context position="6873" citStr="Al-Sughaiyer and Al-Kharashi, 2004" startWordPosition="1083" endWordPosition="1086">nts. An example of a phonological rewrite rule is the voicing of the /t/ of the verbal pattern V1tV2V3 (Form VIII) when the first root radical is /z/, /d/, or /*/ ( , , or ): the verbal stem zhr+V1tV2V3+iaa is realized phonologically as /izdahar/ (orthographically: ) ‘flourish’ not /iztahar/ (orthographically: ). An example of an orthographic rewrite rule is the deletion of the Alif () of the definite article morpheme Al+ (+ ) in nouns when preceded by the preposition l+ (+✱ ). 3 Previous Work There has been a considerable amount of work on Arabic morphological analysis; for an overview, see (Al-Sughaiyer and Al-Kharashi, 2004). We summarize some of the most relevant work here. Kataja and Koskenniemi (1988) present a system for handling Akkadian root-and-pattern morphology by adding an additional lexicon component to Koskenniemi’s two-level morphology (1983). The first large scale implementation of Arabic morphology within the constraints of finite-state methods is that of Beesley et al. (1989) with a ‘detouring’ mechanism for access to multiple lexica, which gives rise to other works by Beesley (Beesley, 1998) and, independently, by Buckwalter (2004). The approach of McCarthy (1981) to describing root-and-pattern m</context>
</contexts>
<marker>Al-Sughaiyer, Al-Kharashi, 2004</marker>
<rawString>Imad A. Al-Sughaiyer and Ibrahim A. Al-Kharashi. 2004. Arabic morphological analysis techniques: A comprehensive survey. Journal of the American Societyfor Information Science and Technology, 55(3):189–213.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Beesley</author>
<author>T Buckwalter</author>
<author>S Newton</author>
</authors>
<title>Twolevel finite-state analysis of Arabic morphology.</title>
<date>1989</date>
<booktitle>In Proceedings of the Seminar on Bilingual Computing in Arabic and English,</booktitle>
<pages>page n.p.</pages>
<contexts>
<context position="7247" citStr="Beesley et al. (1989)" startWordPosition="1139" endWordPosition="1142"> of the definite article morpheme Al+ (+ ) in nouns when preceded by the preposition l+ (+✱ ). 3 Previous Work There has been a considerable amount of work on Arabic morphological analysis; for an overview, see (Al-Sughaiyer and Al-Kharashi, 2004). We summarize some of the most relevant work here. Kataja and Koskenniemi (1988) present a system for handling Akkadian root-and-pattern morphology by adding an additional lexicon component to Koskenniemi’s two-level morphology (1983). The first large scale implementation of Arabic morphology within the constraints of finite-state methods is that of Beesley et al. (1989) with a ‘detouring’ mechanism for access to multiple lexica, which gives rise to other works by Beesley (Beesley, 1998) and, independently, by Buckwalter (2004). The approach of McCarthy (1981) to describing root-and-pattern morphology in the framework of autosegmental phonology has given rise to a number of computational proposals. Kay (1987) proposes a framework with which each of the autosegmental tiers is assigned a tape in a multi-tape finite state machine, with an additional tape for the surface form. Kiraz (2000,2001) extends Kay’s y+ aktub 3person write sa+ will wa+ and 682 approach an</context>
</contexts>
<marker>Beesley, Buckwalter, Newton, 1989</marker>
<rawString>K. Beesley, T. Buckwalter, and S. Newton. 1989. Twolevel finite-state analysis of Arabic morphology. In Proceedings of the Seminar on Bilingual Computing in Arabic and English, page n.p.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Beesley</author>
</authors>
<title>Arabic morphology using only finite-state operations.</title>
<date>1998</date>
<booktitle>Proceedings of the Workshop on Computational Approaches to Semitic Languages,</booktitle>
<pages>50--7</pages>
<editor>In M. Rosner, editor,</editor>
<publisher>Montereal.</publisher>
<contexts>
<context position="7366" citStr="Beesley, 1998" startWordPosition="1161" endWordPosition="1162">a considerable amount of work on Arabic morphological analysis; for an overview, see (Al-Sughaiyer and Al-Kharashi, 2004). We summarize some of the most relevant work here. Kataja and Koskenniemi (1988) present a system for handling Akkadian root-and-pattern morphology by adding an additional lexicon component to Koskenniemi’s two-level morphology (1983). The first large scale implementation of Arabic morphology within the constraints of finite-state methods is that of Beesley et al. (1989) with a ‘detouring’ mechanism for access to multiple lexica, which gives rise to other works by Beesley (Beesley, 1998) and, independently, by Buckwalter (2004). The approach of McCarthy (1981) to describing root-and-pattern morphology in the framework of autosegmental phonology has given rise to a number of computational proposals. Kay (1987) proposes a framework with which each of the autosegmental tiers is assigned a tape in a multi-tape finite state machine, with an additional tape for the surface form. Kiraz (2000,2001) extends Kay’s y+ aktub 3person write sa+ will wa+ and 682 approach and implements a small working multitape system for MSA and Syriac. Other autosegmental approaches (described in more det</context>
</contexts>
<marker>Beesley, 1998</marker>
<rawString>K. Beesley. 1998. Arabic morphology using only finite-state operations. In M. Rosner, editor, Proceedings of the Workshop on Computational Approaches to Semitic Languages, pages 50–7, Montereal.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Bird</author>
<author>T Ellison</author>
</authors>
<title>One-level phonology.</title>
<date>1994</date>
<journal>Computational Linguistics,</journal>
<volume>20</volume>
<issue>1</issue>
<contexts>
<context position="8053" citStr="Bird and Ellison (1994)" startWordPosition="1268" endWordPosition="1271">thy (1981) to describing root-and-pattern morphology in the framework of autosegmental phonology has given rise to a number of computational proposals. Kay (1987) proposes a framework with which each of the autosegmental tiers is assigned a tape in a multi-tape finite state machine, with an additional tape for the surface form. Kiraz (2000,2001) extends Kay’s y+ aktub 3person write sa+ will wa+ and 682 approach and implements a small working multitape system for MSA and Syriac. Other autosegmental approaches (described in more details in Kiraz 2001 (Chapter 4)) include those of Kornai (1995), Bird and Ellison (1994), Pulman and Hepple (1993), whose formalism Kiraz adopts, and others. 4 Design Goals for MAGEAD This work is aimed at a unified processing architecture for the morphology of all variants of Arabic, including the dialects. Three design goals follow from this overall goal: First, we want to be able to use the analyzer when we do not have a lexicon, or only a partial lexicon. This is because, despite the similarities between dialects at the morphological and lexical levels, we do cannot assume we have a complete lexicon for every dialect we wish to morphologically analyze. As a result, we want an</context>
</contexts>
<marker>Bird, Ellison, 1994</marker>
<rawString>S. Bird and T. Ellison. 1994. One-level phonology. Computational Linguistics, 20(1):55–90.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Tim Buckwalter</author>
</authors>
<title>Buckwalter Arabic morphological analyzer version 2.0.</title>
<date>2004</date>
<contexts>
<context position="7407" citStr="Buckwalter (2004)" startWordPosition="1166" endWordPosition="1167">c morphological analysis; for an overview, see (Al-Sughaiyer and Al-Kharashi, 2004). We summarize some of the most relevant work here. Kataja and Koskenniemi (1988) present a system for handling Akkadian root-and-pattern morphology by adding an additional lexicon component to Koskenniemi’s two-level morphology (1983). The first large scale implementation of Arabic morphology within the constraints of finite-state methods is that of Beesley et al. (1989) with a ‘detouring’ mechanism for access to multiple lexica, which gives rise to other works by Beesley (Beesley, 1998) and, independently, by Buckwalter (2004). The approach of McCarthy (1981) to describing root-and-pattern morphology in the framework of autosegmental phonology has given rise to a number of computational proposals. Kay (1987) proposes a framework with which each of the autosegmental tiers is assigned a tape in a multi-tape finite state machine, with an additional tape for the surface form. Kiraz (2000,2001) extends Kay’s y+ aktub 3person write sa+ will wa+ and 682 approach and implements a small working multitape system for MSA and Syriac. Other autosegmental approaches (described in more details in Kiraz 2001 (Chapter 4)) include t</context>
<context position="10228" citStr="Buckwalter, 2004" startWordPosition="1627" endWordPosition="1628">rson. This is because we want our component to be usable in natural language processing (NLP) applications such as natural language generation and machine translation, and the lexeme provides a usable lexicographic abstraction. Note that the second general requirement (an analysis to a lexemic representation) appears to clash with the first design desideratum (we may not have a lexicon). We tackle these requirements by doing a full analysis of templatic morphology, rather than “precompiling” the templatic morphology into stems and only analyzing affixational morphology on-line (as is done in (Buckwalter, 2004)). Our implementation uses the multitape approach of Kiraz (2000). This is the first large-scale implementation of that approach. We extend it by adding an additional tape for independently modeling phonology and orthography. The use of finite state technology makes MAGEAD usable as a generator as well as an analyzer, unlike some morphological analyzers which cannot be converted to generators in a straightforward manner (Buckwalter, 2004; Habash, 2004). 5 The MAGEAD System: Representation of Linguistic Knowledge MAGEAD relates (bidirectionally) a lexeme and a set of linguistic features to a su</context>
<context position="21087" citStr="Buckwalter, 2004" startWordPosition="3387" endWordPosition="3389">n can be variant-specific, require either a good morphophonological treatise for the dialect, a linguistically trained (near-)native speaker, or extensive access to an informant. In our case, the entire conversion from MSA to Levantine was performed by a native speaker linguist in about six hours. 8 Evaluation The goal of the evaluation is primarily to investigate how reduced lexical resources affect the performance of morphological analysis, as we will not have complete lexicons for the dialects. A second goal is to validate MAGEAD in analysis mode by comparing it to the Buckwalter analyzer (Buckwalter, 2004) when MAGEAD has a full lexicon at its disposal. Because of the lack of resources for the dialects, we use primarily MSA for both goals, but we also discuss a more modest evaluation on a 685 Levantine corpus. We first discuss the different sources of lexical knowledge, and then present our evaluation metrics. We then separately evaluate MSA and Levantine morphological analysis. 8.1 Lexical Knowledge Sources We evaluate the following sources of lexical knowledge on what roots, i.e, combinations of radicals, are possible. Except for all, these are lists of attested verbal roots. It is not a triv</context>
<context position="22919" citStr="Buckwalter, 2004" startWordPosition="3699" endWordPosition="3700"> it was seen in the Buckwalter lexicon (recall that for us, a lexeme is a root with an MBC). Note that mbc represents a full lexicon, though it was converted automatically from the Buckwalter lexicon and it has not been hand-checked. 8.2 Test Corpora and Metrics For development and testing purposes, we use MSA and Levantine. For MSA, we use the Penn Arabic Treebank (ATB) (Maamouri et al., 2004). The morphological annotation we use is the “before-file”, which lists the untokenized words (as they appear in the Arabic original text) and all possible analyses according to the Buckwalter analyzer (Buckwalter, 2004). The analysis which is correct for the given token in its context is marked; sometimes, it is also hand-corrected (or added by hand), while the contextually incorrect analyses are never hand-corrected. For development, we use ATB1 section 20000715, and for testing, Sections 20001015 and 20001115 (13,885 distinct verbal types). For Levantine, we use a similarly annotated corpus, the Levantine Arabic Treebank (LATB) from the Linguistic Data Consortium. However, there are three major differences: the text is transcribed speech, the corpus is much smaller, and, since, there is no morphological an</context>
</contexts>
<marker>Buckwalter, 2004</marker>
<rawString>Tim Buckwalter. 2004. Buckwalter Arabic morphological analyzer version 2.0.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kareem Darwish</author>
</authors>
<title>Building a shallow Arabic morphological analyser in one day.</title>
<date>2003</date>
<booktitle>In ACL02 Workshop on Computational Approaches to Semitic Languages,</booktitle>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Philadelpia, PA.</location>
<contexts>
<context position="21915" citStr="Darwish, 2003" startWordPosition="3530" endWordPosition="3531">rst discuss the different sources of lexical knowledge, and then present our evaluation metrics. We then separately evaluate MSA and Levantine morphological analysis. 8.1 Lexical Knowledge Sources We evaluate the following sources of lexical knowledge on what roots, i.e, combinations of radicals, are possible. Except for all, these are lists of attested verbal roots. It is not a trivial task to compile a list of verbal roots for MSA, and we compare different sources for these lists. all: All radical combinations are allowed, we use no lexical knowledge at all. dar: List of roots extracted by (Darwish, 2003) from Lisan AZ’arab, a large Arabic dictionary. bwl: A list of roots appearing as comments in the Buckwalter lexicon (Buckwalter, 2004). lex: Roots extracted by us from the list of lexeme citation forms in the Buckwalter lexicon using surfacy heuristics for quick-and-dirty morphological analysis. mbc: This is the same list as lex, except that we pair each root with the MBCs with which it was seen in the Buckwalter lexicon (recall that for us, a lexeme is a root with an MBC). Note that mbc represents a full lexicon, though it was converted automatically from the Buckwalter lexicon and it has no</context>
</contexts>
<marker>Darwish, 2003</marker>
<rawString>Kareem Darwish. 2003. Building a shallow Arabic morphological analyser in one day. In ACL02 Workshop on Computational Approaches to Semitic Languages, Philadelpia, PA. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Charles F Ferguson</author>
</authors>
<date>1959</date>
<journal>Diglossia. Word,</journal>
<volume>15</volume>
<issue>2</issue>
<contexts>
<context position="2529" citStr="Ferguson, 1959" startWordPosition="389" endWordPosition="390">. This paper is organized as follows. In Section 2, we present the relevant facts about morphology in the Arabic language family. Previous work is summarized in Section 3. We present our design goals in Section 4, and then discuss our approach to representing linguistic knowledge for morphological analysis in Section 5. The implementation is sketched in Section 6. We outline the steps involved in creating a Levantine analyzer in Section 7. We evaluate our system in Section 8, and then conclude. 2 Arabic Morphology 2.1 Variants of Arabic The Arabic-speaking world is characterized by diglossia (Ferguson, 1959). Modern Standard Arabic (MSA) is the shared written language from Morocco to the Gulf, but it is not a native language of anyone. It is spoken only in formal, scripted contexts (news, speeches). In addition, there is a continuum of spoken dialects (varying geographically, but also by social class, gender, etc.) which are native languages, but rarely written (except in very informal contexts: collections of folk tales, newsgroups, email, etc). We will refer to MSA and the dialects as variants of Arabic. Variants differ phonologically, lexically, morphologically, and syntactically from one anot</context>
</contexts>
<marker>Ferguson, 1959</marker>
<rawString>Charles F Ferguson. 1959. Diglossia. Word, 15(2):325–340.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nizar Habash</author>
<author>Owen Rambow</author>
<author>Geroge Kiraz</author>
</authors>
<title>Morphological analysis and generation for arabic dialects.</title>
<date>2005</date>
<booktitle>In Proceedings of the ACL Workshop on Computational Approaches to Semitic Languages,</booktitle>
<location>Ann Arbor, MI.</location>
<contexts>
<context position="17210" citStr="Habash et al., 2005" startWordPosition="2737" endWordPosition="2740"> 684 We have implemented multi-tape finite state automata as a layer on top of the AT&amp;T twotape finite state transducers (Mohri et al., 1998). We have defined a specification language for the higher multitape level, the new Morphtools format. Specification in the Morphtools format of different types of information such as rules or context-free grammars for morpheme ordering are compiled to the appropriate Lextools format (an NLP-oriented extension of the AT&amp;T toolkit for finite-state machines, (Sproat, 1995)). For reasons of space, we omit a further discussion of Morphtools. For details, see (Habash et al., 2005). 7 From MSA to Levantine We modified MAGEAD so that it accepts Levantine rather than MSA verbs. Our effort concentrated on the orthographic representation; to simplify our task, we used a diacritic-free orthography for Levantine developed at the Linguistic Data Consortium (Maamouri et al., 2006). Changes were done only to the representations of linguistic knowledge at the four levels discussed in Section 5, not to the processing engine. Morphological Behavior Classes: The MBCs are variant-independent, so in theory no changes needed to be implemented. However, as Levantine is our first dialect</context>
</contexts>
<marker>Habash, Rambow, Kiraz, 2005</marker>
<rawString>Nizar Habash, Owen Rambow, and Geroge Kiraz. 2005. Morphological analysis and generation for arabic dialects. In Proceedings of the ACL Workshop on Computational Approaches to Semitic Languages, Ann Arbor, MI.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nizar Habash</author>
<author>Owen Rabmow</author>
<author>Richard Sproat</author>
</authors>
<title>The representation of linguistic knowledge in a pan-Arabic morphological analyzer. Paper under preparation,</title>
<date>2006</date>
<institution>Columbia University and UIUC.</institution>
<contexts>
<context position="11376" citStr="Habash et al., 2006" startWordPosition="1801" endWordPosition="1804">ates (bidirectionally) a lexeme and a set of linguistic features to a surface word form through a sequence of transformations. In a generation perspective, the features are translated to abstract morphemes which are then ordered, and expressed as concrete morphemes. The concrete templatic morphemes are interdigitated and affixes added, and finally morphological and phonological rewrite rules are applied. In this section, we discuss our organization of linguistic knowledge, and give some examples; a more complete discussion of the organization of linguistic knowledge in MAGEAD can be found in (Habash et al., 2006). 5.1 Morphological Behavior Classes Morphological analyses are represented in terms of a lexeme and features. We define the lexeme to be a triple consisting of a root (or an NTWS), a meaning index, and a morphological behavior class (MBC). We do not deal with issues relating to word sense here and therefore do not further discuss the meaning index. It is through this view of the lexeme (which incorporates productive derivational morphology without making claims about semantic predictability) that we can both have a lexeme-based representation, and operate without a lexicon. In fact, because l</context>
</contexts>
<marker>Habash, Rabmow, Sproat, 2006</marker>
<rawString>Nizar Habash, Owen Rabmow, and Richard Sproat. 2006. The representation of linguistic knowledge in a pan-Arabic morphological analyzer. Paper under preparation, Columbia University and UIUC.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nizar Habash</author>
</authors>
<title>Large scale lexeme based arabic morphological generation.</title>
<date>2004</date>
<booktitle>In Proceedings of Traitement Automatique du Langage Naturel (TALN-04).</booktitle>
<location>Fez, Morocco.</location>
<contexts>
<context position="10684" citStr="Habash, 2004" startWordPosition="1699" endWordPosition="1700">rphology, rather than “precompiling” the templatic morphology into stems and only analyzing affixational morphology on-line (as is done in (Buckwalter, 2004)). Our implementation uses the multitape approach of Kiraz (2000). This is the first large-scale implementation of that approach. We extend it by adding an additional tape for independently modeling phonology and orthography. The use of finite state technology makes MAGEAD usable as a generator as well as an analyzer, unlike some morphological analyzers which cannot be converted to generators in a straightforward manner (Buckwalter, 2004; Habash, 2004). 5 The MAGEAD System: Representation of Linguistic Knowledge MAGEAD relates (bidirectionally) a lexeme and a set of linguistic features to a surface word form through a sequence of transformations. In a generation perspective, the features are translated to abstract morphemes which are then ordered, and expressed as concrete morphemes. The concrete templatic morphemes are interdigitated and affixes added, and finally morphological and phonological rewrite rules are applied. In this section, we discuss our organization of linguistic knowledge, and give some examples; a more complete discussion</context>
</contexts>
<marker>Habash, 2004</marker>
<rawString>Nizar Habash. 2004. Large scale lexeme based arabic morphological generation. In Proceedings of Traitement Automatique du Langage Naturel (TALN-04). Fez, Morocco.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L Kataja</author>
<author>K Koskenniemi</author>
</authors>
<title>Finite state description of Semitic morphology.</title>
<date>1988</date>
<booktitle>In COLING-88: Papers Presented to the 12th International Conference on Computational Linguistics,</booktitle>
<volume>1</volume>
<pages>313--15</pages>
<contexts>
<context position="6954" citStr="Kataja and Koskenniemi (1988)" startWordPosition="1096" endWordPosition="1099">pattern V1tV2V3 (Form VIII) when the first root radical is /z/, /d/, or /*/ ( , , or ): the verbal stem zhr+V1tV2V3+iaa is realized phonologically as /izdahar/ (orthographically: ) ‘flourish’ not /iztahar/ (orthographically: ). An example of an orthographic rewrite rule is the deletion of the Alif () of the definite article morpheme Al+ (+ ) in nouns when preceded by the preposition l+ (+✱ ). 3 Previous Work There has been a considerable amount of work on Arabic morphological analysis; for an overview, see (Al-Sughaiyer and Al-Kharashi, 2004). We summarize some of the most relevant work here. Kataja and Koskenniemi (1988) present a system for handling Akkadian root-and-pattern morphology by adding an additional lexicon component to Koskenniemi’s two-level morphology (1983). The first large scale implementation of Arabic morphology within the constraints of finite-state methods is that of Beesley et al. (1989) with a ‘detouring’ mechanism for access to multiple lexica, which gives rise to other works by Beesley (Beesley, 1998) and, independently, by Buckwalter (2004). The approach of McCarthy (1981) to describing root-and-pattern morphology in the framework of autosegmental phonology has given rise to a number </context>
</contexts>
<marker>Kataja, Koskenniemi, 1988</marker>
<rawString>L. Kataja and K. Koskenniemi. 1988. Finite state description of Semitic morphology. In COLING-88: Papers Presented to the 12th International Conference on Computational Linguistics, volume 1, pages 313–15.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Martin Kay</author>
</authors>
<title>Nonconcatenative finite-state morphology.</title>
<date>1987</date>
<booktitle>In Proceedings of the Third Conference of the European Chapter of the Association for Computational Linguistics,</booktitle>
<pages>2--10</pages>
<contexts>
<context position="7592" citStr="Kay (1987)" startWordPosition="1193" endWordPosition="1194">ng Akkadian root-and-pattern morphology by adding an additional lexicon component to Koskenniemi’s two-level morphology (1983). The first large scale implementation of Arabic morphology within the constraints of finite-state methods is that of Beesley et al. (1989) with a ‘detouring’ mechanism for access to multiple lexica, which gives rise to other works by Beesley (Beesley, 1998) and, independently, by Buckwalter (2004). The approach of McCarthy (1981) to describing root-and-pattern morphology in the framework of autosegmental phonology has given rise to a number of computational proposals. Kay (1987) proposes a framework with which each of the autosegmental tiers is assigned a tape in a multi-tape finite state machine, with an additional tape for the surface form. Kiraz (2000,2001) extends Kay’s y+ aktub 3person write sa+ will wa+ and 682 approach and implements a small working multitape system for MSA and Syriac. Other autosegmental approaches (described in more details in Kiraz 2001 (Chapter 4)) include those of Kornai (1995), Bird and Ellison (1994), Pulman and Hepple (1993), whose formalism Kiraz adopts, and others. 4 Design Goals for MAGEAD This work is aimed at a unified processing </context>
</contexts>
<marker>Kay, 1987</marker>
<rawString>Martin Kay. 1987. Nonconcatenative finite-state morphology. In Proceedings of the Third Conference of the European Chapter of the Association for Computational Linguistics, pages 2–10.</rawString>
</citation>
<citation valid="true">
<authors>
<author>George Anton Kiraz</author>
</authors>
<title>Multi-tiered nonlinear morphology using multi-tape finite automata: A case study</title>
<date>2000</date>
<booktitle>on Syriac and Arabic. Computational Linguistics,</booktitle>
<pages>26--1</pages>
<contexts>
<context position="7771" citStr="Kiraz (2000" startWordPosition="1224" endWordPosition="1225">phology within the constraints of finite-state methods is that of Beesley et al. (1989) with a ‘detouring’ mechanism for access to multiple lexica, which gives rise to other works by Beesley (Beesley, 1998) and, independently, by Buckwalter (2004). The approach of McCarthy (1981) to describing root-and-pattern morphology in the framework of autosegmental phonology has given rise to a number of computational proposals. Kay (1987) proposes a framework with which each of the autosegmental tiers is assigned a tape in a multi-tape finite state machine, with an additional tape for the surface form. Kiraz (2000,2001) extends Kay’s y+ aktub 3person write sa+ will wa+ and 682 approach and implements a small working multitape system for MSA and Syriac. Other autosegmental approaches (described in more details in Kiraz 2001 (Chapter 4)) include those of Kornai (1995), Bird and Ellison (1994), Pulman and Hepple (1993), whose formalism Kiraz adopts, and others. 4 Design Goals for MAGEAD This work is aimed at a unified processing architecture for the morphology of all variants of Arabic, including the dialects. Three design goals follow from this overall goal: First, we want to be able to use the analyzer </context>
<context position="10293" citStr="Kiraz (2000)" startWordPosition="1636" endWordPosition="1637">nguage processing (NLP) applications such as natural language generation and machine translation, and the lexeme provides a usable lexicographic abstraction. Note that the second general requirement (an analysis to a lexemic representation) appears to clash with the first design desideratum (we may not have a lexicon). We tackle these requirements by doing a full analysis of templatic morphology, rather than “precompiling” the templatic morphology into stems and only analyzing affixational morphology on-line (as is done in (Buckwalter, 2004)). Our implementation uses the multitape approach of Kiraz (2000). This is the first large-scale implementation of that approach. We extend it by adding an additional tape for independently modeling phonology and orthography. The use of finite state technology makes MAGEAD usable as a generator as well as an analyzer, unlike some morphological analyzers which cannot be converted to generators in a straightforward manner (Buckwalter, 2004; Habash, 2004). 5 The MAGEAD System: Representation of Linguistic Knowledge MAGEAD relates (bidirectionally) a lexeme and a set of linguistic features to a surface word form through a sequence of transformations. In a gener</context>
<context position="16138" citStr="Kiraz, 2000" startWordPosition="2561" endWordPosition="2562">nly the orthographic representation. These include, for examples, rules for using the shadda (consonant doubling diacritic). For MSA, we have 53 such rules. For our example, we get /izdaharat/ at the phonological level. Using standard MSA diacritized orthography, our example becomes Aizdaharat (in transliteration). Removing the diacritics turns this into the more familiar Azdhrt. Note that in analysis mode, we hypothesize all possible diacritics (a finite number, even in combination) and perform the analysis on the resulting multi-path automaton. 6 The MAGEAn System: Implementation We follow (Kiraz, 2000) in using a multitape representation. We extend the analysis of Kiraz by introducing a fifth tier. The five tiers are used as follows: Tier 1: pattern and affixational morphemes; Tier 2: root; Tier 3: vocalism; Tier 4: phonological representation; Tier 5: orthographic representation. In the generation direction, tiers 1 through 3 are always input tiers. Tier 4 is first an output tier, and subsequently an input tier. Tier 5 is always an output tier. 684 We have implemented multi-tape finite state automata as a layer on top of the AT&amp;T twotape finite state transducers (Mohri et al., 1998). We ha</context>
</contexts>
<marker>Kiraz, 2000</marker>
<rawString>George Anton Kiraz. 2000. Multi-tiered nonlinear morphology using multi-tape finite automata: A case study on Syriac and Arabic. Computational Linguistics, 26(1):77–105.</rawString>
</citation>
<citation valid="true">
<authors>
<author>George Kiraz</author>
</authors>
<title>Computational Nonlinear Morphology: With Emphasis on Semitic Languages.</title>
<date>2001</date>
<publisher>Cambridge University Press.</publisher>
<contexts>
<context position="7984" citStr="Kiraz 2001" startWordPosition="1259" endWordPosition="1260">dependently, by Buckwalter (2004). The approach of McCarthy (1981) to describing root-and-pattern morphology in the framework of autosegmental phonology has given rise to a number of computational proposals. Kay (1987) proposes a framework with which each of the autosegmental tiers is assigned a tape in a multi-tape finite state machine, with an additional tape for the surface form. Kiraz (2000,2001) extends Kay’s y+ aktub 3person write sa+ will wa+ and 682 approach and implements a small working multitape system for MSA and Syriac. Other autosegmental approaches (described in more details in Kiraz 2001 (Chapter 4)) include those of Kornai (1995), Bird and Ellison (1994), Pulman and Hepple (1993), whose formalism Kiraz adopts, and others. 4 Design Goals for MAGEAD This work is aimed at a unified processing architecture for the morphology of all variants of Arabic, including the dialects. Three design goals follow from this overall goal: First, we want to be able to use the analyzer when we do not have a lexicon, or only a partial lexicon. This is because, despite the similarities between dialects at the morphological and lexical levels, we do cannot assume we have a complete lexicon for ever</context>
</contexts>
<marker>Kiraz, 2001</marker>
<rawString>George Kiraz. 2001. Computational Nonlinear Morphology: With Emphasis on Semitic Languages. Cambridge University Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Kornai</author>
</authors>
<title>Formal Phonology.</title>
<date>1995</date>
<publisher>Garland Publishing.</publisher>
<contexts>
<context position="8028" citStr="Kornai (1995)" startWordPosition="1266" endWordPosition="1267">proach of McCarthy (1981) to describing root-and-pattern morphology in the framework of autosegmental phonology has given rise to a number of computational proposals. Kay (1987) proposes a framework with which each of the autosegmental tiers is assigned a tape in a multi-tape finite state machine, with an additional tape for the surface form. Kiraz (2000,2001) extends Kay’s y+ aktub 3person write sa+ will wa+ and 682 approach and implements a small working multitape system for MSA and Syriac. Other autosegmental approaches (described in more details in Kiraz 2001 (Chapter 4)) include those of Kornai (1995), Bird and Ellison (1994), Pulman and Hepple (1993), whose formalism Kiraz adopts, and others. 4 Design Goals for MAGEAD This work is aimed at a unified processing architecture for the morphology of all variants of Arabic, including the dialects. Three design goals follow from this overall goal: First, we want to be able to use the analyzer when we do not have a lexicon, or only a partial lexicon. This is because, despite the similarities between dialects at the morphological and lexical levels, we do cannot assume we have a complete lexicon for every dialect we wish to morphologically analyze</context>
</contexts>
<marker>Kornai, 1995</marker>
<rawString>A. Kornai. 1995. Formal Phonology. Garland Publishing.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Koskenniemi</author>
</authors>
<title>Two-Level Morphology.</title>
<date>1983</date>
<tech>Ph.D. thesis,</tech>
<institution>University of Helsinki.</institution>
<marker>Koskenniemi, 1983</marker>
<rawString>K. Koskenniemi. 1983. Two-Level Morphology. Ph.D. thesis, University of Helsinki.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mohamed Maamouri</author>
<author>Ann Bies</author>
<author>Tim Buckwalter</author>
</authors>
<title>The Penn Arabic Treebank: Building a largescale annotated arabic corpus.</title>
<date>2004</date>
<booktitle>In NEMLAR Conference on Arabic Language Resources and Tools,</booktitle>
<location>Cairo, Egypt.</location>
<contexts>
<context position="22699" citStr="Maamouri et al., 2004" startWordPosition="3664" endWordPosition="3667">s from the list of lexeme citation forms in the Buckwalter lexicon using surfacy heuristics for quick-and-dirty morphological analysis. mbc: This is the same list as lex, except that we pair each root with the MBCs with which it was seen in the Buckwalter lexicon (recall that for us, a lexeme is a root with an MBC). Note that mbc represents a full lexicon, though it was converted automatically from the Buckwalter lexicon and it has not been hand-checked. 8.2 Test Corpora and Metrics For development and testing purposes, we use MSA and Levantine. For MSA, we use the Penn Arabic Treebank (ATB) (Maamouri et al., 2004). The morphological annotation we use is the “before-file”, which lists the untokenized words (as they appear in the Arabic original text) and all possible analyses according to the Buckwalter analyzer (Buckwalter, 2004). The analysis which is correct for the given token in its context is marked; sometimes, it is also hand-corrected (or added by hand), while the contextually incorrect analyses are never hand-corrected. For development, we use ATB1 section 20000715, and for testing, Sections 20001015 and 20001115 (13,885 distinct verbal types). For Levantine, we use a similarly annotated corpus</context>
</contexts>
<marker>Maamouri, Bies, Buckwalter, 2004</marker>
<rawString>Mohamed Maamouri, Ann Bies, and Tim Buckwalter. 2004. The Penn Arabic Treebank: Building a largescale annotated arabic corpus. In NEMLAR Conference on Arabic Language Resources and Tools, Cairo, Egypt.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mohamed Maamouri</author>
<author>Ann Bies</author>
<author>Tim Buckwalter</author>
<author>Mona Diab</author>
<author>Nizar Habash</author>
<author>Owen Rambow</author>
<author>Dalila Tabessi</author>
</authors>
<title>Developing and using a pilot dialectal arabic treebank.</title>
<date>2006</date>
<booktitle>In Proceedings of LREC,</booktitle>
<location>Genoa, Italy.</location>
<contexts>
<context position="17507" citStr="Maamouri et al., 2006" startWordPosition="2784" endWordPosition="2787">types of information such as rules or context-free grammars for morpheme ordering are compiled to the appropriate Lextools format (an NLP-oriented extension of the AT&amp;T toolkit for finite-state machines, (Sproat, 1995)). For reasons of space, we omit a further discussion of Morphtools. For details, see (Habash et al., 2005). 7 From MSA to Levantine We modified MAGEAD so that it accepts Levantine rather than MSA verbs. Our effort concentrated on the orthographic representation; to simplify our task, we used a diacritic-free orthography for Levantine developed at the Linguistic Data Consortium (Maamouri et al., 2006). Changes were done only to the representations of linguistic knowledge at the four levels discussed in Section 5, not to the processing engine. Morphological Behavior Classes: The MBCs are variant-independent, so in theory no changes needed to be implemented. However, as Levantine is our first dialect, we expand the MBCs to include two AMs not found in MSA: the aspectual particle and the postfix negation marker. Abstract Morpheme Ordering: The contextfree grammar representing the ordering of AMs needed to be extended to order the two new AMs, which was straightforward. Mapping Abstract to Con</context>
</contexts>
<marker>Maamouri, Bies, Buckwalter, Diab, Habash, Rambow, Tabessi, 2006</marker>
<rawString>Mohamed Maamouri, Ann Bies, Tim Buckwalter, Mona Diab, Nizar Habash, Owen Rambow, and Dalila Tabessi. 2006. Developing and using a pilot dialectal arabic treebank. In Proceedings of LREC, Genoa, Italy.</rawString>
</citation>
<citation valid="true">
<authors>
<author>John McCarthy</author>
</authors>
<title>A prosodic theory of nonconcatenative morphology.</title>
<date>1981</date>
<journal>Linguistic Inquiry,</journal>
<volume>12</volume>
<issue>3</issue>
<contexts>
<context position="7440" citStr="McCarthy (1981)" startWordPosition="1171" endWordPosition="1172">erview, see (Al-Sughaiyer and Al-Kharashi, 2004). We summarize some of the most relevant work here. Kataja and Koskenniemi (1988) present a system for handling Akkadian root-and-pattern morphology by adding an additional lexicon component to Koskenniemi’s two-level morphology (1983). The first large scale implementation of Arabic morphology within the constraints of finite-state methods is that of Beesley et al. (1989) with a ‘detouring’ mechanism for access to multiple lexica, which gives rise to other works by Beesley (Beesley, 1998) and, independently, by Buckwalter (2004). The approach of McCarthy (1981) to describing root-and-pattern morphology in the framework of autosegmental phonology has given rise to a number of computational proposals. Kay (1987) proposes a framework with which each of the autosegmental tiers is assigned a tape in a multi-tape finite state machine, with an additional tape for the surface form. Kiraz (2000,2001) extends Kay’s y+ aktub 3person write sa+ will wa+ and 682 approach and implements a small working multitape system for MSA and Syriac. Other autosegmental approaches (described in more details in Kiraz 2001 (Chapter 4)) include those of Kornai (1995), Bird and E</context>
</contexts>
<marker>McCarthy, 1981</marker>
<rawString>John McCarthy. 1981. A prosodic theory of nonconcatenative morphology. Linguistic Inquiry, 12(3):373–418.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Mohri</author>
<author>F Pereira</author>
<author>M Riley</author>
</authors>
<title>A rational design for a weighted finite-state transducer library.</title>
<date>1998</date>
<booktitle>Automata Implementation, Lecture Notes in Computer Science 1436,</booktitle>
<pages>144--58</pages>
<editor>In D. Wood and S. Yu, editors,</editor>
<publisher>Springer.</publisher>
<contexts>
<context position="16731" citStr="Mohri et al., 1998" startWordPosition="2664" endWordPosition="2667">on We follow (Kiraz, 2000) in using a multitape representation. We extend the analysis of Kiraz by introducing a fifth tier. The five tiers are used as follows: Tier 1: pattern and affixational morphemes; Tier 2: root; Tier 3: vocalism; Tier 4: phonological representation; Tier 5: orthographic representation. In the generation direction, tiers 1 through 3 are always input tiers. Tier 4 is first an output tier, and subsequently an input tier. Tier 5 is always an output tier. 684 We have implemented multi-tape finite state automata as a layer on top of the AT&amp;T twotape finite state transducers (Mohri et al., 1998). We have defined a specification language for the higher multitape level, the new Morphtools format. Specification in the Morphtools format of different types of information such as rules or context-free grammars for morpheme ordering are compiled to the appropriate Lextools format (an NLP-oriented extension of the AT&amp;T toolkit for finite-state machines, (Sproat, 1995)). For reasons of space, we omit a further discussion of Morphtools. For details, see (Habash et al., 2005). 7 From MSA to Levantine We modified MAGEAD so that it accepts Levantine rather than MSA verbs. Our effort concentrated </context>
</contexts>
<marker>Mohri, Pereira, Riley, 1998</marker>
<rawString>M. Mohri, F. Pereira, and M. Riley. 1998. A rational design for a weighted finite-state transducer library. In D. Wood and S. Yu, editors, Automata Implementation, Lecture Notes in Computer Science 1436, pages 144–58. Springer.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Pulman</author>
<author>M Hepple</author>
</authors>
<title>A feature-based formalism for two-level phonology: a description and implementation.</title>
<date>1993</date>
<journal>Computer Speech and Language,</journal>
<pages>7--333</pages>
<contexts>
<context position="8079" citStr="Pulman and Hepple (1993)" startWordPosition="1272" endWordPosition="1276">root-and-pattern morphology in the framework of autosegmental phonology has given rise to a number of computational proposals. Kay (1987) proposes a framework with which each of the autosegmental tiers is assigned a tape in a multi-tape finite state machine, with an additional tape for the surface form. Kiraz (2000,2001) extends Kay’s y+ aktub 3person write sa+ will wa+ and 682 approach and implements a small working multitape system for MSA and Syriac. Other autosegmental approaches (described in more details in Kiraz 2001 (Chapter 4)) include those of Kornai (1995), Bird and Ellison (1994), Pulman and Hepple (1993), whose formalism Kiraz adopts, and others. 4 Design Goals for MAGEAD This work is aimed at a unified processing architecture for the morphology of all variants of Arabic, including the dialects. Three design goals follow from this overall goal: First, we want to be able to use the analyzer when we do not have a lexicon, or only a partial lexicon. This is because, despite the similarities between dialects at the morphological and lexical levels, we do cannot assume we have a complete lexicon for every dialect we wish to morphologically analyze. As a result, we want an on-line analyzer which pe</context>
</contexts>
<marker>Pulman, Hepple, 1993</marker>
<rawString>S. Pulman and M. Hepple. 1993. A feature-based formalism for two-level phonology: a description and implementation. Computer Speech and Language, 7:333–58.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Richard Sproat</author>
</authors>
<title>Lextools: Tools for finitestate linguistic analysis.</title>
<date>1995</date>
<tech>Technical Report 11522-951108-10TM,</tech>
<institution>Bell Laboratories.</institution>
<contexts>
<context position="17103" citStr="Sproat, 1995" startWordPosition="2720" endWordPosition="2721">rs. Tier 4 is first an output tier, and subsequently an input tier. Tier 5 is always an output tier. 684 We have implemented multi-tape finite state automata as a layer on top of the AT&amp;T twotape finite state transducers (Mohri et al., 1998). We have defined a specification language for the higher multitape level, the new Morphtools format. Specification in the Morphtools format of different types of information such as rules or context-free grammars for morpheme ordering are compiled to the appropriate Lextools format (an NLP-oriented extension of the AT&amp;T toolkit for finite-state machines, (Sproat, 1995)). For reasons of space, we omit a further discussion of Morphtools. For details, see (Habash et al., 2005). 7 From MSA to Levantine We modified MAGEAD so that it accepts Levantine rather than MSA verbs. Our effort concentrated on the orthographic representation; to simplify our task, we used a diacritic-free orthography for Levantine developed at the Linguistic Data Consortium (Maamouri et al., 2006). Changes were done only to the representations of linguistic knowledge at the four levels discussed in Section 5, not to the processing engine. Morphological Behavior Classes: The MBCs are varian</context>
</contexts>
<marker>Sproat, 1995</marker>
<rawString>Richard Sproat. 1995. Lextools: Tools for finitestate linguistic analysis. Technical Report 11522-951108-10TM, Bell Laboratories.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>