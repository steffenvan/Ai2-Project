<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.008785">
<title confidence="0.980892">
Fluid Construction Grammar for Historical and Evolutionary Linguistics
</title>
<author confidence="0.756017">
Pieter Wellens1, Remi van Trijp2, Katrien Beuls1, Luc Steels2,3
</author>
<note confidence="0.709735">
1VUB AI Lab 2Sony Computer Science 3 ICREA Institute for
Pleinlaan 2 Laboratory Paris Evolutionary Biology (UPF-CSIC)
</note>
<address confidence="0.59496">
1050 Brussels (Belgium) 6 Rue Amyot PRBB, Dr Aiguidar 88
pieter|katrien@ 75005 Paris (France) 08003 Barcelona (Spain)
</address>
<email confidence="0.993595">
ai.vub.ac.be remi@csl.sony.fr steels@ai.vub.ac.be
</email>
<sectionHeader confidence="0.993719" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.998397555555555">
Fluid Construction Grammar (FCG) is an
open-source computational grammar for-
malism that is becoming increasingly pop-
ular for studying the history and evolution
of language. This demonstration shows
how FCG can be used to operationalise the
cultural processes and cognitive mecha-
nisms that underly language evolution and
change.
</bodyText>
<sectionHeader confidence="0.998795" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999383954545455">
Historical linguistics has been radically trans-
formed over the past two decades by the ad-
vent of corpus-based approaches. Ever increas-
ing datasets, both in size and richness of anno-
tation, are becoming available (Yuri et al., 2012;
Davies, 2011), and linguists now have more pow-
erful tools at their disposal for uncovering which
changes have taken place. In this demonstration,
we present Fluid Construction Grammar (Steels,
2011, FCG), an open-source grammar formalism
that makes it possible to also address the question
of how these changes happened by uncovering the
cognitive mechanisms and cultural processes that
drive language evolution.
FCG combines the expressive power of fea-
ture structures and unification with the adaptiv-
ity and robustnes of machine learners. In sum,
FCG aims to be an open instrument for de-
veloping robust and open-ended models of lan-
guage processing that can be used for both pars-
ing and production. FCG can be downloaded at
http://www.fcg-net.org.
</bodyText>
<sectionHeader confidence="0.996831" genericHeader="method">
2 Design Philosophy
</sectionHeader>
<bodyText confidence="0.999766172413793">
Fluid Construction Grammar is rooted in a
cognitive-functional approach to language, which
is quite different from a generative grammar such
as HPSG (Pollard and Sag, 1994). A genera-
tive grammar is a model of language competence
that licenses well-formed structures and rejects ill-
formed utterances. Such grammars often decide
on the well- or ill-formedness of utterances by us-
ing a strong type system that defines a set of fea-
tures and possible values for those features. The
burden of efficient and robust language process-
ing with a generative grammar largely rests on the
shoulders of the language processor.
A cognitive-functional grammar, on the other
hand, functions more like a transducer between
meaning and form. In parsing, such a grammar
tries to uncover as much meaning as possible from
a given utterance rather than deciding on its gram-
maticality. In the other direction, the grammar
tries to produce intelligible utterances, which are
well-formed as a side-effect if the grammar ad-
equately captures the conventions of a particular
language. A cognitive-functional grammar can
best be implemented without a strong type system
because the set of possible features and values for
them is assumed to be open-ended. Efficient and
robust language processing also becomes a joint
responsibility of the grammar and the linguistic
processor.
</bodyText>
<sectionHeader confidence="0.994123" genericHeader="method">
3 Reversible Language Processing
</sectionHeader>
<bodyText confidence="0.999660230769231">
As a construction grammar, FCG represents all
linguistic knowledge as pairings of function and
form (called constructions). This means that any
linguistic item, be it a concrete lexical item (see
Figure 1) or a schematic construction, shares the
same fundamental representation in FCG.
Each construction consists of two poles (a se-
mantic/functional one and a syntactic/form one),
each represented as a feature structure. By using a
separate semantic and syntactic pole, FCG allows
the same construction to be efficiently parsed and
produced by the same processing engine by sim-
ply changing the direction of application.
</bodyText>
<page confidence="0.965307">
127
</page>
<note confidence="0.622037">
Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics, pages 127–132,
Sofia, Bulgaria, August 4-9 2013. c�2013 Association for Computational Linguistics
</note>
<figureCaption confidence="0.983005">
Figure 1: Lexical construction for the proper
</figureCaption>
<bodyText confidence="0.980973586956522">
noun “Kim” as shown in the FCG web interface.
All constructions are mappings between semantic
(left) and syntactic feature structures (right).
FCG processing uses two different kinds of uni-
fication called match and merge. The match phase
is a conditional phase which checks for applicabil-
ity of the construction. The merge operation most
closely resembles classical (yet untyped) unifica-
tion. In production (i.e. going from meaning to
form), the processor will consider a construction’s
semantic pole as a set of conditions that need to be
satisfied, and the syntactic pole as additional infor-
mation that can be contributed by the construction.
In parsing (i.e. going from form to meaning), the
roles of the poles are reversed.
Since FCG pays a lot of attention to the inter-
action between linguistic knowledge and process-
ing, it makes it possible to investigate the conse-
quences of particular aspects of grammar with re-
gard to representation, production, parsing, learn-
ing and propagation (in a population of language
users). For example, a small case system may be
easier to represent and produce than a large sys-
tem, but it might also lead to increased ambigu-
ity in parsing and learning that the larger system
would avoid. Fluid Construction Grammar can
bring these differences to the surface for further
computational analysis.
It is exactly this ability to monitor the impact of
grammatical choices, that has sparked the interest
of an increasingly wide audience of historical and
evolutionary linguists. With FCG, different histor-
ical stages can be implemented (which addresses
questions about representation and processing) but
FCG also comes bundled with a reflective learn-
ing framework (Beuls et al., 2012) for learning the
key constructions of each stage. That same archi-
tecture has proven to be adequately powerful to
implement processes of grammaticalization so that
Figure 2: Schematic overview of the experimental
methodology for historical and evolutionary lin-
guists. The example here shows only two linguis-
tic stages but there could be more.
actual linguistic change over time can be modeled
(van Trijp, 2010; Beuls and Steels, 2013; Wellens
and Loetzsch, 2012).
</bodyText>
<sectionHeader confidence="0.531377" genericHeader="method">
4 How to set up an evolutionary
linguistics experiment in FCG?
</sectionHeader>
<bodyText confidence="0.999974964285715">
As the FCG processor can both produce and
parse utterances it is possible to instantiate not
one but a set or population of FCG processors
(or FCG agents) that can communicatively inter-
act with each other. Experiments in historical or
evolutionary linguistics make use of this multi-
agent approach where all agents engage in situated
pairwise interactions (language games) (Steels,
2012b).
In this systems demo we will focus on a re-
cent experiment in the emergence of grammatical
agreement (Beuls and Steels, 2013). The language
game consists of two agents in which one agent
(the speaker) has to describe one or more (max
three) objects in a scene to the other agent (the
hearer). Each object can be described by one or
more words. It follows that without any grammat-
ical marking it would be difficult (often impossi-
ble) for the hearer to figure out which words de-
scribe the same object and thus to arrive at a suc-
cessful interpretation. The hypothesis is that the
introduction of agreement markers helps solve this
ambiguity.
Next to setting up a language game script the
methodology consists of operationalizing the lin-
guistic strategies required for a population to boot-
strap and maintain a particular linguistic system (in
this case nominal agreement). Examples of lin-
</bodyText>
<figure confidence="0.997364733333334">
kim-lex (lex)
?top-unit-1611
tag ?meaning-849
footprints
(meaning
(==
(identify-person
?kim-1 ?context-243
?word-kim-1
→ ?meaning-849
args
sem-cat
footprints
((sem-function
referring)
(sem-class person))
(==1 kim-lex lex)
?person-119)
(bind person
?person-119 [kim])))
(?kim-1)
(==0 kim-lex lex)
?top-unit-1611
sem syn
?top-unit-1611
footprints
tag ?form-946
?top-unit-1611
(form
(== (string ?word-kim-1 &amp;quot;Kim&amp;quot;)))
(==0 kim-lex lex)
?word-kim-1
→ ?form-946
footprints
syn-cat
(==1 kim-lex lex)
((lex-cat
proper-noun)
(syn-function
nominal))
Linguistic system 1
Reconstruction
Individual Learning
Population
Alignment
Linguistic system 2
Reconstruction
Individual Learning
Population
Alignment
1. Grammaticalization
128
meta-layer processing
routine processing
diagnostic
repair
diagnostic diagnostic diagnostic
problem
problem
repair
</figure>
<figureCaption confidence="0.999857">
Figure 3: Reflective meta-layer architecture oper-
</figureCaption>
<bodyText confidence="0.999096108108108">
ating as part of an FCG agent/processor. Figure 4: Meaningful marker strategy.
guistic systems already investigated include Ger-
man case (van Trijp, 2012a; van Trijp, 2013),
the grammatical expression of space (Spranger
and Steels, 2012), the emergence of quantifiers
(Pauw and Hilferty, 2012) and the expression of
aspect in Russian (Gerasymova et al., 2012) [for
an overview see (Steels, 2011; Steels, 2012a)].
An experiment generally investigates multi-
ple linguistic systems of increasing complexity
where each system can, but need not, map to a
stage along an attested grammaticalization path-
way. Most often a stage is introduced in order
to gradually increase the complexity of the emer-
gent dynamics. In this demo we posit four sys-
tems/strategies, (1) a baseline purely lexical strat-
egy, (2) a strategy to bootstrap and align formal
(meaningless) agreement markers, (3) a strategy to
bootstrap and align meaningful agreement mark-
ers, and finally (4) a strategy that allows re-use
of existing lexical constructions as markers (gram-
maticalization).
Implementing and linking together all the com-
ponents involved in a single system is a highly
non-trivial undertaking and our methodology pre-
scribes the following four steps to undertake for
each system (see also Figure 2).
Reconstruction: A full operationalization of all
the constructions (lexical and grammatical)
involved in the chosen linguistic phenom-
ena. When multiple agents are initialized
with these constructions they should be able
to communicate successfully with each other.
This stage serves primarily to test and verify
intuitions about the different linguistic sys-
tems.
Individual Learning: Implementation of learn-
ing algorithms (or re-use of existing ones)
so that one agent can learn the constructions
based on the input of another agent. These
learning operations are generally divided into
diagnostics and repair strategies (see Fig-
ure 3). Diagnostics continually monitor FCG
processing for errors or inefficiencies and
generate problems if they are found. Repair
strategies then act on these problems by al-
tering the linguistic inventory (e.g. adding,
removing or changing constructions).
Population Alignment: There exists a large gap
between the cognitive machinary needed for
learning an existing linguistic system (step 2)
and bootstrapping, aligning and maintaining
a complete linguistic system from scratch. In
this step individual learning operators are ex-
tended with alignment strategies.
Grammaticalization: Moving from one linguis-
tic system to another is the final step of the
experiment. The challenge is to find and im-
plement the mechanisms that drive grammat-
icalization (Heine and Kuteva, 2007) in line
with observed grammaticalization pathways.
As an example we’ll give a short sketch of one
possible game as played in the meaningful marker
strategy as schematically shown in Figure 4. The
sketch shows a context of four objects (O1 to O4),
each described by three features. The speaker
chooses topic O1 + O2 which, given his vocab-
ulary (shown top right), results in uttering “shuq-
fon sizhic zabu”. Words “shuqfon” and “sizhic”
both describe parts of O1 and “zabu” of O2. In
order to explicitly communicate this linking the
speaker attaches the markers “-ti” and “-ta” so that
their meaning is compatible with the objects they
are linking as shown in the Figure. This allows
</bodyText>
<page confidence="0.998214">
129
</page>
<figureCaption confidence="0.9621166">
Figure 5: A network of constructions. Diamond shaped nodes represent lexical constructions, egg shaped
nodes represent grammatical constructions and rectangular nodes represent semantic categories. Arrows
can be read as “primes”. For example the preposition between [BETWEEN.PREP] primes the category
LOCATIVE RELATION which in turn primes both the [LOCATIVE RELATION] and [SPATIAL PHRASE]
constructions. Both of these constructions also require a semantic category [REFERENT].
</figureCaption>
<bodyText confidence="0.99850875">
the hearer to arrive at a single non-ambiguous in-
terpretation. For more details we refer the reader
to (Beuls and Steels, 2013) and the web demo at
http://ai.vub.ac.be/materials/plos-agreement/.
</bodyText>
<sectionHeader confidence="0.97286" genericHeader="method">
5 Features of FCG
</sectionHeader>
<bodyText confidence="0.996872345454545">
A number of key features of FCG have already
been introduced. Reversible bidirectional process-
ing, a single data representation for all linguistic
knowledge, a reflective meta-layer architecture for
learning and a multi-agent component for manag-
ing multiple interacting FCG instances. Other fea-
tures, some of which are unique to FCG, include,
but are not limited to:
Web interface: FCG comes with a rich
HTML/AJAX based web interface (Loet-
zsch, 2012) where it can show fine-grained
information to the user in a user-friendly
manner through the use of expandable
elements. See Figure 6.
Customizable processing: Linguistic process-
ing is implemented as a search process
(Bleys et al., 2011). The user has easy
access to the most important parameters
influencing this process. Examples of these
are the heuristics and the tests that determine
whether a node represents an acceptable
solution. FCG comes bundled with a library
of heuristics and goal tests and with a bit
of programming skills users can add new
primitives easily.
Customizable construction inventory: By de-
fault, FCG stores all constructions in one
large set. FCG however supplies a num-
ber of different taxonomies, both for concep-
tual and efficiency reasons. One popular op-
tion is to organize constructions in smaller
subsets (Beuls, 2011) like lexical, morpho-
logical, functional, etc. Another option is
to use networks (Wellens, 2011) that can
learn co-occurrence relations between con-
structions and “prime” constructions when
they are likely to apply (see Figure 5).
Interfaces to external repositories: FCG
can connect to external repositories like
Framenet (Baker et al., 1998) and Wordnet
(Miller, 1995) to load thousands of lexical
entries (Micelli et al., 2009; Wellens and
Beule, 2010).
Robustness: FCG continues operation as far as
it can get even if some constructions do not
apply (Steels and van Trijp, 2011). Sup-
plied with appropriate diagnostics and repair
strategies FCG can even recover from errors
(van Trijp, 2012b).
Open source: Best of all, FCG is freely down-
loadable and open source (http://www.fcg-
net.org). It is written in Common Lisp
(CLOS) and compatible with most popu-
lar lisp implementations (SBCL, CCL, Lisp-
works, ...).
</bodyText>
<page confidence="0.982795">
130
</page>
<figure confidence="0.998877027397261">
Applying construction set (70) in direction
Found a solution
Meaning:
((apply-class ?ref-2 ?src-2 ?class-1) (bind object-class ?class-1 block))
Parsing &amp;quot;block&amp;quot;
initial
structure top top
application
process
applied
constructions
resulting
structure
noun-cat (cat t) block-lex (lex t)
initial
footprints
meaning
sem-cat
block-83
(block-lex)
((bind object-class
?class-1 block))
ref ?class-1
((sem-function
((value ?sem-function-value-4)
(valence (identifier))))
(class (object-class)))
sem syn
cxn-applied
application result
cxn supplier :ordered-by-label
block-morph (morph t)
status cxn-applied
source
structure top top
applied
construction
resulting
structure top top
added in block-83
first merge
added in
second
merge
resulting
bindings
remaining labels (cat gram)
remaining cxns (right-lex speaker-lex unique-lex hearer-lex)
((?form-84 form ((string block-83 &amp;quot;block&amp;quot;)))
(?block-unit-2 . block-83) (?top-39 . top))
block-morph (morph t)
block-83
sem syn
sem syn
block-morph (morph t)
block-83
noun-unit-
273
expanded unit
expanded search tree node
top
sem syn
top
noun-
unit-273
block-
lex
(lex t)
block-
83
noun-
cat
(cat t)
</figure>
<figureCaption confidence="0.977085">
Figure 6: An example of parsing the noun “Block” as shown in the FCG web interface. Users can click
on nearly every element to show an expanded version.
</figureCaption>
<bodyText confidence="0.999183">
The reader is encouraged to take a look at
http://www.fcg-net.org/projects/design-patterns-
in-fluid-construction-grammar for a selection of
demonstrations of Fluid Construction Grammar.
</bodyText>
<sectionHeader confidence="0.999247" genericHeader="conclusions">
6 Conclusion
</sectionHeader>
<bodyText confidence="0.999524125">
Fluid Construction Grammar is a mature technol-
ogy that can be used by computational linguists
to complement more traditional corpus-based ap-
proaches. FCG builds on many existing and
proven technologies and adds new innovations to
the mix resulting in a user friendly, yet powerful
and extensible framework for in-depth investiga-
tions in natural language phenomena.
</bodyText>
<sectionHeader confidence="0.997487" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.999957076923077">
The FCG formalism is being developed at the Ar-
tificial Intelligence Laboratory of the Vrije Uni-
versiteit Brussel and the Sony Computer Science
Laboratory in Paris. Pieter Wellens has been
supported by the ESF EuroUnderstanding project
DRUST funded by FWO and by the Vrije Uni-
versiteit Brussel. Katrien Beuls received fund-
ing from a strategic basic research grant from the
agency for Innovation by Science and Technol-
ogy (IWT). Remi van Trijp is funded by the Sony
Computer Science Laboratory Paris. We would
also like to thank Michael Spranger for his con-
tributions to the FCG formalism.
</bodyText>
<page confidence="0.997851">
131
</page>
<sectionHeader confidence="0.989733" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999698375">
Collin F. Baker, Charles J. Fillmore, and John B. Lowe.
1998. The Berkeley FrameNet Project. In Proceed-
ings of the 17th international conference on Compu-
tational linguistics, Morristown, NJ, USA. Associa-
tion for Computational Linguistics.
Katrien Beuls and Luc Steels. 2013. Agent-based
models of strategies for the emergence and evo-
lution of grammatical agreement. PLoS ONE,
8(3):e58960, 03.
Katrien Beuls, Remi van Trijp, and Pieter Wellens.
2012. Diagnostics and repairs in Fluid Construc-
tion Grammar. In Luc Steels and Manfred Hild, ed-
itors, Language Grounding in Robots. Springer Ver-
lag, Berlin.
Katrien Beuls. 2011. Construction sets and unmarked
forms: A case study for Hungarian verbal agree-
ment. In Luc Steels, editor, Design Patterns in Fluid
Construction Grammar, pages 237–264. John Ben-
jamins, Amsterdam.
Joris Bleys, Kevin Stadler, and Joachim De Beule.
2011. Search in linguistic processing. In Luc Steels,
editor, Design Patterns in Fluid Construction Gram-
mar, pages 149–179. John Benjamins, Amsterdam.
Mark Davies. 2011. N-grams and word frequency
data from the corpus of historical american english
(coha).
Kateryna Gerasymova, Michael Spranger, and Katrien
Beuls. 2012. A language strategy for aspect: En-
coding aktionsarten through morphology. In Luc
Steels, editor, Experiments in Cultural Language
Evolution, pages 257 – 276. John Benjamins.
Bernd Heine and Tania Kuteva. 2007. The Genesis
of Grammar: A Reconstruction. Oxford University
Press, October.
Martin Loetzsch. 2012. Tools for grammar engineer-
ing. In Luc Steels, editor, Computational Issues
in Fluid Construction Grammar. Springer Verlag,
Berlin.
V. Micelli, R. van Trijp, and J. De Beule. 2009. Fram-
ing fluid construction grammar. In N.A. Taatgen and
H. van Rijn, editors, the 31th Annual Conference
of the Cognitive Science Society, pages 3023–3027.
Cognitive Science Society.
George A. Miller. 1995. Wordnet: a lexical database
for english. Commun. ACM, 38:39–41, November.
Simon Pauw and Joseph Hilferty. 2012. The emer-
gence of quantifiers. In Luc Steels, editor, Experi-
ments in Cultural Language Evolution, pages 277 –
304. John Benjamins.
Carl Pollard and Ivan A. Sag. 1994. Head-Driven
Phrase Structure Grammar. University of Chicago
Press, Chicago.
Michael Spranger and Luc Steels. 2012. Emergent
functional grammar for space. In Luc Steels, editor,
Experiments in Cultural Language Evolution, pages
207 – 232. John Benjamins, Amsterdam.
Luc Steels and Remi van Trijp. 2011. How to make
construction grammars fluid and robust. In Luc
Steels, editor, Design Patterns in Fluid Construction
Grammar, pages 301–330. John Benjamins, Ams-
terdam.
Luc Steels, editor. 2011. Design Patterns in Fluid
Construction Grammar. John Benjamins.
Luc Steels, editor. 2012a. Computational Issues in
Fluid Construction Grammar, volume 7249 of Lec-
ture Notes in Computer Science. Springer, Berlin.
Luc Steels, editor. 2012b. Experiments in Cultural
Language Evolution. John Benjamins, Amsterdam.
Remi van Trijp. 2010. Grammaticalization and seman-
tic maps: Evidence from artificial language evolu-
tion. Linguistic Discovery, 8:310–326.
Remi van Trijp. 2012a. Not as awful as it seems : Ex-
plaining german case through computational exper-
iments in fluid construction grammar. In Proceed-
ings of the 13th Conference of the European Chap-
ter of the Association for Computational Linguistics,
pages 829–839.
Remi van Trijp. 2012b. A reflective architecture for
language processing and learning. In Luc Steels,
editor, Computational Issues in Fluid Construction
Grammar. Springer Verlag, Berlin.
Remi van Trijp. 2013. Linguistic assessment crite-
ria for explaining language change: A case study on
syncretism in German definite articles. Language
Dynamics and Change, 3(1).
Pieter Wellens and Joachim De Beule. 2010. Priming
through constructional dependencies: a case study
in fluid construction grammar. In The Evolution
of Language (EVOLANG8), pages 344–351. World
Scientific.
Pieter Wellens and Martin Loetzsch. 2012. Multi-
dimensional meanings in lexicon formation. In Luc
Steels, editor, Experiments in Cultural Language
Evolution, pages 143–166. John Benjamins, Ams-
terdam.
Pieter Wellens. 2011. Organizing constructions in net-
works. In Luc Steels, editor, Design Patterns in
Fluid Construction Grammar, pages 181–201. John
Benjamins, Amsterdam.
Lin Yuri, Michel Jean-Baptiste, Lieberman Aiden Erez,
Orwant Jon, Brockman Will, and Slav Petrov. 2012.
Syntactic annotations for the google books ngram
corpus. In ACL (System Demonstrations). The As-
sociation for Computer Linguistics.
</reference>
<page confidence="0.997734">
132
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.265366">
<title confidence="0.998152">Fluid Construction Grammar for Historical and Evolutionary Linguistics</title>
<author confidence="0.958118">Remi van_Katrien Luc</author>
<affiliation confidence="0.514012">AI Lab Computer Science 3ICREA Institute for</affiliation>
<address confidence="0.799774333333333">Pleinlaan 2 Laboratory Paris Evolutionary Biology (UPF-CSIC) 1050 Brussels (Belgium) 6 Rue Amyot PRBB, Dr Aiguidar 88 Paris (France) 08003 Barcelona (Spain)</address>
<email confidence="0.92967">ai.vub.ac.beremi@csl.sony.frsteels@ai.vub.ac.be</email>
<abstract confidence="0.9857477">Fluid Construction Grammar (FCG) is an open-source computational grammar formalism that is becoming increasingly popular for studying the history and evolution of language. This demonstration shows how FCG can be used to operationalise the cultural processes and cognitive mechanisms that underly language evolution and change.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Collin F Baker</author>
<author>Charles J Fillmore</author>
<author>John B Lowe</author>
</authors>
<title>The Berkeley FrameNet Project.</title>
<date>1998</date>
<booktitle>In Proceedings of the 17th international conference on Computational linguistics,</booktitle>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Morristown, NJ, USA.</location>
<contexts>
<context position="14103" citStr="Baker et al., 1998" startWordPosition="2136" endWordPosition="2139">. Customizable construction inventory: By default, FCG stores all constructions in one large set. FCG however supplies a number of different taxonomies, both for conceptual and efficiency reasons. One popular option is to organize constructions in smaller subsets (Beuls, 2011) like lexical, morphological, functional, etc. Another option is to use networks (Wellens, 2011) that can learn co-occurrence relations between constructions and “prime” constructions when they are likely to apply (see Figure 5). Interfaces to external repositories: FCG can connect to external repositories like Framenet (Baker et al., 1998) and Wordnet (Miller, 1995) to load thousands of lexical entries (Micelli et al., 2009; Wellens and Beule, 2010). Robustness: FCG continues operation as far as it can get even if some constructions do not apply (Steels and van Trijp, 2011). Supplied with appropriate diagnostics and repair strategies FCG can even recover from errors (van Trijp, 2012b). Open source: Best of all, FCG is freely downloadable and open source (http://www.fcgnet.org). It is written in Common Lisp (CLOS) and compatible with most popular lisp implementations (SBCL, CCL, Lispworks, ...). 130 Applying construction set (70</context>
</contexts>
<marker>Baker, Fillmore, Lowe, 1998</marker>
<rawString>Collin F. Baker, Charles J. Fillmore, and John B. Lowe. 1998. The Berkeley FrameNet Project. In Proceedings of the 17th international conference on Computational linguistics, Morristown, NJ, USA. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Katrien Beuls</author>
<author>Luc Steels</author>
</authors>
<title>Agent-based models of strategies for the emergence and evolution of grammatical agreement.</title>
<date>2013</date>
<journal>PLoS ONE,</journal>
<volume>8</volume>
<issue>3</issue>
<pages>03</pages>
<contexts>
<context position="6157" citStr="Beuls and Steels, 2013" startWordPosition="942" endWordPosition="945">ent historical stages can be implemented (which addresses questions about representation and processing) but FCG also comes bundled with a reflective learning framework (Beuls et al., 2012) for learning the key constructions of each stage. That same architecture has proven to be adequately powerful to implement processes of grammaticalization so that Figure 2: Schematic overview of the experimental methodology for historical and evolutionary linguists. The example here shows only two linguistic stages but there could be more. actual linguistic change over time can be modeled (van Trijp, 2010; Beuls and Steels, 2013; Wellens and Loetzsch, 2012). 4 How to set up an evolutionary linguistics experiment in FCG? As the FCG processor can both produce and parse utterances it is possible to instantiate not one but a set or population of FCG processors (or FCG agents) that can communicatively interact with each other. Experiments in historical or evolutionary linguistics make use of this multiagent approach where all agents engage in situated pairwise interactions (language games) (Steels, 2012b). In this systems demo we will focus on a recent experiment in the emergence of grammatical agreement (Beuls and Steels</context>
<context position="12374" citStr="Beuls and Steels, 2013" startWordPosition="1871" endWordPosition="1874">. This allows 129 Figure 5: A network of constructions. Diamond shaped nodes represent lexical constructions, egg shaped nodes represent grammatical constructions and rectangular nodes represent semantic categories. Arrows can be read as “primes”. For example the preposition between [BETWEEN.PREP] primes the category LOCATIVE RELATION which in turn primes both the [LOCATIVE RELATION] and [SPATIAL PHRASE] constructions. Both of these constructions also require a semantic category [REFERENT]. the hearer to arrive at a single non-ambiguous interpretation. For more details we refer the reader to (Beuls and Steels, 2013) and the web demo at http://ai.vub.ac.be/materials/plos-agreement/. 5 Features of FCG A number of key features of FCG have already been introduced. Reversible bidirectional processing, a single data representation for all linguistic knowledge, a reflective meta-layer architecture for learning and a multi-agent component for managing multiple interacting FCG instances. Other features, some of which are unique to FCG, include, but are not limited to: Web interface: FCG comes with a rich HTML/AJAX based web interface (Loetzsch, 2012) where it can show fine-grained information to the user in a use</context>
</contexts>
<marker>Beuls, Steels, 2013</marker>
<rawString>Katrien Beuls and Luc Steels. 2013. Agent-based models of strategies for the emergence and evolution of grammatical agreement. PLoS ONE, 8(3):e58960, 03.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Katrien Beuls</author>
<author>Remi van Trijp</author>
<author>Pieter Wellens</author>
</authors>
<title>Diagnostics and repairs in Fluid Construction Grammar.</title>
<date>2012</date>
<booktitle>In Luc Steels</booktitle>
<editor>and Manfred Hild, editors,</editor>
<publisher>Springer Verlag,</publisher>
<location>Berlin.</location>
<marker>Beuls, van Trijp, Wellens, 2012</marker>
<rawString>Katrien Beuls, Remi van Trijp, and Pieter Wellens. 2012. Diagnostics and repairs in Fluid Construction Grammar. In Luc Steels and Manfred Hild, editors, Language Grounding in Robots. Springer Verlag, Berlin.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Katrien Beuls</author>
</authors>
<title>Construction sets and unmarked forms: A case study for Hungarian verbal agreement.</title>
<date>2011</date>
<booktitle>In Luc Steels, editor, Design Patterns in Fluid Construction Grammar,</booktitle>
<pages>237--264</pages>
<publisher>John Benjamins,</publisher>
<location>Amsterdam.</location>
<contexts>
<context position="13761" citStr="Beuls, 2011" startWordPosition="2088" endWordPosition="2089"> The user has easy access to the most important parameters influencing this process. Examples of these are the heuristics and the tests that determine whether a node represents an acceptable solution. FCG comes bundled with a library of heuristics and goal tests and with a bit of programming skills users can add new primitives easily. Customizable construction inventory: By default, FCG stores all constructions in one large set. FCG however supplies a number of different taxonomies, both for conceptual and efficiency reasons. One popular option is to organize constructions in smaller subsets (Beuls, 2011) like lexical, morphological, functional, etc. Another option is to use networks (Wellens, 2011) that can learn co-occurrence relations between constructions and “prime” constructions when they are likely to apply (see Figure 5). Interfaces to external repositories: FCG can connect to external repositories like Framenet (Baker et al., 1998) and Wordnet (Miller, 1995) to load thousands of lexical entries (Micelli et al., 2009; Wellens and Beule, 2010). Robustness: FCG continues operation as far as it can get even if some constructions do not apply (Steels and van Trijp, 2011). Supplied with app</context>
</contexts>
<marker>Beuls, 2011</marker>
<rawString>Katrien Beuls. 2011. Construction sets and unmarked forms: A case study for Hungarian verbal agreement. In Luc Steels, editor, Design Patterns in Fluid Construction Grammar, pages 237–264. John Benjamins, Amsterdam.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Joris Bleys</author>
<author>Kevin Stadler</author>
<author>Joachim De Beule</author>
</authors>
<title>Search in linguistic processing.</title>
<date>2011</date>
<booktitle>In Luc Steels, editor, Design Patterns in Fluid Construction Grammar,</booktitle>
<pages>149--179</pages>
<publisher>John Benjamins,</publisher>
<location>Amsterdam.</location>
<marker>Bleys, Stadler, De Beule, 2011</marker>
<rawString>Joris Bleys, Kevin Stadler, and Joachim De Beule. 2011. Search in linguistic processing. In Luc Steels, editor, Design Patterns in Fluid Construction Grammar, pages 149–179. John Benjamins, Amsterdam.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mark Davies</author>
</authors>
<title>N-grams and word frequency data from the corpus of historical american english (coha).</title>
<date>2011</date>
<contexts>
<context position="1018" citStr="Davies, 2011" startWordPosition="143" endWordPosition="144">ls@ai.vub.ac.be Abstract Fluid Construction Grammar (FCG) is an open-source computational grammar formalism that is becoming increasingly popular for studying the history and evolution of language. This demonstration shows how FCG can be used to operationalise the cultural processes and cognitive mechanisms that underly language evolution and change. 1 Introduction Historical linguistics has been radically transformed over the past two decades by the advent of corpus-based approaches. Ever increasing datasets, both in size and richness of annotation, are becoming available (Yuri et al., 2012; Davies, 2011), and linguists now have more powerful tools at their disposal for uncovering which changes have taken place. In this demonstration, we present Fluid Construction Grammar (Steels, 2011, FCG), an open-source grammar formalism that makes it possible to also address the question of how these changes happened by uncovering the cognitive mechanisms and cultural processes that drive language evolution. FCG combines the expressive power of feature structures and unification with the adaptivity and robustnes of machine learners. In sum, FCG aims to be an open instrument for developing robust and open-</context>
</contexts>
<marker>Davies, 2011</marker>
<rawString>Mark Davies. 2011. N-grams and word frequency data from the corpus of historical american english (coha).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kateryna Gerasymova</author>
<author>Michael Spranger</author>
<author>Katrien Beuls</author>
</authors>
<title>A language strategy for aspect: Encoding aktionsarten through morphology.</title>
<date>2012</date>
<booktitle>In Luc Steels, editor, Experiments in Cultural Language Evolution,</booktitle>
<pages>257--276</pages>
<publisher>John Benjamins.</publisher>
<contexts>
<context position="8762" citStr="Gerasymova et al., 2012" startWordPosition="1321" endWordPosition="1324">Linguistic system 2 Reconstruction Individual Learning Population Alignment 1. Grammaticalization 128 meta-layer processing routine processing diagnostic repair diagnostic diagnostic diagnostic problem problem repair Figure 3: Reflective meta-layer architecture operating as part of an FCG agent/processor. Figure 4: Meaningful marker strategy. guistic systems already investigated include German case (van Trijp, 2012a; van Trijp, 2013), the grammatical expression of space (Spranger and Steels, 2012), the emergence of quantifiers (Pauw and Hilferty, 2012) and the expression of aspect in Russian (Gerasymova et al., 2012) [for an overview see (Steels, 2011; Steels, 2012a)]. An experiment generally investigates multiple linguistic systems of increasing complexity where each system can, but need not, map to a stage along an attested grammaticalization pathway. Most often a stage is introduced in order to gradually increase the complexity of the emergent dynamics. In this demo we posit four systems/strategies, (1) a baseline purely lexical strategy, (2) a strategy to bootstrap and align formal (meaningless) agreement markers, (3) a strategy to bootstrap and align meaningful agreement markers, and finally (4) a st</context>
</contexts>
<marker>Gerasymova, Spranger, Beuls, 2012</marker>
<rawString>Kateryna Gerasymova, Michael Spranger, and Katrien Beuls. 2012. A language strategy for aspect: Encoding aktionsarten through morphology. In Luc Steels, editor, Experiments in Cultural Language Evolution, pages 257 – 276. John Benjamins.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Bernd Heine</author>
<author>Tania Kuteva</author>
</authors>
<title>The Genesis of Grammar: A Reconstruction.</title>
<date>2007</date>
<publisher>Oxford University Press,</publisher>
<contexts>
<context position="11083" citStr="Heine and Kuteva, 2007" startWordPosition="1669" endWordPosition="1672">n these problems by altering the linguistic inventory (e.g. adding, removing or changing constructions). Population Alignment: There exists a large gap between the cognitive machinary needed for learning an existing linguistic system (step 2) and bootstrapping, aligning and maintaining a complete linguistic system from scratch. In this step individual learning operators are extended with alignment strategies. Grammaticalization: Moving from one linguistic system to another is the final step of the experiment. The challenge is to find and implement the mechanisms that drive grammaticalization (Heine and Kuteva, 2007) in line with observed grammaticalization pathways. As an example we’ll give a short sketch of one possible game as played in the meaningful marker strategy as schematically shown in Figure 4. The sketch shows a context of four objects (O1 to O4), each described by three features. The speaker chooses topic O1 + O2 which, given his vocabulary (shown top right), results in uttering “shuqfon sizhic zabu”. Words “shuqfon” and “sizhic” both describe parts of O1 and “zabu” of O2. In order to explicitly communicate this linking the speaker attaches the markers “-ti” and “-ta” so that their meaning is</context>
</contexts>
<marker>Heine, Kuteva, 2007</marker>
<rawString>Bernd Heine and Tania Kuteva. 2007. The Genesis of Grammar: A Reconstruction. Oxford University Press, October.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Martin Loetzsch</author>
</authors>
<title>Tools for grammar engineering. In</title>
<date>2012</date>
<booktitle>Computational Issues in Fluid Construction Grammar.</booktitle>
<editor>Luc Steels, editor,</editor>
<publisher>Springer Verlag,</publisher>
<location>Berlin.</location>
<contexts>
<context position="6186" citStr="Loetzsch, 2012" startWordPosition="948" endWordPosition="949">nted (which addresses questions about representation and processing) but FCG also comes bundled with a reflective learning framework (Beuls et al., 2012) for learning the key constructions of each stage. That same architecture has proven to be adequately powerful to implement processes of grammaticalization so that Figure 2: Schematic overview of the experimental methodology for historical and evolutionary linguists. The example here shows only two linguistic stages but there could be more. actual linguistic change over time can be modeled (van Trijp, 2010; Beuls and Steels, 2013; Wellens and Loetzsch, 2012). 4 How to set up an evolutionary linguistics experiment in FCG? As the FCG processor can both produce and parse utterances it is possible to instantiate not one but a set or population of FCG processors (or FCG agents) that can communicatively interact with each other. Experiments in historical or evolutionary linguistics make use of this multiagent approach where all agents engage in situated pairwise interactions (language games) (Steels, 2012b). In this systems demo we will focus on a recent experiment in the emergence of grammatical agreement (Beuls and Steels, 2013). The language game co</context>
<context position="12910" citStr="Loetzsch, 2012" startWordPosition="1952" endWordPosition="1954">nterpretation. For more details we refer the reader to (Beuls and Steels, 2013) and the web demo at http://ai.vub.ac.be/materials/plos-agreement/. 5 Features of FCG A number of key features of FCG have already been introduced. Reversible bidirectional processing, a single data representation for all linguistic knowledge, a reflective meta-layer architecture for learning and a multi-agent component for managing multiple interacting FCG instances. Other features, some of which are unique to FCG, include, but are not limited to: Web interface: FCG comes with a rich HTML/AJAX based web interface (Loetzsch, 2012) where it can show fine-grained information to the user in a user-friendly manner through the use of expandable elements. See Figure 6. Customizable processing: Linguistic processing is implemented as a search process (Bleys et al., 2011). The user has easy access to the most important parameters influencing this process. Examples of these are the heuristics and the tests that determine whether a node represents an acceptable solution. FCG comes bundled with a library of heuristics and goal tests and with a bit of programming skills users can add new primitives easily. Customizable constructio</context>
</contexts>
<marker>Loetzsch, 2012</marker>
<rawString>Martin Loetzsch. 2012. Tools for grammar engineering. In Luc Steels, editor, Computational Issues in Fluid Construction Grammar. Springer Verlag, Berlin.</rawString>
</citation>
<citation valid="true">
<authors>
<author>V Micelli</author>
<author>R van Trijp</author>
<author>J De Beule</author>
</authors>
<title>Framing fluid construction grammar.</title>
<date>2009</date>
<booktitle>the 31th Annual Conference of the Cognitive Science Society,</booktitle>
<pages>3023--3027</pages>
<editor>In N.A. Taatgen and H. van Rijn, editors,</editor>
<publisher>Cognitive Science Society.</publisher>
<marker>Micelli, van Trijp, De Beule, 2009</marker>
<rawString>V. Micelli, R. van Trijp, and J. De Beule. 2009. Framing fluid construction grammar. In N.A. Taatgen and H. van Rijn, editors, the 31th Annual Conference of the Cognitive Science Society, pages 3023–3027. Cognitive Science Society.</rawString>
</citation>
<citation valid="true">
<authors>
<author>George A Miller</author>
</authors>
<title>Wordnet: a lexical database for english.</title>
<date>1995</date>
<journal>Commun. ACM,</journal>
<pages>38--39</pages>
<contexts>
<context position="14130" citStr="Miller, 1995" startWordPosition="2142" endWordPosition="2143">tory: By default, FCG stores all constructions in one large set. FCG however supplies a number of different taxonomies, both for conceptual and efficiency reasons. One popular option is to organize constructions in smaller subsets (Beuls, 2011) like lexical, morphological, functional, etc. Another option is to use networks (Wellens, 2011) that can learn co-occurrence relations between constructions and “prime” constructions when they are likely to apply (see Figure 5). Interfaces to external repositories: FCG can connect to external repositories like Framenet (Baker et al., 1998) and Wordnet (Miller, 1995) to load thousands of lexical entries (Micelli et al., 2009; Wellens and Beule, 2010). Robustness: FCG continues operation as far as it can get even if some constructions do not apply (Steels and van Trijp, 2011). Supplied with appropriate diagnostics and repair strategies FCG can even recover from errors (van Trijp, 2012b). Open source: Best of all, FCG is freely downloadable and open source (http://www.fcgnet.org). It is written in Common Lisp (CLOS) and compatible with most popular lisp implementations (SBCL, CCL, Lispworks, ...). 130 Applying construction set (70) in direction Found a solu</context>
</contexts>
<marker>Miller, 1995</marker>
<rawString>George A. Miller. 1995. Wordnet: a lexical database for english. Commun. ACM, 38:39–41, November.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Simon Pauw</author>
<author>Joseph Hilferty</author>
</authors>
<title>The emergence of quantifiers.</title>
<date>2012</date>
<booktitle>In Luc Steels, editor, Experiments in Cultural Language Evolution,</booktitle>
<pages>277--304</pages>
<publisher>John Benjamins.</publisher>
<contexts>
<context position="8696" citStr="Pauw and Hilferty, 2012" startWordPosition="1310" endWordPosition="1313"> system 1 Reconstruction Individual Learning Population Alignment Linguistic system 2 Reconstruction Individual Learning Population Alignment 1. Grammaticalization 128 meta-layer processing routine processing diagnostic repair diagnostic diagnostic diagnostic problem problem repair Figure 3: Reflective meta-layer architecture operating as part of an FCG agent/processor. Figure 4: Meaningful marker strategy. guistic systems already investigated include German case (van Trijp, 2012a; van Trijp, 2013), the grammatical expression of space (Spranger and Steels, 2012), the emergence of quantifiers (Pauw and Hilferty, 2012) and the expression of aspect in Russian (Gerasymova et al., 2012) [for an overview see (Steels, 2011; Steels, 2012a)]. An experiment generally investigates multiple linguistic systems of increasing complexity where each system can, but need not, map to a stage along an attested grammaticalization pathway. Most often a stage is introduced in order to gradually increase the complexity of the emergent dynamics. In this demo we posit four systems/strategies, (1) a baseline purely lexical strategy, (2) a strategy to bootstrap and align formal (meaningless) agreement markers, (3) a strategy to boot</context>
</contexts>
<marker>Pauw, Hilferty, 2012</marker>
<rawString>Simon Pauw and Joseph Hilferty. 2012. The emergence of quantifiers. In Luc Steels, editor, Experiments in Cultural Language Evolution, pages 277 – 304. John Benjamins.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Carl Pollard</author>
<author>Ivan A Sag</author>
</authors>
<title>Head-Driven Phrase Structure Grammar.</title>
<date>1994</date>
<publisher>University of Chicago Press,</publisher>
<location>Chicago.</location>
<contexts>
<context position="1945" citStr="Pollard and Sag, 1994" startWordPosition="285" endWordPosition="288">d by uncovering the cognitive mechanisms and cultural processes that drive language evolution. FCG combines the expressive power of feature structures and unification with the adaptivity and robustnes of machine learners. In sum, FCG aims to be an open instrument for developing robust and open-ended models of language processing that can be used for both parsing and production. FCG can be downloaded at http://www.fcg-net.org. 2 Design Philosophy Fluid Construction Grammar is rooted in a cognitive-functional approach to language, which is quite different from a generative grammar such as HPSG (Pollard and Sag, 1994). A generative grammar is a model of language competence that licenses well-formed structures and rejects illformed utterances. Such grammars often decide on the well- or ill-formedness of utterances by using a strong type system that defines a set of features and possible values for those features. The burden of efficient and robust language processing with a generative grammar largely rests on the shoulders of the language processor. A cognitive-functional grammar, on the other hand, functions more like a transducer between meaning and form. In parsing, such a grammar tries to uncover as muc</context>
</contexts>
<marker>Pollard, Sag, 1994</marker>
<rawString>Carl Pollard and Ivan A. Sag. 1994. Head-Driven Phrase Structure Grammar. University of Chicago Press, Chicago.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael Spranger</author>
<author>Luc Steels</author>
</authors>
<title>Emergent functional grammar for space.</title>
<date>2012</date>
<booktitle>In Luc Steels, editor, Experiments in Cultural Language Evolution,</booktitle>
<pages>207--232</pages>
<publisher>John Benjamins,</publisher>
<location>Amsterdam.</location>
<contexts>
<context position="8640" citStr="Spranger and Steels, 2012" startWordPosition="1302" endWordPosition="1305"> ((lex-cat proper-noun) (syn-function nominal)) Linguistic system 1 Reconstruction Individual Learning Population Alignment Linguistic system 2 Reconstruction Individual Learning Population Alignment 1. Grammaticalization 128 meta-layer processing routine processing diagnostic repair diagnostic diagnostic diagnostic problem problem repair Figure 3: Reflective meta-layer architecture operating as part of an FCG agent/processor. Figure 4: Meaningful marker strategy. guistic systems already investigated include German case (van Trijp, 2012a; van Trijp, 2013), the grammatical expression of space (Spranger and Steels, 2012), the emergence of quantifiers (Pauw and Hilferty, 2012) and the expression of aspect in Russian (Gerasymova et al., 2012) [for an overview see (Steels, 2011; Steels, 2012a)]. An experiment generally investigates multiple linguistic systems of increasing complexity where each system can, but need not, map to a stage along an attested grammaticalization pathway. Most often a stage is introduced in order to gradually increase the complexity of the emergent dynamics. In this demo we posit four systems/strategies, (1) a baseline purely lexical strategy, (2) a strategy to bootstrap and align formal</context>
</contexts>
<marker>Spranger, Steels, 2012</marker>
<rawString>Michael Spranger and Luc Steels. 2012. Emergent functional grammar for space. In Luc Steels, editor, Experiments in Cultural Language Evolution, pages 207 – 232. John Benjamins, Amsterdam.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Luc Steels</author>
<author>Remi van Trijp</author>
</authors>
<title>How to make construction grammars fluid and robust.</title>
<date>2011</date>
<booktitle>In Luc Steels, editor, Design Patterns in Fluid Construction Grammar,</booktitle>
<pages>301--330</pages>
<publisher>John Benjamins,</publisher>
<location>Amsterdam.</location>
<marker>Steels, van Trijp, 2011</marker>
<rawString>Luc Steels and Remi van Trijp. 2011. How to make construction grammars fluid and robust. In Luc Steels, editor, Design Patterns in Fluid Construction Grammar, pages 301–330. John Benjamins, Amsterdam.</rawString>
</citation>
<citation valid="true">
<title>Design Patterns in Fluid Construction Grammar.</title>
<date>2011</date>
<editor>Luc Steels, editor.</editor>
<publisher>John Benjamins.</publisher>
<marker>2011</marker>
<rawString>Luc Steels, editor. 2011. Design Patterns in Fluid Construction Grammar. John Benjamins.</rawString>
</citation>
<citation valid="false">
<booktitle>2012a. Computational Issues in Fluid Construction Grammar,</booktitle>
<volume>7249</volume>
<editor>Luc Steels, editor.</editor>
<publisher>Springer,</publisher>
<location>Berlin.</location>
<marker></marker>
<rawString>Luc Steels, editor. 2012a. Computational Issues in Fluid Construction Grammar, volume 7249 of Lecture Notes in Computer Science. Springer, Berlin.</rawString>
</citation>
<citation valid="false">
<booktitle>2012b. Experiments in Cultural Language Evolution. John Benjamins,</booktitle>
<editor>Luc Steels, editor.</editor>
<location>Amsterdam.</location>
<marker></marker>
<rawString>Luc Steels, editor. 2012b. Experiments in Cultural Language Evolution. John Benjamins, Amsterdam.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Remi van Trijp</author>
</authors>
<title>Grammaticalization and semantic maps: Evidence from artificial language evolution. Linguistic Discovery,</title>
<date>2010</date>
<pages>8--310</pages>
<marker>van Trijp, 2010</marker>
<rawString>Remi van Trijp. 2010. Grammaticalization and semantic maps: Evidence from artificial language evolution. Linguistic Discovery, 8:310–326.</rawString>
</citation>
<citation valid="false">
<authors>
<author>2012a</author>
</authors>
<title>Not as awful as it seems : Explaining german case through computational experiments in fluid construction grammar.</title>
<booktitle>In Proceedings of the 13th Conference of the European Chapter of the Association for Computational Linguistics,</booktitle>
<pages>829--839</pages>
<marker>2012a, </marker>
<rawString>Remi van Trijp. 2012a. Not as awful as it seems : Explaining german case through computational experiments in fluid construction grammar. In Proceedings of the 13th Conference of the European Chapter of the Association for Computational Linguistics, pages 829–839.</rawString>
</citation>
<citation valid="false">
<authors>
<author>2012b</author>
</authors>
<title>A reflective architecture for language processing and learning.</title>
<booktitle>In Luc Steels, editor, Computational Issues in Fluid Construction Grammar.</booktitle>
<publisher>Springer Verlag,</publisher>
<location>Berlin.</location>
<marker>2012b, </marker>
<rawString>Remi van Trijp. 2012b. A reflective architecture for language processing and learning. In Luc Steels, editor, Computational Issues in Fluid Construction Grammar. Springer Verlag, Berlin.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Remi van Trijp</author>
</authors>
<title>Linguistic assessment criteria for explaining language change: A case study on syncretism in German definite articles.</title>
<date>2013</date>
<journal>Language Dynamics and Change,</journal>
<volume>3</volume>
<issue>1</issue>
<marker>van Trijp, 2013</marker>
<rawString>Remi van Trijp. 2013. Linguistic assessment criteria for explaining language change: A case study on syncretism in German definite articles. Language Dynamics and Change, 3(1).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Pieter Wellens</author>
<author>Joachim De Beule</author>
</authors>
<title>Priming through constructional dependencies: a case study in fluid construction grammar.</title>
<date>2010</date>
<booktitle>In The Evolution of Language (EVOLANG8),</booktitle>
<pages>344--351</pages>
<publisher>World Scientific.</publisher>
<marker>Wellens, De Beule, 2010</marker>
<rawString>Pieter Wellens and Joachim De Beule. 2010. Priming through constructional dependencies: a case study in fluid construction grammar. In The Evolution of Language (EVOLANG8), pages 344–351. World Scientific.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Pieter Wellens</author>
<author>Martin Loetzsch</author>
</authors>
<title>Multidimensional meanings in lexicon formation.</title>
<date>2012</date>
<booktitle>In Luc Steels, editor, Experiments in Cultural Language Evolution,</booktitle>
<pages>143--166</pages>
<publisher>John Benjamins,</publisher>
<location>Amsterdam.</location>
<contexts>
<context position="6186" citStr="Wellens and Loetzsch, 2012" startWordPosition="946" endWordPosition="949">n be implemented (which addresses questions about representation and processing) but FCG also comes bundled with a reflective learning framework (Beuls et al., 2012) for learning the key constructions of each stage. That same architecture has proven to be adequately powerful to implement processes of grammaticalization so that Figure 2: Schematic overview of the experimental methodology for historical and evolutionary linguists. The example here shows only two linguistic stages but there could be more. actual linguistic change over time can be modeled (van Trijp, 2010; Beuls and Steels, 2013; Wellens and Loetzsch, 2012). 4 How to set up an evolutionary linguistics experiment in FCG? As the FCG processor can both produce and parse utterances it is possible to instantiate not one but a set or population of FCG processors (or FCG agents) that can communicatively interact with each other. Experiments in historical or evolutionary linguistics make use of this multiagent approach where all agents engage in situated pairwise interactions (language games) (Steels, 2012b). In this systems demo we will focus on a recent experiment in the emergence of grammatical agreement (Beuls and Steels, 2013). The language game co</context>
</contexts>
<marker>Wellens, Loetzsch, 2012</marker>
<rawString>Pieter Wellens and Martin Loetzsch. 2012. Multidimensional meanings in lexicon formation. In Luc Steels, editor, Experiments in Cultural Language Evolution, pages 143–166. John Benjamins, Amsterdam.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Pieter Wellens</author>
</authors>
<title>Organizing constructions in networks.</title>
<date>2011</date>
<booktitle>In Luc Steels, editor, Design Patterns in Fluid Construction Grammar,</booktitle>
<pages>181--201</pages>
<publisher>John Benjamins,</publisher>
<location>Amsterdam.</location>
<contexts>
<context position="13857" citStr="Wellens, 2011" startWordPosition="2102" endWordPosition="2103">of these are the heuristics and the tests that determine whether a node represents an acceptable solution. FCG comes bundled with a library of heuristics and goal tests and with a bit of programming skills users can add new primitives easily. Customizable construction inventory: By default, FCG stores all constructions in one large set. FCG however supplies a number of different taxonomies, both for conceptual and efficiency reasons. One popular option is to organize constructions in smaller subsets (Beuls, 2011) like lexical, morphological, functional, etc. Another option is to use networks (Wellens, 2011) that can learn co-occurrence relations between constructions and “prime” constructions when they are likely to apply (see Figure 5). Interfaces to external repositories: FCG can connect to external repositories like Framenet (Baker et al., 1998) and Wordnet (Miller, 1995) to load thousands of lexical entries (Micelli et al., 2009; Wellens and Beule, 2010). Robustness: FCG continues operation as far as it can get even if some constructions do not apply (Steels and van Trijp, 2011). Supplied with appropriate diagnostics and repair strategies FCG can even recover from errors (van Trijp, 2012b). </context>
</contexts>
<marker>Wellens, 2011</marker>
<rawString>Pieter Wellens. 2011. Organizing constructions in networks. In Luc Steels, editor, Design Patterns in Fluid Construction Grammar, pages 181–201. John Benjamins, Amsterdam.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Lin Yuri</author>
<author>Michel Jean-Baptiste</author>
<author>Lieberman Aiden Erez</author>
<author>Orwant Jon</author>
<author>Brockman Will</author>
<author>Slav Petrov</author>
</authors>
<title>Syntactic annotations for the google books ngram corpus.</title>
<date>2012</date>
<booktitle>In ACL (System Demonstrations). The Association</booktitle>
<institution>for Computer Linguistics.</institution>
<contexts>
<context position="1003" citStr="Yuri et al., 2012" startWordPosition="139" endWordPosition="142">mi@csl.sony.fr steels@ai.vub.ac.be Abstract Fluid Construction Grammar (FCG) is an open-source computational grammar formalism that is becoming increasingly popular for studying the history and evolution of language. This demonstration shows how FCG can be used to operationalise the cultural processes and cognitive mechanisms that underly language evolution and change. 1 Introduction Historical linguistics has been radically transformed over the past two decades by the advent of corpus-based approaches. Ever increasing datasets, both in size and richness of annotation, are becoming available (Yuri et al., 2012; Davies, 2011), and linguists now have more powerful tools at their disposal for uncovering which changes have taken place. In this demonstration, we present Fluid Construction Grammar (Steels, 2011, FCG), an open-source grammar formalism that makes it possible to also address the question of how these changes happened by uncovering the cognitive mechanisms and cultural processes that drive language evolution. FCG combines the expressive power of feature structures and unification with the adaptivity and robustnes of machine learners. In sum, FCG aims to be an open instrument for developing r</context>
</contexts>
<marker>Yuri, Jean-Baptiste, Erez, Jon, Will, Petrov, 2012</marker>
<rawString>Lin Yuri, Michel Jean-Baptiste, Lieberman Aiden Erez, Orwant Jon, Brockman Will, and Slav Petrov. 2012. Syntactic annotations for the google books ngram corpus. In ACL (System Demonstrations). The Association for Computer Linguistics.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>