<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.183058">
<title confidence="0.995529">
Interactive sentence combining and paraphrasing
in support of integrated writing and grammar instruction:
A new application area for natural language sentence generators
</title>
<author confidence="0.971355">
Karin HARBUSCH, Camiel VAN BREUGEL, Ulrich KOCH &amp; Gerard KEMPEN
</author>
<affiliation confidence="0.999536">
University of Koblenz-Landau, Computer Science Dept. Max Planck Institute
</affiliation>
<address confidence="0.9741765">
UniversitŠtsstra§e 1 PO Box 310
56070 Koblenz, GERMANY 6500 AH Nijmegen, NETHERLANDS
</address>
<email confidence="0.978458">
{harbusch, camiel, koch}@uni-koblenz.de gerard.kempen@mpi.nl
</email>
<sectionHeader confidence="0.993285" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999858904761905">
The potential of sentence generators as en-
gines in Intelligent Computer-Assisted Lan-
guage Learning and teaching (ICALL) soft-
ware has hardly been explored. We sketch
the prototype of COMPASS, a system that
supports integrated writing and grammar
curricula for 10 to 14 year old elementary or
secondary schoolers. The system enables
first- or second-language teachers to design
controlled writing exercises, in particular of
the “sentence combining” variety. The sys-
tem includes facilities for error diagnosis
and on-line feedback. Syntactic structures
built by students or system can be displayed
as easily understood phrase-structure or de-
pendency trees, adapted to the student’s
level of grammatical knowledge. The heart
of the system is a specially designed genera-
tor capable of lexically guided sentence gen-
eration, of generating syntactic paraphrases,
and displaying syntactic structures visually.
</bodyText>
<sectionHeader confidence="0.960995" genericHeader="method">
1 Introduction: sentence combining
</sectionHeader>
<bodyText confidence="0.999909722222222">
In many countries, a satisfactory level of writing
proficiency is increasingly being recognized as
an important goal of first- and second-language
instruction at all levels of education. In response
to this trend, language technology is beginning
to contribute computational tools for writing
curricula—(semi-)automatic essay grading being
a recent example (e.g. Shermis &amp; Burstein,
2003). The software system described in the pre-
sent paper supports elementary or secondary
schoolers in developing the SYNTACTIC aspects
of their writing skills, with German as target
language.
The following little story was written by a 10
year old German student as part of a writing ex-
ercise. It comprises 15 short sentences, each
consisting of a single finite clause. The first and
last sentences of the text1 are as follows:
</bodyText>
<listItem confidence="0.951923">
(1) Die Kinder wollen zum Mond fliegen.
The children want to-the moon fly
(2) Sie bauen eine Rakete. [...]
They build a rocket
(3) Sie fliegen nach Hause. (4) Zu Hause
</listItem>
<bodyText confidence="0.91866075">
They fly to home At home
erzŠhlen sie alles ihren Eltern.
tell they all (to) their parents
An important goal of writing instruction in
elementary and secondary schools in Germany
and elsewhere is to raise the level of syntactic
diversity of the texts produced by the students.
Combining simple clauses into complex or com-
pound sentences is one of the means to this goal.
For example, the author of the present story
could have combined sentences (1) and (2) as in
(5), or (3) and (4) as in (6).
</bodyText>
<listItem confidence="0.98445825">
(5) Die Kinder bauen eine Rakete, weil sie zum
Mond fliegen wollen. [weil ‘because’]
(6) Sie fliegen nach Hause und erzŠhlen alles
ihren Eltern. [und ‘and’]
</listItem>
<bodyText confidence="0.957047333333333">
At the end of the 1960s, “sentence combin-
ing” originated in the United States as a form of
“controlled writing” exercises, and various em-
</bodyText>
<footnote confidence="0.998825">
1From sentence material collected by our partners at
the Psychology Department of the University of Ko-
blenz-Landau under research grant “Wissen-schaf(f)t
Zukunft” from the Ministry of Education, Science,
Youth and Culture of Rheinland-Pfalz, Germany. The
work presented here is partially funded by that grant.
</footnote>
<page confidence="0.999712">
65
</page>
<bodyText confidence="0.999988372093023">
pirical evaluation studies have since confirmed
its usefulness (Daiker et al., 1985). In a sen-
tence-combining exercise, students are presented
with a sequence of short clauses each expressing
a simple proposition. Together, the propositions
make up a little story or essay. By transforming
the short clauses and combining them into
longer sentences, the students then produce a
coherent and fluent piece of text. Exercises are
often accompanied by instructions to combine
clauses in a particular syntactic way (e.g. “use a
relative clause”). This requires understanding by
the student of grammatical terminology. Actu-
ally, empirical studies show that writing instruc-
tion as well as grammar teaching yield better
results when trained in an integrated manner
than when trained in isolation (e.g. Mellon 1969;
Schuurs, 1990).
Currently, computer support for sentence
combining is restricted to multiple-choice ques-
tions or quizzes. To our knowledge, no software
tool currently exists that deploys generation
technology to evaluate student responses to sen-
tence combining exercises. As a matter of fact,
virtually the entire literature on the application
of NLP to the syntactic aspects of first- and sec-
ond-language teaching is based on syntactic
parsing technology (Heift &amp; Schulze 2003). To
our knowledge, Zamorano Mansilla (2004) is the
only project that applies a sentence generator
(KPML; Bateman 1997) to the recognition and
diagnosis of writing errors (“fill-in-the-blank”
exercises, not sentence combining).
The system introduced in the present paper is
a first attempt to fill this gap. It supports stu-
dents in producing diverse sentence structures
on-line while focusing on grammatical structure,
i.e. without the need to pay much attention to
semantic content generation, word inflection,
spelling, and typing. The system evaluates gram-
matical correctness of student-generated output
and compliance with the task assignment on-
line, and provides accurate feedback.
</bodyText>
<sectionHeader confidence="0.973215" genericHeader="method">
2 The COMPASS system
</sectionHeader>
<bodyText confidence="0.997889035714286">
The kernel of the COMPASS system (for COM-
binatorial and Paraphrastic Assembly of Sen-
tence Structure) is a specially designed sentence
generator capable of LEXICALLY GUIDED SEN-
TENCE CONSTRUCTION, and of PARAPHRASING.
It takes as input (1) a set of lexically anchored
“treelets” that specify the subcategorization
frames of the lexical anchors, together with (2) a
specification of the grammatical relations be-
tween lexical anchors that the to-be-generated
sentences should realize. (This in contrast with
familiar generators that take a semantic structure
as input.) The key structure building operation in
the generator is DISJUNCTIVE FEATURE UNIFI-
CATION (for details of the underlying Perform-
ance Grammar formalism, see Kempen &amp; Har-
busch 2002). Moreover, instead of generating a
single sentence as output, it produces the full set
of well-formed syntactic paraphrases licensed by
the current lexical input in conjunction with the
grammar (Harbusch et al., 2006).
The user interface lets the student describe a
visually displayed scene by selecting words
from a list of inflected word forms. To this pur-
pose, s/he drags the word forms out of the list
and drops them into the system’s workspace on
the screen, where COMPASS displays the
treelets associated with them (Figure 1). Then,
the student combines them in accordance with
the required grammatical relations, and orders
the branches of the resulting hierarchical struc-
ture from left to right (also by drag &amp; drop), un-
til s/he judges that the word form string domi-
nated by the tree (which may contain crossing
branches) expresses the intended meaning in the
form of a grammatically correct sentence. The
generator produces all possible word-order para-
phrases and checks whether the terminal string
of at least one paraphrase is identical to the
string produced by the student. If not, COM-
PASS attempts to diagnose the error by checking
if the latter string could have resulted from mis-
or non-application of a linear order rule, and
provides feedback accordingly. The rule base of
the system also includes MAL-RULES, which
generate structures occurring in frequently ob-
servable errors. If the generator has to apply a
mal-rule in order to match student output ex-
actly, a feedback message is displayed (e.g.
“Don’t use main clause word order in a sub-
ordinate clause”).
Notice that, because the students compose all
sentences and phrases under generator control,
COMPASS can evaluate their responses WITH-
OUT THE HELP OF A PARSER: Based on its para-
phrastic capabilities and its mal-rules, the system
</bodyText>
<page confidence="0.950139">
66
</page>
<figureCaption confidence="0.92751175">
Figure 1. A COMPASS exercise for English speaking students learning German as a second language
(Workspace snapshot). The students are instructed first to assemble two main clauses (sentences (1)
and (2)), then to combine them with weil ‘because’ and to pronominalize one of the subject NPs. The
student failed to place wollen ‘want’ in clause-final position.
</figureCaption>
<bodyText confidence="0.99969878">
can often ‘re-construct’ the well- or ill-formed
sentences produced by students.
The design of the generator enables sentence
combining in direct-manipulation style. At stu-
dent request, it can join together two or more
independent clauses or sentences into a larger
complex or compound sentence—e.g., with one
clause becoming a subordinate adverbial or rela-
tive clause within the other (as in (5); Figure 1),
or by linking them together as coordinate struc-
tures (as in (6)). By dragging a function word
from the word list—e.g. a relative pronoun, a
subordinating or coordinating conjunction—and
attaching the current clauses or sentences to it,
the student can specify which sentence combina-
tion s/he wants. The generator’s linguistic rule
base ensures that the linguistic constraints en-
tailed by the combination are obeyed (e.g. linear
order changes, pronominalization, ellipsis).
This sentence-combining procedure is hard to
realize in generators embodying the three-stage
pipeline architecture described in Reiter &amp; Dale
(2000), which is not intended to deal with struc-
tural changes. Actually, COMPASS allows stu-
dents not only to link trees together, but also to
break them apart after making a mistake. By
dragging a lexical treelet or a larger subtree
away from the current overall tree, they discon-
nect the former from the latter. The feature com-
position of the nodes of the separated partial
trees is immediately adapted to the constraints
prevailing in the new configurations.
The above drag &amp; drop facilities are realized
by a user interface with powerful capabilities for
drawing and manipulating trees interactively
(Kempen 2004). Trees can be displayed with
varying levels of morphosyntactic detail (e.g.
showing vs. hiding structure within major
phrases of a clause) and in different styles (e.g.
phrase-structure vs. dependency trees). These
facilities support visual grammar instruction tai-
lored student&apos;s level of grammatical knowledge
(Kempen 1999). The grammatical nomenclature
in the tree diagrams and the error messages are
close to that used by language teachers in tradi-
tional curricula (e.g., emphasizing grammatical
FUNCTIONS; cf. Reuer 2003). Also, the ‘flat’
trees generated by the underlying Performance
Grammar are relatively easy to understand for
beginning learners of grammatical notions.
</bodyText>
<sectionHeader confidence="0.965302" genericHeader="method">
3 Current implementation
</sectionHeader>
<bodyText confidence="0.997707714285714">
A prototype version of COMPASS has been im-
plemented in Java, based on the Performance
Grammar Workbench (PGW)—the generator
described in Harbusch et al. (2006). It is in-
tended as a software tool in support of integrated
writing and grammar curricula for 10 to 14 year
old elementary and secondary schoolers. The
grammar and the lexicon of the system are in
German; this also holds for the grammatical no-
menclature in tree diagrams displayed on the
screen, although users who are studying German
as a second language can opt for trees with Eng-
lish or Dutch terminology.
When COMPASS starts, it shows three win-
</bodyText>
<page confidence="0.998784">
67
</page>
<bodyText confidence="0.99996337037037">
dows, called TASK, VOCABULARY, and WORK-
SPACE, respectively. The Task window specifies
the problem to be solved in the Workspace, e.g.,
to construct the tree for a given sentence, to
change the number and/or tense of a given sen-
tence, or to build a few sentences describing a
comic strip. The Vocabulary window lists a
small set of inflected words from which the stu-
dent has to choose. S/he drags the words s/he
thinks are appropriate from the Vocabulary win-
dow and drops them in the Workspace. There,
COMPASS displays the treelets associated with
the selected word forms, enabling the student to
combine them and assemble the target sentence.
The sentence generator evaluates each attach-
ment attempt and provides feedback in case of
student errors (as explained in Section 2).
The exercise in Figure 1 deals with word or-
der differences in main and subordinate clauses
(the modal verb wollen ‘want’ in “second” and
“final” position, respectively). By applying a
mal-rule that allows verb-second in subordinate
clauses, COMPASS can match the ill-formed
subordinate weil clause assembled by the student
and issue an accurate error message. The student
can correct the errors by dragging the wollen
branch to the final position.
</bodyText>
<sectionHeader confidence="0.99312" genericHeader="conclusions">
4 Conclusion and discussion
</sectionHeader>
<bodyText confidence="0.999828083333333">
At the time of writing, COMPASS exists only in
the form of a prototype with a limited vocabu-
lary and grammar. Together with the Psychology
Department of the university of Koblenz-Landau
and with teachers of German, we are designing
and implementing grammar and writing exer-
cises that are useful, attractive and motivating
for the target group, and that can be tried out in
the classroom. This enables us to test whether
the on-line diagnostic performance of our gen-
erator-based system is at least as good as that
attained by modern parser-based systems.
</bodyText>
<sectionHeader confidence="0.998116" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.997045586206897">
Bateman, J. A. (1997). Enabling technology for
multilingual natural language generation: The
KPML development environment. Journal of
Natural Language Engineering, 3, 15—55.
Daiker, D. A., Kerek, A. &amp; Morenberg, M.
(Eds.). (1985). Sentence Combining: A rhe-
torical perspective. Carbondale: Southern Il-
linois University Press.
Delmonte, R., Delcloque, Ph. &amp; Tonelli, S.
(Eds.) (2004). Procs. InSTIL/ICALL2004
Symposium on NLP and speech technologies
in advanced language learning systems
(Venice, Italy). Padova: Unipress.
Harbusch, K., Kempen, G., van Breugel, C. &amp;
Koch, U. (2006). A generation-oriented
workbench for Performance Grammar: Cap-
turing linear order variability in German and
Dutch. In: Procs. 4th Internat. NLG Confer-
ence (Sydney, Australia).
Heift, T. &amp; Schulze, M. (Eds.) (2003). Error di-
agnosis and error correction in CALL.
CALICO Journal, 20(3). (Special issue).
Kempen, G. (1999). Visual Grammar: Multime-
dia for grammar and spelling instruction in
primary education. In: Cameron, K.C. (Ed.).
CALL: Media, design, and applications.
Lisse: Swets &amp; Zeitlinger.
Kempen, G. (2004). Interactive visualization of
syntactic structure assembly for grammar-
intensive first- and second-language instruc-
tion. In: Delmonte et al. (Eds.).
Kempen, G. &amp; Harbusch, K. (2002). Perform-
ance Grammar: A declarative definition. In:
Nijholt, A., Theune, M. &amp; Hondorp, H.
(Eds.), Computational linguistics in the
Netherlands 2001. Amsterdam: Rodopi.
Mellon, J. C. 1969. Transformational sentence-
combining: A method for enhancing the de-
velopment of syntactic fluency in english
composition. Urbana, IL: National Council of
Teachers of English.
Reiter. E. &amp; Dale, R. (2000). Building natural
language generation systems. Cambridge
UK: Cambridge University Press.
Reuer, V. (2003). Error recognition and feed-
back with Lexical Functional Grammar.
CALICO Journal, 20, 497-512.
Schuurs, U. R. I. (1990). Leren schrijven voor
lezers: Het effect van drie vormen van pro-
bleemgericht schrijfonderwijs op de zins-
bouwvaardigheid. PhD Dissertation, Twente
University, Enschede.
Shermis, M. D., &amp; Burstein, J. (2003). Auto-
mated essay scoring: A cross-disciplinary
perspective. Hillsdale, NJ: Erlbaum.
Zamorano Mansilla, J. R. (2004). Text genera-
tors, error analysis and feedback. In: Del-
monte et al. (Eds.).
</reference>
<page confidence="0.999446">
68
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.961138">
<title confidence="0.998971333333333">Interactive sentence combining and in support of integrated writing and grammar instruction: A new application area for natural language sentence generators</title>
<author confidence="0.999749">Karin HARBUSCH</author>
<author confidence="0.999749">Camiel VAN_BREUGEL</author>
<author confidence="0.999749">Ulrich KOCH</author>
<author confidence="0.999749">Gerard KEMPEN</author>
<affiliation confidence="0.999996">University of Koblenz-Landau, Computer Science Dept. Max Planck Institute</affiliation>
<address confidence="0.999436">UniversitŠtsstra§e 1 PO Box 310 56070 Koblenz, GERMANY 6500 AH Nijmegen, NETHERLANDS</address>
<email confidence="0.978735">harbusch@uni-koblenz.degerard.kempen@mpi.nl</email>
<email confidence="0.978735">camiel@uni-koblenz.degerard.kempen@mpi.nl</email>
<email confidence="0.978735">koch@uni-koblenz.degerard.kempen@mpi.nl</email>
<abstract confidence="0.999327409090909">The potential of sentence generators as engines in Intelligent Computer-Assisted Language Learning and teaching (ICALL) software has hardly been explored. We sketch the prototype of COMPASS, a system that supports integrated writing and grammar curricula for 10 to 14 year old elementary or secondary schoolers. The system enables firstor second-language teachers to design controlled writing exercises, in particular of the “sentence combining” variety. The system includes facilities for error diagnosis and on-line feedback. Syntactic structures built by students or system can be displayed as easily understood phrase-structure or dependency trees, adapted to the student’s level of grammatical knowledge. The heart of the system is a specially designed generator capable of lexically guided sentence generation, of generating syntactic paraphrases, and displaying syntactic structures visually.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>J A Bateman</author>
</authors>
<title>Enabling technology for multilingual natural language generation: The KPML development environment.</title>
<date>1997</date>
<journal>Journal of Natural Language Engineering,</journal>
<volume>3</volume>
<pages>15--55</pages>
<contexts>
<context position="4887" citStr="Bateman 1997" startWordPosition="742" endWordPosition="743">g. Mellon 1969; Schuurs, 1990). Currently, computer support for sentence combining is restricted to multiple-choice questions or quizzes. To our knowledge, no software tool currently exists that deploys generation technology to evaluate student responses to sentence combining exercises. As a matter of fact, virtually the entire literature on the application of NLP to the syntactic aspects of first- and second-language teaching is based on syntactic parsing technology (Heift &amp; Schulze 2003). To our knowledge, Zamorano Mansilla (2004) is the only project that applies a sentence generator (KPML; Bateman 1997) to the recognition and diagnosis of writing errors (“fill-in-the-blank” exercises, not sentence combining). The system introduced in the present paper is a first attempt to fill this gap. It supports students in producing diverse sentence structures on-line while focusing on grammatical structure, i.e. without the need to pay much attention to semantic content generation, word inflection, spelling, and typing. The system evaluates grammatical correctness of student-generated output and compliance with the task assignment online, and provides accurate feedback. 2 The COMPASS system The kernel </context>
</contexts>
<marker>Bateman, 1997</marker>
<rawString>Bateman, J. A. (1997). Enabling technology for multilingual natural language generation: The KPML development environment. Journal of Natural Language Engineering, 3, 15—55.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D A Daiker</author>
<author>A Kerek</author>
<author>M Morenberg</author>
</authors>
<title>Sentence Combining: A rhetorical perspective. Carbondale: Southern Illinois</title>
<date>1985</date>
<publisher>University Press.</publisher>
<contexts>
<context position="3567" citStr="Daiker et al., 1985" startWordPosition="541" endWordPosition="544">il ‘because’] (6) Sie fliegen nach Hause und erzŠhlen alles ihren Eltern. [und ‘and’] At the end of the 1960s, “sentence combining” originated in the United States as a form of “controlled writing” exercises, and various em1From sentence material collected by our partners at the Psychology Department of the University of Koblenz-Landau under research grant “Wissen-schaf(f)t Zukunft” from the Ministry of Education, Science, Youth and Culture of Rheinland-Pfalz, Germany. The work presented here is partially funded by that grant. 65 pirical evaluation studies have since confirmed its usefulness (Daiker et al., 1985). In a sentence-combining exercise, students are presented with a sequence of short clauses each expressing a simple proposition. Together, the propositions make up a little story or essay. By transforming the short clauses and combining them into longer sentences, the students then produce a coherent and fluent piece of text. Exercises are often accompanied by instructions to combine clauses in a particular syntactic way (e.g. “use a relative clause”). This requires understanding by the student of grammatical terminology. Actually, empirical studies show that writing instruction as well as gr</context>
</contexts>
<marker>Daiker, Kerek, Morenberg, 1985</marker>
<rawString>Daiker, D. A., Kerek, A. &amp; Morenberg, M. (Eds.). (1985). Sentence Combining: A rhetorical perspective. Carbondale: Southern Illinois University Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Tonelli</author>
</authors>
<date>2004</date>
<booktitle>Procs. InSTIL/ICALL2004 Symposium on NLP and speech technologies in advanced language learning systems</booktitle>
<publisher>Unipress.</publisher>
<location>(Venice, Italy). Padova:</location>
<marker>Tonelli, 2004</marker>
<rawString>Delmonte, R., Delcloque, Ph. &amp; Tonelli, S. (Eds.) (2004). Procs. InSTIL/ICALL2004 Symposium on NLP and speech technologies in advanced language learning systems (Venice, Italy). Padova: Unipress.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Harbusch</author>
<author>G Kempen</author>
<author>C van Breugel</author>
<author>U Koch</author>
</authors>
<title>A generation-oriented workbench for Performance Grammar: Capturing linear order variability</title>
<date>2006</date>
<booktitle>in German and Dutch. In: Procs. 4th Internat. NLG Conference</booktitle>
<location>(Sydney, Australia).</location>
<marker>Harbusch, Kempen, van Breugel, Koch, 2006</marker>
<rawString>Harbusch, K., Kempen, G., van Breugel, C. &amp; Koch, U. (2006). A generation-oriented workbench for Performance Grammar: Capturing linear order variability in German and Dutch. In: Procs. 4th Internat. NLG Conference (Sydney, Australia).</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Heift</author>
<author>M Schulze</author>
</authors>
<title>Error diagnosis and error correction in CALL.</title>
<date>2003</date>
<journal>CALICO Journal,</journal>
<volume>20</volume>
<issue>3</issue>
<note>(Special issue).</note>
<contexts>
<context position="4768" citStr="Heift &amp; Schulze 2003" startWordPosition="722" endWordPosition="725">uction as well as grammar teaching yield better results when trained in an integrated manner than when trained in isolation (e.g. Mellon 1969; Schuurs, 1990). Currently, computer support for sentence combining is restricted to multiple-choice questions or quizzes. To our knowledge, no software tool currently exists that deploys generation technology to evaluate student responses to sentence combining exercises. As a matter of fact, virtually the entire literature on the application of NLP to the syntactic aspects of first- and second-language teaching is based on syntactic parsing technology (Heift &amp; Schulze 2003). To our knowledge, Zamorano Mansilla (2004) is the only project that applies a sentence generator (KPML; Bateman 1997) to the recognition and diagnosis of writing errors (“fill-in-the-blank” exercises, not sentence combining). The system introduced in the present paper is a first attempt to fill this gap. It supports students in producing diverse sentence structures on-line while focusing on grammatical structure, i.e. without the need to pay much attention to semantic content generation, word inflection, spelling, and typing. The system evaluates grammatical correctness of student-generated </context>
</contexts>
<marker>Heift, Schulze, 2003</marker>
<rawString>Heift, T. &amp; Schulze, M. (Eds.) (2003). Error diagnosis and error correction in CALL. CALICO Journal, 20(3). (Special issue).</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Kempen</author>
</authors>
<title>Visual Grammar: Multimedia for grammar and spelling instruction in primary education.</title>
<date>1999</date>
<location>In: Cameron, K.C. (Ed.). CALL: Media,</location>
<contexts>
<context position="10355" citStr="Kempen 1999" startWordPosition="1589" endWordPosition="1590">osition of the nodes of the separated partial trees is immediately adapted to the constraints prevailing in the new configurations. The above drag &amp; drop facilities are realized by a user interface with powerful capabilities for drawing and manipulating trees interactively (Kempen 2004). Trees can be displayed with varying levels of morphosyntactic detail (e.g. showing vs. hiding structure within major phrases of a clause) and in different styles (e.g. phrase-structure vs. dependency trees). These facilities support visual grammar instruction tailored student&apos;s level of grammatical knowledge (Kempen 1999). The grammatical nomenclature in the tree diagrams and the error messages are close to that used by language teachers in traditional curricula (e.g., emphasizing grammatical FUNCTIONS; cf. Reuer 2003). Also, the ‘flat’ trees generated by the underlying Performance Grammar are relatively easy to understand for beginning learners of grammatical notions. 3 Current implementation A prototype version of COMPASS has been implemented in Java, based on the Performance Grammar Workbench (PGW)—the generator described in Harbusch et al. (2006). It is intended as a software tool in support of integrated </context>
</contexts>
<marker>Kempen, 1999</marker>
<rawString>Kempen, G. (1999). Visual Grammar: Multimedia for grammar and spelling instruction in primary education. In: Cameron, K.C. (Ed.). CALL: Media, design, and applications. Lisse: Swets &amp; Zeitlinger.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Kempen</author>
</authors>
<title>Interactive visualization of syntactic structure assembly for grammarintensive first- and second-language instruction. In: Delmonte et al.</title>
<date>2004</date>
<publisher>(Eds.).</publisher>
<contexts>
<context position="10030" citStr="Kempen 2004" startWordPosition="1544" endWordPosition="1545">0), which is not intended to deal with structural changes. Actually, COMPASS allows students not only to link trees together, but also to break them apart after making a mistake. By dragging a lexical treelet or a larger subtree away from the current overall tree, they disconnect the former from the latter. The feature composition of the nodes of the separated partial trees is immediately adapted to the constraints prevailing in the new configurations. The above drag &amp; drop facilities are realized by a user interface with powerful capabilities for drawing and manipulating trees interactively (Kempen 2004). Trees can be displayed with varying levels of morphosyntactic detail (e.g. showing vs. hiding structure within major phrases of a clause) and in different styles (e.g. phrase-structure vs. dependency trees). These facilities support visual grammar instruction tailored student&apos;s level of grammatical knowledge (Kempen 1999). The grammatical nomenclature in the tree diagrams and the error messages are close to that used by language teachers in traditional curricula (e.g., emphasizing grammatical FUNCTIONS; cf. Reuer 2003). Also, the ‘flat’ trees generated by the underlying Performance Grammar a</context>
</contexts>
<marker>Kempen, 2004</marker>
<rawString>Kempen, G. (2004). Interactive visualization of syntactic structure assembly for grammarintensive first- and second-language instruction. In: Delmonte et al. (Eds.).</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Kempen</author>
<author>K Harbusch</author>
</authors>
<title>Performance Grammar: A declarative definition. In:</title>
<date>2002</date>
<booktitle>Computational linguistics in the Netherlands</booktitle>
<location>Amsterdam: Rodopi.</location>
<contexts>
<context position="6220" citStr="Kempen &amp; Harbusch 2002" startWordPosition="936" endWordPosition="940">ned sentence generator capable of LEXICALLY GUIDED SENTENCE CONSTRUCTION, and of PARAPHRASING. It takes as input (1) a set of lexically anchored “treelets” that specify the subcategorization frames of the lexical anchors, together with (2) a specification of the grammatical relations between lexical anchors that the to-be-generated sentences should realize. (This in contrast with familiar generators that take a semantic structure as input.) The key structure building operation in the generator is DISJUNCTIVE FEATURE UNIFICATION (for details of the underlying Performance Grammar formalism, see Kempen &amp; Harbusch 2002). Moreover, instead of generating a single sentence as output, it produces the full set of well-formed syntactic paraphrases licensed by the current lexical input in conjunction with the grammar (Harbusch et al., 2006). The user interface lets the student describe a visually displayed scene by selecting words from a list of inflected word forms. To this purpose, s/he drags the word forms out of the list and drops them into the system’s workspace on the screen, where COMPASS displays the treelets associated with them (Figure 1). Then, the student combines them in accordance with the required gr</context>
</contexts>
<marker>Kempen, Harbusch, 2002</marker>
<rawString>Kempen, G. &amp; Harbusch, K. (2002). Performance Grammar: A declarative definition. In: Nijholt, A., Theune, M. &amp; Hondorp, H. (Eds.), Computational linguistics in the Netherlands 2001. Amsterdam: Rodopi.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J C Mellon</author>
</authors>
<title>Transformational sentencecombining: A method for enhancing the development of syntactic fluency in english composition.</title>
<date>1969</date>
<journal>National Council of Teachers of English.</journal>
<location>Urbana, IL:</location>
<contexts>
<context position="4288" citStr="Mellon 1969" startWordPosition="653" endWordPosition="654">simple proposition. Together, the propositions make up a little story or essay. By transforming the short clauses and combining them into longer sentences, the students then produce a coherent and fluent piece of text. Exercises are often accompanied by instructions to combine clauses in a particular syntactic way (e.g. “use a relative clause”). This requires understanding by the student of grammatical terminology. Actually, empirical studies show that writing instruction as well as grammar teaching yield better results when trained in an integrated manner than when trained in isolation (e.g. Mellon 1969; Schuurs, 1990). Currently, computer support for sentence combining is restricted to multiple-choice questions or quizzes. To our knowledge, no software tool currently exists that deploys generation technology to evaluate student responses to sentence combining exercises. As a matter of fact, virtually the entire literature on the application of NLP to the syntactic aspects of first- and second-language teaching is based on syntactic parsing technology (Heift &amp; Schulze 2003). To our knowledge, Zamorano Mansilla (2004) is the only project that applies a sentence generator (KPML; Bateman 1997) </context>
</contexts>
<marker>Mellon, 1969</marker>
<rawString>Mellon, J. C. 1969. Transformational sentencecombining: A method for enhancing the development of syntactic fluency in english composition. Urbana, IL: National Council of Teachers of English.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E</author>
<author>R Dale</author>
</authors>
<title>Building natural language generation systems. Cambridge UK:</title>
<date>2000</date>
<publisher>Cambridge University Press.</publisher>
<marker>E, Dale, 2000</marker>
<rawString>Reiter. E. &amp; Dale, R. (2000). Building natural language generation systems. Cambridge UK: Cambridge University Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>V Reuer</author>
</authors>
<title>Error recognition and feedback with Lexical Functional Grammar.</title>
<date>2003</date>
<journal>CALICO Journal,</journal>
<volume>20</volume>
<pages>497--512</pages>
<contexts>
<context position="10556" citStr="Reuer 2003" startWordPosition="1619" endWordPosition="1620"> powerful capabilities for drawing and manipulating trees interactively (Kempen 2004). Trees can be displayed with varying levels of morphosyntactic detail (e.g. showing vs. hiding structure within major phrases of a clause) and in different styles (e.g. phrase-structure vs. dependency trees). These facilities support visual grammar instruction tailored student&apos;s level of grammatical knowledge (Kempen 1999). The grammatical nomenclature in the tree diagrams and the error messages are close to that used by language teachers in traditional curricula (e.g., emphasizing grammatical FUNCTIONS; cf. Reuer 2003). Also, the ‘flat’ trees generated by the underlying Performance Grammar are relatively easy to understand for beginning learners of grammatical notions. 3 Current implementation A prototype version of COMPASS has been implemented in Java, based on the Performance Grammar Workbench (PGW)—the generator described in Harbusch et al. (2006). It is intended as a software tool in support of integrated writing and grammar curricula for 10 to 14 year old elementary and secondary schoolers. The grammar and the lexicon of the system are in German; this also holds for the grammatical nomenclature in tree</context>
</contexts>
<marker>Reuer, 2003</marker>
<rawString>Reuer, V. (2003). Error recognition and feedback with Lexical Functional Grammar. CALICO Journal, 20, 497-512.</rawString>
</citation>
<citation valid="true">
<authors>
<author>U R I Schuurs</author>
</authors>
<title>Leren schrijven voor lezers: Het effect van drie vormen van probleemgericht schrijfonderwijs op de zinsbouwvaardigheid.</title>
<date>1990</date>
<institution>PhD Dissertation, Twente University,</institution>
<location>Enschede.</location>
<contexts>
<context position="4304" citStr="Schuurs, 1990" startWordPosition="655" endWordPosition="656">ition. Together, the propositions make up a little story or essay. By transforming the short clauses and combining them into longer sentences, the students then produce a coherent and fluent piece of text. Exercises are often accompanied by instructions to combine clauses in a particular syntactic way (e.g. “use a relative clause”). This requires understanding by the student of grammatical terminology. Actually, empirical studies show that writing instruction as well as grammar teaching yield better results when trained in an integrated manner than when trained in isolation (e.g. Mellon 1969; Schuurs, 1990). Currently, computer support for sentence combining is restricted to multiple-choice questions or quizzes. To our knowledge, no software tool currently exists that deploys generation technology to evaluate student responses to sentence combining exercises. As a matter of fact, virtually the entire literature on the application of NLP to the syntactic aspects of first- and second-language teaching is based on syntactic parsing technology (Heift &amp; Schulze 2003). To our knowledge, Zamorano Mansilla (2004) is the only project that applies a sentence generator (KPML; Bateman 1997) to the recogniti</context>
</contexts>
<marker>Schuurs, 1990</marker>
<rawString>Schuurs, U. R. I. (1990). Leren schrijven voor lezers: Het effect van drie vormen van probleemgericht schrijfonderwijs op de zinsbouwvaardigheid. PhD Dissertation, Twente University, Enschede.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M D Shermis</author>
<author>J Burstein</author>
</authors>
<title>Automated essay scoring: A cross-disciplinary perspective.</title>
<date>2003</date>
<publisher>Erlbaum.</publisher>
<location>Hillsdale, NJ:</location>
<contexts>
<context position="1788" citStr="Shermis &amp; Burstein, 2003" startWordPosition="243" endWordPosition="246"> knowledge. The heart of the system is a specially designed generator capable of lexically guided sentence generation, of generating syntactic paraphrases, and displaying syntactic structures visually. 1 Introduction: sentence combining In many countries, a satisfactory level of writing proficiency is increasingly being recognized as an important goal of first- and second-language instruction at all levels of education. In response to this trend, language technology is beginning to contribute computational tools for writing curricula—(semi-)automatic essay grading being a recent example (e.g. Shermis &amp; Burstein, 2003). The software system described in the present paper supports elementary or secondary schoolers in developing the SYNTACTIC aspects of their writing skills, with German as target language. The following little story was written by a 10 year old German student as part of a writing exercise. It comprises 15 short sentences, each consisting of a single finite clause. The first and last sentences of the text1 are as follows: (1) Die Kinder wollen zum Mond fliegen. The children want to-the moon fly (2) Sie bauen eine Rakete. [...] They build a rocket (3) Sie fliegen nach Hause. (4) Zu Hause They fl</context>
</contexts>
<marker>Shermis, Burstein, 2003</marker>
<rawString>Shermis, M. D., &amp; Burstein, J. (2003). Automated essay scoring: A cross-disciplinary perspective. Hillsdale, NJ: Erlbaum.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Zamorano Mansilla</author>
<author>J R</author>
</authors>
<title>Text generators, error analysis and feedback.</title>
<date>2004</date>
<journal>In: Delmonte et al. (Eds.).</journal>
<marker>Mansilla, R, 2004</marker>
<rawString>Zamorano Mansilla, J. R. (2004). Text generators, error analysis and feedback. In: Delmonte et al. (Eds.).</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>