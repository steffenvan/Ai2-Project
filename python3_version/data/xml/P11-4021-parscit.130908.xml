<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000317">
<title confidence="0.9992645">
Clairlib: A Toolkit for Natural Language Processing, Information Retrieval,
and Network Analysis
</title>
<author confidence="0.809563">
Amjad Abu-Jbara
</author>
<affiliation confidence="0.8850665">
EECS Department
University of Michigan
</affiliation>
<address confidence="0.855469">
Ann Arbor, MI, USA
</address>
<email confidence="0.999372">
amjbara@umich.edu
</email>
<sectionHeader confidence="0.994218" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.994290642857143">
In this paper we present Clairlib, an open-
source toolkit for Natural Language Process-
ing, Information Retrieval, and Network Anal-
ysis. Clairlib provides an integrated frame-
work intended to simplify a number of generic
tasks within and across those three areas. It
has a command-line interface, a graphical in-
terface, and a documented API. Clairlib is
compatible with all the common platforms and
operating systems. In addition to its own func-
tionality, it provides interfaces to external soft-
ware and corpora. Clairlib comes with a com-
prehensive documentation and a rich set of tu-
torials and visual demos.
</bodyText>
<sectionHeader confidence="0.998992" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999528842105263">
The development of software packages and code li-
braries that implement algorithms and perform tasks
in scientific areas is of great advantage for both re-
searchers and educators. The availability of these
tools saves the researchers a lot of the time and the
effort needed to implement the new approaches they
propose and conduct experiments to verify their hy-
potheses. Educators also find these tools useful in
class demonstrations and for setting up practical pro-
gramming assignments and projects for their stu-
dents.
A large number of systems have been developed
over the years to solve problems and perform tasks
in Natural Language Processing, Information Re-
trieval, or Network Analysis. Many of these sys-
tems perform specific tasks such as parsing, Graph
Partitioning, co-reference resolution, web crawling
etc. Some other systems are frameworks for per-
forming generic tasks in one area of focus such as
</bodyText>
<author confidence="0.45067">
Dragomir Radev
</author>
<affiliation confidence="0.895679666666667">
EECS Department and
School of Information
University of Michigan
</affiliation>
<address confidence="0.715163">
Ann Arbor, MI, USA
</address>
<email confidence="0.995764">
radev@umich.edu
</email>
<bodyText confidence="0.996237264705882">
NLTK (Bird and Loper, 2004) and GATE (Cun-
ningham et al., 2002) for Natural Language Pro-
cessing; Pajek (Batagelj and Mrvar, 2003) and
GUESS (Adar, 2006) for Network Analysis and Vi-
sualization; and Lemur1 for Language Modeling and
Information Retrieval.
This paper presents Clairlib, an open-source
toolkit that contains a suit of modules for generic
tasks in Natural Language Processing (NLP), Infor-
mation Retrieval (IR), and Network Analysis (NA).
While many systems have been developed to address
tasks or subtasks in one of these areas as we have
just mentioned, Clairlib provides one integrated en-
vironment that addresses tasks in the three areas.
This makes it useful for a wide range of applications
within and across the three domains.
Clairlib is designed to meet the needs of re-
searchers and educators with varying purposes and
backgrounds. For this purpose, Clairlib provides
three different interfaces to its functionality: a
graphical interface, a command-line interface, and
an application programming interface (API).
Clairlib is developed and maintained by the Com-
putational Linguistics and Information Retrieval
(CLAIR) group at the University of Michigan. The
first version of Clairlib was released in the year
2007. It has been heavily developed since then until
it witnessed a qualitative leap by adding the Graphi-
cal Interface and many new features to the latest ver-
sion that we are presenting here.
Clairlib core modules are written in Perl. The
GUI was written in Java. The Perl back-end and the
Java front-end are efficiently tied together through a
communication module. Clairlib is compatible with
</bodyText>
<footnote confidence="0.993584">
1http://www.lemurproject.org/
</footnote>
<page confidence="0.88768">
121
</page>
<note confidence="0.3186">
Proceedings of the ACL-HLT 2011 System Demonstrations, pages 121–126,
Portland, Oregon, USA, 21 June 2011. c�2011 Association for Computational Linguistics
</note>
<bodyText confidence="0.999733545454546">
all the common platforms and operating systems.
The only requirements are a Perl interpreter and Java
Runtime Environment (JRE).
Clairlib has been used in several research projects
to implement systems and conduct experiments. It
also has been used in several academic courses.
The rest of this paper is organized as follows. In
Section 2, we describe the structure of Clairlib. In
Section 3, we present its functionality. Section 4
presents some usage examples. We conclude in Sec-
tion 5.
</bodyText>
<sectionHeader confidence="0.940556" genericHeader="introduction">
2 System Overview
</sectionHeader>
<bodyText confidence="0.999724714285714">
Clairlib consists of three main components: the core
library, the command-line interface, and the graph-
ical user interface. The three components were de-
signed and connected together in a manner that aims
to achieve simplicity, integration, and ease of use. In
the following subsections, we briefly describe each
of the three components.
</bodyText>
<subsectionHeader confidence="0.987191">
2.1 Modules
</subsectionHeader>
<bodyText confidence="0.999968583333333">
The core of Clairlib is a collection of more than 100
modules organized in a shallow hierarchy, each of
which performs a specific task or implements a cer-
tain algorithm. A set of core modules define the data
structures and perform the basic processing tasks.
For example, Clair::Document defines a data struc-
ture for holding textual data in various formats, and
performs the basic text processing tasks such as tok-
enization, stemming, tag stripping, etc.
Another set of modules perform more specific
tasks in the three areas of focus (NLP, IR, and NA).
For example, Clair::Bio::GIN::Interaction is de-
voted to protein-protein interaction extraction from
biomedical text.
A third set contains modules that interface Clair-
lib to external tools. For example, Clair::Utils::Parse
provides an interface to Charniak parser (Charniak,
2000), Stanford parser (Klein and Manning, 2003),
and Chunklink2.
Each module has a well-defined API. The API is
oriented to developers to help them write applica-
tions and build systems on top of Clairlib modules;
and to researchers to help them write applications
and setup custom experiments for their research.
</bodyText>
<footnote confidence="0.752967">
2http://ilk.uvt.nl/team/sabine/chunklink/README.html
</footnote>
<subsectionHeader confidence="0.971631">
2.2 Command-line Interface
</subsectionHeader>
<bodyText confidence="0.9548813">
The command-line interface provides an easy access
to many of the tasks that Clairlib modules imple-
ment. It provides more than 50 different commands.
Each command is documented and demonstrated in
one or more tutorials. The function of each com-
mand can be customized by passing arguments with
the command. For example, the command
partition.pl -graph graph.net -method GirvanNewman -n 4
uses the GrivanNewman algorithm to divide a
given graph into 4 partitions.
</bodyText>
<subsectionHeader confidence="0.999791">
2.3 Graphical User Interface
</subsectionHeader>
<bodyText confidence="0.999950545454545">
The graphical user interface (GUI) is an impor-
tant feature that has been recently added to Clairlib
and constituted a quantum leap in its development.
The main purpose of the GUI is to make the rich
set of Clairlib functionalities easier to access by a
larger number of users from various levels and back-
grounds especially students and users with limited or
no programming experience.
It is also intended to help students do their assign-
ments, projects, and research experiments in an in-
teractive environment. We believe that visual tools
facilitate understanding and make learning a more
enjoyable experience for many students. Focusing
on this purpose, the GUI is tuned for simplicity and
ease of use more than high computational efficiency.
Therefore, while it is suitable for small and medium
scale projects, it is not guaranteed to work efficiently
for large projects that involve large datasets and re-
quire heavy processing. The command-line inter-
face is a better choice for large projects.
The GUI consists of three components: the Net-
work Editor/Visualizer/Analyzer, the Text Proces-
sor, and the Corpus Processor. The Network com-
ponent allows the user to 1) build a new network
using a set of drawing and editing tools, 2) open
existing networks stored in files in several different
formats, 3) visualize a network and interact with it,
4) compute different statistics for a network such as
diameter, clustering coefficient, degree distribution,
etc., and 5) perform several operations on a network
such as random walk, label propagation, partition-
ing, etc. This component uses the open source li-
brary, JUNG3 to visualize networks. Figure 1 shows
</bodyText>
<footnote confidence="0.970661">
3http://jung.sourceforge.net/
</footnote>
<page confidence="0.983117">
122
</page>
<figureCaption confidence="0.999812">
Figure 1: A screenshot for the network visualization component of Clairlib
</figureCaption>
<bodyText confidence="0.9988953125">
a screenshot for the Network Visualizer. 2.4 Documentation
The Text Processing component allows users to
process textual data published on the internet or im-
ported from a file stored on the disk. It can process
data in plain, html, or PDF format. Most of the text
processing capabilities implemented in Clairlib core
library are available through this component. Fig-
ure 2 shows a screenshot of the text processing com-
ponent.
The Corpus Processing component allows users
to build a corpus of textual data out of a collection
of files in plain, HTML, or PDF format; or by crawl-
ing a website. Several tasks could be performed on
a corpus such as indexing, querying, summarization,
information extraction, hyperlink network construc-
tion, etc.
Although these components can be run indepen-
dently, they are very integrated and designed to eas-
ily interact with each other. For example, a user can
crawl a website using the Corpus component, then
switch to the Text Processing component to extract
the text from the web documents and stem all the
words, then switch back to the Corpus component
to build a document similarity graph. The graph can
then be taken to the Network component to be visu-
alized and analyzed.
Clairlib comes with an extensive documentation.
The documentation contains the installation infor-
mation for different platforms, a description of all
Clairlib components and modules, and a lot of usage
examples. In addition to this documentation, Clair-
lib provides three other resources:
</bodyText>
<sectionHeader confidence="0.911667" genericHeader="method">
API Reference
</sectionHeader>
<bodyText confidence="0.999871857142857">
The API Reference provides a complete descrip-
tion of each module in the library. It describes each
subroutine, the task it performs, the arguments it
takes, the value it returns, etc. This reference is use-
ful for developers who want to use Clairlib modules
in their own applications and systems. The API Ref-
erence is published on the internet.
</bodyText>
<subsectionHeader confidence="0.502141">
Tutorials
</subsectionHeader>
<bodyText confidence="0.99959475">
Tutorials teach users how to use Clairlib by ex-
amples. Each tutorial addresses a specific task and
provides a set of instructions to complete the task
using Clairlib command-line tools or its API.
</bodyText>
<subsectionHeader confidence="0.946561">
Visual Demos
</subsectionHeader>
<bodyText confidence="0.9998275">
Visual demos target the users of the graphical in-
terface. The demos visually show how to start the
GUI and how to use its components to perform sev-
eral tasks.
</bodyText>
<page confidence="0.998899">
123
</page>
<figureCaption confidence="0.999044">
Figure 2: A screenshot for the text processing component of Clairlib
</figureCaption>
<sectionHeader confidence="0.996062" genericHeader="method">
3 Functionality
</sectionHeader>
<bodyText confidence="0.993043833333333">
Clairlib provides modules and tools for a broad spec-
trum of tasks. Most of the functionalities are native
to Clairlib. Some functionalities, however, are im-
ported from other open-source packages or external
software. This section lists the main functionalities
categorized by their areas.
</bodyText>
<subsectionHeader confidence="0.997821">
3.1 Natural Language Processing
</subsectionHeader>
<bodyText confidence="0.999642125">
NLP functionalities include Tokenization, Sen-
tence Segmentation, Stemming, HTML Tags Strip-
ping, Syntactic Parsing, Dependency Parsing,
Part-of-Speech Tagging, Document Classification,
LexRank, Summarization, Synthetic Corpus Gen-
eration, N-grams Extraction, XML Parsing, XML
Tree Building, Text Similarity, Political Text Analy-
sis, and Protein Name Tagging.
</bodyText>
<subsectionHeader confidence="0.997229">
3.2 Information Retrieval
</subsectionHeader>
<bodyText confidence="0.9961524">
IR functionalities include Web Crawling, Indexing,
TF-IDF, PageRank, Phrase Based Retrieval, Fuzzy
OR Queries, Latent Semantic Indexing, Web Search,
Automatic Link Extraction, and Protein-Protein In-
teraction Extraction.
</bodyText>
<subsectionHeader confidence="0.994384">
3.3 Network Analysis
</subsectionHeader>
<bodyText confidence="0.997669692307692">
Network Analysis functionalities include Network
Statistics, Random Network Generation, Network
Visualization, Network Partitioning, Community
Finding, Random Walks, Flow Networks, Signed
Networks, and Semi-supervised Graph-based Clas-
sification. Network Statistics include Centralities,
Clustering Coefficient, Shortest Paths, Diameter,
Triangles, Triplets, etc.
Some of these functionalities are implemented us-
ing several approaches. For example, Clairlib have
implementations for 5 graph partitioning algorithms.
This makes Clairlib a useful tool for conducting ex-
periments for comparative studies.
</bodyText>
<sectionHeader confidence="0.958685" genericHeader="method">
4 Uses of Clairlib
</sectionHeader>
<bodyText confidence="0.999825">
The diverse set of domains that Clairlib covers and
the different types of interfaces it provides make it
suitable for use in many contexts. In this section, we
highlight some of its uses.
</bodyText>
<subsectionHeader confidence="0.682763">
Education
</subsectionHeader>
<bodyText confidence="0.998406636363636">
Clairlib contains visual tools that instructors can use
to do class demonstrations to help their students un-
derstand the basic concepts and the algorithms they
face during their study. For example, the random
walk simulator can be used to teach the students how
random walk works by showing a sample network
and then walk randomly step-by-step through it and
show the students how the probabilities change after
each step.
It can also be used to create assignments of vary-
ing levels of difficulty and different scopes. Instruc-
</bodyText>
<page confidence="0.996542">
124
</page>
<bodyText confidence="0.999886611111111">
tors may ask their students to do experiments with a
dataset using Clairlib, write applications that use the
API, extend an existing module, or contribute new
modules to Clairlib. One example could be to ask
the students to a build a simple information retrieval
system that indexes a collection of documents and
executes search queries on it.
Clairlib has been used to create assignments and
projects in NLP and IR classes at the University of
Michigan and Columbia University. The experience
was positive for both the instructors and the stu-
dents. The instructors were able to design assign-
ments that cover several aspects of the course and
can be done in a reasonable amount of time. The stu-
dents used the API to accomplish their assignments
and projects. This helped them focus on the impor-
tant concepts rather than diving into fine program-
ming details.
</bodyText>
<sectionHeader confidence="0.488383" genericHeader="method">
Research
</sectionHeader>
<bodyText confidence="0.999420538461539">
Clairlib contains implementations for many algo-
rithms and approaches that solve common problems.
It also comes with a number of corpora and anno-
tated datasets. This makes it a good resource for re-
searchers to build systems and conduct experiments.
Clairlib was successfully used in several research
projects. Examples include Political Text Analy-
sis (Hassan et al., 2008), Scientific Paper Summa-
rization (Qazvinian and Radev, 2009), Blog Net-
works Analysis (Hassan et al., 2009), Protein In-
teraction Extraction (Ozgur and Radev, 2009),
and Citation-Based Summarization (Abu-Jbara and
Radev, 2011).
</bodyText>
<subsectionHeader confidence="0.992625">
4.1 Examples
</subsectionHeader>
<bodyText confidence="0.9979955">
In this subsection, we present some examples where
Clairlib has been used.
</bodyText>
<sectionHeader confidence="0.604284" genericHeader="method">
Example: Protein-Protein Interaction
Extraction
</sectionHeader>
<bodyText confidence="0.999975333333333">
This is an example of a project that builds an
information extraction system and uses Clairlib as
its main processing component (Ozgur and Radev,
2009). This system is now part of a larger bioinfor-
matics project, NCIBI.
The system uses Clairlib to process a biomedical
article: 1) splits it into sentences using the segmen-
tation module, 2) parses each sentence using the in-
terface to the Stanford Dependency Parser, 3) tags
the protein names, 4) extracts protein-protein inter-
actions using a specific Clairlib module devoted to
this task, and then 5) it builds a protein interaction
network in which nodes are proteins and edges rep-
resent interaction relations. Figure 3 shows an ex-
ample protein interaction network extracted from the
abstracts of a collection of biomedical articles from
PubMed. This network is then analyzed to compute
node centralities and the basic network statistics.
</bodyText>
<subsectionHeader confidence="0.5073715">
Example: Scientific Paper Summarization Using
Citation Networks
</subsectionHeader>
<bodyText confidence="0.999947357142857">
This is an example of a research work that
used Clairlib to implement an approach and con-
duct experiments to support the research hypothe-
sis. Qazvinian and Radev (2009) used Clairlib to
implement their method for citation-based summa-
rization. Given a set of sentences that cite a paper,
they use Clairlib to 1) construct a cosine similarity
network out of these sentences, 2) find communities
of similar sentences using Clairlib community find-
ing module, 3) run Clairlib LexRank module to rank
the sentences, 4) extract the sentence with the high-
est rank from each community, and finally 5) return
the set of extracted sentences as a summary para-
graph.
</bodyText>
<sectionHeader confidence="0.882986" genericHeader="method">
Example: Text Classification
</sectionHeader>
<bodyText confidence="0.999984">
This is an example of a teaching assignment that
was used in an introductory course on information
retrieval at the University of Michigan. Students
were given the 20-newsgroups corpus (a large set
of news articles labeled by their topic and split into
training and testing sets) and were asked to use
Clairlib API to: 1) stem the text of the documents,
2) convert each document into a feature vector based
on word frequencies, 2) train a multi-class Percep-
tron or Naive Bayes classifier on the documents in
the training set, and finally 3) classify the documents
in the testing set using the trained classifier.
</bodyText>
<sectionHeader confidence="0.999631" genericHeader="conclusions">
5 Conclusions
</sectionHeader>
<bodyText confidence="0.9974552">
Clairlib is a broad-coverage toolkit for Natural Lan-
guage Processing, Information Retrieval, and Net-
work Analysis. It provides a simple, integrated, in-
teractive, and extensible framework for education
and research uses. It provides an API, a command-
</bodyText>
<page confidence="0.997222">
125
</page>
<figureCaption confidence="0.998885">
Figure 3: Clairlib used to construct and analyze a protein network extracted from biomedical articles
</figureCaption>
<bodyText confidence="0.999167666666667">
line interface, and graphical user interface for the
convenience of users with varying purposes and
backgrounds. Clairlib is well-documented, easy to
learn, and simple to use. It has been tested for vari-
ous types of tasks in various environments.
Clairlib is an open source project and we welcome
all the contributions. Readers who are interested in
contributing to Clairlib are encouraged to contact the
authors.
</bodyText>
<sectionHeader confidence="0.996004" genericHeader="acknowledgments">
Acknowledgements
</sectionHeader>
<bodyText confidence="0.999541818181818">
We would like to thank Mark Hodges, Anthony
Fader, Mark Joseph, Joshua Gerrish, Mark Schaller,
Jonathan dePeri, Bryan Gibson, Chen Huang, Arzu-
can Ozgur, and Prem Ganeshkumar who contributed
to the development of Clairlib.
This work was supported in part by grants
R01-LM008106 and U54-DA021519 from the US
National Institutes of Health, U54 DA021519,
IDM 0329043, DHB 0527513, 0534323, and
0527513 from the National Science Foundation, and
W911NF-09-C-0141 from IARPA.
</bodyText>
<sectionHeader confidence="0.999422" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999291702702703">
R. Gaizauskas, P. J. Rodgers and K. Humphreys 2001.
Visual Tools for Natural Language Processing. Jour-
nal of Visual Languages and Computing, Volume 12,
Issue 4, Pages 375-412.
Arzucan Ozgor and Dragomir Radev 2009. Supervised
classification for extracting biomedical events. Pro-
ceedings of the BioNLP’09 Workshop Shared Task on
Event Extraction at NAACL-HLT, Boulder, Colorado,
USA, pages 111-114
Ahmed Hassan, Dragomir R. Radev, Junghoo Cho, Am-
ruta Joshi. 2009. Content Based Recommendation
and Summarization in the Blogosphere. ICWSM-
2009.
Vahed Qazvinian, Dragomir Radev. 2008. Scientific
Paper Summarization Using Citation Summary Net-
works. COLING 2008.
Ahmed Hassan, Anthony Fader, Michael Crespin, Kevin
Quinn, Burt Monroe, Michael Colaresi and Dragomir
Radev. 2008. Tracking the Dynamic Evolution of Par-
ticipants Salience in a Discussion. COLING 2008.
Eugene Charniak. 2000. A Maximum-Entropy-Inspired
Parser. Proceedings of NAACL-2000.
Dan Klein and Christopher Manning. 2003. Accurate
Unlexicalized Parsing. Proceedings of ACL-2003.
Amjad Abu-Jbara and Dragomir Radev 2011. Coher-
ent Citation-based Summarization of Scientific Papers
Proceedings of ACL-2011.
H. Cunningham and D. Maynard and K. Bontcheva and
V. Tablan 2002. GATE: A Framework and Graphical
Development Environment for Robust NLP Tools and
Applications Proceedings ofACL-2002, Philadelphia.
Steven Bird and Edward Loper. 2004. NLTK: The Natu-
ral Language Toolkit Proceedings of ACL-2004.
V. Batagelj and A. Mrvar 2003. Pajek - Analysis and
Visualization of Large Networks Springer, Berlin.
Eytan Adar. 2006. GUESS: A Language and Interface
for Graph Exploration CHI 2006.
</reference>
<page confidence="0.998486">
126
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.346097">
<title confidence="0.976206">Clairlib: A Toolkit for Natural Language Processing, Information Retrieval, and Network Analysis</title>
<author confidence="0.687709">Amjad</author>
<affiliation confidence="0.957528">EECS University of</affiliation>
<author confidence="0.545153">Ann Arbor</author>
<author confidence="0.545153">MI</author>
<email confidence="0.999305">amjbara@umich.edu</email>
<abstract confidence="0.997977">In this paper we present Clairlib, an opensource toolkit for Natural Language Processing, Information Retrieval, and Network Analysis. Clairlib provides an integrated framework intended to simplify a number of generic tasks within and across those three areas. It has a command-line interface, a graphical interface, and a documented API. Clairlib is compatible with all the common platforms and operating systems. In addition to its own functionality, it provides interfaces to external software and corpora. Clairlib comes with a comprehensive documentation and a rich set of tutorials and visual demos.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>R Gaizauskas</author>
<author>P J Rodgers</author>
<author>K Humphreys</author>
</authors>
<title>Visual Tools for Natural Language Processing.</title>
<date>2001</date>
<journal>Journal of Visual Languages and Computing,</journal>
<volume>12</volume>
<pages>375--412</pages>
<marker>Gaizauskas, Rodgers, Humphreys, 2001</marker>
<rawString>R. Gaizauskas, P. J. Rodgers and K. Humphreys 2001. Visual Tools for Natural Language Processing. Journal of Visual Languages and Computing, Volume 12, Issue 4, Pages 375-412.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Arzucan Ozgor</author>
<author>Dragomir Radev</author>
</authors>
<title>Supervised classification for extracting biomedical events.</title>
<date>2009</date>
<booktitle>Proceedings of the BioNLP’09 Workshop Shared Task on Event Extraction at NAACL-HLT,</booktitle>
<pages>111--114</pages>
<location>Boulder, Colorado, USA,</location>
<marker>Ozgor, Radev, 2009</marker>
<rawString>Arzucan Ozgor and Dragomir Radev 2009. Supervised classification for extracting biomedical events. Proceedings of the BioNLP’09 Workshop Shared Task on Event Extraction at NAACL-HLT, Boulder, Colorado, USA, pages 111-114</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ahmed Hassan</author>
<author>Dragomir R Radev</author>
<author>Junghoo Cho</author>
<author>Amruta Joshi</author>
</authors>
<date>2009</date>
<booktitle>Content Based Recommendation and Summarization in the Blogosphere. ICWSM2009.</booktitle>
<contexts>
<context position="13945" citStr="Hassan et al., 2009" startWordPosition="2159" endWordPosition="2162">sh their assignments and projects. This helped them focus on the important concepts rather than diving into fine programming details. Research Clairlib contains implementations for many algorithms and approaches that solve common problems. It also comes with a number of corpora and annotated datasets. This makes it a good resource for researchers to build systems and conduct experiments. Clairlib was successfully used in several research projects. Examples include Political Text Analysis (Hassan et al., 2008), Scientific Paper Summarization (Qazvinian and Radev, 2009), Blog Networks Analysis (Hassan et al., 2009), Protein Interaction Extraction (Ozgur and Radev, 2009), and Citation-Based Summarization (Abu-Jbara and Radev, 2011). 4.1 Examples In this subsection, we present some examples where Clairlib has been used. Example: Protein-Protein Interaction Extraction This is an example of a project that builds an information extraction system and uses Clairlib as its main processing component (Ozgur and Radev, 2009). This system is now part of a larger bioinformatics project, NCIBI. The system uses Clairlib to process a biomedical article: 1) splits it into sentences using the segmentation module, 2) pars</context>
</contexts>
<marker>Hassan, Radev, Cho, Joshi, 2009</marker>
<rawString>Ahmed Hassan, Dragomir R. Radev, Junghoo Cho, Amruta Joshi. 2009. Content Based Recommendation and Summarization in the Blogosphere. ICWSM2009.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Vahed Qazvinian</author>
<author>Dragomir Radev</author>
</authors>
<title>Scientific Paper Summarization Using Citation Summary Networks.</title>
<date>2008</date>
<tech>COLING</tech>
<marker>Qazvinian, Radev, 2008</marker>
<rawString>Vahed Qazvinian, Dragomir Radev. 2008. Scientific Paper Summarization Using Citation Summary Networks. COLING 2008.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ahmed Hassan</author>
<author>Anthony Fader</author>
<author>Michael Crespin</author>
<author>Kevin Quinn</author>
<author>Burt Monroe</author>
</authors>
<title>Michael Colaresi and Dragomir Radev.</title>
<date>2008</date>
<contexts>
<context position="13839" citStr="Hassan et al., 2008" startWordPosition="2143" endWordPosition="2146">spects of the course and can be done in a reasonable amount of time. The students used the API to accomplish their assignments and projects. This helped them focus on the important concepts rather than diving into fine programming details. Research Clairlib contains implementations for many algorithms and approaches that solve common problems. It also comes with a number of corpora and annotated datasets. This makes it a good resource for researchers to build systems and conduct experiments. Clairlib was successfully used in several research projects. Examples include Political Text Analysis (Hassan et al., 2008), Scientific Paper Summarization (Qazvinian and Radev, 2009), Blog Networks Analysis (Hassan et al., 2009), Protein Interaction Extraction (Ozgur and Radev, 2009), and Citation-Based Summarization (Abu-Jbara and Radev, 2011). 4.1 Examples In this subsection, we present some examples where Clairlib has been used. Example: Protein-Protein Interaction Extraction This is an example of a project that builds an information extraction system and uses Clairlib as its main processing component (Ozgur and Radev, 2009). This system is now part of a larger bioinformatics project, NCIBI. The system uses Cl</context>
</contexts>
<marker>Hassan, Fader, Crespin, Quinn, Monroe, 2008</marker>
<rawString>Ahmed Hassan, Anthony Fader, Michael Crespin, Kevin Quinn, Burt Monroe, Michael Colaresi and Dragomir Radev. 2008. Tracking the Dynamic Evolution of Participants Salience in a Discussion. COLING 2008.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Eugene Charniak</author>
</authors>
<title>A Maximum-Entropy-Inspired Parser.</title>
<date>2000</date>
<booktitle>Proceedings of NAACL-2000.</booktitle>
<contexts>
<context position="5342" citStr="Charniak, 2000" startWordPosition="826" endWordPosition="827">s and perform the basic processing tasks. For example, Clair::Document defines a data structure for holding textual data in various formats, and performs the basic text processing tasks such as tokenization, stemming, tag stripping, etc. Another set of modules perform more specific tasks in the three areas of focus (NLP, IR, and NA). For example, Clair::Bio::GIN::Interaction is devoted to protein-protein interaction extraction from biomedical text. A third set contains modules that interface Clairlib to external tools. For example, Clair::Utils::Parse provides an interface to Charniak parser (Charniak, 2000), Stanford parser (Klein and Manning, 2003), and Chunklink2. Each module has a well-defined API. The API is oriented to developers to help them write applications and build systems on top of Clairlib modules; and to researchers to help them write applications and setup custom experiments for their research. 2http://ilk.uvt.nl/team/sabine/chunklink/README.html 2.2 Command-line Interface The command-line interface provides an easy access to many of the tasks that Clairlib modules implement. It provides more than 50 different commands. Each command is documented and demonstrated in one or more tu</context>
</contexts>
<marker>Charniak, 2000</marker>
<rawString>Eugene Charniak. 2000. A Maximum-Entropy-Inspired Parser. Proceedings of NAACL-2000.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Dan Klein</author>
<author>Christopher Manning</author>
</authors>
<title>Accurate Unlexicalized Parsing.</title>
<date>2003</date>
<booktitle>Proceedings of ACL-2003.</booktitle>
<contexts>
<context position="5385" citStr="Klein and Manning, 2003" startWordPosition="830" endWordPosition="833"> tasks. For example, Clair::Document defines a data structure for holding textual data in various formats, and performs the basic text processing tasks such as tokenization, stemming, tag stripping, etc. Another set of modules perform more specific tasks in the three areas of focus (NLP, IR, and NA). For example, Clair::Bio::GIN::Interaction is devoted to protein-protein interaction extraction from biomedical text. A third set contains modules that interface Clairlib to external tools. For example, Clair::Utils::Parse provides an interface to Charniak parser (Charniak, 2000), Stanford parser (Klein and Manning, 2003), and Chunklink2. Each module has a well-defined API. The API is oriented to developers to help them write applications and build systems on top of Clairlib modules; and to researchers to help them write applications and setup custom experiments for their research. 2http://ilk.uvt.nl/team/sabine/chunklink/README.html 2.2 Command-line Interface The command-line interface provides an easy access to many of the tasks that Clairlib modules implement. It provides more than 50 different commands. Each command is documented and demonstrated in one or more tutorials. The function of each command can b</context>
</contexts>
<marker>Klein, Manning, 2003</marker>
<rawString>Dan Klein and Christopher Manning. 2003. Accurate Unlexicalized Parsing. Proceedings of ACL-2003.</rawString>
</citation>
<citation valid="false">
<title>Amjad Abu-Jbara and Dragomir Radev 2011. Coherent Citation-based Summarization of Scientific Papers</title>
<booktitle>Proceedings of ACL-2011.</booktitle>
<marker></marker>
<rawString>Amjad Abu-Jbara and Dragomir Radev 2011. Coherent Citation-based Summarization of Scientific Papers Proceedings of ACL-2011.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Cunningham</author>
<author>D Maynard</author>
<author>K Bontcheva</author>
<author>V Tablan</author>
</authors>
<date>2002</date>
<booktitle>GATE: A Framework and Graphical Development Environment for Robust NLP Tools and Applications Proceedings ofACL-2002,</booktitle>
<location>Philadelphia.</location>
<contexts>
<context position="1904" citStr="Cunningham et al., 2002" startWordPosition="293" endWordPosition="297">programming assignments and projects for their students. A large number of systems have been developed over the years to solve problems and perform tasks in Natural Language Processing, Information Retrieval, or Network Analysis. Many of these systems perform specific tasks such as parsing, Graph Partitioning, co-reference resolution, web crawling etc. Some other systems are frameworks for performing generic tasks in one area of focus such as Dragomir Radev EECS Department and School of Information University of Michigan Ann Arbor, MI, USA radev@umich.edu NLTK (Bird and Loper, 2004) and GATE (Cunningham et al., 2002) for Natural Language Processing; Pajek (Batagelj and Mrvar, 2003) and GUESS (Adar, 2006) for Network Analysis and Visualization; and Lemur1 for Language Modeling and Information Retrieval. This paper presents Clairlib, an open-source toolkit that contains a suit of modules for generic tasks in Natural Language Processing (NLP), Information Retrieval (IR), and Network Analysis (NA). While many systems have been developed to address tasks or subtasks in one of these areas as we have just mentioned, Clairlib provides one integrated environment that addresses tasks in the three areas. This makes </context>
</contexts>
<marker>Cunningham, Maynard, Bontcheva, Tablan, 2002</marker>
<rawString>H. Cunningham and D. Maynard and K. Bontcheva and V. Tablan 2002. GATE: A Framework and Graphical Development Environment for Robust NLP Tools and Applications Proceedings ofACL-2002, Philadelphia.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Steven Bird</author>
<author>Edward Loper</author>
</authors>
<title>NLTK: The Natural Language Toolkit</title>
<date>2004</date>
<booktitle>Proceedings of ACL-2004.</booktitle>
<contexts>
<context position="1869" citStr="Bird and Loper, 2004" startWordPosition="287" endWordPosition="290">ns and for setting up practical programming assignments and projects for their students. A large number of systems have been developed over the years to solve problems and perform tasks in Natural Language Processing, Information Retrieval, or Network Analysis. Many of these systems perform specific tasks such as parsing, Graph Partitioning, co-reference resolution, web crawling etc. Some other systems are frameworks for performing generic tasks in one area of focus such as Dragomir Radev EECS Department and School of Information University of Michigan Ann Arbor, MI, USA radev@umich.edu NLTK (Bird and Loper, 2004) and GATE (Cunningham et al., 2002) for Natural Language Processing; Pajek (Batagelj and Mrvar, 2003) and GUESS (Adar, 2006) for Network Analysis and Visualization; and Lemur1 for Language Modeling and Information Retrieval. This paper presents Clairlib, an open-source toolkit that contains a suit of modules for generic tasks in Natural Language Processing (NLP), Information Retrieval (IR), and Network Analysis (NA). While many systems have been developed to address tasks or subtasks in one of these areas as we have just mentioned, Clairlib provides one integrated environment that addresses ta</context>
</contexts>
<marker>Bird, Loper, 2004</marker>
<rawString>Steven Bird and Edward Loper. 2004. NLTK: The Natural Language Toolkit Proceedings of ACL-2004.</rawString>
</citation>
<citation valid="true">
<authors>
<author>V Batagelj</author>
<author>A Mrvar</author>
</authors>
<title>Pajek - Analysis and Visualization of Large Networks</title>
<date>2003</date>
<publisher>Springer,</publisher>
<location>Berlin. Eytan Adar.</location>
<contexts>
<context position="1970" citStr="Batagelj and Mrvar, 2003" startWordPosition="304" endWordPosition="307">number of systems have been developed over the years to solve problems and perform tasks in Natural Language Processing, Information Retrieval, or Network Analysis. Many of these systems perform specific tasks such as parsing, Graph Partitioning, co-reference resolution, web crawling etc. Some other systems are frameworks for performing generic tasks in one area of focus such as Dragomir Radev EECS Department and School of Information University of Michigan Ann Arbor, MI, USA radev@umich.edu NLTK (Bird and Loper, 2004) and GATE (Cunningham et al., 2002) for Natural Language Processing; Pajek (Batagelj and Mrvar, 2003) and GUESS (Adar, 2006) for Network Analysis and Visualization; and Lemur1 for Language Modeling and Information Retrieval. This paper presents Clairlib, an open-source toolkit that contains a suit of modules for generic tasks in Natural Language Processing (NLP), Information Retrieval (IR), and Network Analysis (NA). While many systems have been developed to address tasks or subtasks in one of these areas as we have just mentioned, Clairlib provides one integrated environment that addresses tasks in the three areas. This makes it useful for a wide range of applications within and across the t</context>
</contexts>
<marker>Batagelj, Mrvar, 2003</marker>
<rawString>V. Batagelj and A. Mrvar 2003. Pajek - Analysis and Visualization of Large Networks Springer, Berlin. Eytan Adar. 2006. GUESS: A Language and Interface for Graph Exploration CHI 2006.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>