<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.029427">
<note confidence="0.805083">
Computational Linguistics Volume 21, Number 1
</note>
<title confidence="0.981829">
The Functional Treatment of Parsing
</title>
<author confidence="0.797626">
René Leermakers
</author>
<affiliation confidence="0.843186">
(Institute for Perception Research, Eindhoven)
Dordrecht: Kluwer Academic
Publishers (The Kluwer international
</affiliation>
<bodyText confidence="0.806257428571429">
series in engineering and computer
science; Natural language processing
and machine translation, edited by
Jaime Carbonell, volume 242), 1993,
xvi + 158 pp.
Hardbound, ISBN 0-7923-9376-7, $79.95,
£57.50, Dfl 160.00
</bodyText>
<figure confidence="0.811309">
Reviewed by
Yves Schabes
Mitsubishi Electric Research Laboratories
</figure>
<bodyText confidence="0.99996634375">
The study and implementation of parsing technologies are traditionally thought of as
the foundation of two apparently unrelated fields, namely, programming languages
and natural language processing. These two fields have often been seen as addressing
problems on two different ends of a spectrum. Programming languages have an un-
ambiguous syntax and can be processed deterministically, whereas natural languages
are ambiguous. Although the two fields can be seen as unrelated in this respect, they
share the study of parsing technologies. Modern programming language design relies
heavily on grammatical frameworks and their parsing algorithms for syntactic and
semantic analysis. Similarly, natural language systems rely on formalisms and their
parsing algorithms. As a computational linguist, one should be well aware of the pars-
ing methods of the 1960s and onward. Functional programming has recently gained
popularity in the programming language community. In natural language processing,
the statement of parsing algorithms in a functional notation and the use of memoiza-
tion to handle non-determinism in parsing algorithms (Norvig 1991) are analogous to
this direction.
This book presents a functional treatment of parsing. Most well-known parsing
algorithms for programming languages and natural languages are represented uni-
formly in a functional notation. The presentation relies heavily on new notations and
simple mathematical concepts. The first chapters introduce a notation, &amp;quot;bunch&amp;quot; nota-
tion, for sets and their constructs. Then, an algorithmic interpretation for the previ-
ously defined language is defined. Leermakers achieves a tour de force: each (possibly
non-deterministic) parsing algorithm is represented in a compact functional notation
whose algorithmic interpretation yields an implementation of the algorithm. The inter-
pretation of context-free grammars is stated in a similar style using the bunch notation.
Traditional top-down parsing is stated in functional notation. The algorithmic interpre-
tation of this functional notation yields a cubic-time parser for bilinear (at most binary
branching) non—left-recursive grammars. Algorithmic conversions between top-down
and bottom-up algorithms are presented as a grammar transformation that turns a
grammar into a bilinear form in which left recursion has been eliminated. The top-
down evaluation of the transformed grammar can be seen as a &amp;quot;bottom-up&amp;quot; parser
reminiscent of a generalized left-corner parser. The approach is generalized to context-
free grammars with regular expressions on the right-hand side. Then, the recognizer
</bodyText>
<page confidence="0.990024">
112
</page>
<subsectionHeader confidence="0.893012">
Book Reviews
</subsectionHeader>
<bodyText confidence="0.999938607843137">
previously defined is extended to a parser with the use of parse forests for recovering
derivations. Attribute grammars and the well-known LR parsing algorithm are also
described. The last chapter consists of miscellaneous notes in the form of comments
and bibliographical references.
Overall, the book is mostly consistent and well written. The content is rich, and I
would recommend it to anyone interested in parsing algorithms. However, the style
chosen for mathematical argumentation requires an attentive, nonlinear study. The
definitions are clear syntactically, but they make sense only after reading the context in
which they are used. The reader should also be aware that linguistics is not discussed.
Some readers may actually be offended by the grammar used for illustrating context-
free grammars, which treats intransitive verbs as transitive verbs with the empty string
substituted as complement.
The functional paradigm is not well motivated. The book would also have been
much stronger had experiments and details of implementation been included. Without
this, one may wonder whether the proposed approach is of only mathematical interest.
The fact that some complexity analysis given in the book takes into account only the
length of the input and not the size of the grammar makes this problem even more
acute. Also, the complexity of the most general parser, the left-corner (recursive ascent)
parser is analyzed as O(I Glpqn3), where 1G I is the size of the grammar, p is the number
of non-terminals, and q is the number of items of the form C —&gt; X • 5 with the same X.
This is bigger than O(1 GIn3), which is the complexity of standard context-free grammar
parsers, such as the CKY parser (Kasami 1965), the parser described by Graham, Harri-
son, and Ruzzo (1980), or efficient implementations of Earley&apos;s algorithm (Earley 1970).
Most of the references to previous work are found in the notes of the last chapter.
Although they are adequate, some important references are missing. For example,
the grammar transformation used for eliminating left recursion is very similar to the
one described by Rosenkrantz and Lewis (1970) and Rosenkrantz (1967). Similarly,
the interpretation of context-free grammars given in the book is similar to that using
equations on languages (Chomsky and Schiitzenberger 1963), which is also described
in numerous textbooks, such as Salomaa and Soittola 1978, and Gross and Lentin 1970.
The book is mostly free of editorial inconsistencies or errors. Some slipped through,
however. For example, on page 55, the caption of Figure 5.3 should refer to Figure 3.1
instead of Figure 1.2.
Moreover, three different notations for context-free grammars are used. On page 16,
a grammar rule is represented as a pair (A, a), which states that the non-terminal A
can be rewritten as the string of symbols a. However, when the interpretation of a
grammar is given, on page 22, the pair (A, n) represents that the string 7/ can be de-
rived from the non-terminal A. Then, a grammar rule (A, np) —› (X, 77)(Y, p) states that
the non-terminal A can be rewritten as X Y and that the derived string from A (np) is
the concatenation of the one from x (n) and the one from Y (p). Later, a context-free
rule is written as A --4 X Y.
Although most of the book is mathematically rigorous, there are a few cases where
more rigor would have been appropriate. On pages 18 and 19, the existence and the
uniqueness of the smallest solution for the interpretation of context-free grammars are
proven very casually. Checking the applicability of Tarski&apos;s fixed-point theorem (Tarski
1955) on complete partial orders would have been one way to solve this question.
The existence of a complete partial order in which the functions used are continuous
would have guaranteed the existence and the uniqueness of the solution. Another
way to prove this fact would have been to check the applicability of Banach&apos;s fixed-
point theorem for contracting mapping in complete metric spaces (Banach 1922), as is
usually done for formal power series (Chomsky and Schiitzenberger 1963).
</bodyText>
<page confidence="0.997601">
113
</page>
<note confidence="0.66557">
Computational Linguistics Volume 21, Number 1
</note>
<bodyText confidence="0.99981792">
Although most of the book follows a rigorous mathematical argumentation, the
reader is from time to time entertained by casual, poetic, and Persian Gulf–inspired
diversions such as these:
The above gives already a fairly complete picture of context-free gram-
mars—complete enough, in fact, for understanding much of this book.
Chapter 3 describes the same concept in a pedantic way. (pp. 4-5)
Context-free grammars are usually presented as one level in the Chom-
sky hierarchy of rewriting grammars [Chomsky, 19591. This is a very
one-sided way to depict context-free grammars, however. The formal-
ism of context-free grammars is like a piece of art that can be placed
in any of a great number of art styles but never really fits in. (p. 29)
In theoretical settings, the treatment of rules with regular expressions
is often a bit cumbersome. Hence, it is tempting to dismiss regular ex-
pressions with the excuse that they do not add to the weak generative
power anyway. To make up for our succumbing to this temptation, we
show in this section how to generalize results for normal context-free
grammar to EBNF grammars. (p. 70)
The way context-free grammars have been formally introduced is un-
conventional. Normally, they are presented as rewriting systems—as
one level in the Chomsky hierarchy (see [Chomsky, 19591). I always
felt uneasy about this injustice: the formalism of context-free gram-
mars is not part of one hierarchy; it is the mother of all grammar
hierarchies. Therefore, I decided to start differently. (p. 143)
In conclusion, those familiar with parsing algorithms will enjoy reading this book.
However, it may not be appropriate as an introduction to parsing algorithms.
</bodyText>
<sectionHeader confidence="0.621382" genericHeader="abstract">
References
</sectionHeader>
<bodyText confidence="0.9055606">
Banach, Stefan (1922). &amp;quot;Sur les operations
dans les ensembles abstraits et leurs
applications aux equations integrales.&amp;quot;
Fundamenta Mathematicae 3:7-33.
Chomsky, Noam and Schtitzenberger, Marcel
Paul (1963). &amp;quot;The algebraic theory of
context-free languages.&amp;quot; In Computer
Programming and Formal Systems, edited by
P. Braffort and D. Hirschberg. Amsterdam:
North-Holland.
</bodyText>
<reference confidence="0.99315027027027">
Earley, Jay C. (1970). &amp;quot;An efficient
context-free parsing algorithm.&amp;quot;
Communications of the ACM 13(2):94---102.
Graham, Susan L.; Harrison, Michael A.; and
Ruzzo, Walter L. (1980). &amp;quot;An improved
context-free recognizer.&amp;quot; ACM Transactions
on Programming Languages and Systems
2(3):415-462.
Gross, Maurice and Lentin, André (1970).
Introduction to Formal Grammars. 196-215.
New York: Springer-Verlag.
Kasami, Tadao (1965). &amp;quot;An efficient
recognition and syntax algorithm for
context-free languages.&amp;quot; Technical Report
AF-CRL-65-758, Air Force Cambridge
Research Laboratory, Bedford,
Massachusetts.
Norvig, Peter (1991). &amp;quot;Techniques for
automatic memoization with applications
to context-free parsing.&amp;quot; Computational
Linguistics 17(1):91-98.
Rosenkrantz, Daniel J. (1967). &amp;quot;Matrix
equations and normal forms for
context-free grammars.&amp;quot; Journal of the
Association for Computing Machinery
14(3):501-507.
Rosenkrantz, Daniel J. and Lewis, Philip M.,
11 (1970). &amp;quot;Deterministic left corner
parsing.&amp;quot; In IEEE Conference Record of the
11th Annual Symposium on Switching and
Automata Theory. 139-152.
Salomaa, Arto, and Soittola, Matti (1978).
Automata-Theoretic Aspects of Formal Power
Series. New York: Springer-Verlag.
Tarski, Alfred (1955). &amp;quot;A lattice-theoretical
fixpoint theorem and its applications.&amp;quot;
Pacific Journal of Mathematics 5:285-309.
</reference>
<page confidence="0.994708">
114
</page>
<subsectionHeader confidence="0.443185">
Book Reviews
</subsectionHeader>
<bodyText confidence="0.590885166666667">
Yves Schabes is a research scientist at Mitsubishi Electric Research Laboratories. In his thesis
work and as a research associate at the University of Pennsylvania, he led the design and
implementation of a wide-coverage tree-adjoining grammar for English. He has designed a
number of other grammars and parsing algorithms and has investigated statistical models for
natural language processing. Schabes&apos;s address is Mitsubishi Electric Research Laboratories, 201
Broadway, Cambridge, MA 02139. E-mail: schabes@merl.com
</bodyText>
<page confidence="0.998721">
115
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.009031">
<title confidence="0.87141">Computational Linguistics Volume 21, Number 1 The Functional Treatment of Parsing René Leermakers</title>
<affiliation confidence="0.747327333333333">(Institute for Perception Research, Eindhoven) Dordrecht: Kluwer Academic Publishers (The Kluwer international</affiliation>
<abstract confidence="0.850450666666667">series in engineering and computer science; Natural language processing and machine translation, edited by</abstract>
<note confidence="0.7738734">Jaime Carbonell, volume 242), 1993, xvi + 158 pp. Hardbound, ISBN 0-7923-9376-7, $79.95, £57.50, Dfl 160.00 Reviewed by</note>
<author confidence="0.789703">Yves Schabes</author>
<affiliation confidence="0.79659">Mitsubishi Electric Research Laboratories</affiliation>
<abstract confidence="0.99792912962963">The study and implementation of parsing technologies are traditionally thought of as the foundation of two apparently unrelated fields, namely, programming languages and natural language processing. These two fields have often been seen as addressing problems on two different ends of a spectrum. Programming languages have an unambiguous syntax and can be processed deterministically, whereas natural languages are ambiguous. Although the two fields can be seen as unrelated in this respect, they share the study of parsing technologies. Modern programming language design relies heavily on grammatical frameworks and their parsing algorithms for syntactic and semantic analysis. Similarly, natural language systems rely on formalisms and their parsing algorithms. As a computational linguist, one should be well aware of the parsing methods of the 1960s and onward. Functional programming has recently gained popularity in the programming language community. In natural language processing, the statement of parsing algorithms in a functional notation and the use of memoization to handle non-determinism in parsing algorithms (Norvig 1991) are analogous to this direction. This book presents a functional treatment of parsing. Most well-known parsing algorithms for programming languages and natural languages are represented uniformly in a functional notation. The presentation relies heavily on new notations and simple mathematical concepts. The first chapters introduce a notation, &amp;quot;bunch&amp;quot; notation, for sets and their constructs. Then, an algorithmic interpretation for the previously defined language is defined. Leermakers achieves a tour de force: each (possibly non-deterministic) parsing algorithm is represented in a compact functional notation whose algorithmic interpretation yields an implementation of the algorithm. The interpretation of context-free grammars is stated in a similar style using the bunch notation. Traditional top-down parsing is stated in functional notation. The algorithmic interpretation of this functional notation yields a cubic-time parser for bilinear (at most binary branching) non—left-recursive grammars. Algorithmic conversions between top-down and bottom-up algorithms are presented as a grammar transformation that turns a grammar into a bilinear form in which left recursion has been eliminated. The topdown evaluation of the transformed grammar can be seen as a &amp;quot;bottom-up&amp;quot; parser reminiscent of a generalized left-corner parser. The approach is generalized to contextfree grammars with regular expressions on the right-hand side. Then, the recognizer 112 Book Reviews previously defined is extended to a parser with the use of parse forests for recovering derivations. Attribute grammars and the well-known LR parsing algorithm are also described. The last chapter consists of miscellaneous notes in the form of comments and bibliographical references. Overall, the book is mostly consistent and well written. The content is rich, and I would recommend it to anyone interested in parsing algorithms. However, the style chosen for mathematical argumentation requires an attentive, nonlinear study. The definitions are clear syntactically, but they make sense only after reading the context in which they are used. The reader should also be aware that linguistics is not discussed. Some readers may actually be offended by the grammar used for illustrating contextfree grammars, which treats intransitive verbs as transitive verbs with the empty string substituted as complement. The functional paradigm is not well motivated. The book would also have been much stronger had experiments and details of implementation been included. Without this, one may wonder whether the proposed approach is of only mathematical interest. The fact that some complexity analysis given in the book takes into account only the length of the input and not the size of the grammar makes this problem even more acute. Also, the complexity of the most general parser, the left-corner (recursive ascent) is analyzed as O(I 1G I is the size of the grammar, the number non-terminals, and the number of items of the form X • the same X.</abstract>
<note confidence="0.613817666666667">is bigger than O(1 is the complexity of standard context-free grammar parsers, such as the CKY parser (Kasami 1965), the parser described by Graham, Harrison, and Ruzzo (1980), or efficient implementations of Earley&apos;s algorithm (Earley 1970).</note>
<abstract confidence="0.963762962962963">Most of the references to previous work are found in the notes of the last chapter. Although they are adequate, some important references are missing. For example, the grammar transformation used for eliminating left recursion is very similar to the one described by Rosenkrantz and Lewis (1970) and Rosenkrantz (1967). Similarly, the interpretation of context-free grammars given in the book is similar to that using equations on languages (Chomsky and Schiitzenberger 1963), which is also described in numerous textbooks, such as Salomaa and Soittola 1978, and Gross and Lentin 1970. The book is mostly free of editorial inconsistencies or errors. Some slipped through, however. For example, on page 55, the caption of Figure 5.3 should refer to Figure 3.1 instead of Figure 1.2. Moreover, three different notations for context-free grammars are used. On page 16, grammar rule is represented as a pair a), states that the non-terminal A can be rewritten as the string of symbols a. However, when the interpretation of a is given, on page 22, the pair that the string be defrom the non-terminal A. Then, a grammar rule np) —› (X, 77)(Y, p) that non-terminal be rewritten as Y that the derived string from A concatenation of the one from the one from (p). a context-free is written as --4 X Although most of the book is mathematically rigorous, there are a few cases where more rigor would have been appropriate. On pages 18 and 19, the existence and the uniqueness of the smallest solution for the interpretation of context-free grammars are proven very casually. Checking the applicability of Tarski&apos;s fixed-point theorem (Tarski 1955) on complete partial orders would have been one way to solve this question. The existence of a complete partial order in which the functions used are continuous would have guaranteed the existence and the uniqueness of the solution. Another way to prove this fact would have been to check the applicability of Banach&apos;s fixedpoint theorem for contracting mapping in complete metric spaces (Banach 1922), as is usually done for formal power series (Chomsky and Schiitzenberger 1963). 113 Computational Linguistics Volume 21, Number 1 Although most of the book follows a rigorous mathematical argumentation, the reader is from time to time entertained by casual, poetic, and Persian Gulf–inspired diversions such as these: The above gives already a fairly complete picture of context-free grammars—complete enough, in fact, for understanding much of this book. Chapter 3 describes the same concept in a pedantic way. (pp. 4-5) Context-free grammars are usually presented as one level in the Chomsky hierarchy of rewriting grammars [Chomsky, 19591. This is a very one-sided way to depict context-free grammars, however. The formalism of context-free grammars is like a piece of art that can be placed in any of a great number of art styles but never really fits in. (p. 29) In theoretical settings, the treatment of rules with regular expressions is often a bit cumbersome. Hence, it is tempting to dismiss regular expressions with the excuse that they do not add to the weak generative power anyway. To make up for our succumbing to this temptation, we show in this section how to generalize results for normal context-free grammar to EBNF grammars. (p. 70) The way context-free grammars have been formally introduced is unconventional. Normally, they are presented as rewriting systems—as one level in the Chomsky hierarchy (see [Chomsky, 19591). I always felt uneasy about this injustice: the formalism of context-free grammars is not part of one hierarchy; it is the mother of all grammar hierarchies. Therefore, I decided to start differently. (p. 143) In conclusion, those familiar with parsing algorithms will enjoy reading this book.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Jay C Earley</author>
</authors>
<title>An efficient context-free parsing algorithm.&amp;quot;</title>
<date>1970</date>
<journal>Communications of the ACM</journal>
<pages>13--2</pages>
<contexts>
<context position="4960" citStr="Earley 1970" startWordPosition="733" endWordPosition="734">the length of the input and not the size of the grammar makes this problem even more acute. Also, the complexity of the most general parser, the left-corner (recursive ascent) parser is analyzed as O(I Glpqn3), where 1G I is the size of the grammar, p is the number of non-terminals, and q is the number of items of the form C —&gt; X • 5 with the same X. This is bigger than O(1 GIn3), which is the complexity of standard context-free grammar parsers, such as the CKY parser (Kasami 1965), the parser described by Graham, Harrison, and Ruzzo (1980), or efficient implementations of Earley&apos;s algorithm (Earley 1970). Most of the references to previous work are found in the notes of the last chapter. Although they are adequate, some important references are missing. For example, the grammar transformation used for eliminating left recursion is very similar to the one described by Rosenkrantz and Lewis (1970) and Rosenkrantz (1967). Similarly, the interpretation of context-free grammars given in the book is similar to that using equations on languages (Chomsky and Schiitzenberger 1963), which is also described in numerous textbooks, such as Salomaa and Soittola 1978, and Gross and Lentin 1970. The book is </context>
</contexts>
<marker>Earley, 1970</marker>
<rawString>Earley, Jay C. (1970). &amp;quot;An efficient context-free parsing algorithm.&amp;quot; Communications of the ACM 13(2):94---102.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Susan L Graham</author>
<author>Michael A Harrison</author>
<author>Walter L Ruzzo</author>
</authors>
<title>An improved context-free recognizer.&amp;quot;</title>
<date>1980</date>
<journal>ACM Transactions on Programming Languages and Systems</journal>
<pages>2--3</pages>
<marker>Graham, Harrison, Ruzzo, 1980</marker>
<rawString>Graham, Susan L.; Harrison, Michael A.; and Ruzzo, Walter L. (1980). &amp;quot;An improved context-free recognizer.&amp;quot; ACM Transactions on Programming Languages and Systems 2(3):415-462.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Maurice Gross</author>
<author>André Lentin</author>
</authors>
<title>Introduction to Formal Grammars.</title>
<date>1970</date>
<pages>196--215</pages>
<publisher>Springer-Verlag.</publisher>
<location>New York:</location>
<contexts>
<context position="5546" citStr="Gross and Lentin 1970" startWordPosition="821" endWordPosition="824">of Earley&apos;s algorithm (Earley 1970). Most of the references to previous work are found in the notes of the last chapter. Although they are adequate, some important references are missing. For example, the grammar transformation used for eliminating left recursion is very similar to the one described by Rosenkrantz and Lewis (1970) and Rosenkrantz (1967). Similarly, the interpretation of context-free grammars given in the book is similar to that using equations on languages (Chomsky and Schiitzenberger 1963), which is also described in numerous textbooks, such as Salomaa and Soittola 1978, and Gross and Lentin 1970. The book is mostly free of editorial inconsistencies or errors. Some slipped through, however. For example, on page 55, the caption of Figure 5.3 should refer to Figure 3.1 instead of Figure 1.2. Moreover, three different notations for context-free grammars are used. On page 16, a grammar rule is represented as a pair (A, a), which states that the non-terminal A can be rewritten as the string of symbols a. However, when the interpretation of a grammar is given, on page 22, the pair (A, n) represents that the string 7/ can be derived from the non-terminal A. Then, a grammar rule (A, np) —› (X</context>
</contexts>
<marker>Gross, Lentin, 1970</marker>
<rawString>Gross, Maurice and Lentin, André (1970). Introduction to Formal Grammars. 196-215. New York: Springer-Verlag.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Tadao Kasami</author>
</authors>
<title>An efficient recognition and syntax algorithm for context-free languages.&amp;quot;</title>
<date>1965</date>
<tech>Technical Report AF-CRL-65-758,</tech>
<institution>Air Force Cambridge Research Laboratory,</institution>
<location>Bedford, Massachusetts.</location>
<contexts>
<context position="4834" citStr="Kasami 1965" startWordPosition="715" endWordPosition="716">d approach is of only mathematical interest. The fact that some complexity analysis given in the book takes into account only the length of the input and not the size of the grammar makes this problem even more acute. Also, the complexity of the most general parser, the left-corner (recursive ascent) parser is analyzed as O(I Glpqn3), where 1G I is the size of the grammar, p is the number of non-terminals, and q is the number of items of the form C —&gt; X • 5 with the same X. This is bigger than O(1 GIn3), which is the complexity of standard context-free grammar parsers, such as the CKY parser (Kasami 1965), the parser described by Graham, Harrison, and Ruzzo (1980), or efficient implementations of Earley&apos;s algorithm (Earley 1970). Most of the references to previous work are found in the notes of the last chapter. Although they are adequate, some important references are missing. For example, the grammar transformation used for eliminating left recursion is very similar to the one described by Rosenkrantz and Lewis (1970) and Rosenkrantz (1967). Similarly, the interpretation of context-free grammars given in the book is similar to that using equations on languages (Chomsky and Schiitzenberger 19</context>
</contexts>
<marker>Kasami, 1965</marker>
<rawString>Kasami, Tadao (1965). &amp;quot;An efficient recognition and syntax algorithm for context-free languages.&amp;quot; Technical Report AF-CRL-65-758, Air Force Cambridge Research Laboratory, Bedford, Massachusetts.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Peter Norvig</author>
</authors>
<title>Techniques for automatic memoization with applications to context-free parsing.&amp;quot;</title>
<date>1991</date>
<journal>Computational Linguistics</journal>
<pages>17--1</pages>
<contexts>
<context position="1633" citStr="Norvig 1991" startWordPosition="226" endWordPosition="227">ologies. Modern programming language design relies heavily on grammatical frameworks and their parsing algorithms for syntactic and semantic analysis. Similarly, natural language systems rely on formalisms and their parsing algorithms. As a computational linguist, one should be well aware of the parsing methods of the 1960s and onward. Functional programming has recently gained popularity in the programming language community. In natural language processing, the statement of parsing algorithms in a functional notation and the use of memoization to handle non-determinism in parsing algorithms (Norvig 1991) are analogous to this direction. This book presents a functional treatment of parsing. Most well-known parsing algorithms for programming languages and natural languages are represented uniformly in a functional notation. The presentation relies heavily on new notations and simple mathematical concepts. The first chapters introduce a notation, &amp;quot;bunch&amp;quot; notation, for sets and their constructs. Then, an algorithmic interpretation for the previously defined language is defined. Leermakers achieves a tour de force: each (possibly non-deterministic) parsing algorithm is represented in a compact fun</context>
</contexts>
<marker>Norvig, 1991</marker>
<rawString>Norvig, Peter (1991). &amp;quot;Techniques for automatic memoization with applications to context-free parsing.&amp;quot; Computational Linguistics 17(1):91-98.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Daniel J Rosenkrantz</author>
</authors>
<title>Matrix equations and normal forms for context-free grammars.&amp;quot;</title>
<date>1967</date>
<journal>Journal of the Association for Computing Machinery</journal>
<pages>14--3</pages>
<contexts>
<context position="5280" citStr="Rosenkrantz (1967)" startWordPosition="783" endWordPosition="784">f the form C —&gt; X • 5 with the same X. This is bigger than O(1 GIn3), which is the complexity of standard context-free grammar parsers, such as the CKY parser (Kasami 1965), the parser described by Graham, Harrison, and Ruzzo (1980), or efficient implementations of Earley&apos;s algorithm (Earley 1970). Most of the references to previous work are found in the notes of the last chapter. Although they are adequate, some important references are missing. For example, the grammar transformation used for eliminating left recursion is very similar to the one described by Rosenkrantz and Lewis (1970) and Rosenkrantz (1967). Similarly, the interpretation of context-free grammars given in the book is similar to that using equations on languages (Chomsky and Schiitzenberger 1963), which is also described in numerous textbooks, such as Salomaa and Soittola 1978, and Gross and Lentin 1970. The book is mostly free of editorial inconsistencies or errors. Some slipped through, however. For example, on page 55, the caption of Figure 5.3 should refer to Figure 3.1 instead of Figure 1.2. Moreover, three different notations for context-free grammars are used. On page 16, a grammar rule is represented as a pair (A, a), whic</context>
</contexts>
<marker>Rosenkrantz, 1967</marker>
<rawString>Rosenkrantz, Daniel J. (1967). &amp;quot;Matrix equations and normal forms for context-free grammars.&amp;quot; Journal of the Association for Computing Machinery 14(3):501-507.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Daniel J Rosenkrantz</author>
<author>Philip M Lewis</author>
</authors>
<title>Deterministic left corner parsing.&amp;quot;</title>
<date>1970</date>
<booktitle>In IEEE Conference Record of the 11th Annual Symposium on Switching and Automata Theory.</booktitle>
<pages>139--152</pages>
<contexts>
<context position="5257" citStr="Rosenkrantz and Lewis (1970)" startWordPosition="778" endWordPosition="781">s, and q is the number of items of the form C —&gt; X • 5 with the same X. This is bigger than O(1 GIn3), which is the complexity of standard context-free grammar parsers, such as the CKY parser (Kasami 1965), the parser described by Graham, Harrison, and Ruzzo (1980), or efficient implementations of Earley&apos;s algorithm (Earley 1970). Most of the references to previous work are found in the notes of the last chapter. Although they are adequate, some important references are missing. For example, the grammar transformation used for eliminating left recursion is very similar to the one described by Rosenkrantz and Lewis (1970) and Rosenkrantz (1967). Similarly, the interpretation of context-free grammars given in the book is similar to that using equations on languages (Chomsky and Schiitzenberger 1963), which is also described in numerous textbooks, such as Salomaa and Soittola 1978, and Gross and Lentin 1970. The book is mostly free of editorial inconsistencies or errors. Some slipped through, however. For example, on page 55, the caption of Figure 5.3 should refer to Figure 3.1 instead of Figure 1.2. Moreover, three different notations for context-free grammars are used. On page 16, a grammar rule is represented</context>
</contexts>
<marker>Rosenkrantz, Lewis, 1970</marker>
<rawString>Rosenkrantz, Daniel J. and Lewis, Philip M., 11 (1970). &amp;quot;Deterministic left corner parsing.&amp;quot; In IEEE Conference Record of the 11th Annual Symposium on Switching and Automata Theory. 139-152.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Arto Salomaa</author>
<author>Soittola</author>
</authors>
<title>Automata-Theoretic Aspects of Formal Power Series.</title>
<date>1978</date>
<publisher>Springer-Verlag.</publisher>
<location>Matti</location>
<contexts>
<context position="5519" citStr="Salomaa and Soittola 1978" startWordPosition="816" endWordPosition="819">, or efficient implementations of Earley&apos;s algorithm (Earley 1970). Most of the references to previous work are found in the notes of the last chapter. Although they are adequate, some important references are missing. For example, the grammar transformation used for eliminating left recursion is very similar to the one described by Rosenkrantz and Lewis (1970) and Rosenkrantz (1967). Similarly, the interpretation of context-free grammars given in the book is similar to that using equations on languages (Chomsky and Schiitzenberger 1963), which is also described in numerous textbooks, such as Salomaa and Soittola 1978, and Gross and Lentin 1970. The book is mostly free of editorial inconsistencies or errors. Some slipped through, however. For example, on page 55, the caption of Figure 5.3 should refer to Figure 3.1 instead of Figure 1.2. Moreover, three different notations for context-free grammars are used. On page 16, a grammar rule is represented as a pair (A, a), which states that the non-terminal A can be rewritten as the string of symbols a. However, when the interpretation of a grammar is given, on page 22, the pair (A, n) represents that the string 7/ can be derived from the non-terminal A. Then, a</context>
</contexts>
<marker>Salomaa, Soittola, 1978</marker>
<rawString>Salomaa, Arto, and Soittola, Matti (1978). Automata-Theoretic Aspects of Formal Power Series. New York: Springer-Verlag.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Alfred Tarski</author>
</authors>
<title>A lattice-theoretical fixpoint theorem and its applications.&amp;quot;</title>
<date>1955</date>
<journal>Pacific Journal of Mathematics</journal>
<pages>5--285</pages>
<contexts>
<context position="6718" citStr="Tarski 1955" startWordPosition="1030" endWordPosition="1031">al A. Then, a grammar rule (A, np) —› (X, 77)(Y, p) states that the non-terminal A can be rewritten as X Y and that the derived string from A (np) is the concatenation of the one from x (n) and the one from Y (p). Later, a context-free rule is written as A --4 X Y. Although most of the book is mathematically rigorous, there are a few cases where more rigor would have been appropriate. On pages 18 and 19, the existence and the uniqueness of the smallest solution for the interpretation of context-free grammars are proven very casually. Checking the applicability of Tarski&apos;s fixed-point theorem (Tarski 1955) on complete partial orders would have been one way to solve this question. The existence of a complete partial order in which the functions used are continuous would have guaranteed the existence and the uniqueness of the solution. Another way to prove this fact would have been to check the applicability of Banach&apos;s fixedpoint theorem for contracting mapping in complete metric spaces (Banach 1922), as is usually done for formal power series (Chomsky and Schiitzenberger 1963). 113 Computational Linguistics Volume 21, Number 1 Although most of the book follows a rigorous mathematical argumentat</context>
</contexts>
<marker>Tarski, 1955</marker>
<rawString>Tarski, Alfred (1955). &amp;quot;A lattice-theoretical fixpoint theorem and its applications.&amp;quot; Pacific Journal of Mathematics 5:285-309.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>