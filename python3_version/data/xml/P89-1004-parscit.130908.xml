<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<title confidence="0.659791">
LOGICAL FORMS IN THE
CORE LANGUAGE ENGINE
</title>
<author confidence="0.727589">
Hiyan Alshawi &amp; Jan van Eijck
</author>
<affiliation confidence="0.52265">
SRI International Cambridge Research Centre
</affiliation>
<address confidence="0.714692">
23 Millers Yard, Mill Lane, Cambridge CB2 1RQ, U.K.
</address>
<keyword confidence="0.798849">
Keywords: logical form, natural language, semantics
</keyword>
<sectionHeader confidence="0.957282" genericHeader="abstract">
ABSTRACT
</sectionHeader>
<bodyText confidence="0.9997844">
This paper describes a &apos;Logical Form&apos; target
language for representing the literal mean-
ing of English sentences, and an interme-
diate level of representation (`Quasi Logical
Form&apos;) which engenders a natural separation
between the compositional semantics and the
processes of scoping and reference resolution.
The approach has been implemented in the
SRI Core Language Engine which handles the
English constructions discussed in the paper.
</bodyText>
<sectionHeader confidence="0.998227" genericHeader="introduction">
INTRODUCTION
</sectionHeader>
<bodyText confidence="0.99981824">
The SRI Core Language Engine (CLE) is
a domain independent system for translat-
ing English sentences into formal represen-
tations of their literal meanings which are
capable of supporting reasoning (Alshawi et
a/. 1988). The CLE has two main lev-
els of semantic representation: quasi logical
forms (QLFs), which may in turn be scoped
or unscoped, and fully resolved logical forms
(LFs). The level of quasi logical form is the
target language of the syntax-driven seman-
tic interpretation rules. Transforming QLF
expressions into LF expressions requires (i)
fixing the scopes of all scope-bearing opera-
tors (quantifiers, tense operators, logical op-
erators) and distinguishing distributive read-
ings of noun phrases from collective ones, and
resolving referential expressions such as
definite descriptions, pronouns, indexical ex-
pressions, and underspecified relations.
The QLF level can be regarded as the nat-
ural level of sentence representation resulting
from linguistic analysis that applies composi-
tional semantic interpretation rules indepen-
dently of the influence of context.
</bodyText>
<figure confidence="0.947966">
Sentence
syntax rules
Parse trees
.1J. semantic rules
QLF expressions
4. context
LF expressions
</figure>
<bodyText confidence="0.998816333333333">
The QLF expressions are derived on the ba-
sis of syntactic structure, by means of se-
mantic rules that correspond to the syntax
rules that were used for analysing the sen-
tence. Having QLFs as a well-defined level of
representation allows the problems of com-
positional semantics to be tackled separately
from the problems of scoping and reference
resolution. Our experience so far with the
CLE has shown that this separation can ef-
fectively reduce the complexity of the system
as a whole. Also, the distinction enables us to
avoid multiplying out interpretation possibil-
ities at an early stage. The representation
languages we propose are powerful enough
to give well-motivated translations of a wide
range of English sentences. In the current
version of the CLE this is used to provide a
systematic and coherent coverage of all the
major phrase types of English. To demon-
strate that the semantic representations are
also simple enough for practical natural lan-
guage processing applications, the CLE has
been used as an interface to a purchase order
processing simulator and a database query
system, to be described elsewhere.
In summary, the main contributions of the
</bodyText>
<page confidence="0.996387">
25
</page>
<bodyText confidence="0.9999089375">
work reported in this paper are (i) the intro-
duction of the QLF level to achieve a natural
separation between compositional semantics
and the processes of scoping and reference
resolution, and (ii) the integration of a range
of well-motivated semantic analyses for spe-
cific constructions in a single coherent frame-
work.
We will first motivate our extensions to
first order logic and our distinction between
LF and QLF, then describe the LF language,
illustrating the logical form translations pro-
duced by the CLE for a number of English
constructions, and finally present the addi-
tional constructs of the QLF language and
illustrate their use.
</bodyText>
<sectionHeader confidence="0.9069855" genericHeader="method">
EXTENDING
FIRST ORDER LOGIC
</sectionHeader>
<bodyText confidence="0.99974594117647">
As the pioneer work by Montague (1973) sug-
gests, first order logic is not the most nat-
ural representation for the meanings of En-
glish sentences. The development of Mon-
tague grammar indicates, however, that there
is quite a bit of latitude as to the scope of the
extensions that are needed. In developing
the LF language for the CLE we have tried to
be conservative in our choice of extensions to
first order logic. Earlier proposals with simi-
lar motivation are presented by Moore (1981)
and Schubert &amp; Pelletier (1982).
The ways in which first order logic—
predicate logic in which the quantifiers 3 and
V range over the domain of individuals—is ex-
tended in our treatment can be grouped and
motivated as follows:
</bodyText>
<listItem confidence="0.999909888888889">
• Extensions motivated by lack of ex-
pressive power of ordinary first order
logic: for a general treatment of noun
phrase constructions in English general-
ized quantifiers are needed (`Most A are
B&apos; is not expressible in a first order lan-
guage with just the two one-place pred-
icates A and B).
• Extensions motivated by the desire
</listItem>
<page confidence="0.940636">
26
</page>
<bodyText confidence="0.9540575">
for an elegant compositional semantic
framework:
</bodyText>
<listItem confidence="0.9851858125">
– use of lambda abstraction for the
translation of graded predicates in
our treatment of comparatives and
superlatives;
– use of tense operators and inten-
sional operators for dealing with
the English tense and auxiliary sys-
tem in a compositional way.
• Extensions motivated by the desire to
separate out the problems of scoping
from those of semantic representation.
• Extensions motivated by the need to
deal with context dependent construc-
tions, such as anaphora, and the implicit
relations involved in the interpretation of
possessives and compound nominals.
</listItem>
<bodyText confidence="0.997661532467533">
The first two extensions in the list are part
of the LF language, to be described next, the
other two have to do with QLF constructs.
These QLF constructs are removed by the
processes of quantifier scoping and reference
resolution (see below).
The treatment of tense by means of tempo-
ral operators that is adopted in the CLE will
not be discussed in this paper. Some advan-
tages of an operator treatment of the English
tense system are discussed in (Moore, 1981).
We are aware of the fact that some as-
pects of our LF representation give what are
arguably overly neutral analyses of English
constructions. For example, our uses of event
variables and of sentential tense operators say
little about the internal structure of events or
about an underlying temporal logic. Never-
theless, our hope is that the proposed LF rep-
resentations form a sound basis for the subse-
quent process of deriving the fuller meaning
representations.
RESOLVED Leave(e, john) A Sudden(e))).
LOGICAL FORMS The use of event variables in turn permits
NOTATIONAL CONVENTIONS us to give a uniform interpretation of prepo-
Our notation is a straightforward extension sitional phrases, whether they modify verb
of the standard notation for first order logic. phrases or nouns. For example, John de-
The following logical form expression involv- signed a house in Cambridge has two read-
ing restricted quantification states that every ings, one in which in Cambridge is taken to
dog is nice: modify the noun phrase a house, and one
quant(forall, x, Dog(x), Nice(x)). where the prepositional phrase modifies the
To get a straightforward treatment of the verb phrase, with the following translations
collective/distributive distinction (see below) respectively:
we assume that variables always range over quant(exists,h,
sets, with &apos;normal&apos; individuals corresponding House(h) A In_location(h, Cambridge),
to singletons. Properties like being a dog can past(quant(exists, e, Ev(e),
be true of singletons, e.g. the referent of Fido, Design(e, john,h)))).
as well as larger sets, e.g. the referent of the quant(exists,h, House(h) A
three dogs we saw yesterday. past(quant(exists, e, Ev(e),
The LF language allows formation of com- Design(e, john, h) A
plex predicates by means of lambda abstrac- In_location(e, Cambridge)))).
tion: AxAd.Heavy_degree(x,d) is the predi- In both cases the prepositional phrase is
cate that expresses degree of heaviness. translated as a two-place relation stating that
EVENT AND STATE VARIABLES something is located in some place. Where
Rather than treating modification of verb the noun phrase is modified, the relation is
phrases by means of higher order predicate between an ordinary object and a place; in
modifiers, as in (Montague, 1973), we follow the case where the prepositional phrase mod-
Davidson&apos;s (1967) quantification over events ifies the verb phrase the relation is between
to keep closer to first order logic. The event an event and a place. Adjectives in pred-
corresponding to a verb phrase is introduced icative position give rise to state variables in
as an additional argument to the verb pred- their translations. For example, in the trans-
icate. The full logical form for Every repre- lation of John was happy in Paris, the prepo-
sentative voted is as follows: sitional phrase modifies the state. States are
quant(forall, x, Repr(x), like events, but unlike events they cannot be
past(quant(exists, e, Ev(e), instantaneous.
Vote(e, x)))). GENERALIZED QUANTIFIERS
Informally, this says that for every represen- A generalized quantifier is a relation Q be-
tative, at some past time, there existed an tween two sets A and B, where Q is insensi-
event of that representative voting. tive to anything but the cardinalities of the
The presence of an event variable allows &apos;restriction set&apos; A and the &apos;intersection set&apos;
us to treat optional verb phrase modifiers as A fl B (Barwise &amp; Cooper, 1981). A gen-
predications of events, as in the translation eralized quantifier with restriction set A and
of John left suddenly: intersection set AnB is fully characterized by
past(quant(exists, e, Ev(e), a function AmAn.Q(m, n) of m and n, where
27 m = 1A1 and n = IA n Bl. In the LF lan-
guage of the CLE, these quantifier relations
are expressed by means of predicates on two
numbers, where the first variable abstracted
over denotes the cardinality of the restriction
set and the second one the cardinality of the
intersection set. This allows us to build up
quantifiers for complex specifier phrases like
at least three but less than five. In simple
cases, the quantifier predicates are abbrevi-
ated by means of mnemonic names, such as
exists, notexists, forall or most. Here are
some quantifier translations:
</bodyText>
<listItem confidence="0.9973452">
• most &amp;quot;-+ ArnAn.(m &lt; 2n) [abbreviation:
most].
• at least three but less than seven
AmAn.(n &gt; 3 A n &lt; 7).
• not every -.4. ArnAn.(m n).
</listItem>
<bodyText confidence="0.916530153846154">
A logical form for Not every representative
voted is:
quant(ArnAn.(m n), x, Rep(x),
past(quant(exists,e, Ev(e),
Vote(e, x)))).
Note that in one of the quantifier examples
above the abstraction over the restriction set
is vacuous. The quantifiers that do depend
only on the cardinality of their intersection
set turn out to be in a linguistically well-
defined class: they are the quantifiers that
can occur in the NP position in &amp;quot;There are
NP&amp;quot;. This quantifier class can also be char-
acterized logically, as the class of symmet-
ric quantifiers: &amp;quot;At least three but less than
seven men were running&amp;quot; is true just in case
&amp;quot;At least three but less than seven runners
were men&amp;quot; is true; see (Barwise Sz Cooper,
1981) and (Van Eijck, 1988) for further dis-
cussion. Below the logical forms for symmet-
ric quantifiers will be simplified by omitting
the vacuous lambda binder for the restric-
tion set. The quantifiers for collective and
measure terms, described in the next section,
seem to be symmetric, although linguistic in-
tuitions vary on this.
</bodyText>
<sectionHeader confidence="0.999753" genericHeader="method">
COLLECTIVES AND MEASURE
TERMS
</sectionHeader>
<bodyText confidence="0.999758571428571">
Collective readings are expressed by an ex-
tension of the quantifier notation using set.
The reading of Two companies ordered five
computers where the first noun phrase is in-
terpreted collectively and the second one dis-
tributively is expressed by the following log-
ical form:
</bodyText>
<equation confidence="0.9811862">
quant(set(An.(n = 2)),x, Company(x),
quant(An.(n = 5), y,
Computer(y),
past(quant(exists, e, Ev(e),
Order(e , x,
</equation>
<bodyText confidence="0.977781678571429">
The first quantification expresses that there
is a collection of two companies satisfying
the body of the quantification, so this read-
ing involves five computers and five buy-
ing events. The operator set is introduced
during scoping since collective/distributive
distinctions—like scoping ambiguities—are
not present in the initial QLF.
We have extended the generalized quanti-
fier notation to cover phrases with measure
determiners, such as seven yards of fabric or
a pound of flesh. Where ordinary generalized
quantifiers involve counting, amount gener-
alized quantifiers involve measuring (accord-
ing to some measure along some appropriate
dimension). Our approach, which is related
to proposals that can be found in (Pelletier,
ed.,1979) leads to the following translation
for John bought at least five pounds of ap-
ples:
quant(amount(An.(n &gt; 5), pounds),
Apple(x),
past(quant(exists,e, Ev(e),
Buy(e, john , x))))).
Measure expressions and numerical quanti-
fiers also play a part in the semantics of com-
paratives and superlatives respectively (see
below).
</bodyText>
<sectionHeader confidence="0.96576" genericHeader="method">
NATURAL KINDS
</sectionHeader>
<bodyText confidence="0.999937">
Terms in logical forms may either refer to in-
dividual entities or to natural kinds (Carlson,
1977). Kinds are individuals of a specific na-
ture; the term kind(x,P(x)) can loosely be
interpreted as the typical individual satisfy-
ing P. All properties, including composite
ones, have a corresponding natural kind in
</bodyText>
<page confidence="0.99292">
28
</page>
<bodyText confidence="0.90786">
our formalism. Natural kinds are used in the
translations of examples like John invented
paperclips:
</bodyText>
<equation confidence="0.7510305">
past(quant(exists, e, Ev(e),
Invent(e, john, kind(p, Paperclip(p)))).
</equation>
<bodyText confidence="0.999141833333333">
In reasoning about kinds, the simplest ap-
proach possible would be to have a rule of
inference stating that if a &amp;quot;kind individual&amp;quot;
has a certain property, then all &amp;quot;real world&amp;quot;
individuals of that kind have that property as
well: if the &amp;quot;typical bear&amp;quot; is an animal, then
all real world bears are animals. Of course,
the converse rule does not hold: the &amp;quot;typical
bear&amp;quot; cannot have all the properties that any
real bear has, because then it would have to
be both white all over and brown all over,
and so on.
</bodyText>
<sectionHeader confidence="0.9995735" genericHeader="method">
COMPARATIVES AND SUPERLA-
TIVES
</sectionHeader>
<bodyText confidence="0.93589025">
In the present version of the CLE, compara-
tives and superlatives are formed on the basis
of degree predicates. Intuitively, the mean-
ing of the comparative in Mary is nicer than
John is that one of the two items being com-
pared possesses a property to a higher degree
than the other one, and the meaning of a su-
perlative is that an item possesses a property
to the highest degree among all the items in
a certain set. This intuition is formalised in
(Cresswell, 1976), to which our treatment is
related.
The comparison in Mary is two inches
taller than John is translated as follows:
quant(amount(An.(n = 2), inches),
h, Degree(h),
</bodyText>
<subsubsectionHeader confidence="0.258048">
more( Ax Ad .tall_degree(x , d),
</subsubsectionHeader>
<bodyText confidence="0.990576818181818">
mary, john, h).
The operator more has a graded predicate
as its first argument and three terms as its
second, third and fourth arguments. The op-
erator yields true if the degree to which the
first term satisfies the graded predicate ex-
ceeds the degree to which the second term
satisfies the predicate by the amount speci-
fied in the final term. In this example h is a
degree of height which is measured, in inches,
by the amount quantification. Examples like
Mary is 3 inches less tall than John get sim-
ilar translations. In Mary is taller than John
the quantifier for the degree to which Mary
is taller is simply an existential.
Superlatives are reduced to comparatives
by paraphrasing them in terms of the num-
ber of individuals that have a property to at
least as high a degree as some specific individ-
ual. This technique of comparing pairs allows
us to treat combinations of ordinals and su-
perlatives, as in the third tallest man smiled:
</bodyText>
<equation confidence="0.958906142857143">
quant(ref(the,...), a,
Man(a) A quant(An.(n = 3), b,
Man(b)),
quant(amount(An.(n &gt; 0), units), h,
more()xAd.tall_degree(x, d), b, a, h),
past(quant(exists,e, Ev(e),
Smile(e, a)))))).
</equation>
<bodyText confidence="0.9999128">
The logical form expresses that there are ex-
actly three men whose difference in height
from a (the referent of the definite noun
phrase, see below) is greater than or equal
to 0 in some arbitrary units of measurement.
</bodyText>
<sectionHeader confidence="0.983074" genericHeader="method">
QUASI LOGICAL FORMS
</sectionHeader>
<bodyText confidence="0.999941">
The QLF language is a superset of the LF
language; it contains additional constructs
for unscoped quantifiers, unresolved refer-
ences, and underspecified relations. The
&apos;meaning&apos; of a QLF expression can be
thought of as being given in terms of the
meanings of the set of LF expressions it is
mapped to. Ultimately the meaning of the
QLF expressions can be seen to depend on
the contextual information that is employed
in the processes of scoping and reference res-
olution.
</bodyText>
<sectionHeader confidence="0.975708" genericHeader="method">
UNSCOPED QUANTIFIERS
</sectionHeader>
<bodyText confidence="0.937429">
In the QLF language, unscoped quantifiers
are translated as terms with the format
qterm((quantzfier),(number),
(variable), (restriction)).
</bodyText>
<page confidence="0.995961">
29
</page>
<bodyText confidence="0.9929615">
Coordinated NPs, like a man or a woman,
are translated as terms with the format
</bodyText>
<equation confidence="0.9621475">
term_coord( ( operator) ,( variable) ,
(term), (term)).
</equation>
<bodyText confidence="0.999156333333333">
The unscoped QLF generated by the seman-
tic interpretation rules for Most doctors and
some engineers read every article involves
both qterms and a term_coord (quantifier
scoping generates a number of scoped LFs
from this):
</bodyText>
<equation confidence="0.780101666666667">
quant(exists, e, Ev(e),
Read(e,
term_coord( A, x,
qterm(most, plur, y, Doctor(y)),
qterm(some, plur, z, Engineer(z))),
qterm(every, sing, v, A rt(v)))).
</equation>
<bodyText confidence="0.981919259259259">
Quantifier scoping determines the scopes of
quantifiers and operators, generating scoped
logical forms in a preference order. The or-
dering is determined by a set of declarative
rules expressing linguistic preferences such
as the preference of particular quantifiers to
outscope others. The details of two versions
of the CLE quantifier scoping mechanism are
discussed by Moran (1988) and Pereira (Al-
shawi et a/. 1988).
UNRESOLVED REFERENCES
Unresolved references arising from pronoun
anaphora and definite descriptions are rep-
resented in the QLF as &apos;quasi terms&apos; which
contain internal structure relevant to refer-
ence resolution. These terms are eventually
replaced by ordinary LF terms (constants or
variables) in the final resolved form. A dis-
cussion of the CLE reference resolution pro-
cess and treatment of constraints on pronoun
reference will be given in (Alshawi, in prep.).
Pronouns. The QLF representation of a
pronoun is an anaphoric term (or a_term).
For example, the translations of him and
himself in Mary expected him to introduce
himself are as follows:
a_term(ref(pro, him, sing, [mary]),
</bodyText>
<equation confidence="0.185071">
x, Male(x))
a_term(ref(refl, him, sing, [x,mary]),
y, Male(y)).
</equation>
<bodyText confidence="0.990150961538462">
The first argument of an a_term is akin
to a category containing the values of syn-
tactic and semantic features relevant to ref-
erence resolution, such as those for the
reflexive/non-reflexive and singular/plural
distinctions, and a list of the possible intra-
sentential antecedents, including quantified
antecedents.
Definite Descriptions. Definite descrip-
tions are represented in the QLF as unscoped
quantified terms. The qterm is turned into
a quant by the scoper, and, in the simplest
case, definite descriptions are resolved by in-
stantiating the quant variable in the body
of the quantification. Since it is not possible
to do this for descriptions containing bound
variable anaphora, such descriptions remain
as quantifiers. For example, the QLF gener-
ated for the definite description in Every dog
buried the bone that it found is:
qterm(ref(def, the, sing, 14), sing, y,
Bone(y) A past(quant(exists, e, Ev(e),
Find(e, a_term(reflpro, it, sing, 1.y ,x.1),
to, Impersonal(w)), y)))).
After scoping and reference resolution, the
LF translation of the example is as follows:
</bodyText>
<equation confidence="0.9873334">
quant(forall, x, Dog(x),
quant(exists_one, y,
Bone(y) A past(quant(exists, e, Ev(e),
Find(e, x ,y))),
quant(exists, e&apos;, Ev(e&apos;), Hury(e&apos; , x , y)))).
</equation>
<bodyText confidence="0.941887857142857">
Unbound Anaphoric Terms. When an
argument position in a QLF predication must
co-refer with an anaphoric term, this is indi-
cated as aindex(x), where x is the variable
for the antecedent. For example, because
want is a subject control verb, we have the
following QLF for he wanted to swim:
</bodyText>
<page confidence="0.925188">
30
</page>
<equation confidence="0.9222812">
past(quant(exists, e, Ev(e),
Want(e, a_term(ref(pro, he, sing, []),x,
Male(x)),
quant(exists, e&apos;, Ev(e&apos;),
Swim(e&apos;, aindex(x))))).
</equation>
<bodyText confidence="0.9986214">
If the a_index variable is subsequently re-
solved to a quantified variable or a constant,
then the a_ind ex operator becomes redun-
dant and is deleted from the resulting LF. In
special cases such as the so-called &apos;donkey-
sentences&apos;, however, an anaphoric term may
be resolved to a quantified variable v outside
the scope of the quantifier that binds v. The
LF for Every farmer who owns a dog loves it
provides an example:
</bodyText>
<equation confidence="0.980622333333333">
quant(forall, x,
Farmer(x)A
quant(exists, y, Dog(y),
quant(exists, e, Ev(e), Own(e, x,
quant(exists, e&apos;, Ev(e&apos;),
Love(e&apos; , x, a_index(y)))).
</equation>
<bodyText confidence="0.9998548">
The &apos;unbound dependency&apos; is indicated by an
a_index operator. Dynamic interpretation
of this LF, in the manner proposed in (Groe-
nendijk &amp; Stokhof, 1987), allows us to arrive
at the correct interpretation.
</bodyText>
<sectionHeader confidence="0.992519" genericHeader="method">
UNRESOLVED PREDICATIONS
</sectionHeader>
<bodyText confidence="0.973556176470588">
The use of unresolved terms in QLFs is not
sufficient for covering natural language con-
structs involving implicit relations. We have
therefore included a QLF construct (a_form
for &apos;anaphoric formula&apos;) containing a formula
with an unresolved predicate. This is eventu-
ally replaced by a fully resolved LF formula,
but again the process of resolution is beyond
the scope of this paper.
Implicit Relations. Constructions like
possessives, genitives and compound nouns
are translated into QLF expressions contain-
ing uninstantiated relations introduced by
the a_form relation binder. This binder is
used in the translation of John&apos;s house which
says that a relation, of type poss, holds be-
tween John and the house:
</bodyText>
<page confidence="0.997499">
31
</page>
<reference confidence="0.246538">
qterm(exists, sing, x,
a_form(poss, R, House(x) A R(john, x))).
</reference>
<bodyText confidence="0.997120888888889">
The implicit relation, R, can then be deter-
mined by the reference resolver and instanti-
ated, to Owns or Lives_in say, in the resolved
LF.
The translation of indefinite compound
nominals, such as a telephone socket, involves
an a_form, of type en (for an unrestricted
compound nominal relation), with a &apos;kind&apos;
term:
</bodyText>
<reference confidence="0.655439">
qterm(a, sing, s,
a_form(cn, R, Socket(s) A
R(s, kind(t, Telephone(t)))).
</reference>
<bodyText confidence="0.9323008">
The &apos;kind&apos; term in the translation reflects the
fact that no individual telephone needs to be
involved.
One-Anaphora. The a_form construct is
also used for the QLF representation of
&apos;one-anaphora&apos;. The variable bound by the
a_form has the type of a one place predi-
cate rather than a relation. Resolving these
anaphora involves identifying relevant (parts
of) preceding noun phrase restrictions (Web-
ber, 1979). For example the scoped QLF for
Mary sold him an expensive one is:
quant(exists, x,
a_form(one, P, P(x) A Expensive(x)),
past(quant(exists, e, Ev(e),
Sell(e , mary, , x, a_term(. • .)))).
After resolution (if the sentence were pre-
ceded, say, by John wanted to buy a futon)
the resolved LF would be:
quant(exists, x,
</bodyText>
<sectionHeader confidence="0.597474" genericHeader="method">
Futon(x) A Expensive(x),
past(quant(exists, e, Ev(e),
</sectionHeader>
<bodyText confidence="0.407941">
Sell(e, mary,x,john))).
</bodyText>
<sectionHeader confidence="0.998145" genericHeader="conclusions">
CONCLUSION
</sectionHeader>
<bodyText confidence="0.999993833333333">
We have attempted to evolve the QLF and
LF languages gradually by a process of
adding minimal extensions to first order
logic, in order to facilitate future work on
natural language systems with reasoning ca-
pabilities. The separation of the two seman-
tic representation levels has been an impor-
tant guiding principle in the implementation
of a system covering a substantial fragment
of English semantics in a well-motivated way.
Further work is in progress on the treatment
of collective readings and of tense and aspect.
</bodyText>
<sectionHeader confidence="0.998448" genericHeader="acknowledgments">
ACKNOWLEDGEMENTS
</sectionHeader>
<bodyText confidence="0.999826875">
The research reported in this paper is part
of a group effort to which the following peo-
ple have also contributed: David Carter, Bob
Moore, Doug Moran, Barney Pell, Fernando
Pereira, Steve Pulman and Arnold Smith.
Development of the CLE has been carried out
as part of a research programme in natural-
language processing supported by an Alvey
grant and by members of the NATTIE con-
sortium (British Aerospace, British Telecom,
Hewlett Packard, ICL, Olivetti, Philips, Shell
Research, and SRI). We would like to thank
the Alvey Directorate and the consortium
members for this funding. The paper has
benefitted from comments by Steve Pulman
and three anonymous ACL referees.
</bodyText>
<sectionHeader confidence="0.999745" genericHeader="references">
REFERENCES
</sectionHeader>
<reference confidence="0.999672">
Alshawi, H., D.M. Carter, J. van Eijck, R.C.
Moore, D.B. Moran, F.C.N. Pereira,
S.G. Pulman and A.G. Smith. 1988. In-
terim Report on the SRI Core Language
Engine. Technical Report CCSRC-5,
SRI International, Cambridge Research
Centre, Cambridge, England.
Alshawi, H., in preparation, &amp;quot;Reference Res-
olution In the Core Language Engine&amp;quot;.
Barwise, J. &amp; R. Cooper. 1981. &amp;quot;General-
ized Quantifiers and Natural Language&amp;quot;,
Linguistics and Philosophy, 4, 159-219.
Cresswell, M.J. 1976. &amp;quot;The Semantics of De-
gree&amp;quot;, in: B.H. Partee (ed.), Montague
Grammar, Academic Press, New York,
pp. 261-292.
</reference>
<page confidence="0.667654">
32
</page>
<reference confidence="0.999787170731707">
Carlson, G.N. 1977. &amp;quot;Reference to Kinds in
English&amp;quot;, PhD thesis, available from In-
diana University Linguistics Club.
Davidson, D. 1967. &amp;quot;The Logical Form of
Action Sentences&amp;quot;, in N. Rescher, The
Logic of Decision and Action, University
of Pittsburgh Press, Pittsburgh, Penn-
sylvania.
van Eijck, J. 1988. &amp;quot;Quantification&amp;quot;.
Technical Report CCSRC-7, SRI Inter-
national, Cambridge Research Centre.
Cambridge, England. To appear in
A. von Stechow &amp; D. Wunderlich, Hand-
book of Semantics, De Gruyter, Berlin.
Groenendijk, J. &amp; M. Stokhof 1987. &amp;quot;Dy-
namic Predicate Logic&amp;quot;. Preliminary re-
port, ITLI, Amsterdam.
Montague, R. 1973. &amp;quot;The Proper Treatment
of Quantification in Ordinary English&amp;quot;.
In R. Thomason, ed., Formal Philoso-
phy, Yale University Press, New Haven.
Moore, R.C. 1981. &amp;quot;Problems in Logical
Form&amp;quot;. 19th Annual Meeting of the As-
sociation for Computational Linguistics,
Stanford, California, pp. 117-124.
Moran, D.B. 1988. &amp;quot;Quantifier Scoping in
the SRI Core Language Engine&amp;quot;, 26th
Annual Meeting of the Association for
Computational Linguistics, State Uni-
versity of New York at Buffalo, Buffalo,
New York, pp. 33-40.
Pelletier, F.J. (ed.) 1979. Mass Terms:
Some Philosophical Problems, Reid&amp;
Dordrecht.
Schubert, L.K. Sz F.J. Pelletier 1982. &amp;quot;From
English to Logic: Context-Free Compu-
tation of &apos;Conventional&apos; Logical Trans-
lations&amp;quot;. Americal Journal of Computa-
tional Linguistics, 8, pp. 26-44.
Webber, B. 1979. A Formal Approach to Dis-
course Anaphora, Garland, New York.
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.619351">
<title confidence="0.993001">LOGICAL FORMS IN THE CORE LANGUAGE ENGINE</title>
<author confidence="0.999255">Hiyan Alshawi</author>
<author confidence="0.999255">Jan van_Eijck</author>
<affiliation confidence="0.999933">SRI International Cambridge Research Centre</affiliation>
<address confidence="0.986772">23 Millers Yard, Mill Lane, Cambridge CB2 1RQ, U.K.</address>
<email confidence="0.970007">form,naturallanguage,semantics</email>
<abstract confidence="0.929341">This paper describes a &apos;Logical Form&apos; target language for representing the literal meaning of English sentences, and an intermediate level of representation (`Quasi Logical Form&apos;) which engenders a natural separation between the compositional semantics and the processes of scoping and reference resolution. The approach has been implemented in the SRI Core Language Engine which handles the English constructions discussed in the paper.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="false">
<authors>
<author>qterm</author>
</authors>
<journal>House(x) A R(john, x))). qterm(a, sing, s, a_form(cn, R, Socket(s) A R(s, kind(t, Telephone(t)))).</journal>
<marker>qterm, </marker>
<rawString>qterm(exists, sing, x, a_form(poss, R, House(x) A R(john, x))). qterm(a, sing, s, a_form(cn, R, Socket(s) A R(s, kind(t, Telephone(t)))).</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Alshawi</author>
<author>D M Carter</author>
<author>J van Eijck</author>
<author>R C Moore</author>
<author>D B Moran</author>
<author>F C N Pereira</author>
<author>S G Pulman</author>
<author>A G Smith</author>
</authors>
<title>Interim Report on the SRI Core Language Engine.</title>
<date>1988</date>
<tech>Technical Report CCSRC-5,</tech>
<institution>SRI International, Cambridge Research Centre,</institution>
<location>Cambridge, England.</location>
<marker>Alshawi, Carter, van Eijck, Moore, Moran, Pereira, Pulman, Smith, 1988</marker>
<rawString>Alshawi, H., D.M. Carter, J. van Eijck, R.C. Moore, D.B. Moran, F.C.N. Pereira, S.G. Pulman and A.G. Smith. 1988. Interim Report on the SRI Core Language Engine. Technical Report CCSRC-5, SRI International, Cambridge Research Centre, Cambridge, England.</rawString>
</citation>
<citation valid="false">
<authors>
<author>H Alshawi</author>
</authors>
<title>in preparation, &amp;quot;Reference Resolution In the Core Language Engine&amp;quot;.</title>
<marker>Alshawi, </marker>
<rawString>Alshawi, H., in preparation, &amp;quot;Reference Resolution In the Core Language Engine&amp;quot;.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Barwise</author>
<author>R Cooper</author>
</authors>
<title>Generalized Quantifiers and Natural Language&amp;quot;,</title>
<date>1981</date>
<journal>Linguistics and Philosophy,</journal>
<volume>4</volume>
<pages>159--219</pages>
<contexts>
<context position="9240" citStr="Barwise &amp; Cooper, 1981" startWordPosition="1466" endWordPosition="1469">ional phrase modifies the state. States are quant(forall, x, Repr(x), like events, but unlike events they cannot be past(quant(exists, e, Ev(e), instantaneous. Vote(e, x)))). GENERALIZED QUANTIFIERS Informally, this says that for every represen- A generalized quantifier is a relation Q betative, at some past time, there existed an tween two sets A and B, where Q is insensievent of that representative voting. tive to anything but the cardinalities of the The presence of an event variable allows &apos;restriction set&apos; A and the &apos;intersection set&apos; us to treat optional verb phrase modifiers as A fl B (Barwise &amp; Cooper, 1981). A genpredications of events, as in the translation eralized quantifier with restriction set A and of John left suddenly: intersection set AnB is fully characterized by past(quant(exists, e, Ev(e), a function AmAn.Q(m, n) of m and n, where 27 m = 1A1 and n = IA n Bl. In the LF language of the CLE, these quantifier relations are expressed by means of predicates on two numbers, where the first variable abstracted over denotes the cardinality of the restriction set and the second one the cardinality of the intersection set. This allows us to build up quantifiers for complex specifier phrases lik</context>
</contexts>
<marker>Barwise, Cooper, 1981</marker>
<rawString>Barwise, J. &amp; R. Cooper. 1981. &amp;quot;Generalized Quantifiers and Natural Language&amp;quot;, Linguistics and Philosophy, 4, 159-219.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M J Cresswell</author>
</authors>
<title>The Semantics of Degree&amp;quot;,</title>
<date>1976</date>
<pages>261--292</pages>
<editor>in: B.H. Partee (ed.), Montague Grammar,</editor>
<publisher>Academic Press,</publisher>
<location>New York,</location>
<contexts>
<context position="14190" citStr="Cresswell, 1976" startWordPosition="2284" endWordPosition="2285">e properties that any real bear has, because then it would have to be both white all over and brown all over, and so on. COMPARATIVES AND SUPERLATIVES In the present version of the CLE, comparatives and superlatives are formed on the basis of degree predicates. Intuitively, the meaning of the comparative in Mary is nicer than John is that one of the two items being compared possesses a property to a higher degree than the other one, and the meaning of a superlative is that an item possesses a property to the highest degree among all the items in a certain set. This intuition is formalised in (Cresswell, 1976), to which our treatment is related. The comparison in Mary is two inches taller than John is translated as follows: quant(amount(An.(n = 2), inches), h, Degree(h), more( Ax Ad .tall_degree(x , d), mary, john, h). The operator more has a graded predicate as its first argument and three terms as its second, third and fourth arguments. The operator yields true if the degree to which the first term satisfies the graded predicate exceeds the degree to which the second term satisfies the predicate by the amount specified in the final term. In this example h is a degree of height which is measured, </context>
</contexts>
<marker>Cresswell, 1976</marker>
<rawString>Cresswell, M.J. 1976. &amp;quot;The Semantics of Degree&amp;quot;, in: B.H. Partee (ed.), Montague Grammar, Academic Press, New York, pp. 261-292.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G N Carlson</author>
</authors>
<title>Reference to Kinds in English&amp;quot;,</title>
<date>1977</date>
<tech>PhD thesis,</tech>
<institution>available from Indiana University Linguistics Club.</institution>
<contexts>
<context position="12801" citStr="Carlson, 1977" startWordPosition="2045" endWordPosition="2046">alized quantifiers involve measuring (according to some measure along some appropriate dimension). Our approach, which is related to proposals that can be found in (Pelletier, ed.,1979) leads to the following translation for John bought at least five pounds of apples: quant(amount(An.(n &gt; 5), pounds), Apple(x), past(quant(exists,e, Ev(e), Buy(e, john , x))))). Measure expressions and numerical quantifiers also play a part in the semantics of comparatives and superlatives respectively (see below). NATURAL KINDS Terms in logical forms may either refer to individual entities or to natural kinds (Carlson, 1977). Kinds are individuals of a specific nature; the term kind(x,P(x)) can loosely be interpreted as the typical individual satisfying P. All properties, including composite ones, have a corresponding natural kind in 28 our formalism. Natural kinds are used in the translations of examples like John invented paperclips: past(quant(exists, e, Ev(e), Invent(e, john, kind(p, Paperclip(p)))). In reasoning about kinds, the simplest approach possible would be to have a rule of inference stating that if a &amp;quot;kind individual&amp;quot; has a certain property, then all &amp;quot;real world&amp;quot; individuals of that kind have that p</context>
</contexts>
<marker>Carlson, 1977</marker>
<rawString>Carlson, G.N. 1977. &amp;quot;Reference to Kinds in English&amp;quot;, PhD thesis, available from Indiana University Linguistics Club.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Davidson</author>
</authors>
<title>The Logical Form of Action Sentences&amp;quot;, in N. Rescher, The Logic of Decision and Action,</title>
<date>1967</date>
<institution>University of Pittsburgh Press,</institution>
<location>Pittsburgh, Pennsylvania.</location>
<marker>Davidson, 1967</marker>
<rawString>Davidson, D. 1967. &amp;quot;The Logical Form of Action Sentences&amp;quot;, in N. Rescher, The Logic of Decision and Action, University of Pittsburgh Press, Pittsburgh, Pennsylvania.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J van Eijck</author>
</authors>
<title>Quantification&amp;quot;.</title>
<date>1988</date>
<tech>Technical Report CCSRC-7,</tech>
<institution>SRI International, Cambridge Research Centre.</institution>
<location>Cambridge, England.</location>
<note>To appear in A. von Stechow</note>
<marker>van Eijck, 1988</marker>
<rawString>van Eijck, J. 1988. &amp;quot;Quantification&amp;quot;. Technical Report CCSRC-7, SRI International, Cambridge Research Centre. Cambridge, England. To appear in A. von Stechow &amp; D. Wunderlich, Handbook of Semantics, De Gruyter, Berlin.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Groenendijk</author>
<author>M Stokhof</author>
</authors>
<title>Dynamic Predicate Logic&amp;quot;.</title>
<date>1987</date>
<tech>Preliminary report,</tech>
<location>ITLI, Amsterdam.</location>
<contexts>
<context position="20418" citStr="Groenendijk &amp; Stokhof, 1987" startWordPosition="3265" endWordPosition="3269">ant, then the a_ind ex operator becomes redundant and is deleted from the resulting LF. In special cases such as the so-called &apos;donkeysentences&apos;, however, an anaphoric term may be resolved to a quantified variable v outside the scope of the quantifier that binds v. The LF for Every farmer who owns a dog loves it provides an example: quant(forall, x, Farmer(x)A quant(exists, y, Dog(y), quant(exists, e, Ev(e), Own(e, x, quant(exists, e&apos;, Ev(e&apos;), Love(e&apos; , x, a_index(y)))). The &apos;unbound dependency&apos; is indicated by an a_index operator. Dynamic interpretation of this LF, in the manner proposed in (Groenendijk &amp; Stokhof, 1987), allows us to arrive at the correct interpretation. UNRESOLVED PREDICATIONS The use of unresolved terms in QLFs is not sufficient for covering natural language constructs involving implicit relations. We have therefore included a QLF construct (a_form for &apos;anaphoric formula&apos;) containing a formula with an unresolved predicate. This is eventually replaced by a fully resolved LF formula, but again the process of resolution is beyond the scope of this paper. Implicit Relations. Constructions like possessives, genitives and compound nouns are translated into QLF expressions containing uninstantiat</context>
</contexts>
<marker>Groenendijk, Stokhof, 1987</marker>
<rawString>Groenendijk, J. &amp; M. Stokhof 1987. &amp;quot;Dynamic Predicate Logic&amp;quot;. Preliminary report, ITLI, Amsterdam.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Montague</author>
</authors>
<title>The Proper Treatment of Quantification in Ordinary English&amp;quot;. In</title>
<date>1973</date>
<editor>R. Thomason, ed., Formal Philosophy,</editor>
<publisher>Yale University Press,</publisher>
<location>New Haven.</location>
<contexts>
<context position="3731" citStr="Montague (1973)" startWordPosition="577" endWordPosition="578">ration between compositional semantics and the processes of scoping and reference resolution, and (ii) the integration of a range of well-motivated semantic analyses for specific constructions in a single coherent framework. We will first motivate our extensions to first order logic and our distinction between LF and QLF, then describe the LF language, illustrating the logical form translations produced by the CLE for a number of English constructions, and finally present the additional constructs of the QLF language and illustrate their use. EXTENDING FIRST ORDER LOGIC As the pioneer work by Montague (1973) suggests, first order logic is not the most natural representation for the meanings of English sentences. The development of Montague grammar indicates, however, that there is quite a bit of latitude as to the scope of the extensions that are needed. In developing the LF language for the CLE we have tried to be conservative in our choice of extensions to first order logic. Earlier proposals with similar motivation are presented by Moore (1981) and Schubert &amp; Pelletier (1982). The ways in which first order logic— predicate logic in which the quantifiers 3 and V range over the domain of individ</context>
<context position="8077" citStr="Montague, 1973" startWordPosition="1276" endWordPosition="1277">. past(quant(exists, e, Ev(e), The LF language allows formation of com- Design(e, john, h) A plex predicates by means of lambda abstrac- In_location(e, Cambridge)))). tion: AxAd.Heavy_degree(x,d) is the predi- In both cases the prepositional phrase is cate that expresses degree of heaviness. translated as a two-place relation stating that EVENT AND STATE VARIABLES something is located in some place. Where Rather than treating modification of verb the noun phrase is modified, the relation is phrases by means of higher order predicate between an ordinary object and a place; in modifiers, as in (Montague, 1973), we follow the case where the prepositional phrase modDavidson&apos;s (1967) quantification over events ifies the verb phrase the relation is between to keep closer to first order logic. The event an event and a place. Adjectives in predcorresponding to a verb phrase is introduced icative position give rise to state variables in as an additional argument to the verb pred- their translations. For example, in the transicate. The full logical form for Every repre- lation of John was happy in Paris, the preposentative voted is as follows: sitional phrase modifies the state. States are quant(forall, x,</context>
</contexts>
<marker>Montague, 1973</marker>
<rawString>Montague, R. 1973. &amp;quot;The Proper Treatment of Quantification in Ordinary English&amp;quot;. In R. Thomason, ed., Formal Philosophy, Yale University Press, New Haven.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R C Moore</author>
</authors>
<title>Problems in Logical Form&amp;quot;.</title>
<date>1981</date>
<booktitle>19th Annual Meeting of the Association for Computational Linguistics,</booktitle>
<pages>117--124</pages>
<location>Stanford, California,</location>
<contexts>
<context position="4179" citStr="Moore (1981)" startWordPosition="656" endWordPosition="657">ions, and finally present the additional constructs of the QLF language and illustrate their use. EXTENDING FIRST ORDER LOGIC As the pioneer work by Montague (1973) suggests, first order logic is not the most natural representation for the meanings of English sentences. The development of Montague grammar indicates, however, that there is quite a bit of latitude as to the scope of the extensions that are needed. In developing the LF language for the CLE we have tried to be conservative in our choice of extensions to first order logic. Earlier proposals with similar motivation are presented by Moore (1981) and Schubert &amp; Pelletier (1982). The ways in which first order logic— predicate logic in which the quantifiers 3 and V range over the domain of individuals—is extended in our treatment can be grouped and motivated as follows: • Extensions motivated by lack of expressive power of ordinary first order logic: for a general treatment of noun phrase constructions in English generalized quantifiers are needed (`Most A are B&apos; is not expressible in a first order language with just the two one-place predicates A and B). • Extensions motivated by the desire 26 for an elegant compositional semantic fram</context>
<context position="5809" citStr="Moore, 1981" startWordPosition="930" endWordPosition="931">ith context dependent constructions, such as anaphora, and the implicit relations involved in the interpretation of possessives and compound nominals. The first two extensions in the list are part of the LF language, to be described next, the other two have to do with QLF constructs. These QLF constructs are removed by the processes of quantifier scoping and reference resolution (see below). The treatment of tense by means of temporal operators that is adopted in the CLE will not be discussed in this paper. Some advantages of an operator treatment of the English tense system are discussed in (Moore, 1981). We are aware of the fact that some aspects of our LF representation give what are arguably overly neutral analyses of English constructions. For example, our uses of event variables and of sentential tense operators say little about the internal structure of events or about an underlying temporal logic. Nevertheless, our hope is that the proposed LF representations form a sound basis for the subsequent process of deriving the fuller meaning representations. RESOLVED Leave(e, john) A Sudden(e))). LOGICAL FORMS The use of event variables in turn permits NOTATIONAL CONVENTIONS us to give a unif</context>
</contexts>
<marker>Moore, 1981</marker>
<rawString>Moore, R.C. 1981. &amp;quot;Problems in Logical Form&amp;quot;. 19th Annual Meeting of the Association for Computational Linguistics, Stanford, California, pp. 117-124.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D B Moran</author>
</authors>
<title>Quantifier Scoping in the SRI Core Language Engine&amp;quot;,</title>
<date>1988</date>
<booktitle>26th Annual Meeting of the Association</booktitle>
<pages>33--40</pages>
<institution>for Computational Linguistics, State University of New York at Buffalo,</institution>
<location>Buffalo, New York,</location>
<contexts>
<context position="17276" citStr="Moran (1988)" startWordPosition="2782" endWordPosition="2783">term_coord (quantifier scoping generates a number of scoped LFs from this): quant(exists, e, Ev(e), Read(e, term_coord( A, x, qterm(most, plur, y, Doctor(y)), qterm(some, plur, z, Engineer(z))), qterm(every, sing, v, A rt(v)))). Quantifier scoping determines the scopes of quantifiers and operators, generating scoped logical forms in a preference order. The ordering is determined by a set of declarative rules expressing linguistic preferences such as the preference of particular quantifiers to outscope others. The details of two versions of the CLE quantifier scoping mechanism are discussed by Moran (1988) and Pereira (Alshawi et a/. 1988). UNRESOLVED REFERENCES Unresolved references arising from pronoun anaphora and definite descriptions are represented in the QLF as &apos;quasi terms&apos; which contain internal structure relevant to reference resolution. These terms are eventually replaced by ordinary LF terms (constants or variables) in the final resolved form. A discussion of the CLE reference resolution process and treatment of constraints on pronoun reference will be given in (Alshawi, in prep.). Pronouns. The QLF representation of a pronoun is an anaphoric term (or a_term). For example, the trans</context>
</contexts>
<marker>Moran, 1988</marker>
<rawString>Moran, D.B. 1988. &amp;quot;Quantifier Scoping in the SRI Core Language Engine&amp;quot;, 26th Annual Meeting of the Association for Computational Linguistics, State University of New York at Buffalo, Buffalo, New York, pp. 33-40.</rawString>
</citation>
<citation valid="true">
<title>Mass Terms: Some Philosophical Problems,</title>
<date>1979</date>
<editor>Pelletier, F.J. (ed.)</editor>
<location>Reid&amp; Dordrecht.</location>
<marker>1979</marker>
<rawString>Pelletier, F.J. (ed.) 1979. Mass Terms: Some Philosophical Problems, Reid&amp; Dordrecht.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L K Sz F J Pelletier Schubert</author>
</authors>
<title>From English to Logic: Context-Free Computation of &apos;Conventional&apos; Logical Translations&amp;quot;.</title>
<date>1982</date>
<journal>Americal Journal of Computational Linguistics,</journal>
<volume>8</volume>
<pages>26--44</pages>
<marker>Schubert, 1982</marker>
<rawString>Schubert, L.K. Sz F.J. Pelletier 1982. &amp;quot;From English to Logic: Context-Free Computation of &apos;Conventional&apos; Logical Translations&amp;quot;. Americal Journal of Computational Linguistics, 8, pp. 26-44.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Webber</author>
</authors>
<title>A Formal Approach to Discourse Anaphora,</title>
<date>1979</date>
<location>Garland, New York.</location>
<marker>Webber, 1979</marker>
<rawString>Webber, B. 1979. A Formal Approach to Discourse Anaphora, Garland, New York.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>