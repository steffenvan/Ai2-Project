<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000169">
<title confidence="0.9982715">
Extracting Sense Trees from the Romanian Thesaurus by
Sense Segmentation &amp; Dependency Parsing
</title>
<author confidence="0.994381">
Neculai Curteanu Alex Moruz
</author>
<affiliation confidence="0.84642675">
Institute for Computer Science, Institute for Computer Science,
Romanian Academy, Iasi Branch Romanian Academy, Iasi Branch
ncurteanu@yahoo.com Faculty of Computer Science,
“Al. I. Cuza” University, Iasi
</affiliation>
<email confidence="0.993163">
mmoruz@info.uaic.ro
</email>
<author confidence="0.992466">
Diana Trandabăţ
</author>
<affiliation confidence="0.991354">
Institute for Computer Science,
</affiliation>
<author confidence="0.737238">
Romanian Academy, Iasi Branch
</author>
<affiliation confidence="0.9521795">
Faculty of Computer Science, “Al.
I. Cuza” University, Iasi
</affiliation>
<email confidence="0.941066">
dtrandabat@info.uaic.ro
</email>
<bodyText confidence="0.80501725">
Limbii Române – Romanian Language
Thesaurus) entries, with significant re-
sources to improve and enlarge the
DTLR lexical semantics analysis.
</bodyText>
<sectionHeader confidence="0.998768" genericHeader="abstract">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999964034482759">
Since the last decade, researchers have proven
the need for machine readable dictionaries. The
idea behind parsing a dictionary entry is the crea-
tion of a lexical-semantic tree of senses corre-
sponding to the meanings that define the diction-
ary lexical entry. The aim of this paper is to in-
troduce a new parsing strategy for thesauri shal-
low parsing, called Dictionary Sense Segmenta-
tion &amp; Dependency (DSSD), devoted to the task
of extracting the sense tree, i.e. the hierarchy of
the lexical-semantics defined meanings for a dic-
tionary entry. The concrete task which DSSD
algorithm was used for is to obtain the sense tree
from an entry of the Romanian Language The-
saurus (DTLR – Dictionarul Tezaur al Limbii
Române) within the eDTLR research project
(Cristea et al., 2007) devised for DTLR elec-
tronic acquisition and processing (Curteanu et al.,
2007).
In order to obtain the sense tree for a head
word, the dictionary entry is divided into primary
and secondary senses, respecting a sense hierar-
chy introduced by sense markers. For the DTLR
dictionary, the sense markers hierarchy (pre-
sented in Section 3) includes 5 levels. Those are,
from the topmost level: capital letter markers
(A., B., etc.), Roman numeral markers (I., II.,
etc.), Arabic numeral markers (1., 2., etc.), filled
diamond ♦ and empty diamond 0. Besides the
</bodyText>
<sectionHeader confidence="0.667011" genericHeader="keywords">
Abstract
</sectionHeader>
<bodyText confidence="0.999586714285714">
This paper aims to introduce a new pars-
ing strategy for large dictionary (thesauri)
parsing, called Dictionary Sense Segmen-
tation &amp; Dependency (DSSD), devoted to
obtain the sense tree, i.e. the hierarchy of
the defined meanings, for a dictionary en-
try. The real novelty of the proposed ap-
proach is that, contrary to dictionary
‘standard’ parsing, DSSD looks for and
succeeds to separate the two essential
processes within a dictionary entry pars-
ing: sense tree construction and sense
definition parsing. The key tools to ac-
complish the task of (autonomous) sense
tree building consist in defining the dic-
tionary sense marker classes, establishing
a tree-like hierarchy of these classes, and
using a proper searching procedure of
sense markers within the DSSD parsing
algorithm. A similar but more general
approach, using the same techniques and
data structures for (Romanian) free text
parsing is SCD (Segmentation-Cohesion-
Dependency) (Curteanu; 1988, 2006),
which DSSD is inspired from. A DSSD-
based parser is implemented in Java,
building currently 91% correct sense
trees from DTLR (Dictionarul Tezaur al
</bodyText>
<footnote confidence="0.99021975">
© 2008. Licensed under the Creative Commons Attri-
bution-Noncommercial-Share Alike 3.0 Unported
license (http://creativecommons.org/licenses/by-nc-
sa/3.0/). Some rights reserved.
</footnote>
<page confidence="0.988863">
55
</page>
<note confidence="0.8493775">
Coling 2008: Proceedings of the workshop on Cognitive Aspects of the Lexicon (COGALEX 2008), pages 55–63
Manchester, August 2008
</note>
<bodyText confidence="0.998626428571428">
five levels, there exists also a special marker
category, the so-called literal enumeration, con-
sisting of lowercase letter markers a), b), c), etc.
The literal enumeration can appear at any of the
5 levels, as presented in Section 3.
Thus, using the sense markers, any dictionary
entry is represented as a tree of senses, the lower
levels being more specific instances of the higher
levels.
For example, for the dictionary entry verb, the
sense tree contains 3 senses corresponding to
level 3, one of them having a sub-sense corre-
sponding to level 5. Each sense/sub-sense can
have its own definition (gloss) or examples.
</bodyText>
<figure confidence="0.996864294117647">
&lt;entry&gt;
&lt;hw&gt;VERB&lt;/hw&gt;
&lt;senses&gt;
&lt;marker level=”3”&gt;1.
&lt;definition&gt;...&lt;/definition&gt;
&lt;marker level=”5”&gt;◊
&lt;definition&gt;...&lt;/definition&gt;
&lt;/marker&gt;
&lt;/marker&gt;
&lt;marker level=”3”&gt;2.
&lt;definition&gt;...&lt;/definition&gt;
&lt;/marker&gt;
&lt;marker level=”3”&gt;3.
&lt;definition&gt;...&lt;/definition&gt;
&lt;/marker&gt;
&lt;/senses&gt;
&lt;/entry&gt;
</figure>
<bodyText confidence="0.996982390243902">
The presented method can be applied to any
dictionary, provided that a hierarchy of the sense
markers of the dictionary is established.
The paper is organized as follows: Section 2
points out the characteristic features of DSSD
strategy, discussing the special relationship be-
tween DSSD and SCD parsing strategy for gen-
eral text, on one hand, and between DSSD and
the standard dictionary entry parsing (DEP), on
the other hand. Section 3 presents the main com-
ponents of the DSSD strategy: DTLR sense
marker classes, their dependency hyper-tree
structure, and the DSSD parsing algorithm. The
final Section 4 discusses the current stage im-
plementation (in Java) of the DSSD algorithm,
exposing several parsed examples. Possible
sources of error and ambiguity in the DSSD pars-
ing process are discussed, and further develop-
ments of DSSD analysis software are outlined.
2 DSSD compared to Free Text Parsing
and to Dictionary ‘Standard’ Parsing
This section outlines the origins of the DSSD
idea, pointing out the connections between
DSSD and free text parsing based on the SCD
linguistic strategy (Curteanu 2006), on one hand,
and between DSSD and dictionary standard
parsing, e.g. (Neff, Boguraev; 1989), (Lemnitzer,
Kunze; 2005), (Hauser, Storrer; 1993), on the
other hand. The main difference (and positive
feature) of the DSSD strategy compared to the
standard approach to dictionary entry parsing
(DEP), e.g. LexParse system in (Hauser, Storrer;
1993), (Kammerer; 2000), (Lemnitzer, Kunze;
2005), or JavaCC grammar-based parsing in
(Curteanu, Amihaesei; 2004), is that DSSD de-
tached completely the process of sense tree
building from the process of sense definition
parsing, within the DEP general task. This fact is
clearly reflected in Fig. 2, which compares, at the
macro-code level, the main four DEP operations
for standard DEP and DSSD strategies.
</bodyText>
<subsectionHeader confidence="0.996772">
2.1 SCD Marker Classes, Hierarchy, and
Parsing Algorithms
</subsectionHeader>
<bodyText confidence="0.999955625">
DSSD parsing strategy involves a configuration
of components that is similar (but less general) to
the SCD (Segmentation-Cohesion-Dependency)
parsing strategy, developed and applied to (Ro-
manian) free text analysis (and generation)
(Curteanu; 2006). The process of solving the
parsing of DTLR entries have been inspired by
the resemblance between the classes of DTLR
sense markers and the SCD marker classes on
one side, and between the sense trees of (DTLR)
dictionary entries and the discourse trees of fi-
nite-clause dependency trees at sentence or para-
graph levels on the other side. While discourse
trees provide a formal similarity to the sense
trees, nucleus–satellite rhetorical relations among
discourse segments is quite different to the sub-
sumption relation of lexical semantics nature
among the sub-sense definitions (sub-senses) of a
dictionary entry.
The subsumption relation is defined as fol-
lows: sense1 subsumes sense2 if (informally)
sense1 is less informative (or, more general) than
sense2, or if (formally) the sense tree of sense1 is
a (proper) subtree of sense2. DSSD parsing of an
</bodyText>
<page confidence="0.996301">
56
</page>
<table confidence="0.944778541666667">
Parsing SCD markers &amp; Semantics to be applied on the parsed Resulted structures of the
Strategy DSSD markers textual spans parsing process
SCD M4-class (discourse) markers rhetorical discourse semantics , i.e. RST dis- discourse tree (of RST-based dis-
course (high-level cohesion) dependencies course segments)
ers M3-class (inter-clause) mark- clause-level dependency trees based
inter-clause predicational semantics, i.e. Predi- on syntactic or semantic relations
cate-Argument (global-level cohesion) dependen-
cies among finite clauses
M2-class (clause) markers single finite-clause predicational semantics, i.e. single finite clause(s)
Predicate-Argument (local-level cohesion) de-
pendencies among VG-NGs (Verbal Group –
Noun Groups)
M1-class intra-clausal non-finite predicational semantics, i.e. (local- simple and complex VGs; simple
(phrase) markers level cohesion) dependencies inside VG and NGs and complex (predication-related)
(Verbal Group – Noun Groups) NGs
M0-class flexionary markers lexical semantics categories lexical textual words = inflected
of lexical categories words
DSSD SCD - semantic description at the lexicon level lexical lemmatized words =
M(–1)-class of lemmatization dictionary entries
markers for DTLR lexical
entries
DSSD sense and subsense defini- subsumption relations between the subsenses of a sense trees and (XCES-TEI 2007
tion markers of a DTLR DTLR lexical entry (cohesion-free semantics) codification-based) sense definitons
lexical entry of DTLR entries
</table>
<figureCaption confidence="0.991256">
Fig. 1. DSSD vs. SCD marker classes, the corresponding semantics and textual structures
</figureCaption>
<bodyText confidence="0.999976034482759">
entry sense tree works in an akin Breadth-First,
Top-Down manner as SCD does, for those
classes of markers that produce only segmenta-
tion and binary dependency between discourse
segments or finite clauses, ignoring the more
complex “cohesion” relationship. Thus one can
rightly say that DSSD approach is derived from
the SCD parsing strategy (Fig. 1).
SCD parsing strategy is exposed at large in
(Curteanu 2006). SCD-based discourse parsing
presents a special interest for DSSD because of
their (formal) algorithmic analogy. The method
proposed by the SCD strategy includes building
the discourse tree by the intensive use of dis-
course markers, while discourse segments are
obtained by clause parsing. Employing the re-
sults of the SCD clausal parsing and a database
which contains information about the discourse
markers, one can obtain the discourse structure
of a text. The outcome is represented as a dis-
course tree whose terminal nodes are clause-like
structures, having specified on the arcs the name
of the involved rhetorical relations.
The SCD segmentation / parsing algorithm in
(Curteanu 2006) may have the same shape of a
Breadth-First (or sequential-linear) processing
form as DSSD does, using as input a morpho-
logically tagged text, obtaining the finite clauses
and sub-clausal phrase (XG-)structures. Data
representation is in standard XML and the im-
plementation of the SCD algorithm for free text
parsing is made in Java. (Curteanu 2006) pre-
sents recursive Breadth-First (and Depth-First),
or parallel Breadth-First shapes of the SCD
segmentation-parsing algorithms.
The relationship between SCD and DSSD
parsing strategies, the former devoted to the free
text parsing and the latter to be used for DEP,
could be summarized as follows: the two strate-
gies work formally with the same technology,
using very similar analysis tools and data struc-
tures, including the same Breadth-First search
strategy. The clear distinction between SCD and
DSSD consists in the quite different kind of texts
to be analyzed (free text vs. dictionary entry
text), and the two different (but complementary)
semantics that drive the corresponding parsing
structures: predicational and rhetorical (cohe-
sion-proper) semantics for SCD, and lexical se-
mantics (cohesion-free) for DSSD. The table in
Fig. 1 gives a detailed comparison between the
two parsing strategies. The SCD parsing technol-
ogy, especially with its presently discovered
DSSD sub-sort, evolves (at least) three features:
generality (different text structures), flexibility
(different underlying semantics), and adequacy
(proper text markers and their corresponding hi-
erarchies).
</bodyText>
<page confidence="0.995297">
57
</page>
<table confidence="0.994739074074074">
Dictionary Classical Parsing Strategy DSSD Parsing Strategy
For i from 0 to MarkerNumber For i from 0 to MarkerNumber
1 Sense-i Marker Recognition; 1 Sense-i Marker Recognition;
Assign (Unparsed) Sense-i Definition to Node-i;
4 Add Node-i to EntrySenseTree;
2 Sense-i Definition Parsing;
If(Success) Standby on Sense-i Definition Parsing;
3 Attach (Parsed) Sense-i Definition to Node-i; EndFor
Output: EntrySenseTree.
Node-k = Root(EntrySenseTree);
While not all nodes in EntrySenseTree are visited
2 Sense-k Definition Parsing;
4 Add Node-i to EntrySenseTree;
Else Fail and Stop.
EndFor
Output: EntrySenseTree with Parsed Sense Definitions
(only if all sense definitions are parsed).
Notice: MarkerNumber is the number of the input
marker sequence.
If(Success)
3 Attach Sense-k Definition to Node-k;
Else Attach Sense-k Parsing Result to Node-k;
Node-k = getNextDepthFirstNode(EntrySenseTree)
Continue
EndWhile.
Output: EntrySenseTree with Parsed or Unparsed Sense
Definitions
</table>
<figureCaption confidence="0.979568">
Fig. 2. A macro-code comparison of classical and DSSD parsing strategies
</figureCaption>
<subsectionHeader confidence="0.9902">
2.2 DSSD Approach vs. Standard DEP
</subsectionHeader>
<bodyText confidence="0.99997096875">
Another perspective on DSSD is outlined in this
section: the novelties of DSSD approach fetched
to the standard DEP, e.g. (Neff, Boguraev;
1989), (Lemnitzer, Kunze; 2005), (Kammerer,
2000). DSSD applies the same “technology” as
SCD strategy does, i.e. marker classes, specific
hierarchies, and adequate searching procedures
embedded and governing the parsing algorithms.
Most important, DSSD parse and construct the
sense tree of a (DTLR) dictionary entry, inde-
pendently of, and possibly lacking the, DTLR
sense definition parsing process.
In the standard DEP, including the Java-
grammar based construction of parsers in the
JavaCC environment (Curteanu, Amihaesei,
2004; Curteanu et al., 2007), building the sense
tree for an entry is inherently embedded into the
general process of parsing all the sense and
sub-sense definitions enclosed into the dictionary
entry. In the same typically (standard) DEP way
works also the parser in (Neff, Boguraev; 1989)
or LexParse, (Kammerer; 2000: 10-11) specify-
ing that the LexParse recognition strategy is a
Depth-First, Top-Down one.
The advantage of the proposed DSSD ap-
proach is that it “ignores”, at least in the begin-
ning, the “details” of sense definitions, concen-
trating only on the sense marker discovery and
their dependency establishing. The result is that
DSSD parsing concentrates on and obtains, in the
first place, the sense tree of a DTLR entry. Of
course, parsing of a dictionary entry does not
means only its sense tree, but the entry sense tree
represents the essential, indispensable structure
for any kind of DEP.
Based on different types of DTD standards for
dictionary text representation, such as CON-
CEDE-TEI (Erjavec et al. 2000; Kilgarriff 1999,
Tufis 2001) or (XCES-TEI; 2007), the parsing
process may continue “in depth” for identifying
the (other important) fields of sense and
sub-sense definitions. DSSD strategy has the
quality of being able to compute independently
the entry sense tree, prior to the process of sense
definition parsing. Subsequently, the process of
parsing the sense definitions can be performed
separately, one by one, avoiding the current
situation when the general parsing of an entry
may be stopped simply because of a single (even
if the last one) unparsable sense definition.
The procedural pseudo-code in Fig. 2 shows
clearly the important difference between stan-
dard DEP and DSSD parsing, with the essential
advantage provided by DSSD: standard DEP is
based on Depth-First search, while DSSD works
with Breadth-First one. Specifically, the proce-
dural running of the four operations that are
compared for the standard DEP and DSSD
strategies, labeled with 1, 2, 3, 4, are organ-
ized in quite different cycles: in the table left-
side (standard DEP), there is a single, large run-
ning cycle, 1 + 2, under 2 being embedded
(and strictly depending) the sub-cycle 3 + 4.
The DSSD parsing exhibits two distinct (and in-
</bodyText>
<page confidence="0.991434">
58
</page>
<bodyText confidence="0.999807714285714">
dependently) running cycles: OO + ®, for con-
structing the (DTLR) sense trees, and OO + OO ,
devoted to parse the sense definitions and to at-
tach the parsed or unparsed sense definitions to
their corresponding nodes in the sense tree(s).
We emphasize firstly, that the second proce-
dural cycle is optional, and secondly, that the
first cycle is working on the sense marker se-
quence of the entry (either correct or not), the
DSSD output being an entry sense tree in any
case (either correct or not). This is why the
DSSD algorithm never returns on FAIL, regard-
less whether the obtained sense tree is correct or
not.
</bodyText>
<sectionHeader confidence="0.937500333333333" genericHeader="introduction">
3 DTLR Marker Classes, their Depend-
ency Structure, and the DSSD Parsing
Algorithm
</sectionHeader>
<bodyText confidence="0.999790868421053">
As already pointed out, DSSD can be viewed as
a simplified version of SCD, since only the seg-
mentation and dependency aspects are involved,
the (local) cohesion matters being without object
for the (one-word) lexical semantics of DSSD.
As in the case of SCD, the DSSD parsing strat-
egy requires a set of marker classes (in our case,
DTLR sense markers), arranged in a hierarchy
illustrated in Fig. 3, and described below:
The capital letter marker class (A., B., etc.) is
the topmost level on the sense hierarchy of
DTLR markers (see Fig. 3) for any given dic-
tionary entry. When it appears, this marker des-
ignates the (largest-grained meaning) primary
senses of the lexical word defined. If the top
level marker has only one element of this kind,
then the marker is not explicitly represented.
The Roman numeral marker class (I., II., etc.)
is the second-level of sense analysis for a given
DTLR entry. It is subsumed by a capital letter
marker if some exists for the head word; if a
capital letter marker does not exist (it is not ex-
plicitly represented), the Roman numeral marker
appears on the topmost level of the sense tree. If
the lexical entry has only one sense value for this
analysis level, the marker is not explicitly repre-
sented.
The Arabic numeral marker class (1., 2., etc.)
is the third-level of sense analysis for a DTLR
entry. It is subsumed by a Roman numeral
marker if there exists some for the entry; if a
Roman numeral marker is not explicitly repre-
sented, it is subsumed by the first explicit marker
on a higher level. If the entry has only one sense
value for this level of sense analysis, the marker
is not explicitly represented. These first three
levels encode the primary senses of a DTLR
lexical entry.
</bodyText>
<figureCaption confidence="0.872383">
Fig. 3. The tree-like dependency structure for
the classes of DTLR markers
</figureCaption>
<bodyText confidence="0.998311633333333">
The filled diamond marker class is the fourth-
level of sense analysis and it is used for enumer-
ating secondary (finer-grained) senses of a
DTLR entry. It is generally subsumed by any
explicit DTLR sense marker on a higher level,
i.e. any of the primary sense markers.
The empty diamond marker class is the fifth-
level of sense analysis and it is used for enumer-
ating expressions for a given, secondary sub-
sense. It is generally subsumed by a filled dia-
mond marker or by any primary sense marker.
The lowercase letter markers a), b), c), etc. are
not an actual class of sense markers, but rather a
procedure used to refine, through literal enu-
meration, a semantic paradigm of a DTLR entry
sense or sub-sense. A lowercase letter marker
does not have a specific level on the marker class
tree-like hierarchy since it belongs to the sense
marker level (of either primary or secondary
sense) that is its parent. The important rules of
the literal enumeration procedure in DTLR are:
(a) it associates with the hierarchy level of the
sense marker class to which is assigned (in
Fig. 3), and (b) it can embed lower (than its par-
ent level) senses, provided that each literal enu-
meration is closed finally on the sense level to
which it belongs.
Fig. 3 is a hyper-tree hierarchy of the DTLR
sense marker classes since (at least) the lowest
hyper-node contains recursively embedded dia-
</bodyText>
<equation confidence="0.972488272727273">
DTLR Entry
1., 2., 3.,
a), b), c),
a), b), c),
I., II., III., ..
a), b), c),
A., B., C., ..
a), b), c), ..
a), b), c), ..
◊
♦
</equation>
<page confidence="0.992146">
59
</page>
<bodyText confidence="0.989664428571428">
mond-marker nodes. The dashed arrows point to
the upper or lower levels of DTLR sense marker
hierarchy, from the literal enumeration layer-
embedded level. The continuous-dashed arrows
in Fig. 3 point downwards from the higher to the
lower priority levels of DTLR marker class hy-
per-tree. Because of its special representation
characteristics, the literal enumeration is illus-
trated on a layer attached to the hierarchy level
to which it belongs, on each of the sense levels.
Some examples supporting the marker hierarchy
in Fig. 3, including the literal enumeration that
can appear at any DTLR sense level, are pre-
sented below:
</bodyText>
<figure confidence="0.994029425287356">
I. Literal enumeration under a filled diamond
(secondary sense):
&lt;entry&gt;
&lt;hw&gt;VÍŢĂ2&lt;/hw&gt;
&lt;pos&gt;s. f.&lt;/pos&gt;
&lt;senses&gt;
&lt;marker&gt;I.
&lt;marker&gt;1.
&lt;definition&gt; (De obicei determinat prin „de
vie”) Arbust din familia vitaceelor, cu radacina puternica, cu
tulpina scurta, &lt;/definition&gt;
&lt;marker&gt;+
&lt;definition&gt; C o m p u s e: viţă-albă =
&lt;/definition&gt;
&lt;marker&gt;a)
&lt;definition&gt; arbust agalator din familia
ranunculaceelor, cu tulpina sublire, cu frunze penate...;
&lt;/definition&gt;
&lt;/marker&gt;
&lt;marker&gt;b)
&lt;definition&gt;(regional) luminoasa
(Clematis recta). Cf. CONV. LIT. XXIII, 571, BORZA, D. 49,
301; &lt;/definition&gt;
&lt;/marker&gt;
&lt;marker&gt;c)
&lt;definition&gt;(învechit) împarateasa
(Bryonia alba) &lt;/definition&gt;
&lt;/marker&gt;
&lt;/marker&gt;
&lt;/marker&gt;
&lt;/marker&gt;
&lt;/senses&gt;
&lt;/entry&gt;
II. Literal enumeration under an Arabic nu-
meral (primary sense):
&lt;entry&gt;
&lt;hw&gt;VERIGiJŢĂ&lt;/hw&gt;
&lt;pos&gt;s. f.&lt;/pos&gt;
&lt;senses&gt;
&lt;definition&gt;Diminutiv al lui v e r i g Cf. LB,
POLIZU, DDRF, BARCIANU, ALEXI, W., TDRG, CADE, SCRIBAN, D.,
DL, DM, DEX.&lt;/definition&gt;
&lt;marker&gt;1.
&lt;marker&gt;a)
&lt;definition&gt; (Prin Transilv. �i prin sudul
Mold.) Cf. v e r i g a (2 c). Cf. ALR II 6 653/95, 192, 605.
&lt;/definition&gt;
&lt;/marker&gt;
&lt;marker&gt; b)
&lt;definition&gt;Cf. v e r i g a (2 b). $i am dat
cercel în narea ta �i verigule în urechile tale. BIBLIA (1688),
5431/25. La ferestre spînzurau nişte perdeluţe de adamască,
aninate în nişte veriguţe ce se înşirau pe o vargă de fier.
GANE, N. II, 160. &lt;/definition&gt;
&lt;/marker&gt;
&lt;/marker&gt;
&lt;marker&gt;2.
&lt;definition&gt; (Popular) Verigheta. Cf. SCRIBAN, D.,
TIPLEA, P. P., BUD, P. P. Mi-o dat o veriguţă Şi-ntr-on an i-am fost
drăguţă. BÎRLEA, C. P. 143. &lt;/definition&gt;
&lt;/marker&gt;
&lt;/senses&gt;
&lt;/entry&gt;
III. Literal enumeration directly under the en-
try root:
&lt;entry&gt;
&lt;hw&gt;VENTRICÉA&lt;/hw&gt;
&lt;pos&gt;s. f.&lt;/pos&gt;
&lt;senses&gt;
&lt;definition&gt; Numele mai multor specii de plante
erbacee (folosite în medicina): &lt;/definition&gt;
&lt;marker&gt;a)
&lt;definition&gt; ventrilica (c) (Veronica persica).
Cf. GRECESCU, FL. 442, PANTU, PL., CADE. Un gorun negru şi
singuratic... e năpădit la poale de ventricele cu spicuri
albăstrii....; &lt;/definition&gt;
&lt;/marker&gt;
&lt;marker&gt;b)
&lt;definition&gt; ventrilica (a) (Veronica officinalis).
Cf. TDRG, BORZA, D. 179, 300; &lt;/definition&gt;
&lt;/marker&gt;
&lt;marker&gt;c)
&lt;definition&gt;bobornic (Veronica prostrata). Cf.
BORZA, D. 179, 300. &lt;/definition&gt;
&lt;/marker&gt;
&lt;/senses&gt;
&lt;/entry&gt;
</figure>
<bodyText confidence="0.992477666666667">
The DSSD algorithm for the construction of
the DTLR sense tree, according to the marker
hierarchy described in Fig. 3, is the following:
</bodyText>
<subsectionHeader confidence="0.732493">
Stack S
</subsectionHeader>
<bodyText confidence="0.773922">
Tree T
S.push(root)
while article has more markers
crt = get_next_marker()
while crt &gt; S.top() – get to the
first higher rank marker in the
stack
</bodyText>
<equation confidence="0.922723333333333">
S.pop()
if(crt = lowercaseLetter)
S.top.addPart(crt) – add a low-
</equation>
<footnote confidence="0.7907365">
ercase marker as a subset of the
higher level sense value
</footnote>
<page confidence="0.997662">
60
</page>
<bodyText confidence="0.993274523809524">
crt.level=S.top.level+1 – the
lowercase letter maker is given a
level in accordance to the level of
its parent
S.push(crt)
else
S.top.add_son(crt) – add the
son to the higher level marker in
the stack
S.push(crt) – add the current
marker to the stack
The DSSD parsing algorithm was imple-
mented in Java and running examples of its ap-
plication on DTLR entries are presented in Sec-
tion 4. While the DTLR sense marker recogni-
tion in DSSD is achieved with a Breadth-First
search, the marker sequence analysis for sense
tree construction is based on a Depth-First pars-
ing of the sense marker sequence input, as it uses
a stack to keep track of previous unfinished (in
terms of attaching subsenses) sense markers.
</bodyText>
<sectionHeader confidence="0.992441" genericHeader="method">
4 DTLR Parsing with DSSD Algorithm:
Examples and Developments
</sectionHeader>
<subsectionHeader confidence="0.999357">
4.1 DSSD Parser Applied on DTLR Entries
</subsectionHeader>
<bodyText confidence="0.999759125">
The enclosed Fig. 4 shows the result of applying
the DSSD Java parser described in Section 3 on a
DTLR entry. We notice that the presented input
example (VENIT2) represents just sequences of
DTLR sense markers. The entry for which the
parsing was conducted is given only as tags, in
part below (the entire entry spans for more than
two dictionary pages):
</bodyText>
<figure confidence="0.997618290322581">
&lt;entry&gt;
&lt;hw&gt;&lt;VENÍT2, -Ă &lt;/hw&gt;
&lt;pos&gt;adj. &lt;/pos&gt;
&lt;senses&gt;
&lt;definition&gt;...&lt;/definition&gt;
&lt;marker&gt;1.
&lt;definition&gt;...&lt;/definition&gt;
&lt;marker&gt;2.
&lt;definition&gt;...&lt;/definition&gt;
&lt;marker&gt;0
&lt;marker&gt; a)
&lt;definition&gt;...&lt;/definition&gt;
&lt;/marker&gt;
&lt;marker&gt; b)
&lt;definition&gt;...&lt;/definition&gt;
&lt;/marker&gt;
&lt;marker&gt; c)
&lt;definition&gt;...&lt;/definition&gt;
&lt;/marker&gt;
&lt;/marker&gt;
&lt;marker&gt;0
&lt;marker&gt; a)
&lt;definition&gt;...&lt;/definition&gt;
&lt;/marker&gt;
&lt;marker&gt; b)
&lt;definition&gt;...&lt;/definition&gt;
&lt;/marker&gt;
&lt;/marker&gt;
&lt;/marker&gt;
&lt;/senses&gt;
&lt;/entry&gt;
</figure>
<figureCaption confidence="0.998425">
Fig. 4. DSSD parsing for the sense tree build-
</figureCaption>
<bodyText confidence="0.9933628">
ing of DTLR entry VENIT2
As one can see, the input of the sense tree
parser is the DSSD marker sequence of the con-
sidered DTLR entry (the &lt;list&gt; tag in Figure 4).
The output of the parsing is much less verbose
than the original dictionary entry, since the sense
definitions and the entire example text is not de-
picted, in order to better observe the sense tree of
the entry. Also, this representation proves that
the understanding of the sense definitions is not
strictly necessary for building the sense tree, a
task for which the marker hierarchy discussed in
Section 3 is sufficient.
Fig. 5 presents the sense tree for the dictionary
entry “VIÉRME” (En: worm). It can be seen that
this particular entry is quite large, with the origi-
nal dictionary text spanning for more than six
pages of DTLR thesaurus.
After its completion, the DSSD parser was
tested on more than 500 dictionary entries (of
medium and large sizes), the only ones already in
electronic format to which we had access to at
the moment (the vast majority of dictionary vol-
umes is only available in printed form). The suc-
cess rate was determined to be 91.18%, being
</bodyText>
<page confidence="0.998333">
61
</page>
<figureCaption confidence="0.978352">
Fig. 5. Sense tree for the dictionary entry
</figureCaption>
<bodyText confidence="0.993287727272727">
“VIÉRME”
computed as a perfect match between the output
of the program and the gold standard.
Furthermore, it is worth noting that an article
with only one incorrect parse (i.e. one node in the
sense tree attached incorrectly) was considered to
be erroneously parsed in its entirety, an approach
which disregards all the other correctly attached
nodes in that entry. This fact shows also signifi-
cant improvement resources of the DSSD parsing
process.
</bodyText>
<note confidence="0.423356">
4.2 Error and Ambiguity Sources in DTLR
Parsing
</note>
<bodyText confidence="0.949966888888889">
It is worth to mention some sources of error and
ambiguity found in DSSD parsing for DTLR
sense tree computing. We grouped the error
sources in three main classes:
I. Inconsistencies in writing the original DTLR
article
A first source of parsing errors is the non-
monotony of the marker values on the same level
of sense marker hierarchy (Fig. 3):
</bodyText>
<reference confidence="0.909650666666667">
Ex.1. A. [B. missing] ... C. etc.;
Ex.2. 2. [instead of 1.]... 2. etc.;
Ex.3. a)... b) ... c) ... b) [instead of d)]etc.
</reference>
<bodyText confidence="0.990738787878788">
The tree structure returned by the parser does
not consider the consistency of each marker
level. Thus, in Ex.1, it will place the two markers
A. and C. as brother nodes in the sense tree. A
(partial but feasible) solution for the parser is to
check the strict monotony of the marker
neighbors, an operation which is useful also
when sense markers interfere with literal enu-
meration.
A validity of the marker succession at each
level will be checked after the completion of the
sense tree parsing.
II. Ambiguity in deciding which is the regent
and which is the dependent (sub)sense
An inherently ambiguity was found for the fol-
lowing sequences of DTLR sense markers:
Ex.4. 1. a) b) c) 0 [0]
The problem occurs since one can not discern
between attaching the first (and / or second) “0”
as depending on c) or on the upper level marker
(1.). Solving these ambiguities is a problem re-
lated on syntactic and / or semantic contexts of
the involved (multiple) pairs of markers.
Namely, if “c)” is the last small letter in the lit-
eral enumeration, then “0” is attached to the “1.”
marker (and sense), while if “c)” in the literal
enumeration, followed by “0”, has a continuation
“d)” in the literal enumeration, then “0” depends
on its small letter “c)” regent sense.
III. More refined subsense classification
A third source of errors when creating the
sense tree is met within the following marker
sequence I. 1. ♦ a) b) c) a) b). Even if at a quick
</bodyText>
<page confidence="0.997426">
62
</page>
<bodyText confidence="0.999368473684211">
look the problem with the inconsistent literal
enumeration is similar to the problems presented
in the first class, at a closer inspection we real-
ized that under the full diamond ♦ there are three
subsenses (three expressions), two of them hav-
ing literal enumeration: (1) vita-alba = a)... b)...
c); (2) vita-neagra = ...; (3) vita-evreilor =
a)...b). To solution this problem makes necessary
a more refined subsense classification within the
sense definition and adding possible new mark-
ers to the hierarchy. Working to solve these prob-
lems is in good progress, as it concerns types of
sense structure closely related to various sense
definition parsing, the next step in the develop-
ment of the DSSD dictionary parser.
We already identified seven definition types,
encoded as follows, together with the most im-
portant dependency conditions among the defini-
tions below, within DTLR senses and subsenses:
</bodyText>
<listItem confidence="0.713840428571429">
1. MorfDef (Morphological Definitions);
2. SpecDef (Specification-based Definitions);
3. SpSpec (Spaced-character Definitions);
4. RegDef (Regular-font Definitions);
5. BoldDef (Bold-font Definitions);
6. ItalDef (Italic-font Definitions);
7. ExemDef (Example-based Definitions),
</listItem>
<bodyText confidence="0.99975476">
The 4, 5, 6, definition types are possibly fol-
lowed by the literal enumeration scheme of
sense codification.
Further developments of DSSD analysis soft-
ware are meant to be achieved: (a) The complete
parsing of a DTLR entry entails the natural ex-
tension of DSSD approach towards sense defini-
tion parsing and representation within the XCES
TEI P5 (2007) standard set of tags. (b) A spe-
cialized subset of TEI P5 tags for representing all
the types of definitions met within the primary
and secondary senses of a DTLR entry is neces-
sary. (c) Resolution of all the references within a
DTLR entry is necessary: references to the ex-
cerpt sources (sigles), reference to a sense within
the same entry (internal reference), or to a
(sub)sense within another entry (external refer-
ence). (d) Verification of the sense-tree correct-
ness can be achieved by restoring the linear
structure of a DTLR entry from its parsed sense-
tree representation, and comparing it with the
DTLR original entry.
Acknowledgement. The present research was
financed within the eDTLR grant, PNCDI II
Project No. 91_013/18.09.2007.
</bodyText>
<sectionHeader confidence="0.996236" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.998704196078431">
Cristea, D., Raschip, M., Forascu, C., Haja, G., Flo-
rescu, C., Aldea, B., Danila, E. (2007): The Digital
Form of the Thesaurus Dictionary of the Romanian
Language. In Proceedings of the 4th International
IEEE Conference SpeD 2007.
Curteanu, Neculai (1988): Augmented X-bar Schemes.
COLING&apos;88 Proceedings, Budapest, pp. 130-132.
Curteanu, N., E. Amihaesei (2004): Grammar-based
Java Parsers for DEX and DTLR Romanian Dic-
tionaries. ECIT-2004 Conference, Iasi, Romania.
Curteanu, N. (2006): Local and Global Parsing with
Functional (F)X-bar Theory and SCD Linguistic
Strategy. (I.+II.), Computer Science Journal of
Moldova, Academy of Science of Moldova, Vol.
14 no. 1 (40):74-102 and no. 2 (41):155-182.
Curteanu, N., D. Trandabat, G. Pavel, C. Vere�tiuc, C.
Bolea (2007): eDTLR – Thesaurus Dictionary of
the Romanian Language in electronic form. Re-
search Report at the PNCDI II Project No.
91_013/18.09.2007, Phase 2007, and (D. Cristea,
D. Tufi�, Eds.) eDTLR Parsing – The Current
Stage, Problems, and Development Solutions, Ro-
manian Academy Editorial House (in Romanian –
to appear).
DLR Revision Group (1952): Codification Rules for
the Dictionary (Thesaurus) of the Romanian Lan-
guage. Institute of Philology, Bucharest, Romanian
Academy.
Erjavec, T, Evans, R., Ide, N., Kilgariff A., (2000):
The CONCEDE Model for Lexical Databases. Re-
search Report on TEI-CONCEDE LDB Project,
Univ. of Ljubljana, Slovenia.
Hauser, R., Storrer, A. (1993). Dictionary Entry Pars-
ing Using the LexParse System. Lexikographica 9
(1993), 174-219
Kammerer, M. (2000): Wöterbuchparsing
Grundsätzliche Überlegungen und ein Kurzbericht
fiber praktische Erfahrungen, http://www.matthias-
kammerer.de/content/WBParsing.pdf
Lemnitzer, L., Kunze, C. (2005): Dictionary Entry
Parsing, ESSLLI 2005
Neff, M., Boguraev, B. (1989) Dictionaries, Diction-
ary Grammars and Dictionary Entry Parsing,
Proc. of the 27th annual meeting on Association for
Computational Linguistics Vancouver, British Co-
lumbia, Canada Pages: 91 - 101
Tufi�, Dan (2001): From Machine Readable Diction-
aries to Lexical Databases, RACAI, Romanian
Academy, Bucharest, Romania.
XCES TEI Standard, Variant P5 (2007):
http://www.tei-c.org/Guidelines/P5/
</reference>
<page confidence="0.999434">
63
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.180348">
<title confidence="0.996262">Extracting Sense Trees from the Romanian Thesaurus by Sense Segmentation &amp; Dependency Parsing</title>
<author confidence="0.993971">Neculai Curteanu Alex Moruz</author>
<affiliation confidence="0.97235625">Institute for Computer Science, Institute for Computer Science, Romanian Academy, Branch Romanian Academy, Branch ncurteanu@yahoo.com of Computer Science, I. Cuza” University,</affiliation>
<email confidence="0.75286">mmoruz@info.uaic.ro</email>
<affiliation confidence="0.999643">Institute for Computer Science,</affiliation>
<address confidence="0.640348">Academy, Branch</address>
<affiliation confidence="0.986393">Faculty of Computer Science, “Al. Cuza” University,</affiliation>
<email confidence="0.889698">dtrandabat@info.uaic.ro</email>
<abstract confidence="0.857753">Limbii Române – Romanian Language Thesaurus) entries, with significant resources to improve and enlarge the DTLR lexical semantics analysis.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="false">
<authors>
<author>1 A Ex</author>
</authors>
<booktitle>Ex.3. a)... b) ... c) ... b) [instead of d)]etc.</booktitle>
<volume>2</volume>
<pages>etc.;</pages>
<marker>Ex, </marker>
<rawString>Ex.1. A. [B. missing] ... C. etc.; Ex.2. 2. [instead of 1.]... 2. etc.; Ex.3. a)... b) ... c) ... b) [instead of d)]etc.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Cristea</author>
<author>M Raschip</author>
<author>C Forascu</author>
<author>G Haja</author>
<author>C Florescu</author>
<author>B Aldea</author>
<author>E Danila</author>
</authors>
<title>The Digital Form of the Thesaurus Dictionary of the Romanian Language.</title>
<date>2007</date>
<booktitle>In Proceedings of the 4th International IEEE Conference SpeD</booktitle>
<contexts>
<context position="1437" citStr="Cristea et al., 2007" startWordPosition="212" endWordPosition="215"> a lexical-semantic tree of senses corresponding to the meanings that define the dictionary lexical entry. The aim of this paper is to introduce a new parsing strategy for thesauri shallow parsing, called Dictionary Sense Segmentation &amp; Dependency (DSSD), devoted to the task of extracting the sense tree, i.e. the hierarchy of the lexical-semantics defined meanings for a dictionary entry. The concrete task which DSSD algorithm was used for is to obtain the sense tree from an entry of the Romanian Language Thesaurus (DTLR – Dictionarul Tezaur al Limbii Române) within the eDTLR research project (Cristea et al., 2007) devised for DTLR electronic acquisition and processing (Curteanu et al., 2007). In order to obtain the sense tree for a head word, the dictionary entry is divided into primary and secondary senses, respecting a sense hierarchy introduced by sense markers. For the DTLR dictionary, the sense markers hierarchy (presented in Section 3) includes 5 levels. Those are, from the topmost level: capital letter markers (A., B., etc.), Roman numeral markers (I., II., etc.), Arabic numeral markers (1., 2., etc.), filled diamond ♦ and empty diamond 0. Besides the Abstract This paper aims to introduce a new </context>
</contexts>
<marker>Cristea, Raschip, Forascu, Haja, Florescu, Aldea, Danila, 2007</marker>
<rawString>Cristea, D., Raschip, M., Forascu, C., Haja, G., Florescu, C., Aldea, B., Danila, E. (2007): The Digital Form of the Thesaurus Dictionary of the Romanian Language. In Proceedings of the 4th International IEEE Conference SpeD 2007.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Neculai Curteanu</author>
</authors>
<title>Augmented X-bar Schemes.</title>
<date>1988</date>
<booktitle>COLING&apos;88 Proceedings,</booktitle>
<pages>130--132</pages>
<location>Budapest,</location>
<marker>Curteanu, 1988</marker>
<rawString>Curteanu, Neculai (1988): Augmented X-bar Schemes. COLING&apos;88 Proceedings, Budapest, pp. 130-132.</rawString>
</citation>
<citation valid="true">
<authors>
<author>N Curteanu</author>
<author>E Amihaesei</author>
</authors>
<date>2004</date>
<booktitle>Grammar-based Java Parsers for DEX and DTLR Romanian Dictionaries. ECIT-2004 Conference, Iasi,</booktitle>
<location>Romania.</location>
<marker>Curteanu, Amihaesei, 2004</marker>
<rawString>Curteanu, N., E. Amihaesei (2004): Grammar-based Java Parsers for DEX and DTLR Romanian Dictionaries. ECIT-2004 Conference, Iasi, Romania.</rawString>
</citation>
<citation valid="true">
<authors>
<author>N Curteanu</author>
</authors>
<title>Local and Global Parsing with Functional (F)X-bar Theory and SCD Linguistic Strategy.</title>
<date>2006</date>
<journal>(I.+II.), Computer Science Journal of Moldova, Academy of Science of Moldova,</journal>
<volume>1</volume>
<issue>40</issue>
<pages>41--155</pages>
<contexts>
<context position="5436" citStr="Curteanu 2006" startWordPosition="817" endWordPosition="818"> sense marker classes, their dependency hyper-tree structure, and the DSSD parsing algorithm. The final Section 4 discusses the current stage implementation (in Java) of the DSSD algorithm, exposing several parsed examples. Possible sources of error and ambiguity in the DSSD parsing process are discussed, and further developments of DSSD analysis software are outlined. 2 DSSD compared to Free Text Parsing and to Dictionary ‘Standard’ Parsing This section outlines the origins of the DSSD idea, pointing out the connections between DSSD and free text parsing based on the SCD linguistic strategy (Curteanu 2006), on one hand, and between DSSD and dictionary standard parsing, e.g. (Neff, Boguraev; 1989), (Lemnitzer, Kunze; 2005), (Hauser, Storrer; 1993), on the other hand. The main difference (and positive feature) of the DSSD strategy compared to the standard approach to dictionary entry parsing (DEP), e.g. LexParse system in (Hauser, Storrer; 1993), (Kammerer; 2000), (Lemnitzer, Kunze; 2005), or JavaCC grammar-based parsing in (Curteanu, Amihaesei; 2004), is that DSSD detached completely the process of sense tree building from the process of sense definition parsing, within the DEP general task. Thi</context>
<context position="9343" citStr="Curteanu 2006" startWordPosition="1382" endWordPosition="1383">LR DTLR lexical entry (cohesion-free semantics) codification-based) sense definitons lexical entry of DTLR entries Fig. 1. DSSD vs. SCD marker classes, the corresponding semantics and textual structures entry sense tree works in an akin Breadth-First, Top-Down manner as SCD does, for those classes of markers that produce only segmentation and binary dependency between discourse segments or finite clauses, ignoring the more complex “cohesion” relationship. Thus one can rightly say that DSSD approach is derived from the SCD parsing strategy (Fig. 1). SCD parsing strategy is exposed at large in (Curteanu 2006). SCD-based discourse parsing presents a special interest for DSSD because of their (formal) algorithmic analogy. The method proposed by the SCD strategy includes building the discourse tree by the intensive use of discourse markers, while discourse segments are obtained by clause parsing. Employing the results of the SCD clausal parsing and a database which contains information about the discourse markers, one can obtain the discourse structure of a text. The outcome is represented as a discourse tree whose terminal nodes are clause-like structures, having specified on the arcs the name of th</context>
</contexts>
<marker>Curteanu, 2006</marker>
<rawString>Curteanu, N. (2006): Local and Global Parsing with Functional (F)X-bar Theory and SCD Linguistic Strategy. (I.+II.), Computer Science Journal of Moldova, Academy of Science of Moldova, Vol. 14 no. 1 (40):74-102 and no. 2 (41):155-182.</rawString>
</citation>
<citation valid="true">
<authors>
<author>N Curteanu</author>
<author>D Trandabat</author>
<author>G Pavel</author>
<author>C Vere�tiuc</author>
<author>C Bolea</author>
</authors>
<title>eDTLR – Thesaurus Dictionary of the Romanian Language in electronic form.</title>
<date>2007</date>
<booktitle>Research Report at the PNCDI II Project No. 91_013/18.09.2007, Phase</booktitle>
<note>to appear).</note>
<marker>Curteanu, Trandabat, Pavel, Vere�tiuc, Bolea, 2007</marker>
<rawString>Curteanu, N., D. Trandabat, G. Pavel, C. Vere�tiuc, C. Bolea (2007): eDTLR – Thesaurus Dictionary of the Romanian Language in electronic form. Research Report at the PNCDI II Project No. 91_013/18.09.2007, Phase 2007, and (D. Cristea, D. Tufi�, Eds.) eDTLR Parsing – The Current Stage, Problems, and Development Solutions, Romanian Academy Editorial House (in Romanian – to appear).</rawString>
</citation>
<citation valid="true">
<title>Codification Rules for the Dictionary (Thesaurus) of the Romanian Language. Institute of Philology,</title>
<date>1952</date>
<institution>DLR Revision Group</institution>
<location>Bucharest, Romanian Academy.</location>
<marker>1952</marker>
<rawString>DLR Revision Group (1952): Codification Rules for the Dictionary (Thesaurus) of the Romanian Language. Institute of Philology, Bucharest, Romanian Academy.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Erjavec</author>
<author>R Evans</author>
<author>N Ide</author>
<author>A Kilgariff</author>
</authors>
<title>The CONCEDE Model for Lexical Databases.</title>
<date>2000</date>
<institution>Univ. of Ljubljana, Slovenia.</institution>
<note>Research Report on TEI-CONCEDE LDB Project,</note>
<contexts>
<context position="14347" citStr="Erjavec et al. 2000" startWordPosition="2127" endWordPosition="2130">. The advantage of the proposed DSSD approach is that it “ignores”, at least in the beginning, the “details” of sense definitions, concentrating only on the sense marker discovery and their dependency establishing. The result is that DSSD parsing concentrates on and obtains, in the first place, the sense tree of a DTLR entry. Of course, parsing of a dictionary entry does not means only its sense tree, but the entry sense tree represents the essential, indispensable structure for any kind of DEP. Based on different types of DTD standards for dictionary text representation, such as CONCEDE-TEI (Erjavec et al. 2000; Kilgarriff 1999, Tufis 2001) or (XCES-TEI; 2007), the parsing process may continue “in depth” for identifying the (other important) fields of sense and sub-sense definitions. DSSD strategy has the quality of being able to compute independently the entry sense tree, prior to the process of sense definition parsing. Subsequently, the process of parsing the sense definitions can be performed separately, one by one, avoiding the current situation when the general parsing of an entry may be stopped simply because of a single (even if the last one) unparsable sense definition. The procedural pseud</context>
</contexts>
<marker>Erjavec, Evans, Ide, Kilgariff, 2000</marker>
<rawString>Erjavec, T, Evans, R., Ide, N., Kilgariff A., (2000): The CONCEDE Model for Lexical Databases. Research Report on TEI-CONCEDE LDB Project, Univ. of Ljubljana, Slovenia.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Hauser</author>
<author>A Storrer</author>
</authors>
<title>Dictionary Entry Parsing Using the LexParse System.</title>
<date>1993</date>
<journal>Lexikographica</journal>
<volume>9</volume>
<pages>174--219</pages>
<marker>Hauser, Storrer, 1993</marker>
<rawString>Hauser, R., Storrer, A. (1993). Dictionary Entry Parsing Using the LexParse System. Lexikographica 9 (1993), 174-219</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Kammerer</author>
</authors>
<title>Wöterbuchparsing Grundsätzliche Überlegungen und ein Kurzbericht fiber praktische Erfahrungen,</title>
<date>2000</date>
<location>http://www.matthiaskammerer.de/content/WBParsing.pdf</location>
<contexts>
<context position="12843" citStr="Kammerer, 2000" startWordPosition="1893" endWordPosition="1894"> definitions are parsed). Notice: MarkerNumber is the number of the input marker sequence. If(Success) 3 Attach Sense-k Definition to Node-k; Else Attach Sense-k Parsing Result to Node-k; Node-k = getNextDepthFirstNode(EntrySenseTree) Continue EndWhile. Output: EntrySenseTree with Parsed or Unparsed Sense Definitions Fig. 2. A macro-code comparison of classical and DSSD parsing strategies 2.2 DSSD Approach vs. Standard DEP Another perspective on DSSD is outlined in this section: the novelties of DSSD approach fetched to the standard DEP, e.g. (Neff, Boguraev; 1989), (Lemnitzer, Kunze; 2005), (Kammerer, 2000). DSSD applies the same “technology” as SCD strategy does, i.e. marker classes, specific hierarchies, and adequate searching procedures embedded and governing the parsing algorithms. Most important, DSSD parse and construct the sense tree of a (DTLR) dictionary entry, independently of, and possibly lacking the, DTLR sense definition parsing process. In the standard DEP, including the Javagrammar based construction of parsers in the JavaCC environment (Curteanu, Amihaesei, 2004; Curteanu et al., 2007), building the sense tree for an entry is inherently embedded into the general process of parsi</context>
</contexts>
<marker>Kammerer, 2000</marker>
<rawString>Kammerer, M. (2000): Wöterbuchparsing Grundsätzliche Überlegungen und ein Kurzbericht fiber praktische Erfahrungen, http://www.matthiaskammerer.de/content/WBParsing.pdf</rawString>
</citation>
<citation valid="true">
<authors>
<author>L Lemnitzer</author>
<author>C Kunze</author>
</authors>
<title>Dictionary Entry Parsing,</title>
<date>2005</date>
<location>ESSLLI</location>
<marker>Lemnitzer, Kunze, 2005</marker>
<rawString>Lemnitzer, L., Kunze, C. (2005): Dictionary Entry Parsing, ESSLLI 2005</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Neff</author>
<author>B Boguraev</author>
</authors>
<title>Dictionaries, Dictionary Grammars and Dictionary Entry Parsing,</title>
<date>1989</date>
<booktitle>Proc. of the 27th annual meeting on Association for Computational Linguistics</booktitle>
<pages>91--101</pages>
<location>Vancouver, British Columbia, Canada Pages:</location>
<marker>Neff, Boguraev, 1989</marker>
<rawString>Neff, M., Boguraev, B. (1989) Dictionaries, Dictionary Grammars and Dictionary Entry Parsing, Proc. of the 27th annual meeting on Association for Computational Linguistics Vancouver, British Columbia, Canada Pages: 91 - 101</rawString>
</citation>
<citation valid="true">
<authors>
<author>Dan Tufi�</author>
</authors>
<title>From Machine Readable Dictionaries to Lexical Databases, RACAI, Romanian Academy,</title>
<date>2001</date>
<location>Bucharest, Romania.</location>
<marker>Tufi�, 2001</marker>
<rawString>Tufi�, Dan (2001): From Machine Readable Dictionaries to Lexical Databases, RACAI, Romanian Academy, Bucharest, Romania.</rawString>
</citation>
<citation valid="true">
<authors>
<author>XCES TEI Standard</author>
</authors>
<date>2007</date>
<location>Variant</location>
<marker>Standard, 2007</marker>
<rawString>XCES TEI Standard, Variant P5 (2007):</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>