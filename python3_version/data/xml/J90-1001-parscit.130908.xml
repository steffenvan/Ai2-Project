<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<title confidence="0.573876">
CATEGORIAL SEMANTICS AND SCOPING
</title>
<author confidence="0.668778">
Fernando C. N. Pereira
</author>
<subsectionHeader confidence="0.570849333333333">
AT &amp; T Bell Laboratories
600 Mountain Ave.
Murray Hill, NJ 07974
</subsectionHeader>
<bodyText confidence="0.9779135">
Certain restrictions on possible scopings of quantified noun phrases in natural language are usually expressed
in terms of formal constraints on binding at a level of logical form. Such reliance on the form rather than the
content of semantic interpretations goes against the spirit of compositionality. I will show that those scoping
restrictions follow from simple and fundamental facts about functional application and abstraction, and can
be expressed as constraints on the derivation of possible meanings for sentences rather than constraints of
the alleged forms of those meanings.
</bodyText>
<sectionHeader confidence="0.969057" genericHeader="method">
1 AN OBVIOUS CONSTRAINT?
</sectionHeader>
<bodyText confidence="0.996713428571429">
Treatments of quantifier scope in Montague grammar
(Montague 1973; Dowty et al. 1981; Cooper 1983), trans-
formational grammar (Reinhart 1983; May 1985; Heim
1982; Roberts 1987), and computational linguistics (Hobbs
and Shieber 1987; Moran 1988; Alshawi et al. 1989) have
depended implicitly or explicitly on a constraint on possible
logical forms to explain why examples&apos; such as
</bodyText>
<listItem confidence="0.9993305">
1. *A woman who saw every man disliked him
are ungrammatical, and why in examples such as
2. Every man saw a friend of his
3. Every admirer of a picture of himself is vain
</listItem>
<bodyText confidence="0.993064888888889">
the every. . . noun phrase must have wider scope than the a
. . . noun phrase if the pronoun in each example is assumed
to be bound by its antecedent. What exactly counts as
bound anaphora varies between different accounts of the
phenomena, but the rough intuition is that semantically a
bound pronoun plays the role of a variable bound by the
logical form (a quantifier) of its antecedent. Example (1)
above is then &amp;quot;explained&amp;quot; by noting that its logical form
would be something like
</bodyText>
<sectionHeader confidence="0.359405" genericHeader="method">
3 w.woman(w) A (Vm.man(m) saw(w, m))
A disliked(w, m)
</sectionHeader>
<bodyText confidence="0.974966283018868">
but this is &amp;quot;ill-formed&amp;quot; because variable m occurs as an
argument of disliked outside the scope of its binder Vm .2
As for Examples (2) and (3), the argument is similar: wide
scope for the logical form of the a . . . noun phrase would
leave an occurrence of the variable that the logical form of
every. . . binds outside the scope of this quantifier. For lack
of an official name in the literature for this constraint, I will
call it here the free-variable constraint.
In accounts of scoping possibilities based on quantifier
raising or storage (Cooper 1983; van Eijck 1985; May
1985; Hobbs and Shieber 1987) the free-variable con-
straint is enforced either by keeping track of the set of free
variables free (q) in each raisable (storable) term q and
when x E free (q) blocking the raising of q from any
context Bx.t in which x is bound by some binder B, or by
checking after all applications of raising (unstoring) that
no variable occurs outside the scope of its binder.
The argument above is often taken to be so obvious and
uncontroversial that it warrants only a remark in passing, if
any (Cooper 1983; Reinhart 1983; Partee and Bach 1984;
May 1985; van Riemsdijk and Williams 1986; Williams
1986; Roberts 1987), even though it depends on nontrivial
assumptions on the role of logical form in linguistic theory
and semantics.
First of all, and most immediately, there is the require-
ment for a logical-form level of representation, either in the
predicate-logic format exemplified above or in some tree
format as is usual in transformational grammar (Heim
1982; Cooper 1983; May 1985; van Riemsdijk and Williams
1986; Williams 1986; Roberts 1987).
Second, and most relevant to Montague grammar and
related approaches, the constraint is given in terms of
restrictions on formal objects (logical forms), which in turn
are related to meanings through a denotation relation.
However, compositionality as it is commonly understood
requires meanings of phrases to be functions of the mean-
ings rather than the forms of their constituents. This is a
problem even in accounts based on quantifier storage (Coo-
per 1983; van Eijck 1985), which are precisely designed, as
van Eijck puts it, to &amp;quot;avoid all unnecessary reference to
properties of . . . formulas&amp;quot; (van Eijck 1985, p. 214). In
fact, van Eijck proposes an interesting modification of
Cooper storage that avoids Cooper&apos;s reliance on forbidding
vacuous abstraction to block out cases in which a noun
phrase is unstored while a noun phrase contained in it is still
in store. However, this restriction does not deal with the
case being addressed here.
Computational Linguistics Volume 16, Number 1, March 1990 1
Fernando C. N. Pereira Categorial Semantics and Scoping
It is also interesting to observe that a wider class of
examples of forbidden scopings would have to be consid-
ered if raising out of relative clauses were allowed, for
example in
</bodyText>
<listItem confidence="0.851532">
4. An author who John has read every book by arrived
</listItem>
<bodyText confidence="0.9998732">
In this example, if we did not assume the restriction against
raising from relative clauses, the every . . . noun phrase
could in principle be assigned widest scope, but this would
be blocked by the free-variable constraint as shown by the
occurrence of a free as an argument of book-by in
</bodyText>
<equation confidence="0.518988">
V b.book-by(b, a) = ( 3 a.author(a)
A has-read( john, b) A arrived(a))
</equation>
<bodyText confidence="0.985620617647059">
That is, the alleged constraint against raising from rela-
tives, for which many counterexamples exist (Vanlehn
1978), blocks some derivations in which otherwise the
free-variable constraint would be involved, specifically those
associated to syntactic configurations of the form
[NP, • • • N [s ••• [NP.i Xi
where X, is a pronoun or trace coindexed with NP, and NPi
is a quantified noun phrase. Since some of the most exten-
sive Montague grammar fragments in the literature (Dowty
et al. 1981; Cooper 1983) do not cover the other major
source of the problem, PP complements of noun phrases
(replace S by PP in the configuration above), the question is
effectively avoided in those treatments.
Conversely, it could be argued that the free-variable
constraint is responsible for forcing a quantifier to raise
outside a relative clause in examples such as
5. The slush fund that every minister needs is kept by his
private secretary.
Here, the coindexing of every minister and his forces the
former to be scoped outside the main clause, and thus
outside the relative clause in which it occurs.
The main goal of this paper is to argue that the free-
variable constraint is actually a consequence of basic seman-
tic properties that hold in a semantic domain allowing
functional application and abstraction, and are thus inde-
pendent of a particular logical-form representation. As a
corollary, I will also show that the constraint is better
expressed as a restriction on the derivations of meanings of
sentences from the meanings of their parts rather than a
restriction on logical forms. The resulting system is related
to the earlier system of conditional interpretation rules
developed by Pollack and Pereira (1988), but avoids that
system&apos;s use of formal conditions on the order of assump-
tion discharge.
</bodyText>
<sectionHeader confidence="0.980079" genericHeader="method">
2 CURRY&apos;S CALCULUS OF FUNCTIONALITY
</sectionHeader>
<bodyText confidence="0.998386833333333">
Work in combinatory logic and the A-calculus is concerned
with the elucidation of the basic notion of functionality:
how to construct functions, and how to apply functions to
their arguments. There is a very large body of results in this
area, of which I will need only a very small part.
One of the simplest and most elegant accounts of func-
tionality, originally introduced by Curry and Feys (1968)
and further elaborated by other authors (Stenlund 1972;
Laimbek 1980; Howard 1980) involves the use of a logical
calculus to describe the types of valid functional objects. In
a natural-deduction format (Prawitz 1965), the calculus
can be simply given by the following two rules:
</bodyText>
<figure confidence="0.993212">
(a)
a a i(3
a
</figure>
<bodyText confidence="0.997719714285714">
The first rule states that the result of applying a function
from objects of type a to objects of type 0 (a function of
type a 0) to an object of type a is an object of type
The second rule states that if from an arbitrary object of
type a it is possible to construct an object of type 0, then
one has a function from objects of type a to objects of type
0. In this rule and all that follow, the parenthesized formula
at the top indicates the discharge of an assumption intro-
duced in the derivation of the formula below it. Precise
definitions of assumption and assumption discharge are
given below.
The typing rules can be directly connected to the use of
the A-calculus to represent functions by restating them as
follows:
</bodyText>
<equation confidence="0.986799">
(x : a)
u:a u:8
[app]: v(u) : [aloe] .
</equation>
<bodyText confidence="0.999464">
A formula u: a will be called a type assignment, assigning
the type a to term u. Thus, the two rules above state that if
u has type a and v has type a 0 then v(u) has type 0, and
if by assuming that x has type a, we can show that u
(possibly containing x) has type 0, then the function repre-
sented by Xx.0 has type a 0. In the rest of this paper, the
term functionality rules will refer to these rules.
Notation As usual in categorial analyses of natural lan-
guage, types are built from the basic types e for individuals
and t for propositions. In function types, the constructor
associates to the right. Following this type system (no tuple
types) expressions will be written in a &amp;quot;curried&amp;quot; notation.
For example, a binary relation r over individuals will have
type e e and its application to arguments x and y
will be written r(x)(y). Since the usual semantic analysis
has a transitive verb combining first with its object and then
with its subject, the meaning of sentence such as &amp;quot;John
loves Mary&amp;quot; will be represented by loves(m)(j).
For a first example of how the functionality rules may be
used in semantic interpretation, I will consider the deriva-
tion in Figure 1 of a simplified meaning for the topicalized
</bodyText>
<page confidence="0.86859">
2 Computational Linguistics Volume 16, Number 1, March 1990
</page>
<figure confidence="0.612568">
Fernando C. N. Pereira Categorial Semantics and Scoping
hates hates: e—*e—&gt;t x: el
Mary m: e [app] hates(x): e—&gt;t
[app] hates(x)(m): t
John X.x.hates(x)(m): e—&gt;t1
[app] hates(j)(m): t
</figure>
<figureCaption confidence="0.982063">
Figure 1 Using the Functionality Rules.
</figureCaption>
<bodyText confidence="0.986051166666667">
sentence &amp;quot;John, Mary hates&amp;quot;.3 The derivation is repre-
sented by a tree in which leaf nodes are labeled by assump-
tions and nonleaf nodes are labeled by the results of rule
applications. Several aspects of the overall approach ap-
pear in this example. Each type assignment in the deriva-
tion is associated to one phrase whose meaning it repre-
sents, and is derived by applying the functionality rules to
type assignments associated with the constituents of the
phrase. The meanings of words in the sentence enter as
assumptions in the derivation, which are left undischarged.
In the figure, type assignments are labeled either by the
lexical item that led to their introduction as assumptions or
by the name of the rule applied to derive the type assign-
ment. Superscripts are used to link the result of an applica-
tion of rule [abs] to the assumptions discharged by that
application. The derivation follows closely the syntax of the
sentence. Specifically, the assumptions j : e, m: e, and
hates: e e t correspond to the words &amp;quot;John,&amp;quot; &amp;quot;Mary,&amp;quot;
and &amp;quot;hates&amp;quot; in the sentence, and the assumption x: e
corresponds to the topicalization trace.
To make precise what inferences are possible in the
calculus of functionality, we need a precise notion of deriva-
tion. It turns out that seemingly small differences in this
have important consequences as to what type assignments
can be derived. The following definition is adapted from
that of Prawitz (1965). A derivation is a tree with each
node n labeled by a type assignment 4)(n) (the conclusion of
the node) and by a set F(n) of type assignments giving the
assumptions of ck(n). In addition, a derivation D satisfies
the following conditions:
</bodyText>
<listItem confidence="0.994538">
1. Each leaf node n has its labeling type assignment as
single assumption, that is r(n) = {(n)}.
2. Each nonleaf node n corresponds either to an applica-
tion of [app], in which case it has two daughters m and m&apos;
</listItem>
<bodyText confidence="0.7387">
with 4)(m) = u : a, 4)(m&apos;) = v: a 0(n) = v(u) :
and F(n) = F(m) U F(m&apos;), or to an application of [abs],
in which case n has a single daughter m, and 4)(m) = u : 0,
</bodyText>
<listItem confidence="0.7715785">
(1)(n) = Xx.0 : a —.13, and F(n) = F(m) — : al.
3. No node assumption set contains two assumptions x : a
and x : 0 for the same variable x.
If n is the root node of a derivation D, we say that D is a
derivation of OW from the assumptions F(n) and write
r(n) I- 0(n).
</listItem>
<bodyText confidence="0.999679825">
Condition 2 allows empty abstraction, that is, the appli-
cation of rule [abs] to some type assignment u: 0 even if x:
a is not one of the assumptions of u : 6. This is necessary for
the Curry calculus, which describes all typed X-terms,
including those with vacuous abstraction, such as the poly-
morphic K combinator Xx.Xy.x cf—■ (0—* a). However, in
the present work, every abstraction needs to correspond to
an actual functional dependency of the interpretation of a
phrase on the interpretation of one of its constituents.
Condition 2 can be easily modified to block vacuous abstrac-
tion by requiring that x : a E F(m) for the application of
the [abs] rule to a derivation node m.
Condition 3 is a technical restriction to ensure that a
given variable is not abstracted more than once. That this
restriction does not affect the class of well-typed functions
follows immediately from the observation that any X-term
can be a-converted to an equivalent one in which all bound
variables are distinct.
The definition of derivation can be generalized to arbi-
trary rules with n premises and one conclusion by defining a
rule of inference as a n + 1-place relation on pairs of type
assignments and assumption sets. For example, elements of
the [app] relation would have the general form ( (u :a,
F1), ( v : a (3, r2), (v(u) ri u r2)), while elements
of the [abs] rule without vacuous abstraction would have
the form ( ( u : 6, F ), ( Xx.0 : a—$, — tx : al)) when-
ever x : a E F. This definition should be kept in mind when
reading the derived rules of inference presented informally
in the rest of the paper.
The natural-deduction format we have been using is
intuitively quite appealing but does not make it easy to
discriminate among different possible treatments of assump-
tions, and their effects on what types are derivable. For this,
it is better to use a Gentzen-style sequent format in which
the assumptions for a type assignment are carried explic-
itly. In a fairly general setting, a sequent F I- A is a pair of a
sequence F of assumptions and a type assignment A, with
the intuitive meaning that A follows from the assumptions
F. The rules of application and abstraction take then the
form
</bodyText>
<equation confidence="0.9937625">
x:a,F1-u:$ FI-u:a 6
r xx.0 : a —÷ (3 r, I- v(u) :
</equation>
<bodyText confidence="0.871525714285714">
It is easy to see that, except for the use of sequences rather
than sets, these two rules correspond directly to the opera-
tions of type assignments and assumptions sets described
under condition 2 above. Furthermore, condition 1 corre-
sponds in this system to making each sequent A I- A, where
A is some type assignment, an axiom. Finally, the fact that
we are interested in assumptions sets rather than assump-
tion sequences is encoded by the following three structural
rules (Girard et al. 1989):
[exchange] .
F, B, A, A C
F, A, B, A C
Computational Linguistics Volume 16, Number 1, March 1990 3
Fernando C. N. Pereira Categorial Semantics and Scoping
</bodyText>
<equation confidence="0.611925">
[weakening] .
A, r F B
</equation>
<bodyText confidence="0.94531324137931">
The exchange rule allows us to ignore assumption order, so
the collection of assumptions forms a bag rather than a set.
Adding contraction permits us to ignore the number of
occurrences of an assumption, that is, the assumption
collection is treated as a set. Without contraction, no
variable can have more than one occurrence. Finally, weak-
ening allows irrelevant elements to be added to the assump-
tions without changing what follows from them. Without it,
vacuous abstraction is not possible, since weakening pro-
vides the only means of introducing a variable in an assump-
tion without having it also in the conclusion (as axioms
require).
Choices of structural rules and other constraints on
allowed sequents lead to a categorial hierarchy whose
members are systems with varying semantic powers of
semantic combination (Moortgat 1988; van Bentham 1989).
If we ignore the associated X-expressions and consider only
the types, the types derivable using the full set of rules are
exactly the consequences of the three axioms a — a,
a (f3 a), and (cy (0 7)) ((a (3)
(a 7)), which are the polymorphic types of the three
combinators I, K, and S that generate all the closed typed
X-calculus terms. Furthermore, if we interpret —■ as impli-
cation, these theorems are exactly those of the pure implica-
tional fragment of intuitionistic propositional logic (Curry
and Feys 1968; Anderson and Belnap Jr. 1975). In con-
trast, without weakening (vacuous abstraction) we have the
weaker system of pure relevant implication R _ (Anderson
and Belnap 1975).
</bodyText>
<sectionHeader confidence="0.998392" genericHeader="method">
3 SEMANTIC COMBINATIONS AND THE
CURRY CALCULUS
</sectionHeader>
<bodyText confidence="0.9987385">
In one approach to the definition of allowable semantic
combinations, the possible meanings of a phrase are exactly
those whose type can be derived by the rules of a semantic
calculus from axioms giving the types of the lexical items in
the phrase. However, this is far too liberal in that the
possible meanings of English phrases do not depend only on
the types involved but also on the syntactic structure of the
phrases. A possible way out is to encode the relevant
syntactic constraints in a more elaborate and restrictive
system of types and rules of inference. The prime example
of a more constrained system is the Lambek calculus
(Lambek 1958) and its more recent elaborations within
categorial grammar and semantics (van Benthem 1986a,
1986b; Hendriks 1987; Moortgat 1988). In particular,
Hendriks (1987) proposes a system for quantifier raising,
which however is too restrictive in its coverage to account
for the phenomena of interest here.
Instead of trying to construct a type system and type
rules such that free application of the rules starting from
appropriate lexical axioms will generate all and only the
possible meanings of a phrase, I will instead take a more
conservative route related to Montague grammar and early
versions of GPSG (Gazdar 1982), and use syntactic analy-
ses to control semantic derivations.
First, a set of derived rules will be used in addition to the
basic rules of application and abstraction. Semantically,
the derived rules will add no new inferences, since they will
merely codify inferences already allowed by the basic rules
of the calculus of functionality. However, they provide the
semantic counterparts of certain syntactic rules.
Second, the use of some semantic rules must be licensed
by a particular syntactic rule and the premises in the
antecedent of the semantic rule must correspond in a
rule-given way to the meanings of the constituents com-
bined by the syntactic rule. As a simple example using a
context-free syntax, the syntactic rule S NP VP might
license the function application rule [app] with e the type
of the meaning of the NP and e t the type of the
meaning of the VP.
Third, the domain of types will be enriched with a few
new type constructors, in addition to the function type
constructor From the semantic point of view, these type
constructors add no new types, but allow a convenient
encoding of rule applicability constraints motivated by
syntactic considerations. This enrichment of the formal
universe of types for syntactic purposes is familiar from
Mont ague grammar (Montague 1973), where it is used to
distinguish different syntactic realizations of the same se-
mantic type, and from categorial grammar (Lambek 1958;
Steeclman 1987), where it is used to capture syntactic word
order constraints.
Together, the above refinements allow the syntax of
language to restrict what potential semantic combinations
are actually realized. Any derivations will be sound with
respect to [app] and [abs], but many derivations allowed
by these rules will be blocked.
</bodyText>
<sectionHeader confidence="0.99737" genericHeader="method">
4 DERIVED RULES
</sectionHeader>
<bodyText confidence="0.9859845">
For the derived rules, we enrich the type system with a
formal type constructor quant (q), where q is a quantifier,
that is, a value of type (e t) t, and two type constants
(nullary constructors) pron for pronoun assumptions and
trace for traces in relative clauses. It is important to
observe that the types resulting from the application of
these constructors are not to be taken as being subtypes of
e, and thus the rules involving them should not be seen as
type subsumption rules. Instead, the new formal type con-
structors serve to constrain possible derivations in a similar
way to the directed function type constructors of Lambek
calculus (Lambek 1958) or the extraction constructor used
by Moortgat to handle long-distance dependencies (Moort-
gat 1988).
Because of their particular nature, the formal type con-
structors are handled in a special way diverging somewhat
</bodyText>
<figure confidence="0.76219925">
[contraction] :
A, r B
A, A, r F B
r B
</figure>
<sectionHeader confidence="0.549575" genericHeader="method">
4 Computational Linguistics Volume 16, Number 1, March 1990
</sectionHeader>
<bodyText confidence="0.978071375">
Fernando C. N. Pereira Categorial Semantics and Scoping
from the usual structure of natural-deduction proof sys-
tems. Specifically, each formal type constructor is intro-
duced as an assumption by appropriate syntactic licensing.
However, the types resulting from the formal constructors
do not combine with any other types, so the only way of
having the associated variables participate in a derivation is
to apply immediately licensing rules that replace the for-
mal type by an appropriate semantic type (e in all cases
considered here). Paired with these rules we have abstrac-
tion rules that discharge formal type assumptions by ab-
straction. Nevertheless, we will see that from a derivation
involving these rules where all the formal type assumptions
have been discharged, it is straightforward to construct a
derivation in the functionality calculus starting from the
same lexical assumptions and yielding the same result.
</bodyText>
<subsectionHeader confidence="0.991249">
4.1 TRACE LICENSING AND ABSTRACTION
</subsectionHeader>
<bodyText confidence="0.995582">
The following two rules deal with traces and the meaning of
relative clauses:
</bodyText>
<equation confidence="0.923127">
(x : trace)
</equation>
<bodyText confidence="0.992598909090909">
Rule [trace-lic] is licensed by the occurrence of a trace in
the syntax, and rule [trace-abs] by the construction of a
relative clause from a sentence containing a trace.4
Since no rule can derive an expression of type trace,
expressions of that type can only appear as assumptions.
Furthermore, no rule except [trace-lid ] accepts premises of
that type. Therefore, in a completed derivation any occur-
rence of an expression of type trace must be a premise of
[trace-lid ] and be later discharged by a use of [trace-abs].
That is, use of the trace rules will always lead to derivations
matching the following schema
</bodyText>
<equation confidence="0.981462">
x : trace&apos;
x : e
</equation>
<bodyText confidence="0.9997369">
Consequently, any type assignment derived with the help of
the trace rules could already have been derived with [app]
and [atm] alone, as was claimed in the previous section.
Figure 2 shows the application of the trace rules to the
derivation of an interpretation for the N &amp;quot;car that John
owns,&amp;quot; with the assumption that the relative pronoun &amp;quot;that&amp;quot;
has type that: (e t) (e t) (e t), that is, a
function that combines two properties into a property.
With the further assumption that &amp;quot;that&amp;quot; corresponds in
this case to property conjunction
</bodyText>
<listItem confidence="0.3303746">
that cle- Xr.Xn.Xx.n(x) A r(x),
the result of the derivation can be reduced to the more
familiar form
Xx.car(x) A own(x)( j)
that is, the property of being a car that John owns.
</listItem>
<sectionHeader confidence="0.8450365" genericHeader="method">
4.2 BOUND ANAPHORA LICENSING AND
ABSTRACTION
</sectionHeader>
<bodyText confidence="0.99999335">
The analysis of bound anaphora brings up a wide range of
issues in syntax, semantics, and pragmatics, most of which
I will ignore in this paper. I will assume that possible
coreferences are determined elsewhere and that the role of
the bound anaphora rules here is simply to derive the
appropriate semantic interpretation for phrases involving
pronouns. Two approaches are possible here. Working with
the functionality rules alone, a noun phrase will be associ-
ated to an assumption of the form u : e. The interpretation
of a pronoun coindexed with that noun phrase will be
another occurrence of the assumption. When the anteced-
ent is a trace or a quantified noun phrase (interpretation of
quantified noun phrases is discussed in the next section),
the assumption will eventually be discharged. The defini-
tion of derivation in Section 2 ensures that all occurrences
of u will be bound by the same application of [atm].
The second approach relies on a pair of derived rules,
pronoun licensing and abstraction. These rules of course do
not add new semantic consequences, but facilitate the
representation of the syntactic licensing of bound ana-
</bodyText>
<equation confidence="0.978962285714286">
x : trace r : t
[trace-abs] . Xx.r : e t
[trace-lid] :
x : e
y: trace
r :t
Xx.r : e t&apos;
</equation>
<bodyText confidence="0.8644465">
But this can be mapped directly into the schematic deriva-
tion
</bodyText>
<equation confidence="0.5623401">
x : e
owns own: e-4e-t y: e [trace-tic]
John j: e own(y): e.t [app]
own(y)a): t [app]
that that:(e-q)-■(e-)t)-+(e-&gt;t) Xy.own(y)(j): (trace-abs]
car car: e--)t that(Xy.own(y)()): Ce-at )-*[e-at) [app]
that(Xy.own(y)(j))(car): e-at [app]
Figure 2 Using the Trace Rules.
r: t
Xx.r : e t&apos;
</equation>
<bodyText confidence="0.863021666666667">
Computational Linguistics Volume 16, Number 1, March 1990 5
Fernando C. N. Pereira Categorial Semantics and Scoping
phora. The two rules are as follows:
</bodyText>
<equation confidence="0.99759325">
(x : pron)
x : pron s :•a u : 13
[pron-lic] : [pron-abs]
x : e . (Xx.$)(u) : a
</equation>
<bodyText confidence="0.976327666666667">
The pronoun resolution rule [pron-abs] applies only when
u : ,3 is an undischarged assumption of s : a such that either
13 is trace or quant (q) for some quantifier q, or the
assumption is licensed by some proper noun.
These rules deal only with the construction of the mean-
ing of phrases containing bound anaphora. In a more
detailed grammar, the licensing of both rules would be
further restricted by linguistic constraints on coreference—
for instance, those usually associated with c-command
(Reinhart 1983), which seem to need access to syntactic
information (Williams 1986). In particular, the rules as
given do not by themselves enforce any constraints on the
possible antecedents of reflexives.
The soundness of the rules can be seen by noting that the
schematic derivation
</bodyText>
<equation confidence="0.9995875">
x : pro&amp;
x : e
s : a u : 13
(Xx.$)(u) : al
</equation>
<bodyText confidence="0.968474">
corresponds simply to a schematic derivation involving
multiple uses of the assumption u :
</bodyText>
<equation confidence="0.979445">
u:fl• • •u:f3
s[x I u] : a
</equation>
<bodyText confidence="0.9890465">
where s [x/u ] denotes the result of substituting u for every
free occurrence of x in s.
Figure 3 shows a simple derivation involving the pronoun
rules. The last derivation node in the figure is the applica-
tion of [pron-abs] to the assumption to be discharged
x : pron and the antecedent assumption j: e, with result
(Xx.bored (x)( j))( j) im bored ( j)( j). A more interesting
case, involving interactions between pronoun and quantifier
assumptions, occurs in the derivation of Figure 5 for sen-
tence (2).
</bodyText>
<subsectionHeader confidence="0.99776">
4.3 QUANTIFIER RAISING
</subsectionHeader>
<bodyText confidence="0.998873666666667">
The rules discussed earlier provide some of the auxiliary
machinery required to illustrate the free-variable con-
straint. However, the main burden of enforcing the con-
</bodyText>
<figure confidence="0.949911">
himself pron&apos;
bored bored. e—)e-4t e [pron-lic]
John j: e bored(x): e--)t [app]
bored(x)(j): t [app]
bored(j)(j): t [pron-abs]
</figure>
<figureCaption confidence="0.992822">
Figure 3 Using the Pronoun Rules.
</figureCaption>
<bodyText confidence="0.990971761904762">
straint falls on the rules responsible for quantifier raising,
and therefore I will cover in somewhat greater detail the
derivation of those rules from the basic rules of functional-
ity.
I will follow here the standard view (Montague 1973;
Barwise and Cooper 1981) that the meanings of natural
language determiners are generalized quantifiers, with
type (e t) (e t) t. For example, the meaning of
every would be Xr.Xs.V x.r(x) s(x), and the meaning of
the noun phrase every man Xs.V x.man(x) s(x). To
interpret the combination of a quantified noun phrase with
the phrase containing it that forms its scope, we apply the
meaning of the noun phrase to a property s derived from the
meaning of the scope. The purpose of devices such as
quantifying-in in Montague grammar, Cooper storage, or
quantifier raising in transformational grammar is to deter-
mine a scope for each noun phrase in a sentence. From a
semantic point of view, the combination of a noun phrase
with its scope, most directly expressed by Montague&apos;s
quantifying-in rules,5 corresponds to the following sche-
matic derivation in the functionality calculus
</bodyText>
<equation confidence="0.99978475">
x : el
s : t
Xx.s : e tl q : (e t
q(Xx.$) : t
</equation>
<bodyText confidence="0.999940125">
where the assumption x: e is introduced in the derivation
at a position corresponding to the occurrence in the sen-
tence of the noun phrase with meaning q. In Montague
grammar, this correspondence is enforced by using a notion
of syntactic combination that does not respect the syntactic
structure of sentences with quantified noun phrases. Coo-
per storage was in part developed to cure this deficiency.
The following derived rules achieve the same effect:
</bodyText>
<figure confidence="0.6840098">
6.
6 Computational Linguistics Volume 16, Number 1, March 1990
Categorial Semantics and Scoping
Fernando C. N. Pereira
form
</figure>
<equation confidence="0.738483166666667">
y : al
[quant-lic] .
x : e
(x : quant(q))
q : (e t x : quant(q)
[quant-abs] . q(Xx.$) : t
</equation>
<tableCaption confidence="0.4769898">
Rule [quant-lic] is licensed by a quantified noun phrase.
Rule [quant-abs] is not keyed to any particular syntactic
construction, but instead may be applied whenever its
premises are satisfied. It is easy to see that any use of
[quant-lic] and [quant-abs] in a derivation
</tableCaption>
<equation confidence="0.998645285714286">
q : (e t x : quant(q)1
x : e
q : (e t x : quant(q)2
x : e
U : 131
s : t
q(Xx.$) : t2
</equation>
<bodyText confidence="0.974878666666667">
that is, derivations in which an assumption is discharged
after assumptions it depends on. But such a derivation
maps to the following in the functionality calculus:
</bodyText>
<equation confidence="0.99970475">
s : t
x: e2
s : t
q(Xx.$) :
</equation>
<bodyText confidence="0.9407886">
can be justified by translating it into an instance of the
schematic derivation (6). Furthermore, quantifier assump-
tions can only arise and be discharged in this way.
Figure 4 shows the use of the quantification rules in a
derivation for the preferred reading of the sentence &amp;quot;Every
guest brought a dish.&amp;quot; The other reading could be derived
in a similar manner.
Now, the free-variable constraint plays a role in situa-
tions in which the quantifier itself depends on assumptions
that must be discharged, and forbids derivations of the
</bodyText>
<figure confidence="0.91849775">
every guest
every: (e—&gt;t)--4(e—)t)-4t guest: e—*t
[am] every(guest): (e-4t)—)t g: qu ant(ev ery ( gue s 0)2
a dish
[quant-lic] g. e a: (e-40—,(e-4t)—)1 dish: e—A
[amp] brought(d) (s)t
(quant-abs] a(dish)ad.brought(d)(g)):
(quant-abs] every(guest)(Ag.a(dish)(Xd.brought(d)(g))): t2
</figure>
<figureCaption confidence="0.98743">
Figure 4 Using the Quantifier Rules.
</figureCaption>
<figure confidence="0.806499714285714">
[app] a(dish : (e--)t)—ot d: quant(a(dish))1
brought
brought: e—,e—&gt;t [quant-lic] d: e
[app] brought(d): e—&gt;t
v :
Xy.v : a (a)
(b) y : al
</figure>
<equation confidence="0.784885666666667">
s : t
Xx.s : e t2 q : (e t
q(Xx.$) : t
</equation>
<bodyText confidence="0.990049391304348">
The problem with this derivation is that assumption y : a is
discharged at (a), but it is not an assumption for the
premise v : 7 of (a). Even if we allow vacuous abstraction so
that an assumption y : a can be discharged at that point,
that discharge will not include the assumption y : a (b) for
the quantifier q, which will thus be left undischarged. In the
Gentzen-style rules given in Section 2, step (a) can only
arise after an application of weakening to introduce y : (3,
but on the other hand, assumption (b) can only, be elimi-
nated independently by abstraction, since the alternative of
combining it by contraction with the other occurrence of
y : a is only available after the assumptions for the left and
right premises of the application of q to its scope. But that is
too late, because the other occurrence of y : i3 has been
discharged by then. Therefore, there is no choice but to
Computational Linguistics Volume 16, Number 1, March 1990 7
Fernando C. N. Pereira Categorial Semantics and Scoping
discharge (b) after q is combined with its scope. Put in
another way, q cannot be raised outside the scope of
abstraction for the variable y occurring free in q, which is
exactly what is going on in Example (4) (&amp;quot;An author who
John has read every book by arrived.&amp;quot;) A correct schematic
derivation is then
</bodyText>
<equation confidence="0.981370166666667">
x: el (b) y a2
s : t
Xx.s : e t1 q : (e t
q(Xx.$) : t
u:8
Ay.0 : a )32
</equation>
<bodyText confidence="0.999954692307692">
The free-variable constraint is reduced to a constraint on
derivations imposed by the basic theory of functionality,
dispensing with a logical-form representation of the con-
straint. Figure 5 shows a derivation for the only possible
scoping of sentence (2) when every man is selected as the
antecedent of his. To allow for the selected coreference, the
pronoun assumption must be discharged before the quanti-
fier assumption (a) for every man. Furthermore, the con-
straint on dependent assumptions requires that the quanti-
fier assumption (c) for a friend of his be discharged before
the pronoun assumption (b) on which it depends. It then
follows that assumption (c) will be discharged before as-
sumption (a), forcing wide scope for every man.
</bodyText>
<figure confidence="0.6995774">
every man his
every: (e—)t)--o(e--,t)--ot man: e-4t h: pron
[app] every(man): (e—A)--A m: quant(every(man))3 friend-of: e—ma-4 [pron-lic] h: e
friend of
a
[quant-lic] m: e a: (e—&gt;t)—.(e.t)—)t [app) friend-of(h): e-41
(app) saw(f)(m)1 t
[quant-abs] a(friend-of(h))(Xf.saw(f)(m)):
[pron-abs) a(friend-of(m))(X/saw(f)(m)):
[quant-abs) every(man)(Xm.a(friend-of(m))(Xf.saw(f)(m))): t3
</figure>
<figureCaption confidence="0.9791105">
Figure 5 Derivation Involving Anaphora and
Quantification.
</figureCaption>
<sectionHeader confidence="0.996441" genericHeader="discussions">
5 DISCUSSION
</sectionHeader>
<bodyText confidence="0.999977222222222">
The approach to semantic interpretation outlined above
avoids the need for manipulations of logical forms in deriv-
ing the possible meanings of quantified sentences. It also
avoids the need for such devices as distinguished variables
(Gazdar 1982; Cooper 1983) to deal with trace abstraction.
Instead, specialized versions of the basic rule of functional
abstraction are used. To my knowledge, the only other
approaches to these problems that do not depend on formal
operations on logical forms are those based on specialized
logics of type change, usually restrictions of the Curry or
Lambek systems (van Benthem 1986a; Hendriks 1987;
Moortgat 1988). In those accounts, a phrase P with mean-
ing p of type T is considered to have also alternative
meaning p&apos; of type T&apos;, with the corresponding combination
possibilities, if p&apos;: T&apos; follows from p:T in the chosen logic.
The central problem in this approach is to design a calculus
that will cover all the actual semantic alternatives (for
instance, all the possible quantifier scopings) without intro-
ducing spurious interpretations. For quantifier raising, the
system of Hendriks seems the most promising so far, but it
is at present too restrictive to support raising from noun-
phrase complements.
Formal types and derived rules are a rather special-
purpose mechanism for constraining semantic derivations.
A more general view, based on a notion of the possible
relationships between syntactic and semantic algebra is
desirable here, maybe following from the notion of projec-
tion proposed for lexical-functional grammar (Halvorsen
and Kaplan 1988).
An important question I have finessed here is that of the
compositionality of the proposed semantic calculus. It is
clear that the application of semantic rules is governed only
by the existence of appropriate syntactic licensing and by
the availability of premises of the appropriate types. In
other words, no rule is sensitive to the form of any of the
meanings appearing in its premises. However, there may be
some doubt as to the status of the basic abstraction rule and
those derived from it. After all, the use of A-abstraction in
the consequent of those rules seems to imply the constraint
that the abstracted object should formally be a variable.
However, this is only superficially the case. I have used the
formal operation of A-abstraction to represent functional
abstraction in this paper, but functional abstraction itself is
independent of its formal representation in the A-calculus.
All that is required is a calculus of functional objects in
which those objects satisfy their usual algebraic properties,
such as what is provided by A-Prolog (Miller and Nadathur
1986). For instance, in a A-Prolog realization of the pro-
posed system, abstractions arising from the [aim] rule or its
derived rule surrogates could be calculated through a com-
bination of universal quantification in the metalanguage
(the language in which the proof system is described) and
higher-order functional equations solved by higher-order
unification (Felty and Miller 1988). Syntactic manipula-
</bodyText>
<figure confidence="0.746112">
[app] a(friend-of(h)): (e—ot)--,t 1: quant(a(friend-of(h)))l
saw
saw: e.--e---,t (quant-lic] : e
[app] saw(f):
8 Computational Linguistics Volume 16, Number 1, March 1990
Fernando C. N. Pereira Categorial Semantics and Scoping
</figure>
<bodyText confidence="0.99984644">
tion of object-level variables and binders would be neither
necessary nor possible.
The investigation reported in this paper was motivated
by the use of the free-variable constraint in an earlier
system of semantic-interpretation rules (Pollack and Pereira
1988; Pereira and Pollack in press). Those rules operate on
objects formally analogous to sequents, with assumptions
for quantified noun phrases and pronouns as well as for
some other purposes. It would be worth seeing to what
extent those formal operations on sequent-like objects can
be mapped onto the sequent rules for some version of the
functionality calculus.
Verb-phrase ellipsis and gapping constructions provide
another possible area of application for the kind of catego-
rial semantics sketched in this paper. A semantic account
of those constructions requires the extraction of the mean-
ing of elided material from the meaning of a source clause.
Intermediate results of appropriate type in derivations of
the meaning of the source clause may provide the possible
meanings of the elided material. In other words, possible
antecedent meanings would be obtained by semantic reanal-
ysis of the source clause, where a semantic reanalysis of the
source clause is just an alternative categorial derivation of
the source clause&apos;s meaning. Initial results along these lines
will be reported elsewhere (Dalrymple et al. 1990).
</bodyText>
<sectionHeader confidence="0.995343" genericHeader="acknowledgments">
ACKNOWLEDGMENTS
</sectionHeader>
<bodyText confidence="0.9614912">
The work described here was carried out in part at SRI International and
supported by a contract with the Nippon Telephone and Telegraph
Corporation and a gift from the Systems Development Foundation as part
of a coordinated research effort with the Center for the Study of Language
and Information, Stanford University, Stanford, CA. Mary Dalrymple,
David Israel, Aravind Joshi, Dale Miller, Martha Pollack, and Stuart
Shieber made useful suggestions and comments. This paper is a revised
and expanded version of &amp;quot;A Calculus for Semantic Composition and
Scoping&amp;quot; presented at the 1989 meeting of the Association for Computa-
tional Linguistics (Pereira 1989).
</bodyText>
<sectionHeader confidence="0.998868" genericHeader="references">
REFERENCES
</sectionHeader>
<reference confidence="0.99952244">
Anderson, A. R. and Belnap, Jr., N. D. 1975 Entailment: The Logic of
Relevance and Necessity,Volume I. Princeton University Press, Prince-
ton, NJ.
Alshawi, H.; Carter, D. M.; van Eijck, J.; Moore, R. C.; Moran, D. B.;
Pereira, F. C. N.; Pulman, S. G.; and Smith, A. G. 1989 &amp;quot;Research
Programme in Natural Language Processing: Final Report.&amp;quot; Technical
report, Cambridge Research Centre, SRI International, Cambridge,
U.K.
Barwise, J. and Cooper, R. 1981 &amp;quot;Generalized Quantifiers and Natural
Language.&amp;quot; Linguistics and Philosophy, 4:159-219.
Curry, H. B. and Feys, R. 1968 Combinatory Logic, Volume I, North-
Holland, Amsterdam, Netherlands.
Cooper, R. 1983 Quantification and Syntactic Theory. D. Reidel,
Dordrecht, Netherlands.
Dalrymple, M.; Shieber, S. M.; and Pereira, F. C. N. 1990 &amp;quot;Ellipsis and
Higher-Order Unification,&amp;quot; Unpublished paper, 1990.
Dowty, D. R.; Wall, R. E.; and Peters, S. 1981 &amp;quot;Introduction to Montague
Semantics,&amp;quot; Volume 11 of Synthese Language Library. D. Reidel,
Dordrecht, Netherlands.
Felty, A. and Miller, D. 1988 Specifying Theorem Provers in a Higher-
Order Logic Programming Language. Technical Report MS-CIS-88-
12, Department of Computer and Information Science, University of
Pennsylvania, Philadelphia, PA.
Gazdar, G. 1982 &amp;quot;Phrase Structure Grammar,&amp;quot; In P. Jacobson and G. K.
Pullum (eds.), The Nature of Syntactic Representation, D. Reidel,
Dordrecht, Netherlands, 131-186.
Girard, J.-Y.; Lafont, Y.; and Taylor, P. 1989 Proofs and Types, Volume
7 of Cambridge Tracts in Theoretical Computer Science. Cambridge
University Press, Cambridge, U.K.
Heim, I. R. 1982 The Semantics of Definite and Indefinite Noun Phrases.
Ph.D. Thesis, Department of Linguistics, University of Massachusetts,
Amherst, MA.
Hendriks, H. 1987 &amp;quot;Type Change in Semantics: The Scope of Quantifica-
tion and Coordination,&amp;quot; In E. Klein and J. van Benthem (eds.), Catego-
ries, Polymorphism and Unification. Centre for Cognitive Science,
University of Edinburgh, Edinburgh, U.K., 95-120.
Halvorsen, P.-K. and Kaplan, R. M. 1988 &amp;quot;Projections and Semantic
Description in Lexical-Functional Grammar,&amp;quot; In Proceedings of the
International Conference on Fifth Generation Computer Systems,
Tokyo, Japan, 1116-1122.
Howard, W. A. 1980 The Formulae-As-Types Notion of Construction,&amp;quot;
In J. P. Seldin and J. R. Hindley (eds.), To H. B. Curry: Essays on
Combinatory Logic, Lambda Calculus and Formalism, Academic
Press, London, 479-490.
Hobbs, J. R. and Shieber, S. M. 1987 &amp;quot;An Algorithm for Generating
Quantifier Scopings.&amp;quot; Computational Linguistics, 13:47-63.
Lambek, J. 1958 &amp;quot;The Mathematics of Sentence Structure.&amp;quot; American
Mathematical Monthly, 65:154-170.
Lambek, J. 1980 &amp;quot;From A-Calculus to Cartesian Closed Categories,&amp;quot; In
J. P. Seldin and J. R. Hindley (eds.), To H. B. Curry: Essays on
Combinatory Logic, Lambda Calculus and Formalism, Academic
Press, London, 375-402.
May, R. 1985 Logical Form: Its Structure and Derivation, Volume 12 of
Linguistic Inquiry Monographs. MIT Press, Cambridge, MA.
Miller, D. A. and Nadathur, G. 1986 &amp;quot;Higher-Order Logic Programming,&amp;quot;
In E. Shapiro (ed.), Third International Conference on Logic Program-
ming, Springer-Verlag, Berlin,
Montague, R. 1973 &amp;quot;The Proper Treatment of Quantification in Ordinary
English,&amp;quot; In R. H. Thomason (ed.), Formal Philosophy. Yale Univer-
sity Press, New Haven, CT.
Moortgat, M. 1988 Categorial Investigations: Logical and Linguistic
Aspects of the Lambek Calculus. Ph.D. Thesis, University of Amster-
dam, Amsterdam, Netherlands.
Moran, D. B. 1988 &amp;quot;Quantifier Scoping in the SRI Core Language
Engine,&amp;quot; Proceedings of the 26th Annual Meeting of the Association
for Computational Linguistics, 33-47.
Partee, B. and Bach, E. 1984 &amp;quot;Quantification, Pronouns and VP
Anaphora,&amp;quot; In J. A. G. Groenendijk, T. M. V. Janssen, and M. B. J.
Stokhof (eds.), Truth, Interpretation and Information, Foris, Dordrecht,
Netherlands, 99-130.
Pereira, F. C. N. 1989 &amp;quot;A Calculus for Semantic Composition and
Scoping,&amp;quot; Proceedings of the 27th Annual Meeting of the Association
for Computational Linguistics, 152-160.
Pollack, M. E. and Pereira, F. C. N. 1988 &amp;quot;An Integrated Framework for
Semantic and Pragmatic Interpretation,&amp;quot; Proceedings of the 26th
Annual Meeting of the Association for Computational Linguistics,
75-86.
Pereira, F. C. N. and Pollack, M. E. &amp;quot;Incremental Interpretation,&amp;quot;
Artificial Intelligence, in press.
Prawitz, D. 1965 Natural Deduction: A Proof-Theoretical Study. Almqvist
and Wiksell, Uppsala, Sweden.
Reinhart, T. 1983 Anaphora and Semantic Interpretation. Croom Helm,
London.
Roberts, C. 1987 Modal Subordination, Anaphora and Distributivity.
Ph.D. Thesis, Department of Linguistics, University of Massachusetts,
Amherst, MA.
Stenlund, S. 1972 Combinators, Terms and Proof Theory. D. Reidel,
Dordrecht, Netherlands.
Computational Linguistics Volume 16, Number 1, March 1990 9
Fernando C. N. Pereira Categorial Semantics and Scoping
Steedman, M. 1987 &amp;quot;Combinatory Grammars and Parasitic Gaps.&amp;quot;
Natural Language and Linguistic Theory, 5(3):403-439.
Vanlehn, K. A. 1978 Determining the Scope of English Quantifiers. M.S.
thesis, Massachusetts Institute of Technology, Cambridge, MA.
van Benthem, J. 1986a &amp;quot;Categorial Grammar and Lambda Calculus,&amp;quot; In
D. Skordev (ed.), Mathematical Logic and its Application, Plenum
Press, New York, 39-60.
van Benthem, J. 1986b &amp;quot;Essays in Logical Semantics,&amp;quot; Volume 29 of
Studies in Linguistics and Philosophy. D. Reidel, Dordrecht, Nether-
lands.
van Benthem, J. 1989 &amp;quot;Categorial Grammar and Type Theory.&amp;quot; Journal
of Philosophical Logic, In press, 1990.
van Eijck, J. 1985 Aspects of Quanttfication in Natural Language. Ph.D.
Thesis, University of Groningen, Groningen, Netherlands.
van Riemsdijk, H. and Williams, E. 1986 Introduction to the Theory of
Grammar, Volume 12 of Current Studies in Linguistics. MIT Press,
Cambridge, MA.
Williams, E. 1986 &amp;quot;A Reassignment of the Functions of LF.&amp;quot; Linguistic
Inquiry, 17(2):265-299.
NOTES
1. In all the examples that follow, the pronoun and its intended anteced-
ent are italicized. As usual, starred examples are supposed to be
ungrammatical.
2. In fact, this is a perfectly good open well-formed formula and
therefore the precise formulation of the constraint is more delicate
than seems to be realized in the literature.
3. This particular example and its analysis were chosen just as the
shortest plausible example requiring both application and abstrac-
tion, not as making substantive linguistic or semantic claims.
4. These rules are quite similar to the extraction introduction rule of
Moortgat (1988).
5. In general, quantifying-in has to apply not only to proposition-type
scopes but also to property-type scopes (meanings of common noun
phrases and verb phrases). Extending the argument that follows to
those cases offers no difficulties.
</reference>
<page confidence="0.892498">
10 Computational Linguistics Volume 16, Number 1, March 1990
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.081155">
<title confidence="0.999291">CATEGORIAL SEMANTICS AND SCOPING</title>
<author confidence="0.999983">Fernando C N Pereira</author>
<affiliation confidence="0.999458">AT &amp; T Bell Laboratories</affiliation>
<address confidence="0.991149">600 Mountain Ave. NJ 07974</address>
<abstract confidence="0.995648833333333">Certain restrictions on possible scopings of quantified noun phrases in natural language are usually expressed in terms of formal constraints on binding at a level of logical form. Such reliance on the form rather than the content of semantic interpretations goes against the spirit of compositionality. I will show that those scoping restrictions follow from simple and fundamental facts about functional application and abstraction, and can be expressed as constraints on the derivation of possible meanings for sentences rather than constraints of the alleged forms of those meanings.</abstract>
<note confidence="0.7837755">1 AN OBVIOUS CONSTRAINT? Treatments of quantifier scope in Montague grammar (Montague 1973; Dowty et al. 1981; Cooper 1983), transformational grammar (Reinhart 1983; May 1985; Heim</note>
<abstract confidence="0.995465505434783">1982; Roberts 1987), and computational linguistics (Hobbs and Shieber 1987; Moran 1988; Alshawi et al. 1989) have depended implicitly or explicitly on a constraint on possible logical forms to explain why examples&apos; such as *A woman who saw man are ungrammatical, and why in examples such as Every man a friend of Every admirer a picture of vain . . phrase must have wider scope than the . . phrase if the pronoun in each example is assumed be its antecedent. What exactly counts as bound anaphora varies between different accounts of the phenomena, but the rough intuition is that semantically a bound pronoun plays the role of a variable bound by the logical form (a quantifier) of its antecedent. Example (1) above is then &amp;quot;explained&amp;quot; by noting that its logical form would be something like saw(w, m)) m) but this is &amp;quot;ill-formed&amp;quot; because variable m occurs as an of disliked outside the scope of its binder Vm As for Examples (2) and (3), the argument is similar: wide for the logical form of the . . . phrase would leave an occurrence of the variable that the logical form of . . outside the scope of this quantifier. For lack of an official name in the literature for this constraint, I will it here free-variable In accounts of scoping possibilities based on quantifier raising or storage (Cooper 1983; van Eijck 1985; May 1985; Hobbs and Shieber 1987) the free-variable constraint is enforced either by keeping track of the set of free free each raisable (storable) term x the raising of any which bound by some binder by checking after all applications of raising (unstoring) that no variable occurs outside the scope of its binder. The argument above is often taken to be so obvious and uncontroversial that it warrants only a remark in passing, if any (Cooper 1983; Reinhart 1983; Partee and Bach 1984; May 1985; van Riemsdijk and Williams 1986; Williams 1986; Roberts 1987), even though it depends on nontrivial assumptions on the role of logical form in linguistic theory and semantics. First of all, and most immediately, there is the requirement for a logical-form level of representation, either in the predicate-logic format exemplified above or in some tree format as is usual in transformational grammar (Heim 1982; Cooper 1983; May 1985; van Riemsdijk and Williams 1986; Williams 1986; Roberts 1987). Second, and most relevant to Montague grammar and related approaches, the constraint is given in terms of restrictions on formal objects (logical forms), which in turn are related to meanings through a denotation relation. However, compositionality as it is commonly understood meanings of phrases to be functions of the meanthan the forms of their constituents. This is a even in accounts based on quantifier storage (Cooper 1983; van Eijck 1985), which are precisely designed, as van Eijck puts it, to &amp;quot;avoid all unnecessary reference to properties of . . . formulas&amp;quot; (van Eijck 1985, p. 214). In fact, van Eijck proposes an interesting modification of Cooper storage that avoids Cooper&apos;s reliance on forbidding vacuous abstraction to block out cases in which a noun phrase is unstored while a noun phrase contained in it is still in store. However, this restriction does not deal with the case being addressed here. Computational Linguistics Volume 16, Number 1, March 1990 1 Fernando C. N. Pereira Categorial Semantics and Scoping It is also interesting to observe that a wider class of examples of forbidden scopings would have to be considered if raising out of relative clauses were allowed, for example in 4. An author who John has read every book by arrived In this example, if we did not assume the restriction against from relative clauses, the . . . phrase could in principle be assigned widest scope, but this would be blocked by the free-variable constraint as shown by the of as an argument of book-by in b.book-by(b, = 3 a.author(a) has-read( john, arrived(a)) That is, the alleged constraint against raising from relatives, for which many counterexamples exist (Vanlehn 1978), blocks some derivations in which otherwise the free-variable constraint would be involved, specifically those associated to syntactic configurations of the form • • • N [s ••• Xi a pronoun or trace coindexed with NP, and is a quantified noun phrase. Since some of the most extensive Montague grammar fragments in the literature (Dowty et al. 1981; Cooper 1983) do not cover the other major source of the problem, PP complements of noun phrases (replace S by PP in the configuration above), the question is effectively avoided in those treatments. Conversely, it could be argued that the free-variable constraint is responsible for forcing a quantifier to raise outside a relative clause in examples such as The slush fund that minister is kept by private secretary. the coindexing of minister the former to be scoped outside the main clause, and thus outside the relative clause in which it occurs. The main goal of this paper is to argue that the freevariable constraint is actually a consequence of basic semantic properties that hold in a semantic domain allowing functional application and abstraction, and are thus independent of a particular logical-form representation. As a corollary, I will also show that the constraint is better as a restriction on the meanings of sentences from the meanings of their parts rather than a restriction on logical forms. The resulting system is related to the earlier system of conditional interpretation rules developed by Pollack and Pereira (1988), but avoids that system&apos;s use of formal conditions on the order of assumption discharge. CURRY&apos;S CALCULUS Work in combinatory logic and the A-calculus is concerned with the elucidation of the basic notion of functionality: how to construct functions, and how to apply functions to their arguments. There is a very large body of results in this area, of which I will need only a very small part. One of the simplest and most elegant accounts of functionality, originally introduced by Curry and Feys (1968) and further elaborated by other authors (Stenlund 1972; Laimbek 1980; Howard 1980) involves the use of a logical to describe the valid functional objects. In a natural-deduction format (Prawitz 1965), the calculus can be simply given by the following two rules: (a) i(3 a The first rule states that the result of applying a function objects of type a to objects of type function of a an object of type an object of The second rule states that if from an arbitrary object of is possible to construct an object of type has a function from objects of type objects of type this rule and all that follow, the parenthesized formula at the top indicates the discharge of an assumption introduced in the derivation of the formula below it. Precise definitions of assumption and assumption discharge are given below. The typing rules can be directly connected to the use of the A-calculus to represent functions by restating them as follows: (x : a) v(u) : . formula u: be called a assignment, type term the two rules above state that if type a and v has type a type by assuming that type a, we can show that containing x) has type the function repreby Xx.0 has type 0. the rest of this paper, rules refer to these rules. usual in categorial analyses of natural lantypes are built from the basic types individuals and t for propositions. In function types, the constructor associates to the right. Following this type system (no tuple types) expressions will be written in a &amp;quot;curried&amp;quot; notation. example, a binary relation individuals will have type e e and its application to arguments x and be written the usual semantic analysis has a transitive verb combining first with its object and then with its subject, the meaning of sentence such as &amp;quot;John loves Mary&amp;quot; will be represented by loves(m)(j). For a first example of how the functionality rules may be used in semantic interpretation, I will consider the derivation in Figure 1 of a simplified meaning for the topicalized 2 Computational Linguistics Volume 16, Number 1, March 1990 Fernando C. N. Pereira Categorial Semantics and Scoping e—*e—&gt;t el m: e hates(x): e—&gt;t [app] hates(x)(m): t [app] hates(j)(m): t 1 the Functionality Rules. &amp;quot;John, Mary The derivation is represented by a tree in which leaf nodes are labeled by assumptions and nonleaf nodes are labeled by the results of rule applications. Several aspects of the overall approach appear in this example. Each type assignment in the derivation is associated to one phrase whose meaning it represents, and is derived by applying the functionality rules to type assignments associated with the constituents of the phrase. The meanings of words in the sentence enter as assumptions in the derivation, which are left undischarged.</abstract>
<note confidence="0.380354">In the figure, type assignments are labeled either by the</note>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>A R Anderson</author>
<author>N D Belnap</author>
</authors>
<title>Entailment: The Logic of Relevance and Necessity,Volume I.</title>
<date>1975</date>
<publisher>Princeton University Press,</publisher>
<location>Princeton, NJ.</location>
<contexts>
<context position="16698" citStr="Anderson and Belnap 1975" startWordPosition="2898" endWordPosition="2901">y the types, the types derivable using the full set of rules are exactly the consequences of the three axioms a — a, a (f3 a), and (cy (0 7)) ((a (3) (a 7)), which are the polymorphic types of the three combinators I, K, and S that generate all the closed typed X-calculus terms. Furthermore, if we interpret —■ as implication, these theorems are exactly those of the pure implicational fragment of intuitionistic propositional logic (Curry and Feys 1968; Anderson and Belnap Jr. 1975). In contrast, without weakening (vacuous abstraction) we have the weaker system of pure relevant implication R _ (Anderson and Belnap 1975). 3 SEMANTIC COMBINATIONS AND THE CURRY CALCULUS In one approach to the definition of allowable semantic combinations, the possible meanings of a phrase are exactly those whose type can be derived by the rules of a semantic calculus from axioms giving the types of the lexical items in the phrase. However, this is far too liberal in that the possible meanings of English phrases do not depend only on the types involved but also on the syntactic structure of the phrases. A possible way out is to encode the relevant syntactic constraints in a more elaborate and restrictive system of types and rule</context>
</contexts>
<marker>Anderson, Belnap, 1975</marker>
<rawString>Anderson, A. R. and Belnap, Jr., N. D. 1975 Entailment: The Logic of Relevance and Necessity,Volume I. Princeton University Press, Princeton, NJ.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Alshawi</author>
<author>D M Carter</author>
<author>J van Eijck</author>
<author>R C Moore</author>
<author>D B Moran</author>
<author>F C N Pereira</author>
<author>S G Pulman</author>
<author>A G Smith</author>
</authors>
<title>Research Programme in Natural Language Processing: Final Report.&amp;quot;</title>
<date>1989</date>
<tech>Technical report,</tech>
<institution>Cambridge Research Centre, SRI International,</institution>
<location>Cambridge, U.K.</location>
<marker>Alshawi, Carter, van Eijck, Moore, Moran, Pereira, Pulman, Smith, 1989</marker>
<rawString>Alshawi, H.; Carter, D. M.; van Eijck, J.; Moore, R. C.; Moran, D. B.; Pereira, F. C. N.; Pulman, S. G.; and Smith, A. G. 1989 &amp;quot;Research Programme in Natural Language Processing: Final Report.&amp;quot; Technical report, Cambridge Research Centre, SRI International, Cambridge, U.K.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Barwise</author>
<author>R Cooper</author>
</authors>
<title>Generalized Quantifiers and Natural Language.&amp;quot; Linguistics and Philosophy,</title>
<date>1981</date>
<pages>4--159</pages>
<contexts>
<context position="27083" citStr="Barwise and Cooper 1981" startWordPosition="4638" endWordPosition="4641">tence (2). 4.3 QUANTIFIER RAISING The rules discussed earlier provide some of the auxiliary machinery required to illustrate the free-variable constraint. However, the main burden of enforcing the conhimself pron&apos; bored bored. e—)e-4t e [pron-lic] John j: e bored(x): e--)t [app] bored(x)(j): t [app] bored(j)(j): t [pron-abs] Figure 3 Using the Pronoun Rules. straint falls on the rules responsible for quantifier raising, and therefore I will cover in somewhat greater detail the derivation of those rules from the basic rules of functionality. I will follow here the standard view (Montague 1973; Barwise and Cooper 1981) that the meanings of natural language determiners are generalized quantifiers, with type (e t) (e t) t. For example, the meaning of every would be Xr.Xs.V x.r(x) s(x), and the meaning of the noun phrase every man Xs.V x.man(x) s(x). To interpret the combination of a quantified noun phrase with the phrase containing it that forms its scope, we apply the meaning of the noun phrase to a property s derived from the meaning of the scope. The purpose of devices such as quantifying-in in Montague grammar, Cooper storage, or quantifier raising in transformational grammar is to determine a scope for e</context>
</contexts>
<marker>Barwise, Cooper, 1981</marker>
<rawString>Barwise, J. and Cooper, R. 1981 &amp;quot;Generalized Quantifiers and Natural Language.&amp;quot; Linguistics and Philosophy, 4:159-219.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H B Curry</author>
<author>R Feys</author>
</authors>
<title>Combinatory Logic, Volume I, NorthHolland,</title>
<date>1968</date>
<location>Amsterdam, Netherlands.</location>
<contexts>
<context position="7365" citStr="Curry and Feys (1968)" startWordPosition="1230" endWordPosition="1233">o the earlier system of conditional interpretation rules developed by Pollack and Pereira (1988), but avoids that system&apos;s use of formal conditions on the order of assumption discharge. 2 CURRY&apos;S CALCULUS OF FUNCTIONALITY Work in combinatory logic and the A-calculus is concerned with the elucidation of the basic notion of functionality: how to construct functions, and how to apply functions to their arguments. There is a very large body of results in this area, of which I will need only a very small part. One of the simplest and most elegant accounts of functionality, originally introduced by Curry and Feys (1968) and further elaborated by other authors (Stenlund 1972; Laimbek 1980; Howard 1980) involves the use of a logical calculus to describe the types of valid functional objects. In a natural-deduction format (Prawitz 1965), the calculus can be simply given by the following two rules: (a) a a i(3 a The first rule states that the result of applying a function from objects of type a to objects of type 0 (a function of type a 0) to an object of type a is an object of type The second rule states that if from an arbitrary object of type a it is possible to construct an object of type 0, then one has a f</context>
<context position="16527" citStr="Curry and Feys 1968" startWordPosition="2871" endWordPosition="2874">embers are systems with varying semantic powers of semantic combination (Moortgat 1988; van Bentham 1989). If we ignore the associated X-expressions and consider only the types, the types derivable using the full set of rules are exactly the consequences of the three axioms a — a, a (f3 a), and (cy (0 7)) ((a (3) (a 7)), which are the polymorphic types of the three combinators I, K, and S that generate all the closed typed X-calculus terms. Furthermore, if we interpret —■ as implication, these theorems are exactly those of the pure implicational fragment of intuitionistic propositional logic (Curry and Feys 1968; Anderson and Belnap Jr. 1975). In contrast, without weakening (vacuous abstraction) we have the weaker system of pure relevant implication R _ (Anderson and Belnap 1975). 3 SEMANTIC COMBINATIONS AND THE CURRY CALCULUS In one approach to the definition of allowable semantic combinations, the possible meanings of a phrase are exactly those whose type can be derived by the rules of a semantic calculus from axioms giving the types of the lexical items in the phrase. However, this is far too liberal in that the possible meanings of English phrases do not depend only on the types involved but also</context>
</contexts>
<marker>Curry, Feys, 1968</marker>
<rawString>Curry, H. B. and Feys, R. 1968 Combinatory Logic, Volume I, NorthHolland, Amsterdam, Netherlands.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Cooper</author>
</authors>
<title>Quantification and Syntactic Theory.</title>
<date>1983</date>
<location>D. Reidel, Dordrecht, Netherlands.</location>
<contexts>
<context position="832" citStr="Cooper 1983" startWordPosition="125" endWordPosition="126">y expressed in terms of formal constraints on binding at a level of logical form. Such reliance on the form rather than the content of semantic interpretations goes against the spirit of compositionality. I will show that those scoping restrictions follow from simple and fundamental facts about functional application and abstraction, and can be expressed as constraints on the derivation of possible meanings for sentences rather than constraints of the alleged forms of those meanings. 1 AN OBVIOUS CONSTRAINT? Treatments of quantifier scope in Montague grammar (Montague 1973; Dowty et al. 1981; Cooper 1983), transformational grammar (Reinhart 1983; May 1985; Heim 1982; Roberts 1987), and computational linguistics (Hobbs and Shieber 1987; Moran 1988; Alshawi et al. 1989) have depended implicitly or explicitly on a constraint on possible logical forms to explain why examples&apos; such as 1. *A woman who saw every man disliked him are ungrammatical, and why in examples such as 2. Every man saw a friend of his 3. Every admirer of a picture of himself is vain the every. . . noun phrase must have wider scope than the a . . . noun phrase if the pronoun in each example is assumed to be bound by its antecede</context>
<context position="2381" citStr="Cooper 1983" startWordPosition="398" endWordPosition="399">3 w.woman(w) A (Vm.man(m) saw(w, m)) A disliked(w, m) but this is &amp;quot;ill-formed&amp;quot; because variable m occurs as an argument of disliked outside the scope of its binder Vm .2 As for Examples (2) and (3), the argument is similar: wide scope for the logical form of the a . . . noun phrase would leave an occurrence of the variable that the logical form of every. . . binds outside the scope of this quantifier. For lack of an official name in the literature for this constraint, I will call it here the free-variable constraint. In accounts of scoping possibilities based on quantifier raising or storage (Cooper 1983; van Eijck 1985; May 1985; Hobbs and Shieber 1987) the free-variable constraint is enforced either by keeping track of the set of free variables free (q) in each raisable (storable) term q and when x E free (q) blocking the raising of q from any context Bx.t in which x is bound by some binder B, or by checking after all applications of raising (unstoring) that no variable occurs outside the scope of its binder. The argument above is often taken to be so obvious and uncontroversial that it warrants only a remark in passing, if any (Cooper 1983; Reinhart 1983; Partee and Bach 1984; May 1985; va</context>
<context position="3935" citStr="Cooper 1983" startWordPosition="655" endWordPosition="657">e tree format as is usual in transformational grammar (Heim 1982; Cooper 1983; May 1985; van Riemsdijk and Williams 1986; Williams 1986; Roberts 1987). Second, and most relevant to Montague grammar and related approaches, the constraint is given in terms of restrictions on formal objects (logical forms), which in turn are related to meanings through a denotation relation. However, compositionality as it is commonly understood requires meanings of phrases to be functions of the meanings rather than the forms of their constituents. This is a problem even in accounts based on quantifier storage (Cooper 1983; van Eijck 1985), which are precisely designed, as van Eijck puts it, to &amp;quot;avoid all unnecessary reference to properties of . . . formulas&amp;quot; (van Eijck 1985, p. 214). In fact, van Eijck proposes an interesting modification of Cooper storage that avoids Cooper&apos;s reliance on forbidding vacuous abstraction to block out cases in which a noun phrase is unstored while a noun phrase contained in it is still in store. However, this restriction does not deal with the case being addressed here. Computational Linguistics Volume 16, Number 1, March 1990 1 Fernando C. N. Pereira Categorial Semantics and Sco</context>
<context position="5637" citStr="Cooper 1983" startWordPosition="946" endWordPosition="947"> a free as an argument of book-by in V b.book-by(b, a) = ( 3 a.author(a) A has-read( john, b) A arrived(a)) That is, the alleged constraint against raising from relatives, for which many counterexamples exist (Vanlehn 1978), blocks some derivations in which otherwise the free-variable constraint would be involved, specifically those associated to syntactic configurations of the form [NP, • • • N [s ••• [NP.i Xi where X, is a pronoun or trace coindexed with NP, and NPi is a quantified noun phrase. Since some of the most extensive Montague grammar fragments in the literature (Dowty et al. 1981; Cooper 1983) do not cover the other major source of the problem, PP complements of noun phrases (replace S by PP in the configuration above), the question is effectively avoided in those treatments. Conversely, it could be argued that the free-variable constraint is responsible for forcing a quantifier to raise outside a relative clause in examples such as 5. The slush fund that every minister needs is kept by his private secretary. Here, the coindexing of every minister and his forces the former to be scoped outside the main clause, and thus outside the relative clause in which it occurs. The main goal o</context>
<context position="33069" citStr="Cooper 1983" startWordPosition="5662" endWordPosition="5663">y(man))3 friend-of: e—ma-4 [pron-lic] h: e friend of a [quant-lic] m: e a: (e—&gt;t)—.(e.t)—)t [app) friend-of(h): e-41 (app) saw(f)(m)1 t [quant-abs] a(friend-of(h))(Xf.saw(f)(m)): [pron-abs) a(friend-of(m))(X/saw(f)(m)): [quant-abs) every(man)(Xm.a(friend-of(m))(Xf.saw(f)(m))): t3 Figure 5 Derivation Involving Anaphora and Quantification. 5 DISCUSSION The approach to semantic interpretation outlined above avoids the need for manipulations of logical forms in deriving the possible meanings of quantified sentences. It also avoids the need for such devices as distinguished variables (Gazdar 1982; Cooper 1983) to deal with trace abstraction. Instead, specialized versions of the basic rule of functional abstraction are used. To my knowledge, the only other approaches to these problems that do not depend on formal operations on logical forms are those based on specialized logics of type change, usually restrictions of the Curry or Lambek systems (van Benthem 1986a; Hendriks 1987; Moortgat 1988). In those accounts, a phrase P with meaning p of type T is considered to have also alternative meaning p&apos; of type T&apos;, with the corresponding combination possibilities, if p&apos;: T&apos; follows from p:T in the chosen </context>
</contexts>
<marker>Cooper, 1983</marker>
<rawString>Cooper, R. 1983 Quantification and Syntactic Theory. D. Reidel, Dordrecht, Netherlands.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Dalrymple</author>
<author>S M Shieber</author>
<author>F C N Pereira</author>
</authors>
<title>Ellipsis and Higher-Order Unification,&amp;quot; Unpublished paper,</title>
<date>1990</date>
<contexts>
<context position="37495" citStr="Dalrymple et al. 1990" startWordPosition="6345" endWordPosition="6348">d in this paper. A semantic account of those constructions requires the extraction of the meaning of elided material from the meaning of a source clause. Intermediate results of appropriate type in derivations of the meaning of the source clause may provide the possible meanings of the elided material. In other words, possible antecedent meanings would be obtained by semantic reanalysis of the source clause, where a semantic reanalysis of the source clause is just an alternative categorial derivation of the source clause&apos;s meaning. Initial results along these lines will be reported elsewhere (Dalrymple et al. 1990). ACKNOWLEDGMENTS The work described here was carried out in part at SRI International and supported by a contract with the Nippon Telephone and Telegraph Corporation and a gift from the Systems Development Foundation as part of a coordinated research effort with the Center for the Study of Language and Information, Stanford University, Stanford, CA. Mary Dalrymple, David Israel, Aravind Joshi, Dale Miller, Martha Pollack, and Stuart Shieber made useful suggestions and comments. This paper is a revised and expanded version of &amp;quot;A Calculus for Semantic Composition and Scoping&amp;quot; presented at the 1</context>
</contexts>
<marker>Dalrymple, Shieber, Pereira, 1990</marker>
<rawString>Dalrymple, M.; Shieber, S. M.; and Pereira, F. C. N. 1990 &amp;quot;Ellipsis and Higher-Order Unification,&amp;quot; Unpublished paper, 1990.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D R Dowty</author>
<author>R E Wall</author>
<author>S Peters</author>
</authors>
<title>Introduction to Montague Semantics,&amp;quot; Volume 11 of Synthese Language Library.</title>
<date>1981</date>
<location>D. Reidel, Dordrecht, Netherlands.</location>
<contexts>
<context position="818" citStr="Dowty et al. 1981" startWordPosition="121" endWordPosition="124">language are usually expressed in terms of formal constraints on binding at a level of logical form. Such reliance on the form rather than the content of semantic interpretations goes against the spirit of compositionality. I will show that those scoping restrictions follow from simple and fundamental facts about functional application and abstraction, and can be expressed as constraints on the derivation of possible meanings for sentences rather than constraints of the alleged forms of those meanings. 1 AN OBVIOUS CONSTRAINT? Treatments of quantifier scope in Montague grammar (Montague 1973; Dowty et al. 1981; Cooper 1983), transformational grammar (Reinhart 1983; May 1985; Heim 1982; Roberts 1987), and computational linguistics (Hobbs and Shieber 1987; Moran 1988; Alshawi et al. 1989) have depended implicitly or explicitly on a constraint on possible logical forms to explain why examples&apos; such as 1. *A woman who saw every man disliked him are ungrammatical, and why in examples such as 2. Every man saw a friend of his 3. Every admirer of a picture of himself is vain the every. . . noun phrase must have wider scope than the a . . . noun phrase if the pronoun in each example is assumed to be bound b</context>
<context position="5623" citStr="Dowty et al. 1981" startWordPosition="942" endWordPosition="945">y the occurrence of a free as an argument of book-by in V b.book-by(b, a) = ( 3 a.author(a) A has-read( john, b) A arrived(a)) That is, the alleged constraint against raising from relatives, for which many counterexamples exist (Vanlehn 1978), blocks some derivations in which otherwise the free-variable constraint would be involved, specifically those associated to syntactic configurations of the form [NP, • • • N [s ••• [NP.i Xi where X, is a pronoun or trace coindexed with NP, and NPi is a quantified noun phrase. Since some of the most extensive Montague grammar fragments in the literature (Dowty et al. 1981; Cooper 1983) do not cover the other major source of the problem, PP complements of noun phrases (replace S by PP in the configuration above), the question is effectively avoided in those treatments. Conversely, it could be argued that the free-variable constraint is responsible for forcing a quantifier to raise outside a relative clause in examples such as 5. The slush fund that every minister needs is kept by his private secretary. Here, the coindexing of every minister and his forces the former to be scoped outside the main clause, and thus outside the relative clause in which it occurs. T</context>
</contexts>
<marker>Dowty, Wall, Peters, 1981</marker>
<rawString>Dowty, D. R.; Wall, R. E.; and Peters, S. 1981 &amp;quot;Introduction to Montague Semantics,&amp;quot; Volume 11 of Synthese Language Library. D. Reidel, Dordrecht, Netherlands.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Felty</author>
<author>D Miller</author>
</authors>
<title>Specifying Theorem Provers in a HigherOrder Logic Programming Language.</title>
<date>1988</date>
<tech>Technical Report MS-CIS-88-12,</tech>
<institution>Department of Computer and Information Science, University of Pennsylvania,</institution>
<location>Philadelphia, PA.</location>
<contexts>
<context position="35866" citStr="Felty and Miller 1988" startWordPosition="6101" endWordPosition="6104">ndependent of its formal representation in the A-calculus. All that is required is a calculus of functional objects in which those objects satisfy their usual algebraic properties, such as what is provided by A-Prolog (Miller and Nadathur 1986). For instance, in a A-Prolog realization of the proposed system, abstractions arising from the [aim] rule or its derived rule surrogates could be calculated through a combination of universal quantification in the metalanguage (the language in which the proof system is described) and higher-order functional equations solved by higher-order unification (Felty and Miller 1988). Syntactic manipula[app] a(friend-of(h)): (e—ot)--,t 1: quant(a(friend-of(h)))l saw saw: e.--e---,t (quant-lic] : e [app] saw(f): 8 Computational Linguistics Volume 16, Number 1, March 1990 Fernando C. N. Pereira Categorial Semantics and Scoping tion of object-level variables and binders would be neither necessary nor possible. The investigation reported in this paper was motivated by the use of the free-variable constraint in an earlier system of semantic-interpretation rules (Pollack and Pereira 1988; Pereira and Pollack in press). Those rules operate on objects formally analogous to sequen</context>
</contexts>
<marker>Felty, Miller, 1988</marker>
<rawString>Felty, A. and Miller, D. 1988 Specifying Theorem Provers in a HigherOrder Logic Programming Language. Technical Report MS-CIS-88-12, Department of Computer and Information Science, University of Pennsylvania, Philadelphia, PA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Gazdar</author>
</authors>
<title>Phrase Structure Grammar,&amp;quot;</title>
<date>1982</date>
<booktitle>The Nature of Syntactic Representation,</booktitle>
<pages>131--186</pages>
<editor>In P. Jacobson and G. K. Pullum (eds.),</editor>
<location>Dordrecht, Netherlands,</location>
<contexts>
<context position="18015" citStr="Gazdar 1982" startWordPosition="3116" endWordPosition="3117">ts more recent elaborations within categorial grammar and semantics (van Benthem 1986a, 1986b; Hendriks 1987; Moortgat 1988). In particular, Hendriks (1987) proposes a system for quantifier raising, which however is too restrictive in its coverage to account for the phenomena of interest here. Instead of trying to construct a type system and type rules such that free application of the rules starting from appropriate lexical axioms will generate all and only the possible meanings of a phrase, I will instead take a more conservative route related to Montague grammar and early versions of GPSG (Gazdar 1982), and use syntactic analyses to control semantic derivations. First, a set of derived rules will be used in addition to the basic rules of application and abstraction. Semantically, the derived rules will add no new inferences, since they will merely codify inferences already allowed by the basic rules of the calculus of functionality. However, they provide the semantic counterparts of certain syntactic rules. Second, the use of some semantic rules must be licensed by a particular syntactic rule and the premises in the antecedent of the semantic rule must correspond in a rule-given way to the </context>
<context position="33055" citStr="Gazdar 1982" startWordPosition="5660" endWordPosition="5661">m: quant(every(man))3 friend-of: e—ma-4 [pron-lic] h: e friend of a [quant-lic] m: e a: (e—&gt;t)—.(e.t)—)t [app) friend-of(h): e-41 (app) saw(f)(m)1 t [quant-abs] a(friend-of(h))(Xf.saw(f)(m)): [pron-abs) a(friend-of(m))(X/saw(f)(m)): [quant-abs) every(man)(Xm.a(friend-of(m))(Xf.saw(f)(m))): t3 Figure 5 Derivation Involving Anaphora and Quantification. 5 DISCUSSION The approach to semantic interpretation outlined above avoids the need for manipulations of logical forms in deriving the possible meanings of quantified sentences. It also avoids the need for such devices as distinguished variables (Gazdar 1982; Cooper 1983) to deal with trace abstraction. Instead, specialized versions of the basic rule of functional abstraction are used. To my knowledge, the only other approaches to these problems that do not depend on formal operations on logical forms are those based on specialized logics of type change, usually restrictions of the Curry or Lambek systems (van Benthem 1986a; Hendriks 1987; Moortgat 1988). In those accounts, a phrase P with meaning p of type T is considered to have also alternative meaning p&apos; of type T&apos;, with the corresponding combination possibilities, if p&apos;: T&apos; follows from p:T </context>
</contexts>
<marker>Gazdar, 1982</marker>
<rawString>Gazdar, G. 1982 &amp;quot;Phrase Structure Grammar,&amp;quot; In P. Jacobson and G. K. Pullum (eds.), The Nature of Syntactic Representation, D. Reidel, Dordrecht, Netherlands, 131-186.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J-Y Girard</author>
<author>Y Lafont</author>
<author>P Taylor</author>
</authors>
<title>Proofs and Types, Volume 7 of Cambridge Tracts in Theoretical Computer Science.</title>
<date>1989</date>
<publisher>Cambridge University Press,</publisher>
<location>Cambridge, U.K.</location>
<contexts>
<context position="14980" citStr="Girard et al. 1989" startWordPosition="2610" endWordPosition="2613">ssumptions F. The rules of application and abstraction take then the form x:a,F1-u:$ FI-u:a 6 r xx.0 : a —÷ (3 r, I- v(u) : It is easy to see that, except for the use of sequences rather than sets, these two rules correspond directly to the operations of type assignments and assumptions sets described under condition 2 above. Furthermore, condition 1 corresponds in this system to making each sequent A I- A, where A is some type assignment, an axiom. Finally, the fact that we are interested in assumptions sets rather than assumption sequences is encoded by the following three structural rules (Girard et al. 1989): [exchange] . F, B, A, A C F, A, B, A C Computational Linguistics Volume 16, Number 1, March 1990 3 Fernando C. N. Pereira Categorial Semantics and Scoping [weakening] . A, r F B The exchange rule allows us to ignore assumption order, so the collection of assumptions forms a bag rather than a set. Adding contraction permits us to ignore the number of occurrences of an assumption, that is, the assumption collection is treated as a set. Without contraction, no variable can have more than one occurrence. Finally, weakening allows irrelevant elements to be added to the assumptions without changin</context>
</contexts>
<marker>Girard, Lafont, Taylor, 1989</marker>
<rawString>Girard, J.-Y.; Lafont, Y.; and Taylor, P. 1989 Proofs and Types, Volume 7 of Cambridge Tracts in Theoretical Computer Science. Cambridge University Press, Cambridge, U.K.</rawString>
</citation>
<citation valid="true">
<authors>
<author>I R Heim</author>
</authors>
<title>The Semantics of Definite and Indefinite Noun Phrases.</title>
<date>1982</date>
<tech>Ph.D. Thesis,</tech>
<institution>Department of Linguistics, University of Massachusetts,</institution>
<location>Amherst, MA.</location>
<contexts>
<context position="894" citStr="Heim 1982" startWordPosition="134" endWordPosition="135">of logical form. Such reliance on the form rather than the content of semantic interpretations goes against the spirit of compositionality. I will show that those scoping restrictions follow from simple and fundamental facts about functional application and abstraction, and can be expressed as constraints on the derivation of possible meanings for sentences rather than constraints of the alleged forms of those meanings. 1 AN OBVIOUS CONSTRAINT? Treatments of quantifier scope in Montague grammar (Montague 1973; Dowty et al. 1981; Cooper 1983), transformational grammar (Reinhart 1983; May 1985; Heim 1982; Roberts 1987), and computational linguistics (Hobbs and Shieber 1987; Moran 1988; Alshawi et al. 1989) have depended implicitly or explicitly on a constraint on possible logical forms to explain why examples&apos; such as 1. *A woman who saw every man disliked him are ungrammatical, and why in examples such as 2. Every man saw a friend of his 3. Every admirer of a picture of himself is vain the every. . . noun phrase must have wider scope than the a . . . noun phrase if the pronoun in each example is assumed to be bound by its antecedent. What exactly counts as bound anaphora varies between diffe</context>
<context position="3388" citStr="Heim 1982" startWordPosition="570" endWordPosition="571">pe of its binder. The argument above is often taken to be so obvious and uncontroversial that it warrants only a remark in passing, if any (Cooper 1983; Reinhart 1983; Partee and Bach 1984; May 1985; van Riemsdijk and Williams 1986; Williams 1986; Roberts 1987), even though it depends on nontrivial assumptions on the role of logical form in linguistic theory and semantics. First of all, and most immediately, there is the requirement for a logical-form level of representation, either in the predicate-logic format exemplified above or in some tree format as is usual in transformational grammar (Heim 1982; Cooper 1983; May 1985; van Riemsdijk and Williams 1986; Williams 1986; Roberts 1987). Second, and most relevant to Montague grammar and related approaches, the constraint is given in terms of restrictions on formal objects (logical forms), which in turn are related to meanings through a denotation relation. However, compositionality as it is commonly understood requires meanings of phrases to be functions of the meanings rather than the forms of their constituents. This is a problem even in accounts based on quantifier storage (Cooper 1983; van Eijck 1985), which are precisely designed, as v</context>
</contexts>
<marker>Heim, 1982</marker>
<rawString>Heim, I. R. 1982 The Semantics of Definite and Indefinite Noun Phrases. Ph.D. Thesis, Department of Linguistics, University of Massachusetts, Amherst, MA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Hendriks</author>
</authors>
<title>Type Change in Semantics: The Scope of Quantification and Coordination,&amp;quot;</title>
<date>1987</date>
<pages>95--120</pages>
<editor>In E. Klein and J. van Benthem (eds.), Categories,</editor>
<institution>Polymorphism and Unification. Centre for Cognitive Science, University of Edinburgh,</institution>
<location>Edinburgh, U.K.,</location>
<contexts>
<context position="17511" citStr="Hendriks 1987" startWordPosition="3035" endWordPosition="3036">the rules of a semantic calculus from axioms giving the types of the lexical items in the phrase. However, this is far too liberal in that the possible meanings of English phrases do not depend only on the types involved but also on the syntactic structure of the phrases. A possible way out is to encode the relevant syntactic constraints in a more elaborate and restrictive system of types and rules of inference. The prime example of a more constrained system is the Lambek calculus (Lambek 1958) and its more recent elaborations within categorial grammar and semantics (van Benthem 1986a, 1986b; Hendriks 1987; Moortgat 1988). In particular, Hendriks (1987) proposes a system for quantifier raising, which however is too restrictive in its coverage to account for the phenomena of interest here. Instead of trying to construct a type system and type rules such that free application of the rules starting from appropriate lexical axioms will generate all and only the possible meanings of a phrase, I will instead take a more conservative route related to Montague grammar and early versions of GPSG (Gazdar 1982), and use syntactic analyses to control semantic derivations. First, a set of derived rules will</context>
<context position="33443" citStr="Hendriks 1987" startWordPosition="5721" endWordPosition="5722">ntic interpretation outlined above avoids the need for manipulations of logical forms in deriving the possible meanings of quantified sentences. It also avoids the need for such devices as distinguished variables (Gazdar 1982; Cooper 1983) to deal with trace abstraction. Instead, specialized versions of the basic rule of functional abstraction are used. To my knowledge, the only other approaches to these problems that do not depend on formal operations on logical forms are those based on specialized logics of type change, usually restrictions of the Curry or Lambek systems (van Benthem 1986a; Hendriks 1987; Moortgat 1988). In those accounts, a phrase P with meaning p of type T is considered to have also alternative meaning p&apos; of type T&apos;, with the corresponding combination possibilities, if p&apos;: T&apos; follows from p:T in the chosen logic. The central problem in this approach is to design a calculus that will cover all the actual semantic alternatives (for instance, all the possible quantifier scopings) without introducing spurious interpretations. For quantifier raising, the system of Hendriks seems the most promising so far, but it is at present too restrictive to support raising from nounphrase co</context>
</contexts>
<marker>Hendriks, 1987</marker>
<rawString>Hendriks, H. 1987 &amp;quot;Type Change in Semantics: The Scope of Quantification and Coordination,&amp;quot; In E. Klein and J. van Benthem (eds.), Categories, Polymorphism and Unification. Centre for Cognitive Science, University of Edinburgh, Edinburgh, U.K., 95-120.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P-K Halvorsen</author>
<author>R M Kaplan</author>
</authors>
<title>Projections and Semantic Description in Lexical-Functional Grammar,&amp;quot;</title>
<date>1988</date>
<booktitle>In Proceedings of the International Conference on Fifth Generation Computer Systems,</booktitle>
<pages>1116--1122</pages>
<location>Tokyo, Japan,</location>
<contexts>
<context position="34402" citStr="Halvorsen and Kaplan 1988" startWordPosition="5869" endWordPosition="5872"> alternatives (for instance, all the possible quantifier scopings) without introducing spurious interpretations. For quantifier raising, the system of Hendriks seems the most promising so far, but it is at present too restrictive to support raising from nounphrase complements. Formal types and derived rules are a rather specialpurpose mechanism for constraining semantic derivations. A more general view, based on a notion of the possible relationships between syntactic and semantic algebra is desirable here, maybe following from the notion of projection proposed for lexical-functional grammar (Halvorsen and Kaplan 1988). An important question I have finessed here is that of the compositionality of the proposed semantic calculus. It is clear that the application of semantic rules is governed only by the existence of appropriate syntactic licensing and by the availability of premises of the appropriate types. In other words, no rule is sensitive to the form of any of the meanings appearing in its premises. However, there may be some doubt as to the status of the basic abstraction rule and those derived from it. After all, the use of A-abstraction in the consequent of those rules seems to imply the constraint t</context>
</contexts>
<marker>Halvorsen, Kaplan, 1988</marker>
<rawString>Halvorsen, P.-K. and Kaplan, R. M. 1988 &amp;quot;Projections and Semantic Description in Lexical-Functional Grammar,&amp;quot; In Proceedings of the International Conference on Fifth Generation Computer Systems, Tokyo, Japan, 1116-1122.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W A Howard</author>
</authors>
<title>The Formulae-As-Types Notion of Construction,&amp;quot;</title>
<date>1980</date>
<booktitle>Essays on Combinatory Logic, Lambda Calculus and Formalism,</booktitle>
<pages>479--490</pages>
<editor>In J. P. Seldin and J. R. Hindley (eds.), To H. B. Curry:</editor>
<publisher>Academic Press,</publisher>
<location>London,</location>
<contexts>
<context position="7448" citStr="Howard 1980" startWordPosition="1244" endWordPosition="1245">988), but avoids that system&apos;s use of formal conditions on the order of assumption discharge. 2 CURRY&apos;S CALCULUS OF FUNCTIONALITY Work in combinatory logic and the A-calculus is concerned with the elucidation of the basic notion of functionality: how to construct functions, and how to apply functions to their arguments. There is a very large body of results in this area, of which I will need only a very small part. One of the simplest and most elegant accounts of functionality, originally introduced by Curry and Feys (1968) and further elaborated by other authors (Stenlund 1972; Laimbek 1980; Howard 1980) involves the use of a logical calculus to describe the types of valid functional objects. In a natural-deduction format (Prawitz 1965), the calculus can be simply given by the following two rules: (a) a a i(3 a The first rule states that the result of applying a function from objects of type a to objects of type 0 (a function of type a 0) to an object of type a is an object of type The second rule states that if from an arbitrary object of type a it is possible to construct an object of type 0, then one has a function from objects of type a to objects of type 0. In this rule and all that foll</context>
</contexts>
<marker>Howard, 1980</marker>
<rawString>Howard, W. A. 1980 The Formulae-As-Types Notion of Construction,&amp;quot; In J. P. Seldin and J. R. Hindley (eds.), To H. B. Curry: Essays on Combinatory Logic, Lambda Calculus and Formalism, Academic Press, London, 479-490.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J R Hobbs</author>
<author>S M Shieber</author>
</authors>
<title>An Algorithm for Generating Quantifier Scopings.&amp;quot;</title>
<date>1987</date>
<journal>Computational Linguistics,</journal>
<pages>13--47</pages>
<contexts>
<context position="964" citStr="Hobbs and Shieber 1987" startWordPosition="141" endWordPosition="144">e content of semantic interpretations goes against the spirit of compositionality. I will show that those scoping restrictions follow from simple and fundamental facts about functional application and abstraction, and can be expressed as constraints on the derivation of possible meanings for sentences rather than constraints of the alleged forms of those meanings. 1 AN OBVIOUS CONSTRAINT? Treatments of quantifier scope in Montague grammar (Montague 1973; Dowty et al. 1981; Cooper 1983), transformational grammar (Reinhart 1983; May 1985; Heim 1982; Roberts 1987), and computational linguistics (Hobbs and Shieber 1987; Moran 1988; Alshawi et al. 1989) have depended implicitly or explicitly on a constraint on possible logical forms to explain why examples&apos; such as 1. *A woman who saw every man disliked him are ungrammatical, and why in examples such as 2. Every man saw a friend of his 3. Every admirer of a picture of himself is vain the every. . . noun phrase must have wider scope than the a . . . noun phrase if the pronoun in each example is assumed to be bound by its antecedent. What exactly counts as bound anaphora varies between different accounts of the phenomena, but the rough intuition is that semant</context>
<context position="2432" citStr="Hobbs and Shieber 1987" startWordPosition="405" endWordPosition="408">disliked(w, m) but this is &amp;quot;ill-formed&amp;quot; because variable m occurs as an argument of disliked outside the scope of its binder Vm .2 As for Examples (2) and (3), the argument is similar: wide scope for the logical form of the a . . . noun phrase would leave an occurrence of the variable that the logical form of every. . . binds outside the scope of this quantifier. For lack of an official name in the literature for this constraint, I will call it here the free-variable constraint. In accounts of scoping possibilities based on quantifier raising or storage (Cooper 1983; van Eijck 1985; May 1985; Hobbs and Shieber 1987) the free-variable constraint is enforced either by keeping track of the set of free variables free (q) in each raisable (storable) term q and when x E free (q) blocking the raising of q from any context Bx.t in which x is bound by some binder B, or by checking after all applications of raising (unstoring) that no variable occurs outside the scope of its binder. The argument above is often taken to be so obvious and uncontroversial that it warrants only a remark in passing, if any (Cooper 1983; Reinhart 1983; Partee and Bach 1984; May 1985; van Riemsdijk and Williams 1986; Williams 1986; Rober</context>
</contexts>
<marker>Hobbs, Shieber, 1987</marker>
<rawString>Hobbs, J. R. and Shieber, S. M. 1987 &amp;quot;An Algorithm for Generating Quantifier Scopings.&amp;quot; Computational Linguistics, 13:47-63.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Lambek</author>
</authors>
<title>The Mathematics of Sentence Structure.&amp;quot;</title>
<date>1958</date>
<journal>American Mathematical Monthly,</journal>
<pages>65--154</pages>
<contexts>
<context position="17397" citStr="Lambek 1958" startWordPosition="3019" endWordPosition="3020">llowable semantic combinations, the possible meanings of a phrase are exactly those whose type can be derived by the rules of a semantic calculus from axioms giving the types of the lexical items in the phrase. However, this is far too liberal in that the possible meanings of English phrases do not depend only on the types involved but also on the syntactic structure of the phrases. A possible way out is to encode the relevant syntactic constraints in a more elaborate and restrictive system of types and rules of inference. The prime example of a more constrained system is the Lambek calculus (Lambek 1958) and its more recent elaborations within categorial grammar and semantics (van Benthem 1986a, 1986b; Hendriks 1987; Moortgat 1988). In particular, Hendriks (1987) proposes a system for quantifier raising, which however is too restrictive in its coverage to account for the phenomena of interest here. Instead of trying to construct a type system and type rules such that free application of the rules starting from appropriate lexical axioms will generate all and only the possible meanings of a phrase, I will instead take a more conservative route related to Montague grammar and early versions of </context>
<context position="19444" citStr="Lambek 1958" startWordPosition="3352" endWordPosition="3353">of the NP and e t the type of the meaning of the VP. Third, the domain of types will be enriched with a few new type constructors, in addition to the function type constructor From the semantic point of view, these type constructors add no new types, but allow a convenient encoding of rule applicability constraints motivated by syntactic considerations. This enrichment of the formal universe of types for syntactic purposes is familiar from Mont ague grammar (Montague 1973), where it is used to distinguish different syntactic realizations of the same semantic type, and from categorial grammar (Lambek 1958; Steeclman 1987), where it is used to capture syntactic word order constraints. Together, the above refinements allow the syntax of language to restrict what potential semantic combinations are actually realized. Any derivations will be sound with respect to [app] and [abs], but many derivations allowed by these rules will be blocked. 4 DERIVED RULES For the derived rules, we enrich the type system with a formal type constructor quant (q), where q is a quantifier, that is, a value of type (e t) t, and two type constants (nullary constructors) pron for pronoun assumptions and trace for traces </context>
</contexts>
<marker>Lambek, 1958</marker>
<rawString>Lambek, J. 1958 &amp;quot;The Mathematics of Sentence Structure.&amp;quot; American Mathematical Monthly, 65:154-170.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Lambek</author>
</authors>
<title>From A-Calculus to Cartesian Closed Categories,&amp;quot;</title>
<date>1980</date>
<booktitle>Essays on Combinatory Logic, Lambda Calculus and Formalism,</booktitle>
<pages>375--402</pages>
<editor>In J. P. Seldin and J. R. Hindley (eds.), To H. B. Curry:</editor>
<publisher>Academic Press,</publisher>
<location>London,</location>
<marker>Lambek, 1980</marker>
<rawString>Lambek, J. 1980 &amp;quot;From A-Calculus to Cartesian Closed Categories,&amp;quot; In J. P. Seldin and J. R. Hindley (eds.), To H. B. Curry: Essays on Combinatory Logic, Lambda Calculus and Formalism, Academic Press, London, 375-402.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R May</author>
</authors>
<title>Logical Form: Its Structure and Derivation, Volume 12 of Linguistic Inquiry Monographs.</title>
<date>1985</date>
<publisher>MIT Press,</publisher>
<location>Cambridge, MA.</location>
<contexts>
<context position="883" citStr="May 1985" startWordPosition="132" endWordPosition="133">t a level of logical form. Such reliance on the form rather than the content of semantic interpretations goes against the spirit of compositionality. I will show that those scoping restrictions follow from simple and fundamental facts about functional application and abstraction, and can be expressed as constraints on the derivation of possible meanings for sentences rather than constraints of the alleged forms of those meanings. 1 AN OBVIOUS CONSTRAINT? Treatments of quantifier scope in Montague grammar (Montague 1973; Dowty et al. 1981; Cooper 1983), transformational grammar (Reinhart 1983; May 1985; Heim 1982; Roberts 1987), and computational linguistics (Hobbs and Shieber 1987; Moran 1988; Alshawi et al. 1989) have depended implicitly or explicitly on a constraint on possible logical forms to explain why examples&apos; such as 1. *A woman who saw every man disliked him are ungrammatical, and why in examples such as 2. Every man saw a friend of his 3. Every admirer of a picture of himself is vain the every. . . noun phrase must have wider scope than the a . . . noun phrase if the pronoun in each example is assumed to be bound by its antecedent. What exactly counts as bound anaphora varies be</context>
<context position="2407" citStr="May 1985" startWordPosition="403" endWordPosition="404">(w, m)) A disliked(w, m) but this is &amp;quot;ill-formed&amp;quot; because variable m occurs as an argument of disliked outside the scope of its binder Vm .2 As for Examples (2) and (3), the argument is similar: wide scope for the logical form of the a . . . noun phrase would leave an occurrence of the variable that the logical form of every. . . binds outside the scope of this quantifier. For lack of an official name in the literature for this constraint, I will call it here the free-variable constraint. In accounts of scoping possibilities based on quantifier raising or storage (Cooper 1983; van Eijck 1985; May 1985; Hobbs and Shieber 1987) the free-variable constraint is enforced either by keeping track of the set of free variables free (q) in each raisable (storable) term q and when x E free (q) blocking the raising of q from any context Bx.t in which x is bound by some binder B, or by checking after all applications of raising (unstoring) that no variable occurs outside the scope of its binder. The argument above is often taken to be so obvious and uncontroversial that it warrants only a remark in passing, if any (Cooper 1983; Reinhart 1983; Partee and Bach 1984; May 1985; van Riemsdijk and Williams 1</context>
</contexts>
<marker>May, 1985</marker>
<rawString>May, R. 1985 Logical Form: Its Structure and Derivation, Volume 12 of Linguistic Inquiry Monographs. MIT Press, Cambridge, MA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D A Miller</author>
<author>G Nadathur</author>
</authors>
<title>Higher-Order Logic Programming,&amp;quot;</title>
<date>1986</date>
<booktitle>Third International Conference on Logic Programming,</booktitle>
<editor>In E. Shapiro (ed.),</editor>
<publisher>Springer-Verlag,</publisher>
<location>Berlin,</location>
<contexts>
<context position="35488" citStr="Miller and Nadathur 1986" startWordPosition="6045" endWordPosition="6048">action rule and those derived from it. After all, the use of A-abstraction in the consequent of those rules seems to imply the constraint that the abstracted object should formally be a variable. However, this is only superficially the case. I have used the formal operation of A-abstraction to represent functional abstraction in this paper, but functional abstraction itself is independent of its formal representation in the A-calculus. All that is required is a calculus of functional objects in which those objects satisfy their usual algebraic properties, such as what is provided by A-Prolog (Miller and Nadathur 1986). For instance, in a A-Prolog realization of the proposed system, abstractions arising from the [aim] rule or its derived rule surrogates could be calculated through a combination of universal quantification in the metalanguage (the language in which the proof system is described) and higher-order functional equations solved by higher-order unification (Felty and Miller 1988). Syntactic manipula[app] a(friend-of(h)): (e—ot)--,t 1: quant(a(friend-of(h)))l saw saw: e.--e---,t (quant-lic] : e [app] saw(f): 8 Computational Linguistics Volume 16, Number 1, March 1990 Fernando C. N. Pereira Categori</context>
</contexts>
<marker>Miller, Nadathur, 1986</marker>
<rawString>Miller, D. A. and Nadathur, G. 1986 &amp;quot;Higher-Order Logic Programming,&amp;quot; In E. Shapiro (ed.), Third International Conference on Logic Programming, Springer-Verlag, Berlin,</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Montague</author>
</authors>
<title>The Proper Treatment of Quantification in Ordinary English,&amp;quot; In</title>
<date>1973</date>
<editor>R. H. Thomason (ed.), Formal Philosophy.</editor>
<publisher>Yale University Press,</publisher>
<location>New Haven, CT.</location>
<contexts>
<context position="799" citStr="Montague 1973" startWordPosition="119" endWordPosition="120">ses in natural language are usually expressed in terms of formal constraints on binding at a level of logical form. Such reliance on the form rather than the content of semantic interpretations goes against the spirit of compositionality. I will show that those scoping restrictions follow from simple and fundamental facts about functional application and abstraction, and can be expressed as constraints on the derivation of possible meanings for sentences rather than constraints of the alleged forms of those meanings. 1 AN OBVIOUS CONSTRAINT? Treatments of quantifier scope in Montague grammar (Montague 1973; Dowty et al. 1981; Cooper 1983), transformational grammar (Reinhart 1983; May 1985; Heim 1982; Roberts 1987), and computational linguistics (Hobbs and Shieber 1987; Moran 1988; Alshawi et al. 1989) have depended implicitly or explicitly on a constraint on possible logical forms to explain why examples&apos; such as 1. *A woman who saw every man disliked him are ungrammatical, and why in examples such as 2. Every man saw a friend of his 3. Every admirer of a picture of himself is vain the every. . . noun phrase must have wider scope than the a . . . noun phrase if the pronoun in each example is as</context>
<context position="19310" citStr="Montague 1973" startWordPosition="3331" endWordPosition="3332">using a context-free syntax, the syntactic rule S NP VP might license the function application rule [app] with e the type of the meaning of the NP and e t the type of the meaning of the VP. Third, the domain of types will be enriched with a few new type constructors, in addition to the function type constructor From the semantic point of view, these type constructors add no new types, but allow a convenient encoding of rule applicability constraints motivated by syntactic considerations. This enrichment of the formal universe of types for syntactic purposes is familiar from Mont ague grammar (Montague 1973), where it is used to distinguish different syntactic realizations of the same semantic type, and from categorial grammar (Lambek 1958; Steeclman 1987), where it is used to capture syntactic word order constraints. Together, the above refinements allow the syntax of language to restrict what potential semantic combinations are actually realized. Any derivations will be sound with respect to [app] and [abs], but many derivations allowed by these rules will be blocked. 4 DERIVED RULES For the derived rules, we enrich the type system with a formal type constructor quant (q), where q is a quantifi</context>
<context position="27057" citStr="Montague 1973" startWordPosition="4636" endWordPosition="4637">igure 5 for sentence (2). 4.3 QUANTIFIER RAISING The rules discussed earlier provide some of the auxiliary machinery required to illustrate the free-variable constraint. However, the main burden of enforcing the conhimself pron&apos; bored bored. e—)e-4t e [pron-lic] John j: e bored(x): e--)t [app] bored(x)(j): t [app] bored(j)(j): t [pron-abs] Figure 3 Using the Pronoun Rules. straint falls on the rules responsible for quantifier raising, and therefore I will cover in somewhat greater detail the derivation of those rules from the basic rules of functionality. I will follow here the standard view (Montague 1973; Barwise and Cooper 1981) that the meanings of natural language determiners are generalized quantifiers, with type (e t) (e t) t. For example, the meaning of every would be Xr.Xs.V x.r(x) s(x), and the meaning of the noun phrase every man Xs.V x.man(x) s(x). To interpret the combination of a quantified noun phrase with the phrase containing it that forms its scope, we apply the meaning of the noun phrase to a property s derived from the meaning of the scope. The purpose of devices such as quantifying-in in Montague grammar, Cooper storage, or quantifier raising in transformational grammar is </context>
</contexts>
<marker>Montague, 1973</marker>
<rawString>Montague, R. 1973 &amp;quot;The Proper Treatment of Quantification in Ordinary English,&amp;quot; In R. H. Thomason (ed.), Formal Philosophy. Yale University Press, New Haven, CT.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Moortgat</author>
</authors>
<title>Categorial Investigations: Logical and Linguistic Aspects of the Lambek Calculus.</title>
<date>1988</date>
<tech>Ph.D. Thesis,</tech>
<institution>University of Amsterdam,</institution>
<location>Amsterdam, Netherlands.</location>
<contexts>
<context position="15994" citStr="Moortgat 1988" startWordPosition="2780" endWordPosition="2781">mption collection is treated as a set. Without contraction, no variable can have more than one occurrence. Finally, weakening allows irrelevant elements to be added to the assumptions without changing what follows from them. Without it, vacuous abstraction is not possible, since weakening provides the only means of introducing a variable in an assumption without having it also in the conclusion (as axioms require). Choices of structural rules and other constraints on allowed sequents lead to a categorial hierarchy whose members are systems with varying semantic powers of semantic combination (Moortgat 1988; van Bentham 1989). If we ignore the associated X-expressions and consider only the types, the types derivable using the full set of rules are exactly the consequences of the three axioms a — a, a (f3 a), and (cy (0 7)) ((a (3) (a 7)), which are the polymorphic types of the three combinators I, K, and S that generate all the closed typed X-calculus terms. Furthermore, if we interpret —■ as implication, these theorems are exactly those of the pure implicational fragment of intuitionistic propositional logic (Curry and Feys 1968; Anderson and Belnap Jr. 1975). In contrast, without weakening (va</context>
<context position="17527" citStr="Moortgat 1988" startWordPosition="3037" endWordPosition="3038">semantic calculus from axioms giving the types of the lexical items in the phrase. However, this is far too liberal in that the possible meanings of English phrases do not depend only on the types involved but also on the syntactic structure of the phrases. A possible way out is to encode the relevant syntactic constraints in a more elaborate and restrictive system of types and rules of inference. The prime example of a more constrained system is the Lambek calculus (Lambek 1958) and its more recent elaborations within categorial grammar and semantics (van Benthem 1986a, 1986b; Hendriks 1987; Moortgat 1988). In particular, Hendriks (1987) proposes a system for quantifier raising, which however is too restrictive in its coverage to account for the phenomena of interest here. Instead of trying to construct a type system and type rules such that free application of the rules starting from appropriate lexical axioms will generate all and only the possible meanings of a phrase, I will instead take a more conservative route related to Montague grammar and early versions of GPSG (Gazdar 1982), and use syntactic analyses to control semantic derivations. First, a set of derived rules will be used in addi</context>
<context position="20558" citStr="Moortgat 1988" startWordPosition="3532" endWordPosition="3534"> t, and two type constants (nullary constructors) pron for pronoun assumptions and trace for traces in relative clauses. It is important to observe that the types resulting from the application of these constructors are not to be taken as being subtypes of e, and thus the rules involving them should not be seen as type subsumption rules. Instead, the new formal type constructors serve to constrain possible derivations in a similar way to the directed function type constructors of Lambek calculus (Lambek 1958) or the extraction constructor used by Moortgat to handle long-distance dependencies (Moortgat 1988). Because of their particular nature, the formal type constructors are handled in a special way diverging somewhat [contraction] : A, r B A, A, r F B r B 4 Computational Linguistics Volume 16, Number 1, March 1990 Fernando C. N. Pereira Categorial Semantics and Scoping from the usual structure of natural-deduction proof systems. Specifically, each formal type constructor is introduced as an assumption by appropriate syntactic licensing. However, the types resulting from the formal constructors do not combine with any other types, so the only way of having the associated variables participate i</context>
<context position="33459" citStr="Moortgat 1988" startWordPosition="5723" endWordPosition="5724">tion outlined above avoids the need for manipulations of logical forms in deriving the possible meanings of quantified sentences. It also avoids the need for such devices as distinguished variables (Gazdar 1982; Cooper 1983) to deal with trace abstraction. Instead, specialized versions of the basic rule of functional abstraction are used. To my knowledge, the only other approaches to these problems that do not depend on formal operations on logical forms are those based on specialized logics of type change, usually restrictions of the Curry or Lambek systems (van Benthem 1986a; Hendriks 1987; Moortgat 1988). In those accounts, a phrase P with meaning p of type T is considered to have also alternative meaning p&apos; of type T&apos;, with the corresponding combination possibilities, if p&apos;: T&apos; follows from p:T in the chosen logic. The central problem in this approach is to design a calculus that will cover all the actual semantic alternatives (for instance, all the possible quantifier scopings) without introducing spurious interpretations. For quantifier raising, the system of Hendriks seems the most promising so far, but it is at present too restrictive to support raising from nounphrase complements. Forma</context>
</contexts>
<marker>Moortgat, 1988</marker>
<rawString>Moortgat, M. 1988 Categorial Investigations: Logical and Linguistic Aspects of the Lambek Calculus. Ph.D. Thesis, University of Amsterdam, Amsterdam, Netherlands.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D B Moran</author>
</authors>
<title>Quantifier Scoping in the SRI Core Language Engine,&amp;quot;</title>
<date>1988</date>
<booktitle>Proceedings of the 26th Annual Meeting of the Association for Computational Linguistics,</booktitle>
<pages>33--47</pages>
<contexts>
<context position="976" citStr="Moran 1988" startWordPosition="145" endWordPosition="146">terpretations goes against the spirit of compositionality. I will show that those scoping restrictions follow from simple and fundamental facts about functional application and abstraction, and can be expressed as constraints on the derivation of possible meanings for sentences rather than constraints of the alleged forms of those meanings. 1 AN OBVIOUS CONSTRAINT? Treatments of quantifier scope in Montague grammar (Montague 1973; Dowty et al. 1981; Cooper 1983), transformational grammar (Reinhart 1983; May 1985; Heim 1982; Roberts 1987), and computational linguistics (Hobbs and Shieber 1987; Moran 1988; Alshawi et al. 1989) have depended implicitly or explicitly on a constraint on possible logical forms to explain why examples&apos; such as 1. *A woman who saw every man disliked him are ungrammatical, and why in examples such as 2. Every man saw a friend of his 3. Every admirer of a picture of himself is vain the every. . . noun phrase must have wider scope than the a . . . noun phrase if the pronoun in each example is assumed to be bound by its antecedent. What exactly counts as bound anaphora varies between different accounts of the phenomena, but the rough intuition is that semantically a bou</context>
</contexts>
<marker>Moran, 1988</marker>
<rawString>Moran, D. B. 1988 &amp;quot;Quantifier Scoping in the SRI Core Language Engine,&amp;quot; Proceedings of the 26th Annual Meeting of the Association for Computational Linguistics, 33-47.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Partee</author>
<author>E Bach</author>
</authors>
<title>Quantification, Pronouns and VP Anaphora,&amp;quot;</title>
<date>1984</date>
<booktitle>Truth, Interpretation and Information, Foris,</booktitle>
<pages>99--130</pages>
<editor>In J. A. G. Groenendijk, T. M. V. Janssen, and M. B. J. Stokhof (eds.),</editor>
<location>Dordrecht, Netherlands,</location>
<contexts>
<context position="2967" citStr="Partee and Bach 1984" startWordPosition="502" endWordPosition="505">er raising or storage (Cooper 1983; van Eijck 1985; May 1985; Hobbs and Shieber 1987) the free-variable constraint is enforced either by keeping track of the set of free variables free (q) in each raisable (storable) term q and when x E free (q) blocking the raising of q from any context Bx.t in which x is bound by some binder B, or by checking after all applications of raising (unstoring) that no variable occurs outside the scope of its binder. The argument above is often taken to be so obvious and uncontroversial that it warrants only a remark in passing, if any (Cooper 1983; Reinhart 1983; Partee and Bach 1984; May 1985; van Riemsdijk and Williams 1986; Williams 1986; Roberts 1987), even though it depends on nontrivial assumptions on the role of logical form in linguistic theory and semantics. First of all, and most immediately, there is the requirement for a logical-form level of representation, either in the predicate-logic format exemplified above or in some tree format as is usual in transformational grammar (Heim 1982; Cooper 1983; May 1985; van Riemsdijk and Williams 1986; Williams 1986; Roberts 1987). Second, and most relevant to Montague grammar and related approaches, the constraint is giv</context>
</contexts>
<marker>Partee, Bach, 1984</marker>
<rawString>Partee, B. and Bach, E. 1984 &amp;quot;Quantification, Pronouns and VP Anaphora,&amp;quot; In J. A. G. Groenendijk, T. M. V. Janssen, and M. B. J. Stokhof (eds.), Truth, Interpretation and Information, Foris, Dordrecht, Netherlands, 99-130.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F C N Pereira</author>
</authors>
<title>A Calculus for Semantic Composition and Scoping,&amp;quot;</title>
<date>1989</date>
<booktitle>Proceedings of the 27th Annual Meeting of the Association for Computational Linguistics,</booktitle>
<pages>152--160</pages>
<marker>Pereira, 1989</marker>
<rawString>Pereira, F. C. N. 1989 &amp;quot;A Calculus for Semantic Composition and Scoping,&amp;quot; Proceedings of the 27th Annual Meeting of the Association for Computational Linguistics, 152-160.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M E Pollack</author>
<author>F C N Pereira</author>
</authors>
<title>An Integrated Framework for Semantic and Pragmatic Interpretation,&amp;quot;</title>
<date>1988</date>
<booktitle>Proceedings of the 26th Annual Meeting of the Association for Computational Linguistics,</booktitle>
<pages>75--86</pages>
<contexts>
<context position="6840" citStr="Pollack and Pereira (1988)" startWordPosition="1141" endWordPosition="1144">occurs. The main goal of this paper is to argue that the freevariable constraint is actually a consequence of basic semantic properties that hold in a semantic domain allowing functional application and abstraction, and are thus independent of a particular logical-form representation. As a corollary, I will also show that the constraint is better expressed as a restriction on the derivations of meanings of sentences from the meanings of their parts rather than a restriction on logical forms. The resulting system is related to the earlier system of conditional interpretation rules developed by Pollack and Pereira (1988), but avoids that system&apos;s use of formal conditions on the order of assumption discharge. 2 CURRY&apos;S CALCULUS OF FUNCTIONALITY Work in combinatory logic and the A-calculus is concerned with the elucidation of the basic notion of functionality: how to construct functions, and how to apply functions to their arguments. There is a very large body of results in this area, of which I will need only a very small part. One of the simplest and most elegant accounts of functionality, originally introduced by Curry and Feys (1968) and further elaborated by other authors (Stenlund 1972; Laimbek 1980; Howa</context>
<context position="36374" citStr="Pollack and Pereira 1988" startWordPosition="6171" endWordPosition="6174">ystem is described) and higher-order functional equations solved by higher-order unification (Felty and Miller 1988). Syntactic manipula[app] a(friend-of(h)): (e—ot)--,t 1: quant(a(friend-of(h)))l saw saw: e.--e---,t (quant-lic] : e [app] saw(f): 8 Computational Linguistics Volume 16, Number 1, March 1990 Fernando C. N. Pereira Categorial Semantics and Scoping tion of object-level variables and binders would be neither necessary nor possible. The investigation reported in this paper was motivated by the use of the free-variable constraint in an earlier system of semantic-interpretation rules (Pollack and Pereira 1988; Pereira and Pollack in press). Those rules operate on objects formally analogous to sequents, with assumptions for quantified noun phrases and pronouns as well as for some other purposes. It would be worth seeing to what extent those formal operations on sequent-like objects can be mapped onto the sequent rules for some version of the functionality calculus. Verb-phrase ellipsis and gapping constructions provide another possible area of application for the kind of categorial semantics sketched in this paper. A semantic account of those constructions requires the extraction of the meaning of </context>
</contexts>
<marker>Pollack, Pereira, 1988</marker>
<rawString>Pollack, M. E. and Pereira, F. C. N. 1988 &amp;quot;An Integrated Framework for Semantic and Pragmatic Interpretation,&amp;quot; Proceedings of the 26th Annual Meeting of the Association for Computational Linguistics, 75-86.</rawString>
</citation>
<citation valid="false">
<authors>
<author>F C N Pereira</author>
<author>M E Pollack</author>
</authors>
<title>Incremental Interpretation,&amp;quot; Artificial Intelligence,</title>
<note>in press.</note>
<marker>Pereira, Pollack, </marker>
<rawString>Pereira, F. C. N. and Pollack, M. E. &amp;quot;Incremental Interpretation,&amp;quot; Artificial Intelligence, in press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Prawitz</author>
</authors>
<title>Natural Deduction: A Proof-Theoretical Study. Almqvist and Wiksell,</title>
<date>1965</date>
<location>Uppsala, Sweden.</location>
<contexts>
<context position="7583" citStr="Prawitz 1965" startWordPosition="1265" endWordPosition="1266"> in combinatory logic and the A-calculus is concerned with the elucidation of the basic notion of functionality: how to construct functions, and how to apply functions to their arguments. There is a very large body of results in this area, of which I will need only a very small part. One of the simplest and most elegant accounts of functionality, originally introduced by Curry and Feys (1968) and further elaborated by other authors (Stenlund 1972; Laimbek 1980; Howard 1980) involves the use of a logical calculus to describe the types of valid functional objects. In a natural-deduction format (Prawitz 1965), the calculus can be simply given by the following two rules: (a) a a i(3 a The first rule states that the result of applying a function from objects of type a to objects of type 0 (a function of type a 0) to an object of type a is an object of type The second rule states that if from an arbitrary object of type a it is possible to construct an object of type 0, then one has a function from objects of type a to objects of type 0. In this rule and all that follow, the parenthesized formula at the top indicates the discharge of an assumption introduced in the derivation of the formula below it.</context>
<context position="11361" citStr="Prawitz (1965)" startWordPosition="1935" endWordPosition="1936">] to the assumptions discharged by that application. The derivation follows closely the syntax of the sentence. Specifically, the assumptions j : e, m: e, and hates: e e t correspond to the words &amp;quot;John,&amp;quot; &amp;quot;Mary,&amp;quot; and &amp;quot;hates&amp;quot; in the sentence, and the assumption x: e corresponds to the topicalization trace. To make precise what inferences are possible in the calculus of functionality, we need a precise notion of derivation. It turns out that seemingly small differences in this have important consequences as to what type assignments can be derived. The following definition is adapted from that of Prawitz (1965). A derivation is a tree with each node n labeled by a type assignment 4)(n) (the conclusion of the node) and by a set F(n) of type assignments giving the assumptions of ck(n). In addition, a derivation D satisfies the following conditions: 1. Each leaf node n has its labeling type assignment as single assumption, that is r(n) = {(n)}. 2. Each nonleaf node n corresponds either to an application of [app], in which case it has two daughters m and m&apos; with 4)(m) = u : a, 4)(m&apos;) = v: a 0(n) = v(u) : and F(n) = F(m) U F(m&apos;), or to an application of [abs], in which case n has a single daughter m, and</context>
</contexts>
<marker>Prawitz, 1965</marker>
<rawString>Prawitz, D. 1965 Natural Deduction: A Proof-Theoretical Study. Almqvist and Wiksell, Uppsala, Sweden.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Reinhart</author>
</authors>
<title>Anaphora and Semantic Interpretation.</title>
<date>1983</date>
<location>Croom Helm, London.</location>
<contexts>
<context position="873" citStr="Reinhart 1983" startWordPosition="130" endWordPosition="131">ts on binding at a level of logical form. Such reliance on the form rather than the content of semantic interpretations goes against the spirit of compositionality. I will show that those scoping restrictions follow from simple and fundamental facts about functional application and abstraction, and can be expressed as constraints on the derivation of possible meanings for sentences rather than constraints of the alleged forms of those meanings. 1 AN OBVIOUS CONSTRAINT? Treatments of quantifier scope in Montague grammar (Montague 1973; Dowty et al. 1981; Cooper 1983), transformational grammar (Reinhart 1983; May 1985; Heim 1982; Roberts 1987), and computational linguistics (Hobbs and Shieber 1987; Moran 1988; Alshawi et al. 1989) have depended implicitly or explicitly on a constraint on possible logical forms to explain why examples&apos; such as 1. *A woman who saw every man disliked him are ungrammatical, and why in examples such as 2. Every man saw a friend of his 3. Every admirer of a picture of himself is vain the every. . . noun phrase must have wider scope than the a . . . noun phrase if the pronoun in each example is assumed to be bound by its antecedent. What exactly counts as bound anaphora</context>
<context position="2945" citStr="Reinhart 1983" startWordPosition="500" endWordPosition="501">sed on quantifier raising or storage (Cooper 1983; van Eijck 1985; May 1985; Hobbs and Shieber 1987) the free-variable constraint is enforced either by keeping track of the set of free variables free (q) in each raisable (storable) term q and when x E free (q) blocking the raising of q from any context Bx.t in which x is bound by some binder B, or by checking after all applications of raising (unstoring) that no variable occurs outside the scope of its binder. The argument above is often taken to be so obvious and uncontroversial that it warrants only a remark in passing, if any (Cooper 1983; Reinhart 1983; Partee and Bach 1984; May 1985; van Riemsdijk and Williams 1986; Williams 1986; Roberts 1987), even though it depends on nontrivial assumptions on the role of logical form in linguistic theory and semantics. First of all, and most immediately, there is the requirement for a logical-form level of representation, either in the predicate-logic format exemplified above or in some tree format as is usual in transformational grammar (Heim 1982; Cooper 1983; May 1985; van Riemsdijk and Williams 1986; Williams 1986; Roberts 1987). Second, and most relevant to Montague grammar and related approaches,</context>
<context position="25532" citStr="Reinhart 1983" startWordPosition="4375" endWordPosition="4376">o rules are as follows: (x : pron) x : pron s :•a u : 13 [pron-lic] : [pron-abs] x : e . (Xx.$)(u) : a The pronoun resolution rule [pron-abs] applies only when u : ,3 is an undischarged assumption of s : a such that either 13 is trace or quant (q) for some quantifier q, or the assumption is licensed by some proper noun. These rules deal only with the construction of the meaning of phrases containing bound anaphora. In a more detailed grammar, the licensing of both rules would be further restricted by linguistic constraints on coreference— for instance, those usually associated with c-command (Reinhart 1983), which seem to need access to syntactic information (Williams 1986). In particular, the rules as given do not by themselves enforce any constraints on the possible antecedents of reflexives. The soundness of the rules can be seen by noting that the schematic derivation x : pro&amp; x : e s : a u : 13 (Xx.$)(u) : al corresponds simply to a schematic derivation involving multiple uses of the assumption u : u:fl• • •u:f3 s[x I u] : a where s [x/u ] denotes the result of substituting u for every free occurrence of x in s. Figure 3 shows a simple derivation involving the pronoun rules. The last deriva</context>
</contexts>
<marker>Reinhart, 1983</marker>
<rawString>Reinhart, T. 1983 Anaphora and Semantic Interpretation. Croom Helm, London.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C Roberts</author>
</authors>
<title>Modal Subordination, Anaphora and Distributivity.</title>
<date>1987</date>
<tech>Ph.D. Thesis,</tech>
<institution>Department of Linguistics, University of Massachusetts,</institution>
<location>Amherst, MA.</location>
<contexts>
<context position="909" citStr="Roberts 1987" startWordPosition="136" endWordPosition="137">form. Such reliance on the form rather than the content of semantic interpretations goes against the spirit of compositionality. I will show that those scoping restrictions follow from simple and fundamental facts about functional application and abstraction, and can be expressed as constraints on the derivation of possible meanings for sentences rather than constraints of the alleged forms of those meanings. 1 AN OBVIOUS CONSTRAINT? Treatments of quantifier scope in Montague grammar (Montague 1973; Dowty et al. 1981; Cooper 1983), transformational grammar (Reinhart 1983; May 1985; Heim 1982; Roberts 1987), and computational linguistics (Hobbs and Shieber 1987; Moran 1988; Alshawi et al. 1989) have depended implicitly or explicitly on a constraint on possible logical forms to explain why examples&apos; such as 1. *A woman who saw every man disliked him are ungrammatical, and why in examples such as 2. Every man saw a friend of his 3. Every admirer of a picture of himself is vain the every. . . noun phrase must have wider scope than the a . . . noun phrase if the pronoun in each example is assumed to be bound by its antecedent. What exactly counts as bound anaphora varies between different accounts o</context>
<context position="3040" citStr="Roberts 1987" startWordPosition="515" endWordPosition="516">1987) the free-variable constraint is enforced either by keeping track of the set of free variables free (q) in each raisable (storable) term q and when x E free (q) blocking the raising of q from any context Bx.t in which x is bound by some binder B, or by checking after all applications of raising (unstoring) that no variable occurs outside the scope of its binder. The argument above is often taken to be so obvious and uncontroversial that it warrants only a remark in passing, if any (Cooper 1983; Reinhart 1983; Partee and Bach 1984; May 1985; van Riemsdijk and Williams 1986; Williams 1986; Roberts 1987), even though it depends on nontrivial assumptions on the role of logical form in linguistic theory and semantics. First of all, and most immediately, there is the requirement for a logical-form level of representation, either in the predicate-logic format exemplified above or in some tree format as is usual in transformational grammar (Heim 1982; Cooper 1983; May 1985; van Riemsdijk and Williams 1986; Williams 1986; Roberts 1987). Second, and most relevant to Montague grammar and related approaches, the constraint is given in terms of restrictions on formal objects (logical forms), which in t</context>
</contexts>
<marker>Roberts, 1987</marker>
<rawString>Roberts, C. 1987 Modal Subordination, Anaphora and Distributivity. Ph.D. Thesis, Department of Linguistics, University of Massachusetts, Amherst, MA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Stenlund</author>
</authors>
<title>Combinators, Terms and Proof Theory.</title>
<date>1972</date>
<location>D. Reidel, Dordrecht, Netherlands.</location>
<contexts>
<context position="7420" citStr="Stenlund 1972" startWordPosition="1240" endWordPosition="1241">ped by Pollack and Pereira (1988), but avoids that system&apos;s use of formal conditions on the order of assumption discharge. 2 CURRY&apos;S CALCULUS OF FUNCTIONALITY Work in combinatory logic and the A-calculus is concerned with the elucidation of the basic notion of functionality: how to construct functions, and how to apply functions to their arguments. There is a very large body of results in this area, of which I will need only a very small part. One of the simplest and most elegant accounts of functionality, originally introduced by Curry and Feys (1968) and further elaborated by other authors (Stenlund 1972; Laimbek 1980; Howard 1980) involves the use of a logical calculus to describe the types of valid functional objects. In a natural-deduction format (Prawitz 1965), the calculus can be simply given by the following two rules: (a) a a i(3 a The first rule states that the result of applying a function from objects of type a to objects of type 0 (a function of type a 0) to an object of type a is an object of type The second rule states that if from an arbitrary object of type a it is possible to construct an object of type 0, then one has a function from objects of type a to objects of type 0. In</context>
</contexts>
<marker>Stenlund, 1972</marker>
<rawString>Stenlund, S. 1972 Combinators, Terms and Proof Theory. D. Reidel, Dordrecht, Netherlands.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C N Fernando</author>
</authors>
<title>Pereira Categorial Semantics and Scoping</title>
<date>1990</date>
<volume>16</volume>
<institution>Computational Linguistics</institution>
<marker>Fernando, 1990</marker>
<rawString>Computational Linguistics Volume 16, Number 1, March 1990 9 Fernando C. N. Pereira Categorial Semantics and Scoping</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Steedman</author>
</authors>
<title>Combinatory Grammars and Parasitic Gaps.&amp;quot; Natural Language and Linguistic Theory,</title>
<date>1987</date>
<pages>5--3</pages>
<marker>Steedman, 1987</marker>
<rawString>Steedman, M. 1987 &amp;quot;Combinatory Grammars and Parasitic Gaps.&amp;quot; Natural Language and Linguistic Theory, 5(3):403-439.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K A Vanlehn</author>
</authors>
<title>Determining the Scope of English Quantifiers.</title>
<date>1978</date>
<tech>M.S. thesis,</tech>
<institution>Massachusetts Institute of Technology,</institution>
<location>Cambridge, MA.</location>
<contexts>
<context position="5248" citStr="Vanlehn 1978" startWordPosition="880" endWordPosition="881">ve to be considered if raising out of relative clauses were allowed, for example in 4. An author who John has read every book by arrived In this example, if we did not assume the restriction against raising from relative clauses, the every . . . noun phrase could in principle be assigned widest scope, but this would be blocked by the free-variable constraint as shown by the occurrence of a free as an argument of book-by in V b.book-by(b, a) = ( 3 a.author(a) A has-read( john, b) A arrived(a)) That is, the alleged constraint against raising from relatives, for which many counterexamples exist (Vanlehn 1978), blocks some derivations in which otherwise the free-variable constraint would be involved, specifically those associated to syntactic configurations of the form [NP, • • • N [s ••• [NP.i Xi where X, is a pronoun or trace coindexed with NP, and NPi is a quantified noun phrase. Since some of the most extensive Montague grammar fragments in the literature (Dowty et al. 1981; Cooper 1983) do not cover the other major source of the problem, PP complements of noun phrases (replace S by PP in the configuration above), the question is effectively avoided in those treatments. Conversely, it could be </context>
</contexts>
<marker>Vanlehn, 1978</marker>
<rawString>Vanlehn, K. A. 1978 Determining the Scope of English Quantifiers. M.S. thesis, Massachusetts Institute of Technology, Cambridge, MA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J van Benthem</author>
</authors>
<title>Categorial Grammar and Lambda Calculus,&amp;quot;</title>
<date>1986</date>
<booktitle>Mathematical Logic and its Application,</booktitle>
<pages>39--60</pages>
<editor>In D. Skordev (ed.),</editor>
<publisher>Plenum Press,</publisher>
<location>New York,</location>
<marker>van Benthem, 1986</marker>
<rawString>van Benthem, J. 1986a &amp;quot;Categorial Grammar and Lambda Calculus,&amp;quot; In D. Skordev (ed.), Mathematical Logic and its Application, Plenum Press, New York, 39-60.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J van Benthem</author>
</authors>
<title>Essays in Logical Semantics,&amp;quot;</title>
<date>1986</date>
<journal>Volume</journal>
<booktitle>Studies in Linguistics</booktitle>
<volume>29</volume>
<location>Dordrecht, Netherlands.</location>
<marker>van Benthem, 1986</marker>
<rawString>van Benthem, J. 1986b &amp;quot;Essays in Logical Semantics,&amp;quot; Volume 29 of Studies in Linguistics and Philosophy. D. Reidel, Dordrecht, Netherlands.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J van Benthem</author>
</authors>
<title>Categorial Grammar and Type Theory.&amp;quot;</title>
<date>1989</date>
<journal>Journal of Philosophical Logic, In</journal>
<note>press,</note>
<marker>van Benthem, 1989</marker>
<rawString>van Benthem, J. 1989 &amp;quot;Categorial Grammar and Type Theory.&amp;quot; Journal of Philosophical Logic, In press, 1990.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J van Eijck</author>
</authors>
<title>Aspects of Quanttfication in Natural Language.</title>
<date>1985</date>
<tech>Ph.D. Thesis,</tech>
<institution>University of Groningen,</institution>
<location>Groningen, Netherlands.</location>
<marker>van Eijck, 1985</marker>
<rawString>van Eijck, J. 1985 Aspects of Quanttfication in Natural Language. Ph.D. Thesis, University of Groningen, Groningen, Netherlands.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H van Riemsdijk</author>
<author>E Williams</author>
</authors>
<title>Introduction to the Theory of Grammar,</title>
<date>1986</date>
<volume>12</volume>
<publisher>MIT Press,</publisher>
<location>Cambridge, MA.</location>
<marker>van Riemsdijk, Williams, 1986</marker>
<rawString>van Riemsdijk, H. and Williams, E. 1986 Introduction to the Theory of Grammar, Volume 12 of Current Studies in Linguistics. MIT Press, Cambridge, MA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Williams</author>
</authors>
<title>A Reassignment of the Functions of LF.&amp;quot;</title>
<date>1986</date>
<journal>Linguistic Inquiry,</journal>
<pages>17--2</pages>
<contexts>
<context position="3010" citStr="Williams 1986" startWordPosition="511" endWordPosition="512">; May 1985; Hobbs and Shieber 1987) the free-variable constraint is enforced either by keeping track of the set of free variables free (q) in each raisable (storable) term q and when x E free (q) blocking the raising of q from any context Bx.t in which x is bound by some binder B, or by checking after all applications of raising (unstoring) that no variable occurs outside the scope of its binder. The argument above is often taken to be so obvious and uncontroversial that it warrants only a remark in passing, if any (Cooper 1983; Reinhart 1983; Partee and Bach 1984; May 1985; van Riemsdijk and Williams 1986; Williams 1986; Roberts 1987), even though it depends on nontrivial assumptions on the role of logical form in linguistic theory and semantics. First of all, and most immediately, there is the requirement for a logical-form level of representation, either in the predicate-logic format exemplified above or in some tree format as is usual in transformational grammar (Heim 1982; Cooper 1983; May 1985; van Riemsdijk and Williams 1986; Williams 1986; Roberts 1987). Second, and most relevant to Montague grammar and related approaches, the constraint is given in terms of restrictions on formal objec</context>
<context position="25600" citStr="Williams 1986" startWordPosition="4385" endWordPosition="4386">: [pron-abs] x : e . (Xx.$)(u) : a The pronoun resolution rule [pron-abs] applies only when u : ,3 is an undischarged assumption of s : a such that either 13 is trace or quant (q) for some quantifier q, or the assumption is licensed by some proper noun. These rules deal only with the construction of the meaning of phrases containing bound anaphora. In a more detailed grammar, the licensing of both rules would be further restricted by linguistic constraints on coreference— for instance, those usually associated with c-command (Reinhart 1983), which seem to need access to syntactic information (Williams 1986). In particular, the rules as given do not by themselves enforce any constraints on the possible antecedents of reflexives. The soundness of the rules can be seen by noting that the schematic derivation x : pro&amp; x : e s : a u : 13 (Xx.$)(u) : al corresponds simply to a schematic derivation involving multiple uses of the assumption u : u:fl• • •u:f3 s[x I u] : a where s [x/u ] denotes the result of substituting u for every free occurrence of x in s. Figure 3 shows a simple derivation involving the pronoun rules. The last derivation node in the figure is the application of [pron-abs] to the assu</context>
</contexts>
<marker>Williams, 1986</marker>
<rawString>Williams, E. 1986 &amp;quot;A Reassignment of the Functions of LF.&amp;quot; Linguistic Inquiry, 17(2):265-299.</rawString>
</citation>
<citation valid="false">
<title>1. In all the examples that follow, the pronoun and its intended antecedent are italicized. As usual, starred examples are supposed to be ungrammatical.</title>
<marker></marker>
<rawString>1. In all the examples that follow, the pronoun and its intended antecedent are italicized. As usual, starred examples are supposed to be ungrammatical.</rawString>
</citation>
<citation valid="false">
<title>2. In fact, this is a perfectly good open well-formed formula and therefore the precise formulation of the constraint is more delicate than seems to be realized in the literature.</title>
<marker></marker>
<rawString>2. In fact, this is a perfectly good open well-formed formula and therefore the precise formulation of the constraint is more delicate than seems to be realized in the literature.</rawString>
</citation>
<citation valid="false">
<title>This particular example and its analysis were chosen just as the shortest plausible example requiring both application and abstraction, not as making substantive linguistic or semantic claims.</title>
<marker></marker>
<rawString>3. This particular example and its analysis were chosen just as the shortest plausible example requiring both application and abstraction, not as making substantive linguistic or semantic claims.</rawString>
</citation>
<citation valid="true">
<title>These rules are quite similar to the extraction introduction rule of Moortgat</title>
<date>1988</date>
<contexts>
<context position="6840" citStr="(1988)" startWordPosition="1144" endWordPosition="1144">l of this paper is to argue that the freevariable constraint is actually a consequence of basic semantic properties that hold in a semantic domain allowing functional application and abstraction, and are thus independent of a particular logical-form representation. As a corollary, I will also show that the constraint is better expressed as a restriction on the derivations of meanings of sentences from the meanings of their parts rather than a restriction on logical forms. The resulting system is related to the earlier system of conditional interpretation rules developed by Pollack and Pereira (1988), but avoids that system&apos;s use of formal conditions on the order of assumption discharge. 2 CURRY&apos;S CALCULUS OF FUNCTIONALITY Work in combinatory logic and the A-calculus is concerned with the elucidation of the basic notion of functionality: how to construct functions, and how to apply functions to their arguments. There is a very large body of results in this area, of which I will need only a very small part. One of the simplest and most elegant accounts of functionality, originally introduced by Curry and Feys (1968) and further elaborated by other authors (Stenlund 1972; Laimbek 1980; Howa</context>
</contexts>
<marker>1988</marker>
<rawString>4. These rules are quite similar to the extraction introduction rule of Moortgat (1988).</rawString>
</citation>
<citation valid="false">
<authors>
<author>In general</author>
</authors>
<title>quantifying-in has to apply not only to proposition-type scopes but also to property-type scopes (meanings of common noun phrases and verb phrases). Extending the argument that follows to those cases offers no difficulties.</title>
<marker>general, </marker>
<rawString>5. In general, quantifying-in has to apply not only to proposition-type scopes but also to property-type scopes (meanings of common noun phrases and verb phrases). Extending the argument that follows to those cases offers no difficulties.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>