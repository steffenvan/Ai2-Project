<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.006569">
<title confidence="0.9943825">
Noun-phrase co-occurrence statistics for semi-automatic semantic
lexicon construction
</title>
<author confidence="0.905639">
Brian Roark
</author>
<affiliation confidence="0.545016">
Cognitive and Linguistic Sciences
</affiliation>
<address confidence="0.550761666666667">
Box 1978
Brown University
Providence, RI 02912, USA
</address>
<email confidence="0.747692">
Brian_Roark0Brown.edu
</email>
<author confidence="0.944696">
Eugene Charniak
</author>
<affiliation confidence="0.939147">
Computer Science
</affiliation>
<address confidence="0.733016333333333">
Box 1910
Brown University
Providence, RI 02912, USA
</address>
<email confidence="0.984434">
ecOcs.brown.edu
</email>
<sectionHeader confidence="0.997566" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.9779259375">
Generating semantic lexicons semi-
automatically could be a great time saver,
relative to creating them by hand. In this
paper, we present an algorithm for extracting
potential entries for a category from an on-line
corpus, based upon a small set of exemplars.
Our algorithm finds more correct terms and
fewer incorrect ones than previous work in
this area. Additionally, the entries that are
generated potentially provide broader coverage
of the category than would occur to an indi-
vidual coding them by hand. Our algorithm
finds many terms not included within Wordnet
(many more than previous algorithms), and
could be viewed as an &amp;quot;enhancer&amp;quot; of existing
broad-coverage resources.
</bodyText>
<sectionHeader confidence="0.999517" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.998367416666667">
Semantic lexicons play an important role in
many natural language processing tasks. Effec-
tive lexicons must often include many domain-
specific terms, so that available broad coverage
resources, such as Wordnet (Miller, 1990), are
inadequate. For example, both Escort and Chi-
nook are (among other things) types of vehi-
cles (a car and a helicopter, respectively), but
neither are cited as so in Wordnet. Manu-
ally building domain-specific lexicons can be a
costly, time-consuming affair. Utilizing exist-
ing resources, such as on-line corpora, to aid
in this task could improve performance both by
decreasing the time to construct the lexicon and
by improving its quality.
Extracting semantic information from word
co-occurrence statistics has been effective, par-
ticularly for sense disambiguation (Schiitze,
1992; Gale et al., 1992; Yarowsky, 1995). In
Riloff and Shepherd (1997), noun co-occurrence
statistics were used to indicate nominal cate-
gory membership, for the purpose of aiding in
the construction of semantic lexicons. Generi-
cally, their algorithm can be outlined as follows:
</bodyText>
<listItem confidence="0.999013111111111">
1. For a given category, choose a small set of
exemplars (or &apos;seed words&apos;)
2. Count co-occurrence of words and seed
words within a corpus
3. Use a figure of merit based upon these
counts to select new seed words
4. Return to step 2 and iterate n times
5. Use a figure of merit to rank words for cat-
egory membership and output a ranked list
</listItem>
<bodyText confidence="0.999665545454546">
Our algorithm uses roughly this same generic
structure, but achieves notably superior results,
by changing the specifics of: what counts as
co-occurrence; which figures of merit to use for
new seed word selection and final ranking; the
method of initial seed word selection; and how
to manage compound nouns. In sections 2-5
we will cover each of these topics in turn. We
will also present some experimental results from
two corpora, and discuss criteria for judging the
quality of the output.
</bodyText>
<sectionHeader confidence="0.995187" genericHeader="introduction">
2 Noun Co-Occurrence
</sectionHeader>
<bodyText confidence="0.999470333333333">
The first question that must be answered in in-
vestigating this task is why one would expect
it to work at all. Why would one expect that
members of the same semantic category would
co-occur in discourse? In the word sense disam-
biguation task, no such claim is made: words
can serve their disambiguating purpose regard-
less of part-of-speech or semantic characteris-
tics. In motivating their investigations, Riloff
and Shepherd (henceforth R&amp;S) cited several
very specific noun constructions in which co-
occurrence between nouns of the same semantic
</bodyText>
<page confidence="0.98379">
1110
</page>
<bodyText confidence="0.999969625">
class would be expected, including conjunctions
(cars and trucks), lists (planes, trains, and auto-
mobiles), appositives (the plane, a twin-engined
Cessna) and noun compounds (pickup truck).
Our algorithm focuses exclusively on these
constructions. Because the relationship be-
tween nouns in a compound is quite different
than that between nouns in the other construc-
tions, the algorithm consists of two separate
components: one to deal with conjunctions,
lists, and appositives; and the other to deal
with noun compounds. All compound nouns
in the former constructions are represented by
the head of the compound. We made the sim-
plifying assumptions that a compound noun is a
string of consecutive nouns (or, in certain cases,
adjectives - see discussion below), and that the
head of the compound is the rightmost noun.
To identify conjunctions, lists, and apposi-
tives, we first parsed the corpus, using an ef-
ficient statistical parser (Charniak et al., 1998),
trained on the Penn Wall Street Journal Tree-
bank (Marcus et al., 1993). We defined co-
occurrence in these constructions using the
standard definitions of dominance and prece-
dence. The relation is stipulated to be transi-
tive, so that all head nouns in a list co-occur
with each other (e.g. in the phrase planes,
trains, and automobiles all three nouns are
counted as co-occuring with each other). Two
head nouns co-occur in this algorithm if they
meet the following four conditions:
</bodyText>
<listItem confidence="0.99973475">
1. they are both dominated by a common NP
node
2. no dominating S or VP nodes are domi-
nated by that same NP node
3. all head nouns that precede one, precede
the other
4. there is a comma or conjunction that pre-
cedes one and not the other
</listItem>
<bodyText confidence="0.9989284">
In contrast, R&amp;S counted the closest noun
to the left and the closest noun to the right of
a head noun as co-occuring with it. Consider
the following sentence from the MUC-4 (1992)
corpus: &amp;quot;A cargo aircraft may drop bombs and
a truck may be equipped with artillery for war.&amp;quot;
In their algorithm, both cargo and bombs would
be counted as co-occuring with aircraft. In our
algorithm, co-occurrence is only counted within
a noun phrase, between head nouns that are
separated by a comma or conjunction. If the
sentence had read: &amp;quot;A cargo aircraft, fighter
plane, or combat helicopter ...&amp;quot;, then aircraft,
plane, and helicopter would all have counted as
co-occuring with each other in our algorithm.
</bodyText>
<sectionHeader confidence="0.996961" genericHeader="method">
3 Statistics for selecting and ranking
</sectionHeader>
<bodyText confidence="0.999979259259259">
R&amp;S used the same figure of merit both for se-
lecting new seed words and for ranking words
in the final output. Their figure of merit was
simply the ratio of the times the noun coocurs
with a noun in the seed list to the total fre-
quency of the noun in the corpus. This statis-
tic favors low frequency nouns, and thus neces-
sitates the inclusion of a minimum occurrence
cutoff. They stipulated that no word occur-
ing fewer than six times in the corpus would
be considered by the algorithm. This cutoff has
two effects: it reduces the noise associated with
the multitude of low frequency words, and it
removes from consideration a fairly large num-
ber of certainly valid category members. Ide-
ally, one would like to reduce the noise without
reducing the number of valid nouns. Our statis-
tics allow for the inclusion of rare occcurances.
Note that this is particularly important given
our algorithm, since we have restricted the rele-
vant occurrences to a specific type of structure;
even relatively common nouns may not occur in
the corpus more than a handful of times in such
a context.
The two figures of merit that we employ, one
to select and one to produce a final rank, use
the following two counts for each noun:
</bodyText>
<listItem confidence="0.999149">
1. a noun&apos;s co-occurrences with seed words
2. a noun&apos;s co-occurrences with any word
</listItem>
<bodyText confidence="0.999981">
To select new seed words, we take the ratio
of count 1 to count 2 for the noun in question.
This is similar to the figure of merit used in
R&amp;S, and also tends to promote low frequency
nouns. For the final ranking, we chose the log
likelihood statistic outlined in Dunning (1993),
which is based upon the co-occurrence counts of
all nouns (see Dunning for details). This statis-
tic essentially measures how surprising the given
pattern of co-occurrence would be if the distri-
butions were completely random. For instance,
suppose that two words occur forty times each,
and they co-occur twenty times in a million-
word corpus. This would be more surprising
for two completely random distributions than
if they had each occurred twice and had always
co-occurred. A simple probability does not cap-
ture this fact.
The rationale for using two different statistics
for this task is that each is well suited for its par-
ticular role, and not particularly well suited to
the other. We have already mentioned that the
simple ratio is ill suited to dealing with infre-
quent occurrences. It is thus a poor candidate
for ranking the final output, if that list includes
words of as few as one occurrence in the corpus.
The log likelihood statistic, we found, is poorly
suited to selecting new seed words in an iterative
algorithm of this sort, because it promotes high
frequency nouns, which can then overly influ-
ence selections in future iterations, if they are
selected as seed words. We termed this phe-
nomenon infection, and found that it can be so
strong as to kill the further progress of a cate-
gory. For example, if we are processing the cat-
egory vehicle and the word artillery is selected
as a seed word, a whole set of weapons that co-
occur with artillery can now be selected in fu-
ture iterations. If one of those weapons occurs
frequently enough, the scores for the words that
it co-occurs with may exceed those of any vehi-
cles, and this effect may be strong enough that
no vehicles are selected in any future iteration.
In addition, because it promotes high frequency
terms, such a statistic tends to have the same
effect as a minimum occurrence cutoff, i.e. few
if any low frequency words get added. A simple
probability is a much more conservative statis-
tic, insofar as it selects far fewer words with
the potential for infection, it limits the extent
of any infection that does occur, and it includes
rare words. Our motto in using this statistic for
selection is, &amp;quot;First do no harm.&amp;quot;
</bodyText>
<sectionHeader confidence="0.994685" genericHeader="method">
4 Seed word selection
</sectionHeader>
<bodyText confidence="0.999982952380952">
The simple ratio used to select new seed words
will tend not to select higher frequency words
in the category. The solution to this problem
is to make the initial seed word selection from
among the most frequent head nouns in the cor-
pus. This is a sensible approach in any case,
since it provides the broadest coverage of cat-
egory occurrences, from which to select addi-
tional likely category members. In a task that
can suffer from sparse data, this is quite impor-
tant. We printed a list of the most common
nouns in the corpus (the top 200 to 500), and
selected category members by scanning through
this list. Another option would be to use head
nouns identified in Wordnet, which, as a set,
should include the most common members of
the category in question. In general, however,
the strength of an algorithm of this sort is in
identifying infrequent or specialized terms. Ta-
ble 1 shows the seed words that were used for
some of the categories tested.
</bodyText>
<sectionHeader confidence="0.997992" genericHeader="method">
5 Compound Nouns
</sectionHeader>
<bodyText confidence="0.998471103448276">
The relationship between the nouns in a com-
pound noun is very different from that in the
other constructions we are considering. The
non-head nouns in a compound noun may or
may not be legitimate members of the category.
For instance, either pickup truck or pickup is
a legitimate vehicle, whereas cargo plane is le-
gitimate, but cargo is not. For this reason,
co-occurrence within noun compounds is not
considered in the iterative portions of our al-
gorithm. Instead, all noun compounds with a
head that is included in our final ranked list,
are evaluated for inclusion in a second list.
The method for evaluating whether or not to
include a noun compound in the second list is
intended to exclude constructions such as gov-
ernment plane and include constructions such
as fighter plane. Simply put, the former does
not correspond to a type of vehicle in the same
way that the latter does. We made the simplify-
ing assumption that the higher the probability
of the head given the non-head noun, the better
the construction for our purposes. For instance,
if the noun government is found in a noun com-
pound, how likely is the head of that compound
to be plane? How does this compare to the noun
fighter?
For this purpose, we take two counts for each
,noun in the compound:
</bodyText>
<listItem confidence="0.8238172">
1. The number of times the noun occurs in a
noun compound with each of the nouns to
its right in the compound
2. The number of times the noun occurs in a
noun compound
</listItem>
<bodyText confidence="0.641274">
For each non-head noun in the compound, we
</bodyText>
<page confidence="0.795558">
1112
</page>
<table confidence="0.9991798">
Crimes (MUC): murder(s), crime(s), killing(s), trafficking, kidnapping(s)
Crimes (WSJ): murder(s), crime(s), theft(s), fraud(s), embezzlement
Vehicle: plane(s), helicopter(s), car(s), bus(es), aircraft(s), airplane(s), vehicle(s)
Weapon: bomb(s), weapon(s), rifle(s), missile(s), grenade(s), machinegun(s), dynamite
Machines: computer(s), machine(s), equipment, chip(s), machinery
</table>
<tableCaption confidence="0.998015">
Table 1: Seed Words Used
</tableCaption>
<bodyText confidence="0.996919884615384">
evaluate whether or not to omit it in the output.
If all of them are omitted, or if the resulting
compound has already been output, the entry
is skipped. Each noun is evaluated as follows:
First, the head of that noun is determined.
To get a sense of what is meant here, consider
the following compound: nuclear-powered air-
craft carrier. In evaluating the word nuclear-
powered, it is unclear if this word is attached
to aircraft or to carrier. While we know that
the head of the entire compound is carrier, in
order to properly evaluate the word in question,
we must determine which of the words follow-
ing it is its head. This is done, in the spirit of
the Dependency Model of Lauer (1995), by se-
lecting the noun to its right in the compound
with the highest probability of occuring with
the word in question when occurring in a noun
compound. (In the case that two nouns have the
same probability, the rightmost noun is chosen.)
Once the head of the word is determined, the ra-
tio of count 1 (with the head noun chosen) to
count 2 is compared to an empirically set cut-
off. If it falls below that cutoff, it is omitted. If
it does not fall below the cutoff, then it is kept
(provided its head noun is not later omitted).
</bodyText>
<sectionHeader confidence="0.991318" genericHeader="method">
6 Outline of the algorithm
</sectionHeader>
<bodyText confidence="0.99999675">
The input to the algorithm is a parsed corpus
and a set of initial seed words for the desired
category. Nouns are matched with their plurals
in the corpus, and a single representation is set-
tled upon for both, e.g. car(s). Co-Occurrence
bigrams are collected for head nouns according
to the notion of co-occurrence outlined above.
The algorithm then proceeds as follows:
</bodyText>
<listItem confidence="0.9889015">
1. Each noun is scored with the selecting
statistic discussed above.
2. The highest score of all non-seed words is
determined, and all nouns with that score
are added to the seed word list. Then re-
turn to step one and repeat. This iteration
continues many times, in our case fifty.
3. After the number of iterations in (2) are
completed, any nouns that were not se-
lected as seed words are discarded. The
seed word set is then returned to its origi-
nal members.
4. Each remaining noun is given a score based
upon the log likelihood statistic discussed
above.
5. The highest score of all non-seed words is
determined, and all nouns with that score
are added to the seed word list. We then re-
turn to step (5) and repeat the same num-
ber of times as the iteration in step (2).
6. Two lists are output, one with head nouns,
ranked by when they were added to the
seed word list in step (6), the other consist-
ing of noun compounds meeting the out-
lined criterion, ordered by when their heads
were added to the list.
</listItem>
<sectionHeader confidence="0.89572" genericHeader="method">
7 Empirical Results and Discussion
</sectionHeader>
<bodyText confidence="0.999039952380952">
We ran our algorithm against both the MUC-4
corpus and the Wall Street Journal (WSJ) cor-
pus for a variety of categories, beginning with
the categories of vehicle and weapon, both in-
cluded in the five categories that Rk,S inves-
tigated in their paper. Other categories that
we investigated were crimes, people, commercial
sites, states (as in static states of affairs), and
machines. This last category was run because
of the sparse data for the category weapon in the
Wall Street Journal. It represents roughly the
same kind of category as weapon, namely tech-
nological artifacts. It, in turn, produced sparse
results with the MUC-4 corpus. Tables 3 and
4 show the top results on both the head noun
and the compound noun lists generated for the
categories we tested.
R&amp;S evaluated terms for the degree to which
they are related to the category. In contrast, we
counted valid only those entries that are clear
members of the category. Related words (e.g.
</bodyText>
<page confidence="0.976773">
1113
</page>
<bodyText confidence="0.999963196078432">
crash for the category vehicle) did not count.
A valid instance was: (1) novel (i.e. not in the
original seed set); (2) unique (i.e. not a spelling
variation or pluralization of a previously en-
countered entry); and (3) a proper class within
the category (i.e. not an individual instance or
a class based upon an incidental feature). As an
illustration of this last condition, neither Galileo
Probe nor gray plane is a valid entry, the former
because it denotes an individual and the latter
because it is a class of planes based upon an
incidental feature (color).
In the interests of generating as many valid
entries as possible, we allowed for the inclusion
in noun compounds of words tagged as adjec-
tives or cardinality words. In certain occasions
(e.g. four-wheel drive truck or nuclear bomb)
this is necessary to avoid losing key parts of
the compound. Most common adjectives are
dropped in our compound noun analysis, since
they occur with a wide variety of heads.
We determined three ways to evaluate the
output of the algorithm for usefulness. The first
is the ratio of valid entries to total entries pro-
duced. R&amp;S reported a ratio of .17 valid to
total entries for both the vehicle and weapon
categories (see table 2). On the same corpus,
our algorithm yielded a ratio of .329 valid to to-
tal entries for the category vehicle, and .36 for
the category weapon. This can be seen in the
slope of the graphs in figure 1. Tables 2 and
5 give the relevant data for the categories that
we investigated. In general, the ratio of valid to
total entries fell between .2 and .4, even in the
cases that the output was relatively small.
A second way to evaluate the algorithm is by
the total number of valid entries produced. As
can be seen from the numbers reported in table
2, our algorithm generated from 2.4 to nearly 3
times as many valid terms for the two contrast-
ing categories from the MUC corpus than the
algorithm of R&amp;S. Even more valid terms were
generated for appropriate categories using the
Wall Street Journal.
Another way to evaluate the algorithm is with
the number of valid entries produced that are
not in Wordnet. Table 2 presents these numbers
for the categories vehicle and weapon. Whereas
the R&amp;S algorithm produced just 11 terms not
already present in Wordnet for the two cate-
gories combined, our algorithm produced 106,
</bodyText>
<figure confidence="0.627243">
50 100 150 200 250
Terms Generated
</figure>
<figureCaption confidence="0.9540905">
Figure 1: Results for the Categories Vehicle and
Weapon
</figureCaption>
<bodyText confidence="0.9997156">
or over 3 for every 5 valid terms produced. It is
for this reason that we are billing our algorithm
as something that could enhance existing broad-
coverage resources with domain-specific lexical
information.
</bodyText>
<sectionHeader confidence="0.99441" genericHeader="conclusions">
8 Conclusion
</sectionHeader>
<bodyText confidence="0.999769">
We have outlined an algorithm in this paper
that, as it stands, could significantly speed up
</bodyText>
<figure confidence="0.942238692307692">
50 100 150 200
Terms Generated
250
120
Vehicle
100
g 80
8 60
40
20
R &amp; C (muc)
R &amp; C (WSJ)
R&amp;S (muc)
</figure>
<page confidence="0.782051">
1114
</page>
<table confidence="0.99966625">
MUC-4 corpus WSJ corpus
Category Algorithm Total Valid Valid Total Valid Valid
Terms Terms Terms not Terms Terms Terms not
Generated Generated in Wordnet Generated Generated in Wordnet
Vehicle R &amp; C 249 82 52 339 123 81
Vehicle R &amp; S 200 34 4 NA NA NA
Weapon R &amp; C 257 93 54 150 17 12
Weapon R &amp; S 200 34 7 NA NA NA
</table>
<tableCaption confidence="0.984695">
Table 2: Valid category terms found that are not in Wordnet
</tableCaption>
<table confidence="0.997942869565217">
Crimes (a): terrorism, extortion, robbery(es), assassination(s), arrest(s), disappearance(s), violation(s), as-
sault(s), battery(es), tortures, raid(s), seizure(s), search(es), persecution(s), siege(s), curfew, capture(s), subver-
sion, good(s), humiliation, evictions, addiction, demonstration(s), outrage(s), parade(s)
Crimes (b): action—the murder(s), Justines crime(s), drug trafficking, body search(es), dictator Noriega, gun
running, witness account(s)
Sites (a): office(s), enterprise(s), company(es), dealership(s), drugstore(s), pharmacies, supermarket(s), termi-
nal(s), aqueduct(s), shoeshops, marinas, theater(s), exchange(s), residence(s), business(es). employment, farm-
land, range(s), industry(es), commerce, etc., transportation—have, market(s), sea, factory(es)
Sites (b): grocery store(s), hardware store(s), appliance store(s), book store(s), shoe store(s), liquor store(s), Al-
batros store(s), mortgage bank(s), savings bank(s), creditor bank(s), Deutsch-Suedamerikanische bank(s), reserve
bank(s), Democracia building(s), apartment building(s), hospital—the building(s)
Vehicle (a): gunship(s), truck(s), taxi(s), artillery, Hughes-500, tires, jitneys, tens, Huey-500, combat(s), am-
bulance(s), motorcycle(s), Vides, wagon(s), Huancora, individual(s), KFIR, M-5S, T-33, Mirage(s), carrier(s),
passenger(s), luggage, firemen, tank(s)
Vehicle (b): A-37 plane(s), A-37 Dragonfly plane(s), passenger plane(s), Cessna plane(s), twin-engined Cessna
plane(s), C-47 plane(s), gray plane(s), KFIR plane(s), Avianca-HK1803 plane(s), LATN plane(s), Aeronica
plane(s), 0-2 plane(s), push-and-pull 0-2 plane(s), push-and-pull plane(s), fighter-bomber plane(s)
Weapon (a): launcher(s), submachinegun(s), mortar(s), explosive(s), cartridge(s), pistol(s), ammunition(s), car-
bine(s), radio(s), amount(s), shotguns, revolver(s), gun(s), materiel, round(s), stick(s), clips, caliber(s), rocket(s),
quantity(es), type(s), AK-47, backpacks, plugs, light(s)
Weapon (b): car bomb(s), night-two bomb(s), nuclear bomb(s), homemade bomb(s), incendiary bomb(s), atomic
bomb(s), medium-sized bomb(s), highpower bomb(s), cluster bomb(s), WASP cluster bomb(s), truck bomb(s),
WASP bomb(s), high-powered bomb(s), 20-kg bomb(s), medium-intensity bomb(s)
</table>
<tableCaption confidence="0.999826">
Table 3: Top results from (a) the head noun list and (b) the compound noun list using MUC-4 corpus
</tableCaption>
<bodyText confidence="0.999926285714286">
the task of building a semantic lexicon. We
have also examined in detail the reasons why
it works, and have shown it to work well for
multiple corpora and multiple categories. The
algorithm generates many words not included in
broad coverage resources, such as Wordnet, and
could be thought of as a Wordnet &amp;quot;enhancer&amp;quot;
for domain-specific applications.
More generally, the relative success of the al-
gorithm demonstrates the potential benefit of
narrowing corpus input to specific kinds of con-
structions, despite the danger of compounding
sparse data problems. To this end, parsing is
invaluable.
</bodyText>
<sectionHeader confidence="0.99583" genericHeader="acknowledgments">
9 Acknowledgements
</sectionHeader>
<bodyText confidence="0.983459">
Thanks to Mark Johnson for insightful discus-
sion and to Julie Sedivy for helpful comments.
</bodyText>
<sectionHeader confidence="0.999146" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.994222875">
E. Charniak, S. Goldwater, and M. Johnson.
1998. Edge-based best-first chart parsing.
forthcoming.
T. Dunning. 1993. Accurate methods for the
statistics of surprise and coincidence. Com-
putational Linguistics, 19(1):61-74.
W.A. Gale, N.W. Church, and D. Yarowsky.
1992. A method for disambiguating word
</reference>
<page confidence="0.994338">
1115
</page>
<figureCaption confidence="0.976031">
Crimes (a): conspiracy(es), perjury, abuse(s), influence-peddling, sleaze, waste(s), forgery(es), inefficiency(es),
racketeering, obstruction, bribery, sabotage, mail, planner(s), burglary(es), robbery(es), auto(s), purse-snatchings,
premise(s), fake, sin(s), extortion, homicide(s), killing(s), statute(s)
Crimes (b): bribery conspiracy(es), substance abuse(s), dual-trading abuse(s), monitoring abuse(s), dessert-
menu planner(s), gun robbery(es), chance accident(s), carbon dioxide, sulfur dioxide, boiler-room scam(s), identity
scam(s), 19th-century drama(s), fee seizure(s)
Machines (a): workstation(s), tool(s), robot(s), installation(s), dish(es), lathes, grinders, subscription(s), trac-
tor(s), recorder(s), gadget(s), bakeware, RISC, printer(s), fertilizer(s), computing, pesticide(s), feed, set(s), am-
plifier(s), receiver(s), substance(s), tape(s), DAT, circumstances
Machines (b): hand-held computer(s), Apple computer(s), upstart Apple computer(s), Apple MacIntosh com-
puter(s), mainframe computer(s), Adam computer(s), Cray computer(s), desktop computer(s), portable com-
puter(s), laptop computer(s), MIPS computer(s), notebook computer(s), mainframe-class computer(s), Compaq
computer(s), accessible computer(s)
Sites (a): apartment(s), condominium(s), tract(s), drugstore(s), setting(s), supermarket(s), outlet(s), cinema,
club(s), sport(s), lobby(es), lounge(s), boutique(s), stand(s), landmark, bodegas, thoroughfare, bowling, steak(s),
arcades, food-production, pizzerias, frontier, foreground, mart
Sites (b): department store(s), flagship store(s), warehouse-type store(s), chain store(s), five-and-dime store(s),
shoe store(s), furniture store(s), sporting-goods store(s), gift shop(s), barber shop(s), film-processing shop(s), shoe
shop(s), butcher shop(s), one-person shop(s), wig shop(s)
Vehicle (a): truck(s), van(s), minivans, launch(es), nightclub(s), troop(s), october, tank(s), missile(s), ship(s),
fantasy(es), artillery, fondness, convertible(s), Escort(s), VII, Cherokee, Continental(s), Taurus, jeep(s), Wag-
°neer, crew(s), pickup(s), Corsica, Beretta
Vehicle (b): gun-carrying plane(s), commuter plane(s), fighter plane(s), DC-10 series-10 plane(s), high-speed
plane(s), fuel-efficient plane(s), UH-60A Blackhawk helicopter(s), passenger car(s), Mercedes car(s), American-
made car(s), battery-powered car(s), battery-powered racing car(s), medium-sized car(s), side car(s), exciting
car(s)
</figureCaption>
<tableCaption confidence="0.997193">
Table 4: Top results from (a) the head noun list and (b) the compound noun list using WSJ corpus
</tableCaption>
<table confidence="0.999740125">
MUC-4 corpus WSJ corpus
Category Total Valid Total Valid
Terms Terms Terms Terms
Crimes 115 24 90 24
Machines 0 0 335 117
People 338 85 243 103
Sites 155 33 140 33
States 90 35 96 17
</table>
<tableCaption confidence="0.979379">
Table 5: Valid category terms found by our algorithm
for other categories tested
</tableCaption>
<reference confidence="0.996476625">
senses in a large corpus. Computers and the
Humanities, 26:415-439.
M. Lauer. 1995. Corpus statistics meet the
noun compound: Some empirical results. In
Proceedings of the 33rd Annual Meeting of
the Association for Computational Linguis-
tics, pages 47-55.
M.P. Marcus, B. Santorini, and M.A.
Marcinkiewicz. 1993. Building a large
annotated corpus of English: The Penn
Treebank. Computational Linguistics,
19(2):313-330.
G. Miller. 1990. Wordnet: An on-line lexical
database. International Journal of Lexicog-
raphy, 3(4).
MUC-4 Proceedings. 1992. Proceedings of the
Fourth Message Understanding Conference.
Morgan Kaufmann, San Mateo, CA.
E. Riloff and J. Shepherd. 1997. A corpus-
based approach for building semantic lexi-
cons. In Proceedings of the Second Confer-
ence on Empirical Methods in Natural Lan-
guage Processing, pages 127-132.
H. Schiitze. 1992. Word sense disambiguation
with sublexical representation. In Workshop
Notes, Statistically-Based NLP Techniques,
pages 109-113. AAAI.
D. Yarowsky. 1995. Unsupervised word sense
disambiguation rivaling supervised methods.
In Proceedings of the 33rd Annual Meeting of
the Association for Computational Linguis-
tics, pages 189-196.
</reference>
<page confidence="0.994862">
1116
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.585694">
<title confidence="0.9949455">Noun-phrase co-occurrence statistics for semi-automatic semantic lexicon construction</title>
<author confidence="0.661814">Roark</author>
<affiliation confidence="0.638294">Cognitive and Linguistic Sciences</affiliation>
<address confidence="0.968763">Box 1978</address>
<affiliation confidence="0.999299">Brown University</affiliation>
<address confidence="0.995905">USA</address>
<email confidence="0.970962">Brian_Roark0Brown.edu</email>
<author confidence="0.983847">Eugene Charniak</author>
<affiliation confidence="0.999869">Computer Science</affiliation>
<address confidence="0.998017">Box 1910</address>
<affiliation confidence="0.999369">Brown University</affiliation>
<address confidence="0.998466">USA</address>
<email confidence="0.999891">ecOcs.brown.edu</email>
<abstract confidence="0.999651411764706">semantic lexicons semiautomatically could be a great time saver, relative to creating them by hand. In this paper, we present an algorithm for extracting potential entries for a category from an on-line corpus, based upon a small set of exemplars. Our algorithm finds more correct terms and fewer incorrect ones than previous work in this area. Additionally, the entries that are generated potentially provide broader coverage of the category than would occur to an individual coding them by hand. Our algorithm finds many terms not included within Wordnet (many more than previous algorithms), and could be viewed as an &amp;quot;enhancer&amp;quot; of existing broad-coverage resources.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>E Charniak</author>
<author>S Goldwater</author>
<author>M Johnson</author>
</authors>
<date>1998</date>
<note>Edge-based best-first chart parsing. forthcoming.</note>
<contexts>
<context position="4459" citStr="Charniak et al., 1998" startWordPosition="696" endWordPosition="699">n nouns in the other constructions, the algorithm consists of two separate components: one to deal with conjunctions, lists, and appositives; and the other to deal with noun compounds. All compound nouns in the former constructions are represented by the head of the compound. We made the simplifying assumptions that a compound noun is a string of consecutive nouns (or, in certain cases, adjectives - see discussion below), and that the head of the compound is the rightmost noun. To identify conjunctions, lists, and appositives, we first parsed the corpus, using an efficient statistical parser (Charniak et al., 1998), trained on the Penn Wall Street Journal Treebank (Marcus et al., 1993). We defined cooccurrence in these constructions using the standard definitions of dominance and precedence. The relation is stipulated to be transitive, so that all head nouns in a list co-occur with each other (e.g. in the phrase planes, trains, and automobiles all three nouns are counted as co-occuring with each other). Two head nouns co-occur in this algorithm if they meet the following four conditions: 1. they are both dominated by a common NP node 2. no dominating S or VP nodes are dominated by that same NP node 3. a</context>
</contexts>
<marker>Charniak, Goldwater, Johnson, 1998</marker>
<rawString>E. Charniak, S. Goldwater, and M. Johnson. 1998. Edge-based best-first chart parsing. forthcoming.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Dunning</author>
</authors>
<title>Accurate methods for the statistics of surprise and coincidence.</title>
<date>1993</date>
<journal>Computational Linguistics,</journal>
<pages>19--1</pages>
<contexts>
<context position="7487" citStr="Dunning (1993)" startWordPosition="1238" endWordPosition="1239"> of structure; even relatively common nouns may not occur in the corpus more than a handful of times in such a context. The two figures of merit that we employ, one to select and one to produce a final rank, use the following two counts for each noun: 1. a noun&apos;s co-occurrences with seed words 2. a noun&apos;s co-occurrences with any word To select new seed words, we take the ratio of count 1 to count 2 for the noun in question. This is similar to the figure of merit used in R&amp;S, and also tends to promote low frequency nouns. For the final ranking, we chose the log likelihood statistic outlined in Dunning (1993), which is based upon the co-occurrence counts of all nouns (see Dunning for details). This statistic essentially measures how surprising the given pattern of co-occurrence would be if the distributions were completely random. For instance, suppose that two words occur forty times each, and they co-occur twenty times in a millionword corpus. This would be more surprising for two completely random distributions than if they had each occurred twice and had always co-occurred. A simple probability does not capture this fact. The rationale for using two different statistics for this task is that e</context>
</contexts>
<marker>Dunning, 1993</marker>
<rawString>T. Dunning. 1993. Accurate methods for the statistics of surprise and coincidence. Computational Linguistics, 19(1):61-74.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W A Gale</author>
<author>N W Church</author>
<author>D Yarowsky</author>
</authors>
<title>A method for disambiguating word senses in a large corpus. Computers and the Humanities,</title>
<date>1992</date>
<pages>26--415</pages>
<contexts>
<context position="1839" citStr="Gale et al., 1992" startWordPosition="268" endWordPosition="271">Miller, 1990), are inadequate. For example, both Escort and Chinook are (among other things) types of vehicles (a car and a helicopter, respectively), but neither are cited as so in Wordnet. Manually building domain-specific lexicons can be a costly, time-consuming affair. Utilizing existing resources, such as on-line corpora, to aid in this task could improve performance both by decreasing the time to construct the lexicon and by improving its quality. Extracting semantic information from word co-occurrence statistics has been effective, particularly for sense disambiguation (Schiitze, 1992; Gale et al., 1992; Yarowsky, 1995). In Riloff and Shepherd (1997), noun co-occurrence statistics were used to indicate nominal category membership, for the purpose of aiding in the construction of semantic lexicons. Generically, their algorithm can be outlined as follows: 1. For a given category, choose a small set of exemplars (or &apos;seed words&apos;) 2. Count co-occurrence of words and seed words within a corpus 3. Use a figure of merit based upon these counts to select new seed words 4. Return to step 2 and iterate n times 5. Use a figure of merit to rank words for category membership and output a ranked list Our </context>
</contexts>
<marker>Gale, Church, Yarowsky, 1992</marker>
<rawString>W.A. Gale, N.W. Church, and D. Yarowsky. 1992. A method for disambiguating word senses in a large corpus. Computers and the Humanities, 26:415-439.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Lauer</author>
</authors>
<title>Corpus statistics meet the noun compound: Some empirical results.</title>
<date>1995</date>
<booktitle>In Proceedings of the 33rd Annual Meeting of the Association for Computational Linguistics,</booktitle>
<pages>47--55</pages>
<contexts>
<context position="13257" citStr="Lauer (1995)" startWordPosition="2234" endWordPosition="2235">, or if the resulting compound has already been output, the entry is skipped. Each noun is evaluated as follows: First, the head of that noun is determined. To get a sense of what is meant here, consider the following compound: nuclear-powered aircraft carrier. In evaluating the word nuclearpowered, it is unclear if this word is attached to aircraft or to carrier. While we know that the head of the entire compound is carrier, in order to properly evaluate the word in question, we must determine which of the words following it is its head. This is done, in the spirit of the Dependency Model of Lauer (1995), by selecting the noun to its right in the compound with the highest probability of occuring with the word in question when occurring in a noun compound. (In the case that two nouns have the same probability, the rightmost noun is chosen.) Once the head of the word is determined, the ratio of count 1 (with the head noun chosen) to count 2 is compared to an empirically set cutoff. If it falls below that cutoff, it is omitted. If it does not fall below the cutoff, then it is kept (provided its head noun is not later omitted). 6 Outline of the algorithm The input to the algorithm is a parsed cor</context>
</contexts>
<marker>Lauer, 1995</marker>
<rawString>M. Lauer. 1995. Corpus statistics meet the noun compound: Some empirical results. In Proceedings of the 33rd Annual Meeting of the Association for Computational Linguistics, pages 47-55.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M P Marcus</author>
<author>B Santorini</author>
<author>M A Marcinkiewicz</author>
</authors>
<title>Building a large annotated corpus of English: The Penn Treebank. Computational Linguistics,</title>
<date>1993</date>
<pages>19--2</pages>
<contexts>
<context position="4531" citStr="Marcus et al., 1993" startWordPosition="709" endWordPosition="712"> components: one to deal with conjunctions, lists, and appositives; and the other to deal with noun compounds. All compound nouns in the former constructions are represented by the head of the compound. We made the simplifying assumptions that a compound noun is a string of consecutive nouns (or, in certain cases, adjectives - see discussion below), and that the head of the compound is the rightmost noun. To identify conjunctions, lists, and appositives, we first parsed the corpus, using an efficient statistical parser (Charniak et al., 1998), trained on the Penn Wall Street Journal Treebank (Marcus et al., 1993). We defined cooccurrence in these constructions using the standard definitions of dominance and precedence. The relation is stipulated to be transitive, so that all head nouns in a list co-occur with each other (e.g. in the phrase planes, trains, and automobiles all three nouns are counted as co-occuring with each other). Two head nouns co-occur in this algorithm if they meet the following four conditions: 1. they are both dominated by a common NP node 2. no dominating S or VP nodes are dominated by that same NP node 3. all head nouns that precede one, precede the other 4. there is a comma or</context>
</contexts>
<marker>Marcus, Santorini, Marcinkiewicz, 1993</marker>
<rawString>M.P. Marcus, B. Santorini, and M.A. Marcinkiewicz. 1993. Building a large annotated corpus of English: The Penn Treebank. Computational Linguistics, 19(2):313-330.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Miller</author>
</authors>
<title>Wordnet: An on-line lexical database.</title>
<date>1990</date>
<journal>International Journal of Lexicography,</journal>
<volume>3</volume>
<issue>4</issue>
<contexts>
<context position="1235" citStr="Miller, 1990" startWordPosition="177" endWordPosition="178">r incorrect ones than previous work in this area. Additionally, the entries that are generated potentially provide broader coverage of the category than would occur to an individual coding them by hand. Our algorithm finds many terms not included within Wordnet (many more than previous algorithms), and could be viewed as an &amp;quot;enhancer&amp;quot; of existing broad-coverage resources. 1 Introduction Semantic lexicons play an important role in many natural language processing tasks. Effective lexicons must often include many domainspecific terms, so that available broad coverage resources, such as Wordnet (Miller, 1990), are inadequate. For example, both Escort and Chinook are (among other things) types of vehicles (a car and a helicopter, respectively), but neither are cited as so in Wordnet. Manually building domain-specific lexicons can be a costly, time-consuming affair. Utilizing existing resources, such as on-line corpora, to aid in this task could improve performance both by decreasing the time to construct the lexicon and by improving its quality. Extracting semantic information from word co-occurrence statistics has been effective, particularly for sense disambiguation (Schiitze, 1992; Gale et al., </context>
</contexts>
<marker>Miller, 1990</marker>
<rawString>G. Miller. 1990. Wordnet: An on-line lexical database. International Journal of Lexicography, 3(4).</rawString>
</citation>
<citation valid="true">
<authors>
<author>MUC-4 Proceedings</author>
</authors>
<date>1992</date>
<booktitle>Proceedings of the Fourth Message Understanding Conference.</booktitle>
<publisher>Morgan Kaufmann,</publisher>
<location>San Mateo, CA.</location>
<marker>Proceedings, 1992</marker>
<rawString>MUC-4 Proceedings. 1992. Proceedings of the Fourth Message Understanding Conference. Morgan Kaufmann, San Mateo, CA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Riloff</author>
<author>J Shepherd</author>
</authors>
<title>A corpusbased approach for building semantic lexicons.</title>
<date>1997</date>
<booktitle>In Proceedings of the Second Conference on Empirical Methods in Natural Language Processing,</booktitle>
<pages>127--132</pages>
<contexts>
<context position="1887" citStr="Riloff and Shepherd (1997)" startWordPosition="275" endWordPosition="278">ple, both Escort and Chinook are (among other things) types of vehicles (a car and a helicopter, respectively), but neither are cited as so in Wordnet. Manually building domain-specific lexicons can be a costly, time-consuming affair. Utilizing existing resources, such as on-line corpora, to aid in this task could improve performance both by decreasing the time to construct the lexicon and by improving its quality. Extracting semantic information from word co-occurrence statistics has been effective, particularly for sense disambiguation (Schiitze, 1992; Gale et al., 1992; Yarowsky, 1995). In Riloff and Shepherd (1997), noun co-occurrence statistics were used to indicate nominal category membership, for the purpose of aiding in the construction of semantic lexicons. Generically, their algorithm can be outlined as follows: 1. For a given category, choose a small set of exemplars (or &apos;seed words&apos;) 2. Count co-occurrence of words and seed words within a corpus 3. Use a figure of merit based upon these counts to select new seed words 4. Return to step 2 and iterate n times 5. Use a figure of merit to rank words for category membership and output a ranked list Our algorithm uses roughly this same generic structu</context>
</contexts>
<marker>Riloff, Shepherd, 1997</marker>
<rawString>E. Riloff and J. Shepherd. 1997. A corpusbased approach for building semantic lexicons. In Proceedings of the Second Conference on Empirical Methods in Natural Language Processing, pages 127-132.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Schiitze</author>
</authors>
<title>Word sense disambiguation with sublexical representation.</title>
<date>1992</date>
<booktitle>In Workshop Notes, Statistically-Based NLP Techniques,</booktitle>
<pages>109--113</pages>
<publisher>AAAI.</publisher>
<contexts>
<context position="1820" citStr="Schiitze, 1992" startWordPosition="266" endWordPosition="267">uch as Wordnet (Miller, 1990), are inadequate. For example, both Escort and Chinook are (among other things) types of vehicles (a car and a helicopter, respectively), but neither are cited as so in Wordnet. Manually building domain-specific lexicons can be a costly, time-consuming affair. Utilizing existing resources, such as on-line corpora, to aid in this task could improve performance both by decreasing the time to construct the lexicon and by improving its quality. Extracting semantic information from word co-occurrence statistics has been effective, particularly for sense disambiguation (Schiitze, 1992; Gale et al., 1992; Yarowsky, 1995). In Riloff and Shepherd (1997), noun co-occurrence statistics were used to indicate nominal category membership, for the purpose of aiding in the construction of semantic lexicons. Generically, their algorithm can be outlined as follows: 1. For a given category, choose a small set of exemplars (or &apos;seed words&apos;) 2. Count co-occurrence of words and seed words within a corpus 3. Use a figure of merit based upon these counts to select new seed words 4. Return to step 2 and iterate n times 5. Use a figure of merit to rank words for category membership and output</context>
</contexts>
<marker>Schiitze, 1992</marker>
<rawString>H. Schiitze. 1992. Word sense disambiguation with sublexical representation. In Workshop Notes, Statistically-Based NLP Techniques, pages 109-113. AAAI.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Yarowsky</author>
</authors>
<title>Unsupervised word sense disambiguation rivaling supervised methods.</title>
<date>1995</date>
<booktitle>In Proceedings of the 33rd Annual Meeting of the Association for Computational Linguistics,</booktitle>
<pages>189--196</pages>
<contexts>
<context position="1856" citStr="Yarowsky, 1995" startWordPosition="272" endWordPosition="273">inadequate. For example, both Escort and Chinook are (among other things) types of vehicles (a car and a helicopter, respectively), but neither are cited as so in Wordnet. Manually building domain-specific lexicons can be a costly, time-consuming affair. Utilizing existing resources, such as on-line corpora, to aid in this task could improve performance both by decreasing the time to construct the lexicon and by improving its quality. Extracting semantic information from word co-occurrence statistics has been effective, particularly for sense disambiguation (Schiitze, 1992; Gale et al., 1992; Yarowsky, 1995). In Riloff and Shepherd (1997), noun co-occurrence statistics were used to indicate nominal category membership, for the purpose of aiding in the construction of semantic lexicons. Generically, their algorithm can be outlined as follows: 1. For a given category, choose a small set of exemplars (or &apos;seed words&apos;) 2. Count co-occurrence of words and seed words within a corpus 3. Use a figure of merit based upon these counts to select new seed words 4. Return to step 2 and iterate n times 5. Use a figure of merit to rank words for category membership and output a ranked list Our algorithm uses ro</context>
</contexts>
<marker>Yarowsky, 1995</marker>
<rawString>D. Yarowsky. 1995. Unsupervised word sense disambiguation rivaling supervised methods. In Proceedings of the 33rd Annual Meeting of the Association for Computational Linguistics, pages 189-196.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>