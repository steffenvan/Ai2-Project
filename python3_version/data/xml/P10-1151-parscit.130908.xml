<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000050">
<title confidence="0.99896">
A Transition-Based Parser for 2-Planar Dependency Structures
</title>
<author confidence="0.924701">
Carlos G´omez-Rodriguez Joakim Nivre
</author>
<affiliation confidence="0.820698">
Departamento de Computaci´on Department of Linguistics and Philology
Universidade da Coru˜na, Spain Uppsala University, Sweden
</affiliation>
<email confidence="0.967232">
carlos.gomez@udc.es joakim.nivre@lingfil.uu.se
</email>
<sectionHeader confidence="0.994069" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999864058823529">
Finding a class of structures that is rich
enough for adequate linguistic represen-
tation yet restricted enough for efficient
computational processing is an important
problem for dependency parsing. In this
paper, we present a transition system for
2-planar dependency trees – trees that can
be decomposed into at most two planar
graphs – and show that it can be used
to implement a classifier-based parser that
runs in linear time and outperforms a state-
of-the-art transition-based parser on four
data sets from the CoNLL-X shared task.
In addition, we present an efficient method
for determining whether an arbitrary tree
is 2-planar and show that 99% or more of
the trees in existing treebanks are 2-planar.
</bodyText>
<sectionHeader confidence="0.998782" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999893459016394">
Dependency-based syntactic parsing has become
a widely used technique in natural language pro-
cessing, and many different parsing models have
been proposed in recent years (Yamada and Mat-
sumoto, 2003; Nivre et al., 2004; McDonald et al.,
2005a; Titov and Henderson, 2007; Martins et al.,
2009). One of the unresolved issues in this area
is the proper treatment of non-projective depen-
dency trees, which seem to be required for an ad-
equate representation of predicate-argument struc-
ture, but which undermine the efficiency of depen-
dency parsing (Neuhaus and Br¨oker, 1997; Buch-
Kromann, 2006; McDonald and Satta, 2007).
Caught between the Scylla of linguistically in-
adequate projective trees and the Charybdis of
computationally intractable non-projective trees,
some researchers have sought a middle ground by
exploring classes of mildly non-projective depen-
dency structures that strike a better balance be-
tween expressivity and complexity (Nivre, 2006;
Kuhlmann and Nivre, 2006; Kuhlmann and M¨ohl,
2007; Havelka, 2007). Although these proposals
seem to have a very good fit with linguistic data,
in the sense that they often cover 99% or more of
the structures found in existing treebanks, the de-
velopment of efficient parsing algorithms for these
classes has met with more limited success. For
example, while both Kuhlmann and Satta (2009)
and G´omez-Rodr´ıguez et al. (2009) have shown
how well-nested dependency trees with bounded
gap degree can be parsed in polynomial time, the
best time complexity for lexicalized parsing of this
class remains a prohibitive O(n7), which makes
the practical usefulness questionable.
In this paper, we explore another characteri-
zation of mildly non-projective dependency trees
based on the notion of multiplanarity. This was
originally proposed by Yli-Jyr¨a (2003) but has so
far played a marginal role in the dependency pars-
ing literature, because no algorithm was known
for determining whether an arbitrary tree was m-
planar, and no parsing algorithm existed for any
constant value of m. The contribution of this pa-
per is twofold. First, we present a procedure for
determining the minimal number m such that a
dependency tree is m-planar and use it to show
that the overwhelming majority of sentences in de-
pendency treebanks have a tree that is at most 2-
planar. Secondly, we present a transition-based
parsing algorithm for 2-planar dependency trees,
developed in two steps. We begin by showing how
the stack-based algorithm of Nivre (2003) can be
generalized from projective to planar structures.
We then extend the system by adding a second
stack and show that the resulting system captures
exactly the set of 2-planar structures. Although the
contributions of this paper are mainly theoretical,
we also present an empirical evaluation of the 2-
planar parser, showing that it outperforms the pro-
jective parser on four data sets from the CoNLL-X
shared task (Buchholz and Marsi, 2006).
</bodyText>
<page confidence="0.951399">
1492
</page>
<note confidence="0.969504">
Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics, pages 1492–1501,
Uppsala, Sweden, 11-16 July 2010. c�2010 Association for Computational Linguistics
</note>
<sectionHeader confidence="0.984093" genericHeader="introduction">
2 Preliminaries
</sectionHeader>
<subsectionHeader confidence="0.994104">
2.1 Dependency Graphs
</subsectionHeader>
<bodyText confidence="0.985282">
Let w = w1 ... wn bean input string.1 An inter-
val (with endpoints i and j) of the string w is a set
of the form [i, j] = {wk  |i &lt; k &lt; j}.
</bodyText>
<construct confidence="0.955648">
Definition 1. A dependency graph for w is a di-
rected graph G = (V,,, E), where V� = [1, n] and
E C V„ X V,,.
</construct>
<bodyText confidence="0.997613555555556">
We call an edge (wi, wj) in a dependency graph G
a dependency link2 from wi to wj. We say that wi
is the parent (or head) of wj and, conversely, that
wj is a syntactic child (or dependent) of wi. For
convenience, we write wi —* wj E E if the link
(wi, wj) exists; wi H wj E E if there is a link
from wi to wj or from wj to wi; wi —** wj E E if
there is a (possibly empty) directed path from wi
to wj; and wi H* wj E E if there is a (possibly
empty) path between wi and wj in the undirected
graph underlying G (omitting reference to E when
clear from the context). The projection of a node
wi, denoted Lwil, is the set of reflexive-transitive
dependents of wi: Lwil = {wj E V  |wi —** wj}.
Most dependency representations do not allow
arbitrary dependency graphs but typically require
graphs to be acyclic and have at most one head per
node. Such a graph is called a dependency forest.
</bodyText>
<construct confidence="0.526226">
Definition 2. A dependency graph G for a string
w1 ... wn is said to be a forest iff it satisfies:
</construct>
<listItem confidence="0.982259333333333">
1. Acyclicity: If wi —** wj, then not wj —* wi.
2. Single-head: If wj —* wi, then not wk —* wi
(for every k =� j).
</listItem>
<bodyText confidence="0.989966">
Nodes in a forest that do not have a head are called
roots. Some frameworks require that dependency
forests have a unique root (i.e., are connected).
Such a forest is called a dependency tree.
</bodyText>
<subsectionHeader confidence="0.997857">
2.2 Projectivity
</subsectionHeader>
<bodyText confidence="0.9992736">
For reasons of computational efficiency, many de-
pendency parsers are restricted to work with pro-
jective dependency structures, that is, forests in
which the projection of each node corresponds to
a contiguous substring of the input:
</bodyText>
<footnote confidence="0.998562666666667">
1For notational convenience, we will assume throughout
the paper that all symbols in an input string are distinct, i.e.,
i # j q wi # wj. This can be guaranteed in practice by
annotating each terminal symbol with its position in the input.
2In practice, dependency links are usually labeled, but to
simplify the presentation we will ignore labels throughout
most of the paper. However, all the results and algorithms
presented can be applied to labeled dependency graphs and
will be so applied in the experimental evaluation.
</footnote>
<construct confidence="0.978778666666667">
Definition 3. A dependency forest G for a string
w1 ... wn is projective iff Lwil is an interval for
every word wi E [1, n].
</construct>
<bodyText confidence="0.999664">
Projective dependency trees correspond to the set
of structures that can be induced from lexicalised
context-free derivations (Kuhlmann, 2007; Gaif-
man, 1965). Like context-free grammars, projec-
tive dependency trees are not sufficient to repre-
sent all the linguistic phenomena observed in natu-
ral languages, but they have the advantage of being
efficiently parsable: their parsing problem can be
solved in cubic time with chart parsing techniques
(Eisner, 1996; G´omez-Rodr´ıguez et al., 2008),
while in the case of general non-projective depen-
dency forests, it is only tractable under strong in-
dependence assumptions (McDonald et al., 2005b;
McDonald and Satta, 2007).
</bodyText>
<subsectionHeader confidence="0.992461">
2.3 Planarity
</subsectionHeader>
<bodyText confidence="0.974327181818182">
The concept of planarity (Sleator and Temperley,
1993) is closely related to projectivity3 and can be
informally defined as the property of a dependency
forest whose links can be drawn above the words
without crossing.4 To define planarity more for-
mally, we first define crossing links as follows:
let (wi, wk) and (wj, wl) be dependency links in
a dependency graph G. Without loss of general-
ity, we assume that min(i, k) &lt; min(j, l). Then,
the links are said to be crossing if min(i, k) &lt;
min(j, l) &lt; max(i, k) &lt; max(j, l).
</bodyText>
<construct confidence="0.954472">
Definition 4. A dependency graph is planar iff it
does not contain a pair of crossing links.
</construct>
<subsectionHeader confidence="0.989587">
2.4 Multiplanarity
</subsectionHeader>
<bodyText confidence="0.998126454545455">
The concept of planarity on its own does not seem
to be very relevant as an extension of projectiv-
ity for practical dependency parsing. According
to the results by Kuhlmann and Nivre (2006), most
non-projective structures in dependency treebanks
are also non-planar, so being able to parse planar
structures will only give us a modest improvement
in coverage with respect to a projective parser.
However, our interest in planarity is motivated by
the fact that it can be generalised to multipla-
narity (Yli-Jyr¨a, 2003):
</bodyText>
<footnote confidence="0.995999333333333">
3For dependency forests that are extended with a unique
artificial root located at position 0, as is commonly done, the
two notions are equivalent.
4Planarity in the context of dependency structures is not to
be confused with the homonymous concept in graph theory,
which does not restrict links to be drawn above the nodes.
</footnote>
<page confidence="0.940781">
1493
</page>
<figureCaption confidence="0.8891868">
Figure 2: The crossings graph corresponding to
the dependency structure of Figure 1.
Figure 1: A 2-planar dependency structure with
two different ways of distributing its links into two
planes (represented by solid and dotted lines).
</figureCaption>
<construct confidence="0.8714025">
Definition 5. A dependency graph G = (V, E)
is m-planar iff there exist planar dependency
graphs Gi = (V, Ei), ... , Gm = (V, Em) (called
planes) such that E = El U · · · U Em.
</construct>
<bodyText confidence="0.999419428571429">
Intuitively, we can associate planes with colours
and say that a dependency graph G is m-planar if it
is possible to assign one of m colours to each of its
links in such a way that links with the same colour
do not cross. Note that there may be multiple
ways of dividing an m-planar graph into planes,
as shown in the example of Figure 1.
</bodyText>
<sectionHeader confidence="0.951954" genericHeader="method">
3 Determining Multiplanarity
</sectionHeader>
<bodyText confidence="0.999773620689655">
Several constraints on non-projective dependency
structures have been proposed recently that seek a
good balance between parsing efficiency and cov-
erage of non-projective phenomena present in nat-
ural language treebanks. For example, Kuhlmann
and Nivre (2006) and Havelka (2007) have shown
that the vast majority of structures present in exist-
ing treebanks are well-nested and have a small gap
degree (Bodirsky et al., 2005), leading to an inter-
est in parsers for these kinds of structures (G´omez-
Rodr´ıguez et al., 2009). No similar analysis has
been performed for m-planar structures, although
Yli-Jyr¨a (2003) provides evidence that all except
two structures in the Danish dependency treebank
are at most 3-planar. However, his analysis is
based on constraints that restrict the possible ways
of assigning planes to dependency links, and he is
not guaranteed to find the minimal number m for
which a given structure is m-planar.
In this section, we provide a procedure for find-
ing the minimal number m such that a dependency
graph is m-planar and use it to show that the vast
majority of sentences in dependency treebanks are
at most 2-planar, with a coverage comparable to
that of well-nestedness. The idea is to reduce
the problem of determining whether a dependency
graph G = (V, E) is m-planar, for a given value
of m, to a standard graph colouring problem. Con-
sider first the following undirected graph:
</bodyText>
<equation confidence="0.999504">
U(G) = (E, C) where
C = {{ei, ej}  |ei, ej are crossing links in G}
</equation>
<bodyText confidence="0.999945727272727">
This graph, which we call the crossings graph of
G, has one node corresponding to each link in the
dependency graph G, with an undirected link be-
tween two nodes if they correspond to crossing
links in G. Figure 2 shows the crossings graph
of the 2-planar structure in Figure 1.
As noted in Section 2.4, a dependency graph G
is m-planar if each of its links can be assigned
one of m colours in such a way that links with the
same colours do not cross. In terms of the cross-
ings graph, this means that G is m-planar if each
of the nodes of U(G) can be assigned one of m
colours such that no two neighbours have the same
colour. This amounts to solving the well-known k-
colouring problem for U(G), where k = m.
For k = 1 the problem is trivial: a graph is 1-
colourable only if it has no edges. For k = 2, the
problem can be solved in time linear in the size of
the graph by simple breadth-first search. Given a
graph U = (V, E), we pick an arbitrary node v
and give it one of two colours. This forces us to
give the other colour to all its neighbours, the first
colour to the neighbours’ neighbours, and so on.
This process continues until we have processed all
the nodes in the connected component of v. If this
has resulted in assigning two different colours to
the same node, the graph is not 2-colourable. Oth-
erwise, we have obtained a 2-colouring of the con-
nected component of U that contains v. If there
are still unprocessed nodes, we repeat the process
by arbitrarily selecting one of them, continue with
the rest of the connected components, and in this
way obtain a 2-colouring of the whole graph if it
</bodyText>
<page confidence="0.975735">
1494
</page>
<table confidence="0.999672777777778">
Language Structures Non-Projective Not Planar Not 2-Planar Not 3-Pl. Not 4-pl. Ill-nested
Arabic 2995 205 ( 6.84%) 158 ( 5.28 %) 0 (0.00%) 0 (0.00%) 0 (0.00%) 1 (0.03%)
Czech 87889 20353 (23.16%) 16660 (18.96 %) 82 (0.09%) 0 (0.00%) 0 (0.00%) 96 (0.11%)
Danish 5512 853 (15.48%) 827 (15.00 %) 1 (0.02%) 1 (0.02%) 0 (0.00%) 6 (0.11%)
Dutch 13349 4865 (36.44%) 4115 (30.83 %) 162 (1.21%) 1 (0.01%) 0 (0.00%) 15 (0.11%)
German 39573 10927 (27.61%) 10908 (27.56 %) 671 (1.70%) 0 (0.00%) 0 (0.00%) 419 (1.06%)
Portuguese 9071 1718 (18.94%) 1713 (18.88 %) 8 (0.09%) 0 (0.00%) 0 (0.00%) 7 (0.08%)
Swedish 6159 293 ( 4.76%) 280 ( 4.55 %) 5 (0.08%) 0 (0.00%) 0 (0.00%) 14 (0.23%)
Turkish 5510 657 (11.92%) 657 (11.92 %) 10 (0.18%) 0 (0.00%) 0 (0.00%) 20 (0.36%)
</table>
<tableCaption confidence="0.999353">
Table 1: Proportion of dependency trees classified by projectivity, planarity, m-planarity and ill-
</tableCaption>
<bodyText confidence="0.952757547619047">
nestedness in treebanks for Arabic (Hajiˇc et al., 2004), Czech (Hajiˇc et al., 2006), Danish (Kromann,
2003), Dutch (van der Beek et al., 2002), German (Brants et al., 2002), Portuguese (Afonso et al., 2002),
Swedish (Nilsson et al., 2005) and Turkish (Oflazer et al., 2003; Atalay et al., 2003).
exists. Since this process can be completed by vis-
iting each node and edge of the graph U once, its
complexity is O(V + E). The crossings graph of
a dependency graph with n nodes can trivially be
built in time O(n2) by checking each pair of de-
pendency links to determine if they cross, and can-
not contain more than n2 edges, which means that
we can check if the dependency graph for a sen-
tence of length n is 2-planar in O(n2) time.
For k &gt; 2, the k-colouring problem is known
to be NP-complete (Karp, 1972). However, we
have found this not to be a problem when measur-
ing multiplanarity in natural language treebanks,
since the effective problem size can be reduced
by noting that each connected component of the
crossings graph can be treated separately, and that
nodes that are not part of a cycle need not be
considered.5 Given that non-projective sentences
in natural language tend to have a small propor-
tion of non-projective links (Nivre and Nilsson,
2005), the connected components of their cross-
ings graphs are very small, and k-colourings for
them can quickly be found by brute-force search.
By applying these techniques to dependency
treebanks of several languages, we obtain the data
shown in Table 1. As we can see, the coverage
provided by the 2-planarity constraint is compa-
rable to that of well-nestedness. In most of the
treebanks, well over 99% of the sentences are 2-
planar, and 3-planarity has almost total coverage.
As we will see below, the class of 2-planar depen-
dency structures not only has good coverage of lin-
guistic phenomena in existing treebanks but is also
efficiently parsable with transition-based parsing
methods, making it a practically interesting sub-
class of non-projective dependency structures.
5If we have a valid colouring for all the cycles in the
graph, the rest of the nodes can be safely coloured by breadth-
first search as in the k = 2 case.
</bodyText>
<sectionHeader confidence="0.647141" genericHeader="method">
4 Parsing 1-Planar Structures
</sectionHeader>
<bodyText confidence="0.9999849">
In this section, we present a deterministic linear-
time parser for planar dependency structures. The
parser is a variant of Nivre’s arc-eager projec-
tive parser (Nivre, 2003), modified so that it can
also handle graphs that are planar but not projec-
tive. As seen in Table 1, this only gives a modest
improvement in coverage compared to projective
parsing, so the main interest of this algorithm lies
in the fact that it can be generalised to deal with
2-planar structures, as shown in the next section.
</bodyText>
<subsectionHeader confidence="0.998374">
4.1 Transition Systems
</subsectionHeader>
<bodyText confidence="0.999865857142857">
In the transition-based framework of Nivre (2008),
a deterministic dependency parser is defined by a
non-deterministic transition system, specifying a
set of elementary operations that can be executed
during the parsing process, and an oracle that de-
terministically selects a single transition at each
choice point of the parsing process.
</bodyText>
<listItem confidence="0.851601">
Definition 6. A transition system for dependency
parsing is a quadruple 5 = (C, T, cs, Ct) where
1. C is a set ofpossible parser configurations,
2. T is a set of transitions, each of which is a
partial function t : C -* C,
3. cs is a function that maps each input sentence
w to an initial configuration cs(w) E C,
4. Ct C C is a set of terminal configurations.
</listItem>
<construct confidence="0.681363">
Definition 7. An oracle for a transition system
5 = (C, T, cs, Ct) is a function o : C -* T.
</construct>
<bodyText confidence="0.999554142857143">
An input sentence w can be parsed using a tran-
sition system 5 = (C, T, cs, Ct) and an oracle o
by starting in the initial configuration cs(w), call-
ing the oracle function on the current configuration
c, and updating the configuration by applying the
transition o(c) returned by the oracle. This pro-
cess is repeated until a terminal configuration is
</bodyText>
<page confidence="0.959732">
1495
</page>
<table confidence="0.919111">
Initial configuration: cs(w1 ... wn) = h[], [w1 ... wn], ∅i
Terminal configurations: Cf = {hE, [],Ai ∈ C}
Transitions: SHIFT hE, wi|B, Ai ⇒ hE|wi, B, Ai
REDUCE hE|wi, B, Ai ⇒ hE, B, Ai
LEFT-ARC hE|wi, wj|B, Ai ⇒ hE|wi, wj|B, A ∪ {(wj, wi)}i
only if Ak|(wk, wi) E A (single-head) and not wi +-+* wj E A (acyclicity).
RIGHT-ARC hE|wi, wj|B, Ai ⇒ hE|wi, wj|B, A ∪ {(wi, wj)}i
only if Ak|(wk, wj) E A (single-head) and not wi +-+* wj E A (acyclicity).
</table>
<figureCaption confidence="0.996337">
Figure 3: Transition system for planar dependency parsing.
</figureCaption>
<bodyText confidence="0.998936791666667">
reached, and the dependency analysis of the sen-
tence is defined by the terminal configuration.
Each sequence of configurations that the parser
can traverse from an initial configuration to a ter-
minal configuration for some input w is called a
transition sequence. If we associate each config-
uration c of a transition system 5 = (C, T, cs, Ct)
with a dependency graph g(c), we can say that
5 is sound for a class of dependency graphs G
if, for every sentence w and transition sequence
(cs(w), c1, ... , cf) of 5, g(cf) is in G, and that 5
is complete for G if, for every sentence w and de-
pendency graph G ∈ G for w, there is a transition
sequence (cs(w), c1, ... , cf) such that g(cf) = G.
A transition system that is sound and complete for
G is said to be correct for G.
Note that, apart from a correct transition system,
a practical parser needs a good oracle to achieve
the desired results, since a transition system only
specifies how to reach all the possible dependency
graphs that could be associated to a sentence, but
not how to select the correct one. Oracles for prac-
tical parsers can be obtained by training classifiers
on treebank data (Nivre et al., 2004).
</bodyText>
<subsectionHeader confidence="0.9911785">
4.2 A Transition System for Planar
Structures
</subsectionHeader>
<bodyText confidence="0.9991386">
A correct transition system for the class of planar
dependency forests can be obtained as a variant of
the arc-eager projective system by Nivre (2003).
As in that system, the set of configurations of the
planar transition system is the set of all triples
c = hE, B, Ai such that E and B are disjoint lists
of words from Uw (for some input w), and A is a
set of dependency links over Uw. The list B, called
the buffer, is initialised to the input string and is
used to hold the words that are still to be read from
the input. The list E, called the stack, is initially
empty and holds words that have dependency links
pending to be created. The system is shown in Fig-
ure 3, where we use the notation E|wi for a stack
with top wi and tail E, and we invert the notation
for the buffer for clarity (i.e., wi|B is a buffer with
top wi and tail B).
The system reads the input from left to right and
creates links in a left-to-right order by executing
its four transitions:
</bodyText>
<listItem confidence="0.967375888888889">
1. SHIFT: pops the first (leftmost) word in the
buffer, and pushes it to the stack.
2. LEFT-ARC: adds a link from the first word in
the buffer to the top of the stack.
3. RIGHT-ARC: adds a link from the top of the
stack to the first word in the buffer.
4. REDUCE: pops the top word from the stack,
implying that we have finished building links
to or from it.
</listItem>
<bodyText confidence="0.99994325">
Note that the planar parser’s transitions are more
fine-grained than those of the arc-eager projective
parser by Nivre (2003), which pops the stack as
part of its LEFT-ARC transition and shifts a word
as part of its RIGHT-ARC transition. Forcing these
actions after creating dependency links rules out
structures whose root is covered by a dependency
link, which are planar but not projective. In order
to support these structures, we therefore simplify
the ARC transitions (LEFT-ARC and RIGHT-ARC)
so that they only create an arc. For the same rea-
son, we remove the constraint in Nivre’s parser by
which words without a head cannot be reduced.
This has the side effect of making the parser able
to output cyclic graphs. Since we are interested
in planar dependency forests, which do not con-
tain cycles, we only apply ARC transitions after
checking that there is no undirected path between
the nodes to be linked. This check can be done
without affecting the linear-time complexity of the
</bodyText>
<page confidence="0.965811">
1496
</page>
<bodyText confidence="0.999222">
parser by storing the weakly connected component
of each node in g(c).
The fine-grained transitions used by this parser
have also been used by Sagae and Tsujii (2008)
to parse DAGs. However, the latter parser differs
from ours in the constraints, since it does not allow
the reduction of words without a head (disallowing
forests with covered roots) and does not enforce
the acyclicity constraint (which is guaranteed by
post-processing the graphs to break cycles).
</bodyText>
<subsectionHeader confidence="0.997036">
4.3 Correctness and Complexity
</subsectionHeader>
<bodyText confidence="0.99528946875">
For reasons of space, we can only give a sketch
of the correctness proof. We wish to prove that
the planar transition system is sound and com-
plete for the set Fp of all planar dependency
forests. To prove soundness, we have to show
that, for every sentence w and transition sequence
(cs(w), c1, ... , cf), the graph g(cf) associated
with cf is in Fp. We take the graph associated
with a configuration c = (E, B, A) to be g(c) =
(Vw, A). With this, we prove the stronger claim
that g(c) E Fp for every configuration c that be-
longs to some transition sequence starting with
cs(w). This amounts to showing that in every con-
figuration c reachable from cs(w), g(c) meets the
following three conditions that characterise a pla-
nar dependency forest: (1) g(c) does not contain
nodes with more than one head; (2) g(c) is acyclic;
and (3) g(c) contains no crossing links. (1) is triv-
ially guaranteed by the single-head constraint; (2)
follows from (1) and the acyclicity constraint; and
(3) can be established by proving that there is no
transition sequence that will invoke two ARC tran-
sitions on node pairs that would create crossing
links. At the point when a link from wi to wj is
created, we know that all the words strictly located
between wi and wj are not in the stack or in the
buffer, so no links can be created to or from them.
To prove completeness, we show that every
planar dependency forest G = (V, E) E Fp
for a sentence w can be produced by apply-
ing the oracle function that maps a configuration
(E|wi, wj|B, A) to:
</bodyText>
<listItem confidence="0.99464125">
1. LEFT-ARC if wj --+ wi E (E \ A),
2. RIGHT-ARC if wi --+ wj E (E \ A),
3. REDUCE if Elx[x&lt;i][wx +-+ wj E (E \ A)],
4. SHIFT otherwise.
</listItem>
<bodyText confidence="0.874683">
We show completeness by setting the following in-
variants on transitions traversed by the application
of the oracle:
</bodyText>
<listItem confidence="0.959254">
1. ba, b[a,b&lt;j][wa Hwb EE ==�&apos; wa Hwb EA]
2. [wi HwjEA==&gt;-
</listItem>
<equation confidence="0.450398666666667">
bk[i&lt;k&lt;j][wk Hwj EE ==&gt;&apos; wk Hwj EA]]
3. bk[k&lt;j][wk VE ==&gt;&apos;
bl[l&gt;k][wk Hwl EE ==�&apos; wk Hwl EA]]
</equation>
<bodyText confidence="0.9998314375">
We can show that each branch of the oracle func-
tion keeps these invariants true. When we reach a
terminal configuration (which always happens af-
ter a finite number of transitions, since every tran-
sition generating a configuration c = (E, B, A)
decreases the value of the variant function |E |+
|E |+ 2|B |− |A|), it can be deduced from the in-
variant that A = E, which proves completeness.
The worst-case complexity of a deterministic
transition-based parser is given by an upper bound
on transition sequence length (Nivre, 2008). For
the planar system, like its projective counterpart,
the length is clearly O(n) (where n is the number
of input words), since there can be no more than
n SHIFT transitions, n REDUCE transitions, and n
ARC transitions in a transition sequence.
</bodyText>
<sectionHeader confidence="0.795003" genericHeader="method">
5 Parsing 2-Planar Structures
</sectionHeader>
<bodyText confidence="0.999827866666667">
The planar parser introduced in the previous sec-
tion can be extended to parse all 2-planar depen-
dency structures by adding a second stack to the
system and making REDUCE and ARC transitions
apply to only one of the stacks at a time. This
means that the set of links created in the context
of each individual stack will be planar, but pairs
of links created in different stacks are allowed to
cross. In this way, the parser will build a 2-planar
dependency forest by using each of the stacks to
construct one of its two planes.
The 2-planar transition system, shown in Figure
4, has configurations of the form (E0, E1, B, A),
where we call E0 the active stack and E1 the in-
active stack, and the following transitions:
</bodyText>
<listItem confidence="0.99824725">
1. SHIFT: pops the first (leftmost) word in the
buffer, and pushes it to both stacks.
2. LEFT-ARC: adds a link from the first word in
the buffer to the top of the active stack.
3. RIGHT-ARC: adds a link from the top of the
active stack to the first word in the buffer.
4. REDUCE: pops the top word from the active
stack, implying that we have added all links
to or from it on the plane tied to that stack.
5. SWITCH: makes the active stack inactive and
vice versa, changing the plane the parser is
working with.
</listItem>
<page confidence="0.816081">
1497
</page>
<equation confidence="0.966591333333333">
Initial configuration: cs(w1 ... wn) = h[], [], [w1 ... wn], ∅i
Terminal configurations: Cf = {hE0, E1, [],Ai ∈ C}
Transitions: SHIFT hE0, E1, wi|B, Ai ⇒ hE0|wi, E1|wi, B, Ai
REDUCE hE0|wi, E1, B, Ai ⇒ hE0, E1, B, Ai
LEFT-ARC hE0|wi, E1, wj|B, Ai ⇒ hE0|wi, E1, wj|B, A ∪ {(wj, wi)}i
only if Ak  |(wk, wi) E A (single-head) and not wi +-+* wj E A (acyclicity).
RIGHT-ARC hE0|wi, E1, wj|B, Ai ⇒ hE0|wi, E1, wj|B, A ∪ {(wi, wj)}i
only if Ak|(wk, wj) E A (single-head) and not wi +-+* wj E A (acyclicity).
SWITCH hE0, E1, B, Ai ⇒ hE1, E0, B, Ai
</equation>
<figureCaption confidence="0.999079">
Figure 4: Transition system for 2-planar dependency parsing.
</figureCaption>
<subsectionHeader confidence="0.973122">
5.1 Correctness and Complexity
</subsectionHeader>
<bodyText confidence="0.999504833333333">
As in the planar case, we provide a brief sketch
of the proof that the transition system in Figure 4
is correct for the set F2p of 2-planar dependency
forests. Soundness follows from a reasoning anal-
ogous to the planar case, but applying the proof
of planarity separately to each stack. In this way,
we prove that the sets of dependency links cre-
ated by linking to or from the top of each of the
two stacks are always planar graphs, and thus their
union (which is the dependency graph stored in A)
is 2-planar. This, together with the single-head and
acyclicity constraints, guarantees that the depen-
dency graphs associated with reachable configura-
tions are always 2-planar dependency forests.
For completeness, we assume an extended form
of the transition system where transitions take the
form hE0, E1, B, A, pi, where p is a flag taking
values in {0, 1} which equals 0 for initial config-
urations and gets flipped by each application of a
SWITCH transition. Then we show that every 2-
planar dependency forest G ∈ F2p, with planes
G0 = (V, E0) and G1 = (V, E1), can be produced
by this system by applying the oracle function that
maps a configuration hE0|wi, E1, wj|B, A, pi to:
</bodyText>
<listItem confidence="0.995472">
1. LEFT-ARC if wj --+wi E(Ep \ A),
2. RIGHT-ARC if wi --+wj E(Ep \ A),
3. REDUCE if 3x]x&lt;i][wx +-+wj E(Ep \ A) n
-3y]x&lt;y&lt;i][wy +-+wj E(Ep \ A)]],
4. SWITCH if3x&lt;j : (wx, wj) or (wj, wx) E (Ep\A),
5. SHIFT otherwise.
</listItem>
<bodyText confidence="0.98973475">
This can be shown by employing invariants analo-
gous to the planar case, with the difference that the
third invariant applies to each stack and its corre-
sponding plane: if Ey is associated with the plane
</bodyText>
<equation confidence="0.922868666666667">
Ex,6 we have:
3. ∀k[k&lt;j][wk ∈6 Ey] ⇒
∀l[l&gt;k][wk ↔wl ∈Ex] ⇒ [wk ↔wl ∈A]
</equation>
<bodyText confidence="0.999908166666667">
Since the presence of the flag p in configurations
does not affect the set of dependency graphs gen-
erated by the system, the completeness of the sys-
tem extended with the flag p implies that of the
system in Figure 4.
We can show that the complexity of the 2-planar
system is O(n) by the same kind of reasoning as
for the 1-planar system, with the added complica-
tion that we must constrain the system to prevent
two adjacent SWITCH transitions. In fact, without
this restriction, the parser is not even guaranteed
to terminate.
</bodyText>
<subsectionHeader confidence="0.997374">
5.2 Implementation
</subsectionHeader>
<bodyText confidence="0.9999568125">
In practical settings, oracles for transition-based
parsers can be approximated by classifiers trained
on treebank data (Nivre, 2008). To do this, we
need an oracle that will generate transition se-
quences for gold-standard dependency graphs. In
the case of the planar parser of Section 4.2, the or-
acle of 4.3 is suitable for this purpose. However,
in the case of the 2-planar parser, the oracle used
for the completeness proof in Section 5.1 cannot
be used directly, since it requires the gold-standard
trees to be divided into two planes in order to gen-
erate a transition sequence.
Of course, it is possible to use the algorithm
presented in Section 3 to obtain a division of sen-
tences into planes. However, for training purposes
and to obtain a robust behaviour if non-2-planar
</bodyText>
<footnote confidence="0.897066">
6The plane corresponding to each stack in a configuration
changes with each SWITCH transition: Ex is associated with
Ex in configurations where p = 0, and with Ex in those
where p = 1.
</footnote>
<page confidence="0.950662">
1498
</page>
<table confidence="0.9968414">
Parser Czech Danish German Portuguese
LAS UAS NPP NPR LAS UAS NPP NPR LAS UAS NPP NPR LAS UAS NPP NPR
2-planar 79.24 85.30 68.9 60.7 83.81 88.50 66.7 20.0 86.50 88.84 57.1 45.8 87.04 90.82 82.8 33.8
Malt P 78.18 84.12 – – 83.31 88.30 – – 85.36 88.06 – – 86.60 90.20 – –
Malt PP 79.80 85.70 76.7 56.1 83.67 88.52 41.7 25.0 85.76 88.66 58.1 40.7 87.08 90.66 83.3 46.2
</table>
<tableCaption confidence="0.992085">
Table 2: Parsing accuracy for 2-planar parser in comparison to MaltParser with (PP) and without (P)
</tableCaption>
<bodyText confidence="0.982435">
pseudo-projective transformations. LAS = labeled attachment score; UAS = unlabeled attachment score;
NPP = precision on non-projective arcs; NPR = recall on non-projective arcs.
sentences are found, it is more convenient that
the oracle can distribute dependency links into the
planes incrementally, and that it produces a dis-
tribution of links that only uses SWITCH transi-
tions when it is strictly needed to account for non-
planarity. Thus we use a more complex version of
the oracle which performs a search in the crossings
graph to check if a dependency link can be built on
the plane of the active stack, and only performs a
switch when this is not possible. This has proved
to work well in practice, as will be observed in the
results in the next section.
</bodyText>
<sectionHeader confidence="0.982348" genericHeader="method">
6 Empirical Evaluation
</sectionHeader>
<bodyText confidence="0.980926980769231">
In order to get a first estimate of the empirical ac-
curacy that can be obtained with transition-based
2-planar parsing, we have evaluated the parser
on four data sets from the CoNLL-X shared task
(Buchholz and Marsi, 2006): Czech, Danish, Ger-
man and Portuguese. As our baseline, we take
the strictly projective arc-eager transition system
proposed by Nivre (2003), as implemented in the
freely available MaltParser system (Nivre et al.,
2006a), with and without the pseudo-projective
parsing technique for recovering non-projective
dependencies (Nivre and Nilsson, 2005). For the
two baseline systems, we use the parameter set-
tings used by Nivre et al. (2006b) in the original
shared task, where the pseudo-projective version
of MaltParser was one of the two top performing
systems (Buchholz and Marsi, 2006). For our 2-
planar parser, we use the same kernelized SVM
classifiers as MaltParser, using the LIBSVM pack-
age (Chang and Lin, 2001), with feature models
that are similar to MaltParser but extended with
features defined over the second stack.7
In Table 2, we report labeled (LAS) and un-
labeled (UAS) attachment score on the four lan-
guages for all three systems. For the two systems
that are capable of recovering non-projective de-
7Complete information about experimental settings can
be found at http://stp.lingfil.uu.se/ nivre/exp/.
pendencies, we also report precision (NPP) and
recall (NPR) specifically on non-projective depen-
dency arcs. The results show that the 2-planar
parser outperforms the strictly projective variant
of MaltParser on all metrics for all languages,
and that it performs on a par with the pseudo-
projective variant with respect to both overall at-
tachment score and precision and recall on non-
projective dependencies. These results look very
promising in view of the fact that very little effort
has been spent on optimizing the training oracle
and feature model for the 2-planar parser so far.
It is worth mentioning that the 2-planar parser
has two advantages over the pseudo-projective
parser. The first is simplicity, given that it is based
on a single transition system and makes a single
pass over the input, whereas the pseudo-projective
parsing technique involves preprocessing of train-
ing data and post-processing of parser output
(Nivre and Nilsson, 2005). The second is the fact
that it parses a well-defined class of dependency
structures, with known coverage8, whereas no for-
mal characterization exists of the class of struc-
tures parsable by the pseudo-projective parser.
</bodyText>
<sectionHeader confidence="0.990772" genericHeader="conclusions">
7 Conclusion
</sectionHeader>
<bodyText confidence="0.988462941176471">
In this paper, we have presented an efficient algo-
rithm for deciding whether a dependency graph is
2-planar and a transition-based parsing algorithm
that is provably correct for 2-planar dependency
forests, neither of which existed in the literature
before. In addition, we have presented empirical
results showing that the class of 2-planar depen-
dency forests includes the overwhelming majority
of structures found in existing treebanks and that
a deterministic classifier-based implementation of
the 2-planar parser gives state-of-the-art accuracy
on four different languages.
8If more coverage is desired, the 2-planar parser can be
generalised to m-planar structures for larger values of m by
adding additional stacks. However, this comes at the cost of
more complex training models, making the practical interest
of increasing m beyond 2 dubious.
</bodyText>
<page confidence="0.997549">
1499
</page>
<sectionHeader confidence="0.99818" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.997918857142857">
The first author has been partially supported by
Ministerio de Educaci´on y Ciencia and FEDER
(HUM2007-66607-C04) and Xunta de Galicia
(PGIDIT07SIN005206PR, Rede Galega de Proce-
samento da Linguaxe e Recuperaci´on de Infor-
maci´on, Rede Galega de Ling¨ufstica de Corpus,
Bolsas Estadfas INCITE/FSE cofinanced).
</bodyText>
<sectionHeader confidence="0.997757" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999097412371134">
Susana Afonso, Eckhard Bick, Renato Haber, and Di-
ana Santos. 2002. “Floresta sint´a(c)tica”: a tree-
bank for Portuguese. In Proceedings of the 3rd In-
ternational Conference on Language Resources and
Evaluation (LREC 2002), pages 1968–1703, Paris,
France. ELRA.
Nart B. Atalay, Kemal Oflazer, and Bilge Say. 2003.
The annotation process in the Turkish treebank.
In Proceedings of EACL Workshop on Linguisti-
cally Interpreted Corpora (LINC-03), pages 243–
246, Morristown, NJ, USA. Association for Com-
putational Linguistics.
Leonoor van der Beek, Gosse Bouma, Robert Malouf,
and Gertjan van Noord. 2002. The Alpino depen-
dency treebank. In Language and Computers, Com-
putational Linguistics in the Netherlands 2001. Se-
lected Papers from the Twelfth CLIN Meeting, pages
8–22, Amsterdam, the Netherlands. Rodopi.
Manuel Bodirsky, Marco Kuhlmann, and Mathias
M¨ohl. 2005. Well-nested drawings as models of
syntactic structure. In 10th Conference on Formal
Grammar and 9th Meeting on Mathematics of Lan-
guage, Edinburgh, Scotland, UK.
Sabine Brants, Stefanie Dipper, Silvia Hansen, Wolf-
gang Lezius, and George Smith. 2002. The tiger
treebank. In Proceedings of the Workshop on Tree-
banks and Linguistic Theories, September 20-21,
Sozopol, Bulgaria.
Matthias Buch-Kromann. 2006. Discontinuous Gram-
mar: A Model of Human Parsing and Language
Acquisition. Ph.D. thesis, Copenhagen Business
School.
Sabine Buchholz and Erwin Marsi. 2006. CoNLL-
X shared task on multilingual dependency parsing.
In Proceedings of the 10th Conference on Computa-
tional Natural Language Learning (CoNLL), pages
149–164.
Chih-Chung Chang and Chih-Jen Lin, 2001.
LIBSVM: A Library for Support Vec-
tor Machines. Software available at
http://www.csie.ntu.edu.tw/∼cjlin/libsvm.
Jason Eisner. 1996. Three new probabilistic mod-
els for dependency parsing: An exploration. In
Proceedings of the 16th International Conference
on Computational Linguistics (COLING-96), pages
340–345, San Francisco, CA, USA, August. ACL /
Morgan Kaufmann.
Haim Gaifman. 1965. Dependency systems and
phrase-structure systems. Information and Control,
8:304–337.
Carlos G´omez-Rodr´ıguez, John Carroll, and David
Weir. 2008. A deductive approach to depen-
dency parsing. In Proceedings of the 46th An-
nual Meeting of the Association for Computa-
tional Linguistics: Human Language Technologies
(ACL’08:HLT), pages 968–976, Morristown, NJ,
USA. Association for Computational Linguistics.
Carlos G´omez-Rodr´ıguez, David Weir, and John Car-
roll. 2009. Parsing mildly non-projective depen-
dency structures. In Proceedings of the 12th Con-
ference of the European Chapter of the Association
for Computational Linguistics (EACL), pages 291–
299.
Jan Hajiˇc, Otakar Smrˇz, Petr Zem´anek, Jan ˇSnaidauf,
and Emanuel Beˇska. 2004. Prague Arabic de-
pendency treebank: Development in data and tools.
In Proceedings of the NEMLAR International Con-
ference on Arabic Language Resources and Tools,
pages 110–117.
Jan Hajiˇc, Jarmila Panevov´a, Eva Hajiˇcov´a, Jarmila
Panevov´a, Petr Sgall, Petr Pajas, Jan ˇStˇep´anek,
JiˇrfHavelka, and Marie Mikulov´a. 2006.
Prague Dependency Treebank 2.0. CDROM
CAT: LDC2006T01, ISBN 1-58563-370-4. Linguis-
tic Data Consortium.
Jiri Havelka. 2007. Beyond projectivity: Multilin-
gual evaluation of constraints and measures on non-
projective structures. In Proceedings of the 45th An-
nual Meeting of the Association of Computational
Linguistics, pages 608–615.
Richard M. Karp. 1972. Reducibility among combi-
natorial problems. In R. Miller and J. Thatcher, ed-
itors, Complexity of Computer Computations, pages
85–103. Plenum Press.
Matthias T. Kromann. 2003. The Danish dependency
treebank and the underlying linguistic theory. In
Proceedings of the 2nd Workshop on Treebanks and
Linguistic Theories (TLT), pages 217–220, V¨axj¨o,
Sweden. V¨axj¨o University Press.
Marco Kuhlmann and Mathias M¨ohl. 2007. Mildly
context-sensitive dependency languages. In Pro-
ceedings of the 45th Annual Meeting of the Associa-
tion of Computational Linguistics, pages 160–167.
Marco Kuhlmann and Joakim Nivre. 2006. Mildly
non-projective dependency structures. In Proceed-
ings of the COLING/ACL 2006 Main Conference
Poster Sessions, pages 507–514.
</reference>
<page confidence="0.654339">
1500
</page>
<reference confidence="0.999634115044248">
Marco Kuhlmann and Giorgio Satta. 2009. Treebank
grammar techniques for non-projective dependency
parsing. In Proceedings of the 12th Conference of
the European Chapter of the Association for Com-
putational Linguistics (EACL), pages 478–486.
Marco Kuhlmann. 2007. Dependency Structures and
Lexicalized Grammars. Doctoral dissertation, Saar-
land University, Saarbr¨ucken, Germany.
Andre Martins, Noah Smith, and Eric Xing. 2009.
Concise integer linear programming formulations
for dependency parsing. In Proceedings of the
Joint Conference of the 47th Annual Meeting of the
ACL and the 4th International Joint Conference on
Natural Language Processing of the AFNLP (ACL-
IJCNLP), pages 342–350.
Ryan McDonald and Giorgio Satta. 2007. On the com-
plexity of non-projective data-driven dependency
parsing. In Proceedings of the 10th International
Conference on Parsing Technologies (IWPT), pages
122–131.
Ryan McDonald, Koby Crammer, and Fernando
Pereira. 2005a. Online large-margin training of de-
pendency parsers. In Proceedings of the 43rd An-
nual Meeting of the Association for Computational
Linguistics (ACL), pages 91–98.
Ryan McDonald, Fernando Pereira, Kiril Ribarov, and
Jan Hajiˇc. 2005b. Non-projective dependency pars-
ing using spanning tree algorithms. In HLT/EMNLP
2005: Proceedings of the conference on Human
Language Technology and Empirical Methods in
Natural Language Processing, pages 523–530, Mor-
ristown, NJ, USA. Association for Computational
Linguistics.
Peter Neuhaus and Norbert Br¨oker. 1997. The com-
plexity of recognition of linguistically adequate de-
pendency grammars. In Proceedings of the 35th
Annual Meeting of the Association for Computa-
tional Linguistics (ACL) and the 8th Conference of
the European Chapter of the Association for Com-
putational Linguistics (EACL), pages 337–343.
Jens Nilsson, Johan Hall, and Joakim Nivre. 2005.
MAMBA meets TIGER: Reconstructing a Swedish
treebank from antiquity. In Proceedings of NODAL-
IDA 2005 Special Session on Treebanks, pages 119–
132. Samfundslitteratur, Frederiksberg, Denmark,
May.
Joakim Nivre and Jens Nilsson. 2005. Pseudo-
projective dependency parsing. In ACL ’05: Pro-
ceedings of the 43rd Annual Meeting of the Associa-
tion for Computational Linguistics, pages 99–106,
Morristown, NJ, USA. Association for Computa-
tional Linguistics.
Joakim Nivre, Johan Hall, and Jens Nilsson. 2004.
Memory-based dependency parsing. In Proceed-
ings of the 8th Conference on Computational Nat-
ural Language Learning (CoNLL-2004), pages 49–
56, Morristown, NJ, USA. Association for Compu-
tational Linguistics.
Joakim Nivre, Johan Hall, and Jens Nilsson. 2006a.
MaltParser: A data-driven parser-generator for de-
pendency parsing. In Proceedings of the 5th In-
ternational Conference on Language Resources and
Evaluation (LREC), pages 2216–2219.
Joakim Nivre, Johan Hall, Jens Nilsson, G¨ulsen
Eryi˘git, and Svetoslav Marinov. 2006b. Labeled
pseudo-projective dependency parsing with support
vector machines. In Proceedings of the 10th Confer-
ence on Computational Natural Language Learning
(CoNLL), pages 221–225.
Joakim Nivre. 2003. An efficient algorithm for pro-
jective dependency parsing. In Proceedings of the
8th International Workshop on Parsing Technologies
(IWPT), pages 149–160.
Joakim Nivre. 2006. Constraints on non-projective de-
pendency graphs. In Proceedings of the 11th Con-
ference of the European Chapter of the Association
for Computational Linguistics (EACL), pages 73–
80.
Joakim Nivre. 2008. Algorithms for Deterministic In-
cremental Dependency Parsing. Computational Lin-
guistics, 34(4):513–553.
Kemal Oflazer, Bilge Say, Dilek Zeynep Hakkani-T¨ur,
and G¨okhan T¨ur. 2003. Building a Turkish tree-
bank. In A. Abeille (ed.), Building and Exploiting
Syntactically-annotated Corpora, pages 261–277,
Dordrecht, the Netherlands. Kluwer.
Kenji Sagae and Jun’ichi Tsujii. 2008. Shift-reduce
dependency DAG parsing. In COLING ’08: Pro-
ceedings of the 22nd International Conference on
Computational Linguistics, pages 753–760, Morris-
town, NJ, USA. Association for Computational Lin-
guistics.
Daniel Sleator and Davy Temperley. 1993. Parsing
English with a Link Grammar. In Proceedings of the
Third International Workshop on Parsing Technolo-
gies (IWPT’93), pages 277–292. ACL/SIGPARSE.
Ivan Titov and James Henderson. 2007. A latent vari-
able model for generative dependency parsing. In
Proceedings of the 10th International Conference on
Parsing Technologies (IWPT), pages 144–155.
Hiroyasu Yamada and Yuji Matsumoto. 2003. Statis-
tical dependency analysis with support vector ma-
chines. In Proceedings of the 8th International
Workshop on Parsing Technologies (IWPT), pages
195–206.
Anssi Mikael Yli-Jyr¨a. 2003. Multiplanarity – a
model for dependency structures in treebanks. In
Joakim Nivre and Erhard Hinrichs, editors, TLT
2003. Proceedings of the Second Workshop on Tree-
banks and Linguistic Theories, volume 9 of Mathe-
matical Modelling in Physics, Engineering and Cog-
nitive Sciences, pages 189–200, V¨axj¨o, Sweden, 14-
15 November. V¨axj¨o University Press.
</reference>
<page confidence="0.99186">
1501
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.160347">
<title confidence="0.999795">A Transition-Based Parser for 2-Planar Dependency Structures</title>
<author confidence="0.982363">Carlos G´omez-Rodriguez Joakim Nivre</author>
<affiliation confidence="0.574605">Departamento de Computaci´on Department of Linguistics and Philology</affiliation>
<address confidence="0.226104">da Spain Uppsala University, Sweden</address>
<email confidence="0.519731">carlos.gomez@udc.esjoakim.nivre@lingfil.uu.se</email>
<abstract confidence="0.994552055555556">Finding a class of structures that is rich enough for adequate linguistic representation yet restricted enough for efficient computational processing is an important problem for dependency parsing. In this paper, we present a transition system for 2-planar dependency trees – trees that can be decomposed into at most two planar graphs – and show that it can be used to implement a classifier-based parser that runs in linear time and outperforms a stateof-the-art transition-based parser on four data sets from the CoNLL-X shared task. In addition, we present an efficient method for determining whether an arbitrary tree is 2-planar and show that 99% or more of the trees in existing treebanks are 2-planar.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Susana Afonso</author>
<author>Eckhard Bick</author>
<author>Renato Haber</author>
<author>Diana Santos</author>
</authors>
<title>Floresta sint´a(c)tica”: a treebank for Portuguese.</title>
<date>2002</date>
<booktitle>In Proceedings of the 3rd International Conference on Language Resources and Evaluation (LREC</booktitle>
<pages>1968--1703</pages>
<location>Paris, France. ELRA.</location>
<contexts>
<context position="13707" citStr="Afonso et al., 2002" startWordPosition="2347" endWordPosition="2350">.61%) 10908 (27.56 %) 671 (1.70%) 0 (0.00%) 0 (0.00%) 419 (1.06%) Portuguese 9071 1718 (18.94%) 1713 (18.88 %) 8 (0.09%) 0 (0.00%) 0 (0.00%) 7 (0.08%) Swedish 6159 293 ( 4.76%) 280 ( 4.55 %) 5 (0.08%) 0 (0.00%) 0 (0.00%) 14 (0.23%) Turkish 5510 657 (11.92%) 657 (11.92 %) 10 (0.18%) 0 (0.00%) 0 (0.00%) 20 (0.36%) Table 1: Proportion of dependency trees classified by projectivity, planarity, m-planarity and illnestedness in treebanks for Arabic (Hajiˇc et al., 2004), Czech (Hajiˇc et al., 2006), Danish (Kromann, 2003), Dutch (van der Beek et al., 2002), German (Brants et al., 2002), Portuguese (Afonso et al., 2002), Swedish (Nilsson et al., 2005) and Turkish (Oflazer et al., 2003; Atalay et al., 2003). exists. Since this process can be completed by visiting each node and edge of the graph U once, its complexity is O(V + E). The crossings graph of a dependency graph with n nodes can trivially be built in time O(n2) by checking each pair of dependency links to determine if they cross, and cannot contain more than n2 edges, which means that we can check if the dependency graph for a sentence of length n is 2-planar in O(n2) time. For k &gt; 2, the k-colouring problem is known to be NP-complete (Karp, 1972). H</context>
</contexts>
<marker>Afonso, Bick, Haber, Santos, 2002</marker>
<rawString>Susana Afonso, Eckhard Bick, Renato Haber, and Diana Santos. 2002. “Floresta sint´a(c)tica”: a treebank for Portuguese. In Proceedings of the 3rd International Conference on Language Resources and Evaluation (LREC 2002), pages 1968–1703, Paris, France. ELRA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nart B Atalay</author>
<author>Kemal Oflazer</author>
<author>Bilge Say</author>
</authors>
<title>The annotation process in the Turkish treebank.</title>
<date>2003</date>
<booktitle>In Proceedings of EACL Workshop on Linguistically Interpreted Corpora (LINC-03),</booktitle>
<pages>243--246</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Morristown, NJ, USA.</location>
<contexts>
<context position="13795" citStr="Atalay et al., 2003" startWordPosition="2362" endWordPosition="2365">18.94%) 1713 (18.88 %) 8 (0.09%) 0 (0.00%) 0 (0.00%) 7 (0.08%) Swedish 6159 293 ( 4.76%) 280 ( 4.55 %) 5 (0.08%) 0 (0.00%) 0 (0.00%) 14 (0.23%) Turkish 5510 657 (11.92%) 657 (11.92 %) 10 (0.18%) 0 (0.00%) 0 (0.00%) 20 (0.36%) Table 1: Proportion of dependency trees classified by projectivity, planarity, m-planarity and illnestedness in treebanks for Arabic (Hajiˇc et al., 2004), Czech (Hajiˇc et al., 2006), Danish (Kromann, 2003), Dutch (van der Beek et al., 2002), German (Brants et al., 2002), Portuguese (Afonso et al., 2002), Swedish (Nilsson et al., 2005) and Turkish (Oflazer et al., 2003; Atalay et al., 2003). exists. Since this process can be completed by visiting each node and edge of the graph U once, its complexity is O(V + E). The crossings graph of a dependency graph with n nodes can trivially be built in time O(n2) by checking each pair of dependency links to determine if they cross, and cannot contain more than n2 edges, which means that we can check if the dependency graph for a sentence of length n is 2-planar in O(n2) time. For k &gt; 2, the k-colouring problem is known to be NP-complete (Karp, 1972). However, we have found this not to be a problem when measuring multiplanarity in natural </context>
</contexts>
<marker>Atalay, Oflazer, Say, 2003</marker>
<rawString>Nart B. Atalay, Kemal Oflazer, and Bilge Say. 2003. The annotation process in the Turkish treebank. In Proceedings of EACL Workshop on Linguistically Interpreted Corpora (LINC-03), pages 243– 246, Morristown, NJ, USA. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Leonoor van der Beek</author>
<author>Gosse Bouma</author>
<author>Robert Malouf</author>
<author>Gertjan van Noord</author>
</authors>
<title>The Alpino dependency treebank.</title>
<date>2002</date>
<booktitle>In Language and Computers, Computational Linguistics in the Netherlands 2001. Selected Papers from the Twelfth CLIN Meeting,</booktitle>
<pages>8--22</pages>
<location>Amsterdam, the Netherlands. Rodopi.</location>
<marker>van der Beek, Bouma, Malouf, van Noord, 2002</marker>
<rawString>Leonoor van der Beek, Gosse Bouma, Robert Malouf, and Gertjan van Noord. 2002. The Alpino dependency treebank. In Language and Computers, Computational Linguistics in the Netherlands 2001. Selected Papers from the Twelfth CLIN Meeting, pages 8–22, Amsterdam, the Netherlands. Rodopi.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Manuel Bodirsky</author>
<author>Marco Kuhlmann</author>
<author>Mathias M¨ohl</author>
</authors>
<title>Well-nested drawings as models of syntactic structure.</title>
<date>2005</date>
<booktitle>In 10th Conference on Formal Grammar and 9th Meeting on Mathematics of Language,</booktitle>
<location>Edinburgh, Scotland, UK.</location>
<marker>Bodirsky, Kuhlmann, M¨ohl, 2005</marker>
<rawString>Manuel Bodirsky, Marco Kuhlmann, and Mathias M¨ohl. 2005. Well-nested drawings as models of syntactic structure. In 10th Conference on Formal Grammar and 9th Meeting on Mathematics of Language, Edinburgh, Scotland, UK.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sabine Brants</author>
<author>Stefanie Dipper</author>
<author>Silvia Hansen</author>
<author>Wolfgang Lezius</author>
<author>George Smith</author>
</authors>
<title>The tiger treebank.</title>
<date>2002</date>
<booktitle>In Proceedings of the Workshop on Treebanks and Linguistic Theories,</booktitle>
<location>Sozopol, Bulgaria.</location>
<contexts>
<context position="13673" citStr="Brants et al., 2002" startWordPosition="2342" endWordPosition="2345"> 15 (0.11%) German 39573 10927 (27.61%) 10908 (27.56 %) 671 (1.70%) 0 (0.00%) 0 (0.00%) 419 (1.06%) Portuguese 9071 1718 (18.94%) 1713 (18.88 %) 8 (0.09%) 0 (0.00%) 0 (0.00%) 7 (0.08%) Swedish 6159 293 ( 4.76%) 280 ( 4.55 %) 5 (0.08%) 0 (0.00%) 0 (0.00%) 14 (0.23%) Turkish 5510 657 (11.92%) 657 (11.92 %) 10 (0.18%) 0 (0.00%) 0 (0.00%) 20 (0.36%) Table 1: Proportion of dependency trees classified by projectivity, planarity, m-planarity and illnestedness in treebanks for Arabic (Hajiˇc et al., 2004), Czech (Hajiˇc et al., 2006), Danish (Kromann, 2003), Dutch (van der Beek et al., 2002), German (Brants et al., 2002), Portuguese (Afonso et al., 2002), Swedish (Nilsson et al., 2005) and Turkish (Oflazer et al., 2003; Atalay et al., 2003). exists. Since this process can be completed by visiting each node and edge of the graph U once, its complexity is O(V + E). The crossings graph of a dependency graph with n nodes can trivially be built in time O(n2) by checking each pair of dependency links to determine if they cross, and cannot contain more than n2 edges, which means that we can check if the dependency graph for a sentence of length n is 2-planar in O(n2) time. For k &gt; 2, the k-colouring problem is known</context>
</contexts>
<marker>Brants, Dipper, Hansen, Lezius, Smith, 2002</marker>
<rawString>Sabine Brants, Stefanie Dipper, Silvia Hansen, Wolfgang Lezius, and George Smith. 2002. The tiger treebank. In Proceedings of the Workshop on Treebanks and Linguistic Theories, September 20-21, Sozopol, Bulgaria.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Matthias Buch-Kromann</author>
</authors>
<title>Discontinuous Grammar: A Model of Human Parsing and Language Acquisition.</title>
<date>2006</date>
<tech>Ph.D. thesis,</tech>
<institution>Copenhagen Business School.</institution>
<marker>Buch-Kromann, 2006</marker>
<rawString>Matthias Buch-Kromann. 2006. Discontinuous Grammar: A Model of Human Parsing and Language Acquisition. Ph.D. thesis, Copenhagen Business School.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sabine Buchholz</author>
<author>Erwin Marsi</author>
</authors>
<title>CoNLLX shared task on multilingual dependency parsing.</title>
<date>2006</date>
<booktitle>In Proceedings of the 10th Conference on Computational Natural Language Learning (CoNLL),</booktitle>
<pages>149--164</pages>
<contexts>
<context position="3933" citStr="Buchholz and Marsi, 2006" startWordPosition="603" endWordPosition="606"> Secondly, we present a transition-based parsing algorithm for 2-planar dependency trees, developed in two steps. We begin by showing how the stack-based algorithm of Nivre (2003) can be generalized from projective to planar structures. We then extend the system by adding a second stack and show that the resulting system captures exactly the set of 2-planar structures. Although the contributions of this paper are mainly theoretical, we also present an empirical evaluation of the 2- planar parser, showing that it outperforms the projective parser on four data sets from the CoNLL-X shared task (Buchholz and Marsi, 2006). 1492 Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics, pages 1492–1501, Uppsala, Sweden, 11-16 July 2010. c�2010 Association for Computational Linguistics 2 Preliminaries 2.1 Dependency Graphs Let w = w1 ... wn bean input string.1 An interval (with endpoints i and j) of the string w is a set of the form [i, j] = {wk |i &lt; k &lt; j}. Definition 1. A dependency graph for w is a directed graph G = (V,,, E), where V� = [1, n] and E C V„ X V,,. We call an edge (wi, wj) in a dependency graph G a dependency link2 from wi to wj. We say that wi is the parent (or hea</context>
<context position="31184" citStr="Buchholz and Marsi, 2006" startWordPosition="5501" endWordPosition="5504">hen it is strictly needed to account for nonplanarity. Thus we use a more complex version of the oracle which performs a search in the crossings graph to check if a dependency link can be built on the plane of the active stack, and only performs a switch when this is not possible. This has proved to work well in practice, as will be observed in the results in the next section. 6 Empirical Evaluation In order to get a first estimate of the empirical accuracy that can be obtained with transition-based 2-planar parsing, we have evaluated the parser on four data sets from the CoNLL-X shared task (Buchholz and Marsi, 2006): Czech, Danish, German and Portuguese. As our baseline, we take the strictly projective arc-eager transition system proposed by Nivre (2003), as implemented in the freely available MaltParser system (Nivre et al., 2006a), with and without the pseudo-projective parsing technique for recovering non-projective dependencies (Nivre and Nilsson, 2005). For the two baseline systems, we use the parameter settings used by Nivre et al. (2006b) in the original shared task, where the pseudo-projective version of MaltParser was one of the two top performing systems (Buchholz and Marsi, 2006). For our 2- p</context>
</contexts>
<marker>Buchholz, Marsi, 2006</marker>
<rawString>Sabine Buchholz and Erwin Marsi. 2006. CoNLLX shared task on multilingual dependency parsing. In Proceedings of the 10th Conference on Computational Natural Language Learning (CoNLL), pages 149–164.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Chih-Chung Chang</author>
<author>Chih-Jen Lin</author>
</authors>
<title>LIBSVM: A Library for Support Vector Machines. Software available at http://www.csie.ntu.edu.tw/∼cjlin/libsvm.</title>
<date>2001</date>
<contexts>
<context position="31902" citStr="Chang and Lin, 2001" startWordPosition="5612" endWordPosition="5615"> transition system proposed by Nivre (2003), as implemented in the freely available MaltParser system (Nivre et al., 2006a), with and without the pseudo-projective parsing technique for recovering non-projective dependencies (Nivre and Nilsson, 2005). For the two baseline systems, we use the parameter settings used by Nivre et al. (2006b) in the original shared task, where the pseudo-projective version of MaltParser was one of the two top performing systems (Buchholz and Marsi, 2006). For our 2- planar parser, we use the same kernelized SVM classifiers as MaltParser, using the LIBSVM package (Chang and Lin, 2001), with feature models that are similar to MaltParser but extended with features defined over the second stack.7 In Table 2, we report labeled (LAS) and unlabeled (UAS) attachment score on the four languages for all three systems. For the two systems that are capable of recovering non-projective de7Complete information about experimental settings can be found at http://stp.lingfil.uu.se/ nivre/exp/. pendencies, we also report precision (NPP) and recall (NPR) specifically on non-projective dependency arcs. The results show that the 2-planar parser outperforms the strictly projective variant of M</context>
</contexts>
<marker>Chang, Lin, 2001</marker>
<rawString>Chih-Chung Chang and Chih-Jen Lin, 2001. LIBSVM: A Library for Support Vector Machines. Software available at http://www.csie.ntu.edu.tw/∼cjlin/libsvm.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jason Eisner</author>
</authors>
<title>Three new probabilistic models for dependency parsing: An exploration.</title>
<date>1996</date>
<booktitle>In Proceedings of the 16th International Conference on Computational Linguistics (COLING-96),</booktitle>
<pages>340--345</pages>
<publisher>ACL / Morgan Kaufmann.</publisher>
<location>San Francisco, CA, USA,</location>
<contexts>
<context position="7065" citStr="Eisner, 1996" startWordPosition="1179" endWordPosition="1180">he experimental evaluation. Definition 3. A dependency forest G for a string w1 ... wn is projective iff Lwil is an interval for every word wi E [1, n]. Projective dependency trees correspond to the set of structures that can be induced from lexicalised context-free derivations (Kuhlmann, 2007; Gaifman, 1965). Like context-free grammars, projective dependency trees are not sufficient to represent all the linguistic phenomena observed in natural languages, but they have the advantage of being efficiently parsable: their parsing problem can be solved in cubic time with chart parsing techniques (Eisner, 1996; G´omez-Rodr´ıguez et al., 2008), while in the case of general non-projective dependency forests, it is only tractable under strong independence assumptions (McDonald et al., 2005b; McDonald and Satta, 2007). 2.3 Planarity The concept of planarity (Sleator and Temperley, 1993) is closely related to projectivity3 and can be informally defined as the property of a dependency forest whose links can be drawn above the words without crossing.4 To define planarity more formally, we first define crossing links as follows: let (wi, wk) and (wj, wl) be dependency links in a dependency graph G. Without</context>
</contexts>
<marker>Eisner, 1996</marker>
<rawString>Jason Eisner. 1996. Three new probabilistic models for dependency parsing: An exploration. In Proceedings of the 16th International Conference on Computational Linguistics (COLING-96), pages 340–345, San Francisco, CA, USA, August. ACL / Morgan Kaufmann.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Haim Gaifman</author>
</authors>
<title>Dependency systems and phrase-structure systems.</title>
<date>1965</date>
<journal>Information and Control,</journal>
<pages>8--304</pages>
<contexts>
<context position="6763" citStr="Gaifman, 1965" startWordPosition="1132" endWordPosition="1134">rminal symbol with its position in the input. 2In practice, dependency links are usually labeled, but to simplify the presentation we will ignore labels throughout most of the paper. However, all the results and algorithms presented can be applied to labeled dependency graphs and will be so applied in the experimental evaluation. Definition 3. A dependency forest G for a string w1 ... wn is projective iff Lwil is an interval for every word wi E [1, n]. Projective dependency trees correspond to the set of structures that can be induced from lexicalised context-free derivations (Kuhlmann, 2007; Gaifman, 1965). Like context-free grammars, projective dependency trees are not sufficient to represent all the linguistic phenomena observed in natural languages, but they have the advantage of being efficiently parsable: their parsing problem can be solved in cubic time with chart parsing techniques (Eisner, 1996; G´omez-Rodr´ıguez et al., 2008), while in the case of general non-projective dependency forests, it is only tractable under strong independence assumptions (McDonald et al., 2005b; McDonald and Satta, 2007). 2.3 Planarity The concept of planarity (Sleator and Temperley, 1993) is closely related </context>
</contexts>
<marker>Gaifman, 1965</marker>
<rawString>Haim Gaifman. 1965. Dependency systems and phrase-structure systems. Information and Control, 8:304–337.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Carlos G´omez-Rodr´ıguez</author>
<author>John Carroll</author>
<author>David Weir</author>
</authors>
<title>A deductive approach to dependency parsing.</title>
<date>2008</date>
<booktitle>In Proceedings of the 46th Annual Meeting of the Association for Computational Linguistics: Human Language Technologies (ACL’08:HLT),</booktitle>
<pages>968--976</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Morristown, NJ, USA.</location>
<marker>G´omez-Rodr´ıguez, Carroll, Weir, 2008</marker>
<rawString>Carlos G´omez-Rodr´ıguez, John Carroll, and David Weir. 2008. A deductive approach to dependency parsing. In Proceedings of the 46th Annual Meeting of the Association for Computational Linguistics: Human Language Technologies (ACL’08:HLT), pages 968–976, Morristown, NJ, USA. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Carlos G´omez-Rodr´ıguez</author>
<author>David Weir</author>
<author>John Carroll</author>
</authors>
<title>Parsing mildly non-projective dependency structures.</title>
<date>2009</date>
<booktitle>In Proceedings of the 12th Conference of the European Chapter of the Association for Computational Linguistics (EACL),</booktitle>
<pages>291--299</pages>
<marker>G´omez-Rodr´ıguez, Weir, Carroll, 2009</marker>
<rawString>Carlos G´omez-Rodr´ıguez, David Weir, and John Carroll. 2009. Parsing mildly non-projective dependency structures. In Proceedings of the 12th Conference of the European Chapter of the Association for Computational Linguistics (EACL), pages 291– 299.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jan Hajiˇc</author>
<author>Otakar Smrˇz</author>
<author>Petr Zem´anek</author>
<author>Jan ˇSnaidauf</author>
<author>Emanuel Beˇska</author>
</authors>
<title>Prague Arabic dependency treebank: Development in data and tools.</title>
<date>2004</date>
<booktitle>In Proceedings of the NEMLAR International Conference on Arabic Language Resources and Tools,</booktitle>
<pages>110--117</pages>
<marker>Hajiˇc, Smrˇz, Zem´anek, ˇSnaidauf, Beˇska, 2004</marker>
<rawString>Jan Hajiˇc, Otakar Smrˇz, Petr Zem´anek, Jan ˇSnaidauf, and Emanuel Beˇska. 2004. Prague Arabic dependency treebank: Development in data and tools. In Proceedings of the NEMLAR International Conference on Arabic Language Resources and Tools, pages 110–117.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jan Hajiˇc</author>
<author>Jarmila Panevov´a</author>
<author>Eva Hajiˇcov´a</author>
<author>Jarmila Panevov´a</author>
<author>Petr Sgall</author>
<author>Petr Pajas</author>
<author>Jan ˇStˇep´anek</author>
<author>JiˇrfHavelka</author>
<author>Marie Mikulov´a</author>
</authors>
<date>2006</date>
<marker>Hajiˇc, Panevov´a, Hajiˇcov´a, Panevov´a, Sgall, Pajas, ˇStˇep´anek, JiˇrfHavelka, Mikulov´a, 2006</marker>
<rawString>Jan Hajiˇc, Jarmila Panevov´a, Eva Hajiˇcov´a, Jarmila Panevov´a, Petr Sgall, Petr Pajas, Jan ˇStˇep´anek, JiˇrfHavelka, and Marie Mikulov´a. 2006.</rawString>
</citation>
<citation valid="false">
<title>Treebank 2.0. CDROM CAT: LDC2006T01, ISBN 1-58563-370-4. Linguistic Data Consortium.</title>
<institution>Prague Dependency</institution>
<marker></marker>
<rawString>Prague Dependency Treebank 2.0. CDROM CAT: LDC2006T01, ISBN 1-58563-370-4. Linguistic Data Consortium.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jiri Havelka</author>
</authors>
<title>Beyond projectivity: Multilingual evaluation of constraints and measures on nonprojective structures.</title>
<date>2007</date>
<booktitle>In Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics,</booktitle>
<pages>608--615</pages>
<contexts>
<context position="2024" citStr="Havelka, 2007" startWordPosition="297" endWordPosition="298">em to be required for an adequate representation of predicate-argument structure, but which undermine the efficiency of dependency parsing (Neuhaus and Br¨oker, 1997; BuchKromann, 2006; McDonald and Satta, 2007). Caught between the Scylla of linguistically inadequate projective trees and the Charybdis of computationally intractable non-projective trees, some researchers have sought a middle ground by exploring classes of mildly non-projective dependency structures that strike a better balance between expressivity and complexity (Nivre, 2006; Kuhlmann and Nivre, 2006; Kuhlmann and M¨ohl, 2007; Havelka, 2007). Although these proposals seem to have a very good fit with linguistic data, in the sense that they often cover 99% or more of the structures found in existing treebanks, the development of efficient parsing algorithms for these classes has met with more limited success. For example, while both Kuhlmann and Satta (2009) and G´omez-Rodr´ıguez et al. (2009) have shown how well-nested dependency trees with bounded gap degree can be parsed in polynomial time, the best time complexity for lexicalized parsing of this class remains a prohibitive O(n7), which makes the practical usefulness questionab</context>
<context position="9832" citStr="Havelka (2007)" startWordPosition="1649" endWordPosition="1650">lanes with colours and say that a dependency graph G is m-planar if it is possible to assign one of m colours to each of its links in such a way that links with the same colour do not cross. Note that there may be multiple ways of dividing an m-planar graph into planes, as shown in the example of Figure 1. 3 Determining Multiplanarity Several constraints on non-projective dependency structures have been proposed recently that seek a good balance between parsing efficiency and coverage of non-projective phenomena present in natural language treebanks. For example, Kuhlmann and Nivre (2006) and Havelka (2007) have shown that the vast majority of structures present in existing treebanks are well-nested and have a small gap degree (Bodirsky et al., 2005), leading to an interest in parsers for these kinds of structures (G´omezRodr´ıguez et al., 2009). No similar analysis has been performed for m-planar structures, although Yli-Jyr¨a (2003) provides evidence that all except two structures in the Danish dependency treebank are at most 3-planar. However, his analysis is based on constraints that restrict the possible ways of assigning planes to dependency links, and he is not guaranteed to find the mini</context>
</contexts>
<marker>Havelka, 2007</marker>
<rawString>Jiri Havelka. 2007. Beyond projectivity: Multilingual evaluation of constraints and measures on nonprojective structures. In Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics, pages 608–615.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Richard M Karp</author>
</authors>
<title>Reducibility among combinatorial problems.</title>
<date>1972</date>
<journal>Complexity of Computer Computations,</journal>
<pages>85--103</pages>
<editor>In R. Miller and J. Thatcher, editors,</editor>
<publisher>Plenum Press.</publisher>
<contexts>
<context position="14304" citStr="Karp, 1972" startWordPosition="2463" endWordPosition="2464"> et al., 2002), Swedish (Nilsson et al., 2005) and Turkish (Oflazer et al., 2003; Atalay et al., 2003). exists. Since this process can be completed by visiting each node and edge of the graph U once, its complexity is O(V + E). The crossings graph of a dependency graph with n nodes can trivially be built in time O(n2) by checking each pair of dependency links to determine if they cross, and cannot contain more than n2 edges, which means that we can check if the dependency graph for a sentence of length n is 2-planar in O(n2) time. For k &gt; 2, the k-colouring problem is known to be NP-complete (Karp, 1972). However, we have found this not to be a problem when measuring multiplanarity in natural language treebanks, since the effective problem size can be reduced by noting that each connected component of the crossings graph can be treated separately, and that nodes that are not part of a cycle need not be considered.5 Given that non-projective sentences in natural language tend to have a small proportion of non-projective links (Nivre and Nilsson, 2005), the connected components of their crossings graphs are very small, and k-colourings for them can quickly be found by brute-force search. By app</context>
</contexts>
<marker>Karp, 1972</marker>
<rawString>Richard M. Karp. 1972. Reducibility among combinatorial problems. In R. Miller and J. Thatcher, editors, Complexity of Computer Computations, pages 85–103. Plenum Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Matthias T Kromann</author>
</authors>
<title>The Danish dependency treebank and the underlying linguistic theory.</title>
<date>2003</date>
<booktitle>In Proceedings of the 2nd Workshop on Treebanks and Linguistic Theories (TLT),</booktitle>
<pages>217--220</pages>
<publisher>V¨axj¨o University Press.</publisher>
<location>V¨axj¨o,</location>
<contexts>
<context position="13608" citStr="Kromann, 2003" startWordPosition="2332" endWordPosition="2333">865 (36.44%) 4115 (30.83 %) 162 (1.21%) 1 (0.01%) 0 (0.00%) 15 (0.11%) German 39573 10927 (27.61%) 10908 (27.56 %) 671 (1.70%) 0 (0.00%) 0 (0.00%) 419 (1.06%) Portuguese 9071 1718 (18.94%) 1713 (18.88 %) 8 (0.09%) 0 (0.00%) 0 (0.00%) 7 (0.08%) Swedish 6159 293 ( 4.76%) 280 ( 4.55 %) 5 (0.08%) 0 (0.00%) 0 (0.00%) 14 (0.23%) Turkish 5510 657 (11.92%) 657 (11.92 %) 10 (0.18%) 0 (0.00%) 0 (0.00%) 20 (0.36%) Table 1: Proportion of dependency trees classified by projectivity, planarity, m-planarity and illnestedness in treebanks for Arabic (Hajiˇc et al., 2004), Czech (Hajiˇc et al., 2006), Danish (Kromann, 2003), Dutch (van der Beek et al., 2002), German (Brants et al., 2002), Portuguese (Afonso et al., 2002), Swedish (Nilsson et al., 2005) and Turkish (Oflazer et al., 2003; Atalay et al., 2003). exists. Since this process can be completed by visiting each node and edge of the graph U once, its complexity is O(V + E). The crossings graph of a dependency graph with n nodes can trivially be built in time O(n2) by checking each pair of dependency links to determine if they cross, and cannot contain more than n2 edges, which means that we can check if the dependency graph for a sentence of length n is 2-</context>
</contexts>
<marker>Kromann, 2003</marker>
<rawString>Matthias T. Kromann. 2003. The Danish dependency treebank and the underlying linguistic theory. In Proceedings of the 2nd Workshop on Treebanks and Linguistic Theories (TLT), pages 217–220, V¨axj¨o, Sweden. V¨axj¨o University Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Marco Kuhlmann</author>
<author>Mathias M¨ohl</author>
</authors>
<title>Mildly context-sensitive dependency languages.</title>
<date>2007</date>
<booktitle>In Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics,</booktitle>
<pages>160--167</pages>
<marker>Kuhlmann, M¨ohl, 2007</marker>
<rawString>Marco Kuhlmann and Mathias M¨ohl. 2007. Mildly context-sensitive dependency languages. In Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics, pages 160–167.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Marco Kuhlmann</author>
<author>Joakim Nivre</author>
</authors>
<title>Mildly non-projective dependency structures.</title>
<date>2006</date>
<booktitle>In Proceedings of the COLING/ACL 2006 Main Conference Poster Sessions,</booktitle>
<pages>507--514</pages>
<contexts>
<context position="1982" citStr="Kuhlmann and Nivre, 2006" startWordPosition="289" endWordPosition="292">eatment of non-projective dependency trees, which seem to be required for an adequate representation of predicate-argument structure, but which undermine the efficiency of dependency parsing (Neuhaus and Br¨oker, 1997; BuchKromann, 2006; McDonald and Satta, 2007). Caught between the Scylla of linguistically inadequate projective trees and the Charybdis of computationally intractable non-projective trees, some researchers have sought a middle ground by exploring classes of mildly non-projective dependency structures that strike a better balance between expressivity and complexity (Nivre, 2006; Kuhlmann and Nivre, 2006; Kuhlmann and M¨ohl, 2007; Havelka, 2007). Although these proposals seem to have a very good fit with linguistic data, in the sense that they often cover 99% or more of the structures found in existing treebanks, the development of efficient parsing algorithms for these classes has met with more limited success. For example, while both Kuhlmann and Satta (2009) and G´omez-Rodr´ıguez et al. (2009) have shown how well-nested dependency trees with bounded gap degree can be parsed in polynomial time, the best time complexity for lexicalized parsing of this class remains a prohibitive O(n7), which</context>
<context position="8115" citStr="Kuhlmann and Nivre (2006)" startWordPosition="1357" endWordPosition="1360">without crossing.4 To define planarity more formally, we first define crossing links as follows: let (wi, wk) and (wj, wl) be dependency links in a dependency graph G. Without loss of generality, we assume that min(i, k) &lt; min(j, l). Then, the links are said to be crossing if min(i, k) &lt; min(j, l) &lt; max(i, k) &lt; max(j, l). Definition 4. A dependency graph is planar iff it does not contain a pair of crossing links. 2.4 Multiplanarity The concept of planarity on its own does not seem to be very relevant as an extension of projectivity for practical dependency parsing. According to the results by Kuhlmann and Nivre (2006), most non-projective structures in dependency treebanks are also non-planar, so being able to parse planar structures will only give us a modest improvement in coverage with respect to a projective parser. However, our interest in planarity is motivated by the fact that it can be generalised to multiplanarity (Yli-Jyr¨a, 2003): 3For dependency forests that are extended with a unique artificial root located at position 0, as is commonly done, the two notions are equivalent. 4Planarity in the context of dependency structures is not to be confused with the homonymous concept in graph theory, whi</context>
<context position="9813" citStr="Kuhlmann and Nivre (2006)" startWordPosition="1644" endWordPosition="1647">ntuitively, we can associate planes with colours and say that a dependency graph G is m-planar if it is possible to assign one of m colours to each of its links in such a way that links with the same colour do not cross. Note that there may be multiple ways of dividing an m-planar graph into planes, as shown in the example of Figure 1. 3 Determining Multiplanarity Several constraints on non-projective dependency structures have been proposed recently that seek a good balance between parsing efficiency and coverage of non-projective phenomena present in natural language treebanks. For example, Kuhlmann and Nivre (2006) and Havelka (2007) have shown that the vast majority of structures present in existing treebanks are well-nested and have a small gap degree (Bodirsky et al., 2005), leading to an interest in parsers for these kinds of structures (G´omezRodr´ıguez et al., 2009). No similar analysis has been performed for m-planar structures, although Yli-Jyr¨a (2003) provides evidence that all except two structures in the Danish dependency treebank are at most 3-planar. However, his analysis is based on constraints that restrict the possible ways of assigning planes to dependency links, and he is not guarante</context>
</contexts>
<marker>Kuhlmann, Nivre, 2006</marker>
<rawString>Marco Kuhlmann and Joakim Nivre. 2006. Mildly non-projective dependency structures. In Proceedings of the COLING/ACL 2006 Main Conference Poster Sessions, pages 507–514.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Marco Kuhlmann</author>
<author>Giorgio Satta</author>
</authors>
<title>Treebank grammar techniques for non-projective dependency parsing.</title>
<date>2009</date>
<booktitle>In Proceedings of the 12th Conference of the European Chapter of the Association for Computational Linguistics (EACL),</booktitle>
<pages>478--486</pages>
<contexts>
<context position="2346" citStr="Kuhlmann and Satta (2009)" startWordPosition="349" endWordPosition="352">tationally intractable non-projective trees, some researchers have sought a middle ground by exploring classes of mildly non-projective dependency structures that strike a better balance between expressivity and complexity (Nivre, 2006; Kuhlmann and Nivre, 2006; Kuhlmann and M¨ohl, 2007; Havelka, 2007). Although these proposals seem to have a very good fit with linguistic data, in the sense that they often cover 99% or more of the structures found in existing treebanks, the development of efficient parsing algorithms for these classes has met with more limited success. For example, while both Kuhlmann and Satta (2009) and G´omez-Rodr´ıguez et al. (2009) have shown how well-nested dependency trees with bounded gap degree can be parsed in polynomial time, the best time complexity for lexicalized parsing of this class remains a prohibitive O(n7), which makes the practical usefulness questionable. In this paper, we explore another characterization of mildly non-projective dependency trees based on the notion of multiplanarity. This was originally proposed by Yli-Jyr¨a (2003) but has so far played a marginal role in the dependency parsing literature, because no algorithm was known for determining whether an arb</context>
</contexts>
<marker>Kuhlmann, Satta, 2009</marker>
<rawString>Marco Kuhlmann and Giorgio Satta. 2009. Treebank grammar techniques for non-projective dependency parsing. In Proceedings of the 12th Conference of the European Chapter of the Association for Computational Linguistics (EACL), pages 478–486.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Marco Kuhlmann</author>
</authors>
<title>Dependency Structures and Lexicalized Grammars. Doctoral dissertation,</title>
<date>2007</date>
<institution>Saarland University,</institution>
<location>Saarbr¨ucken, Germany.</location>
<contexts>
<context position="6747" citStr="Kuhlmann, 2007" startWordPosition="1130" endWordPosition="1131">notating each terminal symbol with its position in the input. 2In practice, dependency links are usually labeled, but to simplify the presentation we will ignore labels throughout most of the paper. However, all the results and algorithms presented can be applied to labeled dependency graphs and will be so applied in the experimental evaluation. Definition 3. A dependency forest G for a string w1 ... wn is projective iff Lwil is an interval for every word wi E [1, n]. Projective dependency trees correspond to the set of structures that can be induced from lexicalised context-free derivations (Kuhlmann, 2007; Gaifman, 1965). Like context-free grammars, projective dependency trees are not sufficient to represent all the linguistic phenomena observed in natural languages, but they have the advantage of being efficiently parsable: their parsing problem can be solved in cubic time with chart parsing techniques (Eisner, 1996; G´omez-Rodr´ıguez et al., 2008), while in the case of general non-projective dependency forests, it is only tractable under strong independence assumptions (McDonald et al., 2005b; McDonald and Satta, 2007). 2.3 Planarity The concept of planarity (Sleator and Temperley, 1993) is </context>
</contexts>
<marker>Kuhlmann, 2007</marker>
<rawString>Marco Kuhlmann. 2007. Dependency Structures and Lexicalized Grammars. Doctoral dissertation, Saarland University, Saarbr¨ucken, Germany.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Andre Martins</author>
<author>Noah Smith</author>
<author>Eric Xing</author>
</authors>
<title>Concise integer linear programming formulations for dependency parsing.</title>
<date>2009</date>
<booktitle>In Proceedings of the Joint Conference of the 47th Annual Meeting of the ACL and the 4th International Joint Conference on Natural Language Processing of the AFNLP (ACLIJCNLP),</booktitle>
<pages>342--350</pages>
<contexts>
<context position="1298" citStr="Martins et al., 2009" startWordPosition="188" endWordPosition="191">ed parser that runs in linear time and outperforms a stateof-the-art transition-based parser on four data sets from the CoNLL-X shared task. In addition, we present an efficient method for determining whether an arbitrary tree is 2-planar and show that 99% or more of the trees in existing treebanks are 2-planar. 1 Introduction Dependency-based syntactic parsing has become a widely used technique in natural language processing, and many different parsing models have been proposed in recent years (Yamada and Matsumoto, 2003; Nivre et al., 2004; McDonald et al., 2005a; Titov and Henderson, 2007; Martins et al., 2009). One of the unresolved issues in this area is the proper treatment of non-projective dependency trees, which seem to be required for an adequate representation of predicate-argument structure, but which undermine the efficiency of dependency parsing (Neuhaus and Br¨oker, 1997; BuchKromann, 2006; McDonald and Satta, 2007). Caught between the Scylla of linguistically inadequate projective trees and the Charybdis of computationally intractable non-projective trees, some researchers have sought a middle ground by exploring classes of mildly non-projective dependency structures that strike a bette</context>
</contexts>
<marker>Martins, Smith, Xing, 2009</marker>
<rawString>Andre Martins, Noah Smith, and Eric Xing. 2009. Concise integer linear programming formulations for dependency parsing. In Proceedings of the Joint Conference of the 47th Annual Meeting of the ACL and the 4th International Joint Conference on Natural Language Processing of the AFNLP (ACLIJCNLP), pages 342–350.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ryan McDonald</author>
<author>Giorgio Satta</author>
</authors>
<title>On the complexity of non-projective data-driven dependency parsing.</title>
<date>2007</date>
<booktitle>In Proceedings of the 10th International Conference on Parsing Technologies (IWPT),</booktitle>
<pages>122--131</pages>
<contexts>
<context position="1621" citStr="McDonald and Satta, 2007" startWordPosition="239" endWordPosition="242">roduction Dependency-based syntactic parsing has become a widely used technique in natural language processing, and many different parsing models have been proposed in recent years (Yamada and Matsumoto, 2003; Nivre et al., 2004; McDonald et al., 2005a; Titov and Henderson, 2007; Martins et al., 2009). One of the unresolved issues in this area is the proper treatment of non-projective dependency trees, which seem to be required for an adequate representation of predicate-argument structure, but which undermine the efficiency of dependency parsing (Neuhaus and Br¨oker, 1997; BuchKromann, 2006; McDonald and Satta, 2007). Caught between the Scylla of linguistically inadequate projective trees and the Charybdis of computationally intractable non-projective trees, some researchers have sought a middle ground by exploring classes of mildly non-projective dependency structures that strike a better balance between expressivity and complexity (Nivre, 2006; Kuhlmann and Nivre, 2006; Kuhlmann and M¨ohl, 2007; Havelka, 2007). Although these proposals seem to have a very good fit with linguistic data, in the sense that they often cover 99% or more of the structures found in existing treebanks, the development of effici</context>
<context position="7273" citStr="McDonald and Satta, 2007" startWordPosition="1208" endWordPosition="1211">the set of structures that can be induced from lexicalised context-free derivations (Kuhlmann, 2007; Gaifman, 1965). Like context-free grammars, projective dependency trees are not sufficient to represent all the linguistic phenomena observed in natural languages, but they have the advantage of being efficiently parsable: their parsing problem can be solved in cubic time with chart parsing techniques (Eisner, 1996; G´omez-Rodr´ıguez et al., 2008), while in the case of general non-projective dependency forests, it is only tractable under strong independence assumptions (McDonald et al., 2005b; McDonald and Satta, 2007). 2.3 Planarity The concept of planarity (Sleator and Temperley, 1993) is closely related to projectivity3 and can be informally defined as the property of a dependency forest whose links can be drawn above the words without crossing.4 To define planarity more formally, we first define crossing links as follows: let (wi, wk) and (wj, wl) be dependency links in a dependency graph G. Without loss of generality, we assume that min(i, k) &lt; min(j, l). Then, the links are said to be crossing if min(i, k) &lt; min(j, l) &lt; max(i, k) &lt; max(j, l). Definition 4. A dependency graph is planar iff it does not </context>
</contexts>
<marker>McDonald, Satta, 2007</marker>
<rawString>Ryan McDonald and Giorgio Satta. 2007. On the complexity of non-projective data-driven dependency parsing. In Proceedings of the 10th International Conference on Parsing Technologies (IWPT), pages 122–131.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ryan McDonald</author>
<author>Koby Crammer</author>
<author>Fernando Pereira</author>
</authors>
<title>Online large-margin training of dependency parsers.</title>
<date>2005</date>
<booktitle>In Proceedings of the 43rd Annual Meeting of the Association for Computational Linguistics (ACL),</booktitle>
<pages>91--98</pages>
<contexts>
<context position="1247" citStr="McDonald et al., 2005" startWordPosition="180" endWordPosition="183">w that it can be used to implement a classifier-based parser that runs in linear time and outperforms a stateof-the-art transition-based parser on four data sets from the CoNLL-X shared task. In addition, we present an efficient method for determining whether an arbitrary tree is 2-planar and show that 99% or more of the trees in existing treebanks are 2-planar. 1 Introduction Dependency-based syntactic parsing has become a widely used technique in natural language processing, and many different parsing models have been proposed in recent years (Yamada and Matsumoto, 2003; Nivre et al., 2004; McDonald et al., 2005a; Titov and Henderson, 2007; Martins et al., 2009). One of the unresolved issues in this area is the proper treatment of non-projective dependency trees, which seem to be required for an adequate representation of predicate-argument structure, but which undermine the efficiency of dependency parsing (Neuhaus and Br¨oker, 1997; BuchKromann, 2006; McDonald and Satta, 2007). Caught between the Scylla of linguistically inadequate projective trees and the Charybdis of computationally intractable non-projective trees, some researchers have sought a middle ground by exploring classes of mildly non-p</context>
<context position="7245" citStr="McDonald et al., 2005" startWordPosition="1204" endWordPosition="1207">ncy trees correspond to the set of structures that can be induced from lexicalised context-free derivations (Kuhlmann, 2007; Gaifman, 1965). Like context-free grammars, projective dependency trees are not sufficient to represent all the linguistic phenomena observed in natural languages, but they have the advantage of being efficiently parsable: their parsing problem can be solved in cubic time with chart parsing techniques (Eisner, 1996; G´omez-Rodr´ıguez et al., 2008), while in the case of general non-projective dependency forests, it is only tractable under strong independence assumptions (McDonald et al., 2005b; McDonald and Satta, 2007). 2.3 Planarity The concept of planarity (Sleator and Temperley, 1993) is closely related to projectivity3 and can be informally defined as the property of a dependency forest whose links can be drawn above the words without crossing.4 To define planarity more formally, we first define crossing links as follows: let (wi, wk) and (wj, wl) be dependency links in a dependency graph G. Without loss of generality, we assume that min(i, k) &lt; min(j, l). Then, the links are said to be crossing if min(i, k) &lt; min(j, l) &lt; max(i, k) &lt; max(j, l). Definition 4. A dependency grap</context>
</contexts>
<marker>McDonald, Crammer, Pereira, 2005</marker>
<rawString>Ryan McDonald, Koby Crammer, and Fernando Pereira. 2005a. Online large-margin training of dependency parsers. In Proceedings of the 43rd Annual Meeting of the Association for Computational Linguistics (ACL), pages 91–98.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ryan McDonald</author>
<author>Fernando Pereira</author>
<author>Kiril Ribarov</author>
<author>Jan Hajiˇc</author>
</authors>
<title>Non-projective dependency parsing using spanning tree algorithms.</title>
<date>2005</date>
<booktitle>In HLT/EMNLP 2005: Proceedings of the conference on Human Language Technology and Empirical Methods in Natural Language Processing,</booktitle>
<pages>523--530</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Morristown, NJ, USA.</location>
<marker>McDonald, Pereira, Ribarov, Hajiˇc, 2005</marker>
<rawString>Ryan McDonald, Fernando Pereira, Kiril Ribarov, and Jan Hajiˇc. 2005b. Non-projective dependency parsing using spanning tree algorithms. In HLT/EMNLP 2005: Proceedings of the conference on Human Language Technology and Empirical Methods in Natural Language Processing, pages 523–530, Morristown, NJ, USA. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Peter Neuhaus</author>
<author>Norbert Br¨oker</author>
</authors>
<title>The complexity of recognition of linguistically adequate dependency grammars.</title>
<date>1997</date>
<booktitle>In Proceedings of the 35th Annual Meeting of the Association for Computational Linguistics (ACL) and the 8th Conference of the European Chapter of the Association for Computational Linguistics (EACL),</booktitle>
<pages>337--343</pages>
<marker>Neuhaus, Br¨oker, 1997</marker>
<rawString>Peter Neuhaus and Norbert Br¨oker. 1997. The complexity of recognition of linguistically adequate dependency grammars. In Proceedings of the 35th Annual Meeting of the Association for Computational Linguistics (ACL) and the 8th Conference of the European Chapter of the Association for Computational Linguistics (EACL), pages 337–343.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jens Nilsson</author>
<author>Johan Hall</author>
<author>Joakim Nivre</author>
</authors>
<title>MAMBA meets TIGER: Reconstructing a Swedish treebank from antiquity.</title>
<date>2005</date>
<booktitle>In Proceedings of NODALIDA 2005 Special Session on Treebanks,</booktitle>
<pages>119--132</pages>
<location>Samfundslitteratur, Frederiksberg, Denmark,</location>
<contexts>
<context position="13739" citStr="Nilsson et al., 2005" startWordPosition="2352" endWordPosition="2355">%) 0 (0.00%) 0 (0.00%) 419 (1.06%) Portuguese 9071 1718 (18.94%) 1713 (18.88 %) 8 (0.09%) 0 (0.00%) 0 (0.00%) 7 (0.08%) Swedish 6159 293 ( 4.76%) 280 ( 4.55 %) 5 (0.08%) 0 (0.00%) 0 (0.00%) 14 (0.23%) Turkish 5510 657 (11.92%) 657 (11.92 %) 10 (0.18%) 0 (0.00%) 0 (0.00%) 20 (0.36%) Table 1: Proportion of dependency trees classified by projectivity, planarity, m-planarity and illnestedness in treebanks for Arabic (Hajiˇc et al., 2004), Czech (Hajiˇc et al., 2006), Danish (Kromann, 2003), Dutch (van der Beek et al., 2002), German (Brants et al., 2002), Portuguese (Afonso et al., 2002), Swedish (Nilsson et al., 2005) and Turkish (Oflazer et al., 2003; Atalay et al., 2003). exists. Since this process can be completed by visiting each node and edge of the graph U once, its complexity is O(V + E). The crossings graph of a dependency graph with n nodes can trivially be built in time O(n2) by checking each pair of dependency links to determine if they cross, and cannot contain more than n2 edges, which means that we can check if the dependency graph for a sentence of length n is 2-planar in O(n2) time. For k &gt; 2, the k-colouring problem is known to be NP-complete (Karp, 1972). However, we have found this not t</context>
</contexts>
<marker>Nilsson, Hall, Nivre, 2005</marker>
<rawString>Jens Nilsson, Johan Hall, and Joakim Nivre. 2005. MAMBA meets TIGER: Reconstructing a Swedish treebank from antiquity. In Proceedings of NODALIDA 2005 Special Session on Treebanks, pages 119– 132. Samfundslitteratur, Frederiksberg, Denmark, May.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Joakim Nivre</author>
<author>Jens Nilsson</author>
</authors>
<title>Pseudoprojective dependency parsing.</title>
<date>2005</date>
<booktitle>In ACL ’05: Proceedings of the 43rd Annual Meeting of the Association for Computational Linguistics,</booktitle>
<pages>99--106</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Morristown, NJ, USA.</location>
<contexts>
<context position="14759" citStr="Nivre and Nilsson, 2005" startWordPosition="2536" endWordPosition="2539">hat we can check if the dependency graph for a sentence of length n is 2-planar in O(n2) time. For k &gt; 2, the k-colouring problem is known to be NP-complete (Karp, 1972). However, we have found this not to be a problem when measuring multiplanarity in natural language treebanks, since the effective problem size can be reduced by noting that each connected component of the crossings graph can be treated separately, and that nodes that are not part of a cycle need not be considered.5 Given that non-projective sentences in natural language tend to have a small proportion of non-projective links (Nivre and Nilsson, 2005), the connected components of their crossings graphs are very small, and k-colourings for them can quickly be found by brute-force search. By applying these techniques to dependency treebanks of several languages, we obtain the data shown in Table 1. As we can see, the coverage provided by the 2-planarity constraint is comparable to that of well-nestedness. In most of the treebanks, well over 99% of the sentences are 2- planar, and 3-planarity has almost total coverage. As we will see below, the class of 2-planar dependency structures not only has good coverage of linguistic phenomena in exist</context>
<context position="31532" citStr="Nivre and Nilsson, 2005" startWordPosition="5549" endWordPosition="5552">e results in the next section. 6 Empirical Evaluation In order to get a first estimate of the empirical accuracy that can be obtained with transition-based 2-planar parsing, we have evaluated the parser on four data sets from the CoNLL-X shared task (Buchholz and Marsi, 2006): Czech, Danish, German and Portuguese. As our baseline, we take the strictly projective arc-eager transition system proposed by Nivre (2003), as implemented in the freely available MaltParser system (Nivre et al., 2006a), with and without the pseudo-projective parsing technique for recovering non-projective dependencies (Nivre and Nilsson, 2005). For the two baseline systems, we use the parameter settings used by Nivre et al. (2006b) in the original shared task, where the pseudo-projective version of MaltParser was one of the two top performing systems (Buchholz and Marsi, 2006). For our 2- planar parser, we use the same kernelized SVM classifiers as MaltParser, using the LIBSVM package (Chang and Lin, 2001), with feature models that are similar to MaltParser but extended with features defined over the second stack.7 In Table 2, we report labeled (LAS) and unlabeled (UAS) attachment score on the four languages for all three systems. </context>
<context position="33259" citStr="Nivre and Nilsson, 2005" startWordPosition="5824" endWordPosition="5827">all attachment score and precision and recall on nonprojective dependencies. These results look very promising in view of the fact that very little effort has been spent on optimizing the training oracle and feature model for the 2-planar parser so far. It is worth mentioning that the 2-planar parser has two advantages over the pseudo-projective parser. The first is simplicity, given that it is based on a single transition system and makes a single pass over the input, whereas the pseudo-projective parsing technique involves preprocessing of training data and post-processing of parser output (Nivre and Nilsson, 2005). The second is the fact that it parses a well-defined class of dependency structures, with known coverage8, whereas no formal characterization exists of the class of structures parsable by the pseudo-projective parser. 7 Conclusion In this paper, we have presented an efficient algorithm for deciding whether a dependency graph is 2-planar and a transition-based parsing algorithm that is provably correct for 2-planar dependency forests, neither of which existed in the literature before. In addition, we have presented empirical results showing that the class of 2-planar dependency forests includ</context>
</contexts>
<marker>Nivre, Nilsson, 2005</marker>
<rawString>Joakim Nivre and Jens Nilsson. 2005. Pseudoprojective dependency parsing. In ACL ’05: Proceedings of the 43rd Annual Meeting of the Association for Computational Linguistics, pages 99–106, Morristown, NJ, USA. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Joakim Nivre</author>
<author>Johan Hall</author>
<author>Jens Nilsson</author>
</authors>
<title>Memory-based dependency parsing.</title>
<date>2004</date>
<booktitle>In Proceedings of the 8th Conference on Computational Natural Language Learning (CoNLL-2004),</booktitle>
<pages>49--56</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Morristown, NJ, USA.</location>
<contexts>
<context position="1224" citStr="Nivre et al., 2004" startWordPosition="176" endWordPosition="179">nar graphs – and show that it can be used to implement a classifier-based parser that runs in linear time and outperforms a stateof-the-art transition-based parser on four data sets from the CoNLL-X shared task. In addition, we present an efficient method for determining whether an arbitrary tree is 2-planar and show that 99% or more of the trees in existing treebanks are 2-planar. 1 Introduction Dependency-based syntactic parsing has become a widely used technique in natural language processing, and many different parsing models have been proposed in recent years (Yamada and Matsumoto, 2003; Nivre et al., 2004; McDonald et al., 2005a; Titov and Henderson, 2007; Martins et al., 2009). One of the unresolved issues in this area is the proper treatment of non-projective dependency trees, which seem to be required for an adequate representation of predicate-argument structure, but which undermine the efficiency of dependency parsing (Neuhaus and Br¨oker, 1997; BuchKromann, 2006; McDonald and Satta, 2007). Caught between the Scylla of linguistically inadequate projective trees and the Charybdis of computationally intractable non-projective trees, some researchers have sought a middle ground by exploring </context>
<context position="19060" citStr="Nivre et al., 2004" startWordPosition="3305" endWordPosition="3308"> for G if, for every sentence w and dependency graph G ∈ G for w, there is a transition sequence (cs(w), c1, ... , cf) such that g(cf) = G. A transition system that is sound and complete for G is said to be correct for G. Note that, apart from a correct transition system, a practical parser needs a good oracle to achieve the desired results, since a transition system only specifies how to reach all the possible dependency graphs that could be associated to a sentence, but not how to select the correct one. Oracles for practical parsers can be obtained by training classifiers on treebank data (Nivre et al., 2004). 4.2 A Transition System for Planar Structures A correct transition system for the class of planar dependency forests can be obtained as a variant of the arc-eager projective system by Nivre (2003). As in that system, the set of configurations of the planar transition system is the set of all triples c = hE, B, Ai such that E and B are disjoint lists of words from Uw (for some input w), and A is a set of dependency links over Uw. The list B, called the buffer, is initialised to the input string and is used to hold the words that are still to be read from the input. The list E, called the stac</context>
</contexts>
<marker>Nivre, Hall, Nilsson, 2004</marker>
<rawString>Joakim Nivre, Johan Hall, and Jens Nilsson. 2004. Memory-based dependency parsing. In Proceedings of the 8th Conference on Computational Natural Language Learning (CoNLL-2004), pages 49– 56, Morristown, NJ, USA. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Joakim Nivre</author>
<author>Johan Hall</author>
<author>Jens Nilsson</author>
</authors>
<title>MaltParser: A data-driven parser-generator for dependency parsing.</title>
<date>2006</date>
<booktitle>In Proceedings of the 5th International Conference on Language Resources and Evaluation (LREC),</booktitle>
<pages>2216--2219</pages>
<contexts>
<context position="31403" citStr="Nivre et al., 2006" startWordPosition="5534" endWordPosition="5537">, and only performs a switch when this is not possible. This has proved to work well in practice, as will be observed in the results in the next section. 6 Empirical Evaluation In order to get a first estimate of the empirical accuracy that can be obtained with transition-based 2-planar parsing, we have evaluated the parser on four data sets from the CoNLL-X shared task (Buchholz and Marsi, 2006): Czech, Danish, German and Portuguese. As our baseline, we take the strictly projective arc-eager transition system proposed by Nivre (2003), as implemented in the freely available MaltParser system (Nivre et al., 2006a), with and without the pseudo-projective parsing technique for recovering non-projective dependencies (Nivre and Nilsson, 2005). For the two baseline systems, we use the parameter settings used by Nivre et al. (2006b) in the original shared task, where the pseudo-projective version of MaltParser was one of the two top performing systems (Buchholz and Marsi, 2006). For our 2- planar parser, we use the same kernelized SVM classifiers as MaltParser, using the LIBSVM package (Chang and Lin, 2001), with feature models that are similar to MaltParser but extended with features defined over the seco</context>
</contexts>
<marker>Nivre, Hall, Nilsson, 2006</marker>
<rawString>Joakim Nivre, Johan Hall, and Jens Nilsson. 2006a. MaltParser: A data-driven parser-generator for dependency parsing. In Proceedings of the 5th International Conference on Language Resources and Evaluation (LREC), pages 2216–2219.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Joakim Nivre</author>
<author>Johan Hall</author>
<author>Jens Nilsson</author>
<author>G¨ulsen Eryi˘git</author>
<author>Svetoslav Marinov</author>
</authors>
<title>Labeled pseudo-projective dependency parsing with support vector machines.</title>
<date>2006</date>
<booktitle>In Proceedings of the 10th Conference on Computational Natural Language Learning (CoNLL),</booktitle>
<pages>221--225</pages>
<marker>Nivre, Hall, Nilsson, Eryi˘git, Marinov, 2006</marker>
<rawString>Joakim Nivre, Johan Hall, Jens Nilsson, G¨ulsen Eryi˘git, and Svetoslav Marinov. 2006b. Labeled pseudo-projective dependency parsing with support vector machines. In Proceedings of the 10th Conference on Computational Natural Language Learning (CoNLL), pages 221–225.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Joakim Nivre</author>
</authors>
<title>An efficient algorithm for projective dependency parsing.</title>
<date>2003</date>
<booktitle>In Proceedings of the 8th International Workshop on Parsing Technologies (IWPT),</booktitle>
<pages>149--160</pages>
<contexts>
<context position="3487" citStr="Nivre (2003)" startWordPosition="533" endWordPosition="534">terature, because no algorithm was known for determining whether an arbitrary tree was mplanar, and no parsing algorithm existed for any constant value of m. The contribution of this paper is twofold. First, we present a procedure for determining the minimal number m such that a dependency tree is m-planar and use it to show that the overwhelming majority of sentences in dependency treebanks have a tree that is at most 2- planar. Secondly, we present a transition-based parsing algorithm for 2-planar dependency trees, developed in two steps. We begin by showing how the stack-based algorithm of Nivre (2003) can be generalized from projective to planar structures. We then extend the system by adding a second stack and show that the resulting system captures exactly the set of 2-planar structures. Although the contributions of this paper are mainly theoretical, we also present an empirical evaluation of the 2- planar parser, showing that it outperforms the projective parser on four data sets from the CoNLL-X shared task (Buchholz and Marsi, 2006). 1492 Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics, pages 1492–1501, Uppsala, Sweden, 11-16 July 2010. c�2010 </context>
<context position="15886" citStr="Nivre, 2003" startWordPosition="2724" endWordPosition="2725">nar dependency structures not only has good coverage of linguistic phenomena in existing treebanks but is also efficiently parsable with transition-based parsing methods, making it a practically interesting subclass of non-projective dependency structures. 5If we have a valid colouring for all the cycles in the graph, the rest of the nodes can be safely coloured by breadthfirst search as in the k = 2 case. 4 Parsing 1-Planar Structures In this section, we present a deterministic lineartime parser for planar dependency structures. The parser is a variant of Nivre’s arc-eager projective parser (Nivre, 2003), modified so that it can also handle graphs that are planar but not projective. As seen in Table 1, this only gives a modest improvement in coverage compared to projective parsing, so the main interest of this algorithm lies in the fact that it can be generalised to deal with 2-planar structures, as shown in the next section. 4.1 Transition Systems In the transition-based framework of Nivre (2008), a deterministic dependency parser is defined by a non-deterministic transition system, specifying a set of elementary operations that can be executed during the parsing process, and an oracle that </context>
<context position="19258" citStr="Nivre (2003)" startWordPosition="3339" endWordPosition="3340">e correct for G. Note that, apart from a correct transition system, a practical parser needs a good oracle to achieve the desired results, since a transition system only specifies how to reach all the possible dependency graphs that could be associated to a sentence, but not how to select the correct one. Oracles for practical parsers can be obtained by training classifiers on treebank data (Nivre et al., 2004). 4.2 A Transition System for Planar Structures A correct transition system for the class of planar dependency forests can be obtained as a variant of the arc-eager projective system by Nivre (2003). As in that system, the set of configurations of the planar transition system is the set of all triples c = hE, B, Ai such that E and B are disjoint lists of words from Uw (for some input w), and A is a set of dependency links over Uw. The list B, called the buffer, is initialised to the input string and is used to hold the words that are still to be read from the input. The list E, called the stack, is initially empty and holds words that have dependency links pending to be created. The system is shown in Figure 3, where we use the notation E|wi for a stack with top wi and tail E, and we inv</context>
<context position="20559" citStr="Nivre (2003)" startWordPosition="3593" endWordPosition="3594">B). The system reads the input from left to right and creates links in a left-to-right order by executing its four transitions: 1. SHIFT: pops the first (leftmost) word in the buffer, and pushes it to the stack. 2. LEFT-ARC: adds a link from the first word in the buffer to the top of the stack. 3. RIGHT-ARC: adds a link from the top of the stack to the first word in the buffer. 4. REDUCE: pops the top word from the stack, implying that we have finished building links to or from it. Note that the planar parser’s transitions are more fine-grained than those of the arc-eager projective parser by Nivre (2003), which pops the stack as part of its LEFT-ARC transition and shifts a word as part of its RIGHT-ARC transition. Forcing these actions after creating dependency links rules out structures whose root is covered by a dependency link, which are planar but not projective. In order to support these structures, we therefore simplify the ARC transitions (LEFT-ARC and RIGHT-ARC) so that they only create an arc. For the same reason, we remove the constraint in Nivre’s parser by which words without a head cannot be reduced. This has the side effect of making the parser able to output cyclic graphs. Sinc</context>
<context position="31325" citStr="Nivre (2003)" startWordPosition="5524" endWordPosition="5525">check if a dependency link can be built on the plane of the active stack, and only performs a switch when this is not possible. This has proved to work well in practice, as will be observed in the results in the next section. 6 Empirical Evaluation In order to get a first estimate of the empirical accuracy that can be obtained with transition-based 2-planar parsing, we have evaluated the parser on four data sets from the CoNLL-X shared task (Buchholz and Marsi, 2006): Czech, Danish, German and Portuguese. As our baseline, we take the strictly projective arc-eager transition system proposed by Nivre (2003), as implemented in the freely available MaltParser system (Nivre et al., 2006a), with and without the pseudo-projective parsing technique for recovering non-projective dependencies (Nivre and Nilsson, 2005). For the two baseline systems, we use the parameter settings used by Nivre et al. (2006b) in the original shared task, where the pseudo-projective version of MaltParser was one of the two top performing systems (Buchholz and Marsi, 2006). For our 2- planar parser, we use the same kernelized SVM classifiers as MaltParser, using the LIBSVM package (Chang and Lin, 2001), with feature models t</context>
</contexts>
<marker>Nivre, 2003</marker>
<rawString>Joakim Nivre. 2003. An efficient algorithm for projective dependency parsing. In Proceedings of the 8th International Workshop on Parsing Technologies (IWPT), pages 149–160.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Joakim Nivre</author>
</authors>
<title>Constraints on non-projective dependency graphs.</title>
<date>2006</date>
<booktitle>In Proceedings of the 11th Conference of the European Chapter of the Association for Computational Linguistics (EACL),</booktitle>
<pages>73--80</pages>
<contexts>
<context position="1956" citStr="Nivre, 2006" startWordPosition="287" endWordPosition="288">the proper treatment of non-projective dependency trees, which seem to be required for an adequate representation of predicate-argument structure, but which undermine the efficiency of dependency parsing (Neuhaus and Br¨oker, 1997; BuchKromann, 2006; McDonald and Satta, 2007). Caught between the Scylla of linguistically inadequate projective trees and the Charybdis of computationally intractable non-projective trees, some researchers have sought a middle ground by exploring classes of mildly non-projective dependency structures that strike a better balance between expressivity and complexity (Nivre, 2006; Kuhlmann and Nivre, 2006; Kuhlmann and M¨ohl, 2007; Havelka, 2007). Although these proposals seem to have a very good fit with linguistic data, in the sense that they often cover 99% or more of the structures found in existing treebanks, the development of efficient parsing algorithms for these classes has met with more limited success. For example, while both Kuhlmann and Satta (2009) and G´omez-Rodr´ıguez et al. (2009) have shown how well-nested dependency trees with bounded gap degree can be parsed in polynomial time, the best time complexity for lexicalized parsing of this class remains </context>
<context position="8115" citStr="Nivre (2006)" startWordPosition="1359" endWordPosition="1360">ing.4 To define planarity more formally, we first define crossing links as follows: let (wi, wk) and (wj, wl) be dependency links in a dependency graph G. Without loss of generality, we assume that min(i, k) &lt; min(j, l). Then, the links are said to be crossing if min(i, k) &lt; min(j, l) &lt; max(i, k) &lt; max(j, l). Definition 4. A dependency graph is planar iff it does not contain a pair of crossing links. 2.4 Multiplanarity The concept of planarity on its own does not seem to be very relevant as an extension of projectivity for practical dependency parsing. According to the results by Kuhlmann and Nivre (2006), most non-projective structures in dependency treebanks are also non-planar, so being able to parse planar structures will only give us a modest improvement in coverage with respect to a projective parser. However, our interest in planarity is motivated by the fact that it can be generalised to multiplanarity (Yli-Jyr¨a, 2003): 3For dependency forests that are extended with a unique artificial root located at position 0, as is commonly done, the two notions are equivalent. 4Planarity in the context of dependency structures is not to be confused with the homonymous concept in graph theory, whi</context>
<context position="9813" citStr="Nivre (2006)" startWordPosition="1646" endWordPosition="1647">e can associate planes with colours and say that a dependency graph G is m-planar if it is possible to assign one of m colours to each of its links in such a way that links with the same colour do not cross. Note that there may be multiple ways of dividing an m-planar graph into planes, as shown in the example of Figure 1. 3 Determining Multiplanarity Several constraints on non-projective dependency structures have been proposed recently that seek a good balance between parsing efficiency and coverage of non-projective phenomena present in natural language treebanks. For example, Kuhlmann and Nivre (2006) and Havelka (2007) have shown that the vast majority of structures present in existing treebanks are well-nested and have a small gap degree (Bodirsky et al., 2005), leading to an interest in parsers for these kinds of structures (G´omezRodr´ıguez et al., 2009). No similar analysis has been performed for m-planar structures, although Yli-Jyr¨a (2003) provides evidence that all except two structures in the Danish dependency treebank are at most 3-planar. However, his analysis is based on constraints that restrict the possible ways of assigning planes to dependency links, and he is not guarante</context>
</contexts>
<marker>Nivre, 2006</marker>
<rawString>Joakim Nivre. 2006. Constraints on non-projective dependency graphs. In Proceedings of the 11th Conference of the European Chapter of the Association for Computational Linguistics (EACL), pages 73– 80.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Joakim Nivre</author>
</authors>
<title>Algorithms for Deterministic Incremental Dependency Parsing.</title>
<date>2008</date>
<journal>Computational Linguistics,</journal>
<volume>34</volume>
<issue>4</issue>
<contexts>
<context position="16287" citStr="Nivre (2008)" startWordPosition="2793" endWordPosition="2794"> 2 case. 4 Parsing 1-Planar Structures In this section, we present a deterministic lineartime parser for planar dependency structures. The parser is a variant of Nivre’s arc-eager projective parser (Nivre, 2003), modified so that it can also handle graphs that are planar but not projective. As seen in Table 1, this only gives a modest improvement in coverage compared to projective parsing, so the main interest of this algorithm lies in the fact that it can be generalised to deal with 2-planar structures, as shown in the next section. 4.1 Transition Systems In the transition-based framework of Nivre (2008), a deterministic dependency parser is defined by a non-deterministic transition system, specifying a set of elementary operations that can be executed during the parsing process, and an oracle that deterministically selects a single transition at each choice point of the parsing process. Definition 6. A transition system for dependency parsing is a quadruple 5 = (C, T, cs, Ct) where 1. C is a set ofpossible parser configurations, 2. T is a set of transitions, each of which is a partial function t : C -* C, 3. cs is a function that maps each input sentence w to an initial configuration cs(w) E</context>
<context position="24382" citStr="Nivre, 2008" startWordPosition="4275" endWordPosition="4276">wk Hwj EE ==&gt;&apos; wk Hwj EA]] 3. bk[k&lt;j][wk VE ==&gt;&apos; bl[l&gt;k][wk Hwl EE ==�&apos; wk Hwl EA]] We can show that each branch of the oracle function keeps these invariants true. When we reach a terminal configuration (which always happens after a finite number of transitions, since every transition generating a configuration c = (E, B, A) decreases the value of the variant function |E |+ |E |+ 2|B |− |A|), it can be deduced from the invariant that A = E, which proves completeness. The worst-case complexity of a deterministic transition-based parser is given by an upper bound on transition sequence length (Nivre, 2008). For the planar system, like its projective counterpart, the length is clearly O(n) (where n is the number of input words), since there can be no more than n SHIFT transitions, n REDUCE transitions, and n ARC transitions in a transition sequence. 5 Parsing 2-Planar Structures The planar parser introduced in the previous section can be extended to parse all 2-planar dependency structures by adding a second stack to the system and making REDUCE and ARC transitions apply to only one of the stacks at a time. This means that the set of links created in the context of each individual stack will be </context>
<context position="28876" citStr="Nivre, 2008" startWordPosition="5094" endWordPosition="5095">the set of dependency graphs generated by the system, the completeness of the system extended with the flag p implies that of the system in Figure 4. We can show that the complexity of the 2-planar system is O(n) by the same kind of reasoning as for the 1-planar system, with the added complication that we must constrain the system to prevent two adjacent SWITCH transitions. In fact, without this restriction, the parser is not even guaranteed to terminate. 5.2 Implementation In practical settings, oracles for transition-based parsers can be approximated by classifiers trained on treebank data (Nivre, 2008). To do this, we need an oracle that will generate transition sequences for gold-standard dependency graphs. In the case of the planar parser of Section 4.2, the oracle of 4.3 is suitable for this purpose. However, in the case of the 2-planar parser, the oracle used for the completeness proof in Section 5.1 cannot be used directly, since it requires the gold-standard trees to be divided into two planes in order to generate a transition sequence. Of course, it is possible to use the algorithm presented in Section 3 to obtain a division of sentences into planes. However, for training purposes an</context>
</contexts>
<marker>Nivre, 2008</marker>
<rawString>Joakim Nivre. 2008. Algorithms for Deterministic Incremental Dependency Parsing. Computational Linguistics, 34(4):513–553.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kemal Oflazer</author>
</authors>
<title>Bilge Say, Dilek Zeynep Hakkani-T¨ur, and G¨okhan T¨ur.</title>
<date>2003</date>
<booktitle>Building and Exploiting Syntactically-annotated Corpora,</booktitle>
<pages>261--277</pages>
<editor>In A. Abeille (ed.),</editor>
<publisher>Kluwer.</publisher>
<location>Dordrecht, the Netherlands.</location>
<marker>Oflazer, 2003</marker>
<rawString>Kemal Oflazer, Bilge Say, Dilek Zeynep Hakkani-T¨ur, and G¨okhan T¨ur. 2003. Building a Turkish treebank. In A. Abeille (ed.), Building and Exploiting Syntactically-annotated Corpora, pages 261–277, Dordrecht, the Netherlands. Kluwer.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kenji Sagae</author>
<author>Jun’ichi Tsujii</author>
</authors>
<title>Shift-reduce dependency DAG parsing.</title>
<date>2008</date>
<booktitle>In COLING ’08: Proceedings of the 22nd International Conference on Computational Linguistics,</booktitle>
<pages>753--760</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Morristown, NJ, USA.</location>
<contexts>
<context position="21594" citStr="Sagae and Tsujii (2008)" startWordPosition="3766" endWordPosition="3769">he same reason, we remove the constraint in Nivre’s parser by which words without a head cannot be reduced. This has the side effect of making the parser able to output cyclic graphs. Since we are interested in planar dependency forests, which do not contain cycles, we only apply ARC transitions after checking that there is no undirected path between the nodes to be linked. This check can be done without affecting the linear-time complexity of the 1496 parser by storing the weakly connected component of each node in g(c). The fine-grained transitions used by this parser have also been used by Sagae and Tsujii (2008) to parse DAGs. However, the latter parser differs from ours in the constraints, since it does not allow the reduction of words without a head (disallowing forests with covered roots) and does not enforce the acyclicity constraint (which is guaranteed by post-processing the graphs to break cycles). 4.3 Correctness and Complexity For reasons of space, we can only give a sketch of the correctness proof. We wish to prove that the planar transition system is sound and complete for the set Fp of all planar dependency forests. To prove soundness, we have to show that, for every sentence w and transi</context>
</contexts>
<marker>Sagae, Tsujii, 2008</marker>
<rawString>Kenji Sagae and Jun’ichi Tsujii. 2008. Shift-reduce dependency DAG parsing. In COLING ’08: Proceedings of the 22nd International Conference on Computational Linguistics, pages 753–760, Morristown, NJ, USA. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Daniel Sleator</author>
<author>Davy Temperley</author>
</authors>
<title>Parsing English with a Link Grammar.</title>
<date>1993</date>
<booktitle>In Proceedings of the Third International Workshop on Parsing Technologies (IWPT’93),</booktitle>
<pages>277--292</pages>
<publisher>ACL/SIGPARSE.</publisher>
<contexts>
<context position="7343" citStr="Sleator and Temperley, 1993" startWordPosition="1218" endWordPosition="1221">free derivations (Kuhlmann, 2007; Gaifman, 1965). Like context-free grammars, projective dependency trees are not sufficient to represent all the linguistic phenomena observed in natural languages, but they have the advantage of being efficiently parsable: their parsing problem can be solved in cubic time with chart parsing techniques (Eisner, 1996; G´omez-Rodr´ıguez et al., 2008), while in the case of general non-projective dependency forests, it is only tractable under strong independence assumptions (McDonald et al., 2005b; McDonald and Satta, 2007). 2.3 Planarity The concept of planarity (Sleator and Temperley, 1993) is closely related to projectivity3 and can be informally defined as the property of a dependency forest whose links can be drawn above the words without crossing.4 To define planarity more formally, we first define crossing links as follows: let (wi, wk) and (wj, wl) be dependency links in a dependency graph G. Without loss of generality, we assume that min(i, k) &lt; min(j, l). Then, the links are said to be crossing if min(i, k) &lt; min(j, l) &lt; max(i, k) &lt; max(j, l). Definition 4. A dependency graph is planar iff it does not contain a pair of crossing links. 2.4 Multiplanarity The concept of pl</context>
</contexts>
<marker>Sleator, Temperley, 1993</marker>
<rawString>Daniel Sleator and Davy Temperley. 1993. Parsing English with a Link Grammar. In Proceedings of the Third International Workshop on Parsing Technologies (IWPT’93), pages 277–292. ACL/SIGPARSE.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ivan Titov</author>
<author>James Henderson</author>
</authors>
<title>A latent variable model for generative dependency parsing.</title>
<date>2007</date>
<booktitle>In Proceedings of the 10th International Conference on Parsing Technologies (IWPT),</booktitle>
<pages>144--155</pages>
<contexts>
<context position="1275" citStr="Titov and Henderson, 2007" startWordPosition="184" endWordPosition="187"> implement a classifier-based parser that runs in linear time and outperforms a stateof-the-art transition-based parser on four data sets from the CoNLL-X shared task. In addition, we present an efficient method for determining whether an arbitrary tree is 2-planar and show that 99% or more of the trees in existing treebanks are 2-planar. 1 Introduction Dependency-based syntactic parsing has become a widely used technique in natural language processing, and many different parsing models have been proposed in recent years (Yamada and Matsumoto, 2003; Nivre et al., 2004; McDonald et al., 2005a; Titov and Henderson, 2007; Martins et al., 2009). One of the unresolved issues in this area is the proper treatment of non-projective dependency trees, which seem to be required for an adequate representation of predicate-argument structure, but which undermine the efficiency of dependency parsing (Neuhaus and Br¨oker, 1997; BuchKromann, 2006; McDonald and Satta, 2007). Caught between the Scylla of linguistically inadequate projective trees and the Charybdis of computationally intractable non-projective trees, some researchers have sought a middle ground by exploring classes of mildly non-projective dependency structu</context>
</contexts>
<marker>Titov, Henderson, 2007</marker>
<rawString>Ivan Titov and James Henderson. 2007. A latent variable model for generative dependency parsing. In Proceedings of the 10th International Conference on Parsing Technologies (IWPT), pages 144–155.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hiroyasu Yamada</author>
<author>Yuji Matsumoto</author>
</authors>
<title>Statistical dependency analysis with support vector machines.</title>
<date>2003</date>
<booktitle>In Proceedings of the 8th International Workshop on Parsing Technologies (IWPT),</booktitle>
<pages>195--206</pages>
<contexts>
<context position="1204" citStr="Yamada and Matsumoto, 2003" startWordPosition="171" endWordPosition="175">omposed into at most two planar graphs – and show that it can be used to implement a classifier-based parser that runs in linear time and outperforms a stateof-the-art transition-based parser on four data sets from the CoNLL-X shared task. In addition, we present an efficient method for determining whether an arbitrary tree is 2-planar and show that 99% or more of the trees in existing treebanks are 2-planar. 1 Introduction Dependency-based syntactic parsing has become a widely used technique in natural language processing, and many different parsing models have been proposed in recent years (Yamada and Matsumoto, 2003; Nivre et al., 2004; McDonald et al., 2005a; Titov and Henderson, 2007; Martins et al., 2009). One of the unresolved issues in this area is the proper treatment of non-projective dependency trees, which seem to be required for an adequate representation of predicate-argument structure, but which undermine the efficiency of dependency parsing (Neuhaus and Br¨oker, 1997; BuchKromann, 2006; McDonald and Satta, 2007). Caught between the Scylla of linguistically inadequate projective trees and the Charybdis of computationally intractable non-projective trees, some researchers have sought a middle </context>
</contexts>
<marker>Yamada, Matsumoto, 2003</marker>
<rawString>Hiroyasu Yamada and Yuji Matsumoto. 2003. Statistical dependency analysis with support vector machines. In Proceedings of the 8th International Workshop on Parsing Technologies (IWPT), pages 195–206.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Anssi Mikael Yli-Jyr¨a</author>
</authors>
<title>Multiplanarity – a model for dependency structures in treebanks.</title>
<date>2003</date>
<booktitle>In Joakim Nivre</booktitle>
<volume>9</volume>
<pages>189--200</pages>
<editor>and Erhard Hinrichs, editors,</editor>
<publisher>V¨axj¨o University Press.</publisher>
<location>V¨axj¨o,</location>
<marker>Yli-Jyr¨a, 2003</marker>
<rawString>Anssi Mikael Yli-Jyr¨a. 2003. Multiplanarity – a model for dependency structures in treebanks. In Joakim Nivre and Erhard Hinrichs, editors, TLT 2003. Proceedings of the Second Workshop on Treebanks and Linguistic Theories, volume 9 of Mathematical Modelling in Physics, Engineering and Cognitive Sciences, pages 189–200, V¨axj¨o, Sweden, 14-15 November. V¨axj¨o University Press.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>