<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.003248">
<title confidence="0.956875">
Frolog: an accommodating text-adventure game
</title>
<author confidence="0.601206">
Luciana Benotti
</author>
<note confidence="0.6743885">
TALARIS Team - LORIA (Universit´e Henri Poincar´e, INRIA)
BP 239, 54506 Vandoeuvre-l`es-Nancy, France
</note>
<email confidence="0.912234">
Luciana.Benotti@loria.fr
</email>
<sectionHeader confidence="0.992224" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999881888888889">
Frolog is a text-adventure game whose goal
is to serve as a laboratory for testing prag-
matic theories of accommodation. To
this end, rather than implementing ad-hoc
mechanisms for each task that is neces-
sary in such a conversational agent, Frolog
integrates recently developed tools from
computational linguistics, theorem prov-
ing and artificial intelligence planning.
</bodyText>
<sectionHeader confidence="0.998801" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999156386363636">
If we take a dialogue perspective on Lewis’ (1979)
notion of accommodation and assume that the
state of a dialogue is changed by the acts per-
formed by the dialogue participants, it is natural to
interpret Lewis’ broad notion of accommodation
as tacit (or implicit) dialogue acts. This is the ap-
proach adopted by Kreutel and Matheson (2003)
who formalize the treatment of tacit dialogue acts
in the information state update framework. Ac-
cording to them, accommodation is ruled by the
following principle:
Context Accommodation (CA): For any move m
that ocurrs in a given scenario scz: if assignment
of a context-dependent interpretation to m in scz
fails, try to accommodate scz to a new context
scz+1 in an appropriate way by assuming implicit
dialogue acts performed in m, and start interpre-
tation of m again in scz+1.
The authors concentrate on the treatment of im-
plicit acceptance acts but suggest that the CA prin-
ciple can be seen as a general means of context-
dependent interpretation. This principle opens up
the question of how to find the appropriate tacit di-
alogue acts. Finding them is an inference problem
that is addressed using special-purpose algorithms
in (Thomason et al., 2006), where the authors
present a unified architecture for both context-
dependent interpretation and context-dependent
generation. In Frolog, we investigate how this in-
ference process can be implemented using recent
tools from artificial intelligence planning.
The resulting framework naturally lends itself
to studying the pressing problem for current the-
ories of accommodation called missing accommo-
dation (Beaver and Zeevat, 2007). These theories
can neither explain why accommodation is some-
times easier and sometimes much more difficult,
nor how cases of missing accommodation relate to
clarification subdialogues in conversation. We re-
view what Frolog has to offer to the understanding
of accommodation in general and missing accom-
modation in particular in Section 3. But first, we
have to introduce Frolog and describe its compo-
nents, and we do so in Section 2.
</bodyText>
<sectionHeader confidence="0.532903" genericHeader="method">
2 The text-adventure game
</sectionHeader>
<bodyText confidence="0.999078125">
Text-adventures are computer games that simulate
a physical environment which can be manipulated
by means of natural language requests. The game
provides feedback in the form of natural language
descriptions of the game world and of the results
of the players’ actions.
Frolog is based on a previous text-adventure
called FrOz (Koller et al., 2004) and its design
is depicted in Figure 1. The architecture is or-
ganized in three natural language understanding
(NLU) modules and three natural language gener-
ation (NLG) modules, and the state of the interac-
tion is represented in two knowledge bases (KBs).
The two KBs codify, in Description Logic (Baader
et al., 2003), assertions and concepts relevant for a
given game scenario. The game KB represents the
true state of the game world, while the player KB
keeps track of the player’s beliefs about the game
world. Frolog’s modules are scenario-independent;
the player can play different game scenarios by
plugging in the different information resources
that constitute the scenario.
Frolog uses generic external tools for the most
heavy-loaded tasks (depicted in grey in Figure 1);
</bodyText>
<note confidence="0.3375215">
Proceedings of the EACL 2009 Demonstrations Session, pages 1–4,
Athens, Greece, 3 April 2009. c�2009 Association for Computational Linguistics
</note>
<page confidence="0.969622">
1
</page>
<figureCaption confidence="0.999963">
Figure 1: Architecture of Frolog
</figureCaption>
<bodyText confidence="0.999981692307692">
namely, a generic parser and a generic realizer
for parsing and realization, an automated theorem
prover for knowledge base management, and ar-
tificial intelligence planners for implementing its
accommodating capabilities. The rest of the mod-
ules (depicted in white) were implemented by us
in Prolog and Java. Frolog’s interface shows the in-
teraction with the player, the input/output of each
module and the content of the KBs.
We now present Frolog’s modules in pairs of an
NLU module and its NLG counterpart; each pair
uses a particular kind of information resource and
has analogous input/output.
</bodyText>
<subsectionHeader confidence="0.998302">
2.1 Parsing and Realization
</subsectionHeader>
<bodyText confidence="0.9999931">
The parsing and the realization modules use the
same linguistic resources, namely a reversible
grammar, a lemma lexicon and a morphological
lexicon represented in the XMG grammatical for-
malism (Crabb´e and Duchier, 2004). The XMG
grammar used specifies a Tree Adjoining Gram-
mar (TAG) of around 500 trees and integrates a
semantic dimension a` la (Gardent, 2008). An ex-
ample of the semantics associated with the player
input “open the chest” is depicted in Figure 2.
</bodyText>
<equation confidence="0.422928">
⇑ ⇓
open(E), agent(E,you), patient(E,C), chest(C), det(C)
</equation>
<figureCaption confidence="0.996495">
Figure 2: Parsing/realization for “open the chest”
</figureCaption>
<bodyText confidence="0.9999958">
The parsing module performs the syntactic
analysis of a command issued by the player, and
constructs its semantic representation using the
TAG parser Tulipa (Kallmeyer et al., 2008) (illus-
trated in the Figure 2 by ⇓). The realization mod-
ule works in the opposite direction, verbalizing the
results of the execution of the command from the
semantic representation using the TAG surface re-
alizer GenI (Gardent and Kow, 2007) (illustrated
in the Figure 2 by ⇑).
</bodyText>
<subsectionHeader confidence="0.9902255">
2.2 Reference Resolution and Reference
Generation
</subsectionHeader>
<bodyText confidence="0.999682090909091">
The reference resolution (RR) module is respon-
sible for mapping the semantic representations of
definite and indefinite noun phrases and pronouns
to individuals in the knowledge bases (illustrated
in Figure 3 by ⇓). The reference generation (RG)
module performs the inverse task, that is it gener-
ates the semantic representation of a noun phrase
that uniquely identifies an individual in the knowl-
edge bases (illustrated in the Figure 3 by ⇑). The
algorithms used for RR and RG are described
in (Koller et al., 2004).
</bodyText>
<equation confidence="0.7310535">
det(C), chest(C), little(C), has-location(C,T), table(T)
⇑ ⇓
</equation>
<figureCaption confidence="0.987049">
Figure 3: RR/RG for “the little chest on the table”
</figureCaption>
<bodyText confidence="0.997370071428571">
Frolog uses the theorem prover
RACER (Haarslev and M¨oller, 2001) to query
the KBs and perform RR and RG. In order to
manage the ambiguity of referring expressions
two levels of saliency are considered. The player
KB is queried (instead of the game KB) naturally
capturing the fact that the player will not refer to
individuals he doesn’t know about (even if they
exist in the game KB). Among the objects that the
player already knows, a second level of saliency is
modelled employing a simple stack of discourse
referents which keeps track of the most recently
referred individuals. A new individual gets into
the player KB when the player explores the world.
</bodyText>
<figure confidence="0.995827952380952">
The chest is open
Open the chest
Parsing
Realization
Grammar
and
Lexicons
KB Manager
Player KB
Reference
Resolution
Reference
Generation
Game KB
Action
Execution
Action
Database
Content
Determination
Accommodation
S
NP↓ VP NP↓
V
open N
open(E) chest
agent (E,A) chest(C)
patient(E,C)
NP
ǫ
A = you
NP
the NP*
det(C)
little
chest
big
chest
has-location
table
chest
little
</figure>
<page confidence="0.983685">
2
</page>
<subsectionHeader confidence="0.9822365">
2.3 Action Execution and Content
Determination
</subsectionHeader>
<bodyText confidence="0.999625176470588">
These two last modules share the last information
resource that constitute an scenario, namely, the
action database. The action database includes the
definitions of the actions that can be executed by
the player (such as take or open). Each action is
specified as a STRIPS-like operator (Fikes et al.,
1972) detailing its arguments, preconditions and
effects as illustrated below. The arguments show
the thematic roles of the verb (for instance, the
verb open requires a patient and an agent), the pre-
conditions indicate the conditions that the game
world must satisfy so that the action can be exe-
cuted (for instance, in order to open the chest, it
has to be accessible, unlocked and closed); the ef-
fects determine how the action changes the game
world when it is executed (after opening the chest,
it will be open).
</bodyText>
<equation confidence="0.950135">
action: open(E) agent(E,A) patient(E,P)
preconditions: accessible(P), not(locked(P)), closed(P)
effects: opened(P)
</equation>
<bodyText confidence="0.999968">
Executing a player’s command amounts to ver-
ifying whether the preconditions of the actions in-
volved by the command hold in the game world
and, if they do, changing the game KB according
to the effects. After the command is executed, the
content determination module constructs the se-
mantic representation of the effects that were ap-
plied, updates the player KB with it and passes it
to the next module for its verbalization (so that the
player knows what changed in the world). For our
running example the following modules will ver-
balize “the chest is open” closing a complete cycle
of the system as illustrated in Figure 1.
If a precondition of an action does not hold then
Frolog tries to accommodate as we will explain in
following section.
</bodyText>
<sectionHeader confidence="0.983271" genericHeader="method">
3 Accommodation in Frolog
</sectionHeader>
<bodyText confidence="0.9999577">
In the previous section we presented the execu-
tion of the system when everything “goes well”,
that is (to come back to the terminology used
in Section 1) when the assignment of a context-
dependent interpretation to the player’s move suc-
ceeds. However, during the interaction with Frolog,
it often happens that the player issues a command
that cannot be directly executed in the current state
of the game but needs accommodation or clarifica-
tion. This is the topic of the next two subsections.
</bodyText>
<subsectionHeader confidence="0.940193">
3.1 Tacit acts are inferable and executable:
accommodation succeeds
</subsectionHeader>
<bodyText confidence="0.961467477272727">
Suppose that the player has just locked the little
chest and left its key on the table when she real-
izes that she forgot to take the sword from it, so
she utters “open the chest”. If Frolog is in its non-
accommodating mode then it answers “the chest
is locked” because the precondition not(locked(P))
does not hold in the game world. In this mode, the
interactions with the game can get quite long and
repetitive as illustrated below.
Non-accommodating mode Accommodating mode
P: open the chest
F: the chest is open
P: unlock it
F: you don’t have the key
...
In its accommodating mode, Frolog tries to ac-
commodate the current state sci of the game to a
new state sci+1 in which the precondition hold, by
assuming tacit dialogue acts performed, and starts
the interpretation of the command again in sci+1.
That is, the game assumes that “take the key and
unlock the chest with it” are tacit acts that are per-
formed when the player says “open the chest”.
The inference of such tacit dialogue acts is done
using artificial intelligence planners. The planning
problems are generated on the fly during a game
each time a precondition does not hold; the ini-
tial state being the player KB, the goal being the
precondition that failed, and the action schemas
those actions available in the action database. The
size of the plans can be configured, when the
length is zero we say that Frolog is in its non-
accommodating mode. For detailed discussion
of the subtleties involved in the kind of infor-
mation that has to be used to infer the tacit acts
see (Benotti, 2007).
Two planners have been integrated in Frolog
(the player can decide which one to use): Black-
box (Kautz and Selman, 1999) which is fast
and deterministic and PKS (Petrick and Bacchus,
2004) which can reason over non-deterministic
actions. For detailed discussion and examples
including non-deterministic actions see (Benotti,
2008).
</bodyText>
<subsectionHeader confidence="0.99984">
3.2 Accommodation fails: clarification starts
</subsectionHeader>
<bodyText confidence="0.975547666666667">
Tacit acts are inferred using the information avail-
able to the player (the player KB) but their exe-
cution is verified with respect to the accurate and
complete state of the world (the game KB). So
P: open the chest
F: the chest is locked
</bodyText>
<page confidence="0.997347">
3
</page>
<bodyText confidence="0.999989310344828">
Frolog distinguishes three ways in which accom-
modation can fail: there is no plan, there is more
than one plan, or there is a plan which is not ex-
ecutable in the game world. For reasons of space
we will only illustrate the last case here.
Suppose that the golden key, which was lying
on the table, was taken by a thief without the
player knowing. As a consequence, the key is on
the table in the player KB, but in the game KB
the thief has it. In this situation, the player issues
the command “Open the chest” and the sequence
of tacit acts inferred (given the player beliefs) is
“take the key from the table and unlock the chest
with it”. When trying to execute the tacit acts,
the game finds the precondition that does not hold
and verbalizes it with “the key is not on the table,
you don’t know where it is”. Such answer can be
seen as a clarification request (CR), it has the ef-
fect of assigning to the player the responsability
of finding the key before trying to open the chest.
The same responsability that would be assigned by
more commonly used CR that can happen in this
scenario, namely “Where is the key?”.
In the game, such clarifications vary according
to the knowledge that is currently available to the
player. If the player knows that the dragon has the
key and she can only take it while the dragon is
asleep an answer such as “the dragon is not sleep-
ing” is generated in the same fashion.
</bodyText>
<sectionHeader confidence="0.982788" genericHeader="conclusions">
4 Conclusion and future work
</sectionHeader>
<bodyText confidence="0.999651444444445">
In this paper we have presented a text-adventure
game which is an interesting test-bed for experi-
menting with accommodation. The text-adventure
framework makes evident the strong relation be-
tween accommodation and clarification (which is
not commonly studied), highlighting the impor-
tance of investigating accommodation in dialogue
and not in isolation.
Our work is in its early stages and can be ad-
vanced in many directions. We are particularly in-
terested in modifying the architecture of the sys-
tem in order to model reference as another action
instead of preprocessing references with special-
purpose algorithms. In this way we would not
only obtain a more elegant architecture, but also
be able to investigate the interactions between ref-
erence and other kinds of actions, which occur in
every-day conversations.
</bodyText>
<sectionHeader confidence="0.990286" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.99982546">
F. Baader, D. Calvanese, D. McGuinness, D. Nardi, and
P. Patel-Schneider. 2003. The Description Logic
Handbook: Theory, Implementation, and Applica-
tions. Cambridge University Press.
D. Beaver and H. Zeevat. 2007. Accommodation.
In The Oxford Handbook of Linguistic Interfaces,
pages 503–539. Oxford University Press.
L. Benotti. 2007. Incomplete knowledge and tacit ac-
tion: Enlightened update in a dialogue game. In
Proc. ofDECALOG, pages 17–24.
L. Benotti. 2008. Accommodation through tacit sens-
ing. In Proc. ofLONDIAL, pages 75–82.
B. Crabb´e and D. Duchier. 2004. Metagrammar redux.
In Proc. of CSLP04.
R. Fikes, P. Hart, and N. Nilsson. 1972. Learning and
executing generalized robot plans. AI, 3:251–288.
C. Gardent and E. Kow. 2007. A symbolic approach to
near-deterministic surface realisation using tree ad-
joining grammar. In Proc. ofACL07.
C. Gardent. 2008. Integrating a unification-based se-
mantics in a large scale lexicalised tree adjoininig
grammar for french. In Proc. of COLING08.
V. Haarslev and R. M¨oller. 2001. RACER system
description. In Proc. of IJCAR01, number 2083 in
LNAI, pages 701–705.
L. Kallmeyer, T. Lichte, W. Maier, Y. Parmentier,
J. Dellert, and K. Evang. 2008. TuLiPA: Towards
a multi-formalism parsing environment for grammar
engineering. In Proc. of the WGEAF08.
H. Kautz and B. Selman. 1999. Unifying SAT-based
and graph-based planning. In Proc. of IJCAI99,
pages 318–325.
A. Koller, R. Debusmann, M. Gabsdil, and K. Strieg-
nitz. 2004. Put my galakmid coin into the dispenser
and kick it: Computational linguistics and theorem
proving in a computer game. JoLLI, 13(2):187–206.
J. Kreutel and C. Matheson. 2003. Context-dependent
interpretation and implicit dialogue acts. In Perspec-
tives on Dialogue in the New Millenium, pages 179–
192. John Benjamins.
D. Lewis. 1979. Scorekeeping in a language game.
Philosophical Logic, 8:339–359.
R. Petrick and F. Bacchus. 2004. Extending the
knowledge-based approach to planning with incom-
plete information and sensing. In Proc. of ICP-
KRR04, pages 613–622.
R. Thomason, M. Stone, and D. DeVault. 2006. En-
lightened update: A computational architecture for
presupposition and other pragmatic phenomena. In
Proc. of Workshop on Presup. Accommodation.
</reference>
<page confidence="0.996673">
4
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.497382">
<title confidence="0.995457">an accommodating text-adventure game</title>
<author confidence="0.998976">Luciana Benotti</author>
<affiliation confidence="0.551769">TALARIS Team - LORIA (Universit´e Henri Poincar´e, INRIA)</affiliation>
<address confidence="0.739184">BP 239, 54506 Vandoeuvre-l`es-Nancy, France</address>
<email confidence="0.874491">Luciana.Benotti@loria.fr</email>
<abstract confidence="0.9952917">a text-adventure game whose goal is to serve as a laboratory for testing pragmatic theories of accommodation. To this end, rather than implementing ad-hoc mechanisms for each task that is necesin such a conversational agent, integrates recently developed tools from computational linguistics, theorem proving and artificial intelligence planning.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>F Baader</author>
<author>D Calvanese</author>
<author>D McGuinness</author>
<author>D Nardi</author>
<author>P Patel-Schneider</author>
</authors>
<title>The Description Logic Handbook: Theory, Implementation, and Applications.</title>
<date>2003</date>
<publisher>Cambridge University Press.</publisher>
<contexts>
<context position="3330" citStr="Baader et al., 2003" startWordPosition="517" endWordPosition="520">te a physical environment which can be manipulated by means of natural language requests. The game provides feedback in the form of natural language descriptions of the game world and of the results of the players’ actions. Frolog is based on a previous text-adventure called FrOz (Koller et al., 2004) and its design is depicted in Figure 1. The architecture is organized in three natural language understanding (NLU) modules and three natural language generation (NLG) modules, and the state of the interaction is represented in two knowledge bases (KBs). The two KBs codify, in Description Logic (Baader et al., 2003), assertions and concepts relevant for a given game scenario. The game KB represents the true state of the game world, while the player KB keeps track of the player’s beliefs about the game world. Frolog’s modules are scenario-independent; the player can play different game scenarios by plugging in the different information resources that constitute the scenario. Frolog uses generic external tools for the most heavy-loaded tasks (depicted in grey in Figure 1); Proceedings of the EACL 2009 Demonstrations Session, pages 1–4, Athens, Greece, 3 April 2009. c�2009 Association for Computational Ling</context>
</contexts>
<marker>Baader, Calvanese, McGuinness, Nardi, Patel-Schneider, 2003</marker>
<rawString>F. Baader, D. Calvanese, D. McGuinness, D. Nardi, and P. Patel-Schneider. 2003. The Description Logic Handbook: Theory, Implementation, and Applications. Cambridge University Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Beaver</author>
<author>H Zeevat</author>
</authors>
<date>2007</date>
<booktitle>Accommodation. In The Oxford Handbook of Linguistic Interfaces,</booktitle>
<pages>503--539</pages>
<publisher>Oxford University Press.</publisher>
<contexts>
<context position="2202" citStr="Beaver and Zeevat, 2007" startWordPosition="334" endWordPosition="337">inciple opens up the question of how to find the appropriate tacit dialogue acts. Finding them is an inference problem that is addressed using special-purpose algorithms in (Thomason et al., 2006), where the authors present a unified architecture for both contextdependent interpretation and context-dependent generation. In Frolog, we investigate how this inference process can be implemented using recent tools from artificial intelligence planning. The resulting framework naturally lends itself to studying the pressing problem for current theories of accommodation called missing accommodation (Beaver and Zeevat, 2007). These theories can neither explain why accommodation is sometimes easier and sometimes much more difficult, nor how cases of missing accommodation relate to clarification subdialogues in conversation. We review what Frolog has to offer to the understanding of accommodation in general and missing accommodation in particular in Section 3. But first, we have to introduce Frolog and describe its components, and we do so in Section 2. 2 The text-adventure game Text-adventures are computer games that simulate a physical environment which can be manipulated by means of natural language requests. Th</context>
</contexts>
<marker>Beaver, Zeevat, 2007</marker>
<rawString>D. Beaver and H. Zeevat. 2007. Accommodation. In The Oxford Handbook of Linguistic Interfaces, pages 503–539. Oxford University Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L Benotti</author>
</authors>
<title>Incomplete knowledge and tacit action: Enlightened update in a dialogue game.</title>
<date>2007</date>
<booktitle>In Proc. ofDECALOG,</booktitle>
<pages>17--24</pages>
<contexts>
<context position="11215" citStr="Benotti, 2007" startWordPosition="1822" endWordPosition="1823">e chest”. The inference of such tacit dialogue acts is done using artificial intelligence planners. The planning problems are generated on the fly during a game each time a precondition does not hold; the initial state being the player KB, the goal being the precondition that failed, and the action schemas those actions available in the action database. The size of the plans can be configured, when the length is zero we say that Frolog is in its nonaccommodating mode. For detailed discussion of the subtleties involved in the kind of information that has to be used to infer the tacit acts see (Benotti, 2007). Two planners have been integrated in Frolog (the player can decide which one to use): Blackbox (Kautz and Selman, 1999) which is fast and deterministic and PKS (Petrick and Bacchus, 2004) which can reason over non-deterministic actions. For detailed discussion and examples including non-deterministic actions see (Benotti, 2008). 3.2 Accommodation fails: clarification starts Tacit acts are inferred using the information available to the player (the player KB) but their execution is verified with respect to the accurate and complete state of the world (the game KB). So P: open the chest F: the</context>
</contexts>
<marker>Benotti, 2007</marker>
<rawString>L. Benotti. 2007. Incomplete knowledge and tacit action: Enlightened update in a dialogue game. In Proc. ofDECALOG, pages 17–24.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L Benotti</author>
</authors>
<title>Accommodation through tacit sensing.</title>
<date>2008</date>
<booktitle>In Proc. ofLONDIAL,</booktitle>
<pages>75--82</pages>
<contexts>
<context position="11546" citStr="Benotti, 2008" startWordPosition="1871" endWordPosition="1872"> in the action database. The size of the plans can be configured, when the length is zero we say that Frolog is in its nonaccommodating mode. For detailed discussion of the subtleties involved in the kind of information that has to be used to infer the tacit acts see (Benotti, 2007). Two planners have been integrated in Frolog (the player can decide which one to use): Blackbox (Kautz and Selman, 1999) which is fast and deterministic and PKS (Petrick and Bacchus, 2004) which can reason over non-deterministic actions. For detailed discussion and examples including non-deterministic actions see (Benotti, 2008). 3.2 Accommodation fails: clarification starts Tacit acts are inferred using the information available to the player (the player KB) but their execution is verified with respect to the accurate and complete state of the world (the game KB). So P: open the chest F: the chest is locked 3 Frolog distinguishes three ways in which accommodation can fail: there is no plan, there is more than one plan, or there is a plan which is not executable in the game world. For reasons of space we will only illustrate the last case here. Suppose that the golden key, which was lying on the table, was taken by a</context>
</contexts>
<marker>Benotti, 2008</marker>
<rawString>L. Benotti. 2008. Accommodation through tacit sensing. In Proc. ofLONDIAL, pages 75–82.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Crabb´e</author>
<author>D Duchier</author>
</authors>
<title>Metagrammar redux.</title>
<date>2004</date>
<booktitle>In Proc. of CSLP04.</booktitle>
<marker>Crabb´e, Duchier, 2004</marker>
<rawString>B. Crabb´e and D. Duchier. 2004. Metagrammar redux. In Proc. of CSLP04.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Fikes</author>
<author>P Hart</author>
<author>N Nilsson</author>
</authors>
<title>Learning and executing generalized robot plans.</title>
<date>1972</date>
<pages>3--251</pages>
<publisher>AI,</publisher>
<contexts>
<context position="7702" citStr="Fikes et al., 1972" startWordPosition="1216" endWordPosition="1219">solution Reference Generation Game KB Action Execution Action Database Content Determination Accommodation S NP↓ VP NP↓ V open N open(E) chest agent (E,A) chest(C) patient(E,C) NP ǫ A = you NP the NP* det(C) little chest big chest has-location table chest little 2 2.3 Action Execution and Content Determination These two last modules share the last information resource that constitute an scenario, namely, the action database. The action database includes the definitions of the actions that can be executed by the player (such as take or open). Each action is specified as a STRIPS-like operator (Fikes et al., 1972) detailing its arguments, preconditions and effects as illustrated below. The arguments show the thematic roles of the verb (for instance, the verb open requires a patient and an agent), the preconditions indicate the conditions that the game world must satisfy so that the action can be executed (for instance, in order to open the chest, it has to be accessible, unlocked and closed); the effects determine how the action changes the game world when it is executed (after opening the chest, it will be open). action: open(E) agent(E,A) patient(E,P) preconditions: accessible(P), not(locked(P)), clo</context>
</contexts>
<marker>Fikes, Hart, Nilsson, 1972</marker>
<rawString>R. Fikes, P. Hart, and N. Nilsson. 1972. Learning and executing generalized robot plans. AI, 3:251–288.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C Gardent</author>
<author>E Kow</author>
</authors>
<title>A symbolic approach to near-deterministic surface realisation using tree adjoining grammar.</title>
<date>2007</date>
<booktitle>In Proc. ofACL07.</booktitle>
<contexts>
<context position="5597" citStr="Gardent and Kow, 2007" startWordPosition="872" endWordPosition="875">f the semantics associated with the player input “open the chest” is depicted in Figure 2. ⇑ ⇓ open(E), agent(E,you), patient(E,C), chest(C), det(C) Figure 2: Parsing/realization for “open the chest” The parsing module performs the syntactic analysis of a command issued by the player, and constructs its semantic representation using the TAG parser Tulipa (Kallmeyer et al., 2008) (illustrated in the Figure 2 by ⇓). The realization module works in the opposite direction, verbalizing the results of the execution of the command from the semantic representation using the TAG surface realizer GenI (Gardent and Kow, 2007) (illustrated in the Figure 2 by ⇑). 2.2 Reference Resolution and Reference Generation The reference resolution (RR) module is responsible for mapping the semantic representations of definite and indefinite noun phrases and pronouns to individuals in the knowledge bases (illustrated in Figure 3 by ⇓). The reference generation (RG) module performs the inverse task, that is it generates the semantic representation of a noun phrase that uniquely identifies an individual in the knowledge bases (illustrated in the Figure 3 by ⇑). The algorithms used for RR and RG are described in (Koller et al., 20</context>
</contexts>
<marker>Gardent, Kow, 2007</marker>
<rawString>C. Gardent and E. Kow. 2007. A symbolic approach to near-deterministic surface realisation using tree adjoining grammar. In Proc. ofACL07.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C Gardent</author>
</authors>
<title>Integrating a unification-based semantics in a large scale lexicalised tree adjoininig grammar for french.</title>
<date>2008</date>
<booktitle>In Proc. of COLING08.</booktitle>
<contexts>
<context position="4961" citStr="Gardent, 2008" startWordPosition="772" endWordPosition="773">ut/output of each module and the content of the KBs. We now present Frolog’s modules in pairs of an NLU module and its NLG counterpart; each pair uses a particular kind of information resource and has analogous input/output. 2.1 Parsing and Realization The parsing and the realization modules use the same linguistic resources, namely a reversible grammar, a lemma lexicon and a morphological lexicon represented in the XMG grammatical formalism (Crabb´e and Duchier, 2004). The XMG grammar used specifies a Tree Adjoining Grammar (TAG) of around 500 trees and integrates a semantic dimension a` la (Gardent, 2008). An example of the semantics associated with the player input “open the chest” is depicted in Figure 2. ⇑ ⇓ open(E), agent(E,you), patient(E,C), chest(C), det(C) Figure 2: Parsing/realization for “open the chest” The parsing module performs the syntactic analysis of a command issued by the player, and constructs its semantic representation using the TAG parser Tulipa (Kallmeyer et al., 2008) (illustrated in the Figure 2 by ⇓). The realization module works in the opposite direction, verbalizing the results of the execution of the command from the semantic representation using the TAG surface r</context>
</contexts>
<marker>Gardent, 2008</marker>
<rawString>C. Gardent. 2008. Integrating a unification-based semantics in a large scale lexicalised tree adjoininig grammar for french. In Proc. of COLING08.</rawString>
</citation>
<citation valid="true">
<authors>
<author>V Haarslev</author>
<author>R M¨oller</author>
</authors>
<title>RACER system description.</title>
<date>2001</date>
<booktitle>In Proc. of IJCAR01, number 2083 in LNAI,</booktitle>
<pages>701--705</pages>
<marker>Haarslev, M¨oller, 2001</marker>
<rawString>V. Haarslev and R. M¨oller. 2001. RACER system description. In Proc. of IJCAR01, number 2083 in LNAI, pages 701–705.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L Kallmeyer</author>
<author>T Lichte</author>
<author>W Maier</author>
<author>Y Parmentier</author>
<author>J Dellert</author>
<author>K Evang</author>
</authors>
<title>TuLiPA: Towards a multi-formalism parsing environment for grammar engineering.</title>
<date>2008</date>
<booktitle>In Proc. of the WGEAF08.</booktitle>
<contexts>
<context position="5356" citStr="Kallmeyer et al., 2008" startWordPosition="831" endWordPosition="834">ogical lexicon represented in the XMG grammatical formalism (Crabb´e and Duchier, 2004). The XMG grammar used specifies a Tree Adjoining Grammar (TAG) of around 500 trees and integrates a semantic dimension a` la (Gardent, 2008). An example of the semantics associated with the player input “open the chest” is depicted in Figure 2. ⇑ ⇓ open(E), agent(E,you), patient(E,C), chest(C), det(C) Figure 2: Parsing/realization for “open the chest” The parsing module performs the syntactic analysis of a command issued by the player, and constructs its semantic representation using the TAG parser Tulipa (Kallmeyer et al., 2008) (illustrated in the Figure 2 by ⇓). The realization module works in the opposite direction, verbalizing the results of the execution of the command from the semantic representation using the TAG surface realizer GenI (Gardent and Kow, 2007) (illustrated in the Figure 2 by ⇑). 2.2 Reference Resolution and Reference Generation The reference resolution (RR) module is responsible for mapping the semantic representations of definite and indefinite noun phrases and pronouns to individuals in the knowledge bases (illustrated in Figure 3 by ⇓). The reference generation (RG) module performs the invers</context>
</contexts>
<marker>Kallmeyer, Lichte, Maier, Parmentier, Dellert, Evang, 2008</marker>
<rawString>L. Kallmeyer, T. Lichte, W. Maier, Y. Parmentier, J. Dellert, and K. Evang. 2008. TuLiPA: Towards a multi-formalism parsing environment for grammar engineering. In Proc. of the WGEAF08.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Kautz</author>
<author>B Selman</author>
</authors>
<title>Unifying SAT-based and graph-based planning.</title>
<date>1999</date>
<booktitle>In Proc. of IJCAI99,</booktitle>
<pages>318--325</pages>
<contexts>
<context position="11336" citStr="Kautz and Selman, 1999" startWordPosition="1841" endWordPosition="1844"> problems are generated on the fly during a game each time a precondition does not hold; the initial state being the player KB, the goal being the precondition that failed, and the action schemas those actions available in the action database. The size of the plans can be configured, when the length is zero we say that Frolog is in its nonaccommodating mode. For detailed discussion of the subtleties involved in the kind of information that has to be used to infer the tacit acts see (Benotti, 2007). Two planners have been integrated in Frolog (the player can decide which one to use): Blackbox (Kautz and Selman, 1999) which is fast and deterministic and PKS (Petrick and Bacchus, 2004) which can reason over non-deterministic actions. For detailed discussion and examples including non-deterministic actions see (Benotti, 2008). 3.2 Accommodation fails: clarification starts Tacit acts are inferred using the information available to the player (the player KB) but their execution is verified with respect to the accurate and complete state of the world (the game KB). So P: open the chest F: the chest is locked 3 Frolog distinguishes three ways in which accommodation can fail: there is no plan, there is more than </context>
</contexts>
<marker>Kautz, Selman, 1999</marker>
<rawString>H. Kautz and B. Selman. 1999. Unifying SAT-based and graph-based planning. In Proc. of IJCAI99, pages 318–325.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Koller</author>
<author>R Debusmann</author>
<author>M Gabsdil</author>
<author>K Striegnitz</author>
</authors>
<title>Put my galakmid coin into the dispenser and kick it: Computational linguistics and theorem proving in a computer game.</title>
<date>2004</date>
<journal>JoLLI,</journal>
<volume>13</volume>
<issue>2</issue>
<contexts>
<context position="3012" citStr="Koller et al., 2004" startWordPosition="464" endWordPosition="467">onversation. We review what Frolog has to offer to the understanding of accommodation in general and missing accommodation in particular in Section 3. But first, we have to introduce Frolog and describe its components, and we do so in Section 2. 2 The text-adventure game Text-adventures are computer games that simulate a physical environment which can be manipulated by means of natural language requests. The game provides feedback in the form of natural language descriptions of the game world and of the results of the players’ actions. Frolog is based on a previous text-adventure called FrOz (Koller et al., 2004) and its design is depicted in Figure 1. The architecture is organized in three natural language understanding (NLU) modules and three natural language generation (NLG) modules, and the state of the interaction is represented in two knowledge bases (KBs). The two KBs codify, in Description Logic (Baader et al., 2003), assertions and concepts relevant for a given game scenario. The game KB represents the true state of the game world, while the player KB keeps track of the player’s beliefs about the game world. Frolog’s modules are scenario-independent; the player can play different game scenari</context>
<context position="6200" citStr="Koller et al., 2004" startWordPosition="970" endWordPosition="973">nt and Kow, 2007) (illustrated in the Figure 2 by ⇑). 2.2 Reference Resolution and Reference Generation The reference resolution (RR) module is responsible for mapping the semantic representations of definite and indefinite noun phrases and pronouns to individuals in the knowledge bases (illustrated in Figure 3 by ⇓). The reference generation (RG) module performs the inverse task, that is it generates the semantic representation of a noun phrase that uniquely identifies an individual in the knowledge bases (illustrated in the Figure 3 by ⇑). The algorithms used for RR and RG are described in (Koller et al., 2004). det(C), chest(C), little(C), has-location(C,T), table(T) ⇑ ⇓ Figure 3: RR/RG for “the little chest on the table” Frolog uses the theorem prover RACER (Haarslev and M¨oller, 2001) to query the KBs and perform RR and RG. In order to manage the ambiguity of referring expressions two levels of saliency are considered. The player KB is queried (instead of the game KB) naturally capturing the fact that the player will not refer to individuals he doesn’t know about (even if they exist in the game KB). Among the objects that the player already knows, a second level of saliency is modelled employing </context>
</contexts>
<marker>Koller, Debusmann, Gabsdil, Striegnitz, 2004</marker>
<rawString>A. Koller, R. Debusmann, M. Gabsdil, and K. Striegnitz. 2004. Put my galakmid coin into the dispenser and kick it: Computational linguistics and theorem proving in a computer game. JoLLI, 13(2):187–206.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Kreutel</author>
<author>C Matheson</author>
</authors>
<title>Context-dependent interpretation and implicit dialogue acts.</title>
<date>2003</date>
<booktitle>In Perspectives on Dialogue in the New Millenium,</booktitle>
<pages>179--192</pages>
<publisher>John Benjamins.</publisher>
<contexts>
<context position="920" citStr="Kreutel and Matheson (2003)" startWordPosition="133" endWordPosition="136">ories of accommodation. To this end, rather than implementing ad-hoc mechanisms for each task that is necessary in such a conversational agent, Frolog integrates recently developed tools from computational linguistics, theorem proving and artificial intelligence planning. 1 Introduction If we take a dialogue perspective on Lewis’ (1979) notion of accommodation and assume that the state of a dialogue is changed by the acts performed by the dialogue participants, it is natural to interpret Lewis’ broad notion of accommodation as tacit (or implicit) dialogue acts. This is the approach adopted by Kreutel and Matheson (2003) who formalize the treatment of tacit dialogue acts in the information state update framework. According to them, accommodation is ruled by the following principle: Context Accommodation (CA): For any move m that ocurrs in a given scenario scz: if assignment of a context-dependent interpretation to m in scz fails, try to accommodate scz to a new context scz+1 in an appropriate way by assuming implicit dialogue acts performed in m, and start interpretation of m again in scz+1. The authors concentrate on the treatment of implicit acceptance acts but suggest that the CA principle can be seen as a</context>
</contexts>
<marker>Kreutel, Matheson, 2003</marker>
<rawString>J. Kreutel and C. Matheson. 2003. Context-dependent interpretation and implicit dialogue acts. In Perspectives on Dialogue in the New Millenium, pages 179– 192. John Benjamins.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Lewis</author>
</authors>
<title>Scorekeeping in a language game. Philosophical Logic,</title>
<date>1979</date>
<pages>8--339</pages>
<marker>Lewis, 1979</marker>
<rawString>D. Lewis. 1979. Scorekeeping in a language game. Philosophical Logic, 8:339–359.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Petrick</author>
<author>F Bacchus</author>
</authors>
<title>Extending the knowledge-based approach to planning with incomplete information and sensing.</title>
<date>2004</date>
<booktitle>In Proc. of ICPKRR04,</booktitle>
<pages>613--622</pages>
<contexts>
<context position="11404" citStr="Petrick and Bacchus, 2004" startWordPosition="1852" endWordPosition="1855">ondition does not hold; the initial state being the player KB, the goal being the precondition that failed, and the action schemas those actions available in the action database. The size of the plans can be configured, when the length is zero we say that Frolog is in its nonaccommodating mode. For detailed discussion of the subtleties involved in the kind of information that has to be used to infer the tacit acts see (Benotti, 2007). Two planners have been integrated in Frolog (the player can decide which one to use): Blackbox (Kautz and Selman, 1999) which is fast and deterministic and PKS (Petrick and Bacchus, 2004) which can reason over non-deterministic actions. For detailed discussion and examples including non-deterministic actions see (Benotti, 2008). 3.2 Accommodation fails: clarification starts Tacit acts are inferred using the information available to the player (the player KB) but their execution is verified with respect to the accurate and complete state of the world (the game KB). So P: open the chest F: the chest is locked 3 Frolog distinguishes three ways in which accommodation can fail: there is no plan, there is more than one plan, or there is a plan which is not executable in the game wor</context>
</contexts>
<marker>Petrick, Bacchus, 2004</marker>
<rawString>R. Petrick and F. Bacchus. 2004. Extending the knowledge-based approach to planning with incomplete information and sensing. In Proc. of ICPKRR04, pages 613–622.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Thomason</author>
<author>M Stone</author>
<author>D DeVault</author>
</authors>
<title>Enlightened update: A computational architecture for presupposition and other pragmatic phenomena.</title>
<date>2006</date>
<booktitle>In Proc. of Workshop on Presup. Accommodation.</booktitle>
<contexts>
<context position="1774" citStr="Thomason et al., 2006" startWordPosition="275" endWordPosition="278">cenario scz: if assignment of a context-dependent interpretation to m in scz fails, try to accommodate scz to a new context scz+1 in an appropriate way by assuming implicit dialogue acts performed in m, and start interpretation of m again in scz+1. The authors concentrate on the treatment of implicit acceptance acts but suggest that the CA principle can be seen as a general means of contextdependent interpretation. This principle opens up the question of how to find the appropriate tacit dialogue acts. Finding them is an inference problem that is addressed using special-purpose algorithms in (Thomason et al., 2006), where the authors present a unified architecture for both contextdependent interpretation and context-dependent generation. In Frolog, we investigate how this inference process can be implemented using recent tools from artificial intelligence planning. The resulting framework naturally lends itself to studying the pressing problem for current theories of accommodation called missing accommodation (Beaver and Zeevat, 2007). These theories can neither explain why accommodation is sometimes easier and sometimes much more difficult, nor how cases of missing accommodation relate to clarification</context>
</contexts>
<marker>Thomason, Stone, DeVault, 2006</marker>
<rawString>R. Thomason, M. Stone, and D. DeVault. 2006. Enlightened update: A computational architecture for presupposition and other pragmatic phenomena. In Proc. of Workshop on Presup. Accommodation.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>