<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000620">
<title confidence="0.994491">
A Fast and Portable Realizer for Text Generation Systems
</title>
<author confidence="0.989406">
Benoit Lavoie and Owen Rambow
</author>
<affiliation confidence="0.949513">
CoGenTex, Inc.
</affiliation>
<address confidence="0.960547">
840 Hanshaw Road, Ithaca, NY 14850, USA
</address>
<email confidence="0.995664">
benoit, owen@cogentex.com
</email>
<sectionHeader confidence="0.999546" genericHeader="abstract">
1 Introduction
</sectionHeader>
<bodyText confidence="0.99999124137931">
Systems that generate natural language output as
part of their interaction with a user have become
a major area of research and development. Typ-
ically, natural language generation is divided into
several phases, namely text planning (determining
output content and structure), sentence planning
(determining abstract target language resources to
express content, such as lexical items and syntac-
tic constructions), and realization (producing the fi-
nal text string) (Reiter, 1994). While text and sen-
tence planning may sometimes be combined, a real-
izer is almost always included as a distinct module.
It is in the realizer that knowledge about the target
language resides (syntax, morphology, idiosyncratic
properties of lexical items). Realization is fairly well
understood both from a linguistic and from a com-
putational point of view, and therefore most projects
that use text generation do not include the realizer
in the scope of their research. Instead, such projects
use an off-the-shelf realizer, among which PENMAN
(Bateman, 1996) and SURGE/FUF (Elhadad and
Robin, 1996) are probably the most popular. In this
technical note and demo we present a new off-the-
shelf realizer, REALPRO. REALPRO is derived from
previous systems (Iordanskaja et al., 1988; Iordan-
slcaja et al., 1992; Rambow and Korelsky, 1992), but
represents a new design and a completely new imple-
mentation. REALPRO has the following characteris-
tics, which we believe are unique in this combination:
</bodyText>
<listItem confidence="0.9765576">
• REALPRO is implemented in C++. It is there-
fore both fast and portable cross-platform.
• REALPRO can be run as a standalone server,
and has C++ and Java APIs.
• The input to REALPRO is based on syntac-
tic dependency (roughly, predicate-argument and
predicate-modifier structure).
• Syntactic and lexical knowledge about the tar-
get language is expressed in ASCII files which are
interpreted at run-time. It can easily be updated.
</listItem>
<bodyText confidence="0.998216625">
We reserve a more detailed comparison with PEN-
MAN and FUF, as well as with AlethGen/GL (Coch,
1996) (which is perhaps the system most similar to
REALPRO, since they are based on the same linguis-
tic theory and are both implemented with speed in
mind), for a more extensive paper. This technical
note presents REALPRO, concentrating on its struc-
ture, its coverage, its interfaces, and its performance.
</bodyText>
<sectionHeader confidence="0.963935" genericHeader="method">
2 Input Structure
</sectionHeader>
<bodyText confidence="0.998617">
The input to REALPRO is a syntactic dependency
structure. It is called the Deep-Syntactic Struc-
ture or &amp;quot;DSyntS&amp;quot; for short, and is inspired in this
form by I. Mel&apos;euk&apos;s Meaning-Text Theory (Mel&apos;euk,
1988). This representation has the following salient
features:
</bodyText>
<listItem confidence="0.9571053">
• The DSyntS is an unordered tree with labeled
nodes and labeled arcs.
• The DSyntS is lexicalized, meaning that the
nodes are labeled with lexemes (uninflected words)
from the target language.
• The DSyntS is a dependency structure and
not a phrase-structure structure: there are no non-
terminal nodes, and all nodes are labeled with lex-
emes.
• The DSyntS is a syntactic representation, mean-
ing that the arcs of the tree are labeled with syn-
tactic relations such as &amp;quot;subject&amp;quot; (represented in
DSyntSs as I), rather than conceptual or semantic
relations such as &amp;quot;agent&amp;quot;.
• The DSyntS is a deep syntactic representation,
meaning that only meaning-bearing lexemes are rep-
resented, and not function words.
First, consider the simple example in Figure 1,
which corresponds to the sentence (1):
(1) This boy sees Mary.
</listItem>
<bodyText confidence="0.882205">
Lexemes which are in the lexicon are in uppercase,
those that are not are in lowercase. For lexemes not
in the lexicon it is necessary to specify the word class
</bodyText>
<page confidence="0.996367">
265
</page>
<figure confidence="0.992442666666667">
see
boy Mary
THIS1
</figure>
<figureCaption confidence="0.999153">
Figure 1: Input structure for sentence (1)
</figureCaption>
<listItem confidence="0.91679">
as a feature, e.g. word-class:verb. For readability, we
omit these features in the tree diagrams. Subject
and object are indicated by the arc labels I and II,
respectively, and modification is represented by the
arc label ATTR. If we add feature question:+ to the
verb and feature number:pi to the node for boy, then
we get (2):
(2) Do these boys see Mary?
</listItem>
<bodyText confidence="0.9873346">
This illustrates that function words (do) need not
be included in the input DSyntS, and that syntac-
tic issues such as subject-verb and noun-determiner
agreement are handled automatically. The tree in
Figure 2 yields (3):
</bodyText>
<listItem confidence="0.69000875">
(3) Mary winning this competition means
she can study in Paris and can live with her
aunt, whom she adores.
mean
</listItem>
<figureCaption confidence="0.993821">
Figure 2: Input structure for sentence (3)
</figureCaption>
<bodyText confidence="0.99995235">
Note that REALPRO does not perform the task of
lexical choice: the input to REALPRO must specify
all meaning-bearing lexemes, including features for
free pronominalization. Also, REALPRO does not
map any sort of semantic labels to syntactic cate-
gories. These tasks, we assume, are handled by a
separate component (such as a sentence planner).
This has the advantage that the sentence planner
can be unabashedly domain-specific, which is neces-
sary in today&apos;s applications, since a broad-coverage
implementation of a domain-independent theory of
conceptual representations and their mapping to lin-
guistic representations is still far from being realistic.
Furthermore, there is no non-determinism in REAL-
PRO: the input to REALPRO fully determines the
output, though the input is a very abstract linguis-
tic representation which is well suited for interfac-
ing with knowledge-based applications. This means
that REALPRO gives the developer control over the
output, while taking care of the linguistic details.
</bodyText>
<sectionHeader confidence="0.982861" genericHeader="method">
3 System Architecture
</sectionHeader>
<bodyText confidence="0.922535">
The architecture of REALPRO is based on Meaning-
Text Theory, which posits a sequence of correspon-
dences between different levels of representation.
In REALPRO, each transformation is handled by
a separate module. REALPRO is really a realizer
shell, which allows for a (run-time) configuration us-
ing specially formatted Linguistic Knowledge Bases
(LKBs) which state grammar rules, lexical entries,
and feature defaults. Each module draws on one or
several LKBs. The lexicon is an LKB which is used
by all components. Figure 3 shows the architecture.
</bodyText>
<listItem confidence="0.978410642857143">
• First, the input DSyntS is checked for syntactic va-
lidity and default features from the Default Feature
Specification are added.
• The Deep-Syntactic Component takes as input a
DSyntS. Using the DSynt grammar and the lexi-
con, it inserts function words (such as auxiliaries
and governed prepositions), and produces a second
dependency tree, the surface-syntactic structure or
SSyntS, with more specialized arc labels.
• The Surface-Syntactic Component linearizes the
nodes of the SSyntS, which yields the deep-
morphological structure, or DMorphS. It draws on
the SSynt grammar, which states rules of linear
precedence according to arc labels.
• The Deep-Morphological Component inflects the
items of the DMorphS, yielding the Surface-
Morphological Structure (SMorphS). It draws on in-
formation from the lexicon, as well as on a default in-
flection mechanism (currently hard-coded in C++).
• The Graphical Component adds abstract punctu-
ation and formatting instructions to the SMorphS
(including &amp;quot;point absorption&amp;quot; — see (White, 1995)),
yielding the Deep-Graphical Structure (DGraphS).
• Ad-hoc formatters transform the DGraphS into
formatting instructions for the targeted output
medium. Currently, REALPRO supports ASCII,
HTML, and RTF output.
win mood: pees-part study
</listItem>
<figure confidence="0.998502842105263">
Mary competition
ATTR
THIS1
IN!
WITH1 CAN II
111 Paris
aunt ref: person-22
ATIOATTR
gender: fern Mary adore
pro: Pro 11
Mary gender: rem aunt ref: person-22
pro: pro gender: fern
AND2 Mary CAN
FIX pro
gender: fern
live ATR
.TTR
COORD
AUR
</figure>
<page confidence="0.795799">
266
</page>
<figureCaption confidence="0.999358">
Figure 3: System architecture
</figureCaption>
<sectionHeader confidence="0.987224" genericHeader="method">
4 Linguistic Knowledge Bases
</sectionHeader>
<bodyText confidence="0.999766357142857">
As mentioned in Section 3, REALPRO is configured
by specifying several LKBs. The system comes with
LKBs for English; French is currently under devel-
opment. Normally, the user need not change the two
grammar LKBs (the DSynt and SSynt grammars),
unless the grammar of the target sublanguage is not
a subset of English (or French). However, the user
may want to extend the lexicon if a lexeme with ir-
regular morphology is not in it yet. (Recall that
not all words in the input representation need be in
the lexicon.) For example, in order to generate saw
(rather than the default seed) for the past tense of
to see, the following entry would be added to the
lexicon.
</bodyText>
<figure confidence="0.3579215">
LEXEME: SEE
CATEGORY: verb
MORPHOLOGY: [amood:past-part] seen [iv] )
Utense:past] saw [iv]
</figure>
<bodyText confidence="0.999653">
The user may also want to change the defaults.
For example if in his/her application all sentences
must be in past tense, the user can set the default
tense to be past rather than present as follows:
</bodyText>
<listItem confidence="0.2485295">
DEFAULT: verb [ tense:past mood:ind ]
5 Coverage of the English Grammar
</listItem>
<bodyText confidence="0.982284">
The English grammar currently covers a wide range
of syntactic phenomena:
</bodyText>
<listItem confidence="0.996114733333333">
• Full range of verbal forms (such as compound
tenses, aspects, passive voice, and so on), includ-
ing negation and questions. Also subject-verb agree-
ment.
• Coordination of both nouns and clauses.
• Relative clauses (both on subject and object).
• Default word order; certain word order vari-
ations (including so-called &amp;quot;topicalization&amp;quot; , i.e.
fronting of adjuncts or non-subject complements)
are controled through features.
• Full English morphology, including a full range
of pronominal forms (personal pronouns, possessive
pronouns, relative pronouns).
• Full range of punctuation, such as MUMS
around descriptive relative clauses.
</listItem>
<bodyText confidence="0.99924425">
Most of these points are illustrated by the input
in Figure 2. Phenomena currently not handled au-
tomatically include certain types of &amp;quot;fancy syntax&amp;quot;
such as clefts and it-clefts (though these can be gen-
erated by specifying the surface structure in the in-
put), as well as long-distance dependencies such as
These are books which I think you should buy (where
which is an argument of buy).
</bodyText>
<sectionHeader confidence="0.99971" genericHeader="method">
6 Interfaces
</sectionHeader>
<bodyText confidence="0.9997732">
REALPRO is currently distributed with a socket in-
terface which allows it to be run as a standalone
server. It has an application programming interface
(API), available in C++ and Java, which can be
used to integrate REALPRO in applications. For
training, debugging, and demonstration purposes,
REALPRO can also be used in interactive mode to re-
alize sentences from ASCII files containing syntactic
specifications. The following ASCII-based specifica-
tion corresponds to the DSyntS of sentence (2):
</bodyText>
<figure confidence="0.43487375">
SEE [ question:+ ]
( I boy number:pi ]
( ATTR THIS1 )
II Mary [ class:proper_noun ] )
</figure>
<bodyText confidence="0.986376625">
In this definition, parentheses () are used to specify
the scope of dependency while square brackets [] are
used to specify features associated with a lexeme.
REALPRO can output text formatted as ASCII,
HTML, or RTF. In addition, REALPRO can also out-
put an ASCII representation of the DGraphS that
a user application can format in application-specific
ways.
</bodyText>
<sectionHeader confidence="0.93766" genericHeader="method">
7 System Performance
</sectionHeader>
<bodyText confidence="0.9999623">
The following table shows the runtime for sentences
of different lengths. These sentences are all of the
form This small girl often claims that that boy often
claims that Mary likes red wine, where the middle
clause that that boy often claims is iterated for the
longer sentences. The row labeled &amp;quot;Length&amp;quot; refers to
the length of the output string in words. Note that
the number of output words is equal to the number
of nodes in the SSyntS (because it is a dependency
tree), and furthermore the number of nodes in the
</bodyText>
<figure confidence="0.9989535625">
hS
ASCII Formatter
HTML Formatter
RTF Formatter
Renli7Ple
Input DSyntS
DSynt Checker
DSyntS
Defas
DSynt Component
SSyntS
SSynt Component
DM1,rphS
DMorph Component
SMotphS
Graph Component
</figure>
<page confidence="0.990861">
267
</page>
<bodyText confidence="0.999001822222222">
SSyntS is greater than or equal to the number of
nodes in the DSyntS. (In our case, the number of
nodes in the input DSyntS is equal to the number of
words in the output string.) The row labeled &amp;quot;Sec&amp;quot;
represents average execution time (over several test
runs) for the sentence of the given input length, in
seconds, on a PC with a 150MHz Pentium processor
and 32 Megs of RAM.
Length 5 10 15 20 30 40 50
Sec .11 .17 .20 .28 .44 .58 .72
We also tested the system on the syntactically
rather varied and complex input of Figure 2 (which
is made up of 20 words). The average runtime for
this input is 0.31 seconds, which is comparable to
the runtime reported above for the 20 word sen-
tence. We conclude that the uniformity of the syn-
tactic constructions found in the sentences used in
the above test sequence does not influence the re-
sults.
The complexity of the generation algorithm de-
rives primarily from the tree traversals which must
be performed twice, when passing from DSyntS to
SSyntS, and from SSyntS to the DMorphS. Let n be
the length of the output string (and hence an up-
per bound on the size of both DSyntS and SSyntS).
At each node, each rule in the appropriate grammar
(deep- or surface-syntactic) must be checked against
the subtree rooted at that node. This tree match-
ing is in the general case exponential in n. How-
ever, in fact it is dependent on two variables, the
maximal size of grammar rules in the grammar (or
n, whichever is greater), and the branching factor
(maximum number of daughter nodes for a node)
of the input representation. Presumably because of
deeper facts about language, the grammar rules are
quite small. The current grammar does not have any
rules with more than three nodes. This reduces the
tree matching algorithm to polynomial in n. Fur-
thermore, while the branching factor of the input
tree can in theory be n — 1, in practice it will be
much smaller. For example, all the input trees used
in the tests discussed above have branching factors
of no more than 5. We thus obtain de-facto linear
performance, which is reflected in the numbers given
above.
</bodyText>
<sectionHeader confidence="0.997256" genericHeader="conclusions">
8 Status
</sectionHeader>
<bodyText confidence="0.99922325">
The system is fully operational, runs on PC as well
as on UNIX work stations, and is currently used
in an application we have developed (Lavoie et al.,
1997) as well as in several on-going projects (weather
report generation, machine translation, project re-
port generation). REALPRO is licensed free of charge
to qualified academic institutions, and is licensed for
a fee to commercial sites.
</bodyText>
<sectionHeader confidence="0.995492" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.999348111111111">
The development of REALPRO was partially supported
by USAF Rome Laboratory under contracts F30602-
93-C-0015, F30602-94-C-0124, and F30602-92-C-0163,
and by DARPA under contracts F30602-95-2-0005 and
F30602-96-C-0220. We are grateful to R. Kittredge, T.
Korelsky, D. McCullough, A. Nasr, E. Reiter, and M.
White as well as to three anonymous reviewers for help-
ful comments about earlier drafts of this technical note
and/or about REALPRO.
</bodyText>
<sectionHeader confidence="0.999412" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999779512820513">
Bateman, J. A. (1996). KPML development envi-
ronment. Technical report, Institut fiir Integrierte
Publikations- und Informationssysteme (IPSI), GMD.
Coch, J. (1996). Overview of AlethGen. In Proceedings
of the Eighth International Natural Language Genera-
tion Workshop (INLG&apos;96) (Demonstrations Volume),
Herstmonceux Castle, Sussex.
Elhadad, M. and Robin, J. (1996). An overview of
SURGE: a reusable comprehensive syntactic realiza-
tion component. In Proceedings of the Eighth In-
ternational Natural Language Generation Workshop
INLG &apos;96) (Demonstrations Volume), Herstmonceux
Castle, Sussex.
Iordanskaja, L., Kim, M., Kittredge, R., Lavoie, B., and
Polguere, A. (1992). Generation of extended bilin-
gual statistical reports. In Proceedings of the 14th In-
ternational Conference on Computational Linguistics
(COLING &apos;92).
Iordanskaja, L., Kittredge, R., and Polguere, A. (1988).
Implementing the Meaning-Text Model for language
generation. Paper presented at COLING-88.
Lavoie, B., Rambow, 0., and Reiter, E. (1997). Cus-
tomizable descriptions of object-oriented models. In
Proceedings of the Conference on Applied Natural Lan-
guage Processing (A NLP &apos;97), Washington, DC.
MeFtuk, I. A. (1988). Dependency Syntax: Theory and
Practice. State University of New York Press, New
York.
Rambow, 0. and Korelsky, T. (1992). Applied text gen-
eration. In Third Conference on Applied Natural Lan-
guage Processing, pages 40-47, Trento, Italy.
Reiter, E. (1994). Has a consensus NL generation archi-
tecture appeared, and is it psycholinguistically plau-
sible? In Proceedings of the 7th International Work-
shop on Natural Language Generation, pages 163-170,
Maine.
White, M. (1995). Presenting punctuation. In Proceed-
ings of the Fifth European Workshop on Natural Lan-
guage Generation (EWNLG5).
</reference>
<page confidence="0.996853">
268
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.933140">
<title confidence="0.999913">A Fast and Portable Realizer for Text Generation Systems</title>
<author confidence="0.948734">Lavoie Rambow</author>
<affiliation confidence="0.990495">CoGenTex, Inc.</affiliation>
<address confidence="0.999983">840 Hanshaw Road, Ithaca, NY 14850, USA</address>
<email confidence="0.989191">benoit,owen@cogentex.com</email>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>J A Bateman</author>
</authors>
<title>KPML development environment.</title>
<date>1996</date>
<booktitle>Institut fiir Integrierte Publikations- und Informationssysteme (IPSI), GMD.</booktitle>
<tech>Technical report,</tech>
<contexts>
<context position="1221" citStr="Bateman, 1996" startWordPosition="182" endWordPosition="183">zation (producing the final text string) (Reiter, 1994). While text and sentence planning may sometimes be combined, a realizer is almost always included as a distinct module. It is in the realizer that knowledge about the target language resides (syntax, morphology, idiosyncratic properties of lexical items). Realization is fairly well understood both from a linguistic and from a computational point of view, and therefore most projects that use text generation do not include the realizer in the scope of their research. Instead, such projects use an off-the-shelf realizer, among which PENMAN (Bateman, 1996) and SURGE/FUF (Elhadad and Robin, 1996) are probably the most popular. In this technical note and demo we present a new off-theshelf realizer, REALPRO. REALPRO is derived from previous systems (Iordanskaja et al., 1988; Iordanslcaja et al., 1992; Rambow and Korelsky, 1992), but represents a new design and a completely new implementation. REALPRO has the following characteristics, which we believe are unique in this combination: • REALPRO is implemented in C++. It is therefore both fast and portable cross-platform. • REALPRO can be run as a standalone server, and has C++ and Java APIs. • The i</context>
</contexts>
<marker>Bateman, 1996</marker>
<rawString>Bateman, J. A. (1996). KPML development environment. Technical report, Institut fiir Integrierte Publikations- und Informationssysteme (IPSI), GMD.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Coch</author>
</authors>
<title>Overview of AlethGen.</title>
<date>1996</date>
<booktitle>In Proceedings of the Eighth International Natural Language Generation Workshop (INLG&apos;96) (Demonstrations Volume),</booktitle>
<location>Herstmonceux Castle, Sussex.</location>
<contexts>
<context position="2182" citStr="Coch, 1996" startWordPosition="340" endWordPosition="341">as the following characteristics, which we believe are unique in this combination: • REALPRO is implemented in C++. It is therefore both fast and portable cross-platform. • REALPRO can be run as a standalone server, and has C++ and Java APIs. • The input to REALPRO is based on syntactic dependency (roughly, predicate-argument and predicate-modifier structure). • Syntactic and lexical knowledge about the target language is expressed in ASCII files which are interpreted at run-time. It can easily be updated. We reserve a more detailed comparison with PENMAN and FUF, as well as with AlethGen/GL (Coch, 1996) (which is perhaps the system most similar to REALPRO, since they are based on the same linguistic theory and are both implemented with speed in mind), for a more extensive paper. This technical note presents REALPRO, concentrating on its structure, its coverage, its interfaces, and its performance. 2 Input Structure The input to REALPRO is a syntactic dependency structure. It is called the Deep-Syntactic Structure or &amp;quot;DSyntS&amp;quot; for short, and is inspired in this form by I. Mel&apos;euk&apos;s Meaning-Text Theory (Mel&apos;euk, 1988). This representation has the following salient features: • The DSyntS is an u</context>
</contexts>
<marker>Coch, 1996</marker>
<rawString>Coch, J. (1996). Overview of AlethGen. In Proceedings of the Eighth International Natural Language Generation Workshop (INLG&apos;96) (Demonstrations Volume), Herstmonceux Castle, Sussex.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Elhadad</author>
<author>J Robin</author>
</authors>
<title>An overview of SURGE: a reusable comprehensive syntactic realization component.</title>
<date>1996</date>
<booktitle>In Proceedings of the Eighth International Natural Language Generation Workshop INLG &apos;96) (Demonstrations Volume),</booktitle>
<location>Herstmonceux Castle, Sussex.</location>
<contexts>
<context position="1261" citStr="Elhadad and Robin, 1996" startWordPosition="186" endWordPosition="189">xt string) (Reiter, 1994). While text and sentence planning may sometimes be combined, a realizer is almost always included as a distinct module. It is in the realizer that knowledge about the target language resides (syntax, morphology, idiosyncratic properties of lexical items). Realization is fairly well understood both from a linguistic and from a computational point of view, and therefore most projects that use text generation do not include the realizer in the scope of their research. Instead, such projects use an off-the-shelf realizer, among which PENMAN (Bateman, 1996) and SURGE/FUF (Elhadad and Robin, 1996) are probably the most popular. In this technical note and demo we present a new off-theshelf realizer, REALPRO. REALPRO is derived from previous systems (Iordanskaja et al., 1988; Iordanslcaja et al., 1992; Rambow and Korelsky, 1992), but represents a new design and a completely new implementation. REALPRO has the following characteristics, which we believe are unique in this combination: • REALPRO is implemented in C++. It is therefore both fast and portable cross-platform. • REALPRO can be run as a standalone server, and has C++ and Java APIs. • The input to REALPRO is based on syntactic de</context>
</contexts>
<marker>Elhadad, Robin, 1996</marker>
<rawString>Elhadad, M. and Robin, J. (1996). An overview of SURGE: a reusable comprehensive syntactic realization component. In Proceedings of the Eighth International Natural Language Generation Workshop INLG &apos;96) (Demonstrations Volume), Herstmonceux Castle, Sussex.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L Iordanskaja</author>
<author>M Kim</author>
<author>R Kittredge</author>
<author>B Lavoie</author>
<author>A Polguere</author>
</authors>
<title>Generation of extended bilingual statistical reports.</title>
<date>1992</date>
<booktitle>In Proceedings of the 14th International Conference on Computational Linguistics (COLING &apos;92).</booktitle>
<marker>Iordanskaja, Kim, Kittredge, Lavoie, Polguere, 1992</marker>
<rawString>Iordanskaja, L., Kim, M., Kittredge, R., Lavoie, B., and Polguere, A. (1992). Generation of extended bilingual statistical reports. In Proceedings of the 14th International Conference on Computational Linguistics (COLING &apos;92).</rawString>
</citation>
<citation valid="true">
<authors>
<author>L Iordanskaja</author>
<author>R Kittredge</author>
<author>A Polguere</author>
</authors>
<title>Implementing the Meaning-Text Model for language generation. Paper presented at COLING-88.</title>
<date>1988</date>
<contexts>
<context position="1440" citStr="Iordanskaja et al., 1988" startWordPosition="215" endWordPosition="218">dge about the target language resides (syntax, morphology, idiosyncratic properties of lexical items). Realization is fairly well understood both from a linguistic and from a computational point of view, and therefore most projects that use text generation do not include the realizer in the scope of their research. Instead, such projects use an off-the-shelf realizer, among which PENMAN (Bateman, 1996) and SURGE/FUF (Elhadad and Robin, 1996) are probably the most popular. In this technical note and demo we present a new off-theshelf realizer, REALPRO. REALPRO is derived from previous systems (Iordanskaja et al., 1988; Iordanslcaja et al., 1992; Rambow and Korelsky, 1992), but represents a new design and a completely new implementation. REALPRO has the following characteristics, which we believe are unique in this combination: • REALPRO is implemented in C++. It is therefore both fast and portable cross-platform. • REALPRO can be run as a standalone server, and has C++ and Java APIs. • The input to REALPRO is based on syntactic dependency (roughly, predicate-argument and predicate-modifier structure). • Syntactic and lexical knowledge about the target language is expressed in ASCII files which are interpre</context>
</contexts>
<marker>Iordanskaja, Kittredge, Polguere, 1988</marker>
<rawString>Iordanskaja, L., Kittredge, R., and Polguere, A. (1988). Implementing the Meaning-Text Model for language generation. Paper presented at COLING-88.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Lavoie</author>
<author>Rambow</author>
</authors>
<title>Customizable descriptions of object-oriented models.</title>
<date>1997</date>
<booktitle>In Proceedings of the Conference on Applied Natural Language Processing (A NLP &apos;97),</booktitle>
<location>Washington, DC.</location>
<marker>Lavoie, Rambow, 1997</marker>
<rawString>Lavoie, B., Rambow, 0., and Reiter, E. (1997). Customizable descriptions of object-oriented models. In Proceedings of the Conference on Applied Natural Language Processing (A NLP &apos;97), Washington, DC.</rawString>
</citation>
<citation valid="true">
<authors>
<author>I A MeFtuk</author>
</authors>
<title>Dependency Syntax: Theory and Practice.</title>
<date>1988</date>
<publisher>State University of New York Press,</publisher>
<location>New York.</location>
<marker>MeFtuk, 1988</marker>
<rawString>MeFtuk, I. A. (1988). Dependency Syntax: Theory and Practice. State University of New York Press, New York.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Korelsky</author>
</authors>
<title>Applied text generation.</title>
<date>1992</date>
<booktitle>In Third Conference on Applied Natural Language Processing,</booktitle>
<pages>40--47</pages>
<location>Trento, Italy.</location>
<contexts>
<context position="1495" citStr="Korelsky, 1992" startWordPosition="226" endWordPosition="227">yncratic properties of lexical items). Realization is fairly well understood both from a linguistic and from a computational point of view, and therefore most projects that use text generation do not include the realizer in the scope of their research. Instead, such projects use an off-the-shelf realizer, among which PENMAN (Bateman, 1996) and SURGE/FUF (Elhadad and Robin, 1996) are probably the most popular. In this technical note and demo we present a new off-theshelf realizer, REALPRO. REALPRO is derived from previous systems (Iordanskaja et al., 1988; Iordanslcaja et al., 1992; Rambow and Korelsky, 1992), but represents a new design and a completely new implementation. REALPRO has the following characteristics, which we believe are unique in this combination: • REALPRO is implemented in C++. It is therefore both fast and portable cross-platform. • REALPRO can be run as a standalone server, and has C++ and Java APIs. • The input to REALPRO is based on syntactic dependency (roughly, predicate-argument and predicate-modifier structure). • Syntactic and lexical knowledge about the target language is expressed in ASCII files which are interpreted at run-time. It can easily be updated. We reserve a</context>
</contexts>
<marker>Korelsky, 1992</marker>
<rawString>Rambow, 0. and Korelsky, T. (1992). Applied text generation. In Third Conference on Applied Natural Language Processing, pages 40-47, Trento, Italy.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Reiter</author>
</authors>
<title>Has a consensus NL generation architecture appeared, and is it psycholinguistically plausible?</title>
<date>1994</date>
<booktitle>In Proceedings of the 7th International Workshop on Natural Language Generation,</booktitle>
<pages>163--170</pages>
<location>Maine.</location>
<contexts>
<context position="662" citStr="Reiter, 1994" startWordPosition="94" endWordPosition="95">Systems Benoit Lavoie and Owen Rambow CoGenTex, Inc. 840 Hanshaw Road, Ithaca, NY 14850, USA benoit, owen@cogentex.com 1 Introduction Systems that generate natural language output as part of their interaction with a user have become a major area of research and development. Typically, natural language generation is divided into several phases, namely text planning (determining output content and structure), sentence planning (determining abstract target language resources to express content, such as lexical items and syntactic constructions), and realization (producing the final text string) (Reiter, 1994). While text and sentence planning may sometimes be combined, a realizer is almost always included as a distinct module. It is in the realizer that knowledge about the target language resides (syntax, morphology, idiosyncratic properties of lexical items). Realization is fairly well understood both from a linguistic and from a computational point of view, and therefore most projects that use text generation do not include the realizer in the scope of their research. Instead, such projects use an off-the-shelf realizer, among which PENMAN (Bateman, 1996) and SURGE/FUF (Elhadad and Robin, 1996) </context>
</contexts>
<marker>Reiter, 1994</marker>
<rawString>Reiter, E. (1994). Has a consensus NL generation architecture appeared, and is it psycholinguistically plausible? In Proceedings of the 7th International Workshop on Natural Language Generation, pages 163-170, Maine.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M White</author>
</authors>
<title>Presenting punctuation.</title>
<date>1995</date>
<booktitle>In Proceedings of the Fifth European Workshop on Natural Language Generation (EWNLG5).</booktitle>
<contexts>
<context position="7140" citStr="White, 1995" startWordPosition="1130" endWordPosition="1131"> • The Surface-Syntactic Component linearizes the nodes of the SSyntS, which yields the deepmorphological structure, or DMorphS. It draws on the SSynt grammar, which states rules of linear precedence according to arc labels. • The Deep-Morphological Component inflects the items of the DMorphS, yielding the SurfaceMorphological Structure (SMorphS). It draws on information from the lexicon, as well as on a default inflection mechanism (currently hard-coded in C++). • The Graphical Component adds abstract punctuation and formatting instructions to the SMorphS (including &amp;quot;point absorption&amp;quot; — see (White, 1995)), yielding the Deep-Graphical Structure (DGraphS). • Ad-hoc formatters transform the DGraphS into formatting instructions for the targeted output medium. Currently, REALPRO supports ASCII, HTML, and RTF output. win mood: pees-part study Mary competition ATTR THIS1 IN! WITH1 CAN II 111 Paris aunt ref: person-22 ATIOATTR gender: fern Mary adore pro: Pro 11 Mary gender: rem aunt ref: person-22 pro: pro gender: fern AND2 Mary CAN FIX pro gender: fern live ATR .TTR COORD AUR 266 Figure 3: System architecture 4 Linguistic Knowledge Bases As mentioned in Section 3, REALPRO is configured by specifyin</context>
</contexts>
<marker>White, 1995</marker>
<rawString>White, M. (1995). Presenting punctuation. In Proceedings of the Fifth European Workshop on Natural Language Generation (EWNLG5).</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>