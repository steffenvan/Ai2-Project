<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<title confidence="0.762807">
American Journal of Computational Linguistics Microfiche 21
NEWSIsETTER OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS
</title>
<author confidence="0.848568">
VOLUME 12 - NUMBER 3 JULY 1975
</author>
<bodyText confidence="0.603074142857143">
Recent computer science research
in natural language processing
by Allen Klinger - 2
Current bibliography - 26
AMERICAN JOURNAL Or COMPUTATIONAL LINGUISTICS is published by
the Center for Applied Linguistics for the Association for
Computational Linguistics
</bodyText>
<note confidence="0.691339153846154">
EDITOR David G. Hays Professor of Linguistics and of Computer Science
State University of New York, Buffalo
EDITORIAL STAFF Jeff F. Lesinski Assistant Pro Tem
Jacquin Brendle secretary
EDITORIAL ADDRESS Twin Willows, Warvikah, New York 14075
MANAGrNG EDITOR A. Hood Roberts Deputy Director, Center for Applied
Linguistics
MANAGEMENT STAFF Nancy Jokovich and David Hoffman
PRODUCTION AND SUBSCRIPTION? ADDRESS 1611 North Kent Street,
Arlington, Virginia 22209
CopyrLght 1975
Association for Computational Linguistics
American Journal of Computational Linguistics Microfiche 21 : 2
</note>
<sectionHeader confidence="0.6767175" genericHeader="abstract">
RECENT COMPUTER SCIENCE RESEARCH IN
NATURAL LANGUAGE PROCESSING
</sectionHeader>
<author confidence="0.8058">
ALLEN KLINGER
</author>
<affiliation confidence="0.999049333333333">
Computer Science Deportment
SchoOl of Engineering and Applied Science
University of California, Los Angeles
</affiliation>
<sectionHeader confidence="0.6026" genericHeader="keywords">
ABSTRACT
</sectionHeader>
<bodyText confidence="0.999909857142857">
.&apos;he machine translation problem has recently been replaced
by much narrower goals and computer processing of language has
become part Of artificial intelligence (Al), speech recognition,
and structural pattern recognition. These are each specialized
computer science research fields with distinct objectives and
assumptions. The narrower goals involve making it possible for
a computer user to employ a near natural-language mode for
problem-solving, information retrieval, and other applications.
Natural computer responses have also been created and a special
term, -understanding&amp;quot;, has been used to describe the resulting
computek-human dialogues. The purpose of this paper is to
survey these recent developments to make the Al literature ac-
cessible to researchers mainly interested in computation on
written text or spoken language.
</bodyText>
<page confidence="0.876474">
3
</page>
<sectionHeader confidence="0.972108" genericHeader="introduction">
1. INTRODUCTION
</sectionHeader>
<bodyText confidence="0.999677375">
The computer literature discussed in this paper uses
several linguistic terms in special ways, when there is a
possibility if contusion, quotation marks will be used to
identify technical terms in computer science. The term
&amp;quot;understanding&amp;quot; is frequently used as a synonym for &amp;quot;the addi-
tion of logical relationships or semantics to syntactic pro-
cessing&amp;quot;. This use is substantially garrower than the word&apos;s
implicit association with &amp;quot;human behavior implemented by
computer&amp;quot; the narrower use is introduced as a neutral refe-
rence point. The question of whether a computer porgram can
operate in a human-like way is central to artificial intelli-
gence. &amp;quot;Do current &apos;understanding&apos; program systems show how
extended human-like capability can be implemented using com-
puters?&amp;quot; is a related pragmatic question Initially this
investigation sought to examine whether programs which &amp;quot;under-
stand&amp;quot; language in the stipulated narrow sense are prototypes
which could lead to expanded capability. Unfortunately,
&amp;quot;language understanding&amp;quot; and its special subtopic &amp;quot;speeeh
understanding&amp;quot; are insufficiently developed to permit profi-
table discussion of the original question Hence an opera-
tional approach to the recent literature is taken here. This
paper outlines how &amp;quot;language understanding&amp;quot; research has evolved
anti identifies key elements of program organization used to
achieve limited computer &amp;quot;understanding&amp;quot;.
</bodyText>
<page confidence="0.483429">
4
</page>
<sectionHeader confidence="0.766972" genericHeader="method">
2, LEVEL AND DOMAIN
</sectionHeader>
<bodyText confidence="0.9904438">
Current Al programs for language processing art organized
by level and restricted to specified domains. This section
presents those ideas and comments ot the limitations that
they entail.
Three principal levels of language-processing software are
</bodyText>
<listItem confidence="0.951139333333333">
1. &amp;quot;Lexical&amp;quot; (allowed vocabulary)
2. &amp;quot;Syntactic&amp;quot; (allowed phrases or sentences)
3 &amp;quot;Semantic&amp;quot; (allowed meanings)
</listItem>
<bodyText confidence="0.98703625">
in practice all these levels must operate many times for the
computer to interpret even a small portion, say two words, of
restricted natural-language input. Programs that perform
operations on each level are, respectively,
</bodyText>
<listItem confidence="0.990175666666667">
1. Word in a table?
2. Word string acceptable grammatically?
3. Word string acceptable logically?
</listItem>
<bodyText confidence="0.9997831">
A program to detect &amp;quot;meaning&amp;quot; (logical consequences of word
interpretations) must also perform grammatical operations for
certain words to determine a part of speech (noun, verb, adjec-
tive, etc.) One method makes a tentative assigdment, parses,
then tests for plausibility via consistency with known facts.
To reduce the complexity of this task, the designer limits
the subset of language allower or the &amp;quot;world&amp;quot; (i.e. the subject)
discussed. The word &amp;quot;domain&amp;quot; sums up this concept, other terms
for &amp;quot;restricted domain&amp;quot; are &amp;quot;limited scope of discourse&amp;quot;,
&amp;quot;narrow problem domain&amp;quot;, and &amp;quot;restricted English framework&amp;quot;
</bodyText>
<page confidence="0.433426">
5
</page>
<bodyText confidence="0.999570444444444">
The limitation of vocabulary or context constrains the
lexicon and semantics of the &amp;quot;language&amp;quot;. The trend in the
design of software for &amp;quot;natural-language understanding&amp;quot; is
to deal with (a) a specialized vocabulary, and (b) a parti-
cular context or set of allowed interpretations in order to
reduce processing time. Although computing results for several
highly specialized problems Leg. 7, 23] are impressive exam-
ples of language processing in restricted domains, they do
not answer several key concerns.
</bodyText>
<listItem confidence="0.941934833333333">
1. Do specialized vocabularies have sufficient
complexity to warrant comparison with true
natural language?
2. Are current &amp;quot;understanding&amp;quot; programs, orga-
nized by level and using domain restriction,
extendable to true natural language?
</listItem>
<bodyText confidence="0.999945625">
The realities are severe. Syntactic processing is interdependent
with meaning and involves the allowed logical relationships
among words in the lexicon. Most natural-language software is
highly developed at the &amp;quot;syntactic&amp;quot; level However, the number
of times the &amp;quot;syntactic&amp;quot; level must be entered can grow explo-
sively as the &amp;quot;naturalness&amp;quot; of the language to be processed
increases. Success on artificial domains cannot imply a great
deal about processing truly natural language.
</bodyText>
<sectionHeader confidence="0.889855" genericHeader="method">
3. PROGRAM SYSTEMS
</sectionHeader>
<bodyText confidence="0.995207">
The systems cited in this section answer questions, per-
form commands, or conduct dialogues.
</bodyText>
<page confidence="0.84098">
6
</page>
<bodyText confidence="0.994772148148148">
Programs that enable a user to execute a task via computer
in an on-line mode are generally called &amp;quot;interactive&amp;quot; Some
systems are so rich in their language-processing capability
that they are called &amp;quot;conversational&amp;quot; Systems that have
complicated capabilities and can reply with a sophisticated
tesponse to an inquiry are called &amp;quot;question answering&amp;quot;. The
survey [1] discusses two &amp;quot;conversational&amp;quot; ptograms ELIZA
[2, 3] and STUDENT [4], which answers questions regarding
algebraic word problems. SIR [5] answers questions about
logic. Both [41 and [5] appear in [6], the introdirction
there provides a general discussion of &amp;quot;semantic information
and computer programs involving &amp;quot;semantics&amp;quot;
The &amp;quot;question-answering&amp;quot; program systems described in
[2-5] were sophisticated mainly in methods of solving a prob-
lem or determining a response to a statement. Other systems
have emphasized the retrieval of facts encoded in English.
The &amp;quot;blocks-world&amp;quot; system described in [71 contrasts with
these in that it has sophisticated language-processing capa-
bility It infers antecedents of pronouns and resolves ambi-
guities in input word strings regarding blocks on a table.
The distinction between &amp;quot;interactive&amp;quot;, &amp;quot;conversational&amp;quot;, and
&amp;quot;question-answering&amp;quot; is less important when the blocks-world
is the domain. The computer-science contribution is a program
to interact with the domain as if it could &amp;quot;understand&amp;quot; the
input, in the sense that it takes the proper action even when
the input is somewhat ambiguous. To resolve ambiguities the
program refers to existing relationships among the blocks.
</bodyText>
<page confidence="0.459181">
7
</page>
<bodyText confidence="0.993246018518519">
The effect of [7] was to provide a sophisticated example of
computer &amp;quot;understanding&amp;quot; which led to attempts to apply simi-
lar principles to speech inputs. (More detail on parallel de-
velopments in speech processing is presented later.)
The early &amp;quot;language-understanding&amp;quot; systems, BASEBALL [9],
ELIZA, and STUDENT, were based on two special formats: one to
represent the knowledge they store and one to find meaning in
the English input. They discard all input information which
cannot be transformed for internal storage. The comparison
of ELIZA and STUDENT in [1] is with regard to the degree of
&amp;quot;understanding&amp;quot; ELIZA responds either by transforming the
input sentence (essentially mimicry) following isolation of a
key word or by using a prestored content-free remark. STUDENT
translates natural-language &amp;quot;descriptions of algebraic equations,
... proceeds to identify the unknowns involved and the relation-
ships which hold between them, and (obtains and solves) a set
of equations&amp;quot; [1, p 85]. Hence ELIZA &amp;quot;understands&amp;quot; only a few
key words; it transforms these words via a sentence-reassembly
rule, discards other parts of the sentence, and adds stock
phrases to create the response. STUDENT solves the underlying
algebraic problem--it &amp;quot;understands&amp;quot; in that it &amp;quot;answers questions
based on information contained in the input&amp;quot; [4, p. 155]. ELIZA
responds but does not &amp;quot;understand&amp;quot;, since the reply has little
to do with the information in the input sentence, but rather
serves to keep the person in a dialogue.
B
Programs with an ability to spout back similar to ELIZA&apos;s
usually store a body of text and an indexing scheme to it. This
approach has obvious limitations and was replaced by systems
that use a formal representation to store limited logical
concepts associated with the text. One of them is SIR, which
can deduce set telationships among objects described by natural
language. SIR is designed to meet the requirement that &amp;quot;in
addition to echoing, upoy request, the facts it has been
given, a machine which &apos;understands&apos; must be able to recog-
nize the logical implications of those facts. It also must
be able to identify (from a large data store) facts which are
relevant to d particular question&amp;quot; [5].
Limited-logic systems are important because they provide
methods to represent complex facts encoded in English-language
statements so that the facts can be used by computer programs
or accessed by a person who did not input the original textual
statement of the fact. Such a second user may employ a com-
pletely different form of language encoding. Programs of this
sort include DEACON [10, 11] and the early version of CONVERSE
[12]. The former could &amp;quot;handle time questions&amp;quot; and used
a bottom-up analysis method which allowed questions
to be nested. For example, the question &amp;quot;Who is
the commander of the battalion at Fort Fubar?&amp;quot; was
handled by first internally answering the question
&amp;quot;What battalion is at Fort Fubar?&amp;quot; The answer was
then substituted directly into the original question
to make it. &amp;quot;Who is the commander of the 69th batta-
lion?&amp;quot; which the system then answered. [7, p. 37]
</bodyText>
<page confidence="0.293496">
9
</page>
<bodyText confidence="0.949197">
CONVERSE contained provisions for allwing even more complex
forms of input questions (Recent versions are described in
[13-15].)
Deductive systems can be divided into general systems
which add a first-order predicate-calculus theorem-proving
capability to limited-logic systems to improve the complexity
of the facts they can &amp;quot;infer&amp;quot;, and procedural systems which
enable other computations to obtain complex information The
theorem-proving capability is designed to work from a group
of logical statements given as input (or statements consistent
with these input statements) However, facts INCONSISTENT
with the original statements cannot always be detected and
deductive systems quickly become impractical as the number of
input statements (elementary facts, axioms) becomes large
[6, 7, 16], since the time to obtain a proof grows to an im-
practical length. Special programming languages (e.g. QA4
[17, 18], PLANNER [20, 21]), have added strategy capabilities
and better methods of problem representation to reduce computing
time to practical values
QA4 (seeks) to develop natural, intuitive represen-
tations of problems and problem-solving programs.
(The user can) blend ... procedural and declarative
information that includes explicit instructions,
intuitive advice, and semantic definitions. {17]
However, there is currently no body of evidence regarding the
effectiveness of the programs written in this programming
language or related ones on problem-solving tasks in general
</bodyText>
<page confidence="0.456678">
10
</page>
<bodyText confidence="0.998965666666667">
or &amp;quot;language understanding&amp;quot; in particular. There is a need
for experimental evaluation of the strategies that the pro-
grafting language permits for &amp;quot;language understanding&amp;quot; problems.
Procedural deductiire systems facilitate the augmentation
of an existing store of complex information. Usually systems
require a new set of subprograms to deal with new data;
each change in a subprogram may affect more of the
other subprograms. The structure grows more awkward
and difficult to generalize. ... Finally, the, system
may become too unwieldy for further experimentation,
[5, P. 91]
In procedural systems the software is somewhat modular In
19 &amp;quot;semantic primitives&amp;quot; were assumed to exist as LISP sub-
routines. PLANNER 1201 allows complex information to be
expressed as procedures without requiring user involvement
with the details of interaction among procedures (but [21]
reports some second thoughts).
The work of many other groups could be added to this
survey. Recent work on REL, building on on [10, 11] is
reported in [36, 37]; [24, 251 are relevant collections; and
[26] is a survey paper.
</bodyText>
<sectionHeader confidence="0.988995" genericHeader="method">
4. DEDUCTION
</sectionHeader>
<bodyText confidence="0.90069125">
In all of the program systems described thus far, &amp;quot;language
understanding&amp;quot; depends on the &amp;quot;deductive capabilities&amp;quot; of the
*Some experiments on problem-solving effectiveness of
special programming languages in another context appear in [22].
</bodyText>
<page confidence="0.86223">
11
</page>
<bodyText confidence="0.9999498">
program, that is, its ability to &amp;quot;infer&amp;quot; facts and relationships
from given statements. In some cases deduction involves dis-
cerning structure in a set of facts and relationships. This
section describes how &amp;quot;understanding&amp;quot; programs themselves are
structured and how that 3tructure limits their capability for
general deduction.
Theorem-proving programs use an inference rule illus-
trated in 123 p. 61] to deduce new knowledge. A formal suc-
cession of logical steps called resolutions leads to the new
fact. The example there begins with P1 - P4 given:
</bodyText>
<equation confidence="0.9190202">
P1 if x is part of v, and if v is part of y, then
x is part of y;
P2 a finger is part of a hand;
P3 a hand is part of an arm;
P4 an arm is part of a man
</equation>
<bodyText confidence="0.952386727272727">
A proof that
P9 a finger is part of a man
is derived by steps, such as combining P1 and P2 to get
P6 if a hand is part of y, then a finger is part of y
Unfortunately, it is easy to move outside the domain where
the computer can make useful deductions, and the formal reso-
lution process is extremely lengthy and thus prohibitively
costly in computer time. In [31, 32] it is shown that some
statements (&amp;quot;who did not write ---?&amp;quot;) are unanswerable and
that there is no algorithm which can detect whether a question
stated in a zero-one logical form can be answered. Hence
</bodyText>
<page confidence="0.428208">
12
</page>
<bodyText confidence="0.9702195">
theorem proving is not e-sential to &amp;quot;deduction&amp;quot; and &amp;quot;under-
standing&amp;quot; systems, natural or artificial, must rely on other
techniques, e.g., outside information such as knowledge about
the domain.
In most &amp;quot;understanding&amp;quot; programs, information on a primi-
tive level of processing can be inaccurate; for example, the
identification of a sound string &amp;quot;blew&amp;quot; can be inaccurately
&amp;quot;blue&amp;quot; Subsequent processing levels combine identified pri-
mitives. If parts of speech are concerned, the level is syn-
tactic; if meaning is involved, &amp;quot;semantic&amp;quot;; if domain is in-
volved, the level is that of the &amp;quot;world&amp;quot;. r..ach level can be
an aid in a deductive process, leading to &amp;quot;understanding&amp;quot; an
input segment of language. Programs NOW EXIST which opera-
tionally satisfy most of the following points concerning
&amp;quot;understanding&amp;quot; in narrow domains (emphasis has been added)
Perhaps tha most importaht criterion for understand-
ing a language is the ability TO RELATE THE INFORMA-
TION CONTAINED in a sentence TO KNOWLEDGE PREVIOUSLY
</bodyText>
<sectionHeader confidence="0.96562625" genericHeader="method">
ACQUIRED. This IMPLIES HAVING SOME KIND OF MEMORY
STRUCTURE IN WHICH THE INTERRELATIONSHIPS OF VARIOUS
PIECES OF KNOWLEDGE ARE STORED AND INTO WHICH NEW
INFORMATION MAY BE FITTED... The memory structure
</sectionHeader>
<bodyText confidence="0.95917">
in these programs may be regarded as emantic, cog-
nitive, or conceptual structures.. .these programs can
make statements or answer questions based not only
an the individual statements they were previously
told, but also on THOSE INTERRELATIONSHIPS BETWEEN
CONCEPTS that were built up from separate sentences
as information was incorporated into the structure...
13
</bodyText>
<note confidence="0.689723">
THE MEANINGS OF THE TERMS STORED IN MEMORY ARE PRE-
CISELY THE TOTALITY OF THE RELATIONSHIPS THEY HAVE
WITH OTHER TERMS IN THE MEMORY. [28 pp. 3-41
</note>
<bodyText confidence="0.999763">
This has been accomplished through clever (and lengthy) com-
puter programming, and by taking advantage of structure inhe-
rent in special prol:lem domains such as stacking blocks on
a table, moving chess pieces, and retrieving facts about a
large naval organization.
Program systems for understanding begin with a &amp;quot;front
end&amp;quot;: a portion designed to transform language input into a
computer representation. The representation may be as simple
as a character-by-character encoding of alphabetic, space
marker, and punctuation elements. However, a complex &amp;quot;front
end&amp;quot; could involve word and phrase detection and encoding.
The usual computer science term foi a computer representation
is &amp;quot;data structure?&apos; [27] and there are many types. The language
processing program DEACON used ring structures [111, a repre-
sentation frequently used to store queues. In principle a
data structure can represent involved associations, but in
practice simple order or ancestor relationships predominate
Completely different and far more complex types of structure
are inherent in natural language. For exampLe, from [281
&amp;quot;The.professors signed a petition.&amp;quot; is not true.
has for valid interpretations:
</bodyText>
<listItem confidence="0.94477175">
(a) The professors DIDN&apos;T sign a petition.
(b) THE PROFESSORS didn&apos;t sign a petition.
(c) The professors didn&apos;t si_gn a PETITION.
(d) The professors didn&apos;t SIGN a petition:
</listItem>
<page confidence="0.54124">
14
</page>
<bodyText confidence="0.999863227272727">
Iterative substitution of alternatives to deduce overall mean-
ing yields cumbersome processing, especially when there are
nested uncertainties. The recursive properties associated
with the data structure term &amp;quot;list&amp;quot; [27] are not easily
adapted to multiple meanings. Hence, representing linguistic
data for computation is ah open and fundamental research
problem. Nevertheless, the programs which deduce facts from
language do so without a clear best technique for computer
representation. To do this, restrictions on the language
implicit in the input domain are used, and repeated process-
ing by level (lexical, syntactic, semantic) is used in the
absence of an efficient representation language. Data struc-
tures that facilitate following the language structure are
needed Existing programs provide special solutions to the
problems of deductive processing in narrow language domains
While these programs are not a general breakthrough in repre-
senting language data for computation, they demonstrate that
current programming techniques enable a useful &amp;quot;understanding&amp;quot;
capability Furthermore, there is a real potential for use
ot the &amp;quot;understanding&amp;quot; in an interactive wde to facilitate
use of computers by nonspecialists and to tap the more sophis-
ticated human understanding capabilities
</bodyText>
<sectionHeader confidence="0.998983" genericHeader="method">
5 INTERACTION
</sectionHeader>
<bodyText confidence="0.980033142857143">
Research and computer program development designed to
store multitudes of facts so that they can be accessed [29]
gr combined [301 and &amp;quot;understood (see pp. 3-10 in [301) in
15
linguistic form (see pp. 11-17 of [30]) is highly relevant to
recent research programs in text and speech understanding.
When such a system is used a user might fail to get a fact or
relationship because the natural-language subset chosen to
represent his question was too righ--i.e., it includes a com-
plex set of logical relationships not in the computer. Thus
a block could result in a human-computer dialogue if the
program has no logical connection between &amp;quot;garage&amp;quot; and &amp;quot;car&amp;quot;
but only between &amp;quot;garage&amp;quot; and &amp;quot;house&amp;quot; (the program replies
&amp;quot;OK&amp;quot; or &amp;quot;Mr to user input sentences)
</bodyText>
<figure confidence="0.40566275">
I LIKE CHEVROLETS.
OK
CHEVROLETS ARE ECONOMICAL.
OK
MY HOUSE HAS A LARGE GARAGE.
OK
I CAN GET TWO IN
???
</figure>
<bodyText confidence="0.978007477477478">
The computer failed to &amp;quot;understand&amp;quot; that there was no change
of discourse subject. This is an example of a &amp;quot;semantic&amp;quot;
failure which could be overcome by interaction. That is; the
human user would need to input one more meaning or associa-
tion of a valid word so that computer &amp;quot;understanding&amp;quot; may be
achieved. Syntactic blocks may also occur. M. Denicoff
pointed out that in [7] 172 different syntactic features were
used for a situation where there are no statements with psy-
chological content and no use of simile. If the psychological
meanings are added as in [38], these features would not be
16
enough to describe all the possible meanings of a text drawn
from a less artificial source. Indeed, a key problem which
formal graffimars seem ill-suited for is the reality that many
contexts may. be situltaneously valid: multiple meanings give
natural-language communication the richness of overtones, ana
subtleties--poetry carries this to an extreme.
The above dialogue on &amp;quot;Chevrolets&amp;quot; is an example of what
Carbonell f39, p. 1941 called &amp;quot;mixed-initiative discourse&amp;quot;.
This important aspect of interaction is considered in the LISP
program DWIM (&amp;quot;Do What I Mean&amp;quot;), which is a useful working tool
for text-input error correction precisely because it &amp;quot;under-
stands&amp;quot; the user&apos;s characteristics. (For example, typical
spelling errors.) This is discussed by Teitelman [40, 41,, 421
A great deal of effort has been put into making DWIN
&amp;quot;smart&amp;quot;. Experience with perhaps a dozen different
users indicates we have been very successful: DWIM
seldom fails to correct an error the user feels it
should have, and almost never mistakenly corrects an
error. [40, p. 11]
Another limited-discourse interactive program [43] facilitates
introduction of expert knowledge on ahess. The program uses
search with a maximum look-ahead depth of 20 and has back-
tracking capability; both syntactic and semantic knowledge is
incorporated. By grouping similar board positions (i.e., all
involving a piece on cell 1, all involving a queen move), it
imposes semantic organization on the vast files to be searched
and improves syntactic processing speed
17
6, SPEECH
Publication of [44], which coined the term &amp;quot;speech
understanding&amp;quot;, initiated the natural next step toward use of
the computer&apos;s &amp;quot;understanding&amp;quot; capability. The goal of easy
interaction with the computer becomes more exciting with
speech as input medium. Systems tO recognize both text and
speech have used syntax and context [45, 46], but (47] added
a comprehensive approach using multiple processing levels to
resolve ambiguities. In the direct successors of this work
[ 8, 49], the same process of partial Acceptance of primitive
elements (phonemic candidates from digitized acoustic data)
followed by lexical, syntactic, and semantic processing to
rank alternatives has shown significant success. Reddy (in a
Carnegie-Mellon University film on the Hearsay System) states
hat on 144 connected utterances, involving 676 words, obtained
from 5 speakers, performing 4 tasks (chess, news retrieval,
medical diagnosis, and desk calculator use), requiring 28 to
76-word vocabularies, the computer program recognition, in
terms of words spotted and identified correctly, was
a. 897. with all sources of knowledge
b. 677. without use of semantic knowledge
c. 447. without use of syntactic or semantic knowledge
These results were obtained in October 1973, and have been im-
proved since [50]. However, a key limitation of this form of
computer speech &amp;quot;understanding&amp;quot; is response rate. Reddy
18
estimated that the third word-accuracy figure (without use of
syntactic and semantic knowledge) would have to be in excess
of 90% to allow the program to achieve a near-human response
speed.
The nature of computer &amp;quot;understanding&amp;quot; programs leads to
problems of combinatoric explosion in number of alternatives-
and this lessens the usefulness of multilevel program organi-
zation (acoustic-phonetic, lexical, syntactic, semantic,
domain, and user interactions) as much in .speech processing as
in text processing. Prototype speech &amp;quot;anderstanding&amp;quot; systems
have been build [49, 50] and newer acoustic-phonetic and
syntactic techniques have been incorporated into this work
149, 51, 52], yet it seems clear that the development of theory
in prosody and grammar cannot provide a breakthrough to escape
the combinatoric explosion. The reason is that the search of
parse trees and the use of semantics (look up related words)
depend on a single context—both take geometrically increasing
amounts of computing time as the number of contexts grows.
Furthermore, this increase in time is added onto that which
occurs when the size of lexicon is expanded. As words are
added, the number of trees that dam be-produced by the gram-
mar&apos;s rewriting rules in an attempt to &amp;quot;recognize&amp;quot; a string
expands rapidly. Hence in speech as in text processing,
&amp;quot;understanding&amp;quot; exists via computer yet it is not likely to
lead to machine processing of truly natural language. Indeed
the artificiality of speech &amp;quot;understanding&amp;quot; by computer is
19
even greater than that of text input. The &amp;quot;moon rocks&amp;quot; text
system [33, 35] used a vocabulary of 3500 words, while the
speech &amp;quot;understanding&amp;quot; version based on it [511 used only
250 words.
The COMMERCIAL AVAILABILITY Of systems that recognize
isolated words with 98.57 accuracy [531* and the need for
a rapid human-computer input interface [54] promise that the
last word has not been spoken on &amp;quot;understanding&amp;quot;. Research
and development on language handling systems is continuing in
the hope of achieving useful &amp;quot;understanding&amp;quot;. Indeed, Stan-
ford Research Institute&apos;s Artificial Intelligence Center is
basing its current work on the just-mentioned isolated-word
recognizer. It is likely that useful developments will occur
where language, and probably spoken-language, &amp;quot;understanding&amp;quot;
will be exhibited. These developments will occur through
careful design of tasks and use of advances in computer
technology However, the general problem of machine &amp;quot;under-
standing&amp;quot; of natural language--whether text pr speech--is not
likely to be aided by these developments.
</bodyText>
<sectionHeader confidence="0.999839" genericHeader="method">
7 CONCLUSIONS
</sectionHeader>
<bodyText confidence="0.955485272727273">
A large body of research in computer science is devoted
to language processing. A survey of the program systems that
*Threshold Technology Inc. has sold such a system to se-
veral users. Their VIP-100 includes a minicomputer dedicated
to the recognition task; there are other isolated-word systems
[54]
20
have been reported shows that two main goals have emerged:
1 To enable &amp;quot;intelligent&amp;quot; processing by the
computer (&amp;quot;artificial intelligence&amp;quot;)
2. To produce a more useful way to access
data and solve problems (&amp;quot;man-machine
interaction&amp;quot;)
Techniques in artificial intelligence and speech recognition
have been developed to the extent that prototype computer
program systems which exhibit &amp;quot;understanding&amp;quot; have been de-
veloped for highly limited contexts. To extend these pro-
grams to larger subsets of natural language poses problems,
it is unlikely that any of the Tesearch directions currently
being explored will of themselves &amp;quot;solve&amp;quot; the &amp;quot;natural lan
guage problem&amp;quot;. (The techniques include, but are not limited
to, further developments in artificial intelligence program-
ming languages [17, 18 20, 21, 55]; refinements in theories
of grammar; improved deductive ability, possibly by better
theorem-proving techniques; and the introduction of stress-
related features in the ehcoding of speech [521. A useful
collection of language models appears in [56].) Nevertheless,
prototype systems for &amp;quot;understanding&amp;quot; both text and speech are
useful achievements of engineering, and spoken entry of data
by humans to computers is beginning to be established by
isolated-word recognizers which use a minicomputer dedicated
to the task. A multiplicity of purposes beyond this simple
but practical task of data entry are mentioned briefly in the
</bodyText>
<page confidence="0.688568">
21
</page>
<bodyText confidence="0.9859424">
foregoing discussion of &amp;quot;interaction&amp;quot;. Developments along
the many diverse paths indicated under that heading are
likely to be rapid in the future as practical &amp;quot;understanding&amp;quot;
of subsets of language becomes part of computer technology
For another view of the evolution of that process, see [57].
</bodyText>
<sectionHeader confidence="0.954152" genericHeader="method">
REFERENCES
</sectionHeader>
<reference confidence="0.997687906976744">
1. Nievergelt, J., and J. C. Farrar, &amp;quot;What Machines Can and Cannot
Do,&amp;quot; Computing Surveys, 4, June 1972, 81-96.
2. Weizenbaum, J., &amp;quot;ELI2A--A Computer Program for the Study of Natural
Language Communication Between Man and Machine,&amp;quot; Comm. ACM 9,
January 1966, 36-45.
3. Weizenbaum, J., &amp;quot;Contextual Understanding by Computers,&amp;quot; Comm.
ACM /0,*August 197, 474-480.
4. Bobrow, D. G., &amp;quot;Natural Language Input for a Computer Problem
Solving System,&amp;quot; in M. Minsky (ed.), Semantic Information Proc-
essing, MIT Press, Cathridge, Mass., 1968, 135-215
5. Raphael, B., &amp;quot;SIR: Semantic Information Retrieval,&amp;quot; in M. Minsky
(ed..), Semantic Information Processing, MIT, Press, Cambridge,
Mass., 1968, 33-134, 256-266.
6. Minsky, IL (ed.), Semantic Information Processing, MIT Press,
Cambridge, Mass., 1968.
7 Winograd, T., Understanding Natural Language, Academic Press,
New York, 197-4.
8. Plath, W., &amp;quot;Restricted English as a User Language,&amp;quot; IBM T. J.
Watson Research Center, Yorktown Heights, New York, 1972.
9. Green, P. F., A. K. Wolf, C. Clomsky, and K. Laugherty, &amp;quot;BASEBALL.
An Automatic Question-Answer,&amp;quot; in E. A. Feigenbaum and J. Feldman
(eds.), Computers and Thought, McGraw-Hill, New York, 1963.
10. Thompson, F. B., &amp;quot;English for the Computer,&amp;quot; Proc. FJCO, Spartan,
New York, 1968, 349-356.
22
11. Craig, J. A., S. Berezner, H. Carney,. and C. Longyear, &amp;quot;DEACON:
Direct English Access and Control,&amp;quot; Proc. FJCC, Spartan, New York,
1968, 365-380.
12. Kellogg, C., &amp;quot;A Natura1,Lang4age Compiler for On-Line Data,Manage-
meat,&amp;quot; Proc. FJCC, Spartan, New York, .196R, 473-492.
13. Travis, L., C. Kellogg, P. Klahr, Inferential Quostion-Anwering4.
Extending Conovrdo, System Development Corporation, SP-3579,
January 31, 1973.
14. Kellogg, C. H.„ J. Burn:7, T. W.Iler, and K. Fogt% &amp;quot;The CONVERSE
Natural Language Data Managem-tnt.System: Current Status and
Plans,&amp;quot; i J Miriker and S. Iosenfeld (e1s.), Proc. Symp. infor
matidn Sorg p and Retrieval, University ofTgryland, College
Park, April 1R71,. 33-46.
15. Kellogg, C. A., Question-Answering in the Converse System, System
Development Corporation, TM 5015, October .1971.
16. Nilsson, N, J., Problem,SoZOing Methods in Artificial Intelligence
McGraw-Hill, New York, 1971.
17. Rulifsotr, J. T., R. J. Waldinger, and J. A. Derksen, &amp;quot;A Language
for Writing Problem-Solving Programs,&amp;quot; Proc. IFIP Congr. 1971
(presented at Ljubljana, Yugoslavia, August 1971).
18. Rulifson, J. F.,_Q44 Programing Concepts, Stanford Research
Institute, Artificial Intelligence Group, Technical Note 60,
August 1371.
19. Woods, W. A., &amp;quot;Procedural Semantics for A Question-Answering
Machine,&amp;quot; Proc. FJCC, Spartan, New York, 1968, 457-471.
20: Hewitt, C., &amp;quot;A Language for Theorems in Robots,&amp;quot; Proc. Int. Joint
Conf. Artificial Intelligence, Washington, D.C., 1969, 295-301.
21, Sussman, G. J., and D. V. McDermott, &amp;quot;From PLANNER to CONNIVER--
A Genetic Approach&amp;quot; (&amp;quot;Why Conniving is Better Than Planning&amp;quot;),
Proc. 1972 FJCC, AFIPS, Vol. 41, Fart II, 1171-1179.
22. Pikes. R. E. &amp;quot;Monitored ExecutiOn
STAIPS,&amp;quot; Proc. IFIP Congr, 1971
Yugoslavia, August 1971). Also
&amp;quot;STRIPS: A New Approach to the
to Problem Solving,&amp;quot; Artificial
of Robot Plans Produced by
(presented at Ljubljana,
see R. E. Pikes and N. J. Nilsson,
4PPIication of Theorem.ProvinS
Intelligence, 2, 1971, 189-208.
23. Slagle, J. R., Artificial. Intelligence: The Heuristic Progrm-ning
Approach, McGraw-Hill, New York, 1971.
24. Garvin, P. L. (ed.), qatural. Language and the Computer, McGraw-
Hill, New York, 19o3.
23
25. Sass, M. A., and W. D. Wilkinson (eds.), Computer Augmentation of
Human Reasoning, Spartan, Washington, D.C., 1965.
26. Martiris, G. R., &amp;quot;Dimensions of Text Processing,&amp;quot; Proc. 1972. FJCC,
AYIPS, Vol. 41, Part II, 801-810.
27. Knuth, D. The Art of Computer Frograving: Vol. i Fundamental
Algorithms, Chap. 2 &amp;quot;Information Structure, &amp;quot; Addison-Wesley,
Reading, Mass. 1968.
28, Shapiro, s.c., The :1DIO.System: A Data Stkuctuke 4ot Seriantic
1n6okmatiOn Pkocessing, The Rand COrporation, R-837-PR, August
1971.
29. Levien, R. E., and M. E. Maxon, &amp;quot;A Computer System for Inference
Execution and Data_Retrieval, Comm. AU, 10, 11, November 1967,
715-721.
0.Kochen, M., D. M. MacKay, M. E. Heron, M. Seriven, and L. Uhr,
ComputeA4 and Comokehension, The Rand Corporation, RM-4065-PR,
April 1964.
31. Kuhns, J. L., An4Weir-ing Que4tionA by Computeks: A Logicae Study,
The Rand Corporation, RM -5428 -PR, December 1967.
32. DiPaola, R., &amp;quot;The Solvability of the Decision Problem for Classes
of Proper Formulas and Related Results,&amp;quot; I ACfl, 20, January
1973, 112-126.
33. Woods, V. A., and R. M. Kaplan, The Lunak ScLente4 Natuka.e. Language
1nSokmation System, Bthl Report 2265, Cambridge, Mass., September
1971.
34. Wpods, W. A., At Expekimentat Aztairlg System 6ox Tkans-ition !le,twoxil
GhdimmaAA, inn Report 2362, Cambridge, lass., May 1972.
35. Woods, W. A., R. M. Kaplan, and B. &apos;Nash-Webber, The Luna/r. Sciences
Natuhae Language 1n6o1umation System; FLwtt Repokt, BEI Report
2378, Cambridge, Mass., June 1972.
36. Dostert, B. H., and F. B. Thompson, ne Sy4tem.o6 REL Engtah,
California Institute of Technology, REL Report 1, September 1971.
37. Dostett, B. H. &amp;quot;REL --An Information System for a Dynamic Environ-
ment,&amp;quot; REL Repokt No. 3, California Institute of Technology,
December 1971.
38. Charniak, E., &amp;quot;Jack and Janet in Search of a Theory of Knowledge,&amp;quot;
Pkoc, Tnt. Joint Con6. mtzcA-4,e Intee,eigerice, Stanford, Calif.,
1973.
24
39. Carbonell, J. R., &amp;quot;AT in CAI: An Artificial IntWigence Approach
to Computer-AssIsted Instruction)&amp;quot; IEEE Titans. Man-:!achine Stptertz
MS-11c December 1970, 190-202.
40. Teitelman, W., &amp;quot;Do What I neat: The Programmer&apos;s Assistant,&amp;quot;
Con pe and Automatton, April 1972, 8-11.
41. &apos;,&amp;quot;Toward a Programming Laboratory,&amp;quot; Rtoc. Int, Jecnt Co115.
Ant4e 72tcnicience, Vashington, D. C., 1969, 3-11
4-
/1
. Teitelman, W., D. C. 3obrow, A. K. Hartley, and D. L. ;.!urphy,
133N-LISP TENEX P.c6menee XaattaE, Bolt Beranek and ;Ian,
Canbriat,*e, Uass., 1972.
43. Zobrist, A. L. and F. R. Carlson, Jr., &amp;quot;An Advice-Taking &apos;Chess
Computer,&amp;quot; Scieittc Arne/ciaw, 228, June 1973, 92.-105.
44. Newell, A., et. al., Speech-Undenstaltding Systerus: Finae RePont
06 a Study aoup, National Technical Information Service, Spring-
field, Virginia.
45. Duda, R. O., and P. E. Hart, &amp;quot;Experiments in the Recognition of
Hand-Printed Text: Part II-Context Analysis,&amp;quot; oc., FJCC,
Spartan, New York, 1963, 1139-1149.
46-. Alter, R., &amp;quot;Utilization of Contextual Constraints in Automatic
Speech Recognition,&amp;quot; IEEE Mau. Audio Etect/tacOuAtic6, AU-16,
March 6-11, 1968.
47. Vicens, P., &amp;quot;Aspects of Speech Recognition by Computer,&apos;. Ph.D.
Dissertation, Stanford University, April 1969. (Also available
U. S. Dept. of Commerce Clearinghouse for Federal Scientific
and Technical Information, AD637720)
48. D. R. Reddy, L. D. Ermanf and R. B. Ueely, &amp;quot;A Model and a System
for Machine Recognition of Speech,&amp;quot; IEEE Thom. Audio Etectkoaccustic.6,
Spec.Zat. Izsue on 1972 Contcekence on Speech Corrtzunication and
Pkoceoung, Vot. AU-21, pp. 229-238, June 1973.
49. V. R. lesser, R. D. Fennell, L. D. trman, and D. R. Reddy, &amp;quot;Organization.
of Hearsay It Speech Understanding System,&amp;quot; IEEE TiLan,sactioat,s on
Acou4tic4, Speech, and Signat PkOCe.5.64.141, (Speciat 146tte on IEEE
Sympo4ium on Speech Recognition), Vot..ASSP-231 pp. 11-24 February,
1975.
50. IEEE ThanzactionA on AcouAticb, Spe.ech, and S.i_gnat PAocessing,
(Speciat. Iszue on IEEE SumpoZium on Speech qccoan)tion) Vo.. ASS?-3.
February 1975.
25
51. W. A, Woods, &amp;quot;Motivation and Overview of SPEECHLIS: An Experimental
Prototype for Speech Understanding Research,&amp;quot; IEEE Thansactions on
Acoustics, Speech, and Signat Pucessing, (Speaxe. Issue on IEEE
SympoAium on Speech Recognition), Vat. ASSP-23, pp. 2-10, February,
1975.
52. W. A. Lea, M. F. Medress, and T. E. Skinner, &amp;quot;A Prosodically Guided
Speech Understanding Strategy,&amp;quot; IEEE Ttansactions on Acoustics., Speech
and Signat PuceA.5).ag (Spec-La Issue on IEEE SvP•po4uun on Speech
Rectai:U.0n), Vo. ASP-23, pp. 30-.3a, February 1975.
53. T. B. Martin, &amp;quot;Applications of Limited Vocabulary Recoghition Systems,&amp;quot;
IEEE Thansactions on ACOU4V44, Speech, and Signat Ptoce64ing,
(Specime Lie. on IEEE Sympo&amp;tun on Sptech Recogni,tion), Vot. ASSP-23
February 1975.
54. Turn, R. A., S. Hoffman, T. Lippiatt, Potentiat Milktaky Apptications
oA Speech Undehstandbig Systems, The Rand Corporation, R-1434,
June 1974.
55. &apos;Zeldman, J. A., J. R. Low, D. C. Swinehart, and R. H. Taylor,
&amp;quot;Recent Developments in SAIL--An Algol-Based Language for
Artificial Intelligence,&amp;quot; Ptoc. /972 FICC, AFIPS, Vol. 41, Part-II,
1193-1202,
56. Scilank, R. C. anon X. M. Colby, edb„ Compute&amp; Modetz oi InougsLt and
Language, W. H. Fr-eeman and Company, San Francisco, 1973.
57. Mks, Y., &amp;quot;no Nachines Understand Nore Than They Did?&amp;quot;, Nat4he,
Va. 252- 22 November, 1974, pp. 275-270.
</reference>
<note confidence="0.717997">
American Journal of Computational Linguistics MiorQfiche 21 : 26
</note>
<sectionHeader confidence="0.889506" genericHeader="method">
CURRENT BIBLIOGRAPHY
</sectionHeader>
<bodyText confidence="0.999355842105263">
The selection of material through the current second year of
AJCL&apos;s existence remains tentative. A survey of subscriber-
members will be included in the last packet mailed during 1975
to establish patterns of coverage for fdture years.
Categorization bf entries deepens as the field defines itself
and the collection of literature against which new items can.
be matched increases. The advice of members is welcome.
Many summaries are authors&apos; abstracts, sOmetimes edited for
clarity, brevity, or completeness. Where possible, an infor-
mative summary is provided.
The Linguistic Documentation Centre of the University of
Ottawa provides many entries; by editorial accident, some
of the entries recently received from that source remain to
be included in the next issue. AJCL gratefully acknowledges
the assistance of Brian Harris and his colleagues.
Some entries are reprinted with permission from Computer
Abstracts.
See the following frames for a list of subject headings and
items with extended presentation or review.
</bodyText>
<sectionHeader confidence="0.532269" genericHeader="method">
SUBJECT HEADINGS
</sectionHeader>
<table confidence="0.997921642857143">
General 30
Phonetics Phonology 34
Recognition 35
Writing
Recognition
Lexicograpny Lexicology
Dictionary 37
Statistics . . 38
Grammar 38
Parser
Semantics - Discourse . 40
Comprehension 45
Expression 47
Memory 1 51
</table>
<sectionHeader confidence="0.940958" genericHeader="method">
REPRESENTATION AND UNDERSTANDING
</sectionHeader>
<figure confidence="0.8129615">
Edited by Daniel G. Bobrow and Allan Collins
27
Linguistics
Methods
Dialectology
Computation 63
Inference 63
Programming 65
STRING AND LIST PROCESSING IN SNOBOL41
TECHNIQUES AND APPLICATIONS
By Ralph E. Griswold
Reviewed by Norman Badler
</figure>
<table confidence="0.977376461538461">
FORTRAN TECHNIQUES WITH SPECIAL REFERENCE
TO NON-NUMERICAL APPLICATIONS
By A. Colin Day
Reviewed by Richard J. Miller
Information structures 71
Pictorial systems 72
Documentation 74
Indexing 78
Retrieval- 79
Thesauri
80
Management &apos;81
Robotics 82.
</table>
<page confidence="0.489169">
28
</page>
<figure confidence="0.974033931034483">
61
29
Social-Behavioral Science 83
Humanities 84
INDEX THOMISTICUS. SANCTI THOMAE AQUINATIS
OPERUM OMNIUM INDICES
Compiled by Roberto Bugs,
A.reView of the first ten
Cot-co:dance
Analysis
ET CONCORDANTIAE
S. J.
volumes by Ford Lewis Battles
90
90
Instruction . 91
General 30
THEORETICAL ISSUES
I N
NATURAL LANGUAGE PROCESSING
AN INTERDISCIPLINARY WORKSHOP IN
COMPUTATIONAL LINGUISTICS
PSYCHOLOGY
LINGUISTICS
ARTIFICIAL INTELLIGENCE
Cambridge, Massachusetts
June 10-13, 1975
and
EDITORS:
</figure>
<table confidence="0.736570870967742">
---
Professor R. Schenk
Department.of Computer Science
Yale University
10 Hillhouse Avenue
New Haven, Connecticut 06520
B, L. Nash-Webber
Bolt Beranek and Newman Inc
50 Moulton street
Cambridge, Massachusetts
02138
AVAIIABLEFROM: Canter for Applied Linguistics
1611 North Kent Street
Arlington, Virginia 22209 PRICE: $7:50
ABSTRACTS FOUND &apos;ELSEWHERE ON THE MICROFICHE
General 31
THE PRAGUE BULLETIN OF MATHEMATICAL
LINGUISTICS
22
Univdrsita Xarlova
Praha 1974
TABLE OF CONTENTS
ON VERBAL FRAMES IN FUNCTIONAL GENERATIVE DESCRIPTION
PART I. J. Panevova 3
STELLUNG UND AUFGABEN DER ALGEBRAISCHEN LINGUISTIK I
(EINFUHRUNGSSTUDIE). P. Sgall 41
REVrEWS
ALGEBRAIC LINGUISTICS IN SOME FRENCH SPEAKING COUNTRIES
(S. Machova) 53
METODIKA rODGOTOVKI INF.ORMATSIONNYKH TEZAURUSOV PEREV S
VENGERSKOGO POD RED I PREDISLOVIEM JU. A. SHREJDERA V
SB. PEREVODOV &amp;quot;NAUCHNO-TEKHNICHESKAJA INFORMATSIJA&amp;quot; VP
17, 1971 (T. Ja. Kazavchinskaja) 74
FORMAL LOGIC AND LINGUISTICS, Mouton, The Hague, 1972
(O. Prochazka) E. Zierer - 74
AUTOMATIC ANALYSIS OF DUTCH COMPOUND WOKDS, Amsterdam 1972
W. A. Ver1oren van Themaat; EXERCISES IN COMPUTATIONAL
LINGUISTICS, Amsterdam 1970, H. Brandt Corstius
(l. Platek, L Vomacka) 7.7
General 32
COMPUTATIONAL ANALYSES
OF ASIAN &amp; AFRICAN LANGUAGES
A new journal
Mantaro J. Hashimoto, Editor
Project on Computational Analysis
National Inter-University Research Institute
of Asian &amp; African Languages &amp; CUltures
4-51-21 N1shigahara, Kitaku, Tokyo
114 Japan
NO. 1 March, 1975
TABLE OF CONTENTS
A STATISTIC STUDY OF NAMES IN TAMIL INSCRIPTIONS
Noboru Karashima and Y. Subbarayalu
IMPLICATIONS OF ANCIENT CHINE St 4KETROFLEX ENDINGS
Mantaro 3. Hashimbto
THE SINO-KOREAN READING OF KENG-SHE RIMES
Mantaro 3, Hashimoto
&amp;quot;TO&amp;quot;, &amp;quot;YUAN&amp;quot; AND &amp;quot;TE&amp;quot;-- A COMPARISON WITH JAPANESE
Masayuki Nakagawa
LARYNGEAL GESTURES AND THE ACOUSTIC CHARACTERISTICS
IN HINDI STOPS--PRELIMINAPY REPORT.
Ryonei Kagaya and Hajime Hirose
</table>
<page confidence="0.946162">
3
17
25
31
47
</page>
<table confidence="0.886141666666667">
General 33
SYNTAX, SEMANTICS. AND SPEECH
William A. Woods
Bolt Beranek and Newman Inc.
Cambridge, Mass 02138
Report No. BAN 3067 Axil 1975
</table>
<tableCaption confidence="0.906318181818182">
Acquaints speech researchers in the state of the art in
the conceptual development of, and the new perspectives they place
on, parsing, syntax and semantic interpretation. Includes the
Chomsky hierarchy of grammar models, non-determinism in parsing
and its implementation in either backtrgcking or multiple indepen-
dent alternatives, predictive vs. non-predictive parsing, word
lattices and chart parsing, Early&apos;s algorithm, transition network
grammars, transformational grammars and augmented transition net-
works, procedural semantics, selectional restrictions and semantic
association.
General 33
</tableCaption>
<sectionHeader confidence="0.770155" genericHeader="method">
IMPROVING METHODOLOGY IN NATURAL LANGUAGE PROCESSING
</sectionHeader>
<subsectionHeader confidence="0.857731333333333">
William C. Mann
USC Information Sciences Institute
Marina Del Rey, California
</subsectionHeader>
<note confidence="0.5795115">
In: R. Schank and B.L. Nash-Webber, eds., Theoretical Issues in Natural Language
Processing, 2975, 226-229:
</note>
<bodyText confidence="0.988563642857143">
Process models are rigorous, process specifications are made
very explicit, and complexity is handled by use of computers. A
methodology should be reliable, efficient and have integrative
power. The distinctive strengths of the current computer oriented
methodology are (a) the complexity of data and theory is easy to
accommodate, (b) time sequence and dependencies are preserved, and
(c) a diversity of hypotheses can be tested. Weaknesses are (a)
experiments often take years to perform, (b) the activity is treated
as a programming exercise with the status of data and program un-
clearly defined and (c) in attempting to be general on a particular
phenomenon, significant others are missed. As whole systems are
produced, they are difficult to disseminate and judge. A system may
process its examples, but it is hard to determine if it is ad-hoc
and tuned to the examples.
</bodyText>
<note confidence="0.6477355">
General 34
SOME METHODOLOGICAL ISSUES IN NATURAL LANGUAGE UNDERSTANDING RESEARCH
</note>
<subsectionHeader confidence="0.608423333333333">
W. A. Woods
Bolt Beranek and Newman, Inc
Cambridge, Mass
</subsectionHeader>
<subsubsectionHeader confidence="0.433231">
In: R. Schenk and B.L. Nash-Webber eds. Theoretical rssues in Natural Language
Processing, 1975, 134-239.
</subsubsectionHeader>
<bodyText confidence="0.9789683">
There are two tasks for which methodologies are used, (a)
building intelligent machines, and (b) understanding human language
performance, Both depend on the development of a &apos;device-indepen-
dent&apos; language, understanding theory. For theoretical studies, a
methodology should be cognitively efficient and should deal effect-
ively with the problem of scale--having a large number of facts
embodied in the theory. Studies should be performed in the context
of total language understanding; isolation of components limits
scope. Intuition on human language performance is a good guide to
computational linguistics.
</bodyText>
<table confidence="0.871294916666667">
Phonetics - Phonology : ,Recognition 34
SPEECH RECOGNITION BY COMPUTER: A BIBLIOGRAPHY WITH ABSTRACTS
D. W. Grooms
National Technical Information Service
5285 Port Royal Rd.
Springfield, Virginia 22161
Report No. Com-74-11435/6, September 1974. Price: $20.00
Contains 142 abstracts covering recognition, synthesis, and
the acoustical, phonological and linguistic processes necessary in
conversion of various waveforms. Retrieved using the National
Technical Information service on-line search system.
Writing - Recognition 35
</table>
<sectionHeader confidence="0.590172" genericHeader="method">
FUZZY LOGIC FOR HANDWRITTEN NUMERICAL CHARACTER RECOGNITION
</sectionHeader>
<subsectionHeader confidence="0.779179">
P. Siy and C. S. Chen
Akron University
IEEE Transactions on Systems, Man and Cybernetics, $MC -47 570-575, 1974
</subsectionHeader>
<bodyText confidence="0.971312">
Considers characters as a directed abstract graph, of which
the node set consists of tips, corners, and junctions, and the
branch set consists of line segments connecting pairs of adjacent
nodes. Classification of branch types produces features which are
treated as fuzzy variables. A character is represented by a fuzzy
function which relates its fuzzy variables, and by the node pair
involved in each fuzzy variable. After producing a representation
of an unknown character recognition occurs when a previously learned
character&apos;s representation is isomorphic to the unknown.
Writing : Recognition 35
</bodyText>
<sectionHeader confidence="0.94464" genericHeader="method">
A MEANS OF ACHIEVING A HIGH DEGREE OF COMPACTION
ON SCANDIGITIZED PRINTED TEXT
</sectionHeader>
<subsectionHeader confidence="0.950987">
R. N. Ascher and G. Nagy
IBM Corporation
IEEE Transactions on Computers, C-23, 1174-1179, 1974
</subsectionHeader>
<bodyText confidence="0.99828025">
A 16:1 compaction ratio was achieved by storing only the first
instance of each pattern class and thereafter substituting this exem-
plar for every subsequent occurrence of the symbol. Proposed are
refinements to yield a 40:1 ratio.
</bodyText>
<table confidence="0.566792">
Writing : Recognition 36
THE MORPHOLOGY OF CHINESE CHARACTERS
A SURVEY OF MODELS AND APPLICATIONS
William Stallings
Center for Naval Analyses
Arlington, Virginia
</table>
<tableCaption confidence="0.5663264">
Computers and the Uumanities 9, 1: 13-24, 1975
Various proposals are discussed, principally (1) Rankin,
who has a two-level grammar, the first gives the strokes and
rules for combination and the second explicates the order, with
a recursive definition of subframes. (2) Fujimara has an inven-
</tableCaption>
<table confidence="0.5038534">
tory of strokes and operators. For each stroke 3 functional
points are isolated and operators define the linking by reference
to these points. Applications include keyboard input, storage
and retrieval or characters, and automatic recognition. There
are two different approaches. One seeks a logically efficient
system; the other one that seems natural to a user of the language.
Writing : Recognition 36
LHIMESE CHARACTER RECOGNITION BY A STOCHASTIC SECTIONALGRAM METHOD
Y-L. Ma
National Taiwan University
</table>
<subsubsectionHeader confidence="0.411519">
IEEE Transactions on Systems, Man and Cybernetics, SMC-4; 575-594, 1974
</subsubsectionHeader>
<bodyText confidence="0.99885225">
An approach to recognition of a block picture by comparing
it with stochastic sectionalgrams obtained by grouping many samples.
To calculate the risk, the absolute values of the differences be-
tween the stroke-occurrence probabilities of corresponding quanta
in the two sectionalgrams are summed one of these two sectional-
grams being derived from the input pattern and the other from the
prototype pattern. The smaller the sum of these differences is,
the more accurate the input pattern recognition.
</bodyText>
<figure confidence="0.394378">
Writing. : Recognition 37
COMPUTER IDENTIFICATION OF CONSTRAINED HAND PRINTED CHARACTERS
WITH A HIGH RECOGNITION RATE
W. C. Lin and T. L. Scully
Case Western Reserve University
Cleveland, Ohio
ISMS Transactions on Systems, Man and Cybernetics, SMC-4, 497-504, 2974
</figure>
<bodyText confidence="0.996026666666667">
Hand printed .on a standardizing grid made of twenty line seg-
ments, yielding twenty features, and input using a television camera,
49 character classes were recognized at a greater than 99.4% rate.
Feature values calculated utilizing a Gaussian point-to-line distance
concept were used in a weighted minimum distance classifier. All
character-dependent data are obtained through training techniques
Both statistical linear regression and averaging methods are used
to obtain the parameters defining each character class in feature
space.
</bodyText>
<table confidence="0.579173833333333">
Lexicography - Lexicology. : Dictionary 37
THE PHRASAL LEXICON
Joseph D. Becker
In: R. Schenk and B.L. Nash-Webber, eds., Theoretical issues in Natural LanguagQ
Processing, 1975, 60-63.
We speak mostly by conjoining remembered phrases. Productive
</table>
<tableCaption confidence="0.3702415">
processes have secondary roles of adapting old phrases to new situ-
ations and of gap filling.
</tableCaption>
<table confidence="0.990431125">
Lexicography - Lexicology Statistics 38
PROGRAMS FOR LINGUISTIC STATISTICS
PART 1: WORD ROOTS IN SCIENTIFIC AND TECHNICAL RUSSIAN
(Programme zur Sprachstatistik. Te$1 1:
WortstAmme in russischen naturwissenschaftlichen und technischen,Fachsprachen)
S. Halbauer
Rngewandte Informatik, 16: 469-470, 1974
Description of a program, written in machine language, that
searches for words containing a fixed stem from Russian mathematical
texts.
Grammar : Parser 38
AUGMENTED PHRASE STRUCTURE GRAMMARS
George E. Heidorn
Computer Sciences Dept.
IBM Watson_ Research Center
Yorktown Heights, NY
</table>
<subsubsectionHeader confidence="0.469644">
In R. Schenk and B.L. Nash-Webber, eds., Theoretical Issues in Natural Language
Processing, 1-5, 1975.
</subsubsectionHeader>
<bodyText confidence="0.7917955">
Augmented phrase structure grammars consist of phrase struc-
ture rules with embedded conditions and structure building actions
Data structures are records consisting of attribute-value pairs.
Records can be actions, wards, verb phrases, etc. There are three
kinds of attributes: relations, whose value is a pointer to other
records; properties, with values either numbers or character
strings; and indicators, whose values have a role similar to lin-
guistic featires. Structure building rules .have a left part indi-
cating the contiguous segments that must be present for a structure
building operation, given in a right part, to apply.
</bodyText>
<note confidence="0.563251">
Grammar: Parser. 39
DIAGNOSIS AS A NOTION OF GRAMMAR
</note>
<subsectionHeader confidence="0.95992925">
Mitchell Marcus
Artificial Intelligence Laboratory
Massachusetts Institute of Technology
Cambridge
</subsectionHeader>
<subsubsectionHeader confidence="0.899817">
In R. Schenk and B. L. Nash-Webber, ed., Theoretical IssueS in Natural Language
Processing, 1975, 6-10.
</subsubsectionHeader>
<bodyText confidence="0.967178461538461">
The hypothesis is that every language user knows as pat of
his recognition grammar, a set of highly specific diagnostics that
he uses to -decide deterministically what structure to build next at
each point in the process of parsing a sentence. This theory re-
jects &apos;backup as a standard control mechanism for parsing. A
grammar is a set of modules. The parser works on two levels, a
group level and a clause level. Group level modules work on a word
buffer and build group level structures. Modules have a pattern,
a pretest procedure and a body to be executed if the pattern matches
and the pretest succeeds. If the parser fails, it keeps the struc-
ture constructed to date, and makes whatever substructures it can
from the remaining part.
Grammar : Parser 39
</bodyText>
<sectionHeader confidence="0.962871" genericHeader="method">
SOME PROGRAMMING ASPECTS OF COMPUTERS WITH NATURAL LANGUAGE
</sectionHeader>
<subsectionHeader confidence="0.95870225">
William White
National Institutes of Health
Diviston of Computer Research and Technology
Bethesda, Maryland
</subsectionHeader>
<subsubsectionHeader confidence="0.478096">
Journal of Clinical Computing, 3, 100-102, 1973
</subsubsectionHeader>
<bodyText confidence="0.6318245">
A morphological analyzer is written in PL/1 using a recursive
macro actuated generator. Called with a word as argument it returns
a stem, part of speech, possible transformations, and semantic infor-
mation.
</bodyText>
<figure confidence="0.536829333333333">
Semantics - Discourse 40
TOPIC ANALYSIS
Brian Phillips
</figure>
<affiliation confidence="0.70642">
Department of Information Engineering
University of Illinois at Chicago Circle
</affiliation>
<subsubsectionHeader confidence="0.562733">
Doctoral dissertation, State University of New York, Buffalo, 1975
</subsubsectionHeader>
<bodyText confidence="0.998627611111111">
A theory for the structure of discourse is developed. It
is shown that propositions of a coherent discourse must be logic-
ally connected and exhibit a hierarchic thematic structure that
has a single root. An example of a logical connective is &apos;Cause&apos;;
a theme is a generalized pattern that is associated with a single
word, e.g., &apos;poison&apos; is describable as &apos;Someone ingests something
that causes him to become ill&apos;. A theme applies to a discourse
if tts definiens matches part of the discourse. The topic of a
coherent discourse is its matrix theme; an illformed discourse
has no topic.
Not all discourse structure is expressed. If omitted, it
must be inferrable. The process of inferente requires a store of
world knowledge - encyclopedic knowledge. An encyclopedia is des-
cribed that contains all the devices required by the discourse
analysis problem. In fact, the encyclopedia is a general model
for human cognition and is applicable to many diverse cognitive
tasks. The encyclopedia is a directed graph. Categories of nodes
and arcs, and of processes, are presented in detail.
</bodyText>
<table confidence="0.835175166666667">
Semantics - Discourse 41.
ON &amp;quot;FUZZY&amp;quot; ADJECTIVES
Fred J. Damerau
IBM Watson Research Center
Yorktown Heights1, N.Y.
Report No. RC 5340 March 27, 1975
</table>
<figureCaption confidence="0.822012222222222">
Discusses some of the problems that arise when the concept
of a linguistic variable is combined with the concept of a fuzzy
set: the range of the numerical base variable, in ordering usage,
is not fixed for a given linguistic variable. Does not explain the
computation of values of compound expressions from the values of
their components. Not all adjectives can be related to an under-
lying numerical base. Other features involved in a complete anal-
ysis are: average value, typical value, observed value, standard
deviation of values and polarity.
</figureCaption>
<bodyText confidence="0.582355">
(DIstribution limited prior to publications)
Semantics - Discourse 41
</bodyText>
<sectionHeader confidence="0.49003" genericHeader="method">
USER&apos;S GUIDE TO THE SOLAR THEORETICAL BACKGROUNDS FILE
</sectionHeader>
<reference confidence="0.476973">
Timothy Diller and Tom Bye
System Development Corporation
Santa Monica, California 90406
Report No. TM-5292/002/00 April 1975
</reference>
<bodyText confidence="0.9356002">
For each analysis in the semantic analysis file the author&apos;s
theoretical orientation, his assumptions, and his notational conven-
tions are entered on this file. The data fields are: identifying
number, document source, related sources, words analyzed, conventions,
theoretical basis including - acknowledgements, asaumptions, stated
purpose, and limits, a SOLAR critique, and the name of the person
responsible for the entry. This file is available via on-line
queries or in a listing format. The file can be searched using the
identifying number on document source fields. Other fields can be
searched using a string-matching facility.
</bodyText>
<table confidence="0.6845255">
Semantics - Discourse 42
USER S GUIDE TO THE SOLAR SEMANTIC ANALYSIS PILE
Tom Bye, Timothy Diller, and John Olney
System Development Corporation
Santa Monica, California 90406
Report No. TM-5292/001/00 April 1975
</table>
<bodyText confidence="0.993171888888889">
This file pontains formal descriptions of word meanings,
including qualifications, informal explanations, and criticisms of
descriptions. The wards used are found in the lexicons of the
Speech Understanding Research groups being sponsored by ARPA. The
semantic analysis produces 23 data fields for each word, of which
the following are searchable: word, domain analysis number, source
part of speech and components Other fields can be searched using
a string matching facility. This file is available via on-line
queries or in a listing format.
</bodyText>
<table confidence="0.762789666666667">
Semantics - Discourse. 42
USER&apos;S GUIDE TO THE SOLAR BIBLIOGRAPHY FILE
Timothy Diller
System Development Corporation
Santa Monica, California 90406
Report No. TM-5292/000/02 December 1974
</table>
<bodyText confidence="0.956184125">
This file provides the citations to the documents rafter-
enced in other SOLAR files. Thirty data tields are used, of which
the following are searchable: author, year, index term, document
type, subject ID, document number, and Bell ID. Other fields can
be searched using a string-matching facility. This file available
via on-line queries or in a listing tormat including an aUthor.
keyword and tequence number index.
Semantics - Discourse 43
</bodyText>
<sectionHeader confidence="0.938953" genericHeader="method">
PRIMITIVES AND WORDS
</sectionHeader>
<subsectionHeader confidence="0.957228">
Yorick Wilks
Istituto per Gil Studi
Semantici e Cognitivl
Castagnola, Switzerland
</subsectionHeader>
<subsubsectionHeader confidence="0.4839615">
In R. schank and B.L_ Nash-Webber, eds., Theoretical Issues in Natural Language
Processing, 1975, 38,41.
</subsubsectionHeader>
<bodyText confidence="0.992853307692308">
If semantic primitives are seen as essentially different
from words, this leads to attempts to justify them directly,
usually psychologically. Otherwise the justification is merely
that they work. Primitives can be taken as a small natural
language, with no essential difference between primitives and
words. But the set of primitives cannot be extended indefinitely,
otherwise the distinction between the representation and the
natural language will be lost. If it is not possible to escape
from natural language into another realm, one cannot separate
semantic representation from reasoning as is attempted. It is
probably more sensible to say that natural language understanding
depends on reasoning rather than vice-versa,
Semantics - Discourse 43
</bodyText>
<sectionHeader confidence="0.944864" genericHeader="method">
META-COMPILING TEXT GRAMMARS AS A MODEL FOR HUMAN BEHAVIOR
</sectionHeader>
<subsectionHeader confidence="0.947258">
Sheldon Klein
Computer Sciences Department
University of Wisconsin
Madison
</subsectionHeader>
<subsubsectionHeader confidence="0.637547">
In: R. Schenk and B.L. Nash-Webber, eds., Theoretical Issues in Natural Language
Processing, 1975, 84-88.
</subsubsectionHeader>
<bodyText confidence="0.998698">
A key feature of the system is that the semantic deep struc-
ture of the non-verbal, behavioral, rules may be represented in the
same network as the semantics for natural language grammars, and,
as a consequence, provide non-verbal context for linguistic rules.
The total system has the power of at least the 2nd Order predicate
calculus.
</bodyText>
<note confidence="0.441093">
Semantics - Discourse 44
THE PRIMITIVE ACTs OF CONCEPTUAL DEPENDENCY
</note>
<subsectionHeader confidence="0.659875333333333">
Roger C. Schank
Yale University
New Haven, Connecticut
</subsectionHeader>
<subsubsectionHeader confidence="0.646413">
In R. Bohan* and B.L. Nash-Webber, eds., Theoretical Issues in Natural Language
Processing, 1975, 34-37.
</subsubsectionHeader>
<bodyText confidence="0.801062818181818">
Canonical representations of conceptualir,ations are composed
of an ACTOR, an ACTION and a set of ACTION dependent cases. The 12
primitive actions are ATRANS, transfer of possession; PTRANS, trans-
fer of physical location; MTRANS, transfer of information; PROPEL,
application of physical force; MBUILD construction of new concep-
tual information; INGEST, taking in of an object by an animal;
GRASP, to grasp; ATTEND, to focus sense organ on an object; SPEAK,
to make a noise; MOVE, to move a body part; EXPEL, to push something
out of the body; and PLAN, which characterizes the ability to form
a course of action that leads to a goal.
Semantics - Discourse 44
</bodyText>
<sectionHeader confidence="0.6305955" genericHeader="method">
COMMENTS ON LEXICAL ANALYSIS
George A. Miller
</sectionHeader>
<reference confidence="0.631480333333333">
In R. Schank and ELL. Nash-Webber, eds., Theoretical Issues in Natural Language
Processing, 1975, 30-33.
An analysis of the verb &apos;hand&apos; is paraphrased as: &apos;S had
Y prior to some time t at which X used his hand to do something
that caused Y to travel to Z, after which Z had Y&apos; The analysis
includes a discussion of the subsumed doncepts HAPPEN, USE, ACT,
CAUSE, ALLOW, BEFORE, TRAVEL, and AT.
Semantics - Discourse 45
A SYSTEM OF SEMANTIC PRIMITIVES
Ray Jackendoff
Department of English
Brandeis University
In R. Schenk and B.Z. Nash-Webber, eds. Theoretical Issues in Natural Language
Processing, 1975, 24-29.
Primitive functions GO, BE and STAY can be extended from a
positional interpretation to possessional and identificational in-
terpretations. Two kinds of pause are distinguished, CAUSATIVE
and PERMISSIVE. Inference rules based on the form of semantic
representations derive logical entailments. e.g. CAUSE, (X,E)-- E.
Semantics - Discourse • Comprehension 45
COMPUTATIONAL UNDERSTANDING
Christopher K. Rtesbeck
in R. Schenk And. B;L: Nash-Webber, eds., Theoretical Issues in Natural Language
Processing, 1975, 11-16.
</reference>
<bodyText confidence="0.954288363636364">
Comprehension is a. memory process; breaking computational
understanding into subproblems of parsing and semantic ihterpre-
tation has hindered progress with much effort wasted on the con-
struction of parsers. A system is described in which a monitor
takes words from a sentence one at a time, from left to right.
From a lexicon expectations. of the word (or its root) are added
to a master list of expectations. If an element of the master
list evaluates to &apos;true&apos;, programs associated with the element
are executed. The final structure built by the triggered expecta-
tions is the meaning af the sentence.
Semantics - Discourse : Comprehension 46
</bodyText>
<sectionHeader confidence="0.660954" genericHeader="method">
DOES A STORY UMDERSTANDER NEED A POINT OF VIEW?
</sectionHeader>
<reference confidence="0.9885132">
Robert F. Abelson
Yale University
New Haven Connecticut
In R. Schenk and B.L. Nash-Webber, Eds., Theoretical Issues in Natural Language
Processing, 1975, 140-143.
</reference>
<bodyText confidence="0.933336">
Reasoning may be propositional or by mental simulation using
visual imagery. In the latter situation, do people include acts
and objects not present in a given story, but necessary to carry
out the simulation. This has not yet been experimentally tested.
Experiments have shown that a listener may simulate a story from
the point of view of an observer or of a participaht in the story.
One problem that this raises for Al, if a program can construct an
interconnected structure from the text, is the non-uniqueness of
this meaning representation. Another problem is that programs should
not be designed to preserve all details, but then, what should be
forgotten; point of view may be useful here
Semantics Discourse : Compreher46on 46
</bodyText>
<sectionHeader confidence="0.684784" genericHeader="method">
BRIDGING
</sectionHeader>
<reference confidence="0.9885418">
Herbert H. Clark
Stanford University
Stanford, California
In; A. Schenk and B.L. Mash-Webber, Me., Theoretical Issues in Natural Language
Processing, 1975, 169-174.
</reference>
<bodyText confidence="0.944970066666667">
Listeners draw inferences from what they hear, but different
listeners can make different inferences. One kind of inference in
comprehension is in the context of given-new information; the speaker
tries to construct the given and new information of each utterance,
so that the listener is able to compute unique antecedents for the
given information, and so that he will not already have the new in-
formation attached to the antecedent. Inference mechanisms include
direct reference, identity, pronominalization, epithets, set member-
ship, indirect reference by association, indirect reference by
characterization, reasons, causes, consequences, and concurrences.
Bridging inferences need not be determinate, but in discourse they
seemingly are, and further, are the inferences with fewest assump-
tions. Both backward and forward inferences are possible, but only
the former are determinate.
Semantics - Discourse : Comprehension 47
</bodyText>
<sectionHeader confidence="0.953864" genericHeader="method">
COMPUTERS AND NATURAL LANGUAGE
</sectionHeader>
<reference confidence="0.963647113636364">
A. W. Pratt, M. G. Pacak, M. Epstein and G. Dunham
National Institutes of Health
Division of Computer Research and Technology
Bethesda, Maryland
Journal of Clinical Coaputing, 3, 85-99, 1973
The Systematized Nomenclature of Pathology (sNOP), in use at
NIH, consists of about 15,000 entries in four lists: topography,
morphology, etiology, and function. Only a few binary relations on
terms are needed; e.g., location of morphology, (lesion) at topog-
raphy (body site). Numerous relations on the primary relational
triples evidently have to be defined.
Semantics - Discourse : Expression 47
GENERATION AS A SOCIAL ACTION
Bertram C. Brace
Bolt Beranek &amp; Newman
Cambridge, Mass 02138
In: R. Schank and B.L. Nash-Webber, eds., Theoretical Issues it Natural Language
Processing, 1975, 64-67.
Generation is a two stage process. The first formulates a
plan and the second expresses these intentions; there is feedback
between the stages. Intentions can be encoded by (i) establish-
ing presuppositions, (ii) by linguistic conventions, and (iii) by
discourse structure. A_Soci.al Action Paradigm is a model of the
flow of social actions.
Semantics - Discourse : Expression 48
THE BOUNDARIES OF LANGUAGE GENERATION
Neil M. Goldman
Information Sciences Institute
University of Southern California
In: R. Schenk and B.L. Nash-Webber, eds., Theoretical Issues in Natural Language
Processing, 1975, 74-78.
In generating natural language from a conceptual structure
words and syntactic structure must be deduced from the information
content of the message. Words are accounted for by a pattern mat-
ching mechanism, a discrimination net. The case framework of verbs
is one source of knowledge for choice of syntactic structure.
Semantics - Discourse : Expression 48
SPEAKING WITH MANY TONGUES: SOME PROBLEMS IN MODELING SPEAKERS
OF ACTUAL DISCOURSE
John H. Clippinger, Jr.
Teleos
Cambridge, Hass 02138
In: R. Schenk and B.L. Nash-Webber, eds., Theoretical Issues in Natural Language
Processing, 1975, 68-73
</reference>
<bodyText confidence="0.973557272727273">
In therapeutic discourse the subject is not so much gener-
ating discourse as regulating it. Statements are made, retracted,
qualified and restated. The ERMA model simulates this. It has
five stages, represented as CONNIVER contexts. The discourse
stream has its source in a special program and then flows back
and forth between the contexts before achieving its final expres-
sion. Each context determines suitability for expression; whether
it should be censored or passed on with suggestions for modifica-
tion. Concepts are represented by means similar to Minsky&apos;s
frames.
Semantics - Discourse : Expression 49
</bodyText>
<sectionHeader confidence="0.970159" genericHeader="method">
CONSIDERATIONS FOR COMPUTATIONAL THEORIES OF SPEAKING:
SEVEN THINGS SPEAKERS DO
</sectionHeader>
<reference confidence="0.9869238">
John H. Clippinger, Jr.
Teleos
Cambridge, Mass 02138
In: R. Schenk and B.L. Nash-Webber, eds., Theoretical Issues,in Natural Language
Processing, 2975, 122-125.
</reference>
<bodyText confidence="0.8407473">
Technological computational linguistics is primarily con-
cerned with software technology whereby computers can use and pro-
cess natural language. Descriptive computational linguistics uses
the computer ag a means of developing an accurate and empirically
valid model of linguistic and cognitive behaviors of human speakers.
There is no inherent representation of intentions in the former, and
experience is that it cannot easily be generalized to. the latter.
One problem of modeling is that important things are often hidden
by their familiarity.
Semantics - Discourse : Expression 49
</bodyText>
<sectionHeader confidence="0.482087" genericHeader="method">
CREATIVITY IN VERBALIZATION AS EVIDENCE FOR ANALOGIC KNOWLEDGE
</sectionHeader>
<reference confidence="0.985407">
Wallace L. Chafe
Department of Linguistics
University of California
Berkeley
In: R. Schenk and B.L. lash-Webber, Eds., Theoretical Iggues in Natural Language
Processing, 1975, 144-145.
</reference>
<bodyText confidence="0.957324285714286">
Both propositional and non-propositional knowledge must exist.
Interpretive processes during perception individuate and categorize
objects. If an object cannot be categorized then the object will
be stored with analogic information. During verbalization analogic
images will be compared with available category prototypes to decide
on the best match for use in the utterance.
Semantics - Discourse : Memory 50
</bodyText>
<sectionHeader confidence="0.9813145" genericHeader="method">
REPRESENTATION AND UflDERSTANDING
STUDIES IN COGNITIVE SCIENCE
</sectionHeader>
<reference confidence="0.905070272727273">
edited by
Daniel G. Bobrow Allan Collins
Xerox Palo Alto Research Center Bolt Beranek and Newman
Palo Alto, California Cambridge, Massachusetts
Academic Press
1975
Dedicated to the memory of
JAIME CARBONELL, 1928-1973
I. THEORY OF REPRESENTATION
1. Dimensions of representation Daniel G. Bobrow . . 1
2. What&apos;s in a link: Foundations for semantic networks 35
William A. Woods 83
3. Reflections on the formal description of behavior
Joseph D. Becker
4. Systematic understanding: Synthesis, Analysis, and
contingent knowledge in specialized understanding
systems Robert J. Bobrow and John Seely Brown . . . 103
II NEW MEMORY MODELS
5. Some principles of Memory schemata Daniel G. Bobrow
and Donald A. Norman 131
6. A frame for frames: representing knowledge for
recognition Benjamin J. Kuipers 151
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.004638">
<note confidence="0.544636571428571">Journal of Computational Linguistics NEWSIsETTER OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS computer in natural language processing by Allen Klinger - 2 Current bibliography - 26 AMERICAN JOURNAL Or COMPUTATIONAL LINGUISTICS is published by</note>
<title confidence="0.7033925">the Center for Applied Linguistics for the Association for Computational Linguistics</title>
<author confidence="0.58195825">David G Hays of Linguistics</author>
<author confidence="0.58195825">of Computer Science State University of New York</author>
<author confidence="0.58195825">Buffalo STAFF F Lesinski Pro Tem Brendle</author>
<note confidence="0.581631">EDITORIAL ADDRESS Twin Willows, Warvikah, New York 14075 EDITOR A. Hood Roberts Director, Applied Linguistics</note>
<author confidence="0.950801">MANAGEMENT STAFF Nancy Jokovich</author>
<author confidence="0.950801">David Hoffman</author>
<affiliation confidence="0.800664">PRODUCTION AND SUBSCRIPTION? ADDRESS 1611 North Kent Street,</affiliation>
<address confidence="0.972108">Arlington, Virginia 22209</address>
<note confidence="0.937469">CopyrLght 1975 Association for Computational Linguistics Journal of Computational Linguistics 21 : 2</note>
<title confidence="0.98283">RECENT COMPUTER SCIENCE RESEARCH IN NATURAL LANGUAGE PROCESSING</title>
<author confidence="0.998594">ALLEN KLINGER</author>
<affiliation confidence="0.997854333333333">Computer Science Deportment SchoOl of Engineering and Applied Science University of California, Los Angeles</affiliation>
<abstract confidence="0.999848466666667">he machine translation problem has recently been replaced by much narrower goals and computer processing of language has become part Of artificial intelligence (Al), speech recognition, and structural pattern recognition. These are each specialized computer science research fields with distinct objectives and assumptions. The narrower goals involve making it possible for a computer user to employ a near natural-language mode for problem-solving, information retrieval, and other applications. Natural computer responses have also been created and a special has been used to describe the resulting computek-human dialogues. The purpose of this paper is to survey these recent developments to make the Al literature accessible to researchers mainly interested in computation on written text or spoken language.</abstract>
<intro confidence="0.947268">3</intro>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>J Nievergelt</author>
<author>J C Farrar</author>
</authors>
<title>What Machines Can and Cannot Do,&amp;quot;</title>
<date>1972</date>
<journal>Computing Surveys,</journal>
<volume>4</volume>
<pages>81--96</pages>
<contexts>
<context position="6448" citStr="[1]" startWordPosition="931" endWordPosition="931">e to be processed increases. Success on artificial domains cannot imply a great deal about processing truly natural language. 3. PROGRAM SYSTEMS The systems cited in this section answer questions, perform commands, or conduct dialogues. 6 Programs that enable a user to execute a task via computer in an on-line mode are generally called &amp;quot;interactive&amp;quot; Some systems are so rich in their language-processing capability that they are called &amp;quot;conversational&amp;quot; Systems that have complicated capabilities and can reply with a sophisticated tesponse to an inquiry are called &amp;quot;question answering&amp;quot;. The survey [1] discusses two &amp;quot;conversational&amp;quot; ptograms ELIZA [2, 3] and STUDENT [4], which answers questions regarding algebraic word problems. SIR [5] answers questions about logic. Both [41 and [5] appear in [6], the introdirction there provides a general discussion of &amp;quot;semantic information and computer programs involving &amp;quot;semantics&amp;quot; The &amp;quot;question-answering&amp;quot; program systems described in [2, 3, 4, 5] were sophisticated mainly in methods of solving a problem or determining a response to a statement. Other systems have emphasized the retrieval of facts encoded in English. The &amp;quot;blocks-world&amp;quot; system described </context>
<context position="8234" citStr="[1]" startWordPosition="1197" endWordPosition="1197">xisting relationships among the blocks. 7 The effect of [7] was to provide a sophisticated example of computer &amp;quot;understanding&amp;quot; which led to attempts to apply similar principles to speech inputs. (More detail on parallel developments in speech processing is presented later.) The early &amp;quot;language-understanding&amp;quot; systems, BASEBALL [9], ELIZA, and STUDENT, were based on two special formats: one to represent the knowledge they store and one to find meaning in the English input. They discard all input information which cannot be transformed for internal storage. The comparison of ELIZA and STUDENT in [1] is with regard to the degree of &amp;quot;understanding&amp;quot; ELIZA responds either by transforming the input sentence (essentially mimicry) following isolation of a key word or by using a prestored content-free remark. STUDENT translates natural-language &amp;quot;descriptions of algebraic equations, ... proceeds to identify the unknowns involved and the relationships which hold between them, and (obtains and solves) a set of equations&amp;quot; [1, p 85]. Hence ELIZA &amp;quot;understands&amp;quot; only a few key words; it transforms these words via a sentence-reassembly rule, discards other parts of the sentence, and adds stock phrases to</context>
</contexts>
<marker>1.</marker>
<rawString>Nievergelt, J., and J. C. Farrar, &amp;quot;What Machines Can and Cannot Do,&amp;quot; Computing Surveys, 4, June 1972, 81-96.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Weizenbaum</author>
</authors>
<title>ELI2A--A Computer Program for the Study of Natural Language Communication Between Man and Machine,&amp;quot;</title>
<date>1966</date>
<booktitle>Comm. ACM 9,</booktitle>
<pages>36--45</pages>
<contexts>
<context position="6501" citStr="[2, 3]" startWordPosition="937" endWordPosition="938"> domains cannot imply a great deal about processing truly natural language. 3. PROGRAM SYSTEMS The systems cited in this section answer questions, perform commands, or conduct dialogues. 6 Programs that enable a user to execute a task via computer in an on-line mode are generally called &amp;quot;interactive&amp;quot; Some systems are so rich in their language-processing capability that they are called &amp;quot;conversational&amp;quot; Systems that have complicated capabilities and can reply with a sophisticated tesponse to an inquiry are called &amp;quot;question answering&amp;quot;. The survey [1] discusses two &amp;quot;conversational&amp;quot; ptograms ELIZA [2, 3] and STUDENT [4], which answers questions regarding algebraic word problems. SIR [5] answers questions about logic. Both [41 and [5] appear in [6], the introdirction there provides a general discussion of &amp;quot;semantic information and computer programs involving &amp;quot;semantics&amp;quot; The &amp;quot;question-answering&amp;quot; program systems described in [2, 3, 4, 5] were sophisticated mainly in methods of solving a problem or determining a response to a statement. Other systems have emphasized the retrieval of facts encoded in English. The &amp;quot;blocks-world&amp;quot; system described in [71 contrasts with these in that it has sophistica</context>
</contexts>
<marker>2.</marker>
<rawString>Weizenbaum, J., &amp;quot;ELI2A--A Computer Program for the Study of Natural Language Communication Between Man and Machine,&amp;quot; Comm. ACM 9, January 1966, 36-45.</rawString>
</citation>
<citation valid="false">
<authors>
<author>J Weizenbaum</author>
</authors>
<title>Contextual Understanding by Computers,&amp;quot;</title>
<booktitle>Comm. ACM /0,*August 197,</booktitle>
<pages>474--480</pages>
<contexts>
<context position="6501" citStr="[2, 3]" startWordPosition="937" endWordPosition="938"> domains cannot imply a great deal about processing truly natural language. 3. PROGRAM SYSTEMS The systems cited in this section answer questions, perform commands, or conduct dialogues. 6 Programs that enable a user to execute a task via computer in an on-line mode are generally called &amp;quot;interactive&amp;quot; Some systems are so rich in their language-processing capability that they are called &amp;quot;conversational&amp;quot; Systems that have complicated capabilities and can reply with a sophisticated tesponse to an inquiry are called &amp;quot;question answering&amp;quot;. The survey [1] discusses two &amp;quot;conversational&amp;quot; ptograms ELIZA [2, 3] and STUDENT [4], which answers questions regarding algebraic word problems. SIR [5] answers questions about logic. Both [41 and [5] appear in [6], the introdirction there provides a general discussion of &amp;quot;semantic information and computer programs involving &amp;quot;semantics&amp;quot; The &amp;quot;question-answering&amp;quot; program systems described in [2, 3, 4, 5] were sophisticated mainly in methods of solving a problem or determining a response to a statement. Other systems have emphasized the retrieval of facts encoded in English. The &amp;quot;blocks-world&amp;quot; system described in [71 contrasts with these in that it has sophistica</context>
</contexts>
<marker>3.</marker>
<rawString>Weizenbaum, J., &amp;quot;Contextual Understanding by Computers,&amp;quot; Comm. ACM /0,*August 197, 474-480.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D G Bobrow</author>
</authors>
<title>Natural Language Input for a Computer Problem Solving System,&amp;quot;</title>
<date>1968</date>
<booktitle>Semantic Information Processing,</booktitle>
<pages>135--215</pages>
<editor>in M. Minsky (ed.),</editor>
<publisher>MIT Press,</publisher>
<location>Cathridge, Mass.,</location>
<contexts>
<context position="6517" citStr="[4]" startWordPosition="941" endWordPosition="941">ly a great deal about processing truly natural language. 3. PROGRAM SYSTEMS The systems cited in this section answer questions, perform commands, or conduct dialogues. 6 Programs that enable a user to execute a task via computer in an on-line mode are generally called &amp;quot;interactive&amp;quot; Some systems are so rich in their language-processing capability that they are called &amp;quot;conversational&amp;quot; Systems that have complicated capabilities and can reply with a sophisticated tesponse to an inquiry are called &amp;quot;question answering&amp;quot;. The survey [1] discusses two &amp;quot;conversational&amp;quot; ptograms ELIZA [2, 3] and STUDENT [4], which answers questions regarding algebraic word problems. SIR [5] answers questions about logic. Both [41 and [5] appear in [6], the introdirction there provides a general discussion of &amp;quot;semantic information and computer programs involving &amp;quot;semantics&amp;quot; The &amp;quot;question-answering&amp;quot; program systems described in [2, 3, 4, 5] were sophisticated mainly in methods of solving a problem or determining a response to a statement. Other systems have emphasized the retrieval of facts encoded in English. The &amp;quot;blocks-world&amp;quot; system described in [71 contrasts with these in that it has sophisticated language-pro</context>
</contexts>
<marker>4.</marker>
<rawString>Bobrow, D. G., &amp;quot;Natural Language Input for a Computer Problem Solving System,&amp;quot; in M. Minsky (ed.), Semantic Information Processing, MIT Press, Cathridge, Mass., 1968, 135-215</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Raphael</author>
</authors>
<title>SIR: Semantic Information Retrieval,&amp;quot;</title>
<date>1968</date>
<booktitle>Semantic Information Processing,</booktitle>
<pages>33--134</pages>
<editor>in M. Minsky (ed..),</editor>
<publisher>MIT, Press,</publisher>
<location>Cambridge, Mass.,</location>
<contexts>
<context position="6585" citStr="[5]" startWordPosition="950" endWordPosition="950">SYSTEMS The systems cited in this section answer questions, perform commands, or conduct dialogues. 6 Programs that enable a user to execute a task via computer in an on-line mode are generally called &amp;quot;interactive&amp;quot; Some systems are so rich in their language-processing capability that they are called &amp;quot;conversational&amp;quot; Systems that have complicated capabilities and can reply with a sophisticated tesponse to an inquiry are called &amp;quot;question answering&amp;quot;. The survey [1] discusses two &amp;quot;conversational&amp;quot; ptograms ELIZA [2, 3] and STUDENT [4], which answers questions regarding algebraic word problems. SIR [5] answers questions about logic. Both [41 and [5] appear in [6], the introdirction there provides a general discussion of &amp;quot;semantic information and computer programs involving &amp;quot;semantics&amp;quot; The &amp;quot;question-answering&amp;quot; program systems described in [2, 3, 4, 5] were sophisticated mainly in methods of solving a problem or determining a response to a statement. Other systems have emphasized the retrieval of facts encoded in English. The &amp;quot;blocks-world&amp;quot; system described in [71 contrasts with these in that it has sophisticated language-processing capability It infers antecedents of pronouns and resolves am</context>
<context position="9882" citStr="[5]" startWordPosition="1463" endWordPosition="1463">dexing scheme to it. This approach has obvious limitations and was replaced by systems that use a formal representation to store limited logical concepts associated with the text. One of them is SIR, which can deduce set telationships among objects described by natural language. SIR is designed to meet the requirement that &amp;quot;in addition to echoing, upoy request, the facts it has been given, a machine which &apos;understands&apos; must be able to recognize the logical implications of those facts. It also must be able to identify (from a large data store) facts which are relevant to d particular question&amp;quot; [5]. Limited-logic systems are important because they provide methods to represent complex facts encoded in English-language statements so that the facts can be used by computer programs or accessed by a person who did not input the original textual statement of the fact. Such a second user may employ a completely different form of language encoding. Programs of this sort include DEACON [10, 11] and the early version of CONVERSE [12]. The former could &amp;quot;handle time questions&amp;quot; and used a bottom-up analysis method which allowed questions to be nested. For example, the question &amp;quot;Who is the commander </context>
</contexts>
<marker>5.</marker>
<rawString>Raphael, B., &amp;quot;SIR: Semantic Information Retrieval,&amp;quot; in M. Minsky (ed..), Semantic Information Processing, MIT, Press, Cambridge, Mass., 1968, 33-134, 256-266.</rawString>
</citation>
<citation valid="true">
<date>1968</date>
<booktitle>Semantic Information Processing,</booktitle>
<volume>7</volume>
<editor>Minsky, IL (ed.),</editor>
<publisher>MIT Press,</publisher>
<location>Cambridge, Mass.,</location>
<contexts>
<context position="6647" citStr="[6]" startWordPosition="961" endWordPosition="961">rform commands, or conduct dialogues. 6 Programs that enable a user to execute a task via computer in an on-line mode are generally called &amp;quot;interactive&amp;quot; Some systems are so rich in their language-processing capability that they are called &amp;quot;conversational&amp;quot; Systems that have complicated capabilities and can reply with a sophisticated tesponse to an inquiry are called &amp;quot;question answering&amp;quot;. The survey [1] discusses two &amp;quot;conversational&amp;quot; ptograms ELIZA [2, 3] and STUDENT [4], which answers questions regarding algebraic word problems. SIR [5] answers questions about logic. Both [41 and [5] appear in [6], the introdirction there provides a general discussion of &amp;quot;semantic information and computer programs involving &amp;quot;semantics&amp;quot; The &amp;quot;question-answering&amp;quot; program systems described in [2, 3, 4, 5] were sophisticated mainly in methods of solving a problem or determining a response to a statement. Other systems have emphasized the retrieval of facts encoded in English. The &amp;quot;blocks-world&amp;quot; system described in [71 contrasts with these in that it has sophisticated language-processing capability It infers antecedents of pronouns and resolves ambiguities in input word strings regarding blocks on a table. T</context>
<context position="11574" citStr="[6, 7, 16]" startWordPosition="1720" endWordPosition="1722">which add a first-order predicate-calculus theorem-proving capability to limited-logic systems to improve the complexity of the facts they can &amp;quot;infer&amp;quot;, and procedural systems which enable other computations to obtain complex information The theorem-proving capability is designed to work from a group of logical statements given as input (or statements consistent with these input statements) However, facts INCONSISTENT with the original statements cannot always be detected and deductive systems quickly become impractical as the number of input statements (elementary facts, axioms) becomes large [6, 7, 16], since the time to obtain a proof grows to an impractical length. Special programming languages (e.g. QA4 [17, 18], PLANNER [20, 21]), have added strategy capabilities and better methods of problem representation to reduce computing time to practical values QA4 (seeks) to develop natural, intuitive representations of problems and problem-solving programs. (The user can) blend ... procedural and declarative information that includes explicit instructions, intuitive advice, and semantic definitions. {17] However, there is currently no body of evidence regarding the effectiveness of the programs</context>
</contexts>
<marker>6.</marker>
<rawString>Minsky, IL (ed.), Semantic Information Processing, MIT Press, Cambridge, Mass., 1968. 7 Winograd, T., Understanding Natural Language, Academic Press, New York, 197-4.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W Plath</author>
</authors>
<title>Restricted English as a User Language,&amp;quot;</title>
<date>1972</date>
<journal>IBM T. J. Watson Research</journal>
<location>Center, Yorktown Heights, New York,</location>
<marker>8.</marker>
<rawString>Plath, W., &amp;quot;Restricted English as a User Language,&amp;quot; IBM T. J. Watson Research Center, Yorktown Heights, New York, 1972.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P F Green</author>
<author>A K Wolf</author>
<author>C Clomsky</author>
<author>K Laugherty</author>
</authors>
<title>BASEBALL. An Automatic Question-Answer,&amp;quot;</title>
<date>1963</date>
<booktitle>Computers and Thought,</booktitle>
<editor>in E. A. Feigenbaum and J. Feldman (eds.),</editor>
<location>McGraw-Hill, New York,</location>
<contexts>
<context position="7962" citStr="[9]" startWordPosition="1152" endWordPosition="1152">ks-world is the domain. The computer-science contribution is a program to interact with the domain as if it could &amp;quot;understand&amp;quot; the input, in the sense that it takes the proper action even when the input is somewhat ambiguous. To resolve ambiguities the program refers to existing relationships among the blocks. 7 The effect of [7] was to provide a sophisticated example of computer &amp;quot;understanding&amp;quot; which led to attempts to apply similar principles to speech inputs. (More detail on parallel developments in speech processing is presented later.) The early &amp;quot;language-understanding&amp;quot; systems, BASEBALL [9], ELIZA, and STUDENT, were based on two special formats: one to represent the knowledge they store and one to find meaning in the English input. They discard all input information which cannot be transformed for internal storage. The comparison of ELIZA and STUDENT in [1] is with regard to the degree of &amp;quot;understanding&amp;quot; ELIZA responds either by transforming the input sentence (essentially mimicry) following isolation of a key word or by using a prestored content-free remark. STUDENT translates natural-language &amp;quot;descriptions of algebraic equations, ... proceeds to identify the unknowns involved </context>
</contexts>
<marker>9.</marker>
<rawString>Green, P. F., A. K. Wolf, C. Clomsky, and K. Laugherty, &amp;quot;BASEBALL. An Automatic Question-Answer,&amp;quot; in E. A. Feigenbaum and J. Feldman (eds.), Computers and Thought, McGraw-Hill, New York, 1963.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F B Thompson</author>
</authors>
<title>English for the Computer,&amp;quot;</title>
<date>1968</date>
<booktitle>Proc. FJCO, Spartan,</booktitle>
<pages>349--356</pages>
<location>New York,</location>
<contexts>
<context position="10277" citStr="[10, 11]" startWordPosition="1526" endWordPosition="1527">n, a machine which &apos;understands&apos; must be able to recognize the logical implications of those facts. It also must be able to identify (from a large data store) facts which are relevant to d particular question&amp;quot; [5]. Limited-logic systems are important because they provide methods to represent complex facts encoded in English-language statements so that the facts can be used by computer programs or accessed by a person who did not input the original textual statement of the fact. Such a second user may employ a completely different form of language encoding. Programs of this sort include DEACON [10, 11] and the early version of CONVERSE [12]. The former could &amp;quot;handle time questions&amp;quot; and used a bottom-up analysis method which allowed questions to be nested. For example, the question &amp;quot;Who is the commander of the battalion at Fort Fubar?&amp;quot; was handled by first internally answering the question &amp;quot;What battalion is at Fort Fubar?&amp;quot; The answer was then substituted directly into the original question to make it. &amp;quot;Who is the commander of the 69th battalion?&amp;quot; which the system then answered. [7, p. 37] 9 CONVERSE contained provisions for allwing even more complex forms of input questions (Recent versions</context>
<context position="13270" citStr="[10, 11]" startWordPosition="1975" endWordPosition="1976"> more of the other subprograms. The structure grows more awkward and difficult to generalize. ... Finally, the, system may become too unwieldy for further experimentation, [5, P. 91] In procedural systems the software is somewhat modular In 19 &amp;quot;semantic primitives&amp;quot; were assumed to exist as LISP subroutines. PLANNER 1201 allows complex information to be expressed as procedures without requiring user involvement with the details of interaction among procedures (but [21] reports some second thoughts). The work of many other groups could be added to this survey. Recent work on REL, building on on [10, 11] is reported in [36, 37]; [24, 251 are relevant collections; and [26] is a survey paper. 4. DEDUCTION In all of the program systems described thus far, &amp;quot;language understanding&amp;quot; depends on the &amp;quot;deductive capabilities&amp;quot; of the *Some experiments on problem-solving effectiveness of special programming languages in another context appear in [22]. 11 program, that is, its ability to &amp;quot;infer&amp;quot; facts and relationships from given statements. In some cases deduction involves discerning structure in a set of facts and relationships. This section describes how &amp;quot;understanding&amp;quot; programs themselves are structur</context>
</contexts>
<marker>10.</marker>
<rawString>Thompson, F. B., &amp;quot;English for the Computer,&amp;quot; Proc. FJCO, Spartan, New York, 1968, 349-356.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J A Craig</author>
<author>S Berezner</author>
<author>H Carney</author>
</authors>
<title>DEACON: Direct English Access and Control,&amp;quot;</title>
<date>1968</date>
<booktitle>Proc. FJCC, Spartan,</booktitle>
<pages>365--380</pages>
<location>New York,</location>
<contexts>
<context position="10277" citStr="[10, 11]" startWordPosition="1526" endWordPosition="1527">n, a machine which &apos;understands&apos; must be able to recognize the logical implications of those facts. It also must be able to identify (from a large data store) facts which are relevant to d particular question&amp;quot; [5]. Limited-logic systems are important because they provide methods to represent complex facts encoded in English-language statements so that the facts can be used by computer programs or accessed by a person who did not input the original textual statement of the fact. Such a second user may employ a completely different form of language encoding. Programs of this sort include DEACON [10, 11] and the early version of CONVERSE [12]. The former could &amp;quot;handle time questions&amp;quot; and used a bottom-up analysis method which allowed questions to be nested. For example, the question &amp;quot;Who is the commander of the battalion at Fort Fubar?&amp;quot; was handled by first internally answering the question &amp;quot;What battalion is at Fort Fubar?&amp;quot; The answer was then substituted directly into the original question to make it. &amp;quot;Who is the commander of the 69th battalion?&amp;quot; which the system then answered. [7, p. 37] 9 CONVERSE contained provisions for allwing even more complex forms of input questions (Recent versions</context>
<context position="13270" citStr="[10, 11]" startWordPosition="1975" endWordPosition="1976"> more of the other subprograms. The structure grows more awkward and difficult to generalize. ... Finally, the, system may become too unwieldy for further experimentation, [5, P. 91] In procedural systems the software is somewhat modular In 19 &amp;quot;semantic primitives&amp;quot; were assumed to exist as LISP subroutines. PLANNER 1201 allows complex information to be expressed as procedures without requiring user involvement with the details of interaction among procedures (but [21] reports some second thoughts). The work of many other groups could be added to this survey. Recent work on REL, building on on [10, 11] is reported in [36, 37]; [24, 251 are relevant collections; and [26] is a survey paper. 4. DEDUCTION In all of the program systems described thus far, &amp;quot;language understanding&amp;quot; depends on the &amp;quot;deductive capabilities&amp;quot; of the *Some experiments on problem-solving effectiveness of special programming languages in another context appear in [22]. 11 program, that is, its ability to &amp;quot;infer&amp;quot; facts and relationships from given statements. In some cases deduction involves discerning structure in a set of facts and relationships. This section describes how &amp;quot;understanding&amp;quot; programs themselves are structur</context>
</contexts>
<marker>11.</marker>
<rawString>Craig, J. A., S. Berezner, H. Carney,. and C. Longyear, &amp;quot;DEACON: Direct English Access and Control,&amp;quot; Proc. FJCC, Spartan, New York, 1968, 365-380.</rawString>
</citation>
<citation valid="false">
<authors>
<author>C Kellogg</author>
</authors>
<title>A Natura1,Lang4age Compiler for On-Line Data,Managemeat,&amp;quot;</title>
<booktitle>Proc. FJCC, Spartan,</booktitle>
<pages>473--492</pages>
<location>New York, .196R,</location>
<contexts>
<context position="10316" citStr="[12]" startWordPosition="1534" endWordPosition="1534">le to recognize the logical implications of those facts. It also must be able to identify (from a large data store) facts which are relevant to d particular question&amp;quot; [5]. Limited-logic systems are important because they provide methods to represent complex facts encoded in English-language statements so that the facts can be used by computer programs or accessed by a person who did not input the original textual statement of the fact. Such a second user may employ a completely different form of language encoding. Programs of this sort include DEACON [10, 11] and the early version of CONVERSE [12]. The former could &amp;quot;handle time questions&amp;quot; and used a bottom-up analysis method which allowed questions to be nested. For example, the question &amp;quot;Who is the commander of the battalion at Fort Fubar?&amp;quot; was handled by first internally answering the question &amp;quot;What battalion is at Fort Fubar?&amp;quot; The answer was then substituted directly into the original question to make it. &amp;quot;Who is the commander of the 69th battalion?&amp;quot; which the system then answered. [7, p. 37] 9 CONVERSE contained provisions for allwing even more complex forms of input questions (Recent versions are described in [13, 14, 15].) Deduct</context>
</contexts>
<marker>12.</marker>
<rawString>Kellogg, C., &amp;quot;A Natura1,Lang4age Compiler for On-Line Data,Managemeat,&amp;quot; Proc. FJCC, Spartan, New York, .196R, 473-492.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L Travis</author>
<author>C Kellogg</author>
<author>P Klahr</author>
</authors>
<date>1973</date>
<booktitle>Inferential Quostion-Anwering4. Extending Conovrdo, System Development Corporation, SP-3579,</booktitle>
<contexts>
<context position="10907" citStr="[13, 14, 15]" startWordPosition="1629" endWordPosition="1629">sion of CONVERSE [12]. The former could &amp;quot;handle time questions&amp;quot; and used a bottom-up analysis method which allowed questions to be nested. For example, the question &amp;quot;Who is the commander of the battalion at Fort Fubar?&amp;quot; was handled by first internally answering the question &amp;quot;What battalion is at Fort Fubar?&amp;quot; The answer was then substituted directly into the original question to make it. &amp;quot;Who is the commander of the 69th battalion?&amp;quot; which the system then answered. [7, p. 37] 9 CONVERSE contained provisions for allwing even more complex forms of input questions (Recent versions are described in [13, 14, 15].) Deductive systems can be divided into general systems which add a first-order predicate-calculus theorem-proving capability to limited-logic systems to improve the complexity of the facts they can &amp;quot;infer&amp;quot;, and procedural systems which enable other computations to obtain complex information The theorem-proving capability is designed to work from a group of logical statements given as input (or statements consistent with these input statements) However, facts INCONSISTENT with the original statements cannot always be detected and deductive systems quickly become impractical as the number of i</context>
</contexts>
<marker>13.</marker>
<rawString>Travis, L., C. Kellogg, P. Klahr, Inferential Quostion-Anwering4. Extending Conovrdo, System Development Corporation, SP-3579, January 31, 1973.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C H „ J Burn Kellogg</author>
</authors>
<title>The CONVERSE Natural Language Data Managem-tnt.System: Current Status and Plans,&amp;quot;</title>
<date></date>
<booktitle>i J Miriker and S. Iosenfeld (e1s.), Proc. Symp. infor matidn Sorg p</booktitle>
<pages>33--46</pages>
<institution>and Retrieval, University ofTgryland, College Park,</institution>
<contexts>
<context position="10907" citStr="[13, 14, 15]" startWordPosition="1629" endWordPosition="1629">sion of CONVERSE [12]. The former could &amp;quot;handle time questions&amp;quot; and used a bottom-up analysis method which allowed questions to be nested. For example, the question &amp;quot;Who is the commander of the battalion at Fort Fubar?&amp;quot; was handled by first internally answering the question &amp;quot;What battalion is at Fort Fubar?&amp;quot; The answer was then substituted directly into the original question to make it. &amp;quot;Who is the commander of the 69th battalion?&amp;quot; which the system then answered. [7, p. 37] 9 CONVERSE contained provisions for allwing even more complex forms of input questions (Recent versions are described in [13, 14, 15].) Deductive systems can be divided into general systems which add a first-order predicate-calculus theorem-proving capability to limited-logic systems to improve the complexity of the facts they can &amp;quot;infer&amp;quot;, and procedural systems which enable other computations to obtain complex information The theorem-proving capability is designed to work from a group of logical statements given as input (or statements consistent with these input statements) However, facts INCONSISTENT with the original statements cannot always be detected and deductive systems quickly become impractical as the number of i</context>
</contexts>
<marker>14.</marker>
<rawString>Kellogg, C. H.„ J. Burn:7, T. W.Iler, and K. Fogt% &amp;quot;The CONVERSE Natural Language Data Managem-tnt.System: Current Status and Plans,&amp;quot; i J Miriker and S. Iosenfeld (e1s.), Proc. Symp. infor matidn Sorg p and Retrieval, University ofTgryland, College Park, April 1R71,. 33-46.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C A Kellogg</author>
</authors>
<title>Question-Answering</title>
<date>1971</date>
<booktitle>in the Converse System, System Development Corporation, TM</booktitle>
<pages>5015</pages>
<contexts>
<context position="10907" citStr="[13, 14, 15]" startWordPosition="1629" endWordPosition="1629">sion of CONVERSE [12]. The former could &amp;quot;handle time questions&amp;quot; and used a bottom-up analysis method which allowed questions to be nested. For example, the question &amp;quot;Who is the commander of the battalion at Fort Fubar?&amp;quot; was handled by first internally answering the question &amp;quot;What battalion is at Fort Fubar?&amp;quot; The answer was then substituted directly into the original question to make it. &amp;quot;Who is the commander of the 69th battalion?&amp;quot; which the system then answered. [7, p. 37] 9 CONVERSE contained provisions for allwing even more complex forms of input questions (Recent versions are described in [13, 14, 15].) Deductive systems can be divided into general systems which add a first-order predicate-calculus theorem-proving capability to limited-logic systems to improve the complexity of the facts they can &amp;quot;infer&amp;quot;, and procedural systems which enable other computations to obtain complex information The theorem-proving capability is designed to work from a group of logical statements given as input (or statements consistent with these input statements) However, facts INCONSISTENT with the original statements cannot always be detected and deductive systems quickly become impractical as the number of i</context>
</contexts>
<marker>15.</marker>
<rawString>Kellogg, C. A., Question-Answering in the Converse System, System Development Corporation, TM 5015, October .1971.</rawString>
</citation>
<citation valid="true">
<authors>
<author>N Nilsson</author>
<author>J</author>
</authors>
<date>1971</date>
<booktitle>Problem,SoZOing Methods in Artificial Intelligence McGraw-Hill,</booktitle>
<location>New York,</location>
<contexts>
<context position="11574" citStr="[6, 7, 16]" startWordPosition="1720" endWordPosition="1722">which add a first-order predicate-calculus theorem-proving capability to limited-logic systems to improve the complexity of the facts they can &amp;quot;infer&amp;quot;, and procedural systems which enable other computations to obtain complex information The theorem-proving capability is designed to work from a group of logical statements given as input (or statements consistent with these input statements) However, facts INCONSISTENT with the original statements cannot always be detected and deductive systems quickly become impractical as the number of input statements (elementary facts, axioms) becomes large [6, 7, 16], since the time to obtain a proof grows to an impractical length. Special programming languages (e.g. QA4 [17, 18], PLANNER [20, 21]), have added strategy capabilities and better methods of problem representation to reduce computing time to practical values QA4 (seeks) to develop natural, intuitive representations of problems and problem-solving programs. (The user can) blend ... procedural and declarative information that includes explicit instructions, intuitive advice, and semantic definitions. {17] However, there is currently no body of evidence regarding the effectiveness of the programs</context>
</contexts>
<marker>16.</marker>
<rawString>Nilsson, N, J., Problem,SoZOing Methods in Artificial Intelligence McGraw-Hill, New York, 1971.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J T Rulifsotr</author>
<author>R J Waldinger</author>
<author>J A Derksen</author>
</authors>
<title>A Language for Writing Problem-Solving Programs,&amp;quot;</title>
<date>1971</date>
<booktitle>Proc. IFIP Congr.</booktitle>
<location>Ljubljana, Yugoslavia,</location>
<contexts>
<context position="11689" citStr="[17, 18]" startWordPosition="1741" endWordPosition="1742">ity of the facts they can &amp;quot;infer&amp;quot;, and procedural systems which enable other computations to obtain complex information The theorem-proving capability is designed to work from a group of logical statements given as input (or statements consistent with these input statements) However, facts INCONSISTENT with the original statements cannot always be detected and deductive systems quickly become impractical as the number of input statements (elementary facts, axioms) becomes large [6, 7, 16], since the time to obtain a proof grows to an impractical length. Special programming languages (e.g. QA4 [17, 18], PLANNER [20, 21]), have added strategy capabilities and better methods of problem representation to reduce computing time to practical values QA4 (seeks) to develop natural, intuitive representations of problems and problem-solving programs. (The user can) blend ... procedural and declarative information that includes explicit instructions, intuitive advice, and semantic definitions. {17] However, there is currently no body of evidence regarding the effectiveness of the programs written in this programming language or related ones on problem-solving tasks in general 10 or &amp;quot;language understan</context>
</contexts>
<marker>17.</marker>
<rawString>Rulifsotr, J. T., R. J. Waldinger, and J. A. Derksen, &amp;quot;A Language for Writing Problem-Solving Programs,&amp;quot; Proc. IFIP Congr. 1971 (presented at Ljubljana, Yugoslavia, August 1971).</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Rulifson</author>
</authors>
<title>F.,_Q44 Programing Concepts,</title>
<date>1371</date>
<journal>Stanford Research Institute, Artificial Intelligence Group, Technical Note</journal>
<volume>60</volume>
<contexts>
<context position="11689" citStr="[17, 18]" startWordPosition="1741" endWordPosition="1742">ity of the facts they can &amp;quot;infer&amp;quot;, and procedural systems which enable other computations to obtain complex information The theorem-proving capability is designed to work from a group of logical statements given as input (or statements consistent with these input statements) However, facts INCONSISTENT with the original statements cannot always be detected and deductive systems quickly become impractical as the number of input statements (elementary facts, axioms) becomes large [6, 7, 16], since the time to obtain a proof grows to an impractical length. Special programming languages (e.g. QA4 [17, 18], PLANNER [20, 21]), have added strategy capabilities and better methods of problem representation to reduce computing time to practical values QA4 (seeks) to develop natural, intuitive representations of problems and problem-solving programs. (The user can) blend ... procedural and declarative information that includes explicit instructions, intuitive advice, and semantic definitions. {17] However, there is currently no body of evidence regarding the effectiveness of the programs written in this programming language or related ones on problem-solving tasks in general 10 or &amp;quot;language understan</context>
</contexts>
<marker>18.</marker>
<rawString>Rulifson, J. F.,_Q44 Programing Concepts, Stanford Research Institute, Artificial Intelligence Group, Technical Note 60, August 1371.</rawString>
</citation>
<citation valid="false">
<authors>
<author>W A Woods</author>
</authors>
<title>Procedural Semantics for A Question-Answering Machine,&amp;quot;</title>
<date>1968</date>
<journal>FJCC, AFIPS,</journal>
<booktitle>Proc. FJCC, Spartan,</booktitle>
<volume>41</volume>
<pages>457--471</pages>
<location>New York,</location>
<marker>19.</marker>
<rawString>Woods, W. A., &amp;quot;Procedural Semantics for A Question-Answering Machine,&amp;quot; Proc. FJCC, Spartan, New York, 1968, 457-471. 20: Hewitt, C., &amp;quot;A Language for Theorems in Robots,&amp;quot; Proc. Int. Joint Conf. Artificial Intelligence, Washington, D.C., 1969, 295-301. 21, Sussman, G. J., and D. V. McDermott, &amp;quot;From PLANNER to CONNIVER--A Genetic Approach&amp;quot; (&amp;quot;Why Conniving is Better Than Planning&amp;quot;), Proc. 1972 FJCC, AFIPS, Vol. 41, Fart II, 1171-1179.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R E</author>
</authors>
<title>Monitored ExecutiOn STAIPS,&amp;quot;</title>
<date>1971</date>
<journal>4PPIication of Theorem.ProvinS Intelligence,</journal>
<booktitle>Proc. IFIP Congr,</booktitle>
<volume>2</volume>
<pages>189--208</pages>
<location>Yugoslavia,</location>
<contexts>
<context position="13611" citStr="[22]" startWordPosition="2027" endWordPosition="2027">ion to be expressed as procedures without requiring user involvement with the details of interaction among procedures (but [21] reports some second thoughts). The work of many other groups could be added to this survey. Recent work on REL, building on on [10, 11] is reported in [36, 37]; [24, 251 are relevant collections; and [26] is a survey paper. 4. DEDUCTION In all of the program systems described thus far, &amp;quot;language understanding&amp;quot; depends on the &amp;quot;deductive capabilities&amp;quot; of the *Some experiments on problem-solving effectiveness of special programming languages in another context appear in [22]. 11 program, that is, its ability to &amp;quot;infer&amp;quot; facts and relationships from given statements. In some cases deduction involves discerning structure in a set of facts and relationships. This section describes how &amp;quot;understanding&amp;quot; programs themselves are structured and how that 3tructure limits their capability for general deduction. Theorem-proving programs use an inference rule illustrated in 123 p. 61] to deduce new knowledge. A formal succession of logical steps called resolutions leads to the new fact. The example there begins with P1 - P4 given: P1 if x is part of v, and if v is part of y, t</context>
</contexts>
<marker>22.</marker>
<rawString>Pikes. R. E. &amp;quot;Monitored ExecutiOn STAIPS,&amp;quot; Proc. IFIP Congr, 1971 Yugoslavia, August 1971). Also &amp;quot;STRIPS: A New Approach to the to Problem Solving,&amp;quot; Artificial of Robot Plans Produced by (presented at Ljubljana, see R. E. Pikes and N. J. Nilsson, 4PPIication of Theorem.ProvinS Intelligence, 2, 1971, 189-208.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J R Slagle</author>
<author>Artificial</author>
</authors>
<title>Intelligence: The Heuristic Progrm-ning Approach,</title>
<date>1971</date>
<publisher>McGraw-Hill,</publisher>
<location>New York,</location>
<marker>23.</marker>
<rawString>Slagle, J. R., Artificial. Intelligence: The Heuristic Progrm-ning Approach, McGraw-Hill, New York, 1971.</rawString>
</citation>
<citation valid="true">
<date></date>
<booktitle>Language and the Computer,</booktitle>
<editor>Garvin, P. L. (ed.), qatural.</editor>
<location>McGrawHill, New York,</location>
<marker>24.</marker>
<rawString>Garvin, P. L. (ed.), qatural. Language and the Computer, McGrawHill, New York, 19o3.</rawString>
</citation>
<citation valid="true">
<date>1965</date>
<booktitle>Computer Augmentation of Human Reasoning, Spartan,</booktitle>
<editor>Sass, M. A., and W. D. Wilkinson (eds.),</editor>
<location>Washington, D.C.,</location>
<marker>25.</marker>
<rawString>Sass, M. A., and W. D. Wilkinson (eds.), Computer Augmentation of Human Reasoning, Spartan, Washington, D.C., 1965.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G R Martiris</author>
</authors>
<title>Dimensions of Text Processing,&amp;quot;</title>
<date>1972</date>
<journal>FJCC, AYIPS,</journal>
<booktitle>Proc.</booktitle>
<volume>41</volume>
<pages>801--810</pages>
<location>Part II,</location>
<contexts>
<context position="13339" citStr="[26]" startWordPosition="1988" endWordPosition="1988">icult to generalize. ... Finally, the, system may become too unwieldy for further experimentation, [5, P. 91] In procedural systems the software is somewhat modular In 19 &amp;quot;semantic primitives&amp;quot; were assumed to exist as LISP subroutines. PLANNER 1201 allows complex information to be expressed as procedures without requiring user involvement with the details of interaction among procedures (but [21] reports some second thoughts). The work of many other groups could be added to this survey. Recent work on REL, building on on [10, 11] is reported in [36, 37]; [24, 251 are relevant collections; and [26] is a survey paper. 4. DEDUCTION In all of the program systems described thus far, &amp;quot;language understanding&amp;quot; depends on the &amp;quot;deductive capabilities&amp;quot; of the *Some experiments on problem-solving effectiveness of special programming languages in another context appear in [22]. 11 program, that is, its ability to &amp;quot;infer&amp;quot; facts and relationships from given statements. In some cases deduction involves discerning structure in a set of facts and relationships. This section describes how &amp;quot;understanding&amp;quot; programs themselves are structured and how that 3tructure limits their capability for general deducti</context>
</contexts>
<marker>26.</marker>
<rawString>Martiris, G. R., &amp;quot;Dimensions of Text Processing,&amp;quot; Proc. 1972. FJCC, AYIPS, Vol. 41, Part II, 801-810.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Knuth</author>
</authors>
<title>The Art of Computer Frograving: Vol. i Fundamental Algorithms, Chap. 2 &amp;quot;Information Structure, &amp;quot;</title>
<date>1968</date>
<booktitle>28, Shapiro, s.c., The :1DIO.System: A Data Stkuctuke 4ot Seriantic 1n6okmatiOn Pkocessing, The Rand COrporation, R-837-PR,</booktitle>
<publisher>Addison-Wesley,</publisher>
<location>Reading, Mass.</location>
<contexts>
<context position="17304" citStr="[27]" startWordPosition="2638" endWordPosition="2638">ge of structure inherent in special prol:lem domains such as stacking blocks on a table, moving chess pieces, and retrieving facts about a large naval organization. Program systems for understanding begin with a &amp;quot;front end&amp;quot;: a portion designed to transform language input into a computer representation. The representation may be as simple as a character-by-character encoding of alphabetic, space marker, and punctuation elements. However, a complex &amp;quot;front end&amp;quot; could involve word and phrase detection and encoding. The usual computer science term foi a computer representation is &amp;quot;data structure?&apos; [27] and there are many types. The language processing program DEACON used ring structures [111, a representation frequently used to store queues. In principle a data structure can represent involved associations, but in practice simple order or ancestor relationships predominate Completely different and far more complex types of structure are inherent in natural language. For exampLe, from [281 &amp;quot;The.professors signed a petition.&amp;quot; is not true. has for valid interpretations: (a) The professors DIDN&apos;T sign a petition. (b) THE PROFESSORS didn&apos;t sign a petition. (c) The professors didn&apos;t si_gn a PETIT</context>
</contexts>
<marker>27.</marker>
<rawString>Knuth, D. The Art of Computer Frograving: Vol. i Fundamental Algorithms, Chap. 2 &amp;quot;Information Structure, &amp;quot; Addison-Wesley, Reading, Mass. 1968. 28, Shapiro, s.c., The :1DIO.System: A Data Stkuctuke 4ot Seriantic 1n6okmatiOn Pkocessing, The Rand COrporation, R-837-PR, August</rawString>
</citation>
<citation valid="true">
<authors>
<author>R E Levien</author>
<author>M E Maxon</author>
</authors>
<title>A Computer System for Inference Execution and Data_Retrieval,</title>
<date>1967</date>
<journal>Comm. AU,</journal>
<volume>10</volume>
<pages>715--721</pages>
<contexts>
<context position="19368" citStr="[29]" startWordPosition="2940" endWordPosition="2940">utions to the problems of deductive processing in narrow language domains While these programs are not a general breakthrough in representing language data for computation, they demonstrate that current programming techniques enable a useful &amp;quot;understanding&amp;quot; capability Furthermore, there is a real potential for use ot the &amp;quot;understanding&amp;quot; in an interactive wde to facilitate use of computers by nonspecialists and to tap the more sophisticated human understanding capabilities 5 INTERACTION Research and computer program development designed to store multitudes of facts so that they can be accessed [29] gr combined [301 and &amp;quot;understood (see pp. 3-10 in [301) in 15 linguistic form (see pp. 11-17 of [30]) is highly relevant to recent research programs in text and speech understanding. When such a system is used a user might fail to get a fact or relationship because the natural-language subset chosen to represent his question was too righ--i.e., it includes a complex set of logical relationships not in the computer. Thus a block could result in a human-computer dialogue if the program has no logical connection between &amp;quot;garage&amp;quot; and &amp;quot;car&amp;quot; but only between &amp;quot;garage&amp;quot; and &amp;quot;house&amp;quot; (the program replie</context>
</contexts>
<marker>29.</marker>
<rawString>Levien, R. E., and M. E. Maxon, &amp;quot;A Computer System for Inference Execution and Data_Retrieval, Comm. AU, 10, 11, November 1967, 715-721.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Kochen</author>
<author>D M MacKay</author>
<author>M E Heron</author>
<author>M Seriven</author>
<author>L Uhr</author>
</authors>
<date>1964</date>
<booktitle>ComputeA4 and Comokehension, The Rand Corporation, RM-4065-PR,</booktitle>
<marker>0.</marker>
<rawString>Kochen, M., D. M. MacKay, M. E. Heron, M. Seriven, and L. Uhr, ComputeA4 and Comokehension, The Rand Corporation, RM-4065-PR, April 1964.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J L Kuhns</author>
</authors>
<title>An4Weir-ing Que4tionA by Computeks: A Logicae Study,</title>
<date>1967</date>
<booktitle>The Rand Corporation, RM -5428 -PR,</booktitle>
<contexts>
<context position="14684" citStr="[31, 32]" startWordPosition="2230" endWordPosition="2231">s called resolutions leads to the new fact. The example there begins with P1 - P4 given: P1 if x is part of v, and if v is part of y, then x is part of y; P2 a finger is part of a hand; P3 a hand is part of an arm; P4 an arm is part of a man A proof that P9 a finger is part of a man is derived by steps, such as combining P1 and P2 to get P6 if a hand is part of y, then a finger is part of y Unfortunately, it is easy to move outside the domain where the computer can make useful deductions, and the formal resolution process is extremely lengthy and thus prohibitively costly in computer time. In [31, 32] it is shown that some statements (&amp;quot;who did not write ---?&amp;quot;) are unanswerable and that there is no algorithm which can detect whether a question stated in a zero-one logical form can be answered. Hence 12 theorem proving is not e-sential to &amp;quot;deduction&amp;quot; and &amp;quot;understanding&amp;quot; systems, natural or artificial, must rely on other techniques, e.g., outside information such as knowledge about the domain. In most &amp;quot;understanding&amp;quot; programs, information on a primitive level of processing can be inaccurate; for example, the identification of a sound string &amp;quot;blew&amp;quot; can be inaccurately &amp;quot;blue&amp;quot; Subsequent process</context>
</contexts>
<marker>31.</marker>
<rawString>Kuhns, J. L., An4Weir-ing Que4tionA by Computeks: A Logicae Study, The Rand Corporation, RM -5428 -PR, December 1967.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R DiPaola</author>
</authors>
<title>The Solvability of the Decision Problem for Classes of Proper Formulas and Related Results,&amp;quot;</title>
<date>1973</date>
<journal>I ACfl,</journal>
<volume>20</volume>
<pages>112--126</pages>
<contexts>
<context position="14684" citStr="[31, 32]" startWordPosition="2230" endWordPosition="2231">s called resolutions leads to the new fact. The example there begins with P1 - P4 given: P1 if x is part of v, and if v is part of y, then x is part of y; P2 a finger is part of a hand; P3 a hand is part of an arm; P4 an arm is part of a man A proof that P9 a finger is part of a man is derived by steps, such as combining P1 and P2 to get P6 if a hand is part of y, then a finger is part of y Unfortunately, it is easy to move outside the domain where the computer can make useful deductions, and the formal resolution process is extremely lengthy and thus prohibitively costly in computer time. In [31, 32] it is shown that some statements (&amp;quot;who did not write ---?&amp;quot;) are unanswerable and that there is no algorithm which can detect whether a question stated in a zero-one logical form can be answered. Hence 12 theorem proving is not e-sential to &amp;quot;deduction&amp;quot; and &amp;quot;understanding&amp;quot; systems, natural or artificial, must rely on other techniques, e.g., outside information such as knowledge about the domain. In most &amp;quot;understanding&amp;quot; programs, information on a primitive level of processing can be inaccurate; for example, the identification of a sound string &amp;quot;blew&amp;quot; can be inaccurately &amp;quot;blue&amp;quot; Subsequent process</context>
</contexts>
<marker>32.</marker>
<rawString>DiPaola, R., &amp;quot;The Solvability of the Decision Problem for Classes of Proper Formulas and Related Results,&amp;quot; I ACfl, 20, January 1973, 112-126.</rawString>
</citation>
<citation valid="true">
<authors>
<author>V A Woods</author>
<author>R M Kaplan</author>
</authors>
<title>The Lunak ScLente4 Natuka.e. Language 1nSokmation System, Bthl Report 2265,</title>
<date></date>
<location>Cambridge, Mass.,</location>
<contexts>
<context position="25219" citStr="[33, 35]" startWordPosition="3865" endWordPosition="3866">ounts of computing time as the number of contexts grows. Furthermore, this increase in time is added onto that which occurs when the size of lexicon is expanded. As words are added, the number of trees that dam be-produced by the grammar&apos;s rewriting rules in an attempt to &amp;quot;recognize&amp;quot; a string expands rapidly. Hence in speech as in text processing, &amp;quot;understanding&amp;quot; exists via computer yet it is not likely to lead to machine processing of truly natural language. Indeed the artificiality of speech &amp;quot;understanding&amp;quot; by computer is 19 even greater than that of text input. The &amp;quot;moon rocks&amp;quot; text system [33, 35] used a vocabulary of 3500 words, while the speech &amp;quot;understanding&amp;quot; version based on it [511 used only 250 words. The COMMERCIAL AVAILABILITY Of systems that recognize isolated words with 98.57 accuracy [531* and the need for a rapid human-computer input interface [54] promise that the last word has not been spoken on &amp;quot;understanding&amp;quot;. Research and development on language handling systems is continuing in the hope of achieving useful &amp;quot;understanding&amp;quot;. Indeed, Stanford Research Institute&apos;s Artificial Intelligence Center is basing its current work on the just-mentioned isolated-word recognizer. It </context>
</contexts>
<marker>33.</marker>
<rawString>Woods, V. A., and R. M. Kaplan, The Lunak ScLente4 Natuka.e. Language 1nSokmation System, Bthl Report 2265, Cambridge, Mass., September</rawString>
</citation>
<citation valid="true">
<authors>
<author>W A Wpods</author>
</authors>
<title>At Expekimentat Aztairlg System 6ox Tkans-ition !le,twoxil GhdimmaAA, inn Report 2362,</title>
<date>1972</date>
<location>Cambridge, lass.,</location>
<marker>34.</marker>
<rawString>Wpods, W. A., At Expekimentat Aztairlg System 6ox Tkans-ition !le,twoxil GhdimmaAA, inn Report 2362, Cambridge, lass., May 1972.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W A Woods</author>
<author>R M Kaplan</author>
<author>B &apos;Nash-Webber</author>
</authors>
<title>The Luna/r. Sciences Natuhae Language 1n6o1umation System; FLwtt Repokt,</title>
<date>1972</date>
<tech>BEI Report 2378,</tech>
<location>Cambridge, Mass.,</location>
<contexts>
<context position="25219" citStr="[33, 35]" startWordPosition="3865" endWordPosition="3866">ounts of computing time as the number of contexts grows. Furthermore, this increase in time is added onto that which occurs when the size of lexicon is expanded. As words are added, the number of trees that dam be-produced by the grammar&apos;s rewriting rules in an attempt to &amp;quot;recognize&amp;quot; a string expands rapidly. Hence in speech as in text processing, &amp;quot;understanding&amp;quot; exists via computer yet it is not likely to lead to machine processing of truly natural language. Indeed the artificiality of speech &amp;quot;understanding&amp;quot; by computer is 19 even greater than that of text input. The &amp;quot;moon rocks&amp;quot; text system [33, 35] used a vocabulary of 3500 words, while the speech &amp;quot;understanding&amp;quot; version based on it [511 used only 250 words. The COMMERCIAL AVAILABILITY Of systems that recognize isolated words with 98.57 accuracy [531* and the need for a rapid human-computer input interface [54] promise that the last word has not been spoken on &amp;quot;understanding&amp;quot;. Research and development on language handling systems is continuing in the hope of achieving useful &amp;quot;understanding&amp;quot;. Indeed, Stanford Research Institute&apos;s Artificial Intelligence Center is basing its current work on the just-mentioned isolated-word recognizer. It </context>
</contexts>
<marker>35.</marker>
<rawString>Woods, W. A., R. M. Kaplan, and B. &apos;Nash-Webber, The Luna/r. Sciences Natuhae Language 1n6o1umation System; FLwtt Repokt, BEI Report 2378, Cambridge, Mass., June 1972.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B H Dostert</author>
<author>F B Thompson</author>
</authors>
<date>1971</date>
<booktitle>ne Sy4tem.o6 REL Engtah, California Institute of Technology, REL</booktitle>
<tech>Report 1,</tech>
<contexts>
<context position="13294" citStr="[36, 37]" startWordPosition="1980" endWordPosition="1981">ograms. The structure grows more awkward and difficult to generalize. ... Finally, the, system may become too unwieldy for further experimentation, [5, P. 91] In procedural systems the software is somewhat modular In 19 &amp;quot;semantic primitives&amp;quot; were assumed to exist as LISP subroutines. PLANNER 1201 allows complex information to be expressed as procedures without requiring user involvement with the details of interaction among procedures (but [21] reports some second thoughts). The work of many other groups could be added to this survey. Recent work on REL, building on on [10, 11] is reported in [36, 37]; [24, 251 are relevant collections; and [26] is a survey paper. 4. DEDUCTION In all of the program systems described thus far, &amp;quot;language understanding&amp;quot; depends on the &amp;quot;deductive capabilities&amp;quot; of the *Some experiments on problem-solving effectiveness of special programming languages in another context appear in [22]. 11 program, that is, its ability to &amp;quot;infer&amp;quot; facts and relationships from given statements. In some cases deduction involves discerning structure in a set of facts and relationships. This section describes how &amp;quot;understanding&amp;quot; programs themselves are structured and how that 3tructur</context>
</contexts>
<marker>36.</marker>
<rawString>Dostert, B. H., and F. B. Thompson, ne Sy4tem.o6 REL Engtah, California Institute of Technology, REL Report 1, September 1971.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B H Dostett</author>
</authors>
<title>REL --An Information System for a Dynamic Environment,&amp;quot;</title>
<date>1971</date>
<journal>REL Repokt</journal>
<volume>3</volume>
<institution>California Institute of Technology,</institution>
<contexts>
<context position="13294" citStr="[36, 37]" startWordPosition="1980" endWordPosition="1981">ograms. The structure grows more awkward and difficult to generalize. ... Finally, the, system may become too unwieldy for further experimentation, [5, P. 91] In procedural systems the software is somewhat modular In 19 &amp;quot;semantic primitives&amp;quot; were assumed to exist as LISP subroutines. PLANNER 1201 allows complex information to be expressed as procedures without requiring user involvement with the details of interaction among procedures (but [21] reports some second thoughts). The work of many other groups could be added to this survey. Recent work on REL, building on on [10, 11] is reported in [36, 37]; [24, 251 are relevant collections; and [26] is a survey paper. 4. DEDUCTION In all of the program systems described thus far, &amp;quot;language understanding&amp;quot; depends on the &amp;quot;deductive capabilities&amp;quot; of the *Some experiments on problem-solving effectiveness of special programming languages in another context appear in [22]. 11 program, that is, its ability to &amp;quot;infer&amp;quot; facts and relationships from given statements. In some cases deduction involves discerning structure in a set of facts and relationships. This section describes how &amp;quot;understanding&amp;quot; programs themselves are structured and how that 3tructur</context>
</contexts>
<marker>37.</marker>
<rawString>Dostett, B. H. &amp;quot;REL --An Information System for a Dynamic Environment,&amp;quot; REL Repokt No. 3, California Institute of Technology, December 1971.</rawString>
</citation>
<citation valid="false">
<authors>
<author>E Charniak</author>
</authors>
<title>Jack and Janet in Search of a Theory of Knowledge,&amp;quot;</title>
<booktitle>Pkoc, Tnt. Joint Con6. mtzcA-4,e Intee,eigerice,</booktitle>
<location>Stanford, Calif.,</location>
<contexts>
<context position="20677" citStr="[38]" startWordPosition="3166" endWordPosition="3166"> LARGE GARAGE. OK I CAN GET TWO IN ??? The computer failed to &amp;quot;understand&amp;quot; that there was no change of discourse subject. This is an example of a &amp;quot;semantic&amp;quot; failure which could be overcome by interaction. That is; the human user would need to input one more meaning or association of a valid word so that computer &amp;quot;understanding&amp;quot; may be achieved. Syntactic blocks may also occur. M. Denicoff pointed out that in [7] 172 different syntactic features were used for a situation where there are no statements with psychological content and no use of simile. If the psychological meanings are added as in [38], these features would not be 16 enough to describe all the possible meanings of a text drawn from a less artificial source. Indeed, a key problem which formal graffimars seem ill-suited for is the reality that many contexts may. be situltaneously valid: multiple meanings give natural-language communication the richness of overtones, ana subtleties--poetry carries this to an extreme. The above dialogue on &amp;quot;Chevrolets&amp;quot; is an example of what Carbonell f39, p. 1941 called &amp;quot;mixed-initiative discourse&amp;quot;. This important aspect of interaction is considered in the LISP program DWIM (&amp;quot;Do What I Mean&amp;quot;), </context>
</contexts>
<marker>38.</marker>
<rawString>Charniak, E., &amp;quot;Jack and Janet in Search of a Theory of Knowledge,&amp;quot; Pkoc, Tnt. Joint Con6. mtzcA-4,e Intee,eigerice, Stanford, Calif.,</rawString>
</citation>
<citation valid="true">
<authors>
<author>J R Carbonell</author>
</authors>
<title>AT in CAI: An Artificial IntWigence Approach to Computer-AssIsted Instruction)&amp;quot;</title>
<date>1970</date>
<booktitle>IEEE Titans. Man-:!achine Stptertz MS-11c</booktitle>
<pages>190--202</pages>
<marker>39.</marker>
<rawString>Carbonell, J. R., &amp;quot;AT in CAI: An Artificial IntWigence Approach to Computer-AssIsted Instruction)&amp;quot; IEEE Titans. Man-:!achine Stptertz MS-11c December 1970, 190-202.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W Teitelman</author>
</authors>
<title>Do What I neat: The Programmer&apos;s Assistant,&amp;quot; Con pe and Automatton,</title>
<date>1972</date>
<pages>8--11</pages>
<marker>40.</marker>
<rawString>Teitelman, W., &amp;quot;Do What I neat: The Programmer&apos;s Assistant,&amp;quot; Con pe and Automatton, April 1972, 8-11.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W Teitelman</author>
<author>D C 3obrow</author>
<author>A K Hartley</author>
<author>D L</author>
</authors>
<title>Toward a Programming Laboratory,&amp;quot; Rtoc. Int, Jecnt Co115. Ant4e 72tcnicience, Vashington,</title>
<date>1969</date>
<booktitle>133N-LISP TENEX P.c6menee XaattaE, Bolt Beranek and ;Ian,</booktitle>
<pages>3--11</pages>
<location>D. C.,</location>
<marker>41.</marker>
<rawString>&apos;,&amp;quot;Toward a Programming Laboratory,&amp;quot; Rtoc. Int, Jecnt Co115. Ant4e 72tcnicience, Vashington, D. C., 1969, 3-11 4-/1 . Teitelman, W., D. C. 3obrow, A. K. Hartley, and D. L. ;.!urphy, 133N-LISP TENEX P.c6menee XaattaE, Bolt Beranek and ;Ian, Canbriat,*e, Uass., 1972.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A L Zobrist</author>
<author>F R Carlson</author>
</authors>
<title>An Advice-Taking &apos;Chess Computer,&amp;quot;</title>
<date>1973</date>
<journal>Scieittc Arne/ciaw,</journal>
<volume>228</volume>
<pages>92--105</pages>
<contexts>
<context position="21816" citStr="[43]" startWordPosition="3341" endWordPosition="3341">ction is considered in the LISP program DWIM (&amp;quot;Do What I Mean&amp;quot;), which is a useful working tool for text-input error correction precisely because it &amp;quot;understands&amp;quot; the user&apos;s characteristics. (For example, typical spelling errors.) This is discussed by Teitelman [40, 41,, 421 A great deal of effort has been put into making DWIN &amp;quot;smart&amp;quot;. Experience with perhaps a dozen different users indicates we have been very successful: DWIM seldom fails to correct an error the user feels it should have, and almost never mistakenly corrects an error. [40, p. 11] Another limited-discourse interactive program [43] facilitates introduction of expert knowledge on ahess. The program uses search with a maximum look-ahead depth of 20 and has backtracking capability; both syntactic and semantic knowledge is incorporated. By grouping similar board positions (i.e., all involving a piece on cell 1, all involving a queen move), it imposes semantic organization on the vast files to be searched and improves syntactic processing speed 17 6, SPEECH Publication of [44], which coined the term &amp;quot;speech understanding&amp;quot;, initiated the natural next step toward use of the computer&apos;s &amp;quot;understanding&amp;quot; capability. The goal of ea</context>
</contexts>
<marker>43.</marker>
<rawString>Zobrist, A. L. and F. R. Carlson, Jr., &amp;quot;An Advice-Taking &apos;Chess Computer,&amp;quot; Scieittc Arne/ciaw, 228, June 1973, 92.-105.</rawString>
</citation>
<citation valid="false">
<authors>
<author>A Newell</author>
</authors>
<title>Speech-Undenstaltding Systerus: Finae RePont 06 a Study aoup, National Technical Information Service,</title>
<location>Springfield, Virginia.</location>
<contexts>
<context position="22265" citStr="[44]" startWordPosition="3411" endWordPosition="3411">rrect an error the user feels it should have, and almost never mistakenly corrects an error. [40, p. 11] Another limited-discourse interactive program [43] facilitates introduction of expert knowledge on ahess. The program uses search with a maximum look-ahead depth of 20 and has backtracking capability; both syntactic and semantic knowledge is incorporated. By grouping similar board positions (i.e., all involving a piece on cell 1, all involving a queen move), it imposes semantic organization on the vast files to be searched and improves syntactic processing speed 17 6, SPEECH Publication of [44], which coined the term &amp;quot;speech understanding&amp;quot;, initiated the natural next step toward use of the computer&apos;s &amp;quot;understanding&amp;quot; capability. The goal of easy interaction with the computer becomes more exciting with speech as input medium. Systems tO recognize both text and speech have used syntax and context [45, 46], but (47] added a comprehensive approach using multiple processing levels to resolve ambiguities. In the direct successors of this work [ 8, 49], the same process of partial Acceptance of primitive elements (phonemic candidates from digitized acoustic data) followed by lexical, syntac</context>
</contexts>
<marker>44.</marker>
<rawString>Newell, A., et. al., Speech-Undenstaltding Systerus: Finae RePont 06 a Study aoup, National Technical Information Service, Springfield, Virginia.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R O Duda</author>
<author>P E Hart</author>
</authors>
<title>Experiments in the Recognition of Hand-Printed Text: Part II-Context Analysis,&amp;quot; oc., FJCC,</title>
<date>1963</date>
<booktitle>IEEE Mau. Audio Etect/tacOuAtic6, AU-16,</booktitle>
<pages>1139--1149</pages>
<publisher>Spartan,</publisher>
<location>New York,</location>
<contexts>
<context position="22579" citStr="[45, 46]" startWordPosition="3458" endWordPosition="3459"> syntactic and semantic knowledge is incorporated. By grouping similar board positions (i.e., all involving a piece on cell 1, all involving a queen move), it imposes semantic organization on the vast files to be searched and improves syntactic processing speed 17 6, SPEECH Publication of [44], which coined the term &amp;quot;speech understanding&amp;quot;, initiated the natural next step toward use of the computer&apos;s &amp;quot;understanding&amp;quot; capability. The goal of easy interaction with the computer becomes more exciting with speech as input medium. Systems tO recognize both text and speech have used syntax and context [45, 46], but (47] added a comprehensive approach using multiple processing levels to resolve ambiguities. In the direct successors of this work [ 8, 49], the same process of partial Acceptance of primitive elements (phonemic candidates from digitized acoustic data) followed by lexical, syntactic, and semantic processing to rank alternatives has shown significant success. Reddy (in a Carnegie-Mellon University film on the Hearsay System) states hat on 144 connected utterances, involving 676 words, obtained from 5 speakers, performing 4 tasks (chess, news retrieval, medical diagnosis, and desk calculat</context>
</contexts>
<marker>45.</marker>
<rawString>Duda, R. O., and P. E. Hart, &amp;quot;Experiments in the Recognition of Hand-Printed Text: Part II-Context Analysis,&amp;quot; oc., FJCC, Spartan, New York, 1963, 1139-1149. 46-. Alter, R., &amp;quot;Utilization of Contextual Constraints in Automatic Speech Recognition,&amp;quot; IEEE Mau. Audio Etect/tacOuAtic6, AU-16, March 6-11, 1968.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Vicens</author>
</authors>
<title>Aspects of Speech Recognition by Computer,&apos;.</title>
<date>1969</date>
<booktitle>(Also available U. S. Dept. of Commerce Clearinghouse for Federal Scientific and Technical Information, AD637720)</booktitle>
<institution>Ph.D. Dissertation, Stanford University,</institution>
<marker>47.</marker>
<rawString>Vicens, P., &amp;quot;Aspects of Speech Recognition by Computer,&apos;. Ph.D. Dissertation, Stanford University, April 1969. (Also available U. S. Dept. of Commerce Clearinghouse for Federal Scientific and Technical Information, AD637720)</rawString>
</citation>
<citation valid="true">
<authors>
<author>D R Reddy</author>
<author>L D Ermanf</author>
<author>R B Ueely</author>
</authors>
<title>A Model and a System for Machine Recognition of Speech,&amp;quot;</title>
<date>1973</date>
<booktitle>IEEE Thom. Audio Etectkoaccustic.6, Spec.Zat. Izsue on 1972 Contcekence on Speech Corrtzunication and Pkoceoung, Vot. AU-21,</booktitle>
<pages>229--238</pages>
<marker>48.</marker>
<rawString>D. R. Reddy, L. D. Ermanf and R. B. Ueely, &amp;quot;A Model and a System for Machine Recognition of Speech,&amp;quot; IEEE Thom. Audio Etectkoaccustic.6, Spec.Zat. Izsue on 1972 Contcekence on Speech Corrtzunication and Pkoceoung, Vot. AU-21, pp. 229-238, June 1973.</rawString>
</citation>
<citation valid="true">
<authors>
<author>V R lesser</author>
<author>R D Fennell</author>
<author>L D trman</author>
<author>D R Reddy</author>
</authors>
<title>Organization. of Hearsay It Speech Understanding System,&amp;quot;</title>
<date></date>
<booktitle>IEEE TiLan,sactioat,s on Acou4tic4, Speech, and Signat PkOCe.5.64.141, (Speciat 146tte on IEEE Sympo4ium on Speech Recognition), Vot..ASSP-231</booktitle>
<pages>11--24</pages>
<contexts>
<context position="24206" citStr="[49, 50]" startWordPosition="3699" endWordPosition="3700">nding&amp;quot; is response rate. Reddy 18 estimated that the third word-accuracy figure (without use of syntactic and semantic knowledge) would have to be in excess of 90% to allow the program to achieve a near-human response speed. The nature of computer &amp;quot;understanding&amp;quot; programs leads to problems of combinatoric explosion in number of alternativesand this lessens the usefulness of multilevel program organization (acoustic-phonetic, lexical, syntactic, semantic, domain, and user interactions) as much in .speech processing as in text processing. Prototype speech &amp;quot;anderstanding&amp;quot; systems have been build [49, 50] and newer acoustic-phonetic and syntactic techniques have been incorporated into this work 149, 51, 52], yet it seems clear that the development of theory in prosody and grammar cannot provide a breakthrough to escape the combinatoric explosion. The reason is that the search of parse trees and the use of semantics (look up related words) depend on a single context—both take geometrically increasing amounts of computing time as the number of contexts grows. Furthermore, this increase in time is added onto that which occurs when the size of lexicon is expanded. As words are added, the number of</context>
</contexts>
<marker>49.</marker>
<rawString>V. R. lesser, R. D. Fennell, L. D. trman, and D. R. Reddy, &amp;quot;Organization. of Hearsay It Speech Understanding System,&amp;quot; IEEE TiLan,sactioat,s on Acou4tic4, Speech, and Signat PkOCe.5.64.141, (Speciat 146tte on IEEE Sympo4ium on Speech Recognition), Vot..ASSP-231 pp. 11-24 February,</rawString>
</citation>
<citation valid="true">
<date>1975</date>
<booktitle>IEEE ThanzactionA on AcouAticb, Spe.ech, and S.i_gnat PAocessing, (Speciat. Iszue on IEEE SumpoZium on Speech qccoan)tion) Vo.. ASS?-3.</booktitle>
<contexts>
<context position="23529" citStr="[50]" startWordPosition="3601" endWordPosition="3601">significant success. Reddy (in a Carnegie-Mellon University film on the Hearsay System) states hat on 144 connected utterances, involving 676 words, obtained from 5 speakers, performing 4 tasks (chess, news retrieval, medical diagnosis, and desk calculator use), requiring 28 to 76-word vocabularies, the computer program recognition, in terms of words spotted and identified correctly, was a. 897. with all sources of knowledge b. 677. without use of semantic knowledge c. 447. without use of syntactic or semantic knowledge These results were obtained in October 1973, and have been improved since [50]. However, a key limitation of this form of computer speech &amp;quot;understanding&amp;quot; is response rate. Reddy 18 estimated that the third word-accuracy figure (without use of syntactic and semantic knowledge) would have to be in excess of 90% to allow the program to achieve a near-human response speed. The nature of computer &amp;quot;understanding&amp;quot; programs leads to problems of combinatoric explosion in number of alternativesand this lessens the usefulness of multilevel program organization (acoustic-phonetic, lexical, syntactic, semantic, domain, and user interactions) as much in .speech processing as in text </context>
</contexts>
<marker>50.</marker>
<rawString>IEEE ThanzactionA on AcouAticb, Spe.ech, and S.i_gnat PAocessing, (Speciat. Iszue on IEEE SumpoZium on Speech qccoan)tion) Vo.. ASS?-3. February 1975.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W A</author>
<author>Woods</author>
</authors>
<title>Motivation and Overview of SPEECHLIS: An Experimental Prototype for Speech Understanding Research,&amp;quot;</title>
<date></date>
<booktitle>IEEE Thansactions on Acoustics, Speech, and Signat Pucessing, (Speaxe. Issue on IEEE SympoAium on Speech Recognition), Vat. ASSP-23,</booktitle>
<pages>2--10</pages>
<marker>51.</marker>
<rawString>W. A, Woods, &amp;quot;Motivation and Overview of SPEECHLIS: An Experimental Prototype for Speech Understanding Research,&amp;quot; IEEE Thansactions on Acoustics, Speech, and Signat Pucessing, (Speaxe. Issue on IEEE SympoAium on Speech Recognition), Vat. ASSP-23, pp. 2-10, February,</rawString>
</citation>
<citation valid="true">
<authors>
<author>W A Lea</author>
<author>M F Medress</author>
<author>T E Skinner</author>
</authors>
<title>A Prosodically Guided Speech Understanding Strategy,&amp;quot;</title>
<date>1975</date>
<booktitle>IEEE Ttansactions on Acoustics., Speech and Signat PuceA.5).ag (Spec-La Issue on IEEE SvP•po4uun on Speech Rectai:U.0n), Vo. ASP-23,</booktitle>
<pages>30--3</pages>
<marker>52.</marker>
<rawString>W. A. Lea, M. F. Medress, and T. E. Skinner, &amp;quot;A Prosodically Guided Speech Understanding Strategy,&amp;quot; IEEE Ttansactions on Acoustics., Speech and Signat PuceA.5).ag (Spec-La Issue on IEEE SvP•po4uun on Speech Rectai:U.0n), Vo. ASP-23, pp. 30-.3a, February 1975.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T B Martin</author>
</authors>
<title>Applications of Limited Vocabulary Recoghition Systems,&amp;quot;</title>
<date>1975</date>
<booktitle>IEEE Thansactions on ACOU4V44, Speech, and Signat Ptoce64ing, (Specime Lie. on IEEE Sympo&amp;tun on Sptech Recogni,tion), Vot. ASSP-23</booktitle>
<marker>53.</marker>
<rawString>T. B. Martin, &amp;quot;Applications of Limited Vocabulary Recoghition Systems,&amp;quot; IEEE Thansactions on ACOU4V44, Speech, and Signat Ptoce64ing, (Specime Lie. on IEEE Sympo&amp;tun on Sptech Recogni,tion), Vot. ASSP-23 February 1975.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R A Turn</author>
<author>S Hoffman</author>
<author>T Lippiatt</author>
</authors>
<title>Potentiat Milktaky Apptications oA Speech Undehstandbig Systems, The Rand Corporation, R-1434,</title>
<date>1974</date>
<contexts>
<context position="25487" citStr="[54]" startWordPosition="3908" endWordPosition="3908"> &amp;quot;recognize&amp;quot; a string expands rapidly. Hence in speech as in text processing, &amp;quot;understanding&amp;quot; exists via computer yet it is not likely to lead to machine processing of truly natural language. Indeed the artificiality of speech &amp;quot;understanding&amp;quot; by computer is 19 even greater than that of text input. The &amp;quot;moon rocks&amp;quot; text system [33, 35] used a vocabulary of 3500 words, while the speech &amp;quot;understanding&amp;quot; version based on it [511 used only 250 words. The COMMERCIAL AVAILABILITY Of systems that recognize isolated words with 98.57 accuracy [531* and the need for a rapid human-computer input interface [54] promise that the last word has not been spoken on &amp;quot;understanding&amp;quot;. Research and development on language handling systems is continuing in the hope of achieving useful &amp;quot;understanding&amp;quot;. Indeed, Stanford Research Institute&apos;s Artificial Intelligence Center is basing its current work on the just-mentioned isolated-word recognizer. It is likely that useful developments will occur where language, and probably spoken-language, &amp;quot;understanding&amp;quot; will be exhibited. These developments will occur through careful design of tasks and use of advances in computer technology However, the general problem of mach</context>
</contexts>
<marker>54.</marker>
<rawString>Turn, R. A., S. Hoffman, T. Lippiatt, Potentiat Milktaky Apptications oA Speech Undehstandbig Systems, The Rand Corporation, R-1434, June 1974.</rawString>
</citation>
<citation valid="false">
<authors>
<author>J A &apos;Zeldman</author>
<author>J R Low</author>
<author>D C Swinehart</author>
<author>R H Taylor</author>
</authors>
<title>Recent Developments in SAIL--An Algol-Based Language for Artificial Intelligence,&amp;quot;</title>
<journal>Ptoc. /972 FICC, AFIPS,</journal>
<volume>41</volume>
<pages>1193--1202</pages>
<marker>55.</marker>
<rawString>&apos;Zeldman, J. A., J. R. Low, D. C. Swinehart, and R. H. Taylor, &amp;quot;Recent Developments in SAIL--An Algol-Based Language for Artificial Intelligence,&amp;quot; Ptoc. /972 FICC, AFIPS, Vol. 41, Part-II, 1193-1202,</rawString>
</citation>
<citation valid="true">
<authors>
<author>R C anon X M Colby Scilank</author>
</authors>
<title>Fr-eeman and Company,</title>
<date>1973</date>
<booktitle>edb„ Compute&amp; Modetz oi InougsLt</booktitle>
<location>San Francisco,</location>
<contexts>
<context position="27566" citStr="[56]" startWordPosition="4213" endWordPosition="4213">xts. To extend these programs to larger subsets of natural language poses problems, it is unlikely that any of the Tesearch directions currently being explored will of themselves &amp;quot;solve&amp;quot; the &amp;quot;natural lan guage problem&amp;quot;. (The techniques include, but are not limited to, further developments in artificial intelligence programming languages [17, 18 20, 21, 55]; refinements in theories of grammar; improved deductive ability, possibly by better theorem-proving techniques; and the introduction of stressrelated features in the ehcoding of speech [521. A useful collection of language models appears in [56].) Nevertheless, prototype systems for &amp;quot;understanding&amp;quot; both text and speech are useful achievements of engineering, and spoken entry of data by humans to computers is beginning to be established by isolated-word recognizers which use a minicomputer dedicated to the task. A multiplicity of purposes beyond this simple but practical task of data entry are mentioned briefly in the 21 foregoing discussion of &amp;quot;interaction&amp;quot;. Developments along the many diverse paths indicated under that heading are likely to be rapid in the future as practical &amp;quot;understanding&amp;quot; of subsets of language becomes part of co</context>
</contexts>
<marker>56.</marker>
<rawString>Scilank, R. C. anon X. M. Colby, edb„ Compute&amp; Modetz oi InougsLt and Language, W. H. Fr-eeman and Company, San Francisco, 1973.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Y Mks</author>
</authors>
<title>no Nachines Understand Nore Than They Did?&amp;quot;,</title>
<date>1974</date>
<journal>JAIME CARBONELL, 1928-1973 I. THEORY OF REPRESENTATION</journal>
<booktitle>Theoretical Issues in Natural Language Processing,</booktitle>
<tech>90406 Report No. TM-5292/002/00</tech>
<volume>252</volume>
<pages>22</pages>
<editor>In R. Schank and ELL. Nash-Webber, eds.,</editor>
<publisher>Academic Press</publisher>
<institution>Yale University New Haven Connecticut</institution>
<location>Nat4he, Va.</location>
<marker>57.</marker>
<rawString>Mks, Y., &amp;quot;no Nachines Understand Nore Than They Did?&amp;quot;, Nat4he, Va. 252- 22 November, 1974, pp. 275-270. Timothy Diller and Tom Bye System Development Corporation Santa Monica, California 90406 Report No. TM-5292/002/00 April 1975 In R. Schank and ELL. Nash-Webber, eds., Theoretical Issues in Natural Language Processing, 1975, 30-33. An analysis of the verb &apos;hand&apos; is paraphrased as: &apos;S had Y prior to some time t at which X used his hand to do something that caused Y to travel to Z, after which Z had Y&apos; The analysis includes a discussion of the subsumed doncepts HAPPEN, USE, ACT, CAUSE, ALLOW, BEFORE, TRAVEL, and AT. Semantics - Discourse 45 A SYSTEM OF SEMANTIC PRIMITIVES Ray Jackendoff Department of English Brandeis University In R. Schenk and B.Z. Nash-Webber, eds. Theoretical Issues in Natural Language Processing, 1975, 24-29. Primitive functions GO, BE and STAY can be extended from a positional interpretation to possessional and identificational interpretations. Two kinds of pause are distinguished, CAUSATIVE and PERMISSIVE. Inference rules based on the form of semantic representations derive logical entailments. e.g. CAUSE, (X,E)-- E. Semantics - Discourse • Comprehension 45 COMPUTATIONAL UNDERSTANDING Christopher K. Rtesbeck in R. Schenk And. B;L: Nash-Webber, eds., Theoretical Issues in Natural Language Processing, 1975, 11-16. Robert F. Abelson Yale University New Haven Connecticut In R. Schenk and B.L. Nash-Webber, Eds., Theoretical Issues in Natural Language Processing, 1975, 140-143. Herbert H. Clark Stanford University Stanford, California In; A. Schenk and B.L. Mash-Webber, Me., Theoretical Issues in Natural Language Processing, 1975, 169-174. A. W. Pratt, M. G. Pacak, M. Epstein and G. Dunham National Institutes of Health Division of Computer Research and Technology Bethesda, Maryland Journal of Clinical Coaputing, 3, 85-99, 1973 The Systematized Nomenclature of Pathology (sNOP), in use at NIH, consists of about 15,000 entries in four lists: topography, morphology, etiology, and function. Only a few binary relations on terms are needed; e.g., location of morphology, (lesion) at topography (body site). Numerous relations on the primary relational triples evidently have to be defined. Semantics - Discourse : Expression 47 GENERATION AS A SOCIAL ACTION Bertram C. Brace Bolt Beranek &amp; Newman Cambridge, Mass 02138 In: R. Schank and B.L. Nash-Webber, eds., Theoretical Issues it Natural Language Processing, 1975, 64-67. Generation is a two stage process. The first formulates a plan and the second expresses these intentions; there is feedback between the stages. Intentions can be encoded by (i) establishing presuppositions, (ii) by linguistic conventions, and (iii) by discourse structure. A_Soci.al Action Paradigm is a model of the flow of social actions. Semantics - Discourse : Expression 48 THE BOUNDARIES OF LANGUAGE GENERATION Neil M. Goldman Information Sciences Institute University of Southern California In: R. Schenk and B.L. Nash-Webber, eds., Theoretical Issues in Natural Language Processing, 1975, 74-78. In generating natural language from a conceptual structure words and syntactic structure must be deduced from the information content of the message. Words are accounted for by a pattern matching mechanism, a discrimination net. The case framework of verbs is one source of knowledge for choice of syntactic structure. Semantics - Discourse : Expression 48 SPEAKING WITH MANY TONGUES: SOME PROBLEMS IN MODELING SPEAKERS OF ACTUAL DISCOURSE John H. Clippinger, Jr. Teleos Cambridge, Hass 02138 In: R. Schenk and B.L. Nash-Webber, eds., Theoretical Issues in Natural Language Processing, 1975, 68-73 John H. Clippinger, Jr. Teleos Cambridge, Mass 02138 In: R. Schenk and B.L. Nash-Webber, eds., Theoretical Issues,in Natural Language Processing, 2975, 122-125. Wallace L. Chafe Department of Linguistics University of California Berkeley In: R. Schenk and B.L. lash-Webber, Eds., Theoretical Iggues in Natural Language Processing, 1975, 144-145. edited by Daniel G. Bobrow Allan Collins Xerox Palo Alto Research Center Bolt Beranek and Newman Palo Alto, California Cambridge, Massachusetts Academic Press Dedicated to the memory of JAIME CARBONELL, 1928-1973 I. THEORY OF REPRESENTATION</rawString>
</citation>
<citation valid="false">
<authors>
<author>Daniel G Bobrow</author>
</authors>
<title>Dimensions of representation</title>
<volume>1</volume>
<contexts>
<context position="6448" citStr="[1]" startWordPosition="931" endWordPosition="931">e to be processed increases. Success on artificial domains cannot imply a great deal about processing truly natural language. 3. PROGRAM SYSTEMS The systems cited in this section answer questions, perform commands, or conduct dialogues. 6 Programs that enable a user to execute a task via computer in an on-line mode are generally called &amp;quot;interactive&amp;quot; Some systems are so rich in their language-processing capability that they are called &amp;quot;conversational&amp;quot; Systems that have complicated capabilities and can reply with a sophisticated tesponse to an inquiry are called &amp;quot;question answering&amp;quot;. The survey [1] discusses two &amp;quot;conversational&amp;quot; ptograms ELIZA [2, 3] and STUDENT [4], which answers questions regarding algebraic word problems. SIR [5] answers questions about logic. Both [41 and [5] appear in [6], the introdirction there provides a general discussion of &amp;quot;semantic information and computer programs involving &amp;quot;semantics&amp;quot; The &amp;quot;question-answering&amp;quot; program systems described in [2, 3, 4, 5] were sophisticated mainly in methods of solving a problem or determining a response to a statement. Other systems have emphasized the retrieval of facts encoded in English. The &amp;quot;blocks-world&amp;quot; system described </context>
<context position="8234" citStr="[1]" startWordPosition="1197" endWordPosition="1197">xisting relationships among the blocks. 7 The effect of [7] was to provide a sophisticated example of computer &amp;quot;understanding&amp;quot; which led to attempts to apply similar principles to speech inputs. (More detail on parallel developments in speech processing is presented later.) The early &amp;quot;language-understanding&amp;quot; systems, BASEBALL [9], ELIZA, and STUDENT, were based on two special formats: one to represent the knowledge they store and one to find meaning in the English input. They discard all input information which cannot be transformed for internal storage. The comparison of ELIZA and STUDENT in [1] is with regard to the degree of &amp;quot;understanding&amp;quot; ELIZA responds either by transforming the input sentence (essentially mimicry) following isolation of a key word or by using a prestored content-free remark. STUDENT translates natural-language &amp;quot;descriptions of algebraic equations, ... proceeds to identify the unknowns involved and the relationships which hold between them, and (obtains and solves) a set of equations&amp;quot; [1, p 85]. Hence ELIZA &amp;quot;understands&amp;quot; only a few key words; it transforms these words via a sentence-reassembly rule, discards other parts of the sentence, and adds stock phrases to</context>
</contexts>
<marker>1.</marker>
<rawString>Dimensions of representation Daniel G. Bobrow . . 1</rawString>
</citation>
<citation valid="false">
<title>What&apos;s in a link: Foundations for semantic networks 35 William A.</title>
<journal>Woods</journal>
<volume>83</volume>
<contexts>
<context position="6501" citStr="[2, 3]" startWordPosition="937" endWordPosition="938"> domains cannot imply a great deal about processing truly natural language. 3. PROGRAM SYSTEMS The systems cited in this section answer questions, perform commands, or conduct dialogues. 6 Programs that enable a user to execute a task via computer in an on-line mode are generally called &amp;quot;interactive&amp;quot; Some systems are so rich in their language-processing capability that they are called &amp;quot;conversational&amp;quot; Systems that have complicated capabilities and can reply with a sophisticated tesponse to an inquiry are called &amp;quot;question answering&amp;quot;. The survey [1] discusses two &amp;quot;conversational&amp;quot; ptograms ELIZA [2, 3] and STUDENT [4], which answers questions regarding algebraic word problems. SIR [5] answers questions about logic. Both [41 and [5] appear in [6], the introdirction there provides a general discussion of &amp;quot;semantic information and computer programs involving &amp;quot;semantics&amp;quot; The &amp;quot;question-answering&amp;quot; program systems described in [2, 3, 4, 5] were sophisticated mainly in methods of solving a problem or determining a response to a statement. Other systems have emphasized the retrieval of facts encoded in English. The &amp;quot;blocks-world&amp;quot; system described in [71 contrasts with these in that it has sophistica</context>
</contexts>
<marker>2.</marker>
<rawString>What&apos;s in a link: Foundations for semantic networks 35 William A. Woods 83</rawString>
</citation>
<citation valid="false">
<title>Reflections on the formal description of behavior</title>
<journal>Joseph D. Becker</journal>
<contexts>
<context position="6501" citStr="[2, 3]" startWordPosition="937" endWordPosition="938"> domains cannot imply a great deal about processing truly natural language. 3. PROGRAM SYSTEMS The systems cited in this section answer questions, perform commands, or conduct dialogues. 6 Programs that enable a user to execute a task via computer in an on-line mode are generally called &amp;quot;interactive&amp;quot; Some systems are so rich in their language-processing capability that they are called &amp;quot;conversational&amp;quot; Systems that have complicated capabilities and can reply with a sophisticated tesponse to an inquiry are called &amp;quot;question answering&amp;quot;. The survey [1] discusses two &amp;quot;conversational&amp;quot; ptograms ELIZA [2, 3] and STUDENT [4], which answers questions regarding algebraic word problems. SIR [5] answers questions about logic. Both [41 and [5] appear in [6], the introdirction there provides a general discussion of &amp;quot;semantic information and computer programs involving &amp;quot;semantics&amp;quot; The &amp;quot;question-answering&amp;quot; program systems described in [2, 3, 4, 5] were sophisticated mainly in methods of solving a problem or determining a response to a statement. Other systems have emphasized the retrieval of facts encoded in English. The &amp;quot;blocks-world&amp;quot; system described in [71 contrasts with these in that it has sophistica</context>
</contexts>
<marker>3.</marker>
<rawString>Reflections on the formal description of behavior Joseph D. Becker</rawString>
</citation>
<citation valid="false">
<authors>
<author>Robert J Bobrow</author>
<author>John Seely Brown</author>
</authors>
<title>Systematic understanding: Synthesis, Analysis, and contingent knowledge in specialized understanding systems</title>
<volume>103</volume>
<publisher>II NEW MEMORY MODELS</publisher>
<contexts>
<context position="6517" citStr="[4]" startWordPosition="941" endWordPosition="941">ly a great deal about processing truly natural language. 3. PROGRAM SYSTEMS The systems cited in this section answer questions, perform commands, or conduct dialogues. 6 Programs that enable a user to execute a task via computer in an on-line mode are generally called &amp;quot;interactive&amp;quot; Some systems are so rich in their language-processing capability that they are called &amp;quot;conversational&amp;quot; Systems that have complicated capabilities and can reply with a sophisticated tesponse to an inquiry are called &amp;quot;question answering&amp;quot;. The survey [1] discusses two &amp;quot;conversational&amp;quot; ptograms ELIZA [2, 3] and STUDENT [4], which answers questions regarding algebraic word problems. SIR [5] answers questions about logic. Both [41 and [5] appear in [6], the introdirction there provides a general discussion of &amp;quot;semantic information and computer programs involving &amp;quot;semantics&amp;quot; The &amp;quot;question-answering&amp;quot; program systems described in [2, 3, 4, 5] were sophisticated mainly in methods of solving a problem or determining a response to a statement. Other systems have emphasized the retrieval of facts encoded in English. The &amp;quot;blocks-world&amp;quot; system described in [71 contrasts with these in that it has sophisticated language-pro</context>
</contexts>
<marker>4.</marker>
<rawString>Systematic understanding: Synthesis, Analysis, and contingent knowledge in specialized understanding systems Robert J. Bobrow and John Seely Brown . . . 103 II NEW MEMORY MODELS</rawString>
</citation>
<citation valid="false">
<authors>
<author>Daniel G Bobrow</author>
<author>A Donald</author>
</authors>
<title>Some principles of Memory schemata</title>
<journal>Norman</journal>
<volume>131</volume>
<contexts>
<context position="6585" citStr="[5]" startWordPosition="950" endWordPosition="950">SYSTEMS The systems cited in this section answer questions, perform commands, or conduct dialogues. 6 Programs that enable a user to execute a task via computer in an on-line mode are generally called &amp;quot;interactive&amp;quot; Some systems are so rich in their language-processing capability that they are called &amp;quot;conversational&amp;quot; Systems that have complicated capabilities and can reply with a sophisticated tesponse to an inquiry are called &amp;quot;question answering&amp;quot;. The survey [1] discusses two &amp;quot;conversational&amp;quot; ptograms ELIZA [2, 3] and STUDENT [4], which answers questions regarding algebraic word problems. SIR [5] answers questions about logic. Both [41 and [5] appear in [6], the introdirction there provides a general discussion of &amp;quot;semantic information and computer programs involving &amp;quot;semantics&amp;quot; The &amp;quot;question-answering&amp;quot; program systems described in [2, 3, 4, 5] were sophisticated mainly in methods of solving a problem or determining a response to a statement. Other systems have emphasized the retrieval of facts encoded in English. The &amp;quot;blocks-world&amp;quot; system described in [71 contrasts with these in that it has sophisticated language-processing capability It infers antecedents of pronouns and resolves am</context>
<context position="9882" citStr="[5]" startWordPosition="1463" endWordPosition="1463">dexing scheme to it. This approach has obvious limitations and was replaced by systems that use a formal representation to store limited logical concepts associated with the text. One of them is SIR, which can deduce set telationships among objects described by natural language. SIR is designed to meet the requirement that &amp;quot;in addition to echoing, upoy request, the facts it has been given, a machine which &apos;understands&apos; must be able to recognize the logical implications of those facts. It also must be able to identify (from a large data store) facts which are relevant to d particular question&amp;quot; [5]. Limited-logic systems are important because they provide methods to represent complex facts encoded in English-language statements so that the facts can be used by computer programs or accessed by a person who did not input the original textual statement of the fact. Such a second user may employ a completely different form of language encoding. Programs of this sort include DEACON [10, 11] and the early version of CONVERSE [12]. The former could &amp;quot;handle time questions&amp;quot; and used a bottom-up analysis method which allowed questions to be nested. For example, the question &amp;quot;Who is the commander </context>
</contexts>
<marker>5.</marker>
<rawString>Some principles of Memory schemata Daniel G. Bobrow and Donald A. Norman 131</rawString>
</citation>
<citation valid="false">
<title>A frame for frames: representing knowledge for recognition</title>
<journal>Benjamin J. Kuipers</journal>
<volume>151</volume>
<contexts>
<context position="6647" citStr="[6]" startWordPosition="961" endWordPosition="961">rform commands, or conduct dialogues. 6 Programs that enable a user to execute a task via computer in an on-line mode are generally called &amp;quot;interactive&amp;quot; Some systems are so rich in their language-processing capability that they are called &amp;quot;conversational&amp;quot; Systems that have complicated capabilities and can reply with a sophisticated tesponse to an inquiry are called &amp;quot;question answering&amp;quot;. The survey [1] discusses two &amp;quot;conversational&amp;quot; ptograms ELIZA [2, 3] and STUDENT [4], which answers questions regarding algebraic word problems. SIR [5] answers questions about logic. Both [41 and [5] appear in [6], the introdirction there provides a general discussion of &amp;quot;semantic information and computer programs involving &amp;quot;semantics&amp;quot; The &amp;quot;question-answering&amp;quot; program systems described in [2, 3, 4, 5] were sophisticated mainly in methods of solving a problem or determining a response to a statement. Other systems have emphasized the retrieval of facts encoded in English. The &amp;quot;blocks-world&amp;quot; system described in [71 contrasts with these in that it has sophisticated language-processing capability It infers antecedents of pronouns and resolves ambiguities in input word strings regarding blocks on a table. T</context>
<context position="11574" citStr="[6, 7, 16]" startWordPosition="1720" endWordPosition="1722">which add a first-order predicate-calculus theorem-proving capability to limited-logic systems to improve the complexity of the facts they can &amp;quot;infer&amp;quot;, and procedural systems which enable other computations to obtain complex information The theorem-proving capability is designed to work from a group of logical statements given as input (or statements consistent with these input statements) However, facts INCONSISTENT with the original statements cannot always be detected and deductive systems quickly become impractical as the number of input statements (elementary facts, axioms) becomes large [6, 7, 16], since the time to obtain a proof grows to an impractical length. Special programming languages (e.g. QA4 [17, 18], PLANNER [20, 21]), have added strategy capabilities and better methods of problem representation to reduce computing time to practical values QA4 (seeks) to develop natural, intuitive representations of problems and problem-solving programs. (The user can) blend ... procedural and declarative information that includes explicit instructions, intuitive advice, and semantic definitions. {17] However, there is currently no body of evidence regarding the effectiveness of the programs</context>
</contexts>
<marker>6.</marker>
<rawString>A frame for frames: representing knowledge for recognition Benjamin J. Kuipers 151</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>