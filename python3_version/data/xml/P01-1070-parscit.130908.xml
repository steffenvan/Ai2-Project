<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.087867">
<title confidence="0.992946">
Using Machine Learning Techniques to Interpret WH-questions
</title>
<author confidence="0.996055">
Ingrid Zukerman
</author>
<affiliation confidence="0.993844">
School of Computer Science and Software Engineering
Monash University
</affiliation>
<address confidence="0.838396">
Clayton, Victoria 3800, AUSTRALIA
</address>
<email confidence="0.997174">
ingrid@csse.monash.edu.au
</email>
<author confidence="0.9758">
Eric Horvitz
</author>
<affiliation confidence="0.921834">
Microsoft Research
</affiliation>
<address confidence="0.950819">
One Microsoft Way
Redmond, WA 98052, USA
</address>
<email confidence="0.998027">
horvitz@microsoft.com
</email>
<sectionHeader confidence="0.993888" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999987">
We describe a set of supervised ma-
chine learning experiments centering
on the construction of statistical mod-
els of WH-questions. These models,
which are built from shallow linguis-
tic features of questions, are employed
to predict target variables which repre-
sent a user’s informational goals. We
report on different aspects of the pre-
dictive performance of our models, in-
cluding the influence of various training
and testing factors on predictive perfor-
mance, and examine the relationships
among the target variables.
</bodyText>
<sectionHeader confidence="0.998991" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999948292682927">
The growth in popularity of the Internet highlights
the importance of developing machinery for gen-
erating responses to queries targeted at large un-
structured corpora. At the same time, the access
of World Wide Web resources by large numbers
of users provides opportunities for collecting and
leveraging vast amounts of data about user activ-
ity. In this paper, we describe research on exploit-
ing data collected from logs of users’ queries in
order to build models that can be used to infer
users’ informational goals from queries.
We describe experiments which use supervised
machine learning techniques to build statistical
models of questions posed to the Web-based En-
carta encyclopedia service. We focus on mod-
els and analyses of complete questions phrased
in English. These models predict a user’s infor-
mational goals from shallow linguistic features
of questions obtained from a natural language
parser. We decompose these goals into (1) the
type of information requested by the user (e.g.,
definition, value of an attribute, explanation for an
event), (2) the topic, focal point and additional re-
strictions posed by the question, and (3) the level
of detail of the answer. The long-term aim of this
project is to use predictions of these informational
goals to enhance the performance of information-
retrieval and question-answering systems. In this
paper, we report on different aspects of the predic-
tive performance of our statistical models, includ-
ing the influence of various training and testing
factors on predictive performance, and examine
the relationships among the informational goals.
In the next section, we review related research.
In Section 3, we describe the variables being
modeled. In Section 4, we discuss our predic-
tive models. We then evaluate the predictions ob-
tained from models built under different training
and modeling conditions. Finally, we summarize
the contribution of this work and discuss research
directions.
</bodyText>
<sectionHeader confidence="0.998526" genericHeader="introduction">
2 Related Research
</sectionHeader>
<bodyText confidence="0.999954892857143">
Our research builds on earlier work on the use
of probabilistic models to understand free-text
queries in search applications (Heckerman and
Horvitz, 1998; Horvitz et al., 1998), and on work
conducted in the IR arena of question answering
(QA) technologies.
Heckerman and Horvitz (1998) and Horvitz et
al. (1998) used hand-crafted models and super-
vised learning to construct Bayesian models that
predict users’ goals and needs for assistance in the
context of consumer software applications. Heck-
erman and Horvitz’ models considered words,
phrases and linguistic structures (e.g., capitaliza-
tion and definite/indefinite articles) appearing in
queries to a help system. Horvitz et al.’s models
considered a user’s recent actions in his/her use of
software, together with probabilistic information
maintained in a dynamically updated user profile.
QA research centers on the challenge of en-
hancing the response of search engines to a user’s
questions by returning precise answers rather than
returning documents, which is the more common
IR goal. QA systems typically combine tradi-
tional IR statistical methods (Salton and McGill,
1983) with “shallow” NLP techniques. One ap-
proach to the QA task consists of applying the IR
methods to retrieve documents relevant to a user’s
question, and then using the shallow NLP to ex-
tract features from both the user’s question and
the most promising retrieved documents. These
features are then used to identify an answer within
each document which best matches the user’s
question. This approach was adopted in (Kupiec,
1993; Abney et al., 2000; Cardie et al., 2000;
Moldovan et al., 2000).
The NLP components of these systems em-
ployed hand-crafted rules to infer the type of an-
swer expected. These rules were built by con-
sidering the first word of a question as well as
larger patterns of words identified in the question.
For example, the question “How far is Mars?”
might be characterized as requiring a reply of type
DISTANCE. Our work differs from traditional QA
research in its use of statistical models to pre-
dict variables that represent a user’s informational
goals. The variables under consideration include
the type of the information requested in a query,
the level of detail of the answer, and the parts-of-
speech which contain the topic the query and its
focus (which resembles the type of the expected
answer). In this paper, we focus on the predictive
models, rather than on the provision of answers to
users’ questions. We hope that in the short term,
the insights obtained from our work will assist
QA researchers to fine-tune the answers generated
by their systems.
</bodyText>
<sectionHeader confidence="0.993365" genericHeader="method">
3 Data Collection
</sectionHeader>
<bodyText confidence="0.999806816">
Our models were built from questions identi-
fied in a log of Web queries submitted to the
Encarta encyclopedia service. These questions
include traditional WH-questions, which begin
with “what”, “when”, “where”, “which”, “who”,
“why” and “how”, as well as imperative state-
ments starting with “name”, “tell”, “find”, “de-
fine” and “describe”. We extracted 97,640 ques-
tions (removing consecutive duplicates), which
constitute about 6% of the 1,649,404 queries in
the log files collected during a period of three
weeks in the year 2000. A total of 6,436 questions
were tagged by hand. Two types of tags were col-
lected for each question: (1) tags describing lin-
guistic features, and (2) tags describing high-level
informational goals of users. The former were ob-
tained automatically, while the latter were tagged
manually.
We considered three classes of linguistic fea-
tures: word-based, structural and hybrid.
Word-based features indicate the presence of
specific words or phrases in a user’s question,
which we believed showed promise for predicting
components of his/her informational goals. These
are words like “make”, “map” and “picture”.
Structural features include information ob-
tained from an XML-encoded parse tree gen-
erated for each question by NLPWin (Heidorn,
1999) – a natural language parser developed by
the Natural Language Processing Group at Mi-
crosoft Research. We extracted a total of 21 struc-
tural features, including the number of distinct
parts-of-speech (PoS) – NOUNs, VERBs, NPs,
etc – in a question, whether the main noun is plu-
ral or singular, which noun (if any) is a proper
noun, and the PoS of the head verb post-modifier.
Hybrid features are constructed from structural
and word-based information. Two hybrid fea-
tures were extracted: (1) the type of head verb in
a question, e.g., “know”, “be” or action verb;
and (2) the initial component of a question, which
usually encompasses the first word or two of the
question, e.g., “what”, “when” or “how many”,
but for “how” may be followed by a PoS, e.g.,
“how ADVERB” or “how ADJECTIVE.”
We considered the following variables rep-
resenting high-level informational goals: Infor-
mation Need, Coverage Asked, Coverage Would
Give, Topic, Focus, Restriction and LIST. Infor-
mation about the state of these variables was pro-
vided manually by three people, with the majority
of the tagging being performed under contract by
a professional outside the research team.
Information Need is a variable that repre-
sents the type of information requested by a
user. We provided fourteen types of informa-
tion need, including Attribute, IDentifica-
tion, Process, Intersection and Topic It-
self (which, as shown in Section 5, are the most
common information needs), plus the additional
category OTHER. As examples, the question “What
is a hurricane?” is an IDentification query;
“What is the color ofsand in the Kalahari?” is an
Attribute query (the attribute is “color”); “How
does lightningform?” is a Process query; “What
are the biggest lakes in New Hampshire?” is an
Intersection query (a type of IDentification,
where the returned item must satisfy a particular
Restriction – in this case “biggest”); and “Where
can Ifind a picture ofa bay?” is a Topic Itself
query (interpreted as a request for accessing an
object directly, rather than obtaining information
about the object).
Coverage Asked and Coverage Would Give are
variables that represent the level of detail in an-
swers. Coverage Asked is the level of detail of
a direct answer to a user’s question. Coverage
Would Give is the level of detail that an infor-
mation provider would include in a helpful an-
swer. For instance, although the direct answer to
the question “When did Lincoln die?” is a sin-
gle date, a helpful information provider might add
other details about Lincoln, e.g., that he was the
sixteenth president of the United States, and that
he was assassinated. This additional level of de-
tail depends on the request itself and on the avail-
able information. However, here we consider the
former factor, viewing it as an initial filter that
will guide the content planning process of an en-
hanced QA system. The distinction between the
requested level of detail and the provided level of
detail makes it possible to model questions for
which the preferred level of detail in a response
differs from the detail requested by the user. We
considered three levels of detail for both coverage
variables: Precise, Additional and Extended,
plus the additional category OTHER. Precise in-
dicates that an exact answer has been requested,
e.g., a name or date (this is the value of Cover-
age Asked in the above example); Additional
refers to a level of detail characterized by a one-
paragraph answer (this is the value of Coverage
Would Give in the above example); and Extended
indicates a longer, more detailed answer.
Topic, Focus and Restriction contain a PoS in
the parse tree of a user’s question. These variables
represent the topic of discussion, the type of the
expected answer, and information that restricts
the scope of the answer, respectively. These vari-
ables take 46 possible values, e.g., NOUN , VERB
and NP , plus the category OTHER. For each ques-
tion, the tagger selected the most specific PoS that
contains the portion of the question which best
matches each of these informational goals. For in-
stance, given the question “What are the main tra-
ditional foods that Brazilians eat?”, the Topic is
NOUN (Brazilians), the Focus is ADJ +NOUN (tra-
ditional foods) and the restriction is ADJ (main).
As shown in this example, it was sometimes nec-
essary to assign more than one PoS to these tar-
get variables. At present, these composite assign-
ments are classified as the category OTHER.
LIST is a boolean variable which indicates
whether the user is looking for a single answer
(False) or multiple answers (True).
</bodyText>
<sectionHeader confidence="0.999609" genericHeader="method">
4 Predictive Model
</sectionHeader>
<bodyText confidence="0.999870655172414">
We built decision trees to infer high-level in-
formational goals from the linguistic features
of users’ queries. One decision tree was con-
structed for each goal: Information Need, Cov-
erage Asked, Coverage Would Give, Topic, Fo-
cus, Restriction and LIST. Our decision trees were
built using dprog (Wallace and Patrick, 1993)
– a procedure based on the Minimum Message
Length principle (Wallace and Boulton, 1968).
The decision trees described in this section are
those that yield the best predictive performance
(obtained from a training set comprised of “good”
queries, as described Section 5). The trees them-
selves are too large to be included in this paper.
However, we describe the main attributes iden-
tified in each decision tree. Table 2 shows, for
each target variable, the size of the decision tree
(in number of nodes) and its maximum depth, the
attribute used for the first split, and the attributes
used for the second split. Table 1 shows examples
and descriptions of the attributes in Table 2.1
We note that the decision tree for Focus splits
first on the initial component of a question, e.g.,
“how ADJ”, “where” or “what”, and that one of
the second-split attributes is the PoS following the
initial component. These attributes were also used
to build the hand-crafted rules employed by the
QA systems described in Section 2, which con-
centrate on determining the type of the expected
</bodyText>
<footnote confidence="0.716798833333333">
1The meaning of “Total PRONOUNS” is peculiar in
our context, because the NLPWin parser tags words such
as “what” and “who” as PRONOUNs. Also, the clue at-
tributes, e.g., Comparison clues, represent groupings of dif-
ferent clues that at design time where considered helpful in
identifying certain target variables.
</footnote>
<tableCaption confidence="0.999555">
Table 1: Attributes in the decision trees
</tableCaption>
<table confidence="0.99984">
Attribute Example/Meaning
Attribute clues e.g., “name”, “type of”, “called”
Comparison clues e.g., “similar”, “differ”, “relate”
Intersection clues superlative ADJ, ordinal ADJ, relative clause
Topic Itself clues e.g., “show”, “picture”, “map”
PoS after Initial component e.g., NOUN in “which country is the largest?”
verb-post-modifier PoS e.g., NP without PP in “what is a choreographer”
Total PoS number of occurrences of PoS in a question, e.g., Total NOUNs
First NP plural? Boolean attribute
Definite article in First NP? Boolean attribute
Plural quantifier? Boolean attribute
Length in words number of words in a question
Length in phrases number of NPs + PPs + VPs in a question
</table>
<tableCaption confidence="0.967999">
Table 2: Summary of decision trees
</tableCaption>
<table confidence="0.999183071428572">
Target Variable Nodes/Depth First Split Second Split
Information Need 207/13 Initial component Attribute clues, Comparison clues, Topic Itself
clues, PoS after Initial component, verb-post-
modifier PoS, Length in words
Coverage Asked 123/11 Initial component Topic Itself clues, PoS after Initial component,
Head verb
Coverage Would Give 69/6 Topic Itself clues Initial component, Attribute clues
Topic 193/9 Total NOUNs Total ADJs, Total AJPs, Total PRONOUNs
Focus 226/10 Initial component Topic Itself clues, Total NOUNs, Total VERBs,
Total PRONOUNs, Total VPs, Head verb, PoS after
Initial component
Restriction 126/9 Total PPs Intersection clues, PoS after Initial component,
Definite article in First NP?, Length in phrases
LIST 45/7 First NP plural? Plural quantifier?, Initial component
</table>
<bodyText confidence="0.972595">
answer (which is similar to our Focus). How-
ever, our Focus decision tree includes additional
attributes in its second split (these attributes are
added by dprog because they improve predictive
performance on the training data).
</bodyText>
<sectionHeader confidence="0.999948" genericHeader="evaluation">
5 Results
</sectionHeader>
<bodyText confidence="0.9998582">
Our report on the predictive performance of the
decision trees considers the effect of various train-
ing and testing factors on predictive performance,
and examines the relationships among the target
variables.
</bodyText>
<subsectionHeader confidence="0.991361">
5.1 Training Factors
</subsectionHeader>
<bodyText confidence="0.9999766">
We examine how the quality of the training data
and the size of the training set affect predictive
performance.
Quality of the data. In our context, the quality
of the training data is determined by the wording
of the queries and the output of the parser. For
each query, the tagger could indicate whether it
was a BAD QUERY or whether a WRONG PARSE
had been produced. A BAD QUERY is incoher-
ent or articulated in such a way that the parser
generates a WRONG PARSE, e.g., “When its hot it
expand?”. Figure 1 shows the predictive perfor-
mance of the decision trees built for two train-
ing sets: All5145 and Good4617. The first set
contains 5145 queries, while the second set con-
tains a subset of the first set comprised of “good”
queries only (i.e., bad queries and queries with
wrong parses were excluded). In both cases, the
same 1291 queries were used for testing. As a
baseline measure, we also show the predictive ac-
</bodyText>
<figureCaption confidence="0.992369333333333">
Figure 1: Performance comparison: training with
all queries versus training with good queries;
prior probabilities included as baseline
</figureCaption>
<table confidence="0.9995255">
Small Medium Large X-Large
Train/All 1878 2676 3765 5145
Train/Good 1679 2389 3381 4617
Test 376 662 934 1291
</table>
<tableCaption confidence="0.999865">
Table 3: Four training and testing set sizes
</tableCaption>
<bodyText confidence="0.999706961538462">
curacy of using the maximum prior probability to
predict each target variable. These prior probabil-
ities were obtained from the training set All5145.
The Information Need with the highest prior prob-
ability is IDentification, the highest Coverage
Asked is Precise, while the highest Coverage
Would Give is Additional; NOUN contains the
most common Topic; the most common Focus and
Restriction are NONE; and LIST is almost always
False. As seen in Figure 1, the prior probabilities
yield a high predictive accuracy for Restriction
and LIST. However, for the other target variables,
the performance obtained using decision trees is
substantially better than that obtained using prior
probabilities. Further, the predictive performance
obtained for the set Good4617 is only slightly bet-
ter than that obtained for the set All5145. How-
ever, since the set of good queries is 10% smaller,
it is considered a better option.
Size of the training set. The effect of the size
of the training set on predictive performance was
assessed by considering four sizes of training/test
sets: Small, Medium, Large, and X-Large. Ta-
ble 3 shows the number of training and test
queries for each set size for the “all queries” and
the “good queries” training conditions.
</bodyText>
<figureCaption confidence="0.995591">
Figure 2: Predictive performance for four training
sets (1878, 2676, 3765 and 5145) averaged over 5
runs – All queries
Figure 3: Predictive performance for four training
sets (1679, 2389, 3381 and 4617) – Good queries
</figureCaption>
<bodyText confidence="0.9999608">
The predictive performance for the all-queries
and good-queries sets is shown in Figures 2 and 3
respectively. Figure 2 depicts the average of the
results obtained over five runs, while Figure 3
shows the results of a single run (similar results
were obtained from other runs performed with the
good-queries sets). As indicated by these results,
for both data sets there is a general improvement
in predictive performance as the size of the train-
ing set increases.
</bodyText>
<subsectionHeader confidence="0.999756">
5.2 Testing Factors
</subsectionHeader>
<bodyText confidence="0.999350375">
We examine the effect of two factors on the pre-
dictive performance of our models: (1) query
length (measured in number of words), and (2) in-
formation need (as recorded by the tagger). These
effects were studied with respect to the predic-
tions generated by the decision trees obtained
from the set Good4617, which had the best per-
formance overall.
</bodyText>
<figureCaption confidence="0.991279">
Figure 4: Query length distribution – Test set Figure 6: Information need distribution – Test set
Figure 5: Predictive performance by query length
– Good queries
</figureCaption>
<bodyText confidence="0.950790545454546">
Query length. The queries were divided into
four length categories (measured in number of
words): length ,length ,length
and length. Figure 4 displays the distribu-
tion of queries in the test set according to these
length categories. According to this distribution,
over 90% of the queries have less than 11 words.
The predictive performance of our decision trees
broken down by query length is shown in Fig-
ure 5. As shown in this chart, for all target vari-
ables there is a downward trend in predictive ac-
curacy as query length increases. Still, for queries
of less than 11 words and all target variables ex-
cept Topic, the predictive accuracy remains over
74%. In contrast, the Topic predictions drop from
88% (for queries of less than 5 words) to 57%
(for queries of 8, 9 or 10 words). Further, the pre-
dictive accuracy for Information Need, Topic, Fo-
cus and Restriction drops substantially for queries
that have 11 words or more. This drop in predic-
tive performance may be explained by two fac-
tors. For one, the majority of the training data
</bodyText>
<figureCaption confidence="0.788255">
Figure 7: Predictive performance for five most
frequent information needs – Good queries
</figureCaption>
<bodyText confidence="0.999038619047619">
consists of shorter questions. Hence, the applica-
bility of the inferred models to longer questions
may be limited. Also, longer questions may exac-
erbate errors associated with some of the indepen-
dence assumptions implicit in our current model.
Information need. Figure 6 displays the dis-
tribution of the queries in the test set ac-
cording to Information Need. The five
most common Information Need categories
are: IDentification, Attribute, Topic It-
self, Intersection and Process, jointly ac-
counting for over 94% of the queries. Figure 7
displays the predictive performance of our models
for these five categories. The best performance
is exhibited for the IDentification and Topic
Itself queries. In contrast, the lowest predictive
accuracy was obtained for the Information Need,
Topic and Restriction of Intersection queries.
This can be explained by the observation that In-
tersection queries tend to be the longest queries
(as seen above, predictive accuracy drops for long
</bodyText>
<figureCaption confidence="0.96471475">
Figure 8: Performance comparison for four pre-
diction models: PerfectInformation, BestRe-
sults, PredictionOnly and Mixed; prior prob-
abilities included as baseline
</figureCaption>
<bodyText confidence="0.999418666666667">
queries). The relatively low predictive accuracy
obtained for both types of Coverage for Process
queries remains to be explained.
</bodyText>
<subsectionHeader confidence="0.999093">
5.3 Relations between target variables
</subsectionHeader>
<bodyText confidence="0.999948890909091">
To determine whether the states of our target
variables affect each other, we built three pre-
diction models, each of which includes six tar-
get variables for predicting the remaining vari-
able. For instance, Information Need, Coverage
Asked, Coverage Would Give, Focus, Restriction
and LIST are incorporated as data (in addition to
the observable variables) when training a model
that predicts Focus. Our three models are: Pre-
dictionOnly – which uses the predicted values
of the six target variables both for the training set
and for the test set; Mixed – which uses the actual
values of the six target variables for the training
set and their predicted values for the test set; and
PerfectInformation – which uses actual values
of the six target variables for both training and
testing. This model enables us to determine the
performance boundaries of our methodology in
light of the currently observed attributes.
Figure 8 shows the predictive accuracy of five
models: the above three models, our best model
so far (obtained from the training set Good4617)
– denoted BestResult, and prior probabilities.
As expected, the PerfectInformation model
has the best performance. However, its predic-
tive accuracy is relatively low for Topic and Fo-
cus, suggesting some inherent limitations of our
methodology. The performance of the Predic-
tionOnly model is comparable to that of BestRe-
sult, but the performance of the Mixed model
seems slightly worse. This difference in perfor-
mance may be attributed to the fact that the Pre-
dictionOnly model is a “smoothed” version of
the Mixed model. That is, the PredictionOnly
model uses a consistent version of the target vari-
ables (i.e., predicted values) both for training and
testing. This is not the case for the Mixed model,
where actual values are used for training (thus the
Mixed model is the same as the PerfectInfor-
mation model), but predicted values (which are
not always accurate) are used for testing.
Finally, Information Need features prominently
both in the PerfectInformation/Mixed model
and the PredictionOnly model, being used in
the first or second split of most of the decision
trees for the other target variables. Also, as ex-
pected, Coverage Asked is used to predict Cov-
erage Would Give and vice versa. These re-
sults suggest using modeling techniques which
can take advantage of dependencies among tar-
get variables. These techniques would enable the
construction of models which take into account
the distribution of the predicted values of one or
more target variables when predicting another tar-
get variable.
</bodyText>
<sectionHeader confidence="0.998752" genericHeader="conclusions">
6 Discussion and Future Work
</sectionHeader>
<bodyText confidence="0.999985056338028">
We have introduced a predictive model, built
by applying supervised machine-learning tech-
niques, which can be used to infer a user’s key in-
formational goals from free-text questions posed
to an Internet search service. The predictive
model, which is built from shallow linguistic fea-
tures of users’ questions, infers a user’s informa-
tion need, the level of detail requested by the user,
the level of detail deemed appropriate by an infor-
mation provider, and the topic, focus and restric-
tions of the user’s question. The performance of
our model is encouraging, in particular for shorter
queries, and for queries with certain information
needs. However, further improvements are re-
quired in order to make this model practically ap-
plicable.
We believe there is an opportunity to identify
additional linguistic distinctions that could im-
prove the model’s predictive performance. For
example, we intend to represent frequent combi-
nations of PoS, such as NOUN +NOUN , which are
currently classified as OTHER (Section 3). We also
propose to investigate predictive models which
return more informative predictions than those re-
turned by our current model, e.g., a distribution
of the probable informational goals, instead of a
single goal. This would enable an enhanced QA
system to apply a decision procedure in order to
determine a course of action. For example, if the
Additional value of the Coverage Would Give
variable has a relatively high probability, the sys-
tem could consider more than one Information
Need, Topic or Focus when generating its reply.
In general, the decision-tree generation meth-
ods described in this paper do not have the abil-
ity to take into account the relationships among
different target variables. In Section 5.3, we in-
vestigated this problem by building decision trees
which incorporate predicted and actual values of
target variables. Our results indicate that it is
worth exploring the relationships between several
of the target variables. We intend to use the in-
sights obtained from this experiment to construct
models which can capture probabilistic depen-
dencies among variables.
Finally, as indicated in Section 1, this project
is part of a larger effort centered on improv-
ing a user’s ability to access information from
large information spaces. The next stage of this
project involves using the predictions generated
by our model to enhance the performance of QA
or IR systems. One such enhancement pertains
to query reformulation, whereby the inferred in-
formational goals can be used to reformulate or
expand queries in a manner that increases the
likelihood of returning appropriate answers. As
an example of query expansion, if Process was
identified as the Information Need of a query,
words that boost responses to searches for infor-
mation relating to processes could be added to the
query prior to submitting it to a search engine.
Another envisioned enhancement would attempt
to improve the initial recall of the document re-
trieval process by submitting queries which con-
tain the content words in the Topic and Focus of a
user’s question (instead of including all the con-
tent words in the question). In the longer term, we
plan to explore the use of Coverage results to en-
able an enhanced QA system to compose an ap-
propriate answer from information found in the
retrieved documents.
</bodyText>
<sectionHeader confidence="0.996558" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.9999668">
This research was largely performed during the
first author’s visit at Microsoft Research. The au-
thors thank Heidi Lindborg, Mo Corston-Oliver
and Debbie Zukerman for their contribution to the
tagging effort.
</bodyText>
<sectionHeader confidence="0.999181" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.99993625">
S. Abney, M. Collins, and A. Singhal. 2000. Answer
extraction. In Proceedings of the Sixth Applied Nat-
ural Language Processing Conference, pages 296–
301, Seattle, Washington.
C. Cardie, V. Ng, D. Pierce, and C. Buckley.
2000. Examining the role of statistical and lin-
guistic knowledge sources in a general-knowledge
question-answering system. In Proceedings of the
Sixth Applied Natural Language Processing Con-
ference, pages 180–187, Seattle, Washington.
D. Heckerman and E. Horvitz. 1998. Inferring infor-
mational goals from free-text queries: A Bayesian
approach. In Proceedings of the Fourteenth Confer-
ence on Uncertainty in Artificial Intelligence, pages
230–237, Madison, Wisconsin.
G. Heidorn. 1999. Intelligent writing assistance. In
A Handbook ofNatural Language Processing Tech-
niques. Marcel Dekker.
E. Horvitz, J. Breese, D. Heckerman, D. Hovel,
and K. Rommelse. 1998. The Lumiere project:
Bayesian user modeling for inferring the goals and
needs of software users. In Proceedings of the
Fourteenth Conference on Uncertainty in Artificial
Intelligence, pages 256–265, Madison, Wisconsin.
J. Kupiec. 1993. MURAX: A robust linguistic ap-
proach for question answering using an on-line en-
cyclopedia. In Proceedings of the 16th Annual
International ACM-SIGIR Conference on Research
and Development in Information Retrieval, pages
181–190, Pittsburgh, Pennsylvania.
D. Moldovan, S. Harabagiu, M. Pasca, R. Mihalcea,
R. Girju, R. Goodrum, and V. Rus. 2000. The
structure and performance of an open-domain ques-
tion answering system. In ACL2000 – Proceedings
of the 38th Annual Meeting of the Association for
Computational Linguistics, pages 563–570, Hong
Kong.
G. Salton and M.J. McGill. 1983. An Introduction to
Modern Information Retrieval. McGraw Hill.
C.S. Wallace and D.M. Boulton. 1968. An informa-
tion measure for classification. The ComputerJour-
nal, 11:185–194.
C.S. Wallace and J.D. Patrick. 1993. Coding decision
trees. Machine Learning, 11:7–22.
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.972390">
<title confidence="0.999976">Using Machine Learning Techniques to Interpret WH-questions</title>
<author confidence="0.999952">Ingrid Zukerman</author>
<affiliation confidence="0.9992995">School of Computer Science and Software Engineering Monash University</affiliation>
<address confidence="0.999924">Clayton, Victoria 3800, AUSTRALIA</address>
<email confidence="0.98781">ingrid@csse.monash.edu.au</email>
<author confidence="0.999926">Eric Horvitz</author>
<affiliation confidence="0.999895">Microsoft Research</affiliation>
<address confidence="0.994453">One Microsoft Way Redmond, WA 98052, USA</address>
<email confidence="0.999717">horvitz@microsoft.com</email>
<abstract confidence="0.999824133333333">We describe a set of supervised machine learning experiments centering on the construction of statistical models of WH-questions. These models, which are built from shallow linguistic features of questions, are employed to predict target variables which represent a user’s informational goals. We report on different aspects of the predictive performance of our models, including the influence of various training and testing factors on predictive performance, and examine the relationships among the target variables.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>S Abney</author>
<author>M Collins</author>
<author>A Singhal</author>
</authors>
<title>Answer extraction.</title>
<date>2000</date>
<booktitle>In Proceedings of the Sixth Applied Natural Language Processing Conference,</booktitle>
<pages>296--301</pages>
<location>Seattle, Washington.</location>
<contexts>
<context position="4393" citStr="Abney et al., 2000" startWordPosition="667" endWordPosition="670">ecise answers rather than returning documents, which is the more common IR goal. QA systems typically combine traditional IR statistical methods (Salton and McGill, 1983) with “shallow” NLP techniques. One approach to the QA task consists of applying the IR methods to retrieve documents relevant to a user’s question, and then using the shallow NLP to extract features from both the user’s question and the most promising retrieved documents. These features are then used to identify an answer within each document which best matches the user’s question. This approach was adopted in (Kupiec, 1993; Abney et al., 2000; Cardie et al., 2000; Moldovan et al., 2000). The NLP components of these systems employed hand-crafted rules to infer the type of answer expected. These rules were built by considering the first word of a question as well as larger patterns of words identified in the question. For example, the question “How far is Mars?” might be characterized as requiring a reply of type DISTANCE. Our work differs from traditional QA research in its use of statistical models to predict variables that represent a user’s informational goals. The variables under consideration include the type of the informatio</context>
</contexts>
<marker>Abney, Collins, Singhal, 2000</marker>
<rawString>S. Abney, M. Collins, and A. Singhal. 2000. Answer extraction. In Proceedings of the Sixth Applied Natural Language Processing Conference, pages 296– 301, Seattle, Washington.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C Cardie</author>
<author>V Ng</author>
<author>D Pierce</author>
<author>C Buckley</author>
</authors>
<title>Examining the role of statistical and linguistic knowledge sources in a general-knowledge question-answering system.</title>
<date>2000</date>
<booktitle>In Proceedings of the Sixth Applied Natural Language Processing Conference,</booktitle>
<pages>180--187</pages>
<location>Seattle, Washington.</location>
<contexts>
<context position="4414" citStr="Cardie et al., 2000" startWordPosition="671" endWordPosition="674"> than returning documents, which is the more common IR goal. QA systems typically combine traditional IR statistical methods (Salton and McGill, 1983) with “shallow” NLP techniques. One approach to the QA task consists of applying the IR methods to retrieve documents relevant to a user’s question, and then using the shallow NLP to extract features from both the user’s question and the most promising retrieved documents. These features are then used to identify an answer within each document which best matches the user’s question. This approach was adopted in (Kupiec, 1993; Abney et al., 2000; Cardie et al., 2000; Moldovan et al., 2000). The NLP components of these systems employed hand-crafted rules to infer the type of answer expected. These rules were built by considering the first word of a question as well as larger patterns of words identified in the question. For example, the question “How far is Mars?” might be characterized as requiring a reply of type DISTANCE. Our work differs from traditional QA research in its use of statistical models to predict variables that represent a user’s informational goals. The variables under consideration include the type of the information requested in a quer</context>
</contexts>
<marker>Cardie, Ng, Pierce, Buckley, 2000</marker>
<rawString>C. Cardie, V. Ng, D. Pierce, and C. Buckley. 2000. Examining the role of statistical and linguistic knowledge sources in a general-knowledge question-answering system. In Proceedings of the Sixth Applied Natural Language Processing Conference, pages 180–187, Seattle, Washington.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Heckerman</author>
<author>E Horvitz</author>
</authors>
<title>Inferring informational goals from free-text queries: A Bayesian approach.</title>
<date>1998</date>
<booktitle>In Proceedings of the Fourteenth Conference on Uncertainty in Artificial Intelligence,</booktitle>
<pages>230--237</pages>
<location>Madison, Wisconsin.</location>
<contexts>
<context position="2965" citStr="Heckerman and Horvitz, 1998" startWordPosition="445" endWordPosition="448">nd testing factors on predictive performance, and examine the relationships among the informational goals. In the next section, we review related research. In Section 3, we describe the variables being modeled. In Section 4, we discuss our predictive models. We then evaluate the predictions obtained from models built under different training and modeling conditions. Finally, we summarize the contribution of this work and discuss research directions. 2 Related Research Our research builds on earlier work on the use of probabilistic models to understand free-text queries in search applications (Heckerman and Horvitz, 1998; Horvitz et al., 1998), and on work conducted in the IR arena of question answering (QA) technologies. Heckerman and Horvitz (1998) and Horvitz et al. (1998) used hand-crafted models and supervised learning to construct Bayesian models that predict users’ goals and needs for assistance in the context of consumer software applications. Heckerman and Horvitz’ models considered words, phrases and linguistic structures (e.g., capitalization and definite/indefinite articles) appearing in queries to a help system. Horvitz et al.’s models considered a user’s recent actions in his/her use of software</context>
</contexts>
<marker>Heckerman, Horvitz, 1998</marker>
<rawString>D. Heckerman and E. Horvitz. 1998. Inferring informational goals from free-text queries: A Bayesian approach. In Proceedings of the Fourteenth Conference on Uncertainty in Artificial Intelligence, pages 230–237, Madison, Wisconsin.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Heidorn</author>
</authors>
<title>Intelligent writing assistance.</title>
<date>1999</date>
<booktitle>In A Handbook ofNatural Language Processing Techniques.</booktitle>
<publisher>Marcel Dekker.</publisher>
<contexts>
<context position="6722" citStr="Heidorn, 1999" startWordPosition="1043" endWordPosition="1044">istic features, and (2) tags describing high-level informational goals of users. The former were obtained automatically, while the latter were tagged manually. We considered three classes of linguistic features: word-based, structural and hybrid. Word-based features indicate the presence of specific words or phrases in a user’s question, which we believed showed promise for predicting components of his/her informational goals. These are words like “make”, “map” and “picture”. Structural features include information obtained from an XML-encoded parse tree generated for each question by NLPWin (Heidorn, 1999) – a natural language parser developed by the Natural Language Processing Group at Microsoft Research. We extracted a total of 21 structural features, including the number of distinct parts-of-speech (PoS) – NOUNs, VERBs, NPs, etc – in a question, whether the main noun is plural or singular, which noun (if any) is a proper noun, and the PoS of the head verb post-modifier. Hybrid features are constructed from structural and word-based information. Two hybrid features were extracted: (1) the type of head verb in a question, e.g., “know”, “be” or action verb; and (2) the initial component of a qu</context>
</contexts>
<marker>Heidorn, 1999</marker>
<rawString>G. Heidorn. 1999. Intelligent writing assistance. In A Handbook ofNatural Language Processing Techniques. Marcel Dekker.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Horvitz</author>
<author>J Breese</author>
<author>D Heckerman</author>
<author>D Hovel</author>
<author>K Rommelse</author>
</authors>
<title>The Lumiere project: Bayesian user modeling for inferring the goals and needs of software users.</title>
<date>1998</date>
<booktitle>In Proceedings of the Fourteenth Conference on Uncertainty in Artificial Intelligence,</booktitle>
<pages>256--265</pages>
<location>Madison, Wisconsin.</location>
<contexts>
<context position="2988" citStr="Horvitz et al., 1998" startWordPosition="449" endWordPosition="452">ive performance, and examine the relationships among the informational goals. In the next section, we review related research. In Section 3, we describe the variables being modeled. In Section 4, we discuss our predictive models. We then evaluate the predictions obtained from models built under different training and modeling conditions. Finally, we summarize the contribution of this work and discuss research directions. 2 Related Research Our research builds on earlier work on the use of probabilistic models to understand free-text queries in search applications (Heckerman and Horvitz, 1998; Horvitz et al., 1998), and on work conducted in the IR arena of question answering (QA) technologies. Heckerman and Horvitz (1998) and Horvitz et al. (1998) used hand-crafted models and supervised learning to construct Bayesian models that predict users’ goals and needs for assistance in the context of consumer software applications. Heckerman and Horvitz’ models considered words, phrases and linguistic structures (e.g., capitalization and definite/indefinite articles) appearing in queries to a help system. Horvitz et al.’s models considered a user’s recent actions in his/her use of software, together with probabi</context>
</contexts>
<marker>Horvitz, Breese, Heckerman, Hovel, Rommelse, 1998</marker>
<rawString>E. Horvitz, J. Breese, D. Heckerman, D. Hovel, and K. Rommelse. 1998. The Lumiere project: Bayesian user modeling for inferring the goals and needs of software users. In Proceedings of the Fourteenth Conference on Uncertainty in Artificial Intelligence, pages 256–265, Madison, Wisconsin.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Kupiec</author>
</authors>
<title>MURAX: A robust linguistic approach for question answering using an on-line encyclopedia.</title>
<date>1993</date>
<booktitle>In Proceedings of the 16th Annual International ACM-SIGIR Conference on Research and Development in Information Retrieval,</booktitle>
<pages>181--190</pages>
<location>Pittsburgh, Pennsylvania.</location>
<contexts>
<context position="4373" citStr="Kupiec, 1993" startWordPosition="665" endWordPosition="666">y returning precise answers rather than returning documents, which is the more common IR goal. QA systems typically combine traditional IR statistical methods (Salton and McGill, 1983) with “shallow” NLP techniques. One approach to the QA task consists of applying the IR methods to retrieve documents relevant to a user’s question, and then using the shallow NLP to extract features from both the user’s question and the most promising retrieved documents. These features are then used to identify an answer within each document which best matches the user’s question. This approach was adopted in (Kupiec, 1993; Abney et al., 2000; Cardie et al., 2000; Moldovan et al., 2000). The NLP components of these systems employed hand-crafted rules to infer the type of answer expected. These rules were built by considering the first word of a question as well as larger patterns of words identified in the question. For example, the question “How far is Mars?” might be characterized as requiring a reply of type DISTANCE. Our work differs from traditional QA research in its use of statistical models to predict variables that represent a user’s informational goals. The variables under consideration include the ty</context>
</contexts>
<marker>Kupiec, 1993</marker>
<rawString>J. Kupiec. 1993. MURAX: A robust linguistic approach for question answering using an on-line encyclopedia. In Proceedings of the 16th Annual International ACM-SIGIR Conference on Research and Development in Information Retrieval, pages 181–190, Pittsburgh, Pennsylvania.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Moldovan</author>
<author>S Harabagiu</author>
<author>M Pasca</author>
<author>R Mihalcea</author>
<author>R Girju</author>
<author>R Goodrum</author>
<author>V Rus</author>
</authors>
<title>The structure and performance of an open-domain question answering system.</title>
<date>2000</date>
<booktitle>In ACL2000 – Proceedings of the 38th Annual Meeting of the Association for Computational Linguistics,</booktitle>
<pages>563--570</pages>
<location>Hong Kong.</location>
<contexts>
<context position="4438" citStr="Moldovan et al., 2000" startWordPosition="675" endWordPosition="678">ents, which is the more common IR goal. QA systems typically combine traditional IR statistical methods (Salton and McGill, 1983) with “shallow” NLP techniques. One approach to the QA task consists of applying the IR methods to retrieve documents relevant to a user’s question, and then using the shallow NLP to extract features from both the user’s question and the most promising retrieved documents. These features are then used to identify an answer within each document which best matches the user’s question. This approach was adopted in (Kupiec, 1993; Abney et al., 2000; Cardie et al., 2000; Moldovan et al., 2000). The NLP components of these systems employed hand-crafted rules to infer the type of answer expected. These rules were built by considering the first word of a question as well as larger patterns of words identified in the question. For example, the question “How far is Mars?” might be characterized as requiring a reply of type DISTANCE. Our work differs from traditional QA research in its use of statistical models to predict variables that represent a user’s informational goals. The variables under consideration include the type of the information requested in a query, the level of detail o</context>
</contexts>
<marker>Moldovan, Harabagiu, Pasca, Mihalcea, Girju, Goodrum, Rus, 2000</marker>
<rawString>D. Moldovan, S. Harabagiu, M. Pasca, R. Mihalcea, R. Girju, R. Goodrum, and V. Rus. 2000. The structure and performance of an open-domain question answering system. In ACL2000 – Proceedings of the 38th Annual Meeting of the Association for Computational Linguistics, pages 563–570, Hong Kong.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Salton</author>
<author>M J McGill</author>
</authors>
<title>An Introduction to Modern Information Retrieval.</title>
<date>1983</date>
<publisher>McGraw Hill.</publisher>
<contexts>
<context position="3945" citStr="Salton and McGill, 1983" startWordPosition="592" endWordPosition="595">itz’ models considered words, phrases and linguistic structures (e.g., capitalization and definite/indefinite articles) appearing in queries to a help system. Horvitz et al.’s models considered a user’s recent actions in his/her use of software, together with probabilistic information maintained in a dynamically updated user profile. QA research centers on the challenge of enhancing the response of search engines to a user’s questions by returning precise answers rather than returning documents, which is the more common IR goal. QA systems typically combine traditional IR statistical methods (Salton and McGill, 1983) with “shallow” NLP techniques. One approach to the QA task consists of applying the IR methods to retrieve documents relevant to a user’s question, and then using the shallow NLP to extract features from both the user’s question and the most promising retrieved documents. These features are then used to identify an answer within each document which best matches the user’s question. This approach was adopted in (Kupiec, 1993; Abney et al., 2000; Cardie et al., 2000; Moldovan et al., 2000). The NLP components of these systems employed hand-crafted rules to infer the type of answer expected. The</context>
</contexts>
<marker>Salton, McGill, 1983</marker>
<rawString>G. Salton and M.J. McGill. 1983. An Introduction to Modern Information Retrieval. McGraw Hill.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C S Wallace</author>
<author>D M Boulton</author>
</authors>
<title>An information measure for classification. The ComputerJournal,</title>
<date>1968</date>
<pages>11--185</pages>
<contexts>
<context position="11708" citStr="Wallace and Boulton, 1968" startWordPosition="1872" endWordPosition="1875">ent, these composite assignments are classified as the category OTHER. LIST is a boolean variable which indicates whether the user is looking for a single answer (False) or multiple answers (True). 4 Predictive Model We built decision trees to infer high-level informational goals from the linguistic features of users’ queries. One decision tree was constructed for each goal: Information Need, Coverage Asked, Coverage Would Give, Topic, Focus, Restriction and LIST. Our decision trees were built using dprog (Wallace and Patrick, 1993) – a procedure based on the Minimum Message Length principle (Wallace and Boulton, 1968). The decision trees described in this section are those that yield the best predictive performance (obtained from a training set comprised of “good” queries, as described Section 5). The trees themselves are too large to be included in this paper. However, we describe the main attributes identified in each decision tree. Table 2 shows, for each target variable, the size of the decision tree (in number of nodes) and its maximum depth, the attribute used for the first split, and the attributes used for the second split. Table 1 shows examples and descriptions of the attributes in Table 2.1 We n</context>
</contexts>
<marker>Wallace, Boulton, 1968</marker>
<rawString>C.S. Wallace and D.M. Boulton. 1968. An information measure for classification. The ComputerJournal, 11:185–194.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C S Wallace</author>
<author>J D Patrick</author>
</authors>
<title>Coding decision trees.</title>
<date>1993</date>
<booktitle>Machine Learning,</booktitle>
<pages>11--7</pages>
<contexts>
<context position="11620" citStr="Wallace and Patrick, 1993" startWordPosition="1858" endWordPosition="1861">t was sometimes necessary to assign more than one PoS to these target variables. At present, these composite assignments are classified as the category OTHER. LIST is a boolean variable which indicates whether the user is looking for a single answer (False) or multiple answers (True). 4 Predictive Model We built decision trees to infer high-level informational goals from the linguistic features of users’ queries. One decision tree was constructed for each goal: Information Need, Coverage Asked, Coverage Would Give, Topic, Focus, Restriction and LIST. Our decision trees were built using dprog (Wallace and Patrick, 1993) – a procedure based on the Minimum Message Length principle (Wallace and Boulton, 1968). The decision trees described in this section are those that yield the best predictive performance (obtained from a training set comprised of “good” queries, as described Section 5). The trees themselves are too large to be included in this paper. However, we describe the main attributes identified in each decision tree. Table 2 shows, for each target variable, the size of the decision tree (in number of nodes) and its maximum depth, the attribute used for the first split, and the attributes used for the s</context>
</contexts>
<marker>Wallace, Patrick, 1993</marker>
<rawString>C.S. Wallace and J.D. Patrick. 1993. Coding decision trees. Machine Learning, 11:7–22.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>