<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000001">
<title confidence="0.795885">
PARADIGMATIC MORPHOLOGY
</title>
<author confidence="0.97015">
Jonathan Calder
</author>
<affiliation confidence="0.85194875">
University of Edinburgh
Centre for Cognitive Science
2 Buccleuch Place
Edinburgh
</affiliation>
<address confidence="0.67919">
Scotland
EH8 9LW
</address>
<sectionHeader confidence="0.720474" genericHeader="abstract">
ABSTRACT
</sectionHeader>
<bodyText confidence="0.996093111111111">
We present a notation for the declarative
statement of morphological relationships and lexical
rules, based on the traditional notion of Word and
Paradigm (cf Hockett 1954). The phenomenon of
blocking arises from a generalized version of
Kiparsky&apos;s (1973) Elsewhere Condition, stated in
terms of ordering by subsumption over paradigms.
Orthographic constraints on morphemic alternation
are described by means of string equations (Siekmann
1975). We indicate some criticisms to be made of our
approach from both linguistic and computational
perspectives and relate our approach to others such as
Finite-State Morphology (Koskenniemi 1983),
DATR (Gazdar and Evans 1989) and object-oriented
morphophonemics (de Smedt 1984, Daelemans
1988). Finally, we discuss the questions of whether a
system involving string equations allows a reduction
to finite-state techniques.
</bodyText>
<sectionHeader confidence="0.998679" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.973231904761905">
A common assumption in linguistics is that the
phonological, morphological and orthographic
statements are most appropriately phrased in a
fundamentally procedural way, (see for example
Hoeksma and Janda 1988). Morphological analysis
under the rubric of finite-state morphology
(Koskenniemi 1983) has arguably tended to support
the view that morphological alternation is best
described by stating procedures for the destructive
alteration of orthographic units. At the very least, it
appears to have led to the view that morphological
descriptions should be restricted to those with an
immediate interpretation in terms of the operations of
finite-state transducers.
In this paper, we present a notation for the
declarative statement of morphological relationships
and lexical rules, based on the traditional notion of
Word and Paradigm (WP, Hockett 1954, see alsc
Anderson 1982). The phenomenon of blocking arises
from a generalized version of Kiparsky&apos;s (1973)
Elsewhere Condition, stated in terms of ordering by
subsumption over paradigms. Orthographic
constraints on morphemic alternation are described by
means of string equations (Siekmann 1975).
We will first give a brief introduction to string
equations and the other formal devices used in ow
model, namely lexical entries and rules, grammatical
properties and paradigms. We give example
paradigms and show how our interpretation of
paradigms leads to the phenomenon of blocking. We
will then indicate some criticisms to be made of ou;
approach from both linguistic and computational
perspectives. We discuss relations between ow
proposals and the approaches of Finite-State
Morphology (FSM, Koskenniemi 1983), DAT f;
(Gazdar and Evans 1989) and object-orientec
morphophonemics (de Smedt 1985, Daelemans
1988). One important question in the light of curreni
work in morphology is whether a system involving
string equations allows a reduction to finite-state
techniques. We review some possible answers to this
question.
</bodyText>
<sectionHeader confidence="0.882179" genericHeader="method">
2 Components of the Model
</sectionHeader>
<subsectionHeader confidence="0.964403">
2.1 String Equations and Strini
Unification
</subsectionHeader>
<bodyText confidence="0.983203384615385">
This introduction is based on Siekmann (1975)
A string a is a sequence of elements drawn from ;
finite alphabet C combined by the associative
operator +, representing the concatenation of strings
- 58 -
A string specification or string form is a sequence
possibly containing variables drawn from the set of
variables V, disjoint from C. Omission of the
operator + increases legibility as shown in the right
hand column of (1) which gives examples of strings
Cab) and string specifications (c-e) and where lower
case alphabetics represent elements of C and upper
case alphabetics elements of V.
</bodyText>
<figure confidence="0.7534202">
w+a+1+k+s walks
s+6-1-r sOr
A A
W+s Ws
k+V+t+V+b kVtVb
</figure>
<bodyText confidence="0.999767375">
String specifications are partial descriptions of
strings. As with the standard use of unification in
computational linguistics (Shieber et al 1983, Pereira
1987), we may take two partial descriptions to
describe the same object. We use string equations to
represent this situation. The examples in (2) show
string equations and the assignments of values to
variables which satisfy the equations.
</bodyText>
<listItem confidence="0.806240833333333">
(2) a. walks = Ws
a&apos;. W/walk
b. sorAk = XYZYW
b&apos;. NO, Y/8, X/s, Z/r, W/k
c. kVtWb = CiDaE
c&apos;. V/i, W/a, C/k, D/t, E/b
</listItem>
<bodyText confidence="0.987073">
The operation which determines the assignments
of values to variables (equivalently, determines the
most general unifying substitution for a given
problem) is string unification. While no complete,
terminating algorithm for the general case of string
unification exists, the class of problems described by
Siekmann (op. cit., section 4.3.3.2) as P13.5, that is
where repeated variables are only permitted on one
side of an equation, are decidable and have only
finitary substitutions (see also Siekmann 1984).
Whether or not an equation falls within P0.5 is easily
determined. The examples in (2) and in the rest of this
paper all fall within this class. We will refer to the
result of applying a unifying substitution to either
side of a string equation as the unification of the two
string specifications in question.
The relation of subsumption defines a partial
ordering on string specifications. A string
specification S subsumes another S&apos; (S g S&apos;) if all
ground instances (i.e. instances that contain no
variables) of S&apos; are also instances of S. Equivalently,
S g S&apos; if the unification of S and S&apos; is S&apos; (S&apos; U s
S = S&apos;). If S and S&apos; are inconsistent, S U s S&apos; is
undefined.
It is worth noting that the use of string
unification is widespread in the field of automatic
theorem proving, as an extension of standard
resolution techniques and typically as an instance of
what Plotkin (1972) terms &amp;quot;building in equational
theories&amp;quot;, that is the extension of standard unification
algorithms by axioms such as associativity and the
development of a normal form for the resulting theory
(Plotkin op.cit. p74).
</bodyText>
<subsectionHeader confidence="0.918998">
2.2 Lexical entries
</subsectionHeader>
<bodyText confidence="0.99994675">
A lexical entry S:P associates a string S (i.e. S
contains no variables) and a set of grammatical
properties P. We will here treat grammatical
properties as atomic. (Their ultimate interpretation is
intended to be similar to that of templates in PATR-1I
(Shieber et al 1983)). A lexical specification a:4)
subsumes another a&apos;:4)&apos; iff a g a&apos; and 4) 5
where 5. represents the partial ordering over sets
defined by the relation of set inclusion. (In other
words, a&apos;:4)&apos; contains at least as much orthographic
and grammatical information as a:4)). The lexicon
consists of a finite set of lexical entries.
</bodyText>
<subsectionHeader confidence="0.980862">
2.3 Lexical rules
</subsectionHeader>
<bodyText confidence="0.9997178">
A lexical rule is a triple &lt;Name, IS:IP,
OS:OP&gt;, representing a mapping between a set of
&amp;quot;input&amp;quot; properties IP and a set of &amp;quot;output&amp;quot; properties
OP. The interpretation of a rule with respect to
grammatical properties is as follows:
</bodyText>
<listItem confidence="0.966089">
(3) Given a lexical item S:P, and a lexical rule,
&lt;LR, IS:IP, OS:OP&gt;, as before, L R
relates P to another set of properties P&apos; (its
&amp;quot;output&amp;quot;) in the following way:
</listItem>
<bodyText confidence="0.869179444444445">
P&apos; = (PIP) u OP
where OP P&apos; and IP 5 P.
\ is set complement. Equivalently P = (P&apos; \OP)
- 59 -
u IP1. The use of set complement allows a general
ceteris paribus statement2. That is, properties not
mentioned in the rule are unchanged. The relationship
between the string specifications IS and OS is
mediated by a paradigm.
</bodyText>
<subsectionHeader confidence="0.96398">
2.4 Paradigms
</subsectionHeader>
<bodyText confidence="0.96985425">
A paradigm is a quadruple, &lt;Name, a:4),
[LR ... LR], [Si ... Si]&gt;, n ?. 1,which
relates string forms a and Si via the lexical rule
LRi under conditions 4) where the set of string
variables in a and Si are not disjoint. Si is a derived
string form. Any variables in Si also occur within a
(this restriction will be reformulated shortly). Name
is the (unique) name of the paradigm. a:4) is the
lexical specification of the paradigm. (Alternatively,
it is the underspecified word whose behaviour the
paradigm describes). The interpretation of a paradigm
is given in (4).
</bodyText>
<listItem confidence="0.680701636363636">
(4) If a paradigm &lt;Name, a:4), LR, S&gt; is
applicable, lexical items S:P and S:P&apos; are
related by lexical rule &lt; L R L IS:IP,
OS:OP&gt;, with P, P&apos;, as in (3).
For a paradigm it &lt;Name, a:4), LR, S&gt; to
be applicable to a lexical item S:P, two conditions
must hold:
(5) a. a S and 4) 5 P.
b. There is no paradigm 7c&apos; &lt;Name&apos;, a&apos;:4)
LR&apos;, S&apos;&gt; such that a c_ a&apos;, 4) 5 40, a&apos; P_
S and to &apos; 5 P.
</listItem>
<bodyText confidence="0.995035724137931">
(5a) requires that the lexical specification of the
paradigm subsume the lexical item. (5b) requires that
there be no paradigm whose lexical specification is
more specific than that of it which is also applicable
to the lexical item. The effect of (5b) is to enforce a
generalized Elsewhere Condition (Kiparsky 1973),
under which a morphological operation is only
allowed if there is no more specific statement which
also holds. This also captures the notion of nested
&apos;In fact, for this relationship to hold, we have to
add the following restrictions over the properties
mentioned in the rule and lexical item: P ri OP 5
IP and symmetrically P&apos; r IP 5 OP. We thank
Marc Moens for this observation.
2Related proposals are made by Flickinger (1987,
ch. 5).
generalizations or stratification (Flickinger et al 1985
Gazdar and Evans 1988). Given a lexicon containing :
finite number of lexical entries, paradigms and lexica
rules, the set of lexical items is defined as the closur4
of the lexicon under the application of lexical rule:
mediated by the paradigms. Nothing in the bash
formalism we propose constrains this closure to IN
finite or requires that the set of lexical items contah
the set of lexical entries. Note that the restrictions wo
have imposed on lexical entries and variables ii
derived strings imply that, in the lexical items tha
result from the application of paradigms, there will lx
no string variables.
</bodyText>
<sectionHeader confidence="0.978903" genericHeader="method">
3 Abbreviatory conventions
</sectionHeader>
<bodyText confidence="0.994424857142857">
We introduce three abbreviatory conventions, tin
first two trivial, the third less so. First, as lexica
rules always make reference to input and output strini
forms and these forms can be determined by referenci
to the paradigm that relates them, we do not need n
state string forms in lexical rules. This leads to di&apos;
concrete syntax (IP, OP as before):
</bodyText>
<listItem confidence="0.64475">
(6) lexical_rule(Name, IP OP)
</listItem>
<bodyText confidence="0.996607727272727">
The second convention allows us to state mor
complex constraints on string forms. In a paradign
&lt;7c, a:4),...&gt;, we allow arbitrary equations ove
string forms to be included in 4), including negativ
and disjunctive constraints3, and a syntax fo
allowing the expression of character classe
(effectively these are just a special case of disjunctiv
constraint). This allows statements of the followin
kind, where + represents string concatenation, ;
represents an inequality between strings and PROLCX
conventions for marking variables are followed.
</bodyText>
<listItem confidence="0.977296625">
(7) Stem+Affix = Word,
Stem = Prefix+C+V,
V e vowels, C E consonants, V y, Affix = d
(7) might be taken to describe the behaviour
vowel-final verbs under affixation of the past tens
morpheme. Note that statements which do nc
constrain the value of a do not take part in th
calculation of subsumption relations over paradigm:
</listItem>
<footnote confidence="0.826436">
3We make the restriction that any suc
constraints do not contain variables.
</footnote>
<page confidence="0.997064">
60
</page>
<bodyText confidence="0.99782784375">
We also have to revise our restrictions on the
occurrences of variables in derived string forms given
in 2.4. Any variable in a derived string form Si
must either occur in the string specification a of the
paradigm or must be equated, directly or indirectly, to
some form consisting of variables drawn solely from
a and ground forms.
The third convention is considerably more
complex and effects a rapprochement between our
scheme and those of default logics for lexical
description (Gazdar and Evans 1988, Flickinger 1987)
and object-oriented morphophonemics (Daelemans
1988). Given a paradigm &lt;7c, a:4), LR, S&gt;, if
there is only one directly subsuming paradigm &lt;re &apos;,
a&apos;:0&apos;, LW, S&apos;&gt;, and for some i, LRi = LR&apos; i and
a u a&apos; --&gt; Si = S&apos;i (i.e. we would get the same
result if we used either IC or 70), we are allowed to
omit the references to LR i and Si in it. In other
words, we allow the inheritance of a siring form and
associated lexical rule from the more general
paradigm. In the case of n directly subsuming
paradigms, the same convention applies if a u al
... u an —3 Si = S&apos;i,ji ... = S&apos;. That is,
multiple inheritance must be consistent. In the case
where this condition doesn&apos;t hold, we allow the
equivalence of inheritance by delegation (Daelemans
op. cit.), so enforcing orthogonality of inheritance
(Touretzky 1986); corresponding to some LR, we
allow Si to be of the form paradigm(it&amp;quot;), where
Ir&amp;quot; is the name of a paradigm, such that it&amp;quot; g. it,
with the interpretation that the paradigm it&amp;quot; relates a
and Si via LRi.
</bodyText>
<sectionHeader confidence="0.869023" genericHeader="method">
4 Example paradigms and lexical rules
</sectionHeader>
<bodyText confidence="0.998584">
We are now in a position to give some example
paradigms. These have the concrete syntax:
</bodyText>
<listItem confidence="0.61066">
(8) table(Name, String:Properties, LR, S)
</listItem>
<bodyText confidence="0.99540525">
where Properties may also include string
equations and LR and S are lists of names of lexical
rules and of string forms respectively, subject to the
conventions described above.
In Table 1 below, (9) is the most general
paradigm for English verbs. (10), (11), and (12) are
instances of that paradigm under (5b) above. (12) is
also an instance of (11).
</bodyText>
<table confidence="0.841781666666667">
(8) table(verb_strong, S+in+C:[verb, base,strong, Past=S+un+C, C= (g,k)],
[past_participle past passive] ,
[Past S+an+C Past] )
(9) table(verb_bring, bring: [verb, base,strong, Past = brought],
[past_participle past passive] ,
[Past Past Past] )
</table>
<tableCaption confidence="0.991938">
Table 1: Example paradigms
</tableCaption>
<figure confidence="0.948886222222222">
(9) table(verb, Verb: [verb, base, Past = Verb+ed],
[base 3sg non3sg past_participle past passive
[Verb Verb+s Verb Past Past Past
(10) table(verb_age, age: [verb, base],
[progressive]
[ageing] )
progressive]
Verb+ing] )
- 61 -
</figure>
<bodyText confidence="0.88043325">
The abbreviatory mechanisms allow us roughly
the same amount of compaction for these descriptions
as found in Daelemans&apos; (1988) approach. Lexical rules
that might be associated with such paradigms are:
(13) lexical_rule(3sg,
[verb, base] [verb, finite, 3sg])
lexical_rule(non3sg,
[verb, base] —&gt; [verb, finite, non3sg])
</bodyText>
<sectionHeader confidence="0.426221" genericHeader="method">
5 Criticisms of the framework
</sectionHeader>
<bodyText confidence="0.991152193181818">
There is one major criticism of our approach
from a linguistic point of view, namely that in cases
such as &amp;quot;ageing&amp;quot;, there is no reason why the form of
the participle ending &amp;quot;ing&amp;quot; should be the same in all
verbal paradigms. Likewise we cannot make the
generalizations that passive and past participle forms
are identical in every verbal paradigm and that the
orthographic behaviour of the verbal singular affix
and nominal plural affix is identical. Defining
subsumption on the basis of lexical specifications of
paradigms alone leads to a very simple statement of
the conditions of inheritance of derived string forms,
but disallows the possibility of inheritance of partial
derived string forms. The restriction of inheritance by
delegation or stipulation to subsuming paradigms,
while natural, is not motivated by more general
considerations.
This problem becomes much more obvious and
acute in analysing non-concatenative morphology, as
in Semitic (McCarthy 1981). It is not the
intercalation of the consonantal roots and vocalic
melodies which leads to difficulties, as this is easily
described in our framework. Rather, the problem lies
in having to choose which of the root and melody
should be expressed as the word with which a
paradigm is associated. On the one hand, traditional
grammar would suggest that the consonantal root has
some claim to this status. However, there are clearly
relationships between the vocalic melodies which
indicate syntactic regularities on the basis of Ablaut
(McCarthy 1981, p403), and these regularities cannot
be captured if we choose the consonantal root as the
paradigmatic word and disallow inheritance of partial
derived string forms. In any case, such regularities
should presumably be stated independently of any
roots with which they happen to combine.
The above criticism provides an interesting
illumination of Matthews&apos; (1974, p163) claim that
different styles of morphological analysis are required
by different language types, word and paradigm
morphology being particularly suited to inflecting
rather than isolating and agglutinating languages.
Current work is investigating how we may alter some
of the assumptions in the definitions in section 2, to
allow for some degree of parametricity in the
languages that such systems may describe.
A second criticism is both computational and
linguistic. String unification is a very powerful
operation and, while it is arguable that strings in our
sense and orthographic constructs are indeed the same
kind of object, one may justifiably have reservations
about introducing string equations into linguistic
description. The resolution of this point awaits
further work on the formal properties of finitary
theories. We return to this point in our discussion of
phonological theory below. The computational
aspects of this problem will have less force if we can
show that there is a reduction from descriptions
involving string unification to some less powerful
mechanism such as finite state transduction. This
point is also discussed further below.
6 Comparison with other frameworks
That our approach is more general than standard
FSM is clear from the fact that string variables can
represent an unbounded amount of orthographic
material. In this way, we can, for example, model
unbounded reduplication. The problematic cases of
Finnish ambifixation described by Karttunen (1983
p181, citing Koskenniemi) are handled
straightforwardly, although this raises immediate
questions about the formalism&apos;s interpretation in
terms of finite-state transduction, discussed shortly.
Gorz and Paulus&apos;s (1988) algorithm for the location
of stem vowels in German which undergo Ablaut can
reconstructed declaratively. Our approach also solves
the problem noted by Bear (1988) of the
overgenerality of rules in an FSM system. He
introduces the mechanism of a negative rule feature to
prevent the application of an epenthesis rule which
would otherwise insert an &amp;quot;e&amp;quot; before the suffix &amp;quot;s&amp;quot; in
- 62 -
the case of words such as &amp;quot;banjo&amp;quot; and &amp;quot;tango&amp;quot;. The
need for negative rule features and their
quasiprocedural implications are avoided in the system
we propose. The following paradigm correctly states
the facts and will apply only in the case of those
items that violate the subgeneralization concerning
nominal plurals in &amp;quot;o&amp;quot;.
</bodyText>
<equation confidence="0.976726">
(14) table(piano,
S:[noun, singular,
S (piano, piccolo, ...)],
[singular, plural]
[S, S+s])
</equation>
<bodyText confidence="0.98653456">
Free variation, such as that between &amp;quot;o&amp;quot; and &amp;quot;oe&amp;quot;
forms in words like &amp;quot;cargo&amp;quot;, is treated analogously by
allowing the derived string specification to be
S+{e, 0}+s in this case (where 0 represents the
empty string), although this obviously fails to
capture the fact that the altemants are precisely those
found in the most closely related paradigms. Finally,
having the level of properties over which to state
generalizations means that our lexical representations
of strings are not cluttered with non-realizable
diacritic characters whose function is simply to
trigger morphological processes (cf Bear 1988).
The main advance we would claim for our
system is that we have provided a calculus for
orthographic forms, bringing the treatment of
orthography within the same kind of logical
framework now accorded to our treatment of semantic
and syntactic objects. The fully declarative
interpretation of our system and the similarity of
statements within it to work by Daelemans (1988)
offer a way of giving a formal treatment of object-
oriented morphophonemics.
Finally, recent work by Gazdar and Evans (1988)
may offer techniques for extending the formalism to
more complex grammatical descriptions, in line with
many current views on the nature of syntactic
categories as recursively structured objects. Current
work is examining this possibility.
7 Reduction to finite-state transducers
While the declarative nature of our system means
that it is not tied to a particular computational
interpretation, the fact that the closure of the lexicon
may be infinite argues in favour of an interpretation
that does not presuppose computation of that closure,
and considerations of efficiency in favour of one in
terms of finite-state transduction (Koskenniemi
1983)4. It is immediately clear that heavy restrictions
have to be placed on systems involving string
equations in order to have any chance of a reduction to
finite-state transduction at all. One difficulty will lie
in representing paradigm subsumption induced by
non-orthographic properties. The assumption that
there is only a finite set of such properties would
make this problem easier. (We assume the
subsumption relations engendered by orthographic
properties are readily handled by the standard notion of
priority of transition in FSTs). A much graver
problem lies in eliminating non-finite-state
constructions. Example (15) below exhibits (at least)
context-freeness:
</bodyText>
<equation confidence="0.89151175">
(15) table(weak verb,
S+en:[verb, weak, root],
[..., past_participle, ...]
[..., ge+S+et, ...])
</equation>
<bodyText confidence="0.926338702127659">
Here any string may be substituted for S. If we
allow past participle to represent the null lexical rule,
we may generate the string set (ge)nS(et)n which is
clearly homomorphic to the context-free language
anbn. Similar demonstrations can be given of
context-sensitive5 and even more powerful languages.
In order for the reduction to go through in this case,
we should have to demonstrate the finitariness of
substitutions for S. This is clearly impossible in the
general case. The kinds of restriction to be imposed
would include at least the prohibition of copying over
unbounded domains and of affixation at both margins.
Under the optimistic assumption that appropriate
restrictions can be found, we might proceed by
computing tree-structured lexicons on the basis of
lexical entries and of affixes introduced under
paradigms. Continuation classes, and possibly further
4This section and the following have benefited
greatly from discussions with Mike Reape.
5Such as the string specification WW, where W
ranges over strings from some alphabet and which
clearly shows context-sensitivity (Aho and Ullman
1972, p198). &amp;quot;
- 63 -
partitions and duplications of the lexicons, could be
computed on the basis of the properties mentioned in
paradigms and lexical rules. Information from the
distribution of derived forms with respect to string
specifications in paradigms could then be used to
construct the FSMs that mediate surface and lexical
tapes. Problematic cases might only be handled by
indicating an ordering over paradigms where context-
freeness is implicated, effectively indicating that those
paradigms may only apply to non-derived forms and
allowing incompleteness in the computation of the
closure of the lexicon.
The above paragraphs are mostly speculation. As
Gazdar (1985) notes, it is not certain that
morphological phenomena in natural language are
best characterized by finite-state devices. Depending
on one&apos;s view of the data cited by Culy (1985) and the
ambifixation cases mentioned above, the formal
power of our framework might be interpreted as a
virtue rather than a vice and future work should also
look at introducing (at least) context-free devices into
our computational interpretation of morphology.
Unsurprisingly, this is an area for further research.
</bodyText>
<sectionHeader confidence="0.995932" genericHeader="conclusions">
8 Implementation
</sectionHeader>
<bodyText confidence="0.9999879">
All aspects of the system described above have
been implemented, primarily by Mike Reape. The
implementation of lexical rules differs somewhat
from the presentation given here, in that we allow the
association of a PATR-II style lexical rules with the
lexical rules we describe above and, as such, lexical
rules may perform arbitrary mappings over feature
structures. The work considerably extended published
string unification algorithms to handle identity and
arbitrary constraints over string forms. The system is
a subcomponent of a polytheoretic lexicon system
(Calder and te Linden 1987, cf. also Zaenen 1988) and
is currently being used to generate English lexical
entries for use with Unification Categorial Grammar
(Zeevat et al 1986, Calder et al 1986). The system
generates lexical entries off-line; the lexicons used to
date have provably finite closures under the
application of lexical rules. Current work is focused
on the computational interpretation of paradigms and
on descriptive work in languages other than English.
</bodyText>
<sectionHeader confidence="0.991619" genericHeader="acknowledgments">
ACKNOWLEDGEMENTS
</sectionHeader>
<bodyText confidence="0.999592125">
This work is supported by ESPRIT project
P393: ACORD &amp;quot;The Construction and Interrogation
of Knowledge Bases using Natural Language Text and
Graphics&amp;quot;. Thanks are due in particular to Mike
Reape and also to Ewan Klein, Claire Gardent, Enricc
te Linden, Marc Moens, Antonio Sanfilippo and
Henk Zeevat for discussions and criticism of previow
proposals. All errors are of course my own.
</bodyText>
<sectionHeader confidence="0.998661" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.933093558139535">
Aho, A. V. and Ullman, J. D. (1972).The theory o.)
Parsing, Translation, and Compiling
Volume 1: Parsing Englewood Cliffs
Prentice-Hall.
Anderson, S. R. (1982) &amp;quot;Where&apos;s Morphology&apos;
Linguistic Inquiry 13.4 pp571-612
Bear, J. (1988) &amp;quot;Morphology and two-level rules anc
negative rule features&amp;quot;. In Proceedings of the
12th International Conference or
Computational Linguistics and the 240
Annual Meeting of the Association foJ
Computational Linguistics, Budapest
Hungary, 22-27 August, 1988, pp28-31
Calder, J. and te Lindert, E. (1987) &amp;quot;Thi
Protolexicon: Towards a High-Leve
Language for Lexical Description&amp;quot;. In Klein
E. and Benthem, J. (eds.) Categories
Polymorphism and Unification, pp355-370
Edinburgh and Amsterdam: Centre fo
Cognitive Science, University of Edinburg]
and Institute for Language, Logic am
Information, University of Amsterdam.
Calder, J., Moens, M. and Zeevat, H. (1986) A UC(
Interpreter. ESPRIT PROJECT 3 9 :
ACORD; Deliverable T2.6, Centre fo
Cognitive Science, University of Edinburgh
Culy, C. (1985) &amp;quot;The complexity of the vocabular
of Bambara&amp;quot; Linguistics and Philosophy 8
pp345-351.
Daelemans, W. (1988) A Model of Dutcl
Morphophonology and its Applications. A
Memo No. 88-8, Artificial In telligenc,
Laboratory, Brussels, May, 1988.
Flickinger, D., Pollard, C. and Wasow, T. (1985
Structure-Sharing in Lexical Representation
In Proceedings of the 23rd Annual Meetin,
of the Association for Computationa
Linguistics, University of Chicago
Chicago, Illinois, July, 1985, pp262-267.
Flickinger, D. (1987) Lexical Rules in th
Hierarchical Lexicon, PhD Thesis, Stanfor
University.
Gazdar, G. J. M. (1985) &amp;quot;Finite State Morphology
</reference>
<page confidence="0.997274">
64
</page>
<reference confidence="0.988848302325581">
Linguistics 23.4. pp597-607
Gazdar, G. J. M. and Evans, R. (1989) &amp;quot;Inference in
DATR&amp;quot; in Proceedings of the Fourth
Conference of the European Chapter of. the
Association For Computational Linguistics,
UMIST, April 1989, Morristown, NJ: ACL.
GOrz, G. and Paulus, D.(1988) &amp;quot;A finite state
approach to German verb morphology&amp;quot; In
Proceedings of the 12th International
Conference on Computational Linguistics
and the 24th Annual Meeting of the
Association for Computational Linguistics,
Budapest, Hungary, 22-27 August, 1988,
pp212-215
Hockett, C. F. (1954) Two Models of Grammatical
Description. Word, 10, pp210-311. Also in
Joos, M. (ed.), Readings in Linguistics I,
University of Chicago Press, 1957, pp386-
399.
Hoeksma, J. and Janda, R.D. (1988) Implications of
Process-Morphology for Categorial
Grammar, in R. Oehrle, E. Bach and D.
Wheeler (eds.) Categorial Grammars and
Natural Language Structures, 199-247
Studies in Linguistics and Philosophy, D.
Reidel, Dordrecht.
Karttunen, L. (1983) &amp;quot;KIMMO: A general
morphological processor&amp;quot;. Texas Linguistic
Forum, 22, 165-186.
Karttunen, L. and Wittenburg, K. (1983), &amp;quot;A two-
level morphological analysis of English&amp;quot;,
Texas Linguistic Forum, 22, 217-228
Kiparsky, P. (1973) &amp;quot;Elsewhere&amp;quot; in Phonology&amp;quot;. In
Anderson, S. R. and Kiparsky, P. (eds.) A
Festschrift for Morris Halle. Holt, Rinehart
and Winston
Koskenniemi, K. (1983) &amp;quot;Two-level morphology: A
general computational model for word-form
recognition and production&amp;quot;. Publication 11,
Department of General Linguistics,
University of Helsinki, Helsinki, 1983.
McCarthy, J. (1981) &amp;quot;A Prosodic Theory of
Nonconcatenative Morphology&amp;quot; Linguistic
Inquiry 12 373-418.
Matthews, P. H. (1974) Morphology, Cambridge,
Cambridge University Press.
Pereira, F. C. N. (1987) &amp;quot;Grammars and Logics of
Partial Information&amp;quot; Proceedings of the
International Conference on Logic
Programming, Melbourne, Australia
Plotkin, G. D. (1972) &amp;quot;Building-in Equational
Theories&amp;quot; in D Michie and B Meltzer (eds.)
Machine Intelligence 7, Edinburgh
University Press.
Shieber, S., Uszkoreit, H., Pereira, F.C.N.,
Robinson, JJ., and Tyson, M. (1983) &amp;quot;The
Formalism and Implementation of PATR-II&amp;quot;
in B. Grosz and M. Stickel (eds.) Research
on Interactive Acquisition and Use of
Knowledge SRI International, Menlo Park
pp39-79.
Siekmann, J. H. (1975) String-unification, part 1.
Essex University ms.
Siekmann, J. H. (1984) Universal Unification. In
Shostak, R. H. (ed.) Proceedings of the
Seventh International Conference on
Automated Deduction, Napa, California,
May, 1984, pp1-42. Lecture Notes in
Computer Science, Springer-Verlag.
de Smedt, K. (1984) &amp;quot;Using Object-Oriented
Knowledge-Representation Techniques in
Morphology and Syntax Programming&amp;quot;, in
O&apos;Shea, T. (ed.) ECAI &apos;84: Advances in
Artificial Intelligence. North Holland.
Touretzky, D. (1986) The Mathematics of Inheritance
Systems , Morgan Kaufmann, Los Altos
Zaenen, A. (1988) Lexical Information in LFG — an
overview. Unpublished ms.
Zeevat, H., Klein, E., and Calder, J. (1 9 8 7)
&amp;quot;Introduction to Unification Categorial
Grammar&amp;quot; in Haddock, NJ., Klein, E. and
Morrill, G. (eds.)Categorial Grammar,
Unification Grammar, and Parsing,
Edinburgh Working Papers in Cognitive
Science 1, pp195-222
- 65 -
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.283460">
<title confidence="0.998901">PARADIGMATIC MORPHOLOGY</title>
<author confidence="0.999998">Jonathan Calder</author>
<affiliation confidence="0.919078">University of Edinburgh Centre for Cognitive Science 2 Buccleuch Place Edinburgh</affiliation>
<address confidence="0.852163">Scotland</address>
<email confidence="0.492828">EH89LW</email>
<abstract confidence="0.998827052631579">We present a notation for the declarative statement of morphological relationships and lexical based on the traditional notion of and Hockett 1954). The phenomenon of blocking arises from a generalized version of (1973) Condition, in terms of ordering by subsumption over paradigms. Orthographic constraints on morphemic alternation described by means of equations 1975). We indicate some criticisms to be made of our approach from both linguistic and computational perspectives and relate our approach to others such as Finite-State Morphology (Koskenniemi 1983), DATR (Gazdar and Evans 1989) and object-oriented morphophonemics (de Smedt 1984, Daelemans 1988). Finally, we discuss the questions of whether a system involving string equations allows a reduction to finite-state techniques.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>A V Aho</author>
<author>J D Ullman</author>
</authors>
<title>theory o.) Parsing, Translation, and Compiling Volume 1: Parsing Englewood Cliffs Prentice-Hall.</title>
<date>1972</date>
<contexts>
<context position="21904" citStr="Aho and Ullman 1972" startWordPosition="3483" endWordPosition="3486">striction to be imposed would include at least the prohibition of copying over unbounded domains and of affixation at both margins. Under the optimistic assumption that appropriate restrictions can be found, we might proceed by computing tree-structured lexicons on the basis of lexical entries and of affixes introduced under paradigms. Continuation classes, and possibly further 4This section and the following have benefited greatly from discussions with Mike Reape. 5Such as the string specification WW, where W ranges over strings from some alphabet and which clearly shows context-sensitivity (Aho and Ullman 1972, p198). &amp;quot; - 63 - partitions and duplications of the lexicons, could be computed on the basis of the properties mentioned in paradigms and lexical rules. Information from the distribution of derived forms with respect to string specifications in paradigms could then be used to construct the FSMs that mediate surface and lexical tapes. Problematic cases might only be handled by indicating an ordering over paradigms where contextfreeness is implicated, effectively indicating that those paradigms may only apply to non-derived forms and allowing incompleteness in the computation of the closure of </context>
</contexts>
<marker>Aho, Ullman, 1972</marker>
<rawString>Aho, A. V. and Ullman, J. D. (1972).The theory o.) Parsing, Translation, and Compiling Volume 1: Parsing Englewood Cliffs Prentice-Hall.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S R Anderson</author>
</authors>
<title>Where&apos;s Morphology&apos;</title>
<date>1982</date>
<journal>Linguistic Inquiry</journal>
<volume>13</volume>
<pages>571--612</pages>
<contexts>
<context position="1906" citStr="Anderson 1982" startWordPosition="268" endWordPosition="269">e morphology (Koskenniemi 1983) has arguably tended to support the view that morphological alternation is best described by stating procedures for the destructive alteration of orthographic units. At the very least, it appears to have led to the view that morphological descriptions should be restricted to those with an immediate interpretation in terms of the operations of finite-state transducers. In this paper, we present a notation for the declarative statement of morphological relationships and lexical rules, based on the traditional notion of Word and Paradigm (WP, Hockett 1954, see alsc Anderson 1982). The phenomenon of blocking arises from a generalized version of Kiparsky&apos;s (1973) Elsewhere Condition, stated in terms of ordering by subsumption over paradigms. Orthographic constraints on morphemic alternation are described by means of string equations (Siekmann 1975). We will first give a brief introduction to string equations and the other formal devices used in ow model, namely lexical entries and rules, grammatical properties and paradigms. We give example paradigms and show how our interpretation of paradigms leads to the phenomenon of blocking. We will then indicate some criticisms t</context>
</contexts>
<marker>Anderson, 1982</marker>
<rawString>Anderson, S. R. (1982) &amp;quot;Where&apos;s Morphology&apos; Linguistic Inquiry 13.4 pp571-612</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Bear</author>
</authors>
<title>Morphology and two-level rules anc negative rule features&amp;quot;.</title>
<date>1988</date>
<booktitle>In Proceedings of the 12th International Conference or Computational Linguistics and the 240 Annual Meeting of the Association foJ Computational Linguistics,</booktitle>
<pages>28--31</pages>
<location>Budapest</location>
<contexts>
<context position="17624" citStr="Bear (1988)" startWordPosition="2831" endWordPosition="2832">he fact that string variables can represent an unbounded amount of orthographic material. In this way, we can, for example, model unbounded reduplication. The problematic cases of Finnish ambifixation described by Karttunen (1983 p181, citing Koskenniemi) are handled straightforwardly, although this raises immediate questions about the formalism&apos;s interpretation in terms of finite-state transduction, discussed shortly. Gorz and Paulus&apos;s (1988) algorithm for the location of stem vowels in German which undergo Ablaut can reconstructed declaratively. Our approach also solves the problem noted by Bear (1988) of the overgenerality of rules in an FSM system. He introduces the mechanism of a negative rule feature to prevent the application of an epenthesis rule which would otherwise insert an &amp;quot;e&amp;quot; before the suffix &amp;quot;s&amp;quot; in - 62 - the case of words such as &amp;quot;banjo&amp;quot; and &amp;quot;tango&amp;quot;. The need for negative rule features and their quasiprocedural implications are avoided in the system we propose. The following paradigm correctly states the facts and will apply only in the case of those items that violate the subgeneralization concerning nominal plurals in &amp;quot;o&amp;quot;. (14) table(piano, S:[noun, singular, S (piano, picc</context>
<context position="18874" citStr="Bear 1988" startWordPosition="3028" endWordPosition="3029"> Free variation, such as that between &amp;quot;o&amp;quot; and &amp;quot;oe&amp;quot; forms in words like &amp;quot;cargo&amp;quot;, is treated analogously by allowing the derived string specification to be S+{e, 0}+s in this case (where 0 represents the empty string), although this obviously fails to capture the fact that the altemants are precisely those found in the most closely related paradigms. Finally, having the level of properties over which to state generalizations means that our lexical representations of strings are not cluttered with non-realizable diacritic characters whose function is simply to trigger morphological processes (cf Bear 1988). The main advance we would claim for our system is that we have provided a calculus for orthographic forms, bringing the treatment of orthography within the same kind of logical framework now accorded to our treatment of semantic and syntactic objects. The fully declarative interpretation of our system and the similarity of statements within it to work by Daelemans (1988) offer a way of giving a formal treatment of objectoriented morphophonemics. Finally, recent work by Gazdar and Evans (1988) may offer techniques for extending the formalism to more complex grammatical descriptions, in line w</context>
</contexts>
<marker>Bear, 1988</marker>
<rawString>Bear, J. (1988) &amp;quot;Morphology and two-level rules anc negative rule features&amp;quot;. In Proceedings of the 12th International Conference or Computational Linguistics and the 240 Annual Meeting of the Association foJ Computational Linguistics, Budapest Hungary, 22-27 August, 1988, pp28-31</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Calder</author>
<author>te Lindert</author>
<author>E</author>
</authors>
<title>Thi Protolexicon: Towards a High-Leve Language for Lexical Description&amp;quot;.</title>
<date>1987</date>
<booktitle>Categories Polymorphism and Unification, pp355-370 Edinburgh and Amsterdam: Centre fo Cognitive Science, University of Edinburg] and Institute for Language, Logic am Information,</booktitle>
<editor>In Klein E. and Benthem, J. (eds.)</editor>
<location>University of Amsterdam.</location>
<marker>Calder, Lindert, E, 1987</marker>
<rawString>Calder, J. and te Lindert, E. (1987) &amp;quot;Thi Protolexicon: Towards a High-Leve Language for Lexical Description&amp;quot;. In Klein E. and Benthem, J. (eds.) Categories Polymorphism and Unification, pp355-370 Edinburgh and Amsterdam: Centre fo Cognitive Science, University of Edinburg] and Institute for Language, Logic am Information, University of Amsterdam.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Calder</author>
<author>M Moens</author>
<author>H Zeevat</author>
</authors>
<title>A UC( Interpreter.</title>
<date>1986</date>
<journal>ESPRIT PROJECT</journal>
<booktitle>ACORD; Deliverable T2.6, Centre fo</booktitle>
<volume>3</volume>
<institution>Cognitive Science, University of Edinburgh</institution>
<contexts>
<context position="23854" citStr="Calder et al 1986" startWordPosition="3781" endWordPosition="3784">rom the presentation given here, in that we allow the association of a PATR-II style lexical rules with the lexical rules we describe above and, as such, lexical rules may perform arbitrary mappings over feature structures. The work considerably extended published string unification algorithms to handle identity and arbitrary constraints over string forms. The system is a subcomponent of a polytheoretic lexicon system (Calder and te Linden 1987, cf. also Zaenen 1988) and is currently being used to generate English lexical entries for use with Unification Categorial Grammar (Zeevat et al 1986, Calder et al 1986). The system generates lexical entries off-line; the lexicons used to date have provably finite closures under the application of lexical rules. Current work is focused on the computational interpretation of paradigms and on descriptive work in languages other than English. ACKNOWLEDGEMENTS This work is supported by ESPRIT project P393: ACORD &amp;quot;The Construction and Interrogation of Knowledge Bases using Natural Language Text and Graphics&amp;quot;. Thanks are due in particular to Mike Reape and also to Ewan Klein, Claire Gardent, Enricc te Linden, Marc Moens, Antonio Sanfilippo and Henk Zeevat for discu</context>
</contexts>
<marker>Calder, Moens, Zeevat, 1986</marker>
<rawString>Calder, J., Moens, M. and Zeevat, H. (1986) A UC( Interpreter. ESPRIT PROJECT 3 9 : ACORD; Deliverable T2.6, Centre fo Cognitive Science, University of Edinburgh</rawString>
</citation>
<citation valid="true">
<authors>
<author>C Culy</author>
</authors>
<title>The complexity of the vocabular of Bambara&amp;quot;</title>
<date>1985</date>
<journal>Linguistics and Philosophy</journal>
<volume>8</volume>
<pages>345--351</pages>
<contexts>
<context position="22757" citStr="Culy (1985)" startWordPosition="3616" endWordPosition="3617"> in paradigms could then be used to construct the FSMs that mediate surface and lexical tapes. Problematic cases might only be handled by indicating an ordering over paradigms where contextfreeness is implicated, effectively indicating that those paradigms may only apply to non-derived forms and allowing incompleteness in the computation of the closure of the lexicon. The above paragraphs are mostly speculation. As Gazdar (1985) notes, it is not certain that morphological phenomena in natural language are best characterized by finite-state devices. Depending on one&apos;s view of the data cited by Culy (1985) and the ambifixation cases mentioned above, the formal power of our framework might be interpreted as a virtue rather than a vice and future work should also look at introducing (at least) context-free devices into our computational interpretation of morphology. Unsurprisingly, this is an area for further research. 8 Implementation All aspects of the system described above have been implemented, primarily by Mike Reape. The implementation of lexical rules differs somewhat from the presentation given here, in that we allow the association of a PATR-II style lexical rules with the lexical rules</context>
</contexts>
<marker>Culy, 1985</marker>
<rawString>Culy, C. (1985) &amp;quot;The complexity of the vocabular of Bambara&amp;quot; Linguistics and Philosophy 8 pp345-351.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W Daelemans</author>
</authors>
<title>A Model of Dutcl Morphophonology and its Applications. A Memo</title>
<date>1988</date>
<booktitle>No. 88-8, Artificial In telligenc, Laboratory,</booktitle>
<location>Brussels,</location>
<contexts>
<context position="882" citStr="Daelemans 1988" startWordPosition="121" endWordPosition="122">tional notion of Word and Paradigm (cf Hockett 1954). The phenomenon of blocking arises from a generalized version of Kiparsky&apos;s (1973) Elsewhere Condition, stated in terms of ordering by subsumption over paradigms. Orthographic constraints on morphemic alternation are described by means of string equations (Siekmann 1975). We indicate some criticisms to be made of our approach from both linguistic and computational perspectives and relate our approach to others such as Finite-State Morphology (Koskenniemi 1983), DATR (Gazdar and Evans 1989) and object-oriented morphophonemics (de Smedt 1984, Daelemans 1988). Finally, we discuss the questions of whether a system involving string equations allows a reduction to finite-state techniques. 1 Introduction A common assumption in linguistics is that the phonological, morphological and orthographic statements are most appropriately phrased in a fundamentally procedural way, (see for example Hoeksma and Janda 1988). Morphological analysis under the rubric of finite-state morphology (Koskenniemi 1983) has arguably tended to support the view that morphological alternation is best described by stating procedures for the destructive alteration of orthographic </context>
<context position="2796" citStr="Daelemans 1988" startWordPosition="397" endWordPosition="398">e will first give a brief introduction to string equations and the other formal devices used in ow model, namely lexical entries and rules, grammatical properties and paradigms. We give example paradigms and show how our interpretation of paradigms leads to the phenomenon of blocking. We will then indicate some criticisms to be made of ou; approach from both linguistic and computational perspectives. We discuss relations between ow proposals and the approaches of Finite-State Morphology (FSM, Koskenniemi 1983), DAT f; (Gazdar and Evans 1989) and object-orientec morphophonemics (de Smedt 1985, Daelemans 1988). One important question in the light of curreni work in morphology is whether a system involving string equations allows a reduction to finite-state techniques. We review some possible answers to this question. 2 Components of the Model 2.1 String Equations and Strini Unification This introduction is based on Siekmann (1975) A string a is a sequence of elements drawn from ; finite alphabet C combined by the associative operator +, representing the concatenation of strings - 58 - A string specification or string form is a sequence possibly containing variables drawn from the set of variables V</context>
<context position="11532" citStr="Daelemans 1988" startWordPosition="1874" endWordPosition="1875">nstraints do not contain variables. 60 We also have to revise our restrictions on the occurrences of variables in derived string forms given in 2.4. Any variable in a derived string form Si must either occur in the string specification a of the paradigm or must be equated, directly or indirectly, to some form consisting of variables drawn solely from a and ground forms. The third convention is considerably more complex and effects a rapprochement between our scheme and those of default logics for lexical description (Gazdar and Evans 1988, Flickinger 1987) and object-oriented morphophonemics (Daelemans 1988). Given a paradigm &lt;7c, a:4), LR, S&gt;, if there is only one directly subsuming paradigm &lt;re &apos;, a&apos;:0&apos;, LW, S&apos;&gt;, and for some i, LRi = LR&apos; i and a u a&apos; --&gt; Si = S&apos;i (i.e. we would get the same result if we used either IC or 70), we are allowed to omit the references to LR i and Si in it. In other words, we allow the inheritance of a siring form and associated lexical rule from the more general paradigm. In the case of n directly subsuming paradigms, the same convention applies if a u al ... u an —3 Si = S&apos;i,ji ... = S&apos;. That is, multiple inheritance must be consistent. In the case where this cond</context>
<context position="19249" citStr="Daelemans (1988)" startWordPosition="3088" endWordPosition="3089">e level of properties over which to state generalizations means that our lexical representations of strings are not cluttered with non-realizable diacritic characters whose function is simply to trigger morphological processes (cf Bear 1988). The main advance we would claim for our system is that we have provided a calculus for orthographic forms, bringing the treatment of orthography within the same kind of logical framework now accorded to our treatment of semantic and syntactic objects. The fully declarative interpretation of our system and the similarity of statements within it to work by Daelemans (1988) offer a way of giving a formal treatment of objectoriented morphophonemics. Finally, recent work by Gazdar and Evans (1988) may offer techniques for extending the formalism to more complex grammatical descriptions, in line with many current views on the nature of syntactic categories as recursively structured objects. Current work is examining this possibility. 7 Reduction to finite-state transducers While the declarative nature of our system means that it is not tied to a particular computational interpretation, the fact that the closure of the lexicon may be infinite argues in favour of an </context>
</contexts>
<marker>Daelemans, 1988</marker>
<rawString>Daelemans, W. (1988) A Model of Dutcl Morphophonology and its Applications. A Memo No. 88-8, Artificial In telligenc, Laboratory, Brussels, May, 1988.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Flickinger</author>
<author>C Pollard</author>
<author>T Wasow</author>
</authors>
<title>Structure-Sharing in Lexical Representation</title>
<date>1985</date>
<booktitle>In Proceedings of the 23rd Annual Meetin, of the Association</booktitle>
<pages>262--267</pages>
<institution>for Computationa Linguistics, University of Chicago Chicago,</institution>
<location>Illinois,</location>
<contexts>
<context position="8982" citStr="Flickinger et al 1985" startWordPosition="1459" endWordPosition="1462">ch is also applicable to the lexical item. The effect of (5b) is to enforce a generalized Elsewhere Condition (Kiparsky 1973), under which a morphological operation is only allowed if there is no more specific statement which also holds. This also captures the notion of nested &apos;In fact, for this relationship to hold, we have to add the following restrictions over the properties mentioned in the rule and lexical item: P ri OP 5 IP and symmetrically P&apos; r IP 5 OP. We thank Marc Moens for this observation. 2Related proposals are made by Flickinger (1987, ch. 5). generalizations or stratification (Flickinger et al 1985 Gazdar and Evans 1988). Given a lexicon containing : finite number of lexical entries, paradigms and lexica rules, the set of lexical items is defined as the closur4 of the lexicon under the application of lexical rule: mediated by the paradigms. Nothing in the bash formalism we propose constrains this closure to IN finite or requires that the set of lexical items contah the set of lexical entries. Note that the restrictions wo have imposed on lexical entries and variables ii derived strings imply that, in the lexical items tha result from the application of paradigms, there will lx no string</context>
</contexts>
<marker>Flickinger, Pollard, Wasow, 1985</marker>
<rawString>Flickinger, D., Pollard, C. and Wasow, T. (1985 Structure-Sharing in Lexical Representation In Proceedings of the 23rd Annual Meetin, of the Association for Computationa Linguistics, University of Chicago Chicago, Illinois, July, 1985, pp262-267.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Flickinger</author>
</authors>
<title>Lexical Rules in th Hierarchical Lexicon,</title>
<date>1987</date>
<tech>PhD Thesis,</tech>
<institution>Stanfor University.</institution>
<contexts>
<context position="8916" citStr="Flickinger (1987" startWordPosition="1452" endWordPosition="1453">se lexical specification is more specific than that of it which is also applicable to the lexical item. The effect of (5b) is to enforce a generalized Elsewhere Condition (Kiparsky 1973), under which a morphological operation is only allowed if there is no more specific statement which also holds. This also captures the notion of nested &apos;In fact, for this relationship to hold, we have to add the following restrictions over the properties mentioned in the rule and lexical item: P ri OP 5 IP and symmetrically P&apos; r IP 5 OP. We thank Marc Moens for this observation. 2Related proposals are made by Flickinger (1987, ch. 5). generalizations or stratification (Flickinger et al 1985 Gazdar and Evans 1988). Given a lexicon containing : finite number of lexical entries, paradigms and lexica rules, the set of lexical items is defined as the closur4 of the lexicon under the application of lexical rule: mediated by the paradigms. Nothing in the bash formalism we propose constrains this closure to IN finite or requires that the set of lexical items contah the set of lexical entries. Note that the restrictions wo have imposed on lexical entries and variables ii derived strings imply that, in the lexical items tha</context>
<context position="11479" citStr="Flickinger 1987" startWordPosition="1869" endWordPosition="1870">ver paradigm: 3We make the restriction that any suc constraints do not contain variables. 60 We also have to revise our restrictions on the occurrences of variables in derived string forms given in 2.4. Any variable in a derived string form Si must either occur in the string specification a of the paradigm or must be equated, directly or indirectly, to some form consisting of variables drawn solely from a and ground forms. The third convention is considerably more complex and effects a rapprochement between our scheme and those of default logics for lexical description (Gazdar and Evans 1988, Flickinger 1987) and object-oriented morphophonemics (Daelemans 1988). Given a paradigm &lt;7c, a:4), LR, S&gt;, if there is only one directly subsuming paradigm &lt;re &apos;, a&apos;:0&apos;, LW, S&apos;&gt;, and for some i, LRi = LR&apos; i and a u a&apos; --&gt; Si = S&apos;i (i.e. we would get the same result if we used either IC or 70), we are allowed to omit the references to LR i and Si in it. In other words, we allow the inheritance of a siring form and associated lexical rule from the more general paradigm. In the case of n directly subsuming paradigms, the same convention applies if a u al ... u an —3 Si = S&apos;i,ji ... = S&apos;. That is, multiple inheri</context>
</contexts>
<marker>Flickinger, 1987</marker>
<rawString>Flickinger, D. (1987) Lexical Rules in th Hierarchical Lexicon, PhD Thesis, Stanfor University.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G J M Gazdar</author>
</authors>
<title>Finite State Morphology Linguistics</title>
<date>1985</date>
<volume>23</volume>
<pages>597--607</pages>
<contexts>
<context position="22578" citStr="Gazdar (1985)" startWordPosition="3588" endWordPosition="3589">, could be computed on the basis of the properties mentioned in paradigms and lexical rules. Information from the distribution of derived forms with respect to string specifications in paradigms could then be used to construct the FSMs that mediate surface and lexical tapes. Problematic cases might only be handled by indicating an ordering over paradigms where contextfreeness is implicated, effectively indicating that those paradigms may only apply to non-derived forms and allowing incompleteness in the computation of the closure of the lexicon. The above paragraphs are mostly speculation. As Gazdar (1985) notes, it is not certain that morphological phenomena in natural language are best characterized by finite-state devices. Depending on one&apos;s view of the data cited by Culy (1985) and the ambifixation cases mentioned above, the formal power of our framework might be interpreted as a virtue rather than a vice and future work should also look at introducing (at least) context-free devices into our computational interpretation of morphology. Unsurprisingly, this is an area for further research. 8 Implementation All aspects of the system described above have been implemented, primarily by Mike Rea</context>
</contexts>
<marker>Gazdar, 1985</marker>
<rawString>Gazdar, G. J. M. (1985) &amp;quot;Finite State Morphology Linguistics 23.4. pp597-607</rawString>
</citation>
<citation valid="true">
<authors>
<author>G J M Gazdar</author>
<author>R Evans</author>
</authors>
<title>Inference in DATR&amp;quot;</title>
<date>1989</date>
<booktitle>in Proceedings of the Fourth Conference of the European Chapter of. the Association For Computational Linguistics, UMIST,</booktitle>
<publisher>ACL.</publisher>
<location>Morristown, NJ:</location>
<contexts>
<context position="814" citStr="Gazdar and Evans 1989" startWordPosition="111" endWordPosition="114">tement of morphological relationships and lexical rules, based on the traditional notion of Word and Paradigm (cf Hockett 1954). The phenomenon of blocking arises from a generalized version of Kiparsky&apos;s (1973) Elsewhere Condition, stated in terms of ordering by subsumption over paradigms. Orthographic constraints on morphemic alternation are described by means of string equations (Siekmann 1975). We indicate some criticisms to be made of our approach from both linguistic and computational perspectives and relate our approach to others such as Finite-State Morphology (Koskenniemi 1983), DATR (Gazdar and Evans 1989) and object-oriented morphophonemics (de Smedt 1984, Daelemans 1988). Finally, we discuss the questions of whether a system involving string equations allows a reduction to finite-state techniques. 1 Introduction A common assumption in linguistics is that the phonological, morphological and orthographic statements are most appropriately phrased in a fundamentally procedural way, (see for example Hoeksma and Janda 1988). Morphological analysis under the rubric of finite-state morphology (Koskenniemi 1983) has arguably tended to support the view that morphological alternation is best described b</context>
<context position="2728" citStr="Gazdar and Evans 1989" startWordPosition="387" endWordPosition="390">c alternation are described by means of string equations (Siekmann 1975). We will first give a brief introduction to string equations and the other formal devices used in ow model, namely lexical entries and rules, grammatical properties and paradigms. We give example paradigms and show how our interpretation of paradigms leads to the phenomenon of blocking. We will then indicate some criticisms to be made of ou; approach from both linguistic and computational perspectives. We discuss relations between ow proposals and the approaches of Finite-State Morphology (FSM, Koskenniemi 1983), DAT f; (Gazdar and Evans 1989) and object-orientec morphophonemics (de Smedt 1985, Daelemans 1988). One important question in the light of curreni work in morphology is whether a system involving string equations allows a reduction to finite-state techniques. We review some possible answers to this question. 2 Components of the Model 2.1 String Equations and Strini Unification This introduction is based on Siekmann (1975) A string a is a sequence of elements drawn from ; finite alphabet C combined by the associative operator +, representing the concatenation of strings - 58 - A string specification or string form is a sequ</context>
</contexts>
<marker>Gazdar, Evans, 1989</marker>
<rawString>Gazdar, G. J. M. and Evans, R. (1989) &amp;quot;Inference in DATR&amp;quot; in Proceedings of the Fourth Conference of the European Chapter of. the Association For Computational Linguistics, UMIST, April 1989, Morristown, NJ: ACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G GOrz</author>
<author>D Paulus</author>
</authors>
<title>A finite state approach to German verb morphology&amp;quot;</title>
<date>1988</date>
<booktitle>In Proceedings of the 12th International Conference on Computational Linguistics and the 24th Annual Meeting of the Association for Computational Linguistics,</booktitle>
<pages>212--215</pages>
<location>Budapest,</location>
<marker>GOrz, Paulus, 1988</marker>
<rawString>GOrz, G. and Paulus, D.(1988) &amp;quot;A finite state approach to German verb morphology&amp;quot; In Proceedings of the 12th International Conference on Computational Linguistics and the 24th Annual Meeting of the Association for Computational Linguistics, Budapest, Hungary, 22-27 August, 1988, pp212-215</rawString>
</citation>
<citation valid="true">
<authors>
<author>C F Hockett</author>
</authors>
<title>Two Models of Grammatical Description.</title>
<date>1954</date>
<journal>Word,</journal>
<booktitle>Readings in Linguistics I, University of</booktitle>
<volume>10</volume>
<pages>210--311</pages>
<editor>Joos, M. (ed.),</editor>
<publisher>Chicago Press,</publisher>
<note>Also in</note>
<contexts>
<context position="1881" citStr="Hockett 1954" startWordPosition="264" endWordPosition="265">e rubric of finite-state morphology (Koskenniemi 1983) has arguably tended to support the view that morphological alternation is best described by stating procedures for the destructive alteration of orthographic units. At the very least, it appears to have led to the view that morphological descriptions should be restricted to those with an immediate interpretation in terms of the operations of finite-state transducers. In this paper, we present a notation for the declarative statement of morphological relationships and lexical rules, based on the traditional notion of Word and Paradigm (WP, Hockett 1954, see alsc Anderson 1982). The phenomenon of blocking arises from a generalized version of Kiparsky&apos;s (1973) Elsewhere Condition, stated in terms of ordering by subsumption over paradigms. Orthographic constraints on morphemic alternation are described by means of string equations (Siekmann 1975). We will first give a brief introduction to string equations and the other formal devices used in ow model, namely lexical entries and rules, grammatical properties and paradigms. We give example paradigms and show how our interpretation of paradigms leads to the phenomenon of blocking. We will then i</context>
</contexts>
<marker>Hockett, 1954</marker>
<rawString>Hockett, C. F. (1954) Two Models of Grammatical Description. Word, 10, pp210-311. Also in Joos, M. (ed.), Readings in Linguistics I, University of Chicago Press, 1957, pp386-399.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Hoeksma</author>
<author>R D Janda</author>
</authors>
<title>Implications of Process-Morphology for Categorial Grammar,</title>
<date>1988</date>
<booktitle>Categorial Grammars and Natural Language Structures, 199-247 Studies in Linguistics and Philosophy,</booktitle>
<editor>in R. Oehrle, E. Bach and D. Wheeler (eds.)</editor>
<location>Dordrecht.</location>
<contexts>
<context position="1236" citStr="Hoeksma and Janda 1988" startWordPosition="168" endWordPosition="171">ticisms to be made of our approach from both linguistic and computational perspectives and relate our approach to others such as Finite-State Morphology (Koskenniemi 1983), DATR (Gazdar and Evans 1989) and object-oriented morphophonemics (de Smedt 1984, Daelemans 1988). Finally, we discuss the questions of whether a system involving string equations allows a reduction to finite-state techniques. 1 Introduction A common assumption in linguistics is that the phonological, morphological and orthographic statements are most appropriately phrased in a fundamentally procedural way, (see for example Hoeksma and Janda 1988). Morphological analysis under the rubric of finite-state morphology (Koskenniemi 1983) has arguably tended to support the view that morphological alternation is best described by stating procedures for the destructive alteration of orthographic units. At the very least, it appears to have led to the view that morphological descriptions should be restricted to those with an immediate interpretation in terms of the operations of finite-state transducers. In this paper, we present a notation for the declarative statement of morphological relationships and lexical rules, based on the traditional </context>
</contexts>
<marker>Hoeksma, Janda, 1988</marker>
<rawString>Hoeksma, J. and Janda, R.D. (1988) Implications of Process-Morphology for Categorial Grammar, in R. Oehrle, E. Bach and D. Wheeler (eds.) Categorial Grammars and Natural Language Structures, 199-247 Studies in Linguistics and Philosophy, D. Reidel, Dordrecht.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L Karttunen</author>
</authors>
<title>KIMMO: A general morphological processor&amp;quot;.</title>
<date>1983</date>
<journal>Texas Linguistic Forum,</journal>
<volume>22</volume>
<pages>165--186</pages>
<contexts>
<context position="17242" citStr="Karttunen (1983" startWordPosition="2780" endWordPosition="2781">logical theory below. The computational aspects of this problem will have less force if we can show that there is a reduction from descriptions involving string unification to some less powerful mechanism such as finite state transduction. This point is also discussed further below. 6 Comparison with other frameworks That our approach is more general than standard FSM is clear from the fact that string variables can represent an unbounded amount of orthographic material. In this way, we can, for example, model unbounded reduplication. The problematic cases of Finnish ambifixation described by Karttunen (1983 p181, citing Koskenniemi) are handled straightforwardly, although this raises immediate questions about the formalism&apos;s interpretation in terms of finite-state transduction, discussed shortly. Gorz and Paulus&apos;s (1988) algorithm for the location of stem vowels in German which undergo Ablaut can reconstructed declaratively. Our approach also solves the problem noted by Bear (1988) of the overgenerality of rules in an FSM system. He introduces the mechanism of a negative rule feature to prevent the application of an epenthesis rule which would otherwise insert an &amp;quot;e&amp;quot; before the suffix &amp;quot;s&amp;quot; in - 6</context>
</contexts>
<marker>Karttunen, 1983</marker>
<rawString>Karttunen, L. (1983) &amp;quot;KIMMO: A general morphological processor&amp;quot;. Texas Linguistic Forum, 22, 165-186.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L Karttunen</author>
<author>K Wittenburg</author>
</authors>
<title>A twolevel morphological analysis of English&amp;quot;,</title>
<date>1983</date>
<journal>Texas Linguistic Forum,</journal>
<volume>22</volume>
<pages>217--228</pages>
<marker>Karttunen, Wittenburg, 1983</marker>
<rawString>Karttunen, L. and Wittenburg, K. (1983), &amp;quot;A twolevel morphological analysis of English&amp;quot;, Texas Linguistic Forum, 22, 217-228</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Kiparsky</author>
</authors>
<title>Elsewhere&amp;quot; in Phonology&amp;quot;.</title>
<date>1973</date>
<editor>In Anderson, S. R. and Kiparsky, P. (eds.)</editor>
<publisher>and Winston</publisher>
<location>Holt, Rinehart</location>
<contexts>
<context position="8486" citStr="Kiparsky 1973" startWordPosition="1377" endWordPosition="1378">related by lexical rule &lt; L R L IS:IP, OS:OP&gt;, with P, P&apos;, as in (3). For a paradigm it &lt;Name, a:4), LR, S&gt; to be applicable to a lexical item S:P, two conditions must hold: (5) a. a S and 4) 5 P. b. There is no paradigm 7c&apos; &lt;Name&apos;, a&apos;:4) LR&apos;, S&apos;&gt; such that a c_ a&apos;, 4) 5 40, a&apos; P_ S and to &apos; 5 P. (5a) requires that the lexical specification of the paradigm subsume the lexical item. (5b) requires that there be no paradigm whose lexical specification is more specific than that of it which is also applicable to the lexical item. The effect of (5b) is to enforce a generalized Elsewhere Condition (Kiparsky 1973), under which a morphological operation is only allowed if there is no more specific statement which also holds. This also captures the notion of nested &apos;In fact, for this relationship to hold, we have to add the following restrictions over the properties mentioned in the rule and lexical item: P ri OP 5 IP and symmetrically P&apos; r IP 5 OP. We thank Marc Moens for this observation. 2Related proposals are made by Flickinger (1987, ch. 5). generalizations or stratification (Flickinger et al 1985 Gazdar and Evans 1988). Given a lexicon containing : finite number of lexical entries, paradigms and le</context>
</contexts>
<marker>Kiparsky, 1973</marker>
<rawString>Kiparsky, P. (1973) &amp;quot;Elsewhere&amp;quot; in Phonology&amp;quot;. In Anderson, S. R. and Kiparsky, P. (eds.) A Festschrift for Morris Halle. Holt, Rinehart and Winston</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Koskenniemi</author>
</authors>
<title>Two-level morphology: A general computational model for word-form recognition and production&amp;quot;.</title>
<date>1983</date>
<tech>Publication 11,</tech>
<institution>Department of General Linguistics, University of Helsinki,</institution>
<location>Helsinki,</location>
<contexts>
<context position="784" citStr="Koskenniemi 1983" startWordPosition="108" endWordPosition="109">n for the declarative statement of morphological relationships and lexical rules, based on the traditional notion of Word and Paradigm (cf Hockett 1954). The phenomenon of blocking arises from a generalized version of Kiparsky&apos;s (1973) Elsewhere Condition, stated in terms of ordering by subsumption over paradigms. Orthographic constraints on morphemic alternation are described by means of string equations (Siekmann 1975). We indicate some criticisms to be made of our approach from both linguistic and computational perspectives and relate our approach to others such as Finite-State Morphology (Koskenniemi 1983), DATR (Gazdar and Evans 1989) and object-oriented morphophonemics (de Smedt 1984, Daelemans 1988). Finally, we discuss the questions of whether a system involving string equations allows a reduction to finite-state techniques. 1 Introduction A common assumption in linguistics is that the phonological, morphological and orthographic statements are most appropriately phrased in a fundamentally procedural way, (see for example Hoeksma and Janda 1988). Morphological analysis under the rubric of finite-state morphology (Koskenniemi 1983) has arguably tended to support the view that morphological a</context>
<context position="2696" citStr="Koskenniemi 1983" startWordPosition="383" endWordPosition="384">hic constraints on morphemic alternation are described by means of string equations (Siekmann 1975). We will first give a brief introduction to string equations and the other formal devices used in ow model, namely lexical entries and rules, grammatical properties and paradigms. We give example paradigms and show how our interpretation of paradigms leads to the phenomenon of blocking. We will then indicate some criticisms to be made of ou; approach from both linguistic and computational perspectives. We discuss relations between ow proposals and the approaches of Finite-State Morphology (FSM, Koskenniemi 1983), DAT f; (Gazdar and Evans 1989) and object-orientec morphophonemics (de Smedt 1985, Daelemans 1988). One important question in the light of curreni work in morphology is whether a system involving string equations allows a reduction to finite-state techniques. We review some possible answers to this question. 2 Components of the Model 2.1 String Equations and Strini Unification This introduction is based on Siekmann (1975) A string a is a sequence of elements drawn from ; finite alphabet C combined by the associative operator +, representing the concatenation of strings - 58 - A string specif</context>
<context position="20024" citStr="Koskenniemi 1983" startWordPosition="3205" endWordPosition="3206">g the formalism to more complex grammatical descriptions, in line with many current views on the nature of syntactic categories as recursively structured objects. Current work is examining this possibility. 7 Reduction to finite-state transducers While the declarative nature of our system means that it is not tied to a particular computational interpretation, the fact that the closure of the lexicon may be infinite argues in favour of an interpretation that does not presuppose computation of that closure, and considerations of efficiency in favour of one in terms of finite-state transduction (Koskenniemi 1983)4. It is immediately clear that heavy restrictions have to be placed on systems involving string equations in order to have any chance of a reduction to finite-state transduction at all. One difficulty will lie in representing paradigm subsumption induced by non-orthographic properties. The assumption that there is only a finite set of such properties would make this problem easier. (We assume the subsumption relations engendered by orthographic properties are readily handled by the standard notion of priority of transition in FSTs). A much graver problem lies in eliminating non-finite-state c</context>
</contexts>
<marker>Koskenniemi, 1983</marker>
<rawString>Koskenniemi, K. (1983) &amp;quot;Two-level morphology: A general computational model for word-form recognition and production&amp;quot;. Publication 11, Department of General Linguistics, University of Helsinki, Helsinki, 1983.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J McCarthy</author>
</authors>
<title>A Prosodic Theory of Nonconcatenative Morphology&amp;quot;</title>
<date>1981</date>
<journal>Linguistic Inquiry</journal>
<volume>12</volume>
<pages>373--418</pages>
<contexts>
<context position="14828" citStr="McCarthy 1981" startWordPosition="2411" endWordPosition="2412">t the orthographic behaviour of the verbal singular affix and nominal plural affix is identical. Defining subsumption on the basis of lexical specifications of paradigms alone leads to a very simple statement of the conditions of inheritance of derived string forms, but disallows the possibility of inheritance of partial derived string forms. The restriction of inheritance by delegation or stipulation to subsuming paradigms, while natural, is not motivated by more general considerations. This problem becomes much more obvious and acute in analysing non-concatenative morphology, as in Semitic (McCarthy 1981). It is not the intercalation of the consonantal roots and vocalic melodies which leads to difficulties, as this is easily described in our framework. Rather, the problem lies in having to choose which of the root and melody should be expressed as the word with which a paradigm is associated. On the one hand, traditional grammar would suggest that the consonantal root has some claim to this status. However, there are clearly relationships between the vocalic melodies which indicate syntactic regularities on the basis of Ablaut (McCarthy 1981, p403), and these regularities cannot be captured if</context>
</contexts>
<marker>McCarthy, 1981</marker>
<rawString>McCarthy, J. (1981) &amp;quot;A Prosodic Theory of Nonconcatenative Morphology&amp;quot; Linguistic Inquiry 12 373-418.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P H Matthews</author>
</authors>
<title>Morphology, Cambridge,</title>
<date>1974</date>
<publisher>Cambridge University Press.</publisher>
<marker>Matthews, 1974</marker>
<rawString>Matthews, P. H. (1974) Morphology, Cambridge, Cambridge University Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F C N Pereira</author>
</authors>
<title>Grammars and Logics of Partial Information&amp;quot;</title>
<date>1987</date>
<booktitle>Proceedings of the International Conference on Logic Programming,</booktitle>
<location>Melbourne, Australia</location>
<contexts>
<context position="3889" citStr="Pereira 1987" startWordPosition="572" endWordPosition="573">58 - A string specification or string form is a sequence possibly containing variables drawn from the set of variables V, disjoint from C. Omission of the operator + increases legibility as shown in the right hand column of (1) which gives examples of strings Cab) and string specifications (c-e) and where lower case alphabetics represent elements of C and upper case alphabetics elements of V. w+a+1+k+s walks s+6-1-r sOr A A W+s Ws k+V+t+V+b kVtVb String specifications are partial descriptions of strings. As with the standard use of unification in computational linguistics (Shieber et al 1983, Pereira 1987), we may take two partial descriptions to describe the same object. We use string equations to represent this situation. The examples in (2) show string equations and the assignments of values to variables which satisfy the equations. (2) a. walks = Ws a&apos;. W/walk b. sorAk = XYZYW b&apos;. NO, Y/8, X/s, Z/r, W/k c. kVtWb = CiDaE c&apos;. V/i, W/a, C/k, D/t, E/b The operation which determines the assignments of values to variables (equivalently, determines the most general unifying substitution for a given problem) is string unification. While no complete, terminating algorithm for the general case of str</context>
</contexts>
<marker>Pereira, 1987</marker>
<rawString>Pereira, F. C. N. (1987) &amp;quot;Grammars and Logics of Partial Information&amp;quot; Proceedings of the International Conference on Logic Programming, Melbourne, Australia</rawString>
</citation>
<citation valid="true">
<authors>
<author>G D Plotkin</author>
</authors>
<title>Building-in Equational Theories&amp;quot;</title>
<date>1972</date>
<booktitle>Machine Intelligence 7,</booktitle>
<editor>in D Michie and B Meltzer (eds.)</editor>
<publisher>University Press.</publisher>
<location>Edinburgh</location>
<contexts>
<context position="5635" citStr="Plotkin (1972)" startWordPosition="870" endWordPosition="871">e two string specifications in question. The relation of subsumption defines a partial ordering on string specifications. A string specification S subsumes another S&apos; (S g S&apos;) if all ground instances (i.e. instances that contain no variables) of S&apos; are also instances of S. Equivalently, S g S&apos; if the unification of S and S&apos; is S&apos; (S&apos; U s S = S&apos;). If S and S&apos; are inconsistent, S U s S&apos; is undefined. It is worth noting that the use of string unification is widespread in the field of automatic theorem proving, as an extension of standard resolution techniques and typically as an instance of what Plotkin (1972) terms &amp;quot;building in equational theories&amp;quot;, that is the extension of standard unification algorithms by axioms such as associativity and the development of a normal form for the resulting theory (Plotkin op.cit. p74). 2.2 Lexical entries A lexical entry S:P associates a string S (i.e. S contains no variables) and a set of grammatical properties P. We will here treat grammatical properties as atomic. (Their ultimate interpretation is intended to be similar to that of templates in PATR-1I (Shieber et al 1983)). A lexical specification a:4) subsumes another a&apos;:4)&apos; iff a g a&apos; and 4) 5 where 5. repre</context>
</contexts>
<marker>Plotkin, 1972</marker>
<rawString>Plotkin, G. D. (1972) &amp;quot;Building-in Equational Theories&amp;quot; in D Michie and B Meltzer (eds.) Machine Intelligence 7, Edinburgh University Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Shieber</author>
<author>H Uszkoreit</author>
<author>F C N Pereira</author>
<author>JJ Robinson</author>
<author>M Tyson</author>
</authors>
<title>The Formalism and Implementation of PATR-II&amp;quot;</title>
<date>1983</date>
<booktitle>Research on Interactive Acquisition and Use of Knowledge SRI International, Menlo Park</booktitle>
<pages>39--79</pages>
<editor>in B. Grosz and M. Stickel (eds.)</editor>
<contexts>
<context position="3874" citStr="Shieber et al 1983" startWordPosition="568" endWordPosition="571">nation of strings - 58 - A string specification or string form is a sequence possibly containing variables drawn from the set of variables V, disjoint from C. Omission of the operator + increases legibility as shown in the right hand column of (1) which gives examples of strings Cab) and string specifications (c-e) and where lower case alphabetics represent elements of C and upper case alphabetics elements of V. w+a+1+k+s walks s+6-1-r sOr A A W+s Ws k+V+t+V+b kVtVb String specifications are partial descriptions of strings. As with the standard use of unification in computational linguistics (Shieber et al 1983, Pereira 1987), we may take two partial descriptions to describe the same object. We use string equations to represent this situation. The examples in (2) show string equations and the assignments of values to variables which satisfy the equations. (2) a. walks = Ws a&apos;. W/walk b. sorAk = XYZYW b&apos;. NO, Y/8, X/s, Z/r, W/k c. kVtWb = CiDaE c&apos;. V/i, W/a, C/k, D/t, E/b The operation which determines the assignments of values to variables (equivalently, determines the most general unifying substitution for a given problem) is string unification. While no complete, terminating algorithm for the gene</context>
<context position="6145" citStr="Shieber et al 1983" startWordPosition="949" endWordPosition="952">roving, as an extension of standard resolution techniques and typically as an instance of what Plotkin (1972) terms &amp;quot;building in equational theories&amp;quot;, that is the extension of standard unification algorithms by axioms such as associativity and the development of a normal form for the resulting theory (Plotkin op.cit. p74). 2.2 Lexical entries A lexical entry S:P associates a string S (i.e. S contains no variables) and a set of grammatical properties P. We will here treat grammatical properties as atomic. (Their ultimate interpretation is intended to be similar to that of templates in PATR-1I (Shieber et al 1983)). A lexical specification a:4) subsumes another a&apos;:4)&apos; iff a g a&apos; and 4) 5 where 5. represents the partial ordering over sets defined by the relation of set inclusion. (In other words, a&apos;:4)&apos; contains at least as much orthographic and grammatical information as a:4)). The lexicon consists of a finite set of lexical entries. 2.3 Lexical rules A lexical rule is a triple &lt;Name, IS:IP, OS:OP&gt;, representing a mapping between a set of &amp;quot;input&amp;quot; properties IP and a set of &amp;quot;output&amp;quot; properties OP. The interpretation of a rule with respect to grammatical properties is as follows: (3) Given a lexical item</context>
</contexts>
<marker>Shieber, Uszkoreit, Pereira, Robinson, Tyson, 1983</marker>
<rawString>Shieber, S., Uszkoreit, H., Pereira, F.C.N., Robinson, JJ., and Tyson, M. (1983) &amp;quot;The Formalism and Implementation of PATR-II&amp;quot; in B. Grosz and M. Stickel (eds.) Research on Interactive Acquisition and Use of Knowledge SRI International, Menlo Park pp39-79.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J H Siekmann</author>
</authors>
<title>String-unification, part 1.</title>
<date>1975</date>
<institution>Essex University ms.</institution>
<contexts>
<context position="2178" citStr="Siekmann 1975" startWordPosition="305" endWordPosition="306">scriptions should be restricted to those with an immediate interpretation in terms of the operations of finite-state transducers. In this paper, we present a notation for the declarative statement of morphological relationships and lexical rules, based on the traditional notion of Word and Paradigm (WP, Hockett 1954, see alsc Anderson 1982). The phenomenon of blocking arises from a generalized version of Kiparsky&apos;s (1973) Elsewhere Condition, stated in terms of ordering by subsumption over paradigms. Orthographic constraints on morphemic alternation are described by means of string equations (Siekmann 1975). We will first give a brief introduction to string equations and the other formal devices used in ow model, namely lexical entries and rules, grammatical properties and paradigms. We give example paradigms and show how our interpretation of paradigms leads to the phenomenon of blocking. We will then indicate some criticisms to be made of ou; approach from both linguistic and computational perspectives. We discuss relations between ow proposals and the approaches of Finite-State Morphology (FSM, Koskenniemi 1983), DAT f; (Gazdar and Evans 1989) and object-orientec morphophonemics (de Smedt 198</context>
</contexts>
<marker>Siekmann, 1975</marker>
<rawString>Siekmann, J. H. (1975) String-unification, part 1. Essex University ms.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J H Siekmann</author>
</authors>
<title>Universal Unification.</title>
<date>1984</date>
<booktitle>Proceedings of the Seventh International Conference on Automated Deduction,</booktitle>
<pages>1--42</pages>
<editor>In Shostak, R. H. (ed.)</editor>
<publisher>Springer-Verlag.</publisher>
<location>Napa, California,</location>
<contexts>
<context position="4750" citStr="Siekmann 1984" startWordPosition="711" endWordPosition="712"> = Ws a&apos;. W/walk b. sorAk = XYZYW b&apos;. NO, Y/8, X/s, Z/r, W/k c. kVtWb = CiDaE c&apos;. V/i, W/a, C/k, D/t, E/b The operation which determines the assignments of values to variables (equivalently, determines the most general unifying substitution for a given problem) is string unification. While no complete, terminating algorithm for the general case of string unification exists, the class of problems described by Siekmann (op. cit., section 4.3.3.2) as P13.5, that is where repeated variables are only permitted on one side of an equation, are decidable and have only finitary substitutions (see also Siekmann 1984). Whether or not an equation falls within P0.5 is easily determined. The examples in (2) and in the rest of this paper all fall within this class. We will refer to the result of applying a unifying substitution to either side of a string equation as the unification of the two string specifications in question. The relation of subsumption defines a partial ordering on string specifications. A string specification S subsumes another S&apos; (S g S&apos;) if all ground instances (i.e. instances that contain no variables) of S&apos; are also instances of S. Equivalently, S g S&apos; if the unification of S and S&apos; is </context>
</contexts>
<marker>Siekmann, 1984</marker>
<rawString>Siekmann, J. H. (1984) Universal Unification. In Shostak, R. H. (ed.) Proceedings of the Seventh International Conference on Automated Deduction, Napa, California, May, 1984, pp1-42. Lecture Notes in Computer Science, Springer-Verlag.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K de Smedt</author>
</authors>
<title>Using Object-Oriented Knowledge-Representation Techniques in Morphology and Syntax Programming&amp;quot;,</title>
<date>1984</date>
<booktitle>ECAI &apos;84: Advances in Artificial Intelligence.</booktitle>
<editor>in O&apos;Shea, T. (ed.)</editor>
<publisher>North Holland.</publisher>
<marker>de Smedt, 1984</marker>
<rawString>de Smedt, K. (1984) &amp;quot;Using Object-Oriented Knowledge-Representation Techniques in Morphology and Syntax Programming&amp;quot;, in O&apos;Shea, T. (ed.) ECAI &apos;84: Advances in Artificial Intelligence. North Holland.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Touretzky</author>
</authors>
<date>1986</date>
<booktitle>The Mathematics of Inheritance Systems ,</booktitle>
<publisher>Morgan Kaufmann,</publisher>
<location>Los Altos</location>
<contexts>
<context position="12286" citStr="Touretzky 1986" startWordPosition="2017" endWordPosition="2018">nd a u a&apos; --&gt; Si = S&apos;i (i.e. we would get the same result if we used either IC or 70), we are allowed to omit the references to LR i and Si in it. In other words, we allow the inheritance of a siring form and associated lexical rule from the more general paradigm. In the case of n directly subsuming paradigms, the same convention applies if a u al ... u an —3 Si = S&apos;i,ji ... = S&apos;. That is, multiple inheritance must be consistent. In the case where this condition doesn&apos;t hold, we allow the equivalence of inheritance by delegation (Daelemans op. cit.), so enforcing orthogonality of inheritance (Touretzky 1986); corresponding to some LR, we allow Si to be of the form paradigm(it&amp;quot;), where Ir&amp;quot; is the name of a paradigm, such that it&amp;quot; g. it, with the interpretation that the paradigm it&amp;quot; relates a and Si via LRi. 4 Example paradigms and lexical rules We are now in a position to give some example paradigms. These have the concrete syntax: (8) table(Name, String:Properties, LR, S) where Properties may also include string equations and LR and S are lists of names of lexical rules and of string forms respectively, subject to the conventions described above. In Table 1 below, (9) is the most general paradigm</context>
</contexts>
<marker>Touretzky, 1986</marker>
<rawString>Touretzky, D. (1986) The Mathematics of Inheritance Systems , Morgan Kaufmann, Los Altos</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Zaenen</author>
</authors>
<title>Lexical Information in LFG — an overview. Unpublished ms.</title>
<date>1988</date>
<contexts>
<context position="23707" citStr="Zaenen 1988" startWordPosition="3759" endWordPosition="3760"> aspects of the system described above have been implemented, primarily by Mike Reape. The implementation of lexical rules differs somewhat from the presentation given here, in that we allow the association of a PATR-II style lexical rules with the lexical rules we describe above and, as such, lexical rules may perform arbitrary mappings over feature structures. The work considerably extended published string unification algorithms to handle identity and arbitrary constraints over string forms. The system is a subcomponent of a polytheoretic lexicon system (Calder and te Linden 1987, cf. also Zaenen 1988) and is currently being used to generate English lexical entries for use with Unification Categorial Grammar (Zeevat et al 1986, Calder et al 1986). The system generates lexical entries off-line; the lexicons used to date have provably finite closures under the application of lexical rules. Current work is focused on the computational interpretation of paradigms and on descriptive work in languages other than English. ACKNOWLEDGEMENTS This work is supported by ESPRIT project P393: ACORD &amp;quot;The Construction and Interrogation of Knowledge Bases using Natural Language Text and Graphics&amp;quot;. Thanks are</context>
</contexts>
<marker>Zaenen, 1988</marker>
<rawString>Zaenen, A. (1988) Lexical Information in LFG — an overview. Unpublished ms.</rawString>
</citation>
<citation valid="false">
<authors>
<author>H Zeevat</author>
<author>E Klein</author>
<author>J Calder</author>
</authors>
<title>Introduction to Unification Categorial Grammar&amp;quot;</title>
<booktitle>Grammar, Unification Grammar, and Parsing, Edinburgh Working Papers in Cognitive Science</booktitle>
<volume>1</volume>
<pages>195--222</pages>
<editor>in Haddock, NJ., Klein, E. and Morrill, G. (eds.)Categorial</editor>
<marker>Zeevat, Klein, Calder, </marker>
<rawString>Zeevat, H., Klein, E., and Calder, J. (1 9 8 7) &amp;quot;Introduction to Unification Categorial Grammar&amp;quot; in Haddock, NJ., Klein, E. and Morrill, G. (eds.)Categorial Grammar, Unification Grammar, and Parsing, Edinburgh Working Papers in Cognitive Science 1, pp195-222</rawString>
</citation>
<citation valid="false">
<pages>65</pages>
<marker></marker>
<rawString>- 65 -</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>