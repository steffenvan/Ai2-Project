<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.005752">
<title confidence="0.7487555">
Book Reviews
The Core Language Engine
</title>
<author confidence="0.629885">
Hiyan Alshawi (editor)
</author>
<affiliation confidence="0.532771">
(SRI International, Cambridge)
</affiliation>
<address confidence="0.261585">
Cambridge, MA: The MIT Press
</address>
<figure confidence="0.500144857142857">
(The ACL—MIT Press Series in Natural
Language Processing), 1992, xvi +
322 pp.
Hardbound, ISBN 0-262-01126-3, $37.50
Reviewed by.
Deborah A. Dahl
Paramax
</figure>
<bodyText confidence="0.99992803125">
This book describes the Core Language Engine (CLE), a natural language processing
system implemented in Prolog, which was developed in a collaborative effort between
SRI Cambridge and the SRI Artificial Intelligence Center as a three-year project ending
in 1989. As a comprehensive description of a recently developed large-scale system,
this book will be extremely valuable to computational linguists working in all areas
of natural language processing. It includes detailed discussions of each component of
the CLE, the system&apos;s major data structures, and also includes descriptions of several
applications.
Despite the fact that most computational linguists would agree that the ultimate
goal of computational linguistics is to build natural language processing systems, there
are in fact very few detailed, complete descriptions of implemented natural language
processing systems available in the literature. This may be due to the fact that it is
nearly impossible to do justice to the full complexity of a complete natural language
processing system in any format shorter than a book. More typically, systems are
described through a bibliography of papers on various components of the system,
which is much less convenient than a book as a reference. Thus, The Core Language
Engine is an important book simply on the grounds that it provides such a description.
The Core Language Engine begins by describing the data structure that is output by
the system, Logical Form (Chapter 2), followed by descriptions of syntax and semantics
rules (Chapters 3, 4, and 5). This sets the stage for descriptions of the processing com-
ponents for lexical analysis (Chapter 6), syntactic and semantic processing (Chapter 7),
and additional semantic and pragmatic processing (Chapters 8, 9, and 10). Chapters 11,
12, and 14 deal with issues in application development, including lexical acquisition as
well as descriptions of specific applications. Oddly, the syntactic, semantic, and prag-
matic processing involved in the treatment of ellipsis, comparatives, and generation
are described in their own chapter, Chapter 13, resulting in some degree of discon-
nection between this material and related material elsewhere in the book. However,
cross-references within the book are excellent, so that finding related material within
the book is quite easy.
The system architecture of the CLE is modular and linear, including linguistically
standard stages of lexical, syntactic, and semantic analysis, as well as several distinct
pragmatic stages of quantifier scoping, reference resolution, and plausibility judgment.
</bodyText>
<subsectionHeader confidence="0.450139">
Book Reviews
</subsectionHeader>
<bodyText confidence="0.999934627450981">
No semantic information is consulted during parsing; alternative analyses that require
semantic information for disambiguation are propagated to later stages in an efficient
manner through the mechanism of &amp;quot;packing.&amp;quot; Packing allows alternatives to be rep-
resented without multiplying out all the possibilities. Conceptual information about
lexical items is represented in a sortal hierarchy that is essentially a semantic net.
Sortal constraints are consulted during semantic analysis and plausibility judgment to
rule out or reduce the likelihood of semantically unlikely analyses. Unification is the
typical method of information transmission in both syntactic and semantic processing
stages. In general, treatments of specific phenomena are thoughtful and linguistically
well motivated. Clearly, the design and implementation of the CLE have been care-
fully thought through. The system addresses an impressive range of constructions,
and descriptions of treatments are clear.
The Core Language Engine fills a real need in the computational linguistics literature
for complete, detailed descriptions of natural language processing systems; however, it
is unfortunate that the discussions in the book often suffer from a lack of context. The
most serious problem with this book is the fact that it includes relatively few references
to the computational linguistics literature, apart from other papers describing the CLE
and work underlying it. There are a few references to other systems in the discussion
of machine translation, but otherwise the only reference to another complete system is
to another SRI system, TEAM. The lack of references is not only obvious at the system
level, but also in discussions of individual components. For example, in the 32-page
chapter on semantic rules for English, there is only one reference (to a theoretical book
on Montague semantics). The lack of references makes it difficult to see to what extent
the CLE is related to, and improves on, previously developed systems.
A related problem is that there is very little global sense of how the CLE performs
as a system. There are many lists of constructions handled in the CLE, but very little
information about what&apos;s not handled, especially at a system level. There is a half-page
description of an evaluation that was performed on a set of 1000 sentences from the
Lancaster/Oslo—Bergen corpus using the CLE (p. 5). The fact that this was done is
commendable, but it is the only attempt in the book to provide a global sense of how
all of the complexity of the CLE fits together and performs as a unit. The description
of the evaluation states that 63% of the test set received Quasi-Logical Forms (QLF is
a precursor to Logical Form, which may contain unscoped quantifiers and unresolved
anaphora). In 67% of these cases the QLF ranked first would be valid in some context.
We do not get a sense from these numbers how serious the failures are; are they the
result of simple bugs, or do they reflect significant gaps in coverage? From a system
perspective, it would also be valuable to know how long the various processing stages
take, but there is no information about processing time in the book. As a reference for
system builders, this book could have been greatly improved by even a qualitative
evaluation of the system as a whole; what worked, what didn&apos;t work, what would
they have done differently the next time. There is a very brief discussion of future
work in a new system called CLARE, which provides a more integrated approach to
natural language processing and reasoning, but we are told only briefly where CLE
fell short in this area. Another piece of information that would have been useful is
some discussion of how statistical processing is used in CLE. Numerical preference
mechanisms are used in the CLE, but are not described in the book because they
are heuristic in nature. This is unfortunate, because statistical approaches to natural
language processing are currently of great interest. System builders are interested in
ways to get better accuracy out of their systems whether or not they are heuristic.
In short, both the breadth and depth of the description of the Core Language
Engine will make this book a valuable resource for researchers interested in the specific
</bodyText>
<page confidence="0.98686">
199
</page>
<note confidence="0.385889">
Computational Linguistics Volume 19, Number 1
</note>
<bodyText confidence="0.99495525">
components of the CLE as well as the CLE as a system. It would have been even more
valuable had the book provided the additional context that would have been achieved
by putting the system into more perspective, with respect both to related work and to
itself.
</bodyText>
<reference confidence="0.6468868">
Deborah Dahl is the manager of the Symbolic Processing and Analysis group in the Research and
Development area of Paramax Systems Corporation&apos;s Valley Forge Laboratories. The group has
implemented Pundit, a broad-coverage, Prolog-based natural language understanding system as
well as several smaller-scale, experimental, natural language processing systems. Dahl&apos;s address
is: Paramax, PO Box 517, Paoli, PA 19301; e-mail: dahl@vfl.paramax.com
</reference>
<page confidence="0.994875">
200
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.080021">
<title confidence="0.9974025">Book Reviews The Core Language Engine</title>
<author confidence="0.96676">Hiyan Alshawi</author>
<affiliation confidence="0.979416">(SRI International, Cambridge)</affiliation>
<address confidence="0.944492">Cambridge, MA: The MIT Press</address>
<note confidence="0.9907578">(The ACL—MIT Press Series in Natural Language Processing), 1992, xvi + 322 pp. Hardbound, ISBN 0-262-01126-3, $37.50 Reviewed by.</note>
<author confidence="0.850036">Deborah A Dahl</author>
<abstract confidence="0.987474505263158">Paramax This book describes the Core Language Engine (CLE), a natural language processing system implemented in Prolog, which was developed in a collaborative effort between SRI Cambridge and the SRI Artificial Intelligence Center as a three-year project ending in 1989. As a comprehensive description of a recently developed large-scale system, this book will be extremely valuable to computational linguists working in all areas of natural language processing. It includes detailed discussions of each component of the CLE, the system&apos;s major data structures, and also includes descriptions of several applications. Despite the fact that most computational linguists would agree that the ultimate of computational linguistics is to build natural language processing are in fact very few detailed, complete descriptions of implemented natural language processing systems available in the literature. This may be due to the fact that it is nearly impossible to do justice to the full complexity of a complete natural language processing system in any format shorter than a book. More typically, systems are described through a bibliography of papers on various components of the system, is much less convenient than a book as a reference. Thus, Core Language an important book simply on the grounds that it provides such a description. Core Language Engine by describing the data structure that is output by system, Form 2), followed by descriptions of syntax and semantics rules (Chapters 3, 4, and 5). This sets the stage for descriptions of the processing components for lexical analysis (Chapter 6), syntactic and semantic processing (Chapter 7), and additional semantic and pragmatic processing (Chapters 8, 9, and 10). Chapters 11, 12, and 14 deal with issues in application development, including lexical acquisition as well as descriptions of specific applications. Oddly, the syntactic, semantic, and pragmatic processing involved in the treatment of ellipsis, comparatives, and generation are described in their own chapter, Chapter 13, resulting in some degree of disconnection between this material and related material elsewhere in the book. However, cross-references within the book are excellent, so that finding related material within the book is quite easy. The system architecture of the CLE is modular and linear, including linguistically standard stages of lexical, syntactic, and semantic analysis, as well as several distinct pragmatic stages of quantifier scoping, reference resolution, and plausibility judgment. Book Reviews No semantic information is consulted during parsing; alternative analyses that require semantic information for disambiguation are propagated to later stages in an efficient manner through the mechanism of &amp;quot;packing.&amp;quot; Packing allows alternatives to be represented without multiplying out all the possibilities. Conceptual information about lexical items is represented in a sortal hierarchy that is essentially a semantic net. Sortal constraints are consulted during semantic analysis and plausibility judgment to rule out or reduce the likelihood of semantically unlikely analyses. Unification is the typical method of information transmission in both syntactic and semantic processing stages. In general, treatments of specific phenomena are thoughtful and linguistically well motivated. Clearly, the design and implementation of the CLE have been carefully thought through. The system addresses an impressive range of constructions, and descriptions of treatments are clear. Core Language Engine a real need in the computational linguistics literature for complete, detailed descriptions of natural language processing systems; however, it is unfortunate that the discussions in the book often suffer from a lack of context. The most serious problem with this book is the fact that it includes relatively few references to the computational linguistics literature, apart from other papers describing the CLE and work underlying it. There are a few references to other systems in the discussion of machine translation, but otherwise the only reference to another complete system is to another SRI system, TEAM. The lack of references is not only obvious at the system level, but also in discussions of individual components. For example, in the 32-page chapter on semantic rules for English, there is only one reference (to a theoretical book on Montague semantics). The lack of references makes it difficult to see to what extent the CLE is related to, and improves on, previously developed systems. A related problem is that there is very little global sense of how the CLE performs as a system. There are many lists of constructions handled in the CLE, but very little about what&apos;s especially at a system level. There is a half-page description of an evaluation that was performed on a set of 1000 sentences from the Lancaster/Oslo—Bergen corpus using the CLE (p. 5). The fact that this was done is commendable, but it is the only attempt in the book to provide a global sense of how all of the complexity of the CLE fits together and performs as a unit. The description of the evaluation states that 63% of the test set received Quasi-Logical Forms (QLF is a precursor to Logical Form, which may contain unscoped quantifiers and unresolved anaphora). In 67% of these cases the QLF ranked first would be valid in some context. We do not get a sense from these numbers how serious the failures are; are they the result of simple bugs, or do they reflect significant gaps in coverage? From a system perspective, it would also be valuable to know how long the various processing stages take, but there is no information about processing time in the book. As a reference for system builders, this book could have been greatly improved by even a qualitative evaluation of the system as a whole; what worked, what didn&apos;t work, what would they have done differently the next time. There is a very brief discussion of future work in a new system called CLARE, which provides a more integrated approach to natural language processing and reasoning, but we are told only briefly where CLE fell short in this area. Another piece of information that would have been useful is some discussion of how statistical processing is used in CLE. Numerical preference mechanisms are used in the CLE, but are not described in the book because they are heuristic in nature. This is unfortunate, because statistical approaches to natural language processing are currently of great interest. System builders are interested in ways to get better accuracy out of their systems whether or not they are heuristic. In short, both the breadth and depth of the description of the Core Language Engine will make this book a valuable resource for researchers interested in the specific 199 Computational Linguistics Volume 19, Number 1 the CLE as well as the CLE as a system. It would have been even more valuable had the book provided the additional context that would have been achieved by putting the system into more perspective, with respect both to related work and to itself. Dahl the manager of the Symbolic Processing and Analysis group in the Research and Development area of Paramax Systems Corporation&apos;s Valley Forge Laboratories. The group has implemented Pundit, a broad-coverage, Prolog-based natural language understanding system as well as several smaller-scale, experimental, natural language processing systems. Dahl&apos;s address</abstract>
<address confidence="0.381042">is: Paramax, PO Box 517, Paoli, PA 19301; e-mail: dahl@vfl.paramax.com 200</address>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="false">
<authors>
<author>Deborah Dahl</author>
</authors>
<title>is the manager of the Symbolic Processing and Analysis group in the Research and Development area of Paramax Systems Corporation&apos;s Valley Forge Laboratories. The group has implemented Pundit, a broad-coverage, Prolog-based natural language understanding system as well as several smaller-scale, experimental, natural language processing systems. Dahl&apos;s address is: Paramax, PO Box 517,</title>
<date>1930</date>
<location>Paoli, PA</location>
<note>e-mail: dahl@vfl.paramax.com</note>
<marker>Dahl, 1930</marker>
<rawString>Deborah Dahl is the manager of the Symbolic Processing and Analysis group in the Research and Development area of Paramax Systems Corporation&apos;s Valley Forge Laboratories. The group has implemented Pundit, a broad-coverage, Prolog-based natural language understanding system as well as several smaller-scale, experimental, natural language processing systems. Dahl&apos;s address is: Paramax, PO Box 517, Paoli, PA 19301; e-mail: dahl@vfl.paramax.com</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>