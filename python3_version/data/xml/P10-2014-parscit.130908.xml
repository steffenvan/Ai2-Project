<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.006777">
<title confidence="0.999554">
Correcting Errors in a Treebank Based on
Synchronous Tree Substitution Grammar
</title>
<author confidence="0.997676">
Yoshihide Kato1 and Shigeki Matsubara2
</author>
<affiliation confidence="0.962269">
1Information Technology Center, Nagoya University
2Graduate School of Information Science, Nagoya University
</affiliation>
<address confidence="0.846157">
Furo-cho, Chikusa-ku, Nagoya, 464-8601 Japan
</address>
<email confidence="0.999155">
yosihide@el.itc.nagoya-u.ac.jp
</email>
<sectionHeader confidence="0.993904" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.9998085">
This paper proposes a method of correct-
ing annotation errors in a treebank. By us-
ing a synchronous grammar, the method
transforms parse trees containing annota-
tion errors into the ones whose errors are
corrected. The synchronous grammar is
automatically induced from the treebank.
We report an experimental result of apply-
ing our method to the Penn Treebank. The
result demonstrates that our method cor-
rects syntactic annotation errors with high
precision.
</bodyText>
<sectionHeader confidence="0.998801" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999953615384616">
Annotated corpora play an important role in the
fields such as theoretical linguistic researches or
the development of NLP systems. However, they
often contain annotation errors which are caused
by a manual or semi-manual mark-up process.
These errors are problematic for corpus-based re-
searches.
To solve this problem, several error detection
and correction methods have been proposed so far
(Eskin, 2000; Nakagawa and Matsumoto, 2002;
Dickinson and Meurers, 2003a; Dickinson and
Meurers, 2003b; Ule and Simov, 2004; Murata
et al., 2005; Dickinson and Meurers, 2005; Boyd
et al., 2008). These methods detect corpus posi-
tions which are marked up incorrectly, and find
the correct labels (e.g. pos-tags) for those posi-
tions. However, the methods cannot correct errors
in structural annotation. This means that they are
insufficient to correct annotation errors in a tree-
bank.
This paper proposes a method of correcting er-
rors in structural annotation. Our method is based
on a synchronous grammar formalism, called syn-
chronous tree substitution grammar (STSG) (Eis-
ner, 2003), which defines a tree-to-tree transfor-
mation. By using an STSG, our method trans-
forms parse trees containing errors into the ones
whose errors are corrected. The grammar is au-
tomatically induced from the treebank. To select
STSG rules which are useful for error correction,
we define a score function based on the occurrence
frequencies of the rules. An experimental result
shows that the selected rules archive high preci-
sion.
This paper is organized as follows: Section 2
gives an overview of previous work. Section 3 ex-
plains our method of correcting errors in a tree-
bank. Section 4 reports an experimental result us-
ing the Penn Treebank.
</bodyText>
<sectionHeader confidence="0.996222" genericHeader="introduction">
2 Previous Work
</sectionHeader>
<bodyText confidence="0.999940565217391">
This section summarizes previous methods for
correcting errors in corpus annotation and dis-
cusses their problem.
Some research addresses the detection of er-
rors in pos-annotation (Nakagawa and Matsumoto,
2002; Dickinson and Meurers, 2003a), syntactic
annotation (Dickinson and Meurers, 2003b; Ule
and Simov, 2004; Dickinson and Meurers, 2005),
and dependency annotation (Boyd et al., 2008).
These methods only detect corpus positions where
errors occur. It is unclear how we can correct the
errors.
Several methods can correct annotation errors
(Eskin, 2000; Murata et al., 2005). These meth-
ods are to correct tag-annotation errors, that is,
they simply suggest a candidate tag for each po-
sition where an error is detected. The methods
cannot correct syntactic annotation errors, because
syntactic annotation is structural. There is no ap-
proach to correct structural annotation errors.
To clarify the problem, let us consider an exam-
ple. Figure 1 depicts two parse trees annotated ac-
cording to the Penn Treebank annotation 1. The
</bodyText>
<page confidence="0.945321">
10 and *T* are null elements.
74
</page>
<note confidence="0.6986845">
Proceedings of the ACL 2010 Conference Short Papers, pages 74–79,
Uppsala, Sweden, 11-16 July 2010. c�2010 Association for Computational Linguistics
</note>
<figure confidence="0.998845166666667">
(a) incorrect parse tree
S
NP PRN VP .
(b) correct parse tree
S
NP PRN VP .
</figure>
<figureCaption confidence="0.999958">
Figure 1: An example of a treebank error
</figureCaption>
<bodyText confidence="0.992721222222222">
parse tree (a) contains errors and the parse tree
(b) is the corrected version. In the parse tree (a),
the positions of the two subtrees (, ,) are erro-
neous. To correct the errors, we need to move the
subtrees to the positions which are directly dom-
inated by the node PRN. This example demon-
strates that we need a framework of transforming
tree structures to correct structural annotation er-
rors.
</bodyText>
<sectionHeader confidence="0.78222" genericHeader="method">
3 Correcting Errors by Using
Synchronous Grammar
</sectionHeader>
<bodyText confidence="0.99996975">
To solve the problem described in Section 2, this
section proposes a method of correcting structural
annotation errors by using a synchronous tree sub-
stitution grammar (STSG) (Eisner, 2003). An
STSG defines a tree-to-tree transformation. Our
method induces an STSG which transforms parse
trees containing errors into the ones whose errors
are corrected.
</bodyText>
<subsectionHeader confidence="0.999703">
3.1 Synchronous Tree Substitution Grammar
</subsectionHeader>
<bodyText confidence="0.996913">
First of all, we describe the STSG formalism. An
STSG defines a set of tree pairs. An STSG can be
treated as a tree transducer which takes a tree as
input and produces a tree as output. Each grammar
rule consists of the following elements:
</bodyText>
<listItem confidence="0.993516">
• a pair of trees called elementary trees
</listItem>
<figure confidence="0.9308605">
source target
PRN
S
,1 NP, VP, ,a
</figure>
<figureCaption confidence="0.977541">
Figure 2: An example of an STSG rule
</figureCaption>
<listItem confidence="0.9511185">
• a one-to-one alignment between nodes in the
elementary trees
</listItem>
<figureCaption confidence="0.95848575">
For a tree pair (t, t′), the tree t and t′ are
called source and target, respectively. The non-
terminal leaves of elementary trees are called fron-
tier nodes. There exists a one-to-one alignment
between the frontier nodes in t and t′. The rule
means that the structure which matches the source
elementary tree is transformed into the structure
which is represented by the target elementary tree.
Figure 2 shows an example of an STSG rule. The
subscripts indicate the alignment. This rule can
correct the errors in the parse tree (a) depicted in
Figure 1.
</figureCaption>
<bodyText confidence="0.99936525">
An STSG derives tree pairs. Any derivation
process starts with the pair of nodes labeled with
special symbols called start symbols. A derivation
proceeds in the following steps:
</bodyText>
<listItem confidence="0.999785857142857">
1. Choose a pair of frontier nodes (q, q′) for
which there exists an alignment.
2. Choose a rule (t, t′) s.t. label(q) = root(t)
and label(q′) = root(t′) where label(q) is
the label of q and root(t) is the root label of
t.
3. Substitute t and t′ into q and q′, respectively.
</listItem>
<bodyText confidence="0.9950846">
Figure 3 shows a derivation process in an STSG.
In the rest of the paper, we focus on the rules
in which the source elementary tree is not identi-
cal to its target, since such identical rules cannot
contribute to error correction.
</bodyText>
<subsectionHeader confidence="0.999692">
3.2 Inducing an STSG for Error Correction
</subsectionHeader>
<bodyText confidence="0.999620666666667">
This section describes a method of inducing an
STSG for error correction. The basic idea of
our method is similar to the method presented by
Dickinson and Meurers (2003b). Their method de-
tects errors by seeking word sequences satisfying
the following conditions:
</bodyText>
<listItem confidence="0.8965785">
• The word sequence occurs more than once in
the corpus.
</listItem>
<figure confidence="0.996597560606061">
DT
That
, PRP
they
S
, NP VP
VBP
SBAR
say -NONE- S
0 -NONE-
*T*
,
,
MD
will
VB
be
VP
11
good
AD1P
IN
for
PP
NP
NNS
bonds
.
DT
That
,
,
PRP
they
NP VP
VBP
say
S
SBAR
-NONE- S
0 -NONE-
*T*
,
,
MD
will
VB
be
VP
11
good
AD1P
IN
for
PP
NP
NNS
bonds
.
PRN
NP, VP,
S
,1
,a
75
(a) S S
</figure>
<figureCaption confidence="0.9840405">
Figure 4: An example of a partial parse tree pair
in a pseudo parallel corpus
</figureCaption>
<figure confidence="0.999889355555555">
NP PRN VP . NP PRN VP .
S
S
DT DT
That That
That , NP VP ,That
NP PRN VP .
DT S DT
S
NP PRN VP .
,
NP VP
S
S
,
PRN
S
,1
,10
,1 NP2 VP4
,10
,
,
NP2 VP4
,
PRP3
they
VBP5
say
VBP5
say
, PRP3
they
SBAR6
-NONE-7 S8
0 -NONE-9
*T*
SBAR6
-NONE-7 S8
0 -NONE-9
*T*
PRN
S
S
S
NP VP
,
SBAR
say -NONE- S
0 -NONE-
DT
That
,
,
VBD
will
ADJP
,
PRP
they
VBP
.
JJ
proud
PP
IN
NP
of PRP$
NNS
his abilities
*T*
NP PRN VP
.
(d)
S
S
NP PRN VP .
NP PRN VP .
DT S DT
,
That , NP VP ,That
PRP
,
they
S
,
NP VP
,
PRP
they
</figure>
<figureCaption confidence="0.9875">
Figure 3: A derivation process of tree pairs in an
STSG
Figure 5: Another example of a parse tree contain-
ing a word sequence “, they say ,”
</figureCaption>
<listItem confidence="0.9944895">
• Different syntactic labels are assigned to the
occurrences of the word sequence.
</listItem>
<bodyText confidence="0.995793857142857">
Unlike their method, our method seeks word se-
quences whose occurrences have different partial
parse trees. We call a collection of these word
sequences with partial parse trees pseudo paral-
lel corpus. Moreover, our method extracts STSG
rules which transform the one partial tree into the
other.
</bodyText>
<subsectionHeader confidence="0.992081">
3.2.1 Constructing a Pseudo Parallel Corpus
</subsectionHeader>
<bodyText confidence="0.999406">
Our method firstly constructs a pseudo parallel
corpus which represents a correspondence be-
tween parse trees containing errors and the ones
whose errors are corrected. The procedure is as
follows: Let T be the set of the parse trees oc-
curring in the corpus. We write Sub(σ) for the
set which consists of the partial parse trees in-
cluded in the parse tree Q. A pseudo parallel cor-
pus Para(T) is constructed as follows:
</bodyText>
<equation confidence="0.9994246">
∪Para(T) = {(�, �′) �, �′ E Sub(σ)
Q∈T
∧ T=�T
∧ yield(τ) = yield(T)
∧ root(τ) = root(7-′)1
</equation>
<bodyText confidence="0.9984768">
where yield(τ) is the word sequence dominated
by T.
Let us consider an example. If the parse trees
depicted in Figure 1 exist in the treebank T, the
pair of partial parse trees depicted in Figure 4 is
an element of Para(T). We also obtain this pair
in the case where there exists not the parse tree
(b) depicted in Figure 1 but the parse tree depicted
in Figure 5, which contains the word sequence “,
they say ,”.
</bodyText>
<subsectionHeader confidence="0.994112">
3.2.2 Inducing a Grammar from a Pseudo
Parallel Corpus
</subsectionHeader>
<bodyText confidence="0.9706975">
Our method induces an STSG from the pseudo
parallel corpus according to the method proposed
by Cohn and Lapata (2009). Cohn and Lapata’s
method can induce an STSG which represents a
correspondence in a parallel corpus. Their method
firstly determine an alignment of nodes between
pairs of trees in the parallel corpus and extracts
STSG rules according to the alignments.
For partial parse trees T and T′, we define a node
alignment C(,r, ,r′) as follows:
</bodyText>
<equation confidence="0.956571823529412">
C(T, T) = {(q, q′) q E Node(τ)
∧ q′ E Node(T)
∧ q is not the root of T
76
∧ 77′ is not the root of T
∧ label(η) = label(�′)
∧ yield(η) = yield(,q′)}
(1) (2)
PRN PRN S
, S
NP VP ,
, S ,
NP VP
NP
NP
S
VP NP VP
</equation>
<bodyText confidence="0.998883285714286">
where Node(τ) is the set of the nodes in T, and
yield(η) is the word sequence dominated by q.
Figure 4 shows an example of a node alignment.
The subscripts indicate the alignment.
An STSG rule is extracted by deleting nodes in
a partial parse tree pair (T, T′) E Para(T). The
procedure is as follows:
</bodyText>
<listItem confidence="0.810402">
• For each (�, �′) E C(T, T′), delete the de-
scendants of q and q′.
</listItem>
<bodyText confidence="0.9950185">
For example, the rule shown in Figure 2 is ex-
tracted from the pair shown in Figure 4.
</bodyText>
<subsectionHeader confidence="0.999495">
3.3 Rule Selection
</subsectionHeader>
<bodyText confidence="0.9998614">
Some rules extracted by the procedure in Section
3.2 are not useful for error correction, since the
pseudo parallel corpus contains tree pairs whose
source tree is correct or whose target tree is incor-
rect. The rules which are extracted from such pairs
can be harmful. To select rules which are use-
ful for error correction, we define a score function
which is based on the occurrence frequencies of
elementary trees in the treebank. The score func-
tion is defined as follows:
</bodyText>
<equation confidence="0.9995535">
5core((t,t′)) = f(t′)
f(t) + f(t′)
</equation>
<bodyText confidence="0.9999778">
where f(�) is the occurrence frequency in the tree-
bank. The score function ranges from 0 to 1. We
assume that the occurrence frequency of an ele-
mentary tree matching incorrect parse trees is very
low. According to this assumption, the score func-
tion 5core((t, t′)) is high when the source ele-
mentary tree t matches incorrect parse trees and
the target elementary tree t′ matches correct parse
trees. Therefore, STSG rules with high scores are
regarded to be useful for error correction.
</bodyText>
<sectionHeader confidence="0.970776" genericHeader="method">
4 An Experiment
</sectionHeader>
<bodyText confidence="0.992335">
To evaluate the effectiveness of our method, we
conducted an experiment using the Penn Treebank
(Marcus et al., 1993).
We used 49208 sentences in Wall Street Journal
sections. We induced STSG rules by applying our
method to the corpus. We obtained 8776 rules. We
</bodyText>
<figureCaption confidence="0.917381">
Figure 6: Examples of error correction rules in-
duced from the Penn Treebank
</figureCaption>
<bodyText confidence="0.974204371428572">
measured the precision of the rules. The precision
is defined as follows:
precision = # of the positions where an error is corrected
# of the positions to which some rule is applied
We manually checked whether each rule appli-
cation corrected an error, because the corrected
treebank does not exist2. Furthermore, we only
evaluated the first 100 rules which are ordered by
the score function described in Section 3.3, since
it is time-consuming and expensive to evaluate all
of the rules. These 100 rules were applied at 331
positions. The precision of the rules is 71.9%. For
each rule, we measured the precision of it. 70 rules
achieved 100% precision. These results demon-
strate that our method can correct syntactic anno-
tation errors with high precision. Moreover, 30
rules of the 70 rules transformed bracketed struc-
tures. This fact shows that the treebank contains
structural errors which cannot be dealt with by the
previous methods.
Figure 6 depicts examples of error correction
rules which achieved 100% precision. Rule (1),
(2) and (3) are rules which transform bracketed
structures. Rule (4) simply replaces a node la-
bel. Rule (1) corrects an erroneous position of a
comma (see Figure 7 (a)). Rule (2) deletes a use-
less node NP in a subject position (see Figure 7
(b)). Rule (3) inserts a node NP (see Figure 7 (c)).
Rule (4) replaces a node label NP with the cor-
rect label PP (see Figure 7 (d)). These examples
demonstrate that our method can correct syntactic
annotation errors.
Figure 8 depicts an example where our method
detected an annotation error but could not correct
it. To correct the error, we need to attach the node
</bodyText>
<footnote confidence="0.96465">
2This also means that we cannot measure the recall of the
rules.
</footnote>
<figure confidence="0.97510875">
source target
(3) PP
IN DT NNS
PP
IN NP
DT NNS
NP
NP NP
IN NP
NP
NP PP
IN NP
(4)
77
all you need
the respondents
</figure>
<figureCaption confidence="0.99914">
Figure 7: Examples of correcting syntactic annotation errors
</figureCaption>
<figure confidence="0.999893318181818">
(a) (b)
PRN
, S
PRN
, S
,
S
S
NP
VP
NP
VP
NP VP ,
I think
VP
NP
NP
I think
is one good one
all you need is one good one
PP
PP
IN
DT
NNS
IN
NP
of the respondents
of DT NNS
NP
NP
NP
NP
NP
PP
IN NP
IN NP
only two or three other major banks
in
the U.S.
in
the U.S.
only two or three other major banks
S S
</figure>
<figureCaption confidence="0.818868">
Figure 8: An example where our method detected
an annotation error but could not correct it
</figureCaption>
<bodyText confidence="0.995626">
SBAR under the node NP. We found that 22 of the
rule applications were of this type.
Figure 9 depicts a false positive example
where our method mistakenly transformed a cor-
rect syntactic structure. The score of the rule
is very high, since the source elementary tree
(TOP (NP NP VP .)) is less frequent. This
example shows that our method has a risk of
changing correct annotations of less frequent syn-
tactic structures.
</bodyText>
<sectionHeader confidence="0.999259" genericHeader="conclusions">
5 Conclusion
</sectionHeader>
<bodyText confidence="0.999241428571429">
This paper proposes a method of correcting er-
rors in a treebank by using a synchronous tree
substitution grammar. Our method constructs a
pseudo parallel corpus from the treebank and ex-
tracts STSG rules from the parallel corpus. The
experimental result demonstrates that we can ob-
tain error correction rules with high precision.
</bodyText>
<figureCaption confidence="0.83288">
Figure 9: A false positive example where a correct
syntactic structure was mistakenly transformed
</figureCaption>
<bodyText confidence="0.999411">
In future work, we will explore a method of in-
creasing the recall of error correction by construct-
ing a wide-coverage STSG.
</bodyText>
<sectionHeader confidence="0.99658" genericHeader="acknowledgments">
Acknowledgements
</sectionHeader>
<bodyText confidence="0.9727315">
This research is partially supported by the Grant-
in-Aid for Scientific Research (B) (No. 22300051)
of JSPS and by the Kayamori Foundation of Infor-
mational Science Advancement.
</bodyText>
<figure confidence="0.998205153846154">
PP , SBAR
PP , SBAR
NP
CD
when ... when ...
10:33
IN
At
NP
CD
10:33
NP
,
IN
At
,
The average of interbank offered rates based on quotations at
five major banks
The average of interbank offered rates based on quotations at
five major banks
NP VP .
TOP
NP
NP VP .
TOP
S
</figure>
<page confidence="0.991676">
78
</page>
<sectionHeader confidence="0.995197" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.9991554375">
Adriane Boyd, Markus Dickinson, and Detmar Meur-
ers. 2008. On detecting errors in dependency tree-
banks. Research on Language and Computation,
6(2):113–137.
Trevor Cohn and Mirella Lapata. 2009. Sentence com-
pression as tree transduction. Journal of Artificial
Intelligence Research, 34(1):637–674.
Markus Dickinson and Detmar Meurers. 2003a. De-
tecting errors in part-of-speech annotation. In Pro-
ceedings of the 10th Conference of the European
Chapter of the Association for Computational Lin-
guistics, pages 107–114.
Markus Dickinson and Detmar Meurers. 2003b. De-
tecting inconsistencies in treebanks. In Proceedings
of the Second Workshop on Treebanks and Linguistic
Theories.
Markus Dickinson and W. Detmar Meurers. 2005.
Prune diseased branches to get healthy trees! how
to find erroneous local trees in a treebank and why
it matters. In Proceedings of the 4th Workshop on
Treebanks and Linguistic Theories.
Jason Eisner. 2003. Learning non-isomorphic tree
mappings for machine translation. In Proceedings of
the 41st Annual Meeting of the Association for Com-
putational Linguistics, Companion Volume, pages
205–208.
Eleazar Eskin. 2000. Detecting errors within a corpus
using anomaly detection. In Proceedings of the 1st
North American chapter of the Association for Com-
putational Linguistics Conference, pages 148–153.
Mitchell P. Marcus, Beatrice Santorini, and Mary Ann
Marcinkiewicz. 1993. Building a large annotated
corpus of English: the Penn Treebank. Computa-
tional Linguistics, 19(2):310–330.
Masaki Murata, Masao Utiyama, Kiyotaka Uchimoto,
Hitoshi Isahara, and Qing Ma. 2005. Correction of
errors in a verb modality corpus for machine transla-
tion with a machine-learning method. ACM Trans-
actions on Asian Language Information Processing,
4(1):18–37.
Tetsuji Nakagawa and Yuji Matsumoto. 2002. Detect-
ing errors in corpora using support vector machines.
In Proceedings of the 19th Internatinal Conference
on Computatinal Linguistics, pages 709–715.
Tylman Ule and Kiril Simov. 2004. Unexpected pro-
ductions may well be errors. In Proceedings of 4th
International Conference on Language Resources
and Evaluation, pages 1795–1798.
</reference>
<page confidence="0.999029">
79
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.635598">
<title confidence="0.890032">Correcting Errors in a Treebank Based on Synchronous Tree Substitution Grammar</title>
<affiliation confidence="0.9993375">Technology Center, Nagoya University School of Information Science, Nagoya University</affiliation>
<address confidence="0.99489">Furo-cho, Chikusa-ku, Nagoya, 464-8601 Japan</address>
<email confidence="0.986216">yosihide@el.itc.nagoya-u.ac.jp</email>
<abstract confidence="0.994777153846154">This paper proposes a method of correcting annotation errors in a treebank. By using a synchronous grammar, the method transforms parse trees containing annotation errors into the ones whose errors are corrected. The synchronous grammar is automatically induced from the treebank. We report an experimental result of applying our method to the Penn Treebank. The result demonstrates that our method corrects syntactic annotation errors with high precision.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Adriane Boyd</author>
<author>Markus Dickinson</author>
<author>Detmar Meurers</author>
</authors>
<title>On detecting errors in dependency treebanks.</title>
<date>2008</date>
<journal>Research on Language and Computation,</journal>
<volume>6</volume>
<issue>2</issue>
<contexts>
<context position="1370" citStr="Boyd et al., 2008" startWordPosition="194" endWordPosition="197"> high precision. 1 Introduction Annotated corpora play an important role in the fields such as theoretical linguistic researches or the development of NLP systems. However, they often contain annotation errors which are caused by a manual or semi-manual mark-up process. These errors are problematic for corpus-based researches. To solve this problem, several error detection and correction methods have been proposed so far (Eskin, 2000; Nakagawa and Matsumoto, 2002; Dickinson and Meurers, 2003a; Dickinson and Meurers, 2003b; Ule and Simov, 2004; Murata et al., 2005; Dickinson and Meurers, 2005; Boyd et al., 2008). These methods detect corpus positions which are marked up incorrectly, and find the correct labels (e.g. pos-tags) for those positions. However, the methods cannot correct errors in structural annotation. This means that they are insufficient to correct annotation errors in a treebank. This paper proposes a method of correcting errors in structural annotation. Our method is based on a synchronous grammar formalism, called synchronous tree substitution grammar (STSG) (Eisner, 2003), which defines a tree-to-tree transformation. By using an STSG, our method transforms parse trees containing err</context>
<context position="2905" citStr="Boyd et al., 2008" startWordPosition="435" endWordPosition="438">his paper is organized as follows: Section 2 gives an overview of previous work. Section 3 explains our method of correcting errors in a treebank. Section 4 reports an experimental result using the Penn Treebank. 2 Previous Work This section summarizes previous methods for correcting errors in corpus annotation and discusses their problem. Some research addresses the detection of errors in pos-annotation (Nakagawa and Matsumoto, 2002; Dickinson and Meurers, 2003a), syntactic annotation (Dickinson and Meurers, 2003b; Ule and Simov, 2004; Dickinson and Meurers, 2005), and dependency annotation (Boyd et al., 2008). These methods only detect corpus positions where errors occur. It is unclear how we can correct the errors. Several methods can correct annotation errors (Eskin, 2000; Murata et al., 2005). These methods are to correct tag-annotation errors, that is, they simply suggest a candidate tag for each position where an error is detected. The methods cannot correct syntactic annotation errors, because syntactic annotation is structural. There is no approach to correct structural annotation errors. To clarify the problem, let us consider an example. Figure 1 depicts two parse trees annotated accordin</context>
</contexts>
<marker>Boyd, Dickinson, Meurers, 2008</marker>
<rawString>Adriane Boyd, Markus Dickinson, and Detmar Meurers. 2008. On detecting errors in dependency treebanks. Research on Language and Computation, 6(2):113–137.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Trevor Cohn</author>
<author>Mirella Lapata</author>
</authors>
<title>Sentence compression as tree transduction.</title>
<date>2009</date>
<journal>Journal of Artificial Intelligence Research,</journal>
<volume>34</volume>
<issue>1</issue>
<contexts>
<context position="9203" citStr="Cohn and Lapata (2009)" startWordPosition="1615" endWordPosition="1618">) = yield(T) ∧ root(τ) = root(7-′)1 where yield(τ) is the word sequence dominated by T. Let us consider an example. If the parse trees depicted in Figure 1 exist in the treebank T, the pair of partial parse trees depicted in Figure 4 is an element of Para(T). We also obtain this pair in the case where there exists not the parse tree (b) depicted in Figure 1 but the parse tree depicted in Figure 5, which contains the word sequence “, they say ,”. 3.2.2 Inducing a Grammar from a Pseudo Parallel Corpus Our method induces an STSG from the pseudo parallel corpus according to the method proposed by Cohn and Lapata (2009). Cohn and Lapata’s method can induce an STSG which represents a correspondence in a parallel corpus. Their method firstly determine an alignment of nodes between pairs of trees in the parallel corpus and extracts STSG rules according to the alignments. For partial parse trees T and T′, we define a node alignment C(,r, ,r′) as follows: C(T, T) = {(q, q′) q E Node(τ) ∧ q′ E Node(T) ∧ q is not the root of T 76 ∧ 77′ is not the root of T ∧ label(η) = label(�′) ∧ yield(η) = yield(,q′)} (1) (2) PRN PRN S , S NP VP , , S , NP VP NP NP S VP NP VP where Node(τ) is the set of the nodes in T, and yield(</context>
</contexts>
<marker>Cohn, Lapata, 2009</marker>
<rawString>Trevor Cohn and Mirella Lapata. 2009. Sentence compression as tree transduction. Journal of Artificial Intelligence Research, 34(1):637–674.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Markus Dickinson</author>
<author>Detmar Meurers</author>
</authors>
<title>Detecting errors in part-of-speech annotation.</title>
<date>2003</date>
<booktitle>In Proceedings of the 10th Conference of the European Chapter of the Association for Computational Linguistics,</booktitle>
<pages>107--114</pages>
<contexts>
<context position="1248" citStr="Dickinson and Meurers, 2003" startWordPosition="174" endWordPosition="177">sult of applying our method to the Penn Treebank. The result demonstrates that our method corrects syntactic annotation errors with high precision. 1 Introduction Annotated corpora play an important role in the fields such as theoretical linguistic researches or the development of NLP systems. However, they often contain annotation errors which are caused by a manual or semi-manual mark-up process. These errors are problematic for corpus-based researches. To solve this problem, several error detection and correction methods have been proposed so far (Eskin, 2000; Nakagawa and Matsumoto, 2002; Dickinson and Meurers, 2003a; Dickinson and Meurers, 2003b; Ule and Simov, 2004; Murata et al., 2005; Dickinson and Meurers, 2005; Boyd et al., 2008). These methods detect corpus positions which are marked up incorrectly, and find the correct labels (e.g. pos-tags) for those positions. However, the methods cannot correct errors in structural annotation. This means that they are insufficient to correct annotation errors in a treebank. This paper proposes a method of correcting errors in structural annotation. Our method is based on a synchronous grammar formalism, called synchronous tree substitution grammar (STSG) (Eisn</context>
<context position="2753" citStr="Dickinson and Meurers, 2003" startWordPosition="414" endWordPosition="417">tion, we define a score function based on the occurrence frequencies of the rules. An experimental result shows that the selected rules archive high precision. This paper is organized as follows: Section 2 gives an overview of previous work. Section 3 explains our method of correcting errors in a treebank. Section 4 reports an experimental result using the Penn Treebank. 2 Previous Work This section summarizes previous methods for correcting errors in corpus annotation and discusses their problem. Some research addresses the detection of errors in pos-annotation (Nakagawa and Matsumoto, 2002; Dickinson and Meurers, 2003a), syntactic annotation (Dickinson and Meurers, 2003b; Ule and Simov, 2004; Dickinson and Meurers, 2005), and dependency annotation (Boyd et al., 2008). These methods only detect corpus positions where errors occur. It is unclear how we can correct the errors. Several methods can correct annotation errors (Eskin, 2000; Murata et al., 2005). These methods are to correct tag-annotation errors, that is, they simply suggest a candidate tag for each position where an error is detected. The methods cannot correct syntactic annotation errors, because syntactic annotation is structural. There is no a</context>
<context position="6549" citStr="Dickinson and Meurers (2003" startWordPosition="1062" endWordPosition="1065">e a rule (t, t′) s.t. label(q) = root(t) and label(q′) = root(t′) where label(q) is the label of q and root(t) is the root label of t. 3. Substitute t and t′ into q and q′, respectively. Figure 3 shows a derivation process in an STSG. In the rest of the paper, we focus on the rules in which the source elementary tree is not identical to its target, since such identical rules cannot contribute to error correction. 3.2 Inducing an STSG for Error Correction This section describes a method of inducing an STSG for error correction. The basic idea of our method is similar to the method presented by Dickinson and Meurers (2003b). Their method detects errors by seeking word sequences satisfying the following conditions: • The word sequence occurs more than once in the corpus. DT That , PRP they S , NP VP VBP SBAR say -NONE- S 0 -NONE*T* , , MD will VB be VP 11 good AD1P IN for PP NP NNS bonds . DT That , , PRP they NP VP VBP say S SBAR -NONE- S 0 -NONE*T* , , MD will VB be VP 11 good AD1P IN for PP NP NNS bonds . PRN NP, VP, S ,1 ,a 75 (a) S S Figure 4: An example of a partial parse tree pair in a pseudo parallel corpus NP PRN VP . NP PRN VP . S S DT DT That That That , NP VP ,That NP PRN VP . DT S DT S NP PRN VP . </context>
</contexts>
<marker>Dickinson, Meurers, 2003</marker>
<rawString>Markus Dickinson and Detmar Meurers. 2003a. Detecting errors in part-of-speech annotation. In Proceedings of the 10th Conference of the European Chapter of the Association for Computational Linguistics, pages 107–114.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Markus Dickinson</author>
<author>Detmar Meurers</author>
</authors>
<title>Detecting inconsistencies in treebanks.</title>
<date>2003</date>
<booktitle>In Proceedings of the Second Workshop on Treebanks and Linguistic Theories.</booktitle>
<contexts>
<context position="1248" citStr="Dickinson and Meurers, 2003" startWordPosition="174" endWordPosition="177">sult of applying our method to the Penn Treebank. The result demonstrates that our method corrects syntactic annotation errors with high precision. 1 Introduction Annotated corpora play an important role in the fields such as theoretical linguistic researches or the development of NLP systems. However, they often contain annotation errors which are caused by a manual or semi-manual mark-up process. These errors are problematic for corpus-based researches. To solve this problem, several error detection and correction methods have been proposed so far (Eskin, 2000; Nakagawa and Matsumoto, 2002; Dickinson and Meurers, 2003a; Dickinson and Meurers, 2003b; Ule and Simov, 2004; Murata et al., 2005; Dickinson and Meurers, 2005; Boyd et al., 2008). These methods detect corpus positions which are marked up incorrectly, and find the correct labels (e.g. pos-tags) for those positions. However, the methods cannot correct errors in structural annotation. This means that they are insufficient to correct annotation errors in a treebank. This paper proposes a method of correcting errors in structural annotation. Our method is based on a synchronous grammar formalism, called synchronous tree substitution grammar (STSG) (Eisn</context>
<context position="2753" citStr="Dickinson and Meurers, 2003" startWordPosition="414" endWordPosition="417">tion, we define a score function based on the occurrence frequencies of the rules. An experimental result shows that the selected rules archive high precision. This paper is organized as follows: Section 2 gives an overview of previous work. Section 3 explains our method of correcting errors in a treebank. Section 4 reports an experimental result using the Penn Treebank. 2 Previous Work This section summarizes previous methods for correcting errors in corpus annotation and discusses their problem. Some research addresses the detection of errors in pos-annotation (Nakagawa and Matsumoto, 2002; Dickinson and Meurers, 2003a), syntactic annotation (Dickinson and Meurers, 2003b; Ule and Simov, 2004; Dickinson and Meurers, 2005), and dependency annotation (Boyd et al., 2008). These methods only detect corpus positions where errors occur. It is unclear how we can correct the errors. Several methods can correct annotation errors (Eskin, 2000; Murata et al., 2005). These methods are to correct tag-annotation errors, that is, they simply suggest a candidate tag for each position where an error is detected. The methods cannot correct syntactic annotation errors, because syntactic annotation is structural. There is no a</context>
<context position="6549" citStr="Dickinson and Meurers (2003" startWordPosition="1062" endWordPosition="1065">e a rule (t, t′) s.t. label(q) = root(t) and label(q′) = root(t′) where label(q) is the label of q and root(t) is the root label of t. 3. Substitute t and t′ into q and q′, respectively. Figure 3 shows a derivation process in an STSG. In the rest of the paper, we focus on the rules in which the source elementary tree is not identical to its target, since such identical rules cannot contribute to error correction. 3.2 Inducing an STSG for Error Correction This section describes a method of inducing an STSG for error correction. The basic idea of our method is similar to the method presented by Dickinson and Meurers (2003b). Their method detects errors by seeking word sequences satisfying the following conditions: • The word sequence occurs more than once in the corpus. DT That , PRP they S , NP VP VBP SBAR say -NONE- S 0 -NONE*T* , , MD will VB be VP 11 good AD1P IN for PP NP NNS bonds . DT That , , PRP they NP VP VBP say S SBAR -NONE- S 0 -NONE*T* , , MD will VB be VP 11 good AD1P IN for PP NP NNS bonds . PRN NP, VP, S ,1 ,a 75 (a) S S Figure 4: An example of a partial parse tree pair in a pseudo parallel corpus NP PRN VP . NP PRN VP . S S DT DT That That That , NP VP ,That NP PRN VP . DT S DT S NP PRN VP . </context>
</contexts>
<marker>Dickinson, Meurers, 2003</marker>
<rawString>Markus Dickinson and Detmar Meurers. 2003b. Detecting inconsistencies in treebanks. In Proceedings of the Second Workshop on Treebanks and Linguistic Theories.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Markus Dickinson</author>
<author>W Detmar Meurers</author>
</authors>
<title>Prune diseased branches to get healthy trees! how to find erroneous local trees in a treebank and why it matters.</title>
<date>2005</date>
<booktitle>In Proceedings of the 4th Workshop on Treebanks and Linguistic Theories.</booktitle>
<contexts>
<context position="1350" citStr="Dickinson and Meurers, 2005" startWordPosition="190" endWordPosition="193">tactic annotation errors with high precision. 1 Introduction Annotated corpora play an important role in the fields such as theoretical linguistic researches or the development of NLP systems. However, they often contain annotation errors which are caused by a manual or semi-manual mark-up process. These errors are problematic for corpus-based researches. To solve this problem, several error detection and correction methods have been proposed so far (Eskin, 2000; Nakagawa and Matsumoto, 2002; Dickinson and Meurers, 2003a; Dickinson and Meurers, 2003b; Ule and Simov, 2004; Murata et al., 2005; Dickinson and Meurers, 2005; Boyd et al., 2008). These methods detect corpus positions which are marked up incorrectly, and find the correct labels (e.g. pos-tags) for those positions. However, the methods cannot correct errors in structural annotation. This means that they are insufficient to correct annotation errors in a treebank. This paper proposes a method of correcting errors in structural annotation. Our method is based on a synchronous grammar formalism, called synchronous tree substitution grammar (STSG) (Eisner, 2003), which defines a tree-to-tree transformation. By using an STSG, our method transforms parse </context>
<context position="2858" citStr="Dickinson and Meurers, 2005" startWordPosition="428" endWordPosition="431">t shows that the selected rules archive high precision. This paper is organized as follows: Section 2 gives an overview of previous work. Section 3 explains our method of correcting errors in a treebank. Section 4 reports an experimental result using the Penn Treebank. 2 Previous Work This section summarizes previous methods for correcting errors in corpus annotation and discusses their problem. Some research addresses the detection of errors in pos-annotation (Nakagawa and Matsumoto, 2002; Dickinson and Meurers, 2003a), syntactic annotation (Dickinson and Meurers, 2003b; Ule and Simov, 2004; Dickinson and Meurers, 2005), and dependency annotation (Boyd et al., 2008). These methods only detect corpus positions where errors occur. It is unclear how we can correct the errors. Several methods can correct annotation errors (Eskin, 2000; Murata et al., 2005). These methods are to correct tag-annotation errors, that is, they simply suggest a candidate tag for each position where an error is detected. The methods cannot correct syntactic annotation errors, because syntactic annotation is structural. There is no approach to correct structural annotation errors. To clarify the problem, let us consider an example. Figu</context>
</contexts>
<marker>Dickinson, Meurers, 2005</marker>
<rawString>Markus Dickinson and W. Detmar Meurers. 2005. Prune diseased branches to get healthy trees! how to find erroneous local trees in a treebank and why it matters. In Proceedings of the 4th Workshop on Treebanks and Linguistic Theories.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jason Eisner</author>
</authors>
<title>Learning non-isomorphic tree mappings for machine translation.</title>
<date>2003</date>
<booktitle>In Proceedings of the 41st Annual Meeting of the Association for Computational Linguistics, Companion Volume,</booktitle>
<pages>205--208</pages>
<contexts>
<context position="1857" citStr="Eisner, 2003" startWordPosition="271" endWordPosition="273">2003a; Dickinson and Meurers, 2003b; Ule and Simov, 2004; Murata et al., 2005; Dickinson and Meurers, 2005; Boyd et al., 2008). These methods detect corpus positions which are marked up incorrectly, and find the correct labels (e.g. pos-tags) for those positions. However, the methods cannot correct errors in structural annotation. This means that they are insufficient to correct annotation errors in a treebank. This paper proposes a method of correcting errors in structural annotation. Our method is based on a synchronous grammar formalism, called synchronous tree substitution grammar (STSG) (Eisner, 2003), which defines a tree-to-tree transformation. By using an STSG, our method transforms parse trees containing errors into the ones whose errors are corrected. The grammar is automatically induced from the treebank. To select STSG rules which are useful for error correction, we define a score function based on the occurrence frequencies of the rules. An experimental result shows that the selected rules archive high precision. This paper is organized as follows: Section 2 gives an overview of previous work. Section 3 explains our method of correcting errors in a treebank. Section 4 reports an ex</context>
<context position="4480" citStr="Eisner, 2003" startWordPosition="700" endWordPosition="701">s errors and the parse tree (b) is the corrected version. In the parse tree (a), the positions of the two subtrees (, ,) are erroneous. To correct the errors, we need to move the subtrees to the positions which are directly dominated by the node PRN. This example demonstrates that we need a framework of transforming tree structures to correct structural annotation errors. 3 Correcting Errors by Using Synchronous Grammar To solve the problem described in Section 2, this section proposes a method of correcting structural annotation errors by using a synchronous tree substitution grammar (STSG) (Eisner, 2003). An STSG defines a tree-to-tree transformation. Our method induces an STSG which transforms parse trees containing errors into the ones whose errors are corrected. 3.1 Synchronous Tree Substitution Grammar First of all, we describe the STSG formalism. An STSG defines a set of tree pairs. An STSG can be treated as a tree transducer which takes a tree as input and produces a tree as output. Each grammar rule consists of the following elements: • a pair of trees called elementary trees source target PRN S ,1 NP, VP, ,a Figure 2: An example of an STSG rule • a one-to-one alignment between nodes i</context>
</contexts>
<marker>Eisner, 2003</marker>
<rawString>Jason Eisner. 2003. Learning non-isomorphic tree mappings for machine translation. In Proceedings of the 41st Annual Meeting of the Association for Computational Linguistics, Companion Volume, pages 205–208.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Eleazar Eskin</author>
</authors>
<title>Detecting errors within a corpus using anomaly detection.</title>
<date>2000</date>
<booktitle>In Proceedings of the 1st North American chapter of the Association for Computational Linguistics Conference,</booktitle>
<pages>148--153</pages>
<contexts>
<context position="1189" citStr="Eskin, 2000" startWordPosition="168" endWordPosition="169"> the treebank. We report an experimental result of applying our method to the Penn Treebank. The result demonstrates that our method corrects syntactic annotation errors with high precision. 1 Introduction Annotated corpora play an important role in the fields such as theoretical linguistic researches or the development of NLP systems. However, they often contain annotation errors which are caused by a manual or semi-manual mark-up process. These errors are problematic for corpus-based researches. To solve this problem, several error detection and correction methods have been proposed so far (Eskin, 2000; Nakagawa and Matsumoto, 2002; Dickinson and Meurers, 2003a; Dickinson and Meurers, 2003b; Ule and Simov, 2004; Murata et al., 2005; Dickinson and Meurers, 2005; Boyd et al., 2008). These methods detect corpus positions which are marked up incorrectly, and find the correct labels (e.g. pos-tags) for those positions. However, the methods cannot correct errors in structural annotation. This means that they are insufficient to correct annotation errors in a treebank. This paper proposes a method of correcting errors in structural annotation. Our method is based on a synchronous grammar formalism</context>
<context position="3073" citStr="Eskin, 2000" startWordPosition="463" endWordPosition="464">ental result using the Penn Treebank. 2 Previous Work This section summarizes previous methods for correcting errors in corpus annotation and discusses their problem. Some research addresses the detection of errors in pos-annotation (Nakagawa and Matsumoto, 2002; Dickinson and Meurers, 2003a), syntactic annotation (Dickinson and Meurers, 2003b; Ule and Simov, 2004; Dickinson and Meurers, 2005), and dependency annotation (Boyd et al., 2008). These methods only detect corpus positions where errors occur. It is unclear how we can correct the errors. Several methods can correct annotation errors (Eskin, 2000; Murata et al., 2005). These methods are to correct tag-annotation errors, that is, they simply suggest a candidate tag for each position where an error is detected. The methods cannot correct syntactic annotation errors, because syntactic annotation is structural. There is no approach to correct structural annotation errors. To clarify the problem, let us consider an example. Figure 1 depicts two parse trees annotated according to the Penn Treebank annotation 1. The 10 and *T* are null elements. 74 Proceedings of the ACL 2010 Conference Short Papers, pages 74–79, Uppsala, Sweden, 11-16 July </context>
</contexts>
<marker>Eskin, 2000</marker>
<rawString>Eleazar Eskin. 2000. Detecting errors within a corpus using anomaly detection. In Proceedings of the 1st North American chapter of the Association for Computational Linguistics Conference, pages 148–153.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mitchell P Marcus</author>
<author>Beatrice Santorini</author>
<author>Mary Ann Marcinkiewicz</author>
</authors>
<title>Building a large annotated corpus of English: the Penn Treebank. Computational Linguistics,</title>
<date>1993</date>
<contexts>
<context position="11352" citStr="Marcus et al., 1993" startWordPosition="2015" endWordPosition="2018">where f(�) is the occurrence frequency in the treebank. The score function ranges from 0 to 1. We assume that the occurrence frequency of an elementary tree matching incorrect parse trees is very low. According to this assumption, the score function 5core((t, t′)) is high when the source elementary tree t matches incorrect parse trees and the target elementary tree t′ matches correct parse trees. Therefore, STSG rules with high scores are regarded to be useful for error correction. 4 An Experiment To evaluate the effectiveness of our method, we conducted an experiment using the Penn Treebank (Marcus et al., 1993). We used 49208 sentences in Wall Street Journal sections. We induced STSG rules by applying our method to the corpus. We obtained 8776 rules. We Figure 6: Examples of error correction rules induced from the Penn Treebank measured the precision of the rules. The precision is defined as follows: precision = # of the positions where an error is corrected # of the positions to which some rule is applied We manually checked whether each rule application corrected an error, because the corrected treebank does not exist2. Furthermore, we only evaluated the first 100 rules which are ordered by the sc</context>
</contexts>
<marker>Marcus, Santorini, Marcinkiewicz, 1993</marker>
<rawString>Mitchell P. Marcus, Beatrice Santorini, and Mary Ann Marcinkiewicz. 1993. Building a large annotated corpus of English: the Penn Treebank. Computational Linguistics, 19(2):310–330.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Masaki Murata</author>
<author>Masao Utiyama</author>
<author>Kiyotaka Uchimoto</author>
<author>Hitoshi Isahara</author>
<author>Qing Ma</author>
</authors>
<title>Correction of errors in a verb modality corpus for machine translation with a machine-learning method.</title>
<date>2005</date>
<journal>ACM Transactions on Asian Language Information Processing,</journal>
<volume>4</volume>
<issue>1</issue>
<contexts>
<context position="1321" citStr="Murata et al., 2005" startWordPosition="186" endWordPosition="189">r method corrects syntactic annotation errors with high precision. 1 Introduction Annotated corpora play an important role in the fields such as theoretical linguistic researches or the development of NLP systems. However, they often contain annotation errors which are caused by a manual or semi-manual mark-up process. These errors are problematic for corpus-based researches. To solve this problem, several error detection and correction methods have been proposed so far (Eskin, 2000; Nakagawa and Matsumoto, 2002; Dickinson and Meurers, 2003a; Dickinson and Meurers, 2003b; Ule and Simov, 2004; Murata et al., 2005; Dickinson and Meurers, 2005; Boyd et al., 2008). These methods detect corpus positions which are marked up incorrectly, and find the correct labels (e.g. pos-tags) for those positions. However, the methods cannot correct errors in structural annotation. This means that they are insufficient to correct annotation errors in a treebank. This paper proposes a method of correcting errors in structural annotation. Our method is based on a synchronous grammar formalism, called synchronous tree substitution grammar (STSG) (Eisner, 2003), which defines a tree-to-tree transformation. By using an STSG,</context>
<context position="3095" citStr="Murata et al., 2005" startWordPosition="465" endWordPosition="468">using the Penn Treebank. 2 Previous Work This section summarizes previous methods for correcting errors in corpus annotation and discusses their problem. Some research addresses the detection of errors in pos-annotation (Nakagawa and Matsumoto, 2002; Dickinson and Meurers, 2003a), syntactic annotation (Dickinson and Meurers, 2003b; Ule and Simov, 2004; Dickinson and Meurers, 2005), and dependency annotation (Boyd et al., 2008). These methods only detect corpus positions where errors occur. It is unclear how we can correct the errors. Several methods can correct annotation errors (Eskin, 2000; Murata et al., 2005). These methods are to correct tag-annotation errors, that is, they simply suggest a candidate tag for each position where an error is detected. The methods cannot correct syntactic annotation errors, because syntactic annotation is structural. There is no approach to correct structural annotation errors. To clarify the problem, let us consider an example. Figure 1 depicts two parse trees annotated according to the Penn Treebank annotation 1. The 10 and *T* are null elements. 74 Proceedings of the ACL 2010 Conference Short Papers, pages 74–79, Uppsala, Sweden, 11-16 July 2010. c�2010 Associati</context>
</contexts>
<marker>Murata, Utiyama, Uchimoto, Isahara, Ma, 2005</marker>
<rawString>Masaki Murata, Masao Utiyama, Kiyotaka Uchimoto, Hitoshi Isahara, and Qing Ma. 2005. Correction of errors in a verb modality corpus for machine translation with a machine-learning method. ACM Transactions on Asian Language Information Processing, 4(1):18–37.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Tetsuji Nakagawa</author>
<author>Yuji Matsumoto</author>
</authors>
<title>Detecting errors in corpora using support vector machines.</title>
<date>2002</date>
<booktitle>In Proceedings of the 19th Internatinal Conference on Computatinal Linguistics,</booktitle>
<pages>709--715</pages>
<contexts>
<context position="1219" citStr="Nakagawa and Matsumoto, 2002" startWordPosition="170" endWordPosition="173">. We report an experimental result of applying our method to the Penn Treebank. The result demonstrates that our method corrects syntactic annotation errors with high precision. 1 Introduction Annotated corpora play an important role in the fields such as theoretical linguistic researches or the development of NLP systems. However, they often contain annotation errors which are caused by a manual or semi-manual mark-up process. These errors are problematic for corpus-based researches. To solve this problem, several error detection and correction methods have been proposed so far (Eskin, 2000; Nakagawa and Matsumoto, 2002; Dickinson and Meurers, 2003a; Dickinson and Meurers, 2003b; Ule and Simov, 2004; Murata et al., 2005; Dickinson and Meurers, 2005; Boyd et al., 2008). These methods detect corpus positions which are marked up incorrectly, and find the correct labels (e.g. pos-tags) for those positions. However, the methods cannot correct errors in structural annotation. This means that they are insufficient to correct annotation errors in a treebank. This paper proposes a method of correcting errors in structural annotation. Our method is based on a synchronous grammar formalism, called synchronous tree subs</context>
<context position="2724" citStr="Nakagawa and Matsumoto, 2002" startWordPosition="410" endWordPosition="413">ch are useful for error correction, we define a score function based on the occurrence frequencies of the rules. An experimental result shows that the selected rules archive high precision. This paper is organized as follows: Section 2 gives an overview of previous work. Section 3 explains our method of correcting errors in a treebank. Section 4 reports an experimental result using the Penn Treebank. 2 Previous Work This section summarizes previous methods for correcting errors in corpus annotation and discusses their problem. Some research addresses the detection of errors in pos-annotation (Nakagawa and Matsumoto, 2002; Dickinson and Meurers, 2003a), syntactic annotation (Dickinson and Meurers, 2003b; Ule and Simov, 2004; Dickinson and Meurers, 2005), and dependency annotation (Boyd et al., 2008). These methods only detect corpus positions where errors occur. It is unclear how we can correct the errors. Several methods can correct annotation errors (Eskin, 2000; Murata et al., 2005). These methods are to correct tag-annotation errors, that is, they simply suggest a candidate tag for each position where an error is detected. The methods cannot correct syntactic annotation errors, because syntactic annotation</context>
</contexts>
<marker>Nakagawa, Matsumoto, 2002</marker>
<rawString>Tetsuji Nakagawa and Yuji Matsumoto. 2002. Detecting errors in corpora using support vector machines. In Proceedings of the 19th Internatinal Conference on Computatinal Linguistics, pages 709–715.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Tylman Ule</author>
<author>Kiril Simov</author>
</authors>
<title>Unexpected productions may well be errors.</title>
<date>2004</date>
<booktitle>In Proceedings of 4th International Conference on Language Resources and Evaluation,</booktitle>
<pages>1795--1798</pages>
<contexts>
<context position="1300" citStr="Ule and Simov, 2004" startWordPosition="182" endWordPosition="185"> demonstrates that our method corrects syntactic annotation errors with high precision. 1 Introduction Annotated corpora play an important role in the fields such as theoretical linguistic researches or the development of NLP systems. However, they often contain annotation errors which are caused by a manual or semi-manual mark-up process. These errors are problematic for corpus-based researches. To solve this problem, several error detection and correction methods have been proposed so far (Eskin, 2000; Nakagawa and Matsumoto, 2002; Dickinson and Meurers, 2003a; Dickinson and Meurers, 2003b; Ule and Simov, 2004; Murata et al., 2005; Dickinson and Meurers, 2005; Boyd et al., 2008). These methods detect corpus positions which are marked up incorrectly, and find the correct labels (e.g. pos-tags) for those positions. However, the methods cannot correct errors in structural annotation. This means that they are insufficient to correct annotation errors in a treebank. This paper proposes a method of correcting errors in structural annotation. Our method is based on a synchronous grammar formalism, called synchronous tree substitution grammar (STSG) (Eisner, 2003), which defines a tree-to-tree transformati</context>
<context position="2828" citStr="Ule and Simov, 2004" startWordPosition="424" endWordPosition="427">An experimental result shows that the selected rules archive high precision. This paper is organized as follows: Section 2 gives an overview of previous work. Section 3 explains our method of correcting errors in a treebank. Section 4 reports an experimental result using the Penn Treebank. 2 Previous Work This section summarizes previous methods for correcting errors in corpus annotation and discusses their problem. Some research addresses the detection of errors in pos-annotation (Nakagawa and Matsumoto, 2002; Dickinson and Meurers, 2003a), syntactic annotation (Dickinson and Meurers, 2003b; Ule and Simov, 2004; Dickinson and Meurers, 2005), and dependency annotation (Boyd et al., 2008). These methods only detect corpus positions where errors occur. It is unclear how we can correct the errors. Several methods can correct annotation errors (Eskin, 2000; Murata et al., 2005). These methods are to correct tag-annotation errors, that is, they simply suggest a candidate tag for each position where an error is detected. The methods cannot correct syntactic annotation errors, because syntactic annotation is structural. There is no approach to correct structural annotation errors. To clarify the problem, le</context>
</contexts>
<marker>Ule, Simov, 2004</marker>
<rawString>Tylman Ule and Kiril Simov. 2004. Unexpected productions may well be errors. In Proceedings of 4th International Conference on Language Resources and Evaluation, pages 1795–1798.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>