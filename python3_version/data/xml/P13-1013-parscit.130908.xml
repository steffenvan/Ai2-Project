<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<title confidence="0.953231">
Chinese Parsing Exploiting Characters
</title>
<note confidence="0.6014458">
Meishan Zhang†, Yue Zhang$, Wanxiang Che†, Ting Liu†
NR NN 呈现 ADJP
†Research Center for Social Computing and Information Retrieval
Harbin Institute of Technology, China
建筑
</note>
<email confidence="0.642259">
{mszhang, car, tliu}@ir.hit.edu.cn
</email>
<affiliation confidence="0.990981">
$Singapore University of Technology and Design
</affiliation>
<email confidence="0.976392">
yue zhang@sutd.edu.sg
</email>
<sectionHeader confidence="0.996844" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999791888888889">
Characters play an important role in the
Chinese language, yet computational pro-
cessing of Chinese has been dominated
by word-based approaches, with leaves in
syntax trees being words. We investigate
Chinese parsing from the character-level,
extending the notion of phrase-structure
trees by annotating internal structures of
words. We demonstrate the importance
of character-level information to Chinese
processing by building a joint segmen-
tation, part-of-speech (POS) tagging and
phrase-structure parsing system that inte-
grates character-structure features. Our
joint system significantly outperforms a
state-of-the-art word-based baseline on the
standard CTB5 test, and gives the best
published results for Chinese parsing.
</bodyText>
<sectionHeader confidence="0.999516" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999813611111111">
Characters play an important role in the Chinese
language. They act as basic phonetic, morpho-
syntactic and semantic units in a Chinese sentence.
Frequently-occurring character sequences that ex-
press certain meanings can be treated as words,
while most Chinese words have syntactic struc-
tures. For example, Figure 1(b) shows the struc-
ture of the word “建A业 (construction and build-
ing industry)”, where the characters “建 (construc-
tion)” and “A (building)” form a coordination,
and modify the character “业 (industry)”.
However, computational processing of Chinese
is typically based on words. Words are treated
as the atomic units in syntactic parsing, machine
translation, question answering and other NLP
tasks. Manually annotated corpora, such as the
Chinese Treebank (CTB) (Xue et al., 2005), usu-
ally have words as the basic syntactic elements
</bodyText>
<figure confidence="0.896927153846154">
∗Email correspondence.
IP
Vi W@
(a) CTB-style word-based syntax tree for “中国 (China) 建
A业 (architecture industry) 呈现 (show) 新 (new) 4局
(pattern)”.
IP
(b) character-level syntax tree with hierarchal word structures
IP
for “中 (middle) 国 (nation) 建 (construction) A (building)
业 (industry) 呈 (present) 现 (show) 新 (new) 4 (style) 局
P VP
(situation)”.
</figure>
<figureCaption confidence="0.999704">
Figure 1: Word-based and character-level phrase-
</figureCaption>
<equation confidence="0.3440785">
VV
NADJPNP
</equation>
<bodyText confidence="0.978887666666667">
structure trees for the sentence “中国建A业呈现
4A (China’sNarchitecture industrytshows new
patterns)”, where “l”, “r”, “c” denote the direc-
</bodyText>
<equation confidence="0.825501">
NNNN�ANN
N
</equation>
<bodyText confidence="0.962502444444445">
tions of head characters (see section 2).
�
(Figure 1(a)). This form of annotation does not
give character-level syntactic structures for words,
a source of linguistic information that is more fun-
damental and less sparse than atomic words.
In this paper, we investigate Chinese syn-
tactic parsing with character-level information
by extending the notation of phrase-structure
</bodyText>
<figure confidence="0.999544302325582">
NP VP
VV
NP NP
NP
ADJP
NP
NR
NN
�A
JJ NN
it��
IPM
VP
NP
NP NP VV-t NP
VV-c
ADJP NP
呈
现
JJ-b
NN-c
新
NN-b
NN-i
NR-b NR-i
中
NR-t
NR-r
国
NN-b
建
NN-c
NN-t
NN-r
NN-i
筑
NN-i
业
格 局
VV-i
VV-b
NN-t
JJ-t
</figure>
<page confidence="0.975595">
125
</page>
<note confidence="0.913311">
Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics, pages 125–134,
Sofia, Bulgaria, August 4-9 2013. c�2013 Association for Computational Linguistics
</note>
<bodyText confidence="0.999707647058823">
(constituent) trees, adding recursive structures of
characters for words. We manually annotate the
structures of 37,382 words, which cover the entire
CTB5. Using these annotations, we transform
CTB-style constituent trees into character-level
trees (Figure 1(b)). Our word structure corpus,
together with a set of tools to transform CTB-style
trees into character-level trees, is released at
https://github.com/zhangmeishan/wordstructures.
Our annotation work is in line with the work of
Vadas and Curran (2007) and Li (2011), which
provide extended annotations of Penn Treebank
(PTB) noun phrases and CTB words (on the
morphological level), respectively.
We build a character-based Chinese parsing
model to parse the character-level syntax trees.
Given an input Chinese sentence, our parser pro-
duces its character-level syntax trees (Figure 1(b)).
With richer information than word-level trees, this
form of parse trees can be useful for all the afore-
mentioned Chinese NLP applications.
With regard to task of parsing itself, an impor-
tant advantage of the character-level syntax trees is
that they allow word segmentation, part-of-speech
(POS) tagging and parsing to be performed jointly,
using an efficient CKY-style or shift-reduce algo-
rithm. Luo (2003) exploited this advantage by
adding flat word structures without manually an-
notation to CTB trees, and building a generative
character-based parser. Compared to a pipeline
system, the advantages of a joint system include
reduction of error propagation, and the integration
of segmentation, POS tagging and syntax features.
With hierarchical structures and head character in-
formation, our annotated words are more informa-
tive than flat word structures, and hence can bring
further improvements to phrase-structure parsing.
To analyze word structures in addition to phrase
structures, our character-based parser naturally
performs joint word segmentation, POS tagging
and parsing jointly. Our model is based on the
discriminative shift-reduce parser of Zhang and
Clark (2009; 2011), which is a state-of-the-art
word-based phrase-structure parser for Chinese.
We extend their shift-reduce framework, adding
more transition actions for word segmentation and
POS tagging, and defining novel features that cap-
ture character information. Even when trained
using character-level syntax trees with flat word
structures, our joint parser outperforms a strong
pipelined baseline that consists of a state-of-the-
</bodyText>
<equation confidence="0.967327647058823">
rNN-r NN-l
bNN-b i NN-i VV-b V VV-i
库 存 考 古
(repository) (saving) 存 (investigate) (ancient)
� ing)
(a)subject-predicate.
sitory)
(eps y (saving)
(
NN-C
NN-b NN-i
nce科olo
y) 技
(science)
ce) (nology)
(technology)
(c) coordination.
</equation>
<figureCaption confidence="0.858285">
Figure 2: Inner word structures of “库存 (reper-
tory)”,“考古 (archaeology)”, “科技 (science and
technology)” and “败类 (degenerate)”.
</figureCaption>
<bodyText confidence="0.9998294375">
art joint segmenter and POS tagger, and our base-
line word-based parser. Our word annotations lead
to further improvements to the joint system, espe-
cially for phrase-structure parsing accuracy.
Our parser work falls in line with recent work
of joint segmentation, POS tagging and parsing
(Hatori et al., 2012; Li and Zhou, 2012; Qian
and Liu, 2012). Compared with related work,
our model gives the best published results for
joint segmentation and POS tagging, as well as
joint phrase-structure parsing on standard CTB5
evaluations. With linear-time complexity, our
parser is highly efficient, processing over 30 sen-
tences per second with a beam size of 16. An
open release of the parser is freely available at
http://sourceforge.net/projects/zpar/, version 0.6.
</bodyText>
<subsectionHeader confidence="0.581378">
2 Word Structures and Syntax Trees
</subsectionHeader>
<bodyText confidence="0.999909857142857">
The Chinese language is a character-based lan-
guage. Unlike alphabetical languages, Chinese
characters convey meanings, and the meaning of
most Chinese words takes roots in their charac-
ter. For example, the word “计算机 (computer)” is
composed of the characters “计 (count)”, “算 (cal-
culate)” and “机 (machine)”. An informal name of
“computer” is “电脑”, which is composed of “电
(electronic)” and “脑 (brain)”.
Chinese words have internal structures (Xue,
2001; Ma et al., 2012). The way characters inter-
act within words can be similar to the way words
interact within phrases. Figure 2 shows the struc-
tures of the four words “库存 (repertory)”, “ 考古
</bodyText>
<figure confidence="0.976817037037037">
estiate)
( e)
(b) verb-object.
(an
NN-r
NN-b NN-i
?k ( A
(bad) (kind)
(d) modifier-noun.
126
NN-c NN NN
NN-r NN-r NN-f NN-f NN-f NN-f
�� NN � NN
(education) (field)
NN-b �NN-i NN-i NN-i M�NN friN
(friend) (plural)
虎
(tiger)
龙
(dragon)
a
(hidden)
notes a special m r fine-grained words. edcato
ark fo
卧
(crouching)
(a) morphological-level word structures, where “f” de-
</figure>
<figureCaption confidence="0.991549">
Figure 3: Character-level word structure of “P虎
</figureCaption>
<equation confidence="0.353187">
VVr VVr
藏龙 (crouching tiger hidden dragon)”.
</equation>
<bodyText confidence="0.914593142857143">
(archaeology)”, “科4A (science and technology)” ercel) (p) (hd) s)
and “败 类 (degenerate)”, which demonstrate
完 four typical syntactic structures of two-character
NN-c
words, including subject-predicate, verb-object,
coordination and modifier-noun structures. Multi-
character words can also have recursive syntac-
</bodyText>
<equation confidence="0.7478465">
NN-b NN-i NNi NN-
Di
tic structures. Figure 3 illustrates the structure
卧 虎 藏 龙
然of the word “P虎藏龙 (crouching tiger hidden
(crching) (tigr) (hiddn) (dragon)
</equation>
<bodyText confidence="0.999449060606061">
o) dragon)”, which is composed of two subwords “P
虎 (crouching tiger)” and “藏龙 (hidden dragon)”,
both having a modifier-noun structure.
The meaning of characters can be a useful
source of information for computational process-
ing of Chinese, and some recent work has started
to exploit this information. Zhang and Clark
(2010) found that the first character in a Chinese
word is a useful indicator of the word’s POS. They
made use of this information to help joint word
segmentation and POS tagging.
Li (2011) studied the morphological structures
of Chinese words, showing that 35% percent of
the words in CTB5 can be treated as having mor-
phemes. Figure 4(a) illustrates the morphological
structures of the words “ 朋A们 (friends)” and
“教育界 (educational world)”, in which the char-
acters “们 (plural)” and “界 (field)” can be treated
as suffix morphemes. They studied the influence
of such morphology to Chinese dependency pars-
ing (Li and Zhou, 2012).
The aforementioned work explores the influ-
ence of particular types of characters to Chinese
processing, yet not the full potentials of complete
word structures. We take one step further in this
line of work, annotating the full syntactic struc-
tures of 37,382 Chinese words in the form of Fig-
ure 2 and Figure 3. Our annotation covers the
entire vocabulary of CTB5. In addition to dif-
ference in coverage (100% vs 35%), our annota-
tion is structurally more informative than that of
Li (2011), as illustrated in Figure 4(b).
Our annotations are binarized recursive word
</bodyText>
<figure confidence="0.973851">
NN-l NN-r
NN-c NN-i NN-c NN-i
NN-b NN-i 们 NN-b NN-i 界
(plural) (field)
朋 友 教 育
(friend) (friend) (teach) (education)
(b) character-level word structures.
</figure>
<figureCaption confidence="0.997741">
Figure 4: Comparison between character-level and
</figureCaption>
<bodyText confidence="0.996750485714286">
Nf NNf NNf NNf
morphological-level word structures.
structures. For each word or subword, we spec-
ify its POS and head direction. We use “l”, “r”
and “c” to indicate the “left”, “right” and “coordi-
nation” head directions, respectively. The “coor-
dination” direction is mostly used in coordination
structures, while a very small number of translit-
eration words, such as “奥巴马 (Obama)” and “洛
杉矶 (Los Angeles)”, have flat structures, and we
use “coordination” for their left binarization. For
leaf characters, we follow previous work on word
segmentation (Xue, 2003; Ng and Low, 2004), and
use “b” and “i” to indicate the beginning and non-
beginning characters of a word, respectively.
The vast majority of words do not have struc-
tural ambiguities. However, the structures of some
words may vary according to different POS. For
example, “制 服” means “dominate” when it is
tagged as a verb, of which the head is the left char-
acter; the same word means “uniform dress” when
tagged as a noun, of which the head is the right
character. Thus the input of the word structure
annotation is a word together with its POS. The
annotation work was conducted by three persons,
with one person annotating the entire corpus, and
the other two checking the annotations.
Using our annotations, we can extend CTB-
style syntax trees (Figure 1(a)) into character-
level trees (Figure 1(b)). In particular, we mark
the original nodes that represent POS tags in CTB-
style trees with “-t”, and insert our word structures
as unary subnodes of the “-t” nodes. For the rest
of the paper, we refer to the “-t” nodes as full-word
nodes, all nodes above full-word nodes as phrase
</bodyText>
<page confidence="0.986866">
127
</page>
<bodyText confidence="0.996712642857143">
nodes, and all nodes below full-word nodes as sub-
word nodes.
Our character-level trees contain additional syn-
tactic information, which are potentially useful to
Chinese processing. For example, the head char-
acters of words can be populated up to phrase-
level nodes, and serve as an additional source of
information that is less sparse than head words. In
this paper, we build a parser that yields character-
level trees from raw character sequences. In addi-
tion, we use this parser to study the effects of our
annotations to character-based statistical Chinese
parsing, showing that they are useful in improving
parsing accuracies.
</bodyText>
<sectionHeader confidence="0.985028" genericHeader="introduction">
3 Character-based Chinese Parsing
</sectionHeader>
<bodyText confidence="0.972536212121212">
To produce character-level trees for Chinese
NLP tasks, we develop a character-based parsing
model, which can jointly perform word segmen-
tation, POS tagging and phrase-structure parsing.
To our knowledge, this is the first work to develop
a transition-based system that jointly performs the
above three tasks. Trained using annotated word
structures, our parser also analyzes the internal
structures of Chinese words.
Our character-based Chinese parsing model is
based on the work of Zhang and Clark (2009),
which is a transition-based model for lexicalized
constituent parsing. They use a beam-search de-
coder so that the transition action sequence can be
globally optimized. The averaged perceptron with
early-update (Collins and Roark, 2004) is used to
train the model parameters. Their transition sys-
tem contains four kinds of actions: (1) SHIFT,
(2) REDUCE-UNARY, (3) REDUCE-BINARY and
(4) TERMINATE. The system can provide bina-
rzied CFG trees in Chomsky Norm Form, and they
present a reversible conversion procedure to map
arbitrary CFG trees into binarized trees.
In this work, we remain consistent with their
work, using the head-finding rules of Zhang and
Clark (2008), and the same binarization algo-
rithm.1 We apply the same beam-search algorithm
for decoding, and employ the averaged perceptron
with early-update to train our model.
We make two extensions to their work to en-
able joint segmentation, POS tagging and phrase-
structure parsing from the character level. First,
we modify the actions of the transition system for
</bodyText>
<footnote confidence="0.9877515">
1We use a left-binarization process for flat word structures
that contain more than two characters.
</footnote>
<figureCaption confidence="0.999862">
Figure 5: A state in a transition-based model.
</figureCaption>
<bodyText confidence="0.9474615">
parsing the inner structures of words. Second, we
extend the feature set for our parsing problem.
</bodyText>
<subsectionHeader confidence="0.999312">
3.1 The Transition System
</subsectionHeader>
<bodyText confidence="0.999967166666667">
In a transition-based system, an input sentence is
processed in a linear left-to-right pass, and the
output is constructed by a state-transition pro-
cess. We learn a model for scoring the transi-
tion Ai from one state STi to the next STi+1. As
shown in Figure 5, a state ST consists of a stack
S and a queue Q, where S = (· · · , S1, S0) con-
tains partially constructed parse trees, and Q =
(Q0, Q1, ··· , Qn−j) = (cj, cj+1, ··· , cn) is the
sequence of input characters that have not been
processed. The candidate transition action A at
each step is defined as follows:
</bodyText>
<listItem confidence="0.988629">
• SHIFT-SEPARATE(t): remove the head
</listItem>
<bodyText confidence="0.905536285714286">
character cj from Q, pushing a subword node
S/
c7
parse tree S0 must correspond to a full-word
or a phrase node, and the character cj is the
first character of the next word. The argu-
ment t denotes the POS of S&apos;.
</bodyText>
<listItem confidence="0.9986285">
• SHIFT-APPEND: remove the head character
cj from Q, pushing a subword node Sr onto
</listItem>
<page confidence="0.653487">
7
</page>
<bodyText confidence="0.871852666666667">
S. cj will eventually be combined with all the
subword nodes on top of S to form a word,
and thus we must have S&apos;.t = S0.t.
</bodyText>
<listItem confidence="0.8452815">
• REDUCE-SUBWORD(d): pop the top two
nodes S0 and S1 off S, pushing a new sub-
word node S�
S1 S onto S. The argument d
denotes the head direction of S&apos;, of which
the value can be “left”, “right” or “coordi-
nation”.3 Both S0 and S1 must be subword
nodes and S&apos;.t = S0.t = S1.t.
</listItem>
<footnote confidence="0.9976492">
2We use this notation for a compact representation of a
tree node, where the numerator represents a father node, and
the denominator represents the children.
3For the head direction “coordination”, we extract the
head character from the left node.
</footnote>
<figure confidence="0.986168133333333">
stack
queue
Q0 Q1
...
S0
S2
S1
S1l S1r
S0l
S0r
...
...
... ...
... ...
2 onto S, assigning S&apos;.t = t. Note that the
</figure>
<page confidence="0.906266">
128
</page>
<table confidence="0.999738833333334">
Category Feature templates When to Apply
Structure S0ntl S0nwl S1ntl S1nwl S2ntl S2nwl S3ntl S3nwl, All
features Q0c Q1c Q2c Q3c Q0c · Q1c Q1c · Q2c Q2c · Q3c,
S0ltwl S0,.twl S0utwl S1ltwl S1,.twl S1utwl,
S0nw · S1nw S0nw · S1nl S0nl · S1nw S0nl · S1nl,
S0nw · Q0c S0nl · Q0c S1nw · Q0c S1nlQ0c,
S0nl · S1nl · S2nl S0nw · S1nl · S2nl S0nl · S1nw · S2nl S0nl · S1nl · S2nw,
S0nw · S1nl · Q0c S0nl · S1nw · Q0c S0nl · S1nl · Q0c,
S0ncl S0nct S0nctl S1ncl S1nct S1nctl,
Sancl Sanct Sanctl Sgncl Sgnct Sgnctl,
S0nc · S1nc S0ncl · S1nl S0nl · S1ncl S0ncl · S1ncl,
S0nc · Q0c S0nl · Q0c S1nc · Q0c S1nl · Q0c,
S0nc · S1nc · Q0c S0nc · S1nc · Q0c · Q1c
start(S0w) · start(S1w) start(S0w) · end(S1w), REDUCE-SUBWORD
indict(S1wS0w) · len(S1wS0w) indict(S1wS0w, S0t) · len(S1wS0w)
String t−1 · t0 t−2 · t−1t0 w−1 · t0 c0 · t0 start(w−1) · t0 c−1 · c0 · t−1 · t0, SHIFT-SEPARATE
features
w−1 w−2 · w−1 w−1, where len(w−1) = 1 end(w−1) · c0, REDUCE-WORD
start(w−1) · len(w−1) end(w−1) · len(w−1) start(w−1) · end(w−1),
w−1 · c0 end(w−2) · w−1 start(w−1) · c0 end(w−2) · end(w−1),
w−1 · len(w−2) w−2 · len(w−1) w−1 · t−1 w−1 · t−2 w−1 · t−1 · c0,
w−1 · t−1 · end(w−2) c−2 · c−1 · c0 · t−1, where len(w−1) = 1 end(w−1) · t−1,
c · t−1 · end(w−1), where c E w−1 and c =� end(w−1)
c0 · t−1 c−1 · c0 start(w−1) · c0t−1 c−1 · c0 · t−1 SHIFT-APPEND
</table>
<tableCaption confidence="0.982265">
Table 1: Feature templates for the character-level parser. The function start(·), end(·) and len(·) denote
</tableCaption>
<listItem confidence="0.7623215">
the first character, the last character and the length of a word, respectively.
• REDUCE-WORD: pop the top node S0 off S,
pushing a full-word node S0
S0 onto S. This re-
</listItem>
<bodyText confidence="0.9204695">
duce action generates a full-word node from
S0, which must be a subword node.
</bodyText>
<listItem confidence="0.904034666666667">
• REDUCE-BINARY(d, l): pop the top two
nodes S0 and S1 off S, pushing a binary
phrase node S0
</listItem>
<bodyText confidence="0.997828666666667">
S1 S0 onto S. The argument l
denotes the constituent label of S&apos;, and the ar-
gument d specifies the lexical head direction
of S&apos;, which can be either “left” or “right”.
Both S0 and S1 must be a full-word node or
a phrase node.
</bodyText>
<listItem confidence="0.9998088">
• REDUCE-UNARY(l): pop the top node S0
off S, pushing a unary phrase node S0
S0 onto
S. l denotes the constituent label of S&apos;.
• TERMINATE: mark parsing complete.
</listItem>
<bodyText confidence="0.99779825">
Compared to set of actions in our baseline
transition-based phrase-structure parser, we have
made three major changes. First, we split the orig-
inal SHIFT action into SHIFT-SEPARATE(t)
and SHIFT-APPEND, which jointly perform the
word segmentation and POS tagging tasks. Sec-
ond, we add an extra REDUCE-SUBWORD(d) op-
eration, which is used for parsing the inner struc-
tures of words. Third, we add REDUCE-WORD,
which applies a unary rule to mark a completed
subword node as a full-word node. The new node
corresponds to a unary “-t” node in Figure 1(b).
</bodyText>
<subsectionHeader confidence="0.981415">
3.2 Features
</subsectionHeader>
<bodyText confidence="0.9999359">
Table 1 shows the feature templates of our model.
The feature set consists of two categories: (1)
structure features, which encode the structural in-
formation of subwords, full-words and phrases.
(2) string features, which encode the information
of neighboring characters and words.
For the structure features, the symbols S0, S1,
S2, S3 represent the top four nodes on the stack;
Q0, Q1, Q2, Q3 denote the first four characters
in the queue; S0l, S0r, S0u represent the left,
right child for a binary branching S0, and the sin-
gle child for a unary branching S0, respectively;
S1l, S1r, S1u represent the left, right child for
a binary branching S1, and the single child for
a unary branching S1, respectively; n represents
the type for a node; it is a binary value that indi-
cates whether the node is a subword node; c, w,
t and l represent the head character, word (or sub-
word), POS tag and constituent label of a node, re-
spectively. The structure features are mostly taken
</bodyText>
<page confidence="0.987821">
129
</page>
<figure confidence="0.976104818181818">
95
90
85
80
75
70
65
64b
16b
4b
1b
</figure>
<bodyText confidence="0.999784269230769">
from the work of Zhang and Clark (2009). The
feature templates in bold are novel, are designed
to encode head character information. In particu-
lar, the indict function denotes whether a word is
in a tag dictionary, which is collected by extract-
ing all multi-character subwords that occur more
than five times in the training corpus.
For string features, c0, c−1 and c−2 represent
the current character and its previous two charac-
ters, respectively; w−1 and w−2 represent the pre-
vious two words to the current character, respec-
tively; t0, t−1 and t−2 represent the POS tags of
the current word and the previous two words, re-
spectively. The string features are used for word
segmentation and POS tagging, and are adapted
from a state-of-the-art joint segmentation and tag-
ging model (Zhang and Clark, 2010).
In summary, our character-based parser con-
tains the word-based features of constituent parser
presented in Zhang and Clark (2009), the word-
based and shallow character-based features of
joint word segmentation and POS tagging pre-
sented in Zhang and Clark (2010), and addition-
ally the deep character-based features that encode
word structure information, which are the first pre-
sented by this paper.
</bodyText>
<sectionHeader confidence="0.999565" genericHeader="background">
4 Experiments
</sectionHeader>
<subsectionHeader confidence="0.995662">
4.1 Setting
</subsectionHeader>
<bodyText confidence="0.999992636363636">
We conduct our experiments on the CTB5 cor-
pus, using the standard split of data, with sections
1–270,400–931 and 1001–1151 for training, sec-
tions 301–325 for system development, and sec-
tions 271–300 for testing. We apply the same pre-
processing step as Harper and Huang (2011), so
that the non-terminal yield unary chains are col-
lapsed to single unary rules.
Since our model can jointly process word seg-
mentation, POS tagging and phrase-structure pars-
ing, we evaluate our model for the three tasks, re-
spectively. For word segmentation and POS tag-
ging, standard metrics of word precision, recall
and F-score are used, where the tagging accuracy
is the joint accuracy of word segmentation and
POS tagging. For phrase-structure parsing, we
use the standard parseval evaluation metrics on
bracketing precision, recall and F-score. As our
constituent trees are based on characters, we fol-
low previous work and redefine the boundary of
a constituent span by its start and end characters.
In addition, we evaluate the performance of word
</bodyText>
<figure confidence="0.987863">
0 10 20 30 40 0 10 20 30 40
(a) Joint segmentation and (b) Joint constituent parsing
POS tagging F-scores. F-scores.
</figure>
<figureCaption confidence="0.78035325">
Figure 6: Accuracies against the training epoch
for joint segmentation and tagging as well as joint
phrase-structure parsing using beam sizes 1, 4, 16
and 64, respectively.
</figureCaption>
<bodyText confidence="0.775814666666667">
structures, using the word precision, recall and F-
score metrics. A word structure is correct only if
the word and its internal structure are both correct.
</bodyText>
<subsectionHeader confidence="0.997435">
4.2 Development Results
</subsectionHeader>
<bodyText confidence="0.999936380952381">
Figure 6 shows the accuracies of our model using
different beam sizes with respect to the training
epoch. The performance of our model increases
as the beam size increases. The amount of in-
creases becomes smaller as the size of the beam
grows larger. Tested using gcc 4.7.2 and Fedora
17 on an Intel Core i5-3470 CPU (3.20GHz), the
decoding speeds are 318.2, 98.0, 30.3 and 7.9 sen-
tences per second with beam size 1, 4, 16 and 64,
respectively. Based on this experiment, we set the
beam size 64 for the rest of our experiments.
The character-level parsing model has the ad-
vantage that deep character information can be ex-
tracted as features for parsing. For example, the
head character of a word is exploited in our model.
We conduct feature ablation experiments to eval-
uate the effectiveness of these features. We find
that the parsing accuracy decreases about 0.6%
when the head character related features (the bold
feature templates in Table 1) are removed, which
demonstrates the usefulness of these features.
</bodyText>
<subsectionHeader confidence="0.999132">
4.3 Final Results
</subsectionHeader>
<bodyText confidence="0.999764333333333">
In this section, we present the final results of our
model, and compare it to two baseline systems, a
pipelined system and a joint system that is trained
with automatically generated flat words structures.
The baseline pipelined system consists of the
joint segmentation and tagging model proposed by
</bodyText>
<figure confidence="0.980447454545455">
90
80
70
60
50
40
30
64b
16b
4b
1b
</figure>
<page confidence="0.97632">
130
</page>
<table confidence="0.999707090909091">
Task P R F
Pipeline Seg 97.35 98.02 97.69
Tag 93.51 94.15 93.83
Parse 81.58 82.95 82.26
Flat word Seg 97.32 98.13 97.73
structures Tag 94.09 94.88 94.48
Parse 83.39 83.84 83.61
Annotated Seg 97.49 98.18 97.84
word structures Tag 94.46 95.14 94.80
Parse 84.42 84.43 84.43
WS 94.02 94.69 94.35
</table>
<tableCaption confidence="0.997183">
Table 2: Final results on test corpus.
</tableCaption>
<bodyText confidence="0.9998066">
Zhang and Clark (2010), and the phrase-structure
parsing model of Zhang and Clark (2009). Both
models give state-of-the-art performances, and are
freely available.4 The model for joint segmen-
tation and POS tagging is trained with a 16-
beam, since it achieves the best performance. The
phrase-structure parsing model is trained with a
64-beam. We train the parsing model using the
automatically generated POS tags by 10-way jack-
knifing, which gives about 1.5% increases in pars-
ing accuracy when tested on automatic segmented
and POS tagged inputs.
The joint system trained with flat word struc-
tures serves to test the effectiveness of our joint
parsing system over the pipelined baseline, since
flat word structures do not contain additional
sources of information over the baseline. It is also
used to test the usefulness of our annotation in im-
proving parsing accuracy.
Table 2 shows the final results of our model
and the two baseline systems on the test data.
We can see that both character-level joint mod-
els outperform the pipelined system; our model
with annotated word structures gives an improve-
ment of 0.97% in tagging accuracy and 2.17% in
phrase-structure parsing accuracy. The results also
demonstrate that the annotated word structures are
highly effective for syntactic parsing, giving an ab-
solute improvement of 0.82% in phrase-structure
parsing accuracy over the joint model with flat
word structures.
Row “WS” in Table 2 shows the accuracy of
hierarchical word-structure recovery of our joint
system. This figure can be useful for high-level ap-
plications that make use of character-level trees by
</bodyText>
<footnote confidence="0.660413">
4http://sourceforge.net/projects/zpar/, version 0.5.
</footnote>
<bodyText confidence="0.998762">
our parser, as it reflects the capability of our parser
in analyzing word structures. In particular, the per-
formance of parsing OOV word structure is an im-
portant metric of our parser. The recall of OOV
word structures is 60.43%, while if we do not con-
sider the influences of segmentation and tagging
errors, counting only the correctly segmented and
tagged words, the recall is 87.96%.
</bodyText>
<subsectionHeader confidence="0.999958">
4.4 Comparison with Previous Work
</subsectionHeader>
<bodyText confidence="0.999805268292683">
In this section, we compare our model to previous
systems on the performance of joint word segmen-
tation and POS tagging, and the performance of
joint phrase-structure parsing.
Table 3 shows the results. Kruengkrai+ ’09
denotes the results of Kruengkrai et al. (2009),
which is a lattice-based joint word segmentation
and POS tagging model; Sun ’11 denotes a sub-
word based stacking model for joint segmenta-
tion and POS tagging (Sun, 2011), which uses a
dictionary of idioms; Wang+ ’11 denotes a semi-
supervised model proposed by Wang et al. (2011),
which additionally uses the Chinese Gigaword
Corpus; Li ’11 denotes a generative model that
can perform word segmentation, POS tagging and
phrase-structure parsing jointly (Li, 2011); Li+
’12 denotes a unified dependency parsing model
that can perform joint word segmentation, POS
tagging and dependency parsing (Li and Zhou,
2012); Li ’11 and Li+ ’12 exploited annotated
morphological-level word structures for Chinese;
Hatori+ ’12 denotes an incremental joint model
for word segmentation, POS tagging and depen-
dency parsing (Hatori et al., 2012); they use exter-
nal dictionary resources including HowNet Word
List and page names from the Chinese Wikipedia;
Qian+ ’12 denotes a joint segmentation, POS tag-
ging and parsing system using a unified frame-
work for decoding, incorporating a word segmen-
tation model, a POS tagging model and a phrase-
structure parsing model together (Qian and Liu,
2012); their word segmentation model is a combi-
nation of character-based model and word-based
model. Our model achieved the best performance
on both joint segmentation and tagging as well as
joint phrase-structure parsing.
Our final performance on constituent parsing is
by far the best that we are aware of for the Chinese
data, and even better than some state-of-the-art
models with gold segmentation. For example, the
un-lexicalized PCFG model of Petrov and Klein
</bodyText>
<page confidence="0.993548">
131
</page>
<table confidence="0.999823636363636">
System Seg Tag Parse
Kruengkrai+ ’09 97.87 93.67 –
Sun ’11 98.17* 94.02* –
Wang+ ’11 98.11* 94.18* –
Li ’11 97.3 93.5 79.7
Li+ ’12 97.50 93.31 –
Hatori+ ’12 98.26* 94.64* –
Qian+ ’12 97.96 93.81 82.85
Ours pipeline 97.69 93.83 82.26
Ours joint flat 97.73 94.48 83.61
Ours joint annotated 97.84 94.80 84.43
</table>
<tableCaption confidence="0.689059">
Table 3: Comparisons of our final model with
state-of-the-art systems, where “*” denotes that
external dictionary or corpus has been used.
</tableCaption>
<bodyText confidence="0.9996543">
(2007) achieves 83.45%5 in parsing accuracy on
the test corpus, and our pipeline constituent pars-
ing model achieves 83.55% with gold segmenta-
tion. They are lower than the performance of our
character-level model, which is 84.43% without
gold segmentation. The main differences between
word-based and character-level parsing models are
that character-level model can exploit character
features. This further demonstrates the effective-
ness of characters in Chinese parsing.
</bodyText>
<sectionHeader confidence="0.999951" genericHeader="related work">
5 Related Work
</sectionHeader>
<bodyText confidence="0.999942947368421">
Recent work on using the internal structure of
words to help Chinese processing gives impor-
tant motivations to our work. Zhao (2009) stud-
ied character-level dependencies for Chinese word
segmentation by formalizing segmentsion task in
a dependency parsing framework. Their results
demonstrate that annotated word dependencies
can be helpful for word segmentation. Li (2011)
pointed out that the word’s internal structure is
very important for Chinese NLP. They annotated
morphological-level word structures, and a unified
generative model was proposed to parse the Chi-
nese morphological and phrase-structures. Li and
Zhou (2012) also exploited the morphological-
level word structures for Chinese dependency
parsing. They proposed a unified transition-based
model to parse the morphological and depen-
dency structures of a Chinese sentence in a unified
framework. The morphological-level word struc-
</bodyText>
<footnote confidence="0.998782">
5We rerun the parser and evaluate it using the publicly-
available code on http://code.google.com/p/berkeleyparser
by ourselves, since we have a preprocessing step for the
CTB5 corpus.
</footnote>
<bodyText confidence="0.999900039215686">
tures concern only prefixes and suffixes, which
cover only 35% of entire words in CTB. Accord-
ing to their results, the final performances of their
model on word segmentation and POS tagging are
below the state-of-the-art joint segmentation and
POS tagging models. Compared to their work,
we consider the character-level word structures
for Chinese parsing, presenting a unified frame-
work for segmentation, POS tagging and phrase-
structure parsing. We can achieve improved seg-
mentation and tagging performance.
Our character-level parsing model is inspired
by the work of Zhang and Clark (2009), which
is a transition-based model with a beam-search
decoder for word-based constituent parsing. Our
work is based on the shift-reduce operations of
their work, while we introduce additional opera-
tions for segmentation and POS tagging. By such
an extension, our model can include all the fea-
tures in their work, together with the features for
segmentation and POS tagging. In addition, we
propose novel features related to word structures
and interactions between word segmentation, POS
tagging and word-based constituent parsing.
Luo (2003) was the first work to introduce the
character-based syntax parsing. They use it as
a joint framework to perform Chinese word seg-
mentation, POS tagging and syntax parsing. They
exploit a generative maximum entropy model for
character-based constituent parsing, and find that
POS information is very useful for Chinese word
segmentation, but high-level syntactic information
seems to have little effect on segmentation. Com-
pared to their work, we use a transition-based dis-
criminative model, which can benefit from large
amounts of flexible features. In addition, in-
stead of using flat structures, we manually anno-
tate hierarchal tree structures of Chinese words
for converting word-based constituent trees into
character-based constituent trees.
Hatori et al. (2012) proposed the first joint work
for the word segmentation, POS tagging and de-
pendency parsing. They used a single transition-
based model to perform the three tasks. Their
work demonstrates that a joint model can improve
the performance of the three tasks, particularly
for POS tagging and dependency parsing. Qian
and Liu (2012) proposed a joint decoder for word
segmentation, POS tagging and word-based con-
stituent parsing, although they trained models for
the three tasks separately. They reported better
</bodyText>
<page confidence="0.993188">
132
</page>
<bodyText confidence="0.9999724">
performances when using a joint decoder. In our
work, we employ a single character-based dis-
criminative model to perform segmentation, POS
tagging and phrase-structure parsing jointly, and
study the influence of annotated word structures.
</bodyText>
<sectionHeader confidence="0.997958" genericHeader="conclusions">
6 Conclusions and Future Work
</sectionHeader>
<bodyText confidence="0.988599714285714">
We studied the internal structures of more than
37,382 Chinese words, analyzing their structures
as the recursive combinations of characters. Using
these word structures, we extended the CTB into
character-level trees, and developed a character-
based parser that builds such trees from raw char-
acter sequences. Our character-based parser per-
forms segmentation, POS tagging and parsing
simultaneously, and significantly outperforms a
pipelined baseline. We make both our annotations
and our parser available online.
In summary, our contributions include:
• We annotated the internal structures of Chi-
nese words, which are potentially useful
to character-based studies of Chinese NLP.
We extend CTB-style constituent trees into
character-level trees using our annotations.
• We developed a character-based parsing
model that can produce our character-level
constituent trees. Our parser jointly performs
word segmentation, POS tagging and syntac-
tic parsing.
• We investigated the effectiveness of our joint
parser over pipelined baseline, and the effec-
tiveness of our annotated word structures in
improving parsing accuracies.
Future work includes investigations of our
parser and annotations on Chinese NLP tasks.
</bodyText>
<sectionHeader confidence="0.998137" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.999522714285714">
This work was supported by National Natural
Science Foundation of China (NSFC) via grant
61133012, the National “863” Major Projects
via grant 2011AA01A207, the National “863”
Leading Technology Research Project via grant
2012AA011102, and SRG ISTD 2012 038 from
Singapore University of Technology and Design.
</bodyText>
<sectionHeader confidence="0.99899" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.998793508474576">
Michael Collins and Brian Roark. 2004. Incremen-
tal parsing with the perceptron algorithm. In Pro-
ceedings of the 42nd Meeting of the Association for
Computational Linguistics (ACL’04), Main Volume,
pages 111–118, Barcelona, Spain, July.
Mary Harper and Zhongqiang Huang. 2011. Chinese
statistical parsing. Handbook of Natural Language
Processing and Machine Translation.
Jun Hatori, Takuya Matsuzaki, Yusuke Miyao, and
Jun’ichi Tsujii. 2012. Incremental joint approach
to word segmentation, pos tagging, and dependency
parsing in chinese. In Proceedings of the 50th An-
nual Meeting of the Association for Computational
Linguistics (Volume 1: Long Papers), pages 1045–
1053, Jeju Island, Korea, July. Association for Com-
putational Linguistics.
Canasai Kruengkrai, Kiyotaka Uchimoto, Jun’ichi
Kazama, Yiou Wang, Kentaro Torisawa, and Hitoshi
Isahara. 2009. An error-driven word-character hy-
brid model for joint chinese word segmentation and
pos tagging. In Proceedings of the Joint Confer-
ence of the 47th Annual Meeting of the ACL and the
4th International Joint Conference on Natural Lan-
guage Processing of the AFNLP, pages 513–521,
Suntec, Singapore, August. Association for Compu-
tational Linguistics.
Zhongguo Li and Guodong Zhou. 2012. Unified de-
pendency parsing of chinese morphological and syn-
tactic structures. In Proceedings of the 2012 Joint
Conference on Empirical Methods in Natural Lan-
guage Processing and Computational Natural Lan-
guage Learning, pages 1445–1454, Jeju Island, Ko-
rea, July. Association for Computational Linguistics.
Zhongguo Li. 2011. Parsing the internal structure of
words: A new paradigm for chinese word segmen-
tation. In Proceedings of the 49th Annual Meeting
of the Association for Computational Linguistics:
Human Language Technologies, pages 1405–1414,
Portland, Oregon, USA, June. Association for Com-
putational Linguistics.
Xiaoqiang Luo. 2003. A maximum entropy Chi-
nese character-based parser. In Michael Collins and
Mark Steedman, editors, Proceedings of the 2003
Conference on Empirical Methods in Natural Lan-
guage Processing, pages 192–199.
Jianqiang Ma, Chunyu Kit, and Dale Gerdemann.
2012. Semi-automatic annotation of chinese word
structure. In Proceedings of the Second CIPS-
SIGHAN Joint Conference on Chinese Language
Processing, pages 9–17, Tianjin, China, December.
Association for Computational Linguistics.
Hwee Tou Ng and Jin Kiat Low. 2004. Chinese part-
of-speech tagging: One-at-a-time or all-at-once?
word-based or character-based? In Dekang Lin and
Dekai Wu, editors, Proceedings of EMNLP 2004,
pages 277–284, Barcelona, Spain, July. Association
for Computational Linguistics.
Slav Petrov and Dan Klein. 2007. Improved infer-
ence for unlexicalized parsing. In Human Language
</reference>
<page confidence="0.989294">
133
</page>
<reference confidence="0.999515424657534">
Technologies 2007: The Conference of the North
American Chapter of the Association for Computa-
tional Linguistics; Proceedings of the Main Confer-
ence, pages 404–411, Rochester, New York, April.
Association for Computational Linguistics.
Xian Qian and Yang Liu. 2012. Joint chinese word
segmentation, pos tagging and parsing. In Pro-
ceedings of the 2012 Joint Conference on Empiri-
cal Methods in Natural Language Processing and
Computational Natural Language Learning, pages
501–511, Jeju Island, Korea, July. Association for
Computational Linguistics.
Weiwei Sun. 2011. A stacked sub-word model for
joint chinese word segmentation and part-of-speech
tagging. In Proceedings of the 49th Annual Meet-
ing of the Association for Computational Linguis-
tics: Human Language Technologies, pages 1385–
1394, Portland, Oregon, USA, June. Association for
Computational Linguistics.
David Vadas and James Curran. 2007. Adding noun
phrase structure to the penn treebank. In Proceed-
ings of the 45th Annual Meeting of the Associa-
tion of Computational Linguistics, pages 240–247,
Prague, Czech Republic, June. Association for Com-
putational Linguistics.
Yiou Wang, Jun’ichi Kazama, Yoshimasa Tsuruoka,
Wenliang Chen, Yujie Zhang, and Kentaro Tori-
sawa. 2011. Improving chinese word segmentation
and pos tagging with semi-supervised methods using
large auto-analyzed data. In Proceedings of 5th In-
ternational Joint Conference on Natural Language
Processing, pages 309–317, Chiang Mai, Thailand,
November. Asian Federation of Natural Language
Processing.
Nianwen Xue, Fei Xia, Fu-Dong Chiou, and Martha
Palmer. 2005. The penn chinese treebank: Phrase
structure annotation of a large corpus. Natural Lan-
guage Engineering, 11(2):207–238.
Nianwen Xue. 2001. Defining and Automatically
Identifying Words in Chinese. Ph.D. thesis, Univer-
sity of Delaware.
Nianwen Xue. 2003. Chinese word segmentation as
character tagging. International Journal of Compu-
tational Linguistics and Chinese Language Process-
ing, 8(1).
Yue Zhang and Stephen Clark. 2008. A tale of two
parsers: Investigating and combining graph-based
and transition-based dependency parsing. In Pro-
ceedings of the 2008 Conference on Empirical Meth-
ods in Natural Language Processing, pages 562–
571, Honolulu, Hawaii, October. Association for
Computational Linguistics.
Yue Zhang and Stephen Clark. 2009. Transition-
based parsing of the chinese treebank using a global
discriminative model. In Proceedings of the 11th
International Conference on Parsing Technologies
(IWPT’09), pages 162–171, Paris, France, October.
Association for Computational Linguistics.
Yue Zhang and Stephen Clark. 2010. A fast decoder
for joint word segmentation and POS-tagging using
a single discriminative model. In Proceedings of the
2010 Conference on Empirical Methods in Natural
Language Processing, pages 843–852, Cambridge,
MA, October. Association for Computational Lin-
guistics.
Yue Zhang and Stephen Clark. 2011. Syntactic pro-
cessing using the generalized perceptron and beam
search. Computational Linguistics, 37(1):105–151.
Hai Zhao. 2009. Character-level dependencies in chi-
nese: Usefulness and learning. In Proceedings of
the 12th Conference of the European Chapter of the
ACL (EACL 2009), pages 879–887, Athens, Greece,
March. Association for Computational Linguistics.
</reference>
<page confidence="0.998631">
134
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.103206">
<title confidence="0.999823">Chinese Parsing Exploiting Characters</title>
<author confidence="0.973336">Yue Ting</author>
<affiliation confidence="0.941751">NN Center for Social Computing and Information Harbin Institute of Technology, China</affiliation>
<email confidence="0.799817">建筑</email>
<affiliation confidence="0.675537">car, University of Technology and Design</affiliation>
<email confidence="0.41402">yuezhang@sutd.edu.sg</email>
<abstract confidence="0.997211368421053">Characters play an important role in the Chinese language, yet computational processing of Chinese has been dominated by word-based approaches, with leaves in syntax trees being words. We investigate Chinese parsing from the character-level, extending the notion of phrase-structure trees by annotating internal structures of words. We demonstrate the importance of character-level information to Chinese processing by building a joint segmentation, part-of-speech (POS) tagging and phrase-structure parsing system that integrates character-structure features. Our joint system significantly outperforms a state-of-the-art word-based baseline on the standard CTB5 test, and gives the best published results for Chinese parsing.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Michael Collins</author>
<author>Brian Roark</author>
</authors>
<title>Incremental parsing with the perceptron algorithm.</title>
<date>2004</date>
<booktitle>In Proceedings of the 42nd Meeting of the Association for Computational Linguistics (ACL’04), Main Volume,</booktitle>
<pages>111--118</pages>
<location>Barcelona, Spain,</location>
<contexts>
<context position="13153" citStr="Collins and Roark, 2004" startWordPosition="2042" endWordPosition="2045">erform word segmentation, POS tagging and phrase-structure parsing. To our knowledge, this is the first work to develop a transition-based system that jointly performs the above three tasks. Trained using annotated word structures, our parser also analyzes the internal structures of Chinese words. Our character-based Chinese parsing model is based on the work of Zhang and Clark (2009), which is a transition-based model for lexicalized constituent parsing. They use a beam-search decoder so that the transition action sequence can be globally optimized. The averaged perceptron with early-update (Collins and Roark, 2004) is used to train the model parameters. Their transition system contains four kinds of actions: (1) SHIFT, (2) REDUCE-UNARY, (3) REDUCE-BINARY and (4) TERMINATE. The system can provide binarzied CFG trees in Chomsky Norm Form, and they present a reversible conversion procedure to map arbitrary CFG trees into binarized trees. In this work, we remain consistent with their work, using the head-finding rules of Zhang and Clark (2008), and the same binarization algorithm.1 We apply the same beam-search algorithm for decoding, and employ the averaged perceptron with early-update to train our model. </context>
</contexts>
<marker>Collins, Roark, 2004</marker>
<rawString>Michael Collins and Brian Roark. 2004. Incremental parsing with the perceptron algorithm. In Proceedings of the 42nd Meeting of the Association for Computational Linguistics (ACL’04), Main Volume, pages 111–118, Barcelona, Spain, July.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mary Harper</author>
<author>Zhongqiang Huang</author>
</authors>
<title>Chinese statistical parsing.</title>
<date>2011</date>
<booktitle>Handbook of Natural Language Processing and Machine Translation.</booktitle>
<contexts>
<context position="21129" citStr="Harper and Huang (2011)" startWordPosition="3492" endWordPosition="3495">onstituent parser presented in Zhang and Clark (2009), the wordbased and shallow character-based features of joint word segmentation and POS tagging presented in Zhang and Clark (2010), and additionally the deep character-based features that encode word structure information, which are the first presented by this paper. 4 Experiments 4.1 Setting We conduct our experiments on the CTB5 corpus, using the standard split of data, with sections 1–270,400–931 and 1001–1151 for training, sections 301–325 for system development, and sections 271–300 for testing. We apply the same preprocessing step as Harper and Huang (2011), so that the non-terminal yield unary chains are collapsed to single unary rules. Since our model can jointly process word segmentation, POS tagging and phrase-structure parsing, we evaluate our model for the three tasks, respectively. For word segmentation and POS tagging, standard metrics of word precision, recall and F-score are used, where the tagging accuracy is the joint accuracy of word segmentation and POS tagging. For phrase-structure parsing, we use the standard parseval evaluation metrics on bracketing precision, recall and F-score. As our constituent trees are based on characters,</context>
</contexts>
<marker>Harper, Huang, 2011</marker>
<rawString>Mary Harper and Zhongqiang Huang. 2011. Chinese statistical parsing. Handbook of Natural Language Processing and Machine Translation.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jun Hatori</author>
<author>Takuya Matsuzaki</author>
<author>Yusuke Miyao</author>
<author>Jun’ichi Tsujii</author>
</authors>
<title>Incremental joint approach to word segmentation, pos tagging, and dependency parsing in chinese.</title>
<date>2012</date>
<booktitle>In Proceedings of the 50th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers),</booktitle>
<pages>1045--1053</pages>
<institution>Jeju Island, Korea, July. Association for Computational Linguistics.</institution>
<contexts>
<context position="6335" citStr="Hatori et al., 2012" startWordPosition="938" endWordPosition="941">古 (repository) (saving) 存 (investigate) (ancient) � ing) (a)subject-predicate. sitory) (eps y (saving) ( NN-C NN-b NN-i nce科olo y) 技 (science) ce) (nology) (technology) (c) coordination. Figure 2: Inner word structures of “库存 (repertory)”,“考古 (archaeology)”, “科技 (science and technology)” and “败类 (degenerate)”. art joint segmenter and POS tagger, and our baseline word-based parser. Our word annotations lead to further improvements to the joint system, especially for phrase-structure parsing accuracy. Our parser work falls in line with recent work of joint segmentation, POS tagging and parsing (Hatori et al., 2012; Li and Zhou, 2012; Qian and Liu, 2012). Compared with related work, our model gives the best published results for joint segmentation and POS tagging, as well as joint phrase-structure parsing on standard CTB5 evaluations. With linear-time complexity, our parser is highly efficient, processing over 30 sentences per second with a beam size of 16. An open release of the parser is freely available at http://sourceforge.net/projects/zpar/, version 0.6. 2 Word Structures and Syntax Trees The Chinese language is a character-based language. Unlike alphabetical languages, Chinese characters convey m</context>
<context position="27239" citStr="Hatori et al., 2012" startWordPosition="4488" endWordPosition="4491">Wang+ ’11 denotes a semisupervised model proposed by Wang et al. (2011), which additionally uses the Chinese Gigaword Corpus; Li ’11 denotes a generative model that can perform word segmentation, POS tagging and phrase-structure parsing jointly (Li, 2011); Li+ ’12 denotes a unified dependency parsing model that can perform joint word segmentation, POS tagging and dependency parsing (Li and Zhou, 2012); Li ’11 and Li+ ’12 exploited annotated morphological-level word structures for Chinese; Hatori+ ’12 denotes an incremental joint model for word segmentation, POS tagging and dependency parsing (Hatori et al., 2012); they use external dictionary resources including HowNet Word List and page names from the Chinese Wikipedia; Qian+ ’12 denotes a joint segmentation, POS tagging and parsing system using a unified framework for decoding, incorporating a word segmentation model, a POS tagging model and a phrasestructure parsing model together (Qian and Liu, 2012); their word segmentation model is a combination of character-based model and word-based model. Our model achieved the best performance on both joint segmentation and tagging as well as joint phrase-structure parsing. Our final performance on constitue</context>
<context position="31964" citStr="Hatori et al. (2012)" startWordPosition="5206" endWordPosition="5209">gging and syntax parsing. They exploit a generative maximum entropy model for character-based constituent parsing, and find that POS information is very useful for Chinese word segmentation, but high-level syntactic information seems to have little effect on segmentation. Compared to their work, we use a transition-based discriminative model, which can benefit from large amounts of flexible features. In addition, instead of using flat structures, we manually annotate hierarchal tree structures of Chinese words for converting word-based constituent trees into character-based constituent trees. Hatori et al. (2012) proposed the first joint work for the word segmentation, POS tagging and dependency parsing. They used a single transitionbased model to perform the three tasks. Their work demonstrates that a joint model can improve the performance of the three tasks, particularly for POS tagging and dependency parsing. Qian and Liu (2012) proposed a joint decoder for word segmentation, POS tagging and word-based constituent parsing, although they trained models for the three tasks separately. They reported better 132 performances when using a joint decoder. In our work, we employ a single character-based di</context>
</contexts>
<marker>Hatori, Matsuzaki, Miyao, Tsujii, 2012</marker>
<rawString>Jun Hatori, Takuya Matsuzaki, Yusuke Miyao, and Jun’ichi Tsujii. 2012. Incremental joint approach to word segmentation, pos tagging, and dependency parsing in chinese. In Proceedings of the 50th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), pages 1045– 1053, Jeju Island, Korea, July. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Canasai Kruengkrai</author>
<author>Kiyotaka Uchimoto</author>
<author>Jun’ichi Kazama</author>
<author>Yiou Wang</author>
<author>Kentaro Torisawa</author>
<author>Hitoshi Isahara</author>
</authors>
<title>An error-driven word-character hybrid model for joint chinese word segmentation and pos tagging.</title>
<date>2009</date>
<booktitle>In Proceedings of the Joint Conference of the 47th Annual Meeting of the ACL and the 4th International Joint Conference on Natural Language Processing of the AFNLP,</booktitle>
<pages>513--521</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Suntec, Singapore,</location>
<contexts>
<context position="26411" citStr="Kruengkrai et al. (2009)" startWordPosition="4359" endWordPosition="4362">yzing word structures. In particular, the performance of parsing OOV word structure is an important metric of our parser. The recall of OOV word structures is 60.43%, while if we do not consider the influences of segmentation and tagging errors, counting only the correctly segmented and tagged words, the recall is 87.96%. 4.4 Comparison with Previous Work In this section, we compare our model to previous systems on the performance of joint word segmentation and POS tagging, and the performance of joint phrase-structure parsing. Table 3 shows the results. Kruengkrai+ ’09 denotes the results of Kruengkrai et al. (2009), which is a lattice-based joint word segmentation and POS tagging model; Sun ’11 denotes a subword based stacking model for joint segmentation and POS tagging (Sun, 2011), which uses a dictionary of idioms; Wang+ ’11 denotes a semisupervised model proposed by Wang et al. (2011), which additionally uses the Chinese Gigaword Corpus; Li ’11 denotes a generative model that can perform word segmentation, POS tagging and phrase-structure parsing jointly (Li, 2011); Li+ ’12 denotes a unified dependency parsing model that can perform joint word segmentation, POS tagging and dependency parsing (Li and</context>
</contexts>
<marker>Kruengkrai, Uchimoto, Kazama, Wang, Torisawa, Isahara, 2009</marker>
<rawString>Canasai Kruengkrai, Kiyotaka Uchimoto, Jun’ichi Kazama, Yiou Wang, Kentaro Torisawa, and Hitoshi Isahara. 2009. An error-driven word-character hybrid model for joint chinese word segmentation and pos tagging. In Proceedings of the Joint Conference of the 47th Annual Meeting of the ACL and the 4th International Joint Conference on Natural Language Processing of the AFNLP, pages 513–521, Suntec, Singapore, August. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Zhongguo Li</author>
<author>Guodong Zhou</author>
</authors>
<title>Unified dependency parsing of chinese morphological and syntactic structures.</title>
<date>2012</date>
<booktitle>In Proceedings of the 2012 Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language Learning,</booktitle>
<pages>1445--1454</pages>
<institution>Jeju Island, Korea, July. Association for Computational Linguistics.</institution>
<contexts>
<context position="6354" citStr="Li and Zhou, 2012" startWordPosition="942" endWordPosition="945">g) 存 (investigate) (ancient) � ing) (a)subject-predicate. sitory) (eps y (saving) ( NN-C NN-b NN-i nce科olo y) 技 (science) ce) (nology) (technology) (c) coordination. Figure 2: Inner word structures of “库存 (repertory)”,“考古 (archaeology)”, “科技 (science and technology)” and “败类 (degenerate)”. art joint segmenter and POS tagger, and our baseline word-based parser. Our word annotations lead to further improvements to the joint system, especially for phrase-structure parsing accuracy. Our parser work falls in line with recent work of joint segmentation, POS tagging and parsing (Hatori et al., 2012; Li and Zhou, 2012; Qian and Liu, 2012). Compared with related work, our model gives the best published results for joint segmentation and POS tagging, as well as joint phrase-structure parsing on standard CTB5 evaluations. With linear-time complexity, our parser is highly efficient, processing over 30 sentences per second with a beam size of 16. An open release of the parser is freely available at http://sourceforge.net/projects/zpar/, version 0.6. 2 Word Structures and Syntax Trees The Chinese language is a character-based language. Unlike alphabetical languages, Chinese characters convey meanings, and the me</context>
<context position="9332" citStr="Li and Zhou, 2012" startWordPosition="1419" endWordPosition="1422">found that the first character in a Chinese word is a useful indicator of the word’s POS. They made use of this information to help joint word segmentation and POS tagging. Li (2011) studied the morphological structures of Chinese words, showing that 35% percent of the words in CTB5 can be treated as having morphemes. Figure 4(a) illustrates the morphological structures of the words “ 朋A们 (friends)” and “教育界 (educational world)”, in which the characters “们 (plural)” and “界 (field)” can be treated as suffix morphemes. They studied the influence of such morphology to Chinese dependency parsing (Li and Zhou, 2012). The aforementioned work explores the influence of particular types of characters to Chinese processing, yet not the full potentials of complete word structures. We take one step further in this line of work, annotating the full syntactic structures of 37,382 Chinese words in the form of Figure 2 and Figure 3. Our annotation covers the entire vocabulary of CTB5. In addition to difference in coverage (100% vs 35%), our annotation is structurally more informative than that of Li (2011), as illustrated in Figure 4(b). Our annotations are binarized recursive word NN-l NN-r NN-c NN-i NN-c NN-i NN-</context>
<context position="27023" citStr="Li and Zhou, 2012" startWordPosition="4456" endWordPosition="4459">(2009), which is a lattice-based joint word segmentation and POS tagging model; Sun ’11 denotes a subword based stacking model for joint segmentation and POS tagging (Sun, 2011), which uses a dictionary of idioms; Wang+ ’11 denotes a semisupervised model proposed by Wang et al. (2011), which additionally uses the Chinese Gigaword Corpus; Li ’11 denotes a generative model that can perform word segmentation, POS tagging and phrase-structure parsing jointly (Li, 2011); Li+ ’12 denotes a unified dependency parsing model that can perform joint word segmentation, POS tagging and dependency parsing (Li and Zhou, 2012); Li ’11 and Li+ ’12 exploited annotated morphological-level word structures for Chinese; Hatori+ ’12 denotes an incremental joint model for word segmentation, POS tagging and dependency parsing (Hatori et al., 2012); they use external dictionary resources including HowNet Word List and page names from the Chinese Wikipedia; Qian+ ’12 denotes a joint segmentation, POS tagging and parsing system using a unified framework for decoding, incorporating a word segmentation model, a POS tagging model and a phrasestructure parsing model together (Qian and Liu, 2012); their word segmentation model is a</context>
<context position="29613" citStr="Li and Zhou (2012)" startWordPosition="4856" endWordPosition="4859">k on using the internal structure of words to help Chinese processing gives important motivations to our work. Zhao (2009) studied character-level dependencies for Chinese word segmentation by formalizing segmentsion task in a dependency parsing framework. Their results demonstrate that annotated word dependencies can be helpful for word segmentation. Li (2011) pointed out that the word’s internal structure is very important for Chinese NLP. They annotated morphological-level word structures, and a unified generative model was proposed to parse the Chinese morphological and phrase-structures. Li and Zhou (2012) also exploited the morphologicallevel word structures for Chinese dependency parsing. They proposed a unified transition-based model to parse the morphological and dependency structures of a Chinese sentence in a unified framework. The morphological-level word struc5We rerun the parser and evaluate it using the publiclyavailable code on http://code.google.com/p/berkeleyparser by ourselves, since we have a preprocessing step for the CTB5 corpus. tures concern only prefixes and suffixes, which cover only 35% of entire words in CTB. According to their results, the final performances of their mod</context>
</contexts>
<marker>Li, Zhou, 2012</marker>
<rawString>Zhongguo Li and Guodong Zhou. 2012. Unified dependency parsing of chinese morphological and syntactic structures. In Proceedings of the 2012 Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language Learning, pages 1445–1454, Jeju Island, Korea, July. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Zhongguo Li</author>
</authors>
<title>Parsing the internal structure of words: A new paradigm for chinese word segmentation.</title>
<date>2011</date>
<booktitle>In Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics: Human Language Technologies,</booktitle>
<pages>1405--1414</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Portland, Oregon, USA,</location>
<contexts>
<context position="3744" citStr="Li (2011)" startWordPosition="559" endWordPosition="560"> Sofia, Bulgaria, August 4-9 2013. c�2013 Association for Computational Linguistics (constituent) trees, adding recursive structures of characters for words. We manually annotate the structures of 37,382 words, which cover the entire CTB5. Using these annotations, we transform CTB-style constituent trees into character-level trees (Figure 1(b)). Our word structure corpus, together with a set of tools to transform CTB-style trees into character-level trees, is released at https://github.com/zhangmeishan/wordstructures. Our annotation work is in line with the work of Vadas and Curran (2007) and Li (2011), which provide extended annotations of Penn Treebank (PTB) noun phrases and CTB words (on the morphological level), respectively. We build a character-based Chinese parsing model to parse the character-level syntax trees. Given an input Chinese sentence, our parser produces its character-level syntax trees (Figure 1(b)). With richer information than word-level trees, this form of parse trees can be useful for all the aforementioned Chinese NLP applications. With regard to task of parsing itself, an important advantage of the character-level syntax trees is that they allow word segmentation, p</context>
<context position="8896" citStr="Li (2011)" startWordPosition="1350" endWordPosition="1351">s the structure 卧 虎 藏 龙 然of the word “P虎藏龙 (crouching tiger hidden (crching) (tigr) (hiddn) (dragon) o) dragon)”, which is composed of two subwords “P 虎 (crouching tiger)” and “藏龙 (hidden dragon)”, both having a modifier-noun structure. The meaning of characters can be a useful source of information for computational processing of Chinese, and some recent work has started to exploit this information. Zhang and Clark (2010) found that the first character in a Chinese word is a useful indicator of the word’s POS. They made use of this information to help joint word segmentation and POS tagging. Li (2011) studied the morphological structures of Chinese words, showing that 35% percent of the words in CTB5 can be treated as having morphemes. Figure 4(a) illustrates the morphological structures of the words “ 朋A们 (friends)” and “教育界 (educational world)”, in which the characters “们 (plural)” and “界 (field)” can be treated as suffix morphemes. They studied the influence of such morphology to Chinese dependency parsing (Li and Zhou, 2012). The aforementioned work explores the influence of particular types of characters to Chinese processing, yet not the full potentials of complete word structures. W</context>
<context position="26874" citStr="Li, 2011" startWordPosition="4435" endWordPosition="4436"> and the performance of joint phrase-structure parsing. Table 3 shows the results. Kruengkrai+ ’09 denotes the results of Kruengkrai et al. (2009), which is a lattice-based joint word segmentation and POS tagging model; Sun ’11 denotes a subword based stacking model for joint segmentation and POS tagging (Sun, 2011), which uses a dictionary of idioms; Wang+ ’11 denotes a semisupervised model proposed by Wang et al. (2011), which additionally uses the Chinese Gigaword Corpus; Li ’11 denotes a generative model that can perform word segmentation, POS tagging and phrase-structure parsing jointly (Li, 2011); Li+ ’12 denotes a unified dependency parsing model that can perform joint word segmentation, POS tagging and dependency parsing (Li and Zhou, 2012); Li ’11 and Li+ ’12 exploited annotated morphological-level word structures for Chinese; Hatori+ ’12 denotes an incremental joint model for word segmentation, POS tagging and dependency parsing (Hatori et al., 2012); they use external dictionary resources including HowNet Word List and page names from the Chinese Wikipedia; Qian+ ’12 denotes a joint segmentation, POS tagging and parsing system using a unified framework for decoding, incorporating</context>
<context position="29358" citStr="Li (2011)" startWordPosition="4821" endWordPosition="4822">ion. The main differences between word-based and character-level parsing models are that character-level model can exploit character features. This further demonstrates the effectiveness of characters in Chinese parsing. 5 Related Work Recent work on using the internal structure of words to help Chinese processing gives important motivations to our work. Zhao (2009) studied character-level dependencies for Chinese word segmentation by formalizing segmentsion task in a dependency parsing framework. Their results demonstrate that annotated word dependencies can be helpful for word segmentation. Li (2011) pointed out that the word’s internal structure is very important for Chinese NLP. They annotated morphological-level word structures, and a unified generative model was proposed to parse the Chinese morphological and phrase-structures. Li and Zhou (2012) also exploited the morphologicallevel word structures for Chinese dependency parsing. They proposed a unified transition-based model to parse the morphological and dependency structures of a Chinese sentence in a unified framework. The morphological-level word struc5We rerun the parser and evaluate it using the publiclyavailable code on http:</context>
</contexts>
<marker>Li, 2011</marker>
<rawString>Zhongguo Li. 2011. Parsing the internal structure of words: A new paradigm for chinese word segmentation. In Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics: Human Language Technologies, pages 1405–1414, Portland, Oregon, USA, June. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Xiaoqiang Luo</author>
</authors>
<title>A maximum entropy Chinese character-based parser.</title>
<date>2003</date>
<booktitle>Proceedings of the 2003 Conference on Empirical Methods in Natural Language Processing,</booktitle>
<pages>192--199</pages>
<editor>In Michael Collins and Mark Steedman, editors,</editor>
<contexts>
<context position="4475" citStr="Luo (2003)" startWordPosition="668" endWordPosition="669">ectively. We build a character-based Chinese parsing model to parse the character-level syntax trees. Given an input Chinese sentence, our parser produces its character-level syntax trees (Figure 1(b)). With richer information than word-level trees, this form of parse trees can be useful for all the aforementioned Chinese NLP applications. With regard to task of parsing itself, an important advantage of the character-level syntax trees is that they allow word segmentation, part-of-speech (POS) tagging and parsing to be performed jointly, using an efficient CKY-style or shift-reduce algorithm. Luo (2003) exploited this advantage by adding flat word structures without manually annotation to CTB trees, and building a generative character-based parser. Compared to a pipeline system, the advantages of a joint system include reduction of error propagation, and the integration of segmentation, POS tagging and syntax features. With hierarchical structures and head character information, our annotated words are more informative than flat word structures, and hence can bring further improvements to phrase-structure parsing. To analyze word structures in addition to phrase structures, our character-bas</context>
<context position="31198" citStr="Luo (2003)" startWordPosition="5094" endWordPosition="5095">vel parsing model is inspired by the work of Zhang and Clark (2009), which is a transition-based model with a beam-search decoder for word-based constituent parsing. Our work is based on the shift-reduce operations of their work, while we introduce additional operations for segmentation and POS tagging. By such an extension, our model can include all the features in their work, together with the features for segmentation and POS tagging. In addition, we propose novel features related to word structures and interactions between word segmentation, POS tagging and word-based constituent parsing. Luo (2003) was the first work to introduce the character-based syntax parsing. They use it as a joint framework to perform Chinese word segmentation, POS tagging and syntax parsing. They exploit a generative maximum entropy model for character-based constituent parsing, and find that POS information is very useful for Chinese word segmentation, but high-level syntactic information seems to have little effect on segmentation. Compared to their work, we use a transition-based discriminative model, which can benefit from large amounts of flexible features. In addition, instead of using flat structures, we </context>
</contexts>
<marker>Luo, 2003</marker>
<rawString>Xiaoqiang Luo. 2003. A maximum entropy Chinese character-based parser. In Michael Collins and Mark Steedman, editors, Proceedings of the 2003 Conference on Empirical Methods in Natural Language Processing, pages 192–199.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jianqiang Ma</author>
<author>Chunyu Kit</author>
<author>Dale Gerdemann</author>
</authors>
<title>Semi-automatic annotation of chinese word structure.</title>
<date>2012</date>
<booktitle>In Proceedings of the Second CIPSSIGHAN Joint Conference on Chinese Language Processing,</booktitle>
<pages>9--17</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Tianjin, China,</location>
<contexts>
<context position="7293" citStr="Ma et al., 2012" startWordPosition="1087" endWordPosition="1090"> of 16. An open release of the parser is freely available at http://sourceforge.net/projects/zpar/, version 0.6. 2 Word Structures and Syntax Trees The Chinese language is a character-based language. Unlike alphabetical languages, Chinese characters convey meanings, and the meaning of most Chinese words takes roots in their character. For example, the word “计算机 (computer)” is composed of the characters “计 (count)”, “算 (calculate)” and “机 (machine)”. An informal name of “computer” is “电脑”, which is composed of “电 (electronic)” and “脑 (brain)”. Chinese words have internal structures (Xue, 2001; Ma et al., 2012). The way characters interact within words can be similar to the way words interact within phrases. Figure 2 shows the structures of the four words “库存 (repertory)”, “ 考古 estiate) ( e) (b) verb-object. (an NN-r NN-b NN-i ?k ( A (bad) (kind) (d) modifier-noun. 126 NN-c NN NN NN-r NN-r NN-f NN-f NN-f NN-f �� NN � NN (education) (field) NN-b �NN-i NN-i NN-i M�NN friN (friend) (plural) 虎 (tiger) 龙 (dragon) a (hidden) notes a special m r fine-grained words. edcato ark fo 卧 (crouching) (a) morphological-level word structures, where “f” deFigure 3: Character-level word structure of “P虎 VVr VVr 藏龙 (cr</context>
</contexts>
<marker>Ma, Kit, Gerdemann, 2012</marker>
<rawString>Jianqiang Ma, Chunyu Kit, and Dale Gerdemann. 2012. Semi-automatic annotation of chinese word structure. In Proceedings of the Second CIPSSIGHAN Joint Conference on Chinese Language Processing, pages 9–17, Tianjin, China, December. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hwee Tou Ng</author>
<author>Jin Kiat Low</author>
</authors>
<title>Chinese partof-speech tagging: One-at-a-time or all-at-once? word-based or character-based?</title>
<date>2004</date>
<booktitle>In Dekang Lin and Dekai Wu, editors, Proceedings of EMNLP 2004,</booktitle>
<pages>277--284</pages>
<publisher>Association for Computational Linguistics.</publisher>
<location>Barcelona, Spain,</location>
<contexts>
<context position="10681" citStr="Ng and Low, 2004" startWordPosition="1639" endWordPosition="1642">omparison between character-level and Nf NNf NNf NNf morphological-level word structures. structures. For each word or subword, we specify its POS and head direction. We use “l”, “r” and “c” to indicate the “left”, “right” and “coordination” head directions, respectively. The “coordination” direction is mostly used in coordination structures, while a very small number of transliteration words, such as “奥巴马 (Obama)” and “洛 杉矶 (Los Angeles)”, have flat structures, and we use “coordination” for their left binarization. For leaf characters, we follow previous work on word segmentation (Xue, 2003; Ng and Low, 2004), and use “b” and “i” to indicate the beginning and nonbeginning characters of a word, respectively. The vast majority of words do not have structural ambiguities. However, the structures of some words may vary according to different POS. For example, “制 服” means “dominate” when it is tagged as a verb, of which the head is the left character; the same word means “uniform dress” when tagged as a noun, of which the head is the right character. Thus the input of the word structure annotation is a word together with its POS. The annotation work was conducted by three persons, with one person annot</context>
</contexts>
<marker>Ng, Low, 2004</marker>
<rawString>Hwee Tou Ng and Jin Kiat Low. 2004. Chinese partof-speech tagging: One-at-a-time or all-at-once? word-based or character-based? In Dekang Lin and Dekai Wu, editors, Proceedings of EMNLP 2004, pages 277–284, Barcelona, Spain, July. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Slav Petrov</author>
<author>Dan Klein</author>
</authors>
<title>Improved inference for unlexicalized parsing. In Human Language Technologies</title>
<date>2007</date>
<booktitle>The Conference of the North American Chapter of the Association for Computational Linguistics; Proceedings of the Main Conference,</booktitle>
<pages>404--411</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Rochester, New York,</location>
<marker>Petrov, Klein, 2007</marker>
<rawString>Slav Petrov and Dan Klein. 2007. Improved inference for unlexicalized parsing. In Human Language Technologies 2007: The Conference of the North American Chapter of the Association for Computational Linguistics; Proceedings of the Main Conference, pages 404–411, Rochester, New York, April. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Xian Qian</author>
<author>Yang Liu</author>
</authors>
<title>Joint chinese word segmentation, pos tagging and parsing.</title>
<date>2012</date>
<booktitle>In Proceedings of the 2012 Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language Learning,</booktitle>
<pages>501--511</pages>
<institution>Jeju Island, Korea, July. Association for Computational Linguistics.</institution>
<contexts>
<context position="6375" citStr="Qian and Liu, 2012" startWordPosition="946" endWordPosition="949">(ancient) � ing) (a)subject-predicate. sitory) (eps y (saving) ( NN-C NN-b NN-i nce科olo y) 技 (science) ce) (nology) (technology) (c) coordination. Figure 2: Inner word structures of “库存 (repertory)”,“考古 (archaeology)”, “科技 (science and technology)” and “败类 (degenerate)”. art joint segmenter and POS tagger, and our baseline word-based parser. Our word annotations lead to further improvements to the joint system, especially for phrase-structure parsing accuracy. Our parser work falls in line with recent work of joint segmentation, POS tagging and parsing (Hatori et al., 2012; Li and Zhou, 2012; Qian and Liu, 2012). Compared with related work, our model gives the best published results for joint segmentation and POS tagging, as well as joint phrase-structure parsing on standard CTB5 evaluations. With linear-time complexity, our parser is highly efficient, processing over 30 sentences per second with a beam size of 16. An open release of the parser is freely available at http://sourceforge.net/projects/zpar/, version 0.6. 2 Word Structures and Syntax Trees The Chinese language is a character-based language. Unlike alphabetical languages, Chinese characters convey meanings, and the meaning of most Chinese</context>
<context position="27587" citStr="Qian and Liu, 2012" startWordPosition="4545" endWordPosition="4548"> POS tagging and dependency parsing (Li and Zhou, 2012); Li ’11 and Li+ ’12 exploited annotated morphological-level word structures for Chinese; Hatori+ ’12 denotes an incremental joint model for word segmentation, POS tagging and dependency parsing (Hatori et al., 2012); they use external dictionary resources including HowNet Word List and page names from the Chinese Wikipedia; Qian+ ’12 denotes a joint segmentation, POS tagging and parsing system using a unified framework for decoding, incorporating a word segmentation model, a POS tagging model and a phrasestructure parsing model together (Qian and Liu, 2012); their word segmentation model is a combination of character-based model and word-based model. Our model achieved the best performance on both joint segmentation and tagging as well as joint phrase-structure parsing. Our final performance on constituent parsing is by far the best that we are aware of for the Chinese data, and even better than some state-of-the-art models with gold segmentation. For example, the un-lexicalized PCFG model of Petrov and Klein 131 System Seg Tag Parse Kruengkrai+ ’09 97.87 93.67 – Sun ’11 98.17* 94.02* – Wang+ ’11 98.11* 94.18* – Li ’11 97.3 93.5 79.7 Li+ ’12 97.</context>
<context position="32290" citStr="Qian and Liu (2012)" startWordPosition="5259" endWordPosition="5262">riminative model, which can benefit from large amounts of flexible features. In addition, instead of using flat structures, we manually annotate hierarchal tree structures of Chinese words for converting word-based constituent trees into character-based constituent trees. Hatori et al. (2012) proposed the first joint work for the word segmentation, POS tagging and dependency parsing. They used a single transitionbased model to perform the three tasks. Their work demonstrates that a joint model can improve the performance of the three tasks, particularly for POS tagging and dependency parsing. Qian and Liu (2012) proposed a joint decoder for word segmentation, POS tagging and word-based constituent parsing, although they trained models for the three tasks separately. They reported better 132 performances when using a joint decoder. In our work, we employ a single character-based discriminative model to perform segmentation, POS tagging and phrase-structure parsing jointly, and study the influence of annotated word structures. 6 Conclusions and Future Work We studied the internal structures of more than 37,382 Chinese words, analyzing their structures as the recursive combinations of characters. Using </context>
</contexts>
<marker>Qian, Liu, 2012</marker>
<rawString>Xian Qian and Yang Liu. 2012. Joint chinese word segmentation, pos tagging and parsing. In Proceedings of the 2012 Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language Learning, pages 501–511, Jeju Island, Korea, July. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Weiwei Sun</author>
</authors>
<title>A stacked sub-word model for joint chinese word segmentation and part-of-speech tagging.</title>
<date>2011</date>
<booktitle>In Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics: Human Language Technologies,</booktitle>
<pages>1385--1394</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Portland, Oregon, USA,</location>
<contexts>
<context position="26582" citStr="Sun, 2011" startWordPosition="4390" endWordPosition="4391"> consider the influences of segmentation and tagging errors, counting only the correctly segmented and tagged words, the recall is 87.96%. 4.4 Comparison with Previous Work In this section, we compare our model to previous systems on the performance of joint word segmentation and POS tagging, and the performance of joint phrase-structure parsing. Table 3 shows the results. Kruengkrai+ ’09 denotes the results of Kruengkrai et al. (2009), which is a lattice-based joint word segmentation and POS tagging model; Sun ’11 denotes a subword based stacking model for joint segmentation and POS tagging (Sun, 2011), which uses a dictionary of idioms; Wang+ ’11 denotes a semisupervised model proposed by Wang et al. (2011), which additionally uses the Chinese Gigaword Corpus; Li ’11 denotes a generative model that can perform word segmentation, POS tagging and phrase-structure parsing jointly (Li, 2011); Li+ ’12 denotes a unified dependency parsing model that can perform joint word segmentation, POS tagging and dependency parsing (Li and Zhou, 2012); Li ’11 and Li+ ’12 exploited annotated morphological-level word structures for Chinese; Hatori+ ’12 denotes an incremental joint model for word segmentation,</context>
</contexts>
<marker>Sun, 2011</marker>
<rawString>Weiwei Sun. 2011. A stacked sub-word model for joint chinese word segmentation and part-of-speech tagging. In Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics: Human Language Technologies, pages 1385– 1394, Portland, Oregon, USA, June. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David Vadas</author>
<author>James Curran</author>
</authors>
<title>Adding noun phrase structure to the penn treebank.</title>
<date>2007</date>
<booktitle>In Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics,</booktitle>
<pages>240--247</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Prague, Czech Republic,</location>
<contexts>
<context position="3730" citStr="Vadas and Curran (2007)" startWordPosition="554" endWordPosition="557"> Linguistics, pages 125–134, Sofia, Bulgaria, August 4-9 2013. c�2013 Association for Computational Linguistics (constituent) trees, adding recursive structures of characters for words. We manually annotate the structures of 37,382 words, which cover the entire CTB5. Using these annotations, we transform CTB-style constituent trees into character-level trees (Figure 1(b)). Our word structure corpus, together with a set of tools to transform CTB-style trees into character-level trees, is released at https://github.com/zhangmeishan/wordstructures. Our annotation work is in line with the work of Vadas and Curran (2007) and Li (2011), which provide extended annotations of Penn Treebank (PTB) noun phrases and CTB words (on the morphological level), respectively. We build a character-based Chinese parsing model to parse the character-level syntax trees. Given an input Chinese sentence, our parser produces its character-level syntax trees (Figure 1(b)). With richer information than word-level trees, this form of parse trees can be useful for all the aforementioned Chinese NLP applications. With regard to task of parsing itself, an important advantage of the character-level syntax trees is that they allow word s</context>
</contexts>
<marker>Vadas, Curran, 2007</marker>
<rawString>David Vadas and James Curran. 2007. Adding noun phrase structure to the penn treebank. In Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics, pages 240–247, Prague, Czech Republic, June. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yiou Wang</author>
<author>Jun’ichi Kazama</author>
<author>Yoshimasa Tsuruoka</author>
<author>Wenliang Chen</author>
<author>Yujie Zhang</author>
<author>Kentaro Torisawa</author>
</authors>
<title>Improving chinese word segmentation and pos tagging with semi-supervised methods using large auto-analyzed data.</title>
<date>2011</date>
<journal>Asian Federation of Natural Language Processing.</journal>
<booktitle>In Proceedings of 5th International Joint Conference on Natural Language Processing,</booktitle>
<pages>309--317</pages>
<location>Chiang Mai, Thailand,</location>
<contexts>
<context position="26690" citStr="Wang et al. (2011)" startWordPosition="4407" endWordPosition="4410">nd tagged words, the recall is 87.96%. 4.4 Comparison with Previous Work In this section, we compare our model to previous systems on the performance of joint word segmentation and POS tagging, and the performance of joint phrase-structure parsing. Table 3 shows the results. Kruengkrai+ ’09 denotes the results of Kruengkrai et al. (2009), which is a lattice-based joint word segmentation and POS tagging model; Sun ’11 denotes a subword based stacking model for joint segmentation and POS tagging (Sun, 2011), which uses a dictionary of idioms; Wang+ ’11 denotes a semisupervised model proposed by Wang et al. (2011), which additionally uses the Chinese Gigaword Corpus; Li ’11 denotes a generative model that can perform word segmentation, POS tagging and phrase-structure parsing jointly (Li, 2011); Li+ ’12 denotes a unified dependency parsing model that can perform joint word segmentation, POS tagging and dependency parsing (Li and Zhou, 2012); Li ’11 and Li+ ’12 exploited annotated morphological-level word structures for Chinese; Hatori+ ’12 denotes an incremental joint model for word segmentation, POS tagging and dependency parsing (Hatori et al., 2012); they use external dictionary resources including </context>
</contexts>
<marker>Wang, Kazama, Tsuruoka, Chen, Zhang, Torisawa, 2011</marker>
<rawString>Yiou Wang, Jun’ichi Kazama, Yoshimasa Tsuruoka, Wenliang Chen, Yujie Zhang, and Kentaro Torisawa. 2011. Improving chinese word segmentation and pos tagging with semi-supervised methods using large auto-analyzed data. In Proceedings of 5th International Joint Conference on Natural Language Processing, pages 309–317, Chiang Mai, Thailand, November. Asian Federation of Natural Language Processing.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nianwen Xue</author>
<author>Fei Xia</author>
<author>Fu-Dong Chiou</author>
<author>Martha Palmer</author>
</authors>
<title>The penn chinese treebank: Phrase structure annotation of a large corpus.</title>
<date>2005</date>
<journal>Natural Language Engineering,</journal>
<volume>11</volume>
<issue>2</issue>
<contexts>
<context position="1857" citStr="Xue et al., 2005" startWordPosition="258" endWordPosition="261">r sequences that express certain meanings can be treated as words, while most Chinese words have syntactic structures. For example, Figure 1(b) shows the structure of the word “建A业 (construction and building industry)”, where the characters “建 (construction)” and “A (building)” form a coordination, and modify the character “业 (industry)”. However, computational processing of Chinese is typically based on words. Words are treated as the atomic units in syntactic parsing, machine translation, question answering and other NLP tasks. Manually annotated corpora, such as the Chinese Treebank (CTB) (Xue et al., 2005), usually have words as the basic syntactic elements ∗Email correspondence. IP Vi W@ (a) CTB-style word-based syntax tree for “中国 (China) 建 A业 (architecture industry) 呈现 (show) 新 (new) 4局 (pattern)”. IP (b) character-level syntax tree with hierarchal word structures IP for “中 (middle) 国 (nation) 建 (construction) A (building) 业 (industry) 呈 (present) 现 (show) 新 (new) 4 (style) 局 P VP (situation)”. Figure 1: Word-based and character-level phraseVV NADJPNP structure trees for the sentence “中国建A业呈现 4A (China’sNarchitecture industrytshows new patterns)”, where “l”, “r”, “c” denote the direcNNNN�ANN</context>
</contexts>
<marker>Xue, Xia, Chiou, Palmer, 2005</marker>
<rawString>Nianwen Xue, Fei Xia, Fu-Dong Chiou, and Martha Palmer. 2005. The penn chinese treebank: Phrase structure annotation of a large corpus. Natural Language Engineering, 11(2):207–238.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nianwen Xue</author>
</authors>
<title>Defining and Automatically Identifying Words in Chinese.</title>
<date>2001</date>
<tech>Ph.D. thesis,</tech>
<institution>University of Delaware.</institution>
<contexts>
<context position="7275" citStr="Xue, 2001" startWordPosition="1085" endWordPosition="1086">a beam size of 16. An open release of the parser is freely available at http://sourceforge.net/projects/zpar/, version 0.6. 2 Word Structures and Syntax Trees The Chinese language is a character-based language. Unlike alphabetical languages, Chinese characters convey meanings, and the meaning of most Chinese words takes roots in their character. For example, the word “计算机 (computer)” is composed of the characters “计 (count)”, “算 (calculate)” and “机 (machine)”. An informal name of “computer” is “电脑”, which is composed of “电 (electronic)” and “脑 (brain)”. Chinese words have internal structures (Xue, 2001; Ma et al., 2012). The way characters interact within words can be similar to the way words interact within phrases. Figure 2 shows the structures of the four words “库存 (repertory)”, “ 考古 estiate) ( e) (b) verb-object. (an NN-r NN-b NN-i ?k ( A (bad) (kind) (d) modifier-noun. 126 NN-c NN NN NN-r NN-r NN-f NN-f NN-f NN-f �� NN � NN (education) (field) NN-b �NN-i NN-i NN-i M�NN friN (friend) (plural) 虎 (tiger) 龙 (dragon) a (hidden) notes a special m r fine-grained words. edcato ark fo 卧 (crouching) (a) morphological-level word structures, where “f” deFigure 3: Character-level word structure of </context>
</contexts>
<marker>Xue, 2001</marker>
<rawString>Nianwen Xue. 2001. Defining and Automatically Identifying Words in Chinese. Ph.D. thesis, University of Delaware.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nianwen Xue</author>
</authors>
<title>Chinese word segmentation as character tagging.</title>
<date>2003</date>
<journal>International Journal of Computational Linguistics and Chinese Language Processing,</journal>
<volume>8</volume>
<issue>1</issue>
<contexts>
<context position="10662" citStr="Xue, 2003" startWordPosition="1637" endWordPosition="1638">Figure 4: Comparison between character-level and Nf NNf NNf NNf morphological-level word structures. structures. For each word or subword, we specify its POS and head direction. We use “l”, “r” and “c” to indicate the “left”, “right” and “coordination” head directions, respectively. The “coordination” direction is mostly used in coordination structures, while a very small number of transliteration words, such as “奥巴马 (Obama)” and “洛 杉矶 (Los Angeles)”, have flat structures, and we use “coordination” for their left binarization. For leaf characters, we follow previous work on word segmentation (Xue, 2003; Ng and Low, 2004), and use “b” and “i” to indicate the beginning and nonbeginning characters of a word, respectively. The vast majority of words do not have structural ambiguities. However, the structures of some words may vary according to different POS. For example, “制 服” means “dominate” when it is tagged as a verb, of which the head is the left character; the same word means “uniform dress” when tagged as a noun, of which the head is the right character. Thus the input of the word structure annotation is a word together with its POS. The annotation work was conducted by three persons, wi</context>
</contexts>
<marker>Xue, 2003</marker>
<rawString>Nianwen Xue. 2003. Chinese word segmentation as character tagging. International Journal of Computational Linguistics and Chinese Language Processing, 8(1).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yue Zhang</author>
<author>Stephen Clark</author>
</authors>
<title>A tale of two parsers: Investigating and combining graph-based and transition-based dependency parsing.</title>
<date>2008</date>
<booktitle>In Proceedings of the 2008 Conference on Empirical Methods in Natural Language Processing,</booktitle>
<pages>562--571</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Honolulu, Hawaii,</location>
<contexts>
<context position="13586" citStr="Zhang and Clark (2008)" startWordPosition="2112" endWordPosition="2115">zed constituent parsing. They use a beam-search decoder so that the transition action sequence can be globally optimized. The averaged perceptron with early-update (Collins and Roark, 2004) is used to train the model parameters. Their transition system contains four kinds of actions: (1) SHIFT, (2) REDUCE-UNARY, (3) REDUCE-BINARY and (4) TERMINATE. The system can provide binarzied CFG trees in Chomsky Norm Form, and they present a reversible conversion procedure to map arbitrary CFG trees into binarized trees. In this work, we remain consistent with their work, using the head-finding rules of Zhang and Clark (2008), and the same binarization algorithm.1 We apply the same beam-search algorithm for decoding, and employ the averaged perceptron with early-update to train our model. We make two extensions to their work to enable joint segmentation, POS tagging and phrasestructure parsing from the character level. First, we modify the actions of the transition system for 1We use a left-binarization process for flat word structures that contain more than two characters. Figure 5: A state in a transition-based model. parsing the inner structures of words. Second, we extend the feature set for our parsing proble</context>
</contexts>
<marker>Zhang, Clark, 2008</marker>
<rawString>Yue Zhang and Stephen Clark. 2008. A tale of two parsers: Investigating and combining graph-based and transition-based dependency parsing. In Proceedings of the 2008 Conference on Empirical Methods in Natural Language Processing, pages 562– 571, Honolulu, Hawaii, October. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yue Zhang</author>
<author>Stephen Clark</author>
</authors>
<title>Transitionbased parsing of the chinese treebank using a global discriminative model.</title>
<date>2009</date>
<booktitle>In Proceedings of the 11th International Conference on Parsing Technologies (IWPT’09),</booktitle>
<pages>162--171</pages>
<location>Paris, France,</location>
<contexts>
<context position="5247" citStr="Zhang and Clark (2009" startWordPosition="777" endWordPosition="780">mpared to a pipeline system, the advantages of a joint system include reduction of error propagation, and the integration of segmentation, POS tagging and syntax features. With hierarchical structures and head character information, our annotated words are more informative than flat word structures, and hence can bring further improvements to phrase-structure parsing. To analyze word structures in addition to phrase structures, our character-based parser naturally performs joint word segmentation, POS tagging and parsing jointly. Our model is based on the discriminative shift-reduce parser of Zhang and Clark (2009; 2011), which is a state-of-the-art word-based phrase-structure parser for Chinese. We extend their shift-reduce framework, adding more transition actions for word segmentation and POS tagging, and defining novel features that capture character information. Even when trained using character-level syntax trees with flat word structures, our joint parser outperforms a strong pipelined baseline that consists of a state-of-therNN-r NN-l bNN-b i NN-i VV-b V VV-i 库 存 考 古 (repository) (saving) 存 (investigate) (ancient) � ing) (a)subject-predicate. sitory) (eps y (saving) ( NN-C NN-b NN-i nce科olo y) </context>
<context position="12916" citStr="Zhang and Clark (2009)" startWordPosition="2008" endWordPosition="2011">al Chinese parsing, showing that they are useful in improving parsing accuracies. 3 Character-based Chinese Parsing To produce character-level trees for Chinese NLP tasks, we develop a character-based parsing model, which can jointly perform word segmentation, POS tagging and phrase-structure parsing. To our knowledge, this is the first work to develop a transition-based system that jointly performs the above three tasks. Trained using annotated word structures, our parser also analyzes the internal structures of Chinese words. Our character-based Chinese parsing model is based on the work of Zhang and Clark (2009), which is a transition-based model for lexicalized constituent parsing. They use a beam-search decoder so that the transition action sequence can be globally optimized. The averaged perceptron with early-update (Collins and Roark, 2004) is used to train the model parameters. Their transition system contains four kinds of actions: (1) SHIFT, (2) REDUCE-UNARY, (3) REDUCE-BINARY and (4) TERMINATE. The system can provide binarzied CFG trees in Chomsky Norm Form, and they present a reversible conversion procedure to map arbitrary CFG trees into binarized trees. In this work, we remain consistent w</context>
<context position="19664" citStr="Zhang and Clark (2009)" startWordPosition="3254" endWordPosition="3257"> the queue; S0l, S0r, S0u represent the left, right child for a binary branching S0, and the single child for a unary branching S0, respectively; S1l, S1r, S1u represent the left, right child for a binary branching S1, and the single child for a unary branching S1, respectively; n represents the type for a node; it is a binary value that indicates whether the node is a subword node; c, w, t and l represent the head character, word (or subword), POS tag and constituent label of a node, respectively. The structure features are mostly taken 129 95 90 85 80 75 70 65 64b 16b 4b 1b from the work of Zhang and Clark (2009). The feature templates in bold are novel, are designed to encode head character information. In particular, the indict function denotes whether a word is in a tag dictionary, which is collected by extracting all multi-character subwords that occur more than five times in the training corpus. For string features, c0, c−1 and c−2 represent the current character and its previous two characters, respectively; w−1 and w−2 represent the previous two words to the current character, respectively; t0, t−1 and t−2 represent the POS tags of the current word and the previous two words, respectively. The </context>
<context position="24144" citStr="Zhang and Clark (2009)" startWordPosition="3999" endWordPosition="4002"> that is trained with automatically generated flat words structures. The baseline pipelined system consists of the joint segmentation and tagging model proposed by 90 80 70 60 50 40 30 64b 16b 4b 1b 130 Task P R F Pipeline Seg 97.35 98.02 97.69 Tag 93.51 94.15 93.83 Parse 81.58 82.95 82.26 Flat word Seg 97.32 98.13 97.73 structures Tag 94.09 94.88 94.48 Parse 83.39 83.84 83.61 Annotated Seg 97.49 98.18 97.84 word structures Tag 94.46 95.14 94.80 Parse 84.42 84.43 84.43 WS 94.02 94.69 94.35 Table 2: Final results on test corpus. Zhang and Clark (2010), and the phrase-structure parsing model of Zhang and Clark (2009). Both models give state-of-the-art performances, and are freely available.4 The model for joint segmentation and POS tagging is trained with a 16- beam, since it achieves the best performance. The phrase-structure parsing model is trained with a 64-beam. We train the parsing model using the automatically generated POS tags by 10-way jackknifing, which gives about 1.5% increases in parsing accuracy when tested on automatic segmented and POS tagged inputs. The joint system trained with flat word structures serves to test the effectiveness of our joint parsing system over the pipelined baseline,</context>
<context position="30655" citStr="Zhang and Clark (2009)" startWordPosition="5010" endWordPosition="5013">ing step for the CTB5 corpus. tures concern only prefixes and suffixes, which cover only 35% of entire words in CTB. According to their results, the final performances of their model on word segmentation and POS tagging are below the state-of-the-art joint segmentation and POS tagging models. Compared to their work, we consider the character-level word structures for Chinese parsing, presenting a unified framework for segmentation, POS tagging and phrasestructure parsing. We can achieve improved segmentation and tagging performance. Our character-level parsing model is inspired by the work of Zhang and Clark (2009), which is a transition-based model with a beam-search decoder for word-based constituent parsing. Our work is based on the shift-reduce operations of their work, while we introduce additional operations for segmentation and POS tagging. By such an extension, our model can include all the features in their work, together with the features for segmentation and POS tagging. In addition, we propose novel features related to word structures and interactions between word segmentation, POS tagging and word-based constituent parsing. Luo (2003) was the first work to introduce the character-based synt</context>
</contexts>
<marker>Zhang, Clark, 2009</marker>
<rawString>Yue Zhang and Stephen Clark. 2009. Transitionbased parsing of the chinese treebank using a global discriminative model. In Proceedings of the 11th International Conference on Parsing Technologies (IWPT’09), pages 162–171, Paris, France, October. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yue Zhang</author>
<author>Stephen Clark</author>
</authors>
<title>A fast decoder for joint word segmentation and POS-tagging using a single discriminative model.</title>
<date>2010</date>
<booktitle>In Proceedings of the 2010 Conference on Empirical Methods in Natural Language Processing,</booktitle>
<pages>843--852</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Cambridge, MA,</location>
<contexts>
<context position="8713" citStr="Zhang and Clark (2010)" startWordPosition="1315" endWordPosition="1318">ords, including subject-predicate, verb-object, coordination and modifier-noun structures. Multicharacter words can also have recursive syntacNN-b NN-i NNi NNDi tic structures. Figure 3 illustrates the structure 卧 虎 藏 龙 然of the word “P虎藏龙 (crouching tiger hidden (crching) (tigr) (hiddn) (dragon) o) dragon)”, which is composed of two subwords “P 虎 (crouching tiger)” and “藏龙 (hidden dragon)”, both having a modifier-noun structure. The meaning of characters can be a useful source of information for computational processing of Chinese, and some recent work has started to exploit this information. Zhang and Clark (2010) found that the first character in a Chinese word is a useful indicator of the word’s POS. They made use of this information to help joint word segmentation and POS tagging. Li (2011) studied the morphological structures of Chinese words, showing that 35% percent of the words in CTB5 can be treated as having morphemes. Figure 4(a) illustrates the morphological structures of the words “ 朋A们 (friends)” and “教育界 (educational world)”, in which the characters “们 (plural)” and “界 (field)” can be treated as suffix morphemes. They studied the influence of such morphology to Chinese dependency parsing </context>
<context position="20428" citStr="Zhang and Clark, 2010" startWordPosition="3381" endWordPosition="3384">er a word is in a tag dictionary, which is collected by extracting all multi-character subwords that occur more than five times in the training corpus. For string features, c0, c−1 and c−2 represent the current character and its previous two characters, respectively; w−1 and w−2 represent the previous two words to the current character, respectively; t0, t−1 and t−2 represent the POS tags of the current word and the previous two words, respectively. The string features are used for word segmentation and POS tagging, and are adapted from a state-of-the-art joint segmentation and tagging model (Zhang and Clark, 2010). In summary, our character-based parser contains the word-based features of constituent parser presented in Zhang and Clark (2009), the wordbased and shallow character-based features of joint word segmentation and POS tagging presented in Zhang and Clark (2010), and additionally the deep character-based features that encode word structure information, which are the first presented by this paper. 4 Experiments 4.1 Setting We conduct our experiments on the CTB5 corpus, using the standard split of data, with sections 1–270,400–931 and 1001–1151 for training, sections 301–325 for system developme</context>
<context position="24078" citStr="Zhang and Clark (2010)" startWordPosition="3989" endWordPosition="3992"> it to two baseline systems, a pipelined system and a joint system that is trained with automatically generated flat words structures. The baseline pipelined system consists of the joint segmentation and tagging model proposed by 90 80 70 60 50 40 30 64b 16b 4b 1b 130 Task P R F Pipeline Seg 97.35 98.02 97.69 Tag 93.51 94.15 93.83 Parse 81.58 82.95 82.26 Flat word Seg 97.32 98.13 97.73 structures Tag 94.09 94.88 94.48 Parse 83.39 83.84 83.61 Annotated Seg 97.49 98.18 97.84 word structures Tag 94.46 95.14 94.80 Parse 84.42 84.43 84.43 WS 94.02 94.69 94.35 Table 2: Final results on test corpus. Zhang and Clark (2010), and the phrase-structure parsing model of Zhang and Clark (2009). Both models give state-of-the-art performances, and are freely available.4 The model for joint segmentation and POS tagging is trained with a 16- beam, since it achieves the best performance. The phrase-structure parsing model is trained with a 64-beam. We train the parsing model using the automatically generated POS tags by 10-way jackknifing, which gives about 1.5% increases in parsing accuracy when tested on automatic segmented and POS tagged inputs. The joint system trained with flat word structures serves to test the effe</context>
</contexts>
<marker>Zhang, Clark, 2010</marker>
<rawString>Yue Zhang and Stephen Clark. 2010. A fast decoder for joint word segmentation and POS-tagging using a single discriminative model. In Proceedings of the 2010 Conference on Empirical Methods in Natural Language Processing, pages 843–852, Cambridge, MA, October. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yue Zhang</author>
<author>Stephen Clark</author>
</authors>
<title>Syntactic processing using the generalized perceptron and beam search.</title>
<date>2011</date>
<journal>Computational Linguistics,</journal>
<volume>37</volume>
<issue>1</issue>
<marker>Zhang, Clark, 2011</marker>
<rawString>Yue Zhang and Stephen Clark. 2011. Syntactic processing using the generalized perceptron and beam search. Computational Linguistics, 37(1):105–151.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hai Zhao</author>
</authors>
<title>Character-level dependencies in chinese: Usefulness and learning.</title>
<date>2009</date>
<booktitle>In Proceedings of the 12th Conference of the European Chapter of the ACL (EACL</booktitle>
<pages>879--887</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Athens, Greece,</location>
<contexts>
<context position="29117" citStr="Zhao (2009)" startWordPosition="4789" endWordPosition="4790">chieves 83.45%5 in parsing accuracy on the test corpus, and our pipeline constituent parsing model achieves 83.55% with gold segmentation. They are lower than the performance of our character-level model, which is 84.43% without gold segmentation. The main differences between word-based and character-level parsing models are that character-level model can exploit character features. This further demonstrates the effectiveness of characters in Chinese parsing. 5 Related Work Recent work on using the internal structure of words to help Chinese processing gives important motivations to our work. Zhao (2009) studied character-level dependencies for Chinese word segmentation by formalizing segmentsion task in a dependency parsing framework. Their results demonstrate that annotated word dependencies can be helpful for word segmentation. Li (2011) pointed out that the word’s internal structure is very important for Chinese NLP. They annotated morphological-level word structures, and a unified generative model was proposed to parse the Chinese morphological and phrase-structures. Li and Zhou (2012) also exploited the morphologicallevel word structures for Chinese dependency parsing. They proposed a u</context>
</contexts>
<marker>Zhao, 2009</marker>
<rawString>Hai Zhao. 2009. Character-level dependencies in chinese: Usefulness and learning. In Proceedings of the 12th Conference of the European Chapter of the ACL (EACL 2009), pages 879–887, Athens, Greece, March. Association for Computational Linguistics.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>