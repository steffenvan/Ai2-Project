<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000745">
<title confidence="0.999355">
Generalized Hebbian Algorithm for Incremental Singular Value
Decomposition in Natural Language Processing
</title>
<author confidence="0.994835">
Genevieve Gorrell
</author>
<affiliation confidence="0.9929645">
Department of Computer and Information Science
Link¨oping University
</affiliation>
<address confidence="0.904009">
581 83 LINK¨OPING
Sweden
</address>
<email confidence="0.99658">
gengo@ida.liu.se
</email>
<sectionHeader confidence="0.995563" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999846076923077">
An algorithm based on the Generalized
Hebbian Algorithm is described that
allows the singular value decomposition
of a dataset to be learned based on
single observation pairs presented seri-
ally. The algorithm has minimal mem-
ory requirements, and is therefore in-
teresting in the natural language do-
main, where very large datasets are of-
ten used, and datasets quickly become
intractable. The technique is demon-
strated on the task of learning word
and letter bigram pairs from text.
</bodyText>
<sectionHeader confidence="0.998989" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999677847457627">
Dimensionality reduction techniques are of
great relevance within the field of natural lan-
guage processing. A persistent problem within
language processing is the over-specificity of
language, and the sparsity of data. Corpus-
based techniques depend on a sufficiency of
examples in order to model human language
use, but the Zipfian nature of frequency be-
haviour in language means that this approach
has diminishing returns with corpus size. In
short, there are a large number of ways to say
the same thing, and no matter how large your
corpus is, you will never cover all the things
that might reasonably be said. Language is
often too rich for the task being performed;
for example it can be difficult to establish that
two documents are discussing the same topic.
Likewise no matter how much data your sys-
tem has seen during training, it will invari-
ably see something new at run-time in a do-
main of any complexity. Any approach to au-
tomatic natural language processing will en-
counter this problem on several levels, creat-
ing a need for techniques which compensate
for this.
Imagine we have a set of data stored as a
matrix. Techniques based on eigen decomposi-
tion allow such a matrix to be transformed into
a set of orthogonal vectors, each with an asso-
ciated “strength”, or eigenvalue. This trans-
formation allows the data contained in the ma-
trix to be compressed; by discarding the less
significant vectors (dimensions) the matrix can
be approximated with fewer numbers. This
is what is meant by dimensionality reduction.
The technique is guaranteed to return the clos-
est (least squared error) approximation possi-
ble for a given number of numbers (Golub and
Reinsch, 1970). In certain domains, however,
the technique has even greater significance. It
is effectively forcing the data through a bot-
tleneck; requiring it to describe itself using
an impoverished construct set. This can al-
low the critical underlying features to reveal
themselves. In language, for example, these
features might be semantic constructs. It can
also improve the data, in the case that the de-
tail is noise, or richness not relevant to the
task.
Singular value decomposition (SVD) is a
near relative of eigen decomposition, appro-
priate to domains where input is asymmetri-
cal. The best known application of singular
value decomposition within natural language
processing is Latent Semantic Analysis (Deer-
wester et al., 1990). Latent Semantic Analysis
(LSA) allows passages of text to be compared
to each other in a reduced-dimensionality se-
mantic space, based on the words they contain.
</bodyText>
<page confidence="0.999217">
97
</page>
<bodyText confidence="0.99996768627451">
The technique has been successfully applied to
information retrieval, where the overspecificity
of language is particularly problematic; text
searches often miss relevant documents where
different vocabulary has been chosen in the
search terms to that used in the document (for
example, the user searches on “eigen decom-
position” and fails to retrieve documents on
factor analysis). LSA has also been applied in
language modelling (Bellegarda, 2000), where
it has been used to incorporate long-span se-
mantic dependencies.
Much research has been done on optimis-
ing eigen decomposition algorithms, and the
extent to which they can be optimised de-
pends on the area of application. Most natu-
ral language problems involve sparse matrices,
since there are many words in a natural lan-
guage and the great majority do not appear in,
for example, any one document. Domains in
which matrices are less sparse lend themselves
to such techniques as Golub-Kahan-Reinsch
(Golub and Reinsch, 1970) and Jacobi-like ap-
proaches. Techniques such as those described
in (Berry, 1992) are more appropriate in the
natural language domain.
Optimisation is an important way to in-
crease the applicability of eigen and singu-
lar value decomposition. Designing algorithms
that accommodate different requirements is
another. For example, another drawback to
Jacobi-like approaches is that they calculate
all the singular triplets (singular vector pairs
with associated values) simultaneously, which
may not be practical in a situation where only
the top few are required. Consider also that
the methods mentioned so far assume that the
entire matrix is available from the start. There
are many situations in which data may con-
tinue to become available.
(Berry et al., 1995) describe a number of
techniques for including new data in an ex-
isting decomposition. Their techniques apply
to a situation in which SVD has been per-
formed on a collection of data, then new data
becomes available. However, these techniques
are either expensive, or else they are approxi-
mations which degrade in quality over time.
They are useful in the context of updating
an existing batch decomposition with a sec-
ond batch of data, but are less applicable in
the case where data are presented serially, for
example, in the context of a learning system.
Furthermore, there are limits to the size of ma-
trix that can feasibly be processed using batch
decomposition techniques. This is especially
relevant within natural language processing,
where very large corpora are common. Ran-
dom Indexing (Kanerva et al., 2000) provides
a less principled, though very simple and ef-
ficient, alternative to SVD for dimensionality
reduction over large corpora.
This paper describes an approach to singu-
lar value decomposition based on the General-
ized Hebbian Algorithm (Sanger, 1989). GHA
calculates the eigen decomposition of a ma-
trix based on single observations presented se-
rially. The algorithm presented here differs in
that where GHA produces the eigen decom-
position of symmetrical data, our algorithm
produces the singular value decomposition of
asymmetrical data. It allows singular vectors
to be learned from paired inputs presented se-
rially using no more memory than is required
to store the singular vector pairs themselves.
It is therefore relevant in situations where the
size of the dataset makes conventional batch
approaches infeasible. It is also of interest in
the context of adaptivity, since it has the po-
tential to adapt to changing input. The learn-
ing update operation is very cheap computa-
tionally. Assuming a stable vector length, each
update operation takes exactly as long as each
previous one; there is no increase with corpus
size to the speed of the update. Matrix di-
mensions may increase during processing. The
algorithm produces singular vector pairs one
at a time, starting with the most significant,
which means that useful data becomes avail-
able quickly; many standard techniques pro-
duce the entire decomposition simultaneously.
Since it is a learning technique, however, it dif-
fers from what would normally be considered
an incremental technique, in that the algo-
rithm converges on the singular value decom-
position of the dataset, rather than at any one
point having the best solution possible for the
data it has seen so far. The method is poten-
tially most appropriate in situations where the
dataset is very large or unbounded: smaller,
bounded datasets may be more efficiently pro-
cessed by other methods. Furthermore, our
</bodyText>
<page confidence="0.997901">
98
</page>
<bodyText confidence="0.99966745">
approach is limited to cases where the final
matrix is expressible as the linear sum of outer
products of the data vectors. Note in particu-
lar that Latent Semantic Analysis, as usually
implemented, is not an example of this, be-
cause LSA takes the log of the final sums in
each cell (Dumais, 1990). LSA, however, does
not depend on singular value decomposition;
Gorrell and Webb (Gorrell and Webb, 2005)
discuss using eigen decomposition to perform
LSA, and demonstrate LSA using the Gen-
eralized Hebbian Algorithm in its unmodified
form. Sanger (Sanger, 1993) presents similar
work, and future work will involve more de-
tailed comparison of this approach to his.
The next section describes the algorithm.
Section 3 describes implementation in practi-
cal terms. Section 4 illustrates, using word
n-gram and letter n-gram tasks as examples
and section 5 concludes.
</bodyText>
<sectionHeader confidence="0.958127" genericHeader="method">
2 The Algorithm
</sectionHeader>
<bodyText confidence="0.987167366666666">
This section introduces the Generalized Heb-
bian Algorithm, and shows how the technique
can be adapted to the rectangular matrix form
of singular value decomposition. Eigen decom-
position requires as input a square diagonally-
symmetrical matrix, that is to say, one in
which the cell value at row x, column y is
the same as that at row y, column x. The
kind of data described by such a matrix is
the correlation between data in a particular
space with other data in the same space. For
example, we might wish to describe how of-
ten a particular word appears with a particu-
lar other word. The data therefore are sym-
metrical relations between items in the same
space; word a appears with word b exactly as
often as word b appears with word a. In sin-
gular value decomposition, rectangular input
matrices are handled. Ordered word bigrams
are an example of this; imagine a matrix in
which rows correspond to the first word in a
bigram, and columns to the second. The num-
ber of times that word b appears after word
a is by no means the same as the number
of times that word a appears after word b.
Rows and columns are different spaces; rows
are the space of first words in the bigrams,
and columns are the space of second words.
The singular value decomposition of a rect-
angular data matrix, A, can be presented as;
</bodyText>
<equation confidence="0.895501">
A = UΣVT (1)
</equation>
<bodyText confidence="0.985595545454545">
where U and V are matrices of orthogonal left
and right singular vectors (columns) respec-
tively, and Σ is a diagonal matrix of the cor-
responding singular values. The U and V ma-
trices can be seen as a matched set of orthogo-
nal basis vectors in their corresponding spaces,
while the singular values specify the effective
magnitude of each vector pair. By convention,
these matrices are sorted such that the diag-
onal of Σ is monotonically decreasing, and it
is a property of SVD that preserving only the
first (largest) N of these (and hence also only
the first N columns of U and V) provides a
least-squared error, rank-N approximation to
the original matrix A.
Singular Value Decomposition is intimately
related to eigenvalue decomposition in that the
singular vectors, U and V , of the data matrix,
A, are simply the eigenvectors of A * AT and
AT * A, respectively, and the singular values,
Σ, are the square-roots of the corresponding
eigenvalues.
</bodyText>
<subsectionHeader confidence="0.992281">
2.1 Generalised Hebbian Algorithm
</subsectionHeader>
<bodyText confidence="0.992498363636364">
Oja and Karhunen (Oja and Karhunen, 1985)
demonstrated an incremental solution to find-
ing the first eigenvector from data arriving in
the form of serial data items presented as vec-
tors, and Sanger (Sanger, 1989) later gener-
alized this to finding the first N eigenvectors
with the Generalized Hebbian Algorithm. The
algorithm converges on the exact eigen decom-
position of the data with a probability of one.
The essence of these algorithms is a simple
Hebbian learning rule:
</bodyText>
<equation confidence="0.742857">
Un(t + 1) = Un(t) + λ * (UTn * Aj) * Aj (2)
</equation>
<bodyText confidence="0.999831222222222">
Un is the n’th column of U (i.e., the n’th eigen-
vector, see equation 1), λ is the learning rate
and Aj is the j’th column of training matrix
A. t is the timestep. The only modification to
this required in order to extend it to multiple
eigenvectors is that each Un needs to shadow
any lower-ranked Um(m &gt; n) by removing its
projection from the input Aj in order to assure
both orthogonality and an ordered ranking of
</bodyText>
<page confidence="0.936456">
99
</page>
<bodyText confidence="0.668092">
the resulting eigenvectors. Sanger’s final for-
mulation (Sanger, 1989) is: Ac = c.x(x) (5)
</bodyText>
<equation confidence="0.991826666666667">
cij(t + 1) = cij(t) + γ(t)(yi(t)xj(t) (3)
−yi(t) E ckj(t)yk(t))
k≤i
</equation>
<bodyText confidence="0.999500862068965">
In the above, cij is an individual element in
the current eigenvector, xj is the input vector
and yi is the activation (that is to say, ci.xj,
the dot product of the input vector with the
ith eigenvector). γ is the learning rate.
To summarise, the formula updates the cur-
rent eigenvector by adding to it the input vec-
tor multiplied by the activation minus the pro-
jection of the input vector on all the eigenvec-
tors so far including the current eigenvector,
multiplied by the activation. Including the
current eigenvector in the projection subtrac-
tion step has the effect of keeping the eigen-
vectors normalised. Note that Sanger includes
an explicit learning rate, γ. The formula can
be varied slightly by not including the current
eigenvector in the projection subtraction step.
In the absence of the autonormalisation influ-
ence, the vector is allowed to grow long. This
has the effect of introducing an implicit learn-
ing rate, since the vector only begins to grow
long when it settles in the right direction, and
since further learning has less impact once the
vector has become long. Weng et al. (Weng
et al., 2003) demonstrate the efficacy of this
approach. So, in vector form, assuming C to
be the eigenvector currently being trained, ex-
panding y out and using the implicit learning
rate;
</bodyText>
<equation confidence="0.7593415">
EAci = ci.x(x − (x.cj)cj) (4)
j&lt;i
</equation>
<bodyText confidence="0.999024545454545">
Delta notation is used to describe the update
here, for further readability. The subtracted
element is responsible for removing from the
training update any projection on previous
singular vectors, thereby ensuring orthgonal-
ity. Let us assume for the moment that we
are calculating only the first eigenvector. The
training update, that is, the vector to be added
to the eigenvector, can then be more simply
described as follows, making the next steps
more readable;
</bodyText>
<subsectionHeader confidence="0.814665">
2.2 Extension to Paired Data
</subsectionHeader>
<figure confidence="0.674999333333333">
Let us begin with a simplification of 5:
Ac = n
1 cX(X) (6)
</figure>
<figureCaption confidence="0.856214785714286">
Here, the upper case X is the entire data ma-
trix. n is the number of training items. The
simplification is valid in the case that c is sta-
bilised; a simplification that in our case will
become more valid with time. Extension to
paired data initially appears to present a prob-
lem. As mentioned earlier, the singular vectors
of a rectangular matrix are the eigenvectors
of the matrix multiplied by its transpose, and
the eigenvectors of the transpose of the matrix
multiplied by itself. Running GHA on a non-
square non-symmetrical matrix M, ie. paired
data, would therefore be achievable using stan-
dard GHA as follows:
</figureCaption>
<figure confidence="0.567704">
1
Aca =
n
</figure>
<bodyText confidence="0.937472">
Acb = 1
n
In the above, ca and cb are left and right sin-
gular vectors. However, to be able to feed the
algorithm with rows of the matrices MMT
and MTM, we would need to have the en-
tire training corpus available simultaneously,
and square it, which we hoped to avoid. This
makes it impossible to use GHA for singu-
lar value decomposition of serially-presented
paired input in this way without some further
transformation. Equation 1, however, gives:
</bodyText>
<equation confidence="0.927481">
Eσca = cbMT =
x
Eσcb = caM =
x
</equation>
<bodyText confidence="0.999563166666667">
Here, σ is the singular value and a and b are
left and right data vectors. The above is valid
in the case that left and right singular vectors
ca and cb have settled (which will become more
accurate over time) and that data vectors a
and b outer-product and sum to M.
</bodyText>
<equation confidence="0.99976325">
caMMT (MMT ) (7)
cbMT M(MT M) (8)
(cb.bx)ax (9)
(ca.ax)bx (10)
</equation>
<page confidence="0.880585">
100
</page>
<bodyText confidence="0.9927135">
Inserting 9 and 10 into 7 and 8 allows them
to be reduced as follows:
</bodyText>
<equation confidence="0.9620189375">
Q cbMT MMT (11)
~ca =
n
Acb = Q caMMTM (12)
n
2 cbMT M (14)
Acb = Q2
n
Q3 cbMT (15)
Aca =
n
3 caM (16)
Acb = Q
n
Aca = Q3(cb.b)a (17)
Acb = Q3(ca.a)b (18)
</equation>
<bodyText confidence="0.9998821875">
This element can then be reinserted into GHA.
To summarise, where GHA dotted the input
with the eigenvector and multiplied the result
by the input vector to form the training up-
date (thereby adding the input vector to the
eigenvector with a length proportional to the
extent to which it reflects the current direc-
tion of the eigenvector) our formulation dots
the right input vector with the right singular
vector and multiplies the left input vector by
this quantity before adding it to the left singu-
lar vector, and vice versa. In this way, the two
sides cross-train each other. Below is the final
modification of GHA extended to cover mul-
tiple vector pairs. The original GHA is given
beneath it for comparison.
</bodyText>
<equation confidence="0.9431685">
�Acai = cbi.b(a − (a.cja )cja) (19)
jGi
�Acbi = cai .a(b − (b.cbj)cbj) (20)
jGi
��ci = ci.x(x − (x.cj)cj) (21)
jGi
</equation>
<bodyText confidence="0.999953666666667">
In equations 6 and 9/10 we introduced approx-
imations that become accurate as the direction
of the singular vectors settles. These approx-
imations will therefore not interfere with the
accuracy of the final result, though they might
interfere with the rate of convergence. The
constant Q3 has been dropped in 19 and 20.
Its relevance is purely with respect to the cal-
culation of the singular value. Recall that in
(Weng et al., 2003) the eigenvalue is calcula-
ble as the average magnitude of the training
update Ac. In our formulation, according to
17 and 18, the singular value would be Ac di-
vided by Q3. Dropping the Q3 in 19 and 20
achieves that implicitly; the singular value is
once more the average length of the training
update.
The next section discusses practical aspects
of implementation. The following section illus-
trates usage, with English language word and
letter bigram data as test domains.
</bodyText>
<sectionHeader confidence="0.998983" genericHeader="method">
3 Implementation
</sectionHeader>
<bodyText confidence="0.9999936">
Within the framework of the algorithm out-
lined above, there is still room for some im-
plementation decisions to be made. The naive
implementation can be summarised as follows:
the first datum is used to train the first singu-
lar vector pair; the projection of the first singu-
lar vector pair onto this datum is subtracted
from the datum; the datum is then used to
train the second singular vector pair and so on
for all the vector pairs; ensuing data items are
processed similarly. The main problem with
this approach is as follows. At the beginning
of the training process, the singular vectors are
close to the values they were initialised with,
and far away from the values they will settle
on. The second singular vector pair is trained
on the datum minus its projection onto the
first singular vector pair in order to prevent
the second singular vector pair from becom-
ing the same as the first. But if the first pair
is far away from its eventual direction, then
the second has a chance to move in the direc-
tion that the first will eventually take on. In
fact, all the vectors, such as they can whilst re-
maining orthogonal to each other, will move in
the strongest direction. Then, when the first
pair eventually takes on the right direction,
the others have difficulty recovering, since they
start to receive data that they have very lit-
tle projection on, meaning that they learn very
</bodyText>
<equation confidence="0.9967005">
Q2
~ca =
n
caMMT (13)
</equation>
<page confidence="0.988968">
101
</page>
<bodyText confidence="0.999935352941177">
slowly. The problem can be addressed by wait-
ing until each singular vector pair is relatively
stable before beginning to train the next. By
“stable”, we mean that the vector is changing
little in its direction, such as to suggest it is
very close to its target. Measures of stability
might include the average variation in posi-
tion of the endpoint of the (normalised) vector
over a number of training iterations, or simply
length of the (unnormalised) vector, since a
long vector is one that is being reinforced by
the training data, such as it would be if it was
settled on the dominant feature. Termination
criteria might include that a target number
of singular vector pairs have been reached, or
that the last vector is increasing in length only
very slowly.
</bodyText>
<sectionHeader confidence="0.995837" genericHeader="method">
4 Application
</sectionHeader>
<bodyText confidence="0.999953506849315">
The task of relating linguistic bigrams to each
other, as mentioned earlier, is an example of
a task appropriate to singular value decom-
position, in that the data is paired data, in
which each item is in a different space to the
other. Consider word bigrams, for example.
First word space is in a non-symmetrical re-
lationship to second word space; indeed, the
spaces are not even necessarily of the same di-
mensionality, since there could conceivably be
words in the corpus that never appear in the
first word slot (they might never appear at the
start of a sentence) or in the second word slot
(they might never appear at the end.) So a
matrix containing word counts, in which each
unique first word forms a row and each unique
second word forms a column, will not be a
square symmetrical matrix; the value at row
a, column b, will not be the same as the value
at row b column a, except by coincidence.
The significance of performing dimension-
ality reduction on word bigrams could be
thought of as follows. Language clearly ad-
heres to some extent to a rule system less
rich than the individual instances that form
its surface manifestation. Those rules govern
which words might follow which other words;
although the rule system is more complex and
of a longer range that word bigrams can hope
to illustrate, nonetheless the rule system gov-
erns the surface form of word bigrams, and we
might hope that it would be possible to discern
from word bigrams something of the nature of
the rules. In performing dimensionality reduc-
tion on word bigram data, we force the rules to
describe themselves through a more impover-
ished form than via the collection of instances
that form the training corpus. The hope is
that the resulting simplified description will
be a generalisable system that applies even to
instances not encountered at training time.
On a practical level, the outcome has ap-
plications in automatic language acquisition.
For example, the result might be applicable in
language modelling. Use of the learning algo-
rithm presented in this paper is appropriate
given the very large dimensions of any real-
istic corpus of language; The corpus chosen
for this demonstration is Margaret Mitchell’s
“Gone with the Wind”, which contains 19,296
unique words (421,373 in total), which fully re-
alized as a correlation matrix with, for exam-
ple, 4-byte floats would consume 1.5 gigabytes,
and which in any case, within natural language
processing, would not be considered a particu-
larly large corpus. Results on the word bigram
task are presented in the next section.
Letter bigrams provide a useful contrast-
ing illustration in this context; an input di-
mensionality of 26 allows the result to be
more easily visualised. Practical applications
might include automatic handwriting recogni-
tion, where an estimate of the likelihood of
a particular letter following another would be
useful information. The fact that there are
only twenty-something letters in most western
alphabets though makes the usefulness of the
incremental approach, and indeed, dimension-
ality reduction techniques in general, less ob-
vious in this domain. However, extending the
space to letter trigrams and even four-grams
would change the requirements. Section 4.2
discusses results on a letter bigram task.
</bodyText>
<subsectionHeader confidence="0.998998">
4.1 Word Bigram Task
</subsectionHeader>
<bodyText confidence="0.999960555555556">
“Gone with the Wind” was presented to the
algorithm as word bigrams. Each word was
mapped to a vector containing all zeros but for
a one in the slot corresponding to the unique
word index assigned to that word. This had
the effect of making input to the algorithm a
normalised vector, and of making word vec-
tors orthogonal to each other. The singular
vector pair’s reaching a combined Euclidean
</bodyText>
<page confidence="0.997538">
102
</page>
<bodyText confidence="0.998371710526316">
magnitude of 2000 was given as the criterion
for beginning to train the next vector pair, the
reasoning being that since the singular vectors
only start to grow long when they settle in
the approximate right direction and the data
starts to reinforce them, length forms a reason-
able heuristic for deciding if they are settled
enough to begin training the next vector pair.
2000 was chosen ad hoc based on observation
of the behaviour of the algorithm during train-
ing.
The data presented are the words most rep-
resentative of the top two singular vectors,
that is to say, the directions these singular
vectors mostly point in. Table 1 shows the
words with highest scores in the top two vec-
tor pairs. It says that in this vector pair, the
normalised left hand vector projected by 0.513
onto the vector for the word “of” (or in other
words, these vectors have a dot product of
0.513.) The normalised right hand vector has
a projection of 0.876 onto the word “the” etc.
This first table shows a left side dominated
by prepositions, with a right side in which
“the” is by far the most important word, but
which also contains many pronouns. The fact
that the first singular vector pair is effectively
about “the” (the right hand side points far
more in the direction of “the” than any other
word) reflects its status as the most common
word in the English language. What this result
is saying is that were we to be allowed only one
feature with which to describe word English
bigrams, a feature describing words appear-
ing before “the” and words behaving similarly
to “the” would be the best we could choose.
Other very common words in English are also
prominent in this feature.
</bodyText>
<tableCaption confidence="0.995838">
Table 1: Top words in 1st singular vector pair
</tableCaption>
<bodyText confidence="0.9925158">
Vector 1, Eigenvalue 0.00938
of 0.5125468 the 0.8755944
in 0.49723375 her 0.28781646
and 0.39370865 a 0.23318098
to 0.2748983 his 0.14336193
on 0.21759394 she 0.1128443
at 0.17932475 it 0.06529821
for 0.16905183 he 0.063333265
with 0.16042696 you 0.058997907
from 0.13463423 their 0.05517004
</bodyText>
<tableCaption confidence="0.8570362">
Table 2 puts “she”, “he” and “it” at the
top on the left, and four common verbs on the
right, indicating a pronoun-verb pattern as the
second most dominant feature in the corpus.
Table 2: Top words in 2nd singular vector pair
</tableCaption>
<table confidence="0.9883772">
Vector 2, Eigenvalue 0.00427
she 0.6633538 was 0.58067155
he 0.38005337 had 0.50169927
it 0.30800354 could 0.2315106
and 0.18958427 would 0.17589279
</table>
<subsectionHeader confidence="0.960734">
4.2 Letter Bigram Task
</subsectionHeader>
<bodyText confidence="0.99955834375">
Running the algorithm on letter bigrams illus-
trates different properties. Because there are
only 26 letters in the English alphabet, it is
meaningful to examine the entire singular vec-
tor pair. Figure 1 shows the third singular vec-
tor pair derived by running the algorithm on
letter bigrams. The y axis gives the projection
of the vector for the given letter onto the sin-
gular vector. The left singular vector is given
on the left, and the right on the right, that is
to say, the first letter in the bigram is on the
left and the second on the right. The first two
singular vector pairs are dominated by letter
frequency effects, but the third is interesting
because it clearly shows that the method has
identified vowels. It means that the third most
useful feature for determining the likelihood of
letter b following letter a is whether letter a
is a vowel. If letter b is a vowel, letter a is
less likely to be (vowels dominate the nega-
tive end of the right singular vector). (Later
features could introduce subcases where a par-
ticular vowel is likely to follow another partic-
ular vowel, but this result suggests that the
most dominant case is that this does not hap-
pen.) Interestingly, the letter ’h’ also appears
at the negative end of the right singular vec-
tor, suggesting that ’h’ for the most part does
not follow a vowel in English. Items near zero
(’k’, ’z’ etc.) are not strongly represented in
this singular vector pair; it tells us little about
them.
</bodyText>
<sectionHeader confidence="0.998616" genericHeader="conclusions">
5 Conclusion
</sectionHeader>
<bodyText confidence="0.867209333333333">
An incremental approach to approximating
the singular value decomposition of a cor-
relation matrix has been presented. Use
</bodyText>
<page confidence="0.99897">
103
</page>
<figureCaption confidence="0.999177">
Figure 1: Third Singular Vector Pair on Letter Bigram Task
</figureCaption>
<figure confidence="0.99864904">
-0.2
-0.4
-0.6
0.6
0.4
0.2
0
i a
o
e
u
_
q x j znyf k p g b s d
wv l c m
r
t h
n
r t
s
ml cdf
v wp g b u k x z
j q _ y
a i o
h
e
</figure>
<bodyText confidence="0.999822608695652">
of the incremental approach means that
singular value decomposition is an option
in situations where data takes the form of
single serially-presented observations from an
unknown matrix. The method is particularly
appropriate in natural language contexts,
where datasets are often too large to be pro-
cessed by traditional methods, and situations
where the dataset is unbounded, for example
in systems that learn through use. The
approach produces preliminary estimations
of the top vectors, meaning that informa-
tion becomes available early in the training
process. By avoiding matrix multiplication,
data of high dimensionality can be processed.
Results of preliminary experiments have been
discussed here on the task of modelling word
and letter bigrams. Future work will include
an evaluation on much larger corpora.
Acknowledgements: The author would like
to thank Brandyn Webb for his contribution,
and the Graduate School of Language Technol-
ogy and Vinnova for their financial support.
</bodyText>
<sectionHeader confidence="0.99943" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999516727272727">
J. Bellegarda. 2000. Exploiting latent semantic in-
formation in statistical language modeling. Pro-
ceedings of the IEEE, 88:8.
Michael W. Berry, Susan T. Dumais, and Gavin W.
O’Brien. 1995. Using linear algebra for in-
telligent information retrieval. SIAM Review,
34(4):573–595.
R. W. Berry. 1992. Large-scale sparse singular
value computations. The International Journal
of Supercomputer Applications, 6(1):13–49.
Scott C. Deerwester, Susan T. Dumais, Thomas K.
Landauer, George W. Furnas, and Richard A.
Harshman. 1990. Indexing by latent semantic
analysis. Journal of the American Society of In-
formation Science, 41(6):391–407.
S. Dumais. 1990. Enhancing performance in latent
semantic indexing. TM-ARH-017527 Technical
Report, Bellcore, 1990.
G. H. Golub and C. Reinsch. 1970. Handbook se-
ries linear algebra. singular value decomposition
and least squares solutions. Numerical Mathe-
matics, 14:403–420.
G. Gorrell and B. Webb. 2005. Generalized heb-
bian algorithm for latent semantic analysis. In
Proceedings of Interspeech 2005.
P. Kanerva, J. Kristoferson, and A. Holst. 2000.
Random indexing of text samples for latent se-
mantic analysis. In Proceedings of 22nd Annual
Conference of the Cognitive Science Society.
E. Oja and J. Karhunen. 1985. On stochastic ap-
proximation of the eigenvectors and eigenvalues
of the expectation of a random matrix. J. Math.
Analysis and Application, 106:69–84.
Terence D. Sanger. 1989. Optimal unsupervised
learning in a single-layer linear feedforward neu-
ral network. Neural Networks, 2:459–473.
Terence D. Sanger. 1993. Two iterative algorithms
for computing the singular value decomposition
from input/output samples. NIPS, 6:144–151.
Juyang Weng, Yilu Zhang, and Wey-Shiuan
Hwang. 2003. Candid covariance-free incremen-
tal principal component analysis. IEEE Trans-
actions on Pattern Analysis and Machine Intel-
ligence, 25:8:1034–1040.
</reference>
<page confidence="0.998782">
104
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.394248">
<title confidence="0.996672">Generalized Hebbian Algorithm for Incremental Singular Value Decomposition in Natural Language Processing</title>
<author confidence="0.999359">Genevieve Gorrell</author>
<affiliation confidence="0.9999705">Department of Computer and Information Science Link¨oping University</affiliation>
<address confidence="0.643967">83 Sweden</address>
<email confidence="0.975001">gengo@ida.liu.se</email>
<abstract confidence="0.9984395">An algorithm based on the Generalized Hebbian Algorithm is described that allows the singular value decomposition of a dataset to be learned based on single observation pairs presented serially. The algorithm has minimal memory requirements, and is therefore interesting in the natural language domain, where very large datasets are often used, and datasets quickly become intractable. The technique is demonstrated on the task of learning word and letter bigram pairs from text.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>J Bellegarda</author>
</authors>
<title>Exploiting latent semantic information in statistical language modeling.</title>
<date>2000</date>
<booktitle>Proceedings of the IEEE,</booktitle>
<pages>88--8</pages>
<contexts>
<context position="3755" citStr="Bellegarda, 2000" startWordPosition="595" endWordPosition="596">0). Latent Semantic Analysis (LSA) allows passages of text to be compared to each other in a reduced-dimensionality semantic space, based on the words they contain. 97 The technique has been successfully applied to information retrieval, where the overspecificity of language is particularly problematic; text searches often miss relevant documents where different vocabulary has been chosen in the search terms to that used in the document (for example, the user searches on “eigen decomposition” and fails to retrieve documents on factor analysis). LSA has also been applied in language modelling (Bellegarda, 2000), where it has been used to incorporate long-span semantic dependencies. Much research has been done on optimising eigen decomposition algorithms, and the extent to which they can be optimised depends on the area of application. Most natural language problems involve sparse matrices, since there are many words in a natural language and the great majority do not appear in, for example, any one document. Domains in which matrices are less sparse lend themselves to such techniques as Golub-Kahan-Reinsch (Golub and Reinsch, 1970) and Jacobi-like approaches. Techniques such as those described in (B</context>
</contexts>
<marker>Bellegarda, 2000</marker>
<rawString>J. Bellegarda. 2000. Exploiting latent semantic information in statistical language modeling. Proceedings of the IEEE, 88:8.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael W Berry</author>
<author>Susan T Dumais</author>
<author>Gavin W O’Brien</author>
</authors>
<title>Using linear algebra for intelligent information retrieval.</title>
<date>1995</date>
<journal>SIAM Review,</journal>
<volume>34</volume>
<issue>4</issue>
<marker>Berry, Dumais, O’Brien, 1995</marker>
<rawString>Michael W. Berry, Susan T. Dumais, and Gavin W. O’Brien. 1995. Using linear algebra for intelligent information retrieval. SIAM Review, 34(4):573–595.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R W Berry</author>
</authors>
<title>Large-scale sparse singular value computations.</title>
<date>1992</date>
<journal>The International Journal of Supercomputer Applications,</journal>
<volume>6</volume>
<issue>1</issue>
<contexts>
<context position="4366" citStr="Berry, 1992" startWordPosition="694" endWordPosition="695">), where it has been used to incorporate long-span semantic dependencies. Much research has been done on optimising eigen decomposition algorithms, and the extent to which they can be optimised depends on the area of application. Most natural language problems involve sparse matrices, since there are many words in a natural language and the great majority do not appear in, for example, any one document. Domains in which matrices are less sparse lend themselves to such techniques as Golub-Kahan-Reinsch (Golub and Reinsch, 1970) and Jacobi-like approaches. Techniques such as those described in (Berry, 1992) are more appropriate in the natural language domain. Optimisation is an important way to increase the applicability of eigen and singular value decomposition. Designing algorithms that accommodate different requirements is another. For example, another drawback to Jacobi-like approaches is that they calculate all the singular triplets (singular vector pairs with associated values) simultaneously, which may not be practical in a situation where only the top few are required. Consider also that the methods mentioned so far assume that the entire matrix is available from the start. There are man</context>
</contexts>
<marker>Berry, 1992</marker>
<rawString>R. W. Berry. 1992. Large-scale sparse singular value computations. The International Journal of Supercomputer Applications, 6(1):13–49.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Scott C Deerwester</author>
<author>Susan T Dumais</author>
<author>Thomas K Landauer</author>
<author>George W Furnas</author>
<author>Richard A Harshman</author>
</authors>
<title>Indexing by latent semantic analysis.</title>
<date>1990</date>
<journal>Journal of the American Society of Information Science,</journal>
<volume>41</volume>
<issue>6</issue>
<contexts>
<context position="3140" citStr="Deerwester et al., 1990" startWordPosition="499" endWordPosition="503">the data through a bottleneck; requiring it to describe itself using an impoverished construct set. This can allow the critical underlying features to reveal themselves. In language, for example, these features might be semantic constructs. It can also improve the data, in the case that the detail is noise, or richness not relevant to the task. Singular value decomposition (SVD) is a near relative of eigen decomposition, appropriate to domains where input is asymmetrical. The best known application of singular value decomposition within natural language processing is Latent Semantic Analysis (Deerwester et al., 1990). Latent Semantic Analysis (LSA) allows passages of text to be compared to each other in a reduced-dimensionality semantic space, based on the words they contain. 97 The technique has been successfully applied to information retrieval, where the overspecificity of language is particularly problematic; text searches often miss relevant documents where different vocabulary has been chosen in the search terms to that used in the document (for example, the user searches on “eigen decomposition” and fails to retrieve documents on factor analysis). LSA has also been applied in language modelling (Be</context>
</contexts>
<marker>Deerwester, Dumais, Landauer, Furnas, Harshman, 1990</marker>
<rawString>Scott C. Deerwester, Susan T. Dumais, Thomas K. Landauer, George W. Furnas, and Richard A. Harshman. 1990. Indexing by latent semantic analysis. Journal of the American Society of Information Science, 41(6):391–407.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Dumais</author>
</authors>
<title>Enhancing performance in latent semantic indexing.</title>
<date>1990</date>
<tech>TM-ARH-017527 Technical Report, Bellcore,</tech>
<contexts>
<context position="8091" citStr="Dumais, 1990" startWordPosition="1298" endWordPosition="1299">ion of the dataset, rather than at any one point having the best solution possible for the data it has seen so far. The method is potentially most appropriate in situations where the dataset is very large or unbounded: smaller, bounded datasets may be more efficiently processed by other methods. Furthermore, our 98 approach is limited to cases where the final matrix is expressible as the linear sum of outer products of the data vectors. Note in particular that Latent Semantic Analysis, as usually implemented, is not an example of this, because LSA takes the log of the final sums in each cell (Dumais, 1990). LSA, however, does not depend on singular value decomposition; Gorrell and Webb (Gorrell and Webb, 2005) discuss using eigen decomposition to perform LSA, and demonstrate LSA using the Generalized Hebbian Algorithm in its unmodified form. Sanger (Sanger, 1993) presents similar work, and future work will involve more detailed comparison of this approach to his. The next section describes the algorithm. Section 3 describes implementation in practical terms. Section 4 illustrates, using word n-gram and letter n-gram tasks as examples and section 5 concludes. 2 The Algorithm This section introdu</context>
</contexts>
<marker>Dumais, 1990</marker>
<rawString>S. Dumais. 1990. Enhancing performance in latent semantic indexing. TM-ARH-017527 Technical Report, Bellcore, 1990.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G H Golub</author>
<author>C Reinsch</author>
</authors>
<title>Handbook series linear algebra. singular value decomposition and least squares solutions.</title>
<date>1970</date>
<journal>Numerical Mathematics,</journal>
<pages>14--403</pages>
<contexts>
<context position="2414" citStr="Golub and Reinsch, 1970" startWordPosition="386" endWordPosition="389">ich compensate for this. Imagine we have a set of data stored as a matrix. Techniques based on eigen decomposition allow such a matrix to be transformed into a set of orthogonal vectors, each with an associated “strength”, or eigenvalue. This transformation allows the data contained in the matrix to be compressed; by discarding the less significant vectors (dimensions) the matrix can be approximated with fewer numbers. This is what is meant by dimensionality reduction. The technique is guaranteed to return the closest (least squared error) approximation possible for a given number of numbers (Golub and Reinsch, 1970). In certain domains, however, the technique has even greater significance. It is effectively forcing the data through a bottleneck; requiring it to describe itself using an impoverished construct set. This can allow the critical underlying features to reveal themselves. In language, for example, these features might be semantic constructs. It can also improve the data, in the case that the detail is noise, or richness not relevant to the task. Singular value decomposition (SVD) is a near relative of eigen decomposition, appropriate to domains where input is asymmetrical. The best known applic</context>
<context position="4286" citStr="Golub and Reinsch, 1970" startWordPosition="680" endWordPosition="683">ments on factor analysis). LSA has also been applied in language modelling (Bellegarda, 2000), where it has been used to incorporate long-span semantic dependencies. Much research has been done on optimising eigen decomposition algorithms, and the extent to which they can be optimised depends on the area of application. Most natural language problems involve sparse matrices, since there are many words in a natural language and the great majority do not appear in, for example, any one document. Domains in which matrices are less sparse lend themselves to such techniques as Golub-Kahan-Reinsch (Golub and Reinsch, 1970) and Jacobi-like approaches. Techniques such as those described in (Berry, 1992) are more appropriate in the natural language domain. Optimisation is an important way to increase the applicability of eigen and singular value decomposition. Designing algorithms that accommodate different requirements is another. For example, another drawback to Jacobi-like approaches is that they calculate all the singular triplets (singular vector pairs with associated values) simultaneously, which may not be practical in a situation where only the top few are required. Consider also that the methods mentioned</context>
</contexts>
<marker>Golub, Reinsch, 1970</marker>
<rawString>G. H. Golub and C. Reinsch. 1970. Handbook series linear algebra. singular value decomposition and least squares solutions. Numerical Mathematics, 14:403–420.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Gorrell</author>
<author>B Webb</author>
</authors>
<title>Generalized hebbian algorithm for latent semantic analysis.</title>
<date>2005</date>
<booktitle>In Proceedings of Interspeech</booktitle>
<contexts>
<context position="8197" citStr="Gorrell and Webb, 2005" startWordPosition="1312" endWordPosition="1315">it has seen so far. The method is potentially most appropriate in situations where the dataset is very large or unbounded: smaller, bounded datasets may be more efficiently processed by other methods. Furthermore, our 98 approach is limited to cases where the final matrix is expressible as the linear sum of outer products of the data vectors. Note in particular that Latent Semantic Analysis, as usually implemented, is not an example of this, because LSA takes the log of the final sums in each cell (Dumais, 1990). LSA, however, does not depend on singular value decomposition; Gorrell and Webb (Gorrell and Webb, 2005) discuss using eigen decomposition to perform LSA, and demonstrate LSA using the Generalized Hebbian Algorithm in its unmodified form. Sanger (Sanger, 1993) presents similar work, and future work will involve more detailed comparison of this approach to his. The next section describes the algorithm. Section 3 describes implementation in practical terms. Section 4 illustrates, using word n-gram and letter n-gram tasks as examples and section 5 concludes. 2 The Algorithm This section introduces the Generalized Hebbian Algorithm, and shows how the technique can be adapted to the rectangular matri</context>
</contexts>
<marker>Gorrell, Webb, 2005</marker>
<rawString>G. Gorrell and B. Webb. 2005. Generalized hebbian algorithm for latent semantic analysis. In Proceedings of Interspeech 2005.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Kanerva</author>
<author>J Kristoferson</author>
<author>A Holst</author>
</authors>
<title>Random indexing of text samples for latent semantic analysis.</title>
<date>2000</date>
<booktitle>In Proceedings of 22nd Annual Conference of the Cognitive Science Society.</booktitle>
<contexts>
<context position="5862" citStr="Kanerva et al., 2000" startWordPosition="932" endWordPosition="935"> becomes available. However, these techniques are either expensive, or else they are approximations which degrade in quality over time. They are useful in the context of updating an existing batch decomposition with a second batch of data, but are less applicable in the case where data are presented serially, for example, in the context of a learning system. Furthermore, there are limits to the size of matrix that can feasibly be processed using batch decomposition techniques. This is especially relevant within natural language processing, where very large corpora are common. Random Indexing (Kanerva et al., 2000) provides a less principled, though very simple and efficient, alternative to SVD for dimensionality reduction over large corpora. This paper describes an approach to singular value decomposition based on the Generalized Hebbian Algorithm (Sanger, 1989). GHA calculates the eigen decomposition of a matrix based on single observations presented serially. The algorithm presented here differs in that where GHA produces the eigen decomposition of symmetrical data, our algorithm produces the singular value decomposition of asymmetrical data. It allows singular vectors to be learned from paired input</context>
</contexts>
<marker>Kanerva, Kristoferson, Holst, 2000</marker>
<rawString>P. Kanerva, J. Kristoferson, and A. Holst. 2000. Random indexing of text samples for latent semantic analysis. In Proceedings of 22nd Annual Conference of the Cognitive Science Society.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Oja</author>
<author>J Karhunen</author>
</authors>
<title>On stochastic approximation of the eigenvectors and eigenvalues of the expectation of a random matrix.</title>
<date>1985</date>
<journal>J. Math. Analysis and Application,</journal>
<pages>106--69</pages>
<contexts>
<context position="11016" citStr="Oja and Karhunen, 1985" startWordPosition="1806" endWordPosition="1809">the diagonal of Σ is monotonically decreasing, and it is a property of SVD that preserving only the first (largest) N of these (and hence also only the first N columns of U and V) provides a least-squared error, rank-N approximation to the original matrix A. Singular Value Decomposition is intimately related to eigenvalue decomposition in that the singular vectors, U and V , of the data matrix, A, are simply the eigenvectors of A * AT and AT * A, respectively, and the singular values, Σ, are the square-roots of the corresponding eigenvalues. 2.1 Generalised Hebbian Algorithm Oja and Karhunen (Oja and Karhunen, 1985) demonstrated an incremental solution to finding the first eigenvector from data arriving in the form of serial data items presented as vectors, and Sanger (Sanger, 1989) later generalized this to finding the first N eigenvectors with the Generalized Hebbian Algorithm. The algorithm converges on the exact eigen decomposition of the data with a probability of one. The essence of these algorithms is a simple Hebbian learning rule: Un(t + 1) = Un(t) + λ * (UTn * Aj) * Aj (2) Un is the n’th column of U (i.e., the n’th eigenvector, see equation 1), λ is the learning rate and Aj is the j’th column o</context>
</contexts>
<marker>Oja, Karhunen, 1985</marker>
<rawString>E. Oja and J. Karhunen. 1985. On stochastic approximation of the eigenvectors and eigenvalues of the expectation of a random matrix. J. Math. Analysis and Application, 106:69–84.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Terence D Sanger</author>
</authors>
<title>Optimal unsupervised learning in a single-layer linear feedforward neural network. Neural Networks,</title>
<date>1989</date>
<pages>2--459</pages>
<contexts>
<context position="6115" citStr="Sanger, 1989" startWordPosition="972" endWordPosition="973">le in the case where data are presented serially, for example, in the context of a learning system. Furthermore, there are limits to the size of matrix that can feasibly be processed using batch decomposition techniques. This is especially relevant within natural language processing, where very large corpora are common. Random Indexing (Kanerva et al., 2000) provides a less principled, though very simple and efficient, alternative to SVD for dimensionality reduction over large corpora. This paper describes an approach to singular value decomposition based on the Generalized Hebbian Algorithm (Sanger, 1989). GHA calculates the eigen decomposition of a matrix based on single observations presented serially. The algorithm presented here differs in that where GHA produces the eigen decomposition of symmetrical data, our algorithm produces the singular value decomposition of asymmetrical data. It allows singular vectors to be learned from paired inputs presented serially using no more memory than is required to store the singular vector pairs themselves. It is therefore relevant in situations where the size of the dataset makes conventional batch approaches infeasible. It is also of interest in the </context>
<context position="11186" citStr="Sanger, 1989" startWordPosition="1836" endWordPosition="1837">provides a least-squared error, rank-N approximation to the original matrix A. Singular Value Decomposition is intimately related to eigenvalue decomposition in that the singular vectors, U and V , of the data matrix, A, are simply the eigenvectors of A * AT and AT * A, respectively, and the singular values, Σ, are the square-roots of the corresponding eigenvalues. 2.1 Generalised Hebbian Algorithm Oja and Karhunen (Oja and Karhunen, 1985) demonstrated an incremental solution to finding the first eigenvector from data arriving in the form of serial data items presented as vectors, and Sanger (Sanger, 1989) later generalized this to finding the first N eigenvectors with the Generalized Hebbian Algorithm. The algorithm converges on the exact eigen decomposition of the data with a probability of one. The essence of these algorithms is a simple Hebbian learning rule: Un(t + 1) = Un(t) + λ * (UTn * Aj) * Aj (2) Un is the n’th column of U (i.e., the n’th eigenvector, see equation 1), λ is the learning rate and Aj is the j’th column of training matrix A. t is the timestep. The only modification to this required in order to extend it to multiple eigenvectors is that each Un needs to shadow any lower-ra</context>
</contexts>
<marker>Sanger, 1989</marker>
<rawString>Terence D. Sanger. 1989. Optimal unsupervised learning in a single-layer linear feedforward neural network. Neural Networks, 2:459–473.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Terence D Sanger</author>
</authors>
<title>Two iterative algorithms for computing the singular value decomposition from input/output samples.</title>
<date>1993</date>
<journal>NIPS,</journal>
<pages>6--144</pages>
<contexts>
<context position="8353" citStr="Sanger, 1993" startWordPosition="1337" endWordPosition="1338">iently processed by other methods. Furthermore, our 98 approach is limited to cases where the final matrix is expressible as the linear sum of outer products of the data vectors. Note in particular that Latent Semantic Analysis, as usually implemented, is not an example of this, because LSA takes the log of the final sums in each cell (Dumais, 1990). LSA, however, does not depend on singular value decomposition; Gorrell and Webb (Gorrell and Webb, 2005) discuss using eigen decomposition to perform LSA, and demonstrate LSA using the Generalized Hebbian Algorithm in its unmodified form. Sanger (Sanger, 1993) presents similar work, and future work will involve more detailed comparison of this approach to his. The next section describes the algorithm. Section 3 describes implementation in practical terms. Section 4 illustrates, using word n-gram and letter n-gram tasks as examples and section 5 concludes. 2 The Algorithm This section introduces the Generalized Hebbian Algorithm, and shows how the technique can be adapted to the rectangular matrix form of singular value decomposition. Eigen decomposition requires as input a square diagonallysymmetrical matrix, that is to say, one in which the cell v</context>
</contexts>
<marker>Sanger, 1993</marker>
<rawString>Terence D. Sanger. 1993. Two iterative algorithms for computing the singular value decomposition from input/output samples. NIPS, 6:144–151.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Juyang Weng</author>
<author>Yilu Zhang</author>
<author>Wey-Shiuan Hwang</author>
</authors>
<title>Candid covariance-free incremental principal component analysis.</title>
<date>2003</date>
<journal>IEEE Transactions on Pattern Analysis and Machine Intelligence,</journal>
<pages>25--8</pages>
<contexts>
<context position="13188" citStr="Weng et al., 2003" startWordPosition="2190" endWordPosition="2193">e current eigenvector in the projection subtraction step has the effect of keeping the eigenvectors normalised. Note that Sanger includes an explicit learning rate, γ. The formula can be varied slightly by not including the current eigenvector in the projection subtraction step. In the absence of the autonormalisation influence, the vector is allowed to grow long. This has the effect of introducing an implicit learning rate, since the vector only begins to grow long when it settles in the right direction, and since further learning has less impact once the vector has become long. Weng et al. (Weng et al., 2003) demonstrate the efficacy of this approach. So, in vector form, assuming C to be the eigenvector currently being trained, expanding y out and using the implicit learning rate; EAci = ci.x(x − (x.cj)cj) (4) j&lt;i Delta notation is used to describe the update here, for further readability. The subtracted element is responsible for removing from the training update any projection on previous singular vectors, thereby ensuring orthgonality. Let us assume for the moment that we are calculating only the first eigenvector. The training update, that is, the vector to be added to the eigenvector, can the</context>
<context position="16877" citStr="Weng et al., 2003" startWordPosition="2863" endWordPosition="2866">iple vector pairs. The original GHA is given beneath it for comparison. �Acai = cbi.b(a − (a.cja )cja) (19) jGi �Acbi = cai .a(b − (b.cbj)cbj) (20) jGi ��ci = ci.x(x − (x.cj)cj) (21) jGi In equations 6 and 9/10 we introduced approximations that become accurate as the direction of the singular vectors settles. These approximations will therefore not interfere with the accuracy of the final result, though they might interfere with the rate of convergence. The constant Q3 has been dropped in 19 and 20. Its relevance is purely with respect to the calculation of the singular value. Recall that in (Weng et al., 2003) the eigenvalue is calculable as the average magnitude of the training update Ac. In our formulation, according to 17 and 18, the singular value would be Ac divided by Q3. Dropping the Q3 in 19 and 20 achieves that implicitly; the singular value is once more the average length of the training update. The next section discusses practical aspects of implementation. The following section illustrates usage, with English language word and letter bigram data as test domains. 3 Implementation Within the framework of the algorithm outlined above, there is still room for some implementation decisions t</context>
</contexts>
<marker>Weng, Zhang, Hwang, 2003</marker>
<rawString>Juyang Weng, Yilu Zhang, and Wey-Shiuan Hwang. 2003. Candid covariance-free incremental principal component analysis. IEEE Transactions on Pattern Analysis and Machine Intelligence, 25:8:1034–1040.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>