<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<title confidence="0.995809">
Bilingual Generation of Job Descriptions
from Quasi-Conceptual Forms*
</title>
<author confidence="0.8060395">
David E. Caldwell
Tatiana Korelsky
</author>
<affiliation confidence="0.719659">
CoGenTex, Inc.
</affiliation>
<email confidence="0.762603">
ted@cogentex.qc.ca
tanya@cogentex.com
</email>
<sectionHeader confidence="0.995617" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999452652173913">
The EXCLASS system (Expert Job Evaluation Assis-
tant) is intended to provide intelligent support for job
description and classification in the Canadian Public
Service. The Job Description Module (JDM) of
EXCLASS is used to create conceptual representations
of job descriptions, which are used for job evaluation
and bilingual generation of textual job descriptions.
The design of these representations was subject to two
opposing constraints: (1) that they be deep enough to
resolve the ambiguities present in textual job descrip-
tions, and (2) that they be close enough to surface lin-
guistic forms that they can be conveniently manipu-
lated by users with little specialized training. The
close correspondence of concepts to surface words and
phrases, as well as properties of the job description
sublanguage, permit a simplified generator design,
whereby phrases are prepackaged with a certain
amount of linguistic structure, and combined according
to a small set of mostly language-independent rules.
Text planning, consisting mainly of grouping and or-
dering of conjoined phrases, is performed manually by
the user, and composition of conceptual forms is sup-
ported by a &amp;quot;continuous text feedback&amp;quot; function.
</bodyText>
<sectionHeader confidence="0.905538" genericHeader="keywords">
1. Goals of EXCLASS
</sectionHeader>
<bodyText confidence="0.9910384">
The EXCLASS system (described on a more general
level in Korelsky &amp; Caldwell 1993) is intended to pro-
vide intelligent support for the process of describing and
evaluating jobs in the Canadian Public Service. The Job
Description Module (JDM) of EXCLASS, developed by
CoGenTex for the Canadian Treasury Board, provides
resources for the user to compose conceptual representa-
tions of job descriptions. The JDM generates textual
job descriptions in both English and French from these
representations; a Job Evaluation Module (JEM) also
reasons on them to produce a classification and rating of
a job, according to the government&apos;s evolving Universal
Classification Standard.
The first phase of the EXCLASS project resulted in
a proof-of-concept prototype, based on a sample of
some 30 job descriptions in the domain of procurement
and asset management, in which the JDM and JEM are
linked through a common graphical interface. The sec-
ond phase, concluded in the spring of 1994, involved
* We are grateful to Ehud Reiter for his valuable comments
on an earlier version of this paper, which greatly
influenced its present form.
R&amp;D in preparation for fielding and site testing of the
system in a selected government department.
EXCLASS is intended to eventually be used by
thousands of managers across Canada, thus decreasing
reliance on classification experts, while at the same
time increasing the standardization, objectivity and
comparability of job classifications across diverse occu-
pational and organizational groupings.
</bodyText>
<sectionHeader confidence="0.997582" genericHeader="introduction">
2. Functional Requirements
</sectionHeader>
<bodyText confidence="0.999392882352941">
The principal task of the JDM is to produce an unam-
biguous conceptual representation of a job description,
which is suitable for (1) automatic reasoning by the job
evaluation component, (2) bilingual text generation, and
(3) manipulation by users with little or no training in
knowledge representation. It must also provide various
tools to facilitate such manipulation, and it must do
this on a 386-class PC under Microsoft Windows.
In the current standard format, public-service job
descriptions consist of three basic types of statements,
which describe a position in progressively greater detail:
Client Service Results, Key Activities, and Substanti-
ating Data. Substantiating Data is further classified into
various Factors and Elements, e.g. Working Condi-
tions: Environment, Risk to Health; Skill and Know-
ledge: Physical Demands, Communications. Figure 1
shows a sample of the job description format.
</bodyText>
<sectionHeader confidence="0.949147" genericHeader="method">
CLIENT-SERVICE RESULTS
</sectionHeader>
<listItem confidence="0.8291236875">
• Procurement of military aircraft and airframes
for the Department of National Defense.
KEY ACTIVITIES
• Issuing invitations to tenders and requests for
proposals.
• Conducting negotiations with sole-source sup-
pliers.
• Preparing and issuing contracts within own au-
thority and recommending approval of contracts
in excess of own authority.
SUBSTANTIATING DATA
Environment
• The work involves an office environment, re-
sulting in frequent use of computers and occa-
sional exposure to noise. Some travel is re-
quired.
</listItem>
<figureCaption confidence="0.98776">
Figure 1: Sample job description text.
</figureCaption>
<page confidence="0.963765">
1
</page>
<bodyText confidence="0.981936631578947">
Results and Key Activities are expressed in point
form; Results as nominal phrases, and Key Activities as
gerunds. Substantiating Data statements are sometimes
multi-sentential, but tend to follow fairly rigid tem-
plates.
A comprehensive analysis of user requirements for
the JDM was conducted, during which it became clear
that users favoured more explicit control over all aspects
of the content of a job description, even if it came at the
expense of convenience of composition. The idea of
prepackaged templates as a basis for conceptual job de-
scriptions—for example, classifications of Key
Activities likely to be associated with department heads,
middle management, clerical staff, etc.—met with some
resistance, since it might prejudice the outcome of job
evaluation. Users also expressed a desire for a conve-
nient means of adding to the collection of concepts
available, in the event that they did not find what they
needed for a particular job description.
</bodyText>
<sectionHeader confidence="0.9944" genericHeader="method">
3. Functionality
</sectionHeader>
<bodyText confidence="0.9999624">
The EXCLASS JDM comprises two modules: the Job
Description Builder (JDB) and the Job Description
Generator (JDG). The JDB supports composition and
editing of conceptual representations, which take the
form of trees of concepts drawn from a structured con-
ceptual dictionary. The JDG produces text from these
representations, by combining realization templates as-
sociated with each concept. The next three sections de-
scribe the conceptual dictionary, conceptual forms, and
the structure of the generator.
</bodyText>
<subsectionHeader confidence="0.99992">
3.1 Knowledge Representation
</subsectionHeader>
<bodyText confidence="0.88977325">
The dictionary of concepts used in the JDB to compose
conceptual representations comprises several disjoint
hierarchies of entities which figure in job descriptions.
The current dictionary covers a sample of some 30 job
descriptions in English and French, although the analy-
sis on which it was based encompassed at least twice
that number.
In order to determine just what the entities repre-
sented in the conceptual dictionary should be, we began
with the following criteria, which derive from the func-
tional requirements:
1. In order to provide a basis for suitable input to the
Job Evaluation Module and the Job Description
Generator, concepts should be free of the ambigui-
ties observed in textual job descriptions. These
ambiguities have three main sources:
</bodyText>
<listItem confidence="0.909509">
• multiple word senses;
• attachment of dependent phrases;
• scope of conjunction.
2. In order to allow managers, who have little or no
</listItem>
<bodyText confidence="0.97523425">
training in knowledge representation, to work with
conceptual representations at the most detailed
level, concepts should introduce as little specialized
notation as possible.
The first criterion calls for concepts which are ab-
stracted from surface linguistic forms, while the second
says that they should be close to surface forms, since
that is what managers are accustomed to working with
when they write job descriptions.
In order to satisfy these conflicting criteria, con-
cepts were designed to correspond to surface words or
phrases as closely as possible, while remaining free of
ambiguities. Concepts corresponding to different senses
of the same word are annotated with distinguishing la-
bels—e.g. negotiation [activity] (as in negotiating price
and cost elements for multi-phase contracts) vs. negotia-
tions [process] (as in conducting negotiations with sole-
source suppliers). Concepts corresponding to surface
forms which take dependent phrases are associated with
semantic roles (see below). And concepts contain only
irreducible conjunctions (e.g. The Banff National Park
and region).
With regard to the appropriate granularity of con-
cepts, again there were conflicting criteria:
</bodyText>
<listItem confidence="0.995730833333333">
3. Concepts should be fine-grained enough to permit
users to express the distinctions that are important
to them.
4. Concepts should be coarse-grained enough that edit-
ing of conceptual representations is not more
burdensome than editing text.
</listItem>
<bodyText confidence="0.997298666666667">
Again, the approach adopted was to make concepts
just fine-grained enough to account for collocational
patterns observed in the corpus (through analysis of
concordances).
The conceptual dictionary is structured using a rep-
resentation similar to KL-ONE (Woods &amp; Schmolze,
1992). Concepts are arranged in hierarchies from most
general to most specific, and associated with semantic
roles and &amp;quot;structural conditions&amp;quot; on those roles. For ex-
ample, the concept negotiations [process] is a child of
(&amp;quot;a kind of&amp;quot;) the concept interactions, and has roles for
the action involved (e.g. conducting, leading), what is
being negotiated (e.g. contracts, agreements), and who
is being negotiated with (e.g. suppliers, foreign gov-
ernment representatives).
The structural conditions on a concept&apos;s roles are
expressed partly in terms of a division of the set of con-
cepts into subsets of different types:
</bodyText>
<listItem confidence="0.9708455">
• Object concepts (e.g. resources, systems for secure
storage, special inventory counts), which can serve
as roots of conceptual forms (see the next section).
• Domain concepts (e.g. asset management, ware-
housing, custodial warehousing), which correspond
to occupational groupings.
• Body concepts (e.g. Canadian Parks Service, indus-
try sales representatives, other service providers),
which denote types of individuals or corporate enti-
ties.
2
• Location concepts (e.g. Prairie Region, National
Capital Region Supply Centre).
• Purpose concepts (e.g. to ensure adequate service,
to ensure that all aspects of contracts have been
completed).
• Action concepts (e.g. developing, maintaining, ap-
proving).
</listItem>
<bodyText confidence="0.999882464285714">
Object concepts form a hierarchy descending from
the most general concept of service (they are also re-
ferred to as &amp;quot;aspects of service&amp;quot;). There are separate hier-
archies for domains, bodies, and locations; purposes and
actions are not hierarchically structured. In general, it is
object concepts that have roles, which are filled by con-
cepts of appropriate other types. The structural condi-
tions on roles taking values from one of the hierarchies
list a default (most typical) value for the filler, as well
as a most-general possible value. When values come
from a non-structured set, such as actions, the structural
conditions consist of a list of possible values.
The conceptual dictionary is also structured accord-
ing to occupational domains. Concepts peculiar to cer-
tain domains are marked with features corresponding to
those domains—for example, contracts is a procurement
concept; materiel handling equipment is a warehousing
concept.
The &amp;quot;aspects of service&amp;quot; hierarchy is based not just
on &amp;quot;kind of&apos; relations, but also &amp;quot;aspect of&apos; relations—
for example, multi-phase contracts are a &amp;quot;kind of&apos; con-
tracts, whereas operational costs are an &amp;quot;aspect of&apos; oper-
ations. Inheritance of concept roles and attributes
through &amp;quot;kind of&apos; links is used as the basis of the con-
cept acquisition interface (see the last section), although
it is not used for retrieving concept data. The exact na-
ture and implementation of inheritance on &amp;quot;aspect or&apos;
links is a topic for future research.
</bodyText>
<subsectionHeader confidence="0.999823">
3.2 Conceptual Forms
</subsectionHeader>
<bodyText confidence="0.996679473684211">
In order to compose and edit representations of job de-
scriptions, the user works with conceptual forms. A
conceptual form is a tree of concepts, whose arcs corre-
spond to semantic roles associated with concepts.
Visually, concepts in trees are presented as frames with
slots named for semantic roles, into which the user can
insert other concepts. This was seen as the best way of
giving users control over the most detailed aspects of
conceptual representations, while keeping their visual
presentation relatively simple.
An example of the conceptual form of a Key
Activity is shown in Figure 2. The MAIN CONCEPT
slot of the Key Activity frame takes one or more
&amp;quot;aspect of service&amp;quot; concepts as values. The frame for a
Result statement corresponds to the central concept
service, with slots for NATURE OF SERVICE and
CLIENT OF SERVICE.
The basic editing operation for constructing concep-
tual forms is to highlight a slot, then select a concept
</bodyText>
<table confidence="0.997016">
,am I it. rp111,1 I ditor 13
Conceptual Form:
.imuisiviarT
rem&amp; _
ACTION FOR METHODS:
dwalopag
implmmeing
NATURE OF METHODS:
cistiibution
Isdaliquft
ACTION FOR TECHNIQUES:
Doveleplop
jr:1170711ECIINIQUES:
libibuliew
Cut I E-1 ( Parte I r Delete 1 =I 1=1 1 Solact Concept.. I
Text Preview
Dinnampilg and implmonling diabilsulisn rill•d. muI tochnigpxr.
OK j
i
</table>
<figureCaption confidence="0.995868">
Figure 2: Example of a conceptual form.
</figureCaption>
<bodyText confidence="0.943857181818182">
to go in that slot. For slots taking values from hierar-
chically-structured subsets of the vocabulary, such as
objects or locations, the user can browse through the
relevant hierarchy, subject to the conditions described
earlier (Figure 3). The concept browser shows a
&amp;quot;focused&amp;quot; concept, together with its parents and chil-
dren; the user moves up or down by shifting the focus
to a parent or child (a Find Concept function is also
available). When values are from a non-structured subset
(e.g. actions), selection is from a flat list of possible
values.
</bodyText>
<figureCaption confidence="0.999522">
Figure 3: The concept browser.
</figureCaption>
<bodyText confidence="0.999965705882353">
Editing of existing conceptual forms is supported
by cut, copy and paste functions, which operate on sub-
trees of conceptual forms. The same operations are de-
fined for whole statements, so that users can move con-
ceptual structures of any size within the same job de-
scription, or between different ones.
A notable feature of conceptual forms is that, con-
trary to usual linguistic practice, object concepts (which
in general correspond to grammatical direct objects) are
the roots, while action concepts are the dependents. The
rationale behind this is that it is relatively straightfor-
ward to structure objects into a reasonably deep, exhaus-
tive, and intuitive hierarchy, whereas this would be very
difficult for actions. The set of actions can be implicitly
structured, however, by constructing lists of actions ap-
propriate for use with any given object. The reason for
structuring sets of concepts is to aid the user in compo-
</bodyText>
<page confidence="0.997383">
3
</page>
<bodyText confidence="0.999911">
sition, so that s/he only has to choose from a small
number of alternative concepts at any one point. So the
implicit structuring of actions according to whether they
can occur with a given object is only useful if the user
selects the object first, and then the actions.
Above the level of conceptual forms for individual
statements of various types, there is currently no mean-
ingful representation of a job description as a whole,
except that the domains listed under NATURE OF
SERVICE in Result statements are used to &amp;quot;trim&amp;quot; the
concepts displayed in the browser when composing the
rest of the job to only those relevant to those domains.
How to represent links or enforce consistency between
different statements—in particular between Results/Key
Activities and Substantiating Data—is a topic of ongo-
ing research by the developers, and discussion by poten-
tial users.
</bodyText>
<subsectionHeader confidence="0.999571">
3.3 Linguistic Realization
</subsectionHeader>
<bodyText confidence="0.999976347826087">
Given the close correspondence between conceptual
forms and surface linguistic forms, we decided to re-ex-
amine our initial assumption that the Job Description
Generator would be implemented by adapting
CoGenTex&apos;s existing text-generation shell.
Versions of this generator, based on Meaning-Text
Theory (MeRtik &amp; Pertsov, 1987), have been used in
other applications, including the generation of bilingual
weather forecasts (Goldberg et al., to appear) and statis-
tical reports (Iordanskaja et al., 1992). In order to pro-
duce text suitable to these applications, the generator
starts with deep conceptual representations, successively
deriving deep-syntactic, surface-syntactic, morphologi-
cal, and surface representations. It also incorporates so-
phisticated mechanisms for text planning and para-
phrase.
For several reasons, the existing generator was con-
sidered unsuitable for this application. The main ratio-
nale was that, since concepts already resembled pieces of
surface text, those pieces should not be reconstructed by
the generator unless this was necessary to produce text
of acceptable quality. If the words and phrases corre-
sponding to concepts could be given just enough lin-
guistic structure that a simplified generator could com-
bine them more or less directly to produce text, then it
would be a waste of effort to decompose them to the
level of detail on which the existing generator operated,
only to regenerate aspects of surface form that were al-
ready present in concept labels.
Another factor favouring a simplified generator de-
sign was the decision, following the design of the con-
ceptual forms, to include a &amp;quot;continuous text feedback&amp;quot;
function in the JDM interface. Again, since users were
unaccustomed to working with conceptual representa-
tions, it would be useful if they could confirm their
choices on the conceptual level with textual feedback
from the JDG. The JDM&apos;s conceptual editor (Figure 2
above) incorporates a text preview area, which is up-
dated every time a change is made to the conceptual
form. It also has the feature of displaying text even for
incomplete conceptual forms. The existing generator did
not have the level of real-time performance demanded by
this feature (on a 386-PC platform), or the ability to
generate incomplete phrases.
A simplified generator design was facilitated by cer-
tain linguistic properties of job descriptions:
</bodyText>
<listItem confidence="0.967282692307692">
• When statements are not simple clauses, they fol-
low fairly rigid templates. All conjunctions except
and and or can be treated as parts of concepts (e.g.
the purpose concept to ensure that all aspects of
contracts have been completed) .
• Referring expressions are always either generic or
proper noun phrases (no pronouns or defi-
nite/indefinite distinctions).
• There is very little morphology to deal with—there
is no agreement, due to the lack of subjects, and the
fact that adjectives and articles can always be treated
as part of the same concept as the noun they mod-
ify.
</listItem>
<bodyText confidence="0.960799823529412">
Given these facts, all the generator has to do is se-
lect different alternatives for realization of concepts in
some cases, concatenate phrases, and perform ellipsis
resulting from conjunctions. Text planning is performed
manually by users—they can order clauses in a Key
Activity, or actions for an object, in the same way that
they order Key Activities in a job description.
The generator is in the spirit of a Montague-style
categorial grammar (Dowty et al., 1981), except that
operations of function application and composition,
rather than operating on semantic objects in parallel
with the concatenation of surface elements, operate in
effect on the surface elements themselves. In order to il-
lustrate its operation, consider the conceptual form in
Figure 4, which is realized as Supervising performance
of routine and special assignments to ensure adequate
service:
</bodyText>
<subsectionHeader confidence="0.739927333333333">
key activity
MAIN CONCEPT:
activities of others
</subsectionHeader>
<sectionHeader confidence="0.704312" genericHeader="method">
ACTION FOR ACTIVITIES OF OTHERS:
</sectionHeader>
<subsectionHeader confidence="0.392342">
supervising
</subsectionHeader>
<sectionHeader confidence="0.742328" genericHeader="method">
MAIN CONCEPT OF ACTIVITIES OF OTHERS:
</sectionHeader>
<subsectionHeader confidence="0.631943">
routine assignments
</subsectionHeader>
<sectionHeader confidence="0.768238" genericHeader="method">
ACTION FOR ROUTINE ASSIGNMENTS:
</sectionHeader>
<subsectionHeader confidence="0.666482333333333">
performing
PURPOSE OF PERFORMANCE:
ensure adequate service
</subsectionHeader>
<bodyText confidence="0.41132">
special assignments
</bodyText>
<sectionHeader confidence="0.870433" genericHeader="method">
ACTION FOR SPECIAL ASSIGNMENTS:
</sectionHeader>
<subsectionHeader confidence="0.508255">
performing
PURPOSE OF PERFORMANCE:
ensure adequate service
</subsectionHeader>
<figureCaption confidence="0.975317">
Figure 4: Conceptual form for a complex Key
</figureCaption>
<bodyText confidence="0.9409025">
Activity statement
Each concept in the dictionary is associated with
one or more realization templates, which are complex
expressions built up from surface words or phrases, cer-
</bodyText>
<page confidence="0.99539">
4
</page>
<table confidence="0.860686416666666">
key_activity —) (MAIN: gerund)
activities of others (ACTION: gerund)* (MAIN: nominal)
supervising (gerundive form) &amp;quot;supervising&amp;quot;
routine assignments (gerundive form) (ACTION: gerund)* (&amp;quot;routine&apos; *&amp;quot; assignments&amp;quot;)
performing (nominal form) Ax((&amp;quot; performance&amp;quot;* (&amp;quot;of&amp;quot; * x))* (PURPOSE:—))
ensure adequate service --) &amp;quot;to&amp;quot; * (&amp;quot; ensure&amp;quot;* (&amp;quot; adequate&amp;quot; *&amp;quot; service&amp;quot;))
special assignments (gerundive form) (ACTION: gerund)* (&amp;quot;special&amp;quot; *&amp;quot; assignments&amp;quot;)
&amp;quot;supervising&amp;quot; * f( Ax((&amp;quot; peiformance&amp;quot; * (&amp;quot;of&amp;quot; * x))* (&amp;quot;to&amp;quot; * (&amp;quot;ensure&amp;quot; * (&amp;quot;adequate&amp;quot; *&amp;quot; service&amp;quot;))))* (&amp;quot;routine&amp;quot; *&amp;quot; assignments&amp;quot;)
performance&amp;quot; *(&amp;quot; of &amp;quot; * x))*(&amp;quot; to&amp;quot; * (&amp;quot; ensure&amp;quot; * (&amp;quot;adequate&amp;quot; *&amp;quot; service&amp;quot;))))* (&amp;quot; special&amp;quot; *&amp;quot; assignments&amp;quot;))
((&amp;quot; performance&amp;quot; * (&amp;quot;of&amp;quot; * (&amp;quot;routine&amp;quot; *&amp;quot; assignments&amp;quot;)))* (&amp;quot; to&amp;quot; * (&amp;quot;ensure&amp;quot; * (&amp;quot;adequate&amp;quot; * &amp;quot;service&amp;quot;))))
((&amp;quot; performance&amp;quot; * (&amp;quot; of&amp;quot; * (&amp;quot;special&amp;quot; *&amp;quot; assignments&amp;quot;)))*(&amp;quot; to&amp;quot; * (&amp;quot;ensure&amp;quot; * (&amp;quot; adequate&amp;quot; *&amp;quot; service&amp;quot;))))
d. &amp;quot;supervising&amp;quot; *((&amp;quot; performance&amp;quot; * (&amp;quot;of&amp;quot; * ((&amp;quot;routine&amp;quot; &amp;&amp;quot; special&amp;quot;)*&amp;quot; assignments&amp;quot;)))*(&amp;quot; to&amp;quot; * (&amp;quot;ensure&amp;quot; * (&amp;quot;adequate&amp;quot; *&amp;quot; service&amp;quot;))))
</table>
<figureCaption confidence="0.993886">
Figure 5: Steps in the derivation of a Key Activity statement
</figureCaption>
<equation confidence="0.458977">
C. &amp;quot; supervising&amp;quot; *
</equation>
<bodyText confidence="0.996765280701755">
lain operators, and variables corresponding to the con-
cept&apos;s slots&apos;. The relevant English templates for the
concepts in Figure 4 are shown in Figure 5a.
Expressions of the form &lt;SLOT:type&gt; specify how
the contents of a slot are to be realized—i.e., using
which of the available templates. For example, a Key
Activity frame is realized by realizing the contents of its
MAIN CONCEPT slot as a gerund. The activities of
others frame, which essentially represents a Key
Activity embedded within another, is realized by con-
catenating the gerundive form of its action with the
nominal realization of the embedded frame. The first
step the generator performs is to instantiate these ex-
pressions to the correct forms, and conjoin multiple
fillers of a single slot with the &amp; (and) operator, result-
ing in the form in Figure 5b. The next step is to reduce
lambda expressions, which gives 5c. Ellipsis is then
performed, giving the form in 5d. Finally, occurrences
of the &amp; operator are lexicalized as either commas or
and, as appropriate.
The operators used in realization templates, other
than A. and &amp;, serve to represent structure which is
consulted by the rules for lambda reduction and ellipsis.
Lambda reduction of an expression Ax(A)*B gives a
copy of A in which all occurrences of x (usually one)
are replaced with B. This is used for a &amp;quot;wrap&amp;quot; effect in
1 There are rules in some cases for deriving variant
templates for a concept from a basic template. For
example, the gerundive (basic) template for an object
concept in general has the form &lt;ACHON :gerund&gt;* ...; the
nominal form is derived from this simply by specifying the
nominal form of the action.
cases where actions have dependents, as well as in nom-
inalizations—in these cases the dependence of actions
on objects in conceptual forms cannot be undone sim-
ply by concatenating the action to the left of the object.
The lambda notation is also used to specify connecting
phrases (usually prepositions) which are associated with
the slots of certain concepts, and introduced by the gen-
erator—for example, in realizing the phrase negotiations
with contractors, the preposition with is introduced by
concatenating the connecting-phrase expression
A.x(&amp;quot;with&amp;quot;* x) associated with the NEGOTIATIONS
WITH WHOM slot to the left of the slot&apos;s realization,
&amp;quot;contractors&amp;quot;. When slots are empty, the connecting
phrase is omitted—this is mainly what accounts for the
generator&apos;s ability to produce incomplete phrases (in
some cases, conceptual forms with empty slots can pro-
duce acceptable phrases).
The basic rules for ellipsis are (A* B)&amp;(A*C)
A* (B&amp;C) and (A* C)&amp; (B* C) (A&amp; B)*C . There are
other rules which optimize conjunctions to some degree
by reordering conjuncts, but the overall approach is to
let users control the order manually. An operator # is
used in place of * to block ellipsis, and an operator \
handles cases in French where an OR is introduced dur-
ing ellipsis, according to the rules (A\ B)&amp;(A\C)
</bodyText>
<figure confidence="0.6838055">
A* (B I C) and (A \C)&amp; (B\C) (A&amp; B)I C (the /
operator is lexicalized as &amp;quot;ou&amp;quot;). For example,
((&amp;quot;les&amp;quot; #&amp;quot; contrats&amp;quot;)\(&amp;quot; er&amp;quot;#(&amp;quot; fournisseur&amp;quot; *&amp;quot; unique&amp;quot;)))
((&amp;quot;les&amp;quot; #&amp;quot; contrats&amp;quot;)\(&amp;quot; 11&amp;quot;# (&amp;quot; &amp;apes&amp;quot; *&amp;quot; multiples&amp;quot;)))
</figure>
<footnote confidence="0.628316">
is realized as les contrats d fournisseur unique ou
</footnote>
<page confidence="0.948335">
5
</page>
<bodyText confidence="0.944929342105263">
etapes multiples, and not as les contrats a fournisseur
unique et a etapes multiples or les contrats dfournisseur
unique ou etapes multiples.
Grammatical differences between French and
English are dealt with by assigning different structures,
sometimes using different operators, to the English and
French templates for a given concept, but there are also
cases where the lexicalization of a concept depends on
another concept in the context—for example, perform-
ing special assignments translates as executer les affec-
tations speciales, whereas performing post-contract
cleanup translates as assurer le suivi des contrats. These
cases are modelled using the MU notion of lexical
functions—in this example, the values in English and
French of the Opera function (&amp;quot;verb denoting the most
typical action of the first actant&amp;quot;) are performing and ex-
ecuter for the concept special assignments/affectations
speciales, and performing and assurer for the concept
post-contract cleanup/suivi des contrats. Lexical func-
tions are implemented in the conceptual dictionary as
&amp;quot;virtual&amp;quot; concepts, with pointers to actual concepts for
each language. Users can switch the language in which
conceptual forms are displayed (independently of the
language in which text is generated), and when they do
so, the appropriate actual concepts are displayed, with
no explicit indication of the underlying virtual concept.
This means, for example, that a user could copy the
concept assurer from the ACTION slot of suivi des con-
trats, and paste it into the ACTION slot of affectations
speciales, whereupon its label would change to executer.
The generator design described in this section has
several advantages for this type of application:
• It takes full advantage of the similarity of concepts
to surface linguistic forms, which was dictated by
the functional requirements. Phrases are generated
as chunks wherever possible, while still being as-
signed enough linguistic structure to produce ade-
quate text.
</bodyText>
<listItem confidence="0.9331525">
• Given the large volumes of concepts anticipated,
maintenance of realization templates will presum-
ably be simplified if they do not refer to lexical en-
tries in a main dictionary, and if a constrained
grammatical formalism is employed.
• Incomplete phrases can be generated straightfor-
wardly, in order to support the text preview func-
tion.
</listItem>
<sectionHeader confidence="0.989491" genericHeader="method">
4. Research Topics
</sectionHeader>
<bodyText confidence="0.999526055555556">
The main concern for deployment of EXCLASS on a
large scale is how to deal with the large volumes of
concepts which will be required. A concept acquisition
interface has been designed to support expansion of the
dictionary.
The acquisition interface is invoked from the con-
cept browser, when the user has determined that the de-
sired concept is not already available. The user selects a
concept from the browser to be the parent of the new
concept in the relevant hierarchy. The attributes of the
new concept (label, slot types and possible values, real-
ization templates) can then be edited, starting with de-
fault values. The defaults are inherited from the parent
concept, on the assumption that the new concept is a
&amp;quot;kind of&amp;quot; the parent. The nature of inheritance through
&amp;quot;aspect of&amp;quot; links is a topic for future research.
Another topic of research is how to possibly enrich
representations of a job as a whole, as well as of indi-
vidual concepts. The JEM developers are experimenting
with comparisons of job descriptions based on fuzzy
distance measures, which in turn are based on the posi-
tions of individual concepts in the hierarchy. Action
concepts are difficult to compare, since they are cur-
rently unstructured. Adding some sort of structure, such
as ranking the possible actions for a given object, could
facilitate job comparison, as well as treating linguistic
phenomena such as &amp;quot;asymmetric&amp;quot; conjunction
(developing and implementing methods vs.
*implementing and developing methods).
Finally, research is being conducted on different us-
age modes for the JDM interface—in particular, an
&amp;quot;expert&amp;quot; mode in which the user could enter the text of
simple (non-conjoined) statements and have it parsed to
some extent (using an elaborated &amp;quot;fmd&amp;quot; function) into a
conceptual form, rather than performing repetitive
point-and-click operations.
</bodyText>
<sectionHeader confidence="0.999099" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999448391304348">
David Dowty, Robert Wall, and Stanley Peters.
Introduction to Montague Semantics. Dordrecht: Reidel,
1981.
Eli Golberg, Richard Kittredge, and Norbert Driedger. A
new approach to the synthesis of weather forecast text. To
appear in IEEE Expert. (Special Track on Processing
Natural Language)
L. Iordanskaja, M. Kim, R. Kittredge, B. Lavoie, and A.
Polguere. Generation of extended bilingual statistical
reports. In Proceedings of the 14th International
Conference on Computational Linguistics (COLING-1992),
volume 3, pages 1019-1023, 1992.
Tatiana Korelsky and David Caldwell. Concept-based
composition of job descriptions with automatic text
generation. In Proceedings of the Canadian DND Combined
Workshop in Advanced Technologies, Ottawa, November
1993.
Igor MeMuk and Nikolaj Pertsov. Surface Syntax of
English: A Formal Model within the Meaning-Text
Framework. Amsterdam: John Benjamins, 1987.
William Woods and James Schmolze. The KL-ONE family.
Computers and Mathematics with Applications, volume
23, no. 2-5, pages 133-177, 1992.
</reference>
<page confidence="0.998772">
6
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.008876">
<title confidence="0.990077">Bilingual Generation of Job Descriptions from Quasi-Conceptual Forms*</title>
<author confidence="0.997252">David E Caldwell Tatiana Korelsky</author>
<affiliation confidence="0.985491">CoGenTex, Inc.</affiliation>
<email confidence="0.98407">ted@cogentex.qc.catanya@cogentex.com</email>
<abstract confidence="0.99514809375">The EXCLASS system (Expert Job Evaluation Assistant) is intended to provide intelligent support for job description and classification in the Canadian Public The Job Description Module EXCLASS is used to create conceptual representations of job descriptions, which are used for job evaluation and bilingual generation of textual job descriptions. The design of these representations was subject to two opposing constraints: (1) that they be deep enough to resolve the ambiguities present in textual job descriptions, and (2) that they be close enough to surface linguistic forms that they can be conveniently manipulated by users with little specialized training. The close correspondence of concepts to surface words and phrases, as well as properties of the job description sublanguage, permit a simplified generator design, whereby phrases are prepackaged with a certain amount of linguistic structure, and combined according to a small set of mostly language-independent rules. Text planning, consisting mainly of grouping and ordering of conjoined phrases, is performed manually by the user, and composition of conceptual forms is supported by a &amp;quot;continuous text feedback&amp;quot; function. 1. Goals of EXCLASS The EXCLASS system (described on a more general level in Korelsky &amp; Caldwell 1993) is intended to provide intelligent support for the process of describing and evaluating jobs in the Canadian Public Service. The Job Description Module (JDM) of EXCLASS, developed by CoGenTex for the Canadian Treasury Board, provides resources for the user to compose conceptual representations of job descriptions. The JDM generates textual job descriptions in both English and French from these representations; a Job Evaluation Module (JEM) also reasons on them to produce a classification and rating of a job, according to the government&apos;s evolving Universal Classification Standard. The first phase of the EXCLASS project resulted in a proof-of-concept prototype, based on a sample of some 30 job descriptions in the domain of procurement and asset management, in which the JDM and JEM are linked through a common graphical interface. The second phase, concluded in the spring of 1994, involved * We are grateful to Ehud Reiter for his valuable comments on an earlier version of this paper, which greatly influenced its present form. R&amp;D in preparation for fielding and site testing of the system in a selected government department. EXCLASS is intended to eventually be used by thousands of managers across Canada, thus decreasing reliance on classification experts, while at the same time increasing the standardization, objectivity and comparability of job classifications across diverse occupational and organizational groupings. 2. Functional Requirements The principal task of the JDM is to produce an unambiguous conceptual representation of a job description, which is suitable for (1) automatic reasoning by the job evaluation component, (2) bilingual text generation, and (3) manipulation by users with little or no training in knowledge representation. It must also provide various tools to facilitate such manipulation, and it must do this on a 386-class PC under Microsoft Windows. In the current standard format, public-service job descriptions consist of three basic types of statements, which describe a position in progressively greater detail: Client Service Results, Key Activities, and Substantiating Data. Substantiating Data is further classified into various Factors and Elements, e.g. Working Conditions: Environment, Risk to Health; Skill and Knowledge: Physical Demands, Communications. Figure 1 shows a sample of the job description format. CLIENT-SERVICE RESULTS • Procurement of military aircraft and airframes the National Defense. KEY ACTIVITIES • Issuing invitations to tenders and requests for proposals. • Conducting negotiations with sole-source suppliers. • Preparing and issuing contracts within own authority and recommending approval of contracts in excess of own authority. SUBSTANTIATING DATA Environment • The work involves an office environment, resulting in frequent use of computers and occasional exposure to noise. Some travel is required. Figure 1: Sample job description text. 1 Results and Key Activities are expressed in point form; Results as nominal phrases, and Key Activities as gerunds. Substantiating Data statements are sometimes but tend to follow fairly rigid templates. A comprehensive analysis of user requirements for the JDM was conducted, during which it became clear that users favoured more explicit control over all aspects of the content of a job description, even if it came at the expense of convenience of composition. The idea of prepackaged templates as a basis for conceptual job descriptions—for example, classifications of Key Activities likely to be associated with department heads, middle management, clerical staff, etc.—met with some resistance, since it might prejudice the outcome of job evaluation. Users also expressed a desire for a convenient means of adding to the collection of concepts available, in the event that they did not find what they needed for a particular job description. 3. Functionality The EXCLASS JDM comprises two modules: the Job Description Builder (JDB) and the Job Description Generator (JDG). The JDB supports composition and editing of conceptual representations, which take the form of trees of concepts drawn from a structured conceptual dictionary. The JDG produces text from these representations, by combining realization templates associated with each concept. The next three sections describe the conceptual dictionary, conceptual forms, and the structure of the generator. 3.1 Knowledge Representation The dictionary of concepts used in the JDB to compose conceptual representations comprises several disjoint hierarchies of entities which figure in job descriptions. The current dictionary covers a sample of some 30 job descriptions in English and French, although the analysis on which it was based encompassed at least twice that number. In order to determine just what the entities represented in the conceptual dictionary should be, we began with the following criteria, which derive from the functional requirements: order to provide a basis for suitable input to the Job Evaluation Module and the Job Description Generator, concepts should be free of the ambiguities observed in textual job descriptions. These ambiguities have three main sources: • multiple word senses; • attachment of dependent phrases; • scope of conjunction. 2. In order to allow managers, who have little or no training in knowledge representation, to work with conceptual representations at the most detailed level, concepts should introduce as little specialized notation as possible. The first criterion calls for concepts which are abstracted from surface linguistic forms, while the second says that they should be close to surface forms, since that is what managers are accustomed to working with when they write job descriptions. In order to satisfy these conflicting criteria, concepts were designed to correspond to surface words or phrases as closely as possible, while remaining free of ambiguities. Concepts corresponding to different senses of the same word are annotated with distinguishing la- [activity] (as in negotiating price cost elements for multi-phase contracts) negotiations [process] (as in conducting negotiations with solesuppliers). corresponding to surface forms which take dependent phrases are associated with semantic roles (see below). And concepts contain only conjunctions (e.g. Banff National Park and region). With regard to the appropriate granularity of concepts, again there were conflicting criteria: 3. Concepts should be fine-grained enough to permit users to express the distinctions that are important to them. 4. Concepts should be coarse-grained enough that editing of conceptual representations is not more burdensome than editing text. Again, the approach adopted was to make concepts just fine-grained enough to account for collocational patterns observed in the corpus (through analysis of concordances). The conceptual dictionary is structured using a representation similar to KL-ONE (Woods &amp; Schmolze, 1992). Concepts are arranged in hierarchies from most general to most specific, and associated with semantic roles and &amp;quot;structural conditions&amp;quot; on those roles. For exthe concept [process] is child of kind of&amp;quot;) the concept has roles for action involved (e.g. leading), is negotiated (e.g. agreements), who being negotiated with (e.g. foreign government representatives). The structural conditions on a concept&apos;s roles are expressed partly in terms of a division of the set of concepts into subsets of different types: Object (e.g. systems for secure special inventory counts), can serve as roots of conceptual forms (see the next section). Domain (e.g. management, warecustodial warehousing), correspond to occupational groupings. Body (e.g. Parks Service, industry sales representatives, other service providers), which denote types of individuals or corporate entities. 2 Location (e.g. Region, National Capital Region Supply Centre). Purpose (e.g. ensure adequate service, to ensure that all aspects of contracts have been completed). Action (e.g. maintaining, approving). Object concepts form a hierarchy descending from most general concept of are also referred to as &amp;quot;aspects of service&amp;quot;). There are separate hierarchies for domains, bodies, and locations; purposes and actions are not hierarchically structured. In general, it is object concepts that have roles, which are filled by concepts of appropriate other types. The structural conditions on roles taking values from one of the hierarchies list a default (most typical) value for the filler, as well as a most-general possible value. When values come from a non-structured set, such as actions, the structural conditions consist of a list of possible values. The conceptual dictionary is also structured according to occupational domains. Concepts peculiar to certain domains are marked with features corresponding to domains—for example, is procurement handling equipment is warehousing concept. The &amp;quot;aspects of service&amp;quot; hierarchy is based not just on &amp;quot;kind of&apos; relations, but also &amp;quot;aspect of&apos; relations— example, contracts are &amp;quot;kind of&apos; concosts are &amp;quot;aspect of&apos; operof concept roles and attributes through &amp;quot;kind of&apos; links is used as the basis of the concept acquisition interface (see the last section), although it is not used for retrieving concept data. The exact naand implementation of inheritance on &amp;quot;aspect links is a topic for future research. 3.2 Conceptual Forms In order to compose and edit representations of job descriptions, the user works with conceptual forms. A conceptual form is a tree of concepts, whose arcs correspond to semantic roles associated with concepts. Visually, concepts in trees are presented as frames with slots named for semantic roles, into which the user can insert other concepts. This was seen as the best way of giving users control over the most detailed aspects of conceptual representations, while keeping their visual presentation relatively simple. An example of the conceptual form of a Key Activity is shown in Figure 2. The MAIN CONCEPT slot of the Key Activity frame takes one or more &amp;quot;aspect of service&amp;quot; concepts as values. The frame for a Result statement corresponds to the central concept slots for NATURE OF SERVICE and CLIENT OF SERVICE. The basic editing operation for constructing conceptual forms is to highlight a slot, then select a concept I it. rp111,1 I Conceptual Form: .imuisiviarT rem&amp; _ ACTION FOR METHODS: dwalopag implmmeing NATURE OF METHODS: cistiibution Isdaliquft ACTION FOR TECHNIQUES: Doveleplop libibuliew I ( Parte I r Delete 1 =I 1=1 1 Solact Concept.. I Text Preview Dinnampilg and implmonling diabilsulisn rill•d. muI tochnigpxr. OK j i Figure 2: Example of a conceptual form. to go in that slot. For slots taking values from hierarchically-structured subsets of the vocabulary, such as objects or locations, the user can browse through the relevant hierarchy, subject to the conditions described earlier (Figure 3). The concept browser shows a &amp;quot;focused&amp;quot; concept, together with its parents and children; the user moves up or down by shifting the focus to a parent or child (a Find Concept function is also available). When values are from a non-structured subset (e.g. actions), selection is from a flat list of possible values. Figure 3: The concept browser. Editing of existing conceptual forms is supported by cut, copy and paste functions, which operate on subtrees of conceptual forms. The same operations are defined for whole statements, so that users can move conceptual structures of any size within the same job description, or between different ones. A notable feature of conceptual forms is that, contrary to usual linguistic practice, object concepts (which in general correspond to grammatical direct objects) are the roots, while action concepts are the dependents. The rationale behind this is that it is relatively straightforward to structure objects into a reasonably deep, exhaustive, and intuitive hierarchy, whereas this would be very difficult for actions. The set of actions can be implicitly structured, however, by constructing lists of actions appropriate for use with any given object. The reason for sets of concepts is to aid the user in compo- 3 sition, so that s/he only has to choose from a small number of alternative concepts at any one point. So the implicit structuring of actions according to whether they can occur with a given object is only useful if the user selects the object first, and then the actions. Above the level of conceptual forms for individual statements of various types, there is currently no meaningful representation of a job description as a whole, except that the domains listed under NATURE OF SERVICE in Result statements are used to &amp;quot;trim&amp;quot; the concepts displayed in the browser when composing the rest of the job to only those relevant to those domains. How to represent links or enforce consistency between different statements—in particular between Results/Key Activities and Substantiating Data—is a topic of ongoing research by the developers, and discussion by potential users. 3.3 Linguistic Realization Given the close correspondence between conceptual forms and surface linguistic forms, we decided to re-examine our initial assumption that the Job Description Generator would be implemented by adapting CoGenTex&apos;s existing text-generation shell. Versions of this generator, based on Meaning-Text Theory (MeRtik &amp; Pertsov, 1987), have been used in other applications, including the generation of bilingual weather forecasts (Goldberg et al., to appear) and statistical reports (Iordanskaja et al., 1992). In order to produce text suitable to these applications, the generator starts with deep conceptual representations, successively deriving deep-syntactic, surface-syntactic, morphological, and surface representations. It also incorporates sophisticated mechanisms for text planning and paraphrase. For several reasons, the existing generator was considered unsuitable for this application. The main rationale was that, since concepts already resembled pieces of surface text, those pieces should not be reconstructed by the generator unless this was necessary to produce text of acceptable quality. If the words and phrases corresponding to concepts could be given just enough linguistic structure that a simplified generator could combine them more or less directly to produce text, then it would be a waste of effort to decompose them to the level of detail on which the existing generator operated, only to regenerate aspects of surface form that were already present in concept labels. Another factor favouring a simplified generator design was the decision, following the design of the conceptual forms, to include a &amp;quot;continuous text feedback&amp;quot; function in the JDM interface. Again, since users were unaccustomed to working with conceptual representations, it would be useful if they could confirm their choices on the conceptual level with textual feedback from the JDG. The JDM&apos;s conceptual editor (Figure 2 above) incorporates a text preview area, which is updated every time a change is made to the conceptual form. It also has the feature of displaying text even for incomplete conceptual forms. The existing generator did not have the level of real-time performance demanded by this feature (on a 386-PC platform), or the ability to generate incomplete phrases. A simplified generator design was facilitated by certain linguistic properties of job descriptions: • When statements are not simple clauses, they follow fairly rigid templates. All conjunctions except be treated as parts of concepts (e.g. purpose concept ensure that all aspects of contracts have been completed) . • Referring expressions are always either generic or proper noun phrases (no pronouns or definite/indefinite distinctions). • There is very little morphology to deal with—there is no agreement, due to the lack of subjects, and the fact that adjectives and articles can always be treated as part of the same concept as the noun they modify. Given these facts, all the generator has to do is select different alternatives for realization of concepts in some cases, concatenate phrases, and perform ellipsis resulting from conjunctions. Text planning is performed manually by users—they can order clauses in a Key Activity, or actions for an object, in the same way that they order Key Activities in a job description. The generator is in the spirit of a Montague-style categorial grammar (Dowty et al., 1981), except that operations of function application and composition, rather than operating on semantic objects in parallel with the concatenation of surface elements, operate in effect on the surface elements themselves. In order to illustrate its operation, consider the conceptual form in 4, which is realized as performance of routine and special assignments to ensure adequate service: key activity MAIN CONCEPT: activities of others ACTION FOR ACTIVITIES OF OTHERS: supervising MAIN CONCEPT OF ACTIVITIES OF OTHERS: routine assignments ACTION FOR ROUTINE ASSIGNMENTS: performing PURPOSE OF PERFORMANCE: ensure adequate service special assignments ACTION FOR SPECIAL ASSIGNMENTS: performing PURPOSE OF PERFORMANCE: ensure adequate service 4: form for a complex Key Activity statement Each concept in the dictionary is associated with one or more realization templates, which are complex built up from surface words or phrases, cer- 4 (MAIN: gerund) activities of others (ACTION: gerund)* (MAIN: nominal) supervising (gerundive form) routine assignments (gerundive form) (ACTION: gerund)* (&amp;quot;routine&apos; *&amp;quot; assignments&amp;quot;) performing (nominal form) performance&amp;quot;* (&amp;quot;of&amp;quot; * x))* adequate service &amp;quot;to&amp;quot; * (&amp;quot; ensure&amp;quot;* (&amp;quot; adequate&amp;quot; *&amp;quot; service&amp;quot;)) special assignments (gerundive form) (ACTION: gerund)* (&amp;quot;special&amp;quot; *&amp;quot; assignments&amp;quot;) f( Ax((&amp;quot; peiformance&amp;quot; * (&amp;quot;of&amp;quot; * x))* (&amp;quot;to&amp;quot; * (&amp;quot;ensure&amp;quot; * (&amp;quot;adequate&amp;quot; *&amp;quot; service&amp;quot;))))* (&amp;quot;routine&amp;quot; *&amp;quot; assignments&amp;quot;) performance&amp;quot; *(&amp;quot; of &amp;quot; * x))*(&amp;quot; to&amp;quot; * (&amp;quot; ensure&amp;quot; * (&amp;quot;adequate&amp;quot; *&amp;quot; service&amp;quot;))))* (&amp;quot; special&amp;quot; *&amp;quot; assignments&amp;quot;)) ((&amp;quot; performance&amp;quot; * (&amp;quot;of&amp;quot; * (&amp;quot;routine&amp;quot; *&amp;quot; assignments&amp;quot;)))* (&amp;quot; to&amp;quot; * (&amp;quot;ensure&amp;quot; * (&amp;quot;adequate&amp;quot; * &amp;quot;service&amp;quot;)))) ((&amp;quot; performance&amp;quot; * (&amp;quot; of&amp;quot; * (&amp;quot;special&amp;quot; *&amp;quot; assignments&amp;quot;)))*(&amp;quot; to&amp;quot; * (&amp;quot;ensure&amp;quot; * (&amp;quot; adequate&amp;quot; *&amp;quot; service&amp;quot;)))) *((&amp;quot; performance&amp;quot; * (&amp;quot;of&amp;quot; * ((&amp;quot;routine&amp;quot; &amp;&amp;quot; special&amp;quot;)*&amp;quot; assignments&amp;quot;)))*(&amp;quot; to&amp;quot; * (&amp;quot;ensure&amp;quot; * (&amp;quot;adequate&amp;quot; *&amp;quot; service&amp;quot;)))) 5: in the derivation of a Key Activity statement C. &amp;quot; supervising&amp;quot; * lain operators, and variables corresponding to the concept&apos;s slots&apos;. The relevant English templates for the concepts in Figure 4 are shown in Figure 5a. Expressions of the form &lt;SLOT:type&gt; specify how the contents of a slot are to be realized—i.e., using which of the available templates. For example, a Key Activity frame is realized by realizing the contents of its CONCEPT slot as a gerund. The of which essentially represents a Key Activity embedded within another, is realized by concatenating the gerundive form of its action with the nominal realization of the embedded frame. The first step the generator performs is to instantiate these expressions to the correct forms, and conjoin multiple of a single slot with the &amp; resulting in the form in Figure 5b. The next step is to reduce lambda expressions, which gives 5c. Ellipsis is then performed, giving the form in 5d. Finally, occurrences of the &amp; operator are lexicalized as either commas or appropriate. The operators used in realization templates, other than A. and &amp;, serve to represent structure which is consulted by the rules for lambda reduction and ellipsis. reduction of an expression a of A in which all occurrences of one) replaced with is used for a &amp;quot;wrap&amp;quot; effect in 1There are rules in some cases for deriving variant templates for a concept from a basic template. For example, the gerundive (basic) template for an object in general has the form :gerund&gt;* ...; nominal form is derived from this simply by specifying the nominal form of the action. cases where actions have dependents, as well as in nominalizations—in these cases the dependence of actions on objects in conceptual forms cannot be undone simply by concatenating the action to the left of the object. The lambda notation is also used to specify connecting phrases (usually prepositions) which are associated with the slots of certain concepts, and introduced by the genexample, in realizing the phrase contractors, preposition introduced by concatenating the connecting-phrase expression x) with the NEGOTIATIONS WITH WHOM slot to the left of the slot&apos;s realization, slots are empty, the connecting phrase is omitted—this is mainly what accounts for the generator&apos;s ability to produce incomplete phrases (in some cases, conceptual forms with empty slots can produce acceptable phrases). basic rules for ellipsis are B)&amp;(A*C) (B&amp;C) C)&amp; (B* C) (A&amp; B)*C . are other rules which optimize conjunctions to some degree by reordering conjuncts, but the overall approach is to let users control the order manually. An operator # is used in place of * to block ellipsis, and an operator \ cases in French where an introduced durellipsis, according to the rules (B I C) (A (B\C) (A&amp; B)I C / is lexicalized as example, realized as contrats d fournisseur unique ou 5 multiples, not as contrats a fournisseur et a etapes multiples contrats dfournisseur unique ou etapes multiples. Grammatical differences between French and English are dealt with by assigning different structures, sometimes using different operators, to the English and French templates for a given concept, but there are also cases where the lexicalization of a concept depends on concept in the context—for example, performspecial assignments as les affecspeciales, post-contract as le suivi des contrats. are modelled using the MU notion of example, the values in English and of the (&amp;quot;verb denoting the most action of the first actant&amp;quot;) performing exthe concept assignments/affectations the concept cleanup/suivi des contrats. functions are implemented in the conceptual dictionary as &amp;quot;virtual&amp;quot; concepts, with pointers to actual concepts for each language. Users can switch the language in which conceptual forms are displayed (independently of the language in which text is generated), and when they do so, the appropriate actual concepts are displayed, with no explicit indication of the underlying virtual concept. This means, for example, that a user could copy the the ACTION slot of des conpaste it into the ACTION slot of its label would change to The generator design described in this section has several advantages for this type of application: • It takes full advantage of the similarity of concepts to surface linguistic forms, which was dictated by the functional requirements. Phrases are generated as chunks wherever possible, while still being assigned enough linguistic structure to produce adequate text. • Given the large volumes of concepts anticipated, maintenance of realization templates will presumably be simplified if they do not refer to lexical entries in a main dictionary, and if a constrained grammatical formalism is employed. • Incomplete phrases can be generated straightforwardly, in order to support the text preview function. 4. Research Topics The main concern for deployment of EXCLASS on a large scale is how to deal with the large volumes of concepts which will be required. A concept acquisition interface has been designed to support expansion of the dictionary. The acquisition interface is invoked from the concept browser, when the user has determined that the desired concept is not already available. The user selects a concept from the browser to be the parent of the new concept in the relevant hierarchy. The attributes of the new concept (label, slot types and possible values, realization templates) can then be edited, starting with default values. The defaults are inherited from the parent concept, on the assumption that the new concept is a &amp;quot;kind of&amp;quot; the parent. The nature of inheritance through &amp;quot;aspect of&amp;quot; links is a topic for future research. Another topic of research is how to possibly enrich representations of a job as a whole, as well as of individual concepts. The JEM developers are experimenting with comparisons of job descriptions based on fuzzy distance measures, which in turn are based on the positions of individual concepts in the hierarchy. Action concepts are difficult to compare, since they are currently unstructured. Adding some sort of structure, such as ranking the possible actions for a given object, could facilitate job comparison, as well as treating linguistic phenomena such as &amp;quot;asymmetric&amp;quot; conjunction (developing and implementing methods vs. *implementing and developing methods). Finally, research is being conducted on different usage modes for the JDM interface—in particular, an &amp;quot;expert&amp;quot; mode in which the user could enter the text of simple (non-conjoined) statements and have it parsed to some extent (using an elaborated &amp;quot;fmd&amp;quot; function) into a conceptual form, rather than performing repetitive point-and-click operations.</abstract>
<title confidence="0.841143">References</title>
<author confidence="0.853243">David Dowty</author>
<author confidence="0.853243">Robert Wall</author>
<author confidence="0.853243">Stanley Peters</author>
<note confidence="0.693938782608696">to Montague Semantics. Reidel, 1981. Eli Golberg, Richard Kittredge, and Norbert Driedger. A new approach to the synthesis of weather forecast text. To in Expert. Track on Processing Natural Language) L. Iordanskaja, M. Kim, R. Kittredge, B. Lavoie, and A. Polguere. Generation of extended bilingual statistical In of the 14th International Conference on Computational Linguistics (COLING-1992), volume 3, pages 1019-1023, 1992. Tatiana Korelsky and David Caldwell. Concept-based composition of job descriptions with automatic text In of the Canadian DND Combined in Advanced Technologies, Ottawa, 1993. MeMuk and Nikolaj Pertsov. Syntax of English: A Formal Model within the Meaning-Text John Benjamins, 1987. William Woods and James Schmolze. The KL-ONE family. and Mathematics with Applications, 23, no. 2-5, pages 133-177, 1992. 6</note>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>David Dowty</author>
<author>Robert Wall</author>
<author>Stanley Peters</author>
</authors>
<title>Introduction to Montague Semantics.</title>
<date>1981</date>
<location>Dordrecht: Reidel,</location>
<contexts>
<context position="18526" citStr="Dowty et al., 1981" startWordPosition="2871" endWordPosition="2874">ement, due to the lack of subjects, and the fact that adjectives and articles can always be treated as part of the same concept as the noun they modify. Given these facts, all the generator has to do is select different alternatives for realization of concepts in some cases, concatenate phrases, and perform ellipsis resulting from conjunctions. Text planning is performed manually by users—they can order clauses in a Key Activity, or actions for an object, in the same way that they order Key Activities in a job description. The generator is in the spirit of a Montague-style categorial grammar (Dowty et al., 1981), except that operations of function application and composition, rather than operating on semantic objects in parallel with the concatenation of surface elements, operate in effect on the surface elements themselves. In order to illustrate its operation, consider the conceptual form in Figure 4, which is realized as Supervising performance of routine and special assignments to ensure adequate service: key activity MAIN CONCEPT: activities of others ACTION FOR ACTIVITIES OF OTHERS: supervising MAIN CONCEPT OF ACTIVITIES OF OTHERS: routine assignments ACTION FOR ROUTINE ASSIGNMENTS: performing </context>
</contexts>
<marker>Dowty, Wall, Peters, 1981</marker>
<rawString>David Dowty, Robert Wall, and Stanley Peters. Introduction to Montague Semantics. Dordrecht: Reidel, 1981.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Eli Golberg</author>
<author>Richard Kittredge</author>
<author>Norbert Driedger</author>
</authors>
<title>A new approach to the synthesis of weather forecast text.</title>
<date>1992</date>
<journal>IEEE Expert. (Special Track on Processing Natural Language)</journal>
<booktitle>In Proceedings of the 14th International Conference on Computational Linguistics (COLING-1992),</booktitle>
<volume>3</volume>
<pages>1019--1023</pages>
<note>To appear in</note>
<marker>Golberg, Kittredge, Driedger, 1992</marker>
<rawString>Eli Golberg, Richard Kittredge, and Norbert Driedger. A new approach to the synthesis of weather forecast text. To appear in IEEE Expert. (Special Track on Processing Natural Language) L. Iordanskaja, M. Kim, R. Kittredge, B. Lavoie, and A. Polguere. Generation of extended bilingual statistical reports. In Proceedings of the 14th International Conference on Computational Linguistics (COLING-1992), volume 3, pages 1019-1023, 1992.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Tatiana Korelsky</author>
<author>David Caldwell</author>
</authors>
<title>Concept-based composition of job descriptions with automatic text generation.</title>
<date>1993</date>
<booktitle>In Proceedings of the Canadian DND Combined Workshop in Advanced Technologies,</booktitle>
<location>Ottawa,</location>
<contexts>
<context position="1475" citStr="Korelsky &amp; Caldwell 1993" startWordPosition="215" endWordPosition="218">he close correspondence of concepts to surface words and phrases, as well as properties of the job description sublanguage, permit a simplified generator design, whereby phrases are prepackaged with a certain amount of linguistic structure, and combined according to a small set of mostly language-independent rules. Text planning, consisting mainly of grouping and ordering of conjoined phrases, is performed manually by the user, and composition of conceptual forms is supported by a &amp;quot;continuous text feedback&amp;quot; function. 1. Goals of EXCLASS The EXCLASS system (described on a more general level in Korelsky &amp; Caldwell 1993) is intended to provide intelligent support for the process of describing and evaluating jobs in the Canadian Public Service. The Job Description Module (JDM) of EXCLASS, developed by CoGenTex for the Canadian Treasury Board, provides resources for the user to compose conceptual representations of job descriptions. The JDM generates textual job descriptions in both English and French from these representations; a Job Evaluation Module (JEM) also reasons on them to produce a classification and rating of a job, according to the government&apos;s evolving Universal Classification Standard. The first p</context>
</contexts>
<marker>Korelsky, Caldwell, 1993</marker>
<rawString>Tatiana Korelsky and David Caldwell. Concept-based composition of job descriptions with automatic text generation. In Proceedings of the Canadian DND Combined Workshop in Advanced Technologies, Ottawa, November 1993.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Igor MeMuk</author>
<author>Nikolaj Pertsov</author>
</authors>
<title>Surface Syntax of English: A Formal Model within the Meaning-Text Framework.</title>
<date>1987</date>
<location>Amsterdam: John Benjamins,</location>
<marker>MeMuk, Pertsov, 1987</marker>
<rawString>Igor MeMuk and Nikolaj Pertsov. Surface Syntax of English: A Formal Model within the Meaning-Text Framework. Amsterdam: John Benjamins, 1987.</rawString>
</citation>
<citation valid="true">
<authors>
<author>William Woods</author>
<author>James Schmolze</author>
</authors>
<title>The KL-ONE family.</title>
<date>1992</date>
<journal>Computers and Mathematics with Applications,</journal>
<volume>23</volume>
<pages>2--5</pages>
<contexts>
<context position="8547" citStr="Woods &amp; Schmolze, 1992" startWordPosition="1287" endWordPosition="1290">region). With regard to the appropriate granularity of concepts, again there were conflicting criteria: 3. Concepts should be fine-grained enough to permit users to express the distinctions that are important to them. 4. Concepts should be coarse-grained enough that editing of conceptual representations is not more burdensome than editing text. Again, the approach adopted was to make concepts just fine-grained enough to account for collocational patterns observed in the corpus (through analysis of concordances). The conceptual dictionary is structured using a representation similar to KL-ONE (Woods &amp; Schmolze, 1992). Concepts are arranged in hierarchies from most general to most specific, and associated with semantic roles and &amp;quot;structural conditions&amp;quot; on those roles. For example, the concept negotiations [process] is a child of (&amp;quot;a kind of&amp;quot;) the concept interactions, and has roles for the action involved (e.g. conducting, leading), what is being negotiated (e.g. contracts, agreements), and who is being negotiated with (e.g. suppliers, foreign government representatives). The structural conditions on a concept&apos;s roles are expressed partly in terms of a division of the set of concepts into subsets of differ</context>
</contexts>
<marker>Woods, Schmolze, 1992</marker>
<rawString>William Woods and James Schmolze. The KL-ONE family. Computers and Mathematics with Applications, volume 23, no. 2-5, pages 133-177, 1992.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>