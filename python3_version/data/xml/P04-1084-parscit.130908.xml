<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<title confidence="0.98951">
Generalized Multitext Grammars
</title>
<author confidence="0.975487">
I. Dan Melamed
</author>
<affiliation confidence="0.9861">
Computer Science Department
</affiliation>
<address confidence="0.851338333333333">
New York University
715 Broadway, 7th Floor
New York, NY, 10003, USA
</address>
<email confidence="0.997371">
lastname @cs.nyu.edu
</email>
<author confidence="0.996492">
Giorgio Satta
</author>
<affiliation confidence="0.9979">
Dept. of Information Eng’g
University of Padua
</affiliation>
<address confidence="0.9040765">
via Gradenigo 6/A
I-35131 Padova, Italy
</address>
<email confidence="0.991607">
lastname @dei.unipd.it
</email>
<author confidence="0.995212">
Benjamin Wellington
</author>
<affiliation confidence="0.995295">
Computer Science Department
</affiliation>
<address confidence="0.852062333333333">
New York University
715 Broadway, 7th Floor
New York, NY, 10003, USA
</address>
<email confidence="0.998455">
lastname @cs.nyu.edu
</email>
<sectionHeader confidence="0.993839" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999161714285714">
Generalized Multitext Grammar (GMTG) is a syn-
chronous grammar formalism that is weakly equiv-
alent to Linear Context-Free Rewriting Systems
(LCFRS), but retains much of the notational and in-
tuitive simplicity of Context-Free Grammar (CFG).
GMTG allows both synchronous and independent
rewriting. Such flexibility facilitates more perspic-
uous modeling of parallel text than what is possible
with other synchronous formalisms. This paper in-
vestigates the generative capacity of GMTG, proves
that each component grammar of a GMTG retains
its generative power, and proposes a generalization
of Chomsky Normal Form, which is necessary for
synchronous CKY-style parsing.
</bodyText>
<sectionHeader confidence="0.998993" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999680865671642">
Synchronous grammars have been proposed for
the formal description of parallel texts representing
translations of the same document. As shown by
Melamed (2003), a plausible model of parallel text
must be able to express discontinuous constituents.
Since linguistic expressions can vanish in transla-
tion, a good model must be able to express inde-
pendent (in addition to synchronous) rewriting. In-
version Transduction Grammar (ITG) (Wu, 1997)
and Syntax-Directed Translation Schema (SDTS)
(Aho and Ullman, 1969) lack both of these prop-
erties. Synchronous Tree Adjoining Grammar
(STAG) (Shieber, 1994) lacks the latter and allows
only limited discontinuities in each tree.
Generalized Multitext Grammar (GMTG) offers
a way to synchronize Mildly Context-Sensitive
Grammar (MCSG), while satisfying both of the
above criteria. The move to MCSG is motivated
by our desire to more perspicuously account for
certain syntactic phenomena that cannot be easily
captured by context-free grammars, such as clitic
climbing, extraposition, and other types of long-
distance movement (Becker et al., 1991). On the
other hand, MCSG still observes some restrictions
that make the set of languages it generates less ex-
pensive to analyze than the languages generated by
(properly) context-sensitive formalisms.
More technically, our proposal starts from Mul-
titext Grammar (MTG), a formalism for synchro-
nizing context-free grammars recently proposed by
Melamed (2003). In MTG, synchronous rewriting
is implemented by means of an indexing relation
that is maintained over occurrences of nonterminals
in a sentential form, using essentially the same ma-
chinery as SDTS. Unlike SDTS, MTG can extend
the dimensionality of the translation relation be-
yond two, and it can implement independent rewrit-
ing by means of partial deletion of syntactic struc-
tures. Our proposal generalizes MTG by moving
from component grammars that generate context-
free languages to component grammars whose gen-
erative power is equivalent to Linear Context-Free
Rewriting Systems (LCFRS), a formalism for de-
scribing a class of MCSGs. The generalization is
achieved by allowing context-free productions to
rewrite tuples of strings, rather than single strings.
Thus, we retain the intuitive top-down definition of
synchronous derivation original in SDTS and MTG
but not found in LCFRS, while extending the gen-
erative power to linear context-free rewriting lan-
guages. In this respect, GMTG has also been in-
spired by the class of Local Unordered Scattered
Context Grammars (Rambow and Satta, 1999). A
syntactically very different synchronous formalism
involving LCFRS has been presented by Bertsch
and Nederhof (2001).
This paper begins with an informal description of
GMTG. It continues with an investigation of this
formalism’s generative capacity. Next, we prove
that in GMTG each component grammar retains its
generative power, a requirement for synchronous
formalisms that Rambow and Satta (1996) called
the “weak language preservation property.” Lastly,
we propose a synchronous generalization of Chom-
sky Normal Form, which lays the groundwork for
synchronous parsing under GMTG using a CKY-
style algorithm (Younger, 1967; Melamed, 2004).
</bodyText>
<sectionHeader confidence="0.968188" genericHeader="method">
2 Informal Description and Comparisons
</sectionHeader>
<bodyText confidence="0.9999025">
GMTG is a generalization of MTG, which is itself
a generalization of CFG to the synchronous case.
Here we present MTG in a new notation that shows
the relation to CFG more clearly. For example, the
following MTG productions can generate the multi-
text [(Ifed the cat), (ya kota kormil)]:1
</bodyText>
<equation confidence="0.997633">
(S) (S) PN VP PN VP (1)
PN PN I ya (2)
VP VP V NP NP V (3)
V V fed kormil (4)
NP NP DN N (5)
D the (6)
N N cat kota (7)
</equation>
<bodyText confidence="0.975097533333333">
Each production in this example has two com-
ponents, the first modeling English and the sec-
ond (transliterated) Russian. Nonterminals with the
same index must be rewritten together (synchronous
rewriting). One strength of MTG, and thus also
GMTG, is shown in Productions (5) and (6). There
is a determiner in English, but not in Russian, so
Production (5) does not have the nonterminal D in
the Russian component and (6) applies only to the
English component (independent rewriting). For-
malisms that do not allow independent rewriting re-
quire a corresponding to appear in the second
component on the right-hand side (RHS) of Produc-
tion (5), and this would eventually generate the
empty string. This approach has the disadvantage
that it introduces spurious ambiguity about the po-
sition of the “empty” nonterminal with respect to
the other nonterminals in its component. Spurious
ambiguity leads to wasted effort during parsing.
GMTG’s implementation of independent rewrit-
ing through the empty tuple () serves a very differ-
ent function from the empty string. Consider the
following GMTG:
Production (8) asserts that symbol vanishes in
translation. Its application removes both of the non-
terminals on the left-hand side (LHS), pre-empting
any other production. In contrast, Production (9)
&apos;We write production components both side by side and one
above another to save space, but each component is always in
parentheses.
explicitly relaxes the synchronization constraint, so
that the two components can be rewritten indepen-
dently. The other six productions make assertions
about only one component and are agnostic about
the other component. Incidentally, generating the
same language with only fully synchronized pro-
ductions would raise the number of required pro-
ductions to 11, so independent rewriting also helps
to reduce grammar size.
Independent rewriting is also useful for model-
ing paraphrasing. Take, for example, [(Tim got a
pink slip), (Tim got laid off)]. While the two sen-
tences have the same meaning, the objects of their
verb phrases are structured very differently. GMTG
can express their relationships as follows:
</bodyText>
<equation confidence="0.999865909090909">
S S NP VP NP VP (12)
VP VP V NP V PP (13)
NP PP DT A N VB R (14)
NP NP Tim Tim (15)
V V got got (16)
DT a (17)
A pink (18)
N slip (19)
VB laid (20)
off✠
R (21)
</equation>
<bodyText confidence="0.999657421052632">
As described by Melamed (2003), MTG requires
production components to be contiguous, except af-
ter binarization. GMTG removes this restriction.
Take, for example, the sentence pair [(The doctor
treats his teeth), (El m´edico le examino los dientes)]
(Dras and Bleam, 2000). The Spanish clitic le and
the NP los dientes should both be paired with the
English NP his teeth, giving rise to a discontinuous
constituent in the Spanish component. A GMTG
fragment for the sentence is shown below:
Note the discontinuity between le and los dientes.
Such discontinuities are marked by commas on both
the LHS and the RHS of the relevant component.
GMTG’s flexibility allows it to deal with many
complex syntactic phenomena. For example,
Becker et al. (1991) point out that TAG does not
have the generative capacity to model certain kinds
of scrambling in German, when the so-called “co-
occurrence constraint” is imposed, requiring the
</bodyText>
<figure confidence="0.967179666666667">
S S NP VP NP VP
VP VP V NP NP V NP
NP NP The doctor El m´edico
V V
NP NP NP his teeth le los dientes
treats examino
N has promised N S (22)
S N S N S versprochen hat
S
S
to indict N N (23)
N N zu ¨uberf¨uhren
</figure>
<bodyText confidence="0.976330176470588">
derivational pairing between verbs and their com-
plements. They examine the English/German sen-
tence fragment [(... that the detective has promised
the client to indict the suspect of the crime), (...
daß des Verbrechens der Detektiv den Verd¨achtigen
dem Klienten zu ¨uberf¨uhren versprochen hat)]. The
verbs versprochen and ¨uberf¨uhren both have two
noun phrases as arguments. In German, these noun
phrases can appear to the left of the verbs in any
order. The following is a GMTG fragment for the
above sentence pair2:
S
SSS
The discontinuities allow the noun arguments of
versprochen to be placed in any order with the noun
arguments of ¨uberf¨uhren. Rambow (1995) gives a
similar analysis.
</bodyText>
<sectionHeader confidence="0.999211" genericHeader="method">
3 Formal Definitions
</sectionHeader>
<bodyText confidence="0.994892578947369">
Let be a finite set of nonterminal symbols and
let be the set of integers.3 We define
.4 Elements of
will be called indexed nonterminal symbols. In
what follows we also consider a finite set of termi-
nal symbols , disjoint from, and work with
strings in , where . For ,
we define
, i.e. the set of indexes that ap-
pear in.
An indexed tuple vector, or ITV, is a vector of
tuples of strings over, having the form
where ,and for ,
. We write ,, to denote the
-th component ofand to denote the arity
of such a tuple, which is . When ,
is the empty tuple, written . This should not
be confused with , that is the tuple of arity one
containing the empty string. A link is an ITV where
</bodyText>
<footnote confidence="0.989962333333333">
2These are only a small subset of the necessary productions.
The subscripts on the nonterminals indicate what terminals they
will eventually yield; the terminal productions have been left
out to save space.
3Any other infinite set of indexes would suit too.
4The parentheses around indexes distinguish them from
other uses of superscripts in formal language theory. However,
we shall omit the parentheses when the context is unambigu-
ous.
</footnote>
<bodyText confidence="0.98194831372549">
each consists of one indexed nonterminal and all
of these nonterminals are coindexed. As we shall
see, the notion of a link generalizes the notion of
nonterminal in context-free grammars: each pro-
duction rewrites a single link.
Definition 1 Let be some integer con-
stant. A generalized multitext grammar with
dimensions (✑ -GMTG for short) is a tuple
where ,arefinite, disjoint sets
of nonterminal and terminal symbols, respectively,
is the start symbol and is a finite set of
productions. Each production has the form ,
where is a -dimensional link and is a -
dimensional ITV such that for
. If contains , then
We omit symbol from -GMTG whenever it is
not relevant. To simplify notation, we write pro-
ductions as , with each
, . I.e.
we omit the unique index appearing on the LHS of
. Eachis called a production component. The
production component is called the inactive
production component. All other production com-
ponents are called active and we set
. Inactive production components are
used to relax synchronous rewriting on some dimen-
sions, that is to implement rewriting on com-
ponents. When , rewriting is licensed on one
component, independently of all the others.
Two grammar parameters play an important role
in this paper. Let and
.
Definition 2 The rank of a production is
the number of links on its RHS:
. The rank of a
GMTG is
For example, the rank of Production (23) is two and
its fan-out is four.
In GMTG, the derives relation is defined over
ITVs. GMTG derivation proceeds by synchronous
application of all the active components in some
production. The indexed nonterminals to be rewrit-
ten simultaneously must all have the same index,
and all nonterminals indexed within the ITV must
be rewritten simultaneously. Some additional nota-
tion will help us to define rewriting precisely. A
reindexing is a one-to-one function on, and is
extended toby letting for
Definition 3 The fan-out of, and are, re-
spectively, , and
.
</bodyText>
<equation confidence="0.6439455">
.
.
</equation>
<bodyText confidence="0.710664625">
and for . We
also extend to strings in analogously. We
say that are independent if
.
Definition 4 Let be a
-GMTG and let with
and . Let
and be two ITVs with and
</bodyText>
<listItem confidence="0.247689">
. Assume thatis some con-
</listItem>
<bodyText confidence="0.614222">
catenation of all and thatis some concatena-
tion of all ,
holds
whenever there exists an index such that the
following two conditions are satisfied:
</bodyText>
<listItem confidence="0.533048666666667">
(i) for each we have
such that , and each
is obtained from by replacing each
with ;
(ii) for each we have
and .
</listItem>
<bodyText confidence="0.985277435897436">
We generalize the relation to and in
the usual way, to represent derivations.
We can now introduce the notion of generated
language (or generated relation). A start link
of a -GMTG is a -dimensional link where at
least one component is ,the start sym-
bol, and the rest of the components are . Thus,
there are start links. The language
generated by a -GMTG is
a start link or
. Each ITV in
is called a multitext. For every -GMTG,
can be partitioned into subsets, each
containing multitexts derived from a different start
link. These subsets are disjoint, since every non-
empty tuple of a start link is eventually rewritten as
a string, either empty or not.5
A start production is a production whose LHS
is a start link. A GMTG writer can choose the com-
binations of components in which the grammar can
generate, by including start productions with the de-
sired combinations of active components. If a gram-
mar contains no start productions with a certain
combination of active components, then the corre-
sponding subset of will be empty. Allow-
ing a single GMTG to generate multitexts with
5We are assuming that there are no useless nonterminals.
some empty tuples corresponds to modeling rela-
tions of different dimensionalities. This capability
enables a synchronous grammar to govern lower-
dimensional sublanguages/translations. For exam-
ple, an English/Italian GMTG can include Produc-
tion (9), an English CFG, and an Italian CFG. A
single GMTG can then govern both translingual
and monolingual information in applications. Fur-
thermore, this capability simplifies the normaliza-
tion procedure described in Section 6. Otherwise,
this procedure would require exceptions to be made
when eliminating epsilons from start productions.
</bodyText>
<sectionHeader confidence="0.999032" genericHeader="method">
4 Generative Capacity
</sectionHeader>
<bodyText confidence="0.921941888888889">
In this section we compare the generative capac-
ity of GMTG with that of mildly context-sensitive
grammars. We focus on LCFRS, using the no-
tational variant introduced by Rambow and Satta
(1999), briefly summarized below. Throughout this
section, strings and vectors of the form
will be identified. For lack of space, some
proofs are only sketched, or entirely omitted when
relatively intuitive: Melamed et al. (2004) provide
more details.
Let be some terminal alphabet. A function
has rank if it is defined on
, for integers
(24)
where represents some grouping into
strings of all and only the variables appearing in the
left-hand side, possibly with some additional termi-
nal symbols. (Symbols,and are overloaded
below.)
,
and is a finite set of productions of the form
, where ,
, and where is a linear
regular function having rank and fan-out
, defined on .
For every and , we write
if
</bodyText>
<listItem confidence="0.928235">
(i) and ; or else
</listItem>
<bodyText confidence="0.581518333333333">
, , and let be
some reindexing such that strings andare
independent. The derives relation
with
,
has fan-out if its range is a subset of .
Let , , ,and
, be string-valued variables. Function is linear
regular if it is defined by an equation of the form
</bodyText>
<figure confidence="0.494954">
. Also,
Definition 5 A Linear Context-Free Rewrit-
ing System (LCFRS) is a quadruple
</figure>
<bodyText confidence="0.898225363636364">
where, and are
as in GMTGs, every is associated
with an integer with
The language generated by is defined as
. Let ,
. The rank of
and are, respectively, and
. The fan-out ofand are, respec-
tively, and .
The proof of the following theorem is relatively
intuitive and therefore omitted.
</bodyText>
<figure confidence="0.937146695652174">
Theorem 1 For any LCFRS, there exists some
1-GMTGwith and
such that
.
Let . Also let
and let be the
number of occurrences of appearing in. We
define an alphabet
. For eachandwith
, and ,
we define a string over as fol-
lows. Let , each . Then
, where
in case
in case , whereis
the index of and the indicated occurrence
of is the -th occurrence of such symbol
appearing from left to right in string.
(ii)
; and
,
for every ,and
.
</figure>
<bodyText confidence="0.967406868852459">
Next, we show that the generative capacity of
GMTG does not exceed that of LCFRS. In order
to compare string tuples with bare strings, we in-
troduce two special functions ranging over multi-
texts. Assume two fresh symbols
. For a multitext we write
, where if and
otherwise, . For
a multitext with no empty
tuple, we write
. We extend both functions to
sets of multitexts in the obvious way:
and .
In a -GMTG, a production with active com-
ponents, , is said to be -active. A
-GMTG whose start productions are all -active
is called properly synchronous.
Lemma 1 For any properly synchronous -GMTG
, there exists some LCFRSwith
and such that .
Outline of the proof. We set
, where
, is the set of all indexes appearing
in the productions of, and is constructed as
follows. Let with
Next, for every possible, , andas above, we
add to a production
where
(each above satisfies ). Note
that is a function with rank and fan-out
. Thus we have
and . Without loss of generality,
we assume that contains only one production
with appearing on the left-hand side, having the
form .
To complete the construction of ,we then
add a last production where
.
We claim that, for each,andas above
iff . The
lemma follows from this claim.
The proof of the next lemma is relatively intuitive
and therefore omitted.
Lemma 2 For any -GMTG, there exists a prop-
erly synchronous -GMTGsuch that
, and
.
,
,
,and
. Assume thatcan rewrite the right-
hand side of , that is
,
Then there must be at least one indexsuch that for
each ,contains exactly
occurrences of.
Combining Lemmas 1 and 2, we have
Theorem 2 For any -GMTG, there exists
some LCFRS with and
such that
.
</bodyText>
<sectionHeader confidence="0.966267" genericHeader="method">
5 Weak Language Preservation Property
</sectionHeader>
<bodyText confidence="0.912654140350877">
GMTGs have the weak language preservation prop-
erty, which is one of the defining requirements of
synchronous rewriting systems (Rambow and Satta,
1996). Informally stated, the generative capacity of
the class of all component grammars of a GMTG
exactly corresponds to the class of all projected lan-
guages. In other words, the interaction among dif-
ferent grammar components in the rewriting process
of GMTG does not increase the generative power
beyond the above mentioned class. The next result
states this property more formally.
Let be a -GMTG with production set.
For , the-th component gram-
mar of, written ,is the 1-GMTG
with productions
projected language of is
. In general ,
because component grammars inter-
act with each other in the rewriting process of
. To give a simple example, consider the 2-
GMTG with productions ,
and
. Then
, and thus
. On the other hand,
. Let LCFRS be the class of all lan-
guages generated by LCFRSs. Also let and
be the classes of languages and
, respectively, for every , ev-
ery -GMTG and every with
Proof. The cases directly follow from Theo-
rem 1.
Let be some -GMTG and let be an integer
such that . It is not difficult to see that
. Hence
can be generated by some LCFRS, by
Theorem 2.
We now define a LCFRS such that
. Assume
is a properly synchronous -GMTG
generating (Lemma 2). Let
, where andare constructed
fromalmost as in the proof of Lemma 1.
The only difference is in the definition of strings
and the production rewriting , speci-
fied as follows (we use the same notation as in the
proof of Lemma 1). , where
for each : (i) if and ;
(ii) if and ; (iii)
if , with, as in the original proof.
Finally, the production rewriting has the form
, where
. To conclude the proof, note that
and can differ
only with respect to string . The theorem then fol-
lows from the fact that LCFRS is closed under in-
tersection with regular languages (Weir, 1988).
</bodyText>
<sectionHeader confidence="0.9888" genericHeader="method">
6 Generalized Chomsky Normal Form
</sectionHeader>
<bodyText confidence="0.999155714285714">
Certain kinds of text analysis require a grammar in a
convenient normal form. The prototypical example
for CFG is Chomsky Normal Form (CNF), which is
required for CKY-style parsing. A -GMTG is in
Generalized Chomsky Normal Form (GCNF) if it
has no useless links or useless terminals, and every
production is in one of two forms:
</bodyText>
<listItem confidence="0.659320666666667">
(i) A nonterminal production has rank = 2 and
no terminals or ’s on the RHS.
(ii) A terminal production has exactly one com-
</listItem>
<bodyText confidence="0.994019947368421">
ponent of the form , where and
. The other components are inactive.
The algorithm to convert a GMTG to GCNF has
the following steps: (1) add a new start-symbol (2)
isolate terminals, (3) binarize productions, (4) re-
move ’s, (5) eliminate useless links and terminals,
and (6) eliminate unit productions. The steps are
generalizations of those presented by Hopcroft et al.
(2001) to the multidimensional case with disconti-
nuities. The ordering of these steps is important, as
some steps can restore conditions that others elim-
inate. Traditionally, the terminal isolation and bi-
narization steps came last, but the alternative order
reduces the number of productions that can be cre-
ated during -elimination. Steps (1), (2), (5) and (6)
are the same for CFG and GMTG, except that the
notion of nonterminal in CFG is replaced with links
in GMTG. Some complications arise, however, in
the generalization of steps (3) and (4).
</bodyText>
<subsectionHeader confidence="0.999467">
6.1 Step 3: Binarize
</subsectionHeader>
<bodyText confidence="0.9486543">
The third step of converting to GCNF is binarization
of the productions, making the rank of the grammar
two. For and , we write D-GMTG to
represent the class of all -GMTGs with rank and
fan-out . A CFG can always be binarized into an-
other CFG: two adjacent nonterminals are replaced
with a single nonterminal that yields them. In con-
trast, it can be impossible to binarize a -GMTG
into an equivalent -GMTG . From results pre-
sented by Rambow and Satta (1999) it follows that,
</bodyText>
<figure confidence="0.986011928571428">
Similarly, the-th
.
Theorem 3 and
.
.
(S)
(S)
PdamoyNPatAranoVpashol
Pat went home early
NPatVwentPhomeAearly
damoy
Pat
rano
pashol
</figure>
<figureCaption confidence="0.98909">
Figure 1: A production that requires an increased
fan-out to binarize, and its 2D illustration.
</figureCaption>
<bodyText confidence="0.984811690476191">
for every fan-out and rank , there
are some index orderings that can be generated by
-GMTG but not -GMTG . The distin-
guishing characteristic of such index orderings is
apparent in Figure 1, which shows a production in
a grammar with fan-out two, and a graph that illus-
trates which nonterminals are coindexed. No two
nonterminals are adjacent in both components, so
replacing any two nonterminals with a single non-
terminal causes a discontinuity. Increasing the fan-
out of the grammar allows a single nonterminal to
rewrite as non-adjacent nonterminals in the same
string. Increasing the fan-out can be necessary even
for binarizing a 1-GMTG production such as:
To binarize, we nondeterministically split each
nonterminal production of rank into two
nonterminal productions and of rank , but
possibly with higher fan-out. Since this algorithm
replaces with two productions that have rank ,
recursively applying the algorithm to productions of
rank greater than two will reduce the rank of the
grammar to two. The algorithm follows:
(i) Nondeterministically chose links to be re-
moved from and replaced with a single link
to make , where
these links the m-links.
(ii) Create a new ITV. Two nonterminals are
neighbors if they are adjacent in the same
string in a production RHS. For each set of m-
link neighbors in component in , place that
set of neighbors into the ’th component of
in the order in which they appeared in , so
that each set of neighbors becomes a different
string, for .
(iii) Create a new unique nonterminal, say , and
replace each set of neighbors in production
with , to create . The production is
For example, binarization of the productions for the
English/Russian multitext [(Pat went home early),
(damoy Pat rano pashol)]6 in Figure 1 requires that
we increase the fan-out of the language to three. The
binarized productions are as follows:
</bodyText>
<figure confidence="0.983949666666667">
S
S
V Aearly (27)
V AranoV
(28)
Pdamoy Vpashol
</figure>
<subsectionHeader confidence="0.961007">
6.2 Step 4: Eliminate ’s
</subsectionHeader>
<bodyText confidence="0.997201789473684">
Grammars in GCNF cannot have ’s in their
productions. Thus, GCNF is a more restrictive
normal form than those used by Wu (1997) and
Melamed (2003). The absence of ’s simplifies
parsers for GMTG (Melamed, 2004). Given a
GMTG with in some productions, we give
the construction of a weakly equivalent gram-
mar without any ’s. First, determine all
nullable links and associated strings in. A
link
is nullable if ,where
is an
ITV where at least one is . We say the link
is nullable and the string at address in
is nullable. For each nullable link, we create
versions of the link, where is the number of
nullable strings of that link. There is one version for
each of the possible combinations of the nullable
strings being present or absent. The version of the
link with all strings present is its original version.
Each non-original version of the link (except in the
case of start links) gets a unique subscript, which is
applied to all the nonterminals in the link, so that
each link is unique in the grammar. We construct
a new grammarwhose set of productions
is determined as follows: for each production, we
identify the nullable links on the RHS and replace
them with each combination of the non-original
versions found earlier. If a string is left empty
during this process, that string is removed from the
RHS and the fan-out of the production component
is reduced by one. The link on the LHS is replaced
with its appropriate matching non-original link.
There is one exception to the replacements. If a
production consists of all nullable strings, do not
include this case. Lastly, we remove all strings on
the RHS of productions that have ’s, and reduce
the fan-out of the productions accordingly. Once
</bodyText>
<footnote confidence="0.954802">
6The Russian is topicalized but grammatically correct.
</footnote>
<figure confidence="0.969370666666667">
S,S NVPA PNAV (25)
. We call
VP
VP VP
V
VV
NPatVP (26)
VP NPatVP
VwentPhome
</figure>
<bodyText confidence="0.99816505">
again, we replace the LHS link with the appropriate
version.
Consider the example grammar:
We first identify which links are nullable. In this
case and are nullable so we
create a new version of both links:
and . We then alter the productions. Pro-
duction (31) gets replaced by (40). A new produc-
tion based on (30) is Production (38). Lastly, Pro-
duction (29) has two nullable strings on the RHS,
so it gets altered to add three new productions, (34),
(35) and (36). The altered set of productions are the
following:
Melamed et al. (2004) give more details about
conversion to GCNF, as well as the full proof of our
final theorem:
Theorem 4 For each GMTG there exists a
GMTGin GCNFgenerating the same set of mul-
titexts as but with each component in a multi-
text replaced by .
</bodyText>
<sectionHeader confidence="0.999671" genericHeader="conclusions">
7 Conclusions
</sectionHeader>
<bodyText confidence="0.99983775">
Generalized Multitext Grammar is a convenient and
intuitive model of parallel text. In this paper, we
have presented some formal properties of GMTG,
including proofs that the generative capacity of
GMTG is comparable to ordinary LCFRS, and that
GMTG has the weak language preservation prop-
erty. We also proposed a synchronous generaliza-
tion of Chomsky Normal Form, laying the founda-
tion for synchronous CKY parsing under GMTG. In
future work, we shall explore the empirical proper-
ties of GMTG, by inducing stochastic GMTGs from
real multitexts.
</bodyText>
<sectionHeader confidence="0.996658" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.964611833333333">
Thanks to Owen Rambow and the anonymous re-
viewers for valuable feedback. This research was
supported by an NSF CAREER Award, the DARPA
TIDES program, the Italian MIUR under project
PRIN No. 2003091149 005, and an equipment gift
from Sun Microsystems.
</bodyText>
<sectionHeader confidence="0.996149" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999807615384616">
A. Aho and J. Ullman. 1969. Syntax directed translations and
the pushdown assembler. Journal of Computer and System
Sciences, 3:37–56, February.
T. Becker, A. Joshi, and O. Rambow. 1991. Long-distance
scrambling and tree adjoining grammars. In Proceedings of
the 5th Meeting of the European Chapter of the Association
for Computational Linguistics (EACL), Berlin, Germany.
E. Bertsch and M. J. Nederhof. 2001. On the complexity
of some extensions of RCG parsing. In Proceedings of
the 7th International Workshop on Parsing Technologies
(IWPT), pages 66–77, Beijing, China.
M. Dras and T. Bleam. 2000. How problematic are clitics for
S-TAG translation? In Proceedings of the 5th International
Workshop on Tree Adjoining Grammars and Related For-
malisms (TAG+5), Paris, France.
J. Hopcroft, R. Motwani, and J. Ullman. 2001. Introduction to
Automota Theory, Languages and Computation. Addison-
Wesley, USA.
I. Dan Melamed, G. Satta, and B. Wellington. 2004. Gener-
alized multitext grammars. Technical Report 04-003, NYU
Proteus Project. http://nlp.cs.nyu.edu/pubs/.
I. Dan Melamed. 2003. Multitext grammars and synchronous
parsers. In Proceedings of the Human Language Technology
Conference and the North American Association for Com-
putational Linguistics (HLT-NAACL), pages 158–165, Ed-
monton, Canada.
I. Dan Melamed. 2004. Statistical machine translation by pars-
ing. In Proceedings of the 42nd Annual Meeting of the As-
sociation for Computational Linguistics (ACL), Barcelona,
Spain.
O. Rambow and G. Satta. 1996. Synchronous models of lan-
guage. In Proceedings of the 34th Annual Meeting of the As-
sociation for Computational Linguistics (ACL), Santa Cruz,
USA.
O. Rambow and G. Satta. 1999. Independent parallelism in
finite copying parallel rewriting systems. Theoretical Com-
puter Science, 223:87–120, July.
O. Rambow. 1995. Formal and Computational Aspects ofNat-
ural Language Syntax. Ph.D. thesis, University of Pennsyl-
vania, Philadelphia, PA.
S. Shieber. 1994. Restricting the weak-generative capactiy of
synchronous tree-adjoining grammars. Computational In-
telligence, 10(4):371–386.
D. J. Weir. 1988. Characterizing Mildly Context-Sensitive
Grammar Formalisms. Ph.D. thesis, Department of Com-
puter and Information Science, University of Pennsylvania.
D. Wu. 1997. Stochastic inversion transduction grammars and
bilingual parsing of parallel corpora. Computational Lin-
guistics, 23(3):377–404, September.
D. H. Younger. 1967. Recognition and parsing of context-free
languages in time . Information and Control, 10(2):189–
208, February.
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.496283">
<title confidence="0.999885">Generalized Multitext Grammars</title>
<author confidence="0.999724">I Dan Melamed</author>
<affiliation confidence="0.999614">Computer Science Department New York University</affiliation>
<address confidence="0.999757">715 Broadway, 7th Floor New York, NY, 10003, USA</address>
<email confidence="0.996387">lastname@cs.nyu.edu</email>
<author confidence="0.999686">Giorgio Satta</author>
<affiliation confidence="0.9998135">Dept. of Information Eng’g University of Padua</affiliation>
<address confidence="0.7960825">via Gradenigo 6/A I-35131 Padova, Italy</address>
<email confidence="0.840014">lastname@dei.unipd.it</email>
<author confidence="0.996683">Benjamin Wellington</author>
<affiliation confidence="0.999462">Computer Science Department New York University</affiliation>
<address confidence="0.999759">715 Broadway, 7th Floor New York, NY, 10003, USA</address>
<email confidence="0.999039">lastname@cs.nyu.edu</email>
<abstract confidence="0.9990434">Generalized Multitext Grammar (GMTG) is a synchronous grammar formalism that is weakly equivalent to Linear Context-Free Rewriting Systems (LCFRS), but retains much of the notational and intuitive simplicity of Context-Free Grammar (CFG). GMTG allows both synchronous and independent rewriting. Such flexibility facilitates more perspicuous modeling of parallel text than what is possible with other synchronous formalisms. This paper investigates the generative capacity of GMTG, proves that each component grammar of a GMTG retains its generative power, and proposes a generalization of Chomsky Normal Form, which is necessary for synchronous CKY-style parsing.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>A Aho</author>
<author>J Ullman</author>
</authors>
<title>Syntax directed translations and the pushdown assembler.</title>
<date>1969</date>
<journal>Journal of Computer and System Sciences,</journal>
<pages>3--37</pages>
<contexts>
<context position="1623" citStr="Aho and Ullman, 1969" startWordPosition="229" endWordPosition="232">s a generalization of Chomsky Normal Form, which is necessary for synchronous CKY-style parsing. 1 Introduction Synchronous grammars have been proposed for the formal description of parallel texts representing translations of the same document. As shown by Melamed (2003), a plausible model of parallel text must be able to express discontinuous constituents. Since linguistic expressions can vanish in translation, a good model must be able to express independent (in addition to synchronous) rewriting. Inversion Transduction Grammar (ITG) (Wu, 1997) and Syntax-Directed Translation Schema (SDTS) (Aho and Ullman, 1969) lack both of these properties. Synchronous Tree Adjoining Grammar (STAG) (Shieber, 1994) lacks the latter and allows only limited discontinuities in each tree. Generalized Multitext Grammar (GMTG) offers a way to synchronize Mildly Context-Sensitive Grammar (MCSG), while satisfying both of the above criteria. The move to MCSG is motivated by our desire to more perspicuously account for certain syntactic phenomena that cannot be easily captured by context-free grammars, such as clitic climbing, extraposition, and other types of longdistance movement (Becker et al., 1991). On the other hand, MC</context>
</contexts>
<marker>Aho, Ullman, 1969</marker>
<rawString>A. Aho and J. Ullman. 1969. Syntax directed translations and the pushdown assembler. Journal of Computer and System Sciences, 3:37–56, February.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Becker</author>
<author>A Joshi</author>
<author>O Rambow</author>
</authors>
<title>Long-distance scrambling and tree adjoining grammars.</title>
<date>1991</date>
<booktitle>In Proceedings of the 5th Meeting of the European Chapter of the Association for Computational Linguistics (EACL),</booktitle>
<location>Berlin, Germany.</location>
<contexts>
<context position="2200" citStr="Becker et al., 1991" startWordPosition="314" endWordPosition="317">lation Schema (SDTS) (Aho and Ullman, 1969) lack both of these properties. Synchronous Tree Adjoining Grammar (STAG) (Shieber, 1994) lacks the latter and allows only limited discontinuities in each tree. Generalized Multitext Grammar (GMTG) offers a way to synchronize Mildly Context-Sensitive Grammar (MCSG), while satisfying both of the above criteria. The move to MCSG is motivated by our desire to more perspicuously account for certain syntactic phenomena that cannot be easily captured by context-free grammars, such as clitic climbing, extraposition, and other types of longdistance movement (Becker et al., 1991). On the other hand, MCSG still observes some restrictions that make the set of languages it generates less expensive to analyze than the languages generated by (properly) context-sensitive formalisms. More technically, our proposal starts from Multitext Grammar (MTG), a formalism for synchronizing context-free grammars recently proposed by Melamed (2003). In MTG, synchronous rewriting is implemented by means of an indexing relation that is maintained over occurrences of nonterminals in a sentential form, using essentially the same machinery as SDTS. Unlike SDTS, MTG can extend the dimensional</context>
<context position="7782" citStr="Becker et al. (1991)" startWordPosition="1222" endWordPosition="1225">his restriction. Take, for example, the sentence pair [(The doctor treats his teeth), (El m´edico le examino los dientes)] (Dras and Bleam, 2000). The Spanish clitic le and the NP los dientes should both be paired with the English NP his teeth, giving rise to a discontinuous constituent in the Spanish component. A GMTG fragment for the sentence is shown below: Note the discontinuity between le and los dientes. Such discontinuities are marked by commas on both the LHS and the RHS of the relevant component. GMTG’s flexibility allows it to deal with many complex syntactic phenomena. For example, Becker et al. (1991) point out that TAG does not have the generative capacity to model certain kinds of scrambling in German, when the so-called “cooccurrence constraint” is imposed, requiring the S S NP VP NP VP VP VP V NP NP V NP NP NP The doctor El m´edico V V NP NP NP his teeth le los dientes treats examino N has promised N S (22) S N S N S versprochen hat S S to indict N N (23) N N zu ¨uberf¨uhren derivational pairing between verbs and their complements. They examine the English/German sentence fragment [(... that the detective has promised the client to indict the suspect of the crime), (... daß des Verbrec</context>
</contexts>
<marker>Becker, Joshi, Rambow, 1991</marker>
<rawString>T. Becker, A. Joshi, and O. Rambow. 1991. Long-distance scrambling and tree adjoining grammars. In Proceedings of the 5th Meeting of the European Chapter of the Association for Computational Linguistics (EACL), Berlin, Germany.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Bertsch</author>
<author>M J Nederhof</author>
</authors>
<title>On the complexity of some extensions of RCG parsing.</title>
<date>2001</date>
<booktitle>In Proceedings of the 7th International Workshop on Parsing Technologies (IWPT),</booktitle>
<pages>66--77</pages>
<location>Beijing, China.</location>
<contexts>
<context position="3774" citStr="Bertsch and Nederhof (2001)" startWordPosition="552" endWordPosition="555">, a formalism for describing a class of MCSGs. The generalization is achieved by allowing context-free productions to rewrite tuples of strings, rather than single strings. Thus, we retain the intuitive top-down definition of synchronous derivation original in SDTS and MTG but not found in LCFRS, while extending the generative power to linear context-free rewriting languages. In this respect, GMTG has also been inspired by the class of Local Unordered Scattered Context Grammars (Rambow and Satta, 1999). A syntactically very different synchronous formalism involving LCFRS has been presented by Bertsch and Nederhof (2001). This paper begins with an informal description of GMTG. It continues with an investigation of this formalism’s generative capacity. Next, we prove that in GMTG each component grammar retains its generative power, a requirement for synchronous formalisms that Rambow and Satta (1996) called the “weak language preservation property.” Lastly, we propose a synchronous generalization of Chomsky Normal Form, which lays the groundwork for synchronous parsing under GMTG using a CKYstyle algorithm (Younger, 1967; Melamed, 2004). 2 Informal Description and Comparisons GMTG is a generalization of MTG, w</context>
</contexts>
<marker>Bertsch, Nederhof, 2001</marker>
<rawString>E. Bertsch and M. J. Nederhof. 2001. On the complexity of some extensions of RCG parsing. In Proceedings of the 7th International Workshop on Parsing Technologies (IWPT), pages 66–77, Beijing, China.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Dras</author>
<author>T Bleam</author>
</authors>
<title>How problematic are clitics for S-TAG translation?</title>
<date>2000</date>
<booktitle>In Proceedings of the 5th International Workshop on Tree Adjoining Grammars and Related Formalisms (TAG+5),</booktitle>
<location>Paris, France.</location>
<contexts>
<context position="7307" citStr="Dras and Bleam, 2000" startWordPosition="1142" endWordPosition="1145">lip), (Tim got laid off)]. While the two sentences have the same meaning, the objects of their verb phrases are structured very differently. GMTG can express their relationships as follows: S S NP VP NP VP (12) VP VP V NP V PP (13) NP PP DT A N VB R (14) NP NP Tim Tim (15) V V got got (16) DT a (17) A pink (18) N slip (19) VB laid (20) off✠ R (21) As described by Melamed (2003), MTG requires production components to be contiguous, except after binarization. GMTG removes this restriction. Take, for example, the sentence pair [(The doctor treats his teeth), (El m´edico le examino los dientes)] (Dras and Bleam, 2000). The Spanish clitic le and the NP los dientes should both be paired with the English NP his teeth, giving rise to a discontinuous constituent in the Spanish component. A GMTG fragment for the sentence is shown below: Note the discontinuity between le and los dientes. Such discontinuities are marked by commas on both the LHS and the RHS of the relevant component. GMTG’s flexibility allows it to deal with many complex syntactic phenomena. For example, Becker et al. (1991) point out that TAG does not have the generative capacity to model certain kinds of scrambling in German, when the so-called </context>
</contexts>
<marker>Dras, Bleam, 2000</marker>
<rawString>M. Dras and T. Bleam. 2000. How problematic are clitics for S-TAG translation? In Proceedings of the 5th International Workshop on Tree Adjoining Grammars and Related Formalisms (TAG+5), Paris, France.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Hopcroft</author>
<author>R Motwani</author>
<author>J Ullman</author>
</authors>
<title>Introduction to Automota Theory, Languages and Computation.</title>
<date>2001</date>
<publisher>AddisonWesley, USA.</publisher>
<contexts>
<context position="20498" citStr="Hopcroft et al. (2001)" startWordPosition="3496" endWordPosition="3499"> Chomsky Normal Form (GCNF) if it has no useless links or useless terminals, and every production is in one of two forms: (i) A nonterminal production has rank = 2 and no terminals or ’s on the RHS. (ii) A terminal production has exactly one component of the form , where and . The other components are inactive. The algorithm to convert a GMTG to GCNF has the following steps: (1) add a new start-symbol (2) isolate terminals, (3) binarize productions, (4) remove ’s, (5) eliminate useless links and terminals, and (6) eliminate unit productions. The steps are generalizations of those presented by Hopcroft et al. (2001) to the multidimensional case with discontinuities. The ordering of these steps is important, as some steps can restore conditions that others eliminate. Traditionally, the terminal isolation and binarization steps came last, but the alternative order reduces the number of productions that can be created during -elimination. Steps (1), (2), (5) and (6) are the same for CFG and GMTG, except that the notion of nonterminal in CFG is replaced with links in GMTG. Some complications arise, however, in the generalization of steps (3) and (4). 6.1 Step 3: Binarize The third step of converting to GCNF </context>
</contexts>
<marker>Hopcroft, Motwani, Ullman, 2001</marker>
<rawString>J. Hopcroft, R. Motwani, and J. Ullman. 2001. Introduction to Automota Theory, Languages and Computation. AddisonWesley, USA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>I Dan Melamed</author>
<author>G Satta</author>
<author>B Wellington</author>
</authors>
<title>Generalized multitext grammars.</title>
<date>2004</date>
<tech>Technical Report 04-003, NYU Proteus Project. http://nlp.cs.nyu.edu/pubs/.</tech>
<contexts>
<context position="14538" citStr="Melamed et al. (2004)" startWordPosition="2398" endWordPosition="2401">pability simplifies the normalization procedure described in Section 6. Otherwise, this procedure would require exceptions to be made when eliminating epsilons from start productions. 4 Generative Capacity In this section we compare the generative capacity of GMTG with that of mildly context-sensitive grammars. We focus on LCFRS, using the notational variant introduced by Rambow and Satta (1999), briefly summarized below. Throughout this section, strings and vectors of the form will be identified. For lack of space, some proofs are only sketched, or entirely omitted when relatively intuitive: Melamed et al. (2004) provide more details. Let be some terminal alphabet. A function has rank if it is defined on , for integers (24) where represents some grouping into strings of all and only the variables appearing in the left-hand side, possibly with some additional terminal symbols. (Symbols,and are overloaded below.) , and is a finite set of productions of the form , where , , and where is a linear regular function having rank and fan-out , defined on . For every and , we write if (i) and ; or else , , and let be some reindexing such that strings andare independent. The derives relation with , has fan-out i</context>
<context position="26070" citStr="Melamed et al. (2004)" startWordPosition="4458" endWordPosition="4461">correct. S,S NVPA PNAV (25) . We call VP VP VP V VV NPatVP (26) VP NPatVP VwentPhome again, we replace the LHS link with the appropriate version. Consider the example grammar: We first identify which links are nullable. In this case and are nullable so we create a new version of both links: and . We then alter the productions. Production (31) gets replaced by (40). A new production based on (30) is Production (38). Lastly, Production (29) has two nullable strings on the RHS, so it gets altered to add three new productions, (34), (35) and (36). The altered set of productions are the following: Melamed et al. (2004) give more details about conversion to GCNF, as well as the full proof of our final theorem: Theorem 4 For each GMTG there exists a GMTGin GCNFgenerating the same set of multitexts as but with each component in a multitext replaced by . 7 Conclusions Generalized Multitext Grammar is a convenient and intuitive model of parallel text. In this paper, we have presented some formal properties of GMTG, including proofs that the generative capacity of GMTG is comparable to ordinary LCFRS, and that GMTG has the weak language preservation property. We also proposed a synchronous generalization of Choms</context>
</contexts>
<marker>Melamed, Satta, Wellington, 2004</marker>
<rawString>I. Dan Melamed, G. Satta, and B. Wellington. 2004. Generalized multitext grammars. Technical Report 04-003, NYU Proteus Project. http://nlp.cs.nyu.edu/pubs/.</rawString>
</citation>
<citation valid="true">
<authors>
<author>I Dan Melamed</author>
</authors>
<title>Multitext grammars and synchronous parsers.</title>
<date>2003</date>
<booktitle>In Proceedings of the Human Language Technology Conference and the North American Association for Computational Linguistics (HLT-NAACL),</booktitle>
<pages>158--165</pages>
<location>Edmonton, Canada.</location>
<contexts>
<context position="1273" citStr="Melamed (2003)" startWordPosition="179" endWordPosition="180">Grammar (CFG). GMTG allows both synchronous and independent rewriting. Such flexibility facilitates more perspicuous modeling of parallel text than what is possible with other synchronous formalisms. This paper investigates the generative capacity of GMTG, proves that each component grammar of a GMTG retains its generative power, and proposes a generalization of Chomsky Normal Form, which is necessary for synchronous CKY-style parsing. 1 Introduction Synchronous grammars have been proposed for the formal description of parallel texts representing translations of the same document. As shown by Melamed (2003), a plausible model of parallel text must be able to express discontinuous constituents. Since linguistic expressions can vanish in translation, a good model must be able to express independent (in addition to synchronous) rewriting. Inversion Transduction Grammar (ITG) (Wu, 1997) and Syntax-Directed Translation Schema (SDTS) (Aho and Ullman, 1969) lack both of these properties. Synchronous Tree Adjoining Grammar (STAG) (Shieber, 1994) lacks the latter and allows only limited discontinuities in each tree. Generalized Multitext Grammar (GMTG) offers a way to synchronize Mildly Context-Sensitive</context>
<context position="2557" citStr="Melamed (2003)" startWordPosition="368" endWordPosition="369"> to MCSG is motivated by our desire to more perspicuously account for certain syntactic phenomena that cannot be easily captured by context-free grammars, such as clitic climbing, extraposition, and other types of longdistance movement (Becker et al., 1991). On the other hand, MCSG still observes some restrictions that make the set of languages it generates less expensive to analyze than the languages generated by (properly) context-sensitive formalisms. More technically, our proposal starts from Multitext Grammar (MTG), a formalism for synchronizing context-free grammars recently proposed by Melamed (2003). In MTG, synchronous rewriting is implemented by means of an indexing relation that is maintained over occurrences of nonterminals in a sentential form, using essentially the same machinery as SDTS. Unlike SDTS, MTG can extend the dimensionality of the translation relation beyond two, and it can implement independent rewriting by means of partial deletion of syntactic structures. Our proposal generalizes MTG by moving from component grammars that generate contextfree languages to component grammars whose generative power is equivalent to Linear Context-Free Rewriting Systems (LCFRS), a formal</context>
<context position="7066" citStr="Melamed (2003)" startWordPosition="1108" endWordPosition="1109">onized productions would raise the number of required productions to 11, so independent rewriting also helps to reduce grammar size. Independent rewriting is also useful for modeling paraphrasing. Take, for example, [(Tim got a pink slip), (Tim got laid off)]. While the two sentences have the same meaning, the objects of their verb phrases are structured very differently. GMTG can express their relationships as follows: S S NP VP NP VP (12) VP VP V NP V PP (13) NP PP DT A N VB R (14) NP NP Tim Tim (15) V V got got (16) DT a (17) A pink (18) N slip (19) VB laid (20) off✠ R (21) As described by Melamed (2003), MTG requires production components to be contiguous, except after binarization. GMTG removes this restriction. Take, for example, the sentence pair [(The doctor treats his teeth), (El m´edico le examino los dientes)] (Dras and Bleam, 2000). The Spanish clitic le and the NP los dientes should both be paired with the English NP his teeth, giving rise to a discontinuous constituent in the Spanish component. A GMTG fragment for the sentence is shown below: Note the discontinuity between le and los dientes. Such discontinuities are marked by commas on both the LHS and the RHS of the relevant comp</context>
<context position="23842" citStr="Melamed (2003)" startWordPosition="4068" endWordPosition="4069">rent string, for . (iii) Create a new unique nonterminal, say , and replace each set of neighbors in production with , to create . The production is For example, binarization of the productions for the English/Russian multitext [(Pat went home early), (damoy Pat rano pashol)]6 in Figure 1 requires that we increase the fan-out of the language to three. The binarized productions are as follows: S S V Aearly (27) V AranoV (28) Pdamoy Vpashol 6.2 Step 4: Eliminate ’s Grammars in GCNF cannot have ’s in their productions. Thus, GCNF is a more restrictive normal form than those used by Wu (1997) and Melamed (2003). The absence of ’s simplifies parsers for GMTG (Melamed, 2004). Given a GMTG with in some productions, we give the construction of a weakly equivalent grammar without any ’s. First, determine all nullable links and associated strings in. A link is nullable if ,where is an ITV where at least one is . We say the link is nullable and the string at address in is nullable. For each nullable link, we create versions of the link, where is the number of nullable strings of that link. There is one version for each of the possible combinations of the nullable strings being present or absent. The versio</context>
</contexts>
<marker>Melamed, 2003</marker>
<rawString>I. Dan Melamed. 2003. Multitext grammars and synchronous parsers. In Proceedings of the Human Language Technology Conference and the North American Association for Computational Linguistics (HLT-NAACL), pages 158–165, Edmonton, Canada.</rawString>
</citation>
<citation valid="true">
<authors>
<author>I Dan Melamed</author>
</authors>
<title>Statistical machine translation by parsing.</title>
<date>2004</date>
<booktitle>In Proceedings of the 42nd Annual Meeting of the Association for Computational Linguistics (ACL),</booktitle>
<location>Barcelona,</location>
<contexts>
<context position="4299" citStr="Melamed, 2004" startWordPosition="631" endWordPosition="632">t synchronous formalism involving LCFRS has been presented by Bertsch and Nederhof (2001). This paper begins with an informal description of GMTG. It continues with an investigation of this formalism’s generative capacity. Next, we prove that in GMTG each component grammar retains its generative power, a requirement for synchronous formalisms that Rambow and Satta (1996) called the “weak language preservation property.” Lastly, we propose a synchronous generalization of Chomsky Normal Form, which lays the groundwork for synchronous parsing under GMTG using a CKYstyle algorithm (Younger, 1967; Melamed, 2004). 2 Informal Description and Comparisons GMTG is a generalization of MTG, which is itself a generalization of CFG to the synchronous case. Here we present MTG in a new notation that shows the relation to CFG more clearly. For example, the following MTG productions can generate the multitext [(Ifed the cat), (ya kota kormil)]:1 (S) (S) PN VP PN VP (1) PN PN I ya (2) VP VP V NP NP V (3) V V fed kormil (4) NP NP DN N (5) D the (6) N N cat kota (7) Each production in this example has two components, the first modeling English and the second (transliterated) Russian. Nonterminals with the same inde</context>
<context position="23905" citStr="Melamed, 2004" startWordPosition="4078" endWordPosition="4079"> and replace each set of neighbors in production with , to create . The production is For example, binarization of the productions for the English/Russian multitext [(Pat went home early), (damoy Pat rano pashol)]6 in Figure 1 requires that we increase the fan-out of the language to three. The binarized productions are as follows: S S V Aearly (27) V AranoV (28) Pdamoy Vpashol 6.2 Step 4: Eliminate ’s Grammars in GCNF cannot have ’s in their productions. Thus, GCNF is a more restrictive normal form than those used by Wu (1997) and Melamed (2003). The absence of ’s simplifies parsers for GMTG (Melamed, 2004). Given a GMTG with in some productions, we give the construction of a weakly equivalent grammar without any ’s. First, determine all nullable links and associated strings in. A link is nullable if ,where is an ITV where at least one is . We say the link is nullable and the string at address in is nullable. For each nullable link, we create versions of the link, where is the number of nullable strings of that link. There is one version for each of the possible combinations of the nullable strings being present or absent. The version of the link with all strings present is its original version.</context>
</contexts>
<marker>Melamed, 2004</marker>
<rawString>I. Dan Melamed. 2004. Statistical machine translation by parsing. In Proceedings of the 42nd Annual Meeting of the Association for Computational Linguistics (ACL), Barcelona, Spain.</rawString>
</citation>
<citation valid="true">
<authors>
<author>O Rambow</author>
<author>G Satta</author>
</authors>
<title>Synchronous models of language.</title>
<date>1996</date>
<booktitle>In Proceedings of the 34th Annual Meeting of the Association for Computational Linguistics (ACL),</booktitle>
<location>Santa Cruz, USA.</location>
<contexts>
<context position="4058" citStr="Rambow and Satta (1996)" startWordPosition="594" endWordPosition="597">in LCFRS, while extending the generative power to linear context-free rewriting languages. In this respect, GMTG has also been inspired by the class of Local Unordered Scattered Context Grammars (Rambow and Satta, 1999). A syntactically very different synchronous formalism involving LCFRS has been presented by Bertsch and Nederhof (2001). This paper begins with an informal description of GMTG. It continues with an investigation of this formalism’s generative capacity. Next, we prove that in GMTG each component grammar retains its generative power, a requirement for synchronous formalisms that Rambow and Satta (1996) called the “weak language preservation property.” Lastly, we propose a synchronous generalization of Chomsky Normal Form, which lays the groundwork for synchronous parsing under GMTG using a CKYstyle algorithm (Younger, 1967; Melamed, 2004). 2 Informal Description and Comparisons GMTG is a generalization of MTG, which is itself a generalization of CFG to the synchronous case. Here we present MTG in a new notation that shows the relation to CFG more clearly. For example, the following MTG productions can generate the multitext [(Ifed the cat), (ya kota kormil)]:1 (S) (S) PN VP PN VP (1) PN PN </context>
<context position="17899" citStr="Rambow and Satta, 1996" startWordPosition="3024" endWordPosition="3027">om this claim. The proof of the next lemma is relatively intuitive and therefore omitted. Lemma 2 For any -GMTG, there exists a properly synchronous -GMTGsuch that , and . , , ,and . Assume thatcan rewrite the righthand side of , that is , Then there must be at least one indexsuch that for each ,contains exactly occurrences of. Combining Lemmas 1 and 2, we have Theorem 2 For any -GMTG, there exists some LCFRS with and such that . 5 Weak Language Preservation Property GMTGs have the weak language preservation property, which is one of the defining requirements of synchronous rewriting systems (Rambow and Satta, 1996). Informally stated, the generative capacity of the class of all component grammars of a GMTG exactly corresponds to the class of all projected languages. In other words, the interaction among different grammar components in the rewriting process of GMTG does not increase the generative power beyond the above mentioned class. The next result states this property more formally. Let be a -GMTG with production set. For , the-th component grammar of, written ,is the 1-GMTG with productions projected language of is . In general , because component grammars interact with each other in the rewriting </context>
</contexts>
<marker>Rambow, Satta, 1996</marker>
<rawString>O. Rambow and G. Satta. 1996. Synchronous models of language. In Proceedings of the 34th Annual Meeting of the Association for Computational Linguistics (ACL), Santa Cruz, USA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>O Rambow</author>
<author>G Satta</author>
</authors>
<title>Independent parallelism in finite copying parallel rewriting systems.</title>
<date>1999</date>
<journal>Theoretical Computer Science,</journal>
<pages>223--87</pages>
<contexts>
<context position="3654" citStr="Rambow and Satta, 1999" startWordPosition="536" endWordPosition="539">anguages to component grammars whose generative power is equivalent to Linear Context-Free Rewriting Systems (LCFRS), a formalism for describing a class of MCSGs. The generalization is achieved by allowing context-free productions to rewrite tuples of strings, rather than single strings. Thus, we retain the intuitive top-down definition of synchronous derivation original in SDTS and MTG but not found in LCFRS, while extending the generative power to linear context-free rewriting languages. In this respect, GMTG has also been inspired by the class of Local Unordered Scattered Context Grammars (Rambow and Satta, 1999). A syntactically very different synchronous formalism involving LCFRS has been presented by Bertsch and Nederhof (2001). This paper begins with an informal description of GMTG. It continues with an investigation of this formalism’s generative capacity. Next, we prove that in GMTG each component grammar retains its generative power, a requirement for synchronous formalisms that Rambow and Satta (1996) called the “weak language preservation property.” Lastly, we propose a synchronous generalization of Chomsky Normal Form, which lays the groundwork for synchronous parsing under GMTG using a CKYs</context>
<context position="14315" citStr="Rambow and Satta (1999)" startWordPosition="2364" endWordPosition="2367">nslations. For example, an English/Italian GMTG can include Production (9), an English CFG, and an Italian CFG. A single GMTG can then govern both translingual and monolingual information in applications. Furthermore, this capability simplifies the normalization procedure described in Section 6. Otherwise, this procedure would require exceptions to be made when eliminating epsilons from start productions. 4 Generative Capacity In this section we compare the generative capacity of GMTG with that of mildly context-sensitive grammars. We focus on LCFRS, using the notational variant introduced by Rambow and Satta (1999), briefly summarized below. Throughout this section, strings and vectors of the form will be identified. For lack of space, some proofs are only sketched, or entirely omitted when relatively intuitive: Melamed et al. (2004) provide more details. Let be some terminal alphabet. A function has rank if it is defined on , for integers (24) where represents some grouping into strings of all and only the variables appearing in the left-hand side, possibly with some additional terminal symbols. (Symbols,and are overloaded below.) , and is a finite set of productions of the form , where , , and where i</context>
<context position="21518" citStr="Rambow and Satta (1999)" startWordPosition="3673" endWordPosition="3676"> the notion of nonterminal in CFG is replaced with links in GMTG. Some complications arise, however, in the generalization of steps (3) and (4). 6.1 Step 3: Binarize The third step of converting to GCNF is binarization of the productions, making the rank of the grammar two. For and , we write D-GMTG to represent the class of all -GMTGs with rank and fan-out . A CFG can always be binarized into another CFG: two adjacent nonterminals are replaced with a single nonterminal that yields them. In contrast, it can be impossible to binarize a -GMTG into an equivalent -GMTG . From results presented by Rambow and Satta (1999) it follows that, Similarly, the-th . Theorem 3 and . . (S) (S) PdamoyNPatAranoVpashol Pat went home early NPatVwentPhomeAearly damoy Pat rano pashol Figure 1: A production that requires an increased fan-out to binarize, and its 2D illustration. for every fan-out and rank , there are some index orderings that can be generated by -GMTG but not -GMTG . The distinguishing characteristic of such index orderings is apparent in Figure 1, which shows a production in a grammar with fan-out two, and a graph that illustrates which nonterminals are coindexed. No two nonterminals are adjacent in both comp</context>
</contexts>
<marker>Rambow, Satta, 1999</marker>
<rawString>O. Rambow and G. Satta. 1999. Independent parallelism in finite copying parallel rewriting systems. Theoretical Computer Science, 223:87–120, July.</rawString>
</citation>
<citation valid="true">
<authors>
<author>O Rambow</author>
</authors>
<title>Formal and Computational Aspects ofNatural Language Syntax.</title>
<date>1995</date>
<tech>Ph.D. thesis,</tech>
<institution>University of Pennsylvania,</institution>
<location>Philadelphia, PA.</location>
<contexts>
<context position="8835" citStr="Rambow (1995)" startWordPosition="1414" endWordPosition="1415">ts. They examine the English/German sentence fragment [(... that the detective has promised the client to indict the suspect of the crime), (... daß des Verbrechens der Detektiv den Verd¨achtigen dem Klienten zu ¨uberf¨uhren versprochen hat)]. The verbs versprochen and ¨uberf¨uhren both have two noun phrases as arguments. In German, these noun phrases can appear to the left of the verbs in any order. The following is a GMTG fragment for the above sentence pair2: S SSS The discontinuities allow the noun arguments of versprochen to be placed in any order with the noun arguments of ¨uberf¨uhren. Rambow (1995) gives a similar analysis. 3 Formal Definitions Let be a finite set of nonterminal symbols and let be the set of integers.3 We define .4 Elements of will be called indexed nonterminal symbols. In what follows we also consider a finite set of terminal symbols , disjoint from, and work with strings in , where . For , we define , i.e. the set of indexes that appear in. An indexed tuple vector, or ITV, is a vector of tuples of strings over, having the form where ,and for , . We write ,, to denote the -th component ofand to denote the arity of such a tuple, which is . When , is the empty tuple, wri</context>
</contexts>
<marker>Rambow, 1995</marker>
<rawString>O. Rambow. 1995. Formal and Computational Aspects ofNatural Language Syntax. Ph.D. thesis, University of Pennsylvania, Philadelphia, PA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Shieber</author>
</authors>
<title>Restricting the weak-generative capactiy of synchronous tree-adjoining grammars.</title>
<date>1994</date>
<journal>Computational Intelligence,</journal>
<volume>10</volume>
<issue>4</issue>
<contexts>
<context position="1712" citStr="Shieber, 1994" startWordPosition="244" endWordPosition="245"> 1 Introduction Synchronous grammars have been proposed for the formal description of parallel texts representing translations of the same document. As shown by Melamed (2003), a plausible model of parallel text must be able to express discontinuous constituents. Since linguistic expressions can vanish in translation, a good model must be able to express independent (in addition to synchronous) rewriting. Inversion Transduction Grammar (ITG) (Wu, 1997) and Syntax-Directed Translation Schema (SDTS) (Aho and Ullman, 1969) lack both of these properties. Synchronous Tree Adjoining Grammar (STAG) (Shieber, 1994) lacks the latter and allows only limited discontinuities in each tree. Generalized Multitext Grammar (GMTG) offers a way to synchronize Mildly Context-Sensitive Grammar (MCSG), while satisfying both of the above criteria. The move to MCSG is motivated by our desire to more perspicuously account for certain syntactic phenomena that cannot be easily captured by context-free grammars, such as clitic climbing, extraposition, and other types of longdistance movement (Becker et al., 1991). On the other hand, MCSG still observes some restrictions that make the set of languages it generates less expe</context>
</contexts>
<marker>Shieber, 1994</marker>
<rawString>S. Shieber. 1994. Restricting the weak-generative capactiy of synchronous tree-adjoining grammars. Computational Intelligence, 10(4):371–386.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D J Weir</author>
</authors>
<title>Characterizing Mildly Context-Sensitive Grammar Formalisms.</title>
<date>1988</date>
<tech>Ph.D. thesis,</tech>
<institution>Department of Computer and Information Science, University of Pennsylvania.</institution>
<contexts>
<context position="19633" citStr="Weir, 1988" startWordPosition="3350" endWordPosition="3351">rly synchronous -GMTG generating (Lemma 2). Let , where andare constructed fromalmost as in the proof of Lemma 1. The only difference is in the definition of strings and the production rewriting , specified as follows (we use the same notation as in the proof of Lemma 1). , where for each : (i) if and ; (ii) if and ; (iii) if , with, as in the original proof. Finally, the production rewriting has the form , where . To conclude the proof, note that and can differ only with respect to string . The theorem then follows from the fact that LCFRS is closed under intersection with regular languages (Weir, 1988). 6 Generalized Chomsky Normal Form Certain kinds of text analysis require a grammar in a convenient normal form. The prototypical example for CFG is Chomsky Normal Form (CNF), which is required for CKY-style parsing. A -GMTG is in Generalized Chomsky Normal Form (GCNF) if it has no useless links or useless terminals, and every production is in one of two forms: (i) A nonterminal production has rank = 2 and no terminals or ’s on the RHS. (ii) A terminal production has exactly one component of the form , where and . The other components are inactive. The algorithm to convert a GMTG to GCNF has </context>
</contexts>
<marker>Weir, 1988</marker>
<rawString>D. J. Weir. 1988. Characterizing Mildly Context-Sensitive Grammar Formalisms. Ph.D. thesis, Department of Computer and Information Science, University of Pennsylvania.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Wu</author>
</authors>
<title>Stochastic inversion transduction grammars and bilingual parsing of parallel corpora.</title>
<date>1997</date>
<journal>Computational Linguistics,</journal>
<volume>23</volume>
<issue>3</issue>
<contexts>
<context position="1554" citStr="Wu, 1997" startWordPosition="222" endWordPosition="223">ammar of a GMTG retains its generative power, and proposes a generalization of Chomsky Normal Form, which is necessary for synchronous CKY-style parsing. 1 Introduction Synchronous grammars have been proposed for the formal description of parallel texts representing translations of the same document. As shown by Melamed (2003), a plausible model of parallel text must be able to express discontinuous constituents. Since linguistic expressions can vanish in translation, a good model must be able to express independent (in addition to synchronous) rewriting. Inversion Transduction Grammar (ITG) (Wu, 1997) and Syntax-Directed Translation Schema (SDTS) (Aho and Ullman, 1969) lack both of these properties. Synchronous Tree Adjoining Grammar (STAG) (Shieber, 1994) lacks the latter and allows only limited discontinuities in each tree. Generalized Multitext Grammar (GMTG) offers a way to synchronize Mildly Context-Sensitive Grammar (MCSG), while satisfying both of the above criteria. The move to MCSG is motivated by our desire to more perspicuously account for certain syntactic phenomena that cannot be easily captured by context-free grammars, such as clitic climbing, extraposition, and other types </context>
<context position="23823" citStr="Wu (1997)" startWordPosition="4065" endWordPosition="4066">ecomes a different string, for . (iii) Create a new unique nonterminal, say , and replace each set of neighbors in production with , to create . The production is For example, binarization of the productions for the English/Russian multitext [(Pat went home early), (damoy Pat rano pashol)]6 in Figure 1 requires that we increase the fan-out of the language to three. The binarized productions are as follows: S S V Aearly (27) V AranoV (28) Pdamoy Vpashol 6.2 Step 4: Eliminate ’s Grammars in GCNF cannot have ’s in their productions. Thus, GCNF is a more restrictive normal form than those used by Wu (1997) and Melamed (2003). The absence of ’s simplifies parsers for GMTG (Melamed, 2004). Given a GMTG with in some productions, we give the construction of a weakly equivalent grammar without any ’s. First, determine all nullable links and associated strings in. A link is nullable if ,where is an ITV where at least one is . We say the link is nullable and the string at address in is nullable. For each nullable link, we create versions of the link, where is the number of nullable strings of that link. There is one version for each of the possible combinations of the nullable strings being present or</context>
</contexts>
<marker>Wu, 1997</marker>
<rawString>D. Wu. 1997. Stochastic inversion transduction grammars and bilingual parsing of parallel corpora. Computational Linguistics, 23(3):377–404, September.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D H Younger</author>
</authors>
<title>Recognition and parsing of context-free languages in time .</title>
<date>1967</date>
<journal>Information and Control,</journal>
<volume>10</volume>
<issue>2</issue>
<pages>208</pages>
<contexts>
<context position="4283" citStr="Younger, 1967" startWordPosition="629" endWordPosition="630">y very different synchronous formalism involving LCFRS has been presented by Bertsch and Nederhof (2001). This paper begins with an informal description of GMTG. It continues with an investigation of this formalism’s generative capacity. Next, we prove that in GMTG each component grammar retains its generative power, a requirement for synchronous formalisms that Rambow and Satta (1996) called the “weak language preservation property.” Lastly, we propose a synchronous generalization of Chomsky Normal Form, which lays the groundwork for synchronous parsing under GMTG using a CKYstyle algorithm (Younger, 1967; Melamed, 2004). 2 Informal Description and Comparisons GMTG is a generalization of MTG, which is itself a generalization of CFG to the synchronous case. Here we present MTG in a new notation that shows the relation to CFG more clearly. For example, the following MTG productions can generate the multitext [(Ifed the cat), (ya kota kormil)]:1 (S) (S) PN VP PN VP (1) PN PN I ya (2) VP VP V NP NP V (3) V V fed kormil (4) NP NP DN N (5) D the (6) N N cat kota (7) Each production in this example has two components, the first modeling English and the second (transliterated) Russian. Nonterminals wi</context>
</contexts>
<marker>Younger, 1967</marker>
<rawString>D. H. Younger. 1967. Recognition and parsing of context-free languages in time . Information and Control, 10(2):189– 208, February.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>