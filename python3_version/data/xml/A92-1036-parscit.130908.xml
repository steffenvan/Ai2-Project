<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.031304">
<title confidence="0.990215">
Portable Natural Language Generation using SPOKESMAN
</title>
<author confidence="0.734612">
Marie Meteer
</author>
<affiliation confidence="0.6934045">
Sage Lab
Rensselaer Polytechnic Institute
</affiliation>
<address confidence="0.568371">
Troy, New York 12180
</address>
<email confidence="0.901868">
METEER@CS.RPLEDU
</email>
<bodyText confidence="0.983638294117647">
Abstractl
This paper reports on the SPOKESMAN natural language
generation system, which is a domain independent text gen-
erator designed to incrementally produce text for an underly-
ing application program. This work is a direct outgrowth of
the work we reported on at the last ACL Applied Conference
in 1988, where we connected an application program directly
to the linguistic component, Mumble-86. The major addi-
tion has been a new component to the system, a text planner
that provides the capability to compose the utterance incre-
mentally. The central feature of the text planning com-
ponent is a new level of representation that both captures
more linguistic generalizations and makes the system more
portable, so that we can easily interface to different domains
and different kinds of application programs. This larger sys-
tem is called &amp;quot;Spokesman&amp;quot;, as it acts as the mouthpiece for
a number of application programs.
</bodyText>
<sectionHeader confidence="0.997902" genericHeader="abstract">
1. Introduction
</sectionHeader>
<bodyText confidence="0.999992888888889">
There are generally two approaches to achieving portabil-
ity. One is to build peripheral components that can auto-
matically or semi-automatically acquire the knowledge
needed to port to a new domain. The second is to modular-
ize the system so that the components that are not domain
specific are kept separate from those that are, and to try to
maximize the amount of knowledge in the more general
components. In the long term, a combination of these
approaches will certainly be needed. In the work presented
here, we have concentrated on the later. For example, by
taking advantage of the fact that most of language is not par-
ticular to any domain, we have isolated the linguistic realiza-
tion component and used the Text Structure to capture
abstract linguistic generalizations. Also by using the
knowledge base of the application directly we can not only
capture generalizations about objects which are expressed
similarly, but also handle those cases where the means of
expression is specific to a particular domain.
</bodyText>
<sectionHeader confidence="0.989043" genericHeader="method">
2. Modularization
</sectionHeader>
<bodyText confidence="0.999977">
In our earlier work, generation involved three modules: a
linguistic realization component (LRC) MUMBLE-86
(Meteer, et.al 1987), an underlying application program, and
a special purpose text planner to handle the mapping from
one to the other. The text planner used the input specifica-
tion language to Mumble-86 as a means of compensating
</bodyText>
<footnote confidence="0.9676458">
1 The work reported here was done at BBN Systems and
Technologies, Cambridge, Massachusetts. I would like to thank all
of my BBN colleagues, in particular Glenn Abrett, Stephen
Deutsch, Dawn MacLaughlin, and Varda Shaked, for their
contributions to this work during my tenure at BBN.
</footnote>
<bodyText confidence="0.995423">
for the semantic deficits of linguistically naive underlying
application programs without compromising principled
grammatical treatments in natural language generation.
</bodyText>
<sectionHeader confidence="0.618121" genericHeader="method">
1988 Architecture: Interfacing to Mumble-86
</sectionHeader>
<bodyText confidence="0.999877487179487">
While this modularization isolated the linguistic com-
ponent, using it directly required the developer to be aware of
very low level linguistic details. For example, the
specification of a noun phrase requires that information
about number, person, and determiner be included.
Furthermore, there was no way to ensure that a particular
specification built by a text planner would actually be
expressible by the linguistic component. For example,
there was nothing to prevent a planner from composing a
specification combining a completive event with a duration
(e.g. *&amp;quot;the plane landed for ten minutes&amp;quot;). Also, the
specification language itself cannot capture certain
generalizations about what features can co-occur in language
and what is expressed by certain combinations of features,
leaving them to the text planner. For example, a single
noun phrase with a definite article indicates that the entity is
known (e.g. &amp;quot;the dog&amp;quot;); however if a proper name is used,
the article is omitted even when the entity is known (e.g.
&amp;quot;Fluffy&amp;quot;).
While this architecture was a successful means of working
directly with MUMBLE-86, it left a great deal of work to be
done by the planner, most of which must be built
specifically for each application. Our approach in
developing a text planner for the current system was to
introduce modularity into the text planner, separating what
is general to language from that which is specific to an
application. The resulting system is called SPOKESMAN,
and its architecture is shown below. The general knowledge
used by the ext planner resides in the TEXT PLANNER
CORE; the domain specific portions of the text planner are
again indicated by diagonal lines.
Note that three of the applications shown all use the same
knowledge representation language, the Simple Frame
Language (SFL, Abrett, et al. 1989). Following our overall
approach of modularizing those portions of the system that
are shared, we built a subsystem for interfacing with the
representation language that contains all the routines for
accessing objects in SFL and for handling what is common
to all SFL-based applications, such as the concept THING.
</bodyText>
<figure confidence="0.975434954545454">
AALBM7specific text _planner/
(underlying representation:
MUMBLE-86
237
1992 Architecture: The Spokesman Generation System
A
SAF&amp;quot;f/14A11%fSTI&apos;dEC
SPOKESMAN \s/ SPOKESMAN
SFL INTERFACE
TEXT PLANNER CORE.
..SPECIFICATION LANGUAI
MUMBLE-86
N\NJE,IT,G.S\
, (underlying \
s representation: \s,
KEE)
N..
(underlying
representation:
&apos;MAL)
ATC
SPOKESMAN
</figure>
<bodyText confidence="0.9994682">
Spokesman is essentially an object-oriented program in
that the routines for mapping from one level to the other are
specialized for the type of object being mapped, just as
generic methods in CLOS or Flavors are specialized for dif-
ferent classes or flavors in those object oriented program-
ming languages. Each mapping function is a table which,
when given an object, will walk up the KB hierarchy until it
finds a routine associated with that object&apos;s type or a type it
inherits from. If that routine is a template, it will execute
the template; if it is a class of alternatives, it will select one
and execute that. This process is shown schematically
below. There are different tables for the mappings between
each level of representation in Spokesman, and, in some
cases, different tables depending on the context defined by
representational level.
</bodyText>
<subsectionHeader confidence="0.874859">
Mappings
</subsectionHeader>
<bodyText confidence="0.9999927">
As we discussed earlier, one of our goals has been to iso-
late what is common to a language (though not necessarily
all languages) from what is particular to the application the
generator is speaking for. In particular, we wanted to both
capture the generalizations available from the cooccurance of
features in the linguistic specification and ensure that the
specifications that are built are expressible in language.
Within the text planner core, these generalizations are
captured in the level of representation called the Text
Structure (TS), which is used to compose the text. TS is a
tree representing the constituency of the utterance, where
constituents may be entire paragraphs related by rhetorical
relations, or they may be lexically headed constituents
internal to a clause. The terms of the TS are abstractions
over the concrete resources of language (words, phrases,
morphological markers). This vocabulary and the structure
built with it provides the text planner with a representation
of what decisions have already been made, thus constraining
further decisions, and of what opportunities are available for
further composition.
</bodyText>
<sectionHeader confidence="0.632845" genericHeader="method">
3. Capturing differences between domain
</sectionHeader>
<bodyText confidence="0.99833496">
In what we have presented so far, the focus has been on
taking advantages of similarities within language and among
applications to isolate domain independent components from
those that need to be specific to the application program.
However, there are some things that are intrinsically domain
specific, both in what information is expressed and in how it
is expressed. A generation system that is to produce real-
istic texts in a domain must allow the developer to special-
ize routines at all levels of the generation process.
One example of a domain specific expression is the way
pilots are addressed in the Air Traffic Control domain.
Rather than using the pilot&apos;s name, the controller addresses
the pilot using the flight ID of the plane the pilot is
flyingâ€”in effect he addresses the plane; similarly, pilots
address controllers using their function (e.g approach,
tower). In SPOKESMAN, this is handled using the map-
pings. Rather than using the mapping for PERSON, which
pilot inherits from, a mapping specific to the concept
PILOT is set up, which puts the aircraft instance rather than
the pilot instance in the resultant Text Structure node. In
the next phase of the generation process, which maps from
the text structure to the linguistic specification, the mapping
from the aircraft to the lexical resource is used, which
combines the airline and the plane&apos;s ID number into a
phrase, such as &amp;quot;United four fifty one&amp;quot;.
</bodyText>
<sectionHeader confidence="0.996567" genericHeader="method">
4. Conclusion
</sectionHeader>
<bodyText confidence="0.99934225">
We have described the modularization of the SPOKESMAN
generation system, which is designed to increase its
portability, and we have briefly shown how the use of
mappings directly from the application&apos;s knowledge base can
both capture generalities in how information is expressed
and allow specializations for domain specific expressions.
(For a more detailed description of SPOKESMAN and Text
Structure, see Meteer 1991, 1992.)
</bodyText>
<reference confidence="0.99666845">
Abrett, G., Burstein, M., &amp; Deutsch, S. (1989) TARL: Tactical
Action Representation Language, An Environment for Building
Goal Directed Knowledge Based Simulations. BBN Technical
Report No. 7062.
McDonald, D. &amp; Meteer, M. (1988) From Water to Wine:
Generating Natural Language Text from Today&apos;s Applications
Programs, Proceedings of the 2nd Conference on Applied Natural
Language Processing, Austin, Texas.
Meteer, M. (1991a) SPOKESMAN: Data Driven, Object Oriented
Natural Language Generation, Proceedings of the Seventh IEEE
Conference on Artificial Intelligence Applications, Miami Beach,
Florida, February 26-28.
Meteer, M. (1991b) Abstract Linguistic Resources for Text
Planning&amp;quot; Computational Intelligence. 7(4).
Meteer, M. (1992) Expressibility and the problem of efficient text
planning. Pinter Publishers. (forthcoming)
Meteer, M., McDonald, D., Anderson, S., Forster, D., Gay, L.,
Huettner, A., and Sibun, P. 1987. Mumble-86: Design and
Implementation. UMass Technical Report 87-87. University of
Massachusetts, Amherst, MA.
</reference>
<figure confidence="0.980524727272727">
mapping function Mappings Oaf type)
TTable1
able2
/
/ I
INSTANCE.
&apos;&apos;&apos;&amp;quot;&apos;&amp;quot;NCE. therANCEs
Class of alternatives
expressionl
expresslon2
&amp;quot;expression of instance&amp;quot;
</figure>
<page confidence="0.948564">
238
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.527427">
<title confidence="0.999646">Natural Language Generation using</title>
<author confidence="0.7932365">Marie Meteer Sage Lab</author>
<affiliation confidence="0.999953">Rensselaer Polytechnic Institute</affiliation>
<address confidence="0.999551">Troy, New York 12180</address>
<email confidence="0.918166">METEER@CS.RPLEDU</email>
<abstract confidence="0.998431235294118">Abstractl This paper reports on the SPOKESMAN natural language generation system, which is a domain independent text generator designed to incrementally produce text for an underlying application program. This work is a direct outgrowth of the work we reported on at the last ACL Applied Conference in 1988, where we connected an application program directly to the linguistic component, Mumble-86. The major addition has been a new component to the system, a text planner that provides the capability to compose the utterance incrementally. The central feature of the text planning component is a new level of representation that both captures more linguistic generalizations and makes the system more portable, so that we can easily interface to different domains and different kinds of application programs. This larger system is called &amp;quot;Spokesman&amp;quot;, as it acts as the mouthpiece for a number of application programs.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>G Abrett</author>
<author>M Burstein</author>
<author>S Deutsch</author>
</authors>
<title>TARL: Tactical Action Representation Language, An Environment for Building Goal Directed Knowledge Based Simulations.</title>
<date>1989</date>
<tech>BBN Technical Report No. 7062.</tech>
<contexts>
<context position="4786" citStr="Abrett, et al. 1989" startWordPosition="748" endWordPosition="751">ly for each application. Our approach in developing a text planner for the current system was to introduce modularity into the text planner, separating what is general to language from that which is specific to an application. The resulting system is called SPOKESMAN, and its architecture is shown below. The general knowledge used by the ext planner resides in the TEXT PLANNER CORE; the domain specific portions of the text planner are again indicated by diagonal lines. Note that three of the applications shown all use the same knowledge representation language, the Simple Frame Language (SFL, Abrett, et al. 1989). Following our overall approach of modularizing those portions of the system that are shared, we built a subsystem for interfacing with the representation language that contains all the routines for accessing objects in SFL and for handling what is common to all SFL-based applications, such as the concept THING. AALBM7specific text _planner/ (underlying representation: MUMBLE-86 237 1992 Architecture: The Spokesman Generation System A SAF&amp;quot;f/14A11%fSTI&apos;dEC SPOKESMAN \s/ SPOKESMAN SFL INTERFACE TEXT PLANNER CORE. ..SPECIFICATION LANGUAI MUMBLE-86 N\NJE,IT,G.S\ , (underlying \ s representation: </context>
</contexts>
<marker>Abrett, Burstein, Deutsch, 1989</marker>
<rawString>Abrett, G., Burstein, M., &amp; Deutsch, S. (1989) TARL: Tactical Action Representation Language, An Environment for Building Goal Directed Knowledge Based Simulations. BBN Technical Report No. 7062.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D McDonald</author>
<author>M Meteer</author>
</authors>
<title>From Water to Wine: Generating Natural Language Text from Today&apos;s Applications Programs,</title>
<date>1988</date>
<booktitle>Proceedings of the 2nd Conference on Applied Natural Language Processing,</booktitle>
<location>Austin, Texas.</location>
<marker>McDonald, Meteer, 1988</marker>
<rawString>McDonald, D. &amp; Meteer, M. (1988) From Water to Wine: Generating Natural Language Text from Today&apos;s Applications Programs, Proceedings of the 2nd Conference on Applied Natural Language Processing, Austin, Texas.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Meteer</author>
</authors>
<title>SPOKESMAN: Data Driven, Object Oriented Natural Language Generation,</title>
<date>1991</date>
<booktitle>Proceedings of the Seventh IEEE Conference on Artificial Intelligence Applications,</booktitle>
<location>Miami Beach, Florida,</location>
<marker>Meteer, 1991</marker>
<rawString>Meteer, M. (1991a) SPOKESMAN: Data Driven, Object Oriented Natural Language Generation, Proceedings of the Seventh IEEE Conference on Artificial Intelligence Applications, Miami Beach, Florida, February 26-28.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Meteer</author>
</authors>
<title>Abstract Linguistic Resources for Text Planning&amp;quot;</title>
<date>1991</date>
<journal>Computational Intelligence.</journal>
<volume>7</volume>
<issue>4</issue>
<marker>Meteer, 1991</marker>
<rawString>Meteer, M. (1991b) Abstract Linguistic Resources for Text Planning&amp;quot; Computational Intelligence. 7(4).</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Meteer</author>
</authors>
<title>Expressibility and the problem of efficient text planning.</title>
<date>1992</date>
<note>Pinter Publishers. (forthcoming)</note>
<marker>Meteer, 1992</marker>
<rawString>Meteer, M. (1992) Expressibility and the problem of efficient text planning. Pinter Publishers. (forthcoming)</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Meteer</author>
<author>D McDonald</author>
<author>S Anderson</author>
<author>D Forster</author>
<author>L Gay</author>
<author>A Huettner</author>
<author>P Sibun</author>
</authors>
<date>1987</date>
<booktitle>Mumble-86: Design and Implementation. UMass</booktitle>
<tech>Technical Report 87-87.</tech>
<institution>University of Massachusetts,</institution>
<location>Amherst, MA.</location>
<marker>Meteer, McDonald, Anderson, Forster, Gay, Huettner, Sibun, 1987</marker>
<rawString>Meteer, M., McDonald, D., Anderson, S., Forster, D., Gay, L., Huettner, A., and Sibun, P. 1987. Mumble-86: Design and Implementation. UMass Technical Report 87-87. University of Massachusetts, Amherst, MA.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>