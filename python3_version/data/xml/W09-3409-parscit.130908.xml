<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.036679">
<title confidence="0.988689">
Finite-State Description of Vietnamese Reduplication
</title>
<author confidence="0.935028">
Le Hong Phuong Nguyen Thi Minh Huyen Azim Roussanaly
</author>
<affiliation confidence="0.754393">
LORIA, France Hanoi Univ. of Science, Vietnam LORIA, France
</affiliation>
<email confidence="0.981895">
lehong@loria.fr huyenntm@vnu.edu.vn azim@loria.fr
</email>
<sectionHeader confidence="0.993431" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999947888888889">
We present for the first time a compu-
tational model for the reduplication of
the Vietnamese language. Reduplication
is a popular phenomenon of Vietnamese
in which reduplicative words are created
by the combination of multiple syllables
whose phonics are similar. We first give
a systematical study of Vietnamese redu-
plicative words, bringing into focus clear
principles for the formation of a large class
of bi-syllabic reduplicative words. We then
make use of optimal finite-state devices,
in particular minimal sequential string-to
string transducers to build a computational
model for very efficient recognition and
production of those words. Finally, sev-
eral nice applications of this computa-
tional model are discussed.
</bodyText>
<sectionHeader confidence="0.998992" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.99995211627907">
Finite-state technology has been applied success-
fully for describing the morphological processes
of many natural languages since the pioneer-
ing works of (Kaplan and Kay, 1994; Kosken-
niemi, 1983). It is shown that while finite-state
approaches to most natural languages have gen-
erally been very successful, they are less suitable
for non-concatenative phenomena found in some
languages, for example the non-concatenative
word formation processes in Semitic languages
(Cohen-Sygal and Wintner, 2006). A popular non-
concatenative process is reduplication – the pro-
cess in which a morpheme or part of it is dupli-
cated.
Reduplication is a common linguistic phe-
nomenon in many Asian languages, for exam-
ple Japanese, Mandarin Chinese, Cantonese, Thai,
Malay, Indonesian, Chamorro, Hebrew, Bangla,
and especially Vietnamese.
We are concerned with the reduplication of
Vietnamese. It is noted that Vietnamese is a mono-
syllabic language and its word forms never change,
contrary to occidental languages that make use of
morphological variations. Consequently, redupli-
cation is one popular and important word forma-
tion method which is extensively used to enrich the
lexicon. This follows that the Vietnamese lexicon
consists of a large number of reduplicative words.
This paper presents for the first time a compu-
tational model for recognition and production of a
large class of Vietnamese reduplicative words. We
show that Vietnamese reduplication can be sim-
ulated efficiently by finite-state devices. We first
introduce the Vietnamese lexicon and the struc-
ture of Vietnamese syllables. We next give a com-
plete study about the reduplication phenomenon
of Vietnamese language, bringing into focus for-
mation principles of reduplicative words. We then
propose optimal finite-state sequential transducers
recognizing and producing a substantial class of
these words. Finally, we present several nice ap-
plications of this computational model before con-
cluding and discussing the future work.
</bodyText>
<sectionHeader confidence="0.987155" genericHeader="method">
2 Vietnamese Lexicon
</sectionHeader>
<bodyText confidence="0.999855857142857">
In this section, we first present some general char-
acteristics of the Vietnamese language. We then
give some statistics of the Vietnamese lexicon and
introduce the structure of Vietnamese syllables.
The following basic characteristics of Viet-
namese are adopted from (Đoàn, 2003; Đoàn et
al. , 2003; Hffu et al. , 1998; Nguyễn et al. , 2006).
</bodyText>
<subsectionHeader confidence="0.994199">
2.1 Language Type
</subsectionHeader>
<bodyText confidence="0.999367333333333">
Vietnamese is classified in the Viet-Muong group
of the Mon-Khmer branch, that belongs to the
Austro-Asiatic language family. Vietnamese is
also known to have a similarity with languages
in the Tai family. The Vietnamese vocabulary fea-
tures a large amount of Sino-Vietnamese words.
</bodyText>
<page confidence="0.989553">
63
</page>
<note confidence="0.9968715">
Proceedings of the 7th Workshop on Asian Language Resources, ACL-IJCNLP 2009, pages 63–69,
Suntec, Singapore, 6-7 August 2009. c�2009 ACL and AFNLP
</note>
<bodyText confidence="0.997743">
Moreover, by being in contact with the French lan-
guage, Vietnamese was enriched not only in vo-
cabulary but also in syntax by the calque of French
grammar.
Vietnamese is an isolating language, which is
characterized by the following properties:
</bodyText>
<listItem confidence="0.993521714285714">
• it is a monosyllabic language;
• its word forms never change, contrary to oc-
cidental languages that make use of morpho-
logical variations (plural form, conjugation,
etc.);
• hence, all grammatical relations are mani-
fested by word order and function words.
</listItem>
<subsectionHeader confidence="0.995431">
2.2 Vocabulary
</subsectionHeader>
<bodyText confidence="0.99894">
Vietnamese has a special unit called “tiếng” that
corresponds at the same time to a syllable with re-
spect to phonology, a morpheme with respect to
morpho-syntax, and a word with respect to sen-
tence constituent creation. For convenience, we
call these “tiếng” syllables. The Vietnamese vo-
cabulary contains
</bodyText>
<listItem confidence="0.964611285714286">
• simple words, which are monosyllabic;
• reduplicative words composed by phonetic
reduplication;
• compound words composed by semantic co-
ordination and by semantic subodination;
• complex words phonetically transcribed from
foreign languages.
</listItem>
<bodyText confidence="0.9996794">
The Vietnamese lexicon edited recently by the
Vietnam Lexicography Center (Vietlex1) contains
40,181 words and idioms, which are widely used
in contemporary spoken language, newspapers
and literature. These words are made up of 7, 729
syllables. Table 1 shows some interesting statistics
of the word length measured in syllables. 6,303
syllables (about 81.55% of syllables) are words by
themselves. Two-syllable words are the most fre-
quent, consisting of nearly 71% of the vocabulary.
</bodyText>
<subsectionHeader confidence="0.998375">
2.3 Syllables
</subsectionHeader>
<bodyText confidence="0.9995054">
In this paragraph, we introduce phonetic attributes
of Vietnamese syllables. In addition of the mono-
syllabic characteristic, Vietnamese is a tonal lan-
guage in that each syllable has a certain pitch char-
acteristic. The meaning of a syllable varies with its
</bodyText>
<footnote confidence="0.977214">
1http://www.vietlex.com/
</footnote>
<table confidence="0.998971571428571">
Length # %
1 6,303 15.69
2 28,416 70.72
3 2,259 5.62
4 2,784 6.93
&gt; 5 419 1.04
Total 40,181 100
</table>
<tableCaption confidence="0.997845">
Table 1: Length of words measured in syllables
</tableCaption>
<table confidence="0.999214">
No. Tones Notation
low falling à
creaky rising ã
creaky falling ạ
mid level a
dipping ả
high rising á
</table>
<tableCaption confidence="0.999383">
Table 2: Vietnamese tones
</tableCaption>
<bodyText confidence="0.999253107142857">
tone. This phonetic mechanism can also be found
in other languages such that Chinese or Thai.
There are six tones in Vietnamese as specified
in Table 2. The letter a denotes any non-accent syl-
lable. These six tones can be roughly classified
into two groups corresponding to low and high
pitches in pronunciation. The first half of the ta-
ble contains three low tones and the second half
contains three high tones. In addition, the differ-
ence in the tone of two syllables are distinguished
by flat property of tones. The 1st and 4th tones in
Table 2 are flat (bằng), the other tones are non-flat
(trắc).
The structure of a Vietnamese syllable is given
in Table 3. Each syllable can be divided into three
parts: onset, rhyme and tone. The onset is usually
a consonant, however it may be empty. The rhyme
contains a vowel (nucleus) with or without glide
/w/, and an optional consonant (coda). It is no-
ticed that the initial consonant of a syllable does
not carry information of the tone, the Vietnamese
tone has an effect only on the rhyme part of the
syllable (Tran et al., 2006). This result reinforces
the fact that a tone is always marked by the nucleus
composant of the rhyme which is a vowel. Readers
who are interested in detail the phonetic composi-
tion of Vietnamese syllables may refer to (Tran et
al., 2006; Vu et al., 2005).
</bodyText>
<sectionHeader confidence="0.987328" genericHeader="method">
3 Reduplication in Vietnamese
</sectionHeader>
<bodyText confidence="0.978341">
Reduplication is one of the methods for creating
multi-syllable words in Vietnamese. A reduplica-
</bodyText>
<page confidence="0.998065">
64
</page>
<table confidence="0.955566">
Tone
Onset Rhyme
Glide Nucleus Coda
</table>
<tableCaption confidence="0.9331025">
Table 3: Phonetic structure of Vietnamese sylla-
bles
</tableCaption>
<bodyText confidence="0.978612391304348">
tive word is characterized by a phenomenon called
phonetic interchange, in which one or several pho-
netic elements of a syllable are repeated following
a certain number of specific rules.
From the point of view of sense, the redupli-
cation in Vietnamese usually indicates a diminu-
tive of adjectives, which can also be found in He-
brew, or a pluralization in Malay, in Thai and in
Indonesian, or an intensivity as the use of par-
tial reduplication in Japanese, Thai, Cantonese and
Chamorro (an Austronesian language spoken on
Guam and the Northern Mariana Islands). In this
aspect, Vietnamese reduplication serves similar
functions as those of reduplication in several Asian
languages, as reported in an investigation of Asian
language reduplication within the NEDO project
(Tokunaga et al. , 2008a; Tokunaga et al. , 2008b).
The Vietnamese reduplication creates an ex-
pressional sense connecting closely to the pho-
netic material of Vietnamese, a language of rich
melody. Consequently, there are many Vietnamese
reduplicative words which are difficult to inter-
pret to foreigners, though in general, native Viet-
namese speakers always use and understand them
correctly (Diệp, 1999).
Vietnamese reduplicative words can be classi-
fied into three classes basing on the number of
syllables they contain: two-syllable (or bi-syllabic)
reduplicative words, three-syllable (or tri-syllabic)
reduplicative words and four-syllable reduplicative
words. The bi-syllabic class is the most important
class because of two reasons: (1) bi-syllabic redu-
plicative words make up more than 98% amount of
reduplicative words, that is, almost reduplicative
words has two syllables; and (2) bi-syllabic redu-
plicative words embody principle characteristics
of the reduplication phenomenon in both phone as-
pect and sense formation aspect. For these reasons,
in this paper, we address only bi-syllabic redu-
plicative words and call them reduplicative words
for short, if there is no confusion.
As presented in the previous section, a syllable
has a strict structure containing three parts: the on-
set, the rhyme and the tone. Basing on the phonetic
interchange of a syllable, we distinguish two types
of reduplication:
</bodyText>
<listItem confidence="0.9235262">
• full reduplication, where the whole syllable is
repeated;
• partial reduplication, where either the onset
is repeated or the rhyme and the tone are re-
peated.
</listItem>
<bodyText confidence="0.999952272727273">
In this work, we constraint ourselves by focus-
ing only on the construction of an efficient com-
putational model applied for reduplicative words
which have clear and well-defined formation prin-
ciples. These words can be classified into three
types investigated in detail in the following sub-
sections. In given examples, the base syllables (or
root syllable, or root for short) are the ones which
are underlined. The reduplication that has unde-
fined or incomplete formation rules will be tackled
in future works.
</bodyText>
<subsectionHeader confidence="0.998283">
3.1 Full Reduplication
</subsectionHeader>
<bodyText confidence="0.999954157894737">
In this type of reduplication, the root is identically
repeated; there is only a slight difference on stress
in pronunciation. For example, hao hao (a little
similar), lăm lăm (intentional), đùng đùng (acci-
dentally dertermined), lừ lừ (silently). In the Viet-
namese lexicon there are 274 reduplicative words
of this type.
In principle, there appears to be many redu-
plicative words of this type whose their roots may
be whatever syllables bearing whatever tone, for
instance đỏ đỏ, hớ hớ, sững sững, chậm chậm.
However, in consequence of the difference of
stress between the root and the reduplicant, the
tone of the reduplicant is changed in order to be
in harmony with the root, for the sake of more
readability and audibility (“easier to read, easier
to hear”). This consequence leads to the formation
of reduplicative words of the second type which
we call reduplication with tone according.
</bodyText>
<subsectionHeader confidence="0.999922">
3.2 Reduplication with Tone According
</subsectionHeader>
<bodyText confidence="0.999960111111111">
As presented above, the difference between tone of
the root and the reduplicant is a consequence of the
difference between their stress which is expressed
by their tones. This creates reduplicative words of
the second type; for example, đo đỏ (reddish), hy
hớ (in the bloom of youth), sừng sững (statly, high
and majestic), chầm chậm (rather slow). The tone
properties (low or high pitch, flat or non-flat) are
now put into use.
</bodyText>
<page confidence="0.995567">
65
</page>
<figure confidence="0.599945">
Reduplicant Root #
a ả 72
a á 128
à ã 27
à ạ 80
Sum 307
</figure>
<tableCaption confidence="0.995539">
Table 4: Statistic of the second type reduplication
</tableCaption>
<bodyText confidence="0.999777357142857">
The prosodic influence is responsible for the
creation of the reduplicant from its root. As a re-
sult, the combination of tones between two sylla-
bles is realized in the following principle: non-flat
tones of the roots are matched against a corre-
sponding flat tones of their reduplicants. That is,
the non-flat root has to select for it the flat redupli-
cant belonging to the same pitch, i.e., in the same
row. In this type of reduplicative words, the root is
stressed in pronunciation.
A detailed statistic about these reduplicative
words with respect to the combination of tones
is given in Table 4. There are 307 reduplicative
words of the second type.
</bodyText>
<subsectionHeader confidence="0.9872565">
3.3 Reduplication with Final Consonant
According
</subsectionHeader>
<bodyText confidence="0.999990333333333">
In this type of reduplication, there is not only the
difference between tones of the root and the redu-
plicant but also the difference between their final
consonants (hence their penultimates). Some ex-
amples of this type of reduplication which we call
the third reduplication type are:
</bodyText>
<listItem confidence="0.97307325">
• cầm cập (clatter, shiver), lôm lốp (pop pop),
xăm xắp (a little full), thiêm thiếp (fall
asleep), nơm nớp (be in a state of suspense)
• giôn giốt (sourish), ngiun ngụt (burn vio-
</listItem>
<bodyText confidence="0.941409181818182">
lently), phơn phớt (light red), hun hút (pro-
found), san sát (be very close to, adjoining)
• vằng vặc (very clear), nhưng nhức (a little
ache), rừng rực (brightly), phăng phắc (very
silent), chênh chếch (a little oblique), anh ách
(feeling bloated).
The practical observation shows that the modifica-
tion of final consonant from the root to the dupli-
cate also has a clear rule: the noisy phone of the
root is transformed to a nasal phone of the redu-
plicant as shown in Table 5.
</bodyText>
<table confidence="0.999431555555555">
Example At root At reduplicant
Noisy phone Nasal phone
ăm ắp -p -m
-t -n
-c -ng
-ch -nh
phơn phớt
vằng vặc
anh ách
</table>
<tableCaption confidence="0.972432">
Table 5: Transformation rules of final consonants
</tableCaption>
<table confidence="0.999857666666667">
Root Reduplicant #
-p -m 52
-t -n 96
-c -ng 56
-ch -nh 28
Sum 232
</table>
<tableCaption confidence="0.999302">
Table 6: Statistic of the third type reduplication
</tableCaption>
<bodyText confidence="0.999726272727273">
The transformation of final consonant occurs
only with the roots having as final consonant p,
t, or c. The principle of tone combination is the
same as that of the second reduplication type.
A detailed statistic about these reduplicative
words is given in the Table 6. There are 232 redu-
plicative words of the third type.
Briefly, the total number of reduplicative words
of all the three types of reduplication is 813, mak-
ing up about 813/28,416 pt� 2.86% of the number
of two-syllable words.
</bodyText>
<sectionHeader confidence="0.998407" genericHeader="method">
4 Implementation
</sectionHeader>
<bodyText confidence="0.9999694">
We report in this section the construction of a com-
putational model for recognition and production
of the three types of reduplication presented in
the previous section. We have implemented finite-
state sequential transducers (FSTs) which are able
to recognize and produce corresponding types of
reduplicative words. These devices operate on the
same input and output alphabets, say E, containing
all Vietnamese characters.
FSTs are formal devices for encoding regular re-
lations. A regular relation is a mapping between
two regular languages. In our cases, these lan-
guages are sets of Vietnamese root and reduplicant
syllables.
We adapted nice and efficient algorithms devel-
oped by (Daciuk et al., 2000) to incrementally con-
struct minimal transducers from a source of data.
These algorithms are originally designed to build
optimal deterministic finite-state automata on-the-
fly but they can also be used to construct optimal
</bodyText>
<page confidence="0.978959">
66
</page>
<bodyText confidence="0.999727875">
sequential transducers. We could consider simply
that the alphabet of the automata would be E x E;
output strings of E* are associated with the fi-
nal states of the lexicon and they are only out-
puted once corresponding valid inputs from E are
recognized. Interested readers are invited to refer
to (Daciuk et al., 2000) for further detail of the al-
gorithms for building optimal automata on-the-fly.
</bodyText>
<subsectionHeader confidence="0.998337">
4.1 First Type Transducer
</subsectionHeader>
<bodyText confidence="0.999929529411765">
In the first type reduplication, the root and the
reduplicant is completely identical in writing; they
are only distinguished by a stress in pronunciation.
We can simply construct a deterministic finite-
state transducer (FST) f1 that produces redupli-
cants from their roots in which the output string la-
beled on each arc is the same as its input character;
that is f1(x) = x where x is a syllable in the first
type duplication. As an illustration, the following
minimal FST recognizes and generates three first
type reduplicative words luôn luôn (always), lừ lừ
(silently), khàn khàn (raucous).
The minimal FST f1 recognizing all 274 redu-
plicative words of the first type consists of 90
states in which 16 states are final ones. It has 330
transitions, the maximum number of outtransitions
from a state is 28.
</bodyText>
<subsectionHeader confidence="0.998219">
4.2 Second Type Transducer
</subsectionHeader>
<bodyText confidence="0.99975485">
In the second type reduplication, the root has an
non-flat tone while its reduplicant has the corre-
sponding flat tone. A root determines for it the
unique reduplicant. Hence we can construct a se-
quential FST f2 which is able to generate redupli-
cants from roots.
For instance, consider two reduplicative words
of the second type lem lém (glib) and lem lẻm
(voluble). They can be recognized by the minimal
sequential FST f2 such that f2(lém) = lem and
f2(lẻm) = lem as depicted in the following figure:
Similarly, the minimal FST f2 which gener-
ates three reduplicative words giông giống (a little
similar), gằng gẵng (interminable) and găm gắm
(fixedly) is as follows:
The minimal FST f2 recognizing all 307 redu-
plicative words of the second type consists of 93
states in which 11 states are final ones. It has 371
transitions, the maximum number of outtransitions
from a state is 22.
</bodyText>
<subsectionHeader confidence="0.99896">
4.3 Third Type Transducer
</subsectionHeader>
<bodyText confidence="0.99989975">
The roots and reduplicants in the third type redu-
plication are not only combined by principles of
flat and non-flat tones, they are also distinguised
by last consonants. We know that in the case the
root ends with c, its reduplicant is one character
longer than it. The other three transformations of
last consonants do not change the length of the
reduplicants with respect to that of the roots.
Hence the FST f3 which recognizes the third
type reduplication is required to modify the tones
of the reduplicants with respect to those of the
roots on the one hand, and to transform last conso-
nants of the roots on the other hand. For example,
the minimal FST f3 recognizing four reduplicative
words biêng biếc (bluish green), biền biệt (leave
behind no traces whatsoever), bình bịch (a series
of thudding blows) and bôm bốp (pop pop) is given
in the figure below:
The minimal FST f3 recognizing all 232 redu-
plicative words of the third type consists of 59
</bodyText>
<figure confidence="0.998395913043478">
h:h q2 à:à
q1
k:k
q0
ô:ô
q3
n:n
l:l
u:u
qs
q4
q5
ừ:ừ
é:e
ẻ:e
l:l m:m
q0 q1 q2 q3
ắ:ă
m:m
f&apos;_
i:i q2 0:0
g:g
n:n
q0 q1
q3 q4
g:g
ẵ:ằ
đ:đ
qs q7
q5
ế:ê
i:i q2 c:ng
b:b
q0 q1
t:n
ị:ì
- z
e:e
q3
q4
ố:ô
qs q5
c:n h:h
q7
p:m
qs
</figure>
<page confidence="0.9977">
67
</page>
<bodyText confidence="0.999953111111111">
states in which 2 states are final ones. It has 262
transitions, the maximum number of outtransitions
from a state is 19.
Once all the three transducers have been con-
structed, we can unify them by making use of
the standard union operation on transducers to
obtain a sequential FST which is able to recog-
nize all the three class of reduplication presented
above (Mohri, 1996; Mohri, 1997).
</bodyText>
<subsectionHeader confidence="0.999595">
4.4 A Software Package
</subsectionHeader>
<bodyText confidence="0.996968977777778">
We have developed a Java software package named
vnReduplicator which implements the above-
mentioned computational model of Vietnamese
reduplication. The core component of this pack-
age is a minimal FST which can recognize a sub-
stantial amount of reduplicative bi-syllabic words
found in the Vietnamese language.
The first application of this core model which
we have developed is a reduplication scanner for
Vietnamese. We use the minimal FST of the core
model to build a tool for fast detection of redu-
plication. The tool scans a given input text and
produces a list of all the recognized reduplicative
words. The detection process is very fast since the
underlying transducer operates in optimal time in
the sense that the time to recognize a syllable cor-
responds to the time required to follow a single
path in the deterministic finite-state machine, and
the length of the path is the length of the syllable
measured in characters.
As an example, given the following input text
“Anh đi biền biệt. Cô vẫn chờ anh hơn 20 năm
đằng đẵng.”2,
the scanner marks two reduplicative words as
shown in the italic face.
We are currently investigating another useful
application of the core model for a partial spell
checking of Vietnamese text. It is observed that
people may make typhographical errors in writing
like đằng đắng instead of the correct word đằng
đẵng. In such cases, the computational model can
be exploited to detect the potential errors and sug-
gest corrections.
The reduplication model could also help im-
prove the accuracy of Vietnamese lexical rec-
ognizers in particular and the accuracy of Viet-
namese word segmentation systems in general.
2He has left behind no traces whatsoever. She has been
waiting for him for 20 years.
The reduplication scanner will be integrated to vn-
Tokenizer3 - an open source and highly accurate
tokenizer for Vietnamese texts (Le et al., 2008).
The software and related resources will be dis-
tributed under the GNU General Public Lisence4
and it will be soon available online5.
</bodyText>
<sectionHeader confidence="0.976858" genericHeader="conclusions">
5 Conclusion and Future Work
</sectionHeader>
<bodyText confidence="0.9999891">
We have presented for the first time a compu-
tational model for the reduplication of the Viet-
namese language. We show that a large class of
reduplicative words can be modeled effectively by
sequential finite-state string-to-string transducers.
The analysis of the various patterns of redu-
plication of the Vietnamese language has twofold
contributions. On the one hand, it gives useful
information on identification of spelling variants
in Vietnamese texts. On the other hand, it gives
an explicit formalization of precedence relation-
ships in the phonology, and as a result helps or-
dering and modeling phonological processes be-
fore transfer of the presentation to the articulatory
interface.
It is argued that the relation between morphol-
ogy and phonology is an intimate one, both syn-
chronically and diachronically. As mentioned ear-
lier, Vietnamese reduplication is always accompa-
nied by a modification of phone and tone for a
symmetric and harmonic posture. We thus believe
that the compact finite-state description of a large
class of reduplication would help connect mor-
phosyntactic attributes to individual phonological
components of a set of Vietnamese word forms
and contribute to the improvement of Vietnamese
automatic speech recognition systems.
As mentioned earlier, the current work does not
handle partial reduplication in which either the on-
set is repeated or the rhyme and the tone of sylla-
bles are repeated, for example bồng bềnh (bob),
chúm chím (open slightly one’s lips), lẩm cẩm
(doting), lúng túng (perplexed, embarrassed). Par-
tial reduplication is a topic which has been well
studied for a long time by Vietnamese linguists
community. It has been shown that partial redu-
plicative words also have certain principle forma-
tion rules (Diệp, 1999; UBKHXH, 1983). Hence,
partial reduplicative words could also be gener-
ated and recognized by an appropriate finite-state
</bodyText>
<footnote confidence="0.999886666666667">
3http://www.loria.fr/�lehong/tools/vnTokenizer.php
4http://www.gnu.org/copyleft/gpl.html
5http://www.loria.fr/�lehong/projects.php
</footnote>
<page confidence="0.998981">
68
</page>
<bodyText confidence="0.99994512">
model which encodes precisely their formation
rules. This is an interesting topic of our future
work in constructing a rather complete computa-
tional model for Vietnamese bi-syllabic reduplica-
tion.
Furthermore, in addition to the bi-syllabic redu-
plication forms, there exists also three or four syl-
lable reduplication forms, for example cỏn còn con
(very little), tẹo tèo teo (very small), or vội vội
vàng vàng (hurry), đủng đà đủng đỉnh (deliber-
ate). These reduplication forms involve the copy-
ing operation of morphological structures which
is a non-regular operation. Non-regular operations
are problematic in that they cannot be cast in terms
of composition – the regular operation of ma-
jor importance in finite-state devices, while finite-
state devices cannot handle unbounded copying.
However, the question of the possibility for an el-
egant account to reduce these specific kinds of
reduplication to purely regular mechanisms would
be of interest for further research to extend and im-
prove the core reduplication components for Viet-
namese. Unknown reduplicative word guessing is
another interesting and useful topic since the lexi-
con can never cover all reduplicative words.
</bodyText>
<sectionHeader confidence="0.976704" genericHeader="acknowledgments">
Acknowledgement
</sectionHeader>
<bodyText confidence="0.999872">
We gratefully acknowledge helpful comments and
valuable suggestions from three anonymous re-
viewers for improving the paper.
</bodyText>
<sectionHeader confidence="0.999197" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999212884057971">
Yael Cohen-Sygal and Shuly Wintner. 2006. Finite-
State Registered Automata for Non-Concatenative
Morphology. Computational Linguistics, Vol. 32,
No. 1, Pages 49–82.
Jan Daciuk, Stoyan Mihov, Bruce W. Watson and
Richard E. Watson. 2000 Incremental Construction
of Minimal Acyclic Finite-State Automata. Compu-
tational Linguistics, Vol. 26, No. 1, 2000.
Le H. Phuong, Nguyen T. M. Huyen, Roussanaly A.,
Ho T. Vinh. 2008 A hybrid approach to word seg-
mentation of Vietnamese texts. Proceedings of the
2nd International Conference on Language and Au-
tomata Theory and Applications, Tarragona, Spain.
Springer LNCS 5196, 2008.
Diệp Quang Ban and Hoàng Văn Thung. 1999 Ngữ
pháp Tiếng Việt (Vietnamese Grammar). NXB Giáo
dục, Hà Nội, Việt Nam.
Đoàn Thiện Thuật. 2003 Ngữ âm tiếng Việt (Viet-
namese Phonetics). NXB Đại học Quốc gia Hà Nội,
Hà Nội, Việt Nam.
Đoàn Thiện Thuật (Editor-in-chief) and Nguyễn Khánh
Hà and Phạm Nhti Quỳnh. 2003 A Concise Viet-
namese Grammar (For Non-native Speakers)). Thế
Giới Publishers, Hà Nội, Việt Nam.
Hitu Đạt and Trần Trí Dõi and Đào Thanh Lan. 1998
Cơ sở tiếng Việt (Basis of Vietnamese). NXB Giáo
dục, Hà Nội, Việt Nam.
Ronald Kaplan and Martin Kay. 1994. Regular Models
of Phonological Rule Systems. Computational Lin-
guistics, Vol. 20, No. 3, Pages 331–378.
Koskenniemi Kimmo. 1983 Two-Level Morphology:
A General Computational Model for Word-Form
Recognition and Production. The Department of
General Linguistics, University of Helsinki.
Mehryar Mohri. 1996 On Some Applications of Finite-
State Automata Theory to Natural Language Pro-
cessing. Natural Language Engineering, Vol. 2, No.
1, Pages 61–80.
Mehryar Mohri. 1997 Finite-State Transducers in Lan-
guage and Speech Processing. Computational Lin-
guistics, Vol. 23.
Nguyễn Thị Minh Huyền, Laurent Romary, Mathias
Rossignol and Vũ Xuân Ltiơng. 2006. A Lexicon
for Vietnamese Language Processing. Language Re-
sources and Evaluation, Vol. 40, No. 3–4.
Tokunaga T., Kaplan D., Huang C-R., Hsieh S-K, Cal-
zolari N., Monachini M., Soria C., Shirai K., Sorn-
lertlamvanich V., Charoenporn T., Xia Y., 2008.
Adapting international standard for Asian language
technologies. Proceedings of The 6th International
Conference on Language Resources and Evaluation
(LREC 2008)
Tokunaga T. et al. 2008. Developing International
Standards of Language Resources for Semantic Web
Applications Research Report of the International
Joint Research Program (NEDO Grant) for FY 2007,
http://www.tech.nedo.go.jp/PDF/100013569.pdf
Tran D. D. and Castelli E. and Serignat J. F. and Trinh
V. L. and Le X. H. 2006. Linear Fo Contour Model
for Vietnamese Tones and Vietnamese Syllable Syn-
thesis with TD-PSOLA. Proceedings of TAL2006,
La Rochelle, France.
Thang Tat Vu, Dung Tien Nguyen, Mai Chi Luong and
John-Paul Hosom. 2006. Vietnamese Large Vocab-
ulary Continuous Speech Recognition. Proceedings
of Eurospeech 2005, Lisboa.
Ủy ban Khoa học Xã hội Việt Nam. 1983. Ngữ pháp
tiếng Việt (Vietnamese Grammar). Nhà xuất bản
Khoa học Xã hội – Hà Nội, Việt Nam.
</reference>
<page confidence="0.999303">
69
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.739873">
<title confidence="0.99983">Finite-State Description of Vietnamese Reduplication</title>
<author confidence="0.9205025">of Science</author>
<author confidence="0.9205025">Vietnam LORIA</author>
<author confidence="0.9205025">France</author>
<email confidence="0.883344">lehong@loria.frhuyenntm@vnu.edu.vnazim@loria.fr</email>
<abstract confidence="0.998874894736842">We present for the first time a computational model for the reduplication of the Vietnamese language. Reduplication is a popular phenomenon of Vietnamese in which reduplicative words are created by the combination of multiple syllables whose phonics are similar. We first give a systematical study of Vietnamese reduplicative words, bringing into focus clear principles for the formation of a large class of bi-syllabic reduplicative words. We then make use of optimal finite-state devices, in particular minimal sequential string-to string transducers to build a computational model for very efficient recognition and production of those words. Finally, several nice applications of this computational model are discussed.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Yael Cohen-Sygal</author>
<author>Shuly Wintner</author>
</authors>
<title>FiniteState Registered Automata for Non-Concatenative Morphology.</title>
<date>2006</date>
<journal>Computational Linguistics,</journal>
<volume>32</volume>
<pages>49--82</pages>
<contexts>
<context position="1461" citStr="Cohen-Sygal and Wintner, 2006" startWordPosition="204" endWordPosition="207">ognition and production of those words. Finally, several nice applications of this computational model are discussed. 1 Introduction Finite-state technology has been applied successfully for describing the morphological processes of many natural languages since the pioneering works of (Kaplan and Kay, 1994; Koskenniemi, 1983). It is shown that while finite-state approaches to most natural languages have generally been very successful, they are less suitable for non-concatenative phenomena found in some languages, for example the non-concatenative word formation processes in Semitic languages (Cohen-Sygal and Wintner, 2006). A popular nonconcatenative process is reduplication – the process in which a morpheme or part of it is duplicated. Reduplication is a common linguistic phenomenon in many Asian languages, for example Japanese, Mandarin Chinese, Cantonese, Thai, Malay, Indonesian, Chamorro, Hebrew, Bangla, and especially Vietnamese. We are concerned with the reduplication of Vietnamese. It is noted that Vietnamese is a monosyllabic language and its word forms never change, contrary to occidental languages that make use of morphological variations. Consequently, reduplication is one popular and important word </context>
</contexts>
<marker>Cohen-Sygal, Wintner, 2006</marker>
<rawString>Yael Cohen-Sygal and Shuly Wintner. 2006. FiniteState Registered Automata for Non-Concatenative Morphology. Computational Linguistics, Vol. 32, No. 1, Pages 49–82.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jan Daciuk</author>
<author>Stoyan Mihov</author>
<author>Bruce W Watson</author>
<author>Richard E Watson</author>
</authors>
<date>2000</date>
<journal>Incremental Construction of Minimal Acyclic Finite-State Automata. Computational Linguistics,</journal>
<volume>26</volume>
<contexts>
<context position="14903" citStr="Daciuk et al., 2000" startWordPosition="2403" endWordPosition="2406">n and production of the three types of reduplication presented in the previous section. We have implemented finitestate sequential transducers (FSTs) which are able to recognize and produce corresponding types of reduplicative words. These devices operate on the same input and output alphabets, say E, containing all Vietnamese characters. FSTs are formal devices for encoding regular relations. A regular relation is a mapping between two regular languages. In our cases, these languages are sets of Vietnamese root and reduplicant syllables. We adapted nice and efficient algorithms developed by (Daciuk et al., 2000) to incrementally construct minimal transducers from a source of data. These algorithms are originally designed to build optimal deterministic finite-state automata on-thefly but they can also be used to construct optimal 66 sequential transducers. We could consider simply that the alphabet of the automata would be E x E; output strings of E* are associated with the final states of the lexicon and they are only outputed once corresponding valid inputs from E are recognized. Interested readers are invited to refer to (Daciuk et al., 2000) for further detail of the algorithms for building optima</context>
</contexts>
<marker>Daciuk, Mihov, Watson, Watson, 2000</marker>
<rawString>Jan Daciuk, Stoyan Mihov, Bruce W. Watson and Richard E. Watson. 2000 Incremental Construction of Minimal Acyclic Finite-State Automata. Computational Linguistics, Vol. 26, No. 1, 2000.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Le H Phuong</author>
<author>Nguyen T M Huyen</author>
<author>A Roussanaly</author>
<author>Ho T Vinh</author>
</authors>
<title>A hybrid approach to word segmentation of Vietnamese texts.</title>
<date>2008</date>
<booktitle>Proceedings of the 2nd International Conference on Language and Automata Theory and Applications,</booktitle>
<tech>LNCS 5196,</tech>
<publisher>Springer</publisher>
<location>Tarragona,</location>
<marker>Phuong, Huyen, Roussanaly, Vinh, 2008</marker>
<rawString>Le H. Phuong, Nguyen T. M. Huyen, Roussanaly A., Ho T. Vinh. 2008 A hybrid approach to word segmentation of Vietnamese texts. Proceedings of the 2nd International Conference on Language and Automata Theory and Applications, Tarragona, Spain. Springer LNCS 5196, 2008.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Diệp Quang</author>
</authors>
<title>Ban and Hoàng Văn Thung.</title>
<date>1999</date>
<location>Việt Nam.</location>
<marker>Quang, 1999</marker>
<rawString>Diệp Quang Ban and Hoàng Văn Thung. 1999 Ngữ pháp Tiếng Việt (Vietnamese Grammar). NXB Giáo dục, Hà Nội, Việt Nam.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Đoàn Thiện Thuật</author>
</authors>
<title>Ngữ âm tiếng Việt (Vietnamese Phonetics). NXB Đại học Quốc gia Hà Nội, Hà Nội,</title>
<date>2003</date>
<location>Việt Nam.</location>
<marker>Thuật, 2003</marker>
<rawString>Đoàn Thiện Thuật. 2003 Ngữ âm tiếng Việt (Vietnamese Phonetics). NXB Đại học Quốc gia Hà Nội, Hà Nội, Việt Nam.</rawString>
</citation>
<citation valid="true">
<title>Đoàn Thiện Thuật (Editor-in-chief) and Nguyễn Khánh Hà and Phạm Nhti Quỳnh.</title>
<date>2003</date>
<location>Việt Nam.</location>
<marker>2003</marker>
<rawString>Đoàn Thiện Thuật (Editor-in-chief) and Nguyễn Khánh Hà and Phạm Nhti Quỳnh. 2003 A Concise Vietnamese Grammar (For Non-native Speakers)). Thế Giới Publishers, Hà Nội, Việt Nam.</rawString>
</citation>
<citation valid="true">
<title>Hitu Đạt and Trần Trí Dõi and Đào Thanh Lan.</title>
<date>1998</date>
<location>Việt Nam.</location>
<marker>1998</marker>
<rawString>Hitu Đạt and Trần Trí Dõi and Đào Thanh Lan. 1998 Cơ sở tiếng Việt (Basis of Vietnamese). NXB Giáo dục, Hà Nội, Việt Nam.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ronald Kaplan</author>
<author>Martin Kay</author>
</authors>
<title>Regular Models of Phonological Rule Systems.</title>
<date>1994</date>
<journal>Computational Linguistics,</journal>
<volume>20</volume>
<pages>331--378</pages>
<contexts>
<context position="1138" citStr="Kaplan and Kay, 1994" startWordPosition="159" endWordPosition="162">tudy of Vietnamese reduplicative words, bringing into focus clear principles for the formation of a large class of bi-syllabic reduplicative words. We then make use of optimal finite-state devices, in particular minimal sequential string-to string transducers to build a computational model for very efficient recognition and production of those words. Finally, several nice applications of this computational model are discussed. 1 Introduction Finite-state technology has been applied successfully for describing the morphological processes of many natural languages since the pioneering works of (Kaplan and Kay, 1994; Koskenniemi, 1983). It is shown that while finite-state approaches to most natural languages have generally been very successful, they are less suitable for non-concatenative phenomena found in some languages, for example the non-concatenative word formation processes in Semitic languages (Cohen-Sygal and Wintner, 2006). A popular nonconcatenative process is reduplication – the process in which a morpheme or part of it is duplicated. Reduplication is a common linguistic phenomenon in many Asian languages, for example Japanese, Mandarin Chinese, Cantonese, Thai, Malay, Indonesian, Chamorro, H</context>
</contexts>
<marker>Kaplan, Kay, 1994</marker>
<rawString>Ronald Kaplan and Martin Kay. 1994. Regular Models of Phonological Rule Systems. Computational Linguistics, Vol. 20, No. 3, Pages 331–378.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Koskenniemi Kimmo</author>
</authors>
<title>Two-Level Morphology: A General Computational Model for Word-Form Recognition and Production. The Department of General Linguistics,</title>
<date>1983</date>
<institution>University of Helsinki.</institution>
<marker>Kimmo, 1983</marker>
<rawString>Koskenniemi Kimmo. 1983 Two-Level Morphology: A General Computational Model for Word-Form Recognition and Production. The Department of General Linguistics, University of Helsinki.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mehryar Mohri</author>
</authors>
<title>On Some Applications of FiniteState Automata Theory to Natural Language Processing.</title>
<date>1996</date>
<journal>Natural Language Engineering,</journal>
<volume>2</volume>
<pages>61--80</pages>
<contexts>
<context position="18849" citStr="Mohri, 1996" startWordPosition="3107" endWordPosition="3108">nsists of 59 h:h q2 à:à q1 k:k q0 ô:ô q3 n:n l:l u:u qs q4 q5 ừ:ừ é:e ẻ:e l:l m:m q0 q1 q2 q3 ắ:ă m:m f&apos;_ i:i q2 0:0 g:g n:n q0 q1 q3 q4 g:g ẵ:ằ đ:đ qs q7 q5 ế:ê i:i q2 c:ng b:b q0 q1 t:n ị:ì - z e:e q3 q4 ố:ô qs q5 c:n h:h q7 p:m qs 67 states in which 2 states are final ones. It has 262 transitions, the maximum number of outtransitions from a state is 19. Once all the three transducers have been constructed, we can unify them by making use of the standard union operation on transducers to obtain a sequential FST which is able to recognize all the three class of reduplication presented above (Mohri, 1996; Mohri, 1997). 4.4 A Software Package We have developed a Java software package named vnReduplicator which implements the abovementioned computational model of Vietnamese reduplication. The core component of this package is a minimal FST which can recognize a substantial amount of reduplicative bi-syllabic words found in the Vietnamese language. The first application of this core model which we have developed is a reduplication scanner for Vietnamese. We use the minimal FST of the core model to build a tool for fast detection of reduplication. The tool scans a given input text and produces a </context>
</contexts>
<marker>Mohri, 1996</marker>
<rawString>Mehryar Mohri. 1996 On Some Applications of FiniteState Automata Theory to Natural Language Processing. Natural Language Engineering, Vol. 2, No. 1, Pages 61–80.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mehryar Mohri</author>
</authors>
<date>1997</date>
<booktitle>Finite-State Transducers in Language and Speech Processing. Computational Linguistics,</booktitle>
<volume>23</volume>
<contexts>
<context position="18863" citStr="Mohri, 1997" startWordPosition="3109" endWordPosition="3110">h:h q2 à:à q1 k:k q0 ô:ô q3 n:n l:l u:u qs q4 q5 ừ:ừ é:e ẻ:e l:l m:m q0 q1 q2 q3 ắ:ă m:m f&apos;_ i:i q2 0:0 g:g n:n q0 q1 q3 q4 g:g ẵ:ằ đ:đ qs q7 q5 ế:ê i:i q2 c:ng b:b q0 q1 t:n ị:ì - z e:e q3 q4 ố:ô qs q5 c:n h:h q7 p:m qs 67 states in which 2 states are final ones. It has 262 transitions, the maximum number of outtransitions from a state is 19. Once all the three transducers have been constructed, we can unify them by making use of the standard union operation on transducers to obtain a sequential FST which is able to recognize all the three class of reduplication presented above (Mohri, 1996; Mohri, 1997). 4.4 A Software Package We have developed a Java software package named vnReduplicator which implements the abovementioned computational model of Vietnamese reduplication. The core component of this package is a minimal FST which can recognize a substantial amount of reduplicative bi-syllabic words found in the Vietnamese language. The first application of this core model which we have developed is a reduplication scanner for Vietnamese. We use the minimal FST of the core model to build a tool for fast detection of reduplication. The tool scans a given input text and produces a list of all th</context>
</contexts>
<marker>Mohri, 1997</marker>
<rawString>Mehryar Mohri. 1997 Finite-State Transducers in Language and Speech Processing. Computational Linguistics, Vol. 23.</rawString>
</citation>
<citation valid="true">
<title>Nguyễn Thị Minh Huyền, Laurent Romary, Mathias Rossignol and Vũ Xuân Ltiơng.</title>
<date>2006</date>
<journal>Language Resources and Evaluation,</journal>
<volume>40</volume>
<marker>2006</marker>
<rawString>Nguyễn Thị Minh Huyền, Laurent Romary, Mathias Rossignol and Vũ Xuân Ltiơng. 2006. A Lexicon for Vietnamese Language Processing. Language Resources and Evaluation, Vol. 40, No. 3–4.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Tokunaga</author>
<author>D Kaplan</author>
<author>C-R Huang</author>
<author>S-K Hsieh</author>
<author>N Calzolari</author>
<author>M Monachini</author>
<author>C Soria</author>
<author>K Shirai</author>
<author>V Sornlertlamvanich</author>
<author>T Charoenporn</author>
<author>Y Xia</author>
</authors>
<title>Adapting international standard for Asian language technologies.</title>
<date>2008</date>
<booktitle>Proceedings of The 6th International Conference on Language Resources and Evaluation (LREC</booktitle>
<marker>Tokunaga, Kaplan, Huang, Hsieh, Calzolari, Monachini, Soria, Shirai, Sornlertlamvanich, Charoenporn, Xia, 2008</marker>
<rawString>Tokunaga T., Kaplan D., Huang C-R., Hsieh S-K, Calzolari N., Monachini M., Soria C., Shirai K., Sornlertlamvanich V., Charoenporn T., Xia Y., 2008. Adapting international standard for Asian language technologies. Proceedings of The 6th International Conference on Language Resources and Evaluation (LREC 2008)</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Tokunaga</author>
</authors>
<title>Developing International Standards of Language Resources for Semantic Web Applications</title>
<date>2008</date>
<booktitle>Research Report of the International Joint Research Program (NEDO Grant) for FY 2007, http://www.tech.nedo.go.jp/PDF/100013569.pdf</booktitle>
<marker>Tokunaga, 2008</marker>
<rawString>Tokunaga T. et al. 2008. Developing International Standards of Language Resources for Semantic Web Applications Research Report of the International Joint Research Program (NEDO Grant) for FY 2007, http://www.tech.nedo.go.jp/PDF/100013569.pdf</rawString>
</citation>
<citation valid="true">
<authors>
<author>D D Tran</author>
<author>E Castelli</author>
<author>J F Serignat</author>
<author>V L Trinh</author>
<author>H Le X</author>
</authors>
<title>Linear Fo Contour Model for Vietnamese Tones and Vietnamese Syllable Synthesis with TD-PSOLA.</title>
<date>2006</date>
<booktitle>Proceedings of TAL2006,</booktitle>
<location>La Rochelle, France.</location>
<marker>Tran, Castelli, Serignat, Trinh, Le X, 2006</marker>
<rawString>Tran D. D. and Castelli E. and Serignat J. F. and Trinh V. L. and Le X. H. 2006. Linear Fo Contour Model for Vietnamese Tones and Vietnamese Syllable Synthesis with TD-PSOLA. Proceedings of TAL2006, La Rochelle, France.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Thang Tat Vu</author>
<author>Dung Tien Nguyen</author>
<author>Mai Chi Luong</author>
<author>John-Paul Hosom</author>
</authors>
<title>Vietnamese Large Vocabulary Continuous Speech Recognition.</title>
<date>2006</date>
<booktitle>Proceedings of Eurospeech 2005,</booktitle>
<location>Lisboa.</location>
<marker>Vu, Nguyen, Luong, Hosom, 2006</marker>
<rawString>Thang Tat Vu, Dung Tien Nguyen, Mai Chi Luong and John-Paul Hosom. 2006. Vietnamese Large Vocabulary Continuous Speech Recognition. Proceedings of Eurospeech 2005, Lisboa.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ủy ban</author>
</authors>
<title>Khoa học Xã hội Việt Nam.</title>
<date>1983</date>
<location>Việt Nam.</location>
<marker>ban, 1983</marker>
<rawString>Ủy ban Khoa học Xã hội Việt Nam. 1983. Ngữ pháp tiếng Việt (Vietnamese Grammar). Nhà xuất bản Khoa học Xã hội – Hà Nội, Việt Nam.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>