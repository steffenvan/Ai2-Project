<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<title confidence="0.998551">
Automatic Extraction of Facts from Press Releases
to Generate News Stories
</title>
<author confidence="0.986456666666667">
Peggy M. Andersen, Philip J. Hayes
Alison K. Huettner, Linda M. Schmandt
Irene B. Nirenburg
</author>
<affiliation confidence="0.831453">
Carnegie Group, Inc.
5 PPG Place
Pittsburgh, PA 15222, USA
</affiliation>
<sectionHeader confidence="0.98436" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999915869565217">
While complete understanding of arbitrary input text
remains in the future, it is currently possible to construct
natural language processing systems that provide a partial
understanding of text with limited accuracy. Moreover,
such systems can provide cost-effective solutions to
commercially-significant business problems. This paper
describes one such system: JASPER. JASPER is a fact
extraction system recently developed and deployed by
Carnegie Group for Reuters Ltd. JASPER uses a
template-driven approach, partial understanding
techniques, and heuristic procedures to extract certain key
pieces of information from a limited range of text.
We believe that many significant business problems can
be solved by fact extraction applications which involve
locating and extracting specific, predefined types of
information from a limited range of text. The information
extracted by such systems can be used in a variety of
ways, such as filling in values in a database, generating
summaries of the input text, serving as a part of the
knowledge in an expert system, or feeding into another
program which bases decisions on it. We expect to
develop many such applications in the future using similar
techniques.
</bodyText>
<sectionHeader confidence="0.997785" genericHeader="introduction">
1. Introduction
</sectionHeader>
<bodyText confidence="0.999823642857143">
While a computer program that can provide complete
understanding of arbitrary input text remains a distant
dream, it is currently possible to construct natural language
processing systems that provide a partial understanding of
certain types of text with limited accuracy. Moreover, such
systems can provide cost-effective solutions to
commercially-significant business problems. This paper
describes one such system: JASPER. JASPER (Journalist&apos;s
Assistant for Preparing Earnings Reports) is a fact
extraction system recently developed and deployed by
Carnegie Group for Reuters Ltd. JASPER uses a template-
driven approach and partial understanding techniques to
extract certain key pieces of information from a limited
range of text. Specifically, JASPER takes as input a live
</bodyText>
<author confidence="0.530153">
Steven P. Weinstein
</author>
<affiliation confidence="0.32136">
Reuters Ltd
</affiliation>
<address confidence="0.8249105">
85 Fleet Street
London, EC4P 4AJ England
</address>
<bodyText confidence="0.999835485714285">
feed of company press releases from PR Newswire. It
identifies which of those releases contain information on
company earnings and dividends, and for those releases, it
extracts a predetermined set of information. It then
reformats that information into a candidate Reuters news
story and ships it off to a financial journalist for validation
or editing. JASPER improves both the speed and accuracy
of producing Reuters stories and hence provides a
significant competitive advantage in the fast-paced world of
financial journalism.
JASPER gets excellent results in terms of both accuracy
and speed. It does this by combining frame-based
knowledge representation, object-oriented processing,
powerful pattern matching, and heuristics which take
advantage of stylistic conventions, including lexical,
syntactic, semantic, and pragmatic regularities observed in
the text corpus. The shallow, localized processing approach
that we have adopted focusses on the information to be
extracted and ignores irrelevant text. The first phase of
JASPER has been deployed at Reuters for use and testing.
It provides a low-risk and high-value solution to a real-
world business problem.
JASPER&apos;s architecture facilitates transfer to other fact
extraction applications; the domain-independent core which
controls processing is separate from the application-specific
knowledge base which makes decisions about extracting
information, so only the latter needs to be rewritten for other
applications. SO, the knowledge engineering required to
build an application is significant. We estimate that the
JASPER application involved approximately eight person
months in knowledge engineering, apart from basic system
development.
Many significant business problems can be solved by
similarly focussed fact extraction applications. The
information extracted can used in a variety of ways, such as
</bodyText>
<page confidence="0.993444">
170
</page>
<bodyText confidence="0.999945">
filling in values in a database, generating summaries of the
input text, serving as a part of the knowledge in an expert
system, or feeding into another program which bases
decisions on it. We expect to develop many such
applications in the future using similar techniques.
</bodyText>
<sectionHeader confidence="0.999865" genericHeader="related work">
2. Related Work
</sectionHeader>
<bodyText confidence="0.9860125">
Most text understanding systems have generally fallen
into two categories:
</bodyText>
<listItem confidence="0.99184875">
• systems which attempt to perform a complete linguistic
analysis of the text
• systems which perform partial understanding to
accomplish certain specific understanding tasks
</listItem>
<bodyText confidence="0.999050444444444">
Most of the linguistically-based systems perform a more
or less pure syntactic analysis and a semantic and/or
pragmatic analysis to arrive at a representation of the
meaning of the text. TACITUS [3], PROTEUS [5],
PUNDIT [2], CAUCUS [9], and the News Analysis System
(NAS) [6] all fall into this category. The systems differ in
the specifics of the syntactic, semantic and pragmatic
analysis used and in the degree to which the different levels
of processing are integrated. For example, TACITUS&apos;
syntactic step does enough semantic processing to produce a
logical form; a second step performs pragmatic tasks such
as reference resolution. Some systems base their processing
on a particular linguistic theory; for example, CAUCUS
uses Lexical Functional Grammar and NAS uses a
Government-Binding approach to syntax and semantics.
Other systems use more idiosyncratic approaches to the
analysis.
These linguistically-based systems have a tremendous
potential for complete understanding of a wide range of text,
because, in theory, they do a complete analysis of the text.
However, the processing of such systems tends to be
relatively slow; in addition, these systems have tended to be
used in research contexts in part because the range of
coverage that they can provide is necessarily limited. A full
analysis of text that covers diverse topics or that must be
processed at a high rate of throughput is not feasible given
the current state of the art.
Systems which do not attempt a complete understanding
of the text, but rather focus on specific understanding tasks
are more likely to result in deployable applications.
ATRANS [7], the only major deployed fact extraction
system before JASPER, is the most notable example.
ATRANS operates in the domain of international banking
telexes, dealing with one major subclass of such telexes --
money transfer telexes. ATRANS automatically extracts
the information required to complete the transfer (the
various banks mentioned in the telex, their roles in the
money transfer, payment amounts, dates, security keys, etc.)
and formats it for entry into the bank&apos;s automated
transaction processing system. The understanding
techniques used in ATRANS are based on caseframe
analysis using the Conceptual Dependency formalism
[8] which relies on semantics over syntax, and does not
require a complete analysis of the text.
General Electric&apos;s SCISOR system [4] uses a hybrid
approach, combining syntactic and caseframe parsing. This
allows it to exploit the strong top-down domain expectations
provided by caseframes to deal with relevant fragments
from text that it cannot fully analyze, while at the same time
generating complete linguistic analyses when possible.
SCISOR is also designed so that general grammatical
knowledge and domain-specific knowledge are kept
separate. This will greatly facilitate its transfer to other
domains.
</bodyText>
<sectionHeader confidence="0.885172" genericHeader="method">
3. Business Problem
</sectionHeader>
<bodyText confidence="0.999721214285714">
A major component of Reuters business is to provide
real-time fmancial news to financial traders. Corporate
earnings and dividend reports are two routine, but extremely
important, types of financial news that Reuters handles.
Publicly-traded companies must, by law, provide this
information periodically, and equities traders rely on news
services like Reuters to distill the companies&apos; reports and
make the information available within minutes or even
seconds so that they can use it to make decisions about
which stocks to buy and sell. It is imperative that the
reports be generated very quickly and very accurately; if
Reuters can produce important earnings and dividend stories
first, they will have the edge in the very competitive real-
time fmancial news market.
One important electronic sources of earnings information
is PR Newswire, which provides a wide range of press
releases on many topics to subscribers. Figure 1 is a typical
earnings press release received through the PR Newswire
service. Figure 2 shows the corresponding Reuters news
story which a reporter would generate from this release.
While the production of these reports is crucial to Reuters
business, it is a routine, tedious task which requires just
enough domain knowledge and human intelligence to
require trained reporters. JASPER helps Reuters produce
earnings and dividend news stories substantially faster, with
fewer errors, and with less tedium. JASPER automatically
generates draft earnings and dividend stories from the press
releases carried on PR Newswire and makes them available
</bodyText>
<page confidence="0.998531">
171
</page>
<sectionHeader confidence="0.8755895" genericHeader="method">
/FROM PR NEWSWIRE MINNEAPOLIS 612-871-7200/
TO BUSINESS EDITOR:
</sectionHeader>
<subsectionHeader confidence="0.622992">
GREEN TREE ANNOUNCES THIRD QUARTER RESULTS
</subsectionHeader>
<bodyText confidence="0.9446249">
ST. PAUL, Minn., Oct. 17 /PRNewswire/ -- Green Tree
Acceptance, Inc. (NYSE, PSE: GNT) today reported net
earnings for the third quarter ended Sept. 30 of
$10,395,000, or 70 cents per share, compared with net
earnings of $10,320,000, or 70 cents per share, in the
same quarter of 1989.
For the nine months, net earnings were $26,671,000,
or $1.70 per share, compared with the first nine months
of 1989, which had net earnings of $20,800,000, or $1.21
per share.
</bodyText>
<table confidence="0.944344272727273">
GREEN TREE ACCEPTANCE, INC. STATEMENT OF EARNINGS
(in thousands)
Three Months Nine Months
9/30/90 9/30/89 9/30/90 9/30/89
Earnings before income
taxes 16,903 16,785 43,368 33,825
Net earnings 10,395 10,320 26,671 20,800
Earnings per share:.70 .70 1.70 1.21
Weighted average common 11,494 11,597 11,450
shares
outstanding 11,599
</table>
<figure confidence="0.765442">
-0- 10/17/90
</figure>
<figureCaption confidence="0.973948">
Figure 1: An example PR Newswire release
</figureCaption>
<table confidence="0.769210888888889">
GREEN TREE ACCEPTANCE, INC &lt;GNT.N&gt; 03 NET
ST. PAUL, Minn, Oct 17
Shr 70 cts vs 70 cts
Net 10.4 mm n vs 10.3 mln
Avg shrs 11.6 mm n vs 11.5 mmn
Nine Months
Shr 1.70 dlrs vs 1.21 dlrs
Net 26.7 mm n vs 20.8 mmn
Avg shrs 11.6 mm n vs 11.5 mmn
</table>
<figureCaption confidence="0.991358">
Figure 2: An example Reuters news story
</figureCaption>
<bodyText confidence="0.999760619047619">
to reporters for editing. Reporters need only check the
information and make any necessary changes.
In all, JASPER attempts to extract 56 different values
from an earnings release, though not all of these will ever be
present in any given release. Most of the values that
JASPER extracts are numbers -- net income, per share
income, revenues, sales, average number of shares
outstanding, etc. -- and most information types are reported
for four time periods: the quarter just ended, the
corresponding quarter of the prior year, the fiscal year to
date just ended, and the corresponding year to date period of
the prior year. Other information types have only one
value; these include the quarter being reported (Q1, Q2, Q3,
or Q4), the end date of the quarter being reported, the place
of origin of the release, the dividend, the date on which the
dividend will be paid, etc.
The JASPER system was developed between December,
1990 and August, 1991. The software was installed in early
August, 1991, and reporters in New York and other Reuters
offices in the United States began experimental use of the
system immediately.
</bodyText>
<listItem confidence="0.9305125">
Results of this use have shown that JASPER does its job
quickly and accurately.
• JASPER processes the average earnings or dividend
release in approximately 25 seconds.
• By the standard measures of recall and precision, the
system is over 96% accurate overall in selecting relevant
releases for processing.
• By corresponding measures for fact extraction, the
system is over 84% accurate overall in extracting the
desired information from the selected releases. Over
90% of the values that JASPER places in the stories it
generates are correct.
• JASPER handles 33% of targeted releases perfectly. It
handles 21% of all earnings stories with no errors or
omissions whatever, and handles 82% of all dividend
releases with no errors or omissions.
</listItem>
<sectionHeader confidence="0.830928" genericHeader="method">
4. Technical Approach
</sectionHeader>
<bodyText confidence="0.999927131578947">
Upon receiving a press release from PR Newswire,
JASPER first determines whether it is &amp;quot;relevant&amp;quot; -- that is,
whether it is one of the earning or dividend releases from
which we wish to extract information. Carnegie Group&apos;s
Text Categorization Shell (TCS) [1] is used to do this
selection. Only about 20% of the information on the wire is
relevant.
JASPER has a frame representation which defines the
specific information types to be extracted from relevant
texts. These frames guide the remainder of the processing.
The slots of the frame define what information is to be
extracted and also hold information about how the
processing for each slot is to be performed.
For each slot in the frame, the system tries to match
against each sentence an associated set of patterns of words;
if any of the patterns match, a procedure, or extraction
method, also associated with the particular slot, is called to
decide whether the patterns which matched can be used to
assign a value to the slot. The extraction method may
decide that no slot value should be assigned, or it may
translate the information that matched into a canonical form
and store it in the frame. Once all available information has
been extracted and stored in the frame, JASPER generates a
news story from the information and makes the story
available to reporters for editing.
Together, the patterns and the extraction methods make
up the application-specific rulebase. The rulebase is tailored
to the syntactic structures and vocabulary that we have
observed in our analysis of the corpus. JASPER does not do
complete syntactic parsing or complete semantic analysis of
the text. Instead, it matches &amp;quot;sketchy&amp;quot; patterns, looking
only for relevant words or phrases within sentences. The
extraction methods too were written expressly to handle the
forms that we have observed in PR Newswire texts. The
rulebase makes certain assumptions about the language it
expects to find in a text; while these assumptions are not
always borne out, they are in most cases, and JASPER
reaches a very high level of accuracy because of them.
</bodyText>
<page confidence="0.990859">
172
</page>
<bodyText confidence="0.995936866666666">
The input press releases often have a table along with the
textual part, as in the example in Figure 1. The information
contained in the two parts often overlaps, but in most cases
neither the textual nor the tabular part gives all the required
information. We therefore extract the information from
both the text and the table and then merge the two sets of
values. In this paper we do not discuss the techniques used
to extract information from tables.
JASPER runs under Ultrix on a DECstation 3100. The
dedicated standalone DECstation has loose system
interfaces to the PR Newswire feed and to a Tandem
computer on which the reporters edit stories. The core
extraction system runs in Lucid Common Lisp and uses the
Common Lisp Object System (CLOS) to represent its
frames.
</bodyText>
<subsectionHeader confidence="0.964868">
4.1. Text Understanding Control
</subsectionHeader>
<bodyText confidence="0.999944111111111">
The control of the text understanding component of
JASPER follows a simple algorithm. For each sentence in
the release, JASPER checks every item on an ordered list of
targeted information types, or slots, to determine whether a
value has already been assigned to the corresponding slot.
If no value has yet been stored, JASPER tries to match the
current sentence against a set of patterns associated with that
slot. If any pattern matches, tentatively identified values
from the sentence are bound to pattern matcher variables,
and the extraction method associated with that information
type is called to interpret the results of the pattern matching.
The extraction methods are application-specific
procedures associated with individual slots which use the
results of pattern matching to determine whether any slots
should be filled and what value(s) should be used. If an
extraction method assigns a value to a slot, the slot is
marked as &amp;quot;done&amp;quot; and is removed from the list of slots to try
on subsequent sentences.
</bodyText>
<subsectionHeader confidence="0.98784">
4.2. The Pattern Matcher
</subsectionHeader>
<bodyText confidence="0.9240986">
One important component of Carnegie Group&apos;s Text
Categorization Shell is a powerful pattern matcher which
matches complex patterns of words written in a specialized
pattern language against text. This technology is also
central to JASPER&apos;s fact extraction technology. The
network-based left-to-right pattern matcher includes
disjunction, negation, optionality, and skipping operators,
and performs regular and irregular English morphology
transformations when words are specified as nouns or verbs.
The following pattern illustrates the pattern matching
operators:
((profit +N ! earnings)
(&amp;skip 8 ($n ?million dollar +N))
(sn (per share)))
This pattern says to match either the word profit or profits
(+N indicates that it is a noun) or earnings, followed within
eight words by any number ($n), followed optionally by
million, followed by dollar or dollars; and a match will fail
if the phrase per share follows dollar. This pattern would
match in sentences like the following:
</bodyText>
<listItem confidence="0.549828">
• ABC Company announced profits of more than 50
million dollars last year.
</listItem>
<bodyText confidence="0.8244165">
The pattern will not match in the following sentences,
however:
</bodyText>
<listItem confidence="0.965672">
• XYZ Company&apos;s profits will be 2.25 dollars per share.
• XYZ Company announced that its earnings for the third
quarter of 1990 will exceed expectations at 45.6 million
dollars.
</listItem>
<bodyText confidence="0.999918272727273">
The former sentence will fail because per share follows
dollars. The latter will fail because more than eight words
intervene between earnings and the number.
JASPER uses an extended version of the TCS pattern
matcher for extracting information. It not only provides a
boolean indication of whether a pattern matched, but also
saves the information that we want to extract from the
matches as special variables. A variable binding operator
was added which can transform words matched in the text
into a canonical form or simply save the words that
matched. For example, this pattern
</bodyText>
<equation confidence="0.71963">
(&amp;if ($n) %number)
</equation>
<bodyText confidence="0.996571">
will match any number and bind the number that matched to
the pattern matcher variable %number.
This variable binding operator can also canonicalize
values, as shown in the following pattern:
</bodyText>
<equation confidence="0.887325333333333">
(&amp;if
(((fourth ! 4th) (quarter ! qtr)) !
(44)) (%quarter = 4))
</equation>
<bodyText confidence="0.999867222222222">
Patterns like this one can match a variety of expressions
with the same meaning, binding a pattern matcher variable
to a single form representing this meaning. This pattern
matches all of the following phrases and binds the variable
%quarter to 4 in every case: fourth quarter, 4th quarter,
4th qtr, fourth qtr, Q4. Once the crucial information is
saved as pattern matcher variables, it can be used by the
extraction methods to fill in values in a frame representation
of the text.
</bodyText>
<subsectionHeader confidence="0.992785">
4.3. Knowledge Representation
</subsectionHeader>
<bodyText confidence="0.99968125">
JASPER uses CLOS to control the extraction processing
and to store the extracted information. Each type of release
from which we extract information -- earnings and
dividends -- has a frame, or CLOS class, associated with it,
</bodyText>
<page confidence="0.997036">
173
</page>
<bodyText confidence="0.4933485">
with a slot for each information type that JASPER extracts.
Figure3 shows a portion of the earnings frame.
</bodyText>
<figure confidence="0.993596875">
{{EARNINGS
net-income-group: &lt;net-income-group-object&gt;
current-quarter-net:&lt;net-income-object&gt;
prior-quarter-net &lt;net-income-object&gt;
currrent-ytd-net: &lt;net-income-object&gt;
prior-ytd-net: &lt;net-income-object&gt;
period-reported: &lt;period-reported-object&gt;
. . .
</figure>
<figureCaption confidence="0.999906">
Figure 3: Earnings Extraction Frame
</figureCaption>
<bodyText confidence="0.999841458333333">
As mentioned above, we are interested in extracting
numbers for four different time periods for many
information types. The slots current-quarter-net,
prior-quarter-net, current -ytd-net, and
prior-ytd-net in Figure 3 represent the four slots for
net income. All four slots are processed together using the
same patterns and extraction methods; in order to
accomplish this, a group slot, net-income-group in the
example, is defined to hold the information required for
processing these slots. The individual slots corresponding
to each time period then hold the specific values extracted
from the text.
Other information types have just one slot; for example
period-reported in the example represents the period
for which earnings are being reported (Q1, Q2, Q3, or Q4).
This slot contains the information about how to extract the
information -- the patterns and extraction methods -- and
also holds the value once it is extracted.
Each of the slots in the earnings frame in turn has a class
as its value; these classes store information about how to do
the extraction, and once information has been extracted
from the press release, they store the value extracted. Each
of these classes has the following slots associated with it for
extracting from text:
</bodyText>
<listItem confidence="0.9994538">
• a set of patterns to be used for extracting information
from text
• a procedure, or method, for extracting information from
text
• the value extracted
</listItem>
<subsectionHeader confidence="0.962331">
4.4. The JASPER Extraction Rulebase
</subsectionHeader>
<bodyText confidence="0.999849352941177">
This section describes application-specific patterns and
procedures used for fact extraction. In analyzing the
relevant texts, we found tremendous regularity in the
language and syntactic structures used due to stylistic
conventions followed by U.S. companies in reporting
earnings and dividends. The patterns and extraction
methods take advantage of these regularities, handling the
forms that are most likely to occur in the text with a high
level of accuracy, and the forms that occur less frequently or
not at all less accurately.
The patterns used for extraction tend to match &amp;quot;sketchy&amp;quot;
phrases, with skipping between the relevant elements of the
pattern. For example, in order to find the net income we
need to know that earnings are under discussion and we
need to know what the amount of the earnings was; we can
skip over other irrelevant information. A pattern like the
following was used for net income:
</bodyText>
<equation confidence="0.9943618">
((profit +N ! earnings)
(6skip 8
((6,if ($n) %number)
?(6if (million) %mult) dollar +N))
(6n (per share)))
</equation>
<bodyText confidence="0.999361">
The patterns and extraction methods follow a few main
strategies, depending on the kind of information to be
extracted. Each of the strategies is described below.
</bodyText>
<subsubsectionHeader confidence="0.412613">
4.4.1. Extracting Information for Simple Slots
</subsubsectionHeader>
<bodyText confidence="0.999370777777778">
Several slots for earnings and dividends required a very
simple strategy. The reporting period for earnings is an
example of this type of slot. The patterns match simple
phrases and bind a variable to the value to be extracted; the
extraction method then takes the value bound to the
variable, canonicalizes it if necessary, and fills in the
appropriate value in the frame.
Below is the pattern for the fourth quarter reporting
period:
</bodyText>
<equation confidence="0.9746575">
(&amp;if
(((fourth ! 4th) (quarter ! qtr)) !
(Q4))
(%guarter = 4))
</equation>
<bodyText confidence="0.9999395">
If this pattern is matched, the pattern matcher variable
%quarter is bound to the value 4. The extraction method
for the reporting-period slot is then called to fill in
the value for the slot in the frame.
</bodyText>
<subsectionHeader confidence="0.985062">
4.4.2. Understanding Time Context in Text
</subsectionHeader>
<bodyText confidence="0.99987225">
Earnings figures are generally given for four periods. In
order to interpret the numbers in an earnings release, the
system must not only find the figures reported and
determine which information type they refer to (e.g. net
income), but must also know the time period they apply to --
the current or prior year, and the quarter or the year to date.
For efficiency and for accuracy in handling elliptical time
expressions, we handled time phrases separately,
maintaining a time context which is then used to determine
which of the four group slots to fill with the figures
extracted. This time context makes it possible to process
pairs of sentences like the following:
</bodyText>
<listItem confidence="0.639135666666667">
• Earnings during the fourth quarter of 1990 were 50.5
million dollars. Sales were 74.3 million dollars.
When JASPER processes the first sentence it stores as the
</listItem>
<page confidence="0.996908">
174
</page>
<bodyText confidence="0.999926466666667">
time context in working memory the fact that the last period
mentioned was a quarter and the last year mentioned was
the current one. After the time context is set up in this way,
the earnings information is processed. The following
sentence gives sales information, but does not provide any
information about time. Despite this, the persistent time
context in working memory allows us to determine that the
slot to fill is the sales slot for the current quarter rather than
for the prior quarter or for one of the year-to-date slots.
The extraction procedures for time handling use
heuristics based on our analysis of the particular texts to be
handled and on our knowledge of English syntax, semantics,
and pragmatics. While JASPER does not handle all time
contexts correctly, it performs very well on the types that
occur in the corpus of PR Newswire earnings reports.
</bodyText>
<subsectionHeader confidence="0.794198">
4.43. Extracting Numbers for Group Slots
</subsectionHeader>
<bodyText confidence="0.9999799">
JASPER uses the same strategy for filling in all slots in
earnings releases that require number values. We will use
net income as an example. Net income has four specific
slots to fill, one for each of the reported time periods; all are
handled together by the net—income—group slot, which
has a single set of patterns to match and a single extraction
method to sort out which of the specific slot(s) to fill when
relevant patterns match.
The net —income —group slot has two sets of patterns,
informally called current patterns and prior patterns:
</bodyText>
<listItem confidence="0.987758">
• current patterns match a word or phrase like earnings
</listItem>
<bodyText confidence="0.977541">
followed at some distance by a number; the number is
bound to a pattern matcher variable. For example,
</bodyText>
<equation confidence="0.96711">
((profit +N ! earnings)
(&amp;skip 8
((&amp;if ($n) %number)
?(&amp;if (million) %mult) dollar +N))
(&amp;n (per share)))
</equation>
<listItem confidence="0.993855666666667">
• prior patterns match, in different orders, a word like
earnings and a comparison word (e.g., compared,
increase ... from, rise ... from, versus, etc.) followed at
some distance by a number, which is bound to a pattern
matcher variable. The following is an example of one
such pattern:
</listItem>
<equation confidence="0.977643714285714">
((profit +N ! earnings)
(&amp;skip 8 (increase +V ! decrease +V)
(&amp;skip 8 (from))
(&amp;skip 8 ((&amp;if ($n) %number)
?(&amp;if (million) %mult)
dollar +N))
(sn (per share)))
</equation>
<bodyText confidence="0.9981765">
These two patterns match the net income from the current
and prior period in sentences like the following:
</bodyText>
<listItem confidence="0.9672725">
• XYZ Company&apos;s profits for the current year increased
from 45.5 million dollars last year to 50 million dollars.
</listItem>
<bodyText confidence="0.8438406">
The time context described above is used to help determine
which time period the extracted numbers refer to.
Conflicts between multiple matches are resolved by a
heuristic procedure which allows JASPER to handle very
complex sentences like the following with perfect accuracy:
• ABC Company reported net earnings of 50 million
dollars or 45 cents per share on revenues of 62 million
dollars this year compared to earnings of 55 million
dollars or 51 cents per share on revenues of 71.1 million
dollars last year.
</bodyText>
<sectionHeader confidence="0.749088" genericHeader="evaluation">
5. Status and Results
</sectionHeader>
<bodyText confidence="0.9998006875">
JASPER was deployed for testing and use by reporters in
early August 1991. Reporters in New York and other
Reuters offices in the United States are currently using the
system as an aid in producing earnings reports from PR
Newswire announcements.
Accuracy tests run at Carnegie Group on a set of press
releases that the system developers had never seen showed
that JASPER&apos;s accuracy compares favorably with the
results seen at the Second Message Understanding
Conference (MUCK-II) [9].
JASPER also runs quickly enough to be used in this real-
time application at an average of about 25 seconds per
relevant press release. Reuters required processing to be
less than 30 seconds in order for the journalists to get the
stories out in the very tight timeframes they have to work
with.
</bodyText>
<subsectionHeader confidence="0.919858">
5.1. Accuracy
</subsectionHeader>
<bodyText confidence="0.99956775">
Before delivering JASPER we ran an accuracy test on
100 earnings releases and 50 dividend releases that the
system developers had not seen or analyzed prior to the test.
Accuracy scores were calculated by manually comparing the
values extracted by JASPER with the correct values
specified by a Reuters journalist. We measured accuracy
separately for selection of relevant releases and fact
extraction. Results are reported below.
</bodyText>
<subsectionHeader confidence="0.795862">
5.1.1. Selection
</subsectionHeader>
<bodyText confidence="0.999982083333333">
Selection refers to the identification of relevant earnings
and dividend reports in the stream of press releases from PR
Newswire. Selection is measured with the standard
measures of recall and precision. Recall is the percentage
of actual earnings and dividend announcements that the
selection process succeeds in finding. If recall is high, the
system is not missing many items that it should select.
Precision is the percentage of announcements that JASPER
selects that are actually relevant, i.e. relate to earnings or
dividends. If precision is high, the system is not wrongly
selecting many items that should not be selected. These
measures correlate closely with the recall and precision
</bodyText>
<page confidence="0.995962">
175
</page>
<bodyText confidence="0.992768875">
measures used for MUCK-II, with only minor differences.
The figures in Figure 4 are based on 1047 PR Newswire
releases, representing four days transmissions. The
&amp;quot;Expected&amp;quot; figures represent the number of relevant releases
actually present in the sample; the &amp;quot;Assigned&amp;quot; figures
represent the number of releases selected by JASPER. We
calculate overall accuracy as the average of the recall and
precision scores.
</bodyText>
<table confidence="0.998308285714286">
Earnings Dividend Combined
Expected 115 25 140
Assigned 117 25 142
Correct 112 24 136
Recall 97.4 96.0 97.1
Precision 95.7 96.0 95.8
Overall 96.6 96.0 96.5
</table>
<figureCaption confidence="0.996337">
Figure 4: JASPER Selection Accuracy
</figureCaption>
<bodyText confidence="0.999958">
To compare our results with those of MUCK-II, we have
chosen the highest score for recall and precision for each of
four tests: two tests each with two different data sets. The
fust test on each data set was run &amp;quot;cold&amp;quot; -- the system
developers had not seen the data in advance. The second
test in each case was run after the system developers had
made some changes to accommodate the test data. The best
recall and precision scores for each test do not necessarily
come from the same system.
</bodyText>
<table confidence="0.9700435">
TST1 TST1 TST2 TST2
With With
Cold Changes Cold Changes
Recall 65% 85% 100% 100%
Precision 100% 90% 100% 100%
Overall 83# 88% 100% 100%
</table>
<figureCaption confidence="0.957242">
Figure 5: Best MUCK-ll Selection Accuracy
</figureCaption>
<bodyText confidence="0.951200888888889">
5.1.2. Extraction
We use two measures of accuracy for fact extraction:
completeness and correctness. Completeness corresponds
roughly to the recall measure used in MUCK-II, and to the
recall measure used for selection; it measures the percentage
of targeted values available in the PR announcements that
are actually extracted correctly by the system. A targeted
value is one that should, according to Reuters practice and
style guidelines, appear in the Reuters news story.
</bodyText>
<figure confidence="0.382501333333333">
correct values extracted
completeness =
total targeted values
</figure>
<figureCaption confidence="0.266156285714286">
Correctness corresponds roughly to the precision measure
used in MUCK-II and the precision measure used for
selection; it measures the percentage of times that a value
extracted by the system is correct.
correct values extracted
correctness =
total values extracted
</figureCaption>
<bodyText confidence="0.998815666666667">
JASPER was designed with an emphasis on correctness
rather than on completeness on the assumption that reporters
are less likely to overlook gaps than wrong values in the
story. To compensate for this built-in bias, we also
calculate an overall accuracy figure for extraction by
averaging the percentages obtained for completeness and
correctness.
In the accuracy results given in Figure 6, the
&amp;quot;Unadjusted&amp;quot; figures are the raw results of the test. The
&amp;quot;Adjusted&amp;quot; figures take into account typographical errors in
the PR Newswire input (treating them in our favor), as well
as the judgments of the same Reuters reporter regarding
permissible deviations from his output. The figures &amp;quot;With
Changes&amp;quot; are based on a second test on the same input after
some changes had been made to the extraction rulebase.
</bodyText>
<table confidence="0.965850875">
Unadjusted Adjusted With
Changes
Targeted 1549 1542 1542
Extracted 1274 1275 1293
Correct 1153 1170 1190
Completeness 74.4 75.9 77.2
Correctnes 90.5 91.8 92.0
Overall 82.5 83.9 84.6
</table>
<figureCaption confidence="0.7427725">
Figure 6: JASPER Extraction Accuracy
Figure 7 shows results from MUCK-II. The best test
scores from each of four test for their correlates of
completeness and correctness are given. The completeness
</figureCaption>
<bodyText confidence="0.992468625">
and correctness scores do not necessarily come from the
same system for any given test. The four tests involved two
tests each of two different data sets. The first test on each
data set was run &amp;quot;cold&amp;quot; -- the system developers had not
seen the data in advance. The second test in each case was
run after the system developers had made some changes to
accommodate the test data, and so should correspond
roughly to our test &amp;quot;with changes&amp;quot;. While the MUCK-II
</bodyText>
<figure confidence="0.7487615">
TST1 TST1 TST2 TST2
With With
Cold Changes Cold Changes
Completeness 44% 67% 68% 94%
Correctness 93% 95% 93% 98%
Overall 69% 81% 81% 96%
</figure>
<figureCaption confidence="0.999269">
Figure 7: Best MUCK-II Extraction Accuracy
</figureCaption>
<bodyText confidence="0.9999075">
accuracy measures differ somewhat from JASPER&apos;s, we
believe that they are similar enough to show that JASPER
compares favorably with the results of the systems which
competed in MUCK-11.
</bodyText>
<sectionHeader confidence="0.999549" genericHeader="conclusions">
6. Conclusions
</sectionHeader>
<bodyText confidence="0.997030166666667">
JASPER shows that text understanding technology has
progressed to the point that it can be applied profitably to
real commercial applications. However, the state of the art
will not allow the technology to be applied to unconstrained
applications. Instead, applications must be selected
carefully in order to yield positive ruadm Certain
</bodyText>
<page confidence="0.995161">
176
</page>
<bodyText confidence="0.968567761904762">
characteristics of applications will make them better
candidates for fact extraction using Carnegie Group&apos;s
technology and, we believe, other technologies as well:
• The events or reports have predictable components, or
information types to be extracted.
• The information to be extracted tends to be expressed
through an unambiguous and predictable, though
possibly wide-ranging, set of linguistic forms.
Technologies like JASPER, which extract information
from text using shallow, focussed processing techniques
based on complex pattern matching and heuristic decision-
making, can be profitably applied to applications having
these characteristics. JASPER&apos;s accuracy compares
favorably with other text understanding systems, and its
processing speed allows for real-time use of the extracted
information in a time-critical application. JASPER is a
deployed system which solves a real business problem. We
believe there any many other such business problems that
could be solved with similar techniques. We expect to see
the deployment of many more such applications in the
future.
</bodyText>
<sectionHeader confidence="0.999116" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.996213606060606">
1. Hayes, P. J., Andersen, P. M., Nirenburg, I. B., and
Schmandt, L. M. TCS: A Shell for Content-Based Text
Categorization. Sixth IEEE Al Applications Conference,
Santa Monica, March, 1990.
2. Hirschman, L., et. al. The PUNDIT Natural-Language
Processing System. Proceedings of the Annual Al Systems
in Government Conference, Washington, D.C., March,
1989, pp. 234-243.
3. Hobbs, J., Stickel, M., Martin, P., Edwards, D.
Interpretation as Abduction. Proceedings of the 26th
Annual Meeting of the Association of Computational
Linguistics, Association of Computional Linguistics, June,
1988, pp. 95-103.
4. Jacobs, P. S. and Rau, L. F. &amp;quot;SCISOR: Extracting
Information from Online News&amp;quot;. Comm. ACM 33, 11
(November 1990), 88-97.
5. Ksiezyk, T., and Grishman, R. An Equipment Model
and its role in the Interpretation of Noun Compounds. In
DARPA&apos; s 1986 Strategic Computing Natural Language
Processing Workshop, Information Sciences Institute,
Marina del Rey, CA, 1986, pp. 81-95.
6. Kuhns, R. J. A News Analysis System. COLING88,
Budapest, August, 1988.
7. Lytinen, S. and Gershman, A. ATRANS: Automatic
Processing of Money Transfer Messages. Proceedings of
the Fifth National Conference of the American Association
for Artificial Intelligence, Philadelphia, August, 1986, pp.
1089-1093.
8. Schank, R. C. Conceptual Information Processing.
North Holland, Amsterdam, 1975.
9. Sundheim, B. Second Message Understanding
Conference (MUCK-II) Report.
NavalOceanSystemsCenter, September, 1989.
</reference>
<page confidence="0.993219">
177
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.859581">
<title confidence="0.9901795">Automatic Extraction of Facts from Press Releases to Generate News Stories</title>
<author confidence="0.997655333333333">Peggy M Andersen</author>
<author confidence="0.997655333333333">Philip J Hayes Alison K Huettner</author>
<author confidence="0.997655333333333">Linda M Schmandt Irene B Nirenburg</author>
<affiliation confidence="0.999835">Carnegie Group, Inc.</affiliation>
<address confidence="0.965626">5 PPG Place Pittsburgh, PA 15222, USA</address>
<abstract confidence="0.99775575">While complete understanding of arbitrary input text remains in the future, it is currently possible to construct natural language processing systems that provide a partial understanding of text with limited accuracy. Moreover, such systems can provide cost-effective solutions to commercially-significant business problems. This paper describes one such system: JASPER. JASPER is a fact extraction system recently developed and deployed by Carnegie Group for Reuters Ltd. JASPER uses a template-driven approach, partial understanding techniques, and heuristic procedures to extract certain key pieces of information from a limited range of text. We believe that many significant business problems can be solved by fact extraction applications which involve locating and extracting specific, predefined types of information from a limited range of text. The information extracted by such systems can be used in a variety of ways, such as filling in values in a database, generating summaries of the input text, serving as a part of the knowledge in an expert system, or feeding into another program which bases decisions on it. We expect to develop many such applications in the future using similar techniques.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>P J Hayes</author>
<author>P M Andersen</author>
<author>I B Nirenburg</author>
<author>L M Schmandt</author>
</authors>
<title>TCS: A Shell for Content-Based Text Categorization.</title>
<date>1990</date>
<booktitle>Sixth IEEE Al Applications Conference,</booktitle>
<location>Santa Monica,</location>
<contexts>
<context position="12579" citStr="[1]" startWordPosition="1941" endWordPosition="1941">nformation from the selected releases. Over 90% of the values that JASPER places in the stories it generates are correct. • JASPER handles 33% of targeted releases perfectly. It handles 21% of all earnings stories with no errors or omissions whatever, and handles 82% of all dividend releases with no errors or omissions. 4. Technical Approach Upon receiving a press release from PR Newswire, JASPER first determines whether it is &amp;quot;relevant&amp;quot; -- that is, whether it is one of the earning or dividend releases from which we wish to extract information. Carnegie Group&apos;s Text Categorization Shell (TCS) [1] is used to do this selection. Only about 20% of the information on the wire is relevant. JASPER has a frame representation which defines the specific information types to be extracted from relevant texts. These frames guide the remainder of the processing. The slots of the frame define what information is to be extracted and also hold information about how the processing for each slot is to be performed. For each slot in the frame, the system tries to match against each sentence an associated set of patterns of words; if any of the patterns match, a procedure, or extraction method, also assoc</context>
</contexts>
<marker>1.</marker>
<rawString>Hayes, P. J., Andersen, P. M., Nirenburg, I. B., and Schmandt, L. M. TCS: A Shell for Content-Based Text Categorization. Sixth IEEE Al Applications Conference, Santa Monica, March, 1990.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L Hirschman</author>
</authors>
<title>The PUNDIT Natural-Language Processing System.</title>
<date>1989</date>
<booktitle>Proceedings of the Annual Al Systems in Government Conference,</booktitle>
<pages>234--243</pages>
<location>Washington, D.C.,</location>
<contexts>
<context position="4950" citStr="[2]" startWordPosition="727" endWordPosition="727"> which bases decisions on it. We expect to develop many such applications in the future using similar techniques. 2. Related Work Most text understanding systems have generally fallen into two categories: • systems which attempt to perform a complete linguistic analysis of the text • systems which perform partial understanding to accomplish certain specific understanding tasks Most of the linguistically-based systems perform a more or less pure syntactic analysis and a semantic and/or pragmatic analysis to arrive at a representation of the meaning of the text. TACITUS [3], PROTEUS [5], PUNDIT [2], CAUCUS [9], and the News Analysis System (NAS) [6] all fall into this category. The systems differ in the specifics of the syntactic, semantic and pragmatic analysis used and in the degree to which the different levels of processing are integrated. For example, TACITUS&apos; syntactic step does enough semantic processing to produce a logical form; a second step performs pragmatic tasks such as reference resolution. Some systems base their processing on a particular linguistic theory; for example, CAUCUS uses Lexical Functional Grammar and NAS uses a Government-Binding approach to syntax and seman</context>
</contexts>
<marker>2.</marker>
<rawString>Hirschman, L., et. al. The PUNDIT Natural-Language Processing System. Proceedings of the Annual Al Systems in Government Conference, Washington, D.C., March, 1989, pp. 234-243.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Hobbs</author>
<author>M Stickel</author>
<author>P Martin</author>
<author>D Edwards</author>
</authors>
<title>Interpretation as Abduction.</title>
<date>1988</date>
<booktitle>Proceedings of the 26th Annual Meeting of the Association of Computational Linguistics, Association of Computional Linguistics,</booktitle>
<pages>95--103</pages>
<contexts>
<context position="4925" citStr="[3]" startWordPosition="723" endWordPosition="723">ding into another program which bases decisions on it. We expect to develop many such applications in the future using similar techniques. 2. Related Work Most text understanding systems have generally fallen into two categories: • systems which attempt to perform a complete linguistic analysis of the text • systems which perform partial understanding to accomplish certain specific understanding tasks Most of the linguistically-based systems perform a more or less pure syntactic analysis and a semantic and/or pragmatic analysis to arrive at a representation of the meaning of the text. TACITUS [3], PROTEUS [5], PUNDIT [2], CAUCUS [9], and the News Analysis System (NAS) [6] all fall into this category. The systems differ in the specifics of the syntactic, semantic and pragmatic analysis used and in the degree to which the different levels of processing are integrated. For example, TACITUS&apos; syntactic step does enough semantic processing to produce a logical form; a second step performs pragmatic tasks such as reference resolution. Some systems base their processing on a particular linguistic theory; for example, CAUCUS uses Lexical Functional Grammar and NAS uses a Government-Binding app</context>
</contexts>
<marker>3.</marker>
<rawString>Hobbs, J., Stickel, M., Martin, P., Edwards, D. Interpretation as Abduction. Proceedings of the 26th Annual Meeting of the Association of Computational Linguistics, Association of Computional Linguistics, June, 1988, pp. 95-103.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P S Jacobs</author>
<author>L F Rau</author>
</authors>
<title>SCISOR: Extracting Information from Online News&amp;quot;.</title>
<date>1990</date>
<journal>Comm. ACM</journal>
<volume>33</volume>
<pages>11</pages>
<contexts>
<context position="7127" citStr="[4]" startWordPosition="1064" endWordPosition="1064">with one major subclass of such telexes -- money transfer telexes. ATRANS automatically extracts the information required to complete the transfer (the various banks mentioned in the telex, their roles in the money transfer, payment amounts, dates, security keys, etc.) and formats it for entry into the bank&apos;s automated transaction processing system. The understanding techniques used in ATRANS are based on caseframe analysis using the Conceptual Dependency formalism [8] which relies on semantics over syntax, and does not require a complete analysis of the text. General Electric&apos;s SCISOR system [4] uses a hybrid approach, combining syntactic and caseframe parsing. This allows it to exploit the strong top-down domain expectations provided by caseframes to deal with relevant fragments from text that it cannot fully analyze, while at the same time generating complete linguistic analyses when possible. SCISOR is also designed so that general grammatical knowledge and domain-specific knowledge are kept separate. This will greatly facilitate its transfer to other domains. 3. Business Problem A major component of Reuters business is to provide real-time fmancial news to financial traders. Corp</context>
</contexts>
<marker>4.</marker>
<rawString>Jacobs, P. S. and Rau, L. F. &amp;quot;SCISOR: Extracting Information from Online News&amp;quot;. Comm. ACM 33, 11 (November 1990), 88-97.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Ksiezyk</author>
<author>R Grishman</author>
</authors>
<title>An Equipment Model and its role in the Interpretation of Noun Compounds.</title>
<date>1986</date>
<booktitle>In DARPA&apos; s 1986 Strategic Computing Natural Language Processing Workshop, Information Sciences Institute,</booktitle>
<pages>81--95</pages>
<location>Marina del Rey, CA,</location>
<contexts>
<context position="4938" citStr="[5]" startWordPosition="725" endWordPosition="725">ther program which bases decisions on it. We expect to develop many such applications in the future using similar techniques. 2. Related Work Most text understanding systems have generally fallen into two categories: • systems which attempt to perform a complete linguistic analysis of the text • systems which perform partial understanding to accomplish certain specific understanding tasks Most of the linguistically-based systems perform a more or less pure syntactic analysis and a semantic and/or pragmatic analysis to arrive at a representation of the meaning of the text. TACITUS [3], PROTEUS [5], PUNDIT [2], CAUCUS [9], and the News Analysis System (NAS) [6] all fall into this category. The systems differ in the specifics of the syntactic, semantic and pragmatic analysis used and in the degree to which the different levels of processing are integrated. For example, TACITUS&apos; syntactic step does enough semantic processing to produce a logical form; a second step performs pragmatic tasks such as reference resolution. Some systems base their processing on a particular linguistic theory; for example, CAUCUS uses Lexical Functional Grammar and NAS uses a Government-Binding approach to synt</context>
</contexts>
<marker>5.</marker>
<rawString>Ksiezyk, T., and Grishman, R. An Equipment Model and its role in the Interpretation of Noun Compounds. In DARPA&apos; s 1986 Strategic Computing Natural Language Processing Workshop, Information Sciences Institute, Marina del Rey, CA, 1986, pp. 81-95.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R J Kuhns</author>
</authors>
<title>A News Analysis System. COLING88,</title>
<date>1988</date>
<location>Budapest,</location>
<contexts>
<context position="5002" citStr="[6]" startWordPosition="736" endWordPosition="736">any such applications in the future using similar techniques. 2. Related Work Most text understanding systems have generally fallen into two categories: • systems which attempt to perform a complete linguistic analysis of the text • systems which perform partial understanding to accomplish certain specific understanding tasks Most of the linguistically-based systems perform a more or less pure syntactic analysis and a semantic and/or pragmatic analysis to arrive at a representation of the meaning of the text. TACITUS [3], PROTEUS [5], PUNDIT [2], CAUCUS [9], and the News Analysis System (NAS) [6] all fall into this category. The systems differ in the specifics of the syntactic, semantic and pragmatic analysis used and in the degree to which the different levels of processing are integrated. For example, TACITUS&apos; syntactic step does enough semantic processing to produce a logical form; a second step performs pragmatic tasks such as reference resolution. Some systems base their processing on a particular linguistic theory; for example, CAUCUS uses Lexical Functional Grammar and NAS uses a Government-Binding approach to syntax and semantics. Other systems use more idiosyncratic approache</context>
</contexts>
<marker>6.</marker>
<rawString>Kuhns, R. J. A News Analysis System. COLING88, Budapest, August, 1988.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Lytinen</author>
<author>A Gershman</author>
</authors>
<title>ATRANS: Automatic Processing of Money Transfer Messages.</title>
<date>1986</date>
<booktitle>Proceedings of the Fifth National Conference of the American Association for Artificial Intelligence,</booktitle>
<pages>1089--1093</pages>
<location>Philadelphia,</location>
<contexts>
<context position="6359" citStr="[7]" startWordPosition="950" endWordPosition="950">they do a complete analysis of the text. However, the processing of such systems tends to be relatively slow; in addition, these systems have tended to be used in research contexts in part because the range of coverage that they can provide is necessarily limited. A full analysis of text that covers diverse topics or that must be processed at a high rate of throughput is not feasible given the current state of the art. Systems which do not attempt a complete understanding of the text, but rather focus on specific understanding tasks are more likely to result in deployable applications. ATRANS [7], the only major deployed fact extraction system before JASPER, is the most notable example. ATRANS operates in the domain of international banking telexes, dealing with one major subclass of such telexes -- money transfer telexes. ATRANS automatically extracts the information required to complete the transfer (the various banks mentioned in the telex, their roles in the money transfer, payment amounts, dates, security keys, etc.) and formats it for entry into the bank&apos;s automated transaction processing system. The understanding techniques used in ATRANS are based on caseframe analysis using t</context>
</contexts>
<marker>7.</marker>
<rawString>Lytinen, S. and Gershman, A. ATRANS: Automatic Processing of Money Transfer Messages. Proceedings of the Fifth National Conference of the American Association for Artificial Intelligence, Philadelphia, August, 1986, pp. 1089-1093.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R C Schank</author>
</authors>
<title>Conceptual Information Processing.</title>
<date>1975</date>
<publisher>North</publisher>
<location>Holland, Amsterdam,</location>
<contexts>
<context position="6997" citStr="[8]" startWordPosition="1043" endWordPosition="1043">action system before JASPER, is the most notable example. ATRANS operates in the domain of international banking telexes, dealing with one major subclass of such telexes -- money transfer telexes. ATRANS automatically extracts the information required to complete the transfer (the various banks mentioned in the telex, their roles in the money transfer, payment amounts, dates, security keys, etc.) and formats it for entry into the bank&apos;s automated transaction processing system. The understanding techniques used in ATRANS are based on caseframe analysis using the Conceptual Dependency formalism [8] which relies on semantics over syntax, and does not require a complete analysis of the text. General Electric&apos;s SCISOR system [4] uses a hybrid approach, combining syntactic and caseframe parsing. This allows it to exploit the strong top-down domain expectations provided by caseframes to deal with relevant fragments from text that it cannot fully analyze, while at the same time generating complete linguistic analyses when possible. SCISOR is also designed so that general grammatical knowledge and domain-specific knowledge are kept separate. This will greatly facilitate its transfer to other d</context>
</contexts>
<marker>8.</marker>
<rawString>Schank, R. C. Conceptual Information Processing. North Holland, Amsterdam, 1975.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Sundheim</author>
</authors>
<title>Second Message Understanding Conference</title>
<date>1989</date>
<tech>(MUCK-II) Report. NavalOceanSystemsCenter,</tech>
<contexts>
<context position="4962" citStr="[9]" startWordPosition="729" endWordPosition="729"> decisions on it. We expect to develop many such applications in the future using similar techniques. 2. Related Work Most text understanding systems have generally fallen into two categories: • systems which attempt to perform a complete linguistic analysis of the text • systems which perform partial understanding to accomplish certain specific understanding tasks Most of the linguistically-based systems perform a more or less pure syntactic analysis and a semantic and/or pragmatic analysis to arrive at a representation of the meaning of the text. TACITUS [3], PROTEUS [5], PUNDIT [2], CAUCUS [9], and the News Analysis System (NAS) [6] all fall into this category. The systems differ in the specifics of the syntactic, semantic and pragmatic analysis used and in the degree to which the different levels of processing are integrated. For example, TACITUS&apos; syntactic step does enough semantic processing to produce a logical form; a second step performs pragmatic tasks such as reference resolution. Some systems base their processing on a particular linguistic theory; for example, CAUCUS uses Lexical Functional Grammar and NAS uses a Government-Binding approach to syntax and semantics. Other </context>
<context position="27229" citStr="[9]" startWordPosition="4318" endWordPosition="4318">nings of 55 million dollars or 51 cents per share on revenues of 71.1 million dollars last year. 5. Status and Results JASPER was deployed for testing and use by reporters in early August 1991. Reporters in New York and other Reuters offices in the United States are currently using the system as an aid in producing earnings reports from PR Newswire announcements. Accuracy tests run at Carnegie Group on a set of press releases that the system developers had never seen showed that JASPER&apos;s accuracy compares favorably with the results seen at the Second Message Understanding Conference (MUCK-II) [9]. JASPER also runs quickly enough to be used in this realtime application at an average of about 25 seconds per relevant press release. Reuters required processing to be less than 30 seconds in order for the journalists to get the stories out in the very tight timeframes they have to work with. 5.1. Accuracy Before delivering JASPER we ran an accuracy test on 100 earnings releases and 50 dividend releases that the system developers had not seen or analyzed prior to the test. Accuracy scores were calculated by manually comparing the values extracted by JASPER with the correct values specified b</context>
</contexts>
<marker>9.</marker>
<rawString>Sundheim, B. Second Message Understanding Conference (MUCK-II) Report. NavalOceanSystemsCenter, September, 1989.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>