<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<title confidence="0.9944875">
ELLEIPO: A module that computes coordinative ellipsis
for language generators that don’t
</title>
<author confidence="0.905408">
Karin Harbusch
</author>
<affiliation confidence="0.8899395">
Computer Science Department
University of Koblenz-Landau
</affiliation>
<address confidence="0.712431">
PO Box 201602, 56016 Koblenz/DE
</address>
<email confidence="0.63734">
harbusch@uni-koblenz.de
</email>
<author confidence="0.512993">
Gerard Kempen
</author>
<affiliation confidence="0.6233085">
Max Planck Institute for Psycholinguistics &amp;
Cognitive Psychology Unit, Leiden University
</affiliation>
<address confidence="0.796363">
PO Box 310, 6500AH Nijmegen /NL
</address>
<email confidence="0.994086">
gerard.kempen@mpi.nl
</email>
<sectionHeader confidence="0.996507" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999755285714286">
Many current sentence generators lack
the ability to compute elliptical versions
of coordinated clauses in accordance with
the rules for Gapping, Forward and
Backward Conjunction Reduction, and
SGF (Subject Gap in clauses with Fi-
nite/Fronted verb). We describe a module
(implemented in JAVA, with German
and Dutch as target languages) that takes
non-elliptical coordinated clauses as in-
put and returns all reduced versions li-
censed by coordinative ellipsis. It is
loosely based on a new psycholinguistic
theory of coordinative ellipsis proposed
by Kempen. In this theory, coordinative
ellipsis is not supposed to result from the
application of declarative grammar rules
for clause formation but from a proce-
dural component that interacts with the
sentence generator and may block the
overt expression of certain constituents.
</bodyText>
<sectionHeader confidence="0.998881" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.8409595">
Coordination and coordinative ellipsis are essen-
tial tools for the sentence aggregation component
of any language generator. Very often, when the
aggregator chooses to combine several clauses
into a single coordinate structure, the need arises
to eliminate unnatural reduplications of corefer-
ential constituents.
In the literature, one often distinguishes four
major types of clause-level coordinative ellipsis:
• Gapping (as in (1)), with a special variant
called Long-Distance Gapping (LDG). In
LDG, the second conjunct consists of con-
stituents stemming from different clauses —
in (2), the main clause and the complement.
</bodyText>
<listItem confidence="0.998100818181818">
• Forward Conjunction Reduction (FCR; cf. (3)
and the relative clause in (4)).
• SGF (Subject Gap in clauses with Finite/
Fronted verb; as in (5), and
• Backward Conjunction reduction (BCR, also
termed Right Node Raising; see (6)).
(1) Henk lives in Leiden and Chris livesg in Delft
(2) My wife wants to buy a car, my son wantsg
[to buy]gl a motorcycle.
(3) My sister lives in Utrecht and [my sister]f
works in Amsterdam
</listItem>
<bodyText confidence="0.976705555555555">
(4)Amsterdam is the city [S where Jan lives and
wheref Piet works]
(5) Why did you leave but didn’t yous warn me?
(6)Anne arrived before [three o’clock]b, and Susi
left after three o’clock
The subscripts denote the elliptical mechanism at
work: g=Gapping, gl=LDG, f=FCR, s=SGF,
b=BCR. We will not deal with VP Ellipsis and
VP Anaphora because they generate pro-forms
rather than elisions and are not restricted to coor-
dination (cf. the title of the paper).
In current sentence generators, the coordina-
tive ellipsis rules are often inextricably inter-
twined with the rules for generating non-
elliptical coordinate structures, so that they can-
not easily be ported to other grammar formalisms
— e.g., Sarkar &amp; Joshi (1996) for Tree Adjoin-
ing Grammar; Steedman (2000) for Combinatory
Categorial Grammar; Bateman, Matthiessen &amp;
Zeng (1999) for Functional Grammar. Genera-
tors that do include an autonomous component
for coordinative ellipsis (Dalianis, 1999; Shaw,
2002; Hielkema, 2005), use incomplete rule sets,
thus risking over- or undergeneration, and incor-
rect or unnatural output.
The module (dubbed ELLEIPO, from Greek
&apos;EUsinw ‘I leave out’) we present here, is less
</bodyText>
<page confidence="0.99846">
115
</page>
<bodyText confidence="0.999923571428571">
formalism-dependent and, in principle, less liable
to over- or undergeneration than its competitors.
In Section 2, we sketch the theoretical back-
ground. Section 3 and the Appendix describe our
implementation, with examples from German.
Finally, in Section 4, we discuss the prospects of
extending the module to additional constructions.
</bodyText>
<sectionHeader confidence="0.861066" genericHeader="method">
2 Some theoretical background
</sectionHeader>
<bodyText confidence="0.993180458333333">
ELLEIPO is loosely based on Kempen’s
(subm.) psycholinguistically motivated syntactic
theory of clausal coordination and coordinative
ellipsis. It departs from the assumption that the
generator’s strategic (conceptual, pragmatic)
component is responsible for selecting the con-
cepts and conceptual structures that enable iden-
tification of discourse referents (except in case of
syntactically conditioned pronominalization).
The strategic component may conjoin two or
more clauses into a coordination and deliver as
output a non-reduced sequence of conjuncts.1
The concepts in these conjuncts are adorned with
reference tags, and identical tags express
coreferentiality.2
Structures of this kind serve as input to the
(syn)tactical component of the generator, where
they are grammatically encoded (lexicalized and
given syntactic form) without any form of coor-
dinative ellipsis. The resulting non-elliptical
structures are input to ELLEIPO, which computes
and executes options for coordinative ellipsis.
ELLEIPO’s functioning is based on the as-
sumption that coordinative ellipsis does not re-
sult from the application of declarative grammar
rules for clause formation but from a procedural
component that interacts with the sentence gen-
erator and may block the overt expression of cer-
tain constituents. Due to this feature, ELLEIPO
can be combined, at least in principle, with vari-
ous grammar formalisms. However, this advan-
tage is not entirely gratis: The module needs a
formalism-dependent interface that converts gen-
1The strategic component is also supposed to apply rules of
logical inference yielding the conceptual structures that
underlie “respectively coordinations.” Hence, the conver-
sion of clausal into NP coordination (such as Anne likes
biking and Susi likes skating into Anne and Susi like bik-
ing and skating, respectively is supposed to arise in the
strategic, not the (syn)tactical component of the generator.
This also applies to simpler cases without respectively,
such as John is skating and Peter is skating versus John
and Peter are skating. The module presented here does
not handle these conversions (see Reiter &amp; Dale (2000,
pp. 133-139) for examples and possible solutions.)
2Coordinative ellipsis is insensitive to the distinction be-
tween “strict” and “sloppy” (token- vs. type-)identity.
erator output to a (simple) canonical form.
</bodyText>
<sectionHeader confidence="0.943598" genericHeader="method">
3 A sketch of the algorithm
</sectionHeader>
<bodyText confidence="0.9989044">
This sketch presupposes and-coordinations of
only n=2 conjuncts. Actually, ELLEIPO handles
and-coordinations with n&gt;2 conjuncts if, in every
pair of conjuncts, the major constituents embody
the same pattern of coreferences and contrasts.
ELLEIPO takes as input a non-elliptical syntac-
tic structure that should meet the following four
canonical form criteria (see Fig. 1 for the input
tree corresponding to example (7).
(7) Susi hörte dass Hans einen Unfall hatte
Susi heard that Hans an accident had
und dassfHansfsterben könnte
and that Hans die might
‘Susi heard that Hans had an accident and
might die’
</bodyText>
<listItem confidence="0.6960695">
• Categorial (phrasal and lexical) nodes —
bolded in Fig. 1 — carry reference tags (pre-
sumably propagated from the generator’s strate-
gic component). E.g., the tag “7” is attached to
</listItem>
<bodyText confidence="0.938571181818182">
the root and head nodes of both exemplars of NP
Hans in Fig. 1, indicating their coreferentiality.
For the sake of computational uniformity, we
also attach reference tags to non-referring lexical
elements. In such cases, the tags denote lexical
instead of referential identity. For instance, the
fact that the two tokens of subordinating con-
junction dass ‘that’ in Fig. 1 carry the same tag,
is interpreted by ELLEIPO as indicating lexical
identity. In combination with other properties,
this licenses elision of the second dass (see (7)).
</bodyText>
<listItem confidence="0.9481568">
• The conjuncts are sister nodes separated by
coordinating conjunctions; we call these configu-
rations coordination domains. The order of the
conjuncts and their constituents is defined.
• Every categorial node of the input tree is im-
mediately dominated by a functional node.
• Each clausal conjunct is rooted in an S-node
whose daughter nodes (immediate constituents)
are grammatical functions. Within a clausal con-
junct, all functions are represented at the same
</listItem>
<bodyText confidence="0.9261093">
hierarchical level. Hence, the trees are “flat,” as
illustrated in Fig. 1, and similar to the trees in
German treebanks (NEGRA-II, TIGER).
ELLEIPO starts by demarcating “superclauses.”
Kempen (subm.) introduced this notion in his
treatment of Gapping and LDG. An S-node domi-
nates a superclause iff it dominates the entire
sentence or a clause beginning with a sub-
ordinating conjunction (CNJ). In Fig. 1, the
strings dominated by S1, S5 and S12 are super-
</bodyText>
<figureCaption confidence="0.986675">
Figure 1. Slightly simplified canonical form of the non-elliptical input tree underlying sentence (7).
</figureCaption>
<bodyText confidence="0.783915333333333">
clauses. Note that S12 includes clause S13, which
is not a superclause.
Then, ELLEIPO checks all coordination do-
mains for elision options, as follows:
• Testing for forward ellipsis: Gapping (includ-
ing LDG), FCR, or SGF. This involves inspect-
ing (recursively for every S-node) the set of im-
mediate constituents (grammatical functions) of
the two conjuncts, and their reference tags.
Complete constituents of the right-hand conjunct
may get marked for elision, depending on the
specific conditions listed in the Appendix.
</bodyText>
<listItem confidence="0.7744698">
• Testing for BCR. ELLEIPO checks — word-
by-word, going from right to left — the corefer-
ence tags of the conjuncts. As a result, complete
or partial constituents in the right-hand periphery
of the left conjunct may get marked for elision.
</listItem>
<bodyText confidence="0.964812323529412">
The final step of the module is ReadOut. Af-
ter all coordination domains have been proc-
essed, a (possibly empty) subset of the terminal
leaves of the input tree has been marked for eli-
sion. In the examples below, this is indicated by
subscript marks. E.g., the subscript “g” attached
to esst ‘eat’ in (9b) indicates that Gapping is al-
lowed. ReadOut interprets the elision marks and,
in ‘standard mode,’ produces the shortest ellipti-
cal string(s) as output (e.g. (9c)). In ‘demo
mode,’ it shows individual and combined ellipti-
cal options on user request. Furthermore, auch
‘too’ is added in case of “Stripping,” i.e. when
Gapping leaves only one constituent as remnant.
Example (10) illustrates a combination of
Gapping and BCR, with the three licensed ellip-
tical output strings shown in (10c). In (11), Gap-
ping combines with BCR in the subordinate
clauses. The fact that here, in contrast with (10),
the subordinate clauses do not start their own
superclauses, now licenses LDG. However,
ReadOut prevents LDG to combine with BCR,
which would have yielded the unintended string
Anne versucht Bücher und Susi Artikel.
(9) a. Wir essen Äpfel und ihr esst Birnen
‘We eat apples and you(pl.) eat pears’
b.Wir essen Äpfel und ihr esstg
Birnen
c. Elliptical option:
Wir essen Äpfel und ihr Birnen
(10)a. Ich hoffe, dass Hans schläft und du hoffst,
dass Peter schläft
‘I hope that Hans sleeps and you hope that
Peter sleeps’
</bodyText>
<listItem confidence="0.481895666666667">
b. Ich hoffe dass Hans schläft, und
du hoffstg dass Peter schläft
c. Elliptical options:
</listItem>
<bodyText confidence="0.8953875">
Gapping: Ich hoffe, dass Hans schläft und
du, dass Peter schläft
BCR: Ich hoffe, dass Hans und du hoffst,
dass Peter schläft
Gapping and BCR: Ich hoffe, dass Hans
und du, dass Peter schläft
(11)a.Anne versucht Bücher zu schreiben and
Susi versucht Artikel zu schreiben
‘Anne tries to write books and Susi tries
to write articles’
</bodyText>
<figure confidence="0.437273">
b.Anne versucht Bücher zu,
schreiben, und Susi versuchtg
</figure>
<reference confidence="0.6313635">
Artikel zugl schreibengl
c. Elliptical options:
Gapping: Anne versucht Bücher zu
schreiben und Susi Artikel zu schreiben
BCR: Anne versucht Bücher und Susi
versucht Artikel zu schreiben
Gapping and BCR: Anne versucht
Bücher und Susi Artikel zu schreiben
LDG: Anne versucht Bücher zu schreiben
und Susi Artikel
</reference>
<page confidence="0.998586">
117
</page>
<sectionHeader confidence="0.997733" genericHeader="conclusions">
4 Conclusion
</sectionHeader>
<bodyText confidence="0.999843454545455">
Currently, ELLEIPO can handle all major types of
clausal coordinative ellipsis in German and
Dutch. However, further finetuning of the rules
is needed, e.g., in order to take subtle semantic
conditions on SGF and Gapping into account.
We expect further improvements by allowing for
interactions between the ellipsis module and the
generator’s pronominalization strategy. Work on
porting ELLEIPO to related languages, in particu-
lar English, and to coordinations of non-clausal
constituents (NP, PP, AP) is in progress.
</bodyText>
<sectionHeader confidence="0.992147" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.743837861702128">
John A. Bateman, Christian M.I.M. Matthiessen
&amp; Licheng Zeng (1999). Multilingual natural
language generation for multilingual software:
a functional linguistic approach. Applied Arti-
ficialIntelligence, 13, 607–639.
Ehud Reiter &amp; Robert Dale (2000). Building
natural language generation systems. Cam-
bridge UK: Cambridge University Press.
Hercules Dalianis, (1999). Aggregation in natu-
ral language generation. Computational Intel-
ligence, 15, 384–414.
Feikje Hielkema (2005). Performing syntactic
aggregation using discourse structures. Un-
published Master’s thesis, Artificial Intelli-
gence Unit, University of Groningen.
Gerard Kempen (subm.). Symmetrical clausal
coordination and coordinative ellipsis as in-
cremental updating. Downloadable from:
www.gerardkempen.nl/publicationfiles
Anoop Sarkar &amp; Aravind Joshi (1996). Coordi-
nation in Tree Adjoining Grammars: Formal-
ization and implementation. In: Procs. of
COLING 1996, Copenhagen, pp. 610–615.
James Shaw (1998). Segregatory coordination
and ellipsis in text generation. In: Procs. of
COLING 1998, Montreal, pp. 1220–1226.
Mark Steedman (2000). The syntactic process.
Cambridge MA: MIT Press.
Appendix: A sketch of the algorithm
1 proc ELLEIPO(SENT) {
2 mark root nodes of all superclauses in SENT;
3 for all coordinators and their left- and right-
neighboring clauses (LCONJ, RCONJ) {
4 call GAP(LCONJ, RCONJ, “g”); // string “g”
gets an “l” attached for any level of LDG; the
resulting string is attached, in line 9 of GAP, to
leaves that ReadOut interprets as elidable//
5 FCRcontrol=TRUE; BCRcontrol=TRUE;
//global variables communicating the end of
left- or right-peripheral identical strings//
6 call FCR(LCONJ, RCONJ);
7 call SGF(LCONJ, RCONJ);
8 call BCR(LCONJ, RCONJ);};
9 call ReadOut();}
1 proc GAP(LC, RC, ELLIM) {//ELLIM records
the ‘elliptical mechanism(s)’ applied: “g” for
Gapping; “gl”, “gll”, etc., for LDG levels//
2 check whether the HEAD verb of LC and the
HEAD verb of RC have the same reference tag;
3 if not then return; //verbs differ=&gt;no gapping//
4 check whether all other constituents in LC have a
counterpart in RC with same grammatical function,
not necessarily at the same left-to-right position;
modifiers need identical mod-type;
5 if not then return; // no proper set of contrastive
pairs of immediate constituents found//
6 for all pairs (LSIB, RSIB) resulting from (4) {
7 if (LSIB is an S-node) &amp; (LSIB is not a super-
clause root) then {//LSIB = ”left sibling”//
8 if (LSIB and RSIB are not coreferential)
9 then attach “l” to ELLIM;//LDG variant//
10 call GAP(LSIB, RSIB, ELLIM);}
11 if NOT((LSIB is an S-node) &amp; (LSIB and RSIB
are coreferential))
12 then mark RSIB for elision, with ELLIM;}}
1 proc FCR(LC, RC) {
2 while (FCRcontrol) {
3 set LSIB and RSIB to left-most daughter of LC
and RC, resp.;
4 if (LSIB and RSIB are not coreferential)
5 then {FCRcontrol = FALSE;
6 return;}
7 if (LSIB is an S-node)
8 then call FCR(LSIB, RSIB);
9 call FCR(right neighbor of LSIB, right neigh-
bor of RSIB);
10 mark RSIB for elision by adding “f”;}}
1 proc SGF(LC, RC) {
2 if (NOT(SUBJ is 1st daughter of LC)) &amp; (HEAD
is 2nd daughter of LC) &amp; (SUBJ is 1st or 2nd
daughter of RC) &amp; (HEAD is 1st or 2nd daughter
of RC)
3 then mark RC’s SUBJ for elision, with “s”;}
1 proc BCR(LC, RC) {
2 while (BCRcontrol) {
3 set LSIB and RSIB to right-most daughter node
of LC and RC, respectively;
4 if (LSIB and RSIB are not coreferential)
5 then {BCRcontrol = FALSE; return;};
6 call BCR(LSIB, RSIB);
7 call BCR(left neighbor of LSIB, left neighbor
of RSIB);
8 if (RSIB is a terminal node)
9 then mark LSIB for elision, with “b”;}}
</reference>
<page confidence="0.996001">
118
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.378533">
<title confidence="0.9941365">A module that computes coordinative ellipsis for language generators that don’t</title>
<author confidence="0.999589">Karin Harbusch</author>
<affiliation confidence="0.9995645">Computer Science Department University of Koblenz-Landau</affiliation>
<author confidence="0.552643">PO Box</author>
<email confidence="0.987079">harbusch@uni-koblenz.de</email>
<author confidence="0.9487135">Gerard Kempen Max Planck Institute for Psycholinguistics</author>
<affiliation confidence="0.997473">Cognitive Psychology Unit, Leiden University</affiliation>
<author confidence="0.798705">AH Nijmegen NL</author>
<email confidence="0.988447">gerard.kempen@mpi.nl</email>
<abstract confidence="0.999501727272727">Many current sentence generators lack the ability to compute elliptical versions of coordinated clauses in accordance with the rules for Gapping, Forward and Backward Conjunction Reduction, and SGF (Subject Gap in clauses with Finite/Fronted verb). We describe a module (implemented in JAVA, with German and Dutch as target languages) that takes non-elliptical coordinated clauses as input and returns all reduced versions licensed by coordinative ellipsis. It is loosely based on a new psycholinguistic theory of coordinative ellipsis proposed by Kempen. In this theory, coordinative ellipsis is not supposed to result from the application of declarative grammar rules for clause formation but from a procedural component that interacts with the sentence generator and may block the overt expression of certain constituents.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="false">
<authors>
<author>John A Bateman</author>
<author>Christian M I M Matthiessen</author>
<author>Licheng Zeng</author>
</authors>
<title>Artikel zugl schreibengl c. Elliptical options: Gapping: Anne versucht Bücher zu schreiben und Susi Artikel zu schreiben BCR: Anne versucht Bücher und Susi versucht Artikel zu schreiben Gapping and BCR: Anne versucht Bücher und Susi Artikel zu schreiben LDG: Anne versucht Bücher zu schreiben und Susi Artikel</title>
<date>1999</date>
<journal>Applied ArtificialIntelligence,</journal>
<booktitle>Ehud Reiter &amp; Robert Dale</booktitle>
<volume>13</volume>
<pages>607--639</pages>
<institution>Artificial Intelligence Unit, University of Groningen. Gerard Kempen</institution>
<location>James Shaw</location>
<marker>Bateman, Matthiessen, Zeng, 1999</marker>
<rawString> Artikel zugl schreibengl c. Elliptical options: Gapping: Anne versucht Bücher zu schreiben und Susi Artikel zu schreiben BCR: Anne versucht Bücher und Susi versucht Artikel zu schreiben Gapping and BCR: Anne versucht Bücher und Susi Artikel zu schreiben LDG: Anne versucht Bücher zu schreiben und Susi Artikel John A. Bateman, Christian M.I.M. Matthiessen &amp; Licheng Zeng (1999). Multilingual natural language generation for multilingual software: a functional linguistic approach. Applied ArtificialIntelligence, 13, 607–639. Ehud Reiter &amp; Robert Dale (2000). Building natural language generation systems. Cambridge UK: Cambridge University Press. Hercules Dalianis, (1999). Aggregation in natural language generation. Computational Intelligence, 15, 384–414. Feikje Hielkema (2005). Performing syntactic aggregation using discourse structures. Unpublished Master’s thesis, Artificial Intelligence Unit, University of Groningen. Gerard Kempen (subm.). Symmetrical clausal coordination and coordinative ellipsis as incremental updating. Downloadable from: www.gerardkempen.nl/publicationfiles Anoop Sarkar &amp; Aravind Joshi (1996). Coordination in Tree Adjoining Grammars: Formalization and implementation. In: Procs. of COLING 1996, Copenhagen, pp. 610–615. James Shaw (1998). Segregatory coordination and ellipsis in text generation. In: Procs. of COLING 1998, Montreal, pp. 1220–1226. Mark Steedman (2000). The syntactic process. Cambridge MA: MIT Press. Appendix: A sketch of the algorithm</rawString>
</citation>
<citation valid="false">
<note>proc ELLEIPO(SENT) {</note>
<contexts>
<context position="1656" citStr="(1)" startWordPosition="233" endWordPosition="233">for clause formation but from a procedural component that interacts with the sentence generator and may block the overt expression of certain constituents. 1 Introduction Coordination and coordinative ellipsis are essential tools for the sentence aggregation component of any language generator. Very often, when the aggregator chooses to combine several clauses into a single coordinate structure, the need arises to eliminate unnatural reduplications of coreferential constituents. In the literature, one often distinguishes four major types of clause-level coordinative ellipsis: • Gapping (as in (1)), with a special variant called Long-Distance Gapping (LDG). In LDG, the second conjunct consists of constituents stemming from different clauses — in (2), the main clause and the complement. • Forward Conjunction Reduction (FCR; cf. (3) and the relative clause in (4)). • SGF (Subject Gap in clauses with Finite/ Fronted verb; as in (5), and • Backward Conjunction reduction (BCR, also termed Right Node Raising; see (6)). (1) Henk lives in Leiden and Chris livesg in Delft (2) My wife wants to buy a car, my son wantsg [to buy]gl a motorcycle. (3) My sister lives in Utrecht and [my sister]f works</context>
</contexts>
<marker>1</marker>
<rawString>proc ELLEIPO(SENT) {</rawString>
</citation>
<citation valid="false">
<title>mark root nodes of all superclauses</title>
<note>in SENT;</note>
<contexts>
<context position="1811" citStr="(2)" startWordPosition="257" endWordPosition="257"> 1 Introduction Coordination and coordinative ellipsis are essential tools for the sentence aggregation component of any language generator. Very often, when the aggregator chooses to combine several clauses into a single coordinate structure, the need arises to eliminate unnatural reduplications of coreferential constituents. In the literature, one often distinguishes four major types of clause-level coordinative ellipsis: • Gapping (as in (1)), with a special variant called Long-Distance Gapping (LDG). In LDG, the second conjunct consists of constituents stemming from different clauses — in (2), the main clause and the complement. • Forward Conjunction Reduction (FCR; cf. (3) and the relative clause in (4)). • SGF (Subject Gap in clauses with Finite/ Fronted verb; as in (5), and • Backward Conjunction reduction (BCR, also termed Right Node Raising; see (6)). (1) Henk lives in Leiden and Chris livesg in Delft (2) My wife wants to buy a car, my son wantsg [to buy]gl a motorcycle. (3) My sister lives in Utrecht and [my sister]f works in Amsterdam (4)Amsterdam is the city [S where Jan lives and wheref Piet works] (5) Why did you leave but didn’t yous warn me? (6)Anne arrived before [thr</context>
</contexts>
<marker>2</marker>
<rawString>mark root nodes of all superclauses in SENT;</rawString>
</citation>
<citation valid="false">
<title>for all coordinators and their left- and rightneighboring clauses (LCONJ,</title>
<journal>RCONJ) {</journal>
<contexts>
<context position="1894" citStr="(3)" startWordPosition="270" endWordPosition="270">sentence aggregation component of any language generator. Very often, when the aggregator chooses to combine several clauses into a single coordinate structure, the need arises to eliminate unnatural reduplications of coreferential constituents. In the literature, one often distinguishes four major types of clause-level coordinative ellipsis: • Gapping (as in (1)), with a special variant called Long-Distance Gapping (LDG). In LDG, the second conjunct consists of constituents stemming from different clauses — in (2), the main clause and the complement. • Forward Conjunction Reduction (FCR; cf. (3) and the relative clause in (4)). • SGF (Subject Gap in clauses with Finite/ Fronted verb; as in (5), and • Backward Conjunction reduction (BCR, also termed Right Node Raising; see (6)). (1) Henk lives in Leiden and Chris livesg in Delft (2) My wife wants to buy a car, my son wantsg [to buy]gl a motorcycle. (3) My sister lives in Utrecht and [my sister]f works in Amsterdam (4)Amsterdam is the city [S where Jan lives and wheref Piet works] (5) Why did you leave but didn’t yous warn me? (6)Anne arrived before [three o’clock]b, and Susi left after three o’clock The subscripts denote the elliptica</context>
</contexts>
<marker>3</marker>
<rawString>for all coordinators and their left- and rightneighboring clauses (LCONJ, RCONJ) {</rawString>
</citation>
<citation valid="false">
<authors>
<author>call GAP</author>
</authors>
<title>g”); // string “g” gets an “l” attached for any level of LDG; the resulting string is attached, in line 9 of GAP, to leaves that ReadOut interprets as elidable//</title>
<contexts>
<context position="1925" citStr="(4)" startWordPosition="276" endWordPosition="276">of any language generator. Very often, when the aggregator chooses to combine several clauses into a single coordinate structure, the need arises to eliminate unnatural reduplications of coreferential constituents. In the literature, one often distinguishes four major types of clause-level coordinative ellipsis: • Gapping (as in (1)), with a special variant called Long-Distance Gapping (LDG). In LDG, the second conjunct consists of constituents stemming from different clauses — in (2), the main clause and the complement. • Forward Conjunction Reduction (FCR; cf. (3) and the relative clause in (4)). • SGF (Subject Gap in clauses with Finite/ Fronted verb; as in (5), and • Backward Conjunction reduction (BCR, also termed Right Node Raising; see (6)). (1) Henk lives in Leiden and Chris livesg in Delft (2) My wife wants to buy a car, my son wantsg [to buy]gl a motorcycle. (3) My sister lives in Utrecht and [my sister]f works in Amsterdam (4)Amsterdam is the city [S where Jan lives and wheref Piet works] (5) Why did you leave but didn’t yous warn me? (6)Anne arrived before [three o’clock]b, and Susi left after three o’clock The subscripts denote the elliptical mechanism at work: g=Gapping,</context>
</contexts>
<marker>4</marker>
<rawString>call GAP(LCONJ, RCONJ, “g”); // string “g” gets an “l” attached for any level of LDG; the resulting string is attached, in line 9 of GAP, to leaves that ReadOut interprets as elidable//</rawString>
</citation>
<citation valid="false">
<title>FCRcontrol=TRUE; BCRcontrol=TRUE; //global variables communicating the end of left- or right-peripheral identical strings//</title>
<contexts>
<context position="1994" citStr="(5)" startWordPosition="289" endWordPosition="289"> combine several clauses into a single coordinate structure, the need arises to eliminate unnatural reduplications of coreferential constituents. In the literature, one often distinguishes four major types of clause-level coordinative ellipsis: • Gapping (as in (1)), with a special variant called Long-Distance Gapping (LDG). In LDG, the second conjunct consists of constituents stemming from different clauses — in (2), the main clause and the complement. • Forward Conjunction Reduction (FCR; cf. (3) and the relative clause in (4)). • SGF (Subject Gap in clauses with Finite/ Fronted verb; as in (5), and • Backward Conjunction reduction (BCR, also termed Right Node Raising; see (6)). (1) Henk lives in Leiden and Chris livesg in Delft (2) My wife wants to buy a car, my son wantsg [to buy]gl a motorcycle. (3) My sister lives in Utrecht and [my sister]f works in Amsterdam (4)Amsterdam is the city [S where Jan lives and wheref Piet works] (5) Why did you leave but didn’t yous warn me? (6)Anne arrived before [three o’clock]b, and Susi left after three o’clock The subscripts denote the elliptical mechanism at work: g=Gapping, gl=LDG, f=FCR, s=SGF, b=BCR. We will not deal with VP Ellipsis and V</context>
</contexts>
<marker>5</marker>
<rawString>FCRcontrol=TRUE; BCRcontrol=TRUE; //global variables communicating the end of left- or right-peripheral identical strings//</rawString>
</citation>
<citation valid="false">
<authors>
<author>call FCR</author>
</authors>
<publisher>RCONJ);</publisher>
<contexts>
<context position="2078" citStr="(6)" startWordPosition="302" endWordPosition="302">inate unnatural reduplications of coreferential constituents. In the literature, one often distinguishes four major types of clause-level coordinative ellipsis: • Gapping (as in (1)), with a special variant called Long-Distance Gapping (LDG). In LDG, the second conjunct consists of constituents stemming from different clauses — in (2), the main clause and the complement. • Forward Conjunction Reduction (FCR; cf. (3) and the relative clause in (4)). • SGF (Subject Gap in clauses with Finite/ Fronted verb; as in (5), and • Backward Conjunction reduction (BCR, also termed Right Node Raising; see (6)). (1) Henk lives in Leiden and Chris livesg in Delft (2) My wife wants to buy a car, my son wantsg [to buy]gl a motorcycle. (3) My sister lives in Utrecht and [my sister]f works in Amsterdam (4)Amsterdam is the city [S where Jan lives and wheref Piet works] (5) Why did you leave but didn’t yous warn me? (6)Anne arrived before [three o’clock]b, and Susi left after three o’clock The subscripts denote the elliptical mechanism at work: g=Gapping, gl=LDG, f=FCR, s=SGF, b=BCR. We will not deal with VP Ellipsis and VP Anaphora because they generate pro-forms rather than elisions and are not restrict</context>
</contexts>
<marker>6</marker>
<rawString>call FCR(LCONJ, RCONJ);</rawString>
</citation>
<citation valid="false">
<authors>
<author>call SGF</author>
</authors>
<publisher>RCONJ);</publisher>
<contexts>
<context position="6609" citStr="(7)" startWordPosition="988" endWordPosition="988">Coordinative ellipsis is insensitive to the distinction between “strict” and “sloppy” (token- vs. type-)identity. erator output to a (simple) canonical form. 3 A sketch of the algorithm This sketch presupposes and-coordinations of only n=2 conjuncts. Actually, ELLEIPO handles and-coordinations with n&gt;2 conjuncts if, in every pair of conjuncts, the major constituents embody the same pattern of coreferences and contrasts. ELLEIPO takes as input a non-elliptical syntactic structure that should meet the following four canonical form criteria (see Fig. 1 for the input tree corresponding to example (7). (7) Susi hörte dass Hans einen Unfall hatte Susi heard that Hans an accident had und dassfHansfsterben könnte and that Hans die might ‘Susi heard that Hans had an accident and might die’ • Categorial (phrasal and lexical) nodes — bolded in Fig. 1 — carry reference tags (presumably propagated from the generator’s strategic component). E.g., the tag “7” is attached to the root and head nodes of both exemplars of NP Hans in Fig. 1, indicating their coreferentiality. For the sake of computational uniformity, we also attach reference tags to non-referring lexical elements. In such cases, the tags</context>
<context position="8538" citStr="(7)" startWordPosition="1298" endWordPosition="1298">junct, all functions are represented at the same hierarchical level. Hence, the trees are “flat,” as illustrated in Fig. 1, and similar to the trees in German treebanks (NEGRA-II, TIGER). ELLEIPO starts by demarcating “superclauses.” Kempen (subm.) introduced this notion in his treatment of Gapping and LDG. An S-node dominates a superclause iff it dominates the entire sentence or a clause beginning with a subordinating conjunction (CNJ). In Fig. 1, the strings dominated by S1, S5 and S12 are superFigure 1. Slightly simplified canonical form of the non-elliptical input tree underlying sentence (7). clauses. Note that S12 includes clause S13, which is not a superclause. Then, ELLEIPO checks all coordination domains for elision options, as follows: • Testing for forward ellipsis: Gapping (including LDG), FCR, or SGF. This involves inspecting (recursively for every S-node) the set of immediate constituents (grammatical functions) of the two conjuncts, and their reference tags. Complete constituents of the right-hand conjunct may get marked for elision, depending on the specific conditions listed in the Appendix. • Testing for BCR. ELLEIPO checks — wordby-word, going from right to left — t</context>
</contexts>
<marker>7</marker>
<rawString>call SGF(LCONJ, RCONJ);</rawString>
</citation>
<citation valid="false">
<authors>
<author>call BCR</author>
</authors>
<publisher>RCONJ);};</publisher>
<marker>8</marker>
<rawString>call BCR(LCONJ, RCONJ);};</rawString>
</citation>
<citation valid="false">
<note>call ReadOut();</note>
<contexts>
<context position="10417" citStr="(9)" startWordPosition="1605" endWordPosition="1605">d elliptical options on user request. Furthermore, auch ‘too’ is added in case of “Stripping,” i.e. when Gapping leaves only one constituent as remnant. Example (10) illustrates a combination of Gapping and BCR, with the three licensed elliptical output strings shown in (10c). In (11), Gapping combines with BCR in the subordinate clauses. The fact that here, in contrast with (10), the subordinate clauses do not start their own superclauses, now licenses LDG. However, ReadOut prevents LDG to combine with BCR, which would have yielded the unintended string Anne versucht Bücher und Susi Artikel. (9) a. Wir essen Äpfel und ihr esst Birnen ‘We eat apples and you(pl.) eat pears’ b.Wir essen Äpfel und ihr esstg Birnen c. Elliptical option: Wir essen Äpfel und ihr Birnen (10)a. Ich hoffe, dass Hans schläft und du hoffst, dass Peter schläft ‘I hope that Hans sleeps and you hope that Peter sleeps’ b. Ich hoffe dass Hans schläft, und du hoffstg dass Peter schläft c. Elliptical options: Gapping: Ich hoffe, dass Hans schläft und du, dass Peter schläft BCR: Ich hoffe, dass Hans und du hoffst, dass Peter schläft Gapping and BCR: Ich hoffe, dass Hans und du, dass Peter schläft (11)a.Anne versucht Büc</context>
</contexts>
<marker>9</marker>
<rawString>call ReadOut();}</rawString>
</citation>
<citation valid="false">
<authors>
<author>proc GAP</author>
</authors>
<title>ELLIM) {//ELLIM records the ‘elliptical mechanism(s)’ applied: “g” for Gapping;</title>
<note>gl”, “gll”, etc., for LDG levels//</note>
<contexts>
<context position="1656" citStr="(1)" startWordPosition="233" endWordPosition="233">for clause formation but from a procedural component that interacts with the sentence generator and may block the overt expression of certain constituents. 1 Introduction Coordination and coordinative ellipsis are essential tools for the sentence aggregation component of any language generator. Very often, when the aggregator chooses to combine several clauses into a single coordinate structure, the need arises to eliminate unnatural reduplications of coreferential constituents. In the literature, one often distinguishes four major types of clause-level coordinative ellipsis: • Gapping (as in (1)), with a special variant called Long-Distance Gapping (LDG). In LDG, the second conjunct consists of constituents stemming from different clauses — in (2), the main clause and the complement. • Forward Conjunction Reduction (FCR; cf. (3) and the relative clause in (4)). • SGF (Subject Gap in clauses with Finite/ Fronted verb; as in (5), and • Backward Conjunction reduction (BCR, also termed Right Node Raising; see (6)). (1) Henk lives in Leiden and Chris livesg in Delft (2) My wife wants to buy a car, my son wantsg [to buy]gl a motorcycle. (3) My sister lives in Utrecht and [my sister]f works</context>
</contexts>
<marker>1</marker>
<rawString>proc GAP(LC, RC, ELLIM) {//ELLIM records the ‘elliptical mechanism(s)’ applied: “g” for Gapping; “gl”, “gll”, etc., for LDG levels//</rawString>
</citation>
<citation valid="false">
<title>check whether the HEAD verb of LC and the HEAD verb of RC have the same reference tag;</title>
<contexts>
<context position="1811" citStr="(2)" startWordPosition="257" endWordPosition="257"> 1 Introduction Coordination and coordinative ellipsis are essential tools for the sentence aggregation component of any language generator. Very often, when the aggregator chooses to combine several clauses into a single coordinate structure, the need arises to eliminate unnatural reduplications of coreferential constituents. In the literature, one often distinguishes four major types of clause-level coordinative ellipsis: • Gapping (as in (1)), with a special variant called Long-Distance Gapping (LDG). In LDG, the second conjunct consists of constituents stemming from different clauses — in (2), the main clause and the complement. • Forward Conjunction Reduction (FCR; cf. (3) and the relative clause in (4)). • SGF (Subject Gap in clauses with Finite/ Fronted verb; as in (5), and • Backward Conjunction reduction (BCR, also termed Right Node Raising; see (6)). (1) Henk lives in Leiden and Chris livesg in Delft (2) My wife wants to buy a car, my son wantsg [to buy]gl a motorcycle. (3) My sister lives in Utrecht and [my sister]f works in Amsterdam (4)Amsterdam is the city [S where Jan lives and wheref Piet works] (5) Why did you leave but didn’t yous warn me? (6)Anne arrived before [thr</context>
</contexts>
<marker>2</marker>
<rawString>check whether the HEAD verb of LC and the HEAD verb of RC have the same reference tag;</rawString>
</citation>
<citation valid="false">
<title>if not then return; //verbs differ=&gt;no gapping//</title>
<contexts>
<context position="1894" citStr="(3)" startWordPosition="270" endWordPosition="270">sentence aggregation component of any language generator. Very often, when the aggregator chooses to combine several clauses into a single coordinate structure, the need arises to eliminate unnatural reduplications of coreferential constituents. In the literature, one often distinguishes four major types of clause-level coordinative ellipsis: • Gapping (as in (1)), with a special variant called Long-Distance Gapping (LDG). In LDG, the second conjunct consists of constituents stemming from different clauses — in (2), the main clause and the complement. • Forward Conjunction Reduction (FCR; cf. (3) and the relative clause in (4)). • SGF (Subject Gap in clauses with Finite/ Fronted verb; as in (5), and • Backward Conjunction reduction (BCR, also termed Right Node Raising; see (6)). (1) Henk lives in Leiden and Chris livesg in Delft (2) My wife wants to buy a car, my son wantsg [to buy]gl a motorcycle. (3) My sister lives in Utrecht and [my sister]f works in Amsterdam (4)Amsterdam is the city [S where Jan lives and wheref Piet works] (5) Why did you leave but didn’t yous warn me? (6)Anne arrived before [three o’clock]b, and Susi left after three o’clock The subscripts denote the elliptica</context>
</contexts>
<marker>3</marker>
<rawString>if not then return; //verbs differ=&gt;no gapping//</rawString>
</citation>
<citation valid="false">
<title>check whether all other constituents in LC have a counterpart in RC with same grammatical function, not necessarily at the same left-to-right position; modifiers need identical mod-type;</title>
<contexts>
<context position="1925" citStr="(4)" startWordPosition="276" endWordPosition="276">of any language generator. Very often, when the aggregator chooses to combine several clauses into a single coordinate structure, the need arises to eliminate unnatural reduplications of coreferential constituents. In the literature, one often distinguishes four major types of clause-level coordinative ellipsis: • Gapping (as in (1)), with a special variant called Long-Distance Gapping (LDG). In LDG, the second conjunct consists of constituents stemming from different clauses — in (2), the main clause and the complement. • Forward Conjunction Reduction (FCR; cf. (3) and the relative clause in (4)). • SGF (Subject Gap in clauses with Finite/ Fronted verb; as in (5), and • Backward Conjunction reduction (BCR, also termed Right Node Raising; see (6)). (1) Henk lives in Leiden and Chris livesg in Delft (2) My wife wants to buy a car, my son wantsg [to buy]gl a motorcycle. (3) My sister lives in Utrecht and [my sister]f works in Amsterdam (4)Amsterdam is the city [S where Jan lives and wheref Piet works] (5) Why did you leave but didn’t yous warn me? (6)Anne arrived before [three o’clock]b, and Susi left after three o’clock The subscripts denote the elliptical mechanism at work: g=Gapping,</context>
</contexts>
<marker>4</marker>
<rawString>check whether all other constituents in LC have a counterpart in RC with same grammatical function, not necessarily at the same left-to-right position; modifiers need identical mod-type;</rawString>
</citation>
<citation valid="false">
<title>if not then return; // no proper set of contrastive pairs of immediate constituents found//</title>
<contexts>
<context position="1994" citStr="(5)" startWordPosition="289" endWordPosition="289"> combine several clauses into a single coordinate structure, the need arises to eliminate unnatural reduplications of coreferential constituents. In the literature, one often distinguishes four major types of clause-level coordinative ellipsis: • Gapping (as in (1)), with a special variant called Long-Distance Gapping (LDG). In LDG, the second conjunct consists of constituents stemming from different clauses — in (2), the main clause and the complement. • Forward Conjunction Reduction (FCR; cf. (3) and the relative clause in (4)). • SGF (Subject Gap in clauses with Finite/ Fronted verb; as in (5), and • Backward Conjunction reduction (BCR, also termed Right Node Raising; see (6)). (1) Henk lives in Leiden and Chris livesg in Delft (2) My wife wants to buy a car, my son wantsg [to buy]gl a motorcycle. (3) My sister lives in Utrecht and [my sister]f works in Amsterdam (4)Amsterdam is the city [S where Jan lives and wheref Piet works] (5) Why did you leave but didn’t yous warn me? (6)Anne arrived before [three o’clock]b, and Susi left after three o’clock The subscripts denote the elliptical mechanism at work: g=Gapping, gl=LDG, f=FCR, s=SGF, b=BCR. We will not deal with VP Ellipsis and V</context>
</contexts>
<marker>5</marker>
<rawString>if not then return; // no proper set of contrastive pairs of immediate constituents found//</rawString>
</citation>
<citation valid="false">
<title>for all pairs (LSIB, RSIB) resulting from (4) {</title>
<contexts>
<context position="2078" citStr="(6)" startWordPosition="302" endWordPosition="302">inate unnatural reduplications of coreferential constituents. In the literature, one often distinguishes four major types of clause-level coordinative ellipsis: • Gapping (as in (1)), with a special variant called Long-Distance Gapping (LDG). In LDG, the second conjunct consists of constituents stemming from different clauses — in (2), the main clause and the complement. • Forward Conjunction Reduction (FCR; cf. (3) and the relative clause in (4)). • SGF (Subject Gap in clauses with Finite/ Fronted verb; as in (5), and • Backward Conjunction reduction (BCR, also termed Right Node Raising; see (6)). (1) Henk lives in Leiden and Chris livesg in Delft (2) My wife wants to buy a car, my son wantsg [to buy]gl a motorcycle. (3) My sister lives in Utrecht and [my sister]f works in Amsterdam (4)Amsterdam is the city [S where Jan lives and wheref Piet works] (5) Why did you leave but didn’t yous warn me? (6)Anne arrived before [three o’clock]b, and Susi left after three o’clock The subscripts denote the elliptical mechanism at work: g=Gapping, gl=LDG, f=FCR, s=SGF, b=BCR. We will not deal with VP Ellipsis and VP Anaphora because they generate pro-forms rather than elisions and are not restrict</context>
</contexts>
<marker>6</marker>
<rawString>for all pairs (LSIB, RSIB) resulting from (4) {</rawString>
</citation>
<citation valid="false">
<title>if (LSIB is an S-node) &amp; (LSIB is not a superclause root) then {//LSIB = ”left sibling”//</title>
<contexts>
<context position="6609" citStr="(7)" startWordPosition="988" endWordPosition="988">Coordinative ellipsis is insensitive to the distinction between “strict” and “sloppy” (token- vs. type-)identity. erator output to a (simple) canonical form. 3 A sketch of the algorithm This sketch presupposes and-coordinations of only n=2 conjuncts. Actually, ELLEIPO handles and-coordinations with n&gt;2 conjuncts if, in every pair of conjuncts, the major constituents embody the same pattern of coreferences and contrasts. ELLEIPO takes as input a non-elliptical syntactic structure that should meet the following four canonical form criteria (see Fig. 1 for the input tree corresponding to example (7). (7) Susi hörte dass Hans einen Unfall hatte Susi heard that Hans an accident had und dassfHansfsterben könnte and that Hans die might ‘Susi heard that Hans had an accident and might die’ • Categorial (phrasal and lexical) nodes — bolded in Fig. 1 — carry reference tags (presumably propagated from the generator’s strategic component). E.g., the tag “7” is attached to the root and head nodes of both exemplars of NP Hans in Fig. 1, indicating their coreferentiality. For the sake of computational uniformity, we also attach reference tags to non-referring lexical elements. In such cases, the tags</context>
<context position="8538" citStr="(7)" startWordPosition="1298" endWordPosition="1298">junct, all functions are represented at the same hierarchical level. Hence, the trees are “flat,” as illustrated in Fig. 1, and similar to the trees in German treebanks (NEGRA-II, TIGER). ELLEIPO starts by demarcating “superclauses.” Kempen (subm.) introduced this notion in his treatment of Gapping and LDG. An S-node dominates a superclause iff it dominates the entire sentence or a clause beginning with a subordinating conjunction (CNJ). In Fig. 1, the strings dominated by S1, S5 and S12 are superFigure 1. Slightly simplified canonical form of the non-elliptical input tree underlying sentence (7). clauses. Note that S12 includes clause S13, which is not a superclause. Then, ELLEIPO checks all coordination domains for elision options, as follows: • Testing for forward ellipsis: Gapping (including LDG), FCR, or SGF. This involves inspecting (recursively for every S-node) the set of immediate constituents (grammatical functions) of the two conjuncts, and their reference tags. Complete constituents of the right-hand conjunct may get marked for elision, depending on the specific conditions listed in the Appendix. • Testing for BCR. ELLEIPO checks — wordby-word, going from right to left — t</context>
</contexts>
<marker>7</marker>
<rawString>if (LSIB is an S-node) &amp; (LSIB is not a superclause root) then {//LSIB = ”left sibling”//</rawString>
</citation>
<citation valid="false">
<booktitle>if (LSIB and RSIB are not coreferential)</booktitle>
<marker>8</marker>
<rawString>if (LSIB and RSIB are not coreferential)</rawString>
</citation>
<citation valid="false">
<note>then attach “l” to ELLIM;//LDG variant//</note>
<contexts>
<context position="10417" citStr="(9)" startWordPosition="1605" endWordPosition="1605">d elliptical options on user request. Furthermore, auch ‘too’ is added in case of “Stripping,” i.e. when Gapping leaves only one constituent as remnant. Example (10) illustrates a combination of Gapping and BCR, with the three licensed elliptical output strings shown in (10c). In (11), Gapping combines with BCR in the subordinate clauses. The fact that here, in contrast with (10), the subordinate clauses do not start their own superclauses, now licenses LDG. However, ReadOut prevents LDG to combine with BCR, which would have yielded the unintended string Anne versucht Bücher und Susi Artikel. (9) a. Wir essen Äpfel und ihr esst Birnen ‘We eat apples and you(pl.) eat pears’ b.Wir essen Äpfel und ihr esstg Birnen c. Elliptical option: Wir essen Äpfel und ihr Birnen (10)a. Ich hoffe, dass Hans schläft und du hoffst, dass Peter schläft ‘I hope that Hans sleeps and you hope that Peter sleeps’ b. Ich hoffe dass Hans schläft, und du hoffstg dass Peter schläft c. Elliptical options: Gapping: Ich hoffe, dass Hans schläft und du, dass Peter schläft BCR: Ich hoffe, dass Hans und du hoffst, dass Peter schläft Gapping and BCR: Ich hoffe, dass Hans und du, dass Peter schläft (11)a.Anne versucht Büc</context>
</contexts>
<marker>9</marker>
<rawString>then attach “l” to ELLIM;//LDG variant//</rawString>
</citation>
<citation valid="false">
<authors>
<author>call GAP</author>
</authors>
<publisher>ELLIM);</publisher>
<contexts>
<context position="9979" citStr="(10)" startWordPosition="1534" endWordPosition="1534"> been processed, a (possibly empty) subset of the terminal leaves of the input tree has been marked for elision. In the examples below, this is indicated by subscript marks. E.g., the subscript “g” attached to esst ‘eat’ in (9b) indicates that Gapping is allowed. ReadOut interprets the elision marks and, in ‘standard mode,’ produces the shortest elliptical string(s) as output (e.g. (9c)). In ‘demo mode,’ it shows individual and combined elliptical options on user request. Furthermore, auch ‘too’ is added in case of “Stripping,” i.e. when Gapping leaves only one constituent as remnant. Example (10) illustrates a combination of Gapping and BCR, with the three licensed elliptical output strings shown in (10c). In (11), Gapping combines with BCR in the subordinate clauses. The fact that here, in contrast with (10), the subordinate clauses do not start their own superclauses, now licenses LDG. However, ReadOut prevents LDG to combine with BCR, which would have yielded the unintended string Anne versucht Bücher und Susi Artikel. (9) a. Wir essen Äpfel und ihr esst Birnen ‘We eat apples and you(pl.) eat pears’ b.Wir essen Äpfel und ihr esstg Birnen c. Elliptical option: Wir essen Äpfel und ih</context>
</contexts>
<marker>10</marker>
<rawString>call GAP(LSIB, RSIB, ELLIM);}</rawString>
</citation>
<citation valid="false">
<booktitle>if NOT((LSIB is an S-node) &amp; (LSIB and RSIB are coreferential</booktitle>
<contexts>
<context position="10099" citStr="(11)" startWordPosition="1554" endWordPosition="1554">examples below, this is indicated by subscript marks. E.g., the subscript “g” attached to esst ‘eat’ in (9b) indicates that Gapping is allowed. ReadOut interprets the elision marks and, in ‘standard mode,’ produces the shortest elliptical string(s) as output (e.g. (9c)). In ‘demo mode,’ it shows individual and combined elliptical options on user request. Furthermore, auch ‘too’ is added in case of “Stripping,” i.e. when Gapping leaves only one constituent as remnant. Example (10) illustrates a combination of Gapping and BCR, with the three licensed elliptical output strings shown in (10c). In (11), Gapping combines with BCR in the subordinate clauses. The fact that here, in contrast with (10), the subordinate clauses do not start their own superclauses, now licenses LDG. However, ReadOut prevents LDG to combine with BCR, which would have yielded the unintended string Anne versucht Bücher und Susi Artikel. (9) a. Wir essen Äpfel und ihr esst Birnen ‘We eat apples and you(pl.) eat pears’ b.Wir essen Äpfel und ihr esstg Birnen c. Elliptical option: Wir essen Äpfel und ihr Birnen (10)a. Ich hoffe, dass Hans schläft und du hoffst, dass Peter schläft ‘I hope that Hans sleeps and you hope tha</context>
</contexts>
<marker>11</marker>
<rawString>if NOT((LSIB is an S-node) &amp; (LSIB and RSIB are coreferential))</rawString>
</citation>
<citation valid="false">
<authors>
<author>then mark</author>
</authors>
<title>RSIB for elision, with ELLIM;</title>
<marker>12</marker>
<rawString>then mark RSIB for elision, with ELLIM;}}</rawString>
</citation>
<citation valid="false">
<authors>
<author>proc FCR</author>
</authors>
<note>RC) {</note>
<contexts>
<context position="1656" citStr="(1)" startWordPosition="233" endWordPosition="233">for clause formation but from a procedural component that interacts with the sentence generator and may block the overt expression of certain constituents. 1 Introduction Coordination and coordinative ellipsis are essential tools for the sentence aggregation component of any language generator. Very often, when the aggregator chooses to combine several clauses into a single coordinate structure, the need arises to eliminate unnatural reduplications of coreferential constituents. In the literature, one often distinguishes four major types of clause-level coordinative ellipsis: • Gapping (as in (1)), with a special variant called Long-Distance Gapping (LDG). In LDG, the second conjunct consists of constituents stemming from different clauses — in (2), the main clause and the complement. • Forward Conjunction Reduction (FCR; cf. (3) and the relative clause in (4)). • SGF (Subject Gap in clauses with Finite/ Fronted verb; as in (5), and • Backward Conjunction reduction (BCR, also termed Right Node Raising; see (6)). (1) Henk lives in Leiden and Chris livesg in Delft (2) My wife wants to buy a car, my son wantsg [to buy]gl a motorcycle. (3) My sister lives in Utrecht and [my sister]f works</context>
</contexts>
<marker>1</marker>
<rawString>proc FCR(LC, RC) {</rawString>
</citation>
<citation valid="false">
<note>while (FCRcontrol) {</note>
<contexts>
<context position="1811" citStr="(2)" startWordPosition="257" endWordPosition="257"> 1 Introduction Coordination and coordinative ellipsis are essential tools for the sentence aggregation component of any language generator. Very often, when the aggregator chooses to combine several clauses into a single coordinate structure, the need arises to eliminate unnatural reduplications of coreferential constituents. In the literature, one often distinguishes four major types of clause-level coordinative ellipsis: • Gapping (as in (1)), with a special variant called Long-Distance Gapping (LDG). In LDG, the second conjunct consists of constituents stemming from different clauses — in (2), the main clause and the complement. • Forward Conjunction Reduction (FCR; cf. (3) and the relative clause in (4)). • SGF (Subject Gap in clauses with Finite/ Fronted verb; as in (5), and • Backward Conjunction reduction (BCR, also termed Right Node Raising; see (6)). (1) Henk lives in Leiden and Chris livesg in Delft (2) My wife wants to buy a car, my son wantsg [to buy]gl a motorcycle. (3) My sister lives in Utrecht and [my sister]f works in Amsterdam (4)Amsterdam is the city [S where Jan lives and wheref Piet works] (5) Why did you leave but didn’t yous warn me? (6)Anne arrived before [thr</context>
</contexts>
<marker>2</marker>
<rawString>while (FCRcontrol) {</rawString>
</citation>
<citation valid="false">
<authors>
<author>set LSIB</author>
</authors>
<title>and RSIB to left-most daughter of LC and RC, resp.;</title>
<contexts>
<context position="1894" citStr="(3)" startWordPosition="270" endWordPosition="270">sentence aggregation component of any language generator. Very often, when the aggregator chooses to combine several clauses into a single coordinate structure, the need arises to eliminate unnatural reduplications of coreferential constituents. In the literature, one often distinguishes four major types of clause-level coordinative ellipsis: • Gapping (as in (1)), with a special variant called Long-Distance Gapping (LDG). In LDG, the second conjunct consists of constituents stemming from different clauses — in (2), the main clause and the complement. • Forward Conjunction Reduction (FCR; cf. (3) and the relative clause in (4)). • SGF (Subject Gap in clauses with Finite/ Fronted verb; as in (5), and • Backward Conjunction reduction (BCR, also termed Right Node Raising; see (6)). (1) Henk lives in Leiden and Chris livesg in Delft (2) My wife wants to buy a car, my son wantsg [to buy]gl a motorcycle. (3) My sister lives in Utrecht and [my sister]f works in Amsterdam (4)Amsterdam is the city [S where Jan lives and wheref Piet works] (5) Why did you leave but didn’t yous warn me? (6)Anne arrived before [three o’clock]b, and Susi left after three o’clock The subscripts denote the elliptica</context>
</contexts>
<marker>3</marker>
<rawString>set LSIB and RSIB to left-most daughter of LC and RC, resp.;</rawString>
</citation>
<citation valid="false">
<booktitle>if (LSIB and RSIB are not coreferential)</booktitle>
<contexts>
<context position="1925" citStr="(4)" startWordPosition="276" endWordPosition="276">of any language generator. Very often, when the aggregator chooses to combine several clauses into a single coordinate structure, the need arises to eliminate unnatural reduplications of coreferential constituents. In the literature, one often distinguishes four major types of clause-level coordinative ellipsis: • Gapping (as in (1)), with a special variant called Long-Distance Gapping (LDG). In LDG, the second conjunct consists of constituents stemming from different clauses — in (2), the main clause and the complement. • Forward Conjunction Reduction (FCR; cf. (3) and the relative clause in (4)). • SGF (Subject Gap in clauses with Finite/ Fronted verb; as in (5), and • Backward Conjunction reduction (BCR, also termed Right Node Raising; see (6)). (1) Henk lives in Leiden and Chris livesg in Delft (2) My wife wants to buy a car, my son wantsg [to buy]gl a motorcycle. (3) My sister lives in Utrecht and [my sister]f works in Amsterdam (4)Amsterdam is the city [S where Jan lives and wheref Piet works] (5) Why did you leave but didn’t yous warn me? (6)Anne arrived before [three o’clock]b, and Susi left after three o’clock The subscripts denote the elliptical mechanism at work: g=Gapping,</context>
</contexts>
<marker>4</marker>
<rawString>if (LSIB and RSIB are not coreferential)</rawString>
</citation>
<citation valid="false">
<note>then {FCRcontrol = FALSE;</note>
<contexts>
<context position="1994" citStr="(5)" startWordPosition="289" endWordPosition="289"> combine several clauses into a single coordinate structure, the need arises to eliminate unnatural reduplications of coreferential constituents. In the literature, one often distinguishes four major types of clause-level coordinative ellipsis: • Gapping (as in (1)), with a special variant called Long-Distance Gapping (LDG). In LDG, the second conjunct consists of constituents stemming from different clauses — in (2), the main clause and the complement. • Forward Conjunction Reduction (FCR; cf. (3) and the relative clause in (4)). • SGF (Subject Gap in clauses with Finite/ Fronted verb; as in (5), and • Backward Conjunction reduction (BCR, also termed Right Node Raising; see (6)). (1) Henk lives in Leiden and Chris livesg in Delft (2) My wife wants to buy a car, my son wantsg [to buy]gl a motorcycle. (3) My sister lives in Utrecht and [my sister]f works in Amsterdam (4)Amsterdam is the city [S where Jan lives and wheref Piet works] (5) Why did you leave but didn’t yous warn me? (6)Anne arrived before [three o’clock]b, and Susi left after three o’clock The subscripts denote the elliptical mechanism at work: g=Gapping, gl=LDG, f=FCR, s=SGF, b=BCR. We will not deal with VP Ellipsis and V</context>
</contexts>
<marker>5</marker>
<rawString>then {FCRcontrol = FALSE;</rawString>
</citation>
<citation valid="false">
<pages>return;}</pages>
<contexts>
<context position="2078" citStr="(6)" startWordPosition="302" endWordPosition="302">inate unnatural reduplications of coreferential constituents. In the literature, one often distinguishes four major types of clause-level coordinative ellipsis: • Gapping (as in (1)), with a special variant called Long-Distance Gapping (LDG). In LDG, the second conjunct consists of constituents stemming from different clauses — in (2), the main clause and the complement. • Forward Conjunction Reduction (FCR; cf. (3) and the relative clause in (4)). • SGF (Subject Gap in clauses with Finite/ Fronted verb; as in (5), and • Backward Conjunction reduction (BCR, also termed Right Node Raising; see (6)). (1) Henk lives in Leiden and Chris livesg in Delft (2) My wife wants to buy a car, my son wantsg [to buy]gl a motorcycle. (3) My sister lives in Utrecht and [my sister]f works in Amsterdam (4)Amsterdam is the city [S where Jan lives and wheref Piet works] (5) Why did you leave but didn’t yous warn me? (6)Anne arrived before [three o’clock]b, and Susi left after three o’clock The subscripts denote the elliptical mechanism at work: g=Gapping, gl=LDG, f=FCR, s=SGF, b=BCR. We will not deal with VP Ellipsis and VP Anaphora because they generate pro-forms rather than elisions and are not restrict</context>
</contexts>
<marker>6</marker>
<rawString>return;}</rawString>
</citation>
<citation valid="false">
<note>if (LSIB is an S-node)</note>
<contexts>
<context position="6609" citStr="(7)" startWordPosition="988" endWordPosition="988">Coordinative ellipsis is insensitive to the distinction between “strict” and “sloppy” (token- vs. type-)identity. erator output to a (simple) canonical form. 3 A sketch of the algorithm This sketch presupposes and-coordinations of only n=2 conjuncts. Actually, ELLEIPO handles and-coordinations with n&gt;2 conjuncts if, in every pair of conjuncts, the major constituents embody the same pattern of coreferences and contrasts. ELLEIPO takes as input a non-elliptical syntactic structure that should meet the following four canonical form criteria (see Fig. 1 for the input tree corresponding to example (7). (7) Susi hörte dass Hans einen Unfall hatte Susi heard that Hans an accident had und dassfHansfsterben könnte and that Hans die might ‘Susi heard that Hans had an accident and might die’ • Categorial (phrasal and lexical) nodes — bolded in Fig. 1 — carry reference tags (presumably propagated from the generator’s strategic component). E.g., the tag “7” is attached to the root and head nodes of both exemplars of NP Hans in Fig. 1, indicating their coreferentiality. For the sake of computational uniformity, we also attach reference tags to non-referring lexical elements. In such cases, the tags</context>
<context position="8538" citStr="(7)" startWordPosition="1298" endWordPosition="1298">junct, all functions are represented at the same hierarchical level. Hence, the trees are “flat,” as illustrated in Fig. 1, and similar to the trees in German treebanks (NEGRA-II, TIGER). ELLEIPO starts by demarcating “superclauses.” Kempen (subm.) introduced this notion in his treatment of Gapping and LDG. An S-node dominates a superclause iff it dominates the entire sentence or a clause beginning with a subordinating conjunction (CNJ). In Fig. 1, the strings dominated by S1, S5 and S12 are superFigure 1. Slightly simplified canonical form of the non-elliptical input tree underlying sentence (7). clauses. Note that S12 includes clause S13, which is not a superclause. Then, ELLEIPO checks all coordination domains for elision options, as follows: • Testing for forward ellipsis: Gapping (including LDG), FCR, or SGF. This involves inspecting (recursively for every S-node) the set of immediate constituents (grammatical functions) of the two conjuncts, and their reference tags. Complete constituents of the right-hand conjunct may get marked for elision, depending on the specific conditions listed in the Appendix. • Testing for BCR. ELLEIPO checks — wordby-word, going from right to left — t</context>
</contexts>
<marker>7</marker>
<rawString>if (LSIB is an S-node)</rawString>
</citation>
<citation valid="false">
<authors>
<author>then call FCR</author>
</authors>
<publisher>RSIB);</publisher>
<marker>8</marker>
<rawString>then call FCR(LSIB, RSIB);</rawString>
</citation>
<citation valid="false">
<title>call FCR(right neighbor of LSIB, right neighbor of RSIB);</title>
<contexts>
<context position="10417" citStr="(9)" startWordPosition="1605" endWordPosition="1605">d elliptical options on user request. Furthermore, auch ‘too’ is added in case of “Stripping,” i.e. when Gapping leaves only one constituent as remnant. Example (10) illustrates a combination of Gapping and BCR, with the three licensed elliptical output strings shown in (10c). In (11), Gapping combines with BCR in the subordinate clauses. The fact that here, in contrast with (10), the subordinate clauses do not start their own superclauses, now licenses LDG. However, ReadOut prevents LDG to combine with BCR, which would have yielded the unintended string Anne versucht Bücher und Susi Artikel. (9) a. Wir essen Äpfel und ihr esst Birnen ‘We eat apples and you(pl.) eat pears’ b.Wir essen Äpfel und ihr esstg Birnen c. Elliptical option: Wir essen Äpfel und ihr Birnen (10)a. Ich hoffe, dass Hans schläft und du hoffst, dass Peter schläft ‘I hope that Hans sleeps and you hope that Peter sleeps’ b. Ich hoffe dass Hans schläft, und du hoffstg dass Peter schläft c. Elliptical options: Gapping: Ich hoffe, dass Hans schläft und du, dass Peter schläft BCR: Ich hoffe, dass Hans und du hoffst, dass Peter schläft Gapping and BCR: Ich hoffe, dass Hans und du, dass Peter schläft (11)a.Anne versucht Büc</context>
</contexts>
<marker>9</marker>
<rawString>call FCR(right neighbor of LSIB, right neighbor of RSIB);</rawString>
</citation>
<citation valid="false">
<authors>
<author>mark RSIB</author>
</authors>
<title>for elision by adding “f”;</title>
<contexts>
<context position="9979" citStr="(10)" startWordPosition="1534" endWordPosition="1534"> been processed, a (possibly empty) subset of the terminal leaves of the input tree has been marked for elision. In the examples below, this is indicated by subscript marks. E.g., the subscript “g” attached to esst ‘eat’ in (9b) indicates that Gapping is allowed. ReadOut interprets the elision marks and, in ‘standard mode,’ produces the shortest elliptical string(s) as output (e.g. (9c)). In ‘demo mode,’ it shows individual and combined elliptical options on user request. Furthermore, auch ‘too’ is added in case of “Stripping,” i.e. when Gapping leaves only one constituent as remnant. Example (10) illustrates a combination of Gapping and BCR, with the three licensed elliptical output strings shown in (10c). In (11), Gapping combines with BCR in the subordinate clauses. The fact that here, in contrast with (10), the subordinate clauses do not start their own superclauses, now licenses LDG. However, ReadOut prevents LDG to combine with BCR, which would have yielded the unintended string Anne versucht Bücher und Susi Artikel. (9) a. Wir essen Äpfel und ihr esst Birnen ‘We eat apples and you(pl.) eat pears’ b.Wir essen Äpfel und ihr esstg Birnen c. Elliptical option: Wir essen Äpfel und ih</context>
</contexts>
<marker>10</marker>
<rawString>mark RSIB for elision by adding “f”;}}</rawString>
</citation>
<citation valid="false">
<authors>
<author>proc SGF</author>
</authors>
<note>RC) {</note>
<contexts>
<context position="1656" citStr="(1)" startWordPosition="233" endWordPosition="233">for clause formation but from a procedural component that interacts with the sentence generator and may block the overt expression of certain constituents. 1 Introduction Coordination and coordinative ellipsis are essential tools for the sentence aggregation component of any language generator. Very often, when the aggregator chooses to combine several clauses into a single coordinate structure, the need arises to eliminate unnatural reduplications of coreferential constituents. In the literature, one often distinguishes four major types of clause-level coordinative ellipsis: • Gapping (as in (1)), with a special variant called Long-Distance Gapping (LDG). In LDG, the second conjunct consists of constituents stemming from different clauses — in (2), the main clause and the complement. • Forward Conjunction Reduction (FCR; cf. (3) and the relative clause in (4)). • SGF (Subject Gap in clauses with Finite/ Fronted verb; as in (5), and • Backward Conjunction reduction (BCR, also termed Right Node Raising; see (6)). (1) Henk lives in Leiden and Chris livesg in Delft (2) My wife wants to buy a car, my son wantsg [to buy]gl a motorcycle. (3) My sister lives in Utrecht and [my sister]f works</context>
</contexts>
<marker>1</marker>
<rawString>proc SGF(LC, RC) {</rawString>
</citation>
<citation valid="false">
<booktitle>if (NOT(SUBJ is 1st daughter of LC)) &amp; (HEAD is 2nd daughter of LC) &amp; (SUBJ is 1st or 2nd daughter of RC) &amp; (HEAD is 1st or 2nd daughter of RC)</booktitle>
<contexts>
<context position="1811" citStr="(2)" startWordPosition="257" endWordPosition="257"> 1 Introduction Coordination and coordinative ellipsis are essential tools for the sentence aggregation component of any language generator. Very often, when the aggregator chooses to combine several clauses into a single coordinate structure, the need arises to eliminate unnatural reduplications of coreferential constituents. In the literature, one often distinguishes four major types of clause-level coordinative ellipsis: • Gapping (as in (1)), with a special variant called Long-Distance Gapping (LDG). In LDG, the second conjunct consists of constituents stemming from different clauses — in (2), the main clause and the complement. • Forward Conjunction Reduction (FCR; cf. (3) and the relative clause in (4)). • SGF (Subject Gap in clauses with Finite/ Fronted verb; as in (5), and • Backward Conjunction reduction (BCR, also termed Right Node Raising; see (6)). (1) Henk lives in Leiden and Chris livesg in Delft (2) My wife wants to buy a car, my son wantsg [to buy]gl a motorcycle. (3) My sister lives in Utrecht and [my sister]f works in Amsterdam (4)Amsterdam is the city [S where Jan lives and wheref Piet works] (5) Why did you leave but didn’t yous warn me? (6)Anne arrived before [thr</context>
</contexts>
<marker>2</marker>
<rawString>if (NOT(SUBJ is 1st daughter of LC)) &amp; (HEAD is 2nd daughter of LC) &amp; (SUBJ is 1st or 2nd daughter of RC) &amp; (HEAD is 1st or 2nd daughter of RC)</rawString>
</citation>
<citation valid="false">
<title>then mark RC’s SUBJ for elision, with “s”;</title>
<contexts>
<context position="1894" citStr="(3)" startWordPosition="270" endWordPosition="270">sentence aggregation component of any language generator. Very often, when the aggregator chooses to combine several clauses into a single coordinate structure, the need arises to eliminate unnatural reduplications of coreferential constituents. In the literature, one often distinguishes four major types of clause-level coordinative ellipsis: • Gapping (as in (1)), with a special variant called Long-Distance Gapping (LDG). In LDG, the second conjunct consists of constituents stemming from different clauses — in (2), the main clause and the complement. • Forward Conjunction Reduction (FCR; cf. (3) and the relative clause in (4)). • SGF (Subject Gap in clauses with Finite/ Fronted verb; as in (5), and • Backward Conjunction reduction (BCR, also termed Right Node Raising; see (6)). (1) Henk lives in Leiden and Chris livesg in Delft (2) My wife wants to buy a car, my son wantsg [to buy]gl a motorcycle. (3) My sister lives in Utrecht and [my sister]f works in Amsterdam (4)Amsterdam is the city [S where Jan lives and wheref Piet works] (5) Why did you leave but didn’t yous warn me? (6)Anne arrived before [three o’clock]b, and Susi left after three o’clock The subscripts denote the elliptica</context>
</contexts>
<marker>3</marker>
<rawString>then mark RC’s SUBJ for elision, with “s”;}</rawString>
</citation>
<citation valid="false">
<authors>
<author>proc BCR</author>
</authors>
<note>RC) {</note>
<contexts>
<context position="1656" citStr="(1)" startWordPosition="233" endWordPosition="233">for clause formation but from a procedural component that interacts with the sentence generator and may block the overt expression of certain constituents. 1 Introduction Coordination and coordinative ellipsis are essential tools for the sentence aggregation component of any language generator. Very often, when the aggregator chooses to combine several clauses into a single coordinate structure, the need arises to eliminate unnatural reduplications of coreferential constituents. In the literature, one often distinguishes four major types of clause-level coordinative ellipsis: • Gapping (as in (1)), with a special variant called Long-Distance Gapping (LDG). In LDG, the second conjunct consists of constituents stemming from different clauses — in (2), the main clause and the complement. • Forward Conjunction Reduction (FCR; cf. (3) and the relative clause in (4)). • SGF (Subject Gap in clauses with Finite/ Fronted verb; as in (5), and • Backward Conjunction reduction (BCR, also termed Right Node Raising; see (6)). (1) Henk lives in Leiden and Chris livesg in Delft (2) My wife wants to buy a car, my son wantsg [to buy]gl a motorcycle. (3) My sister lives in Utrecht and [my sister]f works</context>
</contexts>
<marker>1</marker>
<rawString>proc BCR(LC, RC) {</rawString>
</citation>
<citation valid="false">
<note>while (BCRcontrol) {</note>
<contexts>
<context position="1811" citStr="(2)" startWordPosition="257" endWordPosition="257"> 1 Introduction Coordination and coordinative ellipsis are essential tools for the sentence aggregation component of any language generator. Very often, when the aggregator chooses to combine several clauses into a single coordinate structure, the need arises to eliminate unnatural reduplications of coreferential constituents. In the literature, one often distinguishes four major types of clause-level coordinative ellipsis: • Gapping (as in (1)), with a special variant called Long-Distance Gapping (LDG). In LDG, the second conjunct consists of constituents stemming from different clauses — in (2), the main clause and the complement. • Forward Conjunction Reduction (FCR; cf. (3) and the relative clause in (4)). • SGF (Subject Gap in clauses with Finite/ Fronted verb; as in (5), and • Backward Conjunction reduction (BCR, also termed Right Node Raising; see (6)). (1) Henk lives in Leiden and Chris livesg in Delft (2) My wife wants to buy a car, my son wantsg [to buy]gl a motorcycle. (3) My sister lives in Utrecht and [my sister]f works in Amsterdam (4)Amsterdam is the city [S where Jan lives and wheref Piet works] (5) Why did you leave but didn’t yous warn me? (6)Anne arrived before [thr</context>
</contexts>
<marker>2</marker>
<rawString>while (BCRcontrol) {</rawString>
</citation>
<citation valid="false">
<authors>
<author>set LSIB</author>
</authors>
<title>and RSIB to right-most daughter node of LC and RC, respectively;</title>
<contexts>
<context position="1894" citStr="(3)" startWordPosition="270" endWordPosition="270">sentence aggregation component of any language generator. Very often, when the aggregator chooses to combine several clauses into a single coordinate structure, the need arises to eliminate unnatural reduplications of coreferential constituents. In the literature, one often distinguishes four major types of clause-level coordinative ellipsis: • Gapping (as in (1)), with a special variant called Long-Distance Gapping (LDG). In LDG, the second conjunct consists of constituents stemming from different clauses — in (2), the main clause and the complement. • Forward Conjunction Reduction (FCR; cf. (3) and the relative clause in (4)). • SGF (Subject Gap in clauses with Finite/ Fronted verb; as in (5), and • Backward Conjunction reduction (BCR, also termed Right Node Raising; see (6)). (1) Henk lives in Leiden and Chris livesg in Delft (2) My wife wants to buy a car, my son wantsg [to buy]gl a motorcycle. (3) My sister lives in Utrecht and [my sister]f works in Amsterdam (4)Amsterdam is the city [S where Jan lives and wheref Piet works] (5) Why did you leave but didn’t yous warn me? (6)Anne arrived before [three o’clock]b, and Susi left after three o’clock The subscripts denote the elliptica</context>
</contexts>
<marker>3</marker>
<rawString>set LSIB and RSIB to right-most daughter node of LC and RC, respectively;</rawString>
</citation>
<citation valid="false">
<booktitle>if (LSIB and RSIB are not coreferential)</booktitle>
<contexts>
<context position="1925" citStr="(4)" startWordPosition="276" endWordPosition="276">of any language generator. Very often, when the aggregator chooses to combine several clauses into a single coordinate structure, the need arises to eliminate unnatural reduplications of coreferential constituents. In the literature, one often distinguishes four major types of clause-level coordinative ellipsis: • Gapping (as in (1)), with a special variant called Long-Distance Gapping (LDG). In LDG, the second conjunct consists of constituents stemming from different clauses — in (2), the main clause and the complement. • Forward Conjunction Reduction (FCR; cf. (3) and the relative clause in (4)). • SGF (Subject Gap in clauses with Finite/ Fronted verb; as in (5), and • Backward Conjunction reduction (BCR, also termed Right Node Raising; see (6)). (1) Henk lives in Leiden and Chris livesg in Delft (2) My wife wants to buy a car, my son wantsg [to buy]gl a motorcycle. (3) My sister lives in Utrecht and [my sister]f works in Amsterdam (4)Amsterdam is the city [S where Jan lives and wheref Piet works] (5) Why did you leave but didn’t yous warn me? (6)Anne arrived before [three o’clock]b, and Susi left after three o’clock The subscripts denote the elliptical mechanism at work: g=Gapping,</context>
</contexts>
<marker>4</marker>
<rawString>if (LSIB and RSIB are not coreferential)</rawString>
</citation>
<citation valid="false">
<note>then {BCRcontrol = FALSE; return;};</note>
<contexts>
<context position="1994" citStr="(5)" startWordPosition="289" endWordPosition="289"> combine several clauses into a single coordinate structure, the need arises to eliminate unnatural reduplications of coreferential constituents. In the literature, one often distinguishes four major types of clause-level coordinative ellipsis: • Gapping (as in (1)), with a special variant called Long-Distance Gapping (LDG). In LDG, the second conjunct consists of constituents stemming from different clauses — in (2), the main clause and the complement. • Forward Conjunction Reduction (FCR; cf. (3) and the relative clause in (4)). • SGF (Subject Gap in clauses with Finite/ Fronted verb; as in (5), and • Backward Conjunction reduction (BCR, also termed Right Node Raising; see (6)). (1) Henk lives in Leiden and Chris livesg in Delft (2) My wife wants to buy a car, my son wantsg [to buy]gl a motorcycle. (3) My sister lives in Utrecht and [my sister]f works in Amsterdam (4)Amsterdam is the city [S where Jan lives and wheref Piet works] (5) Why did you leave but didn’t yous warn me? (6)Anne arrived before [three o’clock]b, and Susi left after three o’clock The subscripts denote the elliptical mechanism at work: g=Gapping, gl=LDG, f=FCR, s=SGF, b=BCR. We will not deal with VP Ellipsis and V</context>
</contexts>
<marker>5</marker>
<rawString>then {BCRcontrol = FALSE; return;};</rawString>
</citation>
<citation valid="false">
<authors>
<author>call BCR</author>
</authors>
<publisher>RSIB);</publisher>
<contexts>
<context position="2078" citStr="(6)" startWordPosition="302" endWordPosition="302">inate unnatural reduplications of coreferential constituents. In the literature, one often distinguishes four major types of clause-level coordinative ellipsis: • Gapping (as in (1)), with a special variant called Long-Distance Gapping (LDG). In LDG, the second conjunct consists of constituents stemming from different clauses — in (2), the main clause and the complement. • Forward Conjunction Reduction (FCR; cf. (3) and the relative clause in (4)). • SGF (Subject Gap in clauses with Finite/ Fronted verb; as in (5), and • Backward Conjunction reduction (BCR, also termed Right Node Raising; see (6)). (1) Henk lives in Leiden and Chris livesg in Delft (2) My wife wants to buy a car, my son wantsg [to buy]gl a motorcycle. (3) My sister lives in Utrecht and [my sister]f works in Amsterdam (4)Amsterdam is the city [S where Jan lives and wheref Piet works] (5) Why did you leave but didn’t yous warn me? (6)Anne arrived before [three o’clock]b, and Susi left after three o’clock The subscripts denote the elliptical mechanism at work: g=Gapping, gl=LDG, f=FCR, s=SGF, b=BCR. We will not deal with VP Ellipsis and VP Anaphora because they generate pro-forms rather than elisions and are not restrict</context>
</contexts>
<marker>6</marker>
<rawString>call BCR(LSIB, RSIB);</rawString>
</citation>
<citation valid="false">
<title>call BCR(left neighbor of LSIB, left neighbor of RSIB);</title>
<contexts>
<context position="6609" citStr="(7)" startWordPosition="988" endWordPosition="988">Coordinative ellipsis is insensitive to the distinction between “strict” and “sloppy” (token- vs. type-)identity. erator output to a (simple) canonical form. 3 A sketch of the algorithm This sketch presupposes and-coordinations of only n=2 conjuncts. Actually, ELLEIPO handles and-coordinations with n&gt;2 conjuncts if, in every pair of conjuncts, the major constituents embody the same pattern of coreferences and contrasts. ELLEIPO takes as input a non-elliptical syntactic structure that should meet the following four canonical form criteria (see Fig. 1 for the input tree corresponding to example (7). (7) Susi hörte dass Hans einen Unfall hatte Susi heard that Hans an accident had und dassfHansfsterben könnte and that Hans die might ‘Susi heard that Hans had an accident and might die’ • Categorial (phrasal and lexical) nodes — bolded in Fig. 1 — carry reference tags (presumably propagated from the generator’s strategic component). E.g., the tag “7” is attached to the root and head nodes of both exemplars of NP Hans in Fig. 1, indicating their coreferentiality. For the sake of computational uniformity, we also attach reference tags to non-referring lexical elements. In such cases, the tags</context>
<context position="8538" citStr="(7)" startWordPosition="1298" endWordPosition="1298">junct, all functions are represented at the same hierarchical level. Hence, the trees are “flat,” as illustrated in Fig. 1, and similar to the trees in German treebanks (NEGRA-II, TIGER). ELLEIPO starts by demarcating “superclauses.” Kempen (subm.) introduced this notion in his treatment of Gapping and LDG. An S-node dominates a superclause iff it dominates the entire sentence or a clause beginning with a subordinating conjunction (CNJ). In Fig. 1, the strings dominated by S1, S5 and S12 are superFigure 1. Slightly simplified canonical form of the non-elliptical input tree underlying sentence (7). clauses. Note that S12 includes clause S13, which is not a superclause. Then, ELLEIPO checks all coordination domains for elision options, as follows: • Testing for forward ellipsis: Gapping (including LDG), FCR, or SGF. This involves inspecting (recursively for every S-node) the set of immediate constituents (grammatical functions) of the two conjuncts, and their reference tags. Complete constituents of the right-hand conjunct may get marked for elision, depending on the specific conditions listed in the Appendix. • Testing for BCR. ELLEIPO checks — wordby-word, going from right to left — t</context>
</contexts>
<marker>7</marker>
<rawString>call BCR(left neighbor of LSIB, left neighbor of RSIB);</rawString>
</citation>
<citation valid="false">
<title>if (RSIB is a terminal node)</title>
<marker>8</marker>
<rawString>if (RSIB is a terminal node)</rawString>
</citation>
<citation valid="false">
<authors>
<author>then mark</author>
</authors>
<title>LSIB for elision, with “b”;</title>
<contexts>
<context position="10417" citStr="(9)" startWordPosition="1605" endWordPosition="1605">d elliptical options on user request. Furthermore, auch ‘too’ is added in case of “Stripping,” i.e. when Gapping leaves only one constituent as remnant. Example (10) illustrates a combination of Gapping and BCR, with the three licensed elliptical output strings shown in (10c). In (11), Gapping combines with BCR in the subordinate clauses. The fact that here, in contrast with (10), the subordinate clauses do not start their own superclauses, now licenses LDG. However, ReadOut prevents LDG to combine with BCR, which would have yielded the unintended string Anne versucht Bücher und Susi Artikel. (9) a. Wir essen Äpfel und ihr esst Birnen ‘We eat apples and you(pl.) eat pears’ b.Wir essen Äpfel und ihr esstg Birnen c. Elliptical option: Wir essen Äpfel und ihr Birnen (10)a. Ich hoffe, dass Hans schläft und du hoffst, dass Peter schläft ‘I hope that Hans sleeps and you hope that Peter sleeps’ b. Ich hoffe dass Hans schläft, und du hoffstg dass Peter schläft c. Elliptical options: Gapping: Ich hoffe, dass Hans schläft und du, dass Peter schläft BCR: Ich hoffe, dass Hans und du hoffst, dass Peter schläft Gapping and BCR: Ich hoffe, dass Hans und du, dass Peter schläft (11)a.Anne versucht Büc</context>
</contexts>
<marker>9</marker>
<rawString>then mark LSIB for elision, with “b”;}}</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>