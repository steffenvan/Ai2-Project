<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000020">
<title confidence="0.999671">
A Probabilistic Approach to Syntax-based Reordering
for Statistical Machine Translation
</title>
<author confidence="0.998904">
Chi-Ho Li, Dongdong Zhang, Mu Li, Ming Zhou Minghui Li, Yi Guan
</author>
<affiliation confidence="0.998581">
Microsoft Research Asia Harbin Institute of Technology
</affiliation>
<address confidence="0.712621">
Beijing, China Harbin, China
</address>
<email confidence="0.9873595">
chl, dozhang@microsoft.com mhli@insun.hit.edu.cn
muli, mingzhou@microsoft.com guanyi@insun.hit.edu.cn
</email>
<sectionHeader confidence="0.998545" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999815615384615">
Inspired by previous preprocessing ap-
proaches to SMT, this paper proposes a
novel, probabilistic approach to reordering
which combines the merits of syntax and
phrase-based SMT. Given a source sentence
and its parse tree, our method generates,
by tree operations, an n-best list of re-
ordered inputs, which are then fed to stan-
dard phrase-based decoder to produce the
optimal translation. Experiments show that,
for the NIST MT-05 task of Chinese-to-
English translation, the proposal leads to
BLEU improvement of 1.56%.
</bodyText>
<sectionHeader confidence="0.999517" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.9999510625">
The phrase-based approach has been considered the
default strategy to Statistical Machine Translation
(SMT) in recent years. It is widely known that the
phrase-based approach is powerful in local lexical
choice and word reordering within short distance.
However, long-distance reordering is problematic
in phrase-based SMT. For example, the distance-
based reordering model (Koehn et al., 2003) al-
lows a decoder to translate in non-monotonous or-
der, under the constraint that the distance between
two phrases translated consecutively does not ex-
ceed a limit known as distortion limit. In theory the
distortion limit can be assigned a very large value
so that all possible reorderings are allowed, yet in
practise it is observed that too high a distortion limit
not only harms efficiency but also translation per-
formance (Koehn et al., 2005). In our own exper-
iment setting, the best distortion limit for Chinese-
English translation is 4. However, some ideal trans-
lations exhibit reorderings longer than such distor-
tion limit. Consider the sentence pair in NIST MT-
2005 test set shown in figure 1(a): after translating
the word “•V/mend”, the decoder should ‘jump’
across six words and translate the last phrase “)�
,* R /fissures in the relationship”. Therefore,
while short-distance reordering is under the scope
of the distance-based model, long-distance reorder-
ing is simply out of the question.
A terminological remark: In the rest of the paper,
we will use the terms global reordering and local
reordering in place of long-distance reordering and
short-distance reordering respectively. The distinc-
tion between long and short distance reordering is
solely defined by distortion limit.
Syntax1 is certainly a potential solution to global
reordering. For example, for the last two Chinese
phrases in figure 1(a), simply swapping the two chil-
dren of the NP node will produce the correct word
order on the English side. However, there are also
reorderings which do not agree with syntactic anal-
ysis. Figure 1(b) shows how our phrase-based de-
coder2 obtains a good English translation by reorder-
ing two blocks. It should be noted that the second
Chinese block “R#, HI” and its English counterpart
“at the end of” are not constituents at all.
In this paper, our interest is the value of syntax in
reordering, and the major statement is that syntactic
information is useful in handling global reordering
</bodyText>
<footnote confidence="0.999116">
1Here by syntax it is meant linguistic syntax rather than for-
mal syntax.
2The decoder is introduced in section 6.
</footnote>
<page confidence="0.869107">
720
</page>
<note confidence="0.960347">
Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics, pages 720–727,
Prague, Czech Republic, June 2007. c�2007 Association for Computational Linguistics
</note>
<figureCaption confidence="0.999773">
Figure 1: Examples on how syntax (a) helps and (b) harms reordering in Chinese-to-English translation
</figureCaption>
<bodyText confidence="0.999763666666667">
The lines and nodes on the top half of the figures show the phrase structure of the Chinese sentences, while the links on the bottom
half of the figures show the alignments between Chinese and English phrases. Square brackets indicate the boundaries of blocks
found by our decoder.
and it achieves better MT performance on the ba-
sis of the standard phrase-based model. To prove it,
we developed a hybrid approach which preserves the
strength of phrase-based SMT in local reordering as
well as the strength of syntax in global reordering.
Our method is inspired by previous preprocessing
approaches like (Xia and McCord, 2004), (Collins
et al., 2005), and (Costa-juss`a and Fonollosa, 2006),
which split translation into two stages:
</bodyText>
<equation confidence="0.807688">
S → S&apos; → T (1)
</equation>
<bodyText confidence="0.999943">
where a sentence of the source language (SL), S,
is first reordered with respect to the word order of
the target language (TL), and then the reordered SL
sentence S&apos; is translated as a TL sentence T by
monotonous translation.
Our first contribution is a new translation model
as represented by formula 2:
</bodyText>
<equation confidence="0.905323">
S → n × S&apos; → n × T → T� (2)
</equation>
<bodyText confidence="0.999949">
where an n-best list of S&apos;, instead of only one S&apos;, is
generated. The reason of such change will be given
in section 2. Note also that the translation process
S&apos;→T is not monotonous, since the distance-based
model is needed for local reordering. Our second
contribution is our definition of the best translation:
</bodyText>
<equation confidence="0.820841666666667">
arg max
T exp(�rlogPr(S →S&apos;)+ �
i AiFi(S&apos;→T))
</equation>
<bodyText confidence="0.999993666666667">
where Fi are the features in the standard phrase-
based model and Pr(S → S&apos;) is our new feature,
viz. the probability of reordering S as S&apos;. The de-
tails of this model are elaborated in sections 3 to 6.
The settings and results of experiments on this new
model are given in section 7.
</bodyText>
<sectionHeader confidence="0.999893" genericHeader="introduction">
2 Related Work
</sectionHeader>
<bodyText confidence="0.99893255">
There have been various attempts to syntax-
based SMT, such as (Yamada and Knight, 2001)
and (Quirk et al., 2005). We do not adopt these
models since a lot of subtle issues would then be in-
troduced due to the complexity of syntax-based de-
coder, and the impact of syntax on reordering will
be difficult to single out.
There have been many reordering strategies un-
der the phrase-based camp. A notable approach is
lexicalized reordering (Koehn et al., 2005) and (Till-
mann, 2004). It should be noted that this approach
achieves the best result within certain distortion limit
and is therefore not a good model for global reorder-
ing.
There are a few attempts to the preprocessing
approach to reordering. The most notable ones
are (Xia and McCord, 2004) and (Collins et al.,
2005), both of which make use of linguistic syntax
in the preprocessing stage. (Collins et al., 2005) an-
alyze German clause structure and propose six types
</bodyText>
<page confidence="0.995637">
721
</page>
<bodyText confidence="0.99983925">
of rules for transforming German parse trees with
respect to English word order. Instead of relying
on manual rules, (Xia and McCord, 2004) propose
a method in learning patterns of rewriting SL sen-
tences. This method parses training data and uses
some heuristics to align SL phrases with TL ones.
From such alignment it can extract rewriting pat-
terns, of which the units are words and POSs. The
learned rewriting rules are then applied to rewrite SL
sentences before monotonous translation.
Despite the encouraging results reported in these
papers, the two attempts share the same shortcoming
that their reordering is deterministic. As pointed out
in (Al-Onaizan and Papineni, 2006), these strategies
make hard decisions in reordering which cannot be
undone during decoding. That is, the choice of re-
ordering is independent from other translation fac-
tors, and once a reordering mistake is made, it can-
not be corrected by the subsequent decoding.
To overcome this weakness, we suggest a method
to ‘soften’ the hard decisions in preprocessing. The
essence is that our preprocessing module generates
n-best S&apos;s rather than merely one S&apos;. A variety of
reordered SL sentences are fed to the decoder so
that the decoder can consider, to certain extent, the
interaction between reordering and other factors of
translation. The entire process can be depicted by
formula 2, recapitulated as follows:
</bodyText>
<equation confidence="0.880134">
S —* n x S&apos; —* n x T —* T�.
</equation>
<bodyText confidence="0.999971166666667">
Apart from their deterministic nature, the two
previous preprocessing approaches have their own
weaknesses. (Collins et al., 2005) count on man-
ual rules and it is suspicious if reordering rules for
other language pairs can be easily made. (Xia and
McCord, 2004) propose a way to learn rewriting
patterns, nevertheless the units of such patterns are
words and their POSs. Although there is no limit to
the length of rewriting patterns, due to data sparse-
ness most patterns being applied would be short
ones. Many instances of global reordering are there-
fore left unhandled.
</bodyText>
<sectionHeader confidence="0.987609" genericHeader="method">
3 The Acquisition of Reordering
Knowledge
</sectionHeader>
<bodyText confidence="0.997224733333333">
To avoid this problem, we give up using rewriting
patterns and design a form of reordering knowledge
which can be directly applied to parse tree nodes.
Given a node N on the parse tree of an SL sentence,
the required reordering knowledge should enable the
preprocessing module to determine how probable
the children of N are reordered.3 For simplicity, let
us first consider the case of binary nodes only. Let
N1 and N2, which yield phrases p1 and p2 respec-
tively, be the child nodes of N. We want to deter-
mine the order of p1 and p2 with respect to their TL
counterparts, T (p1) and T (p2). The knowledge for
making such a decision can be learned from a word-
aligned parallel corpus. There are two questions in-
volved in obtaining training instances:
</bodyText>
<listItem confidence="0.9999255">
• How to define T(pi)?
• How to define the order of T (pi)s?
</listItem>
<bodyText confidence="0.999796857142857">
For the first question, we adopt a similar method
as in (Fox, 2002): given an SL phrase ps =
s1 ... si ... sn and a word alignment matrix A, we
can enumerate the set of TL words {ti : ticA(si)},
and then arrange the words in the order as they ap-
pear in the TL sentence. Let first(t) be the first word
in this sorted set and last(t) be the last word. T(ps)
is defined as the phrase first(t) ... last(t) in the TL
sentence. Note that T (ps) may contain words not in
the set {ti}.
The question of the order of two TL phrases is not
a trivial one. Since a word alignment matrix usu-
ally contains a lot of noises as well as one-to-many
and many-to-many alignments, two TL phrases may
overlap with each other. For the sake of the quality
of reordering knowledge, if T (p1) and T(p2) over-
lap, then the node N with children N1 and N2 is
not taken as a training instance. Obviously it will
greatly reduce the amount of training input. To rem-
edy data sparseness, less probable alignment points
are removed so as to minimize overlapping phrases,
since, after removing some alignment point, one of
the TL phrases may become shorter and the two
phrases may no longer overlap. The implementation
is similar to the idea of lexical weight in (Koehn et
al., 2003): all points in the alignment matrices of the
entire training corpus are collected to calculate the
probabilistic distribution, P(t|s), of some TL word
</bodyText>
<footnote confidence="0.900284">
3Some readers may prefer the expression the subtree rooted
at node N to node N. The latter term is used in this paper for
simplicity.
</footnote>
<page confidence="0.9934">
722
</page>
<bodyText confidence="0.999869214285715">
t given some SL word s. Any pair of overlapping
T (pi)s will be redefined by iteratively removing less
probable word alignments until they no longer over-
lap. If they still overlap after all one/many-to-many
alignments have been removed, then the refinement
will stop and N, which covers pis, is no longer taken
as a training instance.
In sum, given a bilingual training corpus, a parser
for the SL, and a word alignment tool, we can collect
all binary parse tree nodes, each of which may be an
instance of the required reordering knowledge. The
next question is what kind of reordering knowledge
can be formed out of these training instances. Two
forms of reordering knowledge are investigated:
</bodyText>
<listItem confidence="0.8301585">
1. Reordering Rules, which have the form
(
</listItem>
<equation confidence="0.999537">
X Y Pr(IN-ORDER)
Z : X Y
Y X Pr(INVERTED)
</equation>
<bodyText confidence="0.9609631875">
where Z is the phrase label of a binary node
and X and Y are the phrase labels of Z’s chil-
dren, and Pr(INVERTED) and Pr(IN-ORDER)
are the probability that X and Y are inverted on
TL side and that not inverted, respectively. The
probability figures are estimated by Maximum
Likelihood Estimation.
2. Maximum Entropy (ME) Model, which does
the binary classification whether a binary
node’s children are inverted or not, based on a
set of features over the SL phrases correspond-
ing to the two children nodes. The features that
we investigated include the leftmost, rightmost,
head, and context words4, and their POSs, of
the SL phrases, as well as the phrase labels of
the SL phrases and their parent.
</bodyText>
<sectionHeader confidence="0.993812" genericHeader="method">
4 The Application of Reordering
Knowledge
</sectionHeader>
<bodyText confidence="0.911414315789474">
After learning reordering knowledge, the prepro-
cessing module can apply it to the parse tree, tS,
of an SL sentence S and obtain the n-best list of
S&apos;. Since a ranking of S&apos; is needed, we need some
way to score each S&apos;. Here probability is used as
the scoring metric. In this section it is explained
4The context words of the SL phrases are the word to the left
of the left phrase and the word to the right of the right phrase.
how the n-best reorderings of S and their associated
scores/probabilites are computed.
Let us first look into the scoring of a particular
reordering. Let Pr(p —* p&apos;) be the probability of re-
ordering a phrase p into p&apos;. For a phrase q yielded by
a non-binary node, there is only one ‘reordering’ of
q, viz. q itself, thus Pr(q —*q) = 1. For a phrase p
yielded by a binary node N, whose left child N1 has
reorderings pi1 and right child N2 has the reorder-
ings p�2 (1 G i, j G n), p&apos; has the form pi1pe or p�2pi1.
Therefore, Pr(p—*p&apos;) =
</bodyText>
<equation confidence="0.989712">
Pr(IN-ORDER) x Pr(pi1 —*pi) x Pr(p�2 —*p2�)
( Pr(INVERTED) x Pr(p2 —*p��
2 ) x Pr(pi1 —*pi�1 )
</equation>
<bodyText confidence="0.997943428571428">
The figures Pr(IN-ORDER) and Pr(INVERTED) are
obtained from the learned reordering knowledge. If
reordering knowledge is represented as rules, then
the required probability is the probability associated
with the rule that can apply to N. If reordering
knowledge is represented as an ME model, then the
required probability is:
</bodyText>
<equation confidence="0.955479">
P(r|N) = e ep pEZifi(((&apos;r))
Pr Ai N, r&apos;))
</equation>
<bodyText confidence="0.9993396">
where r2lIN-ORDER, INVERTED}, and fi’s are fea-
tures used in the ME model.
Let us turn to the computation of the n-best re-
ordering list. Let R(N) be the number of reorder-
ings of the phrase yielded by N, then:
</bodyText>
<equation confidence="0.9500225">
(
2R(N1)R(N2) if N has children N1, N2
R(N) =
1 otherwise
</equation>
<bodyText confidence="0.999596181818182">
It is easily seen that the number of S&apos;s increases ex-
ponentially. Fortunately, what we need is merely an
n-best list rather than a full list of reorderings. Start-
ing from the leaves of tS, for each node N covering
phrase p, we only keep track of the n p&apos;s that have
the highest reordering probability. Thus R(N) G n.
There are at most 2n2 reorderings for any node and
only the top-scored n reorderings are recorded. The
n-best reorderings of S, i.e. the n-best reorderings
of the yield of the root node of tS, can be obtained
by this efficient bottom-up method.
</bodyText>
<sectionHeader confidence="0.9961345" genericHeader="method">
5 The Generalization of Reordering
Knowledge
</sectionHeader>
<bodyText confidence="0.999194">
In the last two sections reordering knowledge is
learned from and applied to binary parse tree nodes
</bodyText>
<page confidence="0.993265">
723
</page>
<bodyText confidence="0.999860533333333">
only. It is not difficult to generalize the theory of
reordering knowledge to nodes of other branching
factors. The case of binary nodes is simple as there
are only two possible reorderings. The case of 3-ary
nodes is a bit more complicated as there are six.5 In
general, an n-ary node has n! possible reorderings
of its children. The maximum entropy model has the
same form as in the binary case, except that there are
more classes of reordering patterns as n increases.
The form of reordering rules, and the calculation of
reordering probability for a particular node, can also
be generalized easily.6 The only problem for the
generalized reordering knowledge is that, as there
are more classes, data sparseness becomes more se-
vere.
</bodyText>
<sectionHeader confidence="0.993008" genericHeader="method">
6 The Decoder
</sectionHeader>
<bodyText confidence="0.998711666666667">
The last three sections explain how the S —*nxS&apos;
part of formula 2 is done. The S&apos;—*T
part is simply done by our re-implementation
of PHARAOH (Koehn, 2004). Note that non-
monotonous translation is used here since the
distance-based model is needed for local reordering.
For the nxT —* T� part, the factors in consideration
include the score of T returned by the decoder, and
the reordering probability Pr(S —* S&apos;). In order
to conform to the log-linear model used in the de-
coder, we integrate the two factors by defining the
total score of T as formula 3:
</bodyText>
<equation confidence="0.9797645">
exp(Ar logPr(S �S&apos;) + � AiFi(S&apos;,T)) (3)
i
</equation>
<bodyText confidence="0.9440859">
The first term corresponds to the contribution of
syntax-based reordering, while the second term that
of the features Fi used in the decoder. All the fea-
ture weights (As) were trained using our implemen-
tation of Minimum Error Rate Training (Och, 2003).
The final translation T� is the T with the highest total
score.
5Namely, N1N2N3, N1N3N2, N2N1N3, N2N3N1,
N3N1N2, and N3N2N1, if the child nodes in the original order
are N1, N2, and N3.
</bodyText>
<footnote confidence="0.9662955">
6For example, the reordering probability of a phrase p =
p1p2p3 generated by a 3-ary node N is
</footnote>
<equation confidence="0.311918">
Pr(r)xPr(pl)xPr(pj2)xPr(p�3)
</equation>
<bodyText confidence="0.988846444444444">
where r is one of the six reordering patterns for 3-ary nodes.
It is observed in pilot experiments that, for a lot of
long sentences containing several clauses, only one
of the clauses is reordered. That is, our greedy re-
ordering algorithm (c.f. section 4) has a tendency to
focus only on a particular clause of a long sentence.
The problem was remedied by modifying our de-
coder such that it no longer translates a sentence at
once; instead the new decoder does:
</bodyText>
<listItem confidence="0.885121555555555">
1. split an input sentence S into clauses {Ci};
2. obtain the reorderings among {Ci}, {Sj};
3. for each Sj, do
(a) for each clause Ci in Sj, do
i. reorder Ci into n-best C0is,
ii. translate each C0 i into T (C0i),
iii. select T� (C0i);
(b) concatenate { T� (C0i)} into Tj;
4. select Tj.
</listItem>
<bodyText confidence="0.989753142857143">
Step 1 is done by checking the parse tree if there
are any IP or CP nodes7 immediately under the root
node. If yes, then all these IPs, CPs, and the remain-
ing segments are treated as clauses. If no, then the
entire input is treated as one single clause. Step 2
and step 3(a)(i) still follow the algorithm in sec-
tion 4. Step 3(a)(ii) is trivial, but there is a subtle
point about the calculation of language model score:
the language model score of a translated clause is not
independent from other clauses; it should take into
account the last few words of the previous translated
clause. The best translated clause T� (C0i) is selected
in step 3(a)(iii) by equation 3. In step 4 the best
translation Tj is
</bodyText>
<equation confidence="0.963689666666667">
arg max
Tj exp(ArlogPr(S �Sj)+ �
i score(T(C0i))).
</equation>
<sectionHeader confidence="0.999374" genericHeader="evaluation">
7 Experiments
</sectionHeader>
<subsectionHeader confidence="0.96365">
7.1 Corpora
</subsectionHeader>
<bodyText confidence="0.99996175">
Our experiments are about Chinese-to-English
translation. The NIST MT-2005 test data set is used
for evaluation. (Case-sensitive) BLEU-4 (Papineni
et al., 2002) is used as the evaluation metric. The
</bodyText>
<footnote confidence="0.78753">
7IP stands for inflectional phrase and CP for complementizer
phrase. These two types of phrases are clauses in terms of the
Government and Binding Theory.
</footnote>
<page confidence="0.991761">
724
</page>
<table confidence="0.999218666666667">
Branching Factor 2 3 &gt;3
Count 12294 3173 1280
Percentage 73.41 18.95 7.64
</table>
<tableCaption confidence="0.763638">
Table 1: Distribution of Parse Tree Nodes with Dif-
ferent Branching Factors Note that nodes with only one
child are excluded from the survey as reordering does not apply
to such nodes.
</tableCaption>
<bodyText confidence="0.999875">
test set and development set of NIST MT-2002 are
merged to form our development set. The training
data for both reordering knowledge and translation
table is the one for NIST MT-2005. The GIGA-
WORD corpus is used for training language model.
The Chinese side of all corpora are segmented into
words by our implementation of (Gao et al., 2003).
</bodyText>
<subsectionHeader confidence="0.994744">
7.2 The Preprocessing Module
</subsectionHeader>
<bodyText confidence="0.99998925">
As mentioned in section 3, the preprocessing mod-
ule for reordering needs a parser of the SL, a word
alignment tool, and a Maximum Entropy training
tool. We use the Stanford parser (Klein and Man-
ning, 2003) with its default Chinese grammar, the
GIZA++ (Och and Ney, 2000) alignment package
with its default settings, and the ME tool developed
by (Zhang, 2004).
Section 5 mentions that our reordering model can
apply to nodes of any branching factor. It is inter-
esting to know how many branching factors should
be included. The distribution of parse tree nodes
as shown in table 1 is based on the result of pars-
ing the Chinese side of NIST MT-2002 test set by
the Stanford parser. It is easily seen that the major-
ity of parse tree nodes are binary ones. Nodes with
more than 3 children seem to be negligible. The 3-
ary nodes occupy a certain proportion of the distri-
bution, and their impact on translation performance
will be shown in our experiments.
</bodyText>
<subsectionHeader confidence="0.998736">
7.3 The decoder
</subsectionHeader>
<bodyText confidence="0.998245428571429">
The data needed by our Pharaoh-like decoder are
translation table and language model. Our 5-gram
language model is trained by the SRI language mod-
eling toolkit (Stolcke, 2002). The translation table
is obtained as described in (Koehn et al., 2003), i.e.
the alignment tool GIZA++ is run over the training
data in both translation directions, and the two align-
</bodyText>
<table confidence="0.981388333333333">
Test Setting BLEU
B1 standard phrase-based SMT 29.22
B2 (B1) + clause splitting 29.13
</table>
<tableCaption confidence="0.882323">
Table 2: Experiment Baseline
</tableCaption>
<table confidence="0.99762975">
Test Setting BLEU BLEU
2-ary 2,3-ary
1 rule 29.77 30.31
2 ME (phrase label) 29.93 30.49
3 ME (left,right) 30.10 30.53
4 ME ((3)+head) 30.24 30.71
5 ME ((3)+phrase label) 30.12 30.30
6 ME ((4)+context) 30.24 30.76
</table>
<tableCaption confidence="0.6977092">
Table 3: Tests on Various Reordering Models
The 3rd column comprises the BLEU scores obtained by re-
ordering binary nodes only, the 4th column the scores by re-
ordering both binary and 3-ary nodes. The features used in the
ME models are explained in section 3.
</tableCaption>
<bodyText confidence="0.999754888888889">
ment matrices are integrated by the GROW-DIAG-
FINAL method into one matrix, from which phrase
translation probabilities and lexical weights of both
directions are obtained.
The most important system parameter is, of
course, distortion limit. Pilot experiments using the
standard phrase-based model show that the optimal
distortion limit is 4, which was therefore selected for
all our experiments.
</bodyText>
<subsectionHeader confidence="0.999733">
7.4 Experiment Results and Analysis
</subsectionHeader>
<bodyText confidence="0.999922">
The baseline of our experiments is the standard
phrase-based model, which achieves, as shown by
table 2, the BLEU score of 29.22. From the same
table we can also see that the clause splitting mech-
anism introduced in section 6 does not significantly
affect translation performance.
Two sets of experiments were run. The first set,
of which the results are shown in table 3, tests the
effect of different forms of reordering knowledge.
In all these tests only the top 10 reorderings of
each clause are generated. The contrast between
tests 1 and 2 shows that ME modeling of reordering
outperforms reordering rules. Tests 3 and 4 show
that phrase labels can achieve as good performance
as the lexical features of mere leftmost and right-
most words. However, when more lexical features
</bodyText>
<page confidence="0.99341">
725
</page>
<table confidence="0.998359">
Input *t 20054-l&apos; � 11J 4M Ihn 3�t � #, N* fn &amp;tom 2 Mffi ika RNT
Reference Hainan province will continue to increase its investment in the public services and
social services infrastructures in 2005
Baseline Hainan Province in 2005 will continue to increase for the public service and social
infrastructure investment
Translation with Hainan Province in 2005 will continue to increase investment in public services
Preprocessing and social infrastructure
</table>
<tableCaption confidence="0.985329">
Table 4: Translation Example 1
</tableCaption>
<table confidence="0.909166">
Test Setting BLEU
a length constraint 30.52
b DL=0 30.48
c n=100 30.78
</table>
<tableCaption confidence="0.998305">
Table 5: Tests on Various Constraints
</tableCaption>
<bodyText confidence="0.99998693442623">
are added (tests 4 and 6), phrase labels can no longer
compete with lexical features. Surprisingly, test 5
shows that the combination of phrase labels and lex-
ical features is even worse than using either phrase
labels or lexical features only.
Apart from quantitative evaluation, let us con-
sider the translation example of test 6 shown in ta-
ble 4. To generate the correct translation, a phrase-
based decoder should, after translating the word
“Ihn” as “increase”, jump to the last word “R
13T(investment)”. This is obviously out of the capa-
bility of the baseline model, and our approach can
accomplish the desired reordering as expected.
By and large, the experiment results show that no
matter what kind of reordering knowledge is used,
the preprocessing of syntax-based reordering does
greatly improve translation performance, and that
the reordering of 3-ary nodes is crucial.
The second set of experiments test the effect of
some constraints. The basic setting is the same as
that of test 6 in the first experiment set, and reorder-
ing is applied to both binary and 3-ary nodes. The
results are shown in table 5.
In test (a), the constraint is that the module does
not consider any reordering of a node if the yield
of this node contains not more than four words.
The underlying rationale is that reordering within
distortion limit should be left to the distance-based
model during decoding, and syntax-based reorder-
ing should focus on global reordering only. The
result shows that this hypothesis does not hold.
In practice syntax-based reordering also helps lo-
cal reordering. Consider the translation example
of test (a) shown in table 6. Both the baseline
model and our model translate in the same way up
to the word “Qq,” (which is incorrectly translated
as “and”). From this point, the proposed preprocess-
ing model correctly jump to the last phrase “Ili T
ÿX/discussed”, while the baseline model fail to do
so for the best translation. It should be noted, how-
ever, that there are only four words between “Qq,”
and the last phrase, and the desired order of decod-
ing is within the capability of the baseline system.
With the feature of syntax-based global reordering,
a phrase-based decoder performs better even with
respect to local reordering. It is because syntax-
based reordering adds more weight to a hypothesis
that moves words across longer distance, which is
penalized by the distance-based model.
In test (b) distortion limit is set as 0; i.e. reorder-
ing is done merely by syntax-based preprocessing.
The worse result is not surprising since, after all,
preprocessing discards many possibilities and thus
reduce the search space of the decoder. Some local
reordering model is still needed during decoding.
Finally, test (c) shows that translation perfor-
mance does not improve significantly by raising the
number of reorderings. This implies that our ap-
proach is very efficient in that only a small value of
n is capable of capturing the most important global
reordering patterns.
</bodyText>
<sectionHeader confidence="0.996059" genericHeader="conclusions">
8 Conclusion and Future Work
</sectionHeader>
<bodyText confidence="0.99994275">
This paper proposes a novel, probabilistic approach
to reordering which combines the merits of syntax
and phrase-based SMT. On the one hand, global
reordering, which cannot be accomplished by the
</bodyText>
<page confidence="0.994941">
726
</page>
<table confidence="0.9552595">
Input LiltlplRf , t3 ff fn ft-TI Nq, 9113it 11W WIf f R Ili T ��
Reference Meanwhile , Yushchenko and his assistants discussed issues concerning the estab-
lishment of a new government
Baseline The same time, Yushchenko assistants and a new Government on issues discussed
Translation with The same time , Yushchenko assistants and held discussions on the issue of a new
Preprocessing government
</table>
<tableCaption confidence="0.994132">
Table 6: Translation Example 2
</tableCaption>
<bodyText confidence="0.999817">
phrase-based model, is enabled by the tree opera-
tions in preprocessing. On the other hand, local re-
ordering is preserved and even strengthened in our
approach. Experiments show that, for the NIST MT-
05 task of Chinese-to-English translation, the pro-
posal leads to BLEU improvement of 1.56%.
Despite the encouraging experiment results, it
is still not very clear how the syntax-based and
distance-based models complement each other in
improving word reordering. In future we need to
investigate their interaction and identify the contri-
bution of each component. Moreover, it is observed
that the parse trees returned by a full parser like
the Stanford parser contain too many nodes which
seem not be involved in desired reorderings. Shal-
low parsers should be tried to see if they improve
the quality of reordering knowledge.
</bodyText>
<sectionHeader confidence="0.99955" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999676315789474">
Yaser Al-Onaizan, and Kishore Papineni. 2006. Distor-
tion Models for Statistical Machine Translation. Pro-
ceedings for ACL 2006.
Michael Collins, Philipp Koehn, and Ivona Kucerova.
2005. Clause Restructuring for Statistical Machine
Translation. Proceedings forACL 2005.
M.R. Costa-juss`a, and J.A.R. Fonollosa. 2006. Statis-
tical Machine Reordering. Proceedings for EMNLP
2006.
Heidi Fox. 2002. Phrase Cohesion and Statistical Ma-
chine Translation. Proceedings for EMNLP 2002.
Jianfeng Gao, Mu Li, and Chang-Ning Huang 2003.
Improved Source-Channel Models for Chinese Word
Segmentation. Proceedings forACL 2003.
Dan Klein and Christopher D. Manning. 2003. Accurate
Unlexicalized Parsing. Proceedings for ACL 2003.
Philipp Koehn, Franz J. Och, and Daniel Marcu. 2003.
Statistical Phrase-based Translation. Proceedings for
HLT-NAACL 2003.
</reference>
<figureCaption confidence="0.60696565">
Philipp Koehn. 2004. Pharaoh: a Beam Search De-
coder for Phrase-Based Statistical Machine Transla-
tion Models. Proceedings forAMTA 2004.
Philipp Koehn, Amittai Axelrod, Alexandra Birch
Mayne, Chris Callison-Burch, Miles Osborne, and
David Talbot 2005. Edinburgh System Description
for the 2005 IWSLT Speech Translation Evaluation.
Proceedings for IWSLT 2005.
Franz J. Och. 2003. Minimum Error Rate Training in
Statistical Machine Translation. Proceedings forACL
2003.
Franz J. Och, and Hermann Ney. 2000. Improved Statis-
tical Alignment Models. Proceedings for ACL 2000.
Kishore Papineni, Salim Roukos, Todd Ward, and Wei-
Jing Zhu. 2002. BLEU: a Method for Automatic Eval-
uation of Machine Translation. Proceedings for ACL
2002.
Chris Quirk, Arul Menezes, and Colin Cherry. 2005. De-
pendency Treelet Translation: Syntactically Informed
Phrasal SMT. Proceedings forACL 2005.
</figureCaption>
<bodyText confidence="0.895042714285714">
Andreas Stolcke. 2002. SRILM - An Extensible Lan-
guage Modeling Toolkit. Proceedings for the Interna-
tional Conference on Spoken Language Understand-
ing 2002.
Christoph Tillmann. 2004. A Unigram Orientation
Model for Statistical Machine Translation. Proceed-
ings for ACL 2004.
Fei Xia, and Michael McCord 2004. Improving a Statis-
tical MT System with Automatically Learned Rewrite
Patterns. Proceedings for COLING 2004.
Kenji Yamada, and Kevin Knight. 2001. A syntax-
based statistical translation model. Proceedings for
ACL 2001.
Le Zhang. 2004. Maximum Entropy
</bodyText>
<footnote confidence="0.602757">
Modeling Toolkit for Python and C++.
http://homepages.inf.ed.ac.uk/s0450736/maxent toolkit.html.
</footnote>
<page confidence="0.990467">
727
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.318609">
<title confidence="0.9993905">A Probabilistic Approach to Syntax-based Reordering for Statistical Machine Translation</title>
<author confidence="0.999755">Chi-Ho Li</author>
<author confidence="0.999755">Dongdong Zhang</author>
<author confidence="0.999755">Mu Li</author>
<author confidence="0.999755">Ming Zhou Minghui Li</author>
<author confidence="0.999755">Yi Guan</author>
<affiliation confidence="0.999952">Microsoft Research Asia Harbin Institute of Technology</affiliation>
<address confidence="0.976973">Beijing, China Harbin, China</address>
<abstract confidence="0.9054795">chl, dozhang@microsoft.com mhli@insun.hit.edu.cn muli, mingzhou@microsoft.com guanyi@insun.hit.edu.cn Abstract Inspired by previous preprocessing approaches to SMT, this paper proposes a novel, probabilistic approach to reordering which combines the merits of syntax and phrase-based SMT. Given a source sentence and its parse tree, our method generates, tree operations, an list of reordered inputs, which are then fed to standard phrase-based decoder to produce the optimal translation. Experiments show that, for the NIST MT-05 task of Chinese-to- English translation, the proposal leads to BLEU improvement of 1.56%.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Yaser Al-Onaizan</author>
<author>Kishore Papineni</author>
</authors>
<title>Distortion Models for Statistical Machine Translation.</title>
<date>2006</date>
<booktitle>Proceedings for ACL</booktitle>
<contexts>
<context position="7028" citStr="Al-Onaizan and Papineni, 2006" startWordPosition="1140" endWordPosition="1143">spect to English word order. Instead of relying on manual rules, (Xia and McCord, 2004) propose a method in learning patterns of rewriting SL sentences. This method parses training data and uses some heuristics to align SL phrases with TL ones. From such alignment it can extract rewriting patterns, of which the units are words and POSs. The learned rewriting rules are then applied to rewrite SL sentences before monotonous translation. Despite the encouraging results reported in these papers, the two attempts share the same shortcoming that their reordering is deterministic. As pointed out in (Al-Onaizan and Papineni, 2006), these strategies make hard decisions in reordering which cannot be undone during decoding. That is, the choice of reordering is independent from other translation factors, and once a reordering mistake is made, it cannot be corrected by the subsequent decoding. To overcome this weakness, we suggest a method to ‘soften’ the hard decisions in preprocessing. The essence is that our preprocessing module generates n-best S&apos;s rather than merely one S&apos;. A variety of reordered SL sentences are fed to the decoder so that the decoder can consider, to certain extent, the interaction between reordering </context>
</contexts>
<marker>Al-Onaizan, Papineni, 2006</marker>
<rawString>Yaser Al-Onaizan, and Kishore Papineni. 2006. Distortion Models for Statistical Machine Translation. Proceedings for ACL 2006.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael Collins</author>
<author>Philipp Koehn</author>
<author>Ivona Kucerova</author>
</authors>
<title>Clause Restructuring for Statistical Machine Translation.</title>
<date>2005</date>
<booktitle>Proceedings forACL</booktitle>
<contexts>
<context position="4332" citStr="Collins et al., 2005" startWordPosition="670" endWordPosition="673">op half of the figures show the phrase structure of the Chinese sentences, while the links on the bottom half of the figures show the alignments between Chinese and English phrases. Square brackets indicate the boundaries of blocks found by our decoder. and it achieves better MT performance on the basis of the standard phrase-based model. To prove it, we developed a hybrid approach which preserves the strength of phrase-based SMT in local reordering as well as the strength of syntax in global reordering. Our method is inspired by previous preprocessing approaches like (Xia and McCord, 2004), (Collins et al., 2005), and (Costa-juss`a and Fonollosa, 2006), which split translation into two stages: S → S&apos; → T (1) where a sentence of the source language (SL), S, is first reordered with respect to the word order of the target language (TL), and then the reordered SL sentence S&apos; is translated as a TL sentence T by monotonous translation. Our first contribution is a new translation model as represented by formula 2: S → n × S&apos; → n × T → T� (2) where an n-best list of S&apos;, instead of only one S&apos;, is generated. The reason of such change will be given in section 2. Note also that the translation process S&apos;→T is no</context>
<context position="6191" citStr="Collins et al., 2005" startWordPosition="1005" endWordPosition="1008">ot of subtle issues would then be introduced due to the complexity of syntax-based decoder, and the impact of syntax on reordering will be difficult to single out. There have been many reordering strategies under the phrase-based camp. A notable approach is lexicalized reordering (Koehn et al., 2005) and (Tillmann, 2004). It should be noted that this approach achieves the best result within certain distortion limit and is therefore not a good model for global reordering. There are a few attempts to the preprocessing approach to reordering. The most notable ones are (Xia and McCord, 2004) and (Collins et al., 2005), both of which make use of linguistic syntax in the preprocessing stage. (Collins et al., 2005) analyze German clause structure and propose six types 721 of rules for transforming German parse trees with respect to English word order. Instead of relying on manual rules, (Xia and McCord, 2004) propose a method in learning patterns of rewriting SL sentences. This method parses training data and uses some heuristics to align SL phrases with TL ones. From such alignment it can extract rewriting patterns, of which the units are words and POSs. The learned rewriting rules are then applied to rewrit</context>
<context position="7895" citStr="Collins et al., 2005" startWordPosition="1283" endWordPosition="1286">sequent decoding. To overcome this weakness, we suggest a method to ‘soften’ the hard decisions in preprocessing. The essence is that our preprocessing module generates n-best S&apos;s rather than merely one S&apos;. A variety of reordered SL sentences are fed to the decoder so that the decoder can consider, to certain extent, the interaction between reordering and other factors of translation. The entire process can be depicted by formula 2, recapitulated as follows: S —* n x S&apos; —* n x T —* T�. Apart from their deterministic nature, the two previous preprocessing approaches have their own weaknesses. (Collins et al., 2005) count on manual rules and it is suspicious if reordering rules for other language pairs can be easily made. (Xia and McCord, 2004) propose a way to learn rewriting patterns, nevertheless the units of such patterns are words and their POSs. Although there is no limit to the length of rewriting patterns, due to data sparseness most patterns being applied would be short ones. Many instances of global reordering are therefore left unhandled. 3 The Acquisition of Reordering Knowledge To avoid this problem, we give up using rewriting patterns and design a form of reordering knowledge which can be d</context>
</contexts>
<marker>Collins, Koehn, Kucerova, 2005</marker>
<rawString>Michael Collins, Philipp Koehn, and Ivona Kucerova. 2005. Clause Restructuring for Statistical Machine Translation. Proceedings forACL 2005.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M R Costa-juss`a</author>
<author>J A R Fonollosa</author>
</authors>
<date>2006</date>
<booktitle>Statistical Machine Reordering. Proceedings for EMNLP</booktitle>
<marker>Costa-juss`a, Fonollosa, 2006</marker>
<rawString>M.R. Costa-juss`a, and J.A.R. Fonollosa. 2006. Statistical Machine Reordering. Proceedings for EMNLP 2006.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Heidi Fox</author>
</authors>
<title>Phrase Cohesion and Statistical Machine Translation.</title>
<date>2002</date>
<booktitle>Proceedings for EMNLP</booktitle>
<contexts>
<context position="9258" citStr="Fox, 2002" startWordPosition="1529" endWordPosition="1530">g module to determine how probable the children of N are reordered.3 For simplicity, let us first consider the case of binary nodes only. Let N1 and N2, which yield phrases p1 and p2 respectively, be the child nodes of N. We want to determine the order of p1 and p2 with respect to their TL counterparts, T (p1) and T (p2). The knowledge for making such a decision can be learned from a wordaligned parallel corpus. There are two questions involved in obtaining training instances: • How to define T(pi)? • How to define the order of T (pi)s? For the first question, we adopt a similar method as in (Fox, 2002): given an SL phrase ps = s1 ... si ... sn and a word alignment matrix A, we can enumerate the set of TL words {ti : ticA(si)}, and then arrange the words in the order as they appear in the TL sentence. Let first(t) be the first word in this sorted set and last(t) be the last word. T(ps) is defined as the phrase first(t) ... last(t) in the TL sentence. Note that T (ps) may contain words not in the set {ti}. The question of the order of two TL phrases is not a trivial one. Since a word alignment matrix usually contains a lot of noises as well as one-to-many and many-to-many alignments, two TL p</context>
</contexts>
<marker>Fox, 2002</marker>
<rawString>Heidi Fox. 2002. Phrase Cohesion and Statistical Machine Translation. Proceedings for EMNLP 2002.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jianfeng Gao</author>
</authors>
<title>Mu Li, and Chang-Ning Huang 2003. Improved Source-Channel Models for Chinese Word Segmentation.</title>
<date>2003</date>
<booktitle>Proceedings forACL</booktitle>
<marker>Gao, 2003</marker>
<rawString>Jianfeng Gao, Mu Li, and Chang-Ning Huang 2003. Improved Source-Channel Models for Chinese Word Segmentation. Proceedings forACL 2003.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Dan Klein</author>
<author>Christopher D Manning</author>
</authors>
<title>Accurate Unlexicalized Parsing.</title>
<date>2003</date>
<booktitle>Proceedings for ACL</booktitle>
<contexts>
<context position="19287" citStr="Klein and Manning, 2003" startWordPosition="3313" endWordPosition="3317">ey as reordering does not apply to such nodes. test set and development set of NIST MT-2002 are merged to form our development set. The training data for both reordering knowledge and translation table is the one for NIST MT-2005. The GIGAWORD corpus is used for training language model. The Chinese side of all corpora are segmented into words by our implementation of (Gao et al., 2003). 7.2 The Preprocessing Module As mentioned in section 3, the preprocessing module for reordering needs a parser of the SL, a word alignment tool, and a Maximum Entropy training tool. We use the Stanford parser (Klein and Manning, 2003) with its default Chinese grammar, the GIZA++ (Och and Ney, 2000) alignment package with its default settings, and the ME tool developed by (Zhang, 2004). Section 5 mentions that our reordering model can apply to nodes of any branching factor. It is interesting to know how many branching factors should be included. The distribution of parse tree nodes as shown in table 1 is based on the result of parsing the Chinese side of NIST MT-2002 test set by the Stanford parser. It is easily seen that the majority of parse tree nodes are binary ones. Nodes with more than 3 children seem to be negligible</context>
</contexts>
<marker>Klein, Manning, 2003</marker>
<rawString>Dan Klein and Christopher D. Manning. 2003. Accurate Unlexicalized Parsing. Proceedings for ACL 2003.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Philipp Koehn</author>
<author>Franz J Och</author>
<author>Daniel Marcu</author>
</authors>
<title>Statistical Phrase-based Translation.</title>
<date>2003</date>
<booktitle>Proceedings for HLT-NAACL</booktitle>
<contexts>
<context position="1272" citStr="Koehn et al., 2003" startWordPosition="175" endWordPosition="178">are then fed to standard phrase-based decoder to produce the optimal translation. Experiments show that, for the NIST MT-05 task of Chinese-toEnglish translation, the proposal leads to BLEU improvement of 1.56%. 1 Introduction The phrase-based approach has been considered the default strategy to Statistical Machine Translation (SMT) in recent years. It is widely known that the phrase-based approach is powerful in local lexical choice and word reordering within short distance. However, long-distance reordering is problematic in phrase-based SMT. For example, the distancebased reordering model (Koehn et al., 2003) allows a decoder to translate in non-monotonous order, under the constraint that the distance between two phrases translated consecutively does not exceed a limit known as distortion limit. In theory the distortion limit can be assigned a very large value so that all possible reorderings are allowed, yet in practise it is observed that too high a distortion limit not only harms efficiency but also translation performance (Koehn et al., 2005). In our own experiment setting, the best distortion limit for ChineseEnglish translation is 4. However, some ideal translations exhibit reorderings longe</context>
<context position="10436" citStr="Koehn et al., 2003" startWordPosition="1749" endWordPosition="1752">any and many-to-many alignments, two TL phrases may overlap with each other. For the sake of the quality of reordering knowledge, if T (p1) and T(p2) overlap, then the node N with children N1 and N2 is not taken as a training instance. Obviously it will greatly reduce the amount of training input. To remedy data sparseness, less probable alignment points are removed so as to minimize overlapping phrases, since, after removing some alignment point, one of the TL phrases may become shorter and the two phrases may no longer overlap. The implementation is similar to the idea of lexical weight in (Koehn et al., 2003): all points in the alignment matrices of the entire training corpus are collected to calculate the probabilistic distribution, P(t|s), of some TL word 3Some readers may prefer the expression the subtree rooted at node N to node N. The latter term is used in this paper for simplicity. 722 t given some SL word s. Any pair of overlapping T (pi)s will be redefined by iteratively removing less probable word alignments until they no longer overlap. If they still overlap after all one/many-to-many alignments have been removed, then the refinement will stop and N, which covers pis, is no longer taken</context>
<context position="20296" citStr="Koehn et al., 2003" startWordPosition="3490" endWordPosition="3493">result of parsing the Chinese side of NIST MT-2002 test set by the Stanford parser. It is easily seen that the majority of parse tree nodes are binary ones. Nodes with more than 3 children seem to be negligible. The 3- ary nodes occupy a certain proportion of the distribution, and their impact on translation performance will be shown in our experiments. 7.3 The decoder The data needed by our Pharaoh-like decoder are translation table and language model. Our 5-gram language model is trained by the SRI language modeling toolkit (Stolcke, 2002). The translation table is obtained as described in (Koehn et al., 2003), i.e. the alignment tool GIZA++ is run over the training data in both translation directions, and the two alignTest Setting BLEU B1 standard phrase-based SMT 29.22 B2 (B1) + clause splitting 29.13 Table 2: Experiment Baseline Test Setting BLEU BLEU 2-ary 2,3-ary 1 rule 29.77 30.31 2 ME (phrase label) 29.93 30.49 3 ME (left,right) 30.10 30.53 4 ME ((3)+head) 30.24 30.71 5 ME ((3)+phrase label) 30.12 30.30 6 ME ((4)+context) 30.24 30.76 Table 3: Tests on Various Reordering Models The 3rd column comprises the BLEU scores obtained by reordering binary nodes only, the 4th column the scores by reor</context>
</contexts>
<marker>Koehn, Och, Marcu, 2003</marker>
<rawString>Philipp Koehn, Franz J. Och, and Daniel Marcu. 2003. Statistical Phrase-based Translation. Proceedings for HLT-NAACL 2003.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>