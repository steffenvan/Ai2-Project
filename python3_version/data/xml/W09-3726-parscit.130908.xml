<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000904">
<title confidence="0.939089">
Flexible Semantic Composition with DUDES
</title>
<author confidence="0.674241">
Philipp Cimiano
Web Information Systems Group, TU Delft
</author>
<sectionHeader confidence="0.984182" genericHeader="abstract">
1 DUDES
</sectionHeader>
<bodyText confidence="0.99933404">
In this paper we present a novel formalism for semantic construction called
DUDES (Dependency-based Underspecified Discourse REpresentation
Structures). The DUDES formalism has been designed to overcome the
rigidity of semantic composition based on the lambda calculus (where the
order of application is typically fixed) and provides some flexibility with
respect to the direction of the dependence and with respect to the order
of application of arguments. In this short paper we present the DUDES
formalism and work through a simple example. DUDES bears some resem-
blance to the work on λ-DRT [2] and LUDs [1] as well as with the work
of Copestake et al. [4] and represents a generalization of the formalism in-
troduced in [3]. A detailed discussion of the relation to these formalisms is
clearly out of the scope of this paper. DUDES are characterized by three
main facts. First, they represent semantic dependencies and are thus in-
herently suitable for a dependency-based grammar formalism assuming that
syntactic dependencies correspond to semantic dependencies (though the
correspondence might be “inverted”). Second, they explicitly encode scope
relations and are thus able to yield underspecified representations as output
(in contrast to the linear logic approach for LFG [5] where different scopings
correspond to different derivations). Third, there is one single operation for
semantic composition which is, to some extent, order-independent (in con-
trast to traditional lambda-based formalisms) as well as flexible with respect
to the direction of the syntactic dependency. As the name suggests, DUDES
builds on DRT [6] and in particular on UDRT [7] in the sense that it relies on
labeled DRSs and dominance relations between these to talk about scope.
First of all, we now first formally introduce DUDES:
</bodyText>
<construct confidence="0.417728">
Definition 1 (DUDES)
A DUDES is a 7-tuple (m, l, t, U, A, S, C) consisting of
</construct>
<page confidence="0.963802">
272
</page>
<note confidence="0.614416">
Proceedings of the 8th International Conference on Computational Semantics, pages 272–276,
Tilburg, January 2009. c�2009 International Conference on Computational Semantics
</note>
<construct confidence="0.5731634">
- A main discourse referent m and a distinguished label l
- The type t of the semantic structure (after inserting all arguments)
- A set U of UDRS components. These UDRS components are in essence
labeled DRSs [6].
- A set of argument quadruples (l, v, rel, type) consisting of i) a label l (the main label
of a DUDE inserted as argument, ii) the main variable v of the argument DUDE,
iii) a grammatical relation and iv) a semantic type.
- A set S of scope relations between labels introduced in U.
- A set C of constraints on the arguments, e.g. including ontological constraints or
selectional restrictions etc.
</construct>
<bodyText confidence="0.996548">
Further, we introduce the semantic composition operation for DUDES
along a dependency tree, distinguishing tree cases:
</bodyText>
<subsectionHeader confidence="0.527775">
Definition 2 (Semantic Composition for DUDES)
</subsectionHeader>
<bodyText confidence="0.9176018">
Let (γ1, γ2) be an edge in some DAG (dependency tree, LTAG derivation tree or F-
Structure DAG). Assume the edge is labeled with r (a grammatical function) and
the semantics of the vertices γ1 and γ2 are given by DUDEs as follows: σ1 :=
(m1, l1, t1, U1, A1, S1, C1) and σ2 = (m2, l2, t2, U2, A2, S2, C2). Then the result of applying
σ2 to σ1 is the DUDE σ&apos; = σ1(σ2) = (m&apos;, l&apos;, t&apos;, U&apos;, A&apos;, S, C&apos;), where we need to distinguish
</bodyText>
<equation confidence="0.9083084">
the following cases:
if (l, v, r, t2) E A1 if (l, v, r, t1) E A2(t1 = t2) if (l, v, r, t1) E A2(t1 =� t2)
(Complementation) (Modification) (Inversion)
m&apos; := m1 m&apos; := m1 m&apos; := m2
t&apos; := t1 t&apos; := t1 t&apos; := t2
U&apos; := U1 U U2 U&apos; := U1 U U2 U&apos; := U1 U U2
A&apos; := A1\{(l, v, r, t2)} A&apos; := A1 A&apos; := A2\{(l, v, r, t1)}
S&apos; := S1 U S2 S&apos; := S1 U S2 S&apos; := S1 U S2
C&apos; := C1 U C2 C&apos; := C1 U C2 C&apos; := C1 U C2
v - m2, l - l2 v - m1(- m2), l - l1 v - m1, l - l1
</equation>
<bodyText confidence="0.984880333333333">
where ‘≡’ is the operation of unification between variables.
Concerning the order of application, from the definition of the seman-
tic composition operator it follows that complements and modifiers can be
applied in any order, but inversions have to be carried out at the end as
We now give the semantic representation of the entries for our running
example: “John likes every nice woman.”:
</bodyText>
<equation confidence="0.970395833333333">
(l1, a, subj, ((e, t), t)), (l2, y, obj, ((e, t), t))
1 G scope(l1), l1 G T, 1 G scope(l2), l2 G T
x l
e, t), t
l:
l1: x =�&apos; l2:
(l’,x,spec,(e, t))
l&apos; G l1
every:
l:
nice:
woman:
nice(x)
l: woman(w)
(l&apos;, a, mod, (e, t))
l G l&apos;
x l
(e, t)
w l
(e, t)
j
John(j)
e T t
, 1: e:like(x,y)
T:
like:
((e, t), t)
John:
j l
l:
</equation>
<page confidence="0.979892">
273
</page>
<bodyText confidence="0.999818">
they change the mother DUDES and would thus inhibit the application of
the complements and the modifiers. In the following section we show how
the semantic composition operation defined above applies to a concrete ex-
ample. We will also discuss that our operations still work if (some of) the
dependencies are inverted.
</bodyText>
<sectionHeader confidence="0.963034" genericHeader="categories and subject descriptors">
2 A Worked Example
</sectionHeader>
<bodyText confidence="0.981456142857143">
We will consider the two fol-
lowing (possible) analyses for
the sentence: “John likes
every nice woman.”, corre-
sponding to the NP analysis
(a) and DP analysis (b), re-
spectively.
</bodyText>
<subsectionHeader confidence="0.875153">
2.1 Complementation
</subsectionHeader>
<bodyText confidence="0.999971941176471">
Given the dependency analysis in a) to the
right, as a result of applying our seman-
tic composition operator for the comple-
mentation case we get a DUDES where
the argument has been correctly inserted,
the DRS components and the scope condi-
tions have been merged and one argument
has been removed. Note that this was
possible because i) the edge was labeled
with the appropriate grammatical relation
‘subj’ and ii) the types of σ2 and of the ar-
gument match (both are of type ((e, t), t)).
The resulting DUDES for [John likes] is
shown in b) to the right. (In case of DRS
conditions which are not complex, we as-
sume that the functions ‘res’ and ‘scope’
are resolved to the identity function.)
</bodyText>
<figure confidence="0.996635833333333">
b) like
�������� obj
subj ��������
john every
spec
woman
mod
nice
a)
e T t
, 1: e:like(x,y)
(l1, a, subj, ((e, t), t)), (l2, y, obj, ((e, t), t))
1 G scope(l1) G T, 1 G scope(l2) G T
T:
subj
j l
((e, t), t)
j
John(j)
b)
e T t
T:
j
John(j)
l1:
, 1: e:like(j,y)
l:
(l2, y, obj, ((e, t), t))
1 G l1 G T, 1 G scope(l2) G T
a) like
�������� obj
subj ��������
john woman
�������� mod
spec ��������
every nice
</figure>
<subsectionHeader confidence="0.988287">
2.2 Specification and Modification
</subsectionHeader>
<bodyText confidence="0.999952666666667">
The two possible dependency analyses for determiner/noun constructions
give rise to two configurations, corresponding to a) and b) below, for the se-
mantic composition operator. In both cases, independent of the fact whether
</bodyText>
<page confidence="0.994786">
274
</page>
<bodyText confidence="0.999848">
the determiner is the dependent or the head, we get that first the semantic
representation of the adjective is applied to the one of the noun (as the mod-
ifier has to be applied before the inversion is carried out in configuration a),
thus yielding the two configurations in c) and d).
</bodyText>
<figure confidence="0.992339328125">
l:
woman(w)
(l’,x,spec,(e, t))
l&apos; G l1
spec
(e, t)
w l
mod
(e, t)
x l
l:
nice(x)
(l&apos;, x, mod, (e, t))
l G l&apos;
x l
b)
l1: x
((e, t), t)
=�&apos; l2:
(e, t)
w l
l:
woman(w)
a)
x l
l1: x =�&apos; l2: l: nice(x)
(l’,x,spec,(e, t)) (l&apos;, x, mod, (e, t))
l&apos; G l1 l G l&apos;
�������� mod
spec ��������
e, t), t
e, t
x l
l&apos; G l1
l&apos; G l
w l
l:
woman(w)
l’: nice(w)
(e, t)
,
c)
((e, t), t)
x l
l1: x
(l’,x,spec,(e, t))
�
d)
spec
(e, t)
l:
woman(w)
l’: nice(w)
l&apos; G l
w l
,
spec
((e, t), t)
�
l2:
(l’,x,spec,(e, t))
l&apos; G l1
x l
l1: x
</figure>
<bodyText confidence="0.952579">
In case c) we have a case of inversion, while in case d) we have a case
of complementation. Overall, in both cases we yield the following DUDES:
l&apos; G l, l G l1
</bodyText>
<subsectionHeader confidence="0.936598">
2.3 Result
</subsectionHeader>
<bodyText confidence="0.999677666666667">
After a further semantic composition step (case complementation), applying
[every nice woman] (from Sec. 2.2) to [John likes] (from Sec. 2.1), we
yield as resulting UDRS:
</bodyText>
<page confidence="0.989881">
275
</page>
<figure confidence="0.996652793103448">
[every nice woman]=
w l
l1: w
, l:
woman(w)
=�&apos; l2:
((e, t), t)
, l’: nice(w)
e
j
John(j)
woman(w)
nice(w)
e T t
l: l2:
l”: nice(w)
T:
1 G l1 G T, 1 G l3, l G T, l� G l2,l&amp;quot; G l�
, 1: e:like(j,w)
w
=�&apos; l3:
, l1:
, l’: woman(w)
j
John(j)
,
e:like(j,w)
�
w
</figure>
<sectionHeader confidence="0.829246" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999916764705882">
[1] J. Bos, B. Gamb¨ack, C. Lieske, Y. Mori, M. Pinkal, and K. Worm. Compositional
semantics in verbmobil. In Proceedings of COLING’96, 1996.
[2] Johan Bos, Elsbeth Mastenbroek, Scott Mcglashan, Sebastian Millies, and Manfred
Pinkal. A compositional drs-based formalism for nlp applications. In Proceedings of
the International Workshop on Computational Semantics, 1994.
[3] P. Cimiano, A. Frank, and U. Reyle. UDRT-based semantics construction for LTAG
– and what it tells us about the role of adjunction in LTAG –. In Proceedings of the
7th International Workshop on Computational Semantics, pages 41–52, 2007.
[4] Ann Copestake, Alex Lascarides, and Dan Flickinger. An algebra for semantic con-
struction in constraint-based grammars. In Proceedings of ACL’01, 2001.
[5] Mary Dalrymple, John Lamping, Fernando C. N. Pereira, and Vijay Saraswat. Linear
logic for meaning assembly. revised version of the (overview) paper in Proc. of the
Workshop on Computational Logic for Natural Language Processing, Edinburgh, UK.
1995., 2002.
[6] H. Kamp and U. Reyle. From Discourse to Logic. Kluwer, 1993.
[7] Uwe Reyle. Dealing with ambiguities by underspecification: Construction, represen-
tation and deduction. Journal of Semantics, 10(2):123–179, 1993.
</reference>
<page confidence="0.998466">
276
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.024338">
<title confidence="0.999899">Flexible Semantic Composition with DUDES</title>
<author confidence="0.972079">Philipp Cimiano</author>
<affiliation confidence="0.646928">Web Information Systems Group, TU Delft 1 DUDES</affiliation>
<abstract confidence="0.999137913043478">In this paper we present a novel formalism for semantic construction called The DUDES formalism has been designed to overcome the rigidity of semantic composition based on the lambda calculus (where the order of application is typically fixed) and provides some flexibility with respect to the direction of the dependence and with respect to the order of application of arguments. In this short paper we present the DUDES formalism and work through a simple example. DUDES bears some resemto the work on [2] and as well as with the work of Copestake et al. [4] and represents a generalization of the formalism introduced in [3]. A detailed discussion of the relation to these formalisms is clearly out of the scope of this paper. DUDES are characterized by three main facts. First, they represent semantic dependencies and are thus inherently suitable for a dependency-based grammar formalism assuming that syntactic dependencies correspond to semantic dependencies (though the correspondence might be “inverted”). Second, they explicitly encode scope relations and are thus able to yield underspecified representations as output (in contrast to the linear logic approach for LFG [5] where different scopings correspond to different derivations). Third, there is one single operation for semantic composition which is, to some extent, order-independent (in contrast to traditional lambda-based formalisms) as well as flexible with respect to the direction of the syntactic dependency. As the name suggests, DUDES builds on DRT [6] and in particular on UDRT [7] in the sense that it relies on labeled DRSs and dominance relations between these to talk about scope.</abstract>
<note confidence="0.779470333333333">First of all, we now first formally introduce DUDES: Definition 1 (DUDES) DUDES is a 7-tuple l, t, U, A, S, of 272 of the 8th International Conference on Computational pages 272–276, January 2009. International Conference on Computational Semantics</note>
<abstract confidence="0.988002903225807">A main discourse referent m and a distinguished label l - The type t of the semantic structure (after inserting all arguments) - A set U of UDRS components. These UDRS components are in essence labeled DRSs [6]. A set of argument quadruples v, rel, of i) a label l (the main label of a DUDE inserted as argument, ii) the main variable v of the argument DUDE, iii) a grammatical relation and iv) a semantic type. - A set S of scope relations between labels introduced in U. - A set C of constraints on the arguments, e.g. including ontological constraints or selectional restrictions etc. Further, we introduce the semantic composition operation for DUDES along a dependency tree, distinguishing tree cases: Definition 2 (Semantic Composition for DUDES) an edge in some DAG (dependency tree, LTAG derivation tree or F- DAG). Assume the edge is labeled with grammatical function) and semantics of the vertices given by DUDEs as follows: Then the result of applying the DUDE = S, where we need to distinguish the following cases: v, r, E v, r, E v, r, E (Complementation) (Modification) (Inversion) := := v, r, := := v, r, := := l l l is the operation of unification between variables. Concerning the order of application, from the definition of the semantic composition operator it follows that complements and modifiers can be applied in any order, but inversions have to be carried out at the end as We now give the semantic representation of the entries for our running likes everynice a, subj, y, G G GT x l t l: x every: l: nice: woman: nice(x) l: woman(w) a, mod, x l w l John(j) e:like(x,y) like: John: j l l: 273 they change the mother DUDES and would thus inhibit the application of the complements and the modifiers. In the following section we show how the semantic composition operation defined above applies to a concrete example. We will also discuss that our operations still work if (some of) the dependencies are inverted. 2 A Worked Example We will consider the two following (possible) analyses for sentence: nice correto the analysis and analysis respectively. 2.1 Complementation Given the dependency analysis in a) to the right, as a result of applying our semantic composition operator for the complementation case we get a DUDES where the argument has been correctly inserted, the DRS components and the scope conditions have been merged and one argument has been removed. Note that this was possible because i) the edge was labeled with the appropriate grammatical relation ii) the types of of the armatch (both are of type resulting DUDES for shown in b) to the right. (In case of DRS conditions which are not complex, we assume that the functions ‘res’ and ‘scope’ are resolved to the identity function.) b) like john every spec woman mod nice a) e:like(x,y) a, subj, y, obj, G G T subj j l John(j) b) John(j) e:like(j,y) l: y, obj, G G T a) like john woman every nice 2.2 Specification and Modification The two possible dependency analyses for determiner/noun constructions give rise to two configurations, corresponding to a) and b) below, for the semantic composition operator. In both cases, independent of the fact whether 274 the determiner is the dependent or the head, we get that first the semantic representation of the adjective is applied to the one of the noun (as the modifier has to be applied before the inversion is carried out in configuration a), thus yielding the two configurations in c) and d). l: woman(w) spec w l mod x l l: nice(x) x, mod, x l b) x w l l: woman(w) a) x l x l: nice(x) x, mod, t e, t x l w l l: woman(w) l’: nice(w) , c) x l l1: x � d) spec l: woman(w) l’: nice(w) w l , spec � x l x In case c) we have a case of inversion, while in case d) we have a case complementation. Overall,in both we yield the following DUDES: 2.3 Result After a further semantic composition step (case complementation), applying nice Sec. 2.2) to Sec. 2.1), we yield as resulting UDRS: 275 nice w l w , l: woman(w) , l’: nice(w) e John(j) woman(w) nice(w) e T t l”: nice(w) T: G G l T, , 1: e:like(j,w) w , l’: woman(w) John(j) , e:like(j,w) � w</abstract>
<note confidence="0.972558473684211">References [1] J. Bos, B. Gamb¨ack, C. Lieske, Y. Mori, M. Pinkal, and K. Worm. Compositional in verbmobil. In of 1996. [2] Johan Bos, Elsbeth Mastenbroek, Scott Mcglashan, Sebastian Millies, and Manfred A compositional drs-based formalism for nlp applications. In of International Workshop on Computational 1994. [3] P. Cimiano, A. Frank, and U. Reyle. UDRT-based semantics construction for LTAG and what it tells us about the role of adjunction in LTAG –. In of the International Workshop on Computational pages 41–52, 2007. [4] Ann Copestake, Alex Lascarides, and Dan Flickinger. An algebra for semantic conin constraint-based grammars. In of 2001. [5] Mary Dalrymple, John Lamping, Fernando C. N. Pereira, and Vijay Saraswat. Linear logic for meaning assembly. revised version of the (overview) paper in Proc. of the Workshop on Computational Logic for Natural Language Processing, Edinburgh, UK. 1995., 2002. H. Kamp and U. Reyle. Discourse to Kluwer, 1993. [7] Uwe Reyle. Dealing with ambiguities by underspecification: Construction, represenand deduction. of 10(2):123–179, 1993. 276</note>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>J Bos</author>
<author>B Gamb¨ack</author>
<author>C Lieske</author>
<author>Y Mori</author>
<author>M Pinkal</author>
<author>K Worm</author>
</authors>
<title>Compositional semantics in verbmobil.</title>
<date>1996</date>
<booktitle>In Proceedings of COLING’96,</booktitle>
<contexts>
<context position="715" citStr="[1]" startWordPosition="109" endWordPosition="109"> paper we present a novel formalism for semantic construction called DUDES (Dependency-based Underspecified Discourse REpresentation Structures). The DUDES formalism has been designed to overcome the rigidity of semantic composition based on the lambda calculus (where the order of application is typically fixed) and provides some flexibility with respect to the direction of the dependence and with respect to the order of application of arguments. In this short paper we present the DUDES formalism and work through a simple example. DUDES bears some resemblance to the work on λ-DRT [2] and LUDs [1] as well as with the work of Copestake et al. [4] and represents a generalization of the formalism introduced in [3]. A detailed discussion of the relation to these formalisms is clearly out of the scope of this paper. DUDES are characterized by three main facts. First, they represent semantic dependencies and are thus inherently suitable for a dependency-based grammar formalism assuming that syntactic dependencies correspond to semantic dependencies (though the correspondence might be “inverted”). Second, they explicitly encode scope relations and are thus able to yield underspecified represe</context>
</contexts>
<marker>[1]</marker>
<rawString>J. Bos, B. Gamb¨ack, C. Lieske, Y. Mori, M. Pinkal, and K. Worm. Compositional semantics in verbmobil. In Proceedings of COLING’96, 1996.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Johan Bos</author>
<author>Elsbeth Mastenbroek</author>
<author>Scott Mcglashan</author>
<author>Sebastian Millies</author>
<author>Manfred Pinkal</author>
</authors>
<title>A compositional drs-based formalism for nlp applications.</title>
<date>1994</date>
<booktitle>In Proceedings of the International Workshop on Computational Semantics,</booktitle>
<contexts>
<context position="702" citStr="[2]" startWordPosition="106" endWordPosition="106">DUDES In this paper we present a novel formalism for semantic construction called DUDES (Dependency-based Underspecified Discourse REpresentation Structures). The DUDES formalism has been designed to overcome the rigidity of semantic composition based on the lambda calculus (where the order of application is typically fixed) and provides some flexibility with respect to the direction of the dependence and with respect to the order of application of arguments. In this short paper we present the DUDES formalism and work through a simple example. DUDES bears some resemblance to the work on λ-DRT [2] and LUDs [1] as well as with the work of Copestake et al. [4] and represents a generalization of the formalism introduced in [3]. A detailed discussion of the relation to these formalisms is clearly out of the scope of this paper. DUDES are characterized by three main facts. First, they represent semantic dependencies and are thus inherently suitable for a dependency-based grammar formalism assuming that syntactic dependencies correspond to semantic dependencies (though the correspondence might be “inverted”). Second, they explicitly encode scope relations and are thus able to yield underspec</context>
</contexts>
<marker>[2]</marker>
<rawString>Johan Bos, Elsbeth Mastenbroek, Scott Mcglashan, Sebastian Millies, and Manfred Pinkal. A compositional drs-based formalism for nlp applications. In Proceedings of the International Workshop on Computational Semantics, 1994.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Cimiano</author>
<author>A Frank</author>
<author>U Reyle</author>
</authors>
<title>UDRT-based semantics construction for LTAG – and what it tells us about the role of adjunction in LTAG –.</title>
<date>2007</date>
<booktitle>In Proceedings of the 7th International Workshop on Computational Semantics,</booktitle>
<pages>41--52</pages>
<contexts>
<context position="831" citStr="[3]" startWordPosition="131" endWordPosition="131">e REpresentation Structures). The DUDES formalism has been designed to overcome the rigidity of semantic composition based on the lambda calculus (where the order of application is typically fixed) and provides some flexibility with respect to the direction of the dependence and with respect to the order of application of arguments. In this short paper we present the DUDES formalism and work through a simple example. DUDES bears some resemblance to the work on λ-DRT [2] and LUDs [1] as well as with the work of Copestake et al. [4] and represents a generalization of the formalism introduced in [3]. A detailed discussion of the relation to these formalisms is clearly out of the scope of this paper. DUDES are characterized by three main facts. First, they represent semantic dependencies and are thus inherently suitable for a dependency-based grammar formalism assuming that syntactic dependencies correspond to semantic dependencies (though the correspondence might be “inverted”). Second, they explicitly encode scope relations and are thus able to yield underspecified representations as output (in contrast to the linear logic approach for LFG [5] where different scopings correspond to diff</context>
</contexts>
<marker>[3]</marker>
<rawString>P. Cimiano, A. Frank, and U. Reyle. UDRT-based semantics construction for LTAG – and what it tells us about the role of adjunction in LTAG –. In Proceedings of the 7th International Workshop on Computational Semantics, pages 41–52, 2007.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ann Copestake</author>
<author>Alex Lascarides</author>
<author>Dan Flickinger</author>
</authors>
<title>An algebra for semantic construction in constraint-based grammars.</title>
<date>2001</date>
<booktitle>In Proceedings of ACL’01,</booktitle>
<contexts>
<context position="764" citStr="[4]" startWordPosition="120" endWordPosition="120">construction called DUDES (Dependency-based Underspecified Discourse REpresentation Structures). The DUDES formalism has been designed to overcome the rigidity of semantic composition based on the lambda calculus (where the order of application is typically fixed) and provides some flexibility with respect to the direction of the dependence and with respect to the order of application of arguments. In this short paper we present the DUDES formalism and work through a simple example. DUDES bears some resemblance to the work on λ-DRT [2] and LUDs [1] as well as with the work of Copestake et al. [4] and represents a generalization of the formalism introduced in [3]. A detailed discussion of the relation to these formalisms is clearly out of the scope of this paper. DUDES are characterized by three main facts. First, they represent semantic dependencies and are thus inherently suitable for a dependency-based grammar formalism assuming that syntactic dependencies correspond to semantic dependencies (though the correspondence might be “inverted”). Second, they explicitly encode scope relations and are thus able to yield underspecified representations as output (in contrast to the linear log</context>
</contexts>
<marker>[4]</marker>
<rawString>Ann Copestake, Alex Lascarides, and Dan Flickinger. An algebra for semantic construction in constraint-based grammars. In Proceedings of ACL’01, 2001.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mary Dalrymple</author>
<author>John Lamping</author>
<author>Fernando C N Pereira</author>
<author>Vijay Saraswat</author>
</authors>
<title>Linear logic for meaning assembly. revised version of the (overview) paper in</title>
<date>1995</date>
<booktitle>Proc. of the Workshop on Computational Logic for Natural Language Processing,</booktitle>
<location>Edinburgh, UK.</location>
<contexts>
<context position="1387" citStr="[5]" startWordPosition="212" endWordPosition="212">neralization of the formalism introduced in [3]. A detailed discussion of the relation to these formalisms is clearly out of the scope of this paper. DUDES are characterized by three main facts. First, they represent semantic dependencies and are thus inherently suitable for a dependency-based grammar formalism assuming that syntactic dependencies correspond to semantic dependencies (though the correspondence might be “inverted”). Second, they explicitly encode scope relations and are thus able to yield underspecified representations as output (in contrast to the linear logic approach for LFG [5] where different scopings correspond to different derivations). Third, there is one single operation for semantic composition which is, to some extent, order-independent (in contrast to traditional lambda-based formalisms) as well as flexible with respect to the direction of the syntactic dependency. As the name suggests, DUDES builds on DRT [6] and in particular on UDRT [7] in the sense that it relies on labeled DRSs and dominance relations between these to talk about scope. First of all, we now first formally introduce DUDES: Definition 1 (DUDES) A DUDES is a 7-tuple (m, l, t, U, A, S, C) co</context>
</contexts>
<marker>[5]</marker>
<rawString>Mary Dalrymple, John Lamping, Fernando C. N. Pereira, and Vijay Saraswat. Linear logic for meaning assembly. revised version of the (overview) paper in Proc. of the Workshop on Computational Logic for Natural Language Processing, Edinburgh, UK. 1995., 2002.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Kamp</author>
<author>U Reyle</author>
</authors>
<title>From Discourse to Logic.</title>
<date>1993</date>
<publisher>Kluwer,</publisher>
<contexts>
<context position="1734" citStr="[6]" startWordPosition="263" endWordPosition="263">es correspond to semantic dependencies (though the correspondence might be “inverted”). Second, they explicitly encode scope relations and are thus able to yield underspecified representations as output (in contrast to the linear logic approach for LFG [5] where different scopings correspond to different derivations). Third, there is one single operation for semantic composition which is, to some extent, order-independent (in contrast to traditional lambda-based formalisms) as well as flexible with respect to the direction of the syntactic dependency. As the name suggests, DUDES builds on DRT [6] and in particular on UDRT [7] in the sense that it relies on labeled DRSs and dominance relations between these to talk about scope. First of all, we now first formally introduce DUDES: Definition 1 (DUDES) A DUDES is a 7-tuple (m, l, t, U, A, S, C) consisting of 272 Proceedings of the 8th International Conference on Computational Semantics, pages 272–276, Tilburg, January 2009. c�2009 International Conference on Computational Semantics - A main discourse referent m and a distinguished label l - The type t of the semantic structure (after inserting all arguments) - A set U of UDRS components.</context>
</contexts>
<marker>[6]</marker>
<rawString>H. Kamp and U. Reyle. From Discourse to Logic. Kluwer, 1993.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Uwe Reyle</author>
</authors>
<title>Dealing with ambiguities by underspecification: Construction, representation and deduction.</title>
<date>1993</date>
<journal>Journal of Semantics,</journal>
<volume>10</volume>
<issue>2</issue>
<contexts>
<context position="1764" citStr="[7]" startWordPosition="269" endWordPosition="269">ndencies (though the correspondence might be “inverted”). Second, they explicitly encode scope relations and are thus able to yield underspecified representations as output (in contrast to the linear logic approach for LFG [5] where different scopings correspond to different derivations). Third, there is one single operation for semantic composition which is, to some extent, order-independent (in contrast to traditional lambda-based formalisms) as well as flexible with respect to the direction of the syntactic dependency. As the name suggests, DUDES builds on DRT [6] and in particular on UDRT [7] in the sense that it relies on labeled DRSs and dominance relations between these to talk about scope. First of all, we now first formally introduce DUDES: Definition 1 (DUDES) A DUDES is a 7-tuple (m, l, t, U, A, S, C) consisting of 272 Proceedings of the 8th International Conference on Computational Semantics, pages 272–276, Tilburg, January 2009. c�2009 International Conference on Computational Semantics - A main discourse referent m and a distinguished label l - The type t of the semantic structure (after inserting all arguments) - A set U of UDRS components. These UDRS components are in </context>
</contexts>
<marker>[7]</marker>
<rawString>Uwe Reyle. Dealing with ambiguities by underspecification: Construction, representation and deduction. Journal of Semantics, 10(2):123–179, 1993.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>