<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000407">
<title confidence="0.9994585">
An Interface for Rapid Natural Language
Processing Development in UIMA
</title>
<note confidence="0.3902955">
Balaji R. Soundrarajan, Thomas Ginter, Scott L. DuVall
VA Salt Lake City Health Care System and University of Utah
</note>
<email confidence="0.964475">
balaji@cs.utah.edu, {thomas.ginter, scott.duvall}@utah.edu
</email>
<sectionHeader confidence="0.993183" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.960371263157895">
This demonstration presents the Annotation
Librarian, an application programming inter-
face that supports rapid development of natu-
ral language processing (NLP) projects built
in Apache Unstructured Information Man-
agement Architecture (UIMA). The flexibility
of UIMA to support all types of unstructured
data – images, audio, and text – increases the
complexity of some of the most common NLP
development tasks. The Annotation Librarian
interface handles these common functions and
allows the creation and management of anno-
tations by mirroring Java methods used to
manipulate Strings. The familiar syntax and
NLP-centric design allows developers to
adopt and rapidly develop NLP algorithms in
UIMA. The general functionality of the inter-
face is described in relation to the use cases
that necessitated its creation.
</bodyText>
<sectionHeader confidence="0.998901" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999937117647059">
In the days when public libraries were the center of
information exchange, the job of the librarian was
to serve as an interface between the complex li-
brary system and the average user. The librarian
made it possible for one to access specific sources
of information without memorizing the Dewey
Decimal System or flipping through the card cata-
log. Analogous to the great librarians of yesteryear,
the Annotation Librarian serves the average Java
developer in the creation and management of anno-
tations within natural language processing (NLP)
projects built using the open source Apache Un-
structured Information Management Architecture
(UIMA)1.
Many NLP tasks are performed in processing
steps that build upon one another. Systems de-
signed in this fashion are called pipelines because
</bodyText>
<footnote confidence="0.453579">
1 Apache UIMA is available from http://uima.apache.org/
</footnote>
<bodyText confidence="0.999863236842105">
text is processed and then passed from one step to
the next like water flowing through a pipe. Each
step in the pipeline adds structured data on top of
the text called annotations. An annotation can be
as simple as a classification of a span of text or
complex with attributes and mappings to coded
values. As pipeline systems have caught on, the
ability to standardize functionality in and even
across pipelines has emerged. UIMA provides a
powerful infrastructure for the storage, transport,
and retrieval of document and annotation
knowledge accumulated in NLP pipeline systems
(Ferrucci 2004). UIMA provides tools that allow
testing and visualizing system results, integration
with Eclipse2, and use of standard XML descrip-
tion files for maintainability and interoperability.
Because UIMA provides the underlying data mod-
el for storing meta-data and annotations with doc-
ument text and the interface for interacting
between processing steps, it has become a popular
platform for the development of reusable NLP sys-
tems (D’Avolio 2010, Coden 2009, Savova 2008).
The most notable example of UIMA capabilities is
Watson, the question-answering system that com-
peted and won two Jeopardy! matches against the
all-time-winning human champions (Ferrucci
2010).
In addition to its successful implementations in
NLP, UIMA supports all types of unstructured in-
formation – video, audio, images, etc – and so all
UIMA constructs generalize beyond text. While
handling multiple data types increases the utility of
the framework, developers new to UIMA may feel
they need to understand the entire framework be-
fore being able to distinguish and focus solely on
text. The Annotation Librarian aids both novice
and experienced UIMA developers by providing
intuitive and NLP-centric functionality.
</bodyText>
<footnote confidence="0.967598">
2 Eclipse Development Platform is available from
http://www.eclipse.org
</footnote>
<page confidence="0.926035">
139
</page>
<note confidence="0.4337195">
Proceedings of the ACL-HLT 2011 System Demonstrations, pages 139–144,
Portland, Oregon, USA, 21 June 2011. c�2011 Association for Computational Linguistics
</note>
<sectionHeader confidence="0.920471" genericHeader="introduction">
2 System Overview
</sectionHeader>
<bodyText confidence="0.999969295454545">
The Annotation Librarian was developed as an in-
terface that synthesizes many of the most frequent
annotation management tasks encountered in NLP
system development and presents them in a man-
ner easily accessed for those familiar with general
Java development methods. It provides conven-
ience methods that mirror Java String manipula-
tion, allowing developers to seamlessly combine
document text and annotations with the same
commands familiar to anyone who has parsed a
String or written a regular expression. Advanced
functionality allows developers to examine spatial
relationships among annotations and perform an-
notation pattern matching. In this demonstration,
we present the general functionality of the Annota-
tion Librarian in the context of the health care re-
search projects that necessitated the creation of the
interface.
The interface does not replace the need for NLP
algorithms – developers have a plethora of patterns
and decision rules, symbolic grammars, and ma-
chine learning techniques to create annotations.
The Annotation Toolkit, though, provides a con-
venient way for developers to use existing annota-
tions in their algorithms. This feeds the pipeline
workflow that allows more complex annotations to
be built in later processing steps using the annota-
tions created in earlier steps.
The Annotation Librarian was developed and
modified in response to four research projects in
the health care domain that relied on NLP extrac-
tion of concepts from clinical text. The diversity of
the different tasks in each of these use cases al-
lowed the interface to include functionality com-
mon to different types of NLP system
development. Interface functionality will be de-
scribed as groups of related methods in the context
of the four research projects and cover pattern
matching, span overlap, relative position, annota-
tion modification, and retrieval. All projects re-
ceived Institutional Review Board approval for
data use and only synthetic documents, not real
patient records, are shown in the examples present-
ed in this paper.
</bodyText>
<sectionHeader confidence="0.994316" genericHeader="method">
3 Pattern Matching
</sectionHeader>
<bodyText confidence="0.999967282608696">
Name entity recognition and semantic classifica-
tion tasks often require advanced concept identifi-
cation techniques. Identifying mentions of pre-
scriptions in a document using regular expressions,
for example, would require hundreds of thousands
of patterns for names of medicines and have to ac-
count for misspelling, abbreviations, and acro-
nyms. Regular expressions are commonly used to
solve simple NLP tasks, though, and can be uti-
lized as part of a more complex information extrac-
tion strategy, such as understanding the context in
which a term is used in the text (Garvin 2011,
McCrae 2008, Frenz 2007, Chapman 2001). Negex
(Chapman 2001) is an algorithm for identifying
words before or after a term that suggest, for ex-
ample, that a particular symptom is not present in a
patient: “the patient has no fever.” Other methods
for understanding the context around terms include
the use of an inclusion and exclusion list (Akbar
2009), temporal locality search (Grouin 2009),
window search (Li 2009), and combinations of the
above techniques (Hamon 2009).
The Annotation Librarian allows patterns to be
built using existing annotations along with docu-
ment text. This functionality combines the power
of finding concepts that require complex means
with the simplicity of regular expressions. The syn-
tax mirrors that of the Java Pattern3 and Matcher4
classes, but allows for an extended regular expres-
sion grammar to identify Annotations. Pattern
matching is accomplished in three phases: the in-
put pattern is compiled, the document and annota-
tions are analyzed for matches, and matches are
returned along with span information.
A project identifying positive microbiology cul-
tures will illustrate the use of pattern matching
with the Annotation Librarian. Clinicians order
microbiology cultures to determine whether a pa-
tient has a bacterial infection and which antibiotics
would be most effective at treating the infection.
Susceptibility is the measure of whether an antibi-
otic can effectively treat an organism or whether
the organism is resistant to it.
A sample of microbiology report text is shown
in Figure 1 and visualized annotations for the same
sample are shown in Figure 2.
</bodyText>
<footnote confidence="0.6792175">
3 Documented at
http://download.oracle.com/javase/6/docs/api/java/util/regex/
Pattern.html
4 Documented at
http://download.oracle.com/javase/6/docs/api/java/util/regex/
Matcher.html
</footnote>
<page confidence="0.978318">
140
</page>
<figureCaption confidence="0.999834">
Figure 2: Annotated Report
</figureCaption>
<bodyText confidence="0.999891">
To demonstrate pattern matching in this sample,
the simple pattern of a drug annotation followed by
an equals sign and then by a susceptibility annota-
tion will be used.
</bodyText>
<subsectionHeader confidence="0.989909">
3.1 Pattern Compilation
</subsectionHeader>
<bodyText confidence="0.967833076923077">
The pattern matching process begins when a new
instance of an AnnotationPattern is created from
the static compile method. AnnotationPattern is
analogous to the Java Pattern3 class.
AnnotationPattern susceptibilityPattern =
AnnotationPattern.compile(“pattern”);
The method takes advantage of the UIMA im-
plementation of annotations. Each annotation is an
instance of a class that inherits from the UIMA
class Annotation5. UIMA allows developers to cre-
ate new types of annotations (in this example Or-
ganism, Antibiotic, and Susceptibility) that become
Java classes.
</bodyText>
<footnote confidence="0.82831">
5 Documented at http://uima.apache.org/d/uimaj-
2.3.1/api/index.html
</footnote>
<bodyText confidence="0.979611363636364">
The compile method input string pattern uses
XML tags to represent Annotation classes and tag
attributes to denote the name of method calls and
return values in the format of:
&lt;AnnotationClass methodName=“expected value” /&gt;
When the extra constraint of matching on some
method return values is not needed, the tag attrib-
ute is left blank. Portions of the pattern that are not
contained in XML tags are compiled as Java regu-
lar expressions. For our example, the input pattern
would be:
</bodyText>
<equation confidence="0.988015">
&lt;Antibiotic /&gt; = &lt;Susceptibility /&gt;
or further constrained as:
&lt;Antibiotic getMedName=“ciprofloxacin” /&gt; =
&lt;Susceptibility getValue=“S” /&gt;
</equation>
<bodyText confidence="0.99974875">
which would only match if the particular medica-
tion (ciprofloxacin) and susceptibility (S) matched
as well.
The pattern is converted into a finite state ma-
chine (FSM) in a process described by Fegaras
(2005). With our pattern, a four-state FSM would
be generated. To arrive in State 1, an Antibiotic
annotation must match. To arrive in State 2, a
regular expression for “=” must match. The Final
State is reached when a matching Susceptibility
annotation is found. Any other input would result
in a transition back to the Start State.
</bodyText>
<figureCaption confidence="0.993129">
Figure 3: FSM for Antibiotic Susceptibility
</figureCaption>
<subsectionHeader confidence="0.999662">
3.2 Match Analysis
</subsectionHeader>
<bodyText confidence="0.981478153846154">
The second phase of pattern matching processes
the document text and annotation set to determine
if any matches can be found. This phase is trig-
gered by a call to the static matcher method that
returns a new instance of an AnnotationMatcher
object. AnnotationMatcher is analogous to the Java
Matcher4 class.
AnnotationMatcher suscMatcher =
susceptibilityPattern.matcher(cas);
This phase just checks to ensure that each anno-
tation type has at least one instance in the docu-
ment. Otherwise, a pattern match is not possible.
Here, the cas parameter refers to the UIMA
</bodyText>
<figureCaption confidence="0.998418">
Figure 1: Microbiology Report Text
</figureCaption>
<page confidence="0.986562">
141
</page>
<bodyText confidence="0.97462">
Common Analysis Structure, the object containing
the document and annotation information.
</bodyText>
<subsectionHeader confidence="0.999141">
3.3 Finding Matches
</subsectionHeader>
<bodyText confidence="0.9999586">
The final phase of pattern matching involves a call
to the AnnotationMatcher find method. This call
results in a FSM traversal at the starting position
parameter. Duplicate match candidates starting at
the same point are pooled in each state. The candi-
date pool in each state is traversed with a binary
search algorithm, which reduces overall traversal
time. Note the following example in which a rela-
tionship is created through a new user-defined An-
notation class type.
</bodyText>
<equation confidence="0.9859689">
int position = 0 ;
while(suscMatcher.find(position))
{
AntibioticSusceptibility annotation =
new AntibioticSusceptibility(cas) ;
annotation.setBegin(suscMatcher.start()) ;
annotation.setEnd(suscMatcher.end()) ;
annotation.addToIndexes() ;
position = matcher.end() ;
}//while
</equation>
<bodyText confidence="0.999973555555556">
Similar to the Java Matcher4 find method, the
first match is found from the starting position. The
start and end positions are also set within the An-
notationMatcher instance object, which facilitates
the creation of new annotations that span the com-
plete pattern. The Annotation Librarian pattern
matching functionality allows the inclusion of an-
notations, which provides an added level of power
beyond regular expressions on text data only.
</bodyText>
<sectionHeader confidence="0.999468" genericHeader="method">
4 Retrieval
</sectionHeader>
<bodyText confidence="0.9999296">
The retrieval methods allow developers to interact
with annotations and metadata. This set of methods
includes the ability to get the file name and path of
the document, get all annotations in the document,
and get all annotations of just a particular type.
</bodyText>
<equation confidence="0.951824">
getDocumentPath()
getAllAnnotations()
getAllAnnotationsOfType( int type )
</equation>
<bodyText confidence="0.997356833333333">
Ejection fraction is a heart health measurement. An
NLP system was developed to identify the ejection frac-
tion from echocardiogram reports. In this project, the
Annotation Librarian facilitated the extraction of specif-
ic annotation types (the section the concept was found
in) in order to discover relevant concept-value pairs.
In Figure 4, ejection fraction annotations are shown
in red and quantitative and qualitative values in blue.
Because “systolic function” can be used to report ejec-
tion fraction, but only when referring to the left side of
the heart, it was important to retrieve the section annota-
tions and check the header.
</bodyText>
<figureCaption confidence="0.998944">
Figure 4: Annotated Echocardiogram Report
</figureCaption>
<sectionHeader confidence="0.987659" genericHeader="method">
5 Annotation Modification
</sectionHeader>
<bodyText confidence="0.9999295">
The annotation modification methods allow previ-
ous annotations to be altered by trimming
whitespace and removing punctuation. While these
are trivial tasks performed on Java Strings, an an-
notation is just a pointer to the text. Updating the
annotation with the correct character span requires
understanding of UIMA functions and can intro-
duce errors if not done carefully. The Annotation
Librarian ensures accuracy by handling these tasks
with straightforward programmatic calls.
</bodyText>
<equation confidence="0.5334625">
trim( Annotation annotation )
removePunctuation( Annotation annotation )
</equation>
<bodyText confidence="0.997387">
Identifying the organisms from the microbiolo-
gy reports relied on splitting template text. The
project described in Section 3 for pattern matching
utilized the Annotation Librarian functionality to
clean up spurious characters and whitespace in-
cluded in annotations.
</bodyText>
<sectionHeader confidence="0.946303" genericHeader="method">
6 Span Overlap
</sectionHeader>
<bodyText confidence="0.9995486">
This set of methods describes how annotations re-
late to each other spatially by answering questions
such as: Does one annotation completely contain
the other? Do the annotations overlap in the text?
Do they both cover the same span of text?
</bodyText>
<reference confidence="0.448314">
overlaps( Annotation a1, Annotation a2 )
contains( Annotation a1, Annotation a2 )
coversSameSpan( Annotation a1, Annotation a2 )
</reference>
<page confidence="0.997349">
142
</page>
<bodyText confidence="0.9998501">
In a system built for identifying medications in
discharge summaries, the brand and generic names
would often both be listed. Name entity recogni-
tion would end up mapping at multiple granulari-
ties – brand name only, generic name only, brand
and generic name combinations, and even name
and dose combinations. The span overlap methods
were used to identify and combine overlapping
names. Figure 5 shows the annotations that were
found and resolved using span overlaps.
</bodyText>
<figureCaption confidence="0.99677">
Figure 5: Medication Extraction Use Case
</figureCaption>
<sectionHeader confidence="0.989216" genericHeader="method">
7 Relative Position
</sectionHeader>
<bodyText confidence="0.999963454545455">
The relative position methods allow developers to
access annotations based on their position in the
text to each other. These methods can determine
the next or previous adjacent annotation or the text
that exists between two annotations. Often, a task
required determining which concepts were found
in the same sentence or finding all concepts in a
certain section. Methods in this set provide func-
tionality to find annotations that covering the span
of another annotations or all annotations contained
within the span of another annotation.
</bodyText>
<equation confidence="0.92975975">
getContainingAnnotations( Annotation a1 )
getNextClosest( Annotation a1 )
getPreviousClosest( Annotation a1 )
getTextBetween( Annotation a1, Annotation a2 )
</equation>
<bodyText confidence="0.999918555555556">
As part of a project to determine coreference in dis-
ease outbreak reports, the ability to determine relative
position facilitated coreference resolution. It was also
necessary to determine relationships between certain
types of annotations from the window of the text. The
Annotation Librarian simplified the task of determining
co-location by providing the functionality within a sin-
gle method call. Text between two Annotation objects
was similarly identified with a single method call.
</bodyText>
<figureCaption confidence="0.99312">
Figure 6: Disease Outbreak Reports Use Case
</figureCaption>
<sectionHeader confidence="0.984118" genericHeader="method">
8 Conclusion
</sectionHeader>
<bodyText confidence="0.99994765">
The Annotation Librarian was developed and mod-
ified over a number of different NLP use cases.
Because of the diversity of tasks in each of these
use cases, the toolkit includes functionality com-
mon to various types of NLP system development.
It includes over two-dozen functions that were
used more than one hundred times in each of the
four systems listed above. Use of this interface re-
duced the amount of repeated code; it simplified
common tasks, and provided an intuitive interface
for NLP-centric annotation management without
requiring the presence of an NLP developer who
has intimate knowledge of the UIMA data struc-
ture. The extended capability provided by the pat-
tern matching methods allows system developers
to capitalize on the pipeline approach to NLP de-
velopment in determining patterns. The ability to
use annotations along with text significantly in-
creases the types of patterns that can be identified
without complex regular expressions.
</bodyText>
<sectionHeader confidence="0.989811" genericHeader="discussions">
9 Future Plans
</sectionHeader>
<bodyText confidence="0.999947166666666">
The Annotation Librarian has been enhanced over
the course of a number of biomedical NLP use
cases and we plan to continue to enhance the inter-
face as new use cases arise. Some planned en-
hancements include performance improvements
and expanding the AnnotationPattern input pattern
syntax to include regular expressions for method
return values and annotation class names. We plan
to provide additional functionality such as pattern
frequency counts.
We see the ability for the Annotation Librarian
to help identify patterns through active learning or
</bodyText>
<page confidence="0.997111">
143
</page>
<bodyText confidence="0.999961285714286">
unsupervised techniques. In this way, relationships
between annotations could be inferred based on
those existing in the document set. Such function-
ality would also provide the ability for more intel-
ligent analysis of future document sets or
observation systems by allowing previously identi-
fied relationships to be utilized in other use cases.
</bodyText>
<sectionHeader confidence="0.997385" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.999785">
This work was supported using resources and facil-
ities at the VA Salt Lake City Health Care System
with funding support from the VA Informatics and
Computing Infrastructure (VINCI), VA HSR HIR
08-204 and the Consortium for Healthcare Infor-
matics Research (CHIR), VA HSR HIR 08-374.
Views expressed are those of the authors and not
necessarily those of the Department of Veterans
Affairs.
</bodyText>
<sectionHeader confidence="0.998945" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999921525641026">
Annin Coden, Guergana K. Savova, Igor L. Sominsky,
Michael A. Tanenblatt, James J. Masanz, Karin
Schuler, James W. Cooper, Wei Guan, Piet C. de
Groen. 2009. Automatically extracting cancer dis-
ease characteristics from pathology reports into a
Disease Knowledge Representation Model. J Bio-
med Inform. 2009 Oct;42(5):937-49.
Christopher M. Frenz. 2007. Deafness mutation min-
ing using regular expression based pattern match-
ing. BMC Med Inform Decis Mak. 2007 Oct
25;7:32.
Cyril Grouin, Louise Deleger, and Pierre Zweigen-
baum. 2009. COKAINE, A Simple Rule-based
Medication Extraction System. i2b2 Workshop in
conjunction with the AMIA Annual Symposium,
San Francisco, CA; November 13, 2009.
David Ferrucci and Adam Lally. 2004. UIMA: An Ar-
chitectural Approach to Unstructured Information
Processing in the Corporate Research Environment.
Natural Langage Engineering 10(3–4): 327–348.
David Ferrucci, Eric Brown, Jennifer Chu-Carroll,
James Fan, David Gondek, Aditya A. Kalyanpur,
Adam Lally, J. William Murdock, Eric Nyberg,
John Prager, Nico Schlaefer, and Chris Welty.
2010. Building Watson: An Overview of the
DeepQA Project. AI Magazine. Vol 31. No 3.
Guergana K. Savova, Karin Kipper-Schuler, James D.
Buntrock, Christopher G. Chute. 2008. UIMA-
based clinical information extraction system. LREC
2008: Towards enhanced interoperability for large
HLT systems: UIMA for NLP.
Jennifer H. Garvin, Brett R. South, Dan Bolton, Shuy-
ing Shen, Scott L. DuVall, Bruce Bray, Paul Hei-
denreich, Matthew H. Samore, and Mary K.
Goldstein. 2011. Automated Extraction of Ejection
Fraction (EF) for Heart Failure (HF) from VA
Echocardiogram Reports. Department of Veterans
Affairs Health Services Research and Development
National Meeting. 2011 Feb 16.
John McCrae, Nigel Collier. 2008. Synonym set ex-
traction from the biomedical literature by lexical
pattern discovery. BMC Bioinformatics. 2008 Mar
24;9:159.
Leonard W. D&apos;Avolio, Thien M. Nguyen, Wildon R.
Farwell, Yong Chen, Felicia Fitzmeyer, Owen M.
Harris, Louis D. Fiore. 2010. Evaluation of a gen-
eralizable approach to clinical information retrieval
using the automated retrieval console (ARC). J Am
Med Inform Assoc. 2010 Jul-Aug;17(4):375-82.
Leonidas Fegaras. 2005. Converting a Regular Ex-
pression into a Deterministic Finite Automaton.
http://lambda.uta.edu/cse5317/notes/node9.html.
Pulled February 2011.
Saiful Akbar, Thomas Brox R¿st, Laura Slaughter,
and ¯ystein Nytr¿. 2009. Extracting Medication In-
formation from Patient Discharge Summaries. i2b2
Workshop in conjunction with the AMIA Annual
Symposium, San Francisco, CA; November 13,
2009.
Thierry Hamon and Natalia Grabar. 2009 . Concurrent
linguistic annotations for identifying medication
names and the related information in discharge
summaries. i2b2 Workshop in conjunction with the
AMIA Annual Symposium, San Francisco, CA;
November 13, 2009.
Wendy W. Chapman, Will Bridewell, Paul Hanbury,
Gregory F. Cooper, and Bruce G. Buchanan. 2001.
A Simple Algorithm for Identifying Negated Find-
ings and Diseases in Discharge Summaries. Chap-
man WW, Bridewell W, Hanbury P, Cooper GF,
Buchanan BG. J Biomed Inform. 2001
Oct;34(5):301-10.
Zuofeng Li, Yonggang Cao, Lamont Antieau,
Shashank Agarwal, Qing Zhang, and Hong Yu.
2009. Extracting Medication Information from Pa-
tient Discharge Summaries. i2b2 Workshop in con-
junction with the AMIA Annual Symposium, San
Francisco, CA; November 13, 2009.
</reference>
<page confidence="0.998595">
144
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.809378">
<title confidence="0.9957925">An Interface for Rapid Natural Processing Development in UIMA</title>
<author confidence="0.994509">Balaji R Soundrarajan</author>
<author confidence="0.994509">Thomas Ginter</author>
<author confidence="0.994509">L Scott</author>
<affiliation confidence="0.833908">VA Salt Lake City Health Care System and University of</affiliation>
<email confidence="0.997892">balaji@cs.utah.edu,{thomas.ginter,scott.duvall}@utah.edu</email>
<abstract confidence="0.9989791">This demonstration presents the Annotation Librarian, an application programming interface that supports rapid development of natural language processing (NLP) projects built in Apache Unstructured Information Management Architecture (UIMA). The flexibility of UIMA to support all types of unstructured data – images, audio, and text – increases the complexity of some of the most common NLP development tasks. The Annotation Librarian interface handles these common functions and allows the creation and management of annotations by mirroring Java methods used to manipulate Strings. The familiar syntax and NLP-centric design allows developers to adopt and rapidly develop NLP algorithms in UIMA. The general functionality of the interface is described in relation to the use cases that necessitated its creation.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="false">
<booktitle>overlaps( Annotation a1, Annotation a2 ) contains( Annotation a1, Annotation a2 ) coversSameSpan( Annotation a1, Annotation a2 )</booktitle>
<marker></marker>
<rawString>overlaps( Annotation a1, Annotation a2 ) contains( Annotation a1, Annotation a2 ) coversSameSpan( Annotation a1, Annotation a2 )</rawString>
</citation>
<citation valid="true">
<authors>
<author>Annin Coden</author>
<author>Guergana K Savova</author>
<author>Igor L Sominsky</author>
<author>Michael A Tanenblatt</author>
<author>James J Masanz</author>
<author>Karin Schuler</author>
<author>James W Cooper</author>
<author>Wei Guan</author>
<author>Piet C de Groen</author>
</authors>
<title>Automatically extracting cancer disease characteristics from pathology reports into a Disease Knowledge Representation Model. J Biomed Inform.</title>
<date>2009</date>
<pages>42--5</pages>
<marker>Coden, Savova, Sominsky, Tanenblatt, Masanz, Schuler, Cooper, Guan, de Groen, 2009</marker>
<rawString>Annin Coden, Guergana K. Savova, Igor L. Sominsky, Michael A. Tanenblatt, James J. Masanz, Karin Schuler, James W. Cooper, Wei Guan, Piet C. de Groen. 2009. Automatically extracting cancer disease characteristics from pathology reports into a Disease Knowledge Representation Model. J Biomed Inform. 2009 Oct;42(5):937-49.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Christopher M Frenz</author>
</authors>
<title>Deafness mutation mining using regular expression based pattern matching. BMC Med Inform Decis Mak.</title>
<date>2007</date>
<pages>25--7</pages>
<contexts>
<context position="6623" citStr="Frenz 2007" startWordPosition="1006" endWordPosition="1007">ching Name entity recognition and semantic classification tasks often require advanced concept identification techniques. Identifying mentions of prescriptions in a document using regular expressions, for example, would require hundreds of thousands of patterns for names of medicines and have to account for misspelling, abbreviations, and acronyms. Regular expressions are commonly used to solve simple NLP tasks, though, and can be utilized as part of a more complex information extraction strategy, such as understanding the context in which a term is used in the text (Garvin 2011, McCrae 2008, Frenz 2007, Chapman 2001). Negex (Chapman 2001) is an algorithm for identifying words before or after a term that suggest, for example, that a particular symptom is not present in a patient: “the patient has no fever.” Other methods for understanding the context around terms include the use of an inclusion and exclusion list (Akbar 2009), temporal locality search (Grouin 2009), window search (Li 2009), and combinations of the above techniques (Hamon 2009). The Annotation Librarian allows patterns to be built using existing annotations along with document text. This functionality combines the power of fi</context>
</contexts>
<marker>Frenz, 2007</marker>
<rawString>Christopher M. Frenz. 2007. Deafness mutation mining using regular expression based pattern matching. BMC Med Inform Decis Mak. 2007 Oct 25;7:32.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Cyril Grouin</author>
<author>Louise Deleger</author>
<author>Pierre Zweigenbaum</author>
</authors>
<title>COKAINE, A Simple Rule-based Medication Extraction System.</title>
<date>2009</date>
<booktitle>i2b2 Workshop in conjunction with the AMIA Annual Symposium,</booktitle>
<location>San Francisco, CA;</location>
<marker>Grouin, Deleger, Zweigenbaum, 2009</marker>
<rawString>Cyril Grouin, Louise Deleger, and Pierre Zweigenbaum. 2009. COKAINE, A Simple Rule-based Medication Extraction System. i2b2 Workshop in conjunction with the AMIA Annual Symposium, San Francisco, CA; November 13, 2009.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David Ferrucci</author>
<author>Adam Lally</author>
</authors>
<title>UIMA: An Architectural Approach to Unstructured Information Processing in the Corporate Research Environment.</title>
<date>2004</date>
<journal>Natural Langage Engineering</journal>
<volume>10</volume>
<issue>3</issue>
<pages>327--348</pages>
<marker>Ferrucci, Lally, 2004</marker>
<rawString>David Ferrucci and Adam Lally. 2004. UIMA: An Architectural Approach to Unstructured Information Processing in the Corporate Research Environment. Natural Langage Engineering 10(3–4): 327–348.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David Ferrucci</author>
<author>Eric Brown</author>
<author>Jennifer Chu-Carroll</author>
<author>James Fan</author>
<author>David Gondek</author>
<author>Aditya A Kalyanpur</author>
<author>Adam Lally</author>
<author>J William Murdock</author>
<author>Eric Nyberg</author>
<author>John Prager</author>
<author>Nico Schlaefer</author>
<author>Chris Welty</author>
</authors>
<title>Building Watson: An Overview of the DeepQA Project.</title>
<date>2010</date>
<journal>AI Magazine. Vol</journal>
<volume>31</volume>
<marker>Ferrucci, Brown, Chu-Carroll, Fan, Gondek, Kalyanpur, Lally, Murdock, Nyberg, Prager, Schlaefer, Welty, 2010</marker>
<rawString>David Ferrucci, Eric Brown, Jennifer Chu-Carroll, James Fan, David Gondek, Aditya A. Kalyanpur, Adam Lally, J. William Murdock, Eric Nyberg, John Prager, Nico Schlaefer, and Chris Welty. 2010. Building Watson: An Overview of the DeepQA Project. AI Magazine. Vol 31. No 3.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Guergana K Savova</author>
<author>Karin Kipper-Schuler</author>
<author>James D Buntrock</author>
<author>Christopher G Chute</author>
</authors>
<title>UIMAbased clinical information extraction system. LREC 2008: Towards enhanced interoperability for large HLT systems: UIMA for NLP.</title>
<date>2008</date>
<marker>Savova, Kipper-Schuler, Buntrock, Chute, 2008</marker>
<rawString>Guergana K. Savova, Karin Kipper-Schuler, James D. Buntrock, Christopher G. Chute. 2008. UIMAbased clinical information extraction system. LREC 2008: Towards enhanced interoperability for large HLT systems: UIMA for NLP.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jennifer H Garvin</author>
<author>Brett R South</author>
<author>Dan Bolton</author>
<author>Shuying Shen</author>
<author>Scott L DuVall</author>
<author>Bruce Bray</author>
<author>Paul Heidenreich</author>
<author>Matthew H Samore</author>
<author>Mary K Goldstein</author>
</authors>
<title>Automated Extraction of Ejection Fraction (EF) for Heart Failure (HF) from VA Echocardiogram Reports. Department of Veterans Affairs Health Services Research and Development National Meeting.</title>
<date>2011</date>
<marker>Garvin, South, Bolton, Shen, DuVall, Bray, Heidenreich, Samore, Goldstein, 2011</marker>
<rawString>Jennifer H. Garvin, Brett R. South, Dan Bolton, Shuying Shen, Scott L. DuVall, Bruce Bray, Paul Heidenreich, Matthew H. Samore, and Mary K. Goldstein. 2011. Automated Extraction of Ejection Fraction (EF) for Heart Failure (HF) from VA Echocardiogram Reports. Department of Veterans Affairs Health Services Research and Development National Meeting. 2011 Feb 16.</rawString>
</citation>
<citation valid="true">
<authors>
<author>John McCrae</author>
<author>Nigel Collier</author>
</authors>
<title>Synonym set extraction from the biomedical literature by lexical pattern discovery. BMC Bioinformatics.</title>
<date>2008</date>
<marker>McCrae, Collier, 2008</marker>
<rawString>John McCrae, Nigel Collier. 2008. Synonym set extraction from the biomedical literature by lexical pattern discovery. BMC Bioinformatics. 2008 Mar 24;9:159.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Leonard W D&apos;Avolio</author>
<author>Thien M Nguyen</author>
<author>Wildon R Farwell</author>
<author>Yong Chen</author>
<author>Felicia Fitzmeyer</author>
<author>Owen M Harris</author>
<author>Louis D Fiore</author>
</authors>
<title>Evaluation of a generalizable approach to clinical information retrieval using the automated retrieval console (ARC). J Am Med Inform Assoc.</title>
<date>2010</date>
<pages>17--4</pages>
<marker>D&apos;Avolio, Nguyen, Farwell, Chen, Fitzmeyer, Harris, Fiore, 2010</marker>
<rawString>Leonard W. D&apos;Avolio, Thien M. Nguyen, Wildon R. Farwell, Yong Chen, Felicia Fitzmeyer, Owen M. Harris, Louis D. Fiore. 2010. Evaluation of a generalizable approach to clinical information retrieval using the automated retrieval console (ARC). J Am Med Inform Assoc. 2010 Jul-Aug;17(4):375-82.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Leonidas Fegaras</author>
</authors>
<title>Converting a Regular Expression into a Deterministic Finite Automaton.</title>
<date>2005</date>
<note>http://lambda.uta.edu/cse5317/notes/node9.html. Pulled</note>
<contexts>
<context position="10071" citStr="Fegaras (2005)" startWordPosition="1516" endWordPosition="1517">ue” /&gt; When the extra constraint of matching on some method return values is not needed, the tag attribute is left blank. Portions of the pattern that are not contained in XML tags are compiled as Java regular expressions. For our example, the input pattern would be: &lt;Antibiotic /&gt; = &lt;Susceptibility /&gt; or further constrained as: &lt;Antibiotic getMedName=“ciprofloxacin” /&gt; = &lt;Susceptibility getValue=“S” /&gt; which would only match if the particular medication (ciprofloxacin) and susceptibility (S) matched as well. The pattern is converted into a finite state machine (FSM) in a process described by Fegaras (2005). With our pattern, a four-state FSM would be generated. To arrive in State 1, an Antibiotic annotation must match. To arrive in State 2, a regular expression for “=” must match. The Final State is reached when a matching Susceptibility annotation is found. Any other input would result in a transition back to the Start State. Figure 3: FSM for Antibiotic Susceptibility 3.2 Match Analysis The second phase of pattern matching processes the document text and annotation set to determine if any matches can be found. This phase is triggered by a call to the static matcher method that returns a new i</context>
</contexts>
<marker>Fegaras, 2005</marker>
<rawString>Leonidas Fegaras. 2005. Converting a Regular Expression into a Deterministic Finite Automaton. http://lambda.uta.edu/cse5317/notes/node9.html. Pulled February 2011.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Saiful Akbar</author>
<author>Thomas Brox R¿st</author>
<author>Laura Slaughter</author>
<author>¯ystein Nytr¿</author>
</authors>
<title>Extracting Medication Information from Patient Discharge Summaries.</title>
<date>2009</date>
<booktitle>i2b2 Workshop in conjunction with the AMIA Annual Symposium,</booktitle>
<location>San Francisco, CA;</location>
<marker>Akbar, R¿st, Slaughter, Nytr¿, 2009</marker>
<rawString>Saiful Akbar, Thomas Brox R¿st, Laura Slaughter, and ¯ystein Nytr¿. 2009. Extracting Medication Information from Patient Discharge Summaries. i2b2 Workshop in conjunction with the AMIA Annual Symposium, San Francisco, CA; November 13, 2009.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Thierry Hamon</author>
<author>Natalia Grabar</author>
</authors>
<title>Concurrent linguistic annotations for identifying medication names and the related information in discharge summaries.</title>
<date>2009</date>
<booktitle>i2b2 Workshop in conjunction with the AMIA Annual Symposium,</booktitle>
<location>San Francisco, CA;</location>
<marker>Hamon, Grabar, 2009</marker>
<rawString>Thierry Hamon and Natalia Grabar. 2009 . Concurrent linguistic annotations for identifying medication names and the related information in discharge summaries. i2b2 Workshop in conjunction with the AMIA Annual Symposium, San Francisco, CA; November 13, 2009.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Wendy W Chapman</author>
<author>Will Bridewell</author>
<author>Paul Hanbury</author>
<author>Gregory F Cooper</author>
<author>Bruce G Buchanan</author>
</authors>
<title>A Simple Algorithm for Identifying Negated Findings and Diseases in Discharge Summaries.</title>
<date>2001</date>
<pages>34--5</pages>
<publisher>Chapman</publisher>
<marker>Chapman, Bridewell, Hanbury, Cooper, Buchanan, 2001</marker>
<rawString>Wendy W. Chapman, Will Bridewell, Paul Hanbury, Gregory F. Cooper, and Bruce G. Buchanan. 2001. A Simple Algorithm for Identifying Negated Findings and Diseases in Discharge Summaries. Chapman WW, Bridewell W, Hanbury P, Cooper GF, Buchanan BG. J Biomed Inform. 2001 Oct;34(5):301-10.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Zuofeng Li</author>
<author>Yonggang Cao</author>
<author>Lamont Antieau</author>
<author>Shashank Agarwal</author>
<author>Qing Zhang</author>
<author>Hong Yu</author>
</authors>
<title>Extracting Medication Information from Patient Discharge Summaries.</title>
<date>2009</date>
<booktitle>i2b2 Workshop in conjunction with the AMIA Annual Symposium,</booktitle>
<location>San Francisco, CA;</location>
<marker>Li, Cao, Antieau, Agarwal, Zhang, Yu, 2009</marker>
<rawString>Zuofeng Li, Yonggang Cao, Lamont Antieau, Shashank Agarwal, Qing Zhang, and Hong Yu. 2009. Extracting Medication Information from Patient Discharge Summaries. i2b2 Workshop in conjunction with the AMIA Annual Symposium, San Francisco, CA; November 13, 2009.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>