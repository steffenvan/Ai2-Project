<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000154">
<title confidence="0.830823">
An Extension of Earley&apos;s Algorithm for
S-Attributed Grammars
</title>
<author confidence="0.996302">
Nelson Correa
</author>
<affiliation confidence="0.718345333333333">
Department of Electrical Engineering
Universidad de los Andes
Apartado Aereo 4976, Bogota, D.E., Colombia
</affiliation>
<email confidence="0.333302">
bitnet : NCORREA at ANDESCOL
</email>
<sectionHeader confidence="0.810896" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999580454545455">
Attribute grammars arc an elegant formalization of the
augmented context-free grammars characteristic of most
current natural language systems. This paper presents
an extension of Earley&apos;s algorithm to Knuth&apos;s attribute
grammars, considering the case of S-attributed
grammars. For this case, we study the conditions on
the underlying base grammar under which the extended
algorithm may be guaranteed to terminate. Finite
partitioning of attribute domains is proposed to
guarantee the termination of the algorithm, without the
need for any restrictions on the context-free base.
</bodyText>
<sectionHeader confidence="0.84119" genericHeader="keywords">
I. Introduction
</sectionHeader>
<bodyText confidence="0.999831306451613">
Earley&apos;s (1970) algorithm is a general algorithm for
context-free languages, widely used in natural language
processing (King, 1983; Shicbcr, 1985) and syntactic
pattern recognition (Fu, 1982), where the full generative
power of context-free grammar is required. The original
algorithm and its common implementations, however,
assume the atomic symbols of context-free grammars,
thus limiting its applicability to systems with attributed
symbols, or attribute grammars (Knuth, 1968).
Attribute grammar is an elegant formalization of the
augmented context-free grammars characteristic of most
current NLP systems. It is more general than members
of the family of unification-based grammar formalisms
(Kay, 1985; Shieber, 1986), mainly in that it allows
and encourages the use of simpler attribution functions
than unification for the definition of attribute values,
and hence can lead to computationally efficient
grammatical definitions, while maintaining the
advantages of a well-understood declarative formalism.
Attribute grammar has been used in the past by the
author to define computational models of Chomsky&apos;s
Government-binding theory, from which practical
parsing programs were developed (Correa, 1987a).
Many systems based on Earley&apos;s algorithm have a clear
division between the phases of syntactic and semantic
analysis. Yellin (1988), for instance, uses a syntactic
analysis phase in which Earley&apos;s algorithm builds a
factored parse tree (FPT) for the given input, which is
then followed by up to two phases of semantic analysis,
during which the FPI&apos; is attributed and evaluated. Watt
(1980) and Jones and Madsen (1980) propose a close
interaction between syntactic and semantic analysis in
the form of &amp;quot;attribute-directed&amp;quot; parsing. However, their
particular realization of the technique is severely
restricted for NLP applications, since it uses a
deterministic one-path (LR) algorithm, applicable only
to semantically unambiguous grammars.
Pereira and Warren (1983) and Shieber (1985) present
versions of Earley&apos;s algorithm for unification grammars,
in which unification is the sole operation responsible
for attribute evaluation. However, given the high
computational cost of unification, important differences
between attribute and unification grammars in their
respective attribution domains and functions (Correa,
forthcoming), and the more general nature of attribute
grammars in this regard, ills of interest to investigate
the extension of Earley&apos;s algorithm directly to the main
subclasses of attribute grammar.
The paper is organized as follows: Section 2 presents
preliminary elements, including a definition of attribute
grammar and Earley&apos;s algorithm. Section 3 presents the
extension of the algorithm for S-attributed grammars.
In Section 4, we consider the conditions on the
underlying grammar under which the extended algorithm
may be guaranteed to terminate for each input. For the
S-attributed case we show that the algorithm terminates
if the grammar has no cycles or, equivalently, if it is
finitely ambiguous. However, finite partitioning of
attribute domains may be used to guarantee the
termination of the algorithm, without the need for
restrictions on the context-free base. Finally, a
conclusion and note on implementation are given.
</bodyText>
<sectionHeader confidence="0.45465" genericHeader="introduction">
2. Notation and Preliminaries
</sectionHeader>
<bodyText confidence="0.990835113636364">
We follow the usual notation and terminology for
grammars and languages. A language is a set of strings
over a finite set T of symbols. A grammar is a formal
device for specifying which strings are in the set. In
particular, a context-free grammar is a cuadruple
- 299 -
(N, T, P, S), where N is a finite set of string
categories; T a finite set of terminal symbols; P a finite
set of productions or rewriting rules of the form X---)a,
XE N, CIE (NuT)*; and S a distinguished symbol of N.
A binary relation of derivation between strings over
the vocalulary NuT of the grammar is defined such that
aXf = aaf3 iff a is a production of P; now,
may be defined as the reflexive and transitive closure of
The language generated by the grammar, noted
L(G), is the set of strings we T*, such that S to.
An attribute grammar is defined upon a context-free
grammar G.(N, T, P. S), by associating each symbol
XE NuT with a finite set A(X) of attributes, and a type
or domain dom(a) for each attribute a thus defined
(Knuth, 1968). Each attribute a of X, noted X.a, takes
values over its domain and represents a specific,
possibly context-sensitive property of the symbol.
Attribute values are defined by attribution rules of the
form Xi.a&lt;— f(Xj.b, Xk.c), associated with each
production p=X0---,X1...Xn in the grammar, 05i,j,k5n.
Here, f is an applicative expression (function) whose
value depends on the values of attribute occurrences
associated with symbols in the production. Each time p
applies in a derivation, the attribution rule defines the
value of the attribute occurrence X.a as a function of
the occurrences Xj.b, Xk.c, associated with other
symbols in p . We let R(p) denote the packet of
attribution rules associated with p . The grammar may
also define attribute conditions of the form
B(Xi.a, Xk.b), 0 5 I, k _5 n, where B is a Boolean
predicate on the values of attribute ocurrcnccs in p .
This condition must be satisfied in any derivation
requiring the application of p , and thus contributes to
the notion of grammaticality in the language generated
by the grammar. We let B(p) denote the packet of
attribute conditions associated with p .
The above remarks are summarized as follows: An
attribute grammar is a cuadruple AG.(G,A,R,B), where
</bodyText>
<listItem confidence="0.635613">
i. G = (N, T, P. S) is a context-free grammar;
ii. A = UXE NUT A(X) is a finite set of attributes;
</listItem>
<equation confidence="0.9696375">
R=pE „R(p) is a finite set of attribution rules,
r
</equation>
<bodyText confidence="0.989735229166667">
as above; and
iv. B=U P B(p) is a finite set of attribute conditions,
as above.
The base grammar G assigns a derivation tree to each
sentence in L(G). The tree is annotated at each node
labelled X with the set A(X) of attributes associated
with X; each attribute tic A(X) defines an attribute
occurrence X.a at node X. If the grammar is well
defined (Knuth, 1968), it is possible to evaluate each
attribute occurrence on the tree, and we say that t is
correctly attributed iff all attribute conditions yield
&apos;true.&apos; The language generated by the attribute
grammar, L(AG), is now the subset of L(G) whose
members have at least one correctly attributed tree.
It is possible to classify the attributes in AG according
to the manner in which their values are defined. We say
an attribute X.a is synthesized if its value depends only
on attributes of daughters of X; it is inherited if its
value depends on attributes associated with the parent or
sisters of X. We say the grammar is S-attributed if it
contains only synthesized attributes. A more general
and practically important class of L-attributed grammars
is obtained if we allow attributes of both kinds, but
such that each inherited attribute depends only on
inherited attributes of the parent, or attributes of the
sisters to its left (Bochmann, 1976).
Earley&apos;s algorithm is a rccognizer for CFGs which uses
top-down prediction in combination with bottom-up
parsing actions. Given an input string xi , xn it
builds a state set Si at each position i of the string,
O5. i 5_ n+1. Each state in Si is of the form
&lt;A—&gt;a•p, f, 8&gt;, where A—m.(3 is a dotted-production,f
an index to the position in the input string where this
instance of the production began to be recognized (0 5 f
5_ i), and 8 a string of k symbols of lookahead (k ?_0).
To begin, all state sets are initialized to empty and the
initial state &lt;4).—S 1, 0, 1k&gt; is put into SO; here
1 is the end-of-input marker. States arc processed in
order according to the position of their &amp;quot;dot&amp;quot; following
three actions, Predictor, Completer, and Scanner, while
maintaining the following invariant:
State &lt; A--)a-ri, f, 8&gt; is in Si iff the following
derivations are valid:
S = aku ; a x ...xf ; and a ...Xj.
Since the number of possible states is finite the
algorithm terminates. The input string is accepted if
S+=(&lt;4—*S 0, lk&gt;). The correctness of this
acceptance condition is a consequence of the invariant.
</bodyText>
<sectionHeader confidence="0.956675" genericHeader="method">
3. Extension to S-attributed Grammars
</sectionHeader>
<bodyText confidence="0.9948398">
The chief element of the extension of the algorithm is a
change in the representation of the states in Earley&apos;s
original algorithm to attributed representations. Now,
each dotted production A--&gt;ct.11 in a state consists of
symbols attributed according to the grammar. For each
category symbol A in the base grammar, we define the
attributed symbol AfA.ai , A.ank where A is the
category and A.ai, 1_5i5n, an attribute occurrence of A.
The extended algorithm, in addition to syntactically
recognizing the input string, evaluates the attribution
associated with each of its possible derivations. In
particular, for each derivation of the attributed final state
- 300 -
&lt;4)---)S( S.aj,...,S.anj _L., 0, 1k&gt;, where S is the start
symbol of the grammar and S.aj,...,S.an the attribute
occurrences of S associated with that state, the
algorithm evaluates the corresponding attribute
occurrences. For an S-attributed grammar, this is
achieved by the following modification of Earley&apos;s
algorithm, in its Completer step:
</bodyText>
<equation confidence="0.624491375">
So := ( &lt; 0-4•SES.aj,...,S.an11, 0, 1k&gt; );
for i := 1 to n do
begin
For each state s in Si , repeat until no more
states may be added to Si or Si+ j
begin
1. Predictor
If s = &lt; A--&gt;a•X(3, f,&gt;
(i.e., s is not final and X non-terminal)
Si := Si U ( j_t&gt; I
X---&gt;a in P and 12 in FIRSTk(138))
2. Completer
Ifs = &lt; A—*a., f, 8&gt; (i.e., s is final)
and 8 = xi+j xi+k
a. Ac := eval_s( A, a, A--&gt;a)
b. Si := S u ( &lt; X—KtAc.13, k, p&gt;I
&lt;X---&gt;a•A13, k, p.&gt; in Sf
3. Scanner
Ifs = &lt; j f, 8&gt;
(i.e., s not final and xi+ j the next input symbol)
Si+j := Si+jL. ( &lt; X.---&gt;axi+1•13, f, 8&gt; )
end;
If Si+ j is empty, reject and terminate
end;
</equation>
<bodyText confidence="0.922972">
If &lt;4)--)S[S.aj,...,S.an]_l_., 0, lk&gt; in Sn+t, accept.
</bodyText>
<subsectionHeader confidence="0.9963655">
Extension of Earley&apos;s Algorithm for
S-attributed Grammars
</subsectionHeader>
<bodyText confidence="0.999979346153846">
The states in the algorithm are attributed as indicated
above. For example, the symbol A in the state
f, 5&gt; input to the Completer could be shown
more explicitly as A=A[A.aj, A.anl. As the state
enters the completer, the attribute occurrences A.ai of A
are unevaluated; however, since the grammar is
S -attributed it is easy to show that the attribute
occurrences on the right-hand side a of the production
have already been evaluated. Hence, evaluation of the
attribute occurrences of A reduces to application of the
attribution associated with the production A--,a,
according to the attribute values in a. This is done by
the function eval_s( A, a, A—a), which returns the
attributed symbol Ac, identical to A, except that its
attribute occurrences have been evaluated, as required.
The last state set generated by the algorithm contains
final states of the form 4—&gt;S[ ...] 1., 0, lk&gt;, in
which the attributed start symbol S[ ...1 is already
evaluated. Here the extended algorithm differs form
Earley&apos;s; whereas the original algorithm generates at
most one final state, regardless of the ambiguity of the
underlying grammar, the extended algorithm may
generate several instances of this state, if the grammar is
ambiguous. Each instance of the final state corresponds
to a different derivation of the initial symbol, leading to
a different evaluation of the symbol&apos;s attributes.
</bodyText>
<sectionHeader confidence="0.524058" genericHeader="method">
4. Finite Partitioning of Attribute Domains
</sectionHeader>
<bodyText confidence="0.996801444444445">
The last remark in the extension of section 3 shows a
defect of the Extended Algorithm: It may not terminate
in the general case. For the S-attributed case, however,
this may happen only if the underlying grammar is
infinitely ambiguous or, equivalently, if it has cycles
or derivations of the form for some Ac N.
Consider, for example, the following grammar, which
&amp;quot;measures&amp;quot; the length of each derivation of the sole
string &apos;a&apos; it generates:
</bodyText>
<figure confidence="0.935425">
Attribution:
S A S.v 4-- A.v
A A Ao.v +— Aj.v + 1
A a A.v E- 1
</figure>
<bodyText confidence="0.899435">
Given the input string &apos;a&apos;, the algorithm defines three
attributted state sets:
</bodyText>
<equation confidence="0.875720272727273">
So = 0, _Lk&gt;, &lt;S[v]-4•A( vi, 0, _Lk&gt;,
&lt;A[v]—•a, 0,1k&gt;, &lt;A( v)--).A(vj, 0, 1k&gt;)
S1 = 0,
&lt;S[v]---*A[1]., 0, _Lk&gt;, &lt;A(v]—)A[1]., 0, _Lk&gt;,
4-4S[1]-1, 0, 1k&gt;
&lt;S[v]—&gt;A.(21, 0, _Lk&gt;, &lt;A[vj--&gt;A(2)-, 0, 1k&gt;,
ad infinitum )
52 = (4--)S[1]1., 0, 1k&gt;,
&lt;4)--&gt;S (2]1-, 0, 1k&gt;,
ad infinitum )
Since S1 is infinite, the algorithm docs not terminate.
</equation>
<bodyText confidence="0.991618825">
Cyclic grammars play an important role in most recent
linguistic theories, including Government-binding (GB),
Lexical-Functional Grammar (LFG) and GPSG (cf.
Berwick, 1988; Correa, 1987b; Kornai and Pullum,
1990). These have in common that they have shifted
from rule-based descriptions of language, to declarative
or principle-based descriptions, in which the role of
phrase structure rules or principles is relatively minor.
Thus, to make the extension of the algorithm useful for
natural language applications it becomes necessary to
ensure its termination, in spite of cyclic bases.
- 301 -
The termination of the Extended Algorithm may be
guaranteed while maintaining its full generality, through
a finite partition on the attribute domains associated
with each cyclic symbol in the grammar. For each such
domain dom (a), the partition defines a finite collection
of equivalence classes on attribute values. Now, before
adding a new state &lt;A—m.13, f, 8&gt; to a state set Si, we
test for equivalence (according to the defined partitions)
rather than equality to some previously added state; if
the new state is equivalent to some other, it is not
added. It is easy to show that the number of attributed
dotted items in the grammar, and hence the size of the
state sets, is now finite. This number is in fact
identical to that of Earley&apos;s algorithm, except for a
constant multiplicative factor, dependent on the
grammar and the size of the partitions selected for
attribute domains. Since the size of the state sets
possible with finite partitioning is now finite, the
algorithm always terminates.
After establishing a correspondence between attribute
and unification grammar (UG), we may see that the
technique of &amp;quot;restriction&amp;quot; used by Shicbcr (1985) in his
extended algorithm is related to finite partitioning on
attribute domains, in fact a particular case which takes
advantage of the more structured attribute domains of
UG. For attribute grammar, given that the domains
involved are more general (e.g., the integers), finite
partitioning is the required device.
</bodyText>
<sectionHeader confidence="0.860161" genericHeader="conclusions">
5. Conclusions and Implementation Status
</sectionHeader>
<bodyText confidence="0.99958355">
This paper presented and extension of Earley&apos;s algorithm
to S-attributed grammars. Combining on-line semantic
evaluation with the execution of syntactic actions, the
algorithm is an effective realization of attribute-directed
parsing, as proposed by Watt (1980) and Jones and
Madsen (1980). Although the algorithm is a recognizer,
it computes the semantic values associated with each
derivation of the input string, and hence need not be
extended to compute tree representations. In attribute
grammars with conditions on productions, the values of
attributes already evaluated may be used to guide the
parsing process, reducing the number of states&apos; that may
be generated by the algorithm.
The extension of the algorithm has been written in &amp;quot;C&amp;quot;,
using an efficient &amp;quot;C&amp;quot; implementation of Earley&apos;s
original algorithm (Chamorro and Correa, 1990), and is
currently being tested on small grammars. The extended
algorithm will be the kernel of ANDES-I, a
programming environment for attribute grammars,
intended for natural language applications.
</bodyText>
<sectionHeader confidence="0.88026" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.998435925925926">
Berwick, Robert. 1988. &amp;quot;Principle-based Parsing&amp;quot;. MIT
A.I. Memo 972, revised. MIT, Cambridge, MA.
Bochmann, Gregor. 1976. &amp;quot;Semantic Evaluation from
Left to Right.&amp;quot; Communications of the ACM , Vol.
19, No. 2, p. 55-62.
Chamorro, Miriam, and N. Correa. 1990. &amp;quot;An Efficient
&apos;C&apos; Implementation of Earley&apos;s Algorithm&amp;quot; - in Spanish.
CIFI, Universidad dc los Andes, Bogota, Colombia.
Correa, Nelson. 1987a. &amp;quot;An Attribute Grammar
Implementation of Government-binding Theory.&amp;quot;
Proceedings of the 25th Annual Meeting of the ACL,
Stanford University, Stanford, CA.
Correa, Nelson. 1987b. &amp;quot;Empty Categories, Chain
Binding, and Parsing.&amp;quot; Parsing Seminar; MIT Working
Papers of the Lexicon Project, MIT, Cambridge, MA.
Correa, Nelson. Forthcoming. Attribute and
Unification Grammar: A Review of Formalisms and
Comparision. CIFI, Universidad de los Andes.
Earley, Jay. 1970. &amp;quot;An Efficient Context-free Parsing
Algorithm.&amp;quot; Communications of the ACM , Vol, 13,
No. 2, p. 94-102.
Fu, K.S. 1982. Syntactic Pattern Recognition .
Academic Press, New York.
Jones, Neil D., and M. Madsen. 1980. &amp;quot;Attribute
Influenced LR Parsing.&amp;quot; In N. D. Jones, ed.,
Semantics-directed Compiler Generation , LNCS 94.
Springer-Verlag, New York.
Kay, Martin. 1985. Parsing in Functional Unification
Grammar. In D. Dowty, L. Karttunen, and A. Zwicky,
eds., Natural Language Parsing ,Cambridge University
Press, Cambridge, England.
King, Margaret, cd. 1983. Natural Language Parsing.
Academic Press, New York.
Knuth, Donald. 1968. &amp;quot;Semantics of Context-free
Languages.&amp;quot; Mathematical Systems Theory, Vol. 2,
No. 2, p. 127-145.
Kornai, Andras, and G. Pullum. 1990. &amp;quot;The X-bar
Theory of Phrase Structure.&amp;quot; Language, Vol. 66.
Pereira, Fernando, and D. H. Warren. 1983. &amp;quot;Parsing
as Deduction.&amp;quot; Proceedings of the 21st Annual Meeting
of the ACL, MIT, Cambridge, MA.
Shicbcr, Stuart. 1985. &amp;quot;Using Restriction to Extend
Parsing Algorithms for Complex-Feature-Based
Formalisms.&amp;quot; Proceedings of the 23rd Annual Meeting
of the ACL, University of Chicago, Chicago, IL.
Shieber, Stuart. 1986. An Introduction to Unification
Based Approaches to Grammar. CSLI Lecture Notes
No. 4, Stanford, CA.
Watt, David. 1980. &amp;quot;Rule Splitting and Attribute
Directed Parsing.&amp;quot; In N.D.Jones, ed., Semantics-directed
Compiler Generation , LNCS 94. Springer-Verlag, NY.
Yellin, Daniel. 1988. &amp;quot;Generalized Attributed Parsing.&amp;quot;
Manuscript; IBM Research, Yorktown Heights, NY.
- 302 -
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.607170">
<title confidence="0.9995905">An Extension of Earley&apos;s Algorithm for S-Attributed Grammars</title>
<author confidence="0.999449">Nelson Correa</author>
<affiliation confidence="0.9830075">Department of Electrical Engineering Universidad de los Andes</affiliation>
<address confidence="0.92786">Apartado Aereo 4976, Bogota, D.E., Colombia</address>
<email confidence="0.714514">atANDESCOL</email>
<abstract confidence="0.990106333333333">Attribute grammars arc an elegant formalization of the augmented context-free grammars characteristic of most current natural language systems. This paper presents an extension of Earley&apos;s algorithm to Knuth&apos;s attribute grammars, considering the case of S-attributed grammars. For this case, we study the conditions on the underlying base grammar under which the extended may be guaranteed to terminate. attribute domains is proposed to guarantee the termination of the algorithm, without the need for any restrictions on the context-free base.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Robert Berwick</author>
</authors>
<title>Principle-based Parsing&amp;quot;.</title>
<date>1988</date>
<journal>MIT A.I. Memo</journal>
<volume>972</volume>
<publisher>MIT,</publisher>
<location>Cambridge, MA.</location>
<contexts>
<context position="13236" citStr="Berwick, 1988" startWordPosition="2164" endWordPosition="2165">o.v +— Aj.v + 1 A a A.v E- 1 Given the input string &apos;a&apos;, the algorithm defines three attributted state sets: So = 0, _Lk&gt;, &lt;S[v]-4•A( vi, 0, _Lk&gt;, &lt;A[v]—•a, 0,1k&gt;, &lt;A( v)--).A(vj, 0, 1k&gt;) S1 = 0, &lt;S[v]---*A[1]., 0, _Lk&gt;, &lt;A(v]—)A[1]., 0, _Lk&gt;, 4-4S[1]-1, 0, 1k&gt; &lt;S[v]—&gt;A.(21, 0, _Lk&gt;, &lt;A[vj--&gt;A(2)-, 0, 1k&gt;, ad infinitum ) 52 = (4--)S[1]1., 0, 1k&gt;, &lt;4)--&gt;S (2]1-, 0, 1k&gt;, ad infinitum ) Since S1 is infinite, the algorithm docs not terminate. Cyclic grammars play an important role in most recent linguistic theories, including Government-binding (GB), Lexical-Functional Grammar (LFG) and GPSG (cf. Berwick, 1988; Correa, 1987b; Kornai and Pullum, 1990). These have in common that they have shifted from rule-based descriptions of language, to declarative or principle-based descriptions, in which the role of phrase structure rules or principles is relatively minor. Thus, to make the extension of the algorithm useful for natural language applications it becomes necessary to ensure its termination, in spite of cyclic bases. - 301 - The termination of the Extended Algorithm may be guaranteed while maintaining its full generality, through a finite partition on the attribute domains associated with each cycl</context>
</contexts>
<marker>Berwick, 1988</marker>
<rawString>Berwick, Robert. 1988. &amp;quot;Principle-based Parsing&amp;quot;. MIT A.I. Memo 972, revised. MIT, Cambridge, MA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Gregor Bochmann</author>
</authors>
<title>Semantic Evaluation from Left to Right.&amp;quot;</title>
<date>1976</date>
<journal>Communications of the ACM ,</journal>
<volume>19</volume>
<pages>55--62</pages>
<contexts>
<context position="7825" citStr="Bochmann, 1976" startWordPosition="1234" endWordPosition="1235">ributes in AG according to the manner in which their values are defined. We say an attribute X.a is synthesized if its value depends only on attributes of daughters of X; it is inherited if its value depends on attributes associated with the parent or sisters of X. We say the grammar is S-attributed if it contains only synthesized attributes. A more general and practically important class of L-attributed grammars is obtained if we allow attributes of both kinds, but such that each inherited attribute depends only on inherited attributes of the parent, or attributes of the sisters to its left (Bochmann, 1976). Earley&apos;s algorithm is a rccognizer for CFGs which uses top-down prediction in combination with bottom-up parsing actions. Given an input string xi , xn it builds a state set Si at each position i of the string, O5. i 5_ n+1. Each state in Si is of the form &lt;A—&gt;a•p, f, 8&gt;, where A—m.(3 is a dotted-production,f an index to the position in the input string where this instance of the production began to be recognized (0 5 f 5_ i), and 8 a string of k symbols of lookahead (k ?_0). To begin, all state sets are initialized to empty and the initial state &lt;4).—S 1, 0, 1k&gt; is put into SO; here 1 is th</context>
</contexts>
<marker>Bochmann, 1976</marker>
<rawString>Bochmann, Gregor. 1976. &amp;quot;Semantic Evaluation from Left to Right.&amp;quot; Communications of the ACM , Vol. 19, No. 2, p. 55-62.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Miriam Chamorro</author>
<author>N Correa</author>
</authors>
<title>An Efficient &apos;C&apos; Implementation of Earley&apos;s Algorithm&amp;quot; - in Spanish. CIFI, Universidad dc los Andes,</title>
<date>1990</date>
<booktitle>Proceedings of the 25th Annual Meeting of the ACL,</booktitle>
<location>Bogota, Colombia. Correa, Nelson.</location>
<marker>Chamorro, Correa, 1990</marker>
<rawString>Chamorro, Miriam, and N. Correa. 1990. &amp;quot;An Efficient &apos;C&apos; Implementation of Earley&apos;s Algorithm&amp;quot; - in Spanish. CIFI, Universidad dc los Andes, Bogota, Colombia. Correa, Nelson. 1987a. &amp;quot;An Attribute Grammar Implementation of Government-binding Theory.&amp;quot; Proceedings of the 25th Annual Meeting of the ACL, Stanford University, Stanford, CA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nelson Correa</author>
</authors>
<title>Empty Categories, Chain Binding, and Parsing.&amp;quot; Parsing Seminar; MIT Working Papers of the Lexicon Project,</title>
<date>1987</date>
<location>MIT, Cambridge, MA.</location>
<contexts>
<context position="2023" citStr="Correa, 1987" startWordPosition="278" endWordPosition="279">t NLP systems. It is more general than members of the family of unification-based grammar formalisms (Kay, 1985; Shieber, 1986), mainly in that it allows and encourages the use of simpler attribution functions than unification for the definition of attribute values, and hence can lead to computationally efficient grammatical definitions, while maintaining the advantages of a well-understood declarative formalism. Attribute grammar has been used in the past by the author to define computational models of Chomsky&apos;s Government-binding theory, from which practical parsing programs were developed (Correa, 1987a). Many systems based on Earley&apos;s algorithm have a clear division between the phases of syntactic and semantic analysis. Yellin (1988), for instance, uses a syntactic analysis phase in which Earley&apos;s algorithm builds a factored parse tree (FPT) for the given input, which is then followed by up to two phases of semantic analysis, during which the FPI&apos; is attributed and evaluated. Watt (1980) and Jones and Madsen (1980) propose a close interaction between syntactic and semantic analysis in the form of &amp;quot;attribute-directed&amp;quot; parsing. However, their particular realization of the technique is severe</context>
<context position="13250" citStr="Correa, 1987" startWordPosition="2166" endWordPosition="2167"> A a A.v E- 1 Given the input string &apos;a&apos;, the algorithm defines three attributted state sets: So = 0, _Lk&gt;, &lt;S[v]-4•A( vi, 0, _Lk&gt;, &lt;A[v]—•a, 0,1k&gt;, &lt;A( v)--).A(vj, 0, 1k&gt;) S1 = 0, &lt;S[v]---*A[1]., 0, _Lk&gt;, &lt;A(v]—)A[1]., 0, _Lk&gt;, 4-4S[1]-1, 0, 1k&gt; &lt;S[v]—&gt;A.(21, 0, _Lk&gt;, &lt;A[vj--&gt;A(2)-, 0, 1k&gt;, ad infinitum ) 52 = (4--)S[1]1., 0, 1k&gt;, &lt;4)--&gt;S (2]1-, 0, 1k&gt;, ad infinitum ) Since S1 is infinite, the algorithm docs not terminate. Cyclic grammars play an important role in most recent linguistic theories, including Government-binding (GB), Lexical-Functional Grammar (LFG) and GPSG (cf. Berwick, 1988; Correa, 1987b; Kornai and Pullum, 1990). These have in common that they have shifted from rule-based descriptions of language, to declarative or principle-based descriptions, in which the role of phrase structure rules or principles is relatively minor. Thus, to make the extension of the algorithm useful for natural language applications it becomes necessary to ensure its termination, in spite of cyclic bases. - 301 - The termination of the Extended Algorithm may be guaranteed while maintaining its full generality, through a finite partition on the attribute domains associated with each cyclic symbol in t</context>
</contexts>
<marker>Correa, 1987</marker>
<rawString>Correa, Nelson. 1987b. &amp;quot;Empty Categories, Chain Binding, and Parsing.&amp;quot; Parsing Seminar; MIT Working Papers of the Lexicon Project, MIT, Cambridge, MA.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Forthcoming</author>
</authors>
<title>Attribute and Unification Grammar: A Review of Formalisms and Comparision. CIFI, Universidad de los Andes.</title>
<marker>Forthcoming, </marker>
<rawString>Correa, Nelson. Forthcoming. Attribute and Unification Grammar: A Review of Formalisms and Comparision. CIFI, Universidad de los Andes.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jay Earley</author>
</authors>
<title>An Efficient Context-free Parsing Algorithm.&amp;quot;</title>
<date>1970</date>
<journal>Communications of the ACM , Vol,</journal>
<volume>13</volume>
<pages>94--102</pages>
<marker>Earley, 1970</marker>
<rawString>Earley, Jay. 1970. &amp;quot;An Efficient Context-free Parsing Algorithm.&amp;quot; Communications of the ACM , Vol, 13, No. 2, p. 94-102.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K S Fu</author>
</authors>
<title>Syntactic Pattern Recognition .</title>
<date>1982</date>
<publisher>Academic Press,</publisher>
<location>New York.</location>
<contexts>
<context position="1005" citStr="Fu, 1982" startWordPosition="138" endWordPosition="139">of Earley&apos;s algorithm to Knuth&apos;s attribute grammars, considering the case of S-attributed grammars. For this case, we study the conditions on the underlying base grammar under which the extended algorithm may be guaranteed to terminate. Finite partitioning of attribute domains is proposed to guarantee the termination of the algorithm, without the need for any restrictions on the context-free base. I. Introduction Earley&apos;s (1970) algorithm is a general algorithm for context-free languages, widely used in natural language processing (King, 1983; Shicbcr, 1985) and syntactic pattern recognition (Fu, 1982), where the full generative power of context-free grammar is required. The original algorithm and its common implementations, however, assume the atomic symbols of context-free grammars, thus limiting its applicability to systems with attributed symbols, or attribute grammars (Knuth, 1968). Attribute grammar is an elegant formalization of the augmented context-free grammars characteristic of most current NLP systems. It is more general than members of the family of unification-based grammar formalisms (Kay, 1985; Shieber, 1986), mainly in that it allows and encourages the use of simpler attrib</context>
</contexts>
<marker>Fu, 1982</marker>
<rawString>Fu, K.S. 1982. Syntactic Pattern Recognition . Academic Press, New York.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Neil D Jones</author>
<author>M Madsen</author>
</authors>
<title>Attribute Influenced LR Parsing.&amp;quot;</title>
<date>1980</date>
<booktitle>Semantics-directed Compiler Generation , LNCS 94.</booktitle>
<editor>In N. D. Jones, ed.,</editor>
<publisher>Springer-Verlag,</publisher>
<location>New York.</location>
<contexts>
<context position="2445" citStr="Jones and Madsen (1980)" startWordPosition="344" endWordPosition="347">lism. Attribute grammar has been used in the past by the author to define computational models of Chomsky&apos;s Government-binding theory, from which practical parsing programs were developed (Correa, 1987a). Many systems based on Earley&apos;s algorithm have a clear division between the phases of syntactic and semantic analysis. Yellin (1988), for instance, uses a syntactic analysis phase in which Earley&apos;s algorithm builds a factored parse tree (FPT) for the given input, which is then followed by up to two phases of semantic analysis, during which the FPI&apos; is attributed and evaluated. Watt (1980) and Jones and Madsen (1980) propose a close interaction between syntactic and semantic analysis in the form of &amp;quot;attribute-directed&amp;quot; parsing. However, their particular realization of the technique is severely restricted for NLP applications, since it uses a deterministic one-path (LR) algorithm, applicable only to semantically unambiguous grammars. Pereira and Warren (1983) and Shieber (1985) present versions of Earley&apos;s algorithm for unification grammars, in which unification is the sole operation responsible for attribute evaluation. However, given the high computational cost of unification, important differences betwe</context>
<context position="15464" citStr="Jones and Madsen (1980)" startWordPosition="2509" endWordPosition="2512">hm is related to finite partitioning on attribute domains, in fact a particular case which takes advantage of the more structured attribute domains of UG. For attribute grammar, given that the domains involved are more general (e.g., the integers), finite partitioning is the required device. 5. Conclusions and Implementation Status This paper presented and extension of Earley&apos;s algorithm to S-attributed grammars. Combining on-line semantic evaluation with the execution of syntactic actions, the algorithm is an effective realization of attribute-directed parsing, as proposed by Watt (1980) and Jones and Madsen (1980). Although the algorithm is a recognizer, it computes the semantic values associated with each derivation of the input string, and hence need not be extended to compute tree representations. In attribute grammars with conditions on productions, the values of attributes already evaluated may be used to guide the parsing process, reducing the number of states&apos; that may be generated by the algorithm. The extension of the algorithm has been written in &amp;quot;C&amp;quot;, using an efficient &amp;quot;C&amp;quot; implementation of Earley&apos;s original algorithm (Chamorro and Correa, 1990), and is currently being tested on small gramma</context>
</contexts>
<marker>Jones, Madsen, 1980</marker>
<rawString>Jones, Neil D., and M. Madsen. 1980. &amp;quot;Attribute Influenced LR Parsing.&amp;quot; In N. D. Jones, ed., Semantics-directed Compiler Generation , LNCS 94. Springer-Verlag, New York.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Martin Kay</author>
</authors>
<title>Parsing in Functional Unification Grammar. In</title>
<date>1985</date>
<booktitle>Natural Language Parsing</booktitle>
<editor>D. Dowty, L. Karttunen, and A. Zwicky, eds.,</editor>
<publisher>Cambridge University Press,</publisher>
<location>Cambridge, England.</location>
<contexts>
<context position="1522" citStr="Kay, 1985" startWordPosition="209" endWordPosition="210">language processing (King, 1983; Shicbcr, 1985) and syntactic pattern recognition (Fu, 1982), where the full generative power of context-free grammar is required. The original algorithm and its common implementations, however, assume the atomic symbols of context-free grammars, thus limiting its applicability to systems with attributed symbols, or attribute grammars (Knuth, 1968). Attribute grammar is an elegant formalization of the augmented context-free grammars characteristic of most current NLP systems. It is more general than members of the family of unification-based grammar formalisms (Kay, 1985; Shieber, 1986), mainly in that it allows and encourages the use of simpler attribution functions than unification for the definition of attribute values, and hence can lead to computationally efficient grammatical definitions, while maintaining the advantages of a well-understood declarative formalism. Attribute grammar has been used in the past by the author to define computational models of Chomsky&apos;s Government-binding theory, from which practical parsing programs were developed (Correa, 1987a). Many systems based on Earley&apos;s algorithm have a clear division between the phases of syntactic </context>
</contexts>
<marker>Kay, 1985</marker>
<rawString>Kay, Martin. 1985. Parsing in Functional Unification Grammar. In D. Dowty, L. Karttunen, and A. Zwicky, eds., Natural Language Parsing ,Cambridge University Press, Cambridge, England.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Margaret King</author>
<author>cd</author>
</authors>
<title>Natural Language Parsing.</title>
<date>1983</date>
<publisher>Academic Press,</publisher>
<location>New York.</location>
<marker>King, cd, 1983</marker>
<rawString>King, Margaret, cd. 1983. Natural Language Parsing. Academic Press, New York.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Donald Knuth</author>
</authors>
<title>Semantics of Context-free Languages.&amp;quot;</title>
<date>1968</date>
<journal>Mathematical Systems Theory,</journal>
<volume>2</volume>
<pages>127--145</pages>
<contexts>
<context position="1295" citStr="Knuth, 1968" startWordPosition="177" endWordPosition="178">ed to guarantee the termination of the algorithm, without the need for any restrictions on the context-free base. I. Introduction Earley&apos;s (1970) algorithm is a general algorithm for context-free languages, widely used in natural language processing (King, 1983; Shicbcr, 1985) and syntactic pattern recognition (Fu, 1982), where the full generative power of context-free grammar is required. The original algorithm and its common implementations, however, assume the atomic symbols of context-free grammars, thus limiting its applicability to systems with attributed symbols, or attribute grammars (Knuth, 1968). Attribute grammar is an elegant formalization of the augmented context-free grammars characteristic of most current NLP systems. It is more general than members of the family of unification-based grammar formalisms (Kay, 1985; Shieber, 1986), mainly in that it allows and encourages the use of simpler attribution functions than unification for the definition of attribute values, and hence can lead to computationally efficient grammatical definitions, while maintaining the advantages of a well-understood declarative formalism. Attribute grammar has been used in the past by the author to define</context>
<context position="5135" citStr="Knuth, 1968" startWordPosition="775" endWordPosition="776">ing rules of the form X---)a, XE N, CIE (NuT)*; and S a distinguished symbol of N. A binary relation of derivation between strings over the vocalulary NuT of the grammar is defined such that aXf = aaf3 iff a is a production of P; now, may be defined as the reflexive and transitive closure of The language generated by the grammar, noted L(G), is the set of strings we T*, such that S to. An attribute grammar is defined upon a context-free grammar G.(N, T, P. S), by associating each symbol XE NuT with a finite set A(X) of attributes, and a type or domain dom(a) for each attribute a thus defined (Knuth, 1968). Each attribute a of X, noted X.a, takes values over its domain and represents a specific, possibly context-sensitive property of the symbol. Attribute values are defined by attribution rules of the form Xi.a&lt;— f(Xj.b, Xk.c), associated with each production p=X0---,X1...Xn in the grammar, 05i,j,k5n. Here, f is an applicative expression (function) whose value depends on the values of attribute occurrences associated with symbols in the production. Each time p applies in a derivation, the attribution rule defines the value of the attribute occurrence X.a as a function of the occurrences Xj.b, X</context>
<context position="6882" citStr="Knuth, 1968" startWordPosition="1077" endWordPosition="1078">e above remarks are summarized as follows: An attribute grammar is a cuadruple AG.(G,A,R,B), where i. G = (N, T, P. S) is a context-free grammar; ii. A = UXE NUT A(X) is a finite set of attributes; R=pE „R(p) is a finite set of attribution rules, r as above; and iv. B=U P B(p) is a finite set of attribute conditions, as above. The base grammar G assigns a derivation tree to each sentence in L(G). The tree is annotated at each node labelled X with the set A(X) of attributes associated with X; each attribute tic A(X) defines an attribute occurrence X.a at node X. If the grammar is well defined (Knuth, 1968), it is possible to evaluate each attribute occurrence on the tree, and we say that t is correctly attributed iff all attribute conditions yield &apos;true.&apos; The language generated by the attribute grammar, L(AG), is now the subset of L(G) whose members have at least one correctly attributed tree. It is possible to classify the attributes in AG according to the manner in which their values are defined. We say an attribute X.a is synthesized if its value depends only on attributes of daughters of X; it is inherited if its value depends on attributes associated with the parent or sisters of X. We say</context>
</contexts>
<marker>Knuth, 1968</marker>
<rawString>Knuth, Donald. 1968. &amp;quot;Semantics of Context-free Languages.&amp;quot; Mathematical Systems Theory, Vol. 2, No. 2, p. 127-145.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Andras Kornai</author>
<author>G Pullum</author>
</authors>
<title>The X-bar Theory of Phrase Structure.&amp;quot;</title>
<date>1990</date>
<journal>Language,</journal>
<booktitle>Proceedings of the 21st Annual Meeting of the ACL, MIT,</booktitle>
<volume>66</volume>
<location>Cambridge, MA.</location>
<contexts>
<context position="13277" citStr="Kornai and Pullum, 1990" startWordPosition="2168" endWordPosition="2171">iven the input string &apos;a&apos;, the algorithm defines three attributted state sets: So = 0, _Lk&gt;, &lt;S[v]-4•A( vi, 0, _Lk&gt;, &lt;A[v]—•a, 0,1k&gt;, &lt;A( v)--).A(vj, 0, 1k&gt;) S1 = 0, &lt;S[v]---*A[1]., 0, _Lk&gt;, &lt;A(v]—)A[1]., 0, _Lk&gt;, 4-4S[1]-1, 0, 1k&gt; &lt;S[v]—&gt;A.(21, 0, _Lk&gt;, &lt;A[vj--&gt;A(2)-, 0, 1k&gt;, ad infinitum ) 52 = (4--)S[1]1., 0, 1k&gt;, &lt;4)--&gt;S (2]1-, 0, 1k&gt;, ad infinitum ) Since S1 is infinite, the algorithm docs not terminate. Cyclic grammars play an important role in most recent linguistic theories, including Government-binding (GB), Lexical-Functional Grammar (LFG) and GPSG (cf. Berwick, 1988; Correa, 1987b; Kornai and Pullum, 1990). These have in common that they have shifted from rule-based descriptions of language, to declarative or principle-based descriptions, in which the role of phrase structure rules or principles is relatively minor. Thus, to make the extension of the algorithm useful for natural language applications it becomes necessary to ensure its termination, in spite of cyclic bases. - 301 - The termination of the Extended Algorithm may be guaranteed while maintaining its full generality, through a finite partition on the attribute domains associated with each cyclic symbol in the grammar. For each such d</context>
</contexts>
<marker>Kornai, Pullum, 1990</marker>
<rawString>Kornai, Andras, and G. Pullum. 1990. &amp;quot;The X-bar Theory of Phrase Structure.&amp;quot; Language, Vol. 66. Pereira, Fernando, and D. H. Warren. 1983. &amp;quot;Parsing as Deduction.&amp;quot; Proceedings of the 21st Annual Meeting of the ACL, MIT, Cambridge, MA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stuart Shicbcr</author>
</authors>
<title>Using Restriction to Extend Parsing Algorithms for Complex-Feature-Based Formalisms.&amp;quot;</title>
<date>1985</date>
<journal>CSLI Lecture Notes</journal>
<booktitle>Proceedings of the 23rd Annual Meeting of the ACL,</booktitle>
<volume>4</volume>
<institution>University of Chicago,</institution>
<location>Chicago, IL. Shieber, Stuart.</location>
<contexts>
<context position="960" citStr="Shicbcr, 1985" startWordPosition="132" endWordPosition="133">anguage systems. This paper presents an extension of Earley&apos;s algorithm to Knuth&apos;s attribute grammars, considering the case of S-attributed grammars. For this case, we study the conditions on the underlying base grammar under which the extended algorithm may be guaranteed to terminate. Finite partitioning of attribute domains is proposed to guarantee the termination of the algorithm, without the need for any restrictions on the context-free base. I. Introduction Earley&apos;s (1970) algorithm is a general algorithm for context-free languages, widely used in natural language processing (King, 1983; Shicbcr, 1985) and syntactic pattern recognition (Fu, 1982), where the full generative power of context-free grammar is required. The original algorithm and its common implementations, however, assume the atomic symbols of context-free grammars, thus limiting its applicability to systems with attributed symbols, or attribute grammars (Knuth, 1968). Attribute grammar is an elegant formalization of the augmented context-free grammars characteristic of most current NLP systems. It is more general than members of the family of unification-based grammar formalisms (Kay, 1985; Shieber, 1986), mainly in that it al</context>
<context position="14817" citStr="Shicbcr (1985)" startWordPosition="2418" endWordPosition="2419"> it is not added. It is easy to show that the number of attributed dotted items in the grammar, and hence the size of the state sets, is now finite. This number is in fact identical to that of Earley&apos;s algorithm, except for a constant multiplicative factor, dependent on the grammar and the size of the partitions selected for attribute domains. Since the size of the state sets possible with finite partitioning is now finite, the algorithm always terminates. After establishing a correspondence between attribute and unification grammar (UG), we may see that the technique of &amp;quot;restriction&amp;quot; used by Shicbcr (1985) in his extended algorithm is related to finite partitioning on attribute domains, in fact a particular case which takes advantage of the more structured attribute domains of UG. For attribute grammar, given that the domains involved are more general (e.g., the integers), finite partitioning is the required device. 5. Conclusions and Implementation Status This paper presented and extension of Earley&apos;s algorithm to S-attributed grammars. Combining on-line semantic evaluation with the execution of syntactic actions, the algorithm is an effective realization of attribute-directed parsing, as prop</context>
</contexts>
<marker>Shicbcr, 1985</marker>
<rawString>Shicbcr, Stuart. 1985. &amp;quot;Using Restriction to Extend Parsing Algorithms for Complex-Feature-Based Formalisms.&amp;quot; Proceedings of the 23rd Annual Meeting of the ACL, University of Chicago, Chicago, IL. Shieber, Stuart. 1986. An Introduction to Unification Based Approaches to Grammar. CSLI Lecture Notes No. 4, Stanford, CA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David Watt</author>
</authors>
<title>Rule Splitting and Attribute Directed Parsing.&amp;quot;</title>
<date>1980</date>
<booktitle>Semantics-directed Compiler Generation , LNCS 94.</booktitle>
<pages>302</pages>
<editor>In N.D.Jones, ed.,</editor>
<publisher>Springer-Verlag,</publisher>
<contexts>
<context position="2417" citStr="Watt (1980)" startWordPosition="341" endWordPosition="342">eclarative formalism. Attribute grammar has been used in the past by the author to define computational models of Chomsky&apos;s Government-binding theory, from which practical parsing programs were developed (Correa, 1987a). Many systems based on Earley&apos;s algorithm have a clear division between the phases of syntactic and semantic analysis. Yellin (1988), for instance, uses a syntactic analysis phase in which Earley&apos;s algorithm builds a factored parse tree (FPT) for the given input, which is then followed by up to two phases of semantic analysis, during which the FPI&apos; is attributed and evaluated. Watt (1980) and Jones and Madsen (1980) propose a close interaction between syntactic and semantic analysis in the form of &amp;quot;attribute-directed&amp;quot; parsing. However, their particular realization of the technique is severely restricted for NLP applications, since it uses a deterministic one-path (LR) algorithm, applicable only to semantically unambiguous grammars. Pereira and Warren (1983) and Shieber (1985) present versions of Earley&apos;s algorithm for unification grammars, in which unification is the sole operation responsible for attribute evaluation. However, given the high computational cost of unification,</context>
<context position="15436" citStr="Watt (1980)" startWordPosition="2506" endWordPosition="2507">extended algorithm is related to finite partitioning on attribute domains, in fact a particular case which takes advantage of the more structured attribute domains of UG. For attribute grammar, given that the domains involved are more general (e.g., the integers), finite partitioning is the required device. 5. Conclusions and Implementation Status This paper presented and extension of Earley&apos;s algorithm to S-attributed grammars. Combining on-line semantic evaluation with the execution of syntactic actions, the algorithm is an effective realization of attribute-directed parsing, as proposed by Watt (1980) and Jones and Madsen (1980). Although the algorithm is a recognizer, it computes the semantic values associated with each derivation of the input string, and hence need not be extended to compute tree representations. In attribute grammars with conditions on productions, the values of attributes already evaluated may be used to guide the parsing process, reducing the number of states&apos; that may be generated by the algorithm. The extension of the algorithm has been written in &amp;quot;C&amp;quot;, using an efficient &amp;quot;C&amp;quot; implementation of Earley&apos;s original algorithm (Chamorro and Correa, 1990), and is currently </context>
</contexts>
<marker>Watt, 1980</marker>
<rawString>Watt, David. 1980. &amp;quot;Rule Splitting and Attribute Directed Parsing.&amp;quot; In N.D.Jones, ed., Semantics-directed Compiler Generation , LNCS 94. Springer-Verlag, NY. Yellin, Daniel. 1988. &amp;quot;Generalized Attributed Parsing.&amp;quot; Manuscript; IBM Research, Yorktown Heights, NY. - 302 -</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>