<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000045">
<title confidence="0.4807485">
LAMBEK THEOREM PROVING AND
FEATURE UNIFICATION
</title>
<author confidence="0.55561">
Erik-Jan van der Linden*
</author>
<affiliation confidence="0.7054275">
Institute for Language Technology and Artificial Intelligence
Tilburg University
</affiliation>
<address confidence="0.548321">
PO Box 90153, 5000 LE Tilburg, The Netherlands
</address>
<sectionHeader confidence="0.99089" genericHeader="abstract">
1 ABSTRACT
</sectionHeader>
<bodyText confidence="0.999913625">
Feature Unification can be integrated with Lam-
bek Theorem Proving in a simple and straightfor-
ward way. Two principles determine all distribu-
tion of features in LTP. It is not necessary to stip-
ulate other principles or include category-valued
features where other theories do. The structure of
categories is discussed with respect to the notion
of category structure of Gazdar et al. (1988).
</bodyText>
<sectionHeader confidence="0.999473" genericHeader="introduction">
2 INTRODUCTION
</sectionHeader>
<bodyText confidence="0.9998771">
A tendency in current linguistic theory is to shift
the &apos;explanatory burden&apos; from the syntactic com-
ponent to the lexicon. Within Categorial Gram-
mar (CG), this so-called lexicalist principle is im-
plemented in a radical fashion: syntactic infor-
mation is projected entirely from category struc-
ture assigned to lexical items (Moortgat, 1988).
A small set of rules like (1) constitutes the gram-
mar. The rules reduce sequences of categories to
one category.
</bodyText>
<sectionHeader confidence="0.437529" genericHeader="method">
(1) X:a X \Y:b =&gt; Y:b(a)
</sectionHeader>
<bodyText confidence="0.993652482758621">
CG implements the Compositionality Principle
by stipulating a correspondence between syntac-
tic operations and semantic operations (Van Ben-
them 1986).
An approach to the analysis of natural language
in CG is to view the categorial reduction system,
the set of reduction rules, as a calculus, where
parsing of a syntagm is an attempt to prove that
*Part of the research described in this paper was carried
out within the &apos;Categorial Parser Project&apos; at ITI-TNO. I
wish to thank the people whom I had the pleasure to coop-
erate with within this project: Brigit van Berkel, Michael
Moortgat and Adriaan van Paassen. Gosse Bouma, Harry
Bunt, Bart Geurts, Elias Thijsse, Ton van der Wouden,
and three anonymous ACL reviewers made stimulating
comments on earlier versions of this paper. Michael
Moortgat generously supplied a copy of the interpreter
described in his 1988 dissertation
it follows as a theorem from a set of axioms and
inference rules. Especially by the work of Van
Benthem (1986) and Moortgat (1988) this view,
which we will name with Moortgat (1987a) Lam-
bek Theorem Proving (LTP; Lambek, 1958), has
become popular among a number of linguists.
The descriptive power of LTP can be extended if
unification (Shieber, 1986) is added. Several the-
ories have been developed that combine catego-
rial formalisms and unification based formalisms.
Within Unification Categorial Grammar (UCG,
Calder et al., 1988, Zeevat et al., 1986) unification
&amp;quot;is the only operation over grammatical objects&amp;quot;
(Calder et al. 1988, p. 83), and this includes
syntactic and semantic operations. Within Cat-
egorial Unification Grammar (Uszkoreit, 1986;
Bouma, 1988a), reduction rules are the main op-
eration over grammatical objects, but semantic
operations are reformulated within the unification
formalism, as properties of lexemes (Bouma et al.,
1988). These formalisms thus lexicalize semantic
operations.
The addition of unification to the LTP formalism
described in this paper maintains the rules of the
syntactic and semantic calculus as primary opera-
tions, and adds unification to deal with syntactic
features only. We will refer to this addition as
Feature Unification (FU), and we will call the re-
sulting theory LTP-FU.
In this paper firstly the building blocks of the
theory, categories and inference rules, will be de-
scribed. Then two principles will be introduced
that determine the distribution of features, not
only for the rules of the calculus, but also for
reduction rules that can be derived within the
calculus. From the discussion of an example it
is concluded that it is not necessary to stipulate
other principles or include category-valued fea-
tures where other theories do.
- 190 -
</bodyText>
<sectionHeader confidence="0.9986" genericHeader="method">
3 CATEGORIES
</sectionHeader>
<bodyText confidence="0.99988752631579">
In LTP categories and a set of inference rules
constitute the calculus. The addition of FU ne-
cessitates the extension of these with respect to
LTP without FU. Categories are for a start de-
fined in the framework introduced by Gazdar et
al. (1988). Gazdar et al. define category struc-
ture on a metatheoretical level as a pair &lt; E, C&gt;.
E is a quadruple&lt;F, A, r, p&gt; where F is a fi-
nite set of features; A is a set of atoms; r is a
function that divides the set of features into two
sets, those that take atomic values (Type 0 fea-
tures), and those that take categories as values
(Type I). p is a function that assigns a range of
atomic values to each Type 0 feature. C is a set
of constraints expressed in a language L. The
reader is referred to Gazdar et al. (1988) for a
precise definition of this language: we will merely
use it here. For LTP-FU, the category structure
in (2) and the constraints in (3) apply.
</bodyText>
<equation confidence="0.950098923076923">
(2)
F = { DOMAIN, RANGE, FIRST, LAST, CON-
NECTIVE, LABEL} U FEAT_NAMES
FEAT_NAMES = {PERSON,...., TENSE}
A = BASCAT U CONNECTIVES U
FEAT_VALUES
BASCAT = { N, V,...}
CONNECTIVES =
FEAT_VALUES = {1,2,3,
T = { &lt;DOMAIN, I&gt;, &lt;RANGE, 1&gt;, &lt;FIRST,
1&gt;, &lt;LAST, 1&gt;, &lt;CONNECTIVE,0&gt;,...}
p = { &lt;CONNECTIVE, CONNECTIVES&gt;,
&lt;LABEL, BASCAT&gt;, &lt;PERSON, {1,2,3,}&gt;,...}
</equation>
<listItem confidence="0.745775714285714">
(3)
(a) O(CONNECTIVE LABEL)
(b) 0(DOMAIN 4-+ RANGE)
(c) 0(DOMAIN 4-+ CONNECTIVE:( / V \) )
(d) 0(FIRST CONNECTIVE:*)
(e) Cl(FIRST 4—■ LAST)
(f) 0(RANGES f A FEAT_NAMES)
</listItem>
<bodyText confidence="0.9916255625">
The fact that &apos;category&apos; is a central notion
in CG justifies the division between features
that express syntactic combinatorial possibili-
ties ({DOMAIN,..., LABEL}) and other features
(FEAT-NAMES) in (2) 1.
In what follows we will use &apos;feature structure&apos; to
denote a set of feature-value combinations with
&apos;This view can for instance be found in the following
citation from Calder et al. (1986): &amp;quot;(..) these [categories]
can carry additional feature specifications&amp;quot; (Calder et al.,
1986, P. 7; my emphasis).
features from FEAT_NAMES. We will use &apos;cate-
gory&apos; in the sense common in categorial linguis-
tics. For a category with feature structure, we
will use the term &apos;category specification&apos;.
Constraint (3)(a) ensures that a category is ei-
ther complex or basic. Functor categories, those
with the connective \ or / are specified by (3)(b),
(3)(c); other complex categories are specified by
(3)(d) and (e); (3)(f) describes the distribution
of features from FEAT NAMES. Here we follow
Bouma (1988a) in the addition of features to com-
plex categories. Firstly features are added to
the argument (DOMAIN) in a complex category.
This is &amp;quot;to express all kinds of subcategoriza-
tion properties which an argument has to meet
as it functions as the complement of the functor&amp;quot;
(Bouma, 1988a, p. 27). Secondly, the category as
a whole, rather than the RANGE carries features.
&amp;quot;This has the advantage that complex categories
can be directly characterized as finite, verbal etc.&amp;quot;
(Bouma, 1988a, p. 27; cf. Bach, 1983).
</bodyText>
<sectionHeader confidence="0.998815" genericHeader="method">
4 INFERENCE-RULES
</sectionHeader>
<bodyText confidence="0.9633548">
A sequent in the calculus is denoted with P =&gt; T,
where P, called the antecedent, and T, the succe-
dent, are finite sequences of category specifica-
tions: P = K1 ... Km and T = L. In LTP P
and T are required to be non-empty; notice that
the succedent contains one and only one category
specification. The axioms and inference rules of
the calculus define the theorems of the categoria1
calculus. Recursive application of the inference
rules on a sequent may result in the derivation of
a sequent as a theorem of the calculus.
In what follows, X, Y and Z are categories;
A,B,C,D and E are feature structures; K,L,M,N
are category specifications; P, T, Q, U, V are
sequences of category specifications, where P, T
and Q are non-empty. We use the notation cate-
gory,leature structure:semantics.
Axioms are sequents of the form X;A:a =&gt; X;A:a.
Note that identical letters for categories and se-
mantic formulas denote identical categories and
identical semantic formulas; identical letters for
feature structures mean unified feature struc-
tures; and identical letters for category specifi-
cations mean category specifications with iden-
tical categories and unified features structures.
From the form of the axiom it may follow that
feature structures in antecedent and succedent
should unify. This principle is the Axiom Fea-
ture Convention (AFC).
In (4) the inference rules of LTP-FU are pre-
- 191 -
sented 2. [\ — e] denotes a rule that eliminates
a \ -connective. i denotes introduction. The &apos;ac-
tive type&apos; in a sequent is the category from which
the connective is removed.
</bodyText>
<figure confidence="0.7138455">
(4)
[/-e] u,(z/Y;A);B:13,T,V .&gt; Z
</figure>
<construct confidence="0.955598214285714">
if T =&gt; Y;A:a
and U,X;B:b(a),V =&gt; Z
[\--03] II,T ,(Y ;Ai) ;B:b =&gt; Z
if T =&gt; Y;A:a
and U,X;B:b(a),V =&gt; Z
[*-e] II, K:a*L:b,V =&gt; M
if 11,K:a,L:b,V =&gt; M
[/-i] T =&gt; (X/Y;A);B:-v.b
if T,Y;A:v =&gt; Z;B:b
[\-i] T =&gt; (Y;A\X);B;-v.b
if Y;A:v, T =&gt; X;B:b
[*-i] P:a,Q:b =&gt; K*L:c*d
if P:a =&gt; K:c
and Q:b =&gt; L:d
</construct>
<bodyText confidence="0.9998318">
Certain feature structures are required to unify
in inference rules. We formulate the so-called Ac-
tive Functor Feature Convention (AFFC) to con-
trol the distribution of features. This convention
is comparable to Head Feature Convention (Gaz-
dar et al., 1985) and Functor Feature Convention
(Bouma, 1988a). The AFFC states that the fea-
ture structure of an active functor type must be
unified with the feature structure on the RANGE
of the functor in the subsequent.
</bodyText>
<sectionHeader confidence="0.999304" genericHeader="method">
5 AN EXAMPLE
</sectionHeader>
<bodyText confidence="0.990473521739131">
This paragraph limits itself to some observations
concerning reflexives because this sheds light on
a remaining question: are there principles other
than AFFC and AFC necessary to account for
&apos;FOOT&apos; phenomena?
There are two properties of reflexive pronouns
that have to be accounted for in the theory.
2To envisage the rules without FU, just leave out all
feature structures
Firstly, the reflexive pronoun has to agree in num-
ber, person, and gender with some antecedent in
the sentence (Chierchia, 1988), mostly the sub-
ject. Secondly, the reflexive pronoun is not nec-
essarily the head of a constituent (Gazdar et al.,
1985).
The HFC in GPSG (Gazdar et al., 1985) cannot
instantiate the antecedent information of a reflex-
ive pronoun on a mothernode in cases where the
reflexive is not the head of a constituent. There-
fore in GPSG the so-called FOOT Feature Princi-
ple (FFP) is formulated. Together with the Con-
trol Agreement Principle (CAP) and the HFC,
the FFP ensures that agreement between the de-
manded antecedent and the reflexive pronoun is
obtained. Inclusion of a principle similar to FFP,
and the use of category-valued features could be a
solution for CUG. However, a solution that makes
use of means supplied by categorial theory would
keep us from &apos;stipulating axioms and principled&apos;,
and as we will see, has as a consequence that we
can avoid the use of category-valued features.
For an account of reflexives in LTP-FU we will
make use of reduction laws, other than the in-
ference rules in (4). These reduction laws (like
1) normally have to be stipulated within cate-
gorial theory, but in LTP they can be derived
as theorems within the calculus presented in (4)
(Moortgat, 1987b). Feature distribution for these
laws in LTP-FU can also be derived within the
calculus with the application of AFFC and AFC
and thus feature unification within these reduc-
tion laws also falls out as &apos;theorem&apos; of the calcu-
lus: it is not necessary to include other principles
than AFFC and AFC. In (5) a derivation for the
reduction law composition is given (cf. Moortgat,
1987, p. 6).
</bodyText>
<table confidence="0.836692733333333">
[COMP]
(X/Y;A);D (Y/Z;B);A =&gt; (I/Z;B);D
[I-i]
if (X/Y;A);D (Y/Z;B);A Z;B =&gt; X;D
[/-e]
if Z;B =&gt; Z;B
and (X/Y;A);D Y;A =&gt; X;D
[/-e]
if Y;A =&gt;Y;A
and X;D =&gt;X;D
[CUT]
U T V =&gt; L
if T =&gt; K:a
and TY K:a V=&gt; L
- 192 -
</table>
<figure confidence="0.967646296296296">
(7)
Jan houdt van zichzelf.
John loves of himself.
zichzelf: (((np;33\s)/np;C);A \ (np;3S\s));A
houdt van
((np;33\8)/PP01);13 (pp/np;C);D
[COMP]
((np;33\s)/np;C);B
Jan houdt van zichzelf
np;3S ((np;33\8)/PP;A)03 (pp/np;C);D (((np;33\s)/np;C);A\(np;33\s));A =&gt; s;E
[CUT]
np;3S ((np;33\s)/np;C)011 (((np;33\s)/np;C);A\(np;3S\s));A =&gt; s;E
[\-e]
if ((np;3S\s)/np;C);B =&gt; ((np;33\s)/np;C);A
and np (np;33\s);A =&gt; s;E
[\-e]
if np;3S =&gt; np;3S
and s =&gt; s;E
&amp;quot;x&amp;quot;yHOUDT(x)(y) &amp;quot;z.VAN(z)
[COMP]
&amp;quot;z&amp;quot;yHOUDT(VAN(z))(y)
Jan houdt van zichzelf
JAN &amp;quot;x&amp;quot;yHOUDT(x)(y) &amp;quot;z.VAN(z) &amp;quot;h&amp;quot;fh(f)(f)
[CUT]
JAN &amp;quot;z&amp;quot;yHOUDT(VAN(z))(y) &amp;quot;h&amp;quot;fh(f)(f)
&amp;quot;f.HOUDT(VAN(f))(f)
HOUDT(VAN(JAN))(JAN)
</figure>
<bodyText confidence="0.999870371428571">
The cut rule (6) is not an inference rule, but
a structural rule that is used to include proofs
from a `data base&apos; into other proofs, for in-
stance to include the results of the application
of composition to part of a sequent. The cut
rule is added to the inference rules of the cal-
culus 3. In (7(d)) the cut rule is used once to
include a partial proof derived with the compo-
sition rule. The lexical category we assume the
reflexive to have (see 7(b)) takes a verb with two
arguments as its argument, and results in a verb
with one argument. The verb requires, in the
example, its subject to carry two feature-value
pairs: [num#sing,pers#3]. (In (7(d)), all feature
structures containing these features are abbrevi-
ated with the notation 3S.) These features are
instantiated for the subject of the resulting one-
argument verb. (7) gives a derivation where the
reflexive is embedded in a prepositional phrase.
In the example only relevant feature structures
have been given actual feature-value pairs. (7(b))
presents the category of the reflexive. (c) presents
one reduction using the composition rule and (d)
presents the reduction of the whole sequent. The
derivation of the semantic structure is presented
seperately (e-f) from the syntactic derivation to
improve readability.
The reflexive&apos;s semantics imposes equality upon
the arguments of the verb (Szabolcsi, 1987; but
see also Chierchia (1988) and Popowich (1987)
for other proposals). Note that in all cases, the
reflexive should combine with the verb before the
subject comes into play: the reflexive&apos;s seman-
tics can only deal with A-bound variables as ar-
guments.
</bodyText>
<sectionHeader confidence="0.99992" genericHeader="method">
6 IMPLEMENTATION
</sectionHeader>
<bodyText confidence="0.99998525">
In this section a Prolog implementation of LTP-
FU is described. The implementation makes use
of the interpreter described in Moortgat (1988).
Categorial calculi, described in the proper format,
can be offered to this interpreter. The interpreter
then uses the axioms, inference rules and reduc-
tion rules as data and applies them to an input
sequent recursively, in order to see whether the
input sequent is a theorem in the calculus. In
order to `implement&apos; a calculus, firstly it has to
be described in a proper format. =&gt; and 4- are
defined as Prolog operators and denote respec-
tively derivability in the calculus and inference
during theorem proving. So, for instance with
respect to the axiom, we may say that we have
shown that X;A reduces to X;B if feat_des_unify
</bodyText>
<subsectionHeader confidence="0.5575865">
3For consequences of the addition of this rule, see
Moortgat (1988)
</subsectionHeader>
<bodyText confidence="0.998941375">
between A and B holds and true holds. The list
notation is equal to the usual Prolog list nota-
tion, and is used to find the proper number of
arguments while unifying an actual sequent with
a rule. For instance [TIR] cannot be instantiated
as an empty list, whereas U can be instantiated
as one. The LTP-FU calculus is presented in (8)
(semantics is left out for readability).
</bodyText>
<figure confidence="0.965534210526316">
(8)
[axiom] [X ; A] =&gt; [X;B] &lt;-
(f eat_des_unif y (A ,B))
true.
[/-e] (13,[(X/Y;A);B],ETIBLV) &gt; [Z]&lt;-
(Tilt] &gt; [Y;A]
(UJX;BLV) =&gt; [Z].
[\-e] 0,[TIR] ,E(Y;A\X);BLV) =&gt; (z]&lt;-
(Tilt] =&gt; [Y;A]
(17,[X;BLV) &gt; [Z].
[4.-e] (U, [IC*1..],Y) =&gt; EM]
(U,[K,L],V) =&gt; [M].
[I-i] (Tilt] =&gt; [(X/Y;A);B]
ET I R] , [Y;A] =&gt; [X;B].
[\-i] [YIR] =&gt; [(Y;A\X);B]
Y;A, [Tilt] =&gt; [X;B]
[*-i] UPIRLDIIR1) =&gt; [K*L]
[PIR] =&gt; [X] k
EQ I R11 =&gt; [LI.
</figure>
<bodyText confidence="0.999753176470588">
Note that feature unification is added explicitely:
identity statements are interpreted &amp;quot;as instruc-
tions to replace the substructures with their uni-
fications&amp;quot; (Shieber, 1986, p. 23). Prolog, how-
ever, does not allow this so-called destructive uni-
fication and therefore unification is reformulated.
The necessity for destructive unification becomes
clear from (9), where it is necessary to let features
percolate to the &amp;quot;mother node&amp;quot; of a constituent.
Note that in (9) reentrance for the modifier het
and the specifier kleine is necessary (cf. Bouma,
1988a) to let the feature-value pair sex#fem per-
colate to the np. Reentrance is denoted with a
number followed by a hook. It is represented
within lexical items; it is therefore not necessary
to stipulate principles to account for percolation
through reentrance.
</bodyText>
<equation confidence="0.726707">
- 194 -
(9)
</equation>
<bodyText confidence="0.9730181875">
het kleine meisje
the little girl
(np/n;1&gt;C);1&gt;D (m/n;2&gt;A);2&gt;B n;[sex#fen]
Within the ITI-TNO parser project (see foot-
note on first page), an attempt is made to de-
velop a parser based on the mechanisms described
here, using standard software development meth-
ods and techniques. During the so-called infor-
mation analysis and the design stage (Van Berkel
et al., 1988), several prototypes of a Lambek The-
orem Prover have been developed (Van Paassen,
1988). Implementation in C is currently under-
taken, including semantic representation. Addi-
tion of Feature unification to this parser is sched-
uled for 1989. Lexical software for this purpose
(in C) is available (Van der Linden, 1988b).
</bodyText>
<sectionHeader confidence="0.9999525" genericHeader="evaluation">
7 CONCLUDING
REMARKS
</sectionHeader>
<bodyText confidence="0.999936866666667">
Feature unification can be added to LTP in a
simple and straightforward way. Because reduc-
tion laws that fall out (including feature unifi-
cation) as theorems in LTP-FU can account for
FOOT phenomena, it is not necessary to &apos;stipu-
late&apos; category-valued FOOT features and mecha-
nisms to account for their percolation. Not only
reflexives, but also unbounded dependencies can
be described without the use of category-valued
features. Bouma (1987) shows that the addition
of Type 0 features GAP with BASCAT as its
value and ISL with {-1-,-} as its value are the fea-
tures used in an account of unbounded dependen-
cies 4.
LTP-FU can do without category-valued features
in FEAT_NAMES, and this obviously reduces
complexity of the unification process. We can add
to this that it is possible to develop efficient algo-
rithms and computerprograms for LTP (Moort-
gat, 1987a; Van der Wouden and Heylen, 1988;
Van Paassen, 1988; Bouma, 1989). Therefore
LTP-FU is attractive for computational linguis-
tics.
A problem remains with respect to the seman-
tics of reflexives we assume here. A reflexive as
zichzelf in (7) can only take a verb as an argu-
ment, and not for instance a combination of a
subject and a verb (S/NP): the reflexive only op-
erates on a functor with two different .-bound ar-
guments. This implies that it is hard for this kind
</bodyText>
<subsectionHeader confidence="0.384746">
4Van der Linden (1988a) discusses S-V agreement.
</subsectionHeader>
<bodyText confidence="0.9999784">
of category to participate in a Left-to-Right anal-
ysis (Ades and Steedman, 1982). A solution could
be to describe reflexives syntactically as functors
of type (X/NP)\X, that impose reentrance (and
not equality) upon the NP argument and some
other NP. This implies however that we should
not only construct a semantic representation, but
also a representation of the syntactic derivation,
in order to be able to refer to NP&apos;s that have al-
ready served as arguments to some functor. Fu-
ture research will be carried out with respect to
this constructive categorial grammar.
A final remark concerns the notion of category
structure taken from Gazdar et al. (1988) and ap-
plied here. For an account of modifiers and speci-
fiers, it is necessary to include reentrant features.
Therefore the definition of category structure in
LTP-FU, but also that in CUG and UCG where
reentrance is used as well, necessitates extended
versions of the notion Gazdar et al. supply.
</bodyText>
<sectionHeader confidence="0.999682" genericHeader="references">
8 LITERATURE
</sectionHeader>
<bodyText confidence="0.801189965517241">
Ades, A.; and Steedman, M. 1982 On the order
of words. Linguistics and Philosophy, 4, pp. 517-
558.
Bach, E. 1983 On the relationship between word-
grammar and phrase-grammar. Natural Lan-
guage and Linguistic Theory 1, 65-89.
van Benthem, J. 1986 Categorial Grammar.
Chapter 7 in Van Benthem, J., Essays in Logi-
cal Semantics. Reidel, Dordrecht.
van Berkel, B.; van der Linden, H.; and van
Paassen, A. 1988 Parser Project, analysis and de-
sign. Internal report 88 ITI B 24, ITI-TNO, Delft
(Dutch).
Bouma, G. 1987 A unification-based analysis of
unbounded dependencies in categorial grammar.
In: Groenendijk et al. 1987. pp. 1-19.
Bouma, G. 1988a Modifiers and specifiers in cat-
egorial unification grammar. Linguistics 26, 21-
46.
Bouma, G. 1989 Efficient processing of flexible
categorial grammar. This volume.
Bouma, G.; Konig, E.; Uszkoreit, H. 1988 A flex-
ible graph-unification formalism and its applica-
tion to natural-language processing. IBM Jour-
nal of Research and Development, 32, pp 170-184.
Calder, J.; Klein, E.; and Zeevat, J. 1988 Unifi-
cation categorial grammar: a consise, extendable
grammar for natural language processing. In Pro-
ceedings of COLING &apos;88, Budapest.
</bodyText>
<reference confidence="0.994864338983051">
Chierchia, G. 1988. Aspects of a categorial theory
of binding. In Oehrle et al. 1988. pp. 125-151.
Gazdar, G.; Klein, E.; Pullum, G.; and Sag,
I. 1985 Generalized Phrase Structure Grammar.
- 195 -
Basil Blackwell, Oxford.
Gazdar, G.; Pullum, G.; Carpenter, R.; Klein, E.;
Hukari, T.; and Levine, D. 1988 Category Struc-
ture. Computational Linguistics 14, 1-19.
Groenendijk, J.; Stokhof, M.; and Veltman, F.,
Eds. 1987 Proceedings of the sixth Amsterdam
Colloquium. April 13-16 1987. University of Am-
sterdam: ITLI.
Lambek, J. 1958 The mathematics of sentence
structure. Am. Math. Monthly 65, 154-169.
Klein, E.; and Van Benthem, J., Eds. 1988. Cat-
egories, Polymorphism and Unification. Edin-
burgh.
van der Linden, H. 1988a GUACAMOLE, Gram-
matical Unification-based Analysis in a CAtego-
rial paradigm with MOrphological and LExical
support. Internal report 88 ITI B 37, ITI-TNO,
Delft (Dutch).
van der Linden, H. 1988b User-documentation for
SIMPLEX. Internal report 88 ITI B 34, ITI-TNO,
Delft (Dutch).
Moortgat, M. 1987a Lambek Theorem Proving.
In Klein; and van Benthem 1988, pp. 169-200.
Moortgat, M. 1987b Generalized Categorial
Grammar. To appear in Droste, F., Ed., Main-
streams in Linguistics. Benjamins, Amsterdam.
Moortgat, M. 1988 Categorial Investigations.
Logical and linguistic aspects of the Lambek cal-
culus. Dissertation, University of Amsterdam.
Oehrle, R.; Bach, E.; and Wheeler, D. Eds., 1981
Categorial grammar and natural language struc-
ture. Reidel, Dordrecht.
Van Paassen, A. 1988 Reduction of the
searchspace in Lambek Theorem Proving. Inter-
nal report 88 ITI B 23, ITI-TNO, Delft (Dutch).
Popowich, F. 1988, A Unification-Based Frame-
work for Anaphora in Klein and van Benthem
1988. pp. 277-305.
Shieber, S. 1986 An introduction to Unification-
Based Approaches to Grammar. University of
Chicago Press, Chicago.
Szabolcsi, A. 1987 Bound variables in syntax (are
there any?). In Groenendijk et al. 1987, pp. 331-
351.
Uszkoreit, H. 1986 Categorial Unification Gram-
mars. In Proceedings of COLING 1986, Bonn.
van der Wouden, T.; and Heylen, D. 1988 Massive
Disambiguation of large text corpora with flexible
categorial grammar. In Proceedings of COLING
1988, Budapest.
Zeevat, H.; Klein, E.; and Calder, J. 1986 Unifi-
cation Categorial Grammar. Paper, University of
Edinburgh.
- 196 -
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.369415">
<title confidence="0.9972245">LAMBEK THEOREM PROVING AND FEATURE UNIFICATION</title>
<author confidence="0.996199">Erik-Jan van_der_Linden</author>
<affiliation confidence="0.9994755">Institute for Language Technology and Artificial Intelligence Tilburg University</affiliation>
<author confidence="0.841232">The Netherlands LE_Tilburg</author>
<abstract confidence="0.922829111111111">1 ABSTRACT Feature Unification can be integrated with Lambek Theorem Proving in a simple and straightforward way. Two principles determine all distribution of features in LTP. It is not necessary to stipulate other principles or include category-valued features where other theories do. The structure of categories is discussed with respect to the notion of category structure of Gazdar et al. (1988).</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>G Chierchia</author>
</authors>
<title>Aspects of a categorial theory of binding.</title>
<date>1988</date>
<journal>In Oehrle</journal>
<booktitle>Generalized Phrase Structure Grammar. - 195</booktitle>
<pages>125--151</pages>
<publisher>Basil Blackwell,</publisher>
<location>Oxford.</location>
<contexts>
<context position="9606" citStr="Chierchia, 1988" startWordPosition="1588" endWordPosition="1589">ctor type must be unified with the feature structure on the RANGE of the functor in the subsequent. 5 AN EXAMPLE This paragraph limits itself to some observations concerning reflexives because this sheds light on a remaining question: are there principles other than AFFC and AFC necessary to account for &apos;FOOT&apos; phenomena? There are two properties of reflexive pronouns that have to be accounted for in the theory. 2To envisage the rules without FU, just leave out all feature structures Firstly, the reflexive pronoun has to agree in number, person, and gender with some antecedent in the sentence (Chierchia, 1988), mostly the subject. Secondly, the reflexive pronoun is not necessarily the head of a constituent (Gazdar et al., 1985). The HFC in GPSG (Gazdar et al., 1985) cannot instantiate the antecedent information of a reflexive pronoun on a mothernode in cases where the reflexive is not the head of a constituent. Therefore in GPSG the so-called FOOT Feature Principle (FFP) is formulated. Together with the Control Agreement Principle (CAP) and the HFC, the FFP ensures that agreement between the demanded antecedent and the reflexive pronoun is obtained. Inclusion of a principle similar to FFP, and the </context>
<context position="13439" citStr="Chierchia (1988)" startWordPosition="2209" endWordPosition="2210">ubject of the resulting oneargument verb. (7) gives a derivation where the reflexive is embedded in a prepositional phrase. In the example only relevant feature structures have been given actual feature-value pairs. (7(b)) presents the category of the reflexive. (c) presents one reduction using the composition rule and (d) presents the reduction of the whole sequent. The derivation of the semantic structure is presented seperately (e-f) from the syntactic derivation to improve readability. The reflexive&apos;s semantics imposes equality upon the arguments of the verb (Szabolcsi, 1987; but see also Chierchia (1988) and Popowich (1987) for other proposals). Note that in all cases, the reflexive should combine with the verb before the subject comes into play: the reflexive&apos;s semantics can only deal with A-bound variables as arguments. 6 IMPLEMENTATION In this section a Prolog implementation of LTPFU is described. The implementation makes use of the interpreter described in Moortgat (1988). Categorial calculi, described in the proper format, can be offered to this interpreter. The interpreter then uses the axioms, inference rules and reduction rules as data and applies them to an input sequent recursively,</context>
</contexts>
<marker>Chierchia, 1988</marker>
<rawString>Chierchia, G. 1988. Aspects of a categorial theory of binding. In Oehrle et al. 1988. pp. 125-151. Gazdar, G.; Klein, E.; Pullum, G.; and Sag, I. 1985 Generalized Phrase Structure Grammar. - 195 -Basil Blackwell, Oxford.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Gazdar</author>
<author>G Pullum</author>
<author>R Carpenter</author>
<author>E Klein</author>
<author>T Hukari</author>
<author>D Levine</author>
</authors>
<date>1988</date>
<journal>Category Structure. Computational Linguistics</journal>
<volume>14</volume>
<pages>1--19</pages>
<contexts>
<context position="4032" citStr="Gazdar et al. (1988)" startWordPosition="641" endWordPosition="644">wo principles will be introduced that determine the distribution of features, not only for the rules of the calculus, but also for reduction rules that can be derived within the calculus. From the discussion of an example it is concluded that it is not necessary to stipulate other principles or include category-valued features where other theories do. - 190 - 3 CATEGORIES In LTP categories and a set of inference rules constitute the calculus. The addition of FU necessitates the extension of these with respect to LTP without FU. Categories are for a start defined in the framework introduced by Gazdar et al. (1988). Gazdar et al. define category structure on a metatheoretical level as a pair &lt; E, C&gt;. E is a quadruple&lt;F, A, r, p&gt; where F is a finite set of features; A is a set of atoms; r is a function that divides the set of features into two sets, those that take atomic values (Type 0 features), and those that take categories as values (Type I). p is a function that assigns a range of atomic values to each Type 0 feature. C is a set of constraints expressed in a language L. The reader is referred to Gazdar et al. (1988) for a precise definition of this language: we will merely use it here. For LTP-FU, </context>
<context position="18869" citStr="Gazdar et al. (1988)" startWordPosition="3110" endWordPosition="3113">o-Right analysis (Ades and Steedman, 1982). A solution could be to describe reflexives syntactically as functors of type (X/NP)\X, that impose reentrance (and not equality) upon the NP argument and some other NP. This implies however that we should not only construct a semantic representation, but also a representation of the syntactic derivation, in order to be able to refer to NP&apos;s that have already served as arguments to some functor. Future research will be carried out with respect to this constructive categorial grammar. A final remark concerns the notion of category structure taken from Gazdar et al. (1988) and applied here. For an account of modifiers and specifiers, it is necessary to include reentrant features. Therefore the definition of category structure in LTP-FU, but also that in CUG and UCG where reentrance is used as well, necessitates extended versions of the notion Gazdar et al. supply. 8 LITERATURE Ades, A.; and Steedman, M. 1982 On the order of words. Linguistics and Philosophy, 4, pp. 517- 558. Bach, E. 1983 On the relationship between wordgrammar and phrase-grammar. Natural Language and Linguistic Theory 1, 65-89. van Benthem, J. 1986 Categorial Grammar. Chapter 7 in Van Benthem,</context>
</contexts>
<marker>Gazdar, Pullum, Carpenter, Klein, Hukari, Levine, 1988</marker>
<rawString>Gazdar, G.; Pullum, G.; Carpenter, R.; Klein, E.; Hukari, T.; and Levine, D. 1988 Category Structure. Computational Linguistics 14, 1-19.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Groenendijk</author>
<author>M Stokhof</author>
<author>F Veltman</author>
<author>Eds</author>
</authors>
<date>1987</date>
<booktitle>Proceedings of the sixth Amsterdam Colloquium.</booktitle>
<institution>University of Amsterdam: ITLI.</institution>
<marker>Groenendijk, Stokhof, Veltman, Eds, 1987</marker>
<rawString>Groenendijk, J.; Stokhof, M.; and Veltman, F., Eds. 1987 Proceedings of the sixth Amsterdam Colloquium. April 13-16 1987. University of Amsterdam: ITLI.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Lambek</author>
</authors>
<title>The mathematics of sentence structure.</title>
<date>1958</date>
<journal>Am. Math. Monthly</journal>
<volume>65</volume>
<pages>154--169</pages>
<contexts>
<context position="2195" citStr="Lambek, 1958" startWordPosition="351" endWordPosition="352">om I had the pleasure to cooperate with within this project: Brigit van Berkel, Michael Moortgat and Adriaan van Paassen. Gosse Bouma, Harry Bunt, Bart Geurts, Elias Thijsse, Ton van der Wouden, and three anonymous ACL reviewers made stimulating comments on earlier versions of this paper. Michael Moortgat generously supplied a copy of the interpreter described in his 1988 dissertation it follows as a theorem from a set of axioms and inference rules. Especially by the work of Van Benthem (1986) and Moortgat (1988) this view, which we will name with Moortgat (1987a) Lambek Theorem Proving (LTP; Lambek, 1958), has become popular among a number of linguists. The descriptive power of LTP can be extended if unification (Shieber, 1986) is added. Several theories have been developed that combine categorial formalisms and unification based formalisms. Within Unification Categorial Grammar (UCG, Calder et al., 1988, Zeevat et al., 1986) unification &amp;quot;is the only operation over grammatical objects&amp;quot; (Calder et al. 1988, p. 83), and this includes syntactic and semantic operations. Within Categorial Unification Grammar (Uszkoreit, 1986; Bouma, 1988a), reduction rules are the main operation over grammatical ob</context>
</contexts>
<marker>Lambek, 1958</marker>
<rawString>Lambek, J. 1958 The mathematics of sentence structure. Am. Math. Monthly 65, 154-169.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Klein</author>
<author>J Van Benthem</author>
<author>Eds</author>
</authors>
<title>Categories, Polymorphism and Unification.</title>
<date>1988</date>
<location>Edinburgh.</location>
<marker>Klein, Van Benthem, Eds, 1988</marker>
<rawString>Klein, E.; and Van Benthem, J., Eds. 1988. Categories, Polymorphism and Unification. Edinburgh.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H van der Linden</author>
</authors>
<title>GUACAMOLE, Grammatical Unification-based Analysis in a CAtegorial paradigm with MOrphological and LExical support.</title>
<date>1988</date>
<journal>Internal report 88 ITI B</journal>
<volume>37</volume>
<location>ITI-TNO, Delft (Dutch).</location>
<marker>van der Linden, 1988</marker>
<rawString>van der Linden, H. 1988a GUACAMOLE, Grammatical Unification-based Analysis in a CAtegorial paradigm with MOrphological and LExical support. Internal report 88 ITI B 37, ITI-TNO, Delft (Dutch).</rawString>
</citation>
<citation valid="true">
<authors>
<author>H van der Linden</author>
</authors>
<title>User-documentation for SIMPLEX.</title>
<date>1988</date>
<journal>Internal report 88 ITI B</journal>
<volume>34</volume>
<location>ITI-TNO, Delft (Dutch).</location>
<marker>van der Linden, 1988</marker>
<rawString>van der Linden, H. 1988b User-documentation for SIMPLEX. Internal report 88 ITI B 34, ITI-TNO, Delft (Dutch).</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Moortgat</author>
</authors>
<title>1987a Lambek Theorem Proving.</title>
<date>1988</date>
<booktitle>In Klein; and van Benthem</booktitle>
<pages>169--200</pages>
<contexts>
<context position="954" citStr="Moortgat, 1988" startWordPosition="144" endWordPosition="145">all distribution of features in LTP. It is not necessary to stipulate other principles or include category-valued features where other theories do. The structure of categories is discussed with respect to the notion of category structure of Gazdar et al. (1988). 2 INTRODUCTION A tendency in current linguistic theory is to shift the &apos;explanatory burden&apos; from the syntactic component to the lexicon. Within Categorial Grammar (CG), this so-called lexicalist principle is implemented in a radical fashion: syntactic information is projected entirely from category structure assigned to lexical items (Moortgat, 1988). A small set of rules like (1) constitutes the grammar. The rules reduce sequences of categories to one category. (1) X:a X \Y:b =&gt; Y:b(a) CG implements the Compositionality Principle by stipulating a correspondence between syntactic operations and semantic operations (Van Benthem 1986). An approach to the analysis of natural language in CG is to view the categorial reduction system, the set of reduction rules, as a calculus, where parsing of a syntagm is an attempt to prove that *Part of the research described in this paper was carried out within the &apos;Categorial Parser Project&apos; at ITI-TNO. I</context>
<context position="13818" citStr="Moortgat (1988)" startWordPosition="2270" endWordPosition="2271">tion of the semantic structure is presented seperately (e-f) from the syntactic derivation to improve readability. The reflexive&apos;s semantics imposes equality upon the arguments of the verb (Szabolcsi, 1987; but see also Chierchia (1988) and Popowich (1987) for other proposals). Note that in all cases, the reflexive should combine with the verb before the subject comes into play: the reflexive&apos;s semantics can only deal with A-bound variables as arguments. 6 IMPLEMENTATION In this section a Prolog implementation of LTPFU is described. The implementation makes use of the interpreter described in Moortgat (1988). Categorial calculi, described in the proper format, can be offered to this interpreter. The interpreter then uses the axioms, inference rules and reduction rules as data and applies them to an input sequent recursively, in order to see whether the input sequent is a theorem in the calculus. In order to `implement&apos; a calculus, firstly it has to be described in a proper format. =&gt; and 4- are defined as Prolog operators and denote respectively derivability in the calculus and inference during theorem proving. So, for instance with respect to the axiom, we may say that we have shown that X;A red</context>
</contexts>
<marker>Moortgat, 1988</marker>
<rawString>Moortgat, M. 1987a Lambek Theorem Proving. In Klein; and van Benthem 1988, pp. 169-200.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Moortgat</author>
</authors>
<title>Generalized Categorial Grammar.</title>
<date>1987</date>
<journal>Dissertation, University of</journal>
<location>Amsterdam. Moortgat, M.</location>
<note>To appear in</note>
<contexts>
<context position="2150" citStr="Moortgat (1987" startWordPosition="344" endWordPosition="345">ect&apos; at ITI-TNO. I wish to thank the people whom I had the pleasure to cooperate with within this project: Brigit van Berkel, Michael Moortgat and Adriaan van Paassen. Gosse Bouma, Harry Bunt, Bart Geurts, Elias Thijsse, Ton van der Wouden, and three anonymous ACL reviewers made stimulating comments on earlier versions of this paper. Michael Moortgat generously supplied a copy of the interpreter described in his 1988 dissertation it follows as a theorem from a set of axioms and inference rules. Especially by the work of Van Benthem (1986) and Moortgat (1988) this view, which we will name with Moortgat (1987a) Lambek Theorem Proving (LTP; Lambek, 1958), has become popular among a number of linguists. The descriptive power of LTP can be extended if unification (Shieber, 1986) is added. Several theories have been developed that combine categorial formalisms and unification based formalisms. Within Unification Categorial Grammar (UCG, Calder et al., 1988, Zeevat et al., 1986) unification &amp;quot;is the only operation over grammatical objects&amp;quot; (Calder et al. 1988, p. 83), and this includes syntactic and semantic operations. Within Categorial Unification Grammar (Uszkoreit, 1986; Bouma, 1988a), reduction rul</context>
<context position="10789" citStr="Moortgat, 1987" startWordPosition="1792" endWordPosition="1793">nciple similar to FFP, and the use of category-valued features could be a solution for CUG. However, a solution that makes use of means supplied by categorial theory would keep us from &apos;stipulating axioms and principled&apos;, and as we will see, has as a consequence that we can avoid the use of category-valued features. For an account of reflexives in LTP-FU we will make use of reduction laws, other than the inference rules in (4). These reduction laws (like 1) normally have to be stipulated within categorial theory, but in LTP they can be derived as theorems within the calculus presented in (4) (Moortgat, 1987b). Feature distribution for these laws in LTP-FU can also be derived within the calculus with the application of AFFC and AFC and thus feature unification within these reduction laws also falls out as &apos;theorem&apos; of the calculus: it is not necessary to include other principles than AFFC and AFC. In (5) a derivation for the reduction law composition is given (cf. Moortgat, 1987, p. 6). [COMP] (X/Y;A);D (Y/Z;B);A =&gt; (I/Z;B);D [I-i] if (X/Y;A);D (Y/Z;B);A Z;B =&gt; X;D [/-e] if Z;B =&gt; Z;B and (X/Y;A);D Y;A =&gt; X;D [/-e] if Y;A =&gt;Y;A and X;D =&gt;X;D [CUT] U T V =&gt; L if T =&gt; K:a and TY K:a V=&gt; L - 192 - (</context>
<context position="17696" citStr="Moortgat, 1987" startWordPosition="2912" endWordPosition="2914">y-valued FOOT features and mechanisms to account for their percolation. Not only reflexives, but also unbounded dependencies can be described without the use of category-valued features. Bouma (1987) shows that the addition of Type 0 features GAP with BASCAT as its value and ISL with {-1-,-} as its value are the features used in an account of unbounded dependencies 4. LTP-FU can do without category-valued features in FEAT_NAMES, and this obviously reduces complexity of the unification process. We can add to this that it is possible to develop efficient algorithms and computerprograms for LTP (Moortgat, 1987a; Van der Wouden and Heylen, 1988; Van Paassen, 1988; Bouma, 1989). Therefore LTP-FU is attractive for computational linguistics. A problem remains with respect to the semantics of reflexives we assume here. A reflexive as zichzelf in (7) can only take a verb as an argument, and not for instance a combination of a subject and a verb (S/NP): the reflexive only operates on a functor with two different .-bound arguments. This implies that it is hard for this kind 4Van der Linden (1988a) discusses S-V agreement. of category to participate in a Left-to-Right analysis (Ades and Steedman, 1982). A s</context>
</contexts>
<marker>Moortgat, 1987</marker>
<rawString>Moortgat, M. 1987b Generalized Categorial Grammar. To appear in Droste, F., Ed., Mainstreams in Linguistics. Benjamins, Amsterdam. Moortgat, M. 1988 Categorial Investigations. Logical and linguistic aspects of the Lambek calculus. Dissertation, University of Amsterdam. Oehrle, R.; Bach, E.; and Wheeler, D. Eds., 1981 Categorial grammar and natural language structure. Reidel, Dordrecht.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Van Paassen</author>
</authors>
<title>Reduction of the searchspace in Lambek Theorem Proving.</title>
<date>1988</date>
<journal>Internal report 88 ITI B</journal>
<volume>23</volume>
<pages>277--305</pages>
<location>Delft (Dutch). Popowich, F.</location>
<marker>Van Paassen, 1988</marker>
<rawString>Van Paassen, A. 1988 Reduction of the searchspace in Lambek Theorem Proving. Internal report 88 ITI B 23, ITI-TNO, Delft (Dutch). Popowich, F. 1988, A Unification-Based Framework for Anaphora in Klein and van Benthem 1988. pp. 277-305.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Shieber</author>
</authors>
<title>An introduction to UnificationBased Approaches to Grammar.</title>
<date>1986</date>
<publisher>University of Chicago Press,</publisher>
<location>Chicago.</location>
<contexts>
<context position="2320" citStr="Shieber, 1986" startWordPosition="371" endWordPosition="372">sse Bouma, Harry Bunt, Bart Geurts, Elias Thijsse, Ton van der Wouden, and three anonymous ACL reviewers made stimulating comments on earlier versions of this paper. Michael Moortgat generously supplied a copy of the interpreter described in his 1988 dissertation it follows as a theorem from a set of axioms and inference rules. Especially by the work of Van Benthem (1986) and Moortgat (1988) this view, which we will name with Moortgat (1987a) Lambek Theorem Proving (LTP; Lambek, 1958), has become popular among a number of linguists. The descriptive power of LTP can be extended if unification (Shieber, 1986) is added. Several theories have been developed that combine categorial formalisms and unification based formalisms. Within Unification Categorial Grammar (UCG, Calder et al., 1988, Zeevat et al., 1986) unification &amp;quot;is the only operation over grammatical objects&amp;quot; (Calder et al. 1988, p. 83), and this includes syntactic and semantic operations. Within Categorial Unification Grammar (Uszkoreit, 1986; Bouma, 1988a), reduction rules are the main operation over grammatical objects, but semantic operations are reformulated within the unification formalism, as properties of lexemes (Bouma et al., 198</context>
<context position="15484" citStr="Shieber, 1986" startWordPosition="2556" endWordPosition="2557">ut for readability). (8) [axiom] [X ; A] =&gt; [X;B] &lt;- (f eat_des_unif y (A ,B)) true. [/-e] (13,[(X/Y;A);B],ETIBLV) &gt; [Z]&lt;- (Tilt] &gt; [Y;A] (UJX;BLV) =&gt; [Z]. [\-e] 0,[TIR] ,E(Y;A\X);BLV) =&gt; (z]&lt;- (Tilt] =&gt; [Y;A] (17,[X;BLV) &gt; [Z]. [4.-e] (U, [IC*1..],Y) =&gt; EM] (U,[K,L],V) =&gt; [M]. [I-i] (Tilt] =&gt; [(X/Y;A);B] ET I R] , [Y;A] =&gt; [X;B]. [\-i] [YIR] =&gt; [(Y;A\X);B] Y;A, [Tilt] =&gt; [X;B] [*-i] UPIRLDIIR1) =&gt; [K*L] [PIR] =&gt; [X] k EQ I R11 =&gt; [LI. Note that feature unification is added explicitely: identity statements are interpreted &amp;quot;as instructions to replace the substructures with their unifications&amp;quot; (Shieber, 1986, p. 23). Prolog, however, does not allow this so-called destructive unification and therefore unification is reformulated. The necessity for destructive unification becomes clear from (9), where it is necessary to let features percolate to the &amp;quot;mother node&amp;quot; of a constituent. Note that in (9) reentrance for the modifier het and the specifier kleine is necessary (cf. Bouma, 1988a) to let the feature-value pair sex#fem percolate to the np. Reentrance is denoted with a number followed by a hook. It is represented within lexical items; it is therefore not necessary to stipulate principles to accou</context>
</contexts>
<marker>Shieber, 1986</marker>
<rawString>Shieber, S. 1986 An introduction to UnificationBased Approaches to Grammar. University of Chicago Press, Chicago.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Szabolcsi</author>
</authors>
<title>Bound variables in syntax (are there any?).</title>
<date>1987</date>
<booktitle>In Groenendijk et</booktitle>
<pages>331--351</pages>
<contexts>
<context position="13408" citStr="Szabolcsi, 1987" startWordPosition="2204" endWordPosition="2205">res are instantiated for the subject of the resulting oneargument verb. (7) gives a derivation where the reflexive is embedded in a prepositional phrase. In the example only relevant feature structures have been given actual feature-value pairs. (7(b)) presents the category of the reflexive. (c) presents one reduction using the composition rule and (d) presents the reduction of the whole sequent. The derivation of the semantic structure is presented seperately (e-f) from the syntactic derivation to improve readability. The reflexive&apos;s semantics imposes equality upon the arguments of the verb (Szabolcsi, 1987; but see also Chierchia (1988) and Popowich (1987) for other proposals). Note that in all cases, the reflexive should combine with the verb before the subject comes into play: the reflexive&apos;s semantics can only deal with A-bound variables as arguments. 6 IMPLEMENTATION In this section a Prolog implementation of LTPFU is described. The implementation makes use of the interpreter described in Moortgat (1988). Categorial calculi, described in the proper format, can be offered to this interpreter. The interpreter then uses the axioms, inference rules and reduction rules as data and applies them t</context>
</contexts>
<marker>Szabolcsi, 1987</marker>
<rawString>Szabolcsi, A. 1987 Bound variables in syntax (are there any?). In Groenendijk et al. 1987, pp. 331-351.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Uszkoreit</author>
</authors>
<title>Categorial Unification Grammars.</title>
<date>1986</date>
<booktitle>In Proceedings of COLING 1986,</booktitle>
<location>Bonn. van</location>
<contexts>
<context position="2720" citStr="Uszkoreit, 1986" startWordPosition="429" endWordPosition="430"> view, which we will name with Moortgat (1987a) Lambek Theorem Proving (LTP; Lambek, 1958), has become popular among a number of linguists. The descriptive power of LTP can be extended if unification (Shieber, 1986) is added. Several theories have been developed that combine categorial formalisms and unification based formalisms. Within Unification Categorial Grammar (UCG, Calder et al., 1988, Zeevat et al., 1986) unification &amp;quot;is the only operation over grammatical objects&amp;quot; (Calder et al. 1988, p. 83), and this includes syntactic and semantic operations. Within Categorial Unification Grammar (Uszkoreit, 1986; Bouma, 1988a), reduction rules are the main operation over grammatical objects, but semantic operations are reformulated within the unification formalism, as properties of lexemes (Bouma et al., 1988). These formalisms thus lexicalize semantic operations. The addition of unification to the LTP formalism described in this paper maintains the rules of the syntactic and semantic calculus as primary operations, and adds unification to deal with syntactic features only. We will refer to this addition as Feature Unification (FU), and we will call the resulting theory LTP-FU. In this paper firstly </context>
</contexts>
<marker>Uszkoreit, 1986</marker>
<rawString>Uszkoreit, H. 1986 Categorial Unification Grammars. In Proceedings of COLING 1986, Bonn. van der Wouden, T.; and Heylen, D. 1988 Massive Disambiguation of large text corpora with flexible categorial grammar. In Proceedings of COLING 1988, Budapest.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Zeevat</author>
<author>E Klein</author>
<author>J Calder</author>
</authors>
<date>1986</date>
<institution>Unification Categorial Grammar. Paper, University of Edinburgh.</institution>
<contexts>
<context position="2522" citStr="Zeevat et al., 1986" startWordPosition="399" endWordPosition="402">pplied a copy of the interpreter described in his 1988 dissertation it follows as a theorem from a set of axioms and inference rules. Especially by the work of Van Benthem (1986) and Moortgat (1988) this view, which we will name with Moortgat (1987a) Lambek Theorem Proving (LTP; Lambek, 1958), has become popular among a number of linguists. The descriptive power of LTP can be extended if unification (Shieber, 1986) is added. Several theories have been developed that combine categorial formalisms and unification based formalisms. Within Unification Categorial Grammar (UCG, Calder et al., 1988, Zeevat et al., 1986) unification &amp;quot;is the only operation over grammatical objects&amp;quot; (Calder et al. 1988, p. 83), and this includes syntactic and semantic operations. Within Categorial Unification Grammar (Uszkoreit, 1986; Bouma, 1988a), reduction rules are the main operation over grammatical objects, but semantic operations are reformulated within the unification formalism, as properties of lexemes (Bouma et al., 1988). These formalisms thus lexicalize semantic operations. The addition of unification to the LTP formalism described in this paper maintains the rules of the syntactic and semantic calculus as primary o</context>
</contexts>
<marker>Zeevat, Klein, Calder, 1986</marker>
<rawString>Zeevat, H.; Klein, E.; and Calder, J. 1986 Unification Categorial Grammar. Paper, University of Edinburgh.</rawString>
</citation>
<citation valid="false">
<pages>196</pages>
<marker></marker>
<rawString>- 196 -</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>