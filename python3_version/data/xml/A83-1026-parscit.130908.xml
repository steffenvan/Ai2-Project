<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000001">
<note confidence="0.936632">
INVESTIGATING THE POSSIBILITY OF A MICROPROCESSOR-BASED
MACHINE TRANSLATION SYSTEM
</note>
<author confidence="0.626712">
Harold L. Somers
</author>
<affiliation confidence="0.98589">
Centre for Computational Linguistics
University of Manchester Institute of Science and Technology
</affiliation>
<address confidence="0.765233">
PO Box 88, Manchester M60 1QD, England
</address>
<email confidence="0.776312">
ABSTRACT
</email>
<bodyText confidence="0.994858476190476">
This paper describes an on-going research
project being carried out by staff and students at
the Centre for Computational Linguistics to
examine the feasibility of Machine Translation
(MT) in a microprocessor environment. The system
incorporates as far as possible features of large-
Seale MT systems that have proved desirable or
effective: it is multilingual, algorithms and
data are strictly separated, and the system is
highly modular. Problems of terminological
polysemy and syntactic complexity are reduced via
the notions of controlled vocabulary and
restricted syntax. Given these constraints, it
seems feasible to achieve translation via an
&apos;interlingua&apos;, avoiding any language-pair oriented
&apos;transfer stage. The paper concentrates on a
description of the separate modules in the
translation process as they are currently
envisaged, and details some of the problems
specific to the microprocessor-based approach to
NT that have so far come to light.
</bodyText>
<sectionHeader confidence="0.734344" genericHeader="abstract">
I. BACKCP,O=
</sectionHeader>
<bodyText confidence="0.999918">
This paper describes preliminary research in
the design of Bede, a limited-syntax controlled-
vocabulary machine Translation system to run on a
microprncessor, translatine between English.
French, German and Dutch. Our experimental corpus
is a car-radio manual. Bede (named after the 7th
Century English linguist), is essentially a
research project: we are not immediately concerned
with commercial applications, though such are
clearly possible if the research proves fruitful.
&apos;-:ork on Bede at this stage though is primarily
experimental. The aim at the moment is to
investigate the extent to which a microprocessor-
</bodyText>
<listItem confidence="0.982085">
• sed MT system of advanced design is possible,
</listItem>
<bodyText confidence="0.946577545454546">
ind the Limitations that have to be imposed in
order to achieve A wor:cing system. This paper
.]escribes the overall syqtem design snecification
c) 4eich we are currently work .rig.
In the basic design of the system we attempt to
incorporate as much as possihle Features of large-
scale IT systems that have proved to be desirable
or effective. Thus. Bede is multilingual by
,!esiq,n. algorithms and linguistic data 4re
strictly separated, and the system is designed in
-,ore o- less independent modules.
</bodyText>
<listItem confidence="0.6440055">
,flicroorocessor environment means that
• ncr&apos;1 -r size are imhortint: &apos;iata structures
</listItem>
<bodyText confidence="0.989268096774193">
both dynamic (created by and manipulated during
the translation process) and static (dictionaries
and linguistic rule packages) are constrained to
be as economical in terms of storage space and
access procedures as possible. Limitations on in-
core and perinheral storage are important
considerations in the system design.
In large general purpose MT systems, it is
necessary to assume that failure to translate the
given input correctly is generally not due to
incorrectly formed input, but to insufficiently
elaborated translation algorithms. This is
particularly due to two problems: the lexical
problem of choice of appropriate translation
equivalents, and the strategic problem of
effective analysis of the wide range of syntactic
patterns found in natural language. The reduction
of these problems via the notions of controlled
vocabulary and restricted syntax seems
particularly appropriate in the microprocessor
environment, since the alternative of making a
system infinitely extendable is probably nor
feasible.
Given these constraints, it seems feasible to
achieve translation via an Interlingua, in &apos;,ditch
the canonical structures from the source language
are mapped directly onto those of the target
language(s), avoiding any language-pair oriented
&apos;transfer&apos; stage. Translation thus takes place n
,wu unaSeS: anaiysis or source text and synthesis
of target text.
</bodyText>
<subsectionHeader confidence="0.537152">
A. Incorporation of recent design orinciples
</subsectionHeader>
<bodyText confidence="0.960767176470588">
Modern MT system design can be characterised by
three principles that have proved to be desirable
and effective (Lehmann cc al, 19)10:1-3): each of
these is adhered to in the design of Bede.
Bede is multilingual by design: early &apos;7
systems were designed with specific laneuage-iairs
in mind, and translation algorithms were
elaborated on this basis. The main conseouence of
this was that source language analysis was
effected within the perspective of the given
target language, and Was therefore often of Little
or no use on the addition into the system of a
further language (cf. King, 1981:12; 1:ine
Perschke, 1982:28).
In Bede, there is a strict separation of
algorithms and linguistic data: early =ystems
were quite simnlv &apos;translation pre&amp;quot;,.rars&apos;. Inc
</bodyText>
<page confidence="0.99859">
149
</page>
<bodyText confidence="0.9994441">
underlying linguistic theory which might have been
present was inextricably bound up with the program
itself. This clearly entailed the disadvantage
that any modification of the system had to be done
by a skilled programmer (cf. Johnson, 1980:140).
Furthermore, the side-effects of apparently quite
innocent modifications were often quite far-
reaching and difficult to trace (see for example
Bostad, 1982:130). Although this has only
recently become an issue in MT (e.g. Vauquois,
1979:1.3; 1981:10), it has of course for a long
time been standard practice in other areas of
knowledge-based programming (Newell, 1973; Davis &amp;
King, 1977).
The third principle now current in MT and to be
incorporated in Bede is that the translation
process should be modular. This approach was a
feature of the earliest &apos;second generation&apos;
systems (cf. Vauquois, 1975:33), and is
characterised by the general notion that any
complicated computational task is best tackled by
dividing it up into smaller more or less
independent sub-tasks which communicate only by
means of a strictly defined interface protocol
(Aho et al, 1974). This is typically achieved in
the MT environment by a gross division of the
translation process into analysis of source
Language and synthesis of target language,
possibly with an intermediate transfer stage (see
1.0 below), with these phases in turn sub-divided,
for example into morphological, lexical and
syntactico-semantic modules. This modularity may
be reflected both in the linguistic organisation
of the translation process and in the provision of
software devices specifically tailored to the
relevant sub-task (Vauquois, 1975:33). This is
the case in Bede, where for each sub-task a
grammar interpreter is provided which has the
property of being no more powerful than necessary
for the task in question. This contrasts with the
approach taken in TAUM-Miteo (TAUM, 1973), where a
single general-purpose device (Colmerauer&apos;s (1970)
&apos;0-Systems&apos;) is provided, with the associated
disadvantage that for some &apos;simple&apos; tasks the
superfluous power of the device means that
processes are seriously uneconomical. Bede
incorporates five such &apos;grammar types&apos; with
associated individual formalisms and processors:
these are described in detail in the second half
of this paper.
</bodyText>
<subsectionHeader confidence="0.958324">
B. The microprocessor environment
</subsectionHeader>
<bodyText confidence="0.99842726">
It is in the microprocessor basis that the
principle interest in this system lies, and, as
mentioned above, the main concern is the effects
of the restrictions that the environment imposes.
Development of the Bede prototype is presently
taking place on 7.80-based machines which provide
64k bytes of in-core memory and 720k bytes of
peripheral score on two 5-1/4&amp;quot; double-sided
double-density floppy disks. The intention is
that any commercial version of Bede would run on
more powerful processors with larger address
space, since we feel that such machines will soon
rival the nopularity of the less powerful 7.80&apos;s as
the standard desk-ton hardware. Programming so
far has been in Pascal-&amp;quot; (Sorcim, 197q), a Pascal
dialect closely resembling UCSD Pascal, but we are
conscious of the fact that both C (Kernighan &amp;
Ritchie, 1978) and BCPL (Richards &amp; (Jhitny-
Strevens, 1979) may be more suitable for some of
the software elements, and do not rule out
completing the prototype in a number of languages.
This adds the burden of designing compatible data-
structures and interfaces, and we are currently
investigating the relative merits of these
languages. Portability and efficiency seem to be
in conflict here.
Microprocessor-based KT contrasts sharply with
the mainframe-based activity, where the
significance of problems of economy of storage and
efficiency of programs has decreased in recent
years. The possibility of introducing an element
of human interaction with the system (cf. Kay,
1980; Melby, 1981) is also highlighted in this
environment. Contrast systems like SYSTRAN (Tome,
1977) and GETA (Vauquois, 1975, 1979; Boitet &amp;
Nedobejkine, 1980) which work on the principle of
large-scale processing in batch mode.
Our experience so far is that the economy and
efficiency in data-structure design and in the
elaboration of interactions between programs and
data and between different modules is of paramount
importance. While it is relatively evident that
large-scale MT can be simulated in the
microprocessor environment, the cost in real time
is tremendous: entirely .new design and
implementation strategies seem to be called for.
The ancient skills of the programmer that have
become eroded by the generosity afforded by modern
mainframe configurations become highly valued in
this microprocessor application.
</bodyText>
<subsectionHeader confidence="0.588013">
C. Controlled vocabulary and restricted syntax
</subsectionHeader>
<bodyText confidence="0.986741892857143">
The state of the art of language processing is
such that the analysis of a significant range of
syntactic patterns has been shown to be possible,
and by means of a number of different approaches.
Research in this area nowadays is concentrated on
the treatment of more problematic constructions
(e.g. Marcus, 1980). This observation has led us
to believe that a degree of success in a small
scale MT project can be achieved via the notion of
restricting the complexity of acceptable input, so
that only constructions that are sure to ne
correctly analysed are permitted. This notion of
restricted syntax MT has been tried with some
success in larger systems (cf. Elliston, IQ70;
Lawson, 1979:81f; Somers &amp; McNaught, 1990:40),
resulting both in more accurate translation, and
in increased legibility from the human point of
view. As Flliston points out, the development of
strict guidelines for writers leads not only
the use of simpler constructions, but also to the
avoidance of potentially ambiguous text. In
either case, the benefits for MT are obvious.
Less obvious however is the acceptability of such
constraints; yet &apos;restricted syntax need not
imply &apos;baby talk&apos;, and a reasonably extensive
range of constructions can be included.
Just as problems of syntactic analysis car np
alleviated by imnosing some degree of control over
</bodyText>
<page confidence="0.988307">
150
</page>
<bodyText confidence="0.999923413793103">
the syntactic complexity of the input, so the
corresponding problem of lexical disambiguation
that large-scale MT systems are faced with can be
eased by the notion of controlled vocabulary. A
major problem for MT is the choice of appropriate
translation equivalents at the lexical level, a
choice often determined by a variety of factors at
all linguistic levels (syntax, semantics,
pragmatics). In the field of multilingual
terminology, this problem has been tackled via the
concept of terminological equivalence (WUster,
1971): for a given concept in one language, a
translation in another language is established,
these being considered by definition to be in one-
to-one correspondence. In the case of Bede, where
the subject-matter of the texts to be translated
is fixed, such an approach for the &apos;technical
terms&apos; in the corpus is clearly feasible; the
notion is extended as far as possible to general
vocabulary as well. For each concept a single
term only is permitted, and although the resulting
style may appear less mature (since the use of
near synonyms for the sake of variety is not
permitted), the problems described above are
somewhat alleviated. Polysemy is not entirely
avoidable, but if reduced to a bare minimum, and
permitted only in specific and acknowledged
circumstances, the problem becomes more easily
manageable.
</bodyText>
<sectionHeader confidence="0.615563" genericHeader="keywords">
D. Interlingua
</sectionHeader>
<bodyText confidence="0.99561912745098">
A significant dichotomy in MT is between the
&apos;transfer&apos; and &apos;interlingua&apos; approaches. The
former can be characterised by the use of
bilingual transfer modules which convert the
results of the analysis of the source language
into a representation appropriate for a specific
target language. This contrasts with the
interlingua approach in which the result of
analysis is passed directly to the appropriate
synthesis module.
It is beyond the scope of the present paper to
discuss in detail the relative merits of the two
approaches (see Vauquois, 1975:142ff; Hutchins,
1978). We should however consider some of the
major obstacles inherent in the interlingua
approach.
The development of an Interlingua for various
purposes (not only translation) has been the
subject of philosophical debate for some years,
and proposals for MT have included the use of
formalized natural language (e.g. Mel&apos;Cuk, 1974;
Andreev, 1967), artificial Languages (like
Fsoeranto), or various symbolic representations,
whether linear (e.g. Wilting, 1961) or otherwise
(e.g. Wilks, 1071). Most of these approaches are
problematic however (for a thorough discussion of
the interlingua approach to 9T, see Otten &amp; Pacak
(1971) and Barnes (1983)). Nevertheless, some
interlingua-based MT systems have been developed
to a considerable degree: for example, the
(lrenoble team&apos;s first attempts at wT took this
approach (Veillon, 1q68), while the TITUS system
still in use at the Institut Textile de France
(Ducrot. 1972; Zingel, 1978) is claimed to be
interlingua-based.
It seems that it can be assumed a priori that
an entirely language-independent theoretical
representation of a given text is for all
practical purposes impossible. A more realistic
target seems to be a representation in which
significant syntactic differences between the
languages in question are neutralized so that the
best one can aim for is a languages-specific (sic)
representation. This approach implies the
definition of an Interlingua which takes advantage
of anything the languages in the system have in
common, while accomodating their idiosyncrasies.
This means that for a system which involves
several fairly closely related languages the
interlingua approach is at least feasible, on the
understanding that the introduction of a
significantly different type of language may
involve the complete redefinition of the
Interlingua (Barnes, 1983). From the point of
view of Bede, then, the common base of the
languages involved can be used to great advantage.
The notion of restricted syntax described above
can be employed to filter out constructions that
cause particular problems for the chosen
Interlingua representation.
There remains however the problem of the
representation of lexical items in the
Interlingua. Theoretical approaches to this
problem (e.g. Andreev, 1967) seem quite
unsatisfactory. But the notion of controlled
vocabulary seems to offer a solution. If a one-
to-one equivalence of &apos;technical&apos; terms can be
achieved, this leaves only a relatively small area
of vocabulary for which an interlingual
representation must be devised. It seems
reasonable, on a small scale, to treat general
vocaouiarv in an analagous way to technical
vocabulary, In particular treating lexical items
in one language that are ambiguous with respect to
any of the other languages as &apos;homographs&apos;. Their
&apos;disambiguation&apos; must take place in Analysis as
there is no biligual &apos;Transfer&apos; phase, and
Synthesis is purely deterministic. While this
approach would be quite unsuitable for a Large-
scale general purpose KT system, in the present
context - where the problem can be minimised - it
seems to be a reasonable approach.
Our own model for the Bede Interlingua has not
yet been finalised. We believe this to be an area
for research and experimentation once the system
software has been more fully developed. our
current hypothesis is that the Interlingua will
take the form of a canonical representation of he
text in which valency-boundness and (deep) ,:ase
will play a significant role. Sentential features
such as tense and aspect will be captured by
&apos;universal&apos; system of values for the languages
Involved. This conception of an Interlingua
clearly falls short of the language-independent
pivot representation typically envisaged (cf.
Boitet &amp; Nedobejkine, 1980:2), but we hope :o
demonstrate that it is sufficient for the
languages in our system, and that it could be
adapted without significant difficulties to cater
for the introduction of other (related) Western
European languages. We feel that research in tbis
area will, when the time comes, be a significant
</bodyText>
<page confidence="0.993477">
151
</page>
<bodyText confidence="0.999686117647059">
and valuable by-product of the project as a whole.
II. DESCRIPTION OF THE SYSTEM DESIGN
In this second half of the paper we present a
description of the translation process in Bede, as
it is currently envisaged. The process is divided
broadly into two parts, analysis and synthesis,
the interface, between the two being provided by
the Interlingua. The analysis module uses a
Chart-like structure (cf. Kaplan, 1973) and a
series of grammars to produce from the source text
the Interlingua tree structure which serves as
input to synthesis, where it is rearranged into a
valid surface structure for the target language.
The &apos;translation unit&apos; (TU) is taken to be the
sentence, or equivalent (e.g. section heading,
title, figure caption). Full details of the rule
formalisms are given in Somers (1981).
</bodyText>
<subsectionHeader confidence="0.680776">
A. String segmentation
</subsectionHeader>
<bodyText confidence="0.999945210526316">
The TU is first subjected to a two-stage
string-segmentation and &apos;lemmatisation&apos; analysis.
In the first stage it is compared word by word
with a &apos;stop-list&apos; of frequently occurring words
(mostly function words); words not found in the
stop-list undergo string-segmentation analysis,
again on a word by word basis. String-
segmentation rules form a finite-state grammar of
affix-stripping rules (&apos;A-rules&apos;) which handle
mostly inflectional morphology. The output is a
Chart with labelled arcs indicating lexical unit
(LU) and possible interpretation of the stripped
affixes, this &apos;hypothesis&apos; to be confirmed by
dictionary look-up. By way of example, consider
(1), a possible French rule, which takes any word
ending in -issons (e.g. finissons or herissons)
and constructs an arc on the Chart recording the
hypothesis that the word is an inflected form of
an &apos;-ir&apos; verb (i.e. finir or *herir).
</bodyText>
<equation confidence="0.9990445">
(1) V + &amp;quot;-ISSONS&amp;quot; V
[PERS.1 &amp; NUM=PLUR &amp; TENSE.PRES &amp; MOOD=INDIC]
</equation>
<bodyText confidence="0.93466">
At the end of dictionary look-up, a temporary
&apos;sentence dictionary&apos; is created, consisting of
copies of the dictionary entries for (only) those
LUs found in the current TU. This is purely an
</bodyText>
<listItem confidence="0.6978118">
efficiency measure. The sentence dictionary may
of course include entries for homographs which
will later be rejected.
B. Structural analysis
1. &apos;P-rules&apos;
</listItem>
<bodyText confidence="0.9906448">
The chart then undergoes a two-stage structural
analysis. In the first stage, context-sensitive
augmented phrase-structure rules (&apos;P-rules&apos;) work
towards creating a single arc spanning the entire
TU. Arcs are labelled with appropriate syntactic
class and syncactico-semantic feature information
and a trace of the lower arcs which have been
subsumed from which the parse tree can be simply
extracted. The trivial P-rule (2) is provided as
an examnle.
</bodyText>
<equation confidence="0.726305333333333">
(2) &lt;NUM(DET)=NUM(N) &amp; GDR(DET),INT.GDR(N)ir.:&gt;
DET + N NP
&lt;GDR(NP)t.GDR(N) &amp; NUM(NP):=NUM(N),
</equation>
<bodyText confidence="0.970428866666667">
P-rules consist of &apos;condition stipulations&apos;, a
&apos;geometry&apos;, and &apos;assignment stipulations&apos;. The
nodes of the Chart are by default identified by
the value of the associated variable CLASS, though
it is also possible to refer to a node by a local
variable name and test for or assign the value of
CLASS in the stipulations. Our rule formalisms
are quite deliberately designed to reflect the
formalisms of traditional linguistics.
This formalism allows experimentation with a
large number of different context-free parsing
algorithms. We are in fact still experimenting in
this area. For a similar investigation, though on
a machine with significantly different time and
space constraints, see Slocum (1981).
</bodyText>
<sectionHeader confidence="0.532885" genericHeader="introduction">
2. &apos;I-rules&apos;
</sectionHeader>
<bodyText confidence="0.999851076923077">
In the second stage of structural analysis, the
tree structure implied by the labels and traces on
these arcs is disjoined from the Chart and
undergoes general tree-to-tree-transductions as
described by &apos;T-rules&apos;, resulting in a single tree
structure representing the canonical form of the
TU.
&apos; The formalism for the T-rules is similar to
that for the P-rules, except in the geometry part,
where tree structures rather than arc sequences
are defined. Consider the necessarily more
complex (though still simplified) example (3),
which regularises a simple English passive.
</bodyText>
<equation confidence="0.834741">
(3) &lt; LU(AUX)=&amp;quot;BE&amp;quot; &amp; PART(V)=PASTPART &amp;
LIT(PREP)=&amp;quot;BY&amp;quot; &amp; CASEM(21)=AGENT&gt;
S(NP(1) . AUX . V . NP{2}(PREP . SI)
S(NP(21($) - V + NP(U)
&lt;DSF(NP(21):.DSUJ &amp; VOICE(V):=PASSV &amp;
DSF(NP{1}:=DOBJ &gt;
</equation>
<bodyText confidence="0.990843090909091">
Notice the necessity to:disambiguate the [&apos;.o
NPs via curly-bracketted disambiguators; the
possibility of defining a partial geometry via :he
&apos;dummy&apos; symbol (S); and how the AUX and PREP are
eliminated in the resulting tree structure.
Labellings for nodes are copied over by default
unless specifically suppressed.
With source-language LUs replaced by uniaue
multilingual-dictionary addresses, this canonical
representation is the Interlingua which is passed
for synthesis into the target language(s1.
</bodyText>
<subsectionHeader confidence="0.396266">
C. Synthesis
</subsectionHeader>
<bodyText confidence="0.996530333333333">
Assuming the analysis has been correctly
performed, synthesis is a relatively straight-
forward deterministic process. Synthesis
commences with the application of further 1-rules
which assign new order and structure to the
Interlingua as appropriate. The synthesis 7-rules
for a given language can be viewed as analogues 7..f
the 1-rules that are used for analysis of that
language, though it is unlikely that for synthesis
</bodyText>
<page confidence="0.996143">
152
</page>
<bodyText confidence="0.997114833333333">
the analysis rules could be simply reversed.
Once the desired structure has been arrived at,
the trees undergo a series of context—sensitive
rules used to assign mainly syntactic features to
the leaves (&apos;L—rules&apos;), for example for the
purpose of assigning number and gender concord
(etc.). The formalism for the L—rules is again
similar to that for the P—rules and T—rules, the
geometry part this time definthg a single tree
structure with no structural modification
implied. A simple example for German is provided
here (4).
</bodyText>
<figure confidence="0.70170025">
(4) &lt;SF(NP)=SUBJ&gt;
Np(DET + N)
&lt;CASE(DET):=NOM &amp; CASE(N)::NOM &amp;
NUM(DET):=NUM(NP) &amp; CDR(DET)::GOR(N)&gt;
</figure>
<bodyText confidence="0.999721888888889">
The list of labelled leaves resulting from the
application of L—rules is passed to morphological
synthesis (the superior branches are no longer
needed), where a finite—state grammar of
morphographemic and affixation rules (&apos;M—rules&apos;)
is applied to produce the target string. The
formalism for M—rules is much less complex than
the A—rule formalism, the grammar being again
straightforwardly deterministic. The only taxing
requirement of the M—rule formalism (which, at the
time of writing, has not been finalised) is that
it must permit a wide variety of string
manipulations to be described, and that it must
define a transaparent interface with the
dictionary. A typical rule for French for example
might consist of stipulations concerning
information found both on the leaf in question and
in the dictionary, as in (5).
</bodyText>
<listItem confidence="0.913646666666667">
(5) leaf info.: CLASS=V; TENSE:PRES; NUM:SING:
PERS=3; MOOD=INDIC
dict. info.: CONJ(V)=IRREG
</listItem>
<bodyText confidence="0.978494761904762">
assign: Affix &amp;quot;—T&amp;quot; to STEM1(V)
D. General comments on system design
The general modularity of the system will have
been quite evident. A key factor, as mentioned
above, is that each of these grammars is just
powerful enough for the task required of it: thus
no computing power is &apos;wasted&apos; at any of the
intermediate stages.
At each interface between grammars only a small
part of the data structures used by the donating
module is required by the receiving module. The
&apos;unwanted&apos; data structures are written Co
peripheral store to enable recovery of partial
structures in the case of failure or
mistranslation, though automatic backtracking to
previous modules by the system as such is not
envisaged as a major component.
The &apos;static&apos; data used by the system consist of
the different sets of linguistic rule packages,
plus the dictionary. The system essentially has
one large multilingual dictionary from which
numerous software packages generate various
subdictionaries as required either in the
translation process itself, or for lexicographers
working on the system. Alphabetical or other
structured language—specific listings can be
produced, while of course dictionary updating and
editing packages are also provided.
The system as a whole can be viewed as a
collection of Production Systems (PSs) (Newell,
1973; Davis &amp; King, 1977; see also Ashman (1982)
on the use of PSs in MT) in the way that the rule
packages (which, incidentally, as an efficiency
, undergo separate syntax verification and
&apos;compilation&apos; into interpretable &apos;code&apos;) operate
on the data structure. The system differs from
the classical PS setup in distributing its static
data over two databases: the rule packages and the
dictionary. The combination of the rule packages
and the dictionary, the software interfacing
these, and the rule interpreter can however be
considered as analgous to the rule interpreter of
</bodyText>
<listItem confidence="0.931476">
• a classical PS.
</listItem>
<sectionHeader confidence="0.950717" genericHeader="method">
III. CONCLUSION
</sectionHeader>
<bodyText confidence="0.999865181818182">
As an experimental research project, Bede
provides us with an extremely varied range of
computational linguistics problems, ranging from
the principally linguistic task of rule—writing,
to the essentially computational work of software
implementation, with lexicography and terminology
playing their part along the way.
But we hope too that Bede is more than an
academic exercise, and that we are making a
significant contribution to applied computational
linguistics research.
</bodyText>
<sectionHeader confidence="0.993908" genericHeader="method">
IV. ACKNOWLEDGMENTS
</sectionHeader>
<bodyText confidence="0.999481">
I present this paper only as spokesman for a
large group of people who have worked, are
working, or will work on Bede. Therefore I would
like to thank colleagues and students at C.C.L.,
past, present, and future for their work on the
project, and in particular Rod Johnson, Jock
McNaught, Pete Whitelock, Kieran Kilby, Toni
Barnes, Paul Bennett And Beverley Ashman for help
with this write—up. I of course accept
responsibility for any errors that slipped through
that tight net.
</bodyText>
<sectionHeader confidence="0.332321" genericHeader="method">
V. REFERENCES
</sectionHeader>
<reference confidence="0.796111071428571">
Aho, Alfred V., John E. Hoperoft &amp; Jeffrey D.
Ullman. The design and analysis of computer
algorithms. Reading, Mass.: Addison—eslev,
1974.
Andreev, N.D. The intermediary language as the
focal point of machine translation. In A.D.
Booth (ed), Machine Translation, Amsterdam:
North—Holland, 1967, 1-27.
Ashman, Beverley D. Production Systems and their
application to Machine Translation: Transfer
Report (CCL/UMIST Report No. 12/91. Manchester:
Centre for Computational Linguistics, University
of Manchester Institute of Science and
Technology, 1982.
</reference>
<page confidence="0.99583">
133
</page>
<reference confidence="0.989552551724138">
Barnes, Antonia M.N. An investigation into the
syntactic structures of abstracts, and the
definition of an &apos;interlingua&apos; for their
translation by machine. MSc thesis. Centre for
Computational Linguistics, University of
Manchester Institute of Science and Technology,
1983.
Boitet, C. &amp; N. Nedobejkine. Russian-French at
GETA: Outline of the method and detailed example
(Rapport de Recherche No. 219). Grenoble: GETA,
1980.
Wilting, Rudolph. A double intermediate language
for Machine Translation. In Allen Kent (ed),
Information Retrieval and Machine Translation,
Part 2 (Advances in Documentation and Library
Science, Volume III), New York: Interscience,
1961, 1139-1144.
Bostad, Dale A. Quality control procedures in
modification of the Air Force Russian-English MT
system. In Veronica Lawson (ed), Practical
Experience of Machine Translation, Amsterdam:
North-Holland, 1982, 129-133.
Colmerauer, Alain. Les systemes-Q: ou un
formalisme pour analyser at synthetiser des
phrases sur ordinateur. (Publication interne no.
43). Montréal: Projet de Traduction Automatigue
de l&apos;Universite de Montreal, 1970.
Davis, Randall &amp; Jonathan King. An overview of
Production Systems. In E.W. Elcock &amp; D. Michie
</reference>
<bodyText confidence="0.810134">
(eds), Machine Intelligence Volume 8: Machine
representation of knowledge, New York: Halsted,
1977, 300-332.
Ducrot, J.M. Research for an automatic
translation system for the diffusion of
scientific and technical textile documentation
in English speaking countries: Final, report.
Boulogne-Billancourt: Institut Textile de
France, 1972.
Elliston, John S.C. Computer aided translation: a
business viewpoint. In Barbara M. Snell (ed) -
Translating and the computer, Amsterdam: North-
Holland, 1979, 149-158.
Johnson, Rod. Contemporary perspectives in
machine translation. In Suzanne Hanon &amp; Vigge
HjcSrneger Pedersen (ads), Human translation
machine translation (Noter og Kommentarer 39).
Odense: Romansk Institut, Odense Universitet,
1980, 131-147.
Hutchins, W.J. Machine translation and machine
aided translation. Journal of Documentation,
1978, 34:119-159.
</bodyText>
<reference confidence="0.99884693442623">
Kaplan, Ronald M. A general syntactic processor.
In Randall Rustin (ed), Natural Language
Processing (Courant Computer Symposium 1), New
York: Algorithmics Press, 1973, 193-241.
Kay, Martin. The proper place of men and machines
in language translation (Report No. CSL-8(-11).
Palo Alto, CA: Xerox, 1980.
Kernighan, Brian W. &amp; Dennis M. Ritchi,. The C
programming language. Englewood Cliffs,
Prentice-Hall, 1978.
King, M. EUROTRA - a European system for machine
translation. Lebende Sprachen 1981, 26:12-14.
King, M. &amp; S. Perschke. EUROTRA and its object-
ives. Multilingua, 1982, 1:27-32.
Lawson, Veronica. Tigers and polar bears, or:
translating and the computer. The Incorpprated
Linguist, 1979, 18:81-85.
Lehmann, Winfred P., Winfield S. Bennett. Jonathan
Slocum, Howard Smith, Solveig M.V. Pfluger
Sandra A. Eveland. The METAL system (RADC-TR-
80-374). Austin, TX: Linguistics Research
Center, University of Texas, 1980.
Marcus, Mitchell P. A theory of syntactic
recognition for natural language, Cambridge, MA:
MIT Press, 1980.
Melby, Alan K. Translators and machines - can
they cooperate? META, 1981, 26:23-34.
Mel&apos;Euk, I.A. Grammatical meanings in
interlinguas for automatic translation and the
concept of grammatical meaning. In V. Ju.
Rozencvejg (ed), Machine Translation and Applied
Linguistics, Volume I, Frankfurt am Main:
Athenaion Verlag, 1974, 95-113.
Newell, A. Production systems: Models of control
structures. In William G. Chase (ed) - Visual
information processing, New York: Academic
Press, 1973, 463-526.
Otten, Michael &amp; Milos G. Pacak. Intermediate
languages for automatic language processing. In
Julius T. Tou (ed), Software Engineering: cnT7,
III, Volume 2, New York: Academic Press, 10-1,
105-118.
Richards, Martin &amp; Colin Whitby-Strevens. 3CPL -
the language and its compiler. Cambridge:
Cambridge University Press, 1979.
Slocum, Jonathan. A practical comparison
parsing strategies for Machine Transla:,on and
other Natural Language Processing Purposes. Phi-
dissertation. University of Texas at Austn,
1981. Technical Report NL-.=.1, Department of
Computer Sciences, The University of Texas,
Austin, TX.]
Somers, H.L. Bede - the cci.diasT Machine
Translation system: Rule-writing formalism ..)rd
revision) (CCL/UMIST Report No. 815.
Manchester: Centre for Computational
Linguistics, University of Manchester Institute
of Science and Technology, 1981.
Somers, H.L. &amp; J. McNaught. The translator as a
computer user. The Incorporated Linguist, 10K&apos;,
19:49-53.
</reference>
<page confidence="0.997475">
154
</page>
<reference confidence="0.999463852941176">
Sorcim. Pascal/m users_reference manual. alnut
Creek, CA: Digital larketing, 1979.
TAU. Le systime de traduction automatique de
l&apos;Universite de Montréal (TAMI). META, 1973,
18:227-289.
Tome, P.P. SYSTRAM as a multilingual machine
Translation system. In Commission of the
European Communities, Third European Congress on
Information Systems and Networks: Overcoming the
language harrier, Volume 1. MUnchen: Verlag
nokumentation, 1977, 569-581.
Vauquois, Bernard. La traduction automatique A
Grenoble (Documents de Linguiscique Quantitative
24), Paris: Dunod, 1975.
Vauquois, B. Aspects of mechanical translation in
1979 (Conference for Japan IBM Scientific
Program). Grenoble: Groupe d&apos;Ecudes pour la
Traduction Automatique, 1979.
Vauquois, Bernard. L&apos;informatique au service de
la craduction. META, 1981. 26:8-17.
Veillon, G. Description du langage pivot du
systeme de traduction automatique du C.E.T.A.
P.A. Informations, 1968. 1:8-17.
Wilks, Yorick. An Artificial Intelligence
approach to Machine Translation. in Ro!,,er C.
Schank &amp; Kenneth lark Colby (eds), Computer
models of thought and language, San Francisco:
Freeman. 1971, 114-151.
uuster. Eugen. Regriffs- und Themaklassifik-
ationen: Unterschiede in ihrem Wesen und in
ihrer Anwendung. Nachrichten fUr Dokument-
ation, 1971. 22:98-104.
Zingel, Hermann-Josef. Experiences with TITUS II.
International Classification, 1971, 5:33-37.
</reference>
<page confidence="0.999014">
155
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.742972">
<title confidence="0.9980945">THE POSSIBILITY OF A TRANSLATION</title>
<author confidence="0.999815">Harold L Somers</author>
<affiliation confidence="0.9998015">Centre for Computational Linguistics University of Manchester Institute of Science and Technology</affiliation>
<address confidence="0.97533">PO Box 88, Manchester M60 1QD, England</address>
<abstract confidence="0.998671803225806">This paper describes an on-going research project being carried out by staff and students at the Centre for Computational Linguistics to examine the feasibility of Machine Translation (MT) in a microprocessor environment. The system incorporates as far as possible features of largesystems that have proved desirable or effective: it is multilingual, algorithms and data are strictly separated, and the system is highly modular. Problems of terminological polysemy and syntactic complexity are reduced via the notions of controlled vocabulary and restricted syntax. Given these constraints, it seems feasible to achieve translation via an &apos;interlingua&apos;, avoiding any language-pair oriented &apos;transfer stage. The paper concentrates on a description of the separate modules in the translation process as they are currently envisaged, and details some of the problems specific to the microprocessor-based approach to have so come to light. I. BACKCP,O= This paper describes preliminary research in design of a controlledvocabulary machine Translation system to run on a microprncessor, translatine between English. German and Dutch. Our experimental a car-radio manual. Bede (named the 7th English linguist), is essentially we not immediately concerned commercial applications, though are possible if the research fruitful. on Bede at this stage though is experimental. The aim at the moment is to the extent to a microprocessorsed MT system of advanced design is ind the Limitations that have to be imposed in to achieve system. This paper .]escribes the overall syqtem design snecification 4eich currently work .rig. the basic design the system we attempt to incorporate as much as possihle Features of largesystems that have proved to be desirable effective. Thus. Bede is by linguistic data 4re separated, and system is designed in oless independent modules. means that are imhortint: &apos;iata structures dynamic by and manipulated during the translation process) and static (dictionaries and linguistic rule packages) are constrained to as economical in terms of storage space procedures as possible. Limitations on incore and perinheral storage are important considerations in the system design. large purpose systems, it is to assume failure to translate given input correctly is generally not due to formed input, but to translation This is due to two problems: lexical problem of choice of appropriate translation equivalents, and the strategic problem of effective analysis of the wide range of syntactic patterns found in natural language. The reduction of these problems via the notions of controlled and restricted syntax seems particularly appropriate in the microprocessor since alternative of making a infinitely extendable probably nor feasible. these constraints, it seems to translation via an &apos;,ditch structures source are mapped directly onto those of the target language(s), avoiding any language-pair oriented stage. Translation thus takes place unaSeS: or source text text. design orinciples Modern MT system design can be characterised by three principles that have proved to be desirable and effective (Lehmann cc al, 19)10:1-3): each of is adhered to in the design Bede. is by design: systems were designed with specific laneuage-iairs in mind, and translation algorithms were elaborated on this basis. The main conseouence of was that source language analysis within the perspective of given language, and often or no use on the addition into the system of a language 1:ine Perschke, 1982:28). Bede, there is a strict of and linguistic data: quite simnlv &apos;translation Inc 149 underlying linguistic theory which might have been present was inextricably bound up with the program itself. This clearly entailed the disadvantage that any modification of the system had to be done by a skilled programmer (cf. Johnson, 1980:140). Furthermore, the side-effects of apparently quite innocent modifications were often quite farreaching and difficult to trace (see for example Bostad, 1982:130). Although this has only recently become an issue in MT (e.g. Vauquois, 1979:1.3; 1981:10), it has of course for a long time been standard practice in other areas of knowledge-based programming (Newell, 1973; Davis &amp; King, 1977). The third principle now current in MT and to be incorporated in Bede is that the translation should be approach was a feature of the earliest &apos;second generation&apos; systems (cf. Vauquois, 1975:33), and is characterised by the general notion that any complicated computational task is best tackled by dividing it up into smaller more or less independent sub-tasks which communicate only by means of a strictly defined interface protocol (Aho et al, 1974). This is typically achieved in the MT environment by a gross division of the translation process into analysis of source Language and synthesis of target language, possibly with an intermediate transfer stage (see 1.0 below), with these phases in turn sub-divided, for example into morphological, lexical and syntactico-semantic modules. This modularity may be reflected both in the linguistic organisation of the translation process and in the provision of software devices specifically tailored to the relevant sub-task (Vauquois, 1975:33). This is the case in Bede, where for each sub-task a grammar interpreter is provided which has the property of being no more powerful than necessary for the task in question. This contrasts with the approach taken in TAUM-Miteo (TAUM, 1973), where a single general-purpose device (Colmerauer&apos;s (1970) &apos;0-Systems&apos;) is provided, with the associated disadvantage that for some &apos;simple&apos; tasks the superfluous power of the device means that processes are seriously uneconomical. Bede incorporates five such &apos;grammar types&apos; with associated individual formalisms and processors: these are described in detail in the second half of this paper. microprocessor environment It is in the microprocessor basis that the principle interest in this system lies, and, as mentioned above, the main concern is the effects of the restrictions that the environment imposes. Development of the Bede prototype is presently taking place on 7.80-based machines which provide 64k bytes of in-core memory and 720k bytes of peripheral score on two 5-1/4&amp;quot; double-sided double-density floppy disks. The intention is that any commercial version of Bede would run on more powerful processors with larger address space, since we feel that such machines will soon rival the nopularity of the less powerful 7.80&apos;s as the standard desk-ton hardware. Programming so far has been in Pascal-&amp;quot; (Sorcim, 197q), a Pascal dialect closely resembling UCSD Pascal, but we are conscious of the fact that both C (Kernighan &amp; Ritchie, 1978) and BCPL (Richards &amp; (Jhitny- Strevens, 1979) may be more suitable for some of the software elements, and do not rule out completing the prototype in a number of languages. This adds the burden of designing compatible datastructures and interfaces, and we are currently investigating the relative merits of these Portability and seem to be in conflict here. Microprocessor-based KT contrasts sharply with the mainframe-based activity, where the significance of problems of economy of storage and efficiency of programs has decreased in recent years. The possibility of introducing an element of human interaction with the system (cf. Kay, 1980; Melby, 1981) is also highlighted in this environment. Contrast systems like SYSTRAN (Tome, 1977) and GETA (Vauquois, 1975, 1979; Boitet &amp; Nedobejkine, 1980) which work on the principle of large-scale processing in batch mode. Our experience so far is that the economy and efficiency in data-structure design and in the elaboration of interactions between programs and data and between different modules is of paramount importance. While it is relatively evident that large-scale MT can be simulated in the microprocessor environment, the cost in real time tremendous: entirely design and implementation strategies seem to be called for. The ancient skills of the programmer that have become eroded by the generosity afforded by modern mainframe configurations become highly valued in this microprocessor application. vocabulary and restricted syntax The state of the art of language processing is such that the analysis of a significant range of syntactic patterns has been shown to be possible, and by means of a number of different approaches. Research in this area nowadays is concentrated on the treatment of more problematic constructions (e.g. Marcus, 1980). This observation has led us to believe that a degree of success in a small scale MT project can be achieved via the notion of restricting the complexity of acceptable input, so that only constructions that are sure to ne correctly analysed are permitted. This notion of syntax has been tried with some in larger systems (cf. Elliston, 1979:81f; Somers &amp; McNaught, resulting both in more accurate translation, and in increased legibility from the human point of view. As Flliston points out, the development of strict guidelines for writers leads not only the use of simpler constructions, but also to the avoidance of potentially ambiguous text. In either case, the benefits for MT are obvious. Less obvious however is the acceptability of such constraints; yet &apos;restricted syntax need not imply &apos;baby talk&apos;, and a reasonably extensive range of constructions can be included. Just as problems of syntactic analysis car np alleviated by imnosing some degree of control over 150 the syntactic complexity of the input, so the corresponding problem of lexical disambiguation that large-scale MT systems are faced with can be eased by the notion of controlled vocabulary. A major problem for MT is the choice of appropriate translation equivalents at the lexical level, a choice often determined by a variety of factors at all linguistic levels (syntax, semantics, pragmatics). In the field of multilingual terminology, this problem has been tackled via the of equivalence (WUster, 1971): for a given concept in one language, a translation in another language is established, being considered by to in oneto-one correspondence. In the case of Bede, where the subject-matter of the texts to be translated is fixed, such an approach for the &apos;technical terms&apos; in the corpus is clearly feasible; the notion is extended as far as possible to general vocabulary as well. For each concept a single term only is permitted, and although the resulting style may appear less mature (since the use of near synonyms for the sake of variety is not permitted), the problems described above are somewhat alleviated. Polysemy is not entirely avoidable, but if reduced to a bare minimum, and permitted only in specific and acknowledged circumstances, the problem becomes more easily manageable. A significant dichotomy in MT is between the &apos;transfer&apos; and &apos;interlingua&apos; approaches. The former can be characterised by the use of bilingual transfer modules which convert the results of the analysis of the source language into a representation appropriate for a specific target language. This contrasts with the interlingua approach in which the result of analysis is passed directly to the appropriate synthesis module. It is beyond the scope of the present paper to discuss in detail the relative merits of the two (see 1975:142ff; 1978). We should however consider some of the major obstacles inherent in the interlingua approach. The development of an Interlingua for various only has been the subject of philosophical debate for some years, proposals for have the use of natural language (e.g. Mel&apos;Cuk, 1967), Languages (like or various linear (e.g. Wilting, otherwise Wilks, Most of these approaches are however (for a thorough discussion approach to 9T, see Otten &amp; Barnes (1983)). some interlingua-based MT systems have been developed to a considerable degree: for example, the (lrenoble team&apos;s first attempts at wT took this 1q68), the TITUS use at the Institut Textile de 1972; 1978) claimed to be interlingua-based. seems that it can be assumed priori entirely language-independent of a given text is purposes impossible. A more realistic seems to be a representation syntactic differences the in question are neutralized so that best one can aim for is a languages-specific (sic) representation. This approach implies the definition of an Interlingua which takes advantage of anything the languages in the system have in common, while accomodating their idiosyncrasies. for a system which fairly closely related languages approach is at least feasible, the</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Alfred V Aho</author>
<author>John E Hoperoft</author>
<author>Jeffrey D Ullman</author>
</authors>
<title>The design and analysis of computer algorithms.</title>
<date>1974</date>
<publisher>Addison—eslev,</publisher>
<location>Reading, Mass.:</location>
<contexts>
<context position="5764" citStr="Aho et al, 1974" startWordPosition="867" endWordPosition="870">:10), it has of course for a long time been standard practice in other areas of knowledge-based programming (Newell, 1973; Davis &amp; King, 1977). The third principle now current in MT and to be incorporated in Bede is that the translation process should be modular. This approach was a feature of the earliest &apos;second generation&apos; systems (cf. Vauquois, 1975:33), and is characterised by the general notion that any complicated computational task is best tackled by dividing it up into smaller more or less independent sub-tasks which communicate only by means of a strictly defined interface protocol (Aho et al, 1974). This is typically achieved in the MT environment by a gross division of the translation process into analysis of source Language and synthesis of target language, possibly with an intermediate transfer stage (see 1.0 below), with these phases in turn sub-divided, for example into morphological, lexical and syntactico-semantic modules. This modularity may be reflected both in the linguistic organisation of the translation process and in the provision of software devices specifically tailored to the relevant sub-task (Vauquois, 1975:33). This is the case in Bede, where for each sub-task a gram</context>
</contexts>
<marker>Aho, Hoperoft, Ullman, 1974</marker>
<rawString>Aho, Alfred V., John E. Hoperoft &amp; Jeffrey D. Ullman. The design and analysis of computer algorithms. Reading, Mass.: Addison—eslev, 1974.</rawString>
</citation>
<citation valid="true">
<authors>
<author>N D Andreev</author>
</authors>
<title>The intermediary language as the focal point of machine translation.</title>
<date>1967</date>
<booktitle>In A.D. Booth (ed), Machine Translation,</booktitle>
<pages>1--27</pages>
<publisher>North—Holland,</publisher>
<location>Amsterdam:</location>
<contexts>
<context position="12949" citStr="Andreev, 1967" startWordPosition="1983" endWordPosition="1984">sts with the interlingua approach in which the result of analysis is passed directly to the appropriate synthesis module. It is beyond the scope of the present paper to discuss in detail the relative merits of the two approaches (see Vauquois, 1975:142ff; Hutchins, 1978). We should however consider some of the major obstacles inherent in the interlingua approach. The development of an Interlingua for various purposes (not only translation) has been the subject of philosophical debate for some years, and proposals for MT have included the use of formalized natural language (e.g. Mel&apos;Cuk, 1974; Andreev, 1967), artificial Languages (like Fsoeranto), or various symbolic representations, whether linear (e.g. Wilting, 1961) or otherwise (e.g. Wilks, 1071). Most of these approaches are problematic however (for a thorough discussion of the interlingua approach to 9T, see Otten &amp; Pacak (1971) and Barnes (1983)). Nevertheless, some interlingua-based MT systems have been developed to a considerable degree: for example, the (lrenoble team&apos;s first attempts at wT took this approach (Veillon, 1q68), while the TITUS system still in use at the Institut Textile de France (Ducrot. 1972; Zingel, 1978) is claimed to</context>
<context position="14859" citStr="Andreev, 1967" startWordPosition="2267" endWordPosition="2268">is at least feasible, on the understanding that the introduction of a significantly different type of language may involve the complete redefinition of the Interlingua (Barnes, 1983). From the point of view of Bede, then, the common base of the languages involved can be used to great advantage. The notion of restricted syntax described above can be employed to filter out constructions that cause particular problems for the chosen Interlingua representation. There remains however the problem of the representation of lexical items in the Interlingua. Theoretical approaches to this problem (e.g. Andreev, 1967) seem quite unsatisfactory. But the notion of controlled vocabulary seems to offer a solution. If a oneto-one equivalence of &apos;technical&apos; terms can be achieved, this leaves only a relatively small area of vocabulary for which an interlingual representation must be devised. It seems reasonable, on a small scale, to treat general vocaouiarv in an analagous way to technical vocabulary, In particular treating lexical items in one language that are ambiguous with respect to any of the other languages as &apos;homographs&apos;. Their &apos;disambiguation&apos; must take place in Analysis as there is no biligual &apos;Transfe</context>
</contexts>
<marker>Andreev, 1967</marker>
<rawString>Andreev, N.D. The intermediary language as the focal point of machine translation. In A.D. Booth (ed), Machine Translation, Amsterdam: North—Holland, 1967, 1-27.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Beverley D Ashman</author>
</authors>
<title>Production Systems and their application to Machine Translation:</title>
<date>1982</date>
<tech>Transfer Report (CCL/UMIST Report No. 12/91.</tech>
<institution>Manchester: Centre for Computational Linguistics, University of Manchester Institute of Science and Technology,</institution>
<contexts>
<context position="24647" citStr="Ashman (1982)" startWordPosition="3780" endWordPosition="3781"> the system consist of the different sets of linguistic rule packages, plus the dictionary. The system essentially has one large multilingual dictionary from which numerous software packages generate various subdictionaries as required either in the translation process itself, or for lexicographers working on the system. Alphabetical or other structured language—specific listings can be produced, while of course dictionary updating and editing packages are also provided. The system as a whole can be viewed as a collection of Production Systems (PSs) (Newell, 1973; Davis &amp; King, 1977; see also Ashman (1982) on the use of PSs in MT) in the way that the rule packages (which, incidentally, as an efficiency , undergo separate syntax verification and &apos;compilation&apos; into interpretable &apos;code&apos;) operate on the data structure. The system differs from the classical PS setup in distributing its static data over two databases: the rule packages and the dictionary. The combination of the rule packages and the dictionary, the software interfacing these, and the rule interpreter can however be considered as analgous to the rule interpreter of • a classical PS. III. CONCLUSION As an experimental research project,</context>
</contexts>
<marker>Ashman, 1982</marker>
<rawString>Ashman, Beverley D. Production Systems and their application to Machine Translation: Transfer Report (CCL/UMIST Report No. 12/91. Manchester: Centre for Computational Linguistics, University of Manchester Institute of Science and Technology, 1982.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Antonia M N Barnes</author>
</authors>
<title>An investigation into the syntactic structures of abstracts, and the definition of an &apos;interlingua&apos; for their translation by machine. MSc thesis.</title>
<date>1983</date>
<institution>Centre for Computational Linguistics, University of Manchester Institute of Science and Technology,</institution>
<contexts>
<context position="13249" citStr="Barnes (1983)" startWordPosition="2026" endWordPosition="2027">ome of the major obstacles inherent in the interlingua approach. The development of an Interlingua for various purposes (not only translation) has been the subject of philosophical debate for some years, and proposals for MT have included the use of formalized natural language (e.g. Mel&apos;Cuk, 1974; Andreev, 1967), artificial Languages (like Fsoeranto), or various symbolic representations, whether linear (e.g. Wilting, 1961) or otherwise (e.g. Wilks, 1071). Most of these approaches are problematic however (for a thorough discussion of the interlingua approach to 9T, see Otten &amp; Pacak (1971) and Barnes (1983)). Nevertheless, some interlingua-based MT systems have been developed to a considerable degree: for example, the (lrenoble team&apos;s first attempts at wT took this approach (Veillon, 1q68), while the TITUS system still in use at the Institut Textile de France (Ducrot. 1972; Zingel, 1978) is claimed to be interlingua-based. It seems that it can be assumed a priori that an entirely language-independent theoretical representation of a given text is for all practical purposes impossible. A more realistic target seems to be a representation in which significant syntactic differences between the langu</context>
</contexts>
<marker>Barnes, 1983</marker>
<rawString>Barnes, Antonia M.N. An investigation into the syntactic structures of abstracts, and the definition of an &apos;interlingua&apos; for their translation by machine. MSc thesis. Centre for Computational Linguistics, University of Manchester Institute of Science and Technology, 1983.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C Boitet</author>
<author>N Nedobejkine</author>
</authors>
<title>Russian-French at GETA: Outline of the method and detailed example (Rapport de Recherche No.</title>
<date>1980</date>
<volume>219</volume>
<location>Grenoble: GETA,</location>
<contexts>
<context position="8627" citStr="Boitet &amp; Nedobejkine, 1980" startWordPosition="1303" endWordPosition="1306"> designing compatible datastructures and interfaces, and we are currently investigating the relative merits of these languages. Portability and efficiency seem to be in conflict here. Microprocessor-based KT contrasts sharply with the mainframe-based activity, where the significance of problems of economy of storage and efficiency of programs has decreased in recent years. The possibility of introducing an element of human interaction with the system (cf. Kay, 1980; Melby, 1981) is also highlighted in this environment. Contrast systems like SYSTRAN (Tome, 1977) and GETA (Vauquois, 1975, 1979; Boitet &amp; Nedobejkine, 1980) which work on the principle of large-scale processing in batch mode. Our experience so far is that the economy and efficiency in data-structure design and in the elaboration of interactions between programs and data and between different modules is of paramount importance. While it is relatively evident that large-scale MT can be simulated in the microprocessor environment, the cost in real time is tremendous: entirely .new design and implementation strategies seem to be called for. The ancient skills of the programmer that have become eroded by the generosity afforded by modern mainframe con</context>
<context position="16341" citStr="Boitet &amp; Nedobejkine, 1980" startWordPosition="2499" endWordPosition="2502"> the Bede Interlingua has not yet been finalised. We believe this to be an area for research and experimentation once the system software has been more fully developed. our current hypothesis is that the Interlingua will take the form of a canonical representation of he text in which valency-boundness and (deep) ,:ase will play a significant role. Sentential features such as tense and aspect will be captured by &apos;universal&apos; system of values for the languages Involved. This conception of an Interlingua clearly falls short of the language-independent pivot representation typically envisaged (cf. Boitet &amp; Nedobejkine, 1980:2), but we hope :o demonstrate that it is sufficient for the languages in our system, and that it could be adapted without significant difficulties to cater for the introduction of other (related) Western European languages. We feel that research in tbis area will, when the time comes, be a significant 151 and valuable by-product of the project as a whole. II. DESCRIPTION OF THE SYSTEM DESIGN In this second half of the paper we present a description of the translation process in Bede, as it is currently envisaged. The process is divided broadly into two parts, analysis and synthesis, the inte</context>
</contexts>
<marker>Boitet, Nedobejkine, 1980</marker>
<rawString>Boitet, C. &amp; N. Nedobejkine. Russian-French at GETA: Outline of the method and detailed example (Rapport de Recherche No. 219). Grenoble: GETA, 1980.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Rudolph Wilting</author>
</authors>
<title>A double intermediate language for Machine Translation.</title>
<date>1961</date>
<booktitle>In Allen Kent (ed), Information Retrieval and Machine Translation, Part 2 (Advances in Documentation and Library Science, Volume III),</booktitle>
<pages>1139--1144</pages>
<location>New York: Interscience,</location>
<contexts>
<context position="13062" citStr="Wilting, 1961" startWordPosition="1996" endWordPosition="1997"> module. It is beyond the scope of the present paper to discuss in detail the relative merits of the two approaches (see Vauquois, 1975:142ff; Hutchins, 1978). We should however consider some of the major obstacles inherent in the interlingua approach. The development of an Interlingua for various purposes (not only translation) has been the subject of philosophical debate for some years, and proposals for MT have included the use of formalized natural language (e.g. Mel&apos;Cuk, 1974; Andreev, 1967), artificial Languages (like Fsoeranto), or various symbolic representations, whether linear (e.g. Wilting, 1961) or otherwise (e.g. Wilks, 1071). Most of these approaches are problematic however (for a thorough discussion of the interlingua approach to 9T, see Otten &amp; Pacak (1971) and Barnes (1983)). Nevertheless, some interlingua-based MT systems have been developed to a considerable degree: for example, the (lrenoble team&apos;s first attempts at wT took this approach (Veillon, 1q68), while the TITUS system still in use at the Institut Textile de France (Ducrot. 1972; Zingel, 1978) is claimed to be interlingua-based. It seems that it can be assumed a priori that an entirely language-independent theoretical</context>
</contexts>
<marker>Wilting, 1961</marker>
<rawString>Wilting, Rudolph. A double intermediate language for Machine Translation. In Allen Kent (ed), Information Retrieval and Machine Translation, Part 2 (Advances in Documentation and Library Science, Volume III), New York: Interscience, 1961, 1139-1144.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Dale A Bostad</author>
</authors>
<title>Quality control procedures in modification of the Air Force Russian-English MT system.</title>
<date>1982</date>
<booktitle>In Veronica Lawson (ed), Practical Experience of Machine Translation,</booktitle>
<pages>129--133</pages>
<publisher>North-Holland,</publisher>
<location>Amsterdam:</location>
<contexts>
<context position="5057" citStr="Bostad, 1982" startWordPosition="756" endWordPosition="757">m of a further language (cf. King, 1981:12; 1:ine Perschke, 1982:28). In Bede, there is a strict separation of algorithms and linguistic data: early =ystems were quite simnlv &apos;translation pre&amp;quot;,.rars&apos;. Inc 149 underlying linguistic theory which might have been present was inextricably bound up with the program itself. This clearly entailed the disadvantage that any modification of the system had to be done by a skilled programmer (cf. Johnson, 1980:140). Furthermore, the side-effects of apparently quite innocent modifications were often quite farreaching and difficult to trace (see for example Bostad, 1982:130). Although this has only recently become an issue in MT (e.g. Vauquois, 1979:1.3; 1981:10), it has of course for a long time been standard practice in other areas of knowledge-based programming (Newell, 1973; Davis &amp; King, 1977). The third principle now current in MT and to be incorporated in Bede is that the translation process should be modular. This approach was a feature of the earliest &apos;second generation&apos; systems (cf. Vauquois, 1975:33), and is characterised by the general notion that any complicated computational task is best tackled by dividing it up into smaller more or less indep</context>
</contexts>
<marker>Bostad, 1982</marker>
<rawString>Bostad, Dale A. Quality control procedures in modification of the Air Force Russian-English MT system. In Veronica Lawson (ed), Practical Experience of Machine Translation, Amsterdam: North-Holland, 1982, 129-133.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Alain Colmerauer</author>
</authors>
<title>Les systemes-Q: ou un formalisme pour analyser at synthetiser des phrases sur ordinateur. (Publication interne no. 43). Montréal: Projet de Traduction Automatigue de l&apos;Universite de</title>
<date>1970</date>
<location>Montreal,</location>
<marker>Colmerauer, 1970</marker>
<rawString>Colmerauer, Alain. Les systemes-Q: ou un formalisme pour analyser at synthetiser des phrases sur ordinateur. (Publication interne no. 43). Montréal: Projet de Traduction Automatigue de l&apos;Universite de Montreal, 1970.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Randall Davis</author>
<author>Jonathan King</author>
</authors>
<title>An overview of Production Systems.</title>
<booktitle>In E.W. Elcock &amp; D. Michie</booktitle>
<marker>Davis, King, </marker>
<rawString>Davis, Randall &amp; Jonathan King. An overview of Production Systems. In E.W. Elcock &amp; D. Michie</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ronald M Kaplan</author>
</authors>
<title>A general syntactic processor.</title>
<date>1973</date>
<booktitle>In Randall Rustin (ed), Natural Language Processing (Courant Computer Symposium 1),</booktitle>
<pages>193--241</pages>
<publisher>Algorithmics Press,</publisher>
<location>New York:</location>
<contexts>
<context position="17065" citStr="Kaplan, 1973" startWordPosition="2620" endWordPosition="2621">pted without significant difficulties to cater for the introduction of other (related) Western European languages. We feel that research in tbis area will, when the time comes, be a significant 151 and valuable by-product of the project as a whole. II. DESCRIPTION OF THE SYSTEM DESIGN In this second half of the paper we present a description of the translation process in Bede, as it is currently envisaged. The process is divided broadly into two parts, analysis and synthesis, the interface, between the two being provided by the Interlingua. The analysis module uses a Chart-like structure (cf. Kaplan, 1973) and a series of grammars to produce from the source text the Interlingua tree structure which serves as input to synthesis, where it is rearranged into a valid surface structure for the target language. The &apos;translation unit&apos; (TU) is taken to be the sentence, or equivalent (e.g. section heading, title, figure caption). Full details of the rule formalisms are given in Somers (1981). A. String segmentation The TU is first subjected to a two-stage string-segmentation and &apos;lemmatisation&apos; analysis. In the first stage it is compared word by word with a &apos;stop-list&apos; of frequently occurring words (mos</context>
</contexts>
<marker>Kaplan, 1973</marker>
<rawString>Kaplan, Ronald M. A general syntactic processor. In Randall Rustin (ed), Natural Language Processing (Courant Computer Symposium 1), New York: Algorithmics Press, 1973, 193-241.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Martin Kay</author>
</authors>
<title>The proper place of men and machines in language translation</title>
<date>1980</date>
<tech>Report No. CSL-8(-11).</tech>
<publisher>Xerox,</publisher>
<location>Palo Alto, CA:</location>
<contexts>
<context position="8469" citStr="Kay, 1980" startWordPosition="1282" endWordPosition="1283">e suitable for some of the software elements, and do not rule out completing the prototype in a number of languages. This adds the burden of designing compatible datastructures and interfaces, and we are currently investigating the relative merits of these languages. Portability and efficiency seem to be in conflict here. Microprocessor-based KT contrasts sharply with the mainframe-based activity, where the significance of problems of economy of storage and efficiency of programs has decreased in recent years. The possibility of introducing an element of human interaction with the system (cf. Kay, 1980; Melby, 1981) is also highlighted in this environment. Contrast systems like SYSTRAN (Tome, 1977) and GETA (Vauquois, 1975, 1979; Boitet &amp; Nedobejkine, 1980) which work on the principle of large-scale processing in batch mode. Our experience so far is that the economy and efficiency in data-structure design and in the elaboration of interactions between programs and data and between different modules is of paramount importance. While it is relatively evident that large-scale MT can be simulated in the microprocessor environment, the cost in real time is tremendous: entirely .new design and im</context>
</contexts>
<marker>Kay, 1980</marker>
<rawString>Kay, Martin. The proper place of men and machines in language translation (Report No. CSL-8(-11). Palo Alto, CA: Xerox, 1980.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Brian W Kernighan</author>
<author>Dennis M Ritchi</author>
</authors>
<title>The C programming language. Englewood Cliffs,</title>
<date>1978</date>
<location>Prentice-Hall,</location>
<marker>Kernighan, Ritchi, 1978</marker>
<rawString>Kernighan, Brian W. &amp; Dennis M. Ritchi,. The C programming language. Englewood Cliffs, Prentice-Hall, 1978.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M King</author>
</authors>
<title>EUROTRA - a European system for machine translation. Lebende Sprachen</title>
<date>1981</date>
<pages>26--12</pages>
<contexts>
<context position="4484" citStr="King, 1981" startWordPosition="672" endWordPosition="673">design orinciples Modern MT system design can be characterised by three principles that have proved to be desirable and effective (Lehmann cc al, 19)10:1-3): each of these is adhered to in the design of Bede. Bede is multilingual by design: early &apos;7 systems were designed with specific laneuage-iairs in mind, and translation algorithms were elaborated on this basis. The main conseouence of this was that source language analysis was effected within the perspective of the given target language, and Was therefore often of Little or no use on the addition into the system of a further language (cf. King, 1981:12; 1:ine Perschke, 1982:28). In Bede, there is a strict separation of algorithms and linguistic data: early =ystems were quite simnlv &apos;translation pre&amp;quot;,.rars&apos;. Inc 149 underlying linguistic theory which might have been present was inextricably bound up with the program itself. This clearly entailed the disadvantage that any modification of the system had to be done by a skilled programmer (cf. Johnson, 1980:140). Furthermore, the side-effects of apparently quite innocent modifications were often quite farreaching and difficult to trace (see for example Bostad, 1982:130). Although this has on</context>
</contexts>
<marker>King, 1981</marker>
<rawString>King, M. EUROTRA - a European system for machine translation. Lebende Sprachen 1981, 26:12-14.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M King</author>
<author>S Perschke</author>
</authors>
<title>EUROTRA and its objectives.</title>
<date>1982</date>
<pages>1--27</pages>
<location>Multilingua,</location>
<marker>King, Perschke, 1982</marker>
<rawString>King, M. &amp; S. Perschke. EUROTRA and its objectives. Multilingua, 1982, 1:27-32.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Veronica Lawson</author>
</authors>
<title>Tigers and polar bears, or: translating and the computer. The Incorpprated Linguist,</title>
<date>1979</date>
<pages>18--81</pages>
<contexts>
<context position="10033" citStr="Lawson, 1979" startWordPosition="1527" endWordPosition="1528">nificant range of syntactic patterns has been shown to be possible, and by means of a number of different approaches. Research in this area nowadays is concentrated on the treatment of more problematic constructions (e.g. Marcus, 1980). This observation has led us to believe that a degree of success in a small scale MT project can be achieved via the notion of restricting the complexity of acceptable input, so that only constructions that are sure to ne correctly analysed are permitted. This notion of restricted syntax MT has been tried with some success in larger systems (cf. Elliston, IQ70; Lawson, 1979:81f; Somers &amp; McNaught, 1990:40), resulting both in more accurate translation, and in increased legibility from the human point of view. As Flliston points out, the development of strict guidelines for writers leads not only the use of simpler constructions, but also to the avoidance of potentially ambiguous text. In either case, the benefits for MT are obvious. Less obvious however is the acceptability of such constraints; yet &apos;restricted syntax need not imply &apos;baby talk&apos;, and a reasonably extensive range of constructions can be included. Just as problems of syntactic analysis car np allevia</context>
</contexts>
<marker>Lawson, 1979</marker>
<rawString>Lawson, Veronica. Tigers and polar bears, or: translating and the computer. The Incorpprated Linguist, 1979, 18:81-85.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Jonathan Slocum</author>
<author>Howard Smith</author>
<author>M V Solveig</author>
</authors>
<publisher>Pfluger</publisher>
<marker>Slocum, Smith, Solveig, </marker>
<rawString>Lehmann, Winfred P., Winfield S. Bennett. Jonathan Slocum, Howard Smith, Solveig M.V. Pfluger</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sandra A Eveland</author>
</authors>
<title>The METAL system (RADC-TR80-374).</title>
<date>1980</date>
<institution>Linguistics Research Center, University of Texas,</institution>
<location>Austin, TX:</location>
<marker>Eveland, 1980</marker>
<rawString>Sandra A. Eveland. The METAL system (RADC-TR80-374). Austin, TX: Linguistics Research Center, University of Texas, 1980.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mitchell P Marcus</author>
</authors>
<title>A theory of syntactic recognition for natural language,</title>
<date>1980</date>
<publisher>MIT Press,</publisher>
<location>Cambridge, MA:</location>
<contexts>
<context position="9656" citStr="Marcus, 1980" startWordPosition="1463" endWordPosition="1464">ntirely .new design and implementation strategies seem to be called for. The ancient skills of the programmer that have become eroded by the generosity afforded by modern mainframe configurations become highly valued in this microprocessor application. C. Controlled vocabulary and restricted syntax The state of the art of language processing is such that the analysis of a significant range of syntactic patterns has been shown to be possible, and by means of a number of different approaches. Research in this area nowadays is concentrated on the treatment of more problematic constructions (e.g. Marcus, 1980). This observation has led us to believe that a degree of success in a small scale MT project can be achieved via the notion of restricting the complexity of acceptable input, so that only constructions that are sure to ne correctly analysed are permitted. This notion of restricted syntax MT has been tried with some success in larger systems (cf. Elliston, IQ70; Lawson, 1979:81f; Somers &amp; McNaught, 1990:40), resulting both in more accurate translation, and in increased legibility from the human point of view. As Flliston points out, the development of strict guidelines for writers leads not on</context>
</contexts>
<marker>Marcus, 1980</marker>
<rawString>Marcus, Mitchell P. A theory of syntactic recognition for natural language, Cambridge, MA: MIT Press, 1980.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Alan K Melby</author>
</authors>
<title>Translators and machines - can they cooperate?</title>
<date>1981</date>
<pages>26--23</pages>
<location>META,</location>
<contexts>
<context position="8483" citStr="Melby, 1981" startWordPosition="1284" endWordPosition="1285">for some of the software elements, and do not rule out completing the prototype in a number of languages. This adds the burden of designing compatible datastructures and interfaces, and we are currently investigating the relative merits of these languages. Portability and efficiency seem to be in conflict here. Microprocessor-based KT contrasts sharply with the mainframe-based activity, where the significance of problems of economy of storage and efficiency of programs has decreased in recent years. The possibility of introducing an element of human interaction with the system (cf. Kay, 1980; Melby, 1981) is also highlighted in this environment. Contrast systems like SYSTRAN (Tome, 1977) and GETA (Vauquois, 1975, 1979; Boitet &amp; Nedobejkine, 1980) which work on the principle of large-scale processing in batch mode. Our experience so far is that the economy and efficiency in data-structure design and in the elaboration of interactions between programs and data and between different modules is of paramount importance. While it is relatively evident that large-scale MT can be simulated in the microprocessor environment, the cost in real time is tremendous: entirely .new design and implementation s</context>
</contexts>
<marker>Melby, 1981</marker>
<rawString>Melby, Alan K. Translators and machines - can they cooperate? META, 1981, 26:23-34.</rawString>
</citation>
<citation valid="true">
<authors>
<author>I A Mel&apos;Euk</author>
</authors>
<title>Grammatical meanings in interlinguas for automatic translation and the concept of grammatical meaning. In</title>
<date>1974</date>
<pages>95--113</pages>
<marker>Mel&apos;Euk, 1974</marker>
<rawString>Mel&apos;Euk, I.A. Grammatical meanings in interlinguas for automatic translation and the concept of grammatical meaning. In V. Ju. Rozencvejg (ed), Machine Translation and Applied Linguistics, Volume I, Frankfurt am Main: Athenaion Verlag, 1974, 95-113.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Newell</author>
</authors>
<title>Production systems: Models of control structures. In William G. Chase (ed) - Visual information processing,</title>
<date>1973</date>
<pages>463--526</pages>
<publisher>Academic Press,</publisher>
<location>New York:</location>
<contexts>
<context position="5269" citStr="Newell, 1973" startWordPosition="789" endWordPosition="790">erlying linguistic theory which might have been present was inextricably bound up with the program itself. This clearly entailed the disadvantage that any modification of the system had to be done by a skilled programmer (cf. Johnson, 1980:140). Furthermore, the side-effects of apparently quite innocent modifications were often quite farreaching and difficult to trace (see for example Bostad, 1982:130). Although this has only recently become an issue in MT (e.g. Vauquois, 1979:1.3; 1981:10), it has of course for a long time been standard practice in other areas of knowledge-based programming (Newell, 1973; Davis &amp; King, 1977). The third principle now current in MT and to be incorporated in Bede is that the translation process should be modular. This approach was a feature of the earliest &apos;second generation&apos; systems (cf. Vauquois, 1975:33), and is characterised by the general notion that any complicated computational task is best tackled by dividing it up into smaller more or less independent sub-tasks which communicate only by means of a strictly defined interface protocol (Aho et al, 1974). This is typically achieved in the MT environment by a gross division of the translation process into an</context>
<context position="24603" citStr="Newell, 1973" startWordPosition="3772" endWordPosition="3773"> major component. The &apos;static&apos; data used by the system consist of the different sets of linguistic rule packages, plus the dictionary. The system essentially has one large multilingual dictionary from which numerous software packages generate various subdictionaries as required either in the translation process itself, or for lexicographers working on the system. Alphabetical or other structured language—specific listings can be produced, while of course dictionary updating and editing packages are also provided. The system as a whole can be viewed as a collection of Production Systems (PSs) (Newell, 1973; Davis &amp; King, 1977; see also Ashman (1982) on the use of PSs in MT) in the way that the rule packages (which, incidentally, as an efficiency , undergo separate syntax verification and &apos;compilation&apos; into interpretable &apos;code&apos;) operate on the data structure. The system differs from the classical PS setup in distributing its static data over two databases: the rule packages and the dictionary. The combination of the rule packages and the dictionary, the software interfacing these, and the rule interpreter can however be considered as analgous to the rule interpreter of • a classical PS. III. CON</context>
</contexts>
<marker>Newell, 1973</marker>
<rawString>Newell, A. Production systems: Models of control structures. In William G. Chase (ed) - Visual information processing, New York: Academic Press, 1973, 463-526.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Michael Otten</author>
<author>Milos G Pacak</author>
</authors>
<title>Intermediate languages for automatic language processing.</title>
<booktitle>In Julius T. Tou (ed), Software Engineering: cnT7, III, Volume 2,</booktitle>
<pages>10--1</pages>
<publisher>Academic Press,</publisher>
<location>New York:</location>
<marker>Otten, Pacak, </marker>
<rawString>Otten, Michael &amp; Milos G. Pacak. Intermediate languages for automatic language processing. In Julius T. Tou (ed), Software Engineering: cnT7, III, Volume 2, New York: Academic Press, 10-1, 105-118.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Martin Richards</author>
<author>Colin</author>
</authors>
<title>Whitby-Strevens. 3CPL -the language and its compiler. Cambridge:</title>
<date>1979</date>
<publisher>Cambridge University Press,</publisher>
<marker>Richards, Colin, 1979</marker>
<rawString>Richards, Martin &amp; Colin Whitby-Strevens. 3CPL -the language and its compiler. Cambridge: Cambridge University Press, 1979.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jonathan Slocum</author>
</authors>
<title>A practical comparison parsing strategies for Machine Transla:,on and other Natural Language Processing Purposes.</title>
<date>1981</date>
<tech>Technical Report NL-.=.1,</tech>
<institution>Phidissertation. University of Texas at Austn,</institution>
<location>Austin, TX.</location>
<contexts>
<context position="20025" citStr="Slocum (1981)" startWordPosition="3075" endWordPosition="3076"> The nodes of the Chart are by default identified by the value of the associated variable CLASS, though it is also possible to refer to a node by a local variable name and test for or assign the value of CLASS in the stipulations. Our rule formalisms are quite deliberately designed to reflect the formalisms of traditional linguistics. This formalism allows experimentation with a large number of different context-free parsing algorithms. We are in fact still experimenting in this area. For a similar investigation, though on a machine with significantly different time and space constraints, see Slocum (1981). 2. &apos;I-rules&apos; In the second stage of structural analysis, the tree structure implied by the labels and traces on these arcs is disjoined from the Chart and undergoes general tree-to-tree-transductions as described by &apos;T-rules&apos;, resulting in a single tree structure representing the canonical form of the TU. &apos; The formalism for the T-rules is similar to that for the P-rules, except in the geometry part, where tree structures rather than arc sequences are defined. Consider the necessarily more complex (though still simplified) example (3), which regularises a simple English passive. (3) &lt; LU(AUX</context>
</contexts>
<marker>Slocum, 1981</marker>
<rawString>Slocum, Jonathan. A practical comparison parsing strategies for Machine Transla:,on and other Natural Language Processing Purposes. Phidissertation. University of Texas at Austn, 1981. Technical Report NL-.=.1, Department of Computer Sciences, The University of Texas, Austin, TX.]</rawString>
</citation>
<citation valid="false">
<authors>
<author>H L Somers</author>
</authors>
<title>Bede - the cci.diasT Machine Translation system: Rule-writing formalism ..)rd revision</title>
<tech>CCL/UMIST Report No. 815.</tech>
<marker>Somers, </marker>
<rawString>Somers, H.L. Bede - the cci.diasT Machine Translation system: Rule-writing formalism ..)rd revision) (CCL/UMIST Report No. 815.</rawString>
</citation>
<citation valid="false">
<date>1981</date>
<institution>Manchester: Centre for Computational Linguistics, University of Manchester Institute of Science and Technology,</institution>
<contexts>
<context position="17449" citStr="(1981)" startWordPosition="2684" endWordPosition="2684">rrently envisaged. The process is divided broadly into two parts, analysis and synthesis, the interface, between the two being provided by the Interlingua. The analysis module uses a Chart-like structure (cf. Kaplan, 1973) and a series of grammars to produce from the source text the Interlingua tree structure which serves as input to synthesis, where it is rearranged into a valid surface structure for the target language. The &apos;translation unit&apos; (TU) is taken to be the sentence, or equivalent (e.g. section heading, title, figure caption). Full details of the rule formalisms are given in Somers (1981). A. String segmentation The TU is first subjected to a two-stage string-segmentation and &apos;lemmatisation&apos; analysis. In the first stage it is compared word by word with a &apos;stop-list&apos; of frequently occurring words (mostly function words); words not found in the stop-list undergo string-segmentation analysis, again on a word by word basis. Stringsegmentation rules form a finite-state grammar of affix-stripping rules (&apos;A-rules&apos;) which handle mostly inflectional morphology. The output is a Chart with labelled arcs indicating lexical unit (LU) and possible interpretation of the stripped affixes, thi</context>
<context position="20025" citStr="(1981)" startWordPosition="3076" endWordPosition="3076">des of the Chart are by default identified by the value of the associated variable CLASS, though it is also possible to refer to a node by a local variable name and test for or assign the value of CLASS in the stipulations. Our rule formalisms are quite deliberately designed to reflect the formalisms of traditional linguistics. This formalism allows experimentation with a large number of different context-free parsing algorithms. We are in fact still experimenting in this area. For a similar investigation, though on a machine with significantly different time and space constraints, see Slocum (1981). 2. &apos;I-rules&apos; In the second stage of structural analysis, the tree structure implied by the labels and traces on these arcs is disjoined from the Chart and undergoes general tree-to-tree-transductions as described by &apos;T-rules&apos;, resulting in a single tree structure representing the canonical form of the TU. &apos; The formalism for the T-rules is similar to that for the P-rules, except in the geometry part, where tree structures rather than arc sequences are defined. Consider the necessarily more complex (though still simplified) example (3), which regularises a simple English passive. (3) &lt; LU(AUX</context>
</contexts>
<marker>1981</marker>
<rawString>Manchester: Centre for Computational Linguistics, University of Manchester Institute of Science and Technology, 1981.</rawString>
</citation>
<citation valid="false">
<authors>
<author>H L Somers</author>
<author>J McNaught</author>
</authors>
<title>The translator as a computer user. The Incorporated Linguist,</title>
<volume>10</volume>
<pages>19--49</pages>
<marker>Somers, McNaught, </marker>
<rawString>Somers, H.L. &amp; J. McNaught. The translator as a computer user. The Incorporated Linguist, 10K&apos;, 19:49-53.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sorcim</author>
</authors>
<title>Pascal/m users_reference manual. alnut Creek, CA: Digital larketing,</title>
<date>1979</date>
<marker>Sorcim, 1979</marker>
<rawString>Sorcim. Pascal/m users_reference manual. alnut Creek, CA: Digital larketing, 1979.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Le</author>
</authors>
<title>systime de traduction automatique de l&apos;Universite de</title>
<date>1973</date>
<pages>18--227</pages>
<location>Montréal (TAMI). META,</location>
<marker>Le, 1973</marker>
<rawString>TAU. Le systime de traduction automatique de l&apos;Universite de Montréal (TAMI). META, 1973, 18:227-289.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P P Tome</author>
</authors>
<title>SYSTRAM as a multilingual machine Translation system.</title>
<date>1977</date>
<booktitle>In Commission of the European Communities, Third European Congress on Information Systems and Networks: Overcoming the language harrier, Volume 1. MUnchen: Verlag nokumentation,</booktitle>
<pages>569--581</pages>
<contexts>
<context position="8567" citStr="Tome, 1977" startWordPosition="1296" endWordPosition="1297">number of languages. This adds the burden of designing compatible datastructures and interfaces, and we are currently investigating the relative merits of these languages. Portability and efficiency seem to be in conflict here. Microprocessor-based KT contrasts sharply with the mainframe-based activity, where the significance of problems of economy of storage and efficiency of programs has decreased in recent years. The possibility of introducing an element of human interaction with the system (cf. Kay, 1980; Melby, 1981) is also highlighted in this environment. Contrast systems like SYSTRAN (Tome, 1977) and GETA (Vauquois, 1975, 1979; Boitet &amp; Nedobejkine, 1980) which work on the principle of large-scale processing in batch mode. Our experience so far is that the economy and efficiency in data-structure design and in the elaboration of interactions between programs and data and between different modules is of paramount importance. While it is relatively evident that large-scale MT can be simulated in the microprocessor environment, the cost in real time is tremendous: entirely .new design and implementation strategies seem to be called for. The ancient skills of the programmer that have beco</context>
</contexts>
<marker>Tome, 1977</marker>
<rawString>Tome, P.P. SYSTRAM as a multilingual machine Translation system. In Commission of the European Communities, Third European Congress on Information Systems and Networks: Overcoming the language harrier, Volume 1. MUnchen: Verlag nokumentation, 1977, 569-581.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Bernard Vauquois</author>
</authors>
<title>La traduction automatique A Grenoble (Documents de Linguiscique Quantitative 24),</title>
<date>1975</date>
<location>Paris: Dunod,</location>
<contexts>
<context position="5503" citStr="Vauquois, 1975" startWordPosition="828" endWordPosition="829">n, 1980:140). Furthermore, the side-effects of apparently quite innocent modifications were often quite farreaching and difficult to trace (see for example Bostad, 1982:130). Although this has only recently become an issue in MT (e.g. Vauquois, 1979:1.3; 1981:10), it has of course for a long time been standard practice in other areas of knowledge-based programming (Newell, 1973; Davis &amp; King, 1977). The third principle now current in MT and to be incorporated in Bede is that the translation process should be modular. This approach was a feature of the earliest &apos;second generation&apos; systems (cf. Vauquois, 1975:33), and is characterised by the general notion that any complicated computational task is best tackled by dividing it up into smaller more or less independent sub-tasks which communicate only by means of a strictly defined interface protocol (Aho et al, 1974). This is typically achieved in the MT environment by a gross division of the translation process into analysis of source Language and synthesis of target language, possibly with an intermediate transfer stage (see 1.0 below), with these phases in turn sub-divided, for example into morphological, lexical and syntactico-semantic modules. </context>
<context position="8592" citStr="Vauquois, 1975" startWordPosition="1300" endWordPosition="1301">his adds the burden of designing compatible datastructures and interfaces, and we are currently investigating the relative merits of these languages. Portability and efficiency seem to be in conflict here. Microprocessor-based KT contrasts sharply with the mainframe-based activity, where the significance of problems of economy of storage and efficiency of programs has decreased in recent years. The possibility of introducing an element of human interaction with the system (cf. Kay, 1980; Melby, 1981) is also highlighted in this environment. Contrast systems like SYSTRAN (Tome, 1977) and GETA (Vauquois, 1975, 1979; Boitet &amp; Nedobejkine, 1980) which work on the principle of large-scale processing in batch mode. Our experience so far is that the economy and efficiency in data-structure design and in the elaboration of interactions between programs and data and between different modules is of paramount importance. While it is relatively evident that large-scale MT can be simulated in the microprocessor environment, the cost in real time is tremendous: entirely .new design and implementation strategies seem to be called for. The ancient skills of the programmer that have become eroded by the generosi</context>
<context position="12583" citStr="Vauquois, 1975" startWordPosition="1929" endWordPosition="1930">nces, the problem becomes more easily manageable. D. Interlingua A significant dichotomy in MT is between the &apos;transfer&apos; and &apos;interlingua&apos; approaches. The former can be characterised by the use of bilingual transfer modules which convert the results of the analysis of the source language into a representation appropriate for a specific target language. This contrasts with the interlingua approach in which the result of analysis is passed directly to the appropriate synthesis module. It is beyond the scope of the present paper to discuss in detail the relative merits of the two approaches (see Vauquois, 1975:142ff; Hutchins, 1978). We should however consider some of the major obstacles inherent in the interlingua approach. The development of an Interlingua for various purposes (not only translation) has been the subject of philosophical debate for some years, and proposals for MT have included the use of formalized natural language (e.g. Mel&apos;Cuk, 1974; Andreev, 1967), artificial Languages (like Fsoeranto), or various symbolic representations, whether linear (e.g. Wilting, 1961) or otherwise (e.g. Wilks, 1071). Most of these approaches are problematic however (for a thorough discussion of the inte</context>
</contexts>
<marker>Vauquois, 1975</marker>
<rawString>Vauquois, Bernard. La traduction automatique A Grenoble (Documents de Linguiscique Quantitative 24), Paris: Dunod, 1975.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Vauquois</author>
</authors>
<title>Aspects of mechanical translation</title>
<date>1979</date>
<booktitle>in 1979 (Conference for Japan IBM Scientific Program). Grenoble: Groupe d&apos;Ecudes pour la Traduction Automatique,</booktitle>
<contexts>
<context position="5138" citStr="Vauquois, 1979" startWordPosition="769" endWordPosition="770">there is a strict separation of algorithms and linguistic data: early =ystems were quite simnlv &apos;translation pre&amp;quot;,.rars&apos;. Inc 149 underlying linguistic theory which might have been present was inextricably bound up with the program itself. This clearly entailed the disadvantage that any modification of the system had to be done by a skilled programmer (cf. Johnson, 1980:140). Furthermore, the side-effects of apparently quite innocent modifications were often quite farreaching and difficult to trace (see for example Bostad, 1982:130). Although this has only recently become an issue in MT (e.g. Vauquois, 1979:1.3; 1981:10), it has of course for a long time been standard practice in other areas of knowledge-based programming (Newell, 1973; Davis &amp; King, 1977). The third principle now current in MT and to be incorporated in Bede is that the translation process should be modular. This approach was a feature of the earliest &apos;second generation&apos; systems (cf. Vauquois, 1975:33), and is characterised by the general notion that any complicated computational task is best tackled by dividing it up into smaller more or less independent sub-tasks which communicate only by means of a strictly defined interface </context>
</contexts>
<marker>Vauquois, 1979</marker>
<rawString>Vauquois, B. Aspects of mechanical translation in 1979 (Conference for Japan IBM Scientific Program). Grenoble: Groupe d&apos;Ecudes pour la Traduction Automatique, 1979.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Bernard Vauquois</author>
</authors>
<title>L&apos;informatique au service de la craduction.</title>
<date>1981</date>
<pages>26--8</pages>
<location>META,</location>
<marker>Vauquois, 1981</marker>
<rawString>Vauquois, Bernard. L&apos;informatique au service de la craduction. META, 1981. 26:8-17.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Veillon</author>
</authors>
<title>Description du langage pivot du systeme de traduction automatique du</title>
<date>1968</date>
<pages>1--8</pages>
<marker>Veillon, 1968</marker>
<rawString>Veillon, G. Description du langage pivot du systeme de traduction automatique du C.E.T.A. P.A. Informations, 1968. 1:8-17.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yorick Wilks</author>
</authors>
<title>An Artificial Intelligence approach to Machine Translation. in Ro!,,er C. Schank &amp; Kenneth lark Colby (eds), Computer models of thought and language,</title>
<date>1971</date>
<pages>114--151</pages>
<location>San Francisco: Freeman.</location>
<marker>Wilks, 1971</marker>
<rawString>Wilks, Yorick. An Artificial Intelligence approach to Machine Translation. in Ro!,,er C. Schank &amp; Kenneth lark Colby (eds), Computer models of thought and language, San Francisco: Freeman. 1971, 114-151.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Eugen</author>
</authors>
<title>Regriffs- und Themaklassifikationen: Unterschiede in ihrem Wesen und in ihrer Anwendung. Nachrichten fUr Dokumentation,</title>
<date>1971</date>
<pages>22--98</pages>
<marker>Eugen, 1971</marker>
<rawString>uuster. Eugen. Regriffs- und Themaklassifikationen: Unterschiede in ihrem Wesen und in ihrer Anwendung. Nachrichten fUr Dokumentation, 1971. 22:98-104.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hermann-Josef Zingel</author>
</authors>
<title>Experiences with TITUS II. International Classification,</title>
<date>1971</date>
<pages>5--33</pages>
<marker>Zingel, 1971</marker>
<rawString>Zingel, Hermann-Josef. Experiences with TITUS II. International Classification, 1971, 5:33-37.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>