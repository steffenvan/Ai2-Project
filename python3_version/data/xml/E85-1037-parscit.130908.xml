<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000012">
<title confidence="0.544537">
A PROBLEM SOLVING APPROACH TO GENERATING TEXT FROM SYSTEMIC GRAMMARS*
</title>
<author confidence="0.799315">
Terry Patten
</author>
<affiliation confidence="0.878273">
Dept. of Artificial Intelligence, University of Edinburgh
</affiliation>
<address confidence="0.467419">
Hope Park Square, Meadow Lane, EH8 9NW.
</address>
<email confidence="0.464192">
ABSTRACT
</email>
<bodyText confidence="0.999507583333333">
Systemic grammar has been used for Al text
generation work in the past, but the implementa-
tions have tended be ad hoc or inefficient. This
paper presents an approach to systemic text genera-
tion where Al problem solving techniques are
applied directly to an unadulterated systemic gram-
mar. This approach is made possible by a special
relationship between systemic grammar and problem
solving: both are organized primarily as choosing
from alternatives. The result is simple, efficient
text generation firmly based in a linguistic
theory.
</bodyText>
<sectionHeader confidence="0.98988" genericHeader="introduction">
INTRODUCTION
</sectionHeader>
<bodyText confidence="0.996401333333334">
This paper will describe an approach to text
generation where Al problem solving techniques are
used to generate text from systemic grammars.**
Problem solving is a general term used here to
refer to areas of Al research such as &apos;expert sys-
tems&apos;, &apos;planning&apos;, &apos;design&apos; and so on (Hayes-Roth
et al., 1983). Techniques developed in these
fields are applied directly to an unadulterated
systemic grammar, resulting in a simple, efficient
text generator firmly based in an established
linguistic theory.
This approach is only possible because of a
fundamental relationship that exists between sys-
temic grammar and Al problem solving. This
relationship is described in the next section. The
third section will be concerned with one of the
most imoortant manifestations of this special rela-
tionship: a common representation. The following
section will show how this common representation
allows goal directed problem solving techniques to
be applied directly to the grammar. One of the
most novel and important aspects of this approach
is that it is compatible with the semantic stratum
described in the systemic theory: a system network
organized around the idea of &apos;register&apos; (Halliday,
1978). The semantic stratum and its relationship
to the grammar will be discussed next. Some advan-
tages of the approach will then be put forward.
* Many thanks to my supervisors Graeme Ritchie
and Austin Tate. This work was supported in part
by an ORS award.
** For an overview of systemic grammar, see
(Winograd, 1983) Chapter 6.
Finally, the current status of the project will be
described, including sample output generated from a
large grammar.
</bodyText>
<sectionHeader confidence="0.787576" genericHeader="method">
THE FUNDAMENTAL RELATIONSHIP
</sectionHeader>
<listItem confidence="0.9199456">
1. &amp;quot;The central nature of intelligent
Problem solving is that a system must
construct its solution selectively and
efficiently from a space of alterna-
tives.&amp;quot; (Hayes-Roth et al., 1983)
2. &amp;quot;We shall define language as &apos;meaning
potential&apos;: that is as sets of options or
alternatives, in meaning, that are avail-
able to the speaker-hearer.&amp;quot; (Halliday in
deJoia et al., 1980, #572)
</listItem>
<bodyText confidence="0.999970761904762">
Compare these two quotations. Notice that both
Al problem solving and systemic grammar have at
their very core the idea of choosing from alterna-
tives. Systemic grammar is probably unique in hav-
ing such emphasis on the idea of choice; or in dif-
ferent terminology, systemic grammar is dis-
tinguished in allowing the paradigmatic mode of
description to dominate over the syntagmatic (see
Halliday et al., 1981, P. 19). Thus, this is a
special relationship between systemic grammar and
Al problem solving.
This fundamental relationship can be exploited
because systemic grammar provides knowledge (in the
Al sense) about the various linguistic alterna-
tives, and A/ problem solving provides computa-
tional techniques for choosing between the alterna-
tives, given the appropriate knowledge. The text
generation approach described here is simply the
standard Al knowledge-based problem solving metho-
dology, with a systemic grammar acting as part of
the knowledge base.
</bodyText>
<sectionHeader confidence="0.917215" genericHeader="method">
KNOWLEDGE REPRESENTATION
</sectionHeader>
<bodyText confidence="0.999841666666667">
One of the manifestations of this fundamental
relationship between Al problem solving and sys-
temic grammar is a common representation of
knowledge. Both of these fields represent the
interdependencies between the various alternatives
as &amp;quot;condition/effect&amp;quot; relationships.
</bodyText>
<page confidence="0.994261">
251
</page>
<subsectionHeader confidence="0.942015">
Problem solving
</subsectionHeader>
<bodyText confidence="0.997900833333333">
The last decade has produced problem solving
techniques which use domain-specific knowledge to
guide the problem solving process. Problem solving
knowledge is often expressed as condition/effect
rules. For instance, a medical problem solver may
have the rule:
</bodyText>
<figure confidence="0.84030275">
if
a patient has symptoms X, and Y
then
drug A should be administered.
</figure>
<bodyText confidence="0.882741142857143">
Here if the conditions (the symptoms) are satis-
fied, the problem solver can infer that drug A
should be given. At this point other rules may be
involved:
if
a drug should be administered and it is
not in stock
then...
The problem solver is forming a chain of inferences
which leads toward the solution. This is called
&amp;quot;forward chaining&amp;quot;.
Condition/effect rules can also be used to
reason from the effects back to the conditions.
Suppose we have a rule:
</bodyText>
<figure confidence="0.48168725">
if
a surface is hot and compound B is
applied
then
</figure>
<bodyText confidence="0.98972384">
the surface will be made Permanently
non-reflective.
If a problem solver has a goal to make a surface
non-reflective, it can see from the effects that
this rule will achieve the goal. The conditions of
the rule are set as subgoals, and the problem
solver will try to find rules to achieve these.
Rules must then be found that have the effects of
heating the surface and aDolying the compound.
Here the problem solver is working backward from
the solution. This is called &amp;quot;goal-directed back-
ward chaining&amp;quot;.
The relationship between this functional view
of language and the structural tradition is analo-
gous to the relationshin between physiology and
anatomy*, and is equally complementary. This func-
tional perspective has led to a different conceptu-
alization of what language is, and how it should be
described.
The most important knowledge structure in sys-
temic grammar is the &apos;system&apos; -- this is where the
theory gets its name. A system is simply a mutu-
ally exclusive choice between a set of alternative
features. Figure 1 shows a system that reoresents a
choice between a marked- and unmarked-wh-theme.
</bodyText>
<figure confidence="0.94321975">
wh-
&apos;Wh &amp;quot; Finite&apos;
marked-wh-theme
.1
</figure>
<figureCaption confidence="0.999911">
Figure 1. A system (Mann/Halliday).
</figureCaption>
<bodyText confidence="0.945083315789474">
Systems also have &apos;entry conditions&apos;: a logical
combination of features that must be chosen before
the particular choice is appropriate. In this case
the entry condition is simply the feature wh-. So
the clause must be a wh- clause before the choice
between a marked- or unmarked-wh-theme is relevant.
The boxes contain what are called &apos;realization
rules&apos;. These specify the syntactic consequences of
choosing the associated feature. &amp;quot;Wh / Topical&amp;quot; is
read: &amp;quot;the Wh element is conflated with the Topi-
cal&amp;quot;, meaning that the Wh and Topical are realized
by the same item. &amp;quot;Wh &amp;quot; Finite&amp;quot; is read: &amp;quot;the Wh
element is adjacent to the Finite element&amp;quot;, meaning
that the Wh element immediately precedes the Finite
element in the clause.
As well as systems, systemic grammars may con-
tain what Mann (1983) calls &amp;quot;gates&apos;. A gate also
has some logical combination of features acting as
entry conditions.
</bodyText>
<figure confidence="0.9263418">
... present
... do-finite
unmarked-wh-theme
1 &apos;Wh / Topical&apos;
systemic grammar
</figure>
<bodyText confidence="0.998415333333333">
Systemic linguistics was developed in the
early sixties by M.A.K. Halliday, although its
roots in sociology and anthropology extend back
much further. The emphasis of systemic linguistics
has not been on the structure of language, but on
its function; systemicists are not so much
interested in what language &apos;looks like&apos;, as in how
it is used. They are interested in how language is
used to ask questions and make statements, how
language can be used to relate &apos;who did what to
whom&apos;, and how language ties itself to previous
discourse.
</bodyText>
<figure confidence="0.982262">
... mass-subject
... singular-subject
</figure>
<figureCaption confidence="0.999956">
Figure 2. A gate (Mann/Halliday).
</figureCaption>
<bodyText confidence="0.955303285714286">
In Figure 2 the curly bracket means AND, and the
square bracket means OR. A gate also may have real-
ization rules. Here the Finite element is con-
strained to be some form of &apos;does&apos;: &amp;quot;does&amp;quot;, &amp;quot;does
not&amp;quot; or &amp;quot;doesn&apos;t&amp;quot;. The significant difference
between systems and gates is that gates do not
Involve a choice.
</bodyText>
<listItem confidence="0.481656">
* This analogy was probably first made by Firth
(1957) and has been used several times since see
</listItem>
<equation confidence="0.333489333333333">
(Winograd, 1983, p.287)
does
&apos;Finite : does&apos;
</equation>
<page confidence="0.542992">
252
</page>
<figure confidence="0.996179529411765">
interrogative
indicative I
finite I marked-decl-theme
declarative
imperative I
unmarked -decl-theme
non-finite I Subject/Theme 1
clause- &lt;
middle
effective
operative
1 Agent/Subject I
receptive
theme
I # Theme I
/ : conflation # : boundary
: adjacency
</figure>
<figureCaption confidence="0.999865">
Figure 3. A grammar excerpt.
</figureCaption>
<bodyText confidence="0.999986535714286">
Now consider these two constructs from a prob-
lem solving ooint of view. A feature that is part
of a system can be interpreted as a
condition/effect rule. The conditions are simply
the entry conditions of the system; the effects are
choosing the feature, and doing whatever the reali-
zation rules say. This means that these features
can be interpreted as problem solving rules and out
at the disposal of the problem solver. Again it
must be stressed that a system involves choice.
From a problem solving point of view choices should
be avoided whenever possible, in case the wrong
choice is made. Notice if a system feature is used
for backward chaining the choice is not explicitly
considered. Suppose there is a goal to choose
unmarked-wh-theme. Since the problem solver can
interoret the system features as condition/effect
rules, it sees that there is a rule called
unmarked-wh-theme that achieves this goal as one of
Its effects. The problem solver begins to backward
chain by invoking this rule and setting its condi-
tion, wh-, as a subgoal. The feature marked-wh-
theme was never explicitly considered.
Similarly, features that are gates can be
Interpreted as forward chaining condition/effect
rules. In Figure 2, if the entry conditions are
satisfied, the does rule fires, choosing does and
constraining the Finite element.
</bodyText>
<sectionHeader confidence="0.371171" genericHeader="method">
THE METHOD
</sectionHeader>
<bodyText confidence="0.999374725">
The last section showed that features from
systemic grammars can be interpreted as a
condition/effect rule of the type used by Al prob-
lem solvers, regardless of whether they are oart of
a system or a gate. An Al problem solver can thus
use a systemic grammar as part of its knowledge
base, and solve grammatical problems in exactly the
same way as it solves medical problems using medi-
cal knowledge, or chemistry problems using chemis-
try knowledge.
an example
Figure 3 is a simplified excerpt from a sys-
temic grammar. Suppose, for the moment, that the
semantics wants to choose unmarked-declarative-
theme and operative. The grammar provides rules
that achieve these goals as part of their effects.
The feature unmarked-declarative-theme can be
thought of as a rule that chooses that feature and
conflates the Subject with the Theme. This rule
has, however, the condition declarative. This is
set as a subgoal which can be achieved by another
rule that in turn has the condition indicative. In
this way the problem solver backward chains from
unmarked-declarative-theme through declarative,
through indicative, through finite, to clause. At
this point the backward chaining stops because
clause has no conditions. The problem solver also
backward chains from operative through effective to
clause. Once clause is chosen, the gate theme
fires (the only instance of forward chaining in
this example).
Every time a rule is used the &apos;realization
rules&apos; in the effects are accumulated, gradually
constraining the structure of the clause. In the
example, the Agent has been constrained to be the
leftmost constituent in the clause. The semantics
will choose other features of course, from parts of
the grammar not shown here, and after further for-
ward and backward chaining, the clause will be com-
pletely determined.
</bodyText>
<page confidence="0.992266">
253
</page>
<bodyText confidence="0.998301054054054">
The careful reader may have noticed that it is
Possible for the semantics to start the same pro-
cess with the goal &amp;quot;move the agent into the theme
position&amp;quot; (conflate Agent and Theme), assuming
there is a rule expressing the transitivity of
conflation. The transitivity rule would set as
subgoals: &amp;quot;conflate Agent with X&amp;quot; and &amp;quot;conflate
Theme with X&amp;quot;, where X could be instantiated to
Subject. From there the problem solving would
proceed as before. However, this would require far
too much inference for such a simple goal. First,
the transitivity would have to be worked out
correctly. Second, there are likely to be other
rules with the same realization rules, but which
would lead to conflicts, and backtracking.
In problem solving, if a simple goal requires
too much inference, its solution can be &apos;compiled&apos;
(Brachman, 1983). Here, the semantics may have a
rule that says:
if
there is a goal to make a statement and a
goal to move the agent into the theme
Position
then
choose unmarked-declarative-theme and
operative.
This use of compiled knowledge to actually
choose features from the grammar corresponds to the
systemic idea of &apos;preselection&apos;. Preselection is
an important Part of systemic theory, being the
vehicle of realization across network boundaries.
Systemic grammar adopts
... the general perspective on the
linguistic system you find in Hjelmslev,
in the Prague school, with Firth in the
London school, with Lamb and to a certain
extent with Pike - language as a basi-
cally tristratal system: semantics, gram-
mar, phonology. (Halliday, 1978, 0.39)
Each level must oass down information to the
level below. Realization rules at the higher level
preselect features from the next level below. The
semantic stratum (described in the next section)
preselects features from the grammatical stratum
(e.g. unmarked-declarative-theme and operative in
the example above). Similarly, the grammatical
stratum preselects phonological/graphological
features.
Preselection is also used to interface the
different ranks at the grammatical level (clause,
group and word). The colon in Figure 2 is the sym-
bol for preselection. Thus the feature does at the
clause rank oreselects the feature does from the
auxiliary network at the word rank. If, for
instance, the features reduced and negative are
also oreselected, the Finite element will be real-
ized as &amp;quot;doesn&apos;t&amp;quot;.
Returning to Figure 3, compare this backward
chaining approach to Mann&apos;s (1983) NIGEL system.
NIGEL begins at the left hand side of the network
and works its way towards the right. It starts by
choosing the feature clause. Then it sees that it
must choose between finite and non-finite. There
is a semantic &apos;choice-expert&apos; associated with this
system which cannot make the choice without
specific information about the context and the com-
municative goals. The choice expert gains this
information by passing messages to the &apos;environ-
ment&apos;. In this case the answer returned from the
environment will indicate that finite should be
chosen. Another choice expert will now choose
between indicative and imperative and so on.
Whether or not this is a valid or interesting
way to do text generation is not at issue here.
From a computational point of view NIGEL has some
drawbacks. Most importantly, an explicit choice
must be made for every system encountered during
the process. For large grammars, this will number
in the hundreds, and will result in a large over-
head. In contrast, the Preselection - backward
chaining approach outlined in this paper greatly
reduces the number of explicit choices.
The reason these choices are avoided here is
that the problem solving process is goal-directed.
The semantic stratum chooses some features from the
right hand side of the network, which greatly
reduces the number of possible paths through the
network from the very start.
It could be argued that this kind of goal-
directed search is non-deterministic because sys-
tems may have disjunctive entry conditions. &apos; There
is, however, an Al problem solving technique which
has been developed for this purpose: least commit-
ment (Stefik et al., 1983). Least commitment is
simply the principle of not making any choices
until absolutely necessary. Whenever a disjunctive
entry condition is encountered, a decision must be
made about which subgoal to set. There is no
requirement that the decision be made at that Par-
ticular instant, so it is suspended until one of
the subgoals is set as part of another chain in
inference (gratuitously solving the original prob-
lem). Of course there will be cases where none of
the subgoals (entry conditions) are part of another
inference. In these cases, it must be assumed that
the semantics will preselect a feature correspond-
ing to one of the subgoals.
Clearly this whole text generation method
relies on the semantic level to preselect the
appropriate grammatical features. The next section
will briefly look at this semantic level.
</bodyText>
<page confidence="0.996149">
254
</page>
<figure confidence="0.684672636363636">
threat of deprivation...
loss of I
privilege command
rejection I
control
strategy
threat of
Punishment...
appeal...
obligation
imperative
</figure>
<figureCaption confidence="0.998206">
Figure 4. Some semantic choices
</figureCaption>
<bodyText confidence="0.986640857142857">
SEMANTICS
No motivation for the stratified approach
adopted by systemic grammar will be given here,
except pointing out that the role of the semantic
stratum is to interface the extra-linguistic with
the grammatical (Halliday, 1978). In order to
preselect the correct features from the grammar,
this level must contain a considerable amount of
knowledge (in the Al sense) relating grammatical
features to extra-linguistic factors.
In this section we will look at one particular
organization of the semantic stratum, as presented
in (Halliday, 1978). Halliday organized his seman-
tic stratum around the idea of &apos;register&apos;:
It refers to the fact that the language&apos;
we speak or write varies according to the
type of situation ... What the theory of
register does is attempt to uncover the
general principles which govern this
variation, so that we can begin to under-
stand what situational factors determine
what linguistic features. (Halliday in
deJoia et al., 1980, #764)
Halliday uses the same system network notation
to describe the semantics. Figure 4 (adapted from
(Halliday, 1978)) describes the control strategies
that a mother can use on her child.
The features of a semantic system network,
like those of the grammatical networks, have reali-
zation rules -- including preselection. For
instance the semantic feature rejection preselects
the features which will make the hearer the Medium
(Affected), and realize it with the pronoun &apos;you&apos;
by preselecting from the nominal group and noun
networks). The semantic feature decision
preselects, for instance, the clause feature
declarative. The semantic feature resolution
preselects the features present-in and present to
give this type of threat its tense construction --
e.g. &amp;quot;you&apos;re going upstairs&amp;quot;, &amp;quot;I&apos;m taking you
upstairs&amp;quot;. Similarly, obligation preselects neces-
sary passive modulation (Halliday, 1970) -- e.g.
&amp;quot;I&apos;ll have to take you upstairs&amp;quot;, &amp;quot;you&apos;ll have to
go upstairs&amp;quot; (Halliday, 1978).
Unfortunately, very little work has been done
in the area of register, even by Halliday and his
Colleagues, so no large portions of a semantic
stratum have been built. However, this example
illustrates the idea.
</bodyText>
<sectionHeader confidence="0.803099" genericHeader="method">
ADVANTAGES
</sectionHeader>
<bodyText confidence="0.996718739130435">
The backward chaining approach outlined here
has several advantages. First, this method does
not involve any linguistic sacrifices, since an
established linguistic formalism is utilized. Sys-
temic grammar was developed by linguists for
linguistic purposes, and is used here in a totally
unadulterated form. Nothing linguistically ad hoc
has been introduced for computational reasons.
Second, no computational sacrifices have been
made to accommodate the linguistic formalism.
State-of-the-art computational techniques are being
exploited at all stages of the problem solving pro-
cess.
Third, the approach is parsimonious. There is
no need for a special-purpose text generation com-
ponent. Other methods involve an Al problem solver
that does the extra-linguistic work and perhaps the
high-level &apos;text-planning&apos;, then passes a specifi-
cation off to a special-purpose mechanism that
processes the grammar. Here the Al problem solver
can directly process the grammar, eliminating the
special purpose component, and avoiding the kind of
message passing that NIGEL, for example, must do.
</bodyText>
<sectionHeader confidence="0.931159" genericHeader="method">
PROJECT STATUS
</sectionHeader>
<bodyText confidence="0.99721505">
At present, this approach to text generation
is being tested on a large systemic grammar. The
grammar has been collected from a variety of
sources (Mann/Halliday) (Kress, 1976) (Halliday &amp;
Hasan, 1976) (Winograd, 1983), and contains about
six hundred grammatical features. Fragments of
grammar usually appear in the linguistic literature
as &apos;system networks&apos;. These are entered as LISP
data structures, and translated by a three page
LISP program into OPS5 production rules. (0PS5 is a
widely used production system that was used to
implement, for example, R1 (Gaschnig et al.,
1983)J.
Once the grammar is in the form of OPS5 rules,
OPS5 can perform forward and backward chaining
directly. The rest of the system consists mostly of
OPS5 rules to act on the realization rules of the
grammar, and to outout the text as it is being gen-
erated.
The interface between the grammar and the
</bodyText>
<page confidence="0.99245">
255
</page>
<bodyText confidence="0.99869793877551">
semantics has been implemented, namely preselec-
tion. Since preselection is done via realization
rules, it is implemented by a small group of OPS5
rules as just mentioned.
Although the interface between the grammar and
the semantics has been implemented, the semantic
stratum itself has not. This means that to test the
approach, those features that would have been
preselected by the semantics must be preselected by
hand.
Another limitation at the moment is that there
is no graphological level. This means that the
output does not contain punctuation, capitals, the
word &amp;quot;an&amp;quot;, and so on.
To put all this in perspective, recall that
systemic linguistics stratifies language into the
semantic, the grammatical, and the graphological
or if working with speech, phonological) strata.
Currently only the middle stratum, the grammatical,
has been implemented. Again it should be pointed
out that the interface between the different strata
(preselection in each case) has been implemented as
well.
sample outDUt
Consider the context of a medical expert sys-
tem that is trying to diagnose a patient&apos;s illness.
Suppose there is a patient named Mary who has been
having headaches and stiff neck muscles. The expert
system hypothesizes that Mary has a fever, and
tests this hypothesis by asking &amp;quot;Does Mary have a
fever ?&amp;quot; At this point, the user, who we will
assume is neither a medical or computing expert,
can ask &amp;quot;WHY&amp;quot; (did you ask me that question?)*.
The test system at this stage can generate the fol-
lowing response (bars have been added to indicate
clause boundaries).
I I well mary has been having headaches II
on this basis perhaps she has a infection
II this possibility would be supported by
a fever II so we ask I does she have one
I I
Remember that at oresent, the features that
would be oreselected by the semantics must be
oreselected by hand for each individual clause.
However, this example illustrates the grammar we
are working with, and demonstrates that this
approach works very well with large grammars.
* Following an example from (Hasling et al.,
1984).
</bodyText>
<sectionHeader confidence="0.976243" genericHeader="conclusions">
CONCLUSION
</sectionHeader>
<bodyText confidence="0.999987307692308">
This paper has described a new approach to
generating text from systemic grammars. State-of-
the-art Al problem solving techniques are applied
directly to an unadulterated systemic grammar. We
have seen how this approach is made possible by a
special relationship between systemic linguistics
and AI problem solving. A semantic stratum, con-
sisting of a large &apos;knowledge base relating dif-
ferent &apos;registers&apos; to grammatical features,
preselects some features from the grammatical
level. The large number of features which are not
oreselected are inferred efficiently by goal-
directed backward chaining and forward chaining.
This approach has the advantage of being able
to combine an established linguistic formalism with
powerful Al methods. It also has the advantage of
simplicity resulting from the application of these
same methods throughout the generation process.
This approach has been applied successfully to
a large grammatical stratum. Of course it will not
have been tested properly until a substantial
semantic stratum is developed.
In conclusion, although there are still many
unresolved linguistic matters in systemic text gen-
eration, we hope this approach has moved toward
solving the computational problems involved.
</bodyText>
<page confidence="0.9968">
256
</page>
<sectionHeader confidence="0.996962" genericHeader="references">
REFERENCES
</sectionHeader>
<reference confidence="0.999365306122449">
Brachman,R., Amarel,S., Engelman,C.,
Engelmore,R., Feigenbaum,E., Wilkins,D. &amp;quot;What are
Expert Systems ?&amp;quot; In (Hayes-Roth et al., 1983).
Firth,J.R., &amp;quot;A synopsis of linguistic theory
1930-1955).&amp;quot; Studies in Linguistic Analysis.
Blackwell, Oxford, 1957, op. 1-32. Reprinted in
Palmer, F.R.,(ed.) Selected Papers of J.R.Firth
1952-1959. Longman, London, 1968, pp. 168-205.
Forgey,C.L. &amp;quot;OPS5 User&apos;s Manual&amp;quot;. CMU-CS-81-
135 Carnegie Mellon University, Pittsburgh, 1981.
Gaschnig,J., Klahr,P., Pople,H.,
Shortliffe,E., Terry,A., &amp;quot;Evaluation of Expert
Systems: Issues and Case Studies.&amp;quot; In (Hayes-Roth
et al., 1983f.
Halliday, M.A.K., Explorations in the Func-
tions of Language. Edward Arnold, London, 1973.
---, Language as a Social Semiotic. Edward
Arnold, London, 197T
---, &amp;quot;Modality and modulation in English.&amp;quot; In
(Kress, 1976, Ch. 13), 1970.
Halliday, M.A.K. &amp; Martin,J.R. (eds.) Readings
in Systemic Linguistics. Batsford Academic, Lon-
don, -1981.-
Hasling,D., Clancey,W., Rennels,G., &amp;quot;Strategic
explanation for a diagnostic consultation system.&amp;quot;
In Coombs,M.(ed.) Developments in Expert Systems.
Academic Press, London, 1984, 00. 117-133.
Hayes-Roth,F., Waterman,D., Lenat,D., (eds.)
Building Expert Systems. Addison-Wesley, London,
1983.
deJoia,A. &amp; Stenton,A. Terms in Systemic
Linguistics. Batsford Academic, London, 1980.
in Language. (ed.) Halliday: System and Function
Oxford, London, 1976.
Mann,W./Halliday,M.A.K. &amp;quot;Systemic Grammar of
English, S.G. Clause Systems&amp;quot;. From the PENMAN
system, Information Sciences Institute, USC.
Mann,W. &amp; Matthiessen,C. &amp;quot;Nigel: A Systemic
Grammar for Text Generation&amp;quot;. RR-83-105, Informa-
tion Sciences Institute, USC. 1983.
Monaghan,J. The Neo-Firthian Tradition and
its Contribution to General Linguistics. Max
Niemeyer Verlag, Tubingen, 1979.
Stefik,M., Aikins,J., Balzer,R., Benoit,J.,
Birnbaum,L., Hayes-Roth,F., Sacerdoti,E., &amp;quot;The
architecture of expert systems.&amp;quot; In (Hayes-Roth et
al., 1983), 1983.
Winograd,T. Language as a Cognitive Process.
Addison-Wesley, London, 1983.
</reference>
<page confidence="0.997212">
257
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.774601">
<title confidence="0.999303">A PROBLEM SOLVING APPROACH TO GENERATING TEXT FROM SYSTEMIC GRAMMARS*</title>
<author confidence="0.999986">Terry Patten</author>
<affiliation confidence="0.999097">Dept. of Artificial Intelligence, University of Edinburgh</affiliation>
<address confidence="0.829611">Hope Park Square, Meadow Lane, EH8 9NW.</address>
<abstract confidence="0.994887230769231">Systemic grammar has been used for Al text work in the past, but the implementations have tended be ad hoc or inefficient. This paper presents an approach to systemic text generation where Al problem solving techniques are applied directly to an unadulterated systemic grammar. This approach is made possible by a special relationship between systemic grammar and problem solving: both are organized primarily as choosing from alternatives. The result is simple, efficient text generation firmly based in a linguistic theory.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>R Brachman</author>
<author>S Amarel</author>
<author>C Engelman</author>
<author>R Engelmore</author>
<author>E Feigenbaum</author>
<author>D Wilkins</author>
</authors>
<title>What are Expert Systems ?&amp;quot;</title>
<date>1983</date>
<booktitle>In (Hayes-Roth et al.,</booktitle>
<marker>Brachman, Amarel, Engelman, Engelmore, Feigenbaum, Wilkins, 1983</marker>
<rawString>Brachman,R., Amarel,S., Engelman,C., Engelmore,R., Feigenbaum,E., Wilkins,D. &amp;quot;What are Expert Systems ?&amp;quot; In (Hayes-Roth et al., 1983).</rawString>
</citation>
<citation valid="false">
<authors>
<author>J R Firth</author>
</authors>
<title>A synopsis of linguistic theory 1930-1955).&amp;quot; Studies in Linguistic Analysis.</title>
<marker>Firth, </marker>
<rawString>Firth,J.R., &amp;quot;A synopsis of linguistic theory 1930-1955).&amp;quot; Studies in Linguistic Analysis.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Oxford Blackwell</author>
</authors>
<date>1957</date>
<booktitle>Selected Papers of J.R.Firth</booktitle>
<pages>1--32</pages>
<editor>Palmer, F.R.,(ed.)</editor>
<publisher>Longman,</publisher>
<location>London,</location>
<note>Reprinted in</note>
<marker>Blackwell, 1957</marker>
<rawString>Blackwell, Oxford, 1957, op. 1-32. Reprinted in Palmer, F.R.,(ed.) Selected Papers of J.R.Firth 1952-1959. Longman, London, 1968, pp. 168-205.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C L Forgey</author>
</authors>
<title>OPS5 User&apos;s Manual&amp;quot;.</title>
<date>1981</date>
<tech>CMU-CS-81-135</tech>
<institution>Carnegie Mellon University,</institution>
<location>Pittsburgh,</location>
<marker>Forgey, 1981</marker>
<rawString>Forgey,C.L. &amp;quot;OPS5 User&apos;s Manual&amp;quot;. CMU-CS-81-135 Carnegie Mellon University, Pittsburgh, 1981.</rawString>
</citation>
<citation valid="false">
<authors>
<author>J Gaschnig</author>
<author>P Klahr</author>
<author>H Pople</author>
<author>E Shortliffe</author>
<author>A Terry</author>
</authors>
<title>Evaluation of Expert Systems: Issues and Case Studies.&amp;quot;</title>
<booktitle>In (Hayes-Roth et al., 1983f.</booktitle>
<marker>Gaschnig, Klahr, Pople, Shortliffe, Terry, </marker>
<rawString>Gaschnig,J., Klahr,P., Pople,H., Shortliffe,E., Terry,A., &amp;quot;Evaluation of Expert Systems: Issues and Case Studies.&amp;quot; In (Hayes-Roth et al., 1983f.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M A K Halliday</author>
</authors>
<title>Explorations in the Functions of Language. Edward</title>
<date>1973</date>
<publisher>Edward</publisher>
<location>Arnold, London,</location>
<marker>Halliday, 1973</marker>
<rawString>Halliday, M.A.K., Explorations in the Functions of Language. Edward Arnold, London, 1973. ---, Language as a Social Semiotic. Edward</rawString>
</citation>
<citation valid="true">
<authors>
<author>London Arnold</author>
</authors>
<title>Modality and modulation in English.&amp;quot; In (Kress,</title>
<date></date>
<journal>Ch.</journal>
<volume>13</volume>
<marker>Arnold, </marker>
<rawString>Arnold, London, 197T ---, &amp;quot;Modality and modulation in English.&amp;quot; In (Kress, 1976, Ch. 13), 1970.</rawString>
</citation>
<citation valid="true">
<date>1981</date>
<booktitle>Readings in Systemic Linguistics.</booktitle>
<editor>Halliday, M.A.K. &amp; Martin,J.R. (eds.)</editor>
<publisher>Batsford Academic,</publisher>
<location>London,</location>
<marker>1981</marker>
<rawString>Halliday, M.A.K. &amp; Martin,J.R. (eds.) Readings in Systemic Linguistics. Batsford Academic, London, -1981.-</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Hasling</author>
<author>W Clancey</author>
</authors>
<title>Rennels,G., &amp;quot;Strategic explanation for a diagnostic consultation system.&amp;quot;</title>
<date>1984</date>
<booktitle>In Coombs,M.(ed.) Developments in Expert Systems.</booktitle>
<volume>00</volume>
<pages>117--133</pages>
<publisher>Academic Press,</publisher>
<location>London,</location>
<marker>Hasling, Clancey, 1984</marker>
<rawString>Hasling,D., Clancey,W., Rennels,G., &amp;quot;Strategic explanation for a diagnostic consultation system.&amp;quot; In Coombs,M.(ed.) Developments in Expert Systems. Academic Press, London, 1984, 00. 117-133.</rawString>
</citation>
<citation valid="true">
<title>Building Expert Systems.</title>
<date>1983</date>
<editor>Hayes-Roth,F., Waterman,D., Lenat,D., (eds.)</editor>
<publisher>Addison-Wesley,</publisher>
<location>London,</location>
<contexts>
<context position="6855" citStr="(1983)" startWordPosition="1093" endWordPosition="1093">ture wh-. So the clause must be a wh- clause before the choice between a marked- or unmarked-wh-theme is relevant. The boxes contain what are called &apos;realization rules&apos;. These specify the syntactic consequences of choosing the associated feature. &amp;quot;Wh / Topical&amp;quot; is read: &amp;quot;the Wh element is conflated with the Topical&amp;quot;, meaning that the Wh and Topical are realized by the same item. &amp;quot;Wh &amp;quot; Finite&amp;quot; is read: &amp;quot;the Wh element is adjacent to the Finite element&amp;quot;, meaning that the Wh element immediately precedes the Finite element in the clause. As well as systems, systemic grammars may contain what Mann (1983) calls &amp;quot;gates&apos;. A gate also has some logical combination of features acting as entry conditions. ... present ... do-finite unmarked-wh-theme 1 &apos;Wh / Topical&apos; systemic grammar Systemic linguistics was developed in the early sixties by M.A.K. Halliday, although its roots in sociology and anthropology extend back much further. The emphasis of systemic linguistics has not been on the structure of language, but on its function; systemicists are not so much interested in what language &apos;looks like&apos;, as in how it is used. They are interested in how language is used to ask questions and make statements</context>
<context position="13963" citStr="(1983)" startWordPosition="2242" endWordPosition="2242">heme and operative in the example above). Similarly, the grammatical stratum preselects phonological/graphological features. Preselection is also used to interface the different ranks at the grammatical level (clause, group and word). The colon in Figure 2 is the symbol for preselection. Thus the feature does at the clause rank oreselects the feature does from the auxiliary network at the word rank. If, for instance, the features reduced and negative are also oreselected, the Finite element will be realized as &amp;quot;doesn&apos;t&amp;quot;. Returning to Figure 3, compare this backward chaining approach to Mann&apos;s (1983) NIGEL system. NIGEL begins at the left hand side of the network and works its way towards the right. It starts by choosing the feature clause. Then it sees that it must choose between finite and non-finite. There is a semantic &apos;choice-expert&apos; associated with this system which cannot make the choice without specific information about the context and the communicative goals. The choice expert gains this information by passing messages to the &apos;environment&apos;. In this case the answer returned from the environment will indicate that finite should be chosen. Another choice expert will now choose betw</context>
</contexts>
<marker>1983</marker>
<rawString>Hayes-Roth,F., Waterman,D., Lenat,D., (eds.) Building Expert Systems. Addison-Wesley, London, 1983.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Stenton</author>
</authors>
<date>1980</date>
<booktitle>Terms in Systemic</booktitle>
<publisher>Batsford Academic,</publisher>
<location>London,</location>
<marker>Stenton, 1980</marker>
<rawString>deJoia,A. Linguistics. &amp; Stenton,A. Terms in Systemic Batsford Academic, London, 1980.</rawString>
</citation>
<citation valid="true">
<date>1976</date>
<booktitle>Halliday: System and Function</booktitle>
<editor>in Language. (ed.)</editor>
<location>Oxford, London,</location>
<marker>1976</marker>
<rawString>in Language. (ed.) Halliday: System and Function Oxford, London, 1976.</rawString>
</citation>
<citation valid="false">
<authors>
<author>W Halliday Mann</author>
<author>M A K</author>
</authors>
<title>Systemic Grammar of English,</title>
<booktitle>S.G. Clause Systems&amp;quot;. From the PENMAN system, Information Sciences Institute, USC.</booktitle>
<marker>Mann, K, </marker>
<rawString>Mann,W./Halliday,M.A.K. &amp;quot;Systemic Grammar of English, S.G. Clause Systems&amp;quot;. From the PENMAN system, Information Sciences Institute, USC.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W Mann</author>
<author>C Matthiessen</author>
</authors>
<title>Nigel: A Systemic Grammar for Text Generation&amp;quot;. RR-83-105, Information Sciences Institute,</title>
<date>1983</date>
<location>USC.</location>
<marker>Mann, Matthiessen, 1983</marker>
<rawString>Mann,W. &amp; Matthiessen,C. &amp;quot;Nigel: A Systemic Grammar for Text Generation&amp;quot;. RR-83-105, Information Sciences Institute, USC. 1983.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Monaghan</author>
</authors>
<title>The Neo-Firthian Tradition and its Contribution to General Linguistics.</title>
<date>1979</date>
<publisher>Max Niemeyer Verlag,</publisher>
<location>Tubingen,</location>
<marker>Monaghan, 1979</marker>
<rawString>Monaghan,J. The Neo-Firthian Tradition and its Contribution to General Linguistics. Max Niemeyer Verlag, Tubingen, 1979.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Stefik</author>
<author>J Aikins</author>
<author>R Balzer</author>
<author>J Benoit</author>
<author>L Birnbaum</author>
<author>F Hayes-Roth</author>
<author>E Sacerdoti</author>
</authors>
<title>The architecture of expert systems.&amp;quot;</title>
<date>1983</date>
<journal>In (Hayes-Roth</journal>
<contexts>
<context position="15618" citStr="Stefik et al., 1983" startWordPosition="2511" endWordPosition="2514"> approach outlined in this paper greatly reduces the number of explicit choices. The reason these choices are avoided here is that the problem solving process is goal-directed. The semantic stratum chooses some features from the right hand side of the network, which greatly reduces the number of possible paths through the network from the very start. It could be argued that this kind of goaldirected search is non-deterministic because systems may have disjunctive entry conditions. &apos; There is, however, an Al problem solving technique which has been developed for this purpose: least commitment (Stefik et al., 1983). Least commitment is simply the principle of not making any choices until absolutely necessary. Whenever a disjunctive entry condition is encountered, a decision must be made about which subgoal to set. There is no requirement that the decision be made at that Particular instant, so it is suspended until one of the subgoals is set as part of another chain in inference (gratuitously solving the original problem). Of course there will be cases where none of the subgoals (entry conditions) are part of another inference. In these cases, it must be assumed that the semantics will preselect a featu</context>
</contexts>
<marker>Stefik, Aikins, Balzer, Benoit, Birnbaum, Hayes-Roth, Sacerdoti, 1983</marker>
<rawString>Stefik,M., Aikins,J., Balzer,R., Benoit,J., Birnbaum,L., Hayes-Roth,F., Sacerdoti,E., &amp;quot;The architecture of expert systems.&amp;quot; In (Hayes-Roth et al., 1983), 1983.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Winograd</author>
</authors>
<title>Language as a Cognitive Process.</title>
<date>1983</date>
<publisher>Addison-Wesley,</publisher>
<location>London,</location>
<contexts>
<context position="2241" citStr="Winograd, 1983" startWordPosition="350" endWordPosition="351">s goal directed problem solving techniques to be applied directly to the grammar. One of the most novel and important aspects of this approach is that it is compatible with the semantic stratum described in the systemic theory: a system network organized around the idea of &apos;register&apos; (Halliday, 1978). The semantic stratum and its relationship to the grammar will be discussed next. Some advantages of the approach will then be put forward. * Many thanks to my supervisors Graeme Ritchie and Austin Tate. This work was supported in part by an ORS award. ** For an overview of systemic grammar, see (Winograd, 1983) Chapter 6. Finally, the current status of the project will be described, including sample output generated from a large grammar. THE FUNDAMENTAL RELATIONSHIP 1. &amp;quot;The central nature of intelligent Problem solving is that a system must construct its solution selectively and efficiently from a space of alternatives.&amp;quot; (Hayes-Roth et al., 1983) 2. &amp;quot;We shall define language as &apos;meaning potential&apos;: that is as sets of options or alternatives, in meaning, that are available to the speaker-hearer.&amp;quot; (Halliday in deJoia et al., 1980, #572) Compare these two quotations. Notice that both Al problem solving</context>
<context position="8057" citStr="Winograd, 1983" startWordPosition="1292" endWordPosition="1293">e statements, how language can be used to relate &apos;who did what to whom&apos;, and how language ties itself to previous discourse. ... mass-subject ... singular-subject Figure 2. A gate (Mann/Halliday). In Figure 2 the curly bracket means AND, and the square bracket means OR. A gate also may have realization rules. Here the Finite element is constrained to be some form of &apos;does&apos;: &amp;quot;does&amp;quot;, &amp;quot;does not&amp;quot; or &amp;quot;doesn&apos;t&amp;quot;. The significant difference between systems and gates is that gates do not Involve a choice. * This analogy was probably first made by Firth (1957) and has been used several times since see (Winograd, 1983, p.287) does &apos;Finite : does&apos; 252 interrogative indicative I finite I marked-decl-theme declarative imperative I unmarked -decl-theme non-finite I Subject/Theme 1 clause- &lt; middle effective operative 1 Agent/Subject I receptive theme I # Theme I / : conflation # : boundary : adjacency Figure 3. A grammar excerpt. Now consider these two constructs from a problem solving ooint of view. A feature that is part of a system can be interpreted as a condition/effect rule. The conditions are simply the entry conditions of the system; the effects are choosing the feature, and doing whatever the realizat</context>
<context position="20096" citStr="Winograd, 1983" startWordPosition="3198" endWordPosition="3199">ds involve an Al problem solver that does the extra-linguistic work and perhaps the high-level &apos;text-planning&apos;, then passes a specification off to a special-purpose mechanism that processes the grammar. Here the Al problem solver can directly process the grammar, eliminating the special purpose component, and avoiding the kind of message passing that NIGEL, for example, must do. PROJECT STATUS At present, this approach to text generation is being tested on a large systemic grammar. The grammar has been collected from a variety of sources (Mann/Halliday) (Kress, 1976) (Halliday &amp; Hasan, 1976) (Winograd, 1983), and contains about six hundred grammatical features. Fragments of grammar usually appear in the linguistic literature as &apos;system networks&apos;. These are entered as LISP data structures, and translated by a three page LISP program into OPS5 production rules. (0PS5 is a widely used production system that was used to implement, for example, R1 (Gaschnig et al., 1983)J. Once the grammar is in the form of OPS5 rules, OPS5 can perform forward and backward chaining directly. The rest of the system consists mostly of OPS5 rules to act on the realization rules of the grammar, and to outout the text as i</context>
</contexts>
<marker>Winograd, 1983</marker>
<rawString>Winograd,T. Language as a Cognitive Process. Addison-Wesley, London, 1983.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>