<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.008951">
<note confidence="0.493191">
SCHN ¨APPER: A Web Toolkit for Exploratory Relation Extraction
Thilo Michael and Alan Akbik
Technische Universit¨at Berlin
Einsteinufer 17, 10587 Berlin
{thilo.michael,alan.akbik}@tu-berlin.de
</note>
<sectionHeader confidence="0.99049" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.9780044375">
We present SCHN ¨APPER, a web toolkit for
Exploratory Relation Extraction (ERE).
The tool allows users to identify relations
of interest in a very large text corpus in an
exploratory and highly interactive fashion.
With this tool, we demonstrate the ease-
of-use and intuitive nature of ERE, as well
as its applicability to large corpora. We
show how users can formulate exploratory,
natural language-like pattern queries that
return relation instances. We also show
how automatically computed suggestions
are used to guide the exploration process.
Finally, we demonstrate how users create
extractors with SCHN ¨APPER once a rela-
tion of interest is identified.
</bodyText>
<sectionHeader confidence="0.999514" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999911262295082">
Relation Extraction (RE) is the task of extract-
ing instances of semantic relations between enti-
ties in unstructured data such as natural language
text. Common examples are the BORNIN relation-
ship between a person and its birthplace, or the
CHILDOF relation between a parent and its child.
A principal challenge in RE is how to build high
quality extractors for a given set of relations at
minimal effort.
One line of approaches to RE are rule-based,
where users manually define rule-sets consisting
of extraction patterns that if observed point to in-
stances of a relation. Advantages associated with
rule-based RE are a high level of direct control
over the extraction process: Ideally, rule-writers
build interpretable and maintainable rule-sets, en-
abling both the extension and error analysis of
rule-based extractors (Chiticariu et al., 2013). In-
deed, in a number of recent works, rule-based
RE approaches have been found to outperform
previous machine-learning based state-of-the-art
systems, for tasks such as temporal expression
detection (Str¨otgen and Gertz, 2010) and Ope-
nIE (Del Corro and Gemulla, 2013).
Exploratory search for relations. Recently, in
(Akbik et al., 2014), we introduced the paradigm
of Exploratory Relation Extraction (ERE). We ar-
gued that workflows and tooling can be developed
in such a way as to enable an interactive and open
ended search for relations. With ERE, relations
therefore do not need to be precisely defined in
advance. Rather, users can start a process of ex-
ploration for interesting relations even if their in-
formation needs are only vaguely defined.
We outlined key ideas in order to enable the
exploratory workflow: First, extraction patterns
should be very easy to define and quick to test,
much in the same way as exploratory keyword
queries in a web search engine (Marchionini,
2006). Second, the exploration process should
be guided through suggestions computed from
the available data and previous user interactions.
Third, there should be a high level of interactivity.
Appropriate tooling is therefore required.
Contributions. With this demo, we present
SCHN ¨APPER, a web-based tool for ERE that
demonstrates the incremental, data-guided work-
flow introduced in (Akbik et al., 2014). The demo
is intended to underline a central claim of ERE,
which is that non-experts can use it to easily ex-
plore a corpus for relational information and build
extractors. Additionally, by using a large portion
of the CLUEWEB091 corpus as dataset, we aim to
highlight the applicability of such an approach to
very large datasets.
Paper outline. We first give a quick overview over
the ERE workflow in Section 2. We then present
SCHN ¨APPER, our web interface (Section 3) and
walk through an example workflow with the tool.
We then briefly give an overview over related work
and give an outlook of possible future additions to
</bodyText>
<footnote confidence="0.991422">
1http://www.lemurproject.org/clueweb09/index.php
</footnote>
<page confidence="0.988657">
67
</page>
<note confidence="0.703473">
Proceedings of ACL-IJCNLP 2015 System Demonstrations, pages 67–72,
Beijing, China, July 26-31, 2015. c�2015 ACL and AFNLP
</note>
<figure confidence="0.989908454545455">
1. Launch Initial Query
Spacecraft
X_Type
Initial Query
Y_Type
Pattern
2. Select from Suggestions
Y_Type Suggestions
Organization
Celestrial_Object
Location
</figure>
<figureCaption confidence="0.999997">
Figure 1: Illustration of the Exploratory Relation Extraction example workflow discussed in Section 2.2.
</figureCaption>
<bodyText confidence="0.633857">
the toolkit and the method itself.
</bodyText>
<sectionHeader confidence="0.99548" genericHeader="method">
2 Exploratory Relation Extraction
</sectionHeader>
<bodyText confidence="0.999761">
We demonstrate an approach to finding binary re-
lations in text that has been proposed in (Akbik et
al., 2014). Each relation holds between two enti-
ties: a subject and an object entity. Users explore
a corpus for information by selecting and compos-
ing extraction patterns.
</bodyText>
<subsectionHeader confidence="0.990526">
2.1 Pattern Language
</subsectionHeader>
<bodyText confidence="0.965576">
Extraction patterns consist of two components:
</bodyText>
<listItem confidence="0.9995133">
1. Dependency subtrees. The first component
is the lexico-syntactic pattern that connects two
entities in a sentence. Here, we allow arbitrary
subtrees in a sentence’s dependency tree, as long
as they span two entities of interest. To gener-
alize the patterns, they are stemmed and the two
entities are replaced by the placeholders “[X]
and [Y]”. Examples of subtree patterns are “[X]
and [Y] married” and “[X] ’s father
[Y]”2. However, since any subtree is a possible
pattern, many subtrees with less obvious meanings
are also possible; in the end, it is up to the user to
make the decision which patterns are relevant and
which are not.
2. Entity type restrictions Optionally, patterns
may be further restricted to match only entities of
certain fine-grained types, such as PERSON, LO-
CATION, LANGUAGE or MOVIE. The type restric-
tions may be set individually for each subject and
object entities. Since the subject is replaced with
</listItem>
<bodyText confidence="0.9172982">
2For the purpose of readability, we do not display the deep
syntactic information from the subtrees. Instead, we only
show the lexical portion of the patterns. Here, some verbs,
such as participles and gerunds, are not stemmed for read-
ability purposes.
the placeholder [X] in a pattern, its restriction is
referred to as X Type, while the object restriction
is referred to as Y Type.
Preemptive pattern extraction. Following
the idea of preemptive Information Extrac-
tion (Shinyama and Sekine, 2006), we pre-extract
and store all subtrees and entity types from a given
corpus for each sentence with at least two named
entities. This allows not only fast retrieval of
matching entity pairs for a given set of subtrees
and type restrictions, but also allows us to com-
pute pattern correlations over the entire dataset for
the presently selected setup. In the next section,
we show how fast retrieval and pattern correlations
are used to aid the exploration process.
</bodyText>
<subsectionHeader confidence="0.998489">
2.2 Example Workflow
</subsectionHeader>
<bodyText confidence="0.99981252631579">
We illustrate the exploration process with an ex-
ample workflow, the first steps of which are de-
picted in Figure 1. Assume that our user is inter-
ested in relations that involve “spacecraft”, but is
unsure of what types of relations may be found for
such entities in the given corpus.
Initial query (1). The user starts by issuing an ini-
tial query that is strongly underspecified: By set-
ting X Type to SPACECRAFT and leaving the Pat-
tern and Y Type fields in the query unspecified, the
user searches for all sentences that contain at least
one entity of the desired type. At this point, there
are no other restrictions to the query with regards
to patterns or object entity types.
Explore by reacting to suggestions (2). After is-
suing the query, the system responds with both a
list of sentences that match the query (not illus-
trated in Figure 1) and well as, more importantly,
suggestions for patterns and object entity type re-
</bodyText>
<page confidence="0.996704">
68
</page>
<bodyText confidence="0.999934190476191">
strictions that correlate with the user query.
The user can now choose from the suggestions:
For instance, by selecting the object type LOCA-
TION and the pattern “[X] launched from
[Y]”, the user may direct the exploration process
towards relations that indicate locations (cities,
countries, sites) from which a spacecraft was
launched. Similarly, by choosing ORGANIZATION
as object type and “[X] built by [Y]” as
pattern, the user may select organizations (con-
tractors, space agencies) that constructed or de-
signed spacecraft as the focus of interest.
In the example shown in Figure 1, the user in-
stead selects the object type CELESTIALOBJECT
and the pattern “[X] arrive at [Y]”. This
directs the search towards relations that indicate
spacecraft missions to celestial objects.
User interactions (3). This user interaction up-
dates both the query as well as the suggestions
for patterns and restrictions. Now pattern sug-
gestions are more specific to the previous selec-
tion; For instance, by selecting either the pattern
“[X] orbit [Y]” or “[X] fly by [Y]”,
the user can specify relations for spacecraft that
have achieved orbit around celestial objects, or
have made flybys. By following a process of
querying, inspecting results, selecting and unse-
lecting subtrees and restrictions, the user can in-
teractively explore the given corpus for relations
of interest. Once an interesting relation is iden-
tified, the user utilizes the same approach to build
an extractor by compiling a list of relevant patterns
from the suggestions. Typically, the more patterns
a user selects, the higher the recall of the created
extractor will be.
Store extractor. When the user has identified an
interesting relation and selected a list of relevant
patterns, she can export the extraction results (i.e.
all relation instances found by the extractor). The
user can also save the extractor and provide a de-
scriptive name for the relation for possible later
reuse.
</bodyText>
<sectionHeader confidence="0.995396" genericHeader="method">
3 Web Demonstration
</sectionHeader>
<bodyText confidence="0.965249">
We now present SCHN ¨APPER3, our web toolkit for
Exploratory Relation Extraction.
</bodyText>
<footnote confidence="0.9951124">
3The tool was named after the Petroicidae famliy of birds,
which in German are called Schn¨apper. This name stems
from the verb schnappen (Schmitthenner, 1837), which trans-
lates as “to grab” or “to catch”. We found this fitting since
the tool is used to “grab” or “catch” information.
</footnote>
<subsectionHeader confidence="0.990287">
3.1 Web Interface
</subsectionHeader>
<bodyText confidence="0.999920653061225">
In order to make the use of SCHN ¨APPER as
straightforward as possible, the user interface is
clearly structured into four panels that fit onto one
screen. The top half of the screen consists of three
panels in which the user can select patterns and en-
tity type restrictions. The bottom half of the screen
is the result panel which displays a sample of ex-
traction results for the currently selected patterns
and entity type restrictions. See Figure 2 for the
screen and a breakdown of the panels, which we
explain in more detail in the following:
Pattern panel (1) Of the three panels in the up-
per half of the screen, the pattern panel assumes
the center stage. Here, the user can enter keywords
in the search field to find appropriate patterns. If
at least one user interaction has already been made
(e.g. one pattern or type restriction selected), a list
of pattern suggestions is presented in gray. Sin-
gle clicking on a pattern suggestion gives a small
number of example sentences and entity pairs for
which this pattern holds (this is illustrated in field
(6) in Figure 2). Double-clicking on a pattern adds
it to the extractor; it is then highlighted blue and
suggestions as well as the result panel are updated
to reflect the selection. By double-clicking on a
selected pattern, users may remove it again from
the selection.
Entity type restriction panels (2) Extractors
may also have entity type restrictions which re-
strict lexico-syntactic patterns to only apply to en-
tities of certain types. The top right and top left
panels are used to define restrictions for the sub-
ject and object of a binary relation respectively.
Here, users have a choice between three differ-
ent ways of selecting entity type restrictions. The
first and default option is to use FREEBASE entity
types (Bollacker et al., 2008). I.e. the user can
select the subject of a relation to be only of the
FREEBASE type SPACECRAFT, ORGANIZATION
or CELESTIALOBJECT.
The user can also restrict a relation to one spe-
cific entity. For instance, by restricting the object
of a BORNIN relation to be the country “Finland”,
the extractor will only find persons born in Fin-
land.
Finally, the user can restrict entities to those
found with a previously created extractor. Users
can embed extractors in this way to find more
complex relations. For instance, an extractor that
</bodyText>
<page confidence="0.998941">
69
</page>
<figureCaption confidence="0.953837">
Figure 2: Screen capture of the SCHN ¨APPER tool showing the pattern panel (1) with an activated pattern
</figureCaption>
<bodyText confidence="0.975162575757576">
showing a list of example sentences (6), the entity type restriction panels (2) and the result panel (3).
The permalink button (4) and the download button (S) are located at the bottom.
finds “Persons born in Finland” may be used to re-
strict the subject entity of another extractor. The
other extractor can then find a relation between
“Persons born in Finland” and, for example, en-
tities of type BUILDING (“Buildings designed by
persons from Finland”).
Similar to the pattern panel, double-clicking is
used to select or unselect type restrictions. Upon
each interaction, the suggestions as well as the re-
sult panel are updated to reflect the current selec-
tion.
Result panel (3) The lower half of the screen is
the result panel which lists a set of entity pairs that
are found with the presently selected patterns and
restrictions. Each entity pair is displayed along
with the sentence that matches the pattern. By
clicking the magnifying glass symbol next to an
entity pair, more details are shown, including the
entity pair’s FREEBASE ids and a list of sentences
that match the selected patterns.
Storing and exporting extractors After finish-
ing building an extractor, users can export the
setup as a JSON by clicking the download button
in the lower right corner of the screen (see field
(5) in Figure 2). This exports the selected patterns
and restrictions, together with a result list of entity
pairs found with the extractor. In addition, users
can generate a “permalink” by clicking the button
in the lower left corner of the screen (see field (4)
in Figure 2). This allows users to generate links to
created extractors and share them electronically.
</bodyText>
<subsectionHeader confidence="0.998498">
3.2 Example Usage
</subsectionHeader>
<bodyText confidence="0.991086">
We now briefly give an example of using the tool.
Assume a user is interested in a relation between
persons and the companies they founded.
There are several entry points the user may
choose from. For instance, the user might search
for appropriate entity types in the X Type and
Y Type panels. Another option is to start by look-
ing for appropriate patterns. For this, the user can
use the search box in the pattern panel (1) to search
for the general term “found”. This results in a
list of patterns being displayed, which includes the
pattern “[X] found [Y]”. By single-clicking
on it, the user can see a list of sentences that in-
clude this pattern. This is illustrated in field (6) in
Figure 2.
The user activates the pattern by double-
clicking it. He sees the output of the extractor
in the result panel (3) as well as patterns and en-
</bodyText>
<page confidence="0.995356">
70
</page>
<bodyText confidence="0.999576666666667">
tity types that are suggested based on the current
selection. Scanning through the result panel, the
user finds that while many matching sentences do
indeed express the desired relation (like “Pierre
Omidyar founded eBay”), some others do not
(“Snape found Sirius Black”).
The tool however also presents three sets of sug-
gestions that the user can use to refine the pat-
terns. For instance, for both X Type and Y Type a
ranked list of suggestions highlighted gray appears
(2). As illustrated in Figure 2, it suggests PER-
SON as X Type and ORGANIZATION as Y Type.
The user can affirm suggestions by double click-
ing on them. When selecting ORGANIZATION as
Y Type, the result panel is updated to reflect the
most recent changes. Scanning through the results
the user sees that the extraction quality has greatly
improved as there are far fewer false positives in
the list.
The user may now try to further improve the ex-
tractor by selecting more specific patterns. The
tool suggests the pattern “[X] be founder
of [Y]”, which more accurately describes the
relation the user wants to extract. Again by single-
clicking on the suggestion, the user can see exam-
ple sentences that match this pattern, as well as the
selected entity type restrictions. Double-clicking
on the pattern adds it to the extractor, which now
consists of two patterns. With multiple patterns
selected, the tool is now able to suggest patterns
more accurately, offering patterns such as “[Y]
founded by [X]”, “[X] start [Y]” and
“[X] co-found [Y]”. By selecting them and
implicitly rejecting those suggestions that do not
reflect the desired relation (like the correlated
patterns “[X] president of [Y]” or “[X]
CEO of [Y]”), the user incrementally creates
an extractor.
After multiple iterations of selecting suggested
patterns and entity type restrictions the user is able
to download the results of the extractor by using
the download button (5) at the bottom of the page.
</bodyText>
<subsectionHeader confidence="0.999684">
3.3 Implementation Details
</subsectionHeader>
<bodyText confidence="0.999958583333334">
We use CLUEWEB09 as corpus and make use of
FACC1 annotations (Gabrilovich et al., 2013) to
determine entity mentions and their FREEBASE
types. We extract all English sentences that con-
tain at least 2 FREEBASE entities, yielding over
160 million sentences. We then parse these sen-
tences using the CLEARNLP pipeline (Choi and
McCallum, 2013) and preemptively generate all
subtrees for all entity pairs in all sentences. To-
gether with information on the entity types, we
store all information in a Lucene index for fast re-
trieval.
</bodyText>
<subsectionHeader confidence="0.983823">
3.4 Hands-on Demonstration
</subsectionHeader>
<bodyText confidence="0.999980083333333">
We plan a hands-on demonstration in which
users work with SCHN ¨APPER to explore the
CLUEWEB09 corpus for relations of interest. Our
purpose is twofold: One the one hand we would
like to make the case for the simplicity and in-
tuitive nature of the proposed approach. One the
other hand, we would like to gather feedback from
the NLP community for possible future improve-
ments to the approach. In particular some of the
more advanced features such as embedding extrac-
tors within other extractors may be interesting to
discuss in a hands-on demo4.
</bodyText>
<sectionHeader confidence="0.998606" genericHeader="method">
4 Previous Work
</sectionHeader>
<bodyText confidence="0.999760481481482">
Recent work in the field of rule-based RE has in-
vestigated workflows and tooling to facilitate the
creation of extractors. (Li et al., 2012) presented a
wizard-like approach to guide users in the process
of building extractors. In (Akbik et al., 2013), we
presented an example-driven workflow that allows
even users who are unfamiliar with NLP to write
extractors using lexico-syntactic patterns over de-
pendency trees. Similarly, (Grishman and He,
2014) create a toolkit for persons who are experts
in a domain of interest, but not in NLP. Users cre-
ate extractors for pre-defined entities and relations
by seeding example instances in a semi-supervised
fashion. (Gupta and Manning, 2014) use a similar
bootstrapping approach and create a tool for vi-
sualizing learned patterns for diagnostic purposes.
Finally, (Freedman et al., 2011) focus on reduc-
ing effort in a user-driven process by including el-
ements from active learning and bootstrapping, but
target their tool at NLP experts.
Unlike the approach presented with this demo,
these approaches are mostly intended for tradi-
tional RE in which relations of interest are spec-
ified in advance. With this demo, we instead sup-
port an exploratory workflow in which relations
of interest may be discovered through user inter-
actions with available data at little effort.
</bodyText>
<footnote confidence="0.999231">
4The tool is also publicly available online. It can be
reached through Alan Akbik’s web page.
</footnote>
<page confidence="0.99846">
71
</page>
<sectionHeader confidence="0.999684" genericHeader="conclusions">
5 Outlook
</sectionHeader>
<bodyText confidence="0.999966227272727">
While SCHN ¨APPER is currently focused on binary
relations only, we are investigating the application
of comparable workflows at the entity level. Ide-
ally, we would like to be able to create extractors
that find named entities of custom types and em-
bed them into custom relation extractors. While,
as the demo shows, it is already possible to em-
bed extractors into other extractors, more research
is required fully develop the process of creating
entity extractors, which possibly includes develop-
ing a different pattern language for the entity level.
With more extensive capabilities of creating cus-
tom entity extractors, such tooling could conceiv-
ably be used to use the approach for knowledge
base population tasks (Surdeanu and Ji, 2014).
The approach could be also used to quickly cre-
ate custom knowledge bases for specialized topics
such as the biomedical domain (Hunter and Co-
hen, 2006). Another point of interest is that, since
the tooling is Web-based, collaborative aspects of
creating custom knowledge bases can be investi-
gated in this context.
</bodyText>
<sectionHeader confidence="0.998927" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999858743902439">
Alan Akbik, Oresti Konomi, and Michail Melnikov.
2013. Propminer: A workflow for interactive infor-
mation extraction and exploration using dependency
trees. In ACL System Demonstrations. Association
for Computational Linguistics.
Alan Akbik, Thilo Michael, and Christoph Boden.
2014. Exploratory relation extraction in large text
corpora. In COLING 2014, 25th International Con-
ference on Computational Linguistics, Proceedings
of the Conference: Technical Papers, August 23-29,
2014, Dublin, Ireland, pages 2087–2096.
Kurt Bollacker, Colin Evans, Praveen Paritosh, Tim
Sturge, and Jamie Taylor. 2008. Freebase: a col-
laboratively created graph database for structuring
human knowledge. In Proceedings of the 2008 ACM
SIGMOD international conference on Management
of data, pages 1247–1250. ACM.
Laura Chiticariu, Yunyao Li, and Frederick R Reiss.
2013. Rule-based information extraction is dead!
long live rule-based information extraction systems!
In Proceedings of the 2013 Conference on Empiri-
cal Methods in Natural Language Processing, pages
827–832.
Jinho D. Choi and Andrew McCallum. 2013.
Transition-based dependency parsing with selec-
tional branching. In Proceedings of the 51st Annual
Meeting of the Association for Computational Lin-
guistics.
Luciano Del Corro and Rainer Gemulla. 2013.
Clausie: clause-based open information extraction.
In Proceedings of the 22nd international conference
on World Wide Web, pages 355–366. International
World Wide Web Conferences Steering Committee.
Marjorie Freedman, Lance Ramshaw, Elizabeth
Boschee, Ryan Gabbard, Gary Kratkiewicz, Nico-
las Ward, and Ralph Weischedel. 2011. Extreme
extraction: machine reading in a week. In Proceed-
ings of the Conference on Empirical Methods in Nat-
ural Language Processing, pages 1437–1446. Asso-
ciation for Computational Linguistics.
Evgeniy Gabrilovich, Michael Ringgaard, and Amar-
nag Subramanya. 2013. FACC1: freebase anno-
tation of ClueWeb corpora, version 1 (release date
2013-06-26, format version 1, correction level 0).
Ralph Grishman and Yifan He. 2014. An informa-
tion extraction customizer. In Text, Speech and Dia-
logue, pages 3–10. Springer.
Sonal Gupta and Christopher D Manning. 2014.
Spied: Stanford pattern-based information extrac-
tion and diagnostics. Sponsor: Idibon, page 38.
Lawrence Hunter and K Bretonnel Cohen. 2006.
Biomedical language processing: what’s beyond
pubmed? Molecular cell, 21(5):589–594.
Yunyao Li, Laura Chiticariu, Huahai Yang, Frederick R
Reiss, and Arnaldo Carreno-fuentes. 2012. Wizie: a
best practices guided development environment for
information extraction. In Proceedings of the ACL
2012 System Demonstrations, pages 109–114. As-
sociation for Computational Linguistics.
Gary Marchionini. 2006. Exploratory search: from
finding to understanding. Communications of the
ACM, 49(4):41–46.
Friedrich Schmitthenner. 1837. Kurzes deutsches
W¨orterbuch f¨ur Etymologie, Synonymik und Or-
thographie. Jonghaus.
Yusuke Shinyama and Satoshi Sekine. 2006. Preemp-
tive information extraction using unrestricted rela-
tion discovery. In Proceedings of the main confer-
ence on Human Language Technology Conference
of the North American Chapter of the Association of
Computational Linguistics, pages 304–311. Associ-
ation for Computational Linguistics.
Jannik Str¨otgen and Michael Gertz. 2010. Heideltime:
High quality rule-based extraction and normaliza-
tion of temporal expressions. In Proceedings of the
5th International Workshop on Semantic Evaluation,
pages 321–324. Association for Computational Lin-
guistics.
Mihai Surdeanu and Heng Ji. 2014. Overview of the
english slot filling track at the tac2014 knowledge
base population evaluation. In Proc. Text Analysis
Conference (TAC2014).
</reference>
<page confidence="0.998725">
72
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.283123">
<title confidence="0.99989">A Web Toolkit for Exploratory Relation Extraction</title>
<author confidence="0.943296">Michael</author>
<affiliation confidence="0.667233">Technische Universit¨at</affiliation>
<address confidence="0.339055">Einsteinufer 17, 10587</address>
<abstract confidence="0.990272941176471">present a web toolkit for Relation Extraction The tool allows users to identify relations of interest in a very large text corpus in an exploratory and highly interactive fashion. With this tool, we demonstrate the easeof-use and intuitive nature of ERE, as well as its applicability to large corpora. We show how users can formulate exploratory, natural language-like pattern queries that return relation instances. We also show how automatically computed suggestions are used to guide the exploration process. Finally, we demonstrate how users create with a relation of interest is identified.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Alan Akbik</author>
<author>Oresti Konomi</author>
<author>Michail Melnikov</author>
</authors>
<title>Propminer: A workflow for interactive information extraction and exploration using dependency trees.</title>
<date>2013</date>
<booktitle>In ACL System Demonstrations. Association for Computational Linguistics.</booktitle>
<contexts>
<context position="18072" citStr="Akbik et al., 2013" startWordPosition="2966" endWordPosition="2969">e case for the simplicity and intuitive nature of the proposed approach. One the other hand, we would like to gather feedback from the NLP community for possible future improvements to the approach. In particular some of the more advanced features such as embedding extractors within other extractors may be interesting to discuss in a hands-on demo4. 4 Previous Work Recent work in the field of rule-based RE has investigated workflows and tooling to facilitate the creation of extractors. (Li et al., 2012) presented a wizard-like approach to guide users in the process of building extractors. In (Akbik et al., 2013), we presented an example-driven workflow that allows even users who are unfamiliar with NLP to write extractors using lexico-syntactic patterns over dependency trees. Similarly, (Grishman and He, 2014) create a toolkit for persons who are experts in a domain of interest, but not in NLP. Users create extractors for pre-defined entities and relations by seeding example instances in a semi-supervised fashion. (Gupta and Manning, 2014) use a similar bootstrapping approach and create a tool for visualizing learned patterns for diagnostic purposes. Finally, (Freedman et al., 2011) focus on reducing</context>
</contexts>
<marker>Akbik, Konomi, Melnikov, 2013</marker>
<rawString>Alan Akbik, Oresti Konomi, and Michail Melnikov. 2013. Propminer: A workflow for interactive information extraction and exploration using dependency trees. In ACL System Demonstrations. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Alan Akbik</author>
<author>Thilo Michael</author>
<author>Christoph Boden</author>
</authors>
<title>Exploratory relation extraction in large text corpora.</title>
<date>2014</date>
<booktitle>In COLING 2014, 25th International Conference on Computational Linguistics, Proceedings of the Conference: Technical Papers,</booktitle>
<pages>2087--2096</pages>
<location>Dublin, Ireland,</location>
<contexts>
<context position="2058" citStr="Akbik et al., 2014" startWordPosition="306" endWordPosition="309">relation. Advantages associated with rule-based RE are a high level of direct control over the extraction process: Ideally, rule-writers build interpretable and maintainable rule-sets, enabling both the extension and error analysis of rule-based extractors (Chiticariu et al., 2013). Indeed, in a number of recent works, rule-based RE approaches have been found to outperform previous machine-learning based state-of-the-art systems, for tasks such as temporal expression detection (Str¨otgen and Gertz, 2010) and OpenIE (Del Corro and Gemulla, 2013). Exploratory search for relations. Recently, in (Akbik et al., 2014), we introduced the paradigm of Exploratory Relation Extraction (ERE). We argued that workflows and tooling can be developed in such a way as to enable an interactive and open ended search for relations. With ERE, relations therefore do not need to be precisely defined in advance. Rather, users can start a process of exploration for interesting relations even if their information needs are only vaguely defined. We outlined key ideas in order to enable the exploratory workflow: First, extraction patterns should be very easy to define and quick to test, much in the same way as exploratory keywor</context>
<context position="4354" citStr="Akbik et al., 2014" startWordPosition="663" endWordPosition="666">s to 1http://www.lemurproject.org/clueweb09/index.php 67 Proceedings of ACL-IJCNLP 2015 System Demonstrations, pages 67–72, Beijing, China, July 26-31, 2015. c�2015 ACL and AFNLP 1. Launch Initial Query Spacecraft X_Type Initial Query Y_Type Pattern 2. Select from Suggestions Y_Type Suggestions Organization Celestrial_Object Location Figure 1: Illustration of the Exploratory Relation Extraction example workflow discussed in Section 2.2. the toolkit and the method itself. 2 Exploratory Relation Extraction We demonstrate an approach to finding binary relations in text that has been proposed in (Akbik et al., 2014). Each relation holds between two entities: a subject and an object entity. Users explore a corpus for information by selecting and composing extraction patterns. 2.1 Pattern Language Extraction patterns consist of two components: 1. Dependency subtrees. The first component is the lexico-syntactic pattern that connects two entities in a sentence. Here, we allow arbitrary subtrees in a sentence’s dependency tree, as long as they span two entities of interest. To generalize the patterns, they are stemmed and the two entities are replaced by the placeholders “[X] and [Y]”. Examples of subtree pat</context>
</contexts>
<marker>Akbik, Michael, Boden, 2014</marker>
<rawString>Alan Akbik, Thilo Michael, and Christoph Boden. 2014. Exploratory relation extraction in large text corpora. In COLING 2014, 25th International Conference on Computational Linguistics, Proceedings of the Conference: Technical Papers, August 23-29, 2014, Dublin, Ireland, pages 2087–2096.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kurt Bollacker</author>
<author>Colin Evans</author>
<author>Praveen Paritosh</author>
<author>Tim Sturge</author>
<author>Jamie Taylor</author>
</authors>
<title>Freebase: a collaboratively created graph database for structuring human knowledge.</title>
<date>2008</date>
<booktitle>In Proceedings of the 2008 ACM SIGMOD international conference on Management of data,</booktitle>
<pages>1247--1250</pages>
<publisher>ACM.</publisher>
<contexts>
<context position="11584" citStr="Bollacker et al., 2008" startWordPosition="1866" endWordPosition="1869">as the result panel are updated to reflect the selection. By double-clicking on a selected pattern, users may remove it again from the selection. Entity type restriction panels (2) Extractors may also have entity type restrictions which restrict lexico-syntactic patterns to only apply to entities of certain types. The top right and top left panels are used to define restrictions for the subject and object of a binary relation respectively. Here, users have a choice between three different ways of selecting entity type restrictions. The first and default option is to use FREEBASE entity types (Bollacker et al., 2008). I.e. the user can select the subject of a relation to be only of the FREEBASE type SPACECRAFT, ORGANIZATION or CELESTIALOBJECT. The user can also restrict a relation to one specific entity. For instance, by restricting the object of a BORNIN relation to be the country “Finland”, the extractor will only find persons born in Finland. Finally, the user can restrict entities to those found with a previously created extractor. Users can embed extractors in this way to find more complex relations. For instance, an extractor that 69 Figure 2: Screen capture of the SCHN ¨APPER tool showing the patte</context>
</contexts>
<marker>Bollacker, Evans, Paritosh, Sturge, Taylor, 2008</marker>
<rawString>Kurt Bollacker, Colin Evans, Praveen Paritosh, Tim Sturge, and Jamie Taylor. 2008. Freebase: a collaboratively created graph database for structuring human knowledge. In Proceedings of the 2008 ACM SIGMOD international conference on Management of data, pages 1247–1250. ACM.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Laura Chiticariu</author>
<author>Yunyao Li</author>
<author>Frederick R Reiss</author>
</authors>
<title>Rule-based information extraction is dead! long live rule-based information extraction systems!</title>
<date>2013</date>
<booktitle>In Proceedings of the 2013 Conference on Empirical Methods in Natural Language Processing,</booktitle>
<pages>827--832</pages>
<contexts>
<context position="1721" citStr="Chiticariu et al., 2013" startWordPosition="256" endWordPosition="259">birthplace, or the CHILDOF relation between a parent and its child. A principal challenge in RE is how to build high quality extractors for a given set of relations at minimal effort. One line of approaches to RE are rule-based, where users manually define rule-sets consisting of extraction patterns that if observed point to instances of a relation. Advantages associated with rule-based RE are a high level of direct control over the extraction process: Ideally, rule-writers build interpretable and maintainable rule-sets, enabling both the extension and error analysis of rule-based extractors (Chiticariu et al., 2013). Indeed, in a number of recent works, rule-based RE approaches have been found to outperform previous machine-learning based state-of-the-art systems, for tasks such as temporal expression detection (Str¨otgen and Gertz, 2010) and OpenIE (Del Corro and Gemulla, 2013). Exploratory search for relations. Recently, in (Akbik et al., 2014), we introduced the paradigm of Exploratory Relation Extraction (ERE). We argued that workflows and tooling can be developed in such a way as to enable an interactive and open ended search for relations. With ERE, relations therefore do not need to be precisely d</context>
</contexts>
<marker>Chiticariu, Li, Reiss, 2013</marker>
<rawString>Laura Chiticariu, Yunyao Li, and Frederick R Reiss. 2013. Rule-based information extraction is dead! long live rule-based information extraction systems! In Proceedings of the 2013 Conference on Empirical Methods in Natural Language Processing, pages 827–832.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jinho D Choi</author>
<author>Andrew McCallum</author>
</authors>
<title>Transition-based dependency parsing with selectional branching.</title>
<date>2013</date>
<booktitle>In Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics.</booktitle>
<contexts>
<context position="17043" citStr="Choi and McCallum, 2013" startWordPosition="2792" endWordPosition="2795"> [Y]”), the user incrementally creates an extractor. After multiple iterations of selecting suggested patterns and entity type restrictions the user is able to download the results of the extractor by using the download button (5) at the bottom of the page. 3.3 Implementation Details We use CLUEWEB09 as corpus and make use of FACC1 annotations (Gabrilovich et al., 2013) to determine entity mentions and their FREEBASE types. We extract all English sentences that contain at least 2 FREEBASE entities, yielding over 160 million sentences. We then parse these sentences using the CLEARNLP pipeline (Choi and McCallum, 2013) and preemptively generate all subtrees for all entity pairs in all sentences. Together with information on the entity types, we store all information in a Lucene index for fast retrieval. 3.4 Hands-on Demonstration We plan a hands-on demonstration in which users work with SCHN ¨APPER to explore the CLUEWEB09 corpus for relations of interest. Our purpose is twofold: One the one hand we would like to make the case for the simplicity and intuitive nature of the proposed approach. One the other hand, we would like to gather feedback from the NLP community for possible future improvements to the a</context>
</contexts>
<marker>Choi, McCallum, 2013</marker>
<rawString>Jinho D. Choi and Andrew McCallum. 2013. Transition-based dependency parsing with selectional branching. In Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Luciano Del Corro</author>
<author>Rainer Gemulla</author>
</authors>
<title>Clausie: clause-based open information extraction.</title>
<date>2013</date>
<booktitle>In Proceedings of the 22nd international conference on World Wide Web,</booktitle>
<pages>355--366</pages>
<institution>International World Wide Web Conferences Steering Committee.</institution>
<contexts>
<context position="1989" citStr="Corro and Gemulla, 2013" startWordPosition="296" endWordPosition="299">onsisting of extraction patterns that if observed point to instances of a relation. Advantages associated with rule-based RE are a high level of direct control over the extraction process: Ideally, rule-writers build interpretable and maintainable rule-sets, enabling both the extension and error analysis of rule-based extractors (Chiticariu et al., 2013). Indeed, in a number of recent works, rule-based RE approaches have been found to outperform previous machine-learning based state-of-the-art systems, for tasks such as temporal expression detection (Str¨otgen and Gertz, 2010) and OpenIE (Del Corro and Gemulla, 2013). Exploratory search for relations. Recently, in (Akbik et al., 2014), we introduced the paradigm of Exploratory Relation Extraction (ERE). We argued that workflows and tooling can be developed in such a way as to enable an interactive and open ended search for relations. With ERE, relations therefore do not need to be precisely defined in advance. Rather, users can start a process of exploration for interesting relations even if their information needs are only vaguely defined. We outlined key ideas in order to enable the exploratory workflow: First, extraction patterns should be very easy to</context>
</contexts>
<marker>Corro, Gemulla, 2013</marker>
<rawString>Luciano Del Corro and Rainer Gemulla. 2013. Clausie: clause-based open information extraction. In Proceedings of the 22nd international conference on World Wide Web, pages 355–366. International World Wide Web Conferences Steering Committee.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Marjorie Freedman</author>
<author>Lance Ramshaw</author>
<author>Elizabeth Boschee</author>
<author>Ryan Gabbard</author>
<author>Gary Kratkiewicz</author>
<author>Nicolas Ward</author>
<author>Ralph Weischedel</author>
</authors>
<title>Extreme extraction: machine reading in a week.</title>
<date>2011</date>
<booktitle>In Proceedings of the Conference on Empirical Methods in Natural Language Processing,</booktitle>
<pages>1437--1446</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<contexts>
<context position="18654" citStr="Freedman et al., 2011" startWordPosition="3055" endWordPosition="3058">ding extractors. In (Akbik et al., 2013), we presented an example-driven workflow that allows even users who are unfamiliar with NLP to write extractors using lexico-syntactic patterns over dependency trees. Similarly, (Grishman and He, 2014) create a toolkit for persons who are experts in a domain of interest, but not in NLP. Users create extractors for pre-defined entities and relations by seeding example instances in a semi-supervised fashion. (Gupta and Manning, 2014) use a similar bootstrapping approach and create a tool for visualizing learned patterns for diagnostic purposes. Finally, (Freedman et al., 2011) focus on reducing effort in a user-driven process by including elements from active learning and bootstrapping, but target their tool at NLP experts. Unlike the approach presented with this demo, these approaches are mostly intended for traditional RE in which relations of interest are specified in advance. With this demo, we instead support an exploratory workflow in which relations of interest may be discovered through user interactions with available data at little effort. 4The tool is also publicly available online. It can be reached through Alan Akbik’s web page. 71 5 Outlook While SCHN </context>
</contexts>
<marker>Freedman, Ramshaw, Boschee, Gabbard, Kratkiewicz, Ward, Weischedel, 2011</marker>
<rawString>Marjorie Freedman, Lance Ramshaw, Elizabeth Boschee, Ryan Gabbard, Gary Kratkiewicz, Nicolas Ward, and Ralph Weischedel. 2011. Extreme extraction: machine reading in a week. In Proceedings of the Conference on Empirical Methods in Natural Language Processing, pages 1437–1446. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Evgeniy Gabrilovich</author>
<author>Michael Ringgaard</author>
<author>Amarnag Subramanya</author>
</authors>
<title>FACC1: freebase annotation of ClueWeb corpora, version 1 (release date 2013-06-26, format version 1, correction level 0).</title>
<date>2013</date>
<contexts>
<context position="16791" citStr="Gabrilovich et al., 2013" startWordPosition="2752" endWordPosition="2755">ring patterns such as “[Y] founded by [X]”, “[X] start [Y]” and “[X] co-found [Y]”. By selecting them and implicitly rejecting those suggestions that do not reflect the desired relation (like the correlated patterns “[X] president of [Y]” or “[X] CEO of [Y]”), the user incrementally creates an extractor. After multiple iterations of selecting suggested patterns and entity type restrictions the user is able to download the results of the extractor by using the download button (5) at the bottom of the page. 3.3 Implementation Details We use CLUEWEB09 as corpus and make use of FACC1 annotations (Gabrilovich et al., 2013) to determine entity mentions and their FREEBASE types. We extract all English sentences that contain at least 2 FREEBASE entities, yielding over 160 million sentences. We then parse these sentences using the CLEARNLP pipeline (Choi and McCallum, 2013) and preemptively generate all subtrees for all entity pairs in all sentences. Together with information on the entity types, we store all information in a Lucene index for fast retrieval. 3.4 Hands-on Demonstration We plan a hands-on demonstration in which users work with SCHN ¨APPER to explore the CLUEWEB09 corpus for relations of interest. Our</context>
</contexts>
<marker>Gabrilovich, Ringgaard, Subramanya, 2013</marker>
<rawString>Evgeniy Gabrilovich, Michael Ringgaard, and Amarnag Subramanya. 2013. FACC1: freebase annotation of ClueWeb corpora, version 1 (release date 2013-06-26, format version 1, correction level 0).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ralph Grishman</author>
<author>Yifan He</author>
</authors>
<title>An information extraction customizer.</title>
<date>2014</date>
<booktitle>In Text, Speech and Dialogue,</booktitle>
<pages>3--10</pages>
<publisher>Springer.</publisher>
<contexts>
<context position="18274" citStr="Grishman and He, 2014" startWordPosition="2995" endWordPosition="2998">In particular some of the more advanced features such as embedding extractors within other extractors may be interesting to discuss in a hands-on demo4. 4 Previous Work Recent work in the field of rule-based RE has investigated workflows and tooling to facilitate the creation of extractors. (Li et al., 2012) presented a wizard-like approach to guide users in the process of building extractors. In (Akbik et al., 2013), we presented an example-driven workflow that allows even users who are unfamiliar with NLP to write extractors using lexico-syntactic patterns over dependency trees. Similarly, (Grishman and He, 2014) create a toolkit for persons who are experts in a domain of interest, but not in NLP. Users create extractors for pre-defined entities and relations by seeding example instances in a semi-supervised fashion. (Gupta and Manning, 2014) use a similar bootstrapping approach and create a tool for visualizing learned patterns for diagnostic purposes. Finally, (Freedman et al., 2011) focus on reducing effort in a user-driven process by including elements from active learning and bootstrapping, but target their tool at NLP experts. Unlike the approach presented with this demo, these approaches are mo</context>
</contexts>
<marker>Grishman, He, 2014</marker>
<rawString>Ralph Grishman and Yifan He. 2014. An information extraction customizer. In Text, Speech and Dialogue, pages 3–10. Springer.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sonal Gupta</author>
<author>Christopher D Manning</author>
</authors>
<title>Spied: Stanford pattern-based information extraction and diagnostics. Sponsor: Idibon,</title>
<date>2014</date>
<pages>38</pages>
<contexts>
<context position="18508" citStr="Gupta and Manning, 2014" startWordPosition="3033" endWordPosition="3036">flows and tooling to facilitate the creation of extractors. (Li et al., 2012) presented a wizard-like approach to guide users in the process of building extractors. In (Akbik et al., 2013), we presented an example-driven workflow that allows even users who are unfamiliar with NLP to write extractors using lexico-syntactic patterns over dependency trees. Similarly, (Grishman and He, 2014) create a toolkit for persons who are experts in a domain of interest, but not in NLP. Users create extractors for pre-defined entities and relations by seeding example instances in a semi-supervised fashion. (Gupta and Manning, 2014) use a similar bootstrapping approach and create a tool for visualizing learned patterns for diagnostic purposes. Finally, (Freedman et al., 2011) focus on reducing effort in a user-driven process by including elements from active learning and bootstrapping, but target their tool at NLP experts. Unlike the approach presented with this demo, these approaches are mostly intended for traditional RE in which relations of interest are specified in advance. With this demo, we instead support an exploratory workflow in which relations of interest may be discovered through user interactions with avail</context>
</contexts>
<marker>Gupta, Manning, 2014</marker>
<rawString>Sonal Gupta and Christopher D Manning. 2014. Spied: Stanford pattern-based information extraction and diagnostics. Sponsor: Idibon, page 38.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Lawrence Hunter</author>
<author>K Bretonnel Cohen</author>
</authors>
<title>Biomedical language processing: what’s beyond pubmed? Molecular cell,</title>
<date>2006</date>
<pages>21--5</pages>
<marker>Hunter, Cohen, 2006</marker>
<rawString>Lawrence Hunter and K Bretonnel Cohen. 2006. Biomedical language processing: what’s beyond pubmed? Molecular cell, 21(5):589–594.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yunyao Li</author>
<author>Laura Chiticariu</author>
<author>Huahai Yang</author>
<author>Frederick R Reiss</author>
<author>Arnaldo Carreno-fuentes</author>
</authors>
<title>Wizie: a best practices guided development environment for information extraction.</title>
<date>2012</date>
<booktitle>In Proceedings of the ACL 2012 System Demonstrations,</booktitle>
<pages>109--114</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<contexts>
<context position="17961" citStr="Li et al., 2012" startWordPosition="2948" endWordPosition="2951">LUEWEB09 corpus for relations of interest. Our purpose is twofold: One the one hand we would like to make the case for the simplicity and intuitive nature of the proposed approach. One the other hand, we would like to gather feedback from the NLP community for possible future improvements to the approach. In particular some of the more advanced features such as embedding extractors within other extractors may be interesting to discuss in a hands-on demo4. 4 Previous Work Recent work in the field of rule-based RE has investigated workflows and tooling to facilitate the creation of extractors. (Li et al., 2012) presented a wizard-like approach to guide users in the process of building extractors. In (Akbik et al., 2013), we presented an example-driven workflow that allows even users who are unfamiliar with NLP to write extractors using lexico-syntactic patterns over dependency trees. Similarly, (Grishman and He, 2014) create a toolkit for persons who are experts in a domain of interest, but not in NLP. Users create extractors for pre-defined entities and relations by seeding example instances in a semi-supervised fashion. (Gupta and Manning, 2014) use a similar bootstrapping approach and create a to</context>
</contexts>
<marker>Li, Chiticariu, Yang, Reiss, Carreno-fuentes, 2012</marker>
<rawString>Yunyao Li, Laura Chiticariu, Huahai Yang, Frederick R Reiss, and Arnaldo Carreno-fuentes. 2012. Wizie: a best practices guided development environment for information extraction. In Proceedings of the ACL 2012 System Demonstrations, pages 109–114. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Gary Marchionini</author>
</authors>
<title>Exploratory search: from finding to understanding.</title>
<date>2006</date>
<journal>Communications of the ACM,</journal>
<volume>49</volume>
<issue>4</issue>
<contexts>
<context position="2710" citStr="Marchionini, 2006" startWordPosition="417" endWordPosition="418">ploratory Relation Extraction (ERE). We argued that workflows and tooling can be developed in such a way as to enable an interactive and open ended search for relations. With ERE, relations therefore do not need to be precisely defined in advance. Rather, users can start a process of exploration for interesting relations even if their information needs are only vaguely defined. We outlined key ideas in order to enable the exploratory workflow: First, extraction patterns should be very easy to define and quick to test, much in the same way as exploratory keyword queries in a web search engine (Marchionini, 2006). Second, the exploration process should be guided through suggestions computed from the available data and previous user interactions. Third, there should be a high level of interactivity. Appropriate tooling is therefore required. Contributions. With this demo, we present SCHN ¨APPER, a web-based tool for ERE that demonstrates the incremental, data-guided workflow introduced in (Akbik et al., 2014). The demo is intended to underline a central claim of ERE, which is that non-experts can use it to easily explore a corpus for relational information and build extractors. Additionally, by using a</context>
</contexts>
<marker>Marchionini, 2006</marker>
<rawString>Gary Marchionini. 2006. Exploratory search: from finding to understanding. Communications of the ACM, 49(4):41–46.</rawString>
</citation>
<citation valid="false">
<title>Kurzes deutsches W¨orterbuch f¨ur Etymologie, Synonymik und Orthographie.</title>
<publisher>Jonghaus.</publisher>
<marker></marker>
<rawString>Friedrich Schmitthenner. 1837. Kurzes deutsches W¨orterbuch f¨ur Etymologie, Synonymik und Orthographie. Jonghaus.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yusuke Shinyama</author>
<author>Satoshi Sekine</author>
</authors>
<title>Preemptive information extraction using unrestricted relation discovery.</title>
<date>2006</date>
<booktitle>In Proceedings of the main conference on Human Language Technology Conference of the North American Chapter of the Association of Computational Linguistics,</booktitle>
<pages>304--311</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<contexts>
<context position="6014" citStr="Shinyama and Sekine, 2006" startWordPosition="932" endWordPosition="935">r MOVIE. The type restrictions may be set individually for each subject and object entities. Since the subject is replaced with 2For the purpose of readability, we do not display the deep syntactic information from the subtrees. Instead, we only show the lexical portion of the patterns. Here, some verbs, such as participles and gerunds, are not stemmed for readability purposes. the placeholder [X] in a pattern, its restriction is referred to as X Type, while the object restriction is referred to as Y Type. Preemptive pattern extraction. Following the idea of preemptive Information Extraction (Shinyama and Sekine, 2006), we pre-extract and store all subtrees and entity types from a given corpus for each sentence with at least two named entities. This allows not only fast retrieval of matching entity pairs for a given set of subtrees and type restrictions, but also allows us to compute pattern correlations over the entire dataset for the presently selected setup. In the next section, we show how fast retrieval and pattern correlations are used to aid the exploration process. 2.2 Example Workflow We illustrate the exploration process with an example workflow, the first steps of which are depicted in Figure 1. </context>
</contexts>
<marker>Shinyama, Sekine, 2006</marker>
<rawString>Yusuke Shinyama and Satoshi Sekine. 2006. Preemptive information extraction using unrestricted relation discovery. In Proceedings of the main conference on Human Language Technology Conference of the North American Chapter of the Association of Computational Linguistics, pages 304–311. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jannik Str¨otgen</author>
<author>Michael Gertz</author>
</authors>
<title>Heideltime: High quality rule-based extraction and normalization of temporal expressions.</title>
<date>2010</date>
<booktitle>In Proceedings of the 5th International Workshop on Semantic Evaluation,</booktitle>
<pages>321--324</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<marker>Str¨otgen, Gertz, 2010</marker>
<rawString>Jannik Str¨otgen and Michael Gertz. 2010. Heideltime: High quality rule-based extraction and normalization of temporal expressions. In Proceedings of the 5th International Workshop on Semantic Evaluation, pages 321–324. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mihai Surdeanu</author>
<author>Heng Ji</author>
</authors>
<title>Overview of the english slot filling track at the tac2014 knowledge base population evaluation.</title>
<date>2014</date>
<booktitle>In Proc. Text Analysis Conference (TAC2014).</booktitle>
<marker>Surdeanu, Ji, 2014</marker>
<rawString>Mihai Surdeanu and Heng Ji. 2014. Overview of the english slot filling track at the tac2014 knowledge base population evaluation. In Proc. Text Analysis Conference (TAC2014).</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>