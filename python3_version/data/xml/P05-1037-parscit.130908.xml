<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000020">
<title confidence="0.9082385">
Digesting Virtual “Geek” Culture:
The Summarization of Technical Internet Relay Chats
</title>
<author confidence="0.982813">
Liang Zhou and Eduard Hovy
</author>
<affiliation confidence="0.992997">
University of Southern California
Information Sciences Institute
</affiliation>
<address confidence="0.880997">
4676 Admiralty Way
Marina del Rey, CA 90292-6695
</address>
<email confidence="0.995956">
{liangz, Novy} @isi.edu
</email>
<sectionHeader confidence="0.99859" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999953545454545">
This paper describes a summarization
system for technical chats and emails on
the Linux kernel. To reflect the complex-
ity and sophistication of the discussions,
they are clustered according to subtopic
structure on the sub-message level, and
immediate responding pairs are identified
through machine learning methods. A re-
sulting summary consists of one or more
mini-summaries, each on a subtopic from
the discussion.
</bodyText>
<sectionHeader confidence="0.999517" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999936884615385">
The availability of many chat forums reflects the
formation of globally dispersed virtual communi-
ties. From them we select the very active and
growing movement of Open Source Software
(OSS) development. Working together in a virtual
community in non-collocated environments, OSS
developers communicate and collaborate using a
wide range of web-based tools including Internet
Relay Chat (IRC), electronic mailing lists, and
more (Elliott and Scacchi, 2004). In contrast to
conventional instant message chats, IRCs convey
engaging and focused discussions on collaborative
software development. Even though all OSS par-
ticipants are technically savvy individually, sum-
maries of IRC content are necessary within a
virtual organization both as a resource and an or-
ganizational memory of activities (Ackerman and
Halverson, 2000). They are regularly produced
manually by volunteers. These summaries can be
used for analyzing the impact of virtual social in-
teractions and virtual organizational culture on
software/product development.
The emergence of email thread discussions and
chat logs as a major information source has
prompted increased interest in thread summariza-
tion within the Natural Language Processing
(NLP) community. One might assume a smooth
transition from text-based summarization to email
and chat-based summarizations. However, chat
falls in the genre of correspondence, which re-
quires dialogue and conversation analysis. This
property makes summarization in this area even
more difficult than traditional summarization. In
particular, topic “drift” occurs more radically than
in written genres, and interpersonal and pragmatic
content appears more frequently. Questions about
the content and overall organization of the sum-
mary must be addressed in a more thorough way
for chat and other dialogue summarization sys-
tems.
In this paper we present a new system that clus-
ters sub-message segments from correspondences
according to topic, identifies the sub-message
segment containing the leading issue within the
topic, finds immediate responses from other par-
ticipants, and consequently produces a summary
for the entire IRC. Other constructions are possi-
ble. One of the two baseline systems described in
this paper uses the timeline and dialogue structure
to select summary content, and is quite effective.
We use the term chat loosely in this paper. Input
IRCs for our system is a mixture of chats and
</bodyText>
<page confidence="0.96158">
298
</page>
<note confidence="0.9915555">
Proceedings of the 43rd Annual Meeting of the ACL, pages 298–305,
Ann Arbor, June 2005. c�2005 Association for Computational Linguistics
</note>
<bodyText confidence="0.999628166666667">
emails that are indistinguishable in format ob-
served from the downloaded corpus (Section 3).
In the following sections, we summarize previ-
ous work, describe the email/chat data, intra-
message clustering and summary extraction proc-
ess, and discuss the results and future work.
</bodyText>
<sectionHeader confidence="0.912704" genericHeader="introduction">
2 Previous and Related Work
</sectionHeader>
<bodyText confidence="0.999943784313726">
There are at least two ways of organizing dialogue
summaries: by dialogue structure and by topic.
Newman and Blitzer (2002) describe methods
for summarizing archived newsgroup conversa-
tions by clustering messages into subtopic groups
and extracting top-ranked sentences per subtopic
group based on the intrinsic scores of position in
the cluster and lexical centrality. Due to the techni-
cal nature of our working corpus, we had to handle
intra-message topic shifts, in which the author of a
message raises or responds to multiple issues in the
same message. This requires that our clustering
component be not message-based but sub-
message-based.
Lam et al. (2002) employ an existing summar-
izer for single documents using preprocessed email
messages and context information from previous
emails in the thread.
Rambow et al. (2004) show that sentence ex-
traction techniques are applicable to summarizing
email threads, but only with added email-specific
features. Wan and McKeown (2004) introduce a
system that creates overview summaries for ongo-
ing decision-making email exchanges by first de-
tecting the issue being discussed and then
extracting the response to the issue. Both systems
use a corpus that, on average, contains 190 words
and 3.25 messages per thread, much shorter than
the ones in our collection.
Galley et al. (2004) describe a system that iden-
tifies agreement and disagreement occurring in
human-to-human multi-party conversations. They
utilize an important concept from conversational
analysis, adjacent pairs (AP), which consists of
initiating and responding utterances from different
speakers. Identifying APs is also required by our
research to find correspondences from different
chat participants.
In automatic summarization of spoken dia-
logues, Zechner (2001) presents an approach to
obtain extractive summaries for multi-party dia-
logues in unrestricted domains by addressing in-
trinsic issues specific to speech transcripts. Auto-
matic question detection is also deemed important
in this work. A decision-tree classifier was trained
on question-triggering words to detect questions
among speech acts (sentences). A search heuristic
procedure then finds the corresponding answers.
Ries (2001) shows how to use keyword repetition,
speaker initiative and speaking style to achieve
topical segmentation of spontaneous dialogues.
</bodyText>
<sectionHeader confidence="0.997075" genericHeader="method">
3 Technical Internet Relay Chats
</sectionHeader>
<bodyText confidence="0.999193230769231">
GNUe, a meta-project of the GNU project1–one of
the most famous free/open source software pro-
jects–is the case study used in (Elliott and Scacchi,
2004) in support of the claim that, even in virtual
organizations, there is still the need for successful
conflict management in order to maintain order
and stability.
The GNUe IRC archive is uniquely suited for
our experimental purpose because each IRC chat
log has a companion summary digest written by
project participants as part of their contribution to
the community. This manual summary constitutes
gold-standard data for evaluation.
</bodyText>
<subsectionHeader confidence="0.995254">
3.1 Kernel Traffic2
</subsectionHeader>
<bodyText confidence="0.99996325">
Kernel Traffic is a collection of summary digests
of discussions on GNUe development. Each digest
summarizes IRC logs and/or email messages (later
referred to as chat logs) for a period of up to two
weeks. A nice feature is that direct quotes and
hyperlinks are part of the summary. Each digest is
an extractive overview of facts, plus the author’s
dramatic and humorous interpretations.
</bodyText>
<subsectionHeader confidence="0.999809">
3.2 Corpus Download
</subsectionHeader>
<bodyText confidence="0.99974275">
The complete Linux Kernel Archive (LKA) con-
sists of two separate downloads. The Kernel Traf-
fic (summary digests) are in XML format and were
downloaded by crawling the Kernel Traffic site.
The Linux Kernel Archives (individual IRC chat
logs) are downloaded from the archive site. We
matched the summaries with their respective chat
logs based on subject line and publication dates.
</bodyText>
<subsectionHeader confidence="0.998152">
3.3 Observation on Chat Logs
</subsectionHeader>
<footnote confidence="0.9997895">
1 http://www.gnu.org
2 http://kt.hoser.ca/kernel-traffic/index.html
</footnote>
<page confidence="0.998544">
299
</page>
<bodyText confidence="0.999870666666667">
Upon initial examination of the chat logs, we
found that many conventional assumptions about
chats in general do not apply. For example, in most
instant-message chats, each exchange usually con-
sists of a small number of words in several sen-
tences. Due to the technical nature of GNUe, half
of the chat logs contain in-depth discussions with
lengthy messages. One message might ask and an-
swer several questions, discuss many topics in de-
tail, and make further comments. This property,
which we call subtopic structure, is an important
difference from informal chat/interpersonal banter.
Figure 1 shows the subtopic structure and relation
of the first 4 messages from a chat log, produced
manually. Each message is represented horizon-
tally; the vertical arrows show where participants
responded to each other. Visual inspection reveals
in this example there are three distinctive clusters
(a more complex cluster and two smaller satellite
clusters) of discussions between participants at
sub-message level.
</bodyText>
<figureCaption confidence="0.948971">
Figure 1. An example of chat subtopic structure
and relation between correspondences.
</figureCaption>
<subsectionHeader confidence="0.994362">
3.4 Observation on Summary Digests
</subsectionHeader>
<bodyText confidence="0.999993105263158">
To measure the goodness of system-produced
summaries, gold standards are used as references.
Human-written summaries usually make up the
gold standards. The Kernel Traffic (summary di-
gests) are written by Linux experts who actively
contribute to the production and discussion of the
open source projects. However, participant-
produced digests cannot be used as reference
summaries verbatim. Due to the complex structure
of the dialogue, the summary itself exhibits some
discourse structure, necessitating such reader guid-
ance phrases such as “for the ... question,” “on the
... subject,” “regarding ...,” “later in the same
thread,” etc., to direct and refocus the reader’s at-
tention. Therefore, further manual editing and par-
titioning is needed to transform a multi-topic digest
into several smaller subtopic-based gold-standard
reference summaries (see Section 6.1 for the trans-
formation).
</bodyText>
<sectionHeader confidence="0.997979" genericHeader="method">
4 Fine-grained Clustering
</sectionHeader>
<bodyText confidence="0.9999875">
To model the subtopic structure of each chat mes-
sage, we apply clustering at the sub-message level.
</bodyText>
<subsectionHeader confidence="0.998733">
4.1 Message Segmentation
</subsectionHeader>
<bodyText confidence="0.9999875">
First, we look at each message and assume that
each participant responds to an ongoing discussion
by stating his/her opinion on several topics or is-
sues that have been discussed in the current chat
log, but not necessarily in the order they were dis-
cussed. Thus, topic shifts can occur sequentially
within a message. Messages are partitioned into
multi-paragraph segments using TextTiling, which
reportedly has an overall precision of 83% and re-
call of 78% (Hearst, 1994).
</bodyText>
<subsectionHeader confidence="0.994955">
4.2 Clustering
</subsectionHeader>
<bodyText confidence="0.999974142857143">
After distinguishing a set of message segments, we
cluster them. When choosing an appropriate clus-
tering method, because the number of subtopics
under discussion is unknown, we cannot make an
assumption about the total number of resulting
clusters. Thus, nonhierarchical partitioning meth-
ods cannot be used, and we must use a hierarchical
method. These methods can be either agglomera-
tive, which begin with an unclustered data set and
perform N – 1 pairwise joins, or divisive, which
add all objects to a single cluster, and then perform
N – 1 divisions to create a hierarchy of smaller
clusters, where N is the total number of items to be
clustered (Frakes and Baeza-Yates, 1992).
</bodyText>
<subsectionHeader confidence="0.971952">
Ward’s Method
</subsectionHeader>
<bodyText confidence="0.9999831">
Hierarchical agglomerative clustering methods are
commonly used and we employ Ward’s method
(Ward and Hook, 1963), in which the text segment
pair merged at each stage is the one that minimizes
the increase in total within-cluster variance.
Each cluster is represented by an L-dimensional
vector (xi1, xi2, É, xiL) where each xik is the word’s
tf • idf score. If mi is the number of objects in the
cluster, the squared Euclidean distance between
two segments i and j is:
</bodyText>
<equation confidence="0.608983">
di` L
= J, \xik − x k)2
� ` K-1 �
</equation>
<page confidence="0.941161">
300
</page>
<bodyText confidence="0.947026">
part, require different discourse/summary organi-
zation.
These corresponding pairs are formally intro-
duced below, and the methods we experimented
with for identifying them are described.
When two segments are joined, the increase in
variance Iij is expressed as:
</bodyText>
<equation confidence="0.6657145">
mimj
mi + mj
</equation>
<bodyText confidence="0.502572">
Number of Clusters
</bodyText>
<subsectionHeader confidence="0.916599">
5.1 Adjacent Response Pairs
</subsectionHeader>
<bodyText confidence="0.953664380952381">
=
Iij
dij z
The process of joining clusters continues until the
€
combination of any two clusters would destabilize
the entire array of currently existing clusters pro-
duced from previous stages. At each stage, the two
clusters xik and xjk are chosen whose combination
would cause the minimum increase in variance Iij,
expressed as a percentage of the variance change
from the last round. If this percentage reaches a
preset threshold, it means that the nearest two
clusters are much further from each other com-
pared to the previous round; therefore, joining of
the two represents a destabilizing change, and
should not take place.
Sub-message segments from resulting clusters
are arranged according to the sequence the original
messages were posted and the resulting subtopic
structures are similar to the one shown in Figure 1.
</bodyText>
<sectionHeader confidence="0.992578" genericHeader="method">
5 Summary Extraction
</sectionHeader>
<bodyText confidence="0.999983810344828">
Having obtained clusters of message segments fo-
cused on subtopics, we adopt the typical summari-
zation paradigm to extract informative sentences
and segments from each cluster to produce sub-
topic-based summaries. If a chat log has n clusters,
then the corresponding summary will contain n
mini-summaries.
All message segments in a cluster are related to
the central topic, but to various degrees. Some are
answers to questions asked previously, plus further
elaborative explanations; some make suggestions
and give advice where they are requested, etc.
From careful analysis of the LKA data, we can
safely assume that for this type of conversational
interaction, the goal of the participants is to seek
help or advice and advance their current knowl-
edge on various technical subjects. This kind of
interaction can be modeled as one problem-
initiating segment and one or more corresponding
problem-solving segments. We envisage that iden-
tifying corresponding message segment pairs will
produce adequate summaries. This analysis follows
the structural organization of summaries from Ker-
nel Traffic. Other types of discussions, at least in
An important conversational analysis concept, ad-
jacent pairs (AP), is applied in our system to iden-
tify initiating and responding correspondences
from different participants in one chat log. Adja-
cent pairs are considered fundamental units of
conversational organization (Schegloff and Sacks,
1973). An adjacent pair is said to consist of two
parts that are ordered, adjacent, and produced by
different speakers (Galley et al., 2004). In our
email/chat (LKA) corpus a physically adjacent
message, following the timeline, may not directly
respond to its immediate predecessor. Discussion
participants read the current live thread and decide
what he/she would like to correspond to, not nec-
essarily in a serial fashion. With the added compli-
cation of subtopic structure (see Figure 1) the
definition of adjacency is further violated. Due to
its problematic nature, a relaxation on the adja-
cency requirement is used in extensive research in
conversational analysis (Levinson, 1983). This re-
laxed requirement is adopted in our research.
Information produced by adjacent correspon-
dences can be used to produce the subtopic-based
summary of the chat log. As described in Section
4, each chat log is partitioned, at sub-message
level, into several subtopic clusters. We take the
message segment that appears first chronologically
in the cluster as the topic-initiating segment in an
adjacent pair. Given the initiating segment, we
need to identify one or more segments from the
same cluster that are the most direct and relevant
responses. This process can be viewed equivalently
as the informative sentence extraction process in
conventional text-based summarization.
</bodyText>
<subsectionHeader confidence="0.998358">
5.2 AP Corpus and Baseline
</subsectionHeader>
<bodyText confidence="0.999835285714286">
We manually tagged 100 chat logs for adjacent
pairs. There are, on average, 11 messages per chat
log and 3 segments per message (This is consid-
erably larger than threads used in previous re-
search). Each chat log has been clustered into one
or more bags of message segments. The message
segment that appears earliest in time in a cluster
</bodyText>
<page confidence="0.994855">
301
</page>
<bodyText confidence="0.999986260869565">
was marked as the initiating segment. The annota-
tors were provided with this segment and one other
segment at a time, and were asked to decide
whether the current message segment is a direct
answer to the question asked, the suggestion that
was requested, etc. in the initiating segment. There
are 1521 adjacent response pairs; 1000 were used
for training and 521 for testing.
Our baseline system selects the message seg-
ment (from a different author) immediately fol-
lowing the initiating segment. It is quite effective,
with an accuracy of 64.67%. This is reasonable
because not all adjacent responses are interrupted
by messages responding to different earlier initiat-
ing messages.
In the following sections, we describe two ma-
chine learning methods that were used to identify
the second element in an adjacent response pair
and the features used for training. We view the
problem as a binary classification problem, distin-
guishing less relevant responses from direct re-
sponses. Our approach is to assign a candidate
message segment c an appropriate response class r.
</bodyText>
<subsectionHeader confidence="0.893975">
5.3 Features
</subsectionHeader>
<bodyText confidence="0.999994833333333">
Structural and durational features have been dem-
onstrated to improve performance significantly in
conversational text analysis tasks. Using them,
Galley et al. (2004) report an 8% increase in
speaker identification. Zechner (2001) reports ex-
cellent results (F &gt; .94) for inter-turn sentence
boundary detection when recording the length of
pause between utterances. In our corpus, dura-
tional information is nonexistent because chats and
emails were mixed and no exact time recordings
beside dates were reported. So we rely solely on
structural and lexical features.
For structural features, we count the number of
messages between the initiating message segment
and the responding message segment. Lexical fea-
tures are listed in Table 1. The tech words are the
words that are uncommon in conventional litera-
ture and unique to Linux discussions.
</bodyText>
<subsectionHeader confidence="0.991395">
5.4 Maximum Entropy
</subsectionHeader>
<bodyText confidence="0.996248666666667">
Maximum entropy has been proven to be an ef-
fective method in various natural language proc-
essing applications (Berger et al., 1996). For
</bodyText>
<listItem confidence="0.9996488">
• number of overlapping words
• number of overlapping content words
• ratio of overlapping words
• ratio of overlapping content words
• number of overlapping tech words
</listItem>
<tableCaption confidence="0.984679">
Table 1. Lexical features.
</tableCaption>
<bodyText confidence="0.432887">
training and testing, we used YASMET3. To est i-
mate P(r  |c) in the exponential form, we have:
</bodyText>
<equation confidence="0.993885">
1
Pλ(r  |c) = Zλ(c) exp(∑λi,rfi,r(c,r))
</equation>
<bodyText confidence="0.998008">
where Zλ(c) is a normalizing constant and the fea-
ture function for feature f; and response class r is
defined as:
</bodyText>
<figure confidence="0.563867416666667">
€
 1, if fi &gt; 0 and r ′ = r


is the feature-weight parameter for feature
and
response class r. Then, to determine the best class r
for
λ;,r
f;
the candidate message segment c, we have:
€r* = arg maxrP(r  |c) .
</figure>
<subsectionHeader confidence="0.984108">
5.5 Support Vector Machine
</subsectionHeader>
<bodyText confidence="0.9363734375">
Support vector machines (SVMs) have been shown
to outperform other existing methods
Bayes,
k-NN, and decision trees) in text categorization
(Joachims, 1998). Their advantages are robustness
and the elimination of the need for feature selec-
tion and parameter tuning. SVMs find the hyper-
plane that separates the positive and negative
training examples with maximum margin. Finding
this hyperplane can be translated into an
€
(naïve
optimiza-
tion problem of finding a set of coefficients α;* of
the weight vector wr for document d; of class y; E
{+1 , Ð1}:
</bodyText>
<equation confidence="0.994989333333333">
r w αi *
∑ yi d i, αi 0 .
i
</equation>
<bodyText confidence="0.996749666666667">
Testing data are classified depending on the side
€of the hyperplane they fall on. We used the
LIBSVM4 package for training and testing.
</bodyText>
<table confidence="0.935599166666667">
€
Feature sets baseline MaxEnt SVM
64.67%
Structural 61.22% 71.79%
Lexical 62.24% 72.22%
Structural + Lexical 72.61% 72.79%
</table>
<tableCaption confidence="0.658871">
Table 2. Accuracy on identifying APs.
.
</tableCaption>
<footnote confidence="0.922857333333333">
3 http://www.fjoch.com/YASME
T.html
4 http://www.csie.ntu.edu.tw/~cjlin/libsvm/
</footnote>
<equation confidence="0.957785666666667">
i
fi,r(c,r ′ ) =
0, otherwise
</equation>
<page confidence="0.996668">
302
</page>
<sectionHeader confidence="0.648634" genericHeader="method">
5.6 Results
</sectionHeader>
<bodyText confidence="0.99844">
Entries in Table 2 show the accuracies achieved
using machine learning models and feature sets.
</bodyText>
<subsectionHeader confidence="0.994816">
5.7 Summary Generation
</subsectionHeader>
<bodyText confidence="0.999903357142857">
After responding message segments are identified,
we couple them with their respective initiating
segment to form a mini-summary based on their
subtopic. Each initializing segment has zero or
more responding segments. We also observed zero
response in human-written summaries where par-
ticipants initiated some question or concern, but
others failed to follow up on the discussion. The
AP process is repeated for each cluster created
previously. One or more subtopic-based mini-
summaries make up one final summary for each
chat log. Figure 2 shows an example. For longer
chat logs, the length of the final summary is arbi-
trarily averaged at 35% of the original.
</bodyText>
<table confidence="0.684675642857143">
Subtopic 1:
Benjamin Reed: I wrote a wireless ethernet driver a
while ago... Are driver writers recommended to use
that over extending /proc or is it deprecated?
Linus Torvalds: Syscyl is deprecated. It’s useful in one
way only ...
Subtopic 2:
Benjamin Reed: I am a bit uncomfortable ... wondering
for a while if there are guidelines on ...
Linus Torvalds: The thing to do is to create ...
Subtopic 3:
Marcin Dalecki: Are you just blind to the never-ending
format/ compatibility/ É problems the whole idea
behind /proc induces inherently?
</table>
<figureCaption confidence="0.99577">
Figure 2. A system-produced summary.
</figureCaption>
<sectionHeader confidence="0.963937" genericHeader="method">
6 Summary Evaluation
</sectionHeader>
<bodyText confidence="0.9999595">
To evaluate the goodness of the system-produced
summaries, a set of reference summaries is used
for comparison. In this section, we describe the
manual procedure used to produce the reference
summaries, and the performances of our system
and two baseline systems.
</bodyText>
<subsectionHeader confidence="0.998114">
6.1 Reference Summaries
</subsectionHeader>
<bodyText confidence="0.994858">
Kernel Traffic digests are participant-written
summaries of the chat logs. Each digest mixes the
summary writer’s own narrative comments with
direct quotes (citing the authors) from the chat log.
As observed in Section 3.4, subtopics are inter-
mingled in each digest. Authors use key phrases to
link the contents of each subtopic throughout texts.
In Figure 3, we show an example of such a digest.
Discussion participants’ names are in italics and
subtopics are in bold. In this example, the conver-
sation was started by Benjamin Reed with two
questions: 1) asking for conventions for writing
/proc drivers, and 2) asking about the status of
sysctl. The summary writer indicated that Linus
Torvalds replied to both questions and used the
phrase “for the ... question, he added...” to high-
light the answer to the second question. As the di-
Benjamin Reed wrote a wireless Ethernet driver that
used /proc as its interface. But he was a little uncom-
fortable ... asked if there were any conventions he
should follow. He added, “and finally, what’s up with
sysctl? ...”
Linus Torvalds replied with: “the thing to do is to cre-
ate a ...[program code]. The /proc/drivers/ directory is
already there, so you’d basically do something like ...
[program code].” For the sysctl question, he added
“sysctl is deprecated. ...”
Marcin Dalecki flamed Linus: “Are you just blind to
the never-ending format/compatibility/... problems the
whole idea behind /proc induces inherently?
...[example]”
</bodyText>
<figureCaption confidence="0.983052">
Figure 3. An original Kernel Traffic digest.
</figureCaption>
<tableCaption confidence="0.84046175">
Mini 1:
Benjamin Reed wrote a wireless Ethernet driver that
used /proc as its interface. But he was a little uncom-
fortable ... and asked if there were any conventions he
should follow.
Linus Torvalds replied with: the thing to do is to create
a ...[program code]. The /proc/drivers/ directory is
already there, so you’d basically do something like ...
[program code].
Marcin Dalecki flamed Linus: Are you just blind to the
never-ending format/ compatibility/ ... problems the
whole idea behind /proc induces inherently?
...[example]
Mini 2:
Benjamin Reed: and finally, what’s up with sysctl? ...
Linus Torvalds replied: sysctl is deprecated. ...
</tableCaption>
<figureCaption confidence="0.992566">
Figure 4. A reference summary reproduced
from a summary digest.
</figureCaption>
<page confidence="0.997075">
303
</page>
<bodyText confidence="0.999899529411765">
gest goes on, Marcin Dalecki only responded to the
first question with his excited commentary.
Since our system-produced summaries are sub-
topic-based and partitioned accordingly, if we use
unprocessed Kernel Traffic as references, the com-
parison would be rather complicated and would
increase the level of inconsistency in future as-
sessments. We manually reorganized each sum-
mary digest into one or more mini-summaries by
subtopic (see Figure 4.) Examples (usually kernel
stats) and programs are reduced to “[example]”
and “[program code].” Quotes (originally in sepa-
rate messages but merged by the summary writer)
that contain multiple topics are segmented and the
participant’s name is inserted for each segment.
We follow clues like “to answer ... question” to
pair up the main topics and their responses.
</bodyText>
<subsectionHeader confidence="0.998918">
6.2 Summarization Results
</subsectionHeader>
<bodyText confidence="0.999929782608696">
We evaluated 10 chat logs. On average, each con-
tains approximately 50 multi-paragraph tiles (par-
titioned by TextTile) and 5 subtopics (clustered by
the method from Section 4).
A simple baseline system takes the first sentence
from each email in the sequence that they were
posted, based on the assumption that people tend to
put important information in the beginning of texts
(Position Hypothesis).
A second baseline system was built based on
constructing and analyzing the dialogue structure
of each chat log. Participants often quote portions
of previously posted messages in their responses.
These quotes link most of the messages from a
chat log. The message segment that immediately
follows the quote is automatically paired with the
quote itself and added to the summary and sorted
according to the timeline. Segments that are not
quoted in later messages are labeled as less rele-
vant and discarded. A resulting baseline summary
is an inter-connected structure of segments that
quoted and responded to one another. Figure 5 is a
shortened summary produced by this baseline for
</bodyText>
<reference confidence="0.912610666666667">
[0|0] Benjamin Reed: “I wrote an ... driver ... /proc
...”
[0|1] Benjamin Reed: “... /proc/ guideline ...”
[0|2] Benjamin Reed: “... syscyl ...”
[1|0] Linus Torvalds responds to [0|0, 0|1, 0|2]: “the
thing to do is ...” “sysctl is deprecated ... “
</reference>
<figureCaption confidence="0.997929">
Figure 5. A short example from Baseline 2.
</figureCaption>
<bodyText confidence="0.978006615384616">
the ongoing example.
The summary digests from Kernel Traffic
mostly consist of direct snippets from original
messages, thus making the reference summaries
extractive even after rewriting. This makes it pos-
sible to conduct an automatic evaluation. A com-
puterized procedure calculates the overlap between
reference and system-produced summary units.
Since each system-produced summary is a set of
mini-summaries based on subtopics, we also com-
pared the subtopics against those appearing in ref-
erence summaries (precision = 77.00%, recall =
74.33 %, F = 0.7566).
</bodyText>
<table confidence="0.9991506">
Recall Precision F-measure
Baseline1 30.79% 16.81% .2175
Baseline2 63.14% 36.54% .4629
System Summary 52.57% 52.14% .5235
Topic-summ 52.57% 63.66% .5758
</table>
<tableCaption confidence="0.999479">
Table 3. Summary of results.
</tableCaption>
<bodyText confidence="0.99933575">
Table 3 shows the recall, precision, and F-
measure from the evaluation. From manual analy-
sis on the results, we notice that the original digest
writers often leave large portions of the discussion
out and focus on a few topics. We think this is be-
cause among the participants, some are Linux vet-
erans and others are novice programmers. Digest
writers recognize this difference and reflect it in
their writings, whereas our system does not. The
entry “Topic-summ” in the table shows system-
produced summaries being compared only against
the topics discussed in the reference summaries.
</bodyText>
<subsectionHeader confidence="0.938543">
6.3 Discussion
</subsectionHeader>
<bodyText confidence="0.999983928571429">
A recall of 30.79% from the simple baseline reas-
sures us the Position Hypothesis still applies in
conversational discussions. The second baseline
performs extremely well on recall, 63.14%. It
shows that quoted message segments, and thereby
derived dialogue structure, are quite indicative of
where the important information resides. Systems
built on these properties are good summarization
systems and hard-to-beat baselines. The system
described in this paper (Summary) shows an F-
measure of .5235, an improvement from .4629 of
the smart baseline. It gains from a high precision
because less relevant message segments are identi-
fied and excluded from the adjacent response pairs,
</bodyText>
<page confidence="0.997286">
304
</page>
<bodyText confidence="0.999955176470588">
leaving mostly topic-oriented segments in summa-
ries. There is a slight improvement when assessing
against only those subtopics appeared in the refer-
ence summaries (Topic-summ). This shows that we
only identified clusters on their information con-
tent, not on their respective writers’ experience and
reliability of knowledge.
In the original summary digests, interactions and
reactions between participants are sometimes de-
scribed. Digest writers insert terms like “flamed”,
“surprised”, “felt sorry”, “excited”, etc. To analyze
social and organizational culture in a virtual envi-
ronment, we need not only information extracts
(implemented so far) but also passages that reveal
the personal aspect of the communications. We
plan to incorporate opinion identification into the
current system in the future.
</bodyText>
<sectionHeader confidence="0.998073" genericHeader="conclusions">
7 Conclusion and Future Work
</sectionHeader>
<bodyText confidence="0.999777066666667">
In this paper we have described a system that per-
forms intra-message topic-based summarization by
clustering message segments and classifying topic-
initiating and responding pairs. Our approach is an
initial step in developing a framework that can
eventually reflect the human interactions in virtual
environments. In future work, we need to prioritize
information according to the perceived knowl-
edgeability of each participant in the discussion, in
addition to identifying informative content and
recognizing dialogue structure. While the approach
to the detection of initiating-responding pairs is
quite effective, differentiating important and non-
important topic clusters is still unresolved and
must be explored.
</bodyText>
<sectionHeader confidence="0.999474" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.99990412244898">
M. S. Ackerman and C. Halverson. 2000. Reexaming
organizational memory. Communications of the
ACM, 43(1), 59–64.
A. Berger, S. Della Pietra, and V. Della Pietra. 1996. A
maximum entropy approach to natural language
processing. Computational Linguistics, 22(1):39–71.
M. Elliott and W. Scacchi. 2004. Free software devel-
opment: cooperation and conflict in a virtual organi-
zational culture. S. Koch (ed.), Free/Open Source
Software Development, IDEA publishing, 2004.
W. B. Frakes and R. Baeza-Yates. 1992. Information
retrieval: data structures &amp; algorithms. Prentice Hall.
M. Galley, K. McKeown, J. Hirschberg, and E.
Shriberg. 2004. Identifying agreement and disagree-
ment in conversational speech: use of Bayesian net-
works to model pragmatic dependencies. In the
Proceedings of ACL-04.
M. A. Hearst. 1994. Multi-paragraph segmentation of
expository text. In the Proceedings of ACL 1994.
T. Joachims. 1998. Text categorization with support
vector machines: Learning with many relevant fea-
tures. In Proceedings of the ECML, pages 137–142.
D. Lam and S. L. Rohall. 2002. Exploiting e-mail
structure to improve summarization. Technical Paper
at IBM Watson Research Center #20–02.
S. Levinson. 1983. Pragmatics. Cambridge University
Press.
P. Newman and J. Blitzer. 2002. Summarizing archived
discussions: a beginning. In Proceedings of Intelli-
gent User Interfaces.
O. Rambow, L. Shrestha, J. Chen and C. Laurdisen.
2004. Summarizing email threads. In Proceedings of
HLT-NAACL 2004: Short Papers.
K. Ries. 2001. Segmenting conversations by topic, ini-
tiative, and style. In Proceedings of SIGIR Work-
shop: Information Retrieval Techniques for Speech
Applications 2001: 51–66.
E. A. Schegloff and H. Sacks. 1973. Opening up clos-
ings. Semiotica, 7-4:289–327.
S. Wan and K. McKeown. 2004. Generating overview
summaries of ongoing email thread discussions. In
Proceedings of COLING 2004.
J. H. Ward Jr. and M. E. Hook. 1963. Application of an
hierarchical grouping procedure to a problem of
grouping profiles. Educational and Psychological
Measurement, 23, 69–81.
K. Zechner. 2001. Automatic generation of concise
summaries of spoken dialogues in unrestricted do-
mains. In Proceedings of SIGIR 2001.
</reference>
<page confidence="0.999239">
305
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.932144">
<title confidence="0.999373">Digesting Virtual “Geek” Culture: The Summarization of Technical Internet Relay Chats</title>
<author confidence="0.999654">Liang Zhou</author>
<author confidence="0.999654">Eduard Hovy</author>
<affiliation confidence="0.9993955">University of Southern California Information Sciences Institute</affiliation>
<address confidence="0.9991345">4676 Admiralty Way Marina del Rey, CA 90292-6695</address>
<email confidence="0.983885">liangz@isi.edu</email>
<email confidence="0.983885">Novy@isi.edu</email>
<abstract confidence="0.99594525">This paper describes a summarization system for technical chats and emails on the Linux kernel. To reflect the complexity and sophistication of the discussions, they are clustered according to subtopic structure on the sub-message level, and immediate responding pairs are identified through machine learning methods. A resulting summary consists of one or more mini-summaries, each on a subtopic from the discussion.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="false">
<authors>
<author>Benjamin</author>
</authors>
<title>Reed: “I wrote an ... driver ... /proc ...” [0|1] Benjamin Reed: “... /proc/ guideline ...” [0|2] Benjamin Reed: “... syscyl ...” [1|0] Linus Torvalds responds to [0|0, 0|1, 0|2]: “the thing to do is ...” “sysctl is deprecated ... “ Figure 5. A short example from Baseline 2.</title>
<marker>Benjamin, </marker>
<rawString>[0|0] Benjamin Reed: “I wrote an ... driver ... /proc ...” [0|1] Benjamin Reed: “... /proc/ guideline ...” [0|2] Benjamin Reed: “... syscyl ...” [1|0] Linus Torvalds responds to [0|0, 0|1, 0|2]: “the thing to do is ...” “sysctl is deprecated ... “ Figure 5. A short example from Baseline 2.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>