<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.005604">
<title confidence="0.985985">
Tense Sense Disambiguation: a New Syntactic Polysemy Task
</title>
<author confidence="0.986476">
Roi Reichart
</author>
<affiliation confidence="0.967162">
ICNC
Hebrew University of Jerusalem
</affiliation>
<email confidence="0.991685">
roiri@cs.huji.ac.il
</email>
<author confidence="0.99282">
Ari Rappoport
</author>
<affiliation confidence="0.9991145">
Institute of Computer Science
Hebrew University of Jerusalem
</affiliation>
<email confidence="0.995911">
arir@cs.huji.ac.il
</email>
<sectionHeader confidence="0.995617" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.99959315">
Polysemy is a major characteristic of natu-
ral languages. Like words, syntactic forms
can have several meanings. Understanding the
correct meaning of a syntactic form is of great
importance to many NLP applications. In this
paper we address an important type of syn-
tactic polysemy – the multiple possible senses
of tense syntactic forms. We make our dis-
cussion concrete by introducing the task of
Tense Sense Disambiguation (TSD): given a
concrete tense syntactic form present in a sen-
tence, select its appropriate sense among a
set of possible senses. Using English gram-
mar textbooks, we compiled a syntactic sense
dictionary comprising common tense syntac-
tic forms and semantic senses for each. We an-
notated thousands of BNC sentences using the
defined senses. We describe a supervised TSD
algorithm trained on these annotations, which
outperforms a strong baseline for the task.
</bodyText>
<sectionHeader confidence="0.999131" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.969853333333333">
The function of syntax is to combine words to ex-
press meanings, using syntactic devices such as
word order, auxiliary words, and morphology (Gold-
berg, 1995). Virtually all natural language devices
used for expressing meanings (e.g., words) exhibit
polysemy. Like words, concrete syntactic forms (the
sentence words generated by specific syntactic de-
vices) can have several meanings. Consider the fol-
lowing sentences:
</bodyText>
<listItem confidence="0.944488">
(a) They are playing chess in the park.
(b) They are playing chess next Tuesday.
</listItem>
<bodyText confidence="0.999979264705882">
Both contain the concrete syntactic form ‘are play-
ing’, generated by the abstract syntactic form usu-
ally known as ‘present progressive’ (am/is/are + V-
ing). In (a), the meaning is ‘something happening
now’, while in (b) it is ‘a plan to do something in the
future’. Note that the polysemy is of the syntactic
form as a unit, not of individual words. In particu-
lar, the verb ‘play’ is used in the same sense in both
cases.
In this paper we address a prominent type of syn-
tactic form polysemy: the multiple possible senses
that tense syntactic forms can have. Disambiguat-
ing the polysemy of tense forms is of theoretical
and practical importance (Section 2). To make our
discussion concrete, we introduce the task of Tense
Sense Disambiguation (TSD): given a concrete tense
syntactic form in a sentence, select its correct sense
among a given set of possible senses (Section 3).
The disambiguation of polysemy is a fundamental
problem in NLP. For example, Word Sense Disam-
biguation (WSD) continues to attract a large number
of researchers (Agirre and Edmonds, 2006). TSD
has the same structure as WSD, with different dis-
ambiguated entities.
For experimenting with the TSD task, we com-
piled an English syntactic sense dictionary based
on a thorough study of three major English gram-
mar projects (Section 4). We selected 3000 sen-
tences from the British National Corpus containing
4702 concrete syntactic forms, and annotated each
of these by its sense (Section 5).We developed a su-
pervised learning TSD algorithm that uses various
feature types and takes advantage of the task struc-
ture (Section 6). Our algorithm substantially outper-
</bodyText>
<page confidence="0.98519">
325
</page>
<note confidence="0.818592">
Proceedings of the 2010 Conference on Empirical Methods in Natural Language Processing, pages 325–334,
MIT, Massachusetts, USA, 9-11 October 2010. c�2010 Association for Computational Linguistics
</note>
<bodyText confidence="0.998562">
forms the ‘most frequent sense’ baseline (Section 7).
TSD is fundamental to sentence understanding
and thus to NLP applications such as textual infer-
ence, question answering and information retrieval.
To the best of our knowledge, this is the first paper to
address this task. In Section 8 we discuss research
directions relevant to TSD placing the new task in
the context of the previous research of syntactic am-
biguity resolution.
</bodyText>
<sectionHeader confidence="0.995071" genericHeader="introduction">
2 TSD Motivation
</sectionHeader>
<bodyText confidence="0.999977945454546">
In this work we follow linguistics theories that posit
that tense does not directly reflect conceptual time as
one might think. Dinsmore (1991) and Cutrer (1994)
explain that the same tense may end up indicating
very different objective time relations relative to the
sentence production time.
Fauconnier (2007) exemplifies such phenomena.
In the following sentences, the present tense corre-
sponds to the future time: (1) The boat leaves next
week. (2) When he comes tomorrow, I will tell him
about the party. (3) If I see him next week, I will ask
him to call you.
In contrast, the following present tense sentences
talk about events that happened in the past: (1) I am
walking down the street one day when suddenly this
guy walks up to me. (2) He catches the ball. He
runs. He makes a touchdown. (morning-after sports
report).
Another set of examples is related to the past
tense. In the following sentences it corresponds to
a present time: (1) Do you have a minute? I wanted
to ask you a question. (2) I wish I lived closer to my
family now. In contrast, in the following two sen-
tences, it corresponds to a future time: (1) If I had
the time next week, I would go to your party. (2) I
cannot go to the concert tonight. You will have to
tell me how it was.
Fauconnier explains these phenomena by a model
for the grammar of tense. According to this model,
the grammar specifies partial constraints on time and
fact/prediction status that hold locally between men-
tal spaces within a discourse configuration. We may
obtain actual information about time by combining
this with other available pragmatic information. Ac-
cordingly, the same tense may end up indicating
very different objective time relations relative to the
speech event.
TSD fits well with modern linguistics theories.
For example, in the construction grammar frame-
work (Goldberg, 1995), the ‘construction’ is the ba-
sic unit, comprised of a form and a meaning. Words,
multiword expressions, and syntactic forms are all
valid constructions. It is thus very natural to address
the sense disambiguation problem for all of these. In
this paper we focus on tense constructions.
For many NLP applications, it is very important
to disambiguate the tense forms of the sentence.
Among these applications are: (1) machine transla-
tion, as the actual time described by one tense form
in the source language may be described by a dif-
ferent tense form in the target language; (2) under-
standing the order of events in a text; (3) textual en-
tailment, when the optional entailed sentences refer
to the time and/or order of events of the source sen-
tence. Many more examples also exist.
</bodyText>
<sectionHeader confidence="0.991651" genericHeader="method">
3 The TSD Task
</sectionHeader>
<bodyText confidence="0.99859">
In this section we formally define the TSD task, dis-
cuss its nature vs. WSD, and describe various con-
crete task variants.
Task definition. First, some essential terminol-
ogy. The function of syntax is to combine lexi-
cal items (words, multiword expressions) to express
meanings. This function is achieved through syntac-
tic devices. The most common devices in English
are word order, morphology, and the usage of auxil-
iary words. An Abstract Syntactic Form (ASF) is a
particular set of devices that can be used to express a
set of meanings. A Concrete Syntactic Form (CSF)
is a concrete set of words generated by an ASF for
expressing a certain meaning in an utterance1. A
CSF is ambiguous if its generating ASF has more
than one meaning, which is the usual case. In this
case we also say that the ASF is ambiguous.
Here are a few examples. The ‘present progres-
sive’ ASF has the form ‘am/is/are V-ing’2, which
employs all three main devices. It is ambiguous,
</bodyText>
<footnote confidence="0.737103285714286">
1In some linguistic theories, the central notion is the con-
struction, which combines an ASF (referred to as the form of
the construction) with a single meaning (Goldberg, 1995).
2Note that strictly speaking, these are three different ASFs.
We refer to this ASF family by a single name because they have
the same set of meanings and because it is standard to treat them
as a single ASF.
</footnote>
<page confidence="0.998868">
326
</page>
<bodyText confidence="0.999619527777778">
as shown in Section 1. The ‘present simple’ ASF
has the form ‘V(+s)’3, and is ambiguous as well: in
the sentence ‘My Brother arrives this evening’, the
CSF ‘arrives’ conveys the meaning of ‘a future event
arranged for a definite time’, while in the sentence
‘The sun rises in the East’ the meaning is that of a
repeated event.
TSD vs. WSD. The TSD task is to disambiguate
the semantic sense of a tense syntactic form. TSD
is clearly different from WSD. This is obvious when
the CSF comprises two words that are not a multi-
word expression, and is usually also the case when it
comprises a single word. Consider the ‘My Brother
arrives this evening’ example above. While the verb
‘arrive’ has two main senses: ‘reach a place’, and
‘begin’, as in ‘Summer has arrived’, in that example
we focused on the disambiguation of the tense sense
of the ‘arrives’ construction.
Concrete task variants. Unlike with words, the
presence of a particular CSF in a sentence is not
trivially recognizable. Consequently, there are three
versions of the TSD task: (1) we are given the sen-
tence, a marked subset of its words comprising a
CSF, and the ASF that has generated these words;
(2) we are given the sentence and a marked subset
of its words comprising a CSF, without knowing the
generating ASF; (3) we are given only the sentence
and we need to find the contained CSFs and their
ASFs. In all cases, we need to disambiguate the
sense of the ASFs. We feel that the natural granu-
larity of the task is captured by version (2). How-
ever, since the ASF can usually be identified using
relatively simple features, we also report results for
version (1). The main difficulty in all versions is
identifying the appropriate sense, as is the case with
WSD.
</bodyText>
<sectionHeader confidence="0.966377" genericHeader="method">
4 The Syntactic Sense Dictionary
</sectionHeader>
<bodyText confidence="0.998995319148936">
A prerequisite to any concrete experimentation with
the TSD task is a syntactic sense dictionary. Based
on a thorough examination of three major English
grammar projects, we compiled a set of 18 com-
mon English tense ASFs and their possible senses.
The projects are (1) the Cambridge University Press
3Again, these are two ASFs, one adding an ‘s’ and one using
the verb as is.
English Grammar In Use series, comprising three
books (essential, intermediate and advanced) (Mur-
phy, 2007; Murphy, 1994; Hewings, 2005); (2)
the English grammar texts resulting from the sem-
inal corpus-based Cobuild project (elementary, ad-
vanced) (Willis and Wright, 2003; Willis, 2004); (3)
the Longman Grammar of Spoken and Written En-
glish (Biber et al., 1999).
As in any sense dictionary, in many cases it is hard
to draw the line between senses. In order to be able
to explore the computational limits of the task, we
have adopted a policy of fine sense granularity. For
example, senses 1 and 3 of the ‘present simple’ ASF
in Table 1 can be argued to be quite similar to each
other, having a very fine semantic distinction. A spe-
cific application may choose to collapse some senses
into one.
We used the conventional ASF names, which
should not be confused with their meanings (e.g., the
‘present simple’ ASF can be used to refer to future,
not present, events, as in Table 1, sense 4).
The ASF set thus obtained is: real conditionals,
hypothetical conditionals, wishes, reported speech,
present simple, present progressive, present perfect,
present perfect progressive, past simple, past pro-
gressive, past perfect, past perfect progressive, ‘be
+ going + to + infinitive’, future progressive, future
perfect, future perfect progressive, ‘would’ tense
forms, and ‘be + to + infinitive’. Note that the first
four ASFs are not direct tense forms; we include
them because they involve tensed sub-sentences
whose disambiguation is necessary for disambigua-
tion of the whole ASF. The total number of possible
senses for these 18 ASFs is 103.
Table 1 shows the complete senses set for the
‘present simple’ and ‘be + to + infinitive’ ASFs, plus
an example sentence for each sense. Space limita-
tions prevent us from listing all form senses here;
we will make the listing available online.
</bodyText>
<sectionHeader confidence="0.870257" genericHeader="method">
5 Corpus Creation and Annotation
</sectionHeader>
<bodyText confidence="0.9999645">
We selected 3000 sentences from the British Na-
tional Corpus (BNC) (Burnard, 2000), containing
4702 CSFs (1.56 per sentence). These sentences
with their CSFs were sense annotated. To select
the 3000 sentences, we randomly sampled sentences
from the various written and spoken sections of the
</bodyText>
<page confidence="0.992474">
327
</page>
<table confidence="0.899315694444444">
Present Simple
1 Things that are always true
It gets cold in the winter.
2 Regular and repeated actions and habits
My parents often eat meat.
3 General facts
Mr. Brown is a teacher.
4 A future event arrangedfor a definite time
The next train arrives at 11:30.
5 Plans, expectations and hopes
We hope to see you soon.
6 Ordering someone to do something
Take your hands out of your pockets!
7 Something happening now, with verbs that are
not used in the present progressive in this sense
I do not deny the allegation.
8 Events happening now (informal;
common in books, scripts, radio etc.)
She goes up to this man and looks into his eyes.
9 Past actions
I was sitting in the park reading a newspaper
when all of a sudden this dog jumps at me.
10 Newspaper headlines, for recent events
Quake hits central Iran.
11 When describing the content of a book
Thompson gives an exhaustive list in chapter six.
‘be + to + infinitive’
1 Events that are likely to happen in the near future
Police officers are to visit every home in the area.
2 Official arrangements, formal instructions &amp; or-
ders
You are not to leave without my permission.
3 In an if-clause to say that something must
happen before something else can happen
If the human race is to survive, we must look at
environmental problems now.
</table>
<tableCaption confidence="0.9744">
Table 1: The full set of senses of the ‘present simple’
</tableCaption>
<bodyText confidence="0.978186424242424">
and ‘be + to + infinitive’ abstract syntactic forms (ASFs),
with an example for each.
corpus, giving each section an equal weight. To
guarantee ample representation of ASFs, we man-
ually defined auxiliary words typical of each ASF
(e.g., ‘does’, ‘been’ etc), and sampled hundreds of
sentences for each set of these auxiliary words. To
make sure that our definition of auxiliary words does
not skew the sampling process, and to obtain ASFs
that do not have clear auxiliary words, we have also
added 1000 random sentences. The number of CSF
instances obtained for each ASF ranges from 100
(future perfect) to over 850 (present simple). All
senses are represented; the number of senses repre-
sented by at least 15 CSFs is 77 (out of 103, average
number of CSFs per sense is 45.65).
We implemented an interactive application that
displays a sentence and asks an annotator to (1) mark
words that participate in the CSFs contained in the
sentence; (2) specify the ASF(s) of these CSFs; and
(3) select the appropriate ASF sense from the set
of possible senses. Annotators could also indicate
‘none of these senses’, which they did for 2.6% (122
out of 4702) of the CSFs.
Annotation was done by two annotators (univer-
sity students). To evaluate inter-annotator agree-
ment, a set of 210 sentences (7% of the corpus),
containing at least 10 examples of each ASF, was
tagged by both annotators. The CSF+ASF identifi-
cation inter-annotator agreement was 98.7%, and the
inter-annotator agreement for the senses was 84.2%.
We will make the annotated corpus and annotation
guidelines available online.
</bodyText>
<sectionHeader confidence="0.96157" genericHeader="method">
6 Learning Algorithm
</sectionHeader>
<bodyText confidence="0.98757612">
In this section we describe our learning model for
the TSD task. First, note that the syntactic sense is
not easy to deduce from readily computable anno-
tations such as the sentence’s POS tagging, depen-
dency structure, or parse tree (see Section 8). Hence,
a learning algorithm is definitely needed.
As common in supervised learning, we encode the
CSFs into feature vectors and then apply a learning
algorithm to induce a classifier. We first discuss the
feature set and then the algorithm.
Features. We utilize three sets of features: basic
features, lexical features, and a set of features based
on part-of-speech (POS) tags (Table 2). The ‘aux-
iliary words’ referred to in the table are the manu-
ally specified words for each ASF that have assisted
us in sampling the corpus (see Section 5). ‘Content
words’ are the non-auxiliary words appearing in the
CSF4. Content words are usually verbs, since we fo-
cus here on tense-related ASFs. The position and
distance of a form are based on its leftmost word
(auxiliary or content).
The personal pronouns used in the position fea-
tures are: I, you, he, she, it, they, and we. For
4Usually, there is a single content word. However, there may
be more than one, e.g. for phrasal verbs.
</bodyText>
<page confidence="0.994843">
328
</page>
<bodyText confidence="0.999949733333333">
simplicity, we considered every word starting with
a capital letter that is not the first word in the sen-
tence to be a name.
Each ‘Conditional’ CSF contains two tense CSFs.
The one that is not the CSF currently encoded by the
features is referred to as its ‘mate’.
For the time lexical features we used 16 words
(e.g., recently, often, now). For the reported speech
lexical features we used 14 words (e.g., said, replied,
wrote5). The words were obtained from the gram-
mar texts and our corpus development set.
The POS tagset used by the POS-based features is
that of the WSJ PennTreebank (see Section 7). The
possible verb tags in this tagset are: VB for the base
form, VBD for past tense, VBN for past participle,
VBG for a present participle or gerund (-ing), VBP
for present tense that is not 3rd person singular, and
VBZ for present simple 3rd person singular.
Conjunctions and prepositions are addressed
through the POS tags CC and IN. Using the PRP
tag to detect pronouns or lexical lists for conjunc-
tions and prepositions yielded no significant change
in the results.
In Section 7 we explore the impact each of the
feature sets has on the performance of the algorithm.
Our results indicate that the basic features have the
strongest impact, the POS-based features enhance
the performance in specific cases and the lexical fea-
tures only marginally affect the final results.
Algorithm. Denote by xi the feature vector of a
CSF instance i, by Ci the set of possible labels for
xi, and by ci E Ci the correct label. The training
set is {(xj, Cj, cj)}n j�1. Let (xn+1, Cn+1) be a test
CSF. As noted in Section 3, there are two versions
of the task, one in which Ci includes the totality of
sense labels, and one in which it includes only the la-
bels associated with a particular ASF. In both cases,
the task is to select which of the labels in Cn+1 is its
correct label cn+1.
Owing to the task structure, it is preferable to
use an algorithm that allows us to restrict the pos-
sible labels of each CSF. For both task versions, this
would help in computing better probabilities during
the training stage, since we know the ASF type of
training CSFs. For the task version in which the ASF
</bodyText>
<footnote confidence="0.9988135">
5These are all in a past form due to the semantics of the
reported speech form.
</footnote>
<figureCaption confidence="0.801803348837209">
Basic Features
Form words. Auxiliary and content words of the CSF.
Form type. The type, if it is known during test time.
Other forms. The auxiliary and content words (and
type, if known) of the other CSFs present in the sen-
tence.
Position. The position of the CSF in the sentence, its
distance from the end of the sentence, whether it is in
the first (last) three words in the sentence, its distance
from the closest personal pronoun or name.
Wish. Is there a CSF of type ‘wish’ before the en-
coded form, the number of CSFs between that ‘wish’
form and the encoded CSF (if there are several such
‘wish’ forms, we take the closest one to the encoded
form).
Conditional. Does the word ‘if’ appear before the en-
coded form, is the ‘if’ the first word in the sentence,
the number of CSFs between the ‘if’ and the encoded
form, the auxiliary and content words (and type, if
known) of the mate form, is there a comma between
the encoded form and its mate form, does the word
‘then’ appear between the encoded form and its mate
form.
Punctuation. The type of end of sentence marker, dis-
tance of the encoded form from the closest predeces-
sor (successor) comma.
Lexical Features
Time. Time words appearing in the sentence, if any.
Reported speech. Reported speech words appearing
in the sentence, if any.
Be. Does the encoded form contain the verb ‘be’.
Features Based on POS Tags
Form.The POS of the verb in the encoded form.
Other forms. The POS of the verb in the other CSFs
in the sentence.
POS tags. The POS tags of the two words to the left
(right) of the encoded form.
Conjunction POS. Is there a Conjunction (CC) be-
tween the encoded form and its closest predecessor
(successor) form, the distance from that conjunction.
Preposition POS. Is there a Preposition (IN) between
the encoded form and its closest predecessor (succes-
sor) form, the distance from that preposition.
</figureCaption>
<bodyText confidence="0.802313857142857">
Table 2: Basic features (top), lexical features (middle)
and POS tags-based features (bottom) used by the TSD
classifier.
type is known at test time, this would also help dur-
ing the test stage.
For the version in which ASF type is known at test
time, we experimented in two scenarios. In the first,
</bodyText>
<page confidence="0.996088">
329
</page>
<bodyText confidence="0.999982073170732">
we take the ASF type at test time from the manual
annotation and provide it to the algorithm. In the
second, instead of the manual annotation, we imple-
mented a simple rule-based classifier for selecting
ASF types. The classifier decides what is the type of
an ASF according to the POS tag of its verb and to
its auxiliary words (given in the annotation). For ex-
ample, if we see the auxiliary phrase ‘had been’ and
the verb POS is not VBG, then the ASF is ‘past per-
fect simple’. This classifier’s accuracy on our devel-
opment (test) data is 94.1 (91.6)%. In this scenario,
when given a test CSF, X,,,+1, its set of possible la-
bels C,,,+1 is defined by the classifier output. In the
features in which ASF type is used (see table 2), it is
taken from the classifier output in this case.
The sequential model algorithm presented by
Even-Zohar and Roth (2001) directly supports this
label restriction requirement 6. We use the SNOW
learning architecture for multi-class classification
(Roth, 1998), which contains an implementation of
that algorithm. The SNOW system allows us not
to define restrictions if so desired. It also lets us
choose the learning algorithm used when it builds
its classifier network. The algorithm can be Percep-
tron (MacKay, 2002), Winnow (Littlestone, 1988)
or Naive Bayes (MacKay, 2002)7. In Section 7 we
analyze the effect that these decisions have on our
results.
Classifier Selection. Investigating the best config-
uration of the SNOW system with development data,
we found that Naive Bayes gave the best or close
to best result in all experimental conditions. We
therefore report our results when this algorithm is
used. Naive Bayes is particularly useful when rela-
tively small amounts of training CSF instances are
available (Zhang, 2004), and achieves good results
when compared to other classifiers for the WSD task
(Mooney, 1996), which might explain our results.
Fine tuning of Winnow parameters also leads to high
performance (sometimes the best), but most other
parameter configurations lead to disappointing re-
</bodyText>
<footnote confidence="0.463915571428571">
6Note that the name of the learning algorithm is derived
from the fact that it utilizes classifiers to sequentially restrict
the number of competing classes while maintaining with high
probability the presence of the true outcome. The classification
task it performs is not sequential in nature.
7Or a combination of these algorithms, which we did not
explore in this paper.
</footnote>
<bodyText confidence="0.99986425">
sults. For the Perceptron, most parameter config-
urations lead to good results (much better than the
baseline), but these were a few percent worse than
the best Winnow or Naive Bayes results.
</bodyText>
<sectionHeader confidence="0.993135" genericHeader="method">
7 Experimental Results
</sectionHeader>
<bodyText confidence="0.999899057142857">
Experimental setup. We divided the 3000 anno-
tated sentences (containing 4702 CSFs) to three
datasets: training data (2100 sentences, 3183
forms), development data (300 sentences, 498
forms) and test data (600 sentences, 1021 forms).
We used the development data to design the features
for our learning model and to tune the parameters
of the SNOW sequential model. In addition we used
this data to design the rules of the ASF type classifier
(which is not statistical and does not have a training
phase).
For the POS features, we induced POS tags using
the MXPOST POS tagger (Ratnaparkhi, 1996). The
tagger was trained on sections 2-21 of the WSJ Pen-
nTreebank (Marcus et al., 1993) annotated with gold
standard POS tags. We used a publicly available im-
plementation of the sequential SNOW model8.
We experimented in three conditions. In the first
(TypeUnknown), the ASF type is not known at test
time. In the last two, it is known at test time.
These two conditions differ in whether the type is
taken from the gold standard annotation of the test
sentences (TypeKnown), or from the output of the
simple rule-based classifier (TypeClassifier, see Sec-
tion 6). For both conditions, the results reported be-
low are when both ASF type features and possible
labels sets are provided during training by the man-
ual annotation. This is true also for the training of
the MFS baseline (see below)9.
We report an algorithm’s quality using accuracy,
that is, the number of test CSFs that were correctly
resolved by the algorithm divided by the total num-
ber of test CSFs.
Baseline. We compared the performance of our al-
gorithm to the ‘most frequent sense’ (MFS) base-
</bodyText>
<footnote confidence="0.981121166666667">
8http://l2r.cs.uiuc.edu/—cogcomp/asoftware.php?
skey=SNOW
9For the TypeClassifier condition, we also experimented us-
ing an ML technique that sometimes reduces noise, where train-
ing is done using the classifier types. We obtained very similar
results to those reported.
</footnote>
<page confidence="0.989766">
330
</page>
<table confidence="0.998722">
TypeUnknown TypeClassifier TypeKnown
Our algorithm 49.7% 58.8% 62%
MFS baseline 13.5% 42.9% 46.7%
</table>
<tableCaption confidence="0.9751008">
Table 3: Performance of our algorithm and of the MFS
baseline where at test time ASF type is known (right),
unknown (left) or given by a simple rule-based classifier
(middle). Our algorithm is superior in all three condi-
tions.
</tableCaption>
<table confidence="0.999572857142857">
Constrained Model Unconstrained Classifier
All Base+Lexical All Base+Lexical
features features features features
Type 57.9% 57.7% 53% 50.1%
features
No type 57.2% 55.4% 48% 42.6%
features
</table>
<tableCaption confidence="0.982055666666667">
Table 4: Impact of POS features. When the constrained
model is used (left section), POS features have no effect
on the results when ASF type information is encoded.
When an unconstrained classifier is used, POS features
affect the results both when ASF type features are used
and when they are not (see discussion in the text).
</tableCaption>
<bodyText confidence="0.999959873239437">
line. This baseline is common in semantic disam-
biguation tasks and is known to be quite strong. In
the condition where the ASF type is not known at
test time, MFS gives each form in the test set the
sense that was the overall most frequent in the train-
ing set. That is, in this case the baseline gives all
test set CSFs the same sense. When the ASF type
is known at test time, MFS gives each test CSF the
most frequent sense of that ASF type in the training
set. That is, in this case all CSFs having the same
ASF type get the same sense, and forms of different
types are guaranteed to get different senses.
Recall that the condition where ASF type is
known at test time is further divided to two condi-
tions. In the TypeKnown condition, MFS selects the
most frequent sense of the manually created ASF
type, while in the TypeClassifier condition it selects
the most frequent sense of the type decided by the
rule-based classifier. In this condition, if the classi-
fier makes a mistake, MFS will necessarily make a
mistake as well.
Note that a random baseline which selects a sense
for every test CSF from a uniform distribution over
the possible senses (103 in our case) would score
very poorly.
Results. Table 3 shows our results. Results are
shown where ASF type is not known at test time
(left), when it is decided at test time by a rule-based
classifier (middle) and when it is known at test time
(right). Our algorithm outperforms the MFS base-
line in all three conditions. As expected, both our al-
gorithm and the MFS baseline perform better when
ASF type information is available at test time (Type-
Classifier and TypeKnown conditions), and improve
as this data becomes more accurate (the TypeKnown
condition)10.
Analyzing the per-type performance of our algo-
rithm reveals that it outperforms the MFS baseline
for each and every ASF type. For example, in the
TypeKnown condition, the accuracy gain of our al-
gorithm over the baseline11 varies from 4% for the
‘present perfect’ to 30.6% and 29.1% for the ‘past
perfect’ and ‘present simple’ ASFs.
Below we analyze the roles of the different com-
ponents of our learning algorithm in performing the
TSD task. Since this is the first exploration of the
task, it is important to understand what properties
are essential for achieving good performance. The
analysis is done by experimenting with development
data, and focuses on the TypeKnown and TypeUn-
known conditions. Patterns for the TypeClassifier
condition are very similar to the patterns for the
TypeKnown condition.
The Possible Senses Constraint. We use the
learning model of Even-Zohar and Roth (2001),
which allows us to constrain the possible senses
an input vector can get to the senses of its ASF
type. We ran our model without this constraint dur-
ing both training and test time (recall that for the
above results, this constraint was always active dur-
ing training). In this case, the only difference be-
tween the TypeKnown and the TypeUnknown con-
ditions is whether ASF type features are encoded at
test time. In the TypeKnown condition, the accu-
racy of the algorithm drops from 57.9% (when us-
ing training and test time constraints and ASF type
features) to 53% (when using only ASF type fea-
tures but no constraints). In the TypeUnknown con-
dition, accuracy drops from 57.24% (when using
training time constraints) to 48.03% (when neither
constraints nor ASF type features are used). Note
</bodyText>
<footnote confidence="0.967153">
10Recall that the performance of the rule-based ASF type
classifier on test data is not 100% but 91.6% (Section 6).
11accuracy(algorithm) − accuracy(MFS).
</footnote>
<page confidence="0.997816">
331
</page>
<bodyText confidence="0.995712844827586">
that the difference between the constrained model
and the unconstrained model is quite large.
The MFS baseline achieves on development data
42.9% and 13.2% in the TypeKnown and TypeUn-
known conditions respectively12. Thus, the algo-
rithm outperforms the baseline both when the con-
strained model is used and when an unconstrained
multi-class classifier is used.
Note also that when constraints on the possible
labels are available at training time, test time con-
straints and ASF type features (whose inclusion is
the difference between the TypeKnown and Type-
Unknown) have a minor effect on the results (57.9%
for TypeKnown compared to 57.24% for TypeUn-
known). However, when training time constraints
on the possible labels are not available at training
time, ASF type features alone do have a significant
effect on the result (53% for TypeKnown compared
to 48.03% for TypeUnknown).
POS Features. We next explore the impact of the
POS features on the results. These features encode
the inflection of the verbs in the CSF, as well as the
POS tags of the two words to the left and right of the
CSF.
Verb forms provide some partial information cor-
responding to the ASF type features encoded at the
TypeKnown scenario. Table 4 shows that when both
label constraints and ASF type features are used,
POS features have almost no impact on the final re-
sults. When the constrained model is used but ASF
type features are not encoded, POS features have an
effect on the results. We conclude that when using
the constrained model, POS features are important
mainly for ASF type information. When the uncon-
strained classifier is used, POS features have an ef-
fect on performance whether ASF type features are
encoded or not. In the last case the impact of POS
features is larger. In other words, when using an un-
constrained classifier, POS features give more than
ASF type information to to the model.
Lexical Features. To explore the impact of the
lexical features, we removed the following features:
time words, reported speech words and ‘be’ indi-
cation features. We saw no impact on model per-
formance when using the constrained model, and a
12Note that these numbers are for development data only.
0.5% decrease when using the unconstrained classi-
fier. That is, our model does not require these lexical
features, which is somewhat counter-intuitive. Lex-
ical statistics may turn out to be helpful when using
a much larger training set.
Conditional and Wish Features. The condition-
als and ‘wish’ features have a more substantial im-
pact on the results, as they have a role in defining the
overall syntactic structure of the sentence. Discard-
ing these features leads to 4% and 1.4% degradation
in model accuracy when using the constrained and
unconstrained models respectively.
</bodyText>
<sectionHeader confidence="0.998874" genericHeader="method">
8 Relevant Previous Work
</sectionHeader>
<bodyText confidence="0.999921757575757">
As far as we know, this is the first paper to address
the TSD task. In this section we describe related
research directions and compare them with TSD.
A relevant task to TSD is WSD (Section 1 and
Section 3). Many algorithmic approaches and tech-
niques have been applied to supervised WSD (for
reviews see (Agirre and Edmonds, 2006; Mihalcea
and Pedersen, 2005; Navigli, 2009)). Among these
are various classifiers, ensemble methods combin-
ing several supervised classifiers, bootstrapping and
semi-supervised learning methods, using the Web
as a corpus and knowledge-based methods relying
mainly on machine readable dictionaries. Specif-
ically related to this paper are works that exploit
syntax (Martinez et al., 2002; Tanaka et al., 2007)
and ensemble methods (e.g. (Brody et al., 2006))
to WSD. The references above also describe some
unsupervised word sense induction algorithms.
Our TSD algorithm uses the SNOW algorithm,
which is a sparse network of classifiers (Section 6).
Thus, it most resembles the ensemble approach to
WSD. That approach has achieved very good results
in several WSD shared tasks (Pedersen, 2000; Flo-
rian and Yarowsky, 2002).
Since temporal reasoning is a direct applica-
tion of TSD, research on this direction is relevant.
Such research goes back to (Passonneau, 1988),
which introduced the PUNDIT temporal reasoning
system. For each tensed clause, PUNDIT first de-
cides whether it refers to an actual time (as in ‘We
flew TWA to Boston’) or not (as in ‘Tourists flew
TWA to Boston’, or ‘John always flew his own plane
to Boston’). The temporal structure of actual time
</bodyText>
<page confidence="0.993899">
332
</page>
<bodyText confidence="0.999984268292683">
clauses is then further analyzed. PUNDIT’s classi-
fication is much simpler than in the TSD task, ad-
dressing only actual vs. non-actual time. PUNDIT’s
algorithmic approach is that of a Prolog rule based
system, compared to our statistical learning corpus-
based approach. We are not aware of further re-
search that followed their sense disambiguation di-
rection.
Current temporal reasoning research focuses on
temporal ordering of events (e.g., (Lapata, 2006;
Chambers and Jurafsky, 2008)), for which an ac-
cepted atomic task is the identification of the tem-
poral relation between two expressions (see e.g., the
TempEval task in SemEval ’07 (Verhagen et al.,
2007)). This direction is very different from TSD,
which deals with the semantics of individual con-
crete tense syntactic forms. In this sense, TSD is an
even more atomic task for temporal reasoning.
A potential application of TSD is machine trans-
lation where it can assist in translating tense and as-
pect. Indeed several papers have explored tense and
aspect in the MT context. Dorr (1992) explored the
integration of tense and aspect information with lex-
ical semantics for machine translation. Schiehlen
(2000) analyzed the effect tense understanding has
on MT. Ye and Zhang (2005) explored tense tagging
in a cross-lingual context. Ye et al., (2006) extracted
features for tense translation between Chinese and
English. Murata et al., (2007) compared the perfor-
mance of several MT systems in translating tense
and aspect and found that various ML techniques
perform better on the task.
Another related field is ‘deep’ parsing, where a
sentence is annotated with a structure containing in-
formation that might be relevant for semantic inter-
pretation (e.g. (Hajic, 1998; Baldwin et al., 2007)).
TSD senses, however, are not explicitly represented
in these grammatical structures, and we are not
aware of any work that utilized them to do some-
thing close to TSD. This is a good subject for future
research.
</bodyText>
<sectionHeader confidence="0.987675" genericHeader="conclusions">
9 Conclusion and Future Work
</sectionHeader>
<bodyText confidence="0.999604285714286">
In this paper we introduced the Tense Sense Disam-
biguation (TSD) task, defined as selecting the cor-
rect sense of a concrete tense syntactic form in a sen-
tence among the senses of abstract syntactic forms
in a syntactic sense dictionary. Unlike in other se-
mantic disambiguation tasks, the sense to be disam-
biguated is not lexical but of a syntactic structure.
We prepared a syntactic sense dictionary, annotated
a corpus by it, and developed a supervised classifier
for sense disambiguation that outperformed a strong
baseline.
An obvious direction for future work is to expand
the annotated corpus and improve the algorithm by
experimenting with additional features. For exam-
ple, we saw that seeing the full paragraph containing
a sentence helps human annotators decide on the ap-
propriate sense which implies that using larger con-
texts may improve the algorithm.
TSD can be a very useful operation for various
high-level applications, for example textual infer-
ence, question answering, and information retrieval,
in the same way that textual entailment (Dagan et
al., 2006) was designed to be. In fact, TSD can assist
textual entailment as well, since the sense of a tense
form may provide substantial information about the
relations entailed from the sentence. Using TSD
in such applications is a major direction for future
work.
</bodyText>
<sectionHeader confidence="0.998104" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999167272727273">
Eneko Agirre and Philip Edmonds (Eds). 2006. Word
Sense Disambiguation: Algorithms and Applications.
Springer Verlag.
Timothy Baldwin, Mark Dras, Julia Hockenmaier, Tracy
Holloway King, and Gertjan van Noord. 2007. The
Impact of Deep Linguistic Processing on Parsing
Technology. IWPT ’07.
Douglas Biber, Stig Johansson, Geoffrey Leech, Susan
Conard, Edward Finegan. 1999. Longman Grammar
of Spoken and Written English. Longman.
Samuel Brody, Roberto Navigli and Mirella Lapata.
2006. Ensemble Methods for Unsupervised WSD.
ACL-COLING ’06.
Lou Burnard. 2000. The British National Corpus User
Reference Guide. Technical Report, Oxford Univer-
sity.
Nathanael Chambers and Dan Jurafsky. 2008. Jointly
Combining Implicit Constraints Improves Temporal
Ordering. EMNLP ’08.
Michelle Cutrer. 1994. Time and Tense in Narratives and
in Everyday Language. PhD dissertation, University
of California at San Diego.
</reference>
<page confidence="0.991214">
333
</page>
<reference confidence="0.99949047826087">
Ido Dagan, Oren Glickman and Bernardo Magnini. 2006.
The PASCAL Recognising Textual Entailment Chal-
lenge. Lecture Notes in Computer Science 2006,
3944:177-190.
John Dinsmore. 1991. Partitioned representations. Dor-
drecht, Netherlands: Kluwer.
Bonnie Dorr. 1992. A Two-Level Knowledge Repre-
sentation for Machine Translation: Lexical Semantics
and Tense/Aspect. In James Pustejovsky and Sabine
Bergler, editors, Lexical Semantics and Knowledge
Representation.
Yair Even-Zohar and Dan Roth. 2001. A Sequential
Model for Multi-Class Classification. EMNLP ’01.
Gilles Fauconnier. 2007. Mental Spaces. in Dirk Geer-
aerts and Hubert Cuyckens, editors, The Oxford Hand-
book of Cognitive Linguistics.
Radu Florian and David Yarowsky. 2002. Modeling
Consensus: Classifier Combination for Word Sense
Disambiguation. EMNLP ’02.
Adele E. Goldberg. 1995. Constructions: A Construc-
tion Grammar Approach to Argument Structure. Uni-
versity of Chicago Press.
Jan Hajic. 1998. Building a Syntactically Annotated
Corpus: The Prague Dependency Treebank. Issues of
Valency and Meaning, 106–132.
Martin Hewings. 2005. Advanced Grammar in Use, Sec-
ond Edition. Cambridge University University.
Mirella Lapata and Alex Lascarides. 2006. Learning
Sentence-internal Temporal Relations. Journal of Ar-
tificial Intelligence Research, 27:85–117.
Nick Littlestone. 1988. Learning Quickly When Irrele-
vant Attributes Abound: A New Linear-threshold Al-
gorithm. Machine Learning, 285–318.
David MacKay. 2002. Information Theory, Infer-
ence and Learning Algorithms. Cambridge University
Press.
Mitchell P. Marcus, Beatrice Santorini and Mary Ann
Marcinkiewicz. 1993. Building a Large Annotated
Corpus of English: The Penn Treebank. Computa-
tional Linguistics, 19(2):313–330.
David Martinez, Eneko Agirre, Lluis Marquez. 2002.
Syntactic Features for High Precision Word Sense Dis-
ambiguation. COLING ’02.
Rada Mihalcea and Ted Pedersen. 2005. Advances in
Word Sense Disambiguation. Tutorial in ACL ’05.
Raymond J. Mooney. 1996. Comparative Experiments
on Disambiguating Word Senses: An Illustration of
the Role of Bias in Machine Learning. EMNLP ’96.
Masaki Murata, Qing Ma, Kiyotaka Uchimoto, Toshiyuki
Kanamaru and Hitoshi Isahara. 2007. Japanese-to-
English translations of Tense, Aspect, and Modality
Using Machine-Learning Methods and Comparison
with Cachine-Translation Systems on Market. LREC
’07.
Raymond Murphy. 1994. English Grammar In Use, Sec-
ond Edition. Cambridge University Press.
Raymond Murphy. 2007. Essential Grammar In Use,
Third Edition. Cambridge University Press.
Roberto Navigli. 2009. Word Sense Disambiguation: a
Survey. ACM Computing Surveys, 41(2) 1–69.
Rebecca J. Passonneau. 1988. A Computational Model
of Semantics of Tenses and Aspect. Computational
Linguistics, 14(2):44–60.
Ted Pedersen. 2000. A Simple Approach to Building En-
sembles of Naive Bayesian Classifiers for Word Sense
Disambiguation. NAACL ’00.
Adwait Ratnaparkhi. 1996. A Maximum Entropy Part-
Of-Speech Tagger. EMNLP ’06.
Dan Roth. 1998. Learning to Resolve Natural Language
Ambiguities: A Unified Approach. AAAI ’98.
Michael Schiehlen. 2000. Granularity Effects in Tense
Translation. COLING ’00.
Marc Verhagen, Robert Gaizauskas, Frank Schilder,
Mark Hepple, Graham Katz, and James Pustejovsky.
2007. SemEval-2007 Task 15: TempEval Temporal
Relation Identification. ACL ’07.
Takaaki Tanaka, Francis Bond, Timothy Baldwin, Sanae
Fujita and Chikara Hashimoto. 2007. Word Sense
Disambiguation Incorporating Lexical and Structural
Semantic Information. EMNLP-CoNLL ’07.
Dave Willis and Jon Wright. 2003. Collins Cobuild El-
ementary English Grammar, Second Edition. Harper-
Collins Publishers.
Dave Willis. 2004. Collins Cobuild Intermediate English
Grammar, Second Edition. HarperCollins Publishers.
Yang Ye, Victoria Li Fossum and Steven Abney. 2006.
Latent Features in Automatic Tense Translation be-
tween Chinese and English. SIGHAN ’06.
Yang Ye and Zhu Zhang. 2005. Tense Tagging for Verbs
in Cross-Lingual Context: A Case Study. IJCNLP ’05.
Harry Zhang. 2004. The Optimality of Naive Bayes.
FLAIRS ’04.
</reference>
<page confidence="0.999029">
334
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.780444">
<title confidence="0.999484">Tense Sense Disambiguation: a New Syntactic Polysemy Task</title>
<author confidence="0.991067">Roi</author>
<affiliation confidence="0.998215">Hebrew University of</affiliation>
<email confidence="0.965525">roiri@cs.huji.ac.il</email>
<author confidence="0.848863">Ari</author>
<affiliation confidence="0.9989255">Institute of Computer Hebrew University of</affiliation>
<email confidence="0.966808">arir@cs.huji.ac.il</email>
<abstract confidence="0.999797666666667">Polysemy is a major characteristic of natural languages. Like words, syntactic forms can have several meanings. Understanding the correct meaning of a syntactic form is of great importance to many NLP applications. In this paper we address an important type of syntactic polysemy – the multiple possible senses of tense syntactic forms. We make our discussion concrete by introducing the task of Sense Disambiguation given a concrete tense syntactic form present in a sentence, select its appropriate sense among a set of possible senses. Using English grammar textbooks, we compiled a syntactic sense dictionary comprising common tense syntactic forms and semantic senses for each. We annotated thousands of BNC sentences using the defined senses. We describe a supervised TSD algorithm trained on these annotations, which outperforms a strong baseline for the task.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Eneko Agirre</author>
<author>Philip Edmonds</author>
</authors>
<title>Word Sense Disambiguation: Algorithms and Applications.</title>
<date>2006</date>
<publisher>Springer Verlag.</publisher>
<contexts>
<context position="2686" citStr="Agirre and Edmonds, 2006" startWordPosition="424" endWordPosition="427"> address a prominent type of syntactic form polysemy: the multiple possible senses that tense syntactic forms can have. Disambiguating the polysemy of tense forms is of theoretical and practical importance (Section 2). To make our discussion concrete, we introduce the task of Tense Sense Disambiguation (TSD): given a concrete tense syntactic form in a sentence, select its correct sense among a given set of possible senses (Section 3). The disambiguation of polysemy is a fundamental problem in NLP. For example, Word Sense Disambiguation (WSD) continues to attract a large number of researchers (Agirre and Edmonds, 2006). TSD has the same structure as WSD, with different disambiguated entities. For experimenting with the TSD task, we compiled an English syntactic sense dictionary based on a thorough study of three major English grammar projects (Section 4). We selected 3000 sentences from the British National Corpus containing 4702 concrete syntactic forms, and annotated each of these by its sense (Section 5).We developed a supervised learning TSD algorithm that uses various feature types and takes advantage of the task structure (Section 6). Our algorithm substantially outper325 Proceedings of the 2010 Confe</context>
<context position="32930" citStr="Agirre and Edmonds, 2006" startWordPosition="5585" endWordPosition="5588">ave a more substantial impact on the results, as they have a role in defining the overall syntactic structure of the sentence. Discarding these features leads to 4% and 1.4% degradation in model accuracy when using the constrained and unconstrained models respectively. 8 Relevant Previous Work As far as we know, this is the first paper to address the TSD task. In this section we describe related research directions and compare them with TSD. A relevant task to TSD is WSD (Section 1 and Section 3). Many algorithmic approaches and techniques have been applied to supervised WSD (for reviews see (Agirre and Edmonds, 2006; Mihalcea and Pedersen, 2005; Navigli, 2009)). Among these are various classifiers, ensemble methods combining several supervised classifiers, bootstrapping and semi-supervised learning methods, using the Web as a corpus and knowledge-based methods relying mainly on machine readable dictionaries. Specifically related to this paper are works that exploit syntax (Martinez et al., 2002; Tanaka et al., 2007) and ensemble methods (e.g. (Brody et al., 2006)) to WSD. The references above also describe some unsupervised word sense induction algorithms. Our TSD algorithm uses the SNOW algorithm, which</context>
</contexts>
<marker>Agirre, Edmonds, 2006</marker>
<rawString>Eneko Agirre and Philip Edmonds (Eds). 2006. Word Sense Disambiguation: Algorithms and Applications. Springer Verlag.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Timothy Baldwin</author>
<author>Mark Dras</author>
<author>Julia Hockenmaier</author>
<author>Tracy Holloway King</author>
<author>Gertjan van Noord</author>
</authors>
<date>2007</date>
<booktitle>The Impact of Deep Linguistic Processing on Parsing Technology. IWPT ’07.</booktitle>
<marker>Baldwin, Dras, Hockenmaier, King, van Noord, 2007</marker>
<rawString>Timothy Baldwin, Mark Dras, Julia Hockenmaier, Tracy Holloway King, and Gertjan van Noord. 2007. The Impact of Deep Linguistic Processing on Parsing Technology. IWPT ’07.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Douglas Biber</author>
<author>Stig Johansson</author>
<author>Geoffrey Leech</author>
<author>Susan Conard</author>
<author>Edward Finegan</author>
</authors>
<title>Longman Grammar of Spoken and Written English.</title>
<date>1999</date>
<publisher>Longman.</publisher>
<contexts>
<context position="10398" citStr="Biber et al., 1999" startWordPosition="1739" endWordPosition="1742">xamination of three major English grammar projects, we compiled a set of 18 common English tense ASFs and their possible senses. The projects are (1) the Cambridge University Press 3Again, these are two ASFs, one adding an ‘s’ and one using the verb as is. English Grammar In Use series, comprising three books (essential, intermediate and advanced) (Murphy, 2007; Murphy, 1994; Hewings, 2005); (2) the English grammar texts resulting from the seminal corpus-based Cobuild project (elementary, advanced) (Willis and Wright, 2003; Willis, 2004); (3) the Longman Grammar of Spoken and Written English (Biber et al., 1999). As in any sense dictionary, in many cases it is hard to draw the line between senses. In order to be able to explore the computational limits of the task, we have adopted a policy of fine sense granularity. For example, senses 1 and 3 of the ‘present simple’ ASF in Table 1 can be argued to be quite similar to each other, having a very fine semantic distinction. A specific application may choose to collapse some senses into one. We used the conventional ASF names, which should not be confused with their meanings (e.g., the ‘present simple’ ASF can be used to refer to future, not present, even</context>
</contexts>
<marker>Biber, Johansson, Leech, Conard, Finegan, 1999</marker>
<rawString>Douglas Biber, Stig Johansson, Geoffrey Leech, Susan Conard, Edward Finegan. 1999. Longman Grammar of Spoken and Written English. Longman.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Samuel Brody</author>
<author>Roberto Navigli</author>
<author>Mirella Lapata</author>
</authors>
<title>Ensemble Methods for Unsupervised WSD.</title>
<date>2006</date>
<journal>ACL-COLING</journal>
<volume>06</volume>
<contexts>
<context position="33386" citStr="Brody et al., 2006" startWordPosition="5650" endWordPosition="5653"> to TSD is WSD (Section 1 and Section 3). Many algorithmic approaches and techniques have been applied to supervised WSD (for reviews see (Agirre and Edmonds, 2006; Mihalcea and Pedersen, 2005; Navigli, 2009)). Among these are various classifiers, ensemble methods combining several supervised classifiers, bootstrapping and semi-supervised learning methods, using the Web as a corpus and knowledge-based methods relying mainly on machine readable dictionaries. Specifically related to this paper are works that exploit syntax (Martinez et al., 2002; Tanaka et al., 2007) and ensemble methods (e.g. (Brody et al., 2006)) to WSD. The references above also describe some unsupervised word sense induction algorithms. Our TSD algorithm uses the SNOW algorithm, which is a sparse network of classifiers (Section 6). Thus, it most resembles the ensemble approach to WSD. That approach has achieved very good results in several WSD shared tasks (Pedersen, 2000; Florian and Yarowsky, 2002). Since temporal reasoning is a direct application of TSD, research on this direction is relevant. Such research goes back to (Passonneau, 1988), which introduced the PUNDIT temporal reasoning system. For each tensed clause, PUNDIT firs</context>
</contexts>
<marker>Brody, Navigli, Lapata, 2006</marker>
<rawString>Samuel Brody, Roberto Navigli and Mirella Lapata. 2006. Ensemble Methods for Unsupervised WSD. ACL-COLING ’06.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Lou Burnard</author>
</authors>
<title>The British National Corpus User Reference Guide.</title>
<date>2000</date>
<tech>Technical Report,</tech>
<institution>Oxford University.</institution>
<contexts>
<context position="12034" citStr="Burnard, 2000" startWordPosition="2015" endWordPosition="2016">tive’. Note that the first four ASFs are not direct tense forms; we include them because they involve tensed sub-sentences whose disambiguation is necessary for disambiguation of the whole ASF. The total number of possible senses for these 18 ASFs is 103. Table 1 shows the complete senses set for the ‘present simple’ and ‘be + to + infinitive’ ASFs, plus an example sentence for each sense. Space limitations prevent us from listing all form senses here; we will make the listing available online. 5 Corpus Creation and Annotation We selected 3000 sentences from the British National Corpus (BNC) (Burnard, 2000), containing 4702 CSFs (1.56 per sentence). These sentences with their CSFs were sense annotated. To select the 3000 sentences, we randomly sampled sentences from the various written and spoken sections of the 327 Present Simple 1 Things that are always true It gets cold in the winter. 2 Regular and repeated actions and habits My parents often eat meat. 3 General facts Mr. Brown is a teacher. 4 A future event arrangedfor a definite time The next train arrives at 11:30. 5 Plans, expectations and hopes We hope to see you soon. 6 Ordering someone to do something Take your hands out of your pocket</context>
</contexts>
<marker>Burnard, 2000</marker>
<rawString>Lou Burnard. 2000. The British National Corpus User Reference Guide. Technical Report, Oxford University.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nathanael Chambers</author>
<author>Dan Jurafsky</author>
</authors>
<title>Jointly Combining Implicit Constraints Improves Temporal Ordering.</title>
<date>2008</date>
<journal>EMNLP</journal>
<volume>08</volume>
<contexts>
<context position="34681" citStr="Chambers and Jurafsky, 2008" startWordPosition="5858" endWordPosition="5861">o Boston’) or not (as in ‘Tourists flew TWA to Boston’, or ‘John always flew his own plane to Boston’). The temporal structure of actual time 332 clauses is then further analyzed. PUNDIT’s classification is much simpler than in the TSD task, addressing only actual vs. non-actual time. PUNDIT’s algorithmic approach is that of a Prolog rule based system, compared to our statistical learning corpusbased approach. We are not aware of further research that followed their sense disambiguation direction. Current temporal reasoning research focuses on temporal ordering of events (e.g., (Lapata, 2006; Chambers and Jurafsky, 2008)), for which an accepted atomic task is the identification of the temporal relation between two expressions (see e.g., the TempEval task in SemEval ’07 (Verhagen et al., 2007)). This direction is very different from TSD, which deals with the semantics of individual concrete tense syntactic forms. In this sense, TSD is an even more atomic task for temporal reasoning. A potential application of TSD is machine translation where it can assist in translating tense and aspect. Indeed several papers have explored tense and aspect in the MT context. Dorr (1992) explored the integration of tense and as</context>
</contexts>
<marker>Chambers, Jurafsky, 2008</marker>
<rawString>Nathanael Chambers and Dan Jurafsky. 2008. Jointly Combining Implicit Constraints Improves Temporal Ordering. EMNLP ’08.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michelle Cutrer</author>
</authors>
<title>Time and Tense in Narratives and in Everyday Language.</title>
<date>1994</date>
<institution>University of California at San Diego.</institution>
<note>PhD dissertation,</note>
<contexts>
<context position="4064" citStr="Cutrer (1994)" startWordPosition="642" endWordPosition="643">s forms the ‘most frequent sense’ baseline (Section 7). TSD is fundamental to sentence understanding and thus to NLP applications such as textual inference, question answering and information retrieval. To the best of our knowledge, this is the first paper to address this task. In Section 8 we discuss research directions relevant to TSD placing the new task in the context of the previous research of syntactic ambiguity resolution. 2 TSD Motivation In this work we follow linguistics theories that posit that tense does not directly reflect conceptual time as one might think. Dinsmore (1991) and Cutrer (1994) explain that the same tense may end up indicating very different objective time relations relative to the sentence production time. Fauconnier (2007) exemplifies such phenomena. In the following sentences, the present tense corresponds to the future time: (1) The boat leaves next week. (2) When he comes tomorrow, I will tell him about the party. (3) If I see him next week, I will ask him to call you. In contrast, the following present tense sentences talk about events that happened in the past: (1) I am walking down the street one day when suddenly this guy walks up to me. (2) He catches the </context>
</contexts>
<marker>Cutrer, 1994</marker>
<rawString>Michelle Cutrer. 1994. Time and Tense in Narratives and in Everyday Language. PhD dissertation, University of California at San Diego.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ido Dagan</author>
<author>Oren Glickman</author>
<author>Bernardo Magnini</author>
</authors>
<title>The PASCAL Recognising Textual Entailment Challenge.</title>
<date>2006</date>
<journal>Lecture Notes in Computer Science</journal>
<pages>3944--177</pages>
<marker>Dagan, Glickman, Magnini, 2006</marker>
<rawString>Ido Dagan, Oren Glickman and Bernardo Magnini. 2006. The PASCAL Recognising Textual Entailment Challenge. Lecture Notes in Computer Science 2006, 3944:177-190.</rawString>
</citation>
<citation valid="true">
<authors>
<author>John Dinsmore</author>
</authors>
<title>Partitioned representations.</title>
<date>1991</date>
<publisher>Kluwer.</publisher>
<location>Dordrecht, Netherlands:</location>
<contexts>
<context position="4046" citStr="Dinsmore (1991)" startWordPosition="639" endWordPosition="640">utational Linguistics forms the ‘most frequent sense’ baseline (Section 7). TSD is fundamental to sentence understanding and thus to NLP applications such as textual inference, question answering and information retrieval. To the best of our knowledge, this is the first paper to address this task. In Section 8 we discuss research directions relevant to TSD placing the new task in the context of the previous research of syntactic ambiguity resolution. 2 TSD Motivation In this work we follow linguistics theories that posit that tense does not directly reflect conceptual time as one might think. Dinsmore (1991) and Cutrer (1994) explain that the same tense may end up indicating very different objective time relations relative to the sentence production time. Fauconnier (2007) exemplifies such phenomena. In the following sentences, the present tense corresponds to the future time: (1) The boat leaves next week. (2) When he comes tomorrow, I will tell him about the party. (3) If I see him next week, I will ask him to call you. In contrast, the following present tense sentences talk about events that happened in the past: (1) I am walking down the street one day when suddenly this guy walks up to me. (</context>
</contexts>
<marker>Dinsmore, 1991</marker>
<rawString>John Dinsmore. 1991. Partitioned representations. Dordrecht, Netherlands: Kluwer.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Bonnie Dorr</author>
</authors>
<title>A Two-Level Knowledge Representation for Machine Translation: Lexical Semantics and Tense/Aspect.</title>
<date>1992</date>
<booktitle>In James Pustejovsky and Sabine Bergler, editors, Lexical Semantics and Knowledge Representation.</booktitle>
<contexts>
<context position="35240" citStr="Dorr (1992)" startWordPosition="5955" endWordPosition="5956">s (e.g., (Lapata, 2006; Chambers and Jurafsky, 2008)), for which an accepted atomic task is the identification of the temporal relation between two expressions (see e.g., the TempEval task in SemEval ’07 (Verhagen et al., 2007)). This direction is very different from TSD, which deals with the semantics of individual concrete tense syntactic forms. In this sense, TSD is an even more atomic task for temporal reasoning. A potential application of TSD is machine translation where it can assist in translating tense and aspect. Indeed several papers have explored tense and aspect in the MT context. Dorr (1992) explored the integration of tense and aspect information with lexical semantics for machine translation. Schiehlen (2000) analyzed the effect tense understanding has on MT. Ye and Zhang (2005) explored tense tagging in a cross-lingual context. Ye et al., (2006) extracted features for tense translation between Chinese and English. Murata et al., (2007) compared the performance of several MT systems in translating tense and aspect and found that various ML techniques perform better on the task. Another related field is ‘deep’ parsing, where a sentence is annotated with a structure containing in</context>
</contexts>
<marker>Dorr, 1992</marker>
<rawString>Bonnie Dorr. 1992. A Two-Level Knowledge Representation for Machine Translation: Lexical Semantics and Tense/Aspect. In James Pustejovsky and Sabine Bergler, editors, Lexical Semantics and Knowledge Representation.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yair Even-Zohar</author>
<author>Dan Roth</author>
</authors>
<title>A Sequential Model for Multi-Class Classification.</title>
<date>2001</date>
<journal>EMNLP</journal>
<volume>01</volume>
<contexts>
<context position="21718" citStr="Even-Zohar and Roth (2001)" startWordPosition="3724" endWordPosition="3727">r decides what is the type of an ASF according to the POS tag of its verb and to its auxiliary words (given in the annotation). For example, if we see the auxiliary phrase ‘had been’ and the verb POS is not VBG, then the ASF is ‘past perfect simple’. This classifier’s accuracy on our development (test) data is 94.1 (91.6)%. In this scenario, when given a test CSF, X,,,+1, its set of possible labels C,,,+1 is defined by the classifier output. In the features in which ASF type is used (see table 2), it is taken from the classifier output in this case. The sequential model algorithm presented by Even-Zohar and Roth (2001) directly supports this label restriction requirement 6. We use the SNOW learning architecture for multi-class classification (Roth, 1998), which contains an implementation of that algorithm. The SNOW system allows us not to define restrictions if so desired. It also lets us choose the learning algorithm used when it builds its classifier network. The algorithm can be Perceptron (MacKay, 2002), Winnow (Littlestone, 1988) or Naive Bayes (MacKay, 2002)7. In Section 7 we analyze the effect that these decisions have on our results. Classifier Selection. Investigating the best configuration of the </context>
<context position="28867" citStr="Even-Zohar and Roth (2001)" startWordPosition="4903" endWordPosition="4906"> 30.6% and 29.1% for the ‘past perfect’ and ‘present simple’ ASFs. Below we analyze the roles of the different components of our learning algorithm in performing the TSD task. Since this is the first exploration of the task, it is important to understand what properties are essential for achieving good performance. The analysis is done by experimenting with development data, and focuses on the TypeKnown and TypeUnknown conditions. Patterns for the TypeClassifier condition are very similar to the patterns for the TypeKnown condition. The Possible Senses Constraint. We use the learning model of Even-Zohar and Roth (2001), which allows us to constrain the possible senses an input vector can get to the senses of its ASF type. We ran our model without this constraint during both training and test time (recall that for the above results, this constraint was always active during training). In this case, the only difference between the TypeKnown and the TypeUnknown conditions is whether ASF type features are encoded at test time. In the TypeKnown condition, the accuracy of the algorithm drops from 57.9% (when using training and test time constraints and ASF type features) to 53% (when using only ASF type features b</context>
</contexts>
<marker>Even-Zohar, Roth, 2001</marker>
<rawString>Yair Even-Zohar and Dan Roth. 2001. A Sequential Model for Multi-Class Classification. EMNLP ’01.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Gilles Fauconnier</author>
</authors>
<title>Mental Spaces.</title>
<date>2007</date>
<booktitle>in Dirk Geeraerts and Hubert Cuyckens, editors, The Oxford Handbook of Cognitive Linguistics.</booktitle>
<contexts>
<context position="4214" citStr="Fauconnier (2007)" startWordPosition="664" endWordPosition="665">inference, question answering and information retrieval. To the best of our knowledge, this is the first paper to address this task. In Section 8 we discuss research directions relevant to TSD placing the new task in the context of the previous research of syntactic ambiguity resolution. 2 TSD Motivation In this work we follow linguistics theories that posit that tense does not directly reflect conceptual time as one might think. Dinsmore (1991) and Cutrer (1994) explain that the same tense may end up indicating very different objective time relations relative to the sentence production time. Fauconnier (2007) exemplifies such phenomena. In the following sentences, the present tense corresponds to the future time: (1) The boat leaves next week. (2) When he comes tomorrow, I will tell him about the party. (3) If I see him next week, I will ask him to call you. In contrast, the following present tense sentences talk about events that happened in the past: (1) I am walking down the street one day when suddenly this guy walks up to me. (2) He catches the ball. He runs. He makes a touchdown. (morning-after sports report). Another set of examples is related to the past tense. In the following sentences i</context>
</contexts>
<marker>Fauconnier, 2007</marker>
<rawString>Gilles Fauconnier. 2007. Mental Spaces. in Dirk Geeraerts and Hubert Cuyckens, editors, The Oxford Handbook of Cognitive Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Radu Florian</author>
<author>David Yarowsky</author>
</authors>
<title>Modeling Consensus: Classifier Combination for Word Sense Disambiguation.</title>
<date>2002</date>
<journal>EMNLP</journal>
<volume>02</volume>
<contexts>
<context position="33750" citStr="Florian and Yarowsky, 2002" startWordPosition="5706" endWordPosition="5710">s, using the Web as a corpus and knowledge-based methods relying mainly on machine readable dictionaries. Specifically related to this paper are works that exploit syntax (Martinez et al., 2002; Tanaka et al., 2007) and ensemble methods (e.g. (Brody et al., 2006)) to WSD. The references above also describe some unsupervised word sense induction algorithms. Our TSD algorithm uses the SNOW algorithm, which is a sparse network of classifiers (Section 6). Thus, it most resembles the ensemble approach to WSD. That approach has achieved very good results in several WSD shared tasks (Pedersen, 2000; Florian and Yarowsky, 2002). Since temporal reasoning is a direct application of TSD, research on this direction is relevant. Such research goes back to (Passonneau, 1988), which introduced the PUNDIT temporal reasoning system. For each tensed clause, PUNDIT first decides whether it refers to an actual time (as in ‘We flew TWA to Boston’) or not (as in ‘Tourists flew TWA to Boston’, or ‘John always flew his own plane to Boston’). The temporal structure of actual time 332 clauses is then further analyzed. PUNDIT’s classification is much simpler than in the TSD task, addressing only actual vs. non-actual time. PUNDIT’s al</context>
</contexts>
<marker>Florian, Yarowsky, 2002</marker>
<rawString>Radu Florian and David Yarowsky. 2002. Modeling Consensus: Classifier Combination for Word Sense Disambiguation. EMNLP ’02.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Adele E Goldberg</author>
</authors>
<title>Constructions: A Construction Grammar Approach to Argument Structure.</title>
<date>1995</date>
<publisher>University of Chicago Press.</publisher>
<contexts>
<context position="1282" citStr="Goldberg, 1995" startWordPosition="194" endWordPosition="196"> concrete tense syntactic form present in a sentence, select its appropriate sense among a set of possible senses. Using English grammar textbooks, we compiled a syntactic sense dictionary comprising common tense syntactic forms and semantic senses for each. We annotated thousands of BNC sentences using the defined senses. We describe a supervised TSD algorithm trained on these annotations, which outperforms a strong baseline for the task. 1 Introduction The function of syntax is to combine words to express meanings, using syntactic devices such as word order, auxiliary words, and morphology (Goldberg, 1995). Virtually all natural language devices used for expressing meanings (e.g., words) exhibit polysemy. Like words, concrete syntactic forms (the sentence words generated by specific syntactic devices) can have several meanings. Consider the following sentences: (a) They are playing chess in the park. (b) They are playing chess next Tuesday. Both contain the concrete syntactic form ‘are playing’, generated by the abstract syntactic form usually known as ‘present progressive’ (am/is/are + Ving). In (a), the meaning is ‘something happening now’, while in (b) it is ‘a plan to do something in the fu</context>
<context position="5753" citStr="Goldberg, 1995" startWordPosition="934" endWordPosition="935">e to tell me how it was. Fauconnier explains these phenomena by a model for the grammar of tense. According to this model, the grammar specifies partial constraints on time and fact/prediction status that hold locally between mental spaces within a discourse configuration. We may obtain actual information about time by combining this with other available pragmatic information. Accordingly, the same tense may end up indicating very different objective time relations relative to the speech event. TSD fits well with modern linguistics theories. For example, in the construction grammar framework (Goldberg, 1995), the ‘construction’ is the basic unit, comprised of a form and a meaning. Words, multiword expressions, and syntactic forms are all valid constructions. It is thus very natural to address the sense disambiguation problem for all of these. In this paper we focus on tense constructions. For many NLP applications, it is very important to disambiguate the tense forms of the sentence. Among these applications are: (1) machine translation, as the actual time described by one tense form in the source language may be described by a different tense form in the target language; (2) understanding the or</context>
<context position="7682" citStr="Goldberg, 1995" startWordPosition="1268" endWordPosition="1269">s a set of meanings. A Concrete Syntactic Form (CSF) is a concrete set of words generated by an ASF for expressing a certain meaning in an utterance1. A CSF is ambiguous if its generating ASF has more than one meaning, which is the usual case. In this case we also say that the ASF is ambiguous. Here are a few examples. The ‘present progressive’ ASF has the form ‘am/is/are V-ing’2, which employs all three main devices. It is ambiguous, 1In some linguistic theories, the central notion is the construction, which combines an ASF (referred to as the form of the construction) with a single meaning (Goldberg, 1995). 2Note that strictly speaking, these are three different ASFs. We refer to this ASF family by a single name because they have the same set of meanings and because it is standard to treat them as a single ASF. 326 as shown in Section 1. The ‘present simple’ ASF has the form ‘V(+s)’3, and is ambiguous as well: in the sentence ‘My Brother arrives this evening’, the CSF ‘arrives’ conveys the meaning of ‘a future event arranged for a definite time’, while in the sentence ‘The sun rises in the East’ the meaning is that of a repeated event. TSD vs. WSD. The TSD task is to disambiguate the semantic s</context>
</contexts>
<marker>Goldberg, 1995</marker>
<rawString>Adele E. Goldberg. 1995. Constructions: A Construction Grammar Approach to Argument Structure. University of Chicago Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jan Hajic</author>
</authors>
<title>Building a Syntactically Annotated Corpus: The Prague Dependency Treebank. Issues of Valency and Meaning,</title>
<date>1998</date>
<pages>106--132</pages>
<contexts>
<context position="35919" citStr="Hajic, 1998" startWordPosition="6060" endWordPosition="6061">al semantics for machine translation. Schiehlen (2000) analyzed the effect tense understanding has on MT. Ye and Zhang (2005) explored tense tagging in a cross-lingual context. Ye et al., (2006) extracted features for tense translation between Chinese and English. Murata et al., (2007) compared the performance of several MT systems in translating tense and aspect and found that various ML techniques perform better on the task. Another related field is ‘deep’ parsing, where a sentence is annotated with a structure containing information that might be relevant for semantic interpretation (e.g. (Hajic, 1998; Baldwin et al., 2007)). TSD senses, however, are not explicitly represented in these grammatical structures, and we are not aware of any work that utilized them to do something close to TSD. This is a good subject for future research. 9 Conclusion and Future Work In this paper we introduced the Tense Sense Disambiguation (TSD) task, defined as selecting the correct sense of a concrete tense syntactic form in a sentence among the senses of abstract syntactic forms in a syntactic sense dictionary. Unlike in other semantic disambiguation tasks, the sense to be disambiguated is not lexical but o</context>
</contexts>
<marker>Hajic, 1998</marker>
<rawString>Jan Hajic. 1998. Building a Syntactically Annotated Corpus: The Prague Dependency Treebank. Issues of Valency and Meaning, 106–132.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Martin Hewings</author>
</authors>
<title>Advanced Grammar in Use, Second Edition.</title>
<date>2005</date>
<institution>Cambridge University University.</institution>
<contexts>
<context position="10172" citStr="Hewings, 2005" startWordPosition="1705" endWordPosition="1706">sions is identifying the appropriate sense, as is the case with WSD. 4 The Syntactic Sense Dictionary A prerequisite to any concrete experimentation with the TSD task is a syntactic sense dictionary. Based on a thorough examination of three major English grammar projects, we compiled a set of 18 common English tense ASFs and their possible senses. The projects are (1) the Cambridge University Press 3Again, these are two ASFs, one adding an ‘s’ and one using the verb as is. English Grammar In Use series, comprising three books (essential, intermediate and advanced) (Murphy, 2007; Murphy, 1994; Hewings, 2005); (2) the English grammar texts resulting from the seminal corpus-based Cobuild project (elementary, advanced) (Willis and Wright, 2003; Willis, 2004); (3) the Longman Grammar of Spoken and Written English (Biber et al., 1999). As in any sense dictionary, in many cases it is hard to draw the line between senses. In order to be able to explore the computational limits of the task, we have adopted a policy of fine sense granularity. For example, senses 1 and 3 of the ‘present simple’ ASF in Table 1 can be argued to be quite similar to each other, having a very fine semantic distinction. A specif</context>
</contexts>
<marker>Hewings, 2005</marker>
<rawString>Martin Hewings. 2005. Advanced Grammar in Use, Second Edition. Cambridge University University.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mirella Lapata</author>
<author>Alex Lascarides</author>
</authors>
<title>Learning Sentence-internal Temporal Relations.</title>
<date>2006</date>
<journal>Journal of Artificial Intelligence Research,</journal>
<pages>27--85</pages>
<marker>Lapata, Lascarides, 2006</marker>
<rawString>Mirella Lapata and Alex Lascarides. 2006. Learning Sentence-internal Temporal Relations. Journal of Artificial Intelligence Research, 27:85–117.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nick Littlestone</author>
</authors>
<title>Learning Quickly When Irrelevant Attributes Abound: A New Linear-threshold Algorithm.</title>
<date>1988</date>
<booktitle>Machine Learning,</booktitle>
<pages>285--318</pages>
<contexts>
<context position="22142" citStr="Littlestone, 1988" startWordPosition="3789" endWordPosition="3790">ifier output. In the features in which ASF type is used (see table 2), it is taken from the classifier output in this case. The sequential model algorithm presented by Even-Zohar and Roth (2001) directly supports this label restriction requirement 6. We use the SNOW learning architecture for multi-class classification (Roth, 1998), which contains an implementation of that algorithm. The SNOW system allows us not to define restrictions if so desired. It also lets us choose the learning algorithm used when it builds its classifier network. The algorithm can be Perceptron (MacKay, 2002), Winnow (Littlestone, 1988) or Naive Bayes (MacKay, 2002)7. In Section 7 we analyze the effect that these decisions have on our results. Classifier Selection. Investigating the best configuration of the SNOW system with development data, we found that Naive Bayes gave the best or close to best result in all experimental conditions. We therefore report our results when this algorithm is used. Naive Bayes is particularly useful when relatively small amounts of training CSF instances are available (Zhang, 2004), and achieves good results when compared to other classifiers for the WSD task (Mooney, 1996), which might explai</context>
</contexts>
<marker>Littlestone, 1988</marker>
<rawString>Nick Littlestone. 1988. Learning Quickly When Irrelevant Attributes Abound: A New Linear-threshold Algorithm. Machine Learning, 285–318.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David MacKay</author>
</authors>
<title>Information Theory, Inference and Learning Algorithms.</title>
<date>2002</date>
<publisher>Cambridge University Press.</publisher>
<contexts>
<context position="22114" citStr="MacKay, 2002" startWordPosition="3786" endWordPosition="3787">is defined by the classifier output. In the features in which ASF type is used (see table 2), it is taken from the classifier output in this case. The sequential model algorithm presented by Even-Zohar and Roth (2001) directly supports this label restriction requirement 6. We use the SNOW learning architecture for multi-class classification (Roth, 1998), which contains an implementation of that algorithm. The SNOW system allows us not to define restrictions if so desired. It also lets us choose the learning algorithm used when it builds its classifier network. The algorithm can be Perceptron (MacKay, 2002), Winnow (Littlestone, 1988) or Naive Bayes (MacKay, 2002)7. In Section 7 we analyze the effect that these decisions have on our results. Classifier Selection. Investigating the best configuration of the SNOW system with development data, we found that Naive Bayes gave the best or close to best result in all experimental conditions. We therefore report our results when this algorithm is used. Naive Bayes is particularly useful when relatively small amounts of training CSF instances are available (Zhang, 2004), and achieves good results when compared to other classifiers for the WSD task (Moone</context>
</contexts>
<marker>MacKay, 2002</marker>
<rawString>David MacKay. 2002. Information Theory, Inference and Learning Algorithms. Cambridge University Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mitchell P Marcus</author>
<author>Beatrice Santorini</author>
<author>Mary Ann Marcinkiewicz</author>
</authors>
<title>Building a Large Annotated Corpus of English: The Penn Treebank. Computational Linguistics,</title>
<date>1993</date>
<contexts>
<context position="24177" citStr="Marcus et al., 1993" startWordPosition="4116" endWordPosition="4119">containing 4702 CSFs) to three datasets: training data (2100 sentences, 3183 forms), development data (300 sentences, 498 forms) and test data (600 sentences, 1021 forms). We used the development data to design the features for our learning model and to tune the parameters of the SNOW sequential model. In addition we used this data to design the rules of the ASF type classifier (which is not statistical and does not have a training phase). For the POS features, we induced POS tags using the MXPOST POS tagger (Ratnaparkhi, 1996). The tagger was trained on sections 2-21 of the WSJ PennTreebank (Marcus et al., 1993) annotated with gold standard POS tags. We used a publicly available implementation of the sequential SNOW model8. We experimented in three conditions. In the first (TypeUnknown), the ASF type is not known at test time. In the last two, it is known at test time. These two conditions differ in whether the type is taken from the gold standard annotation of the test sentences (TypeKnown), or from the output of the simple rule-based classifier (TypeClassifier, see Section 6). For both conditions, the results reported below are when both ASF type features and possible labels sets are provided durin</context>
</contexts>
<marker>Marcus, Santorini, Marcinkiewicz, 1993</marker>
<rawString>Mitchell P. Marcus, Beatrice Santorini and Mary Ann Marcinkiewicz. 1993. Building a Large Annotated Corpus of English: The Penn Treebank. Computational Linguistics, 19(2):313–330.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David Martinez</author>
</authors>
<title>Eneko Agirre, Lluis Marquez.</title>
<date>2002</date>
<journal>COLING</journal>
<volume>02</volume>
<marker>Martinez, 2002</marker>
<rawString>David Martinez, Eneko Agirre, Lluis Marquez. 2002. Syntactic Features for High Precision Word Sense Disambiguation. COLING ’02.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Rada Mihalcea</author>
<author>Ted Pedersen</author>
</authors>
<date>2005</date>
<booktitle>Advances in Word Sense Disambiguation. Tutorial in ACL ’05.</booktitle>
<contexts>
<context position="32959" citStr="Mihalcea and Pedersen, 2005" startWordPosition="5589" endWordPosition="5592">act on the results, as they have a role in defining the overall syntactic structure of the sentence. Discarding these features leads to 4% and 1.4% degradation in model accuracy when using the constrained and unconstrained models respectively. 8 Relevant Previous Work As far as we know, this is the first paper to address the TSD task. In this section we describe related research directions and compare them with TSD. A relevant task to TSD is WSD (Section 1 and Section 3). Many algorithmic approaches and techniques have been applied to supervised WSD (for reviews see (Agirre and Edmonds, 2006; Mihalcea and Pedersen, 2005; Navigli, 2009)). Among these are various classifiers, ensemble methods combining several supervised classifiers, bootstrapping and semi-supervised learning methods, using the Web as a corpus and knowledge-based methods relying mainly on machine readable dictionaries. Specifically related to this paper are works that exploit syntax (Martinez et al., 2002; Tanaka et al., 2007) and ensemble methods (e.g. (Brody et al., 2006)) to WSD. The references above also describe some unsupervised word sense induction algorithms. Our TSD algorithm uses the SNOW algorithm, which is a sparse network of class</context>
</contexts>
<marker>Mihalcea, Pedersen, 2005</marker>
<rawString>Rada Mihalcea and Ted Pedersen. 2005. Advances in Word Sense Disambiguation. Tutorial in ACL ’05.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Raymond J Mooney</author>
</authors>
<title>Comparative Experiments on Disambiguating Word Senses: An Illustration of the Role of Bias</title>
<date>1996</date>
<booktitle>in Machine Learning. EMNLP ’96.</booktitle>
<contexts>
<context position="22722" citStr="Mooney, 1996" startWordPosition="3882" endWordPosition="3883">2002), Winnow (Littlestone, 1988) or Naive Bayes (MacKay, 2002)7. In Section 7 we analyze the effect that these decisions have on our results. Classifier Selection. Investigating the best configuration of the SNOW system with development data, we found that Naive Bayes gave the best or close to best result in all experimental conditions. We therefore report our results when this algorithm is used. Naive Bayes is particularly useful when relatively small amounts of training CSF instances are available (Zhang, 2004), and achieves good results when compared to other classifiers for the WSD task (Mooney, 1996), which might explain our results. Fine tuning of Winnow parameters also leads to high performance (sometimes the best), but most other parameter configurations lead to disappointing re6Note that the name of the learning algorithm is derived from the fact that it utilizes classifiers to sequentially restrict the number of competing classes while maintaining with high probability the presence of the true outcome. The classification task it performs is not sequential in nature. 7Or a combination of these algorithms, which we did not explore in this paper. sults. For the Perceptron, most paramete</context>
</contexts>
<marker>Mooney, 1996</marker>
<rawString>Raymond J. Mooney. 1996. Comparative Experiments on Disambiguating Word Senses: An Illustration of the Role of Bias in Machine Learning. EMNLP ’96.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Masaki Murata</author>
<author>Qing Ma</author>
</authors>
<title>Kiyotaka Uchimoto, Toshiyuki Kanamaru and Hitoshi Isahara.</title>
<date>2007</date>
<booktitle>Japanese-toEnglish translations of Tense, Aspect, and Modality Using Machine-Learning Methods and Comparison with Cachine-Translation Systems on Market. LREC ’07.</booktitle>
<marker>Murata, Ma, 2007</marker>
<rawString>Masaki Murata, Qing Ma, Kiyotaka Uchimoto, Toshiyuki Kanamaru and Hitoshi Isahara. 2007. Japanese-toEnglish translations of Tense, Aspect, and Modality Using Machine-Learning Methods and Comparison with Cachine-Translation Systems on Market. LREC ’07.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Raymond Murphy</author>
</authors>
<title>English Grammar In Use, Second Edition.</title>
<date>1994</date>
<publisher>Cambridge University Press.</publisher>
<contexts>
<context position="10156" citStr="Murphy, 1994" startWordPosition="1703" endWordPosition="1704">lty in all versions is identifying the appropriate sense, as is the case with WSD. 4 The Syntactic Sense Dictionary A prerequisite to any concrete experimentation with the TSD task is a syntactic sense dictionary. Based on a thorough examination of three major English grammar projects, we compiled a set of 18 common English tense ASFs and their possible senses. The projects are (1) the Cambridge University Press 3Again, these are two ASFs, one adding an ‘s’ and one using the verb as is. English Grammar In Use series, comprising three books (essential, intermediate and advanced) (Murphy, 2007; Murphy, 1994; Hewings, 2005); (2) the English grammar texts resulting from the seminal corpus-based Cobuild project (elementary, advanced) (Willis and Wright, 2003; Willis, 2004); (3) the Longman Grammar of Spoken and Written English (Biber et al., 1999). As in any sense dictionary, in many cases it is hard to draw the line between senses. In order to be able to explore the computational limits of the task, we have adopted a policy of fine sense granularity. For example, senses 1 and 3 of the ‘present simple’ ASF in Table 1 can be argued to be quite similar to each other, having a very fine semantic disti</context>
</contexts>
<marker>Murphy, 1994</marker>
<rawString>Raymond Murphy. 1994. English Grammar In Use, Second Edition. Cambridge University Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Raymond Murphy</author>
</authors>
<title>Essential Grammar In Use, Third Edition.</title>
<date>2007</date>
<publisher>Cambridge University Press.</publisher>
<contexts>
<context position="10142" citStr="Murphy, 2007" startWordPosition="1700" endWordPosition="1702">e main difficulty in all versions is identifying the appropriate sense, as is the case with WSD. 4 The Syntactic Sense Dictionary A prerequisite to any concrete experimentation with the TSD task is a syntactic sense dictionary. Based on a thorough examination of three major English grammar projects, we compiled a set of 18 common English tense ASFs and their possible senses. The projects are (1) the Cambridge University Press 3Again, these are two ASFs, one adding an ‘s’ and one using the verb as is. English Grammar In Use series, comprising three books (essential, intermediate and advanced) (Murphy, 2007; Murphy, 1994; Hewings, 2005); (2) the English grammar texts resulting from the seminal corpus-based Cobuild project (elementary, advanced) (Willis and Wright, 2003; Willis, 2004); (3) the Longman Grammar of Spoken and Written English (Biber et al., 1999). As in any sense dictionary, in many cases it is hard to draw the line between senses. In order to be able to explore the computational limits of the task, we have adopted a policy of fine sense granularity. For example, senses 1 and 3 of the ‘present simple’ ASF in Table 1 can be argued to be quite similar to each other, having a very fine </context>
</contexts>
<marker>Murphy, 2007</marker>
<rawString>Raymond Murphy. 2007. Essential Grammar In Use, Third Edition. Cambridge University Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Roberto Navigli</author>
</authors>
<title>Word Sense Disambiguation: a Survey.</title>
<date>2009</date>
<journal>ACM Computing Surveys,</journal>
<volume>41</volume>
<issue>2</issue>
<pages>1--69</pages>
<contexts>
<context position="32975" citStr="Navigli, 2009" startWordPosition="5593" endWordPosition="5594">ave a role in defining the overall syntactic structure of the sentence. Discarding these features leads to 4% and 1.4% degradation in model accuracy when using the constrained and unconstrained models respectively. 8 Relevant Previous Work As far as we know, this is the first paper to address the TSD task. In this section we describe related research directions and compare them with TSD. A relevant task to TSD is WSD (Section 1 and Section 3). Many algorithmic approaches and techniques have been applied to supervised WSD (for reviews see (Agirre and Edmonds, 2006; Mihalcea and Pedersen, 2005; Navigli, 2009)). Among these are various classifiers, ensemble methods combining several supervised classifiers, bootstrapping and semi-supervised learning methods, using the Web as a corpus and knowledge-based methods relying mainly on machine readable dictionaries. Specifically related to this paper are works that exploit syntax (Martinez et al., 2002; Tanaka et al., 2007) and ensemble methods (e.g. (Brody et al., 2006)) to WSD. The references above also describe some unsupervised word sense induction algorithms. Our TSD algorithm uses the SNOW algorithm, which is a sparse network of classifiers (Section </context>
</contexts>
<marker>Navigli, 2009</marker>
<rawString>Roberto Navigli. 2009. Word Sense Disambiguation: a Survey. ACM Computing Surveys, 41(2) 1–69.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Rebecca J Passonneau</author>
</authors>
<date>1988</date>
<journal>A Computational Model of Semantics of Tenses and Aspect. Computational Linguistics,</journal>
<volume>14</volume>
<issue>2</issue>
<contexts>
<context position="33894" citStr="Passonneau, 1988" startWordPosition="5732" endWordPosition="5733">t exploit syntax (Martinez et al., 2002; Tanaka et al., 2007) and ensemble methods (e.g. (Brody et al., 2006)) to WSD. The references above also describe some unsupervised word sense induction algorithms. Our TSD algorithm uses the SNOW algorithm, which is a sparse network of classifiers (Section 6). Thus, it most resembles the ensemble approach to WSD. That approach has achieved very good results in several WSD shared tasks (Pedersen, 2000; Florian and Yarowsky, 2002). Since temporal reasoning is a direct application of TSD, research on this direction is relevant. Such research goes back to (Passonneau, 1988), which introduced the PUNDIT temporal reasoning system. For each tensed clause, PUNDIT first decides whether it refers to an actual time (as in ‘We flew TWA to Boston’) or not (as in ‘Tourists flew TWA to Boston’, or ‘John always flew his own plane to Boston’). The temporal structure of actual time 332 clauses is then further analyzed. PUNDIT’s classification is much simpler than in the TSD task, addressing only actual vs. non-actual time. PUNDIT’s algorithmic approach is that of a Prolog rule based system, compared to our statistical learning corpusbased approach. We are not aware of further</context>
</contexts>
<marker>Passonneau, 1988</marker>
<rawString>Rebecca J. Passonneau. 1988. A Computational Model of Semantics of Tenses and Aspect. Computational Linguistics, 14(2):44–60.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ted Pedersen</author>
</authors>
<title>A Simple Approach to Building Ensembles of Naive Bayesian Classifiers for Word Sense Disambiguation.</title>
<date>2000</date>
<journal>NAACL</journal>
<volume>00</volume>
<contexts>
<context position="33721" citStr="Pedersen, 2000" startWordPosition="5704" endWordPosition="5705"> learning methods, using the Web as a corpus and knowledge-based methods relying mainly on machine readable dictionaries. Specifically related to this paper are works that exploit syntax (Martinez et al., 2002; Tanaka et al., 2007) and ensemble methods (e.g. (Brody et al., 2006)) to WSD. The references above also describe some unsupervised word sense induction algorithms. Our TSD algorithm uses the SNOW algorithm, which is a sparse network of classifiers (Section 6). Thus, it most resembles the ensemble approach to WSD. That approach has achieved very good results in several WSD shared tasks (Pedersen, 2000; Florian and Yarowsky, 2002). Since temporal reasoning is a direct application of TSD, research on this direction is relevant. Such research goes back to (Passonneau, 1988), which introduced the PUNDIT temporal reasoning system. For each tensed clause, PUNDIT first decides whether it refers to an actual time (as in ‘We flew TWA to Boston’) or not (as in ‘Tourists flew TWA to Boston’, or ‘John always flew his own plane to Boston’). The temporal structure of actual time 332 clauses is then further analyzed. PUNDIT’s classification is much simpler than in the TSD task, addressing only actual vs.</context>
</contexts>
<marker>Pedersen, 2000</marker>
<rawString>Ted Pedersen. 2000. A Simple Approach to Building Ensembles of Naive Bayesian Classifiers for Word Sense Disambiguation. NAACL ’00.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Adwait Ratnaparkhi</author>
</authors>
<title>A Maximum Entropy PartOf-Speech Tagger.</title>
<date>1996</date>
<journal>EMNLP</journal>
<volume>06</volume>
<contexts>
<context position="24090" citStr="Ratnaparkhi, 1996" startWordPosition="4102" endWordPosition="4103"> 7 Experimental Results Experimental setup. We divided the 3000 annotated sentences (containing 4702 CSFs) to three datasets: training data (2100 sentences, 3183 forms), development data (300 sentences, 498 forms) and test data (600 sentences, 1021 forms). We used the development data to design the features for our learning model and to tune the parameters of the SNOW sequential model. In addition we used this data to design the rules of the ASF type classifier (which is not statistical and does not have a training phase). For the POS features, we induced POS tags using the MXPOST POS tagger (Ratnaparkhi, 1996). The tagger was trained on sections 2-21 of the WSJ PennTreebank (Marcus et al., 1993) annotated with gold standard POS tags. We used a publicly available implementation of the sequential SNOW model8. We experimented in three conditions. In the first (TypeUnknown), the ASF type is not known at test time. In the last two, it is known at test time. These two conditions differ in whether the type is taken from the gold standard annotation of the test sentences (TypeKnown), or from the output of the simple rule-based classifier (TypeClassifier, see Section 6). For both conditions, the results rep</context>
</contexts>
<marker>Ratnaparkhi, 1996</marker>
<rawString>Adwait Ratnaparkhi. 1996. A Maximum Entropy PartOf-Speech Tagger. EMNLP ’06.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Dan Roth</author>
</authors>
<title>Learning to Resolve Natural Language Ambiguities: A Unified Approach. AAAI ’98. Michael Schiehlen.</title>
<date>1998</date>
<journal>COLING</journal>
<volume>00</volume>
<contexts>
<context position="21856" citStr="Roth, 1998" startWordPosition="3744" endWordPosition="3745">e auxiliary phrase ‘had been’ and the verb POS is not VBG, then the ASF is ‘past perfect simple’. This classifier’s accuracy on our development (test) data is 94.1 (91.6)%. In this scenario, when given a test CSF, X,,,+1, its set of possible labels C,,,+1 is defined by the classifier output. In the features in which ASF type is used (see table 2), it is taken from the classifier output in this case. The sequential model algorithm presented by Even-Zohar and Roth (2001) directly supports this label restriction requirement 6. We use the SNOW learning architecture for multi-class classification (Roth, 1998), which contains an implementation of that algorithm. The SNOW system allows us not to define restrictions if so desired. It also lets us choose the learning algorithm used when it builds its classifier network. The algorithm can be Perceptron (MacKay, 2002), Winnow (Littlestone, 1988) or Naive Bayes (MacKay, 2002)7. In Section 7 we analyze the effect that these decisions have on our results. Classifier Selection. Investigating the best configuration of the SNOW system with development data, we found that Naive Bayes gave the best or close to best result in all experimental conditions. We ther</context>
</contexts>
<marker>Roth, 1998</marker>
<rawString>Dan Roth. 1998. Learning to Resolve Natural Language Ambiguities: A Unified Approach. AAAI ’98. Michael Schiehlen. 2000. Granularity Effects in Tense Translation. COLING ’00.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Marc Verhagen</author>
<author>Robert Gaizauskas</author>
<author>Frank Schilder</author>
<author>Mark Hepple</author>
<author>Graham Katz</author>
<author>James Pustejovsky</author>
</authors>
<title>SemEval-2007 Task 15: TempEval Temporal Relation Identification.</title>
<date>2007</date>
<journal>ACL</journal>
<volume>07</volume>
<contexts>
<context position="34856" citStr="Verhagen et al., 2007" startWordPosition="5888" endWordPosition="5891">UNDIT’s classification is much simpler than in the TSD task, addressing only actual vs. non-actual time. PUNDIT’s algorithmic approach is that of a Prolog rule based system, compared to our statistical learning corpusbased approach. We are not aware of further research that followed their sense disambiguation direction. Current temporal reasoning research focuses on temporal ordering of events (e.g., (Lapata, 2006; Chambers and Jurafsky, 2008)), for which an accepted atomic task is the identification of the temporal relation between two expressions (see e.g., the TempEval task in SemEval ’07 (Verhagen et al., 2007)). This direction is very different from TSD, which deals with the semantics of individual concrete tense syntactic forms. In this sense, TSD is an even more atomic task for temporal reasoning. A potential application of TSD is machine translation where it can assist in translating tense and aspect. Indeed several papers have explored tense and aspect in the MT context. Dorr (1992) explored the integration of tense and aspect information with lexical semantics for machine translation. Schiehlen (2000) analyzed the effect tense understanding has on MT. Ye and Zhang (2005) explored tense tagging</context>
</contexts>
<marker>Verhagen, Gaizauskas, Schilder, Hepple, Katz, Pustejovsky, 2007</marker>
<rawString>Marc Verhagen, Robert Gaizauskas, Frank Schilder, Mark Hepple, Graham Katz, and James Pustejovsky. 2007. SemEval-2007 Task 15: TempEval Temporal Relation Identification. ACL ’07.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Takaaki Tanaka</author>
<author>Francis Bond</author>
<author>Timothy Baldwin</author>
</authors>
<title>Sanae Fujita and Chikara Hashimoto.</title>
<date>2007</date>
<booktitle>Word Sense Disambiguation Incorporating Lexical and Structural Semantic Information. EMNLP-CoNLL ’07.</booktitle>
<contexts>
<context position="33338" citStr="Tanaka et al., 2007" startWordPosition="5642" endWordPosition="5645">ctions and compare them with TSD. A relevant task to TSD is WSD (Section 1 and Section 3). Many algorithmic approaches and techniques have been applied to supervised WSD (for reviews see (Agirre and Edmonds, 2006; Mihalcea and Pedersen, 2005; Navigli, 2009)). Among these are various classifiers, ensemble methods combining several supervised classifiers, bootstrapping and semi-supervised learning methods, using the Web as a corpus and knowledge-based methods relying mainly on machine readable dictionaries. Specifically related to this paper are works that exploit syntax (Martinez et al., 2002; Tanaka et al., 2007) and ensemble methods (e.g. (Brody et al., 2006)) to WSD. The references above also describe some unsupervised word sense induction algorithms. Our TSD algorithm uses the SNOW algorithm, which is a sparse network of classifiers (Section 6). Thus, it most resembles the ensemble approach to WSD. That approach has achieved very good results in several WSD shared tasks (Pedersen, 2000; Florian and Yarowsky, 2002). Since temporal reasoning is a direct application of TSD, research on this direction is relevant. Such research goes back to (Passonneau, 1988), which introduced the PUNDIT temporal reaso</context>
</contexts>
<marker>Tanaka, Bond, Baldwin, 2007</marker>
<rawString>Takaaki Tanaka, Francis Bond, Timothy Baldwin, Sanae Fujita and Chikara Hashimoto. 2007. Word Sense Disambiguation Incorporating Lexical and Structural Semantic Information. EMNLP-CoNLL ’07.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Dave Willis</author>
<author>Jon Wright</author>
</authors>
<title>Collins Cobuild Elementary English Grammar, Second Edition.</title>
<date>2003</date>
<publisher>HarperCollins Publishers.</publisher>
<contexts>
<context position="10307" citStr="Willis and Wright, 2003" startWordPosition="1723" endWordPosition="1726">ncrete experimentation with the TSD task is a syntactic sense dictionary. Based on a thorough examination of three major English grammar projects, we compiled a set of 18 common English tense ASFs and their possible senses. The projects are (1) the Cambridge University Press 3Again, these are two ASFs, one adding an ‘s’ and one using the verb as is. English Grammar In Use series, comprising three books (essential, intermediate and advanced) (Murphy, 2007; Murphy, 1994; Hewings, 2005); (2) the English grammar texts resulting from the seminal corpus-based Cobuild project (elementary, advanced) (Willis and Wright, 2003; Willis, 2004); (3) the Longman Grammar of Spoken and Written English (Biber et al., 1999). As in any sense dictionary, in many cases it is hard to draw the line between senses. In order to be able to explore the computational limits of the task, we have adopted a policy of fine sense granularity. For example, senses 1 and 3 of the ‘present simple’ ASF in Table 1 can be argued to be quite similar to each other, having a very fine semantic distinction. A specific application may choose to collapse some senses into one. We used the conventional ASF names, which should not be confused with their</context>
</contexts>
<marker>Willis, Wright, 2003</marker>
<rawString>Dave Willis and Jon Wright. 2003. Collins Cobuild Elementary English Grammar, Second Edition. HarperCollins Publishers.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Dave Willis</author>
</authors>
<title>Collins Cobuild Intermediate English Grammar, Second Edition.</title>
<date>2004</date>
<publisher>HarperCollins Publishers.</publisher>
<contexts>
<context position="10322" citStr="Willis, 2004" startWordPosition="1727" endWordPosition="1728">th the TSD task is a syntactic sense dictionary. Based on a thorough examination of three major English grammar projects, we compiled a set of 18 common English tense ASFs and their possible senses. The projects are (1) the Cambridge University Press 3Again, these are two ASFs, one adding an ‘s’ and one using the verb as is. English Grammar In Use series, comprising three books (essential, intermediate and advanced) (Murphy, 2007; Murphy, 1994; Hewings, 2005); (2) the English grammar texts resulting from the seminal corpus-based Cobuild project (elementary, advanced) (Willis and Wright, 2003; Willis, 2004); (3) the Longman Grammar of Spoken and Written English (Biber et al., 1999). As in any sense dictionary, in many cases it is hard to draw the line between senses. In order to be able to explore the computational limits of the task, we have adopted a policy of fine sense granularity. For example, senses 1 and 3 of the ‘present simple’ ASF in Table 1 can be argued to be quite similar to each other, having a very fine semantic distinction. A specific application may choose to collapse some senses into one. We used the conventional ASF names, which should not be confused with their meanings (e.g.</context>
</contexts>
<marker>Willis, 2004</marker>
<rawString>Dave Willis. 2004. Collins Cobuild Intermediate English Grammar, Second Edition. HarperCollins Publishers.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yang Ye</author>
<author>Victoria Li Fossum</author>
<author>Steven Abney</author>
</authors>
<date>2006</date>
<booktitle>Latent Features in Automatic Tense Translation between Chinese and English. SIGHAN ’06.</booktitle>
<contexts>
<context position="35502" citStr="Ye et al., (2006)" startWordPosition="5993" endWordPosition="5996">ferent from TSD, which deals with the semantics of individual concrete tense syntactic forms. In this sense, TSD is an even more atomic task for temporal reasoning. A potential application of TSD is machine translation where it can assist in translating tense and aspect. Indeed several papers have explored tense and aspect in the MT context. Dorr (1992) explored the integration of tense and aspect information with lexical semantics for machine translation. Schiehlen (2000) analyzed the effect tense understanding has on MT. Ye and Zhang (2005) explored tense tagging in a cross-lingual context. Ye et al., (2006) extracted features for tense translation between Chinese and English. Murata et al., (2007) compared the performance of several MT systems in translating tense and aspect and found that various ML techniques perform better on the task. Another related field is ‘deep’ parsing, where a sentence is annotated with a structure containing information that might be relevant for semantic interpretation (e.g. (Hajic, 1998; Baldwin et al., 2007)). TSD senses, however, are not explicitly represented in these grammatical structures, and we are not aware of any work that utilized them to do something clos</context>
</contexts>
<marker>Ye, Fossum, Abney, 2006</marker>
<rawString>Yang Ye, Victoria Li Fossum and Steven Abney. 2006. Latent Features in Automatic Tense Translation between Chinese and English. SIGHAN ’06.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yang Ye</author>
<author>Zhu Zhang</author>
</authors>
<title>Tense Tagging for Verbs in Cross-Lingual Context: A Case Study.</title>
<date>2005</date>
<journal>IJCNLP</journal>
<volume>05</volume>
<contexts>
<context position="35433" citStr="Ye and Zhang (2005)" startWordPosition="5982" endWordPosition="5985">ask in SemEval ’07 (Verhagen et al., 2007)). This direction is very different from TSD, which deals with the semantics of individual concrete tense syntactic forms. In this sense, TSD is an even more atomic task for temporal reasoning. A potential application of TSD is machine translation where it can assist in translating tense and aspect. Indeed several papers have explored tense and aspect in the MT context. Dorr (1992) explored the integration of tense and aspect information with lexical semantics for machine translation. Schiehlen (2000) analyzed the effect tense understanding has on MT. Ye and Zhang (2005) explored tense tagging in a cross-lingual context. Ye et al., (2006) extracted features for tense translation between Chinese and English. Murata et al., (2007) compared the performance of several MT systems in translating tense and aspect and found that various ML techniques perform better on the task. Another related field is ‘deep’ parsing, where a sentence is annotated with a structure containing information that might be relevant for semantic interpretation (e.g. (Hajic, 1998; Baldwin et al., 2007)). TSD senses, however, are not explicitly represented in these grammatical structures, and</context>
</contexts>
<marker>Ye, Zhang, 2005</marker>
<rawString>Yang Ye and Zhu Zhang. 2005. Tense Tagging for Verbs in Cross-Lingual Context: A Case Study. IJCNLP ’05.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Harry Zhang</author>
</authors>
<title>The Optimality of Naive Bayes.</title>
<date>2004</date>
<journal>FLAIRS</journal>
<volume>04</volume>
<contexts>
<context position="22628" citStr="Zhang, 2004" startWordPosition="3867" endWordPosition="3868">gorithm used when it builds its classifier network. The algorithm can be Perceptron (MacKay, 2002), Winnow (Littlestone, 1988) or Naive Bayes (MacKay, 2002)7. In Section 7 we analyze the effect that these decisions have on our results. Classifier Selection. Investigating the best configuration of the SNOW system with development data, we found that Naive Bayes gave the best or close to best result in all experimental conditions. We therefore report our results when this algorithm is used. Naive Bayes is particularly useful when relatively small amounts of training CSF instances are available (Zhang, 2004), and achieves good results when compared to other classifiers for the WSD task (Mooney, 1996), which might explain our results. Fine tuning of Winnow parameters also leads to high performance (sometimes the best), but most other parameter configurations lead to disappointing re6Note that the name of the learning algorithm is derived from the fact that it utilizes classifiers to sequentially restrict the number of competing classes while maintaining with high probability the presence of the true outcome. The classification task it performs is not sequential in nature. 7Or a combination of thes</context>
</contexts>
<marker>Zhang, 2004</marker>
<rawString>Harry Zhang. 2004. The Optimality of Naive Bayes. FLAIRS ’04.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>