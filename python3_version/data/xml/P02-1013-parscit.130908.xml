<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000088">
<note confidence="0.951118">
Proceedings of the 40th Annual Meeting of the Association for
Computational Linguistics (ACL), Philadelphia, July 2002, pp. 96-103.
</note>
<title confidence="0.987501">
Generating Minimal Definite Descriptions
</title>
<author confidence="0.907129">
Claire Gardent
</author>
<affiliation confidence="0.619669">
CNRS, LORIA, Nancy
</affiliation>
<email confidence="0.995856">
gardent@loria.fr
</email>
<sectionHeader confidence="0.995587" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999942705882353">
The incremental algorithm introduced in
(Dale and Reiter, 1995) for producing dis-
tinguishing descriptions does not always
generate a minimal description. In this
paper, I show that when generalised to
sets of individuals and disjunctive proper-
ties, this approach might generate unnec-
essarily long and ambiguous and/or epis-
temically redundant descriptions. I then
present an alternative, constraint-based al-
gorithm and show that it builds on existing
related algorithms in that (i) it produces
minimal descriptions for sets of individu-
als using positive, negative and disjunctive
properties, (ii) it straightforwardly gener-
alises to n-ary relations and (iii) it is inte-
grated with surface realisation.
</bodyText>
<sectionHeader confidence="0.999133" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999846636363636">
In English and in many other languages, a possible
function of definite descriptions is to identify a set
of referents1: by uttering an expression of the form
The N, the speaker gives sufficient information to the
hearer so that s/he can identify the set of the objects
the speaker is referring to.
From the generation perspective, this means that,
starting from the set of objects to be described and
from the properties known to hold of these objects
by both the speaker and the hearer, a definite de-
scription must be constructed which allows the user
</bodyText>
<footnote confidence="0.7812415">
1The other well-known function of a definite is to inform the
hearer of some specific attributes the referent of the NP has.
</footnote>
<bodyText confidence="0.999723317073171">
to unambiguously identify the objects being talked
about.
While the task of constructing singular definite
descriptions on the basis of positive properties has
received much attention in the generation literature
(Dale and Haddock, 1991; Dale and Reiter, 1995;
Horacek, 1997; Krahmer et al., 2001), for a long
time, a more general statement of the task at hand re-
mained outstanding. Recently however, several pa-
pers made a step in that direction. (van Deemter,
2001) showed how to extend the basic Dale and Re-
iter Algorithm (Dale and Reiter, 1995) to generate
plural definite descriptions using not just conjunc-
tions of positive properties but also negative and
disjunctive properties; (Stone, 1998) integrates the
D&amp;R algorithm into the surface realisation process
and (Stone, 2000) extends it to deal with collective
and distributive plural NPs.
Notably, in all three cases, the incremental struc-
ture of the D&amp;R’s algorithm is preserved: the al-
gorithm increments a set of properties till this set
uniquely identifies the target set i.e., the set of ob-
jects to be described. As (Garey and Johnson, 1979)
shows, such an incremental algorithm while be-
ing polynomial (and this, together with certain psy-
cholinguistic observations, was one of the primary
motivation for privileging this incremental strategy)
is not guaranteed to find the minimal solution i.e.,
the description which uniquely identifies the target
set using the smallest number of atomic properties.
In this paper, I argue that this characteristic of the
incremental algorithm while reasonably innocuous
when generating singular definite descriptions using
only conjunctions of positive properties, renders it
cognitively inappropriate when generalised to sets of
individuals and disjunctive properties. I present an
alternative approach which always produce the min-
imal description thereby avoiding the shortcomings
of the incremental algorithm. I conclude by com-
paring the proposed approach with related proposals
and giving pointers for further research.
</bodyText>
<sectionHeader confidence="0.747738" genericHeader="method">
2 The incremental approach
</sectionHeader>
<bodyText confidence="0.991789714285714">
Dale and Reiter’s incremental algorithm (cf. Fig-
ure 1) iterates through the properties of the target
entity (the entity to be described) selecting a prop-
erty, adding it to the description being built and com-
puting the distractor set i.e., the set of elements for
which the conjunction of properties selected so far
holds. The algorithm succeeds (and returns the se-
lected properties) when the distractor set is the sin-
gleton set containing the target entity. It fails if all
properties of the target entity have been selected and
the distractor set contains more than the target entity
(i.e. there is no distinguishing description for the
target).
This basic algorithm can be refined by ordering
properties according to some fixed preferences and
thereby selecting first e.g., some base level category
in a taxonomy, second a size attribute third, a colour
attribute etc.
: the domain;
, the set of properties of ;
To generate the UID , do:
</bodyText>
<listItem confidence="0.995957">
1. Initialise: := , := .
2. Check success:
</listItem>
<subsectionHeader confidence="0.859119">
If return
</subsectionHeader>
<bodyText confidence="0.6173205">
elseif then fail
else goto step 3.
</bodyText>
<figureCaption confidence="0.9874205">
Figure 1: The D&amp;R incremental Algorithm.
(van Deemter, 2001) generalises the D&amp;R algo-
rithm first, to plural definite descriptions and second,
to disjunctive and negative properties as indicated in
Figure 2. That is, the algorithm starts with a dis-
tractor set which initially is equal to the set of
</figureCaption>
<bodyText confidence="0.9949978125">
individuals present in the context. It then incremen-
tally selects a property that is true of the target set
( ) but not of all elements in the distrac-
tor set ( ). Each selected property is thus
used to simultaneously increment the description be-
ing built and to eliminate some distractors. Success
occurs when the distractor set equals the target set.
The result is a distinguishing description (DD, a de-
scription that is true only of the target set) which is
the conjunction of properties selected to reach that
state.
: the domain;
, the set to be described;
, the properties true of the set ( with
the set of properties that are true of );
To generate the distinguishing description , do:
</bodyText>
<listItem confidence="0.997824">
1. Initialise: := , := .
2. Check success:
</listItem>
<subsectionHeader confidence="0.920454">
If return
</subsectionHeader>
<bodyText confidence="0.887767">
elseif then fail
else goto step 3.
</bodyText>
<listItem confidence="0.997644666666667">
3. Choose property s.t. and
4. Update: := := , :=
. goto step 2.
</listItem>
<figureCaption confidence="0.967519666666667">
Figure 2: Extending D&amp;R Algorithm to sets of indi-
viduals.
Phase 1: Perform the extended D&amp;R algorithm using all liter-
</figureCaption>
<bodyText confidence="0.544902">
als i.e., properties in ; if this is successful then stop,
otherwise go to phase 2.
</bodyText>
<subsubsectionHeader confidence="0.328812">
Phase 2: Perform the extended D&amp;R algorithm using all prop-
</subsubsectionHeader>
<bodyText confidence="0.932615">
erties of the form with ; if this is
successful then stop, otherwise go to phase 3.
</bodyText>
<figureCaption confidence="0.8696425">
Figure 3: Extending D&amp;R Algorithm to disjunctive
properties
</figureCaption>
<bodyText confidence="0.99871025">
To generalise this algorithm to disjunctive and
negative properties, van Deemter adds one more
level of incrementality, an incrementality over the
length of the properties being used (cf. Figure 3).
First, literals are used i.e., atomic properties and
their negation. If this fails, disjunctive properties of
length two (i.e. with two literals) are used; then of
length three etc.
</bodyText>
<listItem confidence="0.956031">
5. Choose property which picks out the smallest set
.
6. Update: := := , := . goto
step 2.
</listItem>
<sectionHeader confidence="0.975828" genericHeader="method">
3 Problems
</sectionHeader>
<bodyText confidence="0.936798833333333">
We now show that this generalised algorithm might
generate (i) epistemically redundant descriptions
and (ii) unnecessarily long and ambiguous descrip-
tions.
Epistemically redundant descriptions. Suppose
the context is as illustrated in Figure 4 and the target
</bodyText>
<figure confidence="0.8141955">
set is .
pdt secr treasurer board-member member
</figure>
<figureCaption confidence="0.981162666666667">
Figure 4: Epistemically redundant descriptions
“The president and the secretary who are board
members and not treasurers”
</figureCaption>
<bodyText confidence="0.998061243902439">
To build a distinguishing description for the tar-
get set , the incremental algorithm will
first look for a property in the set of literals
such that (i) is in the extension of P and
(ii) is not true of all elements in the distractor
set (which at this stage is the whole universe
i.e., ). Two literals satisfy
these criteria: the property of being a board mem-
ber and that of not being the treasurer2 Suppose
the incremental algorithm first selects the board-
member property thereby reducing the distractor set
to . Then treasurer is selected
which restricts the distractor set to .
There is no other literal which could be used to fur-
ther reduce the distractor set hence properties of the
form are used. At this stage, the algo-
rithm might select the property whose
intersection with the distractor set yields the target
set . Thus, the description produced is in
this case: board-member treasurer
which can be phrased as the president and the sec-
retary who are board members and not treasurers –
whereas the minimal DD the president and the sec-
retary would be a much better output.
2Note that selecting properties in order of specificity will
not help in this case as neither president nor treasurer meet the
selection criterion (their extension does not include the target
set).
One problem thus is that, although perfectly well
formed minimal DDs might be available, the incre-
mental algorithm may produce “epistemically re-
dundant descriptions” i.e. descriptions which in-
clude information already entailed (through what we
know) by some information present elsewhere in the
description.
Unnecessarily long and ambiguous descriptions.
Another aspect of the same problem is that the al-
gorithm may yield unnecessarily long and ambigu-
ous descriptions. Here is an example. Suppose the
context is as given in Figure 5 and the target set is
.
</bodyText>
<equation confidence="0.982118">
W D C B S M Pi Po H J
W = white; D = dog; C = cow; B = big; S = small;
M = medium-sized; Pi = pitbul; Po = poodle; H = Holstein; J =
Jersey
</equation>
<figureCaption confidence="0.995203">
Figure 5: Unnecessarily long descriptions.
</figureCaption>
<bodyText confidence="0.994240625">
The most natural and probably shortest descrip-
tion in this case is a description involving a disjunc-
tion with four disjuncts namely
which can be verbalised as the Pitbul, the Pooddle,
the Holstein and the Jersey.
This is not however, the description that will be
returned by the incremental algorithm. Recall that
at each step in the loop going over the proper-
ties of various (disjunctive) lengths, the incremen-
tal algorithm adds to the description being built any
property that is true of the target set and such that
the current distractor set is not included in the set
of objects having that property. Thus in the first
loop over properties of length one, the algorithm
will select the property , add it to the descrip-
tion and update the distractor set to
. Since the
new distractor set is not equal to the target set
and since no other property of length one satisfies
the selection criteria, the algorithm proceeds with
properties of length two. Figure 6 lists the prop-
erties of length two meeting the selection cri-
teria at that stage ( and
.
</bodyText>
<figureCaption confidence="0.7981295">
Figure 6: Properties of length 2 meeting the selec-
tion criterion
</figureCaption>
<bodyText confidence="0.995065551724138">
The incremental algorithm selects any of these
properties to increment the current DD. Sup-
pose it selects . The DD is then up-
dated to and the distractor set to
. Except for
and which would not eliminate any dis-
tractor, each of the other property in the table can
be used to further reduce the distractor set. Thus
the algorithm will eventually build the description
thereby re-
ducing the distractor set to .
At this point success still has not been reached
(the distractor set is not equal to the target set).
It will eventually be reached (at the latest when
incrementing the description with the disjunction
). However, already at this stage
of processing, it is clear that the resulting descrip-
tion will be awkward to phrase. A direct translation
from the description built so far (
) would yield e.g.,
(1) The white things that are big or a cow, a Hol-
stein or not small, and a Jersey or not medium
size
Another problem then, is that when generalised
to disjunctive and negative properties, the incremen-
tal strategy might yield descriptions that are unnec-
essarily ambiguous (because of the high number of
logical connectives they contain) and in the extreme
cases, incomprehensible.
</bodyText>
<sectionHeader confidence="0.903238" genericHeader="method">
4 An alternative based on set constraints
</sectionHeader>
<bodyText confidence="0.999669533333333">
One possible solution to the problems raised by the
incremental algorithm is to generate only minimal
descriptions i.e. descriptions which use the smallest
number of literals to uniquely identify the target set.
By definition, these will never be redundant nor will
they be unnecessarily long and ambiguous.
As (Dale and Reiter, 1995) shows, the problem
of finding minimal distinguishing descriptions can
be formulated as a set cover problem and is there-
fore known to be NP hard. However, given an effi-
cient implementation this might not be a hindrance
in practice. The alternative algorithm I propose is
therefore based on the use of constraint program-
ming (CP), a paradigm aimed at efficiently solving
NP hard combinatoric problems such as scheduling
and optimization. Instead of following a generate-
and-test strategy which might result in an intractable
search space, CP minimises the search space by
following a propagate-and-distribute strategy where
propagation draws inferences on the basis of effi-
cient, deterministic inference rules and distribution
performs a case distinction for a variable value.
The basic version. Consider the definition of a
distinguishing description given in (Dale and Reiter,
1995).
Let be the intended referent, and be
the distractor set; then, a set of attribute-
value pairs will represent a distinguishing
description if the following two conditions
hold:
</bodyText>
<listItem confidence="0.995190222222222">
C1: Every attribute-value pair in ap-
plies to : that is, every element of
specifies an attribute value that
possesses.
C2: For every member of , there is at
least one element of that does not
apply to : that is, there is an in
that specifies an attribute-value that
does not possess. is said to rule out
</listItem>
<bodyText confidence="0.945033416666667">
.
The constraints (cf. Figure 7) used in the pro-
posed algorithm directly mirror this definition.
A description for the target set is represented
by a pair of set variables constrained to be a subset
of the set of positive(i.e., properties that are true of
all elements in ) and of negative (i.e., properties
that are true of none of the elements in ) properties
: the universe;
: the set of properties has;
: the set of properties does not have;
: the set of properties true of all ele-
</bodyText>
<figure confidence="0.732338636363636">
ments of ;
: the set of properties false of all
elements of ;
is a basic distinguishing descrip-
is a distinguishing descrip-
tion for a set of individuals iff:
for is a basic distinguishing
description for
tion for S iff:
1. ,
2. and
</figure>
<figureCaption confidence="0.999725">
Figure 7: A constraint-based approach
</figureCaption>
<bodyText confidence="0.951813586206897">
of respectively. The third constraint ensures that
the conjunction of properties thus built eliminates all
distractors i.e. each element of the universe which is
not in . More specifically, it states that for each
distractor there is at least one property such that
either is true of (all elements in) but not of or
is false of (all elements in) and true of .
The constraints thus specify what it is to be a DD
for a given target set. Additionally, a distribution
strategy needs to be made precise which specifies
how to search for solutions i.e., for assignments of
values to variables such that all constraints are si-
multaneously verified. To ensure that solutions are
searched for in increasing order of size, we distribute
(i.e. make case distinctions) over the cardinality of
the output description starting with the
lowest possible value. That is, first the algorithm
will try to find a description with cardi-
nality one, then with cardinality two etc. The algo-
rithm stops as soon as it finds a solution. In this way,
the description output by the algorithm is guaranteed
to always be the shortest possible description.
Extending the algorithm with disjunctive prop-
erties. To take into account disjunctive properties,
the constraints used can be modified as indicated in
Figure 8.
That is, the algorithm looks for a tuple of sets such
that their union is the target set and
such that for each set in that tuple there is a basic
</bodyText>
<figureCaption confidence="0.998758">
Figure 8: With disjunctive properties
</figureCaption>
<bodyText confidence="0.986551">
DD . The resulting description is the disjunctive
description where each is a
conjunctive description.
As before solutions are searched for in increasing
order of size (i.e., number of literals occurring in the
description) by distributing over the cardinality of
the resulting description.
</bodyText>
<sectionHeader confidence="0.7871535" genericHeader="method">
5 Discussion and comparison with related
work
</sectionHeader>
<bodyText confidence="0.997165496">
Integration with surface realisation As (Stone
and Webber, 1998) clearly shows, the two-step strat-
egy which consists in first computing a DD and sec-
ond, generating a definite NP realising that DD, does
not do language justice. This is because, as the fol-
lowing example from (Stone and Webber, 1998) il-
lustrates, the information used to uniquely identify
some object need not be localised to a definite de-
scription.
(2) Remove the rabbit from the hat.
In a context where there are several rabbits and
several hats but only one rabbit in a hat (and only
one hat containing a rabbit), the sentence in (2) is
sufficient to identify the rabbit that is in the hat. In
this case thus, it is the presupposition of the verb “re-
move” which ensures this: since x remove y from z
presupposes that was in before the action, we can
infer from (2) that the rabbit talked about is indeed
the rabbit that is in the hat.
The solution proposed in (Stone and Webber,
1998) and implemented in the SPUD (Sentence Plan-
ning Using Descriptions) generator is to integrate
surface realisation and DD computation. As a prop-
erty true of the target set is selected, the correspond-
ing lexical entry is integrated in the phrase structure
tree being built to satisfy the given communicative
goals. Generation ends when the resulting tree (i)
satisfies all communicative goals and (ii) is syntac-
tically complete. In particular, the goal of describ-
ing some discourse old entity using a definite de-
scription is satisfied as soon as the given informa-
tion (i.e. information shared by speaker and hearer)
associated by the grammar with the tree suffices to
uniquely identify this object.
Similarly, the constraint-based algorithm for
generating DD presented here has been inte-
grated with surface realisation within the generator
INDIGEN (http://www.coli.uni-sb.de/
cl/projects/indigen.html) as follows.
As in SPUD, the generation process is driven by
the communicative goals and in particular, by in-
forming and describing goals. In practice, these
goals contribute to updating a “goal semantics”
which the generator seeks to realise by building a
phrase structure tree that (i) realises that goal seman-
tics, (ii) is syntactically complete and (iii) is prag-
matically appropriate.
Specifically, if an entity must be described which
is discourse old, a DD will be computed for that en-
tity and added to the current goal semantics thereby
driving further generation.
Like SPUD, this modified version of the SPUD al-
gorithm can account for the fact that a DD need not
be wholy realised within the corresponding NP – as
a DD is added to the goal semantics, it guides the lex-
ical lookup process (only items in the lexicon whose
semantics subsumes part of the goal semantics are
selected) but there is no restriction on how the given
semantic information is realised.
Unlike SPUD however, the INDIGEN generator
does not follow an incremental greedy search strat-
egy mirroring the incremental D&amp;R algorithm (at
each step in the generation process, SPUD compares
all possible continuations and only pursues the best
one; There is no backtracking). It follows a chart
based strategy instead (Striegnitz, 2001) producing
all possible paraphrases. The drawback is of course
a loss in efficiency. The advantages on the other
hand are twofold.
First, INDIGEN only generates definite descrip-
tions that realize minimal DD. Thus unlike SPUD, it
will not run into the problems mentioned in section
2 once generalised to negative and disjunctive prop-
erties.
Second, if there is no DD for a given entity, this
will be immediately noticed in the present approach
thus allowing for a non definite NP or a quantifier
to be constructed instead. In contrast, SPUD will, if
unconstrained, keep adding material to the tree until
all properties of the object to be described have been
realised. Once all properties have been realised and
since there is no backtracking, generation will fail.
N-ary relations. The set variables used in our con-
straints solver are variables ranging over sets of in-
tegers. This, in effect, means that prior to applying
constraints, the algorithm will perform an encoding
of the objects being constrained – individuals and
properties – into (pairwise distinct) integers. It fol-
lows that the algorithm easily generalises to n-ary
relations. Just like the proposition red( ) using the
unary-relation “red” can be encoded by an integer,
so can the proposition on( ) using the binary-
relation “on” be encoded by two integers (one for
on( ) and one for on( ) .
Thus the present algorithm improves on (van
Deemter, 2001) which is restricted to unary rela-
tions. It also differs from (Krahmer et al., 2001),
who use graphs and graph algorithms for computing
DDs – while graphs provides a transparent encoding
of unary and binary relations, they lose much of their
intuitive appeal when applied to relations of higher
arity.
It is also worth noting that the infinite regress
problem observed (Dale and Haddock, 1991) to hold
for the D&amp;R algorithm (and similarly for its van
Deemter’s generalisation) when extended to deal
with binary relations, does not hold in the present
approach.
In the D&amp;R algorithm, the problem stems from
the fact that DD are generated recursively: if when
generating a DD for some entity , a relation is
selected which relates to e.g., , the D&amp;R al-
gorithm will recursively go on to produce a DD for
. Without additional restriction, the algorithm can
thus loop forever, first describing in terms of ,
then in terms of , then in terms of etc.
The solution adopted by (Dale and Haddock,
1991) is to stipulate that facts from the knowledge
base can only be used once within a given call to the
algorithm.
In contrast, the solution follows, in the present al-
gorithm (as in SPUD), from its integration with sur-
face realisation. Suppose for instance, that the initial
goal is to describe the discourse old entity . The
initially empty goal semantics will be updated with
</bodyText>
<equation confidence="0.84412725">
its DD say, .
NP
N
Goal Semantics =
</equation>
<bodyText confidence="0.999509821428571">
This information is then used to select appropri-
ate lexical entries i.e., the noun entry for “bowl” and
the preposition entry for “on”. The resulting tree
(with leaves “the bowl on”) is syntactically incom-
plete hence generation continues attempting to pro-
vide a description for . If is discourse old, the
lexical entry for the will be selected and a DD com-
puted say, . This then is added
to the current goal semantics yielding the goal se-
mantics which is com-
pared with the semantics of the tree built so far i..e.,
At this stage, the semantics of that tree is
which is equivalent to
the goal semantics. Since furthermore the tree is
syntactically and pragmatically complete, genera-
tion stops yielding the NP the bowl on the table.
In sum, infinite regress is avoided by using the
computed DDs to control the addition of new mate-
rial to the tree being built.
Minimality and overspecified descriptions. It
has often been observed that human beings produce
overspecified i.e., non-minimal descriptions. One
might therefore wonder whether generating minimal
descriptions is in fact appropriate. Two points speak
for it.
First, it is unclear whether redundant information
is present because of a cognitive artifact (e.g., incre-
mental processing) or because it helps fulfill some
other communicative goal besides identification. So
for instance, (Jordan, 1999) shows that in a specific
task context, redundant attributes are used to indi-
cate the violation of a task constraint (for instance,
when violating a colour constraint, a task participant
will use the description “the red table” rather than
“the table” to indicate that s/he violates a constraint
to the effect that red object may not be used at that
stage of the task).
More generally, it seems unlikely that no rule at
all governs the presence of redundant information in
definite descriptions. If redundant descriptions are
to be produced, they should therefore be produced
in relation to some general principle (i.e., because
the algorithm goes through a fixed order of attribute
classes or because the redundant information fulfills
a particular communicative goal) not randomly, as is
done in the generalised incremental algorithm.
Second, the psycholinguistic literature bearing on
the presence of redundant information in definite
descriptions has mainly been concerned with unary
atomic relations. Again once binary, ternary and dis-
junctive relations are considered, it is unclear that
the phenomenon generalises. As (Krahmer et al.,
2001) observed, “it is unlikely that someone would
describe an object as “the dog next to the tree in front
of the garage” in a situation where “the dog next to
the tree” would suffice.
</bodyText>
<figure confidence="0.994431785714286">
N
PP
bowl
N
NP
P
.
NP
on
D
N
the
Goal Semantics =
Tree Semantics =
</figure>
<figureCaption confidence="0.475204333333333">
Since goal and tree semantics are different, gener-
ation continue selecting the lexical entry for “table”
and integrating it in the tree being built.
</figureCaption>
<figure confidence="0.98648585">
P
NP
bowl
on
D
the
table
NP
N
N
PP
N
D
the
D
the
D
the
Goal Semantics =
Tree Semantics =
</figure>
<bodyText confidence="0.999795526315789">
Implementation. The ideas presented in this pa-
per have been implemented within the genera-
tor INDIGEN using the concurrent constraint pro-
gramming language Oz (Programming Systems Lab
Saarbr¨ucken, 1998) which supports set variables
ranging over finite sets of integers and provides an
efficient implementation of the associated constraint
theory. The proof-of-concept implementation in-
cludes the constraint solver described in section 4
and its integration in a chart-based generator inte-
grating surface realisation and inference. For the ex-
amples discussed in this paper, the constraint solver
returns the minimal solution (i.e., The cat and the
dog and The poodle, the Jersey, the pitbul and the
Holstein) in 80 ms and 1.4 seconds respectively. The
integration of the constraint solver within the gener-
ator permits realising definite NPs including nega-
tive information (the cat that is not white) and sim-
ple conjunctions (The cat and the dog).
</bodyText>
<sectionHeader confidence="0.999506" genericHeader="conclusions">
6 Conclusion
</sectionHeader>
<bodyText confidence="0.9999614">
One area that deserves further investigation is the
relation to surface realisation. Once disjunctive
and negative relations are used, interesting questions
arise as to how these should be realised. How should
conjunctions, disjunctions and negations be realised
within the sentence? How are they realised in prac-
tice? and how can we impose the appropriate con-
straints so as to predict linguistically and cognitively
acceptable structures? More generally, there is the
question of which communicative goals refer to sets
rather than just individuals and of the relationship
to what in the generation literature has been bap-
tised “aggregation” roughly, the grouping together
of facts exhibiting various degrees and forms of sim-
ilarity.
</bodyText>
<sectionHeader confidence="0.998844" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.999533375">
I thank Denys Duchier for implementing the ba-
sic constraint solver on which this paper is based
and Marilisa Amoia for implementing the exten-
sion to disjunctive relations and integrating the con-
straint solver into the INDIGEN generator. I also
gratefully acknowledge the financial support of the
Conseil R´egional de Lorraine and of the Deutsche
Forschungsgemeinschaft.
</bodyText>
<sectionHeader confidence="0.996401" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999695425">
R. Dale and N. Haddock. 1991. Content determination
in the generation of referring expressions. Computa-
tionalIntelligence, 7(4):252–265.
R. Dale and E. Reiter. 1995. Computational interpreta-
tions of the gricean maxims in the generation of refer-
ring expressions. Cognitive Science, 18:233–263.
W. Garey and D. Johnson. 1979. Computers
and Intractability: a Guide to the Theory of NP-
Completeness. W.H.Freeman, San Francisco.
H. Horacek. 1997. An algorithm for generating referen-
tial descriptions with flexible interfaces. In Proceed-
ings of the 35 Annual Meeting of the Association for
Computational Linguistics), pages 206–213, Madrid.
P. W. Jordan. 1999. An empirical study of the commu-
nicative goals impacting nominal expressions. In the
Proceedings of the ESSLLI workshop on The Genera-
tion ofNominal Expression.
E. Krahmer, S. van Eerk, and Andr´e Verleg. 2001. A
meta-algorithm for the generation of referring expres-
sions. In Proceedings of the 8th European Workshop
on Natural Language Generation, Toulouse.
Programming Systems Lab Saarbr¨ucken. 1998. Oz Web-
page: http://www.ps.uni-sb.de/oz/.
M. Stone and Bonnie Webber. 1998. Textual economy
through closely coupled syntax and semantics. In Pro-
ceedings of the Ninth International Workshop on Nat-
ural Language Generation, pages 178–187, Niagara-
on-the-Lake, Canada.
M. Stone. 1998. Modality in Dialogue: Planning, Prag-
matics and Computation. Ph.D. thesis, Department of
Computer &amp; Information Science, University of Penn-
sylvania.
M. Stone. 2000. On Identifying Sets. In Proceedings
of the First international conference on Natural Lan-
guage Generation, Mitzpe Ramon.
Kristina Striegnitz. 2001. A chart-based generation algo-
rithm for LTAG with pragmatic constraints. To appear.
K. van Deemter. 2001. Generating Referring Expres-
sions: Boolean Extensions of the Incremental Algo-
rithm. To appear in Computational Linguistics.
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.305339">
<note confidence="0.9972635">Proceedings of the 40th Annual Meeting of the Association for Computational Linguistics (ACL), Philadelphia, July 2002, pp. 96-103.</note>
<title confidence="0.992999">Generating Minimal Definite Descriptions</title>
<author confidence="0.715132">Claire Gardent CNRS</author>
<author confidence="0.715132">Nancy LORIA</author>
<email confidence="0.995931">gardent@loria.fr</email>
<abstract confidence="0.982769944444444">The incremental algorithm introduced in (Dale and Reiter, 1995) for producing distinguishing descriptions does not always generate a minimal description. In this paper, I show that when generalised to sets of individuals and disjunctive properties, this approach might generate unnecessarily long and ambiguous and/or epistemically redundant descriptions. I then present an alternative, constraint-based algorithm and show that it builds on existing related algorithms in that (i) it produces minimal descriptions for sets of individuals using positive, negative and disjunctive properties, (ii) it straightforwardly generalises to n-ary relations and (iii) it is integrated with surface realisation.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>R Dale</author>
<author>N Haddock</author>
</authors>
<title>Content determination in the generation of referring expressions.</title>
<date>1991</date>
<journal>ComputationalIntelligence,</journal>
<volume>7</volume>
<issue>4</issue>
<contexts>
<context position="1864" citStr="Dale and Haddock, 1991" startWordPosition="282" endWordPosition="285">g to. From the generation perspective, this means that, starting from the set of objects to be described and from the properties known to hold of these objects by both the speaker and the hearer, a definite description must be constructed which allows the user 1The other well-known function of a definite is to inform the hearer of some specific attributes the referent of the NP has. to unambiguously identify the objects being talked about. While the task of constructing singular definite descriptions on the basis of positive properties has received much attention in the generation literature (Dale and Haddock, 1991; Dale and Reiter, 1995; Horacek, 1997; Krahmer et al., 2001), for a long time, a more general statement of the task at hand remained outstanding. Recently however, several papers made a step in that direction. (van Deemter, 2001) showed how to extend the basic Dale and Reiter Algorithm (Dale and Reiter, 1995) to generate plural definite descriptions using not just conjunctions of positive properties but also negative and disjunctive properties; (Stone, 1998) integrates the D&amp;R algorithm into the surface realisation process and (Stone, 2000) extends it to deal with collective and distributive </context>
<context position="20745" citStr="Dale and Haddock, 1991" startWordPosition="3456" endWordPosition="3459">unary-relation “red” can be encoded by an integer, so can the proposition on( ) using the binaryrelation “on” be encoded by two integers (one for on( ) and one for on( ) . Thus the present algorithm improves on (van Deemter, 2001) which is restricted to unary relations. It also differs from (Krahmer et al., 2001), who use graphs and graph algorithms for computing DDs – while graphs provides a transparent encoding of unary and binary relations, they lose much of their intuitive appeal when applied to relations of higher arity. It is also worth noting that the infinite regress problem observed (Dale and Haddock, 1991) to hold for the D&amp;R algorithm (and similarly for its van Deemter’s generalisation) when extended to deal with binary relations, does not hold in the present approach. In the D&amp;R algorithm, the problem stems from the fact that DD are generated recursively: if when generating a DD for some entity , a relation is selected which relates to e.g., , the D&amp;R algorithm will recursively go on to produce a DD for . Without additional restriction, the algorithm can thus loop forever, first describing in terms of , then in terms of , then in terms of etc. The solution adopted by (Dale and Haddock, 1991) </context>
</contexts>
<marker>Dale, Haddock, 1991</marker>
<rawString>R. Dale and N. Haddock. 1991. Content determination in the generation of referring expressions. ComputationalIntelligence, 7(4):252–265.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Dale</author>
<author>E Reiter</author>
</authors>
<title>Computational interpretations of the gricean maxims in the generation of referring expressions.</title>
<date>1995</date>
<journal>Cognitive Science,</journal>
<pages>18--233</pages>
<contexts>
<context position="1887" citStr="Dale and Reiter, 1995" startWordPosition="286" endWordPosition="289">n perspective, this means that, starting from the set of objects to be described and from the properties known to hold of these objects by both the speaker and the hearer, a definite description must be constructed which allows the user 1The other well-known function of a definite is to inform the hearer of some specific attributes the referent of the NP has. to unambiguously identify the objects being talked about. While the task of constructing singular definite descriptions on the basis of positive properties has received much attention in the generation literature (Dale and Haddock, 1991; Dale and Reiter, 1995; Horacek, 1997; Krahmer et al., 2001), for a long time, a more general statement of the task at hand remained outstanding. Recently however, several papers made a step in that direction. (van Deemter, 2001) showed how to extend the basic Dale and Reiter Algorithm (Dale and Reiter, 1995) to generate plural definite descriptions using not just conjunctions of positive properties but also negative and disjunctive properties; (Stone, 1998) integrates the D&amp;R algorithm into the surface realisation process and (Stone, 2000) extends it to deal with collective and distributive plural NPs. Notably, in</context>
<context position="11857" citStr="Dale and Reiter, 1995" startWordPosition="1971" endWordPosition="1974">n generalised to disjunctive and negative properties, the incremental strategy might yield descriptions that are unnecessarily ambiguous (because of the high number of logical connectives they contain) and in the extreme cases, incomprehensible. 4 An alternative based on set constraints One possible solution to the problems raised by the incremental algorithm is to generate only minimal descriptions i.e. descriptions which use the smallest number of literals to uniquely identify the target set. By definition, these will never be redundant nor will they be unnecessarily long and ambiguous. As (Dale and Reiter, 1995) shows, the problem of finding minimal distinguishing descriptions can be formulated as a set cover problem and is therefore known to be NP hard. However, given an efficient implementation this might not be a hindrance in practice. The alternative algorithm I propose is therefore based on the use of constraint programming (CP), a paradigm aimed at efficiently solving NP hard combinatoric problems such as scheduling and optimization. Instead of following a generateand-test strategy which might result in an intractable search space, CP minimises the search space by following a propagate-and-dist</context>
</contexts>
<marker>Dale, Reiter, 1995</marker>
<rawString>R. Dale and E. Reiter. 1995. Computational interpretations of the gricean maxims in the generation of referring expressions. Cognitive Science, 18:233–263.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W Garey</author>
<author>D Johnson</author>
</authors>
<title>Computers and Intractability: a Guide to the Theory of NPCompleteness. W.H.Freeman,</title>
<date>1979</date>
<location>San Francisco.</location>
<contexts>
<context position="2732" citStr="Garey and Johnson, 1979" startWordPosition="425" endWordPosition="428"> extend the basic Dale and Reiter Algorithm (Dale and Reiter, 1995) to generate plural definite descriptions using not just conjunctions of positive properties but also negative and disjunctive properties; (Stone, 1998) integrates the D&amp;R algorithm into the surface realisation process and (Stone, 2000) extends it to deal with collective and distributive plural NPs. Notably, in all three cases, the incremental structure of the D&amp;R’s algorithm is preserved: the algorithm increments a set of properties till this set uniquely identifies the target set i.e., the set of objects to be described. As (Garey and Johnson, 1979) shows, such an incremental algorithm while being polynomial (and this, together with certain psycholinguistic observations, was one of the primary motivation for privileging this incremental strategy) is not guaranteed to find the minimal solution i.e., the description which uniquely identifies the target set using the smallest number of atomic properties. In this paper, I argue that this characteristic of the incremental algorithm while reasonably innocuous when generating singular definite descriptions using only conjunctions of positive properties, renders it cognitively inappropriate when</context>
</contexts>
<marker>Garey, Johnson, 1979</marker>
<rawString>W. Garey and D. Johnson. 1979. Computers and Intractability: a Guide to the Theory of NPCompleteness. W.H.Freeman, San Francisco.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Horacek</author>
</authors>
<title>An algorithm for generating referential descriptions with flexible interfaces.</title>
<date>1997</date>
<booktitle>In Proceedings of the 35 Annual Meeting of the Association for Computational Linguistics),</booktitle>
<pages>206--213</pages>
<location>Madrid.</location>
<contexts>
<context position="1902" citStr="Horacek, 1997" startWordPosition="290" endWordPosition="291">ns that, starting from the set of objects to be described and from the properties known to hold of these objects by both the speaker and the hearer, a definite description must be constructed which allows the user 1The other well-known function of a definite is to inform the hearer of some specific attributes the referent of the NP has. to unambiguously identify the objects being talked about. While the task of constructing singular definite descriptions on the basis of positive properties has received much attention in the generation literature (Dale and Haddock, 1991; Dale and Reiter, 1995; Horacek, 1997; Krahmer et al., 2001), for a long time, a more general statement of the task at hand remained outstanding. Recently however, several papers made a step in that direction. (van Deemter, 2001) showed how to extend the basic Dale and Reiter Algorithm (Dale and Reiter, 1995) to generate plural definite descriptions using not just conjunctions of positive properties but also negative and disjunctive properties; (Stone, 1998) integrates the D&amp;R algorithm into the surface realisation process and (Stone, 2000) extends it to deal with collective and distributive plural NPs. Notably, in all three case</context>
</contexts>
<marker>Horacek, 1997</marker>
<rawString>H. Horacek. 1997. An algorithm for generating referential descriptions with flexible interfaces. In Proceedings of the 35 Annual Meeting of the Association for Computational Linguistics), pages 206–213, Madrid.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P W Jordan</author>
</authors>
<title>An empirical study of the communicative goals impacting nominal expressions.</title>
<date>1999</date>
<booktitle>In the Proceedings of the ESSLLI workshop on The Generation ofNominal Expression.</booktitle>
<contexts>
<context position="23109" citStr="Jordan, 1999" startWordPosition="3860" endWordPosition="3861">finite regress is avoided by using the computed DDs to control the addition of new material to the tree being built. Minimality and overspecified descriptions. It has often been observed that human beings produce overspecified i.e., non-minimal descriptions. One might therefore wonder whether generating minimal descriptions is in fact appropriate. Two points speak for it. First, it is unclear whether redundant information is present because of a cognitive artifact (e.g., incremental processing) or because it helps fulfill some other communicative goal besides identification. So for instance, (Jordan, 1999) shows that in a specific task context, redundant attributes are used to indicate the violation of a task constraint (for instance, when violating a colour constraint, a task participant will use the description “the red table” rather than “the table” to indicate that s/he violates a constraint to the effect that red object may not be used at that stage of the task). More generally, it seems unlikely that no rule at all governs the presence of redundant information in definite descriptions. If redundant descriptions are to be produced, they should therefore be produced in relation to some gene</context>
</contexts>
<marker>Jordan, 1999</marker>
<rawString>P. W. Jordan. 1999. An empirical study of the communicative goals impacting nominal expressions. In the Proceedings of the ESSLLI workshop on The Generation ofNominal Expression.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Krahmer</author>
<author>S van Eerk</author>
<author>Andr´e Verleg</author>
</authors>
<title>A meta-algorithm for the generation of referring expressions.</title>
<date>2001</date>
<booktitle>In Proceedings of the 8th European Workshop on Natural Language Generation,</booktitle>
<location>Toulouse.</location>
<marker>Krahmer, van Eerk, Verleg, 2001</marker>
<rawString>E. Krahmer, S. van Eerk, and Andr´e Verleg. 2001. A meta-algorithm for the generation of referring expressions. In Proceedings of the 8th European Workshop on Natural Language Generation, Toulouse.</rawString>
</citation>
<citation valid="true">
<title>Programming Systems Lab Saarbr¨ucken.</title>
<date>1998</date>
<note>Oz Webpage: http://www.ps.uni-sb.de/oz/.</note>
<marker>1998</marker>
<rawString>Programming Systems Lab Saarbr¨ucken. 1998. Oz Webpage: http://www.ps.uni-sb.de/oz/.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Stone</author>
<author>Bonnie Webber</author>
</authors>
<title>Textual economy through closely coupled syntax and semantics.</title>
<date>1998</date>
<booktitle>In Proceedings of the Ninth International Workshop on Natural Language Generation,</booktitle>
<pages>178--187</pages>
<location>Niagaraon-the-Lake, Canada.</location>
<contexts>
<context position="15845" citStr="Stone and Webber, 1998" startWordPosition="2642" endWordPosition="2645">e modified as indicated in Figure 8. That is, the algorithm looks for a tuple of sets such that their union is the target set and such that for each set in that tuple there is a basic Figure 8: With disjunctive properties DD . The resulting description is the disjunctive description where each is a conjunctive description. As before solutions are searched for in increasing order of size (i.e., number of literals occurring in the description) by distributing over the cardinality of the resulting description. 5 Discussion and comparison with related work Integration with surface realisation As (Stone and Webber, 1998) clearly shows, the two-step strategy which consists in first computing a DD and second, generating a definite NP realising that DD, does not do language justice. This is because, as the following example from (Stone and Webber, 1998) illustrates, the information used to uniquely identify some object need not be localised to a definite description. (2) Remove the rabbit from the hat. In a context where there are several rabbits and several hats but only one rabbit in a hat (and only one hat containing a rabbit), the sentence in (2) is sufficient to identify the rabbit that is in the hat. In th</context>
</contexts>
<marker>Stone, Webber, 1998</marker>
<rawString>M. Stone and Bonnie Webber. 1998. Textual economy through closely coupled syntax and semantics. In Proceedings of the Ninth International Workshop on Natural Language Generation, pages 178–187, Niagaraon-the-Lake, Canada.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Stone</author>
</authors>
<title>Modality in Dialogue: Planning, Pragmatics and Computation.</title>
<date>1998</date>
<tech>Ph.D. thesis,</tech>
<institution>Department of Computer &amp; Information Science, University of Pennsylvania.</institution>
<contexts>
<context position="2327" citStr="Stone, 1998" startWordPosition="360" endWordPosition="361">g singular definite descriptions on the basis of positive properties has received much attention in the generation literature (Dale and Haddock, 1991; Dale and Reiter, 1995; Horacek, 1997; Krahmer et al., 2001), for a long time, a more general statement of the task at hand remained outstanding. Recently however, several papers made a step in that direction. (van Deemter, 2001) showed how to extend the basic Dale and Reiter Algorithm (Dale and Reiter, 1995) to generate plural definite descriptions using not just conjunctions of positive properties but also negative and disjunctive properties; (Stone, 1998) integrates the D&amp;R algorithm into the surface realisation process and (Stone, 2000) extends it to deal with collective and distributive plural NPs. Notably, in all three cases, the incremental structure of the D&amp;R’s algorithm is preserved: the algorithm increments a set of properties till this set uniquely identifies the target set i.e., the set of objects to be described. As (Garey and Johnson, 1979) shows, such an incremental algorithm while being polynomial (and this, together with certain psycholinguistic observations, was one of the primary motivation for privileging this incremental str</context>
</contexts>
<marker>Stone, 1998</marker>
<rawString>M. Stone. 1998. Modality in Dialogue: Planning, Pragmatics and Computation. Ph.D. thesis, Department of Computer &amp; Information Science, University of Pennsylvania.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Stone</author>
</authors>
<title>On Identifying Sets.</title>
<date>2000</date>
<booktitle>In Proceedings of the First international conference on Natural Language Generation,</booktitle>
<location>Mitzpe Ramon.</location>
<contexts>
<context position="2411" citStr="Stone, 2000" startWordPosition="372" endWordPosition="373">ch attention in the generation literature (Dale and Haddock, 1991; Dale and Reiter, 1995; Horacek, 1997; Krahmer et al., 2001), for a long time, a more general statement of the task at hand remained outstanding. Recently however, several papers made a step in that direction. (van Deemter, 2001) showed how to extend the basic Dale and Reiter Algorithm (Dale and Reiter, 1995) to generate plural definite descriptions using not just conjunctions of positive properties but also negative and disjunctive properties; (Stone, 1998) integrates the D&amp;R algorithm into the surface realisation process and (Stone, 2000) extends it to deal with collective and distributive plural NPs. Notably, in all three cases, the incremental structure of the D&amp;R’s algorithm is preserved: the algorithm increments a set of properties till this set uniquely identifies the target set i.e., the set of objects to be described. As (Garey and Johnson, 1979) shows, such an incremental algorithm while being polynomial (and this, together with certain psycholinguistic observations, was one of the primary motivation for privileging this incremental strategy) is not guaranteed to find the minimal solution i.e., the description which un</context>
</contexts>
<marker>Stone, 2000</marker>
<rawString>M. Stone. 2000. On Identifying Sets. In Proceedings of the First international conference on Natural Language Generation, Mitzpe Ramon.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kristina Striegnitz</author>
</authors>
<title>A chart-based generation algorithm for LTAG with pragmatic constraints.</title>
<date>2001</date>
<note>To appear.</note>
<contexts>
<context position="18937" citStr="Striegnitz, 2001" startWordPosition="3157" endWordPosition="3158"> within the corresponding NP – as a DD is added to the goal semantics, it guides the lexical lookup process (only items in the lexicon whose semantics subsumes part of the goal semantics are selected) but there is no restriction on how the given semantic information is realised. Unlike SPUD however, the INDIGEN generator does not follow an incremental greedy search strategy mirroring the incremental D&amp;R algorithm (at each step in the generation process, SPUD compares all possible continuations and only pursues the best one; There is no backtracking). It follows a chart based strategy instead (Striegnitz, 2001) producing all possible paraphrases. The drawback is of course a loss in efficiency. The advantages on the other hand are twofold. First, INDIGEN only generates definite descriptions that realize minimal DD. Thus unlike SPUD, it will not run into the problems mentioned in section 2 once generalised to negative and disjunctive properties. Second, if there is no DD for a given entity, this will be immediately noticed in the present approach thus allowing for a non definite NP or a quantifier to be constructed instead. In contrast, SPUD will, if unconstrained, keep adding material to the tree unt</context>
</contexts>
<marker>Striegnitz, 2001</marker>
<rawString>Kristina Striegnitz. 2001. A chart-based generation algorithm for LTAG with pragmatic constraints. To appear.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K van Deemter</author>
</authors>
<title>Generating Referring Expressions: Boolean Extensions of the Incremental Algorithm.</title>
<date>2001</date>
<note>To appear in Computational Linguistics.</note>
<marker>van Deemter, 2001</marker>
<rawString>K. van Deemter. 2001. Generating Referring Expressions: Boolean Extensions of the Incremental Algorithm. To appear in Computational Linguistics.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>