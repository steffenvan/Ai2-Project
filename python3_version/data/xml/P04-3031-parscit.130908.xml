<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000119">
<title confidence="0.952473">
NLTK: The Natural Language Toolkit
</title>
<author confidence="0.998986">
Steven Bird
</author>
<affiliation confidence="0.996577">
Department of Computer Science
and Software Engineering
University of Melbourne
</affiliation>
<address confidence="0.692053">
Victoria 3010, Australia
</address>
<email confidence="0.997105">
sb@csse.unimelb.edu.au
</email>
<author confidence="0.995271">
Edward Loper
</author>
<affiliation confidence="0.94854675">
Department of Computer
and Information Science
University of Pennsylvania
Philadelphia PA 19104-6389, USA
</affiliation>
<email confidence="0.998581">
edloper@gradient.cis.upenn.edu
</email>
<sectionHeader confidence="0.993869" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.998235285714286">
The Natural Language Toolkit is a suite of program mod-
ules, data sets, tutorials and exercises, covering symbolic
and statistical natural language processing. NLTK is
written in Python and distributed under the GPL open
source license. Over the past three years, NLTK has
become popular in teaching and research. We describe
the toolkit and report on its current state of development.
</bodyText>
<sectionHeader confidence="0.99879" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.970178789473684">
The Natural Language Toolkit (NLTK) was
developed in conjunction with a computational
linguistics course at the University of Pennsylvania
in 2001 (Loper and Bird, 2002). It was designed
with three pedagogical applications in mind:
assignments, demonstrations, and projects.
Assignments. NLTK supports assignments of
varying difficulty and scope. In the simplest assign-
ments, students experiment with existing compo-
nents to perform a wide variety of NLP tasks. As
students become more familiar with the toolkit, they
can be asked to modify existing components, or
to create complete systems out of existing compo-
nents.
Demonstrations. NLTK’s interactive graphical
demonstrations have proven to be very useful
for students learning NLP concepts. The
demonstrations give a step-by-step execution
of important algorithms, displaying the current
state of key data structures. A screenshot of the
chart parsing demonstration is shown in Figure 1.
Projects. NLTK provides students with a flexible
framework for advanced projects. Typical projects
might involve implementing a new algorithm,
developing a new component, or implementing a
new task.
We chose Python because it has a shallow learn-
ing curve, its syntax and semantics are transparent,
and it has good string-handling functionality. As
an interpreted language, Python facilitates interac-
tive exploration. As an object-oriented language,
Python permits data and methods to be encapsulated
and re-used easily. Python comes with an extensive
standard library, including tools for graphical pro-
gramming and numerical processing. The recently
added generator syntax makes it easy to create inter-
active implementations of algorithms (Loper, 2004;
Rossum, 2003a; Rossum, 2003b).
</bodyText>
<figureCaption confidence="0.992362">
Figure 1: Interactive Chart Parsing Demonstration
</figureCaption>
<sectionHeader confidence="0.997995" genericHeader="introduction">
2 Design
</sectionHeader>
<bodyText confidence="0.999916916666667">
NLTK is implemented as a large collection of
minimally interdependent modules, organized
into a shallow hierarchy. A set of core modules
defines basic data types that are used throughout the
toolkit. The remaining modules are task modules,
each devoted to an individual natural language
processing task. For example, the nltk.parser
module encompasses to the task of parsing, or
deriving the syntactic structure of a sentence;
and the nltk.tokenizer module is devoted to
the task of tokenizing, or dividing a text into its
constituent parts.
</bodyText>
<subsectionHeader confidence="0.992206">
2.1 Tokens and other core data types
</subsectionHeader>
<bodyText confidence="0.900969104166667">
To maximize interoperability between modules, we
use a single class to encode information about nat-
ural language texts – the Token class. Each Token
instance represents a unit of text such as a word,
sentence, or document, and is defined by a (partial)
mapping from property names to values. For exam-
ple, the TEXT property is used to encode a token’s
text content:1
&gt;&gt;&gt; from nltk.token import *
&gt;&gt;&gt; Token(TEXT=&amp;quot;Hello World!&amp;quot;)
&lt;Hello World!&gt;
The TAG property is used to encode a token’s part-
of-speech tag:
&gt;&gt;&gt; Token(TEXT=&amp;quot;python&amp;quot;, TAG=&amp;quot;NN&amp;quot;)
&lt;python/NN&gt;
The SUBTOKENS property is used to store a tok-
enized text:
&gt;&gt;&gt; from nltk.tokenizer import *
&gt;&gt;&gt; tok = Token(TEXT=&amp;quot;Hello World!&amp;quot;)
&gt;&gt;&gt; WhitespaceTokenizer().tokenize(tok)
&gt;&gt;&gt; print tok[’SUBTOKENS’])
[&lt;Hello&gt;, &lt;World!&gt;]
In a similar fashion, other language processing tasks
such as word-sense disambiguation, chunking and
parsing all add properties to the Token data struc-
ture.
In general, language processing tasks are formu-
lated as annotations and transformations involving
Tokens. In particular, each processing task takes
a token and extends it to include new information.
These modifications are typically monotonic; new
information is added but existing information is not
deleted or modified. Thus, tokens serve as a black-
board, where information about a piece of text is
collated. This architecture contrasts with the more
typical pipeline architecture where each processing
task’s output discards its input information. We
chose the blackboard approach over the pipeline
approach because it allows more flexibility when
combining tasks into a single system.
In addition to the Token class and its derivatives,
NLTK defines a variety of other data types. For
instance, the probability module defines classes
for probability distributions and statistical smooth-
ing techniques; and the cfg module defines classes
for encoding context free grammars and probabilis-
tic context free grammars.
&apos;Some code samples are specific to NLTK version 1.4.
</bodyText>
<subsectionHeader confidence="0.989485">
2.2 The corpus module
</subsectionHeader>
<bodyText confidence="0.999228714285714">
Many language processing tasks must be developed
and tested using annotated data sets or corpora.
Several such corpora are distributed with NLTK,
as listed in Table 1. The corpus module defines
classes for reading and processing many of these
corpora. The following code fragment illustrates
how the Brown Corpus is accessed.
</bodyText>
<table confidence="0.8488011">
&gt;&gt;&gt; from nltk.corpus import brown
&gt;&gt;&gt; brown.groups()
[’skill and hobbies’, ’popular lore’,
’humor’, ’fiction: mystery’, ...]
&gt;&gt;&gt; brown.items(’humor’)
(’cr01’, ’cr02’, ’cr03’, ’cr04’, ’cr05’,
’cr06’, ’cr07’, ’cr08’, ’cr09’)
&gt;&gt;&gt; brown.tokenize(’cr01’)
&lt;[&lt;It/pps&gt;, &lt;was/bedz&gt;, &lt;among/in&gt;,
&lt;these/dts&gt;, &lt;that/cs&gt;, &lt;Hinkle/np&gt;,
&lt;identified/vbd&gt;, &lt;a/at&gt;, ...]&gt;
A selection of 5% of the Penn Treebank corpus is
included with NLTK, and it is accessed as follows:
&gt;&gt;&gt; from nltk.corpus import treebank
&gt;&gt;&gt; treebank.groups()
(’raw’, ’tagged’, ’parsed’, ’merged’)
&gt;&gt;&gt; treebank.items(’parsed’)
[’wsj_0001.prd’, ’wsj_0002.prd’, ...]
&gt;&gt;&gt; item = ’parsed/wsj_0001.prd’
&gt;&gt;&gt; sentences = treebank.tokenize(item)
&gt;&gt;&gt; for sent in sentences[’SUBTOKENS’]:
... print sent.pp() # pretty-print
(S:
(NP-SBJ:
(NP: &lt;Pierre&gt; &lt;Vinken&gt;)
(ADJP:
(NP: &lt;61&gt; &lt;years&gt;)
&lt;old&gt;
)
...
</table>
<subsectionHeader confidence="0.996699">
2.3 Processing modules
</subsectionHeader>
<bodyText confidence="0.999947909090909">
Each language processing algorithm is implemented
as a class. For example, the ChartParser and
RecursiveDescentParser classes each define
a single algorithm for parsing a text. We imple-
ment language processing algorithms using classes
instead of functions for three reasons. First, all
algorithm-specific options can be passed to the con-
structor, allowing a consistent interface for applying
the algorithms. Second, a number of algorithms
need to have their state initialized before they can
be used. For example, the NthOrderTagger class
</bodyText>
<note confidence="0.60071">
Corpus Contents and Wordcount Example Application
</note>
<table confidence="0.910915933333333">
20 Newsgroups (selection) 3 newsgroups, 4000 posts, 780kw text classification
Brown Corpus 15 genres, 1.15Mw, tagged training &amp; testing taggers, text classification
CoNLL 2000 Chunking Data 270kw, tagged and chunked training &amp; testing chunk parsers
Project Gutenberg (selection) 14 texts, 1.7Mw text classification, language modelling
NIST 1999 IEER (selection) 63kw, named-entity markup training &amp; testing named-entity recognizers
Levin Verb Index 3k verbs with Levin classes parser development
Names Corpus 8k male &amp; female names text classification
PP Attachment Corpus 28k prepositional phrases, tagged parser development
Roget’s Thesaurus 200kw, formatted text word-sense disambiguation
SEMCOR 880kw, POS &amp; sense tagged word-sense disambiguation
SENSEVAL 2 Corpus 600kw, POS &amp; sense tagged word-sense disambiguation
Stopwords Corpus 2,400 stopwords for 11 lgs text retrieval
Penn Treebank (sample) 40kw, tagged &amp; parsed parser development
Wordnet 1.7 180kw in a semantic network WSD, NL understanding
Wordlist Corpus 960kw and 20k affixes for 8 lgs spell checking
</table>
<tableCaption confidence="0.999451">
Table 1: Corpora and Corpus Samples Distributed with NLTK
</tableCaption>
<bodyText confidence="0.999519392857143">
must be initialized by training on a tagged corpus
before it can be used. Third, subclassing can be used
to create specialized versions of a given algorithm.
Each processing module defines an interface
for its task. Interface classes are distinguished by
naming them with a trailing capital “I,” such as
ParserI. Each interface defines a single action
method which performs the task defined by the
interface. For example, the ParserI interface
defines the parse method and the Tokenizer
interface defines the tokenize method. When
appropriate, an interface defines extended action
methods, which provide variations on the basic
action method. For example, the ParserI interface
defines the parse n method which finds at most n
parses for a given sentence; and the TokenizerI
interface defines the xtokenize method, which
outputs an iterator over subtokens instead of a list
of subtokens.
NLTK includes the following modules:
cfg, corpus, draw (cfg, chart, corpus,
featurestruct, fsa, graph, plot, rdparser,
srparser, tree), eval, featurestruct,
parser (chart, chunk, probabilistic),
probability, sense, set, stemmer (porter),
tagger, test, token, tokenizer, tree, and
util. Please see the online documentation for
details.
</bodyText>
<subsectionHeader confidence="0.982154">
2.4 Documentation
</subsectionHeader>
<bodyText confidence="0.999961375">
Three different types of documentation are avail-
able. Tutorials explain how to use the toolkit, with
detailed worked examples. The API documentation
describes every module, interface, class, method,
function, and variable in the toolkit. Technical
reports explain and justify the toolkit’s design and
implementation. All are available from http://
nltk.sf.net/docs.html.
</bodyText>
<sectionHeader confidence="0.995838" genericHeader="method">
3 Installing NLTK
</sectionHeader>
<bodyText confidence="0.98007055">
NLTK is available from nltk.sf.net, and is
packaged for easy installation under Unix, Mac
OS X and Windows. The full distribution consists
of four packages: the Python source code (nltk);
the corpora (nltk-data); the documentation
(nltk-docs); and third-party contributions
(nltk-contrib). Before installing NLTK, it is
necessary to install Python version 2.3 or later,
available from www.python.org. Full installation
instructions and a quick start guide are available
from the NLTK homepage.
As soon as NLTK is installed, users can run the
demonstrations. On Windows, the demonstrations
can be run by double-clicking on their Python
source files. Alternatively, from the Python
interpreter, this can be done as follows:
&gt;&gt;&gt; import nltk.draw.rdparser
&gt;&gt;&gt; nltk.draw.rdparser.demo()
&gt;&gt;&gt; nltk.draw.srparser.demo()
&gt;&gt;&gt; nltk.draw.chart.demo()
</bodyText>
<sectionHeader confidence="0.551025" genericHeader="method">
4 Using and contributing to NLTK
</sectionHeader>
<bodyText confidence="0.999902677419355">
NLTK has been used at the University of Pennsylva-
nia since 2001, and has subsequently been adopted
by several NLP courses at other universities, includ-
ing those listed in Table 2.
Third party contributions to NLTK include:
Brill tagger (Chris Maloof), hidden Markov model
tagger (Trevor Cohn, Phil Blunsom), GPSG-style
feature-based grammar and parser (Rob Speer, Bob
Berwick), finite-state morphological analyzer (Carl
de Marcken, Beracah Yankama, Bob Berwick),
decision list and decision tree classifiers (Trevor
Cohn), and Discourse Representation Theory
implementation (Edward Ivanovic).
NLTK is an open source project, and we wel-
come any contributions. There are several ways
to contribute: users can report bugs, suggest fea-
tures, or contribute patches on Sourceforge; users
can participate in discussions on the NLTK-Devel
mailing list2 or in the NLTK public forums; and
users can submit their own NLTK-based projects
for inclusion in the nltk contrib directory. New
code modules that are relevant, substantial, orig-
inal and well-documented will be considered for
inclusion in NLTK proper. All source code is dis-
tributed under the GNU General Public License, and
all documentation is distributed under a Creative
Commons non-commercial license. Thus, poten-
tial contributors can be confident that their work
will remain freely available to all. Further infor-
mation about contributing to NLTK is available at
http://nltk.sf.net/contrib.html.
</bodyText>
<sectionHeader confidence="0.998904" genericHeader="conclusions">
5 Conclusion
</sectionHeader>
<bodyText confidence="0.999927666666667">
NLTK is a broad-coverage natural language toolkit
that provides a simple, extensible, uniform frame-
work for assignments, demonstrations and projects.
It is thoroughly documented, easy to learn, and sim-
ple to use. NLTK is now widely used in research
and teaching. Readers who would like to receive
occasional announcements about NLTK are encour-
aged to sign up for the low-volume, moderated mail-
ing list NLTK-Announce.3
</bodyText>
<sectionHeader confidence="0.999346" genericHeader="acknowledgments">
6 Acknowledgements
</sectionHeader>
<bodyText confidence="0.998533333333333">
We are indebted to our students and colleagues for
feedback on the toolkit, and to many contributors
listed on the NLTK website.
</bodyText>
<footnote confidence="0.98735725">
2http://lists.sourceforge.net/
lists/listinfo/nltk-devel
3http://lists.sourceforge.net/
lists/listinfo/nltk-announce
</footnote>
<affiliation confidence="0.733071">
Graz University of Technology, Austria
</affiliation>
<reference confidence="0.750195035714286">
Information Search and Retrieval
Macquarie University, Australia
Intelligent Text Processing
Massachusetts Institute of Technology, USA
Natural Language Processing
National Autonomous University of Mexico, Mexico
Introduction to Natural Language Processing
in Python
Ohio State University, USA
Statistical Natural Language Processing
University of Amsterdam, Netherlands
Language Processing and Information Access
University of Colorado, USA
Natural Language Processing
University of Edinburgh, UK
Introduction to Computational Linguistics
University of Magdeburg, Germany
Natural Language Systems
University of Malta, Malta
Natural Language Algorithms
University of Melbourne, Australia
Human Language Technology
University of Pennsylvania, USA
Introduction to Computational Linguistics
University of Pittsburgh, USA
Artificial Intelligence Application Development
Simon Fraser University, Canada
Computational Linguistics
</reference>
<tableCaption confidence="0.858532">
Table 2: University Courses using NLTK
</tableCaption>
<sectionHeader confidence="0.992846" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.998978">
Edward Loper and Steven Bird. 2002. NLTK:
The Natural Language Toolkit. In Proceedings
of the ACL Workshop on Effective Tools and
Methodologies for Teaching Natural Language
Processing and Computational Linguistics, pages
62–69. Somerset, NJ: Association for Computa-
tional Linguistics. http://arXiv.org/abs/
cs/0205028.
Edward Loper. 2004. NLTK: Building a pedagogi-
cal toolkit in Python. In PyCon DC 2004. Python
Software Foundation. http://www.python.
org/pycon/dc2004/papers/.
Guido Van Rossum. 2003a. An Introduction to
Python. Network Theory Ltd.
Guido Van Rossum. 2003b. The Python Language
Reference. Network Theory Ltd.
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.944711">
<title confidence="0.999842">NLTK: The Natural Language Toolkit</title>
<author confidence="0.999961">Steven Bird</author>
<affiliation confidence="0.999740666666667">Department of Computer Science and Software Engineering University of Melbourne</affiliation>
<address confidence="0.998833">Victoria 3010, Australia</address>
<email confidence="0.996771">sb@csse.unimelb.edu.au</email>
<author confidence="0.99974">Edward Loper</author>
<affiliation confidence="0.999889666666667">Department of Computer and Information Science University of Pennsylvania</affiliation>
<address confidence="0.995321">Philadelphia PA 19104-6389, USA</address>
<email confidence="0.99988">edloper@gradient.cis.upenn.edu</email>
<abstract confidence="0.994264375">The Natural Language Toolkit is a suite of program modules, data sets, tutorials and exercises, covering symbolic and statistical natural language processing. NLTK is written in Python and distributed under the GPL open source license. Over the past three years, NLTK has become popular in teaching and research. We describe the toolkit and report on its current state of development.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="false">
<title>Introduction to Natural Language Processing in Python Ohio</title>
<institution>Macquarie University, Australia Intelligent Text Processing Massachusetts Institute of Technology, USA Natural Language Processing National Autonomous University of Mexico, Mexico</institution>
<marker></marker>
<rawString>Macquarie University, Australia Intelligent Text Processing Massachusetts Institute of Technology, USA Natural Language Processing National Autonomous University of Mexico, Mexico Introduction to Natural Language Processing in Python Ohio State University, USA Statistical Natural Language Processing University of Amsterdam, Netherlands Language Processing and Information Access University of Colorado, USA Natural Language Processing University of Edinburgh, UK Introduction to Computational Linguistics University of Magdeburg, Germany Natural Language Systems University of Malta, Malta Natural Language Algorithms University of Melbourne, Australia Human Language Technology University of Pennsylvania, USA Introduction to Computational Linguistics University of Pittsburgh, USA Artificial Intelligence Application Development Simon Fraser University, Canada Computational Linguistics Table 2: University Courses using NLTK</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>