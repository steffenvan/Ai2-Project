<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000007">
<title confidence="0.993887">
An Exact A* Method for Deciphering Letter-Substitution Ciphers
</title>
<author confidence="0.997713">
Eric Corlett and Gerald Penn
</author>
<affiliation confidence="0.998754">
Department of Computer Science
University of Toronto
</affiliation>
<email confidence="0.995054">
{ecorlett,gpenn}@cs.toronto.edu
</email>
<sectionHeader confidence="0.997333" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999901473684211">
Letter-substitution ciphers encode a docu-
ment from a known or hypothesized lan-
guage into an unknown writing system or
an unknown encoding of a known writing
system. It is a problem that can occur in
a number of practical applications, such as
in the problem of determining the encod-
ings of electronic documents in which the
language is known, but the encoding stan-
dard is not. It has also been used in rela-
tion to OCR applications. In this paper, we
introduce an exact method for decipher-
ing messages using a generalization of the
Viterbi algorithm. We test this model on a
set of ciphers developed from various web
sites, and find that our algorithm has the
potential to be a viable, practical method
for efficiently solving decipherment prob-
lems.
</bodyText>
<sectionHeader confidence="0.999517" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.99998315">
Letter-substitution ciphers encode a document
from a known language into an unknown writ-
ing system or an unknown encoding of a known
writing system. This problem has practical sig-
nificance in a number of areas, such as in reading
electronic documents that may use one of many
different standards to encode text. While this is not
a problem in languages like English and Chinese,
which have a small set of well known standard en-
codings such as ASCII, Big5 and Unicode, there
are other languages such as Hindi in which there
is no dominant encoding standard for the writing
system. In these languages, we would like to be
able to automatically retrieve and display the in-
formation in electronic documents which use un-
known encodings when we find them. We also
want to use these documents for information re-
trieval and data mining, in which case it is impor-
tant to be able to read through them automatically,
without resorting to a human annotator. The holy
grail in this area would be an application to ar-
chaeological decipherment, in which the underly-
ing language’s identity is only hypothesized, and
must be tested. The purpose of this paper, then,
is to simplify the problem of reading documents
in unknown encodings by presenting a new algo-
rithm to be used in their decipherment. Our algo-
rithm operates by running a search over the n-gram
probabilities of possible solutions to the cipher, us-
ing a generalization of the Viterbi algorithm that
is wrapped in an A* search, which determines at
each step which partial solutions to expand. It
is guaranteed to converge on the language-model-
optimal solution, and does not require restarts or
risk falling into local optima. We specifically con-
sider the problem of finding decodings of elec-
tronic documents drawn from the internet, and
we test our algorithm on ciphers drawn from ran-
domly selected pages of Wikipedia. Our testing
indicates that our algorithm will be effective in this
domain.
It may seem at first that automatically decoding
(as opposed to deciphering) a document is a sim-
ple matter, but studies have shown that simple al-
gorithms such as letter frequency counting do not
always produce optimal solutions (Bauer, 2007).
If the text from which a language model is trained
is of a different genre than the plaintext of a cipher,
the unigraph letter frequencies may differ substan-
tially from those of the language model, and so
frequency counting will be misleading. Because
of the perceived simplicity of the problem, how-
ever, little work was performed to understand its
computational properties until Peleg and Rosen-
feld (1979), who developed a method that repeat-
edly swaps letters in a cipher to find a maximum
probability solution. Since then, several different
approaches to this problem have been suggested,
some of which use word counts in the language
to arrive at a solution (Hart, 1994), and some of
</bodyText>
<page confidence="0.919592">
1040
</page>
<note confidence="0.698528">
Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics, pages 1040–1047,
Uppsala, Sweden, 11-16 July 2010. c�2010 Association for Computational Linguistics
</note>
<bodyText confidence="0.999967703125">
which treat the problem as an expectation max-
imization problem (Knight et al., 2006; Knight,
1999). These later algorithms are, however, highly
dependent on their initial states, and require a
number of restarts in order to find the globally op-
timal solution. A further contribution was made by
(Ravi and Knight, 2008), which, though published
earlier, was inspired in part by the method pre-
sented here, first discovered in 2007. Unlike the
present method, however, Ravi and Knight (2008)
treat the decipherment of letter-substitution ci-
phers as an integer programming problem. Clever
though this constraint-based encoding is, their pa-
per does not quantify the massive running times
required to decode even very short documents
with this sort of approach. Such inefficiency indi-
cates that integer programming may simply be the
wrong tool for the job, possibly because language
model probabilities computed from empirical data
are not smoothly distributed enough over the space
in which a cutting-plane method would attempt to
compute a linear relaxation of this problem. In
any case, an exact method is available with a much
more efficient A* search that is linear-time in the
length of the cipher (though still horribly exponen-
tial in the size of the cipher and plain text alpha-
bets), and has the additional advantage of being
massively parallelizable. (Ravi and Knight, 2008)
also seem to believe that short cipher texts are
somehow inherently more difficult to solve than
long cipher texts. This difference in difficulty,
while real, is not inherent, but rather an artefact of
the character-level n-gram language models that
they (and we) use, in which preponderant evidence
of differences in short character sequences is nec-
essary for the model to clearly favour one letter-
substitution mapping over another. Uniform char-
acter models equivocate regardless of the length of
the cipher, and sharp character models with many
zeroes can quickly converge even on short ciphers
of only a few characters. In the present method,
the role of the language model can be acutely per-
ceived; both the time complexity of the algorithm
and the accuracy of the results depend crucially on
this characteristic of the language model. In fact,
we must use add-one smoothing to decipher texts
of even modest lengths because even one unseen
plain-text letter sequence is enough to knock out
the correct solution. It is likely that the method
of (Ravi and Knight, 2008) is sensitive to this as
well, but their experiments were apparently fixed
on a single, well-trained model.
Applications of decipherment are also explored
by (Nagy et al., 1987), who uses it in the con-
text of optical character recognition (OCR). The
problem we consider here is cosmetically related
to the “L2P” (letter-to-phoneme) mapping prob-
lem of text-to-speech synthesis, which also fea-
tures a prominent constraint-based approach (van
den Bosch and Canisius, 2006), but the constraints
in L2P are very different: two different instances
of the same written letter may legitimately map to
two different phonemes. This is not the case in
letter-substitution maps.
</bodyText>
<sectionHeader confidence="0.998736" genericHeader="introduction">
2 Terminology
</sectionHeader>
<bodyText confidence="0.99982435">
Substitution ciphers are ciphers that are defined
by some permutation of a plaintext alphabet. Ev-
ery character of a plaintext string is consistently
mapped to a single character of an output string
using this permutation. For example, if we took
the string ”hello world” to be the plaintext, then
the string &amp;quot;ifmmp xpsme&amp;quot; would be a cipher
that maps e to f, l to m, and so on. It is easy
to extend this kind of cipher so that the plaintext
alphabet is different from the ciphertext alphabet,
but still stands in a one to one correspondence to
it. Given a ciphertext C, we say that the set of
characters used in C is the ciphertext alphabet EC,
and that its size is nC. Similarly, the entire possi-
ble plaintext alphabet is EP, and its size is is nP.
Since nC is the number of letters actually used
in the cipher, rather than the entire alphabet it is
sampled from, we may find that nC &lt; nP even
when the two alphabets are the same. We refer to
the length of the cipher string C as clm. In the
</bodyText>
<equation confidence="0.763424333333333">
above example, EP is { , a,... z} and nP = 27,
while EC = { , e, f, i, m, p, s, x}, clm = 11 and
nC = 8.
</equation>
<bodyText confidence="0.997052384615385">
Given the ciphertext C, we say that a partial
solution of size k is a map Q = {p1 : c1,... pk :
ck}, where c1, ... , ck E EC and are distinct, and
p1, ... , pk E EP and are distinct, and where k &lt;
nC. If for a partial solution Q&apos;, we have that Q C
Q&apos;, then we say that Q&apos; extends Q. If the size of Q&apos; is
k+1 and Q is size k, we say that Q&apos; is an immediate
extension of Q. A full solution is a partial solution
of size nC. In the above example, Q1 = { : , d :
e} would be a partial solution of size 2, and Q2 =
{ : , d : e, g : m} would be a partial solution
of size 3 that immediately extends Q1. A partial
solution QT{ : , d : e, e : f, h : i, l : m, o :
</bodyText>
<page confidence="0.958133">
1041
</page>
<bodyText confidence="0.997205166666667">
p, r : s, w : x} would be both a full solution and
the correct one. The full solution QT extends Q1
but not Q2.
Every possible full solution to a cipher C will
produce a plaintext string with some associated
language model probability, and we will consider
the best possible solution to be the one that gives
the highest probability. For the sake of concrete-
ness, we will assume here that the language model
is a character-level trigram model. This plain-
text can be found by treating all of the length clen
strings 5 as being the output of different charac-
ter mappings from C. A string 5 that results from
such a mapping is consistent with a partial solu-
tion Q iff, for every pi : ci E Q, the character posi-
tions of C that map to pi are exactly the character
positions with ci in C.
In our above example, we had C =
&amp;quot;ifmmp xpsme&amp;quot;, in which case we had
clen = 11. So mappings from C to
&amp;quot;hhhhh hhhhh&amp;quot; or&amp;quot; hhhhhhhhhh&amp;quot; would
be consistent with a partial solution of size 0,
while &amp;quot;hhhhh hhhhn&amp;quot; would be consistent with
the size 2 partial solution Q = { : , n : e}.
</bodyText>
<sectionHeader confidence="0.991974" genericHeader="method">
3 The Algorithm
</sectionHeader>
<bodyText confidence="0.999565297297297">
In order to efficiently search for the most likely so-
lution for a ciphertext C, we conduct a search of
the partial solutions using their trigram probabil-
ities as a heuristic, where the trigram probability
of a partial solution Q of length k is the maximum
trigram probability over all strings consistent with
it, meaning, in particular, that ciphertext letters not
in its range can be mapped to any plaintext letter,
and do not even need to be consistently mapped to
the same plaintext letter in every instance. Given
a partial solution Q of length n, we can extend Q
by choosing a ciphertext letter c not in the range
of Q, and then use our generalization of the Viterbi
algorithm to find, for each p not in the domain of
Q, a score to rank the choice of p for c, namely the
trigram probability of the extension Qp of Q. If we
start with an empty solution and iteratively choose
the most likely remaining partial solution in this
way, storing the extensions obtained in a priority
heap as we go, we will eventually reach a solution
of size nC. Every extension of Q has a probabil-
ity that is, at best, equal to that of Q, and every
partial solution receives, at worst, a score equal
to its best extension, because the score is poten-
tially based on an inconsistent mapping that does
not qualify as an extension. These two observa-
tions taken together mean that one minus the score
assigned by our method constitutes a cost function
over which this score is an admissible heuristic in
the A* sense. Thus the first solution of size nC
will be the best solution of size nC.
The order by which we add the letters c to par-
tial solutions is the order of the distinct cipher-
text letters in right-to-left order of their final oc-
currence in C. Other orderings for the c, such as
most frequent first, are also possible though less
elegant.1
</bodyText>
<figure confidence="0.47205985">
Algorithm 1 Search Algorithm
Order the letters c1 ... cnC by rightmost occur-
rence in C, rnC &lt; ... &lt; r1.
Create a priority queue Q for partial solutions,
ordered by highest probability.
Push the empty solution Q0 = {} onto the
queue.
while Q is not empty do
Pop the best partial solution Q from Q.
s = |Q|.
if s = nC then
return Q
else
For all p not in the range of Q, push the
immediate extension Qp onto Q with the
score assigned to table cell G(rs+1, p, p)
by GVit(Q, cs+1, rs+1) if it is non-zero.
end if
end while
Return ”Solution Infeasible”.
</figure>
<bodyText confidence="0.99979535">
Our generalization of the Viterbi algorithm, de-
picted in Figure 1, uses dynamic programming to
score every immediate extension of a given partial
solution in tandem, by finding, in a manner con-
sistent with the real Viterbi algorithm, the most
probable input string given a set of output sym-
bols, which in this case is the cipher C. Unlike the
real Viterbi algorithm, we must also observe the
constraints of the input partial solution’s mapping.
1We have experimented with the most frequent first regi-
men as well, and it performs worse than the one reported here.
Our hypothesis is that this is due to the fact that the most fre-
quent character tends to appear in many high-frequency tri-
grams, and so our priority queue becomes very long because
of a lack of low-probability trigrams to knock the scores of
partial solutions below the scores of the extensions of their
better scoring but same-length peers. A least frequent first
regimen has the opposite problem, in which their rare oc-
currence in the ciphertext provides too few opportunities to
potentially reduce the score of a candidate.
</bodyText>
<page confidence="0.979721">
1042
</page>
<bodyText confidence="0.996302375">
A typical decipherment involves multiple runs of
this algorithm, each of which scores all of the im-
mediate extensions, both tightening and lowering
their scores relative to the score of the input par-
tial solution. A call GVit(σ, c, r) manages this by
filling in a table G such that for all 1 G i G r, and
l, k E EP, G(i,l, k) is the maximum probability
over every plaintext string S for which:
</bodyText>
<listItem confidence="0.9996515">
• len(S) = i,
• S[i] = l,
• for every p in the domain of σ, every 1 G j G
i, if C[j] = σ(p) then S[j] = p, and
• for every position 1 G j G i, if C[j] = c,
then S[j] = k.
</listItem>
<bodyText confidence="0.999277347826087">
The real Viterbi algorithm lacks these final two
constraints, and would only store a single cell at
G(i,l). There, G is called a trellis. Ours is larger,
so so we will refer to G as a greenhouse.
The table is completed by filling in the columns
from i = 1 to cles, in order. In every column i,
we will iterate over the values of l and over the
values of k such that k : c and l : are consistent
with σ. Because we are using a trigram character
model, the cells in the first and second columns
must be primed with unigram and bigram proba-
bilities. The remaining probabilities are calculated
by searching through the cells from the previous
two columns, using the entry at the earlier column
to indicate the probability of the best string up to
that point, and searching through the trigram prob-
abilities over two additional letters. Backpointers
are necessary to reference one of the two language
model probabilities. Cells that would produce in-
consistencies are left at zero, and these as well as
cells that the language model assigns zero to can
only produce zero entries in later columns.
In order to decrease the search space, we add the
further restriction that the solutions of every three
character sequence must be consistent: if the ci-
phertext indicates that two adjacent letters are the
same, then only the plaintext strings that map the
same letter to each will be considered. The num-
ber of letters that are forced to be consistent is
three because consistency is enforced by remov-
ing inconsistent strings from consideration during
trigram model evaluation.
Because every partial solution is only obtained
by extending a solution of size one less, and ex-
tensions are only made in a predetermined order
of cipher alphabet letters, every partial solution is
only considered / extended once.
GVit is highly parallelizable. The nP xnP cells
of every column i do not depend on each other —
only on the cells of the previous two columns i−1
and i−2, as well as the language model. In our im-
plementation of the algorithm, we have written the
underlying program in C/C++, and we have used
the CUDA library developed for NVIDIA graphics
cards to in order to implement the parallel sections
of the code.
</bodyText>
<sectionHeader confidence="0.999129" genericHeader="method">
4 Experiment
</sectionHeader>
<bodyText confidence="0.999669756756757">
The above algorithm is designed for application to
the transliteration of electronic documents, specif-
ically, the transliteration of websites, and it has
been tested with this in mind. In order to gain re-
alistic test data, we have operated on the assump-
tion that Wikipedia is a good approximation of the
type of language that will be found in most inter-
net articles. We sampled a sequence of English-
language articles from Wikipedia using their ran-
dom page selector, and these were used to create
a set of reference pages. In order to minimize the
common material used in each page, only the text
enclosed by the paragraph tags of the main body of
the pages were used. A rough search over internet
articles has shown that a length of 1000 to 11000
characters is a realistic length for many articles, al-
though this can vary according to the genre of the
page. Wikipedia, for example, does have entries
that are one sentence in length. We have run two
groups of tests for our algorithm. In the first set
of tests, we chose the mean of the above lengths
to be our sample size, and we created and decoded
10 ciphers of this size (i.e., different texts, same
size). We made these cipher texts by appending
the contents of randomly chosen Wikipedia pages
until they contained at least 6000 characters, and
then using the first 6000 characters of the result-
ing files as the plaintexts of the cipher. The text
length was rounded up to the nearest word where
needed. In the second set of tests, we used a single
long ciphertext, and measured the time required
for the algorithm to finish a number of prefixes of
it (i.e., same text, different sizes). The plaintext for
this set of tests was developed in the same way as
the first set, and the input ciphertext lengths con-
sidered were 1000, 3500, 6000, 8500, 11000, and
13500 characters.
</bodyText>
<page confidence="0.966588">
1043
</page>
<figure confidence="0.9979315">
Greenhouse Array
(a) (b) (e) (d)
</figure>
<figureCaption confidence="0.999799">
Figure 1: Filling the Greenhouse Table. Each cell in the greenhouse is indexed by a plaintext letter and
</figureCaption>
<bodyText confidence="0.7393575">
a character from the cipher. Each cell consists of a smaller array. The cells in the array give the best
probabilities of any path passing through the greenhouse cell, given that the index character of the array
maps to the character in column c, where c is the next ciphertext character to be fixed in the solution. The
probability is set to zero if no path can pass through the cell. This is the case, for example, in (b) and (c),
where the knowledge that ” ” maps to ” ” would tell us that the cells indicated in gray are unreachable.
The cell at (d) is filled using the trigram probabilities and the probability of the path at starting at (a).
</bodyText>
<figure confidence="0.985067875">
m
n
z
l
...
...
l w ··· y t g ··· g u
··· e f g ··· z
</figure>
<bodyText confidence="0.99956956">
In all of the data considered, the frequency of
spaces was far higher than that of any other char-
acter, and so in any real application the character
corresponding to the space can likely be guessed
without difficulty. The ciphers we have consid-
ered have therefore been simplified by allowing
the knowledge of which character corresponds to
the space. It appears that Ravi and Knight (2008)
did this as well. Our algorithm will still work with-
out this assumption, but would take longer. In the
event that a trigram or bigram would be found in
the plaintext that was not counted in the language
model, add one smoothing was used.
Our character-level language model used was
developed from the first 1.5 million characters of
the Wall Street Journal section of the Penn Tree-
bank corpus. The characters used in the lan-
guage model were the upper and lower case let-
ters, spaces, and full stops; other characters were
skipped when counting the frequencies. Further-
more, the number of sequential spaces allowed
was limited to one in order to maximize context
and to eliminate any long stretches of white space.
As discussed in the previous paragraph, the space
character is assumed to be known.
When testing our algorithm, we judged the time
complexity of our algorithm by measuring the ac-
tual time taken by the algorithm to complete its
runs, as well as the number of partial solutions
placed onto the queue (“enqueued”), the number
popped off the queue (“expanded”), and the num-
ber of zero-probability partial solutions not en-
queued (“zeros”) during these runs. These latter
numbers give us insight into the quality of trigram
probabilities as a heuristic for the A* search.
We judged the quality of the decoding by mea-
suring the percentage of characters in the cipher
alphabet that were correctly guessed, and also the
word error rate of the plaintext generated by our
solution. The second metric is useful because a
low probability character in the ciphertext may be
guessed wrong without changing as much of the
actual plaintext. Counting the actual number of
word errors is meant as an estimate of how useful
or readable the plaintext will be. We did not count
the accuracy or word error rate for unfinished ci-
phers.
We would have liked to compare our results
with those of Ravi and Knight (2008), but the
method presented there was simply not feasible
</bodyText>
<page confidence="0.989988">
1044
</page>
<bodyText confidence="0.9996435">
on texts and (case-sensitive) alphabets of this size
with the computing hardware at our disposal.
</bodyText>
<sectionHeader confidence="0.994424" genericHeader="evaluation">
5 Results
</sectionHeader>
<bodyText confidence="0.755961333333333">
Algorithm 2 Generalized Viterbi Algorithm
GVit(σ, c, r)
Input: partial solution σ, ciphertext character c,
and index r into C.
Output: greenhouse G.
Initialize G to 0.
</bodyText>
<equation confidence="0.5811835">
i = 1
for All (l, k) such that σ ∪ {k : c, l : CZ} is
consistent do
G(i,l, k) = P(l).
end for
i = 2
for All (l, k) such that σ ∪ {k : c, l : CZ} is
consistent do
for j such that σ ∪ {k : c, l : CZ, j : CZ_1} is
consistent do
G(i,l, k) = max(G(i,l, k), G(0, j, k) ×
P(l|j))
end for
end for
i = 3
for (l, k) such that σ ∪ {k : c, l : CZ} is consis-
tent do
for j1, j2 such that σ∪{k : c,j2 : C[i−2], j1 :
C[i − 1], l : CZ} is consistent do
G(i,l, k) = max(G(i,l, k), G(i−2, j2, k)
× P(j1|j2) × P(l|j2j1)).
end for
end for
for i = 4 to r do
for (l, k) such that σ ∪ {k : c, l : CZ} is con-
sistent do
for j1, j2 such that σ ∪ {k : c, j2 :
C[i−2], j1 : C[i−1], l : CZ} is consistent
do
G(i,l, k) = max(G(i,l, k),
G(i−2, j2,k)×P(j1|j2j2(back))
× P(l|j2j1)).
</equation>
<listItem confidence="0.532174333333333">
end for
end for
end for
</listItem>
<bodyText confidence="0.999973680851064">
In our first set of tests, we measured the time con-
sumption and accuracy of our algorithm over 10
ciphers taken from random texts that were 6000
characters long. The time values in these tables are
given in the format of (H)H:MM:SS. For this set
of tests, in the event that a test took more than 12
hours, we terminated it and listed it as unfinished.
This cutoff was set in advance of the runs based
upon our armchair speculation about how long one
might at most be reasonably expected to wait for
a web-page to be transliterated (an overnight run).
The results from this run appear in Table 1. All
running times reported in this section were ob-
tained on a computer running Ubuntu Linux 8.04
with 4 GB of RAM and 8 × 2.5 GHz CPU cores.
Column-level subcomputations in the greenhouse
were dispatched to an NVIDIA Quadro FX 1700
GPU card that is attached through a 16-lane PCI
Express adapter. The card has 512 MB of cache
memory, a 460 MHz core processor and 32 shader
processors operating in parallel at 920 MHz each.
In our second set of tests, we measured the time
consumption and accuracy of our algorithm over
several prefixes of different lengths of a single
13500-character ciphertext. The results of this run
are given in Table 2.
The first thing to note in this data is that the ac-
curacy of this algorithm is above 90 % for all of
the test data, and 100% on all but the smallest 2
ciphers. We can also observe that even when there
are errors (e.g., in the size 1000 cipher), the word
error rate is very small. This is a Zipf’s Law effect
— misclassified characters come from poorly at-
tested character trigrams, which are in turn found
only in longer, rarer words. The overall high ac-
curacy is probably due to the large size of the
texts relative to the uniticity distance of an En-
glish letter-substitution cipher (Bauer, 2007). The
results do show, however, that character trigram
probabilities are an effective indicator of the most
likely solution, even when the language model and
test data are from very different genres (here, the
Wall Street Journal and Wikipedia, respectively).
These results also show that our algorithm is ef-
fective as a way of decoding simple ciphers. 80%
of our runs finished before the 12 hour cutoff in
the first experiment.
</bodyText>
<page confidence="0.943236">
1045
</page>
<table confidence="0.997318363636364">
Cipher Time Enqueued Expanded Zeros Accuracy Word Error Rate
1 2:03:06 964 964 44157 100% 0%
2 0:13:00 132 132 5197 100% 0%
3 0:05:42 91 91 3080 100% 0%
4 Unfinished N/A N/A N/A N/A N/A
5 Unfinished N/A N/A N/A N/A N/A
6 5:33:50 2521 2521 114283 100% 0%
7 6:02:41 2626 2626 116392 100% 0%
8 3:19:17 1483 1483 66070 100% 0%
9 9:22:54 4814 4814 215086 100% 0%
10 1:23:21 950 950 42107 100% 0%
</table>
<tableCaption confidence="0.994925">
Table 1: Time consumption and accuracy on a sample of 10 6000-character texts.
</tableCaption>
<table confidence="0.999775714285714">
Size Time Enqueued Expanded Zeros Accuracy Word Error Rate
1000 40:06:05 119759 119755 5172631 92.59% 1.89%
3500 0:38:02 615 614 26865 96.30% 0.17%
6000 0:12:34 147 147 5709 100% 0%
8500 8:52:25 1302 1302 60978 100% 0%
11000 1:03:58 210 210 8868 100% 0%
13500 0:54:30 219 219 9277 100% 0%
</table>
<tableCaption confidence="0.999105">
Table 2: Time consumption and accuracy on prefixes of a single 13500-character ciphertext.
</tableCaption>
<bodyText confidence="0.99991866">
As far as the running time of the algorithm goes,
we see a substantial variance: from a few minutes
to several hours for most of the longer ciphers, and
that there are some that take longer than the thresh-
old we gave in the experiment. Specifically, there
is substantial variability in the the running times
seen.
Desiring to reduce the variance of the running
time, we look at the second set of tests for possible
causes. In the second test set, there is a general
decrease in both the running time and the number
of solutions expanded as the length of the ciphers
increases. Running time correlates very well with
A* queue size.
Asymptotically, the time required for each
sweep of the Viterbi algorithm increases, but this
is more than offset by the decrease in the number
of required sweeps.
The results, however, do not show that running
time monotonically decreases with length. In par-
ticular, the length 8500 cipher generates more so-
lutions than the length 3500 or 6000 ones. Recall
that the ciphers in this section are all prefixes of
the same string. Because the algorithm fixes char-
acters starting from the end of the cipher, these
prefixes have very different character orderings,
Ci, ... , CnC, and thus a very different order of par-
tial solutions. The running time of our algorithm
depends very crucially on these initial conditions.
Perhaps most interestingly, we note that the
number of enqueued partial solutions is in ev-
ery case identical or nearly identical to the num-
ber of partial solutions expanded. From a the-
oretical perspective, we must also remember the
zero-probability solutions, which should in a sense
count when judging the effectiveness of our A*
heuristic. Naturally, these are ignored by our im-
plementation because they are so badly scored
that they could never be considered. Neverthe-
less, what these numbers show is that scores based
on character-level trigrams, while theoretically ad-
missible, are really not all that clever when it
comes to navigating through the search space of
all possible letter substitution ciphers, apart from
their very keen ability at assigning zeros to a
large number of partial solutions. A more com-
plex heuristic that can additionally rank non-zero
probability solutions with more prescience would
likely make a very great difference to the running
time of this method.
</bodyText>
<page confidence="0.991021">
1046
</page>
<sectionHeader confidence="0.999788" genericHeader="conclusions">
6 Conclusions
</sectionHeader>
<bodyText confidence="0.999993930232558">
In the above paper, we have presented an algo-
rithm for solving letter-substitution ciphers, with
an eye towards discovering unknown encoding
standards in electronic documents on the fly. In
a test of our algorithm over ciphers drawn from
Wikipedia, we found its accuracy to be 100% on
the ciphers that it solved within a threshold of 12
hours, this being 80% of the total attempted. We
found that the running time of our algorithm is
highly variable depending on the order of char-
acters attempted, and, due to the linear-time the-
oretical complexity of this method, that running
times tend to decrease with larger ciphertexts due
to our character-level language model’s facility at
eliminating highly improbable solutions. There is,
however, a great deal of room for improvement in
the trigram model’s ability to rank partial solutions
that are not eliminated outright.
Perhaps the most valuable insight gleaned from
this study has been on the role of the language
model. This algorithm’s asymptotic runtime com-
plexity is actually a function of entropic aspects of
the character-level language model that it uses —
more uniform models provide less prominent sep-
arations between candidate partial solutions, and
this leads to badly ordered queues, in which ex-
tended partial solutions can never compete with
partial solutions that have smaller domains, lead-
ing to a blind search. We believe that there is a
great deal of promise in characterizing natural lan-
guage processing algorithms in this way, due to the
prevalence of Bayesian methods that use language
models as priors.
Our approach makes no explicit attempt to ac-
count for noisy ciphers, in which characters are
erroneously mapped, nor any attempt to account
for more general substitution ciphers in which a
single plaintext (resp. ciphertext) letter can map to
multiple ciphertext (resp. plaintext) letters, nor for
ciphers in which ciphertext units corresponds to
larger units of plaintext such syllables or words.
Extensions in these directions are all very worth-
while to explore.
</bodyText>
<sectionHeader confidence="0.999641" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999790642857143">
Friedrich L. Bauer. 2007. Decrypted Secrets.
Springer-Verlag, Berlin Heidelberg.
George W. Hart. 1994. To Decode Short Cryptograms.
Communications of the ACM, 37(9): 102–108.
Kevin Knight. 1999. Decoding Complexity in Word-
Replacement Translation Models. Computational
Linguistics, 25(4):607–615.
Kevin Knight, Anish Nair, Nishit Rathod, Kenji Ya-
mada. Unsupervised Analysis for Decipherment
Problems. Proceedings of the COLING/ACL 2006,
2006, 499–506.
George Nagy, Sharad Seth, Kent Einspahr. 1987.
Decoding Substitution Ciphers by Means of Word
Matching with Application to OCR. IEEE Transac-
tions on Pattern Analysis and Machine Intelligence,
9(5):710–715.
Shmuel Peleg and Azriel Rosenfeld. 1979. Breaking
Substitution Ciphers Using a Relaxation Algorithm.
Communications of the ACM, 22(11):589–605.
Sujith Ravi, Kevin Knight. 2008. Attacking Decipher-
ment Problems Optimally with Low-Order N-gram
Models Proceedings of the ACL 2008, 812–819.
Antal van den Bosch, Sander Canisius. 2006. Im-
proved Morpho-phonological Sequence Processing
with Constraint Satisfaction Inference Proceedings
of the Eighth Meeting of the ACL Special Interest
Group on Computational Phonology at HLT-NAACL
2006, 41–49.
</reference>
<page confidence="0.992026">
1047
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.834067">
<title confidence="0.999873">An Exact A* Method for Deciphering Letter-Substitution Ciphers</title>
<author confidence="0.998715">Corlett Penn</author>
<affiliation confidence="0.9998265">Department of Computer Science University of Toronto</affiliation>
<abstract confidence="0.9915679">Letter-substitution ciphers encode a document from a known or hypothesized language into an unknown writing system or an unknown encoding of a known writing system. It is a problem that can occur in a number of practical applications, such as in the problem of determining the encodings of electronic documents in which the language is known, but the encoding standard is not. It has also been used in relation to OCR applications. In this paper, we introduce an exact method for deciphering messages using a generalization of the Viterbi algorithm. We test this model on a set of ciphers developed from various web sites, and find that our algorithm has the potential to be a viable, practical method for efficiently solving decipherment problems.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Friedrich L Bauer</author>
</authors>
<title>Decrypted Secrets.</title>
<date>2007</date>
<publisher>Springer-Verlag,</publisher>
<location>Berlin Heidelberg.</location>
<contexts>
<context position="3130" citStr="Bauer, 2007" startWordPosition="521" endWordPosition="522">n the language-modeloptimal solution, and does not require restarts or risk falling into local optima. We specifically consider the problem of finding decodings of electronic documents drawn from the internet, and we test our algorithm on ciphers drawn from randomly selected pages of Wikipedia. Our testing indicates that our algorithm will be effective in this domain. It may seem at first that automatically decoding (as opposed to deciphering) a document is a simple matter, but studies have shown that simple algorithms such as letter frequency counting do not always produce optimal solutions (Bauer, 2007). If the text from which a language model is trained is of a different genre than the plaintext of a cipher, the unigraph letter frequencies may differ substantially from those of the language model, and so frequency counting will be misleading. Because of the perceived simplicity of the problem, however, little work was performed to understand its computational properties until Peleg and Rosenfeld (1979), who developed a method that repeatedly swaps letters in a cipher to find a maximum probability solution. Since then, several different approaches to this problem have been suggested, some of</context>
<context position="24144" citStr="Bauer, 2007" startWordPosition="4375" endWordPosition="4376">ven in Table 2. The first thing to note in this data is that the accuracy of this algorithm is above 90 % for all of the test data, and 100% on all but the smallest 2 ciphers. We can also observe that even when there are errors (e.g., in the size 1000 cipher), the word error rate is very small. This is a Zipf’s Law effect — misclassified characters come from poorly attested character trigrams, which are in turn found only in longer, rarer words. The overall high accuracy is probably due to the large size of the texts relative to the uniticity distance of an English letter-substitution cipher (Bauer, 2007). The results do show, however, that character trigram probabilities are an effective indicator of the most likely solution, even when the language model and test data are from very different genres (here, the Wall Street Journal and Wikipedia, respectively). These results also show that our algorithm is effective as a way of decoding simple ciphers. 80% of our runs finished before the 12 hour cutoff in the first experiment. 1045 Cipher Time Enqueued Expanded Zeros Accuracy Word Error Rate 1 2:03:06 964 964 44157 100% 0% 2 0:13:00 132 132 5197 100% 0% 3 0:05:42 91 91 3080 100% 0% 4 Unfinished </context>
</contexts>
<marker>Bauer, 2007</marker>
<rawString>Friedrich L. Bauer. 2007. Decrypted Secrets. Springer-Verlag, Berlin Heidelberg.</rawString>
</citation>
<citation valid="true">
<authors>
<author>George W Hart</author>
</authors>
<title>To Decode Short Cryptograms.</title>
<date>1994</date>
<journal>Communications of the ACM,</journal>
<volume>37</volume>
<issue>9</issue>
<pages>102--108</pages>
<contexts>
<context position="3805" citStr="Hart, 1994" startWordPosition="633" endWordPosition="634">ferent genre than the plaintext of a cipher, the unigraph letter frequencies may differ substantially from those of the language model, and so frequency counting will be misleading. Because of the perceived simplicity of the problem, however, little work was performed to understand its computational properties until Peleg and Rosenfeld (1979), who developed a method that repeatedly swaps letters in a cipher to find a maximum probability solution. Since then, several different approaches to this problem have been suggested, some of which use word counts in the language to arrive at a solution (Hart, 1994), and some of 1040 Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics, pages 1040–1047, Uppsala, Sweden, 11-16 July 2010. c�2010 Association for Computational Linguistics which treat the problem as an expectation maximization problem (Knight et al., 2006; Knight, 1999). These later algorithms are, however, highly dependent on their initial states, and require a number of restarts in order to find the globally optimal solution. A further contribution was made by (Ravi and Knight, 2008), which, though published earlier, was inspired in part by the method pres</context>
</contexts>
<marker>Hart, 1994</marker>
<rawString>George W. Hart. 1994. To Decode Short Cryptograms. Communications of the ACM, 37(9): 102–108.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kevin Knight</author>
</authors>
<title>Decoding Complexity in WordReplacement Translation Models.</title>
<date>1999</date>
<journal>Computational Linguistics,</journal>
<volume>25</volume>
<issue>4</issue>
<contexts>
<context position="4111" citStr="Knight, 1999" startWordPosition="677" endWordPosition="678">perties until Peleg and Rosenfeld (1979), who developed a method that repeatedly swaps letters in a cipher to find a maximum probability solution. Since then, several different approaches to this problem have been suggested, some of which use word counts in the language to arrive at a solution (Hart, 1994), and some of 1040 Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics, pages 1040–1047, Uppsala, Sweden, 11-16 July 2010. c�2010 Association for Computational Linguistics which treat the problem as an expectation maximization problem (Knight et al., 2006; Knight, 1999). These later algorithms are, however, highly dependent on their initial states, and require a number of restarts in order to find the globally optimal solution. A further contribution was made by (Ravi and Knight, 2008), which, though published earlier, was inspired in part by the method presented here, first discovered in 2007. Unlike the present method, however, Ravi and Knight (2008) treat the decipherment of letter-substitution ciphers as an integer programming problem. Clever though this constraint-based encoding is, their paper does not quantify the massive running times required to dec</context>
</contexts>
<marker>Knight, 1999</marker>
<rawString>Kevin Knight. 1999. Decoding Complexity in WordReplacement Translation Models. Computational Linguistics, 25(4):607–615.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kevin Knight</author>
</authors>
<title>Anish Nair, Nishit Rathod, Kenji Yamada. Unsupervised Analysis for Decipherment Problems.</title>
<date>2006</date>
<booktitle>Proceedings of the COLING/ACL</booktitle>
<pages>499--506</pages>
<marker>Knight, 2006</marker>
<rawString>Kevin Knight, Anish Nair, Nishit Rathod, Kenji Yamada. Unsupervised Analysis for Decipherment Problems. Proceedings of the COLING/ACL 2006, 2006, 499–506.</rawString>
</citation>
<citation valid="true">
<authors>
<author>George Nagy</author>
<author>Sharad Seth</author>
<author>Kent Einspahr</author>
</authors>
<title>Decoding Substitution Ciphers by Means of Word Matching with Application to OCR.</title>
<date>1987</date>
<journal>IEEE Transactions on Pattern Analysis and Machine Intelligence,</journal>
<volume>9</volume>
<issue>5</issue>
<contexts>
<context position="6639" citStr="Nagy et al., 1987" startWordPosition="1083" endWordPosition="1086">present method, the role of the language model can be acutely perceived; both the time complexity of the algorithm and the accuracy of the results depend crucially on this characteristic of the language model. In fact, we must use add-one smoothing to decipher texts of even modest lengths because even one unseen plain-text letter sequence is enough to knock out the correct solution. It is likely that the method of (Ravi and Knight, 2008) is sensitive to this as well, but their experiments were apparently fixed on a single, well-trained model. Applications of decipherment are also explored by (Nagy et al., 1987), who uses it in the context of optical character recognition (OCR). The problem we consider here is cosmetically related to the “L2P” (letter-to-phoneme) mapping problem of text-to-speech synthesis, which also features a prominent constraint-based approach (van den Bosch and Canisius, 2006), but the constraints in L2P are very different: two different instances of the same written letter may legitimately map to two different phonemes. This is not the case in letter-substitution maps. 2 Terminology Substitution ciphers are ciphers that are defined by some permutation of a plaintext alphabet. E</context>
</contexts>
<marker>Nagy, Seth, Einspahr, 1987</marker>
<rawString>George Nagy, Sharad Seth, Kent Einspahr. 1987. Decoding Substitution Ciphers by Means of Word Matching with Application to OCR. IEEE Transactions on Pattern Analysis and Machine Intelligence, 9(5):710–715.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Shmuel Peleg</author>
<author>Azriel Rosenfeld</author>
</authors>
<title>Breaking Substitution Ciphers Using a Relaxation Algorithm.</title>
<date>1979</date>
<journal>Communications of the ACM,</journal>
<volume>22</volume>
<issue>11</issue>
<contexts>
<context position="3538" citStr="Peleg and Rosenfeld (1979)" startWordPosition="585" endWordPosition="589">at automatically decoding (as opposed to deciphering) a document is a simple matter, but studies have shown that simple algorithms such as letter frequency counting do not always produce optimal solutions (Bauer, 2007). If the text from which a language model is trained is of a different genre than the plaintext of a cipher, the unigraph letter frequencies may differ substantially from those of the language model, and so frequency counting will be misleading. Because of the perceived simplicity of the problem, however, little work was performed to understand its computational properties until Peleg and Rosenfeld (1979), who developed a method that repeatedly swaps letters in a cipher to find a maximum probability solution. Since then, several different approaches to this problem have been suggested, some of which use word counts in the language to arrive at a solution (Hart, 1994), and some of 1040 Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics, pages 1040–1047, Uppsala, Sweden, 11-16 July 2010. c�2010 Association for Computational Linguistics which treat the problem as an expectation maximization problem (Knight et al., 2006; Knight, 1999). These later algorithms ar</context>
</contexts>
<marker>Peleg, Rosenfeld, 1979</marker>
<rawString>Shmuel Peleg and Azriel Rosenfeld. 1979. Breaking Substitution Ciphers Using a Relaxation Algorithm. Communications of the ACM, 22(11):589–605.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sujith Ravi</author>
<author>Kevin Knight</author>
</authors>
<title>Attacking Decipherment Problems Optimally with Low-Order N-gram Models</title>
<date>2008</date>
<booktitle>Proceedings of the ACL</booktitle>
<pages>812--819</pages>
<contexts>
<context position="4331" citStr="Ravi and Knight, 2008" startWordPosition="711" endWordPosition="714">en suggested, some of which use word counts in the language to arrive at a solution (Hart, 1994), and some of 1040 Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics, pages 1040–1047, Uppsala, Sweden, 11-16 July 2010. c�2010 Association for Computational Linguistics which treat the problem as an expectation maximization problem (Knight et al., 2006; Knight, 1999). These later algorithms are, however, highly dependent on their initial states, and require a number of restarts in order to find the globally optimal solution. A further contribution was made by (Ravi and Knight, 2008), which, though published earlier, was inspired in part by the method presented here, first discovered in 2007. Unlike the present method, however, Ravi and Knight (2008) treat the decipherment of letter-substitution ciphers as an integer programming problem. Clever though this constraint-based encoding is, their paper does not quantify the massive running times required to decode even very short documents with this sort of approach. Such inefficiency indicates that integer programming may simply be the wrong tool for the job, possibly because language model probabilities computed from empiric</context>
<context position="6462" citStr="Ravi and Knight, 2008" startWordPosition="1055" endWordPosition="1058">er models equivocate regardless of the length of the cipher, and sharp character models with many zeroes can quickly converge even on short ciphers of only a few characters. In the present method, the role of the language model can be acutely perceived; both the time complexity of the algorithm and the accuracy of the results depend crucially on this characteristic of the language model. In fact, we must use add-one smoothing to decipher texts of even modest lengths because even one unseen plain-text letter sequence is enough to knock out the correct solution. It is likely that the method of (Ravi and Knight, 2008) is sensitive to this as well, but their experiments were apparently fixed on a single, well-trained model. Applications of decipherment are also explored by (Nagy et al., 1987), who uses it in the context of optical character recognition (OCR). The problem we consider here is cosmetically related to the “L2P” (letter-to-phoneme) mapping problem of text-to-speech synthesis, which also features a prominent constraint-based approach (van den Bosch and Canisius, 2006), but the constraints in L2P are very different: two different instances of the same written letter may legitimately map to two dif</context>
<context position="19293" citStr="Ravi and Knight (2008)" startWordPosition="3460" endWordPosition="3463"> ” ” would tell us that the cells indicated in gray are unreachable. The cell at (d) is filled using the trigram probabilities and the probability of the path at starting at (a). m n z l ... ... l w ··· y t g ··· g u ··· e f g ··· z In all of the data considered, the frequency of spaces was far higher than that of any other character, and so in any real application the character corresponding to the space can likely be guessed without difficulty. The ciphers we have considered have therefore been simplified by allowing the knowledge of which character corresponds to the space. It appears that Ravi and Knight (2008) did this as well. Our algorithm will still work without this assumption, but would take longer. In the event that a trigram or bigram would be found in the plaintext that was not counted in the language model, add one smoothing was used. Our character-level language model used was developed from the first 1.5 million characters of the Wall Street Journal section of the Penn Treebank corpus. The characters used in the language model were the upper and lower case letters, spaces, and full stops; other characters were skipped when counting the frequencies. Furthermore, the number of sequential s</context>
<context position="21198" citStr="Ravi and Knight (2008)" startWordPosition="3787" endWordPosition="3790">judged the quality of the decoding by measuring the percentage of characters in the cipher alphabet that were correctly guessed, and also the word error rate of the plaintext generated by our solution. The second metric is useful because a low probability character in the ciphertext may be guessed wrong without changing as much of the actual plaintext. Counting the actual number of word errors is meant as an estimate of how useful or readable the plaintext will be. We did not count the accuracy or word error rate for unfinished ciphers. We would have liked to compare our results with those of Ravi and Knight (2008), but the method presented there was simply not feasible 1044 on texts and (case-sensitive) alphabets of this size with the computing hardware at our disposal. 5 Results Algorithm 2 Generalized Viterbi Algorithm GVit(σ, c, r) Input: partial solution σ, ciphertext character c, and index r into C. Output: greenhouse G. Initialize G to 0. i = 1 for All (l, k) such that σ ∪ {k : c, l : CZ} is consistent do G(i,l, k) = P(l). end for i = 2 for All (l, k) such that σ ∪ {k : c, l : CZ} is consistent do for j such that σ ∪ {k : c, l : CZ, j : CZ_1} is consistent do G(i,l, k) = max(G(i,l, k), G(0, j, k)</context>
</contexts>
<marker>Ravi, Knight, 2008</marker>
<rawString>Sujith Ravi, Kevin Knight. 2008. Attacking Decipherment Problems Optimally with Low-Order N-gram Models Proceedings of the ACL 2008, 812–819.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Antal van den Bosch</author>
<author>Sander Canisius</author>
</authors>
<title>Improved Morpho-phonological Sequence Processing with Constraint Satisfaction Inference</title>
<date>2006</date>
<booktitle>Proceedings of the Eighth Meeting of the ACL Special Interest Group on Computational Phonology at HLT-NAACL</booktitle>
<pages>41--49</pages>
<marker>van den Bosch, Canisius, 2006</marker>
<rawString>Antal van den Bosch, Sander Canisius. 2006. Improved Morpho-phonological Sequence Processing with Constraint Satisfaction Inference Proceedings of the Eighth Meeting of the ACL Special Interest Group on Computational Phonology at HLT-NAACL 2006, 41–49.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>