<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000003">
<sectionHeader confidence="0.649204" genericHeader="abstract">
CATEGORIAL AND NON-CATEGORIAL LANGUAGES
</sectionHeader>
<author confidence="0.7706375">
Joyce Friedman
Ramarathnam Venkatesan
</author>
<affiliation confidence="0.9931">
Computer Science Department
Boston University
</affiliation>
<address confidence="0.6579285">
111 Cummington Street
Boston, Massachusetts 02215 USA
</address>
<email confidence="0.746155">
ABSTRACT
</email>
<bodyText confidence="0.999611307692308">
We study the formal and linguistic proper-
ties of a class of parenthesis-free categorial
grammars derived from those of Ades and Steed-
man by varying the set of reduction rules. We
characterize the reduction rules capable of gen-
erating context-sensitive languages as those having
a partial combination rule and a combination rule
in the reverse direction. We show that any
categorial language is a permutation of some
context-free language. thus inheriting properties
dependent on symbol counting only. We compare
some of their properties with other contem-
porary formalisms.
</bodyText>
<sectionHeader confidence="0.981089" genericHeader="introduction">
INTRODUCTION
</sectionHeader>
<bodyText confidence="0.997758575757576">
Categorial grammars have recently been the topic
of renewed interest, stemming in part from their use as
the underlying formalism in Montague grammar. While
the original categorial grammars were early shown to be
equivalent to context-free grammars, 1,2,3 modifications
to the formalism have led to systems both more and less
powerful than context-free grammars.
Motivated by linguistic considerations, Ades and
Steedman4 introduced categorial grammars with some
additional cancellation rules. Full cancellation rules
correspond to application of functions to arguments.
Their partial cancellation rules correspond to functional
composition. The new backward combination rule is
motivated by the need to treat preposed elements. They
also modified the formalism by making category symbols
parenthesis-free, treating them in general as governed
by a convention of association to the left, but violat-
ing this convention in certain of the rules.
This treatment of categorial grammar suggests a
family of categorial systems, differing in the set of can-
cellation rules that are allowed. Earlier, we began a
study of the mathematical properties of that family of
systems,5 showing that some members are fully
equivalent to context-free grammars, while others yield
only a subset of the context-free languages, or a super-
set of them.
In this paper we continue with these investigations.
We characterize the rule systems that can obtain
context sensitive languages, and compare the sets of
categorial languages with the context-free languages.
Finally, we discuss the linguistic relevance of these
results, and ( ompare categorial grammars with TAG
systems in this regard.
</bodyText>
<sectionHeader confidence="0.362373" genericHeader="background">
PRELIMINARIES
</sectionHeader>
<bodyText confidence="0.998395045454546">
A categorial grammar under a set R of reduction
rules is a quadruple CGR (VT, VA, S,F ), whose ele-
ments are defined as follows: VT is a finite set of mor-
phemes. VA is a finite set of atomic category symbols.
S E VA is a distinguished element of VA. To define F,
we must first define CA, the set of category symbols.
CA is given by: i) if A EVA ,then A E CA; ii) if X ECA
and A E VA, then X IA E CA; and iii) nothing else is in
CA . F is the lexicon, a function from VT to 2&amp;quot; such
that for every a E VT, F (a ) is finite. We often write
CGR to denote a categorial grammar with rule set R,
when the elements of the quadruple are known.
Notation: Morphemes are denoted by a, b; mor-
pheme strings by u, v, w. The symbols S,A,B,C
denote atomic category symbols, and U.V, X,Y
denote arbitrary (complex) category symbols. Complex
category symbols whose left-most symbol is S (symbols
&amp;quot;headed&amp;quot; by S) are denoted by X5, Y5. Strings of
category symbols are denoted by z, y.
The language of a categorial grammar is determined
in part by the set R of reduction rules. This set can
include any subset of the following five rules. In each
</bodyText>
<listItem confidence="0.984839583333333">
statement, A E VA, and
U/A,A/U,A/V,VIA E CA.
(1) (F Rule) The string of category symbols U /A A
can be replaced by U. We write: U /A A-&amp;quot;U;
(2) (FP Rule) The string U /A A IV can be
replaced by U /V. We write: U/A A/V-0111V;
(3) (B Rule) The string A U /A can be replaced
by U. We write: A U /A U ;
(4) (Bs Rule) Same as B rule, except that U is
headed by S.
(5) (BP Rule) The string A IU V /A can be
replaced by V /U. We write: A /U V /A-+V IU.
</listItem>
<bodyText confidence="0.894939923076923">
If X Y ---*Z by the F-rule , XY is called an F -redex.
Similarly, for the other four rules. Any one of them may
simply be called a redex.
The reduction relation determined by a subset of
these rules is denoted by =&gt; and defined by: if X Y --0 Z
by one of the rules of R, then for any a, 13 in CA* ,
aX Y 13 &gt; aZ 13. The reflexive and transitive closure of
the relation -&gt; is =&gt;*. A morpheme string
w =w 0,2 • • is accepted by CGR (VT, VA,S,F)
if there is a category string x = X 1X2 • X„ such that
X, EF (w, ) for each 1=1,2, • n, and x =&gt; * S. The
language L (CGR) accepted by CGR (VT, VA, S, F)
is the set of all morpheme strings that are accepted.
</bodyText>
<page confidence="0.973768">
75
</page>
<sectionHeader confidence="0.424322" genericHeader="method">
I. NON-CONTEXT-FREE CATEGORIAL
LANGUAGES
</sectionHeader>
<bodyText confidence="0.9012236">
In this section we present a characterization
theorem for the categorial systems that generate only
context-free languages.
First, we introduce a lexicon FEQ that we will show
has the property that for any choice R of metarules any
string in L (CGR) has equal numbers of a , b, and c.
We define the lexicon FEQ as FEQ (a) = IA I,
FEQ (b)= IB}, FEQ (C) = {C /A /C /B , CID},
FEQ (d)= ID 1, FEQ (e) = {S /A /C /B1.
We will also make use of two languages on the
</bodyText>
<equation confidence="0.7724525">
alphabet (ct , b, c, d, e) Li= {a&amp;quot; db c&amp;quot; I n 1 }, and
LEO = ftV I #a = #b = #c 1, #d = #e = 1I.
</equation>
<bodyText confidence="0.6735375">
A lemma shows that with any set R of rules the lex-
icon FEQ yields a subset of LEQ -
</bodyText>
<equation confidence="0.9511052">
Lemma 1 Let G be any categorial grammar,
CGR ( VT ,V A , S ,FEo), where V T = la ,b ,c ,d ,e ),
VA = IS ,A ,B ,C ,D), with R CIF ,FP ,B ,BP I. Then
L (G )CLE,2
Proof Let x = X iX 2...Xn •=--,&gt;*S . Let
</equation>
<bodyText confidence="0.982297">
w = w 1...wr, be a- corresponding morpheme string. To
differentiate between the occurrence of a symbol as a head
and otherwise, write C /A /C /B = CA-1C -1B-1.
S IA /C /B = SA &apos;C-1B-1 and CID = CD-1. For
any rule system R, a redex is two adjacent categories,
the tail of one matching the head of the other, and is
reduced to a single category after cancelling the matching
symbols. Since all occurrences of A must cancel to yield
a reduction to S, #A = #21-1. This holds for all
atomic categories except S, for which #S = #S1+1.
This lexicon has the property that any derivable
category symbol, either has exactly one S and is S -
headed or does not have an occurrence of S. Hence in x,
#S = 1, i.e., w has exactly one e. Let the number of
occurrences in x of C /A /C /B and C ID be p and
q respectively. It follows that #C = p +q, #C1 p +1.
Hence q = 1 and w has exactly one d. Each occurrence
of C/A /C /B introduces one A&apos; and B-1. Since w has
one e, #A-1 = #13-1 = p +1. Hence #A = #B = p +1.
Since for each A ,B and C in x there must be exactly
one a ,b and c, #a = #b = #c. 0
We show next that in the restricted case where R
contains only the two rules FP and Bs , the language L
is obtained.
</bodyText>
<equation confidence="0.698421">
Lemma 2 Let CGR be the categorial grammar with lexi-
con FEQ and rule set R (FP ,Bs}. Then
L (CGR) = L1.
Proof Any x EL has a unique parse of the form
(Bs FP)&amp;quot; Bs Bs&apos; , and hence LICL (CGR). Conversely,
</equation>
<bodyText confidence="0.943468909090909">
any x having a parse must have exactly one e. Further,
all b &apos;s and c &apos;s can appear only on the left and right of e
respectively. Any derivable category having an A has the
form S /(A 11 where U does not have any A. Thus
all As appear consecutively on the left of the e . For the
rightmost c, F (c)= C /D . Ad must be in between a &apos;s
and b &apos;s. By lemma 1, # (a) = # (b)= # (c). Thus
x = a c/b4 ec&apos; , for some n . Hence Li= L (CGR). 0
The next lemma shows that no language intermediate
to L and LEO can be context-free. It really does not
involve categorial grammar at all.
</bodyText>
<figure confidence="0.977484363636364">
Lemma 3 If L ic L CLEg, then L is not context-free.
Proof Suppose L is context-free. Since L contains
Li, it has arbitrarily long strings of the form
a&amp;quot; b db&amp;quot; e c&amp;quot;. Let k and K be pumping lemma con-
stants. Choose n &gt;max(K ,k). This string, if pumped,
yields a string not in LEO, hence we have a contradiction.
0
Corollary Let {FP ,Bs)gR. Then there is a non-
context-free language L (CGR).
Proof Use the lexicon FEQ. Then by lemma 1
L (CGR)CLEc . But {FP ,Bs}cR , so LiCL (CGR).
</figure>
<figureCaption confidence="0.921468166666666">
The following theorem summarizes the results by
characterizing the rule sets that can be used to generate
context sensitive languages.
Main Theorem A categorial system with rule set R can
generate a context-sensitive language if and only if R
contains a partial combination rule and a combination rule
in the reverse direction.
Proof The &amp;quot;if&amp;quot; part follows for {FP ,Bs iby lemmas
1, 2, and 3. It follows for {BP ,F) by symmetry. For the
&amp;quot;only if&amp;quot; part, first note that any unidirectional system
(system with rules that are all forward, or all backward)
can generate only context-free languages.5 The only
remaining cases are IF ,B) and {FP ,BP 1. The first gen-
erates only context free languages.5 The second generates
only the empty language, since no atomic symbol can be
derived using only these two rules.
II. CATEGORIAL LANGUAGES ARE PERMUTA-
TIONS OF CONTEXT-FREE LANGUAGES
</figureCaption>
<bodyText confidence="0.990367176470588">
Let VT = (a 1,a2 • - &apos; ,a I. A Parikh mappine It is
a mapping from morpheme strings to vectors such that
&apos;4r(w) = (#a 1,4&amp;quot; 2, • • • , #ak). u is a permutation of v
iff If(u) &apos;(v).i Let ‘11(L)= (&apos;11(w) I w EL). A
language L is a permutation of L if ) = llf(L ). We
define a rotation as follows. In the parse tree for u EL, at
any node corresponding to a B redex or BP -redex
exchange its left and right subtrees, obtaining an F-redex
or an FP -redex. Let v the resulting terminal string. We
say that u has been transformed into v by rotation.
We now obtain results that are helpful in showing
that certain languages cannot be generated by, categorial
grammars. First we show that, every categorial language
is a permutation of a context free language. This will
enable us to show that properties of context-free
languages that depend only on the symbol counts must
also hold of categorial languages.
</bodyText>
<construct confidence="0.650065909090909">
Theorem Let R (F, FP, B, BPI. Then there exists a
LCE such that Alr(L (CGR )) 111(LcE ), where GCE is
context free.
Proof Let x EL (CGR). In its parse tree at each
node corresponding to a B-redex or a BP-redex perform
a rotation, so that it becomes a F-redex or a FP -redex.
Since the transformed string y is obtained by rearranging
the parse tree, &apos;11(x) = 11(y). Also y derivable using
R = {FP ,F) only. Hence the set of such y obtained as a
permutation of some x is the same as L (CGR,), which is
context free,5 i.e., L (CGR) LCE . 0
</construct>
<page confidence="0.981798">
76
</page>
<bodyText confidence="0.99941">
Corollary For any R g IF, FP, B, BP), L (CGR) is
semilinear , Parikh bounded and has the linear growth
property.
Semilinearity follows from Parikh&apos;s Lemma and
linear growth from the pumping lemma for context-free
languages. Parikh boundedness follows from the fact that
any context-free language is Parikh bounded.6 0
Proposition Any one-symbol categorial grammar is reg-
ular.
Note that if L is a semilinear subset of nonnegative
integers, Ian In EL is regular.
</bodyText>
<sectionHeader confidence="0.913491" genericHeader="conclusions">
III. NON-CATEGORIAL LANGUAGES
</sectionHeader>
<bodyText confidence="0.975763578947369">
We now exhibit some non-categorial languages and
compare categorial languages with others. From the corol-
lary of the previous section we have the following results.
Theorem Categorial languages are properly contained in
the context-sensitive languages.
Proof The languages {a h (&amp;quot;) I n ), where
h (n )=n2 or h (n )=2n which do not have linear growth
rate, are not generated by any CGR. These are context
sensitive. Also lam bn I either m &gt; n , or m is prime and
n ‘,rn and m is prime } is not semilinear 7 and
hence not categorial.
It is interesting to note that lexical functional gram-
mar can generate the first two languages mentioned
above8 and indexed languages can generate
(an bn2an
Linguistic Properties
We now look at some languages that exhibit cross-
serial dependencies.
Let G3 be the CGR with 11 = (FP ,Bs),
</bodyText>
<equation confidence="0.934302">
VT = (a ,b ,c ,d I, and with the lexicon
F (d)= {S /S 1), F (c) = {S 1), F (a) = (S 1/A IS 1, A),
F (b) = {S 1/B IS 1, RI. Then
L3= L (G3) = {wcdw I w ,b)*). The reasoning is
</equation>
<bodyText confidence="0.993064090909091">
similar to that of lemma 1. First #c = #d = 1, from
#S = 1. Since we have Bs rule, c occurs on the left of
d and all occurrences of a and b on the left of c get
assigned A and B respectively. Similarly all a and b
on the right of c, get assigned to the complex category as
defined by F. It follows that all symbols to the right of
d get combined by FP rule and those on the left by Bs
rule. Hence a symbol occurring n symbols to the right of
d must be matched by an occurrence n symbols to the
right of the left-most symbol.
For any k, let G 4(k) be
</bodyText>
<equation confidence="0.936355">
R = {FP ,B5) again, VT = (a, ,b,
(c, II. ‹i &lt;k) U {d ,e), and
F b = IS, /A, /Si I, F (a,)
F c,) = (S, /5%441,1 ,.&apos;‹..i &lt; k,
, )
F e) = IS /S il.
L (G 4(k )) = la inia 2n2 &apos; &apos; &apos; aknk debi&apos;
</equation>
<bodyText confidence="0.999563736842105">
for any k. Note that #A, = #A,
#b, = #a, . The rest of the argument
L3 above . Thus IFP, Bs ) has the
unbounded cross-serial dependencies.
Now we can compare with Tree Adjoining Grammars
(TAG).8 A TAG without local constraints cannot generate
L3. A TAG with local constraints can generate this, but it
cannot generate L6= (a &apos;n bn crn (in I rn ,n L4(2) can
be transformed into L6 by the homomorphism erasing
c 1,d and e. TAG languages are closed under homomor-
phisms and thus the categorial language L4(2) is not a
TAG language. TAG languages exhibit only limited cross
serial dependencies. Thus, though TAG Languages and
CG languages share some properties like linear growth,
semilinearity, generation of all context-free languages,
limited context sensitive power, and Parikh boundedness,
they are different in their generative capacities.
Acknowledgements We would like to thank
Weiguo Wang and Dawei Dai for helpful discussions.
</bodyText>
<sectionHeader confidence="0.998323" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.995409115384615">
1. Yehoshua Bar-Hillel, &amp;quot;On syntactical categories,&amp;quot;
Journal of Symbolic Logic, vol. 15 , pp. 1-16 , 1950.
Reprinted in Bar-Hillel (1964), pp. 19-37.
2. Haim Gaifman, Information and Control, vol. 8, pp.
304-337, 1965.
3. Yehoshua Bar-Hillel, Language and Information,
Addison-Wesley, Reading, Mass., 1964.
4. Anthony E. Ades and Mark J. Steedman, &amp;quot;On the
order of words,&amp;quot; Linguistics and Philosophy, vol. 4,
pp. 517-558, 1982.
5. Joyce Friedman, Dawei Dai, and Weiguo Wang,
&amp;quot;Weak Generative Capacity of Parenthesis-free
Categorial Grammars,&amp;quot; Technical Report #86-1,
Dept. of Computer Science, Boston University, 1986.
6. Meera Blattner and Michel Latteux, &amp;quot;Parikh-
Bounded Languages,&amp;quot; in Automata, Languages and
Programming, LNCS 115, ed. Shimon Even and
Oded Kariv, Springer-Verlag, 1981.
7. Harry R. Lewis and Christos H. Papadimitriou, Ele-
ments of the Theory of Computation, Prentice-
Hall, 1981.
8. Aravind K. Joshi, &amp;quot;Factoring recursion and depen-
dencies: an aspect of tree adjoining grammars and a
comparison of some formal properties of TAGs,
GPSGs, PLGs and LFGs,&amp;quot; 21st Ann. Meeting of the
Assn. for Comp. Linguistics, 1983.
</reference>
<figure confidence="0.983525142857143">
the CGR with
I1i &lt;k) U
the lexicon
= (A,),1i
F (d) = {Sk
Then
• ck-i bk nk
</figure>
<footnote confidence="0.620536666666667">
-1. This implies
parallels that for
power to express
</footnote>
<page confidence="0.991783">
77
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.898833">
<title confidence="0.996196">CATEGORIAL AND NON-CATEGORIAL LANGUAGES</title>
<author confidence="0.9856745">Joyce Friedman Ramarathnam Venkatesan</author>
<affiliation confidence="0.9999025">Computer Science Department Boston University</affiliation>
<address confidence="0.9959825">Street Boston, Massachusetts 02215 USA</address>
<abstract confidence="0.995447">We study the formal and linguistic properties of a class of parenthesis-free categorial grammars derived from those of Ades and Steedman by varying the set of reduction rules. We characterize the reduction rules capable of generating context-sensitive languages as those having a partial combination rule and a combination rule in the reverse direction. We show that any categorial language is a permutation of some context-free language. thus inheriting properties dependent on symbol counting only. We compare some of their properties with other contemporary formalisms.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Yehoshua Bar-Hillel</author>
</authors>
<title>On syntactical categories,&amp;quot;</title>
<date>1950</date>
<journal>Journal of Symbolic Logic,</journal>
<volume>15</volume>
<pages>1--16</pages>
<note>Reprinted in Bar-Hillel</note>
<contexts>
<context position="3624" citStr="(1)" startWordPosition="591" endWordPosition="591">r with rule set R, when the elements of the quadruple are known. Notation: Morphemes are denoted by a, b; morpheme strings by u, v, w. The symbols S,A,B,C denote atomic category symbols, and U.V, X,Y denote arbitrary (complex) category symbols. Complex category symbols whose left-most symbol is S (symbols &amp;quot;headed&amp;quot; by S) are denoted by X5, Y5. Strings of category symbols are denoted by z, y. The language of a categorial grammar is determined in part by the set R of reduction rules. This set can include any subset of the following five rules. In each statement, A E VA, and U/A,A/U,A/V,VIA E CA. (1) (F Rule) The string of category symbols U /A A can be replaced by U. We write: U /A A-&amp;quot;U; (2) (FP Rule) The string U /A A IV can be replaced by U /V. We write: U/A A/V-0111V; (3) (B Rule) The string A U /A can be replaced by U. We write: A U /A U ; (4) (Bs Rule) Same as B rule, except that U is headed by S. (5) (BP Rule) The string A IU V /A can be replaced by V /U. We write: A /U V /A-+V IU. If X Y ---*Z by the F-rule , XY is called an F -redex. Similarly, for the other four rules. Any one of them may simply be called a redex. The reduction relation determined by a subset of these rules is d</context>
</contexts>
<marker>1.</marker>
<rawString>Yehoshua Bar-Hillel, &amp;quot;On syntactical categories,&amp;quot; Journal of Symbolic Logic, vol. 15 , pp. 1-16 , 1950. Reprinted in Bar-Hillel (1964), pp. 19-37.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Haim Gaifman</author>
</authors>
<date>1965</date>
<journal>Information and Control,</journal>
<volume>8</volume>
<pages>304--337</pages>
<contexts>
<context position="3718" citStr="(2)" startWordPosition="612" endWordPosition="612">ed by a, b; morpheme strings by u, v, w. The symbols S,A,B,C denote atomic category symbols, and U.V, X,Y denote arbitrary (complex) category symbols. Complex category symbols whose left-most symbol is S (symbols &amp;quot;headed&amp;quot; by S) are denoted by X5, Y5. Strings of category symbols are denoted by z, y. The language of a categorial grammar is determined in part by the set R of reduction rules. This set can include any subset of the following five rules. In each statement, A E VA, and U/A,A/U,A/V,VIA E CA. (1) (F Rule) The string of category symbols U /A A can be replaced by U. We write: U /A A-&amp;quot;U; (2) (FP Rule) The string U /A A IV can be replaced by U /V. We write: U/A A/V-0111V; (3) (B Rule) The string A U /A can be replaced by U. We write: A U /A U ; (4) (Bs Rule) Same as B rule, except that U is headed by S. (5) (BP Rule) The string A IU V /A can be replaced by V /U. We write: A /U V /A-+V IU. If X Y ---*Z by the F-rule , XY is called an F -redex. Similarly, for the other four rules. Any one of them may simply be called a redex. The reduction relation determined by a subset of these rules is denoted by =&gt; and defined by: if X Y --0 Z by one of the rules of R, then for any a, 13 in CA* </context>
</contexts>
<marker>2.</marker>
<rawString>Haim Gaifman, Information and Control, vol. 8, pp. 304-337, 1965.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yehoshua Bar-Hillel</author>
</authors>
<title>Language and Information,</title>
<date>1964</date>
<publisher>Addison-Wesley,</publisher>
<location>Reading, Mass.,</location>
<contexts>
<context position="3803" citStr="(3)" startWordPosition="631" endWordPosition="631">ymbols, and U.V, X,Y denote arbitrary (complex) category symbols. Complex category symbols whose left-most symbol is S (symbols &amp;quot;headed&amp;quot; by S) are denoted by X5, Y5. Strings of category symbols are denoted by z, y. The language of a categorial grammar is determined in part by the set R of reduction rules. This set can include any subset of the following five rules. In each statement, A E VA, and U/A,A/U,A/V,VIA E CA. (1) (F Rule) The string of category symbols U /A A can be replaced by U. We write: U /A A-&amp;quot;U; (2) (FP Rule) The string U /A A IV can be replaced by U /V. We write: U/A A/V-0111V; (3) (B Rule) The string A U /A can be replaced by U. We write: A U /A U ; (4) (Bs Rule) Same as B rule, except that U is headed by S. (5) (BP Rule) The string A IU V /A can be replaced by V /U. We write: A /U V /A-+V IU. If X Y ---*Z by the F-rule , XY is called an F -redex. Similarly, for the other four rules. Any one of them may simply be called a redex. The reduction relation determined by a subset of these rules is denoted by =&gt; and defined by: if X Y --0 Z by one of the rules of R, then for any a, 13 in CA* , aX Y 13 &gt; aZ 13. The reflexive and transitive closure of the relation -&gt; is =&gt;*. A </context>
</contexts>
<marker>3.</marker>
<rawString>Yehoshua Bar-Hillel, Language and Information, Addison-Wesley, Reading, Mass., 1964.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Anthony E Ades</author>
<author>Mark J Steedman</author>
</authors>
<title>On the order of words,&amp;quot;</title>
<date>1982</date>
<journal>Linguistics and Philosophy,</journal>
<volume>4</volume>
<pages>517--558</pages>
<contexts>
<context position="3877" citStr="(4)" startWordPosition="651" endWordPosition="651">category symbols whose left-most symbol is S (symbols &amp;quot;headed&amp;quot; by S) are denoted by X5, Y5. Strings of category symbols are denoted by z, y. The language of a categorial grammar is determined in part by the set R of reduction rules. This set can include any subset of the following five rules. In each statement, A E VA, and U/A,A/U,A/V,VIA E CA. (1) (F Rule) The string of category symbols U /A A can be replaced by U. We write: U /A A-&amp;quot;U; (2) (FP Rule) The string U /A A IV can be replaced by U /V. We write: U/A A/V-0111V; (3) (B Rule) The string A U /A can be replaced by U. We write: A U /A U ; (4) (Bs Rule) Same as B rule, except that U is headed by S. (5) (BP Rule) The string A IU V /A can be replaced by V /U. We write: A /U V /A-+V IU. If X Y ---*Z by the F-rule , XY is called an F -redex. Similarly, for the other four rules. Any one of them may simply be called a redex. The reduction relation determined by a subset of these rules is denoted by =&gt; and defined by: if X Y --0 Z by one of the rules of R, then for any a, 13 in CA* , aX Y 13 &gt; aZ 13. The reflexive and transitive closure of the relation -&gt; is =&gt;*. A morpheme string w =w 0,2 • • is accepted by CGR (VT, VA,S,F) if there is a</context>
</contexts>
<marker>4.</marker>
<rawString>Anthony E. Ades and Mark J. Steedman, &amp;quot;On the order of words,&amp;quot; Linguistics and Philosophy, vol. 4, pp. 517-558, 1982.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Joyce Friedman</author>
<author>Dawei Dai</author>
<author>Weiguo Wang</author>
</authors>
<title>Weak Generative Capacity of Parenthesis-free Categorial Grammars,&amp;quot;</title>
<date>1986</date>
<tech>Technical Report #86-1,</tech>
<institution>Dept. of Computer Science, Boston University,</institution>
<contexts>
<context position="3937" citStr="(5)" startWordPosition="665" endWordPosition="665">d&amp;quot; by S) are denoted by X5, Y5. Strings of category symbols are denoted by z, y. The language of a categorial grammar is determined in part by the set R of reduction rules. This set can include any subset of the following five rules. In each statement, A E VA, and U/A,A/U,A/V,VIA E CA. (1) (F Rule) The string of category symbols U /A A can be replaced by U. We write: U /A A-&amp;quot;U; (2) (FP Rule) The string U /A A IV can be replaced by U /V. We write: U/A A/V-0111V; (3) (B Rule) The string A U /A can be replaced by U. We write: A U /A U ; (4) (Bs Rule) Same as B rule, except that U is headed by S. (5) (BP Rule) The string A IU V /A can be replaced by V /U. We write: A /U V /A-+V IU. If X Y ---*Z by the F-rule , XY is called an F -redex. Similarly, for the other four rules. Any one of them may simply be called a redex. The reduction relation determined by a subset of these rules is denoted by =&gt; and defined by: if X Y --0 Z by one of the rules of R, then for any a, 13 in CA* , aX Y 13 &gt; aZ 13. The reflexive and transitive closure of the relation -&gt; is =&gt;*. A morpheme string w =w 0,2 • • is accepted by CGR (VT, VA,S,F) if there is a category string x = X 1X2 • X„ such that X, EF (w, ) for ea</context>
</contexts>
<marker>5.</marker>
<rawString>Joyce Friedman, Dawei Dai, and Weiguo Wang, &amp;quot;Weak Generative Capacity of Parenthesis-free Categorial Grammars,&amp;quot; Technical Report #86-1, Dept. of Computer Science, Boston University, 1986.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Meera Blattner</author>
<author>Michel Latteux</author>
</authors>
<title>ParikhBounded Languages,&amp;quot;</title>
<date>1981</date>
<booktitle>in Automata, Languages and Programming, LNCS 115, ed. Shimon Even and Oded Kariv,</booktitle>
<publisher>Springer-Verlag,</publisher>
<marker>6.</marker>
<rawString>Meera Blattner and Michel Latteux, &amp;quot;ParikhBounded Languages,&amp;quot; in Automata, Languages and Programming, LNCS 115, ed. Shimon Even and Oded Kariv, Springer-Verlag, 1981.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Harry R Lewis</author>
<author>Christos H Papadimitriou</author>
</authors>
<title>Elements of the Theory of Computation,</title>
<date>1981</date>
<location>PrenticeHall,</location>
<marker>7.</marker>
<rawString>Harry R. Lewis and Christos H. Papadimitriou, Elements of the Theory of Computation, PrenticeHall, 1981.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Aravind K Joshi</author>
</authors>
<title>Factoring recursion and dependencies: an aspect of tree adjoining grammars and a comparison of some formal properties of TAGs, GPSGs, PLGs and LFGs,&amp;quot; 21st Ann. Meeting of the Assn. for Comp. Linguistics,</title>
<date>1983</date>
<marker>8.</marker>
<rawString>Aravind K. Joshi, &amp;quot;Factoring recursion and dependencies: an aspect of tree adjoining grammars and a comparison of some formal properties of TAGs, GPSGs, PLGs and LFGs,&amp;quot; 21st Ann. Meeting of the Assn. for Comp. Linguistics, 1983.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>