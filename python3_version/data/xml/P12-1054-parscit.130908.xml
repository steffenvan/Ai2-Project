<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000013">
<title confidence="0.898346">
Tweet Recommendation with Graph Co-Ranking
</title>
<note confidence="0.6160435">
Rui Yan††Department of Computer
Science and Technology,
Peking University,
Beijing 100871, China
</note>
<email confidence="0.86424">
r.yan@pku.edu.cn
</email>
<author confidence="0.845322">
Mirella Lapata*
</author>
<affiliation confidence="0.982168">
*Institute for Language,
Cognition and Computation,
University of Edinburgh,
</affiliation>
<address confidence="0.965364">
Edinburgh EH8 9AB, UK
</address>
<email confidence="0.995162">
mlap@inf.ed.ac.uk
</email>
<author confidence="0.894811">
Xiaoming Li†, 4
</author>
<affiliation confidence="0.910394">
bState Key Laboratory of Software
</affiliation>
<address confidence="0.443225666666667">
Development Environment,
Beihang University,
Beijing 100083, China
</address>
<email confidence="0.975942">
lxm@pku.edu.cn
</email>
<sectionHeader confidence="0.994629" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999868074074074">
As one of the most popular micro-blogging
services, Twitter attracts millions of users,
producing millions of tweets daily. Shared in-
formation through this service spreads faster
than would have been possible with tradi-
tional sources, however the proliferation of
user-generation content poses challenges to
browsing and finding valuable information. In
this paper we propose a graph-theoretic model
for tweet recommendation that presents users
with items they may have an interest in. Our
model ranks tweets and their authors simulta-
neously using several networks: the social net-
work connecting the users, the network con-
necting the tweets, and a third network that
ties the two together. Tweet and author entities
are ranked following a co-ranking algorithm
based on the intuition that that there is a mu-
tually reinforcing relationship between tweets
and their authors that could be reflected in the
rankings. We show that this framework can be
parametrized to take into account user prefer-
ences, the popularity of tweets and their au-
thors, and diversity. Experimental evaluation
on a large dataset shows that our model out-
performs competitive approaches by a large
margin.
</bodyText>
<sectionHeader confidence="0.998083" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999911727272727">
Online micro-blogging services have revolutionized
the way people discover, share, and distribute infor-
mation. Twitter is perhaps the most popular such
service with over 140 million active users as of
2012.1 Twitter enables users to send and read text-
based posts of up to 140 characters, known as tweets.
Twitter users follow others or are followed. Being a
follower on Twitter means that the user receives all
the tweets from those she follows. Common prac-
tice of responding to a tweet has evolved into a well-
defined markup culture (e.g., RT stands for retweet,
‘@’ followed by an identifier indicates the user).
The strict limit of 140 characters allows for quick
and immediate communication in real time, whilst
enforcing brevity. Moreover, the retweet mecha-
nism empowers users to spread information of their
choice beyond the reach of their original followers.
Twitter has become a prominent broadcast-
ing medium, taking priority over traditional news
sources (Teevan et al., 2011). Shared information
through this channel spreads faster than would have
been possible with conventional news sites or RSS
feeds and can reach a far wider population base.
However, the proliferation of user-generated con-
tent comes at a price. Over 340 millions of tweets
are being generated daily amounting to thousands
of tweets per second!2 Twitter’s own search en-
gine handles more than 1.6 billion search queries per
day.3 This enormous amount of data renders it in-
feasible to browse the entire Twitter network; even
if this was possible, it would be extremely difficult
for users to find information they are interested in.
A hypothetical tweet recommendation system could
</bodyText>
<footnote confidence="0.8689705">
1For details see http://blog.twitter.com/2012/03/
twitter-turns-six.html
2In fact, the peak record is 6,939 tweets per second, reported
by http://blog.twitter.com/2011/03/numbers.html.
3See http://engineering.twitter.com/2011/05/
engineering-behind-twitters-new-search.html
</footnote>
<note confidence="0.894574">
516
Proceedings of the 50th Annual Meeting of the Association for Computational Linguistics, pages 516–525,
Jeju, Republic of Korea, 8-14 July 2012. c�2012 Association for Computational Linguistics
</note>
<bodyText confidence="0.999966479166667">
alleviate this acute information overload, e.g., by
limiting the stream of tweets to those of interest to
the user, or by discovering intriguing content outside
the user’s following network.
The tweet recommendation task is challenging for
several reasons. Firstly, Twitter does not merely
consist of a set of tweets. Rather, it contains many
latent networks including the following relationships
among users and the retweeting linkage (which in-
dicates information diffusion). Secondly, the rec-
ommendations ought to be of interest to the user
and likely to to attract user response (e.g., to be
retweeted). Thirdly, recommendations should be
personalized (Cho and Schonfeld, 2007; Yan et al.,
2011), avoid redundancy, and demonstrate diversity.
In this paper we present a graph-theoretic approach
to tweet recommendation that attempts to address
these challenges.
Our recommender operates over a heterogeneous
network that connects the users (or authors) and the
tweets they produce. The user network represents
links among authors based on their following be-
havior, whereas the tweet network connects tweets
based on content similarity. A third bipartite graph
ties the two together. Tweet and author entities in
this network are ranked simultaneously following a
co-ranking algorithm (Zhou et al., 2007). The main
intuition behind co-ranking is that there is a mu-
tually reinforcing relationship between authors and
tweets that could be reflected in the rankings. Tweets
are important if they are related to other important
tweets and authored by important users who in turn
are related to other important users. The model ex-
ploits this mutually reinforcing relationship between
tweets and their authors and couples two random
walks, one on the tweet graph and one on the author
graph, into a combined one. Rather than creating a
global ranking over all tweets in a collection, we ex-
tend this framework to individual users and produce
personalized recommendations. Moreover, we in-
corporate diversity by allowing the random walk on
the tweet graph to be time-variant (Mei et al., 2010).
Experimental results on a real-world dataset con-
sisting of 364,287,744 tweets from 9,449,542 users
show that the co-ranking approach substantially im-
proves performance over the state of the art. We ob-
tain a relative improvement of 18.3% (in nDCG) and
7.8% (in MAP) over the best comparison system.
</bodyText>
<sectionHeader confidence="0.999786" genericHeader="related work">
2 Related Work
</sectionHeader>
<bodyText confidence="0.99994247826087">
Tweet Search Given the large amount of tweets
being posted daily, ranking strategies have be-
come extremely important for retrieving information
quickly. Many websites currently offer a real-time
search service which returns ranked lists of Twit-
ter posts or shared links according to user queries.
Ranking methods used by these sites employ three
criteria, namely recency, popularity and content rel-
evance (Dong et al., 2010). State-of-art tweet re-
trieval methods include a linear regression model bi-
ased towards text quality with a regularization factor
inspired by the hypothesis that documents similar
in content may have similar quality (Huang et al.,
2011). Duan et al. (2010) learn a ranking model us-
ing SVMs and features based on tweet content, the
relations among users, and tweet specific character-
istics (e.g., urls, number of retweets).
Tweet Recommendation Previous work has also
focused on tweet recommendation systems, assum-
ing no explicit query is provided by the users.
Collaborative filtering is perhaps the most obvious
method for recommending tweets (Hannon et al.,
2010). Chen et al. (2010) investigate how to se-
lect interesting URLs linked from Twitter and rec-
ommend the top ranked ones to users. Their rec-
ommender takes three dimensions into account: the
source, the content topic, and social voting. Sim-
ilarly, Abel et al. (2011a; 2011b; 2011c) recom-
mend external websites linked to Twitter. Their
method incorporates user profile modeling and tem-
poral recency, but they do not utilize the social
networks among users. R. et al. (2009) propose
a diffusion-based recommendation framework es-
pecially for tweets representing critical events by
constructing a diffusion graph. Hong et al. (2011)
recommend tweets based on popularity related fea-
tures. Ramage et al. (2010) investigate which topics
users are interested in following a Labeled-LDA ap-
proach, by deciding whether a user is in the followee
list of a given user or not. Uysal and Croft (2011) es-
timate the likelihood of a tweet being reposted from
a user-centric perspective.
Our work also develops a tweet recommendation
system. Our model exploits the information pro-
vided by the tweets and the underlying social net-
works in a unified co-ranking framework. Although
</bodyText>
<page confidence="0.709062">
517
</page>
<bodyText confidence="0.9996225">
these sources have been previously used to search
or recommend tweets, our model considers them
simultaneously and produces a ranking that is in-
formed by both. Furthermore, we argue that the
graph-theoretic framework upon which co-ranking
operates is beneficial as it allows to incorporate per-
sonalization (we provide user-specific rankings) and
diversity (the ranking is optimized so as to avoid re-
dundancy). The co-ranking framework has been ini-
tially developed for measuring scientific impact and
modeling the relationship between authors and their
publications (Zhou et al., 2007). However, the adap-
tation of this framework to the tweet recommenda-
tion task is novel to our knowledge.
</bodyText>
<sectionHeader confidence="0.983297" genericHeader="method">
3 Tweet Recommendation Framework
</sectionHeader>
<bodyText confidence="0.99997396875">
Our method operates over a heterogeneous network
that connects three graphs representing the tweets,
their authors and the relationships between them.
Let G denote the heterogeneous graph with nodes V
and edges E, and G = (V,E) = (VM UVU,EM UEU U
EMU). G is divided into three subgraphs, GM, GU
and GMU. GM = (VM,EM) is a weighted undirected
graph representing the tweets and their relationships.
Let VM = {mi|mi E VM} denote a collection of |VM|
tweets and EM the set of links representing relation-
ships between them. The latter are established by
measuring how semantically similar any two tweets
are (see Section 3.4 for details). GU = (VU,EU) is
an unweighted directed graph representing the so-
cial ties among Twitter users. VU = {ui|ui E VU} is
the set of users with size |VU|. Links EU among
users are established by observing their following
behavior. GMU = (VMU,EMU) is an unweighted bi-
partite graph that ties GM and GU together and repre-
sents tweet-author relationships. The graph consists
of nodes VMU = VM UVU and edges EMU connect-
ing each tweet with all of its authors. Typically, a
tweet m is written by only one author u. However,
because of retweeting we treat all users involved in
reposting a tweet as “co-authors”. The three subnet-
works are illustrated in Figure 1.
The framework includes three random walks, one
on GM, one on GU and one on GMU. A random walk
on a graph is a Markov chain, its states being the
vertices of the graph. It can be described by a square
n x n matrix M, where n is the number of vertices
in the graph. M is a stochastic matrix prescribing
</bodyText>
<figureCaption confidence="0.771104">
Figure 1: Tweet recommendation based on a co-ranking
</figureCaption>
<bodyText confidence="0.949149153846154">
framework including three sub-networks. The undirected
links between tweets indicate semantic correlation. The
directed links between users denotes following. A bipar-
tite graph (whose edges are shown with dashed lines) ties
the tweet and author networks together.
the transition probabilities from one vertex to the
next. The framework couples the two random walks
on GM, and GU that rank tweets and theirs authors in
isolation. and allows to obtain a more global rank-
ing by taking into account their mutual dependence.
In the following sections we first describe how we
obtain the rankings on GM and GU, and then move
on to discuss how the two are coupled.
</bodyText>
<subsectionHeader confidence="0.999715">
3.1 Ranking the Tweet Graph
</subsectionHeader>
<bodyText confidence="0.999491444444444">
Popularity We rank the tweet network follow-
ing the PageRank paradigm (Brin and Page, 1998).
Consider a random walk on GM and let M be the
transition matrix (defined in Section 3.4). Fix some
damping factor µ and say that at each time step with
probability (1-µ) we stick to random walking and
with probability µ we do not make a usual random
walk step, but instead jump to any vertex, chosen
uniformly at random:
</bodyText>
<equation confidence="0.9997505">
m = (1 −µ)MTm+ µ
|VM|11T (1)
</equation>
<bodyText confidence="0.9968595">
Here, vector m contains the ranking scores for the
vertices in GM. The fact that there exists a unique so-
</bodyText>
<page confidence="0.564587">
518
</page>
<bodyText confidence="0.999884947368421">
lution to (1) follows from the random walk M being
ergodic (µ &gt;0 guarantees irreducibility, because we
can jump to any vertex). MT is the transpose of M.
1 is the vector of |VM |entries, each being equal to
one. Let m∈ RVM, ||m||1 = 1 be the only solution.
Personalization The standard PageRank algo-
rithm performs a random walk, starting from any
node, then randomly selects a link from that node to
follow considering the weighted matrix M, or jumps
to a random node with equal probability. It pro-
duces a global ranking over all tweets in the col-
lection without taking specific users into account.
As there are billions of tweets available on Twit-
ter covering many diverse topics, it is reasonable
to assume that an average user will only be inter-
ested in a small subset (Qiu and Cho, 2006). We
operationalize a user’s topic preference as a vec-
tor t = [t1,t2,...,tn]1×n, where n denotes the num-
ber of topics, and ti represents the degree of prefer-
ence for topic i. The vector t is normalized such
that Eni=1 ti = 1. Intuitively, such vectors will be
different for different users. Note that user prefer-
ences can be also defined at the tweet (rather than
topic) level. Although tweets can illustrate user in-
terests more directly, in most cases a user will only
respond to a small fraction of tweets. This means
that most tweets will not provide any information
relating to a user’s interests. The topic preference
vector allows to propagate such information (based
on whether a tweet has been reposted or not) to other
tweets within the same topic cluster.
Given n topics, we obtain a topic distribution ma-
trix D using Latent Dirichlet Allocation (Blei et al.,
2003). Let Dij denote the probability of tweet mi to
belong to topic tj. Consider a user with a topic pref-
erence vector t and topic distribution matrix D. We
calculate the response probability r for all tweets for
this user as:
</bodyText>
<equation confidence="0.996818">
r = tDT (2)
</equation>
<bodyText confidence="0.9998582">
where r=[r1, r2, ..., rVM]1×|VM |represents the re-
sponse probability vector and ri the probability for a
user to respond to tweet mi. We normalize r so that
Eri∈r ri = 1. Now, given the observed response prob-
ability vector r = [r1,r2,...,rw]1×w, where w&lt;|VM|
for a given user and the topic distribution ma-
trix D, our task is estimate the topic preference
vector t. We do this using maximum-likelihood
estimation. Assuming a user has responded to w
tweets, we approximate t so as to maximize the ob-
served response probability. Let r(t) = tDT. As-
suming all responses are independent, the probabil-
ity for w tweets r1, r2, ... , rw is then �wi=1 ri(t) under
a given t. The value of t is chosen when the proba-
bility is maximized:
</bodyText>
<equation confidence="0.9999525">
t = argmax ( firi(t)
t (3)
</equation>
<bodyText confidence="0.9999778">
In a simple random walk, it is assumed that all
nodes in the matrix M are equi-probable before the
walk. In contrast, we use the topic preference vector
as a prior on M. Let Diag(r) denote a diagonal ma-
trix whose eigenvalue is vector r. Then m becomes:
</bodyText>
<equation confidence="0.996647">
m = (1− µ)[Diag(r)M]Tm +µr
= (1− µ)[Diag(tDT)M]Tm+µtDT (4)
</equation>
<bodyText confidence="0.999850142857143">
Diversity We would also like our output to be
diverse without redundant information. Unfortu-
nately, equation (4) will have the opposite effect,
as it assigns high scores to closely connected node
communities. A greedy algorithm such as Maxi-
mum Marginal Relevance (Carbonell and Goldstein,
1998; Wan et al., 2007; Wan et al., 2010) may
achieve diversity by iteratively selecting the most
prestigious or popular vertex and then penalizing the
vertices “covered” by those that have been already
selected. Rather than adopting a greedy vertex selec-
tion method, we follow DivRank (Mei et al., 2010)
a recently proposed algorithm that balances popular-
ity and diversity in ranking, based on a time-variant
random walk. In contrast to PageRank, DivRank as-
sumes that the transition probabilities change over
time. Moreover, it is assumed that the transition
probability from one state to another is reinforced by
the number of previous visits to that state. At each
step, the algorithm creates a dynamic transition ma-
trix M(.). After z iterations, the matrix becomes:
</bodyText>
<equation confidence="0.999207">
M(z) = (1−µ)M(z−1) · m(z−1) +µtDT (5)
</equation>
<bodyText confidence="0.75908">
and hence, m can be calculated as:
</bodyText>
<equation confidence="0.996503">
m(z) = (1−µ)[Diag(tDT)M(z)]Tm+µtDT (6)
</equation>
<bodyText confidence="0.985703">
Equation (5) increases the probability for nodes
with higher popularity. Nodes with high weights are
</bodyText>
<page confidence="0.662565">
519
</page>
<bodyText confidence="0.999823428571428">
likely to “absorb” the weights of their neighbors di-
rectly, and the weights of their neighbors’ neighbors
indirectly. The process iteratively adjusts the ma-
trix M according to m and then updates m according
to the changed M. Essentially, the algorithm favors
nodes with high popularity and as time goes by there
emerges a rich-gets-richer effect (Mei et al., 2010).
</bodyText>
<subsectionHeader confidence="0.999577">
3.2 Ranking the Author Graph
</subsectionHeader>
<bodyText confidence="0.973672916666667">
As mentioned earlier, we build a graph of au-
thors (and obtain the affinity U) using the follow-
ing linkage. We rank the author network using
PageRank analogously to equation (1). Besides
popularity, we also take personalization into ac-
count. Intuitively, users are likely to be interested
in their friends even if these are relatively unpopu-
lar. Therefore, for each author, we include a vec-
torp= [p1, p2,..., p|VU|]1x|VU |denoting their prefer-
ence for other authors. The preference factor for au-
thor u toward other authors ui is defined as:
#tweets from ui
</bodyText>
<equation confidence="0.9539915">
pu i = (7)
#tweets of u
</equation>
<bodyText confidence="0.999962428571428">
which represents the proportion of tweets inherited
from user ui. A large pui means that u is more likely
to respond to ui’s tweets.
In theory, we could also apply DivRank on the au-
thor graph. However, as the authors are unique, we
assume that they are sufficiently distinct and there is
no need to promote diversity.
</bodyText>
<subsectionHeader confidence="0.999368">
3.3 The Co-Ranking Algorithm
</subsectionHeader>
<bodyText confidence="0.993168942857143">
So far we have described how we rank the network
of tweets GM and their authors GU independently
following the PageRank paradigm. The co-ranking
framework includes a random walk on GM, GU,
and GMU. The latter is a bipartite graph representing
which tweets are authored by which users. The ran-
dom walks on GM and GU are intra-class random
walks, because take place either within the tweets’
or the users’ networks. The third (combined) ran-
dom walk on GMU is an inter-class random walk. It
is sufficient to describe it by a matrix MU|VM|x|VU|
and a matrix UM|VU|x|VM|, since GMU is bipartite.
One intra-class step changes the probability distribu-
tion from (m, 0) to (Mm, 0) or from (0, u) to (0, Uu),
while one inter-class step changes the probability
distribution from (m, u) to (UMT u, MUT m). The
design of M, U, MU and UM is detailed in Sec-
tion 3.4.
The two intra-class random walks are coupled
using the inter-class random walk on the bipartite
graph. The coupling is regulated by X, a parameter
quantifying the importance of GMU versus GM and
GU. In the extreme case, if X is set to 0, there is no
coupling. This amounts to separately ranking tweets
and authors by PageRank. In general, X represents
the extent to which the ranking of tweets and their
authors depend on each other.
There are two intuitions behind the co-ranking al-
gorithm: (1) a tweet is important if it associates to
other important tweets, and is authored by impor-
tant users and (2) a user is important if they asso-
ciate to other important users, and they write impor-
tant tweets. We formulate these intuitions using the
following iterative procedure:
Step 1 Compute tweet saliency scores:
</bodyText>
<equation confidence="0.9911118">
m(z+1) = (1− X)([Diag(r)M(z)]T)m(z) +XUMTu(z)
m(z+1) = m(z+1)/||m(z+1) ||(8)
Step 2 Compute author saliency scores:
u(z+1) = (1− X)([Diag(p)U]T)u(z) + XMUTm(z)
u(z+1) = u(z+1)/||u(z+1) ||(9)
</equation>
<bodyText confidence="0.99996">
Here, m(z) and u(z) are the ranking vectors for tweets
and authors for the z-th iteration. To guarantee con-
vergence, m and u are normalized after each itera-
tion. Note that the tweet transition matrix M is dy-
namic due to the computation of diversity while the
author transition matrix U is static. The algorithm
typically converges when the difference between the
scores computed at two successive iterations for any
tweet/author falls below a threshold E (set to 0.001
in this study).
</bodyText>
<subsectionHeader confidence="0.983428">
3.4 Affinity Matrices
</subsectionHeader>
<bodyText confidence="0.999984285714286">
The co-ranking framework is controlled by four
affinity matrices: M, U, MU and UM. In this section
we explain how these matrices are defined in more
detail.
The tweet graph is an undirected weighted graph,
where an edge between two tweets mi and mj repre-
sents their cosine similarity. An adjacency matrix M
</bodyText>
<page confidence="0.568321">
520
</page>
<bodyText confidence="0.996446">
describes the tweet graph where each entry corre-
sponds to the weight of a link in the graph:
</bodyText>
<equation confidence="0.9986245">
Mij = F (mi,mj) F (mi mi) = mi ·~mj (10)
EkF (mi,mk) Ilfn*iII||FRIj
</equation>
<bodyText confidence="0.9998873">
where F (.) is the cosine similarity and m~ is a term
vector corresponding to tweet m. We treat a tweet
as a short document and weight each term with tf.idf
(Salton and Buckley, 1988), where tf is the term fre-
quency and idf is the inverse document frequency.
The author graph is a directed graph based on the
following linkage. When ui follows uj, we add a link
from ui to uj. Let the indicator function I(ui,uj) de-
note whether ui follows uj. The adjacency matrix U
is then defined as:
</bodyText>
<equation confidence="0.959992333333333">
Uij = �
I(ui,uj) I u u _ 1if eij ∈ EU 11
Ek I (ui, uk), ( I, �) Oif eij ∈/ EU ( )
</equation>
<bodyText confidence="0.990087">
In the bipartite tweet-author graph GMU, the
entry EMU(i, j) is an indicator function denoting
whether tweet mi is authored by user uj:
</bodyText>
<equation confidence="0.97109675">
�
1 if eij ∈ EMU
A(mi,uj) = (12)
0 if eij ∈/ EMU
</equation>
<bodyText confidence="0.99973">
Through EMU we define MU and UM, using the
weight matrices MU= [ ¯Wij] and UM=[ ˆWji], con-
taining the conditional probabilities of transitioning
from mi to uj and vice versa:
</bodyText>
<equation confidence="0.993959">
A(mi,uj) (13)
Ek A(mk, uj )
</equation>
<sectionHeader confidence="0.998397" genericHeader="method">
4 Experimental Setup
</sectionHeader>
<bodyText confidence="0.999956816666667">
Data We crawled Twitter data from 23 seed users
(who were later invited to manually evaluate the
output of our system). In addition, we collected
the data of their followees and followers by travers-
ing the following edges, and exploring all newly
included users in the same way until no new
users were added. This procedure resulted in
a relatively large dataset consisting of 9,449,542
users, 364,287,744 tweets, 596,777,491 links, and
55,526,494 retweets. The crawler monitored the
data from 3/25/2011 to 5/30/2011. We used approx-
imately one month of this data for training and the
rest for testing.
Before building the graphs (i.e., the tweet graph,
the author graph, and the tweet-author graph), the
dataset was preprocessed as follows. We removed
tweets of low linguistic quality and subsequently
discarded users without any linkage to the remain-
ing tweets. We measured linguistic quality follow-
ing the evaluation framework put forward in Pitler
et al. (2010). For instance, we measured the out-of-
vocabulary word ratio (as a way of gauging spelling
errors), entity coherence, fluency, and so on. We fur-
ther removed stopwords and performed stemming.
Parameter Settings We ran LDA with 500 itera-
tions of Gibbs sampling. The number of topics n
was set to 100 which upon inspection seemed gen-
erally coherent and meaningful. We set the damp-
ing factor µ to 0.15 following the standard PageRank
paradigm. We opted for more or less generic param-
eter values as we did not want to tune our frame-
work to the specific dataset at hand. We examined
the parameter X which controls the balance of the
tweet-author graph in more detail. We experimented
with values ranging from 0 to 0.9, with a step size
of 0.1. Small X values place little emphasis on the
tweet graph, whereas larger values rely more heav-
ily on the author graph. Mid-range values take both
graphs into account. Overall, we observed better
performance with values larger than 0.4. This sug-
gests that both sources of information — the content
of the tweets and their authors — are important for
the recommendation task. All our experiments used
the same X value which was set to 0.6.
System Comparison We compared our approach
against three naive baselines and three state-of-the-
art systems recently proposed in the literature. All
comparison systems were subject to the same fil-
tering and preprocessing procedures as our own al-
gorithm. Our first baseline ranks tweets randomly
(Random). Our second baseline ranks tweets ac-
cording to token length: longer tweets are ranked
higher (Length). The third baseline ranks tweets
by the number of times they are reposted assum-
ing that more reposting is better (RTnum). We also
compared our method against Duan et al. (2010).
Their model (RSVM) ranks tweets based on tweet
content features and tweet authority features using
the RankSVM algorithm (Joachims, 1999). Our
fifth comparison system (DTC) was Uysal and Croft
</bodyText>
<figure confidence="0.400271">
¯Wij = A(mi,uj) ˆWji =
Ek A(mi,uk),
521
</figure>
<bodyText confidence="0.998593952380952">
(2011) who use a decision tree classifier to judge
how likely it is for a tweet to be reposted by a spe-
cific user. This scenario is similar to ours when rank-
ing tweets by retweet likelihood. Finally, we com-
pared against Huang et al. (2011) who use weighted
linear combination (WLC) to grade the relevance of
a tweet given a query. We implemented their model
without any query-related features as in our setting
we do not discriminate tweets depending on their
relevance to specific queries.
Evaluation We evaluated system output in two
ways, i.e., automatically and in a user study. Specif-
ically, we assume that if a tweet is retweeted it is rel-
evant and is thus ranked higher over tweets that have
not been reposted. We used our algorithm to predict
a ranking for the tweets in the test data which we
then compared against a goldstandard ranking based
on whether a tweet has been retweeted or not. We
measured ranking performance using the normalized
Discounted Cumulative Gain (nDCG; J¨arvelin and
Kek¨al¨ainen (2002)):
</bodyText>
<equation confidence="0.9988025">
k 2ru
1 1 i −1
nDCG(k,VU) = |VU |� � log(1 + i) (14)
u∈VU Zu i=1
</equation>
<bodyText confidence="0.9969448">
where VU denotes users, k indicates the top-k posi-
tions in a ranked list, and Zu is a normalization factor
obtained from a perfect ranking for a particular user.
rui is the relevance score (i.e., 1: retweeted, 0: not
retweeted) for the i-th tweet in the ranking list for
user u.
We also evaluated system output in terms of Mean
Average Precision (MAP), under the assumption
that retweeted tweets are relevant and the rest irrele-
vant:
</bodyText>
<note confidence="0.457824333333333">
MAP = k
1 1 �Pu × ru (15)
|VU |u∈VU Nu i=1
</note>
<bodyText confidence="0.9991231">
where Nu is the number of reposted tweets for user u,
and Pui is the precision at i-th position for user u
(Manning et al., 2008).
The automatic evaluation sketched above does not
assess the full potential of our recommendation sys-
tem. For instance, it is possible for the algorithm to
recommend tweets to users with no linkage to their
publishers. Such tweets may be of potential interest,
however our goldstandard data can only provide in-
formation for tweets and users with following links.
</bodyText>
<table confidence="0.99988925">
System nDCG@5 nDCG@10 nDCG@25 nDCG@50 MAP
Random 0.068 0.111 0.153 0.180 0.167
Length 0.275 0.288 0.298 0.335 0.258
RTNum 0.233 0.219 0.225 0.249 0.239
RSVM 0.392 0.400 0.421 0.444 0.558
DTC 0.441 0.468 0.492 0.473 0.603
WLC 0.404 0.421 0.437 0.464 0.592
CoRank 0.519 0.546 0.550 0.585 0.617
</table>
<tableCaption confidence="0.942717">
Table 1: Evaluation of tweet ranking output produced by
our system and comparison baselines against goldstan-
dard data.
</tableCaption>
<table confidence="0.999982375">
System nDCG@5 nDCG@10 nDCG@25 nDCG@50 MAP
Random 0.081 0.103 0.116 0.107 0.175
Length 0.291 0.307 0.246 0.291 0.264
RTNum 0.258 0.318 0.343 0.346 0.257
RSVM 0.346 0.443 0.384 0.414 0.447
DTC 0.545 0.565 0.579 0.526 0.554
WLC 0.399 0.447 0.460 0.481 0.506
CoRank 0.567 0.644 0.715 0.643 0.628
</table>
<tableCaption confidence="0.994288">
Table 2: Evaluation of tweet ranking output produced by
our system and comparison baselines against judgments
elicited by users.
</tableCaption>
<bodyText confidence="0.999981076923077">
We therefore asked the 23 users whose Twitter data
formed the basis of our corpus to judge the tweets
ranked by our algorithm and comparison systems.
The users were asked to read the systems’ recom-
mendations and decide for every tweet presented to
them whether they would retweet it or not, under the
assumption that retweeting takes place when users
find the tweet interesting.
In both automatic and human-based evaluations
we ranked all tweets in the test data. Then for each
date and user we selected the top 50 ones. Our
nDCG and MAP results are averages over users and
dates.
</bodyText>
<sectionHeader confidence="0.999583" genericHeader="evaluation">
5 Results
</sectionHeader>
<bodyText confidence="0.9998066">
Our results are summarized in Tables 1 and 2. Ta-
ble 1 reports results when model performance is
evaluated against the gold standard ranking obtained
from the Twitter network. In Table 2 model per-
formance is compared against rankings elicited by
users.
As can be seen, the Random method performs
worst. This is hardly surprising as it recommends
tweets without any notion of their importance or user
interest. Length performs considerably better than
</bodyText>
<page confidence="0.471665">
522
</page>
<table confidence="0.9999124">
System nDCG@5 nDCG@10 nDCG@25 nDCG@50 MAP
PageRank 0.493 0.481 0.509 0.536 0.604
PersRank 0.501 0.542 0.558 0.560 0.611
DivRank 0.487 0.505 0.518 0.523 0.585
CoRank 0.519 0.546 0.550 0.585 0.617
</table>
<tableCaption confidence="0.9788685">
Table 3: Evaluation of individual system components
against goldstandard data.
</tableCaption>
<table confidence="0.9999704">
System nDCG@5 nDCG@10 nDCG@25 nDCG@50 MAP
PageRank 0.557 0.549 0.623 0.559 0.588
PersRank 0.571 0.595 0.655 0.613 0.601
DivRank 0.538 0.591 0.594 0.547 0.589
CoRank 0.637 0.644 0.715 0.643 0.628
</table>
<tableCaption confidence="0.9937935">
Table 4: Evaluation of individual system components
against human judgments.
</tableCaption>
<bodyText confidence="0.999917979591837">
Random. This might be due to the fact that infor-
mativeness is related to tweet length. Using merely
the number of retweets does not seem to capture the
tweet importance as well as Length. This suggests
that highly retweeted posts are not necessarily in-
formative. For example, in our data, the most fre-
quently reposted tweet is a commercial advertise-
ment calling for reposting!
The supervised systems (RSVM, DTC, and
WLC) greatly improve performance over the naive
baselines. These methods employ standard machine
learning algorithms (such as SVMs, decision trees
and linear regression) on a large feature space. Aside
from the learning algorithm, their main difference
lies in the selection of the feature space, e.g., the way
content is represented and whether authority is taken
into account. DTC performs best on most evalua-
tion criteria. However, neither DTC nor RSVM, or
WLC take personalization into account. They gen-
erate the same recommendation lists for all users.
Our co-ranking algorithm models user interest with
respect to the content of the tweets and their pub-
lishers. Moreover, it attempts to create diverse out-
put and has an explicit mechanism for minimizing
redundancy. In all instances, using both DCG and
MAP, it outperforms the comparison systems. Inter-
estingly, the performance of CoRank is better when
measured against human judgments. This indicates
that users are interested in tweets that fall outside
the scope of their followers and that recommenda-
tion can improve user experience.
We further examined the contribution of the in-
dividual components of our system to the tweet
recommendation task. Tables 3 and 4 show how
the performance of our co-ranking algorithm varies
when considering only tweet popularity using the
standard PageRank algorithm, personalization (Per-
sRank), and diversity (DivRank). Note that DivRank
is only applied to the tweet graph. The PageR-
ank algorithm on its own makes good recommenda-
tions, while incorporating personalization improves
the performance substantially, which indicates that
individual users show preferences to specific topics
or other users. Diversity on its own does not seem
to make a difference, however it improves perfor-
mance when combined with personalization. Intu-
itively, users are more likely to repost tweets from
their followees, or tweets closely related to those
retweeted previously.
</bodyText>
<sectionHeader confidence="0.999001" genericHeader="conclusions">
6 Conclusions
</sectionHeader>
<bodyText confidence="0.999611357142857">
We presented a co-ranking framework for a tweet
recommendation system that takes popularity, per-
sonalization and diversity into account. Central to
our approach is the representation of tweets and
their users in a heterogeneous network and the abil-
ity to produce a global ranking that takes both in-
formation sources into account. Our model obtains
substantial performance gains over competitive ap-
proaches on a large real-world dataset (it improves
by 18.3% in DCG and 7.8% in MAP over the best
baseline). Our experiments suggest that improve-
ments are due to the synergy of the two information
sources (i.e., tweets and their authors). The adopted
graph-theoretic framework is advantageous in that
it allows to produce user-specific recommendations
and incorporate diversity in a unified model. Evalua-
tion with actual Twitter users shows that our recom-
mender can indeed identify interesting information
that lies outside the the user’s immediate following
network. In the future, we plan to extend the co-
ranking framework so as to incorporate information
credibility and temporal recency.
Acknowledgments This work was partially
funded by the Natural Science Foundation of China
under grant 60933004, and the Open Fund of the
State Key Laboratory of Software Development
Environment under grant SKLSDE-2010KF-03.
Rui Yan was supported by a MediaTek Fellowship.
</bodyText>
<page confidence="0.88216">
523
</page>
<sectionHeader confidence="0.99536" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999839134615384">
Fabian Abel, Qi Gao, Geert-Jan Houben, and Ke Tao.
2011a. Analyzing temporal dynamics in Twitter pro-
files for personalized recommendations in the social
web. In Proceedings of the ACM Web Science Confer-
ence 2011, pages 1–8, Koblenz, Germany.
Fabian Abel, Qi Gao, Geert-Jan Houben, and Ke Tao.
2011b. Analyzing user modeling on Twitter for per-
sonalized news recommendations. User Modeling,
Adaptation and Personalization, pages 1–12.
Fabian Abel, Qi Gao, Geert-Jan Houben, and Ke Tao.
2011c. Semantic enrichment of twitter posts for user
profile construction on the social web. The Semanic
Web: Research and Applications, pages 375–389.
David M. Blei, Andrew Y. Ng, and Michael I. Jordan.
2003. Latent Dirichlet aladdress. Journal of Machine
Learning Research, 3:993–1022.
Sergey Brin and Lawrence Page. 1998. The anatomy
of a large-scale hypertextual web search engine. Pro-
ceedings of the 7th International Conference on World
Wide Web, 30(1-7):107–117.
Jaime Carbonell and Jade Goldstein. 1998. The use of
MMR, diversity-based reranking for reordering doc-
uments and producing summaries. In Proceedings
of the 21st Annual International ACM SIGIR Confer-
ence on Research and Development in Information Re-
trieval, pages 335–336, Melbourne, Australia.
Jilin Chen, Rowan Nairn, Les Nelson, Michael Bernstein,
and Ed Chi. 2010. Short and tweet: experiments on
recommending content from information streams. In
Proceedings of the 28th International Conference on
Human Factors in Computing Systems, pages 1185–
1194, Atlanta, Georgia.
Junghoo Cho and Uri Schonfeld. 2007. Rankmass
crawler: a crawler with high personalized pagerank
coverage guarantee. In Proceedings of the 33rd Inter-
national Conference on Very Large Data Bases, pages
375–386, Vienna, Austria.
Anlei Dong, Ruiqiang Zhang, Pranam Kolari, Jing
Bai, Fernando Diaz, Yi Chang, Zhaohui Zheng, and
Hongyuan Zha. 2010. Time is of the essence: improv-
ing recency ranking using Twitter data. In Proceed-
ings of the 19th International Conference on World
Wide Web, pages 331–340, Raleigh, North Carolina.
Yajuan Duan, Long Jiang, Tao Qin, Ming Zhou, and
Heung-Yeung Shum. 2010. An empirical study on
learning to rank of tweets. In Proceedings of the 23rd
International Conference on Computational Linguis-
tics, pages 295–303, Beijing, China.
John Hannon, Mike Bennett, and Barry Smyth. 2010.
Recommending twitter users to follow using content
and collaborative filtering approaches. In Proceedings
of the 4th ACM Conference on Recommender Systems,
pages 199–206, Barcelona, Spain.
Liangjie Hong, Ovidiu Dan, and Brian D. Davison. 2011.
Predicting popular messages in Twitter. In Proceed-
ings of the 20th International Conference Companion
on World Wide Web, pages 57–58, Hyderabad, India.
Minlie Huang, Yi Yang, and Xiaoyan Zhu. 2011.
Quality-biased ranking of short texts in microblogging
services. In Proceedings of the 5th International Joint
Conference on Natural Language Processing, pages
373–382, Chiang Mai, Thailand.
Kalervo J¨arvelin and Jaana Kek¨al¨ainen. 2002. Cumu-
lated gain-based evaluation of IR techniques. ACM
Transactions on Information Systems, 20:422–446.
Thorsten Joachims. 1999. Making large-scale svm learn-
ing practical. In Advances in Kernel Methods: Support
Vector Learning, pages 169–184. MIT press.
Christopher D. Manning, Prabhakar Raghavan, and Hin-
rich Schutze. 2008. Introduction to Information Re-
trieval, volume 1. Cambridge University Press.
Qiaozhu Mei, Jian Guo, and Dragomir Radev. 2010.
Divrank: the interplay of prestige and diversity in
information networks. In Proceedings of the 16th
ACM SIGKDD International Conference on Knowl-
edge Discovery and Data Mining, pages 1009–1018,
Washington, DC.
Emily Pitler, Annie Louis, and Ani Nenkova. 2010.
Automatic evaluation of linguistic quality in multi-
document summarization. In Proceedings of the 48th
Annual Meeting of the Association for Computational
Linguistics, pages 544–554, Uppsala, Sweden.
Feng Qiu and Junghoo Cho. 2006. Automatic identi-
fication of user interest for personalized search. In
Proceedings of the 15th International Conference on
World Wide Web, pages 727–736, Edinburgh, Scot-
land.
Sun Aaron R., Cheng Jiesi, Zeng, and Daniel Dajun.
2009. A novel recommendation framework for micro-
blogging based on information diffusion. In Pro-
ceedings of the 19th Annual Workshop on Information
Technologies and Systems, pages 199–216, Phoenix,
Arizona.
Daniel Ramage, Susan Dumais, and Dan Liebling. 2010.
Characterizing microblogs with topic models. In In-
ternational AAAI Conference on Weblogs and Social
Media, pages 130–137. The AAAI Press.
Gerard Salton and Christopher Buckley. 1988. Term-
weighting approaches in automatic text retrieval. In-
formation Processing and Management, 24(5):513–
523.
Jaime Teevan, Daniel Ramage, and Meredith Ringel Mor-
ris. 2011. #Twittersearch: a comparison of microblog
search and web search. In Proceedings of the 4th ACM
</reference>
<page confidence="0.588606">
524
</page>
<reference confidence="0.999459733333333">
International Conference on Web Search and Data
Mining, pages 35–44, Hong Kong, China.
Ibrahim Uysal and W. Bruce Croft. 2011. User oriented
tweet ranking: a filtering approach to microblogs.
In Proceedings of the 20th ACM International Con-
ference on Information and Knowledge Management,
pages 2261–2264, Glasgow, Scotland.
Xiaojun Wan, Jianwu Yang, and Jianguo Xiao. 2007.
Single document summarization with document ex-
pansion. In Proceedings of the 22nd Conference
on Artificial Intelligence, pages 931–936, Vancouver,
British Columbia.
Xiaojun Wan, Huiying Li, and Jianguo Xiao. 2010.
Cross-language document summarization based on
machine translation quality prediction. In Proceed-
ings of the 48th Annual Meeting of the Association for
Computational Linguistics, pages 917–926, Uppsala,
Sweden.
Rui Yan, Jian-Yun Nie, and Xiaoming Li. 2011. Sum-
marize what you are interested in: An optimiza-
tion framework for interactive personalized summa-
rization. In Proceedings of the 2011 Conference on
Empirical Methods in Natural Language Processing,
pages 1342–1351. Association for Computational Lin-
guistics.
Ding Zhou, Sergey A. Orshanskiy, Hongyuan Zha, and
C. Lee Giles. 2007. Co-ranking authors and docu-
ments in a heterogeneous network. In Proceedings of
the 7th IEEE International Conference on Data Min-
ing, pages 739–744. IEEE.
</reference>
<page confidence="0.940594">
525
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.006541">
<title confidence="0.37014">Tweet Recommendation with Graph Co-Ranking of Science and Peking</title>
<address confidence="0.956837">Beijing 100871, China</address>
<email confidence="0.643243">r.yan@pku.edu.cnfor</email>
<affiliation confidence="0.8390315">Cognition and University of</affiliation>
<address confidence="0.97803">Edinburgh EH8 9AB, UK</address>
<email confidence="0.986916">mlap@inf.ed.ac.uk</email>
<keyword confidence="0.525419">Key Laboratory of</keyword>
<affiliation confidence="0.516787">Development Beihang</affiliation>
<address confidence="0.969816">Beijing 100083, China</address>
<email confidence="0.987206">lxm@pku.edu.cn</email>
<abstract confidence="0.997693285714286">As one of the most popular micro-blogging services, Twitter attracts millions of users, producing millions of tweets daily. Shared information through this service spreads faster than would have been possible with traditional sources, however the proliferation of user-generation content poses challenges to browsing and finding valuable information. In this paper we propose a graph-theoretic model for tweet recommendation that presents users with items they may have an interest in. Our ranks tweets and their authors simultaseveral networks: the social network connecting the users, the network connecting the tweets, and a third network that ties the two together. Tweet and author entities are ranked following a co-ranking algorithm based on the intuition that that there is a mutually reinforcing relationship between tweets and their authors that could be reflected in the rankings. We show that this framework can be parametrized to take into account user preferences, the popularity of tweets and their authors, and diversity. Experimental evaluation on a large dataset shows that our model outperforms competitive approaches by a large margin.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Fabian Abel</author>
<author>Qi Gao</author>
<author>Geert-Jan Houben</author>
<author>Ke Tao</author>
</authors>
<title>Analyzing temporal dynamics in Twitter profiles for personalized recommendations in the social web.</title>
<date>2011</date>
<booktitle>In Proceedings of the ACM Web Science Conference</booktitle>
<pages>1--8</pages>
<location>Koblenz, Germany.</location>
<contexts>
<context position="7505" citStr="Abel et al. (2011" startWordPosition="1133" endWordPosition="1136">on tweet content, the relations among users, and tweet specific characteristics (e.g., urls, number of retweets). Tweet Recommendation Previous work has also focused on tweet recommendation systems, assuming no explicit query is provided by the users. Collaborative filtering is perhaps the most obvious method for recommending tweets (Hannon et al., 2010). Chen et al. (2010) investigate how to select interesting URLs linked from Twitter and recommend the top ranked ones to users. Their recommender takes three dimensions into account: the source, the content topic, and social voting. Similarly, Abel et al. (2011a; 2011b; 2011c) recommend external websites linked to Twitter. Their method incorporates user profile modeling and temporal recency, but they do not utilize the social networks among users. R. et al. (2009) propose a diffusion-based recommendation framework especially for tweets representing critical events by constructing a diffusion graph. Hong et al. (2011) recommend tweets based on popularity related features. Ramage et al. (2010) investigate which topics users are interested in following a Labeled-LDA approach, by deciding whether a user is in the followee list of a given user or not. Uy</context>
</contexts>
<marker>Abel, Gao, Houben, Tao, 2011</marker>
<rawString>Fabian Abel, Qi Gao, Geert-Jan Houben, and Ke Tao. 2011a. Analyzing temporal dynamics in Twitter profiles for personalized recommendations in the social web. In Proceedings of the ACM Web Science Conference 2011, pages 1–8, Koblenz, Germany.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Fabian Abel</author>
<author>Qi Gao</author>
<author>Geert-Jan Houben</author>
<author>Ke Tao</author>
</authors>
<title>Analyzing user modeling on Twitter for personalized news recommendations. User Modeling, Adaptation and Personalization,</title>
<date>2011</date>
<pages>1--12</pages>
<contexts>
<context position="7505" citStr="Abel et al. (2011" startWordPosition="1133" endWordPosition="1136">on tweet content, the relations among users, and tweet specific characteristics (e.g., urls, number of retweets). Tweet Recommendation Previous work has also focused on tweet recommendation systems, assuming no explicit query is provided by the users. Collaborative filtering is perhaps the most obvious method for recommending tweets (Hannon et al., 2010). Chen et al. (2010) investigate how to select interesting URLs linked from Twitter and recommend the top ranked ones to users. Their recommender takes three dimensions into account: the source, the content topic, and social voting. Similarly, Abel et al. (2011a; 2011b; 2011c) recommend external websites linked to Twitter. Their method incorporates user profile modeling and temporal recency, but they do not utilize the social networks among users. R. et al. (2009) propose a diffusion-based recommendation framework especially for tweets representing critical events by constructing a diffusion graph. Hong et al. (2011) recommend tweets based on popularity related features. Ramage et al. (2010) investigate which topics users are interested in following a Labeled-LDA approach, by deciding whether a user is in the followee list of a given user or not. Uy</context>
</contexts>
<marker>Abel, Gao, Houben, Tao, 2011</marker>
<rawString>Fabian Abel, Qi Gao, Geert-Jan Houben, and Ke Tao. 2011b. Analyzing user modeling on Twitter for personalized news recommendations. User Modeling, Adaptation and Personalization, pages 1–12.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Fabian Abel</author>
<author>Qi Gao</author>
<author>Geert-Jan Houben</author>
<author>Ke Tao</author>
</authors>
<title>Semantic enrichment of twitter posts for user profile construction on the social web. The Semanic Web: Research and Applications,</title>
<date>2011</date>
<pages>375--389</pages>
<contexts>
<context position="7505" citStr="Abel et al. (2011" startWordPosition="1133" endWordPosition="1136">on tweet content, the relations among users, and tweet specific characteristics (e.g., urls, number of retweets). Tweet Recommendation Previous work has also focused on tweet recommendation systems, assuming no explicit query is provided by the users. Collaborative filtering is perhaps the most obvious method for recommending tweets (Hannon et al., 2010). Chen et al. (2010) investigate how to select interesting URLs linked from Twitter and recommend the top ranked ones to users. Their recommender takes three dimensions into account: the source, the content topic, and social voting. Similarly, Abel et al. (2011a; 2011b; 2011c) recommend external websites linked to Twitter. Their method incorporates user profile modeling and temporal recency, but they do not utilize the social networks among users. R. et al. (2009) propose a diffusion-based recommendation framework especially for tweets representing critical events by constructing a diffusion graph. Hong et al. (2011) recommend tweets based on popularity related features. Ramage et al. (2010) investigate which topics users are interested in following a Labeled-LDA approach, by deciding whether a user is in the followee list of a given user or not. Uy</context>
</contexts>
<marker>Abel, Gao, Houben, Tao, 2011</marker>
<rawString>Fabian Abel, Qi Gao, Geert-Jan Houben, and Ke Tao. 2011c. Semantic enrichment of twitter posts for user profile construction on the social web. The Semanic Web: Research and Applications, pages 375–389.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David M Blei</author>
<author>Andrew Y Ng</author>
<author>Michael I Jordan</author>
</authors>
<title>Latent Dirichlet aladdress.</title>
<date>2003</date>
<journal>Journal of Machine Learning Research,</journal>
<pages>3--993</pages>
<contexts>
<context position="13666" citStr="Blei et al., 2003" startWordPosition="2189" endWordPosition="2192">be different for different users. Note that user preferences can be also defined at the tweet (rather than topic) level. Although tweets can illustrate user interests more directly, in most cases a user will only respond to a small fraction of tweets. This means that most tweets will not provide any information relating to a user’s interests. The topic preference vector allows to propagate such information (based on whether a tweet has been reposted or not) to other tweets within the same topic cluster. Given n topics, we obtain a topic distribution matrix D using Latent Dirichlet Allocation (Blei et al., 2003). Let Dij denote the probability of tweet mi to belong to topic tj. Consider a user with a topic preference vector t and topic distribution matrix D. We calculate the response probability r for all tweets for this user as: r = tDT (2) where r=[r1, r2, ..., rVM]1×|VM |represents the response probability vector and ri the probability for a user to respond to tweet mi. We normalize r so that Eri∈r ri = 1. Now, given the observed response probability vector r = [r1,r2,...,rw]1×w, where w&lt;|VM| for a given user and the topic distribution matrix D, our task is estimate the topic preference vector t. </context>
</contexts>
<marker>Blei, Ng, Jordan, 2003</marker>
<rawString>David M. Blei, Andrew Y. Ng, and Michael I. Jordan. 2003. Latent Dirichlet aladdress. Journal of Machine Learning Research, 3:993–1022.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sergey Brin</author>
<author>Lawrence Page</author>
</authors>
<title>The anatomy of a large-scale hypertextual web search engine.</title>
<date>1998</date>
<booktitle>Proceedings of the 7th International Conference on World Wide Web,</booktitle>
<pages>30--1</pages>
<contexts>
<context position="11539" citStr="Brin and Page, 1998" startWordPosition="1806" endWordPosition="1809">g. A bipartite graph (whose edges are shown with dashed lines) ties the tweet and author networks together. the transition probabilities from one vertex to the next. The framework couples the two random walks on GM, and GU that rank tweets and theirs authors in isolation. and allows to obtain a more global ranking by taking into account their mutual dependence. In the following sections we first describe how we obtain the rankings on GM and GU, and then move on to discuss how the two are coupled. 3.1 Ranking the Tweet Graph Popularity We rank the tweet network following the PageRank paradigm (Brin and Page, 1998). Consider a random walk on GM and let M be the transition matrix (defined in Section 3.4). Fix some damping factor µ and say that at each time step with probability (1-µ) we stick to random walking and with probability µ we do not make a usual random walk step, but instead jump to any vertex, chosen uniformly at random: m = (1 −µ)MTm+ µ |VM|11T (1) Here, vector m contains the ranking scores for the vertices in GM. The fact that there exists a unique so518 lution to (1) follows from the random walk M being ergodic (µ &gt;0 guarantees irreducibility, because we can jump to any vertex). MT is the t</context>
</contexts>
<marker>Brin, Page, 1998</marker>
<rawString>Sergey Brin and Lawrence Page. 1998. The anatomy of a large-scale hypertextual web search engine. Proceedings of the 7th International Conference on World Wide Web, 30(1-7):107–117.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jaime Carbonell</author>
<author>Jade Goldstein</author>
</authors>
<title>The use of MMR, diversity-based reranking for reordering documents and producing summaries.</title>
<date>1998</date>
<booktitle>In Proceedings of the 21st Annual International ACM SIGIR Conference on Research and Development in Information Retrieval,</booktitle>
<pages>335--336</pages>
<location>Melbourne, Australia.</location>
<contexts>
<context position="15258" citStr="Carbonell and Goldstein, 1998" startWordPosition="2475" endWordPosition="2478"> argmax ( firi(t) t (3) In a simple random walk, it is assumed that all nodes in the matrix M are equi-probable before the walk. In contrast, we use the topic preference vector as a prior on M. Let Diag(r) denote a diagonal matrix whose eigenvalue is vector r. Then m becomes: m = (1− µ)[Diag(r)M]Tm +µr = (1− µ)[Diag(tDT)M]Tm+µtDT (4) Diversity We would also like our output to be diverse without redundant information. Unfortunately, equation (4) will have the opposite effect, as it assigns high scores to closely connected node communities. A greedy algorithm such as Maximum Marginal Relevance (Carbonell and Goldstein, 1998; Wan et al., 2007; Wan et al., 2010) may achieve diversity by iteratively selecting the most prestigious or popular vertex and then penalizing the vertices “covered” by those that have been already selected. Rather than adopting a greedy vertex selection method, we follow DivRank (Mei et al., 2010) a recently proposed algorithm that balances popularity and diversity in ranking, based on a time-variant random walk. In contrast to PageRank, DivRank assumes that the transition probabilities change over time. Moreover, it is assumed that the transition probability from one state to another is rei</context>
</contexts>
<marker>Carbonell, Goldstein, 1998</marker>
<rawString>Jaime Carbonell and Jade Goldstein. 1998. The use of MMR, diversity-based reranking for reordering documents and producing summaries. In Proceedings of the 21st Annual International ACM SIGIR Conference on Research and Development in Information Retrieval, pages 335–336, Melbourne, Australia.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jilin Chen</author>
<author>Rowan Nairn</author>
<author>Les Nelson</author>
<author>Michael Bernstein</author>
<author>Ed Chi</author>
</authors>
<title>Short and tweet: experiments on recommending content from information streams.</title>
<date>2010</date>
<booktitle>In Proceedings of the 28th International Conference on Human Factors in Computing Systems,</booktitle>
<pages>1185--1194</pages>
<location>Atlanta,</location>
<contexts>
<context position="7264" citStr="Chen et al. (2010)" startWordPosition="1092" endWordPosition="1095">model biased towards text quality with a regularization factor inspired by the hypothesis that documents similar in content may have similar quality (Huang et al., 2011). Duan et al. (2010) learn a ranking model using SVMs and features based on tweet content, the relations among users, and tweet specific characteristics (e.g., urls, number of retweets). Tweet Recommendation Previous work has also focused on tweet recommendation systems, assuming no explicit query is provided by the users. Collaborative filtering is perhaps the most obvious method for recommending tweets (Hannon et al., 2010). Chen et al. (2010) investigate how to select interesting URLs linked from Twitter and recommend the top ranked ones to users. Their recommender takes three dimensions into account: the source, the content topic, and social voting. Similarly, Abel et al. (2011a; 2011b; 2011c) recommend external websites linked to Twitter. Their method incorporates user profile modeling and temporal recency, but they do not utilize the social networks among users. R. et al. (2009) propose a diffusion-based recommendation framework especially for tweets representing critical events by constructing a diffusion graph. Hong et al. (2</context>
</contexts>
<marker>Chen, Nairn, Nelson, Bernstein, Chi, 2010</marker>
<rawString>Jilin Chen, Rowan Nairn, Les Nelson, Michael Bernstein, and Ed Chi. 2010. Short and tweet: experiments on recommending content from information streams. In Proceedings of the 28th International Conference on Human Factors in Computing Systems, pages 1185– 1194, Atlanta, Georgia.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Junghoo Cho</author>
<author>Uri Schonfeld</author>
</authors>
<title>Rankmass crawler: a crawler with high personalized pagerank coverage guarantee.</title>
<date>2007</date>
<booktitle>In Proceedings of the 33rd International Conference on Very Large Data Bases,</booktitle>
<pages>375--386</pages>
<location>Vienna, Austria.</location>
<contexts>
<context position="4434" citStr="Cho and Schonfeld, 2007" startWordPosition="648" endWordPosition="651">ting the stream of tweets to those of interest to the user, or by discovering intriguing content outside the user’s following network. The tweet recommendation task is challenging for several reasons. Firstly, Twitter does not merely consist of a set of tweets. Rather, it contains many latent networks including the following relationships among users and the retweeting linkage (which indicates information diffusion). Secondly, the recommendations ought to be of interest to the user and likely to to attract user response (e.g., to be retweeted). Thirdly, recommendations should be personalized (Cho and Schonfeld, 2007; Yan et al., 2011), avoid redundancy, and demonstrate diversity. In this paper we present a graph-theoretic approach to tweet recommendation that attempts to address these challenges. Our recommender operates over a heterogeneous network that connects the users (or authors) and the tweets they produce. The user network represents links among authors based on their following behavior, whereas the tweet network connects tweets based on content similarity. A third bipartite graph ties the two together. Tweet and author entities in this network are ranked simultaneously following a co-ranking alg</context>
</contexts>
<marker>Cho, Schonfeld, 2007</marker>
<rawString>Junghoo Cho and Uri Schonfeld. 2007. Rankmass crawler: a crawler with high personalized pagerank coverage guarantee. In Proceedings of the 33rd International Conference on Very Large Data Bases, pages 375–386, Vienna, Austria.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Anlei Dong</author>
<author>Ruiqiang Zhang</author>
<author>Pranam Kolari</author>
<author>Jing Bai</author>
<author>Fernando Diaz</author>
<author>Yi Chang</author>
<author>Zhaohui Zheng</author>
<author>Hongyuan Zha</author>
</authors>
<title>Time is of the essence: improving recency ranking using Twitter data.</title>
<date>2010</date>
<booktitle>In Proceedings of the 19th International Conference on World Wide Web,</booktitle>
<pages>331--340</pages>
<location>Raleigh, North Carolina.</location>
<contexts>
<context position="6579" citStr="Dong et al., 2010" startWordPosition="985" endWordPosition="988">king approach substantially improves performance over the state of the art. We obtain a relative improvement of 18.3% (in nDCG) and 7.8% (in MAP) over the best comparison system. 2 Related Work Tweet Search Given the large amount of tweets being posted daily, ranking strategies have become extremely important for retrieving information quickly. Many websites currently offer a real-time search service which returns ranked lists of Twitter posts or shared links according to user queries. Ranking methods used by these sites employ three criteria, namely recency, popularity and content relevance (Dong et al., 2010). State-of-art tweet retrieval methods include a linear regression model biased towards text quality with a regularization factor inspired by the hypothesis that documents similar in content may have similar quality (Huang et al., 2011). Duan et al. (2010) learn a ranking model using SVMs and features based on tweet content, the relations among users, and tweet specific characteristics (e.g., urls, number of retweets). Tweet Recommendation Previous work has also focused on tweet recommendation systems, assuming no explicit query is provided by the users. Collaborative filtering is perhaps the </context>
</contexts>
<marker>Dong, Zhang, Kolari, Bai, Diaz, Chang, Zheng, Zha, 2010</marker>
<rawString>Anlei Dong, Ruiqiang Zhang, Pranam Kolari, Jing Bai, Fernando Diaz, Yi Chang, Zhaohui Zheng, and Hongyuan Zha. 2010. Time is of the essence: improving recency ranking using Twitter data. In Proceedings of the 19th International Conference on World Wide Web, pages 331–340, Raleigh, North Carolina.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yajuan Duan</author>
<author>Long Jiang</author>
<author>Tao Qin</author>
<author>Ming Zhou</author>
<author>Heung-Yeung Shum</author>
</authors>
<title>An empirical study on learning to rank of tweets.</title>
<date>2010</date>
<booktitle>In Proceedings of the 23rd International Conference on Computational Linguistics,</booktitle>
<pages>295--303</pages>
<location>Beijing, China.</location>
<contexts>
<context position="6835" citStr="Duan et al. (2010)" startWordPosition="1025" endWordPosition="1028">ly, ranking strategies have become extremely important for retrieving information quickly. Many websites currently offer a real-time search service which returns ranked lists of Twitter posts or shared links according to user queries. Ranking methods used by these sites employ three criteria, namely recency, popularity and content relevance (Dong et al., 2010). State-of-art tweet retrieval methods include a linear regression model biased towards text quality with a regularization factor inspired by the hypothesis that documents similar in content may have similar quality (Huang et al., 2011). Duan et al. (2010) learn a ranking model using SVMs and features based on tweet content, the relations among users, and tweet specific characteristics (e.g., urls, number of retweets). Tweet Recommendation Previous work has also focused on tweet recommendation systems, assuming no explicit query is provided by the users. Collaborative filtering is perhaps the most obvious method for recommending tweets (Hannon et al., 2010). Chen et al. (2010) investigate how to select interesting URLs linked from Twitter and recommend the top ranked ones to users. Their recommender takes three dimensions into account: the sour</context>
<context position="24091" citStr="Duan et al. (2010)" startWordPosition="3993" endWordPosition="3996">e same X value which was set to 0.6. System Comparison We compared our approach against three naive baselines and three state-of-theart systems recently proposed in the literature. All comparison systems were subject to the same filtering and preprocessing procedures as our own algorithm. Our first baseline ranks tweets randomly (Random). Our second baseline ranks tweets according to token length: longer tweets are ranked higher (Length). The third baseline ranks tweets by the number of times they are reposted assuming that more reposting is better (RTnum). We also compared our method against Duan et al. (2010). Their model (RSVM) ranks tweets based on tweet content features and tweet authority features using the RankSVM algorithm (Joachims, 1999). Our fifth comparison system (DTC) was Uysal and Croft ¯Wij = A(mi,uj) ˆWji = Ek A(mi,uk), 521 (2011) who use a decision tree classifier to judge how likely it is for a tweet to be reposted by a specific user. This scenario is similar to ours when ranking tweets by retweet likelihood. Finally, we compared against Huang et al. (2011) who use weighted linear combination (WLC) to grade the relevance of a tweet given a query. We implemented their model without</context>
</contexts>
<marker>Duan, Jiang, Qin, Zhou, Shum, 2010</marker>
<rawString>Yajuan Duan, Long Jiang, Tao Qin, Ming Zhou, and Heung-Yeung Shum. 2010. An empirical study on learning to rank of tweets. In Proceedings of the 23rd International Conference on Computational Linguistics, pages 295–303, Beijing, China.</rawString>
</citation>
<citation valid="true">
<authors>
<author>John Hannon</author>
<author>Mike Bennett</author>
<author>Barry Smyth</author>
</authors>
<title>Recommending twitter users to follow using content and collaborative filtering approaches.</title>
<date>2010</date>
<booktitle>In Proceedings of the 4th ACM Conference on Recommender Systems,</booktitle>
<pages>199--206</pages>
<location>Barcelona,</location>
<contexts>
<context position="7244" citStr="Hannon et al., 2010" startWordPosition="1088" endWordPosition="1091">e a linear regression model biased towards text quality with a regularization factor inspired by the hypothesis that documents similar in content may have similar quality (Huang et al., 2011). Duan et al. (2010) learn a ranking model using SVMs and features based on tweet content, the relations among users, and tweet specific characteristics (e.g., urls, number of retweets). Tweet Recommendation Previous work has also focused on tweet recommendation systems, assuming no explicit query is provided by the users. Collaborative filtering is perhaps the most obvious method for recommending tweets (Hannon et al., 2010). Chen et al. (2010) investigate how to select interesting URLs linked from Twitter and recommend the top ranked ones to users. Their recommender takes three dimensions into account: the source, the content topic, and social voting. Similarly, Abel et al. (2011a; 2011b; 2011c) recommend external websites linked to Twitter. Their method incorporates user profile modeling and temporal recency, but they do not utilize the social networks among users. R. et al. (2009) propose a diffusion-based recommendation framework especially for tweets representing critical events by constructing a diffusion g</context>
</contexts>
<marker>Hannon, Bennett, Smyth, 2010</marker>
<rawString>John Hannon, Mike Bennett, and Barry Smyth. 2010. Recommending twitter users to follow using content and collaborative filtering approaches. In Proceedings of the 4th ACM Conference on Recommender Systems, pages 199–206, Barcelona, Spain.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Liangjie Hong</author>
<author>Ovidiu Dan</author>
<author>Brian D Davison</author>
</authors>
<title>Predicting popular messages in Twitter.</title>
<date>2011</date>
<booktitle>In Proceedings of the 20th International Conference Companion on World Wide Web,</booktitle>
<pages>57--58</pages>
<location>Hyderabad, India.</location>
<contexts>
<context position="7868" citStr="Hong et al. (2011)" startWordPosition="1187" endWordPosition="1190"> et al. (2010) investigate how to select interesting URLs linked from Twitter and recommend the top ranked ones to users. Their recommender takes three dimensions into account: the source, the content topic, and social voting. Similarly, Abel et al. (2011a; 2011b; 2011c) recommend external websites linked to Twitter. Their method incorporates user profile modeling and temporal recency, but they do not utilize the social networks among users. R. et al. (2009) propose a diffusion-based recommendation framework especially for tweets representing critical events by constructing a diffusion graph. Hong et al. (2011) recommend tweets based on popularity related features. Ramage et al. (2010) investigate which topics users are interested in following a Labeled-LDA approach, by deciding whether a user is in the followee list of a given user or not. Uysal and Croft (2011) estimate the likelihood of a tweet being reposted from a user-centric perspective. Our work also develops a tweet recommendation system. Our model exploits the information provided by the tweets and the underlying social networks in a unified co-ranking framework. Although 517 these sources have been previously used to search or recommend t</context>
</contexts>
<marker>Hong, Dan, Davison, 2011</marker>
<rawString>Liangjie Hong, Ovidiu Dan, and Brian D. Davison. 2011. Predicting popular messages in Twitter. In Proceedings of the 20th International Conference Companion on World Wide Web, pages 57–58, Hyderabad, India.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Minlie Huang</author>
<author>Yi Yang</author>
<author>Xiaoyan Zhu</author>
</authors>
<title>Quality-biased ranking of short texts in microblogging services.</title>
<date>2011</date>
<booktitle>In Proceedings of the 5th International Joint Conference on Natural Language Processing,</booktitle>
<pages>373--382</pages>
<location>Chiang Mai, Thailand.</location>
<contexts>
<context position="6815" citStr="Huang et al., 2011" startWordPosition="1021" endWordPosition="1024">eets being posted daily, ranking strategies have become extremely important for retrieving information quickly. Many websites currently offer a real-time search service which returns ranked lists of Twitter posts or shared links according to user queries. Ranking methods used by these sites employ three criteria, namely recency, popularity and content relevance (Dong et al., 2010). State-of-art tweet retrieval methods include a linear regression model biased towards text quality with a regularization factor inspired by the hypothesis that documents similar in content may have similar quality (Huang et al., 2011). Duan et al. (2010) learn a ranking model using SVMs and features based on tweet content, the relations among users, and tweet specific characteristics (e.g., urls, number of retweets). Tweet Recommendation Previous work has also focused on tweet recommendation systems, assuming no explicit query is provided by the users. Collaborative filtering is perhaps the most obvious method for recommending tweets (Hannon et al., 2010). Chen et al. (2010) investigate how to select interesting URLs linked from Twitter and recommend the top ranked ones to users. Their recommender takes three dimensions in</context>
<context position="24565" citStr="Huang et al. (2011)" startWordPosition="4076" endWordPosition="4079">s by the number of times they are reposted assuming that more reposting is better (RTnum). We also compared our method against Duan et al. (2010). Their model (RSVM) ranks tweets based on tweet content features and tweet authority features using the RankSVM algorithm (Joachims, 1999). Our fifth comparison system (DTC) was Uysal and Croft ¯Wij = A(mi,uj) ˆWji = Ek A(mi,uk), 521 (2011) who use a decision tree classifier to judge how likely it is for a tweet to be reposted by a specific user. This scenario is similar to ours when ranking tweets by retweet likelihood. Finally, we compared against Huang et al. (2011) who use weighted linear combination (WLC) to grade the relevance of a tweet given a query. We implemented their model without any query-related features as in our setting we do not discriminate tweets depending on their relevance to specific queries. Evaluation We evaluated system output in two ways, i.e., automatically and in a user study. Specifically, we assume that if a tweet is retweeted it is relevant and is thus ranked higher over tweets that have not been reposted. We used our algorithm to predict a ranking for the tweets in the test data which we then compared against a goldstandard </context>
</contexts>
<marker>Huang, Yang, Zhu, 2011</marker>
<rawString>Minlie Huang, Yi Yang, and Xiaoyan Zhu. 2011. Quality-biased ranking of short texts in microblogging services. In Proceedings of the 5th International Joint Conference on Natural Language Processing, pages 373–382, Chiang Mai, Thailand.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kalervo J¨arvelin</author>
<author>Jaana Kek¨al¨ainen</author>
</authors>
<title>Cumulated gain-based evaluation of IR techniques.</title>
<date>2002</date>
<journal>ACM Transactions on Information Systems,</journal>
<pages>20--422</pages>
<marker>J¨arvelin, Kek¨al¨ainen, 2002</marker>
<rawString>Kalervo J¨arvelin and Jaana Kek¨al¨ainen. 2002. Cumulated gain-based evaluation of IR techniques. ACM Transactions on Information Systems, 20:422–446.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Thorsten Joachims</author>
</authors>
<title>Making large-scale svm learning practical.</title>
<date>1999</date>
<booktitle>In Advances in Kernel Methods: Support Vector Learning,</booktitle>
<pages>169--184</pages>
<publisher>MIT press.</publisher>
<contexts>
<context position="24230" citStr="Joachims, 1999" startWordPosition="4015" endWordPosition="4016">s recently proposed in the literature. All comparison systems were subject to the same filtering and preprocessing procedures as our own algorithm. Our first baseline ranks tweets randomly (Random). Our second baseline ranks tweets according to token length: longer tweets are ranked higher (Length). The third baseline ranks tweets by the number of times they are reposted assuming that more reposting is better (RTnum). We also compared our method against Duan et al. (2010). Their model (RSVM) ranks tweets based on tweet content features and tweet authority features using the RankSVM algorithm (Joachims, 1999). Our fifth comparison system (DTC) was Uysal and Croft ¯Wij = A(mi,uj) ˆWji = Ek A(mi,uk), 521 (2011) who use a decision tree classifier to judge how likely it is for a tweet to be reposted by a specific user. This scenario is similar to ours when ranking tweets by retweet likelihood. Finally, we compared against Huang et al. (2011) who use weighted linear combination (WLC) to grade the relevance of a tweet given a query. We implemented their model without any query-related features as in our setting we do not discriminate tweets depending on their relevance to specific queries. Evaluation We</context>
</contexts>
<marker>Joachims, 1999</marker>
<rawString>Thorsten Joachims. 1999. Making large-scale svm learning practical. In Advances in Kernel Methods: Support Vector Learning, pages 169–184. MIT press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Christopher D Manning</author>
<author>Prabhakar Raghavan</author>
<author>Hinrich Schutze</author>
</authors>
<title>Introduction to Information Retrieval,</title>
<date>2008</date>
<volume>1</volume>
<publisher>Cambridge University Press.</publisher>
<contexts>
<context position="26019" citStr="Manning et al., 2008" startWordPosition="4338" endWordPosition="4341">4) u∈VU Zu i=1 where VU denotes users, k indicates the top-k positions in a ranked list, and Zu is a normalization factor obtained from a perfect ranking for a particular user. rui is the relevance score (i.e., 1: retweeted, 0: not retweeted) for the i-th tweet in the ranking list for user u. We also evaluated system output in terms of Mean Average Precision (MAP), under the assumption that retweeted tweets are relevant and the rest irrelevant: MAP = k 1 1 �Pu × ru (15) |VU |u∈VU Nu i=1 where Nu is the number of reposted tweets for user u, and Pui is the precision at i-th position for user u (Manning et al., 2008). The automatic evaluation sketched above does not assess the full potential of our recommendation system. For instance, it is possible for the algorithm to recommend tweets to users with no linkage to their publishers. Such tweets may be of potential interest, however our goldstandard data can only provide information for tweets and users with following links. System nDCG@5 nDCG@10 nDCG@25 nDCG@50 MAP Random 0.068 0.111 0.153 0.180 0.167 Length 0.275 0.288 0.298 0.335 0.258 RTNum 0.233 0.219 0.225 0.249 0.239 RSVM 0.392 0.400 0.421 0.444 0.558 DTC 0.441 0.468 0.492 0.473 0.603 WLC 0.404 0.421</context>
</contexts>
<marker>Manning, Raghavan, Schutze, 2008</marker>
<rawString>Christopher D. Manning, Prabhakar Raghavan, and Hinrich Schutze. 2008. Introduction to Information Retrieval, volume 1. Cambridge University Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Qiaozhu Mei</author>
<author>Jian Guo</author>
<author>Dragomir Radev</author>
</authors>
<title>Divrank: the interplay of prestige and diversity in information networks.</title>
<date>2010</date>
<booktitle>In Proceedings of the 16th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining,</booktitle>
<pages>1009--1018</pages>
<location>Washington, DC.</location>
<contexts>
<context position="5840" citStr="Mei et al., 2010" startWordPosition="869" endWordPosition="872">ets are important if they are related to other important tweets and authored by important users who in turn are related to other important users. The model exploits this mutually reinforcing relationship between tweets and their authors and couples two random walks, one on the tweet graph and one on the author graph, into a combined one. Rather than creating a global ranking over all tweets in a collection, we extend this framework to individual users and produce personalized recommendations. Moreover, we incorporate diversity by allowing the random walk on the tweet graph to be time-variant (Mei et al., 2010). Experimental results on a real-world dataset consisting of 364,287,744 tweets from 9,449,542 users show that the co-ranking approach substantially improves performance over the state of the art. We obtain a relative improvement of 18.3% (in nDCG) and 7.8% (in MAP) over the best comparison system. 2 Related Work Tweet Search Given the large amount of tweets being posted daily, ranking strategies have become extremely important for retrieving information quickly. Many websites currently offer a real-time search service which returns ranked lists of Twitter posts or shared links according to us</context>
<context position="15558" citStr="Mei et al., 2010" startWordPosition="2524" endWordPosition="2527">[Diag(tDT)M]Tm+µtDT (4) Diversity We would also like our output to be diverse without redundant information. Unfortunately, equation (4) will have the opposite effect, as it assigns high scores to closely connected node communities. A greedy algorithm such as Maximum Marginal Relevance (Carbonell and Goldstein, 1998; Wan et al., 2007; Wan et al., 2010) may achieve diversity by iteratively selecting the most prestigious or popular vertex and then penalizing the vertices “covered” by those that have been already selected. Rather than adopting a greedy vertex selection method, we follow DivRank (Mei et al., 2010) a recently proposed algorithm that balances popularity and diversity in ranking, based on a time-variant random walk. In contrast to PageRank, DivRank assumes that the transition probabilities change over time. Moreover, it is assumed that the transition probability from one state to another is reinforced by the number of previous visits to that state. At each step, the algorithm creates a dynamic transition matrix M(.). After z iterations, the matrix becomes: M(z) = (1−µ)M(z−1) · m(z−1) +µtDT (5) and hence, m can be calculated as: m(z) = (1−µ)[Diag(tDT)M(z)]Tm+µtDT (6) Equation (5) increases</context>
</contexts>
<marker>Mei, Guo, Radev, 2010</marker>
<rawString>Qiaozhu Mei, Jian Guo, and Dragomir Radev. 2010. Divrank: the interplay of prestige and diversity in information networks. In Proceedings of the 16th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, pages 1009–1018, Washington, DC.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Emily Pitler</author>
<author>Annie Louis</author>
<author>Ani Nenkova</author>
</authors>
<title>Automatic evaluation of linguistic quality in multidocument summarization.</title>
<date>2010</date>
<booktitle>In Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics,</booktitle>
<pages>544--554</pages>
<location>Uppsala,</location>
<contexts>
<context position="22336" citStr="Pitler et al. (2010)" startWordPosition="3695" endWordPosition="3698">vely large dataset consisting of 9,449,542 users, 364,287,744 tweets, 596,777,491 links, and 55,526,494 retweets. The crawler monitored the data from 3/25/2011 to 5/30/2011. We used approximately one month of this data for training and the rest for testing. Before building the graphs (i.e., the tweet graph, the author graph, and the tweet-author graph), the dataset was preprocessed as follows. We removed tweets of low linguistic quality and subsequently discarded users without any linkage to the remaining tweets. We measured linguistic quality following the evaluation framework put forward in Pitler et al. (2010). For instance, we measured the out-ofvocabulary word ratio (as a way of gauging spelling errors), entity coherence, fluency, and so on. We further removed stopwords and performed stemming. Parameter Settings We ran LDA with 500 iterations of Gibbs sampling. The number of topics n was set to 100 which upon inspection seemed generally coherent and meaningful. We set the damping factor µ to 0.15 following the standard PageRank paradigm. We opted for more or less generic parameter values as we did not want to tune our framework to the specific dataset at hand. We examined the parameter X which co</context>
</contexts>
<marker>Pitler, Louis, Nenkova, 2010</marker>
<rawString>Emily Pitler, Annie Louis, and Ani Nenkova. 2010. Automatic evaluation of linguistic quality in multidocument summarization. In Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics, pages 544–554, Uppsala, Sweden.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Feng Qiu</author>
<author>Junghoo Cho</author>
</authors>
<title>Automatic identification of user interest for personalized search.</title>
<date>2006</date>
<booktitle>In Proceedings of the 15th International Conference on World Wide Web,</booktitle>
<pages>727--736</pages>
<location>Edinburgh, Scotland.</location>
<contexts>
<context position="12791" citStr="Qiu and Cho, 2006" startWordPosition="2037" endWordPosition="2040">|VM |entries, each being equal to one. Let m∈ RVM, ||m||1 = 1 be the only solution. Personalization The standard PageRank algorithm performs a random walk, starting from any node, then randomly selects a link from that node to follow considering the weighted matrix M, or jumps to a random node with equal probability. It produces a global ranking over all tweets in the collection without taking specific users into account. As there are billions of tweets available on Twitter covering many diverse topics, it is reasonable to assume that an average user will only be interested in a small subset (Qiu and Cho, 2006). We operationalize a user’s topic preference as a vector t = [t1,t2,...,tn]1×n, where n denotes the number of topics, and ti represents the degree of preference for topic i. The vector t is normalized such that Eni=1 ti = 1. Intuitively, such vectors will be different for different users. Note that user preferences can be also defined at the tweet (rather than topic) level. Although tweets can illustrate user interests more directly, in most cases a user will only respond to a small fraction of tweets. This means that most tweets will not provide any information relating to a user’s interests</context>
</contexts>
<marker>Qiu, Cho, 2006</marker>
<rawString>Feng Qiu and Junghoo Cho. 2006. Automatic identification of user interest for personalized search. In Proceedings of the 15th International Conference on World Wide Web, pages 727–736, Edinburgh, Scotland.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sun Aaron R</author>
<author>Cheng Jiesi</author>
<author>Zeng</author>
<author>Daniel Dajun</author>
</authors>
<title>A novel recommendation framework for microblogging based on information diffusion.</title>
<date>2009</date>
<booktitle>In Proceedings of the 19th Annual Workshop on Information Technologies and Systems,</booktitle>
<pages>199--216</pages>
<location>Phoenix, Arizona.</location>
<marker>R, Jiesi, Zeng, Dajun, 2009</marker>
<rawString>Sun Aaron R., Cheng Jiesi, Zeng, and Daniel Dajun. 2009. A novel recommendation framework for microblogging based on information diffusion. In Proceedings of the 19th Annual Workshop on Information Technologies and Systems, pages 199–216, Phoenix, Arizona.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Daniel Ramage</author>
<author>Susan Dumais</author>
<author>Dan Liebling</author>
</authors>
<title>Characterizing microblogs with topic models.</title>
<date>2010</date>
<booktitle>In International AAAI Conference on Weblogs and Social Media,</booktitle>
<pages>130--137</pages>
<publisher>The AAAI Press.</publisher>
<contexts>
<context position="7944" citStr="Ramage et al. (2010)" startWordPosition="1199" endWordPosition="1202">ter and recommend the top ranked ones to users. Their recommender takes three dimensions into account: the source, the content topic, and social voting. Similarly, Abel et al. (2011a; 2011b; 2011c) recommend external websites linked to Twitter. Their method incorporates user profile modeling and temporal recency, but they do not utilize the social networks among users. R. et al. (2009) propose a diffusion-based recommendation framework especially for tweets representing critical events by constructing a diffusion graph. Hong et al. (2011) recommend tweets based on popularity related features. Ramage et al. (2010) investigate which topics users are interested in following a Labeled-LDA approach, by deciding whether a user is in the followee list of a given user or not. Uysal and Croft (2011) estimate the likelihood of a tweet being reposted from a user-centric perspective. Our work also develops a tweet recommendation system. Our model exploits the information provided by the tweets and the underlying social networks in a unified co-ranking framework. Although 517 these sources have been previously used to search or recommend tweets, our model considers them simultaneously and produces a ranking that i</context>
</contexts>
<marker>Ramage, Dumais, Liebling, 2010</marker>
<rawString>Daniel Ramage, Susan Dumais, and Dan Liebling. 2010. Characterizing microblogs with topic models. In International AAAI Conference on Weblogs and Social Media, pages 130–137. The AAAI Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Gerard Salton</author>
<author>Christopher Buckley</author>
</authors>
<title>Termweighting approaches in automatic text retrieval.</title>
<date>1988</date>
<booktitle>Information Processing and Management,</booktitle>
<volume>24</volume>
<issue>5</issue>
<pages>523</pages>
<contexts>
<context position="20578" citStr="Salton and Buckley, 1988" startWordPosition="3381" endWordPosition="3384">ntrolled by four affinity matrices: M, U, MU and UM. In this section we explain how these matrices are defined in more detail. The tweet graph is an undirected weighted graph, where an edge between two tweets mi and mj represents their cosine similarity. An adjacency matrix M 520 describes the tweet graph where each entry corresponds to the weight of a link in the graph: Mij = F (mi,mj) F (mi mi) = mi ·~mj (10) EkF (mi,mk) Ilfn*iII||FRIj where F (.) is the cosine similarity and m~ is a term vector corresponding to tweet m. We treat a tweet as a short document and weight each term with tf.idf (Salton and Buckley, 1988), where tf is the term frequency and idf is the inverse document frequency. The author graph is a directed graph based on the following linkage. When ui follows uj, we add a link from ui to uj. Let the indicator function I(ui,uj) denote whether ui follows uj. The adjacency matrix U is then defined as: Uij = � I(ui,uj) I u u _ 1if eij ∈ EU 11 Ek I (ui, uk), ( I, �) Oif eij ∈/ EU ( ) In the bipartite tweet-author graph GMU, the entry EMU(i, j) is an indicator function denoting whether tweet mi is authored by user uj: � 1 if eij ∈ EMU A(mi,uj) = (12) 0 if eij ∈/ EMU Through EMU we define MU and U</context>
</contexts>
<marker>Salton, Buckley, 1988</marker>
<rawString>Gerard Salton and Christopher Buckley. 1988. Termweighting approaches in automatic text retrieval. Information Processing and Management, 24(5):513– 523.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jaime Teevan</author>
<author>Daniel Ramage</author>
<author>Meredith Ringel Morris</author>
</authors>
<title>Twittersearch: a comparison of microblog search and web search.</title>
<date>2011</date>
<booktitle>In Proceedings of the 4th ACM International Conference on Web Search and Data Mining,</booktitle>
<pages>35--44</pages>
<location>Hong Kong, China.</location>
<contexts>
<context position="2606" citStr="Teevan et al., 2011" startWordPosition="390" endWordPosition="393">er on Twitter means that the user receives all the tweets from those she follows. Common practice of responding to a tweet has evolved into a welldefined markup culture (e.g., RT stands for retweet, ‘@’ followed by an identifier indicates the user). The strict limit of 140 characters allows for quick and immediate communication in real time, whilst enforcing brevity. Moreover, the retweet mechanism empowers users to spread information of their choice beyond the reach of their original followers. Twitter has become a prominent broadcasting medium, taking priority over traditional news sources (Teevan et al., 2011). Shared information through this channel spreads faster than would have been possible with conventional news sites or RSS feeds and can reach a far wider population base. However, the proliferation of user-generated content comes at a price. Over 340 millions of tweets are being generated daily amounting to thousands of tweets per second!2 Twitter’s own search engine handles more than 1.6 billion search queries per day.3 This enormous amount of data renders it infeasible to browse the entire Twitter network; even if this was possible, it would be extremely difficult for users to find informat</context>
</contexts>
<marker>Teevan, Ramage, Morris, 2011</marker>
<rawString>Jaime Teevan, Daniel Ramage, and Meredith Ringel Morris. 2011. #Twittersearch: a comparison of microblog search and web search. In Proceedings of the 4th ACM International Conference on Web Search and Data Mining, pages 35–44, Hong Kong, China.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ibrahim Uysal</author>
<author>W Bruce Croft</author>
</authors>
<title>User oriented tweet ranking: a filtering approach to microblogs.</title>
<date>2011</date>
<booktitle>In Proceedings of the 20th ACM International Conference on Information and Knowledge Management,</booktitle>
<pages>2261--2264</pages>
<location>Glasgow, Scotland.</location>
<contexts>
<context position="8125" citStr="Uysal and Croft (2011)" startWordPosition="1231" endWordPosition="1234">11a; 2011b; 2011c) recommend external websites linked to Twitter. Their method incorporates user profile modeling and temporal recency, but they do not utilize the social networks among users. R. et al. (2009) propose a diffusion-based recommendation framework especially for tweets representing critical events by constructing a diffusion graph. Hong et al. (2011) recommend tweets based on popularity related features. Ramage et al. (2010) investigate which topics users are interested in following a Labeled-LDA approach, by deciding whether a user is in the followee list of a given user or not. Uysal and Croft (2011) estimate the likelihood of a tweet being reposted from a user-centric perspective. Our work also develops a tweet recommendation system. Our model exploits the information provided by the tweets and the underlying social networks in a unified co-ranking framework. Although 517 these sources have been previously used to search or recommend tweets, our model considers them simultaneously and produces a ranking that is informed by both. Furthermore, we argue that the graph-theoretic framework upon which co-ranking operates is beneficial as it allows to incorporate personalization (we provide use</context>
</contexts>
<marker>Uysal, Croft, 2011</marker>
<rawString>Ibrahim Uysal and W. Bruce Croft. 2011. User oriented tweet ranking: a filtering approach to microblogs. In Proceedings of the 20th ACM International Conference on Information and Knowledge Management, pages 2261–2264, Glasgow, Scotland.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Xiaojun Wan</author>
<author>Jianwu Yang</author>
<author>Jianguo Xiao</author>
</authors>
<title>Single document summarization with document expansion.</title>
<date>2007</date>
<booktitle>In Proceedings of the 22nd Conference on Artificial Intelligence,</booktitle>
<pages>931--936</pages>
<location>Vancouver, British Columbia.</location>
<contexts>
<context position="15276" citStr="Wan et al., 2007" startWordPosition="2479" endWordPosition="2482">mple random walk, it is assumed that all nodes in the matrix M are equi-probable before the walk. In contrast, we use the topic preference vector as a prior on M. Let Diag(r) denote a diagonal matrix whose eigenvalue is vector r. Then m becomes: m = (1− µ)[Diag(r)M]Tm +µr = (1− µ)[Diag(tDT)M]Tm+µtDT (4) Diversity We would also like our output to be diverse without redundant information. Unfortunately, equation (4) will have the opposite effect, as it assigns high scores to closely connected node communities. A greedy algorithm such as Maximum Marginal Relevance (Carbonell and Goldstein, 1998; Wan et al., 2007; Wan et al., 2010) may achieve diversity by iteratively selecting the most prestigious or popular vertex and then penalizing the vertices “covered” by those that have been already selected. Rather than adopting a greedy vertex selection method, we follow DivRank (Mei et al., 2010) a recently proposed algorithm that balances popularity and diversity in ranking, based on a time-variant random walk. In contrast to PageRank, DivRank assumes that the transition probabilities change over time. Moreover, it is assumed that the transition probability from one state to another is reinforced by the num</context>
</contexts>
<marker>Wan, Yang, Xiao, 2007</marker>
<rawString>Xiaojun Wan, Jianwu Yang, and Jianguo Xiao. 2007. Single document summarization with document expansion. In Proceedings of the 22nd Conference on Artificial Intelligence, pages 931–936, Vancouver, British Columbia.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Xiaojun Wan</author>
<author>Huiying Li</author>
<author>Jianguo Xiao</author>
</authors>
<title>Cross-language document summarization based on machine translation quality prediction.</title>
<date>2010</date>
<booktitle>In Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics,</booktitle>
<pages>917--926</pages>
<location>Uppsala,</location>
<contexts>
<context position="15295" citStr="Wan et al., 2010" startWordPosition="2483" endWordPosition="2486">it is assumed that all nodes in the matrix M are equi-probable before the walk. In contrast, we use the topic preference vector as a prior on M. Let Diag(r) denote a diagonal matrix whose eigenvalue is vector r. Then m becomes: m = (1− µ)[Diag(r)M]Tm +µr = (1− µ)[Diag(tDT)M]Tm+µtDT (4) Diversity We would also like our output to be diverse without redundant information. Unfortunately, equation (4) will have the opposite effect, as it assigns high scores to closely connected node communities. A greedy algorithm such as Maximum Marginal Relevance (Carbonell and Goldstein, 1998; Wan et al., 2007; Wan et al., 2010) may achieve diversity by iteratively selecting the most prestigious or popular vertex and then penalizing the vertices “covered” by those that have been already selected. Rather than adopting a greedy vertex selection method, we follow DivRank (Mei et al., 2010) a recently proposed algorithm that balances popularity and diversity in ranking, based on a time-variant random walk. In contrast to PageRank, DivRank assumes that the transition probabilities change over time. Moreover, it is assumed that the transition probability from one state to another is reinforced by the number of previous vis</context>
</contexts>
<marker>Wan, Li, Xiao, 2010</marker>
<rawString>Xiaojun Wan, Huiying Li, and Jianguo Xiao. 2010. Cross-language document summarization based on machine translation quality prediction. In Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics, pages 917–926, Uppsala, Sweden.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Rui Yan</author>
<author>Jian-Yun Nie</author>
<author>Xiaoming Li</author>
</authors>
<title>Summarize what you are interested in: An optimization framework for interactive personalized summarization.</title>
<date>2011</date>
<booktitle>In Proceedings of the 2011 Conference on Empirical Methods in Natural Language Processing,</booktitle>
<pages>1342--1351</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<contexts>
<context position="4453" citStr="Yan et al., 2011" startWordPosition="652" endWordPosition="655"> to those of interest to the user, or by discovering intriguing content outside the user’s following network. The tweet recommendation task is challenging for several reasons. Firstly, Twitter does not merely consist of a set of tweets. Rather, it contains many latent networks including the following relationships among users and the retweeting linkage (which indicates information diffusion). Secondly, the recommendations ought to be of interest to the user and likely to to attract user response (e.g., to be retweeted). Thirdly, recommendations should be personalized (Cho and Schonfeld, 2007; Yan et al., 2011), avoid redundancy, and demonstrate diversity. In this paper we present a graph-theoretic approach to tweet recommendation that attempts to address these challenges. Our recommender operates over a heterogeneous network that connects the users (or authors) and the tweets they produce. The user network represents links among authors based on their following behavior, whereas the tweet network connects tweets based on content similarity. A third bipartite graph ties the two together. Tweet and author entities in this network are ranked simultaneously following a co-ranking algorithm (Zhou et al.</context>
</contexts>
<marker>Yan, Nie, Li, 2011</marker>
<rawString>Rui Yan, Jian-Yun Nie, and Xiaoming Li. 2011. Summarize what you are interested in: An optimization framework for interactive personalized summarization. In Proceedings of the 2011 Conference on Empirical Methods in Natural Language Processing, pages 1342–1351. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ding Zhou</author>
<author>Sergey A Orshanskiy</author>
<author>Hongyuan Zha</author>
<author>C Lee Giles</author>
</authors>
<title>Co-ranking authors and documents in a heterogeneous network.</title>
<date>2007</date>
<booktitle>In Proceedings of the 7th IEEE International Conference on Data Mining,</booktitle>
<pages>739--744</pages>
<publisher>IEEE.</publisher>
<contexts>
<context position="5060" citStr="Zhou et al., 2007" startWordPosition="741" endWordPosition="744"> al., 2011), avoid redundancy, and demonstrate diversity. In this paper we present a graph-theoretic approach to tweet recommendation that attempts to address these challenges. Our recommender operates over a heterogeneous network that connects the users (or authors) and the tweets they produce. The user network represents links among authors based on their following behavior, whereas the tweet network connects tweets based on content similarity. A third bipartite graph ties the two together. Tweet and author entities in this network are ranked simultaneously following a co-ranking algorithm (Zhou et al., 2007). The main intuition behind co-ranking is that there is a mutually reinforcing relationship between authors and tweets that could be reflected in the rankings. Tweets are important if they are related to other important tweets and authored by important users who in turn are related to other important users. The model exploits this mutually reinforcing relationship between tweets and their authors and couples two random walks, one on the tweet graph and one on the author graph, into a combined one. Rather than creating a global ranking over all tweets in a collection, we extend this framework t</context>
<context position="8988" citStr="Zhou et al., 2007" startWordPosition="1362" endWordPosition="1365">o-ranking framework. Although 517 these sources have been previously used to search or recommend tweets, our model considers them simultaneously and produces a ranking that is informed by both. Furthermore, we argue that the graph-theoretic framework upon which co-ranking operates is beneficial as it allows to incorporate personalization (we provide user-specific rankings) and diversity (the ranking is optimized so as to avoid redundancy). The co-ranking framework has been initially developed for measuring scientific impact and modeling the relationship between authors and their publications (Zhou et al., 2007). However, the adaptation of this framework to the tweet recommendation task is novel to our knowledge. 3 Tweet Recommendation Framework Our method operates over a heterogeneous network that connects three graphs representing the tweets, their authors and the relationships between them. Let G denote the heterogeneous graph with nodes V and edges E, and G = (V,E) = (VM UVU,EM UEU U EMU). G is divided into three subgraphs, GM, GU and GMU. GM = (VM,EM) is a weighted undirected graph representing the tweets and their relationships. Let VM = {mi|mi E VM} denote a collection of |VM| tweets and EM th</context>
</contexts>
<marker>Zhou, Orshanskiy, Zha, Giles, 2007</marker>
<rawString>Ding Zhou, Sergey A. Orshanskiy, Hongyuan Zha, and C. Lee Giles. 2007. Co-ranking authors and documents in a heterogeneous network. In Proceedings of the 7th IEEE International Conference on Data Mining, pages 739–744. IEEE.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>