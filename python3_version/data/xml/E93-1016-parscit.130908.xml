<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<title confidence="0.991355">
Parsing with polymorphism *
</title>
<author confidence="0.773591">
Martin Emms,
The CIS
Leopoldstr 139
</author>
<sectionHeader confidence="0.942915333333333" genericHeader="abstract">
8000 Munchen 40
Germany
Abstract
</sectionHeader>
<bodyText confidence="0.999744588235294">
Certain phenomena resist coverage within
the Lambek Calculus, such as scope-
ambiguity and non-peripheral extraction. I
have argued in previous work that an ex-
tension called Polymorphic Lambek Calcu-
lus (PLC), which adds variables and their
universal quantification, covers these phe-
nomena. However, a major problem is the
absence of a known decision procedure for
PLC grammars. This paper proposes a de-
cision procedure which covers a subset of
all the possible PLC grammars, a subset
which, however, includes the PLC gram-
mars with wide coverage. The decision pro-
cedure is shown to be terminating, and cor-
rect, and a Prolog implementation of it is
described.
</bodyText>
<sectionHeader confidence="0.977974" genericHeader="method">
1 The Lambek Calculus
</sectionHeader>
<bodyText confidence="0.995396875">
To begin, I give a brief description of Lambek cate-
gorial grammar [Lambek, 1958]. The categories are
built up from basic categories, using the binary cat-
egorial connectives and `V. 1 Then a set of &apos;cat-
egorial rules&apos; involving these categories is defined, of
the form: xl, ...x, = y (n &gt; 1), xi and y being cat-
egories. A distinctive feature is that the set of rules
is defined inductively. Using a term adopted from
</bodyText>
<footnote confidence="0.830354">
*This work was done whilst the author was in receipt
of a six month scholarship from the German Academic
Exchange Service, whose support is gratefully acknowl-
edged
&apos;Lambek also considered a third connective, the
&apos;product&apos;. I, in common with several authors, use the
name Lambek calculus to refer to what is really the
product-free calculus
</footnote>
<bodyText confidence="0.93339">
logic, sequent, in place of &apos;categorial rule&apos;, Lambek
presented this inductive definition as a close variant
of Gentzen&apos;s sequent calculus for propositional logic.
Lambek&apos;s calculus, L(M), is given below:
</bodyText>
<equation confidence="0.99434825">
x
U,y,V w
V w
\L
U,T, y\x, V w
T,x y (\R) z,T,y
/13. \R
T T y\x
</equation>
<bodyText confidence="0.999404916666667">
Here U,T,V are sequences of categories (U,V pos-
sibly empty), w, x, y are categories. In the two
premise rules, the T = x premise is called the minor
premise. The fact that L(M)derives r, I will notate
as L(M)l—r. With regard to the names of the rules,
and &apos;It&apos; stand for left and right. For example,
( \L) (resp. (\R)), derives sequents with &apos;\&apos; on the
left (resp. on the right) of the sequent arrow,
For various purposes it is convenient to consider the
addition of the &apos;Cut&apos; rule, given below (in which x
is referred to as the Cut formula, and T = x as the
minor premise):
</bodyText>
<equation confidence="0.749209">
U, x, V = w
U,T,V w
</equation>
<bodyText confidence="0.834337">
Lambek [1958] establishes that L(/,\)+ Cut F-r if
L(M)I—r (Cut elimination), and that LUMP r is de-
cidable.
</bodyText>
<equation confidence="0.942487666666667">
U, y/x, T,V w
T x U,y,
T x
/L
T x
Cut
</equation>
<page confidence="0.985038">
120
</page>
<bodyText confidence="0.990114380952381">
The proof of the decidability of IP ,\)H r proceeds
as follows. First one reads the rules of L(M) &apos;back-
wards&apos;, as a set of rewrites, growing a tree at its
leaves &apos;up the page&apos;. Call the trees grown this way
deduction trees. L(M)I—r if r is the root of a de-
duction tree whose leaves are all axioms. It remains
to note that there are only finitely many deduction
trees for a given sequent: a leaf can be grown in
at most a finite number of different ways, and the
added daughters have always a diminished complex-
ity (complexity measured as number of occurrences
of connectives). This decision procedure is improved
upon somewhat if the rules of the calculus are ex-
pressed as a Prolog data base of conditionals concern-
ing a binary predicate seq, holding between a list of
categories and a single category. For later reference,
let Lam stand for some such Prolog implementation
of L(M).
A grammar, G, in this perspective is an assignment
of categories to words. Reading G E y as &apos;accord-
ing to G, $ has category y&apos;, I will say G E y, if (i)
s is lexically assigned y, or (ii) $ = Si s,•,(n &gt; 1),
G—s E xi, and L(/ • \ )I-- xi , . xn = Y.
For any Lambek grammar, G, the question
whether GJ—sExis decidable. This is got by
combining Cut elimination with the decidability of
I(/A) I--r. Consider deciding whether 0—.91.92 E
z, where Si and s2 are lexically assigned the cat-
egories x and y. One can first check whether
L(M)Hx, y z, which is decidable. If L(/A)1/-
x, y z, then one should try a `non-flat&apos; categori-
sation possibility. That is, one should also con-
sider derivable categorisations of the subexpressions,
namely x&apos; and y&apos; such that L(M)I--- x = x&apos;, y ,
and check whether they may be combined to give
z. Here lurks a problem, because there are infinitely
many x&apos; and y&apos; such that L(/, \ )1-- x x&apos;, y =V.
The way out of this problem is the relationship be-
tween the `non-flat&apos; categorisation strategy and Cut-
based proofs, to illustrate which, note that if there
were derivable categorisations, x&apos; and V of the subex-
pressions, which combined to give z, then L&amp;quot;+ Cut
</bodyText>
<equation confidence="0.912999">
l—x, y = z:
(1)
y V xi, V z
x&apos; xs, y x&apos;
y z
</equation>
<bodyText confidence="0.996499846153846">
So parsing with an IPA) grammar comes to decid-
ing the derivability of xi, , xn s, where xi are
the categories of the lexical items.
This Lambek style of grammar is associated also
with a certain method for assigning meanings to
strings. The idea is that a proof, 7, of L(M) can
mapped into a semantic operation, G. So, if there is
a proof, 7, of x1, , x =y, then a sequence of
expressions with categories xi, ..., x. and meanings
ml, .,m, has a possible meaning g(mi, • • • , mn)•
As to which operation, G, goes with which proof, 7,
this is defined by a term-associated calculus. Repre-
sentative parts of the (extensionally) term associated
</bodyText>
<equation confidence="0.9304316">
calculus, LVA), are given below:
U,y : a0),V = w : c
U,y/x : a,T,V
/R
T :
</equation>
<bodyText confidence="0.9958856">
There are corresponding ( \L) and ( \R) rules.
LVA)derives sequents where in place of categories
there are category:term pairs. If we start with an
TPA) proof of r, and add variables to the antecedent
categories of r, there is a unique way to add terms
to the rest of the proof so as to get a proof of L(e/
When this is done the term, a, associated with the
succedent of r, represents the semantic operation.
The above mentioned decision procedure can be em-
bellished to develop trees featuring semantic terms,
some of them unknown, together with an evolving
set of equations in these unknowns. When a proof is
discovered, the term for that proof can be obtained
by solving the set of equations.
There is a semantic question to be asked about
the acceptability of parsing simply by search through
IPA) proofs: are all term-associated proofs for a
sequent in L(/,\)-F Cut equivalent to some term-
associated proof in I(&amp;quot;A), and vice-versa ? The an-
swer is yes [Hendriks, 1989], [Moortgat, 19891.
</bodyText>
<sectionHeader confidence="0.993153" genericHeader="method">
2 Polymorphism
</sectionHeader>
<bodyText confidence="0.978327789473684">
Despite the great simplicity of Lambek grammars,
a surprising amount of coverage is possible [Moort-
gat, 1988]. Two aspects of this are embryonic ac-
counts of extraction, and scope-ambiguity, the lat-
ter arising from the fact that there may be more
than one proof of a given sequent. However, the
accounts possible have remained only partial. Non-
peripheral extraction remainsd unaccounted for (eg.
the (man)i who Dave told ei to leave) and only the
scope-ambiguities of peripheral quantifiers are cov-
ered (as in the structure QNP TV QNP). A simple
account of cross-categorial coordination has also of-
ten been cited as an attractive feature of Lambek
grammars ([Moortgat, 1988]). However, the analy-
ses are never in a purely Lambek grammar. Belong-
ing to Lambek grammar proper is a part assigning
some category to the strings to be coordinated, and
then lying without Lambek grammar, a coordination
schema, such as x, and, x x.
</bodyText>
<equation confidence="0.946634">
Cut
Cut
T x :
/L
W :c
</equation>
<page confidence="0.982543">
121
</page>
<bodyText confidence="0.997712">
To overcome these deficits in coverage, I have
proposed a polymorphic extension of the calculus.
Added to the categorial vocabulary are category
variables and their universal quantification, allowing
such categories as: X, X/X, VX.X/(X\np). To Li&amp;quot;)
are added left and right rules for V, to give what I will
call OA ,v)(I given straightaway the term-associated
calculus):
</bodyText>
<equation confidence="0.99862275">
(YL) U, x[y/Z] a(a), V w : (1)
U,VZ.x : a, V = w : (I)
(VR) T x :
T VZ.x :
</equation>
<bodyText confidence="0.997832142857143">
Notation: the terms are drawn from the language
of 2nd Order Polymorphic A-calculus [Girard, 1972],
[Reynolds, 1974]. Here, terms carry their type as
a superscript, and one can have variables in these
types (eg. Aer.e), one can abstract over such vari-
able types, deriving terms of quantified type (eg.
Air.Aer.er, of type V7r(7r-r)), and terms of quanti-
fied type can be applied to types (eg. A7r.Aer.e(t),
of type (t--90). In the (n) rule above, the type, a,
that a is applied to, is the type that corresponds to
the category, y, that is being substituted for the cat-
egory variable, Z. 2 An equivalent slight variant on
L(/&apos; &apos;&amp;quot;9 takes as axioms only those x x sequents
where x is basic or a variable, something I will call
</bodyText>
<equation confidence="0.6276995">
(/&apos;\&apos;&apos;I) It •
Lo . is easy to show L0(/&apos;\ if LUAY)l-r
</equation>
<bodyText confidence="0.998354769230769">
(see [Emms and Leiss, forthcoming]).
By assigning conjunctions to VX.((X \X)/X), nega-
tion to VX.X/X, and quantifiers to VX.X/(X\np)
and VX.X \(X/np), one obtains coverage of cross-
categorial coordination and negation, as well as a
comprehensive account of quantifier scope ambiguity
[Emms, 1989], [Emms, 1991]. Assigning relativisers
to VX.((cn\cn)/(s\ X)/(X/np)), non-peripheral ex-
traction can also be handled [Emms, 1992]. The
meanings that go along with these categories are as
follows. Where G is Q, J or Ar, let LG vary over the
conventional meanings of quantifiers, junctions and
negation, with Lp the polymorphic version.
</bodyText>
<equation confidence="0.9999368">
£p(t) = EG
Q(a--b)(Pa&apos;a-46)(e) = Q(6)(ye -4 y x)
J(a-b)(Pr+b)(Pr&amp;quot;)(xa) = J(b)(Pix)(P2x)
N(b)(Px)
who(a)(11-40)(P21-4t)(Qe-t)(Ze) = P2(Pix) A Qx
</equation>
<bodyText confidence="0.9997215">
I will give two illustrations. The proof below would
allow the embedded quantifier, every man, to be as-
signed a de-re interpretation in John believes every
man walks. Note (s\np)\((s\np)/s) = X.
&apos;The (VR) given is a cut-down version of the &apos;official&apos;
version, which allows a change of bound variable
</bodyText>
<equation confidence="0.962772142857143">
np, s\np TC
\
np, (s\np)/s, X = s s\np X\np
/L
np, (s\np)/s, TC/(f\np) s\np = s
VL
np, (s\np)/s, VX.X/(X\np), s\np = s
</equation>
<bodyText confidence="0.989075">
Now assuming j, ôel, em and walk were the terms
associated with the antecedents of the root sequent,
the term for the proof is:
</bodyText>
<equation confidence="0.707888571428572">
emp(tet, et)(Ax f Ay[f (walk(x))(y)])(bel)(j)
We obtain as a possible denotation for John believes
every man walks:
emp(tet, et)(x, f,y 1-4 f(walk(x))(y))(bel)(j)
= emp(et)(x,y 1-4 bel(walk(x))(y))(j)
= emp(t)(x bel(walk(x))(j))
= emG(x bel(walk(x))(j))
</equation>
<bodyText confidence="0.998241333333333">
As an illustration of non-peripheral extraction, the
proof below allows the string who John told to go to
be recognised as a postmodifier of a common noun:
</bodyText>
<equation confidence="0.983113125">
s/vpc, vpc s
\R
r vpc = s\X /L np, V, np, vpc s
L___ /
(cn\cn)/(s\T), vpc cn\cn np, V * X/np
/L
VL
VX.((cn\cn)/(s\X)/(X/np)), np, V, vpc = cn\cn
</equation>
<bodyText confidence="0.966594142857143">
Here r = cn\cn = cn\cn, V = ((s\np)/vpc)/np, TC
= s/vpc. Assuming who, j, told, and go were asso-
ciated with the antecedents of the root, the term for
the proof is:
who((et,t))(AxAy[told(x)(y)(j)])(A f[f(go)])
We obtain for the denotation of the string who John
told to go:
</bodyText>
<equation confidence="0.990990666666667">
who((et,t))(x, y told(x)(y)(j))(f Ago))
= Q, z ((f f(go))((y told(z)(y)(j))) A Q(z))
= Q, z 1-4 (told(z)(go)(j) A Q(z))
</equation>
<bodyText confidence="0.9999444">
For the further discussion of the analyses within
an L(&amp;quot;\&amp;quot;&apos;) grammar that cover a significant range of
data, see the earlier references. I turn now to the
main problem which this paper addresses: is there
an automatic procedure able to find these analyses?
</bodyText>
<subsectionHeader confidence="0.996188">
2.1 Cut Elimination for LUAY)
</subsectionHeader>
<bodyText confidence="0.999964555555555">
We want a procedure to decide whether G E x,
where G is an L(&amp;quot;AY) grammar. As with L(&amp;quot;) gram-
mars, this problem reduces to deciding LU, r if
it can be shown both that Cut can be eliminated,
and without the loss of any significant semantic di-
versity. This has recently been shown ([Emms and
Leiss, forthcoming]). I make some remarks on the
proof. The strategy of the proof of Cut elimination
for L(/,‘) starts from the observation that a proof, 7,
</bodyText>
<equation confidence="0.646910666666667">
[Z is not free
in T]
(cn\cn)/(s\TC)/(TC/np), np, V, vpc = cn\cn
</equation>
<page confidence="0.958556">
122
</page>
<bodyText confidence="0.996211315789474">
using Cut must contain at least one use of Cut which
dominates no further uses of Cut — a &apos;topmost&apos; use
of Cut. Suppose this use of Cut derives r. Then
one defines two things: a degree of the Cut leading
to r, and a transformation taking the proof of r to
an alternative proof of r, such that either the trans-
formed proof of r is Cut-free, or it is a proof with
2 or less cuts of lesser degree. After a finite number
of iterations of the transformation, one must have a
cut free proof.
In the proof for OM, the degree of a Cut infer-
ence is simply the sum of the numbers of connectives
in the two premises. This cannot be the degree for
For example, a cases to be considered is
where one has a cut of the kind shown in (2). The
natural rewrite is (3) (that T Z] is provable
relies on the fact that Z is not free in T and substi-
tution for free variables preserves derivability [Emms
and Leiss, forthcoming])
</bodyText>
<equation confidence="0.9461225">
(2) T y VR U,y[a1.4V w
VL
T U,VZ.y,V w
Cut
U,T,V w
T = y[alZ] U,y[a121,V w
Cut
U,T,V w
</equation>
<bodyText confidence="0.999947">
With degree defined by number of connectives, we
need that the number of connectives in y[a/Z] is
strictly less than the number in VZ.y, and that is
often false. The proof goes through instead by tak-
ing the degree of a cut to be the sum of sizes of the
proofs of its two premises, where the size is the num-
ber of nodes in the proof. 3
</bodyText>
<subsectionHeader confidence="0.975299">
2.2 Difficulties in deciding L(/A,v)I—T = x
</subsectionHeader>
<bodyText confidence="0.98180755">
So the problem reduces to one of L&amp;quot;&amp;quot;&apos;) derivabil-
ity. Whether L(1, \ ,v) derivability is decidable I do
not know. The nearest to an answer to this that
the logical literature comes is a result that quanti-
fied intuitionistic propositional logic is undecidable
[Gabbay, 1974]. The difference between &apos;(AY) and
logic of this result is the presence of the further con-
nectives (V, A), and the availability of all structural
rules. I will describe below some of the problems that
arise when some natural lines of thought towards a
decision procedure are pursued.
One might start by considering the logic that is
\)+ (VR). This can be argued to be decidable
in the same fashion as L(M): read (VR) backwards
as a rewrite, adding another way to build deduction
trees. As for OA) a sequent has only finitely many
deduction trees, and provability is equivalent to the
existence of a deduction tree with axiom leaves.
3In fact nodes above axiom form sequents are not
counted in the size, and the proof relies on changes of
bound variable and substitutions not changing the size
of 14,/,‘,Y) proofs
However, when (VL) is added this simple argument
will not work: if (VL) is read backwards as a further
clatr=,- in the definition of deduction trees, then a
leaf containing an antecedent V could be rewritten
infinitely many different, ways. A natural move at
this point is to redefine deduction trees, reading the
(VL) rule as an instruction to substitute an unknown.
One hopes then that: (i) the set of so-defined deduc-
tion trees for a given sequent, r, is finite (ii) there is
some easy to check property, P, of these trees such
that the existence of a P-tree in the set would be
equivalent to t(I, ,v)l—r. Now, if we were considering
the combination of first-order quantification with the
Lambek calculus, this strategy works, but whether it
works for L(/,‘,v) remains unknown.
I will go through the application of the strategy in
the first-order case to highlight why L(/A,v) does not
yield so easily. The first-order quantification plus the
Lambek calculus, I will call L(/A,v1). It is the end-
point of a certain line of thought concerning agree-
ment phenomena. One first reanalyses basic cate-
gories, such as s and np, as being built up by the
application of a predicate to some arguments, giving
categories such as np(3rd,sing), s(fin). It is natural
then to consider quantification over the first order
positions, such as Vp. s(fin)\ np(p,p1), which could
be used when, as in English, the plural forms of a
verb are not distinguished according to person. Now
LUA,v1) is decidable, which can be shown by adapt-
ing an argument that shows that when the contrac-
tion rule is dropped from classical predicate logic,
it becomes decidable [Mey, 1992]. Deduction trees
for a sequent, r, of L(&amp;quot;\&apos;) are defined so that the
rewrite associated with the (VL) rule substitutes an
unknown. There are then only finitely many deduc-
tion trees (the absence of the structural rule of con-
traction is essential here). Now, if L(&amp;quot;AY1)hr, and r
has a complex first order term, one can be sure that
this term is present in an axiom, because no rules
build complexity in the places in categories where a
bound variable can occur. For this reason, the so-
defined deduction trees for r cover all the possible
patterns for a proof of r. Provability is therefore
equivalent to the existence of a substitution making
one of the deduction trees have axiom leaves, and
this can be checked using resolution.
This situation does not wholly carry over to
[PAY). The &apos;substitute an unknown&apos; rewrite reading
of (VL) defines only finitely many deduction trees for
a sequent, r. However, these so-defined deduction
trees for r do not cover all the possible patterns for
a proof of r: unlike L(/,\ ,v1), there are rules that
build complexity in the places in categories where a
bound variable can occur. So, for example, t.(/,\,v)1--
np, VX.X/(X\np), (s\np)\np, but none of the de-
duction trees represents the pattern of the proof. So
to check for the existence of a deduction tree (as
above defined) that by a substitution would have ax-
</bodyText>
<page confidence="0.995276">
123
</page>
<bodyText confidence="0.999964851851852">
iom leaves is not sufficient to decide derivability. It
seems we must defined the looked for property, P,
of deduction trees recursively, so that a tree has P
if (1) the leaves by a substitution become axioms, or
(2) by hypothesising a connective in one of the un-
knowns, and extending the tree by rewrites licensed
by this connective, one obtains a P-tree.
It would amount to the same thing if the definition
of deduction tree was extended (by hypothesising a
connective in an unknown), and the looked for prop-
erty, F, kept simple: a tree whose leaves by a substi-
tution become axioms. However, the extended def-
inition of deduction tree now allows infinitely many
trees for a sequent. This may seem surprising, but is
seen one considers a leaf such as T X. One can hy-
pothesis X = Y/Z, extend the deduction tree by the
rewrite associated with a slash Right rule, obtain-
ing once again a leaf with a succedent occurrence of
an unknown. By imposing a control strategy which
would systematically consider all deduction trees of
height h, before deduction trees of height h + 1, one
can be sure that any provable sequent would sooner
or later be accepted by the decision procedure (be-
cause its provability would entail the existence of a
deduction tree of a certain finite height). However,
there is no reason to expect the procedure to termi-
nate when working on an underivable sequent.4
</bodyText>
<sectionHeader confidence="0.97172" genericHeader="method">
3 A partial decision procedure for
</sectionHeader>
<bodyText confidence="0.991530153846154">
LUA&apos;v)
While there are problems in the way of a general de-
cision procedure for LU, I claim a partial decision
procedure for L(M.v) is possible. Partial in the sense
of covering only a certain class of sequents, but one
sufficiently large, I claim, to cover all linguistically
relevant cases. The procedure will be a partial deci-
sion procedure for &apos;(tAX) via being a partial decision
procedure for
To describe the class of sequents that the proce-
dure applies to I need definitions of the &apos;polarity&apos; of
an occurrence of a category. Let the category polarity
of an occurrence of x in a category y (pol(x, y)) be:
</bodyText>
<equation confidence="0.444177">
pol(x, x) = +
if x occurs in y, pol(x , y/ z) = pol(x,V Z.y) =
pol(x, y) = opp(pol(x , z / y))
Here opp(+) = opp(—) = +. The sequent polarity
</equation>
<bodyText confidence="0.84112725">
of an occurrence of x in y in a sequent r is the same
as the category polarity if y is an antecedent, and
otherwise it is opposite. I use &apos;polarity&apos; as short for
`sequent polarity&apos;. An example:
</bodyText>
<listItem confidence="0.594529">
(4) s\(V- X.X/(X\np)) s\(V+X.X/(X\np))
</listItem>
<footnote confidence="0.556381">
4 I have found non-terminating consecutively bounded
depth first search to happen on the Prolog implementa-
tion of the calculus that these paragraphs suggest
</footnote>
<bodyText confidence="0.998755">
The decision procedure to be described is applica-
ble to sequents whose negative occurrences of poly-
morphic categories are unlimited, but whose positive
polymorphic categories are drawn from:
(5) VX.X/(X\np), VX.X\(X/np),
VX.X/X,
VX.((cn \ cn)/(s \ X)/(X/np)
VX.((X\X)/X),
I will now make three observations concerning
proofs in L(0/&apos; &apos;‘1), leading up to the definition of the
procedure.
Observation One In the categories in (5) there is
exactly one positive and one or two negative occur-
rence of the bound variable. This leads to the pre-
dictable occurrence of certain sequents. To help de-
scribe these I need to define some more terminology.
An initial labelling of a proof is the assignment of
unique integers to some of the categories in some se-
quent of the proof. A completed labelling is got from
an initial labelling by a certain kind of propagation
up the tree: a label is passed up when a labelled
category is simply copied upward, and in a (VI) in-
ference the label is distributed to the occurrences of
the categories chosen for the variable. In other infer-
ences where a labelled category is active, the label is
not passed up. For example:
</bodyText>
<listItem confidence="0.355119">
(6) Si s s si np np s s
</listItem>
<equation confidence="0.683642285714286">
/L \L
Si/SI, s s np, s\np s
VL R
V2 X.X/X, s s s\np s\np
/L
V2X.X/X, s/2(s\np), s\np = s
I will say U, ai , V = w is &apos;positive for Vi&apos; if these-
</equation>
<bodyText confidence="0.9986199">
-quent occurs in a labelled LWA&apos;v) proof and the label
on ai has been passed from a labelled occurrence of
Vi. Correspondingly, call a sequent T ai &apos;negative
for Vi&apos;. Now note that in the above proof, the Vi in
the root led to one Vt. and one Vj branch. This is
no accident: one can predict the existence of such
branches in any proof of a sequent with a positive
occurrence of ViX.X/X. To see this, let me first de-
fine a notion reflecting how &apos;embedded&apos; a category
is:
</bodyText>
<equation confidence="0.84024125">
path(a, a) = 0.
Where a occurs in x, path(a, / y) = (/ ,path(a, x)),
path(a, y/ x) = (/ ,path(a, x)), path(a,VZ.x) =
(V, path(a, x))
</equation>
<bodyText confidence="0.923584571428571">
With the exception of bound variable, if a cate-
gory occurs with a path (C,p), and a polarity 5,
in the conclusion of an inference, then it occurs in
the premises of that inference with the same po-
larity, and with either the same path or with path
p. Also, in leaves of a proof in L/&amp;quot;, categories
only occur with zero path. Therefore, if we have
</bodyText>
<page confidence="0.993876">
124
</page>
<bodyText confidence="0.999856956521739">
a proof of a sequent with a positive occurrence of
ViX.X/X and with non-zero path, then there must
occur higher in the proof, a sequent with ViX.X/X
occurring again positively and this time with with
zero-path. In other words there must occur a node U,
ViX.XIX, V = w. Then if there were no (VL) infer-
ence in this proof introducing the category ViX.X/X,
the category ViX.X/X would be present in the leaves
of the proof. Because the leaves can only feature ba-
sic categories, there must be a (VL) inference, and
therefore a node U&apos;, ai/ai, V&apos; w&apos;. Reasoning in a
similar vein concerning the category a2/a, we can be
sure there must be a (/L) inference, with premises
U&amp;quot;, ai, V&amp;quot; = ty&amp;quot; and T&amp;quot; ai. These are Vt and
Vt sequents.
Provable sequents having a positive occurrence of
one of the polymorphic categories from (5), labelled
with i, will generate an L(I&apos;N&apos;v) proof such that cor-
responding to each of the positive and negative oc-
currences of the bound variable, there are (distinct)
Vt and V branches.
Observation Two We just argued that in any proof
of a sequent with a positive occurrence of quantified
category, there must occur a node at which the quan-
tifier is introduced by a (VL) inference, and that for
the categories in (5), Vt sequents must appear above
this. For each of the VI sequents, the minimum num-
ber of steps there can be between the conclusion of
the (VL) step and the Vt sequent is the length of
the paths to the associated occurrence of the bound
variable in the quantified category. Proofs featur-
ing such minimum intervals between the quantified
category and the associated Vt sequents I will call
orderly. One can ask the question whether whenever
there is a proof of a sequent whose positive quanti-
fiers are drawn from the list in (5), there is also an
(equivalent) orderly proof. And the answer is that
there is.
Proof sketch We want to show that for any cate-
gory x in (5), for each of the occurrence of a variable
in it, that if there is a proof of U,x,V w, then
there is a proof in which the steps leading from the
lowest occurrence of the relevant Vt sequent to the
(VL) inference correspond to the path to the bound
variable in x.
Let me define the spine of a category as: sp(x I y) =
</bodyText>
<equation confidence="0.923836">
(I ,sp(x)), sp(VZ.x) = (V , sp(x)), sp(x) = 0, where
</equation>
<bodyText confidence="0.984431769230769">
x is basic.
We will show first for categories such that sp(x) =
(V, slash), and sp(x) = (slash&apos;, slash2), that when
there is a proof such that the left inferences for the
first two elements of the spine are separated by n
steps there must be an equivalent proof where they
are separated by n 1 steps.
One considers all the possibilities for the last in-
tervening step, 1, and shows that the step associ-
ated with the first element of the spine could have
been done before 1, thus lowering by 1 the number
of steps intervening between the first two elements
of the spine. There is not the space to show all the
cases. (7), (8) and (9, (10) are representative exam-
ples for sp(w)= (V, sp(x)). Note that in (9) and (10)
there are side-conditions to the (VR) inferences. Sat-
isfaction of these for (9) entails satisfaction for (10).
(11), (12) and (13),(14) show representative exam-
ples for sp(w)= (slash&apos;, slash2). In (14), X&apos; is some
variable chosen to be not free in U,x1y1z,T,V and
W. The provability of the upper premise U, sly, V
w[X1IX] follows from that of U, x/y, V = w by
substitution for the variable X throughout.5 As to
the equivalence of the proofs, one can confirm that in
the term-associated versions, the same term is paired
with the succedent category in each case.
</bodyText>
<equation confidence="0.946347236842105">
U, a, V2 W Xi/Y1,
/L
U, a/b, x&apos;/y&apos;, VI, V2 w
VL
U, a/b, VZ.x/y, , V2 = W
IY1,171 b
VL
U, a, V2 = w VZ.x/y, b
/L
U, a/b, VZ.x/y, VI, V2 =• W
U, x&apos;/y&apos;, V z
Nift
U, z&apos;/y&apos;, V #. VY.z
VL
U, VX.x/y, V #. VY.z
(10) U, z&apos; /y&apos;, V YLz
U, VX.x/y, V z
YR
U, VX.x/y, V VY.z
(11) U, a, V #. w x/y, T2 b /L
/L
U, a/b, x/y, 7&apos;2, V #. w
U, alb, x/y/z, T, 7&apos;2, V w
(12) x/y, T2 = b T1#- z
/L
U, a, V #. w x/y/z, T1, T2 b
/L
U, alb, x/y/z, T1, T2, V w
(13) U, x/y, V #- w
YR
U, x/y, V VYw[Y/X] T z
/L
U, x/y/z, T, V VYw[Y/X]
(14) U, x/y, V w[XiI.XJ T z
/L
U, x/y/z, T, V w[X&apos; I X]
VR
U, zlylz, T, V = VYw[YI.X]
</equation>
<footnote confidence="0.9967015">
5Here the &apos;full&apos; version of (YR) is being used, incorpo-
rating a change of bound variable. See earlier footnote.
</footnote>
<page confidence="0.998396">
125
</page>
<bodyText confidence="0.999616818181818">
This is enough to show orderly proofs for
VX.X/X and VX.(X\X)/X. For VX.X/(X\np) and
VX.((cn\cn)/(s\ X)/(X/np)) we must further show
that if there is a proof of T x/y whose last step is
not a (/R) inference introducing x/y, then there is
an equivalent proof whose last step is a (/R) infer-
ence introducing x/y. One can show this by showing
if there is a proof whose last two steps use (/R) fol-
lowed by some rule *, then there is an equivalent
proof reversing that order. (15) and (16) illustrate
this.
</bodyText>
<equation confidence="0.972292555555555">
(15) U, a, V, y x
/R
U, a, V x/y T b
/L
U, alb, T, V = xly
(16) U, a, V, y x T b
U, a, T, V, y x /L
/R
U, alb, T, V x/y
</equation>
<bodyText confidence="0.942147">
So much by way of a sketch of a proof. I will
put the fact that orderly proofs exist to the follow-
ing use. For sequents whose positive quantifiers are
drawn from the list in (5), one can be sure that if they
have proofs at all, they have a proofs which instan-
tiate quantifiers &apos;one at a time&apos;. One at time in the
sense that once a there is a (VL) inference, one can
suppose there will be no more (VL) on the branches
leading to the first occurrences of a Vt sequents.
Observation Three Bearing in mind Observation
One, the question whether a given choice, ai, for the
value of the quantified variable is a good one will
come to depend, sooner or later, on the derivability
of a certain set of Vt sequents, containing one VI
sequent and one or two VT sequents. In relation to
this consider the following:
Fact 1 (Unknown elimination) (i) and (ii) are
equivalent
</bodyText>
<listItem confidence="0.627862666666667">
(i) There is an x such that L(/&apos;\,v)I--U,x,V w,
x, Tn x
(ii) ,Vv&gt;1--U , T1, V w, . . . , U, Tn , V =w
</listItem>
<bodyText confidence="0.982280117647059">
The proof of this, from left to right uses
Cut and Cut-Elimination. For example, from
\ ,v) U, x, V w, \ Y)I—T1 = x, we deduce
\ Y)-F Cut HU, Ti, V w. Therefore by Cut
elimination, L(/&apos;&amp;quot;)I—U, V = w. For the right
to left direction, let me say that (w\U)/V is a
shorthand for (w \ui . • .\u,) /vn • .. /vi. We
choose the x to be (w\U)/V. Clearly for
this x, x, V w. Also each of the
claims IP x, follows from the assumed
U, T1, V = w, simply by sufficiently many slash
Right inferences.
On the basis of these observations, I suggest the
following decision procedure: 6
Definition 1 (Decision procedure) Where A, r
vary over possibly empty sequences of sequents, let a
rewrite procedure R. be defined as follows
</bodyText>
<listItem confidence="0.962200142857143">
1. A, x x, r r, where xis atomic
2. A, T w, A, 0, r, if T w follows
from 0 by some ride of L(/,\Y) other than (IL)
3. A, U,VZ.x, w, F-* A, ,[X/Z], w, r,
where X is an unknown, and there are no other
unknowns in A, U,VZ.x, V w, F
4- A, U, X, V w, X, Tn x, r
</listItem>
<figure confidence="0.320767333333333">
A
U,T1,V , . . . , U,T,, , V w ,
A sequent T w is accepted if the sequence con-
</figure>
<bodyText confidence="0.99862556">
sisting of just this sequence can be rewritten to the
empty sequence by R.
The fourth clause slightly oversimplifies what I in-
tend in the two respects that (i) the rewrite can apply
when the U, X, V w, T1,X, ..., Tn X occur
dispersed in any order through the sequence, and (ii)
it can only apply if the unknown X does not occur in
sequents other than those mentioned. Note because
of clause 3, there will only ever be one unknown in
the state of the procedure. This corresponds to Ob-
servation Two above. I will show that this procedure
is terminating and correct when applied to sequents
whose positive quantifiers are drawn from (5). By
correctness of the procedure, I mean that the pro-
cedure accepts r if L(/,\ The implication left
to right I will call soundness, and from right to left
completeness.
There is a term associated version of this deci-
sion procedure, rewriting a pair consisting of a set
of equations, and a sequence of term-associated se-
quents. On the basis of the discussion earlier, for
the most part the the reader should be able to eas-
ily imagine what embellishments are required to the
clauses of the rewrite. I will just give the full version
of the Clause 4 rewrite. The input will be:
</bodyText>
<equation confidence="0.958704">
Equations:E
Sequence: A, U : 112.X:(1)1, V : w : 4)2,
X:411, Tn : tn F
The output will be:
Equations:E plus (1)2 = 407)(7), = AvlAulx1q,
• • • , = Ay; A ti,!orn
Sequence: A, U : ui, 1,V:vjw : • • • ,
U : T n : , V : w : Tin, r
</equation>
<subsectionHeader confidence="0.995765">
3.1 Termination
</subsectionHeader>
<bodyText confidence="0.99993075">
If there are any rewrites possible for a sequence there
at most finitely many. So we require that no rewrite
series can be infinitely long. Call the sequents fea-
turing an unknown a linked set. At any one time
</bodyText>
<footnote confidence="0.97819275">
6Since writing this paper, I have discovered that the
above observation concerning unknown elimination have
been made before [Moortgat, 1988], [Benthem, 1990].
This will be further discussed at the end of the paper
</footnote>
<page confidence="0.997324">
126
</page>
<bodyText confidence="0.9999635">
there is at most one linked set. Let the degree, d, of
a sequence be the total number of connectives. All
rewrites on a sequence that has no linked set lower
the degree. So rewriting can only go on finitely long
before it stops or a linked set is introduced. A linked
set is introduced by a clause 3 rewrite, introducing
an unknown into some particular sequent. Call this
the input sequent. While the sequence contains a
linked set, either the degree of the whole sequence
goes down, and the sequence remains one containing
a linked set (clause 1, clause 2), or the sequence be-
comes one no longer containing a linked set (clause
4). So a rewrite can only go on finitely long before
it either stops, or has a phase where a linked set
is introduced and then eliminated. Call the sequents
which result from the elimination of the unknown in a
clause 4 rewrite, the output sequents. Now consider-
ing any such phase of unknown introduction followed
by elimination, one can say that the count of posi-
tive quantifiers in the input sequent must be strictly
greater than the count of positive quantifiers in any
of the outputs. This, taken together with the fact
that the maximum count of positive quantifiers is
never increased outside of such phases, means that
there can only by finitely many such phases in a
rewrite.
</bodyText>
<subsectionHeader confidence="0.998237">
3.2 Soundness
</subsectionHeader>
<bodyText confidence="0.999679444444444">
We show that if the procedure accepts a sequence
of n sequents (n &gt; 1), then there is substitution for
the unknowns such that there are n proofs of the n
substituted for sequents. This subsumes soundness,
which is where n = 1 and there are no unknowns. I
shall use sub(A) to refer to the sequence of sequents
got from A by some substitution for the unknowns in
A, and L(/, ,v)1--A for the claim that there are proofs
of each of the sequents in A
The proof is by induction on the length of the
shortest accepting rewrite. When the shortest ac-
cepting rewrite is of length 1, the sequence must con-
sist simply of an axiom, and so there is a proof. Now
suppose the statement is true for all sequences whose
shortest accepting rewrite is less than 1. Then for se-
quences whose shortest accepting rewrite is of length
1, we consider case-wise what the first rewrite might
be.
</bodyText>
<listItem confidence="0.951324">
• clause 2 rewrite, for example: A, U,x1y,T,V w,
</listItem>
<bodyText confidence="0.996385875">
A, U,x,V w, T y, F. x, v w,
T = y, F must have a shortest accepting rewrite
of length &lt; 1, so by induction there is a substitu-
tion such that LU,V11--sub(A), sub(U, x, V w),
sub(T = y), sub(F). From this it follows that
IPA ,v)i--sub(A), sub(U, xly,T,V = w), sub(r).
The other possibilities for clause 2 rewrites work in
a similar way
</bodyText>
<listItem confidence="0.861984">
• clause 3 rewrite: A, U,VZ.x, V w, r
</listItem>
<bodyText confidence="0.805188333333333">
A, U,x[XlZ],V w, A. By induction
there is a substitution such that L(/A,v)i—sub(A),
sub(U,.x[X/Z], V w, sub(A). Let sub&apos; be the sub-
stitution that differs from sub simply by substitut-
ing nothing for X. sub&apos;(VZ.x) = VZ(sub&apos;(x)), and
sub(x[X/Z]) = sub&apos;(x)[sub(X)/Z]. It follows that
L(/,\ ,v)i—sub&apos;(A), sub&apos; (U,V Z .x , V = w), subV)
• clause 4 rewrite. A, U, X, V w, X, ... ,
X, r A U,T1,V w, w
F. By induction:
sub(U, , w, , w), sub(r). Let
sub&apos; be the substitution that differs from sub sim-
ply by substituting for X, sub(w\U/V). Clearly
L(A,v)l— sub1(U,X,V w). Also for each
it follows from L(/&apos;\&amp;quot;&apos;)1--sub(U, T1, V w) that
LU,V1)1--sub&apos;(Ti X). Hence LU&gt;V11—sub&apos;(A),
sub&apos; (U, X, V w), sub&apos; (Ti = X), ... , sub&apos; (T,, X),
sub&apos; (F) 0
</bodyText>
<subsectionHeader confidence="0.841321">
3.3 Completeness
</subsectionHeader>
<bodyText confidence="0.999042487179488">
I will now show completeness for sequents whose pos-
itive polymorphic categories are drawn from (5).
By a frontier, f, in a proof, I will mean either the
leaves of that proof or the leaves of a subtree having
the same root. Given a frontier f in a proof p, which
has some completed labelling, the procedure will be
said to be in a state s that corresponds to f, if the
state and the frontier are identical except that (i) s
may have some axioms deleted as compared with f,
and (ii) the occurrences of labelled, non-quantified
ai in f, are transformed to occurrences of some un-
known in s. Given a state s,I will say that a frontier,
f, is accessible if there is a state corresponding to f
that the procedure may reach from s.
I assume the procedure is complete for unknown-
free sequents whose positive quantifier count is zero.7
Now suppose the procedure is complete for unknown-
free sequents whose positive quantifier count is less
than some particular n, and consider a sequent r, of
positive quantifier count n, with some proof, p, and
one of the form remarked upon in Observation Two.
There will be (VL) inferences in this proof, amongst
which is a set lower than any others. Take the con-
clusion of one such (VL) inference, U,VX.y,V w
and from all other branches pick a point not above a
(VL) inference. This set of points forms a frontier, f,
which is accessible if the procedure starts at r. Call
the corresponding state s. The sequents in the state
other than U,VX.y,V = w are unknown-free, have
a positive quantifier count of less than n, and have
a proof, and so by induction the procedure is com-
plete for them. So there is a possible later state s&apos;
which consists solely of the sequent U,VX.y,V = w.
We now focus on the subproof of p that is rooted in
U,VX.y,V = w. Consider VX.y as labelled with i,
and labelling to have been propagated up the tree. I
want to define a certain accessible frontier, f&apos; , in this
tree. There are a certain finite number of branches
ending in U,VX.y,V w. A certain subset of those
</bodyText>
<footnote confidence="0.6922355">
71 am of course assuming that all these positive quan-
tified categories are drawn from the list in (5)
</footnote>
<page confidence="0.99404">
127
</page>
<bodyText confidence="0.990905846153846">
branches lead to Nit sequents, and without any in-
tervening (VL) inferences. Select for the frontier f&apos;
the lowest occurrences for the V! sequents. From
the other branches simply select a set of nodes, r,
which is not preceded by a (VL). This frontier is ac-
cessible, and the corresponding state is: U, Xi, V
w,Ti Xi,...,T Xi. By a clause 4 rewrite
this leads to: U,Ti , V w, . . , U,T„,V w. This
state is unknown free, each of the sequents has pos-
itive quantifier count less than n, and each has a
proof. So by induction, the procedure is complete for
each of the sequents, and the state may be rewritten
to 0 .
</bodyText>
<sectionHeader confidence="0.999104" genericHeader="method">
4 Implementation
</sectionHeader>
<bodyText confidence="0.998762111111111">
We can with respect to the term-associated version
of the decision procedure ask whether it is semanti-
cally comprehensive: whether the procedure assigns,
up to logical equivalence, exactly the same terms to
a sequent as are assigned to it by the declarative defi-
nition of an L(1,\ ,v) grammar. Some but not all parts
of what is necessary for a proof of this are established
- that Cut elimination for &apos;PAY) preserves readings,
that restriction to orderly proofs loses no readings.
However, for the moment, the claim rests ultimately
on empirical evidence, drawn from the prolog imple-
mentation that I will now describe. I will describe
the implementation as additions/alterations to the
earlier mentioned Lam.
First, it was noted in Observation Two, that one can
insist in proof search that Slash right rules are used
as soon as their application become possible: this
early use of Slash right rules is the first modification
of Lam. For the sake of the discussion, assume it is
done by adding to non Slash right rules a check on
the absence of a slash in the succedent.
Second, a conditional for (VL) is added:
seqUU,pol(X,Y):Termi,VLW:Term2):-
groundseq([U,pol(X,Y):Termi,V],
W:Term2),
substitute(X1,X,Y,Y1), % Y1 is Y[X1/X]
mark(Y1,Y2),
seq(N,Y2:Term1(Ty),10,W:Term2) ,
cattotype(X1,Ty).
Note, polymorphic categories appear as terms such
as pol(x,x/x). The code is in a simplified form,
pretending that CU, X , V] matches any list that is the
appending together of the lists U, [X] and V, where in
reality there are further clauses taking care of this.
The conditional basically substitutes an unknown for
a quantified variable. Prior to the substitution there
is a check, groundseq, that the categories in the goal
do not already feature some syntactic unknown. Sub-
sequent to substitution, the mark relation leads to
the replacement of the positive occurrence of the un-
known Xi with (X1 , a).
Third, a goal featuring a zero-path occurrence of
(Xi ,a):Term matches no standard sequent rule, be-
cause of the marking, matching instead an &apos;argument
stacking&apos; conditional:
</bodyText>
<equation confidence="0.9727785">
seqUU:17,(X,a):F,V:V],W:Term) :-
I = (10)/V, Term = F(17)(0)
</equation>
<bodyText confidence="0.999865125">
Fourth, sequents featuring the marked version of the
unknown are dealt with before sequents featuring the
unmarked (negative) instances of the unknown, by
ordering the major premise before the minor in the
conditionals for the Slash Left rules.
To illustrate I will &apos;trace&apos; the behaviour of the pro-
gram on the goal given as 1 below (tv stands for
(s\np)/np
</bodyText>
<listItem confidence="0.9954922">
1. seq([np:f ,tv:g,pol(x,x\(x/np)):10 ,s:T)
2. seq([np:f ,tv:g, (Xi, a)\(Xi/np) :h(Ty)],
s :T)
3. seq( [np: f , (Xi ,a) :h(Ty) (TO] ,s:T)
4. Xi = s\np, T = h(Ty)(T1)(f)
5. seq([(s\np)/np:g],s\np/np:Ti)
6. Ti = Ax Ay g(x)(y)
7. cattotype(s\np,Ty)
8. Ty = (e,t)
9. T h((e,t))(Ax Ay gxy)(f)
</listItem>
<bodyText confidence="0.995063965517242">
1 matches against the (VL) clause. The check that
there are no syntactic unknowns around is success-
ful, and after substitution and marking, we reach the
subgoal shown as 2, which introduces the new un-
knowns Xi and Ty. 2 matches against the (\L) clause,
the first subgoal of which is the major premise, shown
as 3, with the new unknown T1 (if we could pick
the minor premise, we would have non-termination).
3 matches only the &apos;argument stacking&apos; conditional,
giving a solution for Xi and solving T in terms of Ty
and T1, as shown in 4. The second subgoal of 2 is
then considered, under the current bindings, which
is 5. 5 will solve via a combination of slash Left and
slash Right rules, giving the solution for T1 shown in
6. 2 is now satisfied, and the final subgoal of 1 is
considered under the current bindings, which is 7. 7
solves with the solution for Ty shown in 8. 1 is now
satisfied, and the solution for T is shown in 9 (recall
in 4, T was expressed in terms of Ty and Ti).
Space precludes giving a formal argument that this
Prolog implementation and the foregoing decision
procedure correspond, in the sense that they suc-
ceed and fail on the same sequents, and assign the
same terms. By way of indication of the behaviour
of the implementation, and in particular its seman-
tic comprehensiveness, I give below some examples
of what the implementation does by way of assigning
readings. In all but the last two cases the task is to
reduce to s. For the last two it is to reduce to cn.
</bodyText>
<page confidence="0.996766">
128
</page>
<reference confidence="0.9948462">
(17) a. every man walks (1)
b. every man loves a woman (2)
c. John believes Mary thinks every man walks
(3)
d. every man a woman 2 flowers (0)
e. every man loves a woman 2 flowers (0)
f. every man gave a woman 2 flowers (6)
g. (omdat) John gek en Mary dom is (1)
h. man who John told to go (1)
i. man who John told Mary to go (0)
</reference>
<sectionHeader confidence="0.925997" genericHeader="conclusions">
5 Concluding remarks
</sectionHeader>
<bodyText confidence="0.9993016">
To pick up on an earlier footnote, I have discovered
since writing this paper that Benthem and Moort-
gat have shown decidable, by using what I have re-
ferred to as Unknown Elimination, the system which
is OA) with an added rule of &apos;Boolean Cut&apos;:
</bodyText>
<equation confidence="0.967061">
U,X,V W X T2 =,x
U, J, T2, V w
</equation>
<bodyText confidence="0.999680939393939">
The question arises then of the relation between
their work and what has been proposed in this paper.
At the very least, I hope to have shown that there is
lurking in this Unknown Elimination technique, an
approach not only to coordination, but also to quan-
tifier scope ambiguity and non-peripheral extraction.
The main difference between the decision procedure
for L/&apos;&apos; and that for L(1&apos;)+ Bool.Cut is that the
Unknown Elimination technique is put to work on se-
quents which do not arise from special purpose Cut
rules, but simply by the elimination of categorial con-
nectives from certain kinds of categories containing
unknowns. This introduces some intricacies into the
proof of completeness, which the observation con-
cerning orderly proofs was used to deal with.
As to the scope of the decision procedure, this
ought to have a more general specification than that
which has been given here, though I have not yet
found it. A plausible seeming idea is that there
should be one positive and several negative occur-
rences of a bound variable. However, this includes a
category such as VX.s/(X/X), and a proof featuring
this category is not guaranteed to produce separate
V° sequents.
A direction for future research would be to in-
vestigate the possibility of combining this approach
to quantification, coordination and extraction with
non-categorial accounts of other aspects of a lan-
guage. The idea would be to use such a non-
categorial grammar as an extended axiom base. If
this turned out to be feasible then we would have an
attractively portable account of quantification, coor-
dination and extraction.
</bodyText>
<sectionHeader confidence="0.997786" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999367612244898">
[Benthem, 1990] Johan van Benthem. Categorial
Grammar meets unification. In Unification for-
malisms: syntax, semantics and implementation,
J.Wedekind et al.(eds.).
[Emms, 1989] Martin Emms. Polymorphic Quanti-
fiers. In Proceedings of the Seventh Amsterdam
Colloquium, pages 139-163, Torenvliet, M. S. L.
(ed.), Institute for Language, Logic and Informa-
tion, Amsterdam, December 1989.
[Emms, 1991] Martin Emms. Polymorphic Quanti-
fiers. In Studies in Categorial Grammar Barry, G.
and Morrill, G. (eds.) , pages 65-112, Volume 5 of
Working Papers in Cognitive Science, 1991, Edin-
burgh, Centre for Cognitive Science.
[Emms, 1992] Martin Emms. Logical Ambiguity.
PhD Thesis, Centre of Cognitive Science, Edin-
burgh.
[Emms and Leiss, forthcoming] Martin Emms and
Hans Leiss. Cut Elimination for Polymorphic
Lambek Calculus. CIS Technical Report, forth-
coming.
[Gabbay, 1974] Dov Gabbay. Semantical Investiga-
tions in Heyting&apos;s Intuitionistic Logic Dordrecht:
Reidel.
[Girard, 1972] J. Y. Girard. Interpreta-
tion Fonctionelle et Elimination des Coupres de
L&apos;Arithmetique d&apos;Order Superieur. PhD Thesis.
[Hendriks, 19891 Herman Hendriks. Cut Elimination
and Semantics in Lambek Calculus Manuscript
available from University of Amsterdam. To ap-
pear in his PhD thesis &apos;Studied Flexibility&apos;.
[Lambek, 19581 Joachim Lambek. The mathemat-
ics of sentence structure. American Mathematical
Monthly, 65:154-170,1958.
[Mey, 1992] Daniel Mey. Investigations on a Calcu-
lus Without Contractions. PhD Thesis, Swiss Fed-
eral Institute of Technology, Zurich.
[Moortgat, 1988] Michael Moortgat. Categorial In-
vestigations: Logical and Linguistic Aspects of the
Lambek Calculus. Dordrecht: Foris Publications.
[Moortgat, 1989] Michael Moortgat. Unambiguous
proof representations for the Lambek Calculus.
In Proceedings of the Seventh Amsterdam Collo-
quium, pages 389-401, Torenvliet, M. S. L. (ed.),
Institute for Language, Logic and Information,
Amsterdam, December 1989.
[Reynolds, 1974] J.0 Reynolds. Towards a theory of
type structure. In Colloquium sur la programma-
lion, 1974, pages 408-423.
</reference>
<figure confidence="0.404924">
Bool.Cut
</figure>
<page confidence="0.978371">
129
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.015580">
<title confidence="0.999477">Parsing with polymorphism *</title>
<author confidence="0.999948">Martin Emms</author>
<affiliation confidence="0.909454">The CIS</affiliation>
<address confidence="0.962096666666667">Leopoldstr 139 8000 Munchen 40 Germany</address>
<abstract confidence="0.999578">Certain phenomena resist coverage within the Lambek Calculus, such as scopeambiguity and non-peripheral extraction. I have argued in previous work that an extension called Polymorphic Lambek Calculus (PLC), which adds variables and their universal quantification, covers these phenomena. However, a major problem is the absence of a known decision procedure for PLC grammars. This paper proposes a decision procedure which covers a subset of all the possible PLC grammars, a subset which, however, includes the PLC grammars with wide coverage. The decision procedure is shown to be terminating, and correct, and a Prolog implementation of it is described.</abstract>
<note confidence="0.579948">1 The Lambek Calculus To begin, I give a brief description of Lambek categorial grammar [Lambek, 1958]. The categories are</note>
<abstract confidence="0.990591432692309">up from basic categories, using the binary catconnectives and `V. 1Then a set of egorial rules&apos; involving these categories is defined, of the form: xl, ...x, = y (n &gt; 1), xi and y being categories. A distinctive feature is that the set of rules defined a term adopted from *This work was done whilst the author was in receipt of a six month scholarship from the German Academic Exchange Service, whose support is gratefully acknowledged &apos;Lambek also considered a third connective, the &apos;product&apos;. I, in common with several authors, use the name Lambek calculus to refer to what is really the product-free calculus place of &apos;categorial rule&apos;, Lambek presented this inductive definition as a close variant of Gentzen&apos;s sequent calculus for propositional logic. Lambek&apos;s calculus, L(M), is given below: x U,y,V w V w \L V w y \R T T y\x sequences of categories posempty), w, are categories. In the two rules, the = x is called the minor premise. The fact that L(M)derives r, I will notate as L(M)l—r. With regard to the names of the rules, and &apos;It&apos; stand for left and right. For example, ( \L) (resp. (\R)), derives sequents with &apos;\&apos; on the on the the sequent arrow, For various purposes it is convenient to consider the addition of the &apos;Cut&apos; rule, given below (in which x referred to as the Cut formula, and = x the minor premise): = w [1958] establishes that Cut F-r if (Cut elimination), and that LUMP r is decidable. w T x U,y, T x /L T x Cut 120 proof of the decidability of IP r proceeds as follows. First one reads the rules of L(M) &apos;backwards&apos;, as a set of rewrites, growing a tree at its leaves &apos;up the page&apos;. Call the trees grown this way trees. if r is the root of a detree whose leaves are all remains to note that there are only finitely many deduction trees for a given sequent: a leaf can be grown in at most a finite number of different ways, and the added daughters have always a diminished complexity (complexity measured as number of occurrences of connectives). This decision procedure is improved upon somewhat if the rules of the calculus are expressed as a Prolog data base of conditionals concerna binary predicate between a list of categories and a single category. For later reference, for some such Prolog implementation of L(M). grammar, this perspective is an assignment categories to words. Reading &apos;accordto $ category say (i) lexically assigned (ii) s,•,(n &gt; 1), L(/ • \ xi , . xn = any Lambek grammar, question This is got by combining Cut elimination with the decidability of I--r. Consider deciding whether 0—.91.92 E and are lexically assigned the catcan first check whether y is decidable. If L(/A)1/y z, one should try a `non-flat&apos; sation possibility. That is, one should also consider derivable categorisations of the subexpressions, that L(M)I--- = x&apos;, y , and check whether they may be combined to give lurks a problem, because there are that \ )1-x y =V. The way out of this problem is the relationship between the `non-flat&apos; categorisation strategy and Cutbased proofs, to illustrate which, note that if there derivable categorisations, V of the subexwhich combined to give L&amp;quot;+ Cut = (1) V y x&apos; parsing with an IPA) grammar comes to decidthe derivability of xi, , s, where are the categories of the lexical items. This Lambek style of grammar is associated also with a certain method for assigning meanings to strings. The idea is that a proof, 7, of L(M) can into a semantic operation, if there is proof, 7, of , x a sequence of expressions with categories xi, ..., x. and meanings .,m, has a possible meaning • • • , mn)• to which operation, with which proof, 7, is defined by a Representative parts of the (extensionally) term associated are given below: U,y : a0),V = w : c U,y/x : a,T,V /R T : There are corresponding ( \L) and ( \R) rules. sequents where in place of categories there are category:term pairs. If we start with an TPA) proof of r, and add variables to the antecedent categories of r, there is a unique way to add terms the rest of the proof so as to get a proof of When this is done the term, a, associated with the succedent of r, represents the semantic operation. The above mentioned decision procedure can be embellished to develop trees featuring semantic terms, some of them unknown, together with an evolving set of equations in these unknowns. When a proof is discovered, the term for that proof can be obtained by solving the set of equations. There is a semantic question to be asked about the acceptability of parsing simply by search through proofs: are all term-associated proofs for a in Cut equivalent to some termassociated proof in I(&amp;quot;A), and vice-versa ? The answer is yes [Hendriks, 1989], [Moortgat, 19891. 2 Polymorphism Despite the great simplicity of Lambek grammars, a surprising amount of coverage is possible [Moortgat, 1988]. Two aspects of this are embryonic accounts of extraction, and scope-ambiguity, the latter arising from the fact that there may be more than one proof of a given sequent. However, the accounts possible have remained only partial. Nonperipheral extraction remainsd unaccounted for (eg. the (man)i who Dave told ei to leave) and only the scope-ambiguities of peripheral quantifiers are covered (as in the structure QNP TV QNP). A simple account of cross-categorial coordination has also often been cited as an attractive feature of Lambek grammars ([Moortgat, 1988]). However, the analyses are never in a purely Lambek grammar. Belonging to Lambek grammar proper is a part assigning some category to the strings to be coordinated, and then lying without Lambek grammar, a coordination such as x, and, x Cut : /L W :c 121 To overcome these deficits in coverage, I have a of the calculus. Added to the categorial vocabulary are category variables and their universal quantification, allowing such categories as: X, X/X, VX.X/(X\np). To Li&amp;quot;) are added left and right rules for V, to give what I will OA given straightaway the term-associated calculus): x[y/Z] a(a), w : V = w : (I) x : T VZ.x : Notation: the terms are drawn from the language of 2nd Order Polymorphic A-calculus [Girard, 1972], [Reynolds, 1974]. Here, terms carry their type as a superscript, and one can have variables in these (eg. can abstract over such varitypes, deriving terms of (eg. Air.Aer.er, of type V7r(7r-r)), and terms of quantified type can be applied to types (eg. A7r.Aer.e(t), type (t--90). In the above, the type, a, a is applied to, is that corresponds to category, is being substituted for the catvariable, 2An equivalent slight variant on takes as axioms only those x sequents basic or a variable, something I will call It • . is easy to show if LUAY)l-r (see [Emms and Leiss, forthcoming]). By assigning conjunctions to VX.((X \X)/X), negation to VX.X/X, and quantifiers to VX.X/(X\np) and VX.X \(X/np), one obtains coverage of crosscategorial coordination and negation, as well as a comprehensive account of quantifier scope ambiguity [Emms, 1989], [Emms, 1991]. Assigning relativisers to VX.((cn\cn)/(s\ X)/(X/np)), non-peripheral extraction can also be handled [Emms, 1992]. The meanings that go along with these categories are as Where is Q, J over the conventional meanings of quantifiers, junctions and with £p(t) = EG = Q(6)(ye -4 y x) = J(b)(Pix)(P2x) N(b)(Px) P2(Pix) A I will give two illustrations. The proof below would allow the embedded quantifier, every man, to be asa de-re interpretation in believes every walks. (s\np)\((s\np)/s) = is a version of the &apos;official&apos; version, which allows a change of bound variable s\np \ (s\np)/s, = s\np X\np /L (s\np)/s, s\np = s VL np, (s\np)/s, VX.X/(X\np), s\np = s assuming the terms associated with the antecedents of the root sequent, the term for the proof is: emp(tet, et)(Ax f Ay[f (walk(x))(y)])(bel)(j) obtain as a possible denotation for believes every man walks: f,y 1-4 f(walk(x))(y))(bel)(j) = emp(et)(x,y 1-4 bel(walk(x))(y))(j) = emp(t)(x bel(walk(x))(j)) = emG(x bel(walk(x))(j)) As an illustration of non-peripheral extraction, the below allows the string John told to go be recognised as a postmodifier of a common noun: s/vpc, vpc s \R r vpc = s\X /L np, V, np, vpc s L___ / (cn\cn)/(s\T), vpc cn\cn np, V * X/np /L VL VX.((cn\cn)/(s\X)/(X/np)), np, V, vpc = cn\cn r = cn\cn = cn\cn, V = ((s\np)/vpc)/np, s/vpc. Assuming j, told, associated with the antecedents of the root, the term for the proof is: who((et,t))(AxAy[told(x)(y)(j)])(A f[f(go)]) obtain for the denotation of the string John told to go: who((et,t))(x, y told(x)(y)(j))(f Ago)) Q, z ((f told(z)(y)(j))) Q(z)) Q, z (told(z)(go)(j) For the further discussion of the analyses within an L(&amp;quot;\&amp;quot;&apos;) grammar that cover a significant range of data, see the earlier references. I turn now to the main problem which this paper addresses: is there an automatic procedure able to find these analyses? Cut for want a procedure to decide whether x, is an grammar. As with L(&amp;quot;) gramthis problem reduces to deciding r if it can be shown both that Cut can be eliminated, and without the loss of any significant semantic diversity. This has recently been shown ([Emms and Leiss, forthcoming]). I make some remarks on the proof. The strategy of the proof of Cut elimination starts from the observation that a proof, not free (cn\cn)/(s\TC)/(TC/np), np, V, vpc = cn\cn 122 using Cut must contain at least one use of Cut which dominates no further uses of Cut — a &apos;topmost&apos; use Cut. Suppose this use of r. Then defines two things: a the Cut leading r, and a the proof of r an alternative proof of r, such that either the transformed proof of r is Cut-free, or it is a proof with or less cuts of lesser a finite number of iterations of the transformation, one must have a cut free proof. the proof for OM, the a Cut inference is simply the sum of the numbers of connectives in the two premises. This cannot be the degree for For example, a cases to be considered is where one has a cut of the kind shown in (2). The rewrite is (3) (that Z] provable on the fact that not free in substitution for free variables preserves derivability [Emms and Leiss, forthcoming]) T y VL T U,VZ.y,V w Cut U,T,V w T = y[alZ] U,y[a121,V w Cut U,T,V w With degree defined by number of connectives, we need that the number of connectives in y[a/Z] is strictly less than the number in VZ.y, and that is often false. The proof goes through instead by taking the degree of a cut to be the sum of sizes of the proofs of its two premises, where the size is the numof nodes in the proof. 3 Difficulties in deciding = So the problem reduces to one of L&amp;quot;&amp;quot;&apos;) derivabil- Whether \ derivability is decidable I do not know. The nearest to an answer to this that the logical literature comes is a result that quantified intuitionistic propositional logic is undecidable [Gabbay, 1974]. The difference between &apos;(AY) and logic of this result is the presence of the further connectives (V, A), and the availability of all structural rules. I will describe below some of the problems that arise when some natural lines of thought towards a decision procedure are pursued. One might start by considering the logic that is \)+ (VR). This can be argued to be decidable in the same fashion as L(M): read (VR) backwards as a rewrite, adding another way to build deduction trees. As for OA) a sequent has only finitely many deduction trees, and provability is equivalent to the existence of a deduction tree with axiom leaves. fact nodes axiom form sequents are not counted in the size, and the proof relies on changes of bound variable and substitutions not changing the size proofs However, when (VL) is added this simple argument not if (VL) is read backwards as a further definition of deduction trees, then a leaf containing an antecedent V could be rewritten different, ways. A natural move at this point is to redefine deduction trees, reading the rule as an instruction to substitute an One hopes then that: (i) the set of so-defined deductrees a given sequent, r, is finite (ii) there is easy check property, these trees such that the existence of a P-tree in the set would be to Now, if we were considering combination first-order with the Lambek calculus, this strategy works, but whether it for remains unknown. I will go through the application of the strategy in first-order case to highlight why does not yield so easily. The first-order quantification plus the calculus, I will call It is the endpoint of a certain line of thought concerning agreement phenomena. One first reanalyses basic categories, such as s and np, as being built up by the application of a predicate to some arguments, giving categories such as np(3rd,sing), s(fin). It is natural then to consider quantification over the first order positions, such as Vp. s(fin)\ np(p,p1), which could be used when, as in English, the plural forms of a verb are not distinguished according to person. Now is decidable, which can be shown by adapting an argument that shows that when the contraction rule is dropped from classical predicate logic, it becomes decidable [Mey, 1992]. Deduction trees for a sequent, r, of L(&amp;quot;\&apos;) are defined so that the rewrite associated with the (VL) rule substitutes an are then only finitely many deductrees (the absence of the structural rule of conis essential here). Now, if and r has a complex first order term, one can be sure that this term is present in an axiom, because no rules build complexity in the places in categories where a bound variable can occur. For this reason, the sodefined deduction trees for r cover all the possible a proof of r. Provability is therefore equivalent to the existence of a substitution making one of the deduction trees have axiom leaves, and this can be checked using resolution. This situation does not wholly carry over to The &apos;substitute an unknown&apos; rewrite reading of (VL) defines only finitely many deduction trees for a sequent, r. However, these so-defined deduction for r do not cover all the possible proof of r: unlike there that build complexity in the places in categories where a variable can occur. So, for example, np, VX.X/(X\np), (s\np)\np, but none of the deduction trees represents the pattern of the proof. So to check for the existence of a deduction tree (as defined) that by a substitution would have ax- 123 iom leaves is not sufficient to decide derivability. It we must defined the looked for property, deduction trees recursively, so that a tree has if (1) the leaves by a substitution become axioms, or (2) by hypothesising a connective in one of the unknowns, and extending the tree by rewrites licensed by this connective, one obtains a P-tree. It would amount to the same thing if the definition of deduction tree was extended (by hypothesising a connective in an unknown), and the looked for propsimple: a tree whose leaves by a substitution become axioms. However, the extended defof deduction tree now allows many trees for a sequent. This may seem surprising, but is one considers a leaf such as can pothesis X = Y/Z, extend the deduction tree by the rewrite associated with a slash Right rule, obtaining once again a leaf with a succedent occurrence of an unknown. By imposing a control strategy which would systematically consider all deduction trees of deduction trees of height + 1, can be sure that any provable sequent would sooner or later be accepted by the decision procedure (because its provability would entail the existence of a deduction tree of a certain finite height). However, there is no reason to expect the procedure to termiwhen working on an underivable 3 A partial decision procedure for there are problems in the way of a general deprocedure for I a decision for is possible. Partial in the sense of covering only a certain class of sequents, but one sufficiently large, I claim, to cover all linguistically relevant cases. The procedure will be a partial decision procedure for &apos;(tAX) via being a partial decision procedure for To describe the class of sequents that the proceapplies to definitions of the &apos;polarity&apos; of occurrence of a category. Let the polarity an occurrence of a category (pol(x, y)) pol(x, x) = + in pol(x , y/ z) = pol(x,V Z.y) = pol(x, y) = opp(pol(x , z / y)) = opp(—) = +. polarity an occurrence of a sequent r is the same the category polarity if an antecedent, and it is opposite. &apos;polarity&apos; as short for `sequent polarity&apos;. An example: X.X/(X\np)) s\(V+X.X/(X\np)) 4I have found non-terminating consecutively bounded depth first search to happen on the Prolog implementation of the calculus that these paragraphs suggest The decision procedure to be described is applicato sequents whose of polymorphic categories are unlimited, but whose positive polymorphic categories are drawn from: VX.X/X, VX.((cn \ cn)/(s \ X)/(X/np) VX.((X\X)/X), will make three observations concerning in leading up to the definition of the procedure. One the categories in (5) there is exactly one positive and one or two negative occurrence of the bound variable. This leads to the predictable occurrence of certain sequents. To help describe these I need to define some more terminology. labelling a proof is the assignment of unique integers to some of the categories in some seof the proof. A labelling got from an initial labelling by a certain kind of propagation up the tree: a label is passed up when a labelled category is simply copied upward, and in a (VI) inference the label is distributed to the occurrences of the categories chosen for the variable. In other inferences where a labelled category is active, the label is not passed up. For example: (6) Si s s si np np s s /L \L Si/SI, s s np, s\np s VL R X.X/X, s s s\np s\np /L = s say ai , V = w &apos;positive for Vi&apos; if theseoccurs in a labelled proof and the label on ai has been passed from a labelled occurrence of call a sequent ai &apos;negative for Vi&apos;. Now note that in the above proof, the Vi in root led to one and one Vj branch. This is no accident: one can predict the existence of such branches in any proof of a sequent with a positive occurrence of ViX.X/X. To see this, let me first define a notion reflecting how &apos;embedded&apos; a category is: a) = a occurs in path(a, / y) = (/ ,path(a, x)), path(a, y/ x) = (/ ,path(a, x)), path(a,VZ.x) = x)) With the exception of bound variable, if a category occurs with a path (C,p), and a polarity 5, in the conclusion of an inference, then it occurs in the premises of that inference with the same polarity, and with either the same path or with path Also, in leaves of a proof in categories only occur with zero path. Therefore, if we have 124 a proof of a sequent with a positive occurrence of ViX.X/X and with non-zero path, then there must higher in the proof, a sequent with occurring again positively and this time with with In other words there must occur a node V = Then if there were no (VL) inference in this proof introducing the category ViX.X/X, the category ViX.X/X would be present in the leaves of the proof. Because the leaves can only feature basic categories, there must be a (VL) inference, and a node V&apos; w&apos;. in a vein concerning the category we can be there must be (/L) with premises = and ai. are Vt and Vt sequents. Provable sequents having a positive occurrence of one of the polymorphic categories from (5), labelled generate an proof such that corresponding to each of the positive and negative occurrences of the bound variable, there are (distinct) Vt and V branches. Two just argued that in any proof of a sequent with a positive occurrence of quantified category, there must occur a node at which the quantifier is introduced by a (VL) inference, and that for categories in (5), Vtsequents must appear above this. For each of the VI sequents, the minimum number of steps there can be between the conclusion of (VL) step the Vt sequent is the length of the paths to the associated occurrence of the bound variable in the quantified category. Proofs featuring such minimum intervals between the quantified and the associated Vtsequents I will call can ask the question whether whenever there is a proof of a sequent whose positive quantifiers are drawn from the list in (5), there is also an orderly proof. the answer is that there is. sketch want to show that for any catein (5), for each of the of a variable it, that if there is a proof of then there is a proof in which the steps leading from the occurrence of the relevant Vtsequent to the (VL) inference correspond to the path to the bound in me define the a category as: I y) = ,sp(x)), sp(VZ.x) = (V , sp(x)), sp(x) = 0, basic. first for categories such that = slash), = (slash&apos;, slash2), when there is a proof such that the left inferences for the first two elements of the spine are separated by n steps there must be an equivalent proof where they are separated by n 1 steps. all the possibilities for the instep, 1, shows that the step associated with the first element of the spine could have been done before 1, thus lowering by 1 the number of steps intervening between the first two elements of the spine. There is not the space to show all the (7), and (9, (10) are representative examfor that in (9) and (10) there are side-conditions to the (VR) inferences. Satisfaction of these for (9) entails satisfaction for (10). (11), (12) and (13),(14) show representative examfor slash2). (14), some chosen to be not free in The provability of the upper premise sly, V from that of x/y, V = by for the variable As to the equivalence of the proofs, one can confirm that in the term-associated versions, the same term is paired with the succedent category in each case. W /L x&apos;/y&apos;, V2 VL VZ.x/y, = W b VL = VZ.x/y, /L =• W U, z Nift U, z&apos;/y&apos;, V #. VY.z VL U, z&apos; /y&apos;, V z YR U, U, V #. w x/y, T2 b /L /L 7&apos;2, w U, T, V w x/y, T2 z /L a, V #. w x/y/z, b /L U, alb, x/y/z, T1, w U, x/y, V #- YR V VYw[Y/X] z /L x/y/z, T, V U, x/y, V T z /L x/y/z, T, V w[X&apos; VR U, zlylz, T, V = VYw[YI.X] the &apos;full&apos; version being used, incorporating a change of bound variable. See earlier footnote. 125 This is enough to show orderly proofs for VX.X/X and VX.(X\X)/X. For VX.X/(X\np) and VX.((cn\cn)/(s\ X)/(X/np)) we must further show if there is a proof of whose last step is not a (/R) inference introducing x/y, then there is an equivalent proof whose last step is a (/R) inference introducing x/y. One can show this by showing if there is a proof whose last two steps use (/R) followed by some rule *, then there is an equivalent proof reversing that order. (15) and (16) illustrate this. U, /R b /L U, alb, T, V = xly (16) U, a, V, y x T b U, a, T, V, y x /R U, alb, T, V much by way of a sketch of a proof. put the fact that orderly proofs exist to the following use. For sequents whose positive quantifiers are drawn from the list in (5), one can be sure that if they have proofs at all, they have a proofs which instantiate quantifiers &apos;one at a time&apos;. One at time in the sense that once a there is a (VL) inference, one can suppose there will be no more (VL) on the branches leading to the first occurrences of a Vt sequents. Three in mind Observation One, the question whether a given choice, ai, for the value of the quantified variable is a good one will come to depend, sooner or later, on the derivability of a certain set of Vt sequents, containing one VI sequent and one or two VT sequents. In relation to this consider the following: 1 (Unknown elimination) and are equivalent There is an x such that w, x (ii) , T1, V w, . . . , U, , V The proof of this, from left to right uses Cut and Cut-Elimination. For example, from x, V \ = we deduce Y)-F Cut HU, Ti, Therefore by Cut V = w. For the right left direction, let me say that a shorthand for (w \ui . • .\u,) /vn • .. /vi. We the be for x, V Also each of the IP from the assumed = w, simply by sufficiently many slash Right inferences. On the basis of these observations, I suggest the decision procedure: 6 1 (Decision procedure) possibly empty sequences of sequents, let rewrite procedure R. be defined as follows A, x, r, xis atomic A, w, 0, T w follows some ride of than (IL) A, r, X is an there are no other in F V X, x, r A , . . . , , V w , sequent T w is accepted sequence consisting of just this sequence can be rewritten to the sequence by The fourth clause slightly oversimplifies what I intend in the two respects that (i) the rewrite can apply the V w, T1,X, ..., X occur dispersed in any order through the sequence, and (ii) can only apply if the unknown not occur in sequents other than those mentioned. Note because of clause 3, there will only ever be one unknown in the state of the procedure. This corresponds to Observation Two above. I will show that this procedure is terminating and correct when applied to sequents whose positive quantifiers are drawn from (5). By of the procedure, I mean that the proaccepts r if The implication left to right I will call soundness, and from right to left completeness. There is a term associated version of this decision procedure, rewriting a pair consisting of a set of equations, and a sequence of term-associated sequents. On the basis of the discussion earlier, for the most part the the reader should be able to easily imagine what embellishments are required to the clauses of the rewrite. I will just give the full version of the Clause 4 rewrite. The input will be: Equations:E : V : : : F The output will be: (1)2 = = AvlAulx1q, • • , = Ay; A ui, • • , n: , V : w : r 3.1 Termination If there are any rewrites possible for a sequence there at most finitely many. So we require that no rewrite series can be infinitely long. Call the sequents feaan unknown a set. any one time this paper, I have discovered that the above observation concerning unknown elimination have been made before [Moortgat, 1988], [Benthem, 1990]. This will be further discussed at the end of the paper 126 is at most one linked set. Let the degree, a sequence be the total number of connectives. All rewrites on a sequence that has no linked set lower the degree. So rewriting can only go on finitely long before it stops or a linked set is introduced. A linked set is introduced by a clause 3 rewrite, introducing an unknown into some particular sequent. Call this While the sequence contains a linked set, either the degree of the whole sequence goes down, and the sequence remains one containing a linked set (clause 1, clause 2), or the sequence becomes one no longer containing a linked set (clause 4). So a rewrite can only go on finitely long before it either stops, or has a phase where a linked set is introduced and then eliminated. Call the sequents which result from the elimination of the unknown in a</abstract>
<intro confidence="0.394111">4 rewrite, the Now consider-</intro>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="false">
<authors>
<author>a</author>
</authors>
<title>every man walks (1) b. every man loves a woman (2) c. John believes Mary thinks every man walks (3) d. every man a woman 2 flowers (0) e. every man loves a woman 2 flowers (0) f. every man gave a woman 2 flowers (6) g. (omdat) John gek en Mary dom is (1) h. man who John told to go (1) i. man who John told Mary to go (0)</title>
<marker>a, </marker>
<rawString> (17) a. every man walks (1) b. every man loves a woman (2) c. John believes Mary thinks every man walks (3) d. every man a woman 2 flowers (0) e. every man loves a woman 2 flowers (0) f. every man gave a woman 2 flowers (6) g. (omdat) John gek en Mary dom is (1) h. man who John told to go (1) i. man who John told Mary to go (0)</rawString>
</citation>
<citation valid="false">
<authors>
<author>Johan van Benthem</author>
</authors>
<title>Categorial Grammar meets unification. In Unification formalisms: syntax, semantics and implementation, J.Wedekind et al.(eds.).</title>
<marker>[Benthem, 1990]</marker>
<rawString>Johan van Benthem. Categorial Grammar meets unification. In Unification formalisms: syntax, semantics and implementation, J.Wedekind et al.(eds.).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Martin Emms</author>
</authors>
<title>Polymorphic Quantifiers.</title>
<date>1989</date>
<booktitle>In Proceedings of the Seventh Amsterdam Colloquium,</booktitle>
<pages>139--163</pages>
<editor>Torenvliet, M. S. L. (ed.),</editor>
<location>Amsterdam,</location>
<marker>[Emms, 1989]</marker>
<rawString>Martin Emms. Polymorphic Quantifiers. In Proceedings of the Seventh Amsterdam Colloquium, pages 139-163, Torenvliet, M. S. L. (ed.), Institute for Language, Logic and Information, Amsterdam, December 1989.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Martin Emms</author>
</authors>
<title>Polymorphic Quantifiers.</title>
<date>1991</date>
<booktitle>In Studies in Categorial Grammar</booktitle>
<volume>5</volume>
<pages>65--112</pages>
<editor>Barry, G. and Morrill, G. (eds.) ,</editor>
<publisher>for Cognitive Science.</publisher>
<location>Edinburgh, Centre</location>
<marker>[Emms, 1991]</marker>
<rawString>Martin Emms. Polymorphic Quantifiers. In Studies in Categorial Grammar Barry, G. and Morrill, G. (eds.) , pages 65-112, Volume 5 of Working Papers in Cognitive Science, 1991, Edinburgh, Centre for Cognitive Science.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Martin Emms</author>
</authors>
<title>Logical Ambiguity.</title>
<tech>PhD Thesis,</tech>
<institution>Centre of Cognitive Science,</institution>
<location>Edinburgh.</location>
<marker>[Emms, 1992]</marker>
<rawString>Martin Emms. Logical Ambiguity. PhD Thesis, Centre of Cognitive Science, Edinburgh.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Martin Emms</author>
<author>Hans Leiss</author>
</authors>
<title>Cut Elimination for Polymorphic Lambek Calculus.</title>
<tech>CIS Technical Report, forthcoming.</tech>
<marker>[Emms and Leiss, forthcoming]</marker>
<rawString>Martin Emms and Hans Leiss. Cut Elimination for Polymorphic Lambek Calculus. CIS Technical Report, forthcoming.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Dov Gabbay</author>
</authors>
<title>Semantical Investigations in Heyting&apos;s Intuitionistic Logic</title>
<location>Dordrecht: Reidel.</location>
<marker>[Gabbay, 1974]</marker>
<rawString>Dov Gabbay. Semantical Investigations in Heyting&apos;s Intuitionistic Logic Dordrecht: Reidel.</rawString>
</citation>
<citation valid="false">
<authors>
<author>J Y Girard</author>
</authors>
<title>Interpretation Fonctionelle et Elimination des Coupres de L&apos;Arithmetique d&apos;Order Superieur. PhD Thesis. [Hendriks, 19891 Herman Hendriks. Cut Elimination and Semantics in Lambek Calculus Manuscript available from</title>
<journal>American Mathematical Monthly,</journal>
<pages>65--154</pages>
<institution>University of Amsterdam.</institution>
<note>To appear in his PhD thesis</note>
<marker>[Girard, 1972]</marker>
<rawString>J. Y. Girard. Interpretation Fonctionelle et Elimination des Coupres de L&apos;Arithmetique d&apos;Order Superieur. PhD Thesis. [Hendriks, 19891 Herman Hendriks. Cut Elimination and Semantics in Lambek Calculus Manuscript available from University of Amsterdam. To appear in his PhD thesis &apos;Studied Flexibility&apos;. [Lambek, 19581 Joachim Lambek. The mathematics of sentence structure. American Mathematical Monthly, 65:154-170,1958.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Daniel Mey</author>
</authors>
<title>Investigations on a Calculus Without Contractions.</title>
<tech>PhD Thesis,</tech>
<institution>Swiss Federal Institute of Technology,</institution>
<location>Zurich.</location>
<marker>[Mey, 1992]</marker>
<rawString>Daniel Mey. Investigations on a Calculus Without Contractions. PhD Thesis, Swiss Federal Institute of Technology, Zurich.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Michael Moortgat</author>
</authors>
<title>Categorial Investigations: Logical and Linguistic Aspects of the Lambek Calculus.</title>
<publisher>Foris Publications.</publisher>
<location>Dordrecht:</location>
<marker>[Moortgat, 1988]</marker>
<rawString>Michael Moortgat. Categorial Investigations: Logical and Linguistic Aspects of the Lambek Calculus. Dordrecht: Foris Publications.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael Moortgat</author>
</authors>
<title>Unambiguous proof representations for the Lambek Calculus.</title>
<date>1989</date>
<booktitle>In Proceedings of the Seventh Amsterdam Colloquium,</booktitle>
<pages>389--401</pages>
<editor>Torenvliet, M. S. L. (ed.),</editor>
<location>Amsterdam,</location>
<marker>[Moortgat, 1989]</marker>
<rawString>Michael Moortgat. Unambiguous proof representations for the Lambek Calculus. In Proceedings of the Seventh Amsterdam Colloquium, pages 389-401, Torenvliet, M. S. L. (ed.), Institute for Language, Logic and Information, Amsterdam, December 1989.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J 0 Reynolds</author>
</authors>
<title>Towards a theory of type structure. In Colloquium sur la programmalion,</title>
<date>1974</date>
<pages>408--423</pages>
<marker>[Reynolds, 1974]</marker>
<rawString>J.0 Reynolds. Towards a theory of type structure. In Colloquium sur la programmalion, 1974, pages 408-423.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>