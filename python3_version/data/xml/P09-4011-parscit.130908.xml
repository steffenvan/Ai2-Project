<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.033769">
<title confidence="0.998026">
Combining POMDPs trained with User Simulations and
Rule-based Dialogue Management in a Spoken Dialogue System
</title>
<author confidence="0.999408">
Sebastian Varges, Silvia Quarteroni, Giuseppe Riccardi, Alexei V. Ivanov, Pierluigi Roberti
</author>
<affiliation confidence="0.9983725">
Department of Information Engineering and Computer Science
University of Trento
</affiliation>
<address confidence="0.664726">
38050 Povo di Trento, Italy
</address>
<email confidence="0.994187">
{varges|silviaq|riccardi|ivanov|roberti}@disi.unitn.it
</email>
<sectionHeader confidence="0.993759" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.9997644375">
Over several years, we have developed an
approach to spoken dialogue systems that
includes rule-based and trainable dialogue
managers, spoken language understanding
and generation modules, and a compre-
hensive dialogue system architecture. We
present a Reinforcement Learning-based
dialogue system that goes beyond standard
rule-based models and computes on-line
decisions of the best dialogue moves. The
key concept of this work is that we bridge
the gap between manually written dia-
log models (e.g. rule-based) and adaptive
computational models such as Partially
Observable Markov Decision Processes
(POMDP) based dialogue managers.
</bodyText>
<sectionHeader confidence="0.9612115" genericHeader="method">
1 Reinforcement Learning-based
Dialogue Management
</sectionHeader>
<bodyText confidence="0.999945307692308">
In recent years, Machine Learning techniques,
in particular Reinforcement Learning (RL), have
been applied to the task of dialogue management
(DM) (Levin et al., 2000; Williams and Young,
2006). A major motivation is to improve robust-
ness in the face of uncertainty, for example due
to speech recognition errors. A further motivation
is to improve adaptivity w.r.t. different user be-
haviour and application/recognition environments.
The Reinforcement Learning framework is attrac-
tive because it offers a statistical model represent-
ing the dynamics of the interaction between sys-
tem and user. This is in contrast to the super-
vised learning approach of learning system be-
haviour based on a fixed corpus (Higashinaka et
al., 2003). To explore the range of dialogue man-
agement strategies, a simulation environment is
required that includes a simulated user (Schatz-
mann et al., 2006) if one wants to avoid the pro-
hibitive cost of using human subjects.
We demonstrate the various parameters that in-
fluence the learnt dialogue management policy by
using pre-trained policies (section 4). The appli-
cation domain is a tourist information system for
accommodation and events in the local area. The
domain of the trained DMs is identical to that of a
rule-based DM that was used by human users (sec-
tion 2), allowing us to compare the two directly.
The state of the POMDP keeps track of the SLU
hypotheses in the form of domain concepts (10 in
the application domain, e.g. main activity, star rat-
ing of hotels, dates etc.) and their values. These
values may be abstracted into ‘known/unknown,’
for example, increasing the likelihood that the sys-
tem re-visits a dialogue state which it can exploit.
Representing the verification status of the con-
cepts in the state, influences – in combination with
the user model (section 1.2) and N best hypotheses
– if the system learns to use clarification questions.
</bodyText>
<subsectionHeader confidence="0.9975785">
1.1 The exploration/exploitation trade-off in
reinforcement learning
</subsectionHeader>
<bodyText confidence="0.967585">
The RL-DM maintains a policy, an internal data
structure that keeps track of the values (accumu-
lated rewards) of past state-action pairs. The goal
of the learner is to optimize the long-term reward
by maximizing the ‘Q-Value’ Qπ(st, a) of a policy
7r for taking action a at time t. The expected cu-
mulative value V of a state s is defined recursively
as Vπ(st) =
</bodyText>
<equation confidence="0.9471305">
E �7r(st, a) Pa st,st+1[Rast,st+1 + γVπ(st+1)].
a st+1
</equation>
<bodyText confidence="0.99943675">
Since an analytic solution to finding an optimal
value function is not possible for realistic dialogue
scenarios, V (s) is estimated by dialogue simula-
tions.
To optimize Q and populate the policy with ex-
pected values, the learner needs to explore un-
tried actions (system moves) to gain more expe-
riences, and combine this with exploitation of the
</bodyText>
<page confidence="0.993668">
41
</page>
<note confidence="0.969038">
Proceedings of the ACL-IJCNLP 2009 Software Demonstrations, pages 41–44,
Suntec, Singapore, 3 August 2009. c�2009 ACL and AFNLP
</note>
<figure confidence="0.8418448">
! ! ! !! ! ! !
! ! ! ! ! !
! ! ! !
!
! !
!
0 2000 4000 6000 8000 10000
# sessions
(a) 0% exploration, 100% exploitation: learner does not find
optimal dialogue strategy
</figure>
<equation confidence="0.97116743902439">
� � � � � � � � � � � � � � � � � � � � � � � � � � � � � � �
� � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � �
� � � � �
� � � � � � �
� � �
�
� �
� � �
� �
� �
� �
� �
� � � � �
� �
� � � � � � � �
� � � � � � � � � � �
� �
i
�
� � � � � �
� � � � �
�
� � � � � � � � � � � �
� � � � � � � �
�
�
� � �
� � � �
� �
� �
� � � �
� �
� � � �
� � � �
� � � � � � � � � �
� �
�
�
� � � � � � � � �®i- w%oe
aN
_107&amp;quot;K
</equation>
<figure confidence="0.9761731875">
°8
�
�
0 2000 4000 6000 8000 10000
# sessions
(b) 20% exploration, 80% exploitation: noticeable increase in
reward, hitting upper bound
reward
�8
reward �8
�
�
b
e
� �
m
</figure>
<figureCaption confidence="0.999987">
Figure 1: Exploration/exploitation trade-off
</figureCaption>
<bodyText confidence="0.9998682">
already known successful actions to also ensure
high reward. In principle there is no distinction
between training and testing. Learning in the RL-
based dialogue manager is strongly dependent on
the chosen exploration/exploitation trade-off. This
is determined by the action selection policy, which
for each system turn decides probabilistically (&amp;
greedy, softmax) if to exploit the currently known
best action of the policy for the believed dialogue
state, or to explore an untried action. Figure 1(a)
shows, for a subdomain of the application domain,
how the reward (expressed as minimizing costs)
reaches an upper bound early during 10,000 sim-
ulated dialogue sessions (each dot represents the
average of 10 rewards at a particular session num-
ber). Note that if the policy provides no matching
state, the system can only explore, and thus a cer-
tain amount of exploration always takes place. In
contrast, with exploration the system is able to find
lower cost solutions (figure 1(b)).
</bodyText>
<subsectionHeader confidence="0.95271">
1.2 User Simulation
</subsectionHeader>
<bodyText confidence="0.999979513513513">
In order to conduct thousands of simulated dia-
logues, the DM needs to deal with heterogeneous
but plausible user input. For this purpose, we have
designed a User Simulator (US) which bootstraps
likely user behaviors starting from a small corpus
of 74 in-domain dialogs, acquired using the rule-
based version of the SDS (section 2). The task of
the US is to simulate the output of the SLU mod-
ule to the DM, hence providing it with a ranked
list of SLU hypotheses.
A list of possible user goals is stored in a
database table (section 3) using a frame/slot rep-
resentation. For each simulated dialogue, one or
more user goals are randomly selected. The User
Simulator’s task is to mimic a user wanting to per-
form such task(s). At each turn, the US mines the
previous system dialog act to obtain the concepts
required by the DM and obtains the corresponding
values (if any) from the current user goal.
The output of the user model proper is passed
to an error model that simulates the “noisy chan-
nel” recognition errors based on statistics from the
dialogue corpus. These concern concept values as
well as other dialogue phenomena such as noIn-
put, noMatch and hangUp. If the latter phenomena
occur, they are propagated to the DM directly; oth-
erwise, the following US step is to attach plausible
confidences to concept-value pairs, also based on
the dialogue corpus. Finally, concept-value pairs
are combined in an SLU hypothesis and, as in the
regular SLU module, a cumulative utterance-level
confidence is computed, determining the rank of
each of the n hypotheses. The probability of a
given concept-value observation at time t+1 given
the system act at time t, named as,t, and the ses-
sion user goal g., P(ot+1jas,t, g.), is obtained by
combining the error model and the user model:
</bodyText>
<equation confidence="0.955481">
P(ot+1ja.,t+1) · P(a.,t+1jas,t, g.)
</equation>
<bodyText confidence="0.899362">
where a.,t+1 is the true user action.
</bodyText>
<sectionHeader confidence="0.988034" genericHeader="method">
2 Rule-based Dialogue Management
</sectionHeader>
<bodyText confidence="0.999996818181818">
A rule-based dialogue manager was developed as a
meaningful comparison to the trained DM, to ob-
tain training data from human-system interaction
for the user simulator, and to understand the prop-
erties of the domain (Varges et al., 2008). Rule-
based dialog management works in two stages:
retrieving and preprocessing facts (tuples) taken
from a dialogue state database (section 3), and
inferencing over those facts to generate a system
response. We distinguish between the ‘context
model’ of the first phase – essentially allowing
</bodyText>
<page confidence="0.998015">
42
</page>
<bodyText confidence="0.999950583333333">
more recent values for a concept to override less
recent ones – and the ‘dialog move engine’ (DME)
of the second phase. In the second stage, accep-
tor rules match SLU results to dialogue context,
for example perceived user concepts to open ques-
tions. This may result in the decision to verify the
application parameter in question, and the action
is verbalized by language generation rules. If the
parameter is accepted, application dependent task
rules determine the next parameter to be acquired,
resulting in the generation of an appropriate re-
quest.
</bodyText>
<sectionHeader confidence="0.959449" genericHeader="method">
3 Data-centric System Architecture
</sectionHeader>
<bodyText confidence="0.9999068">
All data is continuously stored in a database which
web-service based processing modules (such as
SLU, DM and language generation) access. This
architecture also allows us to access the database
for immediate visualization. The system presents
an example of a “thick” inter-module informa-
tion pipeline architecture. Individual components
exchange data by means of sets of hypotheses
complemented by the detailed conversational con-
text. The database concentrates heterogeneous
types of information at various levels of descrip-
tion in a uniform way. This facilitates dialog eval-
uation, data mining and online learning because
data is available for querying as soon as it has
been stored. There is no need for separate logging
mechanisms. Multiple systems/applications are
available on the same infrastructure due to a clean
separation of its processing modules (SLU, DM,
NLG etc.) from data storage (DBMS), and moni-
toring/analysis/visualization and annotation tools.
</bodyText>
<sectionHeader confidence="0.953724" genericHeader="method">
4 Visualization Tool
</sectionHeader>
<bodyText confidence="0.997404621621622">
We developed a live web-based dialogue visual-
ization tool that displays ongoing and past di-
alogue utterances, semantic interpretation confi-
dences and distributions of confidences for incom-
ing user acts, the dialogue manager state, and
policy-based decisions and updating. An exam-
ple of the visualization tool is given in figures 3
(dialogue logs) and 4 (annotation view). We are
currently extending the visualization tool to dis-
play the POMDP-related information that is al-
ready present in the dialogue database.
The visualization tool shows how our dedicated
SLU module produces a number of candidate se-
mantic parses using the semantics of a domain on-
tology and the output of ASR.
The visualization of the internal representation
of the POMDP-DM includes the N best dialogue
states after each user utterance and the reranking
of the action set. At the end of each dialogue ses-
sion, the reward and the policy updates are shown,
i.e. new or updated state entries and action val-
ues. Another plot relates the current dialogue’s
reward to the reward of previous dialogues (as in
plots 1(b) and 1(a)).
Users are able to talk with several systems
(via SIP phone connection to the dialogue system
server) and see their dialogues in the visualization
tool. They are able to compare the rule-based
system, a randomly exploring learner that has
not been trained yet, and several systems that
use various pre-trained policies. These policies
are obtained by dialogue simulations with user
models based on data obtained from human-
machine dialogues with the original rule-based
dialogue manager. The web tool is available
at http://cicerone.dit.unitn.it/
DialogStatistics/.
</bodyText>
<sectionHeader confidence="0.997304" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.9998782">
This work was partially supported by the Euro-
pean Commission Marie Curie Excellence Grant
for the ADAMACH project (contract No. 022593)
and by LUNA STREP project (contract No.
33549).
</bodyText>
<sectionHeader confidence="0.9986" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999861">
R. Higashinaka, M. Nakano, and K. Aikawa. 2003.
Corpus-based discourse understanding in spoken di-
alogue systems. In ACL-03, Sapporo, Japan.
E. Levin, R. Pieraccini, and W. Eckert. 2000. A
stochastic model of human-machine interaction for
learning dialog strategies. IEEE Transactions on
Speech and Audio Processing, 8(1).
J. Schatzmann, K. Weilhammer, M. Stuttle, and
S. Young. 2006. A Survey of Statistical User Sim-
ulation Techniques for Reinforcement-Learning of
Dialogue Management Strategies. Knowledge En-
gineering Review, 21(2):97–126.
S. Varges, G. Riccardi, and S. Quarteroni. 2008. Per-
sistent Information State in a Data-Centric Architec-
ture. In SIGDIAL-08, Columbus, Ohio.
J. D. Williams and S. Young. 2006. Partially Ob-
servable Markov Decision Processes for Spoken Di-
alog Systems. Computer Speech and Language,
21(2):393–422.
</reference>
<page confidence="0.999781">
43
</page>
<figure confidence="0.999285878787879">
Corpus
Turn
Setup
VXML
page
http-req
SLU
http-req
Ids
DB
DM
http-req
NLG
http-req
VXMLgen
ASR
TTS
http-req
HTTP request
ASR results
SLU results
DM context/results
NLG context/results
Simulation
Environment
User Goals
DM
DB
NLG
User Model
Error Model
(a) Turn-level information flow in the data-centric SDS ar- (b) User simulator interface with the dialogue manager
chitecture
</figure>
<figureCaption confidence="0.9990482">
Figure 2: Architecture for interacting with human user (left) and simulated user (right)
Figure 3: Left pane: overview of all dialogues. Right pane: visualization of a system opening prompt fol-
lowed by the user’s activity request. All distinct SLU hypotheses (concept-value combinations) deriving
from ASR are ranked based on concept-level confidence (2 in this turn).
Figure 4: Turn annotation of task success based on previously filled dialog transcriptions (left box).
</figureCaption>
<page confidence="0.995869">
44
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.000038">
<title confidence="0.999198">Combining POMDPs trained with User Simulations and Rule-based Dialogue Management in a Spoken Dialogue System</title>
<author confidence="0.999955">Sebastian Varges</author>
<author confidence="0.999955">Silvia Quarteroni</author>
<author confidence="0.999955">Giuseppe Riccardi</author>
<author confidence="0.999955">Alexei V Ivanov</author>
<author confidence="0.999955">Pierluigi Roberti</author>
<affiliation confidence="0.9999375">Department of Information Engineering and Computer Science University of Trento</affiliation>
<address confidence="0.999572">38050 Povo di Trento, Italy</address>
<abstract confidence="0.998322223404255">Over several years, we have developed an approach to spoken dialogue systems that includes rule-based and trainable dialogue managers, spoken language understanding and generation modules, and a comprehensive dialogue system architecture. We present a Reinforcement Learning-based dialogue system that goes beyond standard rule-based models and computes on-line decisions of the best dialogue moves. The key concept of this work is that we bridge the gap between manually written dialog models (e.g. rule-based) and adaptive computational models such as Partially Observable Markov Decision Processes (POMDP) based dialogue managers. 1 Reinforcement Learning-based Dialogue Management In recent years, Machine Learning techniques, in particular Reinforcement Learning (RL), have been applied to the task of dialogue management (DM) (Levin et al., 2000; Williams and Young, 2006). A major motivation is to improve robustness in the face of uncertainty, for example due to speech recognition errors. A further motivation is to improve adaptivity w.r.t. different user behaviour and application/recognition environments. The Reinforcement Learning framework is attractive because it offers a statistical model representing the dynamics of the interaction between system and user. This is in contrast to the supervised learning approach of learning system behaviour based on a fixed corpus (Higashinaka et al., 2003). To explore the range of dialogue management strategies, a simulation environment is required that includes a simulated user (Schatzmann et al., 2006) if one wants to avoid the prohibitive cost of using human subjects. We demonstrate the various parameters that influence the learnt dialogue management policy by using pre-trained policies (section 4). The application domain is a tourist information system for accommodation and events in the local area. The domain of the trained DMs is identical to that of a rule-based DM that was used by human users (section 2), allowing us to compare the two directly. The state of the POMDP keeps track of the SLU hypotheses in the form of domain concepts (10 in the application domain, e.g. main activity, star rating of hotels, dates etc.) and their values. These values may be abstracted into ‘known/unknown,’ for example, increasing the likelihood that the system re-visits a dialogue state which it can exploit. Representing the verification status of the concepts in the state, influences – in combination with the user model (section 1.2) and N best hypotheses – if the system learns to use clarification questions. 1.1 The exploration/exploitation trade-off in reinforcement learning The RL-DM maintains a policy, an internal data structure that keeps track of the values (accumulated rewards) of past state-action pairs. The goal of the learner is to optimize the long-term reward maximizing the ‘Q-Value’ a policy taking action time The expected cuvalue a state defined recursively = Since an analytic solution to finding an optimal value function is not possible for realistic dialogue estimated by dialogue simulations. optimize populate the policy with expected values, the learner needs to explore untried actions (system moves) to gain more experiences, and combine this with exploitation of the 41 of the ACL-IJCNLP 2009 Software pages 41–44, Singapore, 3 August 2009. ACL and AFNLP ! ! ! !! ! ! ! ! ! ! ! ! ! ! ! ! ! ! 0 2000 4000 6000 8000 10000 (a) 0% exploration, 100% exploitation: learner does not find optimal dialogue strategy � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � i � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � aN _107&amp;quot;K � � 0 2000 4000 6000 8000 10000 (b) 20% exploration, 80% exploitation: noticeable increase in reward, hitting upper bound reward �8 reward �8 � � b e � � m Figure 1: Exploration/exploitation trade-off already known successful actions to also ensure high reward. In principle there is no distinction between training and testing. Learning in the RLbased dialogue manager is strongly dependent on the chosen exploration/exploitation trade-off. This is determined by the action selection policy, which each system turn decides probabilistically greedy, softmax) if to exploit the currently known best action of the policy for the believed dialogue state, or to explore an untried action. Figure 1(a) shows, for a subdomain of the application domain, how the reward (expressed as minimizing costs) reaches an upper bound early during 10,000 simulated dialogue sessions (each dot represents the average of 10 rewards at a particular session number). Note that if the policy provides no matching state, the system can only explore, and thus a certain amount of exploration always takes place. In contrast, with exploration the system is able to find lower cost solutions (figure 1(b)). 1.2 User Simulation In order to conduct thousands of simulated dialogues, the DM needs to deal with heterogeneous but plausible user input. For this purpose, we have designed a User Simulator (US) which bootstraps likely user behaviors starting from a small corpus of 74 in-domain dialogs, acquired using the rulebased version of the SDS (section 2). The task of the US is to simulate the output of the SLU module to the DM, hence providing it with a ranked list of SLU hypotheses. A list of possible user goals is stored in a database table (section 3) using a frame/slot representation. For each simulated dialogue, one or more user goals are randomly selected. The User Simulator’s task is to mimic a user wanting to perform such task(s). At each turn, the US mines the previous system dialog act to obtain the concepts required by the DM and obtains the corresponding values (if any) from the current user goal. The output of the user model proper is passed to an error model that simulates the “noisy channel” recognition errors based on statistics from the dialogue corpus. These concern concept values as well as other dialogue phenomena such as noInput, noMatch and hangUp. If the latter phenomena occur, they are propagated to the DM directly; otherwise, the following US step is to attach plausible confidences to concept-value pairs, also based on the dialogue corpus. Finally, concept-value pairs are combined in an SLU hypothesis and, as in the regular SLU module, a cumulative utterance-level confidence is computed, determining the rank of of the The probability of a concept-value observation at time system act at time named and the sesuser goal is obtained by combining the error model and the user model: is the true user action. 2 Rule-based Dialogue Management A rule-based dialogue manager was developed as a meaningful comparison to the trained DM, to obtain training data from human-system interaction for the user simulator, and to understand the properties of the domain (Varges et al., 2008). Rulebased dialog management works in two stages: retrieving and preprocessing facts (tuples) taken from a dialogue state database (section 3), and inferencing over those facts to generate a system response. We distinguish between the ‘context model’ of the first phase – essentially allowing 42 more recent values for a concept to override less recent ones – and the ‘dialog move engine’ (DME) of the second phase. In the second stage, acceptor rules match SLU results to dialogue context, for example perceived user concepts to open questions. This may result in the decision to verify the application parameter in question, and the action is verbalized by language generation rules. If the parameter is accepted, application dependent task rules determine the next parameter to be acquired, resulting in the generation of an appropriate request. 3 Data-centric System Architecture All data is continuously stored in a database which web-service based processing modules (such as SLU, DM and language generation) access. This architecture also allows us to access the database for immediate visualization. The system presents an example of a “thick” inter-module information pipeline architecture. Individual components exchange data by means of sets of hypotheses complemented by the detailed conversational context. The database concentrates heterogeneous types of information at various levels of description in a uniform way. This facilitates dialog evaluation, data mining and online learning because data is available for querying as soon as it has been stored. There is no need for separate logging mechanisms. Multiple systems/applications are available on the same infrastructure due to a clean separation of its processing modules (SLU, DM, NLG etc.) from data storage (DBMS), and monitoring/analysis/visualization and annotation tools. 4 Visualization Tool We developed a live web-based dialogue visualization tool that displays ongoing and past dialogue utterances, semantic interpretation confidences and distributions of confidences for incoming user acts, the dialogue manager state, and policy-based decisions and updating. An example of the visualization tool is given in figures 3 (dialogue logs) and 4 (annotation view). We are currently extending the visualization tool to display the POMDP-related information that is already present in the dialogue database. The visualization tool shows how our dedicated SLU module produces a number of candidate semantic parses using the semantics of a domain ontology and the output of ASR. The visualization of the internal representation the POMDP-DM includes the dialogue states after each user utterance and the reranking of the action set. At the end of each dialogue session, the reward and the policy updates are shown, i.e. new or updated state entries and action values. Another plot relates the current dialogue’s reward to the reward of previous dialogues (as in plots 1(b) and 1(a)). Users are able to talk with several systems (via SIP phone connection to the dialogue system server) and see their dialogues in the visualization tool. They are able to compare the rule-based system, a randomly exploring learner that has not been trained yet, and several systems that use various pre-trained policies. These policies are obtained by dialogue simulations with user models based on data obtained from humanmachine dialogues with the original rule-based dialogue manager. The web tool is available</abstract>
<web confidence="0.986078">http://cicerone.dit.unitn.it/</web>
<note confidence="0.739696125">Acknowledgments This work was partially supported by the European Commission Marie Curie Excellence Grant for the ADAMACH project (contract No. 022593) and by LUNA STREP project (contract No. 33549). References R. Higashinaka, M. Nakano, and K. Aikawa. 2003. Corpus-based discourse understanding in spoken disystems. In Sapporo, Japan. E. Levin, R. Pieraccini, and W. Eckert. 2000. A stochastic model of human-machine interaction for dialog strategies. Transactions on and Audio 8(1). J. Schatzmann, K. Weilhammer, M. Stuttle, and S. Young. 2006. A Survey of Statistical User Simulation Techniques for Reinforcement-Learning of Management Strategies. En- 21(2):97–126. S. Varges, G. Riccardi, and S. Quarteroni. 2008. Persistent Information State in a Data-Centric Architec- In Columbus, Ohio. J. D. Williams and S. Young. 2006. Partially Observable Markov Decision Processes for Spoken Di- Systems. Speech and 21(2):393–422. 43 Corpus Turn Setup VXML page</note>
<web confidence="0.767101">http-req SLU http-req</web>
<title confidence="0.484306">Ids DB DM</title>
<web confidence="0.730252333333333">http-req NLG http-req</web>
<abstract confidence="0.426378666666667">VXMLgen ASR TTS</abstract>
<web confidence="0.924535">http-req</web>
<title confidence="0.968407375">HTTP request Simulation Environment User Goals DM DB NLG User Model</title>
<author confidence="0.803681">Error Model</author>
<abstract confidence="0.884273714285714">(a) Turn-level information flow in the data-centric SDS ar- (b) User simulator interface with the dialogue manager chitecture Figure 2: Architecture for interacting with human user (left) and simulated user (right) Figure 3: Left pane: overview of all dialogues. Right pane: visualization of a system opening prompt folby the user’s activity request. All hypotheses (concept-value combinations) deriving from ASR are ranked based on concept-level confidence (2 in this turn). Figure 4: Turn annotation of task success based on previously filled dialog transcriptions (left box).</abstract>
<intro confidence="0.654709">44</intro>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>R Higashinaka</author>
<author>M Nakano</author>
<author>K Aikawa</author>
</authors>
<title>Corpus-based discourse understanding in spoken dialogue systems.</title>
<date>2003</date>
<booktitle>In ACL-03,</booktitle>
<location>Sapporo, Japan.</location>
<contexts>
<context position="1786" citStr="Higashinaka et al., 2003" startWordPosition="246" endWordPosition="249">lied to the task of dialogue management (DM) (Levin et al., 2000; Williams and Young, 2006). A major motivation is to improve robustness in the face of uncertainty, for example due to speech recognition errors. A further motivation is to improve adaptivity w.r.t. different user behaviour and application/recognition environments. The Reinforcement Learning framework is attractive because it offers a statistical model representing the dynamics of the interaction between system and user. This is in contrast to the supervised learning approach of learning system behaviour based on a fixed corpus (Higashinaka et al., 2003). To explore the range of dialogue management strategies, a simulation environment is required that includes a simulated user (Schatzmann et al., 2006) if one wants to avoid the prohibitive cost of using human subjects. We demonstrate the various parameters that influence the learnt dialogue management policy by using pre-trained policies (section 4). The application domain is a tourist information system for accommodation and events in the local area. The domain of the trained DMs is identical to that of a rule-based DM that was used by human users (section 2), allowing us to compare the two </context>
</contexts>
<marker>Higashinaka, Nakano, Aikawa, 2003</marker>
<rawString>R. Higashinaka, M. Nakano, and K. Aikawa. 2003. Corpus-based discourse understanding in spoken dialogue systems. In ACL-03, Sapporo, Japan.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Levin</author>
<author>R Pieraccini</author>
<author>W Eckert</author>
</authors>
<title>A stochastic model of human-machine interaction for learning dialog strategies.</title>
<date>2000</date>
<journal>IEEE Transactions on Speech and Audio Processing,</journal>
<volume>8</volume>
<issue>1</issue>
<contexts>
<context position="1225" citStr="Levin et al., 2000" startWordPosition="158" endWordPosition="161">ture. We present a Reinforcement Learning-based dialogue system that goes beyond standard rule-based models and computes on-line decisions of the best dialogue moves. The key concept of this work is that we bridge the gap between manually written dialog models (e.g. rule-based) and adaptive computational models such as Partially Observable Markov Decision Processes (POMDP) based dialogue managers. 1 Reinforcement Learning-based Dialogue Management In recent years, Machine Learning techniques, in particular Reinforcement Learning (RL), have been applied to the task of dialogue management (DM) (Levin et al., 2000; Williams and Young, 2006). A major motivation is to improve robustness in the face of uncertainty, for example due to speech recognition errors. A further motivation is to improve adaptivity w.r.t. different user behaviour and application/recognition environments. The Reinforcement Learning framework is attractive because it offers a statistical model representing the dynamics of the interaction between system and user. This is in contrast to the supervised learning approach of learning system behaviour based on a fixed corpus (Higashinaka et al., 2003). To explore the range of dialogue mana</context>
</contexts>
<marker>Levin, Pieraccini, Eckert, 2000</marker>
<rawString>E. Levin, R. Pieraccini, and W. Eckert. 2000. A stochastic model of human-machine interaction for learning dialog strategies. IEEE Transactions on Speech and Audio Processing, 8(1).</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Schatzmann</author>
<author>K Weilhammer</author>
<author>M Stuttle</author>
<author>S Young</author>
</authors>
<title>A Survey of Statistical User Simulation Techniques for Reinforcement-Learning of Dialogue Management Strategies.</title>
<date>2006</date>
<journal>Knowledge Engineering Review,</journal>
<volume>21</volume>
<issue>2</issue>
<contexts>
<context position="1937" citStr="Schatzmann et al., 2006" startWordPosition="269" endWordPosition="273">uncertainty, for example due to speech recognition errors. A further motivation is to improve adaptivity w.r.t. different user behaviour and application/recognition environments. The Reinforcement Learning framework is attractive because it offers a statistical model representing the dynamics of the interaction between system and user. This is in contrast to the supervised learning approach of learning system behaviour based on a fixed corpus (Higashinaka et al., 2003). To explore the range of dialogue management strategies, a simulation environment is required that includes a simulated user (Schatzmann et al., 2006) if one wants to avoid the prohibitive cost of using human subjects. We demonstrate the various parameters that influence the learnt dialogue management policy by using pre-trained policies (section 4). The application domain is a tourist information system for accommodation and events in the local area. The domain of the trained DMs is identical to that of a rule-based DM that was used by human users (section 2), allowing us to compare the two directly. The state of the POMDP keeps track of the SLU hypotheses in the form of domain concepts (10 in the application domain, e.g. main activity, st</context>
</contexts>
<marker>Schatzmann, Weilhammer, Stuttle, Young, 2006</marker>
<rawString>J. Schatzmann, K. Weilhammer, M. Stuttle, and S. Young. 2006. A Survey of Statistical User Simulation Techniques for Reinforcement-Learning of Dialogue Management Strategies. Knowledge Engineering Review, 21(2):97–126.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Varges</author>
<author>G Riccardi</author>
<author>S Quarteroni</author>
</authors>
<title>Persistent Information State in a Data-Centric Architecture. In</title>
<date>2008</date>
<booktitle>SIGDIAL-08,</booktitle>
<location>Columbus, Ohio.</location>
<contexts>
<context position="7930" citStr="Varges et al., 2008" startWordPosition="1446" endWordPosition="1449">omputed, determining the rank of each of the n hypotheses. The probability of a given concept-value observation at time t+1 given the system act at time t, named as,t, and the session user goal g., P(ot+1jas,t, g.), is obtained by combining the error model and the user model: P(ot+1ja.,t+1) · P(a.,t+1jas,t, g.) where a.,t+1 is the true user action. 2 Rule-based Dialogue Management A rule-based dialogue manager was developed as a meaningful comparison to the trained DM, to obtain training data from human-system interaction for the user simulator, and to understand the properties of the domain (Varges et al., 2008). Rulebased dialog management works in two stages: retrieving and preprocessing facts (tuples) taken from a dialogue state database (section 3), and inferencing over those facts to generate a system response. We distinguish between the ‘context model’ of the first phase – essentially allowing 42 more recent values for a concept to override less recent ones – and the ‘dialog move engine’ (DME) of the second phase. In the second stage, acceptor rules match SLU results to dialogue context, for example perceived user concepts to open questions. This may result in the decision to verify the applica</context>
</contexts>
<marker>Varges, Riccardi, Quarteroni, 2008</marker>
<rawString>S. Varges, G. Riccardi, and S. Quarteroni. 2008. Persistent Information State in a Data-Centric Architecture. In SIGDIAL-08, Columbus, Ohio.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J D Williams</author>
<author>S Young</author>
</authors>
<title>Partially Observable Markov Decision Processes for Spoken Dialog Systems.</title>
<date>2006</date>
<journal>Computer Speech and Language,</journal>
<volume>21</volume>
<issue>2</issue>
<contexts>
<context position="1252" citStr="Williams and Young, 2006" startWordPosition="162" endWordPosition="165">einforcement Learning-based dialogue system that goes beyond standard rule-based models and computes on-line decisions of the best dialogue moves. The key concept of this work is that we bridge the gap between manually written dialog models (e.g. rule-based) and adaptive computational models such as Partially Observable Markov Decision Processes (POMDP) based dialogue managers. 1 Reinforcement Learning-based Dialogue Management In recent years, Machine Learning techniques, in particular Reinforcement Learning (RL), have been applied to the task of dialogue management (DM) (Levin et al., 2000; Williams and Young, 2006). A major motivation is to improve robustness in the face of uncertainty, for example due to speech recognition errors. A further motivation is to improve adaptivity w.r.t. different user behaviour and application/recognition environments. The Reinforcement Learning framework is attractive because it offers a statistical model representing the dynamics of the interaction between system and user. This is in contrast to the supervised learning approach of learning system behaviour based on a fixed corpus (Higashinaka et al., 2003). To explore the range of dialogue management strategies, a simula</context>
</contexts>
<marker>Williams, Young, 2006</marker>
<rawString>J. D. Williams and S. Young. 2006. Partially Observable Markov Decision Processes for Spoken Dialog Systems. Computer Speech and Language, 21(2):393–422.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>