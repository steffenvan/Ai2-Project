<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<note confidence="0.860554">
Proceedings of EACL &apos;99
</note>
<title confidence="0.902059">
Geometry of Lexico-Syntactic Interaction
</title>
<author confidence="0.935168">
Glyn Morrill
</author>
<affiliation confidence="0.771452">
Departament de Llenguatges i Sistemes Informatics
</affiliation>
<address confidence="0.836594666666667">
Universitat Politecnica de Catalunya
Jordi Girona Salgado, 1-3
E-08034, Barcelona
</address>
<email confidence="0.996802">
morrill@lsi.upc.es
</email>
<sectionHeader confidence="0.942783" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.984363380952381">
Interaction of lexical and derivational
semantics ---for example substitution
and lambda conversion--- is typically
a part of the on-line interpretation
process. Proof-nets are to categorial
grammar what phrase markers are to
phrase structure grammar: unique
graphical structures underlying
equivalence classes of sequential
syntactic derivations; but the role of
proof-nets is deeper since they
integrate also semantics. In this paper
we show how interaction of lexical
and derivational semantics at the
lexico-syntactic interface can be
precomputed as a process of off-line
lexical compilation comprising Cut
elimination in partial proof-nets.
Introduction
Consider the following examples of
paraphrase:
</bodyText>
<listItem confidence="0.968263166666667">
(1) a. Frodo lives in Bag End.
b. Frodo inhabits Bag End.
C. ((in b) (live f))
(2) a. John tries to find Mary.
b. John seeks Mary.
C. ((try (find m)) j)
</listItem>
<bodyText confidence="0.957562294117647">
Typically, for at least (lb) and (2b) the
normalised semantic forms result from a
process of substitution and lambda
conversion subsequent to or simultaneous
with syntactic derivation. We show how
such interaction of lexical and
derivational semantics at the lexico-
syntactic interface can be precomputed as
a process of off-line lexical compilation
comprising Cut elimination in partial
proof-nets.
For accessibility, we devote in the
initial sections a considerable proportion
of space to an introduction to categorial
grammar oriented towards proof-nets; see
also Morrill (1994), Moortgat (1996) and
Carpenter (1997).
</bodyText>
<sectionHeader confidence="0.929885" genericHeader="keywords">
1 Categorial grammar
</sectionHeader>
<bodyText confidence="0.95669">
We consider categorial grammar with
category formulas F (categories) defined
by the following grammar:
</bodyText>
<listItem confidence="0.928086">
(3) a. ::= A 1 F\F 1 FIF 1 F•F
b. A ::=SINICNIPPI...
</listItem>
<bodyText confidence="0.959779777777778">
The categories in A are referred to as
atomic and correspond to the kinds of
expressions which are considered to be
&amp;quot;complete&amp;quot;. Fairly uncontroversially,
this class may be taken to include at least
sentences S and names N; what the class is
exactly is not fixed by the formalism.
Left division categories A\B CA under
B&apos;) are those of expressions (functors)
which concatenate with (arguments) in A
on the left to yield Bs. Right division
categories BIA (&apos;B over A&apos;) are those of
expressions (functors) which concatenate
with (arguments) in A on the right
yielding Bs. Product categories A•B are
those of expressions which are the result
of concatenating an A with a B; products
do not play a dominant role here.
More precisely, let L be the set of
strings (including the empty string E) over
a finite vocabulary V and let + be the
operation of concatenation (i.e. (L, +, E) is
the free monoid generated by V)&apos;. Each
category formula A is interpreted as a
subset [[A]] of L. When the interpretation
of atomic categories has been fixed, that
of complex categories is defined by (4).
</bodyText>
<listItem confidence="0.611816">
(4) [[A\B]] = {sI VS&apos;E [{M], s&apos;i-sE[[B]]}
[[B/A]] = {s1 VS&apos;E [[A]], s+s&apos;E[[B]]}
[[A•B]] = {si+s21 siE[[A]] &amp; s2e [[B]])
</listItem>
<bodyText confidence="0.805237">
I In fact Lambek (1958) excluded the empty
string ---and hence empty antecedents in the
calculus of (5)--- but it is convenient to include
it here.
</bodyText>
<page confidence="0.996608">
61
</page>
<note confidence="0.8156556">
Proceedings of EACL &apos;99
In general, given some type assignments
others may be inferred. Such reasoning is
precisely formulated in the Lambek
calculus L.
</note>
<sectionHeader confidence="0.908797" genericHeader="introduction">
2 Lambek sequent calculus
</sectionHeader>
<bodyText confidence="0.9792519">
In the sequent calculus of Lambek (1958)
a sequent F A consists of a sequence F
of &apos;input&apos; category formulas (the
antecedent) and an &apos;output&apos; category
formula A (the succedent). A sequent
states that the ordered concatenation of
expressions in the categories F yields an
expression of the category A. The valid
sequents are the theorems derivable from
the following axiom and rule schemata.2
</bodyText>
<equation confidence="0.952854238095238">
(5) a.
id
A=A
FA
Cut
b.
A,FB
F A\B
FA A1,B,A2C
Al, F, A\B, A2 C
C.
F, A B
F
FA A1,B,A2C
BIA, F, A2 C
d.
Fl =A F2 =&apos;B
Fl, F2 =A&apos;B
Fl, A, B, F2 C
•L
Fl,A.B,F2= C
</equation>
<footnote confidence="0.994453333333333">
2The completeness of the calculus with respect
to the intended interpretation was proved in
Pentus (1994).
</footnote>
<bodyText confidence="0.9634271">
F(n) and A(n) range over context
sequences of category formulas; A, B, and
A *B are referred to as the active
formulas. The calculus L lacks the usual
structural rules of permutation,
contraction and weakening. Adding
permutation collapses the two divisions
into a single non-directional implication
and yields the multiplicative fragment of
intuitionistic linear logic, known as the
</bodyText>
<subsectionHeader confidence="0.711435">
Lambek-van Benthem calculus LP.3
</subsectionHeader>
<bodyText confidence="0.991178875">
The validity of the id axiom and the
Cut rule follows from the reflexivity and
the transitivity respectively of set
containment. The calculus enjoys the
property of Cut elimination whereby
every proof has a Cut-free equivalent
(indeed, one in which only atomic id
axioms are used: what we shall call (In-
long sequent proofs).4 Thus, processing
can be performed using just the left (L)
and right (R) rules. These rules all
decompose active formulas A*B in the
left or the right of the conclusions into
subformulas A and B in the premises, and
have exactly one connective occurrence
less in the premises than in the
conclusion; therefore one can compute all
the (Cut-free) proofs of any sequent by
traversing the finite space of proof search
without Cut.
By way of illustration of the sequent
calculus, the following is a proof of a
theorem of lifting, or (subject) type
raising:
</bodyText>
<equation confidence="0.99318975">
(6)
NN S S
N, N\S S
N = S/(N\S)
</equation>
<bodyText confidence="0.821317222222222">
Where a labels the antecedent, the coding
of this proof as a lambda term ---what we
3Adding also contraction and weakening we
obtain the implicational and conjunctive
fragment of intuitionistic logic. Thus every
Lambek proof can be read as an intuitionistic
proof and has a constructive content which can
be identified with its intuitionistic normal form
natural deduction proof (Prawitz 1965) or, what
</bodyText>
<footnote confidence="0.766090428571429">
is the same thing under the Curry-Howard
correspondence, its normal form as a typed
lambda term.
4By &apos;equivalent&apos; we mean a proof of the same
theorem with the same constructive content (fn.
3).
•R
</footnote>
<page confidence="0.966023">
62
</page>
<bodyText confidence="0.885798">
Proceedings of EACL &apos;99
shall call the derivational semantics--- is
Xx(x a). The converse of lifting, lowering,
in (7) is not derivable. A proof of a
theorem of composition (it has as its
semantics functional composition) is
given in (8).
</bodyText>
<figure confidence="0.944406666666667">
(7) S/(N\S) N
B B C C
A A B, B\C C
A, A\B , B\C C \R
A\B, B\C A\C
A grammar contains a set of lexical
</figure>
<figureCaption confidence="0.602244">
assignments a: A. An expression
wi+...+wm is of category A just in case
wj+...+wm is the concatenation
aj+...+an of lexical expressions such
that ai: and Al, ..., An A is
</figureCaption>
<bodyText confidence="0.9784275">
valid. For instance, assuming the expected
lexical type assignments to proper names
and intransitive and transitive verbs, there
are the following derivations:
</bodyText>
<equation confidence="0.899589">
N=N S=S
N,N\S
john+runs: S
NN S S
NN N, N\S S
N, (N\S)/N, N = S
john+finds+mary: S
</equation>
<bodyText confidence="0.888745">
Ungrammaticality occurs when there is
no validity of the sequents arising by
lexical insertion, as in the following:
N\S, N S
</bodyText>
<sectionHeader confidence="0.980649333333333" genericHeader="method">
runs+john: S
3 Ambiguity and spurious
ambiguity
</sectionHeader>
<bodyText confidence="0.942728">
The sentence (12) is structurally
ambiguous.
(1 2) Sometimes it rains surprisingly.
There is a reading &amp;quot;it is surprising that
sometimes it rains&amp;quot; and another
&amp;quot;sometimes the manner in which it rains
is surprising&amp;quot;. As would be expected
there are in such a case distinct
derivations corresponding to alternative
scopings of the adverbials:
</bodyText>
<equation confidence="0.958595">
(13) a.
S/S, S, S\S = S
sometimes+it+rains+surprisingly: S
b.
S=S S S /L
S S S/S, S S \L
S/S, S, S\S = S
C.
S S S S \L
S=S S, S\S S
S/S, S, S\S S
</equation>
<bodyText confidence="0.9997164">
However, sometimes a non-ambiguous
expression also has more than one
sequent proof (even excluding Cut); thus
the sequent in (14a) has the proofs (14b)
and (14c).
</bodyText>
<equation confidence="0.993751090909091">
(1 4 ) a.
N/CN, CN, N\S = S
the+man+runs: S
b.
NN S S
CN CN N, N\S S
N/CN, CN, N\S S
C.
CN CN N N
N/CN, CN N S=S
N/CN, CN, N\S = S
</equation>
<bodyText confidence="0.9998744">
As the reader may check, N/CN, CN
S/(N\S) has three Cut-free proofs; in
general the combinatorial possibilities
multiply exponentially. This feature is
sometimes referred to as the problem of
spurious ambiguity or derivational
equivalence. It is regarded as problematic
computationally because it means that in
an exhaustive traversal of the proof search
space one must either repeat
</bodyText>
<page confidence="0.996232">
63
</page>
<bodyText confidence="0.992570321428571">
Proceedings of EACL &apos;99
subcomputations, or else perform book-
keeping to avoid so doing.
The problem is that different 3i-long
sequent derivations do not necessarily
represent different readings, and this is
the case because the sequent calculus
forces us to choose between a
sequentialisation of inferences ---in the
case of (14) /L and \L--- when in fact they
are not ordered by dependency and can
be performed in parallel.
The problem can be resolved by
defining stricter normalised proofs which
impose a unique ordering when
alternatives would otherwise be available
(Konig 1990, Hepple 1990, Hendriks
1993). However, while this removes
spurious ambiguity as a problem arising
from independence of inferences, it
signally fails to exploit the fact that such
inferences can be parallelised. Thus we
prefer the term &apos;derivational equivalence&apos;
to &apos;spurious ambiguity&apos; and interpret the
phenomenon not as a problem for
sequentialisation, but as an opportunity
for parallelism. This opportunity is
grasped in proof-nets.
</bodyText>
<sectionHeader confidence="0.990876" genericHeader="method">
4 Lambek proof-nets
</sectionHeader>
<bodyText confidence="0.999904928571428">
Proof-nets for L were developed by
Roorda (1991), adapting their original
introduction for linear logic in Girard
(1987). In proof-nets, the opposition of
formulas arising from their location in
either the antecedent or the succedent of
sequents is replaced by assignment of
polarity: input (negative) for antecedent
and output (positive) for succedent. A
proof-net is a kind of graph of polar
formulas.
First we define a more general concept
of proof structure. These are graphs
assembled out of the following links:
</bodyText>
<equation confidence="0.9373345">
(15) a.
X —X
</equation>
<bodyText confidence="0.581023666666667">
id link:
zero premises,
two conclusions
</bodyText>
<equation confidence="0.786855">
X —X
</equation>
<bodyText confidence="0.525888666666667">
Cut link:
two premises,
zero conclusions
</bodyText>
<figure confidence="0.331405071428571">
b. i A-
B+ A\B+ /
A-1- B-
\ ii/
A\B-
A- B+
\ i /
BIA+
B- A+
BIA-
B+ A+
A•B+
A- \ i B-
A•B-
</figure>
<bodyText confidence="0.99836812">
i- and ii-links:
two premises,
one conclusion
In the id and Cut links X and —X
schematise over occurrences of the same
category with opposite polarity. Note that
the nodes of links are also marked
(implicitly) as being either conclusions
(looking down) or premises (looking up).
In the i- and ii-links the middle nodes are
the conclusions and the outer nodes the
premises. The i-links correspond to unary
sequent rules and the ii-links to binary
sequent rules. Observe that in the output,
but not in the input, unfoldings the order
of subformulas is switched between
premises and conclusion; this is essential
to the characterization of ordering by
graph planarity.
Proof structures are assembled by
identifying nodes of the same polar
category which are the premises and
conclusions of different • components;
premises and conclusions not fused in this
way are the premises and conclusions of
</bodyText>
<page confidence="0.995914">
64
</page>
<bodyText confidence="0.936613833333333">
Proceedings of EACL &apos;99
the proof structure as a whole. For
example, in (16a) four links are
assembled into a proof structure (16b)
with no premises and two conclusions, N-
and S/(N\S)+:
</bodyText>
<listItem confidence="0.565484">
(16) a.
</listItem>
<bodyText confidence="0.998848">
The structure in (18) is not a module
because it contains the circularity
indicated: it corresponds to the lowering
(7), which is invalid.
</bodyText>
<figure confidence="0.98895175">
(18)
N-
N\S+
S/(N\S)- N+
S/(N\S) = S
s-
s-
N\S-
N\S-
i
S/(N\S)+
N+
N+
N-
b.
N- S/(N\S)+
</figure>
<bodyText confidence="0.994242736842106">
Proof-nets are proof structures which
arise, essentially, by forgetting the
contexts of the sequent rules and keeping
only the active formulas, but not all proof
structures are well-formed as proofs.
There must exist a global synchronization
of the partitioning of contexts by rules
(the long trip condition of Girard 1987).
Eschewing the (somewhat involved)
details (Danos and Regnier 1990; BeIlin
and Scott 1994) it suffices here to state
that a proof structure is well-formed, a
module (partial proof-net), iff every cycle
crosses both edges of some i-link. A
module is a proof-net iff it contains no
premises. The structure (16b) is a proof-
net, in fact it is the proof-net for our
instance (6) of lifting since its conclusions
are the polar categories for this sequent:
</bodyText>
<equation confidence="0.997728666666667">
(17)
N- S/(N\S)+
N = S/(N\S)
</equation>
<bodyText confidence="0.999973666666667">
The structure of figure 1 is a module with
two premises and three conclusions; the
latter are the polar categories of our
composition theorem (8). Adding the
remaining id axiom link makes it a proof-
net for composition.
For L, proof-nets must be planar, i.e.
with no crossing edges. This corresponds
to the non-commutativity of L. In LP,
linear logic, which is commutative, there is
no such requirement.
Like the sequent calculus, proof-nets
enjoy the Cut elimination property
whereby every proof has a Cut-free
equivalent. The evaluation of a net to its
Cut-free normal form is a process of
graph reduction. The reductions are as
shown in figure 2.
</bodyText>
<sectionHeader confidence="0.923283" genericHeader="method">
5 Language processing
</sectionHeader>
<bodyText confidence="0.999443263157895">
As is the case for the sequent calculus,
with proof-nets every proof has a Cut-free
equivalent in which only atomic id axiom
links are used: what we shall call Thlong
proof-nets. However, whereas some 1311-
long sequent proofs are equivalent,
leading to spurious ambiguity/derivational
equivalence, distinct Pri-long proof-nets
always have distinct readings.
The analysis of an expression as search
for 3i-long proof-nets can be construed
in three phases, 1) selection of lexical
categories for elements in the expression,
2) unfolding of these categories into a
frame of trees of i- and ii-links with
atomic leaves (literals), and 3) addition of
(planar) id axiom links to form proof-
nets. For example, &apos;John walks&apos; has the
following analysis:
</bodyText>
<equation confidence="0.908944333333333">
N+ S-
N\S-
S+
</equation>
<page confidence="0.945064">
65
</page>
<figure confidence="0.937702625">
Proceedings of EACL &apos;99
(19)
N+
N-
s-
N\S-
S+
N, NNS S
</figure>
<bodyText confidence="0.9285952">
positive conclusion. Thereafter the
function L mapping proof-nets to lambda
terms is as follows (for brevity we exclude
product):
(21) a.
Going up through the conclusion
of a i-link, make a functional
abstraction for the corresponding
variable and continue upwards through
the positive premise:
in
john+walks:S L(
The ungrammaticality of &apos;walks John&apos; is L(
attested by the non-planarity of the proof
structure (20).
</bodyText>
<equation confidence="0.87746">
(20)
N+ S-
\ /
N\S-
N- S+
b.
</equation>
<bodyText confidence="0.6737135">
Going up through one id conclusion,
go down through the other:
</bodyText>
<equation confidence="0.962772">
L( I) = n)
L( ) = L(7-4)
</equation>
<bodyText confidence="0.9570355">
Going down through one premise
of Cut, go up through the other:
</bodyText>
<equation confidence="0.969439">
L( I I) L(
L(1 — L(
</equation>
<bodyText confidence="0.992585666666667">
Going down through one premise
of a ii-link, make a functional
application and continue going
down through the conclusion
(function) and going up through
the other (argument):
</bodyText>
<equation confidence="0.935727333333333">
= (L( ) \A))
= (L( \V) L( i\/))
L(
L(
N\S, N S
walks+john:S
</equation>
<bodyText confidence="0.999467428571428">
As expected, where there is structural
ambiguity there are multiple derivations;
see figure 3. But now also, when there is
no structural ambiguity there is only one
derivation, as in figure 4. This property is
entirely general: the problem of spurious
ambiguity is resolved.
</bodyText>
<sectionHeader confidence="0.93674" genericHeader="method">
6 Proof-net semantic extraction
</sectionHeader>
<bodyText confidence="0.99974975">
Until now we have not been explicit about
how a proof determines a semantic
reading. We shall show here how to
extract from a proof-net a functional term
representing the semantics (see de Groote
and Retore 1996, who reference
Lamarche 1995). This is done by
travelling through a proof-net and
constructing a lambda term following
deterministic instructions. (The proof-nets
are the proof structures in which
following these instructions visits each
node exactly once.)
First one assigns a distinct variable
index to each i-link; then one starts
travelling upwards through the unique
</bodyText>
<page confidence="0.660938">
66
</page>
<figure confidence="0.985034727272727">
Proceedings of EACL &apos;99
e.
Going down through the premise
of a i-link, put the corresponding
variable:
f.
Going down through a terminal
node, substitute the associated
lexical semantics:
V
L( ) =
</figure>
<bodyText confidence="0.7119666">
Let us observe that the following
lexical type assignments capture the
paraphrasing of (la) and (lb); a-ep := A
signifies the assignment to category A of
expression a with lexical semantics (I).
</bodyText>
<figure confidence="0.830737">
frodo
live
NNS
in
(S\S)IN
XxXy((in x) (live y))
(N\S)/N
</figure>
<bodyText confidence="0.992584833333333">
Then (la) has the analysis given in figure
5, with semantic extraction (23), where *
marks the point at construction and
Roman numerals indicate the argument
traversals, performed after the function
traversals, triggered by entry into ii-links.
</bodyText>
<figure confidence="0.874945857142857">
(23) (* I)
((* II) I)
((in *) I)
((in b) *)
((in b) (* III))
((in b) (live *))
((in b) (live f))
</figure>
<figureCaption confidence="0.417893">
Example (Ib) has the analysis given in
figure 6, for which the semantic
extraction is (24).
</figureCaption>
<figure confidence="0.272113222222222">
(24) (* I)
((* II) I)
((XxXy((in x) (live y)) *) I)
((XxXy((in x) (live y)) b) *)
((XxXy((in x) (live y)) b) .1)
lives
in
bag+end
inhabits
</figure>
<bodyText confidence="0.9980416">
This is not the same semantic term as that
in (23) but it reduces to the same by f3-
conversion, showing that the semantic
content in the two cases is identical, that is,
that there is paraphrase:
</bodyText>
<listItem confidence="0.564902666666667">
(25) ((XxXy((in x) (live y)) b) f)
Xy((in b) (live y)) f) =
((in b) (live f))
</listItem>
<bodyText confidence="0.997253428571429">
Although such lambda conversion only
calculates what the grammar defines and
is not part of the grammar itself,
computationally it is an on-line process.
The following section shows how this can
be rendered, in virtue of proof-nets, an
off-line process of lexical compilation.
</bodyText>
<sectionHeader confidence="0.961864" genericHeader="method">
7 Off-line semantic evaluation
</sectionHeader>
<bodyText confidence="0.962719846153846">
In the processing as presented so far
semantic evaluation is, as is usual,
normalisation of the result of substituting
lexical semantics into derivational
semantics. Logically speaking, this
substitution at the lexico-syntac tic
interface is a Cut, and the normalisation is
a process of Cut elimination. Currently
the substitution and Cut elimination is
executed after the proof search. However,
if lexical semantics is represented as a
proof-net, one can calculate off-line the
module resulting from connecting the
lexical semantics with a Cut to the module
resulting from the unfolding of the
lexical categories.&apos;
Lexical semantics expressed as a linear
(=single bind) lambda term is unfolded
into an (unordered) proof-net by the
algorithm (26):
(26) a.
Start with the X-term c at a + node: c+.
b.
To unfold X.x,c+, make it the
conclusion of a i-link with index n
and unfold c+ at the positive premise:
</bodyText>
<equation confidence="0.356403333333333">
0+
in
kxn0+
</equation>
<footnote confidence="0.994035857142857">
5 Lecomte and Retore (1995) propose to use the
expressivity of modules in general to classify
words rather than just category formulas
(=modules without id or Cut links). Our method
provides semantic motivation for modules at the
machine level but we propose to maintain the
less unwieldy categories at the user level.
</footnote>
<page confidence="0.998543">
67
</page>
<bodyText confidence="0.714003333333333">
Proceedings of EACL &apos;99
C.
To unfold Xxn(p-, make it a Cut
premise and unfold Xxn(p+ at the
other premise:
kr- kxn(1)+
</bodyText>
<sectionHeader confidence="0.57138" genericHeader="evaluation">
4
</sectionHeader>
<bodyText confidence="0.984173">
d.
To unfold ((p Ni)-, make it the
premise of a ii-link and unfold (p-
at the conclusion and NJ+ at the
other premise:
NI)-- 1V+
ii
4)-
In this way, rather than starting the
proof search with a frame comprising just
the unfolding of lexical categories, one
starts with a frame comprising the pre-
evaluated modules resulting from lexical
substitution. Let us consider again (ib)
from this point of view. First note, as well
as figure 8, the precompilation of a
proper name lexical assignment as in
figure 9. The proof frame prior to proof
search is that in figure 10. Adding axiom
links yields the same net, and thus the
same semantics, as that obtained for (la)
in figure 5.
A slightly more involved illustration of
the same point is provided by the
following lexical assignments for the
paraphrases (2a) and (2b).
To unfold ((p Ni)+ make it the
conclusion of an id link and unfold
((p tv)- at the other conclusion:
</bodyText>
<equation confidence="0.569623">
(0 0+ (0 0-
</equation>
<bodyText confidence="0.690961">
At a constant k- unfolding stops;
to unfold a constant k+ make it an id
premise first:
</bodyText>
<figure confidence="0.962624">
(27)
john -j
:= N
tries -try
:= (N\S)/(N\S)
to - Xxx
:= (N\S)/(N\S)
find -find
:= (N\S)/N
mary -m
:=N
seeks - kx(try (x find))
:= (N\S)/(((NNS)/N)\(N\S))
k+ k-
g.
</figure>
<bodyText confidence="0.721079333333333">
To unfold a bound variable x,i- make
it the other premise of the i-link with
index n:
</bodyText>
<equation confidence="0.5270495">
xn-
41/4 in ;
</equation>
<bodyText confidence="0.9954022">
to unfold xn+ make it an id premise first:
For example, the lexical semantics of
&apos;inhabits&apos; can be unfolded as shown in
figure 7. The result of such unfolding of
lexical semantics can be substituted into
the unfolded lexical category by a Cut,
and the resulting module normalised by
Cut elimination in a precompilation. This
is illustrated for the &apos;inhabits&apos; example in
figure 8.
These assign semantics (2c) to both (2a)
and (2b) and, as the reader may check, by
partially evaluating lexical modules in a
precompilation, normal form semantics is
obtained directly in both cases.
</bodyText>
<sectionHeader confidence="0.908811" genericHeader="conclusions">
Conclusion
</sectionHeader>
<bodyText confidence="0.999935">
In both the example worked out
explicitly and the one left to the reader,
we deal with words which are synonyms
of continuous expressions: &apos;inhabits&apos; =
&apos;lives in&apos; and &apos;seeks&apos; = &apos;tries to find&apos;.
This enables us to represent the evaluated
lexical modules as planar. However it
should be noted that in general lexical
substitution involves linking syntactic
modules which are ordered with lexical
semantic modules which are not ordered,
and which could be multiple-binding, and
Cut elimination has to be performed in a
hybrid architecture which must preserve
the linear precedence of syntactic literals.
It is therefore of importance to the future
generalization of the method we propose
to investigate the precise nature of such
hybrid architectures.
</bodyText>
<page confidence="0.997742">
68
</page>
<bodyText confidence="0.426712">
Proceedings of EACL &apos;99
</bodyText>
<sectionHeader confidence="0.989212" genericHeader="acknowledgments">
Acknowledgements
</sectionHeader>
<bodyText confidence="0.9480975">
My thanks to losep Maria Merenciano for
discussions relating to this work.
</bodyText>
<sectionHeader confidence="0.997647" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.950874333333333">
BeIlin G. and Scott P. J. (1994) On the it-
Calculus and Linear Logic. Theoretical
Computer Science, 135, pp. 11--65.
Carpenter B. (1998) Type-Logical Semantics.
MIT Press, Cambridge, Massachusetts.
Danos R. and Regnier L. (1990) The structure
of multiplicatives. Archive for Mathematical
Logic 28, pp. 181-203.
de Groote Ph. and Retore C. (1996) On the
Semantic Readings of Proof-Nets. In
&amp;quot;Proceedings of Formal Grammar 1996&amp;quot;, G.J.
Kruijff, G. Morrill &amp; D. Oehrle, ed., Prague,
pp. 57--70.
Girard J.-Y. (1987) Linear Logic. Theoretical
Computer Science, 50, pp. 1--102.
Hendriks H. (1993) Studied Flexibility:
Categories and Types in Syntax and
Semantics. Ph.D. thesis, Universiteit van
Amsterdam.
Hepple M. (1990) Normal form theorem
proving for the Lambek calculus. Proceedings
of COLING 1990, Stockholm.
Konig E. (1989) Parsing as natural deduction.
Proceedings of the 27th Annual Meeting of
the Association for Computational
Linguistics, Vancouver.
Lamarche F. (1995) Games semantics for full
propositional linear logic. In &amp;quot;Ninth Annual
IEEE Symposium on Logic in Computer
Science&amp;quot;, IEEE Press.
Lambek J. (1958) The mathematics of sentence
structure. American Mathematical Monthly,
65, pp. 154--170.
Lecomte A. and Retort&apos; C. (1995) Pomset logic
as an alternative categorial grammar. In
&amp;quot;Proceedings of Formal Grammar 1995&amp;quot;, G.
Morrill &amp; D. Oehrle, ed., Barcelona, pp. 181-
-196.
Morrill G. (1994) Type Logical Grammar:
Categorial Logic of Signs. Kluwer Academic
Publishers, Dordrecht.
Moortgat M. (1996) Categorial type logics. In
&amp;quot;Handbook of Logic and Language&amp;quot;, J. van
Benthem &amp; A. ter Meulen, ed., Elsevier,
Amsterdam, pp. 93--177.
Pentus M. (1994) Language completeness of
the Lambek calculus. Proceedings of the
Eight Annual IEEE Symposium on Logic in
Computer Science.
Roorda D. (1991) Resource Logics: Proof-
theoretical Investigations. Ph.D. thesis,
Universiteit van Amsterdam.
— Figure I: Partial proof net (module) for composition
manta inj lau-jocud :z ain2L4 N —N
</reference>
<figure confidence="0.994488274509804">
• •
&gt;.&lt;
— —
DWI &apos;SW
1(
&gt;.&lt; —
suoponpai u
69
S. S+ S+ S- S+ Proceedings of EACL &apos;99 Si&apos; S•
Ns n A/\n/ \ /
SiS- S. S- S\S- N.,
\ /
N+ S.
/
S/S,S.S\S oo S
N- MS-(S \S)/N--
/ live
N. MS, (5/5)/N. N oo S End&apos; S+
Figure
frodorlives+in+bag+end: S
5, Proof-net for &apos;Frodo lives in Bag
N+ S-
\ /
N\S- N+
\ ii /
(N\S)/N-N-
XxXy((in x) (lice
N,(NNS)/N, N oo S Bag End&apos;
Figure
frodo+inhabits+bag+end: S
6: Proof-net for &apos;Frodo inhabits
x2+ (live g
ii • x2-
live- i2 •
x I )(live x2))+
a
x2))+
(live x2)-1-((in xl)(live x2n- ((in xl)(ilive x2))+
No, • d r__, g a
x2)- (in xI)- xi +.x.I Wain
d do iii.sr
in&amp;quot; 3,xIXx2((in xl)(live
S- S+
S/S-
S- So
SiS-
No S-
\ o /
MS-
sometimes+it+rains+surprisingly: S
c.
</figure>
<figureCaption confidence="0.962896">
Figure 3: Multiplicity of structural ambiguity
</figureCaption>
<figure confidence="0.992360625">
N/CN, CN, N\S S
the+man+runs: S
S-
S-
So-
S+
CN-
So-
</figure>
<figureCaption confidence="0.993382">
Figure 4: Non-existence of spurious ambiguity Figure 7: Unfolding of lexical semantics of &apos;inhabits&apos; into a proof-net
</figureCaption>
<figure confidence="0.995749333333333">
f.
s.
\ 11 /
MS- No
N
C,
5-
N+ N+
/I \
</figure>
<figureCaption confidence="0.970394">
Figure 8: Partial evaluation of lexical substitution for &apos;inhabits&apos;
</figureCaption>
<figure confidence="0.957446666666667">
I I N-
9+ N- I&gt; b
I I
</figure>
<figureCaption confidence="0.929186">
Figure 9: Partial evaluation of lexical substitution for &apos;Bag End&apos;
</figureCaption>
<figure confidence="0.966916833333333">
1
S.
No N+
N
S- N- N- S+
live In
No
N. (N \S)/N. N anS
frodo+inhabits+bag+end: S
S- Figure 10, Proof frame for &apos;Frodo inhabits Bag End&apos; following lexical precompdation
No
No
</figure>
<page confidence="0.949731">
70
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.616448">
<note confidence="0.723539">Proceedings of EACL &apos;99</note>
<title confidence="0.99726">Geometry of Lexico-Syntactic Interaction</title>
<author confidence="0.999982">Glyn Morrill</author>
<affiliation confidence="0.999543">Departament de Llenguatges i Sistemes Informatics Universitat Politecnica de Catalunya</affiliation>
<address confidence="0.95104">Jordi Girona Salgado, 1-3 E-08034, Barcelona</address>
<email confidence="0.994388">morrill@lsi.upc.es</email>
<abstract confidence="0.996983157894737">Interaction of lexical and derivational semantics ---for example substitution and lambda conversion--is typically a part of the on-line interpretation process. Proof-nets are to categorial grammar what phrase markers are to phrase structure grammar: unique graphical structures underlying equivalence classes of sequential syntactic derivations; but the role of proof-nets is deeper since they integrate also semantics. In this paper we show how interaction of lexical and derivational semantics at the lexico-syntactic interface can be precomputed as a process of off-line lexical compilation comprising Cut elimination in partial proof-nets.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>G BeIlin</author>
<author>P J Scott</author>
</authors>
<title>On the itCalculus and Linear Logic.</title>
<date>1994</date>
<journal>Theoretical Computer Science,</journal>
<volume>135</volume>
<pages>11--65</pages>
<contexts>
<context position="11561" citStr="BeIlin and Scott 1994" startWordPosition="1930" endWordPosition="1933">ucture in (18) is not a module because it contains the circularity indicated: it corresponds to the lowering (7), which is invalid. (18) NN\S+ S/(N\S)- N+ S/(N\S) = S ssN\SN\Si S/(N\S)+ N+ N+ Nb. N- S/(N\S)+ Proof-nets are proof structures which arise, essentially, by forgetting the contexts of the sequent rules and keeping only the active formulas, but not all proof structures are well-formed as proofs. There must exist a global synchronization of the partitioning of contexts by rules (the long trip condition of Girard 1987). Eschewing the (somewhat involved) details (Danos and Regnier 1990; BeIlin and Scott 1994) it suffices here to state that a proof structure is well-formed, a module (partial proof-net), iff every cycle crosses both edges of some i-link. A module is a proof-net iff it contains no premises. The structure (16b) is a proofnet, in fact it is the proof-net for our instance (6) of lifting since its conclusions are the polar categories for this sequent: (17) N- S/(N\S)+ N = S/(N\S) The structure of figure 1 is a module with two premises and three conclusions; the latter are the polar categories of our composition theorem (8). Adding the remaining id axiom link makes it a proofnet for compo</context>
</contexts>
<marker>BeIlin, Scott, 1994</marker>
<rawString>BeIlin G. and Scott P. J. (1994) On the itCalculus and Linear Logic. Theoretical Computer Science, 135, pp. 11--65.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Carpenter</author>
</authors>
<title>Type-Logical Semantics.</title>
<date>1998</date>
<publisher>MIT Press,</publisher>
<location>Cambridge, Massachusetts.</location>
<marker>Carpenter, 1998</marker>
<rawString>Carpenter B. (1998) Type-Logical Semantics. MIT Press, Cambridge, Massachusetts.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Danos</author>
<author>L Regnier</author>
</authors>
<title>The structure of multiplicatives.</title>
<date>1990</date>
<journal>Archive for Mathematical Logic</journal>
<volume>28</volume>
<pages>181--203</pages>
<contexts>
<context position="11537" citStr="Danos and Regnier 1990" startWordPosition="1926" endWordPosition="1929">/(N\S)+: (16) a. The structure in (18) is not a module because it contains the circularity indicated: it corresponds to the lowering (7), which is invalid. (18) NN\S+ S/(N\S)- N+ S/(N\S) = S ssN\SN\Si S/(N\S)+ N+ N+ Nb. N- S/(N\S)+ Proof-nets are proof structures which arise, essentially, by forgetting the contexts of the sequent rules and keeping only the active formulas, but not all proof structures are well-formed as proofs. There must exist a global synchronization of the partitioning of contexts by rules (the long trip condition of Girard 1987). Eschewing the (somewhat involved) details (Danos and Regnier 1990; BeIlin and Scott 1994) it suffices here to state that a proof structure is well-formed, a module (partial proof-net), iff every cycle crosses both edges of some i-link. A module is a proof-net iff it contains no premises. The structure (16b) is a proofnet, in fact it is the proof-net for our instance (6) of lifting since its conclusions are the polar categories for this sequent: (17) N- S/(N\S)+ N = S/(N\S) The structure of figure 1 is a module with two premises and three conclusions; the latter are the polar categories of our composition theorem (8). Adding the remaining id axiom link makes</context>
</contexts>
<marker>Danos, Regnier, 1990</marker>
<rawString>Danos R. and Regnier L. (1990) The structure of multiplicatives. Archive for Mathematical Logic 28, pp. 181-203.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C Retore</author>
</authors>
<title>On the Semantic Readings of Proof-Nets.</title>
<date>1996</date>
<booktitle>In &amp;quot;Proceedings of Formal Grammar</booktitle>
<pages>57--70</pages>
<editor>G.J. Kruijff, G. Morrill &amp; D. Oehrle, ed.,</editor>
<location>Prague,</location>
<contexts>
<context position="14794" citStr="Retore 1996" startWordPosition="2484" endWordPosition="2485">up through the other (argument): = (L( ) \A)) = (L( \V) L( i\/)) L( L( N\S, N S walks+john:S As expected, where there is structural ambiguity there are multiple derivations; see figure 3. But now also, when there is no structural ambiguity there is only one derivation, as in figure 4. This property is entirely general: the problem of spurious ambiguity is resolved. 6 Proof-net semantic extraction Until now we have not been explicit about how a proof determines a semantic reading. We shall show here how to extract from a proof-net a functional term representing the semantics (see de Groote and Retore 1996, who reference Lamarche 1995). This is done by travelling through a proof-net and constructing a lambda term following deterministic instructions. (The proof-nets are the proof structures in which following these instructions visits each node exactly once.) First one assigns a distinct variable index to each i-link; then one starts travelling upwards through the unique 66 Proceedings of EACL &apos;99 e. Going down through the premise of a i-link, put the corresponding variable: f. Going down through a terminal node, substitute the associated lexical semantics: V L( ) = Let us observe that the foll</context>
</contexts>
<marker>Retore, 1996</marker>
<rawString>de Groote Ph. and Retore C. (1996) On the Semantic Readings of Proof-Nets. In &amp;quot;Proceedings of Formal Grammar 1996&amp;quot;, G.J. Kruijff, G. Morrill &amp; D. Oehrle, ed., Prague, pp. 57--70.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J-Y Girard</author>
</authors>
<title>Linear Logic.</title>
<date>1987</date>
<journal>Theoretical Computer Science,</journal>
<volume>50</volume>
<pages>1--102</pages>
<contexts>
<context position="9266" citStr="Girard (1987)" startWordPosition="1537" endWordPosition="1538"> otherwise be available (Konig 1990, Hepple 1990, Hendriks 1993). However, while this removes spurious ambiguity as a problem arising from independence of inferences, it signally fails to exploit the fact that such inferences can be parallelised. Thus we prefer the term &apos;derivational equivalence&apos; to &apos;spurious ambiguity&apos; and interpret the phenomenon not as a problem for sequentialisation, but as an opportunity for parallelism. This opportunity is grasped in proof-nets. 4 Lambek proof-nets Proof-nets for L were developed by Roorda (1991), adapting their original introduction for linear logic in Girard (1987). In proof-nets, the opposition of formulas arising from their location in either the antecedent or the succedent of sequents is replaced by assignment of polarity: input (negative) for antecedent and output (positive) for succedent. A proof-net is a kind of graph of polar formulas. First we define a more general concept of proof structure. These are graphs assembled out of the following links: (15) a. X —X id link: zero premises, two conclusions X —X Cut link: two premises, zero conclusions b. i AB+ A\B+ / A-1- B\ ii/ A\BA- B+ \ i / BIA+ B- A+ BIAB+ A+ A•B+ A- \ i BA•Bi- and ii-links: two pre</context>
<context position="11470" citStr="Girard 1987" startWordPosition="1919" endWordPosition="1920">ucture (16b) with no premises and two conclusions, Nand S/(N\S)+: (16) a. The structure in (18) is not a module because it contains the circularity indicated: it corresponds to the lowering (7), which is invalid. (18) NN\S+ S/(N\S)- N+ S/(N\S) = S ssN\SN\Si S/(N\S)+ N+ N+ Nb. N- S/(N\S)+ Proof-nets are proof structures which arise, essentially, by forgetting the contexts of the sequent rules and keeping only the active formulas, but not all proof structures are well-formed as proofs. There must exist a global synchronization of the partitioning of contexts by rules (the long trip condition of Girard 1987). Eschewing the (somewhat involved) details (Danos and Regnier 1990; BeIlin and Scott 1994) it suffices here to state that a proof structure is well-formed, a module (partial proof-net), iff every cycle crosses both edges of some i-link. A module is a proof-net iff it contains no premises. The structure (16b) is a proofnet, in fact it is the proof-net for our instance (6) of lifting since its conclusions are the polar categories for this sequent: (17) N- S/(N\S)+ N = S/(N\S) The structure of figure 1 is a module with two premises and three conclusions; the latter are the polar categories of ou</context>
</contexts>
<marker>Girard, 1987</marker>
<rawString>Girard J.-Y. (1987) Linear Logic. Theoretical Computer Science, 50, pp. 1--102.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Hendriks</author>
</authors>
<title>Studied Flexibility: Categories and Types in Syntax and Semantics.</title>
<date>1993</date>
<tech>Ph.D. thesis,</tech>
<institution>Universiteit van Amsterdam.</institution>
<contexts>
<context position="8717" citStr="Hendriks 1993" startWordPosition="1457" endWordPosition="1458"> 63 Proceedings of EACL &apos;99 subcomputations, or else perform bookkeeping to avoid so doing. The problem is that different 3i-long sequent derivations do not necessarily represent different readings, and this is the case because the sequent calculus forces us to choose between a sequentialisation of inferences ---in the case of (14) /L and \L--- when in fact they are not ordered by dependency and can be performed in parallel. The problem can be resolved by defining stricter normalised proofs which impose a unique ordering when alternatives would otherwise be available (Konig 1990, Hepple 1990, Hendriks 1993). However, while this removes spurious ambiguity as a problem arising from independence of inferences, it signally fails to exploit the fact that such inferences can be parallelised. Thus we prefer the term &apos;derivational equivalence&apos; to &apos;spurious ambiguity&apos; and interpret the phenomenon not as a problem for sequentialisation, but as an opportunity for parallelism. This opportunity is grasped in proof-nets. 4 Lambek proof-nets Proof-nets for L were developed by Roorda (1991), adapting their original introduction for linear logic in Girard (1987). In proof-nets, the opposition of formulas arising</context>
</contexts>
<marker>Hendriks, 1993</marker>
<rawString>Hendriks H. (1993) Studied Flexibility: Categories and Types in Syntax and Semantics. Ph.D. thesis, Universiteit van Amsterdam.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Hepple</author>
</authors>
<title>Normal form theorem proving for the Lambek calculus.</title>
<date>1990</date>
<booktitle>Proceedings of COLING 1990,</booktitle>
<location>Stockholm.</location>
<contexts>
<context position="8701" citStr="Hepple 1990" startWordPosition="1455" endWordPosition="1456">either repeat 63 Proceedings of EACL &apos;99 subcomputations, or else perform bookkeeping to avoid so doing. The problem is that different 3i-long sequent derivations do not necessarily represent different readings, and this is the case because the sequent calculus forces us to choose between a sequentialisation of inferences ---in the case of (14) /L and \L--- when in fact they are not ordered by dependency and can be performed in parallel. The problem can be resolved by defining stricter normalised proofs which impose a unique ordering when alternatives would otherwise be available (Konig 1990, Hepple 1990, Hendriks 1993). However, while this removes spurious ambiguity as a problem arising from independence of inferences, it signally fails to exploit the fact that such inferences can be parallelised. Thus we prefer the term &apos;derivational equivalence&apos; to &apos;spurious ambiguity&apos; and interpret the phenomenon not as a problem for sequentialisation, but as an opportunity for parallelism. This opportunity is grasped in proof-nets. 4 Lambek proof-nets Proof-nets for L were developed by Roorda (1991), adapting their original introduction for linear logic in Girard (1987). In proof-nets, the opposition of </context>
</contexts>
<marker>Hepple, 1990</marker>
<rawString>Hepple M. (1990) Normal form theorem proving for the Lambek calculus. Proceedings of COLING 1990, Stockholm.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Konig</author>
</authors>
<title>Parsing as natural deduction.</title>
<date>1989</date>
<booktitle>Proceedings of the 27th Annual Meeting of the Association for Computational Linguistics,</booktitle>
<location>Vancouver.</location>
<marker>Konig, 1989</marker>
<rawString>Konig E. (1989) Parsing as natural deduction. Proceedings of the 27th Annual Meeting of the Association for Computational Linguistics, Vancouver.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F Lamarche</author>
</authors>
<title>Games semantics for full propositional linear logic.</title>
<date>1995</date>
<booktitle>In &amp;quot;Ninth Annual IEEE Symposium on Logic in Computer</booktitle>
<publisher>Science&amp;quot;, IEEE Press.</publisher>
<contexts>
<context position="14824" citStr="Lamarche 1995" startWordPosition="2488" endWordPosition="2489">ent): = (L( ) \A)) = (L( \V) L( i\/)) L( L( N\S, N S walks+john:S As expected, where there is structural ambiguity there are multiple derivations; see figure 3. But now also, when there is no structural ambiguity there is only one derivation, as in figure 4. This property is entirely general: the problem of spurious ambiguity is resolved. 6 Proof-net semantic extraction Until now we have not been explicit about how a proof determines a semantic reading. We shall show here how to extract from a proof-net a functional term representing the semantics (see de Groote and Retore 1996, who reference Lamarche 1995). This is done by travelling through a proof-net and constructing a lambda term following deterministic instructions. (The proof-nets are the proof structures in which following these instructions visits each node exactly once.) First one assigns a distinct variable index to each i-link; then one starts travelling upwards through the unique 66 Proceedings of EACL &apos;99 e. Going down through the premise of a i-link, put the corresponding variable: f. Going down through a terminal node, substitute the associated lexical semantics: V L( ) = Let us observe that the following lexical type assignments</context>
</contexts>
<marker>Lamarche, 1995</marker>
<rawString>Lamarche F. (1995) Games semantics for full propositional linear logic. In &amp;quot;Ninth Annual IEEE Symposium on Logic in Computer Science&amp;quot;, IEEE Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Lambek</author>
</authors>
<title>The mathematics of sentence structure.</title>
<date>1958</date>
<journal>American Mathematical Monthly,</journal>
<volume>65</volume>
<pages>154--170</pages>
<contexts>
<context position="3118" citStr="Lambek (1958)" startWordPosition="487" endWordPosition="488">ions which are the result of concatenating an A with a B; products do not play a dominant role here. More precisely, let L be the set of strings (including the empty string E) over a finite vocabulary V and let + be the operation of concatenation (i.e. (L, +, E) is the free monoid generated by V)&apos;. Each category formula A is interpreted as a subset [[A]] of L. When the interpretation of atomic categories has been fixed, that of complex categories is defined by (4). (4) [[A\B]] = {sI VS&apos;E [{M], s&apos;i-sE[[B]]} [[B/A]] = {s1 VS&apos;E [[A]], s+s&apos;E[[B]]} [[A•B]] = {si+s21 siE[[A]] &amp; s2e [[B]]) I In fact Lambek (1958) excluded the empty string ---and hence empty antecedents in the calculus of (5)--- but it is convenient to include it here. 61 Proceedings of EACL &apos;99 In general, given some type assignments others may be inferred. Such reasoning is precisely formulated in the Lambek calculus L. 2 Lambek sequent calculus In the sequent calculus of Lambek (1958) a sequent F A consists of a sequence F of &apos;input&apos; category formulas (the antecedent) and an &apos;output&apos; category formula A (the succedent). A sequent states that the ordered concatenation of expressions in the categories F yields an expression of the cate</context>
</contexts>
<marker>Lambek, 1958</marker>
<rawString>Lambek J. (1958) The mathematics of sentence structure. American Mathematical Monthly, 65, pp. 154--170.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Lecomte</author>
<author>C Retort&apos;</author>
</authors>
<title>Pomset logic as an alternative categorial grammar.</title>
<date>1995</date>
<booktitle>In &amp;quot;Proceedings of Formal Grammar</booktitle>
<pages>181--196</pages>
<editor>G. Morrill &amp; D. Oehrle, ed.,</editor>
<location>Barcelona,</location>
<marker>Lecomte, Retort&apos;, 1995</marker>
<rawString>Lecomte A. and Retort&apos; C. (1995) Pomset logic as an alternative categorial grammar. In &amp;quot;Proceedings of Formal Grammar 1995&amp;quot;, G. Morrill &amp; D. Oehrle, ed., Barcelona, pp. 181--196.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Morrill</author>
</authors>
<title>Type Logical Grammar: Categorial Logic of Signs.</title>
<date>1994</date>
<publisher>Kluwer Academic Publishers,</publisher>
<location>Dordrecht.</location>
<contexts>
<context position="1677" citStr="Morrill (1994)" startWordPosition="238" endWordPosition="239">seeks Mary. C. ((try (find m)) j) Typically, for at least (lb) and (2b) the normalised semantic forms result from a process of substitution and lambda conversion subsequent to or simultaneous with syntactic derivation. We show how such interaction of lexical and derivational semantics at the lexicosyntactic interface can be precomputed as a process of off-line lexical compilation comprising Cut elimination in partial proof-nets. For accessibility, we devote in the initial sections a considerable proportion of space to an introduction to categorial grammar oriented towards proof-nets; see also Morrill (1994), Moortgat (1996) and Carpenter (1997). 1 Categorial grammar We consider categorial grammar with category formulas F (categories) defined by the following grammar: (3) a. ::= A 1 F\F 1 FIF 1 F•F b. A ::=SINICNIPPI... The categories in A are referred to as atomic and correspond to the kinds of expressions which are considered to be &amp;quot;complete&amp;quot;. Fairly uncontroversially, this class may be taken to include at least sentences S and names N; what the class is exactly is not fixed by the formalism. Left division categories A\B CA under B&apos;) are those of expressions (functors) which concatenate with (a</context>
</contexts>
<marker>Morrill, 1994</marker>
<rawString>Morrill G. (1994) Type Logical Grammar: Categorial Logic of Signs. Kluwer Academic Publishers, Dordrecht.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Moortgat</author>
</authors>
<title>Categorial type logics. In &amp;quot;Handbook of Logic and Language&amp;quot;,</title>
<date>1996</date>
<pages>93--177</pages>
<editor>J. van Benthem &amp; A. ter Meulen, ed.,</editor>
<publisher>Elsevier,</publisher>
<location>Amsterdam,</location>
<contexts>
<context position="1694" citStr="Moortgat (1996)" startWordPosition="240" endWordPosition="241">(try (find m)) j) Typically, for at least (lb) and (2b) the normalised semantic forms result from a process of substitution and lambda conversion subsequent to or simultaneous with syntactic derivation. We show how such interaction of lexical and derivational semantics at the lexicosyntactic interface can be precomputed as a process of off-line lexical compilation comprising Cut elimination in partial proof-nets. For accessibility, we devote in the initial sections a considerable proportion of space to an introduction to categorial grammar oriented towards proof-nets; see also Morrill (1994), Moortgat (1996) and Carpenter (1997). 1 Categorial grammar We consider categorial grammar with category formulas F (categories) defined by the following grammar: (3) a. ::= A 1 F\F 1 FIF 1 F•F b. A ::=SINICNIPPI... The categories in A are referred to as atomic and correspond to the kinds of expressions which are considered to be &amp;quot;complete&amp;quot;. Fairly uncontroversially, this class may be taken to include at least sentences S and names N; what the class is exactly is not fixed by the formalism. Left division categories A\B CA under B&apos;) are those of expressions (functors) which concatenate with (arguments) in A on</context>
</contexts>
<marker>Moortgat, 1996</marker>
<rawString>Moortgat M. (1996) Categorial type logics. In &amp;quot;Handbook of Logic and Language&amp;quot;, J. van Benthem &amp; A. ter Meulen, ed., Elsevier, Amsterdam, pp. 93--177.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Pentus</author>
</authors>
<title>Language completeness of the Lambek calculus.</title>
<date>1994</date>
<booktitle>Proceedings of the Eight Annual IEEE Symposium on Logic in Computer Science.</booktitle>
<contexts>
<context position="4082" citStr="Pentus (1994)" startWordPosition="661" endWordPosition="662">equent F A consists of a sequence F of &apos;input&apos; category formulas (the antecedent) and an &apos;output&apos; category formula A (the succedent). A sequent states that the ordered concatenation of expressions in the categories F yields an expression of the category A. The valid sequents are the theorems derivable from the following axiom and rule schemata.2 (5) a. id A=A FA Cut b. A,FB F A\B FA A1,B,A2C Al, F, A\B, A2 C C. F, A B F FA A1,B,A2C BIA, F, A2 C d. Fl =A F2 =&apos;B Fl, F2 =A&apos;B Fl, A, B, F2 C •L Fl,A.B,F2= C 2The completeness of the calculus with respect to the intended interpretation was proved in Pentus (1994). F(n) and A(n) range over context sequences of category formulas; A, B, and A *B are referred to as the active formulas. The calculus L lacks the usual structural rules of permutation, contraction and weakening. Adding permutation collapses the two divisions into a single non-directional implication and yields the multiplicative fragment of intuitionistic linear logic, known as the Lambek-van Benthem calculus LP.3 The validity of the id axiom and the Cut rule follows from the reflexivity and the transitivity respectively of set containment. The calculus enjoys the property of Cut elimination </context>
</contexts>
<marker>Pentus, 1994</marker>
<rawString>Pentus M. (1994) Language completeness of the Lambek calculus. Proceedings of the Eight Annual IEEE Symposium on Logic in Computer Science.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Roorda</author>
</authors>
<title>Resource Logics: Prooftheoretical Investigations.</title>
<date>1991</date>
<tech>Ph.D. thesis,</tech>
<institution>Universiteit van Amsterdam.</institution>
<contexts>
<context position="9194" citStr="Roorda (1991)" startWordPosition="1527" endWordPosition="1528">normalised proofs which impose a unique ordering when alternatives would otherwise be available (Konig 1990, Hepple 1990, Hendriks 1993). However, while this removes spurious ambiguity as a problem arising from independence of inferences, it signally fails to exploit the fact that such inferences can be parallelised. Thus we prefer the term &apos;derivational equivalence&apos; to &apos;spurious ambiguity&apos; and interpret the phenomenon not as a problem for sequentialisation, but as an opportunity for parallelism. This opportunity is grasped in proof-nets. 4 Lambek proof-nets Proof-nets for L were developed by Roorda (1991), adapting their original introduction for linear logic in Girard (1987). In proof-nets, the opposition of formulas arising from their location in either the antecedent or the succedent of sequents is replaced by assignment of polarity: input (negative) for antecedent and output (positive) for succedent. A proof-net is a kind of graph of polar formulas. First we define a more general concept of proof structure. These are graphs assembled out of the following links: (15) a. X —X id link: zero premises, two conclusions X —X Cut link: two premises, zero conclusions b. i AB+ A\B+ / A-1- B\ ii/ A\B</context>
</contexts>
<marker>Roorda, 1991</marker>
<rawString>Roorda D. (1991) Resource Logics: Prooftheoretical Investigations. Ph.D. thesis, Universiteit van Amsterdam.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>