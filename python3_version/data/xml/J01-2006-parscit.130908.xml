<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000119">
<title confidence="0.933502">
Book Reviews
</title>
<author confidence="0.824232">
Knowledge Representation: Logical, Philosophical, and
Computational Foundations
</author>
<affiliation confidence="0.743139">
John F. Sowa
</affiliation>
<address confidence="0.931093666666667">
Pacific Grove, CA: Brooks/Cole, 2000,
xiv+594 pp; hardbound, ISBN
0-534-94965-7, $67.95
</address>
<email confidence="0.143058">
Reviewed by
</email>
<author confidence="0.853038">
Stuart C. Shapiro
</author>
<affiliation confidence="0.756129">
University at Buffalo, The State University of New York
</affiliation>
<bodyText confidence="0.986762125">
For Sowa, &amp;quot;Knowledge representation is the application of logic and ontology to the
task of constructing computable models for some domain&amp;quot; (p. xii). &amp;quot;This book is a gen-
eral textbook of knowledge-base analysis and design, intended for anyone whose job
is to analyze knowledge about the real world and map it to a computable form&amp;quot; (p. xi).
From these statements, one may gather that Sowa takes knowledge representation to be
a broader topic than a subarea of artificial intelligence, and, indeed, he says, &amp;quot;AI design
techniques have converged with techniques from other fields, especially database and
object-oriented systems,&amp;quot; (p. xi) and he lists the &amp;quot;major knowledge representations&amp;quot; to
be discussed as &amp;quot;rules, frames, semantic networks, object-oriented languages, Prolog,
Java, SQL, Petri nets, and the Knowledge Interchange Format (KIF)&amp;quot; (p. xii), a broader
list than most knowledge representation authors would employ. These are mostly dis-
cussed rather briefly. The major notations used throughout the book are predicate
calculus and conceptual graphs. &amp;quot;Conceptual graphs are a two-dimensional form of
logic that is based on the semantic networks of AT and the logical graphs of C. S.
Peirce. Both notations are exactly equivalent in their semantics [more about this later
in this review], and instructors may choose to use either or both in lectures and exer-
cises&amp;quot; (p. xii). However, any instructor who does not like conceptual graphs and tries
to ignore them will have a hard time fighting the proselytizing attitude of the book.
The field of knowledge representation is usually called &amp;quot;knowledge representation
and reasoning,&amp;quot; because knowledge representation formalisms are useless without the
ability to reason with them. Sowa acknowledges this, but gives much less attention to
reasoning: &amp;quot;Although the focus of this book is on representation rather than reasoning,
the choice of representation can have a major effect on the way the reasoning is carried
out and on its ultimate success or failure&amp;quot; (p. 245).
This book is &amp;quot;intended for anyone whose job is to analyze knowledge,&amp;quot; and prac-
titioners will find it useful. However, it is also designed for the student, and includes
an extensive set of exercises at the end of each chapter and answers to selected exer-
cises at the end of the book. Appendix C, &amp;quot;Extended Examples,&amp;quot; contains several-page
descriptions of several example applications that could be used as the specifications
of longer projects.
The rest of this review will discuss the book chapter by chapter, with appendices
interspersed.
The first chapter is an introduction to logic. Sowa shows himself as probably
the most scholarly person writing about knowledge representation, in that he ties
Book Reviews
current issues and techniques to their precedents in the work of historical figures in
philosophy and logic. In Section 1.1, he sketches the history of logic through Plato,
Aristotle, Porphyry, the Scholastics, Lull, Leibniz, Boole, Peirce, Frege, Schroder, Peano,
and Russell. Even readers familiar with artificial intelligence may be surprised to learn
that:
</bodyText>
<listItem confidence="0.933451">
• &amp;quot;Aristotle&apos;s method of defining new categories by genus and differentiae is
fundamental to Al systems, to object-oriented systems, and to every
dictionary from the earliest days to the present&amp;quot; (p. 4).
• Leibniz&apos;s &amp;quot;definition of modality in terms of possible worlds is still used
today in the semantics for modal logic&amp;quot; (p. 7).
• &amp;quot;Leibniz saw that accounting machines could also be used for
mechanical reasoning—an insight that should entitle him to be called the
grandfather of artificial intelligence&amp;quot; (p. 8).
• &amp;quot;Modern systems of predicate calculus are based on the algebraic
notation developed by C. S. Peirce in 1883&amp;quot; (p. 10).
• &amp;quot;Peano began the practice of turning letters upside-down or backward to
represent the logical symbols ... Bertrand Russell adopted this notation
from Peano for the Principia Mathematica&amp;quot; (p. 11).
</listItem>
<bodyText confidence="0.999772413793103">
Then he suggests that &amp;quot;readers who have not had a course in logic or who would
like a quick review should read [Appendix A.11&amp;quot; (p. 11). However, this suggestion
is probably premature; reading Appendix A.1 is probably best left for after all of
Chapter 1 has been read.
The title of Section 1.2 is &amp;quot;Representing knowledge in logic&amp;quot; (pp. 11-18). This
phrase and others like it, such as &amp;quot;Logic itself is a simple language&amp;quot; (p. 15) and
&amp;quot;Logic is an ontologically neutral notation&amp;quot; (p. 16, italics in the original), have always
bothered me. To me, logic is not a particular knowledge representation language, but
is the study of correct reasoning. There are many systems of logic, each of which
may be called a logic, and knowledge representation research may be viewed as a
search for an appropriate logic to underlie commonsense reasoning. I am sure that
Sowa does not actually disagree with this. Section 1.3 is titled &amp;quot;Varieties of logic&amp;quot;
(pp. 18-29), and at the beginning of Section 1.5, he says, &amp;quot;many notations for logic
have been invented over the years ... To be a logic, a knowledge representation
language must have four essential features: Vocabulary ... Syntax ... Semantics ...
Rules of inference&amp;quot; (pp. 39-40). The logics and variants of logics discussed in Chapter 1
include typed (sometimes called &amp;quot;sorted&amp;quot;) logics, lambda calculus, modal logic, higher-
order logic, KIF, and conceptual graphs. There are also discussions of important issues
in logical representation, including the choice of predicates, expressing definitions,
object- vs. meta-language, names, types, measures, and the unique-naming convention.
An unusual application that is first discussed in this chapter, and then reappears
throughout the book, is the representation of a musical piece.
Appendix A supplements Chapter 1 by providing more complete introductions to
propositional and predicate logic (Appendix A.1), conceptual graphs (Appendix A.2),
and the Knowledge Interchange Format (Appendix A.3).
Appendix A.1, &amp;quot;Predicate Calculus&amp;quot; (pp. 467-476), is a review of propositional and
predicate logic that starts at the very basics, such as the truth tables for conjunction,
disjunction, negation, material implication, and equivalence, but uses the terms &amp;quot;theo-
rem&amp;quot; and &amp;quot;proof&amp;quot; without defining them, and even though Sowa had said that &amp;quot;to be a
</bodyText>
<page confidence="0.863877">
287
</page>
<figure confidence="0.320818333333333">
Computational Linguistics Volume 27, Number 2
Cat
Mat
</figure>
<figureCaption confidence="0.323142">
Figure 1
</figureCaption>
<bodyText confidence="0.997424048780488">
Conceptual graph for A cat is on a mat (p. 477).
logic, a knowledge representation language must have ... Semantics&amp;quot; (p. 39), he does
not give the semantics of predicate logic, beyond the truth tables of the propositional
connectives, either in Chapter 1 or in Appendix A.1. Sowa&apos;s choice of notations prefig-
ures the techniques of conceptual graphs. For example, he presents a typed predicate
logic, and both the &amp;quot;exactly-one quantifier&amp;quot; (a!) and the &amp;quot;unique existential quantifier&amp;quot;
(a!!) (I did not know about the latter—it looks useful). Sowa mentions modal logic in
Appendix A.1 without discussing it. He does introduce it in Section 1.3, which is one
reason Appendix A.1 shouldn&apos;t be read right after reading Section 1.1, when Sowa
suggests it.
Appendix A.2 (pp. 476-489) is an introduction to conceptual graphs. Again, I was
disappointed to find this organized by a set of ten definitions, instead of by a specifi-
cation of vocabulary, syntax, semantics, and rules of inference. The first definition is,
&amp;quot;A conceptual graph g is a bipartite graph that has two kinds of nodes called concepts
and conceptual relations&amp;quot; (p. 477). A simple example of a conceptual graph is shown
in Figure 1. In the official linear notation, this conceptual graph is written as
[Cat] (On) [Mat]
In either notation, [Cat] and [Mat] are concepts, and (On) is a &amp;quot;conceptual rela-
tion.&amp;quot; The use of the term conceptual relation is not fully justified. When I first intro-
duced the distinction between conceptual and structural relations (Shapiro 1971), the
idea was that structural relations were represented by arcs, and conceptual relations
were conceptual entities in their own right, were represented by nodes, and could
participate in relationships with other conceptual entities. It is true that the &amp;quot;concep-
tual relations&amp;quot; of conceptual graphs are nodes rather than arcs, but since conceptual
graphs are bipartite, &amp;quot;there are no arcs that link ... relations to relations&amp;quot; (p. 478),
and so conceptual graphs cannot represent information about so-called conceptual re-
lations.
The concepts [Cat] and [Mat] are the simplest variety of concept: &amp;quot;Every concept
has a type t and a referent r . . . In the concept [Bus] , &apos;Bus&apos; is the type, and the referent
is a blank, ... In the concept [Person: John] , &apos;Person&apos; is the type, and the referent
&apos;John&apos; is the name of some person&amp;quot; (p. 478, italics in the original).
Not only are conceptual graphs not defined by a specification of vocabulary, syn-
tax, semantics, and rules of inference, they do not have their own independent se-
mantics at alP1 For example, I would expect the concept [Cat] to denote some cat,
but instead we read, &amp;quot;The concept [Cat] by itself simply means There is a cat&amp;quot; (p. 484,
italics in the original). The real significance of conceptual graphs is that they are a
notational variant of standard predicate logic: &amp;quot;There is a formula operator 0, which
translates conceptual graphs to formulas in predicate calculus ... For Figure [1], 0
generates the following formula: (ax: Cat) (ay: Mat)on(x, y)&amp;quot; (p. 476-477, italics in the
original). However, there are still problems. Figure 2 (in which the referents V and
@1 are quantifiers) is said to be the conceptual graph for the sentence Every employee
</bodyText>
<footnote confidence="0.380072">
1 I said this to Sowa in person. He agreed and said that I could say in this review that he agreed.
</footnote>
<page confidence="0.982541">
288
</page>
<figure confidence="0.937076666666667">
Book Reviews
Manager: @1
Employee: V Thme Date: @1
</figure>
<figureCaption confidence="0.982955">
Figure 2
</figureCaption>
<bodyText confidence="0.995655333333333">
A conceptual graph for Every employee is hired by some manager on some date (p. 456).
is hired by some manager on some date, but there is nothing in the conceptual graph to
indicate the scopes of the quantifiers. The quantifier structure could be any of these:
</bodyText>
<equation confidence="0.99387075">
(Vx : Employee) (!y : Manager)(!z :Date),
(3!y : Manager)(Vx : Employee)(3!z : Date),
(!z: Date)(Vx : Employee)(3!y : Manager),
(3!y : Manager)(3!z : Date)(Vx : Employee).
</equation>
<bodyText confidence="0.999802928571429">
The basic text on conceptual graphs is Sowa (1984). The semantics of conceptual
graphs remains a topic of the current literature. For example, Mineau (2000) presents
an extensional semantics of the fragment of conceptual graphs that contains neither
nested graphs nor negation. For the complete current word on conceptual graphs, see
the author&apos;s Web site, http: //www.bestweb.net/—sowa /cg/.
Appendix A.3 (pp. 489-491) is a very short introduction to the Knowledge In-
terchange Format, KIF, mostly by means of five example English sentences that are
translated into conceptual graphs, predicate logic, and KIF. KIF is a machine-readable
version of predicate logic designed for sharing knowledge bases among programs. Its
principal reference is at http://logic.stanford.edu/kif/.
Appendix A is supplemented by an index of special symbols following the name
index and the subject index. The format of the entries in the special-symbol index is:
English gloss; symbol; pages where the symbol is discussed or used. This index is
very useful, but, unfortunately, incomplete.
Chapter 2 (pp. 51-131) is about ontology: &amp;quot;Ontology ... is the study of existence,
of all the kinds of entities—abstract and concrete—that make up the world ... The
two sources of ontological categories are observation and reasoning ... A choice of
ontological categories is the first step in designing a database, a knowledge base, or
an object-oriented system&amp;quot; (p. 51). As he did for logic, Sowa introduces the topic
of ontology through historical sources, including Heraclitus, Aristotle, Kant, Hegel,
Peirce, Husserl, Whitehead, and Heidegger. He then goes on to develop an ontology
illustrated by trees, multidimensional matrices (as in Figure 3), and lattices. There is
very little use of knowledge representation formalisms, just an occasional conceptual
graph, some algebra, some set theory (which is introduced in the chapter, including
the definition of such basic terms as subset, union, and intersection), and some predicate
logic. There is, however, an extensive discussion of the categories and the distinctions
contained in the ontology. This is extremely worthwhile, and includes discussions of
roles and adjectives (&amp;quot;happy physicist&amp;quot; vs. &amp;quot;nuclear physicist&amp;quot; vs. &amp;quot;former senator&amp;quot;
</bodyText>
<page confidence="0.990593">
289
</page>
<figure confidence="0.940127666666667">
Computational Linguistics Volume 27, Number 2
Physical Abstract
Continuant Occurrent Continuant Occurrent
Independent
Relative
Mediating
</figure>
<figureCaption confidence="0.816162">
Figure 3
</figureCaption>
<table confidence="0.939378">
Object Process Schema - Script
Juncture Participation Description History
Structure Situation , Reason Purpose
</table>
<tableCaption confidence="0.565112">
Three-dimensional matrix of twelve of Sowa&apos;s categories (p. 75).
</tableCaption>
<bodyText confidence="0.999843452380952">
vs. &amp;quot;alleged thief&amp;quot; [p. 82]); the related, but different, terms set, collection, type, and
category; mereology (the study of parts and wholes); space and time; and granularity.
The historical philosophers and their terminology are cited and used much more than
in other knowledge representation texts, which is good or annoying, depending on
the reader&apos;s attitude.
Chapter 2 is summarized in Appendix B, &amp;quot;Sample Ontology&amp;quot; (pp. 492-512), with
diagrams, English explanations of the categories, and many examples of English sen-
tences with conceptual graph representations. This latter style is used especially in a
list of nineteen thematic roles, which are used and mentioned elsewhere in the book,
but discussed in detail only here in Appendix B.4.
Chapter 3, titled &amp;quot;Knowledge Representations&amp;quot; (pp. 132-205), begins with a section
titled &amp;quot;Knowledge Engineering.&amp;quot; &amp;quot;Knowledge engineering is the application of logic
and ontology to the task of building computable models of some domain for some pur-
pose&amp;quot; (p. 132). But the section is basically an introduction to knowledge representation
organized by the five principles of Davis, Schrobe, and Szolovits (1993): a knowledge
representation is: (1) &amp;quot;a surrogate&amp;quot;; (2) &amp;quot;a set of ontological commitments&amp;quot;; (3) &amp;quot;a frag-
mentary theory of intelligent reasoning&amp;quot;; (4) &amp;quot;a medium for efficient computation&amp;quot;;
(5) &amp;quot;a medium of human expression&amp;quot; (p. 134). These principles are discussed using
a traffic-light example (if the auto-switch is on, it goes back and forth between being
red for r units of time and green for g units of time) in several knowledge represen-
tation notations, including CLIPS (a production system), an imperative-programming
pseudo-language, typed predicate logic, Prolog, and conceptual graphs. Sowa mis-
characterizes forward-chaining systems as being equivalent to production systems:
&amp;quot;the forward-chaining systems are also [like backward-chaining systems] based on logic,
but they have procedural aspects that resemble the programming loop&amp;quot; (pp. 138-139,
italics in the original), followed by a CLIPS example. Later, he continues the confu-
sion with a different, though also incorrect, characterization: &amp;quot;Repeated execution of
modus ponens is called forward chaining, and repeated modus tollens is called back-
ward chaining&amp;quot; (p. 156, italics in the original). (For a discussion of forward vs. backward
chaining, and the related distinctions of bottom-up vs. top-down, and data-driven vs.
goal-directed, see Shapiro [19871.)
Section 3.2 is titled &amp;quot;Representing Structure in Frames&amp;quot; (pp. 143-156), but, after his-
torical notes about frames and a subsection on mapping frames to conceptual graphs
(titled &amp;quot;Mapping Frames to Logic&amp;quot; (pp. 147-149)), the discussion switches to descrip-
tion logics (though not by that now-commonly-used name) of the KL-ONE family,
without distinguishing the two approaches. What I take to be the defining feature
of frames, procedural attachment, is only mentioned once, briefly, without adequate
discussion or example, and one of the chief features of description logics, automatic
classification, is mentioned in part of a brief subsection titled &amp;quot;Classification&amp;quot; (pp. 153-
154), without a mention of the crucial topic of necessary and sufficient conditions.
The theme of Section 3.3, &amp;quot;Rules and Data&amp;quot; (pp. 156-169), is that &amp;quot;the convergence
of [rule-based expert systems and relational databases] results from their common
</bodyText>
<page confidence="0.985916">
290
</page>
<subsectionHeader confidence="0.850702">
Book Reviews
</subsectionHeader>
<bodyText confidence="0.999899588235294">
logical foundations: they both store data in the existential-conjunctive (EC) subset of
logic, and they use the same rules of inference to answer questions, perform updates,
and check constraints&amp;quot; (p. 156). The three languages cited frequently in this section are
Microplanner, Prolog, and SQL, though SQL is, by far, the most illustrated of the three,
CLIPS&apos;s notation is used instead of Microplanner &apos;s, and conceptual graphs are both
used and argued for: &amp;quot;By representing logic in a form that is close to natural language,
conceptual graphs can serve as an intermediate language for mapping to lower-level
languages like SQL&amp;quot; (p. 161). The pattern-action structure of production rules is dis-
cussed more completely here than it was in Section 3.1, and is used as a lead-in to
a discussion of the new and similar structure of SQL triggers. The final subsection,
&amp;quot;Implementing Logic in Practical Systems&amp;quot; (pp. 168-169), is a discussion of efficiency
with no details. Unification is mentioned as &amp;quot;a powerful pattern-matching technique&amp;quot;
(p. 168), which is better than its previous, incorrect, characterization as &amp;quot;a rule of infer-
ence&amp;quot; (p. 148), but nowhere in the book is the unification algorithm presented in any
detail. Similarly, rete networks are mentioned, along with their benefits, but without
enough details to implement one. The final statement of this section is &amp;quot;logic serves as
the common foundation for database and expert systems ... Microplanner was ineffi-
cient even on the toy databases in SHRDLU. With optimization, SQL database systems
routinely manage terabytes of data while responding to requests from thousands of
users around the world&amp;quot; (p. 169).
Section 3.4, &amp;quot;Object-Oriented Systems&amp;quot; (pp. 169-178), begins with a discussion of
object-oriented programming languages, including a couple of Java examples, and
the concept of encapsulation, but quickly moves to conceptual graphs: &amp;quot;To represent
the encapsulated objects of object-oriented systems, logic must support contexts ..
In conceptual graphs, contexts are represented by concept boxes that contain nested
graphs that describe the referent of the concept&amp;quot; (p. 173, italics in the original). This is
illustrated by a birthday-party context, which has several levels of nested conceptual
graphs, and is now treated as a graphical user interface: &amp;quot;At the bottom of the box in
Figure 3.5 is another concept [Process]. By clicking on that box, a person could expand
it to a context that shows the steps in the process&amp;quot; (p. 175). The semantics of contexts,
however, is not discussed until Chapter 5.
Section 3.5, &amp;quot;Natural Language Semantics&amp;quot; (pp. 178-186), provides a brief over-
view of natural language processing, mostly by means of an example from DANTE
(Velardi, Pazienza, and Giovanetti 1988), including one sentence, a parse tree of its
subject, and a conceptual graph representing the sentence. There is brief discussion
of morphology, syntax, semantics, thematic relations, ambiguity, question answering,
and inference.
Section 3.6, &amp;quot;Levels of Representation&amp;quot; (pp. 186-196), contains short discussions
of several kinds of levels. These include the semantic network levels of Brachman
(1979), the levels of robotic competence of Brooks (1986), and the design levels of
Zachrnan (1987), as well as the sequences of levels of object to name-as-character-
string to binary-representation-of-character string, and object to concept-of-object to
representation-of-concept to concept-of-representation.
Chapter 4, &amp;quot;Processes&amp;quot; (pp. 206-264), discusses the nature and representation of
times, events, situations, procedures, and processes, mostly via conceptual graphs, but
with a major discussion and presentation of Petri nets and of a technique for mapping
Petri nets into conceptual graphs. This chapter also contains discussions of process
synchronization, data flow, message passing, constraint satisfaction, the frame prob-
lem, and the Yale shooting problem. Yet, reading this chapter, I lost track of the point.
Is it to implement an intelligent agent that can carry out these procedures? Or reason
about them? Or is it to write a program that can simulate these procedures? Or for
</bodyText>
<page confidence="0.992014">
291
</page>
<note confidence="0.729746">
Computational Linguistics Volume 27, Number 2
</note>
<bodyText confidence="0.999933163265306">
a human to analyze the procedures by analyzing the diagrams? Or all of those? Or
just to show that conceptual graphs can represent anything?—&amp;quot;As complete repre-
sentations for logic, conceptual graphs and predicate calculus are general enough to
represent everything that can be represented in a Petri net, a timing diagram, or any
other notation for discrete processes&amp;quot; (p. 227). Sowa&apos;s statements of the theme of this
chapter are: &amp;quot;Chapter 4 presents methods for representing dynamically changing pro-
cesses and events&amp;quot; (p. xiii) and &amp;quot;Chapter 4 showed how logical inferences can simulate
any computation that can be performed by a digital computer&amp;quot; (p. 427).
Chapter 5 is titled &amp;quot;Purposes, Contexts, and Agents&amp;quot; (pp. 265-347). &amp;quot;In Peirce&apos;s
terms, purpose is the Thirdness that relates some mind or mindlike entity (first), which
directs the course of a process (second) toward some goal (third)&amp;quot; (p. 265). Most of
the chapter, however, is about contexts, which were previously defined in Section 3.4
(see above), and are again defined here: &amp;quot;In CGs, a context is defined as a concept
whose referent field contains nested conceptual graphs&amp;quot; (pp. 276-277). There is a long
subsection on &amp;quot;Semantics of Contexts&amp;quot; (pp. 284-297), in which the theories of Peirce,
McCarthy, and Barwise and Perry are discussed. However, there is no crisp statement
of the semantics of contexts in conceptual graphs. There are, however, many other in-
teresting discussions in this chapter, which may be inferred from some of the section
and subsection titles: &amp;quot;Verbs as Nexus&amp;quot; (pp. 270-272) (&amp;quot;In Peirce&apos;s terms, a verb is a
syntactic unit for representing the mediating Thirdness that relates the participants&amp;quot;
[p. 270]); &amp;quot;Defining Verb Senses&amp;quot; (pp. 272-274); &amp;quot;Discourse Representation Theory&amp;quot;
(pp. 278-279) (&amp;quot;Although Kamp had not been aware of Peirce&apos;s existential graphs, his
DRSs were structurally equivalent to Peirce&apos;s EGs&amp;quot; [p. 278[); &amp;quot;Resolving Indexicals&amp;quot;
(pp. 279-280); &amp;quot;Conversational Implicatures&amp;quot; (pp. 282-284); &amp;quot;Meaning in Natural Lan-
guages&amp;quot; (pp. 293-294). Section 5.4, &amp;quot;First-Order Reasoning in Contexts&amp;quot; (pp. 297-307),
is mostly about the proof theory of Peirce&apos;s existential graphs, which struck me as
an interesting system. Section 5.5, &amp;quot;Modal Reasoning in Contexts&amp;quot; (pp. 307-321), is
mostly a summary of modal logic. Section 5.6, &amp;quot;Encapsulating Objects in Contexts&amp;quot;
(pp. 321-329), relates conceptual graphs to object-oriented programming languages.
Section 5.7, &amp;quot;Agents&amp;quot; (pp. 330-339), includes short discussions of consciousness, reac-
tive agents, and BDI (beliefs, desires, intentions) agent models. As was the case for
Chapter 4, I found many of the discussions in Chapter 5 interesting, but I had a hard
time keeping track of the thread, which Sowa says is &amp;quot;how purpose and context affect
knowledge representation and the various theories of modal and intentional logic&amp;quot;
(p. xiii) and &amp;quot;how logic can represent distributed agents, encapsulated objects, and
message passing between agents and objects&amp;quot; (p. 427).
Given my comments about interesting discussions without a firm thread, one
might suppose that Chapter 6, &amp;quot;Knowledge Soup&amp;quot; (pp. 348-407), is a collection of
left-over topics, but that is not the point:
Some of the knowledge in people&apos;s heads may be represented in
propositions, more of it in imagelike forms, and the rest of it in habits,
vague intuitions, and &amp;quot;gut feelings&amp;quot; that are never verbalized or vi-
sualized. Whatever its form, the knowledge is far too complex and
disorganized to be called a knowledge base. Its fluid, heterogeneous,
ever changing, and often inconsistent nature could be better charac-
terized as knowledge soup. (p. 248, italics in the original)
This chapter includes sections on: &amp;quot;Vagueness, Uncertainty, Randomness, and Igno-
rance&amp;quot; (pp. 348-356), including a paragraph-long subsection on the paradox of the
heap (p. 353), and a short subsection on liquids (pp. 353-354); &amp;quot;Limitations of Logic&amp;quot;
</bodyText>
<page confidence="0.985594">
292
</page>
<subsectionHeader confidence="0.831709">
Book Reviews
</subsectionHeader>
<bodyText confidence="0.999124780487805">
(pp. 356-364), including subsections on &amp;quot;Case-Based Reasoning&amp;quot; (pp. 358-359) and
&amp;quot;Propositions and Continuous Models&amp;quot; (pp. 363-364); &amp;quot;Fuzzy Logic&amp;quot; (pp. 364-373);
&amp;quot;Nonmonotonic Logic&amp;quot; (pp. 373-383); &amp;quot;Theories, Models, and the World&amp;quot; (pp. 383-
394); and &amp;quot;Semiotics&amp;quot; (pp. 394 402).
Chapter 7 is titled &amp;quot;Knowledge Sharing and Acquisition&amp;quot; (pp. 408-466). Section 7.1,
&amp;quot;Sharing Ontologies&amp;quot; (pp. 408-417), includes subsections on &amp;quot;Problems of Aligning
Ontologies&amp;quot; (pp. 409-412) and &amp;quot;Ontologies and Axioms&amp;quot; (pp. 412-414) that might
better have been included in Chapter 2, &amp;quot;Ontology&amp;quot; There are then subsections on
natural language and on problem solving that discuss the missionaries-and-cannibals
problem but don&apos;t seem to be about knowledge sharing or knowledge acquisition. They
do, however, contain a conceptual graph for the sentence &amp;quot;Three missionaries wearing
flowing robes and three cannibals wearing loincloths are walking together from one
village to another&amp;quot; (p. 414), along with a discussion of the problems in representing
that sentence. Section 7.2, &amp;quot;Conceptual Schema&amp;quot; (pp. 417-427), is a database systems—
oriented section, containing a subsection on the logical inadequacies of a simple natural
language database query system, a short introduction to entity-relationship diagrams
and a short subsection on query graphs: &amp;quot;conceptual graphs can also express any
database query that can be expressed in SQL&amp;quot; (p. 426). Sections 7.3 and 7.4 contain
more discussions relating conceptual graphs to various data structures, such as trees,
and database systems issues. Section 7.5, &amp;quot;Language Patterns&amp;quot; (pp. 445-452), contains
discussions of natural language issues including count nouns vs. mass nouns, stative
verbs vs. action verbs, and some thematic roles.
There have been two basic organizing principles for texts on knowledge repre-
sentation: by knowledge representation formalism, such as that of Reichgelt (1991),
and by the subject matter being represented, such as that of Davis (1990). This book
follows neither, though it is closer to the latter. Perhaps the word &amp;quot;Foundations&amp;quot; in
the subtitle should be taken seriously, and it should be considered not so much a
text about knowledge representation as a text about the foundations for knowledge
representation.
Whether you would want to use this book as a text in a knowledge representation
course you are teaching probably depends on your attitude toward conceptual graphs
and your attitude toward Sowa&apos;s style. If you are already an aficionado of conceptual
graphs, you will probably like it. If you would rather not use conceptual graphs in
your course, you will probably not want to use it. I hope this review and the quotations
I&apos;ve included will give you a flavor of Sowa&apos;s style, and help you decide if that would
be an asset or a detriment.
For a more experienced audience, however, whether practitioner, researcher, or ad-
vanced graduate student, I recommend this book for the many interesting discussions
of issues in the foundations of knowledge representation.
The author&apos;s Web site for the book, including errata, is http://www.bestweb.net/
—sowa/krbook/.
</bodyText>
<sectionHeader confidence="0.992633" genericHeader="abstract">
References
</sectionHeader>
<reference confidence="0.999516157894737">
Brachrnan, Ronald J. 1979. On the
epistemological status of semantic
networks. In Nicholas V. Findler, editor,
Associative Networks: The Representation and
Use of Knowledge by Computers. Academic
Press, New York, pages 3-50.
Brooks, Rodney A. 1986. A robust layered
control system for a mobile robot. IEEE
Journal of Robotics and Automation,
RA-2(1):14-23.
Davis, Ernest. 1990. Representations of
Commonsense Knowledge. Morgan
Kaufmann, San Mateo, CA.
Davis, Randall, Howard Schrobe, and Peter
Szolovits. 1993. What is a knowledge
representation? Al Magazine, 14(1):17-33,
Spring.
Mineau, Guy W. 2000. The extensional
semantics of the conceptual graph
</reference>
<page confidence="0.962968">
293
</page>
<note confidence="0.361989">
Computational Linguistics Volume 27, Number 2
</note>
<reference confidence="0.999611075">
formalism. In Bernhard Ganter and
Guy W. Mineau, editors, Conceptual
Structures: Logical, Linguistic, and
Computational Issues. Volume 1867 of
Lecture Notes in Artificial Intelligence.
Springer-Verlag, Berlin, pages 221-234.
Reichgelt, Han. 1991. Knowledge
Representation: An Al Perspective. Ablex,
Norwood, NJ.
Shapiro, Stuart C. 1971, A net structure for
semantic information storage, deduction
and retrieval. In Proceedings of the Second
International Joint Conference on Artificial
Intelligence. Morgan Kaufmann, San Mateo,
CA, pages 512-523.
Shapiro, Stuart C. 1987. Processing,
bottom-up and top-down. In Stuart C.
Shapiro, editor, Encyclopedia of Artificial
Intelligence. John Wiley &amp; Sons, New York,
pages 779-785. Reprinted in Second
Edition, 1992, pages 1,229-1,234.
Sowa, John F. 1984. Conceptual Structures:
Information Processing in Mind and Machine.
Addison-Wesley, Reading, MA.
Velardi, Paola, Maria Teresa Pazienza, and
Mario De Giovanetti. 1988. Conceptual
graphs for the analysis and generation of
sentences. IBM Journal of Research &amp;
Development, 32(2):251-267.
Zachman, John A. 1987. A framework for
information systems architecture. IBM
Systems Journal, 26(3):276-292.
Stuart C. Shapiro is Professor of Computer Science and Engineering and a member of the Center
for Cognitive Science at the University at Buffalo. He is co-editor of Natural Language Processing
and Knowledge Representation: Language for Knowledge and Knowledge for Language, (AAAI Press/The
MIT Press, 2000), is a Fellow of AAAI, and has served as chair of ACM/SIGART (1991-95) and
president of KR, Inc. (1998-2000). His principal research areas are knowledge representation,
reasoning, and natural language processing. Shapiro&apos;s address is Department of Computer Sci-
ence and Engineering, University at Buffalo, The State University of New York, 226 Bell Hall,
Buffalo, NY 14260-2000, U.S.A.; e-mail: shapiro@cse.buffalo.edu.
</reference>
<page confidence="0.998397">
294
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.148146">
<title confidence="0.944856666666667">Book Reviews Knowledge Representation: Logical, Philosophical, and Computational Foundations</title>
<author confidence="0.98044">John F Sowa</author>
<address confidence="0.609103">Pacific Grove, CA: Brooks/Cole, 2000, xiv+594 pp; hardbound, ISBN 0-534-94965-7, $67.95</address>
<note confidence="0.917496333333333">Reviewed by University at Buffalo, The State University of New York For Sowa, &amp;quot;Knowledge representation is the application of logic and ontology to the</note>
<abstract confidence="0.990407709677419">task of constructing computable models for some domain&amp;quot; (p. xii). &amp;quot;This book is a general textbook of knowledge-base analysis and design, intended for anyone whose job is to analyze knowledge about the real world and map it to a computable form&amp;quot; (p. xi). From these statements, one may gather that Sowa takes knowledge representation to be a broader topic than a subarea of artificial intelligence, and, indeed, he says, &amp;quot;AI design techniques have converged with techniques from other fields, especially database and object-oriented systems,&amp;quot; (p. xi) and he lists the &amp;quot;major knowledge representations&amp;quot; to be discussed as &amp;quot;rules, frames, semantic networks, object-oriented languages, Prolog, SQL, Petri nets, and the Knowledge Interchange (KIF)&amp;quot; (p. xii), a broader list than most knowledge representation authors would employ. These are mostly discussed rather briefly. The major notations used throughout the book are predicate calculus and conceptual graphs. &amp;quot;Conceptual graphs are a two-dimensional form of logic that is based on the semantic networks of AT and the logical graphs of C. S. Peirce. Both notations are exactly equivalent in their semantics [more about this later in this review], and instructors may choose to use either or both in lectures and exercises&amp;quot; (p. xii). However, any instructor who does not like conceptual graphs and tries to ignore them will have a hard time fighting the proselytizing attitude of the book. The field of knowledge representation is usually called &amp;quot;knowledge representation and reasoning,&amp;quot; because knowledge representation formalisms are useless without the ability to reason with them. Sowa acknowledges this, but gives much less attention to reasoning: &amp;quot;Although the focus of this book is on representation rather than reasoning, the choice of representation can have a major effect on the way the reasoning is carried out and on its ultimate success or failure&amp;quot; (p. 245). This book is &amp;quot;intended for anyone whose job is to analyze knowledge,&amp;quot; and pracwill find it useful. However, it is also designed for the student, includes extensive of exercises at the end of each chapter and answers to selected exercises at the end of the book. Appendix C, &amp;quot;Extended Examples,&amp;quot; contains several-page descriptions of several example applications that could be used as the specifications of longer projects. The rest of this review will discuss the book chapter by chapter, with appendices interspersed.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Ronald J Brachrnan</author>
</authors>
<title>On the epistemological status of semantic networks.</title>
<date>1979</date>
<booktitle>Associative Networks: The Representation and Use of Knowledge by Computers.</booktitle>
<pages>3--50</pages>
<editor>In Nicholas V. Findler, editor,</editor>
<publisher>Academic Press,</publisher>
<location>New York,</location>
<marker>Brachrnan, 1979</marker>
<rawString>Brachrnan, Ronald J. 1979. On the epistemological status of semantic networks. In Nicholas V. Findler, editor, Associative Networks: The Representation and Use of Knowledge by Computers. Academic Press, New York, pages 3-50.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Rodney A Brooks</author>
</authors>
<title>A robust layered control system for a mobile robot.</title>
<date>1986</date>
<journal>IEEE Journal of Robotics and Automation,</journal>
<pages>2--1</pages>
<contexts>
<context position="19671" citStr="Brooks (1986)" startWordPosition="3057" endWordPosition="3058">ntics&amp;quot; (pp. 178-186), provides a brief overview of natural language processing, mostly by means of an example from DANTE (Velardi, Pazienza, and Giovanetti 1988), including one sentence, a parse tree of its subject, and a conceptual graph representing the sentence. There is brief discussion of morphology, syntax, semantics, thematic relations, ambiguity, question answering, and inference. Section 3.6, &amp;quot;Levels of Representation&amp;quot; (pp. 186-196), contains short discussions of several kinds of levels. These include the semantic network levels of Brachman (1979), the levels of robotic competence of Brooks (1986), and the design levels of Zachrnan (1987), as well as the sequences of levels of object to name-as-characterstring to binary-representation-of-character string, and object to concept-of-object to representation-of-concept to concept-of-representation. Chapter 4, &amp;quot;Processes&amp;quot; (pp. 206-264), discusses the nature and representation of times, events, situations, procedures, and processes, mostly via conceptual graphs, but with a major discussion and presentation of Petri nets and of a technique for mapping Petri nets into conceptual graphs. This chapter also contains discussions of process synchro</context>
</contexts>
<marker>Brooks, 1986</marker>
<rawString>Brooks, Rodney A. 1986. A robust layered control system for a mobile robot. IEEE Journal of Robotics and Automation, RA-2(1):14-23.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ernest Davis</author>
</authors>
<title>Representations of Commonsense Knowledge.</title>
<date>1990</date>
<publisher>Morgan Kaufmann,</publisher>
<location>San Mateo, CA.</location>
<contexts>
<context position="26590" citStr="Davis (1990)" startWordPosition="4091" endWordPosition="4092">ry that can be expressed in SQL&amp;quot; (p. 426). Sections 7.3 and 7.4 contain more discussions relating conceptual graphs to various data structures, such as trees, and database systems issues. Section 7.5, &amp;quot;Language Patterns&amp;quot; (pp. 445-452), contains discussions of natural language issues including count nouns vs. mass nouns, stative verbs vs. action verbs, and some thematic roles. There have been two basic organizing principles for texts on knowledge representation: by knowledge representation formalism, such as that of Reichgelt (1991), and by the subject matter being represented, such as that of Davis (1990). This book follows neither, though it is closer to the latter. Perhaps the word &amp;quot;Foundations&amp;quot; in the subtitle should be taken seriously, and it should be considered not so much a text about knowledge representation as a text about the foundations for knowledge representation. Whether you would want to use this book as a text in a knowledge representation course you are teaching probably depends on your attitude toward conceptual graphs and your attitude toward Sowa&apos;s style. If you are already an aficionado of conceptual graphs, you will probably like it. If you would rather not use conceptual</context>
</contexts>
<marker>Davis, 1990</marker>
<rawString>Davis, Ernest. 1990. Representations of Commonsense Knowledge. Morgan Kaufmann, San Mateo, CA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Randall Davis</author>
<author>Howard Schrobe</author>
<author>Peter Szolovits</author>
</authors>
<title>What is a knowledge representation? Al Magazine,</title>
<date>1993</date>
<pages>14--1</pages>
<publisher>Spring.</publisher>
<marker>Davis, Schrobe, Szolovits, 1993</marker>
<rawString>Davis, Randall, Howard Schrobe, and Peter Szolovits. 1993. What is a knowledge representation? Al Magazine, 14(1):17-33, Spring.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Guy W Mineau</author>
</authors>
<title>The extensional semantics of the conceptual graph formalism.</title>
<date>2000</date>
<booktitle>Conceptual Structures: Logical, Linguistic, and Computational Issues. Volume 1867 of Lecture Notes in Artificial Intelligence.</booktitle>
<pages>221--234</pages>
<editor>In Bernhard Ganter and Guy W. Mineau, editors,</editor>
<publisher>Springer-Verlag,</publisher>
<location>Berlin,</location>
<contexts>
<context position="10593" citStr="Mineau (2000)" startWordPosition="1699" endWordPosition="1700"> Thme Date: @1 Figure 2 A conceptual graph for Every employee is hired by some manager on some date (p. 456). is hired by some manager on some date, but there is nothing in the conceptual graph to indicate the scopes of the quantifiers. The quantifier structure could be any of these: (Vx : Employee) (!y : Manager)(!z :Date), (3!y : Manager)(Vx : Employee)(3!z : Date), (!z: Date)(Vx : Employee)(3!y : Manager), (3!y : Manager)(3!z : Date)(Vx : Employee). The basic text on conceptual graphs is Sowa (1984). The semantics of conceptual graphs remains a topic of the current literature. For example, Mineau (2000) presents an extensional semantics of the fragment of conceptual graphs that contains neither nested graphs nor negation. For the complete current word on conceptual graphs, see the author&apos;s Web site, http: //www.bestweb.net/—sowa /cg/. Appendix A.3 (pp. 489-491) is a very short introduction to the Knowledge Interchange Format, KIF, mostly by means of five example English sentences that are translated into conceptual graphs, predicate logic, and KIF. KIF is a machine-readable version of predicate logic designed for sharing knowledge bases among programs. Its principal reference is at http://lo</context>
</contexts>
<marker>Mineau, 2000</marker>
<rawString>Mineau, Guy W. 2000. The extensional semantics of the conceptual graph formalism. In Bernhard Ganter and Guy W. Mineau, editors, Conceptual Structures: Logical, Linguistic, and Computational Issues. Volume 1867 of Lecture Notes in Artificial Intelligence. Springer-Verlag, Berlin, pages 221-234.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Han Reichgelt</author>
</authors>
<title>Knowledge Representation: An Al Perspective. Ablex,</title>
<date>1991</date>
<location>Norwood, NJ.</location>
<contexts>
<context position="26515" citStr="Reichgelt (1991)" startWordPosition="4078" endWordPosition="4079">ubsection on query graphs: &amp;quot;conceptual graphs can also express any database query that can be expressed in SQL&amp;quot; (p. 426). Sections 7.3 and 7.4 contain more discussions relating conceptual graphs to various data structures, such as trees, and database systems issues. Section 7.5, &amp;quot;Language Patterns&amp;quot; (pp. 445-452), contains discussions of natural language issues including count nouns vs. mass nouns, stative verbs vs. action verbs, and some thematic roles. There have been two basic organizing principles for texts on knowledge representation: by knowledge representation formalism, such as that of Reichgelt (1991), and by the subject matter being represented, such as that of Davis (1990). This book follows neither, though it is closer to the latter. Perhaps the word &amp;quot;Foundations&amp;quot; in the subtitle should be taken seriously, and it should be considered not so much a text about knowledge representation as a text about the foundations for knowledge representation. Whether you would want to use this book as a text in a knowledge representation course you are teaching probably depends on your attitude toward conceptual graphs and your attitude toward Sowa&apos;s style. If you are already an aficionado of conceptua</context>
</contexts>
<marker>Reichgelt, 1991</marker>
<rawString>Reichgelt, Han. 1991. Knowledge Representation: An Al Perspective. Ablex, Norwood, NJ.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stuart C Shapiro</author>
</authors>
<title>A net structure for semantic information storage, deduction and retrieval.</title>
<date>1971</date>
<booktitle>In Proceedings of the Second International Joint Conference on Artificial Intelligence.</booktitle>
<pages>512--523</pages>
<publisher>Morgan Kaufmann,</publisher>
<location>San Mateo, CA,</location>
<contexts>
<context position="8126" citStr="Shapiro 1971" startWordPosition="1278" endWordPosition="1279">cification of vocabulary, syntax, semantics, and rules of inference. The first definition is, &amp;quot;A conceptual graph g is a bipartite graph that has two kinds of nodes called concepts and conceptual relations&amp;quot; (p. 477). A simple example of a conceptual graph is shown in Figure 1. In the official linear notation, this conceptual graph is written as [Cat] (On) [Mat] In either notation, [Cat] and [Mat] are concepts, and (On) is a &amp;quot;conceptual relation.&amp;quot; The use of the term conceptual relation is not fully justified. When I first introduced the distinction between conceptual and structural relations (Shapiro 1971), the idea was that structural relations were represented by arcs, and conceptual relations were conceptual entities in their own right, were represented by nodes, and could participate in relationships with other conceptual entities. It is true that the &amp;quot;conceptual relations&amp;quot; of conceptual graphs are nodes rather than arcs, but since conceptual graphs are bipartite, &amp;quot;there are no arcs that link ... relations to relations&amp;quot; (p. 478), and so conceptual graphs cannot represent information about so-called conceptual relations. The concepts [Cat] and [Mat] are the simplest variety of concept: &amp;quot;Ever</context>
</contexts>
<marker>Shapiro, 1971</marker>
<rawString>Shapiro, Stuart C. 1971, A net structure for semantic information storage, deduction and retrieval. In Proceedings of the Second International Joint Conference on Artificial Intelligence. Morgan Kaufmann, San Mateo, CA, pages 512-523.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stuart C Shapiro</author>
</authors>
<title>Processing, bottom-up and top-down. In</title>
<date>1987</date>
<booktitle>Encyclopedia of Artificial Intelligence.</booktitle>
<pages>779--785</pages>
<editor>Stuart C. Shapiro, editor,</editor>
<publisher>John Wiley &amp; Sons,</publisher>
<location>New York,</location>
<note>Reprinted in Second Edition,</note>
<marker>Shapiro, 1987</marker>
<rawString>Shapiro, Stuart C. 1987. Processing, bottom-up and top-down. In Stuart C. Shapiro, editor, Encyclopedia of Artificial Intelligence. John Wiley &amp; Sons, New York, pages 779-785. Reprinted in Second Edition, 1992, pages 1,229-1,234.</rawString>
</citation>
<citation valid="true">
<authors>
<author>John F Sowa</author>
</authors>
<date>1984</date>
<booktitle>Conceptual Structures: Information Processing in Mind and Machine.</booktitle>
<publisher>Addison-Wesley,</publisher>
<location>Reading, MA.</location>
<contexts>
<context position="10487" citStr="Sowa (1984)" startWordPosition="1683" endWordPosition="1684">agreed and said that I could say in this review that he agreed. 288 Book Reviews Manager: @1 Employee: V Thme Date: @1 Figure 2 A conceptual graph for Every employee is hired by some manager on some date (p. 456). is hired by some manager on some date, but there is nothing in the conceptual graph to indicate the scopes of the quantifiers. The quantifier structure could be any of these: (Vx : Employee) (!y : Manager)(!z :Date), (3!y : Manager)(Vx : Employee)(3!z : Date), (!z: Date)(Vx : Employee)(3!y : Manager), (3!y : Manager)(3!z : Date)(Vx : Employee). The basic text on conceptual graphs is Sowa (1984). The semantics of conceptual graphs remains a topic of the current literature. For example, Mineau (2000) presents an extensional semantics of the fragment of conceptual graphs that contains neither nested graphs nor negation. For the complete current word on conceptual graphs, see the author&apos;s Web site, http: //www.bestweb.net/—sowa /cg/. Appendix A.3 (pp. 489-491) is a very short introduction to the Knowledge Interchange Format, KIF, mostly by means of five example English sentences that are translated into conceptual graphs, predicate logic, and KIF. KIF is a machine-readable version of pr</context>
</contexts>
<marker>Sowa, 1984</marker>
<rawString>Sowa, John F. 1984. Conceptual Structures: Information Processing in Mind and Machine. Addison-Wesley, Reading, MA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Paola Velardi</author>
<author>Maria Teresa Pazienza</author>
<author>Mario De Giovanetti</author>
</authors>
<title>Conceptual graphs for the analysis and generation of sentences.</title>
<date>1988</date>
<journal>IBM Journal of Research &amp; Development,</journal>
<pages>32--2</pages>
<marker>Velardi, Pazienza, De Giovanetti, 1988</marker>
<rawString>Velardi, Paola, Maria Teresa Pazienza, and Mario De Giovanetti. 1988. Conceptual graphs for the analysis and generation of sentences. IBM Journal of Research &amp; Development, 32(2):251-267.</rawString>
</citation>
<citation valid="true">
<authors>
<author>John A Zachman</author>
</authors>
<title>A framework for information systems architecture.</title>
<date>1987</date>
<journal>IBM Systems Journal,</journal>
<pages>26--3</pages>
<marker>Zachman, 1987</marker>
<rawString>Zachman, John A. 1987. A framework for information systems architecture. IBM Systems Journal, 26(3):276-292.</rawString>
</citation>
<citation valid="false">
<authors>
<author>C Stuart</author>
</authors>
<title>Shapiro is Professor of Computer Science and Engineering and a member of the Center for Cognitive Science at the University at Buffalo. He is co-editor of Natural Language Processing and Knowledge Representation: Language for Knowledge and Knowledge for Language,</title>
<date>2000</date>
<booktitle>of ACM/SIGART (1991-95) and president of KR, Inc. (1998-2000). His principal research areas are knowledge representation, reasoning, and natural language processing. Shapiro&apos;s address is</booktitle>
<publisher>AAAI Press/The MIT Press,</publisher>
<institution>Department of Computer Science and Engineering, University at Buffalo, The State University of</institution>
<location>New York, 226 Bell Hall, Buffalo, NY 14260-2000, U.S.A.;</location>
<note>e-mail: shapiro@cse.buffalo.edu.</note>
<marker>Stuart, 2000</marker>
<rawString>Stuart C. Shapiro is Professor of Computer Science and Engineering and a member of the Center for Cognitive Science at the University at Buffalo. He is co-editor of Natural Language Processing and Knowledge Representation: Language for Knowledge and Knowledge for Language, (AAAI Press/The MIT Press, 2000), is a Fellow of AAAI, and has served as chair of ACM/SIGART (1991-95) and president of KR, Inc. (1998-2000). His principal research areas are knowledge representation, reasoning, and natural language processing. Shapiro&apos;s address is Department of Computer Science and Engineering, University at Buffalo, The State University of New York, 226 Bell Hall, Buffalo, NY 14260-2000, U.S.A.; e-mail: shapiro@cse.buffalo.edu.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>