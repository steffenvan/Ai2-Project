<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000003">
<note confidence="0.556065">
PDT 2.0 Requirements on a Query Language
</note>
<author confidence="0.950969">
Jiří Mírovský
</author>
<affiliation confidence="0.9561135">
Institute of Formal and Applied Linguistics
Charles University in Prague
</affiliation>
<address confidence="0.752173">
Malostranské nám. 25, 118 00 Prague 1, Czech Republic
</address>
<email confidence="0.923881">
mirovsky@ufal.mff.cuni.cz
</email>
<sectionHeader confidence="0.993423" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.998482727272727">
Linguistically annotated treebanks play an
essential part in the modern computational
linguistics. The more complex the tree-
banks become, the more sophisticated tools
are required for using them, namely for
searching in the data. We study linguistic
phenomena annotated in the Prague Depen-
dency Treebank 2.0 and create a list of re-
quirements these phenomena set on a
search tool, especially on its query lan-
guage.
</bodyText>
<sectionHeader confidence="0.998995" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.99988">
Searching in a linguistically annotated treebank is
a principal task in the modern computational lin-
guistics. A search tool helps extract useful infor-
mation from the treebank, in order to study the lan-
guage, the annotation system or even to search for
errors in the annotation.
The more complex the treebank is, the more so-
phisticated the search tool and its query language
needs to be. The Prague Dependency Treebank 2.0
(Hajič et al. 2006) is one of the most advanced
manually annotated treebanks. We study mainly
the tectogrammatical layer of the Prague Depen-
dency Treebank 2.0 (PDT 2.0), which is by far the
most advanced and complex layer in the treebank,
and show what requirements on a query language
the annotated linguistic phenomena bring. We also
add requirements set by lower layers of annotation.
In section 1 (after this introduction) we mention
related works on search languages for various
</bodyText>
<page confidence="0.990572">
37
</page>
<bodyText confidence="0.999308928571429">
types of corpora. Afterwards, we very shortly in-
troduce PDT 2.0, just to give a general picture of
the principles and complexion of the annotation
scheme.
In section 2 we study the annotation manual for
the tectogrammatical layer of PDT 2.0 (t-manual,
Mikulová et al. 2006) and collect linguistic phe-
nomena that bring special requirements on the
query language. We also study lower layers of an-
notation and add their requirements.
In section 3 we summarize the requirements in
an extensive list of features required from a search
language.
We conclude in section 4.
</bodyText>
<sectionHeader confidence="0.757744" genericHeader="introduction">
1.1 Related Work
</sectionHeader>
<bodyText confidence="0.999027166666667">
In Lai, Bird 2004, the authors name seven linguis-
tic queries they consider important representatives
for checking a sufficiency of a query language
power. They study several query tools and their
query languages and compare them on the basis of
their abilities to express these seven queries. In
Bird et al. 2005, the authors use a revised set of
seven key linguistic queries as a basis for forming
a list of three expressive features important for lin-
guistic queries. The features are: immediate prece-
dence, subtree scoping and edge alignment. In Bird
et al. 2006, another set of seven linguistic queries
is used to show a necessity to enhance XPath (a
standard query language for XML, Clark, DeRose
1999) to support linguistic queries.
Cassidy 2002 studies adequacy of XQuery (a
search language based on XPath, Boag et al. 1999)
for searching in hierarchically annotated data. Re-
</bodyText>
<note confidence="0.818711">
Proceedings of ACL-08: HLT, pages 37–45,
</note>
<page confidence="0.546781">
Columbus, Ohio, USA, June 2008. c�2008 Association for Computational Linguistics
</page>
<bodyText confidence="0.99959036">
quirements on a query language for annotation
graphs used in speech recognition is also presented
in Bird et al. 2000. A description of linguistic phe-
nomena annotated in the Tiger Treebank, along
with an introduction to a search tool TigerSearch,
developed especially for this treebank, is given in
Brants et al. 2002, nevertheless without a systemat-
ic study of the required features.
Laura Kallmeyer (Kallmeyer 2000) studies re-
quirements on a query language based on two ex-
amples of complex linguistic phenomena taken
from the NEGRA corpus and the Penn Treebank,
respectively.
To handle alignment information, Merz and
Volk 2005 study requirements on a search tool for
parallel treebanks.
All the work mentioned above can be used as an
ample source of inspiration, though it cannot be
applied directly to PDT 2.0. A thorough study of
the PDT 2.0 annotation is needed to form conclu-
sions about requirements on a search tool for this
dependency tree-based corpus, consisting of sever-
al layers of annotation and having an extremely
complex annotation scheme, which we shortly de-
scribe in the next subsection.
</bodyText>
<subsectionHeader confidence="0.970011">
1.2 The Prague Dependency Treebank 2.0
</subsectionHeader>
<bodyText confidence="0.99624247368421">
The Prague Dependency Treebank 2.0 is a manual-
ly annotated corpus of Czech. The texts are anno-
tated on three layers – morphological, analytical
and tectogrammatical.
On the morphological layer, each token of every
sentence is annotated with a lemma (attribute
m/lemma), keeping the base form of the token, and
a tag (attribute m/tag), which keeps its morpho-
logical information.
The analytical layer roughly corresponds to the
surface syntax of the sentence; the annotation is a
single-rooted dependency tree with labeled nodes.
Attribute a/afun describes the type of dependen-
cy between a dependent node and its governor. The
order of the nodes from left to right corresponds
exactly to the surface order of tokens in the sen-
tence (attribute a/ord).
The tectogrammatical layer captures the linguis-
tic meaning of the sentence in its context. Again,
the annotation is a dependency tree with labeled
nodes (Hajičová 1998). The correspondence of the
nodes to the lower layers is often not 1:1
(Mírovský 2006).
Attribute functor describes the dependency
between a dependent node and its governor. A tec-
togrammatical lemma (attribute t_lemma) is as-
signed to every node. 16 grammatemes (prefixed
gram) keep additional annotation (e.g.
gram/verbmod for verbal modality).
Topic and focus (Hajičová et al. 1998) are
marked (attribute tfa), together with so-called
deep word order reflected by the order of nodes in
the annotation (attribute deepord).
Coreference relations between nodes of certain
category types are captured. Each node has a
unique identifier (attribute id). Attributes
coref_text.rf and coref_gram.rf contain
ids of coreferential nodes of the respective types.
</bodyText>
<sectionHeader confidence="0.920244" genericHeader="method">
2 Phenomena and Requirements
</sectionHeader>
<bodyText confidence="0.99974996875">
We make a list of linguistic phenomena that are
annotated in PDT 2.0 and that determine the neces-
sary features of a query language.
Our work is focused on two structured layers of
PDT 2.0 – the analytical layer and the tectogram-
matical layer. For using the morphological layer
exclusively and directly, a very good search tool
Manatee/Bonito (Rychlý 2000) can be used. We
intend to access the morphological information
only from the higher layers, not directly. Since
there is relation 1:1 among nodes on the analytical
layer (but for the technical root) and tokens on the
morphological layer, the morphological informa-
tion can be easily merged into the analytical layer
– the nodes only get additional attributes.
The tectogrammatical layer is by far the most
complex layer in PDT 2.0, therefore we start our
analysis with a study of the annotation manual for
the tectogrammatical layer (t-manual, Mikulová et
al. 2006) and focus also on the requirements on ac-
cessing lower layers with non-1:1 relation. After-
wards, we add some requirements on a query lan-
guage set by the annotation of the lower layers –
the analytical layer and the morphological layer.
During the studies, we have to keep in mind that
we do not only want to search for a phenomenon,
but also need to study it, which can be a much
more complex task. Therefore, it is not sufficient
e.g. to find a predicative complement, which is a
trivial task, since attribute functor of the com-
plement is set to value COMPL. In this particular
example, we also need to be able to specify in the
</bodyText>
<page confidence="0.998502">
38
</page>
<bodyText confidence="0.9995946">
query properties of the node the second dependen-
cy of the complement goes to, e.g. that it is an Ac-
tor.
A summary of the required features on a query
language is given in the subsequent section.
</bodyText>
<subsectionHeader confidence="0.997469">
2.1 The Tectogrammatical Layer
</subsectionHeader>
<bodyText confidence="0.999975">
First, we focus on linguistic phenomena annotated
on the tectogrammatical layer. T-manual has more
than one thousand pages. Most of the manual de-
scribes the annotation of simple phenomena that
only require a single-node query or a very simple
structured query. We mostly focus on those phe-
nomena that bring a special requirement on the
query language.
</bodyText>
<subsubsectionHeader confidence="0.604518">
2.1.1 Basic Principles
</subsubsectionHeader>
<bodyText confidence="0.999903666666667">
The basic unit of annotation on the tectogrammati-
cal layer of PDT 2.0 is a sentence.
The representation of the tectogrammatical an-
notation of a sentence is a rooted dependency tree.
It consists of a set of nodes and a set of edges. One
of the nodes is marked as a root. Each node is a
complex unit consisting of a set of pairs attribute-
value (t-manual, page 1). The edges express depen-
dency relations between nodes. The edges do not
have their own attributes; attributes that logically
belong to edges (e.g. type of dependency) are rep-
resented as node-attributes (t-manual, page 2).
It implies the first and most basic requirement
on the query language: one result of the search is
one sentence along with the tree belonging to it.
Also, the query language should be able to express
node evaluation and tree dependency among nodes
in the most direct way.
</bodyText>
<subsectionHeader confidence="0.780674">
2.1.2 Valency
</subsectionHeader>
<bodyText confidence="0.999986043478261">
Valency of semantic verbs, valency of semantic
verbal nouns, valency of semantic nouns that rep-
resent the nominal part of a complex predicate and
valency of some semantic adverbs are annotated
fully in the trees (t-manual, pages 162-3). Since the
valency of verbs is the most complete in the anno-
tation and since the requirements on searching for
valency frames of nouns are the same as of verbs,
we will (for the sake of simplicity in expressions)
focus on the verbs only. Every verb meaning is as-
signed a valency frame. Verbs usually have more
than one meaning; each is assigned a separate va-
lency frame. Every verb has as many valency
frames as it has meanings (t-manual, page 105).
Therefore, the query language has to be able to
distinguish valency frames and search for each one
of them, at least as long as the valency frames dif-
fer in their members and not only in their index.
(Two or more identical valency frames may repre-
sent different verb meanings (t-manual, page 105).)
The required features include a presence of a son,
its non-presence, as well as controlling number of
sons of a node.
</bodyText>
<subsectionHeader confidence="0.772041">
2.1.3 Coordination and Apposition
</subsectionHeader>
<bodyText confidence="0.957343458333333">
Tree dependency is not always linguistic depen-
dency (t-manual, page 9). Coordination and appo-
sition are examples of such a phenomenon (t-man-
ual, page 282). If a Predicate governs two coordi-
nated Actors, these Actors technically depend on a
coordinating node and this coordinating node de-
pends on the Predicate. the query language should
be able to skip such a coordinating node. In gener-
al, there should be a possibility to skip any type of
node.
Skipping a given type of node helps but is not
sufficient. The coordinated structure can be more
complex, for example the Predicate itself can be
coordinated too. Then, the Actors do not even be-
long to the subtree of any of the Predicates. In the
following example, the two Predicates (PRED) are
coordinated with conjunction (CONJ), as well as
the two Actors (ACT). The linguistic dependencies
go from each of the Actors to each of the Predi-
cates but the tree dependencies are quite different:
In Czech: S čím mohou vlastníci i nájemci počítat,
na co by se měli připravit?
In English: What can owners and tenants expect,
what they should get ready for?
</bodyText>
<page confidence="0.996742">
39
</page>
<bodyText confidence="0.9998942">
The query language should therefore be able to ex-
press the linguistic dependency directly. The infor-
mation about the linguistic dependency is annotat-
ed in the treebank by the means of references, as
well as many other phenomena (see below).
</bodyText>
<subsubsectionHeader confidence="0.663923">
2.1.4 Idioms (Phrasemes) etc.
</subsubsectionHeader>
<bodyText confidence="0.999220576923077">
Idioms/phrasemes (idiomatic/phraseologic con-
structions) are combinations of two or more words
with a fixed lexical content, which together consti-
tute one lexical unit with a metaphorical meaning
(which cannot be decomposed into meanings of its
parts) (t-manual, page 308). Only expressions
which are represented by at least two auto-seman-
tic nodes in the tectogrammatical tree are captured
as idioms (functor DPHR). One-node (one-auto-se-
mantic-word) idioms are not represented as idioms
in the tree. For example, in the combination
“chlapec k pohledání” (“a boy to look for”), the
prepositional phrase gets functor RSTR, and it is
not indicated that it is an idiom.
Secondary prepositions are another example of a
linguistic phenomenon that can be easily recog-
nized in the surface form of the sentence but is dif-
ficult to find in the tectogrammatical tree.
Therefore, the query language should offer a ba-
sic searching in the linear form of the sentence, to
allow searching for any idiom or phraseme, regard-
less of the way it is or is not captured in the tec-
togrammatical tree. It can even help in a situation
when the user does not know how a certain linguis-
tic phenomenon is annotated on the tectogrammati-
cal layer.
</bodyText>
<subsubsectionHeader confidence="0.551818">
2.1.5 Complex Predicates
</subsubsectionHeader>
<bodyText confidence="0.999964714285714">
A complex predicate is a multi-word predicate
consisting of a semantically empty verb which ex-
presses the grammatical meanings in a sentence,
and a noun (frequently denoting an event or a state
of affairs) which carries the main lexical meaning
of the entire phrase (t-manual, page 345). Search-
ing for a complex predicate is a simple task and
does not bring new requirements on the query lan-
guage. It is valency of complex predicates that re-
quires our attention, especially dual function of a
valency modification. The nominal and verbal
components of the complex predicate are assigned
the appropriate valency frame from the valency
lexicon. By means of newly established nodes with
t_lemma substitutes, those valency modification
positions not present at surface layer are filled.
There are problematic cases where the expressed
valency modification occurs in the same form in
the valency frames of both components of the com-
plex predicate (t-manual, page 362).
To study these special cases of valency, the
query language has to offer a possibility to define
that a valency member of the verbal part of a com-
plex predicate is at the same time a valency mem-
ber of the nominal part of the complex predicate,
possibly with a different function. The identity of
valency members is annotated again by the means
of references, which is explained later.
</bodyText>
<sectionHeader confidence="0.872898" genericHeader="method">
2.1.6 Predicative Complement (Dual Depen-
dency)
</sectionHeader>
<bodyText confidence="0.997950523809524">
On the tectogrammatical layer, also cases of the
so-called predicative complement are represented.
The predicative complement is a non-obligatory
free modification (adjunct) which has a dual se-
mantic dependency relation. It simultaneously
modifies a noun and a verb (which can be nominal-
ized).
These two dependency relations are represented
by different means (t-manual, page 376):
● the dependency on a verb is represented by
means of an edge (which means it is repre-
sented in the same way like other modifi-
cations),
● the dependency on a (semantic) noun is
represented by means of attribute com-
pl.rf, the value of which is the identifier
of the modified noun.
In the following example, the predicative comple-
ment (COMPL) has one dependency on a verb
(PRED) and another (dual) dependency on a noun
(ACT):
</bodyText>
<page confidence="0.992209">
40
</page>
<bodyText confidence="0.963876142857143">
In Czech: Ze světové recese vyšly jako jednička
Spojené státy.
In English: The United States emerged from the
world recession as number one.
The second form of dependency, represented
once again with references (still see below), has to
be expressible in the query language.
</bodyText>
<subsectionHeader confidence="0.405936">
2.1.7 Coreferences
</subsectionHeader>
<bodyText confidence="0.951012137931034">
Two types of coreferences are annotated on the
tectogrammatical layer:
a grammatical coreference
a textual coreference
The current way of representing coreference uses
references (t-manual, page 996).
Let us finally explain what references are. Ref-
erences make use of the fact that every node of ev-
ery tree has an identifier (the value of attribute id),
which is unique within PDT 2.0. If coreference,
dual dependency, or valency member identity is a
link between two nodes (one node referring to an-
other), it is enough to specify the identifier of the
referred node in the appropriate attribute of the re-
ferring node. Reference types are distinguished by
different referring attributes. Individual reference
subtypes can be further distinguished by the value
of another attribute.
The essential point in references (for the query
language) is that at the time of forming a query, the
value of the reference is unknown. For example, in
the case of dual dependency of predicative comple-
ment, we know that the value of attribute com-
pl.rf of the complement must be the same as the
value of attribute id of the governing noun, but the
value itself differs tree from tree and therefore is
unknown at the time of creating the query. The
query language has to offer a possibility to bind
these unknown values.
</bodyText>
<subsubsectionHeader confidence="0.411215">
2.1.8 Topic-Focus Articulation
</subsubsectionHeader>
<bodyText confidence="0.999789516129032">
On the tectogrammatical layer, also the topic-focus
articulation (TFA) is annotated. TFA annotation
comprises two phenomena:
a contextual boundness, which is represent-
ed by values of attribute tfa for each
node of the tectogrammatical tree.
a communicative dynamism, which is repre-
sented by the underlying order of nodes.
Annotated trees therefore contain two types of in-
formation - on the one hand the value of contextual
boundness of a node and its relative ordering with
respect to its brother nodes reflects its function
within the topic-focus articulation of the sentence,
on the other hand the set of all the TFA values in
the tree and the relative ordering of subtrees reflect
the overall functional perspective of the sentence,
and thus enable to distinguish in the sentence the
complex categories of topic and focus (however,
these are not annotated explicitly) (t-manual, page
1118).
While contextual boundness does not bring any
new requirement on the query language, commu-
nicative dynamism requires that the relative order
of nodes in the tree from left to right can be ex-
pressed. The order of nodes is controlled by at-
tribute deepord, which contains a non-negative
real (usually natural) number that sets the order of
the nodes from left to right. Therefore, we will
again need to refer to a value of an attribute of an-
other node but this time with relation other than
“equal to”.
</bodyText>
<sectionHeader confidence="0.671647" genericHeader="method">
2.1.8.1 Focus Proper
</sectionHeader>
<bodyText confidence="0.999982076923077">
Focus proper is the most dynamic and communica-
tively significant contextually non-bound part of
the sentence. Focus proper is placed on the right-
most path leading from the effective root of the
tectogrammatical tree, even though it is at a differ-
ent position in the surface structure. The node rep-
resenting this expression will be placed rightmost
in the tectogrammatical tree. If the focus proper is
constituted by an expression represented as the ef-
fective root of the tectogrammatical tree (i.e. the
governing predicate is the focus proper), there is
no right path leading from the effective root (t-
manual, page 1129).
</bodyText>
<subsectionHeader confidence="0.748721">
2.1.8.2 Quasi-Focus
</subsectionHeader>
<bodyText confidence="0.9999192">
Quasi-focus is constituted by (both contrastive and
non-contrastive) contextually bound expressions,
on which the focus proper is dependent. The focus
proper can immediately depend on the quasi-focus,
or it can be a more deeply embedded expression.
In the underlying word order, nodes representing
the quasi-focus, although they are contextually
bound, are placed to the right from their governing
node. Nodes representing the quasi-focus are there-
fore contextually bound nodes on the rightmost
</bodyText>
<page confidence="0.998728">
41
</page>
<bodyText confidence="0.9999216">
path in the tectogrammatical tree (t-manual, page
1130).
The ability of the query language to distinguish
the rightmost node in the tree and the rightmost
path leading from a node is therefore necessary.
</bodyText>
<sectionHeader confidence="0.670418" genericHeader="method">
2.1.8.3 Rhematizers
</sectionHeader>
<bodyText confidence="0.998526575757576">
Rhematizers are expressions whose function is to
signal the topic-focus articulation categories in the
sentence, namely the communicatively most im-
portant categories - the focus and contrastive topic.
The position of rhematizers in the surface word
order is quite loose, however they almost always
stand right before the expressions they rhematize,
i.e. the expressions whose being in the focus or
contrastive topic they signal (t-manual, pages
1165-6).
The guidelines for positioning rhematizers in
tectogrammatical trees are simple (t-manual, page
1171):
● a rhematizer (i.e. the node representing the
rhematizer) is placed as the closest left
brother (in the underlying word order) of
the first node of the expression that is in its
scope.
● if the scope of a rhematizer includes the
governing predicate, the rhematizer is
placed as the closest left son of the node
representing the governing predicate.
● if a rhematizer constitutes the focus prop-
er, it is placed according to the guidelines
for the position of the focus proper - i.e. on
the rightmost path leading from the effec-
tive root of the tectogrammatical tree.
Rhematizers therefore bring a further requirement
on the query language – an ability to control the
distance between nodes (in the terms of deep word
order); at the very least, the query language has to
distinguish an immediate brother and relative hori-
zontal position of nodes.
</bodyText>
<subsectionHeader confidence="0.643037">
2.1.8.4 (Non-)Projectivity
</subsectionHeader>
<bodyText confidence="0.999574375">
Projectivity of a tree is defined as follows: if two
nodes B and C are connected by an edge and C is
to the left from B, then all nodes to the right from
B and to the left from C are connected with the
root via a path that passes through at least one of
the nodes B or C. In short: between a father and its
son there can only be direct or indirect sons of the
father (t-manual, page 1135).
The relative position of a node (node A) and an
edge (nodes B, C) that together cause a non-projec-
tivity forms four different configurations: (“B is on
the left from C” or “B is on the right from C”) x
(“A is on the path from B to the root” or “it is
not”). Each of the configurations can be searched
for using properties of the language that have been
required so far by other linguistic phenomena. Four
different queries search for four different configu-
rations.
To be able to search for all configurations in one
query, the query language should be able to com-
bine several queries into one multi-query. We do
not require that a general logical expression can be
set above the single queries. We only require a
general OR combination of the single queries.
</bodyText>
<subsectionHeader confidence="0.994373">
2.1.9 Accessing Lower Layers
</subsectionHeader>
<bodyText confidence="0.87160025">
Studies of many linguistic phenomena require a
multilayer access.
In Czech: Byl by šel do lesa.
In English (lit.): He would have gone to the forest.
</bodyText>
<page confidence="0.998189">
42
</page>
<bodyText confidence="0.999984208333333">
For example, the query “find an example of Patient
that is more dynamic than its governing Predicate
(with greater deepord) but on the surface layer is
on the left side from the Predicate” requires infor-
mation both from the tectogrammatical layer and
the analytical layer.
The picture above is taken from PDT 2.0 guide
and shows the typical relation among layers of an-
notation for the sentence (the lowest w-layer is a
technical layer containing only the tokenized origi-
nal data).
The information from the lower layers can be
easily compressed into the analytical layer, since
there is relation 1:1 among the layers (with some
rare exceptions like misprints in the w-layer). The
situation between the tectogrammatical layer and
the analytical layer is much more complex. Several
nodes from the analytical layer may be (and often
are) represented by one node on the tectogrammat-
ical layer and new nodes without an analytical
counterpart may appear on the tectogrammatical
layer. It is necessary that the query language ad-
dresses this issue and allows access to the informa-
tion from the lower layers.
</bodyText>
<subsectionHeader confidence="0.999734">
2.2 The Analytical and Morphological Layer
</subsectionHeader>
<bodyText confidence="0.999955875">
The analytical layer is much less complex than the
tectogrammatical layer. The basic principles are
the same – the representation of the structure of a
sentence is rendered in the form of a tree – a con-
nected acyclic directed graph in which no more
than one edge leads into a node, and whose nodes
are labeled with complex symbols (sets of at-
tributes). The edges are not labeled (in the techni-
cal sense). The information logically belonging to
an edge is represented in attributes of the depend-
ing node. One node is marked as a root.
Here, we focus on linguistic phenomena anno-
tated on the analytical and morphological layer that
bring a new requirement on the query language
(that has not been set in the studies of the tec-
togrammatical layer).
</bodyText>
<subsectionHeader confidence="0.704868">
2.2.1 Morphological Tags
</subsectionHeader>
<bodyText confidence="0.999980176470588">
In PDT 2.0, morphological tags are positional.
They consist of 15 characters, each representing a
certain morphological category, e.g. the first posi-
tion represents part of speech, the third position
represents gender, the fourth position represents
number, the fifth position represents case.
The query language has to offer a possibility to
specify a part of the tag and leave the rest unspeci-
fied. It has to be able to set such conditions on the
tag like “this is a noun”, or “this is a plural in
fourth case”. Some conditions might include nega-
tion or enumeration, like “this is an adjective that
is not in fourth case”, or “this is a noun either in
third or fourth case”. This is best done with some
sort of wild cards. The latter two examples suggest
that such a strong tool like regular expressions may
be needed.
</bodyText>
<subsectionHeader confidence="0.787409">
2.2.2 Agreement
</subsectionHeader>
<bodyText confidence="0.9999945">
There are several cases of agreement in Czech lan-
guage, like agreement in case, number and gender
in attributive adjective phrase, agreement in gender
and number between predicate and subject (though
it may be complex), or agreement in case in appo-
sition.
To study agreement, the query language has to
allow to make a reference to only a part of value of
attribute of another node, e.g. to the fifth position
of the morphological tag for case.
</bodyText>
<subsectionHeader confidence="0.855573">
2.2.3 Word Order
</subsectionHeader>
<bodyText confidence="0.999979052631579">
Word order is a linguistic phenomenon widely
studied on the analytical layer, because it offers a
perfect combination of a word order (the same like
in the sentence) and syntactic relations between the
words. The same technique like with the deep
word order on the tectogrammatical layer can be
used here. The order of words (tokens) ~ nodes in
the analytical tree is controlled by attribute ord.
Non-projective constructions are much more often
and interesting here than on the tectogrammatical
layer. Nevertheless, they appear also on the tec-
togrammatical layer and their contribution to the
requirements on the query language has already
been mentioned.
The only new requirement on the query lan-
guage is an ability to measure the horizontal dis-
tance between words, to satisfy linguistic queries
like “find trees where a preposition and the head of
the noun phrase are at least five words apart”.
</bodyText>
<sectionHeader confidence="0.954521" genericHeader="method">
3 Summary of the Features
</sectionHeader>
<bodyText confidence="0.999768">
Here we summarize what features the query lan-
guage has to have to suit PDT 2.0. We list the fea-
tures from the previous section and also add some
</bodyText>
<page confidence="0.999314">
43
</page>
<bodyText confidence="0.794203">
obvious requirements that have not been men- ● accessing several layers of annotation at
tioned so far but are very useful generally, regard- the same time with non-1:1 relation (for
less of a corpus. studying relation between layers)
● searching in the surface form of the sen-
</bodyText>
<subsectionHeader confidence="0.533496">
3.1 Complex Evaluation of a Node tence
</subsectionHeader>
<bodyText confidence="0.8883265">
● multiple attributes evaluation (an ability to
set values of several attributes at one node)
● alternative values (e.g. to define that
functor of a node is either a disjunction
or a conjunction)
● alternative nodes (alternative evaluation of
the whole set of attributes of a node)
● wild cards (regular expressions) in values
of attributes (e.g. m/tag=”N...4.*” de-
fines that the morphological tag of a node
is a noun in accusative, regardless of other
morphological categories)
● negation (e.g. to express “this node is not
Actor”)
● relations less than (&lt;=) , greater than (&gt;=)
(for numerical attributes)
</bodyText>
<sectionHeader confidence="0.453998" genericHeader="method">
3.2 Dependencies Between Nodes (Vertical
Relations)
</sectionHeader>
<listItem confidence="0.5780094">
● immediate, transitive dependency (exis-
tence, non-existence)
● vertical distance (from root, from one an-
other)
● number of sons (zero for lists)
</listItem>
<subsectionHeader confidence="0.990919">
3.3 Horizontal Relations
</subsectionHeader>
<bodyText confidence="0.98162875">
● precedence, immediate precedence, hori-
zontal distance (all both positive, negative)
● secondary edges, secondary dependencies,
coreferences, long-range relations
</bodyText>
<subsectionHeader confidence="0.889637">
3.4 Other Features
</subsectionHeader>
<bodyText confidence="0.9971841">
● multiple-tree queries (combined with gen-
eral OR relation)
● skipping a node of a given type (for skip-
ping simple types of coordination, apposi-
tion etc.)
● skipping multiple nodes of a given type
(e.g. for recognizing the rightmost path)
● references (for matching values of at-
tributes unknown at the time of creating
the query)
</bodyText>
<sectionHeader confidence="0.999061" genericHeader="conclusions">
4 Conclusion
</sectionHeader>
<bodyText confidence="0.999993375">
We have studied the Prague Dependency Treebank
2.0 tectogrammatical annotation manual and listed
linguistic phenomena that require a special feature
from any query tool for this corpus. We have also
added several other requirements from the lower
layers of annotation. We have summarized these
features, along with general corpus-independent
features, in a concise list.
</bodyText>
<sectionHeader confidence="0.982732" genericHeader="acknowledgments">
Acknowledgment
</sectionHeader>
<bodyText confidence="0.997511">
This research was supported by the Grant Agency
of the Academy of Sciences of the Czech Repub-
lic, project IS-REST (No. 1ET101120413).
</bodyText>
<sectionHeader confidence="0.998932" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.99748624">
Bird et al. 2000. Towards A Query Language for Anno-
tation Graphs. In: Proceedings of the Second Interna-
tional Language and Evaluation Conference, Paris,
ELRA, 2000.
Bird et al. 2005. Extending Xpath to Support Linguistc
Queries. In: Proceedings of the Workshop on Pro-
gramming Language Technologies for XML, Califor-
nia, USA, 2005. .
Bird et al. 2006. Designing and Evaluating an XPath Di-
alect for Linguistic Queries. In: Proceedings of the
22nd International Conference on Data Engineering
(ICDE), pp 52-61, Atlanta, USA, 2006.
Boag et al. 1999. XQuery 1.0: An XML Query Lan-
guage. IW3C Working Draft,
http://www.w3.org/TR/xpath, 1999.
Brants S. et al. 2002. The TIGER Treebank. In: Pro-
ceedings of TLT 2002, Sozopol, Bulgaria, 2002.
Cassidy S. 2002. XQuery as an Annotation Query Lan-
guage: a Use Case Analysis. In: Proceedings of the
Third International Conference on Language Re-
sources and Evaluation, Canary Islands, Spain, 2002
Clark J., DeRose S. 1999. XML Path Language
(XPath). http://www.w3.org/TR/xpath, 1999.
Hajič J. et al. 2006. Prague Dependency Treebank 2.0.
CD-ROM LDC2006T01, LDC, Philadelphia, 2006.
</reference>
<page confidence="0.980738">
44
</page>
<reference confidence="0.99709071875">
Hajičová E. 1998. Prague Dependency Treebank: From
analytic to tectogrammatical annotations. In: Pro-
ceedings of 2nd TST, Brno, Springer-Verlag Berlin
Heidelberg New York, 1998, pp. 45-50.
Hajičová E., Partee B., Sgall P. 1998. Topic-Focus Ar-
ticulation, Tripartite Structures and Semantic Con-
tent. Dordrecht, Amsterdam, Kluwer Academic Pub-
lishers, 1998.
Havelka J. 2007. Beyond Projectivity: Multilingual
Evaluation of Constraints and Measures on Non-Pro-
jective Structures. In Proceedings of ACL 2007,
Prague, pp. 608-615.
Kallmeyer L. 2000: On the Complexity of Queries for
Structurally Annotated Linguistic Data. In Proceed-
ings of ACIDCA&apos;2000, Corpora and Natural Lan-
guage Processing, Tunisia, 2000, pp. 105-110.
Lai C., Bird S. 2004. Querying and updating treebanks:
A critical survey and requirements analysis. In: Pro-
ceedings of the Australasian Language Technology
Workshop, Sydney, Australia, 2004
Merz Ch., Volk M. 2005. Requirements for a Parallel
Treebank Search Tool. In: Proceedings of GLDV-
Conference, Bonn, Germany, 2005.
Mikulová et al. 2006. Annotation on the Tectogrammat-
ical Level in the Prague Dependency Treebank (Ref-
erence Book). OFAL/CKL Technical Report
TR-2006-32, Charles University in Prague, 2006.
Mírovský J. 2006. Netgraph: a Tool for Searching in
Prague Dependency Treebank 2.0. In Proceedings of
TLT 2006, Prague, pp. 211-222.
Rychlý P. 2000. Korpusové manažery a jejich efektivní
implementace. PhD. Thesis, Brno, 2000.
</reference>
<page confidence="0.999389">
45
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.633563">
<title confidence="0.984797">PDT 2.0 Requirements on a Query Language</title>
<author confidence="0.859685">Jiří Mírovský</author>
<affiliation confidence="0.968016">Institute of Formal and Applied Linguistics Charles University in Prague</affiliation>
<address confidence="0.97078">Malostranské nám. 25, 118 00 Prague 1, Czech Republic</address>
<email confidence="0.991363">mirovsky@ufal.mff.cuni.cz</email>
<abstract confidence="0.98333275">Linguistically annotated treebanks play an essential part in the modern computational linguistics. The more complex the treebanks become, the more sophisticated tools are required for using them, namely for searching in the data. We study linguistic phenomena annotated in the Prague Dependency Treebank 2.0 and create a list of requirements these phenomena set on a search tool, especially on its query language.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Bird</author>
</authors>
<title>Towards A Query Language for Annotation Graphs. In:</title>
<date>2000</date>
<booktitle>Proceedings of the Second International Language and Evaluation Conference,</booktitle>
<location>Paris, ELRA,</location>
<marker>Bird, 2000</marker>
<rawString>Bird et al. 2000. Towards A Query Language for Annotation Graphs. In: Proceedings of the Second International Language and Evaluation Conference, Paris, ELRA, 2000.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Bird</author>
</authors>
<title>Extending Xpath to Support Linguistc Queries. In:</title>
<date>2005</date>
<booktitle>Proceedings of the Workshop on Programming Language Technologies for XML,</booktitle>
<publisher></publisher>
<location>California, USA,</location>
<marker>Bird, 2005</marker>
<rawString>Bird et al. 2005. Extending Xpath to Support Linguistc Queries. In: Proceedings of the Workshop on Programming Language Technologies for XML, California, USA, 2005. .</rawString>
</citation>
<citation valid="true">
<authors>
<author>Bird</author>
</authors>
<title>Designing and Evaluating an XPath Dialect for Linguistic Queries. In:</title>
<date>2006</date>
<booktitle>Proceedings of the 22nd International Conference on Data Engineering (ICDE),</booktitle>
<pages>52--61</pages>
<location>Atlanta, USA,</location>
<marker>Bird, 2006</marker>
<rawString>Bird et al. 2006. Designing and Evaluating an XPath Dialect for Linguistic Queries. In: Proceedings of the 22nd International Conference on Data Engineering (ICDE), pp 52-61, Atlanta, USA, 2006.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Boag</author>
</authors>
<title>XQuery 1.0: An XML Query Language. IW3C Working Draft,</title>
<date>1999</date>
<location>http://www.w3.org/TR/xpath,</location>
<marker>Boag, 1999</marker>
<rawString>Boag et al. 1999. XQuery 1.0: An XML Query Language. IW3C Working Draft, http://www.w3.org/TR/xpath, 1999.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Brants</author>
</authors>
<title>The TIGER Treebank. In:</title>
<date>2002</date>
<booktitle>Proceedings of TLT 2002,</booktitle>
<location>Sozopol, Bulgaria,</location>
<marker>Brants, 2002</marker>
<rawString>Brants S. et al. 2002. The TIGER Treebank. In: Proceedings of TLT 2002, Sozopol, Bulgaria, 2002.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Cassidy</author>
</authors>
<title>XQuery as an Annotation Query Language: a Use Case Analysis. In:</title>
<date>2002</date>
<booktitle>Proceedings of the Third International Conference on Language Resources and Evaluation, Canary Islands,</booktitle>
<contexts>
<context position="2888" citStr="Cassidy 2002" startWordPosition="469" endWordPosition="470"> language power. They study several query tools and their query languages and compare them on the basis of their abilities to express these seven queries. In Bird et al. 2005, the authors use a revised set of seven key linguistic queries as a basis for forming a list of three expressive features important for linguistic queries. The features are: immediate precedence, subtree scoping and edge alignment. In Bird et al. 2006, another set of seven linguistic queries is used to show a necessity to enhance XPath (a standard query language for XML, Clark, DeRose 1999) to support linguistic queries. Cassidy 2002 studies adequacy of XQuery (a search language based on XPath, Boag et al. 1999) for searching in hierarchically annotated data. ReProceedings of ACL-08: HLT, pages 37–45, Columbus, Ohio, USA, June 2008. c�2008 Association for Computational Linguistics quirements on a query language for annotation graphs used in speech recognition is also presented in Bird et al. 2000. A description of linguistic phenomena annotated in the Tiger Treebank, along with an introduction to a search tool TigerSearch, developed especially for this treebank, is given in Brants et al. 2002, nevertheless without a syste</context>
</contexts>
<marker>Cassidy, 2002</marker>
<rawString>Cassidy S. 2002. XQuery as an Annotation Query Language: a Use Case Analysis. In: Proceedings of the Third International Conference on Language Resources and Evaluation, Canary Islands, Spain, 2002</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Clark</author>
<author>S DeRose</author>
</authors>
<date>1999</date>
<booktitle>XML Path Language (XPath). http://www.w3.org/TR/xpath,</booktitle>
<marker>Clark, DeRose, 1999</marker>
<rawString>Clark J., DeRose S. 1999. XML Path Language (XPath). http://www.w3.org/TR/xpath, 1999.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Hajič</author>
</authors>
<date>2006</date>
<booktitle>Prague Dependency Treebank 2.0. CD-ROM LDC2006T01,</booktitle>
<location>LDC, Philadelphia,</location>
<marker>Hajič, 2006</marker>
<rawString>Hajič J. et al. 2006. Prague Dependency Treebank 2.0. CD-ROM LDC2006T01, LDC, Philadelphia, 2006.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Hajičová</author>
</authors>
<title>Prague Dependency Treebank: From analytic to tectogrammatical annotations. In:</title>
<date>1998</date>
<booktitle>Proceedings of 2nd TST,</booktitle>
<pages>45--50</pages>
<location>Brno, Springer-Verlag Berlin Heidelberg New York,</location>
<contexts>
<context position="5204" citStr="Hajičová 1998" startWordPosition="838" endWordPosition="839">n, and a tag (attribute m/tag), which keeps its morphological information. The analytical layer roughly corresponds to the surface syntax of the sentence; the annotation is a single-rooted dependency tree with labeled nodes. Attribute a/afun describes the type of dependency between a dependent node and its governor. The order of the nodes from left to right corresponds exactly to the surface order of tokens in the sentence (attribute a/ord). The tectogrammatical layer captures the linguistic meaning of the sentence in its context. Again, the annotation is a dependency tree with labeled nodes (Hajičová 1998). The correspondence of the nodes to the lower layers is often not 1:1 (Mírovský 2006). Attribute functor describes the dependency between a dependent node and its governor. A tectogrammatical lemma (attribute t_lemma) is assigned to every node. 16 grammatemes (prefixed gram) keep additional annotation (e.g. gram/verbmod for verbal modality). Topic and focus (Hajičová et al. 1998) are marked (attribute tfa), together with so-called deep word order reflected by the order of nodes in the annotation (attribute deepord). Coreference relations between nodes of certain category types are captured. E</context>
</contexts>
<marker>Hajičová, 1998</marker>
<rawString>Hajičová E. 1998. Prague Dependency Treebank: From analytic to tectogrammatical annotations. In: Proceedings of 2nd TST, Brno, Springer-Verlag Berlin Heidelberg New York, 1998, pp. 45-50.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Hajičová</author>
<author>B Partee</author>
<author>P Sgall</author>
</authors>
<title>Topic-Focus Articulation, Tripartite Structures and Semantic Content.</title>
<date>1998</date>
<publisher>Kluwer Academic Publishers,</publisher>
<location>Dordrecht, Amsterdam,</location>
<contexts>
<context position="5587" citStr="Hajičová et al. 1998" startWordPosition="894" endWordPosition="897">tly to the surface order of tokens in the sentence (attribute a/ord). The tectogrammatical layer captures the linguistic meaning of the sentence in its context. Again, the annotation is a dependency tree with labeled nodes (Hajičová 1998). The correspondence of the nodes to the lower layers is often not 1:1 (Mírovský 2006). Attribute functor describes the dependency between a dependent node and its governor. A tectogrammatical lemma (attribute t_lemma) is assigned to every node. 16 grammatemes (prefixed gram) keep additional annotation (e.g. gram/verbmod for verbal modality). Topic and focus (Hajičová et al. 1998) are marked (attribute tfa), together with so-called deep word order reflected by the order of nodes in the annotation (attribute deepord). Coreference relations between nodes of certain category types are captured. Each node has a unique identifier (attribute id). Attributes coref_text.rf and coref_gram.rf contain ids of coreferential nodes of the respective types. 2 Phenomena and Requirements We make a list of linguistic phenomena that are annotated in PDT 2.0 and that determine the necessary features of a query language. Our work is focused on two structured layers of PDT 2.0 – the analytic</context>
</contexts>
<marker>Hajičová, Partee, Sgall, 1998</marker>
<rawString>Hajičová E., Partee B., Sgall P. 1998. Topic-Focus Articulation, Tripartite Structures and Semantic Content. Dordrecht, Amsterdam, Kluwer Academic Publishers, 1998.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Havelka</author>
</authors>
<title>Beyond Projectivity: Multilingual Evaluation of Constraints and Measures on Non-Projective Structures.</title>
<date>2007</date>
<booktitle>In Proceedings of ACL 2007, Prague,</booktitle>
<pages>608--615</pages>
<marker>Havelka, 2007</marker>
<rawString>Havelka J. 2007. Beyond Projectivity: Multilingual Evaluation of Constraints and Measures on Non-Projective Structures. In Proceedings of ACL 2007, Prague, pp. 608-615.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L Kallmeyer</author>
</authors>
<title>On the Complexity of Queries for Structurally Annotated Linguistic Data.</title>
<date>2000</date>
<booktitle>In Proceedings of ACIDCA&apos;2000, Corpora and Natural Language Processing,</booktitle>
<pages>105--110</pages>
<location>Tunisia,</location>
<contexts>
<context position="3558" citStr="Kallmeyer 2000" startWordPosition="572" endWordPosition="573"> XPath, Boag et al. 1999) for searching in hierarchically annotated data. ReProceedings of ACL-08: HLT, pages 37–45, Columbus, Ohio, USA, June 2008. c�2008 Association for Computational Linguistics quirements on a query language for annotation graphs used in speech recognition is also presented in Bird et al. 2000. A description of linguistic phenomena annotated in the Tiger Treebank, along with an introduction to a search tool TigerSearch, developed especially for this treebank, is given in Brants et al. 2002, nevertheless without a systematic study of the required features. Laura Kallmeyer (Kallmeyer 2000) studies requirements on a query language based on two examples of complex linguistic phenomena taken from the NEGRA corpus and the Penn Treebank, respectively. To handle alignment information, Merz and Volk 2005 study requirements on a search tool for parallel treebanks. All the work mentioned above can be used as an ample source of inspiration, though it cannot be applied directly to PDT 2.0. A thorough study of the PDT 2.0 annotation is needed to form conclusions about requirements on a search tool for this dependency tree-based corpus, consisting of several layers of annotation and having </context>
</contexts>
<marker>Kallmeyer, 2000</marker>
<rawString>Kallmeyer L. 2000: On the Complexity of Queries for Structurally Annotated Linguistic Data. In Proceedings of ACIDCA&apos;2000, Corpora and Natural Language Processing, Tunisia, 2000, pp. 105-110.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C Lai</author>
<author>S Bird</author>
</authors>
<title>Querying and updating treebanks: A critical survey and requirements analysis. In:</title>
<date>2004</date>
<booktitle>Proceedings of the Australasian Language Technology Workshop,</booktitle>
<location>Sydney, Australia,</location>
<marker>Lai, Bird, 2004</marker>
<rawString>Lai C., Bird S. 2004. Querying and updating treebanks: A critical survey and requirements analysis. In: Proceedings of the Australasian Language Technology Workshop, Sydney, Australia, 2004</rawString>
</citation>
<citation valid="true">
<authors>
<author>Merz Ch</author>
<author>M Volk</author>
</authors>
<title>Requirements for a Parallel Treebank Search Tool. In:</title>
<date>2005</date>
<booktitle>Proceedings of GLDVConference,</booktitle>
<location>Bonn, Germany,</location>
<marker>Ch, Volk, 2005</marker>
<rawString>Merz Ch., Volk M. 2005. Requirements for a Parallel Treebank Search Tool. In: Proceedings of GLDVConference, Bonn, Germany, 2005.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mikulová</author>
</authors>
<title>Annotation on the Tectogrammatical Level in the Prague Dependency Treebank (Reference Book).</title>
<date>2006</date>
<tech>OFAL/CKL Technical Report TR-2006-32,</tech>
<institution>Charles University in Prague,</institution>
<marker>Mikulová, 2006</marker>
<rawString>Mikulová et al. 2006. Annotation on the Tectogrammatical Level in the Prague Dependency Treebank (Reference Book). OFAL/CKL Technical Report TR-2006-32, Charles University in Prague, 2006.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Mírovský</author>
</authors>
<title>Netgraph: a Tool for Searching in Prague Dependency Treebank 2.0.</title>
<date>2006</date>
<booktitle>In Proceedings of TLT 2006, Prague,</booktitle>
<pages>211--222</pages>
<contexts>
<context position="5290" citStr="Mírovský 2006" startWordPosition="853" endWordPosition="854">cal layer roughly corresponds to the surface syntax of the sentence; the annotation is a single-rooted dependency tree with labeled nodes. Attribute a/afun describes the type of dependency between a dependent node and its governor. The order of the nodes from left to right corresponds exactly to the surface order of tokens in the sentence (attribute a/ord). The tectogrammatical layer captures the linguistic meaning of the sentence in its context. Again, the annotation is a dependency tree with labeled nodes (Hajičová 1998). The correspondence of the nodes to the lower layers is often not 1:1 (Mírovský 2006). Attribute functor describes the dependency between a dependent node and its governor. A tectogrammatical lemma (attribute t_lemma) is assigned to every node. 16 grammatemes (prefixed gram) keep additional annotation (e.g. gram/verbmod for verbal modality). Topic and focus (Hajičová et al. 1998) are marked (attribute tfa), together with so-called deep word order reflected by the order of nodes in the annotation (attribute deepord). Coreference relations between nodes of certain category types are captured. Each node has a unique identifier (attribute id). Attributes coref_text.rf and coref_gr</context>
</contexts>
<marker>Mírovský, 2006</marker>
<rawString>Mírovský J. 2006. Netgraph: a Tool for Searching in Prague Dependency Treebank 2.0. In Proceedings of TLT 2006, Prague, pp. 211-222.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Rychlý</author>
</authors>
<title>Korpusové manažery a jejich efektivní implementace.</title>
<date>2000</date>
<tech>PhD. Thesis,</tech>
<location>Brno,</location>
<contexts>
<context position="6340" citStr="Rychlý 2000" startWordPosition="1012" endWordPosition="1013">oreference relations between nodes of certain category types are captured. Each node has a unique identifier (attribute id). Attributes coref_text.rf and coref_gram.rf contain ids of coreferential nodes of the respective types. 2 Phenomena and Requirements We make a list of linguistic phenomena that are annotated in PDT 2.0 and that determine the necessary features of a query language. Our work is focused on two structured layers of PDT 2.0 – the analytical layer and the tectogrammatical layer. For using the morphological layer exclusively and directly, a very good search tool Manatee/Bonito (Rychlý 2000) can be used. We intend to access the morphological information only from the higher layers, not directly. Since there is relation 1:1 among nodes on the analytical layer (but for the technical root) and tokens on the morphological layer, the morphological information can be easily merged into the analytical layer – the nodes only get additional attributes. The tectogrammatical layer is by far the most complex layer in PDT 2.0, therefore we start our analysis with a study of the annotation manual for the tectogrammatical layer (t-manual, Mikulová et al. 2006) and focus also on the requirements</context>
</contexts>
<marker>Rychlý, 2000</marker>
<rawString>Rychlý P. 2000. Korpusové manažery a jejich efektivní implementace. PhD. Thesis, Brno, 2000.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>