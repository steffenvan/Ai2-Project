<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000513">
<title confidence="0.864821">
Integrated Shallow and Deep Parsing: TopP meets HPSG
</title>
<author confidence="0.89527">
Anette Frank, Markus Beckert, Berthold Crysmann, Bernd Kiefer and Ulrich Sch¨afer
</author>
<affiliation confidence="0.588096">
DFKI GmbH School of Informaticst
66123 Saarbr¨ucken, Germany University of Edinburgh, UK
</affiliation>
<email confidence="0.994668">
firstname.lastname@dfki.de M.Becker@ed.ac.uk
</email>
<sectionHeader confidence="0.993775" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999483">
We present a novel, data-driven method
for integrated shallow and deep parsing.
Mediated by an XML-based multi-layer
annotation architecture, we interleave a
robust, but accurate stochastic topological
field parser of German with a constraint-
based HPSG parser. Our annotation-based
method for dovetailing shallow and deep
phrasal constraints is highly flexible, al-
lowing targeted and fine-grained guidance
of constraint-based parsing. We conduct
systematic experiments that demonstrate
substantial performance gains.1
</bodyText>
<sectionHeader confidence="0.998995" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999924578947368">
One of the strong points of deep processing (DNLP)
technology such as HPSG or LFG parsers certainly
lies with the high degree of precision as well as
detailed linguistic analysis these systems are able
to deliver. Although considerable progress has been
made in the area of processing speed, DNLP systems
still cannot rival shallow and medium depth tech-
nologies in terms of throughput and robustness. As
a net effect, the impact of deep parsing technology
on application-oriented NLP is still fairly limited.
With the advent of XML-based hybrid shallow-
deep architectures as presented in (Grover and Las-
carides, 2001; Crysmann et al., 2002; Uszkoreit,
2002) it has become possible to integrate the added
value of deep processing with the performance and
robustness of shallow processing. So far, integration
has largely focused on the lexical level, to improve
upon the most urgent needs in increasing the robust-
ness and coverage of deep parsing systems, namely
</bodyText>
<footnote confidence="0.946683">
1This work was in part supported by a BMBF grant to the
DFKI project WHITEBOARD (FKZ 01 IW 002).
</footnote>
<bodyText confidence="0.999930727272727">
lexical coverage. While integration in (Grover and
Lascarides, 2001) was still restricted to morphologi-
cal and PoS information, (Crysmann et al., 2002) ex-
tended shallow-deep integration at the lexical level
to lexico-semantic information, and named entity
expressions, including multiword expressions.
(Crysmann et al., 2002) assume a vertical,
‘pipeline’ scenario where shallow NLP tools provide
XML annotations that are used by the DNLP system
as a preprocessing and lexical interface. The per-
spective opened up by a multi-layered, data-centric
architecture is, however, much broader, in that it en-
courages horizontal cross-fertilisation effects among
complementary and/or competing components.
One of the culprits for the relative inefficiency of
DNLP parsers is the high degree of ambiguity found
in large-scale grammars, which can often only be re-
solved within a larger syntactic domain. Within a hy-
brid shallow-deep platform one can take advantage
of partial knowledge provided by shallow parsers to
pre-structure the search space of the deep parser. In
this paper, we will thus complement the efforts made
on the lexical side by integration at the phrasal level.
We will show that this may lead to considerable per-
formance increase for the DNLP component. More
specifically, we combine a probabilistic topological
field parser for German (Becker and Frank, 2002)
with the HPSG parser of (Callmeier, 2000). The
HPSG grammar used is the one originally developed
by (M¨uller and Kasper, 2000), with significant per-
formance enhancements by B. Crysmann.
In Section 2 we discuss the mapping problem
involved with syntactic integration of shallow and
deep analyses and motivate our choice to combine
the HPSG system with a topological parser. Sec-
tion 3 outlines our basic approach towards syntactic
shallow-deep integration. Section 4 introduces vari-
ous confidence measures, to be used for fine-tuning
of phrasal integration. Sections 5 and 6 report on
experiments and results of integrated shallow-deep
parsing, measuring the effect of various integra-
tion parameters on performance gains for the DNLP
component. Section 7 concludes and discusses pos-
sible extensions, to address robustness issues.
</bodyText>
<sectionHeader confidence="0.68383" genericHeader="method">
2 Integrated Shallow and Deep Processing
</sectionHeader>
<bodyText confidence="0.999980970588235">
The prime motivation for integrated shallow-deep
processing is to combine the robustness and effi-
ciency of shallow processing with the accuracy and
fine-grainedness of deep processing. Shallow analy-
ses could be used to pre-structure the search space of
a deep parser, enhancing its efficiency. Even if deep
analysis fails, shallow analysis could act as a guide
to select partial analyses from the deep parser’s chart
– enhancing the robustness of deep analysis, and the
informativeness of the combined system.
In this paper, we concentrate on the usage of shal-
low information to increase the efficiency, and po-
tentially the quality, of HPSG parsing. In particu-
lar, we want to use analyses delivered by an effi-
cient shallow parser to pre-structure the search space
of HPSG parsing, thereby enhancing its efficiency,
and guiding deep parsing towards a best-first analy-
sis suggested by shallow analysis constraints.
The search space of an HPSG chart parser can
be effectively constrained by external knowledge
sources if these deliver compatible partial subtrees,
which would then only need to be checked for com-
patibility with constituents derived in deep pars-
ing. Raw constituent span information can be used
to guide the parsing process by penalizing con-
stituents which are incompatible with the precom-
puted ‘shape’. Additional information about pro-
posed constituents, such as categorial or featural
constraints, provide further criteria for prioritis-
ing compatible, and penalising incompatible con-
stituents in the deep parser’s chart.
An obvious challenge for our approach is thus to
identify suitable shallow knowledge sources that can
deliver compatible constraints for HPSG parsing.
</bodyText>
<subsectionHeader confidence="0.994597">
2.1 The Shallow-Deep Mapping Problem
</subsectionHeader>
<bodyText confidence="0.9999617">
However, chunks delivered by state-of-the-art shal-
low parsers are not isomorphic to deep syntactic
analyses that explicitly encode phrasal embedding
structures. As a consequence, the boundaries of
deep grammar constituents in (1.a) cannot be pre-
determined on the basis of a shallow chunk analy-
sis (1.b). Moreover, the prevailing greedy bottom-up
processing strategies applied in chunk parsing do not
take into account the macro-structure of sentences.
They are thus easily trapped in cases such as (2).
</bodyText>
<listItem confidence="0.997635285714286">
(1) a. [CLThere was [NP a rumor [CL it was going
to be bought by [NP a French company [CL that
competes in supercomputers]]]]].
b. [CLThere was [NP a rumor]] [CL it was going
to be bought by [NP a French company]] [CL
that competes in supercomputers].
(2) Fred eats [NP pizza and Mary] drinks wine.
</listItem>
<bodyText confidence="0.996265">
In sum, state-of-the-art chunk parsing does nei-
ther provide sufficient detail, nor the required accu-
racy to act as a ‘guide’ for deep syntactic analysis.
</bodyText>
<subsectionHeader confidence="0.998935">
2.2 Stochastic Topological Parsing
</subsectionHeader>
<bodyText confidence="0.999843212121212">
Recently, there is revived interest in shallow anal-
yses that determine the clausal macro-structure of
sentences. The topological field model of (German)
syntax (H¨ohle, 1983) divides basic clauses into dis-
tinct fields – pre-, middle-, and post-fields – delim-
ited by verbal or sentential markers, which consti-
tute the left/right sentence brackets. This model of
clause structure is underspecified, or partial as to
non-sentential constituent structure, but provides a
theory-neutral model of sentence macro-structure.
Due to its linguistic underpinning, the topologi-
cal field model provides a pre-partitioning of com-
plex sentences that is (i) highly compatible with
deep syntactic analysis, and thus (ii) maximally ef-
fective to increase parsing efficiency if interleaved
with deep syntactic analysis; (iii) partiality regarding
the constituency of non-sentential material ensures
robustness, coverage, and processing efficiency.
(Becker and Frank, 2002) explored a corpus-
based stochastic approach to topological field pars-
ing, by training a non-lexicalised PCFG on a topo-
logical corpus derived from the NEGRA treebank of
German. Measured on the basis of hand-corrected
PoS-tagged input as provided by the NEGRA tree-
bank, the parser achieves 100% coverage for length
&lt; 40 (99.8% for all). Labelled precision and recall
are around 93%. Perfect match (full tree identity) is
about 80% (cf. Table 1, disamb +).
In this paper, the topological parser was provided
a tagger front-end for free text processing, using the
TnT tagger (Brants, 2000). The grammar was ported
to the efficient LoPar parser of (Schmid, 2000). Tag-
ging inaccuracies lead to a drop of 5.1/4.7 percent-
</bodyText>
<table confidence="0.958285888888889">
CL-V2
VF-TOPIC LK-VFIN MF RK-VPART NF
ART NN VAFIN ART ADJA NN VAPP CL-SUBCL
Der,1 Zehnkampf,2 hatte,3 eine,4 andere,5 Dimension,6 gehabt,7 ,
The decathlon would have a other dimension had LK-COMPL MF RK-VFIN
KOUS PPER PROAV VAPP VAFIN
wenn,9 er,10 dabei,11 gewesen,12 ware,13 .
&lt;TOPO2HPSG type=”root” id=”5608”&gt; if he there been had .
&lt;MAP CONSTR id=”T1” constr=”v2 cp” confent=”0.87” left=”W1” right=”W13”/&gt;
&lt;MAP CONSTR id=”T2” constr=”v2 vf” confent=”0.87” left=”W1” right=”W2”/&gt;
&lt;MAP CONSTR id=”T3” constr=”vfronted vfin+rk” confent=”0.87” left=”W3” right=”W3”/&gt;
&lt;MAP CONSTR id=”T6” constr=”vfronted rk-complex” confent=”0.87” left=”W7” right=”W7”/&gt;
&lt;MAP CONSTR id=”T4” constr=”vfronted vfin+vp+rk” confent=”0.87” left=”W3” right=”W13”/&gt;
&lt;MAP CONSTR id=”T5” constr=”vfronted vp+rk” confent=”0.87” left=”W4” right=”W13”/&gt;
&lt;MAP CONSTR id=”T10” constr=”extrapos rk+nf” confent=”0.87” left=”W7” right=”W13”/&gt;
&lt;MAP CONSTR id=”T7” constr=”vl cpfin compl” confent=”0.87” left=”W9” right=”W13”/&gt;
&lt;MAP CONSTR id=”T8” constr=”vl compl vp” confent=”0.87” left=”W10” right=”W13”/&gt;
&lt;MAP CONSTR id=”T9” constr=”vl rk fin+complex+finlast” confent=”0.87” left=”W12” right=”W13”/&gt;
</table>
<figure confidence="0.9102285">
&lt;/TOPO2HPSG&gt; S
gewesen waere
</figure>
<figureCaption confidence="0.997585">
Figure 1: Topological tree w/param. cat., TOPO2HPSG map-constraints, tree skeleton of HPSG analysis
</figureCaption>
<figure confidence="0.995450088235294">
NP-NOM-SG
S/NP-NOM-SG
Der
Zehnkampf
N’
V
haette
EPS/NP-NOM-SG
EPS
D
NP-ACC-SG
EPS
D
N’
er
PP
V
dabei
V
V-LE
EPS
CP-MOD
eine
AP-ATT
S
N’
V
C
andere
Dimension
gehabt
wenn
NP-NOM-SG
V
</figure>
<bodyText confidence="0.45816625">
dis- cove- perfect LP LR 0CB 2CB
amb rage match in % in % in % in %
+ 100.0 80.4 93.4 92.9 92.1 98.9
— 99.8 72.1 88.3 88.2 87.8 97.9
</bodyText>
<tableCaption confidence="0.951032">
Table 1: Disamb: correct (+) / tagger (—) PoS input.
Eval. on atomic (vs. parameterised) category labels.
</tableCaption>
<bodyText confidence="0.999496434782609">
age points in LP/LR, and 8.3 percentage points in
perfect match rate (Table 1, disamb —).
As seen in Figure 1, the topological trees abstract
away from non-sentential constituency – phrasal
fields MF (middle-field) and VF (pre-field) directly
expand to PoS tags. By contrast, they perfectly ren-
der the clausal skeleton and embedding structure of
complex sentences. In addition, parameterised cate-
gory labels encode larger syntactic contexts, or ‘con-
structions’, such as clause type (CL-V2, -SUBCL,
-REL), or inflectional patterns of verbal clusters (RK-
VFIN,-VPART). These properties, along with their
high accuracy rate, make them perfect candidates for
tight integration with deep syntactic analysis.
Moreover, due to the combination of scrambling
and discontinuous verb clusters in German syntax, a
deep parser is confronted with a high degree of local
ambiguity that can only be resolved at the clausal
level. Highly lexicalised frameworks such as HPSG,
however, do not lend themselves naturally to a top-
down parsing strategy. Using topological analyses to
guide the HPSG will thus provide external top-down
information for bottom-up parsing.
</bodyText>
<sectionHeader confidence="0.995511" genericHeader="method">
3 TopP meets HPSG
</sectionHeader>
<bodyText confidence="0.999974142857143">
Our work aims at integration of topological and
HPSG parsing in a data-centric architecture, where
each component acts independently2 – in contrast
to the combination of different syntactic formalisms
within a unified parsing process.3 Data-based inte-
gration not only favours modularity, but facilitates
flexible and targeted dovetailing of structures.
</bodyText>
<subsectionHeader confidence="0.99962">
3.1 Mapping Topological to HPSG Structures
</subsectionHeader>
<bodyText confidence="0.984908833333334">
While structurally similar, topological trees are not
fully isomorphic to HPSG structures. In Figure 1,
e.g., the span from the verb ‘hatte’ to the end of the
sentence forms a constituent in the HPSG analysis,
while in the topological tree the same span is domi-
nated by a sequence of categories: LK, MF, RK, NF.
Yet, due to its linguistic underpinning, the topo-
logical tree can be used to systematically predict
key constituents in the corresponding ‘target’ HPSG
2See Section 6 for comparison to recent work on integrated
chunk-based and dependency parsing in (Daum et al., 2003).
3As, for example, in (Duchier and Debusmann, 2001).
analysis. We know, for example, that the span from
the fronted verb (LK-VFIN) till the end of its clause
CL-V2 corresponds to an HPSG phrase. Also, the
first position that follows this verb, here the leftmost
daughter of MF, demarcates the left edge of the tra-
ditional VP. Spans of the vorfeld VF and clause cat-
egories CL exactly match HPSG constituents. Cate-
gory CL-V2 tells us that we need to reckon with a
fronted verb in position of its LK daughter, here 3,
while in CL-SUBCL we expect a complementiser in
the position of LK, and a finite verb within the right
verbal complex RK, which spans positions 12 to 13.
In order to communicate such structural con-
straints to the deep parser, we scan the topological
tree for relevant configurations, and extract the span
information for the target HPSG constituents. The
resulting ‘map constraints’ (Fig. 1) encode a bracket
type name4 that identifies the target constituent and
its left and right boundary, i.e. the concrete span in
the sentence under consideration. The span is en-
coded by the word position index in the input, which
is identical for the two parsing processes.5
In addition to pure constituency constraints, a
skilled grammar writer will be able to associate spe-
cific HPSG grammar constraints – positive or neg-
ative – with these bracket types. These additional
constraints will be globally defined, to permit fine-
grained guidance of the parsing process. This and
further information (cf. Section 4) is communicated
to the deep parser by way of an XML interface.
</bodyText>
<subsectionHeader confidence="0.985735">
3.2 Annotation-based Integration
</subsectionHeader>
<bodyText confidence="0.999917583333333">
In the annotation-based architecture of (Crysmann
et al., 2002), XML-encoded analysis results of all
components are stored in a multi-layer XML chart.
The architecture employed in this paper improves
on (Crysmann et al., 2002) by providing a central
Whiteboard Annotation Transformer (WHAT) that
supports flexible and powerful access to and trans-
formation of XML annotation based on standard
XSLT engines6 (see (Sch¨afer, 2003) for more de-
tails on WHAT). Shallow-deep integration is thus
fully annotation driven. Complex XSLT transforma-
tions are applied to the various analyses, in order to
</bodyText>
<footnote confidence="0.949702142857143">
4We currently extract 34 different bracket types.
5We currently assume identical tokenisation, but could ac-
commodate for distinct tokenisation regimes, using map tables.
6Advantages we see in the XSLT approach are (i) minimised
programming effort in the target implementation language for
XML access, (ii) reuse of transformation rules in multiple mod-
ules, (iii) fast integration of new XML-producing components.
</footnote>
<bodyText confidence="0.9995208">
extract or combine independent knowledge sources,
including XPath access to information stored in
shallow annotation, complex XSLT transformations
to the output of the topological parser, and extraction
of bracket constraints.
</bodyText>
<subsectionHeader confidence="0.999225">
3.3 Shaping the Deep Parser’s Search Space
</subsectionHeader>
<bodyText confidence="0.9994558">
The HPSG parser is an active bidirectional chart
parser which allows flexible parsing strategies by us-
ing an agenda for the parsing tasks.7 To compute pri-
orities for the tasks, several information sources can
be consulted, e.g. the estimated quality of the parti-
cipating edges or external resources like PoS tagger
results. Object-oriented implementation of the prior-
ity computation facilitates exchange and, moreover,
combination of different ranking strategies. Extend-
ing our current regime that uses PoS tagging for pri-
oritisation,8 we are now utilising phrasal constraints
(brackets) from topological analysis to enhance the
hand-crafted parsing heuristic employed so far.
Conditions for changing default priorities Ev-
ery bracket pair brx computed from the topological
analysis comes with a bracket type x that defines its
behaviour in the priority computation. Each bracket
type can be associated with a set of positive and neg-
ative constraints that state a set of permissible or for-
bidden rules and/or feature structure configurations
for the HPSG analysis.
The bracket types fall into three main categories:
left-, right-, and fully matching brackets. A right-
matching bracket may affect the priority of tasks
whose resulting edge will end at the right bracket
of a pair, like, for example, a task that would
combine edges C and F or C and D in Fig. 2.
Left-matching brackets work analogously. For fully
matching brackets, only tasks that produce an edge
that matches the span of the bracket pair can be af-
fected, like, e.g., a task that combines edges B and C
in Fig. 2. If, in addition, specified rule as well as fea-
ture structure constraints hold, the task is rewarded
if they are positive constraints, and penalised if they
are negative ones. All tasks that produce crossing
edges, i.e. where one endpoint lies strictly inside the
bracket pair and the other lies strictly outside, are
penalised, e.g., a task that combines edges A and B.
This behaviour can be implemented efficiently
when we assume that the computation of a task pri-
</bodyText>
<footnote confidence="0.726261666666667">
7A parsing task encodes the possible combination of a pas-
sive and an active chart edge.
8See e.g. (Prins and van Noord, 2001) for related work.
</footnote>
<figure confidence="0.9989845">
A
brx brx
F
C
B
D E
</figure>
<figureCaption confidence="0.9996615">
Figure 2: An example chart with a bracket pair of
type x. The dashed edges are active.
</figureCaption>
<bodyText confidence="0.777579888888889">
ority takes into account the priorities of the tasks it
builds upon. This guarantees that the effect of chang-
ing one task in the parsing process will propagate
to all depending tasks without having to check the
bracket conditions repeatedly.
For each task, it is sufficient to examine the start-
and endpoints of the building edges to determine if
its priority is affected by some bracket. Only four
cases can occur:
</bodyText>
<listItem confidence="0.969556666666667">
1. The new edge spans a pair of brackets: a match
2. The new edge starts or ends at one of the brack-
ets, but does not match: left or right hit
3. One bracket of a pair is at the joint of the build-
ing edges and a start- or endpoint lies strictly
inside the brackets: a crossing (edges A and B
in Fig. 2)
4. No bracket at the endpoints of both edges: use
the default priority
</listItem>
<bodyText confidence="0.999935214285714">
For left-/right-matching brackets, a match behaves
exactly like the corresponding left or right hit.
Computing the new priority If the priority of a
task is changed, the change is computed relative to
the default priority. We use two alternative confi-
dence values, and a hand-coded parameter y(x), to
adjust the impact on the default priority heuristics.
conf�,,t(brx) specifies the confidence for a concrete
bracket pair brx of type x in a given sentence, based
on the tree entropy of the topological parse. confpr
specifies a measure of ’expected accuracy’ for each
bracket type. Sec. 4 will introduce these measures.
The priority p(t) of a task t involving a bracket
brx is computed from the default priority p(t) by:
</bodyText>
<equation confidence="0.995186">
p(t) = p(t) * (1 ±conf,7,t(brx) * confpr(x) *y(x))
</equation>
<sectionHeader confidence="0.995673" genericHeader="method">
4 Confidence Measures
</sectionHeader>
<bodyText confidence="0.999928222222222">
This way of calculating priorities allows flexible pa-
rameterisation for the integration of bracket con-
straints. While the topological parser’s accuracy is
high, we need to reckon with (partially) wrong anal-
yses that could counter the expected performance
gains. An important factor is therefore the confi-
dence we can have, for any new sentence, into the
best parse delivered by the topological parser: If
confidence is high, we want it to be fully considered
for prioritisation – if it is low, we want to lower its
impact, or completely ignore the proposed brackets.
We will experiment with two alternative confi-
dence measures: (i) expected accuracy of particular
bracket types extracted from the best parse deliv-
ered, and (ii) tree entropy based on the probability
distribution encountered in a topological parse, as
a measure of the overall accuracy of the best parse
proposed – and thus the extracted brackets.9
</bodyText>
<subsectionHeader confidence="0.982158">
4.1 Confpr: Accuracy of map-constraints
</subsectionHeader>
<bodyText confidence="0.99998580952381">
To determine a measure of ‘expected accuracy’ for
the map constraints, we computed precision and re-
call for the 34 bracket types by comparing the ex-
tracted brackets from the suite of best delivered
topological parses against the brackets we extracted
from the trees in the manually annotated evalua-
tion corpus in (Becker and Frank, 2002). We obtain
88.3% precision, 87.8% recall for brackets extracted
from the best topological parse, run with TnT front
end. We chose precision of extracted bracket types
as a static confidence weight for prioritisation.
Precision figures are distributed as follows: 26.5%
of the bracket types have precision &gt; 90% (93.1%
in avg, 53.5% of bracket mass), 50% have pre-
cision &gt; 80% (88.9% avg, 77.7% bracket mass).
20.6% have precision &lt; 50% (41.26% in avg, 2.7%
bracket mass). For experiments using a threshold
on confpr(x) for bracket type x, we set a threshold
value of 0.7, which excludes 32.35% of the low-
confidence bracket types (and 22.1% bracket mass),
and includes chunk-based brackets (see Section 5).
</bodyText>
<subsectionHeader confidence="0.982792">
4.2 Conferit: Entropy of Parse Distribution
</subsectionHeader>
<bodyText confidence="0.999050777777778">
While precision over bracket types is a static mea-
sure that is independent from the structural complex-
ity of a particular sentence, tree entropy is defined as
the entropy over the probability distribution of the
set of parsed trees for a given sentence. It is a use-
ful measure to assess how certain the parser is about
the best analysis, e.g. to measure the training utility
value of a data point in the context of sample selec-
tion (Hwa, 2000). We thus employ tree entropy as a
</bodyText>
<tableCaption confidence="0.433903666666667">
9Further measures are conceivable: We could extract brack-
ets from some n-best topological parses, associating them with
weights, using methods similar to (Carroll and Briscoe, 2002).
</tableCaption>
<figure confidence="0.965129">
in %
in %
Normalized entropy
</figure>
<figureCaption confidence="0.995484">
Figure 3: Effect of different thresholds of normal-
ized entropy on precision, recall, and coverage
</figureCaption>
<bodyText confidence="0.9910058125">
confidence measure for the quality of the best topo-
logical parse, and the extracted bracket constraints.
We carry out an experiment to assess the effect
of varying entropy thresholds 0 on precision and re-
call of topological parsing, in terms of perfect match
rate, and show a way to determine an optimal value
for 0. We compute tree entropy over the full prob-
ability distribution, and normalise the values to be
distributed in a range between 0 and 1. The normali-
sation factor is empirically determined as the highest
entropy over all sentences of the training set.10
Experimental setup We randomly split the man-
ually corrected evaluation corpus of (Becker and
Frank, 2002) (for sentence length &lt; 40) into a train-
ing set of 600 sentences and a test set of 408 sen-
tences. This yields the following values for the train-
ing set (test set in brackets): initial perfect match
rate is 73.5% (70.0%), LP 88.8% (87.6%), and LR
88.5% (87.8%).11 Coverage is 99.8% for both.
Evaluation measures For the task of identifying
the perfect matches from a set of parses we give the
following standard definitions: precision is the pro-
portion of selected parses that have a perfect match
– thus being the perfect match rate, and recall is the
proportion of perfect matches that the system se-
lected. Coverage is usually defined as the proportion
of attempted analyses with at least one parse. We ex-
tend this definition to treat successful analyses with
a high tree entropy as being out of coverage. Fig. 3
shows the effect of decreasing entropy thresholds
0 on precision, recall and coverage. The unfiltered
set of all sentences is found at 0=1. Lowering 0 in-
</bodyText>
<footnote confidence="0.9070338">
10Possibly higher values in the test set will be clipped to 1.
11Evaluation figures for this experiment are given disregard-
ing parameterisation (and punctuation), corresponding to the
first row of figures in table 1.
Normalized entropy
</footnote>
<figureCaption confidence="0.9923865">
Figure 4: Maximise f-measure on the training set to
determine best entropy threshold
</figureCaption>
<bodyText confidence="0.999427411764706">
creases precision, and decreases recall and coverage.
We determine f-measure as composite measure of
precision and recall with equal weighting (a=0.5).
Results We use f-measure as a target function on
the training set to determine a plausible 0. F-measure
is maximal at 0=0.236 with 88.9%, see Figure 4.
Precision and recall are 83.7% and 94.8% resp.
while coverage goes down to 83.0%. Applying the
same 0 on the test set, we get the following results:
80.5% precision, 93.0% recall. Coverage goes down
to 80.6%. LP is 93.3%, LR is 91.2%.
Confidence Measure We distribute the comple-
ment of the associated tree entropy of a parse tree tr
as a global confidence measure over all brackets br
extracted from that parse: confe,,,t(br) = 1-ent(tr).
For the thresholded version of confe,,,t(br), we set
the threshold to 1 - 0 = 1 - 0:236 = 0:764.
</bodyText>
<sectionHeader confidence="0.99856" genericHeader="method">
5 Experiments
</sectionHeader>
<bodyText confidence="0.999716">
Experimental Setup In the experiments we use
the subset of the NEGRA corpus (5060 sents,
24.57%) that is currently parsed by the HPSG gram-
mar.12 Average sentence length is 8.94, ignoring
punctuation; average lexical ambiguity is 3.05 en-
tries/word. As baseline, we performed a run with-
out topological information, yet including PoS pri-
oritisation from tagging.13 A series of tests explores
the effects of alternative parameter settings. We fur-
ther test the impact of chunk information. To this
</bodyText>
<footnote confidence="0.988982833333333">
12This test set is different from the corpus used in Section 4.
13In a comparative run without PoS-priorisation, we estab-
lished a speed-up factor of 1.13 towards the baseline used in
our experiment, with a slight increase in coverage (1%). This
compares to a speed-up factor of 2.26 reported in (Daum et al.,
2003), by integration of PoS guidance into a dependency parser.
</footnote>
<figure confidence="0.97190892">
1 0.8 0.6 0.4 0.2 0
90
80
70
60
50
40
30
20
10
precision
recall
coverage
0.3 0.28 0.26 0.24 0.22 0.2 0.18 0.16
96
94
92
90
88
86
84
82
precision
recall
f-measure
</figure>
<bodyText confidence="0.999857369565218">
end, phrasal fields determined by topological pars-
ing were fed to the chunk parser of (Skut and Brants,
1998). Extracted NP and PP bracket constraints are
defined as left-matching bracket types, to compen-
sate for the non-embedding structure of chunks.
Chunk brackets are tested in conjunction with topo-
logical brackets, and in isolation, using the labelled
precision value of 71.1% in (Skut and Brants, 1998)
as a uniform confidence weight.14
Measures For all runs we measure the absolute
time and the number of parsing tasks needed to com-
pute the first reading. The times in the individual
runs were normalised according to the number of
executed tasks per second. We noticed that the cov-
erage of some integrated runs decreased by up to
1% of the 5060 test items, with a typical loss of
around 0.5%. To warrant that we are not just trading
coverage for speed, we derived two measures from
the primary data: an upper bound, where we asso-
ciated every unsuccessful parse with the time and
number of tasks used when the limit of 70000 pas-
sive edges was hit, and a lower bound, where we
removed the most expensive parses from each run,
until we reached the same coverage. Whereas the
upper bound is certainly more realistic in an applica-
tion context, the lower bound gives us a worst case
estimate of expectable speed-up.
Integration Parameters We explored the follow-
ing range of weighting parameters for prioritisation
(see Section 3.3 and Table 2).
We use two global settings for the heuristic pa-
rameter y. Setting y to 12 without using any confi-
dence measure causes the priority of every affected
parsing task to be in- or decreased by half its value.
Setting y to 1 drastically increases the influence of
topological information, the priority for rewarded
tasks is doubled and set to zero for penalized ones.
The first two runs (rows with —P —E) ignore
both confidence parameters (confpr=ent=1), measur-
ing only the effect of higher or lower influence of
topological information. In the remaining six runs,
the impact of the confidence measures confpr=ent is
tested individually, namely +P —E and —P +E, by
setting the resp. alternative value to 1. For two runs,
we set the resp. confidence values that drop below
a certain threshold to zero (PT, ET) to exclude un-
</bodyText>
<footnote confidence="0.807867">
14The experiments were run on a 700 MHz Pentium III ma-
chine. For all runs, the maximum number of passive edges was
set to the comparatively high value of 70000.
</footnote>
<table confidence="0.9998190625">
factor up-b msec (1st) tasks up-b
low-b low-b up-b low-b
Baseline — — 524 675 3813 4749
Integration of topological brackets w/ parameters
—P —E (y12 2.21 2.17 237 310 1851 2353
—P —E y1 2.04 2.10 257 320 2037 2377
+P —E -y1 2 2.15 2.21 243 306 1877 2288
PT —E -y1 2 2.20 2.30 238 294 1890 2268
—P +E y12 2.27 2.23 230 302 1811 2330
—P ET y 12 2.10 2.00 250 337 1896 2503
+P —E y1 2.06 2.12 255 318 2021 2360
PT —E y1 2.08 2.10 252 321 1941 2346
PT with chunk and topological brackets
PT —E -y1 2 2.13 2.16 246 312 1929 2379
PT with chunk brackets only
PT —E -y1 2 0.89 1.10 589 611 4102 4234
</table>
<tableCaption confidence="0.999781">
Table 2: Priority weight parameters and results
</tableCaption>
<bodyText confidence="0.999429">
certain candidate brackets or bracket types. For runs
including chunk bracketing constraints, we chose
thresholded precision (PT) as confidence weights
for topological and/or chunk brackets.
</bodyText>
<sectionHeader confidence="0.993537" genericHeader="method">
6 Discussion of Results
</sectionHeader>
<bodyText confidence="0.999924391304348">
Table 2 summarises the results. A high impact on
bracket constraints (y1) results in lower perfor-
mance gains than using a moderate impact (-y1�)
(rows 2,4,5 vs. 3,8,9). A possible interpretation is
that for high y, wrong topological constraints and
strong negative priorities can mislead the parser.
Use of confidence weights yields the best per-
formance gains (with -y1�), in particular, thresholded
precision of bracket types PT, and tree entropy
+E, with comparable speed-up of factor 2.2/2.3 and
2.27/2.23 (2.25 if averaged). Thresholded entropy
ET yields slightly lower gains. This could be due to
a non-optimal threshold, or the fact that – while pre-
cision differentiates bracket types in terms of their
confidence, such that only a small number of brack-
ets are weakened – tree entropy as a global measure
penalizes all brackets for a sentence on an equal ba-
sis, neutralizing positive effects which – as seen in
+/—P – may still contribute useful information.
Additional use of chunk brackets (row 10) leads
to a slight decrease, probably due to lower preci-
sion of chunk brackets. Even more, isolated use of
chunk information (row 11) does not yield signifi-
</bodyText>
<figureCaption confidence="0.85455">
Figure 5: Performance gain/loss per sentence length
</figureCaption>
<bodyText confidence="0.999486285714286">
cant gains over the baseline (0.89/1.1). Similar re-
sults were reported in (Daum et al., 2003) for inte-
gration of chunk- and dependency parsing.15
For PT -E (yz, Figure 5 shows substantial per-
formance gains, with some outliers in the range of
length 25–36. 962 sentences (length A, avg. 11.09)
took longer parse time as compared to the baseline
(with 5% variance margin). For coverage losses, we
isolated two factors: while erroneous topological in-
formation could lead the parser astray, we also found
cases where topological information prevented spu-
rious HPSG parses to surface. This suggests that
the integrated system bears the potential of cross-
validation of different components.
</bodyText>
<sectionHeader confidence="0.998992" genericHeader="conclusions">
7 Conclusion
</sectionHeader>
<bodyText confidence="0.98800175">
We demonstrated that integration of shallow topo-
logical and deep HPSG processing results in signif-
icant performance gains, of factor 2.25—at a high
level of deep parser efficiency. We show that macro-
structural constraints derived from topological pars-
ing improve significantly over chunk-based con-
straints. Fine-grained prioritisation in terms of con-
fidence weights could further improve the results.
Our annotation-based architecture is now easily
extended to address robustness issues beyond lexical
matters. By extracting spans for clausal fragments
from topological parses, in case of deep parsing fail-
</bodyText>
<footnote confidence="0.862656666666667">
15(Daum et al., 2003) report a gain of factor 2.76 relative to a
non-PoS-guided baseline, which reduces to factor 1.21 relative
to a PoS-prioritised baseline, as in our scenario.
</footnote>
<bodyText confidence="0.999929">
ure the chart can be inspected for spanning anal-
yses for sub-sentential fragments. Further, we can
simplify the input sentence, by pruning adjunct sub-
clauses, and trigger reparsing on the pruned input.
</bodyText>
<sectionHeader confidence="0.996464" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999929469387755">
M. Becker and A. Frank. 2002. A Stochastic Topological
Parser of German. In Proceedings of COLING 2002,
pages 71–77, Taipei, Taiwan.
T. Brants. 2000. Tnt - A Statistical Part-of-Speech Tag-
ger. In Proceedings ofEurospeech, Rhodes, Greece.
U. Callmeier. 2000. PET — A platform for experimenta-
tion with efficient HPSG processing techniques. Nat-
ural Language Engineering, 6 (1):99 – 108.
C. Carroll and E. Briscoe. 2002. High precision extrac-
tion of grammatical relations. In Proceedings of COL-
ING 2002, pages 134–140.
B. Crysmann, A. Frank, B. Kiefer, St. M¨uller, J. Pisko-
rski, U. Sch¨afer, M. Siegel, H. Uszkoreit, F. Xu,
M. Becker, and H.-U. Krieger. 2002. An Integrated
Architecture for Deep and Shallow Processing. In
Proceedings ofACL 2002, Pittsburgh.
M. Daum, K.A. Foth, and W. Menzel. 2003. Constraint
Based Integration of Deep and Shallow Parsing Tech-
niques. In Proceedings of EACL 2003, Budapest.
D. Duchier and R. Debusmann. 2001. Topological De-
pendency Trees: A Constraint-based Account of Lin-
ear Precedence. In Proceedings ofACL 2001.
C. Grover and A. Lascarides. 2001. XML-based data
preparation for robust deep parsing. In Proceedings of
ACL/EACL 2001, pages 252–259, Toulouse, France.
T. H¨ohle. 1983. Topologische Felder. Unpublished
manuscript, University of Cologne.
R. Hwa. 2000. Sample selection for statistical gram-
mar induction. In Proceedings of EMNLP/VLC-2000,
pages 45–52, Hong Kong.
S. M¨uller and W. Kasper. 2000. HPSG analysis of
German. In W. Wahlster, editor, Verbmobil: Founda-
tions of Speech-to-Speech Translation, Artificial Intel-
ligence, pages 238–253. Springer, Berlin.
R. Prins and G. van Noord. 2001. Unsupervised pos-
tagging improves parsing accuracy and parsing effi-
ciency. In Proceedings ofIWPT, Beijing.
U. Sch¨afer. 2003. WHAT: An XSLT-based Infrastruc-
ture for the Integration of Natural Language Process-
ing Components. In Proceedings of the SEALTS Work-
shop, HLT-NAACL03, Edmonton, Canada.
H. Schmid, 2000. LoPar: Design and Implementation.
IMS, Stuttgart. Arbeitspapiere des SFB 340, Nr. 149.
W. Skut and T. Brants. 1998. Chunk tagger: statistical
recognition of noun phrases. In ESSLLI-1998 Work-
shop on Automated Acquisition of Syntax and Parsing.
H. Uszkoreit. 2002. New Chances for Deep Linguistic
Processing. In Proceedings of COLING 2002, pages
xiv–xxvii, Taipei, Taiwan.
</reference>
<figure confidence="0.998027818181818">
msec
baseline
+PT γ(0.5)
12867 12520 11620
9290
0 5 10 15 20 25 30 35
#sentences
7000
6000
5000
4000
3000
2000
1000
0
0
100
200
300
400
500
600
</figure>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.699546">
<title confidence="0.994939">Integrated Shallow and Deep Parsing: TopP meets HPSG</title>
<author confidence="0.99959">Markus Berthold Crysmann Frank</author>
<author confidence="0.99959">Bernd Kiefer</author>
<author confidence="0.99959">Ulrich Sch¨afer</author>
<affiliation confidence="0.914488">GmbH School of</affiliation>
<address confidence="0.998843">66123 Saarbr¨ucken, Germany University of Edinburgh, UK</address>
<email confidence="0.988145">firstname.lastname@dfki.deM.Becker@ed.ac.uk</email>
<abstract confidence="0.999858384615385">We present a novel, data-driven method for integrated shallow and deep parsing. Mediated by an XML-based multi-layer annotation architecture, we interleave a robust, but accurate stochastic topological field parser of German with a constraintbased HPSG parser. Our annotation-based method for dovetailing shallow and deep phrasal constraints is highly flexible, allowing targeted and fine-grained guidance of constraint-based parsing. We conduct systematic experiments that demonstrate</abstract>
<intro confidence="0.780025">performance</intro>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>M Becker</author>
<author>A Frank</author>
</authors>
<title>A Stochastic Topological Parser of German.</title>
<date>2002</date>
<booktitle>In Proceedings of COLING 2002,</booktitle>
<pages>71--77</pages>
<location>Taipei, Taiwan.</location>
<contexts>
<context position="3238" citStr="Becker and Frank, 2002" startWordPosition="479" endWordPosition="482"> of DNLP parsers is the high degree of ambiguity found in large-scale grammars, which can often only be resolved within a larger syntactic domain. Within a hybrid shallow-deep platform one can take advantage of partial knowledge provided by shallow parsers to pre-structure the search space of the deep parser. In this paper, we will thus complement the efforts made on the lexical side by integration at the phrasal level. We will show that this may lead to considerable performance increase for the DNLP component. More specifically, we combine a probabilistic topological field parser for German (Becker and Frank, 2002) with the HPSG parser of (Callmeier, 2000). The HPSG grammar used is the one originally developed by (M¨uller and Kasper, 2000), with significant performance enhancements by B. Crysmann. In Section 2 we discuss the mapping problem involved with syntactic integration of shallow and deep analyses and motivate our choice to combine the HPSG system with a topological parser. Section 3 outlines our basic approach towards syntactic shallow-deep integration. Section 4 introduces various confidence measures, to be used for fine-tuning of phrasal integration. Sections 5 and 6 report on experiments and </context>
<context position="7775" citStr="Becker and Frank, 2002" startWordPosition="1169" endWordPosition="1172">entence brackets. This model of clause structure is underspecified, or partial as to non-sentential constituent structure, but provides a theory-neutral model of sentence macro-structure. Due to its linguistic underpinning, the topological field model provides a pre-partitioning of complex sentences that is (i) highly compatible with deep syntactic analysis, and thus (ii) maximally effective to increase parsing efficiency if interleaved with deep syntactic analysis; (iii) partiality regarding the constituency of non-sentential material ensures robustness, coverage, and processing efficiency. (Becker and Frank, 2002) explored a corpusbased stochastic approach to topological field parsing, by training a non-lexicalised PCFG on a topological corpus derived from the NEGRA treebank of German. Measured on the basis of hand-corrected PoS-tagged input as provided by the NEGRA treebank, the parser achieves 100% coverage for length &lt; 40 (99.8% for all). Labelled precision and recall are around 93%. Perfect match (full tree identity) is about 80% (cf. Table 1, disamb +). In this paper, the topological parser was provided a tagger front-end for free text processing, using the TnT tagger (Brants, 2000). The grammar w</context>
<context position="20401" citStr="Becker and Frank, 2002" startWordPosition="3180" endWordPosition="3183">et types extracted from the best parse delivered, and (ii) tree entropy based on the probability distribution encountered in a topological parse, as a measure of the overall accuracy of the best parse proposed – and thus the extracted brackets.9 4.1 Confpr: Accuracy of map-constraints To determine a measure of ‘expected accuracy’ for the map constraints, we computed precision and recall for the 34 bracket types by comparing the extracted brackets from the suite of best delivered topological parses against the brackets we extracted from the trees in the manually annotated evaluation corpus in (Becker and Frank, 2002). We obtain 88.3% precision, 87.8% recall for brackets extracted from the best topological parse, run with TnT front end. We chose precision of extracted bracket types as a static confidence weight for prioritisation. Precision figures are distributed as follows: 26.5% of the bracket types have precision &gt; 90% (93.1% in avg, 53.5% of bracket mass), 50% have precision &gt; 80% (88.9% avg, 77.7% bracket mass). 20.6% have precision &lt; 50% (41.26% in avg, 2.7% bracket mass). For experiments using a threshold on confpr(x) for bracket type x, we set a threshold value of 0.7, which excludes 32.35% of the</context>
<context position="22612" citStr="Becker and Frank, 2002" startWordPosition="3548" endWordPosition="3551">ological parse, and the extracted bracket constraints. We carry out an experiment to assess the effect of varying entropy thresholds 0 on precision and recall of topological parsing, in terms of perfect match rate, and show a way to determine an optimal value for 0. We compute tree entropy over the full probability distribution, and normalise the values to be distributed in a range between 0 and 1. The normalisation factor is empirically determined as the highest entropy over all sentences of the training set.10 Experimental setup We randomly split the manually corrected evaluation corpus of (Becker and Frank, 2002) (for sentence length &lt; 40) into a training set of 600 sentences and a test set of 408 sentences. This yields the following values for the training set (test set in brackets): initial perfect match rate is 73.5% (70.0%), LP 88.8% (87.6%), and LR 88.5% (87.8%).11 Coverage is 99.8% for both. Evaluation measures For the task of identifying the perfect matches from a set of parses we give the following standard definitions: precision is the proportion of selected parses that have a perfect match – thus being the perfect match rate, and recall is the proportion of perfect matches that the system se</context>
</contexts>
<marker>Becker, Frank, 2002</marker>
<rawString>M. Becker and A. Frank. 2002. A Stochastic Topological Parser of German. In Proceedings of COLING 2002, pages 71–77, Taipei, Taiwan.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Brants</author>
</authors>
<title>Tnt - A Statistical Part-of-Speech Tagger.</title>
<date>2000</date>
<booktitle>In Proceedings ofEurospeech, Rhodes,</booktitle>
<contexts>
<context position="8360" citStr="Brants, 2000" startWordPosition="1267" endWordPosition="1268">cy. (Becker and Frank, 2002) explored a corpusbased stochastic approach to topological field parsing, by training a non-lexicalised PCFG on a topological corpus derived from the NEGRA treebank of German. Measured on the basis of hand-corrected PoS-tagged input as provided by the NEGRA treebank, the parser achieves 100% coverage for length &lt; 40 (99.8% for all). Labelled precision and recall are around 93%. Perfect match (full tree identity) is about 80% (cf. Table 1, disamb +). In this paper, the topological parser was provided a tagger front-end for free text processing, using the TnT tagger (Brants, 2000). The grammar was ported to the efficient LoPar parser of (Schmid, 2000). Tagging inaccuracies lead to a drop of 5.1/4.7 percentCL-V2 VF-TOPIC LK-VFIN MF RK-VPART NF ART NN VAFIN ART ADJA NN VAPP CL-SUBCL Der,1 Zehnkampf,2 hatte,3 eine,4 andere,5 Dimension,6 gehabt,7 , The decathlon would have a other dimension had LK-COMPL MF RK-VFIN KOUS PPER PROAV VAPP VAFIN wenn,9 er,10 dabei,11 gewesen,12 ware,13 . &lt;TOPO2HPSG type=”root” id=”5608”&gt; if he there been had . &lt;MAP CONSTR id=”T1” constr=”v2 cp” confent=”0.87” left=”W1” right=”W13”/&gt; &lt;MAP CONSTR id=”T2” constr=”v2 vf” confent=”0.87” left=”W1” ri</context>
</contexts>
<marker>Brants, 2000</marker>
<rawString>T. Brants. 2000. Tnt - A Statistical Part-of-Speech Tagger. In Proceedings ofEurospeech, Rhodes, Greece.</rawString>
</citation>
<citation valid="true">
<authors>
<author>U Callmeier</author>
</authors>
<title>PET — A platform for experimentation with efficient HPSG processing techniques.</title>
<date>2000</date>
<journal>Natural Language Engineering,</journal>
<volume>6</volume>
<pages>1--99</pages>
<contexts>
<context position="3280" citStr="Callmeier, 2000" startWordPosition="488" endWordPosition="489">found in large-scale grammars, which can often only be resolved within a larger syntactic domain. Within a hybrid shallow-deep platform one can take advantage of partial knowledge provided by shallow parsers to pre-structure the search space of the deep parser. In this paper, we will thus complement the efforts made on the lexical side by integration at the phrasal level. We will show that this may lead to considerable performance increase for the DNLP component. More specifically, we combine a probabilistic topological field parser for German (Becker and Frank, 2002) with the HPSG parser of (Callmeier, 2000). The HPSG grammar used is the one originally developed by (M¨uller and Kasper, 2000), with significant performance enhancements by B. Crysmann. In Section 2 we discuss the mapping problem involved with syntactic integration of shallow and deep analyses and motivate our choice to combine the HPSG system with a topological parser. Section 3 outlines our basic approach towards syntactic shallow-deep integration. Section 4 introduces various confidence measures, to be used for fine-tuning of phrasal integration. Sections 5 and 6 report on experiments and results of integrated shallow-deep parsing</context>
</contexts>
<marker>Callmeier, 2000</marker>
<rawString>U. Callmeier. 2000. PET — A platform for experimentation with efficient HPSG processing techniques. Natural Language Engineering, 6 (1):99 – 108.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C Carroll</author>
<author>E Briscoe</author>
</authors>
<title>High precision extraction of grammatical relations.</title>
<date>2002</date>
<booktitle>In Proceedings of COLING</booktitle>
<pages>134--140</pages>
<contexts>
<context position="21810" citStr="Carroll and Briscoe, 2002" startWordPosition="3414" endWordPosition="3417">s is a static measure that is independent from the structural complexity of a particular sentence, tree entropy is defined as the entropy over the probability distribution of the set of parsed trees for a given sentence. It is a useful measure to assess how certain the parser is about the best analysis, e.g. to measure the training utility value of a data point in the context of sample selection (Hwa, 2000). We thus employ tree entropy as a 9Further measures are conceivable: We could extract brackets from some n-best topological parses, associating them with weights, using methods similar to (Carroll and Briscoe, 2002). in % in % Normalized entropy Figure 3: Effect of different thresholds of normalized entropy on precision, recall, and coverage confidence measure for the quality of the best topological parse, and the extracted bracket constraints. We carry out an experiment to assess the effect of varying entropy thresholds 0 on precision and recall of topological parsing, in terms of perfect match rate, and show a way to determine an optimal value for 0. We compute tree entropy over the full probability distribution, and normalise the values to be distributed in a range between 0 and 1. The normalisation f</context>
</contexts>
<marker>Carroll, Briscoe, 2002</marker>
<rawString>C. Carroll and E. Briscoe. 2002. High precision extraction of grammatical relations. In Proceedings of COLING 2002, pages 134–140.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Piskorski M¨uller</author>
<author>U Sch¨afer</author>
<author>M Siegel</author>
<author>H Uszkoreit</author>
<author>F Xu</author>
<author>M Becker</author>
<author>H-U Krieger</author>
</authors>
<title>An Integrated Architecture for Deep and Shallow Processing.</title>
<date>2002</date>
<booktitle>In Proceedings ofACL 2002,</booktitle>
<location>Pittsburgh.</location>
<marker>M¨uller, Sch¨afer, Siegel, Uszkoreit, Xu, Becker, Krieger, 2002</marker>
<rawString>B. Crysmann, A. Frank, B. Kiefer, St. M¨uller, J. Piskorski, U. Sch¨afer, M. Siegel, H. Uszkoreit, F. Xu, M. Becker, and H.-U. Krieger. 2002. An Integrated Architecture for Deep and Shallow Processing. In Proceedings ofACL 2002, Pittsburgh.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Daum</author>
<author>K A Foth</author>
<author>W Menzel</author>
</authors>
<title>Constraint Based Integration of Deep and Shallow Parsing Techniques.</title>
<date>2003</date>
<booktitle>In Proceedings of EACL 2003,</booktitle>
<location>Budapest.</location>
<contexts>
<context position="12345" citStr="Daum et al., 2003" startWordPosition="1852" endWordPosition="1855">apping Topological to HPSG Structures While structurally similar, topological trees are not fully isomorphic to HPSG structures. In Figure 1, e.g., the span from the verb ‘hatte’ to the end of the sentence forms a constituent in the HPSG analysis, while in the topological tree the same span is dominated by a sequence of categories: LK, MF, RK, NF. Yet, due to its linguistic underpinning, the topological tree can be used to systematically predict key constituents in the corresponding ‘target’ HPSG 2See Section 6 for comparison to recent work on integrated chunk-based and dependency parsing in (Daum et al., 2003). 3As, for example, in (Duchier and Debusmann, 2001). analysis. We know, for example, that the span from the fronted verb (LK-VFIN) till the end of its clause CL-V2 corresponds to an HPSG phrase. Also, the first position that follows this verb, here the leftmost daughter of MF, demarcates the left edge of the traditional VP. Spans of the vorfeld VF and clause categories CL exactly match HPSG constituents. Category CL-V2 tells us that we need to reckon with a fronted verb in position of its LK daughter, here 3, while in CL-SUBCL we expect a complementiser in the position of LK, and a finite ver</context>
<context position="25561" citStr="Daum et al., 2003" startWordPosition="4044" endWordPosition="4047">nctuation; average lexical ambiguity is 3.05 entries/word. As baseline, we performed a run without topological information, yet including PoS prioritisation from tagging.13 A series of tests explores the effects of alternative parameter settings. We further test the impact of chunk information. To this 12This test set is different from the corpus used in Section 4. 13In a comparative run without PoS-priorisation, we established a speed-up factor of 1.13 towards the baseline used in our experiment, with a slight increase in coverage (1%). This compares to a speed-up factor of 2.26 reported in (Daum et al., 2003), by integration of PoS guidance into a dependency parser. 1 0.8 0.6 0.4 0.2 0 90 80 70 60 50 40 30 20 10 precision recall coverage 0.3 0.28 0.26 0.24 0.22 0.2 0.18 0.16 96 94 92 90 88 86 84 82 precision recall f-measure end, phrasal fields determined by topological parsing were fed to the chunk parser of (Skut and Brants, 1998). Extracted NP and PP bracket constraints are defined as left-matching bracket types, to compensate for the non-embedding structure of chunks. Chunk brackets are tested in conjunction with topological brackets, and in isolation, using the labelled precision value of 71.</context>
<context position="30368" citStr="Daum et al., 2003" startWordPosition="4886" endWordPosition="4889">s in terms of their confidence, such that only a small number of brackets are weakened – tree entropy as a global measure penalizes all brackets for a sentence on an equal basis, neutralizing positive effects which – as seen in +/—P – may still contribute useful information. Additional use of chunk brackets (row 10) leads to a slight decrease, probably due to lower precision of chunk brackets. Even more, isolated use of chunk information (row 11) does not yield signifiFigure 5: Performance gain/loss per sentence length cant gains over the baseline (0.89/1.1). Similar results were reported in (Daum et al., 2003) for integration of chunk- and dependency parsing.15 For PT -E (yz, Figure 5 shows substantial performance gains, with some outliers in the range of length 25–36. 962 sentences (length A, avg. 11.09) took longer parse time as compared to the baseline (with 5% variance margin). For coverage losses, we isolated two factors: while erroneous topological information could lead the parser astray, we also found cases where topological information prevented spurious HPSG parses to surface. This suggests that the integrated system bears the potential of crossvalidation of different components. 7 Conclu</context>
</contexts>
<marker>Daum, Foth, Menzel, 2003</marker>
<rawString>M. Daum, K.A. Foth, and W. Menzel. 2003. Constraint Based Integration of Deep and Shallow Parsing Techniques. In Proceedings of EACL 2003, Budapest.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Duchier</author>
<author>R Debusmann</author>
</authors>
<title>Topological Dependency Trees: A Constraint-based Account of Linear Precedence.</title>
<date>2001</date>
<booktitle>In Proceedings ofACL</booktitle>
<contexts>
<context position="12397" citStr="Duchier and Debusmann, 2001" startWordPosition="1860" endWordPosition="1863">e structurally similar, topological trees are not fully isomorphic to HPSG structures. In Figure 1, e.g., the span from the verb ‘hatte’ to the end of the sentence forms a constituent in the HPSG analysis, while in the topological tree the same span is dominated by a sequence of categories: LK, MF, RK, NF. Yet, due to its linguistic underpinning, the topological tree can be used to systematically predict key constituents in the corresponding ‘target’ HPSG 2See Section 6 for comparison to recent work on integrated chunk-based and dependency parsing in (Daum et al., 2003). 3As, for example, in (Duchier and Debusmann, 2001). analysis. We know, for example, that the span from the fronted verb (LK-VFIN) till the end of its clause CL-V2 corresponds to an HPSG phrase. Also, the first position that follows this verb, here the leftmost daughter of MF, demarcates the left edge of the traditional VP. Spans of the vorfeld VF and clause categories CL exactly match HPSG constituents. Category CL-V2 tells us that we need to reckon with a fronted verb in position of its LK daughter, here 3, while in CL-SUBCL we expect a complementiser in the position of LK, and a finite verb within the right verbal complex RK, which spans po</context>
</contexts>
<marker>Duchier, Debusmann, 2001</marker>
<rawString>D. Duchier and R. Debusmann. 2001. Topological Dependency Trees: A Constraint-based Account of Linear Precedence. In Proceedings ofACL 2001.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C Grover</author>
<author>A Lascarides</author>
</authors>
<title>XML-based data preparation for robust deep parsing.</title>
<date>2001</date>
<booktitle>In Proceedings of ACL/EACL</booktitle>
<pages>252--259</pages>
<location>Toulouse, France.</location>
<contexts>
<context position="1426" citStr="Grover and Lascarides, 2001" startWordPosition="198" endWordPosition="202">ntroduction One of the strong points of deep processing (DNLP) technology such as HPSG or LFG parsers certainly lies with the high degree of precision as well as detailed linguistic analysis these systems are able to deliver. Although considerable progress has been made in the area of processing speed, DNLP systems still cannot rival shallow and medium depth technologies in terms of throughput and robustness. As a net effect, the impact of deep parsing technology on application-oriented NLP is still fairly limited. With the advent of XML-based hybrid shallowdeep architectures as presented in (Grover and Lascarides, 2001; Crysmann et al., 2002; Uszkoreit, 2002) it has become possible to integrate the added value of deep processing with the performance and robustness of shallow processing. So far, integration has largely focused on the lexical level, to improve upon the most urgent needs in increasing the robustness and coverage of deep parsing systems, namely 1This work was in part supported by a BMBF grant to the DFKI project WHITEBOARD (FKZ 01 IW 002). lexical coverage. While integration in (Grover and Lascarides, 2001) was still restricted to morphological and PoS information, (Crysmann et al., 2002) exten</context>
</contexts>
<marker>Grover, Lascarides, 2001</marker>
<rawString>C. Grover and A. Lascarides. 2001. XML-based data preparation for robust deep parsing. In Proceedings of ACL/EACL 2001, pages 252–259, Toulouse, France.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T H¨ohle</author>
</authors>
<title>Topologische Felder. Unpublished manuscript,</title>
<date>1983</date>
<institution>University of Cologne.</institution>
<marker>H¨ohle, 1983</marker>
<rawString>T. H¨ohle. 1983. Topologische Felder. Unpublished manuscript, University of Cologne.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Hwa</author>
</authors>
<title>Sample selection for statistical grammar induction.</title>
<date>2000</date>
<booktitle>In Proceedings of EMNLP/VLC-2000,</booktitle>
<pages>45--52</pages>
<location>Hong Kong.</location>
<contexts>
<context position="21594" citStr="Hwa, 2000" startWordPosition="3383" endWordPosition="3384">des 32.35% of the lowconfidence bracket types (and 22.1% bracket mass), and includes chunk-based brackets (see Section 5). 4.2 Conferit: Entropy of Parse Distribution While precision over bracket types is a static measure that is independent from the structural complexity of a particular sentence, tree entropy is defined as the entropy over the probability distribution of the set of parsed trees for a given sentence. It is a useful measure to assess how certain the parser is about the best analysis, e.g. to measure the training utility value of a data point in the context of sample selection (Hwa, 2000). We thus employ tree entropy as a 9Further measures are conceivable: We could extract brackets from some n-best topological parses, associating them with weights, using methods similar to (Carroll and Briscoe, 2002). in % in % Normalized entropy Figure 3: Effect of different thresholds of normalized entropy on precision, recall, and coverage confidence measure for the quality of the best topological parse, and the extracted bracket constraints. We carry out an experiment to assess the effect of varying entropy thresholds 0 on precision and recall of topological parsing, in terms of perfect ma</context>
</contexts>
<marker>Hwa, 2000</marker>
<rawString>R. Hwa. 2000. Sample selection for statistical grammar induction. In Proceedings of EMNLP/VLC-2000, pages 45–52, Hong Kong.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S M¨uller</author>
<author>W Kasper</author>
</authors>
<title>HPSG analysis of German.</title>
<date>2000</date>
<booktitle>Verbmobil: Foundations of Speech-to-Speech Translation, Artificial Intelligence,</booktitle>
<pages>238--253</pages>
<editor>In W. Wahlster, editor,</editor>
<publisher>Springer,</publisher>
<location>Berlin.</location>
<marker>M¨uller, Kasper, 2000</marker>
<rawString>S. M¨uller and W. Kasper. 2000. HPSG analysis of German. In W. Wahlster, editor, Verbmobil: Foundations of Speech-to-Speech Translation, Artificial Intelligence, pages 238–253. Springer, Berlin.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Prins</author>
<author>G van Noord</author>
</authors>
<title>Unsupervised postagging improves parsing accuracy and parsing efficiency.</title>
<date>2001</date>
<booktitle>In Proceedings ofIWPT,</booktitle>
<location>Beijing.</location>
<marker>Prins, van Noord, 2001</marker>
<rawString>R. Prins and G. van Noord. 2001. Unsupervised postagging improves parsing accuracy and parsing efficiency. In Proceedings ofIWPT, Beijing.</rawString>
</citation>
<citation valid="true">
<authors>
<author>U Sch¨afer</author>
</authors>
<title>WHAT: An XSLT-based Infrastructure for the Integration of Natural Language Processing Components.</title>
<date>2003</date>
<booktitle>In Proceedings of the SEALTS Workshop, HLT-NAACL03,</booktitle>
<location>Edmonton, Canada.</location>
<marker>Sch¨afer, 2003</marker>
<rawString>U. Sch¨afer. 2003. WHAT: An XSLT-based Infrastructure for the Integration of Natural Language Processing Components. In Proceedings of the SEALTS Workshop, HLT-NAACL03, Edmonton, Canada.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Schmid</author>
</authors>
<date>2000</date>
<booktitle>LoPar: Design and Implementation. IMS, Stuttgart. Arbeitspapiere des SFB 340, Nr. 149.</booktitle>
<contexts>
<context position="8432" citStr="Schmid, 2000" startWordPosition="1279" endWordPosition="1280">to topological field parsing, by training a non-lexicalised PCFG on a topological corpus derived from the NEGRA treebank of German. Measured on the basis of hand-corrected PoS-tagged input as provided by the NEGRA treebank, the parser achieves 100% coverage for length &lt; 40 (99.8% for all). Labelled precision and recall are around 93%. Perfect match (full tree identity) is about 80% (cf. Table 1, disamb +). In this paper, the topological parser was provided a tagger front-end for free text processing, using the TnT tagger (Brants, 2000). The grammar was ported to the efficient LoPar parser of (Schmid, 2000). Tagging inaccuracies lead to a drop of 5.1/4.7 percentCL-V2 VF-TOPIC LK-VFIN MF RK-VPART NF ART NN VAFIN ART ADJA NN VAPP CL-SUBCL Der,1 Zehnkampf,2 hatte,3 eine,4 andere,5 Dimension,6 gehabt,7 , The decathlon would have a other dimension had LK-COMPL MF RK-VFIN KOUS PPER PROAV VAPP VAFIN wenn,9 er,10 dabei,11 gewesen,12 ware,13 . &lt;TOPO2HPSG type=”root” id=”5608”&gt; if he there been had . &lt;MAP CONSTR id=”T1” constr=”v2 cp” confent=”0.87” left=”W1” right=”W13”/&gt; &lt;MAP CONSTR id=”T2” constr=”v2 vf” confent=”0.87” left=”W1” right=”W2”/&gt; &lt;MAP CONSTR id=”T3” constr=”vfronted vfin+rk” confent=”0.87” </context>
</contexts>
<marker>Schmid, 2000</marker>
<rawString>H. Schmid, 2000. LoPar: Design and Implementation. IMS, Stuttgart. Arbeitspapiere des SFB 340, Nr. 149.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W Skut</author>
<author>T Brants</author>
</authors>
<title>Chunk tagger: statistical recognition of noun phrases.</title>
<date>1998</date>
<booktitle>In ESSLLI-1998 Workshop on Automated Acquisition of Syntax and Parsing.</booktitle>
<contexts>
<context position="25891" citStr="Skut and Brants, 1998" startWordPosition="4109" endWordPosition="4112">ferent from the corpus used in Section 4. 13In a comparative run without PoS-priorisation, we established a speed-up factor of 1.13 towards the baseline used in our experiment, with a slight increase in coverage (1%). This compares to a speed-up factor of 2.26 reported in (Daum et al., 2003), by integration of PoS guidance into a dependency parser. 1 0.8 0.6 0.4 0.2 0 90 80 70 60 50 40 30 20 10 precision recall coverage 0.3 0.28 0.26 0.24 0.22 0.2 0.18 0.16 96 94 92 90 88 86 84 82 precision recall f-measure end, phrasal fields determined by topological parsing were fed to the chunk parser of (Skut and Brants, 1998). Extracted NP and PP bracket constraints are defined as left-matching bracket types, to compensate for the non-embedding structure of chunks. Chunk brackets are tested in conjunction with topological brackets, and in isolation, using the labelled precision value of 71.1% in (Skut and Brants, 1998) as a uniform confidence weight.14 Measures For all runs we measure the absolute time and the number of parsing tasks needed to compute the first reading. The times in the individual runs were normalised according to the number of executed tasks per second. We noticed that the coverage of some integr</context>
</contexts>
<marker>Skut, Brants, 1998</marker>
<rawString>W. Skut and T. Brants. 1998. Chunk tagger: statistical recognition of noun phrases. In ESSLLI-1998 Workshop on Automated Acquisition of Syntax and Parsing.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Uszkoreit</author>
</authors>
<title>New Chances for Deep Linguistic Processing.</title>
<date>2002</date>
<booktitle>In Proceedings of COLING 2002,</booktitle>
<pages>pages xiv–xxvii,</pages>
<location>Taipei, Taiwan.</location>
<contexts>
<context position="1467" citStr="Uszkoreit, 2002" startWordPosition="207" endWordPosition="208">ing (DNLP) technology such as HPSG or LFG parsers certainly lies with the high degree of precision as well as detailed linguistic analysis these systems are able to deliver. Although considerable progress has been made in the area of processing speed, DNLP systems still cannot rival shallow and medium depth technologies in terms of throughput and robustness. As a net effect, the impact of deep parsing technology on application-oriented NLP is still fairly limited. With the advent of XML-based hybrid shallowdeep architectures as presented in (Grover and Lascarides, 2001; Crysmann et al., 2002; Uszkoreit, 2002) it has become possible to integrate the added value of deep processing with the performance and robustness of shallow processing. So far, integration has largely focused on the lexical level, to improve upon the most urgent needs in increasing the robustness and coverage of deep parsing systems, namely 1This work was in part supported by a BMBF grant to the DFKI project WHITEBOARD (FKZ 01 IW 002). lexical coverage. While integration in (Grover and Lascarides, 2001) was still restricted to morphological and PoS information, (Crysmann et al., 2002) extended shallow-deep integration at the lexic</context>
</contexts>
<marker>Uszkoreit, 2002</marker>
<rawString>H. Uszkoreit. 2002. New Chances for Deep Linguistic Processing. In Proceedings of COLING 2002, pages xiv–xxvii, Taipei, Taiwan.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>