<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<note confidence="0.7748465">
THE SEMSYN GENERATION SYSTEM:
INGREDIENTS, APPLICATIONS, PROSPECTS
Dietmar Rosner
c/o Projekt SEMSYN
Institut fiir Informatik, Universitat Stuttgart
Herdweg 51, D-7000 Stuttgart 1, West Germany
</note>
<email confidence="0.999655">
e-mail: semsyn@ifistg.uucp
</email>
<sectionHeader confidence="0.985547" genericHeader="abstract">
Abstract:
</sectionHeader>
<bodyText confidence="0.9995735">
We report about the current status of the SEM-
SYN generation system. This system - initially
implemented within a Japanese to German MT
project - has been applied to a variety of gen-
eration tasks both within MT and text genera-
tion. We will work out how these applications
enhanced the system&apos;s capacities. In addition
to the paper we will give a demo of both the
German and a recently implemented English
version of the system.
</bodyText>
<sectionHeader confidence="0.887458" genericHeader="method">
1 The starting point
</sectionHeader>
<bodyText confidence="0.999391714285714">
The SEMSYN project began in 1983 with an
MT application as starting point: We had to
investigate the possibility of using seman-
tic structures derived from Japanese as in-
put to a generator for German. The seman-
tic structures were produced from Japanese
titles of papers in information technology by
the parser of Fujitsu&apos;s ATLAS/II-system, the
German generator had to be designed and im-
plemented by SEMSYN. A first prototype was
presented at the end of 1984, further en-
hanced versions of this Japanese/German sys-
tem were demonstrated at various meetings,
e.g. COLING-86 [Rosner 86a].
</bodyText>
<sectionHeader confidence="0.993414" genericHeader="method">
2 Design guidelines
</sectionHeader>
<bodyText confidence="0.999429">
When we designed and implemented the initial
SEMSYN generator we tried to base this work
on guidelines like the following [Rosner 86b]:
</bodyText>
<listItem confidence="0.7630575">
• The implemented system should not be
confined by its first application.
</listItem>
<bodyText confidence="0.996877">
Since we had only little influence on the
format of the output of our partner&apos;s
parser for Japanese we designed a more
general frame language that served as in-
put to our system.
</bodyText>
<listItem confidence="0.945541555555556">
• The generator should be easily extensible
and transportable to other applications.
This gave strong motivation for choosing
an object-oriented implementation tech-
nique.
• The generator should be integrated in an
environment of software tools supporting
&amp;quot;every day&amp;quot; work (e.g. testing, debugging,
experimentation) with the system.
</listItem>
<bodyText confidence="0.99917425">
This led to the implementation of a whole
system of utilities: e. g. menu-based tools
for lexicon update and maintenance or an
interactive editor for semantic structures.
</bodyText>
<sectionHeader confidence="0.985316" genericHeader="method">
3 The basic machinery
</sectionHeader>
<bodyText confidence="0.9790605">
The SEMSYN generator is organized into two
major modules:
</bodyText>
<listItem confidence="0.97467325">
• the generator kernel or &apos;realization com-
ponent&apos; and
• the front end generator or `morpho/-
syntactic component&apos;.
</listItem>
<bodyText confidence="0.9952245">
We will have a closer look at the operation
of these modules now.
</bodyText>
<subsectionHeader confidence="0.998034">
3.1 The generator kernel
</subsectionHeader>
<bodyText confidence="0.995330666666667">
The generator kernel starts from a semantic
representation, i.e. a &apos;message&apos; in the sense of
[McDonald et al. 87]. Its task is to &apos;realize&apos; the
</bodyText>
<page confidence="0.996311">
25
</page>
<bodyText confidence="0.98331">
message, i.e. to decide how its content may be
expressed in natural language:
</bodyText>
<listItem confidence="0.938317666666667">
• What is the adequate syntactic form for
the utterance as a whole?
• How should the subparts of the conceptual
representation be realized and integrated
into the utterance?
• What are appropriate lexicalizations - as
lexemes or whole phrasal structures of the
target language - for the elements of the
message?
</listItem>
<subsectionHeader confidence="0.992859">
3.2 The linguistic representation
</subsectionHeader>
<bodyText confidence="0.9922855">
The output of the generator kernel is a func-
tional grammatical structure. This linguistic
representation fully specifies the intended ut-
terance:
</bodyText>
<listItem confidence="0.998198777777778">
• the syntactic category of the whole utter-
ance and the grammatical functions and
syntactic categories of all subparts,
• the syntactic features of the head of each
syntactic entity,
• the lexemes or special lexical items -
marked with category information like
:*PN for proper names or :*NC for noun
compounds - to be used.
</listItem>
<subsectionHeader confidence="0.997008">
3.3 The front end generator
</subsectionHeader>
<bodyText confidence="0.996778833333333">
The functional grammatical structures pro-
duced by the generator kernel are input to the
front end generator. This module has to exe-
cute all syntactic and morphological processes
that are necessary to produce the correspond-
ing surface string. This involves:
</bodyText>
<listItem confidence="0.999950666666667">
• linearization, i.e. constituent ordering,
• agreement handling,
• inflection.
</listItem>
<bodyText confidence="0.999222333333333">
The need for an explicit linguistic represen-
tation of the intended utterance and a sepa-
rate final processing step is especially obvi-
ous for highly inflectional languages with a
rich repertoire of agreement phenomena (e.g.
French, German).
</bodyText>
<subsectionHeader confidence="0.935216">
3.4 Examples
</subsectionHeader>
<bodyText confidence="0.995586">
3.4.1 Frame structures as semantic repre-
sentation
SEMSYN&apos;s generator kernel expects its input
in a frame notation. Although there are mi-
nor variations between the different applica-
tions the basic format is fixed: frame struc-
tures consisting of a &apos;semantic symbol&apos; as name
and named roles or slots with - recursively -
frame structures as fillers.
An example of a case frame:
</bodyText>
<sectionHeader confidence="0.834963333333333" genericHeader="method">
(GENERATE
:AGENT (PROJECT :NAME (:*PN SEMSYN))
:OBJECT (LANGUAGE :ATTRIBUTES GERMAN))
</sectionHeader>
<bodyText confidence="0.99989">
Here the toplevel frame structure contains
the semantic symbol &apos;GENERATE&apos; and has
two filled roles :AGENT and :OBJECT as fur-
ther information.
</bodyText>
<subsectionHeader confidence="0.663034">
3.4.2 A realization result
</subsectionHeader>
<bodyText confidence="0.93736025">
When the generator kernel realizes this case
frame as a clause in active voice this results
in the following functional grammatical struc-
ture:
</bodyText>
<equation confidence="0.991596538461539">
(:CLAUSE
(:VERB &apos;generier&apos;)
(:FEATURES (:VOICE ACTIVE))
(:SUBJ
(:NG (:HEAD
(:*NC (:*PN &apos;SEMSYN&apos;)
1.1 &apos;Projekt&apos;)
(:FEATURES
(:NUM SG)(:DET DEF)(:CAS NOM))))
(:DIROBJ
(:NG (:HEAD &apos;Sprache&apos;)
(:FEATURES (:NUM SG)(:DET ZERO))
(:CLASSIFIER &apos;deutsch&apos;))))
</equation>
<bodyText confidence="0.922327">
This yields the following German sentence&apos;:
</bodyText>
<footnote confidence="0.46060375">
&amp;quot;Das SEMSYN-Projekt generiert
deutsche Sprache.&amp;quot;
(The SEMSYN project generates Ger-
man language.)
</footnote>
<subsectionHeader confidence="0.350966">
3.5 Object-oriented implementa-
tion of realization knowledge
</subsectionHeader>
<bodyText confidence="0.9832025">
The main features of the object-oriented
paradigm that we exploited for the implemen-
</bodyText>
<footnote confidence="0.963417">
1English glosses added as convenience for the reader.
</footnote>
<page confidence="0.997495">
26
</page>
<bodyText confidence="0.6221275">
tation of realization knowledge in the genera-
tor kernel are
</bodyText>
<listItem confidence="0.9987985">
• hierarchy as organisation principle for the
knowledge base and
• message passing between objects as pri-
mary control structure.
</listItem>
<bodyText confidence="0.98051075">
The specialization hierarchy used is rooted in a
general class that defines the basic methods for
realization (KBS-Schema). On the next level
are general classes for
</bodyText>
<listItem confidence="0.999919666666667">
• case frames (CASE-Schema)
• concepts (CONCEPT-Schema)
• relations (RELATION-Schema).
</listItem>
<bodyText confidence="0.76352">
These classes differ with respect to the possi-
ble realizations of their instances:
</bodyText>
<listItem confidence="0.955116181818182">
• concept-schemata allow only realizations
as noun groups
• case-schemata allow for various clausal
forms (active, passive, topicalized) as well
as nominalized forms
• subclasses of relation-schema incorporate
knowledge about realization possibilities
for (more complex) semantic relations like
the relation between :MEANS and :PUR-
POSE, :REASON and :RESULT etc.
3.5.1 A relation-schema
</listItem>
<bodyText confidence="0.956954333333333">
The semantic representation of a summary
of Macbeth may contain the following frame
structure:
</bodyText>
<sectionHeader confidence="0.871192666666667" genericHeader="method">
(REASON-FOR
:RESULT
(MURDER :AGENT MACBETH :OBJECT DUNCAN)
:REASON
(PERSUADE
:AGENT (LADY-MACBETH :SPECIALIZE AMBITIOUS)
</sectionHeader>
<subsectionHeader confidence="0.925743">
:OBJECT MACBETH))
</subsectionHeader>
<bodyText confidence="0.798261272727273">
One possible way to express this relation is
to realize the fillers of :REASON and :RE-
SULT as clauses and add the clause from
:REASON as a subordinate to that of :RE-
SULT:
&amp;quot;Macbeth ermordete Duncan, da die
ehrgeizige Lady Macbeth Macbeth
ilberredete&amp;quot;
(Macbeth murdered Duncan because
the ambitious Lady Macbeth per-
suaded Macbeth)
</bodyText>
<sectionHeader confidence="0.662532" genericHeader="method">
4 Other applications of the
system
</sectionHeader>
<bodyText confidence="0.9917915">
In the meantime improved and extended ver-
sions of the SEMSYN generation system have
been applied to quite a variety of input struc-
tures and generation tasks:
</bodyText>
<listItem confidence="0.941749">
• machine translation applications:
— Generation of German from (hand-
written) semantic structures pro-
posed for use within EUROTRA
[Heid, Rosner, Weck 87]
— Generation of German sentences in
the domain of doctor/patient com-
munication from semantic structures
produced from Japanese and En-
glish by CMU&apos;s Universal Parser
[Tomita, Carbonell 86]
• Text generation:
— SEMTEX: generation of news stories
from statistical data [Rosner 87]
— GEOTEX: generation of descrip-
tive texts for geometric constructions
[Kehl 86]
</listItem>
<bodyText confidence="0.9990828">
Although the basic design of the generator
[Rosner 86b] proved to be flexible enough and
could remain untouched each of these appli-
cations has led to additional features of the
whole system.
</bodyText>
<subsectionHeader confidence="0.989264">
4.1 MT applications
4.1.1 Title translation
</subsectionHeader>
<bodyText confidence="0.999529384615385">
In the first application of the system we
started from semantic representations derived
from titles of Japanese papers in the field of
information technology. Titles are in most
cases noun groups. In order to generate Ger-
man equivalents we had to provide the proto-
type primarily with knowledge about German
noun group structures. On the other hand,
for many of these semantic structures clausal
forms were possible as well. We therefore pro-
vided the system with &amp;quot;stylistic&amp;quot; switches that
allowed the alternative generation of clauses
from case frames as well.
</bodyText>
<page confidence="0.995566">
27
</page>
<sectionHeader confidence="0.490363" genericHeader="method">
4.1.2 MT for doctor/patient communica-
tion
</sectionHeader>
<bodyText confidence="0.9981799">
The sample of semantic structures in this ex-
periment was taken from doctor/patient com-
munication.
The semantic structures produced
by CMU&apos;s parsers for Japanese and English
are basically case frames, but include syntac-
tic information as well (e.g. about :MOOD
or :TIME). The fragment of German gener-
able by the SEMSYN system was extended by
yes/no-questions and imperatives.
</bodyText>
<subsectionHeader confidence="0.932672">
An example:
</subsectionHeader>
<bodyText confidence="0.988578333333333">
English input to CMU&apos;s parser:
&amp;quot;i have a pain in the throat&amp;quot;
Semantic structure as input to SEMSYN:
</bodyText>
<table confidence="0.810519181818182">
(*HAVE-A-SYMPTOM
:MOOD DEC
:AGENT (*PATIENT
:HUMAN + :PRO 1 :NUMBER SG
:PERSON 1)
:TIME PRESENT
:SYMPTOM (*PAIN
:LOCATION
(*BODY-PART :NAME *THROAT)))
German generation:
&amp;quot;Ich habe Schmerzen im Rachen.&amp;quot;
</table>
<subsubsectionHeader confidence="0.743521">
4.1.3 EUROTRA-D/SEMSYN experiment
</subsubsectionHeader>
<bodyText confidence="0.97642575">
In order to support the EUROTRA-D group,
we ran this experiment:
A sample of semantic structures as
proposed for use within EUROTRA
[Steiner 86] should serve as input to
our generator.
This experiment was interesting under var-
ious aspects:
</bodyText>
<listItem confidence="0.9348950625">
• The semantic representation used is based
on systemic grammar; since the classes
used are already hierarchically structured
it was relatively easy to implement them
as a FLAVOR hierarchy of realization
classes.
• The sample of semantic structures was
chosen to cover the complete list of Ger-
man sentential types from a textbook
[Helbig, Buscha 86]. In order to be able
to generate all of these surface forms we
had to further enrich the generable frag-
ments with e.g.
— infinitival complements
— genitive objects
— subject and object clauses.
</listItem>
<subsectionHeader confidence="0.979777">
4.2 Text generation
</subsectionHeader>
<subsubsectionHeader confidence="0.761476">
4.2.1 SEMTEX: Generation of news stories
</subsubsectionHeader>
<bodyText confidence="0.995284409090909">
SEMTEX starts from mere labor market data,
extract a list of semantic representations from
them as &amp;quot;text plan&amp;quot; and then converts this list
into texts like the following:
&amp;quot;Die Zahl der Arbeitslosen in
der Bundesrepublik Deutschland ist
im Dezember sparbar angestiegen.
Sie hat von 2210700 auf 2347100
zugenommen. Die Arbeitslosenquote
betrug Ende Dezember 9.4 Prozent.
Sie hatte sich Ende Dezember des
letzten Jahres auf 9.3 Prozent be-
laufen. Der DGB hat erklart, er sehe
in der VergroBerung der Arbeits-
losenzahl em n negatives Zeichen.&amp;quot;
The main concern in implementing SEM-
TEX has been to provide the SEMSYN gener-
ator with mechanisms that keep track of pre-
vious generation decisions thus creating a rep-
resentation of the textual context built up by
the already uttered sentences. This context is
used:
</bodyText>
<listItem confidence="0.9983336">
• to avoid repetition in wording,
• to deliberately elide information still valid
(e.g. about the time period concerned),
• to decide on pronominalisation and other
types of reference.
</listItem>
<bodyText confidence="0.641005">
In addition a representation of the temporal
context is used
</bodyText>
<listItem confidence="0.9902586">
• to dynamically determine grammatical
tense and
• to produce appropriate natural language
descriptions for the time units mentioned
[Rosner 86b].
</listItem>
<page confidence="0.996774">
28
</page>
<subsubsectionHeader confidence="0.3764715">
4.2.2 GEOTEX: Verbalizing objects and
operations
</subsubsectionHeader>
<bodyText confidence="0.972751444444444">
In the GEOTEX application the SEMTEX
text generator is combined with a tool for
interactively creating geometric constructions
[Kehl 86]. The latter offers formal commands
for manipulating (i.e. creating, naming and -
deliberately - deleting) basic objects of Eu-
clidean geometry. The generator is used to
produce descriptive texts related to the geo-
metric construction:
</bodyText>
<listItem confidence="0.99788475">
• descriptions of the geometric objects in-
volved,
• descriptions of the sequence of steps done
during a construction.
</listItem>
<subsectionHeader confidence="0.730847">
Verbalizing the course of a construction:
</subsectionHeader>
<bodyText confidence="0.8532025">
When GEOTEX is describing the course of
a construction in a concise and coherent text it
starts from the sequence of commands of the
geometry language. Let us look at an example:
</bodyText>
<table confidence="0.9142224">
(PUN SA 15 10)
(PUN SB 20 7)
(KRE SK $8 SA)
Each of these commands in turn causes
GEOTEX
</table>
<listItem confidence="0.981440111111111">
• to update the associated FLAVOR repre-
sentation for the domain,
• to display (if possible) the objects on the
screen (in this case: point $A with co-
ordinates (15, 10), point $B with coordi-
nates (20, 7), circle $K with center $B and
through $A),
• to create a message from the operation and
give it as input to SEMTEX.
</listItem>
<bodyText confidence="0.972063">
SEMTEX renders this information in the
order given. For the example this resulted in
the following text:
</bodyText>
<figure confidence="0.917344375">
&amp;quot;Ich zeichne den Punkt $a (15/10)
em.&amp;quot;
(I draw point $a ( 15/ 10).)
&amp;quot;Und den Punkt $b (20/7).&amp;quot;
(And point $b (20/7).)
&amp;quot;Urn ihn schlage ich den Kreis $k
durch U..&amp;quot;
(Around it I draw $k through $(2.)
</figure>
<bodyText confidence="0.903676608695652">
To achieve this result SEMTEX&apos; context-
handling mechanisms have been enriched:
• Elision is no longer restricted to adjuncts.
For repetitive operations verb and subject
will be elided in subsequent sentences (cf.
the sentences 1 and 2).
• The distinction between known informa-
tion (i.e. known geometric objects) and
new one (i.e. new objects created from
known ones) is exploited to decide on
constituent ordering: the constituent re-
ferring to the known object is &amp;quot;topical-
ized&amp;quot; , i.e. put in front of the sentence (cf.
sentence 3).
In addition the system allows for more ways
to refer to objects introduced in the text:
pronouns, textual deixis using demonstrative
pronouns (&amp;quot;dieser Punkt&amp;quot; ,this point), names.
The choice is done deliberately: Pronouns are
avoided if their use might create an ambigu-
ity; reference by name is used when an object
has not constantly been in focus and therefore
has to be re-introduced.
</bodyText>
<sectionHeader confidence="0.840216" genericHeader="method">
5 SEMSYN&apos;s Software Envi-
ronment
</sectionHeader>
<bodyText confidence="0.9998544">
SEMSYN&apos;s generation system has been imple-
mented on a SYMBOLICS lisp machine. Dur-
ing the implementation we aimed at utilizing
as much of the functionality of this machine
in order to get optimal support for our work.
We have built up an environment of linguis-
tic and software tools that, though designed
for our projects purposes, may be - at least in
part - of interest for other projects in MT and
CL in general. 2
</bodyText>
<subsectionHeader confidence="0.993851">
5.1 Interface tools:
</subsectionHeader>
<bodyText confidence="0.996601444444444">
This comprises all software that provides easy
and comfortable communication with the sys-
tem (even for casual users).
SEMSYN&apos;s user interface is centered around
SEMNET-GRAPHICS, a tool for visualiz-
ing semantic nets - the starting point of
the generation - as mouse-sensitive graph-
ics [Rosner 86b]. The graphical represen-
tation is embedded in an interface &amp;quot;frame&amp;quot;
</bodyText>
<footnote confidence="0.354557">
2 These tools are best illustrated by an interactive demo.
</footnote>
<page confidence="0.998407">
29
</page>
<bodyText confidence="0.9998745">
[Weinreb, Moon 81] whose &amp;quot;panes&amp;quot; are dis-
playing various intermediate structures - de-
pending on the users chosen &amp;quot;frame configu-
ration&amp;quot; - and the generation result.
</bodyText>
<subsectionHeader confidence="0.999368">
5.2 Experimentation tools:
</subsectionHeader>
<bodyText confidence="0.994333">
These tools extend the capabilities of the user
interface and are intended to enable and sup-
port experiments with the system.
SEMNET-EDIT is a tool for experimenting
the generator by interactively editing semantic
nets [Kehl 85]:
</bodyText>
<listItem confidence="0.9905184">
• modification of given semantic nets
• creation of semantic nets from scratch
• generation of German from created or
modified semantic nets and/or their sub-
nets.
</listItem>
<bodyText confidence="0.9908864">
Experimentation tools of this type are not only
useful for purposes of debugging and system
improvement but proved as well to be very
helpful as comfortable means for introduction
into the system&apos;s capabilities and limitations.
</bodyText>
<subsectionHeader confidence="0.999416">
5.3 Lexicon tools:
</subsectionHeader>
<bodyText confidence="0.999950071428572">
In every realistic application dictionaries play
an important role as body of linguistic knowl-
edge; the need for support in maintaining and
updating them seems obvious.
SEMSYSTEM uses two types of dictionar-
ies: A single German root form dictionary
(with morpho/syntactic information) for the
generator front end and so-called &amp;quot;realization
dictionaries&amp;quot;, that relate semantic symbols to
German lexical items (root forms of verbs,
nouns, adjectives, ...) and that may vary for
different applications of the generator. For
both types of lexica there are window- and
menu-based tools for maintenance.
</bodyText>
<sectionHeader confidence="0.876788" genericHeader="method">
6 Prospects: From mono- to
multilingual generation
</sectionHeader>
<subsectionHeader confidence="0.999936">
6.1 Teaching English to the system
</subsectionHeader>
<bodyText confidence="0.9993575">
In a recent experiment 3 we changed and ex-
tended our generator system in such a way that
</bodyText>
<footnote confidence="0.6991045">
3 This work is done in collaboration with Odyssey Re-
search Associates, Ithaca, N.Y.
</footnote>
<bodyText confidence="0.860874565217391">
- using the same representation for the differ-
ent domains - the texts of SEMTEX and GEO-
TEX may be produced in English as well.
A system produced example text from the
newspaper application:
Increase in the number of unem-
ployed.
NURNBERG/BONN (cpa) DECEM-
BER 5,85. The number of unem-
ployed in West Germany has in-
creased slightly during November.
It has increased from 2148800 by
61900 to 2210700. At the end
of November the unemployment rate
had a value of 8.8 percent. At the
end of the year-ago period it had
a value of 8.7 percent. Gerd Muhr,
the speaker of the DGB, declares, it
sees a bad sign in the increase in the
number of unemployed.
French will be the next target language; we
have started to prepare the morphological and
syntactic data for such an experiment.
</bodyText>
<sectionHeader confidence="0.715828" genericHeader="method">
6.2 Related work
</sectionHeader>
<bodyText confidence="0.854330294117647">
There is more recent work in &amp;quot;multilingual
generation&amp;quot; from data:
• RAREAS, a system synthesizing weather
forecasts from data provided by meteo-
rologists [Kittredge et al. 86] is currently
being equipped with French as second
target language.
• Kukich&apos;s ANA, a system generating En-
glish stock market reports from Dow
Jones data [Kukich 83], has a second
tongue as well: The generation of French
bulletins has been possible by replacing
ANA&apos;s &amp;quot;linguistic module&amp;quot; with a French
version - called FRANA [Contant 86] -
while leaving ANA&apos;s other modules un-
touched (i.e. Fact Generator, Message
Generator, Discourse Organizer).
</bodyText>
<subsectionHeader confidence="0.9932935">
6.3 Why multilingual generation?
6.3.1 Aspects of application:
</subsectionHeader>
<bodyText confidence="0.996136333333333">
Generation of natural language texts in differ-
ent languages (and probably different styles)
from the same knowledge base might be an
</bodyText>
<page confidence="0.993803">
30
</page>
<bodyText confidence="0.999841">
interesting alternative to human or machine
translation of these texts.
Re-Generation (of e.g. software manuals
or maintenance handbooks) in different lan-
guages might be much more economic than
manually &amp;quot;updating&amp;quot; those texts when the un-
derlying knowledge base changes.
</bodyText>
<subsectionHeader confidence="0.865194">
6.3.2 Aspects of implementation:
</subsectionHeader>
<bodyText confidence="0.999945571428572">
Multilingual generation enforces the separa-
tion of generator knowledge into language de-
pendent data and language independent ma-
chinery.
In order to keep a generator easily portable
to other languages the implementor will have
to allow as much declarativity as possible.
</bodyText>
<subsectionHeader confidence="0.654942">
6.3.3 Aspects of linguistic theory:
</subsectionHeader>
<bodyText confidence="0.991969272727273">
Work in multilingual generation from seman-
tic representations may be seen as an exercise
in contrastive linguistics:
A central issue for any generator starting from
semantic structures is the choice of an appro-
priate syntactic structure for the expression of
a given meaning structure.
What are the differences and correspondencies
between the different target languages with
respect to this choice? (E. g. Focus may be
expressed by constituent order in German, in
English you may have to choose a passive.)
Similarly
What are the differences between the tar-
get languages with respect to the seman-
tic features that are obligatory in order to
be able to produce surface text? (E.g.
In the Japanese/German MT application we
were confronted with the fact that the se-
mantic structures derived from Japanese did
not contain semantic information about in!-
definiteness or multiplicity.)
</bodyText>
<sectionHeader confidence="0.936836" genericHeader="conclusions">
ACKNOWLEDGEMENTS:
</sectionHeader>
<bodyText confidence="0.999978190476191">
The SEMSYN project is funded by the West
German Ministry for Research and Technol-
ogy (BMFT). The project is currently cooper-
ating with partners from Japan (University of
Kyoto; NTT Basic Research Laboratories) and
USA (International Center for MT at CMU).
We have to thank all partners for their support.
The SEMSYN system is the joint effort of a
variety of people. Special thanks to M. Emele
(Stuttgart) for his work on the front end gen-
erator, to W. Kehl (Stuttgart) for his imple-
mentation of GEOTEX and the editor for se-
mantic nets and to 0. Rambow (Ithaca, N.Y.)
for our joint experiment to teach English to
the system.
A note on implementation and demonstration
The SEMSYN generator and the applications
as described in this paper are fully imple-
mented and run in ZetaLISP and FLAVORS
on SYMBOLICS lisp machines. We would like
to demonstrate the system at the conference.
</bodyText>
<sectionHeader confidence="0.999329" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.996483375">
[Contant 86] Contant, C. &amp;quot;Generation automa-
tique de texte: application au sous-
language boursier&amp;quot;, M.A. thesis, Dept. de
Linguistique, Univ. de Montreal, 1986.
[Emele 86] Emele, M. &amp;quot;FREGE - Entwick-
lung und Implementierung eines objek-
torientierten FRont-End-GEnerators far
das Deutsche&amp;quot;, Diplomarbeit, Institut fur
Informatik, Uni Stuttgart, 1986.
[Heid, Rosner, Weck 87] Heid, U.;
Rosner, D.; Weck, B.: &apos;Das EUROTRA-
D/SEMSYN-Experiment: Generierung
deutscher Satze aus semantischen Repra-
sentationen&apos;, in: Tillmann, H.G.; Willee
(Hrg.):&amp;quot;Analyse und Synthese gesproch-
ener Sprache&amp;quot;, (Hildesheim: Olms), 1987.
[Helbig, Buscha 86] Helbig, G.; Buscha, J.:
&amp;quot;Deutsche Grammatik. Ein Handbuch fiir
den Auslcinderunterricht&amp;quot;, Leipzig, 1986.
[Kehl 85] Kehl, W.: &amp;quot;Erweiterung der
graphischen Schnittstelle des SEMSYN-
Projekts&amp;quot;, Studienarbeit, Insitut fiir In-
formatik, Univ. Stuttgart, 1985.
[Kehl 86] Kehl, W.:&amp;quot;GEOTEX - Ein System
zur Verbalisierung geornetrischer Kon-
struktionen&amp;quot;, Diplomarbeit, Institut fiir
Informatik, Univ. Stuttgart, 1986.
[Kempen 87] Kempen, G. (Ed.): &amp;quot;Natural
language generation: New results in Ar-
tificial Intelligence, Psychology and Lin-
guistics&amp;quot;, Kluwer Academic Publishers,
Dordrecht/Boston, 1987.
</reference>
<page confidence="0.998003">
31
</page>
<reference confidence="0.99602369047619">
[Kittredge et al. 86] Kittredge,
R., A. Polguere, E. Goldberg: &amp;quot; Syn-
thesizing Weather Forecasts from format-
ted Data&amp;quot;, in: COLING-86, Proceedings,
Bonn, August 1986.
[Kukich 83] Kukich, K. &amp;quot;Design and Imple-
mentation of a Knowledge-Based Report
Generator&amp;quot;, ACL Annual Meeting, Pro-
ceedings, 1983.
[McDonald 83] McDonald, D.D.
&amp;quot;Natural Language Generation as a Com-
putational Problem: an introduction&amp;quot;, in:
Brady &amp; Berwick (eds.) &amp;quot;Computational
Models of Discourse&amp;quot;, MIT Press, 1983.
[McDonald et al. 87] McDonald,D.D.,
J.D. Puste jovsky, M.M. Vaughan &amp;quot;Fac-
tors contributing to efficiency in natural
language generation&amp;quot;, in: [Kempen 87]
[Rosner 86a] Rosner, D.: &amp;quot;When Mariko talks
to Sieg fried - Experiences from
a Japanese/German Machine Translation
Project&amp;quot;, in: COLING-86, Proceedings,
Bonn, August 1986.
[Rosner 86b] R6sner, D.: &amp;quot;Ein System zur
Generierung von deutschen Texten aus
semantischen Reprdsentationen&amp;quot;, Disser-
tation, Institut f. Informatik, Univ.
Stuttgart, 1986.
[Rosner 871 Rosner, D.: &apos;The automated news
agency: the SEMTEX text generator for
German&amp;quot;, in: [Kempen 87]
[Steiner 86] Steiner, E.: &amp;quot;Generating Se-
mantic Structures in EUROTRA-D&amp;quot;, in:
COLING-86, Proceedings, Bonn, August
1986.
[Tomita, Carbonell 86] Tomita, M. &amp;
J. Carbonell: &amp;quot;Another Stride Towards
Knowledge-Based Machine Translation&amp;quot;,
in: COLING-86, Proceedings, Bonn,
August 1986.
[Weinreb, Moon 81] Weinreb, D. &amp; Moon, D.:
&amp;quot;LISP machine manual, MIT, 1981.
</reference>
<page confidence="0.999297">
32
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.000140">
<title confidence="0.971384">THE SEMSYN GENERATION SYSTEM: INGREDIENTS, APPLICATIONS, PROSPECTS</title>
<author confidence="0.977501">Dietmar Rosner</author>
<affiliation confidence="0.820311">c/o Projekt SEMSYN Institut fiir Informatik, Universitat Stuttgart</affiliation>
<address confidence="0.983198">Herdweg 51, D-7000 Stuttgart 1, West Germany</address>
<email confidence="0.999261">e-mail:semsyn@ifistg.uucp</email>
<abstract confidence="0.958738594488189">report about the current status SEM- SYN generation system. This system initially implemented within a Japanese to German MT project has been applied to a variety of generation tasks both within MT and text generation. We will work out how these applications enhanced the system&apos;s capacities. In addition to the paper we will give a demo of both the German and a recently implemented English version of the system. 1 The starting point The SEMSYN project began in 1983 with an MT application as starting point: We had to investigate the possibility of using semantic structures derived from Japanese as input to a generator for German. The semantic structures were produced from Japanese titles of papers in information technology by the parser of Fujitsu&apos;s ATLAS/II-system, the German generator had to be designed and implemented by SEMSYN. A first prototype was at the end further enhanced versions of this Japanese/German system were demonstrated at various meetings, e.g. COLING-86 [Rosner 86a]. 2 Design guidelines When we designed and implemented the initial SEMSYN generator we tried to base this work on guidelines like the following [Rosner 86b]: • The implemented system should not be confined by its first application. Since we had only little influence on the format of the output of our partner&apos;s parser for Japanese we designed a more general frame language that served as input to our system. • The generator should be easily extensible and transportable to other applications. This gave strong motivation for choosing object-oriented implementation technique. • The generator should be integrated in an environment of software tools supporting &amp;quot;every day&amp;quot; work (e.g. testing, debugging, experimentation) with the system. led to the implementation of a system of utilities: e. g. menu-based tools for lexicon update and maintenance or an interactive editor for semantic structures. 3 The basic machinery The SEMSYN generator is organized into two major modules: • the generator kernel or &apos;realization component&apos; and • the front end generator or `morpho/syntactic component&apos;. We will have a closer look at the operation of these modules now. 3.1 The generator kernel The generator kernel starts from a semantic representation, i.e. a &apos;message&apos; in the sense of [McDonald et al. 87]. Its task is to &apos;realize&apos; the 25 message, i.e. to decide how its content may be expressed in natural language: • What is the adequate syntactic form for the utterance as a whole? • How should the subparts of the conceptual representation be realized and integrated into the utterance? • What are appropriate lexicalizations as lexemes or whole phrasal structures of the target language for the elements of the message? 3.2 The linguistic representation The output of the generator kernel is a functional grammatical structure. This linguistic representation fully specifies the intended utterance: • the syntactic category of the whole utterance and the grammatical functions and syntactic categories of all subparts, • the syntactic features of the head of each syntactic entity, • the lexemes or special lexical items marked with category information like :*PN for proper names or :*NC for noun compounds to be used. 3.3 The front end generator The functional grammatical structures produced by the generator kernel are input to the front end generator. This module has to execute all syntactic and morphological processes that are necessary to produce the corresponding surface string. This involves: • linearization, i.e. constituent ordering, • agreement handling, • inflection. The need for an explicit linguistic representation of the intended utterance and a separate final processing step is especially obvious for highly inflectional languages with a rich repertoire of agreement phenomena (e.g. French, German). 3.4 Examples 3.4.1 Frame structures as semantic representation generator kernel expects its a frame notation. Although there mibetween the different applicabasic format is fixed: frame strucconsisting of a &apos;semantic symbol&apos; as and named roles or slots with recursively frame structures as fillers. An example of a case frame: (GENERATE :AGENT (PROJECT :NAME (:*PN SEMSYN)) :OBJECT (LANGUAGE :ATTRIBUTES GERMAN)) the toplevel frame structure semantic symbol &apos;GENERATE&apos; has filled roles :AGENT and :OBJECT as fur- 3.4.2 A realization result the generator kernel realizes case as a clause in active voice this the following functional grammatical structure: (:CLAUSE (:VERB &apos;generier&apos;) (:FEATURES (:VOICE ACTIVE)) (:SUBJ (:NG (:HEAD (:*NC (:*PN &apos;SEMSYN&apos;) 1.1 &apos;Projekt&apos;) (:FEATURES (:NUM SG)(:DET DEF)(:CAS NOM)))) (:DIROBJ (:NG (:HEAD &apos;Sprache&apos;) (:FEATURES (:NUM SG)(:DET ZERO)) (:CLASSIFIER &apos;deutsch&apos;)))) yields the following German &amp;quot;Das SEMSYN-Projekt generiert deutsche Sprache.&amp;quot; (The SEMSYN project generates German language.) 3.5 Object-oriented implementation of realization knowledge The main features of the object-oriented that we exploited for the implemenglosses added as convenience for the reader. 26 tation of realization knowledge in the generator kernel are • hierarchy as organisation principle for the knowledge base and • message passing between objects as primary control structure. The specialization hierarchy used is rooted in a general class that defines the basic methods for realization (KBS-Schema). On the next level are general classes for • case frames (CASE-Schema) • concepts (CONCEPT-Schema) • relations (RELATION-Schema). These classes differ with respect to the possible realizations of their instances: • concept-schemata allow only realizations as noun groups • case-schemata allow for various clausal forms (active, passive, topicalized) as well as nominalized forms • subclasses of relation-schema incorporate knowledge about realization possibilities for (more complex) semantic relations like the relation between :MEANS and :PUR- POSE, :REASON and :RESULT etc. relation-schema The semantic representation of a summary of Macbeth may contain the following frame structure: (REASON-FOR :RESULT (MURDER :AGENT MACBETH :OBJECT DUNCAN) :REASON (PERSUADE :AGENT (LADY-MACBETH :SPECIALIZE AMBITIOUS) :OBJECT MACBETH)) One possible way to express this relation is to realize the fillers of :REASON and :RE- SULT as clauses and add the clause from :REASON as a subordinate to that of :RE- SULT: &amp;quot;Macbeth ermordete Duncan, da die ehrgeizige Lady Macbeth Macbeth ilberredete&amp;quot; (Macbeth murdered Duncan because the ambitious Lady Macbeth persuaded Macbeth) 4 Other applications of the system In the meantime improved and extended versions of the SEMSYN generation system have been applied to quite a variety of input structures and generation tasks: • machine translation applications: — Generation of German from (handwritten) semantic structures proposed for use within EUROTRA [Heid, Rosner, Weck 87] — Generation of German sentences in the domain of doctor/patient communication from semantic structures produced from Japanese and English by CMU&apos;s Universal Parser [Tomita, Carbonell 86] • Text generation: — SEMTEX: generation of news stories from statistical data [Rosner 87] — GEOTEX: generation of descriptive texts for geometric constructions [Kehl 86] Although the basic design of the generator [Rosner 86b] proved to be flexible enough and could remain untouched each of these applications has led to additional features of the whole system. 4.1 MT applications 4.1.1 Title translation first application of the system we started from semantic representations derived from titles of Japanese papers in the field of information technology. Titles are in most cases noun groups. In order to generate German equivalents we had to provide the prototype primarily with knowledge about German noun group structures. On the other hand, for many of these semantic structures clausal forms were possible as well. We therefore provided the system with &amp;quot;stylistic&amp;quot; switches that allowed the alternative generation of clauses from case frames as well. 27 4.1.2 MT for doctor/patient communication The sample of semantic structures in this experiment was taken from doctor/patient communication. The semantic structures produced by CMU&apos;s parsers for Japanese and English are basically case frames, but include syntacinformation as well (e.g. about :TIME). fragment of German generable by the SEMSYN system was extended by yes/no-questions and imperatives.</abstract>
<note confidence="0.4897895">An example: English input to CMU&apos;s parser:</note>
<title confidence="0.54894175">amp;quot;i have a pain in the throat&amp;quot; Semantic structure as input to SEMSYN: (*HAVE-A-SYMPTOM :MOOD DEC</title>
<author confidence="0.584577">AGENT</author>
<note confidence="0.528781">HUMAN + :PRO 1 :NUMBER SG :PERSON 1</note>
<title confidence="0.846378">TIME PRESENT :SYMPTOM (*PAIN :LOCATION (*BODY-PART :NAME *THROAT</title>
<author confidence="0.529541">German generation</author>
<abstract confidence="0.987593543352602">amp;quot;Ich habe Schmerzen im Rachen.&amp;quot; 4.1.3 EUROTRA-D/SEMSYN experiment to support the EUROTRA-D group, we ran this experiment: of semantic structures as proposed for use within EUROTRA [Steiner 86] should serve as input to our generator. This experiment was interesting under various aspects: • The semantic representation used is based on systemic grammar; since the classes used are already hierarchically structured it was relatively easy to implement them as a FLAVOR hierarchy of realization classes. • The sample of semantic structures was chosen to cover the complete list of German sentential types from a textbook [Helbig, Buscha 86]. In order to be able to generate all of these surface forms we had to further enrich the generable fragments with e.g. — infinitival complements — genitive objects — subject and object clauses. 4.2 Text generation 4.2.1 SEMTEX: Generation of news stories SEMTEX starts from mere labor market data, a list of semantic representations them as &amp;quot;text plan&amp;quot; and then converts this list into texts like the following: &amp;quot;Die Zahl der Arbeitslosen in der Bundesrepublik Deutschland ist im Dezember sparbar angestiegen. Sie hat von 2210700 auf 2347100 zugenommen. Die Arbeitslosenquote betrug Ende Dezember 9.4 Prozent. Sie hatte sich Ende Dezember des letzten Jahres auf 9.3 Prozent belaufen. Der DGB hat erklart, er sehe in der VergroBerung der Arbeitslosenzahl em n negatives Zeichen.&amp;quot; main concern in SEMhas been to provide the generator with mechanisms that keep track of previous generation decisions thus creating a repof the textual context built up already uttered sentences. This is used: • to avoid repetition in wording, • to deliberately elide information still valid (e.g. about the time period concerned), to decide on pronominalisation other reference. a representation of the temporal context is used • to dynamically determine grammatical tense and • to produce appropriate natural language descriptions for the time units mentioned [Rosner 86b]. 28 4.2.2 GEOTEX: Verbalizing objects and operations In the GEOTEX application the SEMTEX text generator is combined with a tool for interactively creating geometric constructions [Kehl 86]. The latter offers formal commands for manipulating (i.e. creating, naming and deliberately deleting) basic objects of Euclidean geometry. The generator is used to produce descriptive texts related to the geometric construction: • descriptions of the geometric objects involved, • descriptions of the sequence of steps done during a construction. Verbalizing the course of a construction: When GEOTEX is describing the course of a construction in a concise and coherent text it starts from the sequence of commands of the geometry language. Let us look at an example: (PUN SA 15 10) (PUN SB 20 7) (KRE SK $8 SA) Each of these commands in turn causes GEOTEX • to update the associated FLAVOR representation for the domain, • to display (if possible) the objects on the screen (in this case: point $A with coordinates (15, 10), point $B with coordinates (20, 7), circle $K with center $B and through $A), • to create a message from the operation and give it as input to SEMTEX. SEMTEX renders this information in the order given. For the example this resulted in the following text: &amp;quot;Ich zeichne den Punkt $a (15/10) em.&amp;quot; (I draw point $a ( 15/ 10).) &amp;quot;Und den Punkt $b (20/7).&amp;quot; (And point $b (20/7).) &amp;quot;Urn ihn schlage ich den Kreis $k (Around it I draw $k through $(2.) To achieve this result SEMTEX&apos; contexthandling mechanisms have been enriched: • Elision is no longer restricted to adjuncts. For repetitive operations verb and subject will be elided in subsequent sentences (cf. the sentences 1 and 2). • The distinction between known information (i.e. known geometric objects) and new one (i.e. new objects created from known ones) is exploited to decide on constituent ordering: the constituent referring to the known object is &amp;quot;topicalized&amp;quot; , i.e. put in front of the sentence (cf. sentence 3). In addition the system allows for more ways to refer to objects introduced in the text: pronouns, textual deixis using demonstrative (&amp;quot;dieser Punkt&amp;quot; The choice is done deliberately: Pronouns are avoided if their use might create an ambiguity; reference by name is used when an object has not constantly been in focus and therefore has to be re-introduced. 5 SEMSYN&apos;s Software Environment SEMSYN&apos;s generation system has been implemented on a SYMBOLICS lisp machine. During the implementation we aimed at utilizing as much of the functionality of this machine in order to get optimal support for our work. We have built up an environment of linguistic and software tools that, though designed for our projects purposes, may be at least in part of interest for other projects in MT and in general. 2 5.1 Interface tools: This comprises all software that provides easy and comfortable communication with the system (even for casual users). SEMSYN&apos;s user interface is centered around SEMNET-GRAPHICS, a tool for visualizing semantic nets the starting point of the generation as mouse-sensitive graphics [Rosner 86b]. The graphical representation is embedded in an interface &amp;quot;frame&amp;quot; 2These tools are best illustrated by an interactive 29 [Weinreb, Moon 81] whose &amp;quot;panes&amp;quot; are displaying various intermediate structures depending on the users chosen &amp;quot;frame configuration&amp;quot; and the generation result. 5.2 Experimentation tools: These tools extend the capabilities of the user interface and are intended to enable and support experiments with the system. SEMNET-EDIT is a tool for experimenting the generator by interactively editing semantic nets [Kehl 85]: • modification of given semantic nets • creation of semantic nets from scratch • generation of German from created or modified semantic nets and/or their subnets. Experimentation tools of this type are not only useful for purposes of debugging and system improvement but proved as well to be very</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>C Contant</author>
</authors>
<title>Generation automatique de texte: application au souslanguage boursier&amp;quot;,</title>
<date>1986</date>
<tech>M.A. thesis,</tech>
<institution>Dept. de Linguistique, Univ. de Montreal,</institution>
<marker>[Contant 86]</marker>
<rawString>Contant, C. &amp;quot;Generation automatique de texte: application au souslanguage boursier&amp;quot;, M.A. thesis, Dept. de Linguistique, Univ. de Montreal, 1986.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Emele</author>
</authors>
<title>FREGE - Entwicklung und Implementierung eines objektorientierten FRont-End-GEnerators far das Deutsche&amp;quot;, Diplomarbeit, Institut fur Informatik,</title>
<date>1986</date>
<location>Uni Stuttgart,</location>
<marker>[Emele 86]</marker>
<rawString>Emele, M. &amp;quot;FREGE - Entwicklung und Implementierung eines objektorientierten FRont-End-GEnerators far das Deutsche&amp;quot;, Diplomarbeit, Institut fur Informatik, Uni Stuttgart, 1986.</rawString>
</citation>
<citation valid="true">
<authors>
<author>U Heid</author>
<author>D Rosner</author>
<author>B Weck</author>
</authors>
<title>Das EUROTRAD/SEMSYN-Experiment: Generierung deutscher Satze aus semantischen Reprasentationen&apos;, in: Tillmann, H.G.; Willee (Hrg.):&amp;quot;Analyse und Synthese gesprochener Sprache&amp;quot;,</title>
<date>1987</date>
<location>(Hildesheim: Olms),</location>
<marker>[Heid, Rosner, Weck 87]</marker>
<rawString>Heid, U.; Rosner, D.; Weck, B.: &apos;Das EUROTRAD/SEMSYN-Experiment: Generierung deutscher Satze aus semantischen Reprasentationen&apos;, in: Tillmann, H.G.; Willee (Hrg.):&amp;quot;Analyse und Synthese gesprochener Sprache&amp;quot;, (Hildesheim: Olms), 1987.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Helbig</author>
<author>J Buscha</author>
</authors>
<title>Deutsche Grammatik. Ein Handbuch fiir den Auslcinderunterricht&amp;quot;,</title>
<date>1986</date>
<location>Leipzig,</location>
<marker>[Helbig, Buscha 86]</marker>
<rawString>Helbig, G.; Buscha, J.: &amp;quot;Deutsche Grammatik. Ein Handbuch fiir den Auslcinderunterricht&amp;quot;, Leipzig, 1986.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W Kehl</author>
</authors>
<title>Erweiterung der graphischen Schnittstelle des SEMSYNProjekts&amp;quot;,</title>
<date>1985</date>
<booktitle>Studienarbeit, Insitut fiir Informatik,</booktitle>
<location>Univ. Stuttgart,</location>
<marker>[Kehl 85]</marker>
<rawString>Kehl, W.: &amp;quot;Erweiterung der graphischen Schnittstelle des SEMSYNProjekts&amp;quot;, Studienarbeit, Insitut fiir Informatik, Univ. Stuttgart, 1985.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W GEOTEX Kehl</author>
</authors>
<title>Ein System zur Verbalisierung geornetrischer Konstruktionen&amp;quot;, Diplomarbeit, Institut fiir Informatik,</title>
<date>1986</date>
<location>Univ. Stuttgart,</location>
<marker>[Kehl 86]</marker>
<rawString>Kehl, W.:&amp;quot;GEOTEX - Ein System zur Verbalisierung geornetrischer Konstruktionen&amp;quot;, Diplomarbeit, Institut fiir Informatik, Univ. Stuttgart, 1986.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Kempen</author>
</authors>
<title>Natural language generation: New results in Artificial Intelligence, Psychology and Linguistics&amp;quot;,</title>
<date>1987</date>
<publisher>Kluwer Academic Publishers,</publisher>
<location>Dordrecht/Boston,</location>
<marker>[Kempen 87]</marker>
<rawString>Kempen, G. (Ed.): &amp;quot;Natural language generation: New results in Artificial Intelligence, Psychology and Linguistics&amp;quot;, Kluwer Academic Publishers, Dordrecht/Boston, 1987.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Kittredge</author>
<author>A Polguere</author>
<author>E Goldberg</author>
</authors>
<title>Synthesizing Weather Forecasts from formatted Data&amp;quot;, in:</title>
<date>1986</date>
<booktitle>COLING-86, Proceedings,</booktitle>
<location>Bonn,</location>
<marker>[Kittredge et al. 86]</marker>
<rawString>Kittredge, R., A. Polguere, E. Goldberg: &amp;quot; Synthesizing Weather Forecasts from formatted Data&amp;quot;, in: COLING-86, Proceedings, Bonn, August 1986.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Kukich</author>
</authors>
<title>Design and Implementation of a Knowledge-Based Report Generator&amp;quot;,</title>
<date>1983</date>
<booktitle>ACL Annual Meeting, Proceedings,</booktitle>
<marker>[Kukich 83]</marker>
<rawString>Kukich, K. &amp;quot;Design and Implementation of a Knowledge-Based Report Generator&amp;quot;, ACL Annual Meeting, Proceedings, 1983.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D D McDonald</author>
</authors>
<title>Natural Language Generation as a Computational Problem: an introduction&amp;quot;,</title>
<date>1983</date>
<editor>in: Brady &amp; Berwick (eds.)</editor>
<publisher>MIT Press,</publisher>
<marker>[McDonald 83]</marker>
<rawString>McDonald, D.D. &amp;quot;Natural Language Generation as a Computational Problem: an introduction&amp;quot;, in: Brady &amp; Berwick (eds.) &amp;quot;Computational Models of Discourse&amp;quot;, MIT Press, 1983.</rawString>
</citation>
<citation valid="false">
<authors>
<author>D D McDonald</author>
<author>J D Puste jovsky</author>
<author>M M Vaughan</author>
</authors>
<title>Factors contributing to efficiency in natural language generation&amp;quot;, in:</title>
<journal>Kempen</journal>
<volume>87</volume>
<marker>[McDonald et al. 87]</marker>
<rawString>McDonald,D.D., J.D. Puste jovsky, M.M. Vaughan &amp;quot;Factors contributing to efficiency in natural language generation&amp;quot;, in: [Kempen 87]</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Rosner</author>
</authors>
<title>When Mariko talks to Sieg fried - Experiences from a Japanese/German Machine Translation Project&amp;quot;, in:</title>
<date>1986</date>
<booktitle>COLING-86, Proceedings,</booktitle>
<location>Bonn,</location>
<marker>[Rosner 86a]</marker>
<rawString>Rosner, D.: &amp;quot;When Mariko talks to Sieg fried - Experiences from a Japanese/German Machine Translation Project&amp;quot;, in: COLING-86, Proceedings, Bonn, August 1986.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D R6sner</author>
</authors>
<title>Ein System zur Generierung von deutschen Texten aus semantischen Reprdsentationen&amp;quot;, Dissertation, Institut f. Informatik,</title>
<date>1986</date>
<journal>Rosner</journal>
<volume>871</volume>
<location>Univ. Stuttgart,</location>
<marker>[Rosner 86b]</marker>
<rawString>R6sner, D.: &amp;quot;Ein System zur Generierung von deutschen Texten aus semantischen Reprdsentationen&amp;quot;, Dissertation, Institut f. Informatik, Univ. Stuttgart, 1986. [Rosner 871 Rosner, D.: &apos;The automated news agency: the SEMTEX text generator for German&amp;quot;, in: [Kempen 87]</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Steiner</author>
</authors>
<title>Generating Semantic Structures in EUROTRA-D&amp;quot;,</title>
<date>1986</date>
<booktitle>in: COLING-86, Proceedings,</booktitle>
<location>Bonn,</location>
<marker>[Steiner 86]</marker>
<rawString>Steiner, E.: &amp;quot;Generating Semantic Structures in EUROTRA-D&amp;quot;, in: COLING-86, Proceedings, Bonn, August 1986.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Tomita</author>
<author>J Carbonell</author>
</authors>
<title>Another Stride Towards Knowledge-Based Machine Translation&amp;quot;, in:</title>
<date>1986</date>
<booktitle>COLING-86, Proceedings,</booktitle>
<location>Bonn,</location>
<marker>[Tomita, Carbonell 86]</marker>
<rawString>Tomita, M. &amp; J. Carbonell: &amp;quot;Another Stride Towards Knowledge-Based Machine Translation&amp;quot;, in: COLING-86, Proceedings, Bonn, August 1986.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Weinreb</author>
<author>D Moon</author>
</authors>
<title>LISP machine manual, MIT,</title>
<date>1981</date>
<marker>[Weinreb, Moon 81]</marker>
<rawString>Weinreb, D. &amp; Moon, D.: &amp;quot;LISP machine manual, MIT, 1981.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>