<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.002653">
<title confidence="0.9910455">
A Rich Feature Vector for Protein-Protein Interaction Extraction from
Multiple Corpora
</title>
<author confidence="0.952985">
Makoto Miwa&apos; Rune Sætre&apos; Yusuke Miyao&apos; Jun’ichi Tsujii&apos;,2,3
</author>
<affiliation confidence="0.956137">
&apos;Department of Computer Science, the University of Tokyo, Japan
Hongo 7-3-1, Bunkyo-ku, Tokyo, Japan.
2School of Computer Science, University of Manchester, UK
3National Center for Text Mining, UK
</affiliation>
<email confidence="0.997942">
{mmiwa,rune.saetre,yusuke,tsujii}@is.s.u-tokyo.ac.jp
</email>
<sectionHeader confidence="0.993869" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999940344827586">
Because of the importance of protein-
protein interaction (PPI) extraction from
text, many corpora have been proposed
with slightly differing definitions of pro-
teins and PPI. Since no single corpus is
large enough to saturate a machine learn-
ing system, it is necessary to learn from
multiple different corpora. In this paper,
we propose a solution to this challenge.
We designed a rich feature vector, and we
applied a support vector machine modi-
fied for corpus weighting (SVM-CW) to
complete the task of multiple corpora PPI
extraction. The rich feature vector, made
from multiple useful kernels, is used to
express the important information for PPI
extraction, and the system with our fea-
ture vector was shown to be both faster
and more accurate than the original kernel-
based system, even when using just a sin-
gle corpus. SVM-CW learns from one cor-
pus, while using other corpora for support.
SVM-CW is simple, but it is more effec-
tive than other methods that have been suc-
cessfully applied to other NLP tasks ear-
lier. With the feature vector and SVM-
CW, our system achieved the best perfor-
mance among all state-of-the-art PPI ex-
traction systems reported so far.
</bodyText>
<sectionHeader confidence="0.999337" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999405727272727">
The performance of an information extraction pro-
gram is highly dependent on various factors, in-
cluding text types (abstracts, complete articles, re-
ports, etc.), exact definitions of the information to
be extracted, shared sub-topics of the text collec-
tions from which information is to be extracted.
Even if two corpora are annotated in terms of the
same type of information by two groups, the per-
formance of a program trained by one corpus is
unlikely to be reproduced in the other corpus. On
the other hand, from a practical point of view, it is
worth while to effectively use multiple existing an-
notated corpora together, because it is very costly
to make new annotations.
One problem with several different corpora is
protein-protein interaction (PPI) extraction from
text. While PPIs play a critical role in un-
derstanding the working of cells in diverse bio-
logical contexts, the manual construction of PPI
databases such as BIND, DIP, HPRD, IntAct, and
MINT (Mathivanan et al., 2006) is known to be
very time-consuming and labor-intensive. The au-
tomatic extraction of PPI from published papers
has therefore been a major research topic in Natu-
ral Language Processing for Biology (BioNLP).
Among several PPI extraction task settings, the
most common is sentence-based, pair-wise PPI ex-
traction. At least four annotated corpora have been
provided for this setting: AIMed (Bunescu et al.,
2005), HPRD50 (Fundel et al., 2006), IEPA (Ding
et al., 2002), and LLL (N´edellec, 2005). Each of
these corpora have been used as the standard cor-
pus for training and testing PPI programs. More-
over, several corpora are annotated for more types
of events than just for PPI. Such examples include
BioInfer (Pyysalo et al., 2007), and GENIA (Kim
et al., 2008a), and they can be reorganized into PPI
corpora. Even though all of these corpora were
made for PPI extraction, they were constructed
based on different definitions of proteins and PPI,
which reflect different biological research inter-
ests (Pyysalo et al., 2008).
Research on PPI extraction so far has revealed
that the performance on each of the corpora could
</bodyText>
<page confidence="0.971827">
121
</page>
<note confidence="0.9966075">
Proceedings of the 2009 Conference on Empirical Methods in Natural Language Processing, pages 121–130,
Singapore, 6-7 August 2009. c�2009 ACL and AFNLP
</note>
<bodyText confidence="0.999924882352941">
benefit from additional examples (Airola et al.,
2008). Learning from multiple annotated cor-
pora could lead to better PPI extraction perfor-
mance. Various research paradigms such as induc-
tive transfer learning (ITL) and domain adaptation
(DA) have mainly focused on how to effectively
use corpora annotated by other groups, by reduc-
ing the incompatibilities (Pan and Yang, 2008).
In this paper, we propose the extraction of PPIs
from multiple different corpora. We design a rich
feature vector, and as an ITL method, we ap-
ply a support vector machine (SVM) modified for
corpus weighting (SVM-CW) (Schweikert et al.,
2008), in order to evaluate the use of multiple cor-
pora for the PPI extraction task. Our rich feature
vector is made from multiple useful kernels, each
of which is based on multiple parser inputs, pro-
posed by Miwa et al. (2008). The system with our
feature vector was better than or at least compa-
rable to the state-of-the-art PPI extraction systems
on every corpus. The system is a good starting
point to use the multiple corpora. Using one of the
corpora as the target corpus, SVM-CW weights
the remaining corpora (we call them the source
corpora) with “goodness” for training on the tar-
get corpus. While SVM-CW is simple, we show
that SVM-CW can improve the performance of the
system more effectively and more efficiently than
other methods proven to be successful in other
NLP tasks earlier. As a result, SVM-CW with our
feature vector is comprised of a PPI system with
five different models, of which each model is su-
perior to the best model in the original PPI extrac-
tion task, which used only the single corpus.
</bodyText>
<sectionHeader confidence="0.999147" genericHeader="introduction">
2 Related Works
</sectionHeader>
<bodyText confidence="0.998875866666667">
While sentence-based, pair-wise PPI extraction
was initially tackled by using simple methods
based on co-occurrences, lately, more sophisti-
cated machine learning systems augmented by
NLP techniques have been applied (Bunescu et al.,
2005). The task has been tackled as a classifica-
tion problem. To pull out useful information from
NLP tools including taggers and parsers, several
kernels have been applied to calculate the similar-
ity between PPI pairs. Miwa et al. (2008) recently
proposed the use of multiple kernels using multi-
ple parsers. This outperformed other systems on
the AIMed, which is the most frequently used cor-
pus for the PPI extraction task, by a wide margin.
To improve the performance using external
</bodyText>
<figureCaption confidence="0.999213">
Figure 1: Overview of our PPI extraction system
</figureCaption>
<bodyText confidence="0.999867138888889">
training data, many ITL and DA methods have
been proposed. Most of ITL methods assume that
the feature space is same, and that the labels may
be different in only some examples, while most of
DA methods assume that the labels are the same,
and that the feature space is different. Among the
methods, we use adaptive SVM (aSVM) (Yang et
al., 2007), singular value decomposition (SVD)
based alternating structure optimization (SVD-
ASO) (Ando et al., 2005), and transfer AdaBoost
(TrAdaBoost) (Dai et al., 2007) to compare with
SVM-CW. We do not use semi-supervised learn-
ing (SSL) methods, because it would be consid-
erably costly to generate enough clean unlabeled
data needed for SSL (Erkan et al., 2007). aSVM
is seen as a promising DA method among sev-
eral modifications of SVM including SVM-CW.
aSVM tries to find a model that is close to the one
made from other classification problems. SVD-
ASO is one of the most successful SSL, DA, or
multi-task learning methods in NLP. The method
tries to find an additional useful feature space by
solving auxiliary problems that are close to the tar-
get problem. With well-designed auxiliary prob-
lems, the method has been applied to text clas-
sification, text chunking, and word sense disam-
biguation (Ando, 2006). The method was reported
to perform better than or comparable to the best
state-of-the-art systems in all of these tasks. TrAd-
aBoost was proposed as an ITL method. In train-
ing, the method reduces the effect of incompatible
examples by decreasing their weights, and thereby
tries to use useful examples from source corpora.
The method has been applied to text classifica-
tion, and the reported performance was better than
SVM and transductive SVM (Dai et al., 2007).
</bodyText>
<sectionHeader confidence="0.979237" genericHeader="method">
3 PPI Extraction System
</sectionHeader>
<bodyText confidence="0.998136666666667">
The target task of our system is a sentence-based,
pair-wise PPI extraction. It is formulated as a clas-
sification problem that judges whether a given pair
</bodyText>
<page confidence="0.995474">
122
</page>
<bodyText confidence="0.8568508">
XPGp1 protein interacts with multiple subunits of
TFIIHprot and with CSBp2 protein.
PROT M:1, and M:1, interact M:1, multiple M:1,
of M:1, protein M:1, subunit M:1, with M:2, pro-
tein A:1
</bodyText>
<figureCaption confidence="0.971826125">
Figure 2: A sentence including an interacting pro-
tein pair (p1, p2). (AIMed PMID 8652557, 9th
sentence, 3rd pair)
Figure 4: Bag-of-Words features of the pair in Fig-
ure 2 with their positions (B:Before, M:in the Mid-
dle of, A:After) and frequencies.
Figure 3: Extraction of a feature vector from the
target sentence
</figureCaption>
<bodyText confidence="0.999929090909091">
of proteins in a sentence is interacting or not. Fig-
ure 2 shows an example of a sentence in which the
given pair (p1 and p2) actually interacts.
Figure 1 shows the overview of the proposed
PPI extraction system. As a classifier using a sin-
gle corpus, we use the 2-norm soft-margin lin-
ear SVM (L2-SVM) classifier, with the dual co-
ordinate decent (DCD) method, by Hsieh et al.
(2008). In this section, we explain the two main
features: the feature vector, and the corpus weight-
ing method for multiple corpora.
</bodyText>
<subsectionHeader confidence="0.999068">
3.1 Feature Vector
</subsectionHeader>
<bodyText confidence="0.998343322580645">
We propose a feature vector with three types of
features, corresponding to the three different ker-
nels, which were each combined with the two
parsers: the Enju 2.3.0, and KSDEP beta 1(Miyao
et al., 2008); this feature vector is used because the
kernels with these parsers were shown to be effec-
tive for PPI extraction by Miwa et al. (2008), and
because it is important to start from a good per-
formance single corpus system. Both parsers were
retrained using the GENIA Treebank corpus pro-
vided by Kim et al. (2003). By using our linear
feature vector, we can perform calculations faster
by using fast linear classifiers like L2-SVM, and
we also obtain a more accurate extraction, than by
using the original kernel method.
Figure 3 summarizes the way in which the fea-
ture vector is constructed. The system extracts
Bag-of-Words (BOW), shortest path (SP), and
graph features from the output of two parsers. The
Figure 5: Vertex walks, edge walks in the upper
shortest path between the proteins in the parse tree
by KSDEP. The walks and their subsets are used
as the shortest path features of the pair in Figure 2.
output is grouped according to the feature-type
and parser, and each group of features is separately
normalized by the L2-norm1. Finally, all values
are put into a single feature vector, and the whole
feature vector is then also normalized by the L2-
norm. The features are constructed by using pred-
icate argument structures (PAS) from Enju, and by
using the dependency trees from KSDEP.
</bodyText>
<subsectionHeader confidence="0.689898">
3.1.1 Bag-of-Words (BOW) Features
</subsectionHeader>
<bodyText confidence="0.999989666666667">
The BOW feature includes the lemma form of a
word, its relative position to the target pair of pro-
teins (Before, Middle, After), and its frequency in
the target sentence. BOW features form the BOW
kernel in the original kernel method. BOW fea-
tures for the pair in Figure 2 are shown in Figure 4.
</bodyText>
<subsectionHeader confidence="0.750749">
3.1.2 Shortest Path (SP) Features
</subsectionHeader>
<bodyText confidence="0.9997923">
SP features include vertex walks (v-walks), edge
walks (e-walks), and their subsets (Kim et al.,
2008b) on the target pair in a parse structure, and
represent the connection between the pair. The
features are the subsets of the tree kernels on the
shortest path (Sartre et al., 2007). Figure 5 illus-
trates the shortest path between the pair in Fig-
ure 2, and its v-walks and e-walks extracted from
the shortest path in the parse tree by KSDEP. A
v-walk includes two lemmas and their link, while
</bodyText>
<footnote confidence="0.969881">
1The vector normalized by the L2-norm is also called a
unit vector.
</footnote>
<page confidence="0.998139">
123
</page>
<bodyText confidence="0.999976333333333">
an e-walk includes a lemma and its two links. The
links indicates the predicate argument relations for
PAS, and the dependencies for dependency trees.
</bodyText>
<subsectionHeader confidence="0.698144">
3.1.3 Graph Features
</subsectionHeader>
<bodyText confidence="0.984188826086957">
Graph features are made from the all-paths graph
kernel proposed by Airola et al. (2008). The ker-
nel represents the target pair using graph matrices
based on two subgraphs, and the graph features are
all the non-zero elements in the graph matrices.
The two subgraphs are a parse structure sub-
graph (PSS) and a linear order subgraph (LOS).
Figure 6 describes the subgraphs of the sentence
parsed by KSDEP in Figure 2. PSS represents the
parse structure of a sentence. PSS has word ver-
tices or link vertices. A word vertex contains its
lemma and its part-of-speech (POS), while a link
vertex contains its link. Additionally, both types
of vertices contain their positions relative to the
shortest path. The “IP”s in the vertices on the
shortest path represent the positions, and the ver-
tices are differentiated from the other vertices like
“P”, “CC”, and “and:CC” in Figure 6. LOS repre-
sents the word sequence in the sentence. LOS has
word vertices, each of which contains its lemma,
its relative position to the target pair, and its POS.
Each subgraph is represented by a graph matrix
G as follows:
</bodyText>
<equation confidence="0.975843666666667">
00
G=LT E AnL, (1)
n=1
</equation>
<bodyText confidence="0.948683666666666">
where L is a NxL label matrix, A is an NxN
edge matrix, N represents the number of vertices,
and L represents the number of labels. The la-
bel of a vertex includes all information described
above (e.g. “ENTITY1:NN:IP” in Figure 6). If
two vertices have exactly same information, the
labels will be same. G can be calculated effi-
ciently by using the Neumann Series (Airola et al.,
2008). The label matrix represents the correspon-
dence between labels and vertices. Lij is 1 if the
i-th vertex corresponds to the j-th label, and 0 oth-
erwise. The edge matrix represents the connection
between the pairs of vertices. Aij is a weight wij
(0.9 or 0.3 in Figure 6 (Airola et al., 2008)) if the
i-th vertex is connected to the j-th vertex, and 0
otherwise. By this calculation, Gij represent the
sum of the weights of all paths between the i-th
label and the j-th label.
A B H I L
positive 1,000 2,534 163 335 164
all 5,834 9,653 433 817 330
</bodyText>
<tableCaption confidence="0.815249">
Table 1: The sizes of used PPI corpora. A:AIMed,
B:BioInfer, H:HPRD50, I:IEPA, and L:LLL.
</tableCaption>
<figureCaption confidence="0.956515">
Figure 7: Learning curves on two large corpora.
</figureCaption>
<bodyText confidence="0.727276333333333">
The x-axis is related to the percentage of the ex-
amples in a corpus. The curves are obtained by a
10-fold CV with a random split.
</bodyText>
<subsectionHeader confidence="0.999472">
3.2 Corpus Weighting for Mixing Corpora
</subsectionHeader>
<bodyText confidence="0.992887103448276">
Table 1 shows the sizes of the PPI corpora that we
used. Their widely-ranged differences including
the sizes were manually analyzed by Pyysalo et
al. (2008). While AIMed, HPRD50, IEPA, and
LLL were all annotated as PPI corpora, BioInfer in
its original form contains much more fine-grained
information than does just the PPI. BioInfer was
transformed into a PPI corpus by a program, so
making it the largest of the five. Among them,
AIMed alone was created by annotating whole ab-
stracts, while the other corpora were made by an-
notating single sentences selected from abstracts.
Figure 7 shows the learning curves on two large
corpora: AIMed and BioInfer. The curves are
obtained by performing a 10-fold cross valida-
tion (CV) on each corpus, with random splits, us-
ing our system. The curves show that the perfor-
mances can benefit from the additional examples.
To get a better PPI extraction system for a chosen
target, we need to draw useful shared information
from external source corpora. We refer to exam-
ples in the source corpora as “source examples”,
and examples in a target corpus as “target exam-
ples”. Among the corpora, we assume that the la-
bels in some examples are incompatible, and that
their distributions are also different, but that the
feature space is shared.
In order to draw useful information from the
source corpora to get a better model for the target
</bodyText>
<page confidence="0.995662">
124
</page>
<figureCaption confidence="1">
Figure 6: Parse structure subgraph and linear order subgraph to extract graph features of the pair in
Figure 2. The parse structure subgraph is from the parse tree by KSDEP.
</figureCaption>
<bodyText confidence="0.99871425">
corpus, we use SVM-CW, which has been used
as a DA method. Given a set of instance-label
pairs (xi, yi), i = 1, ..., ls + lt, xiERn, and
yiE{−1, +1}, we solve the following problem:
</bodyText>
<equation confidence="0.9115975">
minw �wT w + Cs
1
</equation>
<bodyText confidence="0.9999418125">
where w is a weight vector, f is a loss function,
and ls and lt are the numbers of source and target
examples respectively. Cs &gt; 0 and Ct &gt; 0 are
penalty parameters. We use a squared hinge loss
fi = max(0,1 − yiwT xi)2. Here, the source cor-
pora are treated as one corpus. The problem, ex-
cluding the second term, is equal to L2-SVM. The
problem can be solved using the DCD method.
As an ITL method, SVM-CW weights each cor-
pus, and tries to benefit from the source corpora,
by adjusting the effect of their compatibility and
incompatibility. For the adjustment, these penalty
parameters should be set properly. Since we are
unaware of the widely ranged differences among
the corpora, we empirically estimated them by
performing 10-fold CV on the training data.
</bodyText>
<sectionHeader confidence="0.999869" genericHeader="evaluation">
4 Evaluation
</sectionHeader>
<subsectionHeader confidence="0.998168">
4.1 Evaluation Settings
</subsectionHeader>
<bodyText confidence="0.999994777777778">
We used five corpora for evaluation: AIMed,
BioInfer, HPRD50, IEPA, and LLL. For the com-
parison with other methods, we report the F-
score (%), and the area under the receiver op-
erating characteristic (ROC) curve (AUC) (%)
using (abstract-wise) a 10-fold CV and a one-
answer-per-occurrence criterion. These measures
are commonly used for the PPI extraction tasks.
The F-score is a harmonic mean of Precision and
Recall. The ROC curve is a plot of a true posi-
tive rate (TPR) vs a false positive rate (FPR) for
different thresholds. We tuned the regularization
parameters of all classifiers by performing a 10-
fold CV on the training data using a random split.
The other parameters were fixed, and we report the
highest of the macro-averaged F-scores as our fi-
nal F-score. For 10-fold CV, we split the corpora
as recommended by Airola et al. (2008).
</bodyText>
<subsectionHeader confidence="0.97322">
4.2 PPI Extraction on a Single Corpus
</subsectionHeader>
<bodyText confidence="0.999991705882353">
In this section, we evaluate our system on a single
corpus, in order to evaluate our feature vector and
to justify the use of the following modules: nor-
malization methods and classification methods.
First, we compare our preprocessing method
with other preprocessing methods to confirm how
our preprocessing method improves the perfor-
mance. Our method produced 64.2% in F-score
using L2-SVM on AIMed. Scaling all features in-
dividually to have a maximal absolute value of 1,
produced only 44.2% in the F-score, while nor-
malizing the feature vector by L2-norm produced
61.5% in the F-score. Both methods were inferior
to our method, because the values of features in
the same group should be treated together, and be-
cause the values of features in the different groups
should not have a big discrepancy. Weighting each
</bodyText>
<equation confidence="0.902353">
�l s fi + Ct ls+lt� fi, (2)
i=1 i=ls+1
</equation>
<page confidence="0.99128">
125
</page>
<table confidence="0.990681">
L2 L1 LR AP CW
F 64.2 64.0 64.2 62.7 63.0
AUC 89.1 88.8 89.0 88.5 87.8
</table>
<tableCaption confidence="0.998106">
Table 2: Classification performance on AIMed us-
</tableCaption>
<bodyText confidence="0.992463">
ing five different linear classifiers. The F-score (F)
and Area Under the ROC curve (AUC) are shown.
L2 is L2-SVM, L1 is L1-SVM, LR is logistic re-
gression, AP is averaged perceptron, and CW is
confidence weighted linear classification.
group with different values can produce better re-
sults, as will be explored in our future work.
Next, using our feature vector, we applied
five different linear classifiers to extract PPI
from AIMed: L2-SVM, 1-norm soft-margin
SVM (L1-SVM), logistic regression (LR) (Fan
et al., 2008), averaged perceptron (AP) (Collins,
2002), and confidence weighted linear classifica-
tion (CW) (Dredze et al., 2008). Table 2 indicates
the performance of these classifiers on AIMed.
We employed better settings for the task than did
the original methods for AP and CW. We used a
Widrow-Hoff learning rule (Bishop, 1995) for AP,
and we performed one iteration for CW. L2-SVM
is as good as, if not better, than other classifiers (F-
score and AUC). In the least, L2-SVM is as fast as
these classifiers. AP and CW are worse than the
other three methods, because they require a large
number of examples, and are un-suitable for the
current task. This result indicates that all linear
classifiers, with the exception of AP and CW, per-
form almost equally, when using our feature vec-
tor.
Finally, we implemented the kernel method by
Miwa et al. (2008). For a 10-fold CV on AIMed,
the running time was 9,507 seconds, and the per-
formance was 61.5% F-score and 87.1% AUC.
Our system used 4,702 seconds, and the perfor-
mance was 64.2% F-score and 89.1% AUC. This
result displayed that our system, with L2-SVM,
and our new feature vector, is better, and faster,
than the kernel-based system.
</bodyText>
<subsectionHeader confidence="0.999723">
4.3 Evaluation of Corpus Weighting
</subsectionHeader>
<bodyText confidence="0.996716666666667">
In this section, we first apply each model from a
source corpus to a target corpus, to show how dif-
ferent the corpora are. We then evaluate SVM-CW
by comparing it with three other methods (see Sec-
tion 2) with limited features, and apply it to every
corpus.
</bodyText>
<figureCaption confidence="0.5175398">
Figure 8: F-score on a target corpus using a model
on a source corpus. For the comparison, we show
the 10-fold CV result on each target corpus and
co-occurrences. The regularization parameter was
fixed to 1.
</figureCaption>
<bodyText confidence="0.999881714285714">
First, we apply the model from a source corpus
to a target corpus. Figure 8 shows how the model
from a source corpus performs on the target cor-
pus. Interestingly, the model from IEPA performs
better on LLL than the model from LLL itself. All
the results showed that using different corpora (ex-
cept IEPA) is worse than just using the same cor-
pora. However, the cross-corpora scores are still
better than the co-occurrences base-line, which in-
dicates that the corpora share some information,
even though they are not fully compatible.
Next, we compare SVM-CW with three other
methods: aSVM, SVD-ASO, and TrAdaBoost.
For this comparison, we used our feature vec-
tor without including the graph features, because
SVD-ASO and TrAdaBoost require large compu-
tational resources. We applied SVD-ASO and
TrAdaBoost in the following way. As for SVD-
ASO, we made 400 auxiliary problems from the
labels of each corpus by splitting features ran-
domly, and extracted 50 additional features each
for 4 feature groups. In total, we made new 200
additional features from 2,000 auxiliary problems.
As recommended by Ando et al. (2005), we re-
moved negative weights, performed SVD to each
feature group, and iterated ASO once. Since Ad-
aBoost easily overfitted with our rich feature vec-
tor, we applied soft margins (Ratsch et al., 2001)
to TrAdaBoost. The update parameter for source
examples was calculated using the update param-
eter on the training data in AdaBoost and the orig-
inal parameter in TrAdaBoost. This ensures that
the parameter would be the same as the original
parameter, when the C value in the soft margin ap-
proaches infinity.
</bodyText>
<page confidence="0.996212">
126
</page>
<table confidence="0.999252571428571">
aSVM SVD-ASO TrAdaBoost SVM-CW L2-SVM
F AUC F AUC F AUC F AUC F AUC
AIMed 63.6 88.4 62.9 88.3 63.4 88.4 64.0 88.6 63.2 88.4
BioInfer 66.5 85.2 65.7 85.1 66.1 85.2 66.7 85.4 66.2 85.1
HPRD50 71.2 84.3 68.7 80.8 72.6 85.3 72.7 86.4 67.2 80.7
IEPA 73.8 85.4 72.3 83.8 74.3 86.3 75.2 85.9 73.0 84.7
LLL 85.9 89.2 79.3 85.5 86.5 88.8 86.9 90.3 80.3 86.3
</table>
<tableCaption confidence="0.9838065">
Table 3: Comparison of methods on multiple corpora. Our feature vector without graph features is used.
The source corpora with the best F-scores are reported for aSVM, TrAdaBoost, and SVM-CW.
</tableCaption>
<table confidence="0.999121571428572">
A B F-score L all A B AUC L all
H I H I
A (64.2) 64.0 64.7 65.2 63.7 64.2 (89.1) 89.5 89.2 89.3 89.0 89.4
B 67.9 (67.6) 67.9 67.9 67.7 68.3 86.2 (86.1) 86.2 86.3 86.2 86.4
H 71.3 71.2 (69.7) 74.1 70.8 74.9 84.7 85.0 (82.8) 85.0 83.4 87.9
I 74.4 75.6 73.7 (74.4) 74.4 76.6 86.7 87.1 85.4 (85.6) 86.9 87.8
L 83.2 85.9 82.0 86.7 (80.5) 84.1 86.3 87.1 87.4 90.8 (86.0) 86.2
</table>
<tableCaption confidence="0.975688">
Table 4: F-score and AUC by SVM-CW. Rows correspond to a target corpus, and columns a source
</tableCaption>
<bodyText confidence="0.991983561403509">
corpus. A:AIMed, B:BioInfer, H:HPRD50, I:IEPA, and L:LLL corpora. “all” signifies that all source
corpora are used as one source corpus, ignoring the differences among the corpora. For the comparison,
we show the 10-fold CV result on each target corpus.
In Table 3, we demonstrate the results of the
comparison. SVM-CW improved the classifica-
tion performance at least as much as all the other
methods. The improvement is mainly attributed to
the aggressive use of source examples while learn-
ing the model. Some source examples can be used
as training data, as indicated in Figure 8. SVM-
CW does not set the restriction between C3 and
Ct in Equation (2), so it can use source exam-
ples aggressively while learning the model. Since
aSVM transfers a model, and SVD-ASO transfers
an additional feature space, aSVM and SVD-ASO
do not use the source examples while learning the
model. In addition to the difference in the data us-
age, the settings of aSVM and SVD-ASO do not
match the current task. As for aSVM, the DA as-
sumption (that the labels are the same) does not
match the task. In SVD-ASO, the numbers of both
source examples and auxiliary problems are much
smaller than those reported by Ando et al. (2005).
TrAdaBoost uses the source examples while learn-
ing the model, but never increases the weight of
the examples, and it attempts to reduce their ef-
fects.
Finally, we apply SVM-CW to all corpora using
all features. Table 4 summarizes the F-score and
AUC by SVM-CW with all features. SVM-CW
is especially effective for small corpora, show-
ing that SVM-CW can adapt source corpora to a
small annotated target corpus. The improvement
on AIMed is small compared to the improvement
on BioInfer, even though these corpora are sim-
ilar in size. One of the reasons for this is that
whole abstracts are annotated in AIMed, therefore
making the examples biased. The difference be-
tween L2-SVM and SVM-CW + IEPA on AIMed
is small, but statistically, it is significant (McNe-
mar test (McNemar, 1947), P = 0.0081). In the
cases of HPRD50 + IEPA, LLL + IEPA, and two
folds in BioInfer + IEPA, C3 is larger than Ct in
Equation (2). This is worth noting, because the
source corpus is more weighted than the target cor-
pus, and the prediction performance on the tar-
get corpus is improved. Most methods put more
trust in the target corpus than in the source cor-
pus, and our results show that this setting is not al-
ways effective for mixing corpora. The results also
indicate that IEPA contains more useful informa-
tion for extracting PPI than other corpora, and that
using source examples aggressively is important
for these combinations. We compared the results
of L2-SVM and SVM-CW + IEPA on AIMed,
and found that 38 pairs were described as “inter-
action” or “binding” in the sentences among 61
</bodyText>
<page confidence="0.993503">
127
</page>
<table confidence="0.986928">
SVM-CW L2-SVM Airola et al.
F AUC F AUC F AUC
A 65.2 89.3 64.2 89.1 56.4 84.8
B 68.3 86.4 67.6 86.1 61.3 81.9
H 74.9 87.9 69.7 82.8 63.4 79.7
I 76.6 87.8 74.4 85.6 75.1 85.1
L 86.7 90.8 80.5 86.0 76.8 83.4
</table>
<tableCaption confidence="0.997733">
Table 6: Comparison with the results by Airola
</tableCaption>
<bodyText confidence="0.95322337037037">
et al. (2008). A:AIMed, B:BioInfer, H:HPRD50,
I:IEPA, and L:LLL corpora. The results with the
highest F-score from Table 4 are reported as the
results for SVM-CW.
newly found pairs. This analysis is evidence that
IEPA contains instances to help find such inter-
actions, and that SVM-CW helps to collect gold
pairs that lack enough supporting instances in a
single corpus, by adding instances from other cor-
pora. SVM-CW missed coreferential relations that
were also missed by L2-SVM. This can be at-
tributed to the fact that the coreferential informa-
tion is not stored in our current feature vector; so
we need an even more expressive feature space.
This is left as future work.
SVM-CW is effective on most corpus combi-
nations, and all the models from single corpora
can be improved by adding other source corpora.
This result is impressive, because the baselines by
L2-SVM on just single corpora are already better
than or at least comparable to other state-of-the-art
PPI extraction systems, and also because the vari-
ety of the differences among different corpora is
quite wide depending on various factors including
annotation policies of the corpora (Pyysalo et al.,
2008). The results suggest that SVM-CW is useful
as an ITL method.
</bodyText>
<subsectionHeader confidence="0.999888">
4.4 Comparison with Other PPI Systems
</subsectionHeader>
<bodyText confidence="0.99990255">
We compare our system with other previously
published PPI extraction systems. Tables 5 and
6 summarize the comparison. Table 5 summa-
rizes the comparison of several PPI extraction sys-
tems evaluated on the AIMed corpus. As indi-
cated, the performance of the heavy kernel method
is lower than our fast rich feature-vector method.
Our system is, to the extent of our knowledge, the
best performing PPI extraction system evaluated
on the AIMed corpus, both in terms of AUC and
F-scores. Airola et al. (2008) first reported results
using all five corpora. We cannot directly com-
pare our result with the F-score results, because
they tuned the threshold, but our system still out-
performs the system by Airola et al. (2008) on ev-
ery corpus in AUC values. The results also indi-
cate that our system outperforms other systems on
all PPI corpora, and that both the rich feature vec-
tor and the corpus weighting are effective for the
PPI extraction task.
</bodyText>
<sectionHeader confidence="0.998863" genericHeader="conclusions">
5 Conclusion
</sectionHeader>
<bodyText confidence="0.993957390243903">
In this paper, we proposed a PPI extraction system
with a rich feature vector, using a corpus weight-
ing method (SVM-CW) for combining the mul-
tiple PPI corpora. The feature vector extracts as
much information as possible from the main train-
ing corpus, and SVM-CW incorporate other exter-
nal source corpora in order to improve the perfor-
mance of the classifier on the main target corpus.
To the extent of our knowledge, this is the first ap-
plication of ITL and DA methods to PPI extrac-
tion. As a result, the system, with SVM-CW and
the feature vector, outperformed all other PPI ex-
traction systems on all of the corpora. The PPI
corpora share some information, and it is shown
to be effective to add other source corpora when
working with a specific target corpus.
The main contributions of this paper are: 1)
conducting experiments in extracting PPI using
multiple corpora, 2) suggesting a rich feature
vector using several previously proposed features
and normalization methods, 3) the combination of
SVM with corpus weighting and the new feature
vector improved results on this task compared with
prior work.
There are many differences among the corpora
that we used, and some of the differences are still
unresolved. For further improvement, it would be
necessary to investigate what is shared and what
is different among the corpora. The SVM-CW
method, and the PPI extraction system, can be ap-
plied generally to other classification tasks, and
to other binary relation extraction tasks, without
the need for modification. There are several other
tasks in which many different corpora, which at
first glance seem compatible, exist. By apply-
ing SVM-CW to such corpora, we will analyze
which differences can be resolved by SVM-CW,
and what differences require a manual resolution.
For the PPI extraction system, we found many
false negatives that need to be resolved. For fur-
ther improvement, we need to analyze the cause
</bodyText>
<page confidence="0.992122">
128
</page>
<table confidence="0.998208333333333">
positive all P R F AUC
SVM-CW 1,000 5,834 60.0 71.9 65.2 89.3
L2-SVM 1,000 5,834 62.7 66.6 64.2 89.1
(Miwa et al., 2008) 1,005 5,648 60.4 69.3 64.2 (61.5) 87.9 (87.1)
(Miyao et al., 2008) 1,059 5,648 54.9 65.5 59.5
(Airola et al., 2008) 1,000 5,834 52.9 61.8 56.4 84.8
(Sætre et al., 2007) 1,068 5,631 64.3 44.1 52.0
(Erkan et al., 2007) 951 4,020 59.6 60.7 60.0
(Bunescu and Mooney, 2005) 65.0 46.4 54.2
</table>
<tableCaption confidence="0.997469">
Table 5: Comparison with previous PPI extraction results on the AIMed corpus. The numbers of positive
</tableCaption>
<bodyText confidence="0.984194833333333">
and all examples, precision (P), recall (R), F-score (F), and AUC are shown. The result with the highest
F-score from Table 4 is reported as the result for SVM-CW. The scores in the parentheses of Miwa et al.
(2008) indicate the result using the same 10-fold splits as our result, as indicated in Section 4.2.
of these false negatives more deeply, and design a
more discriminative feature space. This is left as a
future direction of our work.
</bodyText>
<sectionHeader confidence="0.998576" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.983322">
This work was partially supported by Grant-in-Aid
for Specially Promoted Research (MEXT, Japan),
Genome Network Project (MEXT, Japan), and
Scientific Research (C) (General) (MEXT, Japan).
</bodyText>
<sectionHeader confidence="0.998023" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999100147540984">
Antti Airola, Sampo Pyysalo, Jari Bj¨orne, Tapio
Pahikkala, Filip Ginter, and Tapio Salakoski. 2008.
All-paths graph kernel for protein-protein interac-
tion extraction with evaluation of cross corpus learn-
ing. BMC Bioinformatics.
Rie Kubota Ando, Tong Zhang, and Peter Bartlett.
2005. A framework for learning predictive struc-
tures from multiple tasks and unlabeled data. Jour-
nal ofMachine Learning Research, 6:1817–1853.
Rie Kubota Ando. 2006. Applying alternating struc-
ture optimization to word sense disambiguation. In
Proceedings of the Tenth Conference on Compu-
tational Natural Language Learning (CoNLL-X),
pages 77–84, June.
C. M. Bishop. 1995. Neural Networks for Pattern
Recognition. Oxford University Press.
Razvan C. Bunescu and Raymond J. Mooney. 2005.
Subsequence kernels for relation extraction. In
NIPS 2005.
Razvan C. Bunescu, Ruifang Ge, Rohit J. Kate, Ed-
ward M. Marcotte, Raymond J. Mooney, Arun K.
Ramani, and Yuk Wah Wong. 2005. Comparative
experiments on learning information extractors for
proteins and their interactions. Artificial Intelligence
in Medicine, 33(2):139–155.
Michael Collins. 2002. Discriminative training meth-
ods for hidden markov models: theory and experi-
ments with perceptron algorithms. In EMNLP 2002,
pages 1–8.
Wenyuan Dai, Qiang Yang, Gui-Rong Xue, and Yong
Yu. 2007. Boosting for transfer learning. In ICML
2007, pages 193–200.
J. Ding, D. Berleant, D. Nettleton, and E. Wurtele.
2002. Mining medline: abstracts, sentences, or
phrases? Pacific Symposium on Biocomputing,
pages 326–337.
Mark Dredze, Koby Crammer, and Fernando Pereira.
2008. Confidence-weighted linear classification. In
ICML 2008, pages 264–271.
Gunes Erkan, Arzucan Ozgur, and Dragomir R. Radev.
2007. Semi-supervised classification for extract-
ing protein interaction sentences using dependency
parsing. In EMNLP 2007.
Rong-En Fan, Kai-Wei Chang, Cho-Jui Hsieh, Xiang-
Rui Wang, and Chih-Jen Lin. 2008. LIBLINEAR:
A library for large linear classification. Journal of
Machine Learning Research, 9:1871–1874.
Katrin Fundel, Robert K¨uffner, and Ralf Zimmer.
2006. Relex—relation extraction using dependency
parse trees. Bioinformatics, 23(3):365–371.
Cho-Jui Hsieh, Kai-Wei Chang, Chih-Jen Lin,
S. Sathiya Keerthi, and S. Sundararajan. 2008. A
dual coordinate descent method for large-scale lin-
ear SVM. In ICML 2008, pages 408–415.
Jin-Dong Kim, Tomoko Ohta, Yuka Tateisi, and
Jun’ichi Tsujii. 2003. GENIA corpus — a semanti-
cally annotated corpus for bio-textmining. Bioinfor-
matics, 19:i180–i182.
Jin-Dong Kim, Tomoko Ohta, and Jun’ichi Tsujii.
2008a. Corpus annotation for mining biomedical
events from literature. BMC Bioinformatics, 9:10.
</reference>
<page confidence="0.983493">
129
</page>
<reference confidence="0.999638189655172">
Seonho Kim, Juntae Yoon, and Jihoon Yang. 2008b.
Kernel approaches for genic interaction extraction.
Bioinformatics, 24(1):118–126.
Suresh Mathivanan, Balamurugan Periaswamy, TKB
Gandhi, Kumaran Kandasamy, Shubha Suresh, Riaz
Mohmood, YL Ramachandra, and Akhilesh Pandey.
2006. An evaluation of human protein-protein inter-
action data in the public domain. BMC Bioinformat-
ics, 7 Suppl 5:S19.
Quinn McNemar. 1947. Note on the sampling error
of the difference between correlated proportions or
percentages. Psychometrika, 12(2):153–157, June.
Makoto Miwa, Rune Sætre, Yusuke Miyao, Tomoko
Ohta, and Jun’ichi Tsujii. 2008. Combining mul-
tiple layers of syntactic information for protein-
protein interaction extraction. In Proceedings of the
Third International Symposium on Semantic Mining
in Biomedicine (SMBM2008), pages 101–108.
Yusuke Miyao, Rune Sætre, Kenji Sagae, Takuya
Matsuzaki, and Jun’ichi Tsujii. 2008. Task-
oriented evaluation of syntactic parsers and their
representations. In Proceedings of the 45th Meet-
ing of the Association for Computational Linguistics
(ACL’08:HLT).
Claire N´edellec. 2005. Learning language in logic -
genic interaction extraction challenge. In Proceed-
ings of the LLL’05 Workshop.
Sinno Jialin Pan and Qiang Yang. 2008. A survey on
transfer learning. Technical Report HKUST-CS08-
08, Department of Computer Science and Engineer-
ing, Hong Kong University of Science and Technol-
ogy, Hong Kong, China, November.
Sampo Pyysalo, Filip Ginter, Juho Heimonen, Jari
Bj¨orne, Jorma Boberg, Jouni J¨arvinen, and Tapio
Salakoski. 2007. BioInfer: A corpus for infor-
mation extraction in the biomedical domain. BMC
Bioinformatics, 8:50.
Sampo Pyysalo, Antti Airola, Juho Heimonen, Jari
Bj¨orne, Filip Ginter, and Tapio Salakoski. 2008.
Comparative analysis of five protein-protein inter-
action corpora. In BMC Bioinformatics, volume
9(Suppl 3), page S6.
Gunnar Ratsch, Takashi Onoda, and Klaus-Robert
Muller. 2001. Soft margins for adaboost. Machine
Learning, 42(3):287–320.
Rune Sætre, Kenji Sagae, and Jun’ichi Tsujii. 2007.
Syntactic features for protein-protein interaction ex-
traction. In LBM 2007 short papers.
Gabriele Schweikert, Christian Widmer, Bernhard
Sch¨olkopf, and Gunnar R¨atsch. 2008. An empir-
ical analysis of domain adaptation algorithms for
genomic sequence analysis. In NIPS, pages 1433–
1440.
Jun Yang, Rong Yan, and Alexander G. Hauptmann.
2007. Cross-domain video concept detection using
adaptive SVMs. In MULTIMEDIA ’07: Proceed-
ings of the 15th international conference on Multi-
media, pages 188–197.
</reference>
<page confidence="0.997609">
130
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.858171">
<title confidence="0.999635">A Rich Feature Vector for Protein-Protein Interaction Extraction</title>
<author confidence="0.919823">Multiple Corpora</author>
<affiliation confidence="0.996676">of Computer Science, the University of Tokyo,</affiliation>
<address confidence="0.979498">Hongo 7-3-1, Bunkyo-ku, Tokyo,</address>
<affiliation confidence="0.993662">of Computer Science, University of Manchester, Center for Text Mining,</affiliation>
<abstract confidence="0.998734133333333">Because of the importance of proteinprotein interaction (PPI) extraction from text, many corpora have been proposed with slightly differing definitions of proteins and PPI. Since no single corpus is large enough to saturate a machine learning system, it is necessary to learn from multiple different corpora. In this paper, we propose a solution to this challenge. We designed a rich feature vector, and we applied a support vector machine modified for corpus weighting (SVM-CW) to complete the task of multiple corpora PPI extraction. The rich feature vector, made from multiple useful kernels, is used to express the important information for PPI extraction, and the system with our feature vector was shown to be both faster and more accurate than the original kernelbased system, even when using just a single corpus. SVM-CW learns from one corpus, while using other corpora for support. SVM-CW is simple, but it is more effective than other methods that have been successfully applied to other NLP tasks earlier. With the feature vector and SVM- CW, our system achieved the best performance among all state-of-the-art PPI extraction systems reported so far.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Antti Airola</author>
<author>Sampo Pyysalo</author>
<author>Jari Bj¨orne</author>
<author>Tapio Pahikkala</author>
<author>Filip Ginter</author>
<author>Tapio Salakoski</author>
</authors>
<title>All-paths graph kernel for protein-protein interaction extraction with evaluation of cross corpus learning.</title>
<date>2008</date>
<journal>BMC Bioinformatics.</journal>
<marker>Airola, Pyysalo, Bj¨orne, Pahikkala, Ginter, Salakoski, 2008</marker>
<rawString>Antti Airola, Sampo Pyysalo, Jari Bj¨orne, Tapio Pahikkala, Filip Ginter, and Tapio Salakoski. 2008. All-paths graph kernel for protein-protein interaction extraction with evaluation of cross corpus learning. BMC Bioinformatics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Rie Kubota Ando</author>
<author>Tong Zhang</author>
<author>Peter Bartlett</author>
</authors>
<title>A framework for learning predictive structures from multiple tasks and unlabeled data.</title>
<date>2005</date>
<journal>Journal ofMachine Learning Research,</journal>
<pages>6--1817</pages>
<contexts>
<context position="6714" citStr="Ando et al., 2005" startWordPosition="1091" endWordPosition="1094"> most frequently used corpus for the PPI extraction task, by a wide margin. To improve the performance using external Figure 1: Overview of our PPI extraction system training data, many ITL and DA methods have been proposed. Most of ITL methods assume that the feature space is same, and that the labels may be different in only some examples, while most of DA methods assume that the labels are the same, and that the feature space is different. Among the methods, we use adaptive SVM (aSVM) (Yang et al., 2007), singular value decomposition (SVD) based alternating structure optimization (SVDASO) (Ando et al., 2005), and transfer AdaBoost (TrAdaBoost) (Dai et al., 2007) to compare with SVM-CW. We do not use semi-supervised learning (SSL) methods, because it would be considerably costly to generate enough clean unlabeled data needed for SSL (Erkan et al., 2007). aSVM is seen as a promising DA method among several modifications of SVM including SVM-CW. aSVM tries to find a model that is close to the one made from other classification problems. SVDASO is one of the most successful SSL, DA, or multi-task learning methods in NLP. The method tries to find an additional useful feature space by solving auxiliary</context>
<context position="21867" citStr="Ando et al. (2005)" startWordPosition="3709" endWordPosition="3712"> though they are not fully compatible. Next, we compare SVM-CW with three other methods: aSVM, SVD-ASO, and TrAdaBoost. For this comparison, we used our feature vector without including the graph features, because SVD-ASO and TrAdaBoost require large computational resources. We applied SVD-ASO and TrAdaBoost in the following way. As for SVDASO, we made 400 auxiliary problems from the labels of each corpus by splitting features randomly, and extracted 50 additional features each for 4 feature groups. In total, we made new 200 additional features from 2,000 auxiliary problems. As recommended by Ando et al. (2005), we removed negative weights, performed SVD to each feature group, and iterated ASO once. Since AdaBoost easily overfitted with our rich feature vector, we applied soft margins (Ratsch et al., 2001) to TrAdaBoost. The update parameter for source examples was calculated using the update parameter on the training data in AdaBoost and the original parameter in TrAdaBoost. This ensures that the parameter would be the same as the original parameter, when the C value in the soft margin approaches infinity. 126 aSVM SVD-ASO TrAdaBoost SVM-CW L2-SVM F AUC F AUC F AUC F AUC F AUC AIMed 63.6 88.4 62.9 </context>
<context position="24588" citStr="Ando et al. (2005)" startWordPosition="4200" endWordPosition="4203"> does not set the restriction between C3 and Ct in Equation (2), so it can use source examples aggressively while learning the model. Since aSVM transfers a model, and SVD-ASO transfers an additional feature space, aSVM and SVD-ASO do not use the source examples while learning the model. In addition to the difference in the data usage, the settings of aSVM and SVD-ASO do not match the current task. As for aSVM, the DA assumption (that the labels are the same) does not match the task. In SVD-ASO, the numbers of both source examples and auxiliary problems are much smaller than those reported by Ando et al. (2005). TrAdaBoost uses the source examples while learning the model, but never increases the weight of the examples, and it attempts to reduce their effects. Finally, we apply SVM-CW to all corpora using all features. Table 4 summarizes the F-score and AUC by SVM-CW with all features. SVM-CW is especially effective for small corpora, showing that SVM-CW can adapt source corpora to a small annotated target corpus. The improvement on AIMed is small compared to the improvement on BioInfer, even though these corpora are similar in size. One of the reasons for this is that whole abstracts are annotated </context>
</contexts>
<marker>Ando, Zhang, Bartlett, 2005</marker>
<rawString>Rie Kubota Ando, Tong Zhang, and Peter Bartlett. 2005. A framework for learning predictive structures from multiple tasks and unlabeled data. Journal ofMachine Learning Research, 6:1817–1853.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Rie Kubota Ando</author>
</authors>
<title>Applying alternating structure optimization to word sense disambiguation.</title>
<date>2006</date>
<booktitle>In Proceedings of the Tenth Conference on Computational Natural Language Learning (CoNLL-X),</booktitle>
<pages>77--84</pages>
<contexts>
<context position="7510" citStr="Ando, 2006" startWordPosition="1228" endWordPosition="1229"> enough clean unlabeled data needed for SSL (Erkan et al., 2007). aSVM is seen as a promising DA method among several modifications of SVM including SVM-CW. aSVM tries to find a model that is close to the one made from other classification problems. SVDASO is one of the most successful SSL, DA, or multi-task learning methods in NLP. The method tries to find an additional useful feature space by solving auxiliary problems that are close to the target problem. With well-designed auxiliary problems, the method has been applied to text classification, text chunking, and word sense disambiguation (Ando, 2006). The method was reported to perform better than or comparable to the best state-of-the-art systems in all of these tasks. TrAdaBoost was proposed as an ITL method. In training, the method reduces the effect of incompatible examples by decreasing their weights, and thereby tries to use useful examples from source corpora. The method has been applied to text classification, and the reported performance was better than SVM and transductive SVM (Dai et al., 2007). 3 PPI Extraction System The target task of our system is a sentence-based, pair-wise PPI extraction. It is formulated as a classificat</context>
</contexts>
<marker>Ando, 2006</marker>
<rawString>Rie Kubota Ando. 2006. Applying alternating structure optimization to word sense disambiguation. In Proceedings of the Tenth Conference on Computational Natural Language Learning (CoNLL-X), pages 77–84, June.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C M Bishop</author>
</authors>
<title>Neural Networks for Pattern Recognition.</title>
<date>1995</date>
<publisher>Oxford University Press.</publisher>
<contexts>
<context position="19397" citStr="Bishop, 1995" startWordPosition="3286" endWordPosition="3287">fication. group with different values can produce better results, as will be explored in our future work. Next, using our feature vector, we applied five different linear classifiers to extract PPI from AIMed: L2-SVM, 1-norm soft-margin SVM (L1-SVM), logistic regression (LR) (Fan et al., 2008), averaged perceptron (AP) (Collins, 2002), and confidence weighted linear classification (CW) (Dredze et al., 2008). Table 2 indicates the performance of these classifiers on AIMed. We employed better settings for the task than did the original methods for AP and CW. We used a Widrow-Hoff learning rule (Bishop, 1995) for AP, and we performed one iteration for CW. L2-SVM is as good as, if not better, than other classifiers (Fscore and AUC). In the least, L2-SVM is as fast as these classifiers. AP and CW are worse than the other three methods, because they require a large number of examples, and are un-suitable for the current task. This result indicates that all linear classifiers, with the exception of AP and CW, perform almost equally, when using our feature vector. Finally, we implemented the kernel method by Miwa et al. (2008). For a 10-fold CV on AIMed, the running time was 9,507 seconds, and the perf</context>
</contexts>
<marker>Bishop, 1995</marker>
<rawString>C. M. Bishop. 1995. Neural Networks for Pattern Recognition. Oxford University Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Razvan C Bunescu</author>
<author>Raymond J Mooney</author>
</authors>
<title>Subsequence kernels for relation extraction.</title>
<date>2005</date>
<booktitle>In NIPS</booktitle>
<contexts>
<context position="30955" citStr="Bunescu and Mooney, 2005" startWordPosition="5294" endWordPosition="5297">h differences can be resolved by SVM-CW, and what differences require a manual resolution. For the PPI extraction system, we found many false negatives that need to be resolved. For further improvement, we need to analyze the cause 128 positive all P R F AUC SVM-CW 1,000 5,834 60.0 71.9 65.2 89.3 L2-SVM 1,000 5,834 62.7 66.6 64.2 89.1 (Miwa et al., 2008) 1,005 5,648 60.4 69.3 64.2 (61.5) 87.9 (87.1) (Miyao et al., 2008) 1,059 5,648 54.9 65.5 59.5 (Airola et al., 2008) 1,000 5,834 52.9 61.8 56.4 84.8 (Sætre et al., 2007) 1,068 5,631 64.3 44.1 52.0 (Erkan et al., 2007) 951 4,020 59.6 60.7 60.0 (Bunescu and Mooney, 2005) 65.0 46.4 54.2 Table 5: Comparison with previous PPI extraction results on the AIMed corpus. The numbers of positive and all examples, precision (P), recall (R), F-score (F), and AUC are shown. The result with the highest F-score from Table 4 is reported as the result for SVM-CW. The scores in the parentheses of Miwa et al. (2008) indicate the result using the same 10-fold splits as our result, as indicated in Section 4.2. of these false negatives more deeply, and design a more discriminative feature space. This is left as a future direction of our work. Acknowledgments This work was partiall</context>
</contexts>
<marker>Bunescu, Mooney, 2005</marker>
<rawString>Razvan C. Bunescu and Raymond J. Mooney. 2005. Subsequence kernels for relation extraction. In NIPS 2005.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Razvan C Bunescu</author>
<author>Ruifang Ge</author>
<author>Rohit J Kate</author>
<author>Edward M Marcotte</author>
<author>Raymond J Mooney</author>
<author>Arun K Ramani</author>
<author>Yuk Wah Wong</author>
</authors>
<title>Comparative experiments on learning information extractors for proteins and their interactions.</title>
<date>2005</date>
<journal>Artificial Intelligence in Medicine,</journal>
<volume>33</volume>
<issue>2</issue>
<contexts>
<context position="2978" citStr="Bunescu et al., 2005" startWordPosition="470" endWordPosition="473">t. While PPIs play a critical role in understanding the working of cells in diverse biological contexts, the manual construction of PPI databases such as BIND, DIP, HPRD, IntAct, and MINT (Mathivanan et al., 2006) is known to be very time-consuming and labor-intensive. The automatic extraction of PPI from published papers has therefore been a major research topic in Natural Language Processing for Biology (BioNLP). Among several PPI extraction task settings, the most common is sentence-based, pair-wise PPI extraction. At least four annotated corpora have been provided for this setting: AIMed (Bunescu et al., 2005), HPRD50 (Fundel et al., 2006), IEPA (Ding et al., 2002), and LLL (N´edellec, 2005). Each of these corpora have been used as the standard corpus for training and testing PPI programs. Moreover, several corpora are annotated for more types of events than just for PPI. Such examples include BioInfer (Pyysalo et al., 2007), and GENIA (Kim et al., 2008a), and they can be reorganized into PPI corpora. Even though all of these corpora were made for PPI extraction, they were constructed based on different definitions of proteins and PPI, which reflect different biological research interests (Pyysalo </context>
<context position="5734" citStr="Bunescu et al., 2005" startWordPosition="926" endWordPosition="929">rove the performance of the system more effectively and more efficiently than other methods proven to be successful in other NLP tasks earlier. As a result, SVM-CW with our feature vector is comprised of a PPI system with five different models, of which each model is superior to the best model in the original PPI extraction task, which used only the single corpus. 2 Related Works While sentence-based, pair-wise PPI extraction was initially tackled by using simple methods based on co-occurrences, lately, more sophisticated machine learning systems augmented by NLP techniques have been applied (Bunescu et al., 2005). The task has been tackled as a classification problem. To pull out useful information from NLP tools including taggers and parsers, several kernels have been applied to calculate the similarity between PPI pairs. Miwa et al. (2008) recently proposed the use of multiple kernels using multiple parsers. This outperformed other systems on the AIMed, which is the most frequently used corpus for the PPI extraction task, by a wide margin. To improve the performance using external Figure 1: Overview of our PPI extraction system training data, many ITL and DA methods have been proposed. Most of ITL m</context>
</contexts>
<marker>Bunescu, Ge, Kate, Marcotte, Mooney, Ramani, Wong, 2005</marker>
<rawString>Razvan C. Bunescu, Ruifang Ge, Rohit J. Kate, Edward M. Marcotte, Raymond J. Mooney, Arun K. Ramani, and Yuk Wah Wong. 2005. Comparative experiments on learning information extractors for proteins and their interactions. Artificial Intelligence in Medicine, 33(2):139–155.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael Collins</author>
</authors>
<title>Discriminative training methods for hidden markov models: theory and experiments with perceptron algorithms.</title>
<date>2002</date>
<booktitle>In EMNLP</booktitle>
<pages>1--8</pages>
<contexts>
<context position="19120" citStr="Collins, 2002" startWordPosition="3241" endWordPosition="3242">87.8 Table 2: Classification performance on AIMed using five different linear classifiers. The F-score (F) and Area Under the ROC curve (AUC) are shown. L2 is L2-SVM, L1 is L1-SVM, LR is logistic regression, AP is averaged perceptron, and CW is confidence weighted linear classification. group with different values can produce better results, as will be explored in our future work. Next, using our feature vector, we applied five different linear classifiers to extract PPI from AIMed: L2-SVM, 1-norm soft-margin SVM (L1-SVM), logistic regression (LR) (Fan et al., 2008), averaged perceptron (AP) (Collins, 2002), and confidence weighted linear classification (CW) (Dredze et al., 2008). Table 2 indicates the performance of these classifiers on AIMed. We employed better settings for the task than did the original methods for AP and CW. We used a Widrow-Hoff learning rule (Bishop, 1995) for AP, and we performed one iteration for CW. L2-SVM is as good as, if not better, than other classifiers (Fscore and AUC). In the least, L2-SVM is as fast as these classifiers. AP and CW are worse than the other three methods, because they require a large number of examples, and are un-suitable for the current task. Th</context>
</contexts>
<marker>Collins, 2002</marker>
<rawString>Michael Collins. 2002. Discriminative training methods for hidden markov models: theory and experiments with perceptron algorithms. In EMNLP 2002, pages 1–8.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Wenyuan Dai</author>
<author>Qiang Yang</author>
<author>Gui-Rong Xue</author>
<author>Yong Yu</author>
</authors>
<title>Boosting for transfer learning.</title>
<date>2007</date>
<booktitle>In ICML</booktitle>
<pages>193--200</pages>
<contexts>
<context position="6769" citStr="Dai et al., 2007" startWordPosition="1099" endWordPosition="1102">, by a wide margin. To improve the performance using external Figure 1: Overview of our PPI extraction system training data, many ITL and DA methods have been proposed. Most of ITL methods assume that the feature space is same, and that the labels may be different in only some examples, while most of DA methods assume that the labels are the same, and that the feature space is different. Among the methods, we use adaptive SVM (aSVM) (Yang et al., 2007), singular value decomposition (SVD) based alternating structure optimization (SVDASO) (Ando et al., 2005), and transfer AdaBoost (TrAdaBoost) (Dai et al., 2007) to compare with SVM-CW. We do not use semi-supervised learning (SSL) methods, because it would be considerably costly to generate enough clean unlabeled data needed for SSL (Erkan et al., 2007). aSVM is seen as a promising DA method among several modifications of SVM including SVM-CW. aSVM tries to find a model that is close to the one made from other classification problems. SVDASO is one of the most successful SSL, DA, or multi-task learning methods in NLP. The method tries to find an additional useful feature space by solving auxiliary problems that are close to the target problem. With we</context>
</contexts>
<marker>Dai, Yang, Xue, Yu, 2007</marker>
<rawString>Wenyuan Dai, Qiang Yang, Gui-Rong Xue, and Yong Yu. 2007. Boosting for transfer learning. In ICML 2007, pages 193–200.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Ding</author>
<author>D Berleant</author>
<author>D Nettleton</author>
<author>E Wurtele</author>
</authors>
<title>Mining medline: abstracts, sentences, or phrases? Pacific Symposium on Biocomputing,</title>
<date>2002</date>
<pages>326--337</pages>
<contexts>
<context position="3034" citStr="Ding et al., 2002" startWordPosition="480" endWordPosition="483">king of cells in diverse biological contexts, the manual construction of PPI databases such as BIND, DIP, HPRD, IntAct, and MINT (Mathivanan et al., 2006) is known to be very time-consuming and labor-intensive. The automatic extraction of PPI from published papers has therefore been a major research topic in Natural Language Processing for Biology (BioNLP). Among several PPI extraction task settings, the most common is sentence-based, pair-wise PPI extraction. At least four annotated corpora have been provided for this setting: AIMed (Bunescu et al., 2005), HPRD50 (Fundel et al., 2006), IEPA (Ding et al., 2002), and LLL (N´edellec, 2005). Each of these corpora have been used as the standard corpus for training and testing PPI programs. Moreover, several corpora are annotated for more types of events than just for PPI. Such examples include BioInfer (Pyysalo et al., 2007), and GENIA (Kim et al., 2008a), and they can be reorganized into PPI corpora. Even though all of these corpora were made for PPI extraction, they were constructed based on different definitions of proteins and PPI, which reflect different biological research interests (Pyysalo et al., 2008). Research on PPI extraction so far has rev</context>
</contexts>
<marker>Ding, Berleant, Nettleton, Wurtele, 2002</marker>
<rawString>J. Ding, D. Berleant, D. Nettleton, and E. Wurtele. 2002. Mining medline: abstracts, sentences, or phrases? Pacific Symposium on Biocomputing, pages 326–337.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mark Dredze</author>
<author>Koby Crammer</author>
<author>Fernando Pereira</author>
</authors>
<title>Confidence-weighted linear classification.</title>
<date>2008</date>
<booktitle>In ICML</booktitle>
<pages>264--271</pages>
<contexts>
<context position="19194" citStr="Dredze et al., 2008" startWordPosition="3250" endWordPosition="3253">nt linear classifiers. The F-score (F) and Area Under the ROC curve (AUC) are shown. L2 is L2-SVM, L1 is L1-SVM, LR is logistic regression, AP is averaged perceptron, and CW is confidence weighted linear classification. group with different values can produce better results, as will be explored in our future work. Next, using our feature vector, we applied five different linear classifiers to extract PPI from AIMed: L2-SVM, 1-norm soft-margin SVM (L1-SVM), logistic regression (LR) (Fan et al., 2008), averaged perceptron (AP) (Collins, 2002), and confidence weighted linear classification (CW) (Dredze et al., 2008). Table 2 indicates the performance of these classifiers on AIMed. We employed better settings for the task than did the original methods for AP and CW. We used a Widrow-Hoff learning rule (Bishop, 1995) for AP, and we performed one iteration for CW. L2-SVM is as good as, if not better, than other classifiers (Fscore and AUC). In the least, L2-SVM is as fast as these classifiers. AP and CW are worse than the other three methods, because they require a large number of examples, and are un-suitable for the current task. This result indicates that all linear classifiers, with the exception of AP </context>
</contexts>
<marker>Dredze, Crammer, Pereira, 2008</marker>
<rawString>Mark Dredze, Koby Crammer, and Fernando Pereira. 2008. Confidence-weighted linear classification. In ICML 2008, pages 264–271.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Gunes Erkan</author>
<author>Arzucan Ozgur</author>
<author>Dragomir R Radev</author>
</authors>
<title>Semi-supervised classification for extracting protein interaction sentences using dependency parsing.</title>
<date>2007</date>
<booktitle>In EMNLP</booktitle>
<contexts>
<context position="6963" citStr="Erkan et al., 2007" startWordPosition="1132" endWordPosition="1135">ume that the feature space is same, and that the labels may be different in only some examples, while most of DA methods assume that the labels are the same, and that the feature space is different. Among the methods, we use adaptive SVM (aSVM) (Yang et al., 2007), singular value decomposition (SVD) based alternating structure optimization (SVDASO) (Ando et al., 2005), and transfer AdaBoost (TrAdaBoost) (Dai et al., 2007) to compare with SVM-CW. We do not use semi-supervised learning (SSL) methods, because it would be considerably costly to generate enough clean unlabeled data needed for SSL (Erkan et al., 2007). aSVM is seen as a promising DA method among several modifications of SVM including SVM-CW. aSVM tries to find a model that is close to the one made from other classification problems. SVDASO is one of the most successful SSL, DA, or multi-task learning methods in NLP. The method tries to find an additional useful feature space by solving auxiliary problems that are close to the target problem. With well-designed auxiliary problems, the method has been applied to text classification, text chunking, and word sense disambiguation (Ando, 2006). The method was reported to perform better than or c</context>
<context position="30903" citStr="Erkan et al., 2007" startWordPosition="5285" endWordPosition="5288">g SVM-CW to such corpora, we will analyze which differences can be resolved by SVM-CW, and what differences require a manual resolution. For the PPI extraction system, we found many false negatives that need to be resolved. For further improvement, we need to analyze the cause 128 positive all P R F AUC SVM-CW 1,000 5,834 60.0 71.9 65.2 89.3 L2-SVM 1,000 5,834 62.7 66.6 64.2 89.1 (Miwa et al., 2008) 1,005 5,648 60.4 69.3 64.2 (61.5) 87.9 (87.1) (Miyao et al., 2008) 1,059 5,648 54.9 65.5 59.5 (Airola et al., 2008) 1,000 5,834 52.9 61.8 56.4 84.8 (Sætre et al., 2007) 1,068 5,631 64.3 44.1 52.0 (Erkan et al., 2007) 951 4,020 59.6 60.7 60.0 (Bunescu and Mooney, 2005) 65.0 46.4 54.2 Table 5: Comparison with previous PPI extraction results on the AIMed corpus. The numbers of positive and all examples, precision (P), recall (R), F-score (F), and AUC are shown. The result with the highest F-score from Table 4 is reported as the result for SVM-CW. The scores in the parentheses of Miwa et al. (2008) indicate the result using the same 10-fold splits as our result, as indicated in Section 4.2. of these false negatives more deeply, and design a more discriminative feature space. This is left as a future direction</context>
</contexts>
<marker>Erkan, Ozgur, Radev, 2007</marker>
<rawString>Gunes Erkan, Arzucan Ozgur, and Dragomir R. Radev. 2007. Semi-supervised classification for extracting protein interaction sentences using dependency parsing. In EMNLP 2007.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Rong-En Fan</author>
<author>Kai-Wei Chang</author>
<author>Cho-Jui Hsieh</author>
<author>XiangRui Wang</author>
<author>Chih-Jen Lin</author>
</authors>
<title>LIBLINEAR: A library for large linear classification.</title>
<date>2008</date>
<journal>Journal of Machine Learning Research,</journal>
<pages>9--1871</pages>
<contexts>
<context position="19078" citStr="Fan et al., 2008" startWordPosition="3234" endWordPosition="3237"> 64.0 64.2 62.7 63.0 AUC 89.1 88.8 89.0 88.5 87.8 Table 2: Classification performance on AIMed using five different linear classifiers. The F-score (F) and Area Under the ROC curve (AUC) are shown. L2 is L2-SVM, L1 is L1-SVM, LR is logistic regression, AP is averaged perceptron, and CW is confidence weighted linear classification. group with different values can produce better results, as will be explored in our future work. Next, using our feature vector, we applied five different linear classifiers to extract PPI from AIMed: L2-SVM, 1-norm soft-margin SVM (L1-SVM), logistic regression (LR) (Fan et al., 2008), averaged perceptron (AP) (Collins, 2002), and confidence weighted linear classification (CW) (Dredze et al., 2008). Table 2 indicates the performance of these classifiers on AIMed. We employed better settings for the task than did the original methods for AP and CW. We used a Widrow-Hoff learning rule (Bishop, 1995) for AP, and we performed one iteration for CW. L2-SVM is as good as, if not better, than other classifiers (Fscore and AUC). In the least, L2-SVM is as fast as these classifiers. AP and CW are worse than the other three methods, because they require a large number of examples, an</context>
</contexts>
<marker>Fan, Chang, Hsieh, Wang, Lin, 2008</marker>
<rawString>Rong-En Fan, Kai-Wei Chang, Cho-Jui Hsieh, XiangRui Wang, and Chih-Jen Lin. 2008. LIBLINEAR: A library for large linear classification. Journal of Machine Learning Research, 9:1871–1874.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Katrin Fundel</author>
<author>Robert K¨uffner</author>
<author>Ralf Zimmer</author>
</authors>
<title>Relex—relation extraction using dependency parse trees.</title>
<date>2006</date>
<journal>Bioinformatics,</journal>
<volume>23</volume>
<issue>3</issue>
<marker>Fundel, K¨uffner, Zimmer, 2006</marker>
<rawString>Katrin Fundel, Robert K¨uffner, and Ralf Zimmer. 2006. Relex—relation extraction using dependency parse trees. Bioinformatics, 23(3):365–371.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Cho-Jui Hsieh</author>
<author>Kai-Wei Chang</author>
<author>Chih-Jen Lin</author>
<author>S Sathiya Keerthi</author>
<author>S Sundararajan</author>
</authors>
<title>A dual coordinate descent method for large-scale linear SVM. In ICML</title>
<date>2008</date>
<pages>408--415</pages>
<contexts>
<context position="9041" citStr="Hsieh et al. (2008)" startWordPosition="1488" endWordPosition="1491">PMID 8652557, 9th sentence, 3rd pair) Figure 4: Bag-of-Words features of the pair in Figure 2 with their positions (B:Before, M:in the Middle of, A:After) and frequencies. Figure 3: Extraction of a feature vector from the target sentence of proteins in a sentence is interacting or not. Figure 2 shows an example of a sentence in which the given pair (p1 and p2) actually interacts. Figure 1 shows the overview of the proposed PPI extraction system. As a classifier using a single corpus, we use the 2-norm soft-margin linear SVM (L2-SVM) classifier, with the dual coordinate decent (DCD) method, by Hsieh et al. (2008). In this section, we explain the two main features: the feature vector, and the corpus weighting method for multiple corpora. 3.1 Feature Vector We propose a feature vector with three types of features, corresponding to the three different kernels, which were each combined with the two parsers: the Enju 2.3.0, and KSDEP beta 1(Miyao et al., 2008); this feature vector is used because the kernels with these parsers were shown to be effective for PPI extraction by Miwa et al. (2008), and because it is important to start from a good performance single corpus system. Both parsers were retrained us</context>
</contexts>
<marker>Hsieh, Chang, Lin, Keerthi, Sundararajan, 2008</marker>
<rawString>Cho-Jui Hsieh, Kai-Wei Chang, Chih-Jen Lin, S. Sathiya Keerthi, and S. Sundararajan. 2008. A dual coordinate descent method for large-scale linear SVM. In ICML 2008, pages 408–415.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jin-Dong Kim</author>
<author>Tomoko Ohta</author>
<author>Yuka Tateisi</author>
<author>Jun’ichi Tsujii</author>
</authors>
<title>GENIA corpus — a semantically annotated corpus for bio-textmining. Bioinformatics,</title>
<date>2003</date>
<contexts>
<context position="9700" citStr="Kim et al. (2003)" startWordPosition="1603" endWordPosition="1606"> features: the feature vector, and the corpus weighting method for multiple corpora. 3.1 Feature Vector We propose a feature vector with three types of features, corresponding to the three different kernels, which were each combined with the two parsers: the Enju 2.3.0, and KSDEP beta 1(Miyao et al., 2008); this feature vector is used because the kernels with these parsers were shown to be effective for PPI extraction by Miwa et al. (2008), and because it is important to start from a good performance single corpus system. Both parsers were retrained using the GENIA Treebank corpus provided by Kim et al. (2003). By using our linear feature vector, we can perform calculations faster by using fast linear classifiers like L2-SVM, and we also obtain a more accurate extraction, than by using the original kernel method. Figure 3 summarizes the way in which the feature vector is constructed. The system extracts Bag-of-Words (BOW), shortest path (SP), and graph features from the output of two parsers. The Figure 5: Vertex walks, edge walks in the upper shortest path between the proteins in the parse tree by KSDEP. The walks and their subsets are used as the shortest path features of the pair in Figure 2. ou</context>
</contexts>
<marker>Kim, Ohta, Tateisi, Tsujii, 2003</marker>
<rawString>Jin-Dong Kim, Tomoko Ohta, Yuka Tateisi, and Jun’ichi Tsujii. 2003. GENIA corpus — a semantically annotated corpus for bio-textmining. Bioinformatics, 19:i180–i182.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jin-Dong Kim</author>
<author>Tomoko Ohta</author>
<author>Jun’ichi Tsujii</author>
</authors>
<title>Corpus annotation for mining biomedical events from literature.</title>
<date>2008</date>
<journal>BMC Bioinformatics,</journal>
<pages>9--10</pages>
<contexts>
<context position="3328" citStr="Kim et al., 2008" startWordPosition="531" endWordPosition="534">arch topic in Natural Language Processing for Biology (BioNLP). Among several PPI extraction task settings, the most common is sentence-based, pair-wise PPI extraction. At least four annotated corpora have been provided for this setting: AIMed (Bunescu et al., 2005), HPRD50 (Fundel et al., 2006), IEPA (Ding et al., 2002), and LLL (N´edellec, 2005). Each of these corpora have been used as the standard corpus for training and testing PPI programs. Moreover, several corpora are annotated for more types of events than just for PPI. Such examples include BioInfer (Pyysalo et al., 2007), and GENIA (Kim et al., 2008a), and they can be reorganized into PPI corpora. Even though all of these corpora were made for PPI extraction, they were constructed based on different definitions of proteins and PPI, which reflect different biological research interests (Pyysalo et al., 2008). Research on PPI extraction so far has revealed that the performance on each of the corpora could 121 Proceedings of the 2009 Conference on Empirical Methods in Natural Language Processing, pages 121–130, Singapore, 6-7 August 2009. c�2009 ACL and AFNLP benefit from additional examples (Airola et al., 2008). Learning from multiple ann</context>
<context position="11151" citStr="Kim et al., 2008" startWordPosition="1849" endWordPosition="1852">ed by the L2- norm. The features are constructed by using predicate argument structures (PAS) from Enju, and by using the dependency trees from KSDEP. 3.1.1 Bag-of-Words (BOW) Features The BOW feature includes the lemma form of a word, its relative position to the target pair of proteins (Before, Middle, After), and its frequency in the target sentence. BOW features form the BOW kernel in the original kernel method. BOW features for the pair in Figure 2 are shown in Figure 4. 3.1.2 Shortest Path (SP) Features SP features include vertex walks (v-walks), edge walks (e-walks), and their subsets (Kim et al., 2008b) on the target pair in a parse structure, and represent the connection between the pair. The features are the subsets of the tree kernels on the shortest path (Sartre et al., 2007). Figure 5 illustrates the shortest path between the pair in Figure 2, and its v-walks and e-walks extracted from the shortest path in the parse tree by KSDEP. A v-walk includes two lemmas and their link, while 1The vector normalized by the L2-norm is also called a unit vector. 123 an e-walk includes a lemma and its two links. The links indicates the predicate argument relations for PAS, and the dependencies for de</context>
</contexts>
<marker>Kim, Ohta, Tsujii, 2008</marker>
<rawString>Jin-Dong Kim, Tomoko Ohta, and Jun’ichi Tsujii. 2008a. Corpus annotation for mining biomedical events from literature. BMC Bioinformatics, 9:10.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Seonho Kim</author>
<author>Juntae Yoon</author>
<author>Jihoon Yang</author>
</authors>
<title>Kernel approaches for genic interaction extraction.</title>
<date>2008</date>
<journal>Bioinformatics,</journal>
<volume>24</volume>
<issue>1</issue>
<contexts>
<context position="3328" citStr="Kim et al., 2008" startWordPosition="531" endWordPosition="534">arch topic in Natural Language Processing for Biology (BioNLP). Among several PPI extraction task settings, the most common is sentence-based, pair-wise PPI extraction. At least four annotated corpora have been provided for this setting: AIMed (Bunescu et al., 2005), HPRD50 (Fundel et al., 2006), IEPA (Ding et al., 2002), and LLL (N´edellec, 2005). Each of these corpora have been used as the standard corpus for training and testing PPI programs. Moreover, several corpora are annotated for more types of events than just for PPI. Such examples include BioInfer (Pyysalo et al., 2007), and GENIA (Kim et al., 2008a), and they can be reorganized into PPI corpora. Even though all of these corpora were made for PPI extraction, they were constructed based on different definitions of proteins and PPI, which reflect different biological research interests (Pyysalo et al., 2008). Research on PPI extraction so far has revealed that the performance on each of the corpora could 121 Proceedings of the 2009 Conference on Empirical Methods in Natural Language Processing, pages 121–130, Singapore, 6-7 August 2009. c�2009 ACL and AFNLP benefit from additional examples (Airola et al., 2008). Learning from multiple ann</context>
<context position="11151" citStr="Kim et al., 2008" startWordPosition="1849" endWordPosition="1852">ed by the L2- norm. The features are constructed by using predicate argument structures (PAS) from Enju, and by using the dependency trees from KSDEP. 3.1.1 Bag-of-Words (BOW) Features The BOW feature includes the lemma form of a word, its relative position to the target pair of proteins (Before, Middle, After), and its frequency in the target sentence. BOW features form the BOW kernel in the original kernel method. BOW features for the pair in Figure 2 are shown in Figure 4. 3.1.2 Shortest Path (SP) Features SP features include vertex walks (v-walks), edge walks (e-walks), and their subsets (Kim et al., 2008b) on the target pair in a parse structure, and represent the connection between the pair. The features are the subsets of the tree kernels on the shortest path (Sartre et al., 2007). Figure 5 illustrates the shortest path between the pair in Figure 2, and its v-walks and e-walks extracted from the shortest path in the parse tree by KSDEP. A v-walk includes two lemmas and their link, while 1The vector normalized by the L2-norm is also called a unit vector. 123 an e-walk includes a lemma and its two links. The links indicates the predicate argument relations for PAS, and the dependencies for de</context>
</contexts>
<marker>Kim, Yoon, Yang, 2008</marker>
<rawString>Seonho Kim, Juntae Yoon, and Jihoon Yang. 2008b. Kernel approaches for genic interaction extraction. Bioinformatics, 24(1):118–126.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Suresh Mathivanan</author>
<author>Balamurugan Periaswamy</author>
<author>TKB Gandhi</author>
<author>Kumaran Kandasamy</author>
<author>Shubha Suresh</author>
<author>Riaz Mohmood</author>
<author>YL Ramachandra</author>
<author>Akhilesh Pandey</author>
</authors>
<title>An evaluation of human protein-protein interaction data in the public domain.</title>
<date>2006</date>
<journal>BMC Bioinformatics,</journal>
<volume>7</volume>
<note>Suppl 5:S19.</note>
<contexts>
<context position="2570" citStr="Mathivanan et al., 2006" startWordPosition="407" endWordPosition="410">nformation by two groups, the performance of a program trained by one corpus is unlikely to be reproduced in the other corpus. On the other hand, from a practical point of view, it is worth while to effectively use multiple existing annotated corpora together, because it is very costly to make new annotations. One problem with several different corpora is protein-protein interaction (PPI) extraction from text. While PPIs play a critical role in understanding the working of cells in diverse biological contexts, the manual construction of PPI databases such as BIND, DIP, HPRD, IntAct, and MINT (Mathivanan et al., 2006) is known to be very time-consuming and labor-intensive. The automatic extraction of PPI from published papers has therefore been a major research topic in Natural Language Processing for Biology (BioNLP). Among several PPI extraction task settings, the most common is sentence-based, pair-wise PPI extraction. At least four annotated corpora have been provided for this setting: AIMed (Bunescu et al., 2005), HPRD50 (Fundel et al., 2006), IEPA (Ding et al., 2002), and LLL (N´edellec, 2005). Each of these corpora have been used as the standard corpus for training and testing PPI programs. Moreover</context>
</contexts>
<marker>Mathivanan, Periaswamy, Gandhi, Kandasamy, Suresh, Mohmood, Ramachandra, Pandey, 2006</marker>
<rawString>Suresh Mathivanan, Balamurugan Periaswamy, TKB Gandhi, Kumaran Kandasamy, Shubha Suresh, Riaz Mohmood, YL Ramachandra, and Akhilesh Pandey. 2006. An evaluation of human protein-protein interaction data in the public domain. BMC Bioinformatics, 7 Suppl 5:S19.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Quinn McNemar</author>
</authors>
<title>Note on the sampling error of the difference between correlated proportions or percentages.</title>
<date>1947</date>
<journal>Psychometrika,</journal>
<volume>12</volume>
<issue>2</issue>
<contexts>
<context position="25369" citStr="McNemar, 1947" startWordPosition="4334" endWordPosition="4335">ply SVM-CW to all corpora using all features. Table 4 summarizes the F-score and AUC by SVM-CW with all features. SVM-CW is especially effective for small corpora, showing that SVM-CW can adapt source corpora to a small annotated target corpus. The improvement on AIMed is small compared to the improvement on BioInfer, even though these corpora are similar in size. One of the reasons for this is that whole abstracts are annotated in AIMed, therefore making the examples biased. The difference between L2-SVM and SVM-CW + IEPA on AIMed is small, but statistically, it is significant (McNemar test (McNemar, 1947), P = 0.0081). In the cases of HPRD50 + IEPA, LLL + IEPA, and two folds in BioInfer + IEPA, C3 is larger than Ct in Equation (2). This is worth noting, because the source corpus is more weighted than the target corpus, and the prediction performance on the target corpus is improved. Most methods put more trust in the target corpus than in the source corpus, and our results show that this setting is not always effective for mixing corpora. The results also indicate that IEPA contains more useful information for extracting PPI than other corpora, and that using source examples aggressively is im</context>
</contexts>
<marker>McNemar, 1947</marker>
<rawString>Quinn McNemar. 1947. Note on the sampling error of the difference between correlated proportions or percentages. Psychometrika, 12(2):153–157, June.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Makoto Miwa</author>
<author>Rune Sætre</author>
<author>Yusuke Miyao</author>
<author>Tomoko Ohta</author>
<author>Jun’ichi Tsujii</author>
</authors>
<title>Combining multiple layers of syntactic information for proteinprotein interaction extraction.</title>
<date>2008</date>
<booktitle>In Proceedings of the Third International Symposium on Semantic Mining in Biomedicine (SMBM2008),</booktitle>
<pages>101--108</pages>
<contexts>
<context position="4688" citStr="Miwa et al. (2008)" startWordPosition="752" endWordPosition="755">n adaptation (DA) have mainly focused on how to effectively use corpora annotated by other groups, by reducing the incompatibilities (Pan and Yang, 2008). In this paper, we propose the extraction of PPIs from multiple different corpora. We design a rich feature vector, and as an ITL method, we apply a support vector machine (SVM) modified for corpus weighting (SVM-CW) (Schweikert et al., 2008), in order to evaluate the use of multiple corpora for the PPI extraction task. Our rich feature vector is made from multiple useful kernels, each of which is based on multiple parser inputs, proposed by Miwa et al. (2008). The system with our feature vector was better than or at least comparable to the state-of-the-art PPI extraction systems on every corpus. The system is a good starting point to use the multiple corpora. Using one of the corpora as the target corpus, SVM-CW weights the remaining corpora (we call them the source corpora) with “goodness” for training on the target corpus. While SVM-CW is simple, we show that SVM-CW can improve the performance of the system more effectively and more efficiently than other methods proven to be successful in other NLP tasks earlier. As a result, SVM-CW with our fe</context>
<context position="5967" citStr="Miwa et al. (2008)" startWordPosition="965" endWordPosition="968"> models, of which each model is superior to the best model in the original PPI extraction task, which used only the single corpus. 2 Related Works While sentence-based, pair-wise PPI extraction was initially tackled by using simple methods based on co-occurrences, lately, more sophisticated machine learning systems augmented by NLP techniques have been applied (Bunescu et al., 2005). The task has been tackled as a classification problem. To pull out useful information from NLP tools including taggers and parsers, several kernels have been applied to calculate the similarity between PPI pairs. Miwa et al. (2008) recently proposed the use of multiple kernels using multiple parsers. This outperformed other systems on the AIMed, which is the most frequently used corpus for the PPI extraction task, by a wide margin. To improve the performance using external Figure 1: Overview of our PPI extraction system training data, many ITL and DA methods have been proposed. Most of ITL methods assume that the feature space is same, and that the labels may be different in only some examples, while most of DA methods assume that the labels are the same, and that the feature space is different. Among the methods, we us</context>
<context position="9526" citStr="Miwa et al. (2008)" startWordPosition="1572" endWordPosition="1575">s, we use the 2-norm soft-margin linear SVM (L2-SVM) classifier, with the dual coordinate decent (DCD) method, by Hsieh et al. (2008). In this section, we explain the two main features: the feature vector, and the corpus weighting method for multiple corpora. 3.1 Feature Vector We propose a feature vector with three types of features, corresponding to the three different kernels, which were each combined with the two parsers: the Enju 2.3.0, and KSDEP beta 1(Miyao et al., 2008); this feature vector is used because the kernels with these parsers were shown to be effective for PPI extraction by Miwa et al. (2008), and because it is important to start from a good performance single corpus system. Both parsers were retrained using the GENIA Treebank corpus provided by Kim et al. (2003). By using our linear feature vector, we can perform calculations faster by using fast linear classifiers like L2-SVM, and we also obtain a more accurate extraction, than by using the original kernel method. Figure 3 summarizes the way in which the feature vector is constructed. The system extracts Bag-of-Words (BOW), shortest path (SP), and graph features from the output of two parsers. The Figure 5: Vertex walks, edge wa</context>
<context position="19920" citStr="Miwa et al. (2008)" startWordPosition="3378" endWordPosition="3381">than did the original methods for AP and CW. We used a Widrow-Hoff learning rule (Bishop, 1995) for AP, and we performed one iteration for CW. L2-SVM is as good as, if not better, than other classifiers (Fscore and AUC). In the least, L2-SVM is as fast as these classifiers. AP and CW are worse than the other three methods, because they require a large number of examples, and are un-suitable for the current task. This result indicates that all linear classifiers, with the exception of AP and CW, perform almost equally, when using our feature vector. Finally, we implemented the kernel method by Miwa et al. (2008). For a 10-fold CV on AIMed, the running time was 9,507 seconds, and the performance was 61.5% F-score and 87.1% AUC. Our system used 4,702 seconds, and the performance was 64.2% F-score and 89.1% AUC. This result displayed that our system, with L2-SVM, and our new feature vector, is better, and faster, than the kernel-based system. 4.3 Evaluation of Corpus Weighting In this section, we first apply each model from a source corpus to a target corpus, to show how different the corpora are. We then evaluate SVM-CW by comparing it with three other methods (see Section 2) with limited features, and</context>
<context position="30686" citStr="Miwa et al., 2008" startWordPosition="5245" endWordPosition="5248">ication tasks, and to other binary relation extraction tasks, without the need for modification. There are several other tasks in which many different corpora, which at first glance seem compatible, exist. By applying SVM-CW to such corpora, we will analyze which differences can be resolved by SVM-CW, and what differences require a manual resolution. For the PPI extraction system, we found many false negatives that need to be resolved. For further improvement, we need to analyze the cause 128 positive all P R F AUC SVM-CW 1,000 5,834 60.0 71.9 65.2 89.3 L2-SVM 1,000 5,834 62.7 66.6 64.2 89.1 (Miwa et al., 2008) 1,005 5,648 60.4 69.3 64.2 (61.5) 87.9 (87.1) (Miyao et al., 2008) 1,059 5,648 54.9 65.5 59.5 (Airola et al., 2008) 1,000 5,834 52.9 61.8 56.4 84.8 (Sætre et al., 2007) 1,068 5,631 64.3 44.1 52.0 (Erkan et al., 2007) 951 4,020 59.6 60.7 60.0 (Bunescu and Mooney, 2005) 65.0 46.4 54.2 Table 5: Comparison with previous PPI extraction results on the AIMed corpus. The numbers of positive and all examples, precision (P), recall (R), F-score (F), and AUC are shown. The result with the highest F-score from Table 4 is reported as the result for SVM-CW. The scores in the parentheses of Miwa et al. (200</context>
</contexts>
<marker>Miwa, Sætre, Miyao, Ohta, Tsujii, 2008</marker>
<rawString>Makoto Miwa, Rune Sætre, Yusuke Miyao, Tomoko Ohta, and Jun’ichi Tsujii. 2008. Combining multiple layers of syntactic information for proteinprotein interaction extraction. In Proceedings of the Third International Symposium on Semantic Mining in Biomedicine (SMBM2008), pages 101–108.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yusuke Miyao</author>
<author>Rune Sætre</author>
<author>Kenji Sagae</author>
<author>Takuya Matsuzaki</author>
<author>Jun’ichi Tsujii</author>
</authors>
<title>Taskoriented evaluation of syntactic parsers and their representations.</title>
<date>2008</date>
<booktitle>In Proceedings of the 45th Meeting of the Association for Computational Linguistics (ACL’08:HLT).</booktitle>
<contexts>
<context position="9390" citStr="Miyao et al., 2008" startWordPosition="1547" endWordPosition="1550">r (p1 and p2) actually interacts. Figure 1 shows the overview of the proposed PPI extraction system. As a classifier using a single corpus, we use the 2-norm soft-margin linear SVM (L2-SVM) classifier, with the dual coordinate decent (DCD) method, by Hsieh et al. (2008). In this section, we explain the two main features: the feature vector, and the corpus weighting method for multiple corpora. 3.1 Feature Vector We propose a feature vector with three types of features, corresponding to the three different kernels, which were each combined with the two parsers: the Enju 2.3.0, and KSDEP beta 1(Miyao et al., 2008); this feature vector is used because the kernels with these parsers were shown to be effective for PPI extraction by Miwa et al. (2008), and because it is important to start from a good performance single corpus system. Both parsers were retrained using the GENIA Treebank corpus provided by Kim et al. (2003). By using our linear feature vector, we can perform calculations faster by using fast linear classifiers like L2-SVM, and we also obtain a more accurate extraction, than by using the original kernel method. Figure 3 summarizes the way in which the feature vector is constructed. The system</context>
<context position="30753" citStr="Miyao et al., 2008" startWordPosition="5257" endWordPosition="5260">out the need for modification. There are several other tasks in which many different corpora, which at first glance seem compatible, exist. By applying SVM-CW to such corpora, we will analyze which differences can be resolved by SVM-CW, and what differences require a manual resolution. For the PPI extraction system, we found many false negatives that need to be resolved. For further improvement, we need to analyze the cause 128 positive all P R F AUC SVM-CW 1,000 5,834 60.0 71.9 65.2 89.3 L2-SVM 1,000 5,834 62.7 66.6 64.2 89.1 (Miwa et al., 2008) 1,005 5,648 60.4 69.3 64.2 (61.5) 87.9 (87.1) (Miyao et al., 2008) 1,059 5,648 54.9 65.5 59.5 (Airola et al., 2008) 1,000 5,834 52.9 61.8 56.4 84.8 (Sætre et al., 2007) 1,068 5,631 64.3 44.1 52.0 (Erkan et al., 2007) 951 4,020 59.6 60.7 60.0 (Bunescu and Mooney, 2005) 65.0 46.4 54.2 Table 5: Comparison with previous PPI extraction results on the AIMed corpus. The numbers of positive and all examples, precision (P), recall (R), F-score (F), and AUC are shown. The result with the highest F-score from Table 4 is reported as the result for SVM-CW. The scores in the parentheses of Miwa et al. (2008) indicate the result using the same 10-fold splits as our result,</context>
</contexts>
<marker>Miyao, Sætre, Sagae, Matsuzaki, Tsujii, 2008</marker>
<rawString>Yusuke Miyao, Rune Sætre, Kenji Sagae, Takuya Matsuzaki, and Jun’ichi Tsujii. 2008. Taskoriented evaluation of syntactic parsers and their representations. In Proceedings of the 45th Meeting of the Association for Computational Linguistics (ACL’08:HLT).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Claire N´edellec</author>
</authors>
<title>Learning language in logic -genic interaction extraction challenge.</title>
<date>2005</date>
<booktitle>In Proceedings of the LLL’05 Workshop.</booktitle>
<marker>N´edellec, 2005</marker>
<rawString>Claire N´edellec. 2005. Learning language in logic -genic interaction extraction challenge. In Proceedings of the LLL’05 Workshop.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sinno Jialin Pan</author>
<author>Qiang Yang</author>
</authors>
<title>A survey on transfer learning.</title>
<date>2008</date>
<tech>Technical Report HKUST-CS08-08,</tech>
<institution>Department of Computer Science and Engineering, Hong Kong University of Science and Technology,</institution>
<location>Hong Kong, China,</location>
<contexts>
<context position="4223" citStr="Pan and Yang, 2008" startWordPosition="670" endWordPosition="673"> PPI extraction so far has revealed that the performance on each of the corpora could 121 Proceedings of the 2009 Conference on Empirical Methods in Natural Language Processing, pages 121–130, Singapore, 6-7 August 2009. c�2009 ACL and AFNLP benefit from additional examples (Airola et al., 2008). Learning from multiple annotated corpora could lead to better PPI extraction performance. Various research paradigms such as inductive transfer learning (ITL) and domain adaptation (DA) have mainly focused on how to effectively use corpora annotated by other groups, by reducing the incompatibilities (Pan and Yang, 2008). In this paper, we propose the extraction of PPIs from multiple different corpora. We design a rich feature vector, and as an ITL method, we apply a support vector machine (SVM) modified for corpus weighting (SVM-CW) (Schweikert et al., 2008), in order to evaluate the use of multiple corpora for the PPI extraction task. Our rich feature vector is made from multiple useful kernels, each of which is based on multiple parser inputs, proposed by Miwa et al. (2008). The system with our feature vector was better than or at least comparable to the state-of-the-art PPI extraction systems on every cor</context>
</contexts>
<marker>Pan, Yang, 2008</marker>
<rawString>Sinno Jialin Pan and Qiang Yang. 2008. A survey on transfer learning. Technical Report HKUST-CS08-08, Department of Computer Science and Engineering, Hong Kong University of Science and Technology, Hong Kong, China, November.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sampo Pyysalo</author>
<author>Filip Ginter</author>
<author>Juho Heimonen</author>
<author>Jari Bj¨orne</author>
<author>Jorma Boberg</author>
<author>Jouni J¨arvinen</author>
<author>Tapio Salakoski</author>
</authors>
<title>BioInfer: A corpus for information extraction in the biomedical domain.</title>
<date>2007</date>
<journal>BMC Bioinformatics,</journal>
<volume>8</volume>
<marker>Pyysalo, Ginter, Heimonen, Bj¨orne, Boberg, J¨arvinen, Salakoski, 2007</marker>
<rawString>Sampo Pyysalo, Filip Ginter, Juho Heimonen, Jari Bj¨orne, Jorma Boberg, Jouni J¨arvinen, and Tapio Salakoski. 2007. BioInfer: A corpus for information extraction in the biomedical domain. BMC Bioinformatics, 8:50.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sampo Pyysalo</author>
<author>Antti Airola</author>
<author>Juho Heimonen</author>
<author>Jari Bj¨orne</author>
<author>Filip Ginter</author>
<author>Tapio Salakoski</author>
</authors>
<title>Comparative analysis of five protein-protein interaction corpora.</title>
<date>2008</date>
<journal>In BMC Bioinformatics,</journal>
<volume>9</volume>
<pages>6</pages>
<marker>Pyysalo, Airola, Heimonen, Bj¨orne, Ginter, Salakoski, 2008</marker>
<rawString>Sampo Pyysalo, Antti Airola, Juho Heimonen, Jari Bj¨orne, Filip Ginter, and Tapio Salakoski. 2008. Comparative analysis of five protein-protein interaction corpora. In BMC Bioinformatics, volume 9(Suppl 3), page S6.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Gunnar Ratsch</author>
<author>Takashi Onoda</author>
<author>Klaus-Robert Muller</author>
</authors>
<title>Soft margins for adaboost.</title>
<date>2001</date>
<booktitle>Machine Learning,</booktitle>
<volume>42</volume>
<issue>3</issue>
<contexts>
<context position="22066" citStr="Ratsch et al., 2001" startWordPosition="3743" endWordPosition="3746">eatures, because SVD-ASO and TrAdaBoost require large computational resources. We applied SVD-ASO and TrAdaBoost in the following way. As for SVDASO, we made 400 auxiliary problems from the labels of each corpus by splitting features randomly, and extracted 50 additional features each for 4 feature groups. In total, we made new 200 additional features from 2,000 auxiliary problems. As recommended by Ando et al. (2005), we removed negative weights, performed SVD to each feature group, and iterated ASO once. Since AdaBoost easily overfitted with our rich feature vector, we applied soft margins (Ratsch et al., 2001) to TrAdaBoost. The update parameter for source examples was calculated using the update parameter on the training data in AdaBoost and the original parameter in TrAdaBoost. This ensures that the parameter would be the same as the original parameter, when the C value in the soft margin approaches infinity. 126 aSVM SVD-ASO TrAdaBoost SVM-CW L2-SVM F AUC F AUC F AUC F AUC F AUC AIMed 63.6 88.4 62.9 88.3 63.4 88.4 64.0 88.6 63.2 88.4 BioInfer 66.5 85.2 65.7 85.1 66.1 85.2 66.7 85.4 66.2 85.1 HPRD50 71.2 84.3 68.7 80.8 72.6 85.3 72.7 86.4 67.2 80.7 IEPA 73.8 85.4 72.3 83.8 74.3 86.3 75.2 85.9 73.</context>
</contexts>
<marker>Ratsch, Onoda, Muller, 2001</marker>
<rawString>Gunnar Ratsch, Takashi Onoda, and Klaus-Robert Muller. 2001. Soft margins for adaboost. Machine Learning, 42(3):287–320.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Rune Sætre</author>
<author>Kenji Sagae</author>
<author>Jun’ichi Tsujii</author>
</authors>
<title>Syntactic features for protein-protein interaction extraction.</title>
<date>2007</date>
<booktitle>In LBM</booktitle>
<note>short papers.</note>
<contexts>
<context position="30855" citStr="Sætre et al., 2007" startWordPosition="5276" endWordPosition="5279"> first glance seem compatible, exist. By applying SVM-CW to such corpora, we will analyze which differences can be resolved by SVM-CW, and what differences require a manual resolution. For the PPI extraction system, we found many false negatives that need to be resolved. For further improvement, we need to analyze the cause 128 positive all P R F AUC SVM-CW 1,000 5,834 60.0 71.9 65.2 89.3 L2-SVM 1,000 5,834 62.7 66.6 64.2 89.1 (Miwa et al., 2008) 1,005 5,648 60.4 69.3 64.2 (61.5) 87.9 (87.1) (Miyao et al., 2008) 1,059 5,648 54.9 65.5 59.5 (Airola et al., 2008) 1,000 5,834 52.9 61.8 56.4 84.8 (Sætre et al., 2007) 1,068 5,631 64.3 44.1 52.0 (Erkan et al., 2007) 951 4,020 59.6 60.7 60.0 (Bunescu and Mooney, 2005) 65.0 46.4 54.2 Table 5: Comparison with previous PPI extraction results on the AIMed corpus. The numbers of positive and all examples, precision (P), recall (R), F-score (F), and AUC are shown. The result with the highest F-score from Table 4 is reported as the result for SVM-CW. The scores in the parentheses of Miwa et al. (2008) indicate the result using the same 10-fold splits as our result, as indicated in Section 4.2. of these false negatives more deeply, and design a more discriminative f</context>
</contexts>
<marker>Sætre, Sagae, Tsujii, 2007</marker>
<rawString>Rune Sætre, Kenji Sagae, and Jun’ichi Tsujii. 2007. Syntactic features for protein-protein interaction extraction. In LBM 2007 short papers.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Gabriele Schweikert</author>
<author>Christian Widmer</author>
<author>Bernhard Sch¨olkopf</author>
<author>Gunnar R¨atsch</author>
</authors>
<title>An empirical analysis of domain adaptation algorithms for genomic sequence analysis.</title>
<date>2008</date>
<booktitle>In NIPS,</booktitle>
<pages>1433--1440</pages>
<marker>Schweikert, Widmer, Sch¨olkopf, R¨atsch, 2008</marker>
<rawString>Gabriele Schweikert, Christian Widmer, Bernhard Sch¨olkopf, and Gunnar R¨atsch. 2008. An empirical analysis of domain adaptation algorithms for genomic sequence analysis. In NIPS, pages 1433– 1440.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jun Yang</author>
<author>Rong Yan</author>
<author>Alexander G Hauptmann</author>
</authors>
<title>Cross-domain video concept detection using adaptive SVMs.</title>
<date>2007</date>
<booktitle>In MULTIMEDIA ’07: Proceedings of the 15th international conference on Multimedia,</booktitle>
<pages>188--197</pages>
<contexts>
<context position="6608" citStr="Yang et al., 2007" startWordPosition="1077" endWordPosition="1080">use of multiple kernels using multiple parsers. This outperformed other systems on the AIMed, which is the most frequently used corpus for the PPI extraction task, by a wide margin. To improve the performance using external Figure 1: Overview of our PPI extraction system training data, many ITL and DA methods have been proposed. Most of ITL methods assume that the feature space is same, and that the labels may be different in only some examples, while most of DA methods assume that the labels are the same, and that the feature space is different. Among the methods, we use adaptive SVM (aSVM) (Yang et al., 2007), singular value decomposition (SVD) based alternating structure optimization (SVDASO) (Ando et al., 2005), and transfer AdaBoost (TrAdaBoost) (Dai et al., 2007) to compare with SVM-CW. We do not use semi-supervised learning (SSL) methods, because it would be considerably costly to generate enough clean unlabeled data needed for SSL (Erkan et al., 2007). aSVM is seen as a promising DA method among several modifications of SVM including SVM-CW. aSVM tries to find a model that is close to the one made from other classification problems. SVDASO is one of the most successful SSL, DA, or multi-task</context>
</contexts>
<marker>Yang, Yan, Hauptmann, 2007</marker>
<rawString>Jun Yang, Rong Yan, and Alexander G. Hauptmann. 2007. Cross-domain video concept detection using adaptive SVMs. In MULTIMEDIA ’07: Proceedings of the 15th international conference on Multimedia, pages 188–197.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>