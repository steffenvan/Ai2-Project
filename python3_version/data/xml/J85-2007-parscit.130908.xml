<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.007398">
<note confidence="0.838313">
BOOK REVIEWS
AFFIX POSITIONS AND COOCCURRENCES:
THE PARADIGM PROGRAM
(Summer Institute of Linguistics Publications in Linguistics
No. 69)
</note>
<subsectionHeader confidence="0.174414">
Joseph E. Grimes
</subsectionHeader>
<bodyText confidence="0.873508">
Summer Institute of Linguistics
Dallas, Texas, 1983
Pp. vii, 90.
The program Grimes describes in this little book repres-
ents both a significant departure from, and contribution
to, the &amp;quot;traditional&amp;quot; approach to computer-assisted
morphological analysis. The &amp;quot;traditional&amp;quot; approach,
exemplified in programs such as those described in Kosk-
enniemi (1983) and Wolf art &amp; Pardo (1979), tests a
user-supplied morphological analysis against a set of
word-forms. The PARADIGM program is concerned with
a different aspect of morphological analysis. The user
supplies a list of segmented word-forms, with morphemes
separated by blanks or dashes (the output from either of
the previously mentioned programs could be used), and
the program produces output from which the user can
deduce both relative affix positions (the &amp;quot;slots&amp;quot; the
morphemes occupy) and various types of cooccurrence
restrictions.
Unlike the &amp;quot;stemming&amp;quot; of &amp;quot;lemmatization&amp;quot; programs,
the PARADIGM program does not test or apply a pre-
existent morphological analysis, but rather performs
some limited analytic functions. The program proceeds
through three distinct stages of analysis:
</bodyText>
<listItem confidence="0.96658952631579">
• The first stage produces tables of relative affix posi-
tions, from which the user can easily construct an affix
slot graph.
• The second stage produces tables of &amp;quot;distinct affix
sets&amp;quot;, i.e., lists of affixes that do not cooccur in the set
of word-forms supplied by the user. These lists
include both affixes that occupy the same slot (and
therefore obviously cannot cooccur) and affixes that
do not cooccur for a variety of other possible reasons,
including hapiology, semantic restrictions, or incom-
plete paradigms having been supplied for analysis. It
is left to the user to determine what the significance of
these sets may be.
• The third and final stage of computer analysis produc-
es component subgraphs of affix cooccurrences, which
describe the patterns of affix combination observed
for each of the affixes in the test data. From these
component subgraphs the user constructs a complete
cooccurrence graph, a task that requires some art, skill,
</listItem>
<bodyText confidence="0.997947125">
and practice, but is well worth the effort. Assuming
that the input data are complete and accurate, the
resulting graph defines all valid affix combinations.
For the most part, Grimes&apos;s description of the
program, his instructions for its use, and his directions for
interpreting the output are admirably complete, concise,
and intelligible to the non-specialist. Two exceptions
should be noted:
</bodyText>
<listItem confidence="0.917402285714286">
1) the section on constructing a complete cooccurrence
graph from the component subgraphs is perhaps over-
ly terse, and
2) a further step in analysis, in which the complete cooc-
currence graph is related to a semantic analysis of
cooccurrence restrictions, is mentioned but not
discussed at all.
</listItem>
<bodyText confidence="0.999842583333333">
In both cases the prospective user is referred to other
sources for the missing information, but the value of this
book would have been greatly enhanced by a slight
expansion on these two topics.
Perhaps the most serious shortcoming of the
PARADIGM program is that it requires extensive
&amp;quot;normalization&amp;quot; of the input data. There is no provision
for allomorphic variation, so that all affixes must be
represented as invariant morphemes. Homographs are
not tolerated, so the user must &amp;quot;subscript&amp;quot; or otherwise
distinguish between homographic affixes in the input
data. Finally, if variant affix orderings are found, each
ordering must be submitted for analysis in a separate run
of the program.
The PARADIGM program is of interest primarily to the
field linguist working on a language with extensive affixa-
tion (Grimes gives examples of Central and South Ameri-
can languages with up to 15 prefix slots and 28 suffix
slots). Manual analysis of affix positions and cooccur-
rence restrictions in such languages is an intimidating,
time-consuming, and error-prone chore. A modest
investment of time in familiarizing oneself with the
PARADIGM program should result in a substantial long-
term time saving, plus a more reliable analysis.
</bodyText>
<sectionHeader confidence="0.792" genericHeader="abstract">
R.L. Brandson
</sectionHeader>
<reference confidence="0.369178">
Linguistics Programme
University of Manitoba
Winnipeg, Manitoba, Canada
</reference>
<sectionHeader confidence="0.915493" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999301428571429">
Koskenniemi, Kimmo 1983 Two-Level Morphology: A General
Computational Model for Word-Form Recognition and Production.
Publications of the Department of General Linguistics, University of
Helsinki, No. 11.
Wolfart, H. Christoph and Pardo, Francis 1979 Computer-Aided
Philology and Algorithmic Linguistics: A Case Study. MAL 45:
107-122.
</reference>
<page confidence="0.968568">
184 Computational Linguistics, Volume 11, Numbers 2-3, April-September 1985
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.554274">
<title confidence="0.99203375">BOOK REVIEWS AND COOCCURRENCES: THE PARADIGM PROGRAM (Summer Institute of Linguistics Publications in Linguistics</title>
<author confidence="0.965292">Joseph E Grimes</author>
<affiliation confidence="0.986268">Summer Institute of Linguistics</affiliation>
<address confidence="0.98827">Dallas, Texas, 1983</address>
<abstract confidence="0.99888045">Pp. vii, 90. The program Grimes describes in this little book represents both a significant departure from, and contribution to, the &amp;quot;traditional&amp;quot; approach to computer-assisted morphological analysis. The &amp;quot;traditional&amp;quot; approach, exemplified in programs such as those described in Koskenniemi (1983) and Wolf art &amp; Pardo (1979), tests a user-supplied morphological analysis against a set of The is concerned with a different aspect of morphological analysis. The user supplies a list of segmented word-forms, with morphemes separated by blanks or dashes (the output from either of the previously mentioned programs could be used), and the program produces output from which the user can deduce both relative affix positions (the &amp;quot;slots&amp;quot; the morphemes occupy) and various types of cooccurrence restrictions. Unlike the &amp;quot;stemming&amp;quot; of &amp;quot;lemmatization&amp;quot; programs, does not premorphological analysis, but rather some limited analytic functions. The program proceeds through three distinct stages of analysis: • The first stage produces tables of relative affix positions, from which the user can easily construct an affix slot graph. • The second stage produces tables of &amp;quot;distinct affix sets&amp;quot;, i.e., lists of affixes that do not cooccur in the set of word-forms supplied by the user. These lists include both affixes that occupy the same slot (and therefore obviously cannot cooccur) and affixes that do not cooccur for a variety of other possible reasons, including hapiology, semantic restrictions, or incomplete paradigms having been supplied for analysis. It is left to the user to determine what the significance of these sets may be. • The third and final stage of computer analysis producsubgraphs affix cooccurrences, which describe the patterns of affix combination observed for each of the affixes in the test data. From these subgraphs the user constructs a graph, task that requires some art, skill, and practice, but is well worth the effort. Assuming that the input data are complete and accurate, the resulting graph defines all valid affix combinations. For the most part, Grimes&apos;s description of the program, his instructions for its use, and his directions for interpreting the output are admirably complete, concise, and intelligible to the non-specialist. Two exceptions should be noted: 1) the section on constructing a complete cooccurrence graph from the component subgraphs is perhaps overly terse, and 2) a further step in analysis, in which the complete cooccurrence graph is related to a semantic analysis of cooccurrence restrictions, is mentioned but not discussed at all. In both cases the prospective user is referred to other sources for the missing information, but the value of this book would have been greatly enhanced by a slight expansion on these two topics. Perhaps the most serious shortcoming of the PARADIGM program is that it requires extensive &amp;quot;normalization&amp;quot; of the input data. There is no provision for allomorphic variation, so that all affixes must be represented as invariant morphemes. Homographs are not tolerated, so the user must &amp;quot;subscript&amp;quot; or otherwise distinguish between homographic affixes in the input data. Finally, if variant affix orderings are found, each ordering must be submitted for analysis in a separate run of the program. The PARADIGM program is of interest primarily to the field linguist working on a language with extensive affixation (Grimes gives examples of Central and South American languages with up to 15 prefix slots and 28 suffix slots). Manual analysis of affix positions and cooccurrence restrictions in such languages is an intimidating, time-consuming, and error-prone chore. A modest investment of time in familiarizing oneself with the PARADIGM program should result in a substantial longterm time saving, plus a more reliable analysis.</abstract>
<affiliation confidence="0.9043385">Linguistics Programme University of Manitoba</affiliation>
<address confidence="0.996413">Winnipeg, Manitoba, Canada</address>
<note confidence="0.971912666666667">References Koskenniemi, Kimmo 1983 Two-Level Morphology: A General Computational Model for Word-Form Recognition and Production. Publications of the Department of General Linguistics, University of Helsinki, No. 11. Wolfart, H. Christoph and Pardo, Francis 1979 Computer-Aided and Algorithmic Linguistics: A Case Study. 107-122. Linguistics, Volume 11, Numbers 2-3, April-September 1985</note>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="false">
<institution>Linguistics Programme University of Manitoba Winnipeg,</institution>
<location>Manitoba, Canada</location>
<marker></marker>
<rawString>Linguistics Programme University of Manitoba Winnipeg, Manitoba, Canada</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kimmo Koskenniemi</author>
</authors>
<title>Two-Level Morphology: A General Computational Model for Word-Form Recognition and Production.</title>
<date>1983</date>
<journal>Publications of the</journal>
<volume>11</volume>
<institution>Department of General Linguistics, University of Helsinki,</institution>
<marker>Koskenniemi, 1983</marker>
<rawString>Koskenniemi, Kimmo 1983 Two-Level Morphology: A General Computational Model for Word-Form Recognition and Production. Publications of the Department of General Linguistics, University of Helsinki, No. 11.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Christoph Wolfart</author>
<author>Francis Pardo</author>
</authors>
<title>Computer-Aided Philology and Algorithmic Linguistics: A Case Study.</title>
<date>1979</date>
<journal>MAL</journal>
<volume>45</volume>
<pages>107--122</pages>
<marker>Wolfart, Pardo, 1979</marker>
<rawString>Wolfart, H. Christoph and Pardo, Francis 1979 Computer-Aided Philology and Algorithmic Linguistics: A Case Study. MAL 45: 107-122.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>