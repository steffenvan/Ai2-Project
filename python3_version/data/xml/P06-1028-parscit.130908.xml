<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000026">
<note confidence="0.8401502">
Training Conditional Random Fields with Multivariate Evaluation
Measures
Jun Suzuki, Erik McDermott and Hideki Isozaki
NTT Communication Science Laboratories, NTT Corp.
2-4 Hikaridai, Seika-cho, Soraku-gun, Kyoto, 619-0237 Japan
</note>
<email confidence="0.975269">
{jun, mcd, isozaki}@cslab.kecl.ntt.co.jp
</email>
<sectionHeader confidence="0.994538" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.9999293125">
This paper proposes a framework for train-
ing Conditional Random Fields (CRFs)
to optimize multivariate evaluation mea-
sures, including non-linear measures such
as F-score. Our proposed framework is
derived from an error minimization ap-
proach that provides a simple solution for
directly optimizing any evaluation mea-
sure. Specifically focusing on sequential
segmentation tasks, i.e. text chunking and
named entity recognition, we introduce a
loss function that closely reflects the tar-
get evaluation measure for these tasks,
namely, segmentation F-score. Our ex-
periments show that our method performs
better than standard CRF training.
</bodyText>
<sectionHeader confidence="0.998782" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999958419354839">
Conditional random fields (CRFs) are a recently
introduced formalism (Lafferty et al., 2001) for
representing a conditional model p(ylx), where
both a set of inputs, x, and a set of outputs,
y, display non-trivial interdependency. CRFs are
basically defined as a discriminative model of
Markov random fields conditioned on inputs (ob-
servations) x. Unlike generative models, CRFs
model only the output y’s distribution over x. This
allows CRFs to use flexible features such as com-
plicated functions of multiple observations. The
modeling power of CRFs has been of great ben-
efit in several applications, such as shallow pars-
ing (Sha and Pereira, 2003) and information ex-
traction (McCallum and Li, 2003).
Since the introduction of CRFs, intensive re-
search has been undertaken to boost their effec-
tiveness. The first approach to estimating CRF pa-
rameters is the maximum likelihood (ML) criterion
over conditional probability p(ylx) itself (Laf-
ferty et al., 2001). The ML criterion, however,
is prone to over-fitting the training data, espe-
cially since CRFs are often trained with a very
large number of correlated features. The maximum
a posteriori (MAP) criterion over parameters, A,
given x and y is the natural choice for reducing
over-fitting (Sha and Pereira, 2003). Moreover,
the Bayes approach, which optimizes both MAP
and the prior distribution of the parameters, has
also been proposed (Qi et al., 2005). Furthermore,
large margin criteria have been employed to op-
timize the model parameters (Taskar et al., 2004;
Tsochantaridis et al., 2005).
These training criteria have yielded excellent re-
sults for various tasks. However, real world tasks
are evaluated by task-specific evaluation mea-
sures, including non-linear measures such as F-
score, while all of the above criteria achieve op-
timization based on the linear combination of av-
erage accuracies, or error rates, rather than a given
task-specific evaluation measure. For example, se-
quential segmentation tasks (SSTs), such as text
chunking and named entity recognition, are gener-
ally evaluated with the segmentation F-score. This
inconsistency between the objective function dur-
ing training and the task evaluation measure might
produce a suboptimal result.
In fact, to overcome this inconsistency, an
SVM-based multivariate optimization method has
recently been proposed (Joachims, 2005). More-
over, an F-score optimization method for logis-
tic regression has also been proposed (Jansche,
2005). In the same spirit as the above studies, we
first propose a generalization framework for CRF
training that allows us to optimize directly not
only the error rate, but also any evaluation mea-
sure. In other words, our framework can incor-
porate any evaluation measure of interest into the
loss function and then optimize this loss function
as the training objective function. Our proposed
framework is fundamentally derived from an ap-
proach to (smoothed) error rate minimization well
</bodyText>
<page confidence="0.967139">
217
</page>
<note confidence="0.530689">
Proceedings of the 21st International Conference on Computational Linguistics and 44th Annual Meeting of the ACL, pages 217–224,
Sydney, July 2006. c�2006 Association for Computational Linguistics
</note>
<bodyText confidence="0.999571833333333">
known in the speech and pattern recognition com-
munity, namely the Minimum Classification Er-
ror (MCE) framework (Juang and Katagiri, 1992).
The framework of MCE criterion training supports
the theoretical background of our method. The ap-
proach proposed here subsumes the conventional
ML/MAP criteria training of CRFs, as described
in the following.
After describing the new framework, as an ex-
ample of optimizing multivariate evaluation mea-
sures, we focus on SSTs and introduce a segmen-
tation F-score loss function for CRFs.
</bodyText>
<sectionHeader confidence="0.883011" genericHeader="introduction">
2 CRFs and Training Criteria
</sectionHeader>
<bodyText confidence="0.999071857142857">
Given an input (observation) xE X and parameter
vector λ = {A1, ... , AM}, CRFs define the con-
ditional probability p(y|x) of a particular output
y E Y as being proportional to a product of po-
tential functions on the cliques of a graph, which
represents the interdependency of y and x. That
is:
</bodyText>
<equation confidence="0.885818166666667">
p(y|x; ) = 1 ri
Zλ(x) J(y,x)
where 4bc(y, x; λ) is a non-negative real value po-
tential function on a clique c E C(y, x). Zλ(x)=
E 11cEC(�y,x) �c(�y, x; λ) is a normalization
�yEY
</equation>
<bodyText confidence="0.981227857142857">
factor over all output values, Y.
Following the definitions of (Sha and Pereira,
2003), a log-linear combination of weighted fea-
tures, 4bc(y, x; λ) = exp(λ · fc(y, x)), is used
as individual potential functions, where f c rep-
resents a feature vector obtained from the corre-
sponding clique c. That is, 11cEC(y,x) `Fc(y, x) =
exp(λ·F(y, x)), where F(y, x)=Ec fc(y, x) is
the CRF’s global feature vector for x and y.
The most probable output y� is given by y� =
arg maxyEY p(y|x; λ). However Zλ(x) never af-
fects the decision of y� since Zλ(x) does not de-
pend on y. Thus, we can obtain the following dis-
criminant function for CRFs:
</bodyText>
<equation confidence="0.736794">
y� = arg max  · F(y, x). (1)
yEY
The maximum (log-)likelihood (ML) of the
conditional probability p(y|x; λ) of training
data {(xk, y*k)}Nk�1 w.r.t. parameters λ is
the most basic CRF training criterion, that is,
E
arg maxλ k log p(y*k|xk; λ), where y*k is the
</equation>
<bodyText confidence="0.8745778">
correct output for the given xk. Maximizing
the conditional log-likelihood given by CRFs is
equivalent to minimizing the log-loss function,
Ek − log p(y*k|xk; λ). We minimize the follow-
ing loss function for the ML criterion training of
</bodyText>
<equation confidence="0.932818125">
CRFs:
L ]
− · F (y*k, xk) + log Zλ(xk) .
To reduce over-fitting, the Maximum a
Posteriori (MAP) criterion of parameters
E
λ, that is, arg maxλ k log p(λ|y*k, xk) a
Ek log p(y*k|xk; λ)p(λ), is now the most widely
</equation>
<bodyText confidence="0.907813333333333">
used CRF training criterion. Therefore, we
minimize the following loss function for the MAP
criterion training of CRFs:
</bodyText>
<equation confidence="0.987948333333333">
LMAP
λ = LML
λ − log p(). (2)
</equation>
<bodyText confidence="0.9997080625">
There are several possible choices when selecting
a prior distribution p(λ). This paper only con-
siders Lφ-norm prior, p(λ) a exp(−||λ||φ/0C),
which becomes a Gaussian prior when 0=2. The
essential difference between ML and MAP is sim-
ply that MAP has this prior term in the objective
function. This paper sometimes refers to the ML
and MAP criterion training of CRFs as ML/MAP.
In order to estimate the parameters λ, we seek a
zero of the gradient over the parameters λ:
The gradient of ML is Eq. 3 without the gradient
term of the prior, −V log p(λ).
The details of actual optimization procedures
for linear chain CRFs, which are typical CRF ap-
plications, have already been reported (Sha and
Pereira, 2003).
</bodyText>
<sectionHeader confidence="0.99526" genericHeader="method">
3 MCE Criterion Training for CRFs
</sectionHeader>
<bodyText confidence="0.997974153846154">
The Minimum Classification Error (MCE) frame-
work first arose out of a broader family of ap-
proaches to pattern classifier design known as
Generalized Probabilistic Descent (GPD) (Kata-
giri et al., 1991). The MCE criterion minimizes
an empirical loss corresponding to a smooth ap-
proximation of the classification error. This MCE
loss is itself defined in terms of a misclassifica-
tion measure derived from the discriminant func-
tions of a given task. Via the smoothing parame-
ters, the MCE loss function can be made arbitrarily
close to the binary classification error. An impor-
tant property of this framework is that it makes it
</bodyText>
<equation confidence="0.998168076923077">
`)�(y, x; )
1]
LML
λ =
k
∇LmAP = −∇ log p() + 1]
k
1]
+
yEYk
[−F(y*k, xk) (3)
exp(·F(y, xk)) J·F (y, xk) .
Zλ(xk)
</equation>
<page confidence="0.995006">
218
</page>
<bodyText confidence="0.999420615384615">
possible in principle to achieve the optimal Bayes
error even under incorrect modeling assumptions.
It is easy to extend the MCE framework to use
evaluation measures other than the classification
error, namely the linear combination of error rates.
Thus, it is possible to optimize directly a variety of
(smoothed) evaluation measures. This is the ap-
proach proposed in this article.
We first introduce a framework for MCE crite-
rion training, focusing only on error rate optimiza-
tion. Sec. 4 then describes an example of mini-
mizing a different multivariate evaluation measure
using MCE criterion training.
</bodyText>
<subsectionHeader confidence="0.996515">
3.1 Brief Overview of MCE
</subsectionHeader>
<bodyText confidence="0.999597666666667">
Let x E X be an input, and y E Y be an output.
The Bayes decision rule decides the most probable
output y� for x, by using the maximum a posteriori
probability, y� = arg maxyEY p(y|x; A). In gen-
eral, p(y|x; A) can be replaced by a more general
discriminant function, that is,
Using the discriminant functions for the possi-
ble output of the task, the misclassification mea-
sure d() is defined as follows:
</bodyText>
<equation confidence="0.9833585">
d(y∗,x, )=−g(y∗,x, ) +max g(y, x, ). (5)
y∈Y\y�
</equation>
<bodyText confidence="0.999817833333333">
where y* is the correct output for x. Here it can
be noted that, for a given x, d()&gt;0 indicates mis-
classification. By using d(), the minimization of
the error rate can be rewritten as the minimization
of the sum of 0-1 (step) losses of the given training
data. That is, arg minλ Lλ where
</bodyText>
<equation confidence="0.9931715">
�Lλ= δ(d(y∗k, xk, )). (6)
k
</equation>
<bodyText confidence="0.999098909090909">
S(r) is a step function returning 0 if r&lt;0 and 1 oth-
erwise. That is, S is 0 if the value of the discrimi-
nant function of the correct output g(y*k, xk, A) is
greater than that of the maximum incorrect output
g(yk, xk, A), and S is 1 otherwise.
Eq. 5 is not an appropriate function for op-
timization since it is a discontinuous function
w.r.t. the parameters A. One choice of contin-
uous misclassification measure consists of sub-
stituting ‘max’ with ‘soft-max’, maxk rk �
log Ek exp(rk). As a result
</bodyText>
<equation confidence="0.962397857142857">
1
IP
d(y ∗, x, ) = −g∗ +logI A E exp(ψg)J , (7)
L y∈Y\y*
yˆ = arg max (y, x, ).
g (4)
y∈Y
</equation>
<bodyText confidence="0.9295995">
where g* = g(y*, x, A), g = g(y, x, A), and A=
|Y|−
1 1. 0 is a positive constant that represents L p-
norm. When 0 approaches oc, Eq. 7 converges to
Eq. 5. Note that we can design any misclassifi-
cation measure, including non-linear measures for
d(). Some examples are shown in the Appendices.
Of even greater concern is the fact that the step
function S is discontinuous; minimization of Eq.
6 is therefore NP-complete. In the MCE formal-
ism, S() is replaced with an approximated 0-1 loss
function, l(), which we refer to as a smoothing
function. A typical choice for l() is the sigmoid
function, l`9(), which is differentiable and pro-
vides a good approximation of the 0-1 loss when
the hyper-parameter α is large (see Eq. 8). An-
other choice is the (regularized) logistic function,
l&apos;°9(), that gives the upper bound of the 0-1 loss.
Logistic loss is used as a conventional CRF loss
function and provides convexity while the sigmoid
function does not. These two smoothing functions
can be written as follows:
</bodyText>
<equation confidence="0.999967">
l��9 = (1 + exp(−α · d(y∗, x, ) − β))−1
(8)
l&apos;°9 = α−1 · log(1 + exp(α · d(y∗, x, ) + β)),
</equation>
<bodyText confidence="0.999773428571428">
where α and Q are the hyper-parameters of the
training.
We can introduce a regularization term to re-
duce over-fitting, which is derived using the same
sense as in MAP, Eq. 2. Finally, the objective func-
tion of the MCE criterion with the regularization
term can be rewritten in the following form:
</bodyText>
<equation confidence="0.936211">
LMCE = Fl,d,g,λ Ll(xk y∗k)�Nk=1J +  ||φCφ . (9)
</equation>
<bodyText confidence="0.9998265">
Then, the objective function of the MCE criterion
that minimizes the error rate is Eq. 9 and
</bodyText>
<equation confidence="0.950733">
l(d(y∗k, xk, )) (10)
</equation>
<bodyText confidence="0.9932395">
is substituted for Fl�d�g�λ. Since N is constant, we
can eliminate the term 1/N in actual use.
</bodyText>
<subsectionHeader confidence="0.995648">
3.2 Formalization
</subsectionHeader>
<bodyText confidence="0.9998005">
We simply substitute the discriminant function of
the CRFs into that of the MCE criterion:
</bodyText>
<equation confidence="0.95811">
g(y, x, ) = log p(y|x; ) oc  · F(y, x) (11)
</equation>
<bodyText confidence="0.99972">
Basically, CRF training with the MCE criterion
optimizes Eq. 9 with Eq. 11 after the selection of
an appropriate misclassification measure, d(), and
</bodyText>
<equation confidence="0.9937742">
MCE 1
Fl,d,g,λ = N
N
E
k=1
</equation>
<page confidence="0.994095">
219
</page>
<bodyText confidence="0.999874666666667">
smoothing function, l(). Although there is no re-
striction on the choice of d() and l(), in this work
we select sigmoid or logistic functions for l() and
Eq. 7 for d().
The gradient of the loss function Eq. 9 can be
decomposed by the following chain rule:
</bodyText>
<equation confidence="0.983715">
v.C�CE _ ∂F() ∂l() ∂d() + ||λ||1−1
∂l() ·∂d() ·∂s C .
</equation>
<bodyText confidence="0.9968846">
The derivatives of l() w.r.t. d() given in Eq.
8 are written as: ∂lsig/∂d = α · lsig · (1−lsig) and
∂llog/∂d=lsig.
The derivative of d() of Eq. 7 w.r.t. parameters
A is written in this form:
</bodyText>
<equation confidence="0.999187857142857">
Zλ(x, ψ)
+
yEY
� �
Zλ(x, ψ)−exp(ψg*)
Zλ(x, ψ)−exp(ψg*) F(y, x)�
exp(ψg) 1 (12)
</equation>
<bodyText confidence="0.997446222222222">
where g = A · F(y, x), g* = A · F(y*, x), and
Zλ(x, ψ)=EyEY exp(ψg).
Note that we can obtain exactly the same loss
function as ML/MAP with appropriate choices of
F( , l() and d(). The details are provided in the
Appendices. Therefore, ML/MAP can be seen as
one special case of the framework proposed here.
In other words, our method provides a generalized
framework of CRF training.
</bodyText>
<subsectionHeader confidence="0.99517">
3.3 Optimization Procedure
</subsectionHeader>
<bodyText confidence="0.999846285714286">
With linear chain CRFs, we can calculate the ob-
jective function, Eq. 9 combined with Eq. 10,
and the gradient, Eq. 12, by using the variant of
the forward-backward and Viterbi algorithm de-
scribed in (Sha and Pereira, 2003). Moreover, for
the parameter optimization process, we can simply
exploit gradient descent or quasi-Newton methods
such as L-BFGS (Liu and Nocedal, 1989) as well
as ML/MAP optimization.
If we select ψ = oc for Eq. 7, we only need
to evaluate the correct and the maximum incor-
rect output. As we know, the maximum output
can be efficiently calculated with the Viterbi al-
gorithm, which is the same as calculating Eq. 1.
Therefore, we can find the maximum incorrect
output by using the A* algorithm (Hart et al.,
1968), if the maximum output is the correct out-
put, and by using the Viterbi algorithm otherwise.
It may be feared that since the objective func-
tion is not differentiable everywhere for ψ = oc,
problems for optimization would occur. How-
ever, it has been shown (Le Roux and McDer-
mott, 2005) that even simple gradient-based (first-
order) optimization methods such as GPD and (ap-
proximated) second-order methods such as Quick-
Prop (Fahlman, 1988) and BFGS-based methods
have yielded good experimental optimization re-
sults.
</bodyText>
<sectionHeader confidence="0.987175" genericHeader="method">
4 Multivariate Evaluation Measures
</sectionHeader>
<bodyText confidence="0.999974833333333">
Thus far, we have discussed the error rate ver-
sion of MCE. Unlike ML/MAP, the framework of
MCE criterion training allows the embedding of
not only a linear combination of error rates, but
also any evaluation measure, including non-linear
measures.
Several non-linear objective functions, such as
F-score for text classification (Gao et al., 2003),
and BLEU-score and some other evaluation mea-
sures for statistical machine translation (Och,
2003), have been introduced with reference to the
framework of MCE criterion training.
</bodyText>
<subsectionHeader confidence="0.991563">
4.1 Sequential Segmentation Tasks (SSTs)
</subsectionHeader>
<bodyText confidence="0.999987608695652">
Hereafter, we focus solely on CRFs in sequences,
namely the linear chain CRF. We assume that x
and y have the same length: x=(x1, ... , x,,,) and
y=(y1, ... , y.). In a linear chain CRF, yz depends
only on yz−1.
Sequential segmentation tasks (SSTs), such as
text chunking (Chunking) and named entity recog-
nition (NER), which constitute the shared tasks
of the Conference of Natural Language Learn-
ing (CoNLL) 2000, 2002 and 2003, are typical
CRF applications. These tasks require the extrac-
tion of pre-defined segments, referred to as tar-
get segments, from given texts. Fig. 1 shows typ-
ical examples of SSTs. These tasks are gener-
ally treated as sequential labeling problems incor-
porating the IOB tagging scheme (Ramshaw and
Marcus, 1995). The IOB tagging scheme, where
we only consider the IOB2 scheme, is also shown
in Fig. 1. B-X, I-X and O indicate that the word
in question is the beginning of the tag ‘X’, inside
the tag ‘X’, and outside any target segment, re-
spectively. Therefore, a segment is defined as a
sequence of a few outputs.
</bodyText>
<subsectionHeader confidence="0.99729">
4.2 Segmentation F-score Loss for SSTs
</subsectionHeader>
<bodyText confidence="0.992335">
The standard evaluation measure of SSTs is the
segmentation F-score (Sang and Buchholz, 2000):
</bodyText>
<equation confidence="0.9820908">
F _ (γ2 + 1) · TP (13)
y 72 · FN + FP + (γ2 + 1) · TP
∂d()
∂s
·F(y*, x)
</equation>
<page confidence="0.974688">
220
</page>
<figure confidence="0.9912191875">
Text Chunking Named Entity Recognition
Seg.:
NP
VP
NP
VP PP
NP
Seg.:
ORG
PER
LOC
He reckons the current account deficit will narrow to only # 1.8 billion .
B-NP B-VP B-NP I-NP I-NP I-NP B-VP I-VP B-PP B-NP I-NP I-NP I-NP O
x: United Nation official Ekeus Smith heads for Baghdad .
y: B-ORG I-ORG O B-PER I-PER O O B-LOC O
Dep.: y1 y2 y3 y4 y5 y6 y] y8 y9 y10 y11 y12 y13 y14 Dep.: y1 y2 y3 y4 y5 y6 y] y8 y9
</figure>
<figureCaption confidence="0.9797625">
Figure 1: Examples of sequential segmentation tasks (SSTs): text chunking (Chunking) and named entity
recognition (NER).
</figureCaption>
<bodyText confidence="0.999344541666667">
where TP, FP and FN represent true positive,
false positive and false negative counts, respec-
tively.
The individual evaluation units used to calcu-
late TP, FN and PN, are not individual outputs
yi or output sequences y, but rather segments. We
need to define a segment-wise loss, in contrast to
the standard CRF loss, which is sometimes re-
ferred to as an (entire) sequential loss (Kakade
et al., 2002; Altun et al., 2003). First, we con-
sider the point-wise decision w.r.t. Eq. 1, that is,
yi = arg maxyj∈Y1 g(y, x, i, λ). The point-wise
discriminant function can be written as follows:
viously reduces to Eq. 14 if the length of all seg-
ments is 1. Then, the segment-wise misclassifica-
tion measure d(y∗, x, sj, λ) can be obtained sim-
ply by replacing the discriminant function of the
entire sequence g(y, x, λ) with that of segment-
wise g(y, x, sj, λ) in Eq. 7.
Let s∗k be a segment sequence corresponding to
the correct output y∗k for a given xk, and S(xk)
be all possible segments for a given xk. Then, ap-
proximated evaluation functions of TP, FP and
FN can be defined as follows:
</bodyText>
<equation confidence="0.998209333333333">
X hi
1−l(d(y*k, xk, s*j,))·δ(s*j )
k s∗� Es∗k
XTPt =
g(y, x, i, ) = max  · F(y�, x) (14) XF Pt = X
y0EY|y|[7/a] l(d(y*k, xk, s�, ))·δ(s�j)
</equation>
<bodyText confidence="0.997588055555555">
where Yj represents a set of all y whose length
is j, and Y[yi] represents a set of all y that con-
tain yi in the i’th position. Note that the same
output y� can be obtained with Eqs. 1 and 14,
that is, y� = (91, ... , On). This point-wise dis-
criminant function is different from that described
in (Kakade et al., 2002; Altun et al., 2003), which
is calculated based on marginals.
Let ysj be an output sequence correspond-
ing to the j-th segment of y, where sj repre-
sents a sequence of indices of y, that is, sj =
(sj,1,... , sj,|sj|). An example of the Chunk-
ing data shown in Fig. 1, ys¢ is (B-VP, I-VP)
where s4 = (7,8). Let Y[ysj] be a set of all
outputs whose positions from sj,1 to sj,|sj |are
ysj = (ysj,1, ... , ysj,|sj |). Then, we can define a
segment-wise discriminant function w.r.t. Eq. 1.
That is,
</bodyText>
<equation confidence="0.945721">
g(y, x, sj, ) = max  · F(y�, x). (15)
y0EY|y|[y�� ]
</equation>
<bodyText confidence="0.999956142857143">
Note again that the same output y� can be obtained
using Eqs. 1 and 15, as with the piece-wise dis-
criminant function described above. This property
is needed for evaluating segments since we do not
know the correct segments of the test data; we can
maintain consistency even if we use Eq. 1 for test-
ing and Eq. 15 for training. Moreover, Eq. 15 ob-
</bodyText>
<equation confidence="0.997921333333333">
k s0�ES(xk)\s∗k
XF Nt = X l(d(y*k, xk, s*j , ))·δ(s* j )
k s∗� Es∗k
</equation>
<bodyText confidence="0.99937716">
where S(sj) returns 1 if segment sj is a target seg-
ment, and returns 0 otherwise. For the NER data
shown in Fig. 1, ‘ORG’, ‘PER’ and ‘LOC’ are the
target segments, while segments that are labeled
‘O’ in y are not. Since TPl should not have a
value of less than zero, we select sigmoid loss as
the smoothing function l().
The second summation of TPl and FNl per-
forms a summation over correct segments s∗. In
contrast, the second summation in FPl takes all
possible segments into account, but excludes the
correct segments s∗. Although an efficient way to
evaluate all possible segments has been proposed
in the context of semi-Markov CRFs (Sarawagi
and Cohen, 2004), we introduce a simple alter-
native method. If we select 0 = oc for d() in
Eq. 7, we only need to evaluate the segments cor-
responding to the maximum incorrect output y� to
calculate FPl. That is, s0 j E S(xk)\s∗k can be
reduced to s0j E �sk, where sk represents segments
corresponding to the maximum incorrect output y.
In practice, this reduces the calculation cost and so
we used this method for our experiments described
in the next section.
Maximizing the segmentation Fly-score, Eq. 13,
</bodyText>
<page confidence="0.993122">
221
</page>
<bodyText confidence="0.854456">
is equivalent to minimizing γ2�F N+F P
</bodyText>
<equation confidence="0.93879125">
(γ2+1)�TP , since Eq.
1
13 can also be written as Fγ = 1+ γ2·F N+FP
(γ2+1)·TP
</equation>
<bodyText confidence="0.99852175">
an objective function closely reflecting the seg-
mentation Fγ-score based on the MCE criterion
can be written as Eq. 9 while replacing Fl,d,g,.\
with:
</bodyText>
<equation confidence="0.9970865">
MCE-F _Y2 · FNl + FPl ( )
Fl,d,g,\ = (,y2 + 1) · TPl 16 �
</equation>
<bodyText confidence="0.996468">
The derivative of Eq. 16 w.r.t. l() is given by the
following equation:
</bodyText>
<equation confidence="0.9640405">
� γ2
ZD + (γ2Z2)·ZN , if 8(s3) = 1
1 D
ZD , otherwise
</equation>
<bodyText confidence="0.9999844">
where ZN and ZD represent the numerator and de-
nominator of Eq. 16, respectively.
In the optimization process of the segmentation
F-score objective function, we can efficiently cal-
culate Eq. 15 by using the forward and backward
Viterbi algorithm, which is almost the same as
calculating Eq. 3 with a variant of the forward-
backward algorithm (Sha and Pereira, 2003). The
same numerical optimization methods described
in Sec. 3.3 can be employed for this optimization.
</bodyText>
<sectionHeader confidence="0.998197" genericHeader="method">
5 Experiments
</sectionHeader>
<bodyText confidence="0.999940333333333">
We used the same Chunking and ‘English’ NER
task data used for the shared tasks of CoNLL-
2000 (Sang and Buchholz, 2000) and CoNLL-
2003 (Sang and De Meulder, 2003), respectively.
Chunking data was obtained from the Wall
Street Journal (WSJ) corpus: sections 15-18 as
training data (8,936 sentences and 211,727 to-
kens), and section 20 as test data (2,012 sentences
and 47,377 tokens), with 11 different chunk-tags,
such as NP and VP plus the ‘O’ tag, which repre-
sents the outside of any target chunk (segment).
The English NER data was taken from the
Reuters Corpus21. The data consists of 203,621,
51,362 and 46,435 tokens from 14,987, 3,466
and 3,684 sentences in training, development and
test data, respectively, with four named entity
tags, PERSON, LOCATION, ORGANIZATION
and MISC, plus the ‘O’ tag.
</bodyText>
<subsectionHeader confidence="0.98601">
5.1 Comparison Methods and Parameters
</subsectionHeader>
<bodyText confidence="0.942616666666667">
For ML and MAP, we performed exactly the same
training procedure described in (Sha and Pereira,
2003) with L-BFGS optimization. For MCE, we
</bodyText>
<footnote confidence="0.902211">
1http://trec.nist.gov/data/reuters/reuters.html
</footnote>
<bodyText confidence="0.999839333333333">
only considered d() with 0 = oc as described in
Sec. 4.2, and used QuickProp optimization2.
For MAP, MCE and MCE-F, we used the L2-
norm regularization. We selected a value of C
from 1.0 × 10n where n takes a value from -5 to 5
in intervals 1 by development data3. The tuning of
smoothing function hyper-parameters is not con-
sidered in this paper; that is, α=1 and 0=0 were
used for all the experiments.
We evaluated the performance by Eq. 13 with
-y = 1, which is the evaluation measure used in
CoNLL-2000 and 2003. Moreover, we evaluated
the performance by using the average sentence ac-
curacy, since the conventional ML/MAP objective
function reflects this sequential accuracy.
</bodyText>
<subsectionHeader confidence="0.965504">
5.2 Features
</subsectionHeader>
<bodyText confidence="0.99997975">
As regards the basic feature set for Chunking, we
followed (Kudo and Matsumoto, 2001), which is
the same feature set that provided the best result
in CoNLL-2000. We expanded the basic features
by using bigram combinations of the same types
of features, such as words and part-of-speech tags,
within window size 5.
In contrast to the above, we used the original
feature set for NER. We used features derived only
from the data provided by CoNLL-2003 with the
addition of character-level regular expressions of
uppercases [A-Z], lowercases [a-z], digits [0-9] or
others, and prefixes and suffixes of one to four let-
ters. We also expanded the above basic features by
using bigram combinations within window size 5.
Note that we never used features derived from ex-
ternal information such as the Web, or a dictionary,
which have been used in many previous studies but
which are difficult to employ for validating the ex-
periments.
</bodyText>
<subsectionHeader confidence="0.964809">
5.3 Results and Discussion
</subsectionHeader>
<bodyText confidence="0.998771857142857">
Our experiments were designed to investigate the
impact of eliminating the inconsistency between
objective functions and evaluation measures, that
is, to compare ML/MAP and MCE-F.
Table 1 shows the results of Chunking and NER.
The Fγ=1 and ‘Sent’ columns show the perfor-
mance evaluated using segmentation F-score and
</bodyText>
<footnote confidence="0.965941333333333">
2In order to realize faster convergence, we applied online
GPD optimization for the first ten iterations.
3Chunking has no common development set. We first
train the systems with all but the last 2000 sentences in the
training data as a development set to obtain C, and then re-
train them with all the training data.
</footnote>
<figure confidence="0.816959">
. Thus,
MCE-F
aFl,d,g,a
8l()
</figure>
<page confidence="0.995623">
222
</page>
<tableCaption confidence="0.88534925">
Table 2: Performance when initial parameters are
derived from MAP
Table 1: Performance of text chunking and named
entity recognition data (CoNLL-2000 and 2003)
</tableCaption>
<table confidence="0.999257428571429">
Chunking NER
lO n Fry=1 Sent n Fry=1 Sent
MCE-F (sig) 5 93.96 60.44 4 84.72 78.72
MCE (log) 3 93.92 60.19 3 84.30 78.02
MCE (sig) 3 93.85 60.14 3 83.82 77.52
MAP 0 93.71 59.15 0 83.79 77.39
ML - 93.19 56.26 - 82.39 75.71
</table>
<bodyText confidence="0.999647028571429">
sentence accuracy, respectively. MCE-F refers to
the results obtained from optimizing Eq. 9 based
on Eq. 16. In addition, we evaluated the error
rate version of MCE. MCE(log) and MCE(sig)
indicate that logistic and sigmoid functions are
selected for lO, respectively, when optimizing
Eq. 9 based on Eq. 10. Moreover, MCE(log) and
MCE(sig) used dO based on O=oc, and were op-
timized using QuickProp; these are the same con-
ditions as used for MCE-F. We found that MCE-F
exhibited the best results for both Chunking and
NER. There is a significant difference (p &lt; 0.01)
between MCE-F and ML/MAP with the McNemar
test, in terms of the correctness of both individual
outputs, yk� , and sentences, yk.
NER data has 83.3% (170524/204567) and
82.6% (38554/46666) of ‘O’ tags in the training
and test data, respectively while the correspond-
ing values of the Chunking data are only 13.1%
(27902/211727) and 13.0% (6180/47377). In gen-
eral, such an imbalanced data set is unsuitable for
accuracy-based evaluation. This may be one rea-
son why MCE-F improved the NER results much
more than the Chunking results.
The only difference between MCE(sig) and
MCE-F is the objective function. The correspond-
ing results reveal the effectiveness of using an ob-
jective function that is consistent as the evalua-
tion measure for the target task. These results
show that minimizing the error rate is not opti-
mal for improving the segmentation F-score eval-
uation measure. Eliminating the inconsistency be-
tween the task evaluation measure and the objec-
tive function during the training can improve the
overall performance.
</bodyText>
<subsectionHeader confidence="0.796505">
5.3.1 Influence of Initial Parameters
</subsectionHeader>
<bodyText confidence="0.9996895">
While ML/MAP and MCE(log) is convex w.r.t.
the parameters, neither the objective function of
MCE-F, nor that of MCE(sig), is convex. There-
fore, initial parameters can affect the optimization
</bodyText>
<table confidence="0.9910545">
Chunking NER
lO n Fry=1 Sent n Fry=1 Sent
MCE-F (sig) 5 94.03 60.74 4 85.29 79.26
MCE (sig) 3 93.97 60.59 3 84.57 77.71
</table>
<bodyText confidence="0.983096785714286">
results, since QuickProp as well as L-BFGS can
only find local optima.
The previous experiments were only performed
with all parameters initialized at zero. In this ex-
periment, the parameters obtained by the MAP-
trained model were used as the initial values of
MCE-F and MCE(sig). This evaluation setting ap-
pears to be similar to reranking, although we used
exactly the same model and feature set.
Table 2 shows the results of Chunking and NER
obtained with this parameter initialization setting.
When we compare Tables 1 and 2, we find that
the initialization with the MAP parameter values
further improves performance.
</bodyText>
<sectionHeader confidence="0.999964" genericHeader="method">
6 Related Work
</sectionHeader>
<bodyText confidence="0.99995824">
Various loss functions have been proposed for de-
signing CRFs (Kakade et al., 2002; Altun et al.,
2003). This work also takes the design of the loss
functions for CRFs into consideration. However,
we proposed a general framework for designing
these loss function that included non-linear loss
functions, which has not been considered in pre-
vious work.
With Chunking, (Kudo and Matsumoto, 2001)
reported the best F-score of 93.91 with the vot-
ing of several models trained by Support Vec-
tor Machine in the same experimental settings
and with the same feature set. MCE-F with the
MAP parameter initialization achieved an F-score
of 94.03, which surpasses the above result without
manual parameter tuning.
With NER, we cannot make a direct compari-
son with previous work in the same experimental
settings because of the different feature set, as de-
scribed in Sec. 5.2. However, MCE-F showed the
better performance of 85.29 compared with (Mc-
Callum and Li, 2003) of 84.04, which used the
MAP training of CRFs with a feature selection ar-
chitecture, yielding similar results to the MAP re-
sults described here.
</bodyText>
<page confidence="0.998292">
223
</page>
<sectionHeader confidence="0.998983" genericHeader="conclusions">
7 Conclusions
</sectionHeader>
<bodyText confidence="0.999976">
We proposed a framework for training CRFs based
on optimization criteria directly related to target
multivariate evaluation measures. We first pro-
vided a general framework of CRF training based
on MCE criterion. Then, specifically focusing
on SSTs, we introduced an approximate segmen-
tation F-score objective function. Experimental
results showed that eliminating the inconsistency
between the task evaluation measure and the ob-
jective function used during training improves the
overall performance in the target task without any
change in feature set or model.
</bodyText>
<sectionHeader confidence="0.981118" genericHeader="acknowledgments">
Appendices
</sectionHeader>
<subsectionHeader confidence="0.633355">
Misclassification measures
</subsectionHeader>
<bodyText confidence="0.989694">
Another type of misclassification measure using
soft-max is (Katagiri et al., 1991):
</bodyText>
<equation confidence="0.7220615">
d(y, x, A) _ −g* + I
A E
yEY\y*
Another d(), for g in the range [0, oc):
�A uyEY\y* gψ� 1
d(y, x, A) _ �/g*.
</equation>
<subsectionHeader confidence="0.501734">
Comparison of ML/MAP and MCE
</subsectionHeader>
<bodyText confidence="0.999958666666667">
If we select llo9() with α=1 and 0 =0, and use Eq.
7 with 0 = 1 and without the term A for d(). We
can obtain the same loss function as ML/MAP:
</bodyText>
<equation confidence="0.9989658">
log (1 + exp(−g* + log(Za − exp(g*))))
�exp(g*) + (Z� − exp(g*)) �
_
log exp(g*)
_ −g* + log(Za).
</equation>
<sectionHeader confidence="0.997767" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999451753424658">
Y. Altun, M. Johnson, and T. Hofmann. 2003. Investigating
Loss Functions and Optimization Methods for Discrimi-
native Learning of Label Sequences. In Proc. of EMNLP-
2003, pages 145–152.
S. E. Fahlman. 1988. An Empirical Study of Learning
Speech in Backpropagation Networks. In Technical Re-
port CMU-CS-88-162, Carnegie Mellon University.
S. Gao, W. Wu, C.-H. Lee, and T.-S. Chua. 2003. A Maxi-
mal Figure-of-Merit Approach to Text Categorization. In
Proc. of SIGIR’03, pages 174–181.
P. E. Hart, N. J. Nilsson, and B. Raphael. 1968. A Formal
Basis for the Heuristic Determination of Minimum Cost
Paths. IEEE Trans. on Systems Science and Cybernetics,
SSC-4(2):100–107.
M. Jansche. 2005. Maximum Expected F-Measure Training
of Logistic Regression Models. In Proc. of HLT/EMNLP-
2005, pages 692–699.
T. Joachims. 2005. A Support Vector Method for Multivari-
ate Performance Measures. In Proc. ofICML-2005, pages
377–384.
B. H. Juang and S. Katagiri. 1992. Discriminative Learning
for Minimum Error Classification. IEEE Trans. on Signal
Processing, 40(12):3043–3053.
S. Kakade, Y. W. Teh, and S. Roweis. 2002. An Alterna-
tive Objective Function for Markovian Fields. In Proc. of
ICML-2002, pages 275–282.
S. Katagiri, C. H. Lee, and B.-H. Juang. 1991. New Dis-
criminative Training Algorithms based on the Generalized
Descent Method. In Proc. of IEEE Workshop on Neural
Networks for Signal Processing, pages 299–308.
T. Kudo and Y. Matsumoto. 2001. Chunking with Support
Vector Machines. In Proc. of NAACL-2001, pages 192–
199.
J. Lafferty, A. McCallum, and F. Pereira. 2001. Conditional
Random Fields: Probabilistic Models for Segmenting and
Labeling Sequence Data. In Proc. of ICML-2001, pages
282–289.
D. C. Liu and J. Nocedal. 1989. On the Limited Memory
BFGS Method for Large-scale Optimization. Mathematic
Programming, (45):503–528.
A. McCallum and W. Li. 2003. Early Results for Named
Entity Recognition with Conditional Random Fields Fea-
ture Induction and Web-Enhanced Lexicons. In Proc. of
CoNLL-2003, pages 188–191.
F. J. Och. 2003. Minimum Error Rate Training in Statistical
Machine Translation. In Proc. of ACL-2003, pages 160–
167.
Y. Qi, M. Szummer, and T. P. Minka. 2005. Bayesian Con-
ditional Random Fields. In Proc. ofAI &amp; Statistics 2005.
L. A. Ramshaw and M. P. Marcus. 1995. Text Chunking
using Transformation-based Learning. In Proc. of VLC-
1995, pages 88–94.
J. Le Roux and E. McDermott. 2005. Optimization Methods
for Discriminative Training. In Proc. ofEurospeech 2005,
pages 3341–3344.
E. F. Tjong Kim Sang and S. Buchholz. 2000. Introduction
to the CoNLL-2000 Shared Task: Chunking. In Proc. of
CoNLL/LLL-2000, pages 127–132.
E. F. Tjong Kim Sang and F. De Meulder. 2003. Introduction
to the CoNLL-2003 Shared Task: Language-Independent
Named Entity Recognition. In Proc. of CoNLL-2003,
pages 142–147.
S. Sarawagi and W. W. Cohen. 2004. Semi-Markov Condi-
tional Random Fields for Information Extraction. In Proc
ofNIPS-2004.
F. Sha and F. Pereira. 2003. Shallow Parsing with Con-
ditional Random Fields. In Proc. of HLT/NAACL-2003,
pages 213–220.
B. Taskar, C. Guestrin, and D. Koller. 2004. Max-Margin
Markov Networks. In Proc. ofNIPS-2004.
I. Tsochantaridis, T. Joachims and T. Hofmann, and Y. Altun.
2005. Large Margin Methods for Structured and Interde-
pendent Output Variables. JMLR, 6:1453–1484.
</reference>
<figure confidence="0.99036125">
1
1P
.
Jgψ
</figure>
<page confidence="0.984463">
224
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.929050">
<title confidence="0.9974765">Training Conditional Random Fields with Multivariate Evaluation Measures</title>
<author confidence="0.998709">Jun Suzuki</author>
<author confidence="0.998709">Erik McDermott</author>
<author confidence="0.998709">Hideki Isozaki</author>
<affiliation confidence="0.997439">NTT Communication Science Laboratories, NTT Corp.</affiliation>
<address confidence="0.952776">2-4 Hikaridai, Seika-cho, Soraku-gun, Kyoto, 619-0237 Japan</address>
<email confidence="0.988405">mcd,</email>
<abstract confidence="0.999441647058823">This paper proposes a framework for training Conditional Random Fields (CRFs) to optimize multivariate evaluation measures, including non-linear measures such as F-score. Our proposed framework is derived from an error minimization approach that provides a simple solution for optimizing measure. Specifically focusing on sequential segmentation tasks, i.e. text chunking and named entity recognition, we introduce a loss function that closely reflects the target evaluation measure for these tasks, namely, segmentation F-score. Our experiments show that our method performs better than standard CRF training.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Y Altun</author>
<author>M Johnson</author>
<author>T Hofmann</author>
</authors>
<title>Investigating Loss Functions and Optimization Methods for Discriminative Learning of Label Sequences.</title>
<date>2003</date>
<booktitle>In Proc. of EMNLP2003,</booktitle>
<pages>145--152</pages>
<contexts>
<context position="17089" citStr="Altun et al., 2003" startWordPosition="2934" endWordPosition="2937"> y2 y3 y4 y5 y6 y] y8 y9 y10 y11 y12 y13 y14 Dep.: y1 y2 y3 y4 y5 y6 y] y8 y9 Figure 1: Examples of sequential segmentation tasks (SSTs): text chunking (Chunking) and named entity recognition (NER). where TP, FP and FN represent true positive, false positive and false negative counts, respectively. The individual evaluation units used to calculate TP, FN and PN, are not individual outputs yi or output sequences y, but rather segments. We need to define a segment-wise loss, in contrast to the standard CRF loss, which is sometimes referred to as an (entire) sequential loss (Kakade et al., 2002; Altun et al., 2003). First, we consider the point-wise decision w.r.t. Eq. 1, that is, yi = arg maxyj∈Y1 g(y, x, i, λ). The point-wise discriminant function can be written as follows: viously reduces to Eq. 14 if the length of all segments is 1. Then, the segment-wise misclassification measure d(y∗, x, sj, λ) can be obtained simply by replacing the discriminant function of the entire sequence g(y, x, λ) with that of segmentwise g(y, x, sj, λ) in Eq. 7. Let s∗k be a segment sequence corresponding to the correct output y∗k for a given xk, and S(xk) be all possible segments for a given xk. Then, approximated evalua</context>
<context position="27683" citStr="Altun et al., 2003" startWordPosition="4780" endWordPosition="4783">th all parameters initialized at zero. In this experiment, the parameters obtained by the MAPtrained model were used as the initial values of MCE-F and MCE(sig). This evaluation setting appears to be similar to reranking, although we used exactly the same model and feature set. Table 2 shows the results of Chunking and NER obtained with this parameter initialization setting. When we compare Tables 1 and 2, we find that the initialization with the MAP parameter values further improves performance. 6 Related Work Various loss functions have been proposed for designing CRFs (Kakade et al., 2002; Altun et al., 2003). This work also takes the design of the loss functions for CRFs into consideration. However, we proposed a general framework for designing these loss function that included non-linear loss functions, which has not been considered in previous work. With Chunking, (Kudo and Matsumoto, 2001) reported the best F-score of 93.91 with the voting of several models trained by Support Vector Machine in the same experimental settings and with the same feature set. MCE-F with the MAP parameter initialization achieved an F-score of 94.03, which surpasses the above result without manual parameter tuning. W</context>
</contexts>
<marker>Altun, Johnson, Hofmann, 2003</marker>
<rawString>Y. Altun, M. Johnson, and T. Hofmann. 2003. Investigating Loss Functions and Optimization Methods for Discriminative Learning of Label Sequences. In Proc. of EMNLP2003, pages 145–152.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S E Fahlman</author>
</authors>
<title>An Empirical Study of Learning Speech in Backpropagation Networks. In</title>
<date>1988</date>
<tech>Technical Report CMU-CS-88-162,</tech>
<institution>Carnegie Mellon University.</institution>
<contexts>
<context position="14209" citStr="Fahlman, 1988" startWordPosition="2432" endWordPosition="2433">y calculated with the Viterbi algorithm, which is the same as calculating Eq. 1. Therefore, we can find the maximum incorrect output by using the A* algorithm (Hart et al., 1968), if the maximum output is the correct output, and by using the Viterbi algorithm otherwise. It may be feared that since the objective function is not differentiable everywhere for ψ = oc, problems for optimization would occur. However, it has been shown (Le Roux and McDermott, 2005) that even simple gradient-based (firstorder) optimization methods such as GPD and (approximated) second-order methods such as QuickProp (Fahlman, 1988) and BFGS-based methods have yielded good experimental optimization results. 4 Multivariate Evaluation Measures Thus far, we have discussed the error rate version of MCE. Unlike ML/MAP, the framework of MCE criterion training allows the embedding of not only a linear combination of error rates, but also any evaluation measure, including non-linear measures. Several non-linear objective functions, such as F-score for text classification (Gao et al., 2003), and BLEU-score and some other evaluation measures for statistical machine translation (Och, 2003), have been introduced with reference to th</context>
</contexts>
<marker>Fahlman, 1988</marker>
<rawString>S. E. Fahlman. 1988. An Empirical Study of Learning Speech in Backpropagation Networks. In Technical Report CMU-CS-88-162, Carnegie Mellon University.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Gao</author>
<author>W Wu</author>
<author>C-H Lee</author>
<author>T-S Chua</author>
</authors>
<title>A Maximal Figure-of-Merit Approach to Text Categorization.</title>
<date>2003</date>
<booktitle>In Proc. of SIGIR’03,</booktitle>
<pages>174--181</pages>
<contexts>
<context position="14667" citStr="Gao et al., 2003" startWordPosition="2498" endWordPosition="2501">, 2005) that even simple gradient-based (firstorder) optimization methods such as GPD and (approximated) second-order methods such as QuickProp (Fahlman, 1988) and BFGS-based methods have yielded good experimental optimization results. 4 Multivariate Evaluation Measures Thus far, we have discussed the error rate version of MCE. Unlike ML/MAP, the framework of MCE criterion training allows the embedding of not only a linear combination of error rates, but also any evaluation measure, including non-linear measures. Several non-linear objective functions, such as F-score for text classification (Gao et al., 2003), and BLEU-score and some other evaluation measures for statistical machine translation (Och, 2003), have been introduced with reference to the framework of MCE criterion training. 4.1 Sequential Segmentation Tasks (SSTs) Hereafter, we focus solely on CRFs in sequences, namely the linear chain CRF. We assume that x and y have the same length: x=(x1, ... , x,,,) and y=(y1, ... , y.). In a linear chain CRF, yz depends only on yz−1. Sequential segmentation tasks (SSTs), such as text chunking (Chunking) and named entity recognition (NER), which constitute the shared tasks of the Conference of Natu</context>
</contexts>
<marker>Gao, Wu, Lee, Chua, 2003</marker>
<rawString>S. Gao, W. Wu, C.-H. Lee, and T.-S. Chua. 2003. A Maximal Figure-of-Merit Approach to Text Categorization. In Proc. of SIGIR’03, pages 174–181.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P E Hart</author>
<author>N J Nilsson</author>
<author>B Raphael</author>
</authors>
<title>A Formal Basis for the Heuristic Determination of Minimum Cost Paths.</title>
<date>1968</date>
<booktitle>IEEE Trans. on Systems Science and Cybernetics,</booktitle>
<volume>4</volume>
<issue>2</issue>
<contexts>
<context position="13773" citStr="Hart et al., 1968" startWordPosition="2357" endWordPosition="2360"> by using the variant of the forward-backward and Viterbi algorithm described in (Sha and Pereira, 2003). Moreover, for the parameter optimization process, we can simply exploit gradient descent or quasi-Newton methods such as L-BFGS (Liu and Nocedal, 1989) as well as ML/MAP optimization. If we select ψ = oc for Eq. 7, we only need to evaluate the correct and the maximum incorrect output. As we know, the maximum output can be efficiently calculated with the Viterbi algorithm, which is the same as calculating Eq. 1. Therefore, we can find the maximum incorrect output by using the A* algorithm (Hart et al., 1968), if the maximum output is the correct output, and by using the Viterbi algorithm otherwise. It may be feared that since the objective function is not differentiable everywhere for ψ = oc, problems for optimization would occur. However, it has been shown (Le Roux and McDermott, 2005) that even simple gradient-based (firstorder) optimization methods such as GPD and (approximated) second-order methods such as QuickProp (Fahlman, 1988) and BFGS-based methods have yielded good experimental optimization results. 4 Multivariate Evaluation Measures Thus far, we have discussed the error rate version o</context>
</contexts>
<marker>Hart, Nilsson, Raphael, 1968</marker>
<rawString>P. E. Hart, N. J. Nilsson, and B. Raphael. 1968. A Formal Basis for the Heuristic Determination of Minimum Cost Paths. IEEE Trans. on Systems Science and Cybernetics, SSC-4(2):100–107.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Jansche</author>
</authors>
<title>Maximum Expected F-Measure Training of Logistic Regression Models.</title>
<date>2005</date>
<booktitle>In Proc. of HLT/EMNLP2005,</booktitle>
<pages>692--699</pages>
<contexts>
<context position="3381" citStr="Jansche, 2005" startWordPosition="501" endWordPosition="502">erage accuracies, or error rates, rather than a given task-specific evaluation measure. For example, sequential segmentation tasks (SSTs), such as text chunking and named entity recognition, are generally evaluated with the segmentation F-score. This inconsistency between the objective function during training and the task evaluation measure might produce a suboptimal result. In fact, to overcome this inconsistency, an SVM-based multivariate optimization method has recently been proposed (Joachims, 2005). Moreover, an F-score optimization method for logistic regression has also been proposed (Jansche, 2005). In the same spirit as the above studies, we first propose a generalization framework for CRF training that allows us to optimize directly not only the error rate, but also any evaluation measure. In other words, our framework can incorporate any evaluation measure of interest into the loss function and then optimize this loss function as the training objective function. Our proposed framework is fundamentally derived from an approach to (smoothed) error rate minimization well 217 Proceedings of the 21st International Conference on Computational Linguistics and 44th Annual Meeting of the ACL,</context>
</contexts>
<marker>Jansche, 2005</marker>
<rawString>M. Jansche. 2005. Maximum Expected F-Measure Training of Logistic Regression Models. In Proc. of HLT/EMNLP2005, pages 692–699.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Joachims</author>
</authors>
<title>A Support Vector Method for Multivariate Performance Measures. In</title>
<date>2005</date>
<booktitle>Proc. ofICML-2005,</booktitle>
<pages>377--384</pages>
<contexts>
<context position="3276" citStr="Joachims, 2005" startWordPosition="485" endWordPosition="486">such as Fscore, while all of the above criteria achieve optimization based on the linear combination of average accuracies, or error rates, rather than a given task-specific evaluation measure. For example, sequential segmentation tasks (SSTs), such as text chunking and named entity recognition, are generally evaluated with the segmentation F-score. This inconsistency between the objective function during training and the task evaluation measure might produce a suboptimal result. In fact, to overcome this inconsistency, an SVM-based multivariate optimization method has recently been proposed (Joachims, 2005). Moreover, an F-score optimization method for logistic regression has also been proposed (Jansche, 2005). In the same spirit as the above studies, we first propose a generalization framework for CRF training that allows us to optimize directly not only the error rate, but also any evaluation measure. In other words, our framework can incorporate any evaluation measure of interest into the loss function and then optimize this loss function as the training objective function. Our proposed framework is fundamentally derived from an approach to (smoothed) error rate minimization well 217 Proceedi</context>
</contexts>
<marker>Joachims, 2005</marker>
<rawString>T. Joachims. 2005. A Support Vector Method for Multivariate Performance Measures. In Proc. ofICML-2005, pages 377–384.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B H Juang</author>
<author>S Katagiri</author>
</authors>
<title>Discriminative Learning for Minimum Error Classification.</title>
<date>1992</date>
<journal>IEEE Trans. on Signal Processing,</journal>
<volume>40</volume>
<issue>12</issue>
<contexts>
<context position="4202" citStr="Juang and Katagiri, 1992" startWordPosition="625" endWordPosition="628">. In other words, our framework can incorporate any evaluation measure of interest into the loss function and then optimize this loss function as the training objective function. Our proposed framework is fundamentally derived from an approach to (smoothed) error rate minimization well 217 Proceedings of the 21st International Conference on Computational Linguistics and 44th Annual Meeting of the ACL, pages 217–224, Sydney, July 2006. c�2006 Association for Computational Linguistics known in the speech and pattern recognition community, namely the Minimum Classification Error (MCE) framework (Juang and Katagiri, 1992). The framework of MCE criterion training supports the theoretical background of our method. The approach proposed here subsumes the conventional ML/MAP criteria training of CRFs, as described in the following. After describing the new framework, as an example of optimizing multivariate evaluation measures, we focus on SSTs and introduce a segmentation F-score loss function for CRFs. 2 CRFs and Training Criteria Given an input (observation) xE X and parameter vector λ = {A1, ... , AM}, CRFs define the conditional probability p(y|x) of a particular output y E Y as being proportional to a produc</context>
</contexts>
<marker>Juang, Katagiri, 1992</marker>
<rawString>B. H. Juang and S. Katagiri. 1992. Discriminative Learning for Minimum Error Classification. IEEE Trans. on Signal Processing, 40(12):3043–3053.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Kakade</author>
<author>Y W Teh</author>
<author>S Roweis</author>
</authors>
<title>An Alternative Objective Function for Markovian Fields.</title>
<date>2002</date>
<booktitle>In Proc. of ICML-2002,</booktitle>
<pages>275--282</pages>
<contexts>
<context position="17068" citStr="Kakade et al., 2002" startWordPosition="2930" endWordPosition="2933"> O O B-LOC O Dep.: y1 y2 y3 y4 y5 y6 y] y8 y9 y10 y11 y12 y13 y14 Dep.: y1 y2 y3 y4 y5 y6 y] y8 y9 Figure 1: Examples of sequential segmentation tasks (SSTs): text chunking (Chunking) and named entity recognition (NER). where TP, FP and FN represent true positive, false positive and false negative counts, respectively. The individual evaluation units used to calculate TP, FN and PN, are not individual outputs yi or output sequences y, but rather segments. We need to define a segment-wise loss, in contrast to the standard CRF loss, which is sometimes referred to as an (entire) sequential loss (Kakade et al., 2002; Altun et al., 2003). First, we consider the point-wise decision w.r.t. Eq. 1, that is, yi = arg maxyj∈Y1 g(y, x, i, λ). The point-wise discriminant function can be written as follows: viously reduces to Eq. 14 if the length of all segments is 1. Then, the segment-wise misclassification measure d(y∗, x, sj, λ) can be obtained simply by replacing the discriminant function of the entire sequence g(y, x, λ) with that of segmentwise g(y, x, sj, λ) in Eq. 7. Let s∗k be a segment sequence corresponding to the correct output y∗k for a given xk, and S(xk) be all possible segments for a given xk. Then</context>
<context position="27662" citStr="Kakade et al., 2002" startWordPosition="4776" endWordPosition="4779">ere only performed with all parameters initialized at zero. In this experiment, the parameters obtained by the MAPtrained model were used as the initial values of MCE-F and MCE(sig). This evaluation setting appears to be similar to reranking, although we used exactly the same model and feature set. Table 2 shows the results of Chunking and NER obtained with this parameter initialization setting. When we compare Tables 1 and 2, we find that the initialization with the MAP parameter values further improves performance. 6 Related Work Various loss functions have been proposed for designing CRFs (Kakade et al., 2002; Altun et al., 2003). This work also takes the design of the loss functions for CRFs into consideration. However, we proposed a general framework for designing these loss function that included non-linear loss functions, which has not been considered in previous work. With Chunking, (Kudo and Matsumoto, 2001) reported the best F-score of 93.91 with the voting of several models trained by Support Vector Machine in the same experimental settings and with the same feature set. MCE-F with the MAP parameter initialization achieved an F-score of 94.03, which surpasses the above result without manua</context>
</contexts>
<marker>Kakade, Teh, Roweis, 2002</marker>
<rawString>S. Kakade, Y. W. Teh, and S. Roweis. 2002. An Alternative Objective Function for Markovian Fields. In Proc. of ICML-2002, pages 275–282.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Katagiri</author>
<author>C H Lee</author>
<author>B-H Juang</author>
</authors>
<title>New Discriminative Training Algorithms based on the Generalized Descent Method.</title>
<date>1991</date>
<booktitle>In Proc. of IEEE Workshop on Neural Networks for Signal Processing,</booktitle>
<pages>299--308</pages>
<contexts>
<context position="7523" citStr="Katagiri et al., 1991" startWordPosition="1211" endWordPosition="1215"> to the ML and MAP criterion training of CRFs as ML/MAP. In order to estimate the parameters λ, we seek a zero of the gradient over the parameters λ: The gradient of ML is Eq. 3 without the gradient term of the prior, −V log p(λ). The details of actual optimization procedures for linear chain CRFs, which are typical CRF applications, have already been reported (Sha and Pereira, 2003). 3 MCE Criterion Training for CRFs The Minimum Classification Error (MCE) framework first arose out of a broader family of approaches to pattern classifier design known as Generalized Probabilistic Descent (GPD) (Katagiri et al., 1991). The MCE criterion minimizes an empirical loss corresponding to a smooth approximation of the classification error. This MCE loss is itself defined in terms of a misclassification measure derived from the discriminant functions of a given task. Via the smoothing parameters, the MCE loss function can be made arbitrarily close to the binary classification error. An important property of this framework is that it makes it `)�(y, x; ) 1] LML λ = k ∇LmAP = −∇ log p() + 1] k 1] + yEYk [−F(y*k, xk) (3) exp(·F(y, xk)) J·F (y, xk) . Zλ(xk) 218 possible in principle to achieve the optimal Bayes erro</context>
</contexts>
<marker>Katagiri, Lee, Juang, 1991</marker>
<rawString>S. Katagiri, C. H. Lee, and B.-H. Juang. 1991. New Discriminative Training Algorithms based on the Generalized Descent Method. In Proc. of IEEE Workshop on Neural Networks for Signal Processing, pages 299–308.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Kudo</author>
<author>Y Matsumoto</author>
</authors>
<title>Chunking with Support Vector Machines.</title>
<date>2001</date>
<booktitle>In Proc. of NAACL-2001,</booktitle>
<pages>192--199</pages>
<contexts>
<context position="23066" citStr="Kudo and Matsumoto, 2001" startWordPosition="4015" endWordPosition="4018">We selected a value of C from 1.0 × 10n where n takes a value from -5 to 5 in intervals 1 by development data3. The tuning of smoothing function hyper-parameters is not considered in this paper; that is, α=1 and 0=0 were used for all the experiments. We evaluated the performance by Eq. 13 with -y = 1, which is the evaluation measure used in CoNLL-2000 and 2003. Moreover, we evaluated the performance by using the average sentence accuracy, since the conventional ML/MAP objective function reflects this sequential accuracy. 5.2 Features As regards the basic feature set for Chunking, we followed (Kudo and Matsumoto, 2001), which is the same feature set that provided the best result in CoNLL-2000. We expanded the basic features by using bigram combinations of the same types of features, such as words and part-of-speech tags, within window size 5. In contrast to the above, we used the original feature set for NER. We used features derived only from the data provided by CoNLL-2003 with the addition of character-level regular expressions of uppercases [A-Z], lowercases [a-z], digits [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] or others, and prefixes and suffixes of one to four letters. We also expanded the above basic features</context>
<context position="27973" citStr="Kudo and Matsumoto, 2001" startWordPosition="4825" endWordPosition="4828"> 2 shows the results of Chunking and NER obtained with this parameter initialization setting. When we compare Tables 1 and 2, we find that the initialization with the MAP parameter values further improves performance. 6 Related Work Various loss functions have been proposed for designing CRFs (Kakade et al., 2002; Altun et al., 2003). This work also takes the design of the loss functions for CRFs into consideration. However, we proposed a general framework for designing these loss function that included non-linear loss functions, which has not been considered in previous work. With Chunking, (Kudo and Matsumoto, 2001) reported the best F-score of 93.91 with the voting of several models trained by Support Vector Machine in the same experimental settings and with the same feature set. MCE-F with the MAP parameter initialization achieved an F-score of 94.03, which surpasses the above result without manual parameter tuning. With NER, we cannot make a direct comparison with previous work in the same experimental settings because of the different feature set, as described in Sec. 5.2. However, MCE-F showed the better performance of 85.29 compared with (McCallum and Li, 2003) of 84.04, which used the MAP training</context>
</contexts>
<marker>Kudo, Matsumoto, 2001</marker>
<rawString>T. Kudo and Y. Matsumoto. 2001. Chunking with Support Vector Machines. In Proc. of NAACL-2001, pages 192– 199.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Lafferty</author>
<author>A McCallum</author>
<author>F Pereira</author>
</authors>
<title>Conditional Random Fields: Probabilistic Models for Segmenting and Labeling Sequence Data.</title>
<date>2001</date>
<booktitle>In Proc. of ICML-2001,</booktitle>
<pages>282--289</pages>
<contexts>
<context position="1021" citStr="Lafferty et al., 2001" startWordPosition="135" endWordPosition="138">es, including non-linear measures such as F-score. Our proposed framework is derived from an error minimization approach that provides a simple solution for directly optimizing any evaluation measure. Specifically focusing on sequential segmentation tasks, i.e. text chunking and named entity recognition, we introduce a loss function that closely reflects the target evaluation measure for these tasks, namely, segmentation F-score. Our experiments show that our method performs better than standard CRF training. 1 Introduction Conditional random fields (CRFs) are a recently introduced formalism (Lafferty et al., 2001) for representing a conditional model p(ylx), where both a set of inputs, x, and a set of outputs, y, display non-trivial interdependency. CRFs are basically defined as a discriminative model of Markov random fields conditioned on inputs (observations) x. Unlike generative models, CRFs model only the output y’s distribution over x. This allows CRFs to use flexible features such as complicated functions of multiple observations. The modeling power of CRFs has been of great benefit in several applications, such as shallow parsing (Sha and Pereira, 2003) and information extraction (McCallum and L</context>
</contexts>
<marker>Lafferty, McCallum, Pereira, 2001</marker>
<rawString>J. Lafferty, A. McCallum, and F. Pereira. 2001. Conditional Random Fields: Probabilistic Models for Segmenting and Labeling Sequence Data. In Proc. of ICML-2001, pages 282–289.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D C Liu</author>
<author>J Nocedal</author>
</authors>
<date>1989</date>
<booktitle>On the Limited Memory BFGS Method for Large-scale Optimization. Mathematic Programming,</booktitle>
<pages>45--503</pages>
<contexts>
<context position="13412" citStr="Liu and Nocedal, 1989" startWordPosition="2290" endWordPosition="2293">( , l() and d(). The details are provided in the Appendices. Therefore, ML/MAP can be seen as one special case of the framework proposed here. In other words, our method provides a generalized framework of CRF training. 3.3 Optimization Procedure With linear chain CRFs, we can calculate the objective function, Eq. 9 combined with Eq. 10, and the gradient, Eq. 12, by using the variant of the forward-backward and Viterbi algorithm described in (Sha and Pereira, 2003). Moreover, for the parameter optimization process, we can simply exploit gradient descent or quasi-Newton methods such as L-BFGS (Liu and Nocedal, 1989) as well as ML/MAP optimization. If we select ψ = oc for Eq. 7, we only need to evaluate the correct and the maximum incorrect output. As we know, the maximum output can be efficiently calculated with the Viterbi algorithm, which is the same as calculating Eq. 1. Therefore, we can find the maximum incorrect output by using the A* algorithm (Hart et al., 1968), if the maximum output is the correct output, and by using the Viterbi algorithm otherwise. It may be feared that since the objective function is not differentiable everywhere for ψ = oc, problems for optimization would occur. However, it</context>
</contexts>
<marker>Liu, Nocedal, 1989</marker>
<rawString>D. C. Liu and J. Nocedal. 1989. On the Limited Memory BFGS Method for Large-scale Optimization. Mathematic Programming, (45):503–528.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A McCallum</author>
<author>W Li</author>
</authors>
<title>Early Results for Named Entity Recognition with Conditional Random Fields Feature Induction and Web-Enhanced Lexicons.</title>
<date>2003</date>
<booktitle>In Proc. of CoNLL-2003,</booktitle>
<pages>188--191</pages>
<contexts>
<context position="1629" citStr="McCallum and Li, 2003" startWordPosition="233" endWordPosition="236"> et al., 2001) for representing a conditional model p(ylx), where both a set of inputs, x, and a set of outputs, y, display non-trivial interdependency. CRFs are basically defined as a discriminative model of Markov random fields conditioned on inputs (observations) x. Unlike generative models, CRFs model only the output y’s distribution over x. This allows CRFs to use flexible features such as complicated functions of multiple observations. The modeling power of CRFs has been of great benefit in several applications, such as shallow parsing (Sha and Pereira, 2003) and information extraction (McCallum and Li, 2003). Since the introduction of CRFs, intensive research has been undertaken to boost their effectiveness. The first approach to estimating CRF parameters is the maximum likelihood (ML) criterion over conditional probability p(ylx) itself (Lafferty et al., 2001). The ML criterion, however, is prone to over-fitting the training data, especially since CRFs are often trained with a very large number of correlated features. The maximum a posteriori (MAP) criterion over parameters, A, given x and y is the natural choice for reducing over-fitting (Sha and Pereira, 2003). Moreover, the Bayes approach, wh</context>
<context position="28535" citStr="McCallum and Li, 2003" startWordPosition="4918" endWordPosition="4922"> in previous work. With Chunking, (Kudo and Matsumoto, 2001) reported the best F-score of 93.91 with the voting of several models trained by Support Vector Machine in the same experimental settings and with the same feature set. MCE-F with the MAP parameter initialization achieved an F-score of 94.03, which surpasses the above result without manual parameter tuning. With NER, we cannot make a direct comparison with previous work in the same experimental settings because of the different feature set, as described in Sec. 5.2. However, MCE-F showed the better performance of 85.29 compared with (McCallum and Li, 2003) of 84.04, which used the MAP training of CRFs with a feature selection architecture, yielding similar results to the MAP results described here. 223 7 Conclusions We proposed a framework for training CRFs based on optimization criteria directly related to target multivariate evaluation measures. We first provided a general framework of CRF training based on MCE criterion. Then, specifically focusing on SSTs, we introduced an approximate segmentation F-score objective function. Experimental results showed that eliminating the inconsistency between the task evaluation measure and the objective </context>
</contexts>
<marker>McCallum, Li, 2003</marker>
<rawString>A. McCallum and W. Li. 2003. Early Results for Named Entity Recognition with Conditional Random Fields Feature Induction and Web-Enhanced Lexicons. In Proc. of CoNLL-2003, pages 188–191.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F J Och</author>
</authors>
<title>Minimum Error Rate Training in Statistical Machine Translation.</title>
<date>2003</date>
<booktitle>In Proc. of ACL-2003,</booktitle>
<pages>160--167</pages>
<contexts>
<context position="14766" citStr="Och, 2003" startWordPosition="2514" endWordPosition="2515">econd-order methods such as QuickProp (Fahlman, 1988) and BFGS-based methods have yielded good experimental optimization results. 4 Multivariate Evaluation Measures Thus far, we have discussed the error rate version of MCE. Unlike ML/MAP, the framework of MCE criterion training allows the embedding of not only a linear combination of error rates, but also any evaluation measure, including non-linear measures. Several non-linear objective functions, such as F-score for text classification (Gao et al., 2003), and BLEU-score and some other evaluation measures for statistical machine translation (Och, 2003), have been introduced with reference to the framework of MCE criterion training. 4.1 Sequential Segmentation Tasks (SSTs) Hereafter, we focus solely on CRFs in sequences, namely the linear chain CRF. We assume that x and y have the same length: x=(x1, ... , x,,,) and y=(y1, ... , y.). In a linear chain CRF, yz depends only on yz−1. Sequential segmentation tasks (SSTs), such as text chunking (Chunking) and named entity recognition (NER), which constitute the shared tasks of the Conference of Natural Language Learning (CoNLL) 2000, 2002 and 2003, are typical CRF applications. These tasks requir</context>
</contexts>
<marker>Och, 2003</marker>
<rawString>F. J. Och. 2003. Minimum Error Rate Training in Statistical Machine Translation. In Proc. of ACL-2003, pages 160– 167.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Y Qi</author>
<author>M Szummer</author>
<author>T P Minka</author>
</authors>
<title>Bayesian Conditional Random Fields.</title>
<date>2005</date>
<booktitle>In Proc. ofAI &amp; Statistics</booktitle>
<contexts>
<context position="2338" citStr="Qi et al., 2005" startWordPosition="346" endWordPosition="349">tiveness. The first approach to estimating CRF parameters is the maximum likelihood (ML) criterion over conditional probability p(ylx) itself (Lafferty et al., 2001). The ML criterion, however, is prone to over-fitting the training data, especially since CRFs are often trained with a very large number of correlated features. The maximum a posteriori (MAP) criterion over parameters, A, given x and y is the natural choice for reducing over-fitting (Sha and Pereira, 2003). Moreover, the Bayes approach, which optimizes both MAP and the prior distribution of the parameters, has also been proposed (Qi et al., 2005). Furthermore, large margin criteria have been employed to optimize the model parameters (Taskar et al., 2004; Tsochantaridis et al., 2005). These training criteria have yielded excellent results for various tasks. However, real world tasks are evaluated by task-specific evaluation measures, including non-linear measures such as Fscore, while all of the above criteria achieve optimization based on the linear combination of average accuracies, or error rates, rather than a given task-specific evaluation measure. For example, sequential segmentation tasks (SSTs), such as text chunking and named </context>
</contexts>
<marker>Qi, Szummer, Minka, 2005</marker>
<rawString>Y. Qi, M. Szummer, and T. P. Minka. 2005. Bayesian Conditional Random Fields. In Proc. ofAI &amp; Statistics 2005.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L A Ramshaw</author>
<author>M P Marcus</author>
</authors>
<title>Text Chunking using Transformation-based Learning.</title>
<date>1995</date>
<booktitle>In Proc. of VLC1995,</booktitle>
<pages>88--94</pages>
<contexts>
<context position="15626" citStr="Ramshaw and Marcus, 1995" startWordPosition="2654" endWordPosition="2657">me length: x=(x1, ... , x,,,) and y=(y1, ... , y.). In a linear chain CRF, yz depends only on yz−1. Sequential segmentation tasks (SSTs), such as text chunking (Chunking) and named entity recognition (NER), which constitute the shared tasks of the Conference of Natural Language Learning (CoNLL) 2000, 2002 and 2003, are typical CRF applications. These tasks require the extraction of pre-defined segments, referred to as target segments, from given texts. Fig. 1 shows typical examples of SSTs. These tasks are generally treated as sequential labeling problems incorporating the IOB tagging scheme (Ramshaw and Marcus, 1995). The IOB tagging scheme, where we only consider the IOB2 scheme, is also shown in Fig. 1. B-X, I-X and O indicate that the word in question is the beginning of the tag ‘X’, inside the tag ‘X’, and outside any target segment, respectively. Therefore, a segment is defined as a sequence of a few outputs. 4.2 Segmentation F-score Loss for SSTs The standard evaluation measure of SSTs is the segmentation F-score (Sang and Buchholz, 2000): F _ (γ2 + 1) · TP (13) y 72 · FN + FP + (γ2 + 1) · TP ∂d() ∂s ·F(y*, x) 220 Text Chunking Named Entity Recognition Seg.: NP VP NP VP PP NP Seg.: ORG PER LOC He re</context>
</contexts>
<marker>Ramshaw, Marcus, 1995</marker>
<rawString>L. A. Ramshaw and M. P. Marcus. 1995. Text Chunking using Transformation-based Learning. In Proc. of VLC1995, pages 88–94.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Le Roux</author>
<author>E McDermott</author>
</authors>
<title>Optimization Methods for Discriminative Training. In</title>
<date>2005</date>
<booktitle>Proc. ofEurospeech</booktitle>
<pages>3341--3344</pages>
<marker>Le Roux, McDermott, 2005</marker>
<rawString>J. Le Roux and E. McDermott. 2005. Optimization Methods for Discriminative Training. In Proc. ofEurospeech 2005, pages 3341–3344.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E F Tjong Kim Sang</author>
<author>S Buchholz</author>
</authors>
<title>Introduction to the CoNLL-2000 Shared Task: Chunking.</title>
<date>2000</date>
<booktitle>In Proc. of CoNLL/LLL-2000,</booktitle>
<pages>127--132</pages>
<contexts>
<context position="16062" citStr="Sang and Buchholz, 2000" startWordPosition="2731" endWordPosition="2734">, from given texts. Fig. 1 shows typical examples of SSTs. These tasks are generally treated as sequential labeling problems incorporating the IOB tagging scheme (Ramshaw and Marcus, 1995). The IOB tagging scheme, where we only consider the IOB2 scheme, is also shown in Fig. 1. B-X, I-X and O indicate that the word in question is the beginning of the tag ‘X’, inside the tag ‘X’, and outside any target segment, respectively. Therefore, a segment is defined as a sequence of a few outputs. 4.2 Segmentation F-score Loss for SSTs The standard evaluation measure of SSTs is the segmentation F-score (Sang and Buchholz, 2000): F _ (γ2 + 1) · TP (13) y 72 · FN + FP + (γ2 + 1) · TP ∂d() ∂s ·F(y*, x) 220 Text Chunking Named Entity Recognition Seg.: NP VP NP VP PP NP Seg.: ORG PER LOC He reckons the current account deficit will narrow to only # 1.8 billion . B-NP B-VP B-NP I-NP I-NP I-NP B-VP I-VP B-PP B-NP I-NP I-NP I-NP O x: United Nation official Ekeus Smith heads for Baghdad . y: B-ORG I-ORG O B-PER I-PER O O B-LOC O Dep.: y1 y2 y3 y4 y5 y6 y] y8 y9 y10 y11 y12 y13 y14 Dep.: y1 y2 y3 y4 y5 y6 y] y8 y9 Figure 1: Examples of sequential segmentation tasks (SSTs): text chunking (Chunking) and named entity recognition </context>
<context position="21379" citStr="Sang and Buchholz, 2000" startWordPosition="3740" endWordPosition="3743">3) = 1 1 D ZD , otherwise where ZN and ZD represent the numerator and denominator of Eq. 16, respectively. In the optimization process of the segmentation F-score objective function, we can efficiently calculate Eq. 15 by using the forward and backward Viterbi algorithm, which is almost the same as calculating Eq. 3 with a variant of the forwardbackward algorithm (Sha and Pereira, 2003). The same numerical optimization methods described in Sec. 3.3 can be employed for this optimization. 5 Experiments We used the same Chunking and ‘English’ NER task data used for the shared tasks of CoNLL2000 (Sang and Buchholz, 2000) and CoNLL2003 (Sang and De Meulder, 2003), respectively. Chunking data was obtained from the Wall Street Journal (WSJ) corpus: sections 15-18 as training data (8,936 sentences and 211,727 tokens), and section 20 as test data (2,012 sentences and 47,377 tokens), with 11 different chunk-tags, such as NP and VP plus the ‘O’ tag, which represents the outside of any target chunk (segment). The English NER data was taken from the Reuters Corpus21. The data consists of 203,621, 51,362 and 46,435 tokens from 14,987, 3,466 and 3,684 sentences in training, development and test data, respectively, with </context>
</contexts>
<marker>Sang, Buchholz, 2000</marker>
<rawString>E. F. Tjong Kim Sang and S. Buchholz. 2000. Introduction to the CoNLL-2000 Shared Task: Chunking. In Proc. of CoNLL/LLL-2000, pages 127–132.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E F Tjong Kim Sang</author>
<author>F De Meulder</author>
</authors>
<title>Introduction to the CoNLL-2003 Shared Task: Language-Independent Named Entity Recognition.</title>
<date>2003</date>
<booktitle>In Proc. of CoNLL-2003,</booktitle>
<pages>142--147</pages>
<marker>Sang, De Meulder, 2003</marker>
<rawString>E. F. Tjong Kim Sang and F. De Meulder. 2003. Introduction to the CoNLL-2003 Shared Task: Language-Independent Named Entity Recognition. In Proc. of CoNLL-2003, pages 142–147.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Sarawagi</author>
<author>W W Cohen</author>
</authors>
<title>Semi-Markov Conditional Random Fields for Information Extraction. In</title>
<date>2004</date>
<booktitle>Proc ofNIPS-2004.</booktitle>
<contexts>
<context position="19834" citStr="Sarawagi and Cohen, 2004" startWordPosition="3460" endWordPosition="3463">a target segment, and returns 0 otherwise. For the NER data shown in Fig. 1, ‘ORG’, ‘PER’ and ‘LOC’ are the target segments, while segments that are labeled ‘O’ in y are not. Since TPl should not have a value of less than zero, we select sigmoid loss as the smoothing function l(). The second summation of TPl and FNl performs a summation over correct segments s∗. In contrast, the second summation in FPl takes all possible segments into account, but excludes the correct segments s∗. Although an efficient way to evaluate all possible segments has been proposed in the context of semi-Markov CRFs (Sarawagi and Cohen, 2004), we introduce a simple alternative method. If we select 0 = oc for d() in Eq. 7, we only need to evaluate the segments corresponding to the maximum incorrect output y� to calculate FPl. That is, s0 j E S(xk)\s∗k can be reduced to s0j E �sk, where sk represents segments corresponding to the maximum incorrect output y. In practice, this reduces the calculation cost and so we used this method for our experiments described in the next section. Maximizing the segmentation Fly-score, Eq. 13, 221 is equivalent to minimizing γ2�F N+F P (γ2+1)�TP , since Eq. 1 13 can also be written as Fγ = 1+ γ2·F N+</context>
</contexts>
<marker>Sarawagi, Cohen, 2004</marker>
<rawString>S. Sarawagi and W. W. Cohen. 2004. Semi-Markov Conditional Random Fields for Information Extraction. In Proc ofNIPS-2004.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F Sha</author>
<author>F Pereira</author>
</authors>
<title>Shallow Parsing with Conditional Random Fields.</title>
<date>2003</date>
<booktitle>In Proc. of HLT/NAACL-2003,</booktitle>
<pages>213--220</pages>
<contexts>
<context position="1578" citStr="Sha and Pereira, 2003" startWordPosition="225" endWordPosition="228">CRFs) are a recently introduced formalism (Lafferty et al., 2001) for representing a conditional model p(ylx), where both a set of inputs, x, and a set of outputs, y, display non-trivial interdependency. CRFs are basically defined as a discriminative model of Markov random fields conditioned on inputs (observations) x. Unlike generative models, CRFs model only the output y’s distribution over x. This allows CRFs to use flexible features such as complicated functions of multiple observations. The modeling power of CRFs has been of great benefit in several applications, such as shallow parsing (Sha and Pereira, 2003) and information extraction (McCallum and Li, 2003). Since the introduction of CRFs, intensive research has been undertaken to boost their effectiveness. The first approach to estimating CRF parameters is the maximum likelihood (ML) criterion over conditional probability p(ylx) itself (Lafferty et al., 2001). The ML criterion, however, is prone to over-fitting the training data, especially since CRFs are often trained with a very large number of correlated features. The maximum a posteriori (MAP) criterion over parameters, A, given x and y is the natural choice for reducing over-fitting (Sha a</context>
<context position="5178" citStr="Sha and Pereira, 2003" startWordPosition="795" endWordPosition="798"> F-score loss function for CRFs. 2 CRFs and Training Criteria Given an input (observation) xE X and parameter vector λ = {A1, ... , AM}, CRFs define the conditional probability p(y|x) of a particular output y E Y as being proportional to a product of potential functions on the cliques of a graph, which represents the interdependency of y and x. That is: p(y|x; ) = 1 ri Zλ(x) J(y,x) where 4bc(y, x; λ) is a non-negative real value potential function on a clique c E C(y, x). Zλ(x)= E 11cEC(�y,x) �c(�y, x; λ) is a normalization �yEY factor over all output values, Y. Following the definitions of (Sha and Pereira, 2003), a log-linear combination of weighted features, 4bc(y, x; λ) = exp(λ · fc(y, x)), is used as individual potential functions, where f c represents a feature vector obtained from the corresponding clique c. That is, 11cEC(y,x) `Fc(y, x) = exp(λ·F(y, x)), where F(y, x)=Ec fc(y, x) is the CRF’s global feature vector for x and y. The most probable output y� is given by y� = arg maxyEY p(y|x; λ). However Zλ(x) never affects the decision of y� since Zλ(x) does not depend on y. Thus, we can obtain the following discriminant function for CRFs: y� = arg max  · F(y, x). (1) yEY The maximum (log-)likeli</context>
<context position="7287" citStr="Sha and Pereira, 2003" startWordPosition="1174" endWordPosition="1177">per only considers Lφ-norm prior, p(λ) a exp(−||λ||φ/0C), which becomes a Gaussian prior when 0=2. The essential difference between ML and MAP is simply that MAP has this prior term in the objective function. This paper sometimes refers to the ML and MAP criterion training of CRFs as ML/MAP. In order to estimate the parameters λ, we seek a zero of the gradient over the parameters λ: The gradient of ML is Eq. 3 without the gradient term of the prior, −V log p(λ). The details of actual optimization procedures for linear chain CRFs, which are typical CRF applications, have already been reported (Sha and Pereira, 2003). 3 MCE Criterion Training for CRFs The Minimum Classification Error (MCE) framework first arose out of a broader family of approaches to pattern classifier design known as Generalized Probabilistic Descent (GPD) (Katagiri et al., 1991). The MCE criterion minimizes an empirical loss corresponding to a smooth approximation of the classification error. This MCE loss is itself defined in terms of a misclassification measure derived from the discriminant functions of a given task. Via the smoothing parameters, the MCE loss function can be made arbitrarily close to the binary classification error. </context>
<context position="13259" citStr="Sha and Pereira, 2003" startWordPosition="2268" endWordPosition="2271">A · F(y, x), g* = A · F(y*, x), and Zλ(x, ψ)=EyEY exp(ψg). Note that we can obtain exactly the same loss function as ML/MAP with appropriate choices of F( , l() and d(). The details are provided in the Appendices. Therefore, ML/MAP can be seen as one special case of the framework proposed here. In other words, our method provides a generalized framework of CRF training. 3.3 Optimization Procedure With linear chain CRFs, we can calculate the objective function, Eq. 9 combined with Eq. 10, and the gradient, Eq. 12, by using the variant of the forward-backward and Viterbi algorithm described in (Sha and Pereira, 2003). Moreover, for the parameter optimization process, we can simply exploit gradient descent or quasi-Newton methods such as L-BFGS (Liu and Nocedal, 1989) as well as ML/MAP optimization. If we select ψ = oc for Eq. 7, we only need to evaluate the correct and the maximum incorrect output. As we know, the maximum output can be efficiently calculated with the Viterbi algorithm, which is the same as calculating Eq. 1. Therefore, we can find the maximum incorrect output by using the A* algorithm (Hart et al., 1968), if the maximum output is the correct output, and by using the Viterbi algorithm othe</context>
<context position="21144" citStr="Sha and Pereira, 2003" startWordPosition="3701" endWordPosition="3704"> the MCE criterion can be written as Eq. 9 while replacing Fl,d,g,.\ with: MCE-F _Y2 · FNl + FPl ( ) Fl,d,g,\ = (,y2 + 1) · TPl 16 � The derivative of Eq. 16 w.r.t. l() is given by the following equation: � γ2 ZD + (γ2Z2)·ZN , if 8(s3) = 1 1 D ZD , otherwise where ZN and ZD represent the numerator and denominator of Eq. 16, respectively. In the optimization process of the segmentation F-score objective function, we can efficiently calculate Eq. 15 by using the forward and backward Viterbi algorithm, which is almost the same as calculating Eq. 3 with a variant of the forwardbackward algorithm (Sha and Pereira, 2003). The same numerical optimization methods described in Sec. 3.3 can be employed for this optimization. 5 Experiments We used the same Chunking and ‘English’ NER task data used for the shared tasks of CoNLL2000 (Sang and Buchholz, 2000) and CoNLL2003 (Sang and De Meulder, 2003), respectively. Chunking data was obtained from the Wall Street Journal (WSJ) corpus: sections 15-18 as training data (8,936 sentences and 211,727 tokens), and section 20 as test data (2,012 sentences and 47,377 tokens), with 11 different chunk-tags, such as NP and VP plus the ‘O’ tag, which represents the outside of any </context>
</contexts>
<marker>Sha, Pereira, 2003</marker>
<rawString>F. Sha and F. Pereira. 2003. Shallow Parsing with Conditional Random Fields. In Proc. of HLT/NAACL-2003, pages 213–220.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Taskar</author>
<author>C Guestrin</author>
<author>D Koller</author>
</authors>
<title>Max-Margin Markov Networks.</title>
<date>2004</date>
<booktitle>In Proc. ofNIPS-2004.</booktitle>
<contexts>
<context position="2447" citStr="Taskar et al., 2004" startWordPosition="363" endWordPosition="366">nditional probability p(ylx) itself (Lafferty et al., 2001). The ML criterion, however, is prone to over-fitting the training data, especially since CRFs are often trained with a very large number of correlated features. The maximum a posteriori (MAP) criterion over parameters, A, given x and y is the natural choice for reducing over-fitting (Sha and Pereira, 2003). Moreover, the Bayes approach, which optimizes both MAP and the prior distribution of the parameters, has also been proposed (Qi et al., 2005). Furthermore, large margin criteria have been employed to optimize the model parameters (Taskar et al., 2004; Tsochantaridis et al., 2005). These training criteria have yielded excellent results for various tasks. However, real world tasks are evaluated by task-specific evaluation measures, including non-linear measures such as Fscore, while all of the above criteria achieve optimization based on the linear combination of average accuracies, or error rates, rather than a given task-specific evaluation measure. For example, sequential segmentation tasks (SSTs), such as text chunking and named entity recognition, are generally evaluated with the segmentation F-score. This inconsistency between the obj</context>
</contexts>
<marker>Taskar, Guestrin, Koller, 2004</marker>
<rawString>B. Taskar, C. Guestrin, and D. Koller. 2004. Max-Margin Markov Networks. In Proc. ofNIPS-2004.</rawString>
</citation>
<citation valid="true">
<authors>
<author>I Tsochantaridis</author>
<author>T Joachims</author>
<author>T Hofmann</author>
<author>Y Altun</author>
</authors>
<title>Large Margin Methods for Structured and Interdependent Output Variables.</title>
<date>2005</date>
<pages>6--1453</pages>
<publisher>JMLR,</publisher>
<contexts>
<context position="2477" citStr="Tsochantaridis et al., 2005" startWordPosition="367" endWordPosition="370"> p(ylx) itself (Lafferty et al., 2001). The ML criterion, however, is prone to over-fitting the training data, especially since CRFs are often trained with a very large number of correlated features. The maximum a posteriori (MAP) criterion over parameters, A, given x and y is the natural choice for reducing over-fitting (Sha and Pereira, 2003). Moreover, the Bayes approach, which optimizes both MAP and the prior distribution of the parameters, has also been proposed (Qi et al., 2005). Furthermore, large margin criteria have been employed to optimize the model parameters (Taskar et al., 2004; Tsochantaridis et al., 2005). These training criteria have yielded excellent results for various tasks. However, real world tasks are evaluated by task-specific evaluation measures, including non-linear measures such as Fscore, while all of the above criteria achieve optimization based on the linear combination of average accuracies, or error rates, rather than a given task-specific evaluation measure. For example, sequential segmentation tasks (SSTs), such as text chunking and named entity recognition, are generally evaluated with the segmentation F-score. This inconsistency between the objective function during trainin</context>
</contexts>
<marker>Tsochantaridis, Joachims, Hofmann, Altun, 2005</marker>
<rawString>I. Tsochantaridis, T. Joachims and T. Hofmann, and Y. Altun. 2005. Large Margin Methods for Structured and Interdependent Output Variables. JMLR, 6:1453–1484.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>