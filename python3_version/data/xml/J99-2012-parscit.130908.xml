<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.115356">
<title confidence="0.960323">
Briefly Noted
An Introduction to Natural Language
Processing through Prolog
</title>
<author confidence="0.919008">
Clive Matthews
</author>
<affiliation confidence="0.636013">
(University of East Anglia)
London: Longman (Learning about
</affiliation>
<bodyText confidence="0.999321245614035">
language series, edited by Geoffrey Leech
and Mick Short), 1998, xi+306 pp;
paperbound, ISBN 0-582-06622-0, 07.99
It may seem unusual for the author of a di-
redly competing textbook (Covington 1994)
to review this one—but in fact the compe-
tition is not head-on. My book introduces
Prolog programmers to natural language,
whereas this book introduces linguists to
Prolog programming. As such, it helps solve
the problem that there is no easy way for
noncomputational linguists to get started in
computing, and I may well use it in a course.
The book covers most of Prolog but only a
small and central part of computational lin-
guistics, namely parsing. The first few chap-
ters are a conventional introduction to Pro-
log except that the examples are chosen to
be of interest to linguists (e.g., databases list-
ing what language is spoken where) and
little background in formal logic is pre-
sumed. Knowledge representation is intro-
duced slowly to keep students from getting
lost.
The author demonstrates a sureness of
touch derived, no doubt, from classroom ex-
perience. Compared to another competitor
(Dougherty 1994), Matthews focuses more on
Prolog and on parsing in general rather than
a specific linguistic theory.
The only section that may go awry in
the classroom is that on structured ob-
jects (p. 61 ff.), where Prolog terms like
language(uk) and queen(england) are de-
scribed as involving &amp;quot;functions.&amp;quot; Students
are likely to think they are functions that
return values—that queen(england) evalu-
ates to something identifying the Queen of
England. It does not; it&apos;s just a data struc-
ture with queen in the functor position and
england in the argument position. I find that
I have to emphasize this in the classroom.
Still, this is only a small part of an other-
wise fine presentation, and it may be that
Matthews can steer his students clear of this
misunderstanding.
The latter part of the book introduces tran-
sition networks, DCGs, and (briefly) left-
corner and chart parsing. The presentation is
clear but, of course, is not a complete course
in computational linguistics. (Neither is my
book or Dougherty&apos;s.) But it is enough to get
students started, and it is probably as much
as those without previous programming ex-
perience can be expected to absorb in a sin-
gle course.—Michael A. Covington, University
of Georgia
</bodyText>
<sectionHeader confidence="0.992302" genericHeader="abstract">
References
</sectionHeader>
<reference confidence="0.952469285714286">
Covington, Michael A. 1994. Natural
Language Processing for Prolog Programmers.
Prentice-Hall, Englewood Cliffs, NJ.
Dougherty, Ray C. 1994. Natural Language
Computing: An English Generative Grammar
in Prolog. Lawrence Erlbaum Associates,
Hillsdale, NJ.
</reference>
<subsectionHeader confidence="0.508155">
Recent Advances in Natural Language
Processing
</subsectionHeader>
<bodyText confidence="0.943932842105263">
Ruslan Mitkov and Nicolas Nicolov
(editors)
(University of Wolverhampton and Univer-
sity of Edinburgh)
Amsterdam: John Benjamins Publishing
Company (Current issues in linguistic
theory, volume 136), 1997, xi+474 pp;
hardbound, ISBN 1-55619-591-5, $99.00
&amp;quot;This volume brings together revised ver-
sions of a selection of papers presented at
the First International Conference on &apos;Recent
Advances in Natural Language Processing&apos;
(RANLP&apos;95) held in Tzigov Chark, Bulgaria,
14-16 September 1995. ... From the 48 papers
presented at RANLP&apos;95 we have selected the
[32] best for this book, in the hope that they
reflect the most significant and promising
trends (and successful results) in NLP.&amp;quot;—
From the editors&apos; preface
</bodyText>
<page confidence="0.998758">
304
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.593810">
<title confidence="0.59381">Briefly Noted</title>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Michael A Covington</author>
</authors>
<title>Natural Language Processing for Prolog Programmers. Prentice-Hall,</title>
<date>1994</date>
<location>Englewood Cliffs, NJ.</location>
<marker>Covington, 1994</marker>
<rawString>Covington, Michael A. 1994. Natural Language Processing for Prolog Programmers. Prentice-Hall, Englewood Cliffs, NJ.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ray C Dougherty</author>
</authors>
<title>Natural Language Computing: An English Generative Grammar in Prolog. Lawrence Erlbaum Associates,</title>
<date>1994</date>
<location>Hillsdale, NJ.</location>
<contexts>
<context position="1259" citStr="Dougherty 1994" startWordPosition="200" endWordPosition="201">computing, and I may well use it in a course. The book covers most of Prolog but only a small and central part of computational linguistics, namely parsing. The first few chapters are a conventional introduction to Prolog except that the examples are chosen to be of interest to linguists (e.g., databases listing what language is spoken where) and little background in formal logic is presumed. Knowledge representation is introduced slowly to keep students from getting lost. The author demonstrates a sureness of touch derived, no doubt, from classroom experience. Compared to another competitor (Dougherty 1994), Matthews focuses more on Prolog and on parsing in general rather than a specific linguistic theory. The only section that may go awry in the classroom is that on structured objects (p. 61 ff.), where Prolog terms like language(uk) and queen(england) are described as involving &amp;quot;functions.&amp;quot; Students are likely to think they are functions that return values—that queen(england) evaluates to something identifying the Queen of England. It does not; it&apos;s just a data structure with queen in the functor position and england in the argument position. I find that I have to emphasize this in the classro</context>
</contexts>
<marker>Dougherty, 1994</marker>
<rawString>Dougherty, Ray C. 1994. Natural Language Computing: An English Generative Grammar in Prolog. Lawrence Erlbaum Associates, Hillsdale, NJ.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>