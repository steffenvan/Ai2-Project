<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.023098">
<note confidence="0.82856">
Proceedings of the 40th Annual Meeting of the Association for
</note>
<page confidence="0.308752">
Computational Linguistics (ACL), Philadelphia, July 2002, pp. 168-175.
</page>
<bodyText confidence="0.999967166666667">
ferent components, and ensures that the com-
ponent interactions satisfy the system require-
ments. As a framework, it provides a reusable
design for an LE software system and a set of
prefabricated software building blocks that lan-
guage engineers can use, extend and customise
for their specific needs. As a development envi-
ronment, it helps its users to minimise the time
they spend building new LE systems or mod-
ifying existing ones, by aiding overall develop-
ment and providing a debugging mechanism for
new modules. Because GATE has a component-
based model, this allows for easy coupling and
decoupling of the processors, thereby facilitat-
ing comparison of alternative configurations of
the system or different implementations of the
same module (e.g., different parsers). The avail-
ability of tools for easy visualisation of data at
each point during the development process aids
immediate interpretation of the results.
The GATE framework comprises a core li-
brary (analogous to a bus backplane) and a set
of reusable LE modules. The framework imple-
ments the architecture and provides (amongst
other things) facilities for processing and visual-
ising resources, including representation, import
and export of data.
The reusable modules provided with the back-
plane are able to perform basic language pro-
cessing tasks such as POS tagging and semantic
tagging. This eliminates the need for users to
keep recreating the same kind of resources, and
provides a good starting point for new applica-
tions. The modules are described in more detail
in Section 4.
Applications developed within GATE can
be deployed outside its Graphical User Inter-
face (GUI), using programmatic access via the
GATE API (see http: //gat e . ac .uk). In addi-
tion, the reusable modules, the document and
annotation model, and the visualisation compo-
nents can all be used independently of the de-
velopment environment.
GATE components may be implemented
by a variety of programming languages and
databases, but in each case they are represented
to the system as a Java class. This class may
simply call the underlying program or provide
an access layer to a database; alternatively it
may implement the whole component.
In the rest of this section, we show how the
GATE infrastructure takes care of the resource
discovery, loading, and execution, and briefly
discuss data storage and visualisation.
</bodyText>
<subsectionHeader confidence="0.9303465">
2.1 Algorithms + data + GUI =
applications
</subsectionHeader>
<bodyText confidence="0.9999735">
The title expresses succinctly the distinction
made in GATE between data, algorithms, and
ways of visualising them. In other words, GATE
components are one of three types:
</bodyText>
<listItem confidence="0.989153111111111">
• LanguageResources (LRs) represent en-
tities such as lexicons, corpora or ontolo-
gies;
• ProcessingResources (PRs) represent
entities that are primarily algorithmic, such
as parsers, generators or ngram modellers;
• VisualResources (VRs) represent visual-
isation and editing components that partic-
ipate in GUIs.
</listItem>
<bodyText confidence="0.991031608695652">
These resources can be local to the user&apos;s ma-
chine or remote (available via HTTP), and all
can be extended by users without modification
to GATE itself.
One of the main advantages of separating the
algorithms from the data they require is that
the two can be developed independently by lan-
guage engineers with different types of expertise,
e.g. programmers and linguists. Similarly, sepa-
rating data from its visualisation allows users to
develop alternative visual resources, while still
using a language resource provided by GATE.
Collectively, all resources are known as CRE-
OLE (a Collection of REusable Objects for Lan-
guage Engineering), and are declared in a repos-
itory XML file, which describes their name, im-
plementing class, parameters, icons, etc. This
repository is used by the framework to discover
and load available resources.
A parameters tag describes the parameters
which each resource needs when created or ex-
ecuted. Parameters can be optional, e.g. if a
document list is provided when the corpus is
</bodyText>
<table confidence="0.7909805">
g. Gate Mellows&apos; tileiDirny-tls1 rnYDoc3
Applkations FeT-x7 Annotations Annotation Sets Print
Language Resmrces
A
Processing Resources
In Data stores
lfrle%Crirny-dsf
deputy governor responsible for monetary policy at the bank, said it had not Default annotations
been an easy decision tor the nine-member committee. The committee was faced with a Data
choice -to surprise people last week* cutting rates orto surprise them today by publishing MEM
a lorecastwhich indicated that a further cutwas likely,&amp;quot; he said. Again
The underlying rate of inflation is currently D 19Ik below the governments target of Location
although the bank expects the figure to slip back to about NI early next year before edging Pitt.ca
back towards its target
Fletchji chief economist at the said: &apos;&apos;Today&apos;s report
illustiate, clearly that the greater risk to our economy is slowing world grow*, ratherthan
inllakn The bank should have the scope to cut interest rates further in the months ahead
and should aggressively use every opportunity&amp;quot;
The bank also warned that the gulf in output between the manufacturing and service sectors
was now at its widest since 1900.111=1 said &amp;quot;The tale of two economies has intensified
Manufacturing is in recession, consumer spending is buoyant. The task of the monetary
policy committee is, despite these sectoral imbalances, to try to maintain an overall balance
kr the economy.&amp;quot;
iMPITARRITIII chief economist at said economic data over the
• ,•.uld be even more crucial
MOW
LI
Spit
Temp
1.1
Unknown
- nrininal rnarkilnc antratii,
11
Annotations Editor Features Eclinr
</table>
<figureCaption confidence="0.997513">
Figure 1: GATE&apos;s document viewer/editor
</figureCaption>
<bodyText confidence="0.999620666666667">
constructed, it will be populated automatically
with these documents.
When an application is developed within
GATE&apos;s graphical environment, the user chooses
which processing resources go into it (e.g. to-
keniser, POS tagger), in what order they will be
executed, and on which data (e.g. document or
corpus).
The execution parameters of each resource are
also set there, e.g. a loaded document is given as
a parameter to each PR. When the application
is run, the modules will be executed in the spec-
ified order on the given document. The results
can be viewed in the document viewer/editor
(see Figure 1).
</bodyText>
<subsectionHeader confidence="0.999961">
2.2 Data representation and handling
</subsectionHeader>
<bodyText confidence="0.999955677419355">
GATE supports a variety of formats including
XML, RTF, HTML, SGML, email and plain
text. In all cases, when a document is cre-
ated/opened in GATE, the format is analysed
and converted into a single unified model of an-
notation. The annotation format is a modified
form of the TIPSTER format (Grishman, 1997)
which has been made largely compatible with
the Atlas format (Bird et al., 2000), and uses the
now standard mechanism of &apos;stand-off markup&apos;
(Thompson and McKelvie, 1997). The annota-
tions associated with each document are a struc-
ture central to GATE, because they encode the
language data read and produced by each pro-
cessing module.
The GATE framework also provides persis-
tent storage of language resources. It currently
offers three storage mechanisms: one uses re-
lational databases (e.g. Oracle) and the other
two are file- based, using Java serialisation or an
XML-based internal format. GATE documents
can also be exported back to their original for-
mat (e.g. SGML/XML for the British National
Corpus (BNC)) and the user can choose whether
some additional annotations (e.g. named entity
information) are added to it or not.
To summarise, the existence of a unified data
structure ensures a smooth communication be-
tween components, while the provision of im-
port and export capabilities makes communica-
tion with the outside world simple.
</bodyText>
<subsectionHeader confidence="0.999423">
2.3 Multilingual processing
</subsectionHeader>
<bodyText confidence="0.999805">
In recent years, the emphasis on multilinguality
has grown, and important advances have been
</bodyText>
<table confidence="0.990824230769231">
Ecat Paola HO)
ir_. Gate aaa,2ap2 o A urr 8 -re. I
DA Applications
- Ell Language Rea.. ea
A teat
A 1202F a TeMs
- I Processing Resources
.-13&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;i
&apos; un&amp;quot;&apos;&amp;quot;&apos;&amp;quot;&amp;quot;&amp;quot;
li) . cod ¢ Conte,.
G Data stares
, ,
pDanne iart-. to a nee SaS -a a—ray, aoa a •onn •S a n pee cir 1 ere n&amp;quot;ana Fo,00 ii, -pa
Deei lot Ipn-,ril
1-lebrro (Israel) sample -hem The Werlis Wrang Systems,&apos; Danes a. Eno. PP 4,6
El4 8 8 C 0.0111i, 01111111X4VTDINGIL, l,1:1(911t, MIL Clil,(r.‘&amp;quot; t -COMA
IL E1At exOTA*CIN.Iy*.8,5 .t Clb.k-CL)4(,, 1_,YLOEl.8108., plkItr81)8180E8
7&apos; 7,),101111114 RIMER li ( E C OM OG ) LIZMI3S.T8a), DV4tt CM P t.
J2panose Carrell.
nsu/rma..201-vouoluento&amp;quot;&amp;quot;,
Lao sar(eyes from -70•Wores WeIng Systarns,•
by Dans and anght pp 488
bri38),enabbnesrrxen
3eby aa0am rikm19,lseor,
88ree8I)h8s,1,72(o dmon jhol),,,68,6b 8,1868)
pant,681) tioll,pyren of,,,,a An8 bres(18.8ricemb
rpro) 48 o,nggorygmtwojor(owxyb 0), Isfirsxsoo. panel...bop eprok,b,s(nerb
ar(t)a,r, jaree,,,./ .66.6.4( es,186eUrb
Gs orglan blycs:bul sampl((frornrrInWo.,Wroeng Systores.•
by Dan. and 8808 pp 967
.1,dbo peg,. pyscropyrssexa pa...Inn/be e (Esrey:, we 6onee nocneme arena-ore
re)seressartba 43csrassartsmeuroto-ssoprbonourseLproronparserrna flaw) sror spe6yer
—
,r1
AIN Transducer loacleo
74._•_I a 1,1 erkirlE. FOL.* I
uttora PD. 0 21 lositPDPII
f P21111“ enwialitne I
r
</table>
<figureCaption confidence="0.994536">
Figure 2: Unicode text in Gate2
</figureCaption>
<bodyText confidence="0.999912033333333">
witnessed on the software scene with the emer-
gence of Unicode as a universal standard for rep-
resenting textual data.
GATE supports multilingual data processing
using Unicode as its default text encoding. It
also provides a means of entering text in var-
ious languages, using virtual keyboards where
the language is not supported by the underly-
ing operating platform. (Note that although
Java represents characters as Unicode, it doesn&apos;t
support input in many of the languages covered
by Unicode.) Currently 28 languages are sup-
ported, and more are planned for future releases.
Because GATE is an open architecture, new vir-
tual keyboards can be defined by the users and
added to the system as needed. For displaying
the text, GATE relies on the rendering facilities
offered by the Java implementation for the plat-
form it runs on. Figure 2 gives an example of
text in various languages displayed by GATE.
The ability to handle Unicode data, along
with the separation between data and imple-
mentation, allows LE systems based on GATE
to be ported to new languages with no additional
overhead apart from the development of the re-
sources needed for the specific language. These
facilities have been developed as part of the
EMILLE project (McEnery et al., 2000), which
focuses on the construction a 63 million word
electronic corpus of South Asian languages.
</bodyText>
<sectionHeader confidence="0.980592" genericHeader="abstract">
3 Applications
</sectionHeader>
<bodyText confidence="0.99971">
One of GATE&apos;s strengths is that it is flexible and
robust enough to enable the development of a
wide range of applications within its framework.
In this section, we describe briefly some of the
NLP applications we have developed using the
GATE architecture.
</bodyText>
<subsectionHeader confidence="0.981351">
3.1 MUSE
</subsectionHeader>
<bodyText confidence="0.999992">
The MUSE system (Maynard et al., 2001) is a
multi-purpose Named Entity recognition system
which is capable of processing texts from widely
different domains and genres, thereby aiming to
reduce the need for costly and time-consuming
adaptation of existing resources to new applica-
tions and domains. The system aims to iden-
tify the parameters relevant to the creation of a
name recognition system across different types
of variability such as changes in domain, genre
and media. For example, less formal texts may
not follow standard capitalisation, punctuation
and spelling formats, which can be a problem for
many generic NE systems. Current evaluations
with this system average around 93% precision
and 95% recall across a variety of text types.
</bodyText>
<subsectionHeader confidence="0.960726">
3.2 ACE
</subsectionHeader>
<bodyText confidence="0.999729666666667">
The MUSE system has also been adapted to
take part in the current ACE (Automatic Con-
tent Extraction) program run by NIST. This re-
quires systems to perform recognition and track-
ing tasks of named, nominal and pronominal en-
tities and their mentions across three types of
clean news text (newswire, broadcast news and
newspaper) and two types of degraded news text
(OCR output and ASR output).
</bodyText>
<subsectionHeader confidence="0.784168">
3.3 MUMIS
</subsectionHeader>
<bodyText confidence="0.999896">
The MUMIS (MUltiMedia Indexing and Search-
ing environment) system uses Information Ex-
traction components developed within GATE
to produce formal annotations about essential
events in football video programme material.
This IE system comprises versions of the tokeni-
sation, sentence detection, POS-tagging, and se-
mantic tagging modules developed as part of
GATE&apos;s standard resources, but also includes
morphological analysis, full syntactic parsing
and discourse interpretation modules, thereby
enabling the production of annotations over text
encoding structural, lexical, syntactic and se-
mantic information. The semantic tagging mod-
ule currently achieves around 91% precision and
76% recall, a significant improvement on a base-
line named entity recognition system evaluated
against it.
</bodyText>
<sectionHeader confidence="0.972987" genericHeader="keywords">
4 Processing Resources
</sectionHeader>
<bodyText confidence="0.999953642857143">
Provided with GATE is a set of reusable pro-
cessing resources for common NLP tasks. (None
of them are definitive, and the user can replace
and/or extend them as necessary.) These are
packaged together to form ANNIE, A Nearly-
New IE system, but can also be used individu-
ally or coupled together with new modules in
order to create new applications. For exam-
ple, many other NLP tasks might require a sen-
tence splitter and POS tagger, but would not
necessarily require resources more specific to IE
tasks such as a named entity transducer. The
system is in use for a variety of IE and other
tasks, sometimes in combination with other sets
of application-specific modules.
ANNIE consists of the following main pro-
cessing resources: tokeniser, sentence splitter,
POS tagger, gazetteer, finite state transducer
(based on GATE&apos;s built-in regular expressions
over annotations language (Cunningham et al.,
2002)), orthomatcher and coreference resolver.
The resources communicate via GATE&apos;s anno-
tation API, which is a directed graph of arcs
bearing arbitrary feature/value data, and nodes
rooting this data into document content (in this
case text).
The tokeniser splits text into simple tokens,
such as numbers, punctuation, symbols, and
words of different types (e.g. with an initial cap-
ital, all upper case, etc.). The aim is to limit the
work of the tokeniser to maximise efficiency, and
enable greater flexibility by placing the burden
of analysis on the grammars. This means that
the tokeniser does not need to be modified for
different applications or text types.
The sentence splitter is a cascade of finite-
state transducers which segments the text into
sentences. This module is required for the tag-
ger. Both the splitter and tagger are domain-
and application-independent.
The tagger is a modified version of the Brill
tagger, which produces a part-of-speech tag as
an annotation on each word or symbol. Nei-
ther the splitter nor the tagger are a mandatory
part of the NE system, but the annotations they
produce can be used by the grammar (described
below), in order to increase its power and cov-
erage.
The gazetteer consists of lists such as cities,
organisations, days of the week, etc. It not only
consists of entities, but also of names of useful
indicators, such as typical company designators
(e.g. &apos;Ltd:), titles, etc. The gazetteer lists are
compiled into finite state machines, which can
match text tokens.
The semantic tagger consists of hand-
crafted rules written in the JAPE (Java Anno-
tations Pattern Engine) language (Cunningham
et al., 2002), which describe patterns to match
and annotations to be created as a result. JAPE
is a version of CPSL (Common Pattern Speci-
fication Language) (Appelt, 1996), which pro-
vides finite state transduction over annotations
based on regular expressions. A JAPE grammar
consists of a set of phases, each of which con-
sists of a set of pattern/action rules, and which
run sequentially. Patterns can be specified by
describing a specific text string, or annotations
previously created by modules such as the to-
keniser, gazetteer, or document format analysis.
Rule prioritisation (if activated) prevents multi-
ple assignment of annotations to the same text
string.
The orthomatcher is another optional mod-
ule for the IE system. Its primary objective is
to perform co-reference, or entity tracking, by
recognising relations between entities. It also
has a secondary role in improving named entity
recognition by assigning annotations to previ-
ously unclassified names, based on relations with
existing entities.
The coreferencer finds identity relations be-
tween entities in the text. For more details see
(Dimitrov, 2002).
</bodyText>
<subsectionHeader confidence="0.986417">
4.1 Implementation
</subsectionHeader>
<bodyText confidence="0.999939818181818">
The implementation of the processing resources
is centred on robustness, usability and the clear
distinction between declarative data representa-
tions and finite state algorithms The behaviour
of all the processors is completely controlled by
external resources such as grammars or rule sets,
which makes them easily modifiable by users
who do not need to be familiar with program-
ming languages.
The fact that all processing resources use
finite-state transducer technology makes them
quite performant in terms of execution times.
Our initial experiments show that the full named
entity recognition system is capable of process-
ing around 2.5KB/s on a PITT 450 with 256 MB
RAM (independently of the size of the input file;
the processing requirement is linear in relation
to the text size). Scalability was tested by run-
ning the ANNIE modules over a randomly cho-
sen part of the British National Corpus (10% of
all documents), which contained documents of
up to 17MB in size.
</bodyText>
<sectionHeader confidence="0.932367" genericHeader="introduction">
5 Language Resource Creation
</sectionHeader>
<bodyText confidence="0.999892485714286">
Since many NLP algorithms require annotated
corpora for training, GATE&apos;s development en-
vironment provides easy-to-use and extendable
facilities for text annotation. In order to test
their usability in practice, we used these facili-
ties to build corpora of named entity annotated
texts for the MUSE, ACE, and MUMIS appli-
cations.
The annotation can be done manually by the
user or semi-automatically by running some pro-
cessing resources over the corpus and then cor-
recting/adding new annotations manually. De-
pending on the information that needs to be
annotated, some ANNIE modules can be used
or adapted to bootstrap the corpus annotation
task. For example, users from the humanities
created a gazetteer list with 18th century place
names in London, which when supplied to the
ANNIE gazetteer, allows the automatic annota-
tion of place information in a large collection of
18th century court reports from the Old Bailey
in London.
Since manual annotation is a difficult and
error-prone task, GATE tries to make it sim-
ple to use and yet keep it flexible. To add a
new annotation, one selects the text with the
mouse (e.g., &amp;quot;Mr. Clever&amp;quot;) and then clicks on
the desired annotation type (e.g., Person), which
is shown in the list of types on the right-hand-
side of the document viewer (see Figure 1). If
however the desired annotation type does not al-
ready appear there or the user wants to associate
more detailed information with the annotation
(not just its type), then an annotation editing
dialogue can be used.
</bodyText>
<sectionHeader confidence="0.993949" genericHeader="background">
6 Evaluation
</sectionHeader>
<bodyText confidence="0.99996">
A vital part of any language engineering ap-
plication is the evaluation of its performance,
and a development environment for this pur-
pose would not be complete without some mech-
anisms for its measurement in a large number
of test cases. GATE contains two such mech-
anisms: an evaluation tool (AnnotationDiff)
which enables automated performance measure-
ment and visualisation of the results, and a
benchmarking tool, which enables the tracking
of a system&apos;s progress and regression testing.
</bodyText>
<subsectionHeader confidence="0.998806">
6.1 The AnnotationDiff Tool
</subsectionHeader>
<bodyText confidence="0.99796815">
Gate&apos;s AnnotationDiff tool enables two sets of
annotations on a document to be compared, in
order to either compare a system-annotated text
with a reference (hand-annotated) text, or to
compare the output of two different versions of
the system (or two different systems). For each
annotation type, figures are generated for preci-
sion, recall, F-measure and false positives.
The AnnotationDiff viewer displays the two
sets of annotations, marked with different
colours (similar to &apos;visual diff&apos; implementations
such as in the MKS Toolkit or TkDiff). Anno-
tations in the key set have two possible colours
depending on their state: white for annotations
which have a compatible (or partially compat-
ible) annotation in the response set, and or-
ange for annotations which are missing in the
response set. Annotations in the response set
have three possible colours: green if they are
compatible with the key annotation, blue if they
</bodyText>
<figureCaption confidence="0.846648">
Figure 3: Fragment of results from benchmark
tool
</figureCaption>
<bodyText confidence="0.999761">
are partially compatible, and red if they are spu-
rious. In the viewer, two annotations will be po-
sitioned on the same row if they are co-extensive,
and on different rows if not.
</bodyText>
<subsectionHeader confidence="0.999982">
6.2 Benchmarking tool
</subsectionHeader>
<bodyText confidence="0.999950545454545">
GATE&apos;s benchmarking tool differs from the An-
notationDiff in that it enables evaluation to be
carried out over a whole corpus rather than a
single document. It also enables tracking of the
system&apos;s performance over time.
The tool requires a clean version of a corpus
(with no annotations) and an annotated refer-
ence corpus. First of all, the tool is run in gen-
eration mode to produce a set of texts annotated
by the system. These texts are stored for future
use. The tool can then be run in three ways:
</bodyText>
<listItem confidence="0.996596">
1. Comparing the annotated set with the ref-
erence set;
2. Comparing the annotated set with the set
produced by a more recent version of the
system resources (the latest set);
3. Comparing the latest set with the reference
set.
</listItem>
<bodyText confidence="0.9904013">
In each case, performance statistics will be pro-
vided for each text in the set, and overall statis-
tics for the entire set, in comparison with the
reference set. In case 2, information is also pro-
vided about whether the figures have increased
or decreased in comparison with the annotated
set. The annotated set can be updated at any
time by rerunning the tool in generation mode
with the latest version of the system resources.
Furthermore, the system can be run in verbose
mode, where for each figure below a certain
threshold (set by the user), the non-coextensive
annotations (and their corresponding text) will
be displayed. The output of the tool is written
to an HTML file in tabular form, as shown in
Figure 3.
Current evaluations for the MUSE NE sys-
tem are producing average figures of 90-95%
Precision and Recall on a selection of different
text types (spoken transcriptions, emails etc.).
The default ANNIE system produces figures of
between 80-90% Precision and Recall on news
texts. This figure is lower than for the MUSE
system, because the resources have not been
tuned to a specific text type or application, but
are intended to be adapted as necessary. Work
on resolution of anaphora is currently averag-
ing 63% Precision and 45% Recall, although this
work is still very much in progress, and we ex-
pect these figures to improve in the near future.
</bodyText>
<sectionHeader confidence="0.999739" genericHeader="related work">
7 Related Work
</sectionHeader>
<bodyText confidence="0.99997355">
GATE draws from a large pool of previous work
on infrastructures, architectures and develop-
ment environments for representing and process-
ing language resources, corpora, and annota-
tions. Due to space limitations here we will dis-
cuss only a small subset. For a detailed review
and its use for deriving the desiderata for this
architecture see (Cunningham, 2000).
Work on standard ways to deal with XML
data is relevant here, such as the LT XML work
at Edinburgh (Thompson and McKelvie, 1997),
as is work on managing collections of documents
and their formats, e.g. (Brugman et al., 1998;
Grishman, 1997; Zajac, 1998). We have also
drawn from work on representing information
about text and speech, e.g. (Brugman et al.,
1998; Mikheev and Finch, 1997; Zajac, 1998;
Young et al., 1999), as well as annotation stan-
dards, such as the ATLAS project (an architec-
ture for linguistic annotation) at LDC (Bird et
</bodyText>
<figure confidence="0.992203513513513">
kivis kirlactunerkterrip Nerl
ABC19980430.1830.0858.sgm
Annotation tope. ,
GPE
Recall Increase on
Atonaltmarked iron
0 6371426571426571 la 1 0
Annotalem type
Organization
1.0
Precision increase on
hurnan-marked 11,011) 4Th to
1 0
0 9444444444444444
Mug
07,
limEll.ncrease on
human-matted tom 0 345 to
07,
14153ING
ANNOTATIONS It To
automate tette ABC
&apos;rs,&amp;quot;11:&amp;quot;5
`7
Ir.NNOTATKMIS in To
embroil, bath
PARTIALLY CORRECT
Pl4071&amp;quot;ATIC*15 n he
automate IDA,
Pratotation Type :Precision
Annotation type
Person
Precision increase on
human-marked from
0 8947368421052632 lc
0 9444444444444444
03444444444444444
</figure>
<bodyText confidence="0.999649571428571">
al., 2000). Our approach is also related to work
on user interfaces to architectural facilities such
as development environments, e.g. (Brugman et
al., 1998) and to work on comparing different
versions of information, e.g. (Sparck-Jones and
Galliers, 1996; Paggio, 1998).
This work is particularly novel in that it ad-
dresses the complete range of issues in NLP ap-
plication development in a flexible and extensi-
ble way, rather than focusing just on some par-
ticular aspect of the development process. In
addition, it promotes robustness, re-usability,
and scalability as important principles that help
with the construction of practical NLP systems.
</bodyText>
<sectionHeader confidence="0.998818" genericHeader="conclusions">
8 Conclusions
</sectionHeader>
<bodyText confidence="0.999774">
In this paper we have described an infrastruc-
ture for language engineering software which
aims to assist the develeopment of robust tools
and resources for NLP.
One future direction is the integration of pro-
cessing resources which learn in the background
while the user is annotating corpora in GATE&apos;s
visual environment. Currently, statistical mod-
els can be integrated but need to be trained sep-
arately. We are also extending the system to
handle language generation modules, in order
to enable the construction of applications which
require language production in addition to anal-
ysis, e.g. intelligent report generation from IE
data.
</bodyText>
<sectionHeader confidence="0.998775" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999674111111111">
D.E. Appelt. 1996. The Common Pattern Specifi-
cation Language. Technical report, SRI Interna-
tional, Artificial Intelligence Center.
S. Bird, D. Day, J. Garofolo, J. Henderson,
C. Laprun, and M. Liberman. 2000. ATLAS: A
flexible and extensible architecture for linguistic
annotation. In Proceedings of the Second Inter-
national Conference on Language Resources and
Evaluation, Athens.
H. Brugman, H.G. Russel, and P. Wittenburg. 1998.
An infrastructure for collaboratively building and
using multimedia corpora in the humaniora. In
Proceedings of the ED-MEDIA/ED-TELECOM
Conference, Freiburg.
H. Cunningham, D. Maynard, K. Bontcheva,
V. Tablan, and C. Ursu. 2002. The GATE User
Guide. http://gate.ac.uk/.
H. Cunningham. 2000. Software Architecture for
Language Engineering. Ph.D. thesis, University
of Sheffield. http://gate.ac.uk/sale/thesis/.
H. Cunningham. 2002. GATE, a General Archi-
tecture for Text Engineering. Computers and the
Humanities, 36:223-254.
M . Dimitrov. 2002. A Light-weight Approach
to Coreference Resolution for Named Entities in
Text. MSc Thesis, University of Sofia, Bulgaria.
http://www.ontotext.com/ie/thesis-m.pdf.
R. Grishman. 1997. TIPSTER Architec-
ture Design Document Version 2.3. Techni-
cal report, DARPA. http://www.itl.nist.gov/-
div894/894.02/related_projects/tipster/.
D. Maynard, V. Tablan, C. Ursu, H. Cunningham,
and Y. Wilks. 2001. Named Entity Recognition
from Diverse Text Types. In Recent Advances
in Natural Language Processing 2001 Conference,
Tzigov Chark, Bulgaria.
A. M. McEnery, P. Baker, R. Gaizauskas, and
H. Cunningham. 2000. EMILLE: Building a Cor-
pus of South Asian Languages. Vivek, A Quar-
terly in Artificial Intelligence, 13(3):23-32.
A. Mikheev and S. Finch. 1997. A Workbench for
Finding Structure in Text. In Fifth Conference on
Applied NLP (ANLP-97), Washington, DC.
P. Paggio. 1998. Validating the TEMAA LE evaluta-
tion methodology: a case study on Danish spelling
checkers. Journal of Natural Language Engineer-
ing, 4(3):211-228.
K. Sparck-Jones and J. Galliers. 1996. Evaluating
Natural Language Processing Systems. Springer,
Berlin.
H. Thompson and D. McKelvie. 1997. Hyper-
link semantics for standoff markup of read-only
documents. In Proceedings of SGML Europe &apos;97,
Barcelona.
S. Young, D. Kershaw, J. Odell, D. 011ason,
V. Valtchev, and P. Woodland. 1999. The HTK
Book (Version 2.2). Entropic Ltd., Cambridge.
ftp://ftp.entropic.com/pub/htk/.
R. Zajac. 1998. Reuse and Integration of NLP
Components in the Calypso Architecture. In
Workshop on Distributing and Accessing Lin-
guistic Resources, pages 34-40, Granada, Spain.
http://www.dcs.shef.ac.uk/-hamish/dalr/.
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.000029">
<note confidence="0.9681715">Proceedings of the 40th Annual Meeting of the Association for Computational Linguistics (ACL), Philadelphia, July 2002, pp. 168-175.</note>
<abstract confidence="0.992635473118279">ferent components, and ensures that the component interactions satisfy the system require- As a provides a reusable design for an LE software system and a set of prefabricated software building blocks that language engineers can use, extend and customise their specific needs. As a envihelps its users to minimise the time they spend building new LE systems or modifying existing ones, by aiding overall development and providing a debugging mechanism for new modules. Because GATE has a componentbased model, this allows for easy coupling and decoupling of the processors, thereby facilitating comparison of alternative configurations of the system or different implementations of the same module (e.g., different parsers). The availability of tools for easy visualisation of data at each point during the development process aids immediate interpretation of the results. The GATE framework comprises a core library (analogous to a bus backplane) and a set of reusable LE modules. The framework implements the architecture and provides (amongst other things) facilities for processing and visualising resources, including representation, import and export of data. The reusable modules provided with the backplane are able to perform basic language processing tasks such as POS tagging and semantic tagging. This eliminates the need for users to keep recreating the same kind of resources, and provides a good starting point for new applications. The modules are described in more detail in Section 4. Applications developed within GATE can be deployed outside its Graphical User Interface (GUI), using programmatic access via the API (see e . ac .uk). In addition, the reusable modules, the document and annotation model, and the visualisation components can all be used independently of the development environment. GATE components may be implemented by a variety of programming languages and databases, but in each case they are represented to the system as a Java class. This class may simply call the underlying program or provide an access layer to a database; alternatively it may implement the whole component. In the rest of this section, we show how the GATE infrastructure takes care of the resource discovery, loading, and execution, and briefly discuss data storage and visualisation. 2.1 Algorithms + data + GUI = applications The title expresses succinctly the distinction made in GATE between data, algorithms, and ways of visualising them. In other words, GATE components are one of three types: LanguageResources represent entities such as lexicons, corpora or ontologies; ProcessingResources represent entities that are primarily algorithmic, such as parsers, generators or ngram modellers; VisualResources represent visualisation and editing components that participate in GUIs. These resources can be local to the user&apos;s machine or remote (available via HTTP), and all can be extended by users without modification to GATE itself. One of the main advantages of separating the algorithms from the data they require is that the two can be developed independently by language engineers with different types of expertise, e.g. programmers and linguists. Similarly, separating data from its visualisation allows users to develop alternative visual resources, while still using a language resource provided by GATE. Collectively, all resources are known as CRE- OLE (a Collection of REusable Objects for Language Engineering), and are declared in a repository XML file, which describes their name, implementing class, parameters, icons, etc. This repository is used by the framework to discover and load available resources. A parameters tag describes the parameters which each resource needs when created or executed. Parameters can be optional, e.g. if a document list is provided when the corpus is g.Gate Mellows&apos;tileiDirny-tls1</abstract>
<title confidence="0.9495845">Applkations AnnotationsAnnotation SetsPrint Language Resmrces A Processing Resources InData stores</title>
<abstract confidence="0.989053181818182">lfrle%Crirny-dsf deputy governor responsible for monetary policy at the bank, said it had not an easy decision tor the nine-member committee. The committee was faced witha choice -to surprise people last week* cutting rates orto surprise them today by publishing a lorecastwhich indicated that a further cutwas likely,&amp;quot; he said. Default annotations underlying rate of inflation is currently 19Ik the governments target of the bank expects the figure to slip back to about next year before edging back towards its target Data Fletchjichief economist at the said: &apos;&apos;Today&apos;s report MEM Again illustiate, clearly that the greater risk to our economy is slowing world grow*, ratherthan inllakn The bank should have the scope to cut interest rates further in the months ahead and should aggressively use every opportunity&amp;quot; Location The bank also warned that the gulf in output between the manufacturing and service sectors now at its widest since1900.111=1said &amp;quot;The tale of two economies has intensified Manufacturing is in recession, consumer spending is buoyant. The task of the monetary policy committee is, despite these sectoral imbalances, to try to maintain an overall balance kr the economy.&amp;quot; Pitt.ca iMPITARRITIIIchief economist at said economic the • be even more crucial MOW LI Spit Temp 1.1 Unknown -nrininal rnarkilnc 11 Editor FeaturesEclinr Figure 1: GATE&apos;s document viewer/editor constructed, it will be populated automatically with these documents. When an application is developed within GATE&apos;s graphical environment, the user chooses which processing resources go into it (e.g. tokeniser, POS tagger), in what order they will be executed, and on which data (e.g. document or corpus). The execution parameters of each resource are also set there, e.g. a loaded document is given as a parameter to each PR. When the application is run, the modules will be executed in the specified order on the given document. The results can be viewed in the document viewer/editor (see Figure 1). 2.2 Data representation and handling GATE supports a variety of formats including XML, RTF, HTML, SGML, email and plain text. In all cases, when a document is created/opened in GATE, the format is analysed converted into a single unified model of anannotation format is a modified form of the TIPSTER format (Grishman, 1997) which has been made largely compatible with the Atlas format (Bird et al., 2000), and uses the now standard mechanism of &apos;stand-off markup&apos; (Thompson and McKelvie, 1997). The annotations associated with each document are a structure central to GATE, because they encode the language data read and produced by each processing module. The GATE framework also provides persistent storage of language resources. It currently offers three storage mechanisms: one uses relational databases (e.g. Oracle) and the other two are filebased, using Java serialisation or an XML-based internal format. GATE documents can also be exported back to their original format (e.g. SGML/XML for the British National Corpus (BNC)) and the user can choose whether some additional annotations (e.g. named entity information) are added to it or not. To summarise, the existence of a unified data structure ensures a smooth communication between components, while the provision of import and export capabilities makes communication with the outside world simple. 2.3 Multilingual processing In recent years, the emphasis on multilinguality has grown, and important advances have been PaolaHO) ir_.Gate aaa,2ap2oA urr8-re. DAApplications -EllLanguage Rea..ea Ateat AaTeMs -IProcessing Resources &apos;un&amp;quot;&apos;&amp;quot;&apos;&amp;quot;&amp;quot;&amp;quot;. cod¢Conte,. GData stares , ,</abstract>
<note confidence="0.834079666666667">a nee SaSa—ray, aoa a•onn•S a 1ere n&amp;quot;ana Fo,00 Deei lot Ipn-,ril (Israel)sampleThe Werlis Wrang Systems,&apos;Danesa.Eno. PP 4,6 El488C0.0111i, MILClil,(r.‘&amp;quot;tILE1At exOTA*CIN.Iy*.8,5.t RIMER li(ECOMOG)DV4ttCMP t. Laosar(eyesfromWeIngSystarns,• byDansandanghtpp488 bri38),enabbnesrrxen rikm19,lseor, dmonjhol),,,68,6b8,1868) pant,681) tioll,pyren of,,,,a An8 bres(18.8ricemb rpro)48 o,nggorygmtwojor(owxyb 0),Isfirsxsoo.panel...bop eprok,b,s(nerb ar(t)a,r,jaree,,,./ .66.6.4( es,186eUrb orglanblycs:bul sampl((frornrrInWo.,WroengSystores.• Dan.and 8808pp967</note>
<abstract confidence="0.993583829268293">peg,. pyscropyrssexa pa...Inn/bee(Esrey:,we6onee nocnemere)seressartba 43csrassartsmeuroto-ssoprbonourseLproronparserrna flaw) sror spe6yer — ,r1 Transducerloacleo a erkirlE.FOL.*I PD.021 fP21111“enwialitneI r Figure 2: Unicode text in Gate2 witnessed on the software scene with the emergence of Unicode as a universal standard for representing textual data. GATE supports multilingual data processing using Unicode as its default text encoding. It also provides a means of entering text in various languages, using virtual keyboards where the language is not supported by the underlying operating platform. (Note that although Java represents characters as Unicode, it doesn&apos;t support input in many of the languages covered by Unicode.) Currently 28 languages are supported, and more are planned for future releases. Because GATE is an open architecture, new virtual keyboards can be defined by the users and added to the system as needed. For displaying the text, GATE relies on the rendering facilities offered by the Java implementation for the platform it runs on. Figure 2 gives an example of text in various languages displayed by GATE. The ability to handle Unicode data, along with the separation between data and implementation, allows LE systems based on GATE to be ported to new languages with no additional overhead apart from the development of the resources needed for the specific language. These facilities have been developed as part of the EMILLE project (McEnery et al., 2000), which focuses on the construction a 63 million word electronic corpus of South Asian languages. 3 Applications One of GATE&apos;s strengths is that it is flexible and robust enough to enable the development of a wide range of applications within its framework. In this section, we describe briefly some of the NLP applications we have developed using the GATE architecture. 3.1 MUSE The MUSE system (Maynard et al., 2001) is a multi-purpose Named Entity recognition system which is capable of processing texts from widely different domains and genres, thereby aiming to reduce the need for costly and time-consuming adaptation of existing resources to new applications and domains. The system aims to identify the parameters relevant to the creation of a name recognition system across different types of variability such as changes in domain, genre and media. For example, less formal texts may not follow standard capitalisation, punctuation and spelling formats, which can be a problem for many generic NE systems. Current evaluations with this system average around 93% precision and 95% recall across a variety of text types. 3.2 ACE The MUSE system has also been adapted to take part in the current ACE (Automatic Content Extraction) program run by NIST. This requires systems to perform recognition and tracking tasks of named, nominal and pronominal entities and their mentions across three types of clean news text (newswire, broadcast news and newspaper) and two types of degraded news text (OCR output and ASR output). 3.3 MUMIS The MUMIS (MUltiMedia Indexing and Searching environment) system uses Information Extraction components developed within GATE to produce formal annotations about essential events in football video programme material. This IE system comprises versions of the tokenisation, sentence detection, POS-tagging, and semantic tagging modules developed as part of GATE&apos;s standard resources, but also includes morphological analysis, full syntactic parsing and discourse interpretation modules, thereby enabling the production of annotations over text encoding structural, lexical, syntactic and semantic information. The semantic tagging module currently achieves around 91% precision and 76% recall, a significant improvement on a baseline named entity recognition system evaluated against it. 4 Processing Resources Provided with GATE is a set of reusable processing resources for common NLP tasks. (None of them are definitive, and the user can replace and/or extend them as necessary.) These are packaged together to form ANNIE, A Nearly- New IE system, but can also be used individually or coupled together with new modules in order to create new applications. For example, many other NLP tasks might require a sentence splitter and POS tagger, but would not necessarily require resources more specific to IE tasks such as a named entity transducer. The system is in use for a variety of IE and other tasks, sometimes in combination with other sets of application-specific modules. ANNIE consists of the following main processing resources: tokeniser, sentence splitter, POS tagger, gazetteer, finite state transducer (based on GATE&apos;s built-in regular expressions over annotations language (Cunningham et al., 2002)), orthomatcher and coreference resolver. The resources communicate via GATE&apos;s annotation API, which is a directed graph of arcs bearing arbitrary feature/value data, and nodes rooting this data into document content (in this case text). text into simple tokens, such as numbers, punctuation, symbols, and words of different types (e.g. with an initial capital, all upper case, etc.). The aim is to limit the work of the tokeniser to maximise efficiency, and enable greater flexibility by placing the burden of analysis on the grammars. This means that the tokeniser does not need to be modified for different applications or text types. splitter a cascade of finitestate transducers which segments the text into sentences. This module is required for the tagger. Both the splitter and tagger are domainand application-independent. a modified version of the Brill tagger, which produces a part-of-speech tag as an annotation on each word or symbol. Neither the splitter nor the tagger are a mandatory part of the NE system, but the annotations they produce can be used by the grammar (described below), in order to increase its power and coverage. of lists such as cities, organisations, days of the week, etc. It not only consists of entities, but also of names of useful as typical company designators (e.g. &apos;Ltd:), titles, etc. The gazetteer lists are compiled into finite state machines, which can match text tokens. tagger of handcrafted rules written in the JAPE (Java Annotations Pattern Engine) language (Cunningham et al., 2002), which describe patterns to match and annotations to be created as a result. JAPE is a version of CPSL (Common Pattern Specification Language) (Appelt, 1996), which provides finite state transduction over annotations based on regular expressions. A JAPE grammar consists of a set of phases, each of which consists of a set of pattern/action rules, and which run sequentially. Patterns can be specified by describing a specific text string, or annotations previously created by modules such as the tokeniser, gazetteer, or document format analysis. Rule prioritisation (if activated) prevents multiple assignment of annotations to the same text string. another optional module for the IE system. Its primary objective is to perform co-reference, or entity tracking, by recognising relations between entities. It also has a secondary role in improving named entity recognition by assigning annotations to previously unclassified names, based on relations with existing entities. identity relations between entities in the text. For more details see (Dimitrov, 2002). 4.1 Implementation The implementation of the processing resources is centred on robustness, usability and the clear distinction between declarative data representations and finite state algorithms The behaviour of all the processors is completely controlled by external resources such as grammars or rule sets, which makes them easily modifiable by users who do not need to be familiar with programming languages. The fact that all processing resources use finite-state transducer technology makes them quite performant in terms of execution times. Our initial experiments show that the full named entity recognition system is capable of processing around 2.5KB/s on a PITT 450 with 256 MB RAM (independently of the size of the input file; the processing requirement is linear in relation to the text size). Scalability was tested by running the ANNIE modules over a randomly chosen part of the British National Corpus (10% of all documents), which contained documents of up to 17MB in size. 5 Language Resource Creation Since many NLP algorithms require annotated corpora for training, GATE&apos;s development environment provides easy-to-use and extendable facilities for text annotation. In order to test their usability in practice, we used these facilities to build corpora of named entity annotated texts for the MUSE, ACE, and MUMIS applications. The annotation can be done manually by the user or semi-automatically by running some processing resources over the corpus and then correcting/adding new annotations manually. Depending on the information that needs to be annotated, some ANNIE modules can be used or adapted to bootstrap the corpus annotation task. For example, users from the humanities created a gazetteer list with 18th century place names in London, which when supplied to the ANNIE gazetteer, allows the automatic annotation of place information in a large collection of 18th century court reports from the Old Bailey in London. Since manual annotation is a difficult and error-prone task, GATE tries to make it simple to use and yet keep it flexible. To add a new annotation, one selects the text with the mouse (e.g., &amp;quot;Mr. Clever&amp;quot;) and then clicks on the desired annotation type (e.g., Person), which is shown in the list of types on the right-handside of the document viewer (see Figure 1). If however the desired annotation type does not already appear there or the user wants to associate more detailed information with the annotation (not just its type), then an annotation editing dialogue can be used. 6 Evaluation A vital part of any language engineering application is the evaluation of its performance, and a development environment for this purpose would not be complete without some mechanisms for its measurement in a large number of test cases. GATE contains two such mechanisms: an evaluation tool (AnnotationDiff) which enables automated performance measurement and visualisation of the results, and a benchmarking tool, which enables the tracking of a system&apos;s progress and regression testing. 6.1 The AnnotationDiff Tool Gate&apos;s AnnotationDiff tool enables two sets of annotations on a document to be compared, in order to either compare a system-annotated text with a reference (hand-annotated) text, or to compare the output of two different versions of the system (or two different systems). For each annotation type, figures are generated for precision, recall, F-measure and false positives. The AnnotationDiff viewer displays the two sets of annotations, marked with different colours (similar to &apos;visual diff&apos; implementations such as in the MKS Toolkit or TkDiff). Annotations in the key set have two possible colours depending on their state: white for annotations which have a compatible (or partially compatible) annotation in the response set, and orange for annotations which are missing in the response set. Annotations in the response set have three possible colours: green if they are compatible with the key annotation, blue if they Figure 3: Fragment of results from benchmark tool are partially compatible, and red if they are spurious. In the viewer, two annotations will be positioned on the same row if they are co-extensive, and on different rows if not. 6.2 Benchmarking tool GATE&apos;s benchmarking tool differs from the AnnotationDiff in that it enables evaluation to be carried out over a whole corpus rather than a single document. It also enables tracking of the system&apos;s performance over time. The tool requires a clean version of a corpus (with no annotations) and an annotated reference corpus. First of all, the tool is run in generation mode to produce a set of texts annotated by the system. These texts are stored for future use. The tool can then be run in three ways: 1. Comparing the annotated set with the reference set; 2. Comparing the annotated set with the set produced by a more recent version of the system resources (the latest set); 3. Comparing the latest set with the reference set. In each case, performance statistics will be provided for each text in the set, and overall statistics for the entire set, in comparison with the reference set. In case 2, information is also provided about whether the figures have increased or decreased in comparison with the annotated set. The annotated set can be updated at any time by rerunning the tool in generation mode with the latest version of the system resources. Furthermore, the system can be run in verbose mode, where for each figure below a certain threshold (set by the user), the non-coextensive annotations (and their corresponding text) will be displayed. The output of the tool is written to an HTML file in tabular form, as shown in Figure 3. Current evaluations for the MUSE NE system are producing average figures of 90-95% Precision and Recall on a selection of different text types (spoken transcriptions, emails etc.). The default ANNIE system produces figures of between 80-90% Precision and Recall on news texts. This figure is lower than for the MUSE system, because the resources have not been tuned to a specific text type or application, but are intended to be adapted as necessary. Work on resolution of anaphora is currently averaging 63% Precision and 45% Recall, although this work is still very much in progress, and we expect these figures to improve in the near future. 7 Related Work GATE draws from a large pool of previous work on infrastructures, architectures and development environments for representing and processing language resources, corpora, and annotations. Due to space limitations here we will discuss only a small subset. For a detailed review and its use for deriving the desiderata for this architecture see (Cunningham, 2000). Work on standard ways to deal with XML data is relevant here, such as the LT XML work at Edinburgh (Thompson and McKelvie, 1997), as is work on managing collections of documents and their formats, e.g. (Brugman et al., 1998; Grishman, 1997; Zajac, 1998). We have also drawn from work on representing information about text and speech, e.g. (Brugman et al., 1998; Mikheev and Finch, 1997; Zajac, 1998; Young et al., 1999), as well as annotation standards, such as the ATLAS project (an architecture for linguistic annotation) at LDC (Bird et kirlactunerkterripNerl ABC19980430.1830.0858.sgm Annotation tope. , GPE RecallIncreaseon Atonaltmarked iron 06371426571426571la10 type Organization 1.0 increaseon hurnan-markedto 1 0 09444444444444444 Mug 07, limEll.ncreaseon tom0345to 07, 14153ING ANNOTATIONSIt To automatetetteABC Ir.NNOTATKMISinTo embroil,bath PARTIALLYCORRECT Pl4071&amp;quot;ATIC*15nhe automateIDA, PratotationType Annotation type Person Precision increase on human-marked from 08947368421052632 lc 09444444444444444 03444444444444444 al., 2000). Our approach is also related to work on user interfaces to architectural facilities such as development environments, e.g. (Brugman et al., 1998) and to work on comparing different versions of information, e.g. (Sparck-Jones and Galliers, 1996; Paggio, 1998). This work is particularly novel in that it addresses the complete range of issues in NLP application development in a flexible and extensible way, rather than focusing just on some particular aspect of the development process. In addition, it promotes robustness, re-usability, and scalability as important principles that help with the construction of practical NLP systems. 8 Conclusions In this paper we have described an infrastructure for language engineering software which aims to assist the develeopment of robust tools and resources for NLP. One future direction is the integration of processing resources which learn in the background while the user is annotating corpora in GATE&apos;s visual environment. Currently, statistical models can be integrated but need to be trained separately. We are also extending the system to handle language generation modules, in order to enable the construction of applications which require language production in addition to analysis, e.g. intelligent report generation from IE data.</abstract>
<note confidence="0.7033517">References D.E. Appelt. 1996. The Common Pattern Specifi- Language. Technical report, International, Artificial Intelligence Center. S. Bird, D. Day, J. Garofolo, J. Henderson, C. Laprun, and M. Liberman. 2000. ATLAS: A flexible and extensible architecture for linguistic In of the Second International Conference on Language Resources and H. Brugman, H.G. Russel, and P. Wittenburg. 1998.</note>
<title confidence="0.510660666666667">An infrastructure for collaboratively building and using multimedia corpora in the humaniora. In Proceedings of the ED-MEDIA/ED-TELECOM</title>
<author confidence="0.831439">H Cunningham</author>
<author confidence="0.831439">D Maynard</author>
<author confidence="0.831439">K Bontcheva</author>
<address confidence="0.7967065">Tablan, and C. Ursu. 2002. GATE User Cunningham. 2000. Architecture for</address>
<affiliation confidence="0.661686">Engineering. thesis, University</affiliation>
<address confidence="0.917073">Sheffield.</address>
<author confidence="0.454009">a General Archi- GATE</author>
<title confidence="0.351101">for Text Engineering. and the</title>
<author confidence="0.413015">A Approach to Coreference Resolution for Named Entities in</author>
<affiliation confidence="0.664389">Thesis, University of Sofia, Bulgaria.</affiliation>
<web confidence="0.925314">http://www.ontotext.com/ie/thesis-m.pdf.</web>
<note confidence="0.921060382352941">Grishman. 1997. TIPSTER ture Design Document Version 2.3. Technireport, DARPA. div894/894.02/related_projects/tipster/. D. Maynard, V. Tablan, C. Ursu, H. Cunningham, and Y. Wilks. 2001. Named Entity Recognition Diverse Text Types. In Advances in Natural Language Processing 2001 Conference, Tzigov Chark, Bulgaria. A. M. McEnery, P. Baker, R. Gaizauskas, and H. Cunningham. 2000. EMILLE: Building a Corof South Asian Languages. A Quarin Artificial Intelligence, A. Mikheev and S. Finch. 1997. A Workbench for Structure in Text. In Conference on NLP (ANLP-97), DC. P. Paggio. 1998. Validating the TEMAA LE evalutation methodology: a case study on Danish spelling of Natural Language Engineer- Sparck-Jones and J. Galliers. 1996. Language Processing Systems. Berlin. H. Thompson and D. McKelvie. 1997. Hyperlink semantics for standoff markup of read-only In of SGML Europe &apos;97, Barcelona. S. Young, D. Kershaw, J. Odell, D. 011ason, Valtchev, and P. Woodland. 1999. HTK (Version 2.2). Ltd., Cambridge. ftp://ftp.entropic.com/pub/htk/. R. Zajac. 1998. Reuse and Integration of NLP Components in the Calypso Architecture. In Workshop on Distributing and Accessing Lin- Resources, 34-40, Granada, Spain.</note>
<web confidence="0.723853">http://www.dcs.shef.ac.uk/-hamish/dalr/.</web>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>D E Appelt</author>
</authors>
<title>The Common Pattern Specification Language.</title>
<date>1996</date>
<tech>Technical report,</tech>
<institution>SRI International, Artificial Intelligence Center.</institution>
<contexts>
<context position="15448" citStr="Appelt, 1996" startWordPosition="2450" endWordPosition="2451">ge. The gazetteer consists of lists such as cities, organisations, days of the week, etc. It not only consists of entities, but also of names of useful indicators, such as typical company designators (e.g. &apos;Ltd:), titles, etc. The gazetteer lists are compiled into finite state machines, which can match text tokens. The semantic tagger consists of handcrafted rules written in the JAPE (Java Annotations Pattern Engine) language (Cunningham et al., 2002), which describe patterns to match and annotations to be created as a result. JAPE is a version of CPSL (Common Pattern Specification Language) (Appelt, 1996), which provides finite state transduction over annotations based on regular expressions. A JAPE grammar consists of a set of phases, each of which consists of a set of pattern/action rules, and which run sequentially. Patterns can be specified by describing a specific text string, or annotations previously created by modules such as the tokeniser, gazetteer, or document format analysis. Rule prioritisation (if activated) prevents multiple assignment of annotations to the same text string. The orthomatcher is another optional module for the IE system. Its primary objective is to perform co-ref</context>
</contexts>
<marker>Appelt, 1996</marker>
<rawString>D.E. Appelt. 1996. The Common Pattern Specification Language. Technical report, SRI International, Artificial Intelligence Center.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Bird</author>
<author>D Day</author>
<author>J Garofolo</author>
<author>J Henderson</author>
<author>C Laprun</author>
<author>M Liberman</author>
</authors>
<title>ATLAS: A flexible and extensible architecture for linguistic annotation.</title>
<date>2000</date>
<booktitle>In Proceedings of the Second International Conference on Language Resources and Evaluation,</booktitle>
<location>Athens.</location>
<contexts>
<context position="6689" citStr="Bird et al., 2000" startWordPosition="1060" endWordPosition="1063">ameter to each PR. When the application is run, the modules will be executed in the specified order on the given document. The results can be viewed in the document viewer/editor (see Figure 1). 2.2 Data representation and handling GATE supports a variety of formats including XML, RTF, HTML, SGML, email and plain text. In all cases, when a document is created/opened in GATE, the format is analysed and converted into a single unified model of annotation. The annotation format is a modified form of the TIPSTER format (Grishman, 1997) which has been made largely compatible with the Atlas format (Bird et al., 2000), and uses the now standard mechanism of &apos;stand-off markup&apos; (Thompson and McKelvie, 1997). The annotations associated with each document are a structure central to GATE, because they encode the language data read and produced by each processing module. The GATE framework also provides persistent storage of language resources. It currently offers three storage mechanisms: one uses relational databases (e.g. Oracle) and the other two are file- based, using Java serialisation or an XML-based internal format. GATE documents can also be exported back to their original format (e.g. SGML/XML for the </context>
</contexts>
<marker>Bird, Day, Garofolo, Henderson, Laprun, Liberman, 2000</marker>
<rawString>S. Bird, D. Day, J. Garofolo, J. Henderson, C. Laprun, and M. Liberman. 2000. ATLAS: A flexible and extensible architecture for linguistic annotation. In Proceedings of the Second International Conference on Language Resources and Evaluation, Athens.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Brugman</author>
<author>H G Russel</author>
<author>P Wittenburg</author>
</authors>
<title>An infrastructure for collaboratively building and using multimedia corpora in the humaniora.</title>
<date>1998</date>
<booktitle>In Proceedings of the ED-MEDIA/ED-TELECOM Conference,</booktitle>
<location>Freiburg.</location>
<contexts>
<context position="23329" citStr="Brugman et al., 1998" startWordPosition="3746" endWordPosition="3749">in the near future. 7 Related Work GATE draws from a large pool of previous work on infrastructures, architectures and development environments for representing and processing language resources, corpora, and annotations. Due to space limitations here we will discuss only a small subset. For a detailed review and its use for deriving the desiderata for this architecture see (Cunningham, 2000). Work on standard ways to deal with XML data is relevant here, such as the LT XML work at Edinburgh (Thompson and McKelvie, 1997), as is work on managing collections of documents and their formats, e.g. (Brugman et al., 1998; Grishman, 1997; Zajac, 1998). We have also drawn from work on representing information about text and speech, e.g. (Brugman et al., 1998; Mikheev and Finch, 1997; Zajac, 1998; Young et al., 1999), as well as annotation standards, such as the ATLAS project (an architecture for linguistic annotation) at LDC (Bird et kivis kirlactunerkterrip Nerl ABC19980430.1830.0858.sgm Annotation tope. , GPE Recall Increase on Atonaltmarked iron 0 6371426571426571 la 1 0 Annotalem type Organization 1.0 Precision increase on hurnan-marked 11,011) 4Th to 1 0 0 9444444444444444 Mug 07, limEll.ncrease on human-m</context>
</contexts>
<marker>Brugman, Russel, Wittenburg, 1998</marker>
<rawString>H. Brugman, H.G. Russel, and P. Wittenburg. 1998. An infrastructure for collaboratively building and using multimedia corpora in the humaniora. In Proceedings of the ED-MEDIA/ED-TELECOM Conference, Freiburg.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Cunningham</author>
<author>D Maynard</author>
<author>K Bontcheva</author>
<author>V Tablan</author>
<author>C Ursu</author>
</authors>
<date>2002</date>
<booktitle>The GATE User Guide. http://gate.ac.uk/.</booktitle>
<contexts>
<context position="13640" citStr="Cunningham et al., 2002" startWordPosition="2152" endWordPosition="2155">oupled together with new modules in order to create new applications. For example, many other NLP tasks might require a sentence splitter and POS tagger, but would not necessarily require resources more specific to IE tasks such as a named entity transducer. The system is in use for a variety of IE and other tasks, sometimes in combination with other sets of application-specific modules. ANNIE consists of the following main processing resources: tokeniser, sentence splitter, POS tagger, gazetteer, finite state transducer (based on GATE&apos;s built-in regular expressions over annotations language (Cunningham et al., 2002)), orthomatcher and coreference resolver. The resources communicate via GATE&apos;s annotation API, which is a directed graph of arcs bearing arbitrary feature/value data, and nodes rooting this data into document content (in this case text). The tokeniser splits text into simple tokens, such as numbers, punctuation, symbols, and words of different types (e.g. with an initial capital, all upper case, etc.). The aim is to limit the work of the tokeniser to maximise efficiency, and enable greater flexibility by placing the burden of analysis on the grammars. This means that the tokeniser does not nee</context>
<context position="15290" citStr="Cunningham et al., 2002" startWordPosition="2422" endWordPosition="2425">he tagger are a mandatory part of the NE system, but the annotations they produce can be used by the grammar (described below), in order to increase its power and coverage. The gazetteer consists of lists such as cities, organisations, days of the week, etc. It not only consists of entities, but also of names of useful indicators, such as typical company designators (e.g. &apos;Ltd:), titles, etc. The gazetteer lists are compiled into finite state machines, which can match text tokens. The semantic tagger consists of handcrafted rules written in the JAPE (Java Annotations Pattern Engine) language (Cunningham et al., 2002), which describe patterns to match and annotations to be created as a result. JAPE is a version of CPSL (Common Pattern Specification Language) (Appelt, 1996), which provides finite state transduction over annotations based on regular expressions. A JAPE grammar consists of a set of phases, each of which consists of a set of pattern/action rules, and which run sequentially. Patterns can be specified by describing a specific text string, or annotations previously created by modules such as the tokeniser, gazetteer, or document format analysis. Rule prioritisation (if activated) prevents multipl</context>
</contexts>
<marker>Cunningham, Maynard, Bontcheva, Tablan, Ursu, 2002</marker>
<rawString>H. Cunningham, D. Maynard, K. Bontcheva, V. Tablan, and C. Ursu. 2002. The GATE User Guide. http://gate.ac.uk/.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Cunningham</author>
</authors>
<title>Software Architecture for Language Engineering.</title>
<date>2000</date>
<tech>Ph.D. thesis,</tech>
<institution>University of Sheffield.</institution>
<note>http://gate.ac.uk/sale/thesis/.</note>
<contexts>
<context position="23104" citStr="Cunningham, 2000" startWordPosition="3708" endWordPosition="3709">n, but are intended to be adapted as necessary. Work on resolution of anaphora is currently averaging 63% Precision and 45% Recall, although this work is still very much in progress, and we expect these figures to improve in the near future. 7 Related Work GATE draws from a large pool of previous work on infrastructures, architectures and development environments for representing and processing language resources, corpora, and annotations. Due to space limitations here we will discuss only a small subset. For a detailed review and its use for deriving the desiderata for this architecture see (Cunningham, 2000). Work on standard ways to deal with XML data is relevant here, such as the LT XML work at Edinburgh (Thompson and McKelvie, 1997), as is work on managing collections of documents and their formats, e.g. (Brugman et al., 1998; Grishman, 1997; Zajac, 1998). We have also drawn from work on representing information about text and speech, e.g. (Brugman et al., 1998; Mikheev and Finch, 1997; Zajac, 1998; Young et al., 1999), as well as annotation standards, such as the ATLAS project (an architecture for linguistic annotation) at LDC (Bird et kivis kirlactunerkterrip Nerl ABC19980430.1830.0858.sgm A</context>
</contexts>
<marker>Cunningham, 2000</marker>
<rawString>H. Cunningham. 2000. Software Architecture for Language Engineering. Ph.D. thesis, University of Sheffield. http://gate.ac.uk/sale/thesis/.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Cunningham</author>
</authors>
<title>GATE, a General Architecture for Text Engineering. Computers and the Humanities,</title>
<date>2002</date>
<pages>36--223</pages>
<marker>Cunningham, 2002</marker>
<rawString>H. Cunningham. 2002. GATE, a General Architecture for Text Engineering. Computers and the Humanities, 36:223-254.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M</author>
</authors>
<title>A Light-weight Approach to Coreference Resolution for Named Entities in Text. MSc Thesis,</title>
<date>2002</date>
<institution>University of Sofia, Bulgaria.</institution>
<note>http://www.ontotext.com/ie/thesis-m.pdf.</note>
<marker>M, 2002</marker>
<rawString>M . Dimitrov. 2002. A Light-weight Approach to Coreference Resolution for Named Entities in Text. MSc Thesis, University of Sofia, Bulgaria. http://www.ontotext.com/ie/thesis-m.pdf.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Grishman</author>
</authors>
<date>1997</date>
<journal>TIPSTER Architecture Design Document Version</journal>
<tech>Technical report, DARPA. http://www.itl.nist.gov/-div894/894.02/related_projects/tipster/.</tech>
<volume>2</volume>
<contexts>
<context position="6608" citStr="Grishman, 1997" startWordPosition="1048" endWordPosition="1049"> of each resource are also set there, e.g. a loaded document is given as a parameter to each PR. When the application is run, the modules will be executed in the specified order on the given document. The results can be viewed in the document viewer/editor (see Figure 1). 2.2 Data representation and handling GATE supports a variety of formats including XML, RTF, HTML, SGML, email and plain text. In all cases, when a document is created/opened in GATE, the format is analysed and converted into a single unified model of annotation. The annotation format is a modified form of the TIPSTER format (Grishman, 1997) which has been made largely compatible with the Atlas format (Bird et al., 2000), and uses the now standard mechanism of &apos;stand-off markup&apos; (Thompson and McKelvie, 1997). The annotations associated with each document are a structure central to GATE, because they encode the language data read and produced by each processing module. The GATE framework also provides persistent storage of language resources. It currently offers three storage mechanisms: one uses relational databases (e.g. Oracle) and the other two are file- based, using Java serialisation or an XML-based internal format. GATE doc</context>
<context position="23345" citStr="Grishman, 1997" startWordPosition="3750" endWordPosition="3751">Related Work GATE draws from a large pool of previous work on infrastructures, architectures and development environments for representing and processing language resources, corpora, and annotations. Due to space limitations here we will discuss only a small subset. For a detailed review and its use for deriving the desiderata for this architecture see (Cunningham, 2000). Work on standard ways to deal with XML data is relevant here, such as the LT XML work at Edinburgh (Thompson and McKelvie, 1997), as is work on managing collections of documents and their formats, e.g. (Brugman et al., 1998; Grishman, 1997; Zajac, 1998). We have also drawn from work on representing information about text and speech, e.g. (Brugman et al., 1998; Mikheev and Finch, 1997; Zajac, 1998; Young et al., 1999), as well as annotation standards, such as the ATLAS project (an architecture for linguistic annotation) at LDC (Bird et kivis kirlactunerkterrip Nerl ABC19980430.1830.0858.sgm Annotation tope. , GPE Recall Increase on Atonaltmarked iron 0 6371426571426571 la 1 0 Annotalem type Organization 1.0 Precision increase on hurnan-marked 11,011) 4Th to 1 0 0 9444444444444444 Mug 07, limEll.ncrease on human-matted tom 0 345 </context>
</contexts>
<marker>Grishman, 1997</marker>
<rawString>R. Grishman. 1997. TIPSTER Architecture Design Document Version 2.3. Technical report, DARPA. http://www.itl.nist.gov/-div894/894.02/related_projects/tipster/.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Maynard</author>
<author>V Tablan</author>
<author>C Ursu</author>
<author>H Cunningham</author>
<author>Y Wilks</author>
</authors>
<title>Named Entity Recognition from Diverse Text Types.</title>
<date>2001</date>
<booktitle>In Recent Advances in Natural Language Processing 2001 Conference, Tzigov Chark,</booktitle>
<contexts>
<context position="10812" citStr="Maynard et al., 2001" startWordPosition="1712" endWordPosition="1715">nguages with no additional overhead apart from the development of the resources needed for the specific language. These facilities have been developed as part of the EMILLE project (McEnery et al., 2000), which focuses on the construction a 63 million word electronic corpus of South Asian languages. 3 Applications One of GATE&apos;s strengths is that it is flexible and robust enough to enable the development of a wide range of applications within its framework. In this section, we describe briefly some of the NLP applications we have developed using the GATE architecture. 3.1 MUSE The MUSE system (Maynard et al., 2001) is a multi-purpose Named Entity recognition system which is capable of processing texts from widely different domains and genres, thereby aiming to reduce the need for costly and time-consuming adaptation of existing resources to new applications and domains. The system aims to identify the parameters relevant to the creation of a name recognition system across different types of variability such as changes in domain, genre and media. For example, less formal texts may not follow standard capitalisation, punctuation and spelling formats, which can be a problem for many generic NE systems. Cur</context>
</contexts>
<marker>Maynard, Tablan, Ursu, Cunningham, Wilks, 2001</marker>
<rawString>D. Maynard, V. Tablan, C. Ursu, H. Cunningham, and Y. Wilks. 2001. Named Entity Recognition from Diverse Text Types. In Recent Advances in Natural Language Processing 2001 Conference, Tzigov Chark, Bulgaria.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A M McEnery</author>
<author>P Baker</author>
<author>R Gaizauskas</author>
<author>H Cunningham</author>
</authors>
<title>EMILLE: Building a</title>
<date>2000</date>
<journal>Corpus of South Asian Languages. Vivek, A Quarterly in Artificial Intelligence,</journal>
<pages>13--3</pages>
<contexts>
<context position="10394" citStr="McEnery et al., 2000" startWordPosition="1643" endWordPosition="1646">ds can be defined by the users and added to the system as needed. For displaying the text, GATE relies on the rendering facilities offered by the Java implementation for the platform it runs on. Figure 2 gives an example of text in various languages displayed by GATE. The ability to handle Unicode data, along with the separation between data and implementation, allows LE systems based on GATE to be ported to new languages with no additional overhead apart from the development of the resources needed for the specific language. These facilities have been developed as part of the EMILLE project (McEnery et al., 2000), which focuses on the construction a 63 million word electronic corpus of South Asian languages. 3 Applications One of GATE&apos;s strengths is that it is flexible and robust enough to enable the development of a wide range of applications within its framework. In this section, we describe briefly some of the NLP applications we have developed using the GATE architecture. 3.1 MUSE The MUSE system (Maynard et al., 2001) is a multi-purpose Named Entity recognition system which is capable of processing texts from widely different domains and genres, thereby aiming to reduce the need for costly and ti</context>
</contexts>
<marker>McEnery, Baker, Gaizauskas, Cunningham, 2000</marker>
<rawString>A. M. McEnery, P. Baker, R. Gaizauskas, and H. Cunningham. 2000. EMILLE: Building a Corpus of South Asian Languages. Vivek, A Quarterly in Artificial Intelligence, 13(3):23-32.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Mikheev</author>
<author>S Finch</author>
</authors>
<title>A Workbench for Finding Structure in Text.</title>
<date>1997</date>
<booktitle>In Fifth Conference on Applied NLP (ANLP-97),</booktitle>
<location>Washington, DC.</location>
<contexts>
<context position="23492" citStr="Mikheev and Finch, 1997" startWordPosition="3772" endWordPosition="3775"> and processing language resources, corpora, and annotations. Due to space limitations here we will discuss only a small subset. For a detailed review and its use for deriving the desiderata for this architecture see (Cunningham, 2000). Work on standard ways to deal with XML data is relevant here, such as the LT XML work at Edinburgh (Thompson and McKelvie, 1997), as is work on managing collections of documents and their formats, e.g. (Brugman et al., 1998; Grishman, 1997; Zajac, 1998). We have also drawn from work on representing information about text and speech, e.g. (Brugman et al., 1998; Mikheev and Finch, 1997; Zajac, 1998; Young et al., 1999), as well as annotation standards, such as the ATLAS project (an architecture for linguistic annotation) at LDC (Bird et kivis kirlactunerkterrip Nerl ABC19980430.1830.0858.sgm Annotation tope. , GPE Recall Increase on Atonaltmarked iron 0 6371426571426571 la 1 0 Annotalem type Organization 1.0 Precision increase on hurnan-marked 11,011) 4Th to 1 0 0 9444444444444444 Mug 07, limEll.ncrease on human-matted tom 0 345 to 07, 14153ING ANNOTATIONS It To automate tette ABC &apos;rs,&amp;quot;11:&amp;quot;5 `7 Ir.NNOTATKMIS in To embroil, bath PARTIALLY CORRECT Pl4071&amp;quot;ATIC*15 n he automate</context>
</contexts>
<marker>Mikheev, Finch, 1997</marker>
<rawString>A. Mikheev and S. Finch. 1997. A Workbench for Finding Structure in Text. In Fifth Conference on Applied NLP (ANLP-97), Washington, DC.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Paggio</author>
</authors>
<title>Validating the TEMAA LE evalutation methodology: a case study on Danish spelling checkers.</title>
<date>1998</date>
<journal>Journal of Natural Language Engineering,</journal>
<pages>4--3</pages>
<contexts>
<context position="24518" citStr="Paggio, 1998" startWordPosition="3922" endWordPosition="3923">imEll.ncrease on human-matted tom 0 345 to 07, 14153ING ANNOTATIONS It To automate tette ABC &apos;rs,&amp;quot;11:&amp;quot;5 `7 Ir.NNOTATKMIS in To embroil, bath PARTIALLY CORRECT Pl4071&amp;quot;ATIC*15 n he automate IDA, Pratotation Type :Precision Annotation type Person Precision increase on human-marked from 0 8947368421052632 lc 0 9444444444444444 03444444444444444 al., 2000). Our approach is also related to work on user interfaces to architectural facilities such as development environments, e.g. (Brugman et al., 1998) and to work on comparing different versions of information, e.g. (Sparck-Jones and Galliers, 1996; Paggio, 1998). This work is particularly novel in that it addresses the complete range of issues in NLP application development in a flexible and extensible way, rather than focusing just on some particular aspect of the development process. In addition, it promotes robustness, re-usability, and scalability as important principles that help with the construction of practical NLP systems. 8 Conclusions In this paper we have described an infrastructure for language engineering software which aims to assist the develeopment of robust tools and resources for NLP. One future direction is the integration of proc</context>
</contexts>
<marker>Paggio, 1998</marker>
<rawString>P. Paggio. 1998. Validating the TEMAA LE evalutation methodology: a case study on Danish spelling checkers. Journal of Natural Language Engineering, 4(3):211-228.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Sparck-Jones</author>
<author>J Galliers</author>
</authors>
<title>Evaluating Natural Language Processing Systems.</title>
<date>1996</date>
<publisher>Springer,</publisher>
<location>Berlin.</location>
<contexts>
<context position="24503" citStr="Sparck-Jones and Galliers, 1996" startWordPosition="3918" endWordPosition="3921"> 1 0 0 9444444444444444 Mug 07, limEll.ncrease on human-matted tom 0 345 to 07, 14153ING ANNOTATIONS It To automate tette ABC &apos;rs,&amp;quot;11:&amp;quot;5 `7 Ir.NNOTATKMIS in To embroil, bath PARTIALLY CORRECT Pl4071&amp;quot;ATIC*15 n he automate IDA, Pratotation Type :Precision Annotation type Person Precision increase on human-marked from 0 8947368421052632 lc 0 9444444444444444 03444444444444444 al., 2000). Our approach is also related to work on user interfaces to architectural facilities such as development environments, e.g. (Brugman et al., 1998) and to work on comparing different versions of information, e.g. (Sparck-Jones and Galliers, 1996; Paggio, 1998). This work is particularly novel in that it addresses the complete range of issues in NLP application development in a flexible and extensible way, rather than focusing just on some particular aspect of the development process. In addition, it promotes robustness, re-usability, and scalability as important principles that help with the construction of practical NLP systems. 8 Conclusions In this paper we have described an infrastructure for language engineering software which aims to assist the develeopment of robust tools and resources for NLP. One future direction is the inte</context>
</contexts>
<marker>Sparck-Jones, Galliers, 1996</marker>
<rawString>K. Sparck-Jones and J. Galliers. 1996. Evaluating Natural Language Processing Systems. Springer, Berlin.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Thompson</author>
<author>D McKelvie</author>
</authors>
<title>Hyperlink semantics for standoff markup of read-only documents.</title>
<date>1997</date>
<booktitle>In Proceedings of SGML Europe &apos;97,</booktitle>
<location>Barcelona.</location>
<contexts>
<context position="6778" citStr="Thompson and McKelvie, 1997" startWordPosition="1073" endWordPosition="1076"> the specified order on the given document. The results can be viewed in the document viewer/editor (see Figure 1). 2.2 Data representation and handling GATE supports a variety of formats including XML, RTF, HTML, SGML, email and plain text. In all cases, when a document is created/opened in GATE, the format is analysed and converted into a single unified model of annotation. The annotation format is a modified form of the TIPSTER format (Grishman, 1997) which has been made largely compatible with the Atlas format (Bird et al., 2000), and uses the now standard mechanism of &apos;stand-off markup&apos; (Thompson and McKelvie, 1997). The annotations associated with each document are a structure central to GATE, because they encode the language data read and produced by each processing module. The GATE framework also provides persistent storage of language resources. It currently offers three storage mechanisms: one uses relational databases (e.g. Oracle) and the other two are file- based, using Java serialisation or an XML-based internal format. GATE documents can also be exported back to their original format (e.g. SGML/XML for the British National Corpus (BNC)) and the user can choose whether some additional annotation</context>
<context position="23234" citStr="Thompson and McKelvie, 1997" startWordPosition="3730" endWordPosition="3733"> 45% Recall, although this work is still very much in progress, and we expect these figures to improve in the near future. 7 Related Work GATE draws from a large pool of previous work on infrastructures, architectures and development environments for representing and processing language resources, corpora, and annotations. Due to space limitations here we will discuss only a small subset. For a detailed review and its use for deriving the desiderata for this architecture see (Cunningham, 2000). Work on standard ways to deal with XML data is relevant here, such as the LT XML work at Edinburgh (Thompson and McKelvie, 1997), as is work on managing collections of documents and their formats, e.g. (Brugman et al., 1998; Grishman, 1997; Zajac, 1998). We have also drawn from work on representing information about text and speech, e.g. (Brugman et al., 1998; Mikheev and Finch, 1997; Zajac, 1998; Young et al., 1999), as well as annotation standards, such as the ATLAS project (an architecture for linguistic annotation) at LDC (Bird et kivis kirlactunerkterrip Nerl ABC19980430.1830.0858.sgm Annotation tope. , GPE Recall Increase on Atonaltmarked iron 0 6371426571426571 la 1 0 Annotalem type Organization 1.0 Precision in</context>
</contexts>
<marker>Thompson, McKelvie, 1997</marker>
<rawString>H. Thompson and D. McKelvie. 1997. Hyperlink semantics for standoff markup of read-only documents. In Proceedings of SGML Europe &apos;97, Barcelona.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Young</author>
<author>D Kershaw</author>
<author>J Odell</author>
<author>D 011ason</author>
<author>V Valtchev</author>
<author>P Woodland</author>
</authors>
<date>1999</date>
<booktitle>The HTK Book (Version 2.2). Entropic Ltd.,</booktitle>
<location>Cambridge. ftp://ftp.entropic.com/pub/htk/.</location>
<marker>Young, Kershaw, Odell, 011ason, Valtchev, Woodland, 1999</marker>
<rawString>S. Young, D. Kershaw, J. Odell, D. 011ason, V. Valtchev, and P. Woodland. 1999. The HTK Book (Version 2.2). Entropic Ltd., Cambridge. ftp://ftp.entropic.com/pub/htk/.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Zajac</author>
</authors>
<title>Reuse and Integration of NLP Components in the Calypso Architecture.</title>
<date>1998</date>
<booktitle>In Workshop on Distributing and Accessing Linguistic Resources,</booktitle>
<pages>34--40</pages>
<location>Granada, Spain. http://www.dcs.shef.ac.uk/-hamish/dalr/.</location>
<contexts>
<context position="23359" citStr="Zajac, 1998" startWordPosition="3752" endWordPosition="3753">E draws from a large pool of previous work on infrastructures, architectures and development environments for representing and processing language resources, corpora, and annotations. Due to space limitations here we will discuss only a small subset. For a detailed review and its use for deriving the desiderata for this architecture see (Cunningham, 2000). Work on standard ways to deal with XML data is relevant here, such as the LT XML work at Edinburgh (Thompson and McKelvie, 1997), as is work on managing collections of documents and their formats, e.g. (Brugman et al., 1998; Grishman, 1997; Zajac, 1998). We have also drawn from work on representing information about text and speech, e.g. (Brugman et al., 1998; Mikheev and Finch, 1997; Zajac, 1998; Young et al., 1999), as well as annotation standards, such as the ATLAS project (an architecture for linguistic annotation) at LDC (Bird et kivis kirlactunerkterrip Nerl ABC19980430.1830.0858.sgm Annotation tope. , GPE Recall Increase on Atonaltmarked iron 0 6371426571426571 la 1 0 Annotalem type Organization 1.0 Precision increase on hurnan-marked 11,011) 4Th to 1 0 0 9444444444444444 Mug 07, limEll.ncrease on human-matted tom 0 345 to 07, 14153IN</context>
</contexts>
<marker>Zajac, 1998</marker>
<rawString>R. Zajac. 1998. Reuse and Integration of NLP Components in the Calypso Architecture. In Workshop on Distributing and Accessing Linguistic Resources, pages 34-40, Granada, Spain. http://www.dcs.shef.ac.uk/-hamish/dalr/.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>