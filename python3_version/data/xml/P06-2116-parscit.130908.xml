<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000288">
<title confidence="0.9993185">
A Grammatical Approach to Understanding Textual Tables using
Two-Dimensional SCFGs
</title>
<author confidence="0.987417">
Dekai WU� Ken Wing Kuen LEE
</author>
<affiliation confidence="0.750933">
Human Language Technology Center
HKUST
Department of Computer Science and Engineering
University of Science and Technology
Clear Water Bay, Hong Kong
</affiliation>
<email confidence="0.998506">
{dekai,cswkl}@cs.ust.hk
</email>
<sectionHeader confidence="0.997387" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999979642857143">
We present an elegant and extensible
model that is capable of providing seman-
tic interpretations for an unusually wide
range of textual tables in documents. Un-
like the few existing table analysis mod-
els, which largely rely on relatively ad hoc
heuristics, our linguistically-oriented ap-
proach is systematic and grammar based,
which allows our model (1) to be concise
and yet (2) recognize a wider range of data
models than others, and (3) disambiguate
to a significantly finer extent the under-
lying semantic interpretation of the table
in terms of data models drawn from rela-
tion database theory. To accomplish this,
the model introduces Viterbi parsing under
two-dimensional stochastic CFGs. The
cleaner grammatical approach facilitates
not only greater coverage, but also gram-
mar extension and maintenance, as well as
a more direct and declarative link to se-
mantic interpretation, for which we also
introduce a new, cleaner data model. In
disambiguation experiments on recogniz-
ing relevant data models of unseen web ta-
bles from different domains, a blind evalu-
ation of the model showed 60% precision
and 80% recall.
</bodyText>
<sectionHeader confidence="0.99963" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.998772">
Natural language processing has historically
tended to emphasize understanding of linear
strings—sentences, paragraphs, discourse struc-
ture. The vast body of work that focuses on text
understanding is often seen as an approximation of
</bodyText>
<footnote confidence="0.976466">
1The authors would like to thank the Hong Kong Re-
search Grants Council (RGC) for supporting this research
in part through grants RGC6083/99E, RGC6256/00E, and
DAG03/04.EG09.
</footnote>
<bodyText confidence="0.999749463414634">
spoken language understanding. Yet real-life text
is actually heavily dependent on visual layout and
formatting, which compensate for cues normally
found in spoken language but are absent in text.
As Scott (2003) reiterated in the opening ACL’03
invited talk: “The overlay of graphics on text is in
many ways equivalent to the overlay of prosody on
speech... Just as prosody undoubtedly contributes
to the meaning of utterances, so too does a text’s
graphical presentation contribute to its meaning.
However... few natural language understanding
systems use graphical presentational features to
aid interpretation...” (Power et al., 2003).
Nowhere is this more evident than in the wide-
spread use of tables in real-world, unsimplified
text documents. Tables have a comparable or
greater complexity as other elements of text. Un-
fortunately, in mainstream NLP it is not uncom-
mon for tables to be regarded as a somehow “de-
generate” form of text, unworthy of the same de-
gree of attention as the rest of the text. But as
we will discuss, the degree of ambiguity in ta-
ble understanding is at least as great as for many
sense and attachment problems. Many of the same
mechanisms used for understanding linear text are
also required for table understanding. The same
division of surface syntax and underlying seman-
tics is found.
Indeed, to perceive the limitations of existing
table understanding models, we may distinguish
several very different levels of table analysis tasks.
In table classification, the table is classified into
one of several coarse categories (in the extreme
case, some models simply predict whether the pur-
pose of the table is for page layout versus tabular
data). In table synactic recognition, the surface
types of individual cells or block regions are la-
beled (e.g., as heading or data) but the underlying
semantic relationships between the table elements
remain unrecognized and usually highly ambigu-
ous (i.e., no logical relations between the elements
</bodyText>
<page confidence="0.973801">
905
</page>
<note confidence="0.724737">
Proceedings of the COLING/ACL 2006 Main Conference Poster Sessions, pages 905–912,
Sydney, July 2006. c�2006 Association for Computational Linguistics
</note>
<bodyText confidence="0.999483274509804">
in the table are assigned). In contrast, in table se-
mantic interpretation, the exact logical relations
between the elements in the table must be recog-
nized (e.g., by associating the table and/or subre-
gions thereof with precise table schemas in rela-
tional database style).
Existing table understanding work largely lies at
the level of superficial table classification or syn-
tactic recognition. Rarely, if ever, are precise logi-
cal relations assigned between the elements in the
table. Ad hoc heuristic approaches tend to rule,
rather than linguistic approaches.
On the other hand, in the linguistic approach ad-
vocated by Scott (2003) and (Power et al., 2003),
tables were not considered. The various physical
presentation elements discussed included head-
ings, captions, and bulleted lists—all of which
exhibit numerous similarities to tabular elements.
Possibly, tables were not considered because they
are difficult to describe adequately within the ex-
pressiveness of common linguistic formalisms like
CFGs.
The work presented here aims to address this
problem. Our model provides an enabling foun-
dation toward a linguistic approach by first shift-
ing to a two-dimensional CFG framework. This
permits us to construct a grammar where all the
rules are meaningfully discriminative, such that—
unlike existing table understanding models—any
analysis of a table includes a full parse tree that
assigns precise data model labels to all its regions
(including nested subregions) thereby specifying
the logical relations between the table’s elements.
Additionally, probabilities on the production rules
support thresholding (or ranking) of the alternative
candidate table interpretation hypotheses.
As with many natural language phenomena, a
full model of disambiguation must ultimately inte-
grate lexical semantics. However, in this research
step we focus on the question of how much seman-
tic interpretation can be performed on the basis of
other features, in the absence of a lexical or on-
tological model. Just as syntax and morphology
and prosody alone already permit much recogni-
tion and disambiguation of semantic roles and ar-
gument structure to be done for sentence, the same
can be done for tables. At the same time, we be-
lieve future integration of lexical semantics will be
facilitated by the grammatical framework of our
model.
One way to think about this is that we wish to
</bodyText>
<tableCaption confidence="0.999556">
Table 1: Example “Martian” table (see text).
</tableCaption>
<table confidence="0.99826">
Pbje Kwe Zxc Amc
Hoer 15 - 18 17 - 20 19 - 23
NQ 85 - 95% 70 - 90% 75 - 95%
Ncowifl Djhi Djhi Rubzlx
</table>
<bodyText confidence="0.999951795454546">
model what you might be able to recognize from a
“Martian” table such as that in Table 1. The non-
Martian reader relies solely on knowledge of al-
phabets and numbers, can spot font and formatting
clues, and is familiar with the conventions (i.e.,
grammars) of tables in general.
You might reasonably interpret this table as a
collection of vertical records with an attributes
header column (Pbje, Hoer, NQ, Ncowifl) on the
left. You might additionally interpret it as a ta-
ble that contains an record key header row (Kwe,
Zxc, Amc) along with the attributes header col-
umn (Pbje, Hoer, NQ, Ncowifl). You might as-
sign the latter interpretation a slightly higher prob-
ability, noticing the slightly longer form of Pbje
compared to Kwe, Zxc, and Amc. On the other
hand, even without reading English, you could re-
ject the interpretation as a collection of horizon-
tal records under the header attributes row (Pbje,
Kwe, Zxc, Amc), since each row contains differ-
ent forms and types, in a pattern that is consistent
across columns. Other interpretations are also pos-
sible, but unlikely given the regularity of the pat-
terns.
Thus by analyzing the structure of a table, the
reader would form a hypothesis about its data
model, providing a semantic interpretation that al-
lows the reader to extract information from the ta-
ble. As can be seen from the restored original
English version of the same example in Table 2,
the most likely interpretation was predicted even
without access to specific lexical knowledge. We
aim to show that a fairly useful baseline level of
semantic interpretation accuracy can already be
achieved, even with relatively little lexical and on-
tological knowledge.
We model these alternative hypotheses for the
interpretation of ambiguous tables as competing
parses. Just as with ordinary parsing and seman-
tic interpretation, the reader often builds multiple
competing interpretations of the same table.
Note that many previous models do not even
distinguish between the alternative possible inter-
pretations in the Martian example. Existing mod-
</bodyText>
<page confidence="0.997654">
906
</page>
<bodyText confidence="0.999971636363636">
els such as Hurst (2000) and Yang (2002) inter-
pret tables with the same structural layout simply
by assigning them same data model, which stops
short of recognizing that it is necessary to rank
multiple competing interpretations that entail dif-
ferent sets of logical relations.
In contrast, our proposed model is capable of
producing multiple competing parses indicating
different semantic interpretations of tables having
the same structural layout, by selecting specific
data models for the table and its subregions.
</bodyText>
<sectionHeader confidence="0.9830425" genericHeader="introduction">
2 Data Models for Specifying Semantic
Interpretations
</sectionHeader>
<bodyText confidence="0.978742384615384">
To begin, some formal basis is needed to facilitate
precise specification of the alternative semantic in-
terpretations of a table, such that the exact logical
relations between its elements are unambiguously
specified. This will enable us to then design a ta-
ble understanding model that attempts to map any
given table (and recursively, its subregions) to al-
ternative data models depending on which is most
appropriate.
The set of data models we define below is a
more comprehensive and precise inventory than
found in the previous table analysis models dis-
cussed in this paper. It describes all the common
conventional patterns of logical relations we have
found in the course of empirically analyzing tables
from corpora. One advantage of this inventory of
data models arises from our appropriation of re-
lational database theory wherever possible to help
describe the form of the data models (Silberschatz
et al., 2002), allowing broad coverage of different
table types without sacrificing precision as to the
logical relations between entities.
Each data model assigns a clear semantics in
terms of logical relations between the table ele-
ments, thereby allowing extraction of relational
facts. In contrast, previous work on table analy-
sis tends to either classify a table using only one
single limited data model (e.g., Hurst (2000)), or
using data models which essentially are merely
surface layout types whose semantics are vague
and ambiguous (e.g., Yang (2002), Yang and Luk
(2002), Wang et al. (2000), Yoshida et al. (2001)).
A table is a logical view of a collection of inter-
related items usually presented as a row-column
structure such that the reader’s ability to access
and compare information can be enhanced, as also
noted by Wang (1996). From a database manage-
Table 2: Example from Table 1 in its original ver-
sion, with the English words restored.
</bodyText>
<table confidence="0.99252575">
Date Thu Fri Sat
Temp 15 - 18 17 - 20 19 - 23
RH 85 - 95% 70 - 90% 75 - 95%
Weather Cool Cool Cloudy
</table>
<bodyText confidence="0.999625266666667">
ment system perspective, each table can be con-
sidered as a (tiny) database. Like a program, the
reader accesses the data. As a result, we consider
that every table must correspond to a data model,
and this model determines how the reader extracts
information from the table.
Each data model has a schema which, as we
shall see below, may or may not surface (partially
or completely) as a subset of cells in the table that
describe attributes. Recognizing the data models
of a table correctly therefore also implies that both
attribute-value pairings and table structures have
been recognized.
At the top level, we categorize the data models
into three broad types:
</bodyText>
<listItem confidence="0.975048">
• Flat model: A table is interpreted as a
database table in non-1NF normal relational
model.
• Nested model: A table is interpreted as a
database table in an object-relational model,
which allow complex types such as nested re-
lations and concept hierarchy.
• Dimensional data model: A table (usually
cross-tabular) is interpreted as a data cube
(multidimensional table) in a multidimen-
sional data model.
</listItem>
<bodyText confidence="0.9966085">
We now consider each of these types of data
models in turn.
</bodyText>
<subsectionHeader confidence="0.98076">
2.1 Flat model
</subsectionHeader>
<bodyText confidence="0.999900636363636">
A flat model is used for the semantic interpretation
of any table as a relational database table in non-
1NF. For example, tables such as Tables 2 and 3
are often interpreted by humans in terms of flat
models. It is obvious that Table 3 can be viewed
as a relational database table with a schema (Pos,
Teams, Pld, Pts) and three records, because the
table’s surface form resembles how records are
stored in a relational database tables. Similarly,
Table 2 resembles a relational database table, but
transposed to a vertical orientation, with the first
</bodyText>
<page confidence="0.997542">
907
</page>
<tableCaption confidence="0.99681">
Table 3: Example of a ranking table, which is typ-
ically laid out in a flat relational model.
</tableCaption>
<table confidence="0.9972785">
Pos Teams Pld Pts
Chelsea 38 95
Arsenal 38 83
Man United 38 77
</table>
<bodyText confidence="0.999648833333333">
column as the schema (Date, Temp, RH, Weather)
and other columns as data records.
The flat model is closest to the 1-dimensional
table approach used by the majority of previous
models, but our approach designates the flat model
as a semantic representation, in contrast to the
previous models which see 1-dimensional tables
merely as a syntactic surface form (e.g., Yang
(2002), Yang and Luk (2002), Wang et al. (2000),
Yoshida et al. (2001)). While such previous mod-
els only recognize tables that are physically laid
out in this form, our approach clearly delineates an
explicit separation of syntax and semantics, which
provides greater flexibility allowing any table to be
interpreted as a flat model, regardless of its surface
form (though the flat model interpretation is more
common for some surface forms than others).
As an example showing that any kind of
table can be categorized as flat model, consider
Table 6. Even such a table can be semantically
interpreted as a flat model because related at-
tributes can join together to form a composite
attribute, though humans would less naturally
choose this semantic interpretation. Certainly
there are hierarchical relationship between
attributes; for example, Ass1 is a subtype of
Assignments. However, it is also valid to consider
the attributes along a hierarchical path as one
composite attribute. For example, “Mark -&gt; As-
signments -&gt; Ass1” becomes the single attribute
“Mark-Assignments-Ass1”. Then the complete
flat model schema is (Year, Team, Mark-
Assignments-Ass1, Mark-Assignments-Ass2,
Mark-Assignments-Ass3, Mark-Examinations-
Midterm, Mark-Examinations-Final), and the first
record is (1991, Winter, 85, 80, 75, 60, 75, 75).
</bodyText>
<subsectionHeader confidence="0.923822">
2.2 Nested model
</subsectionHeader>
<bodyText confidence="0.9417499">
With the exception of Hurst (2000), previous work
has not generally considered nested models in ex-
plicit fashion. Hurst (2000)’s model is based on
Wang (1996)’s abstract table model, in which at-
tributes may be related in a hierarchical way. On
the other hand, Wang et al. (2000) oversimplis-
tically considers nested models as 1-dimensional,
thus missing the correct relationships between at-
tributes and values.
A nested model can be seen as a generalization
of the flat model, in which attributes may be re-
lated through composition or inheritance. Table 6
is naturally interpreted as a nested data model be-
cause the attributes have an inheritance relation-
ship. The corresponding schema is (Year, Team,
Mark (Assignments (Ass1, Ass2, Ass3), Exami-
nations (Midterm, Final, Grade)).
A nested model is not appropriate for tables
without hierarchical structure, such as Table 2 and
Table 3.
</bodyText>
<subsectionHeader confidence="0.937439">
2.3 Dimensional model
</subsectionHeader>
<bodyText confidence="0.9972655">
Our approach also nicely handles dimensional
models, which are generally handled quite weakly
in previous models. A dimensional model refers
to a table, such as the table in Table 4, that resem-
bles a view of collection of data stored in multi-
dimensional data model. A multidimensional data
cube, as described in the database literature (e.g.,
Han and Kamber (2000), Chaudhuri and Dayal
(1997)), consists of a set of numeric measures
(though in fact the data need not be numeric), each
of which is determined by a set of dimensions.
Each dimension is described by a set of attributes.
For example, Table 5 can be semantically inter-
preted using the multidimensional data model de-
picted in Figure 1. Likewise, the cross-tabular ta-
ble in Table 4 can also be semantically interpreted
using the same multidimensional data model in
Figure 1. The value of the first three columns in
Table 5 are the dimension attributes and the rev-
enue values are the measures.
In contrast, among previous models, Yang
(2002) produces a semantically incorrect recogni-
tion of a multidimensional table that inappropri-
ately presents the attributes in hierarchical struc-
ture. Yang and Luk (2002) and Wang et al.
(2000) only recognize the simplest 2-dimensional
case and apparently cannot handle 3 or more di-
mensions. Yoshida et al. (2001) only handle 1-
dimensional cases.
A dimensional model is an inappropriate inter-
pretation for non-cross-tabular tables, such as Ta-
ble 2 and Table 3. A dimensional model is also not
valid for tables such as Table 6. Semantically, it
is not possible for “Assignments” and “Midterm”
</bodyText>
<page confidence="0.997309">
908
</page>
<tableCaption confidence="0.9179245">
Table 4: Example table showing revenue accord-
ing to Location = {Vancouver, Victoria}, Type =
{Phone, Computer} and Time = {2001, 2002}, us-
ing a tabular view of a 3-dimensional data cube.
</tableCaption>
<table confidence="0.9998455">
Vancouver Victoria
Phone Computer Phone Computer
2001 845 1078 818 968
2002 943 1130 894 1024
</table>
<tableCaption confidence="0.980133">
Table 5: Example relational database table con-
taining the same logical information as Table 4.
</tableCaption>
<table confidence="0.988718222222222">
Location Type Time Revenue
Vancouver Phone 2001 845
Vancouver Phone 2002 943
Vancouver Computer 2001 1078
Vancouver Computer 2002 1130
Victoria Phone 2001 818
Victoria Phone 2002 894
Victoria Computer 2001 968
Victoria Computer 2002 1024
</table>
<figure confidence="0.638305666666667">
Time
Vancouver Victoria
Location
</figure>
<figureCaption confidence="0.954184">
Figure 1: Multidimensional data cube corre-
sponding to Tables 4 and 5.
</figureCaption>
<bodyText confidence="0.99927325">
to belong to different dimensions because it is in-
correct to determine the score by both “Assign-
ments” and “Midterm”. Syntactically, the texts
in the last attribute row of Table 6 are all unique;
however, the last attribute row of the table in Ta-
ble 4 is a repeating sequence of (”Phone”, ”Com-
puter”). Therefore, to a non-English reader, an
English cross-tabular table which possess repeat-
ing sequences in the attribute rows is likely to be
semantically interpreted as a dimensional model,
while a cross-tabular table which does not have
this property is likely to be interpreted as a nested
</bodyText>
<tableCaption confidence="0.994884">
Table 6: Example table of grades.
</tableCaption>
<table confidence="0.999424111111111">
Year Team Mark
Assignments Examinations
Ass1 Ass2 Ass3 Midterm Final Grade
1991 Winter 85 80 75 60 75 75
Spring 80 65 75 60 70 70
Fall 80 85 75 55 80 75
1992 Winter 85 80 70 70 75 75
Spring 80 80 70 70 75 75
Fall 75 70 65 60 80 70
</table>
<bodyText confidence="0.535619">
model.
</bodyText>
<sectionHeader confidence="0.986605" genericHeader="method">
3 A 2D SCFG Model for Table Analysis
</sectionHeader>
<bodyText confidence="0.999982235294118">
In this section, we will present our two-
dimensional SCFG parsing model for table analy-
sis which has several advantages over the ad hoc
approaches. First, the probabilistic grammar ap-
proach permits a cleaner encapsulation and gen-
eralization of the kind of knowledge that previ-
ous models attempted to capture within their ad
hoc heuristics. Most previous works (e.g. Yang
(2002), Yang and Luk (2002), Hurst (2000), Hurst
(2002)) gradually built up their ad hoc heuristics
manually by inspecting some set of training sam-
ples. This approach may work if tables are from
limited domains of similar nature. However, like
text documents, the syntactic layout of textual ta-
bles may be determined by its context as well as its
language. For instance, it is natural for an Arabic
reader to read an Arabic table taking the rightmost
column as the attribute column, instead of the left-
most column. Yoshida et al. (2001) use machine-
learning techniques to analyze nine types of table
structures, all 1-dimensional. Our grammar-based
approach allows the model to be readily adapted
to different situations by applying different sets of
grammar rules.
Another advantage is that grammatical ap-
proach can make more accurate decisions while
being simpler to implement, because it requires
only a single integrated parsing process to com-
plete the entire table analysis. This includes clas-
sifying the functions of each cell (as attribute or
value), pairing attributes and values, and identify-
ing the structure and the data model of a table. In
contrast, previous works require several stages to
complete the entire analysis, introducing complex
</bodyText>
<figure confidence="0.950556428571429">
2002
2001
845
Computer
1078
Type
Phone
</figure>
<page confidence="0.996119">
909
</page>
<bodyText confidence="0.999213358974359">
problems that are difficult to resolve, such as pre-
mature commitment to incorrect early-stage deci-
sions.
To our knowledge Wang et al. (2000) is the only
textual table analysis model that uses a grammar
to describe table structures. However, in that case,
only a simple template matching analyzer is used.
Their grammar notation is unable to show both
physical structure and the semantics of a table at
the same time in a hierarchical manner. In con-
trast, information such as “a data block contains
three rows of data cell” can be stored in the parse
tree constructed by our parsing model.
Outside of the table understanding literature,
there exists a different 2D parsing technique called
PLEX (Feder, 1971), (Costagliola et al., 1994)
which allows an object to have finite sets of attach-
ing points. PLEX is used to generate 2D diagrams
such as molecular structures, circuit diagrams and
flow charts in a grammatical way. However, we
consider it too complex and computationally ex-
pensive for our application because it does not ex-
ploit that fact that a textual table cell only has at
most four attaching points in fixed directions.
Our parser is a two-dimensional extension of
the conventional probabilistic chart parsing algo-
rithm (Lari and Young, 1990), (Goodman, 1998).
Intuitively, consider a sentence as a vector of to-
kens that will be parsed horizontally; then a ta-
ble is a matrix of tokens (like a crossword puzzle)
that will be parsed both horizontally and vertically.
Because of this, our parser must run in both direc-
tions. We achieve this by employing a grammar
notation that specifies the direction of parsing.
The two-dimensional grammar notation in-
cludes of a set of nonterminals, terminals, and two
generation operators “–&gt;” and “|-&gt;”. Let X be a
nonterminal and Y, Z, be two symbols which may
be either nonterminals or terminals. Then:
</bodyText>
<listItem confidence="0.972132333333333">
• X –&gt; Y Z denotes a horizontal production
rule saying that the nonterminal X horizon-
tally generates two symbols Y and Z.
• X|-&gt; Y Z denotes a vertical production rule
saying that the nonterminal X vertically gen-
erates two symbols Y and Z.
• X –&gt; Y or X|-&gt; Y equivalently denote a
unary production rule saying that the nonter-
minal X generates a symbol Y.
</listItem>
<bodyText confidence="0.996675068965517">
We assume that all rules are binary without loss
of generality, since any grammar can be mechan-
ically binarized without materially changing the
parse tree structure, just as in the case of ordinary
1D grammars.
The operators “–&gt;” and “|-&gt;” control the gen-
eration direction. In term of table analysis, a non-
terminal represents a matrix of tokens and a termi-
nal represents a single token. Sub-matrices gen-
erated by a horizontal rule will have same height
but not necessarily same width; similarly, sub-
matrices generated by a vertical rule will have
same width but not necessarily same height. In
other words, a matrix is partitioned into two halves
by the binary production rule.
Probabilities are placed on each rule, as in ordi-
nary 1D SCFGs. They are used to eliminate parses
falling below a threshold, which also helps to re-
duce the time complexity in practice.
Parsing with two-dimensional grammars can be
conceptualized most easily via parse tree exam-
ples. Figure 2 shows a complete parse tree for
parsing the table in Table 7 into a flat model. Fig-
ure 3 is a portion of a parse tree for parsing the
table in Table 8 into a nested model, while Figure
4 is a portion of parse trees for parsing Table 7 into
a dimensional model. The following is the gram-
mar fragment that gives the parse tree as Figure
2:
</bodyText>
<table confidence="0.95514275">
T1-1H |-&gt; FlatModel
FlatModel |-&gt; FlatSchema Records
FlatSchema --&gt; CompositeAttribute FlatSchema
FlatSchema --&gt; CompositeAttribute
Records|-&gt; Record Records
Records|-&gt; Record
Record --&gt; Data Record
Record --&gt; Record
</table>
<bodyText confidence="0.99990575">
Note that the internal nodes of the parse trees
serve to label subregions with data models, thus
assigning a semantic interpretation specifying the
exact logical relations between table elements.
None of the previous models construct declara-
tive parse trees like these, which are necessary for
many types of subsequent analysis, including in-
formation extraction applications.
</bodyText>
<sectionHeader confidence="0.996693" genericHeader="method">
4 Experimental Method
</sectionHeader>
<bodyText confidence="0.999944777777778">
To the best of our knowledge, unfortunately none
of the table corpora mentioned in previous work
are available to the public. Thus, it was neces-
sary to construct a corpus for our experiments.
We collected a large sample of tables by issuing
Google searches with a list of random keywords,
for example, census age, confusion matrix, data
table, movie ranking, MSFT, school ranking, tele-
phone plan, tsunami numbers, weather report, and
</bodyText>
<page confidence="0.989224">
910
</page>
<table confidence="0.987630594594595">
T1-1H |-&gt;
FlatModel |-&gt;
FlatSchema --&gt;
Composite FlatSchema --&gt;
Attribute |-&gt; Composite FlatSchema --&gt;
Attribute |-&gt; Attribute |-&gt; Composite FlatSchema --&gt;
VA Attribute |-&gt; Attribute |-&gt; Composite
Composite VA Attribute |-&gt; Attribute |-&gt;
Attribute |-&gt; Composite VB Attribute |-&gt;
Attribute Attribute |-&gt; Composite VB
P Attribute Attribute |-&gt; Composite
C Attribute &gt; Attribute &gt;
|- |-
P Attribute
C
Records |-&gt;
Record --&gt;
Data |-&gt; Record --&gt;
11 Data |-&gt; Record --&gt;
12 Data |-&gt; Data |-&gt;
13 14
Records |-&gt;
Record --&gt;
Data |-&gt; Record --&gt;
21 Data |-&gt; Record --&gt;
22 Data |-&gt; Data |-&gt;
23 24
Figure 2: A parse tree for a flat model.
NestedModelSchema --&gt;
NestedAttribute |-&gt; NestedAttribute |-&gt;
1
Base |-&gt; Base |-&gt;
VA VB
Final --&gt; Final --&gt;
Attribute |-&gt; Final --&gt; Attribute |-&gt; Final --&gt;
P Attribute |-&gt; X Attribute |-&gt;
C Y
</table>
<figureCaption confidence="0.56617">
Figure 3: A partial parse for a nested model.
</figureCaption>
<table confidence="0.996666583333333">
DimensionalModelSchema |-&gt;
Dimension --&gt;
DimAttribute |-&gt; Dimension --&gt;
DimAttribute |-&gt; DimAttribute |-&gt;
VA DimAttribute |-&gt;
Dimension --&gt; VB
Dim Dimension Dimension --&gt;
Attribute |-&gt; --&gt; Dim Dimension
P Dim Attribute |-&gt; --&gt;
Attribute |-&gt; P Dim
C Attribute |-&gt;
C
</table>
<figureCaption confidence="0.998479">
Figure 4: A partial parse for a dimensional model.
</figureCaption>
<bodyText confidence="0.994212666666667">
so on. Tables were extracted from the collected
sample, automatically cleaned, and tokenized into
two-dimensional array of tokens.
</bodyText>
<tableCaption confidence="0.997715">
Table 7: Example table for Figures 2 and 4.
</tableCaption>
<table confidence="0.99902525">
VA VB
P C P C
11 12 13 14
21 22 23 24
</table>
<tableCaption confidence="0.992812">
Table 8: Example table for Figure 3.
</tableCaption>
<table confidence="0.99963725">
VA VB
P C X Y
11 12 13 14
21 22 23 24
</table>
<tableCaption confidence="0.999507">
Table 9: Example table showing a floor legend.
</tableCaption>
<sectionHeader confidence="0.9840938" genericHeader="method">
6 School of Business &amp; Management
5 Department of Biochemistry
4 Classrooms 4202 - 4205
3 Department of Computer Science
3 Department of Mathematics
</sectionHeader>
<bodyText confidence="0.999996111111111">
For the blind evaluation, a human annotator in-
dependently manually annotated a randomly cho-
sen sample of 45 tables from the collection. All ta-
bles in the evaluation sample were previously un-
seen test cases, never inspected prior to the con-
struction of the two-dimensional grammar.
Each tokenized table was tagged by the human
judge with a list of types T relevant to the table.
The relevance is defined as follows: a data model
is relevant to a table if and only if the human
would agree that such a data model would natu-
rally be hypothesized as an interpretation for that
table (analogously to the way that word senses are
manually annotated for WSD evaluations). Each
type is a tuple of the form (R, O, S), where R is
the relevant data model, O is the reading orienta-
tion of R, and S is a boolean saying if a schema
(i.e. attributes) exist in the table. Thus, Table 2
would be tagged as {(flat, vertical, true)} while
the table in Table 4 would be tagged as {(flat, hor-
izontal, true), (flat, vertical, true), (dimensional, ,
true)}. But Table 9 may be tagged as {(flat, hor-
izontal, false)}. The exceptions are that both the
nested model and the dimensional model always
have a schema, while the dimensional model does
not have orientation. In cases where multiple legit-
imate readings were possible, the table was tagged
</bodyText>
<page confidence="0.997755">
911
</page>
<tableCaption confidence="0.99853">
Table 10: Experimental results.
</tableCaption>
<table confidence="0.9477425">
Precision Recall
0.60 0.80
</table>
<bodyText confidence="0.9993695">
with multiple types. A total of 92 relevant types
were generated from the tokenized tables.
We processed the tokenized tables with the two-
dimensional SCFG parser, and computed the pre-
cision and the recall rates against the judge’s lists
of tags for all the test cases.
</bodyText>
<sectionHeader confidence="0.999866" genericHeader="evaluation">
5 Results and Discussion
</sectionHeader>
<bodyText confidence="0.99996921875">
The experimental results are summarized in Table
10. All tables could be parsed; in general, it is very
rare for any table to be rejected by the parser, since
the grammar permits so many different configura-
tions that can be recursively composed.
Unfortunately it is impossible to compare re-
sults directly against previous models, since nei-
ther those models nor the data they evaluated on
are available.
Moreover, it is difficult to compare with pre-
vious models as our evaluation criteria are more
stringent than in earlier work. Most previous work
evaluated the performance in terms of the (vaguer
and less demanding) criteria of number of correct
attribute-value pairings. Such an evaluation ap-
proach gives unduly high weight to large repetitive
tables, and neglects structural errors in the analysis
of the table. In contrast, our approach gives equal
weight to all tables regardless of how many entries
they contain, requires semantically valid structural
analyses, and yet still accepts any parse that yields
the correct attribute-value pairings (since the tag-
ging of the test set includes all legitimate types
when there are multiple valid alternatives).
The fact that precision was lower than recall is
due to the fact that many tables were wrongly in-
terpreted as tables without schema or in wrong ori-
entations. The current grammar has difficulty dis-
tinguishing attributes from values. Significant im-
provement can be obtained by using constraints to
limit the number of incorrect parses, a strategy we
are currently implementing.
</bodyText>
<sectionHeader confidence="0.99977" genericHeader="conclusions">
6 Conclusion
</sectionHeader>
<bodyText confidence="0.99999184">
We have introduced a framework to support a
more linguistically-oriented approach to finer in-
terpretation of tables, using two-dimensional sto-
chastic CFGs with Viterbi parsing to find appro-
priate semantic interpretations of textual tables in
terms of different data models. This approach
yields a concise model that at the same time fa-
cilitates broader coverage than existing models,
and is more easily scalable and maintainable. We
also introduce a cleaner and richer data model to
represent semantic interpretations, and illustrate
how it systematically captures a wider range of ta-
ble types. Without such a data model, the right
attribute-value relations caanot be extracted from
a table, even if surface elements like “header” and
“data” are correctly labeled as previous models at-
tempted to do. Our experiments show that even
without other ontological and linguistic knowl-
edge, excellent semantic interpretation accuracy
can be obtained by parsing with a two-dimensional
grammar based on these data models, by using
a wide variety of surface features in the terminal
symbols. We plan next to extend the model by in-
corporating ontological and linguistic knowledge
for additional disambiguation leverage.
</bodyText>
<sectionHeader confidence="0.999449" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999805225">
Surajit Chaudhuri and Umesh Dayal. An overview of data warehousing and
OLAP technology. ACM SIGMOD Record, 26(1), March 1997.
Gennaro Costagliola, Andrea De Lucia, and Sergio Orefice. Towards efficient
parsing of diagrammatic languages. In AVI ’94: Proceedings of the work-
shop on Advanced visual interfaces, pages 162–171, New York, NY, USA,
1994. ACM Press.
Jerome Feder. Plex languages. Information Sciences, 3:225–241, 1971.
Joshua T. Goodman. Parsing Inside-Out. PhD thesis, Harvard University,
1998.
Jiawei Han and Micheline Kamber. Data Mining: Concepts and Techniques.
Morgan Kaufmann, 1 edition, 2000.
Matthew Francis Hurst. The Interpretation of Tables in Texts. PhD thesis, The
University of Edinburgh, 2000.
Matthew Hurst. Classifying table elements in html. In The 11th International
World Wide Web Conference, Hawaii, USA, 2002.
K. Lari and S. J. Young. The estimation of stochastic context-free grammars
using the inside-outside algorithm. Computer Speech and Language, 4:35–
36, 1990.
Richard Power, Donia Scott, and Nadjet Bouayad-Agha. Document structure.
Computational Linguistics, 29(4):211–260, Dec 2003.
Donia Scott. Layout in NLP: The case for document structure (invited talk).
In 41st Annual Meeting of the Association for Computational Linguistics
(ACL-2003), Aug 2003.
Abraham Silberschatz, Henry F. Korth, and S. Sudarshan. Database System
Concepts. McGraw-Hill, 4th edition, 2002.
H. L. Wang, S. H. Wu, I. C. Wang, C. L. Sung, W. L. Hsu, and W. K. Shih.
Semantic search on internet tabular information extraction for answering
queries. In CIKM ’00: Proceedings of the ninth international conference
on Information and knowledge management, pages 243–249, New York,
NY, USA, 2000. ACM Press.
Xinxin Wang. Tabular Abstraction, Editing, and Formatting. PhD thesis, The
University of Waterloo, Waterloo, Ontario, Canada, 1996.
Yingchen Yang and Wo-Shun Luk. A framework for web table mining. In
WIDM ’02: Proceedings of the 4th international workshop on Web infor-
mation and data management, pages 36–42, New York, NY, USA, 2002.
ACM Press.
Yingchen Yang. Web table mining and database discovery. Master’s thesis,
Simon Fraser University, August 2002.
M. Yoshida, K. Torisawa, and J. Tsujii. A method to integrate tables of the
world wide web, 2001.
</reference>
<page confidence="0.997338">
912
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.570439">
<title confidence="0.970932">A Grammatical Approach to Understanding Textual Tables using Two-Dimensional SCFGs</title>
<author confidence="0.960411">Wing Kuen</author>
<affiliation confidence="0.8949225">Human Language Technology Center HKUST Department of Computer Science and Engineering University of Science and Technology</affiliation>
<address confidence="0.998086">Clear Water Bay, Hong Kong</address>
<abstract confidence="0.998653344827586">We present an elegant and extensible model that is capable of providing semantic interpretations for an unusually wide range of textual tables in documents. Unlike the few existing table analysis modwhich largely rely on relatively hoc heuristics, our linguistically-oriented approach is systematic and grammar based, which allows our model (1) to be concise and yet (2) recognize a wider range of data models than others, and (3) disambiguate to a significantly finer extent the underlying semantic interpretation of the table in terms of data models drawn from relation database theory. To accomplish this, the model introduces Viterbi parsing under two-dimensional stochastic CFGs. The cleaner grammatical approach facilitates not only greater coverage, but also grammar extension and maintenance, as well as a more direct and declarative link to semantic interpretation, for which we also introduce a new, cleaner data model. In disambiguation experiments on recognizing relevant data models of unseen web tables from different domains, a blind evaluation of the model showed 60% precision and 80% recall.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Surajit Chaudhuri</author>
<author>Umesh Dayal</author>
</authors>
<title>An overview of data warehousing and OLAP technology.</title>
<date>1997</date>
<journal>ACM SIGMOD Record,</journal>
<volume>26</volume>
<issue>1</issue>
<contexts>
<context position="15937" citStr="Chaudhuri and Dayal (1997)" startWordPosition="2557" endWordPosition="2560">nding schema is (Year, Team, Mark (Assignments (Ass1, Ass2, Ass3), Examinations (Midterm, Final, Grade)). A nested model is not appropriate for tables without hierarchical structure, such as Table 2 and Table 3. 2.3 Dimensional model Our approach also nicely handles dimensional models, which are generally handled quite weakly in previous models. A dimensional model refers to a table, such as the table in Table 4, that resembles a view of collection of data stored in multidimensional data model. A multidimensional data cube, as described in the database literature (e.g., Han and Kamber (2000), Chaudhuri and Dayal (1997)), consists of a set of numeric measures (though in fact the data need not be numeric), each of which is determined by a set of dimensions. Each dimension is described by a set of attributes. For example, Table 5 can be semantically interpreted using the multidimensional data model depicted in Figure 1. Likewise, the cross-tabular table in Table 4 can also be semantically interpreted using the same multidimensional data model in Figure 1. The value of the first three columns in Table 5 are the dimension attributes and the revenue values are the measures. In contrast, among previous models, Yan</context>
</contexts>
<marker>Chaudhuri, Dayal, 1997</marker>
<rawString>Surajit Chaudhuri and Umesh Dayal. An overview of data warehousing and OLAP technology. ACM SIGMOD Record, 26(1), March 1997.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Gennaro Costagliola</author>
<author>Andrea De Lucia</author>
<author>Sergio Orefice</author>
</authors>
<title>Towards efficient parsing of diagrammatic languages.</title>
<date>1994</date>
<booktitle>In AVI ’94: Proceedings of the workshop on Advanced visual interfaces,</booktitle>
<pages>162--171</pages>
<publisher>ACM Press.</publisher>
<location>New York, NY, USA,</location>
<marker>Costagliola, De Lucia, Orefice, 1994</marker>
<rawString>Gennaro Costagliola, Andrea De Lucia, and Sergio Orefice. Towards efficient parsing of diagrammatic languages. In AVI ’94: Proceedings of the workshop on Advanced visual interfaces, pages 162–171, New York, NY, USA, 1994. ACM Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jerome Feder</author>
</authors>
<title>Plex languages.</title>
<date>1971</date>
<journal>Information Sciences,</journal>
<tech>PhD thesis,</tech>
<volume>3</volume>
<institution>Harvard University,</institution>
<contexts>
<context position="21129" citStr="Feder, 1971" startWordPosition="3431" endWordPosition="3432">ecisions. To our knowledge Wang et al. (2000) is the only textual table analysis model that uses a grammar to describe table structures. However, in that case, only a simple template matching analyzer is used. Their grammar notation is unable to show both physical structure and the semantics of a table at the same time in a hierarchical manner. In contrast, information such as “a data block contains three rows of data cell” can be stored in the parse tree constructed by our parsing model. Outside of the table understanding literature, there exists a different 2D parsing technique called PLEX (Feder, 1971), (Costagliola et al., 1994) which allows an object to have finite sets of attaching points. PLEX is used to generate 2D diagrams such as molecular structures, circuit diagrams and flow charts in a grammatical way. However, we consider it too complex and computationally expensive for our application because it does not exploit that fact that a textual table cell only has at most four attaching points in fixed directions. Our parser is a two-dimensional extension of the conventional probabilistic chart parsing algorithm (Lari and Young, 1990), (Goodman, 1998). Intuitively, consider a sentence a</context>
</contexts>
<marker>Feder, 1971</marker>
<rawString>Jerome Feder. Plex languages. Information Sciences, 3:225–241, 1971. Joshua T. Goodman. Parsing Inside-Out. PhD thesis, Harvard University, 1998.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jiawei Han</author>
<author>Micheline Kamber</author>
</authors>
<title>Data Mining: Concepts and Techniques.</title>
<date>2000</date>
<volume>1</volume>
<publisher>Morgan Kaufmann,</publisher>
<note>edition,</note>
<contexts>
<context position="15909" citStr="Han and Kamber (2000)" startWordPosition="2553" endWordPosition="2556">ationship. The corresponding schema is (Year, Team, Mark (Assignments (Ass1, Ass2, Ass3), Examinations (Midterm, Final, Grade)). A nested model is not appropriate for tables without hierarchical structure, such as Table 2 and Table 3. 2.3 Dimensional model Our approach also nicely handles dimensional models, which are generally handled quite weakly in previous models. A dimensional model refers to a table, such as the table in Table 4, that resembles a view of collection of data stored in multidimensional data model. A multidimensional data cube, as described in the database literature (e.g., Han and Kamber (2000), Chaudhuri and Dayal (1997)), consists of a set of numeric measures (though in fact the data need not be numeric), each of which is determined by a set of dimensions. Each dimension is described by a set of attributes. For example, Table 5 can be semantically interpreted using the multidimensional data model depicted in Figure 1. Likewise, the cross-tabular table in Table 4 can also be semantically interpreted using the same multidimensional data model in Figure 1. The value of the first three columns in Table 5 are the dimension attributes and the revenue values are the measures. In contrast</context>
</contexts>
<marker>Han, Kamber, 2000</marker>
<rawString>Jiawei Han and Micheline Kamber. Data Mining: Concepts and Techniques. Morgan Kaufmann, 1 edition, 2000.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Matthew Francis Hurst</author>
</authors>
<title>The Interpretation of Tables in Texts.</title>
<date>2000</date>
<tech>PhD thesis,</tech>
<institution>The University of Edinburgh,</institution>
<contexts>
<context position="8565" citStr="Hurst (2000)" startWordPosition="1358" endWordPosition="1359">o specific lexical knowledge. We aim to show that a fairly useful baseline level of semantic interpretation accuracy can already be achieved, even with relatively little lexical and ontological knowledge. We model these alternative hypotheses for the interpretation of ambiguous tables as competing parses. Just as with ordinary parsing and semantic interpretation, the reader often builds multiple competing interpretations of the same table. Note that many previous models do not even distinguish between the alternative possible interpretations in the Martian example. Existing mod906 els such as Hurst (2000) and Yang (2002) interpret tables with the same structural layout simply by assigning them same data model, which stops short of recognizing that it is necessary to rank multiple competing interpretations that entail different sets of logical relations. In contrast, our proposed model is capable of producing multiple competing parses indicating different semantic interpretations of tables having the same structural layout, by selecting specific data models for the table and its subregions. 2 Data Models for Specifying Semantic Interpretations To begin, some formal basis is needed to facilitate</context>
<context position="10448" citStr="Hurst (2000)" startWordPosition="1651" endWordPosition="1652"> One advantage of this inventory of data models arises from our appropriation of relational database theory wherever possible to help describe the form of the data models (Silberschatz et al., 2002), allowing broad coverage of different table types without sacrificing precision as to the logical relations between entities. Each data model assigns a clear semantics in terms of logical relations between the table elements, thereby allowing extraction of relational facts. In contrast, previous work on table analysis tends to either classify a table using only one single limited data model (e.g., Hurst (2000)), or using data models which essentially are merely surface layout types whose semantics are vague and ambiguous (e.g., Yang (2002), Yang and Luk (2002), Wang et al. (2000), Yoshida et al. (2001)). A table is a logical view of a collection of interrelated items usually presented as a row-column structure such that the reader’s ability to access and compare information can be enhanced, as also noted by Wang (1996). From a database manageTable 2: Example from Table 1 in its original version, with the English words restored. Date Thu Fri Sat Temp 15 - 18 17 - 20 19 - 23 RH 85 - 95% 70 - 90% 75 -</context>
<context position="14673" citStr="Hurst (2000)" startWordPosition="2356" endWordPosition="2357">tation. Certainly there are hierarchical relationship between attributes; for example, Ass1 is a subtype of Assignments. However, it is also valid to consider the attributes along a hierarchical path as one composite attribute. For example, “Mark -&gt; Assignments -&gt; Ass1” becomes the single attribute “Mark-Assignments-Ass1”. Then the complete flat model schema is (Year, Team, MarkAssignments-Ass1, Mark-Assignments-Ass2, Mark-Assignments-Ass3, Mark-ExaminationsMidterm, Mark-Examinations-Final), and the first record is (1991, Winter, 85, 80, 75, 60, 75, 75). 2.2 Nested model With the exception of Hurst (2000), previous work has not generally considered nested models in explicit fashion. Hurst (2000)’s model is based on Wang (1996)’s abstract table model, in which attributes may be related in a hierarchical way. On the other hand, Wang et al. (2000) oversimplistically considers nested models as 1-dimensional, thus missing the correct relationships between attributes and values. A nested model can be seen as a generalization of the flat model, in which attributes may be related through composition or inheritance. Table 6 is naturally interpreted as a nested data model because the attributes have an </context>
<context position="19167" citStr="Hurst (2000)" startWordPosition="3111" endWordPosition="3112"> 1991 Winter 85 80 75 60 75 75 Spring 80 65 75 60 70 70 Fall 80 85 75 55 80 75 1992 Winter 85 80 70 70 75 75 Spring 80 80 70 70 75 75 Fall 75 70 65 60 80 70 model. 3 A 2D SCFG Model for Table Analysis In this section, we will present our twodimensional SCFG parsing model for table analysis which has several advantages over the ad hoc approaches. First, the probabilistic grammar approach permits a cleaner encapsulation and generalization of the kind of knowledge that previous models attempted to capture within their ad hoc heuristics. Most previous works (e.g. Yang (2002), Yang and Luk (2002), Hurst (2000), Hurst (2002)) gradually built up their ad hoc heuristics manually by inspecting some set of training samples. This approach may work if tables are from limited domains of similar nature. However, like text documents, the syntactic layout of textual tables may be determined by its context as well as its language. For instance, it is natural for an Arabic reader to read an Arabic table taking the rightmost column as the attribute column, instead of the leftmost column. Yoshida et al. (2001) use machinelearning techniques to analyze nine types of table structures, all 1-dimensional. Our grammar</context>
</contexts>
<marker>Hurst, 2000</marker>
<rawString>Matthew Francis Hurst. The Interpretation of Tables in Texts. PhD thesis, The University of Edinburgh, 2000.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Matthew Hurst</author>
</authors>
<title>Classifying table elements in html.</title>
<date>2002</date>
<booktitle>In The 11th International World Wide Web Conference,</booktitle>
<location>Hawaii, USA,</location>
<contexts>
<context position="19181" citStr="Hurst (2002)" startWordPosition="3113" endWordPosition="3114">5 80 75 60 75 75 Spring 80 65 75 60 70 70 Fall 80 85 75 55 80 75 1992 Winter 85 80 70 70 75 75 Spring 80 80 70 70 75 75 Fall 75 70 65 60 80 70 model. 3 A 2D SCFG Model for Table Analysis In this section, we will present our twodimensional SCFG parsing model for table analysis which has several advantages over the ad hoc approaches. First, the probabilistic grammar approach permits a cleaner encapsulation and generalization of the kind of knowledge that previous models attempted to capture within their ad hoc heuristics. Most previous works (e.g. Yang (2002), Yang and Luk (2002), Hurst (2000), Hurst (2002)) gradually built up their ad hoc heuristics manually by inspecting some set of training samples. This approach may work if tables are from limited domains of similar nature. However, like text documents, the syntactic layout of textual tables may be determined by its context as well as its language. For instance, it is natural for an Arabic reader to read an Arabic table taking the rightmost column as the attribute column, instead of the leftmost column. Yoshida et al. (2001) use machinelearning techniques to analyze nine types of table structures, all 1-dimensional. Our grammar-based approac</context>
</contexts>
<marker>Hurst, 2002</marker>
<rawString>Matthew Hurst. Classifying table elements in html. In The 11th International World Wide Web Conference, Hawaii, USA, 2002.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Lari</author>
<author>S J Young</author>
</authors>
<title>The estimation of stochastic context-free grammars using the inside-outside algorithm.</title>
<date>1990</date>
<journal>Computer Speech and Language,</journal>
<volume>4</volume>
<contexts>
<context position="21676" citStr="Lari and Young, 1990" startWordPosition="3519" endWordPosition="3522">e, there exists a different 2D parsing technique called PLEX (Feder, 1971), (Costagliola et al., 1994) which allows an object to have finite sets of attaching points. PLEX is used to generate 2D diagrams such as molecular structures, circuit diagrams and flow charts in a grammatical way. However, we consider it too complex and computationally expensive for our application because it does not exploit that fact that a textual table cell only has at most four attaching points in fixed directions. Our parser is a two-dimensional extension of the conventional probabilistic chart parsing algorithm (Lari and Young, 1990), (Goodman, 1998). Intuitively, consider a sentence as a vector of tokens that will be parsed horizontally; then a table is a matrix of tokens (like a crossword puzzle) that will be parsed both horizontally and vertically. Because of this, our parser must run in both directions. We achieve this by employing a grammar notation that specifies the direction of parsing. The two-dimensional grammar notation includes of a set of nonterminals, terminals, and two generation operators “–&gt;” and “|-&gt;”. Let X be a nonterminal and Y, Z, be two symbols which may be either nonterminals or terminals. Then: • </context>
</contexts>
<marker>Lari, Young, 1990</marker>
<rawString>K. Lari and S. J. Young. The estimation of stochastic context-free grammars using the inside-outside algorithm. Computer Speech and Language, 4:35– 36, 1990.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Richard Power</author>
<author>Donia Scott</author>
<author>Nadjet Bouayad-Agha</author>
</authors>
<title>Document structure.</title>
<date>2003</date>
<journal>Computational Linguistics,</journal>
<volume>29</volume>
<issue>4</issue>
<contexts>
<context position="2474" citStr="Power et al., 2003" startWordPosition="370" endWordPosition="373">erstanding. Yet real-life text is actually heavily dependent on visual layout and formatting, which compensate for cues normally found in spoken language but are absent in text. As Scott (2003) reiterated in the opening ACL’03 invited talk: “The overlay of graphics on text is in many ways equivalent to the overlay of prosody on speech... Just as prosody undoubtedly contributes to the meaning of utterances, so too does a text’s graphical presentation contribute to its meaning. However... few natural language understanding systems use graphical presentational features to aid interpretation...” (Power et al., 2003). Nowhere is this more evident than in the widespread use of tables in real-world, unsimplified text documents. Tables have a comparable or greater complexity as other elements of text. Unfortunately, in mainstream NLP it is not uncommon for tables to be regarded as a somehow “degenerate” form of text, unworthy of the same degree of attention as the rest of the text. But as we will discuss, the degree of ambiguity in table understanding is at least as great as for many sense and attachment problems. Many of the same mechanisms used for understanding linear text are also required for table unde</context>
<context position="4621" citStr="Power et al., 2003" startWordPosition="715" endWordPosition="718">, in table semantic interpretation, the exact logical relations between the elements in the table must be recognized (e.g., by associating the table and/or subregions thereof with precise table schemas in relational database style). Existing table understanding work largely lies at the level of superficial table classification or syntactic recognition. Rarely, if ever, are precise logical relations assigned between the elements in the table. Ad hoc heuristic approaches tend to rule, rather than linguistic approaches. On the other hand, in the linguistic approach advocated by Scott (2003) and (Power et al., 2003), tables were not considered. The various physical presentation elements discussed included headings, captions, and bulleted lists—all of which exhibit numerous similarities to tabular elements. Possibly, tables were not considered because they are difficult to describe adequately within the expressiveness of common linguistic formalisms like CFGs. The work presented here aims to address this problem. Our model provides an enabling foundation toward a linguistic approach by first shifting to a two-dimensional CFG framework. This permits us to construct a grammar where all the rules are meaning</context>
</contexts>
<marker>Power, Scott, Bouayad-Agha, 2003</marker>
<rawString>Richard Power, Donia Scott, and Nadjet Bouayad-Agha. Document structure. Computational Linguistics, 29(4):211–260, Dec 2003.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Donia Scott</author>
</authors>
<title>Layout in NLP: The case for document structure (invited talk).</title>
<date>2003</date>
<booktitle>In 41st Annual Meeting of the Association for Computational Linguistics (ACL-2003),</booktitle>
<contexts>
<context position="2048" citStr="Scott (2003)" startWordPosition="309" endWordPosition="310">anguage processing has historically tended to emphasize understanding of linear strings—sentences, paragraphs, discourse structure. The vast body of work that focuses on text understanding is often seen as an approximation of 1The authors would like to thank the Hong Kong Research Grants Council (RGC) for supporting this research in part through grants RGC6083/99E, RGC6256/00E, and DAG03/04.EG09. spoken language understanding. Yet real-life text is actually heavily dependent on visual layout and formatting, which compensate for cues normally found in spoken language but are absent in text. As Scott (2003) reiterated in the opening ACL’03 invited talk: “The overlay of graphics on text is in many ways equivalent to the overlay of prosody on speech... Just as prosody undoubtedly contributes to the meaning of utterances, so too does a text’s graphical presentation contribute to its meaning. However... few natural language understanding systems use graphical presentational features to aid interpretation...” (Power et al., 2003). Nowhere is this more evident than in the widespread use of tables in real-world, unsimplified text documents. Tables have a comparable or greater complexity as other elemen</context>
<context position="4596" citStr="Scott (2003)" startWordPosition="712" endWordPosition="713">gned). In contrast, in table semantic interpretation, the exact logical relations between the elements in the table must be recognized (e.g., by associating the table and/or subregions thereof with precise table schemas in relational database style). Existing table understanding work largely lies at the level of superficial table classification or syntactic recognition. Rarely, if ever, are precise logical relations assigned between the elements in the table. Ad hoc heuristic approaches tend to rule, rather than linguistic approaches. On the other hand, in the linguistic approach advocated by Scott (2003) and (Power et al., 2003), tables were not considered. The various physical presentation elements discussed included headings, captions, and bulleted lists—all of which exhibit numerous similarities to tabular elements. Possibly, tables were not considered because they are difficult to describe adequately within the expressiveness of common linguistic formalisms like CFGs. The work presented here aims to address this problem. Our model provides an enabling foundation toward a linguistic approach by first shifting to a two-dimensional CFG framework. This permits us to construct a grammar where </context>
</contexts>
<marker>Scott, 2003</marker>
<rawString>Donia Scott. Layout in NLP: The case for document structure (invited talk). In 41st Annual Meeting of the Association for Computational Linguistics (ACL-2003), Aug 2003.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Abraham Silberschatz</author>
<author>Henry F Korth</author>
<author>S Sudarshan</author>
</authors>
<date>2002</date>
<booktitle>Database System Concepts. McGraw-Hill, 4th edition,</booktitle>
<contexts>
<context position="10034" citStr="Silberschatz et al., 2002" startWordPosition="1585" endWordPosition="1588"> to map any given table (and recursively, its subregions) to alternative data models depending on which is most appropriate. The set of data models we define below is a more comprehensive and precise inventory than found in the previous table analysis models discussed in this paper. It describes all the common conventional patterns of logical relations we have found in the course of empirically analyzing tables from corpora. One advantage of this inventory of data models arises from our appropriation of relational database theory wherever possible to help describe the form of the data models (Silberschatz et al., 2002), allowing broad coverage of different table types without sacrificing precision as to the logical relations between entities. Each data model assigns a clear semantics in terms of logical relations between the table elements, thereby allowing extraction of relational facts. In contrast, previous work on table analysis tends to either classify a table using only one single limited data model (e.g., Hurst (2000)), or using data models which essentially are merely surface layout types whose semantics are vague and ambiguous (e.g., Yang (2002), Yang and Luk (2002), Wang et al. (2000), Yoshida et </context>
</contexts>
<marker>Silberschatz, Korth, Sudarshan, 2002</marker>
<rawString>Abraham Silberschatz, Henry F. Korth, and S. Sudarshan. Database System Concepts. McGraw-Hill, 4th edition, 2002.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H L Wang</author>
<author>S H Wu</author>
<author>I C Wang</author>
<author>C L Sung</author>
<author>W L Hsu</author>
<author>W K Shih</author>
</authors>
<title>Semantic search on internet tabular information extraction for answering queries.</title>
<date>2000</date>
<booktitle>In CIKM ’00: Proceedings of the ninth international conference on Information and knowledge management,</booktitle>
<pages>243--249</pages>
<publisher>ACM Press.</publisher>
<location>New York, NY, USA,</location>
<contexts>
<context position="10621" citStr="Wang et al. (2000)" startWordPosition="1677" endWordPosition="1680">els (Silberschatz et al., 2002), allowing broad coverage of different table types without sacrificing precision as to the logical relations between entities. Each data model assigns a clear semantics in terms of logical relations between the table elements, thereby allowing extraction of relational facts. In contrast, previous work on table analysis tends to either classify a table using only one single limited data model (e.g., Hurst (2000)), or using data models which essentially are merely surface layout types whose semantics are vague and ambiguous (e.g., Yang (2002), Yang and Luk (2002), Wang et al. (2000), Yoshida et al. (2001)). A table is a logical view of a collection of interrelated items usually presented as a row-column structure such that the reader’s ability to access and compare information can be enhanced, as also noted by Wang (1996). From a database manageTable 2: Example from Table 1 in its original version, with the English words restored. Date Thu Fri Sat Temp 15 - 18 17 - 20 19 - 23 RH 85 - 95% 70 - 90% 75 - 95% Weather Cool Cool Cloudy ment system perspective, each table can be considered as a (tiny) database. Like a program, the reader accesses the data. As a result, we consi</context>
<context position="13350" citStr="Wang et al. (2000)" startWordPosition="2156" endWordPosition="2159"> a vertical orientation, with the first 907 Table 3: Example of a ranking table, which is typically laid out in a flat relational model. Pos Teams Pld Pts Chelsea 38 95 Arsenal 38 83 Man United 38 77 column as the schema (Date, Temp, RH, Weather) and other columns as data records. The flat model is closest to the 1-dimensional table approach used by the majority of previous models, but our approach designates the flat model as a semantic representation, in contrast to the previous models which see 1-dimensional tables merely as a syntactic surface form (e.g., Yang (2002), Yang and Luk (2002), Wang et al. (2000), Yoshida et al. (2001)). While such previous models only recognize tables that are physically laid out in this form, our approach clearly delineates an explicit separation of syntax and semantics, which provides greater flexibility allowing any table to be interpreted as a flat model, regardless of its surface form (though the flat model interpretation is more common for some surface forms than others). As an example showing that any kind of table can be categorized as flat model, consider Table 6. Even such a table can be semantically interpreted as a flat model because related attributes ca</context>
<context position="14917" citStr="Wang et al. (2000)" startWordPosition="2396" endWordPosition="2399">e, “Mark -&gt; Assignments -&gt; Ass1” becomes the single attribute “Mark-Assignments-Ass1”. Then the complete flat model schema is (Year, Team, MarkAssignments-Ass1, Mark-Assignments-Ass2, Mark-Assignments-Ass3, Mark-ExaminationsMidterm, Mark-Examinations-Final), and the first record is (1991, Winter, 85, 80, 75, 60, 75, 75). 2.2 Nested model With the exception of Hurst (2000), previous work has not generally considered nested models in explicit fashion. Hurst (2000)’s model is based on Wang (1996)’s abstract table model, in which attributes may be related in a hierarchical way. On the other hand, Wang et al. (2000) oversimplistically considers nested models as 1-dimensional, thus missing the correct relationships between attributes and values. A nested model can be seen as a generalization of the flat model, in which attributes may be related through composition or inheritance. Table 6 is naturally interpreted as a nested data model because the attributes have an inheritance relationship. The corresponding schema is (Year, Team, Mark (Assignments (Ass1, Ass2, Ass3), Examinations (Midterm, Final, Grade)). A nested model is not appropriate for tables without hierarchical structure, such as Table 2 and Tab</context>
<context position="16734" citStr="Wang et al. (2000)" startWordPosition="2691" endWordPosition="2694"> attributes. For example, Table 5 can be semantically interpreted using the multidimensional data model depicted in Figure 1. Likewise, the cross-tabular table in Table 4 can also be semantically interpreted using the same multidimensional data model in Figure 1. The value of the first three columns in Table 5 are the dimension attributes and the revenue values are the measures. In contrast, among previous models, Yang (2002) produces a semantically incorrect recognition of a multidimensional table that inappropriately presents the attributes in hierarchical structure. Yang and Luk (2002) and Wang et al. (2000) only recognize the simplest 2-dimensional case and apparently cannot handle 3 or more dimensions. Yoshida et al. (2001) only handle 1- dimensional cases. A dimensional model is an inappropriate interpretation for non-cross-tabular tables, such as Table 2 and Table 3. A dimensional model is also not valid for tables such as Table 6. Semantically, it is not possible for “Assignments” and “Midterm” 908 Table 4: Example table showing revenue according to Location = {Vancouver, Victoria}, Type = {Phone, Computer} and Time = {2001, 2002}, using a tabular view of a 3-dimensional data cube. Vancouver</context>
<context position="20562" citStr="Wang et al. (2000)" startWordPosition="3334" endWordPosition="3337">ke more accurate decisions while being simpler to implement, because it requires only a single integrated parsing process to complete the entire table analysis. This includes classifying the functions of each cell (as attribute or value), pairing attributes and values, and identifying the structure and the data model of a table. In contrast, previous works require several stages to complete the entire analysis, introducing complex 2002 2001 845 Computer 1078 Type Phone 909 problems that are difficult to resolve, such as premature commitment to incorrect early-stage decisions. To our knowledge Wang et al. (2000) is the only textual table analysis model that uses a grammar to describe table structures. However, in that case, only a simple template matching analyzer is used. Their grammar notation is unable to show both physical structure and the semantics of a table at the same time in a hierarchical manner. In contrast, information such as “a data block contains three rows of data cell” can be stored in the parse tree constructed by our parsing model. Outside of the table understanding literature, there exists a different 2D parsing technique called PLEX (Feder, 1971), (Costagliola et al., 1994) whic</context>
</contexts>
<marker>Wang, Wu, Wang, Sung, Hsu, Shih, 2000</marker>
<rawString>H. L. Wang, S. H. Wu, I. C. Wang, C. L. Sung, W. L. Hsu, and W. K. Shih. Semantic search on internet tabular information extraction for answering queries. In CIKM ’00: Proceedings of the ninth international conference on Information and knowledge management, pages 243–249, New York, NY, USA, 2000. ACM Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Xinxin Wang</author>
</authors>
<title>Tabular Abstraction, Editing, and Formatting.</title>
<date>1996</date>
<tech>PhD thesis,</tech>
<institution>The University of Waterloo,</institution>
<location>Waterloo, Ontario, Canada,</location>
<contexts>
<context position="10865" citStr="Wang (1996)" startWordPosition="1721" endWordPosition="1722">ments, thereby allowing extraction of relational facts. In contrast, previous work on table analysis tends to either classify a table using only one single limited data model (e.g., Hurst (2000)), or using data models which essentially are merely surface layout types whose semantics are vague and ambiguous (e.g., Yang (2002), Yang and Luk (2002), Wang et al. (2000), Yoshida et al. (2001)). A table is a logical view of a collection of interrelated items usually presented as a row-column structure such that the reader’s ability to access and compare information can be enhanced, as also noted by Wang (1996). From a database manageTable 2: Example from Table 1 in its original version, with the English words restored. Date Thu Fri Sat Temp 15 - 18 17 - 20 19 - 23 RH 85 - 95% 70 - 90% 75 - 95% Weather Cool Cool Cloudy ment system perspective, each table can be considered as a (tiny) database. Like a program, the reader accesses the data. As a result, we consider that every table must correspond to a data model, and this model determines how the reader extracts information from the table. Each data model has a schema which, as we shall see below, may or may not surface (partially or completely) as a</context>
<context position="14797" citStr="Wang (1996)" startWordPosition="2376" endWordPosition="2377">ver, it is also valid to consider the attributes along a hierarchical path as one composite attribute. For example, “Mark -&gt; Assignments -&gt; Ass1” becomes the single attribute “Mark-Assignments-Ass1”. Then the complete flat model schema is (Year, Team, MarkAssignments-Ass1, Mark-Assignments-Ass2, Mark-Assignments-Ass3, Mark-ExaminationsMidterm, Mark-Examinations-Final), and the first record is (1991, Winter, 85, 80, 75, 60, 75, 75). 2.2 Nested model With the exception of Hurst (2000), previous work has not generally considered nested models in explicit fashion. Hurst (2000)’s model is based on Wang (1996)’s abstract table model, in which attributes may be related in a hierarchical way. On the other hand, Wang et al. (2000) oversimplistically considers nested models as 1-dimensional, thus missing the correct relationships between attributes and values. A nested model can be seen as a generalization of the flat model, in which attributes may be related through composition or inheritance. Table 6 is naturally interpreted as a nested data model because the attributes have an inheritance relationship. The corresponding schema is (Year, Team, Mark (Assignments (Ass1, Ass2, Ass3), Examinations (Midte</context>
</contexts>
<marker>Wang, 1996</marker>
<rawString>Xinxin Wang. Tabular Abstraction, Editing, and Formatting. PhD thesis, The University of Waterloo, Waterloo, Ontario, Canada, 1996.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yingchen Yang</author>
<author>Wo-Shun Luk</author>
</authors>
<title>A framework for web table mining.</title>
<date>2002</date>
<booktitle>In WIDM ’02: Proceedings of the 4th international workshop on Web information and data management,</booktitle>
<pages>36--42</pages>
<publisher>ACM Press.</publisher>
<location>New York, NY, USA,</location>
<contexts>
<context position="10601" citStr="Yang and Luk (2002)" startWordPosition="1673" endWordPosition="1676"> form of the data models (Silberschatz et al., 2002), allowing broad coverage of different table types without sacrificing precision as to the logical relations between entities. Each data model assigns a clear semantics in terms of logical relations between the table elements, thereby allowing extraction of relational facts. In contrast, previous work on table analysis tends to either classify a table using only one single limited data model (e.g., Hurst (2000)), or using data models which essentially are merely surface layout types whose semantics are vague and ambiguous (e.g., Yang (2002), Yang and Luk (2002), Wang et al. (2000), Yoshida et al. (2001)). A table is a logical view of a collection of interrelated items usually presented as a row-column structure such that the reader’s ability to access and compare information can be enhanced, as also noted by Wang (1996). From a database manageTable 2: Example from Table 1 in its original version, with the English words restored. Date Thu Fri Sat Temp 15 - 18 17 - 20 19 - 23 RH 85 - 95% 70 - 90% 75 - 95% Weather Cool Cool Cloudy ment system perspective, each table can be considered as a (tiny) database. Like a program, the reader accesses the data. A</context>
<context position="13330" citStr="Yang and Luk (2002)" startWordPosition="2152" endWordPosition="2155">le, but transposed to a vertical orientation, with the first 907 Table 3: Example of a ranking table, which is typically laid out in a flat relational model. Pos Teams Pld Pts Chelsea 38 95 Arsenal 38 83 Man United 38 77 column as the schema (Date, Temp, RH, Weather) and other columns as data records. The flat model is closest to the 1-dimensional table approach used by the majority of previous models, but our approach designates the flat model as a semantic representation, in contrast to the previous models which see 1-dimensional tables merely as a syntactic surface form (e.g., Yang (2002), Yang and Luk (2002), Wang et al. (2000), Yoshida et al. (2001)). While such previous models only recognize tables that are physically laid out in this form, our approach clearly delineates an explicit separation of syntax and semantics, which provides greater flexibility allowing any table to be interpreted as a flat model, regardless of its surface form (though the flat model interpretation is more common for some surface forms than others). As an example showing that any kind of table can be categorized as flat model, consider Table 6. Even such a table can be semantically interpreted as a flat model because r</context>
<context position="16711" citStr="Yang and Luk (2002)" startWordPosition="2686" endWordPosition="2689">is described by a set of attributes. For example, Table 5 can be semantically interpreted using the multidimensional data model depicted in Figure 1. Likewise, the cross-tabular table in Table 4 can also be semantically interpreted using the same multidimensional data model in Figure 1. The value of the first three columns in Table 5 are the dimension attributes and the revenue values are the measures. In contrast, among previous models, Yang (2002) produces a semantically incorrect recognition of a multidimensional table that inappropriately presents the attributes in hierarchical structure. Yang and Luk (2002) and Wang et al. (2000) only recognize the simplest 2-dimensional case and apparently cannot handle 3 or more dimensions. Yoshida et al. (2001) only handle 1- dimensional cases. A dimensional model is an inappropriate interpretation for non-cross-tabular tables, such as Table 2 and Table 3. A dimensional model is also not valid for tables such as Table 6. Semantically, it is not possible for “Assignments” and “Midterm” 908 Table 4: Example table showing revenue according to Location = {Vancouver, Victoria}, Type = {Phone, Computer} and Time = {2001, 2002}, using a tabular view of a 3-dimension</context>
<context position="19153" citStr="Yang and Luk (2002)" startWordPosition="3107" endWordPosition="3110">3 Midterm Final Grade 1991 Winter 85 80 75 60 75 75 Spring 80 65 75 60 70 70 Fall 80 85 75 55 80 75 1992 Winter 85 80 70 70 75 75 Spring 80 80 70 70 75 75 Fall 75 70 65 60 80 70 model. 3 A 2D SCFG Model for Table Analysis In this section, we will present our twodimensional SCFG parsing model for table analysis which has several advantages over the ad hoc approaches. First, the probabilistic grammar approach permits a cleaner encapsulation and generalization of the kind of knowledge that previous models attempted to capture within their ad hoc heuristics. Most previous works (e.g. Yang (2002), Yang and Luk (2002), Hurst (2000), Hurst (2002)) gradually built up their ad hoc heuristics manually by inspecting some set of training samples. This approach may work if tables are from limited domains of similar nature. However, like text documents, the syntactic layout of textual tables may be determined by its context as well as its language. For instance, it is natural for an Arabic reader to read an Arabic table taking the rightmost column as the attribute column, instead of the leftmost column. Yoshida et al. (2001) use machinelearning techniques to analyze nine types of table structures, all 1-dimensiona</context>
</contexts>
<marker>Yang, Luk, 2002</marker>
<rawString>Yingchen Yang and Wo-Shun Luk. A framework for web table mining. In WIDM ’02: Proceedings of the 4th international workshop on Web information and data management, pages 36–42, New York, NY, USA, 2002. ACM Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yingchen Yang</author>
</authors>
<title>Web table mining and database discovery. Master’s thesis,</title>
<date>2002</date>
<institution>Simon Fraser University,</institution>
<contexts>
<context position="8581" citStr="Yang (2002)" startWordPosition="1361" endWordPosition="1362">l knowledge. We aim to show that a fairly useful baseline level of semantic interpretation accuracy can already be achieved, even with relatively little lexical and ontological knowledge. We model these alternative hypotheses for the interpretation of ambiguous tables as competing parses. Just as with ordinary parsing and semantic interpretation, the reader often builds multiple competing interpretations of the same table. Note that many previous models do not even distinguish between the alternative possible interpretations in the Martian example. Existing mod906 els such as Hurst (2000) and Yang (2002) interpret tables with the same structural layout simply by assigning them same data model, which stops short of recognizing that it is necessary to rank multiple competing interpretations that entail different sets of logical relations. In contrast, our proposed model is capable of producing multiple competing parses indicating different semantic interpretations of tables having the same structural layout, by selecting specific data models for the table and its subregions. 2 Data Models for Specifying Semantic Interpretations To begin, some formal basis is needed to facilitate precise specifi</context>
<context position="10580" citStr="Yang (2002)" startWordPosition="1671" endWordPosition="1672"> describe the form of the data models (Silberschatz et al., 2002), allowing broad coverage of different table types without sacrificing precision as to the logical relations between entities. Each data model assigns a clear semantics in terms of logical relations between the table elements, thereby allowing extraction of relational facts. In contrast, previous work on table analysis tends to either classify a table using only one single limited data model (e.g., Hurst (2000)), or using data models which essentially are merely surface layout types whose semantics are vague and ambiguous (e.g., Yang (2002), Yang and Luk (2002), Wang et al. (2000), Yoshida et al. (2001)). A table is a logical view of a collection of interrelated items usually presented as a row-column structure such that the reader’s ability to access and compare information can be enhanced, as also noted by Wang (1996). From a database manageTable 2: Example from Table 1 in its original version, with the English words restored. Date Thu Fri Sat Temp 15 - 18 17 - 20 19 - 23 RH 85 - 95% 70 - 90% 75 - 95% Weather Cool Cool Cloudy ment system perspective, each table can be considered as a (tiny) database. Like a program, the reader</context>
<context position="13309" citStr="Yang (2002)" startWordPosition="2150" endWordPosition="2151"> database table, but transposed to a vertical orientation, with the first 907 Table 3: Example of a ranking table, which is typically laid out in a flat relational model. Pos Teams Pld Pts Chelsea 38 95 Arsenal 38 83 Man United 38 77 column as the schema (Date, Temp, RH, Weather) and other columns as data records. The flat model is closest to the 1-dimensional table approach used by the majority of previous models, but our approach designates the flat model as a semantic representation, in contrast to the previous models which see 1-dimensional tables merely as a syntactic surface form (e.g., Yang (2002), Yang and Luk (2002), Wang et al. (2000), Yoshida et al. (2001)). While such previous models only recognize tables that are physically laid out in this form, our approach clearly delineates an explicit separation of syntax and semantics, which provides greater flexibility allowing any table to be interpreted as a flat model, regardless of its surface form (though the flat model interpretation is more common for some surface forms than others). As an example showing that any kind of table can be categorized as flat model, consider Table 6. Even such a table can be semantically interpreted as a</context>
<context position="16545" citStr="Yang (2002)" startWordPosition="2664" endWordPosition="2665">97)), consists of a set of numeric measures (though in fact the data need not be numeric), each of which is determined by a set of dimensions. Each dimension is described by a set of attributes. For example, Table 5 can be semantically interpreted using the multidimensional data model depicted in Figure 1. Likewise, the cross-tabular table in Table 4 can also be semantically interpreted using the same multidimensional data model in Figure 1. The value of the first three columns in Table 5 are the dimension attributes and the revenue values are the measures. In contrast, among previous models, Yang (2002) produces a semantically incorrect recognition of a multidimensional table that inappropriately presents the attributes in hierarchical structure. Yang and Luk (2002) and Wang et al. (2000) only recognize the simplest 2-dimensional case and apparently cannot handle 3 or more dimensions. Yoshida et al. (2001) only handle 1- dimensional cases. A dimensional model is an inappropriate interpretation for non-cross-tabular tables, such as Table 2 and Table 3. A dimensional model is also not valid for tables such as Table 6. Semantically, it is not possible for “Assignments” and “Midterm” 908 Table 4</context>
<context position="19132" citStr="Yang (2002)" startWordPosition="3105" endWordPosition="3106">Ass1 Ass2 Ass3 Midterm Final Grade 1991 Winter 85 80 75 60 75 75 Spring 80 65 75 60 70 70 Fall 80 85 75 55 80 75 1992 Winter 85 80 70 70 75 75 Spring 80 80 70 70 75 75 Fall 75 70 65 60 80 70 model. 3 A 2D SCFG Model for Table Analysis In this section, we will present our twodimensional SCFG parsing model for table analysis which has several advantages over the ad hoc approaches. First, the probabilistic grammar approach permits a cleaner encapsulation and generalization of the kind of knowledge that previous models attempted to capture within their ad hoc heuristics. Most previous works (e.g. Yang (2002), Yang and Luk (2002), Hurst (2000), Hurst (2002)) gradually built up their ad hoc heuristics manually by inspecting some set of training samples. This approach may work if tables are from limited domains of similar nature. However, like text documents, the syntactic layout of textual tables may be determined by its context as well as its language. For instance, it is natural for an Arabic reader to read an Arabic table taking the rightmost column as the attribute column, instead of the leftmost column. Yoshida et al. (2001) use machinelearning techniques to analyze nine types of table structu</context>
</contexts>
<marker>Yang, 2002</marker>
<rawString>Yingchen Yang. Web table mining and database discovery. Master’s thesis, Simon Fraser University, August 2002.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Yoshida</author>
<author>K Torisawa</author>
<author>J Tsujii</author>
</authors>
<title>A method to integrate tables of the world wide web,</title>
<date>2001</date>
<contexts>
<context position="10644" citStr="Yoshida et al. (2001)" startWordPosition="1681" endWordPosition="1684"> al., 2002), allowing broad coverage of different table types without sacrificing precision as to the logical relations between entities. Each data model assigns a clear semantics in terms of logical relations between the table elements, thereby allowing extraction of relational facts. In contrast, previous work on table analysis tends to either classify a table using only one single limited data model (e.g., Hurst (2000)), or using data models which essentially are merely surface layout types whose semantics are vague and ambiguous (e.g., Yang (2002), Yang and Luk (2002), Wang et al. (2000), Yoshida et al. (2001)). A table is a logical view of a collection of interrelated items usually presented as a row-column structure such that the reader’s ability to access and compare information can be enhanced, as also noted by Wang (1996). From a database manageTable 2: Example from Table 1 in its original version, with the English words restored. Date Thu Fri Sat Temp 15 - 18 17 - 20 19 - 23 RH 85 - 95% 70 - 90% 75 - 95% Weather Cool Cool Cloudy ment system perspective, each table can be considered as a (tiny) database. Like a program, the reader accesses the data. As a result, we consider that every table mu</context>
<context position="13373" citStr="Yoshida et al. (2001)" startWordPosition="2160" endWordPosition="2163">ion, with the first 907 Table 3: Example of a ranking table, which is typically laid out in a flat relational model. Pos Teams Pld Pts Chelsea 38 95 Arsenal 38 83 Man United 38 77 column as the schema (Date, Temp, RH, Weather) and other columns as data records. The flat model is closest to the 1-dimensional table approach used by the majority of previous models, but our approach designates the flat model as a semantic representation, in contrast to the previous models which see 1-dimensional tables merely as a syntactic surface form (e.g., Yang (2002), Yang and Luk (2002), Wang et al. (2000), Yoshida et al. (2001)). While such previous models only recognize tables that are physically laid out in this form, our approach clearly delineates an explicit separation of syntax and semantics, which provides greater flexibility allowing any table to be interpreted as a flat model, regardless of its surface form (though the flat model interpretation is more common for some surface forms than others). As an example showing that any kind of table can be categorized as flat model, consider Table 6. Even such a table can be semantically interpreted as a flat model because related attributes can join together to form</context>
<context position="16854" citStr="Yoshida et al. (2001)" startWordPosition="2710" endWordPosition="2713">igure 1. Likewise, the cross-tabular table in Table 4 can also be semantically interpreted using the same multidimensional data model in Figure 1. The value of the first three columns in Table 5 are the dimension attributes and the revenue values are the measures. In contrast, among previous models, Yang (2002) produces a semantically incorrect recognition of a multidimensional table that inappropriately presents the attributes in hierarchical structure. Yang and Luk (2002) and Wang et al. (2000) only recognize the simplest 2-dimensional case and apparently cannot handle 3 or more dimensions. Yoshida et al. (2001) only handle 1- dimensional cases. A dimensional model is an inappropriate interpretation for non-cross-tabular tables, such as Table 2 and Table 3. A dimensional model is also not valid for tables such as Table 6. Semantically, it is not possible for “Assignments” and “Midterm” 908 Table 4: Example table showing revenue according to Location = {Vancouver, Victoria}, Type = {Phone, Computer} and Time = {2001, 2002}, using a tabular view of a 3-dimensional data cube. Vancouver Victoria Phone Computer Phone Computer 2001 845 1078 818 968 2002 943 1130 894 1024 Table 5: Example relational databas</context>
<context position="19662" citStr="Yoshida et al. (2001)" startWordPosition="3194" endWordPosition="3197"> attempted to capture within their ad hoc heuristics. Most previous works (e.g. Yang (2002), Yang and Luk (2002), Hurst (2000), Hurst (2002)) gradually built up their ad hoc heuristics manually by inspecting some set of training samples. This approach may work if tables are from limited domains of similar nature. However, like text documents, the syntactic layout of textual tables may be determined by its context as well as its language. For instance, it is natural for an Arabic reader to read an Arabic table taking the rightmost column as the attribute column, instead of the leftmost column. Yoshida et al. (2001) use machinelearning techniques to analyze nine types of table structures, all 1-dimensional. Our grammar-based approach allows the model to be readily adapted to different situations by applying different sets of grammar rules. Another advantage is that grammatical approach can make more accurate decisions while being simpler to implement, because it requires only a single integrated parsing process to complete the entire table analysis. This includes classifying the functions of each cell (as attribute or value), pairing attributes and values, and identifying the structure and the data model</context>
</contexts>
<marker>Yoshida, Torisawa, Tsujii, 2001</marker>
<rawString>M. Yoshida, K. Torisawa, and J. Tsujii. A method to integrate tables of the world wide web, 2001.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>