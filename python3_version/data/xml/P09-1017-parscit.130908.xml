<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000033">
<title confidence="0.9958525">
Automatic training of lemmatization rules that handle morphological
changes in pre-, in- and suffixes alike
</title>
<author confidence="0.971322">
Bart Jongejan Hercules Dalianis† ‡†DSV, KTH - Stockholm University
</author>
<affiliation confidence="0.930856">
CST-University of Copenhagen Forum 100, 164 40 Kista, Sweden
</affiliation>
<address confidence="0.668474666666667">
Njalsgade 140-142 2300 København S ‡Euroling AB, SiteSeeker
Denmark Igeldammsgatan 22c
bartj@hum.ku.dk 112 49 Stockholm, Sweden
</address>
<email confidence="0.942702">
hercules@dsv.su.se
</email>
<sectionHeader confidence="0.994591" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999927611111111">
We propose a method to automatically train
lemmatization rules that handle prefix, infix
and suffix changes to generate the lemma from
the full form of a word. We explain how the
lemmatization rules are created and how the
lemmatizer works. We trained this lemmatizer
on Danish, Dutch, English, German, Greek,
Icelandic, Norwegian, Polish, Slovene and
Swedish full form-lemma pairs respectively.
We obtained significant improvements of 24
percent for Polish, 2.3 percent for Dutch, 1.5
percent for English, 1.2 percent for German
and 1.0 percent for Swedish compared to plain
suffix lemmatization using a suffix-only lem-
matizer. Icelandic deteriorated with 1.9 per-
cent. We also made an observation regarding
the number of produced lemmatization rules as
a function of the number of training pairs.
</bodyText>
<sectionHeader confidence="0.999132" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999926405405406">
Lemmatizers and stemmers are valuable human
language technology tools to improve precision
and recall in an information retrieval setting. For
example, stemming and lemmatization make it
possible to match a query in one morphological
form with a word in a document in another mor-
phological form. Lemmatizers can also be used
in lexicography to find new words in text mate-
rial, including the words’ frequency of use. Other
applications are creation of index lists for book
indexes as well as key word lists
Lemmatization is the process of reducing a
word to its base form, normally the dictionary
look-up form (lemma) of the word. A trivial way
to do this is by dictionary look-up. More ad-
vanced systems use hand crafted or automatically
generated transformation rules that look at the
surface form of the word and attempt to produce
the correct base form by replacing all or parts of
the word.
Stemming conflates a word to its stem. A stem
does not have to be the lemma of the word, but
can be any trait that is shared between a group of
words, so that even the group membership itself
can be regarded as the group’s stem.
The most famous stemmer is the Porter Stem-
mer for English (Porter 1980). This stemmer re-
moves around 60 different suffixes, using rewrit-
ing rules in two steps.
The paper is structured as follows: section 2
discusses related work, section 3 explains what
the new algorithm is supposed to do, section 4
describes some details of the new algorithm, sec-
tion 5 evaluates the results, conclusions are
drawn in section 6, and finally in section 7 we
mention plans for further tests and improve-
ments.
</bodyText>
<sectionHeader confidence="0.99969" genericHeader="introduction">
2 Related work
</sectionHeader>
<bodyText confidence="0.999955571428571">
There have been some attempts in creating
stemmers or lemmatizers automatically. Ek-
mekçioglu et al. (1996) have used N-gram
matching for Turkish that gave slightly better
results than regular rule based stemming. Theron
and Cloete (1997) learned two-level rules for
English, Xhosa and Afrikaans, but only single
character insertions, replacements and additions
were allowed. Oard et al. (2001) used a language
independent stemming technique in a dictionary
based cross language information retrieval ex-
periment for German, French and Italian where
English was the search language. A four stage
backoff strategy for improving recall was intro-
</bodyText>
<page confidence="0.98372">
145
</page>
<note confidence="0.999612">
Proceedings of the 47th Annual Meeting of the ACL and the 4th IJCNLP of the AFNLP, pages 145–153,
Suntec, Singapore, 2-7 August 2009. c�2009 ACL and AFNLP
</note>
<bodyText confidence="0.999909779661017">
duced. The system worked fine for French but
not so well for Italian and German. Majumder et
al. (2007) describe a statistical stemmer, YASS
(Yet Another Suffix Stripper), mainly for Ben-
gali and French, but they propose it also for
Hindi and Gujarati. The method finds clusters of
similar words in a corpus. The clusters are called
stems. The method works best for languages that
are basically suffix based. For Bengali precision
was 39.3 percent better than without stemming,
though no absolute numbers were reported for
precision. The system was trained on a corpus
containing 301 562 words.
Kanis &amp; Müller (2005) used an automatic
technique called OOV Words Lemmatization to
train their lemmatizer on Czech, Finnish and
English data. Their algorithm uses two pattern
tables to handle suffixes as well as prefixes. Plis-
son et al. (2004) presented results for a system
using Ripple Down Rules (RDR) to generate
lemmatization rules for Slovene, achieving up to
77 percent accuracy. Matjaž et al. (2007) present
an RDR system producing efficient suffix based
lemmatizers for 14 languages, three of which
(English, German and Slovene) our algorithm
also has been tested with.
Stempel (Białecki 2004) is a stemmer for Pol-
ish that is trained on Polish full form – lemma
pairs. When tested with inflected out-of-
vocabulary (OOV) words Stempel produces 95.4
percent correct stems, of which about 81 percent
also happen to be correct lemmas.
Hedlund (2001) used two different approaches
to automatically find stemming rules from a cor-
pus, for both Swedish and English. Unfortunately
neither of these approaches did beat the hand
crafted rules in the Porter stemmer for English
(Porter 1980) or the Euroling SiteSeeker stem-
mer for Swedish, (Carlberger et al. 2001).
Jongejan &amp; Haltrup (2005) constructed a
trainable lemmatizer for the lexicographical task
of finding lemmas outside the existing diction-
ary, bootstrapping from a training set of full form
– lemma pairs extracted from the existing dic-
tionary. This lemmatizer looks only at the suffix
part of the word. Its performance was compared
with a stemmer using hand crafted stemming
rules, the Euroling SiteSeeker stemmer for
Swedish, Danish and Norwegian, and also with a
stemmer for Greek, (Dalianis &amp; Jongejan 2006).
The results showed that lemmatizer was as good
as the stemmer for Swedish, slightly better for
Danish and Norwegian but worse for Greek.
These results are very dependent on the quality
(errors, size) and complexity (diacritics, capitals)
of the training data.
In the current work we have used Jongejan &amp;
Haltrup’s lemmatizer as a reference, referring to
it as the ‘suffix lemmatizer’.
</bodyText>
<sectionHeader confidence="0.999273" genericHeader="method">
3 Delineation
</sectionHeader>
<subsectionHeader confidence="0.999896">
3.1 Why affix rules?
</subsectionHeader>
<bodyText confidence="0.976697793103448">
German and Dutch need more advanced methods
than suffix replacement since their affixing of
words (inflection of words) can include both pre-
fixing, infixing and suffixing. Therefore we cre-
ated a trainable lemmatizer that handles pre- and
infixes in addition to suffixes.
Here is an example to get a quick idea of what
we wanted to achieve with the new training algo-
rithm. Suppose we have the following Dutch full
form – lemma pair:
afgevraagd -. afvragen
(Translation: wondered, to wonder)
If this were the sole input given to the training
program, it should produce a transformation rule
like this:
*ge*a*d -. ***en
The asterisks are wildcards and placeholders.
The pattern on the left hand side contains three
wildcards, each one corresponding to one place-
holder in the replacement string on the right hand
side, in the same order. The characters matched
by a wildcard are inserted in the place kept free
by the corresponding placeholder in the replace-
ment expression.
With this “set” of rules a lemmatizer would be
able to construct the correct lemma for some
words that had not been used during the training,
such as the word verstekgezaagd (Transla-
tion: mitre cut):
</bodyText>
<table confidence="0.829329">
Word verstek ge z a ag d
Pattern * ge * a * d
Replacement * * * en
Lemma verstek z ag en
</table>
<tableCaption confidence="0.998427">
Table 1. Application of a rule to an OOV word.
</tableCaption>
<bodyText confidence="0.9965316">
For most words, however, the lemmatizer would
simply fail to produce any output, because not all
words do contain the literal strings ge and a and
a final d. We remedy this by adding a one-size-
fits-all rule that says “return the input as output”:
</bodyText>
<footnote confidence="0.316026">
* -. *
</footnote>
<page confidence="0.993701">
146
</page>
<bodyText confidence="0.986302">
So now our rule set consists of two rules:
</bodyText>
<equation confidence="0.698784">
*ge*a*d → ***en
* → *
</equation>
<bodyText confidence="0.999893636363636">
The lemmatizer then finds the rule with the most
specific pattern (see 4.2) that matches and ap-
plies only this rule. The last rule’s pattern
matches any word and so the lemmatizer cannot
fail to produce output. Thus, in our toy rule set
consisting of two rules, the first rule handles
words like gevraagd, afgezaagd,
geklaagd, (all three correctly) and getalmd
(incorrectly) while the second rule handles words
like directeur (correctly) and zei (incor-
rectly).
</bodyText>
<subsectionHeader confidence="0.989356">
3.2 Inflected vs. agglutinated languages
</subsectionHeader>
<bodyText confidence="0.9999485">
A lemmatizer that only applies one rule per word
is useful for inflected languages, a class of lan-
guages that includes all Indo-European lan-
guages. For these languages morphological
change is not a productive process, which means
that no word can be morphologically changed in
an unlimited number of ways. Ideally, there are
only a finite number of inflection schemes and
thus a finite number of lemmatization rules
should suffice to lemmatize indefinitely many
words.
In agglutinated languages, on the other hand,
there are classes of words that in principle have
innumerous word forms. One way to lemmatize
such words is to peel off all agglutinated mor-
phemes one by one. This is an iterative process
and therefore the lemmatizer discussed in this
paper, which applies only one rule per word, is
not an obvious choice for agglutinated lan-
guages.
</bodyText>
<subsectionHeader confidence="0.999702">
3.3 Supervised training
</subsectionHeader>
<bodyText confidence="0.9998704">
An automatic process to create lemmatization
rules is described in the following sections. By
reserving a small part of the available training
data for testing it is possible to quite accurately
estimate the probability that the lemmatizer
would produce the right lemma given any un-
known word belonging to the language, even
without requiring that the user masters the lan-
guage (Kohavi 1995).
On the downside, letting a program construct
lemmatization rules requires an extended list of
full form – lemma pairs that the program can
exercise on – at least tens of thousands and pos-
sibly over a million entries (Dalianis and Jonge-
jan 2006).
</bodyText>
<subsectionHeader confidence="0.584509">
3.4 Criteria for success
</subsectionHeader>
<bodyText confidence="0.96563584">
The main challenge for the training algorithm is
that it must produce rules that accurately lemma-
tize OOV words. This requirement translates to
two opposing tendencies during training. On the
one hand we must trust rules with a wide basis of
training examples more than rules with a small
basis, which favours rules with patterns that fit
many words. On the other hand we have the in-
compatible preference for cautious rules with
rather specific patterns, because these must be
better at avoiding erroneous rule applications
than rules with generous patterns. The envisaged
expressiveness of the lemmatization rules – al-
lowing all kinds of affixes and an unlimited
number of wildcards – turns the challenge into a
difficult balancing act.
In the current work we wanted to get an idea
of the advantages of an affix-based algorithm
compared to a suffix-only based algorithm.
Therefore we have made the task as hard as pos-
sible by not allowing language specific adapta-
tions to the algorithms and by not subdividing
the training words in word classes.
4 Generation of rules and look-up data
structure
</bodyText>
<subsectionHeader confidence="0.999362">
4.1 Building a rule set from training pairs
</subsectionHeader>
<bodyText confidence="0.999952916666667">
The training algorithm generates a data structure
consisting of rules that a lemmatizer must trav-
erse to arrive at a rule that is elected to fire.
Conceptually the training process is as fol-
lows. As the data structure is being built, the full
form in each training pair is tentatively lemma-
tized using the data structure that has been cre-
ated up to that stage. If the elected rule produces
the right lemma from the full form, nothing
needs to be done. Otherwise, the data structure
must be expanded with a rule such that the new
rule a) is elected instead of the erroneous rule
and b) produces the right lemma from the full
form. The training process terminates when the
full forms in all pairs in the training set are trans-
formed to their corresponding lemmas.
After training, the data structure of rules is
made permanent and can be consulted by a lem-
matizer. The lemmatizer must elect and fire rules
in the same way as the training algorithm, so that
all words from the training set are lemmatized
correctly. It may however fail to produce the cor-
rect lemmas for words that were not in the train-
ing set – the OOV words.
</bodyText>
<page confidence="0.989875">
147
</page>
<subsectionHeader confidence="0.8661005">
4.2 Internal structure of rules: prime and
derived rules
</subsectionHeader>
<bodyText confidence="0.992721027027027">
During training the Ratcliff/Obershelp algorithm
(Ratcliff &amp; Metzener 1988) is used to find the
longest non-overlapping similar parts in a given
full form – lemma pair. For example, in the pair
afgevraagd -. afvragen
the longest common substring is vra, followed
by af and g. These similar parts are replaced
with wildcards and placeholders:
*ge*a*d -. ***en
Now we have the prime rule for the training pair,
the least specific rule necessary to lemmatize the
word correctly. Rules with more specific patterns
– derived rules – can be created by adding char-
acters and by removing or adding wildcards. A
rule that is derived from another rule (derived or
prime) is more specific than the original rule:
Any word that is successfully matched by the
pattern of a derived rule is also successfully
matched by the pattern of the original rule, but
the converse is not the case. This establishes a
partial ordering of all rules. See Figures 1 and 2,
where the rules marked ‘p’ are prime rules and
those marked ‘d’ are derived.
Innumerous rules can be derived from a rule
with at least one wildcard in its pattern, but only
a limited number can be tested in a finite time.
To keep the number of candidate rules within
practical limits, we used the strategy that the pat-
tern of a candidate is minimally different from its
parent’s pattern: it can have one extra literal
character or one wildcard less or replace one
wildcard with one literal character. Alternatively,
a candidate rule (such as the bottom rule in Fig-
ure 4) can arise by merging two rules. Within
these constraints, the algorithm creates all possi-
ble candidate rules that transform one or more
training words to their corresponding lemmas.
</bodyText>
<subsectionHeader confidence="0.74552">
4.3 External structure of rules: partial or-
dering in a DAG and in a tree
</subsectionHeader>
<bodyText confidence="0.940804571428571">
We tried two different data structures to store
new lemmatizer rules, a directed acyclic graph
(DAG) and a plain tree structure with depth first,
left to right traversal.
The DAG (Figure 1) expresses the complete
partial ordering of the rules. There is no prefer-
ential order between the children of a rule and all
paths away from the root must be regarded as
equally valid. Therefore the DAG may lead to
several lemmas for the same input word. For ex-
ample, without the rule in the bottom part of Fig-
ure 1, the word gelopen would have been lem-
matized to both lopen (correct) and gelopen
(incorrect):
gelopen:
*ge* -. ** lopen
*pen -. *pen gelopen
By adding a derived rule as a descendent of both
these two rules, we make sure that lemmatization
of the word gelopen is only handled by one
rule and only results in the correct lemma:
</bodyText>
<figure confidence="0.599253">
gelopen:
*ge*pen -. **pen lopen
</figure>
<figureCaption confidence="0.839836">
Figure 1. Five training pairs as supporters for
five rules in a DAG.
</figureCaption>
<bodyText confidence="0.999729318181818">
The tree in Figure 2 is a simpler data structure
and introduces a left to right preferential order
between the children of a rule. Only one rule
fires and only one lemma per word is produced.
For example, because the rule *ge* → ** pre-
cedes its sibling rule *en → *, whenever the
former rule is applicable, the latter rule and its
descendents are not even visited, irrespective of
their applicability. In our example, the former
rule – and only the former rule – handles the
lemmatization of gelopen, and since it pro-
duces the correct lemma an additional rule is not
necessary.
In contrast to the DAG, the tree implements
negation: if the Nth sibling of a row of children
fires, it not only means that the pattern of the Nth
rule matches the word, it also means that the pat-
terns of the N-1 preceding siblings do not match
the word. Such implicit negation is not possible
in the DAG, and this is probably the main reason
why the experiments with the DAG-structure
lead to huge numbers of rules, very little gener-
</bodyText>
<figure confidence="0.998504076923077">
* → * p
ui → ui
*ge*pen → **pen d
gelopen → lopen
*ge* → **
overgegaan → overgaan
p
*pen →*pen
lopen → lopen
*en → *
uien→ ui
p
d
</figure>
<page confidence="0.978783">
148
</page>
<bodyText confidence="0.9994945">
alization, uncontrollable training times (months,
not minutes!) and very low lemmatization qual-
ity. On the other hand, the experiments with the
tree structure were very successful. The building
time of the rules is acceptable, taking small re-
cursive steps during the training part. The mem-
ory use is tractable and the quality of the results
is good provided good training material.
</bodyText>
<figureCaption confidence="0.960664">
Figure 2. The same five training pairs as sup-
porters for only four rules in a tree.
</figureCaption>
<subsectionHeader confidence="0.989779">
4.4 Rule selection criteria
</subsectionHeader>
<bodyText confidence="0.997569933333334">
This section pertains to the training algorithm
employing a tree.
The typical situation during training is that a
rule that already has been added to the tree
makes lemmatization errors on some of the train-
ing words. In that case one or more corrective
children have to be added to the rule1.
If the pattern of a new child rule only matches
some, but not all training words that are lemma-
tized incorrectly by the parent, a right sibling
rule must be added. This is repeated until all
training words that the parent does not lemmatize
correctly are matched by the leftmost child rule
or one of its siblings.
A candidate child rule is faced with training
words that the parent did not lemmatize correctly
and, surprisingly, also supporters of the parent,
because the pattern of the candidate cannot dis-
criminate between these two groups.
On the output side of the candidate appear the
training pairs that are lemmatized correctly by
the candidate, those that are lemmatized incor-
1 If the case of a DAG, care must be taken that the
complete representation of the partial ordering of
rules is maintained. Any new rule not only becomes a
child of the rule that it was aimed at as a corrective
child, but often also of several other rules.
rectly and those that do not match the pattern of
the candidate.
For each candidate rule the training algorithm
creates a 2×3 table (see Table 2) that counts the
number of training pairs that the candidate lem-
matizes correctly or incorrectly or that the candi-
date does not match. The two columns count the
training pairs that, respectively, were lemmatized
incorrectly and correctly by the parent. These six
parameters Nxy can be used to select the best can-
didate. Only four parameters are independent,
because the numbers of training words that the
parent lemmatized incorrectly (Nw) and correctly
(Nr) are the same for all candidates. Thus, after
the application of the first and most significant
selection criterion, up to three more selection
criteria of decreasing significance can be applied
if the preceding selection ends in a tie.
</bodyText>
<table confidence="0.998938166666667">
Parent Incorrect Correct
Child (supporters)
Correct N,,,, Nrr
Incorrect Nww N,,,,
Not matched Nwn Nrn
Sum Nw Nr
</table>
<tableCaption confidence="0.9755115">
Table 2. The six parameters for rule selection
among candidate rules.
</tableCaption>
<bodyText confidence="0.999969391304348">
A large Nwr and a small Nrw are desirable. Nwr is a
measure for the rate at which the updated data
structure has learned to correctly lemmatize
those words that previously were lemmatized
incorrectly. A small Nrw indicates that only few
words that previously were lemmatized correctly
are spoiled by the addition of the new rule. It is
less obvious how the other numbers weigh in.
We have obtained the most success with crite-
ria that first select for highest Nwr + Nrr - Nrw . If
the competition ends in a tie, we select for lowest
Nrr among the remaining candidates. If the com-
petition again ends in a tie, we select for highest
Nrn – Nww . Due to the marginal effect of a fourth
criterion we let the algorithm randomly select
one of the remaining candidates instead.
The training pairs that are matched by the pat-
tern of the winning rule become the supporters
and non-supporters of that new rule and are no
longer supporters or non-supporters of the par-
ent. If the parent still has at least one non-
supporter, the remaining supporters and non-
supporters – the training pairs that the winning
</bodyText>
<figure confidence="0.997621692307692">
p
* → *
ui → ui
p
*en → *
uien→ ui
p
*ge* → **
overgegaan → overgaan
gelopen → lopen
d
*pen →*pen
lopen → lopen
</figure>
<page confidence="0.996294">
149
</page>
<bodyText confidence="0.998049">
candidate does not match – are used to select the
right sibling of the new rule.
</bodyText>
<sectionHeader confidence="0.995601" genericHeader="method">
5 Evaluation
</sectionHeader>
<bodyText confidence="0.999928896551724">
We trained the new lemmatizer using training
material for Danish (STO), Dutch (CELEX),
English (CELEX), German (CELEX), Greek
(Petasis et al. 2003), Icelandic (IFD), Norwegian
(SCARRIE), Polish (Morfologik), Slovene
(Juršič et al. 2007) and Swedish (SUC).
The guidelines for the construction of the
training material are not always known to us. In
some cases, we know that the full forms have
been generated automatically from the lemmas.
On the other hand, we know that the Icelandic
data is derived from a corpus and only contains
word forms occurring in that corpus. Because of
the uncertainties, the results cannot be used for a
quantitative comparison of the accuracy of lem-
matization between languages.
Some of the resources were already disam-
biguated (one lemma per full form) when we re-
ceived the data. We decided to disambiguate the
remaining resources as well. Handling homo-
graphs wisely is important in many lemmatiza-
tion tasks, but there are many pitfalls. As we
only wanted to investigate the improvement of
the affix algorithm over the suffix algorithm, we
decided to factor out ambiguity. We simply
chose the lemma that comes first alphabetically
and discarded the other lemmas from the avail-
able data.
The evaluation was carried out by dividing the
available material in training data and test data in
seven different ratios, setting aside between
1.54% and 98.56% as training data and the re-
mainder as OOV test data. (See section 7). To
keep the sample standard deviation s for the ac-
curacy below an acceptable level we used the
evaluation method repeated random subsampling
validation that is proposed in Voorhees (2000)
and Bouckaert &amp; Frank (2000). We repeated the
training and evaluation for each ratio with sev-
eral randomly chosen sets, up to 17 times for the
smallest and largest ratios, because these ratios
lead to relatively small training sets and test sets
respectively. The same procedure was followed
for the suffix lemmatizer, using the same training
and test sets. Table 3 shows the results for the
largest training sets.
For some languages lemmatization accuracy
for OOV words improved by deleting rules that
are based on very few examples from the training
data. This pruning was done after the training of
the rule set was completed. Regarding the affix
algorithm, the results for half of the languages
became better with mild pruning, i.e. deleting
rules with only one example. For Danish, Dutch,
German, Greek and Icelandic pruning did not
improve accuracy. Regarding the suffix algo-
rithm, only English and Swedish profited from
pruning.
</bodyText>
<table confidence="0.999505583333333">
Language Suffix Affix Δ % N × n
% % 1000
Icelandic 73.2±1.4 71.3±1.5 -1.9 58 17
Danish 93.2±0.4 92.8±0.2 -0.4 553 5
Norwegian 87.8±0.4 87.6±0.3 -0.2 479 6
Greek 90.2±0.3 90.4±0.4 0.2 549 5
Slovene 86.0±0.6 86.7±0.3 0.7 199 9
Swedish 91.24±0.18 92.3±0.3 1.0 478 6
German 90.3±0.5 91.46±0.17 1.2 315 7
English 87.5±0.9 89.0±1.3 1.5 76 15
Dutch 88.2±0.5 90.4±0.5 2.3 302 7
Polish 69.69±0.06 93.88±0.08 24.2 3443 2
</table>
<tableCaption confidence="0.967103">
Table 3. Accuracy for the suffix and affix algo-
</tableCaption>
<bodyText confidence="0.972363333333333">
rithms. The fifth column shows the size of the
available data. Of these, 98.56% was used for
training and 1.44% for testing. The last column
shows the number n of performed iterations,
which was inversely proportional to √N with a
minimum of two.
</bodyText>
<sectionHeader confidence="0.947233" genericHeader="method">
6 Some language specific notes
</sectionHeader>
<bodyText confidence="0.99546675">
For Polish, the suffix algorithm suffers from
overtraining. The accuracy tops at about 100 000
rules, which is reached when the training set
comprises about 1 000 000 pairs.
</bodyText>
<figureCaption confidence="0.891333">
Figure 3. Accuracy vs. number of rules for Polish
</figureCaption>
<bodyText confidence="0.8458495">
Upper swarm of data points: affix algorithm.
Lower swarm of data points: suffix algorithm.
Each swarm combines results from six rule sets
with varying amounts of pruning (no pruning and
pruning with cut-off = 1..5).
If more training pairs are added, the number of
rules grows, but the accuracy falls. The affix al-
gorithm shows no sign of overtraining, even
</bodyText>
<page confidence="0.995125">
150
</page>
<bodyText confidence="0.999971">
though the Polish material comprised 3.4 million
training pairs, more than six times the number of
the second language on the list, Danish. See Fig-
ure 3.
The improvement of the accuracy for Polish
was tremendous. The inflectional paradigm in
Polish (as in other Slavic languages) can be left
factorized, except for the superlative. However,
only 3.8% of the words in the used Polish data
have the superlative forming prefix naj, and
moreover this prefix is only removed from ad-
verbs and not from the much more numerous
adjectives.
The true culprit of the discrepancy is the great
number (&gt; 23%) of words in the Polish data that
have the negative prefix nie, which very often
does not recur in the lemma. The suffix algo-
rithm cannot handle these 23% correctly.
The improvement over the suffix lemmatizer
for the case of German is unassuming. To find
out why, we looked at how often rules with infix
or prefix patterns fire and how well they are do-
ing. We trained the suffix algorithm with 9/10 of
the available data and tested with the remaining
1/10, about 30 000 words. Of these, 88% were
lemmatized correctly (a number that indicates the
smaller training set than in Table 3).
</bodyText>
<table confidence="0.9992974">
German Dutch
Acc. Freq % Acc. % Freq %
%
all 88.1 100.0 87.7 100.0
suffix- 88.7 94.0 88.1 94.9
only
prefix 79.9 4.4 80.9 2.4
infix 83.3 2.3 77.4 3.0
ä ö ü 92.8 0.26 N/A 0.0
ge infix 68.6 0.94 77.9 2.6
</table>
<tableCaption confidence="0.948237">
Table 4. Prevalence of suffix-only rules, rules
</tableCaption>
<bodyText confidence="0.998294142857143">
specifying a prefix, rules specifying an infix and
rules specifying infixes containing either ä, ö or
ü or the letter combination ge.
Almost 94% of the lemmas were created using
suffix-only rules, with an accuracy of almost
89%. Less than 3% of the lemmas were created
using rules that included at least one infix sub-
pattern. Of these, about 83% were correctly
lemmatized, pulling the average down. We also
looked at two particular groups of infix-rules:
those including the letters ä, ö or ü and those
with the letter combination ge. The former
group applies to many words that display umlaut,
while the latter applies to past participles. The
first group of rules, accounting for 11% of all
words handled by infix rules, performed better
than average, about 93%, while the latter group,
accounting for 40% of all words handled by infix
rules, performed poorly at 69% correct lemmas.
Table 4 summarizes the results for German and
the closely related Dutch language.
</bodyText>
<sectionHeader confidence="0.97064" genericHeader="method">
7 Self-organized criticality
</sectionHeader>
<bodyText confidence="0.96733544">
Over the whole range of training set sizes the
number of rules goes like d
C.N with 0 &lt; C, and N
the number of training pairs. The value of C and
d not only depended on the chosen algorithm, but
also on the language. Figure 4 shows how the
number of generated lemmatization rules for Pol-
ish grows as a function of the number of training
pairs.
Figure 4. Number of rules vs. number of training
pairs for Polish (double logarithmic scale).
Upper row: unpruned rule sets
Lower row: heavily pruned rule sets (cut-off=5)
There are two rows of data, each row containing
seven data points. The rules are counted after
training with 1.54 percent of the available data
and then repeatedly doubling to 3.08, 6.16,
12.32, 24.64, 49.28 and 98.56 percent of the
available data. The data points in the upper row
designate the number of rules resulting from the
training process. The data points in the lower
row arise by pruning rules that are based on less
than six examples from the training set.
The power law for the upper row of data points
for Polish in Figure 4 is
</bodyText>
<equation confidence="0.354741666666667">
0. 80N0.87
training
Nrules =
</equation>
<page confidence="0.989228">
151
</page>
<bodyText confidence="0.9983175">
As a comparison, for Icelandic the power law for
the unpruned set of rules is
</bodyText>
<equation confidence="0.728755">
0.90
Nrules _ — 1. 3 2Ntraining
</equation>
<bodyText confidence="0.999984290322581">
These power law expressions are derived for the
affix algorithm. For the suffix algorithm the ex-
ponent in the Polish power law expression is
very close to 1 (0.98), which indicates that the
suffix lemmatizer is not good at all at generaliz-
ing over the Polish training data: the number of
rules grows almost proportionally with the num-
ber of training words. (And, as Figure 3 shows,
to no avail.) On the other hand, the suffix lem-
matizer fares better than the affix algorithm for
Icelandic data, because in that case the exponent
in the power law expression is lower: 0.88 versus
0.90.
The power law is explained by self-organized
criticality (Bak et al. 1987, 1988). Rule sets that
originate from training sets that only differ in a
single training example can be dissimilar to any
degree depending on whether and where the dif-
ference is tipping the balance between competing
rule candidates. Whether one or the other rule
candidate wins has a very significant effect on
the parts of the tree that emanate as children or as
siblings from the winning node. If the difference
has an effect close to the root of the tree, a large
expanse of the tree is affected. If the difference
plays a role closer to a leaf node, only a small
patch of the tree is affected. The effect of adding
a single training example can be compared with
dropping a single rice corn on top of a pile of
rice, which can create an avalanche of unpredict-
able size.
</bodyText>
<sectionHeader confidence="0.999106" genericHeader="method">
8 Conclusions
</sectionHeader>
<bodyText confidence="0.999987953846154">
Affix rules perform better than suffix rules if the
language has a heavy pre- and infix morphology
and the size of the training data is big. The new
algorithm worked very well with the Polish Mor-
fologik dataset and compares well with the
Stempel algorithm (Białecki 2008).
Regarding Dutch and German we have ob-
served that the affix algorithm most often applies
suffix-only rules to OOV words. We have also
observed that words lemmatized this way are
lemmatized better than average. The remaining
words often need morphological changes in more
than one position, for example both in an infix
and a suffix. Although these changes are corre-
lated by the inflectional rules of the language, the
number of combinations is still large, while at
the same time the number of training examples
exhibiting such combinations is relatively small.
Therefore the more complex rules involving infix
or prefix subpatterns or combinations thereof are
less well-founded than the simple suffix-only
rules. The lemmatization accuracy of the com-
plex rules will therefore in general be lower than
that of the suffix-only rules. The reason why the
affix algorithm is still better than the algorithm
that only considers suffix rules is that the affix
algorithm only generates suffix-only rules from
words with suffix-only morphology. The suffix-
only algorithm is not able to generalize over
training examples that do not fulfil this condition
and generates many rules based on very few ex-
amples. Consequently, everything else being
equal, the set of suffix-only rules generated by
the affix algorithm must be of higher quality than
the set of rules generated by the suffix algorithm.
The new affix algorithm has fewer rules sup-
ported by only one example from the training
data than the suffix algorithm. This means that
the new algorithm is good at generalizing over
small groups of words with exceptional mor-
phology. On the other hand, the bulk of ‘normal’
training words must be bigger for the new affix
based lemmatizer than for the suffix lemmatizer.
This is because the new algorithm generates im-
mense numbers of candidate rules with only
marginal differences in accuracy, requiring many
examples to find the best candidate.
When we began experimenting with lemmati-
zation rules with unrestricted numbers of affixes,
we could not know whether the limited amount
of available training data would be sufficient to
fix the enormous amount of free variables with
enough certainty to obtain higher quality results
than obtainable with automatically trained lem-
matizers allowing only suffix transformations.
However, the results that we have obtained
with the new affix algorithm are on a par with or
better than those of the suffix lemmatizer. There
is still room for improvements as only part of the
parameter space of the new algorithm has been
searched. The case of Polish shows the superior-
ity of the new algorithm, whereas the poor re-
sults for Icelandic, a suffix inflecting language
with many inflection types, were foreseeable,
because we only had a small training set.
</bodyText>
<sectionHeader confidence="0.999491" genericHeader="discussions">
9 Future work
</sectionHeader>
<bodyText confidence="0.9999295">
Work with the new affix lemmatizer has until
now focused on the algorithm. To really know if
the carried out theoretical work is valuable we
would like to try it out in a real search setting in
a search engine and see if the users appreciate
the new algorithm’s results.
</bodyText>
<page confidence="0.997614">
152
</page>
<sectionHeader confidence="0.99585" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999625621359223">
Per Bak, Chao Tang and Kurt Wiesenfeld. 1987. Self-
Organized Criticality: An Explanation of 1/f Noise,
Phys. Rev. Lett., vol. 59,. pp. 381-384, 1987
Per Bak, Chao Tang and Kurt Wiesenfeld . 1988.
Phys. Rev. A38, (1988), pp. 364-374
Andrzej Białecki, 2004, Stempel - Algorithmic
Stemmer for Polish Language
http://www.getopt.org/stempel/
Remco R. Bouckaert and Eibe Frank. 2000. Evaluat-
ing the Replicability of SigniÞcance Tests for
Comparing Learning Algorithms. In H. Dai, R.
Srikant, &amp; C. Zhang (Eds.), Proc. 8th Pacific-Asia
Conference, PAKDD 2004, Sydney, Australia,
May 26-28, 2004 (pp. 3-12). Berlin: Springer.
Johan Carlberger, Hercules Dalianis, Martin Hassel,
and Ola Knutsson. 2001. Improving Precision in
Information Retrieval for Swedish using Stem-
ming. In the Proceedings of NoDaLiDa-01 - 13th
Nordic Conference on Computational Linguistics,
May 21-22, Uppsala, Sweden.
Celex: http://celex.mpi.nl/
Hercules Dalianis and Bart Jongejan 2006. Hand-
crafted versus Machine-learned Inflectional Rules:
the Euroling-SiteSeeker Stemmer and CST&apos;s Lem-
matiser, in Proceedings of the International Con-
ference on Language Resources and Evaluation,
LREC 2006.
F. Çuna Ekmekçioglu, Mikael F. Lynch, and Peter
Willett. 1996. Stemming and N-gram matching for
term conflation in Turkish texts. Information Re-
search, 7(1) pp 2-6.
Niklas Hedlund 2001. Automatic construction of
stemming rules, Master Thesis, NADA-KTH,
Stockholm, TRITA-NA-E0194.
IFD: Icelandic Centre for Language Technology,
http://tungutaekni.is/researchsystems/rannsoknir_1
2en.html
Bart Jongejan and Dorte Haltrup. 2005. The CST
Lemmatiser. Center for Sprogteknologi, University
of Copenhagen version 2.7 (August, 23 2005)
http://cst.dk/online/lemmatiser/cstlemma.pdf
Jakub Kanis and Ludek Müller. 2005. Automatic
Lemmatizer Construction with Focus on OOV
Words Lemmatization in Text, Speech and Dia-
logue, Lecture Notes in Computer Science, Berlin /
Heidelberg, pp 132-139
Ron Kohavi. 1995. A study of cross-validation and
bootstrap for accuracy estimation and model selec-
tion. Proceedings of the Fourteenth International
Joint Conference on Artificial Intelligence 2 (12):
1137–1143, Morgan Kaufmann, San Mateo.
Prasenjit Majumder, Mandar Mitra, Swapan K. Parui,
Gobinda Kole, Pabitra Mitra, and Kalyankumar
Datta. 2007. YASS: Yet another suffix stripper.
ACM Transactions on Information Systems , Vol-
ume 25 , Issue 4, October 2007.
Juršič Matjaž, Igor Mozetič, and Nada Lavrač. 2007.
Learning ripple down rules for efficient lemmatiza-
tion In proceeding of the Conference on Data Min-
ing and Data Warehouses (SiKDD 2007), October
12, 2007, Ljubljana, Slovenia
Morfologik: Polish morphological analyzer
http://mac.softpedia.com/get/Word-
Processing/Morfologik.shtml
Douglas W. Oard, Gina-Anne Levow, and Clara I.
Cabezas. 2001. CLEF experiments at Maryland:
Statistical stemming and backoff translation. In
Cross-language information retrieval and evalua-
tion: Proceeding of the Clef 2000 workshops Carol
Peters Ed. Springer Verlag pp. 176-187. 2001.
Georgios Petasis, Vangelis Karkaletsis , Dimitra Far-
makiotou , Ion Androutsopoulos and Constantine
D. Spyropoulo. 2003. A Greek Morphological
Lexicon and its Exploitation by Natural Language
Processing Applications. In Lecture Notes on
Computer Science (LNCS), vol.2563, &amp;quot;Advances
in Informatics - Post-proceedings of the 8th Pan-
hellenic Conference in Informatics&amp;quot;, Springer Ver-
lag.
Joël Plisson, Nada Lavrač, and Dunja Mladenic. 2004,
A rule based approach to word lemmatization,
Proceedings of the 7th International Multi-
conference Information Society, IS-2004, Institut
Jozef Stefan, Ljubljana, pp.83-6.
Martin F. Porter 1980. An algorithm for suffix strip-
ping. Program, vol 14, no 3, pp 130-130.
John W. Ratcliff and David Metzener, 1988. Pattern
Matching: The Gestalt Approach, Dr. Dobb&apos;s
Journal, page 46, July 1988.
SCARRIE 2009. Scandinavian Proofreading Tools
http://ling.uib.no/~desmedt/scarrie/
STO: http://cst.ku.dk/sto_ordbase/
SUC 2009. Stockholm Umeå corpus,
http://www.ling.su.se/staff/sofia/suc/suc.html
Pieter Theron and Ian Cloete 1997 Automatic acquisi-
tion of two-level morphological rules, Proceedings
of the fifth conference on Applied natural language
processing, p.103-110, March 31-April 03, 1997,
Washington, DC.
Ellen M. Voorhees. 2000. Variations in relevance
judgments and the measurement of retrieval effec-
tiveness, J. of Information Processing and Man-
agement 36 (2000) pp 697-716
</reference>
<page confidence="0.999222">
153
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.135598">
<title confidence="0.929205">Automatic training of lemmatization rules that handle morphological</title>
<author confidence="0.403632">changes in pre-</author>
<author confidence="0.403632">inand suffixes alike</author>
<affiliation confidence="0.623274">Bart Jongejan Dalianis† KTH - Stockholm University</affiliation>
<address confidence="0.4796245">CST-University of Copenhagen Forum 100, 164 40 Kista, Sweden Njalsgade 140-142 2300 København S ‡Euroling AB, SiteSeeker Denmark Igeldammsgatan 22c bartj@hum.ku.dk 112 49 Stockholm, Sweden</address>
<email confidence="0.915327">hercules@dsv.su.se</email>
<abstract confidence="0.994101842105263">We propose a method to automatically train lemmatization rules that handle prefix, infix and suffix changes to generate the lemma from the full form of a word. We explain how the lemmatization rules are created and how the lemmatizer works. We trained this lemmatizer on Danish, Dutch, English, German, Greek, Icelandic, Norwegian, Polish, Slovene and Swedish full form-lemma pairs respectively. We obtained significant improvements of 24 percent for Polish, 2.3 percent for Dutch, 1.5 percent for English, 1.2 percent for German and 1.0 percent for Swedish compared to plain suffix lemmatization using a suffix-only lemmatizer. Icelandic deteriorated with 1.9 percent. We also made an observation regarding the number of produced lemmatization rules as a function of the number of training pairs.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Per Bak</author>
<author>Chao Tang</author>
<author>Kurt Wiesenfeld</author>
</authors>
<title>SelfOrganized Criticality: An Explanation of 1/f Noise,</title>
<date>1987</date>
<journal>Phys. Rev. Lett.,</journal>
<volume>59</volume>
<pages>381--384</pages>
<contexts>
<context position="28394" citStr="Bak et al. 1987" startWordPosition="4854" endWordPosition="4857"> the affix algorithm. For the suffix algorithm the exponent in the Polish power law expression is very close to 1 (0.98), which indicates that the suffix lemmatizer is not good at all at generalizing over the Polish training data: the number of rules grows almost proportionally with the number of training words. (And, as Figure 3 shows, to no avail.) On the other hand, the suffix lemmatizer fares better than the affix algorithm for Icelandic data, because in that case the exponent in the power law expression is lower: 0.88 versus 0.90. The power law is explained by self-organized criticality (Bak et al. 1987, 1988). Rule sets that originate from training sets that only differ in a single training example can be dissimilar to any degree depending on whether and where the difference is tipping the balance between competing rule candidates. Whether one or the other rule candidate wins has a very significant effect on the parts of the tree that emanate as children or as siblings from the winning node. If the difference has an effect close to the root of the tree, a large expanse of the tree is affected. If the difference plays a role closer to a leaf node, only a small patch of the tree is affected. </context>
</contexts>
<marker>Bak, Tang, Wiesenfeld, 1987</marker>
<rawString>Per Bak, Chao Tang and Kurt Wiesenfeld. 1987. SelfOrganized Criticality: An Explanation of 1/f Noise, Phys. Rev. Lett., vol. 59,. pp. 381-384, 1987</rawString>
</citation>
<citation valid="true">
<authors>
<author>Per Bak</author>
</authors>
<title>Chao Tang and Kurt Wiesenfeld .</title>
<date>1988</date>
<journal>Phys. Rev.</journal>
<volume>38</volume>
<pages>364--374</pages>
<marker>Bak, 1988</marker>
<rawString>Per Bak, Chao Tang and Kurt Wiesenfeld . 1988. Phys. Rev. A38, (1988), pp. 364-374</rawString>
</citation>
<citation valid="true">
<authors>
<author>Andrzej Białecki</author>
</authors>
<title>Stempel - Algorithmic Stemmer for Polish Language http://www.getopt.org/stempel/</title>
<date>2004</date>
<contexts>
<context position="4833" citStr="Białecki 2004" startWordPosition="775" endWordPosition="776">562 words. Kanis &amp; Müller (2005) used an automatic technique called OOV Words Lemmatization to train their lemmatizer on Czech, Finnish and English data. Their algorithm uses two pattern tables to handle suffixes as well as prefixes. Plisson et al. (2004) presented results for a system using Ripple Down Rules (RDR) to generate lemmatization rules for Slovene, achieving up to 77 percent accuracy. Matjaž et al. (2007) present an RDR system producing efficient suffix based lemmatizers for 14 languages, three of which (English, German and Slovene) our algorithm also has been tested with. Stempel (Białecki 2004) is a stemmer for Polish that is trained on Polish full form – lemma pairs. When tested with inflected out-ofvocabulary (OOV) words Stempel produces 95.4 percent correct stems, of which about 81 percent also happen to be correct lemmas. Hedlund (2001) used two different approaches to automatically find stemming rules from a corpus, for both Swedish and English. Unfortunately neither of these approaches did beat the hand crafted rules in the Porter stemmer for English (Porter 1980) or the Euroling SiteSeeker stemmer for Swedish, (Carlberger et al. 2001). Jongejan &amp; Haltrup (2005) constructed a </context>
</contexts>
<marker>Białecki, 2004</marker>
<rawString>Andrzej Białecki, 2004, Stempel - Algorithmic Stemmer for Polish Language http://www.getopt.org/stempel/</rawString>
</citation>
<citation valid="true">
<authors>
<author>Remco R Bouckaert</author>
<author>Eibe Frank</author>
</authors>
<title>Evaluating the Replicability of SigniÞcance Tests for Comparing Learning Algorithms. In</title>
<date>2000</date>
<booktitle>Proc. 8th Pacific-Asia Conference, PAKDD 2004,</booktitle>
<pages>3--12</pages>
<editor>Zhang (Eds.),</editor>
<publisher>Springer.</publisher>
<location>Sydney, Australia,</location>
<contexts>
<context position="21882" citStr="Bouckaert &amp; Frank (2000)" startWordPosition="3722" endWordPosition="3725">er the suffix algorithm, we decided to factor out ambiguity. We simply chose the lemma that comes first alphabetically and discarded the other lemmas from the available data. The evaluation was carried out by dividing the available material in training data and test data in seven different ratios, setting aside between 1.54% and 98.56% as training data and the remainder as OOV test data. (See section 7). To keep the sample standard deviation s for the accuracy below an acceptable level we used the evaluation method repeated random subsampling validation that is proposed in Voorhees (2000) and Bouckaert &amp; Frank (2000). We repeated the training and evaluation for each ratio with several randomly chosen sets, up to 17 times for the smallest and largest ratios, because these ratios lead to relatively small training sets and test sets respectively. The same procedure was followed for the suffix lemmatizer, using the same training and test sets. Table 3 shows the results for the largest training sets. For some languages lemmatization accuracy for OOV words improved by deleting rules that are based on very few examples from the training data. This pruning was done after the training of the rule set was completed</context>
</contexts>
<marker>Bouckaert, Frank, 2000</marker>
<rawString>Remco R. Bouckaert and Eibe Frank. 2000. Evaluating the Replicability of SigniÞcance Tests for Comparing Learning Algorithms. In H. Dai, R. Srikant, &amp; C. Zhang (Eds.), Proc. 8th Pacific-Asia Conference, PAKDD 2004, Sydney, Australia, May 26-28, 2004 (pp. 3-12). Berlin: Springer.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Johan Carlberger</author>
<author>Hercules Dalianis</author>
<author>Martin Hassel</author>
<author>Ola Knutsson</author>
</authors>
<title>Improving Precision in Information Retrieval for Swedish using Stemming.</title>
<date>2001</date>
<booktitle>In the Proceedings of NoDaLiDa-01 - 13th Nordic Conference on Computational Linguistics,</booktitle>
<location>Uppsala, Sweden.</location>
<contexts>
<context position="5391" citStr="Carlberger et al. 2001" startWordPosition="865" endWordPosition="868"> our algorithm also has been tested with. Stempel (Białecki 2004) is a stemmer for Polish that is trained on Polish full form – lemma pairs. When tested with inflected out-ofvocabulary (OOV) words Stempel produces 95.4 percent correct stems, of which about 81 percent also happen to be correct lemmas. Hedlund (2001) used two different approaches to automatically find stemming rules from a corpus, for both Swedish and English. Unfortunately neither of these approaches did beat the hand crafted rules in the Porter stemmer for English (Porter 1980) or the Euroling SiteSeeker stemmer for Swedish, (Carlberger et al. 2001). Jongejan &amp; Haltrup (2005) constructed a trainable lemmatizer for the lexicographical task of finding lemmas outside the existing dictionary, bootstrapping from a training set of full form – lemma pairs extracted from the existing dictionary. This lemmatizer looks only at the suffix part of the word. Its performance was compared with a stemmer using hand crafted stemming rules, the Euroling SiteSeeker stemmer for Swedish, Danish and Norwegian, and also with a stemmer for Greek, (Dalianis &amp; Jongejan 2006). The results showed that lemmatizer was as good as the stemmer for Swedish, slightly bett</context>
</contexts>
<marker>Carlberger, Dalianis, Hassel, Knutsson, 2001</marker>
<rawString>Johan Carlberger, Hercules Dalianis, Martin Hassel, and Ola Knutsson. 2001. Improving Precision in Information Retrieval for Swedish using Stemming. In the Proceedings of NoDaLiDa-01 - 13th Nordic Conference on Computational Linguistics, May 21-22, Uppsala, Sweden.</rawString>
</citation>
<citation valid="false">
<note>Celex: http://celex.mpi.nl/</note>
<marker></marker>
<rawString>Celex: http://celex.mpi.nl/</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hercules Dalianis</author>
<author>Bart Jongejan</author>
</authors>
<title>Handcrafted versus Machine-learned Inflectional Rules: the Euroling-SiteSeeker Stemmer and CST&apos;s Lemmatiser,</title>
<date>2006</date>
<booktitle>in Proceedings of the International Conference on Language Resources and Evaluation, LREC</booktitle>
<contexts>
<context position="9964" citStr="Dalianis and Jongejan 2006" startWordPosition="1635" endWordPosition="1639">ic process to create lemmatization rules is described in the following sections. By reserving a small part of the available training data for testing it is possible to quite accurately estimate the probability that the lemmatizer would produce the right lemma given any unknown word belonging to the language, even without requiring that the user masters the language (Kohavi 1995). On the downside, letting a program construct lemmatization rules requires an extended list of full form – lemma pairs that the program can exercise on – at least tens of thousands and possibly over a million entries (Dalianis and Jongejan 2006). 3.4 Criteria for success The main challenge for the training algorithm is that it must produce rules that accurately lemmatize OOV words. This requirement translates to two opposing tendencies during training. On the one hand we must trust rules with a wide basis of training examples more than rules with a small basis, which favours rules with patterns that fit many words. On the other hand we have the incompatible preference for cautious rules with rather specific patterns, because these must be better at avoiding erroneous rule applications than rules with generous patterns. The envisaged </context>
<context position="5901" citStr="Dalianis &amp; Jongejan 2006" startWordPosition="945" endWordPosition="948">e Porter stemmer for English (Porter 1980) or the Euroling SiteSeeker stemmer for Swedish, (Carlberger et al. 2001). Jongejan &amp; Haltrup (2005) constructed a trainable lemmatizer for the lexicographical task of finding lemmas outside the existing dictionary, bootstrapping from a training set of full form – lemma pairs extracted from the existing dictionary. This lemmatizer looks only at the suffix part of the word. Its performance was compared with a stemmer using hand crafted stemming rules, the Euroling SiteSeeker stemmer for Swedish, Danish and Norwegian, and also with a stemmer for Greek, (Dalianis &amp; Jongejan 2006). The results showed that lemmatizer was as good as the stemmer for Swedish, slightly better for Danish and Norwegian but worse for Greek. These results are very dependent on the quality (errors, size) and complexity (diacritics, capitals) of the training data. In the current work we have used Jongejan &amp; Haltrup’s lemmatizer as a reference, referring to it as the ‘suffix lemmatizer’. 3 Delineation 3.1 Why affix rules? German and Dutch need more advanced methods than suffix replacement since their affixing of words (inflection of words) can include both prefixing, infixing and suffixing. Theref</context>
</contexts>
<marker>Dalianis, Jongejan, 2006</marker>
<rawString>Hercules Dalianis and Bart Jongejan 2006. Handcrafted versus Machine-learned Inflectional Rules: the Euroling-SiteSeeker Stemmer and CST&apos;s Lemmatiser, in Proceedings of the International Conference on Language Resources and Evaluation, LREC 2006.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F Çuna Ekmekçioglu</author>
<author>Mikael F Lynch</author>
<author>Peter Willett</author>
</authors>
<title>Stemming and N-gram matching for term conflation in Turkish texts.</title>
<date>1996</date>
<journal>Information Research,</journal>
<volume>7</volume>
<issue>1</issue>
<pages>2--6</pages>
<contexts>
<context position="2942" citStr="Ekmekçioglu et al. (1996)" startWordPosition="472" endWordPosition="476">up’s stem. The most famous stemmer is the Porter Stemmer for English (Porter 1980). This stemmer removes around 60 different suffixes, using rewriting rules in two steps. The paper is structured as follows: section 2 discusses related work, section 3 explains what the new algorithm is supposed to do, section 4 describes some details of the new algorithm, section 5 evaluates the results, conclusions are drawn in section 6, and finally in section 7 we mention plans for further tests and improvements. 2 Related work There have been some attempts in creating stemmers or lemmatizers automatically. Ekmekçioglu et al. (1996) have used N-gram matching for Turkish that gave slightly better results than regular rule based stemming. Theron and Cloete (1997) learned two-level rules for English, Xhosa and Afrikaans, but only single character insertions, replacements and additions were allowed. Oard et al. (2001) used a language independent stemming technique in a dictionary based cross language information retrieval experiment for German, French and Italian where English was the search language. A four stage backoff strategy for improving recall was intro145 Proceedings of the 47th Annual Meeting of the ACL and the 4th</context>
</contexts>
<marker>Ekmekçioglu, Lynch, Willett, 1996</marker>
<rawString>F. Çuna Ekmekçioglu, Mikael F. Lynch, and Peter Willett. 1996. Stemming and N-gram matching for term conflation in Turkish texts. Information Research, 7(1) pp 2-6.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Niklas Hedlund</author>
</authors>
<title>Automatic construction of stemming rules,</title>
<date>2001</date>
<location>Master Thesis, NADA-KTH, Stockholm, TRITA-NA-E0194.</location>
<contexts>
<context position="5084" citStr="Hedlund (2001)" startWordPosition="818" endWordPosition="819">004) presented results for a system using Ripple Down Rules (RDR) to generate lemmatization rules for Slovene, achieving up to 77 percent accuracy. Matjaž et al. (2007) present an RDR system producing efficient suffix based lemmatizers for 14 languages, three of which (English, German and Slovene) our algorithm also has been tested with. Stempel (Białecki 2004) is a stemmer for Polish that is trained on Polish full form – lemma pairs. When tested with inflected out-ofvocabulary (OOV) words Stempel produces 95.4 percent correct stems, of which about 81 percent also happen to be correct lemmas. Hedlund (2001) used two different approaches to automatically find stemming rules from a corpus, for both Swedish and English. Unfortunately neither of these approaches did beat the hand crafted rules in the Porter stemmer for English (Porter 1980) or the Euroling SiteSeeker stemmer for Swedish, (Carlberger et al. 2001). Jongejan &amp; Haltrup (2005) constructed a trainable lemmatizer for the lexicographical task of finding lemmas outside the existing dictionary, bootstrapping from a training set of full form – lemma pairs extracted from the existing dictionary. This lemmatizer looks only at the suffix part of </context>
</contexts>
<marker>Hedlund, 2001</marker>
<rawString>Niklas Hedlund 2001. Automatic construction of stemming rules, Master Thesis, NADA-KTH, Stockholm, TRITA-NA-E0194.</rawString>
</citation>
<citation valid="false">
<title>IFD: Icelandic Centre for Language Technology,</title>
<note>http://tungutaekni.is/researchsystems/rannsoknir_1 2en.html</note>
<marker></marker>
<rawString>IFD: Icelandic Centre for Language Technology, http://tungutaekni.is/researchsystems/rannsoknir_1 2en.html</rawString>
</citation>
<citation valid="true">
<authors>
<author>Bart Jongejan</author>
<author>Dorte Haltrup</author>
</authors>
<title>The CST Lemmatiser.</title>
<date>2005</date>
<volume>2</volume>
<institution>Center for Sprogteknologi, University of Copenhagen</institution>
<note>http://cst.dk/online/lemmatiser/cstlemma.pdf</note>
<contexts>
<context position="5418" citStr="Jongejan &amp; Haltrup (2005)" startWordPosition="869" endWordPosition="872">een tested with. Stempel (Białecki 2004) is a stemmer for Polish that is trained on Polish full form – lemma pairs. When tested with inflected out-ofvocabulary (OOV) words Stempel produces 95.4 percent correct stems, of which about 81 percent also happen to be correct lemmas. Hedlund (2001) used two different approaches to automatically find stemming rules from a corpus, for both Swedish and English. Unfortunately neither of these approaches did beat the hand crafted rules in the Porter stemmer for English (Porter 1980) or the Euroling SiteSeeker stemmer for Swedish, (Carlberger et al. 2001). Jongejan &amp; Haltrup (2005) constructed a trainable lemmatizer for the lexicographical task of finding lemmas outside the existing dictionary, bootstrapping from a training set of full form – lemma pairs extracted from the existing dictionary. This lemmatizer looks only at the suffix part of the word. Its performance was compared with a stemmer using hand crafted stemming rules, the Euroling SiteSeeker stemmer for Swedish, Danish and Norwegian, and also with a stemmer for Greek, (Dalianis &amp; Jongejan 2006). The results showed that lemmatizer was as good as the stemmer for Swedish, slightly better for Danish and Norwegian</context>
</contexts>
<marker>Jongejan, Haltrup, 2005</marker>
<rawString>Bart Jongejan and Dorte Haltrup. 2005. The CST Lemmatiser. Center for Sprogteknologi, University of Copenhagen version 2.7 (August, 23 2005) http://cst.dk/online/lemmatiser/cstlemma.pdf</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jakub Kanis</author>
<author>Ludek Müller</author>
</authors>
<date>2005</date>
<booktitle>Automatic Lemmatizer Construction with Focus on OOV Words Lemmatization in Text, Speech and Dialogue, Lecture Notes in Computer Science,</booktitle>
<pages>132--139</pages>
<location>Berlin / Heidelberg,</location>
<contexts>
<context position="4251" citStr="Kanis &amp; Müller (2005)" startWordPosition="682" endWordPosition="685">AFNLP duced. The system worked fine for French but not so well for Italian and German. Majumder et al. (2007) describe a statistical stemmer, YASS (Yet Another Suffix Stripper), mainly for Bengali and French, but they propose it also for Hindi and Gujarati. The method finds clusters of similar words in a corpus. The clusters are called stems. The method works best for languages that are basically suffix based. For Bengali precision was 39.3 percent better than without stemming, though no absolute numbers were reported for precision. The system was trained on a corpus containing 301 562 words. Kanis &amp; Müller (2005) used an automatic technique called OOV Words Lemmatization to train their lemmatizer on Czech, Finnish and English data. Their algorithm uses two pattern tables to handle suffixes as well as prefixes. Plisson et al. (2004) presented results for a system using Ripple Down Rules (RDR) to generate lemmatization rules for Slovene, achieving up to 77 percent accuracy. Matjaž et al. (2007) present an RDR system producing efficient suffix based lemmatizers for 14 languages, three of which (English, German and Slovene) our algorithm also has been tested with. Stempel (Białecki 2004) is a stemmer for </context>
</contexts>
<marker>Kanis, Müller, 2005</marker>
<rawString>Jakub Kanis and Ludek Müller. 2005. Automatic Lemmatizer Construction with Focus on OOV Words Lemmatization in Text, Speech and Dialogue, Lecture Notes in Computer Science, Berlin / Heidelberg, pp 132-139</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ron Kohavi</author>
</authors>
<title>A study of cross-validation and bootstrap for accuracy estimation and model selection.</title>
<date>1995</date>
<booktitle>Proceedings of the Fourteenth International Joint Conference on Artificial Intelligence</booktitle>
<volume>2</volume>
<issue>12</issue>
<pages>1137--1143</pages>
<publisher>Morgan Kaufmann,</publisher>
<location>San Mateo.</location>
<contexts>
<context position="9718" citStr="Kohavi 1995" startWordPosition="1595" endWordPosition="1596"> morphemes one by one. This is an iterative process and therefore the lemmatizer discussed in this paper, which applies only one rule per word, is not an obvious choice for agglutinated languages. 3.3 Supervised training An automatic process to create lemmatization rules is described in the following sections. By reserving a small part of the available training data for testing it is possible to quite accurately estimate the probability that the lemmatizer would produce the right lemma given any unknown word belonging to the language, even without requiring that the user masters the language (Kohavi 1995). On the downside, letting a program construct lemmatization rules requires an extended list of full form – lemma pairs that the program can exercise on – at least tens of thousands and possibly over a million entries (Dalianis and Jongejan 2006). 3.4 Criteria for success The main challenge for the training algorithm is that it must produce rules that accurately lemmatize OOV words. This requirement translates to two opposing tendencies during training. On the one hand we must trust rules with a wide basis of training examples more than rules with a small basis, which favours rules with patter</context>
</contexts>
<marker>Kohavi, 1995</marker>
<rawString>Ron Kohavi. 1995. A study of cross-validation and bootstrap for accuracy estimation and model selection. Proceedings of the Fourteenth International Joint Conference on Artificial Intelligence 2 (12): 1137–1143, Morgan Kaufmann, San Mateo.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Prasenjit Majumder</author>
<author>Mandar Mitra</author>
<author>Swapan K Parui</author>
<author>Gobinda Kole</author>
<author>Pabitra Mitra</author>
<author>Kalyankumar Datta</author>
</authors>
<title>YASS: Yet another suffix stripper.</title>
<date>2007</date>
<journal>ACM Transactions on Information Systems , Volume</journal>
<volume>25</volume>
<contexts>
<context position="3739" citStr="Majumder et al. (2007)" startWordPosition="599" endWordPosition="602">and Afrikaans, but only single character insertions, replacements and additions were allowed. Oard et al. (2001) used a language independent stemming technique in a dictionary based cross language information retrieval experiment for German, French and Italian where English was the search language. A four stage backoff strategy for improving recall was intro145 Proceedings of the 47th Annual Meeting of the ACL and the 4th IJCNLP of the AFNLP, pages 145–153, Suntec, Singapore, 2-7 August 2009. c�2009 ACL and AFNLP duced. The system worked fine for French but not so well for Italian and German. Majumder et al. (2007) describe a statistical stemmer, YASS (Yet Another Suffix Stripper), mainly for Bengali and French, but they propose it also for Hindi and Gujarati. The method finds clusters of similar words in a corpus. The clusters are called stems. The method works best for languages that are basically suffix based. For Bengali precision was 39.3 percent better than without stemming, though no absolute numbers were reported for precision. The system was trained on a corpus containing 301 562 words. Kanis &amp; Müller (2005) used an automatic technique called OOV Words Lemmatization to train their lemmatizer on</context>
</contexts>
<marker>Majumder, Mitra, Parui, Kole, Mitra, Datta, 2007</marker>
<rawString>Prasenjit Majumder, Mandar Mitra, Swapan K. Parui, Gobinda Kole, Pabitra Mitra, and Kalyankumar Datta. 2007. YASS: Yet another suffix stripper. ACM Transactions on Information Systems , Volume 25 , Issue 4, October 2007.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Juršič Matjaž</author>
<author>Igor Mozetič</author>
<author>Nada Lavrač</author>
</authors>
<title>Learning ripple down rules for efficient lemmatization</title>
<date>2007</date>
<booktitle>In proceeding of the Conference on Data Mining and Data Warehouses (SiKDD</booktitle>
<location>Ljubljana, Slovenia</location>
<contexts>
<context position="4638" citStr="Matjaž et al. (2007)" startWordPosition="744" endWordPosition="747">e basically suffix based. For Bengali precision was 39.3 percent better than without stemming, though no absolute numbers were reported for precision. The system was trained on a corpus containing 301 562 words. Kanis &amp; Müller (2005) used an automatic technique called OOV Words Lemmatization to train their lemmatizer on Czech, Finnish and English data. Their algorithm uses two pattern tables to handle suffixes as well as prefixes. Plisson et al. (2004) presented results for a system using Ripple Down Rules (RDR) to generate lemmatization rules for Slovene, achieving up to 77 percent accuracy. Matjaž et al. (2007) present an RDR system producing efficient suffix based lemmatizers for 14 languages, three of which (English, German and Slovene) our algorithm also has been tested with. Stempel (Białecki 2004) is a stemmer for Polish that is trained on Polish full form – lemma pairs. When tested with inflected out-ofvocabulary (OOV) words Stempel produces 95.4 percent correct stems, of which about 81 percent also happen to be correct lemmas. Hedlund (2001) used two different approaches to automatically find stemming rules from a corpus, for both Swedish and English. Unfortunately neither of these approaches</context>
</contexts>
<marker>Matjaž, Mozetič, Lavrač, 2007</marker>
<rawString>Juršič Matjaž, Igor Mozetič, and Nada Lavrač. 2007. Learning ripple down rules for efficient lemmatization In proceeding of the Conference on Data Mining and Data Warehouses (SiKDD 2007), October 12, 2007, Ljubljana, Slovenia</rawString>
</citation>
<citation valid="false">
<note>Morfologik: Polish morphological analyzer http://mac.softpedia.com/get/WordProcessing/Morfologik.shtml</note>
<marker></marker>
<rawString>Morfologik: Polish morphological analyzer http://mac.softpedia.com/get/WordProcessing/Morfologik.shtml</rawString>
</citation>
<citation valid="true">
<authors>
<author>Douglas W Oard</author>
<author>Gina-Anne Levow</author>
<author>Clara I Cabezas</author>
</authors>
<title>CLEF experiments at Maryland: Statistical stemming and backoff translation.</title>
<date>2001</date>
<booktitle>In Cross-language information retrieval and evaluation: Proceeding of the Clef</booktitle>
<pages>176--187</pages>
<publisher>Springer Verlag</publisher>
<contexts>
<context position="3229" citStr="Oard et al. (2001)" startWordPosition="515" endWordPosition="518"> to do, section 4 describes some details of the new algorithm, section 5 evaluates the results, conclusions are drawn in section 6, and finally in section 7 we mention plans for further tests and improvements. 2 Related work There have been some attempts in creating stemmers or lemmatizers automatically. Ekmekçioglu et al. (1996) have used N-gram matching for Turkish that gave slightly better results than regular rule based stemming. Theron and Cloete (1997) learned two-level rules for English, Xhosa and Afrikaans, but only single character insertions, replacements and additions were allowed. Oard et al. (2001) used a language independent stemming technique in a dictionary based cross language information retrieval experiment for German, French and Italian where English was the search language. A four stage backoff strategy for improving recall was intro145 Proceedings of the 47th Annual Meeting of the ACL and the 4th IJCNLP of the AFNLP, pages 145–153, Suntec, Singapore, 2-7 August 2009. c�2009 ACL and AFNLP duced. The system worked fine for French but not so well for Italian and German. Majumder et al. (2007) describe a statistical stemmer, YASS (Yet Another Suffix Stripper), mainly for Bengali an</context>
</contexts>
<marker>Oard, Levow, Cabezas, 2001</marker>
<rawString>Douglas W. Oard, Gina-Anne Levow, and Clara I. Cabezas. 2001. CLEF experiments at Maryland: Statistical stemming and backoff translation. In Cross-language information retrieval and evaluation: Proceeding of the Clef 2000 workshops Carol Peters Ed. Springer Verlag pp. 176-187. 2001.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Dimitra Farmakiotou</author>
</authors>
<title>A Greek Morphological Lexicon and its Exploitation by Natural Language Processing Applications.</title>
<date>2003</date>
<booktitle>In Lecture Notes on Computer Science (LNCS), vol.2563, &amp;quot;Advances in Informatics - Post-proceedings of the 8th Panhellenic Conference in Informatics&amp;quot;,</booktitle>
<publisher>Springer Verlag.</publisher>
<marker>Farmakiotou, 2003</marker>
<rawString>Georgios Petasis, Vangelis Karkaletsis , Dimitra Farmakiotou , Ion Androutsopoulos and Constantine D. Spyropoulo. 2003. A Greek Morphological Lexicon and its Exploitation by Natural Language Processing Applications. In Lecture Notes on Computer Science (LNCS), vol.2563, &amp;quot;Advances in Informatics - Post-proceedings of the 8th Panhellenic Conference in Informatics&amp;quot;, Springer Verlag.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Joël Plisson</author>
<author>Nada Lavrač</author>
<author>Dunja Mladenic</author>
</authors>
<title>A rule based approach to word lemmatization,</title>
<date>2004</date>
<booktitle>Proceedings of the 7th International Multiconference Information Society, IS-2004, Institut Jozef Stefan,</booktitle>
<pages>83--6</pages>
<location>Ljubljana,</location>
<contexts>
<context position="4474" citStr="Plisson et al. (2004)" startWordPosition="717" endWordPosition="721">se it also for Hindi and Gujarati. The method finds clusters of similar words in a corpus. The clusters are called stems. The method works best for languages that are basically suffix based. For Bengali precision was 39.3 percent better than without stemming, though no absolute numbers were reported for precision. The system was trained on a corpus containing 301 562 words. Kanis &amp; Müller (2005) used an automatic technique called OOV Words Lemmatization to train their lemmatizer on Czech, Finnish and English data. Their algorithm uses two pattern tables to handle suffixes as well as prefixes. Plisson et al. (2004) presented results for a system using Ripple Down Rules (RDR) to generate lemmatization rules for Slovene, achieving up to 77 percent accuracy. Matjaž et al. (2007) present an RDR system producing efficient suffix based lemmatizers for 14 languages, three of which (English, German and Slovene) our algorithm also has been tested with. Stempel (Białecki 2004) is a stemmer for Polish that is trained on Polish full form – lemma pairs. When tested with inflected out-ofvocabulary (OOV) words Stempel produces 95.4 percent correct stems, of which about 81 percent also happen to be correct lemmas. Hedl</context>
</contexts>
<marker>Plisson, Lavrač, Mladenic, 2004</marker>
<rawString>Joël Plisson, Nada Lavrač, and Dunja Mladenic. 2004, A rule based approach to word lemmatization, Proceedings of the 7th International Multiconference Information Society, IS-2004, Institut Jozef Stefan, Ljubljana, pp.83-6.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Martin F Porter</author>
</authors>
<title>An algorithm for suffix stripping.</title>
<date>1980</date>
<journal>Program,</journal>
<volume>14</volume>
<pages>130--130</pages>
<contexts>
<context position="2399" citStr="Porter 1980" startWordPosition="384" endWordPosition="385">he dictionary look-up form (lemma) of the word. A trivial way to do this is by dictionary look-up. More advanced systems use hand crafted or automatically generated transformation rules that look at the surface form of the word and attempt to produce the correct base form by replacing all or parts of the word. Stemming conflates a word to its stem. A stem does not have to be the lemma of the word, but can be any trait that is shared between a group of words, so that even the group membership itself can be regarded as the group’s stem. The most famous stemmer is the Porter Stemmer for English (Porter 1980). This stemmer removes around 60 different suffixes, using rewriting rules in two steps. The paper is structured as follows: section 2 discusses related work, section 3 explains what the new algorithm is supposed to do, section 4 describes some details of the new algorithm, section 5 evaluates the results, conclusions are drawn in section 6, and finally in section 7 we mention plans for further tests and improvements. 2 Related work There have been some attempts in creating stemmers or lemmatizers automatically. Ekmekçioglu et al. (1996) have used N-gram matching for Turkish that gave slightly</context>
<context position="5318" citStr="Porter 1980" startWordPosition="855" endWordPosition="856">for 14 languages, three of which (English, German and Slovene) our algorithm also has been tested with. Stempel (Białecki 2004) is a stemmer for Polish that is trained on Polish full form – lemma pairs. When tested with inflected out-ofvocabulary (OOV) words Stempel produces 95.4 percent correct stems, of which about 81 percent also happen to be correct lemmas. Hedlund (2001) used two different approaches to automatically find stemming rules from a corpus, for both Swedish and English. Unfortunately neither of these approaches did beat the hand crafted rules in the Porter stemmer for English (Porter 1980) or the Euroling SiteSeeker stemmer for Swedish, (Carlberger et al. 2001). Jongejan &amp; Haltrup (2005) constructed a trainable lemmatizer for the lexicographical task of finding lemmas outside the existing dictionary, bootstrapping from a training set of full form – lemma pairs extracted from the existing dictionary. This lemmatizer looks only at the suffix part of the word. Its performance was compared with a stemmer using hand crafted stemming rules, the Euroling SiteSeeker stemmer for Swedish, Danish and Norwegian, and also with a stemmer for Greek, (Dalianis &amp; Jongejan 2006). The results sho</context>
</contexts>
<marker>Porter, 1980</marker>
<rawString>Martin F. Porter 1980. An algorithm for suffix stripping. Program, vol 14, no 3, pp 130-130.</rawString>
</citation>
<citation valid="true">
<authors>
<author>John W Ratcliff</author>
<author>David Metzener</author>
</authors>
<date>1988</date>
<journal>Pattern Matching: The Gestalt Approach, Dr. Dobb&apos;s Journal,</journal>
<pages>46</pages>
<contexts>
<context position="12390" citStr="Ratcliff &amp; Metzener 1988" startWordPosition="2054" endWordPosition="2057">training process terminates when the full forms in all pairs in the training set are transformed to their corresponding lemmas. After training, the data structure of rules is made permanent and can be consulted by a lemmatizer. The lemmatizer must elect and fire rules in the same way as the training algorithm, so that all words from the training set are lemmatized correctly. It may however fail to produce the correct lemmas for words that were not in the training set – the OOV words. 147 4.2 Internal structure of rules: prime and derived rules During training the Ratcliff/Obershelp algorithm (Ratcliff &amp; Metzener 1988) is used to find the longest non-overlapping similar parts in a given full form – lemma pair. For example, in the pair afgevraagd -. afvragen the longest common substring is vra, followed by af and g. These similar parts are replaced with wildcards and placeholders: *ge*a*d -. ***en Now we have the prime rule for the training pair, the least specific rule necessary to lemmatize the word correctly. Rules with more specific patterns – derived rules – can be created by adding characters and by removing or adding wildcards. A rule that is derived from another rule (derived or prime) is more specif</context>
</contexts>
<marker>Ratcliff, Metzener, 1988</marker>
<rawString>John W. Ratcliff and David Metzener, 1988. Pattern Matching: The Gestalt Approach, Dr. Dobb&apos;s Journal, page 46, July 1988.</rawString>
</citation>
<citation valid="true">
<authors>
<author>SCARRIE</author>
</authors>
<date>2009</date>
<booktitle>Scandinavian Proofreading Tools http://ling.uib.no/~desmedt/scarrie/ STO: http://cst.ku.dk/sto_ordbase/ SUC</booktitle>
<location>Stockholm Umeå</location>
<note>corpus, http://www.ling.su.se/staff/sofia/suc/suc.html</note>
<marker>SCARRIE, 2009</marker>
<rawString>SCARRIE 2009. Scandinavian Proofreading Tools http://ling.uib.no/~desmedt/scarrie/ STO: http://cst.ku.dk/sto_ordbase/ SUC 2009. Stockholm Umeå corpus, http://www.ling.su.se/staff/sofia/suc/suc.html</rawString>
</citation>
<citation valid="true">
<authors>
<author>Pieter Theron</author>
<author>Ian Cloete</author>
</authors>
<title>Automatic acquisition of two-level morphological rules,</title>
<date>1997</date>
<booktitle>Proceedings of the fifth conference on Applied natural language processing,</booktitle>
<pages>103--110</pages>
<location>Washington, DC.</location>
<contexts>
<context position="3073" citStr="Theron and Cloete (1997)" startWordPosition="493" endWordPosition="496">s, using rewriting rules in two steps. The paper is structured as follows: section 2 discusses related work, section 3 explains what the new algorithm is supposed to do, section 4 describes some details of the new algorithm, section 5 evaluates the results, conclusions are drawn in section 6, and finally in section 7 we mention plans for further tests and improvements. 2 Related work There have been some attempts in creating stemmers or lemmatizers automatically. Ekmekçioglu et al. (1996) have used N-gram matching for Turkish that gave slightly better results than regular rule based stemming. Theron and Cloete (1997) learned two-level rules for English, Xhosa and Afrikaans, but only single character insertions, replacements and additions were allowed. Oard et al. (2001) used a language independent stemming technique in a dictionary based cross language information retrieval experiment for German, French and Italian where English was the search language. A four stage backoff strategy for improving recall was intro145 Proceedings of the 47th Annual Meeting of the ACL and the 4th IJCNLP of the AFNLP, pages 145–153, Suntec, Singapore, 2-7 August 2009. c�2009 ACL and AFNLP duced. The system worked fine for Fre</context>
</contexts>
<marker>Theron, Cloete, 1997</marker>
<rawString>Pieter Theron and Ian Cloete 1997 Automatic acquisition of two-level morphological rules, Proceedings of the fifth conference on Applied natural language processing, p.103-110, March 31-April 03, 1997, Washington, DC.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ellen M Voorhees</author>
</authors>
<title>Variations in relevance judgments and the measurement of retrieval effectiveness,</title>
<date>2000</date>
<journal>J. of Information Processing and Management</journal>
<volume>36</volume>
<pages>697--716</pages>
<contexts>
<context position="21853" citStr="Voorhees (2000)" startWordPosition="3719" endWordPosition="3720">e affix algorithm over the suffix algorithm, we decided to factor out ambiguity. We simply chose the lemma that comes first alphabetically and discarded the other lemmas from the available data. The evaluation was carried out by dividing the available material in training data and test data in seven different ratios, setting aside between 1.54% and 98.56% as training data and the remainder as OOV test data. (See section 7). To keep the sample standard deviation s for the accuracy below an acceptable level we used the evaluation method repeated random subsampling validation that is proposed in Voorhees (2000) and Bouckaert &amp; Frank (2000). We repeated the training and evaluation for each ratio with several randomly chosen sets, up to 17 times for the smallest and largest ratios, because these ratios lead to relatively small training sets and test sets respectively. The same procedure was followed for the suffix lemmatizer, using the same training and test sets. Table 3 shows the results for the largest training sets. For some languages lemmatization accuracy for OOV words improved by deleting rules that are based on very few examples from the training data. This pruning was done after the training </context>
</contexts>
<marker>Voorhees, 2000</marker>
<rawString>Ellen M. Voorhees. 2000. Variations in relevance judgments and the measurement of retrieval effectiveness, J. of Information Processing and Management 36 (2000) pp 697-716</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>