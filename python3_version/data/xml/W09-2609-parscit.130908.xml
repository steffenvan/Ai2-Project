<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.006714">
<title confidence="0.99858">
A generalized method for iterative error mining in parsing results
</title>
<author confidence="0.996728">
Dani¨el de Kok Jianqiang Ma Gertjan van Noord
</author>
<affiliation confidence="0.999848">
University of Groningen University of Groningen University of Groningen
</affiliation>
<email confidence="0.976816">
d.j.a.de.kok@rug.nl j.ma@student.rug.nl g.j.m.van.noord@rug.nl
</email>
<sectionHeader confidence="0.997154" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999966571428571">
Error mining is a useful technique for
identifying forms that cause incomplete
parses of sentences. We extend the iter-
ative method of Sagot and de la Clerg-
erie (2006) to treat n-grams of an arbi-
trary length. An inherent problem of in-
corporating longer n-grams is data sparse-
ness. Our new method takes sparseness
into account, producing n-grams that are
as long as necessary to identify problem-
atic forms, but not longer.
Not every cause for parsing errors can be
captured effectively by looking at word
n-grams. We report on an algorithm for
building more general patterns for min-
ing, consisting of words and part of speech
tags.
It is not easy to evaluate the various er-
ror mining techniques. We propose a new
evaluation metric which will enable us to
compare different error miners.
</bodyText>
<sectionHeader confidence="0.999471" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999960230769231">
In the past decade wide-coverage grammars and
parsers have been developed for various lan-
guages, such as the Alpino parser and grammar
(Bouma et al., 2001) for Dutch and the English
Resource Grammar (Copestake and Flickinger,
2000). Such grammars account for a large num-
ber of grammatical and lexical phenomena, and
achieve high accuracies. Still, they are usually
tailored to general domain texts and fail to reach
the same accuracy for domain-specific texts, due
to missing lexicon entries, fixed expressions, and
grammatical constructs. When parsing new texts
there are usually two types of parsing errors:
</bodyText>
<listItem confidence="0.932699625">
• The parser returns an incorrect parse. While
the parser may have constructed the correct
parse, the disambiguation model chose an in-
correct parse.
• The parser can not find an analysis that spans
the full sentence. If that sentence is allowed
in the language, the grammar or lexicon is in-
complete.
</listItem>
<bodyText confidence="0.9998684">
While the first type of errors can be alleviated
by improving the disambiguation model, the sec-
ond type of problems requires extension of the
grammar or lexicon. Finding incomplete descrip-
tions by hand can become a tedious task once a
grammar has wide coverage. Error mining tech-
niques aim to find problematic words or n-grams
automatically, allowing the grammar developer to
focus on frequent and highly suspicious forms
first.
</bodyText>
<sectionHeader confidence="0.998534" genericHeader="method">
2 Previous work
</sectionHeader>
<bodyText confidence="0.999702923076923">
In the past, two major error mining techniques
have been developed by Van Noord (2004) and
Sagot and de la Clergerie (2006). In this paper we
propose a generalized error miner that combines
the strengths of these methods. Both methods fol-
low the same basic principle: first, a large (unan-
notated) corpus is parsed. After parsing, the sen-
tences can be split up in a list of parsable and a list
of unparsable sentences. Words or n-grams that
occur in the list of unparsable sentences, but that
do not occur in the list of parsable sentences have
a high suspicion of being the cause of the parsing
error.
</bodyText>
<subsectionHeader confidence="0.996287">
2.1 Suspicion as a ratio
</subsectionHeader>
<bodyText confidence="0.999675">
Van Noord (2004) defines the suspicion of a word
as a ratio:
</bodyText>
<equation confidence="0.985729333333333">
C(w|error)
S(w) = (1)
C(w)
</equation>
<bodyText confidence="0.913967">
where C(w) is the number of occurrences of
word w in all sentences, and C(w|error) is the
</bodyText>
<page confidence="0.985756">
71
</page>
<note confidence="0.9989865">
Proceedings of the 2009 Workshop on Grammar Engineering Across Frameworks, ACL-IJCNLP 2009, pages 71–79,
Suntec, Singapore, 6 August 2009. c�2009 ACL and AFNLP
</note>
<bodyText confidence="0.999917888888889">
number of occurrences of w in unparsable sen-
tences. Of course, it is often useful to look at n-
grams as well. For instance, Van Noord (2004)
gives an example where the word via had a low
suspicion after parsing a corpus with the Dutch
Alpino parser, while the Dutch expression via via
(via a complex route) was unparsable.
To account for such phenomena, the notion of
suspicion is extended to n-grams:
</bodyText>
<equation confidence="0.995338666666667">
C(wi..wj|error)
S(wi..wj) = (2)
C(wi..wj)
</equation>
<bodyText confidence="0.993492">
Where a longer sequence wh...wi...wj...wk is
only considered if its suspicion is higher than each
of its substrings:
</bodyText>
<equation confidence="0.993463">
S(wh...wi...wj...wk) &gt; S(wi...wj) (3)
</equation>
<bodyText confidence="0.9997619">
While this method works well for forms that are
unambiguously suspicious, it also gives forms that
just happened to occur often in unparsable sen-
tences by ’bad luck’ a high suspicion. If the occur-
rences in unparsable sentences were accompanied
by unambiguously suspicious forms, there is even
more reason to believe that the form is not prob-
lematic. However, in such cases this error mining
method will still assign a high suspicion to such
forms.
</bodyText>
<subsectionHeader confidence="0.99771">
2.2 Iterative error mining
</subsectionHeader>
<bodyText confidence="0.9997814">
The error mining method described by Sagot and
de la Clergerie (2006) alleviates the problem of
‘accidentally suspicious’ forms. It does so by
taking the following characteristics of suspicious
forms into account:
</bodyText>
<listItem confidence="0.999021">
• If a form occurs within parsable sentences, it
becomes less likely that the form is the cause
of a parsing error.
• The suspicion of a form should depend on the
suspicions of other forms in the unparsable
sentences in which it occurs.
• A form observed in a shorter sentence is ini-
tially more suspicious than a form observed
in a longer sentence.
</listItem>
<bodyText confidence="0.995204571428571">
To be able to handle the suspicion of a form
within its context, this method introduces the no-
tion of observation suspicion, which is the suspi-
cion of a form within a given sentence. The suspi-
cion of a form, outside the context of a sentence,
is then defined to be the average of all observation
suspicions:
</bodyText>
<equation confidence="0.997211333333333">
1
Sf =
O
</equation>
<bodyText confidence="0.99665225">
Here Of is the set of all observations of the form
f, oi,j is the jth form of the ith sentence, and Si,j
is the observation suspicion of oi,j. The observa-
tion suspicions themselves are dependent on the
form suspicions, making the method an iterative
process. The suspicion of an observation is the
suspicion of its form, normalized by suspicions of
other forms occurring within the same sentence:
</bodyText>
<equation confidence="0.998693">
S(n+1)
S��+1) = error(si) F(oi,j)n+1 ( )
5
�1&lt;j&lt;|Si |SF(oi,j)
</equation>
<bodyText confidence="0.993903">
Here error(si) is the sentence error rate, which
is normally set to 0 for parsable sentences and 1
for unparsable sentences. SF(oi,j) is the suspicion
of the form of observation oi,j.
To accommodate the iterative process, we will
have to redefine the form suspicion to be depen-
dent on the observation suspicions of the previous
cycle:
</bodyText>
<equation confidence="0.979694">
S(n+1) = 1
</equation>
<bodyText confidence="0.997092727272727">
The mining is stopped when the process reaches
a fixed point where suspicions have stabilized.
This method solves the ‘suspicion by accident’
problem of ratio-based error mining. However, the
authors of the paper have only used this method to
mine on unigrams and bigrams. They note that
they have tried mining with longer n-grams, but
encountered data sparseness problems. Their pa-
per does not describe criteria to determine when to
use unigrams and when to use bigrams to represent
forms within a sentence.
</bodyText>
<sectionHeader confidence="0.998405" genericHeader="method">
3 N-gram expansion
</sectionHeader>
<subsectionHeader confidence="0.99965">
3.1 Inclusion of n-grams
</subsectionHeader>
<bodyText confidence="0.9979845">
While the iterative miner described by Sagot and
de la Clergerie (2006) only mines on unigrams and
</bodyText>
<equation confidence="0.9939055">
f  |Si,j (4)
oi
,jEOf
E S( j)
f (6)
oft oi,jEOf
</equation>
<bodyText confidence="0.9962115">
Since there is a recursive dependence between
the suspicions and the observation suspicions,
starting and stopping conditions need to be defined
for this cyclic process. The observation suspicions
are initialized by uniformly distributing suspicion
over observed forms within a sentence:
</bodyText>
<equation confidence="0.997909666666667">
S(0)= error(si) (7)
i,j|S
i|
</equation>
<page confidence="0.977286">
72
</page>
<bodyText confidence="0.999911333333333">
bigrams, our prior experience with the miner de-
scribed by Van Noord (2004) has shown that in-
cluding longer n-grams in the mining process can
capture many additional phenomena. To give one
example: the words de (the), eerste (first), and
beste (best) had very low suspicions during er-
ror mining, while the trigram eerste de beste had
a very high suspicion. This trigram occurred in
the expression de eerste de beste (the first you can
find). While the individual words within this ex-
pression were described by the lexicon, this multi-
word expression was not.
</bodyText>
<subsectionHeader confidence="0.999945">
3.2 Suspicion sharing
</subsectionHeader>
<bodyText confidence="0.9999704">
It may seem to be attractive to include all n-grams
within a sentence in the mining process. However,
this is problematic due to suspicion sharing. For
instance, consider the trigram w1, w2, w3 in which
w2 is the cause of a parsing error. In this case,
the bigrams w1, w2 and w2, w3 will become sus-
picious, as well as the trigram w1, w2, w3. Since
there will be multiple very suspicious forms within
the same sentence the unigram w2 will have no op-
portunity to manifest itself.
A more practical consideration is that the num-
ber of forms within a sentence grows at such a rate
(n + (n − 1)... + 1) that error mining becomes
unfeasible for large corpora, both in time and in
space.
</bodyText>
<subsectionHeader confidence="0.997654">
3.3 Expansion method
</subsectionHeader>
<bodyText confidence="0.999847105263157">
To avoid suspicion sharing we have devised a
method for adding and expanding n-grams when
it is deemed useful. This method iterates through
a sentence of unigrams, and expands unigrams to
longer n-grams when there is evidence that it is
useful. This expansion step is a preprocessor to
the iterative miner, that uses the same iterative al-
gorithm as described by Sagot and De la Clergerie.
Within this preprocessor, suspicion is defined in
the same manner as in Van Noord (2004), as a ra-
tio of occurrences in unparsable sentences and the
total number of occurrences.
The motivation behind this method is that there
can be two expansion scenarios. When we have
the bigram w1, w2, either one of the unigrams can
be problematic or the bigram w1, w2. In the for-
mer case, the bigram w1, w2 will also inherit the
high suspicion of the problematic unigram. In the
latter case, the bigram will have a higher suspicion
than both of its unigrams. Consequently, we want
to expand the unigram w1 to the bigram w1, w2 if
the bigram is more suspicious than both of its un-
igrams. If w1, w2 is equally suspicious as one of
its unigrams, it is not useful to expand to a bigram
since we want to isolate the cause of the parsing
error as much as possible.
The same methodology is followed when we
expand to longer n-grams. Expansion of w1, w2
to the trigram w1, w2, w3 will only be permitted
if w1, w2, w3 is more suspicious than its bigrams.
Since the suspicion of w3 aggregates to w2, w3,
we account for both w3 and w2, w3 in this com-
parison.
The general algorithm is that the expansion to
an n-gram i..j is allowed when 5(i..j) &gt; 5(i..j −
1) and 5(i..j) &gt; 5(i + 1..j). This gives us a sen-
tence that is represented by the n-grams n0..n,
n1..ny, ... n|sz|−1..n|sz|−1.
</bodyText>
<subsectionHeader confidence="0.990913">
3.4 Data sparseness
</subsectionHeader>
<bodyText confidence="0.9999845">
While initial experiments with the expansion al-
gorithm provided promising results, the expansion
algorithm was too eager. This eagerness is caused
by data sparseness. Since longer n-grams occur
less frequently, the suspicion of an n-gram oc-
curring in unparsable sentences goes up with the
length of the n-gram until it reaches its maximum
value. The expansion conditions do not take this
effect into account.
To counter this problem, we have introduced an
expansion factor. This factor depends on the fre-
quency of an n-gram within unparsable sentences
and asymptotically approaches one for higher fre-
quencies. As a result more burden of proof
is inflicted upon the expansion: the longer n-
gram either needs to be relatively frequent, or it
needs to be much more suspicious than its (n-1)-
grams. The expansion conditions are changed to
</bodyText>
<equation confidence="0.999351">
5(i..j) &gt; 5(i..j − 1) · extFactor and 5(i..j) &gt;
5(i + 1..j) · extFactor, where
extFactor = 1 + e−α|Of,unp.,s.ble |(8)
</equation>
<bodyText confidence="0.9973745">
In our experiments α = 1.0 proved to be a good
setting.
</bodyText>
<subsectionHeader confidence="0.955874">
3.5 Pattern expansion
</subsectionHeader>
<bodyText confidence="0.999863142857143">
Previous work on error mining was primarily fo-
cused on the extraction of interesting word n-
grams. However, it could also prove useful to al-
low for patterns consisting of other information
than words, such as part of speech tags or lemmas.
We have done preliminary work on the integra-
tion of part of speech tags during the n-gram ex-
</bodyText>
<page confidence="0.993439">
73
</page>
<bodyText confidence="0.9997789375">
pansion. We use the same methodology as word-
based n-gram expansion, however we also con-
sider expansion with a part of speech tag.
Since we are interested in building patterns that
are as general as possible, we expand the pat-
tern with a part of speech tag if that creates a
more suspicious pattern. Expansion with a word
is attempted if expansion with a part of speech
tag is unsuccessful. E.g., if we attempt to ex-
pand the word bigram w1w2, we first try the tag
expansion w1w2t3. This expansion is allowed
when 5(w1, w2, t3) &gt; 5(w1, w2) · extFactor
and 5(w1, w2, t3) &gt; 5(w2, t3) · extFactor. If
the expansion is not allowed, then expansion to
5(w1, w2, w3) is attempted. As a result, mixed
patterns emerge that are as general as possible.
</bodyText>
<sectionHeader confidence="0.999897" genericHeader="method">
4 Implementation
</sectionHeader>
<subsectionHeader confidence="0.997507">
4.1 Compact representation of data
</subsectionHeader>
<bodyText confidence="0.999970033333333">
To be able to mine large corpora some precau-
tions need to be made. During the n-gram expan-
sion stage, we need quick access to the frequen-
cies of arbitrary length n-grams. Additionally, all
unparsable sentences have to be kept in memory,
since we have to traverse them for n-gram expan-
sion. Ordinary methods for storing n-gram fre-
quencies (such as hash tables) and data will not
suffice for large corpora.
As Van Noord (2004) we used perfect hashing
to restrict memory use, since hash codes are gen-
erally shorter than the average token length. Addi-
tionally, comparisons of numbers are much faster
than comparisons of strings, which speeds up the
n-gram expansion step considerably.
During the n-gram expansion step the miner
calculates ratio-based suspicions of n-grams us-
ing frequencies of an n-gram in parsable and un-
parsable sentences. The n-gram can potentially
have the length of a whole sentence, so it is not
practical to store n-gram ratios in a hash table.
Instead, we compute a suffix array (Manber and
Myers, 1990) for the parsable and unparsable sen-
tences1. A suffix array is an array that contains in-
dices pointing to sequences in the data array, that
are ordered by suffix.
We use suffix arrays differently than Van No-
ord (2004), because our expansion algorithm re-
quires the parsable and unparsable frequencies of
the (n-1)-grams, and the second (n-1)-gram is not
</bodyText>
<footnote confidence="0.9475685">
1We use the suffix sorting algorithm by Peter M. McIlroy
and M. Douglas McIlroy.
</footnote>
<bodyText confidence="0.994110333333333">
(necessarily) adjacent to the n-gram in the suffix
array. As such, we require random access to fre-
quencies of n-grams occurring in the corpus. We
can compute the frequency of any n-gram by look-
ing up its upper and lower bounds in the suffix ar-
ray2, where the difference is the frequency.
</bodyText>
<subsectionHeader confidence="0.994691">
4.2 Determining ratios for pattern expansion
</subsectionHeader>
<bodyText confidence="0.99998596969697">
While suffix arrays provide a compact and rela-
tively fast data structure for looking up n-gram fre-
quencies, they are not usable for pattern expansion
(see section 3.5). Since we need to look up fre-
quencies of every possible combination of repre-
sentations that are used, we would have to create
di suffix arrays to be (theoretically) able to look
up pattern frequencies with the same time com-
plexity, where d is the number of dimensions and
l is the corpus length.
For this reason, we use a different method for
calculating pattern frequencies. First, we build a
hash table for each type of information that can
be used in patterns. A hash table contains an in-
stance of such information as a key (e.g. a specific
word or part of speech tag) and a set of corpus in-
dices where the instance occurred in the corpus as
the value associated with that key. Now we can
look up the frequency of a sequence i..j by calcu-
lating the set intersection of the indices of j and
the indices found for the sequence i..j − 1, after
incrementing the indices of i..j − 1 by one.
The complexity of calculating frequencies fol-
lowing this method is linear, since the set of in-
dices for a given instance can be retrieved with
a O(1) time complexity, while both increment-
ing the set indices and set intersection can be per-
formed in O(n) time. However, n can be very
large: for instance, the start of sentence marker
forms a substantial part of the corpus and is looked
up once for every sentence. In our implementation
we limit the time spent on such patterns by caching
very frequent bigrams in a hash table.
</bodyText>
<subsectionHeader confidence="0.999347">
4.3 Removing low-suspicion forms
</subsectionHeader>
<bodyText confidence="0.999740571428571">
Since normally only one form within a sentence
will be responsible for a parsing error, many forms
will have almost no suspicion at all. However, dur-
ing the mining process, their suspicions will be
recalculated during every cycle. Mining can be
sped up considerably by removing forms that have
a negligible suspicion.
</bodyText>
<footnote confidence="0.995213">
2Since the suffix array is sorted, finding the upper and
lower bounds is a binary search in O(log n) time.
</footnote>
<page confidence="0.998137">
74
</page>
<bodyText confidence="0.999984">
If we do not drop forms, mining of the Dutch
Wikipedia corpus described in section 5.3, with
n-gram expansion and the extension factor en-
abled, resulted in 4.8 million forms with 13.4 mil-
lion form observations in unparsable sentences. If
we mine the same material and drop forms with
a suspicion below 0.001 there were 3.5 million
forms and 4.0 million form observations within
unparsable sentences left at the end of the iterative
mining process.
</bodyText>
<sectionHeader confidence="0.99815" genericHeader="evaluation">
5 Evaluation
</sectionHeader>
<subsectionHeader confidence="0.946585">
5.1 Methodology
</subsectionHeader>
<bodyText confidence="0.999936285714286">
In previous articles, error mining methods have
primarily been evaluated manually. Both Van No-
ord (2004) and Sagot and de la Clergerie (2006)
make a qualitative analysis of highly suspicious
forms. But once one starts experimenting with var-
ious extensions, such as n-gram expansion and ex-
pansion factor functions, it is difficult to qualify
changes through small-scale qualitative analysis.
To be able to evaluate changes to the error
miner, we have supplemented qualitative analysis
with a automatic quantitative evaluation method.
Since error miners are used by grammar engineers
to correct a grammar or lexicon by hand, the eval-
uation metric should model this use case:
</bodyText>
<listItem confidence="0.979059857142857">
• We are interested in seeing problematic forms
that account for errors in a large number of
unparsable sentences first.
• We are only interested in forms that actually
caused the parsing errors. Analysis of forms
that do not, or do not accurately pinpoint ori-
gin of the parsing errors costs a lot of time.
</listItem>
<bodyText confidence="0.851941666666667">
These requirements map respectively to the re-
call and precision metrics from information re-
trieval:
</bodyText>
<equation confidence="0.9932775">
P = |{Sunparsable} ∩ {Sretrieved} |(9)
|{Sretrieved}|
R = |{Sunparsable} ∩ {Sretrieved} |(10)
|{Sunparsable}|
</equation>
<bodyText confidence="0.5789325">
Consequently, we can also calculate the f-score
(van Rijsbergen, 1979):
</bodyText>
<equation confidence="0.999139">
F − score = (1 + β2) · (P · R) (11)
(β2 · P + R)
</equation>
<bodyText confidence="0.999947368421053">
The f-score is often used with β = 1.0 to give
as much weight to precision as recall. In evalu-
ating error mining, this can permit cheating. For
instance, consider an error mining that recalls the
start of sentence marker as the first problematic
form. Such a strategy would instantly give a re-
call of 1.0, and if the coverage of a parser for a
corpus is relatively low, a relatively good initial f-
score will be obtained. Since error mining is often
used in situations where coverage is still low, we
give more bias to precision by using β = 0.5.
We hope to provide more evidence in the future
that this evaluation method indeed correlates with
human evaluation. But in our experience it has the
required characteristics for the evaluation of error
mining. For instance, it is resistant to recalling
of different or overlapping n-grams from the same
sentences, or recalling n-grams that occur often in
both parsable and unparsable sentences.
</bodyText>
<subsectionHeader confidence="0.95946">
5.2 Scoring methods
</subsectionHeader>
<bodyText confidence="0.999193714285714">
After error mining, we can extract a list of forms
and suspicions, and order the forms by their sus-
picion. But normally we are not only interested in
forms that are the most suspicious, but forms that
are suspicious and frequent. Sagot and de la Clerg-
erie (2006) have proposed three scoring methods
that can be used to rank forms:
</bodyText>
<listItem confidence="0.9731892">
• Concentrating on suspicions: Mf = Sf
• Concentrating on most frequent potential er-
rors: Mf = Sf|Of|
• Balancing between these possibilities: Mf =
Sf · ln|Of|
</listItem>
<bodyText confidence="0.9988446">
For our experiments, we have replaced the ob-
servation frequencies of the form (|Of|) by the
frequency of observations within unparsable sen-
tences (|{Of,unparsable}|). This avoids assigning a
high score to very frequent unsuspicious forms.
</bodyText>
<subsectionHeader confidence="0.986139">
5.3 Material
</subsectionHeader>
<bodyText confidence="0.999714666666667">
In our experiments we have used two corpora that
were parsed with the wide-coverage Alpino parser
and grammar for Dutch:
</bodyText>
<listItem confidence="0.9155716">
• Quantitative evaluation was performed on the
Dutch Wikipedia of August 20083. This cor-
pus consists of 7 million sentences (109 mil-
lion words). For 8.4% of the sentences no full
analysis could be found.
</listItem>
<footnote confidence="0.948326">
3http://ilps.science.uva.nl/WikiXML/
</footnote>
<page confidence="0.998158">
75
</page>
<bodyText confidence="0.927309090909091">
• A qualitative evaluation of the extensions was
performed on the Flemish Mediargus news-
paper corpus (up to May 31, 2007)4. This
corpus consists of 67 million sentences (1.1
billion words). For 9.2% of the sentences no
full analysis could be found.
Flemish is a variation of Dutch written and spo-
ken in Belgium, with a grammar and lexicon that
deviates slightly from standard Dutch. Previously,
the Alpino grammar and lexicon was never specif-
ically modified for parsing Flemish.
</bodyText>
<sectionHeader confidence="0.999987" genericHeader="evaluation">
6 Results
</sectionHeader>
<subsectionHeader confidence="0.995949">
6.1 Iterative error mining
</subsectionHeader>
<bodyText confidence="0.999970823529412">
We have evaluated the different mining methods
with the three scoring functions discussed in sec-
tion 5.2. In the results presented in this section we
only list the results with the scoring function that
performed best for a given error mining method
(section 6.3 provides an overview of the best scor-
ing functions for different mining methods).
Our first interest was if, and how much itera-
tive error mining outperforms error mining with
suspicion as a ratio. To test this, we compared
the method described by Van Noord (2004) and
the iterative error miner of Sagot and de la Clerg-
erie (2006). For the iterative error miner we eval-
uated both on unigrams, and on unigrams and bi-
grams where all unigrams and bigrams are used
(without further selection). Figure 6.1 shows the
f-scores for these miners after N retrieved forms.
</bodyText>
<figure confidence="0.949266">
0 2000 4000 6000 8000 10000
N
</figure>
<figureCaption confidence="0.966668333333333">
Figure 1: F-scores after retrieving N forms for
ratio-based mining, iterative mining on unigrams
and iterative mining on uni- and bigrams.
</figureCaption>
<footnote confidence="0.889801">
4http://www.mediargus.be/
</footnote>
<bodyText confidence="0.999965875">
The unigram iterative miner outperforms the
ratio-based miner during the retrieval of the first
8000 forms. The f-score graph of the iterative
miner on unigrams flattens after retrieving about
4000 forms. At that point unigrams are not spe-
cific enough anymore to pinpoint more sophisti-
cated problems. The iterative miner on uni- and bi-
grams performs better than the ratio-based miner,
even beyond 8000 forms. More importantly, the
curves of the iterative miners are steeper. This is
relevant if we consider that a grammar engineer
will only look at a few thousands of forms. For
instance, the ratio-based miner achieves an f-score
of 0.4 after retrieving 8448 forms, while the iter-
ative miner on uni- and bigrams attains the same
f-score after retrieving 5134 forms.
</bodyText>
<subsectionHeader confidence="0.992584">
6.2 N-gram expansion
</subsectionHeader>
<bodyText confidence="0.999817625">
In our second experiment we have compared the
performance of iterative mining on uni- and bi-
grams with an iterative miner using the n-gram
expansion algorithm described in section 3. Fig-
ure 6.2 shows the result of n-gram expansion com-
pared to mining just uni- and bigrams. Both the
results for expansion with and without use of the
expansion factor are shown.
</bodyText>
<figure confidence="0.6739555">
0 2000 4000 6000 8000 10000
N
</figure>
<figureCaption confidence="0.797665">
Figure 2: F-scores after retrieving N forms for it-
</figureCaption>
<bodyText confidence="0.958606444444445">
erative mining on uni- and bigrams, and iterative
mining using n-gram expansion with and without
using an expansion factor.
We can see that the expansion to longer n-grams
gives worse results than mining on uni- and bi-
grams when data sparseness is not accounted for.
The expansion stage will select forms that may be
accurate, but that are more specific than needed.
As such, the recall per retrieved form is lower on
</bodyText>
<figure confidence="0.994626966666667">
F0.5-Score
0.45
0.35
0.25
0.15
0.05
0.5
0.4
0.3
0.2
0.1
0
ratio
iter.unigrams
iter.uni.bigrams
F0.5-Score
0.45
0.35
0.25
0.15
0.05
0.5
0.4
0.3
0.2
0.1
0
iter.uni.bigram
iter.expansion
iter.expansion.ef
</figure>
<page confidence="0.959068">
76
</page>
<bodyText confidence="0.997341">
average, as can be seen in figure 6.2. But if sparse-
ness is taken into account through the use of the
expansion factor, we achieve higher f-scores than
mining on uni- and bigrams up to the retrieval of
circa five thousand forms. Since a user of an error
mining tool will probably only look at the first few
thousands of forms, this is a welcome improve-
ment.
</bodyText>
<figure confidence="0.9631625">
0 2000 4000 6000 8000 10000
N
</figure>
<figureCaption confidence="0.981118">
Figure 3: Recall after retrieving N forms for it-
</figureCaption>
<bodyText confidence="0.853599">
erative mining on uni- and bigrams, and iterative
mining using n-gram expansion with and without
using an expansion factor.
Among the longer n-grams in the mining results
for the Mediargus corpus, we found many Flemish
idiomatic expressions that were not described in
the Alpino lexicon. For example:
</bodyText>
<listItem confidence="0.995831769230769">
• had er (AMOUNT) voor veil [had
(AMOUNT) for sale]
• (om de muren) van op te lopen [to get terribly
annoyed by]
• Ik durf zeggen dat [I dare to say that]
• op punt stellen [to fix/correct something]
• de daver op het lijf [shocked]
• (op) de tippen (van zijn tenen) [being very
careful]
• ben fier dat [am proud of]
• Nog voor halfweg [still before halfway]
• (om duimen en vingers) van af te likken [de-
licious]
</listItem>
<bodyText confidence="0.9998156">
Since these expressions are longer than bi-
grams, they cannot be captured properly without
using n-gram expansion. We also found longer
n-grams describing valid Dutch phrases that were
not described by the grammar or lexicon.
</bodyText>
<listItem confidence="0.991294333333333">
• Het stond in de sterren geschreven dat [It was
written in the stars that]
• zowat de helft van de [about half of the]
• er zo goed als zeker van dat [almost sure of]
• laat ons hopen dat het/dit lukt [let us hope that
it/this works]
</listItem>
<subsectionHeader confidence="0.967962">
6.3 Scoring methods
</subsectionHeader>
<bodyText confidence="0.999989681818182">
The miners that use n-gram expansion perform
best with the Mf = 5f|Of |function, while the
other miners perform best with the Mf = 5f ·
ln|Of |function. This is not surprising – the it-
erative miners that do not use n-gram expansion
can not make very specific forms and give rela-
tively high scores to forms that happen to occur in
unparsable sentences (since some forms in a sen-
tence will have to take blame, if no specific sus-
picious form is found). If such forms also hap-
pen to be frequent, they may be ranked higher
than some more suspicious infrequent forms. In
the case of the ratio-based miner, there are many
forms that are ‘suspicious by accident’ which may
become highly ranked when they are more fre-
quent than very suspicious, but infrequent forms.
Since the miners with n-gram expansion can find
specific suspicious forms and shift blame to them,
there is less chance of accidentally ranking a form
to highly by directly including the frequency of
observations of that form within unparsable sen-
tences in the scoring function.
</bodyText>
<subsectionHeader confidence="0.983416">
6.4 Pattern expansion
</subsectionHeader>
<bodyText confidence="0.999294076923077">
We have done some preliminary experiments with
pattern expansion, allowing for patterns consisting
of words and part of speech tags. For this exper-
iment we trained a Hidden Markov Model part of
speech tagger on 90% of the Dutch Eindhoven cor-
pus using a small tag set. We then extracted 50000
unparsable and about 495000 parsable sentences
from the Flemish Mediargus corpus. The pattern
expansion preprocessor was then used to find in-
teresting patterns.
We give two patterns that were extracted to give
an impression how patterns can be useful. A fre-
quent pattern was doorheen N (through followed
</bodyText>
<figure confidence="0.997861846153846">
Recall
0.16
0.14
0.12
0.08
0.06
0.04
0.02
0.1
0
iter.uni.bigram
iter.expansion
iter.expansion.ef
</figure>
<page confidence="0.993979">
77
</page>
<bodyText confidence="0.99981785">
by a (proper) noun). In Flemish a sentence such
as We reden met de auto doorheen Frankrijk (lit-
eral: We drove with the car through France) is al-
lowed, while in standard Dutch the particle heen
is separated from the preposition door. Conse-
quently, the same sentence in standard Dutch is We
reden met de auto door Frankrijk heen. Mining
on word n-grams provided hints for this difference
in Flemish through forms such as doorheen Krot-
tegem, doorheen Engeland, doorheen Hawai, and
doorheen Middelkerke, but the pattern provides a
more general description with a higher frequency.
Another pattern that was found is wegens Prep
Adj (because of followed by a preposition and
an adjective). This pattern captures prepositional
modifiers where wegens is the head, and the fol-
lowing words within the constituent form an ar-
gument, such as in the sentence Dat idee werd
snel opgeborgen wegens te duur (literal: That idea
became soon archived because of too expensive).
This pattern provided a more general description
of forms such as wegens te breed (because it is
too wide), wegens te deprimerend (because it is
too depressing), wegens niet rendabel (because it
is not profitable), and wegens te ondraaglijk (be-
cause it is too unbearable).
While instances of both patterns were found us-
ing the word n-gram based miner, patterns consol-
idate different instances. For example, there were
120 forms with a high suspicion containing the
word wegens. If such a form is corrected, the other
examples may still need to be checked to see if a
solution to the parsing problem is comprehensive.
The pattern gives a more general description of the
problem, and as such, most of these 120 forms can
be represented by the pattern wegens Prep Adj.
Since we are still optimizing the pattern ex-
pander to scale to large corpora, we have not per-
formed an automatic evaluation using the Dutch
Wikipedia yet.
</bodyText>
<sectionHeader confidence="0.999584" genericHeader="conclusions">
7 Conclusions
</sectionHeader>
<bodyText confidence="0.999985236842105">
We combined iterative error mining with expan-
sion of forms to n-grams of an arbitrary length,
that are long enough to capture interesting phe-
nomena, but not longer. We dealt with the prob-
lem of data sparseness by introducing an expan-
sion factor that softens when the expanded form is
very frequent.
In addition to the generalization of iterative er-
ror mining, we introduced a method for automatic
evaluation. This allows us to test modifications to
the error miner without going through the tedious
task of ranking and judging the results manually.
Using this automatic evaluation method, we
have shown that iterative error mining improves
upon ratio-based error mining. As expected,
adding bigrams improves performance. Allowing
expansion beyond bigrams can lead to data sparse-
ness problems, but if we correct for data sparse-
ness the performance of the miner improves over
mining on just unigrams and bigrams.
We have also described preliminary work on
a preprocessor that allows for more general pat-
terns that incorporate additional information, such
as part of speech tags and lemmas. We hope to
optimize and improve pattern-based mining in the
future and evaluate it automatically on larger cor-
pora.
The error mining methods described in this pa-
per are generic, and can be used for any grammar
or parser, as long as the sentences within the cor-
pus can be divided in a list of parsable and un-
parsable sentences. The error miner is freely avail-
able5, and is optimized to work on large corpora.
The source distribution includes a graphical user
interface for browsing mining results, showing the
associated sentences, and removing forms when
they have been corrected in the grammar or lex-
icon.
</bodyText>
<sectionHeader confidence="0.999554" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.99959225">
Gosse Bouma, Gertjan van Noord, and Robert Malouf.
2001. Alpino: Wide-coverage Computational Anal-
ysis of Dutch. In Computational Linguistics in The
Netherlands 2000.
Ann Copestake and Dan Flickinger. 2000. An
open source grammar development environment and
broad-coverage English grammar using HPSG. In
Proceedings of LREC 2000, pages 591–600.
Udi Manber and Gene Myers. 1990. Suffix arrays: a
new method for on-line string searches. In SODA
’90: Proceedings of the first annual ACM-SIAM
symposium on Discrete algorithms, pages 319–327.
Society for Industrial and Applied Mathematics.
Benoit Sagot and ´Eric de la Clergerie. 2006. Error
mining in parsing results. In ACL-44: Proceed-
ings of the 21st International Conference on Com-
putational Linguistics and the 44th annual meeting
of the Association for Computational Linguistics,
pages 329–336, Morristown, NJ, USA. Association
for Computational Linguistics.
</reference>
<footnote confidence="0.856623">
5http://www.let.rug.nl/˜dekok/errormining/
</footnote>
<page confidence="0.994358">
78
</page>
<reference confidence="0.999738125">
Gertjan Van Noord. 2004. Error mining for wide-
coverage grammar engineering. In ACL ’04: Pro-
ceedings of the 42nd Annual Meeting on Associa-
tion for Computational Linguistics, page 446, Mor-
ristown, NJ, USA. Association for Computational
Linguistics.
C. J. van Rijsbergen. 1979. Information retrieval. But-
terworths, London, 2 edition.
</reference>
<page confidence="0.999049">
79
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.740315">
<title confidence="0.999532">A generalized method for iterative error mining in parsing results</title>
<author confidence="0.999411">Dani¨el_de_Kok Jianqiang Ma Gertjan van_Noord</author>
<affiliation confidence="0.987346">University of Groningen University of Groningen University of</affiliation>
<email confidence="0.752167">d.j.a.de.kok@rug.nlj.ma@student.rug.nlg.j.m.van.noord@rug.nl</email>
<abstract confidence="0.999548318181818">Error mining is a useful technique for identifying forms that cause incomplete parses of sentences. We extend the iterative method of Sagot and de la Clergerie (2006) to treat n-grams of an arbitrary length. An inherent problem of incorporating longer n-grams is data sparseness. Our new method takes sparseness into account, producing n-grams that are as long as necessary to identify problematic forms, but not longer. Not every cause for parsing errors can be captured effectively by looking at word n-grams. We report on an algorithm for building more general patterns for mining, consisting of words and part of speech tags. It is not easy to evaluate the various error mining techniques. We propose a new evaluation metric which will enable us to compare different error miners.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Gosse Bouma</author>
<author>Gertjan van Noord</author>
<author>Robert Malouf</author>
</authors>
<title>Alpino: Wide-coverage Computational Analysis of Dutch.</title>
<date>2001</date>
<booktitle>In Computational Linguistics in The</booktitle>
<marker>Bouma, van Noord, Malouf, 2001</marker>
<rawString>Gosse Bouma, Gertjan van Noord, and Robert Malouf. 2001. Alpino: Wide-coverage Computational Analysis of Dutch. In Computational Linguistics in The Netherlands 2000.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ann Copestake</author>
<author>Dan Flickinger</author>
</authors>
<title>An open source grammar development environment and broad-coverage English grammar using HPSG.</title>
<date>2000</date>
<booktitle>In Proceedings of LREC</booktitle>
<pages>591--600</pages>
<contexts>
<context position="1288" citStr="Copestake and Flickinger, 2000" startWordPosition="201" endWordPosition="204">rms, but not longer. Not every cause for parsing errors can be captured effectively by looking at word n-grams. We report on an algorithm for building more general patterns for mining, consisting of words and part of speech tags. It is not easy to evaluate the various error mining techniques. We propose a new evaluation metric which will enable us to compare different error miners. 1 Introduction In the past decade wide-coverage grammars and parsers have been developed for various languages, such as the Alpino parser and grammar (Bouma et al., 2001) for Dutch and the English Resource Grammar (Copestake and Flickinger, 2000). Such grammars account for a large number of grammatical and lexical phenomena, and achieve high accuracies. Still, they are usually tailored to general domain texts and fail to reach the same accuracy for domain-specific texts, due to missing lexicon entries, fixed expressions, and grammatical constructs. When parsing new texts there are usually two types of parsing errors: • The parser returns an incorrect parse. While the parser may have constructed the correct parse, the disambiguation model chose an incorrect parse. • The parser can not find an analysis that spans the full sentence. If t</context>
</contexts>
<marker>Copestake, Flickinger, 2000</marker>
<rawString>Ann Copestake and Dan Flickinger. 2000. An open source grammar development environment and broad-coverage English grammar using HPSG. In Proceedings of LREC 2000, pages 591–600.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Udi Manber</author>
<author>Gene Myers</author>
</authors>
<title>Suffix arrays: a new method for on-line string searches.</title>
<date>1990</date>
<journal>Society for Industrial and Applied Mathematics.</journal>
<booktitle>In SODA ’90: Proceedings of the first annual ACM-SIAM symposium on Discrete algorithms,</booktitle>
<pages>319--327</pages>
<contexts>
<context position="13387" citStr="Manber and Myers, 1990" startWordPosition="2294" endWordPosition="2297">ra. As Van Noord (2004) we used perfect hashing to restrict memory use, since hash codes are generally shorter than the average token length. Additionally, comparisons of numbers are much faster than comparisons of strings, which speeds up the n-gram expansion step considerably. During the n-gram expansion step the miner calculates ratio-based suspicions of n-grams using frequencies of an n-gram in parsable and unparsable sentences. The n-gram can potentially have the length of a whole sentence, so it is not practical to store n-gram ratios in a hash table. Instead, we compute a suffix array (Manber and Myers, 1990) for the parsable and unparsable sentences1. A suffix array is an array that contains indices pointing to sequences in the data array, that are ordered by suffix. We use suffix arrays differently than Van Noord (2004), because our expansion algorithm requires the parsable and unparsable frequencies of the (n-1)-grams, and the second (n-1)-gram is not 1We use the suffix sorting algorithm by Peter M. McIlroy and M. Douglas McIlroy. (necessarily) adjacent to the n-gram in the suffix array. As such, we require random access to frequencies of n-grams occurring in the corpus. We can compute the freq</context>
</contexts>
<marker>Manber, Myers, 1990</marker>
<rawString>Udi Manber and Gene Myers. 1990. Suffix arrays: a new method for on-line string searches. In SODA ’90: Proceedings of the first annual ACM-SIAM symposium on Discrete algorithms, pages 319–327. Society for Industrial and Applied Mathematics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Benoit Sagot</author>
<author>´Eric de la Clergerie</author>
</authors>
<title>Error mining in parsing results.</title>
<date>2006</date>
<booktitle>In ACL-44: Proceedings of the 21st International Conference on Computational Linguistics and the 44th annual meeting of the Association for Computational Linguistics,</booktitle>
<pages>329--336</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Morristown, NJ, USA.</location>
<marker>Sagot, Clergerie, 2006</marker>
<rawString>Benoit Sagot and ´Eric de la Clergerie. 2006. Error mining in parsing results. In ACL-44: Proceedings of the 21st International Conference on Computational Linguistics and the 44th annual meeting of the Association for Computational Linguistics, pages 329–336, Morristown, NJ, USA. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Gertjan Van Noord</author>
</authors>
<title>Error mining for widecoverage grammar engineering.</title>
<date>2004</date>
<booktitle>In ACL ’04: Proceedings of the 42nd Annual Meeting on Association for Computational Linguistics,</booktitle>
<pages>446</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Morristown, NJ, USA.</location>
<marker>Van Noord, 2004</marker>
<rawString>Gertjan Van Noord. 2004. Error mining for widecoverage grammar engineering. In ACL ’04: Proceedings of the 42nd Annual Meeting on Association for Computational Linguistics, page 446, Morristown, NJ, USA. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C J van Rijsbergen</author>
</authors>
<date>1979</date>
<journal>Information retrieval. Butterworths, London,</journal>
<volume>2</volume>
<pages>edition.</pages>
<marker>van Rijsbergen, 1979</marker>
<rawString>C. J. van Rijsbergen. 1979. Information retrieval. Butterworths, London, 2 edition.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>