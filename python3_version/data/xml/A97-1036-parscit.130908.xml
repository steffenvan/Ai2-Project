<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000009">
<title confidence="0.979235">
An Open Distributed Architecture for Reuse and Integration of
Heterogeneous NLP Components
</title>
<author confidence="0.999392">
Willi Zajac, Mark Casper and Nigel Sharples
</author>
<affiliation confidence="0.9884475">
Computing Research Laboratory
New-Mexico State University
</affiliation>
<email confidence="0.855948">
Izajac,mcasper,nigellOcrl.nmsu.edu
</email>
<sectionHeader confidence="0.989898" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.997003416666667">
The shift from Computational Linguistics
to Language Engineering is indicative of
new trends in NLP. This paper reviews
two NLP engineering problems: reuse and
integration, while relating these concerns
to the larger context of applied NLP. It
presents a software architecture which is
geared to support the development of a va-
riety of large-scale NLP applications: In-
formation Retrieval, Corpus Processing,
Multilingual MT, and integration of Speech
Components.
</bodyText>
<sectionHeader confidence="0.998774" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.998385282051282">
The shift from Computational Linguistics to Lan-
guage Engineering&apos; is indicative of new trends in
NLP. We believe that it is not simply a new fash-
ion but that it is indicative of the growing matura-
tion of the field, as also suggested by an emphasis on
building large-scale systems, away from toy research
systems. There is also an increasing awareness that
real-size systems are not mere scaled-up toy systems
but that they present an altogether qualitatively dif-
ferent set of problems that require new tools and new
ideas, as clearly exemplified by recent projects and
programs such as Pangloss (Frederking et al. 94),
Tipster (ARPA 94), and Verbmobil (Gi5rz et al. 96).
Natural language engineering addresses some tra-
ditional issues in software engineering: robustness,
testing and evaluation, reuse, and development of
large-scale applications (see e.g., (Sommerville 96)
for an overview). These issues have been and are
the topic of a number of NLP projects and pro-
grams: TSNLP, DECIDE, Tipster, MUC, TREC,
Multext, Multilex, Genelex, Eagles, etc. This paper
reviews two domains of problems in natural language
&apos;To use the name of two well-known NLP journals.
engineering: reuse and integration in the context
of software architectures for Natural Language Pro-
cessing. The emphasis is put on reuse of NLP soft-
ware, components and their integration in order to
build large-scale applications. Also relevant to this
presentation are topics such as integration of hetero-
geneous components for building hybrid systems or
for integrating speech and other &amp;quot;higher-level&amp;quot; NLP
components (section 2).
Section 3 presents the Corelli Document Process-
ing Architecture, a new software architecture for
NLP which is designed to support the development
of a variety of large- scale NLP applications: Infor-
mation Retrieval, Corpus Processing, Multilingual
MT, and integration of Speech with other NLP com-
ponents.
</bodyText>
<sectionHeader confidence="0.9702" genericHeader="method">
2 Reuse in NLP
</sectionHeader>
<bodyText confidence="0.999709409090909">
There is an increasing amount of shared corpora and
lexical resources that are being made available for
NLP researchers through managed data repositories
such as LDC, CLR, ELRA, etc. (see e.g., (Wilks
et al. 92) for an overview of these repositories).
These resources constitute the basic raw materials
for building NLP software but not all of these re-
sources can be readily used: they might be available
in formats that require extensive pre-processing to
transform them into resources that are tractable by
NLP software. This pre-processing cannot usually
be fully automated and is therefore costly.
Some projects have concentrated on developing
lexical resources directly in a format suitable for
further use in NLP software (e.g., Genelex, Mul-
tilex). These projects go beyond the definition of
interchange formats to define a &amp;quot;neutral&amp;quot; linguistic
representation in which all lexical knowledge is en-
coded and from which, by means of specialized com-
pilers, application-specific dictionaries can be ex-
tracted. The lexical knowledge encoded in these
systems can truly be called reusable since neither
</bodyText>
<page confidence="0.996981">
245
</page>
<bodyText confidence="0.973466">
the format nor the content is application-dependent.
The result of these projects is however not available
to the research community.
Reuse of NLP software components remains much
more limited (Cunningham et al. 96) since prob-
lems are compounded: the software components of
an NLP system need not only to be able to exchange
data using the same format (e.g., feature structures)
and to share the same interpretation of the infor-
mation they exchange (same linguistic theory, e.g.,
LFG), but they also need to communicate at the
process level, either through direct API calls if they
are written in the same programming language or
through other means if, for example, they have to
run on different platforms—a classical software inte-
gration problem. Thus, reuse of NLP software com-
ponents can be defined as an integration problem.
It is not of course the only approach to reuse in
NLP (see for example (Biggerstaff &amp; Perlis 89) for an
overview of alternative approaches to software reuse)
and some previous efforts have, for example, been
directed at building Integrated Development Envi-
ronments ((Boitet et al. 82; Simkins 94; Alshawi 92;
Grover et al. 93) to mention but a few). Although
Integrated Development Environments address some
of the problems, they do not give a complete solu-
tion since one still has to develop rules and lexical
entries using these systems.
Direct reuse of NLP software components, e.g.,
using an existing morphological analyzer as a com-
ponent of a larger system, is still very limited but
is nevertheless increasingly attractive since the de-
velopment of large-scale NLP applications, a focus
of current NLP research, is prohibitive for many
research groups. The Tipster architecture for ex-
ample is directed towards the development of infor-
mation retrieval and extraction systems (ARPA 94;
Grishman 95) and provides a modular approach to
component integration. The GATES architecture
builds upon the Tipster architecture and provides
a graphical development environment to test inte-
grated applications (Cunningham et al. 96). Speech
machine-translation architectures need also to solve
difficult integration problems and original solutions
have been developed in the Verbmobil project (Gorz
et al. 96), and by researchers at ATR (e.g., (Boitet
&amp; Seligman 94)) for example. A generic NLP archi-
tecture needs to address component communication
and integration at three distinct levels:
1. The process or communication layer involves,
for example, communication between different
components that could be written in different
programming languages and could be running
as different processes on a distributed network.
</bodyText>
<listItem confidence="0.943339448979592">
2. The data layer involves exchange and transla-
tion of data structures between components.
3. At the linguistic level, components need to
share the same interpretation of the data they
exchange.
A particular NLP architecture embodies design
choices related to how components can talk to each
other. A variety of solutions are possible as illus-
trated below.
• Each component can talk directly to each other
and thus all components need to incorporate
some knowledge about each other at all three
levels mentioned above. This is the solution
adopted in the Verbmobil architecture which
makes use of a special communication software
package (written in C and imposing the use of C
and Unix) at the process level and uses a chart
annotated with feature structures at the data-
structure level. At the linguistic level, a variant
of HPSG is used (Kesseler 94; Amtrup 95; Turk
&amp; Geibler 95; Gorz et al. 96).
• A central coordinator can incorporate knowl-
edge about each component but the component
themselves don&apos;t have any knowledge about
each other, or even about the coordinator. Fil-
ters are needed to transform data back and forth
between the central data-structure managed by
the coordinator (a lattice would be appropri-
ate) and the data processed by each compo-
nent. Communication between the coordinator
and the components can be asynchronous and
the coordinator needs then to serialize the ac-
tions of each component. This solution, a vari-
ant of the blackboard architecture (Erman &amp;
Lesser 80) is used in the Kasuga speech transla-
tion prototype described in (Boitet &amp; Seligman
94). This architecture imposes no constraints
on the components (programming language or
software architecture) since communication is
based on the SMTP protocol.
• The Tipster Document Architecture makes no
assumption about the solution used either at
the process level or at the linguistic level. At
the data structure level, NLP components ex-
change data by reading and writing &amp;quot;annota-
tions&amp;quot; associated with some segment of a docu-
ment (Grishman 95). This solution also forms
the basis of the GATES system (Cunningham
et al. 96). Various versions of this architecture
</listItem>
<page confidence="0.998088">
246
</page>
<bodyText confidence="0.9996305">
have been developed (in C, C++ and Lisp) but
no support is defined for integration of hetero-
geneous components. However, in the Tipster
Phase III program, a CORBA version of the
Tipster architecture will be developed to sup-
port distributed processing.
</bodyText>
<sectionHeader confidence="0.9705315" genericHeader="method">
3 The Corelli Document Processing
Architecture
</sectionHeader>
<bodyText confidence="0.9984888">
The Corelli Document Processing Architecture is an
attempt to address the various problems mentioned
above and also some other software-level engineer-
ing issues such as robustness, portability, scalability
and inter-language communication (for integrating
components written in Lisp, C or other languages).
Also of interest are some ergonomic issues such as
tractability, understandability and ease of use of the
architecture (the programmer being the user in this
case). The architecture provides support for com-
ponent communication and for data exchange. No
constraint is placed on the type of linguistic pro-
cessing but a small library of data-structures for
NLP is provided to ease data-conversion problems.
The data layer implements the Tipster Document
Architecture and enables the integration of Tipster-
compliant components. This architecture is geared
to support the development of large-scale NLP appli-
cations such as Information Retrieval systems, mul-
tilingual MT systems (Vanni &amp; Zajac 96), hybrid
or multi-engine MT systems (Wilks et al. 92; Fred-
erking et al. 94; Sumita &amp; Iida 95), speech-based
systems (Boitet &amp; Seligman 94; Getrz et al. 96) and
also systems for the exploration and exploitation of
large corpora (Ballim 95; Thompson 95).
</bodyText>
<subsectionHeader confidence="0.417403">
Basic software engineering requirements
</subsectionHeader>
<listItem confidence="0.9893918125">
• A modular and scalable architecture enables
the development of small and simple applica-
tions using a file-based implementation such
as a grammar checker, as well as large and
resource-intensive applications (information re-
trieval, machine translation) using a database
back-end (with two levels of functionality al-
lowing for a single-user persistent store and a
full-size commercial database).
• A portable implementation allows the devel-
opment of small stand-alone PC applications
as well as large distributed Unix applications.
Portability is ensured through the use of the
Java programming language.
• A simple and small API which can be easily
learned and does not make any presupposition
</listItem>
<bodyText confidence="0.61823425">
about the type of application. The API is de-
fined using the IDL language and structured ac-
cording to CORBA standards and the CORBA
services architecture (OMG 95).
</bodyText>
<listItem confidence="0.679575">
• A dynamic Plug&apos;n Play architecture enabling
easier integration of components written in dif-
ferent programming languages (C, C++, Lisp,
Java, etc), where components are &amp;quot;wrapped&amp;quot; as
tools supporting a common interface.
</listItem>
<subsectionHeader confidence="0.99187">
3.1 Data Layer: Document Services
</subsectionHeader>
<bodyText confidence="0.999824833333333">
The data layer of the Corelli Architecture is de-
rived from the Tipster Architecture and implements
the requirements listed above. In this architecture,
components do not talk directly to each other but
communicate through information (so-called &apos;anno-
tations&apos;) attached to a document. This model re-
duces inter-dependencies between components, pro-
moting the design of modular applications (Figure
1) and enabling the development of blackboard-type
applications such as the one described in (Boitet &amp;
Seligman 94). The architecture provides solutions
for
</bodyText>
<listItem confidence="0.9896286">
• Representing information about a document,
• Storing and retrieving this information in an ef-
ficient way,
• Exchanging this information among all compo-
nents of an application.
</listItem>
<bodyText confidence="0.999085222222222">
It does not however provide a solution for translat-
ing linguistic structures (e.g., mapping a dependency
tree to a constituent structure). These problems are
application-dependent and need to be resolved on
a case-by-case basis; such integration is feasible, as
demonstrated by the various Tipster demonstration
systems, and use of the architecture reduces signifi-
cantly the load of integrating a component into the
application.
</bodyText>
<subsectionHeader confidence="0.924272">
Documents, Annotations and Attributes
</subsectionHeader>
<bodyText confidence="0.999131166666667">
The data layer of the Corelli Document Processing
Architecture follows the Tipster Architecture. The
basic data object is the document. Documents can
have attributes and annotations, and can be grouped
into collections. Annotations are used to store infor-
mation about a particular segment of the document
(identified by a span, i.e., start-end byte offsets in
the document content) while the document itself re-
mains unchanged. This contrasts with the SGML
solution used in the Multext project where infor-
mation about a piece of text is stored as additional
SGML mark-up in the document itself (Ballim 95;
</bodyText>
<page confidence="0.984243">
247
</page>
<bodyText confidence="0.99924075">
Thompson 95). This architecture supports read-only
data (e.g., data stored in a CD-ROM) as well as
writable data. Annotations are attributed objects
that contain application objects. They can be used,
for example, to store morphological tags produced
by some tagger, to represent the HTML structure of
an HTML document or to store partial results of a
chart-parser.
</bodyText>
<figureCaption confidence="0.666467">
Figure 1: Document annotations as a centralized
data-structure enable modular architectures and re-
duce the number of interfaces from the order of n2
to the order of n.
</figureCaption>
<subsectionHeader confidence="0.927113">
Document Annotations
</subsectionHeader>
<bodyText confidence="0.811552833333333">
Corelli document annotations are essentially the
same as Tipster document annotations and a similar
generic interface is provided. However, considering
the requirements of NLP applications such as parsers
or documents browsers, two additional interfaces are
provided:
</bodyText>
<listItem confidence="0.990034375">
• Since a set of annotations can be quite natu-
rally interpreted as a chart, a chart interface
provides efficient access to annotations viewed
as a directed graph following the classical model
of the chart first presented in (Kay 73).
• An interval-tree interface provides efficient ac-
cess for efficient implementation of display func-
tionalities.
</listItem>
<sectionHeader confidence="0.747019" genericHeader="method">
Application Objects
</sectionHeader>
<bodyText confidence="0.997568384615385">
An application manipulating only basic data types
(strings, numbers,...) need not define application ob-
jects. However, some applications may want to store
complex data structures as document annotations,
for example, trees, graphs, feature structures, etc.
The architecture provides a top application-object
class that can be sub-classed to define specific ap-
plication objects. To support persistency in the file-
based version, an application object needs to imple-
ment the read-persistent and write-persistent
interfaces (this is provided transparently by the per-
sistent versions). A small library of application ob-
jects is provided with the architecture.
</bodyText>
<subsectionHeader confidence="0.645535">
Accessing Documents
</subsectionHeader>
<bodyText confidence="0.999119636363636">
Documents are accessible via a Document Server
which maintains persistent collections, documents
and their attributes and annotations. An applica-
tion can define its own classes for documents and
collections. In the basic document class provided
in the architecture, a document is identified by its
name (URL to the location of the document&apos;s con-
tent). In this distributed data model, accessing a
document via a Document Server gives access to a
document&apos;s contents and to attributes and annota-
tions of a document.
</bodyText>
<figure confidence="0.934888666666667">
Java Door Orb
(ova...es
)
</figure>
<figureCaption confidence="0.976107333333333">
Figure 2: NLP components access Document Ser-
vices and other facilities (e.g., codeset converters)
through JavaSoft&apos;s Java Door Orb.
</figureCaption>
<bodyText confidence="0.938887333333333">
Services
The Corelli Architecture incorporates standards
such as CORBA for defining inter-operable inter-
faces, and HTTP for data transport. Following the
CORBA model, the Architecture is structured as a
set of services with well- defined interfaces:
</bodyText>
<listItem confidence="0.973758875">
• A Document Management Service (DMS) pro-
vides functions for manipulating collections,
documents, annotations and attributes.
• A Life-Cycle Service provides creation, copying,
moving and deletion of objects.
• A Naming Service provides access to documents
and collections via their names. Named collec-
tions and documents are persistent.
</listItem>
<bodyText confidence="0.836834333333333">
Figure 2 gives an overview of the Corelli Doc-
ument Architecture: an NLP component accesses
a Document Service provided by a Document
Server using the Corelli Document Architecture
API. Client-side application component API calls on
remote object references (requested from the Orb)
</bodyText>
<table confidence="0.385877">
(plication Component&apos;s e‘entnion Facilities
</table>
<page confidence="0.971112">
248
</page>
<bodyText confidence="0.936500054054054">
are transparently &apos;transferred&apos; by the Orb to a Docu-
ment Services implementation object for invocation.
Figure 3 describes the Java IDL compiler and Java
Door Orb interaction. The Corelli Document Archi-
tecture API is specified using the Interface Definition
Language (IDL), a standard defined by the Object
Management Group (0MG 95). The IDL-to-Java
compiler essentially produces three significant files:
one containing a Java interface corresponding to the
IDL operational interface itself, a second containing
client-side &apos;stub&apos; methods to invoke on remote object
references (along with code to handle Orb communi-
cation overhead), and a third containing server-side
&apos;skeleton&apos; methods to handle implementation object
references. What remains is for the server code, im-
plementing the IDL operational interface to be de-
veloped.
When the server implementing the IDL specifi-
cation is launched, it creates skeleton object ref-
erences for implemented services/objects and pub-
lishes them on the Orb. A client wishing to invoke
methods on those remote objects creates stub ob-
ject references and accesses the orb to resolve them
with the implementation references on the server
side. Any client API call made on a resolved ob-
ject reference is then transparently (to the client)
invoked on the corresponding server-side object.
The Document Management Service, the Life-
Cycle Service and the Naming Service are included
in the three versions of the architecture which imple-
ment increasingly sophisticated support of database
functionalities:
1. The basic file-based version of the architecture
uses the local file system to store persistent data
(collections, attributes and annotations); the
contents of a document can however be located
anywhere on the Internet.
</bodyText>
<listItem confidence="0.863801333333333">
2. A persistent store version uses a persistent-store
back-end for storing and retrieving collections,
attributes and annotations: this version sup-
</listItem>
<bodyText confidence="0.8426656">
ports the Persistent Object Service which pro-
vides greater efficiency for storing and accessing
persistent objects as well as enhanced support
for defining persistent application objects.
3. A database version uses a commercial database
management system to store and retrieve collec-
tions, attributes and annotations and also docu-
ments (through an import/export mechanism).
This version provides a Concurrency Control
Service and a Transaction Service.
</bodyText>
<subsectionHeader confidence="0.974864">
Communication Layer
</subsectionHeader>
<bodyText confidence="0.9981914">
To support integration and communication at the
process level, the current version of the Corelli Ar-
chitecture provides component inter-communication
via the Corelli Plug&apos;n Play architecture (see below)
and the Java Door Orb.
</bodyText>
<figureCaption confidence="0.9160405">
Figure 3: Java IDL Compiler Java Door Orb Inter-
action.
</figureCaption>
<subsectionHeader confidence="0.99987">
3.2 Plug&apos;n Play Architecture
</subsectionHeader>
<bodyText confidence="0.99920775862069">
The data layer of the Corelli Document Architec-
ture, as described above, provides a static model
for component integration through a common data
framework. This data model does not provide any
support for communication between components,
i.e., for executing and controlling the interaction of
a set of components, nor for rapid tool integration.
The Corelli Plug&apos;n Play layer aims at filling this gap
by providing a dynamic model for component in-
tegration: this framework provides a high-level of
plug-and-play, allowing for component interchange-
ability without modification of the application code,
thus facilitating the evolution and upgrade of indi-
vidual components.
In the preliminary version of the Corelli Plug&apos;n
Play layer, the choice was made to develop the most
general version of the architecture to ensure that any
tool can be integrated using this framework. In this
model, all components run as servers and the appli-
cation code which implements the logic of the appli-
cation runs as a client of the component servers. To
be integrated, a component needs to support syn-
chronous or asynchronous versions of one or several
of four basic operations: execute, query, convert
and exchange (in addition to standard initialization
ad termination operations). Client-server communi-
cation is supported by the Java Door Orb.
The rationale for this architecture is that many
NLP tools are themselves rather large software corn-
</bodyText>
<figure confidence="0.998792583333333">
CorelliDocumentArchitecture
IDL speafietzion
CJava EDL Compiler
Java Orb Skeleton Imp&apos;,
Caren
Document
Architecture
bnplementation
Stub lnspl.
.1111-11.
NLP
Component
</figure>
<page confidence="0.996697">
249
</page>
<bodyText confidence="0.999919">
ponents, and embedding them in servers helps to re-
duce the computation load. For example, some mor-
phological analyzers load their dictionary in the pro-
cess memory, and on small documents, simply start-
ing the process could take more time than actual ex-
ecution. In such cases, it is more efficient to run the
morphological analyzer as a server that can be ac-
cessed by various client processes. This architecture
also allows the processing load of an application to
be distributed by running the components on sev-
eral machines accessible over the Internet, thereby
enabling the integration of components running on
widely different architectures. This model also pro-
vides adequate support for the integration of static
knowledge sources (such as dictionaries) and of an-
cillary tools (such as codeset converters).
Figure 4 gives a picture of one possible integra-
tion solution. In this example, each component of
the application is embedded in a server which is ac-
cessed through the Corelli Component Integration
API as described above. A component server trans-
lates an incoming request into a component action.
The server also acts as a filter by translating the
document data structures stored in the Document
Server in a format appropriate as input for the com-
ponent and conversely for the component output.
Each component server acts as a wrapper and sev-
eral solutions are possible:
</bodyText>
<listItem confidence="0.998653545454545">
• If the component has a Java API, it can be en-
capsulated directly in the server.
• If the component has an API written in one
of the languages supported by the Java Native
Interface (currently C and C++), it can be dy-
namically loaded into the server at runtime and
accessed via a Java front end.
• If the component is an executable, the server
must issue a system call for running the pro-
gram and data communication usually occurs
through files.
</listItem>
<bodyText confidence="0.997329636363636">
The Document Server itself is accessed via its API
and is running as a Java Door Orb supporting re-
quests from the component&apos;s servers.
This framework does not provide a model for con-
trolling the interaction between the components of
an application: the designer of an NLP application
can use a simple sequential model or more sophis-
ticated blackboard models : since this distributed
model supports both the synchronous and the asyn-
chronous types of communication between compo-
nents, it supports a large variety of control models.
</bodyText>
<figure confidence="0.532990857142857">
App lic atio
T CP/P KT TP
SHIP
Syslcm all
T CP/P
TCRIP TCP,
Count Document Sewn
</figure>
<figureCaption confidence="0.9731165">
Figure 4: Some possible integration paths for het-
erogeneous components.
</figureCaption>
<sectionHeader confidence="0.997543" genericHeader="method">
4 Implementation
</sectionHeader>
<subsectionHeader confidence="0.999865">
4.1 Document Server Implementation
</subsectionHeader>
<bodyText confidence="0.997720285714286">
The Document Server consists of three major mod-
ules: Document Management Service, Naming Ser-
vice, and Life-Cycle Service. The modules are de-
fined in IDL, and implemented in Java. The Sun
Java IDL system, with its Door Orb implementation,
is used to interface client programs to the Document
Server implementation.
The Document Management Service module pro-
vides methods to access and manipulate the com-
ponents of objects (e.g., attributes, annotations and
content of a document object).
The Life-Cycle Service is responsible for creating
and copying objects.
The Naming Service binds a name to an object.
The Naming Service supports a limited form of per-
sistency for storing bindings.
For example, to create a new document, the client
program creates it through the Life-Cycle Service,
bind a name to it using the Naming Service, and add
attributes and annotations to it through the Docu-
ment Management Service.
</bodyText>
<subsectionHeader confidence="0.99935">
4.2 Porting of the Temple Machine
Translation System
</subsectionHeader>
<bodyText confidence="0.999918333333333">
To bootstrap the Corelli Machine Translation Sys-
tem and test the implementation of the architecture,
we are currently porting the CRL&apos;s Temple machine-
translation system prototype (Vanni St Zajac 96) to
the Corelli architecture. This task will be aided by
two features: first, the Temple system already uti-
lizes the Tipster Document Architecture for data ex-
change between components, and second, the Tem-
ple system has a pipelined architecture which will
</bodyText>
<figure confidence="0.952990666666667">
Mo epho logical
Kra /yzez
TCP/IP Seem
CDS API
CI API
G c ne ea toe
HT TP
Se avez
CDS API
</figure>
<page confidence="0.991334">
250
</page>
<bodyText confidence="0.9997502">
allow modular encapsulation of translation stages
(e.g., dictionary lookup) as Corelli Plug&apos;n Play tools.
The Temple morphological analyzers and the En-
glish morphological generator all function as stand-
alone executables and will be easily converted to
Corelli Plug&apos;n Play tools. Lexical resources (e.g.,
dictionaries and glossaries), on the other hand, are
currently maintained in a database and are accessed
via calls to a C library API. Each lexical resource
is wrapped as a Plug&apos;n Play tool implementing
the query interface: in order to interface with the
databases, the Java Native Interface is used to wrap
the C database library. Finally, we will have to re-
engineer a portion of the top-level application con-
trol code (in C) in Java.
</bodyText>
<sectionHeader confidence="0.999277" genericHeader="conclusions">
5 Conclusion
</sectionHeader>
<bodyText confidence="0.999156259259259">
The Corelli Document Architecture is currently used
as the integration layer for the Corelli Machine-
Translation System. This multilingual machine-
translation system is built out of heterogeneous com-
ponents, such as an English generator written in
Lisp, a Spanish morphological analyzer written in
Prolog, a Glossary-Based Machine-Translation en-
gine written in C, etc. This architecture will also be
used to support integration of various machine trans-
lation systems in a multi-engine machine translation
project (building on ideas first developed in the Pan-
gloss project, see (Frederking et al. 94)).
The Corelli project has started collaborating with
the University of Sheffield with the aim to merge
the Corelli Document Architecture and the GATE
architecture.2 More specifically, the current GATE
document manager will be replaced with the Corelli
document manager and the Plug&apos;n Play layer will be
added to support distributed processing.
The file-based version of the Corelli Document
Processing Architecture will be made freely avail-
able for research purposes. It will also be available
as part of the GATE system distribution.
Acknowledgments. An initial version of this ar-
chitecture has been developed by Vani Mahesh.
Research reported in this paper is supported by
the DoD, contract MDA904-96-C-1040.
</bodyText>
<sectionHeader confidence="0.995597" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.979665160714286">
Hiyan Alshawi. 1992. The Core Language Engine.
MIT Press.
2The GATE system already uses a previous version
(written in C) of a Tipster document manager developed
at CRL.
ARPA - Advanced Research Projects Agency. 1993.
Proceedings of the TIPSTER Text Program -
Phase I. Morgan-Kaufrnann.
Jan W. Amtrup. 1995. &amp;quot;Chart-based Incremental
Transfer in Machine Translation&amp;quot;. Proceedings of
the 6th International Conference on Theoretical
and Methodological Issues in Machine Translation
- TIM&apos;95, 5-7 July 1995, Leuven, Belgium. pp188-
195.
A. Ballim. 1995. &amp;quot;Abstract Data Types for Multext
Tool I/O&amp;quot;. LRE 62-05 Deliverable 1.2.1.
Ted J. Biggerstaff, Alan J. Perlis, eds. 1989. Software
Reusability, 2 volumes. ACM Press, Addison-
Wesley.
Christian Boitet, Pierre Guillaume, Maurice Quezel-
Ambrunaz. 1982. &amp;quot;Implementation of the conver-
sational environment of ARIANE 78.4, an inte-
grated system for automated translation and hu-
man revision&amp;quot;. Proceedings of the 9th Interna-
tional Conference on Computational Linguistics -
COLING &apos;82.
Christian Boitet and Mark Seligman. 1994. &amp;quot;The
Whiteboard Architecture: a Way to Integrate
Heterogeneous Components of NLP Systems&amp;quot;.
Proceedings of the 15th International Conference
on Computational Linguistics - COLING &apos;94, Au-
gust 5-9 1994, Kyoto, Japan. pp426-430.
H. Cunningham, M. Freeman, W.J. Black. 1994.
&amp;quot;Software Reuse, Object-Oriented Frameworks
and Natural Language Processing&amp;quot;. Proceedings
of the 1st Conference on New Methods in Natural
Language Processing - NEMLAP-1, Manchester.
H. Cunningham, Y. Wilks, R. Gaizauskas. 1996.
&amp;quot;New Methods, Current Trends and Software In-
frastructure for NLP&amp;quot;. Proceedings of the 2nd
Conference on New Methods in Natural Language
Processing - NEMLAP-2, Ankara, Turkey.
L.D. Erman, V.R. Lesser. 1980. &amp;quot;The Hearsay-
II speech understanding system&amp;quot;. In W.A. Lea
(ed.), Trends in Speech Recognition, Prentice-
Hall. pp361-381.
Robert Frederking, Sergei Nirenburg, David Farwell,
Stephen Helmreich, Eduard Hovy, Kevin Knight,
Stephen Beale, Constantine Domashnev, Donalee
Attardo, Dean Grannes, Ralf Brown. 1994. &amp;quot;Inte-
grating Translations from Multiple Sources within
the Pangloss Mark III Machine Translation Sys-
tem&amp;quot;. Proceedings of the 1st Conference of the As-
sociation for Machine Translation in the Americas
- AMTA&apos;94, 5-8 October 1994, Columbia, Mary-
land. pp73- 80.
</reference>
<page confidence="0.985032">
251
</page>
<reference confidence="0.999708525773196">
Gunther Gorz, Marcus Kesseler, Jorg Spilker, Hans
Weber. 1996. &amp;quot;Research on Architectures for In-
tegrated Speech/ Language Systems in Verbmo-
bil&amp;quot;. Verbmobil Report 126, Universitat Erlangen-
Nürnberg, May 1996.
Claire Grover, John Caro11 and Ted Briscoe. 1992.
The Alvey Natural Language Tools. Computer
Laboratory, University of Cambridge, UK.
Ralph Grishman, editor. 1995. &amp;quot;Tipster Phase II Ar-
chitecture Design Document&amp;quot;. New-York Univer-
sity, NY, July 1995.
Bill Janssen, Mike Spreitzer. 1996. &amp;quot;ILU 2.0 Refer-
ence Manual&amp;quot;. Xerox PARC.
Martin Kay. 1973. &amp;quot;The MIND system&amp;quot;. In R.
Rustin (ed.), Courant Computer Science Sympo-
sium 8: Natural Language Processing. Algorith-
mics Press, New-York, NY. pp155-188.
Martin Kay. 1996. &amp;quot;Chart Generation&amp;quot;. Proceedings
of the 34th Meeting of the Association for Com-
putational Linguistics ACL&apos;96. pp200-204.
M. Kesseler. 1994. &amp;quot;Distributed Control in Verbmo-
bil&amp;quot;. Verbmobil Report 24, Universitat Erlangen-
Nurnberg, August 1994.
Sergei Nirenburg. 1994. &amp;quot;The Workstation Substrate
of the Pangloss Project&amp;quot;. Proceedings of the Con-
ference on Future Generation of Natural Language
Processing Systems - FGNLP-2.
Sergei Nirenburg and Robert Frederldng. 1994. &amp;quot;To-
wards Multi-Engine Machine Translation&amp;quot;. Pro-
ceedings of the ARPA Human Language Technol-
ogy Workshop, March 8-11 1994, Plainsboro, NJ.
pp147-151.
Sergei Nirenburg, David Farwell, Robert Frederldng,
Yorick Wilks. 1994. &amp;quot;Two types of adaptative MT
environments&amp;quot;. Proceedings of the 15th Interna-
tional Conference on Computational Linguistics
- COLING &apos;94, August 5-9 1994, Kyoto, Japan.
pp125-128.
OMG. 1995. &amp;quot;The Common Object Request Bro-
ker: Architecture and Specification, Version 2.0&amp;quot;.
OMG Technical Document PTC/96-03-0.
N.K. Simkins. 1994. &amp;quot;An Open Architecture for Lan-
guage Engineering&amp;quot;. Proceedings of the 1st Lan-
guage Engineering Convention, Paris.
Ian Sommerville. 1996. Software Engineering (5th
Edition). Addison-Wesley.
Eiichiro Sumita and Hitoshi Iida. 1995. &amp;quot;Hetero-
geneous Computing for Example-based Transla-
tion of Spoken Language&amp;quot;. Proceedings of the
6th International Conference on Theoretical and
Methodological Issues in Machine Translation -
TIM&apos;95, 5-7 July 1995, Leuven, Belgium. pp273-
286.
Henry Thompson and Graeme Ritchie. 1984. &amp;quot;Im-
plementing Natural Language Parsers&amp;quot;. In T.
O&apos;Shea and E. Eisenstadt (eds.), Artificial Intel-
ligence. Harper Sz Row, New-York. pp245-300.
Henry Thompson. 1995. &amp;quot;Multext Workpackage 2,
Milestone B, Deliverable Overview&amp;quot;. LRE 62-050
Deliverable 2.
Andrea Turk and Stefan Geibler. 1995. &amp;quot;Integra-
tion alternativer Komponenten fiir die Sparchver-
arbeitung im Verbmobil Demonstrator&amp;quot;. Verbmo-
bil Report 67, IBM Informationssysteme GmBH,
April 1995.
Michelle Vanni and Remi Zajac. 1996. &amp;quot;Glossary-
Based MT Engines in a Multilingual Analyst&apos;s
Workstation for Information Processing&amp;quot;. To ap-
pear in Machine Translation, Special Issue on New
Tools for Human Translators.
Yorick Wilks, Louise Guthrie, Joe Guthrie and
Jim Cowie. 1992. &amp;quot;Combining Weak Methods in
Large-Scale Text Processing&amp;quot;. In Paul S. Jacob
(ed.), Text-Based Intelligent Systems, Lawrence
Erlbaum Associates, pp35-58.
Remi Zajac. 1992. &amp;quot;Towards Computer-Aided Lin-
guistic Engineering&amp;quot;. Proc. of the 14th Interna-
tional Conference on Computational Linguistics -
COLING &apos;92, 23-28 August 1992, Nantes, France.
pp827-834.
Remi Zajac. 1996. &amp;quot;A Multilingual Translator&apos;s
Workstation for Information Access&amp;quot;, Proceed-
ings of the International Conference on Natural
Language Processing and Industrial Applications -
NLP+IA 96, Moncton, New-Brunswick, Canada,
June 4-6, 1996.
Remi Zajac. 1996. &amp;quot;Towards a Multilingual An-
alyst&apos;s Workstation: Temple&amp;quot;. In Expanding
MT Horizons - Proceedings of the 2nd Confer-
ence of the Association for Machine Translation
in the Americas, AMTA-96. 2-5 October 1996,
Montréal, Canada. pp280-284.
Remi Zajac and Mark Casper. &amp;quot;The Temple Web
Translator&amp;quot;. Proc. of the 1997 AAAI Spring Sym-
posium on Natural Language Processing for the
World Wide Web, March 24-26, 1997, Stanford
University.
</reference>
<page confidence="0.997423">
252
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.284663">
<title confidence="0.9997645">An Open Distributed Architecture for Reuse and Integration of Heterogeneous NLP Components</title>
<author confidence="0.999869">Willi Zajac</author>
<author confidence="0.999869">Mark Casper</author>
<author confidence="0.999869">Nigel Sharples</author>
<affiliation confidence="0.999959">Computing Research Laboratory New-Mexico State University</affiliation>
<email confidence="0.972129">Izajac,mcasper,nigellOcrl.nmsu.edu</email>
<abstract confidence="0.9959238">shift from Linguistics Engineering indicative of new trends in NLP. This paper reviews two NLP engineering problems: reuse and integration, while relating these concerns to the larger context of applied NLP. It presents a software architecture which is geared to support the development of a variety of large-scale NLP applications: In-</abstract>
<note confidence="0.411980333333333">formation Retrieval, Corpus Processing, Multilingual MT, and integration of Speech Components.</note>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Hiyan Alshawi</author>
</authors>
<title>The Core Language Engine.</title>
<date>1992</date>
<publisher>MIT Press.</publisher>
<marker>Alshawi, 1992</marker>
<rawString>Hiyan Alshawi. 1992. The Core Language Engine. MIT Press.</rawString>
</citation>
<citation valid="false">
<title>2The GATE system already uses a previous version (written in C) of a Tipster document manager developed at CRL.</title>
<marker></marker>
<rawString>2The GATE system already uses a previous version (written in C) of a Tipster document manager developed at CRL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>ARPA</author>
</authors>
<title>Advanced Research Projects Agency.</title>
<date>1993</date>
<booktitle>Proceedings of the TIPSTER Text Program -Phase I.</booktitle>
<publisher>Morgan-Kaufrnann.</publisher>
<marker>ARPA, 1993</marker>
<rawString>ARPA - Advanced Research Projects Agency. 1993. Proceedings of the TIPSTER Text Program -Phase I. Morgan-Kaufrnann.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jan W Amtrup</author>
</authors>
<title>Chart-based Incremental Transfer in Machine Translation&amp;quot;.</title>
<date>1995</date>
<booktitle>Proceedings of the 6th International Conference on Theoretical and Methodological Issues in Machine Translation - TIM&apos;95,</booktitle>
<pages>5--7</pages>
<location>Leuven,</location>
<marker>Amtrup, 1995</marker>
<rawString>Jan W. Amtrup. 1995. &amp;quot;Chart-based Incremental Transfer in Machine Translation&amp;quot;. Proceedings of the 6th International Conference on Theoretical and Methodological Issues in Machine Translation - TIM&apos;95, 5-7 July 1995, Leuven, Belgium. pp188-195.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Ballim</author>
</authors>
<title>Abstract Data Types for Multext Tool I/O&amp;quot;.</title>
<date>1995</date>
<tech>LRE 62-05 Deliverable 1.2.1.</tech>
<marker>Ballim, 1995</marker>
<rawString>A. Ballim. 1995. &amp;quot;Abstract Data Types for Multext Tool I/O&amp;quot;. LRE 62-05 Deliverable 1.2.1.</rawString>
</citation>
<citation valid="true">
<date>1989</date>
<journal>Software Reusability,</journal>
<volume>2</volume>
<editor>Ted J. Biggerstaff, Alan J. Perlis, eds.</editor>
<publisher>ACM Press, AddisonWesley.</publisher>
<marker>1989</marker>
<rawString>Ted J. Biggerstaff, Alan J. Perlis, eds. 1989. Software Reusability, 2 volumes. ACM Press, AddisonWesley.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Christian Boitet</author>
<author>Pierre Guillaume</author>
<author>Maurice QuezelAmbrunaz</author>
</authors>
<title>Implementation of the conversational environment of ARIANE 78.4, an integrated system for automated translation and human revision&amp;quot;.</title>
<date>1982</date>
<booktitle>Proceedings of the 9th International Conference on Computational Linguistics -COLING &apos;82.</booktitle>
<marker>Boitet, Guillaume, QuezelAmbrunaz, 1982</marker>
<rawString>Christian Boitet, Pierre Guillaume, Maurice QuezelAmbrunaz. 1982. &amp;quot;Implementation of the conversational environment of ARIANE 78.4, an integrated system for automated translation and human revision&amp;quot;. Proceedings of the 9th International Conference on Computational Linguistics -COLING &apos;82.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Christian Boitet</author>
<author>Mark Seligman</author>
</authors>
<title>The Whiteboard Architecture: a Way to Integrate Heterogeneous Components of NLP Systems&amp;quot;.</title>
<date>1994</date>
<booktitle>Proceedings of the 15th International Conference on Computational Linguistics - COLING &apos;94,</booktitle>
<pages>426--430</pages>
<location>Kyoto,</location>
<marker>Boitet, Seligman, 1994</marker>
<rawString>Christian Boitet and Mark Seligman. 1994. &amp;quot;The Whiteboard Architecture: a Way to Integrate Heterogeneous Components of NLP Systems&amp;quot;. Proceedings of the 15th International Conference on Computational Linguistics - COLING &apos;94, August 5-9 1994, Kyoto, Japan. pp426-430.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Cunningham</author>
<author>M Freeman</author>
<author>W J Black</author>
</authors>
<title>Software Reuse, Object-Oriented Frameworks and Natural Language Processing&amp;quot;.</title>
<date>1994</date>
<booktitle>Proceedings of the 1st Conference on New Methods in Natural Language Processing - NEMLAP-1,</booktitle>
<location>Manchester.</location>
<marker>Cunningham, Freeman, Black, 1994</marker>
<rawString>H. Cunningham, M. Freeman, W.J. Black. 1994. &amp;quot;Software Reuse, Object-Oriented Frameworks and Natural Language Processing&amp;quot;. Proceedings of the 1st Conference on New Methods in Natural Language Processing - NEMLAP-1, Manchester.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Cunningham</author>
<author>Y Wilks</author>
<author>R Gaizauskas</author>
</authors>
<title>New Methods, Current Trends and Software Infrastructure for NLP&amp;quot;.</title>
<date>1996</date>
<booktitle>Proceedings of the 2nd Conference on New Methods in Natural Language Processing - NEMLAP-2,</booktitle>
<location>Ankara, Turkey.</location>
<marker>Cunningham, Wilks, Gaizauskas, 1996</marker>
<rawString>H. Cunningham, Y. Wilks, R. Gaizauskas. 1996. &amp;quot;New Methods, Current Trends and Software Infrastructure for NLP&amp;quot;. Proceedings of the 2nd Conference on New Methods in Natural Language Processing - NEMLAP-2, Ankara, Turkey.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L D Erman</author>
<author>V R Lesser</author>
</authors>
<title>The HearsayII speech understanding system&amp;quot;.</title>
<date>1980</date>
<booktitle>Trends in Speech Recognition, PrenticeHall.</booktitle>
<pages>361--381</pages>
<editor>In W.A. Lea (ed.),</editor>
<marker>Erman, Lesser, 1980</marker>
<rawString>L.D. Erman, V.R. Lesser. 1980. &amp;quot;The HearsayII speech understanding system&amp;quot;. In W.A. Lea (ed.), Trends in Speech Recognition, PrenticeHall. pp361-381.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Robert Frederking</author>
<author>Sergei Nirenburg</author>
<author>David Farwell</author>
<author>Stephen Helmreich</author>
<author>Eduard Hovy</author>
<author>Kevin Knight</author>
<author>Stephen Beale</author>
<author>Constantine Domashnev</author>
<author>Donalee Attardo</author>
<author>Dean Grannes</author>
<author>Ralf Brown</author>
</authors>
<title>Integrating Translations from Multiple Sources within the Pangloss Mark III Machine Translation System&amp;quot;.</title>
<date>1994</date>
<booktitle>Proceedings of the 1st Conference of the Association for Machine Translation in the Americas - AMTA&apos;94,</booktitle>
<pages>5--8</pages>
<location>Columbia, Maryland.</location>
<marker>Frederking, Nirenburg, Farwell, Helmreich, Hovy, Knight, Beale, Domashnev, Attardo, Grannes, Brown, 1994</marker>
<rawString>Robert Frederking, Sergei Nirenburg, David Farwell, Stephen Helmreich, Eduard Hovy, Kevin Knight, Stephen Beale, Constantine Domashnev, Donalee Attardo, Dean Grannes, Ralf Brown. 1994. &amp;quot;Integrating Translations from Multiple Sources within the Pangloss Mark III Machine Translation System&amp;quot;. Proceedings of the 1st Conference of the Association for Machine Translation in the Americas - AMTA&apos;94, 5-8 October 1994, Columbia, Maryland. pp73- 80.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Gunther Gorz</author>
<author>Marcus Kesseler</author>
<author>Jorg Spilker</author>
<author>Hans Weber</author>
</authors>
<title>Research on Architectures for Integrated Speech/ Language Systems in Verbmobil&amp;quot;.</title>
<date>1996</date>
<tech>Verbmobil Report 126,</tech>
<institution>Universitat ErlangenNürnberg,</institution>
<marker>Gorz, Kesseler, Spilker, Weber, 1996</marker>
<rawString>Gunther Gorz, Marcus Kesseler, Jorg Spilker, Hans Weber. 1996. &amp;quot;Research on Architectures for Integrated Speech/ Language Systems in Verbmobil&amp;quot;. Verbmobil Report 126, Universitat ErlangenNürnberg, May 1996.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Claire Grover</author>
<author>John Caro11</author>
<author>Ted Briscoe</author>
</authors>
<date>1992</date>
<journal>The Alvey Natural Language</journal>
<institution>Tools. Computer Laboratory, University of Cambridge, UK.</institution>
<marker>Grover, Caro11, Briscoe, 1992</marker>
<rawString>Claire Grover, John Caro11 and Ted Briscoe. 1992. The Alvey Natural Language Tools. Computer Laboratory, University of Cambridge, UK.</rawString>
</citation>
<citation valid="true">
<title>Tipster Phase II Architecture Design Document&amp;quot;.</title>
<date>1995</date>
<editor>Ralph Grishman, editor.</editor>
<location>New-York University, NY,</location>
<marker>1995</marker>
<rawString>Ralph Grishman, editor. 1995. &amp;quot;Tipster Phase II Architecture Design Document&amp;quot;. New-York University, NY, July 1995.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Bill Janssen</author>
<author>Mike Spreitzer</author>
</authors>
<title>ILU 2.0 Reference Manual&amp;quot;. Xerox PARC.</title>
<date>1996</date>
<marker>Janssen, Spreitzer, 1996</marker>
<rawString>Bill Janssen, Mike Spreitzer. 1996. &amp;quot;ILU 2.0 Reference Manual&amp;quot;. Xerox PARC.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Martin Kay</author>
</authors>
<title>The MIND system&amp;quot;.</title>
<date>1973</date>
<booktitle>Courant Computer Science Symposium 8: Natural Language Processing.</booktitle>
<pages>155--188</pages>
<editor>In R. Rustin (ed.),</editor>
<publisher>Algorithmics Press,</publisher>
<location>New-York, NY.</location>
<marker>Kay, 1973</marker>
<rawString>Martin Kay. 1973. &amp;quot;The MIND system&amp;quot;. In R. Rustin (ed.), Courant Computer Science Symposium 8: Natural Language Processing. Algorithmics Press, New-York, NY. pp155-188.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Martin Kay</author>
</authors>
<title>Chart Generation&amp;quot;.</title>
<date>1996</date>
<booktitle>Proceedings of the 34th Meeting of the Association for Computational Linguistics ACL&apos;96.</booktitle>
<pages>200--204</pages>
<marker>Kay, 1996</marker>
<rawString>Martin Kay. 1996. &amp;quot;Chart Generation&amp;quot;. Proceedings of the 34th Meeting of the Association for Computational Linguistics ACL&apos;96. pp200-204.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Kesseler</author>
</authors>
<title>Distributed Control in Verbmobil&amp;quot;.</title>
<date>1994</date>
<tech>Verbmobil Report 24,</tech>
<institution>Universitat ErlangenNurnberg,</institution>
<marker>Kesseler, 1994</marker>
<rawString>M. Kesseler. 1994. &amp;quot;Distributed Control in Verbmobil&amp;quot;. Verbmobil Report 24, Universitat ErlangenNurnberg, August 1994.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sergei Nirenburg</author>
</authors>
<title>The Workstation Substrate of the Pangloss Project&amp;quot;.</title>
<date>1994</date>
<booktitle>Proceedings of the Conference on Future Generation of Natural Language Processing Systems - FGNLP-2.</booktitle>
<marker>Nirenburg, 1994</marker>
<rawString>Sergei Nirenburg. 1994. &amp;quot;The Workstation Substrate of the Pangloss Project&amp;quot;. Proceedings of the Conference on Future Generation of Natural Language Processing Systems - FGNLP-2.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sergei Nirenburg</author>
<author>Robert Frederldng</author>
</authors>
<title>Towards Multi-Engine Machine Translation&amp;quot;.</title>
<date>1994</date>
<booktitle>Proceedings of the ARPA Human Language Technology Workshop,</booktitle>
<pages>147--151</pages>
<location>Plainsboro, NJ.</location>
<marker>Nirenburg, Frederldng, 1994</marker>
<rawString>Sergei Nirenburg and Robert Frederldng. 1994. &amp;quot;Towards Multi-Engine Machine Translation&amp;quot;. Proceedings of the ARPA Human Language Technology Workshop, March 8-11 1994, Plainsboro, NJ. pp147-151.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sergei Nirenburg</author>
<author>David Farwell</author>
<author>Robert Frederldng</author>
<author>Yorick Wilks</author>
</authors>
<title>Two types of adaptative MT environments&amp;quot;.</title>
<date>1994</date>
<booktitle>Proceedings of the 15th International Conference on Computational Linguistics - COLING &apos;94,</booktitle>
<pages>125--128</pages>
<location>Kyoto,</location>
<marker>Nirenburg, Farwell, Frederldng, Wilks, 1994</marker>
<rawString>Sergei Nirenburg, David Farwell, Robert Frederldng, Yorick Wilks. 1994. &amp;quot;Two types of adaptative MT environments&amp;quot;. Proceedings of the 15th International Conference on Computational Linguistics - COLING &apos;94, August 5-9 1994, Kyoto, Japan. pp125-128.</rawString>
</citation>
<citation valid="true">
<authors>
<author>OMG</author>
</authors>
<title>The Common Object Request Broker: Architecture and Specification, Version 2.0&amp;quot;.</title>
<date>1995</date>
<tech>OMG Technical Document</tech>
<pages>96--03</pages>
<marker>OMG, 1995</marker>
<rawString>OMG. 1995. &amp;quot;The Common Object Request Broker: Architecture and Specification, Version 2.0&amp;quot;. OMG Technical Document PTC/96-03-0.</rawString>
</citation>
<citation valid="true">
<authors>
<author>N K Simkins</author>
</authors>
<title>An Open Architecture for Language Engineering&amp;quot;.</title>
<date>1994</date>
<booktitle>Proceedings of the 1st Language Engineering Convention,</booktitle>
<location>Paris.</location>
<marker>Simkins, 1994</marker>
<rawString>N.K. Simkins. 1994. &amp;quot;An Open Architecture for Language Engineering&amp;quot;. Proceedings of the 1st Language Engineering Convention, Paris.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ian Sommerville</author>
</authors>
<date>1996</date>
<booktitle>Software Engineering (5th Edition).</booktitle>
<publisher>Addison-Wesley.</publisher>
<marker>Sommerville, 1996</marker>
<rawString>Ian Sommerville. 1996. Software Engineering (5th Edition). Addison-Wesley.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Eiichiro Sumita</author>
<author>Hitoshi Iida</author>
</authors>
<title>Heterogeneous Computing for Example-based Translation of Spoken Language&amp;quot;.</title>
<date>1995</date>
<booktitle>Proceedings of the 6th International Conference on Theoretical and Methodological Issues in Machine Translation -TIM&apos;95,</booktitle>
<pages>5--7</pages>
<location>Leuven,</location>
<marker>Sumita, Iida, 1995</marker>
<rawString>Eiichiro Sumita and Hitoshi Iida. 1995. &amp;quot;Heterogeneous Computing for Example-based Translation of Spoken Language&amp;quot;. Proceedings of the 6th International Conference on Theoretical and Methodological Issues in Machine Translation -TIM&apos;95, 5-7 July 1995, Leuven, Belgium. pp273-286.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Henry Thompson</author>
<author>Graeme Ritchie</author>
</authors>
<title>Implementing Natural Language Parsers&amp;quot;.</title>
<date>1984</date>
<pages>245--300</pages>
<editor>In T. O&apos;Shea and E. Eisenstadt (eds.), Artificial Intelligence. Harper Sz Row,</editor>
<marker>Thompson, Ritchie, 1984</marker>
<rawString>Henry Thompson and Graeme Ritchie. 1984. &amp;quot;Implementing Natural Language Parsers&amp;quot;. In T. O&apos;Shea and E. Eisenstadt (eds.), Artificial Intelligence. Harper Sz Row, New-York. pp245-300.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Henry Thompson</author>
</authors>
<title>Multext Workpackage 2, Milestone B, Deliverable Overview&amp;quot;.</title>
<date>1995</date>
<journal>LRE 62-050 Deliverable</journal>
<volume>2</volume>
<marker>Thompson, 1995</marker>
<rawString>Henry Thompson. 1995. &amp;quot;Multext Workpackage 2, Milestone B, Deliverable Overview&amp;quot;. LRE 62-050 Deliverable 2.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Andrea Turk</author>
<author>Stefan Geibler</author>
</authors>
<title>Integration alternativer Komponenten fiir die Sparchverarbeitung im Verbmobil Demonstrator&amp;quot;.</title>
<date>1995</date>
<tech>Verbmobil Report 67,</tech>
<institution>IBM Informationssysteme GmBH,</institution>
<marker>Turk, Geibler, 1995</marker>
<rawString>Andrea Turk and Stefan Geibler. 1995. &amp;quot;Integration alternativer Komponenten fiir die Sparchverarbeitung im Verbmobil Demonstrator&amp;quot;. Verbmobil Report 67, IBM Informationssysteme GmBH, April 1995.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michelle Vanni</author>
<author>Remi Zajac</author>
</authors>
<title>GlossaryBased MT Engines in a Multilingual Analyst&apos;s Workstation for Information Processing&amp;quot;.</title>
<date>1996</date>
<note>To appear in Machine Translation, Special Issue on New Tools for Human Translators.</note>
<marker>Vanni, Zajac, 1996</marker>
<rawString>Michelle Vanni and Remi Zajac. 1996. &amp;quot;GlossaryBased MT Engines in a Multilingual Analyst&apos;s Workstation for Information Processing&amp;quot;. To appear in Machine Translation, Special Issue on New Tools for Human Translators.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yorick Wilks</author>
<author>Louise Guthrie</author>
<author>Joe Guthrie</author>
<author>Jim Cowie</author>
</authors>
<title>Combining Weak Methods in Large-Scale Text Processing&amp;quot;.</title>
<date>1992</date>
<booktitle>Text-Based Intelligent Systems, Lawrence Erlbaum Associates,</booktitle>
<pages>35--58</pages>
<editor>In Paul S. Jacob (ed.),</editor>
<marker>Wilks, Guthrie, Guthrie, Cowie, 1992</marker>
<rawString>Yorick Wilks, Louise Guthrie, Joe Guthrie and Jim Cowie. 1992. &amp;quot;Combining Weak Methods in Large-Scale Text Processing&amp;quot;. In Paul S. Jacob (ed.), Text-Based Intelligent Systems, Lawrence Erlbaum Associates, pp35-58.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Remi Zajac</author>
</authors>
<title>Towards Computer-Aided Linguistic Engineering&amp;quot;.</title>
<date>1992</date>
<booktitle>Proc. of the 14th International Conference on Computational Linguistics -COLING &apos;92,</booktitle>
<pages>23--28</pages>
<location>Nantes,</location>
<marker>Zajac, 1992</marker>
<rawString>Remi Zajac. 1992. &amp;quot;Towards Computer-Aided Linguistic Engineering&amp;quot;. Proc. of the 14th International Conference on Computational Linguistics -COLING &apos;92, 23-28 August 1992, Nantes, France. pp827-834.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Remi Zajac</author>
</authors>
<title>A Multilingual Translator&apos;s Workstation for Information Access&amp;quot;,</title>
<date>1996</date>
<booktitle>Proceedings of the International Conference on Natural Language Processing and Industrial Applications -NLP+IA 96,</booktitle>
<location>Moncton, New-Brunswick, Canada,</location>
<marker>Zajac, 1996</marker>
<rawString>Remi Zajac. 1996. &amp;quot;A Multilingual Translator&apos;s Workstation for Information Access&amp;quot;, Proceedings of the International Conference on Natural Language Processing and Industrial Applications -NLP+IA 96, Moncton, New-Brunswick, Canada, June 4-6, 1996.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Remi Zajac</author>
</authors>
<title>Towards a Multilingual Analyst&apos;s Workstation: Temple&amp;quot;.</title>
<date>1996</date>
<booktitle>In Expanding MT Horizons - Proceedings of the 2nd Conference of the Association for Machine Translation in the Americas, AMTA-96.</booktitle>
<pages>2--5</pages>
<location>Montréal,</location>
<marker>Zajac, 1996</marker>
<rawString>Remi Zajac. 1996. &amp;quot;Towards a Multilingual Analyst&apos;s Workstation: Temple&amp;quot;. In Expanding MT Horizons - Proceedings of the 2nd Conference of the Association for Machine Translation in the Americas, AMTA-96. 2-5 October 1996, Montréal, Canada. pp280-284.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Remi Zajac</author>
<author>Mark Casper</author>
</authors>
<title>The Temple Web Translator&amp;quot;.</title>
<date>1997</date>
<booktitle>Proc. of the</booktitle>
<publisher>AAAI Spring</publisher>
<institution>Stanford University.</institution>
<marker>Zajac, Casper, 1997</marker>
<rawString>Remi Zajac and Mark Casper. &amp;quot;The Temple Web Translator&amp;quot;. Proc. of the 1997 AAAI Spring Symposium on Natural Language Processing for the World Wide Web, March 24-26, 1997, Stanford University.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>