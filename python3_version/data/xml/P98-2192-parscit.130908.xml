<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000018">
<title confidence="0.988675">
Restrictions on Tree Adjoining Languages
</title>
<author confidence="0.698765">
Giorgio Satta
</author>
<note confidence="0.720675">
Dip. di Elettronica e Informatica
Universita di Padova
35131 Padova, Italy
</note>
<email confidence="0.976704">
satta@dei.unipd.it
</email>
<author confidence="0.987058">
William Schuler
</author>
<affiliation confidence="0.9922185">
Computer and Information Science Dept.
University of Pennsylvania
</affiliation>
<address confidence="0.85339">
Philadelphia, PA 19103
</address>
<email confidence="0.998296">
schuler@linc.cis.upenn.edu
</email>
<sectionHeader confidence="0.994789" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999823">
Several methods are known for parsing lan-
guages generated by Tree Adjoining Grammars
(TAGs) in 0(n6) worst case running time. In
this paper we investigate which restrictions on
TAGs and TAG derivations are needed in order
to lower this 0(n6) time complexity, without in-
troducing large runtime constants, and without
losing any of the generative power needed to
capture the syntactic constructions in natural
language that can be handled by unrestricted
TAGs. In particular, we describe an algorithm
for parsing a strict subclass of TAG in 0(n6),
and attempt to show that this subclass retains
enough generative power to make it useful in
the general case.
</bodyText>
<sectionHeader confidence="0.998784" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.993565588235294">
Several methods are known that can parse lan-
guages generated by Tree Adjoining Grammars
(TAGs) in worst case time 0(n6), where n is
the length of the input string (see (Schabes
and Joshi, 1991) and references therein). Al-
though asymptotically faster methods can be
constructed, as discussed in (Rajasekaran and
Yooseph, 1995), these methods are not of prac-
tical interest, due to large hidden constants.
More generally, in (Satta, 1994) it has been ar-
gued that methods for TAG parsing running in
time asymptotically faster than 0(n6) are un-
likely to have small hidden constants.
A careful inspection of the proof provided
in (Satta, 1994) reveals that the source of the
claimed computational complexity of TAG pars-
ing resides in the fact that auxiliary trees can
get adjunctions at (at least) two distinct nodes
in their spine (the path connecting the root and
the foot nodes). The question then arises of
whether the bound of two is tight. More gen-
erally, in this paper we investigate which re-
strictions on TAGs are needed in order to lower
the 0(n6) time complexity, still retaining the
generative power that is needed to capture the
syntactic constructions of natural language that
unrestricted TAGs can handle. The contribu-
tion of this paper is twofold:
• We define a strict subclass of TAG where
adjunction of so-called wrapping trees at
the spine is restricted to take place at no
more than one distinct node. We show that
in this case the parsing problem for TAG
can be solved in worst case time 0(n6).
</bodyText>
<listItem confidence="0.9666846">
• We provide evidence that the proposed
subclass still captures the vast majority
of TAG analyses that have been currently
proposed for the syntax of English and of
several other languages.
</listItem>
<bodyText confidence="0.999685615384615">
Several restrictions on the adjunction opera-
tion for TAG have been proposed in the liter-
ature (Schabes and Waters, 1993; Schabes and
Waters, 1995) (Rogers, 1994). Differently from
here, in all those works the main goal was one
of characterizing, through the adjunction oper-
ation, the set of trees that can be generated by
a context-free grammar (CFG). For the sake of
critical comparison, we discuss some common
syntactic constructions found in current natural
language TAG analyses, that can be captured
by our proposal but fall outside of the restric-
tions mentioned above.
</bodyText>
<sectionHeader confidence="0.997513" genericHeader="introduction">
2 Overview
</sectionHeader>
<bodyText confidence="0.9996465">
We introduce here the subclass of TAG that we
investigate in this paper, and briefly compare it
with other proposals in the literature.
A TAG is a tuple G = (N, E, I, A, S), where
N, E are the finite sets of nonterminal and ter-
minal symbols, respectively, I, A are the finite
</bodyText>
<page confidence="0.988345">
1176
</page>
<bodyText confidence="0.94628875">
sets of initial and auxiliary trees, respectively,
and S E N is the initial symbol. Trees in I U A
are also called elementary trees. The reader is
referred to (Joshi, 1985) for the definitions of
tree adjunction, tree substitution, and language
derived by a TAG.
The spine of an auxiliary tree is the (unique)
path that connects the root and the foot node.
An auxiliary tree 13 is called a right (left) tree
if (i) the leftmost (rightmost, resp.) leaf in [3 is
the foot node; and (ii) the spine of 3 contains
only the root and the foot nodes. An auxiliary
tree which is neither left nor right is called a
wrapping tree.&apos;
The TAG restriction we propose is stated
as followed:
</bodyText>
<listItem confidence="0.987035375">
1. At the spine of each wrapping tree, there is
at most one node that can host adjunction
of a wrapping tree. This node is called a
wrapping node.
2. At the spine of each left (right) tree, no
wrapping tree can be adjoined and no ad-
junction constraints on right (left, resp.)
auxiliary trees are found.
</listItem>
<bodyText confidence="0.98278403030303">
The above restriction does not in any way con-
strain adjunction at nodes that are not in the
spine of an auxiliary tree. Similarly, there is
no restriction on the adjunction of left or right
trees at the spines of wrapping trees.
Our restriction is fundamentally different
from those in (Schabes and Waters, 1993; Sch-
abes and Waters, 1995) and (Rogers, 1994),
in that we allow wrapping auxiliary trees to
nest inside each other an unbounded number
of times, so long as they only adjoin at one
place in each others&apos; spines. Rogers, in contrast,
restricts the nesting of wrapping auxiliaries to
a number of times bounded by the size of the
grammar, and Schabes and Waters forbid wrap-
ping auxiliaries altogether, at any node in the
grammar.
We now focus on the recognition problem,
and informally discuss the computational ad-
vantages that arise in this task when a TAG
obeys the above restriction. These ideas are
formally developed in the next section. Most of
&apos;The above names are also used in (Schabes and Wa-
ters, 1995) for slightly different kinds of trees.
the tabular methods for TAG recognition rep-
resent subtrees of derived trees, rooted at some
node N and having the same span within the
input string, by means of items of the form
(N,i,p,q, j). In this notation i, j are positions
in the input spanned by N, and p, q are posi-
tions spanned by the foot node, in case N be-
longs to the spine, as we assume in the discus-
sion below.
</bodyText>
<equation confidence="0.888713">
t t t
q
</equation>
<figureCaption confidence="0.994341">
Figure 1: 0(n6) wrapping adjunction step.
</figureCaption>
<bodyText confidence="0.999984533333333">
The most time expensive step in TAG recog-
nition is the one that deals with adjunction.
When we adjoin at N a derived auxiliary tree
rooted at some node R, we have to combine to-
gether two items (R, j, j1) and (N,i,p,q, j).
This is shown in Figure 1. This step involves
six different indices that could range over any
position in the input, and thus has a time cost
of 0(n6).
Let us now consider adjunction of wrapping
trees, and leave aside left and right trees for
the moment. Assume that no adjunction has
been performed in the portion of the spine
below N. Then none of the trees adjoined
below N will simultaneously affect the por-
tions of the tree yield to the left and to the
right of the foot node. In this case we can
safely split the tree yield and represent item
(N, i, p, q, j) by means of two items of a new
kind, (Nieft, 19) and (Nright, q, j). The adjunc-
tion step can now be performed by means of
two successive steps. The first step combines
(R,i&apos; j, j&apos;) and (Nieft, i,p), producing a new
intermediate item I. The second step combines
I and (Nright,q, j), producing the desired result.
In this way the time cost is reduced to 0(n6).
It is not difficult to see that the above rea-
soning also applies in cases where no adjunc-
tion has been performed at the portion of the
spine above N. This suggests that, when pro-
</bodyText>
<page confidence="0.994168">
1177
</page>
<figureCaption confidence="0.999179">
Figure 2: 0(n5) wrapping adjunction step.
</figureCaption>
<bodyText confidence="0.9999714">
cessing a TAG that obeys the restriction intro-
duced above, we can always &apos;split&apos; each wrap-
ping tree into four parts at the wrapping node
N, since N is the only site in the spine that
can host adjunction (see Figure 2(a)). Adjunc-
tion of a wrapping tree 13 at N can then be
simulated by four steps, executed one after the
other. Each step composes the item resulting
from the application of the previous step with
an item representing one of the four parts of the
wrapping tree (see Figure 2(b)).
We now consider adjunction involving left
and right trees, and show that a similar split-
ting along the spine can be performed. Assume
that -y is a derived auxiliary tree, obtained by
adjoining several left and right trees one at the
spine of the other. Let x and y be the part of
the yield of -y to the left and right, respectively,
of the foot node. From the definition of left
and right trees, we have that the nodes in the
spine of 7 have all the same nonterminal label.
Also, from condition 2 in the above restriction
we have that the left trees adjoined in 7 do not
constrain in any way the right trees adjoined in
-y. Then the following derivation can always be
performed. We adjoin all the left trees, each one
at the spine of the other, in such a way that the
resulting tree -yleft has yield x. Similarly, we ad-
joining all the right trees, one at the spine of the
other, in such a way that the yield of the result-
ing tree &apos;Yright is y. Finally, we adjoin -yright at
the root of -yieft, obtaining a derived tree having
the same yield as 7.
From the above observations it directly fol-
lows that we can always recognize the yield
of 7 by independently recognizing 710 and
&apos;Yright. Most important, 7ieft and -yright can be
represented by means of items (Rieft, i,p) and
(Rright,q, j). As before, the adjunction of tree
7 at some subtree represented by an item I can
be recognized by means of two successive steps,
one combining I with (Rieft,i,p) at its left, re-
sulting in an intermediate item I&apos;, and the sec-
ond combining I&apos; with (Rright, q, j) at its right,
obtaining the desired result.
</bodyText>
<sectionHeader confidence="0.99572" genericHeader="method">
3 Recognition
</sectionHeader>
<bodyText confidence="0.999987214285714">
This section presents the main result of the pa-
per. We provide an algorithm for the recogni-
tion of languages generated by the subclass of
TAGs introduced in the previous section, and
show that the worst case running time is 0(n5),
where n is the length of the input string. To
simplify the presentation, we assume the fol-
lowing conditions throughout this section: first,
that elementary trees are binary (no more than
two children at each node) and no leaf node is
labeled by e; and second, that there is always
a wrapping node in each wrapping tree, and it
differs from the foot and the root node. This is
without any loss of generality.
</bodyText>
<subsectionHeader confidence="0.997575">
3.1 Grammar transformation
</subsectionHeader>
<bodyText confidence="0.998701260869565">
Let G = (N, E, I, A) be a TAG obeying the re-
strictions of Section 2. We first transform A into
a new set of auxiliary trees A&apos; that will be pro-
cessed by our method. The root and foot nodes
of a tree )3 are denoted Ro and Fo, respectively.
The wrapping node (as defined in Section 2) of
0 is denoted W0.
Each left (right) tree 0 in A is inserted in
A&apos; and is called 13L, (0R). Let 0 be a wrapping
tree in A. We split 0 into four auxiliary trees, as
informally described in Section 2. Let OD be the
subtree of 0 rooted at Wo. We call 13u the tree
obtained from 0 by removing every descendant
of W0 (and the corresponding arcs). We remove
every node to the right (left) of the spine of 13D
and call 0L,D (ORD) the resulting tree. Similarly,
we remove every node to the right (left) of the
spine of Ou and call 0L,u
(PRO the resulting
tree. We set FAD and FoRD equal to F0, and
set FAL, and FRU equal to W. Trees Au,
13Ru, OLD, and /3RD are inserted in A&apos; for every
wrapping tree 0 in A.
</bodyText>
<figure confidence="0.656212">
(b):
</figure>
<page confidence="0.954665">
1178
</page>
<bodyText confidence="0.8551144">
Each tree in A&apos; inherits at its nodes the ad-
junction constraints specified in G. In addition,
we impose the following constraints:
• only trees f3L, can be adjoined at the spine
of trees OLD, f3i,u;
</bodyText>
<listItem confidence="0.957516">
• only trees OR can be adjoined at the spine
of trees ORD, 0Ru;
• no adjunction can be performed at nodes
FRLu FORu •
</listItem>
<subsectionHeader confidence="0.996472">
3.2 The algorithm
</subsectionHeader>
<bodyText confidence="0.997306470588236">
The algorithm below is a tabular method that
works bottom up on derivation trees. Follow-
ing (Shieber et al., 1995), we specify the algo-
rithm using inference rules. (The specification
has been optimized for presentation simplicity,
not for computational efficiency.)
Symbols N, P,Q denote nodes of trees in A&apos;
(including foot and root), a denotes initial trees
and 0 denotes auxiliary trees. Symbol label(N)
is the label of N and children(N) is a string
denoting all children of N from left to right
(children(N) is undefined if N is a leaf). We
write a E Sbst(N) if a can be substituted at
N. We write 0 E Adj(N) if 13 can be adjoined
at N, and nil E Adj(N) if adjunction at N is
optional.
We use two kind of items:
</bodyText>
<listItem confidence="0.825750142857143">
• Item (NX&apos;, j), X E {B, M, 2}, denotes a
subtree rooted at N and spanning the por-
tion of the input from i to j. Note that two
input positions are sufficient, since trees in
A&apos; always have their foot node at the posi-
tion of the leftmost or rightmost leaf. We
have X = B if N has not yet been pro-
cessed for adjunction, X = M if N has
been processed only for adjunction of trees
0L, and X = T if N has already been pro-
cessed for adjunction.
• Item (13,i,p, q, j) denotes a wrapping tree
[3 (in A) with Rs spanning the portion of
the input from i to j and with Fs spanning
the portion of the input from p to q. In
place of 0 we might use symbols [0, LD],
, RD] and [3, RU] to denote the tempo-
rary results of recognizing the adjunction
of some wrapping tree at W.
Algorithm. Let G be a TAG with the re-
strictions of Section 2, and let A&apos; be the asso-
</listItem>
<bodyText confidence="0.999893833333333">
ciated set of auxiliary trees defined as in sec-
tion 3.1. Let aia2 • • • an, n &gt; 1, be an input
string. The algorithm accepts the input if some
item (FILO, n) can be inferred for some a E I.
Step 1 This step recognizes subtrees with root
N from subtrees with roots in children(N).
</bodyText>
<equation confidence="0.9989843">
(NJ — 1,i)
label(N) = ai;
&apos;
,i,i) &apos; E A&apos;, 0 &lt; i n;
(RLi&apos;i) a E Sbst(N);
(NT i)
(PT ,i,k) (QT ,k, , children(N) = PQ;
i)
(PT ,i,)children(N) = P.
(1\7-
</equation>
<bodyText confidence="0.995464333333333">
Step 2 This step recognizes the adjunction of
wrapping trees at wrapping nodes. We rec-
ognize the tree hosting adjunction by compos-
ing its four &apos;chunks&apos;, represented by auxiliary
trees AD, ORD, ORU and 0Lu in A&apos;, around the
wrapped tree.
</bodyText>
<equation confidence="0.99523">
(RL ,k,p) (0&apos; ,i,k,q, j)
(1? 0, LD],i,p,q, j) 0&apos; E Adj (W 0), p &lt; q;
(RL,q,k) ([0, L.13],i,p,k, j)
([0, RD], p, q, j)
(RLu, k, j) ([0, RD], p, q, k)
([0, RU], p, q, j)
(Rku,i,k) ([0, RU],k,p,q, j)
(0, p, q, j)
(RSLD,i,p) (RLD,q, j) .
([0, RD], i,p, q, j) E Adj(147,3),p &lt; q.
</equation>
<bodyText confidence="0.802984">
Step 3 This step recognizes all remaining cases
of adjunction.
</bodyText>
<equation confidence="0.9890889">
(Rk , k) (NB ,k, j)
03EAdj(N), X E {M,7};
(NA .i)
(Nx,i,k) (RSR,k,j)
,OEAdj(N),X E{B,M};
(NT ,i,
(NB , .i)
j) , • E Adj(N);
(NB , p, q) (0, p, q, j)
(NTi) , 3 E Adj(N).
</equation>
<bodyText confidence="0.996746875">
Due to restrictions on space, we merely claim
the correctness of the above algorithm. We now
establish its worst case time complexity with re-
spect to the input string length n. We need to
consider the maximum number d of input posi-
tions appearing in the antecedent of an inference
rule. In fact, in the worst case we will have to
execute a number of different evaluations of each
</bodyText>
<page confidence="0.992352">
1179
</page>
<bodyText confidence="0.999969222222222">
inference rule which is proportional to nd, and
each evaluation can be carried out in an amount
of time independent of n. It is easy to establish
that Step 1 can be executed in time 0(n3) and
that Step 3 can be executed in time 0(n4). Ad-
junction at wrapping nodes performed at Step 2
is the most expensive operation, requiring an
amount of time 0(n5). This is also the time
complexity of our algorithm.
</bodyText>
<sectionHeader confidence="0.991381" genericHeader="method">
4 Linguistic Relevance
</sectionHeader>
<bodyText confidence="0.99996825">
In this section we will attempt to show that the
restricted formalism presented in Section 2 re-
tains enough generative power to make it useful
in the general case.
</bodyText>
<subsectionHeader confidence="0.979792">
4.1 Athematic and Complement Trees
</subsectionHeader>
<bodyText confidence="0.999977727272727">
We begin by introducing the distinction be-
tween athematic auxiliary trees and comple-
ment auxiliary trees (Kroch, 1989), which are
meant to exhaustively characterize the auxil-
iary trees used in any natural language TAG
grammar.2 An athematic auxiliary tree does
not subcategorize for or assign a thematic role
to its foot node, so the head of the foot node be-
comes the head of the phrase at the root. The
structure of an athematic auxiliary tree may
thus be described as:
</bodyText>
<equation confidence="0.677826">
xn -+ xn • • • (y—) • • • , (1)
</equation>
<bodyText confidence="0.999156625">
where Xn is any projection of category X, y max
is the maximal projection of Y, and the order of
the constituents is variable.3 A complement
auxiliary tree, on the other hand, introduces a
lexical head that subcategorizes for the tree&apos;s
foot node and assigns it a thematic role. The
structure of a complement auxiliary tree may be
.described as:
</bodyText>
<equation confidence="0.763329">
X&apos; If° Xmaz (2)
</equation>
<bodyText confidence="0.93629">
where Xmas is the maximal projection of some
category X, and Y° is the lexical projection
2The same linguistic distinction is used in the con-
ception of &apos;modifier&apos; and &apos;predicative&apos; trees (Schabes and
Shieber, 1994), but Schabes and Shieber give the trees
special properties in the calculation of derivation struc-
tures, which we do not.
</bodyText>
<footnote confidence="0.84582875">
3The CFG-like notation is taken directly
from (Kroch, 1989), where it is used to specify labels
at the root and frontier nodes of a tree without placing
constraints on the internal structure.
</footnote>
<bodyText confidence="0.664112333333333">
of some category Y, whose maximal projection
dominates X m&amp;quot;.
From this we make the following observations:
</bodyText>
<listItem confidence="0.96615675">
1. Because it does not assign a theta role to
its foot node, an athematic auxiliary tree
may adjoin at any projection of a category,
which we take to designate any adjunction
site in a host elementary tree.
2. Because it does assign a theta role to its
foot node, a complement auxiliary tree may
only adjoin at a certain &apos;complement&apos; ad-
junction site in a host elementary tree,
which must at least be a maximal projec-
tion of a lexical category.
3. The foot node of an athematic auxiliary
tree is dominated only by the root, with
no intervening nodes, so it falls outside of
the maximal projection of the head.
4. The foot node of a complement auxiliary
</listItem>
<bodyText confidence="0.914472266666667">
tree is dominated by the maximal projec-
tion of the head, which may also dominate
other arguments on either side of the foot.
To this we now add the assumption that each
auxiliary tree can have only one complement ad-
junction site projecting from Y°, where Y° is
the lexical category that projects Ym&amp;quot;. This
is justified in order to prevent projections of Y°
from receiving more than one theta role from
complement adjuncts, which would violate the
underlying theta criterion in Government and
Binding Theory (Chomsky, 1981).We also as-
sume that an auxiliary tree can not have com-
plement adjunction sites on its spine project-
ing from lexical heads other than Y°, in or-
der to preserve the minimality of elementary
trees (Kroch, 1989; Frank, 1992). Thus there
can be no more than one complement adjunc-
tion site on the spine of any complement auxil-
iary tree, and no complement adjunction site on
the spine of any athematic auxiliary tree, since
the foot node of an athematic tree lies outside
of the maximal projection of the head.4
41t is important to note that, in order to satisfy the
theta criterion and minimality, we need only constrain
the number of complement adjunctions — not the number
of complement adjunction sites — on the spine of an aux-
iliary tree. Although this would remain within the power
of our formalism, we prefer to use constraints expressed
in terms of adjunction sites, as we did in Section 2, be-
</bodyText>
<page confidence="0.984092">
1180
</page>
<bodyText confidence="0.99948825">
Based on observations 3 and 4, we can fur-
ther specify that only complement trees may
wrap, because the foot node of an athematic
tree lies outside of the maximal projection of the
head, below which all of its subcategories must
attach.5 In this manner, we can insure that only
one wrapping tree (the complement auxiliary)
can adjoin into the spine of a wrapping (com-
plement) auxiliary, and only athematic auxil-
iaries (which must be left/right trees) can ad-
join elsewhere, fulfilling our TAG restriction in
Section 2.
</bodyText>
<subsectionHeader confidence="0.999699">
4.2 Possible Extensions
</subsectionHeader>
<bodyText confidence="0.999893230769231">
We may want to weaken our definition to in-
clude wrapping athematic auxiliaries, in order
to account for modifiers with raised heads or
complements as in Figure 3: &amp;quot;They so revered
him that they built a statue in his honor.&amp;quot; This
can be done within the above algorithm as long
as the athematic trees do not wrap produc-
tively (that is as long as they cannot be ad-
joined one at the spine of the other) by splitting
the athematic auxiliary tree down the spine and
treating the two fragments as tree-local multi-
components, which can be simulated with non-
recursive features (Hockey and Srinivas, 1993).
</bodyText>
<figureCaption confidence="0.994751">
Figure 3: Wrapping athematic tree.
</figureCaption>
<bodyText confidence="0.999826">
Since the added features are non-recursive, this
extension would not alter the 0(n5) result re-
ported in Section 3.
</bodyText>
<subsectionHeader confidence="0.99985">
4.3 Comparison of Coverage
</subsectionHeader>
<bodyText confidence="0.9998485">
In contrast to the formalisms of Schabes and
Waters (Schabes and Waters, 1993; Schabes and
Waters, 1995), our restriction allows wrapping
complement auxiliaries as in Figure 4 (Schabes
and Waters, 1995). Although it is difficult to
find examples in English which are excluded by
</bodyText>
<footnote confidence="0.418107666666667">
cause it provides a restriction on elementary trees, rather
than on derivations.
5Except in the case of raising, discussed below.
</footnote>
<bodyText confidence="0.999495333333333">
Rogers&apos; regular form restriction (Rogers, 1994),
we can cite verb-raised complement auxiliary
trees in Dutch as in Figure 5 (Kroch and San-
torini, 1991). Trees with this structure may
adjoin into each others&apos; internal spine nodes
an unbounded number of times, in violation of
Rogers&apos; definition of regular form adjunction,
but within our criteria of wrapping adjunction
at only one node on the spine.
</bodyText>
<figure confidence="0.9716882">
(3: S
NP4 VP
V Ss PP
discern P
from
</figure>
<figureCaption confidence="0.943773">
Figure 4: Wrapping complement tree.
</figureCaption>
<figure confidence="0.836690666666667">
13:
NP4 VP laten
S V
</figure>
<figureCaption confidence="0.999514">
Figure 5: Verb-raising tree in Dutch.
</figureCaption>
<sectionHeader confidence="0.985536" genericHeader="conclusions">
5 Concluding remarks
</sectionHeader>
<bodyText confidence="0.999757">
Our proposal is intended to contribute to the
assessment of the computational complexity of
syntactic processing. We have introduced a
strict subclass of TAGs having the generative
power that is needed to account for the syntac-
tic constructions of natural language that unre-
stricted TAGs can handle. We have specified a
method that recognizes the generated languages
in worst case time 0(n5), where n is the length
of the input string. In order to account for the
dependency on the input grammar G, let us de-
fine I GI = EN (1 ± Adj(N) I), where N ranges
over the set of all nodes of the elementary trees.
</bodyText>
<figure confidence="0.991056555555555">
VP--- &apos; S wir
--------
Adv S&apos;
I /\
so C S4
that
VP
V
revered
</figure>
<page confidence="0.987419">
1181
</page>
<bodyText confidence="0.999523625">
It is not difficult to see that the running time of
our method is proportional to I G I.
Our method works as a recognizer. As for
many other tabular methods for TAG recogni-
tion, we can devise simple procedures in order
to obtain a derived tree associated with an ac-
cepted string. To this end, we must be able to
&apos;interleave&apos; adjunctions of left and right trees,
that are always kept separate by our recognizer.
The average case time complexity of our
method should surpass its worst case time per-
formance, as is the case for many other tabular
algorithms for TAG recognition. In a more ap-
plicative perspective, then, the question arises
of whether there is any gain in using an algo-
rithm that is unable to recognize more than one
wrapping adjunction at each spine, as opposed
to using an unrestricted TAG algorithm. As
we have tried to argue in Section 4, it seems
that standard syntactic constructions do not ex-
ploit multiple wrapping adjunctions at a single
spine. Nevertheless, the local ambiguity of nat-
ural language, as well as cases of ill-formed in-
put, could always produce cases in which such
expensive analyses are attempted by an unre-
stricted algorithm. In this perspective, then,
we conjecture that having the single-wrapping-
adjunction restriction embedded into the rec-
ognizer would improve processing efficiency in
the average case. Of course, more experimental
work would be needed in order to evaluate such
a conjecture, which we leave for future work.
</bodyText>
<sectionHeader confidence="0.999709" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<reference confidence="0.795520272727273">
Part of this research was done while the first
author was visiting the Institute for Research
in Cognitive Science, University of Pennsylva-
nia. The first author was supported by NSF
grant SBR8920230. The second author was sup-
ported by U.S. Army Research Office Contract
No. DAAH04-94G-0426. The authors would
like to thank Christy Doran, Aravind Joshi,
Anthony Kroch, Mark-Jan Nederhof, Marta
Palmer, James Rogers and Anoop Sarkar for
their help in this research.
</reference>
<sectionHeader confidence="0.962123" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999820694915254">
Noam Chomsky. 1981. Lectures on government and
binding. Foris, Dordercht.
Robert Frank. 1992. Syntactic locality and tree ad-
joining grammar: grammatical acquisition and
processing perspectives. Ph.D. thesis, Computer
Science Department, University of Pennsylvania.
Beth Ann Hockey and Srinivas Bangalore. 1993.
Feature-based TAG in place of multi-component
adjunction: computational implications. In Pro-
ceedings of the Natural Language Processing Pa-
cific Rim Symposium (NLPRS), Fukuoka, Japan.
Aravind K. Joshi. 1985. How much context sensitiv-
ity is necessary for characterizing structural de-
scriptions: Tree adjoining grammars. In L. Kart-
tunen D. Dowty and A. Zwicky, editors, Natural
language parsing: Psychological, computational
and theoretical perspectives, pages 206-250. Cam-
bridge University Press, Cambridge, U.K.
Anthony S. Kroch and Beatrice Santorini. 1991.
The derived constituent structure of west ger-
manic verb-raising construction. In Robert Frei-
din, editor, Principles and Parameters in Com-
parative Grammar, pages 269-338. MIT Press.
Anthony S. Kroch. 1989. Asymmetries in long dis-
tance extraction in a TAG grammar. In M. Baltin
and A. Kroch, editors, Alternative Conceptions
of Phrase Structure, pages 66-98. University of
Chicago Press.
Sanguthevar Rajasekaran and Shibu Yooseph. 1995.
TAL recognition in 0(M (n2)) time. In Proceed-
ings of the 33rd Annual Meeting of the Associa-
tion for Computational Linguistics (ACL &apos;95).
James Rogers. 1994. Capturing CFLs with tree
adjoining grammars. In Proceedings of the 32nd
Annual Meeting of the Association for Computa-
tional Linguistics (ACL &apos;94).
Giorgio Satta. 1994. Tree adjoining grammar pars-
ing and boolean matrix multiplication. Computa-
tional Linguistics, 20(2):173-192.
Yves Schabes and Aravind K. Joshi. 1991. Pars-
ing with lexicalized tree adjoining grammar. In
M. Tomita, editor, Current Issues in Parsing
Technologies. Kluwer Academic Publishers.
Yves Schabes and Stuart M. Shieber. 1994. An al-
ternative conception of tree-adjoining derivation.
Computational Linguistics, 20(1):91-124.
Yves Schabes and Richard C. Waters. 1993. Lexi-
calized context-free grammars. In Proceedings of
the 31st Annual Meeting of the Association for
Computational Linguistics (ACL &apos;93).
Yves Schabes and Richard C. Waters. 1995. Tree
insertion grammar: A cubic-time parsable formal-
ism that lexicalizes context-free grammar without
changing the trees produced. Computational Lin-
guistics, 21(4):479-515.
Stuart M. Shieber, Yves Schabes, and Fer-
nando C.N. Pereira. 1995. Principles and imple-
mentation of deductive parsing. Journal of Logic
Programming, 24:3-36.
</reference>
<page confidence="0.995745">
1182
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.902137">
<title confidence="0.99996">Restrictions on Tree Adjoining Languages</title>
<author confidence="0.999554">Giorgio Satta</author>
<affiliation confidence="0.9986315">Dip. di Elettronica e Informatica Universita di Padova</affiliation>
<address confidence="0.999981">35131 Padova, Italy</address>
<email confidence="0.99838">satta@dei.unipd.it</email>
<author confidence="0.999161">William Schuler</author>
<affiliation confidence="0.999814">Computer and Information Science Dept. University of Pennsylvania</affiliation>
<address confidence="0.999284">Philadelphia, PA 19103</address>
<email confidence="0.999512">schuler@linc.cis.upenn.edu</email>
<abstract confidence="0.994122">Several methods are known for parsing languages generated by Tree Adjoining Grammars in case running time. In this paper we investigate which restrictions on TAGs and TAG derivations are needed in order lower this time complexity, without introducing large runtime constants, and without losing any of the generative power needed to capture the syntactic constructions in natural language that can be handled by unrestricted TAGs. In particular, we describe an algorithm parsing a strict subclass of TAG in and attempt to show that this subclass retains enough generative power to make it useful in the general case.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="false">
<title>this research was done while the first author was visiting the Institute for Research in Cognitive Science, University of Pennsylvania. The first author was supported by NSF grant SBR8920230. The second author was supported by U.S.</title>
<journal>Army Research Office Contract</journal>
<volume>No.</volume>
<pages>04--94</pages>
<institution>Part of</institution>
<marker></marker>
<rawString>Part of this research was done while the first author was visiting the Institute for Research in Cognitive Science, University of Pennsylvania. The first author was supported by NSF grant SBR8920230. The second author was supported by U.S. Army Research Office Contract No. DAAH04-94G-0426. The authors would like to thank Christy Doran, Aravind Joshi, Anthony Kroch, Mark-Jan Nederhof, Marta Palmer, James Rogers and Anoop Sarkar for their help in this research.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Noam Chomsky</author>
</authors>
<title>Lectures on government and binding.</title>
<date>1981</date>
<location>Foris, Dordercht.</location>
<contexts>
<context position="17875" citStr="Chomsky, 1981" startWordPosition="3277" endWordPosition="3278">s outside of the maximal projection of the head. 4. The foot node of a complement auxiliary tree is dominated by the maximal projection of the head, which may also dominate other arguments on either side of the foot. To this we now add the assumption that each auxiliary tree can have only one complement adjunction site projecting from Y°, where Y° is the lexical category that projects Ym&amp;quot;. This is justified in order to prevent projections of Y° from receiving more than one theta role from complement adjuncts, which would violate the underlying theta criterion in Government and Binding Theory (Chomsky, 1981).We also assume that an auxiliary tree can not have complement adjunction sites on its spine projecting from lexical heads other than Y°, in order to preserve the minimality of elementary trees (Kroch, 1989; Frank, 1992). Thus there can be no more than one complement adjunction site on the spine of any complement auxiliary tree, and no complement adjunction site on the spine of any athematic auxiliary tree, since the foot node of an athematic tree lies outside of the maximal projection of the head.4 41t is important to note that, in order to satisfy the theta criterion and minimality, we need </context>
</contexts>
<marker>Chomsky, 1981</marker>
<rawString>Noam Chomsky. 1981. Lectures on government and binding. Foris, Dordercht.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Robert Frank</author>
</authors>
<title>Syntactic locality and tree adjoining grammar: grammatical acquisition and processing perspectives.</title>
<date>1992</date>
<tech>Ph.D. thesis,</tech>
<institution>Computer Science Department, University of Pennsylvania.</institution>
<contexts>
<context position="18095" citStr="Frank, 1992" startWordPosition="3316" endWordPosition="3317">is we now add the assumption that each auxiliary tree can have only one complement adjunction site projecting from Y°, where Y° is the lexical category that projects Ym&amp;quot;. This is justified in order to prevent projections of Y° from receiving more than one theta role from complement adjuncts, which would violate the underlying theta criterion in Government and Binding Theory (Chomsky, 1981).We also assume that an auxiliary tree can not have complement adjunction sites on its spine projecting from lexical heads other than Y°, in order to preserve the minimality of elementary trees (Kroch, 1989; Frank, 1992). Thus there can be no more than one complement adjunction site on the spine of any complement auxiliary tree, and no complement adjunction site on the spine of any athematic auxiliary tree, since the foot node of an athematic tree lies outside of the maximal projection of the head.4 41t is important to note that, in order to satisfy the theta criterion and minimality, we need only constrain the number of complement adjunctions — not the number of complement adjunction sites — on the spine of an auxiliary tree. Although this would remain within the power of our formalism, we prefer to use cons</context>
</contexts>
<marker>Frank, 1992</marker>
<rawString>Robert Frank. 1992. Syntactic locality and tree adjoining grammar: grammatical acquisition and processing perspectives. Ph.D. thesis, Computer Science Department, University of Pennsylvania.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Beth Ann Hockey</author>
<author>Srinivas Bangalore</author>
</authors>
<title>Feature-based TAG in place of multi-component adjunction: computational implications.</title>
<date>1993</date>
<booktitle>In Proceedings of the Natural Language Processing Pacific Rim Symposium (NLPRS),</booktitle>
<location>Fukuoka, Japan.</location>
<marker>Hockey, Bangalore, 1993</marker>
<rawString>Beth Ann Hockey and Srinivas Bangalore. 1993. Feature-based TAG in place of multi-component adjunction: computational implications. In Proceedings of the Natural Language Processing Pacific Rim Symposium (NLPRS), Fukuoka, Japan.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Aravind K Joshi</author>
</authors>
<title>How much context sensitivity is necessary for characterizing structural descriptions: Tree adjoining grammars.</title>
<date>1985</date>
<booktitle>Natural language parsing: Psychological, computational and theoretical perspectives,</booktitle>
<pages>206--250</pages>
<editor>In L. Karttunen D. Dowty and A. Zwicky, editors,</editor>
<publisher>Cambridge University Press,</publisher>
<location>Cambridge, U.K.</location>
<contexts>
<context position="3699" citStr="Joshi, 1985" startWordPosition="611" endWordPosition="612">ructions found in current natural language TAG analyses, that can be captured by our proposal but fall outside of the restrictions mentioned above. 2 Overview We introduce here the subclass of TAG that we investigate in this paper, and briefly compare it with other proposals in the literature. A TAG is a tuple G = (N, E, I, A, S), where N, E are the finite sets of nonterminal and terminal symbols, respectively, I, A are the finite 1176 sets of initial and auxiliary trees, respectively, and S E N is the initial symbol. Trees in I U A are also called elementary trees. The reader is referred to (Joshi, 1985) for the definitions of tree adjunction, tree substitution, and language derived by a TAG. The spine of an auxiliary tree is the (unique) path that connects the root and the foot node. An auxiliary tree 13 is called a right (left) tree if (i) the leftmost (rightmost, resp.) leaf in [3 is the foot node; and (ii) the spine of 3 contains only the root and the foot nodes. An auxiliary tree which is neither left nor right is called a wrapping tree.&apos; The TAG restriction we propose is stated as followed: 1. At the spine of each wrapping tree, there is at most one node that can host adjunction of a wr</context>
</contexts>
<marker>Joshi, 1985</marker>
<rawString>Aravind K. Joshi. 1985. How much context sensitivity is necessary for characterizing structural descriptions: Tree adjoining grammars. In L. Karttunen D. Dowty and A. Zwicky, editors, Natural language parsing: Psychological, computational and theoretical perspectives, pages 206-250. Cambridge University Press, Cambridge, U.K.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Anthony S Kroch</author>
<author>Beatrice Santorini</author>
</authors>
<title>The derived constituent structure of west germanic verb-raising construction.</title>
<date>1991</date>
<booktitle>Principles and Parameters in Comparative Grammar,</booktitle>
<pages>269--338</pages>
<editor>In Robert Freidin, editor,</editor>
<publisher>MIT Press.</publisher>
<contexts>
<context position="20649" citStr="Kroch and Santorini, 1991" startWordPosition="3747" endWordPosition="3751">he 0(n5) result reported in Section 3. 4.3 Comparison of Coverage In contrast to the formalisms of Schabes and Waters (Schabes and Waters, 1993; Schabes and Waters, 1995), our restriction allows wrapping complement auxiliaries as in Figure 4 (Schabes and Waters, 1995). Although it is difficult to find examples in English which are excluded by cause it provides a restriction on elementary trees, rather than on derivations. 5Except in the case of raising, discussed below. Rogers&apos; regular form restriction (Rogers, 1994), we can cite verb-raised complement auxiliary trees in Dutch as in Figure 5 (Kroch and Santorini, 1991). Trees with this structure may adjoin into each others&apos; internal spine nodes an unbounded number of times, in violation of Rogers&apos; definition of regular form adjunction, but within our criteria of wrapping adjunction at only one node on the spine. (3: S NP4 VP V Ss PP discern P from Figure 4: Wrapping complement tree. 13: NP4 VP laten S V Figure 5: Verb-raising tree in Dutch. 5 Concluding remarks Our proposal is intended to contribute to the assessment of the computational complexity of syntactic processing. We have introduced a strict subclass of TAGs having the generative power that is need</context>
</contexts>
<marker>Kroch, Santorini, 1991</marker>
<rawString>Anthony S. Kroch and Beatrice Santorini. 1991. The derived constituent structure of west germanic verb-raising construction. In Robert Freidin, editor, Principles and Parameters in Comparative Grammar, pages 269-338. MIT Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Anthony S Kroch</author>
</authors>
<title>Asymmetries in long distance extraction in a TAG grammar.</title>
<date>1989</date>
<booktitle>Alternative Conceptions of Phrase Structure,</booktitle>
<pages>66--98</pages>
<editor>In M. Baltin and A. Kroch, editors,</editor>
<publisher>University of Chicago Press.</publisher>
<contexts>
<context position="15319" citStr="Kroch, 1989" startWordPosition="2826" endWordPosition="2827">y to establish that Step 1 can be executed in time 0(n3) and that Step 3 can be executed in time 0(n4). Adjunction at wrapping nodes performed at Step 2 is the most expensive operation, requiring an amount of time 0(n5). This is also the time complexity of our algorithm. 4 Linguistic Relevance In this section we will attempt to show that the restricted formalism presented in Section 2 retains enough generative power to make it useful in the general case. 4.1 Athematic and Complement Trees We begin by introducing the distinction between athematic auxiliary trees and complement auxiliary trees (Kroch, 1989), which are meant to exhaustively characterize the auxiliary trees used in any natural language TAG grammar.2 An athematic auxiliary tree does not subcategorize for or assign a thematic role to its foot node, so the head of the foot node becomes the head of the phrase at the root. The structure of an athematic auxiliary tree may thus be described as: xn -+ xn • • • (y—) • • • , (1) where Xn is any projection of category X, y max is the maximal projection of Y, and the order of the constituents is variable.3 A complement auxiliary tree, on the other hand, introduces a lexical head that subcateg</context>
<context position="18081" citStr="Kroch, 1989" startWordPosition="3314" endWordPosition="3315">e foot. To this we now add the assumption that each auxiliary tree can have only one complement adjunction site projecting from Y°, where Y° is the lexical category that projects Ym&amp;quot;. This is justified in order to prevent projections of Y° from receiving more than one theta role from complement adjuncts, which would violate the underlying theta criterion in Government and Binding Theory (Chomsky, 1981).We also assume that an auxiliary tree can not have complement adjunction sites on its spine projecting from lexical heads other than Y°, in order to preserve the minimality of elementary trees (Kroch, 1989; Frank, 1992). Thus there can be no more than one complement adjunction site on the spine of any complement auxiliary tree, and no complement adjunction site on the spine of any athematic auxiliary tree, since the foot node of an athematic tree lies outside of the maximal projection of the head.4 41t is important to note that, in order to satisfy the theta criterion and minimality, we need only constrain the number of complement adjunctions — not the number of complement adjunction sites — on the spine of an auxiliary tree. Although this would remain within the power of our formalism, we pref</context>
</contexts>
<marker>Kroch, 1989</marker>
<rawString>Anthony S. Kroch. 1989. Asymmetries in long distance extraction in a TAG grammar. In M. Baltin and A. Kroch, editors, Alternative Conceptions of Phrase Structure, pages 66-98. University of Chicago Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sanguthevar Rajasekaran</author>
<author>Shibu Yooseph</author>
</authors>
<title>TAL recognition in 0(M (n2)) time.</title>
<date>1995</date>
<booktitle>In Proceedings of the 33rd Annual Meeting of the Association for Computational Linguistics (ACL &apos;95).</booktitle>
<contexts>
<context position="1286" citStr="Rajasekaran and Yooseph, 1995" startWordPosition="190" endWordPosition="193">re the syntactic constructions in natural language that can be handled by unrestricted TAGs. In particular, we describe an algorithm for parsing a strict subclass of TAG in 0(n6), and attempt to show that this subclass retains enough generative power to make it useful in the general case. 1 Introduction Several methods are known that can parse languages generated by Tree Adjoining Grammars (TAGs) in worst case time 0(n6), where n is the length of the input string (see (Schabes and Joshi, 1991) and references therein). Although asymptotically faster methods can be constructed, as discussed in (Rajasekaran and Yooseph, 1995), these methods are not of practical interest, due to large hidden constants. More generally, in (Satta, 1994) it has been argued that methods for TAG parsing running in time asymptotically faster than 0(n6) are unlikely to have small hidden constants. A careful inspection of the proof provided in (Satta, 1994) reveals that the source of the claimed computational complexity of TAG parsing resides in the fact that auxiliary trees can get adjunctions at (at least) two distinct nodes in their spine (the path connecting the root and the foot nodes). The question then arises of whether the bound of</context>
</contexts>
<marker>Rajasekaran, Yooseph, 1995</marker>
<rawString>Sanguthevar Rajasekaran and Shibu Yooseph. 1995. TAL recognition in 0(M (n2)) time. In Proceedings of the 33rd Annual Meeting of the Association for Computational Linguistics (ACL &apos;95).</rawString>
</citation>
<citation valid="true">
<authors>
<author>James Rogers</author>
</authors>
<title>Capturing CFLs with tree adjoining grammars.</title>
<date>1994</date>
<booktitle>In Proceedings of the 32nd Annual Meeting of the Association for Computational Linguistics (ACL &apos;94).</booktitle>
<contexts>
<context position="2821" citStr="Rogers, 1994" startWordPosition="455" endWordPosition="456"> twofold: • We define a strict subclass of TAG where adjunction of so-called wrapping trees at the spine is restricted to take place at no more than one distinct node. We show that in this case the parsing problem for TAG can be solved in worst case time 0(n6). • We provide evidence that the proposed subclass still captures the vast majority of TAG analyses that have been currently proposed for the syntax of English and of several other languages. Several restrictions on the adjunction operation for TAG have been proposed in the literature (Schabes and Waters, 1993; Schabes and Waters, 1995) (Rogers, 1994). Differently from here, in all those works the main goal was one of characterizing, through the adjunction operation, the set of trees that can be generated by a context-free grammar (CFG). For the sake of critical comparison, we discuss some common syntactic constructions found in current natural language TAG analyses, that can be captured by our proposal but fall outside of the restrictions mentioned above. 2 Overview We introduce here the subclass of TAG that we investigate in this paper, and briefly compare it with other proposals in the literature. A TAG is a tuple G = (N, E, I, A, S), w</context>
<context position="4862" citStr="Rogers, 1994" startWordPosition="822" endWordPosition="823"> at most one node that can host adjunction of a wrapping tree. This node is called a wrapping node. 2. At the spine of each left (right) tree, no wrapping tree can be adjoined and no adjunction constraints on right (left, resp.) auxiliary trees are found. The above restriction does not in any way constrain adjunction at nodes that are not in the spine of an auxiliary tree. Similarly, there is no restriction on the adjunction of left or right trees at the spines of wrapping trees. Our restriction is fundamentally different from those in (Schabes and Waters, 1993; Schabes and Waters, 1995) and (Rogers, 1994), in that we allow wrapping auxiliary trees to nest inside each other an unbounded number of times, so long as they only adjoin at one place in each others&apos; spines. Rogers, in contrast, restricts the nesting of wrapping auxiliaries to a number of times bounded by the size of the grammar, and Schabes and Waters forbid wrapping auxiliaries altogether, at any node in the grammar. We now focus on the recognition problem, and informally discuss the computational advantages that arise in this task when a TAG obeys the above restriction. These ideas are formally developed in the next section. Most of</context>
<context position="20545" citStr="Rogers, 1994" startWordPosition="3732" endWordPosition="3733">thematic tree. Since the added features are non-recursive, this extension would not alter the 0(n5) result reported in Section 3. 4.3 Comparison of Coverage In contrast to the formalisms of Schabes and Waters (Schabes and Waters, 1993; Schabes and Waters, 1995), our restriction allows wrapping complement auxiliaries as in Figure 4 (Schabes and Waters, 1995). Although it is difficult to find examples in English which are excluded by cause it provides a restriction on elementary trees, rather than on derivations. 5Except in the case of raising, discussed below. Rogers&apos; regular form restriction (Rogers, 1994), we can cite verb-raised complement auxiliary trees in Dutch as in Figure 5 (Kroch and Santorini, 1991). Trees with this structure may adjoin into each others&apos; internal spine nodes an unbounded number of times, in violation of Rogers&apos; definition of regular form adjunction, but within our criteria of wrapping adjunction at only one node on the spine. (3: S NP4 VP V Ss PP discern P from Figure 4: Wrapping complement tree. 13: NP4 VP laten S V Figure 5: Verb-raising tree in Dutch. 5 Concluding remarks Our proposal is intended to contribute to the assessment of the computational complexity of syn</context>
</contexts>
<marker>Rogers, 1994</marker>
<rawString>James Rogers. 1994. Capturing CFLs with tree adjoining grammars. In Proceedings of the 32nd Annual Meeting of the Association for Computational Linguistics (ACL &apos;94).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Giorgio Satta</author>
</authors>
<title>Tree adjoining grammar parsing and boolean matrix multiplication.</title>
<date>1994</date>
<journal>Computational Linguistics,</journal>
<pages>20--2</pages>
<contexts>
<context position="1396" citStr="Satta, 1994" startWordPosition="210" endWordPosition="211">ithm for parsing a strict subclass of TAG in 0(n6), and attempt to show that this subclass retains enough generative power to make it useful in the general case. 1 Introduction Several methods are known that can parse languages generated by Tree Adjoining Grammars (TAGs) in worst case time 0(n6), where n is the length of the input string (see (Schabes and Joshi, 1991) and references therein). Although asymptotically faster methods can be constructed, as discussed in (Rajasekaran and Yooseph, 1995), these methods are not of practical interest, due to large hidden constants. More generally, in (Satta, 1994) it has been argued that methods for TAG parsing running in time asymptotically faster than 0(n6) are unlikely to have small hidden constants. A careful inspection of the proof provided in (Satta, 1994) reveals that the source of the claimed computational complexity of TAG parsing resides in the fact that auxiliary trees can get adjunctions at (at least) two distinct nodes in their spine (the path connecting the root and the foot nodes). The question then arises of whether the bound of two is tight. More generally, in this paper we investigate which restrictions on TAGs are needed in order to </context>
</contexts>
<marker>Satta, 1994</marker>
<rawString>Giorgio Satta. 1994. Tree adjoining grammar parsing and boolean matrix multiplication. Computational Linguistics, 20(2):173-192.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yves Schabes</author>
<author>Aravind K Joshi</author>
</authors>
<title>Parsing with lexicalized tree adjoining grammar.</title>
<date>1991</date>
<booktitle>Current Issues in Parsing Technologies.</booktitle>
<editor>In M. Tomita, editor,</editor>
<publisher>Kluwer Academic Publishers.</publisher>
<contexts>
<context position="1154" citStr="Schabes and Joshi, 1991" startWordPosition="172" endWordPosition="175">) time complexity, without introducing large runtime constants, and without losing any of the generative power needed to capture the syntactic constructions in natural language that can be handled by unrestricted TAGs. In particular, we describe an algorithm for parsing a strict subclass of TAG in 0(n6), and attempt to show that this subclass retains enough generative power to make it useful in the general case. 1 Introduction Several methods are known that can parse languages generated by Tree Adjoining Grammars (TAGs) in worst case time 0(n6), where n is the length of the input string (see (Schabes and Joshi, 1991) and references therein). Although asymptotically faster methods can be constructed, as discussed in (Rajasekaran and Yooseph, 1995), these methods are not of practical interest, due to large hidden constants. More generally, in (Satta, 1994) it has been argued that methods for TAG parsing running in time asymptotically faster than 0(n6) are unlikely to have small hidden constants. A careful inspection of the proof provided in (Satta, 1994) reveals that the source of the claimed computational complexity of TAG parsing resides in the fact that auxiliary trees can get adjunctions at (at least) t</context>
</contexts>
<marker>Schabes, Joshi, 1991</marker>
<rawString>Yves Schabes and Aravind K. Joshi. 1991. Parsing with lexicalized tree adjoining grammar. In M. Tomita, editor, Current Issues in Parsing Technologies. Kluwer Academic Publishers.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yves Schabes</author>
<author>Stuart M Shieber</author>
</authors>
<title>An alternative conception of tree-adjoining derivation.</title>
<date>1994</date>
<journal>Computational Linguistics,</journal>
<pages>20--1</pages>
<contexts>
<context position="16280" citStr="Schabes and Shieber, 1994" startWordPosition="2998" endWordPosition="3001"> be described as: xn -+ xn • • • (y—) • • • , (1) where Xn is any projection of category X, y max is the maximal projection of Y, and the order of the constituents is variable.3 A complement auxiliary tree, on the other hand, introduces a lexical head that subcategorizes for the tree&apos;s foot node and assigns it a thematic role. The structure of a complement auxiliary tree may be .described as: X&apos; If° Xmaz (2) where Xmas is the maximal projection of some category X, and Y° is the lexical projection 2The same linguistic distinction is used in the conception of &apos;modifier&apos; and &apos;predicative&apos; trees (Schabes and Shieber, 1994), but Schabes and Shieber give the trees special properties in the calculation of derivation structures, which we do not. 3The CFG-like notation is taken directly from (Kroch, 1989), where it is used to specify labels at the root and frontier nodes of a tree without placing constraints on the internal structure. of some category Y, whose maximal projection dominates X m&amp;quot;. From this we make the following observations: 1. Because it does not assign a theta role to its foot node, an athematic auxiliary tree may adjoin at any projection of a category, which we take to designate any adjunction site</context>
</contexts>
<marker>Schabes, Shieber, 1994</marker>
<rawString>Yves Schabes and Stuart M. Shieber. 1994. An alternative conception of tree-adjoining derivation. Computational Linguistics, 20(1):91-124.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yves Schabes</author>
<author>Richard C Waters</author>
</authors>
<title>Lexicalized context-free grammars.</title>
<date>1993</date>
<booktitle>In Proceedings of the 31st Annual Meeting of the Association for Computational Linguistics (ACL &apos;93).</booktitle>
<contexts>
<context position="2779" citStr="Schabes and Waters, 1993" startWordPosition="447" endWordPosition="450">ed TAGs can handle. The contribution of this paper is twofold: • We define a strict subclass of TAG where adjunction of so-called wrapping trees at the spine is restricted to take place at no more than one distinct node. We show that in this case the parsing problem for TAG can be solved in worst case time 0(n6). • We provide evidence that the proposed subclass still captures the vast majority of TAG analyses that have been currently proposed for the syntax of English and of several other languages. Several restrictions on the adjunction operation for TAG have been proposed in the literature (Schabes and Waters, 1993; Schabes and Waters, 1995) (Rogers, 1994). Differently from here, in all those works the main goal was one of characterizing, through the adjunction operation, the set of trees that can be generated by a context-free grammar (CFG). For the sake of critical comparison, we discuss some common syntactic constructions found in current natural language TAG analyses, that can be captured by our proposal but fall outside of the restrictions mentioned above. 2 Overview We introduce here the subclass of TAG that we investigate in this paper, and briefly compare it with other proposals in the literatur</context>
<context position="4816" citStr="Schabes and Waters, 1993" startWordPosition="812" endWordPosition="815">followed: 1. At the spine of each wrapping tree, there is at most one node that can host adjunction of a wrapping tree. This node is called a wrapping node. 2. At the spine of each left (right) tree, no wrapping tree can be adjoined and no adjunction constraints on right (left, resp.) auxiliary trees are found. The above restriction does not in any way constrain adjunction at nodes that are not in the spine of an auxiliary tree. Similarly, there is no restriction on the adjunction of left or right trees at the spines of wrapping trees. Our restriction is fundamentally different from those in (Schabes and Waters, 1993; Schabes and Waters, 1995) and (Rogers, 1994), in that we allow wrapping auxiliary trees to nest inside each other an unbounded number of times, so long as they only adjoin at one place in each others&apos; spines. Rogers, in contrast, restricts the nesting of wrapping auxiliaries to a number of times bounded by the size of the grammar, and Schabes and Waters forbid wrapping auxiliaries altogether, at any node in the grammar. We now focus on the recognition problem, and informally discuss the computational advantages that arise in this task when a TAG obeys the above restriction. These ideas are f</context>
<context position="20166" citStr="Schabes and Waters, 1993" startWordPosition="3673" endWordPosition="3676">s can be done within the above algorithm as long as the athematic trees do not wrap productively (that is as long as they cannot be adjoined one at the spine of the other) by splitting the athematic auxiliary tree down the spine and treating the two fragments as tree-local multicomponents, which can be simulated with nonrecursive features (Hockey and Srinivas, 1993). Figure 3: Wrapping athematic tree. Since the added features are non-recursive, this extension would not alter the 0(n5) result reported in Section 3. 4.3 Comparison of Coverage In contrast to the formalisms of Schabes and Waters (Schabes and Waters, 1993; Schabes and Waters, 1995), our restriction allows wrapping complement auxiliaries as in Figure 4 (Schabes and Waters, 1995). Although it is difficult to find examples in English which are excluded by cause it provides a restriction on elementary trees, rather than on derivations. 5Except in the case of raising, discussed below. Rogers&apos; regular form restriction (Rogers, 1994), we can cite verb-raised complement auxiliary trees in Dutch as in Figure 5 (Kroch and Santorini, 1991). Trees with this structure may adjoin into each others&apos; internal spine nodes an unbounded number of times, in violat</context>
</contexts>
<marker>Schabes, Waters, 1993</marker>
<rawString>Yves Schabes and Richard C. Waters. 1993. Lexicalized context-free grammars. In Proceedings of the 31st Annual Meeting of the Association for Computational Linguistics (ACL &apos;93).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yves Schabes</author>
<author>Richard C Waters</author>
</authors>
<title>Tree insertion grammar: A cubic-time parsable formalism that lexicalizes context-free grammar without changing the trees produced.</title>
<date>1995</date>
<journal>Computational Linguistics,</journal>
<pages>21--4</pages>
<contexts>
<context position="2806" citStr="Schabes and Waters, 1995" startWordPosition="451" endWordPosition="454">ntribution of this paper is twofold: • We define a strict subclass of TAG where adjunction of so-called wrapping trees at the spine is restricted to take place at no more than one distinct node. We show that in this case the parsing problem for TAG can be solved in worst case time 0(n6). • We provide evidence that the proposed subclass still captures the vast majority of TAG analyses that have been currently proposed for the syntax of English and of several other languages. Several restrictions on the adjunction operation for TAG have been proposed in the literature (Schabes and Waters, 1993; Schabes and Waters, 1995) (Rogers, 1994). Differently from here, in all those works the main goal was one of characterizing, through the adjunction operation, the set of trees that can be generated by a context-free grammar (CFG). For the sake of critical comparison, we discuss some common syntactic constructions found in current natural language TAG analyses, that can be captured by our proposal but fall outside of the restrictions mentioned above. 2 Overview We introduce here the subclass of TAG that we investigate in this paper, and briefly compare it with other proposals in the literature. A TAG is a tuple G = (N,</context>
<context position="4843" citStr="Schabes and Waters, 1995" startWordPosition="816" endWordPosition="820">of each wrapping tree, there is at most one node that can host adjunction of a wrapping tree. This node is called a wrapping node. 2. At the spine of each left (right) tree, no wrapping tree can be adjoined and no adjunction constraints on right (left, resp.) auxiliary trees are found. The above restriction does not in any way constrain adjunction at nodes that are not in the spine of an auxiliary tree. Similarly, there is no restriction on the adjunction of left or right trees at the spines of wrapping trees. Our restriction is fundamentally different from those in (Schabes and Waters, 1993; Schabes and Waters, 1995) and (Rogers, 1994), in that we allow wrapping auxiliary trees to nest inside each other an unbounded number of times, so long as they only adjoin at one place in each others&apos; spines. Rogers, in contrast, restricts the nesting of wrapping auxiliaries to a number of times bounded by the size of the grammar, and Schabes and Waters forbid wrapping auxiliaries altogether, at any node in the grammar. We now focus on the recognition problem, and informally discuss the computational advantages that arise in this task when a TAG obeys the above restriction. These ideas are formally developed in the ne</context>
<context position="20193" citStr="Schabes and Waters, 1995" startWordPosition="3677" endWordPosition="3680">bove algorithm as long as the athematic trees do not wrap productively (that is as long as they cannot be adjoined one at the spine of the other) by splitting the athematic auxiliary tree down the spine and treating the two fragments as tree-local multicomponents, which can be simulated with nonrecursive features (Hockey and Srinivas, 1993). Figure 3: Wrapping athematic tree. Since the added features are non-recursive, this extension would not alter the 0(n5) result reported in Section 3. 4.3 Comparison of Coverage In contrast to the formalisms of Schabes and Waters (Schabes and Waters, 1993; Schabes and Waters, 1995), our restriction allows wrapping complement auxiliaries as in Figure 4 (Schabes and Waters, 1995). Although it is difficult to find examples in English which are excluded by cause it provides a restriction on elementary trees, rather than on derivations. 5Except in the case of raising, discussed below. Rogers&apos; regular form restriction (Rogers, 1994), we can cite verb-raised complement auxiliary trees in Dutch as in Figure 5 (Kroch and Santorini, 1991). Trees with this structure may adjoin into each others&apos; internal spine nodes an unbounded number of times, in violation of Rogers&apos; definition o</context>
</contexts>
<marker>Schabes, Waters, 1995</marker>
<rawString>Yves Schabes and Richard C. Waters. 1995. Tree insertion grammar: A cubic-time parsable formalism that lexicalizes context-free grammar without changing the trees produced. Computational Linguistics, 21(4):479-515.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stuart M Shieber</author>
<author>Yves Schabes</author>
<author>Fernando C N Pereira</author>
</authors>
<title>Principles and implementation of deductive parsing.</title>
<date>1995</date>
<journal>Journal of Logic Programming,</journal>
<pages>24--3</pages>
<contexts>
<context position="11570" citStr="Shieber et al., 1995" startWordPosition="2089" endWordPosition="2092">esulting tree. We set FAD and FoRD equal to F0, and set FAL, and FRU equal to W. Trees Au, 13Ru, OLD, and /3RD are inserted in A&apos; for every wrapping tree 0 in A. (b): 1178 Each tree in A&apos; inherits at its nodes the adjunction constraints specified in G. In addition, we impose the following constraints: • only trees f3L, can be adjoined at the spine of trees OLD, f3i,u; • only trees OR can be adjoined at the spine of trees ORD, 0Ru; • no adjunction can be performed at nodes FRLu FORu • 3.2 The algorithm The algorithm below is a tabular method that works bottom up on derivation trees. Following (Shieber et al., 1995), we specify the algorithm using inference rules. (The specification has been optimized for presentation simplicity, not for computational efficiency.) Symbols N, P,Q denote nodes of trees in A&apos; (including foot and root), a denotes initial trees and 0 denotes auxiliary trees. Symbol label(N) is the label of N and children(N) is a string denoting all children of N from left to right (children(N) is undefined if N is a leaf). We write a E Sbst(N) if a can be substituted at N. We write 0 E Adj(N) if 13 can be adjoined at N, and nil E Adj(N) if adjunction at N is optional. We use two kind of items</context>
</contexts>
<marker>Shieber, Schabes, Pereira, 1995</marker>
<rawString>Stuart M. Shieber, Yves Schabes, and Fernando C.N. Pereira. 1995. Principles and implementation of deductive parsing. Journal of Logic Programming, 24:3-36.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>