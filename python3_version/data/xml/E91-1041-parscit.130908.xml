<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000063">
<title confidence="0.4632815">
A DIALOGUE MANAGER USING INITIATIVE-RESPONSE UNITS AND
DISTRIBUTED CONTROL
</title>
<author confidence="0.968892">
Arne JOnsson
</author>
<affiliation confidence="0.9894305">
Department of Computer and Information Science
Linkoping University
</affiliation>
<address confidence="0.8949205">
S- 581 83 LINKOPING, SWEDEN
Phone: +46 13281717
</address>
<email confidence="0.994306">
Email: ARJ@IDA.LIU.SE
</email>
<sectionHeader confidence="0.995468" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.99995185">
This paper describes a system for managing dialogue
in a natural language interface. The proposed approach
uses a dialogue manager as the overall control mecha-
nism. The dialogue manager accesses domain independ-
ent resources for interpretation, generation and back-
ground system access. It also uses information from do-
main dependent knowledge sources, which are custom-
ized for various applications.
Instead of using complex plan-based reasoning, the
dialogue manager uses information about possible inter-
action structures and information from the specific dia-
logue situation to manage the dialogue. This is
motivated from the analysis of a series of experiments
where users interacted with a simulated natural language
interface. The dialogue manager integrates information
about segment types and moves into a hierarchical dia-
logue tree. The dialogue tree is accessed through a score-
board which uses exchangeable access functions. The
control is distributed and the dialogue is directed from
action plans in the nodes in the dialogue tree.
</bodyText>
<sectionHeader confidence="0.998992" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999867223880597">
To achieve true cooperation a natural language inter-
face must be able to participate in a coherent dialogue
with the user. A common, generally applicable approach
is to use plan-inference as a basis for reasoning about in-
tentions of the user as proposed by, for instance, Allen &amp;
Perrault (1980), Litman (1986), Carberry (1989) and
Pollack (1986). However, computationally these ap-
proaches are not so efficient.
Reichman (1985) describes a discourse grammar
based on the assumption that a conversation can be de-
scribed using conventionalized discourse rules. Gilbert,
Buckland, Frolich, Jirotka &amp; Luff (1990) uses interac-
tion rules in their menu-based advisory system. Our ap-
proach is similar to Reichman and Gilbert et al. In a
series of experiments (Dahlback &amp; Jtinsson, 1989, Jons-
son &amp; Dahlback, 1988) we studied dialogue behaviour in
an information-seeking interaction between a human and
a computer using a simulated natural language interface
(NLI). One important result was that the users followed
a rather straightforward information searching strategy
which could be well described using conventionalized
rules.
Reichman uses surface linguistic phenomena for rec-
ognizing how the speaker&apos;s structure the discourse. We
found, however, very little use of surface linguistic cues
in our dialogues. In our corpus users normally initiate a
request for information, which is followed by an answer
from the system. Sometimes the request needs clarifica-
Lion before the answer can be given as a response to the
initial question (this is illustrated in section 4 and 5). Op-
tionally the user can interrupt the original question and
start a new initiativeâ€”response unit, but this also follows
the goals of information-seeking. Thus, we adopt a strat-
egy in which we employ the notion of adjacency pairs
(Schegloff &amp; Sacks, 1973, see also Levinson, 1983:
3031). In our approach the dialogue is planned and utter-
ances are interpreted in terms of speech acts. The speech
acts are determined on the basis of structural information
in the utterance and in the immediate context.
Further, we found, in our experiments, that different
configurations of the background system (e.g. data base,
consultation) and task to solve (e.g. information retriev-
al, configuration) require different mechanisms for han-
dling dialogue in an NLI (Jonsson, 1990). Therefore, one
major design criterion is that the system should be easy
to adapt (customize) to a new application.
The natural language interface described in this paper
is constructed on the assumption that different applica-
tions have different sublanguages (Grishman &amp; Kit-
tredge, 1987), i.e. subsets of a natural language. A sub-
language is not only defined by a grammar and lexicon,
but also by interaction behaviour, i.e factors such as how
the user and system handle clarifications, who takes the
initiative, what is cooperative in a certain application,
what are the user categories and so on.
The dialogue manager operates as the central control-
ler in the NLI (Ahrenberg, DahlbAck &amp; Masson, 1990).
It passes information encoded in directed acyclic graphs
(dags) between different modules for parsing, genera-
tion, etc. This paper, however, only describes the dia-
logue manager&apos;s role in the control of the dialogue. I
assume that the dag&apos;s correctly describe the full meaning
of the user&apos;s input. For a discussion of interpretation of
user input in this system see Ahrenberg (1988). The dia-
logue manager is implemented in CommonLisp but is
currently not completely integrated with the other mod-
ules of the system.
</bodyText>
<equation confidence="0.282148">
- 233 -
</equation>
<figureCaption confidence="0.999396">
Figure 1. Overview of the architecture
</figureCaption>
<figure confidence="0.9997285">
TRANSLATION
PRINCIPLES
DIALOGUE &apos;our
MANAGER
( PARSER
GRAMMAR
LEXICON
INSTANTIATOR
DOMAIN
OBJECTS
(GENERATOR
DEEP
DIALOGUE
TREE/
SCORE
BOARD
(
SURFACE&apos;
GENERATOR)
DIALOGUE
OBJECTS
A
</figure>
<sectionHeader confidence="0.78253" genericHeader="introduction">
2 The dialogue manager
</sectionHeader>
<bodyText confidence="0.999502567567568">
The dialogue manager (DM) is the kernel in the natu-
ral language interface, see figure 1. It directs the dia-
logue, assists the instantiator and deep generator and
communicates with the background system. DM can be
viewed as a controller of resources and knowledge
sources.
The resources in our system are a chart parser
(Wiren, 1988), an instantiator which links the linguistic
object descriptions to objects in the universe of discourse
(Ahrenberg, 1989), a translator which translates the in-
stantiated structures into a form suitable for accessing
the background system&apos; and finally a deep and a surface
generator for generating a system utterance. These re-
sources are domain independent processes accessing
various knowledge sources.
The knowledge sources are domain dependent and
implemented in the same knowledge base system and
can be modified for each new application. We use a lexi-
con for general and domain-specific- vocabulary and a
grammar with knowledge of syntactic constructions and
their semantic impact. Furthermore, we use descriptions
of dialogue objects, i.e. segments and moves and their
associated information (section 3) and domain object de-
scriptions which contain relations between the concepts
used to describe objects in the background system and
constraints on them.
The need for domain object information in a natural
language database interface has been argued for by for
instance Copestake &amp; Sparck Jones (1990) and McCoy
&amp; Cheng (1988). The domain objects are primarily used
by the instantiator and deep generator, but the translator,
parser and surface generator can also use this informa-
tion. For a discussion on domain objects in this system
see Ahrenberg, Jonsson &amp; Dahlback (1990).
Each input or output from the resources passes via
the dialogue manager (DM). A typical segment begins
with an input from the user that is sent to the DM which
</bodyText>
<footnote confidence="0.802277">
1. Initially we use only a relational database system.
</footnote>
<bodyText confidence="0.999617888888889">
passes it to the parser. The parser sends its result to the
DM which passes it to the instantiator where it is en-
hanced with referential information. This is sent to the
translator which accesses the background system and if
the access succeeds, informs the DM. The DM forwards
the information to the deep generator where an enhanced
description is created which is sent to the surface genera-
tor and finally a response is given from the DM to the
user. This has the advantage that the DM always has
control over what happens in the system. Thus, if one
module does not succeed with its task, the DM directs
the recovery. For instance, if the translator cannot access
the data base due to lack of information from the user,
the DM receives information from the translator that
there is information missing and then in turn calls the
deep and surface generators to produce a suitable mes-
sage to the user. The DM then waits for input to provide
to the parser and1 instantiator. Finally, the DM tries to in-
tegrate the new information with the previous informa-
tion.
Internally the dialogue manager maintains three dy-
namic structures for monitoring the dialogue: the dia-
logue tree (section 4) where the dialogue history is kept,
action plans (section 5) for controlling the dialogue and
finally a scoreboard (section 6) which constitutes the in-
terface between the dialogue tree and other modules of
the system.
</bodyText>
<sectionHeader confidence="0.988169" genericHeader="method">
3 Dialogue objects
</sectionHeader>
<bodyText confidence="0.9842886875">
Dialogue objects play a central role in this architec-
ture. The dialogue objects consist of two components,
one is a process description of a prototypical use of the
dialogue object. This is described below. Tho other con-
tains static information about speaker, hearer, type, top-
ic, context and different types of descriptors to describe
salient objects, e.g. the focused object, potential focused
objects and optionally the current set. The current set
records which subset of the data base that is currently
used. We found in our data base dialogues that the user
often restricts the possible candidates in a database
- 234 -
search. For 4n example consider the dialogue fragment
in example 1&apos;.
S7&gt; Most of the cars consume less than 1 litre/10km,
be more specific
</bodyText>
<figure confidence="0.830824380952381">
U8&gt; 0.7 litre/10km
&apos;S9&gt; Daihatsu Charade Fiat Uno
Ford Fiesta Honda Civic
Lancia Y10/A112 Mazda 323
Mitsubishi Colt Nissan Micra
Nissan Cherry Opel Corsa
Peugeot 205 Opel Kadett
Renault 5 Toyota Starlet
Toyota Corolla Volkswagen Polo
U10&gt; Which five consume least? Rank them
S11&gt;Daihatsu Charade
Fiat Uno
Nissan Micra
Toyota Starlet
Honda Civic
U12&gt; Which of these is safest
S13&gt; They are all equal except Nissan Micra which is
the worst
U14&gt;Which one is easiest to handle?
S15&gt;No information
Example 1
</figure>
<bodyText confidence="0.999370828571429">
First the user specifies a set of cars in utterance U8&gt;,
presented by the system in S9&gt;. This set is however, too
large, therefore in utterance U10&gt; it is reduced. In the se-
quence of utterances U12&gt; to S15&gt;, Current set consists
of the cars presented in Ul l&gt;. Current set does not have
to be explicit as in example 1, instead it can be described
by constraints. For instance, in a travel data base the user
may be interested in a trip to Greek islands which re-
stricts the search in the database to Greek islands for a
large part of the ensuing dialogue.
The communication is hierarchically structured using
three different categories of dialogue objects. There are
various proposals as to the number of levels needed. The
system developed by Polanyi &amp; Scha (1984) uses five
different levels to hierarchically structure a dialogue and
LOKI (Wachtel, 1986) uses four. In LOKI the levels are:
conversation, dialogue, exchange and move. When ana-
lysing our dialogues we found no certain criteria con-
cerning how to divide a dialogue intua set of exchanges.
Therefore we only use three different dialogue object
types: dialogue, initiative-response-unit (IR) and move.
Dialogue, in our notation, is similar to conversation in
LOKI, while IR-units resemble exchanges. IR-units are
recursive and, unlike LOKI, we allow arbitrary embed-
ding of IR-units.
The smallest unit handled by our dialogue manager is
the move. An utterance can consist of more than one
move and is thus regarded as a sequence of moves. A
move object is used for describing information about a
move. Moves are categorized according to the type of il-
locutionary act and topic. Some typical move types are:
Question (Q), Assertion (AS), Answer (A) and Directive
(DI). Topic describes which knowledge source to con-
sult: the background system, i.e. solving a task (1), the
ongoing dialogue (D) or the organisation of the back-
</bodyText>
<footnote confidence="0.564447">
1. The dialogue is an English translation of a dialogue from
our corpus of Swedish dialogues collected in Wizard-of-Oz
simulations. It is continued in section 4.
</footnote>
<bodyText confidence="0.999658290322581">
ground system (S). For brevity when we refer to a move
with its associated topic, the move type is subscribed
with topic, e.g. Qr.
Normally an exchange of information begins with an
initiative followed by a response (IR). The initiative can
come from the system or the user. A typical IR-unit in a
question-answer database application is a task-related
question followed by a successful answer Qr/Arr. Other
typical IR-units are: Qs/As for a clarification request
from the user, QT/ASS when the requested information is
not in the database, QD/AD for questions about the ongo-
ing dialogue.
The dialogue manager uses a dialogue tree (section 4)
as control structure. The root node is of type Dialogue
(the D-node) and controls the overall interaction. When
an IR-unit is finished it returns control to the D-node.
The D-node creates an instance of a new IR-unit with in-
formation about initiator and responder. It also copies
relevant information about salient objects and attributes
from the previous IR-unit to the new one. Our simula-
tions show that users prefer coherence in the dialogue.
Thus, we use the heuristic that no information explicitly
changed is duplicated from one IR-unit to the next.
As stated above, an instance of a dialogue object has
one component describing static information about initi-
ator, responder, salient objects etc., and another describ-
ing the process, i.e. the actions performed when
executing the object. We call this a plan, although if we
were to follow Pollack (1990) we could call it recipe-for-
actions. Figure 2 shows a template description for an IR-
unit used in a database information-seeking application.
</bodyText>
<figureCaption confidence="0.999559">
Figure 2. A template description for IR-units
</figureCaption>
<bodyText confidence="0.9999298">
The static component forms the context in which the
processes are executed. The attributes are updated with
new values during the execution of the action plan. For
instance, a user JR-unit, i.e. an IR-unit which waits for a
user initiative to be interpreted, has no value for the Initi-
ative and Response slots until the initiative has been in-
terpreted. This is discussed further in section 4.
The process component of the IR-unit is divided into
two different plan descriptions, one if the system initiat-
ed the segment and another for a user-initiated segment.
</bodyText>
<figure confidence="0.760955043478261">
Class: IR
Topic: Tv Dv S
Context: link to father
Initiator: System v User
Responder: System v User
Type: type of IR-unit e.g. 0/A
Initiative type: e.g.
Response type: e.g. A
Turns: list of daughter nodes
CurrentObject:
CurrentAttribute:
CurrentSet:
CurrentRequest:
Enitiator = User]
Enitiator . System3--) [ Process: ((create-move system)
_
(create-move user)
NO)
Trocess: ((create-move user) â€”
(access)
(create-move system)
(un))
- 235 -
</figure>
<bodyText confidence="0.99873384375">
However, as can be seen in figure 2, they use the same
general actions for creating moves, acting and traversing
the tree (up). The actions behave differently depending
on the static description, for instance the action (access)
uses the value of the slot Topic to determine which
knowledge source to consult. Information about values
of attributes describing the request for information is
found in the dag structure delivered by the instantiator
which is passed to the translator by the dialogue manag-
er. The slot CurrentRequest contains the request formed
by the translator and is used for clarifications.
In database applications the system behaves as a user-
directed interface. It initiates an IR-unit only for clarifi-
cation requests, either because 1) difficulties arise when
interpreting the utterance, or 2) difficulties arise when
accessing the data base, e.g. when the user needs to pro-
vide a parameter for correct access, see S17&gt; in example
2 below, or finally 3) if difficulties arise in the presenta-
tion of the result from the data base access. The action to
take after a clarification request is first to check the va-
lidity of the response and then to propagate the informa-
tion to the node which initiated the clarification.
In other applications, e.g. tutoring or consultation
systems, the behaviour need not be user-directed. Instead
it may be system-directed or mixed initiative. In our ap-
proach this is achieved by customizing the dialogue ob-
jects, section 7.
For move-units there are two different process de-
scriptions, one for user moves and one for system
moves. The user move has the plan ((parse) (instantiate)
(up)) and the system move has the plan ((deep-generate)
(surface-generate) (up)).
</bodyText>
<sectionHeader confidence="0.954597" genericHeader="method">
4 The dialogue tree
</sectionHeader>
<bodyText confidence="0.9999243">
The dialogue tree represents the dialogue as it devel-
ops in the interaction. Information about salient objects
is represented in the dialogue tree and is used by the in-
stantiator and deep generator. The dialogue manager up-
dates the dialogue tree for each new move.
An important feature of the dialogue manager is dis-
tributed control. Every node in the tree is responsible for
its own correctness. For instance, the plan for a task re-
lated question-answer, QT/Ar, contains no reparation
strategies for missing information to the background sys-
tem. If the interpreter fails to access the data base due to
lack of information, the translator signals this to the DM
which creates an instance of an IR-unit for a clarification
request and inserts it into the Qr/AT. The plan for clarifi-
cation request then generates a move explaining the
missing information and creates a user move waiting for
the user input. This has the advantage that the plans are
very simple, as they only have local scope, cf. sections 3
and 6. Furthermore, the plans are more generally appli-
cable.
</bodyText>
<footnote confidence="0.479034428571428">
U16&gt; I would like a car with a large boot
S17&gt; How big (litres)?
U18&gt; I don&apos;t know
S19&gt; They vary in size from about 200-350 litres
U20&gt; I want at least 300 litres.
S21&gt; BMW 318/320
Example 2
</footnote>
<bodyText confidence="0.999663461538461">
The tree is built bottom up but with a top down pre-
diction from the context. This is illustrated in the dia-
logue in example 2, which will generate a dialogue tree
with clarifications on two levels. Initially the D-node
creates an instance of an IR-node and inserts it into the
tree, i.e. creates links between the IR-node and the D-
node. The IR-node creates an instance of a user move.
The move node parses and instantiates U16&gt; successful-
ly as an AST and then integrates it into the tree. Informa-
tion from the move-node is then available also at the IR-
node whose type can be determined as AST/AT. When
the database is accessed from this node, the translator
finds that there is a need for clarification, in this case
concerning the use of the word large in connection with
a boot. This creates a plan which first prompts the user
with a question, S17&gt;, and then waits for the user to give
an answer. Here the user does not answer but instead ex-
presses a request for clarification, U18&gt;. This is shown
in part 1) of figure 3 as the clarification IR-unit, QSs/As.
The fact that U18&gt; constitutes a clarification request and
not an answer to S17&gt; is decided after the creation of the
user move from U18&gt;. When the DM receives the inter-
pretation from the instantiator, it does not satisfy the ex-
pectation for an answer, and so it has to instantiate a new
IR-unit for clarification request which is connected to the
previously created IR-clarification request (QT/Ar).
</bodyText>
<figure confidence="0.998207875">
1) D
AST/Air
AST %Orr
U16/
QT Qs/As
S17 /
Qs
U18
</figure>
<figureCaption confidence="0.999955">
Figure 3. A dialogue tree
</figureCaption>
<bodyText confidence="0.999648166666667">
Utterance U18&gt; in the context of the Qr/AT IR-unit
indicates that the user needs some information about the
background system and it is thus interpreted as Qs. This
information is supplied in S19&gt;. For the next utterance,
U20&gt;, a new user move is created which is integrated
into the tree as an answer to the original clarification re-
quest. This information is propagated up to the first node
AST/Ar which now can form an answer to the first ques-
tion S21&gt;, part 2) in figure 3. The next step (not shown
in figure 3) is to generate a new IR-unit under D which
will generate a new user move and the system is ready
for further user input.
</bodyText>
<sectionHeader confidence="0.938697" genericHeader="method">
5 The action plan
</sectionHeader>
<bodyText confidence="0.9999832">
The plan describing a prototypical use of an object is
pushed onto a stack called the action plan. In accordance
with our distributed design, each node maintains its own
stack, see figure 5. The overall control strategy is that the
stack top is popped and executed. Complex plans, as
when the query to the data base needs clarification, are
handled with the same control mechanism. The dialogue
manager then updates the action plan of the current node
with an action for creating an instance of a ,clarification
request dialogue object and another action&apos; to integrate
</bodyText>
<equation confidence="0.750064444444444">
2) D
AST/Ar
AST QT AT Ar
U16 S21
QT Qs/A Ar
S17 U20
Qs As
U18 S19
- 236 -
</equation>
<bodyText confidence="0.999436222222222">
new information. The DM pops the stack of the current
node and executes that action. When this new exchange
is completed the result is integrated into the node which
initiated the clarification.
Again, consider the dialogue tree in figure 3. Part 1)
in figure 4 shows the stack for the node AST/AT before
processing U16&gt;, i.e. before the move node is created
which parses and instantiates the move. At this time the
node type is not known.
</bodyText>
<figure confidence="0.965773">
1)
2)
</figure>
<figureCaption confidence="0.999911">
Figure 4. The action plan for an IR-node
</figureCaption>
<bodyText confidence="0.999829548387097">
Popping the action (create-move user) results in the
creation of a move node which is ready to interpret a
user input. The move node has a plan of its own: ((parse)
(instantiate) (up)). When U16&gt; is interpreted in the move
node, AST in figure 3, the move node ends with the ac-
tion (up) which tries to find a corresponding father. In
this case it succeeds with the IR-unit from which the
move node was created and the dialogue is controlled
from this node, now AST/AT. The stack top is now (ac-
cess) which in this case uses the topic T, i.e. a data base
access. However, the data base access does not succeed.
Therefore a call for clarification, an action for later inte-
grating the new information into the old request and a
new call to (access) is placed on the stack. This is seen
in part 2) of figure 4. The action (access) has different
repair strategies for the different clarification request
types described above. Similar repair strategies apply to
all actions.
The stack top is an action which creates a known IR-
unit asking for a data base access parameter. This action
then creates the Qr/Arnode in figure 3. Now this node
will have its own action plan stack from which process-
ing is controlled. This node is also responsible for the
correctness of the answer given from the user, which in
this case results in a new clarification request. This does
not affect the node AST/AT instead the clarifications are
processed and eventually control is returned to the node
AST/Ar and the new information is integrated into its old
request, stored in CurrentRequest.
The two clarification nodes, QT/Ar, Qs/As, in figure 3
behave in a similar fashion.
</bodyText>
<sectionHeader confidence="0.995173" genericHeader="method">
6 Scoreboard
</sectionHeader>
<bodyText confidence="0.999872714285714">
Controlling the dialogue is only one of the responsi-
bilities of the dialogue manager. It is also responsible for
monitoring the dialogue. Information about salient ob-
jects is represented in the dialogue tree and is accessed
through a scoreboard, figure 5. The scoreboard is the in-
terface between the dialogue manager and the other
modules in the NLI.
</bodyText>
<sectionHeader confidence="0.437545" genericHeader="method">
Action Plan
</sectionHeader>
<figureCaption confidence="0.979262">
Figure 5. The internal structures used by DM
</figureCaption>
<bodyText confidence="0.99996475">
The attributes of the scoreboard take their values
from the tree via pointers or via retrieve functions which
search the dialogue tree. The lexicon and grammar are
written with references to the attributes on the score-
board and therefore are not involved in traversing the di-
alogue wee.
Furthermore, the retrieve functions can be altered, al-
lowing the search for a referent to an anaphoric expres-
sion to be application dependent. This means that we
need only update the retrieve function connected to an
element on the scoreboard, not the grammar or lexicon,
when an application requires a change in dialogue style.
</bodyText>
<sectionHeader confidence="0.997256" genericHeader="evaluation">
7 Customization
</sectionHeader>
<bodyText confidence="0.999974111111111">
One objective of this project is to develop a natural
language interface that can be customized to different
applications, i.e. a natural language interface shell to be
used by a language engineer when creating an NLI for a
specific application.
Customization is achieved by using different ex-
changeable/modifiable knowledge sources. Our inten-
tion is to build a library of prototypical knowledge
sources and re-use much of the knowledge between dif-
ferent applications. For instance the lexicon for an SQL
data base interface needs to be updated with data base
content-specific terms but large parts of it are re-usable.
Furthermore, we believe this to be possible not only for
the lexicon and grammar, but also for the dialogue ob-
jects. The plans for a data base system will be much the
same regardless of the domain. Customization, however,
is not the topic of this paper. For more on this see Rins-
son (1991).
</bodyText>
<sectionHeader confidence="0.997221" genericHeader="conclusions">
8 Summary
</sectionHeader>
<bodyText confidence="0.999769272727273">
I have presented an architecture for dialogue manage-
ment for natural language interfaces to various applica-
tions. The dialogue manager operates as a controller of
resources for parsing, instantiation, generation and data-
base access.
The design of the dialogue manager is based on the
analysis of a corpus of simulated human-computer inter-
actions. Unlike plan-based proposals which employ user
intentions to guide the interaction, the dialogue manager
described here uses plans with information about proto-
typical interaction patterns. The plans are modelled in
</bodyText>
<figure confidence="0.980035291666667">
Scoreboard.
Speaker:
Hearer:
CurrentRequest:
Current Segment:
Current Move:
CurrentObject:
CurrentSet: : . â€¢
Current Attribute: .,,e5551
Action i
Action i - 1
Action i -2
Action 1
Dialogue tree
(create-move user)
(access)
(create-move system)
(up)
(create-IR OT/AT)
(integrate-new-info)
(access)
(create-move system)
(up)
- 237 -
</figure>
<bodyText confidence="0.99960485">
dialogue objects which also contain static information
for representing the dialogue.
The dialogue objects are hierarchically structured in
three categones: dialogue, initiative-response and move.
The initiative-response category is recursive. Use of an
initiative-response structure can be criticised in the same
way as adjacency pairs for not adequately describing a
naturally occurring discourse. However, for a restricted
sublanguage, such as natural language communication
with computers, we believe that this is a very efficient
way of managing the dialogue (cf. Levinson 1981: 114).
The dialogue history is represented in a dialogue tree
consisting of instantiated dialogue objects. The resourc-
es access the dialogue tree through a scoreboard and thus
need no mechanisms for traversing the tree.
We have conducted experiments which show that in
an information-seeking human-computer dialogue the
proposed mechanisms can correctly handle the dialogue.
Empirical tests will show how many different interaction
settings we can handle.
</bodyText>
<sectionHeader confidence="0.996934" genericHeader="acknowledgments">
Acknowledgements
</sectionHeader>
<bodyText confidence="0.99970375">
This work is much inspired by the work that I have
done with Nils Dahlback and Lars Ahrenberg. Ake
Thuree did most of the coding for the DM in Xerox
Common Lisp on a Sun Sparc Station and many ideas
were formed during discussions with him. Lars Ahren-
berg, Ivan Rankin, Mats Wiren and Richard Hirsch have
read previous versions of the paper and provided many
valuable comments.
</bodyText>
<sectionHeader confidence="0.999091" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.9955406875">
Ahrenberg, Lars (1988) An Object-Oriented Dia-
logue System for Swedish, Nordic Journal of Linguistics,
Vol. 11, Nos 1-2, pp 3-16
Ahrenberg, Lars (1989) A Constraint-Based Model
for Natural-Language Understanding and a Pilot Imple-
mentation. Research Report LiTH-IDA-R-89-22, Depart-
ment of Computer and Information Science, Linkoping
University.
Ahrenberg, Lars, Arne Jonsson &amp; Nils Dahlback
(1990) Discourse Representation and Discourse Manage-
ment for Natural Language Interfaces, To appear in Pro-
ceedings of the Second Nordic Conference on Text
Comprehension in Man and Machine, Taby, Stockholm.
Allen, James. F. &amp; C. Raymond Perrault (1980) Ana-
lysing Intention in Utterances, Artificial Intelligence, 15,
pp 143-178.
Carberry, Sandra (1989) A Pragmatics-Based Ap-
proach to Ellipsis Resolution, Computational Linguistics,
Vol. 15, No 2. pp 75-96.
Copestake, Ann &amp; Karen Sparck Jones (1990) Natu-
ral Language Interfaces to Databases, Technical Report
No. 187, University of Cambridge, UK
Dahlback, Nils &amp; Arne JOnsson (1989) Empirical
Studies of Discourse Representations for Natural Lan-
guage Interfaces, Proceedings of the Fourth Conference
of the European Chapter of the ACL, Manchester. 1989.
Gilbert, Nigel, Sarah Buckland, David Frolich, Mari-
na Jirotka &amp; Paul Luff, Providing Advice Through Dia-
logue, (1990) Proceedings of ECA1-90, Stockholm.
Grishman, R.:&amp; Kittredge, R. (Eds.) 1986. Analysing
language in restricted domains. Lawrence Erlbaum.
JOnsson, Arne (1990) Application-Dependent Dis-
course Management for Natural Language Interfaces: An
Empirical Investigation, Papers from the Seventh Scandi-
navian Conference of Computational Linguistics, Rey-
kjavik, Iceland.
JOnsson, Arne (1991) A Natural Language Shell and
Tools for Customizing the Dialogue in Natural Language
Interfaces. Internal Report, LiTH-IDA-R-91-10.
JOnsson, Arne &amp; Nils Dahlback (1988) Talking to a
Computer is not Like Talking to Your Best Friend. Pro-
ceedings of The first Scandinivian Conference on Artifi-
cial Intelligence, Tromso, Norway.
Levinson, Stephen C. (1981) Some Pre-Observations
on the Modelling of Dialogue, Discourse Processes, No
4, pp 93-116.
Levinson, Stephen C. (1983) Pragmatics. Cambridge
University Press.
Linell, Per, Lennart Gustavsson &amp; Paivi Juvonen
(1988) Interactional Dominance in Dyadic Communica-
tion. A presentation of the Initiative-Response Analysis.
Linguistics, 26(3).
Litman, Diane J. (1986) Understanding Plan Ellipsis,
Proceedings of AAA1-86.
McCoy, Kathleen F. &amp; Jeannette Cheng (1988) Focus
of Attention: Constraining What Can Be Said Next, Pre-
sented at the 4th International Workshop on Natural Lan.
guage Generation .Buffalo.
Polanyi, Livia &amp; Remko Scha (1984) A Syntactic Ap-
proach to Discourse Semantics, Proceedings of COL-
ING&apos; 84, Stanford.
Pollack, Martha E. (1986) A Model of Plan Inference
that Distinguishes between the Beliefs of Actors and Ob-
servers, Proceedings of the 24th Annual Meeting of the
ACL, New York,
Pollack, Martha E. (1990) Plans as Complex Mental
Attitudes, Intentions in Communication, MITPress,
1990.
Reiclunan, Rachel (1985) Getting Computers to Talk
Like You and Me, KIT Press, Cambridge, MA.
Schegloff, Emanuel, A. &amp; Harvey Sacks (1973)
Opening up closings, Semiotica, 7, pp 289-327.
Wachtel, Tom (1986) Pragmatic sensitivity in NL in-
terfaces and the structure of conversations, Proceedings
of COLING. 86. 13onn.
Wiren, Mats (1988) On Control Strategies and Incre-
mentality in Unification-Based Chart Parsing, Licentiate
thesis, Thesis No 140, Department of Computer and In-
formation Science, Linkoping University
- 238 -
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.966207">
<title confidence="0.99658">A DIALOGUE MANAGER USING INITIATIVE-RESPONSE UNITS AND DISTRIBUTED CONTROL</title>
<author confidence="0.999801">Arne JOnsson</author>
<affiliation confidence="0.999953">Department of Computer and Information Science Linkoping University</affiliation>
<address confidence="0.998954">S- 581 83 LINKOPING, SWEDEN</address>
<phone confidence="0.989538">46 13281717</phone>
<email confidence="0.995977">ARJ@IDA.LIU.SE</email>
<abstract confidence="0.999409476190476">This paper describes a system for managing dialogue in a natural language interface. The proposed approach uses a dialogue manager as the overall control mechanism. The dialogue manager accesses domain independent resources for interpretation, generation and background system access. It also uses information from domain dependent knowledge sources, which are customized for various applications. Instead of using complex plan-based reasoning, the dialogue manager uses information about possible interaction structures and information from the specific dialogue situation to manage the dialogue. This is motivated from the analysis of a series of experiments where users interacted with a simulated natural language interface. The dialogue manager integrates information about segment types and moves into a hierarchical dialogue tree. The dialogue tree is accessed through a scoreboard which uses exchangeable access functions. The control is distributed and the dialogue is directed from action plans in the nodes in the dialogue tree.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Lars Ahrenberg</author>
</authors>
<title>An Object-Oriented Dialogue System for Swedish,</title>
<date>1988</date>
<journal>Nordic Journal of Linguistics,</journal>
<volume>11</volume>
<pages>1--2</pages>
<contexts>
<context position="4709" citStr="Ahrenberg (1988)" startWordPosition="726" endWordPosition="727">e clarifications, who takes the initiative, what is cooperative in a certain application, what are the user categories and so on. The dialogue manager operates as the central controller in the NLI (Ahrenberg, DahlbAck &amp; Masson, 1990). It passes information encoded in directed acyclic graphs (dags) between different modules for parsing, generation, etc. This paper, however, only describes the dialogue manager&apos;s role in the control of the dialogue. I assume that the dag&apos;s correctly describe the full meaning of the user&apos;s input. For a discussion of interpretation of user input in this system see Ahrenberg (1988). The dialogue manager is implemented in CommonLisp but is currently not completely integrated with the other modules of the system. - 233 - Figure 1. Overview of the architecture TRANSLATION PRINCIPLES DIALOGUE &apos;our MANAGER ( PARSER GRAMMAR LEXICON INSTANTIATOR DOMAIN OBJECTS (GENERATOR DEEP DIALOGUE TREE/ SCORE BOARD ( SURFACE&apos; GENERATOR) DIALOGUE OBJECTS A 2 The dialogue manager The dialogue manager (DM) is the kernel in the natural language interface, see figure 1. It directs the dialogue, assists the instantiator and deep generator and communicates with the background system. DM can be vi</context>
</contexts>
<marker>Ahrenberg, 1988</marker>
<rawString>Ahrenberg, Lars (1988) An Object-Oriented Dialogue System for Swedish, Nordic Journal of Linguistics, Vol. 11, Nos 1-2, pp 3-16</rawString>
</citation>
<citation valid="true">
<authors>
<author>Lars Ahrenberg</author>
</authors>
<title>A Constraint-Based Model for Natural-Language Understanding and a Pilot Implementation.</title>
<date>1989</date>
<tech>Research Report LiTH-IDA-R-89-22,</tech>
<institution>Department of Computer and Information Science, Linkoping University.</institution>
<contexts>
<context position="5548" citStr="Ahrenberg, 1989" startWordPosition="858" endWordPosition="859">R ( PARSER GRAMMAR LEXICON INSTANTIATOR DOMAIN OBJECTS (GENERATOR DEEP DIALOGUE TREE/ SCORE BOARD ( SURFACE&apos; GENERATOR) DIALOGUE OBJECTS A 2 The dialogue manager The dialogue manager (DM) is the kernel in the natural language interface, see figure 1. It directs the dialogue, assists the instantiator and deep generator and communicates with the background system. DM can be viewed as a controller of resources and knowledge sources. The resources in our system are a chart parser (Wiren, 1988), an instantiator which links the linguistic object descriptions to objects in the universe of discourse (Ahrenberg, 1989), a translator which translates the instantiated structures into a form suitable for accessing the background system&apos; and finally a deep and a surface generator for generating a system utterance. These resources are domain independent processes accessing various knowledge sources. The knowledge sources are domain dependent and implemented in the same knowledge base system and can be modified for each new application. We use a lexicon for general and domain-specific- vocabulary and a grammar with knowledge of syntactic constructions and their semantic impact. Furthermore, we use descriptions of</context>
</contexts>
<marker>Ahrenberg, 1989</marker>
<rawString>Ahrenberg, Lars (1989) A Constraint-Based Model for Natural-Language Understanding and a Pilot Implementation. Research Report LiTH-IDA-R-89-22, Department of Computer and Information Science, Linkoping University.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Lars Ahrenberg</author>
<author>Arne Jonsson</author>
<author>Nils Dahlback</author>
</authors>
<title>Discourse Representation and Discourse Management for Natural Language Interfaces, To appear</title>
<date>1990</date>
<booktitle>in Proceedings of the Second Nordic Conference on Text Comprehension in Man and Machine, Taby,</booktitle>
<location>Stockholm.</location>
<marker>Ahrenberg, Jonsson, Dahlback, 1990</marker>
<rawString>Ahrenberg, Lars, Arne Jonsson &amp; Nils Dahlback (1990) Discourse Representation and Discourse Management for Natural Language Interfaces, To appear in Proceedings of the Second Nordic Conference on Text Comprehension in Man and Machine, Taby, Stockholm.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F</author>
<author>C Raymond Perrault</author>
</authors>
<title>Analysing Intention in Utterances,</title>
<date>1980</date>
<journal>Artificial Intelligence,</journal>
<volume>15</volume>
<pages>143--178</pages>
<marker>F, Perrault, 1980</marker>
<rawString>Allen, James. F. &amp; C. Raymond Perrault (1980) Analysing Intention in Utterances, Artificial Intelligence, 15, pp 143-178.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sandra Carberry</author>
</authors>
<title>A Pragmatics-Based Approach to Ellipsis Resolution,</title>
<date>1989</date>
<journal>Computational Linguistics,</journal>
<volume>15</volume>
<pages>75--96</pages>
<contexts>
<context position="1617" citStr="Carberry (1989)" startWordPosition="240" endWordPosition="241">ation about segment types and moves into a hierarchical dialogue tree. The dialogue tree is accessed through a scoreboard which uses exchangeable access functions. The control is distributed and the dialogue is directed from action plans in the nodes in the dialogue tree. 1 Introduction To achieve true cooperation a natural language interface must be able to participate in a coherent dialogue with the user. A common, generally applicable approach is to use plan-inference as a basis for reasoning about intentions of the user as proposed by, for instance, Allen &amp; Perrault (1980), Litman (1986), Carberry (1989) and Pollack (1986). However, computationally these approaches are not so efficient. Reichman (1985) describes a discourse grammar based on the assumption that a conversation can be described using conventionalized discourse rules. Gilbert, Buckland, Frolich, Jirotka &amp; Luff (1990) uses interaction rules in their menu-based advisory system. Our approach is similar to Reichman and Gilbert et al. In a series of experiments (Dahlback &amp; Jtinsson, 1989, Jonsson &amp; Dahlback, 1988) we studied dialogue behaviour in an information-seeking interaction between a human and a computer using a simulated natur</context>
</contexts>
<marker>Carberry, 1989</marker>
<rawString>Carberry, Sandra (1989) A Pragmatics-Based Approach to Ellipsis Resolution, Computational Linguistics, Vol. 15, No 2. pp 75-96.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ann Copestake</author>
<author>Karen Sparck Jones</author>
</authors>
<title>Natural Language Interfaces to Databases,</title>
<date>1990</date>
<tech>Technical Report No. 187,</tech>
<institution>University of Cambridge, UK</institution>
<marker>Copestake, Jones, 1990</marker>
<rawString>Copestake, Ann &amp; Karen Sparck Jones (1990) Natural Language Interfaces to Databases, Technical Report No. 187, University of Cambridge, UK</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nils Dahlback</author>
<author>Arne JOnsson</author>
</authors>
<title>Empirical Studies of Discourse Representations for Natural Language Interfaces,</title>
<date>1989</date>
<booktitle>Proceedings of the Fourth Conference of the European Chapter of the ACL,</booktitle>
<location>Manchester.</location>
<marker>Dahlback, JOnsson, 1989</marker>
<rawString>Dahlback, Nils &amp; Arne JOnsson (1989) Empirical Studies of Discourse Representations for Natural Language Interfaces, Proceedings of the Fourth Conference of the European Chapter of the ACL, Manchester. 1989.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nigel Gilbert</author>
<author>Sarah Buckland</author>
<author>David Frolich</author>
<author>Marina Jirotka</author>
<author>Paul Luff</author>
</authors>
<title>Providing Advice Through Dialogue,</title>
<date>1990</date>
<booktitle>Proceedings of ECA1-90,</booktitle>
<location>Stockholm.</location>
<marker>Gilbert, Buckland, Frolich, Jirotka, Luff, 1990</marker>
<rawString>Gilbert, Nigel, Sarah Buckland, David Frolich, Marina Jirotka &amp; Paul Luff, Providing Advice Through Dialogue, (1990) Proceedings of ECA1-90, Stockholm.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Grishman</author>
<author>R Kittredge</author>
</authors>
<title>Analysing language in restricted domains. Lawrence Erlbaum.</title>
<date>1986</date>
<marker>Grishman, Kittredge, 1986</marker>
<rawString>Grishman, R.:&amp; Kittredge, R. (Eds.) 1986. Analysing language in restricted domains. Lawrence Erlbaum.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Arne JOnsson</author>
</authors>
<title>Application-Dependent Discourse Management for Natural Language Interfaces: An Empirical</title>
<date>1990</date>
<booktitle>Investigation, Papers from the Seventh Scandinavian Conference of Computational Linguistics,</booktitle>
<location>Reykjavik, Iceland.</location>
<marker>JOnsson, 1990</marker>
<rawString>JOnsson, Arne (1990) Application-Dependent Discourse Management for Natural Language Interfaces: An Empirical Investigation, Papers from the Seventh Scandinavian Conference of Computational Linguistics, Reykjavik, Iceland.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Arne JOnsson</author>
</authors>
<title>A Natural Language Shell and Tools for Customizing the Dialogue in Natural Language Interfaces.</title>
<date>1991</date>
<tech>Internal Report, LiTH-IDA-R-91-10.</tech>
<marker>JOnsson, 1991</marker>
<rawString>JOnsson, Arne (1991) A Natural Language Shell and Tools for Customizing the Dialogue in Natural Language Interfaces. Internal Report, LiTH-IDA-R-91-10.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Arne JOnsson</author>
<author>Nils Dahlback</author>
</authors>
<title>Talking to a Computer is not Like Talking to Your Best Friend.</title>
<date>1988</date>
<booktitle>Proceedings of The first Scandinivian Conference on Artificial Intelligence,</booktitle>
<location>Tromso, Norway.</location>
<marker>JOnsson, Dahlback, 1988</marker>
<rawString>JOnsson, Arne &amp; Nils Dahlback (1988) Talking to a Computer is not Like Talking to Your Best Friend. Proceedings of The first Scandinivian Conference on Artificial Intelligence, Tromso, Norway.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stephen C Levinson</author>
</authors>
<date>1981</date>
<booktitle>Some Pre-Observations on the Modelling of Dialogue, Discourse Processes,</booktitle>
<volume>4</volume>
<pages>93--116</pages>
<contexts>
<context position="25867" citStr="Levinson 1981" startWordPosition="4253" endWordPosition="4254">eate-move system) (up) - 237 - dialogue objects which also contain static information for representing the dialogue. The dialogue objects are hierarchically structured in three categones: dialogue, initiative-response and move. The initiative-response category is recursive. Use of an initiative-response structure can be criticised in the same way as adjacency pairs for not adequately describing a naturally occurring discourse. However, for a restricted sublanguage, such as natural language communication with computers, we believe that this is a very efficient way of managing the dialogue (cf. Levinson 1981: 114). The dialogue history is represented in a dialogue tree consisting of instantiated dialogue objects. The resources access the dialogue tree through a scoreboard and thus need no mechanisms for traversing the tree. We have conducted experiments which show that in an information-seeking human-computer dialogue the proposed mechanisms can correctly handle the dialogue. Empirical tests will show how many different interaction settings we can handle. Acknowledgements This work is much inspired by the work that I have done with Nils Dahlback and Lars Ahrenberg. Ake Thuree did most of the codi</context>
</contexts>
<marker>Levinson, 1981</marker>
<rawString>Levinson, Stephen C. (1981) Some Pre-Observations on the Modelling of Dialogue, Discourse Processes, No 4, pp 93-116.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stephen C Levinson</author>
</authors>
<title>Pragmatics.</title>
<date>1983</date>
<publisher>Cambridge University Press.</publisher>
<contexts>
<context position="3137" citStr="Levinson, 1983" startWordPosition="476" endWordPosition="477">however, very little use of surface linguistic cues in our dialogues. In our corpus users normally initiate a request for information, which is followed by an answer from the system. Sometimes the request needs clarificaLion before the answer can be given as a response to the initial question (this is illustrated in section 4 and 5). Optionally the user can interrupt the original question and start a new initiativeâ€”response unit, but this also follows the goals of information-seeking. Thus, we adopt a strategy in which we employ the notion of adjacency pairs (Schegloff &amp; Sacks, 1973, see also Levinson, 1983: 3031). In our approach the dialogue is planned and utterances are interpreted in terms of speech acts. The speech acts are determined on the basis of structural information in the utterance and in the immediate context. Further, we found, in our experiments, that different configurations of the background system (e.g. data base, consultation) and task to solve (e.g. information retrieval, configuration) require different mechanisms for handling dialogue in an NLI (Jonsson, 1990). Therefore, one major design criterion is that the system should be easy to adapt (customize) to a new application</context>
</contexts>
<marker>Levinson, 1983</marker>
<rawString>Levinson, Stephen C. (1983) Pragmatics. Cambridge University Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Per Linell</author>
</authors>
<title>Lennart Gustavsson &amp; Paivi Juvonen</title>
<date>1988</date>
<journal>Linguistics,</journal>
<volume>26</volume>
<issue>3</issue>
<marker>Linell, 1988</marker>
<rawString>Linell, Per, Lennart Gustavsson &amp; Paivi Juvonen (1988) Interactional Dominance in Dyadic Communication. A presentation of the Initiative-Response Analysis. Linguistics, 26(3).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Diane J Litman</author>
</authors>
<title>Understanding Plan Ellipsis,</title>
<date>1986</date>
<booktitle>Proceedings of</booktitle>
<pages>1--86</pages>
<contexts>
<context position="1600" citStr="Litman (1986)" startWordPosition="238" endWordPosition="239">tegrates information about segment types and moves into a hierarchical dialogue tree. The dialogue tree is accessed through a scoreboard which uses exchangeable access functions. The control is distributed and the dialogue is directed from action plans in the nodes in the dialogue tree. 1 Introduction To achieve true cooperation a natural language interface must be able to participate in a coherent dialogue with the user. A common, generally applicable approach is to use plan-inference as a basis for reasoning about intentions of the user as proposed by, for instance, Allen &amp; Perrault (1980), Litman (1986), Carberry (1989) and Pollack (1986). However, computationally these approaches are not so efficient. Reichman (1985) describes a discourse grammar based on the assumption that a conversation can be described using conventionalized discourse rules. Gilbert, Buckland, Frolich, Jirotka &amp; Luff (1990) uses interaction rules in their menu-based advisory system. Our approach is similar to Reichman and Gilbert et al. In a series of experiments (Dahlback &amp; Jtinsson, 1989, Jonsson &amp; Dahlback, 1988) we studied dialogue behaviour in an information-seeking interaction between a human and a computer using </context>
</contexts>
<marker>Litman, 1986</marker>
<rawString>Litman, Diane J. (1986) Understanding Plan Ellipsis, Proceedings of AAA1-86.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kathleen F McCoy</author>
<author>Jeannette Cheng</author>
</authors>
<title>Focus of Attention: Constraining What Can Be Said</title>
<date>1988</date>
<booktitle>Next, Presented at the 4th International Workshop on Natural Lan. guage Generation</booktitle>
<location>Buffalo.</location>
<contexts>
<context position="6559" citStr="McCoy &amp; Cheng (1988)" startWordPosition="1010" endWordPosition="1013">ied for each new application. We use a lexicon for general and domain-specific- vocabulary and a grammar with knowledge of syntactic constructions and their semantic impact. Furthermore, we use descriptions of dialogue objects, i.e. segments and moves and their associated information (section 3) and domain object descriptions which contain relations between the concepts used to describe objects in the background system and constraints on them. The need for domain object information in a natural language database interface has been argued for by for instance Copestake &amp; Sparck Jones (1990) and McCoy &amp; Cheng (1988). The domain objects are primarily used by the instantiator and deep generator, but the translator, parser and surface generator can also use this information. For a discussion on domain objects in this system see Ahrenberg, Jonsson &amp; Dahlback (1990). Each input or output from the resources passes via the dialogue manager (DM). A typical segment begins with an input from the user that is sent to the DM which 1. Initially we use only a relational database system. passes it to the parser. The parser sends its result to the DM which passes it to the instantiator where it is enhanced with referent</context>
</contexts>
<marker>McCoy, Cheng, 1988</marker>
<rawString>McCoy, Kathleen F. &amp; Jeannette Cheng (1988) Focus of Attention: Constraining What Can Be Said Next, Presented at the 4th International Workshop on Natural Lan. guage Generation .Buffalo.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Livia Polanyi</author>
<author>Remko Scha</author>
</authors>
<title>A Syntactic Approach to Discourse Semantics,</title>
<date>1984</date>
<booktitle>Proceedings of COLING&apos; 84,</booktitle>
<location>Stanford.</location>
<contexts>
<context position="10482" citStr="Polanyi &amp; Scha (1984)" startWordPosition="1679" endWordPosition="1682"> U10&gt; it is reduced. In the sequence of utterances U12&gt; to S15&gt;, Current set consists of the cars presented in Ul l&gt;. Current set does not have to be explicit as in example 1, instead it can be described by constraints. For instance, in a travel data base the user may be interested in a trip to Greek islands which restricts the search in the database to Greek islands for a large part of the ensuing dialogue. The communication is hierarchically structured using three different categories of dialogue objects. There are various proposals as to the number of levels needed. The system developed by Polanyi &amp; Scha (1984) uses five different levels to hierarchically structure a dialogue and LOKI (Wachtel, 1986) uses four. In LOKI the levels are: conversation, dialogue, exchange and move. When analysing our dialogues we found no certain criteria concerning how to divide a dialogue intua set of exchanges. Therefore we only use three different dialogue object types: dialogue, initiative-response-unit (IR) and move. Dialogue, in our notation, is similar to conversation in LOKI, while IR-units resemble exchanges. IR-units are recursive and, unlike LOKI, we allow arbitrary embedding of IR-units. The smallest unit ha</context>
</contexts>
<marker>Polanyi, Scha, 1984</marker>
<rawString>Polanyi, Livia &amp; Remko Scha (1984) A Syntactic Approach to Discourse Semantics, Proceedings of COLING&apos; 84, Stanford.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Martha E Pollack</author>
</authors>
<title>A Model of Plan Inference that Distinguishes between the Beliefs of Actors and Observers,</title>
<date>1986</date>
<booktitle>Proceedings of the 24th Annual Meeting of the ACL,</booktitle>
<location>New York,</location>
<contexts>
<context position="1636" citStr="Pollack (1986)" startWordPosition="243" endWordPosition="244">types and moves into a hierarchical dialogue tree. The dialogue tree is accessed through a scoreboard which uses exchangeable access functions. The control is distributed and the dialogue is directed from action plans in the nodes in the dialogue tree. 1 Introduction To achieve true cooperation a natural language interface must be able to participate in a coherent dialogue with the user. A common, generally applicable approach is to use plan-inference as a basis for reasoning about intentions of the user as proposed by, for instance, Allen &amp; Perrault (1980), Litman (1986), Carberry (1989) and Pollack (1986). However, computationally these approaches are not so efficient. Reichman (1985) describes a discourse grammar based on the assumption that a conversation can be described using conventionalized discourse rules. Gilbert, Buckland, Frolich, Jirotka &amp; Luff (1990) uses interaction rules in their menu-based advisory system. Our approach is similar to Reichman and Gilbert et al. In a series of experiments (Dahlback &amp; Jtinsson, 1989, Jonsson &amp; Dahlback, 1988) we studied dialogue behaviour in an information-seeking interaction between a human and a computer using a simulated natural language interfa</context>
</contexts>
<marker>Pollack, 1986</marker>
<rawString>Pollack, Martha E. (1986) A Model of Plan Inference that Distinguishes between the Beliefs of Actors and Observers, Proceedings of the 24th Annual Meeting of the ACL, New York,</rawString>
</citation>
<citation valid="true">
<authors>
<author>Martha E Pollack</author>
</authors>
<date>1990</date>
<booktitle>Plans as Complex Mental Attitudes, Intentions in Communication, MITPress,</booktitle>
<contexts>
<context position="13265" citStr="Pollack (1990)" startWordPosition="2132" endWordPosition="2133">ator and responder. It also copies relevant information about salient objects and attributes from the previous IR-unit to the new one. Our simulations show that users prefer coherence in the dialogue. Thus, we use the heuristic that no information explicitly changed is duplicated from one IR-unit to the next. As stated above, an instance of a dialogue object has one component describing static information about initiator, responder, salient objects etc., and another describing the process, i.e. the actions performed when executing the object. We call this a plan, although if we were to follow Pollack (1990) we could call it recipe-foractions. Figure 2 shows a template description for an IRunit used in a database information-seeking application. Figure 2. A template description for IR-units The static component forms the context in which the processes are executed. The attributes are updated with new values during the execution of the action plan. For instance, a user JR-unit, i.e. an IR-unit which waits for a user initiative to be interpreted, has no value for the Initiative and Response slots until the initiative has been interpreted. This is discussed further in section 4. The process componen</context>
</contexts>
<marker>Pollack, 1990</marker>
<rawString>Pollack, Martha E. (1990) Plans as Complex Mental Attitudes, Intentions in Communication, MITPress, 1990.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Rachel Reiclunan</author>
</authors>
<title>Getting Computers to Talk Like You and Me,</title>
<date>1985</date>
<publisher>KIT Press,</publisher>
<location>Cambridge, MA.</location>
<marker>Reiclunan, 1985</marker>
<rawString>Reiclunan, Rachel (1985) Getting Computers to Talk Like You and Me, KIT Press, Cambridge, MA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Emanuel Schegloff</author>
<author>A</author>
<author>Harvey Sacks</author>
</authors>
<title>Opening up closings,</title>
<date>1973</date>
<journal>Semiotica,</journal>
<volume>7</volume>
<pages>289--327</pages>
<marker>Schegloff, A, Sacks, 1973</marker>
<rawString>Schegloff, Emanuel, A. &amp; Harvey Sacks (1973) Opening up closings, Semiotica, 7, pp 289-327.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Tom Wachtel</author>
</authors>
<title>Pragmatic sensitivity in NL interfaces and the structure of conversations,</title>
<date>1986</date>
<booktitle>Proceedings of COLING. 86.</booktitle>
<pages>13</pages>
<contexts>
<context position="10573" citStr="Wachtel, 1986" startWordPosition="1694" endWordPosition="1695">presented in Ul l&gt;. Current set does not have to be explicit as in example 1, instead it can be described by constraints. For instance, in a travel data base the user may be interested in a trip to Greek islands which restricts the search in the database to Greek islands for a large part of the ensuing dialogue. The communication is hierarchically structured using three different categories of dialogue objects. There are various proposals as to the number of levels needed. The system developed by Polanyi &amp; Scha (1984) uses five different levels to hierarchically structure a dialogue and LOKI (Wachtel, 1986) uses four. In LOKI the levels are: conversation, dialogue, exchange and move. When analysing our dialogues we found no certain criteria concerning how to divide a dialogue intua set of exchanges. Therefore we only use three different dialogue object types: dialogue, initiative-response-unit (IR) and move. Dialogue, in our notation, is similar to conversation in LOKI, while IR-units resemble exchanges. IR-units are recursive and, unlike LOKI, we allow arbitrary embedding of IR-units. The smallest unit handled by our dialogue manager is the move. An utterance can consist of more than one move a</context>
</contexts>
<marker>Wachtel, 1986</marker>
<rawString>Wachtel, Tom (1986) Pragmatic sensitivity in NL interfaces and the structure of conversations, Proceedings of COLING. 86. 13onn.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mats Wiren</author>
</authors>
<title>On Control Strategies and Incrementality in Unification-Based Chart Parsing, Licentiate thesis,</title>
<date>1988</date>
<tech>Thesis No 140,</tech>
<pages>238</pages>
<institution>Department of Computer and Information Science, Linkoping University -</institution>
<contexts>
<context position="5426" citStr="Wiren, 1988" startWordPosition="841" endWordPosition="842">ther modules of the system. - 233 - Figure 1. Overview of the architecture TRANSLATION PRINCIPLES DIALOGUE &apos;our MANAGER ( PARSER GRAMMAR LEXICON INSTANTIATOR DOMAIN OBJECTS (GENERATOR DEEP DIALOGUE TREE/ SCORE BOARD ( SURFACE&apos; GENERATOR) DIALOGUE OBJECTS A 2 The dialogue manager The dialogue manager (DM) is the kernel in the natural language interface, see figure 1. It directs the dialogue, assists the instantiator and deep generator and communicates with the background system. DM can be viewed as a controller of resources and knowledge sources. The resources in our system are a chart parser (Wiren, 1988), an instantiator which links the linguistic object descriptions to objects in the universe of discourse (Ahrenberg, 1989), a translator which translates the instantiated structures into a form suitable for accessing the background system&apos; and finally a deep and a surface generator for generating a system utterance. These resources are domain independent processes accessing various knowledge sources. The knowledge sources are domain dependent and implemented in the same knowledge base system and can be modified for each new application. We use a lexicon for general and domain-specific- vocabul</context>
</contexts>
<marker>Wiren, 1988</marker>
<rawString>Wiren, Mats (1988) On Control Strategies and Incrementality in Unification-Based Chart Parsing, Licentiate thesis, Thesis No 140, Department of Computer and Information Science, Linkoping University - 238 -</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>