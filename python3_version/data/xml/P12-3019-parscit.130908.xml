<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.226044">
<title confidence="0.99841">
WizIE: A Best Practices Guided Development Environment
for Information Extraction
</title>
<author confidence="0.982894">
Yunyao Li Laura Chiticariu Huahai Yang Frederick R. Reiss Arnaldo Carreno-fuentes
</author>
<affiliation confidence="0.857471">
IBM Research - Almaden
</affiliation>
<address confidence="0.9983495">
650 Harry Road
San Jose, CA 95120
</address>
<email confidence="0.999769">
{yunyaoli,chiti,hyang,frreiss,acarren}@us.ibm.com
</email>
<sectionHeader confidence="0.998603" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999845434782609">
Information extraction (IE) is becoming a crit-
ical building block in many enterprise appli-
cations. In order to satisfy the increasing text
analytics demands of enterprise applications,
it is crucial to enable developers with general
computer science background to develop high
quality IE extractors. In this demonstration,
we present WizIE, an IE development envi-
ronment intended to reduce the development
life cycle and enable developers with little or
no linguistic background to write high qual-
ity IE rules. WizIE provides an integrated
wizard-like environment that guides IE devel-
opers step-by-step throughout the entire devel-
opment process, based on best practices syn-
thesized from the experience of expert devel-
opers. In addition, WizIE reduces the manual
effort involved in performing key IE develop-
ment tasks by offering automatic result expla-
nation and rule discovery functionality. Pre-
liminary results indicate that WizIE is a step
forward towards enabling extractor develop-
ment for novice IE developers.
</bodyText>
<sectionHeader confidence="0.999471" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999753422222222">
Information Extraction (IE) refers to the problem of
extracting structured information from unstructured
or semi-structured text. It has been well-studied by
the Natural Language Processing research commu-
nity for a long time. In recent years, IE has emerged
as a critical building block in a wide range of enter-
prise applications, including financial risk analysis,
social media analytics and regulatory compliance,
among many others. An important practical chal-
lenge driven by the use of IE in these applications
is usability (Chiticariu et al., 2010c): specifically,
how to enable the ease of development and mainte-
nance of high-quality information extraction rules,
also known as annotators, or extractors.
Developing extractors is a notoriously labor-
intensive and time-consuming process. In order to
ensure highly accurate and reliable results, this task
is traditionally performed by trained linguists with
domain expertise. As a result, extractor develop-
ment is regarded as a major bottleneck in satisfying
the increasing text analytics demands of enterprise
applications. Hence, reducing the extractor devel-
opment life cycle is a critical requirement. Towards
this goal, we have built WizIE, an IE development
environment designed primarily to (1) enable devel-
opers with little or no linguistic background to write
high quality extractors, and (2) reduce the overall
manual effort involved in extractor development.
Previous work on improving the usability of IE
systems has mainly focused on reducing the manual
effort involved in extractor development (Brauer et
al., 2011; Li et al., 2008; Li et al., 2011a; Soder-
land, 1999; Liu et al., 2010). In contrast, the fo-
cus of WizIE is on lowering the extractor develop-
ment entry barrier by means of a wizard-like en-
vironment that guides extractor development based
on best practices drawn from the experience of
trained linguists and expert developers. In doing so,
WizIE also provides natural entry points for differ-
ent tools focused on reducing the effort required for
performing common tasks during IE development.
Underlying our WizIE are a state-of-the-art
IE rule language and corresponding runtime en-
gine (Chiticariu et al., 2010a; Li et al., 2011b). The
runtime engine and WizIE are commercially avail-
</bodyText>
<page confidence="0.988165">
109
</page>
<note confidence="0.902084">
Proceedings of the 50th Annual Meeting of the Association for Computational Linguistics, pages 109–114,
Jeju, Republic of Korea, 8-14 July 2012. c�2012 Association for Computational Linguistics
</note>
<figureCaption confidence="0.998972">
Figure 1: Best Practices for Extractor Development
</figureCaption>
<figure confidence="0.996761733333333">
Rule Performance
Task Analysis Delivery
Development Tuning
Input
Documents
Label
Text/Clues
Develop
Extractor
Test
Extractor
Profile
Extractor
Export
Extractor
</figure>
<bodyText confidence="0.8999455">
able as part of IBM InfoSphere BigInsights (IBM,
2012).
</bodyText>
<sectionHeader confidence="0.946824" genericHeader="method">
2 System Overview
</sectionHeader>
<bodyText confidence="0.999971166666667">
The development process for high-quality, high-
performance extractors consists of four phases, as
illustrated in Fig. 1. First, in the Task Analysis
phase, concrete extraction tasks are defined based
on high-level business requirements. For each ex-
traction task, IE rules are developed during the Rule
Development phase. The rules are profiled and fur-
ther fine-tuned in the Performance Tuning phase, to
ensure high runtime performance. Finally, in the De-
livery phase, the rules are packaged so that they can
be easily embedded in various applications.
WizIE is designed to assist and enable both novice
and experienced developers by providing an intu-
itive wizard-like interface that is informed by the
best practices in extractor development throughout
each of these phases. By doing so, WizIE seeks
to provide the key missing pieces in a conventional
IE development environment (Cunningham et al.,
2002; Li et al., 2011b; Soundrarajan et al., 2011),
based on our experience as expert IE developers, as
well as our interactions with novice developers with
general computer science background, but little text
analytics experience, during the development of sev-
eral enterprise applications.
</bodyText>
<sectionHeader confidence="0.998225" genericHeader="method">
3 The Development Environment
</sectionHeader>
<bodyText confidence="0.99993">
In this section, we present the general functionality
of WizIE in the context of extraction tasks driven
by real business use cases from the media and en-
tertainment domain. We describe WizIE in details
and show how it guides and assists IE developers in
a step-by-step fashion, based on best practices.
</bodyText>
<subsectionHeader confidence="0.99951">
3.1 Task Analysis
</subsectionHeader>
<bodyText confidence="0.999978833333333">
The high-level business requirement of our run-
ning example is to identify intention to purchase
for movies from online forums. Such information
is of great interest to marketers as it helps pre-
dict future purchases (Howard and Sheth, 1969).
During the first phrase of IE development (Fig. 2),
WizIE guides the rule developer in turning such a
high-level business requirement into concrete ex-
traction tasks by explicitly asking her to select and
manually examine a small number 1 of sample doc-
uments, identify and label snippets of interest in the
sample documents, and capture clues that help to
identify such snippets.
The definition and context of the concrete extrac-
tion tasks are captured by a tree structure called the
extraction plan (e.g. right panel in Fig. 2). Each
leaf node in an extraction plan corresponds to an
atomic extraction task, while the non-leaf nodes de-
note higher-level tasks based on one or more atomic
extraction tasks. For instance, in our running ex-
ample, the business question of identifying intention
of purchase for movies has been converted into the
extraction task of identifying MovieIntent mentions,
which involves two atomic extraction tasks: identi-
fying Movie mentions and Intent mentions.
The extraction plan created, as we will describe
later, plays a key role in the IE development process
in WizIE. Such tight coupling of task analysis with
actual extractor development is a key departure from
conventional IE development environments.
</bodyText>
<subsectionHeader confidence="0.998216">
3.2 Rule Development
</subsectionHeader>
<bodyText confidence="0.998578363636364">
Once concrete extraction tasks are defined,
WizIE guides the IE developer to write actual rules
based on best practices. Fig. 3(a) shows a screenshot
of the second phase of building an extractor, the
Rule Development phase. The Extraction Task panel
on the left provides information and tips for rule
development, whereas the Extraction Plan panel
on the right guides the actual rule development
for each extraction task. As shown in the figure,
the types of rules associated with each label node
fall into three categories: Basic Features, Can-
</bodyText>
<footnote confidence="0.54815">
&apos;The exact sample size varies by task type.
</footnote>
<page confidence="0.984875">
110
</page>
<figureCaption confidence="0.998896">
Figure 2: Labeling Snippets and Clues of Interest
</figureCaption>
<bodyText confidence="0.996808791666667">
didate Generation and Filter&amp;Consolidate. This
categorization is based on best practices for rule
development (Chiticariu et al., 2010b). As such,
the extraction plan groups together the high-level
specification of extraction tasks via examples, and
the actual implementation of those tasks via rules.
The developer creates rules directly in the Rule
Editor, or via the Create Statement wizard, acces-
sible from the Statements node of each label in the
Extraction Plan panel:
The wizard allows the user to select a type for
the new rule, from predefined sets for each of the
three categories. The types of rules exposed in each
category are informed by best practices. For ex-
ample, the Basic Features category includes rules
for defining basic features using regular expressions,
dictionaries or part of speech information, whereas
the Candidate Generation category includes rules for
combining basic features into candidate mentions by
means of operations such as sequence or alternation.
Once the developer provides a name for the new rule
(view) and selects its type, the appropriate rule tem-
plate (such as the one illustrated below) is automat-
ically generated in an appropriate file on disk and
displayed in the editor, for further editing 2.
Once the developer completes an iteration of rule
development, WizIE guides her in testing and refin-
ing the extractor, as shown in Fig. 3(b). The An-
notation Explorer at the bottom of the screen gives
a global view of the extraction results, while other
panels highlight individual results in the context of
the original input documents. The Annotation Ex-
plorer enables filtering and searching results, and
comparing results with those from a previous iter-
ation. WizIE also provides a facility for manually
labeling a document collection with “ground truth”
annotations, then comparing the extraction results
with the ground truth in order to formally evalu-
ate the quality of the extractor and avoid regressions
during the development process.
An important differentiator of WizIE compared
with conventional IE development environments is
a suite of sophisticated tools for automatic result ex-
planation and rule discovery. We briefly describe
them next.
Provenance Viewer. When the user clicks on an ex-
tracted result, the Provenance Viewer shows a com-
plete explanation of how that result has been pro-
</bodyText>
<footnote confidence="0.851034">
2Details on the rule syntax can be found in (IBM, )
</footnote>
<page confidence="0.997377">
111
</page>
<figureCaption confidence="0.999787">
Figure 3: Extractor Development: (a) Developing, and (b) Testing.
</figureCaption>
<bodyText confidence="0.998637953488372">
duced by the extractor, in the form of a graph that
demonstrates the sequence of rules and individual
pieces of text responsible for that result. Such expla-
nations are critical to enable the developer to under-
stand why a false positive is generated by the sys-
tem, and identify problematic rule(s) that could be
refined in order to correct the mistake. An example
explanation for an incorrect MovieIntent mention “I
just saw Mission Impossible” is shown below.
As can be seen, the MovieIntent mention is gener-
ated by combining a SelfRef (matching first person
pronouns) with a MovieName mention, and in turn,
the latter is obtained by combining several MovieN-
ameCandidate mentions. With this information, the
developer can quickly determine that the SelfRef and
MovieName mentions are correct, but their combina-
tion in MovieIntentCandidate is problematic. She can
then proceed to refine the MovieIntentCandidate rule,
for example, by avoiding any MovieIntentCandidate
mentions containing a past tense verb form such as
saw, since past tense in not usually indicative of in-
tent (Liu et al., 2010).
Pattern Discovery. Negative contextual clues such
as the verb “saw” above are useful for creating rules
that filter out false positives. Conversely, positive
clues such as the phrase “will see” are useful for
creating rules that separate ambiguous matches from
high-precision matches. WizIE’s Pattern Discovery
component facilitates automatic discovery of such
clues by mining available sample data for common
patterns in specific contexts (Li et al., 2011a). For
example, when instructed to analyze the context be-
tween SelfRef and MovieName mentions, Pattern Dis-
covery finds a suite of common patterns as shown
in Fig. 4. The developer can analyze these patterns
and choose those suitable for refining the rules. For
example, patterns such as “have to see” can be seen
as positive clues for intent, whereas phrases such as
“took ... to see” or “went to see” are negative clues,
and can be used for filtering false positives.
Regular Expression Generator. WizIE also en-
ables the discovery of regular expression patterns.
The Regular Expression Generator takes as input a
</bodyText>
<page confidence="0.996625">
112
</page>
<figureCaption confidence="0.9999965">
Figure 4: Pattern Discovery
Figure 5: Regular Expression Generator
</figureCaption>
<bodyText confidence="0.999987083333333">
set of sample mentions and suggests regular expres-
sions that capture the samples, ranging from more
specific (higher accuracy) to more general expres-
sions (higher coverage). Figure 5 shows two reg-
ular expressions automatically generated based on
mentions of movie ratings, and how the developer is
subsequently assisted in understanding and refining
the generated expression. In our experience, regu-
lar expressions are complex concepts that are diffi-
cult to develop for both expert and novice develop-
ers. Therefore, such a facility to generate expres-
sions based on examples is extremely useful.
</bodyText>
<subsectionHeader confidence="0.999577">
3.3 Performance Tuning
</subsectionHeader>
<bodyText confidence="0.9999950625">
Once the developer is satisfied with the quality of the
extractor, WizIE guides her in measuring and tuning
its runtime performance, in preparation for deploy-
ing the extractor in a production environment. The
Profiler observes the execution of the extractor on
a sample input collection over a period of time and
records the percentage of time spent executing each
rule, or performing certain runtime operations. After
the profiling run completes, WizIE displays the top
25 most expensive rules and runtime operations, and
the overall throughput (amount of input data pro-
cessed per unit of time). Based on this information,
the developer can hand-tune the critical parts of the
extractor, rerun the Profiler, and validate an increase
in throughput. She would repeat this process until
satisfied with the extractor’s runtime performance.
</bodyText>
<subsectionHeader confidence="0.938902">
3.4 Delivery and Deployment
</subsectionHeader>
<bodyText confidence="0.999986">
Once satisfied with both the result quality and
runtime performance, the developer is guided by
WizIE’s Export wizard through the process of ex-
porting the extractor in a compiled executable form.
The generated executable can be embedded in an ap-
plication using a Java API interface. WizIE can also
wrap the executable plan in a pre-packaged applica-
tion that can be run in a map-reduce environment,
then deploy this application on a Hadoop cluster.
</bodyText>
<sectionHeader confidence="0.997328" genericHeader="evaluation">
4 Evaluation
</sectionHeader>
<bodyText confidence="0.997959545454545">
A preliminary user study was conducted to evalu-
ate the effectiveness of WizIE in enabling novice IE
developers. The study included 14 participants, all
employed at a major technology company. In the
pre-study survey, 10 of the participants reported no
prior experience with IE tasks, two of them have
seen demonstrations of IE systems, and two had
brief involvement in IE development, but no expe-
rience with WizIE. For the question “According to
your understanding, how easy is it to build IE appli-
cations in general ?”, the median rating was 5, on a
</bodyText>
<page confidence="0.997426">
113
</page>
<bodyText confidence="0.9998982">
scale of 1 (very easy) to 7 (very difficult).
The study was conducted during a 2-day training
session. In Day 1, participants were given a thor-
ough introduction to IE, shown example extractors,
and instructed to develop extractors without WizIE.
Towards the end of Day 1, participants were asked
to solve an IE exercise: develop an extractor for
the high-level requirement of identifying mentions
of company revenue by division from the company’s
official press releases. WizIE was introduced to the
participants in Day 2 of the training, and its fea-
tures were demonstrated and explained with exam-
ples. Participants were then asked to complete the
same exercise as in Day 1. Authors of this demon-
stration were present to help participants during the
exercises in both days. At the end of each day, par-
ticipants filled out a survey about their experience.
In Day 1, none of the participants were able to
complete the exercise after 90 minutes. In the sur-
vey, one participant wrote “I am in sales so it is all
difficult”; another participant indicated that “I don’t
think I would be able to recreate the example on my
own from scratch”. In Day 2, most participants were
able to complete the exercise in 90 minutes or less
using WizIE. In fact, two participants created extrac-
tors with accuracy and coverage of over 90%, when
measured against the ground truth. Overall, the par-
ticipants were much more confident about creating
extractors. One participant wrote “My first impres-
sion is very good”. On the other hand, another par-
ticipant asserted that “The nature of the task is still
difficult”. They also found that WizIE is useful and
easy to use, and it is easier to build extractors with
the help of WizIE.
In summary, our preliminary results indicate that
WizIE is a step forward towards enabling extractor
development for novice IE developers. In order to
formally evaluate WizIE, we are currently conduct-
ing a formal study of using WizIE to create extrac-
tors for several real business applications.
</bodyText>
<sectionHeader confidence="0.99951" genericHeader="conclusions">
5 Demonstration
</sectionHeader>
<bodyText confidence="0.999992266666667">
In this demonstration we showcase WizIE’s step-by-
step approach to guide the developer in the iterative
process of IE rule development, from task analysis
to developing, tuning and deploying the extractor
in a production environment. Our demonstration is
centered around the high-level business requirement
of identifying intent to purchase movies from blogs
and forum posts as described in Section 3. We start
by demonstrating the process of developing two rel-
atively simple extractors for identifying MovieIntent
and MovieRating mentions. We then showcase com-
plex state-of-the-art extractors for identifying buzz
and sentiment for the media and entertainment do-
main, to illustrate the quality and runtime perfor-
mance of extractors built with WizIE.
</bodyText>
<sectionHeader confidence="0.999434" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999899625">
F. Brauer, R. Rieger, A. Mocan, and W. M. Barczynski.
2011. Enabling information extraction by inference of
regular expressions from sample entities. In CIKM.
L. Chiticariu, R. Krishnamurthy, Y. Li, S. Raghavan,
F. Reiss, and S. Vaithyanathan. 2010a. SystemT: an
algebraic approach to declarative information extrac-
tion. ACL.
L. Chiticariu, R. Krishnamurthy, Y. Li, F. Reiss, and
S. Vaithyanathan. 2010b. Domain adaptation of rule-
based annotators for named-entity recognition tasks.
EMNLP.
L. Chiticariu, Y. Li, S. Raghavan, and F. Reiss. 2010c.
Enterprise Information Extraction: Recent Develop-
ments and Open Challenges. In SIGMOD (Tutorials).
H. Cunningham, D. Maynard, K. Bontcheva, and
V. Tablan. 2002. Gate: an architecture for develop-
ment of robust hlt applications. In ACL.
J.A. Howard and J.N. Sheth. 1969. The Theory of Buyer
Behavior. Wiley.
IBM. InfoSphere BigInsights - Annotation Query Lan-
guage (AQL) reference. http://ibm.co/kkzj1i.
IBM. 2012. InfoSphere BigInsights. http://ibm.co/jjbjfa.
Y. Li, R. Krishnamurthy, S. Raghavan, S. Vaithyanathan,
and H. V. Jagadish. 2008. Regular expression learning
for information extraction. In EMNLP.
Y. Li, V. Chu, S. Blohm, H. Zhu, and H. Ho. 2011a. Fa-
cilitating pattern discovery for relation extraction with
semantic-signature-based clustering. In CIKM.
Y. Li, F. Reiss, and L. Chiticariu. 2011b. SystemT: A
Declarative Information Extraction System. In ACL
(Demonstration).
B. Liu, L. Chiticariu, V. Chu, H. V. Jagadish, and F. Reiss.
2010. Automatic Rule Refinement for Information
Extraction. PVLDB, 3(1):588–597.
S. Soderland. 1999. Learning information extrac-
tion rules for semi-structured and free text. Machine
Learning, 34(1-3):233–272, February.
B. R. Soundrarajan, T. Ginter, and S. L. DuVall. 2011.
An interface for rapid natural language processing de-
velopment in UIMA. In ACL (Demonstrations).
</reference>
<page confidence="0.998655">
114
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.878395">
<title confidence="0.999615">A Best Practices Guided Development for Information Extraction</title>
<author confidence="0.997429">Yunyao Li Laura Chiticariu Huahai Yang Frederick R Reiss Arnaldo Carreno-fuentes</author>
<affiliation confidence="0.997012">IBM Research - Almaden</affiliation>
<address confidence="0.999519">650 Harry San Jose, CA 95120</address>
<abstract confidence="0.995075791666666">Information extraction (IE) is becoming a critical building block in many enterprise applications. In order to satisfy the increasing text analytics demands of enterprise applications, it is crucial to enable developers with general computer science background to develop high quality IE extractors. In this demonstration, present an IE development environment intended to reduce the development life cycle and enable developers with little or no linguistic background to write high qual- IE rules. an integrated wizard-like environment that guides IE developers step-by-step throughout the entire development process, based on best practices synthesized from the experience of expert devel- In addition, the manual effort involved in performing key IE development tasks by offering automatic result explanation and rule discovery functionality. Preresults indicate that a step forward towards enabling extractor development for novice IE developers.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>F Brauer</author>
<author>R Rieger</author>
<author>A Mocan</author>
<author>W M Barczynski</author>
</authors>
<title>Enabling information extraction by inference of regular expressions from sample entities.</title>
<date>2011</date>
<booktitle>In CIKM.</booktitle>
<contexts>
<context position="2891" citStr="Brauer et al., 2011" startWordPosition="420" endWordPosition="423">nt is regarded as a major bottleneck in satisfying the increasing text analytics demands of enterprise applications. Hence, reducing the extractor development life cycle is a critical requirement. Towards this goal, we have built WizIE, an IE development environment designed primarily to (1) enable developers with little or no linguistic background to write high quality extractors, and (2) reduce the overall manual effort involved in extractor development. Previous work on improving the usability of IE systems has mainly focused on reducing the manual effort involved in extractor development (Brauer et al., 2011; Li et al., 2008; Li et al., 2011a; Soderland, 1999; Liu et al., 2010). In contrast, the focus of WizIE is on lowering the extractor development entry barrier by means of a wizard-like environment that guides extractor development based on best practices drawn from the experience of trained linguists and expert developers. In doing so, WizIE also provides natural entry points for different tools focused on reducing the effort required for performing common tasks during IE development. Underlying our WizIE are a state-of-the-art IE rule language and corresponding runtime engine (Chiticariu et </context>
</contexts>
<marker>Brauer, Rieger, Mocan, Barczynski, 2011</marker>
<rawString>F. Brauer, R. Rieger, A. Mocan, and W. M. Barczynski. 2011. Enabling information extraction by inference of regular expressions from sample entities. In CIKM.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L Chiticariu</author>
<author>R Krishnamurthy</author>
<author>Y Li</author>
<author>S Raghavan</author>
<author>F Reiss</author>
<author>S Vaithyanathan</author>
</authors>
<title>SystemT: an algebraic approach to declarative information extraction.</title>
<date>2010</date>
<publisher>ACL.</publisher>
<contexts>
<context position="1861" citStr="Chiticariu et al., 2010" startWordPosition="269" endWordPosition="272">enabling extractor development for novice IE developers. 1 Introduction Information Extraction (IE) refers to the problem of extracting structured information from unstructured or semi-structured text. It has been well-studied by the Natural Language Processing research community for a long time. In recent years, IE has emerged as a critical building block in a wide range of enterprise applications, including financial risk analysis, social media analytics and regulatory compliance, among many others. An important practical challenge driven by the use of IE in these applications is usability (Chiticariu et al., 2010c): specifically, how to enable the ease of development and maintenance of high-quality information extraction rules, also known as annotators, or extractors. Developing extractors is a notoriously laborintensive and time-consuming process. In order to ensure highly accurate and reliable results, this task is traditionally performed by trained linguists with domain expertise. As a result, extractor development is regarded as a major bottleneck in satisfying the increasing text analytics demands of enterprise applications. Hence, reducing the extractor development life cycle is a critical requi</context>
<context position="3500" citStr="Chiticariu et al., 2010" startWordPosition="520" endWordPosition="523">r et al., 2011; Li et al., 2008; Li et al., 2011a; Soderland, 1999; Liu et al., 2010). In contrast, the focus of WizIE is on lowering the extractor development entry barrier by means of a wizard-like environment that guides extractor development based on best practices drawn from the experience of trained linguists and expert developers. In doing so, WizIE also provides natural entry points for different tools focused on reducing the effort required for performing common tasks during IE development. Underlying our WizIE are a state-of-the-art IE rule language and corresponding runtime engine (Chiticariu et al., 2010a; Li et al., 2011b). The runtime engine and WizIE are commercially avail109 Proceedings of the 50th Annual Meeting of the Association for Computational Linguistics, pages 109–114, Jeju, Republic of Korea, 8-14 July 2012. c�2012 Association for Computational Linguistics Figure 1: Best Practices for Extractor Development Rule Performance Task Analysis Delivery Development Tuning Input Documents Label Text/Clues Develop Extractor Test Extractor Profile Extractor Export Extractor able as part of IBM InfoSphere BigInsights (IBM, 2012). 2 System Overview The development process for high-quality, hi</context>
<context position="7870" citStr="Chiticariu et al., 2010" startWordPosition="1199" endWordPosition="1202">the second phase of building an extractor, the Rule Development phase. The Extraction Task panel on the left provides information and tips for rule development, whereas the Extraction Plan panel on the right guides the actual rule development for each extraction task. As shown in the figure, the types of rules associated with each label node fall into three categories: Basic Features, Can&apos;The exact sample size varies by task type. 110 Figure 2: Labeling Snippets and Clues of Interest didate Generation and Filter&amp;Consolidate. This categorization is based on best practices for rule development (Chiticariu et al., 2010b). As such, the extraction plan groups together the high-level specification of extraction tasks via examples, and the actual implementation of those tasks via rules. The developer creates rules directly in the Rule Editor, or via the Create Statement wizard, accessible from the Statements node of each label in the Extraction Plan panel: The wizard allows the user to select a type for the new rule, from predefined sets for each of the three categories. The types of rules exposed in each category are informed by best practices. For example, the Basic Features category includes rules for defini</context>
</contexts>
<marker>Chiticariu, Krishnamurthy, Li, Raghavan, Reiss, Vaithyanathan, 2010</marker>
<rawString>L. Chiticariu, R. Krishnamurthy, Y. Li, S. Raghavan, F. Reiss, and S. Vaithyanathan. 2010a. SystemT: an algebraic approach to declarative information extraction. ACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L Chiticariu</author>
<author>R Krishnamurthy</author>
<author>Y Li</author>
<author>F Reiss</author>
<author>S Vaithyanathan</author>
</authors>
<title>Domain adaptation of rulebased annotators for named-entity recognition tasks.</title>
<date>2010</date>
<publisher>EMNLP.</publisher>
<contexts>
<context position="1861" citStr="Chiticariu et al., 2010" startWordPosition="269" endWordPosition="272">enabling extractor development for novice IE developers. 1 Introduction Information Extraction (IE) refers to the problem of extracting structured information from unstructured or semi-structured text. It has been well-studied by the Natural Language Processing research community for a long time. In recent years, IE has emerged as a critical building block in a wide range of enterprise applications, including financial risk analysis, social media analytics and regulatory compliance, among many others. An important practical challenge driven by the use of IE in these applications is usability (Chiticariu et al., 2010c): specifically, how to enable the ease of development and maintenance of high-quality information extraction rules, also known as annotators, or extractors. Developing extractors is a notoriously laborintensive and time-consuming process. In order to ensure highly accurate and reliable results, this task is traditionally performed by trained linguists with domain expertise. As a result, extractor development is regarded as a major bottleneck in satisfying the increasing text analytics demands of enterprise applications. Hence, reducing the extractor development life cycle is a critical requi</context>
<context position="3500" citStr="Chiticariu et al., 2010" startWordPosition="520" endWordPosition="523">r et al., 2011; Li et al., 2008; Li et al., 2011a; Soderland, 1999; Liu et al., 2010). In contrast, the focus of WizIE is on lowering the extractor development entry barrier by means of a wizard-like environment that guides extractor development based on best practices drawn from the experience of trained linguists and expert developers. In doing so, WizIE also provides natural entry points for different tools focused on reducing the effort required for performing common tasks during IE development. Underlying our WizIE are a state-of-the-art IE rule language and corresponding runtime engine (Chiticariu et al., 2010a; Li et al., 2011b). The runtime engine and WizIE are commercially avail109 Proceedings of the 50th Annual Meeting of the Association for Computational Linguistics, pages 109–114, Jeju, Republic of Korea, 8-14 July 2012. c�2012 Association for Computational Linguistics Figure 1: Best Practices for Extractor Development Rule Performance Task Analysis Delivery Development Tuning Input Documents Label Text/Clues Develop Extractor Test Extractor Profile Extractor Export Extractor able as part of IBM InfoSphere BigInsights (IBM, 2012). 2 System Overview The development process for high-quality, hi</context>
<context position="7870" citStr="Chiticariu et al., 2010" startWordPosition="1199" endWordPosition="1202">the second phase of building an extractor, the Rule Development phase. The Extraction Task panel on the left provides information and tips for rule development, whereas the Extraction Plan panel on the right guides the actual rule development for each extraction task. As shown in the figure, the types of rules associated with each label node fall into three categories: Basic Features, Can&apos;The exact sample size varies by task type. 110 Figure 2: Labeling Snippets and Clues of Interest didate Generation and Filter&amp;Consolidate. This categorization is based on best practices for rule development (Chiticariu et al., 2010b). As such, the extraction plan groups together the high-level specification of extraction tasks via examples, and the actual implementation of those tasks via rules. The developer creates rules directly in the Rule Editor, or via the Create Statement wizard, accessible from the Statements node of each label in the Extraction Plan panel: The wizard allows the user to select a type for the new rule, from predefined sets for each of the three categories. The types of rules exposed in each category are informed by best practices. For example, the Basic Features category includes rules for defini</context>
</contexts>
<marker>Chiticariu, Krishnamurthy, Li, Reiss, Vaithyanathan, 2010</marker>
<rawString>L. Chiticariu, R. Krishnamurthy, Y. Li, F. Reiss, and S. Vaithyanathan. 2010b. Domain adaptation of rulebased annotators for named-entity recognition tasks. EMNLP.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L Chiticariu</author>
<author>Y Li</author>
<author>S Raghavan</author>
<author>F Reiss</author>
</authors>
<title>Enterprise Information Extraction: Recent Developments and Open Challenges.</title>
<date>2010</date>
<booktitle>In SIGMOD (Tutorials).</booktitle>
<contexts>
<context position="1861" citStr="Chiticariu et al., 2010" startWordPosition="269" endWordPosition="272">enabling extractor development for novice IE developers. 1 Introduction Information Extraction (IE) refers to the problem of extracting structured information from unstructured or semi-structured text. It has been well-studied by the Natural Language Processing research community for a long time. In recent years, IE has emerged as a critical building block in a wide range of enterprise applications, including financial risk analysis, social media analytics and regulatory compliance, among many others. An important practical challenge driven by the use of IE in these applications is usability (Chiticariu et al., 2010c): specifically, how to enable the ease of development and maintenance of high-quality information extraction rules, also known as annotators, or extractors. Developing extractors is a notoriously laborintensive and time-consuming process. In order to ensure highly accurate and reliable results, this task is traditionally performed by trained linguists with domain expertise. As a result, extractor development is regarded as a major bottleneck in satisfying the increasing text analytics demands of enterprise applications. Hence, reducing the extractor development life cycle is a critical requi</context>
<context position="3500" citStr="Chiticariu et al., 2010" startWordPosition="520" endWordPosition="523">r et al., 2011; Li et al., 2008; Li et al., 2011a; Soderland, 1999; Liu et al., 2010). In contrast, the focus of WizIE is on lowering the extractor development entry barrier by means of a wizard-like environment that guides extractor development based on best practices drawn from the experience of trained linguists and expert developers. In doing so, WizIE also provides natural entry points for different tools focused on reducing the effort required for performing common tasks during IE development. Underlying our WizIE are a state-of-the-art IE rule language and corresponding runtime engine (Chiticariu et al., 2010a; Li et al., 2011b). The runtime engine and WizIE are commercially avail109 Proceedings of the 50th Annual Meeting of the Association for Computational Linguistics, pages 109–114, Jeju, Republic of Korea, 8-14 July 2012. c�2012 Association for Computational Linguistics Figure 1: Best Practices for Extractor Development Rule Performance Task Analysis Delivery Development Tuning Input Documents Label Text/Clues Develop Extractor Test Extractor Profile Extractor Export Extractor able as part of IBM InfoSphere BigInsights (IBM, 2012). 2 System Overview The development process for high-quality, hi</context>
<context position="7870" citStr="Chiticariu et al., 2010" startWordPosition="1199" endWordPosition="1202">the second phase of building an extractor, the Rule Development phase. The Extraction Task panel on the left provides information and tips for rule development, whereas the Extraction Plan panel on the right guides the actual rule development for each extraction task. As shown in the figure, the types of rules associated with each label node fall into three categories: Basic Features, Can&apos;The exact sample size varies by task type. 110 Figure 2: Labeling Snippets and Clues of Interest didate Generation and Filter&amp;Consolidate. This categorization is based on best practices for rule development (Chiticariu et al., 2010b). As such, the extraction plan groups together the high-level specification of extraction tasks via examples, and the actual implementation of those tasks via rules. The developer creates rules directly in the Rule Editor, or via the Create Statement wizard, accessible from the Statements node of each label in the Extraction Plan panel: The wizard allows the user to select a type for the new rule, from predefined sets for each of the three categories. The types of rules exposed in each category are informed by best practices. For example, the Basic Features category includes rules for defini</context>
</contexts>
<marker>Chiticariu, Li, Raghavan, Reiss, 2010</marker>
<rawString>L. Chiticariu, Y. Li, S. Raghavan, and F. Reiss. 2010c. Enterprise Information Extraction: Recent Developments and Open Challenges. In SIGMOD (Tutorials).</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Cunningham</author>
<author>D Maynard</author>
<author>K Bontcheva</author>
<author>V Tablan</author>
</authors>
<title>Gate: an architecture for development of robust hlt applications.</title>
<date>2002</date>
<booktitle>In ACL.</booktitle>
<contexts>
<context position="4958" citStr="Cunningham et al., 2002" startWordPosition="737" endWordPosition="740">loped during the Rule Development phase. The rules are profiled and further fine-tuned in the Performance Tuning phase, to ensure high runtime performance. Finally, in the Delivery phase, the rules are packaged so that they can be easily embedded in various applications. WizIE is designed to assist and enable both novice and experienced developers by providing an intuitive wizard-like interface that is informed by the best practices in extractor development throughout each of these phases. By doing so, WizIE seeks to provide the key missing pieces in a conventional IE development environment (Cunningham et al., 2002; Li et al., 2011b; Soundrarajan et al., 2011), based on our experience as expert IE developers, as well as our interactions with novice developers with general computer science background, but little text analytics experience, during the development of several enterprise applications. 3 The Development Environment In this section, we present the general functionality of WizIE in the context of extraction tasks driven by real business use cases from the media and entertainment domain. We describe WizIE in details and show how it guides and assists IE developers in a step-by-step fashion, based</context>
</contexts>
<marker>Cunningham, Maynard, Bontcheva, Tablan, 2002</marker>
<rawString>H. Cunningham, D. Maynard, K. Bontcheva, and V. Tablan. 2002. Gate: an architecture for development of robust hlt applications. In ACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J A Howard</author>
<author>J N Sheth</author>
</authors>
<title>The Theory of Buyer Behavior.</title>
<date>1969</date>
<publisher>Wiley.</publisher>
<contexts>
<context position="5835" citStr="Howard and Sheth, 1969" startWordPosition="876" endWordPosition="879">several enterprise applications. 3 The Development Environment In this section, we present the general functionality of WizIE in the context of extraction tasks driven by real business use cases from the media and entertainment domain. We describe WizIE in details and show how it guides and assists IE developers in a step-by-step fashion, based on best practices. 3.1 Task Analysis The high-level business requirement of our running example is to identify intention to purchase for movies from online forums. Such information is of great interest to marketers as it helps predict future purchases (Howard and Sheth, 1969). During the first phrase of IE development (Fig. 2), WizIE guides the rule developer in turning such a high-level business requirement into concrete extraction tasks by explicitly asking her to select and manually examine a small number 1 of sample documents, identify and label snippets of interest in the sample documents, and capture clues that help to identify such snippets. The definition and context of the concrete extraction tasks are captured by a tree structure called the extraction plan (e.g. right panel in Fig. 2). Each leaf node in an extraction plan corresponds to an atomic extract</context>
</contexts>
<marker>Howard, Sheth, 1969</marker>
<rawString>J.A. Howard and J.N. Sheth. 1969. The Theory of Buyer Behavior. Wiley.</rawString>
</citation>
<citation valid="false">
<authors>
<author>IBM</author>
</authors>
<title>InfoSphere BigInsights - Annotation Query Language (AQL)</title>
<note>reference. http://ibm.co/kkzj1i.</note>
<marker>IBM, </marker>
<rawString>IBM. InfoSphere BigInsights - Annotation Query Language (AQL) reference. http://ibm.co/kkzj1i.</rawString>
</citation>
<citation valid="true">
<authors>
<author>InfoSphere BigInsights http ibm cojjbjfa Y Li</author>
<author>R Krishnamurthy</author>
<author>S Raghavan</author>
<author>S Vaithyanathan</author>
<author>H V Jagadish</author>
</authors>
<title>Regular expression learning for information extraction.</title>
<date>2008</date>
<booktitle>In EMNLP.</booktitle>
<contexts>
<context position="2908" citStr="Li et al., 2008" startWordPosition="424" endWordPosition="427">ajor bottleneck in satisfying the increasing text analytics demands of enterprise applications. Hence, reducing the extractor development life cycle is a critical requirement. Towards this goal, we have built WizIE, an IE development environment designed primarily to (1) enable developers with little or no linguistic background to write high quality extractors, and (2) reduce the overall manual effort involved in extractor development. Previous work on improving the usability of IE systems has mainly focused on reducing the manual effort involved in extractor development (Brauer et al., 2011; Li et al., 2008; Li et al., 2011a; Soderland, 1999; Liu et al., 2010). In contrast, the focus of WizIE is on lowering the extractor development entry barrier by means of a wizard-like environment that guides extractor development based on best practices drawn from the experience of trained linguists and expert developers. In doing so, WizIE also provides natural entry points for different tools focused on reducing the effort required for performing common tasks during IE development. Underlying our WizIE are a state-of-the-art IE rule language and corresponding runtime engine (Chiticariu et al., 2010a; Li et</context>
</contexts>
<marker>Li, Krishnamurthy, Raghavan, Vaithyanathan, Jagadish, 2008</marker>
<rawString>IBM. 2012. InfoSphere BigInsights. http://ibm.co/jjbjfa. Y. Li, R. Krishnamurthy, S. Raghavan, S. Vaithyanathan, and H. V. Jagadish. 2008. Regular expression learning for information extraction. In EMNLP.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Y Li</author>
<author>V Chu</author>
<author>S Blohm</author>
<author>H Zhu</author>
<author>H Ho</author>
</authors>
<title>Facilitating pattern discovery for relation extraction with semantic-signature-based clustering.</title>
<date>2011</date>
<booktitle>In CIKM.</booktitle>
<contexts>
<context position="2925" citStr="Li et al., 2011" startWordPosition="428" endWordPosition="431">n satisfying the increasing text analytics demands of enterprise applications. Hence, reducing the extractor development life cycle is a critical requirement. Towards this goal, we have built WizIE, an IE development environment designed primarily to (1) enable developers with little or no linguistic background to write high quality extractors, and (2) reduce the overall manual effort involved in extractor development. Previous work on improving the usability of IE systems has mainly focused on reducing the manual effort involved in extractor development (Brauer et al., 2011; Li et al., 2008; Li et al., 2011a; Soderland, 1999; Liu et al., 2010). In contrast, the focus of WizIE is on lowering the extractor development entry barrier by means of a wizard-like environment that guides extractor development based on best practices drawn from the experience of trained linguists and expert developers. In doing so, WizIE also provides natural entry points for different tools focused on reducing the effort required for performing common tasks during IE development. Underlying our WizIE are a state-of-the-art IE rule language and corresponding runtime engine (Chiticariu et al., 2010a; Li et al., 2011b). The</context>
<context position="4975" citStr="Li et al., 2011" startWordPosition="741" endWordPosition="744">elopment phase. The rules are profiled and further fine-tuned in the Performance Tuning phase, to ensure high runtime performance. Finally, in the Delivery phase, the rules are packaged so that they can be easily embedded in various applications. WizIE is designed to assist and enable both novice and experienced developers by providing an intuitive wizard-like interface that is informed by the best practices in extractor development throughout each of these phases. By doing so, WizIE seeks to provide the key missing pieces in a conventional IE development environment (Cunningham et al., 2002; Li et al., 2011b; Soundrarajan et al., 2011), based on our experience as expert IE developers, as well as our interactions with novice developers with general computer science background, but little text analytics experience, during the development of several enterprise applications. 3 The Development Environment In this section, we present the general functionality of WizIE in the context of extraction tasks driven by real business use cases from the media and entertainment domain. We describe WizIE in details and show how it guides and assists IE developers in a step-by-step fashion, based on best practice</context>
<context position="11755" citStr="Li et al., 2011" startWordPosition="1813" endWordPosition="1816">ding any MovieIntentCandidate mentions containing a past tense verb form such as saw, since past tense in not usually indicative of intent (Liu et al., 2010). Pattern Discovery. Negative contextual clues such as the verb “saw” above are useful for creating rules that filter out false positives. Conversely, positive clues such as the phrase “will see” are useful for creating rules that separate ambiguous matches from high-precision matches. WizIE’s Pattern Discovery component facilitates automatic discovery of such clues by mining available sample data for common patterns in specific contexts (Li et al., 2011a). For example, when instructed to analyze the context between SelfRef and MovieName mentions, Pattern Discovery finds a suite of common patterns as shown in Fig. 4. The developer can analyze these patterns and choose those suitable for refining the rules. For example, patterns such as “have to see” can be seen as positive clues for intent, whereas phrases such as “took ... to see” or “went to see” are negative clues, and can be used for filtering false positives. Regular Expression Generator. WizIE also enables the discovery of regular expression patterns. The Regular Expression Generator ta</context>
</contexts>
<marker>Li, Chu, Blohm, Zhu, Ho, 2011</marker>
<rawString>Y. Li, V. Chu, S. Blohm, H. Zhu, and H. Ho. 2011a. Facilitating pattern discovery for relation extraction with semantic-signature-based clustering. In CIKM.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Y Li</author>
<author>F Reiss</author>
<author>L Chiticariu</author>
</authors>
<title>SystemT: A Declarative Information Extraction System. In</title>
<date>2011</date>
<journal>ACL (Demonstration).</journal>
<contexts>
<context position="2925" citStr="Li et al., 2011" startWordPosition="428" endWordPosition="431">n satisfying the increasing text analytics demands of enterprise applications. Hence, reducing the extractor development life cycle is a critical requirement. Towards this goal, we have built WizIE, an IE development environment designed primarily to (1) enable developers with little or no linguistic background to write high quality extractors, and (2) reduce the overall manual effort involved in extractor development. Previous work on improving the usability of IE systems has mainly focused on reducing the manual effort involved in extractor development (Brauer et al., 2011; Li et al., 2008; Li et al., 2011a; Soderland, 1999; Liu et al., 2010). In contrast, the focus of WizIE is on lowering the extractor development entry barrier by means of a wizard-like environment that guides extractor development based on best practices drawn from the experience of trained linguists and expert developers. In doing so, WizIE also provides natural entry points for different tools focused on reducing the effort required for performing common tasks during IE development. Underlying our WizIE are a state-of-the-art IE rule language and corresponding runtime engine (Chiticariu et al., 2010a; Li et al., 2011b). The</context>
<context position="4975" citStr="Li et al., 2011" startWordPosition="741" endWordPosition="744">elopment phase. The rules are profiled and further fine-tuned in the Performance Tuning phase, to ensure high runtime performance. Finally, in the Delivery phase, the rules are packaged so that they can be easily embedded in various applications. WizIE is designed to assist and enable both novice and experienced developers by providing an intuitive wizard-like interface that is informed by the best practices in extractor development throughout each of these phases. By doing so, WizIE seeks to provide the key missing pieces in a conventional IE development environment (Cunningham et al., 2002; Li et al., 2011b; Soundrarajan et al., 2011), based on our experience as expert IE developers, as well as our interactions with novice developers with general computer science background, but little text analytics experience, during the development of several enterprise applications. 3 The Development Environment In this section, we present the general functionality of WizIE in the context of extraction tasks driven by real business use cases from the media and entertainment domain. We describe WizIE in details and show how it guides and assists IE developers in a step-by-step fashion, based on best practice</context>
<context position="11755" citStr="Li et al., 2011" startWordPosition="1813" endWordPosition="1816">ding any MovieIntentCandidate mentions containing a past tense verb form such as saw, since past tense in not usually indicative of intent (Liu et al., 2010). Pattern Discovery. Negative contextual clues such as the verb “saw” above are useful for creating rules that filter out false positives. Conversely, positive clues such as the phrase “will see” are useful for creating rules that separate ambiguous matches from high-precision matches. WizIE’s Pattern Discovery component facilitates automatic discovery of such clues by mining available sample data for common patterns in specific contexts (Li et al., 2011a). For example, when instructed to analyze the context between SelfRef and MovieName mentions, Pattern Discovery finds a suite of common patterns as shown in Fig. 4. The developer can analyze these patterns and choose those suitable for refining the rules. For example, patterns such as “have to see” can be seen as positive clues for intent, whereas phrases such as “took ... to see” or “went to see” are negative clues, and can be used for filtering false positives. Regular Expression Generator. WizIE also enables the discovery of regular expression patterns. The Regular Expression Generator ta</context>
</contexts>
<marker>Li, Reiss, Chiticariu, 2011</marker>
<rawString>Y. Li, F. Reiss, and L. Chiticariu. 2011b. SystemT: A Declarative Information Extraction System. In ACL (Demonstration).</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Liu</author>
<author>L Chiticariu</author>
<author>V Chu</author>
<author>H V Jagadish</author>
<author>F Reiss</author>
</authors>
<title>Automatic Rule Refinement for Information Extraction.</title>
<date>2010</date>
<pages>3--1</pages>
<publisher>PVLDB,</publisher>
<contexts>
<context position="2962" citStr="Liu et al., 2010" startWordPosition="435" endWordPosition="438">alytics demands of enterprise applications. Hence, reducing the extractor development life cycle is a critical requirement. Towards this goal, we have built WizIE, an IE development environment designed primarily to (1) enable developers with little or no linguistic background to write high quality extractors, and (2) reduce the overall manual effort involved in extractor development. Previous work on improving the usability of IE systems has mainly focused on reducing the manual effort involved in extractor development (Brauer et al., 2011; Li et al., 2008; Li et al., 2011a; Soderland, 1999; Liu et al., 2010). In contrast, the focus of WizIE is on lowering the extractor development entry barrier by means of a wizard-like environment that guides extractor development based on best practices drawn from the experience of trained linguists and expert developers. In doing so, WizIE also provides natural entry points for different tools focused on reducing the effort required for performing common tasks during IE development. Underlying our WizIE are a state-of-the-art IE rule language and corresponding runtime engine (Chiticariu et al., 2010a; Li et al., 2011b). The runtime engine and WizIE are commerc</context>
<context position="11297" citStr="Liu et al., 2010" startWordPosition="1746" endWordPosition="1749">he MovieIntent mention is generated by combining a SelfRef (matching first person pronouns) with a MovieName mention, and in turn, the latter is obtained by combining several MovieNameCandidate mentions. With this information, the developer can quickly determine that the SelfRef and MovieName mentions are correct, but their combination in MovieIntentCandidate is problematic. She can then proceed to refine the MovieIntentCandidate rule, for example, by avoiding any MovieIntentCandidate mentions containing a past tense verb form such as saw, since past tense in not usually indicative of intent (Liu et al., 2010). Pattern Discovery. Negative contextual clues such as the verb “saw” above are useful for creating rules that filter out false positives. Conversely, positive clues such as the phrase “will see” are useful for creating rules that separate ambiguous matches from high-precision matches. WizIE’s Pattern Discovery component facilitates automatic discovery of such clues by mining available sample data for common patterns in specific contexts (Li et al., 2011a). For example, when instructed to analyze the context between SelfRef and MovieName mentions, Pattern Discovery finds a suite of common patt</context>
</contexts>
<marker>Liu, Chiticariu, Chu, Jagadish, Reiss, 2010</marker>
<rawString>B. Liu, L. Chiticariu, V. Chu, H. V. Jagadish, and F. Reiss. 2010. Automatic Rule Refinement for Information Extraction. PVLDB, 3(1):588–597.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Soderland</author>
</authors>
<title>Learning information extraction rules for semi-structured and free text.</title>
<date>1999</date>
<booktitle>Machine Learning,</booktitle>
<pages>34--1</pages>
<contexts>
<context position="2943" citStr="Soderland, 1999" startWordPosition="432" endWordPosition="434">ncreasing text analytics demands of enterprise applications. Hence, reducing the extractor development life cycle is a critical requirement. Towards this goal, we have built WizIE, an IE development environment designed primarily to (1) enable developers with little or no linguistic background to write high quality extractors, and (2) reduce the overall manual effort involved in extractor development. Previous work on improving the usability of IE systems has mainly focused on reducing the manual effort involved in extractor development (Brauer et al., 2011; Li et al., 2008; Li et al., 2011a; Soderland, 1999; Liu et al., 2010). In contrast, the focus of WizIE is on lowering the extractor development entry barrier by means of a wizard-like environment that guides extractor development based on best practices drawn from the experience of trained linguists and expert developers. In doing so, WizIE also provides natural entry points for different tools focused on reducing the effort required for performing common tasks during IE development. Underlying our WizIE are a state-of-the-art IE rule language and corresponding runtime engine (Chiticariu et al., 2010a; Li et al., 2011b). The runtime engine an</context>
</contexts>
<marker>Soderland, 1999</marker>
<rawString>S. Soderland. 1999. Learning information extraction rules for semi-structured and free text. Machine Learning, 34(1-3):233–272, February.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B R Soundrarajan</author>
<author>T Ginter</author>
<author>S L DuVall</author>
</authors>
<title>An interface for rapid natural language processing development in UIMA.</title>
<date>2011</date>
<booktitle>In ACL (Demonstrations).</booktitle>
<contexts>
<context position="5004" citStr="Soundrarajan et al., 2011" startWordPosition="745" endWordPosition="748">e rules are profiled and further fine-tuned in the Performance Tuning phase, to ensure high runtime performance. Finally, in the Delivery phase, the rules are packaged so that they can be easily embedded in various applications. WizIE is designed to assist and enable both novice and experienced developers by providing an intuitive wizard-like interface that is informed by the best practices in extractor development throughout each of these phases. By doing so, WizIE seeks to provide the key missing pieces in a conventional IE development environment (Cunningham et al., 2002; Li et al., 2011b; Soundrarajan et al., 2011), based on our experience as expert IE developers, as well as our interactions with novice developers with general computer science background, but little text analytics experience, during the development of several enterprise applications. 3 The Development Environment In this section, we present the general functionality of WizIE in the context of extraction tasks driven by real business use cases from the media and entertainment domain. We describe WizIE in details and show how it guides and assists IE developers in a step-by-step fashion, based on best practices. 3.1 Task Analysis The high</context>
</contexts>
<marker>Soundrarajan, Ginter, DuVall, 2011</marker>
<rawString>B. R. Soundrarajan, T. Ginter, and S. L. DuVall. 2011. An interface for rapid natural language processing development in UIMA. In ACL (Demonstrations).</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>