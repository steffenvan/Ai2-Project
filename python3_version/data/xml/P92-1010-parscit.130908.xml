<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<title confidence="0.832814">
Reasoning with Descriptions of Trees *
</title>
<author confidence="0.896888">
James Rogers
</author>
<affiliation confidence="0.899691666666667">
Dept. of Comp. &amp; Info. Science
University of Delaware
Newark, DE 19716, USA
</affiliation>
<author confidence="0.930615">
K. Vijay-Shanker
</author>
<affiliation confidence="0.856707">
Dept. of Comp. Sz Info. Science
University of Delaware
Newark, DE 19716, USA
</affiliation>
<sectionHeader confidence="0.755834" genericHeader="abstract">
ABSTRACT
</sectionHeader>
<bodyText confidence="0.990909076923077">
In this paper we introduce a logic for describing
trees which allows us to reason about both the par-
ent and domination relationships. The use of dom-
ination has found a number of applications, such as
in deterministic parsers based on Description the-
ory (Marcus, Hindle &amp; Fleck, 1983), in a com-
pact organization of the basic structures of Tree-
Adjoining Grammars (Vijay-Shanker &amp; Schabes,
1992), and in a new characterization of the ad-
joining operation that allows a clean integration of
TAGs into the unification-based framework (Vijay-
Shanker, 1992) Our logic serves to formalize the
reasoning on which these applications are based.
</bodyText>
<sectionHeader confidence="0.949853" genericHeader="keywords">
1 Motivation
</sectionHeader>
<bodyText confidence="0.960202231707317">
Marcus, Hindle, and Fleck (1983) have intro-
duced Description Theory (D-theory) which consid-
ers the structure of trees in terms of the domination
relation rather than the parent relation. This forms
the basis of a class of deterministic parsers which
build partial descriptions of trees rather than the
trees themselves. As noted in (Marcus, Hindle &amp;
Fleck, 1983; Marcus, 1987), this approach is capa-
ble of maintaining Marcus&apos; deterministic hypothe-
sis (Marcus, 1980) in a number of cases where the
original deterministic parsers fail.
A motivating example is the sentence: I drove
my aunt from Peoria&apos;s car. The difficulty is that a
deterministic parser must attach the NP &amp;quot;my aunt&amp;quot;
to the tree it is constructing before evaluating the
PP. If this can only be done in terms of the par-
ent relation, the NP will be attached to the VP as
its object. It is not until the genitive marker on
&amp;quot;Peoria&apos;s&amp;quot; is detected that the correct attachment
is clear. The D-theory parser avoids the trap by
making only the judgment that the VP dominates
the NP by a path of length at least one. Subsequent
refinement can either add intervening components
or not. Thus in this case, when &amp;quot;my aunt&amp;quot; ends up
as part of the determiner of the object rather than
the object itself, it is not inconsistent with its origi-
nal placement. It is still dominated by the VP, just
not immediately. When the analysis is complete, a
tree, the standard referent, can be extracted from
the description by taking immediate domination as
the parent relation.
*This work is supported by NSF grant IRI-9016591
In other examples given in (Marcus, Hindle &amp;
Fleck, 1983) the left-of (linear precedence) rela-
tion is partially specified during parsing, with in-
dividuals related by &amp;quot;left-of or equals&amp;quot; or &amp;quot;left-of
or dominates&amp;quot;. The important point is that once
a relationship is asserted, it is never subsequently
rescinded. The D-theory parser builds structures
which are always a partial description of its final
product. These structures are made more specific,
as parsing proceeds, by adding additional relation-
ships.
Our understanding of the difficulty ordinary de-
terministic parsers have with these constructions is
that they are required to build a structure cover-
ing an initial segment of the input at a time when
there are multiple distinct trees that are consistent
with that segment. The D-theory parsers succeed
by building structures that contain only those re-
lationships that are common to all the consistent
trees. Thus the choice between alternatives for the
relationships on which the trees differ is deferred
until they are distinguished by the input, possibly
after semantic analysis.
A similar situation occurs when Tree-Adjoining
Grammars are integrated into the unification-based
framework. In TAGs, syntactic structures are built
up from sets of elementary trees by the adjunction
operation, where one tree is inserted into another
tree in place of one of its nodes. Here the difficulty
is that adjunction is non-monotonic in the sense
that there are relationships that hold in the trees
being combined that do not hold in the resulting
tree. In (Vijay-Shanker, 1992), building on some of
the ideas from D-theory, a version of TAG is intro-
duced which resolves this by manipulating partial
descriptions of trees, termed quasi-trees. Thus an
elementary structure for a transitive verb might be
the quasi-tree a&apos; rather than the tree a (Figure 1).
In a&apos; the separation represented by the dotted line
between nodes referred to by vpi and vp2 denotes a
path of length greater than or equal to zero. Thus
a&apos; captures just those relationships which are true
in a and in all trees derived from a by adjunc-
tion at VP. In this setting trees are extracted from
quasi-trees by taking what is termed a circumscrip-
tive reading, where each pair of nodes in which one
dominates the other by a path that is possibly zero
is identified.
This mechanism can be interpreted in a manner
similar to our interpretation of the use of partial
</bodyText>
<page confidence="0.99162">
72
</page>
<figure confidence="0.990999333333333">
:
NP VP
v NP
a:
NP
np
</figure>
<figureCaption confidence="0.999891">
Figure 1. Quasi-trees
</figureCaption>
<bodyText confidence="0.999215890243902">
descriptions in D-theory parsers. We view a tree
in which adjunction is permitted as the set of all
trees which can be derived from it by adjunction.
That set is represented by the quasi-tree as the set
of all relationships that are common to all of its
members.
The connection between partial descriptions of
trees and the sets of trees they describe is made
explicit in (Vijay-Shanker &amp; Schabes, 1992). Here
quasi-trees are used in developing a compact rep-
resentation of a â€¢Lexicalized TAG grammar. The
lexicon is organized hierarchically. Each class of
the hierarchy is associated with that set of relation-
ships between individuals which are common to all
trees associated with the lexical items in the class
but not (necessarily) common to all trees associated
with items in any super-class. Thus the set of trees
associated with items in a class is characterized by
the conjunction of the relationships associated with
the class and those inherited from its super-classes.
In the case of transitive verbs, figure 2, the rela-
tionships in ai can be inherited from the class of
all verbs, while the relationships in a2 are associ-
ated only with the class of transitive verbs and its
sub-classes.
The structure a&apos; of figure 1 can be derived by
combining a2 with al along with the assertion that
v2 and v1 name the same object. In any tree
described by these relationships either the node
named vpi must dominate vp2 or vice versa. Now
in al, the relationship &amp;quot;vpi dominates v1&amp;quot; does not
itself preclude vpi and v1 from naming the same ob-
ject. We can infer, however, from the fact that they
are labeled incompatibly that this is not the case.
Thus the path between them is at least one. From
a2 we have that the path between vp2 and v2 is
precisely one. Thus in all cases vpi must dominate
vp2 by a path of length greater than or equal to
zero. Hence the dashed line in a&apos;.
The common element in these three applications
is the need to manipulate structures that partially
describe trees. In each case, we can understand
this as a need to manipulate sets of trees. The
structures, which we can take to be quasi-trees in
each case, represent these sets of trees by capturing
the set of relationships that are common to all trees
in the set. Thus we are interested in quasi-trees not
just as partial descriptions of individual trees, but
as a mechanism for manipulating sets of trees.
Reasoning, as in the LTAG example, about the
structures described by combinations of quasi-trees
requires some mechanism for manipulating the
quasi-trees formally. Such a mechanism requires,
in turn, a definition of quasi-trees as formal struc-
tures. While quasi-trees were introduced in (Vijay-
Shanker, 1992), they have not been given a precise
definition. The focus of the work described here is
a formal definition of quasi-trees and the develop-
ment of a mechanism for manipulating them.
In the next section we develop an intuitive un-
derstanding of the structure of quasi-trees based
on the applications we have discussed. Following
that, we define the syntax of a language capable
of expressing descriptions of trees as formulae and
introduce quasi-trees as formal structures that de-
fine the semantics of that language. In section 4
we establish the correspondence between these for-
mal models and our intuitive idea of quasi-trees.
We then turn to a proof system, based on semantic
tableau, which serves not only as a mechanism for
reasoning about tree structures and checking the
consistency of their descriptions, but also serves to
produce models of a given consistent description.
Finally, in section 7 we consider mechanisms for de-
riving a representative tree from a quasi-tree. We
develop one such mechanism, for which we show
that the tree produced is the circumscriptive read-
ing in the context of TAG, and the standard refer-
ent in the context of D-theory. Due to space limi-
tations we can only sketch many of our proofs and
have omitted some details. The omitted material
can be found in (Rogers &amp; Vijay-Shanker, 1992).
</bodyText>
<footnote confidence="0.939425428571429">
2 Quasi-Trees
In this section, we use the term relationship to in-
formally refer to any positive relationship between
individuals which can occur in a tree, &amp;quot;a is the par-
ent of 6&amp;quot; for example. We will say that a tree satis-
fies a relationship if that relationship is true of the
individuals it names in that tree.
</footnote>
<page confidence="0.998441">
73
</page>
<figure confidence="0.9860759">
a1:
a3
NP
nP/
VI
VP .*\
2
vp2
A np
â€˜3Pâ€¢ v NP&apos;
</figure>
<figureCaption confidence="0.999986">
Figure 2. Structure Sharing in a Representation of Elementary Structures
</figureCaption>
<bodyText confidence="0.999949978723405">
It&apos;s clear, from our discussion of their applica-
tions, that quasi-trees have a dual nature â€” as a
set of trees and as a set of relationships. In for-
malizing them, our fundamental idea is to identify
those natures. We will say that a tree is (partially)
described by a set of relationships if every relation-
ship in the set is true in the tree. A set of trees is
then described by a set of relationships if each tree
in the set is described by the set of relationships.
On the other hand, a set of trees is characterized by
a set of relationships if it is described by that set
and if every relationship that is common to all of
the trees is included in the set of relationships. This
is the identity we seek; the quasi-tree viewed as a
set of relationships characterizes the same quasi-
tree when viewed as a set of trees.
Clearly we cannot easily characterize arbitrary
sets of trees. As an example, our sets of trees will
be upward-closed in the sense that, it will contain
every tree that extends some tree in the set, ie: that
contains one of the trees as an initial sub-tree. Sim-
ilarly quasi-trees viewed as sets of relationships are
not arbitrary either. Since the sets they character-
ize consist of trees, some of the structural properties
of trees will be reflected in the quasi-trees. For in-
stance, if the quasi-tree contains both the relation-
ships &amp;quot;a dominates b&amp;quot; and &amp;quot;b dominates c&amp;quot; then
every tree it describes will satisfy &amp;quot;a dominates c&amp;quot;
and therefore it must contain that relationship as
well. Thus many inferences that can be made on
the basis of the structure of trees will carry over to
quasi-trees. On the other hand, we cannot make
all of these inferences and maintain any distinction
between quasi-trees and trees. Further, for some
inferences we will have the choice of making the
inference or not. The choices we make in defining
the structure of the quasi-trees as a set of relation-
ships will determine the structure of the sets of trees
we can characterize with a single quasi-tree. Thus
these choices will be driven by how much expressive
power the application needs in describing these sets.
Our guiding principle is to make the quasi-trees as
tree-like as possible consistent with the needs of our
applications. We discuss these considerations more
fully in (Rogers &amp; Vijay-Shanker, 1992).
One inference we will not make is as follows: from
&amp;quot;a dominates V infer either &amp;quot;a equals b&amp;quot; or, for
some a&apos; and b&apos;, &amp;quot;a dominates a&apos;, a&apos; is the parent of
b&apos;, and b&apos; dominates b&amp;quot;. In structures that enforce
this condition path lengths cannot be left partially
specified. As a result, the set of quasi-trees required
to characterize a&apos; viewed as a set of trees, for in-
stance, would be infinite.
Similarly, we will not make the inference: for all
a, b, either &amp;quot;a is left-of b&amp;quot;, &amp;quot;b is left-of a&amp;quot;, &amp;quot;a dom-
inates b&amp;quot; or &amp;quot;b dominates a&amp;quot;. In these structures
the left-of relation is no longer partial, ie: for all
pairs a, b either every tree described by the quasi-
tree satisfies &amp;quot;a is left-of b&amp;quot; or none of them do. This
is not acceptable for D-theory, where both the anal-
yses of &amp;quot;pseudo-passives&amp;quot; and coordinate structures
require single structures describing sets including
both trees in which some a is left-of b and others
in which the same a is either equal to or properly
dominates that same b (Marcus, Hindle &amp; Fleck,
1983).
Finally, we consider the issue of negation. If a
tree does not satisfy some relationship then it sat-
isfies the negation of that relationship, and vice
versa. For quasi-trees the situation is more subtle.
Viewing the quasi-tree as a set of trees, if every tree
in that set fails to satisfy some relationship, then
they all satisfy the negation of that relationship.
Hence the quasi-tree must satisfy the negated rela-
tionship as well. On the other hand, viewing the
quasi-tree as a set of relationships, if a particular
relationship is not included in the quasi-tree it does
not imply that none of the trees it describes satis-
fies that relationship, only that some of those trees
do not. Thus it may be the case that a quasi-tree
neither satisfies a relationship nor satisfies its nega-
tion.
Since trees are completed objects, when a tree
satisfies the negation of a relationship it will always
be the case that the tree satisfies some (positive) re-
lationship that is incompatible with the first. For
example, in a tree &amp;quot;a does not dominate b&amp;quot; if &amp;quot;a
is left-of b&amp;quot;, &amp;quot;b is left-of a&amp;quot;, or &amp;quot;b properly dom-
inates a&amp;quot;. Thus there are inferences that can be
drawn from negated relationships in trees that may
be incorporated into the structure of quasi-trees. In
making these inferences, we dispense with the need
to include negative relationships explicitly in the
quasi-trees. They can be defined in terms of the
</bodyText>
<page confidence="0.991941">
74
</page>
<bodyText confidence="0.999785833333333">
positive relationships. The price we pay is that to
characterize the set of all trees in which &amp;quot;a does
not dominate b&amp;quot;, for instance, we will need three
quasi-trees, one characterizing each of the sets in
which &amp;quot;a is left-of b&amp;quot;, &amp;quot;b is left-of a&amp;quot;, and &amp;quot;b prop-
erly dominates a&amp;quot;.
</bodyText>
<sectionHeader confidence="0.986769" genericHeader="introduction">
3 Language
</sectionHeader>
<bodyText confidence="0.829037">
Our language is built up from the symbols:
</bodyText>
<equation confidence="0.996168666666667">
K â€” non-empty countable set of names,1
r â€” a distinguished element of K, the root
I, a+, -&lt;
</equation>
<bodyText confidence="0.873791538461538">
â€” two place predicates, parent,
proper domination, domination,
and left-of respectively,
â€” equality predicate,
A, V, â€” usual logical connectives
(, ), [,] â€” usual grouping symbols
Our atomic formulae are t a u, t u,t a* u, t
u, and t u, where t, u E K are terms. Literals are
atomic formulae or their negations. Well-formed-
formulae are generated from atoms and the logical
connectives in the usual fashion.
We use t, u, v to denote terms and 0, to denote
wffs. R denotes any of the five predicates.
</bodyText>
<subsectionHeader confidence="0.996513">
3.1 Models
</subsectionHeader>
<bodyText confidence="0.950958923076923">
Quasi-trees as formal structures are in a sense a
reduced form of the quasi-trees viewed as sets of
relationships. They incorporate a canonical sub-
set of those relationships from which the remaining
relationships can be deduced.
Definition 1 A model is a tuple (11,I,1&apos;,D, A,
where:
U is a non-empty universe,
I is a partial function from K to U
(specifying the node referred to by each name),
P, A, D, and ,C are binary relations over
(assigned to a, a+, a*, and respectively).
Let R. denote l(r).
</bodyText>
<equation confidence="0.888823692307692">
Definition 2 A quasi-tree is a model satisfying the
conditions Cq:
For all w, x, y, z E U,
CI (R,x) ED ,
C2 (X, x) E D,
C3 (x, y), (y, z) E D (x, z) ED,
C4 (x, z), (y,z) ED
(x,y) ED or (y, x) ED,
C5 (x , y) E A (x , y) E D ,
C6 (x,y) E A and (w,x),(y,z)
(w, z) E A,
C7 (x, y) E P (x, y) E A
C8 (x, z) EP
</equation>
<bodyText confidence="0.9644425">
&apos;We use names rather than constants to clarify the link
to description theory.
</bodyText>
<equation confidence="0.932907571428571">
(z , y) EL; or (y, z) E
or (y, x) E D or (z, y) E D,
C9 (x,y)we ,.C.z) E r,
and(x, w), (y, z) E D
(
(x, y) and (w, x)
(w,Y) E .0 or (w, x), (w, y) E A,
CIL (x,y)E L and (w , y) E
(x , w) E C or (w , x), (w , EA,
C12 (x, E G and (y, z) E (x, z) E r,
And meeting the additional condition: for every
x,z E U the set Bx,z = fy (x,y),(y,z) E DI
is finite, ie: the length of path from any node to
any other is finite. 2
A quasi-tree is consistent if
CC]. (x,y) EA,(y,x) VD,
CC2 (x,y)E
(x, y) D, (y, x) VD , and (y, x) G.
It is normal if
RCi for all x y E 11, either
(x,y) VD or (y, x) VD.
</equation>
<bodyText confidence="0.995636583333333">
At least one normal, consistent quasi-tree (that
consisting of only a root node) satisfies all of these
conditions simultaneously. Thus they are consis-
tent. It is not hard to exhibit a model for each
condition in which that condition fails while all of
the others hold. Thus the conditions are indepen-
dent of each other.
Trees are distinguished from (ordinary) quasi-
trees by the fact that V is the reflexive, transi-
tive closure of P, and the fact that the relations
P,D,A,C are maximal in the sense that they can-
not be consistently extended.
</bodyText>
<construct confidence="0.473844">
Definition 3 A consistent, normal quasi-tree M
is a tree if
</construct>
<equation confidence="0.4995432">
TCI. Dm = (Pm)*
TC2 for all pairs (x, y) E Um x UM,
exactly one of the following is true:
(x , y), (y, x) E DM; (x , y) E AM;
(y, x) E AM; (x, ELM; or (y, x) ECM.
</equation>
<bodyText confidence="0.999637">
Note that TC1 implies that Am = (&apos;Pm)+ as well.
It is easy to verify that a quasi-tree meets these con-
ditions if (Um, Pm) is the graph of a tree as com-
monly defined (Aho, Hoperoft &amp; Ullman, 1974).
</bodyText>
<subsectionHeader confidence="0.997584">
3.2 Satisfaction
</subsectionHeader>
<bodyText confidence="0.7913032">
The semantics of the language in terms of the
models is defined by the satisfaction relation be-
tween models and formulae.
Definition 4 A model M satisfies a formula
(M 0) as follows:
</bodyText>
<footnote confidence="0.852079666666667">
2 The additional condition excludes &amp;quot;non-standard&amp;quot; mod-
els which include components not connected to the root by
a finite sequence of immediate domination links.
</footnote>
<page confidence="0.959813">
75
</page>
<equation confidence="0.994564448275862">
mkteu iff (t),Im (u)) E Dm;
M a* u iff (Im (t),im (u)) E LM,
Vm(u),IM(t)) E Lm,
or (im (u), /m (t)) E AM;
M = t u iff (Im(t),Im(u)) EDAI
and (1111(u),Im(t)) E Dm;
M t u iff (t),1m (u)) E Am,
(1M (u), iM(t)) E AM,
(Im(t),1-m(u)) ELM,
or (Im (u),Im (0) E Lm
M t u iff (7M(t),im(u)) E Am;
M &lt;a+ u iff (Im (u),Im (t)) E Dm,
VM(t),/M(u)) E Cm,
or (I&apos;m (u),1m (t)) E Cm;
Mhtau iff (Im(t),Im(u)) ET&apos;m ;
M -it 4 u iff (Im(u),Im(t)) E DM,
E LM,
(im(u),/m(t)) E Lm, or
(Im(t), x),(x,Im(u)) E AM,
for some x E UM;
M u iff (Im (t),Im (u)) EL;
M u if (u), /m(t)) EL,
(Im (t),Im (u)) E 7,,
or (im (u), /m(t)) ED;
M m
MI=4)Ai,b iff M Hfi and M kik;
M -1(0 A 0) if M or M
m 0v 0 iff M or M 0;
M f= ---i(4) V &apos;0) if M and M
</equation>
<bodyText confidence="0.679518142857143">
In addition we require that IM(k) be defined for all
k occurring in the formula.
It is easy to verify that for all quasi-trees M
(31, u, R)[M = t R u, R M inconsistent.
1A1 is surjective then the converse holds as well.
It is also not hard to see that if T is a tree
(Vt, u, R)[T k-itRu4TKt Ru].
</bodyText>
<sectionHeader confidence="0.996538" genericHeader="method">
4 Characterization
</sectionHeader>
<bodyText confidence="0.890590823529412">
We now show that this formalization is complete
in the sense that a consistent quasi-tree as defined
characterizes the set of trees it describes. Recall
that the quasi-tree describes the set of all trees
which satisfy every literal formula which is satis-
fied by the quasi-tree. It characterizes that set if
every literal formula which is satisfied by every tree
in the set is also satisfied by the quasi-tree. The
property of satisfying every formula which is satis-
fied by the quasi-tree is captured formally by the
notion of subsumption, which we define initially as
a relationship between quasi-trees.
Definition 5 Subsumption.
Suppose M = (Um :Pm , Gm) and
M&apos; = (Um&apos; ,PA4&apos; , Am&apos; , Cm&apos;) are consis-
tent quasi-trees, then M subsumes M&apos; (M C M&apos;)
if there is a function h : Um Um such that:
</bodyText>
<equation confidence="0.9340892">
int) = NZ-m(0),
(x, y) E Pm (h(x), b(y)) E &apos;Pm&apos; ,
(x,y) EDM (h(x),h(y)) EDM,
(x, E Am =
(x, ELM (h(x),h(y)) ELM.
</equation>
<bodyText confidence="0.969085">
We now claim that any quasi-tree Q is subsumed
by a quasi-tree M if it is described by M.
Lemma 1 If M and Q are normal, consistent
quasi-trees and 1m is surjective, then M C Q iff
for all formulae k k 0.
The proof in the forward direction is an easy in-
duction on the structure of 0 and does not depend
either on normality or surjectiveness of 1m. The
opposite direction follows from the fact that, since
1m is surjective, there is a model M&apos; in which
is the set of equivalence classes wrt in the domain
0f 1M, such that M M&apos; EQ.
The next lemma allows us, in many cases, to as-
sume that a given quasi-tree is normal.
</bodyText>
<construct confidence="0.804744">
Lemma 2 For every consistent quasi-tree M,
there is a normal, consistent quasi-tree M&apos; such
that M C M&apos;, and for all normal, consistent quasi-
tree M&amp;quot;7 M C M&amp;quot; M&apos; C M&amp;quot;.
</construct>
<bodyText confidence="0.997806666666667">
The lemma is witnessed by the quotient of M with
respect to em, where em = {(x, I(x, y), (y, x) E
Dm}.
We can now state the central claim of this sec-
tion, that every consistent quasi-tree characterizes
the set of trees which it subsumes.
</bodyText>
<equation confidence="0.500097333333333">
Proposition 1 Suppose M is a consistent quasi-
tree. For all literals 4)
M q (VT, tree)[M ET
</equation>
<bodyText confidence="0.9924726">
The proof follows from two lemmas. The first estab-
lishes that the set of quasi-trees subsumed by some
quasi-tree M is in fact characterized by it. The sec-
ond extends the result to trees. Their proofs are in
(Rogers Sz Vijay-Shanker, 1992).
</bodyText>
<equation confidence="0.7090345">
Lemma 3 If M is a consistent quasi-tree and (b a
literal then
M 4=&gt;
(3Q, consistent quasi-tree)[M C Q and Q
</equation>
<bodyText confidence="0.731448">
Lemma 4 If M is a consistent quasi-tree, then
there exists a tree T such that M C T.
</bodyText>
<equation confidence="0.665089428571428">
Proof(of proposition 1)
(VT)[METTh
&lt;=&gt; --1(37&apos;)[M C T and T = -41
(=- by consistency, by completeness of trees)
.#&gt; --i(3Q, consistent q-t)[M C Q and Q
(=- by lemma 4, since T is a quasi-tree)
M
</equation>
<bodyText confidence="0.694646">
(=- by lemma 3, by lemma 1) 0
</bodyText>
<page confidence="0.870445">
76
</page>
<sectionHeader confidence="0.975405" genericHeader="method">
5 Semantic Tableau
</sectionHeader>
<bodyText confidence="0.998794357142857">
Semantic tableau as introduced by Beth (Beth,
1959; Fitting, 1990) are used to prove validity by
means of refutation. We are interested in satisfi-
ability rather than validity. Given E we wish to
build a model of E if one exists. Thus we are in-
terested in the cases where the tableau succeeds in
constructing a model.
The distinction between these uses of semantic
tableau is important, since our mechanism is not
suitable for refutational proofs. In particular, it
cannot express &amp;quot;some model fails to satisfy cb&amp;quot; ex-
cept as &amp;quot;some model satisfies -,0&amp;quot;. Since our logic is
non-classical the first is a strictly weaker condition
than the second.
</bodyText>
<figure confidence="0.673904846153846">
Definition 6 Semantic Tableau:
A branch is a set, S, of formulae.
A configuration is a collection, {Si,. â€¢ â€¢ ,Sn}, of
branches.
A tableau is a sequence, (C1, ..., Ca), of configura-
tions where each Ci+1 is a result of the application
of an inference rule to Ci.
If
511. -1â€¢9;, is an inference rule, (Ci\{S}) U
is the result of applying the rule to Ci
iff S E C.
A tableau for E, where E is a set of formulae, is a
tableau in which C1 = {E}.
</figure>
<figureCaption confidence="0.4809502">
A branch is closed if (30)[{O, -,cb} C S]. A con-
figuration is closed if each of its branches is closed,
and a tableau is closed iff it contains some closed
configuration. A branch, configuration, or tableau
that is not closed is open.
</figureCaption>
<subsectionHeader confidence="0.982032">
5.1 Inference Rules
</subsectionHeader>
<bodyText confidence="0.998757857142857">
Our inference rules fall into three groups. The
first two, figures 3 and 4, are standard rules
for propositional semantic tableau extended with
equality (Fitting, 1990). The third group, figure 5,
embody the properties of quasi-trees.
The --la rule requires the introduction of a new
name into the tableau. To simplify this, tableau are
carried out in a language augmented with a count-
ably infinite set of new names from which these are
drawn in a systematic way.
The following two lemmas establish the correct-
ness of the inference rules in the sense that no rule
increases the set of models of any branch nor elim-
inates all of the models of a satisfiable branch.
</bodyText>
<construct confidence="0.85642375">
Lemma 5 Suppose S&apos; is derived from S in some
tableau by some sequence of rule applications. Sup-
pose M is a model, then:
M =S&apos; M k S.
</construct>
<footnote confidence="0.8780935">
This follows nearly directly from the fact that all of
our rules are non-strict, ie: the branch to which an
inference rule is applied is a subset of every branch
introduced by its application.
</footnote>
<construct confidence="0.4477198">
Lemma 6 If S is a branch of some configuration
of a tableau and S&apos; is the set of branches resulting
from applying some rule to S, then if there is a
consistent quasi-tree M such that M S, then for
some E S&apos; there is a consistent quasi-tree M&apos;
</construct>
<bodyText confidence="0.920614176470588">
such that M&apos;
We sketch the proof. Suppose M k S. For all
but it is straightforward to verify M also sat-
isfies at least one of the For -la, suppose M
fails to satisfy either u a* t or -it a* u. Then we
claim some quasi-tree satisfies the third branch of
the conclusion. This must map the new constant k
to the witness for the rule. M has no such require-
ment, but since k does not occur in S, the value of
1frl(k) does not affect satisfaction of S. Thus we
get an appropriate M&apos; by modifying 1frf&apos; to map k
correctly.
Corollary 1 If there is a closed tableau for 0 then
no consistent quasi-tree satisfies 0.
No consistent quasi-tree satisfies a closed set of for-
mulae. The result then follows by induction on the
length of the tableau.
</bodyText>
<sectionHeader confidence="0.980467" genericHeader="method">
6 Constructing Models
</sectionHeader>
<bodyText confidence="0.999941833333333">
We now turn to the conditions for a branch to be
sufficiently complete to fully specify a quasi-tree.
In essence these just require that all formulae have
been expanded to atoms, that all substitutions have
been made and that the conditions in the definition
of quasi-trees are met.
</bodyText>
<subsectionHeader confidence="0.991603">
6.1 Saturated Branches
</subsectionHeader>
<construct confidence="0.5476135">
Definition 7 A set of sentences S is downward
saturated if for all formulae 0,0, and terms t,u,v:
</construct>
<equation confidence="0.972966818181818">
Hi
H2 cbVikESOES ortkES
H3 -,(96V4)ES-OES and-4ES
H4 ckAtkESOES and ibES
H5 -.(cb E S -10 E S or -4 E S
H6 t t E S for all terms t occurring in S
H7 ti ui,t2 u2 â‚¬5
ti 4* t2 E S &lt;I* /12 E S,
ti a+ t2 E S ui a+ u2 E S,
ti a t2 E S ui a u2 E S,
t1 12 E S u2 E
ti t2 E S uiu2ES.
H8 r t E S for all terms t occurring in S
H9 tr-ttluESta*uES
Hio t u E S -It u E S or a* t E S
Hii t&lt; ti,uetEStuES
H12 t U, U 4* V ESt 4* v E S
H3.3 t 4* V , U v E S
t u E S or u a* t E S
H14 -it 4* U E S
t-&lt;uES oru-OES orua+tES
Hi5ta+uESteu,-,uetES
</equation>
<footnote confidence="0.741058">
113.6 t u, s a* t, u vESs v E S
&lt;I+ u E S -It u E S or u4* t ES
Hi8 tauESt u E S
</footnote>
<page confidence="0.993168">
77
</page>
<table confidence="0.62569625">
S, V ik S,
s,ov 0,0 s,ov 5,
S, -,(0v 0)
S,OAtk S, A 0)
</table>
<figure confidence="0.707648">
A
S,0A0,4),0 S, â€”1(0 A 10I S, â€”1(0 A 1P), â€”10
</figure>
<figureCaption confidence="0.99003">
Figure 3. Elementary Rules
</figureCaption>
<equation confidence="0.894140153846154">
Hig tavESu-&lt;vES orv-0.1ES
or u a* t S or v a* u E S
H20 atzESua*tESor--ita*uES
or t a+ w, w u E S, for some term w
H21 I--&lt;tlES u, 4* -OES
H22 I-217I&lt;3*S,11.1*VESS-&lt;VES
H23 I -{ 117V &lt;I*I E S
v-&lt;uES orva+t,va+uES
H24 I 71, V u E S
t-&lt;vES orva+ t,va+uES
H25 t-cu,u-&lt;vESt-.4vES
H26 -4 u E S
u-.&lt;tES orta*uES orua*tES.
</equation>
<bodyText confidence="0.8498425625">
The next lemma (essentially Hintikka&apos;s lemma)
establishes the correspondence between saturated
branches and quasi-trees.
Lemma 7 For every consistent downward satu-
rated set of formulae S there is a consistent quasi-
tree M such that M = S. For every finite consis-
tent downward saturated set of formulae, there is a
such a quasi-tree which is finite.
Again, we sketch the proof. Consider the set T(S)
of terms occurring in a downward saturated set S.
H6 and H7 assure that is reflexive and substi-
tutive. Since t u, u vESt Pe. v E S, and
u u, u vESv u E S by substitution of
v for (the first occurrence of) u, it is transitive and
symmetric as well. Thus&amp;quot;:,-â€¢ partitions T(S) into
equivalence classes.
</bodyText>
<equation confidence="0.868163142857143">
Define the model H as follows:
UH =
111(0 = [4=-1,
PH = {([t],, ,[u],,) itauESL
DH = {Wk., [u],,.) It a* U E S},
AH = {([t],,, [u],,) I t a+ u E S},
,CH = [4:4 It-&lt;uES}.
</equation>
<bodyText confidence="0.97731325">
Since each of the conditions Ci through C12 corre-
sponds directly to one of the saturation conditions,
it is easy to verify that H satisfies Cq. It is equally
easy to confirm that H is both consistent and nor-
mal.
We claim that (1)ES-Hk 0. As is usual for
versions of Hintikka&apos;s lemma, this is established by
an induction on the structure of cb. Space prevents
us from giving the details here.
For the second part of the lemma, if the set of
formulae is finite, then the set of terms (and hence
the set of equivalence classes) is finite.
</bodyText>
<subsectionHeader confidence="0.995719">
6.2 Saturated Tableau
</subsectionHeader>
<bodyText confidence="0.965272846153846">
Since all of our inference rules are non-strict, if a
rule once applies to a branch it will always apply to
a branch. Without some restriction on the applica-
tion of rules, tableau for satisfiable sets of formulae
will never terminate. What is required is a control
strategy that guarantees that no rule applies to any
tableau more than finitely often, but that will al-
ways find a rule to apply to any open branch that
is not downward saturated.
Definition 8 Let EQ s be the reflexive, symmetric,
transitive closure of {t, u) It u E Sl.
An inference rule, I, applies to some branch S
of a configuration C if
</bodyText>
<listItem confidence="0.9619008">
â€¢ S is open
â€¢ S {Si I Si results from application oil to S}
â€¢ if I introduces a new constant a occurring in
formulae 4i2(a) E Si, there is no term t and
pairs (ui,v1),(u2,v2),... E EQs such that for
</listItem>
<bodyText confidence="0.989224">
each of the cbj, u2/v2, E S.
(Where O{t&apos; a, uilvi , u2Iv2, ...} denotes the re-
sult of uniformly substituting t for a, u1 for v1,
etc., in O.)
The last condition in effect requires all equality
rules to be applied before any new constant is in-
troduced. It prevents the introduction of a formula
involving a new constant if an equivalent formula
already exists or if it is possible to derive one using
only the equality rules.
We now argue that this definition of applies does
not terminate any branch too soon.
</bodyText>
<construct confidence="0.520133666666667">
Lemma 8 If no inference rule applies to an open
branch S of a configuration, then S is downward
saturated.
</construct>
<bodyText confidence="0.486621333333333">
This follows directly from the fact that for each of
Hi. through H26, if the implication is false there
is a corresponding inference rule which applies.
</bodyText>
<page confidence="0.986489">
78
</page>
<figure confidence="0.483221666666667">
5, t t S, t u, (substitution)
any term t (reflexivity of P.1)
occurring in S
</figure>
<figureCaption confidence="0.943699">
O(&apos;t) denotes the result of substituting u for any or all occurrences oft in 0.
Figure 4. Equality Rules
</figureCaption>
<figure confidence="0.983849256410256">
8 (r minimum wrt a*)
S, r a* t
t any term occurring in S
or t = r
S, t u S, t
a* (reflexivity of a*) t 4* u
tu
I , t
S, t u, t a* u, u t r
S,I a* u, u a* t
S,t 4* IL, 11 4* t,t IL
S, t a* u, u a* V
4*a (anti-symmetry) 4* (transitivity)
S, t a* u, u a* v, t a* v t
8,1 a* v, u a* v
(branches linearly ordered)
S, t a* v, u v, t a* u I S, t a* v, u v, u a* t
S, a* u
S, u, t u I S, a* u, u t j S, u, u a+ t
S, t 4+ U S, t a+ u, s t, u a* v
&lt;1+1&lt;3+
S, t+ a u, s* a t, u a* v, s v 2
S, a+ u S, t a u
S, ta+ u, â€”it a* u I S, ta+ u, u t S, t u, t a+ u
&lt;12
S,t v,u v I S,t v,v u I S,t v,u t S,t v,v u
any term u occurring in S.
S, a u
S, -It 4 U, U t I S, 4 U, -It 4* U I S, 4 U, t k, k a+ u
k new name
S, t u S, t u, t a* s, u a* v
-&lt;1 -â€¢&lt;2
S, I U, ta* u, a* t, t S, t u, t a* s, u a* v, s v
S, t u, v a* t
S,t-&lt;u,va*t,v-4u I S,t-&lt;u,va*t,va+t,va+u
S, t U, V.4* U
S, u, v u, t v
S, t U, U S, U
S, t -4 U, u v, t U, u t I S, u, t u
</figure>
<figureCaption confidence="0.999018">
Figure 5. Tree Rules
</figureCaption>
<figure confidence="0.760162666666667">
S, t a v
-14
S, u, u a* t
</figure>
<page confidence="0.978426">
79
</page>
<bodyText confidence="0.956517588235294">
Proposition 2 (Termination) All tableau for fi-
nite sets of formulae can be extended to tableau in
which no rule applies to the final configuration.
This follows from the fact that the size of any
tableau for finite sets of formulae has a finite upper
bound. The proof is in (Rogers &amp; Vijay-Shanker,
1992).
Proposition 3 (Soundness and Completeness)
A saturated tableau for a finite set of formulae E
exists if there is a consistent quasi-tree which sat-
isfies E.
Proof: The forward implication (soundness)
follows from lemma 7. Completeness follows from
the fact that if E is satisfiable there is no closed
tableau for E (corollary 1), and thus, by propo-
sition 2 and lemma 8, there must be a saturated
tableau for E. 0
</bodyText>
<sectionHeader confidence="0.993066" genericHeader="conclusions">
7 Extracting Trees from Quasi-trees
</sectionHeader>
<bodyText confidence="0.999446428571429">
Having derived some quasi-tree satisfying a set
of relationships, we would like to produce a &amp;quot;mini-
mal&amp;quot; representative of the trees it characterizes. In
section 3.1 we define the conditions under which a
quasi-tree is a tree. Working from those conditions
we can determine in which ways a quasi-tree M
may fail to be a tree, namely:
</bodyText>
<listItem confidence="0.999176">
â€¢ (Pm)* is a proper subset of Dm,
â€¢ Gm and/or Dm may be partial, ie: for some
</listItem>
<bodyText confidence="0.983994">
t,u, M (t uv-it -&lt; u) or M (t
u v a* u).
The case of partial Gm is problematic in that,
while it is possible to choose a unique representa-
tive, its choice must be arbitrary. For our applica-
tions this is not significant since currently in TAGs
left-of is fully specified and in parsing it is always
resolved by the input. Thus we make the assump-
tion that in every quasi-tree M from which we need
to extract a tree, left-of will be complete. That is,
for all terms t, u: M = t u V -4 u. Thus
M f=t .f ti V -It a* u M I=u1* I.
Suppose M = u a* t and M (t .0* v u),
and that /m(u) = x and /m(t) = y. In D-theory,
this case never arises, since proper domination,
rather than domination, is primitive. It is clear that
the TAG applications require that x and y be iden-
tified, ie: (y, x) should be added to Dm. Thus we
choose to complete Dm by extending it. Under the
assumption that .0 is complete this simply means:
if M a* u, Dm should be extended such that
t f u. That M can be extended in this way
consistently follows from lemma 3. That the re-
sult of completing Dm in this way is unique follows
from the fact that, under these conditions, extend-
ing Dm does not extend either Am or Em. The
details can be found in (Rogers &amp; Vijay-Shanker,
1992).
In the resulting quasi-tree domination has been
resolved into equality or proper domination. To
arrive at a tree we need only to expand Pm such
that (Pm)* = Dm. In the proof of lemma 4 we
show that this will be the case in any quasi-tree T
closed under:
</bodyText>
<equation confidence="0.95198875">
(x, z) E AT and (Vy)[(x, y) AT or (y, z) V AT]
(x, z) E PT
(x , y) .CT and (y , x) GT U AT
(x , y) EDT.
</equation>
<bodyText confidence="0.999941875">
The second of these conditions is our mechanism
for completing Dm. The first amounts to taking
immediate domination as the parent relation â€”
precisely the mechanism for finding the standard
referent. Thus the tree we extract is both the cir-
cumscriptive reading of (Vijay-Shanker, 1992) and
the standard referent of (Marcus, Hindle &amp; Fleck,
1983).
</bodyText>
<sectionHeader confidence="0.999675" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.99919846875">
Aho, A. V., Hoperoft, J. E., &amp; Ullman, J. D. (1974).
The Design and Analysis of Computer Algo-
rithms. Reading, MA: Addison-Wesley.
Beth, E. W. (1959). The Foundations of Mathe-
matics. Amsterdam: North-Holland.
Fitting, M. (1990). First-order Logic and Auto-
mated Theorem Proving. New York: Springer-
Verlag.
Marcus, M. P. (1980). A Theory of Syntactic Recog-
nition for Natural Language. MIT Press.
Marcus, M. P. (1987). Deterministic parsing and
description theory. In P. Whitelock, M. M.
Wood, H. L. Somers, R. Johnson, &amp; P. Ben-
nett (Eds.), Linguistic Theory and Computer
Applications. Academic Press.
Marcus, M. P., Hindle, D., &amp; Fleck, M. M. (1983).
D-theory: Talking about talking about trees.
In Proceedings of the 21st Annual Meeting of
the Association for Computational Linguistics,
Cambridge, MA.
Rogers, J. &amp; Vijay-Shanker, K. (1992). A formal-
ization of partial descriptions of trees. Techni-
cal Report TR92-23, Dept. of Comp. and Info.
Sci., University of Delaware, Newark, DE.
Vijay-Shanker, K. (1992). Using descriptions of
trees in a tree-adjoining grammar. Computa-
tional Linguistics. To appear.
Vijay-Shanker, K. &amp; Schabes, Y. (1992). Structure
sharing in lexicalized tree-adjoining grammars.
In Proceedings of the 16th International Con-
ference on Computational Linguistics (COL-
ING&apos;92), Nantes.
</reference>
<page confidence="0.998221">
80
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.029990">
<title confidence="0.9996">Reasoning with Descriptions of Trees *</title>
<author confidence="0.99971">James Rogers</author>
<affiliation confidence="0.8454485">of Comp. Science University of Delaware</affiliation>
<address confidence="0.998235">Newark, DE 19716, USA</address>
<author confidence="0.728592">Vijay-Shanker</author>
<affiliation confidence="0.768626">of Comp. Science University of Delaware</affiliation>
<address confidence="0.998745">Newark, DE 19716, USA</address>
<abstract confidence="0.996400214285714">In this paper we introduce a logic for describing trees which allows us to reason about both the parent and domination relationships. The use of domination has found a number of applications, such as in deterministic parsers based on Description theory (Marcus, Hindle &amp; Fleck, 1983), in a compact organization of the basic structures of Tree- Adjoining Grammars (Vijay-Shanker &amp; Schabes, 1992), and in a new characterization of the adjoining operation that allows a clean integration of TAGs into the unification-based framework (Vijay- Shanker, 1992) Our logic serves to formalize the reasoning on which these applications are based.</abstract>
<intro confidence="0.607255">1 Motivation</intro>
<abstract confidence="0.993608200385357">Marcus, Hindle, and Fleck (1983) have intro- Theory which considers the structure of trees in terms of the domination relation rather than the parent relation. This forms the basis of a class of deterministic parsers which build partial descriptions of trees rather than the themselves. As noted in (Marcus, Hindle Fleck, 1983; Marcus, 1987), this approach is capable of maintaining Marcus&apos; deterministic hypothesis (Marcus, 1980) in a number of cases where the original deterministic parsers fail. motivating example is the sentence: drove aunt from Peoria&apos;s The difficulty is that a deterministic parser must attach the NP &amp;quot;my aunt&amp;quot; to the tree it is constructing before evaluating the PP. If this can only be done in terms of the parent relation, the NP will be attached to the VP as its object. It is not until the genitive marker on &amp;quot;Peoria&apos;s&amp;quot; is detected that the correct attachment is clear. The D-theory parser avoids the trap by making only the judgment that the VP dominates NP by a path of length least Subsequent refinement can either add intervening components or not. Thus in this case, when &amp;quot;my aunt&amp;quot; ends up as part of the determiner of the object rather than the object itself, it is not inconsistent with its original placement. It is still dominated by the VP, just not immediately. When the analysis is complete, a the referent, be extracted from the description by taking immediate domination as the parent relation. *This work is supported by NSF grant IRI-9016591 In other examples given in (Marcus, Hindle &amp; Fleck, 1983) the left-of (linear precedence) relation is partially specified during parsing, with individuals related by &amp;quot;left-of or equals&amp;quot; or &amp;quot;left-of or dominates&amp;quot;. The important point is that once a relationship is asserted, it is never subsequently rescinded. The D-theory parser builds structures which are always a partial description of its final product. These structures are made more specific, as parsing proceeds, by adding additional relationships. Our understanding of the difficulty ordinary deterministic parsers have with these constructions is that they are required to build a structure covering an initial segment of the input at a time when there are multiple distinct trees that are consistent with that segment. The D-theory parsers succeed by building structures that contain only those relationships that are common to all the consistent trees. Thus the choice between alternatives for the relationships on which the trees differ is deferred until they are distinguished by the input, possibly after semantic analysis. A similar situation occurs when Tree-Adjoining Grammars are integrated into the unification-based framework. In TAGs, syntactic structures are built from sets of elementary trees by the operation, where one tree is inserted into another tree in place of one of its nodes. Here the difficulty is that adjunction is non-monotonic in the sense that there are relationships that hold in the trees being combined that do not hold in the resulting tree. In (Vijay-Shanker, 1992), building on some of the ideas from D-theory, a version of TAG is introduced which resolves this by manipulating partial of trees, termed an elementary structure for a transitive verb might be the quasi-tree a&apos; rather than the tree a (Figure 1). In a&apos; the separation represented by the dotted line nodes referred to by and denotes a of length greater than equal to Thus a&apos; captures just those relationships which are true in a and in all trees derived from a by adjunction at VP. In this setting trees are extracted from by taking what is termed a circumscripreading, each pair of nodes in which one dominates the other by a path that is possibly zero is identified. This mechanism can be interpreted in a manner similar to our interpretation of the use of partial 72 : NP VP v NP a: NP np Figure 1. Quasi-trees descriptions in D-theory parsers. We view a tree in which adjunction is permitted as the set of all trees which can be derived from it by adjunction. That set is represented by the quasi-tree as the set of all relationships that are common to all of its members. The connection between partial descriptions of trees and the sets of trees they describe is made explicit in (Vijay-Shanker &amp; Schabes, 1992). Here quasi-trees are used in developing a compact repof a TAG grammar. The lexicon is organized hierarchically. Each class of the hierarchy is associated with that set of relationships between individuals which are common to all trees associated with the lexical items in the class but not (necessarily) common to all trees associated with items in any super-class. Thus the set of trees associated with items in a class is characterized by the conjunction of the relationships associated with the class and those inherited from its super-classes. In the case of transitive verbs, figure 2, the relain can be inherited from the class of verbs, while the relationships in are associated only with the class of transitive verbs and its sub-classes. The structure a&apos; of figure 1 can be derived by with along with the assertion that and name the same object. In any tree described by these relationships either the node must dominate vp2 or vice versa. Now the relationship &amp;quot;vpi dominates does not preclude and from naming the same object. We can infer, however, from the fact that they are labeled incompatibly that this is not the case. Thus the path between them is at least one. From we have that the path between vp2 and is one. Thus in all cases must dominate by a path of length greater than or equal to zero. Hence the dashed line in a&apos;. The common element in these three applications is the need to manipulate structures that partially describe trees. In each case, we can understand this as a need to manipulate sets of trees. The structures, which we can take to be quasi-trees in each case, represent these sets of trees by capturing the set of relationships that are common to all trees in the set. Thus we are interested in quasi-trees not just as partial descriptions of individual trees, but as a mechanism for manipulating sets of trees. Reasoning, as in the LTAG example, about the structures described by combinations of quasi-trees requires some mechanism for manipulating the quasi-trees formally. Such a mechanism requires, in turn, a definition of quasi-trees as formal structures. While quasi-trees were introduced in (Vijay- Shanker, 1992), they have not been given a precise definition. The focus of the work described here is a formal definition of quasi-trees and the development of a mechanism for manipulating them. In the next section we develop an intuitive understanding of the structure of quasi-trees based on the applications we have discussed. Following that, we define the syntax of a language capable of expressing descriptions of trees as formulae and introduce quasi-trees as formal structures that define the semantics of that language. In section 4 we establish the correspondence between these formal models and our intuitive idea of quasi-trees. We then turn to a proof system, based on semantic tableau, which serves not only as a mechanism for reasoning about tree structures and checking the consistency of their descriptions, but also serves to produce models of a given consistent description. Finally, in section 7 we consider mechanisms for deriving a representative tree from a quasi-tree. We develop one such mechanism, for which we show that the tree produced is the circumscriptive reading in the context of TAG, and the standard referent in the context of D-theory. Due to space limitations we can only sketch many of our proofs and have omitted some details. The omitted material can be found in (Rogers &amp; Vijay-Shanker, 1992). this section, we use the term informally refer to any positive relationship between individuals which can occur in a tree, &amp;quot;a is the parof example. We will say that a tree satisrelationship if that relationship is true of the individuals it names in that tree. 73 a3 NP VP .*\ 2 v NP&apos; Figure 2. Structure Sharing in a Representation of Elementary Structures It&apos;s clear, from our discussion of their applications, that quasi-trees have a dual nature â€” as a set of trees and as a set of relationships. In formalizing them, our fundamental idea is to identify those natures. We will say that a tree is (partially) a set of relationships if every relationship in the set is true in the tree. A set of trees is then described by a set of relationships if each tree in the set is described by the set of relationships. the other hand, a set of trees is a set of relationships if it is described by that set and if every relationship that is common to all of the trees is included in the set of relationships. This is the identity we seek; the quasi-tree viewed as a set of relationships characterizes the same quasitree when viewed as a set of trees. Clearly we cannot easily characterize arbitrary sets of trees. As an example, our sets of trees will be upward-closed in the sense that, it will contain every tree that extends some tree in the set, ie: that contains one of the trees as an initial sub-tree. Similarly quasi-trees viewed as sets of relationships are not arbitrary either. Since the sets they characterize consist of trees, some of the structural properties of trees will be reflected in the quasi-trees. For instance, if the quasi-tree contains both the relationships &amp;quot;a dominates b&amp;quot; and &amp;quot;b dominates c&amp;quot; then every tree it describes will satisfy &amp;quot;a dominates c&amp;quot; and therefore it must contain that relationship as well. Thus many inferences that can be made on the basis of the structure of trees will carry over to quasi-trees. On the other hand, we cannot make all of these inferences and maintain any distinction between quasi-trees and trees. Further, for some inferences we will have the choice of making the inference or not. The choices we make in defining the structure of the quasi-trees as a set of relationships will determine the structure of the sets of trees we can characterize with a single quasi-tree. Thus these choices will be driven by how much expressive power the application needs in describing these sets. Our guiding principle is to make the quasi-trees as tree-like as possible consistent with the needs of our applications. We discuss these considerations more in (Rogers 1992). One inference we will not make is as follows: from V infer either &amp;quot;a equals for a&apos; and dominates a&apos;, a&apos; is the parent of structures that enforce this condition path lengths cannot be left partially specified. As a result, the set of quasi-trees required to characterize a&apos; viewed as a set of trees, for instance, would be infinite. Similarly, we will not make the inference: for all &amp;quot;a is left-of &amp;quot;b left-of a&amp;quot;, &amp;quot;a doma&amp;quot;. In these structures the left-of relation is no longer partial, ie: for all a, every tree described by the quasisatisfies &amp;quot;a is left-of none of them do. This is not acceptable for D-theory, where both the analyses of &amp;quot;pseudo-passives&amp;quot; and coordinate structures require single structures describing sets including trees in which some a is left-of others in which the same a is either equal to or properly that same Hindle &amp; Fleck, 1983). Finally, we consider the issue of negation. If a tree does not satisfy some relationship then it satisfies the negation of that relationship, and vice versa. For quasi-trees the situation is more subtle. Viewing the quasi-tree as a set of trees, if every tree in that set fails to satisfy some relationship, then they all satisfy the negation of that relationship. Hence the quasi-tree must satisfy the negated relationship as well. On the other hand, viewing the quasi-tree as a set of relationships, if a particular relationship is not included in the quasi-tree it does not imply that none of the trees it describes satisfies that relationship, only that some of those trees do not. Thus it may be the case that a quasi-tree neither satisfies a relationship nor satisfies its negation. Since trees are completed objects, when a tree satisfies the negation of a relationship it will always be the case that the tree satisfies some (positive) relationship that is incompatible with the first. For in a tree &amp;quot;a does not dominate &amp;quot;a left-of &amp;quot;b left-of a&amp;quot;, or dominates a&amp;quot;. Thus there are inferences that can be drawn from negated relationships in trees that may be incorporated into the structure of quasi-trees. In these inferences, we dispense with the to include negative relationships explicitly in the quasi-trees. They can be defined in terms of the 74 positive relationships. The price we pay is that to characterize the set of all trees in which &amp;quot;a does dominate instance, we will need three quasi-trees, one characterizing each of the sets in &amp;quot;a is left-of &amp;quot;b is a&amp;quot;, and properly dominates a&amp;quot;. 3 Language Our language is built up from the symbols: â€” countable set of distinguished element of I, a+, -&lt; two place predicates, proper domination, domination, â€” equality predicate, V, logical connectives (, ), [,] â€” usual grouping symbols formulae u, u,t u, and where E Literals formulae or their negations. Well-formedgenerated from atoms and the logical connectives in the usual fashion. use u, v denote terms and 0, to denote wffs. R denotes any of the five predicates. 3.1 Models Quasi-trees as formal structures are in a sense a reduced form of the quasi-trees viewed as sets of relationships. They incorporate a canonical subset of those relationships from which the remaining relationships can be deduced. 1 a tuple (11,I,1&apos;,D, A, where: U is a non-empty universe, I is a partial function from K to U (specifying the node referred to by each name), P, A, D, and ,C are binary relations over to a+, a*, respectively). R. denote 2 a model satisfying the all w, x, y, z , E y), (y, z) (x, z) (y,z) or (y, x) , y) E A (x , y) , (x,y) and (w,x),(y,z) z) (x, y) y) (x, z) use than clarify the link to description theory. , y) or (y, z) (y, E or (z, y) E r, ( (x, y) and (w, x) (w, y) E L and , y) E , w) or (w , x), (w , and (y, z) z) And meeting the additional condition: for every the set = fy (x,y),(y,z) DI is finite, ie: the length of path from any node to other is finite. 2 quasi-tree is (x,y) VD, CC2 (x,y)E (x, y) D, (y, x) VD , and (y, x) G. is RCi for all x y E 11, either (x,y) VD or (y, x) VD. At least one normal, consistent quasi-tree (that consisting of only a root node) satisfies all of these conditions simultaneously. Thus they are consistent. It is not hard to exhibit a model for each condition in which that condition fails while all of others hold. Thus the conditions are indepeneach other. Trees are distinguished from (ordinary) quasitrees by the fact that V is the reflexive, transiclosure of the fact that the relations maximal in the sense that they cannot be consistently extended. 3 consistent, normal quasi-tree M tree TCI. Dm = (Pm)* for all pairs (x, y) E x UM, exactly one of the following is true: , y), (y, x) (x , y) x) (x, or (y, x) that TC1 implies that (&apos;Pm)+ as well. It is easy to verify that a quasi-tree meets these conif (Um, the graph of a tree as comdefined (Aho, Hoperoft 1974). 3.2 Satisfaction The semantics of the language in terms of the models is defined by the satisfaction relation between models and formulae. 4 model M formula (M 0) as follows: 2The additional condition excludes &amp;quot;non-standard&amp;quot; modinclude components not connected to the root by a finite sequence of immediate domination links. 75 (u)) u iff (u)) (u), (t)) = t u iff t u iff (u)) (u), ELM, (0) t iff E &lt;a+ u iff (t)) E (t)) iff ; iff E E or some x u iff (u)) if (u)) 7,, (u), and A 0) if M M 0v 0 or M 0; f= &apos;0) if and M addition we require that IM(k)be defined for in the formula. is easy to verify that for all quasi-trees u, R)[M = u, R is then the converse holds as well. is also not hard to see that if is tree u, R)[T 4 Characterization We now show that this formalization is complete in the sense that a consistent quasi-tree as defined characterizes the set of trees it describes. Recall that the quasi-tree describes the set of all trees which satisfy every literal formula which is satisfied by the quasi-tree. It characterizes that set if every literal formula which is satisfied by every tree in the set is also satisfied by the quasi-tree. The property of satisfying every formula which is satisfied by the quasi-tree is captured formally by the notion of subsumption, which we define initially as a relationship between quasi-trees. 5 M = , and = (Um&apos; , , are quasi-trees, then M (M there : such that: = E (h(x), b(y)) E , = We now claim that any quasi-tree Q is subsumed a quasi-tree it is described by 1 M and Q are normal, consistent and is surjective, then M Q all formulae k 0. The proof in the forward direction is an easy induction on the structure of 0 and does not depend on normality or surjectiveness of The opposite direction follows from the fact that, since is surjective, there is a model which is the set of equivalence classes wrt in the domain 1M, such that M&apos; The next lemma allows us, in many cases, to assume that a given quasi-tree is normal. 2 every consistent quasi-tree M, there is a normal, consistent quasi-tree M&apos; such M and for all normal, consistent quasi- M&amp;quot;7 M C M&amp;quot; M&apos; lemma is witnessed by the quotient of to = {(x, y), We can now state the central claim of this section, that every consistent quasi-tree characterizes the set of trees which it subsumes. 1 M is a consistent quasitree. For all literals 4) M q (VT, tree)[M ET The proof follows from two lemmas. The first estabthat the set of by some in fact characterized by it. The second extends the result to trees. Their proofs are in 1992). 3 M is a consistent quasi-tree and (b a literal then consistent quasi-tree)[M and Q 4 M is a consistent quasi-tree, then exists a tree T such that M (VT)[METTh C = (=by consistency, by completeness of trees) consistent q-t)[M C by lemma 4, since a quasi-tree) M (=by lemma 3, by lemma 1) 0 76 5 Semantic Tableau Semantic tableau as introduced by Beth (Beth, 1959; Fitting, 1990) are used to prove validity by means of refutation. We are interested in satisfiability rather than validity. Given E we wish to build a model of E if one exists. Thus we are interested in the cases where the tableau succeeds in constructing a model. The distinction between these uses of semantic tableau is important, since our mechanism is not suitable for refutational proofs. In particular, it cannot express &amp;quot;some model fails to satisfy cb&amp;quot; except as &amp;quot;some model satisfies -,0&amp;quot;. Since our logic is non-classical the first is a strictly weaker condition than the second. 6 Tableau: branch a set, S, of formulae. a collection, {Si,. â€¢ â€¢ ,Sn}, of branches. a sequence, ..., configurawhere each is a result of the of an inference rule to Ci. If -1â€¢9;, is an inference rule, (Ci\{S}) is the result of applying the rule to Ci S tableau for E, set of formulae, is a in which C1 = branch is (30)[{O, -,cb} C configuration is closed if each of its branches is closed, and a tableau is closed iff it contains some closed configuration. A branch, configuration, or tableau is not closed is 5.1 Inference Rules Our inference rules fall into three groups. The first two, figures 3 and 4, are standard rules for propositional semantic tableau extended with equality (Fitting, 1990). The third group, figure 5, embody the properties of quasi-trees.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>A V Aho</author>
<author>J E Hoperoft</author>
<author>J D Ullman</author>
</authors>
<title>The Design and Analysis of Computer Algorithms.</title>
<date>1974</date>
<publisher>Addison-Wesley.</publisher>
<location>Reading, MA:</location>
<marker>Aho, Hoperoft, Ullman, 1974</marker>
<rawString>Aho, A. V., Hoperoft, J. E., &amp; Ullman, J. D. (1974). The Design and Analysis of Computer Algorithms. Reading, MA: Addison-Wesley.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E W Beth</author>
</authors>
<title>The Foundations of Mathematics.</title>
<date>1959</date>
<publisher>North-Holland.</publisher>
<location>Amsterdam:</location>
<contexts>
<context position="21590" citStr="Beth, 1959" startWordPosition="3937" endWordPosition="3938"> fact characterized by it. The second extends the result to trees. Their proofs are in (Rogers Sz Vijay-Shanker, 1992). Lemma 3 If M is a consistent quasi-tree and (b a literal then M 4=&gt; (3Q, consistent quasi-tree)[M C Q and Q Lemma 4 If M is a consistent quasi-tree, then there exists a tree T such that M C T. Proof(of proposition 1) (VT)[METTh &lt;=&gt; --1(37&apos;)[M C T and T = -41 (=- by consistency, by completeness of trees) .#&gt; --i(3Q, consistent q-t)[M C Q and Q (=- by lemma 4, since T is a quasi-tree) M (=- by lemma 3, by lemma 1) 0 76 5 Semantic Tableau Semantic tableau as introduced by Beth (Beth, 1959; Fitting, 1990) are used to prove validity by means of refutation. We are interested in satisfiability rather than validity. Given E we wish to build a model of E if one exists. Thus we are interested in the cases where the tableau succeeds in constructing a model. The distinction between these uses of semantic tableau is important, since our mechanism is not suitable for refutational proofs. In particular, it cannot express &amp;quot;some model fails to satisfy cb&amp;quot; except as &amp;quot;some model satisfies -,0&amp;quot;. Since our logic is non-classical the first is a strictly weaker condition than the second. Definiti</context>
</contexts>
<marker>Beth, 1959</marker>
<rawString>Beth, E. W. (1959). The Foundations of Mathematics. Amsterdam: North-Holland.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Fitting</author>
</authors>
<title>First-order Logic and Automated Theorem Proving.</title>
<date>1990</date>
<publisher>SpringerVerlag.</publisher>
<location>New York:</location>
<contexts>
<context position="21606" citStr="Fitting, 1990" startWordPosition="3939" endWordPosition="3940">terized by it. The second extends the result to trees. Their proofs are in (Rogers Sz Vijay-Shanker, 1992). Lemma 3 If M is a consistent quasi-tree and (b a literal then M 4=&gt; (3Q, consistent quasi-tree)[M C Q and Q Lemma 4 If M is a consistent quasi-tree, then there exists a tree T such that M C T. Proof(of proposition 1) (VT)[METTh &lt;=&gt; --1(37&apos;)[M C T and T = -41 (=- by consistency, by completeness of trees) .#&gt; --i(3Q, consistent q-t)[M C Q and Q (=- by lemma 4, since T is a quasi-tree) M (=- by lemma 3, by lemma 1) 0 76 5 Semantic Tableau Semantic tableau as introduced by Beth (Beth, 1959; Fitting, 1990) are used to prove validity by means of refutation. We are interested in satisfiability rather than validity. Given E we wish to build a model of E if one exists. Thus we are interested in the cases where the tableau succeeds in constructing a model. The distinction between these uses of semantic tableau is important, since our mechanism is not suitable for refutational proofs. In particular, it cannot express &amp;quot;some model fails to satisfy cb&amp;quot; except as &amp;quot;some model satisfies -,0&amp;quot;. Since our logic is non-classical the first is a strictly weaker condition than the second. Definition 6 Semantic Ta</context>
<context position="23045" citStr="Fitting, 1990" startWordPosition="4200" endWordPosition="4201">rule to Ci. If 511. -1â€¢9;, is an inference rule, (Ci\{S}) U is the result of applying the rule to Ci iff S E C. A tableau for E, where E is a set of formulae, is a tableau in which C1 = {E}. A branch is closed if (30)[{O, -,cb} C S]. A configuration is closed if each of its branches is closed, and a tableau is closed iff it contains some closed configuration. A branch, configuration, or tableau that is not closed is open. 5.1 Inference Rules Our inference rules fall into three groups. The first two, figures 3 and 4, are standard rules for propositional semantic tableau extended with equality (Fitting, 1990). The third group, figure 5, embody the properties of quasi-trees. The --la rule requires the introduction of a new name into the tableau. To simplify this, tableau are carried out in a language augmented with a countably infinite set of new names from which these are drawn in a systematic way. The following two lemmas establish the correctness of the inference rules in the sense that no rule increases the set of models of any branch nor eliminates all of the models of a satisfiable branch. Lemma 5 Suppose S&apos; is derived from S in some tableau by some sequence of rule applications. Suppose M is</context>
</contexts>
<marker>Fitting, 1990</marker>
<rawString>Fitting, M. (1990). First-order Logic and Automated Theorem Proving. New York: SpringerVerlag.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M P Marcus</author>
</authors>
<title>A Theory of Syntactic Recognition for Natural Language.</title>
<date>1980</date>
<publisher>MIT Press.</publisher>
<contexts>
<context position="1341" citStr="Marcus, 1980" startWordPosition="213" endWordPosition="214">he unification-based framework (VijayShanker, 1992) Our logic serves to formalize the reasoning on which these applications are based. 1 Motivation Marcus, Hindle, and Fleck (1983) have introduced Description Theory (D-theory) which considers the structure of trees in terms of the domination relation rather than the parent relation. This forms the basis of a class of deterministic parsers which build partial descriptions of trees rather than the trees themselves. As noted in (Marcus, Hindle &amp; Fleck, 1983; Marcus, 1987), this approach is capable of maintaining Marcus&apos; deterministic hypothesis (Marcus, 1980) in a number of cases where the original deterministic parsers fail. A motivating example is the sentence: I drove my aunt from Peoria&apos;s car. The difficulty is that a deterministic parser must attach the NP &amp;quot;my aunt&amp;quot; to the tree it is constructing before evaluating the PP. If this can only be done in terms of the parent relation, the NP will be attached to the VP as its object. It is not until the genitive marker on &amp;quot;Peoria&apos;s&amp;quot; is detected that the correct attachment is clear. The D-theory parser avoids the trap by making only the judgment that the VP dominates the NP by a path of length at lea</context>
</contexts>
<marker>Marcus, 1980</marker>
<rawString>Marcus, M. P. (1980). A Theory of Syntactic Recognition for Natural Language. MIT Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M P Marcus</author>
</authors>
<title>Deterministic parsing and description theory. In</title>
<date>1987</date>
<publisher>Academic Press.</publisher>
<contexts>
<context position="1252" citStr="Marcus, 1987" startWordPosition="200" endWordPosition="201">haracterization of the adjoining operation that allows a clean integration of TAGs into the unification-based framework (VijayShanker, 1992) Our logic serves to formalize the reasoning on which these applications are based. 1 Motivation Marcus, Hindle, and Fleck (1983) have introduced Description Theory (D-theory) which considers the structure of trees in terms of the domination relation rather than the parent relation. This forms the basis of a class of deterministic parsers which build partial descriptions of trees rather than the trees themselves. As noted in (Marcus, Hindle &amp; Fleck, 1983; Marcus, 1987), this approach is capable of maintaining Marcus&apos; deterministic hypothesis (Marcus, 1980) in a number of cases where the original deterministic parsers fail. A motivating example is the sentence: I drove my aunt from Peoria&apos;s car. The difficulty is that a deterministic parser must attach the NP &amp;quot;my aunt&amp;quot; to the tree it is constructing before evaluating the PP. If this can only be done in terms of the parent relation, the NP will be attached to the VP as its object. It is not until the genitive marker on &amp;quot;Peoria&apos;s&amp;quot; is detected that the correct attachment is clear. The D-theory parser avoids the</context>
</contexts>
<marker>Marcus, 1987</marker>
<rawString>Marcus, M. P. (1987). Deterministic parsing and description theory. In P. Whitelock, M. M. Wood, H. L. Somers, R. Johnson, &amp; P. Bennett (Eds.), Linguistic Theory and Computer Applications. Academic Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M P Marcus</author>
<author>D Hindle</author>
<author>M M Fleck</author>
</authors>
<title>D-theory: Talking about talking about trees.</title>
<date>1983</date>
<booktitle>In Proceedings of the 21st Annual Meeting of the Association for Computational Linguistics,</booktitle>
<location>Cambridge, MA.</location>
<marker>Marcus, Hindle, Fleck, 1983</marker>
<rawString>Marcus, M. P., Hindle, D., &amp; Fleck, M. M. (1983). D-theory: Talking about talking about trees. In Proceedings of the 21st Annual Meeting of the Association for Computational Linguistics, Cambridge, MA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Rogers</author>
<author>K Vijay-Shanker</author>
</authors>
<title>A formalization of partial descriptions of trees.</title>
<date>1992</date>
<tech>Technical Report TR92-23,</tech>
<institution>Dept. of Comp. and Info. Sci., University of Delaware,</institution>
<location>Newark, DE.</location>
<contexts>
<context position="8922" citStr="Rogers &amp; Vijay-Shanker, 1992" startWordPosition="1499" endWordPosition="1502"> serves not only as a mechanism for reasoning about tree structures and checking the consistency of their descriptions, but also serves to produce models of a given consistent description. Finally, in section 7 we consider mechanisms for deriving a representative tree from a quasi-tree. We develop one such mechanism, for which we show that the tree produced is the circumscriptive reading in the context of TAG, and the standard referent in the context of D-theory. Due to space limitations we can only sketch many of our proofs and have omitted some details. The omitted material can be found in (Rogers &amp; Vijay-Shanker, 1992). 2 Quasi-Trees In this section, we use the term relationship to informally refer to any positive relationship between individuals which can occur in a tree, &amp;quot;a is the parent of 6&amp;quot; for example. We will say that a tree satisfies a relationship if that relationship is true of the individuals it names in that tree. 73 a1: a3 NP nP/ VI VP .*\ 2 vp2 A np â€˜3Pâ€¢ v NP&apos; Figure 2. Structure Sharing in a Representation of Elementary Structures It&apos;s clear, from our discussion of their applications, that quasi-trees have a dual nature â€” as a set of trees and as a set of relationships. In formalizing them, o</context>
<context position="11670" citStr="Rogers &amp; Vijay-Shanker, 1992" startWordPosition="1991" endWordPosition="1994">n any distinction between quasi-trees and trees. Further, for some inferences we will have the choice of making the inference or not. The choices we make in defining the structure of the quasi-trees as a set of relationships will determine the structure of the sets of trees we can characterize with a single quasi-tree. Thus these choices will be driven by how much expressive power the application needs in describing these sets. Our guiding principle is to make the quasi-trees as tree-like as possible consistent with the needs of our applications. We discuss these considerations more fully in (Rogers &amp; Vijay-Shanker, 1992). One inference we will not make is as follows: from &amp;quot;a dominates V infer either &amp;quot;a equals b&amp;quot; or, for some a&apos; and b&apos;, &amp;quot;a dominates a&apos;, a&apos; is the parent of b&apos;, and b&apos; dominates b&amp;quot;. In structures that enforce this condition path lengths cannot be left partially specified. As a result, the set of quasi-trees required to characterize a&apos; viewed as a set of trees, for instance, would be infinite. Similarly, we will not make the inference: for all a, b, either &amp;quot;a is left-of b&amp;quot;, &amp;quot;b is left-of a&amp;quot;, &amp;quot;a dominates b&amp;quot; or &amp;quot;b dominates a&amp;quot;. In these structures the left-of relation is no longer partial, ie: for</context>
<context position="30788" citStr="Rogers &amp; Vijay-Shanker, 1992" startWordPosition="5855" endWordPosition="5858">4 U, -It 4* U I S, 4 U, t k, k a+ u k new name S, t u S, t u, t a* s, u a* v -&lt;1 -â€¢&lt;2 S, I U, ta* u, a* t, t S, t u, t a* s, u a* v, s v S, t u, v a* t S,t-&lt;u,va*t,v-4u I S,t-&lt;u,va*t,va+t,va+u S, t U, V.4* U S, u, v u, t v S, t U, U S, U S, t -4 U, u v, t U, u t I S, u, t u Figure 5. Tree Rules S, t a v -14 S, u, u a* t 79 Proposition 2 (Termination) All tableau for finite sets of formulae can be extended to tableau in which no rule applies to the final configuration. This follows from the fact that the size of any tableau for finite sets of formulae has a finite upper bound. The proof is in (Rogers &amp; Vijay-Shanker, 1992). Proposition 3 (Soundness and Completeness) A saturated tableau for a finite set of formulae E exists if there is a consistent quasi-tree which satisfies E. Proof: The forward implication (soundness) follows from lemma 7. Completeness follows from the fact that if E is satisfiable there is no closed tableau for E (corollary 1), and thus, by proposition 2 and lemma 8, there must be a saturated tableau for E. 0 7 Extracting Trees from Quasi-trees Having derived some quasi-tree satisfying a set of relationships, we would like to produce a &amp;quot;minimal&amp;quot; representative of the trees it characterizes. I</context>
<context position="32890" citStr="Rogers &amp; Vijay-Shanker, 1992" startWordPosition="6262" endWordPosition="6265"> case never arises, since proper domination, rather than domination, is primitive. It is clear that the TAG applications require that x and y be identified, ie: (y, x) should be added to Dm. Thus we choose to complete Dm by extending it. Under the assumption that .0 is complete this simply means: if M a* u, Dm should be extended such that t f u. That M can be extended in this way consistently follows from lemma 3. That the result of completing Dm in this way is unique follows from the fact that, under these conditions, extending Dm does not extend either Am or Em. The details can be found in (Rogers &amp; Vijay-Shanker, 1992). In the resulting quasi-tree domination has been resolved into equality or proper domination. To arrive at a tree we need only to expand Pm such that (Pm)* = Dm. In the proof of lemma 4 we show that this will be the case in any quasi-tree T closed under: (x, z) E AT and (Vy)[(x, y) AT or (y, z) V AT] (x, z) E PT (x , y) .CT and (y , x) GT U AT (x , y) EDT. The second of these conditions is our mechanism for completing Dm. The first amounts to taking immediate domination as the parent relation â€” precisely the mechanism for finding the standard referent. Thus the tree we extract is both the cir</context>
</contexts>
<marker>Rogers, Vijay-Shanker, 1992</marker>
<rawString>Rogers, J. &amp; Vijay-Shanker, K. (1992). A formalization of partial descriptions of trees. Technical Report TR92-23, Dept. of Comp. and Info. Sci., University of Delaware, Newark, DE.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Vijay-Shanker</author>
</authors>
<title>Using descriptions of trees in a tree-adjoining grammar. Computational Linguistics.</title>
<date>1992</date>
<note>To appear.</note>
<contexts>
<context position="4016" citStr="Vijay-Shanker, 1992" startWordPosition="654" endWordPosition="655"> the relationships on which the trees differ is deferred until they are distinguished by the input, possibly after semantic analysis. A similar situation occurs when Tree-Adjoining Grammars are integrated into the unification-based framework. In TAGs, syntactic structures are built up from sets of elementary trees by the adjunction operation, where one tree is inserted into another tree in place of one of its nodes. Here the difficulty is that adjunction is non-monotonic in the sense that there are relationships that hold in the trees being combined that do not hold in the resulting tree. In (Vijay-Shanker, 1992), building on some of the ideas from D-theory, a version of TAG is introduced which resolves this by manipulating partial descriptions of trees, termed quasi-trees. Thus an elementary structure for a transitive verb might be the quasi-tree a&apos; rather than the tree a (Figure 1). In a&apos; the separation represented by the dotted line between nodes referred to by vpi and vp2 denotes a path of length greater than or equal to zero. Thus a&apos; captures just those relationships which are true in a and in all trees derived from a by adjunction at VP. In this setting trees are extracted from quasi-trees by ta</context>
<context position="8922" citStr="Vijay-Shanker, 1992" startWordPosition="1501" endWordPosition="1502">ot only as a mechanism for reasoning about tree structures and checking the consistency of their descriptions, but also serves to produce models of a given consistent description. Finally, in section 7 we consider mechanisms for deriving a representative tree from a quasi-tree. We develop one such mechanism, for which we show that the tree produced is the circumscriptive reading in the context of TAG, and the standard referent in the context of D-theory. Due to space limitations we can only sketch many of our proofs and have omitted some details. The omitted material can be found in (Rogers &amp; Vijay-Shanker, 1992). 2 Quasi-Trees In this section, we use the term relationship to informally refer to any positive relationship between individuals which can occur in a tree, &amp;quot;a is the parent of 6&amp;quot; for example. We will say that a tree satisfies a relationship if that relationship is true of the individuals it names in that tree. 73 a1: a3 NP nP/ VI VP .*\ 2 vp2 A np â€˜3Pâ€¢ v NP&apos; Figure 2. Structure Sharing in a Representation of Elementary Structures It&apos;s clear, from our discussion of their applications, that quasi-trees have a dual nature â€” as a set of trees and as a set of relationships. In formalizing them, o</context>
<context position="11670" citStr="Vijay-Shanker, 1992" startWordPosition="1993" endWordPosition="1994">tinction between quasi-trees and trees. Further, for some inferences we will have the choice of making the inference or not. The choices we make in defining the structure of the quasi-trees as a set of relationships will determine the structure of the sets of trees we can characterize with a single quasi-tree. Thus these choices will be driven by how much expressive power the application needs in describing these sets. Our guiding principle is to make the quasi-trees as tree-like as possible consistent with the needs of our applications. We discuss these considerations more fully in (Rogers &amp; Vijay-Shanker, 1992). One inference we will not make is as follows: from &amp;quot;a dominates V infer either &amp;quot;a equals b&amp;quot; or, for some a&apos; and b&apos;, &amp;quot;a dominates a&apos;, a&apos; is the parent of b&apos;, and b&apos; dominates b&amp;quot;. In structures that enforce this condition path lengths cannot be left partially specified. As a result, the set of quasi-trees required to characterize a&apos; viewed as a set of trees, for instance, would be infinite. Similarly, we will not make the inference: for all a, b, either &amp;quot;a is left-of b&amp;quot;, &amp;quot;b is left-of a&amp;quot;, &amp;quot;a dominates b&amp;quot; or &amp;quot;b dominates a&amp;quot;. In these structures the left-of relation is no longer partial, ie: for</context>
<context position="21098" citStr="Vijay-Shanker, 1992" startWordPosition="3839" endWordPosition="3840">all normal, consistent quasitree M&amp;quot;7 M C M&amp;quot; M&apos; C M&amp;quot;. The lemma is witnessed by the quotient of M with respect to em, where em = {(x, I(x, y), (y, x) E Dm}. We can now state the central claim of this section, that every consistent quasi-tree characterizes the set of trees which it subsumes. Proposition 1 Suppose M is a consistent quasitree. For all literals 4) M q (VT, tree)[M ET The proof follows from two lemmas. The first establishes that the set of quasi-trees subsumed by some quasi-tree M is in fact characterized by it. The second extends the result to trees. Their proofs are in (Rogers Sz Vijay-Shanker, 1992). Lemma 3 If M is a consistent quasi-tree and (b a literal then M 4=&gt; (3Q, consistent quasi-tree)[M C Q and Q Lemma 4 If M is a consistent quasi-tree, then there exists a tree T such that M C T. Proof(of proposition 1) (VT)[METTh &lt;=&gt; --1(37&apos;)[M C T and T = -41 (=- by consistency, by completeness of trees) .#&gt; --i(3Q, consistent q-t)[M C Q and Q (=- by lemma 4, since T is a quasi-tree) M (=- by lemma 3, by lemma 1) 0 76 5 Semantic Tableau Semantic tableau as introduced by Beth (Beth, 1959; Fitting, 1990) are used to prove validity by means of refutation. We are interested in satisfiability rath</context>
<context position="30788" citStr="Vijay-Shanker, 1992" startWordPosition="5857" endWordPosition="5858">4* U I S, 4 U, t k, k a+ u k new name S, t u S, t u, t a* s, u a* v -&lt;1 -â€¢&lt;2 S, I U, ta* u, a* t, t S, t u, t a* s, u a* v, s v S, t u, v a* t S,t-&lt;u,va*t,v-4u I S,t-&lt;u,va*t,va+t,va+u S, t U, V.4* U S, u, v u, t v S, t U, U S, U S, t -4 U, u v, t U, u t I S, u, t u Figure 5. Tree Rules S, t a v -14 S, u, u a* t 79 Proposition 2 (Termination) All tableau for finite sets of formulae can be extended to tableau in which no rule applies to the final configuration. This follows from the fact that the size of any tableau for finite sets of formulae has a finite upper bound. The proof is in (Rogers &amp; Vijay-Shanker, 1992). Proposition 3 (Soundness and Completeness) A saturated tableau for a finite set of formulae E exists if there is a consistent quasi-tree which satisfies E. Proof: The forward implication (soundness) follows from lemma 7. Completeness follows from the fact that if E is satisfiable there is no closed tableau for E (corollary 1), and thus, by proposition 2 and lemma 8, there must be a saturated tableau for E. 0 7 Extracting Trees from Quasi-trees Having derived some quasi-tree satisfying a set of relationships, we would like to produce a &amp;quot;minimal&amp;quot; representative of the trees it characterizes. I</context>
<context position="32890" citStr="Vijay-Shanker, 1992" startWordPosition="6264" endWordPosition="6265">er arises, since proper domination, rather than domination, is primitive. It is clear that the TAG applications require that x and y be identified, ie: (y, x) should be added to Dm. Thus we choose to complete Dm by extending it. Under the assumption that .0 is complete this simply means: if M a* u, Dm should be extended such that t f u. That M can be extended in this way consistently follows from lemma 3. That the result of completing Dm in this way is unique follows from the fact that, under these conditions, extending Dm does not extend either Am or Em. The details can be found in (Rogers &amp; Vijay-Shanker, 1992). In the resulting quasi-tree domination has been resolved into equality or proper domination. To arrive at a tree we need only to expand Pm such that (Pm)* = Dm. In the proof of lemma 4 we show that this will be the case in any quasi-tree T closed under: (x, z) E AT and (Vy)[(x, y) AT or (y, z) V AT] (x, z) E PT (x , y) .CT and (y , x) GT U AT (x , y) EDT. The second of these conditions is our mechanism for completing Dm. The first amounts to taking immediate domination as the parent relation â€” precisely the mechanism for finding the standard referent. Thus the tree we extract is both the cir</context>
</contexts>
<marker>Vijay-Shanker, 1992</marker>
<rawString>Vijay-Shanker, K. (1992). Using descriptions of trees in a tree-adjoining grammar. Computational Linguistics. To appear.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Vijay-Shanker</author>
<author>Y Schabes</author>
</authors>
<title>Structure sharing in lexicalized tree-adjoining grammars.</title>
<date>1992</date>
<booktitle>In Proceedings of the 16th International Conference on Computational Linguistics (COLING&apos;92),</booktitle>
<location>Nantes.</location>
<contexts>
<context position="5316" citStr="Vijay-Shanker &amp; Schabes, 1992" startWordPosition="885" endWordPosition="888">s in which one dominates the other by a path that is possibly zero is identified. This mechanism can be interpreted in a manner similar to our interpretation of the use of partial 72 : NP VP v NP a: NP np Figure 1. Quasi-trees descriptions in D-theory parsers. We view a tree in which adjunction is permitted as the set of all trees which can be derived from it by adjunction. That set is represented by the quasi-tree as the set of all relationships that are common to all of its members. The connection between partial descriptions of trees and the sets of trees they describe is made explicit in (Vijay-Shanker &amp; Schabes, 1992). Here quasi-trees are used in developing a compact representation of a â€¢Lexicalized TAG grammar. The lexicon is organized hierarchically. Each class of the hierarchy is associated with that set of relationships between individuals which are common to all trees associated with the lexical items in the class but not (necessarily) common to all trees associated with items in any super-class. Thus the set of trees associated with items in a class is characterized by the conjunction of the relationships associated with the class and those inherited from its super-classes. In the case of transitive</context>
</contexts>
<marker>Vijay-Shanker, Schabes, 1992</marker>
<rawString>Vijay-Shanker, K. &amp; Schabes, Y. (1992). Structure sharing in lexicalized tree-adjoining grammars. In Proceedings of the 16th International Conference on Computational Linguistics (COLING&apos;92), Nantes.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>