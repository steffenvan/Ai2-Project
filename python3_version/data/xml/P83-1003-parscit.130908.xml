<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<title confidence="0.99631125">
Crossed Serial Dependencies:
A low-power parseable extension to GPSG
Henry Thompson
Department of Artificial Intelligence
</title>
<note confidence="0.825347">
and
</note>
<title confidence="0.9167566">
Program in Cognitive Science
University of Edinburgh
Hope Park Square, Meadow Lane
Edinburgh EH8 9NW
SCOTLAND
</title>
<sectionHeader confidence="0.749586" genericHeader="abstract">
ABSTRACT
</sectionHeader>
<bodyText confidence="0.999449923076923">
An extension to the GPSG grammatical formalism is
proposed, allowing non-terminals to consist of
finite sequences of category labels, and allowing
schematic variables to range over such sequences.
The extension is shown to be sufficient to provide
a strongly adequate grammar for crossed serial
dependencies, as found in e.g. Dutch subordinate
clauses. The structures induced for such
constructions are argued to be more appropriate to
data involving conjunction than some previous
proposals have been. The extension is shown to be
parseable by a simple extension to an existing
parsing method for GPSG.
</bodyText>
<sectionHeader confidence="0.993519" genericHeader="keywords">
I. INTRODUCTION
</sectionHeader>
<bodyText confidence="0.999642161290323">
There has been considerable interest in the
community lately with the implications of crossed
serial dependencies in e.g. Dutch subordinate
clauses for non-transformational theories of
grammar. Although context-free phrase structure
grammars under the standard interpretations are
weakly adequate to generate such languages as anbn,
they are not capable of assigning the correct
dependencies that is, they are not strongly
adequate.
In a recent paper (Bresnan Kaplan Peters and
Zaenen 1982) (hereafter BKPZ), a solution to the
Dutch problem was presented in terms of LFG (Kaplan
and Bresnan 1982), which is known to have
considerably more than context-free power.
(Steedman 1983) and (Joshi 1983) have also made
proposals for solutions in terms of Steedman/Ades
grammars and tree adjunction grammars (Ades and
Steedman 1982; Joshi Levy and Yueh 1975). In this
paper I present a minimal extension to the GPSG
formalism (Gazdar 1981c) which also provides a
solution. It induces structures for the relevant
sentences which are non-trivially distinct from
those in BKPZ, and which I argue are more
appropriate. It appears, when suitably
constrained, to be similar to Joshi&apos;s proposal in
making only a small increment in power, being
incapable, for instance, of analysing anbncn with
crossed dependencies. And it can easily be parsed
by a small modification to the parsing mechanisms I
have already developed for GPSG.
</bodyText>
<sectionHeader confidence="0.970906" genericHeader="introduction">
II. AN EXTENSION TO GPSG
11.1 Extending the syntax
</sectionHeader>
<bodyText confidence="0.9612598">
GPSG includes the idea of compound non-terminals,
composed of pairs of standard category labels. We
can extend this trivially to finite sequences of
category labels. This in itself does not change
the weak generative capacity of the grammar, as the
set of non-terminals remains finite. GPSG also
includes the idea of rule schemata - rules with
variables over categories. If we further allow
variables over sequences, then we get a real
change.
At this point I must introduce some notation. I
will write
[a,b,c]
for a non-terminal label composed of the categories
a, b, and c. I will write
</bodyText>
<subsectionHeader confidence="0.689065">
Z&amp; b*
</subsectionHeader>
<bodyText confidence="0.755398333333333">
to indicate that the schematic variable Z ranges
over sequences of the category b. We can then give
the following grammar for anbn with crossed
</bodyText>
<page confidence="0.989423">
16
</page>
<figure confidence="0.5571568">
dependencies:
S -&gt; e
SZ -&gt; a S1Z1b (1)
S1Z -&gt; a S Z1b (2)
b1Z -&gt; b Z (3),
</figure>
<bodyText confidence="0.997690125">
where we allow variables over sequences to appear
not only alone, but in simple, that is with
constant terms only, concatenation, notated with a
vertical bar ( 1) . This grammar gives us the
following analysis for a3b3, where I have used
subscripts to record the dependencies, and the
marginal numbers give the rule which admits the
adjacent node:
</bodyText>
<equation confidence="0.992372">
/1-&gt;&amp;quot; 1
al LS,bij
a2 [S,b ,b2]
</equation>
<bodyText confidence="0.999873434782609">
With the aid of this example, we see that rule 1
generates a&apos;s while accumulating b&apos;s, rule 2 brings
this process to an end, and rule 3 successively
generates the accumulated b&apos;s, in the correct,
&apos;crossed&apos;, order. This is essentially the
structure we will produce for the Dutch examples as
well, so it is important to point out exactly how
the crossed dependencies are captured. This must
come out in two ways in GPSG - subcategorisation
restrictions, and interpretation. That the
subcategorisation is handled properly should be
clear from the above example. Suppose that the
categories a and b are pre-terminals rather than
terminals, and that there are actually three sorts
of a&apos;s and three sorts of b&apos;s, subcategorised for
each other. If one used the standard GPSG
mechanism for recording this dependency, namely by
&apos;providing three rules, whose rule number would then
appear as a feature on those pre-terminals
appearing in them directly, we would get the above
structure, where we can reinterpret the subscripts
as the rule numbers so introduced, and see that the
dependencies are correctly reflected.
</bodyText>
<subsubsectionHeader confidence="0.507205">
11.2 Semantic interpretation
</subsubsectionHeader>
<bodyText confidence="0.939202791666666">
As for the semantics no actual extension is
required - the untyped lambda calculus is still
sufficient to the task, albeit with a fair amount
of work. We can use what amounts to a and
unpacking approach. The compound b nodes have
compound interpretations, which are distributed
appropriately higher up the tree. For this, we
need pairs and sequences of interpretations.
Following Church, we can represent a pair &lt;1,r&gt; as
Xft f(1)(r)]. If P is such a pair, then Po =
PaxXylx]) and P1 = P(XxXyly]). Using pairs we
can of course produce arbitrary sequences, as in
Lisp. In what follows I will use a Lisp-based
shorthand, using CAR, CDR, CONS, and so on. These
usages are discharged in Appendix I.
Using this shorthand, we can give the following
example of a set of semantic rules for association
with the syntactic rules given above, which
preserves the appropriate dependency, assuming that
the b&apos;(a&apos;,S&apos;) is the desired result at each level:
CONS(CADR(Q&apos;)(a&apos;)(CAR(Q.)),CDDR(Q&apos;))
where Q&apos; is short for SIZ1b&apos;,
CONS(CAR(Q.)(a&apos;)(S&apos;),CDR(Q.)) (2)
where Q&apos; is short for Z:b&apos;,
</bodyText>
<equation confidence="0.691259">
ADJOIN(Z&apos;,b&apos;). (3)
</equation>
<bodyText confidence="0.925972222222222">
These rules are most easily understood in reverse
order. Rule 3 simply appends the interpretation of
the immediately dominated b to the sequence of
interpretations of the dominated sequence of b&apos;s.
Rule 2 takes the first interpretation of such a
sequence, applies it to the interpretations of the
immediately dominated a and S, and prepends the
result to the unused balance of the sequence of b
interpretations. We now have a sequence consisting
of first a sentential interpretation, and then a
number of b interpretations. Rule I thus applies
the second (b type) element of such a sequence to
the interpretation of the immediately dominated a,
and the first (S type) element of the sequence.
The result is again prepended to the unused
balance, if any. The patient reader can satisfy
himself that this will produce the following
(crossed) interpretation:
</bodyText>
<figure confidence="0.827552">
3]
[b2,b3]
b2 b3
</figure>
<page confidence="0.840429">
17
</page>
<sectionHeader confidence="0.542712" genericHeader="method">
11.3 Parsia
</sectionHeader>
<bodyText confidence="0.999261962962963">
As for parsing context-free grammars with the
non-terminals .and schemata this proposal allows,
very little needs to be added to the mechanisms I
have provided to deal with non-sequence schemata in
GPSG, as described in (Thompson 1981b). We simply
treat all non-terminals as sequences, many of only
one element. The same basic technique of a bottom-
up chart parsing strategy, which substitutes for
matched variables in the active version of the
rule, will do the job. By restricting only one
sequence variable to occur once in each non-
terminal, the task of matching is kept simple and
deterministic. Thus we allow e.g. SIZ1b but not
Z1b1Z. The substitutions take place by
concatenation, so that if we have an instance of
rule (1) matching first [a] and then [S,b,b,b] in
the course of bottom-up processing, the Z on the
right hand side will match [b,b], and the resulting
substitution into the left hand side will cause the
constituent to be labeled [S,b,b].
In making this extension to my existing system,
the changes required were all localised to that
part of the code which matches rule parts against
nodes, and here the price is paid only if a
sequence variable is encountered. This suggests
that the impact of this mechanism on the parsing
complexity of the system is quite small.
</bodyText>
<sectionHeader confidence="0.959987" genericHeader="method">
III. APPLICATION TO DUTCH
</sectionHeader>
<bodyText confidence="0.99993">
Given the limited space available, I can present
only a very high-level account of how this
extension to GPSG can provide an account of crossed
serial dependencies in Dutch. In particular I will
have nothing to say about the difficult issue of
the precise distribution of tensed and untensed
verb forms.
</bodyText>
<sectionHeader confidence="0.524612" genericHeader="method">
111.1 The Dutch data
</sectionHeader>
<bodyText confidence="0.9986172">
Discussion of the phenomenon of crossed serial
dependencies in Dutch subordinate clauses is
bedeviled by considerable disagreement about just
what the facts are. The following five examples
form the core of the basis for my analysis:
</bodyText>
<listItem confidence="0.9616427">
1) omdat ik probeer Nikki te leren Nederlands
te spreken
2) omdat ik probeer Nikki Nederlands te leren
spreken
3) omdat ik Nikki probeer te leren Nederlands
te spreken
4) omdat ik Nikki Nederlands probeer te leren
spreken
5) * omdat ik Nikki probeer Nederlands te leren
spreken.
</listItem>
<bodyText confidence="0.5102265">
With the proviso that (1) is often judged
questionable, at least on stylistic grounds, this
pattern of judgements seems fairly stable among
native speakers of Dutch from the Netherlands.
There is some suggestion that this is not the
pattern of judgements typical of native speakers of
Dutch from Belgium.
111.2 Grammar rules for the Dutch data
This pattern leads us to propose the following
basic rules for subordinate clauses:
</bodyText>
<equation confidence="0.2975675">
A) S -&gt; omdat NP VP
B) VP -&gt; V VP (probeer)
C) VP -&gt; NP V VP (leren)
D) VP -&gt; NP V (spreken).
</equation>
<bodyText confidence="0.963288882352941">
Taken straight, these give us (1) only. For (2)
- (4), we propose what amounts to a verb lowering
approach, where verbs are lowered onto VPs, whence
they lower again to form compound verbs. (5) is
ruled out by requiring that a lowered verb must
have a target verb to compound with. The resulting
compound may itself be lowered, but only as a unit.
This approach is partially inspired by Seuren&apos;s
transformational account in terms of predicate
raising (Seuren 1972).
So the interpretation of the compound labels is
that e.g. EV,V1 is a compound verb, and [VP,V,V11 is
a VP with a compound verb lowered onto it. It
follows that for each VP rule, we need an
associated compound version which allows the
lowering of (possibly compound) verbs from the VP
onto the verb, so we would have e.g.
</bodyText>
<equation confidence="0.554609">
Di) VP1Z -&gt; NP Z1V,
</equation>
<bodyText confidence="0.97059">
where we now use Z as a variable over sequences of
Vs. The other half of the process must be
</bodyText>
<page confidence="0.998135">
18
</page>
<bodyText confidence="0.9982466">
reflected in rules associated with each VP rule
which introduces a VP complement, allowing the verb
to be lowered onto the complement. As this rule
must also expand VPs with verbs lowered onto them,
we want e.g.
</bodyText>
<equation confidence="0.57415">
Cii) VPIZ -&gt; NP VPIZIV.
</equation>
<bodyText confidence="0.967935">
Rather than enumerate such rules, we can use
metarules to conveniently express what is wanted:
</bodyText>
<equation confidence="0.5375635">
I) VP -&gt; ... V ... ==&gt; VPIZ -&gt; ZIV
II) VP -&gt; ... V VP ==&gt; VPIZ -&gt; VPIZIV.
</equation>
<bodyText confidence="0.991630285714286">
(I) will apply to all three of (B) - (D), allowing
compound verbs to be discharged at any point. (II)
will apply to (B) and (C), allowing the lowering
(with compounding if needed) of verbs onto
complements. We need one more rule, to unpack the
compound verbs, and the syntactic part of our
effort is complete:
</bodyText>
<equation confidence="0.895198">
E) WIZ -&gt; W Z,
</equation>
<bodyText confidence="0.9998211">
where W is an ordinary variable whose range
consists of V. This slight indirection is necessary
to insure that subcategorisation information
propagates correctly.
By suitably combining the rules (A) - (E),
together with the meta-generated rules (Bi) - (Di),
(Bii) and (Cii), we can now generate examples (2)
- (4). (4), which is fully crossed, is very
similar to the example in section 11.1, and uses
meta-generated expansions for all its VP nodes:
</bodyText>
<subsectionHeader confidence="0.581052">
S.
</subsectionHeader>
<bodyText confidence="0.999532142857143">
Once again I include the relevant rule name in the
margin, and indicate with subscripts the rule name
feature introduced to enforce subcategorisation.
Sentences (2) and (3) each involve two meta-
generated rules and one ordinary one. For reasons
of space, only (3) is illustrated below. (2) is
similar, but using rules (B), (Cii), and (Di).
</bodyText>
<table confidence="0.90744275">
NPa VP
1
ik [VP,Vb]
111.3 Semantic rules for the Dutch data
</table>
<bodyText confidence="0.712944">
The semantics follows that in section 11.2 quite
closely. For our purposes simple interpretations
of (B) - (D) will suffice:
</bodyText>
<equation confidence="0.892250666666667">
B&apos;) V&apos;(VP&apos;)
C&apos;) V.(NP&apos;,VP&apos;)
D&apos;) V&apos;(NP&apos;).
</equation>
<bodyText confidence="0.883098888888889">
The semantics for the metarules is also reasonably
straightforward, given that we know where we are
going:
I&apos;) F(V.) ==&gt; CONS(F(CAR(Z;V.)),CDR(ZiV&apos;))
II&apos;) F(V&apos;,VP&apos;) ==&gt; CONS(F(CADR(Q&apos;),CAR(Q)),
where Q&apos; is short for VPIZIV&apos;. (I&apos;) will give
semantics very much like those of rule (2) in
section 11.2, while (II&apos;) will give semantics like
those of rule (1). (E&apos;) is just like (3):
</bodyText>
<equation confidence="0.696968">
E&apos;) ADJOIN(Z.,W)
</equation>
<bodyText confidence="0.996744769230769">
It is left to the enthusiastic reader to work
through the examples and see that all of sentences
(1) - (4) above in fact receive the same
interpretation.
111.4 Which structure is right - evidence from
conjunction
The careful reader will have noted that the
structures proposed are not the same as those of
BKPZ. Their structures have the compound verb
depending from the highest VP, while ours depend
from the lowest possible. With the exception of
BKPZ&apos;s example (13), which none of my sources judge
grammatical with the &apos;voor Marie&apos; as given, I
</bodyText>
<figure confidence="0.991336368421053">
..........&amp;quot;&apos;&amp;quot;&apos;&amp;quot;&apos;&apos;....&amp;quot;.&amp;quot;...&amp;quot;....
Nikki NIDd [Vb,y.c,Vd]
1
Nederlands Vb [Vc,Vd]
Ioe...---............
probeer Vc V
I I
te leren spreken
111&lt;a&apos;
ik [VP,Vb]
NPc [VP,Vb,Vc]
NPCVb&apos;Vc]
c
Nikki Vb V
I lc
VP
1rd Vd
probeer te leren Nederlands te spreken
(E),(Di)
</figure>
<page confidence="0.996379">
19
</page>
<bodyText confidence="0.943653818181818">
believe my proposal accounts for all the judgements
cited in their paper. On the other hand, I do not
believe they can account for all of the following
conjunction judgement, the first three based on
(4), the next two on (3), whereas under the
standard GPSG treatment of conjunction they all
fall out of our analysis:
6) omdat ik Nikki Nederlands wil leren spreken
en Frans wil laten schrijven
because I want to teach Nikki to speak Dutch
and let [Nikki] write French
</bodyText>
<listItem confidence="0.948397">
7) * omdat ik Nikki Nedrelands wil leren spreken
en Frans laten schrijven
8) omdat ik Nikki Nederlands wil leren spreken
en Carla Frans wil laten schrijven
</listItem>
<bodyText confidence="0.910235">
because I want to teach Nikki to speak Dutch
and let Carla write French.
</bodyText>
<listItem confidence="0.939286">
9) omdat ik Nikki wil leren Nederlands te spreken
en Frans te schrijven
</listItem>
<bodyText confidence="0.98899225">
because I want to teach Nikki to speak Dutch
and to write French
10) * omdat ik Nikki wil leren Nederlands te
spreken en Carla Frans te schrijven
</bodyText>
<subsectionHeader confidence="0.809787">
Or
</subsectionHeader>
<bodyText confidence="0.9977599375">
en Frans (te) laten schrijven
(6) contains a conjoined [VP,V,V], (8) a conjoined
[VP,V], and (7) fails because it attempts to
conjoin a [VP,V,V] with a [VP,V]. (9) conjoins an
ordinary VP inside a [VP,V], and (10) fails by
trying to conjoin a VP with either a non-
constituent or a [VP,V].
It is certainly not the case that adding this
reasonably concise and satisfying account of at
least the Dutch phenomena without radically
altering the grammatical framework of GPSG.
Further work is clearly needed to exactly
establish the status of this augmented GPSG with
respect to generative capacity and parsability. It
is intriguing to speculate as to its weak
equivalence with the tree adjunction grammars of
Joshi et al. Even in the weakest augmentation,
allowing only one occurence of one variable over
sequences in any constituent of any rule, the
apparent similarity of their power remains to be
formally established, but it at least appears that
like tree adjunction grammars, these grammars
cannot generate anbncn with both dependencies
crossed, and like them, it can generate it with any
one set crossed and the other nested. Neither can
it generate WW, although it can with a sequence
variable ranging over the entire alphabet. If it
can be shown that it is indeed weakly equivalent to
TAG, then strong support will be lent to the claim
that an interesting new point on the Chomsky
hierarchy between CFGs and the indexed grammars has
been found.
</bodyText>
<sectionHeader confidence="0.990137" genericHeader="method">
ACKNOWLEDGEMENTS
</sectionHeader>
<bodyText confidence="0.999320461538462">
The work described herein was partially supported
by SERC Grant GR/H/93086. . My thanks to Han
Reichgelt, for renewing my interest in this problem
by presenting a version of Seuren&apos;s analysis in a
seminar, and providing the initial sentential data;
small amount of &apos;evidence&apos; to the small amount to Ewan Klein, for telling me about Church&apos;s
already published establishes the case for the deep &apos;implementation&apos; of pairs and conditionals in the
embedding, but I think it is suggestive. Taken lambda calculus; to Brian Smith, for introducing me
together with the obvious way in which the deep
embedding allows some vestige of compositionality
to persist in the semantics, I think that at the
very least a serious reconsideration of the BKPZ
proposal is in order.
</bodyText>
<sectionHeader confidence="0.998917" genericHeader="method">
IV. CONCLUSIONS
</sectionHeader>
<bodyText confidence="0.997222428571429">
It is of course too early to tell whether this
augmentation will be of general use or
significance. It does seem to me to offer a
to the wonderfully obscure power of the Y operator;
and to Gerald Gazdar, Aravind Joshi, Martin Kay and
Mark Steedman, for helpful discussion on various
aspects of this work.
</bodyText>
<sectionHeader confidence="0.9997065" genericHeader="method">
APPENDIX I
SEQUENCES IN THE UNTYPED LAMBDA CALCULUS
</sectionHeader>
<bodyText confidence="0.9999095">
To imbed enough of Lisp in the lambda calculus
for our needs, we require not just pairs, but NIL
and conditionals as well. Conditionals are
implemented similarly to pairs - &amp;quot;if p then q else
</bodyText>
<page confidence="0.979918">
20
</page>
<bodyText confidence="0.9986005">
r&amp;quot; is simply p applied to the pair &lt;q,r&gt;, where
TRUE and FALSE are the left and right pair element
selectors respectively. In order to effectively
construct and manipulate lists, some method of
determining their end is required.. Numerous
possibilities exist, of which we have chosen a
relatively inefficient but conceptually clear
approach. We compose lists of triples, rather than
pairs. Normal CONS pairs are given as
&lt;TRUE,car,cdr&gt;, while NIL is &lt;FALSE„&gt;.
Given this approach, we can define the following
shorthand, with which the semantic rules given in
sections 11.2 and 111.3 can be translated into the
lambda calculus:
</bodyText>
<equation confidence="0.873272285714286">
TRUE - ]
FALSE - Xx.LXY.[Y ]
NIL - If.[f(FALSE)(Xp.[p])(Xp.[p])]
CONS(A,B) - If.Cf(TRUE)(A)(B)]
CAR(L)
2:8;8::[Yd]])
CONSP(L) -
CADR(L) - CAR(CDR(L))
ADJOINFORM -
CONSP(L)(CONS(CAR(L),
a(CDR(L))(N)))
(CONS(N,NIL))]]]
Y -
ADJOIN(L,N) - Y(ADJOINFORM)(L)(N)
</equation>
<bodyText confidence="0.9991225">
Note that we use Church&apos;s Y operator to produce the
required recursive definition of ADJOIN.
</bodyText>
<sectionHeader confidence="0.998636" genericHeader="references">
REFERENCES
</sectionHeader>
<reference confidence="0.999805205128205">
Ades, A. and Steedman, M. 1982. On the order of
words. Linguistics and Philosophy, to
appear.
Bresnan, J.W., Kaplan, R., Peters, S. and Zaenen,
A. 1982. Cross-serial dependencies in
Dutch. Linguistic Inquiry 13.
Gazdar, G. 1981c. Phrase structure grammar. In P.
Jacobson and G. Pullum, editors, The
nature of syntactic representation. D.
Reidel, Dordrecht.
Joshi, A. 1983. How much context-sensitivity is
required to provide reasonable structural
descriptions: Tree adjoining
grammars. version submitted to this
conference.
Joshi, A.K., Levy, L.S. and Yueh, K. 1975. Tree
adjunct grammars. Journal of Coml.— and
System Sciences.
Kaplan, R.M. and Bresnan, J. 1982. Lexical-
functional grammar: A formal system of
grammatical representation. In J. Bresnan,
editor, The mental representation of
grammatical relations. MIT Press,
Cambridge, MA.
Seuren, P. 1972. Predicate Raising in French and
Sundry Languages. ms., Nijmegen.
Steedman, M. 1983. On the Generality of the
Nested Dependency Constraint and the
reason for an Exception in Dutch. In
Butterworth, B., Comrie, E. and Dahl, 0.,
editors, Explanations of Language
Universals. Mouton.
Thompson, H.S. 1981b. Chart Parsing and Rule
Schemata in GPSG. In Proceedings of the
Nineteenth Annual Meeting of the
Association for Computational Linguistics.
ACL, Stanford, CA. Also DAI Research Paper
165, Dept. of Artificial Intelligence,
Univ. of Edinburgh.
</reference>
<page confidence="0.999439">
21
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.456550">
<title confidence="0.9888895">Crossed Serial Dependencies: parseable extension to GPSG</title>
<author confidence="0.999125">Henry Thompson</author>
<affiliation confidence="0.9203944">Department of Artificial Intelligence and Program in Cognitive Science University of Edinburgh Hope Park Square, Meadow Lane</affiliation>
<address confidence="0.860126">Edinburgh EH8 9NW SCOTLAND</address>
<abstract confidence="0.996644571428572">An extension to the GPSG grammatical formalism is proposed, allowing non-terminals to consist of finite sequences of category labels, and allowing schematic variables to range over such sequences. The extension is shown to be sufficient to provide a strongly adequate grammar for crossed serial dependencies, as found in e.g. Dutch subordinate clauses. The structures induced for such constructions are argued to be more appropriate to data involving conjunction than some previous proposals have been. The extension is shown to be parseable by a simple extension to an existing parsing method for GPSG.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>A Ades</author>
<author>M Steedman</author>
</authors>
<title>On the order of words. Linguistics and Philosophy,</title>
<date>1982</date>
<note>to appear.</note>
<contexts>
<context position="1688" citStr="Ades and Steedman 1982" startWordPosition="245" endWordPosition="248">h context-free phrase structure grammars under the standard interpretations are weakly adequate to generate such languages as anbn, they are not capable of assigning the correct dependencies that is, they are not strongly adequate. In a recent paper (Bresnan Kaplan Peters and Zaenen 1982) (hereafter BKPZ), a solution to the Dutch problem was presented in terms of LFG (Kaplan and Bresnan 1982), which is known to have considerably more than context-free power. (Steedman 1983) and (Joshi 1983) have also made proposals for solutions in terms of Steedman/Ades grammars and tree adjunction grammars (Ades and Steedman 1982; Joshi Levy and Yueh 1975). In this paper I present a minimal extension to the GPSG formalism (Gazdar 1981c) which also provides a solution. It induces structures for the relevant sentences which are non-trivially distinct from those in BKPZ, and which I argue are more appropriate. It appears, when suitably constrained, to be similar to Joshi&apos;s proposal in making only a small increment in power, being incapable, for instance, of analysing anbncn with crossed dependencies. And it can easily be parsed by a small modification to the parsing mechanisms I have already developed for GPSG. II. AN EX</context>
</contexts>
<marker>Ades, Steedman, 1982</marker>
<rawString>Ades, A. and Steedman, M. 1982. On the order of words. Linguistics and Philosophy, to appear.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J W Bresnan</author>
<author>R Kaplan</author>
<author>S Peters</author>
<author>A Zaenen</author>
</authors>
<date>1982</date>
<booktitle>Cross-serial dependencies in Dutch. Linguistic Inquiry 13.</booktitle>
<marker>Bresnan, Kaplan, Peters, Zaenen, 1982</marker>
<rawString>Bresnan, J.W., Kaplan, R., Peters, S. and Zaenen, A. 1982. Cross-serial dependencies in Dutch. Linguistic Inquiry 13.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Gazdar</author>
</authors>
<title>Phrase structure grammar.</title>
<date>1981</date>
<editor>In P. Jacobson and G. Pullum, editors,</editor>
<location>Dordrecht.</location>
<contexts>
<context position="1795" citStr="Gazdar 1981" startWordPosition="266" endWordPosition="267">ages as anbn, they are not capable of assigning the correct dependencies that is, they are not strongly adequate. In a recent paper (Bresnan Kaplan Peters and Zaenen 1982) (hereafter BKPZ), a solution to the Dutch problem was presented in terms of LFG (Kaplan and Bresnan 1982), which is known to have considerably more than context-free power. (Steedman 1983) and (Joshi 1983) have also made proposals for solutions in terms of Steedman/Ades grammars and tree adjunction grammars (Ades and Steedman 1982; Joshi Levy and Yueh 1975). In this paper I present a minimal extension to the GPSG formalism (Gazdar 1981c) which also provides a solution. It induces structures for the relevant sentences which are non-trivially distinct from those in BKPZ, and which I argue are more appropriate. It appears, when suitably constrained, to be similar to Joshi&apos;s proposal in making only a small increment in power, being incapable, for instance, of analysing anbncn with crossed dependencies. And it can easily be parsed by a small modification to the parsing mechanisms I have already developed for GPSG. II. AN EXTENSION TO GPSG 11.1 Extending the syntax GPSG includes the idea of compound non-terminals, composed of pai</context>
</contexts>
<marker>Gazdar, 1981</marker>
<rawString>Gazdar, G. 1981c. Phrase structure grammar. In P. Jacobson and G. Pullum, editors, The nature of syntactic representation. D. Reidel, Dordrecht.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Joshi</author>
</authors>
<title>How much context-sensitivity is required to provide reasonable structural descriptions: Tree adjoining grammars. version submitted to this conference.</title>
<date>1983</date>
<contexts>
<context position="1561" citStr="Joshi 1983" startWordPosition="228" endWordPosition="229"> crossed serial dependencies in e.g. Dutch subordinate clauses for non-transformational theories of grammar. Although context-free phrase structure grammars under the standard interpretations are weakly adequate to generate such languages as anbn, they are not capable of assigning the correct dependencies that is, they are not strongly adequate. In a recent paper (Bresnan Kaplan Peters and Zaenen 1982) (hereafter BKPZ), a solution to the Dutch problem was presented in terms of LFG (Kaplan and Bresnan 1982), which is known to have considerably more than context-free power. (Steedman 1983) and (Joshi 1983) have also made proposals for solutions in terms of Steedman/Ades grammars and tree adjunction grammars (Ades and Steedman 1982; Joshi Levy and Yueh 1975). In this paper I present a minimal extension to the GPSG formalism (Gazdar 1981c) which also provides a solution. It induces structures for the relevant sentences which are non-trivially distinct from those in BKPZ, and which I argue are more appropriate. It appears, when suitably constrained, to be similar to Joshi&apos;s proposal in making only a small increment in power, being incapable, for instance, of analysing anbncn with crossed dependenc</context>
</contexts>
<marker>Joshi, 1983</marker>
<rawString>Joshi, A. 1983. How much context-sensitivity is required to provide reasonable structural descriptions: Tree adjoining grammars. version submitted to this conference.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A K Joshi</author>
<author>L S Levy</author>
<author>K Yueh</author>
</authors>
<title>Tree adjunct grammars.</title>
<date>1975</date>
<journal>Journal of Coml.— and System Sciences.</journal>
<marker>Joshi, Levy, Yueh, 1975</marker>
<rawString>Joshi, A.K., Levy, L.S. and Yueh, K. 1975. Tree adjunct grammars. Journal of Coml.— and System Sciences.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R M Kaplan</author>
<author>J Bresnan</author>
</authors>
<title>Lexicalfunctional grammar: A formal system of grammatical representation.</title>
<date>1982</date>
<editor>In J. Bresnan, editor,</editor>
<publisher>MIT Press,</publisher>
<location>Cambridge, MA.</location>
<contexts>
<context position="1461" citStr="Kaplan and Bresnan 1982" startWordPosition="211" endWordPosition="214">d for GPSG. I. INTRODUCTION There has been considerable interest in the community lately with the implications of crossed serial dependencies in e.g. Dutch subordinate clauses for non-transformational theories of grammar. Although context-free phrase structure grammars under the standard interpretations are weakly adequate to generate such languages as anbn, they are not capable of assigning the correct dependencies that is, they are not strongly adequate. In a recent paper (Bresnan Kaplan Peters and Zaenen 1982) (hereafter BKPZ), a solution to the Dutch problem was presented in terms of LFG (Kaplan and Bresnan 1982), which is known to have considerably more than context-free power. (Steedman 1983) and (Joshi 1983) have also made proposals for solutions in terms of Steedman/Ades grammars and tree adjunction grammars (Ades and Steedman 1982; Joshi Levy and Yueh 1975). In this paper I present a minimal extension to the GPSG formalism (Gazdar 1981c) which also provides a solution. It induces structures for the relevant sentences which are non-trivially distinct from those in BKPZ, and which I argue are more appropriate. It appears, when suitably constrained, to be similar to Joshi&apos;s proposal in making only a</context>
</contexts>
<marker>Kaplan, Bresnan, 1982</marker>
<rawString>Kaplan, R.M. and Bresnan, J. 1982. Lexicalfunctional grammar: A formal system of grammatical representation. In J. Bresnan, editor, The mental representation of grammatical relations. MIT Press, Cambridge, MA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Seuren</author>
</authors>
<title>Predicate Raising in French and Sundry Languages.</title>
<date>1972</date>
<location>ms., Nijmegen.</location>
<contexts>
<context position="9773" citStr="Seuren 1972" startWordPosition="1606" endWordPosition="1607">se the following basic rules for subordinate clauses: A) S -&gt; omdat NP VP B) VP -&gt; V VP (probeer) C) VP -&gt; NP V VP (leren) D) VP -&gt; NP V (spreken). Taken straight, these give us (1) only. For (2) - (4), we propose what amounts to a verb lowering approach, where verbs are lowered onto VPs, whence they lower again to form compound verbs. (5) is ruled out by requiring that a lowered verb must have a target verb to compound with. The resulting compound may itself be lowered, but only as a unit. This approach is partially inspired by Seuren&apos;s transformational account in terms of predicate raising (Seuren 1972). So the interpretation of the compound labels is that e.g. EV,V1 is a compound verb, and [VP,V,V11 is a VP with a compound verb lowered onto it. It follows that for each VP rule, we need an associated compound version which allows the lowering of (possibly compound) verbs from the VP onto the verb, so we would have e.g. Di) VP1Z -&gt; NP Z1V, where we now use Z as a variable over sequences of Vs. The other half of the process must be 18 reflected in rules associated with each VP rule which introduces a VP complement, allowing the verb to be lowered onto the complement. As this rule must also exp</context>
</contexts>
<marker>Seuren, 1972</marker>
<rawString>Seuren, P. 1972. Predicate Raising in French and Sundry Languages. ms., Nijmegen.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Steedman</author>
</authors>
<title>On the Generality of the Nested Dependency Constraint and the reason for an Exception</title>
<date>1983</date>
<journal>Explanations of Language Universals. Mouton.</journal>
<editor>in Dutch. In Butterworth, B., Comrie, E. and Dahl, 0., editors,</editor>
<contexts>
<context position="1544" citStr="Steedman 1983" startWordPosition="225" endWordPosition="226"> the implications of crossed serial dependencies in e.g. Dutch subordinate clauses for non-transformational theories of grammar. Although context-free phrase structure grammars under the standard interpretations are weakly adequate to generate such languages as anbn, they are not capable of assigning the correct dependencies that is, they are not strongly adequate. In a recent paper (Bresnan Kaplan Peters and Zaenen 1982) (hereafter BKPZ), a solution to the Dutch problem was presented in terms of LFG (Kaplan and Bresnan 1982), which is known to have considerably more than context-free power. (Steedman 1983) and (Joshi 1983) have also made proposals for solutions in terms of Steedman/Ades grammars and tree adjunction grammars (Ades and Steedman 1982; Joshi Levy and Yueh 1975). In this paper I present a minimal extension to the GPSG formalism (Gazdar 1981c) which also provides a solution. It induces structures for the relevant sentences which are non-trivially distinct from those in BKPZ, and which I argue are more appropriate. It appears, when suitably constrained, to be similar to Joshi&apos;s proposal in making only a small increment in power, being incapable, for instance, of analysing anbncn with </context>
</contexts>
<marker>Steedman, 1983</marker>
<rawString>Steedman, M. 1983. On the Generality of the Nested Dependency Constraint and the reason for an Exception in Dutch. In Butterworth, B., Comrie, E. and Dahl, 0., editors, Explanations of Language Universals. Mouton.</rawString>
</citation>
<citation valid="false">
<authors>
<author>H S 1981b Thompson</author>
</authors>
<title>Chart Parsing and Rule Schemata in GPSG.</title>
<booktitle>In Proceedings of the Nineteenth Annual Meeting of the Association for Computational Linguistics. ACL, Stanford, CA. Also DAI Research Paper 165, Dept. of Artificial Intelligence,</booktitle>
<location>Univ. of Edinburgh.</location>
<marker>Thompson, </marker>
<rawString>Thompson, H.S. 1981b. Chart Parsing and Rule Schemata in GPSG. In Proceedings of the Nineteenth Annual Meeting of the Association for Computational Linguistics. ACL, Stanford, CA. Also DAI Research Paper 165, Dept. of Artificial Intelligence, Univ. of Edinburgh.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>