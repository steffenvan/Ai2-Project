<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<title confidence="0.997941">
On the Computational Complexity of Dominance Links
in Grammatical Formalisms
</title>
<author confidence="0.605919">
Sylvain Schmitz
</author>
<note confidence="0.737328">
LSV, ENS Cachan &amp; CNRS, France
</note>
<email confidence="0.665594">
sylvain.schmitz@lsv.ens-cachan.fr
</email>
<figure confidence="0.939733888888889">
� �
�VP
VP VP
����
���� �
V
repariert
NP
�eo�n VP NPacc VP
</figure>
<sectionHeader confidence="0.902597" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.9994865625">
Dominance links were introduced in
grammars to model long distance scram-
bling phenomena, motivating the defi-
nition of multiset-valued linear indexed
grammars (MLIGs) by Rambow (1994b),
and inspiring quite a few recent for-
malisms. It turns out that MLIGs have
since been rediscovered and reused in a
variety of contexts, and that the complex-
ity of their emptiness problem has become
the key to several open questions in com-
puter science. We survey complexity re-
sults and open issues on MLIGs and re-
lated formalisms, and provide new com-
plexity bounds for some linguistically mo-
tivated restrictions.
</bodyText>
<sectionHeader confidence="0.998782" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.9947416">
Scrambling constructions, as found in German and
other SOV languages (Becker et al., 1991; Ram-
bow, 1994a; Lichte, 2007), cause notorious diffi-
culties to linguistic modeling in classical grammar
formalisms like HPSG or TAG. A well-known il-
lustration of this situation is given in the following
two German sentences for “that Peter has repaired
the fridge today” (Lichte, 2007),
dass [Peter] heute [den K¨uhlschrank] repariert hat
that Peternom today the fridgeacc repaired has
dass [den K¨uhlschrank] heute [Peter] repariert hat
that the fridgeacc today Peternom repaired has
with a flexible word order between the two com-
plements of repariert, namely between the nomi-
native Peter and the accusative den K¨uhlschrank.
Rambow (1994b) introduced a formalism, un-
ordered vector grammars with dominance links
(UVG-dls), for modeling such phenomena. These
grammars are defined by vectors of context-
free productions along with dominance links that
</bodyText>
<figureCaption confidence="0.978402">
Figure 1: A vector of productions for the verb
repariert together with its two complements.
</figureCaption>
<bodyText confidence="0.999835916666667">
should be enforced during derivations; for in-
stance, Figure 1 shows how a flexible order be-
tween the complements of repariert could be ex-
pressed in an UVG-dl. Similar dominance mecha-
nisms have been employed in various tree descrip-
tion formalisms (Rambow et al., 1995; Rambow et
al., 2001; Candito and Kahane, 1998; Kallmeyer,
2001; Guillaume and Perrier, 2010) and TAG ex-
tensions (Becker et al., 1991; Rambow, 1994a).
However, the prime motivation for this survey
is another grammatical formalism defined in the
same article: multiset-valued linear indexed gram-
mars (Rambow, 1994b, MLIGs), which can be
seen as a low-level variant of UVG-dls that uses
multisets to emulate unfulfilled dominance links
in partial derivations. It is a natural extension of
Petri nets, with broader scope than just UVG-dls;
indeed, it has been independently rediscovered by
de Groote et al. (2004) in the context of linear
logic, and by Verma and Goubault-Larrecq (2005)
in that of equational theories. Moreover, the decid-
ability of its emptiness problem has proved to be
quite challenging and is still uncertain, with sev-
eral open questions depending on its resolution:
</bodyText>
<listItem confidence="0.998564">
• provability in multiplicative exponential lin-
ear logic (de Groote et al., 2004),
• emptiness and membership of abstract cat-
egorial grammars (de Groote et al., 2004;
Yoshinaka and Kanazawa, 2005),
• emptiness and membership of Stabler
(1997)’s minimalist grammars without
</listItem>
<page confidence="0.966661">
514
</page>
<note confidence="0.9464545">
Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics, pages 514–524,
Uppsala, Sweden, 11-16 July 2010. c�2010 Association for Computational Linguistics
</note>
<bodyText confidence="0.919572">
shortest move constraint (Salvati, 2010),
</bodyText>
<listItem confidence="0.919187">
• satisfiability of first-order logic on data
trees (Boja´nczyk et al., 2009), and of course
• emptiness and membership for the various
formalisms that embed UVG-dls.
</listItem>
<bodyText confidence="0.999318333333333">
Unsurprisingly in the light of their importance
in different fields, several authors have started in-
vestigating the complexity of decisions problems
for MLIGs (Demri et al., 2009; Lazi´c, 2010). We
survey the current state of affairs, with a particular
emphasis on two points:
</bodyText>
<listItem confidence="0.545978285714286">
1. the applicability of complexity results to
UVG-dls, which is needed if we are to con-
clude anything on related formalisms with
dominance links,
2. the effects of two linguistically motivated re-
strictions on such formalisms, lexicalization
and boundedness/rankedness.
</listItem>
<bodyText confidence="0.99979784375">
The latter notion is imported from Petri nets,
and turns out to offer interesting new complex-
ity trade-offs, as we prove that k-boundedness and
k-rankedness are EXPTIME-complete for MLIGs,
and that the emptiness and membership problems
are EXPTIME-complete for k-bounded MLIGs but
PTIME-complete in the k-ranked case. This also
implies an EXPTIME lower bound for emptiness
and membership in minimalist grammars with
shortest move constraint.
We first define MLIGs formally in Section 2 and
review related formalisms in Section 3. We pro-
ceed with complexity results in Section 4 before
concluding in Section 5.
Notations In the following, E denotes a finite al-
phabet, E* the set of finite sentences over E, and E
the empty string. The length of a string w is noted
|w|, and the number of occurrence of a symbol a
in w is noted |w|a. A language is formalized as a
subset of E*. Let Nn denote the set of vectors of
positive integers of dimension n. The i-th compo-
nent of a vector x in Nn is x(i), 0 denotes the null
vector, 1 the vector with 1 values, and ei the vec-
tor with 1 as its i-th component and 0 everywhere
else. The ordering ≤ on Nn is the componentwise
ordering: x ≤ y iff x(i) ≤ y(i) for all 0 &lt; i ≤ n.
The size of a vector refers to the size of its binary
encoding: |x |= Pni=1 1 + max(0, blo92 x(i)c).
We refer the reader unfamiliar with complex-
ity classes and notions such as hardness or
LOGSPACE reductions to classical textbooks (e.g.
Papadimitriou, 1994).
</bodyText>
<sectionHeader confidence="0.866296" genericHeader="method">
2 Multiset-Valued Linear Indexed
Grammars
</sectionHeader>
<bodyText confidence="0.985196125">
Definition 1 (Rambow, 1994b). An n-
dimensional multiset-valued linear indexed gram-
mar (MLIG) is a tuple G = hN, E, P, (5, x0)i
where N is a finite set of nonterminal symbols, E a
finite alphabet disjoint from N, V = (N ×Nn)]E
the vocabulary, P a finite set of productions in
(N × Nn) × V *, and (5, x0) ∈ N × Nn the start
symbol. Productions are more easily written as
</bodyText>
<equation confidence="0.987587">
(A,x) → u0(B1,x1)u1 ··· um(Bm,xm)um+1 (*)
</equation>
<bodyText confidence="0.830467666666667">
with each ui in E* and each (Bi, xi) in N × Nn.
The derivation relation ⇒ over sequences in V *
is defined by
</bodyText>
<equation confidence="0.76915">
S(A,y)S&apos; ⇒ Su0(B1,y1)u1 ··· um(Bm,ym)um+1S&apos;
</equation>
<bodyText confidence="0.8215262">
if S and S&apos; are in V *, a production of form (*) ap-
pears in P, x ≤ y, for each 1 ≤ i ≤ m, xi ≤ yi,
and y − x = Pmi=1 yi − xi.
The language of a MLIG is the set of terminal
strings derived from (5, x0), i.e.
</bodyText>
<equation confidence="0.934159">
L(G) = {w ∈ E*  |(5, x0) ⇒* w}
</equation>
<bodyText confidence="0.996478">
and we denote by L(MLIG) the class of MLIG
languages.
Example 2. To illustrate this definition, and its
relevance for free word order languages, consider
the 3-dimensional MLIG with productions
</bodyText>
<equation confidence="0.8873155">
(5, 0) → E  |(5, 1), (5, e1) → a (5, 0),
(5, e2) → b (5, 0), (5, e3) → c (5, 0)
</equation>
<bodyText confidence="0.910814">
and start symbol (5, 0). It generates the MIX lan-
guage of all sentences with the same number of a,
b, and c’s (see Figure 2 for an example derivation):
Lmix = {w ∈ {a, b, c}*  ||w|a = |w|b = |w|c} .
The size |G |of a MLIG G is essentially the sum
of the sizes of each of its productions of form (*):
!|ui |.
</bodyText>
<subsectionHeader confidence="0.98105">
2.1 Normal Forms
</subsectionHeader>
<bodyText confidence="0.9850545">
A MLIG is in extended two form (ETF) if all its
productions are of form
</bodyText>
<equation confidence="0.973285533333333">
terminal (A, 0) → a or (A, 0) → E, or
X m + 1 + |x |+ Xm |xi |+ m+1X
|x0 |+ i=1 i=0
P
515
S, (0, 0, 0)
S, (1, 1, 1)
b S, (1, 0, 1)
S, (2, 1, 2)
c S, (2, 1, 1)
a S, (1, 1, 1)
a S, (0, 1, 1)
b S, (0, 0, 1)
c S, (0, 0, 0)
E
</equation>
<figureCaption confidence="0.9683595">
Figure 2: A derivation for bcaabc in the grammar
of Example 2.
</figureCaption>
<equation confidence="0.758686">
nonterminal (A, x) → (B1, x1)(B2, x2) or
(A, x) → (B1, x1),
</equation>
<bodyText confidence="0.968201214285714">
with a in E, A, B1, B2 in N, and x, x1, x2 in Nn.
Using standard constructions, any MLIG can be
put into ETF in linear time or logarithmic space.
A MLIG is in restricted index normal form
(RINF) if the productions in P are of form
(A,0) → a, (A,0) → (B,ei), or (A,ei) →
(B,0), with A, B in N, 0 &lt; i ≤ n, and a in
(E∪(N ×{0}))*. The direct translation into RINF
proposed by Rambow (1994a) is exponential if we
consider a binary encoding of vectors, but using
techniques developed for Petri nets (Dufourd and
Finkel, 1999), this blowup can be avoided:
Proposition 3. For any MLIG, one can construct
an equivalent MLIG in RINF in logarithmic space.
</bodyText>
<subsectionHeader confidence="0.994977">
2.2 Restrictions
</subsectionHeader>
<bodyText confidence="0.997111238095238">
Two restrictions on dominance links have been
suggested in an attempt to reduce their complex-
ity, sometimes in conjunction: lexicalization and
k-boundedness. We provide here characterizations
for them in terms of MLIGs. We can combine
the two restrictions, thus defining the class of k-
bounded lexicalized MLIGs.
Lexicalization Lexicalization in UVG-dls re-
flects the strong dependence between syntactic
constructions (vectors of productions representing
an extended domain of locality) and lexical an-
chors. We define here a restriction of MLIGs with
similar complexity properties:
Definition 4. A terminal derivation a ⇒p w with
w in E* is c-lexicalized for some c &gt; 0 if p ≤
c·|w|.1 A MLIG is lexicalized if there exists c such
that any terminal derivation starting from (S, x0) is
c-lexicalized, and we denote by L(MLIG`) the set
of lexicalized MLIG languages.
Looking at the grammar of Example 2, any ter-
minal derivation (S, 0) ⇒p w verifies p = 4·|w|
</bodyText>
<equation confidence="0.589258">
3 +
</equation>
<bodyText confidence="0.985329833333333">
1, and the grammar is thus lexicalized.
Boundedness As dominance links model long-
distance dependencies, bounding the number of
simultaneously pending links can be motivated
on competence/performance grounds (Joshi et al.,
2000; Kallmeyer and Parmentier, 2008), and on
complexity/expressiveness grounds (Søgaard et
al., 2007; Kallmeyer and Parmentier, 2008; Chi-
ang and Scheffler, 2008). The shortest move con-
straint (SMC) introduced by Stabler (1997) to en-
force a strong form of minimality also falls into
this category of restrictions.
</bodyText>
<construct confidence="0.513598">
Definition 5. A MLIG derivation a0 ⇒ a1 ⇒
</construct>
<bodyText confidence="0.923381416666667">
· · · ⇒ ap is of rank k for some k ≥ 0 if, no vector
with a sum of components larger than k can appear
in any aj, i.e. for all x in Nn such that there exist
0 ≤ j ≤ p, 6, 6&apos; in V * and A in N with aj =
6(A, x)6&apos;, one has Eni=1 x(i) ≤ k.
A MLIG is k-ranked (noted kr-MLIG) if any
derivation starting with a0 = (S, x0) is of rank k.
It is ranked if there exists k such that it is k-ranked.
A 0-ranked MLIG is simply a context-free
grammar (CFG), and we have more generally the
following:
Lemma 6. Any n-dimensional k-ranked MLIG G
can be transformed into an equivalent CFG G&apos; in
time O(|G |· (n + 1)k3).
Proof. We assume G to be in ETF, at the expense
of a linear time factor. Each A in N is then
mapped to at most (n + 1)k nonterminals (A, y)
in N&apos; = N × Nn with En i=1 y(i) ≤ k. Finally,
for each production (A, x) → (B1, x1)(B2, x2) of
P, at most (n + 1)k3 choices are possible for pro-
ductions (A, y) → (B1, y1)(B2, y2) with (A, y),
(B1, y1), and (B2, y2) in N&apos;.
A definition quite similar to k-rankedness can
be found in the Petri net literature:
</bodyText>
<footnote confidence="0.978247333333333">
1This restriction is slightly stronger than that of linearly
restricted derivations (Rambow, 1994b), but still allows to
capture UVG-dl lexicalization.
</footnote>
<page confidence="0.990628">
516
</page>
<construct confidence="0.572526">
Definition 7. A MLIG derivation a0 ==&gt;. a1 ==&gt;.
</construct>
<bodyText confidence="0.9467244375">
· · · ==&gt;. ap is k-bounded for some k &gt; 0 if, no
vector with a coordinate larger than k can appear
in any aj, i.e. for all x in Nn such that there exist
0 &lt; j &lt; p, 6, 6&apos; in V * and A in N with aj =
S(A, x)S&apos;, and for all 1 &lt; i &lt; n, one has x(i) &lt; k.
A MLIG is k-bounded (noted kb-MLIG) if
any derivation starting with a0 = (S, x0) is k-
bounded. It is bounded if there exists k such that
it is k-bounded.
The SMC in minimalist grammars translates ex-
actly into 1-boundedness of the corresponding
MLIGs (Salvati, 2010).
Clearly, any k-ranked MLIG is also k-bounded,
and conversely any n-dimensional k-bounded
MLIG is (kn)-ranked, thus a MLIG is ranked iff it
is bounded. The counterpart to Lemma 6 is:
</bodyText>
<subsubsectionHeader confidence="0.433421">
Lemma 8. Any n-dimensional k-bounded MLIG
</subsubsectionHeader>
<bodyText confidence="0.946262176470588">
!9 can be transformed into an equivalent CFG !9&apos;
in time O(1!91 · (k + 1)n2).
Proof. We assume !9 to be in ETF, at the expense
of a linear time factor. Each A in N is then
mapped to at most (k+1)n nonterminals (A, y) in
N&apos; = N x {0, ... , k}n. Finally, for each produc-
tion (A, x) —* (B1, x1)(B2, x2) of P, each non-
terminal (A, y) of N&apos; with x &lt; y, and each index
0 &lt; i &lt; n, there are at most k + 1 ways to split
(y(i) − x(i)) &lt; k into y1(i) + y2(i) and span a
production (A, y) —* (B1, x1 + y1)(B2, x2 + y2)
of P&apos;. Overall, each production is mapped to at
most (k + 1)n2 context-free productions.
One can check that the grammar of Example 2 is
not bounded (to see this, repeatedly apply produc-
tion (S, 0) —* (S,1)), as expected since MIX is
not a context-free language.
</bodyText>
<subsectionHeader confidence="0.999386">
2.3 Language Properties
</subsectionHeader>
<bodyText confidence="0.944562692307692">
Let us mention a few more results pertaining to
MLIG languages:
Proposition 9 (Rambow, 1994b). L(MLIG) is
a substitution closed full abstract family of lan-
guages.
Proposition 10 (Rambow, 1994b). L(MLIGt) is
a subset of the context-sensitive languages.
Natural languages are known for displaying
some limited cross-serial dependencies, as wit-
nessed in linguistic analyses, e.g. of Swiss-
German (Shieber, 1985), Dutch (Kroch and San-
torini, 1991), or Tagalog (Maclachlan and Ram-
bow, 2002). This includes the copy language
</bodyText>
<equation confidence="0.725713">
Lcopy = {ww I w E {a, b}*} ,
</equation>
<bodyText confidence="0.9984715">
which does not seem to be generated by any
MLIG:
Conjecture 11 (Rambow, 1994b). Loopy is not in
L(MLIG).
Finally, we obtain the following result as a con-
sequence of Lemmas 6 and 8:
Corollary 12. L(kr-MLIG) = L(kb-MLIG) =
L(kb-MLIGt) is the set of context-free languages.
</bodyText>
<sectionHeader confidence="0.999414" genericHeader="method">
3 Related Formalisms
</sectionHeader>
<bodyText confidence="0.999848833333333">
We review formalisms connected to MLIGs, start-
ing in Section 3.1 with Petri nets and two of their
extensions, which turn out to be exactly equiva-
lent to MLIGs. We then consider various linguis-
tic formalisms that employ dominance links (Sec-
tion 3.2).
</bodyText>
<subsectionHeader confidence="0.999522">
3.1 Petri Nets
</subsectionHeader>
<bodyText confidence="0.984606037037037">
Definition 13 (Petri, 1962). A marked Petri net2
is a tuple N = (S, T, f, m0) where S and T are
disjoint finite sets of places and transitions, f a
flow function from (S x T) U (T x S) to N, and
m0 an initial marking in NS. A transition t E T
can be fired in a marking m in NS if f(p, t) &gt;
m(p) for all p E S, and reaches a new marking
m&apos; defined by m&apos;(p) = m(p) − f(p, t) + f(t, p)
for all p E S, written m [t) m&apos;. Another view is
that place p holds m(p) tokens, f(p, t) of which
are first removed when firing t, and then f(t, p)
added back. Firings are extended to sequences a
in T* by m [E) m, and m [at) m&apos; if there exists
m&apos;&apos; with m [a) m&apos;&apos; [t) m&apos;.
A labeled Petri net with reachability acceptance
is endowed with a labeling homomorphism co :
T* —* E* and a finite acceptance set F C NS,
defining the language (Peterson, 1981)
L(N, co, F) = {co(a) E E* I Im E F, m0 [a) m} .
Labeled Petri nets (with acceptance set {0}) are
notational variants of right linear MLIGs, defined
as having production in (NxNn)x(E*U(E*·(Nx
Nn))). This is is case of the MLIG of Example 2,
which is given in Petri net form in Figure 3, where
2Petri nets are also equivalent to vector addition system
(Karp and Miller, 1969, VAS) and vector addition systems
with states (Hopcroft and Pansiot, 1979, VASS).
</bodyText>
<page confidence="0.988011">
517
</page>
<figureCaption confidence="0.980252">
Figure 3: The labeled Petri net corresponding to
the right linear MLIG of Example 2.
</figureCaption>
<bodyText confidence="0.997092379310345">
circles depict places (representing MLIG nonter-
minals and indices) with black dots for initial to-
kens (representing the MLIG start symbol), boxes
transitions (representing MLIG productions), and
arcs the flow values. For instance, production
(S,e3) → c (S,0) is represented by the rightmost,
c-labeled transition, with f(S, t) = f(e3, t) =
f(t, S) = 1 and f(e1, t) = f(e2,t) = f(t, e1) =
f(t, e2) = f(t, e3) = 0.
Extensions The subsumption of Petri nets is not
innocuous, as it allows to derive lower bounds on
the computational complexity of MLIGs. Among
several extensions of Petri net with some branch-
ing capacity (see e.g. Mayr, 1999; Haddad and
Poitrenaud, 2007), two are of singular importance:
It turns out that MLIGs in their full generality have
since been independently rediscovered under the
names vector addition tree automata (de Groote et
al., 2004, VATA) and branching VASS (Verma and
Goubault-Larrecq, 2005, BVASS).
Semilinearity Another interesting consequence
of the subsumption of Petri nets by MLIGs is
that the former generate some non semilinear lan-
guages, i.e. with a Parikh image which is not a
semilinear subset of N|Σ |(Parikh, 1966). Hopcroft
and Pansiot (1979, Lemma 2.8) exhibit an exam-
ple of a VASS with a non semilinear reachability
set, which we translate as a 2-dimensional right
linear MLIG with productions3
</bodyText>
<equation confidence="0.988013">
(S, e2) → (S, e1), (S, 0) → (A, 0)  |(B, 0),
(A, e1) → (A, 2e2), (A, 0) → a (S, 0),
(B, e1) → b (B, 0)  |b, (B, e2) → b (B, 0)  |b
</equation>
<footnote confidence="0.961991333333333">
3Adding terminal symbols c in each production would re-
sult in a lexicalized grammar, still with a non semilinear lan-
guage.
</footnote>
<figureCaption confidence="0.996614">
Figure 4: An UVG-dl for Lmix.
</figureCaption>
<bodyText confidence="0.8763635">
and (S, e2) as start symbol, that generates the non
semilinear language
</bodyText>
<equation confidence="0.702152">
Lnsm = {anb&apos;  |0 ≤ n,0 &lt; m ≤ 2n} .
</equation>
<bodyText confidence="0.845947428571429">
Proposition 14 (Hopcroft and Pansiot, 1979).
There exist non semilinear Petri nets languages.
The non semilinearity of MLIGs entails that of
all the grammatical formalisms mentioned next in
Section 3.2; this answers in particular a conjecture
by Kallmeyer (2001) about the semilinearity of V-
TAGs.
</bodyText>
<subsectionHeader confidence="0.994795">
3.2 Dominance Links
</subsectionHeader>
<bodyText confidence="0.9981379">
UVG-dl Rambow (1994b) introduced UVG-dls
as a formal model for scrambling and tree descrip-
tion grammars.
Definition 15 (Rambow, 1994b). An unordered
vector grammars with dominance links (UVG-dl)
is a tuple G = hN, E, W, Si where N and E are
disjoint finite sets of nonterminals and terminals,
V = N ∪ E is the vocabulary, W is a set of vec-
tors of productions with dominance links, i.e. each
element of W is a pair (P, D) where each P is a
multiset of productions in N × V * and D is a re-
lation from nonterminals in the right parts of pro-
ductions in P to nonterminals in their left parts,
and S in N is the start symbol.
A terminal derivation of w in E* in an UVG-dl
is a context-free derivation of form S p�=⇒ α1 p� =⇒
α2 ··· αp_1 p� =⇒w such that the control word
p1p2 · · · pp is a permutation of a member of W*
and the dominance relations of W hold in the as-
sociated derivation tree. The language L(G) of
an UVG-dl G is the set of sentences w with some
terminal derivation. We write L(UVG-dl) for the
class of UVG-dl languages.
An alternative semantics of derivations in UVG-
dls is simply their translation into MLIGs: as-
sociate with each nonterminal in a derivation the
multiset of productions it has to spawn. Figure 4
presents the two vectors of an UVG-dl for the MIX
language of Example 2, with dashed arrows indi-
cating dominance links. Observe that production
</bodyText>
<figure confidence="0.999366727272727">
S
ε
a b c
ε
e3
e1 e2
{s}
� �
�S SSS �
� �
S a S b S c S
</figure>
<page confidence="0.945067">
518
</page>
<bodyText confidence="0.994991719298246">
S —* S in the second vector has to spawn even-
tually one occurrence of each S —* aS, S —* bS,
and S —* cS, which corresponds exactly to the
MLIG of Example 2.
The ease of translation from the grammar of
Figure 4 into a MLIG stems from the impossi-
bility of splitting any of its vectors (P,D) into
two nonempty ones (P1, D1) and (P2, D2) while
preserving the dominance relation, i.e. with P =
P1U+P2 and D = D1U+D2. This strictness property
can be enforced without loss of generality since
we can always add to each vector (P, D) a pro-
duction S —* S with a dominance link to each
production in P. This was performed on the sec-
ond vector in Figure 4; remark that the grammar
without this addition is an unordered vector gram-
mar (Cremers and Mayer, 1974, UVG), and still
generates Lmix.
Theorem 16 (Rambow, 1994b). Every MLIG can
be transformed into an equivalent UVG-dl in log-
arithmic space, and conversely.
Proof sketch. One can check that Rambow
(1994b)’s proof of G(MLIG) C G(UVG-dl)
incurs at most a quadratic blowup from a MLIG
in RINF, and invoke Proposition 3. More pre-
cisely, given a MLIG in RINF, productions
of form (A,0) —* a with A in N and a in
(E U (N x {0}))* form singleton vectors, and
productions of form (A,0) —* (B,ei) with A, B
in N and 0 &lt; i &lt; n need to be paired with a
production of form (C,ei) —* (D,0) for some
C and D in N in order to form a vector with a
dominance link between B and C.
The converse inclusion and its complexity are
immediate when considering strict UVG-dls.
The restrictions to k-ranked and k-bounded
grammars find natural counterparts in strict UVG-
dls by bounding the (total) number of pending
dominance links in any derivation. Lexicaliza-
tion has now its usual definition: for every vec-
tor ({pi,1, ... , pi,ki}, Di) in W, at least one of the
pi,j should contain at least one terminal in its right
part—we have then G(UVG-dlt) C G(MLIGt).
More on Dominance Links Dominance links
are quite common in tree description formalisms,
where they were already in use in D-theory (Mar-
cus et al., 1983) and in quasi-tree semantics for fb-
TAGs (Vijay-Shanker, 1992). In particular, D-tree
substitution grammars are essentially the same as
UVG-dls (Rambow et al., 2001), and quite a few
other tree description formalisms subsume them
(Candito and Kahane, 1998; Kallmeyer, 2001;
Guillaume and Perrier, 2010). Another class of
grammars are vector TAGs (V-TAGs), which ex-
tend TAGs and MCTAGs using dominance links
(Becker et al., 1991; Rambow, 1994a; Champol-
lion, 2007), subsuming again UVG-dls.
</bodyText>
<sectionHeader confidence="0.984448" genericHeader="method">
4 Computational Complexity
</sectionHeader>
<bodyText confidence="0.999980444444444">
We study in this section the complexity of sev-
eral decision problems on MLIGs, prominently
of emptiness and membership problems, in the
general (Section 4.2), k-bounded (Section 4.3),
and lexicalized cases (Section 4.4). Table 1 sums
up the known complexity results. Since by The-
orem 16 we can translate between MLIGs and
UVG-dls in logarithmic space, the complexity re-
sults on UVG-dls will be the same.
</bodyText>
<subsectionHeader confidence="0.957688">
4.1 Decision Problems
</subsectionHeader>
<bodyText confidence="0.998049944444445">
Let us first review some decision problems of
interest. In the following, !9 denotes a MLIG
(N, E, P, (S, x0)):
boundedness given (!9), is !9 bounded? As seen
in Section 2.2, this is equivalent to ranked-
ness.
k-boundedness given (!9, k), k in N, is !9 k-
bounded? As seen in Section 2.2, this is the
same as (kn)-rankedness. Here we will dis-
tinguish two cases depending on whether k is
encoded in unary or binary.
coverability given (!9, F), !9 e-free in ETF and F
a finite subset of NxNn, does there exist a =
(A1, y1) · · · (Am, ym) in (N xNn)* such that
(S, x0) ==&gt;.* a and for each 0 &lt; j &lt; m there
exists (Aj, xj) in F with xj &lt; yj?
reachability given (!9, F), !9 e-free in ETF and F
a finite subset of N x Nn, does there exist
</bodyText>
<equation confidence="0.7258355">
a = (A1, y1) · · · (Am, ym) in F* such that
(S, x0) ==&gt;.* a?
</equation>
<bodyText confidence="0.997864555555556">
non emptiness given (!9), is L(!9) non empty?
(uniform) membership given (!9, w), w in E*,
does w belong to L(!9)?
Boundedness and k-boundedness are needed
in order to prove that a grammar is bounded,
and to apply the smaller complexities of Sec-
tion 4.3. Coverability is often considered for
Petri nets, and allows to derive lower bounds on
reachability. Emptiness is the most basic static
</bodyText>
<page confidence="0.99629">
519
</page>
<bodyText confidence="0.999635583333333">
analysis one might want to perform on a gram-
mar, and is needed for parsing as intersection
approaches (Lang, 1994), while membership re-
duces to parsing. Note that we only consider uni-
form membership, since grammars for natural lan-
guages are typically considerably larger than input
sentences, and their influence can hardly be ne-
glected.
There are several obvious reductions between
reachability, emptiness, and membership. Let
→log denote LOGSPACE reductions between de-
cision problems; we have:
</bodyText>
<equation confidence="0.98542">
Proposition 17.
coverability →log reachability (1)
↔log non emptiness (2)
↔log membership (3)
</equation>
<bodyText confidence="0.9990245">
Proof sketch. For (1), construct a reachability in-
stance hG0, {(E, 0)}i from a coverability instance
hG, Fi by adding to G a fresh nonterminal E and
the productions
</bodyText>
<equation confidence="0.9675365">
{(A, x) → (E, 0)  |(A, x) ∈ F}
∪ {(E,ez) → (E,0)  |0 &lt; i ≤ n} .
</equation>
<bodyText confidence="0.990511823529412">
For (2), from a reachability instance hG, Fi, re-
move all terminal productions from G and add in-
stead the productions {(A, x) → E  |(A, x) ∈ F};
the new grammar G0 has a non empty language iff
the reachability instance was positive. Conversely,
from a non emptiness instance hGi, put the gram-
mar in ETF and define F to match all terminal pro-
ductions, i.e. F = {(A, x)  |(A, x) → a ∈ P, a ∈
E∪{E}}, and then remove all terminal productions
in order to obtain a reachability instance hG0, Fi.
For (3), from a non emptiness instance hGi, re-
place all terminals in G by E to obtain an empty
word membership instance hG0, Ei. Conversely,
from a membership instance hG, wi, construct the
intersection grammar G0 with L(G0) = L(G)∩{w}
(Bar-Hillel et al., 1961), which serves as non
emptiness instance hG0i.
</bodyText>
<subsectionHeader confidence="0.97131">
4.2 General Case
</subsectionHeader>
<bodyText confidence="0.999704857142857">
Verma and Goubault-Larrecq (2005) were the first
to prove that coverability and boundedness were
decidable for BVASS, using a covering tree con-
struction a` la Karp and Miller (1969), thus of
non primitive recursive complexity. Demri et al.
(2009, Theorems 7, 17, and 18) recently proved
tight complexity bounds for these problems, ex-
tending earlier results by Rackoff (1978) and Lip-
ton (1976) for Petri nets.
Theorem 18 (Demri et al., 2009). Coverabil-
ity and boundedness for MLIGs are 2EXPTIME-
complete.
Regarding reachability, emptiness, and mem-
bership, decidability is still open. A 2EXPSPACE
lower bound was recently found by Lazi´c (2010).
If a decision procedure exists, we can expect it to
be quite complex, as already in the Petri net case,
the complexity of the known decision procedures
(Mayr, 1981; Kosaraju, 1982) is not primitive re-
cursive (Cardoza et al., 1976, who attribute the
idea to Hack).
</bodyText>
<subsectionHeader confidence="0.998729">
4.3 k-Bounded and k-Ranked Cases
</subsectionHeader>
<bodyText confidence="0.977843166666666">
Since k-bounded MLIGs can be converted into
CFGs (Lemma 8), emptiness and membership
problems are decidable, albeit at the expense of an
exponential blowup. We know from the Petri net
literature that coverability and reachability prob-
lems are PSPACE-complete for k-bounded right
linear MLIGs (Jones et al., 1977) by a reduc-
tion from linear bounded automaton (LBA) mem-
bership. We obtain the following for k-bounded
MLIGs, using a similar reduction from member-
ship in polynomially space bounded alternating
Turing machines (Chandra et al., 1981, ATM):
Theorem 19. Coverability and reachability for k-
bounded MLIGs are EXPTIME-complete, even for
fixed k ≥ 1.
The lower bound is obtained through an encod-
ing of an instance of the membership problem for
ATMs working in polynomial space into an in-
stance of the coverability problem for 1-bounded
MLIGs. The upper bound is a direct application
of Lemma 8, coverability and reachability being
reducible to the emptiness problem for a CFG of
exponential size. Theorem 19 also shows the EX-
PTIME-hardness of emptiness and membership in
minimalist grammars with SMC.
Corollary 20. Let k ≥ 1; k-boundedness for
MLIGs is EXPTIME-complete.
Proof. For the lower bound, consider an instance
hG, Fi of coverability for a 1-bounded MLIG G,
which is EXPTIME-hard according to Theorem 19.
Add to the MLIG G a fresh nonterminal E and the
productions
{(A, x) → (E, x)  |(A, x) ∈ F}
∪ {(E, 0) → (E, ez)  |0 &lt; i ≤ n} ,
which make it non k-bounded iff the coverability
instance was positive.
</bodyText>
<page confidence="0.987021">
520
</page>
<table confidence="0.999357615384615">
Problem Lower bound Upper bound
Petri net k-Boundedness PSPACE (Jones et al., 1977) PSPACE (Jones et al., 1977)
Petri net Boundedness EXPSPACE (Lipton, 1976) EXPSPACE (Rackoff, 1978)
Petri net {Emptiness, Membership} EXPSPACE (Lipton, 1976) Decidable, not primitive recursive
(Mayr, 1981; Kosaraju, 1982)
{MLIG, MLIG¢} k-Boundedness EXPTIME (Corollary 20) EXPTIME (Corollary 20)
{MLIG, MLIG¢} Boundedness 2EXPTIME (Demri et al., 2009) 2EXPTIME (Demri et al., 2009)
{MLIG, MLIG¢} Emptiness 2EXPSPACE (Lazi´c, 2010) Not known to be decidable
MLIG Membership
{kb-MLIG, kb-MLIG¢} Emptiness EXPTIME (Theorem 19) EXPTIME (Theorem 19)
kb-MLIG Membership
{MLIG¢, kb-MLIG¢} Membership NPTIME (Koller and Rambow, 2007) NPTIME (trivial)
kr-MLIG {Emptiness, Membership} PTIME (Jones and Laaser, 1976) PTIME (Lemma 6)
</table>
<tableCaption confidence="0.999915">
Table 1: Summary of complexity results.
</tableCaption>
<bodyText confidence="0.999757130434783">
For the upper bound, apply Lemma 8 with k&apos; =
k + 1 to construct an O(|!9 |· 2n2 lo92(ki+1))-sized
CFG, reduce it in polynomial time, and check
whether a nonterminal (A, x) with x(i) = k&apos; for
some 0 &lt; i &lt; n occurs in the reduced grammar.
Note that the choice of the encoding of k is ir-
relevant, as k = 1 is enough for the lower bound,
and k only logarithmically influences the exponent
for the upper bound.
Corollary 20 also implies the EXPTIME-
completeness of k-rankedness, k encoded in
unary, if k can take arbitrary values. On the other
hand, if k is known to be small, for instance log-
arithmic in the size of !9, then k-rankedness be-
comes polynomial by Lemma 6.
Observe finally that k-rankedness provides the
only tractable class of MLIGs for uniform mem-
bership, using again Lemma 6 to obtain a CFG
of polynomial size—actually exponential in k,
but k is assumed to be fixed for this problem.
An obvious lower bound is that of membership
in CFGs, which is PTIME-complete (Jones and
Laaser, 1976).
</bodyText>
<subsectionHeader confidence="0.997934">
4.4 Lexicalized Case
</subsectionHeader>
<bodyText confidence="0.999951944444444">
Unlike the high complexity lower bounds of the
previous two sections, NPTIME-hardness results
for uniform membership have been proved for a
number of formalisms related to MLIGs, from the
commutative CFG viewpoint (Huynh, 1983; Bar-
ton, 1985; Esparza, 1995), or from more spe-
cialized models (Søgaard et al., 2007; Champol-
lion, 2007; Koller and Rambow, 2007). We fo-
cus here on this last proof, which reduces from
the normal dominance graph configurability prob-
lem (Althaus et al., 2003), as it allows to derive
NPTIME-hardness even in highly restricted gram-
mars.
Theorem 21 (Koller and Rambow, 2007). Uni-
form membership of (!9, w) for !9 a 1-bounded,
lexicalized, UVG-dl with finite language is
NPTIME-hard, even for |w |= 1.
Proof sketch. Set 5 as start symbol and add a pro-
duction 5 —* aA to the sole vector of the gram-
mar !9 constructed by Koller and Rambow (2007)
from a normal dominance graph, with dominance
links to all the other productions. Then !9 becomes
strict, lexicalized, with finite language {a} or 0,
and 1-bounded, such that a belongs to L(!9) iff the
normal dominance graph is configurable.
The fact that uniform membership is in
NPTIME in the lexicalized case is clear, as we
only need to guess nondeterministically a deriva-
tion of size linear in |w |and check its correctness.
The weakness of lexicalized grammars is how-
ever that their emptiness problem is not any eas-
ier to solve! The effect of lexicalization is indeed
to break the reduction from emptiness to member-
ship in Proposition 17, but emptiness is as hard as
ever, which means that static checks on the gram-
mar might even be undecidable.
</bodyText>
<sectionHeader confidence="0.999184" genericHeader="conclusions">
5 Conclusion
</sectionHeader>
<bodyText confidence="0.999456428571428">
Grammatical formalisms with dominance links,
introduced in particular to model scrambling phe-
nomena in computational linguistics, have deep
connections with several open questions in an un-
expected variety of fields in computer science.
We hope this survey to foster cross-fertilizing ex-
changes; for instance, is there a relation between
</bodyText>
<page confidence="0.991906">
521
</page>
<bodyText confidence="0.999756214285714">
Conjecture 11 and the decidability of reachabil-
ity in MLIGs? A similar question, whether the
language Lpal of even 2-letters palindromes was
a Petri net language, was indeed solved using the
decidability of reachability in Petri nets (Jantzen,
1979), and shown to be strongly related to the lat-
ter (Lambert, 1992).
A conclusion with a more immediate linguis-
tic value is that MLIGs and UVG-dls hardly qual-
ify as formalisms for mildly context-sensitive lan-
guages, claimed by Joshi (1985) to be adequate
for modeling natural languages, and “roughly” de-
fined as the extensions of context-free languages
that display
</bodyText>
<listItem confidence="0.977608125">
1. support for limited cross-serial dependen-
cies: seems doubtful, see Conjecture 11,
2. constant growth, a requisite nowadays re-
placed by semilinearity: does not hold, as
seen with Proposition 14, and
3. polynomial recognition algorithms: holds
only for restricted classes of grammars, as
seen in Section 4.
</listItem>
<bodyText confidence="0.999281166666667">
Nevertheless, variants such as k-ranked V-TAGs
are easily seen to fulfill all the three points above.
Acknowledgements Thanks to Pierre Cham-
bart, St´ephane Demri, and Alain Finkel for helpful
discussions, and to Sylvain Salvati for pointing out
the relation with minimalist grammars.
</bodyText>
<sectionHeader confidence="0.997823" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999317028571429">
Ernst Althaus, Denys Duchier, Alexander Koller, Kurt
Mehlhorn, Joachim Niehren, and Sven Thiel. 2003.
An efficient graph algorithm for dominance con-
straints. Journal of Algorithms, 48(1):194–219.
Yehoshua Bar-Hillel, Micha Perles, and Eliahu Shamir.
1961. On formal properties of simple phrase struc-
ture grammars. Zeitschrift f¨ur Phonetik, Sprachwis-
senschaft und Kommunikationsforschung, 14:143–
172.
G. Edward Barton. 1985. The computational difficulty
of ID/LP parsing. In ACL’85, pages 76–81. ACL
Press.
Tilman Becker, Aravind K. Joshi, and Owen Rambow.
1991. Long-distance scrambling and tree adjoining
grammars. In EACL’91, pages 21–26. ACL Press.
Mikołaj Boja´nczyk, Anca Muscholl, Thomas
Schwentick, and Luc Segoufin. 2009. Two-
variable logic on data trees and XML reasoning.
Journal of the ACM, 56(3):1–48.
Marie-H´el`ene Candito and Sylvain Kahane. 1998.
Defining DTG derivations to get semantic graphs.
In TAG+4, pages 25–28.
E. Cardoza, Richard J. Lipton, and Albert R. Meyer.
1976. Exponential space complete problems for
Petri nets and commutative semigroups: Preliminary
report. In STOC’76, pages 50–54. ACM Press.
Lucas Champollion. 2007. Lexicalized non-local MC-
TAG with dominance links is NP-complete. In MOL
10.
Ashok K. Chandra, Dexter C. Kozen, and Larry J.
Stockmeyer. 1981. Alternation. Journal of the
ACM, 28(1):114–133.
David Chiang and Tatjana Scheffler. 2008. Flexible
composition and delayed tree-locality. In TAG+9.
Armin B. Cremers and Otto Mayer. 1974. On vec-
tor languages. Journal of Computer and System Sci-
ences, 8(2):158–166.
Philippe de Groote, Bruno Guillaume, and Sylvain Sal-
vati. 2004. Vector addition tree automata. In
LICS’04, pages 64–73. IEEE Computer Society.
St´ephane Demri, Marcin Jurdzi´nski, Oded Lachish,
and Ranko Lazi´c. 2009. The covering and bound-
edness problems for branching vector addition sys-
tems. In Ravi Kannan and K. Narayan Kumar, edi-
tors, FSTTCS’09, volume 4 of Leibniz International
Proceedings in Informatics, pages 181–192. Schloss
Dagstuhl–Leibniz-Zentrum f¨ur Informatik.
Catherine Dufourd and Alain Finkel. 1999. A polyno-
mial a-bisimilar normalization for reset Petri nets.
Theoretical Computer Science, 222(1–2):187–194.
Javier Esparza. 1995. Petri nets, commutative context-
free grammars, and basic parallel processes. In
Horst Reichel, editor, FCT’95, volume 965 of Lec-
ture Notes in Computer Science, pages 221–232.
Springer.
Bruno Guillaume and Guy Perrier. 2010. Interaction
grammars. Research on Language and Computa-
tion. To appear.
Serge Haddad and Denis Poitrenaud. 2007. Recursive
Petri nets. Acta Informatica, 44(7–8):463–508.
John Hopcroft and Jean-Jacques Pansiot. 1979. On
the reachability problem for 5-dimensional vector
addition systems. Theoretical Computer Science,
8(2):135–159.
Dung T. Huynh. 1983. Commutative grammars: the
complexity of uniform word problems. Information
and Control, 57(1):21–39.
Matthias Jantzen. 1979. On the hierarchy of Petri net
languages. RAIRO Theoretical Informatics and Ap-
plications, 13(1):19–30.
</reference>
<page confidence="0.987242">
522
</page>
<reference confidence="0.999649653846154">
Neil D. Jones and William T. Laaser. 1976. Complete
problems for deterministic polynomial time. Theo-
retical Computer Science, 3(1):105–117.
Neil D. Jones, Lawrence H. Landweber, and Y. Ed-
mund Lien. 1977. Complexity of some problems in
Petri nets. Theoretical Computer Science, 4(3):277–
299.
Aravind K. Joshi, Tilman Becker, and Owen Rambow.
2000. Complexity of scrambling: A new twist to
the competence-performance distinction. In Anne
Abeill´e and Owen Rambow, editors, Tree Adjoin-
ing Grammars. Formalisms, Linguistic Analysis and
Processing, chapter 6, pages 167–181. CSLI Publi-
cations.
Aravind K. Joshi. 1985. Tree-adjoining grammars:
How much context sensitivity is required to provide
reasonable structural descriptions? In David R.
Dowty, Lauri Karttunen, and Arnold M. Zwicky,
editors, Natural Language Parsing: Psychological,
Computational, and Theoretical Perspectives, chap-
ter 6, pages 206–250. Cambridge University Press.
Laura Kallmeyer and Yannick Parmentier. 2008. On
the relation between multicomponent tree adjoining
grammars with tree tuples (TT-MCTAG) and range
concatenation grammars (RCG). In Carlos Martin-
Vide, Friedrich Otto, and Henning Fernau, editors,
LATA’08, volume 5196 of Lecture Notes in Com-
puter Science, pages 263–274. Springer.
Laura Kallmeyer. 2001. Local tree description gram-
mars. Grammars, 4(2):85–137.
Richard M. Karp and Raymond E. Miller. 1969. Par-
allel program schemata. Journal of Computer and
System Sciences, 3(2):147–195.
Alexander Koller and Owen Rambow. 2007. Relating
dominance formalisms. In FG’07.
S. Rao Kosaraju. 1982. Decidability of reachability in
vector addition systems. In STOC’82, pages 267–
281. ACM Press.
Anthony S. Kroch and Beatrice Santorini. 1991. The
derived constituent structure of the West Germanic
verb-raising construction. In Robert Freidin, editor,
Principles and Parameters in Comparative Gram-
mar, chapter 10, pages 269–338. MIT Press.
Jean-Luc Lambert. 1992. A structure to decide reach-
ability in Petri nets. Theoretical Computer Science,
99(1):79–104.
Bernard Lang. 1994. Recognition can be harder than
parsing. Computational Intelligence, 10(4):486–
494.
Ranko Lazi´c. 2010. The reachability problem for
branching vector addition systems requires doubly-
exponential space. Manuscript.
Timm Lichte. 2007. An MCTAG with tuples for co-
herent constructions in German. In FG’07.
Richard Lipton. 1976. The reachability problem re-
quires exponential space. Technical Report 62, Yale
University.
Anna Maclachlan and Owen Rambow. 2002. Cross-
serial dependencies in Tagalog. In TAG+6, pages
100–107.
Mitchell P. Marcus, Donald Hindle, and Margaret M.
Fleck. 1983. D-theory: talking about talking about
trees. In ACL’83, pages 129–136. ACL Press.
Ernst W. Mayr. 1981. An algorithm for the general
Petri net reachability problem. In STOC’81, pages
238–246. ACM Press.
Richard Mayr. 1999. Process rewrite systems. Infor-
mation and Computation, 156(1–2):264–286.
Christos H. Papadimitriou. 1994. Computational
Complexity. Addison-Wesley.
Rohit J. Parikh. 1966. On context-free languages.
Journal of the ACM, 13(4):570–581.
James L. Peterson. 1981. Petri Net Theory and the
Modeling of Systems. Prentice Hall.
Carl A. Petri. 1962. Kommunikation mit Automaten.
Ph.D. thesis, University of Bonn.
Charles Rackoff. 1978. The covering and boundedness
problems for vector addition systems. Theoretical
Computer Science, 6(2):223–231.
Owen Rambow, K. Vijay-Shanker, and David Weir.
1995. D-tree grammars. In ACL’95, pages 151–158.
ACL Press.
Owen Rambow, David Weir, and K. Vijay-Shanker.
2001. D-tree substitution grammars. Computa-
tional Linguistics, 27(1):89–121.
Owen Rambow. 1994a. Formal and Computational
Aspects of Natural Language Syntax. Ph.D. thesis,
University of Pennsylvania.
Owen Rambow. 1994b. Multiset-valued linear in-
dex grammars: imposing dominance constraints on
derivations. In ACL’94, pages 263–270. ACL Press.
Sylvain Salvati. 2010. Minimalist grammars in the
light of logic. Manuscript.
Stuart M. Shieber. 1985. Evidence against the context-
freeness of natural language. Linguistics and Phi-
losophy, 8(3):333–343.
Anders Søgaard, Timm Lichte, and Wolfgang Maier.
2007. The complexity of linguistically moti-
vated extensions of tree-adjoining grammar. In
RANLP’07, pages 548–553.
Edward P. Stabler. 1997. Derivational minimalism. In
Christian Retor´e, editor, LACL’96, volume 1328 of
Lecture Notes in Computer Science, pages 68–95.
Springer.
</reference>
<page confidence="0.98663">
523
</page>
<reference confidence="0.999039">
Kumar Neeraj Verma and Jean Goubault-Larrecq.
2005. Karp-Miller trees for a branching extension of
VASS. Discrete Mathematics and Theoretical Com-
puter Science, 7(1):217–230.
K. Vijay-Shanker. 1992. Using descriptions of trees in
a tree adjoining grammar. Computational Linguis-
tics, 18(4):481–517.
Ryo Yoshinaka and Makoto Kanazawa. 2005. The
complexity and generative capacity of lexicalized
abstract categorial grammars. In Philippe Blache,
Edward Stabler, Joan Busquets, and Richard Moot,
editors, LACL’05, volume 3492 of Lecture Notes in
Computer Science, pages 330–346. Springer.
</reference>
<page confidence="0.998289">
524
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.245909">
<title confidence="0.9994195">On the Computational Complexity of Dominance Links in Grammatical Formalisms</title>
<author confidence="0.97538">Sylvain Schmitz</author>
<affiliation confidence="0.659273">LSV, ENS Cachan &amp; CNRS, France</affiliation>
<email confidence="0.820401">sylvain.schmitz@lsv.ens-cachan.fr</email>
<abstract confidence="0.911359583333333">VP VP ���� ���� � V repariert NP Abstract Dominance links were introduced in grammars to model long distance scrambling phenomena, motivating the defiof linear indexed by Rambow (1994b), and inspiring quite a few recent formalisms. It turns out that MLIGs have since been rediscovered and reused in a variety of contexts, and that the complexity of their emptiness problem has become the key to several open questions in computer science. We survey complexity results and open issues on MLIGs and related formalisms, and provide new complexity bounds for some linguistically motivated restrictions.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Ernst Althaus</author>
<author>Denys Duchier</author>
<author>Alexander Koller</author>
<author>Kurt Mehlhorn</author>
<author>Joachim Niehren</author>
<author>Sven Thiel</author>
</authors>
<title>An efficient graph algorithm for dominance constraints.</title>
<date>2003</date>
<journal>Journal of Algorithms,</journal>
<volume>48</volume>
<issue>1</issue>
<contexts>
<context position="29104" citStr="Althaus et al., 2003" startWordPosition="5224" endWordPosition="5227">is problem. An obvious lower bound is that of membership in CFGs, which is PTIME-complete (Jones and Laaser, 1976). 4.4 Lexicalized Case Unlike the high complexity lower bounds of the previous two sections, NPTIME-hardness results for uniform membership have been proved for a number of formalisms related to MLIGs, from the commutative CFG viewpoint (Huynh, 1983; Barton, 1985; Esparza, 1995), or from more specialized models (Søgaard et al., 2007; Champollion, 2007; Koller and Rambow, 2007). We focus here on this last proof, which reduces from the normal dominance graph configurability problem (Althaus et al., 2003), as it allows to derive NPTIME-hardness even in highly restricted grammars. Theorem 21 (Koller and Rambow, 2007). Uniform membership of (!9, w) for !9 a 1-bounded, lexicalized, UVG-dl with finite language is NPTIME-hard, even for |w |= 1. Proof sketch. Set 5 as start symbol and add a production 5 —* aA to the sole vector of the grammar !9 constructed by Koller and Rambow (2007) from a normal dominance graph, with dominance links to all the other productions. Then !9 becomes strict, lexicalized, with finite language {a} or 0, and 1-bounded, such that a belongs to L(!9) iff the normal dominance</context>
</contexts>
<marker>Althaus, Duchier, Koller, Mehlhorn, Niehren, Thiel, 2003</marker>
<rawString>Ernst Althaus, Denys Duchier, Alexander Koller, Kurt Mehlhorn, Joachim Niehren, and Sven Thiel. 2003. An efficient graph algorithm for dominance constraints. Journal of Algorithms, 48(1):194–219.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yehoshua Bar-Hillel</author>
<author>Micha Perles</author>
<author>Eliahu Shamir</author>
</authors>
<title>On formal properties of simple phrase structure grammars. Zeitschrift f¨ur Phonetik, Sprachwissenschaft und Kommunikationsforschung,</title>
<date>1961</date>
<pages>14--143</pages>
<contexts>
<context position="24234" citStr="Bar-Hillel et al., 1961" startWordPosition="4425" endWordPosition="4428">→ E |(A, x) ∈ F}; the new grammar G0 has a non empty language iff the reachability instance was positive. Conversely, from a non emptiness instance hGi, put the grammar in ETF and define F to match all terminal productions, i.e. F = {(A, x) |(A, x) → a ∈ P, a ∈ E∪{E}}, and then remove all terminal productions in order to obtain a reachability instance hG0, Fi. For (3), from a non emptiness instance hGi, replace all terminals in G by E to obtain an empty word membership instance hG0, Ei. Conversely, from a membership instance hG, wi, construct the intersection grammar G0 with L(G0) = L(G)∩{w} (Bar-Hillel et al., 1961), which serves as non emptiness instance hG0i. 4.2 General Case Verma and Goubault-Larrecq (2005) were the first to prove that coverability and boundedness were decidable for BVASS, using a covering tree construction a` la Karp and Miller (1969), thus of non primitive recursive complexity. Demri et al. (2009, Theorems 7, 17, and 18) recently proved tight complexity bounds for these problems, extending earlier results by Rackoff (1978) and Lipton (1976) for Petri nets. Theorem 18 (Demri et al., 2009). Coverability and boundedness for MLIGs are 2EXPTIMEcomplete. Regarding reachability, emptiness</context>
</contexts>
<marker>Bar-Hillel, Perles, Shamir, 1961</marker>
<rawString>Yehoshua Bar-Hillel, Micha Perles, and Eliahu Shamir. 1961. On formal properties of simple phrase structure grammars. Zeitschrift f¨ur Phonetik, Sprachwissenschaft und Kommunikationsforschung, 14:143– 172.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Edward Barton</author>
</authors>
<title>The computational difficulty of ID/LP parsing.</title>
<date>1985</date>
<booktitle>In ACL’85,</booktitle>
<pages>76--81</pages>
<publisher>ACL Press.</publisher>
<contexts>
<context position="28860" citStr="Barton, 1985" startWordPosition="5184" endWordPosition="5186">mial by Lemma 6. Observe finally that k-rankedness provides the only tractable class of MLIGs for uniform membership, using again Lemma 6 to obtain a CFG of polynomial size—actually exponential in k, but k is assumed to be fixed for this problem. An obvious lower bound is that of membership in CFGs, which is PTIME-complete (Jones and Laaser, 1976). 4.4 Lexicalized Case Unlike the high complexity lower bounds of the previous two sections, NPTIME-hardness results for uniform membership have been proved for a number of formalisms related to MLIGs, from the commutative CFG viewpoint (Huynh, 1983; Barton, 1985; Esparza, 1995), or from more specialized models (Søgaard et al., 2007; Champollion, 2007; Koller and Rambow, 2007). We focus here on this last proof, which reduces from the normal dominance graph configurability problem (Althaus et al., 2003), as it allows to derive NPTIME-hardness even in highly restricted grammars. Theorem 21 (Koller and Rambow, 2007). Uniform membership of (!9, w) for !9 a 1-bounded, lexicalized, UVG-dl with finite language is NPTIME-hard, even for |w |= 1. Proof sketch. Set 5 as start symbol and add a production 5 —* aA to the sole vector of the grammar !9 constructed by</context>
</contexts>
<marker>Barton, 1985</marker>
<rawString>G. Edward Barton. 1985. The computational difficulty of ID/LP parsing. In ACL’85, pages 76–81. ACL Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Tilman Becker</author>
<author>Aravind K Joshi</author>
<author>Owen Rambow</author>
</authors>
<title>Long-distance scrambling and tree adjoining grammars.</title>
<date>1991</date>
<booktitle>In EACL’91,</booktitle>
<pages>21--26</pages>
<publisher>ACL Press.</publisher>
<contexts>
<context position="927" citStr="Becker et al., 1991" startWordPosition="144" endWordPosition="147">omena, motivating the definition of multiset-valued linear indexed grammars (MLIGs) by Rambow (1994b), and inspiring quite a few recent formalisms. It turns out that MLIGs have since been rediscovered and reused in a variety of contexts, and that the complexity of their emptiness problem has become the key to several open questions in computer science. We survey complexity results and open issues on MLIGs and related formalisms, and provide new complexity bounds for some linguistically motivated restrictions. 1 Introduction Scrambling constructions, as found in German and other SOV languages (Becker et al., 1991; Rambow, 1994a; Lichte, 2007), cause notorious difficulties to linguistic modeling in classical grammar formalisms like HPSG or TAG. A well-known illustration of this situation is given in the following two German sentences for “that Peter has repaired the fridge today” (Lichte, 2007), dass [Peter] heute [den K¨uhlschrank] repariert hat that Peternom today the fridgeacc repaired has dass [den K¨uhlschrank] heute [Peter] repariert hat that the fridgeacc today Peternom repaired has with a flexible word order between the two complements of repariert, namely between the nominative Peter and the a</context>
<context position="2270" citStr="Becker et al., 1991" startWordPosition="354" endWordPosition="357"> for modeling such phenomena. These grammars are defined by vectors of contextfree productions along with dominance links that Figure 1: A vector of productions for the verb repariert together with its two complements. should be enforced during derivations; for instance, Figure 1 shows how a flexible order between the complements of repariert could be expressed in an UVG-dl. Similar dominance mechanisms have been employed in various tree description formalisms (Rambow et al., 1995; Rambow et al., 2001; Candito and Kahane, 1998; Kallmeyer, 2001; Guillaume and Perrier, 2010) and TAG extensions (Becker et al., 1991; Rambow, 1994a). However, the prime motivation for this survey is another grammatical formalism defined in the same article: multiset-valued linear indexed grammars (Rambow, 1994b, MLIGs), which can be seen as a low-level variant of UVG-dls that uses multisets to emulate unfulfilled dominance links in partial derivations. It is a natural extension of Petri nets, with broader scope than just UVG-dls; indeed, it has been independently rediscovered by de Groote et al. (2004) in the context of linear logic, and by Verma and Goubault-Larrecq (2005) in that of equational theories. Moreover, the dec</context>
<context position="20968" citStr="Becker et al., 1991" startWordPosition="3833" endWordPosition="3836">art—we have then G(UVG-dlt) C G(MLIGt). More on Dominance Links Dominance links are quite common in tree description formalisms, where they were already in use in D-theory (Marcus et al., 1983) and in quasi-tree semantics for fbTAGs (Vijay-Shanker, 1992). In particular, D-tree substitution grammars are essentially the same as UVG-dls (Rambow et al., 2001), and quite a few other tree description formalisms subsume them (Candito and Kahane, 1998; Kallmeyer, 2001; Guillaume and Perrier, 2010). Another class of grammars are vector TAGs (V-TAGs), which extend TAGs and MCTAGs using dominance links (Becker et al., 1991; Rambow, 1994a; Champollion, 2007), subsuming again UVG-dls. 4 Computational Complexity We study in this section the complexity of several decision problems on MLIGs, prominently of emptiness and membership problems, in the general (Section 4.2), k-bounded (Section 4.3), and lexicalized cases (Section 4.4). Table 1 sums up the known complexity results. Since by Theorem 16 we can translate between MLIGs and UVG-dls in logarithmic space, the complexity results on UVG-dls will be the same. 4.1 Decision Problems Let us first review some decision problems of interest. In the following, !9 denotes </context>
</contexts>
<marker>Becker, Joshi, Rambow, 1991</marker>
<rawString>Tilman Becker, Aravind K. Joshi, and Owen Rambow. 1991. Long-distance scrambling and tree adjoining grammars. In EACL’91, pages 21–26. ACL Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mikołaj Boja´nczyk</author>
<author>Anca Muscholl</author>
<author>Thomas Schwentick</author>
<author>Luc Segoufin</author>
</authors>
<title>Twovariable logic on data trees and XML reasoning.</title>
<date>2009</date>
<journal>Journal of the ACM,</journal>
<volume>56</volume>
<issue>3</issue>
<marker>Boja´nczyk, Muscholl, Schwentick, Segoufin, 2009</marker>
<rawString>Mikołaj Boja´nczyk, Anca Muscholl, Thomas Schwentick, and Luc Segoufin. 2009. Twovariable logic on data trees and XML reasoning. Journal of the ACM, 56(3):1–48.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Marie-H´el`ene Candito</author>
<author>Sylvain Kahane</author>
</authors>
<title>Defining DTG derivations to get semantic graphs.</title>
<date>1998</date>
<booktitle>In TAG+4,</booktitle>
<pages>25--28</pages>
<contexts>
<context position="2183" citStr="Candito and Kahane, 1998" startWordPosition="340" endWordPosition="343">ow (1994b) introduced a formalism, unordered vector grammars with dominance links (UVG-dls), for modeling such phenomena. These grammars are defined by vectors of contextfree productions along with dominance links that Figure 1: A vector of productions for the verb repariert together with its two complements. should be enforced during derivations; for instance, Figure 1 shows how a flexible order between the complements of repariert could be expressed in an UVG-dl. Similar dominance mechanisms have been employed in various tree description formalisms (Rambow et al., 1995; Rambow et al., 2001; Candito and Kahane, 1998; Kallmeyer, 2001; Guillaume and Perrier, 2010) and TAG extensions (Becker et al., 1991; Rambow, 1994a). However, the prime motivation for this survey is another grammatical formalism defined in the same article: multiset-valued linear indexed grammars (Rambow, 1994b, MLIGs), which can be seen as a low-level variant of UVG-dls that uses multisets to emulate unfulfilled dominance links in partial derivations. It is a natural extension of Petri nets, with broader scope than just UVG-dls; indeed, it has been independently rediscovered by de Groote et al. (2004) in the context of linear logic, and</context>
<context position="20796" citStr="Candito and Kahane, 1998" startWordPosition="3806" endWordPosition="3809">ation. Lexicalization has now its usual definition: for every vector ({pi,1, ... , pi,ki}, Di) in W, at least one of the pi,j should contain at least one terminal in its right part—we have then G(UVG-dlt) C G(MLIGt). More on Dominance Links Dominance links are quite common in tree description formalisms, where they were already in use in D-theory (Marcus et al., 1983) and in quasi-tree semantics for fbTAGs (Vijay-Shanker, 1992). In particular, D-tree substitution grammars are essentially the same as UVG-dls (Rambow et al., 2001), and quite a few other tree description formalisms subsume them (Candito and Kahane, 1998; Kallmeyer, 2001; Guillaume and Perrier, 2010). Another class of grammars are vector TAGs (V-TAGs), which extend TAGs and MCTAGs using dominance links (Becker et al., 1991; Rambow, 1994a; Champollion, 2007), subsuming again UVG-dls. 4 Computational Complexity We study in this section the complexity of several decision problems on MLIGs, prominently of emptiness and membership problems, in the general (Section 4.2), k-bounded (Section 4.3), and lexicalized cases (Section 4.4). Table 1 sums up the known complexity results. Since by Theorem 16 we can translate between MLIGs and UVG-dls in logari</context>
</contexts>
<marker>Candito, Kahane, 1998</marker>
<rawString>Marie-H´el`ene Candito and Sylvain Kahane. 1998. Defining DTG derivations to get semantic graphs. In TAG+4, pages 25–28.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Cardoza</author>
<author>Richard J Lipton</author>
<author>Albert R Meyer</author>
</authors>
<title>Exponential space complete problems for Petri nets and commutative semigroups: Preliminary report.</title>
<date>1976</date>
<booktitle>In STOC’76,</booktitle>
<pages>50--54</pages>
<publisher>ACM Press.</publisher>
<contexts>
<context position="25170" citStr="Cardoza et al., 1976" startWordPosition="4576" endWordPosition="4579">ems 7, 17, and 18) recently proved tight complexity bounds for these problems, extending earlier results by Rackoff (1978) and Lipton (1976) for Petri nets. Theorem 18 (Demri et al., 2009). Coverability and boundedness for MLIGs are 2EXPTIMEcomplete. Regarding reachability, emptiness, and membership, decidability is still open. A 2EXPSPACE lower bound was recently found by Lazi´c (2010). If a decision procedure exists, we can expect it to be quite complex, as already in the Petri net case, the complexity of the known decision procedures (Mayr, 1981; Kosaraju, 1982) is not primitive recursive (Cardoza et al., 1976, who attribute the idea to Hack). 4.3 k-Bounded and k-Ranked Cases Since k-bounded MLIGs can be converted into CFGs (Lemma 8), emptiness and membership problems are decidable, albeit at the expense of an exponential blowup. We know from the Petri net literature that coverability and reachability problems are PSPACE-complete for k-bounded right linear MLIGs (Jones et al., 1977) by a reduction from linear bounded automaton (LBA) membership. We obtain the following for k-bounded MLIGs, using a similar reduction from membership in polynomially space bounded alternating Turing machines (Chandra et</context>
</contexts>
<marker>Cardoza, Lipton, Meyer, 1976</marker>
<rawString>E. Cardoza, Richard J. Lipton, and Albert R. Meyer. 1976. Exponential space complete problems for Petri nets and commutative semigroups: Preliminary report. In STOC’76, pages 50–54. ACM Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Lucas Champollion</author>
</authors>
<title>Lexicalized non-local MCTAG with dominance links is NP-complete.</title>
<date>2007</date>
<booktitle>In MOL 10.</booktitle>
<contexts>
<context position="21003" citStr="Champollion, 2007" startWordPosition="3839" endWordPosition="3841">t). More on Dominance Links Dominance links are quite common in tree description formalisms, where they were already in use in D-theory (Marcus et al., 1983) and in quasi-tree semantics for fbTAGs (Vijay-Shanker, 1992). In particular, D-tree substitution grammars are essentially the same as UVG-dls (Rambow et al., 2001), and quite a few other tree description formalisms subsume them (Candito and Kahane, 1998; Kallmeyer, 2001; Guillaume and Perrier, 2010). Another class of grammars are vector TAGs (V-TAGs), which extend TAGs and MCTAGs using dominance links (Becker et al., 1991; Rambow, 1994a; Champollion, 2007), subsuming again UVG-dls. 4 Computational Complexity We study in this section the complexity of several decision problems on MLIGs, prominently of emptiness and membership problems, in the general (Section 4.2), k-bounded (Section 4.3), and lexicalized cases (Section 4.4). Table 1 sums up the known complexity results. Since by Theorem 16 we can translate between MLIGs and UVG-dls in logarithmic space, the complexity results on UVG-dls will be the same. 4.1 Decision Problems Let us first review some decision problems of interest. In the following, !9 denotes a MLIG (N, E, P, (S, x0)): boundedn</context>
<context position="28950" citStr="Champollion, 2007" startWordPosition="5199" endWordPosition="5201">of MLIGs for uniform membership, using again Lemma 6 to obtain a CFG of polynomial size—actually exponential in k, but k is assumed to be fixed for this problem. An obvious lower bound is that of membership in CFGs, which is PTIME-complete (Jones and Laaser, 1976). 4.4 Lexicalized Case Unlike the high complexity lower bounds of the previous two sections, NPTIME-hardness results for uniform membership have been proved for a number of formalisms related to MLIGs, from the commutative CFG viewpoint (Huynh, 1983; Barton, 1985; Esparza, 1995), or from more specialized models (Søgaard et al., 2007; Champollion, 2007; Koller and Rambow, 2007). We focus here on this last proof, which reduces from the normal dominance graph configurability problem (Althaus et al., 2003), as it allows to derive NPTIME-hardness even in highly restricted grammars. Theorem 21 (Koller and Rambow, 2007). Uniform membership of (!9, w) for !9 a 1-bounded, lexicalized, UVG-dl with finite language is NPTIME-hard, even for |w |= 1. Proof sketch. Set 5 as start symbol and add a production 5 —* aA to the sole vector of the grammar !9 constructed by Koller and Rambow (2007) from a normal dominance graph, with dominance links to all the o</context>
</contexts>
<marker>Champollion, 2007</marker>
<rawString>Lucas Champollion. 2007. Lexicalized non-local MCTAG with dominance links is NP-complete. In MOL 10.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ashok K Chandra</author>
<author>Dexter C Kozen</author>
<author>Larry J Stockmeyer</author>
</authors>
<date>1981</date>
<journal>Alternation. Journal of the ACM,</journal>
<volume>28</volume>
<issue>1</issue>
<contexts>
<context position="25780" citStr="Chandra et al., 1981" startWordPosition="4671" endWordPosition="4674"> al., 1976, who attribute the idea to Hack). 4.3 k-Bounded and k-Ranked Cases Since k-bounded MLIGs can be converted into CFGs (Lemma 8), emptiness and membership problems are decidable, albeit at the expense of an exponential blowup. We know from the Petri net literature that coverability and reachability problems are PSPACE-complete for k-bounded right linear MLIGs (Jones et al., 1977) by a reduction from linear bounded automaton (LBA) membership. We obtain the following for k-bounded MLIGs, using a similar reduction from membership in polynomially space bounded alternating Turing machines (Chandra et al., 1981, ATM): Theorem 19. Coverability and reachability for kbounded MLIGs are EXPTIME-complete, even for fixed k ≥ 1. The lower bound is obtained through an encoding of an instance of the membership problem for ATMs working in polynomial space into an instance of the coverability problem for 1-bounded MLIGs. The upper bound is a direct application of Lemma 8, coverability and reachability being reducible to the emptiness problem for a CFG of exponential size. Theorem 19 also shows the EXPTIME-hardness of emptiness and membership in minimalist grammars with SMC. Corollary 20. Let k ≥ 1; k-boundednes</context>
</contexts>
<marker>Chandra, Kozen, Stockmeyer, 1981</marker>
<rawString>Ashok K. Chandra, Dexter C. Kozen, and Larry J. Stockmeyer. 1981. Alternation. Journal of the ACM, 28(1):114–133.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David Chiang</author>
<author>Tatjana Scheffler</author>
</authors>
<title>Flexible composition and delayed tree-locality.</title>
<date>2008</date>
<booktitle>In TAG+9.</booktitle>
<contexts>
<context position="9572" citStr="Chiang and Scheffler, 2008" startWordPosition="1666" endWordPosition="1670">xists c such that any terminal derivation starting from (S, x0) is c-lexicalized, and we denote by L(MLIG`) the set of lexicalized MLIG languages. Looking at the grammar of Example 2, any terminal derivation (S, 0) ⇒p w verifies p = 4·|w| 3 + 1, and the grammar is thus lexicalized. Boundedness As dominance links model longdistance dependencies, bounding the number of simultaneously pending links can be motivated on competence/performance grounds (Joshi et al., 2000; Kallmeyer and Parmentier, 2008), and on complexity/expressiveness grounds (Søgaard et al., 2007; Kallmeyer and Parmentier, 2008; Chiang and Scheffler, 2008). The shortest move constraint (SMC) introduced by Stabler (1997) to enforce a strong form of minimality also falls into this category of restrictions. Definition 5. A MLIG derivation a0 ⇒ a1 ⇒ · · · ⇒ ap is of rank k for some k ≥ 0 if, no vector with a sum of components larger than k can appear in any aj, i.e. for all x in Nn such that there exist 0 ≤ j ≤ p, 6, 6&apos; in V * and A in N with aj = 6(A, x)6&apos;, one has Eni=1 x(i) ≤ k. A MLIG is k-ranked (noted kr-MLIG) if any derivation starting with a0 = (S, x0) is of rank k. It is ranked if there exists k such that it is k-ranked. A 0-ranked MLIG is</context>
</contexts>
<marker>Chiang, Scheffler, 2008</marker>
<rawString>David Chiang and Tatjana Scheffler. 2008. Flexible composition and delayed tree-locality. In TAG+9.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Armin B Cremers</author>
<author>Otto Mayer</author>
</authors>
<title>On vector languages.</title>
<date>1974</date>
<journal>Journal of Computer and System Sciences,</journal>
<volume>8</volume>
<issue>2</issue>
<contexts>
<context position="19255" citStr="Cremers and Mayer, 1974" startWordPosition="3533" endWordPosition="3536">xactly to the MLIG of Example 2. The ease of translation from the grammar of Figure 4 into a MLIG stems from the impossibility of splitting any of its vectors (P,D) into two nonempty ones (P1, D1) and (P2, D2) while preserving the dominance relation, i.e. with P = P1U+P2 and D = D1U+D2. This strictness property can be enforced without loss of generality since we can always add to each vector (P, D) a production S —* S with a dominance link to each production in P. This was performed on the second vector in Figure 4; remark that the grammar without this addition is an unordered vector grammar (Cremers and Mayer, 1974, UVG), and still generates Lmix. Theorem 16 (Rambow, 1994b). Every MLIG can be transformed into an equivalent UVG-dl in logarithmic space, and conversely. Proof sketch. One can check that Rambow (1994b)’s proof of G(MLIG) C G(UVG-dl) incurs at most a quadratic blowup from a MLIG in RINF, and invoke Proposition 3. More precisely, given a MLIG in RINF, productions of form (A,0) —* a with A in N and a in (E U (N x {0}))* form singleton vectors, and productions of form (A,0) —* (B,ei) with A, B in N and 0 &lt; i &lt; n need to be paired with a production of form (C,ei) —* (D,0) for some C and D in N in</context>
</contexts>
<marker>Cremers, Mayer, 1974</marker>
<rawString>Armin B. Cremers and Otto Mayer. 1974. On vector languages. Journal of Computer and System Sciences, 8(2):158–166.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Philippe de Groote</author>
<author>Bruno Guillaume</author>
<author>Sylvain Salvati</author>
</authors>
<title>Vector addition tree automata.</title>
<date>2004</date>
<booktitle>In LICS’04,</booktitle>
<pages>64--73</pages>
<publisher>IEEE Computer Society.</publisher>
<marker>de Groote, Guillaume, Salvati, 2004</marker>
<rawString>Philippe de Groote, Bruno Guillaume, and Sylvain Salvati. 2004. Vector addition tree automata. In LICS’04, pages 64–73. IEEE Computer Society.</rawString>
</citation>
<citation valid="true">
<authors>
<author>St´ephane Demri</author>
<author>Marcin Jurdzi´nski</author>
</authors>
<title>Oded Lachish, and Ranko Lazi´c.</title>
<date>2009</date>
<booktitle>of Leibniz International Proceedings in Informatics,</booktitle>
<volume>4</volume>
<pages>181--192</pages>
<editor>In Ravi Kannan and K. Narayan Kumar, editors, FSTTCS’09,</editor>
<marker>Demri, Jurdzi´nski, 2009</marker>
<rawString>St´ephane Demri, Marcin Jurdzi´nski, Oded Lachish, and Ranko Lazi´c. 2009. The covering and boundedness problems for branching vector addition systems. In Ravi Kannan and K. Narayan Kumar, editors, FSTTCS’09, volume 4 of Leibniz International Proceedings in Informatics, pages 181–192. Schloss Dagstuhl–Leibniz-Zentrum f¨ur Informatik.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Catherine Dufourd</author>
<author>Alain Finkel</author>
</authors>
<title>A polynomial a-bisimilar normalization for reset Petri nets.</title>
<date>1999</date>
<journal>Theoretical Computer Science,</journal>
<pages>222--1</pages>
<contexts>
<context position="8087" citStr="Dufourd and Finkel, 1999" startWordPosition="1434" endWordPosition="1437">tion for bcaabc in the grammar of Example 2. nonterminal (A, x) → (B1, x1)(B2, x2) or (A, x) → (B1, x1), with a in E, A, B1, B2 in N, and x, x1, x2 in Nn. Using standard constructions, any MLIG can be put into ETF in linear time or logarithmic space. A MLIG is in restricted index normal form (RINF) if the productions in P are of form (A,0) → a, (A,0) → (B,ei), or (A,ei) → (B,0), with A, B in N, 0 &lt; i ≤ n, and a in (E∪(N ×{0}))*. The direct translation into RINF proposed by Rambow (1994a) is exponential if we consider a binary encoding of vectors, but using techniques developed for Petri nets (Dufourd and Finkel, 1999), this blowup can be avoided: Proposition 3. For any MLIG, one can construct an equivalent MLIG in RINF in logarithmic space. 2.2 Restrictions Two restrictions on dominance links have been suggested in an attempt to reduce their complexity, sometimes in conjunction: lexicalization and k-boundedness. We provide here characterizations for them in terms of MLIGs. We can combine the two restrictions, thus defining the class of kbounded lexicalized MLIGs. Lexicalization Lexicalization in UVG-dls reflects the strong dependence between syntactic constructions (vectors of productions representing an e</context>
</contexts>
<marker>Dufourd, Finkel, 1999</marker>
<rawString>Catherine Dufourd and Alain Finkel. 1999. A polynomial a-bisimilar normalization for reset Petri nets. Theoretical Computer Science, 222(1–2):187–194.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Javier Esparza</author>
</authors>
<title>Petri nets, commutative contextfree grammars, and basic parallel processes.</title>
<date>1995</date>
<booktitle>of Lecture Notes in Computer Science,</booktitle>
<volume>95</volume>
<pages>221--232</pages>
<editor>In Horst Reichel, editor,</editor>
<publisher>Springer.</publisher>
<contexts>
<context position="28876" citStr="Esparza, 1995" startWordPosition="5187" endWordPosition="5188">6. Observe finally that k-rankedness provides the only tractable class of MLIGs for uniform membership, using again Lemma 6 to obtain a CFG of polynomial size—actually exponential in k, but k is assumed to be fixed for this problem. An obvious lower bound is that of membership in CFGs, which is PTIME-complete (Jones and Laaser, 1976). 4.4 Lexicalized Case Unlike the high complexity lower bounds of the previous two sections, NPTIME-hardness results for uniform membership have been proved for a number of formalisms related to MLIGs, from the commutative CFG viewpoint (Huynh, 1983; Barton, 1985; Esparza, 1995), or from more specialized models (Søgaard et al., 2007; Champollion, 2007; Koller and Rambow, 2007). We focus here on this last proof, which reduces from the normal dominance graph configurability problem (Althaus et al., 2003), as it allows to derive NPTIME-hardness even in highly restricted grammars. Theorem 21 (Koller and Rambow, 2007). Uniform membership of (!9, w) for !9 a 1-bounded, lexicalized, UVG-dl with finite language is NPTIME-hard, even for |w |= 1. Proof sketch. Set 5 as start symbol and add a production 5 —* aA to the sole vector of the grammar !9 constructed by Koller and Ramb</context>
</contexts>
<marker>Esparza, 1995</marker>
<rawString>Javier Esparza. 1995. Petri nets, commutative contextfree grammars, and basic parallel processes. In Horst Reichel, editor, FCT’95, volume 965 of Lecture Notes in Computer Science, pages 221–232. Springer.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Bruno Guillaume</author>
<author>Guy Perrier</author>
</authors>
<title>Interaction grammars. Research on Language and Computation.</title>
<date>2010</date>
<note>To appear.</note>
<contexts>
<context position="2230" citStr="Guillaume and Perrier, 2010" startWordPosition="346" endWordPosition="349">d vector grammars with dominance links (UVG-dls), for modeling such phenomena. These grammars are defined by vectors of contextfree productions along with dominance links that Figure 1: A vector of productions for the verb repariert together with its two complements. should be enforced during derivations; for instance, Figure 1 shows how a flexible order between the complements of repariert could be expressed in an UVG-dl. Similar dominance mechanisms have been employed in various tree description formalisms (Rambow et al., 1995; Rambow et al., 2001; Candito and Kahane, 1998; Kallmeyer, 2001; Guillaume and Perrier, 2010) and TAG extensions (Becker et al., 1991; Rambow, 1994a). However, the prime motivation for this survey is another grammatical formalism defined in the same article: multiset-valued linear indexed grammars (Rambow, 1994b, MLIGs), which can be seen as a low-level variant of UVG-dls that uses multisets to emulate unfulfilled dominance links in partial derivations. It is a natural extension of Petri nets, with broader scope than just UVG-dls; indeed, it has been independently rediscovered by de Groote et al. (2004) in the context of linear logic, and by Verma and Goubault-Larrecq (2005) in that o</context>
<context position="20843" citStr="Guillaume and Perrier, 2010" startWordPosition="3812" endWordPosition="3815">inition: for every vector ({pi,1, ... , pi,ki}, Di) in W, at least one of the pi,j should contain at least one terminal in its right part—we have then G(UVG-dlt) C G(MLIGt). More on Dominance Links Dominance links are quite common in tree description formalisms, where they were already in use in D-theory (Marcus et al., 1983) and in quasi-tree semantics for fbTAGs (Vijay-Shanker, 1992). In particular, D-tree substitution grammars are essentially the same as UVG-dls (Rambow et al., 2001), and quite a few other tree description formalisms subsume them (Candito and Kahane, 1998; Kallmeyer, 2001; Guillaume and Perrier, 2010). Another class of grammars are vector TAGs (V-TAGs), which extend TAGs and MCTAGs using dominance links (Becker et al., 1991; Rambow, 1994a; Champollion, 2007), subsuming again UVG-dls. 4 Computational Complexity We study in this section the complexity of several decision problems on MLIGs, prominently of emptiness and membership problems, in the general (Section 4.2), k-bounded (Section 4.3), and lexicalized cases (Section 4.4). Table 1 sums up the known complexity results. Since by Theorem 16 we can translate between MLIGs and UVG-dls in logarithmic space, the complexity results on UVG-dls </context>
</contexts>
<marker>Guillaume, Perrier, 2010</marker>
<rawString>Bruno Guillaume and Guy Perrier. 2010. Interaction grammars. Research on Language and Computation. To appear.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Serge Haddad</author>
<author>Denis Poitrenaud</author>
</authors>
<title>Recursive Petri nets.</title>
<date>2007</date>
<journal>Acta Informatica,</journal>
<pages>44--7</pages>
<contexts>
<context position="15700" citStr="Haddad and Poitrenaud, 2007" startWordPosition="2858" endWordPosition="2861">G nonterminals and indices) with black dots for initial tokens (representing the MLIG start symbol), boxes transitions (representing MLIG productions), and arcs the flow values. For instance, production (S,e3) → c (S,0) is represented by the rightmost, c-labeled transition, with f(S, t) = f(e3, t) = f(t, S) = 1 and f(e1, t) = f(e2,t) = f(t, e1) = f(t, e2) = f(t, e3) = 0. Extensions The subsumption of Petri nets is not innocuous, as it allows to derive lower bounds on the computational complexity of MLIGs. Among several extensions of Petri net with some branching capacity (see e.g. Mayr, 1999; Haddad and Poitrenaud, 2007), two are of singular importance: It turns out that MLIGs in their full generality have since been independently rediscovered under the names vector addition tree automata (de Groote et al., 2004, VATA) and branching VASS (Verma and Goubault-Larrecq, 2005, BVASS). Semilinearity Another interesting consequence of the subsumption of Petri nets by MLIGs is that the former generate some non semilinear languages, i.e. with a Parikh image which is not a semilinear subset of N|Σ |(Parikh, 1966). Hopcroft and Pansiot (1979, Lemma 2.8) exhibit an example of a VASS with a non semilinear reachability set</context>
</contexts>
<marker>Haddad, Poitrenaud, 2007</marker>
<rawString>Serge Haddad and Denis Poitrenaud. 2007. Recursive Petri nets. Acta Informatica, 44(7–8):463–508.</rawString>
</citation>
<citation valid="true">
<authors>
<author>John Hopcroft</author>
<author>Jean-Jacques Pansiot</author>
</authors>
<title>On the reachability problem for 5-dimensional vector addition systems.</title>
<date>1979</date>
<journal>Theoretical Computer Science,</journal>
<volume>8</volume>
<issue>2</issue>
<contexts>
<context position="14935" citStr="Hopcroft and Pansiot, 1979" startWordPosition="2728" endWordPosition="2731">. A labeled Petri net with reachability acceptance is endowed with a labeling homomorphism co : T* —* E* and a finite acceptance set F C NS, defining the language (Peterson, 1981) L(N, co, F) = {co(a) E E* I Im E F, m0 [a) m} . Labeled Petri nets (with acceptance set {0}) are notational variants of right linear MLIGs, defined as having production in (NxNn)x(E*U(E*·(Nx Nn))). This is is case of the MLIG of Example 2, which is given in Petri net form in Figure 3, where 2Petri nets are also equivalent to vector addition system (Karp and Miller, 1969, VAS) and vector addition systems with states (Hopcroft and Pansiot, 1979, VASS). 517 Figure 3: The labeled Petri net corresponding to the right linear MLIG of Example 2. circles depict places (representing MLIG nonterminals and indices) with black dots for initial tokens (representing the MLIG start symbol), boxes transitions (representing MLIG productions), and arcs the flow values. For instance, production (S,e3) → c (S,0) is represented by the rightmost, c-labeled transition, with f(S, t) = f(e3, t) = f(t, S) = 1 and f(e1, t) = f(e2,t) = f(t, e1) = f(t, e2) = f(t, e3) = 0. Extensions The subsumption of Petri nets is not innocuous, as it allows to derive lower b</context>
<context position="16220" citStr="Hopcroft and Pansiot (1979" startWordPosition="2939" endWordPosition="2942">al extensions of Petri net with some branching capacity (see e.g. Mayr, 1999; Haddad and Poitrenaud, 2007), two are of singular importance: It turns out that MLIGs in their full generality have since been independently rediscovered under the names vector addition tree automata (de Groote et al., 2004, VATA) and branching VASS (Verma and Goubault-Larrecq, 2005, BVASS). Semilinearity Another interesting consequence of the subsumption of Petri nets by MLIGs is that the former generate some non semilinear languages, i.e. with a Parikh image which is not a semilinear subset of N|Σ |(Parikh, 1966). Hopcroft and Pansiot (1979, Lemma 2.8) exhibit an example of a VASS with a non semilinear reachability set, which we translate as a 2-dimensional right linear MLIG with productions3 (S, e2) → (S, e1), (S, 0) → (A, 0) |(B, 0), (A, e1) → (A, 2e2), (A, 0) → a (S, 0), (B, e1) → b (B, 0) |b, (B, e2) → b (B, 0) |b 3Adding terminal symbols c in each production would result in a lexicalized grammar, still with a non semilinear language. Figure 4: An UVG-dl for Lmix. and (S, e2) as start symbol, that generates the non semilinear language Lnsm = {anb&apos; |0 ≤ n,0 &lt; m ≤ 2n} . Proposition 14 (Hopcroft and Pansiot, 1979). There exist </context>
</contexts>
<marker>Hopcroft, Pansiot, 1979</marker>
<rawString>John Hopcroft and Jean-Jacques Pansiot. 1979. On the reachability problem for 5-dimensional vector addition systems. Theoretical Computer Science, 8(2):135–159.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Dung T Huynh</author>
</authors>
<title>Commutative grammars: the complexity of uniform word problems.</title>
<date>1983</date>
<journal>Information and Control,</journal>
<volume>57</volume>
<issue>1</issue>
<contexts>
<context position="28846" citStr="Huynh, 1983" startWordPosition="5182" endWordPosition="5183">ecomes polynomial by Lemma 6. Observe finally that k-rankedness provides the only tractable class of MLIGs for uniform membership, using again Lemma 6 to obtain a CFG of polynomial size—actually exponential in k, but k is assumed to be fixed for this problem. An obvious lower bound is that of membership in CFGs, which is PTIME-complete (Jones and Laaser, 1976). 4.4 Lexicalized Case Unlike the high complexity lower bounds of the previous two sections, NPTIME-hardness results for uniform membership have been proved for a number of formalisms related to MLIGs, from the commutative CFG viewpoint (Huynh, 1983; Barton, 1985; Esparza, 1995), or from more specialized models (Søgaard et al., 2007; Champollion, 2007; Koller and Rambow, 2007). We focus here on this last proof, which reduces from the normal dominance graph configurability problem (Althaus et al., 2003), as it allows to derive NPTIME-hardness even in highly restricted grammars. Theorem 21 (Koller and Rambow, 2007). Uniform membership of (!9, w) for !9 a 1-bounded, lexicalized, UVG-dl with finite language is NPTIME-hard, even for |w |= 1. Proof sketch. Set 5 as start symbol and add a production 5 —* aA to the sole vector of the grammar !9 </context>
</contexts>
<marker>Huynh, 1983</marker>
<rawString>Dung T. Huynh. 1983. Commutative grammars: the complexity of uniform word problems. Information and Control, 57(1):21–39.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Matthias Jantzen</author>
</authors>
<title>On the hierarchy of Petri net languages.</title>
<date>1979</date>
<journal>RAIRO Theoretical Informatics and Applications,</journal>
<volume>13</volume>
<issue>1</issue>
<contexts>
<context position="30841" citStr="Jantzen, 1979" startWordPosition="5516" endWordPosition="5517">decidable. 5 Conclusion Grammatical formalisms with dominance links, introduced in particular to model scrambling phenomena in computational linguistics, have deep connections with several open questions in an unexpected variety of fields in computer science. We hope this survey to foster cross-fertilizing exchanges; for instance, is there a relation between 521 Conjecture 11 and the decidability of reachability in MLIGs? A similar question, whether the language Lpal of even 2-letters palindromes was a Petri net language, was indeed solved using the decidability of reachability in Petri nets (Jantzen, 1979), and shown to be strongly related to the latter (Lambert, 1992). A conclusion with a more immediate linguistic value is that MLIGs and UVG-dls hardly qualify as formalisms for mildly context-sensitive languages, claimed by Joshi (1985) to be adequate for modeling natural languages, and “roughly” defined as the extensions of context-free languages that display 1. support for limited cross-serial dependencies: seems doubtful, see Conjecture 11, 2. constant growth, a requisite nowadays replaced by semilinearity: does not hold, as seen with Proposition 14, and 3. polynomial recognition algorithms</context>
</contexts>
<marker>Jantzen, 1979</marker>
<rawString>Matthias Jantzen. 1979. On the hierarchy of Petri net languages. RAIRO Theoretical Informatics and Applications, 13(1):19–30.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Neil D Jones</author>
<author>William T Laaser</author>
</authors>
<title>Complete problems for deterministic polynomial time.</title>
<date>1976</date>
<journal>Theoretical Computer Science,</journal>
<volume>3</volume>
<issue>1</issue>
<contexts>
<context position="27544" citStr="Jones and Laaser, 1976" startWordPosition="4949" endWordPosition="4952">E (Rackoff, 1978) Petri net {Emptiness, Membership} EXPSPACE (Lipton, 1976) Decidable, not primitive recursive (Mayr, 1981; Kosaraju, 1982) {MLIG, MLIG¢} k-Boundedness EXPTIME (Corollary 20) EXPTIME (Corollary 20) {MLIG, MLIG¢} Boundedness 2EXPTIME (Demri et al., 2009) 2EXPTIME (Demri et al., 2009) {MLIG, MLIG¢} Emptiness 2EXPSPACE (Lazi´c, 2010) Not known to be decidable MLIG Membership {kb-MLIG, kb-MLIG¢} Emptiness EXPTIME (Theorem 19) EXPTIME (Theorem 19) kb-MLIG Membership {MLIG¢, kb-MLIG¢} Membership NPTIME (Koller and Rambow, 2007) NPTIME (trivial) kr-MLIG {Emptiness, Membership} PTIME (Jones and Laaser, 1976) PTIME (Lemma 6) Table 1: Summary of complexity results. For the upper bound, apply Lemma 8 with k&apos; = k + 1 to construct an O(|!9 |· 2n2 lo92(ki+1))-sized CFG, reduce it in polynomial time, and check whether a nonterminal (A, x) with x(i) = k&apos; for some 0 &lt; i &lt; n occurs in the reduced grammar. Note that the choice of the encoding of k is irrelevant, as k = 1 is enough for the lower bound, and k only logarithmically influences the exponent for the upper bound. Corollary 20 also implies the EXPTIMEcompleteness of k-rankedness, k encoded in unary, if k can take arbitrary values. On the other hand,</context>
</contexts>
<marker>Jones, Laaser, 1976</marker>
<rawString>Neil D. Jones and William T. Laaser. 1976. Complete problems for deterministic polynomial time. Theoretical Computer Science, 3(1):105–117.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Neil D Jones</author>
<author>Lawrence H Landweber</author>
<author>Y Edmund Lien</author>
</authors>
<title>Complexity of some problems in Petri nets.</title>
<date>1977</date>
<journal>Theoretical Computer Science,</journal>
<volume>4</volume>
<issue>3</issue>
<pages>299</pages>
<contexts>
<context position="25550" citStr="Jones et al., 1977" startWordPosition="4635" endWordPosition="4638">c (2010). If a decision procedure exists, we can expect it to be quite complex, as already in the Petri net case, the complexity of the known decision procedures (Mayr, 1981; Kosaraju, 1982) is not primitive recursive (Cardoza et al., 1976, who attribute the idea to Hack). 4.3 k-Bounded and k-Ranked Cases Since k-bounded MLIGs can be converted into CFGs (Lemma 8), emptiness and membership problems are decidable, albeit at the expense of an exponential blowup. We know from the Petri net literature that coverability and reachability problems are PSPACE-complete for k-bounded right linear MLIGs (Jones et al., 1977) by a reduction from linear bounded automaton (LBA) membership. We obtain the following for k-bounded MLIGs, using a similar reduction from membership in polynomially space bounded alternating Turing machines (Chandra et al., 1981, ATM): Theorem 19. Coverability and reachability for kbounded MLIGs are EXPTIME-complete, even for fixed k ≥ 1. The lower bound is obtained through an encoding of an instance of the membership problem for ATMs working in polynomial space into an instance of the coverability problem for 1-bounded MLIGs. The upper bound is a direct application of Lemma 8, coverability </context>
<context position="26839" citStr="Jones et al., 1977" startWordPosition="4856" endWordPosition="4859"> exponential size. Theorem 19 also shows the EXPTIME-hardness of emptiness and membership in minimalist grammars with SMC. Corollary 20. Let k ≥ 1; k-boundedness for MLIGs is EXPTIME-complete. Proof. For the lower bound, consider an instance hG, Fi of coverability for a 1-bounded MLIG G, which is EXPTIME-hard according to Theorem 19. Add to the MLIG G a fresh nonterminal E and the productions {(A, x) → (E, x) |(A, x) ∈ F} ∪ {(E, 0) → (E, ez) |0 &lt; i ≤ n} , which make it non k-bounded iff the coverability instance was positive. 520 Problem Lower bound Upper bound Petri net k-Boundedness PSPACE (Jones et al., 1977) PSPACE (Jones et al., 1977) Petri net Boundedness EXPSPACE (Lipton, 1976) EXPSPACE (Rackoff, 1978) Petri net {Emptiness, Membership} EXPSPACE (Lipton, 1976) Decidable, not primitive recursive (Mayr, 1981; Kosaraju, 1982) {MLIG, MLIG¢} k-Boundedness EXPTIME (Corollary 20) EXPTIME (Corollary 20) {MLIG, MLIG¢} Boundedness 2EXPTIME (Demri et al., 2009) 2EXPTIME (Demri et al., 2009) {MLIG, MLIG¢} Emptiness 2EXPSPACE (Lazi´c, 2010) Not known to be decidable MLIG Membership {kb-MLIG, kb-MLIG¢} Emptiness EXPTIME (Theorem 19) EXPTIME (Theorem 19) kb-MLIG Membership {MLIG¢, kb-MLIG¢} Membership NPTIME </context>
</contexts>
<marker>Jones, Landweber, Lien, 1977</marker>
<rawString>Neil D. Jones, Lawrence H. Landweber, and Y. Edmund Lien. 1977. Complexity of some problems in Petri nets. Theoretical Computer Science, 4(3):277– 299.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Aravind K Joshi</author>
<author>Tilman Becker</author>
<author>Owen Rambow</author>
</authors>
<title>Complexity of scrambling: A new twist to the competence-performance distinction.</title>
<date>2000</date>
<booktitle>In Anne Abeill´e and Owen Rambow, editors, Tree Adjoining Grammars. Formalisms, Linguistic Analysis and Processing, chapter 6,</booktitle>
<pages>167--181</pages>
<publisher>CSLI Publications.</publisher>
<contexts>
<context position="9414" citStr="Joshi et al., 2000" startWordPosition="1646" endWordPosition="1649">y properties: Definition 4. A terminal derivation a ⇒p w with w in E* is c-lexicalized for some c &gt; 0 if p ≤ c·|w|.1 A MLIG is lexicalized if there exists c such that any terminal derivation starting from (S, x0) is c-lexicalized, and we denote by L(MLIG`) the set of lexicalized MLIG languages. Looking at the grammar of Example 2, any terminal derivation (S, 0) ⇒p w verifies p = 4·|w| 3 + 1, and the grammar is thus lexicalized. Boundedness As dominance links model longdistance dependencies, bounding the number of simultaneously pending links can be motivated on competence/performance grounds (Joshi et al., 2000; Kallmeyer and Parmentier, 2008), and on complexity/expressiveness grounds (Søgaard et al., 2007; Kallmeyer and Parmentier, 2008; Chiang and Scheffler, 2008). The shortest move constraint (SMC) introduced by Stabler (1997) to enforce a strong form of minimality also falls into this category of restrictions. Definition 5. A MLIG derivation a0 ⇒ a1 ⇒ · · · ⇒ ap is of rank k for some k ≥ 0 if, no vector with a sum of components larger than k can appear in any aj, i.e. for all x in Nn such that there exist 0 ≤ j ≤ p, 6, 6&apos; in V * and A in N with aj = 6(A, x)6&apos;, one has Eni=1 x(i) ≤ k. A MLIG is k</context>
</contexts>
<marker>Joshi, Becker, Rambow, 2000</marker>
<rawString>Aravind K. Joshi, Tilman Becker, and Owen Rambow. 2000. Complexity of scrambling: A new twist to the competence-performance distinction. In Anne Abeill´e and Owen Rambow, editors, Tree Adjoining Grammars. Formalisms, Linguistic Analysis and Processing, chapter 6, pages 167–181. CSLI Publications.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Aravind K Joshi</author>
</authors>
<title>Tree-adjoining grammars: How much context sensitivity is required to provide reasonable structural descriptions? In</title>
<date>1985</date>
<booktitle>Natural Language Parsing: Psychological, Computational, and Theoretical Perspectives, chapter 6,</booktitle>
<pages>206--250</pages>
<editor>David R. Dowty, Lauri Karttunen, and Arnold M. Zwicky, editors,</editor>
<publisher>Cambridge University Press.</publisher>
<contexts>
<context position="31077" citStr="Joshi (1985)" startWordPosition="5556" endWordPosition="5557"> in computer science. We hope this survey to foster cross-fertilizing exchanges; for instance, is there a relation between 521 Conjecture 11 and the decidability of reachability in MLIGs? A similar question, whether the language Lpal of even 2-letters palindromes was a Petri net language, was indeed solved using the decidability of reachability in Petri nets (Jantzen, 1979), and shown to be strongly related to the latter (Lambert, 1992). A conclusion with a more immediate linguistic value is that MLIGs and UVG-dls hardly qualify as formalisms for mildly context-sensitive languages, claimed by Joshi (1985) to be adequate for modeling natural languages, and “roughly” defined as the extensions of context-free languages that display 1. support for limited cross-serial dependencies: seems doubtful, see Conjecture 11, 2. constant growth, a requisite nowadays replaced by semilinearity: does not hold, as seen with Proposition 14, and 3. polynomial recognition algorithms: holds only for restricted classes of grammars, as seen in Section 4. Nevertheless, variants such as k-ranked V-TAGs are easily seen to fulfill all the three points above. Acknowledgements Thanks to Pierre Chambart, St´ephane Demri, an</context>
</contexts>
<marker>Joshi, 1985</marker>
<rawString>Aravind K. Joshi. 1985. Tree-adjoining grammars: How much context sensitivity is required to provide reasonable structural descriptions? In David R. Dowty, Lauri Karttunen, and Arnold M. Zwicky, editors, Natural Language Parsing: Psychological, Computational, and Theoretical Perspectives, chapter 6, pages 206–250. Cambridge University Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Laura Kallmeyer</author>
<author>Yannick Parmentier</author>
</authors>
<title>On the relation between multicomponent tree adjoining grammars with tree tuples (TT-MCTAG) and range concatenation grammars (RCG).</title>
<date>2008</date>
<booktitle>of Lecture Notes in Computer Science,</booktitle>
<volume>5196</volume>
<pages>263--274</pages>
<editor>In Carlos MartinVide, Friedrich Otto, and Henning Fernau, editors, LATA’08,</editor>
<publisher>Springer.</publisher>
<contexts>
<context position="9447" citStr="Kallmeyer and Parmentier, 2008" startWordPosition="1650" endWordPosition="1653">tion 4. A terminal derivation a ⇒p w with w in E* is c-lexicalized for some c &gt; 0 if p ≤ c·|w|.1 A MLIG is lexicalized if there exists c such that any terminal derivation starting from (S, x0) is c-lexicalized, and we denote by L(MLIG`) the set of lexicalized MLIG languages. Looking at the grammar of Example 2, any terminal derivation (S, 0) ⇒p w verifies p = 4·|w| 3 + 1, and the grammar is thus lexicalized. Boundedness As dominance links model longdistance dependencies, bounding the number of simultaneously pending links can be motivated on competence/performance grounds (Joshi et al., 2000; Kallmeyer and Parmentier, 2008), and on complexity/expressiveness grounds (Søgaard et al., 2007; Kallmeyer and Parmentier, 2008; Chiang and Scheffler, 2008). The shortest move constraint (SMC) introduced by Stabler (1997) to enforce a strong form of minimality also falls into this category of restrictions. Definition 5. A MLIG derivation a0 ⇒ a1 ⇒ · · · ⇒ ap is of rank k for some k ≥ 0 if, no vector with a sum of components larger than k can appear in any aj, i.e. for all x in Nn such that there exist 0 ≤ j ≤ p, 6, 6&apos; in V * and A in N with aj = 6(A, x)6&apos;, one has Eni=1 x(i) ≤ k. A MLIG is k-ranked (noted kr-MLIG) if any de</context>
</contexts>
<marker>Kallmeyer, Parmentier, 2008</marker>
<rawString>Laura Kallmeyer and Yannick Parmentier. 2008. On the relation between multicomponent tree adjoining grammars with tree tuples (TT-MCTAG) and range concatenation grammars (RCG). In Carlos MartinVide, Friedrich Otto, and Henning Fernau, editors, LATA’08, volume 5196 of Lecture Notes in Computer Science, pages 263–274. Springer.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Laura Kallmeyer</author>
</authors>
<title>Local tree description grammars.</title>
<date>2001</date>
<journal>Grammars,</journal>
<volume>4</volume>
<issue>2</issue>
<contexts>
<context position="2200" citStr="Kallmeyer, 2001" startWordPosition="344" endWordPosition="345">rmalism, unordered vector grammars with dominance links (UVG-dls), for modeling such phenomena. These grammars are defined by vectors of contextfree productions along with dominance links that Figure 1: A vector of productions for the verb repariert together with its two complements. should be enforced during derivations; for instance, Figure 1 shows how a flexible order between the complements of repariert could be expressed in an UVG-dl. Similar dominance mechanisms have been employed in various tree description formalisms (Rambow et al., 1995; Rambow et al., 2001; Candito and Kahane, 1998; Kallmeyer, 2001; Guillaume and Perrier, 2010) and TAG extensions (Becker et al., 1991; Rambow, 1994a). However, the prime motivation for this survey is another grammatical formalism defined in the same article: multiset-valued linear indexed grammars (Rambow, 1994b, MLIGs), which can be seen as a low-level variant of UVG-dls that uses multisets to emulate unfulfilled dominance links in partial derivations. It is a natural extension of Petri nets, with broader scope than just UVG-dls; indeed, it has been independently rediscovered by de Groote et al. (2004) in the context of linear logic, and by Verma and Gou</context>
<context position="17025" citStr="Kallmeyer (2001)" startWordPosition="3093" endWordPosition="3094">) |(B, 0), (A, e1) → (A, 2e2), (A, 0) → a (S, 0), (B, e1) → b (B, 0) |b, (B, e2) → b (B, 0) |b 3Adding terminal symbols c in each production would result in a lexicalized grammar, still with a non semilinear language. Figure 4: An UVG-dl for Lmix. and (S, e2) as start symbol, that generates the non semilinear language Lnsm = {anb&apos; |0 ≤ n,0 &lt; m ≤ 2n} . Proposition 14 (Hopcroft and Pansiot, 1979). There exist non semilinear Petri nets languages. The non semilinearity of MLIGs entails that of all the grammatical formalisms mentioned next in Section 3.2; this answers in particular a conjecture by Kallmeyer (2001) about the semilinearity of VTAGs. 3.2 Dominance Links UVG-dl Rambow (1994b) introduced UVG-dls as a formal model for scrambling and tree description grammars. Definition 15 (Rambow, 1994b). An unordered vector grammars with dominance links (UVG-dl) is a tuple G = hN, E, W, Si where N and E are disjoint finite sets of nonterminals and terminals, V = N ∪ E is the vocabulary, W is a set of vectors of productions with dominance links, i.e. each element of W is a pair (P, D) where each P is a multiset of productions in N × V * and D is a relation from nonterminals in the right parts of productions</context>
<context position="20813" citStr="Kallmeyer, 2001" startWordPosition="3810" endWordPosition="3811">now its usual definition: for every vector ({pi,1, ... , pi,ki}, Di) in W, at least one of the pi,j should contain at least one terminal in its right part—we have then G(UVG-dlt) C G(MLIGt). More on Dominance Links Dominance links are quite common in tree description formalisms, where they were already in use in D-theory (Marcus et al., 1983) and in quasi-tree semantics for fbTAGs (Vijay-Shanker, 1992). In particular, D-tree substitution grammars are essentially the same as UVG-dls (Rambow et al., 2001), and quite a few other tree description formalisms subsume them (Candito and Kahane, 1998; Kallmeyer, 2001; Guillaume and Perrier, 2010). Another class of grammars are vector TAGs (V-TAGs), which extend TAGs and MCTAGs using dominance links (Becker et al., 1991; Rambow, 1994a; Champollion, 2007), subsuming again UVG-dls. 4 Computational Complexity We study in this section the complexity of several decision problems on MLIGs, prominently of emptiness and membership problems, in the general (Section 4.2), k-bounded (Section 4.3), and lexicalized cases (Section 4.4). Table 1 sums up the known complexity results. Since by Theorem 16 we can translate between MLIGs and UVG-dls in logarithmic space, the </context>
</contexts>
<marker>Kallmeyer, 2001</marker>
<rawString>Laura Kallmeyer. 2001. Local tree description grammars. Grammars, 4(2):85–137.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Richard M Karp</author>
<author>Raymond E Miller</author>
</authors>
<title>Parallel program schemata.</title>
<date>1969</date>
<journal>Journal of Computer and System Sciences,</journal>
<volume>3</volume>
<issue>2</issue>
<contexts>
<context position="14861" citStr="Karp and Miller, 1969" startWordPosition="2717" endWordPosition="2720">* by m [E) m, and m [at) m&apos; if there exists m&apos;&apos; with m [a) m&apos;&apos; [t) m&apos;. A labeled Petri net with reachability acceptance is endowed with a labeling homomorphism co : T* —* E* and a finite acceptance set F C NS, defining the language (Peterson, 1981) L(N, co, F) = {co(a) E E* I Im E F, m0 [a) m} . Labeled Petri nets (with acceptance set {0}) are notational variants of right linear MLIGs, defined as having production in (NxNn)x(E*U(E*·(Nx Nn))). This is is case of the MLIG of Example 2, which is given in Petri net form in Figure 3, where 2Petri nets are also equivalent to vector addition system (Karp and Miller, 1969, VAS) and vector addition systems with states (Hopcroft and Pansiot, 1979, VASS). 517 Figure 3: The labeled Petri net corresponding to the right linear MLIG of Example 2. circles depict places (representing MLIG nonterminals and indices) with black dots for initial tokens (representing the MLIG start symbol), boxes transitions (representing MLIG productions), and arcs the flow values. For instance, production (S,e3) → c (S,0) is represented by the rightmost, c-labeled transition, with f(S, t) = f(e3, t) = f(t, S) = 1 and f(e1, t) = f(e2,t) = f(t, e1) = f(t, e2) = f(t, e3) = 0. Extensions The </context>
<context position="24479" citStr="Karp and Miller (1969)" startWordPosition="4464" endWordPosition="4467">) → a ∈ P, a ∈ E∪{E}}, and then remove all terminal productions in order to obtain a reachability instance hG0, Fi. For (3), from a non emptiness instance hGi, replace all terminals in G by E to obtain an empty word membership instance hG0, Ei. Conversely, from a membership instance hG, wi, construct the intersection grammar G0 with L(G0) = L(G)∩{w} (Bar-Hillel et al., 1961), which serves as non emptiness instance hG0i. 4.2 General Case Verma and Goubault-Larrecq (2005) were the first to prove that coverability and boundedness were decidable for BVASS, using a covering tree construction a` la Karp and Miller (1969), thus of non primitive recursive complexity. Demri et al. (2009, Theorems 7, 17, and 18) recently proved tight complexity bounds for these problems, extending earlier results by Rackoff (1978) and Lipton (1976) for Petri nets. Theorem 18 (Demri et al., 2009). Coverability and boundedness for MLIGs are 2EXPTIMEcomplete. Regarding reachability, emptiness, and membership, decidability is still open. A 2EXPSPACE lower bound was recently found by Lazi´c (2010). If a decision procedure exists, we can expect it to be quite complex, as already in the Petri net case, the complexity of the known decisi</context>
</contexts>
<marker>Karp, Miller, 1969</marker>
<rawString>Richard M. Karp and Raymond E. Miller. 1969. Parallel program schemata. Journal of Computer and System Sciences, 3(2):147–195.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Alexander Koller</author>
<author>Owen Rambow</author>
</authors>
<title>Relating dominance formalisms.</title>
<date>2007</date>
<booktitle>In FG’07.</booktitle>
<contexts>
<context position="27464" citStr="Koller and Rambow, 2007" startWordPosition="4939" endWordPosition="4942">PSPACE (Jones et al., 1977) Petri net Boundedness EXPSPACE (Lipton, 1976) EXPSPACE (Rackoff, 1978) Petri net {Emptiness, Membership} EXPSPACE (Lipton, 1976) Decidable, not primitive recursive (Mayr, 1981; Kosaraju, 1982) {MLIG, MLIG¢} k-Boundedness EXPTIME (Corollary 20) EXPTIME (Corollary 20) {MLIG, MLIG¢} Boundedness 2EXPTIME (Demri et al., 2009) 2EXPTIME (Demri et al., 2009) {MLIG, MLIG¢} Emptiness 2EXPSPACE (Lazi´c, 2010) Not known to be decidable MLIG Membership {kb-MLIG, kb-MLIG¢} Emptiness EXPTIME (Theorem 19) EXPTIME (Theorem 19) kb-MLIG Membership {MLIG¢, kb-MLIG¢} Membership NPTIME (Koller and Rambow, 2007) NPTIME (trivial) kr-MLIG {Emptiness, Membership} PTIME (Jones and Laaser, 1976) PTIME (Lemma 6) Table 1: Summary of complexity results. For the upper bound, apply Lemma 8 with k&apos; = k + 1 to construct an O(|!9 |· 2n2 lo92(ki+1))-sized CFG, reduce it in polynomial time, and check whether a nonterminal (A, x) with x(i) = k&apos; for some 0 &lt; i &lt; n occurs in the reduced grammar. Note that the choice of the encoding of k is irrelevant, as k = 1 is enough for the lower bound, and k only logarithmically influences the exponent for the upper bound. Corollary 20 also implies the EXPTIMEcompleteness of k-ra</context>
<context position="28976" citStr="Koller and Rambow, 2007" startWordPosition="5202" endWordPosition="5205">m membership, using again Lemma 6 to obtain a CFG of polynomial size—actually exponential in k, but k is assumed to be fixed for this problem. An obvious lower bound is that of membership in CFGs, which is PTIME-complete (Jones and Laaser, 1976). 4.4 Lexicalized Case Unlike the high complexity lower bounds of the previous two sections, NPTIME-hardness results for uniform membership have been proved for a number of formalisms related to MLIGs, from the commutative CFG viewpoint (Huynh, 1983; Barton, 1985; Esparza, 1995), or from more specialized models (Søgaard et al., 2007; Champollion, 2007; Koller and Rambow, 2007). We focus here on this last proof, which reduces from the normal dominance graph configurability problem (Althaus et al., 2003), as it allows to derive NPTIME-hardness even in highly restricted grammars. Theorem 21 (Koller and Rambow, 2007). Uniform membership of (!9, w) for !9 a 1-bounded, lexicalized, UVG-dl with finite language is NPTIME-hard, even for |w |= 1. Proof sketch. Set 5 as start symbol and add a production 5 —* aA to the sole vector of the grammar !9 constructed by Koller and Rambow (2007) from a normal dominance graph, with dominance links to all the other productions. Then !9 </context>
</contexts>
<marker>Koller, Rambow, 2007</marker>
<rawString>Alexander Koller and Owen Rambow. 2007. Relating dominance formalisms. In FG’07.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Rao Kosaraju</author>
</authors>
<title>Decidability of reachability in vector addition systems.</title>
<date>1982</date>
<booktitle>In STOC’82,</booktitle>
<pages>267--281</pages>
<publisher>ACM Press.</publisher>
<contexts>
<context position="25121" citStr="Kosaraju, 1982" startWordPosition="4569" endWordPosition="4570">ursive complexity. Demri et al. (2009, Theorems 7, 17, and 18) recently proved tight complexity bounds for these problems, extending earlier results by Rackoff (1978) and Lipton (1976) for Petri nets. Theorem 18 (Demri et al., 2009). Coverability and boundedness for MLIGs are 2EXPTIMEcomplete. Regarding reachability, emptiness, and membership, decidability is still open. A 2EXPSPACE lower bound was recently found by Lazi´c (2010). If a decision procedure exists, we can expect it to be quite complex, as already in the Petri net case, the complexity of the known decision procedures (Mayr, 1981; Kosaraju, 1982) is not primitive recursive (Cardoza et al., 1976, who attribute the idea to Hack). 4.3 k-Bounded and k-Ranked Cases Since k-bounded MLIGs can be converted into CFGs (Lemma 8), emptiness and membership problems are decidable, albeit at the expense of an exponential blowup. We know from the Petri net literature that coverability and reachability problems are PSPACE-complete for k-bounded right linear MLIGs (Jones et al., 1977) by a reduction from linear bounded automaton (LBA) membership. We obtain the following for k-bounded MLIGs, using a similar reduction from membership in polynomially spac</context>
<context position="27060" citStr="Kosaraju, 1982" startWordPosition="4887" endWordPosition="4888">ider an instance hG, Fi of coverability for a 1-bounded MLIG G, which is EXPTIME-hard according to Theorem 19. Add to the MLIG G a fresh nonterminal E and the productions {(A, x) → (E, x) |(A, x) ∈ F} ∪ {(E, 0) → (E, ez) |0 &lt; i ≤ n} , which make it non k-bounded iff the coverability instance was positive. 520 Problem Lower bound Upper bound Petri net k-Boundedness PSPACE (Jones et al., 1977) PSPACE (Jones et al., 1977) Petri net Boundedness EXPSPACE (Lipton, 1976) EXPSPACE (Rackoff, 1978) Petri net {Emptiness, Membership} EXPSPACE (Lipton, 1976) Decidable, not primitive recursive (Mayr, 1981; Kosaraju, 1982) {MLIG, MLIG¢} k-Boundedness EXPTIME (Corollary 20) EXPTIME (Corollary 20) {MLIG, MLIG¢} Boundedness 2EXPTIME (Demri et al., 2009) 2EXPTIME (Demri et al., 2009) {MLIG, MLIG¢} Emptiness 2EXPSPACE (Lazi´c, 2010) Not known to be decidable MLIG Membership {kb-MLIG, kb-MLIG¢} Emptiness EXPTIME (Theorem 19) EXPTIME (Theorem 19) kb-MLIG Membership {MLIG¢, kb-MLIG¢} Membership NPTIME (Koller and Rambow, 2007) NPTIME (trivial) kr-MLIG {Emptiness, Membership} PTIME (Jones and Laaser, 1976) PTIME (Lemma 6) Table 1: Summary of complexity results. For the upper bound, apply Lemma 8 with k&apos; = k + 1 to const</context>
</contexts>
<marker>Kosaraju, 1982</marker>
<rawString>S. Rao Kosaraju. 1982. Decidability of reachability in vector addition systems. In STOC’82, pages 267– 281. ACM Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Anthony S Kroch</author>
<author>Beatrice Santorini</author>
</authors>
<title>The derived constituent structure of the West Germanic verb-raising construction.</title>
<date>1991</date>
<booktitle>Principles and Parameters in Comparative Grammar, chapter 10,</booktitle>
<pages>269--338</pages>
<editor>In Robert Freidin, editor,</editor>
<publisher>MIT Press.</publisher>
<contexts>
<context position="12995" citStr="Kroch and Santorini, 1991" startWordPosition="2347" endWordPosition="2351"> that the grammar of Example 2 is not bounded (to see this, repeatedly apply production (S, 0) —* (S,1)), as expected since MIX is not a context-free language. 2.3 Language Properties Let us mention a few more results pertaining to MLIG languages: Proposition 9 (Rambow, 1994b). L(MLIG) is a substitution closed full abstract family of languages. Proposition 10 (Rambow, 1994b). L(MLIGt) is a subset of the context-sensitive languages. Natural languages are known for displaying some limited cross-serial dependencies, as witnessed in linguistic analyses, e.g. of SwissGerman (Shieber, 1985), Dutch (Kroch and Santorini, 1991), or Tagalog (Maclachlan and Rambow, 2002). This includes the copy language Lcopy = {ww I w E {a, b}*} , which does not seem to be generated by any MLIG: Conjecture 11 (Rambow, 1994b). Loopy is not in L(MLIG). Finally, we obtain the following result as a consequence of Lemmas 6 and 8: Corollary 12. L(kr-MLIG) = L(kb-MLIG) = L(kb-MLIGt) is the set of context-free languages. 3 Related Formalisms We review formalisms connected to MLIGs, starting in Section 3.1 with Petri nets and two of their extensions, which turn out to be exactly equivalent to MLIGs. We then consider various linguistic formali</context>
</contexts>
<marker>Kroch, Santorini, 1991</marker>
<rawString>Anthony S. Kroch and Beatrice Santorini. 1991. The derived constituent structure of the West Germanic verb-raising construction. In Robert Freidin, editor, Principles and Parameters in Comparative Grammar, chapter 10, pages 269–338. MIT Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jean-Luc Lambert</author>
</authors>
<title>A structure to decide reachability in Petri nets.</title>
<date>1992</date>
<journal>Theoretical Computer Science,</journal>
<volume>99</volume>
<issue>1</issue>
<contexts>
<context position="30905" citStr="Lambert, 1992" startWordPosition="5528" endWordPosition="5529">nks, introduced in particular to model scrambling phenomena in computational linguistics, have deep connections with several open questions in an unexpected variety of fields in computer science. We hope this survey to foster cross-fertilizing exchanges; for instance, is there a relation between 521 Conjecture 11 and the decidability of reachability in MLIGs? A similar question, whether the language Lpal of even 2-letters palindromes was a Petri net language, was indeed solved using the decidability of reachability in Petri nets (Jantzen, 1979), and shown to be strongly related to the latter (Lambert, 1992). A conclusion with a more immediate linguistic value is that MLIGs and UVG-dls hardly qualify as formalisms for mildly context-sensitive languages, claimed by Joshi (1985) to be adequate for modeling natural languages, and “roughly” defined as the extensions of context-free languages that display 1. support for limited cross-serial dependencies: seems doubtful, see Conjecture 11, 2. constant growth, a requisite nowadays replaced by semilinearity: does not hold, as seen with Proposition 14, and 3. polynomial recognition algorithms: holds only for restricted classes of grammars, as seen in Sect</context>
</contexts>
<marker>Lambert, 1992</marker>
<rawString>Jean-Luc Lambert. 1992. A structure to decide reachability in Petri nets. Theoretical Computer Science, 99(1):79–104.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Bernard Lang</author>
</authors>
<title>Recognition can be harder than parsing.</title>
<date>1994</date>
<journal>Computational Intelligence,</journal>
<volume>10</volume>
<issue>4</issue>
<pages>494</pages>
<contexts>
<context position="22782" citStr="Lang, 1994" startWordPosition="4170" endWordPosition="4171">finite subset of N x Nn, does there exist a = (A1, y1) · · · (Am, ym) in F* such that (S, x0) ==&gt;.* a? non emptiness given (!9), is L(!9) non empty? (uniform) membership given (!9, w), w in E*, does w belong to L(!9)? Boundedness and k-boundedness are needed in order to prove that a grammar is bounded, and to apply the smaller complexities of Section 4.3. Coverability is often considered for Petri nets, and allows to derive lower bounds on reachability. Emptiness is the most basic static 519 analysis one might want to perform on a grammar, and is needed for parsing as intersection approaches (Lang, 1994), while membership reduces to parsing. Note that we only consider uniform membership, since grammars for natural languages are typically considerably larger than input sentences, and their influence can hardly be neglected. There are several obvious reductions between reachability, emptiness, and membership. Let →log denote LOGSPACE reductions between decision problems; we have: Proposition 17. coverability →log reachability (1) ↔log non emptiness (2) ↔log membership (3) Proof sketch. For (1), construct a reachability instance hG0, {(E, 0)}i from a coverability instance hG, Fi by adding to G a</context>
</contexts>
<marker>Lang, 1994</marker>
<rawString>Bernard Lang. 1994. Recognition can be harder than parsing. Computational Intelligence, 10(4):486– 494.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ranko Lazi´c</author>
</authors>
<title>The reachability problem for branching vector addition systems requires doublyexponential space.</title>
<date>2010</date>
<tech>Manuscript.</tech>
<marker>Lazi´c, 2010</marker>
<rawString>Ranko Lazi´c. 2010. The reachability problem for branching vector addition systems requires doublyexponential space. Manuscript.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Timm Lichte</author>
</authors>
<title>An MCTAG with tuples for coherent constructions in German.</title>
<date>2007</date>
<booktitle>In FG’07.</booktitle>
<contexts>
<context position="957" citStr="Lichte, 2007" startWordPosition="151" endWordPosition="152">multiset-valued linear indexed grammars (MLIGs) by Rambow (1994b), and inspiring quite a few recent formalisms. It turns out that MLIGs have since been rediscovered and reused in a variety of contexts, and that the complexity of their emptiness problem has become the key to several open questions in computer science. We survey complexity results and open issues on MLIGs and related formalisms, and provide new complexity bounds for some linguistically motivated restrictions. 1 Introduction Scrambling constructions, as found in German and other SOV languages (Becker et al., 1991; Rambow, 1994a; Lichte, 2007), cause notorious difficulties to linguistic modeling in classical grammar formalisms like HPSG or TAG. A well-known illustration of this situation is given in the following two German sentences for “that Peter has repaired the fridge today” (Lichte, 2007), dass [Peter] heute [den K¨uhlschrank] repariert hat that Peternom today the fridgeacc repaired has dass [den K¨uhlschrank] heute [Peter] repariert hat that the fridgeacc today Peternom repaired has with a flexible word order between the two complements of repariert, namely between the nominative Peter and the accusative den K¨uhlschrank. Ra</context>
</contexts>
<marker>Lichte, 2007</marker>
<rawString>Timm Lichte. 2007. An MCTAG with tuples for coherent constructions in German. In FG’07.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Richard Lipton</author>
</authors>
<title>The reachability problem requires exponential space.</title>
<date>1976</date>
<tech>Technical Report 62,</tech>
<institution>Yale University.</institution>
<contexts>
<context position="24690" citStr="Lipton (1976)" startWordPosition="4499" endWordPosition="4501">ership instance hG0, Ei. Conversely, from a membership instance hG, wi, construct the intersection grammar G0 with L(G0) = L(G)∩{w} (Bar-Hillel et al., 1961), which serves as non emptiness instance hG0i. 4.2 General Case Verma and Goubault-Larrecq (2005) were the first to prove that coverability and boundedness were decidable for BVASS, using a covering tree construction a` la Karp and Miller (1969), thus of non primitive recursive complexity. Demri et al. (2009, Theorems 7, 17, and 18) recently proved tight complexity bounds for these problems, extending earlier results by Rackoff (1978) and Lipton (1976) for Petri nets. Theorem 18 (Demri et al., 2009). Coverability and boundedness for MLIGs are 2EXPTIMEcomplete. Regarding reachability, emptiness, and membership, decidability is still open. A 2EXPSPACE lower bound was recently found by Lazi´c (2010). If a decision procedure exists, we can expect it to be quite complex, as already in the Petri net case, the complexity of the known decision procedures (Mayr, 1981; Kosaraju, 1982) is not primitive recursive (Cardoza et al., 1976, who attribute the idea to Hack). 4.3 k-Bounded and k-Ranked Cases Since k-bounded MLIGs can be converted into CFGs (Le</context>
<context position="26913" citStr="Lipton, 1976" startWordPosition="4869" endWordPosition="4870">embership in minimalist grammars with SMC. Corollary 20. Let k ≥ 1; k-boundedness for MLIGs is EXPTIME-complete. Proof. For the lower bound, consider an instance hG, Fi of coverability for a 1-bounded MLIG G, which is EXPTIME-hard according to Theorem 19. Add to the MLIG G a fresh nonterminal E and the productions {(A, x) → (E, x) |(A, x) ∈ F} ∪ {(E, 0) → (E, ez) |0 &lt; i ≤ n} , which make it non k-bounded iff the coverability instance was positive. 520 Problem Lower bound Upper bound Petri net k-Boundedness PSPACE (Jones et al., 1977) PSPACE (Jones et al., 1977) Petri net Boundedness EXPSPACE (Lipton, 1976) EXPSPACE (Rackoff, 1978) Petri net {Emptiness, Membership} EXPSPACE (Lipton, 1976) Decidable, not primitive recursive (Mayr, 1981; Kosaraju, 1982) {MLIG, MLIG¢} k-Boundedness EXPTIME (Corollary 20) EXPTIME (Corollary 20) {MLIG, MLIG¢} Boundedness 2EXPTIME (Demri et al., 2009) 2EXPTIME (Demri et al., 2009) {MLIG, MLIG¢} Emptiness 2EXPSPACE (Lazi´c, 2010) Not known to be decidable MLIG Membership {kb-MLIG, kb-MLIG¢} Emptiness EXPTIME (Theorem 19) EXPTIME (Theorem 19) kb-MLIG Membership {MLIG¢, kb-MLIG¢} Membership NPTIME (Koller and Rambow, 2007) NPTIME (trivial) kr-MLIG {Emptiness, Membership}</context>
</contexts>
<marker>Lipton, 1976</marker>
<rawString>Richard Lipton. 1976. The reachability problem requires exponential space. Technical Report 62, Yale University.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Anna Maclachlan</author>
<author>Owen Rambow</author>
</authors>
<title>Crossserial dependencies in Tagalog. In</title>
<date>2002</date>
<booktitle>TAG+6,</booktitle>
<pages>100--107</pages>
<contexts>
<context position="13037" citStr="Maclachlan and Rambow, 2002" startWordPosition="2354" endWordPosition="2358">unded (to see this, repeatedly apply production (S, 0) —* (S,1)), as expected since MIX is not a context-free language. 2.3 Language Properties Let us mention a few more results pertaining to MLIG languages: Proposition 9 (Rambow, 1994b). L(MLIG) is a substitution closed full abstract family of languages. Proposition 10 (Rambow, 1994b). L(MLIGt) is a subset of the context-sensitive languages. Natural languages are known for displaying some limited cross-serial dependencies, as witnessed in linguistic analyses, e.g. of SwissGerman (Shieber, 1985), Dutch (Kroch and Santorini, 1991), or Tagalog (Maclachlan and Rambow, 2002). This includes the copy language Lcopy = {ww I w E {a, b}*} , which does not seem to be generated by any MLIG: Conjecture 11 (Rambow, 1994b). Loopy is not in L(MLIG). Finally, we obtain the following result as a consequence of Lemmas 6 and 8: Corollary 12. L(kr-MLIG) = L(kb-MLIG) = L(kb-MLIGt) is the set of context-free languages. 3 Related Formalisms We review formalisms connected to MLIGs, starting in Section 3.1 with Petri nets and two of their extensions, which turn out to be exactly equivalent to MLIGs. We then consider various linguistic formalisms that employ dominance links (Section 3</context>
</contexts>
<marker>Maclachlan, Rambow, 2002</marker>
<rawString>Anna Maclachlan and Owen Rambow. 2002. Crossserial dependencies in Tagalog. In TAG+6, pages 100–107.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mitchell P Marcus</author>
<author>Donald Hindle</author>
<author>Margaret M Fleck</author>
</authors>
<title>D-theory: talking about talking about trees.</title>
<date>1983</date>
<booktitle>In ACL’83,</booktitle>
<pages>129--136</pages>
<publisher>ACL Press.</publisher>
<contexts>
<context position="20542" citStr="Marcus et al., 1983" startWordPosition="3767" endWordPosition="3771">converse inclusion and its complexity are immediate when considering strict UVG-dls. The restrictions to k-ranked and k-bounded grammars find natural counterparts in strict UVGdls by bounding the (total) number of pending dominance links in any derivation. Lexicalization has now its usual definition: for every vector ({pi,1, ... , pi,ki}, Di) in W, at least one of the pi,j should contain at least one terminal in its right part—we have then G(UVG-dlt) C G(MLIGt). More on Dominance Links Dominance links are quite common in tree description formalisms, where they were already in use in D-theory (Marcus et al., 1983) and in quasi-tree semantics for fbTAGs (Vijay-Shanker, 1992). In particular, D-tree substitution grammars are essentially the same as UVG-dls (Rambow et al., 2001), and quite a few other tree description formalisms subsume them (Candito and Kahane, 1998; Kallmeyer, 2001; Guillaume and Perrier, 2010). Another class of grammars are vector TAGs (V-TAGs), which extend TAGs and MCTAGs using dominance links (Becker et al., 1991; Rambow, 1994a; Champollion, 2007), subsuming again UVG-dls. 4 Computational Complexity We study in this section the complexity of several decision problems on MLIGs, promin</context>
</contexts>
<marker>Marcus, Hindle, Fleck, 1983</marker>
<rawString>Mitchell P. Marcus, Donald Hindle, and Margaret M. Fleck. 1983. D-theory: talking about talking about trees. In ACL’83, pages 129–136. ACL Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ernst W Mayr</author>
</authors>
<title>An algorithm for the general Petri net reachability problem.</title>
<date>1981</date>
<booktitle>In STOC’81,</booktitle>
<pages>238--246</pages>
<publisher>ACM Press.</publisher>
<contexts>
<context position="25104" citStr="Mayr, 1981" startWordPosition="4567" endWordPosition="4568">rimitive recursive complexity. Demri et al. (2009, Theorems 7, 17, and 18) recently proved tight complexity bounds for these problems, extending earlier results by Rackoff (1978) and Lipton (1976) for Petri nets. Theorem 18 (Demri et al., 2009). Coverability and boundedness for MLIGs are 2EXPTIMEcomplete. Regarding reachability, emptiness, and membership, decidability is still open. A 2EXPSPACE lower bound was recently found by Lazi´c (2010). If a decision procedure exists, we can expect it to be quite complex, as already in the Petri net case, the complexity of the known decision procedures (Mayr, 1981; Kosaraju, 1982) is not primitive recursive (Cardoza et al., 1976, who attribute the idea to Hack). 4.3 k-Bounded and k-Ranked Cases Since k-bounded MLIGs can be converted into CFGs (Lemma 8), emptiness and membership problems are decidable, albeit at the expense of an exponential blowup. We know from the Petri net literature that coverability and reachability problems are PSPACE-complete for k-bounded right linear MLIGs (Jones et al., 1977) by a reduction from linear bounded automaton (LBA) membership. We obtain the following for k-bounded MLIGs, using a similar reduction from membership in </context>
<context position="27043" citStr="Mayr, 1981" startWordPosition="4885" endWordPosition="4886"> bound, consider an instance hG, Fi of coverability for a 1-bounded MLIG G, which is EXPTIME-hard according to Theorem 19. Add to the MLIG G a fresh nonterminal E and the productions {(A, x) → (E, x) |(A, x) ∈ F} ∪ {(E, 0) → (E, ez) |0 &lt; i ≤ n} , which make it non k-bounded iff the coverability instance was positive. 520 Problem Lower bound Upper bound Petri net k-Boundedness PSPACE (Jones et al., 1977) PSPACE (Jones et al., 1977) Petri net Boundedness EXPSPACE (Lipton, 1976) EXPSPACE (Rackoff, 1978) Petri net {Emptiness, Membership} EXPSPACE (Lipton, 1976) Decidable, not primitive recursive (Mayr, 1981; Kosaraju, 1982) {MLIG, MLIG¢} k-Boundedness EXPTIME (Corollary 20) EXPTIME (Corollary 20) {MLIG, MLIG¢} Boundedness 2EXPTIME (Demri et al., 2009) 2EXPTIME (Demri et al., 2009) {MLIG, MLIG¢} Emptiness 2EXPSPACE (Lazi´c, 2010) Not known to be decidable MLIG Membership {kb-MLIG, kb-MLIG¢} Emptiness EXPTIME (Theorem 19) EXPTIME (Theorem 19) kb-MLIG Membership {MLIG¢, kb-MLIG¢} Membership NPTIME (Koller and Rambow, 2007) NPTIME (trivial) kr-MLIG {Emptiness, Membership} PTIME (Jones and Laaser, 1976) PTIME (Lemma 6) Table 1: Summary of complexity results. For the upper bound, apply Lemma 8 with k&apos;</context>
</contexts>
<marker>Mayr, 1981</marker>
<rawString>Ernst W. Mayr. 1981. An algorithm for the general Petri net reachability problem. In STOC’81, pages 238–246. ACM Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Richard Mayr</author>
</authors>
<title>Process rewrite systems.</title>
<date>1999</date>
<journal>Information and Computation,</journal>
<pages>156--1</pages>
<contexts>
<context position="15670" citStr="Mayr, 1999" startWordPosition="2856" endWordPosition="2857">esenting MLIG nonterminals and indices) with black dots for initial tokens (representing the MLIG start symbol), boxes transitions (representing MLIG productions), and arcs the flow values. For instance, production (S,e3) → c (S,0) is represented by the rightmost, c-labeled transition, with f(S, t) = f(e3, t) = f(t, S) = 1 and f(e1, t) = f(e2,t) = f(t, e1) = f(t, e2) = f(t, e3) = 0. Extensions The subsumption of Petri nets is not innocuous, as it allows to derive lower bounds on the computational complexity of MLIGs. Among several extensions of Petri net with some branching capacity (see e.g. Mayr, 1999; Haddad and Poitrenaud, 2007), two are of singular importance: It turns out that MLIGs in their full generality have since been independently rediscovered under the names vector addition tree automata (de Groote et al., 2004, VATA) and branching VASS (Verma and Goubault-Larrecq, 2005, BVASS). Semilinearity Another interesting consequence of the subsumption of Petri nets by MLIGs is that the former generate some non semilinear languages, i.e. with a Parikh image which is not a semilinear subset of N|Σ |(Parikh, 1966). Hopcroft and Pansiot (1979, Lemma 2.8) exhibit an example of a VASS with a n</context>
</contexts>
<marker>Mayr, 1999</marker>
<rawString>Richard Mayr. 1999. Process rewrite systems. Information and Computation, 156(1–2):264–286.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Christos H Papadimitriou</author>
</authors>
<date>1994</date>
<journal>Computational Complexity. Addison-Wesley.</journal>
<contexts>
<context position="5709" citStr="Papadimitriou, 1994" startWordPosition="919" endWordPosition="920">malized as a subset of E*. Let Nn denote the set of vectors of positive integers of dimension n. The i-th component of a vector x in Nn is x(i), 0 denotes the null vector, 1 the vector with 1 values, and ei the vector with 1 as its i-th component and 0 everywhere else. The ordering ≤ on Nn is the componentwise ordering: x ≤ y iff x(i) ≤ y(i) for all 0 &lt; i ≤ n. The size of a vector refers to the size of its binary encoding: |x |= Pni=1 1 + max(0, blo92 x(i)c). We refer the reader unfamiliar with complexity classes and notions such as hardness or LOGSPACE reductions to classical textbooks (e.g. Papadimitriou, 1994). 2 Multiset-Valued Linear Indexed Grammars Definition 1 (Rambow, 1994b). An ndimensional multiset-valued linear indexed grammar (MLIG) is a tuple G = hN, E, P, (5, x0)i where N is a finite set of nonterminal symbols, E a finite alphabet disjoint from N, V = (N ×Nn)]E the vocabulary, P a finite set of productions in (N × Nn) × V *, and (5, x0) ∈ N × Nn the start symbol. Productions are more easily written as (A,x) → u0(B1,x1)u1 ··· um(Bm,xm)um+1 (*) with each ui in E* and each (Bi, xi) in N × Nn. The derivation relation ⇒ over sequences in V * is defined by S(A,y)S&apos; ⇒ Su0(B1,y1)u1 ··· um(Bm,ym</context>
</contexts>
<marker>Papadimitriou, 1994</marker>
<rawString>Christos H. Papadimitriou. 1994. Computational Complexity. Addison-Wesley.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Rohit J Parikh</author>
</authors>
<title>On context-free languages.</title>
<date>1966</date>
<journal>Journal of the ACM,</journal>
<volume>13</volume>
<issue>4</issue>
<contexts>
<context position="16192" citStr="Parikh, 1966" startWordPosition="2937" endWordPosition="2938">Gs. Among several extensions of Petri net with some branching capacity (see e.g. Mayr, 1999; Haddad and Poitrenaud, 2007), two are of singular importance: It turns out that MLIGs in their full generality have since been independently rediscovered under the names vector addition tree automata (de Groote et al., 2004, VATA) and branching VASS (Verma and Goubault-Larrecq, 2005, BVASS). Semilinearity Another interesting consequence of the subsumption of Petri nets by MLIGs is that the former generate some non semilinear languages, i.e. with a Parikh image which is not a semilinear subset of N|Σ |(Parikh, 1966). Hopcroft and Pansiot (1979, Lemma 2.8) exhibit an example of a VASS with a non semilinear reachability set, which we translate as a 2-dimensional right linear MLIG with productions3 (S, e2) → (S, e1), (S, 0) → (A, 0) |(B, 0), (A, e1) → (A, 2e2), (A, 0) → a (S, 0), (B, e1) → b (B, 0) |b, (B, e2) → b (B, 0) |b 3Adding terminal symbols c in each production would result in a lexicalized grammar, still with a non semilinear language. Figure 4: An UVG-dl for Lmix. and (S, e2) as start symbol, that generates the non semilinear language Lnsm = {anb&apos; |0 ≤ n,0 &lt; m ≤ 2n} . Proposition 14 (Hopcroft and </context>
</contexts>
<marker>Parikh, 1966</marker>
<rawString>Rohit J. Parikh. 1966. On context-free languages. Journal of the ACM, 13(4):570–581.</rawString>
</citation>
<citation valid="true">
<authors>
<author>James L Peterson</author>
</authors>
<title>Petri Net Theory and the Modeling of Systems.</title>
<date>1981</date>
<publisher>Prentice Hall.</publisher>
<contexts>
<context position="14488" citStr="Peterson, 1981" startWordPosition="2649" endWordPosition="2650"> in NS. A transition t E T can be fired in a marking m in NS if f(p, t) &gt; m(p) for all p E S, and reaches a new marking m&apos; defined by m&apos;(p) = m(p) − f(p, t) + f(t, p) for all p E S, written m [t) m&apos;. Another view is that place p holds m(p) tokens, f(p, t) of which are first removed when firing t, and then f(t, p) added back. Firings are extended to sequences a in T* by m [E) m, and m [at) m&apos; if there exists m&apos;&apos; with m [a) m&apos;&apos; [t) m&apos;. A labeled Petri net with reachability acceptance is endowed with a labeling homomorphism co : T* —* E* and a finite acceptance set F C NS, defining the language (Peterson, 1981) L(N, co, F) = {co(a) E E* I Im E F, m0 [a) m} . Labeled Petri nets (with acceptance set {0}) are notational variants of right linear MLIGs, defined as having production in (NxNn)x(E*U(E*·(Nx Nn))). This is is case of the MLIG of Example 2, which is given in Petri net form in Figure 3, where 2Petri nets are also equivalent to vector addition system (Karp and Miller, 1969, VAS) and vector addition systems with states (Hopcroft and Pansiot, 1979, VASS). 517 Figure 3: The labeled Petri net corresponding to the right linear MLIG of Example 2. circles depict places (representing MLIG nonterminals a</context>
</contexts>
<marker>Peterson, 1981</marker>
<rawString>James L. Peterson. 1981. Petri Net Theory and the Modeling of Systems. Prentice Hall.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Carl A Petri</author>
</authors>
<title>Kommunikation mit Automaten.</title>
<date>1962</date>
<tech>Ph.D. thesis,</tech>
<institution>University of Bonn.</institution>
<contexts>
<context position="13684" citStr="Petri, 1962" startWordPosition="2471" endWordPosition="2472">copy = {ww I w E {a, b}*} , which does not seem to be generated by any MLIG: Conjecture 11 (Rambow, 1994b). Loopy is not in L(MLIG). Finally, we obtain the following result as a consequence of Lemmas 6 and 8: Corollary 12. L(kr-MLIG) = L(kb-MLIG) = L(kb-MLIGt) is the set of context-free languages. 3 Related Formalisms We review formalisms connected to MLIGs, starting in Section 3.1 with Petri nets and two of their extensions, which turn out to be exactly equivalent to MLIGs. We then consider various linguistic formalisms that employ dominance links (Section 3.2). 3.1 Petri Nets Definition 13 (Petri, 1962). A marked Petri net2 is a tuple N = (S, T, f, m0) where S and T are disjoint finite sets of places and transitions, f a flow function from (S x T) U (T x S) to N, and m0 an initial marking in NS. A transition t E T can be fired in a marking m in NS if f(p, t) &gt; m(p) for all p E S, and reaches a new marking m&apos; defined by m&apos;(p) = m(p) − f(p, t) + f(t, p) for all p E S, written m [t) m&apos;. Another view is that place p holds m(p) tokens, f(p, t) of which are first removed when firing t, and then f(t, p) added back. Firings are extended to sequences a in T* by m [E) m, and m [at) m&apos; if there exists </context>
</contexts>
<marker>Petri, 1962</marker>
<rawString>Carl A. Petri. 1962. Kommunikation mit Automaten. Ph.D. thesis, University of Bonn.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Charles Rackoff</author>
</authors>
<title>The covering and boundedness problems for vector addition systems.</title>
<date>1978</date>
<journal>Theoretical Computer Science,</journal>
<volume>6</volume>
<issue>2</issue>
<contexts>
<context position="24672" citStr="Rackoff (1978)" startWordPosition="4496" endWordPosition="4497"> an empty word membership instance hG0, Ei. Conversely, from a membership instance hG, wi, construct the intersection grammar G0 with L(G0) = L(G)∩{w} (Bar-Hillel et al., 1961), which serves as non emptiness instance hG0i. 4.2 General Case Verma and Goubault-Larrecq (2005) were the first to prove that coverability and boundedness were decidable for BVASS, using a covering tree construction a` la Karp and Miller (1969), thus of non primitive recursive complexity. Demri et al. (2009, Theorems 7, 17, and 18) recently proved tight complexity bounds for these problems, extending earlier results by Rackoff (1978) and Lipton (1976) for Petri nets. Theorem 18 (Demri et al., 2009). Coverability and boundedness for MLIGs are 2EXPTIMEcomplete. Regarding reachability, emptiness, and membership, decidability is still open. A 2EXPSPACE lower bound was recently found by Lazi´c (2010). If a decision procedure exists, we can expect it to be quite complex, as already in the Petri net case, the complexity of the known decision procedures (Mayr, 1981; Kosaraju, 1982) is not primitive recursive (Cardoza et al., 1976, who attribute the idea to Hack). 4.3 k-Bounded and k-Ranked Cases Since k-bounded MLIGs can be conve</context>
<context position="26938" citStr="Rackoff, 1978" startWordPosition="4872" endWordPosition="4873">grammars with SMC. Corollary 20. Let k ≥ 1; k-boundedness for MLIGs is EXPTIME-complete. Proof. For the lower bound, consider an instance hG, Fi of coverability for a 1-bounded MLIG G, which is EXPTIME-hard according to Theorem 19. Add to the MLIG G a fresh nonterminal E and the productions {(A, x) → (E, x) |(A, x) ∈ F} ∪ {(E, 0) → (E, ez) |0 &lt; i ≤ n} , which make it non k-bounded iff the coverability instance was positive. 520 Problem Lower bound Upper bound Petri net k-Boundedness PSPACE (Jones et al., 1977) PSPACE (Jones et al., 1977) Petri net Boundedness EXPSPACE (Lipton, 1976) EXPSPACE (Rackoff, 1978) Petri net {Emptiness, Membership} EXPSPACE (Lipton, 1976) Decidable, not primitive recursive (Mayr, 1981; Kosaraju, 1982) {MLIG, MLIG¢} k-Boundedness EXPTIME (Corollary 20) EXPTIME (Corollary 20) {MLIG, MLIG¢} Boundedness 2EXPTIME (Demri et al., 2009) 2EXPTIME (Demri et al., 2009) {MLIG, MLIG¢} Emptiness 2EXPSPACE (Lazi´c, 2010) Not known to be decidable MLIG Membership {kb-MLIG, kb-MLIG¢} Emptiness EXPTIME (Theorem 19) EXPTIME (Theorem 19) kb-MLIG Membership {MLIG¢, kb-MLIG¢} Membership NPTIME (Koller and Rambow, 2007) NPTIME (trivial) kr-MLIG {Emptiness, Membership} PTIME (Jones and Laaser,</context>
</contexts>
<marker>Rackoff, 1978</marker>
<rawString>Charles Rackoff. 1978. The covering and boundedness problems for vector addition systems. Theoretical Computer Science, 6(2):223–231.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Owen Rambow</author>
<author>K Vijay-Shanker</author>
<author>David Weir</author>
</authors>
<title>D-tree grammars.</title>
<date>1995</date>
<booktitle>In ACL’95,</booktitle>
<pages>151--158</pages>
<publisher>ACL Press.</publisher>
<contexts>
<context position="2136" citStr="Rambow et al., 1995" startWordPosition="332" endWordPosition="335"> and the accusative den K¨uhlschrank. Rambow (1994b) introduced a formalism, unordered vector grammars with dominance links (UVG-dls), for modeling such phenomena. These grammars are defined by vectors of contextfree productions along with dominance links that Figure 1: A vector of productions for the verb repariert together with its two complements. should be enforced during derivations; for instance, Figure 1 shows how a flexible order between the complements of repariert could be expressed in an UVG-dl. Similar dominance mechanisms have been employed in various tree description formalisms (Rambow et al., 1995; Rambow et al., 2001; Candito and Kahane, 1998; Kallmeyer, 2001; Guillaume and Perrier, 2010) and TAG extensions (Becker et al., 1991; Rambow, 1994a). However, the prime motivation for this survey is another grammatical formalism defined in the same article: multiset-valued linear indexed grammars (Rambow, 1994b, MLIGs), which can be seen as a low-level variant of UVG-dls that uses multisets to emulate unfulfilled dominance links in partial derivations. It is a natural extension of Petri nets, with broader scope than just UVG-dls; indeed, it has been independently rediscovered by de Groote et</context>
</contexts>
<marker>Rambow, Vijay-Shanker, Weir, 1995</marker>
<rawString>Owen Rambow, K. Vijay-Shanker, and David Weir. 1995. D-tree grammars. In ACL’95, pages 151–158. ACL Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Owen Rambow</author>
<author>David Weir</author>
<author>K Vijay-Shanker</author>
</authors>
<title>D-tree substitution grammars.</title>
<date>2001</date>
<journal>Computational Linguistics,</journal>
<volume>27</volume>
<issue>1</issue>
<contexts>
<context position="2157" citStr="Rambow et al., 2001" startWordPosition="336" endWordPosition="339">en K¨uhlschrank. Rambow (1994b) introduced a formalism, unordered vector grammars with dominance links (UVG-dls), for modeling such phenomena. These grammars are defined by vectors of contextfree productions along with dominance links that Figure 1: A vector of productions for the verb repariert together with its two complements. should be enforced during derivations; for instance, Figure 1 shows how a flexible order between the complements of repariert could be expressed in an UVG-dl. Similar dominance mechanisms have been employed in various tree description formalisms (Rambow et al., 1995; Rambow et al., 2001; Candito and Kahane, 1998; Kallmeyer, 2001; Guillaume and Perrier, 2010) and TAG extensions (Becker et al., 1991; Rambow, 1994a). However, the prime motivation for this survey is another grammatical formalism defined in the same article: multiset-valued linear indexed grammars (Rambow, 1994b, MLIGs), which can be seen as a low-level variant of UVG-dls that uses multisets to emulate unfulfilled dominance links in partial derivations. It is a natural extension of Petri nets, with broader scope than just UVG-dls; indeed, it has been independently rediscovered by de Groote et al. (2004) in the co</context>
<context position="20706" citStr="Rambow et al., 2001" startWordPosition="3792" endWordPosition="3795">n strict UVGdls by bounding the (total) number of pending dominance links in any derivation. Lexicalization has now its usual definition: for every vector ({pi,1, ... , pi,ki}, Di) in W, at least one of the pi,j should contain at least one terminal in its right part—we have then G(UVG-dlt) C G(MLIGt). More on Dominance Links Dominance links are quite common in tree description formalisms, where they were already in use in D-theory (Marcus et al., 1983) and in quasi-tree semantics for fbTAGs (Vijay-Shanker, 1992). In particular, D-tree substitution grammars are essentially the same as UVG-dls (Rambow et al., 2001), and quite a few other tree description formalisms subsume them (Candito and Kahane, 1998; Kallmeyer, 2001; Guillaume and Perrier, 2010). Another class of grammars are vector TAGs (V-TAGs), which extend TAGs and MCTAGs using dominance links (Becker et al., 1991; Rambow, 1994a; Champollion, 2007), subsuming again UVG-dls. 4 Computational Complexity We study in this section the complexity of several decision problems on MLIGs, prominently of emptiness and membership problems, in the general (Section 4.2), k-bounded (Section 4.3), and lexicalized cases (Section 4.4). Table 1 sums up the known co</context>
</contexts>
<marker>Rambow, Weir, Vijay-Shanker, 2001</marker>
<rawString>Owen Rambow, David Weir, and K. Vijay-Shanker. 2001. D-tree substitution grammars. Computational Linguistics, 27(1):89–121.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Owen Rambow</author>
</authors>
<title>Formal and Computational Aspects of Natural Language Syntax.</title>
<date>1994</date>
<tech>Ph.D. thesis,</tech>
<institution>University of Pennsylvania.</institution>
<contexts>
<context position="941" citStr="Rambow, 1994" startWordPosition="148" endWordPosition="150"> definition of multiset-valued linear indexed grammars (MLIGs) by Rambow (1994b), and inspiring quite a few recent formalisms. It turns out that MLIGs have since been rediscovered and reused in a variety of contexts, and that the complexity of their emptiness problem has become the key to several open questions in computer science. We survey complexity results and open issues on MLIGs and related formalisms, and provide new complexity bounds for some linguistically motivated restrictions. 1 Introduction Scrambling constructions, as found in German and other SOV languages (Becker et al., 1991; Rambow, 1994a; Lichte, 2007), cause notorious difficulties to linguistic modeling in classical grammar formalisms like HPSG or TAG. A well-known illustration of this situation is given in the following two German sentences for “that Peter has repaired the fridge today” (Lichte, 2007), dass [Peter] heute [den K¨uhlschrank] repariert hat that Peternom today the fridgeacc repaired has dass [den K¨uhlschrank] heute [Peter] repariert hat that the fridgeacc today Peternom repaired has with a flexible word order between the two complements of repariert, namely between the nominative Peter and the accusative den </context>
<context position="2284" citStr="Rambow, 1994" startWordPosition="358" endWordPosition="359">enomena. These grammars are defined by vectors of contextfree productions along with dominance links that Figure 1: A vector of productions for the verb repariert together with its two complements. should be enforced during derivations; for instance, Figure 1 shows how a flexible order between the complements of repariert could be expressed in an UVG-dl. Similar dominance mechanisms have been employed in various tree description formalisms (Rambow et al., 1995; Rambow et al., 2001; Candito and Kahane, 1998; Kallmeyer, 2001; Guillaume and Perrier, 2010) and TAG extensions (Becker et al., 1991; Rambow, 1994a). However, the prime motivation for this survey is another grammatical formalism defined in the same article: multiset-valued linear indexed grammars (Rambow, 1994b, MLIGs), which can be seen as a low-level variant of UVG-dls that uses multisets to emulate unfulfilled dominance links in partial derivations. It is a natural extension of Petri nets, with broader scope than just UVG-dls; indeed, it has been independently rediscovered by de Groote et al. (2004) in the context of linear logic, and by Verma and Goubault-Larrecq (2005) in that of equational theories. Moreover, the decidability of i</context>
<context position="5779" citStr="Rambow, 1994" startWordPosition="928" endWordPosition="929">rs of dimension n. The i-th component of a vector x in Nn is x(i), 0 denotes the null vector, 1 the vector with 1 values, and ei the vector with 1 as its i-th component and 0 everywhere else. The ordering ≤ on Nn is the componentwise ordering: x ≤ y iff x(i) ≤ y(i) for all 0 &lt; i ≤ n. The size of a vector refers to the size of its binary encoding: |x |= Pni=1 1 + max(0, blo92 x(i)c). We refer the reader unfamiliar with complexity classes and notions such as hardness or LOGSPACE reductions to classical textbooks (e.g. Papadimitriou, 1994). 2 Multiset-Valued Linear Indexed Grammars Definition 1 (Rambow, 1994b). An ndimensional multiset-valued linear indexed grammar (MLIG) is a tuple G = hN, E, P, (5, x0)i where N is a finite set of nonterminal symbols, E a finite alphabet disjoint from N, V = (N ×Nn)]E the vocabulary, P a finite set of productions in (N × Nn) × V *, and (5, x0) ∈ N × Nn the start symbol. Productions are more easily written as (A,x) → u0(B1,x1)u1 ··· um(Bm,xm)um+1 (*) with each ui in E* and each (Bi, xi) in N × Nn. The derivation relation ⇒ over sequences in V * is defined by S(A,y)S&apos; ⇒ Su0(B1,y1)u1 ··· um(Bm,ym)um+1S&apos; if S and S&apos; are in V *, a production of form (*) appears in P,</context>
<context position="7952" citStr="Rambow (1994" startWordPosition="1415" endWordPosition="1416"> S, (1, 0, 1) S, (2, 1, 2) c S, (2, 1, 1) a S, (1, 1, 1) a S, (0, 1, 1) b S, (0, 0, 1) c S, (0, 0, 0) E Figure 2: A derivation for bcaabc in the grammar of Example 2. nonterminal (A, x) → (B1, x1)(B2, x2) or (A, x) → (B1, x1), with a in E, A, B1, B2 in N, and x, x1, x2 in Nn. Using standard constructions, any MLIG can be put into ETF in linear time or logarithmic space. A MLIG is in restricted index normal form (RINF) if the productions in P are of form (A,0) → a, (A,0) → (B,ei), or (A,ei) → (B,0), with A, B in N, 0 &lt; i ≤ n, and a in (E∪(N ×{0}))*. The direct translation into RINF proposed by Rambow (1994a) is exponential if we consider a binary encoding of vectors, but using techniques developed for Petri nets (Dufourd and Finkel, 1999), this blowup can be avoided: Proposition 3. For any MLIG, one can construct an equivalent MLIG in RINF in logarithmic space. 2.2 Restrictions Two restrictions on dominance links have been suggested in an attempt to reduce their complexity, sometimes in conjunction: lexicalization and k-boundedness. We provide here characterizations for them in terms of MLIGs. We can combine the two restrictions, thus defining the class of kbounded lexicalized MLIGs. Lexicaliza</context>
<context position="10912" citStr="Rambow, 1994" startWordPosition="1947" endWordPosition="1948">e transformed into an equivalent CFG G&apos; in time O(|G |· (n + 1)k3). Proof. We assume G to be in ETF, at the expense of a linear time factor. Each A in N is then mapped to at most (n + 1)k nonterminals (A, y) in N&apos; = N × Nn with En i=1 y(i) ≤ k. Finally, for each production (A, x) → (B1, x1)(B2, x2) of P, at most (n + 1)k3 choices are possible for productions (A, y) → (B1, y1)(B2, y2) with (A, y), (B1, y1), and (B2, y2) in N&apos;. A definition quite similar to k-rankedness can be found in the Petri net literature: 1This restriction is slightly stronger than that of linearly restricted derivations (Rambow, 1994b), but still allows to capture UVG-dl lexicalization. 516 Definition 7. A MLIG derivation a0 ==&gt;. a1 ==&gt;. · · · ==&gt;. ap is k-bounded for some k &gt; 0 if, no vector with a coordinate larger than k can appear in any aj, i.e. for all x in Nn such that there exist 0 &lt; j &lt; p, 6, 6&apos; in V * and A in N with aj = S(A, x)S&apos;, and for all 1 &lt; i &lt; n, one has x(i) &lt; k. A MLIG is k-bounded (noted kb-MLIG) if any derivation starting with a0 = (S, x0) is kbounded. It is bounded if there exists k such that it is k-bounded. The SMC in minimalist grammars translates exactly into 1-boundedness of the corresponding </context>
<context position="12644" citStr="Rambow, 1994" startWordPosition="2299" endWordPosition="2300">(A, x) —* (B1, x1)(B2, x2) of P, each nonterminal (A, y) of N&apos; with x &lt; y, and each index 0 &lt; i &lt; n, there are at most k + 1 ways to split (y(i) − x(i)) &lt; k into y1(i) + y2(i) and span a production (A, y) —* (B1, x1 + y1)(B2, x2 + y2) of P&apos;. Overall, each production is mapped to at most (k + 1)n2 context-free productions. One can check that the grammar of Example 2 is not bounded (to see this, repeatedly apply production (S, 0) —* (S,1)), as expected since MIX is not a context-free language. 2.3 Language Properties Let us mention a few more results pertaining to MLIG languages: Proposition 9 (Rambow, 1994b). L(MLIG) is a substitution closed full abstract family of languages. Proposition 10 (Rambow, 1994b). L(MLIGt) is a subset of the context-sensitive languages. Natural languages are known for displaying some limited cross-serial dependencies, as witnessed in linguistic analyses, e.g. of SwissGerman (Shieber, 1985), Dutch (Kroch and Santorini, 1991), or Tagalog (Maclachlan and Rambow, 2002). This includes the copy language Lcopy = {ww I w E {a, b}*} , which does not seem to be generated by any MLIG: Conjecture 11 (Rambow, 1994b). Loopy is not in L(MLIG). Finally, we obtain the following result</context>
<context position="17099" citStr="Rambow (1994" startWordPosition="3105" endWordPosition="3106">2) → b (B, 0) |b 3Adding terminal symbols c in each production would result in a lexicalized grammar, still with a non semilinear language. Figure 4: An UVG-dl for Lmix. and (S, e2) as start symbol, that generates the non semilinear language Lnsm = {anb&apos; |0 ≤ n,0 &lt; m ≤ 2n} . Proposition 14 (Hopcroft and Pansiot, 1979). There exist non semilinear Petri nets languages. The non semilinearity of MLIGs entails that of all the grammatical formalisms mentioned next in Section 3.2; this answers in particular a conjecture by Kallmeyer (2001) about the semilinearity of VTAGs. 3.2 Dominance Links UVG-dl Rambow (1994b) introduced UVG-dls as a formal model for scrambling and tree description grammars. Definition 15 (Rambow, 1994b). An unordered vector grammars with dominance links (UVG-dl) is a tuple G = hN, E, W, Si where N and E are disjoint finite sets of nonterminals and terminals, V = N ∪ E is the vocabulary, W is a set of vectors of productions with dominance links, i.e. each element of W is a pair (P, D) where each P is a multiset of productions in N × V * and D is a relation from nonterminals in the right parts of productions in P to nonterminals in their left parts, and S in N is the start symbol.</context>
<context position="19313" citStr="Rambow, 1994" startWordPosition="3544" endWordPosition="3545">mmar of Figure 4 into a MLIG stems from the impossibility of splitting any of its vectors (P,D) into two nonempty ones (P1, D1) and (P2, D2) while preserving the dominance relation, i.e. with P = P1U+P2 and D = D1U+D2. This strictness property can be enforced without loss of generality since we can always add to each vector (P, D) a production S —* S with a dominance link to each production in P. This was performed on the second vector in Figure 4; remark that the grammar without this addition is an unordered vector grammar (Cremers and Mayer, 1974, UVG), and still generates Lmix. Theorem 16 (Rambow, 1994b). Every MLIG can be transformed into an equivalent UVG-dl in logarithmic space, and conversely. Proof sketch. One can check that Rambow (1994b)’s proof of G(MLIG) C G(UVG-dl) incurs at most a quadratic blowup from a MLIG in RINF, and invoke Proposition 3. More precisely, given a MLIG in RINF, productions of form (A,0) —* a with A in N and a in (E U (N x {0}))* form singleton vectors, and productions of form (A,0) —* (B,ei) with A, B in N and 0 &lt; i &lt; n need to be paired with a production of form (C,ei) —* (D,0) for some C and D in N in order to form a vector with a dominance link between B an</context>
<context position="20982" citStr="Rambow, 1994" startWordPosition="3837" endWordPosition="3838">G-dlt) C G(MLIGt). More on Dominance Links Dominance links are quite common in tree description formalisms, where they were already in use in D-theory (Marcus et al., 1983) and in quasi-tree semantics for fbTAGs (Vijay-Shanker, 1992). In particular, D-tree substitution grammars are essentially the same as UVG-dls (Rambow et al., 2001), and quite a few other tree description formalisms subsume them (Candito and Kahane, 1998; Kallmeyer, 2001; Guillaume and Perrier, 2010). Another class of grammars are vector TAGs (V-TAGs), which extend TAGs and MCTAGs using dominance links (Becker et al., 1991; Rambow, 1994a; Champollion, 2007), subsuming again UVG-dls. 4 Computational Complexity We study in this section the complexity of several decision problems on MLIGs, prominently of emptiness and membership problems, in the general (Section 4.2), k-bounded (Section 4.3), and lexicalized cases (Section 4.4). Table 1 sums up the known complexity results. Since by Theorem 16 we can translate between MLIGs and UVG-dls in logarithmic space, the complexity results on UVG-dls will be the same. 4.1 Decision Problems Let us first review some decision problems of interest. In the following, !9 denotes a MLIG (N, E, </context>
</contexts>
<marker>Rambow, 1994</marker>
<rawString>Owen Rambow. 1994a. Formal and Computational Aspects of Natural Language Syntax. Ph.D. thesis, University of Pennsylvania.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Owen Rambow</author>
</authors>
<title>Multiset-valued linear index grammars: imposing dominance constraints on derivations.</title>
<date>1994</date>
<booktitle>In ACL’94,</booktitle>
<pages>263--270</pages>
<publisher>ACL Press.</publisher>
<contexts>
<context position="941" citStr="Rambow, 1994" startWordPosition="148" endWordPosition="150"> definition of multiset-valued linear indexed grammars (MLIGs) by Rambow (1994b), and inspiring quite a few recent formalisms. It turns out that MLIGs have since been rediscovered and reused in a variety of contexts, and that the complexity of their emptiness problem has become the key to several open questions in computer science. We survey complexity results and open issues on MLIGs and related formalisms, and provide new complexity bounds for some linguistically motivated restrictions. 1 Introduction Scrambling constructions, as found in German and other SOV languages (Becker et al., 1991; Rambow, 1994a; Lichte, 2007), cause notorious difficulties to linguistic modeling in classical grammar formalisms like HPSG or TAG. A well-known illustration of this situation is given in the following two German sentences for “that Peter has repaired the fridge today” (Lichte, 2007), dass [Peter] heute [den K¨uhlschrank] repariert hat that Peternom today the fridgeacc repaired has dass [den K¨uhlschrank] heute [Peter] repariert hat that the fridgeacc today Peternom repaired has with a flexible word order between the two complements of repariert, namely between the nominative Peter and the accusative den </context>
<context position="2284" citStr="Rambow, 1994" startWordPosition="358" endWordPosition="359">enomena. These grammars are defined by vectors of contextfree productions along with dominance links that Figure 1: A vector of productions for the verb repariert together with its two complements. should be enforced during derivations; for instance, Figure 1 shows how a flexible order between the complements of repariert could be expressed in an UVG-dl. Similar dominance mechanisms have been employed in various tree description formalisms (Rambow et al., 1995; Rambow et al., 2001; Candito and Kahane, 1998; Kallmeyer, 2001; Guillaume and Perrier, 2010) and TAG extensions (Becker et al., 1991; Rambow, 1994a). However, the prime motivation for this survey is another grammatical formalism defined in the same article: multiset-valued linear indexed grammars (Rambow, 1994b, MLIGs), which can be seen as a low-level variant of UVG-dls that uses multisets to emulate unfulfilled dominance links in partial derivations. It is a natural extension of Petri nets, with broader scope than just UVG-dls; indeed, it has been independently rediscovered by de Groote et al. (2004) in the context of linear logic, and by Verma and Goubault-Larrecq (2005) in that of equational theories. Moreover, the decidability of i</context>
<context position="5779" citStr="Rambow, 1994" startWordPosition="928" endWordPosition="929">rs of dimension n. The i-th component of a vector x in Nn is x(i), 0 denotes the null vector, 1 the vector with 1 values, and ei the vector with 1 as its i-th component and 0 everywhere else. The ordering ≤ on Nn is the componentwise ordering: x ≤ y iff x(i) ≤ y(i) for all 0 &lt; i ≤ n. The size of a vector refers to the size of its binary encoding: |x |= Pni=1 1 + max(0, blo92 x(i)c). We refer the reader unfamiliar with complexity classes and notions such as hardness or LOGSPACE reductions to classical textbooks (e.g. Papadimitriou, 1994). 2 Multiset-Valued Linear Indexed Grammars Definition 1 (Rambow, 1994b). An ndimensional multiset-valued linear indexed grammar (MLIG) is a tuple G = hN, E, P, (5, x0)i where N is a finite set of nonterminal symbols, E a finite alphabet disjoint from N, V = (N ×Nn)]E the vocabulary, P a finite set of productions in (N × Nn) × V *, and (5, x0) ∈ N × Nn the start symbol. Productions are more easily written as (A,x) → u0(B1,x1)u1 ··· um(Bm,xm)um+1 (*) with each ui in E* and each (Bi, xi) in N × Nn. The derivation relation ⇒ over sequences in V * is defined by S(A,y)S&apos; ⇒ Su0(B1,y1)u1 ··· um(Bm,ym)um+1S&apos; if S and S&apos; are in V *, a production of form (*) appears in P,</context>
<context position="7952" citStr="Rambow (1994" startWordPosition="1415" endWordPosition="1416"> S, (1, 0, 1) S, (2, 1, 2) c S, (2, 1, 1) a S, (1, 1, 1) a S, (0, 1, 1) b S, (0, 0, 1) c S, (0, 0, 0) E Figure 2: A derivation for bcaabc in the grammar of Example 2. nonterminal (A, x) → (B1, x1)(B2, x2) or (A, x) → (B1, x1), with a in E, A, B1, B2 in N, and x, x1, x2 in Nn. Using standard constructions, any MLIG can be put into ETF in linear time or logarithmic space. A MLIG is in restricted index normal form (RINF) if the productions in P are of form (A,0) → a, (A,0) → (B,ei), or (A,ei) → (B,0), with A, B in N, 0 &lt; i ≤ n, and a in (E∪(N ×{0}))*. The direct translation into RINF proposed by Rambow (1994a) is exponential if we consider a binary encoding of vectors, but using techniques developed for Petri nets (Dufourd and Finkel, 1999), this blowup can be avoided: Proposition 3. For any MLIG, one can construct an equivalent MLIG in RINF in logarithmic space. 2.2 Restrictions Two restrictions on dominance links have been suggested in an attempt to reduce their complexity, sometimes in conjunction: lexicalization and k-boundedness. We provide here characterizations for them in terms of MLIGs. We can combine the two restrictions, thus defining the class of kbounded lexicalized MLIGs. Lexicaliza</context>
<context position="10912" citStr="Rambow, 1994" startWordPosition="1947" endWordPosition="1948">e transformed into an equivalent CFG G&apos; in time O(|G |· (n + 1)k3). Proof. We assume G to be in ETF, at the expense of a linear time factor. Each A in N is then mapped to at most (n + 1)k nonterminals (A, y) in N&apos; = N × Nn with En i=1 y(i) ≤ k. Finally, for each production (A, x) → (B1, x1)(B2, x2) of P, at most (n + 1)k3 choices are possible for productions (A, y) → (B1, y1)(B2, y2) with (A, y), (B1, y1), and (B2, y2) in N&apos;. A definition quite similar to k-rankedness can be found in the Petri net literature: 1This restriction is slightly stronger than that of linearly restricted derivations (Rambow, 1994b), but still allows to capture UVG-dl lexicalization. 516 Definition 7. A MLIG derivation a0 ==&gt;. a1 ==&gt;. · · · ==&gt;. ap is k-bounded for some k &gt; 0 if, no vector with a coordinate larger than k can appear in any aj, i.e. for all x in Nn such that there exist 0 &lt; j &lt; p, 6, 6&apos; in V * and A in N with aj = S(A, x)S&apos;, and for all 1 &lt; i &lt; n, one has x(i) &lt; k. A MLIG is k-bounded (noted kb-MLIG) if any derivation starting with a0 = (S, x0) is kbounded. It is bounded if there exists k such that it is k-bounded. The SMC in minimalist grammars translates exactly into 1-boundedness of the corresponding </context>
<context position="12644" citStr="Rambow, 1994" startWordPosition="2299" endWordPosition="2300">(A, x) —* (B1, x1)(B2, x2) of P, each nonterminal (A, y) of N&apos; with x &lt; y, and each index 0 &lt; i &lt; n, there are at most k + 1 ways to split (y(i) − x(i)) &lt; k into y1(i) + y2(i) and span a production (A, y) —* (B1, x1 + y1)(B2, x2 + y2) of P&apos;. Overall, each production is mapped to at most (k + 1)n2 context-free productions. One can check that the grammar of Example 2 is not bounded (to see this, repeatedly apply production (S, 0) —* (S,1)), as expected since MIX is not a context-free language. 2.3 Language Properties Let us mention a few more results pertaining to MLIG languages: Proposition 9 (Rambow, 1994b). L(MLIG) is a substitution closed full abstract family of languages. Proposition 10 (Rambow, 1994b). L(MLIGt) is a subset of the context-sensitive languages. Natural languages are known for displaying some limited cross-serial dependencies, as witnessed in linguistic analyses, e.g. of SwissGerman (Shieber, 1985), Dutch (Kroch and Santorini, 1991), or Tagalog (Maclachlan and Rambow, 2002). This includes the copy language Lcopy = {ww I w E {a, b}*} , which does not seem to be generated by any MLIG: Conjecture 11 (Rambow, 1994b). Loopy is not in L(MLIG). Finally, we obtain the following result</context>
<context position="17099" citStr="Rambow (1994" startWordPosition="3105" endWordPosition="3106">2) → b (B, 0) |b 3Adding terminal symbols c in each production would result in a lexicalized grammar, still with a non semilinear language. Figure 4: An UVG-dl for Lmix. and (S, e2) as start symbol, that generates the non semilinear language Lnsm = {anb&apos; |0 ≤ n,0 &lt; m ≤ 2n} . Proposition 14 (Hopcroft and Pansiot, 1979). There exist non semilinear Petri nets languages. The non semilinearity of MLIGs entails that of all the grammatical formalisms mentioned next in Section 3.2; this answers in particular a conjecture by Kallmeyer (2001) about the semilinearity of VTAGs. 3.2 Dominance Links UVG-dl Rambow (1994b) introduced UVG-dls as a formal model for scrambling and tree description grammars. Definition 15 (Rambow, 1994b). An unordered vector grammars with dominance links (UVG-dl) is a tuple G = hN, E, W, Si where N and E are disjoint finite sets of nonterminals and terminals, V = N ∪ E is the vocabulary, W is a set of vectors of productions with dominance links, i.e. each element of W is a pair (P, D) where each P is a multiset of productions in N × V * and D is a relation from nonterminals in the right parts of productions in P to nonterminals in their left parts, and S in N is the start symbol.</context>
<context position="19313" citStr="Rambow, 1994" startWordPosition="3544" endWordPosition="3545">mmar of Figure 4 into a MLIG stems from the impossibility of splitting any of its vectors (P,D) into two nonempty ones (P1, D1) and (P2, D2) while preserving the dominance relation, i.e. with P = P1U+P2 and D = D1U+D2. This strictness property can be enforced without loss of generality since we can always add to each vector (P, D) a production S —* S with a dominance link to each production in P. This was performed on the second vector in Figure 4; remark that the grammar without this addition is an unordered vector grammar (Cremers and Mayer, 1974, UVG), and still generates Lmix. Theorem 16 (Rambow, 1994b). Every MLIG can be transformed into an equivalent UVG-dl in logarithmic space, and conversely. Proof sketch. One can check that Rambow (1994b)’s proof of G(MLIG) C G(UVG-dl) incurs at most a quadratic blowup from a MLIG in RINF, and invoke Proposition 3. More precisely, given a MLIG in RINF, productions of form (A,0) —* a with A in N and a in (E U (N x {0}))* form singleton vectors, and productions of form (A,0) —* (B,ei) with A, B in N and 0 &lt; i &lt; n need to be paired with a production of form (C,ei) —* (D,0) for some C and D in N in order to form a vector with a dominance link between B an</context>
<context position="20982" citStr="Rambow, 1994" startWordPosition="3837" endWordPosition="3838">G-dlt) C G(MLIGt). More on Dominance Links Dominance links are quite common in tree description formalisms, where they were already in use in D-theory (Marcus et al., 1983) and in quasi-tree semantics for fbTAGs (Vijay-Shanker, 1992). In particular, D-tree substitution grammars are essentially the same as UVG-dls (Rambow et al., 2001), and quite a few other tree description formalisms subsume them (Candito and Kahane, 1998; Kallmeyer, 2001; Guillaume and Perrier, 2010). Another class of grammars are vector TAGs (V-TAGs), which extend TAGs and MCTAGs using dominance links (Becker et al., 1991; Rambow, 1994a; Champollion, 2007), subsuming again UVG-dls. 4 Computational Complexity We study in this section the complexity of several decision problems on MLIGs, prominently of emptiness and membership problems, in the general (Section 4.2), k-bounded (Section 4.3), and lexicalized cases (Section 4.4). Table 1 sums up the known complexity results. Since by Theorem 16 we can translate between MLIGs and UVG-dls in logarithmic space, the complexity results on UVG-dls will be the same. 4.1 Decision Problems Let us first review some decision problems of interest. In the following, !9 denotes a MLIG (N, E, </context>
</contexts>
<marker>Rambow, 1994</marker>
<rawString>Owen Rambow. 1994b. Multiset-valued linear index grammars: imposing dominance constraints on derivations. In ACL’94, pages 263–270. ACL Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sylvain Salvati</author>
</authors>
<title>Minimalist grammars in the light of logic.</title>
<date>2010</date>
<journal>Manuscript.</journal>
<contexts>
<context position="3525" citStr="Salvati, 2010" startWordPosition="544" endWordPosition="545">oved to be quite challenging and is still uncertain, with several open questions depending on its resolution: • provability in multiplicative exponential linear logic (de Groote et al., 2004), • emptiness and membership of abstract categorial grammars (de Groote et al., 2004; Yoshinaka and Kanazawa, 2005), • emptiness and membership of Stabler (1997)’s minimalist grammars without 514 Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics, pages 514–524, Uppsala, Sweden, 11-16 July 2010. c�2010 Association for Computational Linguistics shortest move constraint (Salvati, 2010), • satisfiability of first-order logic on data trees (Boja´nczyk et al., 2009), and of course • emptiness and membership for the various formalisms that embed UVG-dls. Unsurprisingly in the light of their importance in different fields, several authors have started investigating the complexity of decisions problems for MLIGs (Demri et al., 2009; Lazi´c, 2010). We survey the current state of affairs, with a particular emphasis on two points: 1. the applicability of complexity results to UVG-dls, which is needed if we are to conclude anything on related formalisms with dominance links, 2. the e</context>
<context position="11533" citStr="Salvati, 2010" startWordPosition="2078" endWordPosition="2079"> still allows to capture UVG-dl lexicalization. 516 Definition 7. A MLIG derivation a0 ==&gt;. a1 ==&gt;. · · · ==&gt;. ap is k-bounded for some k &gt; 0 if, no vector with a coordinate larger than k can appear in any aj, i.e. for all x in Nn such that there exist 0 &lt; j &lt; p, 6, 6&apos; in V * and A in N with aj = S(A, x)S&apos;, and for all 1 &lt; i &lt; n, one has x(i) &lt; k. A MLIG is k-bounded (noted kb-MLIG) if any derivation starting with a0 = (S, x0) is kbounded. It is bounded if there exists k such that it is k-bounded. The SMC in minimalist grammars translates exactly into 1-boundedness of the corresponding MLIGs (Salvati, 2010). Clearly, any k-ranked MLIG is also k-bounded, and conversely any n-dimensional k-bounded MLIG is (kn)-ranked, thus a MLIG is ranked iff it is bounded. The counterpart to Lemma 6 is: Lemma 8. Any n-dimensional k-bounded MLIG !9 can be transformed into an equivalent CFG !9&apos; in time O(1!91 · (k + 1)n2). Proof. We assume !9 to be in ETF, at the expense of a linear time factor. Each A in N is then mapped to at most (k+1)n nonterminals (A, y) in N&apos; = N x {0, ... , k}n. Finally, for each production (A, x) —* (B1, x1)(B2, x2) of P, each nonterminal (A, y) of N&apos; with x &lt; y, and each index 0 &lt; i &lt; n, </context>
</contexts>
<marker>Salvati, 2010</marker>
<rawString>Sylvain Salvati. 2010. Minimalist grammars in the light of logic. Manuscript.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stuart M Shieber</author>
</authors>
<title>Evidence against the contextfreeness of natural language.</title>
<date>1985</date>
<journal>Linguistics and Philosophy,</journal>
<volume>8</volume>
<issue>3</issue>
<contexts>
<context position="12960" citStr="Shieber, 1985" startWordPosition="2344" endWordPosition="2345">ductions. One can check that the grammar of Example 2 is not bounded (to see this, repeatedly apply production (S, 0) —* (S,1)), as expected since MIX is not a context-free language. 2.3 Language Properties Let us mention a few more results pertaining to MLIG languages: Proposition 9 (Rambow, 1994b). L(MLIG) is a substitution closed full abstract family of languages. Proposition 10 (Rambow, 1994b). L(MLIGt) is a subset of the context-sensitive languages. Natural languages are known for displaying some limited cross-serial dependencies, as witnessed in linguistic analyses, e.g. of SwissGerman (Shieber, 1985), Dutch (Kroch and Santorini, 1991), or Tagalog (Maclachlan and Rambow, 2002). This includes the copy language Lcopy = {ww I w E {a, b}*} , which does not seem to be generated by any MLIG: Conjecture 11 (Rambow, 1994b). Loopy is not in L(MLIG). Finally, we obtain the following result as a consequence of Lemmas 6 and 8: Corollary 12. L(kr-MLIG) = L(kb-MLIG) = L(kb-MLIGt) is the set of context-free languages. 3 Related Formalisms We review formalisms connected to MLIGs, starting in Section 3.1 with Petri nets and two of their extensions, which turn out to be exactly equivalent to MLIGs. We then </context>
</contexts>
<marker>Shieber, 1985</marker>
<rawString>Stuart M. Shieber. 1985. Evidence against the contextfreeness of natural language. Linguistics and Philosophy, 8(3):333–343.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Anders Søgaard</author>
<author>Timm Lichte</author>
<author>Wolfgang Maier</author>
</authors>
<title>The complexity of linguistically motivated extensions of tree-adjoining grammar.</title>
<date>2007</date>
<booktitle>In RANLP’07,</booktitle>
<pages>548--553</pages>
<contexts>
<context position="9511" citStr="Søgaard et al., 2007" startWordPosition="1658" endWordPosition="1661"> c &gt; 0 if p ≤ c·|w|.1 A MLIG is lexicalized if there exists c such that any terminal derivation starting from (S, x0) is c-lexicalized, and we denote by L(MLIG`) the set of lexicalized MLIG languages. Looking at the grammar of Example 2, any terminal derivation (S, 0) ⇒p w verifies p = 4·|w| 3 + 1, and the grammar is thus lexicalized. Boundedness As dominance links model longdistance dependencies, bounding the number of simultaneously pending links can be motivated on competence/performance grounds (Joshi et al., 2000; Kallmeyer and Parmentier, 2008), and on complexity/expressiveness grounds (Søgaard et al., 2007; Kallmeyer and Parmentier, 2008; Chiang and Scheffler, 2008). The shortest move constraint (SMC) introduced by Stabler (1997) to enforce a strong form of minimality also falls into this category of restrictions. Definition 5. A MLIG derivation a0 ⇒ a1 ⇒ · · · ⇒ ap is of rank k for some k ≥ 0 if, no vector with a sum of components larger than k can appear in any aj, i.e. for all x in Nn such that there exist 0 ≤ j ≤ p, 6, 6&apos; in V * and A in N with aj = 6(A, x)6&apos;, one has Eni=1 x(i) ≤ k. A MLIG is k-ranked (noted kr-MLIG) if any derivation starting with a0 = (S, x0) is of rank k. It is ranked i</context>
<context position="28931" citStr="Søgaard et al., 2007" startWordPosition="5195" endWordPosition="5198"> only tractable class of MLIGs for uniform membership, using again Lemma 6 to obtain a CFG of polynomial size—actually exponential in k, but k is assumed to be fixed for this problem. An obvious lower bound is that of membership in CFGs, which is PTIME-complete (Jones and Laaser, 1976). 4.4 Lexicalized Case Unlike the high complexity lower bounds of the previous two sections, NPTIME-hardness results for uniform membership have been proved for a number of formalisms related to MLIGs, from the commutative CFG viewpoint (Huynh, 1983; Barton, 1985; Esparza, 1995), or from more specialized models (Søgaard et al., 2007; Champollion, 2007; Koller and Rambow, 2007). We focus here on this last proof, which reduces from the normal dominance graph configurability problem (Althaus et al., 2003), as it allows to derive NPTIME-hardness even in highly restricted grammars. Theorem 21 (Koller and Rambow, 2007). Uniform membership of (!9, w) for !9 a 1-bounded, lexicalized, UVG-dl with finite language is NPTIME-hard, even for |w |= 1. Proof sketch. Set 5 as start symbol and add a production 5 —* aA to the sole vector of the grammar !9 constructed by Koller and Rambow (2007) from a normal dominance graph, with dominance</context>
</contexts>
<marker>Søgaard, Lichte, Maier, 2007</marker>
<rawString>Anders Søgaard, Timm Lichte, and Wolfgang Maier. 2007. The complexity of linguistically motivated extensions of tree-adjoining grammar. In RANLP’07, pages 548–553.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Edward P Stabler</author>
</authors>
<title>Derivational minimalism.</title>
<date>1997</date>
<booktitle>of Lecture Notes in Computer Science,</booktitle>
<volume>96</volume>
<pages>68--95</pages>
<editor>In Christian Retor´e, editor,</editor>
<publisher>Springer.</publisher>
<contexts>
<context position="3263" citStr="Stabler (1997)" startWordPosition="511" endWordPosition="512">scope than just UVG-dls; indeed, it has been independently rediscovered by de Groote et al. (2004) in the context of linear logic, and by Verma and Goubault-Larrecq (2005) in that of equational theories. Moreover, the decidability of its emptiness problem has proved to be quite challenging and is still uncertain, with several open questions depending on its resolution: • provability in multiplicative exponential linear logic (de Groote et al., 2004), • emptiness and membership of abstract categorial grammars (de Groote et al., 2004; Yoshinaka and Kanazawa, 2005), • emptiness and membership of Stabler (1997)’s minimalist grammars without 514 Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics, pages 514–524, Uppsala, Sweden, 11-16 July 2010. c�2010 Association for Computational Linguistics shortest move constraint (Salvati, 2010), • satisfiability of first-order logic on data trees (Boja´nczyk et al., 2009), and of course • emptiness and membership for the various formalisms that embed UVG-dls. Unsurprisingly in the light of their importance in different fields, several authors have started investigating the complexity of decisions problems for MLIGs (Demri et </context>
<context position="9637" citStr="Stabler (1997)" startWordPosition="1679" endWordPosition="1680">ed, and we denote by L(MLIG`) the set of lexicalized MLIG languages. Looking at the grammar of Example 2, any terminal derivation (S, 0) ⇒p w verifies p = 4·|w| 3 + 1, and the grammar is thus lexicalized. Boundedness As dominance links model longdistance dependencies, bounding the number of simultaneously pending links can be motivated on competence/performance grounds (Joshi et al., 2000; Kallmeyer and Parmentier, 2008), and on complexity/expressiveness grounds (Søgaard et al., 2007; Kallmeyer and Parmentier, 2008; Chiang and Scheffler, 2008). The shortest move constraint (SMC) introduced by Stabler (1997) to enforce a strong form of minimality also falls into this category of restrictions. Definition 5. A MLIG derivation a0 ⇒ a1 ⇒ · · · ⇒ ap is of rank k for some k ≥ 0 if, no vector with a sum of components larger than k can appear in any aj, i.e. for all x in Nn such that there exist 0 ≤ j ≤ p, 6, 6&apos; in V * and A in N with aj = 6(A, x)6&apos;, one has Eni=1 x(i) ≤ k. A MLIG is k-ranked (noted kr-MLIG) if any derivation starting with a0 = (S, x0) is of rank k. It is ranked if there exists k such that it is k-ranked. A 0-ranked MLIG is simply a context-free grammar (CFG), and we have more generally </context>
</contexts>
<marker>Stabler, 1997</marker>
<rawString>Edward P. Stabler. 1997. Derivational minimalism. In Christian Retor´e, editor, LACL’96, volume 1328 of Lecture Notes in Computer Science, pages 68–95. Springer.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kumar Neeraj Verma</author>
<author>Jean Goubault-Larrecq</author>
</authors>
<title>Karp-Miller trees for a branching extension of VASS.</title>
<date>2005</date>
<journal>Discrete Mathematics and Theoretical Computer Science,</journal>
<volume>7</volume>
<issue>1</issue>
<contexts>
<context position="2820" citStr="Verma and Goubault-Larrecq (2005)" startWordPosition="439" endWordPosition="442">llmeyer, 2001; Guillaume and Perrier, 2010) and TAG extensions (Becker et al., 1991; Rambow, 1994a). However, the prime motivation for this survey is another grammatical formalism defined in the same article: multiset-valued linear indexed grammars (Rambow, 1994b, MLIGs), which can be seen as a low-level variant of UVG-dls that uses multisets to emulate unfulfilled dominance links in partial derivations. It is a natural extension of Petri nets, with broader scope than just UVG-dls; indeed, it has been independently rediscovered by de Groote et al. (2004) in the context of linear logic, and by Verma and Goubault-Larrecq (2005) in that of equational theories. Moreover, the decidability of its emptiness problem has proved to be quite challenging and is still uncertain, with several open questions depending on its resolution: • provability in multiplicative exponential linear logic (de Groote et al., 2004), • emptiness and membership of abstract categorial grammars (de Groote et al., 2004; Yoshinaka and Kanazawa, 2005), • emptiness and membership of Stabler (1997)’s minimalist grammars without 514 Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics, pages 514–524, Uppsala, Sweden, 1</context>
<context position="15955" citStr="Verma and Goubault-Larrecq, 2005" startWordPosition="2897" endWordPosition="2900">, c-labeled transition, with f(S, t) = f(e3, t) = f(t, S) = 1 and f(e1, t) = f(e2,t) = f(t, e1) = f(t, e2) = f(t, e3) = 0. Extensions The subsumption of Petri nets is not innocuous, as it allows to derive lower bounds on the computational complexity of MLIGs. Among several extensions of Petri net with some branching capacity (see e.g. Mayr, 1999; Haddad and Poitrenaud, 2007), two are of singular importance: It turns out that MLIGs in their full generality have since been independently rediscovered under the names vector addition tree automata (de Groote et al., 2004, VATA) and branching VASS (Verma and Goubault-Larrecq, 2005, BVASS). Semilinearity Another interesting consequence of the subsumption of Petri nets by MLIGs is that the former generate some non semilinear languages, i.e. with a Parikh image which is not a semilinear subset of N|Σ |(Parikh, 1966). Hopcroft and Pansiot (1979, Lemma 2.8) exhibit an example of a VASS with a non semilinear reachability set, which we translate as a 2-dimensional right linear MLIG with productions3 (S, e2) → (S, e1), (S, 0) → (A, 0) |(B, 0), (A, e1) → (A, 2e2), (A, 0) → a (S, 0), (B, e1) → b (B, 0) |b, (B, e2) → b (B, 0) |b 3Adding terminal symbols c in each production would</context>
<context position="24331" citStr="Verma and Goubault-Larrecq (2005)" startWordPosition="4439" endWordPosition="4442">nce was positive. Conversely, from a non emptiness instance hGi, put the grammar in ETF and define F to match all terminal productions, i.e. F = {(A, x) |(A, x) → a ∈ P, a ∈ E∪{E}}, and then remove all terminal productions in order to obtain a reachability instance hG0, Fi. For (3), from a non emptiness instance hGi, replace all terminals in G by E to obtain an empty word membership instance hG0, Ei. Conversely, from a membership instance hG, wi, construct the intersection grammar G0 with L(G0) = L(G)∩{w} (Bar-Hillel et al., 1961), which serves as non emptiness instance hG0i. 4.2 General Case Verma and Goubault-Larrecq (2005) were the first to prove that coverability and boundedness were decidable for BVASS, using a covering tree construction a` la Karp and Miller (1969), thus of non primitive recursive complexity. Demri et al. (2009, Theorems 7, 17, and 18) recently proved tight complexity bounds for these problems, extending earlier results by Rackoff (1978) and Lipton (1976) for Petri nets. Theorem 18 (Demri et al., 2009). Coverability and boundedness for MLIGs are 2EXPTIMEcomplete. Regarding reachability, emptiness, and membership, decidability is still open. A 2EXPSPACE lower bound was recently found by Lazi´</context>
</contexts>
<marker>Verma, Goubault-Larrecq, 2005</marker>
<rawString>Kumar Neeraj Verma and Jean Goubault-Larrecq. 2005. Karp-Miller trees for a branching extension of VASS. Discrete Mathematics and Theoretical Computer Science, 7(1):217–230.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Vijay-Shanker</author>
</authors>
<title>Using descriptions of trees in a tree adjoining grammar.</title>
<date>1992</date>
<journal>Computational Linguistics,</journal>
<volume>18</volume>
<issue>4</issue>
<contexts>
<context position="20603" citStr="Vijay-Shanker, 1992" startWordPosition="3779" endWordPosition="3780">idering strict UVG-dls. The restrictions to k-ranked and k-bounded grammars find natural counterparts in strict UVGdls by bounding the (total) number of pending dominance links in any derivation. Lexicalization has now its usual definition: for every vector ({pi,1, ... , pi,ki}, Di) in W, at least one of the pi,j should contain at least one terminal in its right part—we have then G(UVG-dlt) C G(MLIGt). More on Dominance Links Dominance links are quite common in tree description formalisms, where they were already in use in D-theory (Marcus et al., 1983) and in quasi-tree semantics for fbTAGs (Vijay-Shanker, 1992). In particular, D-tree substitution grammars are essentially the same as UVG-dls (Rambow et al., 2001), and quite a few other tree description formalisms subsume them (Candito and Kahane, 1998; Kallmeyer, 2001; Guillaume and Perrier, 2010). Another class of grammars are vector TAGs (V-TAGs), which extend TAGs and MCTAGs using dominance links (Becker et al., 1991; Rambow, 1994a; Champollion, 2007), subsuming again UVG-dls. 4 Computational Complexity We study in this section the complexity of several decision problems on MLIGs, prominently of emptiness and membership problems, in the general (S</context>
</contexts>
<marker>Vijay-Shanker, 1992</marker>
<rawString>K. Vijay-Shanker. 1992. Using descriptions of trees in a tree adjoining grammar. Computational Linguistics, 18(4):481–517.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ryo Yoshinaka</author>
<author>Makoto Kanazawa</author>
</authors>
<title>The complexity and generative capacity of lexicalized abstract categorial grammars.</title>
<date>2005</date>
<booktitle>of Lecture Notes in Computer Science,</booktitle>
<volume>3492</volume>
<pages>330--346</pages>
<editor>In Philippe Blache, Edward Stabler, Joan Busquets, and Richard Moot, editors, LACL’05,</editor>
<publisher>Springer.</publisher>
<contexts>
<context position="3217" citStr="Yoshinaka and Kanazawa, 2005" startWordPosition="502" endWordPosition="505">tions. It is a natural extension of Petri nets, with broader scope than just UVG-dls; indeed, it has been independently rediscovered by de Groote et al. (2004) in the context of linear logic, and by Verma and Goubault-Larrecq (2005) in that of equational theories. Moreover, the decidability of its emptiness problem has proved to be quite challenging and is still uncertain, with several open questions depending on its resolution: • provability in multiplicative exponential linear logic (de Groote et al., 2004), • emptiness and membership of abstract categorial grammars (de Groote et al., 2004; Yoshinaka and Kanazawa, 2005), • emptiness and membership of Stabler (1997)’s minimalist grammars without 514 Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics, pages 514–524, Uppsala, Sweden, 11-16 July 2010. c�2010 Association for Computational Linguistics shortest move constraint (Salvati, 2010), • satisfiability of first-order logic on data trees (Boja´nczyk et al., 2009), and of course • emptiness and membership for the various formalisms that embed UVG-dls. Unsurprisingly in the light of their importance in different fields, several authors have started investigating the complex</context>
</contexts>
<marker>Yoshinaka, Kanazawa, 2005</marker>
<rawString>Ryo Yoshinaka and Makoto Kanazawa. 2005. The complexity and generative capacity of lexicalized abstract categorial grammars. In Philippe Blache, Edward Stabler, Joan Busquets, and Richard Moot, editors, LACL’05, volume 3492 of Lecture Notes in Computer Science, pages 330–346. Springer.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>