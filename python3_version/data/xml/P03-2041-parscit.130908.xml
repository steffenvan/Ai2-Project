<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.007393">
<title confidence="0.971567">
Learning Non-Isomorphic Tree Mappings for Machine Translation
</title>
<author confidence="0.869194">
Jason Eisner, Computer Science Dept., Johns Hopkins Univ. &lt;jason@cs.jhu.edu&gt;
</author>
<sectionHeader confidence="0.906694" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999191333333333">
Often one may wish to learn a tree-to-tree mapping, training it
on unaligned pairs of trees, or on a mixture of trees and strings.
Unlike previous statistical formalisms (limited to isomorphic
trees), synchronous TSG allows local distortion of the tree topol-
ogy. We reformulate it to permit dependency trees, and sketch
EM/Viterbi algorithms for alignment, training, and decoding.
</bodyText>
<sectionHeader confidence="0.970297" genericHeader="method">
1 Introduction: Tree-to-Tree Mappings
</sectionHeader>
<bodyText confidence="0.992737216216216">
Statistical machine translation systems are trained on
pairs of sentences that are mutual translations. For exam-
ple, (beaucoup d’enfants donnent un baiser a` Sam, kids
kiss Sam quite often). This translation is somewhat free,
as is common in naturally occurring data. The first sen-
tence is literally Lots of’children give a kiss to Sam.
This short paper outlines “natural” formalisms and al-
gorithms for training on pairs of trees. Our methods work
on either dependency trees (as shown) or phrase-structure
trees. Note that the depicted trees are not isomorphic.
enfants
Our main concern is to develop models that can align
and learn from these tree pairs despite the “mismatches”
in tree structure. Many “mismatches” are characteristic
of a language pair: e.g., preposition insertion (of → c),
multiword locutions (kiss H give a kiss to; misinform
H wrongly inform), and head-swapping (float down H
descend byfloating). Such systematic mismatches should
be learned by the model, and used during translation.
It is even helpful to learn mismatches that merely tend
to arise during free translation. Knowing that beaucoup
d’ is often deleted will help in aligning the rest of the tree.
When would learned tree-to-tree mappings be useful?
Obviously, in MT, when one has parsers for both the
source and target language. Systems for “deep” anal-
ysis and generation might wish to learn mappings be-
tween deep and surface trees (B¨ohmov´a et al., 2001)
or between syntax and semantics (Shieber and Schabes,
1990). Systems for summarization or paraphrase could
also be trained on tree pairs (Knight and Marcu, 2000).
Non-NLP applications might include comparing student-
written programs to one another or to the correct solution.
Our methods can naturally extend to train on pairs of
forests (including packed forests obtained by chart pars-
ing). The correct tree is presumed to be an element of
the forest. This makes it possible to train even when the
correct parse is not fully known, or not known at all.
</bodyText>
<sectionHeader confidence="0.732376" genericHeader="method">
2 A Natural Proposal: Synchronous TSG
</sectionHeader>
<bodyText confidence="0.999721222222222">
We make the quite natural proposal of using a syn-
chronous tree substitution grammar (STSG). An STSG
is a collection of (ordered) pairs of aligned elementary
trees. These may be combined into a derived pair of
trees. Both the elementary tree pairs and the operation to
combine them will be formalized in later sections.
As an example, the tree pair shown in the introduction
might have been derived by “vertically” assembling the
6 elementary tree pairs below. The — symbol denotes
a frontier node of an elementary tree, which must be
replaced by the circled root of another elementary tree.
If two frontier nodes are linked by a dashed line labeled
with the state X, then they must be replaced by two roots
that are also linked by a dashed line labeled with X.
The elementary trees represent idiomatic translation
“chunks.” The frontier nodes represent unfilled roles in
the chunks, and the states are effectively nonterminals
that specify the type of filler that is required. Thus, don-
nent un baiser a` (“give a kiss to”) corresponds to kiss,
with the French subject matched to the English subject,
and the French indirect object matched to the English
direct object. The states could be more refined than
those shown above: the state for the subject, for exam-
ple, should probably be not NP but a pair (Npl, NP3s).
STSG is simply a version of synchronous tree-
adjoining grammar or STAG (Shieber and Schabes, 1990)
that lacks the adjunction operation. (It is also equivalent
to top-down tree transducers.) What, then, is new here?
First, we know of no previous attempt to learn the
“chunk-to-chunk” mappings. That is, we do not know at
training time how the tree pair of section 1 was derived,
or even what it was derived from. Our approach is to
reconstruct all possible derivations, using dynamic pro-
gramming to decompose the tree pair into aligned pairs
of elementary trees in all possible ways. This produces
a packed forest of derivations, some more probable than
</bodyText>
<figure confidence="0.990217727272727">
donnent
kiss
baiser
a
beaucoup un Sam
d’
Sam often
quite
kids
donnent
Start
kiss
baiser
a
NP
null
(0,Adv)
un
(0,Adv)
null often
beaucoup
NP
NP
null
(0,Adv)
d’
NP
NP
Sam Sam
NP
enfants kids
(0,Adv)
null quite
</figure>
<bodyText confidence="0.99840625">
others. We use an efficient inside-outside algorithm to
do Expectation-Maximization, reestimating the model by
training on all derivations in proportion to their probabil-
ities. The runtime is quite low when the training trees are
fully specified and elementary trees are bounded in size.1
Second, it is not a priori obvious that one can reason-
ably use STSG instead of the slower but more powerful
STAG. TSG can be parsed as fast as CFG. But without
an adjunction operation,2, one cannot break the training
trees into linguistically minimal units. An elementary
tree pair A = (elle est finalement partie, finally she left)
cannot be further decomposed into B = (elle est partie,
she left) and C = (finalement, finally). This appears to
miss a generalization. Our perspective is that the gener-
alization should be picked up by the statistical model that
defines the probability of elementary tree pairs. p(A) can
be defined using mainly the same parameters that define
p(B) and p(C), with the result that p(A) ,: p(B) · p(C).
The balance between the STSG and the statistical model
is summarized in the last paragraph of this paper.
Third, our version of the STSG formalism is more
flexible than previous versions. We carefully address the
case of empty trees, which are needed to handle free-
translation “mismatches.” In the example, an STSG can-
not replace beaucoup d’ (“lots of”) in the NP by quite
often in the VP; instead it must delete the former and in-
sert the latter. Thus we have the alignments (beaucoup
d’, e) and (e, quite often). These require innovations. The
tree-internal deletion of beaucoup d’ is handled by an
empty elementary tree in which the root is itself a fron-
tier node. (The subject frontier node of kiss is replaced
with this frontier node, which is then replaced with kids.)
The tree-peripheral insertion of quite often requires an
English frontier node that is paired with a French null.
We also formulate STSGs flexibly enough that they can
handle both phrase-structure trees and dependency trees.
The latter are small and simple (Alshawi et al., 2000):
tree nodes are words, and there need be no other structure
to recover or align. Selectional preferences and other in-
teractions can be accommodated by enriching the states.
Any STSG has a weakly equivalent SCFG that gen-
erates the same string pairs. So STSG (unlike STAG)
has no real advantage for modeling string pairs.3 But
STSGs can generate a wider variety of tree pairs, e.g.,
non-isomorphic ones. So when actual trees are provided
for training, STSG can be more flexible in aligning them.
1Goodman (2002) presents efficient TSG parsing with un-
bounded elementary trees. Unfortunately, that clever method
does not permit arbitrary models of elementary tree probabili-
ties, nor does it appear to generalize to our synchronous case.
(It would need exponentially many nonterminals to keep track
of an matching of unboundedly many frontier nodes.)
</bodyText>
<footnote confidence="0.973243333333333">
2Or a sister-adjunction operation, for dependency trees.
3However, the binary-branching SCFGs used by Wu (1997)
and Alshawi et al. (2000) are strictly less powerful than STSG.
</footnote>
<sectionHeader confidence="0.990044" genericHeader="method">
3 Past Work
</sectionHeader>
<bodyText confidence="0.999945322580645">
Most statistical MT derives from IBM-style models
(Brown et al., 1993), which ignore syntax and allow ar-
bitrary word-to-word translation. Hence they are able to
align any sentence pair, however mismatched. However,
they have a tendency to translate long sentences into word
salad. Their alignment and translation accuracy improves
when they are forced to translate shallow phrases as con-
tiguous, potentially idiomatic units (Och et al., 1999).
Several researchers have tried putting “more syntax”
into translation models: like us, they use statistical ver-
sions of synchronous grammars, which generate source
and target sentences in parallel and so describe their cor-
respondence.4 This approach offers four features absent
from IBM-style models: (1) a recursive phrase-based
translation, (2) a syntax-based language model, (3) the
ability to condition a word’s translation on the translation
of syntactically related words, and (4) polynomial-time
optimal alignment and decoding (Knight, 1999).
Previous work in statistical synchronous grammars
has been limited to forms of synchronous context-free
grammar (Wu, 1997; Alshawi et al., 2000; Yamada and
Knight, 2001). This means that a sentence and its trans-
lation must have isomorphic syntax trees, although they
may have different numbers of surface words if null
words a are allowed in one or both languages. This rigid-
ity does not fully describe real data.
The one exception is the synchronous DOP approach
of (Poutsma, 2000), which obtains an STSG by decom-
posing aligned training trees in all possible ways (and us-
ing “naive” count-based probability estimates). However,
we would like to estimate a model from unaligned data.
</bodyText>
<sectionHeader confidence="0.997756" genericHeader="method">
4 A Probabilistic TSG Formalism
</sectionHeader>
<bodyText confidence="0.983351816326531">
For expository reasons (and to fill a gap in the literature),
first we formally present non-synchronous TSG. Let Q be
a set of states. Let L be a set of labels that may decorate
nodes or edges. Node labels might be words or nontermi-
nals. Edge labels might include grammatical roles such
as Subject. In many trees, each node’s children have an
order, recorded in labels on the node’s outgoing edges.
An elementary tree is a a tuple (V, V i, E, `, q, s)
where V is a set of nodes; V i C_ V is the set of internal
nodes, and we write V f = V − V i for the set of frontier
nodes; E C_ V i x V is a set of directed edges (thus all
frontier nodes are leaves). The graph (V, E) must be con-
nected and acyclic, and there must be exactly one node
r E V (the root) that has no incoming edges. The func-
tion ` : (V i U E) → L labels each internal node or edge;
q E Q is the root state, and s : V f → Q assigns a fron-
tier state to each frontier node (perhaps including r).
4The joint probability model can be formulated, if desired,
as a language model times a channel model.
A TSG is a set of elementary trees. The generation
process builds up a derived tree T that has the same form
as an elementary tree, and for which V f = 0. Initially,
T is chosen to be any elementary tree whose root state
T.q = Start. As long as T has any frontier nodes, T.V f,
the process expands each frontier node d E T.V f by sub-
stituting at d an elementary tree t whose root state, t.q,
equals d’s frontier state, T.s(d). This operation replaces
T with (T.V U t.V − {d}, T.V i U t.V i, T.E&apos; U t.E, T. B U
t.�, T.q, T.s U t.s − {d, t.q}). Note that a function is re-
garded here as a set of (input, output) pairs. T.E&apos; is a
version of T.E in which d has been been replaced by t.r.
A probabilistic TSG also includes a function p(t  |q),
which, for each state q, gives a conditional probability
distribution over the elementary trees t with root state q.
The generation process uses this distribution to randomly
choose which tree t to substitute at a frontier node of T
having state q. The initial value of T is chosen from p(t |
Start). Thus, the probability of a given derivation is a
product of p(t  |q) terms, one per chosen elementary tree.
There is a natural analogy between (probabilistic)
TSGs and (probabilistic) CFGs. An elementary tree t
with root state q and frontier states ql ... qk (for k &gt; 0) is
analogous to a CFG rule q → t ql ... qk. (By including t
as a terminal symbol in this rule, we ensure that distinct
elementary trees t with the same states correspond to dis-
tinct rules.) Indeed, an equivalent definition of the gener-
ation process first generates a derivation tree from this
derivation CFG, and then combines its terminal nodes t
(which are elementary trees) into the derived tree T.
</bodyText>
<sectionHeader confidence="0.98651" genericHeader="method">
5 Tree Parsing Algorithms for TSG
</sectionHeader>
<bodyText confidence="0.999479936170213">
Given a a grammar G and a derived tree T, we may be in-
terested in constructing the forest of T’s possible deriva-
tion trees (as defined above). We call this tree parsing,
as it finds ways of decomposing T into elementary trees.
Given a node c E T.v, we would like to find all the
potential elementary subtrees t of T whose root t.r could
have contributed c during the derivation of T. Such an
elementary tree is said to fit c, in the sense that it is iso-
morphic to some subgraph of T rooted at c.
The following procedure finds an elementary tree t that
fits c. Freely choose a connected subgraph U of T such
that U is rooted at c (or is empty). Let t.V i be the vertex
set of U. Let t.E be the set of outgoing edges from nodes
in t.Vi to their children, that is, t.E = T.E n (t.V i x
T.V ). Let t.� be the restriction of T.� to t.Vi U t.E, that
is, t.� = T.� n ((t.V i U t.E) x L). Let t.V be the set
of nodes mentioned in t.E, or put t.V = {c} if t.Vi =
t.E = 0. Finally, choose t.q freely from Q, and choose
s : t.Vf → Q to associate states with the frontier nodes
of t; the free choice is because the nodes of the derived
tree T do not specify the states used during the derivation.
How many elementary trees can we find that fit c? Let
us impose an upper bound k on |t.V i |and hence on |U|.
Then in an m-ary tree T, the above procedure considers at
most mk�1
m�1 connected subgraphs U of order &lt; k rooted
at c. For dependency grammars, limiting to m &lt; 6 and
k = 3 is quite reasonable, leaving at most 43 subgraphs
U rooted at each node c, of which the biggest contain
only c, a child c&apos; of c, and a child or sibling of c&apos;. These
will constitute the internal nodes of t, and their remaining
children will be t’s frontier nodes.
However, for each of these 43 subgraphs, we must
jointly hypothesize states for all frontier nodes and the
root node. For |Q |&gt; 1, there are exponentially many
ways to do this. To avoid having exponentially many hy-
potheses, one may restrict the form of possible elemen-
tary trees so that the possible states of each node of t
can be determined somehow from the labels on the corre-
sponding nodes in T. As a simple but useful example, a
node labeled NP might be required to have state NP. Rich
labels on the derived tree essentially provide supervision
as to what the states must have been during the derivation.
The tree parsing algorithm resembles bottom-up chart
parsing under the derivation CFG. But the input is a tree
rather than a string, and the chart is indexed by nodes of
the input tree rather than spans of the input string:5
</bodyText>
<listItem confidence="0.9628198">
1. for each node c of T, in bottom-up order
2. for each q ∈ Q, let ,3c(q) = 0
3. for each elementary tree t that fits c
increment ,3c(t.q) by p(t  |t.q) · �
4. d∈t.V f ,3d(t.s(d))
</listItem>
<bodyText confidence="0.990693875">
The β values are inside probabilities. After running the
algorithm, if r is the root of T, then βr(Start) is the prob-
ability that the grammar generates T.
p(t  |q) in line 4 may be found by hash lookup if the
grammar is stored explicitly, or else by some probabilistic
model that analyzes the structure, labels, and states of the
elementary tree t to compute its probability.
One can mechanically transform this algorithm to
compute outside probabilities, the Viterbi parse, the parse
forest, and other quantities (Goodman, 1999). One can
also apply agenda-based parsing strategies.
For a fixed grammar, the runtime and space are only
O(n) for a tree of n nodes. The grammar constant is the
number of possible fits to a node c of a fixed tree. As
noted above, there usually not many of these (unless the
states are uncertain) and they are simple to enumerate.
As discussed above, an inside-outside algorithm may
be used to compute the expected number of times each
elementary tree t appeared in the derivation of T. That is
the E step of the EM algorithm. In the M step, these ex-
pected counts (collected over a corpus of trees) are used
to reestimate the parameters θ� of p(t  |q). One alternates
O� converges to a local
maximum. The prior p(O� can discourage overfitting.
</bodyText>
<footnote confidence="0.995483666666667">
5We gloss over the standard difficulty that the derivation
CFG may contain a unary rule cycle. For us, such a cycle is
a problem only when it arises solely from single-node trees.
</footnote>
<note confidence="0.434328">
E and M steps till p(corpus  |0� p(
</note>
<sectionHeader confidence="0.83893" genericHeader="method">
6 Extending to Synchronous TSG
</sectionHeader>
<bodyText confidence="0.953280212765958">
We are now prepared to discuss the synchronous case.
A synchronous TSG consists of a set of elementary tree
pairs. An elementary tree pair t is a tuple (t1, t2, q, m, s).
Here t1 and t2 are elementary trees without state la-
bels: we write tj = (Vj,Vji,Ej,`j). q E Q is the
root state as before. m C_ V1f x V2f is a matching
between t1’s and t2’s frontier nodes,6. Let m¯ denote
m U {(d1, null) : d1 is unmatched in m} U {(null, d2) :
d2 is unmatched in m}. Finally, s : m¯ → Q assigns a
state to each frontier node pair or unpaired frontier node.
In the figure of section 2, donnent un baiser a` has 2
frontier nodes and kiss has 3, yielding 13 possible match-
ings. Note that least one English node must remain un-
matched; it still generates a full subtree, aligned with null.
As before, a derived tree pair T has the same form as
an elementary tree pair. The generation process is similar
to before. As long as T. m¯ =� 0, the process expands some
node pair (d1, d2) E T. ¯m. It chooses an elementary tree
pair t such that t.q = T.s(d1, d2). Then for each j = 1, 2,
it substitutes tj at dj if non-null. (If dj is null, then t.q
must guarantee that tj is the special null tree.)
In the probabilistic case, we have a distribution p(t  |q)
just as before, but this time t is an elementary tree pair.
Several natural algorithms are now available to us:
• Training. Given an unaligned tree pair (T1, T2), we
can again find the forest of all possible derivations, with
expected inside-outside counts of the elementary tree
pairs. This allows EM training of the p(t  |q) model.
The algorithm is almost as before. The outer loop iter-
ates bottom-up over nodes c1 of T1; an inner loop iter-
ates bottom-up over c2 of T2. Inside probabilities (for
example) now have the form βc1,c2(q). Although this
brings the complexity up to O(n2), the real complica-
tion is that there can be many fits to (c1, c2). There are
still not too many elementary trees t1 and t2 rooted at c1
and c2; but each (t1, t2) pair may be used in many ele-
mentary tree pairs t, since there are exponentially many
matchings of their frontier nodes. Fortunately, most
pairs of frontier nodes have low β values that indicate
that their subtrees cannot be aligned well; pairing such
nodes in a matching would result in poor global proba-
bility. This observation can be used to prune the space
of matchings greatly.
• 1-best Alignment (if desired). This is just like train-
ing, except that we use the Viterbi algorithm to find the
single best derivation of the input tree pair. This deriva-
tion can be regarded as the optimal syntactic alignment.7
</bodyText>
<footnote confidence="0.983427">
6A matching between A and B is a 1-to-1 correspondence
between a subset of A and a subset of B.
7As free-translation post-processing, one could try to match
pairs of stray subtrees that could have aligned well, according to
the chart, but were forced to align with null for global reasons.
</footnote>
<listItem confidence="0.91465">
• Decoding. We create a forest of possible synchronous
derivations (cf. (Langkilde, 2000)). We chart-parse T1
as much as in section 5, but fitting the left side of an
elementary tree pair to each node. Roughly speaking:
1. for c1 = null and then c1 � E T1.V , in bottom-up order
2. for each q E Q, let Ni1 (q) = −oo
3. for each probable t = (t1, t2, q, m, s/) whose t1 fits c1
4. max p(t  |q) - H(d1,d2)∈ m¯ βd1(s(d1, d2)) into βc1(q)
</listItem>
<bodyText confidence="0.99968775">
We then extract the max-probability synchronous
derivation and return the T2 that it derives. This algo-
rithm is essentially alignment to an unknown tree T2;
we do not loop over its nodes c2, but choose t2 freely.
</bodyText>
<sectionHeader confidence="0.867797" genericHeader="method">
7 Status of the Implementation
</sectionHeader>
<bodyText confidence="0.999642529411765">
We have sketched an EM algorithm to learn the probabil-
ities of elementary tree pairs by training on pairs of full
trees, and a Viterbi decoder to find optimal translations.
We developed and implemented these methods at the
2002 CLSP Summer Workshop at Johns Hopkins Univer-
sity, as part of a team effort (led by Jan Hajiˇc) to translate
dependency trees from surface Czech, to deep Czech, to
deep English, to surface English. For the within-language
translations, it sufficed to use a simplistic, fixed model of
p(t  |q) that relied entirely on morpheme identity.
Team members are now developing real, trainable
models of p(t  |q), such as log-linear models on meaning-
ful features of the tree pair t. Cross-language translation
results await the plugging-in of these interesting models.
The algorithms we have presented serve only to “shrink”
the modeling, training and decoding problems from full
trees to bounded, but still complex, elementary trees.
</bodyText>
<reference confidence="0.981766034482758">
H. Alshawi, S. Bangalore, and S. Douglas. 2000. Learning
dependency translation models as collections of finite state
head transducers. Computational Linguistics, 26(1):45–60.
A. B¨ohmov´a, J. Hajiˇc, E. Hajiˇcov´a, and B. Hladk´a. 2001. The
Prague dependency treebank. In A. Abeill´e, ed., Treebanks:
Building &amp; Using Syntactically Annotated Corpora. Kluwer.
Joshua Goodman. 1999. Semiring parsing. Computational
Linguistics, 25(4):573–605, December.
Joshua Goodman. 2002. Efficient parsing of DOP with PCFG-
reductions. In Rens Bod, Khalil Sima’an, and Remko Scha,
editors, Data Oriented Parsing. CSLI.
Kevin Knight and Daniel Marcu. 2000. Statistics-based
summarization—step 1: Sentence compression. Proc. AAAI.
Kevin Knight. 1999. Decoding complexity in word-replace-
ment translation models. Computational Linguistics, 25(4).
Irene Langkilde. 2000. Forest-based statistical sentence gener-
ation. In Proceedings ofNAACL.
F. Och, C. Tillmann, and H. Ney. 1999. Improved alignment
models for statistical machine translation. Proc. of EMNLP.
A. Poutsma. 2000. Data-oriented translation. Proc. COLING.
Stuart Shieber and Yves Schabes. 1990. Synchronous tree ad-
joining grammars. In Proc. of COLING.
Dekai Wu. 1997. Stochastic inversion transduction grammars
and bilingual parsing ofparallel corpora. Comp. Ling., 23(3).
Kenji Yamada and Kevin Knight. 2001. A syntax-based statis-
tical translation model. In Proceedings ofACL.
This work was supported by ONR grant N00014-01-1-0685,
“Improving Statistical Models Via Text Analyzers Trained
from Parallel Corpora.” The views expressed are the author’s.
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.284054">
<title confidence="0.994903">Learning Non-Isomorphic Tree Mappings for Machine Translation</title>
<affiliation confidence="0.293542">Eisner, Computer Science Dept., Johns Hopkins Univ.</affiliation>
<abstract confidence="0.996793142857143">Often one may wish to learn a tree-to-tree mapping, training it on unaligned pairs of trees, or on a mixture of trees and strings. Unlike previous statistical formalisms (limited to isomorphic TSG local distortion of the tree topology. We reformulate it to permit dependency trees, and sketch EM/Viterbi algorithms for alignment, training, and decoding.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>H Alshawi</author>
<author>S Bangalore</author>
<author>S Douglas</author>
</authors>
<title>Learning dependency translation models as collections of finite state head transducers.</title>
<date>2000</date>
<journal>Computational Linguistics,</journal>
<volume>26</volume>
<issue>1</issue>
<contexts>
<context position="6854" citStr="Alshawi et al., 2000" startWordPosition="1129" endWordPosition="1132">rt the latter. Thus we have the alignments (beaucoup d’, e) and (e, quite often). These require innovations. The tree-internal deletion of beaucoup d’ is handled by an empty elementary tree in which the root is itself a frontier node. (The subject frontier node of kiss is replaced with this frontier node, which is then replaced with kids.) The tree-peripheral insertion of quite often requires an English frontier node that is paired with a French null. We also formulate STSGs flexibly enough that they can handle both phrase-structure trees and dependency trees. The latter are small and simple (Alshawi et al., 2000): tree nodes are words, and there need be no other structure to recover or align. Selectional preferences and other interactions can be accommodated by enriching the states. Any STSG has a weakly equivalent SCFG that generates the same string pairs. So STSG (unlike STAG) has no real advantage for modeling string pairs.3 But STSGs can generate a wider variety of tree pairs, e.g., non-isomorphic ones. So when actual trees are provided for training, STSG can be more flexible in aligning them. 1Goodman (2002) presents efficient TSG parsing with unbounded elementary trees. Unfortunately, that cleve</context>
<context position="9026" citStr="Alshawi et al., 2000" startWordPosition="1458" endWordPosition="1461">els: like us, they use statistical versions of synchronous grammars, which generate source and target sentences in parallel and so describe their correspondence.4 This approach offers four features absent from IBM-style models: (1) a recursive phrase-based translation, (2) a syntax-based language model, (3) the ability to condition a word’s translation on the translation of syntactically related words, and (4) polynomial-time optimal alignment and decoding (Knight, 1999). Previous work in statistical synchronous grammars has been limited to forms of synchronous context-free grammar (Wu, 1997; Alshawi et al., 2000; Yamada and Knight, 2001). This means that a sentence and its translation must have isomorphic syntax trees, although they may have different numbers of surface words if null words a are allowed in one or both languages. This rigidity does not fully describe real data. The one exception is the synchronous DOP approach of (Poutsma, 2000), which obtains an STSG by decomposing aligned training trees in all possible ways (and using “naive” count-based probability estimates). However, we would like to estimate a model from unaligned data. 4 A Probabilistic TSG Formalism For expository reasons (and</context>
</contexts>
<marker>Alshawi, Bangalore, Douglas, 2000</marker>
<rawString>H. Alshawi, S. Bangalore, and S. Douglas. 2000. Learning dependency translation models as collections of finite state head transducers. Computational Linguistics, 26(1):45–60.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A B¨ohmov´a</author>
<author>J Hajiˇc</author>
<author>E Hajiˇcov´a</author>
<author>B Hladk´a</author>
</authors>
<title>The Prague dependency treebank.</title>
<date>2001</date>
<booktitle>Treebanks: Building &amp; Using Syntactically Annotated Corpora.</booktitle>
<editor>In A. Abeill´e, ed.,</editor>
<publisher>Kluwer.</publisher>
<marker>B¨ohmov´a, Hajiˇc, Hajiˇcov´a, Hladk´a, 2001</marker>
<rawString>A. B¨ohmov´a, J. Hajiˇc, E. Hajiˇcov´a, and B. Hladk´a. 2001. The Prague dependency treebank. In A. Abeill´e, ed., Treebanks: Building &amp; Using Syntactically Annotated Corpora. Kluwer.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Joshua Goodman</author>
</authors>
<title>Semiring parsing.</title>
<date>1999</date>
<journal>Computational Linguistics,</journal>
<volume>25</volume>
<issue>4</issue>
<contexts>
<context position="15678" citStr="Goodman, 1999" startWordPosition="2749" endWordPosition="2750">mentary tree t that fits c increment ,3c(t.q) by p(t |t.q) · � 4. d∈t.V f ,3d(t.s(d)) The β values are inside probabilities. After running the algorithm, if r is the root of T, then βr(Start) is the probability that the grammar generates T. p(t |q) in line 4 may be found by hash lookup if the grammar is stored explicitly, or else by some probabilistic model that analyzes the structure, labels, and states of the elementary tree t to compute its probability. One can mechanically transform this algorithm to compute outside probabilities, the Viterbi parse, the parse forest, and other quantities (Goodman, 1999). One can also apply agenda-based parsing strategies. For a fixed grammar, the runtime and space are only O(n) for a tree of n nodes. The grammar constant is the number of possible fits to a node c of a fixed tree. As noted above, there usually not many of these (unless the states are uncertain) and they are simple to enumerate. As discussed above, an inside-outside algorithm may be used to compute the expected number of times each elementary tree t appeared in the derivation of T. That is the E step of the EM algorithm. In the M step, these expected counts (collected over a corpus of trees) a</context>
</contexts>
<marker>Goodman, 1999</marker>
<rawString>Joshua Goodman. 1999. Semiring parsing. Computational Linguistics, 25(4):573–605, December.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Joshua Goodman</author>
</authors>
<title>Efficient parsing of DOP with PCFGreductions.</title>
<date>2002</date>
<booktitle>In Rens Bod, Khalil Sima’an, and Remko Scha, editors, Data Oriented Parsing. CSLI.</booktitle>
<contexts>
<context position="7364" citStr="Goodman (2002)" startWordPosition="1216" endWordPosition="1217">both phrase-structure trees and dependency trees. The latter are small and simple (Alshawi et al., 2000): tree nodes are words, and there need be no other structure to recover or align. Selectional preferences and other interactions can be accommodated by enriching the states. Any STSG has a weakly equivalent SCFG that generates the same string pairs. So STSG (unlike STAG) has no real advantage for modeling string pairs.3 But STSGs can generate a wider variety of tree pairs, e.g., non-isomorphic ones. So when actual trees are provided for training, STSG can be more flexible in aligning them. 1Goodman (2002) presents efficient TSG parsing with unbounded elementary trees. Unfortunately, that clever method does not permit arbitrary models of elementary tree probabilities, nor does it appear to generalize to our synchronous case. (It would need exponentially many nonterminals to keep track of an matching of unboundedly many frontier nodes.) 2Or a sister-adjunction operation, for dependency trees. 3However, the binary-branching SCFGs used by Wu (1997) and Alshawi et al. (2000) are strictly less powerful than STSG. 3 Past Work Most statistical MT derives from IBM-style models (Brown et al., 1993), whi</context>
</contexts>
<marker>Goodman, 2002</marker>
<rawString>Joshua Goodman. 2002. Efficient parsing of DOP with PCFGreductions. In Rens Bod, Khalil Sima’an, and Remko Scha, editors, Data Oriented Parsing. CSLI.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kevin Knight</author>
<author>Daniel Marcu</author>
</authors>
<title>Statistics-based summarization—step 1: Sentence compression.</title>
<date>2000</date>
<booktitle>Proc. AAAI.</booktitle>
<contexts>
<context position="2172" citStr="Knight and Marcu, 2000" startWordPosition="332" endWordPosition="335"> used during translation. It is even helpful to learn mismatches that merely tend to arise during free translation. Knowing that beaucoup d’ is often deleted will help in aligning the rest of the tree. When would learned tree-to-tree mappings be useful? Obviously, in MT, when one has parsers for both the source and target language. Systems for “deep” analysis and generation might wish to learn mappings between deep and surface trees (B¨ohmov´a et al., 2001) or between syntax and semantics (Shieber and Schabes, 1990). Systems for summarization or paraphrase could also be trained on tree pairs (Knight and Marcu, 2000). Non-NLP applications might include comparing studentwritten programs to one another or to the correct solution. Our methods can naturally extend to train on pairs of forests (including packed forests obtained by chart parsing). The correct tree is presumed to be an element of the forest. This makes it possible to train even when the correct parse is not fully known, or not known at all. 2 A Natural Proposal: Synchronous TSG We make the quite natural proposal of using a synchronous tree substitution grammar (STSG). An STSG is a collection of (ordered) pairs of aligned elementary trees. These </context>
</contexts>
<marker>Knight, Marcu, 2000</marker>
<rawString>Kevin Knight and Daniel Marcu. 2000. Statistics-based summarization—step 1: Sentence compression. Proc. AAAI.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kevin Knight</author>
</authors>
<title>Decoding complexity in word-replacement translation models.</title>
<date>1999</date>
<journal>Computational Linguistics,</journal>
<volume>25</volume>
<issue>4</issue>
<contexts>
<context position="8881" citStr="Knight, 1999" startWordPosition="1439" endWordPosition="1440">s as contiguous, potentially idiomatic units (Och et al., 1999). Several researchers have tried putting “more syntax” into translation models: like us, they use statistical versions of synchronous grammars, which generate source and target sentences in parallel and so describe their correspondence.4 This approach offers four features absent from IBM-style models: (1) a recursive phrase-based translation, (2) a syntax-based language model, (3) the ability to condition a word’s translation on the translation of syntactically related words, and (4) polynomial-time optimal alignment and decoding (Knight, 1999). Previous work in statistical synchronous grammars has been limited to forms of synchronous context-free grammar (Wu, 1997; Alshawi et al., 2000; Yamada and Knight, 2001). This means that a sentence and its translation must have isomorphic syntax trees, although they may have different numbers of surface words if null words a are allowed in one or both languages. This rigidity does not fully describe real data. The one exception is the synchronous DOP approach of (Poutsma, 2000), which obtains an STSG by decomposing aligned training trees in all possible ways (and using “naive” count-based pr</context>
</contexts>
<marker>Knight, 1999</marker>
<rawString>Kevin Knight. 1999. Decoding complexity in word-replacement translation models. Computational Linguistics, 25(4).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Irene Langkilde</author>
</authors>
<title>Forest-based statistical sentence generation.</title>
<date>2000</date>
<booktitle>In Proceedings ofNAACL.</booktitle>
<contexts>
<context position="19637" citStr="Langkilde, 2000" startWordPosition="3479" endWordPosition="3480">eatly. • 1-best Alignment (if desired). This is just like training, except that we use the Viterbi algorithm to find the single best derivation of the input tree pair. This derivation can be regarded as the optimal syntactic alignment.7 6A matching between A and B is a 1-to-1 correspondence between a subset of A and a subset of B. 7As free-translation post-processing, one could try to match pairs of stray subtrees that could have aligned well, according to the chart, but were forced to align with null for global reasons. • Decoding. We create a forest of possible synchronous derivations (cf. (Langkilde, 2000)). We chart-parse T1 as much as in section 5, but fitting the left side of an elementary tree pair to each node. Roughly speaking: 1. for c1 = null and then c1 � E T1.V , in bottom-up order 2. for each q E Q, let Ni1 (q) = −oo 3. for each probable t = (t1, t2, q, m, s/) whose t1 fits c1 4. max p(t |q) - H(d1,d2)∈ m¯ βd1(s(d1, d2)) into βc1(q) We then extract the max-probability synchronous derivation and return the T2 that it derives. This algorithm is essentially alignment to an unknown tree T2; we do not loop over its nodes c2, but choose t2 freely. 7 Status of the Implementation We have ske</context>
</contexts>
<marker>Langkilde, 2000</marker>
<rawString>Irene Langkilde. 2000. Forest-based statistical sentence generation. In Proceedings ofNAACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F Och</author>
<author>C Tillmann</author>
<author>H Ney</author>
</authors>
<title>Improved alignment models for statistical machine translation.</title>
<date>1999</date>
<booktitle>Proc. of EMNLP. A. Poutsma.</booktitle>
<contexts>
<context position="8331" citStr="Och et al., 1999" startWordPosition="1360" endWordPosition="1363">adjunction operation, for dependency trees. 3However, the binary-branching SCFGs used by Wu (1997) and Alshawi et al. (2000) are strictly less powerful than STSG. 3 Past Work Most statistical MT derives from IBM-style models (Brown et al., 1993), which ignore syntax and allow arbitrary word-to-word translation. Hence they are able to align any sentence pair, however mismatched. However, they have a tendency to translate long sentences into word salad. Their alignment and translation accuracy improves when they are forced to translate shallow phrases as contiguous, potentially idiomatic units (Och et al., 1999). Several researchers have tried putting “more syntax” into translation models: like us, they use statistical versions of synchronous grammars, which generate source and target sentences in parallel and so describe their correspondence.4 This approach offers four features absent from IBM-style models: (1) a recursive phrase-based translation, (2) a syntax-based language model, (3) the ability to condition a word’s translation on the translation of syntactically related words, and (4) polynomial-time optimal alignment and decoding (Knight, 1999). Previous work in statistical synchronous grammar</context>
</contexts>
<marker>Och, Tillmann, Ney, 1999</marker>
<rawString>F. Och, C. Tillmann, and H. Ney. 1999. Improved alignment models for statistical machine translation. Proc. of EMNLP. A. Poutsma. 2000. Data-oriented translation. Proc. COLING. Stuart Shieber and Yves Schabes. 1990. Synchronous tree adjoining grammars. In Proc. of COLING.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Dekai Wu</author>
</authors>
<title>Stochastic inversion transduction grammars and bilingual parsing ofparallel corpora.</title>
<date>1997</date>
<journal>Comp. Ling.,</journal>
<booktitle>In Proceedings ofACL.</booktitle>
<volume>23</volume>
<issue>3</issue>
<contexts>
<context position="7812" citStr="Wu (1997)" startWordPosition="1281" endWordPosition="1282">der variety of tree pairs, e.g., non-isomorphic ones. So when actual trees are provided for training, STSG can be more flexible in aligning them. 1Goodman (2002) presents efficient TSG parsing with unbounded elementary trees. Unfortunately, that clever method does not permit arbitrary models of elementary tree probabilities, nor does it appear to generalize to our synchronous case. (It would need exponentially many nonterminals to keep track of an matching of unboundedly many frontier nodes.) 2Or a sister-adjunction operation, for dependency trees. 3However, the binary-branching SCFGs used by Wu (1997) and Alshawi et al. (2000) are strictly less powerful than STSG. 3 Past Work Most statistical MT derives from IBM-style models (Brown et al., 1993), which ignore syntax and allow arbitrary word-to-word translation. Hence they are able to align any sentence pair, however mismatched. However, they have a tendency to translate long sentences into word salad. Their alignment and translation accuracy improves when they are forced to translate shallow phrases as contiguous, potentially idiomatic units (Och et al., 1999). Several researchers have tried putting “more syntax” into translation models: l</context>
</contexts>
<marker>Wu, 1997</marker>
<rawString>Dekai Wu. 1997. Stochastic inversion transduction grammars and bilingual parsing ofparallel corpora. Comp. Ling., 23(3). Kenji Yamada and Kevin Knight. 2001. A syntax-based statistical translation model. In Proceedings ofACL.</rawString>
</citation>
<citation valid="false">
<title>This work was supported by ONR grant N00014-01-1-0685, “Improving Statistical Models Via Text Analyzers Trained from Parallel Corpora.” The views expressed are the author’s.</title>
<marker></marker>
<rawString>This work was supported by ONR grant N00014-01-1-0685, “Improving Statistical Models Via Text Analyzers Trained from Parallel Corpora.” The views expressed are the author’s.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>